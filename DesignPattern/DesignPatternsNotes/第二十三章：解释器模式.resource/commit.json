{"compress":true,"commitItems":[["64872c22-e85e-411a-bd4c-d509497c0292",1573826265514,"# 第二十三章：解释器模式\n\n## 一、四则运算问题\n\n通过解释器模式来实现四则运算，如计算 a+b-c 的值，具体要求\n\n- 先输入表达式的形式，比如 a+b+c-d+e,  要求表达式的字母不能重复\n\n- 在分别输入 a ,b, c, d, e 的值\n\n- 最后求出结果：如图\n\n![1573824364696](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.resource/1573824364696.png)\n\n## 二、传统方案解决四则运算问题分析\n\n- 编写一个**方法**，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果\n\n- 问题分析：如果加入新的运算符，比如 * / ( 等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱， 不够清晰.\n\n- 解决方案：可以考虑使用**解释器模式**， 即： 表达式 ->    解释器(可以有多种)    ->    结果\n\n## 三、解释器模式基本介绍\n\n基本介绍\n\n- 在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器\n\n- 解释器模式（Interpreter Pattern）：**是指给定一个语言(表达式)**，**定义它的文法的一种表示**，并**定义一个解释器**， 使用该**解释器来解释语言中的句子(表达式**)\n\n- 应用场景\n  - 应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树\n  - 一些重复出现的问题可以用一种简单的语言来表达\n  - 一个简单语法需要解释的场景\n\n- 这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等\n\n## 四、解释器模式的原理类图\n\n​        ![1573824939986](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.resource/1573824939986.png)\n\n\n\n\n对原理类图的说明-即(解释器模式的角色及职责)\n\n- Context: 是环境角色,含有解释器之外的全局信息.\n\n- AbstractExpression: 抽象表达式， 声明一个抽象的解释操作,这个方法为抽象语法树中所有的节点所共享\n\n- TerminalExpression: 为终结符表达式, 实现与文法中的终结符相关的解释操作\n\n- NonTermialExpression: 为非终结符表达式，为文法中的非终结符实现解释操作.\n\n- 说明： 输入 Context he TerminalExpression  信息通过 Client 输入即可\n\n## 五、解释器模式来实现四则\n\n- 应用实例要求\n\n通过解释器模式来实现四则运算， 如计算 a+b-c 的值\n\n-  思路分析和图解(类图)\n\n ![1573825009503](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.resource/1573825009503.png)\n\n-  代码实现\n\n计算抽象类\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\nimport java.util.Stack;\n\npublic class Calculator {\n\n\t// 定义表达式\n\tprivate Expression expression;\n\n\t// 构造函数传参，并解析\n\tpublic Calculator(String expStr) { // expStr = a+b\n\t\t// 安排运算先后顺序\n\t\tStack<Expression> stack = new Stack<>();\n\t\t// 表达式拆分成字符数组 \n\t\tchar[] charArray = expStr.toCharArray();// [a, +, b]\n\n\t\tExpression left = null;\n\t\tExpression right = null;\n\t\t//遍历我们的字符数组， 即遍历  [a, +, b]\n\t\t//针对不同的情况，做处理\n\t\tfor (int i = 0; i < charArray.length; i++) {\n\t\t\tswitch (charArray[i]) {\n\t\t\tcase '+': //\n\t\t\t\tleft = stack.pop();// 从stack取出left => \"a\"\n\t\t\t\tright = new VarExpression(String.valueOf(charArray[++i]));// 取出右表达式 \"b\"\n\t\t\t\tstack.push(new AddExpression(left, right));// 然后根据得到left 和 right 构建 AddExpresson加入stack\n\t\t\t\tbreak;\n\t\t\tcase '-': // \n\t\t\t\tleft = stack.pop();\n\t\t\t\tright = new VarExpression(String.valueOf(charArray[++i]));\n\t\t\t\tstack.push(new SubExpression(left, right));\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\t//如果是一个 Var 就创建要给 VarExpression 对象，并push到 stack\n\t\t\t\tstack.push(new VarExpression(String.valueOf(charArray[i])));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//当遍历完整个 charArray 数组后，stack 就得到最后Expression\n\t\tthis.expression = stack.pop();\n\t}\n\n\tpublic int run(HashMap<String, Integer> var) {\n\t\t//最后将表达式a+b和 var = {a=10,b=20}\n\t\t//然后传递给expression的interpreter进行解释执行\n\t\treturn this.expression.interpreter(var);\n\t}\n}\n```\n\n表达式抽象类\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * 抽象类表达式，通过HashMap 键值对, 可以获取到变量的值\n */\npublic abstract class Expression {\n\t// a + b - c\n\t// 解释公式和数值, key 就是公式(表达式) 参数[a,b,c], value就是就是具体值\n\t// HashMap {a=10, b=20}\n\tpublic abstract int interpreter(HashMap<String, Integer> var);\n}\n\n```\n\n变量的解释器\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\n\n\n/**\n * 变量的解释器\n * @author Administrator\n *\n */\npublic class VarExpression extends Expression {\n\n\tprivate String key; // key=a,key=b,key=c\n\n\tpublic VarExpression(String key) {\n\t\tthis.key = key;\n\t}\n\n\t// var 就是{a=10, b=20}\n\t// interpreter 根据 变量名称，返回对应值\n\t@Override\n\tpublic int interpreter(HashMap<String, Integer> var) {\n\t\treturn var.get(this.key);\n\t}\n}\n\n```\n\n抽象运算符号解释器\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * 抽象运算符号解析器 这里，每个运算符号，都只和自己左右两个数字有关系，\n * 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类\n * \n * @author Administrator\n *\n */\npublic class SymbolExpression extends Expression {\n\n\tprotected Expression left;\n\tprotected Expression right;\n\n\tpublic SymbolExpression(Expression left, Expression right) {\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n\n\t//因为 SymbolExpression 是让其子类来实现，因此 interpreter 是一个默认实现\n\t@Override\n\tpublic int interpreter(HashMap<String, Integer> var) {\n\t\treturn 0;\n\t}\n}\n\n```\n\n具体的符号解释器\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * 加法解释器\n * @author Administrator\n *\n */\npublic class AddExpression extends SymbolExpression  {\n\n\tpublic AddExpression(Expression left, Expression right) {\n\t\tsuper(left, right);\n\t}\n\n\t//处理相加\n\t//var 仍然是 {a=10,b=20}..\n\t//一会我们debug 源码,就ok\n\t@Override\n    public int interpreter(HashMap<String, Integer> var) {\n\t\t//super.left.interpreter(var) ： 返回 left 表达式对应的值 a = 10\n\t\t//super.right.interpreter(var): 返回right 表达式对应值 b = 20\n\t\treturn super.left.interpreter(var) + super.right.interpreter(var);\n\t}\n}\n\n//--------------------------------------------------------------------\npackage com.atguigu.interpreter;\n\nimport java.util.HashMap;\n\npublic class SubExpression extends SymbolExpression {\n\n\tpublic SubExpression(Expression left, Expression right) {\n\t\tsuper(left, right);\n\t}\n\n\t//求出left 和 right 表达式相减后的结果\n\t@Override\n    public int interpreter(HashMap<String, Integer> var) {\n\t\treturn super.left.interpreter(var) - super.right.interpreter(var);\n\t}\n}\n\n```\n\n使用抽象类\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class ClientTest {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tString expStr = getExpStr(); // a+b\n\t\tHashMap<String, Integer> var = getValue(expStr);// var {a=10, b=20}\n\t\tCalculator calculator = new Calculator(expStr);\n\t\tSystem.out.println(\"运算结果：\" + expStr + \"=\" + calculator.run(var));\n\t}\n\n\t// 获得表达式\n\tpublic static String getExpStr() throws IOException {\n\t\tSystem.out.print(\"请输入表达式：\");\n\t\treturn (new BufferedReader(new InputStreamReader(System.in))).readLine();\n\t}\n\n\t// 获得值映射\n\tpublic static HashMap<String, Integer> getValue(String expStr) throws IOException {\n\t\tHashMap<String, Integer> map = new HashMap<>();\n\n\t\tfor (char ch : expStr.toCharArray()) {\n\t\t\tif (ch != '+' && ch != '-') {\n\t\t\t\tif (!map.containsKey(String.valueOf(ch))) {\n\t\t\t\t\tSystem.out.print(\"请输入\" + String.valueOf(ch) + \"的值：\");\n\t\t\t\t\tString in = (new BufferedReader(new InputStreamReader(System.in))).readLine();\n\t\t\t\t\tmap.put(String.valueOf(ch), Integer.valueOf(in));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n}\n\n```\n\n\n\n\n## 六、解释器模式在Spring 框架应用的源码剖析\n\n \n\n- Spring 框架中 SpelExpressionParser 就使用到解释器模式\n\n- 代码分析+Debug 源码\n\n![1573825466578](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.resource/1573825466578.png)\n\n-  说明\n\n​        ![1573825481239](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.resource/1573825481239.png)\n\n\n## 七、解释器模式的注意事项和细节\n\n- 当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性\n\n- 应用场景：编译器、运算表达式计算、正则表达式、机器人等\n\n-  使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低.",[[1573826207032,["GJX@GJXAIOU",[[-1,1529,"atguig"],[1,1535,"gjxaio"]],[1529,1536],[1529,1536]]],[1573826207275,["GJX@GJXAIOU",[[-1,2880,"atguig"],[1,2886,"gjxaio"]],[2880,2887],[2880,2887]]],[1573826207519,["GJX@GJXAIOU",[[-1,3197,"atguig"],[1,3203,"gjxaio"]],[3197,3204],[3197,3204]]],[1573826207731,["GJX@GJXAIOU",[[-1,3633,"atguig"],[1,3639,"gjxaio"]],[3633,3640],[3633,3640]]],[1573826207993,["GJX@GJXAIOU",[[-1,4202,"atguig"],[1,4208,"gjxaio"]],[4202,4209],[4202,4209]]],[1573826208146,["GJX@GJXAIOU",[[-1,4831,"atguig"],[1,4837,"gjxaio"]],[4831,4838],[4831,4838]]],[1573826208387,["GJX@GJXAIOU",[[-1,5225,"atguig"],[1,5231,"gjxaio"]],[5225,5232],[5225,5232]]]],null,"GJX@GJXAIOU"]]}