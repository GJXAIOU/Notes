{"compress":true,"commitItems":[["4282c67d-bc9f-4e1b-96a4-9f5e3227a219",1573826329784,"# 第十二章：组合模式\n\n## 看一个学校院系展示需求\n\n 编写程序展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院， 一个学院有多个系。如图：\n\n ----------清华大学--------------\n\n----------计算机学院------------\n\n计算机科学与技术\n\n软件工程\n\n网络工程\n\n---------信息工程学院-----------\n\n通信工程\n\n信息工程\n\n\n\n## 二、传统方案解决学校院系展示(类图)\n\n  ![传统方案解决](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3.png) \n\n## 传统方案解决学校院系展示存在的问题分析\n\n \n\n- 将**学院看做是学校的子类**，**系是学院的子类**，这样实际上是站在组织大小来进行分层次的\n\n- 实际上我们的要求是 ：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，**不能很好实现的管理的操作**，比如对学院、系的**添加，删除，遍历**等\n\n- 解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作。 => **组合**模式\n\n## 四、 组合模式基本介绍\n\n- 组合模式（Composite Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“**整体-部分**”的层次关系。\n\n- 组合模式**依据树形结构来组合对象**，用来表示部分以及整体层次。\n\n- 这种类型的设计模式属于结构型模式。\n\n- 组合模式使得**用户对单个对象和组合对象的访问具有一致性**，即：组合能让客户以一致的方式处理个别对象以及组合对象\n\n \n\n## 组合模式原理类图\n\n​        ![组合模式类图](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.jpg) \n\n \n\n对原理结构图的说明-即(组合模式的角色及职责)\n\n- **Component** :这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为,用于访问和管理Component 子部件, Component  可以是抽象类或者接口\n\n- **Leaf :** 在组合中表示叶子节点，叶子节点没有子节点\n\n- **Composite** :非叶子节点， 用于存储子部件， 在 Component     接口中实现 子部件的相关操作，比如增加(add), 删除。\n\n\n\n**解决的问题**：\n\n- 组合模式解决这样的问题，当我们要处理的对象可以生成一棵树形结构，而我们要对树上的节点和叶子进行操作时候，它能够提供一致的方式，而不用考虑它是节点还是叶子；\n\n\n\n## 六、组合模式解决学校院系展示的应用实例\n\n应用实例要求\n\n- **编写程序**展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院， 一个学院有多个系。\n\n- 思路分析和图解(类图)\n\n ![组合模式思路分析类图](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90%E7%B1%BB%E5%9B%BE.jpg)\n\n- 代码实现\n\n   对象声明接口\n\n  ```java\n  package com.atguigu.composite;\n  \n  public abstract class OrganizationComponent {\n  \n  \tprivate String name; // 名字\n  \tprivate String des; // 说明\n  \t\n      // 这里不要使用 abstract，因为叶子结点不需要实现 OrganizationComponent 中方法\n  \tprotected  void add(OrganizationComponent organizationComponent) {\n  \t\t//默认实现\n  \t\tthrow new UnsupportedOperationException();\n  \t}\n  \t\n  \tprotected  void remove(OrganizationComponent organizationComponent) {\n  \t\t//默认实现\n  \t\tthrow new UnsupportedOperationException();\n  \t}\n  \n  \t//构造器\n  \tpublic OrganizationComponent(String name, String des) {\n  \t\tsuper();\n  \t\tthis.name = name;\n  \t\tthis.des = des;\n  \t}\n  \n  \tpublic String getName() {\n  \t\treturn name;\n  \t}\n  \n  \tpublic void setName(String name) {\n  \t\tthis.name = name;\n  \t}\n  \n  \tpublic String getDes() {\n  \t\treturn des;\n  \t}\n  \n  \tpublic void setDes(String des) {\n  \t\tthis.des = des;\n  \t}\n  \t\n  \t//方法print, 做成抽象的, 子类都需要实现\n  \tprotected abstract void print();\n  }\n  \n  ```\n\n  学校三层关系对应的实现类：\n\n  ```java\n  package com.atguigu.composite;\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  //University 就是 Composite , 可以管理College\n  public class University extends OrganizationComponent {\n  \n  \tList<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>();\n  \n  \t// 构造器\n  \tpublic University(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \n  \t// 重写add\n  \t@Override\n  \tprotected void add(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.add(organizationComponent);\n  \t}\n  \n  \t// 重写remove\n  \t@Override\n  \tprotected void remove(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.remove(organizationComponent);\n  \t}\n  \n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \n  \t// print方法，就是输出University 包含的学院\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(\"--------------\" + getName() + \"--------------\");\n  \t\t//遍历 organizationComponents \n  \t\tfor (OrganizationComponent organizationComponent : organizationComponents) {\n  \t\t\torganizationComponent.print();\n  \t\t}\n  \t}\n  }\n  \n  //-----------------------------------------------\n  package com.atguigu.composite;\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class College extends OrganizationComponent {\n  \n  \t//List 中 存放的Department\n  \tList<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>();\n  \n  \t// 构造器\n  \tpublic College(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \n  \t// 重写add\n  \t@Override\n  \tprotected void add(OrganizationComponent organizationComponent) {\n  \t\t//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样\n  \t\torganizationComponents.add(organizationComponent);\n  \t}\n  \n  \t// 重写remove\n  \t@Override\n  \tprotected void remove(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.remove(organizationComponent);\n  \t}\n  \n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \n  \t// print方法，就是输出University 包含的学院\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(\"--------------\" + getName() + \"--------------\");\n  \t\t//遍历 organizationComponents \n  \t\tfor (OrganizationComponent organizationComponent : organizationComponents) {\n  \t\t\torganizationComponent.print();\n  \t\t}\n  \t}\n  }\n  \n  //----------------------------------------------------\n  package com.atguigu.composite;\n  \n  public class Department extends OrganizationComponent {\n  \n  \t//没有集合\n  \tpublic Department(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \t\n  \t//add , remove 就不用写了，因为他是叶子节点\n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \t\n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \t\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(getName());\n  \t}\n  }\n  \n  ```\n\n  使用和测试：\n\n  ```java\n  package com.atguigu.composite;\n  \n  public class Client {\n  \n  \tpublic static void main(String[] args) {\n  \t\t\n  \t\t//从大到小创建对象 学校\n  \t\tOrganizationComponent university = new University(\"清华大学\", \" 中国顶级大学 \");\n  \t\t\n  \t\t//创建 学院\n  \t\tOrganizationComponent computerCollege = new College(\"计算机学院\", \" 计算机学院 \");\n  \t\tOrganizationComponent infoEngineercollege = new College(\"信息工程学院\", \" 信息工程学院 \");\n  \t\t\n  \t\t\n  \t\t//创建各个学院下面的系(专业)\n  \t\tcomputerCollege.add(new Department(\"软件工程\", \" 软件工程不错 \"));\n  \t\tcomputerCollege.add(new Department(\"网络工程\", \" 网络工程不错 \"));\n  \t\tcomputerCollege.add(new Department(\"计算机科学与技术\", \" 计算机科学与技术是老牌的专业 \"));\n  \t\t\n  \t\t//\n  \t\tinfoEngineercollege.add(new Department(\"通信工程\", \" 通信工程不好学 \"));\n  \t\tinfoEngineercollege.add(new Department(\"信息工程\", \" 信息工程好学 \"));\n  \t\t\n  \t\t//将学院加入到 学校\n  \t\tuniversity.add(computerCollege);\n  \t\tuniversity.add(infoEngineercollege);\n  \t\t\n  \t\t//university.print();\n  \t\tinfoEngineercollege.print();\n  \t}\n  \n  }\n  \n  ```\n\n## 七、组合模式在 JDK 集合的源码分析 P193\n\n \n\n- Java 的集合类-**HashMap** 就使用了组合模式\n\n- 代码分析+Debug 源码\n\n- 类图\n\n​        \n\n## 八、组合模式的注意事项和细节\n\n \n\n- 简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。\n\n- 具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动.\n\n- 方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构\n\n- 需要遍历组织机构，或者处理的对象具有树形结构时, 非常适合使用组合模式.\n\n- 要求较高的抽象性，如果**节点和叶子有很多差异性的话**，比如很多方法和属性都不一样**，不适合使用组合模**式",[[1573826271561,["GJX@GJXAIOU",[[-1,1749,"atguig"],[1,1755,"gjxaio"]],[1749,1756],[1749,1756]]],[1573826271747,["GJX@GJXAIOU",[[-1,2714,"atguig"],[1,2720,"gjxaio"]],[2714,2721],[2714,2721]]],[1573826272054,["GJX@GJXAIOU",[[-1,3944,"atguig"],[1,3950,"gjxaio"]],[3944,3951],[3944,3951]]],[1573826272197,["GJX@GJXAIOU",[[-1,5214,"atguig"],[1,5220,"gjxaio"]],[5214,5221],[5214,5221]]],[1573826272485,["GJX@GJXAIOU",[[-1,5704,"atguig"],[1,5710,"gjxaio"]],[5704,5711],[5704,5711]]]],null,"GJX@GJXAIOU"],["b84188a3-c057-4cbf-b4dd-d9ee1bba18c2",1573826822061,"# 第十二章：组合模式\n\n## 看一个学校院系展示需求\n\n 编写程序展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院， 一个学院有多个系。如图：\n\n ----------清华大学--------------\n\n----------计算机学院------------\n\n计算机科学与技术\n\n软件工程\n\n网络工程\n\n---------信息工程学院-----------\n\n通信工程\n\n信息工程\n\n\n\n## 二、传统方案解决学校院系展示(类图)\n\n  ![传统方案解决](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%A1%88%E8%A7%A3%E5%86%B3.png) \n\n## 传统方案解决学校院系展示存在的问题分析\n\n \n\n- 将**学院看做是学校的子类**，**系是学院的子类**，这样实际上是站在组织大小来进行分层次的\n\n- 实际上我们的要求是 ：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，**不能很好实现的管理的操作**，比如对学院、系的**添加，删除，遍历**等\n\n- 解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作。 => **组合**模式\n\n## 四、 组合模式基本介绍\n\n- 组合模式（Composite Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“**整体-部分**”的层次关系。\n\n- 组合模式**依据树形结构来组合对象**，用来表示部分以及整体层次。\n\n- 这种类型的设计模式属于结构型模式。\n\n- 组合模式使得**用户对单个对象和组合对象的访问具有一致性**，即：组合能让客户以一致的方式处理个别对象以及组合对象\n\n \n\n## 组合模式原理类图\n\n​        ![组合模式类图](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.jpg) \n\n \n\n对原理结构图的说明-即(组合模式的角色及职责)\n\n- **Component** :这是组合中对象声明接口，在适当情况下，实现所有类共有的接口默认行为,用于访问和管理Component 子部件, Component  可以是抽象类或者接口\n\n- **Leaf :** 在组合中表示叶子节点，叶子节点没有子节点\n\n- **Composite** :非叶子节点， 用于存储子部件， 在 Component     接口中实现 子部件的相关操作，比如增加(add), 删除。\n\n\n\n**解决的问题**：\n\n- 组合模式解决这样的问题，当我们要处理的对象可以生成一棵树形结构，而我们要对树上的节点和叶子进行操作时候，它能够提供一致的方式，而不用考虑它是节点还是叶子；\n\n\n\n## 六、组合模式解决学校院系展示的应用实例\n\n应用实例要求\n\n- **编写程序**展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院， 一个学院有多个系。\n\n- 思路分析和图解(类图)\n\n ![组合模式思路分析类图](%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.resource/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90%E7%B1%BB%E5%9B%BE.jpg)\n\n- 代码实现\n\n   对象声明接口\n\n  ```java\n  package com.gjxaiou.composite;\n  \n  public abstract class OrganizationComponent {\n  \n  \tprivate String name; // 名字\n  \tprivate String des; // 说明\n  \t\n      // 这里不要使用 abstract，因为叶子结点不需要实现 OrganizationComponent 中方法\n  \tprotected  void add(OrganizationComponent organizationComponent) {\n  \t\t//默认实现\n  \t\tthrow new UnsupportedOperationException();\n  \t}\n  \t\n  \tprotected  void remove(OrganizationComponent organizationComponent) {\n  \t\t//默认实现\n  \t\tthrow new UnsupportedOperationException();\n  \t}\n  \n  \t//构造器\n  \tpublic OrganizationComponent(String name, String des) {\n  \t\tsuper();\n  \t\tthis.name = name;\n  \t\tthis.des = des;\n  \t}\n  \n  \tpublic String getName() {\n  \t\treturn name;\n  \t}\n  \n  \tpublic void setName(String name) {\n  \t\tthis.name = name;\n  \t}\n  \n  \tpublic String getDes() {\n  \t\treturn des;\n  \t}\n  \n  \tpublic void setDes(String des) {\n  \t\tthis.des = des;\n  \t}\n  \t\n  \t//方法print, 做成抽象的, 子类都需要实现\n  \tprotected abstract void print();\n  }\n  \n  ```\n\n  学校三层关系对应的实现类：\n\n  ```java\n  package com.gjxaiou.composite;\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  //University 就是 Composite , 可以管理College\n  public class University extends OrganizationComponent {\n  \n  \tList<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>();\n  \n  \t// 构造器\n  \tpublic University(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \n  \t// 重写add\n  \t@Override\n  \tprotected void add(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.add(organizationComponent);\n  \t}\n  \n  \t// 重写remove\n  \t@Override\n  \tprotected void remove(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.remove(organizationComponent);\n  \t}\n  \n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \n  \t// print方法，就是输出University 包含的学院\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(\"--------------\" + getName() + \"--------------\");\n  \t\t//遍历 organizationComponents \n  \t\tfor (OrganizationComponent organizationComponent : organizationComponents) {\n  \t\t\torganizationComponent.print();\n  \t\t}\n  \t}\n  }\n  \n  //-----------------------------------------------\n  package com.gjxaiou.composite;\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class College extends OrganizationComponent {\n  \n  \t//List 中 存放的Department\n  \tList<OrganizationComponent> organizationComponents = new ArrayList<OrganizationComponent>();\n  \n  \t// 构造器\n  \tpublic College(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \n  \t// 重写add\n  \t@Override\n  \tprotected void add(OrganizationComponent organizationComponent) {\n  \t\t//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样\n  \t\torganizationComponents.add(organizationComponent);\n  \t}\n  \n  \t// 重写remove\n  \t@Override\n  \tprotected void remove(OrganizationComponent organizationComponent) {\n  \t\torganizationComponents.remove(organizationComponent);\n  \t}\n  \n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \n  \t// print方法，就是输出University 包含的学院\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(\"--------------\" + getName() + \"--------------\");\n  \t\t//遍历 organizationComponents \n  \t\tfor (OrganizationComponent organizationComponent : organizationComponents) {\n  \t\t\torganizationComponent.print();\n  \t\t}\n  \t}\n  }\n  \n  //----------------------------------------------------\n  package com.gjxaiou.composite;\n  \n  public class Department extends OrganizationComponent {\n  \n  \t//没有集合\n  \tpublic Department(String name, String des) {\n  \t\tsuper(name, des);\n  \t}\n  \t\n  \t//add , remove 就不用写了，因为他是叶子节点\n  \t@Override\n  \tpublic String getName() {\n  \t\treturn super.getName();\n  \t}\n  \t\n  \t@Override\n  \tpublic String getDes() {\n  \t\treturn super.getDes();\n  \t}\n  \t\n  \t@Override\n  \tprotected void print() {\n  \t\tSystem.out.println(getName());\n  \t}\n  }\n  \n  ```\n\n  使用和测试：\n\n  ```java\n  package com.gjxaiou.composite;\n  \n  public class Client {\n  \n  \tpublic static void main(String[] args) {\n  \t\t\n  \t\t//从大到小创建对象 学校\n  \t\tOrganizationComponent university = new University(\"清华大学\", \" 中国顶级大学 \");\n  \t\t\n  \t\t//创建 学院\n  \t\tOrganizationComponent computerCollege = new College(\"计算机学院\", \" 计算机学院 \");\n  \t\tOrganizationComponent infoEngineercollege = new College(\"信息工程学院\", \" 信息工程学院 \");\n  \t\t\n  \t\t\n  \t\t//创建各个学院下面的系(专业)\n  \t\tcomputerCollege.add(new Department(\"软件工程\", \" 软件工程不错 \"));\n  \t\tcomputerCollege.add(new Department(\"网络工程\", \" 网络工程不错 \"));\n  \t\tcomputerCollege.add(new Department(\"计算机科学与技术\", \" 计算机科学与技术是老牌的专业 \"));\n  \t\t\n  \t\t//\n  \t\tinfoEngineercollege.add(new Department(\"通信工程\", \" 通信工程不好学 \"));\n  \t\tinfoEngineercollege.add(new Department(\"信息工程\", \" 信息工程好学 \"));\n  \t\t\n  \t\t//将学院加入到 学校\n  \t\tuniversity.add(computerCollege);\n  \t\tuniversity.add(infoEngineercollege);\n  \t\t\n  \t\t//university.print();\n  \t\tinfoEngineercollege.print();\n  \t}\n  \n  }\n  \n  ```\n\n## 七、组合模式在 JDK 集合的源码分析 P193\n\n \n\n- Java 的集合类-**HashMap** 就使用了组合模式\n\n- 代码分析+Debug 源码\n\n- 类图\n\n​        \n\n## 八、组合模式的注意事项和细节\n\n \n\n- 简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。\n\n- 具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动.\n\n- 方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构\n\n- 需要遍历组织机构，或者处理的对象具有树形结构时, 非常适合使用组合模式.\n\n- 要求较高的抽象性，如果**节点和叶子有很多差异性的话**，比如很多方法和属性都不一样**，不适合使用组合模**式",[[1573826765268,["GJX@GJXAIOU",[[-1,5680,"  "]],[5680,5682],[5680,5680]]],[1573826768364,["GJX@GJXAIOU",[[-1,6617,"  "]],[6617,6619],[6617,6617]]],[1573826774364,["GJX@GJXAIOU",[[-1,5663,"  "]],[5663,5665],[5663,5663]]],[1573826782804,["GJX@GJXAIOU",[[-1,2690,"  "]],[2692,2692],[2690,2690]]],[1573826784830,["GJX@GJXAIOU",[[-1,2666,"  "]],[2666,2668],[2666,2666]]],[1573826789493,["GJX@GJXAIOU",[[-1,1725,"  "]],[1725,1727],[1725,1725]]],[1573826796725,["GJX@GJXAIOU",[[-1,209,"\n"]],[209,209],[208,208]]],[1573826798452,["GJX@GJXAIOU",[[-1,203,"\n"]],[203,203],[202,202]]],[1573826799484,["GJX@GJXAIOU",[[-1,169,"\n"]],[169,169],[168,168]]],[1573826800359,["GJX@GJXAIOU",[[-1,163,"\n"]],[163,163],[162,162]]],[1573826801108,["GJX@GJXAIOU",[[-1,153,"\n"]],[153,153],[152,152]]],[1573826802222,["GJX@GJXAIOU",[[-1,124,"\n"]],[124,124],[123,123]]],[1573826803656,["GJX@GJXAIOU",[[-1,171,"\n"]],[171,171],[170,170]]],[1573826810266,["GJX@GJXAIOU",[[1,16,"y "]],[16,16],[17,17]]],[1573826810950,["GJX@GJXAIOU",[[-1,16,"y "]],[17,17],[15,15]]],[1573826811742,["GJX@GJXAIOU",[[1,16," "]],[15,15],[16,16]]],[1573826813790,["GJX@GJXAIOU",[[1,16,"一、"]],[16,16],[18,18]]],[1573826815117,["GJX@GJXAIOU",[[-1,18," "]],[19,19],[18,18]]],[1573826819219,["GJX@GJXAIOU",[[-1,427,"\n"]],[427,427],[426,426]]],[1573826819638,["GJX@GJXAIOU",[[-1,425," "]],[426,426],[425,425]]],[1573826823004,["GJX@GJXAIOU",[[-1,476,"\n"]],[476,476],[475,475]]],[1573826824971,["GJX@GJXAIOU",[[-1,571,"\n"]],[571,571],[570,570]]],[1573826827086,["GJX@GJXAIOU",[[-1,736,"\n"]],[736,736],[735,735]]],[1573826828029,["GJX@GJXAIOU",[[-1,772,"\n"]],[772,772],[771,771]]],[1573826828837,["GJX@GJXAIOU",[[-1,792,"\n"]],[792,792],[791,791]]],[1573826831709,["GJX@GJXAIOU",[[-1,853," "]],[854,854],[853,853]]],[1573826832222,["GJX@GJXAIOU",[[-1,854,"\n"]],[853,853],[852,852]]],[1573826834627,["GJX@GJXAIOU",[[-1,1041,"\n"]],[1041,1041],[1040,1040]]],[1573826835053,["GJX@GJXAIOU",[[-1,1039," "]],[1040,1040],[1039,1039]]],[1573826835531,["GJX@GJXAIOU",[[-1,1039,"\n"]],[1039,1039],[1038,1038]]],[1573826837047,["GJX@GJXAIOU",[[-1,1159,"\n"]],[1159,1159],[1158,1158]]],[1573826837853,["GJX@GJXAIOU",[[-1,1193,"\n"]],[1193,1193],[1192,1192]]],[1573826838987,["GJX@GJXAIOU",[[-1,1274,"\n"]],[1273,1273],[1272,1272]]],[1573826841469,["GJX@GJXAIOU",[[-1,1368,"\n"]],[1368,1368],[1367,1367]]],[1573826843517,["GJX@GJXAIOU",[[-1,1466,"\n"]],[1466,1466],[1465,1465]]],[1573826845702,["GJX@GJXAIOU",[[-1,1702,"\n"]],[1702,1702],[1701,1701]]],[1573826855891,["GJX@GJXAIOU",[[-1,6656,"\n"]],[6656,6656],[6655,6655]]],[1573826856691,["GJX@GJXAIOU",[[-1,6622,"\n"]],[6622,6622],[6621,6621]]],[1573826857066,["GJX@GJXAIOU",[[-1,6620," "]],[6621,6621],[6620,6620]]],[1573826857627,["GJX@GJXAIOU",[[-1,6620,"\n"]],[6620,6620],[6619,6619]]],[1573826858733,["GJX@GJXAIOU",[[-1,6669,"\n"]],[6669,6669],[6668,6668]]],[1573826862500,["GJX@GJXAIOU",[[-1,6675,"​        "]],[6684,6684],[6675,6675]]],[1573826862955,["GJX@GJXAIOU",[[-1,6676,"\n"]],[6675,6675],[6674,6674]]],[1573826865077,["GJX@GJXAIOU",[[-1,6697,"\n"]],[6697,6697],[6696,6696]]],[1573826865612,["GJX@GJXAIOU",[[-1,6695," "]],[6696,6696],[6695,6695]]],[1573826866188,["GJX@GJXAIOU",[[-1,6695,"\n"]],[6695,6695],[6694,6694]]],[1573826867085,["GJX@GJXAIOU",[[-1,6738,"\n"]],[6738,6738],[6737,6737]]],[1573826867983,["GJX@GJXAIOU",[[-1,6789,"\n"]],[6789,6789],[6788,6788]]],[1573826868831,["GJX@GJXAIOU",[[-1,6844,"\n"]],[6844,6844],[6843,6843]]],[1573826869733,["GJX@GJXAIOU",[[-1,6883,"\n"]],[6883,6883],[6882,6882]]]],null,"GJX@GJXAIOU"]]}