{"compress":true,"commitItems":[["3f21a7a1-a1a3-46e1-b3b4-8fbf8c4f8860",1573826338939,"# 第十章：桥接模式\n\n## 一、手机操作问题\n\n现在对不同手机类型的不同品牌实现操作编程(比如:开机、关机、上网，打电话等)，如图:\n\n​            ![手机操作示意图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%89%8B%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)      \n\n## 传统方案解决手机操作问题\n\n传统方法对应的类图\n\n  ![传统方法对应的类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9B%BE.png)\n\n\n\n\n## 三、传统方案解决手机操作问题分析\n\n- 扩展性问题(**类爆炸**)，如果我们再增加手机的样式(旋转式)，就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。\n\n- 违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本.\n\n- 解决方案-使用**桥接模**式\n\n## 四、桥接模式(Bridge)-基本介绍\n\n- 桥接模式(Bridge 模式)是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。\n\n- 是一种结构型设计模式\n\n- Bridge 模式基于**类的最小设计原则**，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展\n\n## 五、桥接模式(Bridge)-原理类图\n\n![桥接模式原理类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.jpg)        \n\n\n\n\n- Client 类：桥接模式的调用者\n\n- 抽象类(Abstraction) :维护了 Implementor ，本质上维护了它的实现类 ConcreteImplementorA.., 二者是聚合关系, **Abstractio充当桥接类**\n\n- RefinedAbstraction :  是 Abstraction  抽象类的子类\n\n- Implementor :  行为实现类的接口\n\n- ConcreteImplementorA /B ：行为的具体实现类\n\n- 从 UML 图：这里的抽象类和接口是聚合的关系，其实调用和被调用关系\n\n\n## 六、桥接模式解决手机操作问题\n\n \n\n使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护\n\n- 应用实例说明(和前面要求一样)\n\n- 用桥接模式对应的类图\n\n​     ![桥接模式实例类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B%E7%B1%BB%E5%9B%BE.png)   \n\n- 对应的代码：\n\n  品牌接口以及对应的实现类\n\n  ```java\n  package com.atguigu.bridge;\n  \n  //接口\n  public interface Brand {\n  \tvoid open();\n  \tvoid close();\n  \tvoid call();\n  }\n  \n  //-----------------------------------------\n  package com.atguigu.bridge;\n  \n  public class Vivo implements Brand {\n  \n  \t@Override\n  \tpublic void open() {\n  \t\tSystem.out.println(\" Vivo手机开机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void close() {\n  \t\tSystem.out.println(\" Vivo手机关机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void call() {\n  \t\tSystem.out.println(\" Vivo手机打电话 \");\n  \t}\n  }\n  \n  //-------------------------------------------\n  package com.atguigu.bridge;\n  \n  public class XiaoMi implements Brand {\n  \n  \t@Override\n  \tpublic void open() {\n  \t\tSystem.out.println(\" 小米手机开机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void close() {\n  \t\tSystem.out.println(\" 小米手机关机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void call() {\n  \t\tSystem.out.println(\" 小米手机打电话 \");\n  \t}\n  }\n  \n  ```\n\n  手机抽象类和具体的实现类：\n\n  ```java\n  package com.atguigu.bridge;\n  \n  public abstract class Phone {\n  \t\n  \t//组合品牌\n  \tprivate Brand brand;\n  \n  \t//构造器\n  \tpublic Phone(Brand brand) {\n  \t\tsuper();\n  \t\tthis.brand = brand;\n  \t}\n  \t\n  \tprotected void open() {\n  \t\tthis.brand.open();\n  \t}\n  \tprotected void close() {\n  \t\tbrand.close();\n  \t}\n  \tprotected void call() {\n  \t\tbrand.call();\n  \t}\n  }\n  \n  //---------------------------------------\n  package com.atguigu.bridge;\n  \n  \n  //折叠式手机类，继承 抽象类 Phone\n  public class FoldedPhone extends Phone {\n  \n  \t//构造器\n  \tpublic FoldedPhone(Brand brand) {\n  \t\tsuper(brand);\n  \t}\n  \t\n  \t@Override\n      public void open() {\n  \t\tsuper.open();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  \t\n  \t@Override\n  \tpublic void close() {\n  \t\tsuper.close();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  \t\n  \t@Override\n  \tpublic void call() {\n  \t\tsuper.call();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  }\n  \n  //----------------------------------------------\n  package com.atguigu.bridge;\n  \n  public class UpRightPhone extends Phone {\n  \t\n  \t\t//构造器\n  \t\tpublic UpRightPhone(Brand brand) {\n  \t\t\tsuper(brand);\n  \t\t}\n  \t\t\n  \t\t@Override\n          public void open() {\n              // 调用父类 Phone 的 open 方法，本质上调用的是 brand 的实现类中具体的 open 方法\n  \t\t\tsuper.open();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  \t\t\n  \t\t@Override\n  \t\tpublic void close() {\n  \t\t\tsuper.close();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  \t\t\n  \t\t@Override\n  \t\tpublic void call() {\n  \t\t\tsuper.call();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  }\n  \n  ```\n\n  使用和测试：\n\n  ```java\n  package com.atguigu.bridge;\n  \n  public class Client {\n  \n  \tpublic static void main(String[] args) {\n  \t\t\n  \t\t//获取折叠式手机 (样式 + 品牌 )\n  \t\tPhone phone1 = new FoldedPhone(new XiaoMi());\n  \t\tphone1.open();\n  \t\tphone1.call();\n  \t\tphone1.close();\n  \t\t\n  \t\tSystem.out.println(\"=======================\");\n  \t\t\n  \t\tPhone phone2 = new FoldedPhone(new Vivo());\n  \t\tphone2.open();\n  \t\tphone2.call();\n  \t\tphone2.close();\n  \t\t\n  \t\tSystem.out.println(\"==============\");\n  \t\t\n  \t\tUpRightPhone phone3 = new UpRightPhone(new XiaoMi());\n  \t\tphone3.open();\n  \t\tphone3.call();\n  \t\tphone3.close();\n  \t\t\n  \t\tSystem.out.println(\"==============\");\n  \t\t\n  \t\tUpRightPhone phone4 = new UpRightPhone(new Vivo());\n  \t\tphone4.open();\n  \t\tphone4.call();\n  \t\tphone4.close();\n  \t}\n  }\n  \n  ```\n\n\n\n## 七、桥接模式在 JDBC 的源码剖析 P166\n\n桥接模式在 JDBC 的源码剖析\n\n- Jdbc 的 **Driver** **接口**，如果从桥接模式来看，Driver 就是一个接口，下面可以有 MySQL 的 Driver，Oracle 的\n\nDriver，这些就可以当做实现接口类\n\n- 代码分析+Debug 源码\n\n- 对 jdbc 源码分析的类图\n\n \n\n\n## 八、桥接模式的注意事项和细节\n\n- 实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。\n\n- 对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。\n\n- **桥接模式替代多层继承方案**，可以减少**子类的个数**，降低系统的管理和维护成本。\n\n- 桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程\n\n- 桥接模式要求**正确识别出系统中两个独立变化的维度****(****抽象、和实现****)**，因此其使用范围有一定的局限性，即需要有这样的应用场景。\n\n- 桥接模式其它应用场景\n\n  对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用.\n\n## 常见的应用场景:\n\n- JDBC 驱动程序\n\n- 银行转账系统\n\n  转账分类: 网上转账，柜台转账，AMT 转账\n\n  转账用户类型：普通用户，银卡用户，金卡用户..\n\n- 消息管理\n\n  消息类型：即时消息，延时消息\n\n  消息分类：手机短信，邮件消息，QQ 消息...",[[1573826280482,["GJX@GJXAIOU",[[-1,1658,"atguig"],[1,1664,"gjxaio"]],[1658,1665],[1658,1665]]],[1573826280723,["GJX@GJXAIOU",[[-1,1827,"atguig"],[1,1833,"gjxaio"]],[1827,1834],[1827,1834]]],[1573826280941,["GJX@GJXAIOU",[[-1,2205,"atguig"],[1,2211,"gjxaio"]],[2205,2212],[2205,2212]]],[1573826281169,["GJX@GJXAIOU",[[-1,2565,"atguig"],[1,2571,"gjxaio"]],[2565,2572],[2565,2572]]],[1573826281408,["GJX@GJXAIOU",[[-1,2965,"atguig"],[1,2971,"gjxaio"]],[2965,2972],[2965,2972]]],[1573826281607,["GJX@GJXAIOU",[[-1,3503,"atguig"],[1,3509,"gjxaio"]],[3503,3510],[3503,3510]]],[1573826281868,["GJX@GJXAIOU",[[-1,4087,"atguig"],[1,4093,"gjxaio"]],[4087,4094],[4087,4094]]]],null,"GJX@GJXAIOU"],["f0eb055f-c20d-4330-abb6-3fb45b2a898f",1573826994764,"# 第十章：桥接模式\n\n## 一、手机操作问题\n\n现在对不同手机类型的不同品牌实现操作编程(比如:开机、关机、上网，打电话等)，如图:\n\n​            ![手机操作示意图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%89%8B%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)      \n\n## 传统方案解决手机操作问题\n\n传统方法对应的类图\n\n  ![传统方法对应的类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9B%BE.png)\n\n\n\n\n## 三、传统方案解决手机操作问题分析\n\n- 扩展性问题(**类爆炸**)，如果我们再增加手机的样式(旋转式)，就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。\n\n- 违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本.\n\n- 解决方案-使用**桥接模**式\n\n## 四、桥接模式(Bridge)-基本介绍\n\n- 桥接模式(Bridge 模式)是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。\n\n- 是一种结构型设计模式\n\n- Bridge 模式基于**类的最小设计原则**，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展\n\n## 五、桥接模式(Bridge)-原理类图\n\n![桥接模式原理类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.jpg)        \n\n\n\n\n- Client 类：桥接模式的调用者\n\n- 抽象类(Abstraction) :维护了 Implementor ，本质上维护了它的实现类 ConcreteImplementorA.., 二者是聚合关系, **Abstractio充当桥接类**\n\n- RefinedAbstraction :  是 Abstraction  抽象类的子类\n\n- Implementor :  行为实现类的接口\n\n- ConcreteImplementorA /B ：行为的具体实现类\n\n- 从 UML 图：这里的抽象类和接口是聚合的关系，其实调用和被调用关系\n\n\n## 六、桥接模式解决手机操作问题\n\n \n\n使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护\n\n- 应用实例说明(和前面要求一样)\n\n- 用桥接模式对应的类图\n\n​     ![桥接模式实例类图](%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.resource/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B%E7%B1%BB%E5%9B%BE.png)   \n\n- 对应的代码：\n\n  品牌接口以及对应的实现类\n\n  ```java\n  package com.gjxaiou.bridge;\n  \n  //接口\n  public interface Brand {\n  \tvoid open();\n  \tvoid close();\n  \tvoid call();\n  }\n  \n  //-----------------------------------------\n  package com.gjxaiou.bridge;\n  \n  public class Vivo implements Brand {\n  \n  \t@Override\n  \tpublic void open() {\n  \t\tSystem.out.println(\" Vivo手机开机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void close() {\n  \t\tSystem.out.println(\" Vivo手机关机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void call() {\n  \t\tSystem.out.println(\" Vivo手机打电话 \");\n  \t}\n  }\n  \n  //-------------------------------------------\n  package com.gjxaiou.bridge;\n  \n  public class XiaoMi implements Brand {\n  \n  \t@Override\n  \tpublic void open() {\n  \t\tSystem.out.println(\" 小米手机开机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void close() {\n  \t\tSystem.out.println(\" 小米手机关机 \");\n  \t}\n  \n  \t@Override\n  \tpublic void call() {\n  \t\tSystem.out.println(\" 小米手机打电话 \");\n  \t}\n  }\n  \n  ```\n\n  手机抽象类和具体的实现类：\n\n  ```java\n  package com.gjxaiou.bridge;\n  \n  public abstract class Phone {\n  \t\n  \t//组合品牌\n  \tprivate Brand brand;\n  \n  \t//构造器\n  \tpublic Phone(Brand brand) {\n  \t\tsuper();\n  \t\tthis.brand = brand;\n  \t}\n  \t\n  \tprotected void open() {\n  \t\tthis.brand.open();\n  \t}\n  \tprotected void close() {\n  \t\tbrand.close();\n  \t}\n  \tprotected void call() {\n  \t\tbrand.call();\n  \t}\n  }\n  \n  //---------------------------------------\n  package com.gjxaiou.bridge;\n  \n  \n  //折叠式手机类，继承 抽象类 Phone\n  public class FoldedPhone extends Phone {\n  \n  \t//构造器\n  \tpublic FoldedPhone(Brand brand) {\n  \t\tsuper(brand);\n  \t}\n  \t\n  \t@Override\n      public void open() {\n  \t\tsuper.open();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  \t\n  \t@Override\n  \tpublic void close() {\n  \t\tsuper.close();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  \t\n  \t@Override\n  \tpublic void call() {\n  \t\tsuper.call();\n  \t\tSystem.out.println(\" 折叠样式手机 \");\n  \t}\n  }\n  \n  //----------------------------------------------\n  package com.gjxaiou.bridge;\n  \n  public class UpRightPhone extends Phone {\n  \t\n  \t\t//构造器\n  \t\tpublic UpRightPhone(Brand brand) {\n  \t\t\tsuper(brand);\n  \t\t}\n  \t\t\n  \t\t@Override\n          public void open() {\n              // 调用父类 Phone 的 open 方法，本质上调用的是 brand 的实现类中具体的 open 方法\n  \t\t\tsuper.open();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  \t\t\n  \t\t@Override\n  \t\tpublic void close() {\n  \t\t\tsuper.close();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  \t\t\n  \t\t@Override\n  \t\tpublic void call() {\n  \t\t\tsuper.call();\n  \t\t\tSystem.out.println(\" 直立样式手机 \");\n  \t\t}\n  }\n  \n  ```\n\n  使用和测试：\n\n  ```java\n  package com.gjxaiou.bridge;\n  \n  public class Client {\n  \n  \tpublic static void main(String[] args) {\n  \t\t\n  \t\t//获取折叠式手机 (样式 + 品牌 )\n  \t\tPhone phone1 = new FoldedPhone(new XiaoMi());\n  \t\tphone1.open();\n  \t\tphone1.call();\n  \t\tphone1.close();\n  \t\t\n  \t\tSystem.out.println(\"=======================\");\n  \t\t\n  \t\tPhone phone2 = new FoldedPhone(new Vivo());\n  \t\tphone2.open();\n  \t\tphone2.call();\n  \t\tphone2.close();\n  \t\t\n  \t\tSystem.out.println(\"==============\");\n  \t\t\n  \t\tUpRightPhone phone3 = new UpRightPhone(new XiaoMi());\n  \t\tphone3.open();\n  \t\tphone3.call();\n  \t\tphone3.close();\n  \t\t\n  \t\tSystem.out.println(\"==============\");\n  \t\t\n  \t\tUpRightPhone phone4 = new UpRightPhone(new Vivo());\n  \t\tphone4.open();\n  \t\tphone4.call();\n  \t\tphone4.close();\n  \t}\n  }\n  \n  ```\n\n\n\n## 七、桥接模式在 JDBC 的源码剖析 P166\n\n桥接模式在 JDBC 的源码剖析\n\n- Jdbc 的 **Driver** **接口**，如果从桥接模式来看，Driver 就是一个接口，下面可以有 MySQL 的 Driver，Oracle 的\n\nDriver，这些就可以当做实现接口类\n\n- 代码分析+Debug 源码\n\n- 对 jdbc 源码分析的类图\n\n \n\n\n## 八、桥接模式的注意事项和细节\n\n- 实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。\n\n- 对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。\n\n- **桥接模式替代多层继承方案**，可以减少**子类的个数**，降低系统的管理和维护成本。\n\n- 桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程\n\n- 桥接模式要求**正确识别出系统中两个独立变化的维度****(****抽象、和实现****)**，因此其使用范围有一定的局限性，即需要有这样的应用场景。\n\n- 桥接模式其它应用场景\n\n  对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用.\n\n## 常见的应用场景:\n\n- JDBC 驱动程序\n\n- 银行转账系统\n\n  转账分类: 网上转账，柜台转账，AMT 转账\n\n  转账用户类型：普通用户，银卡用户，金卡用户..\n\n- 消息管理\n\n  消息类型：即时消息，延时消息\n\n  消息分类：手机短信，邮件消息，QQ 消息...",[[1573826940820,["GJX@GJXAIOU",[[-1,4063,"  "]],[4065,4065],[4063,4063]]],[1573826944612,["GJX@GJXAIOU",[[-1,4826,"  "]],[4828,4828],[4826,4826]]],[1573826951295,["GJX@GJXAIOU",[[-1,5434,"\n"]],[5434,5434],[5433,5433]]],[1573826952687,["GJX@GJXAIOU",[[-1,5469,"\n"]],[5469,5469],[5468,5468]]],[1573826953502,["GJX@GJXAIOU",[[-1,5443,"\n"]],[5443,5443],[5442,5442]]],[1573826954484,["GJX@GJXAIOU",[[-1,5502,"\n"]],[5502,5502],[5501,5501]]],[1573826955413,["GJX@GJXAIOU",[[-1,5519,"\n"]],[5519,5519],[5518,5518]]],[1573826957109,["GJX@GJXAIOU",[[-1,5360,"\n"]],[5360,5360],[5359,5359]]],[1573826958062,["GJX@GJXAIOU",[[-1,5267,"\n"]],[5267,5267],[5266,5266]]],[1573826958955,["GJX@GJXAIOU",[[-1,5211,"\n"]],[5211,5211],[5210,5210]]],[1573826959644,["GJX@GJXAIOU",[[-1,5163,"\n"]],[5163,5163],[5162,5162]]],[1573826960656,["GJX@GJXAIOU",[[-1,5113,"\n"]],[5113,5113],[5112,5112]]],[1573826963228,["GJX@GJXAIOU",[[-1,5020,"\n"]],[5019,5019],[5018,5018]]],[1573826963540,["GJX@GJXAIOU",[[-1,5017," "]],[5018,5018],[5017,5017]]],[1573826964035,["GJX@GJXAIOU",[[-1,5018,"\n"]],[5017,5017],[5016,5016]]],[1573826966061,["GJX@GJXAIOU",[[-1,4998,"\n"]],[4998,4998],[4997,4997]]],[1573826967243,["GJX@GJXAIOU",[[-1,4981,"\n"]],[4981,4981],[4980,4980]]],[1573826969331,["GJX@GJXAIOU",[[-1,4960,"\n"]],[4961,4961],[4960,4960]]],[1573826969827,["GJX@GJXAIOU",[[-1,4959,"\n"]],[4960,4960],[4959,4959]]],[1573826980885,["GJX@GJXAIOU",[[-1,4046,"  "]],[4046,4048],[4046,4046]]],[1573826986380,["GJX@GJXAIOU",[[-1,2541,"  "]],[2541,2543],[2541,2541]]],[1573826988556,["GJX@GJXAIOU",[[-1,2517,"  "]],[2517,2519],[2517,2517]]],[1573826993483,["GJX@GJXAIOU",[[-1,1634,"  "]],[1634,1636],[1634,1634]]],[1573826995363,["GJX@GJXAIOU",[[-1,1411,"\n"]],[1411,1411],[1410,1410]]],[1573826996116,["GJX@GJXAIOU",[[-1,1392,"\n"]],[1392,1392],[1391,1391]]],[1573826997470,["GJX@GJXAIOU",[[-1,1298,"\n"]],[1298,1298],[1297,1297]]],[1573826999078,["GJX@GJXAIOU",[[-1,1261,"\n"]],[1261,1261],[1260,1260]]],[1573826999679,["GJX@GJXAIOU",[[-1,1234,"\n"]],[1234,1234],[1233,1233]]],[1573827000285,["GJX@GJXAIOU",[[-1,1187,"\n"]],[1187,1187],[1186,1186]]],[1573827001164,["GJX@GJXAIOU",[[-1,1084,"\n"]],[1084,1084],[1083,1083]]],[1573827001778,["GJX@GJXAIOU",[[-1,1063,"\n"]],[1063,1063],[1062,1062]]],[1573827001998,["GJX@GJXAIOU",[[-1,1062,"\n"]],[1062,1062],[1061,1061]]],[1573827002234,["GJX@GJXAIOU",[[-1,1061,"\n"]],[1061,1061],[1060,1060]]],[1573827007332,["GJX@GJXAIOU",[[-1,726,"\n"]],[726,726],[725,725]]],[1573827008035,["GJX@GJXAIOU",[[-1,712,"\n"]],[712,712],[711,711]]],[1573827009309,["GJX@GJXAIOU",[[-1,617,"\n"]],[617,617],[616,616]]],[1573827011013,["GJX@GJXAIOU",[[-1,567,"\n"]],[567,567],[566,566]]],[1573827012347,["GJX@GJXAIOU",[[-1,466,"\n"]],[466,466],[465,465]]],[1573827012563,["GJX@GJXAIOU",[[-1,465,"\n"]],[465,465],[464,464]]],[1573827015891,["GJX@GJXAIOU",[[-1,278,"\n"]],[278,278],[277,277]]],[1573827017933,["GJX@GJXAIOU",[[-1,68,"\n"]],[68,68],[67,67]]]],null,"GJX@GJXAIOU"]]}