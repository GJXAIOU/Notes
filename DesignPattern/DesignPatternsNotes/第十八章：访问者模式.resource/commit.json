{"compress":true,"commitItems":[["72d6881a-6fdc-47dd-b497-d542072ddc39",1573826296194,"# 第十八章：访问者模式\n\n## 一、测评系统的需求\n\n完成测评系统需求\n\n- 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)\n\n- 传统方案\n\n  ![1573727216222](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727216222.png)\n\n## 二、传统方式的问题分析\n\n \n\n- 如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 ocp 原则， 不利于维护\n\n- 扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做\n\n- 引出我们会使用新的设计模式 – **访问者**模式\n\n## 三、访问者模式基本介绍\n\n \n\n- 访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。\n\n-  **主要将数据结构与数据操作分离，解决 数据结构和操作耦合性问题**\n\n- 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口\n\n- 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时\n\n\n需要避免让这些操作\"污染\"这些对象的类，可以选用访问者模式解决\n\n\n\n## 四、访问者模式的原理类图\n\n ![1573727400565](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727400565.png)\n\n对原理类图的说明-即(访问者模式的角色及职责)\n\n- Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作；\n\n- ConcreteVisitor ：是一个具体的访问者， 实现每个由 Visitor 声明的操作，是每个操作实现的部分；\n\n- ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素；\n\n- Element 定义一个 accept  方法，接收一个访问者对象\n\n- ConcreteElement 为具体元素，实现了 accept  方法\n\n\n\n\n## 五、访问者模式应用实例\n\n应用实例要求\n\n- 将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)，请使用访问者模式来说实现\n\n \n\n- 思路分析和图解(类图)\n\n  ![1573727881134](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727881134.png)\n\n- 代码实现\n\n Person 抽象类和对应的实体类\n\n ```java\npackage com.atguigu.visitor;\n\npublic abstract class Person {\n\t\n\t//提供一个方法，让访问者可以访问\n\tpublic abstract void accept(Action action);\n}\n\n//------------------------------------------\npackage com.atguigu.visitor;\n\npublic class Man extends Person {\n\n\t@Override\n\tpublic void accept(Action action) {\n\t\taction.getManResult(this);\n\t}\n}\n\n//-------------------------------------------\npackage com.atguigu.visitor;\n\n//说明\n//1. 这里我们使用到了双分派, 即首先在客户端程序中，将具体状态作为参数传递Woman中(第一次分派)\n//2. 然后Woman 类调用作为参数的 \"具体方法\" 中方法getWomanResult, 同时将自己(this)作为参数\n//   传入，完成第二次的分派\npublic class Woman extends Person{\n\n\t@Override\n\tpublic void accept(Action action) {\n\t\taction.getWomanResult(this);\n\t}\n}\n\n ```\n\n Action抽象类和具体的实体类：\n\n```java\npackage com.atguigu.visitor;\n\npublic abstract class Action {\n\t\n\t//得到男性 的测评\n\tpublic abstract void getManResult(Man man);\n\t\n\t//得到女的 测评\n\tpublic abstract void getWomanResult(Woman woman);\n}\n\n//-----------------------------------\npackage com.atguigu.visitor;\n\npublic class Success extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价该歌手很成功 !\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价该歌手很成功 !\");\n\t}\n}\n\n//-------------------------------------\npackage com.atguigu.visitor;\n\npublic class Fail extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价该歌手失败 !\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价该歌手失败 !\");\n\t}\n}\n\n//------------------------------------------\npackage com.atguigu.visitor;\n\npublic class Wait extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价是该歌手待定 ..\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价是该歌手待定 ..\");\n\t}\n}\n\n```\n\n```java\npackage com.atguigu.visitor;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n//数据结构，管理很多人（Man , Woman）\npublic class ObjectStructure {\n\n\t//维护了一个集合\n\tprivate List<Person> persons = new LinkedList<>();\n\t\n\t//增加到list\n\tpublic void attach(Person p) {\n\t\tpersons.add(p);\n\t}\n\t//移除\n\tpublic void detach(Person p) {\n\t\tpersons.remove(p);\n\t}\n\t\n\t//显示测评情况\n\tpublic void display(Action action) {\n\t\tfor(Person p: persons) {\n\t\t\tp.accept(action);\n\t\t}\n\t}\n}\n\n```\n\n使用客户端\n\n```java\npackage com.atguigu.visitor;\n\npublic class Client {\n\n\tpublic static void main(String[] args) {\n\t\t//创建ObjectStructure\n\t\tObjectStructure objectStructure = new ObjectStructure();\n\t\t\n\t\tobjectStructure.attach(new Man());\n\t\tobjectStructure.attach(new Woman());\n\t\t\n\t\t\n\t\t//成功\n\t\tSuccess success = new Success();\n\t\tobjectStructure.display(success);\n\t\t\n\t\tSystem.out.println(\"===============\");\n\t\tFail fail = new Fail();\n\t\tobjectStructure.display(fail);\n\t\t\n\t\tSystem.out.println(\"=======给的是待定的测评========\");\n\t\t\n\t\tWait wait = new Wait();\n\t\tobjectStructure.display(wait);\n\t}\n}\n\n```\n\n \n\n-  应用案例的小结-双分派\n  - 上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型\n\n  - 以上述实例为例，**假设我们要添加一个** **Wait** **的状态类，考察** **Man** **类和** **Woman** **类的反应**，由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，**不需要改动任何其他类的代码**。\n\n## 六、访问者模式的注意事项和细节\n\n- 优点\n\n  - 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高\n\n  - 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统\n\n-  缺点\n\n  - 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难\n\n  - 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素\n  - 因此，**如果一个系统有比较稳定的数据结构**，又有经常变化的功能需求，那么**访问者模式就是比较合适**的.",[[1573826238686,["GJX@GJXAIOU",[[-1,1416,"atguig"],[1,1422,"gjxaio"]],[1416,1423],[1416,1423]]],[1573826238934,["GJX@GJXAIOU",[[-1,1591,"atguig"],[1,1597,"gjxaio"]],[1591,1598],[1591,1598]]],[1573826239193,["GJX@GJXAIOU",[[-1,1785,"atguig"],[1,1791,"gjxaio"]],[1785,1792],[1785,1792]]],[1573826239421,["GJX@GJXAIOU",[[-1,2110,"atguig"],[1,2116,"gjxaio"]],[2110,2117],[2110,2117]]],[1573826239666,["GJX@GJXAIOU",[[-1,2335,"atguig"],[1,2341,"gjxaio"]],[2335,2342],[2335,2342]]],[1573826239870,["GJX@GJXAIOU",[[-1,2638,"atguig"],[1,2644,"gjxaio"]],[2638,2645],[2638,2645]]],[1573826240119,["GJX@GJXAIOU",[[-1,2941,"atguig"],[1,2947,"gjxaio"]],[2941,2948],[2941,2948]]],[1573826240328,["GJX@GJXAIOU",[[-1,3216,"atguig"],[1,3222,"gjxaio"]],[3216,3223],[3216,3223]]],[1573826240542,["GJX@GJXAIOU",[[-1,3676,"atguig"],[1,3682,"gjxaio"]],[3676,3683],[3676,3683]]]],null,"GJX@GJXAIOU"],["9ca3bcbc-3da8-4773-82b4-1de7acb17b04",1573826542303,"# 第十八章：访问者模式\n\n## 一、测评系统的需求\n\n完成测评系统需求\n\n- 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)\n\n- 传统方案\n\n  ![1573727216222](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727216222.png)\n\n## 二、传统方式的问题分析\n\n \n\n- 如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 ocp 原则， 不利于维护\n\n- 扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做\n\n- 引出我们会使用新的设计模式 – **访问者**模式\n\n## 三、访问者模式基本介绍\n\n \n\n- 访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。\n\n-  **主要将数据结构与数据操作分离，解决 数据结构和操作耦合性问题**\n\n- 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口\n\n- 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时\n\n\n需要避免让这些操作\"污染\"这些对象的类，可以选用访问者模式解决\n\n\n\n## 四、访问者模式的原理类图\n\n ![1573727400565](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727400565.png)\n\n对原理类图的说明-即(访问者模式的角色及职责)\n\n- Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作；\n\n- ConcreteVisitor ：是一个具体的访问者， 实现每个由 Visitor 声明的操作，是每个操作实现的部分；\n\n- ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素；\n\n- Element 定义一个 accept  方法，接收一个访问者对象\n\n- ConcreteElement 为具体元素，实现了 accept  方法\n\n\n\n\n## 五、访问者模式应用实例\n\n应用实例要求\n\n- 将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)，请使用访问者模式来说实现\n\n \n\n- 思路分析和图解(类图)\n\n  ![1573727881134](%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573727881134.png)\n\n- 代码实现\n\n Person 抽象类和对应的实体类\n\n ```java\npackage com.gjxaiou.visitor;\n\npublic abstract class Person {\n\t\n\t//提供一个方法，让访问者可以访问\n\tpublic abstract void accept(Action action);\n}\n\n//------------------------------------------\npackage com.gjxaiou.visitor;\n\npublic class Man extends Person {\n\n\t@Override\n\tpublic void accept(Action action) {\n\t\taction.getManResult(this);\n\t}\n}\n\n//-------------------------------------------\npackage com.gjxaiou.visitor;\n\n//说明\n//1. 这里我们使用到了双分派, 即首先在客户端程序中，将具体状态作为参数传递Woman中(第一次分派)\n//2. 然后Woman 类调用作为参数的 \"具体方法\" 中方法getWomanResult, 同时将自己(this)作为参数\n//   传入，完成第二次的分派\npublic class Woman extends Person{\n\n\t@Override\n\tpublic void accept(Action action) {\n\t\taction.getWomanResult(this);\n\t}\n}\n\n ```\n\n Action抽象类和具体的实体类：\n\n```java\npackage com.gjxaiou.visitor;\n\npublic abstract class Action {\n\t\n\t//得到男性 的测评\n\tpublic abstract void getManResult(Man man);\n\t\n\t//得到女的 测评\n\tpublic abstract void getWomanResult(Woman woman);\n}\n\n//-----------------------------------\npackage com.gjxaiou.visitor;\n\npublic class Success extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价该歌手很成功 !\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价该歌手很成功 !\");\n\t}\n}\n\n//-------------------------------------\npackage com.gjxaiou.visitor;\n\npublic class Fail extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价该歌手失败 !\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价该歌手失败 !\");\n\t}\n}\n\n//------------------------------------------\npackage com.gjxaiou.visitor;\n\npublic class Wait extends Action {\n\n\t@Override\n\tpublic void getManResult(Man man) {\n\t\tSystem.out.println(\" 男人给的评价是该歌手待定 ..\");\n\t}\n\n\t@Override\n\tpublic void getWomanResult(Woman woman) {\n\t\tSystem.out.println(\" 女人给的评价是该歌手待定 ..\");\n\t}\n}\n\n```\n\n```java\npackage com.gjxaiou.visitor;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n//数据结构，管理很多人（Man , Woman）\npublic class ObjectStructure {\n\n\t//维护了一个集合\n\tprivate List<Person> persons = new LinkedList<>();\n\t\n\t//增加到list\n\tpublic void attach(Person p) {\n\t\tpersons.add(p);\n\t}\n\t//移除\n\tpublic void detach(Person p) {\n\t\tpersons.remove(p);\n\t}\n\t\n\t//显示测评情况\n\tpublic void display(Action action) {\n\t\tfor(Person p: persons) {\n\t\t\tp.accept(action);\n\t\t}\n\t}\n}\n\n```\n\n使用客户端\n\n```java\npackage com.gjxaiou.visitor;\n\npublic class Client {\n\n\tpublic static void main(String[] args) {\n\t\t//创建ObjectStructure\n\t\tObjectStructure objectStructure = new ObjectStructure();\n\t\t\n\t\tobjectStructure.attach(new Man());\n\t\tobjectStructure.attach(new Woman());\n\t\t\n\t\t\n\t\t//成功\n\t\tSuccess success = new Success();\n\t\tobjectStructure.display(success);\n\t\t\n\t\tSystem.out.println(\"===============\");\n\t\tFail fail = new Fail();\n\t\tobjectStructure.display(fail);\n\t\t\n\t\tSystem.out.println(\"=======给的是待定的测评========\");\n\t\t\n\t\tWait wait = new Wait();\n\t\tobjectStructure.display(wait);\n\t}\n}\n\n```\n\n \n\n-  应用案例的小结-双分派\n  - 上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型\n\n  - 以上述实例为例，**假设我们要添加一个** **Wait** **的状态类，考察** **Man** **类和** **Woman** **类的反应**，由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，**不需要改动任何其他类的代码**。\n\n## 六、访问者模式的注意事项和细节\n\n- 优点\n\n  - 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高\n\n  - 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统\n\n-  缺点\n\n  - 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难\n\n  - 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素\n  - 因此，**如果一个系统有比较稳定的数据结构**，又有经常变化的功能需求，那么**访问者模式就是比较合适**的.",[[1573826493724,["GJX@GJXAIOU",[[-1,1395," "]],[1395,1396],[1395,1395]]],[1573826498187,["GJX@GJXAIOU",[[-1,2063," "]],[2063,2064],[2063,2063]]]],null,"GJX@GJXAIOU"]]}