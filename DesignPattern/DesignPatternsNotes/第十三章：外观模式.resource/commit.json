{"compress":true,"commitItems":[["49d6e430-82ca-48a3-ab69-30631781451c",1573826325845,"# 第 13  章外观模式\n\n \n\n## 13.1      影院管理项目\n\n组建一个家庭影院：\n\nDVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功能，其过程为： 直接用遥控器：统筹各设备开关\n\n开爆米花机\n\n放下屏幕 \n\n开投影仪 \n\n开音响\n\n开 DVD，选 dvd\n\n去拿爆米花\n\n调暗灯光 \n\n播放\n\n观影结束后，关闭各种设备\n\n## 二、传统方式解决影院管理\n\n​      ![传统方式解决影院问题](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98.png)                                            \n\n\n \n\n \n\n## 三、传统方式解决影院管理问题分析\n\n- 在 ClientTest 的 main 方法中，创建各个子系统的对象，并直接去调用子系统(对象)相关方法，会造成调用过程混乱，没有清晰的过程；\n\n- 不利于在 ClientTest 中，去维护对子系统的操作；\n\n- 解决思路：**定义一个高层接口**，给**子系统中的一组接口提供一个一致的界面**(比如在高层接口提供四个方法\n\nready, play, pause, end )，用来访问子系统中的一群接口\n\n**- 也就是说 就是通过定义一个一致的接口(界面类)，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节 => **外观模式**\n\n## 四、外观模式基本介绍\n\n- 外观模式（Facade），也叫“过程模式：外观模式为子系统中的一组接口**提供一个一致的界面**，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用；\n\n- 外观模式通过定义一个一致的接口，用**以==屏蔽内部子系统的细节==**，使得**调用端只需跟这个接口发生调用**，而无需关心这个子系统的内部细节；\n\n \n\n## 五、外观模式原理类图\n\n​      ![外观模式原理类图](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.png) \n\n\n对类图说明(分类外观模式的角色)\n\n- 外观类(Facade): 为调用端提供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当子系统对象\n\n- 调用者(Client): 外观接口的调用者\n\n- 子系统的集合：指模块或者子系统，处理 Facade 对象指派的任务，他是功能的实际提供者\n\n \n\n## 六、外观模式解决影院管理\n\n### （一）传统方式解决影院管理说明\n\n- 外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。比如：在 pc 上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等），还有就是手机的重启功能（把关机和启动合为一个操作）。\n\n- 外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用\n\n- 示意图说明\n\n​       ![使用外观模式解决影院问题](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E4%BD%BF%E7%94%A8%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98.jpg)\n\n \n\n### （二） 外观模式应用实例\n\n- 应用实例要求\n\n  使用外观模式来完成家庭影院项目\n\n- 思路分析和图解(类图)\n\n​       ![外观模式解决影院问题的思路和类图](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF%E5%92%8C%E7%B1%BB%E5%9B%BE.jpg)\n\n- 代码实现\n\n   具体的实体类：\n\n```java\npackage com.atguigu.facade;\n\npublic class DVDPlayer {\n\t\n\t//使用单例模式, 使用饿汉式\n\tprivate static DVDPlayer instance = new DVDPlayer();\n\t\n\tpublic static DVDPlayer getInstanc() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" dvd on \");\n\t}\n\tpublic void off() {\n\t\tSystem.out.println(\" dvd off \");\n\t}\n\t\n\tpublic void play() {\n\t\tSystem.out.println(\" dvd is playing \");\n\t}\n\t\n\t//....\n\tpublic void pause() {\n\t\tSystem.out.println(\" dvd pause ..\");\n\t}\n}\n\n//-------------------------------------------\npackage com.atguigu.facade;\n\npublic class Popcorn {\n\t\n\tprivate static Popcorn instance = new Popcorn();\n\t\n\tpublic static Popcorn getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" popcorn on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" popcorn ff \");\n\t}\n\t\n\tpublic void pop() {\n\t\tSystem.out.println(\" popcorn is poping  \");\n\t}\n}\n\n//----------------------------------------------\npackage com.atguigu.facade;\n\npublic class Projector {\n\n\tprivate static Projector instance = new Projector();\n\t\n\tpublic static Projector getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" Projector on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" Projector ff \");\n\t}\n\t\n\tpublic void focus() {\n\t\tSystem.out.println(\" Projector is Projector  \");\n\t}\n\t\n\t//...\n}\n\n//--------------------------------------------------\n package com.atguigu.facade;\n\npublic class Screen {\n\n\tprivate static Screen instance = new Screen();\n\t\n\tpublic static Screen getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void up() {\n\t\tSystem.out.println(\" Screen up \");\n\t}\n\t\n\tpublic void down() {\n\t\tSystem.out.println(\" Screen down \");\n\t}\n}\n\n//-----------------------------------------------------\npackage com.atguigu.facade;\n\npublic class Stereo {\n\n\tprivate static Stereo instance = new Stereo();\n\t\n\tpublic static Stereo getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" Stereo on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" Stereo off \");\n\t}\n\t\n\tpublic void up() {\n\t\tSystem.out.println(\" Stereo up.. \");\n\t}\n\t\n\t//...\n}\n\n//---------------------------------------------\npackage com.atguigu.facade;\n\npublic class TheaterLight {\n\n\tprivate static TheaterLight instance = new TheaterLight();\n\n\tpublic static TheaterLight getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic void on() {\n\t\tSystem.out.println(\" TheaterLight on \");\n\t}\n\n\tpublic void off() {\n\t\tSystem.out.println(\" TheaterLight off \");\n\t}\n\n\tpublic void dim() {\n\t\tSystem.out.println(\" TheaterLight dim.. \");\n\t}\n\n\tpublic void bright() {\n\t\tSystem.out.println(\" TheaterLight bright.. \");\n\t}\n}\n\n```\n\n中间的外观类：\n\n```java\npackage com.atguigu.facade;\n\npublic class HomeTheaterFacade {\n\t\n\t//定义各个子系统对象\n\tprivate TheaterLight theaterLight;\n\tprivate Popcorn popcorn;\n\tprivate Stereo stereo;\n\tprivate Projector projector;\n\tprivate Screen screen;\n\tprivate DVDPlayer dVDPlayer;\n\t\n\t\n\t//构造器\n\tpublic HomeTheaterFacade() {\n\t\tsuper();\n\t\tthis.theaterLight = TheaterLight.getInstance();\n\t\tthis.popcorn = Popcorn.getInstance();\n\t\tthis.stereo = Stereo.getInstance();\n\t\tthis.projector = Projector.getInstance();\n\t\tthis.screen = Screen.getInstance();\n\t\tthis.dVDPlayer = DVDPlayer.getInstanc();\n\t}\n\n\t//操作分成 4 步\n\t\n\tpublic void ready() {\n\t\tpopcorn.on();\n\t\tpopcorn.pop();\n\t\tscreen.down();\n\t\tprojector.on();\n\t\tstereo.on();\n\t\tdVDPlayer.on();\n\t\ttheaterLight.dim();\n\t}\n\t\n\tpublic void play() {\n\t\tdVDPlayer.play();\n\t}\n\t\n\tpublic void pause() {\n\t\tdVDPlayer.pause();\n\t}\n\t\n\tpublic void end() {\n\t\tpopcorn.off();\n\t\ttheaterLight.bright();\n\t\tscreen.up();\n\t\tprojector.off();\n\t\tstereo.off();\n\t\tdVDPlayer.off();\n\t}\t\n}\n\n```\n\n\n\n\n\n## 七、外观模式在 MyBatis 框架应用的源码分析\n\n- MyBatis 中的 Configuration 去创建 MetaObject   对象使用到外观模式\n\n- 代码分析+Debug **源码**+示意图\n\n- 对源码中使用到的外观模式的角色类图\n\n\n \n\n## 八、外观模式的注意事项和细节\n\n- 外观模式**对外屏蔽了子系统的细节**，因此外观模式降低了客户端对子系统使用的复杂性\n\n- 外观模式对客户端与子系统的耦合关系 - 解耦，让子系统内部的模块更易维护和扩展\n\n- 通过合理的使用外观模式，可以帮我们更好的**划分访问的层次**\n\n- 当系统需要进行分层设计时，可以考虑使用 Facade 模式\n\n- 在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个\n\nFacade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性\n\n- 不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的。",[[1573826267247,["GJX@GJXAIOU",[[-1,2132,"atguig"],[1,2138,"gjxaio"]],[2132,2139],[2132,2139]]],[1573826267490,["GJX@GJXAIOU",[[-1,2634,"atguig"],[1,2640,"gjxaio"]],[2634,2641],[2634,2641]]],[1573826267712,["GJX@GJXAIOU",[[-1,3052,"atguig"],[1,3058,"gjxaio"]],[3052,3059],[3052,3059]]],[1573826267877,["GJX@GJXAIOU",[[-1,3502,"atguig"],[1,3508,"gjxaio"]],[3502,3509],[3502,3509]]],[1573826268125,["GJX@GJXAIOU",[[-1,3851,"atguig"],[1,3857,"gjxaio"]],[3851,3858],[3851,3858]]],[1573826268319,["GJX@GJXAIOU",[[-1,4263,"atguig"],[1,4269,"gjxaio"]],[4263,4270],[4263,4270]]],[1573826268606,["GJX@GJXAIOU",[[-1,4757,"atguig"],[1,4763,"gjxaio"]],[4757,4764],[4757,4764]]]],null,"GJX@GJXAIOU"],["d99242f5-2126-42e5-a639-4854e2a7079e",1573826778455,"# 第 13  章外观模式\n\n \n\n## 13.1      影院管理项目\n\n组建一个家庭影院：\n\nDVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机,要求完成使用家庭影院的功能，其过程为： 直接用遥控器：统筹各设备开关\n\n开爆米花机\n\n放下屏幕 \n\n开投影仪 \n\n开音响\n\n开 DVD，选 dvd\n\n去拿爆米花\n\n调暗灯光 \n\n播放\n\n观影结束后，关闭各种设备\n\n## 二、传统方式解决影院管理\n\n​      ![传统方式解决影院问题](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98.png)                                            \n\n\n \n\n \n\n## 三、传统方式解决影院管理问题分析\n\n- 在 ClientTest 的 main 方法中，创建各个子系统的对象，并直接去调用子系统(对象)相关方法，会造成调用过程混乱，没有清晰的过程；\n\n- 不利于在 ClientTest 中，去维护对子系统的操作；\n\n- 解决思路：**定义一个高层接口**，给**子系统中的一组接口提供一个一致的界面**(比如在高层接口提供四个方法\n\nready, play, pause, end )，用来访问子系统中的一群接口\n\n**- 也就是说 就是通过定义一个一致的接口(界面类)，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节 => **外观模式**\n\n## 四、外观模式基本介绍\n\n- 外观模式（Facade），也叫“过程模式：外观模式为子系统中的一组接口**提供一个一致的界面**，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用；\n\n- 外观模式通过定义一个一致的接口，用**以==屏蔽内部子系统的细节==**，使得**调用端只需跟这个接口发生调用**，而无需关心这个子系统的内部细节；\n\n \n\n## 五、外观模式原理类图\n\n​      ![外观模式原理类图](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.png) \n\n\n对类图说明(分类外观模式的角色)\n\n- 外观类(Facade): 为调用端提供统一的调用接口, 外观类知道哪些子系统负责处理请求,从而将调用端的请求代理给适当子系统对象\n\n- 调用者(Client): 外观接口的调用者\n\n- 子系统的集合：指模块或者子系统，处理 Facade 对象指派的任务，他是功能的实际提供者\n\n \n\n## 六、外观模式解决影院管理\n\n### （一）传统方式解决影院管理说明\n\n- 外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的。比如：在 pc 上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等），还有就是手机的重启功能（把关机和启动合为一个操作）。\n\n- 外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用\n\n- 示意图说明\n\n​       ![使用外观模式解决影院问题](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E4%BD%BF%E7%94%A8%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98.jpg)\n\n \n\n### （二） 外观模式应用实例\n\n- 应用实例要求\n\n  使用外观模式来完成家庭影院项目\n\n- 思路分析和图解(类图)\n\n​       ![外观模式解决影院问题的思路和类图](%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.resource/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%BD%B1%E9%99%A2%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF%E5%92%8C%E7%B1%BB%E5%9B%BE.jpg)\n\n- 代码实现\n\n   具体的实体类：\n\n```java\npackage com.gjxaiou.facade;\n\npublic class DVDPlayer {\n\t\n\t//使用单例模式, 使用饿汉式\n\tprivate static DVDPlayer instance = new DVDPlayer();\n\t\n\tpublic static DVDPlayer getInstanc() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" dvd on \");\n\t}\n\tpublic void off() {\n\t\tSystem.out.println(\" dvd off \");\n\t}\n\t\n\tpublic void play() {\n\t\tSystem.out.println(\" dvd is playing \");\n\t}\n\t\n\t//....\n\tpublic void pause() {\n\t\tSystem.out.println(\" dvd pause ..\");\n\t}\n}\n\n//-------------------------------------------\npackage com.gjxaiou.facade;\n\npublic class Popcorn {\n\t\n\tprivate static Popcorn instance = new Popcorn();\n\t\n\tpublic static Popcorn getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" popcorn on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" popcorn ff \");\n\t}\n\t\n\tpublic void pop() {\n\t\tSystem.out.println(\" popcorn is poping  \");\n\t}\n}\n\n//----------------------------------------------\npackage com.gjxaiou.facade;\n\npublic class Projector {\n\n\tprivate static Projector instance = new Projector();\n\t\n\tpublic static Projector getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" Projector on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" Projector ff \");\n\t}\n\t\n\tpublic void focus() {\n\t\tSystem.out.println(\" Projector is Projector  \");\n\t}\n\t\n\t//...\n}\n\n//--------------------------------------------------\n package com.gjxaiou.facade;\n\npublic class Screen {\n\n\tprivate static Screen instance = new Screen();\n\t\n\tpublic static Screen getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void up() {\n\t\tSystem.out.println(\" Screen up \");\n\t}\n\t\n\tpublic void down() {\n\t\tSystem.out.println(\" Screen down \");\n\t}\n}\n\n//-----------------------------------------------------\npackage com.gjxaiou.facade;\n\npublic class Stereo {\n\n\tprivate static Stereo instance = new Stereo();\n\t\n\tpublic static Stereo getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic void on() {\n\t\tSystem.out.println(\" Stereo on \");\n\t}\n\t\n\tpublic void off() {\n\t\tSystem.out.println(\" Stereo off \");\n\t}\n\t\n\tpublic void up() {\n\t\tSystem.out.println(\" Stereo up.. \");\n\t}\n\t\n\t//...\n}\n\n//---------------------------------------------\npackage com.gjxaiou.facade;\n\npublic class TheaterLight {\n\n\tprivate static TheaterLight instance = new TheaterLight();\n\n\tpublic static TheaterLight getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic void on() {\n\t\tSystem.out.println(\" TheaterLight on \");\n\t}\n\n\tpublic void off() {\n\t\tSystem.out.println(\" TheaterLight off \");\n\t}\n\n\tpublic void dim() {\n\t\tSystem.out.println(\" TheaterLight dim.. \");\n\t}\n\n\tpublic void bright() {\n\t\tSystem.out.println(\" TheaterLight bright.. \");\n\t}\n}\n\n```\n\n中间的外观类：\n\n```java\npackage com.gjxaiou.facade;\n\npublic class HomeTheaterFacade {\n\t\n\t//定义各个子系统对象\n\tprivate TheaterLight theaterLight;\n\tprivate Popcorn popcorn;\n\tprivate Stereo stereo;\n\tprivate Projector projector;\n\tprivate Screen screen;\n\tprivate DVDPlayer dVDPlayer;\n\t\n\t\n\t//构造器\n\tpublic HomeTheaterFacade() {\n\t\tsuper();\n\t\tthis.theaterLight = TheaterLight.getInstance();\n\t\tthis.popcorn = Popcorn.getInstance();\n\t\tthis.stereo = Stereo.getInstance();\n\t\tthis.projector = Projector.getInstance();\n\t\tthis.screen = Screen.getInstance();\n\t\tthis.dVDPlayer = DVDPlayer.getInstanc();\n\t}\n\n\t//操作分成 4 步\n\t\n\tpublic void ready() {\n\t\tpopcorn.on();\n\t\tpopcorn.pop();\n\t\tscreen.down();\n\t\tprojector.on();\n\t\tstereo.on();\n\t\tdVDPlayer.on();\n\t\ttheaterLight.dim();\n\t}\n\t\n\tpublic void play() {\n\t\tdVDPlayer.play();\n\t}\n\t\n\tpublic void pause() {\n\t\tdVDPlayer.pause();\n\t}\n\t\n\tpublic void end() {\n\t\tpopcorn.off();\n\t\ttheaterLight.bright();\n\t\tscreen.up();\n\t\tprojector.off();\n\t\tstereo.off();\n\t\tdVDPlayer.off();\n\t}\t\n}\n\n```\n\n\n\n\n\n## 七、外观模式在 MyBatis 框架应用的源码分析\n\n- MyBatis 中的 Configuration 去创建 MetaObject   对象使用到外观模式\n\n- 代码分析+Debug **源码**+示意图\n\n- 对源码中使用到的外观模式的角色类图\n\n\n \n\n## 八、外观模式的注意事项和细节\n\n- 外观模式**对外屏蔽了子系统的细节**，因此外观模式降低了客户端对子系统使用的复杂性\n\n- 外观模式对客户端与子系统的耦合关系 - 解耦，让子系统内部的模块更易维护和扩展\n\n- 通过合理的使用外观模式，可以帮我们更好的**划分访问的层次**\n\n- 当系统需要进行分层设计时，可以考虑使用 Facade 模式\n\n- 在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个\n\nFacade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性\n\n- 不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的。",[[1573826736100,["GJX@GJXAIOU",[[-1,113,"\n"]],[113,113],[112,112]]],[1573826737187,["GJX@GJXAIOU",[[-1,119,"\n"]],[119,119],[118,118]]],[1573826737923,["GJX@GJXAIOU",[[-1,125,"\n"]],[125,125],[124,124]]],[1573826738626,["GJX@GJXAIOU",[[-1,131,"\n"]],[131,131],[130,130]]],[1573826739395,["GJX@GJXAIOU",[[-1,135,"\n"]],[135,135],[134,134]]],[1573826740131,["GJX@GJXAIOU",[[-1,147,"\n"]],[147,147],[146,146]]],[1573826740949,["GJX@GJXAIOU",[[-1,153,"\n"]],[153,153],[152,152]]],[1573826742148,["GJX@GJXAIOU",[[-1,159,"\n"]],[159,159],[158,158]]],[1573826743003,["GJX@GJXAIOU",[[-1,162,"\n"]],[162,162],[161,161]]],[1573826746627,["GJX@GJXAIOU",[[-1,447," \n\n \n"]],[446,451],[446,446]]],[1573826748555,["GJX@GJXAIOU",[[-1,447,"\n"]],[447,447],[446,446]]],[1573826749021,["GJX@GJXAIOU",[[-1,446,"\n"]],[446,446],[445,445]]],[1573826751852,["GJX@GJXAIOU",[[-1,941,"\n"]],[941,941],[940,940]]],[1573826753606,["GJX@GJXAIOU",[[-1,1146,"\n"]],[1146,1146],[1145,1145]]],[1573826755164,["GJX@GJXAIOU",[[-1,1231,"\n"]],[1231,1231],[1230,1230]]],[1573826756427,["GJX@GJXAIOU",[[-1,1255,"\n"]],[1255,1255],[1254,1254]]],[1573826757314,["GJX@GJXAIOU",[[-1,1303," "]],[1304,1304],[1303,1303]]],[1573826757723,["GJX@GJXAIOU",[[-1,1304,"\n"]],[1303,1303],[1302,1302]]],[1573826758211,["GJX@GJXAIOU",[[-1,1303,"\n"]],[1302,1302],[1301,1301]]]],null,"GJX@GJXAIOU"]]}