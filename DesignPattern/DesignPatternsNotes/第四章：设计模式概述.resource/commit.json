{"compress":true,"commitItems":[["061565f8-b08f-48a5-9ca9-66f629a068cf",1573474147487,"",[[1573474094699,["GJX@GJXAIOU",[[1,0,"# 第四章：设计模式概述\n\n\n\n"]],[0,0],[15,15]]],[1573474129018,["GJX@GJXAIOU",[[1,14,"## 4.1 掌握设计模式的层次\n\n1) 第 1 层：刚开始学编程不久，听说过什么是设计模式\n\n2) 第 2 层：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道\n\n3) 第 3 层：学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的\n\n4) 第 4 层：阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的好处。\n\n5) 第 5 层：代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来。\n\n## 4.2 设计模式介绍\n\n1) 设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，**模式不是代码**，而是**某类问题的通****用解决方案**，设计模式（Design  pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n2) 设计模式的本质提高 **软件的维护性，通用性和扩展性，并降低软件的复杂度**。\n\n3) <<**设计模式**>> 是经典的书，作者是 Erich  Gamma、Richard  Helm、Ralph  Johnson 和 John  Vlissides Design（俗称 “四人组 GOF”）\n\n4) 设计模式并不局限于某种语言，java，php，c++ 都有设计模式.\n\n## 4.3 设计模式类型\n\n设计模式分为**三种类型**，共 **23** **种**\n\n1) **创建型**模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。\n\n2) **结构型**模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n\n3) 行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)。\n\n注意：不同的书籍上对分类和名称略有差别"]],[14,14],[860,860]]],[1573474136126,["GJX@GJXAIOU",[[-1,17,"4.1 "]],[17,21],[17,17]]],[1573474136984,["GJX@GJXAIOU",[[1,17,"（）"]],[17,17],[19,19]]],[1573474138673,["GJX@GJXAIOU",[[1,18,"一"]],[18,18],[19,19]]],[1573474151579,["GJX@GJXAIOU",[[-1,261,"4.2 "]],[261,265],[261,261]]],[1573474152181,["GJX@GJXAIOU",[[1,261,"（）"]],[261,261],[263,263]]],[1573474153550,["GJX@GJXAIOU",[[1,262,"二"]],[262,262],[263,263]]],[1573474214658,["GJX@GJXAIOU",[[-1,329,"****"]],[333,333],[329,329]]]],null,"GJX@GJXAIOU"],["3253fe27-d919-45e9-8087-953f6ceb8e83",1573475118898,"# 第四章：设计模式概述\n\n## （一）掌握设计模式的层次\n\n1) 第 1 层：刚开始学编程不久，听说过什么是设计模式\n\n2) 第 2 层：有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己却不知道\n\n3) 第 3 层：学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的\n\n4) 第 4 层：阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的好处。\n\n5) 第 5 层：代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来。\n\n## （二）设计模式介绍\n\n1) 设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，**模式不是代码**，而是**某类问题的通用解决方案**，设计模式（Design  pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n2) 设计模式的本质提高 **软件的维护性，通用性和扩展性，并降低软件的复杂度**。\n\n3) <<**设计模式**>> 是经典的书，作者是 Erich  Gamma、Richard  Helm、Ralph  Johnson 和 John  Vlissides Design（俗称 “四人组 GOF”）\n\n4) 设计模式并不局限于某种语言，java，php，c++ 都有设计模式.\n\n## 4.3 设计模式类型\n\n设计模式分为**三种类型**，共 **23** **种**\n\n1) **创建型**模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。\n\n2) **结构型**模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n\n3) 行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)。\n\n注意：不同的书籍上对分类和名称略有差别\n\n",[[1573475068389,["GJX@GJXAIOU",[[-1,272,"1) "]],[272,275],[272,272]]],[1573475068733,["GJX@GJXAIOU",[[1,272,"- "]],[272,272],[274,274]]],[1573475072018,["GJX@GJXAIOU",[[-1,405,"2) "]],[405,408],[405,405]]],[1573475072558,["GJX@GJXAIOU",[[1,405,"- "]],[405,405],[407,407]]],[1573475075060,["GJX@GJXAIOU",[[-1,448,"3) "]],[448,451],[448,448]]],[1573475075460,["GJX@GJXAIOU",[[1,448,"- "]],[448,448],[450,450]]],[1573475078315,["GJX@GJXAIOU",[[-1,452,"**"]],[454,454],[452,452]]],[1573475080002,["GJX@GJXAIOU",[[-1,456,"**"]],[458,458],[456,456]]],[1573475081458,["GJX@GJXAIOU",[[1,458,"·"]],[458,458],[459,459]]],[1573475082602,["GJX@GJXAIOU",[[-1,458,"·"]],[459,459],[458,458]]],[1573475083077,["GJX@GJXAIOU",[[1,458,"`"]],[458,458],[459,459]]],[1573475084956,["GJX@GJXAIOU",[[1,450,"`"]],[450,450],[451,451]]],[1573475090060,["GJX@GJXAIOU",[[-1,553,"4) "]],[553,556],[553,553]]],[1573475090974,["GJX@GJXAIOU",[[1,553,"- "]],[553,553],[555,555]]],[1573475094627,["GJX@GJXAIOU",[[-1,637,"1) "]],[637,640],[637,637]]],[1573475095252,["GJX@GJXAIOU",[[1,637,"- "]],[637,637],[639,639]]],[1573475097651,["GJX@GJXAIOU",[[-1,679,"2) "]],[679,682],[679,679]]],[1573475098252,["GJX@GJXAIOU",[[1,679,"- "]],[679,679],[681,681]]],[1573475100635,["GJX@GJXAIOU",[[-1,728,"\n3) "]],[728,732],[728,728]]],[1573475101100,["GJX@GJXAIOU",[[1,728,"- "]],[728,728],[730,730]]],[1573475103202,["GJX@GJXAIOU",[[-1,678,"\n"]],[678,678],[677,677]]],[1573475259835,["GJX@GJXAIOU",[[-1,627,"** **"]],[632,632],[627,627]]]],null,"GJX@GJXAIOU"]]}