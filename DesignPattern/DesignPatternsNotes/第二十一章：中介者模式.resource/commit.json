{"compress":true,"commitItems":[["faa9aa85-f506-4a3b-b6ce-6abcf9011319",1573826275977,"# 第二十一章：中介者模式\n\n \n\n## 一、智能家庭项目\n\n  智能家庭项目：\n\n- 智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘 等\n\n- 主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为：闹铃响起->咖啡机开始做咖啡->窗帘自动落下->电视机开始播放\n\n## 二、传统方案解决智能家庭管理问题\n\n​     ![1573803673528](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573803673528.png) \n\n## 三、传统的方式的问题分析\n\n- 当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂\n\n- 各个电器对象彼此联系，你中有我，我中有你，不利于松耦合.\n\n- 各个电器对象之间所传递的消息(参数)，容易混乱\n\n- 当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想                                                                         考虑中介者模式\n\n## 四、中介者模式基本介绍\n\n基本介绍\n\n- 中介者模式（Mediator Pattern），用一个**中介对象来封装一系列的对象交互**。中介者使各个对象不需要显式地相互引用，从而使其**耦合松散**，而且可以独立地改变它们之间的交互\n\n- 中介者模式属于行为型模式，使代码易于维护\n\n- 比如 MVC 模式，C（Controller 控制器）是 M（Model 模型）和 V（View 视图）的中介者，在前后端交互时起到了中间人的作用\n\n## 中介者模式的原理类图\n\n ![1573803789049](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573803789049.png)\n\n​       \n\n对原理类图的说明-即(中介者模式的角色及职责)\n\n- Mediator 就是抽象中介者,定义了同事对象到中介者对象的接口\n\n- Colleague 是抽象同事类\n\n- ConcreteMediator 具体的中介者对象, 实现抽象方法, 他需要知道所有的具体的同事类,即以一个集合来管理\n\nHashMap,并接受某个同事对象消息，完成相应的任务\n\n- ConcreteColleague 具体的同事类，会有很多, 每个同事只知道自己的行为， 而不了解其他同事类的行为(方法)， 但  是他们都依赖中介者对象\n\n## 六、中介者模式应用实例-智能家庭管理\n\n- 应用实例要求\n\n  完成前面的智能家庭的项目，使用中介者模式\n\n- 思路分析和图解(类图)\n\n​       ![1573804580334](%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.resource/1573804580334.png)\n\n- 代码实现\n\n实例\n\n```java\npackage com.atguigu.mediator.smarthouse;\n\n//同事抽象类\npublic abstract class Colleague {\n\tprivate Mediator mediator;\n\tpublic String name;\n\n\tpublic Colleague(Mediator mediator, String name) {\n\t\tthis.mediator = mediator;\n\t\tthis.name = name;\n\t}\n\n\tpublic Mediator GetMediator() {\n\t\treturn this.mediator;\n\t}\n\n\tpublic abstract void SendMessage(int stateChange);\n}\n\n//--------------------------------------------------------\npackage com.atguigu.mediator.smarthouse;\n\n//具体的同事类\npublic class Alarm extends Colleague {\n\n\t//构造器\n\tpublic Alarm(Mediator mediator, String name) {\n\t\tsuper(mediator, name);\n\t\t//在创建Alarm 同事对象时，将自己放入到ConcreteMediator 对象中[集合]\n\t\tmediator.Register(name, this);\n\t}\n\n\tpublic void SendAlarm(int stateChange) {\n\t\tSendMessage(stateChange);\n\t}\n\n\t@Override\n\tpublic void SendMessage(int stateChange) {\n\t\t//调用的中介者对象的getMessage\n\t\tthis.GetMediator().GetMessage(stateChange, this.name);\n\t}\n}\n\n//------------------------------------------------------------\npackage com.atguigu.mediator.smarthouse;\n\npublic class CoffeeMachine extends Colleague {\n\n\tpublic CoffeeMachine(Mediator mediator, String name) {\n\t\tsuper(mediator, name);\n\t\tmediator.Register(name, this);\n\t}\n\n\t@Override\n\tpublic void SendMessage(int stateChange) {\n\t\tthis.GetMediator().GetMessage(stateChange, this.name);\n\t}\n\n\tpublic void StartCoffee() {\n\t\tSystem.out.println(\"It's time to startcoffee!\");\n\t}\n\n\tpublic void FinishCoffee() {\n\t\tSystem.out.println(\"After 5 minutes!\");\n\t\tSystem.out.println(\"Coffee is ok!\");\n\t\tSendMessage(0);\n\t}\n}\n\n//-----------------------------------------------\npackage com.atguigu.mediator.smarthouse;\n\npublic class Curtains extends Colleague {\n\n\tpublic Curtains(Mediator mediator, String name) {\n\t\tsuper(mediator, name);\n\t\tmediator.Register(name, this);\n\t}\n\n\t@Override\n\tpublic void SendMessage(int stateChange) {\n\t\tthis.GetMediator().GetMessage(stateChange, this.name);\n\t}\n\n\tpublic void UpCurtains() {\n\t\tSystem.out.println(\"I am holding Up Curtains!\");\n\t}\n}\n\n//-------------------------------------------------\npackage com.atguigu.mediator.smarthouse;\n\npublic class TV extends Colleague {\n\n\tpublic TV(Mediator mediator, String name) {\n\t\tsuper(mediator, name);\n\t\tmediator.Register(name, this);\n\t}\n\n\t@Override\n\tpublic void SendMessage(int stateChange) {\n\t\tthis.GetMediator().GetMessage(stateChange, this.name);\n\t}\n\n\tpublic void StartTv() {\n\t\tSystem.out.println(\"It's time to StartTv!\");\n\t}\n\n\tpublic void StopTv() {\n\t\tSystem.out.println(\"StopTv!\");\n\t}\n}\n\n```\n\n中介者和具体的中介者类：\n\n```java\npackage com.atguigu.mediator.smarthouse;\n\npublic abstract class Mediator {\n\t//将给中介者对象，加入到集合中\n\tpublic abstract void Register(String colleagueName, Colleague colleague);\n\n\t//接收消息, 具体的同事对象发出\n\tpublic abstract void GetMessage(int stateChange, String colleagueName);\n\n\tpublic abstract void SendMessage();\n}\n\n//----------------------------------------------------\npackage com.atguigu.mediator.smarthouse;\n\nimport java.util.HashMap;\n\n//具体的中介者类\npublic class ConcreteMediator extends Mediator {\n\t//集合，放入所有的同事对象\n\tprivate HashMap<String, Colleague> colleagueMap;\n\tprivate HashMap<String, String> interMap;\n\n\tpublic ConcreteMediator() {\n\t\tcolleagueMap = new HashMap<String, Colleague>();\n\t\tinterMap = new HashMap<String, String>();\n\t}\n\n\t@Override\n\tpublic void Register(String colleagueName, Colleague colleague) {\n\t\tcolleagueMap.put(colleagueName, colleague);\n\n\t\tif (colleague instanceof Alarm) {\n\t\t\tinterMap.put(\"Alarm\", colleagueName);\n\t\t} else if (colleague instanceof CoffeeMachine) {\n\t\t\tinterMap.put(\"CoffeeMachine\", colleagueName);\n\t\t} else if (colleague instanceof TV) {\n\t\t\tinterMap.put(\"TV\", colleagueName);\n\t\t} else if (colleague instanceof Curtains) {\n\t\t\tinterMap.put(\"Curtains\", colleagueName);\n\t\t}\n\t}\n\n\t//具体中介者的核心方法\n\t//1. 根据得到消息，完成对应任务\n\t//2. 中介者在这个方法，协调各个具体的同事对象，完成任务\n\t@Override\n\tpublic void GetMessage(int stateChange, String colleagueName) {\n\n\t\t//处理闹钟发出的消息\n\t\tif (colleagueMap.get(colleagueName) instanceof Alarm) {\n\t\t\tif (stateChange == 0) {\n\t\t\t\t((CoffeeMachine) (colleagueMap.get(interMap\n\t\t\t\t\t\t.get(\"CoffeeMachine\")))).StartCoffee();\n\t\t\t\t((TV) (colleagueMap.get(interMap.get(\"TV\")))).StartTv();\n\t\t\t} else if (stateChange == 1) {\n\t\t\t\t((TV) (colleagueMap.get(interMap.get(\"TV\")))).StopTv();\n\t\t\t}\n\n\t\t} else if (colleagueMap.get(colleagueName) instanceof CoffeeMachine) {\n\t\t\t((Curtains) (colleagueMap.get(interMap.get(\"Curtains\"))))\n\t\t\t\t\t.UpCurtains();\n\n\t\t} else if (colleagueMap.get(colleagueName) instanceof TV) {//如果TV发现消息\n\n\t\t} else if (colleagueMap.get(colleagueName) instanceof Curtains) {\n\t\t\t//如果是以窗帘发出的消息，这里处理...\n\t\t}\n\t}\n\n\t@Override\n\tpublic void SendMessage() {\n\t}\n}\n\n```\n\n使用测试：\n\n```java\npackage com.atguigu.mediator.smarthouse;\n\npublic class ClientTest {\n\n\tpublic static void main(String[] args) {\n\t\t//创建一个中介者对象\n\t\tMediator mediator = new ConcreteMediator();\n\t\t\n\t\t//创建Alarm 并且加入到  ConcreteMediator 对象的HashMap\n\t\tAlarm alarm = new Alarm(mediator, \"alarm\");\n\t\t\n\t\t//创建了CoffeeMachine 对象，并  且加入到  ConcreteMediator 对象的HashMap\n\t\tCoffeeMachine coffeeMachine = new CoffeeMachine(mediator,\n\t\t\t\t\"coffeeMachine\");\n\t\t\n\t\t//创建 Curtains , 并  且加入到  ConcreteMediator 对象的HashMap\n\t\tCurtains curtains = new Curtains(mediator, \"curtains\");\n\t\tTV tV = new TV(mediator, \"TV\");\n\t\t\n\t\t//让闹钟发出消息\n\t\talarm.SendAlarm(0);\n\t\tcoffeeMachine.FinishCoffee();\n\t\talarm.SendAlarm(1);\n\t}\n}\n\n```\n\n \n\n## 七、中介者模式的注意事项和细节\n\n- 多个类相互耦合，会形成网状结构, 使用中介者模式将网状结构分离为星型结构，进行解耦\n\n- 减少类间依赖，降低了耦合，符合迪米特原则\n\n- 中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响\n\n- 如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意",[[1573826218374,["GJX@GJXAIOU",[[-1,1459,"atguig"],[1,1465,"gjxaio"]],[1459,1466],[1459,1466]]],[1573826218549,["GJX@GJXAIOU",[[-1,1872,"atguig"],[1,1878,"gjxaio"]],[1872,1879],[1872,1879]]],[1573826218716,["GJX@GJXAIOU",[[-1,2409,"atguig"],[1,2415,"gjxaio"]],[2409,2416],[2409,2416]]],[1573826218884,["GJX@GJXAIOU",[[-1,3002,"atguig"],[1,3008,"gjxaio"]],[3002,3009],[3002,3009]]],[1573826219055,["GJX@GJXAIOU",[[-1,3453,"atguig"],[1,3459,"gjxaio"]],[3453,3460],[3453,3460]]],[1573826219224,["GJX@GJXAIOU",[[-1,3921,"atguig"],[1,3927,"gjxaio"]],[3921,3928],[3921,3928]]],[1573826219683,["GJX@GJXAIOU",[[-1,4278,"atguig"],[1,4284,"gjxaio"]],[4278,4285],[4278,4285]]],[1573826219865,["GJX@GJXAIOU",[[-1,6014,"atguig"],[1,6020,"gjxaio"]],[6014,6021],[6014,6021]]]],null,"GJX@GJXAIOU"]]}