{"compress":true,"commitItems":[["4b094a7e-2f8a-4ce3-89d0-979d3eb2f1f6",1571215886116,"",[[1571215833405,["GJX@GJXAIOU",[[1,0,"# 第一章：内容介绍\n\n\n\n"]],[0,0],[13,13]]],[1571215863498,["GJX@GJXAIOU",[[1,13,"## 1.1 Java 设计模式内容介绍\n\n### 1.1.1 先看几个经典的面试题\n\n#### Ø 原型设计模式问题：\n\n1) 有请使用 UML 类图画出原型模式核心角色\n\n2) 原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写 clone 方法实现深拷贝、使用序列化来实现深拷贝)\n\n3) 在 Spring 框架中哪里使用到原型模式，并对源码进行分析\n\nbeans.xml\n\n<bean id=\"id01\" class=\"com.atguigu.spring.bean.Monster\" scope=\"prototype\"/>\n\n4) Spring  中原型  bean  的创建，就是原型模式的应用\n\n5)   |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg) | \n代码分析+Debug 源码\n\nØ 设计模式的**七大原则**: 要求：1) 七大设计原则核心思想 2) 能够以类图的说明设计原则 3) 在项目实际开发中，\n\n你在哪里使用到了 ocp 原则\n\n |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.jpg) | \n\n |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.jpg) | \n\nØ 解释器设计模式\n\n1) 介绍解释器设计模式是什么?\n\n2) 画出解释器设计模式的 UML 类图,分析设计模式中的各个角色是什么?\n\n3) 请说明 Spring 的框架中，哪里使用到了解释器设计模式，并做源码级别的分析\n\n4) Spring 框架中 SpelExpressionParser 就使用到解释器模式\n\n5)        |  |  |  |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.gif) |  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif) |\n|  | \n代码分析+Debug 源码+模式角色分析说明\n\nØ ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif)单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点?\n\n#### 单例设计模式一共有 8 种写法，后面我们会依次讲到饿汉式 两种\n\n懒汉式 三种双重检查\n\n静态内部类枚举\n\n### 1.1.2 设计模式的重要性\n\n1) 软件工程中，**设计模式**（design  pattern）是对软件设计中**普遍存在（反复出现）**的各种问题，所提出的**解决方案**。这个术语是由埃里希·伽玛（Erich  Gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的\n\n2)   |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif) | \n大厦 VS 简易房\n\n3) 拿实际工作经历来说, 当一个项目开发完后，如果**客户提出增新功能**，怎么办?。（可扩展性,使用设计模式，软件具有很好的扩展性）\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg)\n\n4) 如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (**维护性**[可读性、规范性])\n\n5) 目前程序员门槛越来越高，一线 IT 公司(大厂)，都会问你在实际项目中**使用过什么设计模式，怎样使用的，解决了什么问题**。\n\n6) **设计模式在软件中哪里**？面向对象(oo)=>功能模块[设计模式+算法(数据结构)]=>框架[使用到多种设计模式]=> 架构 [服务器集群]\n\n7) 如果想成为合格软件**工程师**，那就花时间来研究下设计模式是非常必要的.\n\n## 1.2 课程亮点和授课方式\n\n1) 课程深入,非蜻蜓点水\n\n2) 课程成体系，非星星点灯\n\n3) 高效而愉快的学习 , **设计模式很有用，其实也很好玩**，很像小时候搭积木, 怎样搭建更加稳定，坚固\n\n4) 设计模式很重要，因为包含很多编程思想，还是有一定难度的，我们努力做到通俗易懂\n\n5) 采用  应用场景->设计模式->剖析原理->分析实现步骤(图解)->代码实现-> 框架或项目源码分析(找到使用的地方) 的步骤讲解 [比如: 建造者模式 ]\n\n6) 课程目标：让大家掌握本质 , 达能在工作中灵活运用解决实际问题和优化程序结构的目的."]],[13,13],[2212,2212]]],[1571216080160,["GJX@GJXAIOU",[[-1,16,"1.1 "]],[20,20],[16,16]]],[1571216082355,["GJX@GJXAIOU",[[1,16,"一"],[-1,30,""],[-1,326,"  "],[1,328,"  "],[-1,871,"       "],[1,878,"       "],[-1,1432,"  "],[1,1434,"  "]],[16,16],[17,17]]],[1571216082689,["GJX@GJXAIOU",[[1,17,"、"]],[17,17],[18,18]]],[1571216086758,["GJX@GJXAIOU",[[-1,37,"1.1.1 "]],[37,43],[37,37]]],[1571216087264,["GJX@GJXAIOU",[[1,37,"（）"]],[37,37],[39,39]]],[1571216088954,["GJX@GJXAIOU",[[1,38,"一"]],[38,38],[39,39]]],[1571216093495,["GJX@GJXAIOU",[[-1,57,"Ø "]],[58,59],[57,57]]],[1571216095510,["GJX@GJXAIOU",[[1,57,"1 "]],[57,57],[58,58]]],[1571216095640,["GJX@GJXAIOU",[[1,58,"."]],[58,58],[59,59]]],[1571216099242,["GJX@GJXAIOU",[[-1,71,"1) "]],[71,74],[71,71]]],[1571216102654,["GJX@GJXAIOU",[[-1,94,"2) "]],[94,97],[94,94]]],[1571216104327,["GJX@GJXAIOU",[[-1,158,"3) "]],[158,161],[158,158]]],[1571216106893,["GJX@GJXAIOU",[[1,158,"-"]],[158,158],[159,159]]],[1571216107957,["GJX@GJXAIOU",[[1,94,"-"]],[94,94],[95,95]]],[1571216108759,["GJX@GJXAIOU",[[1,71,"-"]],[71,71],[72,72]]],[1571216110039,["GJX@GJXAIOU",[[1,96," "]],[96,96],[97,97]]],[1571216110884,["GJX@GJXAIOU",[[1,72," "]],[72,72],[73,73]]],[1571216111688,["GJX@GJXAIOU",[[1,163," "]],[163,163],[164,164]]],[1571216112832,["GJX@GJXAIOU",[[-1,161,"\n"]],[161,161],[160,160]]],[1571216113553,["GJX@GJXAIOU",[[-1,95,"\n"]],[95,95],[94,94]]],[1571216124591,["GJX@GJXAIOU",[[-1,204,"\n"]],[204,204],[203,203]]],[1571216128865,["GJX@GJXAIOU",[[-1,194,"beans.xml\n<bean id=\"id01\" class=\"com.atguigu.spring.bean.Monster\" scope=\"prototype\"/>\n"]],[194,280],[194,194]]],[1571216129305,["GJX@GJXAIOU",[[-1,194,"\n"]],[194,194],[193,193]]],[1571216131086,["GJX@GJXAIOU",[[-1,194,"4)"]],[194,196],[194,194]]],[1571216132476,["GJX@GJXAIOU",[[1,194,"-"]],[194,194],[195,195]]],[1571216132802,["GJX@GJXAIOU",[[1,196," "]],[195,195],[196,196]]],[1571216135639,["GJX@GJXAIOU",[[-1,194,"-  "]],[194,197],[194,194]]],[1571216136062,["GJX@GJXAIOU",[[-1,193,"\n"]],[194,194],[193,193]]],[1571216144266,["GJX@GJXAIOU",[[-1,230,"  |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg) | "],[1,325,"-"]],[230,230],[231,231]]],[1571216146263,["GJX@GJXAIOU",[[-1,231,"\n"]],[232,232],[231,231]]],[1571216149568,["GJX@GJXAIOU",[[-1,227,"5) "]],[227,229],[227,227]]],[1571216150227,["GJX@GJXAIOU",[[1,228," "]],[228,228],[229,229]]],[1571216173006,["GJX@GJXAIOU",[[-1,244,"Ø "]],[244,246],[244,244]]],[1571216175959,["GJX@GJXAIOU",[[1,244,"#### "]],[244,244],[309,309]]],[1571216178398,["GJX@GJXAIOU",[[-1,254,"**"]],[256,256],[254,254]]],[1571216179639,["GJX@GJXAIOU",[[-1,258,"**"]],[260,260],[258,258]]],[1571216181290,["GJX@GJXAIOU",[[1,260,"\n"]],[260,260],[261,261]]],[1571216183327,["GJX@GJXAIOU",[[1,264,"\n"]],[264,264],[265,265]]],[1571216186575,["GJX@GJXAIOU",[[-1,279,"2) "]],[279,282],[279,279]]],[1571216186822,["GJX@GJXAIOU",[[1,279,"\n"]],[279,279],[280,280]]],[1571216189086,["GJX@GJXAIOU",[[-1,293,"3) "]],[293,296],[293,293]]],[1571216189318,["GJX@GJXAIOU",[[1,293,"\n"]],[293,293],[294,294]]],[1571216192479,["GJX@GJXAIOU",[[-1,265,"1) "]],[268,268],[265,265]]],[1571216195198,["GJX@GJXAIOU",[[-1,299,"，"]],[300,300],[299,299]]],[1571216201439,["GJX@GJXAIOU",[[1,265,"* "],[1,277,"* "],[1,291,"* "]],[265,299],[267,305]]],[1571216223607,["GJX@GJXAIOU",[[-1,306,"\n"]],[307,307],[306,306]]],[1571216223802,["GJX@GJXAIOU",[[-1,305,"\n"]],[306,306],[305,305]]],[1571216225523,["GJX@GJXAIOU",[[1,305,"，"]],[305,305],[306,306]]],[1571216234094,["GJX@GJXAIOU",[[-1,323," |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image003.jpg) | \n\n |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image005.jpg) | "]],[323,513],[323,323]]],[1571216237125,["GJX@GJXAIOU",[[1,323,"****"]],[323,323],[325,325]]],[1571216244823,["GJX@GJXAIOU",[[1,325,"设计模式常用的七大原则："]],[325,325],[337,337]]],[1571216246496,["GJX@GJXAIOU",[[1,341,"\n"]],[339,339],[340,340]]],[1571216253868,["GJX@GJXAIOU",[[1,340,"- 单一职责原则"]],[340,340],[348,348]]],[1571216254490,["GJX@GJXAIOU",[[1,349,"- \n"]],[348,348],[351,351]]],[1571216259868,["GJX@GJXAIOU",[[1,351,"接口隔离原则"]],[351,351],[357,357]]],[1571216260200,["GJX@GJXAIOU",[[1,358,"- \n"]],[357,357],[360,360]]],[1571216269857,["GJX@GJXAIOU",[[1,360,"依赖倒转原则"]],[360,360],[366,366]]],[1571216270246,["GJX@GJXAIOU",[[1,367,"- \n"]],[366,366],[369,369]]],[1571216298756,["GJX@GJXAIOU",[[1,369,"里氏替换原则"]],[369,369],[375,375]]],[1571216299088,["GJX@GJXAIOU",[[1,376,"- \n"]],[375,375],[378,378]]],[1571216304218,["GJX@GJXAIOU",[[1,378,"开闭原则（）"]],[378,378],[384,384]]],[1571216307230,["GJX@GJXAIOU",[[1,383,"OCP"]],[383,383],[386,386]]],[1571216309507,["GJX@GJXAIOU",[[1,388,"- \n"]],[387,387],[390,390]]],[1571216314057,["GJX@GJXAIOU",[[1,390,"迪米特原则"]],[390,390],[395,395]]],[1571216314522,["GJX@GJXAIOU",[[1,396,"- \n"]],[395,395],[398,398]]],[1571216320186,["GJX@GJXAIOU",[[1,398,"合成复用原则"]],[398,398],[404,404]]],[1571216320592,["GJX@GJXAIOU",[[1,405,"- \n"]],[404,404],[407,407]]],[1571216321264,["GJX@GJXAIOU",[[-1,405,"- "]],[407,407],[405,405]]],[1571216382321,["GJX@GJXAIOU",[[-1,407,"Ø 解释器设计模式\n\n1) 介绍解释器设计模式是什么?\n\n2) 画出解释器设计模式的 UML 类图,分析设计模式中的各个角色是什么?\n\n3) 请说明 Spring 的框架中，哪里使用到了解释器设计模式，并做源码级别的分析\n\n4) Spring 框架中 SpelExpressionParser 就使用到解释器模式\n\n5)        |  |  |  |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image007.gif) |  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif) |\n|  | \n代码分析+Debug 源码+模式角色分析说明\n\nØ ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image009.gif)单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点?\n\n#### 单例设计模式一共有 8 种写法，后面我们会依次讲到饿汉式 两种\n\n懒汉式 三种双重检查\n\n静态内部类枚举\n"]],[407,976],[407,407]]],[1571216383232,["GJX@GJXAIOU",[[-1,407,"\n"]],[407,407],[406,406]]],[1571216393711,["GJX@GJXAIOU",[[-1,427,"1) "]],[427,430],[427,427]]],[1571216394148,["GJX@GJXAIOU",[[1,427,"- "]],[427,427],[429,429]]],[1571216401976,["GJX@GJXAIOU",[[-1,555,"2)   |  |\n|  | ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image011.gif) | \n大厦 VS 简易房"]],[554,653],[555,555]]],[1571216403272,["GJX@GJXAIOU",[[-1,556,"\n"]],[555,555],[554,554]]],[1571216405768,["GJX@GJXAIOU",[[-1,556,"3) "]],[556,559],[556,556]]],[1571216406056,["GJX@GJXAIOU",[[-1,555,"\n"]],[556,556],[555,555]]],[1571216407417,["GJX@GJXAIOU",[[1,555,"- "]],[555,555],[557,557]]],[1571216409903,["GJX@GJXAIOU",[[-1,624,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg)"]],[624,704],[624,624]]],[1571216410217,["GJX@GJXAIOU",[[-1,625,"\n"]],[624,624],[623,623]]],[1571216412056,["GJX@GJXAIOU",[[-1,624,"\n4) "]],[624,628],[624,624]]],[1571216412711,["GJX@GJXAIOU",[[-1,623,"\n"]],[624,624],[623,623]]],[1571216413955,["GJX@GJXAIOU",[[1,623,"- "]],[623,623],[625,625]]],[1571216419063,["GJX@GJXAIOU",[[-1,675,"5) "]],[675,678],[675,675]]],[1571216420116,["GJX@GJXAIOU",[[1,675,"- "]],[675,675],[677,677]]],[1571216422163,["GJX@GJXAIOU",[[-1,742,"6) "]],[742,745],[742,742]]],[1571216423090,["GJX@GJXAIOU",[[1,742,"- "]],[742,742],[744,744]]],[1571216425983,["GJX@GJXAIOU",[[-1,818,"7) "]],[818,821],[818,818]]],[1571216426738,["GJX@GJXAIOU",[[1,818,"- "]],[818,818],[820,820]]],[1571216437554,["GJX@GJXAIOU",[[-1,877,"1) 课程深入,非蜻蜓点水\n\n2) 课程成体系，非星星点灯\n\n3) 高效而愉快的学习 , **设计模式很有用，其实也很好玩**，很像小时候搭积木, 怎样搭建更加稳定，坚固\n\n4) 设计模式很重要，因为包含很多编程思想，还是有一定难度的，我们努力做到通俗易懂\n\n5)"]],[877,1009],[877,877]]],[1571216440538,["GJX@GJXAIOU",[[-1,958,"6) 课程目标：让大家掌握本质 , 达能在工作中灵活运用解决实际问题和优化程序结构的目的.\n"]],[957,1003],[957,957]]],[1571216441915,["GJX@GJXAIOU",[[-1,877," "]],[878,878],[877,877]]]],null,"GJX@GJXAIOU"]]}