{"compress":true,"commitItems":[["09428398-343e-4674-a612-879036464b68",1573826218248,"# 第二十六章：职责链模式\n\n## 一、学校 OA 系统的采购审批项目：需求是\n\n采购员采购教学器材\n\n-  如果金额 小于等于 5000,  由教学主任审批 （0<=x<=5000）\n\n-  如果金额 小于等于 10000,  由院长审批 (5000<x<=10000)\n\n-  如果金额 小于等于 30000,  由副校长审批 (10000<x<=30000)\n\n-  如果金额 超过 30000 以上，有校长审批 ( 30000<x)\n\n请设计程序完成采购审批项目\n\n## 二、传统方案解决OA 系统审批，传统的设计方案(类图)\n\n​                             ![1573809734509](%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.resource/1573809734509.png)                                             \n\n## 三、传统方案解决OA 系统审批问题分析\n\n- 传统方式是：接收到一个采购请求后，根据采购金额来调用对应的 Approver (审批人)完成审批。\n\n-  传统方式的问题分析 : 客户端这里会使用到 分支判断(比如 switch) 来对不同的采购请求处理， 这样就存在如下问题 (1) 如果各个级别的人员审批金额发生变化，在客户端的也需要变化 (2) 客户端必须明确的知道 有多少个审批级别和访问\n\n-  这样 对一个采购请求进行处理 和 Approver (审批人) 就存在强耦合关系，不利于代码的扩展和维护\n\n-  解决方案 =》 **职责链**模式\n\n\n\n## 四、职责链模式基本介绍\n\n基本介绍\n\n- 职责链模式（Chain of Responsibility Pattern）, 又叫 责任链模式，为请求创建了一个接收者对象的链(简单示意图)。这种模式对请求的发送者和接收者进行解耦。\n\n- 职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n\n- 这种类型的设计模式属于行为型模式\n\n## 五、职责链模式的原理类图\n\n ![1573810005326](%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.resource/1573810005326.png)\n\n​     \n\n对原理类图的说明-即(职责链模式的角色及职责)\n\n-  Handler :  抽象的处理者,  定义了一个处理请求的接口,  同时含义另外 Handler\n\n- ConcreteHandlerA , B  是具体的处理者, 处理它自己负责的请求， 可以访问它的后继者(即下一个处理者),  如果可以处理当前请求，则处理，否则就将该请求交个 后继者去处理，从而形成一个职责链\n\n- Request ， 含义很多属性，表示一个请求\n\n## 六、职责链模式解决OA 系统采购审批\n\n\n\n- 应用实例要求\n\n编写程序完成学校 OA 系统的采购审批项目：需求采购员采购教学器材\n\n如果金额 小于等于 5000, 由教学主任审批如果金额 小于等于 10000, 由院长审批\n\n如果金额 小于等于 30000, 由副校长审批如果金额 超过 30000 以上，有校长审批\n\n- 思路分析和图解(类图)\n\n ![1573810072408](%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.resource/1573810072408.png)\n\n- 代码实现\n\n购买请求\n\n```java\npackage com.atguigu.interpreter;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\npublic class ClientTest {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tString expStr = getExpStr(); // a+b\n\t\tHashMap<String, Integer> var = getValue(expStr);// var {a=10, b=20}\n\t\tCalculator calculator = new Calculator(expStr);\n\t\tSystem.out.println(\"运算结果：\" + expStr + \"=\" + calculator.run(var));\n\t}\n\n\t// 获得表达式\n\tpublic static String getExpStr() throws IOException {\n\t\tSystem.out.print(\"请输入表达式：\");\n\t\treturn (new BufferedReader(new InputStreamReader(System.in))).readLine();\n\t}\n\n\t// 获得值映射\n\tpublic static HashMap<String, Integer> getValue(String expStr) throws IOException {\n\t\tHashMap<String, Integer> map = new HashMap<>();\n\n\t\tfor (char ch : expStr.toCharArray()) {\n\t\t\tif (ch != '+' && ch != '-') {\n\t\t\t\tif (!map.containsKey(String.valueOf(ch))) {\n\t\t\t\t\tSystem.out.print(\"请输入\" + String.valueOf(ch) + \"的值：\");\n\t\t\t\t\tString in = (new BufferedReader(new InputStreamReader(System.in))).readLine();\n\t\t\t\t\tmap.put(String.valueOf(ch), Integer.valueOf(in));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n}\n\n```\n\n抽象类\n\n```java\npackage com.atguigu.responsibilitychain;\n\npublic abstract class Approver {\n\n\tApprover approver;  //下一个处理者\n\tString name; // 名字\n\t\n\tpublic Approver(String name) {\n\t\tthis.name = name;\n\t}\n\n\t//下一个处理者\n\tpublic void setApprover(Approver approver) {\n\t\tthis.approver = approver;\n\t}\n\t\n\t//处理审批请求的方法，得到一个请求, 处理是子类完成，因此该方法做成抽象\n\tpublic abstract void processRequest(PurchaseRequest purchaseRequest);\n\t\n}\n\n```\n\n具体的实体类\n\n```java\npackage com.atguigu.responsibilitychain;\n\npublic class CollegeApprover extends Approver {\n\n\tpublic CollegeApprover(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void processRequest(PurchaseRequest purchaseRequest) {\n\t\tif(purchaseRequest.getPrice() < 5000 && purchaseRequest.getPrice() <= 10000) {\n\t\t\tSystem.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\");\n\t\t}else {\n\t\t\tapprover.processRequest(purchaseRequest);\n\t\t}\n\t}\n}\n\n//--------------------------------------------------------------\npackage com.atguigu.responsibilitychain;\n\npublic class DepartmentApprover extends Approver {\n\t\n\tpublic DepartmentApprover(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void processRequest(PurchaseRequest purchaseRequest) {\n\t\tif(purchaseRequest.getPrice() <= 5000) {\n\t\t\tSystem.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\");\n\t\t}else {\n\t\t\tapprover.processRequest(purchaseRequest);\n\t\t}\n\t}\n}\n\n//--------------------------------------------------------------\npackage com.atguigu.responsibilitychain;\n\npublic class SchoolMasterApprover extends Approver {\n\n\tpublic SchoolMasterApprover(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void processRequest(PurchaseRequest purchaseRequest) {\n\t\tif(purchaseRequest.getPrice() > 30000) {\n\t\t\tSystem.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\");\n\t\t}else {\n\t\t\tapprover.processRequest(purchaseRequest);\n\t\t}\n\t}\n}\n\n//----------------------------------------------------------------\npackage com.atguigu.responsibilitychain;\n\npublic class ViceSchoolMasterApprover extends Approver {\n\n\tpublic ViceSchoolMasterApprover(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void processRequest(PurchaseRequest purchaseRequest) {\n\t\tif(purchaseRequest.getPrice() < 10000 && purchaseRequest.getPrice() <= 30000) {\n\t\t\tSystem.out.println(\" 请求编号 id= \" + purchaseRequest.getId() + \" 被 \" + this.name + \" 处理\");\n\t\t}else {\n\t\t\tapprover.processRequest(purchaseRequest);\n\t\t}\n\t}\n}\n\n```\n\n测试实用类\n\n```java\npackage com.atguigu.responsibilitychain;\n\npublic class Client {\n\n\tpublic static void main(String[] args) {\n\t\t//创建一个请求\n\t\tPurchaseRequest purchaseRequest = new PurchaseRequest(1, 31000, 1);\n\t\t\n\t\t//创建相关的审批人\n\t\tDepartmentApprover departmentApprover = new DepartmentApprover(\"张主任\");\n\t\tCollegeApprover collegeApprover = new CollegeApprover(\"李院长\");\n\t\tViceSchoolMasterApprover viceSchoolMasterApprover = new ViceSchoolMasterApprover(\"王副校\");\n\t\tSchoolMasterApprover schoolMasterApprover = new SchoolMasterApprover(\"佟校长\");\n\t\t\n\t\t//需要将各个审批级别的下一个设置好 (处理人构成环形: )\n\t\tdepartmentApprover.setApprover(collegeApprover);\n\t\tcollegeApprover.setApprover(viceSchoolMasterApprover);\n\t\tviceSchoolMasterApprover.setApprover(schoolMasterApprover);\n\t\tschoolMasterApprover.setApprover(departmentApprover);\n\t\t\n\t\tdepartmentApprover.processRequest(purchaseRequest);\n\t\tviceSchoolMasterApprover.processRequest(purchaseRequest);\n\t}\n}\n\n```\n\n\n\n\n## 七、职责链模式在SpringMVC 框架应用的源码分析\n\n- SpringMVC-HandlerExecutionChain 类就使用到职责链模式\n\n- SpringMVC 请求流程简图\n\n- 代码分析+Debug 源码+说明\n\n​       ![1573810163352](%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.resource/1573810163352.png)\n\n\n- 源码和说明\n\n \n\n- 对源码总结\n  - springmvc 请求的流程图中，执行了 拦截器相关方法 interceptor.preHandler 等等\n  - 在处理 SpringMvc 请求时，使用到职责链模式还使用到适配器模式\n  - HandlerExecutionChain 主要负责的是请求拦截器的执行和请求处理,但是他本身不处理请求，只是将请求分配给链上注册处理器执行，这是职责链实现方式,减少职责链本身与处理逻辑之间的耦合,规范了处理流程\n  - HandlerExecutionChain 维护了 HandlerInterceptor 的集合， 可以向其中注册相应的拦截器.\n\n## 八、职责链模式的注意事项和细节\n\n- 将请求和处理分开，实现解耦，提高系统的灵活性\n\n- 简化了对象，使对象不需要知道链的结构\n\n- 性能会受到影响，特别是在**链比较长的时候**，因此需控制链中最大节点数量，一般通过在 Handler 中设置一个最大节点数量，在 setNext()方法中判断是否已经超过阀值，超过则不允许该链建立，避免出现超长链无意识地破坏系统性能\n\n- 调试不方便。采用了类似递归的方式，调试时逻辑可能比较复杂\n\n- 最佳应用场景：有多个对象可以处理同一个请求时，比如：多级请求、请假/加薪等审批流程、Java Web 中 Tomcat 对 Encoding 的处理、拦截器",[[1573826182471,["GJX@GJXAIOU",[[-1,1726,"atguig"],[1,1732,"gjxaio"]],[1726,1733],[1726,1733]]],[1573826183390,["GJX@GJXAIOU",[[-1,2893,"atguig"],[1,2899,"gjxaio"]],[2893,2900],[2893,2900]]],[1573826184145,["GJX@GJXAIOU",[[-1,3302,"atguig"],[1,3308,"gjxaio"]],[3302,3309],[3302,3309]]],[1573826184811,["GJX@GJXAIOU",[[-1,3828,"atguig"],[1,3834,"gjxaio"]],[3828,3835],[3828,3835]]],[1573826185066,["GJX@GJXAIOU",[[-1,4323,"atguig"],[1,4329,"gjxaio"]],[4323,4330],[4323,4330]]],[1573826185313,["GJX@GJXAIOU",[[-1,4823,"atguig"],[1,4829,"gjxaio"]],[4823,4830],[4823,4830]]],[1573826185553,["GJX@GJXAIOU",[[-1,5323,"atguig"],[1,5329,"gjxaio"]],[5323,5330],[5323,5330]]]],null,"GJX@GJXAIOU"]]}