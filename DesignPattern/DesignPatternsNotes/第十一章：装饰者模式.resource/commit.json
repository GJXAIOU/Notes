{"compress":true,"commitItems":[["5ebd5d5d-52fe-489b-bc71-df6bdd419ba9",1573826334152,"# 第十一章：装饰者设计模式\n\n## 一、星巴克咖啡订单项目（咖啡馆）：\n\n- 咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)\n\n- 调料：Milk、Soy(豆浆)、Chocolate\n\n- 要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便\n\n- 使用 OO 的来计算不同种类咖啡的费用:  客户可以点单品咖啡，也可以单品咖啡+调料组合。\n\n## 二、方案 1-解决星巴克咖啡订单项目\n\n相当于列出所有的排列组合。\n\n ![咖啡订单方案一](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E5%92%96%E5%95%A1%E8%AE%A2%E5%8D%95%E6%96%B9%E6%A1%88%E4%B8%80.jpg)                                                                  \n\n## 三、方案 1-解决星巴克咖啡订单问题分析\n\n- Drink 是一个抽象类，表示饮料\n\n- des 就是对咖啡的描述, 比如咖啡的名字\n\n- cost() 方法就是计算费用，Drink 类中做成一个抽象方法\n\n- Decaf 就是单品咖啡， 继承 Drink,  并实现 cost\n\n- Espress && Milk 就是单品咖啡+调料， 这个组合很多\n\n\n  问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现**类爆炸** \n\n## 四、方案 2-解决星巴克咖啡订单(好点)\n\n- 前面分析到方案 1 因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料（属性）内置到 Drink 类，这样就不会造成类数量过多。从而提高项目的维护性(如图)\n\n- 说明: milk,soy,chocolate 可以设计为 Boolean,表示是否要添加相应的调料.\n\n ![咖啡订单方案二](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E5%92%96%E5%95%A1%E8%AE%A2%E5%8D%95%E6%96%B9%E6%A1%88%E4%BA%8C.jpg)\n\n \n\n## 五、方案 2-解决星巴克咖啡订单问题分析\n\n \n\n- 方案 2 可以控制类的数量，不至于造成很多的类\n\n- 在增加或者删除调料种类时，代码的维护量很大\n\n- 考虑到用户可以添加多份 调料时，可以将 hasMilk() 方法 返回一个对应 int\n\n- 考虑使用 **装饰者** 模式\n\n## 六、装饰者模式定义\n\n- 装饰者模式：**动态的将新功能附加到对象上**。在对象功能扩展方面，它比继承更有弹性，**装饰者模式也体现了开闭原则**(ocp)\n\n- 这里提到的动态的将新功能附加到对象和 ocp 原则，在后面的应用实例上会以代码的形式体现，请同学们注意体会。\n\n## 七、装饰者模式原理\n\n- 装饰者模式就像打包一个快递\n\n  主体：比如：陶瓷、衣服 (Component) //  被装饰者\n\n  包装：比如：报纸填充、塑料泡沫、纸板、木板(Decorator)// 装饰者\n\n- Component 主体：比如类似前面的 Drink\n\n- ConcreteComponent 和 Decorator ConcreteComponent：具体的主体， 比如前面的各个单品咖啡\n\n- Decorator: 装饰者，比如各调料.\n\n  在如图的 Component 与 ConcreteComponent 之间，如果 ConcreteComponent 类很多,还可以设计一个缓冲层，将共有的部分提取出来，抽象层一个类。\n\n   ![装饰者模式原理类图](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.png)\n\n\n \n\n## 装饰者模式解决星巴克咖啡订单\n\n​         ![装饰者模式解决咖啡问题](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%92%96%E5%95%A1%E9%97%AE%E9%A2%98.jpg)\n\n### （一）装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack\n\n​        ![装饰者模式下的订单](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%AE%A2%E5%8D%95.png)\n\n### （二）装饰者模式咖啡订单项目应用实例\n\n 首先 Drink 抽象类：\n\n```java\npackage com.atguigu.decorator;\n\npublic abstract class Drink {\n\n\tpublic String des; // 描述\n\tprivate float price = 0.0f;\n\tpublic String getDes() {\n\t\treturn des;\n\t}\n\tpublic void setDes(String des) {\n\t\tthis.des = des;\n\t}\n\tpublic float getPrice() {\n\t\treturn price;\n\t}\n\tpublic void setPrice(float price) {\n\t\tthis.price = price;\n\t}\n\t\n\t//计算费用的抽象方法\n\t//子类来实现\n\tpublic abstract float cost();\n}\n\n```\n\n然后使用 coffee 类作为缓冲，便于以后拓展：\n\n```java\npackage com.atguigu.decorator;\n\npublic class Coffee  extends Drink {\n\t@Override\n\tpublic float cost() {\n\t\treturn super.getPrice();\n\t}\n}\n```\n\n下面是具体的实体类：单品咖啡\n\n```java\npackage com.atguigu.decorator;\n\npublic class ShortBlack extends Coffee{\n\t\n\tpublic ShortBlack() {\n\t\tsetDes(\" shortblack \");\n\t\tsetPrice(4.0f);\n\t}\n}\n\n//---------------------------------------------------\npackage com.atguigu.decorator;\n\npublic class DeCaf extends Coffee {\n\n\tpublic DeCaf() {\n\t\tsetDes(\" 无因咖啡 \");\n\t\tsetPrice(1.0f);\n\t}\n}\n\n//--------------------------------------------------\npackage com.atguigu.decorator;\n\npublic class Espresso extends Coffee {\n\t\n\tpublic Espresso() {\n\t\tsetDes(\" 意大利咖啡 \");\n\t\tsetPrice(6.0f);\n\t}\n}\n\n//-------------------------------------------------------\npackage com.atguigu.decorator;\n\npublic class LongBlack extends Coffee {\n\n\tpublic LongBlack() {\n\t\tsetDes(\" longblack \");\n\t\tsetPrice(5.0f);\n\t}\n}\n\n```\n\n然后装饰者模式：\n\n其具体的实现类：\n\n```java\npackage com.atguigu.decorator;\n\n//具体的Decorator， 这里就是调味品\npublic class Chocolate extends Decorator {\n\n\tpublic Chocolate(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 巧克力 \");\n\t\tsetPrice(3.0f); // 调味品 的价格\n\t}\n}\n\n//------------------------------------------\npackage com.atguigu.decorator;\n\npublic class Milk extends Decorator {\n\n\tpublic Milk(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 牛奶 \");\n\t\tsetPrice(2.0f); \n\t}\n}\n\n//-------------------------------------------\npackage com.atguigu.decorator;\n\npublic class Soy extends Decorator{\n\n\tpublic Soy(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 豆浆  \");\n\t\tsetPrice(1.5f);\n\t}\n}\n\n```\n\n\n\n```java\npackage com.atguigu.decorator;\n\npublic class Decorator extends Drink {\n\tprivate Drink obj;\n\t\n\tpublic Decorator(Drink obj) { //组合\n\t\tthis.obj = obj;\n\t}\n\t\n\t@Override\n\tpublic float cost() {\n\t\t// getPrice 自己价格\n\t\treturn super.getPrice() + obj.cost();\n\t}\n\t\n\t@Override\n\tpublic String getDes() {\n\t\t// obj.getDes() 输出被装饰者的信息\n\t\treturn des + \" \" + getPrice() + \" && \" + obj.getDes();\n\t}\n}\n\n```\n\n\n\n## 十一、装饰者模式在JDK 应用的源码分析\n\nJava 的 IO 结构，FilterInputStream 就是一个装饰者\n\n ![JavaIO装饰者模式类图](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/JavaIO%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.png)\n\n",[[1573826275702,["GJX@GJXAIOU",[[-1,2485,"atguig"],[1,2491,"gjxaio"]],[2485,2492],[2485,2492]]],[1573826275959,["GJX@GJXAIOU",[[-1,2907,"atguig"],[1,2913,"gjxaio"]],[2907,2914],[2907,2914]]],[1573826276127,["GJX@GJXAIOU",[[-1,3071,"atguig"],[1,3077,"gjxaio"]],[3071,3078],[3071,3078]]],[1573826276332,["GJX@GJXAIOU",[[-1,3272,"atguig"],[1,3278,"gjxaio"]],[3272,3279],[3272,3279]]],[1573826276484,["GJX@GJXAIOU",[[-1,3456,"atguig"],[1,3462,"gjxaio"]],[3456,3463],[3456,3463]]],[1573826276715,["GJX@GJXAIOU",[[-1,3653,"atguig"],[1,3659,"gjxaio"]],[3653,3660],[3653,3660]]],[1573826276928,["GJX@GJXAIOU",[[-1,3830,"atguig"],[1,3836,"gjxaio"]],[3830,3837],[3830,3837]]],[1573826277135,["GJX@GJXAIOU",[[-1,4074,"atguig"],[1,4080,"gjxaio"]],[4074,4081],[4074,4081]]],[1573826277340,["GJX@GJXAIOU",[[-1,4274,"atguig"],[1,4280,"gjxaio"]],[4274,4281],[4274,4281]]],[1573826277623,["GJX@GJXAIOU",[[-1,4440,"atguig"],[1,4446,"gjxaio"]],[4440,4447],[4440,4447]]]],null,"GJX@GJXAIOU"],["b68e91d7-22c0-4283-84c8-3fda31070c44",1573826931187,"# 第十一章：装饰者设计模式\n\n## 一、星巴克咖啡订单项目（咖啡馆）：\n\n- 咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)\n\n- 调料：Milk、Soy(豆浆)、Chocolate\n\n- 要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便\n\n- 使用 OO 的来计算不同种类咖啡的费用:  客户可以点单品咖啡，也可以单品咖啡+调料组合。\n\n## 二、方案 1-解决星巴克咖啡订单项目\n\n相当于列出所有的排列组合。\n\n ![咖啡订单方案一](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E5%92%96%E5%95%A1%E8%AE%A2%E5%8D%95%E6%96%B9%E6%A1%88%E4%B8%80.jpg)                                                                  \n\n## 三、方案 1-解决星巴克咖啡订单问题分析\n\n- Drink 是一个抽象类，表示饮料\n\n- des 就是对咖啡的描述, 比如咖啡的名字\n\n- cost() 方法就是计算费用，Drink 类中做成一个抽象方法\n\n- Decaf 就是单品咖啡， 继承 Drink,  并实现 cost\n\n- Espress && Milk 就是单品咖啡+调料， 这个组合很多\n\n\n  问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现**类爆炸** \n\n## 四、方案 2-解决星巴克咖啡订单(好点)\n\n- 前面分析到方案 1 因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料（属性）内置到 Drink 类，这样就不会造成类数量过多。从而提高项目的维护性(如图)\n\n- 说明: milk,soy,chocolate 可以设计为 Boolean,表示是否要添加相应的调料.\n\n ![咖啡订单方案二](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E5%92%96%E5%95%A1%E8%AE%A2%E5%8D%95%E6%96%B9%E6%A1%88%E4%BA%8C.jpg)\n\n \n\n## 五、方案 2-解决星巴克咖啡订单问题分析\n\n \n\n- 方案 2 可以控制类的数量，不至于造成很多的类\n\n- 在增加或者删除调料种类时，代码的维护量很大\n\n- 考虑到用户可以添加多份 调料时，可以将 hasMilk() 方法 返回一个对应 int\n\n- 考虑使用 **装饰者** 模式\n\n## 六、装饰者模式定义\n\n- 装饰者模式：**动态的将新功能附加到对象上**。在对象功能扩展方面，它比继承更有弹性，**装饰者模式也体现了开闭原则**(ocp)\n\n- 这里提到的动态的将新功能附加到对象和 ocp 原则，在后面的应用实例上会以代码的形式体现，请同学们注意体会。\n\n## 七、装饰者模式原理\n\n- 装饰者模式就像打包一个快递\n\n  主体：比如：陶瓷、衣服 (Component) //  被装饰者\n\n  包装：比如：报纸填充、塑料泡沫、纸板、木板(Decorator)// 装饰者\n\n- Component 主体：比如类似前面的 Drink\n\n- ConcreteComponent 和 Decorator ConcreteComponent：具体的主体， 比如前面的各个单品咖啡\n\n- Decorator: 装饰者，比如各调料.\n\n  在如图的 Component 与 ConcreteComponent 之间，如果 ConcreteComponent 类很多,还可以设计一个缓冲层，将共有的部分提取出来，抽象层一个类。\n\n   ![装饰者模式原理类图](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E7%B1%BB%E5%9B%BE.png)\n\n\n \n\n## 装饰者模式解决星巴克咖啡订单\n\n​         ![装饰者模式解决咖啡问题](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E8%A7%A3%E5%86%B3%E5%92%96%E5%95%A1%E9%97%AE%E9%A2%98.jpg)\n\n### （一）装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack\n\n​        ![装饰者模式下的订单](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%AE%A2%E5%8D%95.png)\n\n### （二）装饰者模式咖啡订单项目应用实例\n\n 首先 Drink 抽象类：\n\n```java\npackage com.gjxaiou.decorator;\n\npublic abstract class Drink {\n\n\tpublic String des; // 描述\n\tprivate float price = 0.0f;\n\tpublic String getDes() {\n\t\treturn des;\n\t}\n\tpublic void setDes(String des) {\n\t\tthis.des = des;\n\t}\n\tpublic float getPrice() {\n\t\treturn price;\n\t}\n\tpublic void setPrice(float price) {\n\t\tthis.price = price;\n\t}\n\t\n\t//计算费用的抽象方法\n\t//子类来实现\n\tpublic abstract float cost();\n}\n\n```\n\n然后使用 coffee 类作为缓冲，便于以后拓展：\n\n```java\npackage com.gjxaiou.decorator;\n\npublic class Coffee  extends Drink {\n\t@Override\n\tpublic float cost() {\n\t\treturn super.getPrice();\n\t}\n}\n```\n\n下面是具体的实体类：单品咖啡\n\n```java\npackage com.gjxaiou.decorator;\n\npublic class ShortBlack extends Coffee{\n\t\n\tpublic ShortBlack() {\n\t\tsetDes(\" shortblack \");\n\t\tsetPrice(4.0f);\n\t}\n}\n\n//---------------------------------------------------\npackage com.gjxaiou.decorator;\n\npublic class DeCaf extends Coffee {\n\n\tpublic DeCaf() {\n\t\tsetDes(\" 无因咖啡 \");\n\t\tsetPrice(1.0f);\n\t}\n}\n\n//--------------------------------------------------\npackage com.gjxaiou.decorator;\n\npublic class Espresso extends Coffee {\n\t\n\tpublic Espresso() {\n\t\tsetDes(\" 意大利咖啡 \");\n\t\tsetPrice(6.0f);\n\t}\n}\n\n//-------------------------------------------------------\npackage com.gjxaiou.decorator;\n\npublic class LongBlack extends Coffee {\n\n\tpublic LongBlack() {\n\t\tsetDes(\" longblack \");\n\t\tsetPrice(5.0f);\n\t}\n}\n\n```\n\n然后装饰者模式：\n\n其具体的实现类：\n\n```java\npackage com.gjxaiou.decorator;\n\n//具体的Decorator， 这里就是调味品\npublic class Chocolate extends Decorator {\n\n\tpublic Chocolate(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 巧克力 \");\n\t\tsetPrice(3.0f); // 调味品 的价格\n\t}\n}\n\n//------------------------------------------\npackage com.gjxaiou.decorator;\n\npublic class Milk extends Decorator {\n\n\tpublic Milk(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 牛奶 \");\n\t\tsetPrice(2.0f); \n\t}\n}\n\n//-------------------------------------------\npackage com.gjxaiou.decorator;\n\npublic class Soy extends Decorator{\n\n\tpublic Soy(Drink obj) {\n\t\tsuper(obj);\n\t\tsetDes(\" 豆浆  \");\n\t\tsetPrice(1.5f);\n\t}\n}\n\n```\n\n\n\n```java\npackage com.gjxaiou.decorator;\n\npublic class Decorator extends Drink {\n\tprivate Drink obj;\n\t\n\tpublic Decorator(Drink obj) { //组合\n\t\tthis.obj = obj;\n\t}\n\t\n\t@Override\n\tpublic float cost() {\n\t\t// getPrice 自己价格\n\t\treturn super.getPrice() + obj.cost();\n\t}\n\t\n\t@Override\n\tpublic String getDes() {\n\t\t// obj.getDes() 输出被装饰者的信息\n\t\treturn des + \" \" + getPrice() + \" && \" + obj.getDes();\n\t}\n}\n\n```\n\n\n\n## 十一、装饰者模式在JDK 应用的源码分析\n\nJava 的 IO 结构，FilterInputStream 就是一个装饰者\n\n ![JavaIO装饰者模式类图](%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.resource/JavaIO%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9B%BE.png)\n\n",[[1573826873884,["GJX@GJXAIOU",[[-1,4419,"\n"]],[4418,4418],[4417,4417]]],[1573826881004,["GJX@GJXAIOU",[[-1,106,"\n"]],[106,106],[105,105]]],[1573826882060,["GJX@GJXAIOU",[[-1,134,"\n"]],[134,134],[133,133]]],[1573826882968,["GJX@GJXAIOU",[[-1,168,"\n"]],[168,168],[167,167]]],[1573826884988,["GJX@GJXAIOU",[[-1,548,"\n"]],[548,548],[547,547]]],[1573826885887,["GJX@GJXAIOU",[[-1,572,"\n"]],[572,572],[571,571]]],[1573826886837,["GJX@GJXAIOU",[[-1,607,"\n"]],[607,607],[606,606]]],[1573826887812,["GJX@GJXAIOU",[[-1,643,"\n"]],[643,643],[642,642]]],[1573826888580,["GJX@GJXAIOU",[[-1,680,"\n"]],[679,679],[678,678]]],[1573826892691,["GJX@GJXAIOU",[[-1,1145,"\n"]],[1145,1145],[1144,1144]]],[1573826893574,["GJX@GJXAIOU",[[-1,1169,"\n"]],[1169,1169],[1168,1168]]],[1573826894348,["GJX@GJXAIOU",[[-1,1215,"\n"]],[1215,1215],[1214,1214]]],[1573826897437,["GJX@GJXAIOU",[[-1,1118,"\n"]],[1118,1118],[1117,1117]]],[1573826897853,["GJX@GJXAIOU",[[-1,1116," "]],[1117,1117],[1116,1116]]],[1573826898332,["GJX@GJXAIOU",[[-1,1116,"\n"]],[1116,1116],[1115,1115]]],[1573826903733,["GJX@GJXAIOU",[[-1,1402,"\n"]],[1402,1402],[1401,1401]]],[1573826904854,["GJX@GJXAIOU",[[-1,1437,"\n"]],[1437,1437],[1436,1436]]],[1573826906556,["GJX@GJXAIOU",[[-1,1508,"\n"]],[1508,1508],[1507,1507]]],[1573826908279,["GJX@GJXAIOU",[[-1,1577,"\n"]],[1577,1577],[1576,1576]]],[1573826921316,["GJX@GJXAIOU",[[-1,1903," "]],[1904,1904],[1903,1903]]],[1573826921671,["GJX@GJXAIOU",[[-1,1904,"\n"]],[1903,1903],[1902,1902]]],[1573826922101,["GJX@GJXAIOU",[[-1,1903,"\n"]],[1902,1902],[1901,1901]]]],null,"GJX@GJXAIOU"]]}