{"compress":true,"commitItems":[["871ab89f-0998-4004-ab26-f52ded3962e6",1570587206782,"",[[1570587150784,["GJX@GJXAIOU",[[1,0,"# AlgorithmEasyDay03\n\n\n\n"]],[0,0],[23,23]]],[1570587164715,["GJX@GJXAIOU",[[1,23,"### "]],[23,23],[27,27]]],[1570587166373,["GJX@GJXAIOU",[[-1,25,"# "]],[27,27],[25,25]]],[1570587176376,["GJX@GJXAIOU",[[1,25," 数组与队列和栈转换"]],[25,25],[35,35]]],[1570587176796,["GJX@GJXAIOU",[[1,36,"\n"]],[35,35],[36,36]]],[1570587177664,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1570587193185,["GJX@GJXAIOU",[[1,37,"### 数组与队列转换"]],[37,37],[48,48]]],[1570587193776,["GJX@GJXAIOU",[[1,49,"\n"]],[48,48],[49,49]]],[1570587197216,["GJX@GJXAIOU",[[-1,49,"\n"],[1,50,"*"]],[49,49],[50,50]]],[1570587197383,["GJX@GJXAIOU",[[1,50,"***"]],[50,50],[51,51]]],[1570587205074,["GJX@GJXAIOU",[[1,51,"用数组结构"]],[51,51],[56,56]]],[1570587212115,["GJX@GJXAIOU",[[1,56,"实现大小固定的对流"]],[56,56],[65,65]]],[1570587212685,["GJX@GJXAIOU",[[-1,63,"对流"]],[65,65],[63,63]]],[1570587214278,["GJX@GJXAIOU",[[1,63,"队列"]],[63,63],[65,65]]],[1570587216814,["GJX@GJXAIOU",[[1,67,"："]],[67,67],[68,68]]],[1570587217218,["GJX@GJXAIOU",[[1,68,"\n\n"]],[68,68],[69,69]]],[1570587296366,["GJX@GJXAIOU",[[-1,69,"\n"],[1,70,"要求"]],[69,69],[71,71]]],[1570587299479,["GJX@GJXAIOU",[[1,71,"：只能ongoing"]],[71,71],[81,81]]],[1570587299504,["GJX@GJXAIOU",[[1,74," "]],[81,81],[82,82]]],[1570587313607,["GJX@GJXAIOU",[[-1,74," ongoing"]],[82,82],[74,74]]],[1570587318358,["GJX@GJXAIOU",[[1,74,"使用长度为X"]],[74,74],[80,80]]],[1570587318383,["GJX@GJXAIOU",[[1,79," "]],[80,80],[81,81]]],[1570587322449,["GJX@GJXAIOU",[[1,81,"的"]],[81,81],[82,82]]],[1570587322478,["GJX@GJXAIOU",[[1,81," "]],[82,82],[83,83]]],[1570587323641,["GJX@GJXAIOU",[[1,83,"数组"]],[83,83],[85,85]]],[1570587344788,["GJX@GJXAIOU",[[1,85,"实现同样长度的列和栈，超过则报错；"]],[85,85],[102,102]]],[1570587348074,["GJX@GJXAIOU",[[1,102,"\n\n"]],[102,102],[103,103]]],[1570587348780,["GJX@GJXAIOU",[[1,104,"\n"]],[103,103],[104,104]]],[1570587384704,["GJX@GJXAIOU",[[1,102,"相当于使用"]],[102,102],[107,107]]],[1570587388329,["GJX@GJXAIOU",[[1,107,"固定素组"]],[107,107],[111,111]]],[1570587389070,["GJX@GJXAIOU",[[-1,109,"素组"]],[111,111],[109,109]]],[1570587390598,["GJX@GJXAIOU",[[1,109,"数组"]],[109,109],[111,111]]],[1570587391769,["GJX@GJXAIOU",[[1,114,"\n"]],[111,111],[112,112]]],[1570587438378,["GJX@GJXAIOU",[[1,112,"因为队列的记过"]],[112,112],[119,119]]],[1570587440429,["GJX@GJXAIOU",[[-1,117,"记过"]],[119,119],[117,117]]],[1570587442234,["GJX@GJXAIOU",[[1,117,"结构为"]],[117,117],[120,120]]],[1570587451215,["GJX@GJXAIOU",[[1,120,"先进后出"]],[120,120],[124,124]]],[1570587454932,["GJX@GJXAIOU",[[-1,122,"后出"]],[124,124],[122,122]]],[1570587462232,["GJX@GJXAIOU",[[1,122,"先出，"]],[122,122],[125,125]]],[1570587499837,["GJX@GJXAIOU",[[1,128,"\n"]],[125,125],[126,126]]],[1570587500043,["GJX@GJXAIOU",[[1,129,"\n"]],[126,126],[127,127]]],[1570587500202,["GJX@GJXAIOU",[[1,130,"\n"]],[127,127],[128,128]]],[1570587500429,["GJX@GJXAIOU",[[1,131,"\n"]],[128,128],[129,129]]],[1570587500527,["GJX@GJXAIOU",[[1,132,"\n"]],[129,129],[130,130]]],[1570587524110,["GJX@GJXAIOU",[[1,132,"### "]],[132,132],[136,136]]]],null,"GJX@GJXAIOU"],["3f79a3b3-b82c-44ec-966f-f39e1879a310",1570592297205,"# AlgorithmEasyDay03\n\n\n## 数组与队列和栈转换\n\n### 数组与队列转换\n**用数组结构实现大小固定的队列**：\n要求：只能使用长度为 X 的数组实现同样长度的列和栈，超过则报错；相当于使用固定数组\n因为队列的结构为先进先出，\n\n\n\n\n\n\n### \n",[[1570592294664,["GJX@GJXAIOU",[[1,136,"特殊栈的实现"]],[136,136],[142,142]]],[1570592294920,["GJX@GJXAIOU",[[1,143,"\n"]],[142,142],[143,143]]],[1570592297594,["GJX@GJXAIOU",[[-1,143,"\n"],[1,144,"要求"]],[143,143],[145,145]]],[1570592306009,["GJX@GJXAIOU",[[1,145,"：实现一个特殊的栈，在实现咱"]],[145,145],[159,159]]],[1570592306598,["GJX@GJXAIOU",[[-1,158,"咱"]],[159,159],[158,158]]],[1570592325359,["GJX@GJXAIOU",[[1,158,"栈的基础功能上，再实现返回栈中最小元素的操作；"]],[158,158],[181,181]]],[1570592377670,["GJX@GJXAIOU",[[-1,143,"要求"]],[145,145],[143,143]]],[1570592378911,["GJX@GJXAIOU",[[1,143,"目标"]],[143,143],[145,145]]],[1570592381286,["GJX@GJXAIOU",[[1,181,"\n\n"]],[181,181],[182,182]]],[1570592382865,["GJX@GJXAIOU",[[-1,182,"\n"],[1,183,"要求"]],[182,182],[184,184]]],[1570592406215,["GJX@GJXAIOU",[[1,184,"：pop、push、getMin 的操作的时间复杂度都是 O（）"]],[184,184],[216,216]]],[1570592407343,["GJX@GJXAIOU",[[1,215,"1"]],[215,215],[216,216]]],[1570592408791,["GJX@GJXAIOU",[[1,217,"；"]],[217,217],[218,218]]],[1570592411591,["GJX@GJXAIOU",[[1,218,"\n\n"]],[218,218],[219,219]]],[1570592412455,["GJX@GJXAIOU",[[-1,219,"\n"]],[219,219],[218,218]]],[1570592415378,["GJX@GJXAIOU",[[1,218,"同时涉及"]],[218,218],[222,222]]],[1570592416477,["GJX@GJXAIOU",[[-1,220,"涉及"]],[222,222],[220,220]]],[1570592417727,["GJX@GJXAIOU",[[1,220,"涉及"]],[220,220],[222,222]]],[1570592418398,["GJX@GJXAIOU",[[-1,220,"涉及"]],[222,222],[220,220]]],[1570592425895,["GJX@GJXAIOU",[[1,220,"设计的栈类型可以使用线程的"]],[220,220],[233,233]]],[1570592428622,["GJX@GJXAIOU",[[-1,230,"线程的"]],[233,233],[230,230]]],[1570592434791,["GJX@GJXAIOU",[[1,230,"现成的栈结构；"]],[230,230],[237,237]]],[1570592477743,["GJX@GJXAIOU",[[1,238,"\n"]],[237,237],[238,238]]],[1570592479048,["GJX@GJXAIOU",[[-1,238,"\n"],[1,239,"*"]],[238,238],[239,239]]],[1570592479190,["GJX@GJXAIOU",[[1,239,"***"]],[239,239],[240,240]]],[1570592480927,["GJX@GJXAIOU",[[1,240,"解答："]],[240,240],[243,243]]],[1570592485033,["GJX@GJXAIOU",[[1,245," 因为是按"]],[245,245],[250,250]]],[1570592485709,["GJX@GJXAIOU",[[-1,248,"是按"]],[250,250],[248,248]]],[1570592495830,["GJX@GJXAIOU",[[1,248,"时间复杂度要求：O()"]],[248,248],[259,259]]],[1570592496871,["GJX@GJXAIOU",[[1,258,"1"]],[258,258],[259,259]]],[1570592501746,["GJX@GJXAIOU",[[1,260,"，因此不能使用便利"]],[260,260],[269,269]]],[1570592502446,["GJX@GJXAIOU",[[-1,267,"便利"]],[269,269],[267,267]]],[1570592511096,["GJX@GJXAIOU",[[1,267,"遍历，因为遍历的结果就是O"]],[267,267],[280,280]]],[1570592511119,["GJX@GJXAIOU",[[1,279," "]],[280,280],[281,281]]],[1570592511544,["GJX@GJXAIOU",[[1,281,"（）"]],[281,281],[283,283]]],[1570592513400,["GJX@GJXAIOU",[[1,282,"N"]],[282,282],[283,283]]],[1570592535409,["GJX@GJXAIOU",[[1,284,"，这里使用两个栈；6一个"]],[284,284],[296,296]]],[1570592535432,["GJX@GJXAIOU",[[1,294," "]],[296,296],[297,297]]],[1570592536377,["GJX@GJXAIOU",[[1,297,"栈"]],[297,297],[298,298]]],[1570592537582,["GJX@GJXAIOU",[[-1,293,"6 一个栈"]],[298,298],[293,293]]],[1570592552017,["GJX@GJXAIOU",[[1,293,"一个栈为 Data 栈，用于存放数据，另一个栈Wie"]],[293,293],[319,319]]],[1570592552041,["GJX@GJXAIOU",[[1,316," "]],[319,319],[320,320]]],[1570592553156,["GJX@GJXAIOU",[[-1,316," Wie"]],[320,320],[316,316]]],[1570592563183,["GJX@GJXAIOU",[[1,316,"为 min 栈，用于存放最小值，来个呢"]],[316,316],[335,335]]],[1570592564439,["GJX@GJXAIOU",[[-1,332,"来个呢"]],[335,335],[332,332]]],[1570592571504,["GJX@GJXAIOU",[[1,332,"两个栈一起增长；"]],[332,332],[340,340]]],[1570592573486,["GJX@GJXAIOU",[[1,340,"\n\n"]],[340,340],[341,341]]],[1570592575223,["GJX@GJXAIOU",[[-1,341,"\n"],[1,342,"步骤"]],[341,341],[343,343]]],[1570592593760,["GJX@GJXAIOU",[[1,343,"：放入第一个数据，放入 Data栈"]],[343,343],[360,360]]],[1570592593783,["GJX@GJXAIOU",[[1,359," "]],[360,360],[361,361]]],[1570592594750,["GJX@GJXAIOU",[[1,361,"中，"]],[361,361],[363,363]]],[1570592602835,["GJX@GJXAIOU",[[1,363,"同时因为 min 占中"]],[363,363],[374,374]]],[1570592603526,["GJX@GJXAIOU",[[-1,372,"占中"]],[374,374],[372,372]]],[1570592606578,["GJX@GJXAIOU",[[1,372,"栈中单签"]],[372,372],[376,376]]],[1570592607246,["GJX@GJXAIOU",[[-1,374,"单签"]],[376,376],[374,374]]],[1570592608747,["GJX@GJXAIOU",[[1,374,"单签"]],[374,374],[376,376]]],[1570592609478,["GJX@GJXAIOU",[[-1,374,"单签"]],[376,376],[374,374]]],[1570592624846,["GJX@GJXAIOU",[[1,374,"当前为空，因此放入第一个元素之后，"]],[374,374],[391,391]]],[1570592625886,["GJX@GJXAIOU",[[-1,390,"，"]],[391,391],[390,390]]],[1570592634387,["GJX@GJXAIOU",[[1,390,"最小值也是第一个元素，英雌"]],[390,390],[403,403]]],[1570592635478,["GJX@GJXAIOU",[[-1,401,"英雌"]],[403,403],[401,401]]],[1570592637408,["GJX@GJXAIOU",[[1,401,"因此见"]],[401,401],[404,404]]],[1570592638301,["GJX@GJXAIOU",[[-1,403,"见"]],[404,404],[403,403]]],[1570592648368,["GJX@GJXAIOU",[[1,403,"将第一个元素也放入 min 栈中，"]],[403,403],[420,420]]],[1570592677646,["GJX@GJXAIOU",[[-1,419,"，"]],[420,420],[419,419]]],[1570592683313,["GJX@GJXAIOU",[[1,419,"；在data"]],[419,419],[425,425]]],[1570592683336,["GJX@GJXAIOU",[[1,421," "]],[425,425],[426,426]]],[1570592684353,["GJX@GJXAIOU",[[1,426,"栈"]],[426,426],[427,427]]],[1570592684377,["GJX@GJXAIOU",[[1,426," "]],[427,427],[428,428]]],[1570592686705,["GJX@GJXAIOU",[[1,428,"中翻入"]],[428,428],[431,431]]],[1570592687430,["GJX@GJXAIOU",[[-1,429,"翻入"]],[431,431],[429,429]]],[1570592709960,["GJX@GJXAIOU",[[1,429,"放入第二个数据时候，将当前元素与min"]],[429,429],[448,448]]],[1570592709984,["GJX@GJXAIOU",[[1,445," "]],[448,448],[449,449]]],[1570592711721,["GJX@GJXAIOU",[[1,449,"栈顶"]],[449,449],[451,451]]],[1570592711744,["GJX@GJXAIOU",[[1,449," "]],[451,451],[452,452]]],[1570592715480,["GJX@GJXAIOU",[[1,452,"比较，如果"]],[452,452],[457,457]]],[1570592725911,["GJX@GJXAIOU",[[1,457,"当前数大于min"]],[457,457],[465,465]]],[1570592725935,["GJX@GJXAIOU",[[1,462," "]],[465,465],[466,466]]],[1570592728239,["GJX@GJXAIOU",[[1,466,"栈顶"]],[466,466],[468,468]]],[1570592728263,["GJX@GJXAIOU",[[1,466," "]],[468,468],[469,469]]],[1570592735647,["GJX@GJXAIOU",[[1,469,"，就将当前数放入"]],[469,469],[477,477]]],[1570592736662,["GJX@GJXAIOU",[[-1,475,"放入"]],[477,477],[475,475]]],[1570592745329,["GJX@GJXAIOU",[[1,475,"压入 min 栈的栈顶"]],[475,475],[486,486]]],[1570592761924,["GJX@GJXAIOU",[[-1,460,"大"]],[461,461],[460,460]]],[1570592763303,["GJX@GJXAIOU",[[1,460,"小"]],[460,460],[461,461]]],[1570592784735,["GJX@GJXAIOU",[[1,462,"等于"]],[462,462],[464,464]]],[1570592792287,["GJX@GJXAIOU",[[1,488,"；反之如果但前述"]],[488,488],[496,496]]],[1570592793445,["GJX@GJXAIOU",[[-1,493,"但前述"]],[496,496],[493,493]]],[1570592801812,["GJX@GJXAIOU",[[1,493,"当前数大于 min栈顶"]],[493,493],[504,504]]],[1570592801836,["GJX@GJXAIOU",[[1,502," "]],[504,504],[505,505]]],[1570592812935,["GJX@GJXAIOU",[[1,505,"，就将原来 min栈顶"]],[505,505],[516,516]]],[1570592812958,["GJX@GJXAIOU",[[1,514," "]],[516,516],[517,517]]],[1570592814235,["GJX@GJXAIOU",[[1,517,"的元素怒"]],[517,517],[521,521]]],[1570592814677,["GJX@GJXAIOU",[[-1,520,"怒"]],[521,521],[520,520]]],[1570592820703,["GJX@GJXAIOU",[[1,520,"再次在 min占中"]],[520,520],[529,529]]],[1570592820727,["GJX@GJXAIOU",[[1,527," "]],[529,529],[530,530]]],[1570592821326,["GJX@GJXAIOU",[[-1,528,"占中"]],[530,530],[528,528]]],[1570592826398,["GJX@GJXAIOU",[[1,528,"栈中压入一遍；"]],[528,528],[535,535]]],[1570592832484,["GJX@GJXAIOU",[[-1,534,"；"]],[535,535],[534,534]]],[1570592833069,["GJX@GJXAIOU",[[1,534,"。"]],[534,534],[535,535]]],[1570600590218,["GJX@GJXAIOU",[[1,535,"\n\n"]],[535,535],[536,536]]],[1570600590346,["GJX@GJXAIOU",[[1,537,"\n"]],[536,536],[537,537]]],[1570600590484,["GJX@GJXAIOU",[[1,538,"\n"]],[537,537],[538,538]]],[1570600590594,["GJX@GJXAIOU",[[1,539,"\n"]],[538,538],[539,539]]],[1570600591090,["GJX@GJXAIOU",[[1,540,"\n"]],[539,539],[540,540]]],[1570600591249,["GJX@GJXAIOU",[[1,541,"\n"]],[540,540],[541,541]]],[1570600591860,["GJX@GJXAIOU",[[1,542,"\n"]],[541,541],[542,542]]],[1570600605052,["GJX@GJXAIOU",[[1,542,"### 仅仅"]],[542,542],[548,548]]],[1570600605610,["GJX@GJXAIOU",[[-1,547,"仅"]],[548,548],[547,547]]],[1570600614508,["GJX@GJXAIOU",[[1,547,"用队列结构实现栈结构"]],[547,547],[557,557]]],[1570600614860,["GJX@GJXAIOU",[[1,558,"\n"]],[557,557],[558,558]]],[1570600632708,["GJX@GJXAIOU",[[-1,558,"\n"],[1,559,"示例"]],[558,558],[560,560]]],[1570600646443,["GJX@GJXAIOU",[[1,560,"：放入队列书信"]],[560,560],[567,567]]],[1570600647026,["GJX@GJXAIOU",[[-1,565,"书信"]],[567,567],[565,565]]],[1570600650371,["GJX@GJXAIOU",[[1,565,"顺序是 1，"]],[565,565],[571,571]]],[1570600650528,["GJX@GJXAIOU",[[-1,570,"，"]],[571,571],[570,570]]],[1570600650635,["GJX@GJXAIOU",[[1,570,",2，"]],[570,570],[573,573]]],[1570600650822,["GJX@GJXAIOU",[[-1,572,"，"]],[573,573],[572,572]]],[1570600650914,["GJX@GJXAIOU",[[1,572,",3，"]],[572,572],[575,575]]],[1570600651135,["GJX@GJXAIOU",[[-1,574,"，"]],[575,575],[574,574]]],[1570600651259,["GJX@GJXAIOU",[[1,574,",4，"]],[574,574],[577,577]]],[1570600651472,["GJX@GJXAIOU",[[-1,576,"，"]],[577,577],[576,576]]],[1570600659438,["GJX@GJXAIOU",[[1,576,",5；保证出来的顺数"]],[576,576],[586,586]]],[1570600660251,["GJX@GJXAIOU",[[-1,584,"顺数"]],[586,586],[584,584]]],[1570600663956,["GJX@GJXAIOU",[[1,584,"顺序为：5，"]],[584,584],[590,590]]],[1570600664095,["GJX@GJXAIOU",[[-1,589,"，"]],[590,590],[589,589]]],[1570600664259,["GJX@GJXAIOU",[[1,589,",4，"]],[589,589],[592,592]]],[1570600664439,["GJX@GJXAIOU",[[-1,591,"，"]],[592,592],[591,591]]],[1570600664941,["GJX@GJXAIOU",[[1,591,",3，"]],[591,591],[594,594]]],[1570600665166,["GJX@GJXAIOU",[[-1,593,"，"]],[594,594],[593,593]]],[1570600665420,["GJX@GJXAIOU",[[1,593,",2，"]],[593,593],[596,596]]],[1570600665640,["GJX@GJXAIOU",[[-1,595,"，"]],[596,596],[595,595]]],[1570600666018,["GJX@GJXAIOU",[[1,595,",1；"]],[595,595],[598,598]]],[1570600666500,["GJX@GJXAIOU",[[1,598,"\n\n"]],[598,598],[599,599]]],[1570600705996,["GJX@GJXAIOU",[[-1,599,"\n"],[1,600,"首先"]],[599,599],[601,601]]],[1570600708469,["GJX@GJXAIOU",[[1,601,"准备连个"]],[601,601],[605,605]]],[1570600709114,["GJX@GJXAIOU",[[-1,603,"连个"]],[605,605],[603,603]]],[1570600718285,["GJX@GJXAIOU",[[1,603,"两个队列：data队列"]],[603,603],[614,614]]],[1570600718308,["GJX@GJXAIOU",[[1,612," "]],[614,614],[615,615]]],[1570600726907,["GJX@GJXAIOU",[[1,615,"和 help队列"]],[615,615],[623,623]]],[1570600726930,["GJX@GJXAIOU",[[1,621," "]],[623,623],[624,624]]],[1570600727723,["GJX@GJXAIOU",[[1,624,"；"]],[624,624],[625,625]]],[1570600810436,["GJX@GJXAIOU",[[1,625,"\n\n"]],[625,625],[626,626]]],[1570600811757,["GJX@GJXAIOU",[[-1,626,"\n"],[1,627,"然后"]],[626,626],[628,628]]],[1570600821316,["GJX@GJXAIOU",[[1,628,"将数据放入 data队列"]],[628,628],[640,640]]],[1570600821339,["GJX@GJXAIOU",[[1,638," "]],[640,640],[641,641]]],[1570600831253,["GJX@GJXAIOU",[[1,641,"中级"]],[641,641],[643,643]]],[1570600831682,["GJX@GJXAIOU",[[-1,642,"级"]],[643,643],[642,642]]],[1570600848003,["GJX@GJXAIOU",[[1,642,"，即艺术组"]],[642,642],[647,647]]],[1570600849370,["GJX@GJXAIOU",[[-1,644,"艺术组"]],[647,647],[644,644]]],[1570600854157,["GJX@GJXAIOU",[[1,644,"以数组藐视Wie"]],[644,644],[652,652]]],[1570600854181,["GJX@GJXAIOU",[[1,649," "]],[652,652],[653,653]]],[1570600855467,["GJX@GJXAIOU",[[-1,647,"藐视 Wie"]],[653,653],[647,647]]],[1570600864883,["GJX@GJXAIOU",[[1,647,"描述为：5 4 3 2 1，然后"]],[647,647],[663,663]]],[1570600879658,["GJX@GJXAIOU",[[1,663,"将后面四个  1，"]],[663,663],[672,672]]],[1570600879920,["GJX@GJXAIOU",[[-1,671,"，"]],[672,672],[671,671]]],[1570600880507,["GJX@GJXAIOU",[[1,671,",2 3，"]],[671,671],[676,676]]],[1570600880783,["GJX@GJXAIOU",[[-1,675,"，"]],[676,676],[675,675]]],[1570600884244,["GJX@GJXAIOU",[[1,675,",4放入"]],[675,675],[679,679]]],[1570600884268,["GJX@GJXAIOU",[[1,677," "]],[679,679],[680,680]]],[1570600897129,["GJX@GJXAIOU",[[-1,678,"放入"]],[680,680],[678,678]]],[1570600899916,["GJX@GJXAIOU",[[1,678,"也如"]],[678,678],[680,680]]],[1570600900785,["GJX@GJXAIOU",[[-1,678,"也如"]],[680,680],[678,678]]],[1570600917411,["GJX@GJXAIOU",[[1,678,"压入 help 数组中，然后返回 data队列"]],[678,678],[701,701]]],[1570600917434,["GJX@GJXAIOU",[[1,699," "]],[701,701],[702,702]]],[1570600921227,["GJX@GJXAIOU",[[1,702,"中元素5"]],[702,702],[706,706]]],[1570600921251,["GJX@GJXAIOU",[[1,705," "]],[706,706],[707,707]]],[1570600921739,["GJX@GJXAIOU",[[1,707,"；"]],[707,707],[708,708]]],[1570600924641,["GJX@GJXAIOU",[[-1,686,"数组"]],[688,688],[686,686]]],[1570600926656,["GJX@GJXAIOU",[[1,686,"队列"]],[686,686],[688,688]]],[1570600935178,["GJX@GJXAIOU",[[1,708,"\n\n"]],[708,708],[709,709]]],[1570600936760,["GJX@GJXAIOU",[[-1,709,"\n"],[1,710,"然后"]],[709,709],[711,711]]],[1570600945548,["GJX@GJXAIOU",[[1,711,"将 data 和 help指向"]],[711,711],[726,726]]],[1570600945571,["GJX@GJXAIOU",[[1,724," "]],[726,726],[727,727]]],[1570600949795,["GJX@GJXAIOU",[[1,727,"的队列互换；"]],[727,727],[733,733]]],[1570600950698,["GJX@GJXAIOU",[[1,733,"\n\n"]],[733,733],[734,734]]],[1570600954275,["GJX@GJXAIOU",[[-1,734,"\n"],[1,735,"然后"]],[734,734],[736,736]]],[1570600958034,["GJX@GJXAIOU",[[1,736,"将新的data"]],[736,736],[743,743]]],[1570600958058,["GJX@GJXAIOU",[[1,739," "]],[743,743],[744,744]]],[1570600959228,["GJX@GJXAIOU",[[1,744,"队列"]],[744,744],[746,746]]],[1570600959254,["GJX@GJXAIOU",[[1,744," "]],[746,746],[747,747]]],[1570600959817,["GJX@GJXAIOU",[[1,747,"（）"]],[747,747],[749,749]]],[1570600967196,["GJX@GJXAIOU",[[1,748,"即原来的 help队列"]],[748,748],[759,759]]],[1570600967219,["GJX@GJXAIOU",[[1,757," "]],[759,759],[760,760]]],[1570600970289,["GJX@GJXAIOU",[[1,761,"中的1"]],[761,761],[764,764]]],[1570600970314,["GJX@GJXAIOU",[[1,763," "]],[764,764],[765,765]]],[1570600970531,["GJX@GJXAIOU",[[1,765,"，"]],[765,765],[766,766]]],[1570600970677,["GJX@GJXAIOU",[[-1,765,"，"]],[766,766],[765,765]]],[1570600970915,["GJX@GJXAIOU",[[1,765,",2，"]],[765,765],[768,768]]],[1570600971062,["GJX@GJXAIOU",[[-1,767,"，"]],[768,768],[767,767]]],[1570600973043,["GJX@GJXAIOU",[[1,767,",3放入"]],[767,767],[771,771]]],[1570600973067,["GJX@GJXAIOU",[[1,769," "]],[771,771],[772,772]]],[1570600981650,["GJX@GJXAIOU",[[1,772," 新的 help 队列中（）"]],[772,772],[786,786]]],[1570600984845,["GJX@GJXAIOU",[[1,785,"即原来的"]],[785,785],[789,789]]],[1570600988931,["GJX@GJXAIOU",[[1,789,"data"]],[789,789],[793,793]]],[1570600988954,["GJX@GJXAIOU",[[1,789," "]],[793,793],[794,794]]],[1570600990187,["GJX@GJXAIOU",[[1,794,"队列"]],[794,794],[796,796]]],[1570600990210,["GJX@GJXAIOU",[[1,794," "]],[796,796],[797,797]]],[1570600990835,["GJX@GJXAIOU",[[1,797,"中"]],[797,797],[798,798]]],[1570600997700,["GJX@GJXAIOU",[[1,799,"，然后返回data"]],[799,799],[808,808]]],[1570600997724,["GJX@GJXAIOU",[[1,804," "]],[808,808],[809,809]]],[1570600998588,["GJX@GJXAIOU",[[1,809,"中"]],[809,809],[810,810]]],[1570600998611,["GJX@GJXAIOU",[[1,809," "]],[810,810],[811,811]]],[1570601001475,["GJX@GJXAIOU",[[1,811,"的数据，"]],[811,811],[815,815]]],[1570601002139,["GJX@GJXAIOU",[[-1,814,"，"]],[815,815],[814,814]]],[1570601002500,["GJX@GJXAIOU",[[1,814,"；"]],[814,814],[815,815]]],[1570601003937,["GJX@GJXAIOU",[[1,815,"\n\n"]],[815,815],[816,816]]],[1570601006315,["GJX@GJXAIOU",[[-1,816,"\n"],[1,817,"然后"]],[816,816],[818,818]]],[1570601018307,["GJX@GJXAIOU",[[1,818,"互换引用，以此循环；"]],[818,818],[828,828]]],[1570601074130,["GJX@GJXAIOU",[[1,828,"\n\n"]],[828,828],[829,829]]],[1570601074290,["GJX@GJXAIOU",[[1,830,"\n"]],[829,829],[830,830]]],[1570601074435,["GJX@GJXAIOU",[[1,831,"\n"]],[830,830],[831,831]]],[1570601075483,["GJX@GJXAIOU",[[1,832,"\n"]],[831,831],[832,832]]],[1570601096405,["GJX@GJXAIOU",[[1,832,"### 仅用栈结构实现队列结构"]],[832,832],[847,847]]],[1570601096682,["GJX@GJXAIOU",[[1,848,"\n"]],[847,847],[848,848]]],[1570601164750,["GJX@GJXAIOU",[[-1,848,"\n"],[1,849,"首先"]],[848,848],[850,850]]],[1570601165833,["GJX@GJXAIOU",[[-1,849,"先"]],[850,850],[849,849]]],[1570601166010,["GJX@GJXAIOU",[[-1,848,"首"],[1,849,"\n"]],[849,849],[848,848]]],[1570601166162,["GJX@GJXAIOU",[[-1,848,"\n"]],[848,848],[847,847]]],[1570601167628,["GJX@GJXAIOU",[[1,847,"示例"]],[847,847],[849,849]]],[1570601168178,["GJX@GJXAIOU",[[-1,847,"示例"]],[849,849],[847,847]]],[1570601168625,["GJX@GJXAIOU",[[1,848,"\n"]],[847,847],[848,848]]],[1570601169755,["GJX@GJXAIOU",[[-1,848,"\n"],[1,849,"示例"]],[848,848],[850,850]]],[1570601175685,["GJX@GJXAIOU",[[1,850,"：放入栈的熟悉怒"]],[850,850],[858,858]]],[1570601176449,["GJX@GJXAIOU",[[-1,855,"熟悉怒"]],[858,858],[855,855]]],[1570601184531,["GJX@GJXAIOU",[[1,855,"顺序为：1，"]],[855,855],[861,861]]],[1570601184630,["GJX@GJXAIOU",[[-1,860,"，"]],[861,861],[860,860]]],[1570601184891,["GJX@GJXAIOU",[[1,860,",2，"]],[860,860],[863,863]]],[1570601185087,["GJX@GJXAIOU",[[-1,862,"，"]],[863,863],[862,862]]],[1570601185674,["GJX@GJXAIOU",[[1,862,",3，"]],[862,862],[865,865]]],[1570601185895,["GJX@GJXAIOU",[[-1,864,"，"]],[865,865],[864,864]]],[1570601186091,["GJX@GJXAIOU",[[1,864,",4，"]],[864,864],[867,867]]],[1570601186303,["GJX@GJXAIOU",[[-1,866,"，"]],[867,867],[866,866]]],[1570601187108,["GJX@GJXAIOU",[[1,866,",5，"]],[866,866],[869,869]]],[1570601189399,["GJX@GJXAIOU",[[-1,868,"，"]],[869,869],[868,868]]],[1570601189408,["GJX@GJXAIOU",[[1,868,","]],[868,868],[869,869]]],[1570601190177,["GJX@GJXAIOU",[[-1,868,","]],[869,869],[868,868]]],[1570601190796,["GJX@GJXAIOU",[[1,868,"；"]],[868,868],[869,869]]],[1570601192226,["GJX@GJXAIOU",[[-1,868,"；"]],[869,869],[868,868]]],[1570601193308,["GJX@GJXAIOU",[[1,868,"保证"]],[868,868],[870,870]]],[1570601193331,["GJX@GJXAIOU",[[1,868," "]],[870,870],[871,871]]],[1570601198572,["GJX@GJXAIOU",[[1,871,"拿出顺序为：1，"]],[871,871],[879,879]]],[1570601198720,["GJX@GJXAIOU",[[-1,878,"，"]],[879,879],[878,878]]],[1570601198851,["GJX@GJXAIOU",[[1,878,",2，"]],[878,878],[881,881]]],[1570601199040,["GJX@GJXAIOU",[[-1,880,"，"]],[881,881],[880,880]]],[1570601199146,["GJX@GJXAIOU",[[1,880,",3，"]],[880,880],[883,883]]],[1570601199328,["GJX@GJXAIOU",[[-1,882,"，"]],[883,883],[882,882]]],[1570601199468,["GJX@GJXAIOU",[[1,882,",4，"]],[882,882],[885,885]]],[1570601199662,["GJX@GJXAIOU",[[-1,884,"，"]],[885,885],[884,884]]],[1570601200147,["GJX@GJXAIOU",[[1,884,",5；"]],[884,884],[887,887]]],[1570601201442,["GJX@GJXAIOU",[[1,887,"\n\n"]],[887,887],[888,888]]],[1570601206589,["GJX@GJXAIOU",[[-1,888,"\n"],[1,889,"首先"]],[888,888],[890,890]]],[1570601213204,["GJX@GJXAIOU",[[1,890,"将数据放入 data栈"]],[890,890],[901,901]]],[1570601213228,["GJX@GJXAIOU",[[1,900," "]],[901,901],[902,902]]],[1570601214741,["GJX@GJXAIOU",[[1,902,"中"]],[902,902],[903,903]]],[1570601216500,["GJX@GJXAIOU",[[-1,896,"data 栈中"]],[903,903],[896,896]]],[1570601219627,["GJX@GJXAIOU",[[1,896,"push 栈中"]],[896,896],[903,903]]],[1570601250532,["GJX@GJXAIOU",[[1,903,"，形成：5，"]],[903,903],[909,909]]],[1570601250768,["GJX@GJXAIOU",[[-1,908,"，"]],[909,909],[908,908]]],[1570601250915,["GJX@GJXAIOU",[[1,908,",4，"]],[908,908],[911,911]]],[1570601251062,["GJX@GJXAIOU",[[-1,910,"，"]],[911,911],[910,910]]],[1570601251261,["GJX@GJXAIOU",[[1,910,",3，"]],[910,910],[913,913]]],[1570601251441,["GJX@GJXAIOU",[[-1,912,"，"]],[913,913],[912,912]]],[1570601251723,["GJX@GJXAIOU",[[1,912,",2，"]],[912,912],[915,915]]],[1570601251928,["GJX@GJXAIOU",[[-1,914,"，"]],[915,915],[914,914]]],[1570601263982,["GJX@GJXAIOU",[[1,914,",1，然后将其全部拿出push"]],[914,914],[929,929]]],[1570601264005,["GJX@GJXAIOU",[[1,925," "]],[929,929],[930,930]]],[1570601264563,["GJX@GJXAIOU",[[1,930,"到"]],[930,930],[931,931]]],[1570601264587,["GJX@GJXAIOU",[[1,930," "]],[931,931],[932,932]]],[1570601268548,["GJX@GJXAIOU",[[1,932," pop栈"]],[932,932],[937,937]]],[1570601268572,["GJX@GJXAIOU",[[1,936," "]],[937,937],[938,938]]],[1570601272508,["GJX@GJXAIOU",[[1,938,"中，编程了"]],[938,938],[943,943]]],[1570601273378,["GJX@GJXAIOU",[[-1,940,"编程了"]],[943,943],[940,940]]],[1570601276651,["GJX@GJXAIOU",[[1,940,"变成了1"]],[940,940],[944,944]]],[1570601276675,["GJX@GJXAIOU",[[1,943," "]],[944,944],[945,945]]],[1570601276877,["GJX@GJXAIOU",[[1,945,"，"]],[945,945],[946,946]]],[1570601277032,["GJX@GJXAIOU",[[-1,945,"，"]],[946,946],[945,945]]],[1570601277140,["GJX@GJXAIOU",[[1,945,",2，"]],[945,945],[948,948]]],[1570601277327,["GJX@GJXAIOU",[[-1,947,"，"]],[948,948],[947,947]]],[1570601277468,["GJX@GJXAIOU",[[1,947,",3，"]],[947,947],[950,950]]],[1570601277640,["GJX@GJXAIOU",[[-1,949,"，"]],[950,950],[949,949]]],[1570601278379,["GJX@GJXAIOU",[[1,949,",4，4"]],[949,949],[953,953]]],[1570601278397,["GJX@GJXAIOU",[[-1,952,"4"]],[953,953],[952,952]]],[1570601278415,["GJX@GJXAIOU",[[1,952,",5"]],[952,952],[954,954]]],[1570601279786,["GJX@GJXAIOU",[[-1,951,"，,5"]],[954,954],[951,951]]],[1570601280242,["GJX@GJXAIOU",[[1,951,"5"]],[951,951],[952,952]]],[1570601280994,["GJX@GJXAIOU",[[-1,951,"5"]],[952,952],[951,951]]],[1570601282163,["GJX@GJXAIOU",[[1,951,"，5；"]],[951,951],[954,954]]],[1570601288861,["GJX@GJXAIOU",[[1,954,"然后在pop"]],[954,954],[960,960]]],[1570601288884,["GJX@GJXAIOU",[[1,957," "]],[960,960],[961,961]]],[1570601289626,["GJX@GJXAIOU",[[1,961,"栈"]],[961,961],[962,962]]],[1570601289651,["GJX@GJXAIOU",[[1,961," "]],[962,962],[963,963]]],[1570601291730,["GJX@GJXAIOU",[[1,963,"中一次"]],[963,963],[966,966]]],[1570601292441,["GJX@GJXAIOU",[[-1,964,"一次"]],[966,966],[964,964]]],[1570601301556,["GJX@GJXAIOU",[[1,964,"依次从栈顶去除"]],[964,964],[971,971]]],[1570601302235,["GJX@GJXAIOU",[[-1,969,"去除"]],[971,971],[969,969]]],[1570601308081,["GJX@GJXAIOU",[[1,969,"取出所有元素即可；"]],[969,969],[978,978]]],[1570601312408,["GJX@GJXAIOU",[[1,978,"\n\n"]],[978,978],[979,979]]],[1570601313235,["GJX@GJXAIOU",[[-1,979,"\n"],[1,980,"*"]],[979,979],[980,980]]],[1570601313378,["GJX@GJXAIOU",[[1,980,"***"]],[980,980],[981,981]]],[1570601316035,["GJX@GJXAIOU",[[1,981,"要求OA"]],[981,981],[985,985]]],[1570601316537,["GJX@GJXAIOU",[[-1,983,"OA"]],[985,985],[983,983]]],[1570601338517,["GJX@GJXAIOU",[[1,985,"：如果 push 栈中决定往 pop栈"]],[985,985],[1004,1004]]],[1570601338542,["GJX@GJXAIOU",[[1,1003," "]],[1004,1004],[1005,1005]]],[1570601345058,["GJX@GJXAIOU",[[1,1005,"中倒数据，则一笔"]],[1005,1005],[1013,1013]]],[1570601345977,["GJX@GJXAIOU",[[-1,1011,"一笔"]],[1013,1013],[1011,1011]]],[1570601354890,["GJX@GJXAIOU",[[1,1011,"一次必须倒完；"]],[1011,1011],[1018,1018]]],[1570601355424,["GJX@GJXAIOU",[[1,1018,"\n\n"]],[1018,1018],[1019,1019]]],[1570601358020,["GJX@GJXAIOU",[[-1,1019,"\n"],[1,1020,"如果"]],[1019,1019],[1021,1021]]],[1570601360019,["GJX@GJXAIOU",[[1,1021," pop栈"]],[1021,1021],[1026,1026]]],[1570601360042,["GJX@GJXAIOU",[[1,1025," "]],[1026,1026],[1027,1027]]],[1570601365043,["GJX@GJXAIOU",[[1,1027,"中任有数据"]],[1027,1027],[1032,1032]]],[1570601367802,["GJX@GJXAIOU",[[-1,1028,"任"]],[1029,1029],[1028,1028]]],[1570601370964,["GJX@GJXAIOU",[[1,1028,"仍"]],[1028,1028],[1029,1029]]],[1570601375254,["GJX@GJXAIOU",[[1,1032,"，则push"]],[1032,1032],[1038,1038]]],[1570601375277,["GJX@GJXAIOU",[[1,1034," "]],[1038,1038],[1039,1039]]],[1570601376405,["GJX@GJXAIOU",[[1,1039,"栈"]],[1039,1039],[1040,1040]]],[1570601376429,["GJX@GJXAIOU",[[1,1039," "]],[1040,1040],[1041,1041]]],[1570601380315,["GJX@GJXAIOU",[[1,1041,"不能往pop"]],[1041,1041],[1047,1047]]],[1570601380338,["GJX@GJXAIOU",[[1,1044," "]],[1047,1047],[1048,1048]]],[1570601381180,["GJX@GJXAIOU",[[1,1048,"栈"]],[1048,1048],[1049,1049]]],[1570601381203,["GJX@GJXAIOU",[[1,1048," "]],[1049,1049],[1050,1050]]],[1570601382621,["GJX@GJXAIOU",[[1,1050,"中到"]],[1050,1050],[1052,1052]]],[1570601383114,["GJX@GJXAIOU",[[-1,1051,"到"]],[1052,1052],[1051,1051]]],[1570601386604,["GJX@GJXAIOU",[[1,1051,"倒数据；"]],[1051,1051],[1055,1055]]],[1570601397402,["GJX@GJXAIOU",[[1,1055,"\n\n"]],[1055,1055],[1056,1056]]],[1570601397554,["GJX@GJXAIOU",[[1,1057,"\n"]],[1056,1056],[1057,1057]]],[1570601397722,["GJX@GJXAIOU",[[1,1058,"\n"]],[1057,1057],[1058,1058]]],[1570601397882,["GJX@GJXAIOU",[[1,1059,"\n"]],[1058,1058],[1059,1059]]],[1570601398089,["GJX@GJXAIOU",[[1,1060,"\n"]],[1059,1059],[1060,1060]]],[1570601398251,["GJX@GJXAIOU",[[1,1061,"\n"]],[1060,1060],[1061,1061]]],[1570601398451,["GJX@GJXAIOU",[[1,1062,"\n"]],[1061,1061],[1062,1062]]],[1570609258064,["GJX@GJXAIOU",[[1,1059,"/**\n * * @param m\n  * @param tR 左上角的行\n  * @param tC 左上角的列\n  * @param dR：右下角的行\n  * @param dC：右下角的列\n  */"]],[1059,1059],[1161,1161]]],[1570609260946,["GJX@GJXAIOU",[[-1,1059,"/**\n * * @param m\n  * @param tR 左上角的行\n  * @param tC 左上角的列\n  * @param dR：右下角的行\n  * @param dC：右下角的列\n  */\n\n"]],[1059,1163],[1059,1059]]],[1570609263432,["GJX@GJXAIOU",[[1,1058,"\t/**\n\t *\n\t * @param m\n\t * @param tR 左上角的行\n\t * @param tC 左上角的列\n\t * @param dR：右下角的行\n\t * @param dC：右下角的列\n\t */"]],[1058,1058],[1164,1164]]],[1570609265683,["GJX@GJXAIOU",[[-1,1059,"/**\n\t *\n\t * @param m\n\t * @param tR 左上角的行\n\t * @param tC 左上角的列\n\t * @param dR：右下角的行\n\t * @param dC：右下角的列\n\t */\n\n"]],[1059,1166],[1059,1059]]],[1570609294420,["GJX@GJXAIOU",[[1,1058,"\n"]],[1057,1057],[1058,1058]]],[1570609294851,["GJX@GJXAIOU",[[1,1058,"一首首脍炙人口的红歌让我们心情激扬，唱出了我们的心声，唱出了时代的心声。为了纪念建党90周年，我校组织举行红歌合唱大赛，我支部选的曲目是《唱支山歌给党听》和《中国，中国，鲜红的太阳永不落》。  　　红歌是爱国主义教育的好教材。红歌不仅歌词美，而且一首红歌就是一段历史，唱红歌可以使学生受到红色教育。一首首红歌教育着一代代人成长，使大家在唱红歌中受到教育，在红歌中汲取丰富的政治营养，从内心深处感受到社会主义好、共产党好、改革开放好和伟大祖国好，坚定了我们跟党走，为共产主义奋斗的理想和信念。　　  　　红歌能唤起人们的红色记忆。红色歌曲大都是当时历史实践的产物，它是当时革命实践的真实写照。有许多红歌首先就是在广大人民群众中传唱的，后经词、曲作者收集、加工和整理被推广的，它脍炙人口，便于记忆。所以人们每当听到红歌就会产生对那段革命历史的记忆。列宁说过：忘记过去，就意味着背叛！唱响红色歌曲是唤起人们的红色记忆，加强革命传统教育的好办法。  　　大唱红歌，大唱爱国主义歌曲也是一种重要的思想教育活动，通过歌唱活动，能使人的思想得到净化，激发革命精神，也能密切干群关系，增强上下的心灵沟通。只有时刻牢记革命传统和党的宗旨的人，才会经常唱起“红歌”；只有心怀坦荡、光明磊落的人，才能问心无愧地唱响“红歌”；只有将群众百姓真正装进心里的人，才会和群众一起合唱“红歌”！  　　一首《中国，中国，鲜红的太阳永不落》，唱出了人们的心声，一代又一代的中国人为建设祖国而奋斗。战士们的血汗不会白流。历史告诉我们的不是流泪，而是充满斗志，更加奋进。我们这一代龙的传人将会感恩这片哺育着我们的土地，让我们为它奋斗，使它绽放光彩。表达了我们共同美好的愿望，为我们生活在这样一个强大的祖国而自豪。《唱支山歌给党听》唱出了当中国被西方列强掠夺时，中国人为赶走侵略者而奋斗的历程，当日本军队进驻中国领土时，中国人为反对法西斯而愤怒，唱出了共产党在人们前进路上播下光明的种子。  　　为之唱红歌，怀念过去，只是让我们感受过去革命者为祖国的一腔热血。而我们必须把握现在，惟有我们不懈努力才能创造更美好的明天。歌唱的声音虽已停止，但奋斗的精神将永不落幕。让我们团结一心,一起走过世纪的风雨,一起走进世界的神奇。用我们的真诚拥抱祖国,用我们的歌喉歌颂祖国,用我们的真挚祝福祖国,愿四川的明天更加美好，愿我们的祖国明天更加美好。"]],[1058,1058],[2054,2054]]],[1570609298922,["GJX@GJXAIOU",[[-1,1058,"一首首脍炙人口的红歌让我们心情激扬，"]],[1058,1076],[1058,1058]]],[1570609303771,["GJX@GJXAIOU",[[1,1058,"《祖国颂》"]],[1058,1058],[1063,1063]]],[1570609314626,["GJX@GJXAIOU",[[-1,1081,"为了纪念建党90周年，我校组织举行红歌合唱大赛，我支部选的曲目是《唱支山歌给党听》和《中国，中国，鲜红的太阳永不落》。  　　红歌是爱国主义教育的好教材。红歌"]],[1081,1160],[1081,1081]]],[1570609319381,["GJX@GJXAIOU",[[1,1081,"这首歌"]],[1081,1081],[1084,1084]]],[1570609323205,["GJX@GJXAIOU",[[-1,1094,"红"]],[1095,1095],[1094,1094]]],[1570609326342,["GJX@GJXAIOU",[[1,1095,"曲"]],[1095,1095],[1096,1096]]],[1570609335013,["GJX@GJXAIOU",[[-1,1103,"唱红歌可以使学生受到红色教育。一首首红歌教育着"]],[1103,1126],[1103,1103]]],[1570609340822,["GJX@GJXAIOU",[[1,1103,"让我们了解到了"]],[1103,1103],[1110,1110]]],[1570609344683,["GJX@GJXAIOU",[[-1,1110,"一代代人"]],[1114,1114],[1110,1110]]],[1570609347326,["GJX@GJXAIOU",[[1,1110,"国家的"]],[1110,1110],[1113,1113]]],[1570609363443,["GJX@GJXAIOU",[[-1,1116,"使大家在唱红歌中受到教育，在红歌中汲取丰富的政治营养，"]],[1116,1143],[1116,1116]]],[1570609373134,["GJX@GJXAIOU",[[1,1116,"唤醒"]],[1116,1116],[1118,1118]]],[1570609373699,["GJX@GJXAIOU",[[-1,1116,"唤醒"]],[1118,1118],[1116,1116]]],[1570609374622,["GJX@GJXAIOU",[[1,1116," "]],[1116,1116],[1117,1117]]],[1570609386642,["GJX@GJXAIOU",[[-1,1298,"列宁说过：忘记过去，就意味着背叛！唱响红色歌曲是唤起人们的红色记忆，加强革命传统教育的好办法"]],[1298,1344],[1298,1298]]],[1570609390658,["GJX@GJXAIOU",[[1,1116,"列宁说过：忘记过去，就意味着背叛！唱响红色歌曲是唤起人们的红色记忆，加强革命传统教育的好办法"]],[1116,1116],[1162,1162]]],[1570609397428,["GJX@GJXAIOU",[[1,1222,"\n"]],[1222,1222],[1223,1223]]],[1570609410108,["GJX@GJXAIOU",[[-1,1384,"能使人的思想得到净化，激发革命精神"]],[1384,1401],[1384,1384]]],[1570609415339,["GJX@GJXAIOU",[[1,1116,"能使人的思想得到净化，激发革命精神"]],[1116,1116],[1133,1133]]],[1570609418522,["GJX@GJXAIOU",[[-1,1118,"人"]],[1119,1119],[1118,1118]]],[1570609420718,["GJX@GJXAIOU",[[1,1118,"自己"]],[1118,1118],[1120,1120]]],[1570609427436,["GJX@GJXAIOU",[[1,1242,"\n　"]],[1242,1242],[1244,1244]]],[1570609442755,["GJX@GJXAIOU",[[-1,1534,"唱出了人们的心声，一代又一代的中国人为建设祖国而奋斗。战士们的血汗不会白流。历史告诉我们的不是流泪，而是充满斗志，更加奋进。我们这一代龙的传人将会感恩这片哺育着我们的土地，让我们为它奋斗，使它绽放光彩。表达了我们共同美好的愿望，为我们生活在这样一个强大的祖国而自豪。"]],[1534,1667],[1534,1534]]],[1570609445571,["GJX@GJXAIOU",[[1,1235,"\n"]],[1235,1235],[1236,1236]]],[1570609446066,["GJX@GJXAIOU",[[1,1236,"唱出了人们的心声，一代又一代的中国人为建设祖国而奋斗。战士们的血汗不会白流。历史告诉我们的不是流泪，而是充满斗志，更加奋进。我们这一代龙的传人将会感恩这片哺育着我们的土地，让我们为它奋斗，使它绽放光彩。表达了我们共同美好的愿望，为我们生活在这样一个强大的祖国而自豪。"]],[1236,1236],[1369,1369]]],[1570609501571,["GJX@GJXAIOU",[[-1,1378,"红歌能唤起人们的红色记忆。红色歌曲大都是当时历史实践的产物，它是当时革命实践的真实写照。有许多红歌首先就是在广大人民群众中传唱的，后经词、曲作者收集、加工和整理被推广的，它脍炙人口，便于记忆。所以人们每当听到红歌就会产生对那段革命历史的记忆。。  　　大唱红歌，大唱爱国主义歌曲也是一种重要的思想教育活动，通过歌唱活动，，也能密切干群关系，增强上下的心灵沟通。只有时刻牢记革命传统和党的宗旨的人，才会经常唱起“红歌”；只有心怀坦荡、光明磊落的人，才能问心无愧地唱响“红歌”；只有将群众百姓真正装进心里的人，才会和群众一起合唱“红歌”！  　　一首《中国，中国，鲜红的太阳永不落》，《唱支山歌给党听》唱出了当中国被西方列强掠夺时，中国人为赶走侵略者而奋斗的历程，当日本军队进驻中国领土时，中国人为反对法西斯而愤怒，唱出了共产党在人们前进路上播下光明的种子。  　　为之唱红歌，怀念过去，只是让我们感受过去革命者为祖国的一腔热血。而我们必须把握现在，惟有我们不懈努力才能创造更美好的明天。歌唱的声音虽已停止，但奋斗的精神将永不落幕。让我们团结一心,一起走过世纪的风雨,一起走进世界的神奇。用我们的真诚拥抱祖国,用我们的歌喉歌颂祖国,用我们的真挚祝福祖国,愿四川的明天更加美好，愿我们的祖国明天更加美好。"]],[1378,1927],[1378,1378]]],[1570609511709,["GJX@GJXAIOU",[[1,1103,"通过歌曲"]],[1103,1103],[1107,1107]]],[1570609517204,["GJX@GJXAIOU",[[1,1138,"。"]],[1138,1138],[1139,1139]]],[1570609526499,["GJX@GJXAIOU",[[-1,1156,"唱响红色歌曲"]],[1162,1162],[1156,1156]]],[1570609543021,["GJX@GJXAIOU",[[1,1156,"通过朗诵这首《祖国颂》"]],[1156,1156],[1167,1167]]],[1570609550643,["GJX@GJXAIOU",[[-1,1167,"是唤起人们的红色记忆，"]],[1168,1168],[1167,1167]]],[1570609555267,["GJX@GJXAIOU",[[-1,1175,"的好办法"]],[1179,1179],[1175,1175]]],[1570609558391,["GJX@GJXAIOU",[[1,1169,"了"]],[1169,1169],[1170,1170]]],[1570609561437,["GJX@GJXAIOU",[[-1,1176," "]],[1177,1177],[1176,1176]]],[1570609562019,["GJX@GJXAIOU",[[1,1176,"，"]],[1176,1176],[1177,1177]]],[1570609567588,["GJX@GJXAIOU",[[-1,1185,"社会主义好、共产党好、改革开放好和"]],[1185,1202],[1185,1185]]],[1570609570067,["GJX@GJXAIOU",[[-1,1189,"好"]],[1190,1190],[1189,1189]]],[1570609575574,["GJX@GJXAIOU",[[1,1189,"的繁荣昌盛"]],[1189,1189],[1194,1194]]],[1570609582870,["GJX@GJXAIOU",[[1,1219,"同时这首歌"]],[1219,1219],[1224,1224]]],[1570609601079,["GJX@GJXAIOU",[[1,1223,"诗"]],[1223,1223],[1224,1224]]],[1570609609692,["GJX@GJXAIOU",[[1,1083,"诗歌"]],[1083,1083],[1085,1085]]],[1570609609915,["GJX@GJXAIOU",[[-1,1085,"歌"]],[1085,1085],[1084,1084]]],[1570609615011,["GJX@GJXAIOU",[[-1,1095,"歌曲"]],[1097,1097],[1095,1095]]],[1570609616622,["GJX@GJXAIOU",[[1,1095,"十个"]],[1095,1095],[1097,1097]]],[1570609617195,["GJX@GJXAIOU",[[-1,1095,"十个"]],[1097,1097],[1095,1095]]],[1570609619325,["GJX@GJXAIOU",[[1,1095,"诗歌"]],[1095,1095],[1097,1097]]],[1570609621700,["GJX@GJXAIOU",[[-1,1106,"歌曲"]],[1108,1108],[1106,1106]]],[1570609624036,["GJX@GJXAIOU",[[1,1106,"诗歌"]],[1106,1106],[1108,1108]]],[1570609636355,["GJX@GJXAIOU",[[-1,1058,"《祖国颂》唱出了我们的心声，唱出了时代的心声。这首诗歌不仅歌词美，而且一首诗歌就是一段历史，通过诗歌让我们了解到了国家的成长，能使自己的思想得到净化，激发革命精神。列宁说过：忘记过去，就意味着背叛！通过朗诵这首《祖国颂》加强了革命传统教育，从内心深处感受到伟大祖国的繁荣昌盛，坚定了我们跟党走，为共产主义奋斗的理想和信念。\n同时这首诗歌唱出了人们的心声，一代又一代的中国人为建设祖国而奋斗。战士们的血汗不会白流。历史告诉我们的不是流泪，而是充满斗志，更加奋进。我们这一代龙的传人将会感恩这片哺育着我们的土地，让我们为它奋斗，使它绽放光彩。表达了我们共同美好的愿望，为我们生活在这样一个强大的祖国而自豪。　"]],[1058,1360],[1058,1058]]],[1570619396115,["GJX@GJXAIOU",[[1,1057,"### "]],[1057,1057],[1061,1061]]],[1570619407290,["GJX@GJXAIOU",[[1,1057,"\n"]],[1057,1057],[1058,1058]]],[1570619408884,["GJX@GJXAIOU",[[1,1062," "]],[1061,1061],[1062,1062]]],[1570619418933,["GJX@GJXAIOU",[[1,1062,"猫狗队列问题"]],[1062,1062],[1068,1068]]],[1570619419252,["GJX@GJXAIOU",[[1,1068,"\n"]],[1068,1068],[1069,1069]]],[1570619430766,["GJX@GJXAIOU",[[1,1069,"猫狗队列 【题目】 宠物、狗和猫的类如下：\npublic class Pet { private String type;\npublic Pet(String type) { this.type = type; }\npublic String getPetType() { return this.type; }\n}\npublic class Dog extends Pet { public Dog() { super(\"dog\"); } }\npublic class Cat extends Pet { public Cat() { super(\"cat\"); } }\n实现一种狗猫队列的结构，要求如下： 用户可以调用add方法将cat类或dog类的\n实例放入队列中； 用户可以调用pollAll方法，将队列中所有的实例按照进队列\n的先后顺序依次弹出； 用户可以调用pollDog方法，将队列中dog类的实例按照\n进队列的先后顺序依次弹出； 用户可以调用pollCat方法，将队列中cat类的实\n例按照进队列的先后顺序依次弹出； 用户可以调用isEmpty方法，检查队列中是\n否还有dog或cat的实例； 用户可以调用isDogEmpty方法，检查队列中是否有dog\n类的实例； 用户可以调用isCatEmpty方法，检查队列中是否有cat类的实例。"]],[1069,1069],[1646,1646]]],[1570619447626,["GJX@GJXAIOU",[[1,1131,"      "]],[1131,1131],[1137,1137]]],[1570619449173,["GJX@GJXAIOU",[[1,1183,"      "]],[1183,1183],[1189,1189]]],[1570619452339,["GJX@GJXAIOU",[[1,1110,"\n"]],[1110,1110],[1111,1111]]],[1570619454146,["GJX@GJXAIOU",[[1,1111,"      "]],[1111,1111],[1117,1117]]],[1570619459094,["GJX@GJXAIOU",[[1,1170,"\n            "]],[1170,1170],[1183,1183]]],[1570619460756,["GJX@GJXAIOU",[[1,1201,"\n            "]],[1201,1201],[1214,1214]]],[1570619464037,["GJX@GJXAIOU",[[-1,1208,"      "]],[1214,1214],[1208,1208]]],[1570619468460,["GJX@GJXAIOU",[[1,1245,"\n            "]],[1245,1245],[1258,1258]]],[1570619470572,["GJX@GJXAIOU",[[1,1276,"\n            "]],[1276,1276],[1289,1289]]],[1570619472222,["GJX@GJXAIOU",[[-1,1283,"      "]],[1289,1289],[1283,1283]]],[1570619476636,["GJX@GJXAIOU",[[1,1318,"\n"]],[1318,1318],[1319,1319]]],[1570619478235,["GJX@GJXAIOU",[[1,1319,"      "]],[1319,1319],[1325,1325]]],[1570619484195,["GJX@GJXAIOU",[[1,1340,"\n            "]],[1340,1340],[1353,1353]]],[1570619488331,["GJX@GJXAIOU",[[1,1367,"\n            "]],[1367,1367],[1380,1380]]],[1570619490438,["GJX@GJXAIOU",[[-1,1374,"      "]],[1380,1380],[1374,1374]]],[1570619492046,["GJX@GJXAIOU",[[1,1376,"\n      "]],[1376,1376],[1383,1383]]],[1570619493819,["GJX@GJXAIOU",[[-1,1377,"      "]],[1383,1383],[1377,1377]]],[1570619496787,["GJX@GJXAIOU",[[1,1410,"\n"]],[1410,1410],[1411,1411]]],[1570619498907,["GJX@GJXAIOU",[[1,1411,"        "]],[1411,1411],[1419,1419]]],[1570619501061,["GJX@GJXAIOU",[[-1,1418," "]],[1419,1419],[1418,1418]]],[1570619504507,["GJX@GJXAIOU",[[1,1433,"\n             "]],[1433,1433],[1447,1447]]],[1570619507131,["GJX@GJXAIOU",[[1,1461,"\n             "]],[1461,1461],[1475,1475]]],[1570619509581,["GJX@GJXAIOU",[[-1,1469,"      "]],[1475,1475],[1469,1469]]],[1570619512475,["GJX@GJXAIOU",[[1,1471,"\n       "]],[1471,1471],[1479,1479]]],[1570619514691,["GJX@GJXAIOU",[[-1,1472,"       "]],[1479,1479],[1472,1472]]],[1570619517387,["GJX@GJXAIOU",[[1,1474,"\n"]],[1473,1473],[1474,1474]]],[1570619520835,["GJX@GJXAIOU",[[1,1091,"\n"]],[1091,1091],[1092,1092]]],[1570619521821,["GJX@GJXAIOU",[[1,1091,"··"]],[1091,1091],[1093,1093]]],[1570619522970,["GJX@GJXAIOU",[[-1,1091,"··"]],[1093,1093],[1091,1091]]],[1570619523226,["GJX@GJXAIOU",[[-1,1091,"\n"]],[1091,1091],[1090,1090]]],[1570619525251,["GJX@GJXAIOU",[[1,1091,"\n"]],[1090,1090],[1091,1091]]],[1570619526203,["GJX@GJXAIOU",[[1,1091,"```"]],[1091,1091],[1094,1094]]],[1570619526228,["GJX@GJXAIOU",[[1,1094,"language\n```\n"]],[1094,1094],[1094,1102]]],[1570619527276,["GJX@GJXAIOU",[[-1,1094,"language"],[1,1102,"j"]],[1094,1102],[1095,1095]]],[1570619527711,["GJX@GJXAIOU",[[1,1095,"avqa"]],[1095,1095],[1099,1099]]],[1570619528667,["GJX@GJXAIOU",[[-1,1097,"qa"]],[1099,1099],[1097,1097]]],[1570619528915,["GJX@GJXAIOU",[[1,1097,"a"]],[1097,1097],[1098,1098]]],[1570619531620,["GJX@GJXAIOU",[[-1,1099,"```"]],[1099,1102],[1099,1099]]],[1570619534011,["GJX@GJXAIOU",[[1,1484,"```"]],[1484,1484],[1487,1487]]],[1570619536596,["GJX@GJXAIOU",[[-1,1100,"\n"]],[1100,1100],[1099,1099]]],[1570619536781,["GJX@GJXAIOU",[[-1,1099,"\n"]],[1099,1099],[1098,1098]]],[1570619542996,["GJX@GJXAIOU",[[-1,1424,"  "],[-1,1453,"  "],[-1,1470,"  "]],[1425,1479],[1423,1473]]],[1570619546970,["GJX@GJXAIOU",[[-1,1331,"  "],[-1,1359,"  "],[-1,1376,"  "]],[1332,1384],[1330,1378]]],[1570619551356,["GJX@GJXAIOU",[[-1,1123,"  "],[-1,1146,"  "],[-1,1189,"  "],[-1,1210," "],[-1,1215," "],[-1,1218,"  "],[-1,1264,"  "],[-1,1285,"  "]],[1124,1292],[1122,1278]]],[1570619559706,["GJX@GJXAIOU",[[1,1478,"\n"]],[1478,1478],[1479,1479]]],[1570619560292,["GJX@GJXAIOU",[[1,1479,"- "]],[1479,1479],[1481,1481]]],[1570619564690,["GJX@GJXAIOU",[[-1,1503,"\n"]],[1504,1504],[1503,1503]]],[1570619567221,["GJX@GJXAIOU",[[1,1512,"\n"]],[1512,1512],[1513,1513]]],[1570619568083,["GJX@GJXAIOU",[[1,1513,"- "]],[1513,1513],[1515,1515]]],[1570619571313,["GJX@GJXAIOU",[[-1,1545,"\n"]],[1546,1546],[1545,1545]]],[1570619575114,["GJX@GJXAIOU",[[1,1556,"\n"]],[1556,1556],[1557,1557]]],[1570619575708,["GJX@GJXAIOU",[[1,1557,"- "]],[1557,1557],[1559,1559]]],[1570619578411,["GJX@GJXAIOU",[[-1,1588,"\n"]],[1589,1589],[1588,1588]]],[1570619584181,["GJX@GJXAIOU",[[1,1602,"-  -  "]],[1602,1602],[1608,1608]]],[1570619587331,["GJX@GJXAIOU",[[-1,1601," -  "]],[1601,1605],[1601,1601]]],[1570619588815,["GJX@GJXAIOU",[[1,1601,"\n"]],[1601,1601],[1602,1602]]],[1570619590948,["GJX@GJXAIOU",[[-1,1604," "]],[1605,1605],[1604,1604]]],[1570619592932,["GJX@GJXAIOU",[[-1,1630,"\n"]],[1631,1631],[1630,1630]]],[1570619595427,["GJX@GJXAIOU",[[1,1647,"\n"]],[1647,1647],[1648,1648]]],[1570619596556,["GJX@GJXAIOU",[[1,1648,"- "]],[1648,1648],[1650,1650]]],[1570619598894,["GJX@GJXAIOU",[[-1,1672,"\n"]],[1673,1673],[1672,1672]]],[1570619600923,["GJX@GJXAIOU",[[1,1687,"\n"]],[1687,1687],[1688,1688]]],[1570619602245,["GJX@GJXAIOU",[[1,1688,"- "]],[1688,1688],[1690,1690]]],[1570619604916,["GJX@GJXAIOU",[[-1,1720,"\n"]],[1721,1721],[1720,1720]]],[1570619606814,["GJX@GJXAIOU",[[1,1726,"\n"]],[1726,1726],[1727,1727]]],[1570619608116,["GJX@GJXAIOU",[[1,1727,"- "]],[1727,1727],[1729,1729]]],[1570619911851,["GJX@GJXAIOU",[[-1,1771,"　"]],[1772,1772],[1771,1771]]],[1570619913550,["GJX@GJXAIOU",[[1,1771,"****"]],[1771,1771],[1773,1773]]],[1570619914539,["GJX@GJXAIOU",[[1,1773,"jieda"]],[1773,1773],[1778,1778]]],[1570619915484,["GJX@GJXAIOU",[[-1,1773,"jieda"]],[1778,1778],[1773,1773]]],[1570619917181,["GJX@GJXAIOU",[[1,1773,"解答："]],[1773,1773],[1776,1776]]],[1570619933310,["GJX@GJXAIOU",[[1,1778," 分别建立狗队列和毛"]],[1778,1778],[1788,1788]]],[1570619933830,["GJX@GJXAIOU",[[-1,1787,"毛"]],[1788,1788],[1787,1787]]],[1570619945285,["GJX@GJXAIOU",[[1,1787,"猫队列，然后使用"]],[1787,1787],[1795,1795]]],[1570619951086,["GJX@GJXAIOU",[[1,1795,"时间戳（）"]],[1795,1795],[1800,1800]]],[1570619963342,["GJX@GJXAIOU",[[1,1799,"这里可以使用一个 count 变量代替"]],[1799,1799],[1818,1818]]],[1570619966988,["GJX@GJXAIOU",[[1,1819,"，"]],[1819,1819],[1820,1820]]],[1570620106379,["GJX@GJXAIOU",[[1,1820,"然后只要进入一个动物类就 count = "]],[1820,1820],[1841,1841]]],[1570620106979,["GJX@GJXAIOU",[[-1,1839,"= "]],[1841,1841],[1839,1839]]],[1570620115142,["GJX@GJXAIOU",[[1,1839,"+ 1，然后将该值与"]],[1839,1839],[1849,1849]]],[1570620116162,["GJX@GJXAIOU",[[-1,1848,"与"]],[1849,1849],[1848,1848]]],[1570620117937,["GJX@GJXAIOU",[[1,1848,"分装"]],[1848,1848],[1850,1850]]],[1570620118641,["GJX@GJXAIOU",[[-1,1848,"分装"]],[1850,1850],[1848,1848]]],[1570620120492,["GJX@GJXAIOU",[[1,1848,"分装"]],[1848,1848],[1850,1850]]],[1570620121602,["GJX@GJXAIOU",[[-1,1848,"分装"]],[1850,1850],[1848,1848]]],[1570620125164,["GJX@GJXAIOU",[[1,1848,"封装"]],[1848,1848],[1850,1850]]],[1570620136877,["GJX@GJXAIOU",[[1,1850,"到该对象中；一次"]],[1850,1850],[1858,1858]]],[1570620138386,["GJX@GJXAIOU",[[-1,1856,"一次"]],[1858,1858],[1856,1856]]],[1570620141956,["GJX@GJXAIOU",[[1,1856,"依次类图"]],[1856,1856],[1860,1860]]],[1570620143330,["GJX@GJXAIOU",[[-1,1858,"类图"]],[1860,1860],[1858,1858]]],[1570620146179,["GJX@GJXAIOU",[[1,1858,"类推。。。"]],[1858,1858],[1863,1863]]],[1570620195485,["GJX@GJXAIOU",[[-1,1866,"\t"],[1,1867,"\n"]],[1867,1867],[1867,1867]]],[1570620195619,["GJX@GJXAIOU",[[1,1868,"\n"]],[1867,1867],[1868,1868]]],[1570620198094,["GJX@GJXAIOU",[[1,1868,"### 转圈打印矩阵\n【题目】 给定一个整型矩阵matrix，请按照转圈的方式打印它。\n例如： 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n15 16 打印结果为：1，2，3，4，8，12，16，15，14，13，9，\n5，6，7，11， 10\n【要求】 额外空间复杂度为O(1)。"]],[1868,1868],[2020,2020]]],[1570620203027,["GJX@GJXAIOU",[[-1,1948,"\n"]],[1949,1949],[1948,1948]]],[1570620203627,["GJX@GJXAIOU",[[1,1948," "]],[1948,1948],[1949,1949]]],[1570620206475,["GJX@GJXAIOU",[[1,1955,"\n"]],[1955,1955],[1956,1956]]],[1570620211330,["GJX@GJXAIOU",[[-1,1989,"\n"]],[1990,1990],[1989,1989]]],[1570620219674,["GJX@GJXAIOU",[[1,2002,"\n"]],[2002,2002],[2003,2003]]],[1570620230830,["GJX@GJXAIOU",[[1,2002,"示例图片："]],[2002,2002],[2007,2007]]],[1570620231067,["GJX@GJXAIOU",[[1,2008,"\n"]],[2007,2007],[2008,2008]]],[1570625186439,["GJX@GJXAIOU",[[1,2009,"\n"]],[2007,2007],[2008,2008]]],[1570625186542,["GJX@GJXAIOU",[[1,2010,"\n"]],[2008,2008],[2009,2009]]],[1570625186663,["GJX@GJXAIOU",[[1,2011,"\n"]],[2009,2009],[2010,2010]]],[1570625186921,["GJX@GJXAIOU",[[1,2012,"\n"]],[2010,2010],[2011,2011]]],[1570625187815,["GJX@GJXAIOU",[[-1,2012,"\n"]],[2011,2011],[2010,2010]]],[1570625187943,["GJX@GJXAIOU",[[-1,2011,"\n"]],[2010,2010],[2009,2009]]],[1570625188087,["GJX@GJXAIOU",[[-1,2010,"\n"]],[2009,2009],[2008,2008]]],[1570625188190,["GJX@GJXAIOU",[[-1,2009,"\n"]],[2008,2008],[2007,2007]]],[1570625190502,["GJX@GJXAIOU",[[1,2028,"\n"]],[2027,2027],[2028,2028]]],[1570625190615,["GJX@GJXAIOU",[[1,2029,"\n"]],[2028,2028],[2029,2029]]],[1570625190721,["GJX@GJXAIOU",[[1,2030,"\n"]],[2029,2029],[2030,2030]]],[1570625190847,["GJX@GJXAIOU",[[1,2031,"\n"]],[2030,2030],[2031,2031]]],[1570625190970,["GJX@GJXAIOU",[[1,2032,"\n"]],[2031,2031],[2032,2032]]],[1570625191096,["GJX@GJXAIOU",[[1,2033,"\n"]],[2032,2032],[2033,2033]]],[1570625191223,["GJX@GJXAIOU",[[1,2034,"\n"]],[2033,2033],[2034,2034]]],[1570625191351,["GJX@GJXAIOU",[[1,2035,"\n"]],[2034,2034],[2035,2035]]],[1570625191479,["GJX@GJXAIOU",[[1,2036,"\n"]],[2035,2035],[2036,2036]]],[1570625191598,["GJX@GJXAIOU",[[1,2037,"\n"]],[2036,2036],[2037,2037]]],[1570625191726,["GJX@GJXAIOU",[[1,2038,"\n"]],[2037,2037],[2038,2038]]],[1570625191847,["GJX@GJXAIOU",[[1,2039,"\n"]],[2038,2038],[2039,2039]]],[1570625191975,["GJX@GJXAIOU",[[1,2040,"\n"]],[2039,2039],[2040,2040]]],[1570625204923,["GJX@GJXAIOU",[[1,2008,"![无标题]($resource/%E6%97%A0%E6%A0%87%E9%A2%98.png)"]],[2008,2008],[2058,2058]]],[1570625214331,["GJX@GJXAIOU",[[1,2090,"\n"]],[2077,2077],[2078,2078]]],[1570625215812,["GJX@GJXAIOU",[[1,2078,"加法"]],[2078,2078],[2080,2080]]],[1570625221432,["GJX@GJXAIOU",[[-1,2078,"加法"]],[2080,2080],[2078,2078]]],[1570625248479,["GJX@GJXAIOU",[[1,2078,"解法：将整体分圈，一圈一圈作为一个整体；"]],[2078,2078],[2098,2098]]],[1570625323987,["GJX@GJXAIOU",[[1,2098,"一圈"]],[2098,2098],[2100,2100]]],[1570625327135,["GJX@GJXAIOU",[[-1,2097,"；一圈"]],[2100,2100],[2097,2097]]],[1570625327863,["GJX@GJXAIOU",[[1,2097,"；"]],[2097,2097],[2098,2098]]],[1570625331313,["GJX@GJXAIOU",[[1,2078,"\n"]],[2077,2077],[2078,2078]]],[1570625333137,["GJX@GJXAIOU",[[1,2078,"****"]],[2078,2078],[2080,2080]]],[1570625340443,["GJX@GJXAIOU",[[1,2080,"进行宏观分析"]],[2080,2080],[2086,2086]]],[1570625343924,["GJX@GJXAIOU",[[1,2084,"调度"]],[2084,2084],[2086,2086]]],[1570625368129,["GJX@GJXAIOU",[[1,2111,"一圈打印完之后，左上角和右下角分别"]],[2111,2111],[2128,2128]]],[1570625380241,["GJX@GJXAIOU",[[1,2128,"沿着主对角线进行缩颈"]],[2128,2128],[2138,2138]]],[1570625380937,["GJX@GJXAIOU",[[-1,2136,"缩颈"]],[2138,2138],[2136,2136]]],[1570625396192,["GJX@GJXAIOU",[[1,2136,"缩进，每缩进一次就"]],[2136,2136],[2145,2145]]],[1570625444638,["GJX@GJXAIOU",[[1,2145,"遍历一圈，一直到两个坐标撞到一起；"]],[2145,2145],[2162,2162]]],[1570625445991,["GJX@GJXAIOU",[[1,2175,"\n"]],[2162,2162],[2163,2163]]],[1570625475254,["GJX@GJXAIOU",[[1,2165,"### 旋转正方形矩阵\n【题目】 给定一个整型正方形矩阵matrix，请把该矩阵调整成\n顺时针旋转90度的样子。\n【要求】 额外空间复杂度为O(1)。"]],[2165,2165],[2240,2240]]],[1570625478079,["GJX@GJXAIOU",[[-1,2208,"\n"]],[2209,2209],[2208,2208]]],[1570625483174,["GJX@GJXAIOU",[[1,2250,"\n"]],[2239,2239],[2240,2240]]],[1570625483863,["GJX@GJXAIOU",[[1,2251,"\n"]],[2240,2240],[2241,2241]]],[1570625487690,["GJX@GJXAIOU",[[1,2241,"****"]],[2241,2241],[2243,2243]]],[1570625489176,["GJX@GJXAIOU",[[1,2243,"解答："]],[2243,2243],[2246,2246]]],[1570625501412,["GJX@GJXAIOU",[[1,2248," 还是一圈圈的选装"]],[2248,2248],[2257,2257]]],[1570625502087,["GJX@GJXAIOU",[[-1,2255,"选装"]],[2257,2257],[2255,2255]]],[1570625541152,["GJX@GJXAIOU",[[1,2255,"旋转，首先旋转最外面，然后逐层向里，在旋转的时候唯一需要注意的就是元素之间的位置替换；"]],[2255,2255],[2298,2298]]],[1570625555646,["GJX@GJXAIOU",[[1,2301,"反转单向和双向链表\n【题目】 分别实现反转单向链表和反转双向链表的函数。\n【要求】 如果链表长度为N，时间复杂度要求为O(N)，额外空间\n复杂度要求为O(1)"]],[2301,2301],[2380,2380]]],[1570625558830,["GJX@GJXAIOU",[[1,2301,"### "]],[2301,2301],[2314,2314]]],[1570625561345,["GJX@GJXAIOU",[[1,2386,"****"]],[2386,2386],[2388,2388]]],[1570625563153,["GJX@GJXAIOU",[[1,2388,"解答："]],[2388,2388],[2391,2391]]],[1570625564329,["GJX@GJXAIOU",[[1,2399,"\n"]],[2393,2393],[2394,2394]]],[1570625568724,["GJX@GJXAIOU",[[1,2394,"见代码"]],[2394,2394],[2397,2397]]],[1570625569024,["GJX@GJXAIOU",[[1,2403,"\n"]],[2397,2397],[2398,2398]]],[1570625569785,["GJX@GJXAIOU",[[1,2404,"\n"]],[2398,2398],[2399,2399]]],[1570625569975,["GJX@GJXAIOU",[[1,2405,"\n"]],[2399,2399],[2400,2400]]],[1570625570216,["GJX@GJXAIOU",[[1,2406,"\n"]],[2400,2400],[2401,2401]]],[1570625581001,["GJX@GJXAIOU",[[1,2400,"### “之”字形打印矩阵\n【题目】 给定一个矩阵matrix，按照“之”字形的方式打印这\n个矩阵，例如： 1 2 3 4 5 6 7 8 9 10 11 12\n“之”字形打印的结果为：1，2，5，9，6，3，4，7，10，11，\n8，12\n【要求】 额外空间复杂度为O(1)。"]],[2400,2400],[2539,2539]]],[1570625582910,["GJX@GJXAIOU",[[-1,2445,"\n"]],[2446,2446],[2445,2445]]],[1570625587038,["GJX@GJXAIOU",[[-1,2514,"\n"]],[2515,2515],[2514,2514]]],[1570625589377,["GJX@GJXAIOU",[[1,2449,"\n"]],[2449,2449],[2450,2450]]],[1570625592423,["GJX@GJXAIOU",[[1,2545,"\n"]],[2538,2538],[2539,2539]]],[1570625592559,["GJX@GJXAIOU",[[1,2546,"\n"]],[2539,2539],[2540,2540]]],[1570625592678,["GJX@GJXAIOU",[[1,2547,"\n"]],[2540,2540],[2541,2541]]],[1570625592790,["GJX@GJXAIOU",[[1,2548,"\n"]],[2541,2541],[2542,2542]]],[1570625592911,["GJX@GJXAIOU",[[1,2549,"\n"]],[2542,2542],[2543,2543]]],[1570625594415,["GJX@GJXAIOU",[[1,2550,"\n"]],[2543,2543],[2544,2544]]],[1570625594575,["GJX@GJXAIOU",[[1,2551,"\n"]],[2544,2544],[2545,2545]]],[1570625594743,["GJX@GJXAIOU",[[1,2552,"\n"]],[2545,2545],[2546,2546]]],[1570625594902,["GJX@GJXAIOU",[[1,2553,"\n"]],[2546,2546],[2547,2547]]],[1570625595079,["GJX@GJXAIOU",[[1,2554,"\n"]],[2547,2547],[2548,2548]]],[1570625595266,["GJX@GJXAIOU",[[1,2555,"\n"]],[2548,2548],[2549,2549]]],[1570625595441,["GJX@GJXAIOU",[[1,2556,"\n"]],[2549,2549],[2550,2550]]],[1570625595614,["GJX@GJXAIOU",[[1,2557,"\n"]],[2550,2550],[2551,2551]]],[1570625595807,["GJX@GJXAIOU",[[1,2558,"\n"]],[2551,2551],[2552,2552]]],[1570625596238,["GJX@GJXAIOU",[[1,2559,"\n"]],[2552,2552],[2553,2553]]],[1570625616436,["GJX@GJXAIOU",[[1,2540,"****"]],[2540,2540],[2542,2542]]],[1570625618113,["GJX@GJXAIOU",[[1,2542,"解答："]],[2542,2542],[2545,2545]]],[1570625625628,["GJX@GJXAIOU",[[1,2547," 使用连个"]],[2547,2547],[2552,2552]]],[1570625626238,["GJX@GJXAIOU",[[-1,2550,"连个"]],[2552,2552],[2550,2550]]],[1570625639041,["GJX@GJXAIOU",[[1,2550,"两个位置变量，A一直"]],[2550,2550],[2560,2560]]],[1570625639068,["GJX@GJXAIOU",[[1,2558," "]],[2560,2560],[2561,2561]]],[1570625651825,["GJX@GJXAIOU",[[1,2561,"向右走，每次移动一步，方"]],[2561,2561],[2573,2573]]],[1570625652297,["GJX@GJXAIOU",[[-1,2572,"方"]],[2573,2573],[2572,2572]]],[1570625658659,["GJX@GJXAIOU",[[1,2572,"当不能往右移动的是"]],[2572,2572],[2581,2581]]],[1570625659673,["GJX@GJXAIOU",[[-1,2580,"是"]],[2581,2581],[2580,2580]]],[1570625661084,["GJX@GJXAIOU",[[1,2580,"时候老旧"]],[2580,2580],[2584,2584]]],[1570625661918,["GJX@GJXAIOU",[[-1,2582,"老旧"]],[2584,2584],[2582,2582]]],[1570625668729,["GJX@GJXAIOU",[[1,2582,"就往下移动；B一直"]],[2582,2582],[2591,2591]]],[1570625668756,["GJX@GJXAIOU",[[1,2589," "]],[2591,2591],[2592,2592]]],[1570625671222,["GJX@GJXAIOU",[[1,2592,"往下轴"]],[2592,2592],[2595,2595]]],[1570625671926,["GJX@GJXAIOU",[[-1,2594,"轴"]],[2595,2595],[2594,2594]]],[1570625684801,["GJX@GJXAIOU",[[1,2594,"走，每次移动一步，当不能向下已抵用的"]],[2594,2594],[2612,2612]]],[1570625685598,["GJX@GJXAIOU",[[-1,2608,"已抵用的"]],[2612,2612],[2608,2608]]],[1570625689010,["GJX@GJXAIOU",[[1,2608,"移动的饿时候"]],[2608,2608],[2614,2614]]],[1570625690000,["GJX@GJXAIOU",[[-1,2611,"饿时候"]],[2614,2614],[2611,2611]]],[1570625691643,["GJX@GJXAIOU",[[1,2611,"时候，"]],[2611,2611],[2614,2614]]],[1570625692158,["GJX@GJXAIOU",[[-1,2613,"，"]],[2614,2614],[2613,2613]]],[1570625697464,["GJX@GJXAIOU",[[1,2613,"就往右移动；"]],[2613,2613],[2619,2619]]],[1570625753241,["GJX@GJXAIOU",[[1,2619,"A和"]],[2619,2619],[2621,2621]]],[1570625753269,["GJX@GJXAIOU",[[1,2620," "]],[2621,2621],[2622,2622]]],[1570625754956,["GJX@GJXAIOU",[[1,2622,"B"]],[2622,2622],[2623,2623]]],[1570625754984,["GJX@GJXAIOU",[[1,2622," "]],[2623,2623],[2624,2624]]],[1570625786665,["GJX@GJXAIOU",[[1,2624," 每次移动都会形成一条对角线，只要打印对角线上元素即可，因为每次打印"]],[2624,2624],[2658,2658]]],[1570625790691,["GJX@GJXAIOU",[[1,2658,"顺序不容"]],[2658,2658],[2662,2662]]],[1570625791198,["GJX@GJXAIOU",[[-1,2661,"容"]],[2662,2662],[2661,2661]]],[1570625824691,["GJX@GJXAIOU",[[1,2661,"同，因此可以采用一个 Boolean 变量实现正反day"]],[2661,2661],[2689,2689]]],[1570625824718,["GJX@GJXAIOU",[[1,2686," "]],[2689,2689],[2690,2690]]],[1570625825735,["GJX@GJXAIOU",[[-1,2686," day"]],[2690,2690],[2686,2686]]],[1570625827271,["GJX@GJXAIOU",[[1,2686,"答应；"]],[2686,2686],[2689,2689]]],[1570625828015,["GJX@GJXAIOU",[[-1,2686,"答应；"]],[2689,2689],[2686,2686]]],[1570625830416,["GJX@GJXAIOU",[[1,2686,"打印；"]],[2686,2686],[2689,2689]]],[1570625836991,["GJX@GJXAIOU",[[1,2709,"\n"]],[2689,2689],[2690,2690]]],[1570625838476,["GJX@GJXAIOU",[[1,2690,"****"]],[2690,2690],[2692,2692]]],[1570625842896,["GJX@GJXAIOU",[[1,2692,"A、B直接"]],[2692,2692],[2697,2697]]],[1570625842923,["GJX@GJXAIOU",[[1,2695," "]],[2697,2697],[2698,2698]]],[1570625847658,["GJX@GJXAIOU",[[1,2698,"完全解耦"]],[2698,2698],[2702,2702]]],[1570625849094,["GJX@GJXAIOU",[[1,2724,"\n"]],[2704,2704],[2705,2705]]],[1570625851906,["GJX@GJXAIOU",[[1,2705,"示例图片："]],[2705,2705],[2710,2710]]],[1570625852328,["GJX@GJXAIOU",[[1,2730,"\n"]],[2710,2710],[2711,2711]]],[1570626131468,["GJX@GJXAIOU",[[1,2712,"![之字形打印]($resource/%E4%B9%8B%E5%AD%97%E5%BD%A2%E6%89%93%E5%8D%B0.png)"]],[2712,2712],[2782,2782]]],[1570626134287,["GJX@GJXAIOU",[[1,2800,"\n"]],[2782,2782],[2783,2783]]],[1570626144092,["GJX@GJXAIOU",[[1,2539,"****"]],[2539,2539],[2541,2541]]],[1570626148435,["GJX@GJXAIOU",[[1,2541,"当局部位置"]],[2541,2541],[2546,2546]]],[1570626150252,["GJX@GJXAIOU",[[1,2546,"变化和"]],[2546,2546],[2549,2549]]],[1570626150969,["GJX@GJXAIOU",[[-1,2548,"和"]],[2549,2549],[2548,2548]]],[1570626163986,["GJX@GJXAIOU",[[1,2548,"很麻烦的时候，采用宏观角度思考；"]],[2548,2548],[2564,2564]]],[1570626195126,["GJX@GJXAIOU",[[1,2811,"### 在行列都排好序的矩阵中找数\n【题目】 给定一个有N*M的整型矩阵matrix和一个整数K，\nmatrix的每一行和每一 列都是排好序的。实现一个函数，判断K\n是否在matrix中。 例如： 0 1 2 5 2 3 4 7 4\n4 4 8 5 7 7 9 如果K为7，返回true；如果K为6，返\n回false。\n【要求】 时间复杂度为O(N+M)，额外空间复杂度为O(1)"]],[2811,2811],[3001,3001]]],[1570626197709,["GJX@GJXAIOU",[[-1,2860,"\n"]],[2861,2861],[2860,2860]]],[1570626198183,["GJX@GJXAIOU",[[1,2860," "]],[2860,2860],[2861,2861]]],[1570626200165,["GJX@GJXAIOU",[[-1,2859,"， "]],[2861,2861],[2859,2859]]],[1570626201721,["GJX@GJXAIOU",[[1,2859,"，"]],[2859,2859],[2860,2860]]],[1570626203783,["GJX@GJXAIOU",[[1,2866," "]],[2866,2866],[2867,2867]]],[1570626206087,["GJX@GJXAIOU",[[1,2893," "]],[2893,2893],[2894,2894]]],[1570626206725,["GJX@GJXAIOU",[[-1,2894,"\n"]],[2894,2894],[2894,2894]]],[1570626216904,["GJX@GJXAIOU",[[-1,2962,"\n"]],[2963,2963],[2962,2962]]],[1570626219624,["GJX@GJXAIOU",[[1,3017,"\n"]],[3000,3000],[3001,3001]]],[1570626219774,["GJX@GJXAIOU",[[1,3018,"\n"]],[3001,3001],[3002,3002]]],[1570626452807,["GJX@GJXAIOU",[[1,3002,"![有序矩阵中找数]($resource/%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%89%BE%E6%95%B0.png)"]],[3002,3002],[3092,3092]]],[1570626462653,["GJX@GJXAIOU",[[1,3093,"****"]],[3093,3093],[3095,3095]]],[1570626463895,["GJX@GJXAIOU",[[1,3095,"解答："]],[3095,3095],[3098,3098]]],[1570626466897,["GJX@GJXAIOU",[[1,3101,"可以从"]],[3101,3101],[3104,3104]]],[1570626503316,["GJX@GJXAIOU",[[1,3104,"左下角或者右上角开始，这里以右上角为例，炸"]],[3104,3104],[3125,3125]]],[1570626503694,["GJX@GJXAIOU",[[-1,3124,"炸"]],[3125,3125],[3124,3124]]],[1570626510409,["GJX@GJXAIOU",[[1,3124,"在上面数组中找元素4"]],[3124,3124],[3134,3134]]],[1570626510437,["GJX@GJXAIOU",[[1,3133," "]],[3134,3134],[3135,3135]]],[1570626510776,["GJX@GJXAIOU",[[1,3135,"；"]],[3135,3135],[3136,3136]]],[1570626511447,["GJX@GJXAIOU",[[1,3150,"\n"]],[3136,3136],[3137,3137]]],[1570626524464,["GJX@GJXAIOU",[[1,3137,"首先右上角为 6 ，6 》 4，"]],[3137,3137],[3153,3153]]],[1570626525084,["GJX@GJXAIOU",[[-1,3152,"，"]],[3153,3153],[3152,3152]]],[1570626525106,["GJX@GJXAIOU",[[1,3152,","]],[3152,3152],[3153,3153]]],[1570626525526,["GJX@GJXAIOU",[[-1,3149,"》 4,"]],[3153,3153],[3149,3149]]],[1570626526313,["GJX@GJXAIOU",[[1,3149,"."]],[3149,3149],[3150,3150]]],[1570626526957,["GJX@GJXAIOU",[[-1,3148," ."]],[3150,3150],[3148,3148]]],[1570626527447,["GJX@GJXAIOU",[[1,3148,">"]],[3148,3148],[3149,3149]]],[1570626531986,["GJX@GJXAIOU",[[1,3149,"4 ，则 6 的"]],[3149,3149],[3157,3157]]],[1570626533558,["GJX@GJXAIOU",[[-1,3156,"的"]],[3157,3157],[3156,3156]]],[1570626544900,["GJX@GJXAIOU",[[1,3156,"该列下面不用看了，因为都大于6"]],[3156,3156],[3171,3171]]],[1570626544928,["GJX@GJXAIOU",[[1,3170," "]],[3171,3171],[3172,3172]]],[1570626554071,["GJX@GJXAIOU",[[1,3172,"，所有往左走，"]],[3172,3172],[3179,3179]]],[1570626554742,["GJX@GJXAIOU",[[-1,3178,"，"]],[3179,3179],[3178,3178]]],[1570626555103,["GJX@GJXAIOU",[[1,3178,"；"]],[3178,3178],[3179,3179]]],[1570626555302,["GJX@GJXAIOU",[[1,3193,"\n"]],[3179,3179],[3180,3180]]],[1570626557393,["GJX@GJXAIOU",[[1,3180,"然后的"]],[3180,3180],[3183,3183]]],[1570626557901,["GJX@GJXAIOU",[[-1,3182,"的"]],[3183,3183],[3182,3182]]],[1570626559839,["GJX@GJXAIOU",[[1,3182,"是5"]],[3182,3182],[3184,3184]]],[1570626559868,["GJX@GJXAIOU",[[1,3183," "]],[3184,3184],[3185,3185]]],[1570626560303,["GJX@GJXAIOU",[[1,3185,"，"]],[3185,3185],[3186,3186]]],[1570626561492,["GJX@GJXAIOU",[[-1,3185,"，"]],[3186,3186],[3185,3185]]],[1570626562336,["GJX@GJXAIOU",[[1,3185,",5》"]],[3185,3185],[3188,3188]]],[1570626564150,["GJX@GJXAIOU",[[-1,3185,",5》"]],[3188,3188],[3185,3185]]],[1570626580320,["GJX@GJXAIOU",[[1,3185,"，5 > 4，然后同上，往左走"]],[3185,3185],[3200,3200]]],[1570626779663,["GJX@GJXAIOU",[[1,3200,"；"]],[3200,3200],[3201,3201]]],[1570626779953,["GJX@GJXAIOU",[[1,3215,"\n"]],[3201,3201],[3202,3202]]],[1570626782969,["GJX@GJXAIOU",[[1,3202,"然后是 3，"]],[3202,3202],[3208,3208]]],[1570626784524,["GJX@GJXAIOU",[[-1,3207,"，"]],[3208,3208],[3207,3207]]],[1570626784571,["GJX@GJXAIOU",[[1,3207,",3"]],[3207,3207],[3209,3209]]],[1570626786198,["GJX@GJXAIOU",[[-1,3207,",3"]],[3209,3209],[3207,3207]]],[1570626787034,["GJX@GJXAIOU",[[1,3207,", "]],[3207,3207],[3209,3209]]],[1570626788838,["GJX@GJXAIOU",[[-1,3207,", "]],[3209,3209],[3207,3207]]],[1570626791935,["GJX@GJXAIOU",[[1,3207,"，3>"]],[3207,3207],[3210,3210]]],[1570626792344,["GJX@GJXAIOU",[[-1,3209,">"]],[3210,3210],[3209,3209]]],[1570626794232,["GJX@GJXAIOU",[[1,3209," < 4,"]],[3209,3209],[3214,3214]]],[1570626795286,["GJX@GJXAIOU",[[-1,3213,","]],[3214,3214],[3213,3213]]],[1570626805954,["GJX@GJXAIOU",[[1,3213,"，则 3 的左边不用看客"]],[3213,3213],[3225,3225]]],[1570626806398,["GJX@GJXAIOU",[[-1,3224,"客"]],[3225,3225],[3224,3224]]],[1570626811300,["GJX@GJXAIOU",[[1,3224,"了，只能"]],[3224,3224],[3228,3228]]],[1570626815238,["GJX@GJXAIOU",[[-1,3226,"只能"]],[3228,3228],[3226,3226]]],[1570626818286,["GJX@GJXAIOU",[[1,3226,"往下走，"]],[3226,3226],[3230,3230]]],[1570626824317,["GJX@GJXAIOU",[[-1,3229,"，"]],[3230,3230],[3229,3229]]],[1570626824897,["GJX@GJXAIOU",[[1,3229,"；"]],[3229,3229],[3230,3230]]],[1570626825414,["GJX@GJXAIOU",[[1,3244,"\n"]],[3230,3230],[3231,3231]]],[1570626827664,["GJX@GJXAIOU",[[1,3231,"然后是"]],[3231,3231],[3234,3234]]],[1570626829425,["GJX@GJXAIOU",[[1,3234,"。。。。"]],[3234,3234],[3238,3238]]],[1570626829934,["GJX@GJXAIOU",[[1,3252,"\n"]],[3238,3238],[3239,3239]]],[1570626842070,["GJX@GJXAIOU",[[1,3241,"### 打印两个有序链表的公共部分\n【题目】 给定两个有序链表的头指针head1和head2，打印两个\n链表的公共部分。"]],[3241,3241],[3301,3301]]],[1570626844799,["GJX@GJXAIOU",[[-1,3292,"\n"]],[3293,3293],[3292,3292]]],[1570626850754,["GJX@GJXAIOU",[[1,3302,"见代码；"]],[3302,3302],[3306,3306]]],[1570626851054,["GJX@GJXAIOU",[[1,3316,"\n"]],[3306,3306],[3307,3307]]],[1570626859382,["GJX@GJXAIOU",[[1,2829,"\n"]],[2828,2828],[2829,2829]]],[1570626859800,["GJX@GJXAIOU",[[1,2830,"\n"]],[2829,2829],[2830,2830]]],[1570626861831,["GJX@GJXAIOU",[[1,2830,"****"]],[2830,2830],[2832,2832]]],[1570626872897,["GJX@GJXAIOU",[[1,2832,"一般如果数据状况特使"]],[2832,2832],[2842,2842]]],[1570626873501,["GJX@GJXAIOU",[[-1,2840,"特使"]],[2842,2842],[2840,2840]]],[1570626878256,["GJX@GJXAIOU",[[1,2840,"特殊都有特殊件"]],[2840,2840],[2847,2847]]],[1570626878694,["GJX@GJXAIOU",[[-1,2846,"件"]],[2847,2847],[2846,2846]]],[1570626880611,["GJX@GJXAIOU",[[1,2846,"解"]],[2846,2846],[2847,2847]]],[1570626891959,["GJX@GJXAIOU",[[1,2849,"，例如有序等等、、、"]],[2849,2849],[2859,2859]]],[1570626895797,["GJX@GJXAIOU",[[-1,2844,"特殊"]],[2846,2846],[2844,2844]]],[1570626904497,["GJX@GJXAIOU",[[1,2844,"较优"]],[2844,2844],[2846,2846]]],[1570626921624,["GJX@GJXAIOU",[[1,3348,"\n"]],[3338,3338],[3339,3339]]],[1570626921753,["GJX@GJXAIOU",[[1,3349,"\n"]],[3339,3339],[3340,3340]]],[1570626921862,["GJX@GJXAIOU",[[1,3350,"\n"]],[3340,3340],[3341,3341]]],[1570626921968,["GJX@GJXAIOU",[[1,3351,"\n"]],[3341,3341],[3342,3342]]],[1570626922081,["GJX@GJXAIOU",[[1,3352,"\n"]],[3342,3342],[3343,3343]]],[1570626922198,["GJX@GJXAIOU",[[1,3353,"\n"]],[3343,3343],[3344,3344]]],[1570626922329,["GJX@GJXAIOU",[[1,3354,"\n"]],[3344,3344],[3345,3345]]],[1570626927723,["GJX@GJXAIOU",[[1,3345,"## 链表问题"]],[3345,3345],[3352,3352]]],[1570626928038,["GJX@GJXAIOU",[[1,3362,"\n"]],[3352,3352],[3353,3353]]],[1570626928566,["GJX@GJXAIOU",[[1,3363,"\n"]],[3353,3353],[3354,3354]]],[1570626928710,["GJX@GJXAIOU",[[1,3364,"\n"]],[3354,3354],[3355,3355]]],[1570626929799,["GJX@GJXAIOU",[[-1,3364,"\n"]],[3355,3355],[3354,3354]]],[1570626943345,["GJX@GJXAIOU",[[1,3354,"### 判断一个链表是否为回文结构\n【题目】 给定一个链表的头节点head，请判断该链表是否为回\n文结构。 例如： 1->2->1，返回true。 1->2->2->1，返回true。\n15->6->15，返回true。 1->2->3，返回false。\n进阶： 如果链表长度为N，时间复杂度达到O(N)，额外空间复杂\n度达到O(1)。"]],[3354,3354],[3522,3522]]],[1570626951735,["GJX@GJXAIOU",[[1,3482,"\n"]],[3482,3482],[3483,3483]]],[1570626953814,["GJX@GJXAIOU",[[-1,3514,"\n"]],[3515,3515],[3514,3514]]],[1570626956557,["GJX@GJXAIOU",[[-1,3402,"\n"]],[3403,3403],[3402,3402]]],[1570626959532,["GJX@GJXAIOU",[[-1,3445,"\n"]],[3446,3446],[3445,3445]]],[1570626962142,["GJX@GJXAIOU",[[-1,3472,"回"]],[3473,3473],[3472,3472]]],[1570626972799,["GJX@GJXAIOU",[[-1,3408,"如"]],[3409,3409],[3408,3408]]],[1570626976805,["GJX@GJXAIOU",[[1,3471,"回 "]],[3471,3471],[3472,3472]]],[1570626986782,["GJX@GJXAIOU",[[1,3481,"**"],[1,3483,"**"]],[3481,3483],[3481,3487]]],[1570626988205,["GJX@GJXAIOU",[[1,3481,"\n"]],[3480,3480],[3481,3481]]],[1570626988345,["GJX@GJXAIOU",[[1,3482,"\n"]],[3481,3481],[3482,3482]]],[1570626990033,["GJX@GJXAIOU",[[1,3483,"\n"]],[3480,3480],[3481,3481]]],[1570626991051,["GJX@GJXAIOU",[[1,3481,"****"]],[3481,3481],[3483,3483]]],[1570626993055,["GJX@GJXAIOU",[[1,3483,"方法一："]],[3483,3483],[3487,3487]]],[1570626994846,["GJX@GJXAIOU",[[1,3492,"\n"]],[3489,3489],[3490,3490]]],[1570627119183,["GJX@GJXAIOU",[[1,3490,"将链表遍历一遍之后挨个放入栈中；"]],[3490,3490],[3506,3506]]],[1570627120101,["GJX@GJXAIOU",[[-1,3505,"；"]],[3506,3506],[3505,3505]]],[1570627127879,["GJX@GJXAIOU",[[1,3505,"，相当于顺序反了过来；"]],[3505,3505],[3516,3516]]],[1570627128119,["GJX@GJXAIOU",[[1,3519,"\n"]],[3516,3516],[3517,3517]]],[1570627129696,["GJX@GJXAIOU",[[1,3517,"然后"]],[3517,3517],[3519,3519]]],[1570627131831,["GJX@GJXAIOU",[[1,3490,"- "]],[3490,3490],[3492,3492]]],[1570627133474,["GJX@GJXAIOU",[[1,3519,"- "]],[3519,3519],[3521,3521]]],[1570627151824,["GJX@GJXAIOU",[[1,3523,"再遍历链表，并且同时从栈中"]],[3523,3523],[3536,3536]]],[1570627173392,["GJX@GJXAIOU",[[1,3536,"取出元素，两个进行逐个比较，如果有不相等的就不是；"]],[3536,3536],[3561,3561]]],[1570627173689,["GJX@GJXAIOU",[[1,3562,"- \n"]],[3561,3561],[3564,3564]]],[1570627175822,["GJX@GJXAIOU",[[-1,3562,"- "]],[3564,3564],[3562,3562]]],[1570627179378,["GJX@GJXAIOU",[[1,3489," "]],[3489,3489],[3490,3490]]],[1570627195006,["GJX@GJXAIOU",[[1,3354,"\n"]],[3352,3352],[3353,3353]]],[1570627210143,["GJX@GJXAIOU",[[1,3353,"时间复杂度一般没法解决，一般都是有环"]],[3353,3353],[3371,3371]]],[1570627210734,["GJX@GJXAIOU",[[-1,3369,"有环"]],[3371,3371],[3369,3369]]],[1570627218648,["GJX@GJXAIOU",[[1,3369,"优化空间复杂度；"]],[3369,3369],[3377,3377]]],[1570627226518,["GJX@GJXAIOU",[[-1,3514," "]],[3515,3515],[3514,3514]]],[1570627227513,["GJX@GJXAIOU",[[1,3514,"二外"]],[3514,3514],[3516,3516]]],[1570627227990,["GJX@GJXAIOU",[[-1,3514,"二外"]],[3516,3516],[3514,3514]]],[1570627238409,["GJX@GJXAIOU",[[1,3514," 额外空间复杂度为O"]],[3514,3514],[3524,3524]]],[1570627238438,["GJX@GJXAIOU",[[1,3523," "]],[3524,3524],[3525,3525]]],[1570627239026,["GJX@GJXAIOU",[[1,3525,"（）"]],[3525,3525],[3527,3527]]],[1570627245488,["GJX@GJXAIOU",[[1,3526,"N"]],[3526,3526],[3527,3527]]],[1570627250648,["GJX@GJXAIOU",[[1,3528,"，需要栈的长度为"]],[3528,3528],[3536,3536]]],[1570627254285,["GJX@GJXAIOU",[[-1,3535,"为"]],[3536,3536],[3535,3535]]],[1570627259409,["GJX@GJXAIOU",[[1,3535,"等于链表的长度；"]],[3535,3535],[3543,3543]]],[1570627261887,["GJX@GJXAIOU",[[1,3619,"\n"]],[3616,3616],[3617,3617]]],[1570627262734,["GJX@GJXAIOU",[[1,3617,"****"]],[3617,3617],[3619,3619]]],[1570627265033,["GJX@GJXAIOU",[[1,3619,"方法二："]],[3619,3619],[3623,3623]]],[1570627270448,["GJX@GJXAIOU",[[1,3625,"二娃"]],[3625,3625],[3627,3627]]],[1570627271174,["GJX@GJXAIOU",[[-1,3625,"二娃"]],[3627,3627],[3625,3625]]],[1570627282247,["GJX@GJXAIOU",[[1,3625,"额外空间复杂度为） （）"]],[3625,3625],[3637,3637]]],[1570627284621,["GJX@GJXAIOU",[[-1,3633,"） "]],[3635,3635],[3633,3633]]],[1570627286283,["GJX@GJXAIOU",[[1,3633,"O"]],[3633,3633],[3634,3634]]],[1570627286311,["GJX@GJXAIOU",[[1,3633," "]],[3634,3634],[3635,3635]]],[1570627288647,["GJX@GJXAIOU",[[1,3636,"N"]],[3636,3636],[3637,3637]]],[1570627303023,["GJX@GJXAIOU",[[1,3638,"，需要栈空间为链表长度的一般；"]],[3638,3638],[3653,3653]]],[1570627303799,["GJX@GJXAIOU",[[-1,3650,"一般；"]],[3653,3653],[3650,3650]]],[1570627311287,["GJX@GJXAIOU",[[1,3650,"一半；"]],[3650,3650],[3653,3653]]],[1570627311783,["GJX@GJXAIOU",[[1,3656,"\n"]],[3653,3653],[3654,3654]]],[1570627311910,["GJX@GJXAIOU",[[1,3657,"\n"]],[3654,3654],[3655,3655]]],[1570627312525,["GJX@GJXAIOU",[[-1,3657,"\n"]],[3655,3655],[3654,3654]]],[1570627331441,["GJX@GJXAIOU",[[1,3654,"- 将链表遍历一遍，"]],[3654,3654],[3664,3664]]],[1570627333545,["GJX@GJXAIOU",[[1,3664,"但是这是"]],[3664,3664],[3668,3668]]],[1570627334392,["GJX@GJXAIOU",[[-1,3666,"这是"]],[3668,3668],[3666,3666]]],[1570627338761,["GJX@GJXAIOU",[[1,3666,"这次试用快慢"]],[3666,3666],[3672,3672]]],[1570627341831,["GJX@GJXAIOU",[[-1,3668,"试用快慢"]],[3672,3672],[3668,3668]]],[1570627342801,["GJX@GJXAIOU",[[1,3668,"试用"]],[3668,3668],[3670,3670]]],[1570627345446,["GJX@GJXAIOU",[[-1,3666,"这次试用"]],[3670,3670],[3666,3666]]],[1570627348348,["GJX@GJXAIOU",[[1,3666,"这次试用"]],[3666,3666],[3670,3670]]],[1570627349048,["GJX@GJXAIOU",[[-1,3668,"试用"]],[3670,3670],[3668,3668]]],[1570627374911,["GJX@GJXAIOU",[[1,3668,"使用快慢指针，快指针一次走两步，慢指针一次走一步，"]],[3668,3668],[3693,3693]]],[1570627451888,["GJX@GJXAIOU",[[1,3693,"这样快指针走到头，慢指针正好走到"]],[3693,3693],[3709,3709]]],[1570627472656,["GJX@GJXAIOU",[[1,3709,"链表中间；然后将链表后半部分放入栈中；"]],[3709,3709],[3728,3728]]],[1570627473422,["GJX@GJXAIOU",[[1,3729,"- \n"]],[3728,3728],[3731,3731]]],[1570627481184,["GJX@GJXAIOU",[[1,3731,"遍历链表前部"]],[3731,3731],[3737,3737]]],[1570627482333,["GJX@GJXAIOU",[[-1,3736,"部"]],[3737,3737],[3736,3736]]],[1570627506768,["GJX@GJXAIOU",[[1,3736,"半部分，同时从栈中取出元素，两者进行逐个比较，如果不相等就不是；"]],[3736,3736],[3768,3768]]],[1570627562744,["GJX@GJXAIOU",[[1,3816,"同时使用快慢指针，将链表编译"]],[3816,3816],[3830,3830]]],[1570627564645,["GJX@GJXAIOU",[[-1,3826,"链表编译"]],[3830,3830],[3826,3826]]],[1570627571626,["GJX@GJXAIOU",[[1,3826,"链表遍历一遍，保证"]],[3826,3826],[3835,3835]]],[1570627576069,["GJX@GJXAIOU",[[-1,3816,"同时"]],[3818,3818],[3816,3816]]],[1570627580023,["GJX@GJXAIOU",[[1,3816,"同上"]],[3816,3816],[3818,3818]]],[1570627602104,["GJX@GJXAIOU",[[1,3835,"一个走一步另一个走两步，最红"]],[3835,3835],[3849,3849]]],[1570627602565,["GJX@GJXAIOU",[[-1,3848,"红"]],[3849,3849],[3848,3848]]],[1570627622926,["GJX@GJXAIOU",[[1,3848,"终保证快指针走到头的时候，慢指针正好走到链表中间，"]],[3848,3848],[3873,3873]]],[1570627623391,["GJX@GJXAIOU",[[-1,3872,"，"]],[3873,3873],[3872,3872]]],[1570627624144,["GJX@GJXAIOU",[[1,3872,"（）"]],[3872,3872],[3874,3874]]],[1570627631255,["GJX@GJXAIOU",[[1,3873,"中间：奇数个"]],[3873,3873],[3879,3879]]],[1570627665400,["GJX@GJXAIOU",[[1,3879,"节点就是中间那个，偶数个节点则是中间两个靠左边的那个"]],[3879,3879],[3905,3905]]],[1570627690934,["GJX@GJXAIOU",[[1,3914,"\n"]],[3906,3906],[3907,3907]]],[1570627692278,["GJX@GJXAIOU",[[1,3907,"- "]],[3907,3907],[3909,3909]]],[1570627694439,["GJX@GJXAIOU",[[1,3816,"- "]],[3816,3816],[3818,3818]]],[1570627718669,["GJX@GJXAIOU",[[1,3911,"然后将后半部分链表逆序，例如原来为：1 -> 2 __"]],[3911,3911],[3937,3937]]],[1570627720485,["GJX@GJXAIOU",[[-1,3935," __"]],[3937,3937],[3935,3935]]],[1570627725552,["GJX@GJXAIOU",[[1,3935," ->3 ->3"]],[3935,3935],[3943,3943]]],[1570627726252,["GJX@GJXAIOU",[[-1,3942,"3"]],[3943,3943],[3942,3942]]],[1570627736397,["GJX@GJXAIOU",[[1,3942,"2 ->1 ，改变为：1 -》"]],[3942,3942],[3957,3957]]],[1570627737078,["GJX@GJXAIOU",[[-1,3956,"》"]],[3957,3957],[3956,3956]]],[1570627739331,["GJX@GJXAIOU",[[1,3956,"> 2 __"]],[3956,3956],[3961,3961]]],[1570627739955,["GJX@GJXAIOU",[[-1,3961,"_"]],[3961,3961],[3960,3960]]],[1570627741180,["GJX@GJXAIOU",[[-1,3960,"_"]],[3961,3961],[3960,3960]]],[1570627745822,["GJX@GJXAIOU",[[1,3960,"->3 <"]],[3960,3960],[3965,3965]]],[1570627784054,["GJX@GJXAIOU",[[1,3965,"- 2 <- 1，其中 3 指向 null;"]],[3965,3965],[3987,3987]]],[1570627784621,["GJX@GJXAIOU",[[-1,3986,";"]],[3987,3987],[3986,3986]]],[1570627810728,["GJX@GJXAIOU",[[1,3986,"；然后"]],[3986,3986],[3989,3989]]],[1570627812852,["GJX@GJXAIOU",[[-1,3987,"然后"]],[3989,3989],[3987,3987]]],[1570627813397,["GJX@GJXAIOU",[[1,3988,"- \n"]],[3987,3987],[3990,3990]]],[1570627826416,["GJX@GJXAIOU",[[1,3990,"然后从中间分别往两边走"]],[3990,3990],[4001,4001]]],[1570627847485,["GJX@GJXAIOU",[[-1,3992,"从中间分别往两边走"]],[3993,4001],[3992,3992]]],[1570627859513,["GJX@GJXAIOU",[[1,3992,"分别从两头往中间走，只掉"]],[3992,3992],[4004,4004]]],[1570627860245,["GJX@GJXAIOU",[[-1,4002,"只掉"]],[4004,4004],[4002,4002]]],[1570627863879,["GJX@GJXAIOU",[[1,4002,"知道两种"]],[4002,4002],[4006,4006]]],[1570627871585,["GJX@GJXAIOU",[[1,4002,"同时比较每个"]],[4002,4002],[4008,4008]]],[1570627873791,["GJX@GJXAIOU",[[1,4008,"数，"]],[4008,4008],[4010,4010]]],[1570627876348,["GJX@GJXAIOU",[[-1,4010,"知道两种"]],[4014,4014],[4010,4010]]],[1570627886248,["GJX@GJXAIOU",[[1,4010,"直到两者相遇，左后"]],[4010,4010],[4019,4019]]],[1570627887126,["GJX@GJXAIOU",[[-1,4017,"左后"]],[4019,4019],[4017,4017]]],[1570627894299,["GJX@GJXAIOU",[[1,4017,"最后将数据结构回复"]],[4017,4017],[4026,4026]]],[1570627896068,["GJX@GJXAIOU",[[-1,4024,"回复"]],[4026,4026],[4024,4024]]],[1570627897631,["GJX@GJXAIOU",[[1,4024,"回复"]],[4024,4024],[4026,4026]]],[1570627898261,["GJX@GJXAIOU",[[-1,4024,"回复"]],[4026,4026],[4024,4024]]],[1570627901807,["GJX@GJXAIOU",[[1,4024,"恢复大"]],[4024,4024],[4027,4027]]],[1570627903158,["GJX@GJXAIOU",[[-1,4026,"大"]],[4027,4027],[4026,4026]]],[1570627903864,["GJX@GJXAIOU",[[1,4026,"道"]],[4026,4026],[4027,4027]]],[1570627905332,["GJX@GJXAIOU",[[-1,4026,"道"]],[4027,4027],[4026,4026]]],[1570627907691,["GJX@GJXAIOU",[[1,4026,"到原来的"]],[4026,4026],[4030,4030]]],[1570627909885,["GJX@GJXAIOU",[[-1,4029,"的"]],[4030,4030],[4029,4029]]],[1570627912207,["GJX@GJXAIOU",[[1,4029,"地结构；"]],[4029,4029],[4033,4033]]],[1570627914038,["GJX@GJXAIOU",[[1,4034,"- \n"]],[4033,4033],[4036,4036]]],[1570627914741,["GJX@GJXAIOU",[[-1,4034,"- "]],[4036,4036],[4034,4034]]],[1570627915895,["GJX@GJXAIOU",[[1,4042,"\n"]],[4034,4034],[4035,4035]]],[1570627916206,["GJX@GJXAIOU",[[1,4043,"\n"]],[4035,4035],[4036,4036]]],[1570627916333,["GJX@GJXAIOU",[[1,4044,"\n"]],[4036,4036],[4037,4037]]],[1570627916442,["GJX@GJXAIOU",[[1,4045,"\n"]],[4037,4037],[4038,4038]]],[1570627916557,["GJX@GJXAIOU",[[1,4046,"\n"]],[4038,4038],[4039,4039]]],[1570627917057,["GJX@GJXAIOU",[[1,4047,"\n"]],[4039,4039],[4040,4040]]],[1570627917099,["GJX@GJXAIOU",[[1,4048,"\n"]],[4040,4040],[4041,4041]]],[1570627917132,["GJX@GJXAIOU",[[1,4049,"\n"]],[4041,4041],[4042,4042]]],[1570627917190,["GJX@GJXAIOU",[[1,4050,"\n"]],[4042,4042],[4043,4043]]],[1570627917217,["GJX@GJXAIOU",[[1,4051,"\n"]],[4043,4043],[4044,4044]]],[1570627917249,["GJX@GJXAIOU",[[1,4052,"\n"]],[4044,4044],[4045,4045]]],[1570627917709,["GJX@GJXAIOU",[[1,4053,"\n"]],[4045,4045],[4046,4046]]],[1570627917973,["GJX@GJXAIOU",[[1,4054,"\n"]],[4046,4046],[4047,4047]]],[1570627918205,["GJX@GJXAIOU",[[1,4055,"\n"]],[4047,4047],[4048,4048]]],[1570627918424,["GJX@GJXAIOU",[[1,4056,"\n"]],[4048,4048],[4049,4049]]],[1570627924783,["GJX@GJXAIOU",[[1,4037,"### "]],[4037,4037],[4041,4041]]],[1570627960084,["GJX@GJXAIOU",[[1,4041,"将单向链表按某值划分成左边小、中间相等、右边大的形式\n【题目】 给定一个单向链表的头节点head，节点的值类型是整型，再给定一个\n整 数pivot。实现一个调整链表的函数，将链表调整为左部分都是值小于 pivot\n的节点，中间部分都是值等于pivot的节点，右部分都是值大于 pivot的节点。\n除这个要求外，对调整后的节点顺序没有更多的要求。 例如：链表9->0->4->5-\n>1，pivot=3。 调整后链表可以是1->0->4->9->5，也可以是0->1->9->5->4。总\n之，满 足左部分都是小于3的节点，中间部分都是等于3的节点（本例中这个部\n分为空），右部分都是大于3的节点即可。对某部分内部的节点顺序不做 要求。\n进阶： 在原问题的要求之上再增加如下两个要求。\n在左、中、右三个部分的内部也做顺序要求，要求每部分里的节点从左 到右的\n顺序与原链表中节点的先后次序一致。 例如：链表9->0->4->5->1，pivot=3。\n调整后的链表是0->1->9->4->5。 在满足原问题要求的同时，左部分节点从左到\n右为0、1。在原链表中也 是先出现0，后出现1；中间部分在本例中为空，不再\n讨论；右部分节点 从左到右为9、4、5。在原链表中也是先出现9，然后出现4，\n最后出现5。\n如果链表长度为N，时间复杂度请达到O(N)，额外空间复杂度请达到O(1)。"]],[4041,4041],[4629,4629]]],[1570627965847,["GJX@GJXAIOU",[[1,4359,"**"],[1,4361,"**"]],[4359,4361],[4359,4365]]],[1570627967845,["GJX@GJXAIOU",[[1,4359,"\n"]],[4359,4359],[4360,4360]]],[1570627967972,["GJX@GJXAIOU",[[1,4360,"\n"]],[4360,4360],[4361,4361]]],[1570627968111,["GJX@GJXAIOU",[[1,4361,"\n"]],[4361,4361],[4362,4362]]],[1570627968220,["GJX@GJXAIOU",[[1,4362,"\n"]],[4362,4362],[4363,4363]]],[1570627968332,["GJX@GJXAIOU",[[1,4363,"\n"]],[4363,4363],[4364,4364]]],[1570627970972,["GJX@GJXAIOU",[[-1,4105,"\n"]],[4106,4106],[4105,4105]]],[1570627972935,["GJX@GJXAIOU",[[1,4146," "]],[4146,4146],[4147,4147]]],[1570627973428,["GJX@GJXAIOU",[[-1,4147,"\n"]],[4147,4147],[4147,4147]]],[1570627976614,["GJX@GJXAIOU",[[-1,4229,"\n"]],[4229,4229],[4229,4229]]],[1570627979053,["GJX@GJXAIOU",[[-1,4282,"\n"]],[4282,4282],[4282,4282]]],[1570627980445,["GJX@GJXAIOU",[[-1,4318,"\n"]],[4318,4318],[4318,4318]]],[1570627982328,["GJX@GJXAIOU",[[-1,4423,"\n"]],[4423,4423],[4423,4423]]],[1570627983246,["GJX@GJXAIOU",[[-1,4468,"\n"]],[4468,4468],[4468,4468]]],[1570627984836,["GJX@GJXAIOU",[[-1,4510,"\n"]],[4510,4510],[4510,4510]]],[1570627985853,["GJX@GJXAIOU",[[-1,4547,"\n"]],[4547,4547],[4547,4547]]],[1570627988476,["GJX@GJXAIOU",[[-1,4563,"4"]],[4563,4563],[4563,4563]]],[1570627996759,["GJX@GJXAIOU",[[1,4563,"4"]],[4563,4563],[4564,4564]]],[1570627999412,["GJX@GJXAIOU",[[-1,4585,"\n"]],[4585,4585],[4585,4585]]],[1570628040868,["GJX@GJXAIOU",[[1,4356,"****"]],[4356,4356],[4358,4358]]],[1570628043035,["GJX@GJXAIOU",[[1,4358,"解法"]],[4358,4358],[4360,4360]]],[1570628043707,["GJX@GJXAIOU",[[-1,4358,"解法"]],[4360,4360],[4358,4358]]],[1570628045081,["GJX@GJXAIOU",[[1,4358,"解答"]],[4358,4358],[4360,4360]]],[1570628046877,["GJX@GJXAIOU",[[1,4362,"："]],[4362,4362],[4363,4363]]],[1570628047101,["GJX@GJXAIOU",[[1,4367,"\n"]],[4363,4363],[4364,4364]]],[1570628051769,["GJX@GJXAIOU",[[1,4364,"可以借用荷兰"]],[4364,4364],[4370,4370]]],[1570628065302,["GJX@GJXAIOU",[[1,4370,"国旗问题解法，空间复杂度是 O()"]],[4370,4370],[4387,4387]]],[1570628066541,["GJX@GJXAIOU",[[1,4386,"N"]],[4386,4386],[4387,4387]]],[1570628067966,["GJX@GJXAIOU",[[1,4388,","]],[4388,4388],[4389,4389]]],[1570628069147,["GJX@GJXAIOU",[[-1,4388,","]],[4389,4389],[4388,4388]]],[1570628102423,["GJX@GJXAIOU",[[1,4388,"，同时不能保证稳定性；"]],[4388,4388],[4399,4399]]],[1570628102956,["GJX@GJXAIOU",[[1,4403,"\n"]],[4399,4399],[4400,4400]]],[1570628153651,["GJX@GJXAIOU",[[1,4400,"具体解法：将链表中的所有节点都放入数组猴子那个"]],[4400,4400],[4423,4423]]],[1570628154845,["GJX@GJXAIOU",[[-1,4419,"猴子那个"]],[4423,4423],[4419,4419]]],[1570628165818,["GJX@GJXAIOU",[[1,4419,"中，在数组中将所有的极点"]],[4419,4419],[4431,4431]]],[1570628166617,["GJX@GJXAIOU",[[-1,4429,"极点"]],[4431,4431],[4429,4429]]],[1570628171361,["GJX@GJXAIOU",[[1,4429,"节点整理好之后，"]],[4429,4429],[4437,4437]]],[1570628175647,["GJX@GJXAIOU",[[1,4437,"然后再宠幸"]],[4437,4437],[4442,4442]]],[1570628176438,["GJX@GJXAIOU",[[-1,4440,"宠幸"]],[4442,4442],[4440,4440]]],[1570628200217,["GJX@GJXAIOU",[[1,4440,"重新串起来形成链表；这里需要生一个"]],[4440,4440],[4457,4457]]],[1570628202078,["GJX@GJXAIOU",[[-1,4454,"生一个"]],[4457,4457],[4454,4454]]],[1570628218431,["GJX@GJXAIOU",[[1,4454,"生成一个辅助数组，里面装的是节点类型；"]],[4454,4454],[4473,4473]]],[1570628223364,["GJX@GJXAIOU",[[1,4748,"****"]],[4748,4748],[4750,4750]]],[1570628226494,["GJX@GJXAIOU",[[1,4750,"解答："]],[4750,4750],[4753,4753]]],[1570628230661,["GJX@GJXAIOU",[[1,4773,"\n"]],[4755,4755],[4756,4756]]],[1570628231726,["GJX@GJXAIOU",[[1,4756,"- "]],[4756,4756],[4758,4758]]],[1570628234535,["GJX@GJXAIOU",[[1,4758,"首先设立之"]],[4758,4758],[4763,4763]]],[1570628235900,["GJX@GJXAIOU",[[-1,4762,"之"]],[4763,4763],[4762,4762]]],[1570628255112,["GJX@GJXAIOU",[[1,4762,"三个 Node 类型的变量；le"]],[4762,4762],[4778,4778]]],[1570628256685,["GJX@GJXAIOU",[[-1,4773,"变量；le"]],[4778,4778],[4773,4773]]],[1570628261631,["GJX@GJXAIOU",[[1,4773,"变量：less = nll"]],[4773,4773],[4786,4786]]],[1570628262813,["GJX@GJXAIOU",[[-1,4784,"ll"]],[4786,4786],[4784,4784]]],[1570628271623,["GJX@GJXAIOU",[[1,4784,"ull;equal = null;"]],[4784,4784],[4801,4801]]],[1570628273364,["GJX@GJXAIOU",[[-1,4800,";"]],[4801,4801],[4800,4800]]],[1570628273675,["GJX@GJXAIOU",[[1,4800,"；"]],[4800,4800],[4801,4801]]],[1570628276724,["GJX@GJXAIOU",[[-1,4787,";"]],[4788,4788],[4787,4787]]],[1570628277199,["GJX@GJXAIOU",[[1,4787,"；"]],[4787,4787],[4788,4788]]],[1570628279959,["GJX@GJXAIOU",[[1,4800," "]],[4800,4800],[4801,4801]]],[1570628281132,["GJX@GJXAIOU",[[-1,4800," "]],[4801,4801],[4800,4800]]],[1570628288161,["GJX@GJXAIOU",[[1,4801,"more = null；"]],[4801,4801],[4813,4813]]],[1570628297085,["GJX@GJXAIOU",[[1,4814,"- \n"]],[4813,4813],[4816,4816]]],[1570628306986,["GJX@GJXAIOU",[[1,4816,"遍历整个链表，把第一个 《 "]],[4816,4816],[4830,4830]]],[1570628307620,["GJX@GJXAIOU",[[-1,4828,"《 "]],[4830,4830],[4828,4828]]],[1570628312247,["GJX@GJXAIOU",[[1,4828,"< num()"]],[4828,4828],[4835,4835]]],[1570628315879,["GJX@GJXAIOU",[[1,4834,"设置的值"]],[4834,4834],[4838,4838]]],[1570628320002,["GJX@GJXAIOU",[[1,4839," de jiedian"]],[4839,4839],[4850,4850]]],[1570628323421,["GJX@GJXAIOU",[[-1,4840,"de jiedian"]],[4850,4850],[4840,4840]]],[1570628326892,["GJX@GJXAIOU",[[-1,4823,"把"]],[4824,4824],[4823,4823]]],[1570628328756,["GJX@GJXAIOU",[[1,4823,"找到"]],[4823,4823],[4825,4825]]],[1570628331896,["GJX@GJXAIOU",[[1,4828,"值"]],[4828,4828],[4829,4829]]],[1570628340176,["GJX@GJXAIOU",[[1,4841,"的节点，然后让"]],[4841,4841],[4848,4848]]],[1570628340447,["GJX@GJXAIOU",[[1,4849," "]],[4848,4848],[4849,4849]]],[1570628342184,["GJX@GJXAIOU",[[1,4849,"Less"]],[4849,4849],[4853,4853]]],[1570628342614,["GJX@GJXAIOU",[[1,4854," "]],[4853,4853],[4854,4854]]],[1570628343823,["GJX@GJXAIOU",[[1,4854,"xhi"]],[4854,4854],[4857,4857]]],[1570628345636,["GJX@GJXAIOU",[[-1,4849,"Lessxhi "]],[4857,4857],[4849,4849]]],[1570628346113,["GJX@GJXAIOU",[[1,4849,"e"]],[4849,4849],[4850,4850]]],[1570628346736,["GJX@GJXAIOU",[[-1,4849,"e"]],[4850,4850],[4849,4849]]],[1570628347560,["GJX@GJXAIOU",[[1,4849,"less"]],[4849,4849],[4853,4853]]],[1570628347839,["GJX@GJXAIOU",[[1,4854," "]],[4853,4853],[4854,4854]]],[1570628351863,["GJX@GJXAIOU",[[1,4854,"指向该结点"]],[4854,4854],[4859,4859]]],[1570628373314,["GJX@GJXAIOU",[[1,4859,"，同理找到另外两个变量执行那个的"]],[4859,4859],[4875,4875]]],[1570628374175,["GJX@GJXAIOU",[[-1,4870,"执行那个的"]],[4875,4875],[4870,4870]]],[1570628400488,["GJX@GJXAIOU",[[1,4870,"指向的节点，如果遍历结束没有则还是指向"]],[4870,4870],[4889,4889]]],[1570628400727,["GJX@GJXAIOU",[[1,4890," "]],[4889,4889],[4890,4890]]],[1570628402022,["GJX@GJXAIOU",[[1,4890,"null;"]],[4890,4890],[4895,4895]]],[1570628402628,["GJX@GJXAIOU",[[-1,4894,";"]],[4895,4895],[4894,4894]]],[1570628402974,["GJX@GJXAIOU",[[1,4894,"；"]],[4894,4894],[4895,4895]]],[1570628410143,["GJX@GJXAIOU",[[1,4895,"\n"]],[4895,4895],[4896,4896]]],[1570628411846,["GJX@GJXAIOU",[[1,4896,"="]],[4896,4896],[4897,4897]]],[1570628412375,["GJX@GJXAIOU",[[-1,4896,"="]],[4897,4897],[4896,4896]]],[1570628413318,["GJX@GJXAIOU",[[1,4896,"-"]],[4896,4896],[4897,4897]]],[1570628413511,["GJX@GJXAIOU",[[1,4898," "]],[4897,4897],[4898,4898]]],[1570628414644,["GJX@GJXAIOU",[[-1,4898," "]],[4898,4898],[4897,4897]]],[1570628415958,["GJX@GJXAIOU",[[1,4898," "]],[4897,4897],[4898,4898]]],[1570628458894,["GJX@GJXAIOU",[[1,4898,"再遍历一遍链表，将所有小于、等于、大于该值的节点分别追加到上面确定的第一个节点后面，"]],[4898,4898],[4940,4940]]],[1570628459740,["GJX@GJXAIOU",[[-1,4939,"，"]],[4940,4940],[4939,4939]]],[1570628460310,["GJX@GJXAIOU",[[1,4939,"；"]],[4939,4939],[4940,4940]]],[1570628461047,["GJX@GJXAIOU",[[1,4940,"\n"]],[4940,4940],[4941,4941]]],[1570628464102,["GJX@GJXAIOU",[[1,4941,"-"]],[4941,4941],[4942,4942]]],[1570628464270,["GJX@GJXAIOU",[[1,4943," "]],[4942,4942],[4943,4943]]],[1570628471314,["GJX@GJXAIOU",[[1,4943,"最后将三个部分连接"]],[4943,4943],[4952,4952]]],[1570628474970,["GJX@GJXAIOU",[[1,4953,"一起形成"]],[4953,4953],[4957,4957]]],[1570628480917,["GJX@GJXAIOU",[[-1,4955,"形成"]],[4957,4957],[4955,4955]]],[1570628485614,["GJX@GJXAIOU",[[1,4955,"形成结果；（）"]],[4955,4955],[4962,4962]]],[1570628491080,["GJX@GJXAIOU",[[1,4961,"注意某个"]],[4961,4961],[4965,4965]]],[1570628491788,["GJX@GJXAIOU",[[-1,4964,"个"]],[4965,4965],[4964,4964]]],[1570628494754,["GJX@GJXAIOU",[[1,4964,"些链可以"]],[4964,4964],[4968,4968]]],[1570628495518,["GJX@GJXAIOU",[[-1,4966,"可以"]],[4968,4968],[4966,4966]]],[1570628497803,["GJX@GJXAIOU",[[1,4966,"可能没有纸"]],[4966,4966],[4971,4971]]],[1570628498412,["GJX@GJXAIOU",[[-1,4970,"纸"]],[4971,4971],[4970,4970]]],[1570628499348,["GJX@GJXAIOU",[[1,4970,"值"]],[4970,4970],[4971,4971]]],[1570630480800,[null,[[-1,4952," "],[1,4953,"在"],[1,4972," "]],[4952,4952],[4973,4973]]],[1570630480800,[null,[[1,4952," "],[-1,4952,"在"],[-1,4972," "]],[4973,4973],[4952,4952]]],[1570630436643,["GJX@GJXAIOU",[[1,4977,"### 复制含有随机指针节点的链表\n【题目】 一种特殊的链表节点类描述如下：\npublic class Node { public int value; public Node next; public\nNode rand;\npublic Node(int data) { this.value = data; }\n}\nNode类中的value是节点值，next指针和正常单链表中next指针的意义\n一 样，都指向下一个节点，rand指针是Node类中新增的指针，这个指\n针可 能指向链表中的任意一个节点，也可能指向null。 给定一个由\nNode节点类型组成的无环单链表的头节点head，请实现一个 函数完成\n这个链表中所有结构的复制，并返回复制的新链表的头节点。 进阶：\n不使用额外的数据结构，只用有限几个变量，且在时间复杂度为 O(N)\n内完成原问题要实现的函数。"]],[4977,4977],[5362,5362]]],[1570630442004,["GJX@GJXAIOU",[[-1,5176,"\n"]],[5176,5176],[5176,5176]]],[1570630442986,["GJX@GJXAIOU",[[-1,5211,"\n"]],[5211,5211],[5211,5211]]],[1570630443860,["GJX@GJXAIOU",[[-1,5244,"\n"]],[5244,5244],[5244,5244]]],[1570630445314,["GJX@GJXAIOU",[[-1,5279,"\n"]],[5279,5279],[5279,5279]]],[1570630447267,["GJX@GJXAIOU",[[1,5307,"\n"]],[5307,5307],[5308,5308]]],[1570630450595,["GJX@GJXAIOU",[[-1,5345,"\n"]],[5345,5345],[5345,5345]]],[1570630452125,["GJX@GJXAIOU",[[-1,5311,"\n"]],[5311,5311],[5311,5311]]],[1570630454659,["GJX@GJXAIOU",[[1,5308,"**"],[1,5310,"**"]],[5308,5310],[5308,5314]]],[1570630456388,["GJX@GJXAIOU",[[1,5375,"\n"]],[5362,5362],[5363,5363]]],[1570630540804,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5361,"\n"]],[4952,4952],[5362,5362]]],[1570630540804,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5361,"\n"]],[5362,5362],[4952,4952]]],[1570630500658,["GJX@GJXAIOU",[[1,5308,"\n"]],[5308,5308],[5309,5309]]],[1570630500797,["GJX@GJXAIOU",[[1,5309,"\n"]],[5309,5309],[5310,5310]]],[1570630500907,["GJX@GJXAIOU",[[1,5310,"\n"]],[5310,5310],[5311,5311]]],[1570630501002,["GJX@GJXAIOU",[[1,5311,"\n"]],[5311,5311],[5312,5312]]],[1570630501114,["GJX@GJXAIOU",[[1,5312,"\n"]],[5312,5312],[5313,5313]]],[1570630503755,["GJX@GJXAIOU",[[1,5309,"****"]],[5309,5309],[5311,5311]]],[1570630505798,["GJX@GJXAIOU",[[1,5311,"解法："]],[5311,5311],[5314,5314]]],[1570630507174,["GJX@GJXAIOU",[[1,5320,"\n"]],[5316,5316],[5317,5317]]],[1570630510567,["GJX@GJXAIOU",[[1,5317,"首先准备一个"]],[5317,5317],[5323,5323]]],[1570630513408,["GJX@GJXAIOU",[[1,5317,"- "]],[5317,5317],[5319,5319]]],[1570630516096,["GJX@GJXAIOU",[[1,5325," map "]],[5325,5325],[5330,5330]]],[1570630518603,["GJX@GJXAIOU",[[-1,5329," "]],[5330,5330],[5329,5329]]],[1570630520653,["GJX@GJXAIOU",[[1,5329,"<.>"]],[5329,5329],[5332,5332]]],[1570630521731,["GJX@GJXAIOU",[[-1,5330,"."]],[5331,5331],[5330,5330]]],[1570630523567,["GJX@GJXAIOU",[[1,5330,"Nog"]],[5330,5330],[5333,5333]]],[1570630524051,["GJX@GJXAIOU",[[-1,5332,"g"]],[5333,5333],[5332,5332]]],[1570630526357,["GJX@GJXAIOU",[[1,5332,"de, node"]],[5332,5332],[5340,5340]]],[1570630527828,["GJX@GJXAIOU",[[-1,5336,"node"]],[5340,5340],[5336,5336]]],[1570630528893,["GJX@GJXAIOU",[[1,5336,"Node"]],[5336,5336],[5340,5340]]],[1570630531540,["GJX@GJXAIOU",[[1,5341,";"]],[5341,5341],[5342,5342]]],[1570630532267,["GJX@GJXAIOU",[[-1,5341,";"]],[5342,5342],[5341,5341]]],[1570630532583,["GJX@GJXAIOU",[[1,5341,"；"]],[5341,5341],[5342,5342]]],[1570630532803,["GJX@GJXAIOU",[[1,5343,"- \n"]],[5342,5342],[5345,5345]]],[1570630600804,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5402,"\n"]],[4952,4952],[5403,5403]]],[1570630600804,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5402,"\n"]],[5403,5403],[4952,4952]]],[1570630546781,["GJX@GJXAIOU",[[1,5309,"\n"]],[5308,5308],[5309,5309]]],[1570630550909,["GJX@GJXAIOU",[[1,5309,"示例图片："]],[5309,5309],[5314,5314]]],[1570630551109,["GJX@GJXAIOU",[[1,5315,"\n"]],[5314,5314],[5315,5315]]],[1570630900809,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5409,"\n"]],[4952,4952],[5410,5410]]],[1570630900809,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5409,"\n"]],[5410,5410],[4952,4952]]],[1570630854899,["GJX@GJXAIOU",[[1,5315,"![复制随机指针节点的链表]($resource/%E5%A4%8D%E5%88%B6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E8%8A%82%E7%82%B9%E7%9A%84%E9%93%BE%E8%A1%A8.png)"]],[5315,5315],[5445,5445]]],[1570630866318,["GJX@GJXAIOU",[[1,5481,"拷贝节点1"]],[5481,5481],[5486,5486]]],[1570630866352,["GJX@GJXAIOU",[[1,5485," "]],[5486,5486],[5487,5487]]],[1570630872309,["GJX@GJXAIOU",[[1,5487,"，得到节点。"]],[5487,5487],[5493,5493]]],[1570630872893,["GJX@GJXAIOU",[[-1,5492,"。"]],[5493,5493],[5492,5492]]],[1570630873614,["GJX@GJXAIOU",[[1,5492,"1"]],[5492,5492],[5493,5493]]],[1570630873646,["GJX@GJXAIOU",[[1,5492," "]],[5493,5493],[5494,5494]]],[1570630874488,["GJX@GJXAIOU",[[1,5494,"‘"]],[5494,5494],[5495,5495]]],[1570630875339,["GJX@GJXAIOU",[[-1,5494,"‘"]],[5495,5495],[5494,5494]]],[1570630876014,["GJX@GJXAIOU",[[1,5494,"'"]],[5494,5494],[5495,5495]]],[1570630876047,["GJX@GJXAIOU",[[-1,5494,"'"],[1,5495,"’"]],[5495,5495],[5495,5495]]],[1570630876965,["GJX@GJXAIOU",[[1,5495,","]],[5495,5495],[5496,5496]]],[1570630877938,["GJX@GJXAIOU",[[-1,5495,","]],[5496,5496],[5495,5495]]],[1570630883966,["GJX@GJXAIOU",[[1,5495,"，然后 "]],[5495,5495],[5499,5499]]],[1570630884963,["GJX@GJXAIOU",[[-1,5498," "]],[5499,5499],[5498,5498]]],[1570630890677,["GJX@GJXAIOU",[[1,5498,"将节点 1，1'"]],[5498,5498],[5506,5506]]],[1570630890710,["GJX@GJXAIOU",[[-1,5505,"'"],[1,5506,"’"]],[5506,5506],[5506,5506]]],[1570630900550,["GJX@GJXAIOU",[[1,5506," 以 key 和 value"]],[5506,5506],[5520,5520]]],[1570630960812,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5577,"\n"]],[4952,4952],[5578,5578]]],[1570630960812,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5577,"\n"]],[5578,5578],[4952,4952]]],[1570630910752,["GJX@GJXAIOU",[[1,5520," 的形式存放在 Map中"]],[5520,5520],[5532,5532]]],[1570630910784,["GJX@GJXAIOU",[[1,5531," "]],[5532,5532],[5533,5533]]],[1570630911006,["GJX@GJXAIOU",[[1,5533,"；"]],[5533,5533],[5534,5534]]],[1570630919275,["GJX@GJXAIOU",[[1,5535,"- \n"]],[5534,5534],[5537,5537]]],[1570630931443,["GJX@GJXAIOU",[[1,5537,"通过 1 的 next() 找到节点2"]],[5537,5537],[5556,5556]]],[1570630931476,["GJX@GJXAIOU",[[1,5555," "]],[5556,5556],[5557,5557]]],[1570630941704,["GJX@GJXAIOU",[[1,5557,"，然后拷贝节点 2得到"]],[5557,5557],[5568,5568]]],[1570630941738,["GJX@GJXAIOU",[[1,5566," "]],[5568,5568],[5569,5569]]],[1570630944028,["GJX@GJXAIOU",[[1,5569,"节点2"]],[5569,5569],[5572,5572]]],[1570630944061,["GJX@GJXAIOU",[[1,5571," "]],[5572,5572],[5573,5573]]],[1570630944701,["GJX@GJXAIOU",[[1,5573," '"]],[5573,5573],[5575,5575]]],[1570630944734,["GJX@GJXAIOU",[[-1,5574,"'"],[1,5575,"‘"]],[5575,5575],[5575,5575]]],[1570630945377,["GJX@GJXAIOU",[[-1,5574,"‘"]],[5575,5575],[5574,5574]]],[1570630945846,["GJX@GJXAIOU",[[1,5574,"'"]],[5574,5574],[5575,5575]]],[1570630945879,["GJX@GJXAIOU",[[-1,5574,"'"],[1,5575,"‘"]],[5575,5575],[5575,5575]]],[1570630946377,["GJX@GJXAIOU",[[-1,5573," ‘"]],[5575,5575],[5573,5573]]],[1570630947060,["GJX@GJXAIOU",[[1,5573,"'"]],[5573,5573],[5574,5574]]],[1570630947092,["GJX@GJXAIOU",[[-1,5573,"'"],[1,5574,"’"]],[5574,5574],[5574,5574]]],[1570630947437,["GJX@GJXAIOU",[[-1,5573,"’"]],[5574,5574],[5573,5573]]],[1570630948143,["GJX@GJXAIOU",[[1,5573,";"]],[5573,5573],[5574,5574]]],[1570630948658,["GJX@GJXAIOU",[[-1,5573,";"]],[5574,5574],[5573,5573]]],[1570630949092,["GJX@GJXAIOU",[[1,5573,"'"]],[5573,5573],[5574,5574]]],[1570630949126,["GJX@GJXAIOU",[[-1,5573,"'"],[1,5574,"’"]],[5574,5574],[5574,5574]]],[1570630958212,["GJX@GJXAIOU",[[1,5574,"，同样将节点2"]],[5574,5574],[5581,5581]]],[1570630958244,["GJX@GJXAIOU",[[1,5580," "]],[5581,5581],[5582,5582]]],[1570630960212,["GJX@GJXAIOU",[[1,5582," 和 2"]],[5582,5582],[5586,5586]]],[1570631020814,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5643,"\n"]],[4952,4952],[5644,5644]]],[1570631020814,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5643,"\n"]],[5644,5644],[4952,4952]]],[1570630960846,["GJX@GJXAIOU",[[1,5586,"'"]],[5586,5586],[5587,5587]]],[1570630960879,["GJX@GJXAIOU",[[-1,5586,"'"],[1,5587,"’"]],[5587,5587],[5587,5587]]],[1570630967143,["GJX@GJXAIOU",[[1,5587,"存放在 Map中"]],[5587,5587],[5595,5595]]],[1570630967176,["GJX@GJXAIOU",[[1,5594," "]],[5595,5595],[5596,5596]]],[1570630967276,["GJX@GJXAIOU",[[1,5596,"；"]],[5596,5596],[5597,5597]]],[1570630969636,["GJX@GJXAIOU",[[1,5587," "]],[5587,5587],[5588,5588]]],[1570630987721,["GJX@GJXAIOU",[[1,5598,"同样以此类推，京"]],[5598,5598],[5606,5606]]],[1570630989163,["GJX@GJXAIOU",[[-1,5605,"京"]],[5606,5606],[5605,5605]]],[1570631003117,["GJX@GJXAIOU",[[1,5605,"将所有节点及其拷贝节点存放在 AMP"]],[5605,5605],[5623,5623]]],[1570631004060,["GJX@GJXAIOU",[[-1,5620,"AMP"]],[5623,5623],[5620,5620]]],[1570631005462,["GJX@GJXAIOU",[[1,5620,"map中"]],[5620,5620],[5624,5624]]],[1570631005494,["GJX@GJXAIOU",[[1,5623," "]],[5624,5624],[5625,5625]]],[1570631005686,["GJX@GJXAIOU",[[1,5625,"；"]],[5625,5625],[5626,5626]]],[1570631080816,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5683,"\n"]],[4952,4952],[5684,5684]]],[1570631080816,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5683,"\n"]],[5684,5684],[4952,4952]]],[1570631023651,["GJX@GJXAIOU",[[1,5627,"- \n"]],[5626,5626],[5629,5629]]],[1570631042884,["GJX@GJXAIOU",[[1,5629,"在 map 中通过 查询节点1"]],[5629,5629],[5644,5644]]],[1570631042917,["GJX@GJXAIOU",[[1,5643," "]],[5644,5644],[5645,5645]]],[1570631045557,["GJX@GJXAIOU",[[1,5645," 的value"]],[5645,5645],[5652,5652]]],[1570631045590,["GJX@GJXAIOU",[[1,5647," "]],[5652,5652],[5653,5653]]],[1570631047309,["GJX@GJXAIOU",[[1,5653,"得到"]],[5653,5653],[5655,5655]]],[1570631047342,["GJX@GJXAIOU",[[1,5653," "]],[5655,5655],[5656,5656]]],[1570631062348,["GJX@GJXAIOU",[[1,5656," 节点 1’，然后通过节点1"]],[5656,5656],[5670,5670]]],[1570631062379,["GJX@GJXAIOU",[[1,5669," "]],[5670,5670],[5671,5671]]],[1570631064270,["GJX@GJXAIOU",[[1,5671," 的next"]],[5671,5671],[5677,5677]]],[1570631064302,["GJX@GJXAIOU",[[1,5673," "]],[5677,5677],[5678,5678]]],[1570631068069,["GJX@GJXAIOU",[[1,5678,"找到哦啊"]],[5678,5678],[5682,5682]]],[1570631068102,["GJX@GJXAIOU",[[1,5678," "]],[5682,5682],[5683,5683]]],[1570631068714,["GJX@GJXAIOU",[[-1,5681,"哦啊"]],[5683,5683],[5681,5681]]],[1570631069677,["GJX@GJXAIOU",[[1,5681," 2"]],[5681,5681],[5683,5683]]],[1570631072058,["GJX@GJXAIOU",[[-1,5682,"2"]],[5683,5683],[5682,5682]]],[1570631074788,["GJX@GJXAIOU",[[1,5682,"节点1"]],[5682,5682],[5685,5685]]],[1570631074822,["GJX@GJXAIOU",[[1,5684," "]],[5685,5685],[5686,5686]]],[1570631075517,["GJX@GJXAIOU",[[-1,5685,"1"]],[5686,5686],[5685,5685]]],[1570631080653,["GJX@GJXAIOU",[[1,5685,"2，同样"]],[5685,5685],[5689,5689]]],[1570631140821,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5746,"\n"]],[4952,4952],[5747,5747]]],[1570631140821,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5746,"\n"]],[5747,5747],[4952,4952]]],[1570631085852,["GJX@GJXAIOU",[[1,5689,"根据节点2"]],[5689,5689],[5694,5694]]],[1570631085885,["GJX@GJXAIOU",[[1,5693," "]],[5694,5694],[5695,5695]]],[1570631093476,["GJX@GJXAIOU",[[1,5695," 找到其复制节点 2‘"]],[5695,5695],[5706,5706]]],[1570631094290,["GJX@GJXAIOU",[[-1,5705,"‘"]],[5706,5706],[5705,5705]]],[1570631094822,["GJX@GJXAIOU",[[1,5705,"'"]],[5705,5705],[5706,5706]]],[1570631094855,["GJX@GJXAIOU",[[-1,5705,"'"],[1,5706,"’"]],[5706,5706],[5706,5706]]],[1570631110110,["GJX@GJXAIOU",[[1,5706,",则将 节点 1’指向 2‘"]],[5706,5706],[5720,5720]]],[1570631111601,["GJX@GJXAIOU",[[-1,5719,"‘"]],[5720,5720],[5719,5719]]],[1570631113765,["GJX@GJXAIOU",[[1,5719,"'"]],[5719,5719],[5720,5720]]],[1570631113797,["GJX@GJXAIOU",[[-1,5719,"'"],[1,5720,"’"]],[5720,5720],[5720,5720]]],[1570631124670,["GJX@GJXAIOU",[[1,5720,"，同样方法可以找到哦啊"]],[5720,5720],[5731,5731]]],[1570631128273,["GJX@GJXAIOU",[[-1,5727,"找到哦啊"]],[5731,5731],[5727,5727]]],[1570631138061,["GJX@GJXAIOU",[[1,5727,"通过 "]],[5727,5727],[5730,5730]]],[1570631139451,["GJX@GJXAIOU",[[-1,5729," "]],[5730,5730],[5729,5729]]],[1570631140739,["GJX@GJXAIOU",[[1,5729,"节点"]],[5729,5729],[5731,5731]]],[1570631200822,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5788,"\n"]],[4952,4952],[5789,5789]]],[1570631200822,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5788,"\n"]],[5789,5789],[4952,4952]]],[1570631141027,["GJX@GJXAIOU",[[1,5731,"1"]],[5731,5731],[5732,5732]]],[1570631141060,["GJX@GJXAIOU",[[1,5731," "]],[5732,5732],[5733,5733]]],[1570631143293,["GJX@GJXAIOU",[[1,5733," 的rand"]],[5733,5733],[5739,5739]]],[1570631143325,["GJX@GJXAIOU",[[1,5735," "]],[5739,5739],[5740,5740]]],[1570631145350,["GJX@GJXAIOU",[[1,5740,"查找"]],[5740,5740],[5742,5742]]],[1570631145381,["GJX@GJXAIOU",[[1,5740," "]],[5742,5742],[5743,5743]]],[1570631149275,["GJX@GJXAIOU",[[1,5743,"到节点3"]],[5743,5743],[5747,5747]]],[1570631149309,["GJX@GJXAIOU",[[1,5746," "]],[5747,5747],[5748,5748]]],[1570631154132,["GJX@GJXAIOU",[[1,5748,"，然后通过map"]],[5748,5748],[5756,5756]]],[1570631154163,["GJX@GJXAIOU",[[1,5753," "]],[5756,5756],[5757,5757]]],[1570631154924,["GJX@GJXAIOU",[[1,5757,"中"]],[5757,5757],[5758,5758]]],[1570631154956,["GJX@GJXAIOU",[[1,5757," "]],[5758,5758],[5759,5759]]],[1570631162508,["GJX@GJXAIOU",[[1,5759,"查到到 3’，然后将1"]],[5759,5759],[5770,5770]]],[1570631162541,["GJX@GJXAIOU",[[1,5769," "]],[5770,5770],[5771,5771]]],[1570631163852,["GJX@GJXAIOU",[[1,5771,"‘的"]],[5771,5771],[5773,5773]]],[1570631164674,["GJX@GJXAIOU",[[-1,5771,"‘的"]],[5773,5773],[5771,5771]]],[1570631169221,["GJX@GJXAIOU",[[1,5771,"’的rand"]],[5771,5771],[5777,5777]]],[1570631169253,["GJX@GJXAIOU",[[1,5773," "]],[5777,5777],[5778,5778]]],[1570631172100,["GJX@GJXAIOU",[[1,5778,"指向"]],[5778,5778],[5780,5780]]],[1570631172132,["GJX@GJXAIOU",[[1,5778," "]],[5780,5780],[5781,5781]]],[1570631173966,["GJX@GJXAIOU",[[1,5781," 3‘"]],[5781,5781],[5784,5784]]],[1570631174845,["GJX@GJXAIOU",[[-1,5783,"‘"]],[5784,5784],[5783,5783]]],[1570631176492,["GJX@GJXAIOU",[[1,5783,"’，"]],[5783,5783],[5785,5785]]],[1570631179050,["GJX@GJXAIOU",[[-1,5784,"，"]],[5785,5785],[5784,5784]]],[1570631183846,["GJX@GJXAIOU",[[1,5784,"；其他节点同理；"]],[5784,5784],[5792,5792]]],[1570631200229,["GJX@GJXAIOU",[[1,5452,"空间复杂度为："]],[5452,5452],[5459,5459]]],[1570631260824,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5856,"\n"]],[4952,4952],[5857,5857]]],[1570631260824,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5856,"\n"]],[5857,5857],[4952,4952]]],[1570631203870,["GJX@GJXAIOU",[[1,5459,"O(N)"]],[5459,5459],[5463,5463]]],[1570631222577,["GJX@GJXAIOU",[[1,5861,"****"]],[5861,5861],[5863,5863]]],[1570631225174,["GJX@GJXAIOU",[[1,5863,"解法："]],[5863,5863],[5866,5866]]],[1570631260647,["GJX@GJXAIOU",[[1,5868," 遍历链表将各个节点的复制节点链接到源节点的后面，示例得到"]],[5868,5868],[5897,5897]]],[1570631320827,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5897,"\n"]],[4952,4952],[5898,5898]]],[1570631320827,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5897,"\n"]],[5898,5898],[4952,4952]]],[1570631262096,["GJX@GJXAIOU",[[1,5897,"的记过"]],[5897,5897],[5900,5900]]],[1570631263385,["GJX@GJXAIOU",[[-1,5898,"记过"]],[5900,5900],[5898,5898]]],[1570631273076,["GJX@GJXAIOU",[[1,5898,"结果为：1->1'"]],[5898,5898],[5907,5907]]],[1570631273109,["GJX@GJXAIOU",[[-1,5906,"'"],[1,5907,"’"]],[5907,5907],[5907,5907]]],[1570631277469,["GJX@GJXAIOU",[[1,5907,"->2 "]],[5907,5907],[5911,5911]]],[1570631279894,["GJX@GJXAIOU",[[1,5903," "]],[5903,5903],[5904,5904]]],[1570631280883,["GJX@GJXAIOU",[[1,5906," "]],[5906,5906],[5907,5907]]],[1570631281916,["GJX@GJXAIOU",[[1,5909," "]],[5909,5909],[5910,5910]]],[1570631283308,["GJX@GJXAIOU",[[1,5912," "]],[5912,5912],[5913,5913]]],[1570631284949,["GJX@GJXAIOU",[[1,5915," "]],[5914,5914],[5915,5915]]],[1570631287390,["GJX@GJXAIOU",[[1,5915,"->2;'"]],[5915,5915],[5920,5920]]],[1570631287437,["GJX@GJXAIOU",[[-1,5919,"'"],[1,5920,"‘"]],[5920,5920],[5920,5920]]],[1570631288425,["GJX@GJXAIOU",[[-1,5918,";‘"]],[5920,5920],[5918,5918]]],[1570631289276,["GJX@GJXAIOU",[[1,5917," "]],[5917,5917],[5918,5918]]],[1570631290765,["GJX@GJXAIOU",[[1,5919,"'"]],[5919,5919],[5920,5920]]],[1570631291454,["GJX@GJXAIOU",[[-1,5919,"'"],[1,5920,"’ "]],[5920,5920],[5921,5921]]],[1570631293707,["GJX@GJXAIOU",[[1,5921,"->3"]],[5921,5921],[5924,5924]]],[1570631295461,["GJX@GJXAIOU",[[1,5923," "]],[5923,5923],[5924,5924]]],[1570631296100,["GJX@GJXAIOU",[[1,5926," "]],[5925,5925],[5926,5926]]],[1570631297603,["GJX@GJXAIOU",[[1,5926,"->"]],[5926,5926],[5928,5928]]],[1570631298701,["GJX@GJXAIOU",[[1,5929," "]],[5928,5928],[5929,5929]]],[1570631299766,["GJX@GJXAIOU",[[1,5929,"3'"]],[5929,5929],[5931,5931]]],[1570631300932,["GJX@GJXAIOU",[[-1,5930,"'"],[1,5931,"’ "]],[5931,5931],[5932,5932]]],[1570631301254,["GJX@GJXAIOU",[[1,5932,"="]],[5932,5932],[5933,5933]]],[1570631301801,["GJX@GJXAIOU",[[-1,5932,"="]],[5933,5933],[5932,5932]]],[1570631302376,["GJX@GJXAIOU",[[1,5932,"0p"]],[5932,5932],[5934,5934]]],[1570631303048,["GJX@GJXAIOU",[[-1,5932,"0p"]],[5934,5934],[5932,5932]]],[1570631305475,["GJX@GJXAIOU",[[1,5932,"->null;"]],[5932,5932],[5939,5939]]],[1570631306074,["GJX@GJXAIOU",[[-1,5938,";"]],[5939,5939],[5938,5938]]],[1570631306378,["GJX@GJXAIOU",[[1,5938,"；"]],[5938,5938],[5939,5939]]],[1570631380825,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5940,"\n"]],[4952,4952],[5941,5941]]],[1570631380825,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5940,"\n"]],[5941,5941],[4952,4952]]],[1570631323850,["GJX@GJXAIOU",[[1,5939,"\n"]],[5939,5939],[5940,5940]]],[1570631327705,["GJX@GJXAIOU",[[1,5869,"\n"]],[5869,5869],[5870,5870]]],[1570631328164,["GJX@GJXAIOU",[[1,5870,"- "]],[5870,5870],[5872,5872]]],[1570631330516,["GJX@GJXAIOU",[[1,5943,"- \n"]],[5942,5942],[5945,5945]]],[1570631346601,["GJX@GJXAIOU",[[1,5945,"然后将新的链表中的结点两个两一起"]],[5945,5945],[5961,5961]]],[1570631349638,["GJX@GJXAIOU",[[1,5959,"个"]],[5959,5959],[5960,5960]]],[1570631353180,["GJX@GJXAIOU",[[1,5962,"拿出，"]],[5962,5962],[5965,5965]]],[1570631440828,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,5967,"\n"]],[4952,4952],[5968,5968]]],[1570631440828,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,5967,"\n"]],[5968,5968],[4952,4952]]],[1570631397326,["GJX@GJXAIOU",[[1,5965,"因为 1 的"]],[5965,5965],[5971,5971]]],[1570631398434,["GJX@GJXAIOU",[[-1,5967," 1 的"]],[5971,5971],[5967,5967]]],[1570631400878,["GJX@GJXAIOU",[[1,5967,"节点1"]],[5967,5967],[5970,5970]]],[1570631400910,["GJX@GJXAIOU",[[1,5969," "]],[5970,5970],[5971,5971]]],[1570631407910,["GJX@GJXAIOU",[[1,5971," 的rand"]],[5971,5971],[5977,5977]]],[1570631407943,["GJX@GJXAIOU",[[1,5973," "]],[5977,5977],[5978,5978]]],[1570631415147,["GJX@GJXAIOU",[[1,5978," 指向节点3"]],[5978,5978],[5984,5984]]],[1570631415180,["GJX@GJXAIOU",[[1,5983," "]],[5984,5984],[5985,5985]]],[1570631424877,["GJX@GJXAIOU",[[1,5985,"，则节点1"]],[5985,5985],[5990,5990]]],[1570631424911,["GJX@GJXAIOU",[[1,5989," "]],[5990,5990],[5991,5991]]],[1570631425619,["GJX@GJXAIOU",[[1,5991," ‘"]],[5991,5991],[5993,5993]]],[1570631426393,["GJX@GJXAIOU",[[-1,5992,"‘"]],[5993,5993],[5992,5992]]],[1570631426970,["GJX@GJXAIOU",[[1,5993,"- \n"]],[5992,5992],[5995,5995]]],[1570631427625,["GJX@GJXAIOU",[[-1,5993,"- "]],[5995,5995],[5993,5993]]],[1570631428376,["GJX@GJXAIOU",[[-1,5993,"\n"]],[5993,5993],[5992,5992]]],[1570631428867,["GJX@GJXAIOU",[[1,5992,"；"]],[5992,5992],[5993,5993]]],[1570631429537,["GJX@GJXAIOU",[[-1,5991," ；"]],[5993,5993],[5991,5991]]],[1570631434134,["GJX@GJXAIOU",[[1,5991,"’ 的rand"]],[5991,5991],[5998,5998]]],[1570631434167,["GJX@GJXAIOU",[[1,5994," "]],[5998,5998],[5999,5999]]],[1570631440533,["GJX@GJXAIOU",[[1,5999," 应该指向 "]],[5999,5999],[6005,6005]]],[1570631500829,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6007,"\n"]],[4952,4952],[6008,6008]]],[1570631500829,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6007,"\n"]],[6008,6008],[4952,4952]]],[1570631443126,["GJX@GJXAIOU",[[1,6005,"节点2"]],[6005,6005],[6008,6008]]],[1570631443158,["GJX@GJXAIOU",[[1,6007," "]],[6008,6008],[6009,6009]]],[1570631443611,["GJX@GJXAIOU",[[-1,6008,"2"]],[6009,6009],[6008,6008]]],[1570631446668,["GJX@GJXAIOU",[[1,6008,"3 的next"]],[6008,6008],[6015,6015]]],[1570631446701,["GJX@GJXAIOU",[[1,6011," "]],[6015,6015],[6016,6016]]],[1570631449593,["GJX@GJXAIOU",[[1,6016,"（）"]],[6016,6016],[6018,6018]]],[1570631456518,["GJX@GJXAIOU",[[1,6017,"即节点 3‘"]],[6017,6017],[6023,6023]]],[1570631457452,["GJX@GJXAIOU",[[-1,6022,"‘"]],[6023,6023],[6022,6022]]],[1570631458076,["GJX@GJXAIOU",[[1,6022,"；"]],[6022,6022],[6023,6023]]],[1570631458833,["GJX@GJXAIOU",[[-1,6022,"；"]],[6023,6023],[6022,6022]]],[1570631459588,["GJX@GJXAIOU",[[1,6022,"’"]],[6022,6022],[6023,6023]]],[1570631467892,["GJX@GJXAIOU",[[1,6024,"；其他接地"]],[6024,6024],[6029,6029]]],[1570631468473,["GJX@GJXAIOU",[[-1,6027,"接地"]],[6029,6029],[6027,6027]]],[1570631474127,["GJX@GJXAIOU",[[1,6027,"节点的rand"]],[6027,6027],[6034,6034]]],[1570631474159,["GJX@GJXAIOU",[[1,6030," "]],[6034,6034],[6035,6035]]],[1570631476081,["GJX@GJXAIOU",[[1,6035,"同时"]],[6035,6035],[6037,6037]]],[1570631476114,["GJX@GJXAIOU",[[1,6035," "]],[6037,6037],[6038,6038]]],[1570631478377,["GJX@GJXAIOU",[[-1,6036,"同时"]],[6038,6038],[6036,6036]]],[1570631495573,["GJX@GJXAIOU",[[1,6036,"原理同上；最后"]],[6036,6036],[6043,6043]]],[1570631560833,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6045,"\n"]],[4952,4952],[6046,6046]]],[1570631560833,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6045,"\n"]],[6046,6046],[4952,4952]]],[1570631508004,["GJX@GJXAIOU",[[1,6043,"原链表的 next和"]],[6043,6043],[6053,6053]]],[1570631508037,["GJX@GJXAIOU",[[1,6052," "]],[6053,6053],[6054,6054]]],[1570631511520,["GJX@GJXAIOU",[[1,6054," rand指向"]],[6054,6054],[6061,6061]]],[1570631511553,["GJX@GJXAIOU",[[1,6059," "]],[6061,6061],[6062,6062]]],[1570631525097,["GJX@GJXAIOU",[[1,6062,"的还是原链表的值，复制后的链表的next"]],[6062,6062],[6082,6082]]],[1570631525129,["GJX@GJXAIOU",[[1,6078," "]],[6082,6082],[6083,6083]]],[1570631525583,["GJX@GJXAIOU",[[1,6083,"和"]],[6083,6083],[6084,6084]]],[1570631525615,["GJX@GJXAIOU",[[1,6083," "]],[6084,6084],[6085,6085]]],[1570631536067,["GJX@GJXAIOU",[[1,6085," rand 指向新链表的值；"]],[6085,6085],[6099,6099]]],[1570631540635,["GJX@GJXAIOU",[[1,6100,"- \n"]],[6099,6099],[6102,6102]]],[1570631548292,["GJX@GJXAIOU",[[1,6102,"最后将两个链表分开；"]],[6102,6102],[6112,6112]]],[1570631551602,["GJX@GJXAIOU",[[1,6113,"- \n"]],[6112,6112],[6115,6115]]],[1570631551754,["GJX@GJXAIOU",[[-1,6113,"- "]],[6115,6115],[6114,6114]]],[1570631551923,["GJX@GJXAIOU",[[-1,6114," "],[1,6115,"\n"]],[6114,6114],[6115,6115]]],[1570631552074,["GJX@GJXAIOU",[[1,6129,"\n"]],[6115,6115],[6116,6116]]],[1570631560738,["GJX@GJXAIOU",[[1,6116,"### 两个单链表相交的一系列问题\n【题目】 在本题中，单链表可能有环，也可能无环。给定两个\n单链表的头节点 head1和head2，这两个链表可能相交，也可能\n不相交。请实现一个函数， 如果两个链表相交，请返回相交的\n第一个节点；如果不相交，返回null 即可。 要求：如果链表1\n的长度为N，链表2的长度为M，时间复杂度请达到 O(N+M)，额外\n空间复杂度请达到O(1)。"]],[6116,6116],[6305,6305]]],[1570631620836,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6305,"\n"]],[4952,4952],[6306,6306]]],[1570631620836,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6305,"\n"]],[6306,6306],[4952,4952]]],[1570631565425,["GJX@GJXAIOU",[[-1,6162,"\n"]],[6162,6162],[6162,6162]]],[1570631566828,["GJX@GJXAIOU",[[-1,6195,"\n"]],[6195,6195],[6195,6195]]],[1570631567762,["GJX@GJXAIOU",[[-1,6223,"\n"]],[6223,6223],[6223,6223]]],[1570631568834,["GJX@GJXAIOU",[[-1,6254,"\n"]],[6254,6254],[6254,6254]]],[1570631570322,["GJX@GJXAIOU",[[-1,6287,"\n"]],[6287,6287],[6287,6287]]],[1570631590932,["GJX@GJXAIOU",[[1,6302,"****"]],[6302,6302],[6304,6304]]],[1570631592599,["GJX@GJXAIOU",[[1,6304,"私聊"]],[6304,6304],[6306,6306]]],[1570631593297,["GJX@GJXAIOU",[[-1,6304,"私聊"]],[6306,6306],[6304,6304]]],[1570631595621,["GJX@GJXAIOU",[[1,6304,"思路："]],[6304,6304],[6307,6307]]],[1570631596899,["GJX@GJXAIOU",[[1,6321,"\n"]],[6309,6309],[6310,6310]]],[1570631615133,["GJX@GJXAIOU",[[1,6310,"该题可以划分开，首先判断单链表是否有环，然胡"]],[6310,6310],[6332,6332]]],[1570631618434,["GJX@GJXAIOU",[[-1,6330,"然胡"]],[6332,6332],[6330,6330]]],[1570631680838,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6330,"\n"]],[4952,4952],[6331,6331]]],[1570631680838,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6330,"\n"]],[6331,6331],[4952,4952]]],[1570631628881,["GJX@GJXAIOU",[[1,6330,"然后判断连个"]],[6330,6330],[6336,6336]]],[1570631629473,["GJX@GJXAIOU",[[-1,6334,"连个"]],[6336,6336],[6334,6334]]],[1570631634852,["GJX@GJXAIOU",[[1,6334,"链表是否相交，"]],[6334,6334],[6341,6341]]],[1570631643962,["GJX@GJXAIOU",[[-1,6340,"，"]],[6341,6341],[6340,6340]]],[1570631644340,["GJX@GJXAIOU",[[1,6340,"；"]],[6340,6340],[6341,6341]]],[1570631648572,["GJX@GJXAIOU",[[1,6353,"\n"]],[6341,6341],[6342,6342]]],[1570631648780,["GJX@GJXAIOU",[[1,6354,"\n"]],[6342,6342],[6343,6343]]],[1570631650325,["GJX@GJXAIOU",[[1,6343,"****"]],[6343,6343],[6345,6345]]],[1570631658288,["GJX@GJXAIOU",[[1,6345,"判断链表"]],[6345,6345],[6349,6349]]],[1570631660193,["GJX@GJXAIOU",[[-1,6347,"链表"]],[6349,6349],[6347,6347]]],[1570631667669,["GJX@GJXAIOU",[[1,6347,"单链表是否有环："]],[6347,6347],[6355,6355]]],[1570631669347,["GJX@GJXAIOU",[[1,6369,"\n"]],[6357,6357],[6358,6358]]],[1570631670130,["GJX@GJXAIOU",[[1,6370,"\n"]],[6358,6358],[6359,6359]]],[1570631673644,["GJX@GJXAIOU",[[1,6359,"- 方法一："]],[6359,6359],[6365,6365]]],[1570631674195,["GJX@GJXAIOU",[[1,6366,"- \n"]],[6365,6365],[6368,6368]]],[1570631674733,["GJX@GJXAIOU",[[1,6366,"  "]],[6368,6368],[6370,6370]]],[1570670419515,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6370,"\n"]],[4952,4952],[6371,6371]]],[1570670419515,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6370,"\n"]],[6371,6371],[4952,4952]]],[1570670403675,["GJX@GJXAIOU",[[1,6370,"使用 Hash表"]],[6370,6370],[6378,6378]]],[1570670403709,["GJX@GJXAIOU",[[1,6377," "]],[6378,6378],[6379,6379]]],[1570670411285,["GJX@GJXAIOU",[[1,6379,"，可以使用 HashSet"]],[6379,6379],[6392,6392]]],[1570670539524,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6392,"\n"]],[4952,4952],[6393,6393]]],[1570670539524,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6392,"\n"]],[6393,6393],[4952,4952]]],[1570670495829,["GJX@GJXAIOU",[[1,6392,"，遍历单链表，不断的将"]],[6392,6392],[6403,6403]]],[1570670599525,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6403,"\n"]],[4952,4952],[6404,6404]]],[1570670599525,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6403,"\n"]],[6404,6404],[4952,4952]]],[1570670596508,["GJX@GJXAIOU",[[1,6403,"链表中的节点作为 可以"]],[6403,6403],[6414,6414]]],[1570670597464,["GJX@GJXAIOU",[[-1,6412,"可以"]],[6414,6414],[6412,6412]]],[1570670598490,["GJX@GJXAIOU",[[1,6412,"key "]],[6412,6412],[6416,6416]]],[1570670659528,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6416,"\n"]],[4952,4952],[6417,6417]]],[1570670659528,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6416,"\n"]],[6417,6417],[4952,4952]]],[1570670610962,["GJX@GJXAIOU",[[1,6416,"放入hash表中"]],[6416,6416],[6424,6424]]],[1570670610996,["GJX@GJXAIOU",[[1,6418," "]],[6424,6424],[6425,6425]]],[1570670625020,["GJX@GJXAIOU",[[1,6425,"，如果放热"]],[6425,6425],[6430,6430]]],[1570670627672,["GJX@GJXAIOU",[[-1,6427,"果放热"]],[6430,6430],[6427,6427]]],[1570670631408,["GJX@GJXAIOU",[[1,6439,"\n"]],[6429,6429],[6430,6430]]],[1570670631524,["GJX@GJXAIOU",[[1,6440,"\n"]],[6430,6430],[6431,6431]]],[1570670631665,["GJX@GJXAIOU",[[1,6441,"\n"]],[6431,6431],[6432,6432]]],[1570670631744,["GJX@GJXAIOU",[[1,6442,"\n"]],[6432,6432],[6433,6433]]],[1570670631890,["GJX@GJXAIOU",[[1,6443,"\n"]],[6433,6433],[6434,6434]]],[1570670632004,["GJX@GJXAIOU",[[1,6444,"\n"]],[6434,6434],[6435,6435]]],[1570670632112,["GJX@GJXAIOU",[[1,6445,"\n"]],[6435,6435],[6436,6436]]],[1570670632252,["GJX@GJXAIOU",[[1,6446,"\n"]],[6436,6436],[6437,6437]]],[1570670632346,["GJX@GJXAIOU",[[1,6447,"\n"]],[6437,6437],[6438,6438]]],[1570670634728,["GJX@GJXAIOU",[[-1,6426,"如"]],[6427,6427],[6426,6426]]],[1570670649522,["GJX@GJXAIOU",[[1,6426,"如果放入的过程中发现该节点7"]],[6426,6426],[6440,6440]]],[1570670649557,["GJX@GJXAIOU",[[1,6439," "]],[6440,6440],[6441,6441]]],[1570670650503,["GJX@GJXAIOU",[[-1,6439," 7"]],[6441,6441],[6439,6439]]],[1570670652178,["GJX@GJXAIOU",[[1,6439,"以及"]],[6439,6439],[6441,6441]]],[1570670653056,["GJX@GJXAIOU",[[-1,6439,"以及"]],[6441,6441],[6439,6439]]],[1570670659045,["GJX@GJXAIOU",[[1,6439,"已经存在则"]],[6439,6439],[6444,6444]]],[1570670719523,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6444,"\n"]],[4952,4952],[6445,6445]]],[1570670719523,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6444,"\n"]],[6445,6445],[4952,4952]]],[1570670671210,["GJX@GJXAIOU",[[1,6444,"说明单链表有环，反之则无环；"]],[6444,6444],[6458,6458]]],[1570670683725,["GJX@GJXAIOU",[[1,6454,"如果一直遍历到嘴周"]],[6454,6454],[6463,6463]]],[1570670684783,["GJX@GJXAIOU",[[-1,6461,"嘴周"]],[6463,6463],[6461,6461]]],[1570670688733,["GJX@GJXAIOU",[[1,6461,"最后的 null "]],[6461,6461],[6469,6469]]],[1570670691675,["GJX@GJXAIOU",[[1,6475,"  - \n"]],[6474,6474],[6479,6479]]],[1570670716549,["GJX@GJXAIOU",[[1,6479,"使用快慢指针，"]],[6479,6479],[6486,6486]]],[1570670779530,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6486,"\n"]],[4952,4952],[6487,6487]]],[1570670779530,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6486,"\n"]],[6487,6487],[4952,4952]]],[1570670734690,["GJX@GJXAIOU",[[1,6486,"快指针一次走两步，慢指针一次走一步，"]],[6486,6486],[6504,6504]]],[1570670899532,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6504,"\n"]],[4952,4952],[6505,6505]]],[1570670899532,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6504,"\n"]],[6505,6505],[4952,4952]]],[1570670864994,["GJX@GJXAIOU",[[1,6504,"如果快指针可以一直指导 "]],[6504,6504],[6516,6516]]],[1570670865563,["GJX@GJXAIOU",[[-1,6514,"导 "]],[6516,6516],[6514,6514]]],[1570670868818,["GJX@GJXAIOU",[[1,6514,"到null"]],[6514,6514],[6519,6519]]],[1570670868852,["GJX@GJXAIOU",[[1,6515," "]],[6519,6519],[6520,6520]]],[1570670872740,["GJX@GJXAIOU",[[1,6520,"，则说明没有换"]],[6520,6520],[6527,6527]]],[1570670873284,["GJX@GJXAIOU",[[-1,6526,"换"]],[6527,6527],[6526,6526]]],[1570670875070,["GJX@GJXAIOU",[[1,6526,"环，"]],[6526,6526],[6528,6528]]],[1570670875610,["GJX@GJXAIOU",[[-1,6527,"，"]],[6528,6528],[6527,6527]]],[1570670894978,["GJX@GJXAIOU",[[1,6527,"，如果快慢指针相遇则说明有环；"]],[6527,6527],[6542,6542]]],[1570670959531,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6542,"\n"]],[4952,4952],[6543,6543]]],[1570670959531,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6542,"\n"]],[6543,6543],[4952,4952]]],[1570670917301,["GJX@GJXAIOU",[[1,6542,"如果两指针相遇的时候，将快指针宠幸"]],[6542,6542],[6559,6559]]],[1570670918760,["GJX@GJXAIOU",[[-1,6557,"宠幸"]],[6559,6559],[6557,6557]]],[1570670928223,["GJX@GJXAIOU",[[1,6557,"重新指向"]],[6557,6557],[6561,6561]]],[1570671019533,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6561,"\n"]],[4952,4952],[6562,6562]]],[1570671019533,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6561,"\n"]],[6562,6562],[4952,4952]]],[1570670998449,["GJX@GJXAIOU",[[1,6561,"链表的头结点，但是现在是一次走一步，最终快慢指针一定会相遇，相遇的地方即是入环的截断"]],[6561,6561],[6603,6603]]],[1570670999269,["GJX@GJXAIOU",[[-1,6601,"截断"]],[6603,6603],[6601,6601]]],[1570671000923,["GJX@GJXAIOU",[[1,6601,"节点；"]],[6601,6601],[6604,6604]]],[1570671079533,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6604,"\n"]],[4952,4952],[6605,6605]]],[1570671079533,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6604,"\n"]],[6605,6605],[4952,4952]]],[1570671032484,["GJX@GJXAIOU",[[1,6358,"****"]],[6358,6358],[6360,6360]]],[1570671034193,["GJX@GJXAIOU",[[1,6360,"注："]],[6360,6360],[6362,6362]]],[1570671040306,["GJX@GJXAIOU",[[1,6364," 判断两个时候"]],[6364,6364],[6371,6371]]],[1570671042064,["GJX@GJXAIOU",[[-1,6369,"时候"]],[6371,6371],[6369,6369]]],[1570671046460,["GJX@GJXAIOU",[[1,6369,"节点是否想听"]],[6369,6369],[6375,6375]]],[1570671048003,["GJX@GJXAIOU",[[-1,6373,"想听"]],[6375,6375],[6373,6373]]],[1570671077737,["GJX@GJXAIOU",[[1,6373,"相同是判断两个节点的内存地址是否相同，不是值是否相同；"]],[6373,6373],[6400,6400]]],[1570671139537,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6646,"\n"]],[4952,4952],[6647,6647]]],[1570671139537,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6646,"\n"]],[6647,6647],[4952,4952]]],[1570671090207,["GJX@GJXAIOU",[[1,6517,"\n  "]],[6517,6517],[6520,6520]]],[1570671092169,["GJX@GJXAIOU",[[1,6518,"\n"]],[6517,6517],[6518,6518]]],[1570671097893,["GJX@GJXAIOU",[[1,6518,"- 方法二："]],[6518,6518],[6524,6524]]],[1570671101007,["GJX@GJXAIOU",[[1,6677,"\n"]],[6657,6657],[6658,6658]]],[1570671108559,["GJX@GJXAIOU",[[1,6658,"****"]],[6658,6658],[6660,6660]]],[1570671122509,["GJX@GJXAIOU",[[1,6660,"判断两个单链表是否相交"]],[6660,6660],[6671,6671]]],[1570671125442,["GJX@GJXAIOU",[[1,6693,"\n"]],[6673,6673],[6674,6674]]],[1570671125923,["GJX@GJXAIOU",[[1,6694,"\n"]],[6674,6674],[6675,6675]]],[1570671129474,["GJX@GJXAIOU",[[1,6675,"- 判断连个"]],[6675,6675],[6681,6681]]],[1570671133610,["GJX@GJXAIOU",[[-1,6679,"连个"]],[6681,6681],[6679,6679]]],[1570671138963,["GJX@GJXAIOU",[[1,6679,"两个无环链表"]],[6679,6679],[6685,6685]]],[1570671199531,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6685,"\n"]],[4952,4952],[6686,6686]]],[1570671199532,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6685,"\n"]],[6686,6686],[4952,4952]]],[1570671142158,["GJX@GJXAIOU",[[1,6685,"时候相交"]],[6685,6685],[6689,6689]]],[1570671143440,["GJX@GJXAIOU",[[-1,6685,"时候相交"]],[6689,6689],[6685,6685]]],[1570671146466,["GJX@GJXAIOU",[[1,6685,"是否相交："]],[6685,6685],[6690,6690]]],[1570671146923,["GJX@GJXAIOU",[[1,6691,"- \n"]],[6690,6690],[6693,6693]]],[1570671152008,["GJX@GJXAIOU",[[-1,6691,"- "]],[6693,6693],[6691,6691]]],[1570671180129,["GJX@GJXAIOU",[[1,6691,"  - 方法一："]],[6691,6691],[6699,6699]]],[1570671180584,["GJX@GJXAIOU",[[1,6700,"  - \n"]],[6699,6699],[6704,6704]]],[1570671181457,["GJX@GJXAIOU",[[-1,6702,"- "]],[6704,6704],[6702,6702]]],[1570671185420,["GJX@GJXAIOU",[[1,6702,"桶"]],[6702,6702],[6703,6703]]],[1570671187281,["GJX@GJXAIOU",[[-1,6701," 桶"]],[6703,6703],[6701,6701]]],[1570671195771,["GJX@GJXAIOU",[[1,6701,"同上，将链表一种的"]],[6701,6701],[6710,6710]]],[1570671196351,["GJX@GJXAIOU",[[-1,6708,"种的"]],[6710,6710],[6708,6708]]],[1570671198716,["GJX@GJXAIOU",[[1,6708,"中的所有"]],[6708,6708],[6712,6712]]],[1570671259533,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6712,"\n"]],[4952,4952],[6713,6713]]],[1570671259533,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6712,"\n"]],[6713,6713],[4952,4952]]],[1570671206629,["GJX@GJXAIOU",[[1,6712,"节点放入 map中"]],[6712,6712],[6721,6721]]],[1570671206665,["GJX@GJXAIOU",[[1,6720," "]],[6721,6721],[6722,6722]]],[1570671238317,["GJX@GJXAIOU",[[1,6722,"，然后遍历链表二，同时对应查询map"]],[6722,6722],[6740,6740]]],[1570671238352,["GJX@GJXAIOU",[[1,6737," "]],[6740,6740],[6741,6741]]],[1570671254507,["GJX@GJXAIOU",[[1,6741,"，如果两者相等则该值为第一个"]],[6741,6741],[6755,6755]]],[1570671319542,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6755,"\n"]],[4952,4952],[6756,6756]]],[1570671319542,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6755,"\n"]],[6756,6756],[4952,4952]]],[1570671270801,["GJX@GJXAIOU",[[1,6755,"相交点，如果一直没有则不想交；"]],[6755,6755],[6770,6770]]],[1570671859543,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6770,"\n"]],[4952,4952],[6771,6771]]],[1570671859543,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6770,"\n"]],[6771,6771],[4952,4952]]],[1570671847439,["GJX@GJXAIOU",[[1,6771," \n"]],[6770,6770],[6772,6772]]],[1570671852353,["GJX@GJXAIOU",[[1,6772,"- 方法二："]],[6772,6772],[6778,6778]]],[1570671854553,["GJX@GJXAIOU",[[1,6772," "]],[6772,6772],[6773,6773]]],[1570671856720,["GJX@GJXAIOU",[[1,6780,"  - \n"]],[6779,6779],[6784,6784]]],[1570671858193,["GJX@GJXAIOU",[[-1,6781," - "]],[6784,6784],[6781,6781]]],[1570671919550,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6781,"\n"]],[4952,4952],[6782,6782]]],[1570671919550,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6781,"\n"]],[6782,6782],[4952,4952]]],[1570671860770,["GJX@GJXAIOU",[[-1,6700," "]],[6701,6701],[6700,6700]]],[1570671871517,["GJX@GJXAIOU",[[1,6778,"不使用 map"]],[6778,6778],[6785,6785]]],[1570671919434,["GJX@GJXAIOU",[[1,6787,"首先分别遍历链表一和链表二，得到他们的长度和尾结点，然后只需要比较两个尾结点"]],[6787,6787],[6825,6825]]],[1570671979542,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6825,"\n"]],[4952,4952],[6826,6826]]],[1570671979542,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6825,"\n"]],[6826,6826],[4952,4952]]],[1570671924771,["GJX@GJXAIOU",[[1,6825,"的内存地址时候"]],[6825,6825],[6832,6832]]],[1570671925886,["GJX@GJXAIOU",[[-1,6830,"时候"]],[6832,6832],[6830,6830]]],[1570671968957,["GJX@GJXAIOU",[[1,6830,"是否相等，如果相等则两个单链表相交，反之不想交；如果现浇"]],[6830,6830],[6858,6858]]],[1570671969992,["GJX@GJXAIOU",[[-1,6856,"现浇"]],[6858,6858],[6856,6856]]],[1570671976452,["GJX@GJXAIOU",[[1,6856,"相交的话，尾结点"]],[6856,6856],[6864,6864]]],[1570672039548,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6864,"\n"]],[4952,4952],[6865,6865]]],[1570672039548,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6864,"\n"]],[6865,6865],[4952,4952]]],[1570672016732,["GJX@GJXAIOU",[[1,6864,"不一定是第一个相交的节点，如何找到第一个相交的节点：如果链表一的length"]],[6864,6864],[6902,6902]]],[1570672016765,["GJX@GJXAIOU",[[1,6896," "]],[6902,6902],[6903,6903]]],[1570672019378,["GJX@GJXAIOU",[[1,6903," = 100；"]],[6903,6903],[6910,6910]]],[1570672020065,["GJX@GJXAIOU",[[-1,6909,"；"]],[6910,6910],[6909,6909]]],[1570672029349,["GJX@GJXAIOU",[[1,6909,"，链表二的 length= 80，则"]],[6909,6909],[6927,6927]]],[1570672099545,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6927,"\n"]],[4952,4952],[6928,6928]]],[1570672099545,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6927,"\n"]],[6928,6928],[4952,4952]]],[1570672045121,["GJX@GJXAIOU",[[1,6927,"先让链表一走2"]],[6927,6927],[6934,6934]]],[1570672045162,["GJX@GJXAIOU",[[1,6933," "]],[6934,6934],[6935,6935]]],[1570672046206,["GJX@GJXAIOU",[[1,6935,"0不"]],[6935,6935],[6937,6937]]],[1570672046241,["GJX@GJXAIOU",[[1,6936," "]],[6937,6937],[6938,6938]]],[1570672046567,["GJX@GJXAIOU",[[1,6938,"，"]],[6938,6938],[6939,6939]]],[1570672047270,["GJX@GJXAIOU",[[-1,6937,"不，"]],[6939,6939],[6937,6937]]],[1570672052385,["GJX@GJXAIOU",[[1,6937,"步，然后联苯"]],[6937,6937],[6943,6943]]],[1570672053110,["GJX@GJXAIOU",[[-1,6941,"联苯"]],[6943,6943],[6941,6941]]],[1570672061599,["GJX@GJXAIOU",[[1,6941,"两个链表一起轴"]],[6941,6941],[6948,6948]]],[1570672062266,["GJX@GJXAIOU",[[-1,6947,"轴"]],[6948,6948],[6947,6947]]],[1570672082987,["GJX@GJXAIOU",[[1,6947,"走，相撞上的点就是第一个相交的点；"]],[6947,6947],[6964,6964]]],[1570672159550,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,6964,"\n"]],[4952,4952],[6965,6965]]],[1570672159550,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,6964,"\n"]],[6965,6965],[4952,4952]]],[1570672108350,["GJX@GJXAIOU",[[1,6966,"****"]],[6966,6966],[6968,6968]]],[1570672116585,["GJX@GJXAIOU",[[1,6968,"判断一个无环一个哟换挡"]],[6968,6968],[6979,6979]]],[1570672117361,["GJX@GJXAIOU",[[-1,6976,"哟换挡"]],[6979,6979],[6976,6976]]],[1570672123571,["GJX@GJXAIOU",[[1,6976,"有环的单链表是否相交"]],[6976,6976],[6986,6986]]],[1570672125545,["GJX@GJXAIOU",[[1,7006,"\n"]],[6988,6988],[6989,6989]]],[1570672132779,["GJX@GJXAIOU",[[1,6989,"不阔能相交的"]],[6989,6989],[6995,6995]]],[1570672133351,["GJX@GJXAIOU",[[1,7013,"\n"]],[6995,6995],[6996,6996]]],[1570672133767,["GJX@GJXAIOU",[[1,7014,"\n"]],[6996,6996],[6997,6997]]],[1570672134933,["GJX@GJXAIOU",[[1,6997,"****"]],[6997,6997],[6999,6999]]],[1570672144977,["GJX@GJXAIOU",[[1,6999,"两个都有换"]],[6999,6999],[7004,7004]]],[1570672145690,["GJX@GJXAIOU",[[-1,7003,"换"]],[7004,7004],[7003,7003]]],[1570672158162,["GJX@GJXAIOU",[[1,7003,"环的单链表是否相交"]],[7003,7003],[7012,7012]]],[1570672219548,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7014,"\n"]],[4952,4952],[7015,7015]]],[1570672219548,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7014,"\n"]],[7015,7015],[4952,4952]]],[1570672182143,["GJX@GJXAIOU",[[1,7032,"\n"]],[7014,7014],[7015,7015]]],[1570672184802,["GJX@GJXAIOU",[[1,7015,"连个"]],[7015,7015],[7017,7017]]],[1570672185663,["GJX@GJXAIOU",[[-1,7015,"连个"]],[7017,7017],[7015,7015]]],[1570672199692,["GJX@GJXAIOU",[[1,7015,"两个有环的单链表位置情况如下："]],[7015,7015],[7030,7030]]],[1570672200239,["GJX@GJXAIOU",[[1,7048,"\n"]],[7030,7030],[7031,7031]]],[1570672999687,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7030,"\n"]],[4952,4952],[7031,7031]]],[1570672999687,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7030,"\n"]],[7031,7031],[4952,4952]]],[1570672968719,["GJX@GJXAIOU",[[1,7031,"![有环链表的相交问题]($resource/%E6%9C%89%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E7%9B%B8%E4%BA%A4%E9%97%AE%E9%A2%98.png)"]],[7031,7031],[7141,7141]]],[1570673059565,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7140,"\n"]],[4952,4952],[7141,7141]]],[1570673059565,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7140,"\n"]],[7141,7141],[4952,4952]]],[1570673019115,["GJX@GJXAIOU",[[1,7142,"首先判断属于哪一种结构，这里需要连个"]],[7142,7142],[7160,7160]]],[1570673020180,["GJX@GJXAIOU",[[-1,7158,"连个"]],[7160,7160],[7158,7158]]],[1570673032193,["GJX@GJXAIOU",[[1,7158,"两个单链表的头结点、"]],[7158,7158],[7168,7168]]],[1570673033895,["GJX@GJXAIOU",[[-1,7167,"、"]],[7168,7168],[7167,7167]]],[1570673034669,["GJX@GJXAIOU",[[1,7167,"h"]],[7167,7167],[7168,7168]]],[1570673034706,["GJX@GJXAIOU",[[1,7167," "]],[7168,7168],[7169,7169]]],[1570673056600,["GJX@GJXAIOU",[[1,7169,"ead，进入环的第一个节点 loop，"]],[7169,7169],[7188,7188]]],[1570673119566,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7188,"\n"]],[4952,4952],[7189,7189]]],[1570673119566,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7188,"\n"]],[7189,7189],[4952,4952]]],[1570673077304,["GJX@GJXAIOU",[[1,7188,"即首先得到 head1,dead2,loop1,loop2;"]],[7188,7188],[7218,7218]]],[1570673078022,["GJX@GJXAIOU",[[1,7234,"\n"]],[7218,7218],[7219,7219]]],[1570673080841,["GJX@GJXAIOU",[[1,7142,"- "]],[7142,7142],[7144,7144]]],[1570673089265,["GJX@GJXAIOU",[[1,7221,"- rug"]],[7221,7221],[7226,7226]]],[1570673090678,["GJX@GJXAIOU",[[-1,7223,"rug"]],[7226,7226],[7223,7223]]],[1570673094899,["GJX@GJXAIOU",[[1,7223,"如果 loop1 ===="]],[7223,7223],[7234,7234]]],[1570673095397,["GJX@GJXAIOU",[[-1,7235,"="]],[7234,7234],[7233,7233]]],[1570673097950,["GJX@GJXAIOU",[[-1,7233,"=="]],[7235,7235],[7233,7233]]],[1570673117411,["GJX@GJXAIOU",[[1,7233," loop2，则为第二种结构，只需要将尾结点设置为诶 "]],[7233,7233],[7260,7260]]],[1570673119095,["GJX@GJXAIOU",[[-1,7258,"诶 "]],[7260,7260],[7258,7258]]],[1570673179571,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7258,"\n"]],[4952,4952],[7259,7259]]],[1570673179571,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7258,"\n"]],[7259,7259],[4952,4952]]],[1570673119929,["GJX@GJXAIOU",[[1,7258,"l"]],[7258,7258],[7259,7259]]],[1570673119964,["GJX@GJXAIOU",[[1,7258," "]],[7259,7259],[7260,7260]]],[1570673120552,["GJX@GJXAIOU",[[1,7260,"p"]],[7260,7260],[7261,7261]]],[1570673121246,["GJX@GJXAIOU",[[-1,7260,"p"]],[7261,7261],[7260,7260]]],[1570673124024,["GJX@GJXAIOU",[[1,7260,"oop 1或者"]],[7260,7260],[7267,7267]]],[1570673124060,["GJX@GJXAIOU",[[1,7265," "]],[7267,7267],[7268,7268]]],[1570673153088,["GJX@GJXAIOU",[[1,7268," loop2，其判断过程和前面的无环相交判断是一样的；"]],[7268,7268],[7295,7295]]],[1570673299574,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7295,"\n"]],[4952,4952],[7296,7296]]],[1570673299574,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7295,"\n"]],[7296,7296],[4952,4952]]],[1570673244954,["GJX@GJXAIOU",[[1,7296,"- \n"]],[7295,7295],[7298,7298]]],[1570673283083,["GJX@GJXAIOU",[[1,7298,"如果 loop1 不等于 loop2，则让 loop1 通过 next一直"]],[7298,7298],[7335,7335]]],[1570673283121,["GJX@GJXAIOU",[[1,7333," "]],[7335,7335],[7336,7336]]],[1570673298866,["GJX@GJXAIOU",[[1,7336,"往下走，如果 loop1 都绕回了自己"]],[7336,7336],[7355,7355]]],[1570673359572,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7355,"\n"]],[4952,4952],[7356,7356]]],[1570673359572,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7355,"\n"]],[7356,7356],[4952,4952]]],[1570673326300,["GJX@GJXAIOU",[[1,7355,"都没有撞到 loop2，则是第一种结构，如果撞到了一切"]],[7355,7355],[7382,7382]]],[1570673327031,["GJX@GJXAIOU",[[-1,7380,"一切"]],[7382,7382],[7380,7380]]],[1570673333825,["GJX@GJXAIOU",[[1,7380,"一起就是第三种节点"]],[7380,7380],[7389,7389]]],[1570673334589,["GJX@GJXAIOU",[[-1,7387,"节点"]],[7389,7389],[7387,7387]]],[1570673335776,["GJX@GJXAIOU",[[1,7387,"结构；"]],[7387,7387],[7390,7390]]],[1570673343596,["GJX@GJXAIOU",[[1,7391,"- \n"]],[7390,7390],[7393,7393]]],[1570673357449,["GJX@GJXAIOU",[[1,7393,"如果是第三种，以为 loop1 和loop"]],[7393,7393],[7414,7414]]],[1570673357484,["GJX@GJXAIOU",[[1,7410," "]],[7414,7414],[7415,7415]]],[1570673358945,["GJX@GJXAIOU",[[1,7415,"2 都是"]],[7415,7415],[7419,7419]]],[1570673419573,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7419,"\n"]],[4952,4952],[7420,7420]]],[1570673419574,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7419,"\n"]],[7420,7420],[4952,4952]]],[1570673361052,["GJX@GJXAIOU",[[1,7419,"如幻的额"]],[7419,7419],[7423,7423]]],[1570673363142,["GJX@GJXAIOU",[[-1,7419,"如幻的额"]],[7423,7423],[7419,7419]]],[1570673392155,["GJX@GJXAIOU",[[1,7419,"入环的第一个节点，只是该结点靠近那个链表近一点而已，返回"]],[7419,7419],[7447,7447]]],[1570673392998,["GJX@GJXAIOU",[[-1,7445,"返回"]],[7447,7447],[7445,7445]]],[1570673400135,["GJX@GJXAIOU",[[1,7445,"默认返回任意一个都行；"]],[7445,7445],[7456,7456]]],[1570685319613,[null,[[-1,4952," "],[1,4953,"在"],[-1,4972,"\n"],[1,4973," "],[1,7456,"\n"]],[4952,4952],[7457,7457]]],[1570685319613,[null,[[1,4952," "],[-1,4952,"在"],[1,4972,"\n"],[-1,4972," "],[-1,7456,"\n"]],[7457,7457],[4952,4952]]],[1570685264872,["GJX@GJXAIOU",[[1,558,"\n"]],[557,557],[558,558]]],[1570685267421,["GJX@GJXAIOU",[[1,558,"****"]],[558,558],[560,560]]],[1570685269740,["GJX@GJXAIOU",[[1,560,"zhuy"]],[560,560],[564,564]]],[1570685270658,["GJX@GJXAIOU",[[-1,560,"zhuy"]],[564,564],[560,560]]],[1570685272492,["GJX@GJXAIOU",[[1,560,"注意："]],[560,560],[563,563]]],[1570685274213,["GJX@GJXAIOU",[[1,566,"\n"]],[565,565],[566,566]]],[1570685379616,[null,[[-1,4961," "],[1,4962,"在"],[-1,4981,"\n"],[1,4982," "],[1,7465,"\n"]],[4961,4961],[7466,7466]]],[1570685379616,[null,[[1,4961," "],[-1,4961,"在"],[1,4981,"\n"],[-1,4981," "],[-1,7465,"\n"]],[7466,7466],[4961,4961]]],[1570685367952,["GJX@GJXAIOU",[[1,566,"因为操作系统是"]],[566,566],[573,573]]],[1570685369452,["GJX@GJXAIOU",[[-1,572,"是"]],[573,573],[572,572]]],[1570685376904,["GJX@GJXAIOU",[[1,572,"的内存操作时从低祷告"]],[572,572],[582,582]]],[1570685377916,["GJX@GJXAIOU",[[-1,580,"祷告"]],[582,582],[580,580]]],[1570685378941,["GJX@GJXAIOU",[[1,580,"到"]],[580,580],[581,581]]],[1570685439618,[null,[[-1,4976," "],[1,4977,"在"],[-1,4996,"\n"],[1,4997," "],[1,7480,"\n"]],[4976,4976],[7481,7481]]],[1570685439618,[null,[[1,4976," "],[-1,4976,"在"],[1,4996,"\n"],[-1,4996," "],[-1,7480,"\n"]],[7481,7481],[4976,4976]]],[1570685408799,["GJX@GJXAIOU",[[1,581,"高，而应用程序的内存操作时从高到低（）"]],[581,581],[600,600]]],[1570685414764,["GJX@GJXAIOU",[[1,599,"防止内存冲突"]],[599,599],[605,605]]],[1570685416940,["GJX@GJXAIOU",[[1,606,"，"]],[606,606],[607,607]]],[1570685499619,[null,[[-1,5002," "],[1,5003,"在"],[-1,5022,"\n"],[1,5023," "],[1,7506,"\n"]],[5002,5002],[7507,7507]]],[1570685499619,[null,[[1,5002," "],[-1,5002,"在"],[1,5022,"\n"],[-1,5022," "],[-1,7506,"\n"]],[7507,7507],[5002,5002]]],[1570685485172,["GJX@GJXAIOU",[[1,607,"一般栈顶的内存地址小于栈底的内存地址；"]],[607,607],[626,626]]],[1570685739623,[null,[[-1,5021," "],[1,5022,"在"],[-1,5041,"\n"],[1,5042," "],[1,7525,"\n"]],[5021,5021],[7526,7526]]],[1570685739623,[null,[[1,5021," "],[-1,5021,"在"],[1,5041,"\n"],[-1,5041," "],[-1,7525,"\n"]],[7526,7526],[5021,5021]]],[1570685723141,["GJX@GJXAIOU",[[1,125,"栈是先进后出；"]],[125,125],[132,132]]],[1570685739528,["GJX@GJXAIOU",[[1,136,"### 数组和栈的"]],[136,136],[145,145]]],[1570685799623,[null,[[-1,5037," "],[1,5038,"在"],[-1,5057,"\n"],[1,5058," "],[1,7541,"\n"]],[5037,5037],[7542,7542]]],[1570685799623,[null,[[1,5037," "],[-1,5037,"在"],[1,5057,"\n"],[-1,5057," "],[-1,7541,"\n"]],[7542,7542],[5037,5037]]],[1570685741006,["GJX@GJXAIOU",[[1,145,"转换"]],[145,145],[147,147]]],[1570685743939,["GJX@GJXAIOU",[[-1,136,"### 数组和栈的转换"]],[136,147],[136,136]]],[1570685746531,["GJX@GJXAIOU",[[-1,28,"与"]],[29,29],[28,28]]],[1570685751983,["GJX@GJXAIOU",[[1,28,"实现"]],[28,28],[30,30]]],[1570685754483,["GJX@GJXAIOU",[[-1,34,"转换"]],[36,36],[34,34]]],[1570685759261,["GJX@GJXAIOU",[[-1,36,"### 数组与队列转换"]],[36,47],[36,36]]],[1570685759763,["GJX@GJXAIOU",[[-1,36,"\n"]],[36,36],[35,35]]],[1570685763155,["GJX@GJXAIOU",[[1,126,"\n"]],[120,120],[121,121]]],[1570685763967,["GJX@GJXAIOU",[[1,121,"···"]],[121,121],[124,124]]],[1570685765341,["GJX@GJXAIOU",[[-1,121,"···"]],[124,124],[121,121]]],[1570685767623,["GJX@GJXAIOU",[[1,121,"```java"]],[121,121],[128,128]]],[1570685767940,["GJX@GJXAIOU",[[1,134,"\n"]],[128,128],[129,129]]],[1570685768077,["GJX@GJXAIOU",[[1,135,"\n"]],[129,129],[130,130]]],[1570685768213,["GJX@GJXAIOU",[[1,136,"\n"]],[130,130],[131,131]]],[1570685769247,["GJX@GJXAIOU",[[1,131,"```"]],[131,131],[134,134]]],[1570685782327,["GJX@GJXAIOU",[[1,129,"package sort.nowcoder.easy.day03;\n\npublic class ArrayToStackAndQueue {\n\n\t/**\n\t * 数组结构实现大小固定的队列\n\t */\n\tpublic static class ArrayToStack {\n\t\tprivate Integer[] arr;\n\t\t// index 当前指向栈的位置： 0 ~ size -1\n\t\tprivate Integer index;\n\n\t\tpublic ArrayToStack(int initSize) {\n\t\t\tif (initSize < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"The init size is less than 0\");\n\t\t\t}\n\t\t\tarr = new Integer[initSize];\n\t\t\tindex = 0;\n\t\t}\n\n\t\t// 只将值返回给我，但是原来栈中该值仍然保存\n\t\tpublic Integer peek() {\n\t\t\tif (index == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[index - 1];\n\t\t}\n\n\t\t// 新进来一个数\n\t\tpublic void push(int obj) {\n\t\t\tif (index == arr.length) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is full\");\n\t\t\t}\n\t\t\t// index 位置填上，然后 index++\n\t\t\tarr[index++] = obj;\n\t\t}\n\t\t// 弹出一个数\n\t\tpublic Integer pop() {\n\t\t\tif (index == 0) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is empty\");\n\t\t\t}\n\t\t\treturn arr[--index];\n\t\t}\n\t}\n\n\n\t/**\n\t * 数组结构实现大小固定的队列\n\t */\n\tpublic static class ArrayToQueue {\n\t\tprivate Integer[] arr;\n\t\tprivate Integer size;\n\t\tprivate Integer start;\n\t\tprivate Integer end;\n\n\t\tpublic ArrayToQueue(int initSize) {\n\t\t\tif (initSize < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"The init size is less than 0\");\n\t\t\t}\n\t\t\tarr = new Integer[initSize];\n\t\t\tsize = 0;\n\t\t\tstart = 0;\n\t\t\tend = 0;\n\t\t}\n\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\n\t\t// 加入一个数\n\t\tpublic void push(int obj) {\n\t\t\tif (size == arr.length) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is full\");\n\t\t\t}\n\t\t\tsize++;\n\t\t\t// 该数放在 end 执行的位置上\n\t\t\tarr[end] = obj;\n\t\t\t// end 如果到底即 Length-1，就等于 0，如果没有到底就 end + 1;\n\t\t\tend = end == arr.length - 1 ? 0 : end + 1;\n\t\t}\n\n\t\t// 弹出一个数\n\t\tpublic Integer poll() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is empty\");\n\t\t\t}\n\t\t\tsize--;\n\t\t\t// 因为 start 位置要改变，所有使用临时变量 tmp 记录一下 start 位置；\n\t\t\tint tmp = start;\n\t\t\tstart = start == arr.length - 1 ? 0 : start + 1;\n\t\t\treturn arr[tmp];\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t}\n}\n"]],[129,129],[2128,2128]]],[1570685859626,[null,[[-1,7028," "],[1,7029,"在"],[-1,7048,"\n"],[1,7049," "],[1,9532,"\n"]],[7028,7028],[9533,9533]]],[1570685859626,[null,[[1,7028," "],[-1,7028,"在"],[1,7048,"\n"],[-1,7048," "],[-1,9532,"\n"]],[9533,9533],[7028,7028]]],[1570685811155,["GJX@GJXAIOU",[[1,2149,":fanh"]],[2149,2149],[2154,2154]]],[1570685812162,["GJX@GJXAIOU",[[-1,2149,":fanh"]],[2154,2154],[2149,2149]]],[1570685816047,["GJX@GJXAIOU",[[1,2149,"：返回占中"]],[2149,2149],[2154,2154]]],[1570685817228,["GJX@GJXAIOU",[[-1,2152,"占中"]],[2154,2154],[2152,2152]]],[1570685822921,["GJX@GJXAIOU",[[1,2152,"栈中最下"]],[2152,2152],[2156,2156]]],[1570685823572,["GJX@GJXAIOU",[[-1,2155,"下"]],[2156,2156],[2155,2155]]],[1570685827845,["GJX@GJXAIOU",[[1,2155,"小元素"]],[2155,2155],[2158,2158]]],[1570685833014,["GJX@GJXAIOU",[[1,2553,"·"]],[2553,2553],[2554,2554]]],[1570685834293,["GJX@GJXAIOU",[[-1,2553,"·"]],[2554,2554],[2553,2553]]],[1570685836918,["GJX@GJXAIOU",[[1,2553,"```java"]],[2553,2553],[2560,2560]]],[1570685837131,["GJX@GJXAIOU",[[1,2565,"\n"]],[2560,2560],[2561,2561]]],[1570685837262,["GJX@GJXAIOU",[[1,2566,"\n"]],[2561,2561],[2562,2562]]],[1570685837427,["GJX@GJXAIOU",[[1,2567,"\n"]],[2562,2562],[2563,2563]]],[1570685838124,["GJX@GJXAIOU",[[1,2563,"```"]],[2563,2563],[2566,2566]]],[1570686159631,[null,[[-1,7050," "],[1,7051,"在"],[-1,7070,"\n"],[1,7071," "],[1,9554,"\n"]],[7050,7050],[9555,9555]]],[1570686159631,[null,[[1,7050," "],[-1,7050,"在"],[1,7070,"\n"],[-1,7070," "],[-1,9554,"\n"]],[9555,9555],[7050,7050]]],[1570686121826,["GJX@GJXAIOU",[[1,2561,"package sort.nowcoder.easy.day03;\n\nimport java.util.Stack;\n\npublic class GetMinStack {\n\tpublic static class MyStack1 {\n\t\tprivate Stack<Integer> stackData;\n\t\tprivate Stack<Integer> stackMin;\n\n\t\tpublic MyStack1() {\n\t\t\tthis.stackData = new Stack<Integer>();\n\t\t\tthis.stackMin = new Stack<Integer>();\n\t\t}\n\n\t\t// 生成最小元素栈\n\t\tpublic void push(int newNum) {\n\t\t\t// 如果最小元素栈中没有元素，就将新加入的元素同时压入最小栈，否则需要比较当前数和最小栈中的地栈顶比较，返回最小\n\t\t\tif (this.stackMin.isEmpty()) {\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t} else if (newNum <= this.getmin()) {\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t}\n\t\t\t// Data 栈肯定压入最新的数\n\t\t\tthis.stackData.push(newNum);\n\t\t}\n\n\t\tpublic int pop() {\n\t\t\tif (this.stackData.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Your stack is empty.\");\n\t\t\t}\n\t\t\tint value = this.stackData.pop();\n\t\t\tif (value == this.getmin()) {\n\t\t\t\tthis.stackMin.pop();\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\t// peek() 返回 min 栈栈顶，但是不弹出；\n\t\tpublic int getmin() {\n\t\t\tif (this.stackMin.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Your stack is empty.\");\n\t\t\t}\n\t\t\treturn this.stackMin.peek();\n\t\t}\n\t}\n\n\n\t// 下面是第二种设计，差不多\n\tpublic static class MyStack2 {\n\t\tprivate Stack<Integer> stackData;\n\t\tprivate Stack<Integer> stackMin;\n\n\t\tpublic MyStack2() {\n\t\t\tthis.stackData = new Stack<Integer>();\n\t\t\tthis.stackMin = new Stack<Integer>();\n\t\t}\n\n\t\tpublic void push(int newNum) {\n\t\t\tif (this.stackMin.isEmpty()) {\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t} else if (newNum < this.getmin()) {\n\t\t\t\tthis.stackMin.push(newNum);\n\t\t\t} else {\n\t\t\t\tint newMin = this.stackMin.peek();\n\t\t\t\tthis.stackMin.push(newMin);\n\t\t\t}\n\t\t\tthis.stackData.push(newNum);\n\t\t}\n\n\t\tpublic int pop() {\n\t\t\tif (this.stackData.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Your stack is empty.\");\n\t\t\t}\n\t\t\tthis.stackMin.pop();\n\t\t\treturn this.stackData.pop();\n\t\t}\n\n\t\tpublic int getmin() {\n\t\t\tif (this.stackMin.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Your stack is empty.\");\n\t\t\t}\n\t\t\treturn this.stackMin.peek();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMyStack1 stack1 = new MyStack1();\n\t\tstack1.push(3);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(4);\n\t\tSystem.out.println(stack1.getmin());\n\t\tstack1.push(1);\n\t\tSystem.out.println(stack1.getmin());\n\t\tSystem.out.println(stack1.pop());\n\t\tSystem.out.println(stack1.getmin());\n\n\t\tSystem.out.println(\"=============\");\n\n\t\tMyStack1 stack2 = new MyStack1();\n\t\tstack2.push(3);\n\t\tSystem.out.println(stack2.getmin());\n\t\tstack2.push(4);\n\t\tSystem.out.println(stack2.getmin());\n\t\tstack2.push(1);\n\t\tSystem.out.println(stack2.getmin());\n\t\tSystem.out.println(stack2.pop());\n\t\tSystem.out.println(stack2.getmin());\n\t}\n}\n"]],[2561,2561],[5116,5116]]],[1570686127194,["GJX@GJXAIOU",[[-1,5117,"\n"]],[5117,5117],[5116,5116]]],[1570686127785,["GJX@GJXAIOU",[[-1,5116,"\n"]],[5116,5116],[5115,5115]]],[1570686399725,[null,[[-1,9603," "],[1,9604,"在"],[-1,9623,"\n"],[1,9624," "],[1,12107,"\n"]],[9603,9603],[12108,12108]]],[1570686399725,[null,[[1,9603," "],[-1,9603,"在"],[1,9623,"\n"],[-1,9623," "],[-1,12107,"\n"]],[12108,12108],[9603,9603]]],[1570686364065,["GJX@GJXAIOU",[[-1,5482,"\n"]],[5482,5482],[5481,5481]]],[1570686364218,["GJX@GJXAIOU",[[-1,5481,"\n"]],[5481,5481],[5480,5480]]],[1570686366258,["GJX@GJXAIOU",[[1,5707,"\n"]],[5705,5705],[5706,5706]]],[1570686366394,["GJX@GJXAIOU",[[1,5708,"\n"]],[5706,5706],[5707,5707]]],[1570686366507,["GJX@GJXAIOU",[[1,5709,"\n"]],[5707,5707],[5708,5708]]],[1570686366620,["GJX@GJXAIOU",[[1,5710,"\n"]],[5708,5708],[5709,5709]]],[1570686366738,["GJX@GJXAIOU",[[1,5711,"\n"]],[5709,5709],[5710,5710]]],[1570686382954,["GJX@GJXAIOU",[[1,5481,"\n"]],[5480,5480],[5481,5481]]],[1570686383099,["GJX@GJXAIOU",[[1,5482,"\n"]],[5481,5481],[5482,5482]]],[1570686386676,["GJX@GJXAIOU",[[1,5481,"```java"]],[5481,5481],[5488,5488]]],[1570686386810,["GJX@GJXAIOU",[[1,5490,"\n"]],[5488,5488],[5489,5489]]],[1570686386971,["GJX@GJXAIOU",[[1,5491,"\n"]],[5489,5489],[5490,5490]]],[1570686387130,["GJX@GJXAIOU",[[1,5492,"\n"]],[5490,5490],[5491,5491]]],[1570686387765,["GJX@GJXAIOU",[[1,5491,"```"]],[5491,5491],[5494,5494]]],[1570686390843,["GJX@GJXAIOU",[[1,5489,"package sort.nowcoder.easy.day03;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Stack;\n\n/**\n * 实现仅用 2 个队列实现栈以及使用 2 个栈实现队列；\n */\npublic class StackAndQueueConvert {\n\n\tpublic static class StackConvertToQueue {\n\t\tprivate Stack<Integer> stackPush;\n\t\tprivate Stack<Integer> stackPop;\n\n\t\tpublic StackConvertToQueue() {\n\t\t\tstackPush = new Stack<Integer>();\n\t\t\tstackPop = new Stack<Integer>();\n\t\t}\n\n\t\tpublic void push(int pushInt) {\n\t\t\tstackPush.push(pushInt);\n\t\t}\n\n\t\tpublic int poll() {\n\t\t\tif (stackPop.empty() && stackPush.empty()) {\n\t\t\t\tthrow new RuntimeException(\"Queue is empty!\");\n\t\t\t} else if (stackPop.empty()) {\n\t\t\t\twhile (!stackPush.empty()) {\n\t\t\t\t\tstackPop.push(stackPush.pop());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn stackPop.pop();\n\t\t}\n\n\t\tpublic int peek() {\n\t\t\tif (stackPop.empty() && stackPush.empty()) {\n\t\t\t\tthrow new RuntimeException(\"Queue is empty!\");\n\t\t\t} else if (stackPop.empty()) {\n\t\t\t\twhile (!stackPush.empty()) {\n\t\t\t\t\tstackPop.push(stackPush.pop());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn stackPop.peek();\n\t\t}\n\t}\n"]],[5489,5489],[6508,6508]]],[1570686394951,["GJX@GJXAIOU",[[1,6509,"}"]],[6509,6509],[6510,6510]]],[1570686397818,["GJX@GJXAIOU",[[1,6747,"\n"]],[6740,6740],[6741,6741]]],[1570686399595,["GJX@GJXAIOU",[[1,6741,"```ja"]],[6741,6741],[6746,6746]]],[1570686459725,[null,[[-1,10647," "],[1,10648,"在"],[-1,10667,"\n"],[1,10668," "],[1,13151,"\n"]],[10647,10647],[13152,13152]]],[1570686459725,[null,[[1,10647," "],[-1,10647,"在"],[1,10667,"\n"],[-1,10667," "],[-1,13151,"\n"]],[13152,13152],[10647,10647]]],[1570686399936,["GJX@GJXAIOU",[[1,6746,"va"]],[6746,6746],[6748,6748]]],[1570686400147,["GJX@GJXAIOU",[[1,6755,"\n"]],[6748,6748],[6749,6749]]],[1570686400281,["GJX@GJXAIOU",[[1,6756,"\n"]],[6749,6749],[6750,6750]]],[1570686400409,["GJX@GJXAIOU",[[1,6757,"\n"]],[6750,6750],[6751,6751]]],[1570686401005,["GJX@GJXAIOU",[[1,6751,"```"]],[6751,6751],[6754,6754]]],[1570686424027,["GJX@GJXAIOU",[[1,6749,"package sort.nowcoder.easy.day03;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Stack;\n\n/**\n * 实现仅用 2 个队列实现栈以及使用 2 个栈实现队列；\n */\npublic class StackAndQueueConvert {"]],[6749,6749],[6936,6936]]],[1570686426282,["GJX@GJXAIOU",[[1,6938,"\n"]],[6936,6936],[6937,6937]]],[1570686426417,["GJX@GJXAIOU",[[1,6939,"\n"]],[6937,6937],[6938,6938]]],[1570686426561,["GJX@GJXAIOU",[[1,6940,"\n"]],[6938,6938],[6939,6939]]],[1570686426921,["GJX@GJXAIOU",[[1,6941,"\n"]],[6939,6939],[6940,6940]]],[1570686427098,["GJX@GJXAIOU",[[1,6942,"\n"]],[6940,6940],[6941,6941]]],[1570686427211,["GJX@GJXAIOU",[[1,6943,"\n"]],[6941,6941],[6942,6942]]],[1570686427336,["GJX@GJXAIOU",[[1,6944,"\n"]],[6942,6942],[6943,6943]]],[1570686427499,["GJX@GJXAIOU",[[1,6945,"\n"]],[6943,6943],[6944,6944]]],[1570686428326,["GJX@GJXAIOU",[[1,6944,"}"]],[6944,6944],[6945,6945]]],[1570686456156,["GJX@GJXAIOU",[[1,6937,"    // 队列实现栈\n\tpublic static class QueueConvertToStack {\n\t\tprivate Queue<Integer> data;\n\t\tprivate Queue<Integer> help;\n\n\t\tpublic QueueConvertToStack() {\n\t\t\t// 用双向链表实现，也可以使用动态数组\n\t\t\tdata = new LinkedList<Integer>();\n\t\t\thelp = new LinkedList<Integer>();\n\t\t}\n\n\t\t// 压数的时候直接在 data 中将该数压入\n\t\tpublic void push(int pushInt) {\n\t\t\tdata.add(pushInt);\n\t\t}\n\n\t\tpublic int peek() {\n\t\t\tif (data.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Stack is empty!\");\n\t\t\t}\n\t\t\twhile (data.size() != 1) {\n\t\t\t\thelp.add(data.poll());\n\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\thelp.add(res);\n\t\t\tswap();\n\t\t\treturn res;\n\t\t}\n\n\t\t// 出数的时候\n\t\tpublic int pop() {\n\t\t\tif (data.isEmpty()) {\n\t\t\t\tthrow new RuntimeException(\"Stack is empty!\");\n\t\t\t}\n\t\t\t// 当 data 队列中不止一个数，将 data中所有数放进 help 中，当 data 中只剩一个数时候停止，然后将该数弹出并返回\n\t\t\twhile (data.size() > 1) {\n\t\t\t\thelp.add(data.poll());\n\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\t// 改变两个引用，就是 Help 栈变 data 栈， data栈变  help 栈；\n\t\t\tswap();\n\t\t\treturn res;\n\t\t}\n\n\t\tprivate void swap() {\n\t\t\tQueue<Integer> tmp = help;\n\t\t\thelp = data;\n\t\t\tdata = tmp;\n\t\t}\n\t}\n}\n"]],[6937,6937],[7963,7963]]],[1570686519727,[null,[[-1,11877," "],[1,11878,"在"],[-1,11897,"\n"],[1,11898," "],[1,14381,"\n"]],[11877,11877],[14382,14382]]],[1570686519728,[null,[[1,11877," "],[-1,11877,"在"],[1,11897,"\n"],[-1,11897," "],[-1,14381,"\n"]],[14382,14382],[11877,11877]]],[1570686461313,["GJX@GJXAIOU",[[-1,7964,"\n\n\n\n\n\n"]],[7963,7969],[7963,7963]]],[1570686464034,["GJX@GJXAIOU",[[-1,7964,"}\n"]],[7963,7965],[7963,7963]]],[1570686465857,["GJX@GJXAIOU",[[-1,7964,"\n"]],[7964,7964],[7963,7963]]],[1570686466512,["GJX@GJXAIOU",[[-1,7963,"\n"]],[7963,7963],[7962,7962]]],[1570686699731,[null,[[-1,11867," "],[1,11868,"在"],[-1,11887,"\n"],[1,11888," "],[1,14371,"\n"]],[11867,11867],[14372,14372]]],[1570686699731,[null,[[1,11867," "],[-1,11867,"在"],[1,11887,"\n"],[-1,11887," "],[-1,14371,"\n"]],[14372,14372],[11867,11867]]],[1570686651420,["GJX@GJXAIOU",[[1,8781,"```"]],[8781,8781],[8784,8784]]],[1570686651461,["GJX@GJXAIOU",[[1,8784,"language\n```\n"]],[8784,8784],[8784,8792]]],[1570686652037,["GJX@GJXAIOU",[[-1,8784,"language"],[1,8792,"j"]],[8784,8792],[8785,8785]]],[1570686652494,["GJX@GJXAIOU",[[1,8785,"ava"]],[8785,8785],[8788,8788]]],[1570686652636,["GJX@GJXAIOU",[[1,8789,"\n"]],[8788,8788],[8789,8789]]],[1570686655574,["GJX@GJXAIOU",[[1,8789,"package sort.nowcoder.easy.day03;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class CatDogQueue {\n\n\tpublic static class Pet {\n\t\tprivate String type;\n\n\t\tpublic Pet(String type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\tpublic String getPetType() {\n\t\t\treturn this.type;\n\t\t}\n\t}\n\n\tpublic static class Dog extends Pet {\n\t\tpublic Dog() {\n\t\t\tsuper(\"dog\");\n\t\t}\n\t}\n\n\tpublic static class Cat extends Pet {\n\t\tpublic Cat() {\n\t\t\tsuper(\"cat\");\n\t\t}\n\t}\n\n\tpublic static class PetEnter {\n\t\t// 宠物类型\n\t\tprivate Pet pet;\n\t\t// 第几个宠物\n\t\tprivate long count;\n\n\t\tpublic PetEnter(Pet pet, long count) {\n\t\t\tthis.pet = pet;\n\t\t\tthis.count = count;\n\t\t}\n\n\t\tpublic Pet getPet() {\n\t\t\treturn this.pet;\n\t\t}\n\n\t\tpublic long getCount() {\n\t\t\treturn this.count;\n\t\t}\n\n\t\tpublic String getEnterPetType() {\n\t\t\treturn this.pet.getPetType();\n\t\t}\n\t}\n\n\tpublic static class CatAndDogQueue {\n\t\tprivate Queue<PetEnter> dogQ;\n\t\tprivate Queue<PetEnter> catQ;\n\t\tprivate long count;\n\n\t\tpublic CatAndDogQueue() {\n\t\t\tthis.dogQ = new LinkedList<PetEnter>();\n\t\t\tthis.catQ = new LinkedList<PetEnter>();\n\t\t\tthis.count = 0;\n\t\t}\n\n\t\tpublic void add(Pet pet) {\n\t\t\tif (pet.getPetType().equals(\"dog\")) {\n\t\t\t\tthis.dogQ.add(new PetEnter(pet, this.count++));\n\t\t\t} else if (pet.getPetType().equals(\"cat\")) {\n\t\t\t\tthis.catQ.add(new PetEnter(pet, this.count++));\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"err, not dog or cat\");\n\t\t\t}\n\t\t}\n\n\t\tpublic Pet pollAll() {\n\t\t\tif (!this.dogQ.isEmpty() && !this.catQ.isEmpty()) {\n\t\t\t\t// 比较猫狗队列的队列头 count大小\n\t\t\t\tif (this.dogQ.peek().getCount() < this.catQ.peek().getCount()) {\n\t\t\t\t\treturn this.dogQ.poll().getPet();\n\t\t\t\t} else {\n\t\t\t\t\treturn this.catQ.poll().getPet();\n\t\t\t\t}\n\t\t\t} else if (!this.dogQ.isEmpty()) {\n\t\t\t\treturn this.dogQ.poll().getPet();\n\t\t\t} else if (!this.catQ.isEmpty()) {\n\t\t\t\treturn this.catQ.poll().getPet();\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"err, queue is empty!\");\n\t\t\t}\n\t\t}\n\n\t\tpublic Dog pollDog() {\n\t\t\tif (!this.isDogQueueEmpty()) {\n\t\t\t\treturn (Dog) this.dogQ.poll().getPet();\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Dog queue is empty!\");\n\t\t\t}\n\t\t}\n\n\t\tpublic Cat pollCat() {\n\t\t\tif (!this.isCatQueueEmpty()) {\n\t\t\t\treturn (Cat) this.catQ.poll().getPet();\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(\"Cat queue is empty!\");\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean isEmpty() {\n\t\t\treturn this.dogQ.isEmpty() && this.catQ.isEmpty();\n\t\t}\n\n\t\tpublic boolean isDogQueueEmpty() {\n\t\t\treturn this.dogQ.isEmpty();\n\t\t}\n\n\t\tpublic boolean isCatQueueEmpty() {\n\t\t\treturn this.catQ.isEmpty();\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tCatAndDogQueue test = new CatAndDogQueue();\n\n\t\tPet dog1 = new Dog();\n\t\tPet cat1 = new Cat();\n\t\tPet dog2 = new Dog();\n\t\tPet cat2 = new Cat();\n\t\tPet dog3 = new Dog();\n\t\tPet cat3 = new Cat();\n\n\t\ttest.add(dog1);\n\t\ttest.add(cat1);\n\t\ttest.add(dog2);\n\t\ttest.add(cat2);\n\t\ttest.add(dog3);\n\t\ttest.add(cat3);\n\n\t\ttest.add(dog1);\n\t\ttest.add(cat1);\n\t\ttest.add(dog2);\n\t\ttest.add(cat2);\n\t\ttest.add(dog3);\n\t\ttest.add(cat3);\n\n\t\ttest.add(dog1);\n\t\ttest.add(cat1);\n\t\ttest.add(dog2);\n\t\ttest.add(cat2);\n\t\ttest.add(dog3);\n\t\ttest.add(cat3);\n\t\twhile (!test.isDogQueueEmpty()) {\n\t\t\tSystem.out.println(test.pollDog().getPetType());\n\t\t}\n\t\twhile (!test.isEmpty()) {\n\t\t\tSystem.out.println(test.pollAll().getPetType());\n\t\t}\n\t}\n\n}\n"]],[8789,8789],[12000,12000]]],[1570687299740,[null,[[-1,15091," "],[1,15092,"在"],[-1,15111,"\n"],[1,15112," "],[1,17595,"\n"]],[15091,15091],[17596,17596]]],[1570687299740,[null,[[1,15091," "],[-1,15091,"在"],[1,15111,"\n"],[-1,15111," "],[-1,17595,"\n"]],[17596,17596],[15091,15091]]],[1570687296771,["GJX@GJXAIOU",[[1,12304,"\n"]],[12302,12302],[12303,12303]]],[1570687297701,["GJX@GJXAIOU",[[1,12303,"```"]],[12303,12303],[12306,12306]]],[1570687297746,["GJX@GJXAIOU",[[1,12306,"language\n```\n"]],[12306,12306],[12306,12314]]],[1570687298781,["GJX@GJXAIOU",[[-1,12306,"language"],[1,12314,"j"]],[12306,12314],[12307,12307]]],[1570687299174,["GJX@GJXAIOU",[[1,12307,"ava"]],[12307,12307],[12310,12310]]],[1570687299330,["GJX@GJXAIOU",[[1,12311,"\n"]],[12310,12310],[12311,12311]]],[1570687359742,[null,[[-1,15105," "],[1,15106,"在"],[-1,15125,"\n"],[1,15126," "],[1,17609,"\n"]],[15105,15105],[17610,17610]]],[1570687359742,[null,[[1,15105," "],[-1,15105,"在"],[1,15125,"\n"],[-1,15125," "],[-1,17609,"\n"]],[17610,17610],[15105,15105]]],[1570687302735,["GJX@GJXAIOU",[[1,12311,"package sort.nowcoder.easy.day03;\n\npublic class PrintMatrixSpiralOrder {\n\n\tpublic static void spiralOrderPrint(int[][] matrix) {\n\t\tint leftTopRow = 0;\n\t\tint leftTopColumn = 0;\n\t\tint rightBottomRow = matrix.length - 1;\n\t\tint rightBottomColumn = matrix[0].length - 1;\n\t\twhile (leftTopRow <= rightBottomRow && leftTopColumn <= rightBottomColumn) {\n\t\t\tprintEdge(matrix, leftTopRow++, leftTopColumn++, rightBottomRow--, rightBottomColumn--);\n\t\t}\n\t}\n\n\t/**\n\t * R: Row:行，C：Column：列\n\t * @param matrix\n\t * @param leftTopRow 左上角的行\n\t * @param leftTopColumn 左上角的列\n\t * @param rightBottomRow：右下角的行\n\t * @param rightBottomColumn：右下角的列\n\t */\n\tpublic static void printEdge(int[][] matrix, int leftTopRow, int leftTopColumn, int rightBottomRow, int rightBottomColumn) {\n\t\t// 如果 M 只有一行\n\t\tif (leftTopRow == rightBottomRow) {\n\t\t\tfor (int i = leftTopColumn; i <= rightBottomColumn; i++) {\n\t\t\t\tSystem.out.print(matrix[leftTopRow][i] + \" \");\n\t\t\t}\n\t\t\t// 如果 M 只有一列\n\t\t} else if (leftTopColumn == rightBottomColumn) {\n\t\t\tfor (int i = leftTopRow; i <= rightBottomRow; i++) {\n\t\t\t\tSystem.out.print(matrix[i][leftTopColumn] + \" \");\n\t\t\t}\n\t\t} else {\n\t\t\tint curC = leftTopColumn;\n\t\t\tint curR = leftTopRow;\n\t\t\twhile (curC != rightBottomColumn) {\n\t\t\t\tSystem.out.print(matrix[leftTopRow][curC] + \" \");\n\t\t\t\tcurC++;\n\t\t\t}\n\t\t\twhile (curR != rightBottomRow) {\n\t\t\t\tSystem.out.print(matrix[curR][rightBottomColumn] + \" \");\n\t\t\t\tcurR++;\n\t\t\t}\n\t\t\twhile (curC != leftTopColumn) {\n\t\t\t\tSystem.out.print(matrix[rightBottomRow][curC] + \" \");\n\t\t\t\tcurC--;\n\t\t\t}\n\t\t\twhile (curR != leftTopRow) {\n\t\t\t\tSystem.out.print(matrix[curR][leftTopColumn] + \" \");\n\t\t\t\tcurR--;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 },\n\t\t\t\t{ 13, 14, 15, 16 } };\n\t\tspiralOrderPrint(matrix);\n\n\t}\n\n}\n"]],[12311,12311],[14102,14102]]],[1570687308138,["GJX@GJXAIOU",[[-1,14099,"\n"]],[14099,14099],[14098,14098]]],[1570687309298,["GJX@GJXAIOU",[[-1,14095,"\n"]],[14095,14095],[14094,14094]]],[1570687310276,["GJX@GJXAIOU",[[-1,14100,"\n"]],[14100,14100],[14099,14099]]],[1570687539748,[null,[[-1,16893," "],[1,16894,"在"],[-1,16913,"\n"],[1,16914," "],[1,19397,"\n"]],[16893,16893],[19398,19398]]],[1570687539748,[null,[[1,16893," "],[-1,16893,"在"],[1,16913,"\n"],[-1,16913," "],[-1,19397,"\n"]],[19398,19398],[16893,16893]]],[1570687489571,["GJX@GJXAIOU",[[1,14242,"\n"]],[14241,14241],[14242,14242]]],[1570687491232,["GJX@GJXAIOU",[[1,14241,"```"]],[14241,14241],[14244,14244]]],[1570687491278,["GJX@GJXAIOU",[[1,14244,"language\n```\n"]],[14244,14244],[14244,14252]]],[1570687492036,["GJX@GJXAIOU",[[-1,14244,"language"],[1,14252,"j"]],[14244,14252],[14245,14245]]],[1570687492523,["GJX@GJXAIOU",[[1,14245,"ava"]],[14245,14245],[14248,14248]]],[1570687492655,["GJX@GJXAIOU",[[1,14249,"\n"]],[14248,14248],[14249,14249]]],[1570687495969,["GJX@GJXAIOU",[[1,14249,"package sort.nowcoder.easy.day03;\n\npublic class RotateMatrix {\n\n\tpublic static void rotate(int[][] matrix) {\n\t\tint leftTopRow = 0;\n\t\tint leftTopColumn = 0;\n\t\tint rightBottomRow = matrix.length - 1;\n\t\tint rightBottomColumn = matrix[0].length - 1;\n\t\twhile (leftTopRow < rightBottomRow) {\n\t\t\trotateEdge(matrix, leftTopRow++, leftTopColumn++, rightBottomRow--, rightBottomColumn--);\n\t\t}\n\t}\n\n\t/**\n\t * @param matrix\n\t * @param leftTopRow 左上角的行\n\t * @param leftTopColumn 左上角的列\n\t * @param rightBottomRow：右下角的行\n\t * @param rightBottomColumn：右下角的列\n\t */\n\tpublic static void rotateEdge(int[][] matrix, int leftTopRow, int leftTopColumn, int rightBottomRow, int rightBottomColumn) {\n\t\tint times = rightBottomColumn - leftTopColumn; \n\t\tint tmp = 0;\n\t\t// i 相当于圈数，从0 ~ times -1;就算交换玩了\n\t\tfor (int i = 0; i != times; i++) {\n\t\t\ttmp = matrix[leftTopRow][leftTopColumn + i];\n\t\t\tmatrix[leftTopRow][leftTopColumn + i] = matrix[rightBottomRow - i][leftTopColumn];\n\t\t\tmatrix[rightBottomRow - i][leftTopColumn] = matrix[rightBottomRow][rightBottomColumn - i];\n\t\t\tmatrix[rightBottomRow][rightBottomColumn - i] = matrix[leftTopRow + i][rightBottomColumn];\n\t\t\tmatrix[leftTopRow + i][rightBottomColumn] = tmp;\n\t\t}\n\t}\n\n\tpublic static void printMatrix(int[][] matrix) {\n\t\tfor (int i = 0; i != matrix.length; i++) {\n\t\t\tfor (int j = 0; j != matrix[0].length; j++) {\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 },\n\t\t\t\t{ 13, 14, 15, 16 } };\n\t\tprintMatrix(matrix);\n\t\trotate(matrix);\n\t\tSystem.out.println(\"=========\");\n\t\tprintMatrix(matrix);\n\n\t}\n\n}\n"]],[14249,14249],[15905,15905]]],[1570687501011,["GJX@GJXAIOU",[[-1,15902,"\n"]],[15902,15902],[15901,15901]]],[1570687501985,["GJX@GJXAIOU",[[-1,15898,"\n"]],[15898,15898],[15897,15897]]],[1570687502931,["GJX@GJXAIOU",[[-1,15903,"\n"]],[15903,15903],[15902,15902]]],[1570687508990,["GJX@GJXAIOU",[[1,15908,"====="]],[15908,15908],[15911,15911]]],[1570687511002,["GJX@GJXAIOU",[[1,15911,"daozheli"]],[15911,15911],[15919,15919]]],[1570687512376,["GJX@GJXAIOU",[[-1,15911,"daozheli"]],[15919,15919],[15911,15911]]],[1570687515935,["GJX@GJXAIOU",[[1,15911,"到这里了"]],[15911,15911],[15915,15915]]],[1570707462945,[null,[[-1,18569," "],[1,18570,"在"],[-1,18589,"\n"],[1,18590," "],[1,21073,"\n"]],[18569,18569],[21074,21074]]],[1570707462945,[null,[[1,18569," "],[-1,18569,"在"],[1,18589,"\n"],[-1,18589," "],[-1,21073,"\n"]],[21074,21074],[18569,18569]]],[1570707452267,["GJX@GJXAIOU",[[-1,15908,"===到这里了=="]],[15908,15917],[15908,15908]]],[1570707453178,["GJX@GJXAIOU",[[-1,15908,"\n"]],[15908,15908],[15907,15907]]],[1570707454530,["GJX@GJXAIOU",[[1,15908,"\n"]],[15907,15907],[15908,15908]]],[1570709142971,[null,[[-1,18560," "],[1,18561,"在"],[-1,18580,"\n"],[1,18581," "],[1,21064,"\n"]],[18560,18560],[21065,21065]]],[1570709142971,[null,[[1,18560," "],[-1,18560,"在"],[1,18580,"\n"],[-1,18580," "],[-1,21064,"\n"]],[21065,21065],[18560,18560]]],[1570709136393,["GJX@GJXAIOU",[[-1,16002,"见代码"]],[16002,16005],[16002,16002]]],[1570709138890,["GJX@GJXAIOU",[[1,16002,"···"]],[16002,16002],[16005,16005]]],[1570709139845,["GJX@GJXAIOU",[[-1,16002,"···"]],[16005,16005],[16002,16002]]],[1570709141474,["GJX@GJXAIOU",[[1,16002,"```"]],[16002,16002],[16005,16005]]],[1570709141520,["GJX@GJXAIOU",[[1,16005,"language\n```\n"]],[16005,16005],[16005,16013]]],[1570709141915,["GJX@GJXAIOU",[[-1,16005,"language"],[1,16013,"j"]],[16005,16013],[16006,16006]]],[1570709142357,["GJX@GJXAIOU",[[1,16006,"ava"]],[16006,16006],[16009,16009]]],[1570709142490,["GJX@GJXAIOU",[[1,16010,"\n"]],[16009,16009],[16010,16010]]],[1570709202967,[null,[[-1,18570," "],[1,18571,"在"],[-1,18590,"\n"],[1,18591," "],[1,21074,"\n"]],[18570,18570],[21075,21075]]],[1570709202967,[null,[[1,18570," "],[-1,18570,"在"],[1,18590,"\n"],[-1,18590," "],[-1,21074,"\n"]],[21075,21075],[18570,18570]]],[1570709145371,["GJX@GJXAIOU",[[1,16010,"package sort.nowcoder.easy.day03;\n\npublic class ReverseList {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n    // 反转单向链表；图解：https://blog.csdn.net/xyh269/article/details/70238501\n\tpublic static Node reverseList(Node head) {\n\t\tNode pre = null;\n\t\tNode next = null;\n\t\twhile (head != null) {\n\t\t\tnext = head.next;\n\t\t\thead.next = pre;\n\t\t\tpre = head;\n\t\t\thead = next;\n\t\t}\n\t\treturn pre;\n\t}\n\n\tpublic static class DoubleNode {\n\t\tpublic int value;\n\t\tpublic DoubleNode last;\n\t\tpublic DoubleNode next;\n\n\t\tpublic DoubleNode(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\t// 反转双向链表\n\tpublic static DoubleNode reverseList(DoubleNode head) {\n\t\tDoubleNode pre = null;\n\t\tDoubleNode next = null;\n\t\twhile (head != null) {\n\t\t\tnext = head.next;\n\t\t\thead.next = pre;\n\t\t\thead.last = next;\n\t\t\tpre = head;\n\t\t\thead = next;\n\t\t}\n\t\treturn pre;\n\t}\n\n\tpublic static void printLinkedList(Node head) {\n\t\tSystem.out.print(\"Linked List: \");\n\t\twhile (head != null) {\n\t\t\tSystem.out.print(head.value + \" \");\n\t\t\thead = head.next;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printDoubleLinkedList(DoubleNode head) {\n\t\tSystem.out.print(\"Double Linked List: \");\n\t\tDoubleNode end = null;\n\t\twhile (head != null) {\n\t\t\tSystem.out.print(head.value + \" \");\n\t\t\tend = head;\n\t\t\thead = head.next;\n\t\t}\n\t\tSystem.out.print(\"| \");\n\t\twhile (end != null) {\n\t\t\tSystem.out.print(end.value + \" \");\n\t\t\tend = end.last;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head1 = new Node(1);\n\t\thead1.next = new Node(2);\n\t\thead1.next.next = new Node(3);\n\t\tprintLinkedList(head1);\n\t\thead1 = reverseList(head1);\n\t\tprintLinkedList(head1);\n\n\t\tDoubleNode head2 = new DoubleNode(1);\n\t\thead2.next = new DoubleNode(2);\n\t\thead2.next.last = head2;\n\t\thead2.next.next = new DoubleNode(3);\n\t\thead2.next.next.last = head2.next;\n\t\thead2.next.next.next = new DoubleNode(4);\n\t\thead2.next.next.next.last = head2.next.next;\n\t\tprintDoubleLinkedList(head2);\n\t\tprintDoubleLinkedList(reverseList(head2));\n\t}\n}\n"]],[16010,16010],[18039,18039]]],[1570709503035,[null,[[-1,20599," "],[1,20600,"在"],[-1,20619,"\n"],[1,20620," "],[1,23103,"\n"]],[20599,20599],[23104,23104]]],[1570709503035,[null,[[1,20599," "],[-1,20599,"在"],[1,20619,"\n"],[-1,20619," "],[-1,23103,"\n"]],[23104,23104],[20599,20599]]],[1570709458218,["GJX@GJXAIOU",[[1,18458,"\n"]],[18456,18456],[18457,18457]]],[1570709458368,["GJX@GJXAIOU",[[1,18459,"\n"]],[18457,18457],[18458,18458]]],[1570709462053,["GJX@GJXAIOU",[[1,18457,"```"]],[18457,18457],[18460,18460]]],[1570709462100,["GJX@GJXAIOU",[[1,18460,"language\n```\n"]],[18460,18460],[18460,18468]]],[1570709462891,["GJX@GJXAIOU",[[-1,18460,"language"],[1,18468,"j"]],[18460,18468],[18461,18461]]],[1570709463376,["GJX@GJXAIOU",[[1,18461,"ava"]],[18461,18461],[18464,18464]]],[1570709463538,["GJX@GJXAIOU",[[1,18465,"\n"]],[18464,18464],[18465,18465]]],[1570709466593,["GJX@GJXAIOU",[[1,18465,"package sort.nowcoder.easy.day03;\n\npublic class ZigZagPrintMatrix {\n\n\tpublic static void printMatrixZigZag(int[][] matrix) {\n\t\tint leftTopRow = 0;\n\t\tint leftTopColumn = 0;\n\t\tint rightBottomRow = 0;\n\t\tint rightBottomColumn = 0;\n\t\tint endRow = matrix.length - 1;\n\t\tint endColumn = matrix[0].length - 1;\n\t\tboolean fromUp = false;\n\t\twhile (leftTopRow != endRow + 1) {\n\t\t\tprintLevel(matrix, leftTopRow, leftTopColumn, rightBottomRow, rightBottomColumn, fromUp);\n\t\t\t// 如果 A点来到最后一列，就往下走，否则行号不变\n\t\t\tleftTopRow = leftTopColumn == endColumn ? leftTopRow + 1 : leftTopRow;\n\t\t\tleftTopColumn = leftTopColumn == endColumn ? leftTopColumn : leftTopColumn + 1;\n\t\t\trightBottomColumn = rightBottomRow == endRow ? rightBottomColumn + 1 : rightBottomColumn;\n\t\t\trightBottomRow = rightBottomRow == endRow ? rightBottomRow : rightBottomRow + 1;\n\t\t\tfromUp = !fromUp;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\t// 打印对角线\n\tpublic static void printLevel(int[][] m, int leftTopRow, int leftTopColumn, int rightBottomRow, int rightBottomColumn,\n\t\t\tboolean fromUp) {\n\t\tif (fromUp) {\n\t\t\twhile (leftTopRow != rightBottomRow + 1) {\n\t\t\t\tSystem.out.print(m[leftTopRow++][leftTopColumn--] + \" \");\n\t\t\t}\n\t\t} else {\n\t\t\twhile (rightBottomRow != leftTopRow - 1) {\n\t\t\t\tSystem.out.print(m[rightBottomRow--][rightBottomColumn++] + \" \");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 } };\n\t\tprintMatrixZigZag(matrix);\n\t}\n}\n"]],[18465,18465],[19909,19909]]],[1570709863093,[null,[[-1,22058," "],[1,22059,"在"],[-1,22078,"\n"],[1,22079," "],[1,24562,"\n"]],[22058,22058],[24563,24563]]],[1570709863093,[null,[[1,22058," "],[-1,22058,"在"],[1,22078,"\n"],[-1,22078," "],[-1,24562,"\n"]],[24563,24563],[22058,22058]]],[1570709834624,["GJX@GJXAIOU",[[1,20378,"\n"]],[20376,20376],[20377,20377]]],[1570709836925,["GJX@GJXAIOU",[[1,20377,"```"]],[20377,20377],[20380,20380]]],[1570709836983,["GJX@GJXAIOU",[[1,20380,"language\n```\n"]],[20380,20380],[20380,20388]]],[1570709837988,["GJX@GJXAIOU",[[-1,20380,"language"],[1,20388,"j"]],[20380,20388],[20381,20381]]],[1570709838532,["GJX@GJXAIOU",[[1,20381,"ava"]],[20381,20381],[20384,20384]]],[1570709838699,["GJX@GJXAIOU",[[1,20385,"\n"]],[20384,20384],[20385,20385]]],[1570709841655,["GJX@GJXAIOU",[[1,20385,"package nowcoder.easy.day03;\n\npublic class FindNumInSortedMatrix {\n\n\tpublic static boolean isContains(int[][] matrix, int num) {\n\t\t// 初始位置在数组的右上角\n\t\tint row = 0;\n\t\tint col = matrix[0].length - 1;\n\t\twhile (row < matrix.length && col > -1) {\n\t\t\tif (matrix[row][col] == num) {\n\t\t\t\treturn true;\n\t\t\t} else if (matrix[row][col] > num) {\n\t\t\t\t// 列--，即往左走\n\t\t\t\tcol--;\n\t\t\t} else {\n\t\t\t\t// 行++，即往下走\n\t\t\t\trow++;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix = new int[][] { \n\t\t\t\t{ 0, 1, 2, 3, 4, 5, 6 },\n\t\t\t\t{ 10, 12, 13, 15, 16, 17, 18 },\n\t\t\t\t{ 23, 24, 25, 26, 27, 28, 29 },\n\t\t\t\t{ 44, 45, 46, 47, 48, 49, 50 },\n\t\t\t\t{ 65, 66, 67, 68, 69, 70, 71 },\n\t\t\t\t{ 96, 97, 98, 99, 100, 111, 122 },\n\t\t\t\t{ 166, 176, 186, 187, 190, 195, 200 },\n\t\t\t\t{ 233, 243, 321, 341, 356, 370, 380 }\n\t\t};\n\t\tint num = 233;\n\t\tSystem.out.println(isContains(matrix, num));\n\t}\n}\n"]],[20385,20385],[21257,21257]]],[1570710103019,[null,[[-1,22944," "],[1,22945,"在"],[-1,22964,"\n"],[1,22965," "],[1,25448,"\n"]],[22944,22944],[25449,25449]]],[1570710103019,[null,[[1,22944," "],[-1,22944,"在"],[1,22964,"\n"],[-1,22964," "],[-1,25448,"\n"]],[25449,25449],[22944,22944]]],[1570710061733,["GJX@GJXAIOU",[[1,21331,"```"]],[21331,21331],[21334,21334]]],[1570710061783,["GJX@GJXAIOU",[[1,21334,"language\n```\n"]],[21334,21334],[21334,21342]]],[1570710062267,["GJX@GJXAIOU",[[-1,21334,"language"],[1,21342,"j"]],[21334,21342],[21335,21335]]],[1570710062953,["GJX@GJXAIOU",[[1,21335,"ava"]],[21335,21335],[21338,21338]]],[1570710063080,["GJX@GJXAIOU",[[1,21339,"\n"]],[21338,21338],[21339,21339]]],[1570710066953,["GJX@GJXAIOU",[[1,21339,"package nowcoder.easy.day03;\n\npublic class PrintCommonPart {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static void printCommonPart(Node head1, Node head2) {\n\t\tSystem.out.print(\"Common Part: \");\n\t\twhile (head1 != null && head2 != null) {\n\t\t\tif (head1.value < head2.value) {\n\t\t\t\thead1 = head1.next;\n\t\t\t} else if (head1.value > head2.value) {\n\t\t\t\thead2 = head2.next;\n\t\t\t} else {\n\t\t\t\tSystem.out.print(head1.value + \" \");\n\t\t\t\thead1 = head1.next;\n\t\t\t\thead2 = head2.next;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printLinkedList(Node node) {\n\t\tSystem.out.print(\"Linked List: \");\n\t\twhile (node != null) {\n\t\t\tSystem.out.print(node.value + \" \");\n\t\t\tnode = node.next;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode node1 = new Node(2);\n\t\tnode1.next = new Node(3);\n\t\tnode1.next.next = new Node(5);\n\t\tnode1.next.next.next = new Node(6);\n\n\t\tNode node2 = new Node(1);\n\t\tnode2.next = new Node(2);\n\t\tnode2.next.next = new Node(5);\n\t\tnode2.next.next.next = new Node(7);\n\t\tnode2.next.next.next.next = new Node(8);\n\n\t\tprintLinkedList(node1);\n\t\tprintLinkedList(node2);\n\t\tprintCommonPart(node1, node2);\n\t}\n}\n"]],[21339,21339],[22566,22566]]],[1570710070951,["GJX@GJXAIOU",[[-1,22576,"\n"]],[22575,22575],[22574,22574]]],[1570710071086,["GJX@GJXAIOU",[[-1,22575,"\n"]],[22574,22574],[22573,22573]]],[1570710071336,["GJX@GJXAIOU",[[-1,22574,"\n"]],[22573,22573],[22572,22572]]],[1570710072010,["GJX@GJXAIOU",[[-1,22573,"\n"]],[22572,22572],[22571,22571]]],[1570712683088,[null,[[-1,24180," "],[1,24181,"在"],[-1,24200,"\n"],[1,24201," "],[1,26684,"\n"]],[24180,24180],[26685,26685]]],[1570712683088,[null,[[1,24180," "],[-1,24180,"在"],[1,24200,"\n"],[-1,24200," "],[-1,26684,"\n"]],[26685,26685],[24180,24180]]],[1570712675570,["GJX@GJXAIOU",[[1,23263,"```"]],[23263,23263],[23266,23266]]],[1570712675623,["GJX@GJXAIOU",[[1,23266,"language\n```\n"]],[23266,23266],[23266,23274]]],[1570712676049,["GJX@GJXAIOU",[[-1,23266,"language"],[1,23274,"j"]],[23266,23274],[23267,23267]]],[1570712676625,["GJX@GJXAIOU",[[1,23267,"ava"]],[23267,23267],[23270,23270]]],[1570712676853,["GJX@GJXAIOU",[[1,23271,"\n"]],[23270,23270],[23271,23271]]],[1570712679703,["GJX@GJXAIOU",[[1,23271,"package nowcoder.easy.day03;\n\nimport java.util.Stack;\n\n/**\n * @author GJXAIOU\n */\npublic class IsPalindromeList {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\t// 每次都压栈，空间复杂度为：O(N)\n\tpublic static boolean isPalindrome1(Node head) {\n\t\tStack<Node> stack = new Stack<Node>();\n\t\tNode cur = head;\n\t\twhile (cur != null) {\n\t\t\tstack.push(cur);\n\t\t\tcur = cur.next;\n\t\t}\n\t\twhile (head != null) {\n\t\t\tif (head.value != stack.pop().value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\thead = head.next;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// 快慢指针，空间复杂度为：O(N)，实际使用 n/2 空间\n\tpublic static boolean isPalindrome2(Node head) {\n\t\tif (head == null || head.next == null) {\n\t\t\treturn true;\n\t\t}\n\t\tNode right = head.next;\n\t\tNode cur = head;\n\t\twhile (cur.next != null && cur.next.next != null) {\n\t\t\tright = right.next;\n\t\t\tcur = cur.next.next;\n\t\t}\n\t\tStack<Node> stack = new Stack<Node>();\n\t\twhile (right != null) {\n\t\t\tstack.push(right);\n\t\t\tright = right.next;\n\t\t}\n\t\twhile (!stack.isEmpty()) {\n\t\t\tif (head.value != stack.pop().value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\thead = head.next;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// need O(1) extra space\n\tpublic static boolean isPalindrome3(Node head) {\n\t\tif (head == null || head.next == null) {\n\t\t\treturn true;\n\t\t}\n\t\t// slowPointer 是慢指针，fastPointer 是快指针\n\t\tNode slowPointer = head;\n\t\tNode fastPointer = head;\n\t\t// 寻找中间节点\n\t\twhile (fastPointer.next != null && fastPointer.next.next != null) {\n\t\t\tslowPointer = slowPointer.next;\n\t\t\tfastPointer = fastPointer.next.next;\n\t\t}\n\t\t// 快指针指向右半部分第一个节点\n\t\tfastPointer = slowPointer.next;\n\t\t// 中间节点指向 null\n\t\tslowPointer.next = null;\n\t\t// tmpNode 保存下一个结点\n\t\tNode tmpNode = null;\n\t\t// 反转右半部分\n\t\twhile (fastPointer != null) {\n\t\t\ttmpNode = fastPointer.next;\n\t\t\tfastPointer.next = slowPointer;\n\t\t\tslowPointer = fastPointer;\n\t\t\tfastPointer = tmpNode;\n\t\t}\n\t\ttmpNode = slowPointer; // tmpNode -> save last node\n\t\tfastPointer = head;// fastPointer -> left first node\n\t\tboolean res = true;\n\t\twhile (slowPointer != null && fastPointer != null) { // check palindrome\n\t\t\tif (slowPointer.value != fastPointer.value) {\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tslowPointer = slowPointer.next; // left to mid\n\t\t\tfastPointer = fastPointer.next; // right to mid\n\t\t}\n\t\tslowPointer = tmpNode.next;\n\t\ttmpNode.next = null;\n\t\t// 把逆序的再逆回来\n\t\twhile (slowPointer != null) {\n\t\t\tfastPointer = slowPointer.next;\n\t\t\tslowPointer.next = tmpNode;\n\t\t\ttmpNode = slowPointer;\n\t\t\tslowPointer = fastPointer;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static void printLinkedList(Node node) {\n\t\tSystem.out.print(\"Linked List: \");\n\t\twhile (node != null) {\n\t\t\tSystem.out.print(node.value + \" \");\n\t\t\tnode = node.next;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tNode head = null;\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(3);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(3);\n\t\thead.next.next.next = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(2);\n\t\thead.next.next.next = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(3);\n\t\thead.next.next.next = new Node(2);\n\t\thead.next.next.next.next = new Node(1);\n\t\tprintLinkedList(head);\n\t\tSystem.out.print(isPalindrome1(head) + \" | \");\n\t\tSystem.out.print(isPalindrome2(head) + \" | \");\n\t\tSystem.out.println(isPalindrome3(head) + \" | \");\n\t\tprintLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t}\n\n}\n"]],[23271,23271],[28944,28944]]],[1570712743089,[null,[[-1,29866," "],[1,29867,"在"],[-1,29886,"\n"],[1,29887," "],[1,32370,"\n"]],[29866,29866],[32371,32371]]],[1570712743089,[null,[[1,29866," "],[-1,29866,"在"],[1,29886,"\n"],[-1,29886," "],[-1,32370,"\n"]],[32371,32371],[29866,29866]]],[1570712697592,["GJX@GJXAIOU",[[1,29891,"\n"]],[29888,29888],[29889,29889]]],[1570712697769,["GJX@GJXAIOU",[[1,29892,"\n"]],[29889,29889],[29890,29890]]],[1570713403103,[null,[[-1,29866," "],[1,29867,"在"],[-1,29886,"\n"],[1,29887," "],[1,32372,"\n"]],[29866,29866],[32373,32373]]],[1570713403103,[null,[[1,29866," "],[-1,29866,"在"],[1,29886,"\n"],[-1,29886," "],[-1,32372,"\n"]],[32373,32373],[29866,29866]]],[1570713355802,["GJX@GJXAIOU",[[1,29889,"```"]],[29889,29889],[29892,29892]]],[1570713355860,["GJX@GJXAIOU",[[1,29892,"language\n```\n"]],[29892,29892],[29892,29900]]],[1570713356724,["GJX@GJXAIOU",[[-1,29892,"language"],[1,29900,"j"]],[29892,29900],[29893,29893]]],[1570713357300,["GJX@GJXAIOU",[[1,29893,"ava"]],[29893,29893],[29896,29896]]],[1570713357597,["GJX@GJXAIOU",[[1,29897,"\n"]],[29896,29896],[29897,29897]]],[1570713360303,["GJX@GJXAIOU",[[1,29897,"package nowcoder.easy.day03;\n\npublic class TurnListToSmallerEqualBigger {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static Node listPartition1(Node head, int num) {\n\t\tif (head == null) {\n\t\t\treturn head;\n\t\t}\n\t\tNode cur = head;\n\t\tint i = 0;\n\t\twhile (cur != null) {\n\t\t\ti++;\n\t\t\tcur = cur.next;\n\t\t}\n\t\tNode[] nodeArr = new Node[i];\n\t\ti = 0;\n\t\tcur = head;\n\t\tfor (i = 0; i != nodeArr.length; i++) {\n\t\t\tnodeArr[i] = cur;\n\t\t\tcur = cur.next;\n\t\t}\n\t\tarrPartition(nodeArr, num);\n\t\tfor (i = 1; i != nodeArr.length; i++) {\n\t\t\tnodeArr[i - 1].next = nodeArr[i];\n\t\t}\n\t\tnodeArr[i - 1].next = null;\n\t\treturn nodeArr[0];\n\t}\n\n\tpublic static void arrPartition(Node[] nodeArr, int num) {\n\t\tint small = -1;\n\t\tint big = nodeArr.length;\n\t\tint index = 0;\n\t\twhile (index != big) {\n\t\t\tif (nodeArr[index].value < num) {\n\t\t\t\tswap(nodeArr, ++small, index++);\n\t\t\t} else if (nodeArr[index].value == num) {\n\t\t\t\tindex++;\n\t\t\t} else {\n\t\t\t\tswap(nodeArr, --big, index);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void swap(Node[] nodeArr, int a, int b) {\n\t\tNode tmp = nodeArr[a];\n\t\tnodeArr[a] = nodeArr[b];\n\t\tnodeArr[b] = tmp;\n\t}\n\n\t/**\n\t * 实现稳定且空间复杂度为O(1)\n\t * @param head\n\t * @param num\n\t * @return\n\t */\n\tpublic static Node listPartition2(Node head, int num) {\n\t\tNode lessHead = null;\n\t\tNode lessTail = null;\n\t\tNode equalHead = null;\n\t\tNode equalTail = null;\n\t\tNode moreHead = null;\n\t\tNode moreTail = null;\n\t\tNode next = null;\n\t\t// 将每次结点都分配到三个链表之一\n\t\twhile (head != null) {\n\t\t\tnext = head.next;\n\t\t\thead.next = null;\n\t\t\tif (head.value < num) {\n\t\t\t\tif (lessHead == null) {\n\t\t\t\t\tlessHead = head;\n\t\t\t\t\tlessTail = head;\n\t\t\t\t} else {\n\t\t\t\t\tlessTail.next = head;\n\t\t\t\t\tlessTail = head;\n\t\t\t\t}\n\t\t\t} else if (head.value == num) {\n\t\t\t\tif (equalHead == null) {\n\t\t\t\t\tequalHead = head;\n\t\t\t\t\tequalTail = head;\n\t\t\t\t} else {\n\t\t\t\t\tequalTail.next = head;\n\t\t\t\t\tequalTail = head;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (moreHead == null) {\n\t\t\t\t\tmoreHead = head;\n\t\t\t\t\tmoreTail = head;\n\t\t\t\t} else {\n\t\t\t\t\tmoreTail.next = head;\n\t\t\t\t\tmoreTail = head;\n\t\t\t\t}\n\t\t\t}\n\t\t\thead = next;\n\t\t}\n\t\t// small and equal reconnect\n\t\tif (lessTail != null) {\n\t\t\tlessTail.next = equalHead;\n\t\t\tequalTail = equalTail == null ? lessTail : equalTail;\n\t\t}\n\t\t// all reconnect\n\t\tif (equalTail != null) {\n\t\t\tequalTail.next = moreHead;\n\t\t}\n\t\treturn lessHead != null ? lessHead : equalHead != null ? equalHead : moreHead;\n\t}\n\n\tpublic static void printLinkedList(Node node) {\n\t\tSystem.out.print(\"Linked List: \");\n\t\twhile (node != null) {\n\t\t\tSystem.out.print(node.value + \" \");\n\t\t\tnode = node.next;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head1 = new Node(7);\n\t\thead1.next = new Node(9);\n\t\thead1.next.next = new Node(1);\n\t\thead1.next.next.next = new Node(8);\n\t\thead1.next.next.next.next = new Node(5);\n\t\thead1.next.next.next.next.next = new Node(2);\n\t\thead1.next.next.next.next.next.next = new Node(5);\n\t\tprintLinkedList(head1);\n\t\t// head1 = listPartition1(head1, 4);\n\t\thead1 = listPartition2(head1, 5);\n\t\tprintLinkedList(head1);\n\t}\n}\n"]],[29897,29897],[32932,32932]]],[1570713463110,[null,[[-1,29866," "],[1,29867,"在"],[-1,29886,"\n"],[1,29887," "],[1,35420,"\n"]],[29866,29866],[35421,35421]]],[1570713463110,[null,[[1,29866," "],[-1,29866,"在"],[1,29886,"\n"],[-1,29886," "],[-1,35420,"\n"]],[35421,35421],[29866,29866]]],[1570713433365,["GJX@GJXAIOU",[[1,34078,"```"]],[34078,34078],[34081,34081]]],[1570713433478,["GJX@GJXAIOU",[[1,34081,"language\n```\n"]],[34081,34081],[34081,34089]]],[1570713434074,["GJX@GJXAIOU",[[-1,34081,"language"],[1,34089,"j"]],[34081,34089],[34082,34082]]],[1570713434773,["GJX@GJXAIOU",[[1,34082,"ava"]],[34082,34082],[34085,34085]]],[1570713434959,["GJX@GJXAIOU",[[1,34086,"\n"]],[34085,34085],[34086,34086]]],[1570713438222,["GJX@GJXAIOU",[[1,34086,"package nowcoder.easy.day03;\n\nimport java.util.HashMap;\n\npublic class CopyListWithRandom {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\t\tpublic Node rand;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\t// 首先准备一个 hash 表\n\tpublic static Node copyListWithRand1(Node head) {\n\t\tHashMap<Node, Node> map = new HashMap<Node, Node>();\n\t\tNode cur = head;\n\t\twhile (cur != null) {\n\t\t\t// cur：在原链表中遍历到的节点，后面的 new Node() 就是生成对应的拷贝节点；最后放入 map\n\t\t\tmap.put(cur, new Node(cur.value));\n\t\t\tcur = cur.next;\n\t\t}\n\t\tcur = head;\n\t\twhile (cur != null) {\n\t\t\t// 拷贝节点的 next 应该指向原来 cur 节点的 next节点对应的 value值；\n\t\t\tmap.get(cur).next = map.get(cur.next);\n\t\t\tmap.get(cur).rand = map.get(cur.rand);\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn map.get(head);\n\t}\n\n\n\n\tpublic static Node copyListWithRand2(Node head) {\n\t\tif (head == null) {\n\t\t\treturn null;\n\t\t}\n\t\tNode cur = head;\n\t\tNode next = null;\n\t\t// copy node and link to every node\n\t\twhile (cur != null) {\n\t\t\tnext = cur.next;\n\t\t\tcur.next = new Node(cur.value);\n\t\t\tcur.next.next = next;\n\t\t\tcur = next;\n\t\t}\n\t\tcur = head;\n\t\tNode curCopy = null;\n\t\t// set copy node rand\n\t\twhile (cur != null) {\n\t\t\tnext = cur.next.next;\n\t\t\tcurCopy = cur.next;\n\t\t\tcurCopy.rand = cur.rand != null ? cur.rand.next : null;\n\t\t\tcur = next;\n\t\t}\n\t\tNode res = head.next;\n\t\tcur = head;\n\t\t// split\n\t\twhile (cur != null) {\n\t\t\tnext = cur.next.next;\n\t\t\tcurCopy = cur.next;\n\t\t\tcur.next = next;\n\t\t\tcurCopy.next = next != null ? next.next : null;\n\t\t\tcur = next;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static void printRandLinkedList(Node head) {\n\t\tNode cur = head;\n\t\tSystem.out.print(\"order: \");\n\t\twhile (cur != null) {\n\t\t\tSystem.out.print(cur.value + \" \");\n\t\t\tcur = cur.next;\n\t\t}\n\t\tSystem.out.println();\n\t\tcur = head;\n\t\tSystem.out.print(\"rand:  \");\n\t\twhile (cur != null) {\n\t\t\tSystem.out.print(cur.rand == null ? \"- \" : cur.rand.value + \" \");\n\t\t\tcur = cur.next;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = null;\n\t\tNode res1 = null;\n\t\tNode res2 = null;\n\t\tprintRandLinkedList(head);\n\t\tres1 = copyListWithRand1(head);\n\t\tprintRandLinkedList(res1);\n\t\tres2 = copyListWithRand2(head);\n\t\tprintRandLinkedList(res2);\n\t\tprintRandLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t\thead = new Node(1);\n\t\thead.next = new Node(2);\n\t\thead.next.next = new Node(3);\n\t\thead.next.next.next = new Node(4);\n\t\thead.next.next.next.next = new Node(5);\n\t\thead.next.next.next.next.next = new Node(6);\n\n\t\thead.rand = head.next.next.next.next.next; // 1 -> 6\n\t\thead.next.rand = head.next.next.next.next.next; // 2 -> 6\n\t\thead.next.next.rand = head.next.next.next.next; // 3 -> 5\n\t\thead.next.next.next.rand = head.next.next; // 4 -> 3\n\t\thead.next.next.next.next.rand = null; // 5 -> null\n\t\thead.next.next.next.next.next.rand = head.next.next.next; // 6 -> 4\n\n\t\tprintRandLinkedList(head);\n\t\tres1 = copyListWithRand1(head);\n\t\tprintRandLinkedList(res1);\n\t\tres2 = copyListWithRand2(head);\n\t\tprintRandLinkedList(res2);\n\t\tprintRandLinkedList(head);\n\t\tSystem.out.println(\"=========================\");\n\n\t}\n\n}\n"]],[34086,34086],[37110,37110]]],[1570713480609,[null,[[-1,29866," "],[1,29867,"在"],[-1,29886,"\n"],[1,29887," "],[1,38457,"\n"]],[29866,29866],[38458,38458]]],[1570713480609,[null,[[1,29866," "],[-1,29866,"在"],[1,29886,"\n"],[-1,29886," "],[-1,38457,"\n"]],[38458,38458],[29866,29866]]],[1570713473735,["GJX@GJXAIOU",[[1,38459,"```"]],[38459,38459],[38462,38462]]],[1570713473917,["GJX@GJXAIOU",[[1,38462,"language\n```\n"]],[38462,38462],[38462,38470]]],[1570713474940,["GJX@GJXAIOU",[[-1,38462,"language"],[1,38470,"j"]],[38462,38470],[38463,38463]]],[1570713475642,["GJX@GJXAIOU",[[1,38463,"ava"]],[38463,38463],[38466,38466]]],[1570713476011,["GJX@GJXAIOU",[[1,38467,"\n"]],[38466,38466],[38467,38467]]],[1570713478638,["GJX@GJXAIOU",[[1,38467,"package nowcoder.easy.day03;\n\npublic class FindFirstIntersectNode {\n\n\t// 单链表结构\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node next;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\t// 主函数，传入 head1和 head2，如果相交返回第一个相交节点，不想交返回空\n\tpublic static Node getIntersectNode(Node head1, Node head2) {\n\t\tif (head1 == null || head2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// 分别得到第一个入环节点\n\t\tNode loop1 = getLoopNode(head1);\n\t\tNode loop2 = getLoopNode(head2);\n\t\t// 两个无环链表的相交问题\n\t\tif (loop1 == null && loop2 == null) {\n\t\t\treturn noLoop(head1, head2);\n\t\t}\n\t\t// 两个有环链表相交问题\n\t\tif (loop1 != null && loop2 != null) {\n\t\t\treturn bothLoop(head1, loop1, head2, loop2);\n\t\t}\n\t\treturn null;\n\t}\n\n\t// 返回第一个入环节点\n\tpublic static Node getLoopNode(Node head) {\n\t\tif (head == null || head.next == null || head.next.next == null) {\n\t\t\treturn null;\n\t\t}\n\t\tNode n1 = head.next; // n1 -> slow\n\t\tNode n2 = head.next.next; // n2 -> fast\n\t\twhile (n1 != n2) {\n\t\t\tif (n2.next == null || n2.next.next == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tn2 = n2.next.next;\n\t\t\tn1 = n1.next;\n\t\t}\n\t\t// 快指针回到开头\n\t\tn2 = head; // n2 -> walk again from head\n\t\twhile (n1 != n2) {\n\t\t\tn1 = n1.next;\n\t\t\tn2 = n2.next;\n\t\t}\n\t\treturn n1;\n\t}\n\n\t// 两个无环链表相交问题\n\tpublic static Node noLoop(Node head1, Node head2) {\n\t\tif (head1 == null || head2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// n 是两个链表差值关系\n\t\tNode cur1 = head1;\n\t\tNode cur2 = head2;\n\t\tint n = 0;\n\t\twhile (cur1.next != null) {\n\t\t\tn++;\n\t\t\tcur1 = cur1.next;\n\t\t}\n\t\twhile (cur2.next != null) {\n\t\t\tn--;\n\t\t\tcur2 = cur2.next;\n\t\t}\n\t\tif (cur1 != cur2) {\n\t\t\treturn null;\n\t\t}\n\t\t// 在定位哪一个是长链表，哪一个是短链表\n\t\t// cur1 指向长链表的头部，cur2 指向短链表的头部\n\t\tcur1 = n > 0 ? head1 : head2;\n\t\tcur2 = cur1 == head1 ? head2 : head1;\n\t\tn = Math.abs(n);\n\t\t// 长的先走 n 步，然后短的再走，最后返回的 cur1 就是他们进入的第一个相交节点\n\t\twhile (n != 0) {\n\t\t\tn--;\n\t\t\tcur1 = cur1.next;\n\t\t}\n\t\twhile (cur1 != cur2) {\n\t\t\tcur1 = cur1.next;\n\t\t\tcur2 = cur2.next;\n\t\t}\n\t\treturn cur1;\n\t}\n\n\t// 两个有环链表相交问题\n\tpublic static Node bothLoop(Node head1, Node loop1, Node head2, Node loop2) {\n\t\tNode cur1 = null;\n\t\tNode cur2 = null;\n\t\t// loop1 = loop2 就是第二个拓扑，\n\t\tif (loop1 == loop2) {\n\t\t\tcur1 = head1;\n\t\t\tcur2 = head2;\n\t\t\tint n = 0;\n\t\t\twhile (cur1 != loop1) {\n\t\t\t\tn++;\n\t\t\t\tcur1 = cur1.next;\n\t\t\t}\n\t\t\twhile (cur2 != loop2) {\n\t\t\t\tn--;\n\t\t\t\tcur2 = cur2.next;\n\t\t\t}\n\t\t\tcur1 = n > 0 ? head1 : head2;\n\t\t\tcur2 = cur1 == head1 ? head2 : head1;\n\t\t\tn = Math.abs(n);\n\t\t\twhile (n != 0) {\n\t\t\t\tn--;\n\t\t\t\tcur1 = cur1.next;\n\t\t\t}\n\t\t\twhile (cur1 != cur2) {\n\t\t\t\tcur1 = cur1.next;\n\t\t\t\tcur2 = cur2.next;\n\t\t\t}\n\t\t\treturn cur1;\n\t\t} else {\n\t\t\t// 其他两种情况，loop1 往下跑，看能不能遇到 loop2\n\t\t\tcur1 = loop1.next;\n\t\t\twhile (cur1 != loop1) {\n\t\t\t\tif (cur1 == loop2) {\n\t\t\t\t\treturn loop1;\n\t\t\t\t}\n\t\t\t\tcur1 = cur1.next;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// 1->2->3->4->5->6->7->null\n\t\tNode head1 = new Node(1);\n\t\thead1.next = new Node(2);\n\t\thead1.next.next = new Node(3);\n\t\thead1.next.next.next = new Node(4);\n\t\thead1.next.next.next.next = new Node(5);\n\t\thead1.next.next.next.next.next = new Node(6);\n\t\thead1.next.next.next.next.next.next = new Node(7);\n\n\t\t// 0->9->8->6->7->null\n\t\tNode head2 = new Node(0);\n\t\thead2.next = new Node(9);\n\t\thead2.next.next = new Node(8);\n\t\thead2.next.next.next = head1.next.next.next.next.next; // 8->6\n\t\tSystem.out.println(getIntersectNode(head1, head2).value);\n\n\t\t// 1->2->3->4->5->6->7->4...\n\t\thead1 = new Node(1);\n\t\thead1.next = new Node(2);\n\t\thead1.next.next = new Node(3);\n\t\thead1.next.next.next = new Node(4);\n\t\thead1.next.next.next.next = new Node(5);\n\t\thead1.next.next.next.next.next = new Node(6);\n\t\thead1.next.next.next.next.next.next = new Node(7);\n\t\thead1.next.next.next.next.next.next = head1.next.next.next; // 7->4\n\n\t\t// 0->9->8->2...\n\t\thead2 = new Node(0);\n\t\thead2.next = new Node(9);\n\t\thead2.next.next = new Node(8);\n\t\thead2.next.next.next = head1.next; // 8->2\n\t\tSystem.out.println(getIntersectNode(head1, head2).value);\n\n\t\t// 0->9->8->6->4->5->6..\n\t\thead2 = new Node(0);\n\t\thead2.next = new Node(9);\n\t\thead2.next.next = new Node(8);\n\t\thead2.next.next.next = head1.next.next.next.next.next; // 8->6\n\t\tSystem.out.println(getIntersectNode(head1, head2).value);\n\n\t}\n\n}\n"]],[38467,38467],[42549,42549]]],[1570716480680,[null,[[-1,29866," "],[1,29867,"在"],[-1,29886,"\n"],[1,29887," "],[1,42553,"\n"]],[29866,29866],[42554,42554]]],[1570716480680,[null,[[1,29866," "],[-1,29866,"在"],[1,29886,"\n"],[-1,29886," "],[-1,42553,"\n"]],[42554,42554],[29866,29866]]],[1570716454599,["GJX@GJXAIOU",[[-1,1031,"\t"],[-1,1049,"\t"],[1,1050," "],[-1,1054,"\t"],[1,1055,"  "],[-1,1090,"\t\t"],[1,1092,"      "],[-1,1115,"\t\t"],[1,1117," "],[-1,1139,"\t\t"],[1,1141," "],[-1,1164,"\t\t"],[1,1166," "],[-1,1186,"\n\n\t\t"],[1,1190,"    // 初始化队列\n  "],[-1,1226,"\t\t\t"],[1,1229,"         "],[-1,1249,"\t\t\t\t"],[1,1253,"            "],[-1,1321,"\t\t\t}\n\t\t\t"],[1,1329,"  }\n         "],[-1,1358,"\t\t\t"],[1,1361,"  "],[-1,1371,"\t\t\t"],[1,1374,"  "],[-1,1385,"\t\t\t"],[1,1388,"  "],[-1,1397,"\t\t}\n\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\n\t\t// 加入一个数\n\t\t"],[1,1510,"  }\n\n      /**\n * 向队列中放入一个数\n  * @param obj：需要放进去的数\n  */\n  "],[-1,1538,"\t\t\t"],[1,1541,"         "],[-1,1567,"\t\t\t\t"],[1,1571,"            "],[-1,1634,"\t\t\t}\n\t\t\t"],[1,1642,"  }\n         "],[-1,1650,"\t\t\t"],[1,1653,"  "],[-1,1665,"执行"],[-1,1671,"\n\t\t\t"],[1,1675,"，因为 end 位置是上下移动的；\n  "],[-1,1691,"\t\t\t"],[1,1694,"  "],[1,1722,"从头开始写入数据，可以覆盖之前的元素；"],[-1,1738,"\n\t\t\t"],[1,1742,"  "],[1,1748,"("],[1,1769,")"],[-1,1785,"\t\t}\n\n\t\t"],[1,1792,"  }\n\n      "],[-1,1797,"一个数\n\t\t"],[1,1803,"栈顶元素\n  "],[-1,1827,"\t\t\t"],[1,1830,"         "],[-1,1847,"\t\t\t\t"],[1,1851,"            "],[-1,1915,"\t\t\t}\n\t\t\t"],[1,1923,"  }\n         "],[-1,1931,"\t\t\t"],[1,1934,"  "],[1,1978,"，最终弹出的是原始 start位置元素"],[-1,1980,"\t\t\t"],[1,1983,"  "],[-1,2000,"\t\t\t"],[1,2003,"  "],[1,2011,"("],[1,2034,")"],[-1,2052,"\t\t\t"],[1,2055," "],[-1,2072,"\t\t}\n\t}\n\n\t"],[1,2081,"  }\n\n      // 取出栈顶的元素，但是栈顶不动\n  public Integer peek() {\n         if (size == 0) {\n            return null;\n  }\n         return arr[start];\n  }\n   }\n\n   "],[-1,2123,"\t"],[1,2124,"   "],[-1,2127,"\n"]],[1027,2128],[2334,2334]]],[1570716458031,["GJX@GJXAIOU",[[1,1031,"\t"],[1,1048,"\t"],[-1,1048," "],[1,1053,"\t"],[-1,1053,"  "],[1,1090,"\t\t"],[-1,1090,"      "],[1,1119,"\t\t"],[-1,1119," "],[1,1142,"\t\t"],[-1,1142," "],[1,1166,"\t\t"],[-1,1166," "],[1,1187,"\n\n\t\t"],[-1,1187,"    // 初始化队列\n  "],[1,1238,"\t\t\t"],[-1,1238,"         "],[1,1267,"\t\t\t\t"],[-1,1267,"            "],[1,1347,"\t\t\t}\n\t\t\t"],[-1,1347,"  }\n         "],[1,1389,"\t\t\t"],[-1,1389,"  "],[1,1401,"\t\t\t"],[-1,1401,"  "],[1,1414,"\t\t\t"],[-1,1414,"  "],[1,1425,"\t\t}\n\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\n\t\t// 加入一个数\n\t\t"],[-1,1425,"  }\n\n      /**\n * 向队列中放入一个数\n  * @param obj：需要放进去的数\n  */\n  "],[1,1511,"\t\t\t"],[-1,1511,"         "],[1,1546,"\t\t\t\t"],[-1,1546,"            "],[1,1621,"\t\t\t}\n\t\t\t"],[-1,1621,"  }\n         "],[1,1642,"\t\t\t"],[-1,1642,"  "],[1,1656,"执行"],[1,1660,"\n\t\t\t"],[-1,1660,"，因为 end 位置是上下移动的；\n  "],[1,1696,"\t\t\t"],[-1,1696,"  "],[-1,1726,"从头开始写入数据，可以覆盖之前的元素；"],[1,1761,"\n\t\t\t"],[-1,1761,"  "],[-1,1769,"("],[-1,1791,")"],[1,1808,"\t\t}\n\n\t\t"],[-1,1808,"  }\n\n      "],[1,1824,"一个数\n\t\t"],[-1,1824,"栈顶元素\n  "],[1,1855,"\t\t\t"],[-1,1855,"         "],[1,1881,"\t\t\t\t"],[-1,1881,"            "],[1,1957,"\t\t\t}\n\t\t\t"],[-1,1957,"  }\n         "],[1,1978,"\t\t\t"],[-1,1978,"  "],[-1,2024,"，最终弹出的是原始 start位置元素"],[1,2045,"\t\t\t"],[-1,2045,"  "],[1,2064,"\t\t\t"],[-1,2064,"  "],[-1,2074,"("],[-1,2098,")"],[1,2117,"\t\t\t"],[-1,2117," "],[1,2135,"\t\t}\n\t}\n\n\t"],[-1,2135,"  }\n\n      // 取出栈顶的元素，但是栈顶不动\n  public Integer peek() {\n         if (size == 0) {\n            return null;\n  }\n         return arr[start];\n  }\n   }\n\n   "],[1,2328,"\t"],[-1,2328,"   "],[1,2334,"\n"]],[2334,2334],[1027,2128]]],[1570716468610,["GJX@GJXAIOU",[[-1,1026,"\t"],[1,1027,""],[1,1188,"\t\t// 初始化队列\n"],[-1,1404,"public Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\n\t\t// 加入一个数"],[1,1507,"/**\n\t\t * 向队列中放入一个数\n\t\t * @param obj：需要放进去的数\n\t\t */"],[-1,1665,"执行"],[1,1671,"，因为 end 位置是上下移动的；"],[1,1722,"从头开始写入数据，可以覆盖之前的元素；"],[1,1748,"("],[1,1769,")"],[-1,1797,"一个数"],[1,1800,"栈顶元素"],[1,1978,"，最终弹出的是原始 start位置元素"],[1,2011,"("],[1,2034,")"],[1,2069,"];\n\t\t}\n\n\t\t// 取出栈顶的元素，但是栈顶不动\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start"],[-1,2127,""],[1,2127,"\n"]],[1026,2127],[2256,2256]]],[1570716540680,[null,[[-1,29995," "],[1,29996,"在"],[-1,30015,"\n"],[1,30016," "],[1,42682,"\n"]],[29995,29995],[42683,42683]]],[1570716540680,[null,[[1,29995," "],[-1,29995,"在"],[1,30015,"\n"],[-1,30015," "],[-1,42682,"\n"]],[42683,42683],[29995,29995]]],[1570716486282,["GJX@GJXAIOU",[[-1,1026,"/**\n\t * 数组结构实现大小固定的队列\n\t */"]],[1026,1052],[1026,1026]]],[1570716491002,["GJX@GJXAIOU",[[-1,1027,"\tpublic static class ArrayToQueue {\n\t\tprivate Integer[] arr;\n\t\tprivate Integer size;\n\t\tprivate Integer start;\n\t\tprivate Integer end;\n\n\t\t// 初始化队列\n\t\tpublic ArrayToQueue(int initSize) {\n\t\t\tif (initSize < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"The init size is less than 0\");\n\t\t\t}\n\t\t\tarr = new Integer[initSize];\n\t\t\tsize = 0;\n\t\t\tstart = 0;\n\t\t\tend = 0;\n\t\t}\n\n\t\t/**\n\t\t * 向队列中放入一个数\n\t\t * @param obj：需要放进去的数\n\t\t */\n\t\tpublic void push(int obj) {\n\t\t\tif (size == arr.length) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is full\");\n\t\t\t}\n\t\t\tsize++;\n\t\t\t// 该数放在 end 的位置上，因为 end 位置是上下移动的；\n\t\t\tarr[end] = obj;\n\t\t\t// end 如果到底即 Length-1，就等于 0，从头开始写入数据，可以覆盖之前的元素；如果没有到底就 end + 1;\n\t\t\tend = (end == arr.length - 1) ? 0 : end + 1;\n\t\t}\n\n\t\t// 弹出栈顶元素\n\t\tpublic Integer poll() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is empty\");\n\t\t\t}\n\t\t\tsize--;\n\t\t\t// 因为 start 位置要改变，所有使用临时变量 tmp 记录一下 start 位置，最终弹出的是原始 start位置元素；\n\t\t\tint tmp = start;\n\t\t\tstart = (start == arr.length - 1) ? 0 : start + 1;\n\t\t\treturn arr[tmp];\n\t\t}\n\n\t\t// 取出栈顶的元素，但是栈顶不动\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t}\n}\n"]],[1026,2229],[1026,1026]]],[1570716493982,["GJX@GJXAIOU",[[1,1026,"    "]],[1026,1026],[1030,1030]]],[1570716498030,["GJX@GJXAIOU",[[1,1025,"    /**\n\t * 数组结构实现大小固定的队列\n\t */\n\tpublic static class ArrayToQueue {\n\t\tprivate Integer[] arr;\n\t\tprivate Integer size;\n\t\tprivate Integer start;\n\t\tprivate Integer end;\n\n\t\t// 初始化队列\n\t\tpublic ArrayToQueue(int initSize) {\n\t\t\tif (initSize < 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"The init size is less than 0\");\n\t\t\t}\n\t\t\tarr = new Integer[initSize];\n\t\t\tsize = 0;\n\t\t\tstart = 0;\n\t\t\tend = 0;\n\t\t}\n\n\t\t/**\n\t\t * 向队列中放入一个数\n\t\t * @param obj：需要放进去的数\n\t\t */\n\t\tpublic void push(int obj) {\n\t\t\tif (size == arr.length) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is full\");\n\t\t\t}\n\t\t\tsize++;\n\t\t\t// 该数放在 end 的位置上，因为 end 位置是上下移动的；\n\t\t\tarr[end] = obj;\n\t\t\t// end 如果到底即 Length-1，就等于 0，从头开始写入数据，可以覆盖之前的元素；如果没有到底就 end + 1;\n\t\t\tend = (end == arr.length - 1) ? 0 : end + 1;\n\t\t}\n\n\t\t// 弹出栈顶元素\n\t\tpublic Integer poll() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(\"The queue is empty\");\n\t\t\t}\n\t\t\tsize--;\n\t\t\t// 因为 start 位置要改变，所有使用临时变量 tmp 记录一下 start 位置，最终弹出的是原始 start位置元素；\n\t\t\tint tmp = start;\n\t\t\tstart = (start == arr.length - 1) ? 0 : start + 1;\n\t\t\treturn arr[tmp];\n\t\t}\n\n\t\t// 取出栈顶的元素，但是栈顶不动\n\t\tpublic Integer peek() {\n\t\t\tif (size == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[start];\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t}\n}\n"]],[1025,1025],[2259,2259]]],[1570716504082,["GJX@GJXAIOU",[[-1,2267,"\n"]],[2267,2267],[2266,2266]]],[1570716504304,["GJX@GJXAIOU",[[-1,2266,"\n"]],[2266,2266],[2265,2265]]],[1570716505043,["GJX@GJXAIOU",[[-1,2265,"\n"]],[2265,2265],[2264,2264]]],[1570716506510,["GJX@GJXAIOU",[[-1,2260,"    "]],[2264,2264],[2260,2260]]],[1570716506960,["GJX@GJXAIOU",[[-1,2260,"\n"]],[2260,2260],[2259,2259]]],[1570716507214,["GJX@GJXAIOU",[[-1,2259,"\n"]],[2259,2259],[2258,2258]]],[1570717500697,[null,[[-1,29995," "],[1,29996,"在"],[-1,30015,"\n"],[1,30016," "],[1,42682,"\n"]],[29995,29995],[42683,42683]]],[1570717500697,[null,[[1,29995," "],[-1,29995,"在"],[1,30015,"\n"],[-1,30015," "],[-1,42682,"\n"]],[42683,42683],[29995,29995]]],[1570717478364,["GJX@GJXAIOU",[[1,351,"// 初始化数组\n\t\t"],[-1,387,""],[-1,541,"/ 只将值返回给我，但是原来栈中该值仍然保存\n\t\tpublic Integer peek() {\n\t\t\tif (index == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr["],[1,647,"**\n\t\t * 实现在栈中压入一个数\n\t\t * @param obj：要压入的数\n\t\t *           "],[-1,652," - 1];\n\t\t}\n\n\t\t// 新进来一个数"],[1,675,"：指向的是栈中下一个有空位置的数组下标\n\t\t */"],[1,863,"\t\t\n"],[-1,872,"数"],[1,873,"栈顶的元素"],[-1,993,""],[1,1014,"];\n\t\t}\n\n\t\t// 只将值返回给我，但是原来栈中该值仍然保存\n\t\tpublic Integer peek() {\n\t\t\tif (index == 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn arr[index - 1"]],[202,1024],[1120,1120]]],[1570717490402,["GJX@GJXAIOU",[[-1,2363,"\n"]],[2362,2362],[2361,2361]]],[1570717490656,["GJX@GJXAIOU",[[-1,2362,"\n"]],[2361,2361],[2360,2360]]],[1570717491641,["GJX@GJXAIOU",[[-1,2361,"\n"]],[2360,2360],[2359,2359]]],[1570756159679,[null,[[-1,30088," "],[1,30089,"在"],[-1,30108,"\n"],[1,30109," "],[1,42775,"\n"]],[30088,30088],[42776,42776]]],[1570756159679,[null,[[1,30088," "],[-1,30088,"在"],[1,30108,"\n"],[-1,30108," "],[-1,42775,"\n"]],[42776,42776],[30088,30088]]],[1570756142873,["GJX@GJXAIOU",[[-1,2710,"就将当前数压入 min 栈的栈顶"]],[2710,2726],[2710,2710]]],[1570756143691,["GJX@GJXAIOU",[[1,2710,"bu"]],[2710,2710],[2712,2712]]],[1570756145059,["GJX@GJXAIOU",[[-1,2710,"bu"]],[2712,2712],[2710,2710]]],[1570756147329,["GJX@GJXAIOU",[[1,2710,"不发欧诺个"]],[2710,2710],[2715,2715]]],[1570756148600,["GJX@GJXAIOU",[[-1,2714,"个"]],[2715,2715],[2714,2714]]],[1570756148812,["GJX@GJXAIOU",[[1,2714,"="]],[2714,2714],[2715,2715]]],[1570756150650,["GJX@GJXAIOU",[[-1,2711,"发欧诺="]],[2715,2715],[2711,2711]]],[1570756153469,["GJX@GJXAIOU",[[1,2711,"动"]],[2711,2711],[2712,2712]]],[1570756699724,[null,[[-1,30074," "],[1,30075,"在"],[-1,30094,"\n"],[1,30095," "],[1,42761,"\n"]],[30074,30074],[42762,42762]]],[1570756699724,[null,[[1,30074," "],[-1,30074,"在"],[1,30094,"\n"],[-1,30094," "],[-1,42761,"\n"]],[42762,42762],[30074,30074]]],[1570756686207,["GJX@GJXAIOU",[[1,2710,"方法一是"]],[2710,2710],[2714,2714]]],[1570756691624,["GJX@GJXAIOU",[[1,2716,"，方法二十"]],[2716,2716],[2721,2721]]],[1570756692731,["GJX@GJXAIOU",[[-1,2720,"十"]],[2721,2721],[2720,2720]]],[1570756697982,["GJX@GJXAIOU",[[1,2720,"是将远离 "]],[2720,2720],[2725,2725]]],[1570756699252,["GJX@GJXAIOU",[[-1,2723,"离 "]],[2725,2725],[2723,2723]]],[1570756759724,[null,[[-1,30085," "],[1,30086,"在"],[-1,30105,"\n"],[1,30106," "],[1,42772,"\n"]],[30085,30085],[42773,42773]]],[1570756759724,[null,[[1,30085," "],[-1,30085,"在"],[1,30105,"\n"],[-1,30105," "],[-1,42772,"\n"]],[42773,42773],[30085,30085]]],[1570756700357,["GJX@GJXAIOU",[[-1,2722,"远"]],[2723,2723],[2722,2722]]],[1570756713542,["GJX@GJXAIOU",[[1,2722,"原来 Min 栈的栈顶元素再次压入一般"]],[2722,2722],[2741,2741]]],[1570756714160,["GJX@GJXAIOU",[[-1,2740,"般"]],[2741,2741],[2740,2740]]],[1570756717020,["GJX@GJXAIOU",[[1,2740,"遍"]],[2740,2740],[2741,2741]]],[1570756939726,[null,[[-1,30103," "],[1,30104,"在"],[-1,30123,"\n"],[1,30124," "],[1,42790,"\n"]],[30103,30103],[42791,42791]]],[1570756939726,[null,[[1,30103," "],[-1,30103,"在"],[1,30123,"\n"],[-1,30123," "],[-1,42790,"\n"]],[42791,42791],[30103,30103]]],[1570756904925,["GJX@GJXAIOU",[[-1,2806,"sort."],[1,2832,""],[1,2885,"\t/**\n\t * @author GJX\n\t * 该方法中当新加入的元素大于原来 Min 栈的栈顶元素时候，不动；\n\t */\n"],[1,2989,"\t\t// 因为每次都是创建新的栈，因此使用构造函数\n"],[-1,3839,"/ 下面是第二种设计，差不多"],[1,3853,"**\n\t * 下面方法和上面的唯一区别就是当新压入的数据大于原来 Min栈中栈顶的时候，将 Min 栈顶的元素再次压入；\n \t */"],[1,4743,"\t\tSystem.out.println(\"=====方法一获得的实时最小值和 pop 方法测试========\");\n"],[1,5053,"方法二获得的实时最小值和 pop 方法测试"],[-1,5065,"\n"],[-1,5075,"1"],[1,5076,"2"],[-1,5097,"1"],[1,5098,"2"],[-1,5351,""],[1,5352,"\n"]],[2798,5352],[5569,5569]]],[1570756911042,["GJX@GJXAIOU",[[-1,5246,"==="]],[5247,5247],[5244,5244]]],[1570756913563,["GJX@GJXAIOU",[[-1,5271,"===="]],[5271,5271],[5267,5267]]],[1570756914789,["GJX@GJXAIOU",[[-1,5269,"=="]],[5269,5269],[5267,5267]]],[1570756919192,["GJX@GJXAIOU",[[-1,4903,"==="]],[4905,4905],[4902,4902]]],[1570756921647,["GJX@GJXAIOU",[[-1,4926,"======"]],[4924,4930],[4924,4924]]],[1570758629941,[null,[[-1,30302," "],[1,30303,"在"],[-1,30322,"\n"],[1,30323," "],[1,42989,"\n"]],[30302,30302],[42990,42990]]],[1570758629941,[null,[[1,30302," "],[-1,30302,"在"],[1,30322,"\n"],[-1,30322," "],[-1,42989,"\n"]],[42990,42990],[30302,30302]]],[1570758587952,["GJX@GJXAIOU",[[1,6115,"/**\n\t * 使用两个队列实现栈结构\n\t */\n\t"],[-1,6135,"Stack"],[1,6140,"Queue"],[-1,6149,"Queue"],[1,6154,"Stack"],[-1,6167,"Stack"],[1,6172,"Queue"],[-1,6182,"s"],[1,6183,"da"],[-1,6185,"ckPush"],[-1,6203,"Stack"],[1,6208,"Queue"],[-1,6218,"stackPo"],[1,6225,"hel"],[-1,6238,"Stack"],[1,6243,"Queue"],[-1,6252,"Queue"],[1,6257,"Stack"],[-1,6265,"s"],[1,6266,"// 用双向链表实现，也可以使用动态数组\n\t\t\tda"],[-1,6268,"ckPush"],[-1,6281,"Stack"],[1,6286,"LinkedList"],[-1,6302,"stackPo"],[1,6309,"hel"],[-1,6317,"Stack"],[1,6322,"LinkedList"],[1,6342,"// 压数的时候直接在 data 中将该数压入\n\t\t"],[-1,6377,"stackPush.push"],[1,6391,"data.add"],[1,6409,"// 实现弹出一个数\n\t\t"],[-1,6422,"ll"],[1,6424,"p"],[-1,6436,"stackPop.empty() && stackPush.e"],[1,6467,"data.isE"],[-1,6509,"Queue"],[1,6514,"Stack"],[-1,6532," else if (stackPop.empty()) {\n\t"],[1,6563,"\n\t\t\t// 当 data 队列中不止一个数，将 data中所有数放进 help 中，当 data 中只剩一个数时候停止，然后将该数弹出并返回\n"],[-1,6573,"!stackPush.empty"],[1,6589,"data.size"],[1,6591," > 1"],[-1,6599,"\ts"],[1,6601,"help.add(da"],[-1,6603,"ckPop"],[-1,6610,"ush(s"],[1,6615,"oll());\n\t\t\t}\n\t\t\tint res = da"],[-1,6617,"ckPush"],[-1,6626,"p()"],[1,6629,"ll("],[-1,6635,"\t}"],[1,6637,"// 改变两个引用，就是 Help 栈变 data 栈， data栈变  help 栈；"],[-1,6641,"}"],[1,6642,"swap();"],[1,6653,"re"],[-1,6654,"tackPop.pop()"],[-1,6703,"stackPop.empty() && stackPush.e"],[1,6734,"data.isE"],[-1,6776,"Queue"],[1,6781,"Stack"],[-1,6799," else if (s"],[1,6810,"\n\t\t\twhile (da"],[-1,6812,"ckPop"],[1,6818,"siz"],[-1,6819,"mpty"],[1,6825," != 1"],[-1,6833,"while (!stackPush.empty()) {"],[1,6861,"help.add(data.poll());"],[1,6865,"}\n"],[-1,6867,"stackPop.push(s"],[1,6882,"\tint res = da"],[-1,6884,"ckPush"],[-1,6893,"p()"],[1,6896,"ll("],[-1,6902,"\t}"],[1,6904,"help.add(res);"],[-1,6908,"}"],[1,6909,"swap();"],[-1,6920,"stackPop.peek()"],[1,6935,"res;\n\t\t}\n\n\t\tprivate void swap() {\n\t\t\tQueue<Integer> tmp = help;\n\t\t\thelp = data;\n\t\t\tdata = tmp"],[-1,6943,"\n"],[1,6944,""]],[6115,6946],[7154,7154]]],[1570758611412,["GJX@GJXAIOU",[[-1,7585,"// 队列实现栈\n\t"],[-1,7615,"Queue"],[1,7620,"Stack"],[-1,7629,"Stack {\n\t\t"],[1,7639,"Queue {\n   "],[-1,7647,"Queue"],[1,7652,"Stack"],[-1,7662,"da"],[1,7664,"s"],[1,7666,"ckPush"],[-1,7668,"\t\t"],[1,7670," "],[-1,7678,"Queue"],[1,7683,"Stack"],[-1,7693,"help;\n\n\t\t"],[1,7702,"stackPop;   "],[-1,7709,"Queue"],[1,7714,"Stack"],[-1,7723,"Stack"],[1,7728,"Queue"],[-1,7733,"\t\t\t// 用双向链表实现，也可以使用动态数组\n\t\t\tda"],[1,7762,"      s"],[1,7764,"ckPush"],[-1,7771,"LinkedList"],[1,7781,"Stack"],[-1,7794,"\t\t\thel"],[1,7800,"  stackPo"],[-1,7808,"LinkedList"],[1,7818,"Stack"],[-1,7831,"\t\t}\n\n\t\t// 压数的时候直接在 data 中将该数压入\n\t\t"],[1,7864,"  }\n\n   // 向 push 栈中加入数据\n  "],[-1,7896,"\t\t\tdata.add"],[1,7907,"      stackPush.push"],[-1,7918,"\t\t}\n\n\t\t"],[1,7925,"  }\n\n   // 将 push 栈中数据全部倒入 pop 栈中，然后返回 Pop 栈顶元素\n  "],[-1,7937,"eek"],[1,7940,"oll"],[-1,7945,"\t\t\t"],[1,7948,"      "],[-1,7952,"data.isE"],[1,7960,"stackPop.empty() && stackPush.e"],[-1,7970,"\t\t\t\t"],[1,7974,"         "],[-1,8002,"Stack"],[1,8007,"Queue"],[-1,8021,"\t\t\t}\n\t\t\twhile (da"],[1,8038,"  } else if (s"],[1,8040,"ckPop"],[-1,8041,"siz"],[1,8045,"mpty"],[-1,8047," != 1"],[-1,8056,"\t\t\t\thelp.add(data.poll());\n\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\thelp.add(res);\n\t\t\tswa"],[1,8138,"         while (!stackPush.empty()) {\n            stackPop.push(stackPush.po"],[1,8141,")"],[-1,8143,"\t\t\t"],[1,8146,"  }\n      }\n      "],[-1,8153,"re"],[1,8156,"tackPop.pop()"],[-1,8158,"\t\t}\n\n\t\t// 出数的时候\n\t\t"],[1,8176,"  }\n\n   // 将 push 栈中数据全部倒入 Pop 栈，然后仅仅复制返回 pop 栈顶元素\n  "],[-1,8188,"op"],[1,8190,"eek"],[-1,8195,"\t\t\t"],[1,8198,"      "],[-1,8202,"data.isE"],[1,8210,"stackPop.empty() && stackPush.e"],[-1,8220,"\t\t\t\t"],[1,8224,"         "],[-1,8252,"Stack"],[1,8257,"Queue"],[-1,8271,"\t\t\t}\n\t\t\t// 当 data 队列中不止一个数，将 data中所有数放进 help 中，当 data 中只剩一个数时候停止，然后将该数弹出并返回\n\t\t\t"],[1,8350,"  } else if (stackPop.empty()) {\n         "],[-1,8357,"data.size"],[1,8366,"!stackPush.empty"],[-1,8368," > 1"],[-1,8376,"\t\t\t\thelp.add(da"],[1,8391,"            stackPop.push(s"],[1,8393,"ckPush"],[-1,8396,"ll"],[1,8398,"p"],[-1,8403,"\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\t// 改变两个引用，就是 Help 栈变 data 栈， data栈变"],[1,8472,"  }\n      }\n   "],[-1,8474,"help"],[-1,8479,"栈；\n\t\t\tswap();\n\t\t\t"],[-1,8503,"res;\n\t\t}\n\n\t\tprivate void swap() {\n\t\t\tQueue<Integer> tmp = help;\n\t\t\thelp = data"],[1,8581,"stackPop.peek()"],[-1,8583,"\t\t\tdata"],[-1,8591,"="],[-1,8593,"tmp;\n\t\t"],[-1,8602,"\t"]],[7585,8604],[8571,8571]]],[1570758613391,["GJX@GJXAIOU",[[1,7585,"// 队列实现栈\n\t"],[1,7605,"Queue"],[-1,7605,"Stack"],[1,7619,"Stack {\n\t\t"],[-1,7619,"Queue {\n   "],[1,7638,"Queue"],[-1,7638,"Stack"],[1,7653,"da"],[-1,7653,"s"],[-1,7656,"ckPush"],[1,7664,"\t\t"],[-1,7664," "],[1,7673,"Queue"],[-1,7673,"Stack"],[1,7688,"help;\n\n\t\t"],[-1,7688,"stackPop;   "],[1,7707,"Queue"],[-1,7707,"Stack"],[1,7721,"Stack"],[-1,7721,"Queue"],[1,7731,"\t\t\t// 用双向链表实现，也可以使用动态数组\n\t\t\tda"],[-1,7731,"      s"],[-1,7740,"ckPush"],[1,7753,"LinkedList"],[-1,7753,"Stack"],[1,7771,"\t\t\thel"],[-1,7771,"  stackPo"],[1,7788,"LinkedList"],[-1,7788,"Stack"],[1,7806,"\t\t}\n\n\t\t// 压数的时候直接在 data 中将该数压入\n\t\t"],[-1,7806,"  }\n\n   // 向 push 栈中加入数据\n  "],[1,7865,"\t\t\tdata.add"],[-1,7865,"      stackPush.push"],[1,7896,"\t\t}\n\n\t\t"],[-1,7896,"  }\n\n   // 将 push 栈中数据全部倒入 pop 栈中，然后返回 Pop 栈顶元素\n  "],[1,7958,"eek"],[-1,7958,"oll"],[1,7966,"\t\t\t"],[-1,7966,"      "],[1,7976,"data.isE"],[-1,7976,"stackPop.empty() && stackPush.e"],[1,8017,"\t\t\t\t"],[-1,8017,"         "],[1,8054,"Stack"],[-1,8054,"Queue"],[1,8073,"\t\t\t}\n\t\t\twhile (da"],[-1,8073,"  } else if (s"],[-1,8089,"ckPop"],[1,8095,"siz"],[-1,8096,"mpty"],[1,8102," != 1"],[1,8106,"\t\t\t\thelp.add(data.poll());\n\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\thelp.add(res);\n\t\t\tswa"],[-1,8106,"         while (!stackPush.empty()) {\n            stackPop.push(stackPush.po"],[-1,8185,")"],[1,8188,"\t\t\t"],[-1,8188,"  }\n      }\n      "],[1,8213,"re"],[-1,8214,"tackPop.pop()"],[1,8229,"\t\t}\n\n\t\t// 出数的时候\n\t\t"],[-1,8229,"  }\n\n   // 将 push 栈中数据全部倒入 Pop 栈，然后仅仅复制返回 pop 栈顶元素\n  "],[1,8294,"op"],[-1,8294,"eek"],[1,8302,"\t\t\t"],[-1,8302,"      "],[1,8312,"data.isE"],[-1,8312,"stackPop.empty() && stackPush.e"],[1,8353,"\t\t\t\t"],[-1,8353,"         "],[1,8390,"Stack"],[-1,8390,"Queue"],[1,8409,"\t\t\t}\n\t\t\t// 当 data 队列中不止一个数，将 data中所有数放进 help 中，当 data 中只剩一个数时候停止，然后将该数弹出并返回\n\t\t\t"],[-1,8409,"  } else if (stackPop.empty()) {\n         "],[1,8458,"data.size"],[-1,8458,"!stackPush.empty"],[1,8476," > 1"],[1,8480,"\t\t\t\thelp.add(da"],[-1,8480,"            stackPop.push(s"],[-1,8509,"ckPush"],[1,8518,"ll"],[-1,8518,"p"],[1,8524,"\t\t\t}\n\t\t\tint res = data.poll();\n\t\t\t// 改变两个引用，就是 Help 栈变 data 栈， data栈变"],[-1,8524,"  }\n      }\n   "],[1,8541,"help"],[1,8542,"栈；\n\t\t\tswap();\n\t\t\t"],[1,8549,"res;\n\t\t}\n\n\t\tprivate void swap() {\n\t\t\tQueue<Integer> tmp = help;\n\t\t\thelp = data"],[-1,8549,"stackPop.peek()"],[1,8566,"\t\t\tdata"],[1,8567,"="],[1,8568,"tmp;\n\t\t"],[1,8570,"\t"]],[8571,8571],[7585,8604]]],[1570758617768,["GJX@GJXAIOU",[[-1,7585,"// 队列实现栈\n\t"],[-1,7615,"Queue"],[1,7620,"Stack"],[-1,7629,"Stack"],[1,7634,"Queue"],[-1,7647,"Queue"],[1,7652,"Stack"],[-1,7662,"da"],[1,7664,"s"],[1,7666,"ckPush"],[-1,7678,"Queue"],[1,7683,"Stack"],[-1,7693,"hel"],[1,7696,"stackPo"],[-1,7709,"Queue"],[1,7714,"Stack"],[-1,7723,"Stack"],[1,7728,"Queue"],[-1,7736,"// 用双向链表实现，也可以使用动态数组\n\t\t\tda"],[1,7762,"s"],[1,7764,"ckPush"],[-1,7771,"LinkedList"],[1,7781,"Stack"],[-1,7797,"hel"],[1,7800,"stackPo"],[-1,7808,"LinkedList"],[1,7818,"Stack"],[-1,7841,"压数的时候直接在 data 中将该数压入"],[1,7861,"向 push 栈中加入数据"],[-1,7899,"data.add"],[1,7907,"stackPush.push"],[1,7925,"// 将 push 栈中数据全部倒入 pop 栈中，然后返回 Pop 栈顶元素\n\t\t"],[-1,7937,"eek"],[1,7940,"oll"],[-1,7952,"data.isE"],[1,7960,"stackPop.empty() && stackPush.e"],[-1,8002,"Stack"],[1,8007,"Queue"],[-1,8025,"\n\t\t\twhile (da"],[1,8038," else if (s"],[1,8040,"ckPop"],[-1,8041,"siz"],[1,8045,"mpty"],[-1,8047," != 1"],[-1,8060,"help.add(data.poll());"],[1,8082,"while (!stackPush.empty()) {"],[-1,8086,"}\n\t"],[-1,8091,"int res = da"],[1,8103,"stackPop.push(s"],[1,8105,"ckPush"],[-1,8108,"ll("],[1,8111,"p()"],[-1,8117,"help.add(res);"],[1,8131,"\t}"],[-1,8135,"swap();"],[1,8142,"}"],[-1,8153,"re"],[1,8156,"tackPop.pop()"],[-1,8168,"出数的时候"],[1,8173,"将 push 栈中数据全部倒入 Pop 栈，然后仅仅复制返回 pop 栈顶元素"],[-1,8188,"op"],[1,8190,"eek"],[-1,8202,"data.isE"],[1,8210,"stackPop.empty() && stackPush.e"],[-1,8252,"Stack"],[1,8257,"Queue"],[-1,8275,"\n\t\t\t// 当 data 队列中不止一个数，将 data中所有数放进 help 中，当 data 中只剩一个数时候停止，然后将该数弹出并返回\n"],[1,8347," else if (stackPop.empty()) {\n\t"],[-1,8357,"da"],[1,8359,"!s"],[1,8361,"ckPush"],[-1,8362,"siz"],[1,8366,"mpty"],[-1,8368," > 1"],[-1,8380,"help.add(da"],[1,8391,"\ts"],[1,8393,"ckPop"],[-1,8395,"oll());\n\t\t\t}\n\t\t\tint res = da"],[1,8423,"ush(s"],[1,8425,"ckPush"],[-1,8428,"ll"],[1,8430,"p"],[1,8432,")"],[-1,8437,"// 改变两个引用，就是 Help 栈变 data 栈， data栈变  help 栈；"],[1,8481,"\t}"],[-1,8485,"swap();"],[1,8492,"}"],[-1,8503,"res;\n\t\t}\n\n\t\tprivate void swap() {\n\t\t\tQueue<Integer> tmp = help;\n\t\t\thelp = data;\n\t\t\tdata = tmp"],[1,8596,"stackPop.peek()"]],[7585,8604],[8519,8519]]],[1570758622823,["GJX@GJXAIOU",[[-1,8531,"\n"]],[8529,8529],[8528,8528]]],[1570758623096,["GJX@GJXAIOU",[[-1,8530,"\n"]],[8528,8528],[8527,8527]]],[1570758625254,["GJX@GJXAIOU",[[-1,8529,"\n"]],[8528,8528],[8527,8527]]],[1570758625792,["GJX@GJXAIOU",[[-1,8528,"\n"]],[8527,8527],[8526,8526]]],[1570758929946,[null,[[-1,30421," "],[1,30422,"在"],[-1,30441,"\n"],[1,30442," "],[1,43108,"\n"]],[30421,30421],[43109,43109]]],[1570758929946,[null,[[1,30421," "],[-1,30421,"在"],[1,30441,"\n"],[-1,30441," "],[-1,43108,"\n"]],[43109,43109],[30421,30421]]],[1570758878715,["GJX@GJXAIOU",[[-1,9352,"sort."],[1,9789,"/**\n\t * 宠物进入的方法\n\t */\n\t"],[1,9882,"\n\t\t// 使用构造器实现为每个宠物赋属性"],[-1,12551,"\n"]],[9344,12555],[12592,12592]]],[1570758882669,["GJX@GJXAIOU",[[-1,12592,"\n"]],[12592,12592],[12591,12591]]],[1570761029977,[null,[[-1,30457," "],[1,30458,"在"],[-1,30477,"\n"],[1,30478," "],[1,43144,"\n"]],[30457,30457],[43145,43145]]],[1570761029977,[null,[[1,30457," "],[-1,30457,"在"],[1,30477,"\n"],[-1,30477," "],[-1,43144,"\n"]],[43145,43145],[30457,30457]]],[1570760991124,["GJX@GJXAIOU",[[-1,12910,"sort."],[1,12915,""],[1,13031,"\t\t// 设置初始化左上角和右上角位置，从最外圈往里依次打印\n"],[-1,13356,"R: Row:行，C：Column：列"],[1,13375,"主要实现根据左上角和右下角的坐标，实现顺时针打印矩阵一圈的方法"],[-1,13660,""],[1,13660,"atrix"],[-1,13832,""],[1,13832,"atrix"],[-1,14025,"C"],[1,14026,"R"],[-1,14036,"Column"],[1,14042,"Row"],[-1,14054,"R"],[1,14055,"C"],[-1,14065,"Row"],[1,14068,"Column"],[-1,14690,""],[1,14690,"\n"]],[12902,14690],[14739,14739]]],[1570761809998,[null,[[-1,30506," "],[1,30507,"在"],[-1,30526,"\n"],[1,30527," "],[1,43193,"\n"]],[30506,30506],[43194,43194]]],[1570761809998,[null,[[1,30506," "],[-1,30506,"在"],[1,30526,"\n"],[-1,30526," "],[-1,43193,"\n"]],[43194,43194],[30506,30506]]],[1570761771001,["GJX@GJXAIOU",[[-1,14897,"sort."],[1,15134,"\n\t\t// 因为是正方形，因此只要考虑一个就行，同时不能 ="],[-1,15649,"就算"],[1,15651,"（times 为右下角和左上角列数差），因为只需要交换 times 次就可以完成全部"],[-1,15653,"玩了"],[1,16542,"\n"]],[14889,16542],[16606,16606]]]],null,"GJX@GJXAIOU"]]}