{"compress":true,"commitItems":[["2ff08fef-c7df-4841-831a-4df6129f3dc5",1570791435490,"",[[1570791393405,["GJX@GJXAIOU",[[1,0,"# AlgorithmEasyDay04\n\n\n\n"]],[0,0],[23,23]]],[1570791428341,["GJX@GJXAIOU",[[1,23,"## erchas"]],[23,23],[32,32]]],[1570791429639,["GJX@GJXAIOU",[[-1,26,"erchas"]],[32,32],[26,26]]],[1570791433693,["GJX@GJXAIOU",[[1,26,"二叉树"]],[26,26],[29,29]]],[1570791434052,["GJX@GJXAIOU",[[1,30,"\n"]],[29,29],[30,30]]],[1570791434427,["GJX@GJXAIOU",[[1,31,"\n"]],[30,30],[31,31]]],[1570791494346,["GJX@GJXAIOU",[[1,31,"### 实现二叉树的先序、中序、后序遍历，包括递归方式和非递归\n方式"]],[31,31],[65,65]]],[1570791498873,["GJX@GJXAIOU",[[-1,62,"\n"]],[63,63],[62,62]]]],null,"GJX@GJXAIOU"],["7613979b-1309-43e5-b1f4-7c0b607478fe",1570792923835,"# AlgorithmEasyDay04\n\n\n## 二叉树\n\n### 实现二叉树的先序、中序、后序遍历，包括递归方式和非递归方式\n",[[1570792869867,["GJX@GJXAIOU",[[1,65,"\n"]],[64,64],[65,65]]],[1570792869976,["GJX@GJXAIOU",[[1,66,"\n"]],[65,65],[66,66]]],[1570792870095,["GJX@GJXAIOU",[[1,67,"\n"]],[66,66],[67,67]]],[1570792872624,["GJX@GJXAIOU",[[-1,67,"\n"],[1,68,"*"]],[67,67],[68,68]]],[1570792872759,["GJX@GJXAIOU",[[1,68,"***"]],[68,68],[69,69]]],[1570792877576,["GJX@GJXAIOU",[[1,69,"使用递归的方式："]],[69,69],[77,77]]],[1570792879064,["GJX@GJXAIOU",[[1,79,"\n\n"]],[79,79],[80,80]]],[1570792879191,["GJX@GJXAIOU",[[1,81,"\n"]],[80,80],[81,81]]],[1570792884313,["GJX@GJXAIOU",[[-1,81,"\n"],[1,82,"二叉树"]],[81,81],[84,84]]],[1570792887920,["GJX@GJXAIOU",[[1,84,"的实例"]],[84,84],[87,87]]],[1570792890111,["GJX@GJXAIOU",[[-1,85,"实例"]],[87,87],[85,85]]],[1570792893745,["GJX@GJXAIOU",[[1,85,"示例结果为："]],[85,85],[91,91]]],[1570792895407,["GJX@GJXAIOU",[[-1,87,"结果为："]],[91,91],[87,87]]],[1570792897127,["GJX@GJXAIOU",[[1,87,"结构为："]],[87,87],[91,91]]],[1570792897504,["GJX@GJXAIOU",[[1,91,"\n\n"]],[91,91],[92,92]]],[1570793248893,["GJX@GJXAIOU",[[1,92,"![二叉树结构]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84.png)\n"]],[92,92],[162,162]]],[1570793251327,["GJX@GJXAIOU",[[1,163,"\n"]],[162,162],[163,163]]],[1570793259643,["GJX@GJXAIOU",[[-1,163,"\n"],[1,164,"前序"]],[163,163],[165,165]]],[1570793263621,["GJX@GJXAIOU",[[1,165,"打印的机构"]],[165,165],[170,170]]],[1570793264230,["GJX@GJXAIOU",[[-1,168,"机构"]],[170,170],[168,168]]],[1570793265034,["GJX@GJXAIOU",[[1,168,"结构"]],[168,168],[170,170]]],[1570793265799,["GJX@GJXAIOU",[[-1,168,"结构"]],[170,170],[168,168]]],[1570793275296,["GJX@GJXAIOU",[[1,168,"结果应该为：1 2 3 4 5 6 7"]],[168,168],[187,187]]],[1570793283543,["GJX@GJXAIOU",[[1,187,"\n\n"]],[187,187],[188,188]]],[1570793284866,["GJX@GJXAIOU",[[-1,188,"\n"],[1,189,"实际"]],[188,188],[190,190]]],[1570793305290,["GJX@GJXAIOU",[[1,190,"函数访问节点的顺序为：1 2  4 4 "]],[190,190],[210,210]]],[1570793308224,["GJX@GJXAIOU",[[-1,205," "]],[206,206],[205,205]]],[1570793309273,["GJX@GJXAIOU",[[1,209," "]],[208,208],[209,209]]],[1570793310257,["GJX@GJXAIOU",[[1,209,"4"]],[209,209],[210,210]]],[1570793313714,["GJX@GJXAIOU",[[1,211," "]],[210,210],[211,211]]],[1570793316183,["GJX@GJXAIOU",[[1,211,"2"]],[211,211],[212,212]]],[1570793317058,["GJX@GJXAIOU",[[1,213," "]],[212,212],[213,213]]],[1570793318015,["GJX@GJXAIOU",[[1,213,"5"]],[213,213],[214,214]]],[1570793318601,["GJX@GJXAIOU",[[1,215," "]],[214,214],[215,215]]],[1570793318902,["GJX@GJXAIOU",[[1,215,"5"]],[215,215],[216,216]]],[1570793319224,["GJX@GJXAIOU",[[1,217," "]],[216,216],[217,217]]],[1570793319424,["GJX@GJXAIOU",[[1,217,"5"]],[217,217],[218,218]]],[1570793321527,["GJX@GJXAIOU",[[1,219," "]],[218,218],[219,219]]],[1570793322416,["GJX@GJXAIOU",[[1,219,"2"]],[219,219],[220,220]]],[1570793322640,["GJX@GJXAIOU",[[1,221," "]],[220,220],[221,221]]],[1570793323031,["GJX@GJXAIOU",[[1,221,"1"]],[221,221],[222,222]]],[1570793324633,["GJX@GJXAIOU",[[1,223," "]],[222,222],[223,223]]],[1570793325256,["GJX@GJXAIOU",[[1,223,"3"]],[223,223],[224,224]]],[1570793325497,["GJX@GJXAIOU",[[1,225," "]],[224,224],[225,225]]],[1570793329176,["GJX@GJXAIOU",[[1,225,"6"]],[225,225],[226,226]]],[1570793329471,["GJX@GJXAIOU",[[1,227," "]],[226,226],[227,227]]],[1570793329832,["GJX@GJXAIOU",[[1,227,"6"]],[227,227],[228,228]]],[1570793330184,["GJX@GJXAIOU",[[1,229," "]],[228,228],[229,229]]],[1570793330392,["GJX@GJXAIOU",[[1,229,"6"]],[229,229],[230,230]]],[1570793332753,["GJX@GJXAIOU",[[1,231," "]],[230,230],[231,231]]],[1570793334026,["GJX@GJXAIOU",[[1,231,"3"]],[231,231],[232,232]]],[1570793334224,["GJX@GJXAIOU",[[1,233," "]],[232,232],[233,233]]],[1570793334649,["GJX@GJXAIOU",[[1,233,"7"]],[233,233],[234,234]]],[1570793334968,["GJX@GJXAIOU",[[1,235," "]],[234,234],[235,235]]],[1570793335560,["GJX@GJXAIOU",[[1,235,"7"]],[235,235],[236,236]]],[1570793336010,["GJX@GJXAIOU",[[1,237," "]],[236,236],[237,237]]],[1570793336306,["GJX@GJXAIOU",[[1,237,"7"]],[237,237],[238,238]]],[1570793336785,["GJX@GJXAIOU",[[1,239," "]],[238,238],[239,239]]],[1570793337623,["GJX@GJXAIOU",[[1,239,"3"]],[239,239],[240,240]]],[1570793337855,["GJX@GJXAIOU",[[1,241," "]],[240,240],[241,241]]],[1570793338344,["GJX@GJXAIOU",[[1,241,"1"]],[241,241],[242,242]]],[1570793346784,["GJX@GJXAIOU",[[1,242,"bian"]],[242,242],[246,246]]],[1570793347638,["GJX@GJXAIOU",[[-1,242,"bian"]],[246,246],[242,242]]],[1570793348936,["GJX@GJXAIOU",[[1,242,"结束"]],[242,242],[244,244]]],[1570793348958,["GJX@GJXAIOU",[[1,242," "]],[244,244],[245,245]]],[1570793371495,["GJX@GJXAIOU",[[1,245,"\n"]],[245,245],[246,246]]],[1570793373190,["GJX@GJXAIOU",[[1,246,"****"]],[246,246],[248,248]]],[1570793375136,["GJX@GJXAIOU",[[1,248,"重点："]],[248,248],[251,251]]],[1570793376961,["GJX@GJXAIOU",[[1,253,"\n"]],[253,253],[254,254]]],[1570793377784,["GJX@GJXAIOU",[[1,254,"-"]],[254,254],[255,255]]],[1570793378032,["GJX@GJXAIOU",[[1,256," "]],[255,255],[256,256]]],[1570793399865,["GJX@GJXAIOU",[[1,256,"把打印时机放在第一次访问该节点的时候就是先序遍历；"]],[256,256],[281,281]]],[1570793403783,["GJX@GJXAIOU",[[-1,280,"；"]],[281,281],[280,280]]],[1570793428200,["GJX@GJXAIOU",[[1,280,"；放在第二次访问该节点的时候就是中序遍历，放在第三次访问该节点的时候就是后续遍历；"]],[280,280],[321,321]]],[1570793480271,["GJX@GJXAIOU",[[-1,163,"前序打印的结果应该为：1 2 3 4 5 6 7"]],[163,187],[163,163]]],[1570793480734,["GJX@GJXAIOU",[[-1,163,"\n"]],[163,163],[162,162]]],[1570793596008,["GJX@GJXAIOU",[[1,297,"\n- "]],[297,297],[300,300]]],[1570793596104,["GJX@GJXAIOU",[[-1,298,"- "],[1,300,"\n\n"]],[300,300],[299,299]]],[1570793596263,["GJX@GJXAIOU",[[1,300,"\n"]],[299,299],[300,300]]],[1570793596358,["GJX@GJXAIOU",[[1,301,"\n"]],[300,300],[301,301]]],[1570793597591,["GJX@GJXAIOU",[[-1,301,"\n"],[1,302,"*"]],[301,301],[302,302]]],[1570793597710,["GJX@GJXAIOU",[[1,302,"***"]],[302,302],[303,303]]],[1570793600418,["GJX@GJXAIOU",[[1,303,"非递归非"]],[303,303],[307,307]]],[1570793601976,["GJX@GJXAIOU",[[-1,306,"非"]],[307,307],[306,306]]],[1570793603160,["GJX@GJXAIOU",[[1,306,"方式："]],[306,306],[309,309]]],[1570793604519,["GJX@GJXAIOU",[[1,311,"\n\n"]],[311,311],[312,312]]],[1570793607210,["GJX@GJXAIOU",[[-1,312,"\n"],[1,313,"因为"]],[312,312],[314,314]]],[1570793620322,["GJX@GJXAIOU",[[1,314,"递归使用的是栈，这里只需要自己师兄那"]],[314,314],[332,332]]],[1570793621815,["GJX@GJXAIOU",[[-1,329,"师兄那"]],[332,332],[329,329]]],[1570793622667,["GJX@GJXAIOU",[[1,329,"师兄那"]],[329,329],[332,332]]],[1570793623487,["GJX@GJXAIOU",[[-1,329,"师兄那"]],[332,332],[329,329]]],[1570793633392,["GJX@GJXAIOU",[[1,329,"实现一个栈结构即可；"]],[329,329],[339,339]]],[1570794293703,["GJX@GJXAIOU",[[1,298,"所有先序遍历是：1 2 4 5 3 7"]],[298,298],[317,317]]],[1570794300535,["GJX@GJXAIOU",[[-1,316,"7"]],[317,317],[316,316]]],[1570794303568,["GJX@GJXAIOU",[[1,316,"6 7；"]],[316,316],[320,320]]],[1570794369614,["GJX@GJXAIOU",[[1,323,"\n"]],[320,320],[321,321]]],[1570794402401,["GJX@GJXAIOU",[[1,321,"中序遍历：4 2 5 1 6 3 1；"]],[321,321],[340,340]]],[1570794402649,["GJX@GJXAIOU",[[1,343,"\n"]],[340,340],[341,341]]],[1570794404080,["GJX@GJXAIOU",[[1,341,"后续"]],[341,341],[343,343]]],[1570794406654,["GJX@GJXAIOU",[[-1,341,"后续"]],[343,343],[341,341]]],[1570794425968,["GJX@GJXAIOU",[[1,341,"后序遍历：4 5 "]],[341,341],[350,350]]],[1570794449337,["GJX@GJXAIOU",[[1,350,"2 6 7 3 ·"]],[350,350],[359,359]]],[1570794450527,["GJX@GJXAIOU",[[-1,358,"·"]],[359,359],[358,358]]],[1570794452112,["GJX@GJXAIOU",[[1,358,"1；"]],[358,358],[360,360]]],[1570794456079,["GJX@GJXAIOU",[[1,401,"\n\n"]],[401,401],[402,402]]],[1570794462832,["GJX@GJXAIOU",[[-1,402,"\n"],[1,403,"现需"]],[402,402],[404,404]]],[1570794463287,["GJX@GJXAIOU",[[-1,403,"需"]],[404,404],[403,403]]],[1570794463400,["GJX@GJXAIOU",[[-1,402,"现"],[1,403,"\n"]],[403,403],[402,402]]],[1570794470043,["GJX@GJXAIOU",[[-1,402,"\n"],[1,403,"先序遍历"]],[402,402],[406,406]]],[1570794483585,["GJX@GJXAIOU",[[1,406,"：首先放入"]],[406,406],[411,411]]],[1570794484310,["GJX@GJXAIOU",[[-1,409,"放入"]],[411,411],[409,409]]],[1570794486451,["GJX@GJXAIOU",[[1,409,"在战争"]],[409,409],[412,412]]],[1570794486991,["GJX@GJXAIOU",[[-1,410,"战争"]],[412,412],[410,410]]],[1570794491656,["GJX@GJXAIOU",[[1,410,"栈中放入头九点"]],[410,410],[417,417]]],[1570794492421,["GJX@GJXAIOU",[[-1,415,"九点"]],[417,417],[415,415]]],[1570794499872,["GJX@GJXAIOU",[[1,415,"节点，然后腾出"]],[415,415],[422,422]]],[1570794500438,["GJX@GJXAIOU",[[-1,420,"腾出"]],[422,422],[420,420]]],[1570794508905,["GJX@GJXAIOU",[[1,420,"弹出头节点进行打印，"]],[420,420],[430,430]]],[1570794530270,["GJX@GJXAIOU",[[-1,169,"节"],[1,170,"结"]],[169,171],[169,171]]],[1570794530573,["GJX@GJXAIOU",[[-1,244,"节"],[1,245,"结"]],[244,246],[244,246]]],[1570794530797,["GJX@GJXAIOU",[[-1,264,"节"],[1,265,"结"]],[264,266],[264,266]]],[1570794530990,["GJX@GJXAIOU",[[-1,284,"节"],[1,285,"结"]],[284,286],[284,286]]],[1570794531167,["GJX@GJXAIOU",[[-1,415,"节"],[1,416,"结"]],[415,417],[415,417]]],[1570794531358,["GJX@GJXAIOU",[[-1,423,"节"],[1,424,"结"]],[423,425],[423,425]]],[1570794575582,["GJX@GJXAIOU",[[1,430,"如果该节点的右节点"]],[430,430],[439,439]]],[1570794576711,["GJX@GJXAIOU",[[-1,437,"节点"]],[439,439],[437,437]]],[1570794606678,["GJX@GJXAIOU",[[1,437,"结点不为空，压入右结点，如果左结点不为空压入"]],[437,437],[459,459]]],[1570794627410,["GJX@GJXAIOU",[[1,459,"左结点，然后弹出栈顶，"]],[459,459],[470,470]]],[1570794876423,["GJX@GJXAIOU",[[1,470,"再次循环；"]],[470,470],[475,475]]],[1570794878702,["GJX@GJXAIOU",[[1,475,"\n\n"]],[475,475],[476,476]]],[1570794880231,["GJX@GJXAIOU",[[-1,476,"\n"],[1,477,"示例"]],[476,476],[478,478]]],[1570794880534,["GJX@GJXAIOU",[[1,478,"："]],[478,478],[479,479]]],[1570794882416,["GJX@GJXAIOU",[[-1,478,"："]],[479,479],[478,478]]],[1570794888369,["GJX@GJXAIOU",[[1,478,"为例：先压入1"]],[478,478],[485,485]]],[1570794888392,["GJX@GJXAIOU",[[1,484," "]],[485,485],[486,486]]],[1570794891664,["GJX@GJXAIOU",[[1,486," ，然后弹出1"]],[486,486],[493,493]]],[1570794891687,["GJX@GJXAIOU",[[1,492," "]],[493,493],[494,494]]],[1570794894871,["GJX@GJXAIOU",[[1,494,"，压入"]],[494,494],[497,497]]],[1570794896493,["GJX@GJXAIOU",[[-1,495,"压入"]],[497,497],[495,495]]],[1570794900471,["GJX@GJXAIOU",[[1,495,"先压入节点1"]],[495,495],[501,501]]],[1570794900494,["GJX@GJXAIOU",[[1,500," "]],[501,501],[502,502]]],[1570794906222,["GJX@GJXAIOU",[[1,502," 的右孩子3"]],[502,502],[508,508]]],[1570794906247,["GJX@GJXAIOU",[[1,507," "]],[508,508],[509,509]]],[1570794906478,["GJX@GJXAIOU",[[1,509,"，"]],[509,509],[510,510]]],[1570794912198,["GJX@GJXAIOU",[[1,510,"然后压入左孩子2"]],[510,510],[518,518]]],[1570794912222,["GJX@GJXAIOU",[[1,517," "]],[518,518],[519,519]]],[1570794919433,["GJX@GJXAIOU",[[1,519,"，然后弹出栈顶2"]],[519,519],[527,527]]],[1570794919456,["GJX@GJXAIOU",[[1,526," "]],[527,527],[528,528]]],[1570794930079,["GJX@GJXAIOU",[[1,528,"，然后压入节点2"]],[528,528],[536,536]]],[1570794930102,["GJX@GJXAIOU",[[1,535," "]],[536,536],[537,537]]],[1570794944681,["GJX@GJXAIOU",[[1,537," 的右孩子和左孩子，战争"]],[537,537],[549,549]]],[1570794945302,["GJX@GJXAIOU",[[-1,547,"战争"]],[549,549],[547,547]]],[1570794948479,["GJX@GJXAIOU",[[1,547,"现在栈转给你"]],[547,547],[553,553]]],[1570794949647,["GJX@GJXAIOU",[[-1,550,"转给你"]],[553,553],[550,550]]],[1570794964792,["GJX@GJXAIOU",[[1,550,"中顺序为：4 5 3，然后弹出4"]],[550,550],[566,566]]],[1570794964815,["GJX@GJXAIOU",[[1,565," "]],[566,566],[567,567]]],[1570794965057,["GJX@GJXAIOU",[[1,567,"，"]],[567,567],[568,568]]],[1570794972991,["GJX@GJXAIOU",[[1,568,"压入4"]],[568,568],[571,571]]],[1570794973014,["GJX@GJXAIOU",[[1,570," "]],[571,571],[572,572]]],[1570794973639,["GJX@GJXAIOU",[[1,572,"的"]],[572,572],[573,573]]],[1570794973662,["GJX@GJXAIOU",[[1,572," "]],[573,573],[574,574]]],[1570794986681,["GJX@GJXAIOU",[[1,574,"右孩子和左孩子，发现都没有，弹出栈顶5"]],[574,574],[593,593]]],[1570794986705,["GJX@GJXAIOU",[[1,592," "]],[593,593],[594,594]]],[1570794990089,["GJX@GJXAIOU",[[1,594,"，压入5"]],[594,594],[598,598]]],[1570794990114,["GJX@GJXAIOU",[[1,597," "]],[598,598],[599,599]]],[1570794990919,["GJX@GJXAIOU",[[1,599,"放入"]],[599,599],[601,601]]],[1570794990943,["GJX@GJXAIOU",[[1,599," "]],[601,601],[602,602]]],[1570794993160,["GJX@GJXAIOU",[[1,602,"左孩子HIA"]],[602,602],[608,608]]],[1570794993184,["GJX@GJXAIOU",[[1,605," "]],[608,608],[609,609]]],[1570794994885,["GJX@GJXAIOU",[[-1,605," HIA"]],[609,609],[605,605]]],[1570794996079,["GJX@GJXAIOU",[[1,605,"和"]],[605,605],[606,606]]],[1570795001247,["GJX@GJXAIOU",[[-1,600,"放入左孩子和"]],[606,606],[600,600]]],[1570795019280,["GJX@GJXAIOU",[[1,600,"的右孩子和左孩子，发现都没有，弹出栈顶3"]],[600,600],[620,620]]],[1570795019304,["GJX@GJXAIOU",[[1,619," "]],[620,620],[621,621]]],[1570795025120,["GJX@GJXAIOU",[[1,621,"，然后压入3"]],[621,621],[627,627]]],[1570795025144,["GJX@GJXAIOU",[[1,626," "]],[627,627],[628,628]]],[1570795025720,["GJX@GJXAIOU",[[1,628,"的"]],[628,628],[629,629]]],[1570795025742,["GJX@GJXAIOU",[[1,628," "]],[629,629],[630,630]]],[1570795027920,["GJX@GJXAIOU",[[1,630,"左孩子"]],[630,630],[633,633]]],[1570795029197,["GJX@GJXAIOU",[[-1,630,"左孩子"]],[633,633],[630,630]]],[1570795048672,["GJX@GJXAIOU",[[1,630,"右孩子和左孩子，然后弹出栈顶5"]],[630,630],[645,645]]],[1570795048696,["GJX@GJXAIOU",[[1,644," "]],[645,645],[646,646]]],[1570795049286,["GJX@GJXAIOU",[[-1,645,"5"]],[646,646],[645,645]]],[1570795054870,["GJX@GJXAIOU",[[1,645,"6，然后压入6"]],[645,645],[652,652]]],[1570795054894,["GJX@GJXAIOU",[[1,651," "]],[652,652],[653,653]]],[1570795055375,["GJX@GJXAIOU",[[1,653,"的"]],[653,653],[654,654]]],[1570795055400,["GJX@GJXAIOU",[[1,653," "]],[654,654],[655,655]]],[1570795059354,["GJX@GJXAIOU",[[1,655,"右、做"]],[655,655],[658,658]]],[1570795059917,["GJX@GJXAIOU",[[-1,657,"做"]],[658,658],[657,657]]],[1570795062702,["GJX@GJXAIOU",[[1,657,"左孩子、"]],[657,657],[661,661]]],[1570795111384,["GJX@GJXAIOU",[[-1,660,"、"]],[661,661],[660,660]]],[1570795113519,["GJX@GJXAIOU",[[1,660,"，都没偶"]],[660,660],[664,664]]],[1570795114110,["GJX@GJXAIOU",[[-1,663,"偶"]],[664,664],[663,663]]],[1570795117799,["GJX@GJXAIOU",[[1,663,"有，弹出7"]],[663,663],[668,668]]],[1570795117825,["GJX@GJXAIOU",[[1,667," "]],[668,668],[669,669]]],[1570795138812,["GJX@GJXAIOU",[[1,669,"，压入右孩子、左孩子，没有，谈"]],[669,669],[684,684]]],[1570795139685,["GJX@GJXAIOU",[[-1,683,"谈"]],[684,684],[683,683]]],[1570795146665,["GJX@GJXAIOU",[[1,683,"弹出发现为空"]],[683,683],[689,689]]],[1570795149599,["GJX@GJXAIOU",[[1,689,"，结束；"]],[689,689],[693,693]]],[1570795368358,["GJX@GJXAIOU",[[1,693,"\n\n"]],[693,693],[694,694]]],[1570795368479,["GJX@GJXAIOU",[[1,695,"\n"]],[694,694],[695,695]]],[1570795368718,["GJX@GJXAIOU",[[1,696,"\n"]],[695,695],[696,696]]],[1570795371292,["GJX@GJXAIOU",[[-1,696,"\n"],[1,697,"中序"]],[696,696],[698,698]]],[1570795385317,["GJX@GJXAIOU",[[1,698,"遍历：当前结点不为空的饿时候"]],[698,698],[712,712]]],[1570795386056,["GJX@GJXAIOU",[[-1,709,"饿时候"]],[712,712],[709,709]]],[1570795445967,["GJX@GJXAIOU",[[1,709,"时候，将当前结点压入栈中，结点指针左移，指向左结点"]],[709,709],[734,734]]],[1570795469359,["GJX@GJXAIOU",[[1,734,"，则过程为："]],[734,734],[740,740]]],[1570795475509,["GJX@GJXAIOU",[[-1,734,"，则过程为："]],[740,740],[734,734]]],[1570795482998,["GJX@GJXAIOU",[[1,734,"，直到单签"]],[734,734],[739,739]]],[1570795484557,["GJX@GJXAIOU",[[-1,737,"单签"]],[739,739],[737,737]]],[1570795487777,["GJX@GJXAIOU",[[1,737,"当前结点Wie"]],[737,737],[744,744]]],[1570795487801,["GJX@GJXAIOU",[[1,741," "]],[744,744],[745,745]]],[1570795489941,["GJX@GJXAIOU",[[-1,741," Wie"]],[745,745],[741,741]]],[1570795491370,["GJX@GJXAIOU",[[1,741,"为坤宁宫"]],[741,741],[745,745]]],[1570795492197,["GJX@GJXAIOU",[[-1,742,"坤宁宫"]],[745,745],[742,742]]],[1570795506639,["GJX@GJXAIOU",[[1,742,"空，则从栈中将栈顶弹出答应"]],[742,742],[755,755]]],[1570795507014,["GJX@GJXAIOU",[[1,755,"，"]],[755,755],[756,756]]],[1570795508565,["GJX@GJXAIOU",[[-1,753,"答应，"]],[756,756],[753,753]]],[1570795529879,["GJX@GJXAIOU",[[1,753,"打印，然后指针右移；"]],[753,753],[763,763]]],[1570795530109,["GJX@GJXAIOU",[[1,763,"\n\n"]],[763,763],[764,764]]],[1570795530254,["GJX@GJXAIOU",[[1,765,"\n"]],[764,764],[765,765]]],[1570795531111,["GJX@GJXAIOU",[[-1,765,"\n"]],[765,765],[764,764]]],[1570795539841,["GJX@GJXAIOU",[[-1,764,"\n"],[1,765,"示例为例"]],[764,764],[768,768]]],[1570795540223,["GJX@GJXAIOU",[[1,768,"："]],[768,768],[769,769]]],[1570795679334,["GJX@GJXAIOU",[[1,769,"首先头结点1"]],[769,769],[775,775]]],[1570795679358,["GJX@GJXAIOU",[[1,774," "]],[775,775],[776,776]]],[1570795683686,["GJX@GJXAIOU",[[1,776," 不为空，"]],[776,776],[781,781]]],[1570795710182,["GJX@GJXAIOU",[[1,781,"将该结点压入，然后指向节点2"]],[781,781],[795,795]]],[1570795710206,["GJX@GJXAIOU",[[1,794," "]],[795,795],[796,796]]],[1570795715009,["GJX@GJXAIOU",[[1,796,"，然后压入几点"]],[796,796],[803,803]]],[1570795715717,["GJX@GJXAIOU",[[-1,801,"几点"]],[803,803],[801,801]]],[1570795717295,["GJX@GJXAIOU",[[1,801,"结点2"]],[801,801],[804,804]]],[1570795717317,["GJX@GJXAIOU",[[1,803," "]],[804,804],[805,805]]],[1570795723903,["GJX@GJXAIOU",[[1,805,"，然后压入结点4"]],[805,805],[813,813]]],[1570795723927,["GJX@GJXAIOU",[[1,812," "]],[813,813],[814,814]]],[1570795745415,["GJX@GJXAIOU",[[1,814,"，然后指向 null，以为栈不等于空，还得遍历，"]],[814,814],[838,838]]],[1570795768934,["GJX@GJXAIOU",[[1,838,"进入 else，弹出栈顶为4"]],[838,838],[852,852]]],[1570795768958,["GJX@GJXAIOU",[[1,851," "]],[852,852],[853,853]]],[1570795769781,["GJX@GJXAIOU",[[-1,852,"4"]],[853,853],[852,852]]],[1570795771669,["GJX@GJXAIOU",[[1,852,"结点4"]],[852,852],[855,855]]],[1570795771694,["GJX@GJXAIOU",[[1,854," "]],[855,855],[856,856]]],[1570795777261,["GJX@GJXAIOU",[[1,856," ，指针指向4"]],[856,856],[863,863]]],[1570795777283,["GJX@GJXAIOU",[[1,862," "]],[863,863],[864,864]]],[1570795787766,["GJX@GJXAIOU",[[1,864,"，然后指向结点4"]],[864,864],[872,872]]],[1570795787789,["GJX@GJXAIOU",[[1,871," "]],[872,872],[873,873]]],[1570795790783,["GJX@GJXAIOU",[[1,873," 的右结点"]],[873,873],[878,878]]],[1570795797326,["GJX@GJXAIOU",[[-1,876,"结点"]],[878,878],[876,876]]],[1570795801344,["GJX@GJXAIOU",[[1,876,"结点"]],[876,876],[878,878]]],[1570795850401,["GJX@GJXAIOU",[[1,878,"为 null，然后再次弹出节点 2，然后指向结点3"]],[878,878],[903,903]]],[1570795850425,["GJX@GJXAIOU",[[1,902," "]],[903,903],[904,904]]],[1570795850798,["GJX@GJXAIOU",[[-1,903,"3"]],[904,904],[903,903]]],[1570795860935,["GJX@GJXAIOU",[[1,903,"2 的右子节点 5，然后"]],[903,903],[915,915]]],[1570795874966,["GJX@GJXAIOU",[[1,915,"。。。。"]],[915,915],[919,919]]],[1570795917647,["GJX@GJXAIOU",[[1,919,"\n\n"]],[919,919],[920,920]]],[1570795917775,["GJX@GJXAIOU",[[1,921,"\n"]],[920,920],[921,921]]],[1570795917917,["GJX@GJXAIOU",[[1,922,"\n"]],[921,921],[922,922]]],[1570795955144,["GJX@GJXAIOU",[[-1,922,"\n"],[1,923,"后序遍历"]],[922,922],[926,926]]],[1570795991585,["GJX@GJXAIOU",[[1,926,"：是左右中打印（）"]],[926,926],[935,935]]],[1570795995762,["GJX@GJXAIOU",[[1,934,"需要用到"]],[934,934],[938,938]]],[1570796004825,["GJX@GJXAIOU",[[1,938,"两个栈，代码方式二是 "]],[938,938],[949,949]]],[1570796005815,["GJX@GJXAIOU",[[-1,948," "]],[949,949],[948,948]]],[1570796016640,["GJX@GJXAIOU",[[1,948,"用的一个栈，然后"]],[948,948],[956,956]]],[1570796021254,["GJX@GJXAIOU",[[-1,954,"然后"]],[956,956],[954,954]]],[1570796024744,["GJX@GJXAIOU",[[1,954,"不太好理解"]],[954,954],[959,959]]],[1570796026735,["GJX@GJXAIOU",[[1,960,"，"]],[960,960],[961,961]]],[1570796037120,["GJX@GJXAIOU",[[-1,960,"，"]],[961,961],[960,960]]],[1570796040903,["GJX@GJXAIOU",[[1,960,"；现需"]],[960,960],[963,963]]],[1570796041565,["GJX@GJXAIOU",[[-1,961,"现需"]],[963,963],[961,961]]],[1570796049290,["GJX@GJXAIOU",[[1,961,"先序遍历是中、做"]],[961,961],[969,969]]],[1570796049759,["GJX@GJXAIOU",[[-1,968,"做"]],[969,969],[968,968]]],[1570796056552,["GJX@GJXAIOU",[[1,968,"左、右"]],[968,968],[971,971]]],[1570796057014,["GJX@GJXAIOU",[[1,971,"、"]],[971,971],[972,972]]],[1570796057448,["GJX@GJXAIOU",[[-1,971,"、"]],[972,972],[971,971]]],[1570796076622,["GJX@GJXAIOU",[[1,971,"，就是当前结点先呀右孩子"]],[971,971],[983,983]]],[1570796079325,["GJX@GJXAIOU",[[-1,979,"呀"]],[980,980],[979,979]]],[1570796080889,["GJX@GJXAIOU",[[1,979,"压"]],[979,979],[980,980]]],[1570796114343,["GJX@GJXAIOU",[[1,983,"然后压左孩子，那么中右左就是当前结果"]],[983,983],[1001,1001]]],[1570796153111,["GJX@GJXAIOU",[[1,1001,"先压左孩子然后压右孩子，然后将原来使用答应的"]],[1001,1001],[1023,1023]]],[1570796153894,["GJX@GJXAIOU",[[-1,1020,"答应的"]],[1023,1023],[1020,1020]]],[1570796176513,["GJX@GJXAIOU",[[1,1020,"打印的语句更改为：将该元素存放到另一个栈"]],[1020,1020],[1040,1040]]],[1570796201741,["GJX@GJXAIOU",[[1,1040,"中，但是不打印，全部遍历完成之后，将栈中的元素全部丹樱"]],[1040,1040],[1067,1067]]],[1570796202367,["GJX@GJXAIOU",[[-1,1065,"丹樱"]],[1067,1067],[1065,1065]]],[1570796206352,["GJX@GJXAIOU",[[1,1065,"打印出来即可；"]],[1065,1065],[1072,1072]]],[1570796209981,["GJX@GJXAIOU",[[1,1072,"\n\n"]],[1072,1072],[1073,1073]]],[1570796210103,["GJX@GJXAIOU",[[1,1074,"\n"]],[1073,1073],[1074,1074]]],[1570796220422,["GJX@GJXAIOU",[[1,1073,"···"]],[1073,1073],[1076,1076]]],[1570796221229,["GJX@GJXAIOU",[[-1,1073,"···"]],[1076,1076],[1073,1073]]],[1570796222336,["GJX@GJXAIOU",[[1,1073,"```"]],[1073,1073],[1076,1076]]],[1570796222359,["GJX@GJXAIOU",[[1,1076,"language\n```\n"]],[1076,1076],[1076,1084]]],[1570796222551,["GJX@GJXAIOU",[[-1,1076,"language"],[1,1084,"j"]],[1076,1084],[1077,1077]]],[1570796223077,["GJX@GJXAIOU",[[1,1077,"ava"]],[1077,1077],[1080,1080]]],[1570796223165,["GJX@GJXAIOU",[[1,1081,"\n"]],[1080,1080],[1081,1081]]],[1570796225721,["GJX@GJXAIOU",[[1,1081,"package nowcoder.easy.day04;\n\nimport java.util.Stack;\n\npublic class PreInPosTraversal {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\t// 前序遍历\n\tpublic static void preOrderRecur(Node head) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.print(head.value + \" \");\n\t\tpreOrderRecur(head.left);\n\t\tpreOrderRecur(head.right);\n\t}\n\n\tpublic static void inOrderRecur(Node head) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tinOrderRecur(head.left);\n\t\tSystem.out.print(head.value + \" \");\n\t\tinOrderRecur(head.right);\n\t}\n\n\tpublic static void posOrderRecur(Node head) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tposOrderRecur(head.left);\n\t\tposOrderRecur(head.right);\n\t\tSystem.out.print(head.value + \" \");\n\t}\n\n\n\t/**\n\t * 非递归版\n\t * @param head\n\t */\n\tpublic static void preOrderUnRecur(Node head) {\n\t\tSystem.out.print(\"pre-order: \");\n\t\tif (head != null) {\n\t\t\t// 准备一个栈\n\t\t\tStack<Node> stack = new Stack<Node>();\n\t\t\t// 放入头结点\n\t\t\tstack.add(head);\n\t\t\twhile (!stack.isEmpty()) {\n\t\t\t\thead = stack.pop();\n\t\t\t\tSystem.out.print(head.value + \" \");\n\t\t\t\tif (head.right != null) {\n\t\t\t\t\tstack.push(head.right);\n\t\t\t\t}\n\t\t\t\tif (head.left != null) {\n\t\t\t\t\tstack.push(head.left);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void inOrderUnRecur(Node head) {\n\t\tSystem.out.print(\"in-order: \");\n\t\tif (head != null) {\n\t\t\tStack<Node> stack = new Stack<Node>();\n\t\t\twhile (!stack.isEmpty() || head != null) {\n\t\t\t\tif (head != null) {\n\t\t\t\t\tstack.push(head);\n\t\t\t\t\thead = head.left;\n\t\t\t\t} else {\n\t\t\t\t\thead = stack.pop();\n\t\t\t\t\tSystem.out.print(head.value + \" \");\n\t\t\t\t\thead = head.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void posOrderUnRecur1(Node head) {\n\t\tSystem.out.print(\"pos-order: \");\n\t\tif (head != null) {\n\t\t\tStack<Node> s1 = new Stack<Node>();\n\t\t\tStack<Node> s2 = new Stack<Node>();\n\t\t\ts1.push(head);\n\t\t\twhile (!s1.isEmpty()) {\n\t\t\t\thead = s1.pop();\n\t\t\t\ts2.push(head);\n\t\t\t\tif (head.left != null) {\n\t\t\t\t\ts1.push(head.left);\n\t\t\t\t}\n\t\t\t\tif (head.right != null) {\n\t\t\t\t\ts1.push(head.right);\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (!s2.isEmpty()) {\n\t\t\t\tSystem.out.print(s2.pop().value + \" \");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\t// 另一种实现后续，使用一个栈\n\tpublic static void posOrderUnRecur2(Node h) {\n\t\tSystem.out.print(\"pos-order: \");\n\t\tif (h != null) {\n\t\t\tStack<Node> stack = new Stack<Node>();\n\t\t\tstack.push(h);\n\t\t\tNode c = null;\n\t\t\twhile (!stack.isEmpty()) {\n\t\t\t\tc = stack.peek();\n\t\t\t\tif (c.left != null && h != c.left && h != c.right) {\n\t\t\t\t\tstack.push(c.left);\n\t\t\t\t} else if (c.right != null && h != c.right) {\n\t\t\t\t\tstack.push(c.right);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.print(stack.pop().value + \" \");\n\t\t\t\t\th = c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(5);\n\t\thead.left = new Node(3);\n\t\thead.right = new Node(8);\n\t\thead.left.left = new Node(2);\n\t\thead.left.right = new Node(4);\n\t\thead.left.left.left = new Node(1);\n\t\thead.right.left = new Node(7);\n\t\thead.right.left.left = new Node(6);\n\t\thead.right.right = new Node(10);\n\t\thead.right.right.left = new Node(9);\n\t\thead.right.right.right = new Node(11);\n\n\t\t// recursive\n\t\tSystem.out.println(\"==============recursive==============\");\n\t\tSystem.out.print(\"pre-order: \");\n\t\tpreOrderRecur(head);\n\t\tSystem.out.println();\n\t\tSystem.out.print(\"in-order: \");\n\t\tinOrderRecur(head);\n\t\tSystem.out.println();\n\t\tSystem.out.print(\"pos-order: \");\n\t\tposOrderRecur(head);\n\t\tSystem.out.println();\n\n\t\t// unrecursive\n\t\tSystem.out.println(\"============unrecursive=============\");\n\t\tpreOrderUnRecur(head);\n\t\tinOrderUnRecur(head);\n\t\tposOrderUnRecur1(head);\n\t\tposOrderUnRecur2(head);\n\n\t}\n\n}\n"]],[1081,1081],[4716,4716]]],[1570796230039,["GJX@GJXAIOU",[[1,4723,"\n"]],[4720,4720],[4721,4721]]],[1570796230111,["GJX@GJXAIOU",[[1,4724,"\n"]],[4721,4721],[4722,4722]]],[1570796230271,["GJX@GJXAIOU",[[1,4725,"\n"]],[4722,4722],[4723,4723]]],[1570796258704,["GJX@GJXAIOU",[[1,4723,"```"]],[4723,4723],[4726,4726]]],[1570796258733,["GJX@GJXAIOU",[[1,4726,"language\n```\n"]],[4726,4726],[4726,4734]]],[1570796260105,["GJX@GJXAIOU",[[-1,4726,"language"],[1,4734,"j"]],[4726,4734],[4727,4727]]],[1570796260439,["GJX@GJXAIOU",[[1,4727,"ava"]],[4727,4727],[4730,4730]]],[1570796260605,["GJX@GJXAIOU",[[1,4731,"\n"]],[4730,4730],[4731,4731]]],[1570796263138,["GJX@GJXAIOU",[[1,4731,"package nowcoder.easy.day04;\n\npublic class Code_02_PrintBinaryTree {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static void printTree(Node head) {\n\t\tSystem.out.println(\"Binary Tree:\");\n\t\tprintInOrder(head, 0, \"H\", 17);\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printInOrder(Node head, int height, String to, int len) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tprintInOrder(head.right, height + 1, \"v\", len);\n\t\tString val = to + head.value + to;\n\t\tint lenM = val.length();\n\t\tint lenL = (len - lenM) / 2;\n\t\tint lenR = len - lenM - lenL;\n\t\tval = getSpace(lenL) + val + getSpace(lenR);\n\t\tSystem.out.println(getSpace(height * len) + val);\n\t\tprintInOrder(head.left, height + 1, \"^\", len);\n\t}\n\n\tpublic static String getSpace(int num) {\n\t\tString space = \" \";\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tbuf.append(space);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(1);\n\t\thead.left = new Node(-222222222);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(Integer.MIN_VALUE);\n\t\thead.right.left = new Node(55555555);\n\t\thead.right.right = new Node(66);\n\t\thead.left.left.right = new Node(777);\n\t\tprintTree(head);\n\n\t\thead = new Node(1);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(4);\n\t\thead.right.left = new Node(5);\n\t\thead.right.right = new Node(6);\n\t\thead.left.left.right = new Node(7);\n\t\tprintTree(head);\n\n\t\thead = new Node(1);\n\t\thead.left = new Node(1);\n\t\thead.right = new Node(1);\n\t\thead.left.left = new Node(1);\n\t\thead.right.left = new Node(1);\n\t\thead.right.right = new Node(1);\n\t\thead.left.left.right = new Node(1);\n\t\tprintTree(head);\n\n\t}\n\n}\n"]],[4731,4731],[6520,6520]]],[1570796292285,["GJX@GJXAIOU",[[1,4722,"### 如何直观的打印一颗二叉树"]],[4722,4722],[4738,4738]]],[1570796315133,["GJX@GJXAIOU",[[-1,6533,"\n"]],[6533,6533],[6532,6532]]],[1570796317125,["GJX@GJXAIOU",[[-1,6535,"\n"]],[6535,6535],[6534,6534]]],[1570796318989,["GJX@GJXAIOU",[[1,6542,"\n"]],[6538,6538],[6539,6539]]],[1570796319104,["GJX@GJXAIOU",[[1,6543,"\n"]],[6539,6539],[6540,6540]]],[1570796320687,["GJX@GJXAIOU",[[1,6540,"zhu"]],[6540,6540],[6543,6543]]],[1570796321373,["GJX@GJXAIOU",[[-1,6540,"zhu"]],[6543,6543],[6540,6540]]],[1570796326355,["GJX@GJXAIOU",[[1,6540,"注释：党营"]],[6540,6540],[6545,6545]]],[1570796326869,["GJX@GJXAIOU",[[-1,6543,"党营"]],[6545,6545],[6543,6543]]],[1570796338208,["GJX@GJXAIOU",[[1,6543,"打印结果中， ``"]],[6543,6543],[6552,6552]]],[1570796341232,["GJX@GJXAIOU",[[1,6551,"HXH "]],[6551,6551],[6555,6555]]],[1570796342182,["GJX@GJXAIOU",[[-1,6554," "]],[6555,6555],[6554,6554]]],[1570796347873,["GJX@GJXAIOU",[[1,6555,"表示头结点X"]],[6555,6555],[6561,6561]]],[1570796347901,["GJX@GJXAIOU",[[1,6560," "]],[6561,6561],[6562,6562]]],[1570796348607,["GJX@GJXAIOU",[[1,6562,"，"]],[6562,6562],[6563,6563]]],[1570796358593,["GJX@GJXAIOU",[[1,6563,"``"]],[6563,6563],[6565,6565]]],[1570796362455,["GJX@GJXAIOU",[[1,6564,"VYV"]],[6564,6564],[6567,6567]]],[1570796364961,["GJX@GJXAIOU",[[1,6568,"BAIOSHI"]],[6568,6568],[6575,6575]]],[1570796366286,["GJX@GJXAIOU",[[-1,6567,"`BAIOSHI"]],[6575,6575],[6567,6567]]],[1570796370714,["GJX@GJXAIOU",[[1,6567,"`b"]],[6567,6567],[6569,6569]]],[1570796371294,["GJX@GJXAIOU",[[-1,6568,"b"]],[6569,6569],[6568,6568]]],[1570796380586,["GJX@GJXAIOU",[[1,6568,"表示Y"]],[6568,6568],[6571,6571]]],[1570796380614,["GJX@GJXAIOU",[[1,6570," "]],[6571,6571],[6572,6572]]],[1570796381953,["GJX@GJXAIOU",[[1,6572,"是"]],[6572,6572],[6573,6573]]],[1570796381981,["GJX@GJXAIOU",[[1,6572," "]],[6573,6573],[6574,6574]]],[1570796397359,["GJX@GJXAIOU",[[1,6574,"左下方最近结点的孩子；"]],[6574,6574],[6585,6585]]],[1570796397597,["GJX@GJXAIOU",[[1,6589,"\n"]],[6585,6585],[6586,6586]]],[1570796399470,["GJX@GJXAIOU",[[-1,6589,"\n"]],[6586,6586],[6585,6585]]],[1570796401183,["GJX@GJXAIOU",[[1,6585,"``"]],[6585,6585],[6587,6587]]],[1570796411847,["GJX@GJXAIOU",[[1,6586,"^^"]],[6586,6586],[6588,6588]]],[1570796414240,["GJX@GJXAIOU",[[1,6587,"Z"]],[6587,6587],[6588,6588]]],[1570796416154,["GJX@GJXAIOU",[[1,6590," "]],[6590,6590],[6591,6591]]],[1570796421169,["GJX@GJXAIOU",[[1,6591,"表示 X"]],[6591,6591],[6595,6595]]],[1570796421527,["GJX@GJXAIOU",[[-1,6594,"X"]],[6595,6595],[6594,6594]]],[1570796423295,["GJX@GJXAIOU",[[1,6594,"Z是"]],[6594,6594],[6596,6596]]],[1570796423324,["GJX@GJXAIOU",[[1,6595," "]],[6596,6596],[6597,6597]]],[1570796426059,["GJX@GJXAIOU",[[1,6597,"左下方"]],[6597,6597],[6600,6600]]],[1570796429447,["GJX@GJXAIOU",[[-1,6598,"下方"]],[6600,6600],[6598,6598]]],[1570796435464,["GJX@GJXAIOU",[[1,6598,"上方最近结点的孩子；"]],[6598,6598],[6608,6608]]],[1570796474878,["GJX@GJXAIOU",[[1,6612,"\n"]],[6610,6610],[6611,6611]]],[1570796474998,["GJX@GJXAIOU",[[1,6613,"\n"]],[6611,6611],[6612,6612]]],[1570796475136,["GJX@GJXAIOU",[[1,6614,"\n"]],[6612,6612],[6613,6613]]],[1570796475256,["GJX@GJXAIOU",[[1,6615,"\n"]],[6613,6613],[6614,6614]]],[1570796475358,["GJX@GJXAIOU",[[1,6616,"\n"]],[6614,6614],[6615,6615]]],[1570796475512,["GJX@GJXAIOU",[[1,6617,"\n"]],[6615,6615],[6616,6616]]],[1570796496486,["GJX@GJXAIOU",[[1,6611,"### 在二叉树中找到一个节点的后继节点\n【题目】 现在有一种新的二叉树节点类型如下：\npublic class Node { public int value; public Node left;\npublic Node right; public Node parent;\npublic Node(int data) { this.value = data; }\n}\n该结构比普通二叉树节点结构多了一个指向父节点的parent指针。假\n设有一 棵Node类型的节点组成的二叉树，树中每个节点的parent指针\n都正确地指向 自己的父节点，头节点的parent指向null。只给一个在\n二叉树中的某个节点 node，请实现返回node的后继节点的函数。在二\n叉树的中序遍历的序列中， node的下一个节点叫作node的后继节点。"]],[6611,6611],[6976,6976]]],[1570796502965,["GJX@GJXAIOU",[[1,6655,"\n"]],[6655,6655],[6656,6656]]],[1570796507015,["GJX@GJXAIOU",[[1,6655,"···"]],[6655,6655],[6658,6658]]],[1570796507749,["GJX@GJXAIOU",[[-1,6655,"···"]],[6658,6658],[6655,6655]]],[1570796509214,["GJX@GJXAIOU",[[1,6655,"```"]],[6655,6655],[6658,6658]]],[1570796509243,["GJX@GJXAIOU",[[1,6658,"language\n```\n"]],[6658,6658],[6658,6666]]],[1570796509631,["GJX@GJXAIOU",[[-1,6658,"language"],[1,6666,"j"]],[6658,6666],[6659,6659]]],[1570796510137,["GJX@GJXAIOU",[[1,6659,"ava"]],[6659,6659],[6662,6662]]],[1570796510384,["GJX@GJXAIOU",[[1,6663,"\n"]],[6662,6662],[6663,6663]]],[1570796513846,["GJX@GJXAIOU",[[-1,6669,"public class Node { public int value; public Node left;\npublic Node right; public Node parent;\npublic Node(int data) { this.value = data; }\n}"]],[6669,6810],[6669,6669]]],[1570796516323,["GJX@GJXAIOU",[[1,6663,"public class Node { public int value; public Node left;\npublic Node right; public Node parent;\npublic Node(int data) { this.value = data; }\n}"]],[6663,6663],[6804,6804]]],[1570796518320,["GJX@GJXAIOU",[[1,6683,"\n"]],[6683,6683],[6684,6684]]],[1570796520229,["GJX@GJXAIOU",[[1,6684,"    "]],[6684,6684],[6688,6688]]],[1570796522782,["GJX@GJXAIOU",[[1,6706,"\n    "]],[6706,6706],[6711,6711]]],[1570796526135,["GJX@GJXAIOU",[[1,6729,"    "]],[6729,6729],[6733,6733]]],[1570796528182,["GJX@GJXAIOU",[[1,6752,"\n    "]],[6752,6752],[6757,6757]]],[1570796530557,["GJX@GJXAIOU",[[1,6777,"    "]],[6777,6777],[6781,6781]]],[1570796533615,["GJX@GJXAIOU",[[1,6805,"\n    "]],[6805,6805],[6810,6810]]],[1570796536342,["GJX@GJXAIOU",[[1,6829,"\n    "]],[6829,6829],[6834,6834]]],[1570796538335,["GJX@GJXAIOU",[[1,6810,"    "]],[6810,6810],[6814,6814]]],[1570796576662,["GJX@GJXAIOU",[[-1,6881,"\n"]],[6881,6881],[6881,6881]]],[1570796577543,["GJX@GJXAIOU",[[-1,6917,"\n"]],[6917,6917],[6917,6917]]],[1570796578526,["GJX@GJXAIOU",[[-1,6953,"\n"]],[6953,6953],[6953,6953]]],[1570796579471,["GJX@GJXAIOU",[[-1,6988,"\n"]],[6988,6988],[6988,6988]]],[1570796588736,["GJX@GJXAIOU",[[1,6986,"**"],[1,7022,"**,no"]],[6986,7022],[7027,7027]]],[1570796590120,["GJX@GJXAIOU",[[-1,7024,",no"]],[7027,7027],[7024,7024]]],[1570796596075,["GJX@GJXAIOU",[[1,7024,"，node 的"]],[7024,7024],[7031,7031]]],[1570796656634,[null,[[-1,7031,"no"],[1,7033,"**"]],[7031,7031],[7035,7035]]],[1570796656634,[null,[[1,7031,"no"],[-1,7031,"**"]],[7035,7035],[7031,7031]]],[1570796612097,["GJX@GJXAIOU",[[1,7031,"前一个结点叫做 node 的前驱结点"]],[7031,7031],[7049,7049]]],[1570796614213,["GJX@GJXAIOU",[[1,7059,"\n"]],[7052,7052],[7053,7053]]],[1570796614728,["GJX@GJXAIOU",[[1,7060,"\n"]],[7053,7053],[7054,7054]]],[1570796618076,["GJX@GJXAIOU",[[-1,6847,"\n"]],[6847,6847],[6846,6846]]],[1570796618197,["GJX@GJXAIOU",[[-1,6846,"\n"]],[6846,6846],[6845,6845]]],[1570796620942,["GJX@GJXAIOU",[[1,7059,"\n"]],[7051,7051],[7052,7052]]],[1570796634154,["GJX@GJXAIOU",[[1,7052,"还是一"]],[7052,7052],[7055,7055]]],[1570796634925,["GJX@GJXAIOU",[[-1,7054,"一"]],[7055,7055],[7054,7054]]],[1570796656551,["GJX@GJXAIOU",[[1,7054,"以上面的树形结构为例，中序遍历结果为：4 2 5 1 6"]],[7054,7054],[7082,7082]]],[1570796716635,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570796716635,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796668713,["GJX@GJXAIOU",[[1,7082," 3 7，则 1 的后继结点为6"]],[7082,7082],[7098,7098]]],[1570796668742,["GJX@GJXAIOU",[[1,7097," "]],[7098,7098],[7099,7099]]],[1570796672339,["GJX@GJXAIOU",[[1,7099,"，前驱接地那"]],[7099,7099],[7105,7105]]],[1570796673088,["GJX@GJXAIOU",[[-1,7102,"接地那"]],[7105,7105],[7102,7102]]],[1570796677632,["GJX@GJXAIOU",[[1,7102,"结点为5"]],[7102,7102],[7106,7106]]],[1570796677661,["GJX@GJXAIOU",[[1,7105," "]],[7106,7106],[7107,7107]]],[1570796677856,["GJX@GJXAIOU",[[1,7107,"；"]],[7107,7107],[7108,7108]]],[1570796683943,["GJX@GJXAIOU",[[1,7116,"\n"]],[7108,7108],[7109,7109]]],[1570796684072,["GJX@GJXAIOU",[[1,7117,"\n"]],[7109,7109],[7110,7110]]],[1570796685710,["GJX@GJXAIOU",[[1,7110,"****"]],[7110,7110],[7112,7112]]],[1570796687353,["GJX@GJXAIOU",[[1,7112,"解答："]],[7112,7112],[7115,7115]]],[1570796688605,["GJX@GJXAIOU",[[1,7125,"\n"]],[7117,7117],[7118,7118]]],[1570796691449,["GJX@GJXAIOU",[[1,7118,"一般方法："]],[7118,7118],[7123,7123]]],[1570796776635,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570796776635,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796750450,["GJX@GJXAIOU",[[1,7123,"可以通过给定结点的 parent 指针"]],[7123,7123],[7142,7142]]],[1570796836636,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570796836636,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796819077,["GJX@GJXAIOU",[[1,7142,"一直找到跟"]],[7142,7142],[7147,7147]]],[1570796820518,["GJX@GJXAIOU",[[-1,7146,"跟"]],[7147,7147],[7146,7146]]],[1570796823343,["GJX@GJXAIOU",[[1,7146,"根几点，"]],[7146,7146],[7150,7150]]],[1570796823941,["GJX@GJXAIOU",[[-1,7147,"几点，"]],[7150,7150],[7147,7147]]],[1570796835618,["GJX@GJXAIOU",[[1,7147,"结点，然后"]],[7147,7147],[7152,7152]]],[1570796896636,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570796896636,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796849944,["GJX@GJXAIOU",[[1,7152,"从根节点中序遍历整个数"]],[7152,7152],[7163,7163]]],[1570796850629,["GJX@GJXAIOU",[[-1,7162,"数"]],[7163,7163],[7162,7162]]],[1570796857887,["GJX@GJXAIOU",[[1,7162,"树，最后得到"]],[7162,7162],[7168,7168]]],[1570796866669,["GJX@GJXAIOU",[[-1,7166,"得到"]],[7168,7168],[7166,7166]]],[1570796891767,["GJX@GJXAIOU",[[1,7166,"根据中序遍历的结果得到每个结点的后继结点；"]],[7166,7166],[7187,7187]]],[1570796892213,["GJX@GJXAIOU",[[1,7195,"\n"]],[7187,7187],[7188,7188]]],[1570796956639,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570796956639,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796907279,["GJX@GJXAIOU",[[1,7188,"时间复杂度为：O()"]],[7188,7188],[7198,7198]]],[1570796910633,["GJX@GJXAIOU",[[1,7197,"N"]],[7197,7197],[7198,7198]]],[1570796912134,["GJX@GJXAIOU",[[1,7207,"\n"]],[7199,7199],[7200,7200]]],[1570796912261,["GJX@GJXAIOU",[[1,7208,"\n"]],[7200,7200],[7201,7201]]],[1570796922151,["GJX@GJXAIOU",[[1,7209,"\n"]],[7201,7201],[7202,7202]]],[1570796923742,["GJX@GJXAIOU",[[1,7202,"****"]],[7202,7202],[7204,7204]]],[1570796927448,["GJX@GJXAIOU",[[1,7204,"进阶："]],[7204,7204],[7207,7207]]],[1570796928879,["GJX@GJXAIOU",[[1,7209," "]],[7209,7209],[7210,7210]]],[1570796929885,["GJX@GJXAIOU",[[1,7218,"\n"]],[7210,7210],[7211,7211]]],[1570796943577,["GJX@GJXAIOU",[[1,7211,"例如 5 的后继结点为1"]],[7211,7211],[7223,7223]]],[1570796943608,["GJX@GJXAIOU",[[1,7222," "]],[7223,7223],[7224,7224]]],[1570796952129,["GJX@GJXAIOU",[[1,7224,"，能不能通过 5 2 1这样"]],[7224,7224],[7238,7238]]],[1570796952158,["GJX@GJXAIOU",[[1,7236," "]],[7238,7238],[7239,7239]]],[1570797016641,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570797016641,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570796958408,["GJX@GJXAIOU",[[1,7239,"的机构"]],[7239,7239],[7242,7242]]],[1570796959189,["GJX@GJXAIOU",[[-1,7240,"机构"]],[7242,7242],[7240,7240]]],[1570796962440,["GJX@GJXAIOU",[[1,7240,"结构找到，即"]],[7240,7240],[7246,7246]]],[1570797076644,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570797076644,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570797060890,["GJX@GJXAIOU",[[1,7246,"当前结点距离后继结点的复杂度"]],[7246,7246],[7260,7260]]],[1570797061933,["GJX@GJXAIOU",[[-1,7257,"复杂度"]],[7260,7260],[7257,7257]]],[1570797073854,["GJX@GJXAIOU",[[1,7257,"距离长度就是所要的复杂度；"]],[7257,7257],[7270,7270]]],[1570797136645,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570797136645,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570797092464,["GJX@GJXAIOU",[[1,7278,"\n"]],[7270,7270],[7271,7271]]],[1570797102842,["GJX@GJXAIOU",[[1,7271,"方案：乳沟"]],[7271,7271],[7276,7276]]],[1570797103309,["GJX@GJXAIOU",[[-1,7274,"乳沟"]],[7276,7276],[7274,7274]]],[1570797106465,["GJX@GJXAIOU",[[1,7274,"如果一个节点"]],[7274,7274],[7280,7280]]],[1570797107157,["GJX@GJXAIOU",[[-1,7278,"节点"]],[7280,7280],[7278,7278]]],[1570797109417,["GJX@GJXAIOU",[[1,7278,"节点"]],[7278,7278],[7280,7280]]],[1570797110572,["GJX@GJXAIOU",[[-1,7278,"节点"]],[7280,7280],[7278,7278]]],[1570797133992,["GJX@GJXAIOU",[[1,7278,"结点有右子树，则后继结点就是右子树上左边的结点，"]],[7278,7278],[7302,7302]]],[1570797136309,["GJX@GJXAIOU",[[-1,7301,"，"]],[7302,7302],[7301,7301]]],[1570797196645,[null,[[-1,7047,"no"],[1,7049,"**"]],[7047,7047],[7051,7051]]],[1570797196645,[null,[[1,7047,"no"],[-1,7047,"**"]],[7051,7051],[7047,7047]]],[1570797140321,["GJX@GJXAIOU",[[1,7302,"例：1的"]],[7302,7302],[7306,7306]]],[1570797140351,["GJX@GJXAIOU",[[1,7305," "]],[7306,7306],[7307,7307]]],[1570797145439,["GJX@GJXAIOU",[[1,7307,"后继为6"]],[7307,7307],[7311,7311]]],[1570797145468,["GJX@GJXAIOU",[[1,7310," "]],[7311,7311],[7312,7312]]],[1570797145632,["GJX@GJXAIOU",[[1,7312,"；"]],[7312,7312],[7313,7313]]],[1570797146448,["GJX@GJXAIOU",[[1,7321,"\n"]],[7313,7313],[7314,7314]]],[1570797166096,["GJX@GJXAIOU",[[1,7314,"如果没有右子树，则使用parent"]],[7314,7314],[7331,7331]]],[1570797166127,["GJX@GJXAIOU",[[1,7325," "]],[7331,7331],[7332,7332]]],[1570797171682,["GJX@GJXAIOU",[[1,7332," 指针指向"]],[7332,7332],[7337,7337]]],[1570797172389,["GJX@GJXAIOU",[[-1,7335,"指向"]],[7337,7337],[7335,7335]]],[1570797177967,["GJX@GJXAIOU",[[1,7335,"一直向上找，"]],[7335,7335],[7341,7341]]],[1570797187974,["GJX@GJXAIOU",[[-1,7340,"，"]],[7341,7341],[7340,7340]]],[1570797190569,["GJX@GJXAIOU",[[1,7340,"，当前"]],[7340,7340],[7343,7343]]],[1570797193829,["GJX@GJXAIOU",[[-1,7340,"，当前"]],[7343,7343],[7340,7340]]],[1570797194648,["GJX@GJXAIOU",[[1,7340,"，"]],[7340,7340],[7341,7341]]],[1570797195420,["GJX@GJXAIOU",[[-1,7340,"，"]],[7341,7341],[7340,7340]]],[1570797195871,["GJX@GJXAIOU",[[1,7340,"（）"]],[7340,7340],[7342,7342]]],[1570797256648,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7342,"\n"]],[7047,7047],[7343,7343]]],[1570797256648,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7342,"\n"]],[7343,7343],[7047,7047]]],[1570797210871,["GJX@GJXAIOU",[[1,7341,"指向当前结点的指针和parent"]],[7341,7341],[7357,7357]]],[1570797210900,["GJX@GJXAIOU",[[1,7351," "]],[7357,7357],[7358,7358]]],[1570797212010,["GJX@GJXAIOU",[[1,7358,"指向"]],[7358,7358],[7360,7360]]],[1570797212039,["GJX@GJXAIOU",[[1,7358," "]],[7360,7360],[7361,7361]]],[1570797212604,["GJX@GJXAIOU",[[-1,7359,"指向"]],[7361,7361],[7359,7359]]],[1570797218417,["GJX@GJXAIOU",[[1,7359,"指针同时向上移动"]],[7359,7359],[7367,7367]]],[1570797239465,["GJX@GJXAIOU",[[1,7368,"，一直到指向的结点是该结点的"]],[7368,7368],[7382,7382]]],[1570797244509,["GJX@GJXAIOU",[[-1,7379,"结点的"]],[7382,7382],[7379,7379]]],[1570797256512,["GJX@GJXAIOU",[[1,7379,"结点父结点的左孩子就停止"]],[7379,7379],[7391,7391]]],[1570797316653,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7391,"\n"]],[7047,7047],[7392,7392]]],[1570797316653,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7391,"\n"]],[7392,7392],[7047,7047]]],[1570797271704,["GJX@GJXAIOU",[[1,7391,"，则该父结点就是所求接单的"]],[7391,7391],[7404,7404]]],[1570797273653,["GJX@GJXAIOU",[[-1,7401,"接单的"]],[7404,7404],[7401,7401]]],[1570797278262,["GJX@GJXAIOU",[[1,7401,"结点的后继结点；"]],[7401,7401],[7409,7409]]],[1570797291373,["GJX@GJXAIOU",[[1,7417,"\n"]],[7409,7409],[7410,7410]]],[1570797292951,["GJX@GJXAIOU",[[1,7410,"水里吐"]],[7410,7410],[7413,7413]]],[1570797293980,["GJX@GJXAIOU",[[-1,7410,"水里吐"]],[7413,7413],[7410,7410]]],[1570797296216,["GJX@GJXAIOU",[[1,7410,"示例图："]],[7410,7410],[7414,7414]]],[1570797296712,["GJX@GJXAIOU",[[1,7422,"\n"]],[7414,7414],[7415,7415]]],[1570797556655,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7414,"\n"]],[7047,7047],[7415,7415]]],[1570797556655,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7414,"\n"]],[7415,7415],[7047,7047]]],[1570797509363,["GJX@GJXAIOU",[[1,7415,"![题目三寻找后继结点示例]($resource/%E9%A2%98%E7%9B%AE%E4%B8%89%E5%AF%BB%E6%89%BE%E5%90%8E%E7%BB%A7%E7%BB%93%E7%82%B9%E7%A4%BA%E4%BE%8B.png)"]],[7415,7415],[7545,7545]]],[1570797525776,["GJX@GJXAIOU",[[1,7545,"以结点1"]],[7545,7545],[7549,7549]]],[1570797525808,["GJX@GJXAIOU",[[1,7548," "]],[7549,7549],[7550,7550]]],[1570797525943,["GJX@GJXAIOU",[[1,7550," "]],[7550,7550],[7551,7551]]],[1570797526669,["GJX@GJXAIOU",[[-1,7550," "]],[7551,7551],[7550,7550]]],[1570797537449,["GJX@GJXAIOU",[[1,7550,"1 为例，其父结点为5"]],[7550,7550],[7561,7561]]],[1570797537479,["GJX@GJXAIOU",[[1,7560," "]],[7561,7561],[7562,7562]]],[1570797537783,["GJX@GJXAIOU",[[1,7562,"，"]],[7562,7562],[7563,7563]]],[1570797540386,["GJX@GJXAIOU",[[-1,7562,"，"]],[7563,7563],[7562,7562]]],[1570797541466,["GJX@GJXAIOU",[[1,7562,",11不是"]],[7562,7562],[7567,7567]]],[1570797541495,["GJX@GJXAIOU",[[1,7565," "]],[7567,7567],[7568,7568]]],[1570797543718,["GJX@GJXAIOU",[[1,7568,"5"]],[7568,7568],[7569,7569]]],[1570797543750,["GJX@GJXAIOU",[[1,7568," "]],[7569,7569],[7570,7570]]],[1570797555424,["GJX@GJXAIOU",[[1,7570," 的左结点，向上，5的"]],[7570,7570],[7581,7581]]],[1570797555453,["GJX@GJXAIOU",[[1,7580," "]],[7581,7581],[7582,7582]]],[1570797616656,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7582,"\n"]],[7047,7047],[7583,7583]]],[1570797616656,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7582,"\n"]],[7583,7583],[7047,7047]]],[1570797558176,["GJX@GJXAIOU",[[1,7582,"父结点为2"]],[7582,7582],[7587,7587]]],[1570797558205,["GJX@GJXAIOU",[[1,7586," "]],[7587,7587],[7588,7588]]],[1570797558993,["GJX@GJXAIOU",[[1,7588,"，"]],[7588,7588],[7589,7589]]],[1570797559970,["GJX@GJXAIOU",[[-1,7588,"，"]],[7589,7589],[7588,7588]]],[1570797560054,["GJX@GJXAIOU",[[1,7588,",2"]],[7588,7588],[7590,7590]]],[1570797560495,["GJX@GJXAIOU",[[-1,7589,"2"]],[7590,7590],[7589,7589]]],[1570797561906,["GJX@GJXAIOU",[[1,7589,"5不是"]],[7589,7589],[7592,7592]]],[1570797561937,["GJX@GJXAIOU",[[1,7590," "]],[7592,7592],[7593,7593]]],[1570797562991,["GJX@GJXAIOU",[[1,7593,"2"]],[7593,7593],[7594,7594]]],[1570797563021,["GJX@GJXAIOU",[[1,7593," "]],[7594,7594],[7595,7595]]],[1570797563607,["GJX@GJXAIOU",[[1,7595,"的"]],[7595,7595],[7596,7596]]],[1570797563638,["GJX@GJXAIOU",[[1,7595," "]],[7596,7596],[7597,7597]]],[1570797572024,["GJX@GJXAIOU",[[1,7597,"左结点，向上，2 是1"]],[7597,7597],[7608,7608]]],[1570797572054,["GJX@GJXAIOU",[[1,7607," "]],[7608,7608],[7609,7609]]],[1570797579498,["GJX@GJXAIOU",[[1,7609," 的左结点，则节点1"]],[7609,7609],[7619,7619]]],[1570797579528,["GJX@GJXAIOU",[[1,7618," "]],[7619,7619],[7620,7620]]],[1570797586192,["GJX@GJXAIOU",[[1,7620,"1 的后继结点为1"]],[7620,7620],[7629,7629]]],[1570797586221,["GJX@GJXAIOU",[[1,7628," "]],[7629,7629],[7630,7630]]],[1570797586720,["GJX@GJXAIOU",[[1,7630,"；"]],[7630,7630],[7631,7631]]],[1570797589465,["GJX@GJXAIOU",[[1,7638,"\n"]],[7631,7631],[7632,7632]]],[1570797589582,["GJX@GJXAIOU",[[1,7639,"\n"]],[7632,7632],[7633,7633]]],[1570797593214,["GJX@GJXAIOU",[[1,7633,"****"]],[7633,7633],[7635,7635]]],[1570797594715,["GJX@GJXAIOU",[[1,7635,"补充"]],[7635,7635],[7637,7637]]],[1570797604974,["GJX@GJXAIOU",[[-1,7638,"*"]],[7639,7639],[7638,7638]]],[1570797608090,["GJX@GJXAIOU",[[1,7638,"*"]],[7638,7638],[7639,7639]]],[1570797676657,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7639,"\n"]],[7047,7047],[7640,7640]]],[1570797676657,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7639,"\n"]],[7640,7640],[7047,7047]]],[1570797616894,["GJX@GJXAIOU",[[-1,7638,"*"]],[7639,7639],[7638,7638]]],[1570797619576,["GJX@GJXAIOU",[[1,7638,"*"]],[7638,7638],[7639,7639]]],[1570797736657,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"],[1,7639,"\n"]],[7047,7047],[7640,7640]]],[1570797736657,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"],[-1,7639,"\n"]],[7640,7640],[7047,7047]]],[1570797701077,["GJX@GJXAIOU",[[1,7639,"~~~~"]],[7639,7639],[7641,7641]]],[1570797710518,["GJX@GJXAIOU",[[1,7634," [ ] *"]],[7641,7641],[7647,7647]]],[1570797716759,["GJX@GJXAIOU",[[-1,7645,"~~~~"]],[7645,7649],[7645,7645]]],[1570797718447,["GJX@GJXAIOU",[[-1,7634," [ ] *"]],[7633,7639],[7633,7633]]],[1570797720897,["GJX@GJXAIOU",[[1,7634," [ ] *"]],[7633,7633],[7633,7639]]],[1570797721394,["GJX@GJXAIOU",[[1,7645,"~~~~"]],[7645,7645],[7645,7649]]],[1570797721802,["GJX@GJXAIOU",[[-1,7634," [ ] *"]],[7647,7647],[7641,7641]]],[1570797722240,["GJX@GJXAIOU",[[-1,7638,"*~~~~"]],[7641,7641],[7638,7638]]],[1570797722689,["GJX@GJXAIOU",[[1,7638,"*"]],[7638,7638],[7639,7639]]],[1570797723121,["GJX@GJXAIOU",[[-1,7638,"*"]],[7639,7639],[7638,7638]]],[1570797723544,["GJX@GJXAIOU",[[1,7638,"*"]],[7638,7638],[7639,7639]]],[1570797723983,["GJX@GJXAIOU",[[-1,7635,"补充"]],[7637,7637],[7635,7635]]],[1570797724584,["GJX@GJXAIOU",[[-1,7633,"****"]],[7635,7635],[7633,7633]]],[1570797725329,["GJX@GJXAIOU",[[-1,7639,"\n"]],[7633,7633],[7632,7632]]],[1570797726600,["GJX@GJXAIOU",[[-1,7638,"\n"]],[7632,7632],[7631,7631]]],[1570797728837,["GJX@GJXAIOU",[[1,7638,"\n"]],[7631,7631],[7632,7632]]],[1570797729213,["GJX@GJXAIOU",[[1,7639,"\n"]],[7632,7632],[7633,7633]]],[1570797731293,["GJX@GJXAIOU",[[1,7633,"****"]],[7633,7633],[7635,7635]]],[1570797734271,["GJX@GJXAIOU",[[1,7635,"补充："]],[7635,7635],[7638,7638]]],[1570798396670,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798396670,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798390559,["GJX@GJXAIOU",[[1,7640,"如果要求前驱结点，"]],[7640,7640],[7649,7649]]],[1570798394621,["GJX@GJXAIOU",[[-1,7648,"，"]],[7649,7649],[7648,7648]]],[1570798395735,["GJX@GJXAIOU",[[1,7648,"，"]],[7648,7648],[7649,7649]]],[1570798456670,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798456670,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798400537,["GJX@GJXAIOU",[[1,7649,"方案如下："]],[7649,7649],[7654,7654]]],[1570798400777,["GJX@GJXAIOU",[[1,7661,"\n"]],[7654,7654],[7655,7655]]],[1570798433250,["GJX@GJXAIOU",[[1,7655,"如果结点有左子树，该结点的前驱就是左子树的最右边结点；"]],[7655,7655],[7682,7682]]],[1570798433471,["GJX@GJXAIOU",[[1,7689,"\n"]],[7682,7682],[7683,7683]]],[1570798441306,["GJX@GJXAIOU",[[1,7683,"如果结点没有左子树，该接地那"]],[7683,7683],[7697,7697]]],[1570798443701,["GJX@GJXAIOU",[[-1,7693,"该接地那"]],[7697,7697],[7693,7693]]],[1570798450576,["GJX@GJXAIOU",[[1,7693,"就一直往上找，知道"]],[7693,7693],[7702,7702]]],[1570798452341,["GJX@GJXAIOU",[[-1,7699,"，知道"]],[7702,7702],[7699,7699]]],[1570798453160,["GJX@GJXAIOU",[[1,7699,"，"]],[7699,7699],[7700,7700]]],[1570798516672,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798516672,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798460683,["GJX@GJXAIOU",[[1,7700,"直到指向的节点"]],[7700,7700],[7707,7707]]],[1570798462808,["GJX@GJXAIOU",[[-1,7705,"节点"]],[7707,7707],[7705,7705]]],[1570798472933,["GJX@GJXAIOU",[[1,7705,"结点是其父结点的右孩子位置"]],[7705,7705],[7718,7718]]],[1570798473567,["GJX@GJXAIOU",[[-1,7716,"位置"]],[7718,7718],[7716,7716]]],[1570798476408,["GJX@GJXAIOU",[[1,7716,"为止；"]],[7716,7716],[7719,7719]]],[1570798477615,["GJX@GJXAIOU",[[1,7726,"\n"]],[7719,7719],[7720,7720]]],[1570798477760,["GJX@GJXAIOU",[[1,7727,"\n"]],[7720,7720],[7721,7721]]],[1570798576674,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798576674,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798519416,["GJX@GJXAIOU",[[1,7728,"\n"]],[7721,7721],[7722,7722]]],[1570798519558,["GJX@GJXAIOU",[[1,7729,"\n"]],[7722,7722],[7723,7723]]],[1570798560045,["GJX@GJXAIOU",[[1,7723,"### 介绍二叉树的序列化和反序列化"]],[7723,7723],[7741,7741]]],[1570798562014,["GJX@GJXAIOU",[[1,7748,"\n"]],[7741,7741],[7742,7742]]],[1570798563151,["GJX@GJXAIOU",[[1,7749,"\n"]],[7742,7742],[7743,7743]]],[1570798564214,["GJX@GJXAIOU",[[1,7743,"****"]],[7743,7743],[7745,7745]]],[1570798565892,["GJX@GJXAIOU",[[1,7745,"序列胡"]],[7745,7745],[7748,7748]]],[1570798566598,["GJX@GJXAIOU",[[-1,7747,"胡"]],[7748,7748],[7747,7747]]],[1570798568752,["GJX@GJXAIOU",[[1,7747,"化："]],[7747,7747],[7749,7749]]],[1570798575625,["GJX@GJXAIOU",[[1,7751," 就是将在"]],[7751,7751],[7756,7756]]],[1570798636679,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798636679,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798587558,["GJX@GJXAIOU",[[1,7756,"内存中构建的二叉树，怎么使用文件践行"]],[7756,7756],[7774,7774]]],[1570798588301,["GJX@GJXAIOU",[[-1,7772,"践行"]],[7774,7774],[7772,7772]]],[1570798596539,["GJX@GJXAIOU",[[1,7772,"进行存储（）*"]],[7772,7772],[7779,7779]]],[1570798602854,["GJX@GJXAIOU",[[-1,7778,"*"]],[7779,7779],[7778,7778]]],[1570798606321,["GJX@GJXAIOU",[[1,7777,"一般编程"]],[7777,7777],[7781,7781]]],[1570798607108,["GJX@GJXAIOU",[[-1,7779,"编程"]],[7781,7781],[7779,7779]]],[1570798613090,["GJX@GJXAIOU",[[1,7779,"变成字符串进行处理"]],[7779,7779],[7788,7788]]],[1570798617221,["GJX@GJXAIOU",[[1,7796,"\n"]],[7789,7789],[7790,7790]]],[1570798618013,["GJX@GJXAIOU",[[1,7797,"\n"]],[7790,7790],[7791,7791]]],[1570798621322,["GJX@GJXAIOU",[[1,7791,"可以采用"]],[7791,7791],[7795,7795]]],[1570798623141,["GJX@GJXAIOU",[[-1,7791,"可以采用"]],[7795,7795],[7791,7791]]],[1570798624260,["GJX@GJXAIOU",[[1,7791,"****"]],[7791,7791],[7793,7793]]],[1570798625632,["GJX@GJXAIOU",[[1,7793,"方案"]],[7793,7793],[7795,7795]]],[1570798627519,["GJX@GJXAIOU",[[1,7790,"*"]],[7790,7790],[7791,7791]]],[1570798629157,["GJX@GJXAIOU",[[-1,7790,"*"]],[7791,7791],[7790,7790]]],[1570798629790,["GJX@GJXAIOU",[[1,7790,"****"]],[7790,7790],[7792,7792]]],[1570798633950,["GJX@GJXAIOU",[[1,7792,"反序列化："]],[7792,7792],[7797,7797]]],[1570798635681,["GJX@GJXAIOU",[[1,7799," "]],[7799,7799],[7800,7800]]],[1570798696682,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798696682,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798639095,["GJX@GJXAIOU",[[1,7800,"就是使用"]],[7800,7800],[7804,7804]]],[1570798643589,["GJX@GJXAIOU",[[-1,7802,"使用"]],[7804,7804],[7802,7802]]],[1570798651082,["GJX@GJXAIOU",[[1,7802,"将文件中徐硫化"]],[7802,7802],[7809,7809]]],[1570798651797,["GJX@GJXAIOU",[[-1,7806,"徐硫化"]],[7809,7809],[7806,7806]]],[1570798661569,["GJX@GJXAIOU",[[1,7806,"序列化的二叉树取出冲你从哪个"]],[7806,7806],[7820,7820]]],[1570798662647,["GJX@GJXAIOU",[[-1,7815,"冲你从哪个"]],[7820,7820],[7815,7815]]],[1570798669011,["GJX@GJXAIOU",[[1,7815,"重新还原成天"]],[7815,7815],[7821,7821]]],[1570798669701,["GJX@GJXAIOU",[[-1,7820,"天"]],[7821,7821],[7820,7820]]],[1570798671408,["GJX@GJXAIOU",[[1,7820,"二叉树；"]],[7820,7820],[7824,7824]]],[1570798692824,["GJX@GJXAIOU",[[1,7831,"："]],[7831,7831],[7832,7832]]],[1570798694630,["GJX@GJXAIOU",[[-1,7831,"："]],[7832,7832],[7831,7831]]],[1570798695094,["GJX@GJXAIOU",[[1,7838,"\n"]],[7831,7831],[7832,7832]]],[1570798696386,["GJX@GJXAIOU",[[1,7832,"- "]],[7832,7832],[7834,7834]]],[1570798756682,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798756682,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798711488,["GJX@GJXAIOU",[[1,7834,"使用先序遍历、中序遍历、后续遍历、"]],[7834,7834],[7851,7851]]],[1570798713630,["GJX@GJXAIOU",[[-1,7850,"、"]],[7851,7851],[7850,7850]]],[1570798728113,["GJX@GJXAIOU",[[1,7850,"其中之一，同样反序列化也应该使用同样方式"]],[7850,7850],[7870,7870]]],[1570798731310,["GJX@GJXAIOU",[[-1,7868,"方式"]],[7870,7870],[7868,7868]]],[1570798732488,["GJX@GJXAIOU",[[1,7868,"方式；"]],[7868,7868],[7871,7871]]],[1570798936684,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798936684,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798927294,["GJX@GJXAIOU",[[1,7872,"- 使用按层序列化；"]],[7872,7872],[7882,7882]]],[1570798996685,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570798996685,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570798947222,["GJX@GJXAIOU",[[1,7884,"****"]],[7884,7884],[7886,7886]]],[1570798953688,["GJX@GJXAIOU",[[1,7886,"以现需"]],[7886,7886],[7889,7889]]],[1570798954228,["GJX@GJXAIOU",[[-1,7887,"现需"]],[7889,7889],[7887,7887]]],[1570798957761,["GJX@GJXAIOU",[[1,7887,"先序遍历为例："]],[7887,7887],[7894,7894]]],[1570798959293,["GJX@GJXAIOU",[[1,7900,"\n"]],[7896,7896],[7897,7897]]],[1570798962893,["GJX@GJXAIOU",[[1,7901,"\n"]],[7898,7898],[7899,7899]]],[1570798962997,["GJX@GJXAIOU",[[1,7902,"\n"]],[7899,7899],[7900,7900]]],[1570798963110,["GJX@GJXAIOU",[[1,7903,"\n"]],[7900,7900],[7901,7901]]],[1570798963232,["GJX@GJXAIOU",[[1,7904,"\n"]],[7901,7901],[7902,7902]]],[1570798963353,["GJX@GJXAIOU",[[1,7905,"\n"]],[7902,7902],[7903,7903]]],[1570798963461,["GJX@GJXAIOU",[[1,7906,"\n"]],[7903,7903],[7904,7904]]],[1570798963573,["GJX@GJXAIOU",[[1,7907,"\n"]],[7904,7904],[7905,7905]]],[1570798963708,["GJX@GJXAIOU",[[1,7908,"\n"]],[7905,7905],[7906,7906]]],[1570798963830,["GJX@GJXAIOU",[[1,7909,"\n"]],[7906,7906],[7907,7907]]],[1570798963942,["GJX@GJXAIOU",[[1,7910,"\n"]],[7907,7907],[7908,7908]]],[1570798969514,["GJX@GJXAIOU",[[1,7898,"输的"]],[7898,7898],[7900,7900]]],[1570798971732,["GJX@GJXAIOU",[[-1,7898,"输的"]],[7900,7900],[7898,7898]]],[1570798971893,["GJX@GJXAIOU",[[-1,7910,"\n"]],[7898,7898],[7897,7897]]],[1570798979030,["GJX@GJXAIOU",[[1,7897,"树的结构为："]],[7897,7897],[7903,7903]]],[1570798979342,["GJX@GJXAIOU",[[1,7916,"\n"]],[7903,7903],[7904,7904]]],[1570799356693,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799356693,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799352622,["GJX@GJXAIOU",[[1,7904,"![题目四序列化示例]($resource/%E9%A2%98%E7%9B%AE%E5%9B%9B%E5%BA%8F%E5%88%97%E5%8C%96%E7%A4%BA%E4%BE%8B.png)"]],[7904,7904],[8004,8004]]],[1570799416694,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799416694,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799375991,["GJX@GJXAIOU",[[1,8005,"先序遍历结果：1_2_"]],[8005,8005],[8016,8016]]],[1570799378982,["GJX@GJXAIOU",[[1,8012,"`"]],[8012,8012],[8013,8013]]],[1570799380039,["GJX@GJXAIOU",[[1,8017,"`"]],[8017,8017],[8018,8018]]],[1570799396431,["GJX@GJXAIOU",[[1,8017,"4_#_#_5_#-"]],[8017,8017],[8027,8027]]],[1570799397285,["GJX@GJXAIOU",[[-1,8026,"-"]],[8027,8027],[8026,8026]]],[1570799398235,["GJX@GJXAIOU",[[1,8026,"——"]],[8026,8026],[8028,8028]]],[1570799399053,["GJX@GJXAIOU",[[-1,8026,"——"]],[8028,8028],[8026,8026]]],[1570799414519,["GJX@GJXAIOU",[[1,8026,"_#_3_6_#_"]],[8026,8026],[8035,8035]]],[1570799476696,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799476696,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799423360,["GJX@GJXAIOU",[[1,8035,"#_7_#_#_"]],[8035,8035],[8043,8043]]],[1570799433407,["GJX@GJXAIOU",[[1,8055,"\n"]],[8044,8044],[8045,8045]]],[1570799439424,["GJX@GJXAIOU",[[1,8045,"其中：``"]],[8045,8045],[8050,8050]]],[1570799441928,["GJX@GJXAIOU",[[1,8049,"#"]],[8049,8049],[8050,8050]]],[1570799443598,["GJX@GJXAIOU",[[1,8051,"baish"]],[8051,8051],[8056,8056]]],[1570799444733,["GJX@GJXAIOU",[[-1,8050,"`baish"]],[8056,8056],[8050,8050]]],[1570799454488,["GJX@GJXAIOU",[[1,8050,"`表示该结点Wie"]],[8050,8050],[8059,8059]]],[1570799454521,["GJX@GJXAIOU",[[1,8056," "]],[8059,8059],[8060,8060]]],[1570799456269,["GJX@GJXAIOU",[[-1,8055,"点 Wie"]],[8060,8060],[8055,8055]]],[1570799459241,["GJX@GJXAIOU",[[1,8055,"节点"]],[8055,8055],[8057,8057]]],[1570799460173,["GJX@GJXAIOU",[[-1,8055,"节点"]],[8057,8057],[8055,8055]]],[1570799463698,["GJX@GJXAIOU",[[1,8055,"结点"]],[8055,8055],[8057,8057]]],[1570799465454,["GJX@GJXAIOU",[[-1,8055,"结"]],[8056,8056],[8055,8055]]],[1570799468457,["GJX@GJXAIOU",[[1,8056,"为空，"]],[8056,8056],[8059,8059]]],[1570799536697,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799536698,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799481912,["GJX@GJXAIOU",[[1,8059,"``"]],[8059,8059],[8061,8061]]],[1570799483498,["GJX@GJXAIOU",[[1,8060,"_"]],[8060,8060],[8061,8061]]],[1570799490171,["GJX@GJXAIOU",[[1,8062,"表示只"]],[8062,8062],[8065,8065]]],[1570799490637,["GJX@GJXAIOU",[[-1,8064,"只"]],[8065,8065],[8064,8064]]],[1570799497794,["GJX@GJXAIOU",[[1,8064,"值的结束符，可以送"]],[8064,8064],[8073,8073]]],[1570799501453,["GJX@GJXAIOU",[[-1,8070,"可以送"]],[8073,8073],[8070,8070]]],[1570799518643,["GJX@GJXAIOU",[[1,8070,"这两个都可以使用其他符号进行代替；如果不是"]],[8070,8070],[8091,8091]]],[1570799519559,["GJX@GJXAIOU",[[-1,8089,"不是"]],[8091,8091],[8089,8089]]],[1570799521714,["GJX@GJXAIOU",[[1,8089,"不使用 "]],[8089,8089],[8093,8093]]],[1570799525377,["GJX@GJXAIOU",[[1,8092,"··"]],[8092,8092],[8094,8094]]],[1570799526479,["GJX@GJXAIOU",[[-1,8092,"··"]],[8094,8094],[8092,8092]]],[1570799527327,["GJX@GJXAIOU",[[1,8092,"``"]],[8092,8092],[8094,8094]]],[1570799528472,["GJX@GJXAIOU",[[1,8093,"#"]],[8093,8093],[8094,8094]]],[1570799533521,["GJX@GJXAIOU",[[1,8095,"则无法"]],[8095,8095],[8098,8098]]],[1570799596704,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799596704,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799541952,["GJX@GJXAIOU",[[1,8098,"表示整个树嗾使"]],[8098,8098],[8105,8105]]],[1570799542893,["GJX@GJXAIOU",[[-1,8103,"嗾使"]],[8105,8105],[8103,8103]]],[1570799548715,["GJX@GJXAIOU",[[1,8103,"都是一样的情况，"]],[8103,8103],[8111,8111]]],[1570799561182,["GJX@GJXAIOU",[[-1,8111," "]],[8112,8112],[8111,8111]]],[1570799561800,["GJX@GJXAIOU",[[1,8111,"；"]],[8111,8111],[8112,8112]]],[1570799562432,["GJX@GJXAIOU",[[1,8123,"\n"]],[8112,8112],[8113,8113]]],[1570799584634,["GJX@GJXAIOU",[[1,8113,"反序列化：从数组的的哥"]],[8113,8113],[8124,8124]]],[1570799585645,["GJX@GJXAIOU",[[-1,8122,"的哥"]],[8124,8124],[8122,8122]]],[1570799593257,["GJX@GJXAIOU",[[1,8122,"第一个元素开始，这个元素"]],[8122,8122],[8134,8134]]],[1570799595061,["GJX@GJXAIOU",[[-1,8130,"这个元素"]],[8134,8134],[8130,8130]]],[1570799596402,["GJX@GJXAIOU",[[1,8130,"因为"]],[8130,8130],[8132,8132]]],[1570799656703,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799656703,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799596834,["GJX@GJXAIOU",[[1,8132,"四"]],[8132,8132],[8133,8133]]],[1570799598776,["GJX@GJXAIOU",[[-1,8132,"四"]],[8133,8133],[8132,8132]]],[1570799600785,["GJX@GJXAIOU",[[1,8132,"是现需"]],[8132,8132],[8135,8135]]],[1570799601621,["GJX@GJXAIOU",[[-1,8133,"现需"]],[8135,8135],[8133,8133]]],[1570799649650,["GJX@GJXAIOU",[[1,8133,"先序遍历，因此该结点一定是根节点，然后开始搭建左子树，1的"]],[8133,8133],[8162,8162]]],[1570799649682,["GJX@GJXAIOU",[[1,8161," "]],[8162,8162],[8163,8163]]],[1570799716705,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799716705,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799659842,["GJX@GJXAIOU",[[1,8163,"左孩子是2"]],[8163,8163],[8168,8168]]],[1570799659875,["GJX@GJXAIOU",[[1,8167," "]],[8168,8168],[8169,8169]]],[1570799680897,["GJX@GJXAIOU",[[1,8169,"，2得"]],[8169,8169],[8172,8172]]],[1570799680929,["GJX@GJXAIOU",[[1,8171," "]],[8172,8172],[8173,8173]]],[1570799681001,["GJX@GJXAIOU",[[1,8173," "]],[8173,8173],[8174,8174]]],[1570799682662,["GJX@GJXAIOU",[[-1,8172,"得 "]],[8174,8174],[8172,8172]]],[1570799687943,["GJX@GJXAIOU",[[1,8172,"的左孩子是4"]],[8172,8172],[8178,8178]]],[1570799687977,["GJX@GJXAIOU",[[1,8177," "]],[8178,8178],[8179,8179]]],[1570799715689,["GJX@GJXAIOU",[[1,8179,"，然后是 #，则"]],[8179,8179],[8187,8187]]],[1570799776705,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799776705,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799717849,["GJX@GJXAIOU",[[1,8187,"四"]],[8187,8187],[8188,8188]]],[1570799718433,["GJX@GJXAIOU",[[-1,8187,"四"]],[8188,8188],[8187,8187]]],[1570799719326,["GJX@GJXAIOU",[[1,8187,"4"]],[8187,8187],[8188,8188]]],[1570799719360,["GJX@GJXAIOU",[[1,8187," "]],[8188,8188],[8189,8189]]],[1570799728730,["GJX@GJXAIOU",[[1,8189," 的左孩子没有，返回到节点4"]],[8189,8189],[8203,8203]]],[1570799728761,["GJX@GJXAIOU",[[1,8202," "]],[8203,8203],[8204,8204]]],[1570799737240,["GJX@GJXAIOU",[[1,8204,"，下一个还是# ，则4"]],[8204,8204],[8215,8215]]],[1570799737273,["GJX@GJXAIOU",[[1,8214," "]],[8215,8215],[8216,8216]]],[1570799737897,["GJX@GJXAIOU",[[1,8216,"的"]],[8216,8216],[8217,8217]]],[1570799737929,["GJX@GJXAIOU",[[1,8216," "]],[8217,8217],[8218,8218]]],[1570799747975,["GJX@GJXAIOU",[[1,8218,"右孩子也没有，则回到2"]],[8218,8218],[8229,8229]]],[1570799748008,["GJX@GJXAIOU",[[1,8228," "]],[8229,8229],[8230,8230]]],[1570799771416,["GJX@GJXAIOU",[[1,8230,"，。。。。"]],[8230,8230],[8235,8235]]],[1570799771959,["GJX@GJXAIOU",[[1,8246,"\n"]],[8235,8235],[8236,8236]]],[1570799772126,["GJX@GJXAIOU",[[1,8247,"\n"]],[8236,8236],[8237,8237]]],[1570799836704,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799836704,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799779864,["GJX@GJXAIOU",[[1,8237,"按层"]],[8237,8237],[8239,8239]]],[1570799956705,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570799956705,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799920543,["GJX@GJXAIOU",[[1,8239,"序列化：上面图片中的二叉树按层遍历的记过"]],[8239,8239],[8259,8259]]],[1570799921479,["GJX@GJXAIOU",[[-1,8257,"记过"]],[8259,8259],[8257,8257]]],[1570799937584,["GJX@GJXAIOU",[[1,8257,"结果为：``"]],[8257,8257],[8263,8263]]],[1570799953702,["GJX@GJXAIOU",[[1,8262,"1_2_3_5_#_#-"]],[8262,8262],[8274,8274]]],[1570799954453,["GJX@GJXAIOU",[[-1,8273,"-"]],[8274,8274],[8273,8273]]],[1570799954943,["GJX@GJXAIOU",[[1,8273,"_"]],[8273,8273],[8274,8274]]],[1570800016706,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570800016706,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570799966784,["GJX@GJXAIOU",[[1,8274,"6_#_#_#-"]],[8274,8274],[8282,8282]]],[1570799967383,["GJX@GJXAIOU",[[-1,8281,"-"]],[8282,8282],[8281,8281]]],[1570799969719,["GJX@GJXAIOU",[[1,8281,"_#_"]],[8281,8281],[8284,8284]]],[1570799993296,["GJX@GJXAIOU",[[1,7721,"```"]],[7721,7721],[7724,7724]]],[1570799993328,["GJX@GJXAIOU",[[1,7724,"language\n```\n"]],[7724,7724],[7724,7732]]],[1570799993864,["GJX@GJXAIOU",[[-1,7724,"language"],[1,7732,"j"]],[7724,7732],[7725,7725]]],[1570799994352,["GJX@GJXAIOU",[[1,7725,"ava"]],[7725,7725],[7728,7728]]],[1570799994399,["GJX@GJXAIOU",[[1,7729,"\n"]],[7728,7728],[7729,7729]]],[1570800076714,[null,[[-1,7047,"no"],[1,7049,"**"],[-1,7301,"\n"],[1,7302,"；"]],[7047,7047],[7303,7303]]],[1570800076714,[null,[[1,7047,"no"],[-1,7047,"**"],[1,7301,"\n"],[-1,7301,"；"]],[7303,7303],[7047,7047]]],[1570800056579,["GJX@GJXAIOU",[[-1,4790,"Code_02_"],[1,6533,"\n"],[1,6534,"\n"]],[4747,6534],[6528,6528]]],[1570800076594,["GJX@GJXAIOU",[[1,7723,"package nowcoder.easy.day04;\n\npublic class PrintBinaryTree {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static void printTree(Node head) {\n\t\tSystem.out.println(\"Binary Tree:\");\n\t\tprintInOrder(head, 0, \"H\", 17);\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printInOrder(Node head, int height, String to, int len) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tprintInOrder(head.right, height + 1, \"v\", len);\n\t\tString val = to + head.value + to;\n\t\tint lenM = val.length();\n\t\tint lenL = (len - lenM) / 2;\n\t\tint lenR = len - lenM - lenL;\n\t\tval = getSpace(lenL) + val + getSpace(lenR);\n\t\tSystem.out.println(getSpace(height * len) + val);\n\t\tprintInOrder(head.left, height + 1, \"^\", len);\n\t}\n\n\tpublic static String getSpace(int num) {\n\t\tString space = \" \";\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tbuf.append(space);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(1);\n\t\thead.left = new Node(-222222222);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(Integer.MIN_VALUE);\n\t\thead.right.left = new Node(55555555);\n\t\thead.right.right = new Node(66);\n\t\thead.left.left.right = new Node(777);\n\t\tprintTree(head);\n\n\t\thead = new Node(1);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(4);\n\t\thead.right.left = new Node(5);\n\t\thead.right.right = new Node(6);\n\t\thead.left.left.right = new Node(7);\n\t\tprintTree(head);\n\n\t\thead = new Node(1);\n\t\thead.left = new Node(1);\n\t\thead.right = new Node(1);\n\t\thead.left.left = new Node(1);\n\t\thead.right.left = new Node(1);\n\t\thead.right.right = new Node(1);\n\t\thead.left.left.right = new Node(1);\n\t\tprintTree(head);\n\n\t}\n\n}\n"]],[7723,7723],[9504,9504]]],[1570800136710,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800136710,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800103569,["GJX@GJXAIOU",[[1,10075,"```"]],[10075,10075],[10078,10078]]],[1570800103603,["GJX@GJXAIOU",[[1,10078,"language\n```\n"]],[10078,10078],[10078,10086]]],[1570800104568,["GJX@GJXAIOU",[[-1,10078,"language"],[1,10086,"j"]],[10078,10086],[10079,10079]]],[1570800104976,["GJX@GJXAIOU",[[1,10079,"ava"]],[10079,10079],[10082,10082]]],[1570800105065,["GJX@GJXAIOU",[[1,10083,"\n"]],[10082,10082],[10083,10083]]],[1570800107878,["GJX@GJXAIOU",[[1,10083,"package nowcoder.easy.day04;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class SerializeAndReconstructTree {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static String serialByPre(Node head) {\n\t\tif (head == null) {\n\t\t\treturn \"#!\";\n\t\t}\n\t\tString res = head.value + \"!\";\n\t\tres += serialByPre(head.left);\n\t\tres += serialByPre(head.right);\n\t\treturn res;\n\t}\n\n\tpublic static Node reconByPreString(String preStr) {\n\t\t// 首先将字符串分割\n\t\tString[] values = preStr.split(\"!\");\n\t\tQueue<String> queue = new LinkedList<String>();\n\t\tfor (int i = 0; i != values.length; i++) {\n\t\t\tqueue.offer(values[i]);\n\t\t}\n\t\treturn reconPreOrder(queue);\n\t}\n\n\t// 通过队列建出树\n\tpublic static Node reconPreOrder(Queue<String> queue) {\n\t\tString value = queue.poll();\n\t\tif (value.equals(\"#\")) {\n\t\t\treturn null;\n\t\t}\n\t\tNode head = new Node(Integer.valueOf(value));\n\t\thead.left = reconPreOrder(queue);\n\t\thead.right = reconPreOrder(queue);\n\t\treturn head;\n\t}\n\n\tpublic static String serialByLevel(Node head) {\n\t\tif (head == null) {\n\t\t\treturn \"#!\";\n\t\t}\n\t\tString res = head.value + \"!\";\n\t\tQueue<Node> queue = new LinkedList<Node>();\n\t\tqueue.offer(head);\n\t\twhile (!queue.isEmpty()) {\n\t\t\thead = queue.poll();\n\t\t\tif (head.left != null) {\n\t\t\t\tres += head.left.value + \"!\";\n\t\t\t\tqueue.offer(head.left);\n\t\t\t} else {\n\t\t\t\tres += \"#!\";\n\t\t\t}\n\t\t\tif (head.right != null) {\n\t\t\t\tres += head.right.value + \"!\";\n\t\t\t\tqueue.offer(head.right);\n\t\t\t} else {\n\t\t\t\tres += \"#!\";\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static Node reconByLevelString(String levelStr) {\n\t\tString[] values = levelStr.split(\"!\");\n\t\tint index = 0;\n\t\tNode head = generateNodeByString(values[index++]);\n\t\tQueue<Node> queue = new LinkedList<Node>();\n\t\tif (head != null) {\n\t\t\tqueue.offer(head);\n\t\t}\n\t\tNode node = null;\n\t\twhile (!queue.isEmpty()) {\n\t\t\tnode = queue.poll();\n\t\t\tnode.left = generateNodeByString(values[index++]);\n\t\t\tnode.right = generateNodeByString(values[index++]);\n\t\t\tif (node.left != null) {\n\t\t\t\tqueue.offer(node.left);\n\t\t\t}\n\t\t\tif (node.right != null) {\n\t\t\t\tqueue.offer(node.right);\n\t\t\t}\n\t\t}\n\t\treturn head;\n\t}\n\n\tpublic static Node generateNodeByString(String val) {\n\t\tif (val.equals(\"#\")) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Node(Integer.valueOf(val));\n\t}\n\n\t// for test -- print tree\n\tpublic static void printTree(Node head) {\n\t\tSystem.out.println(\"Binary Tree:\");\n\t\tprintInOrder(head, 0, \"H\", 17);\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printInOrder(Node head, int height, String to, int len) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tprintInOrder(head.right, height + 1, \"v\", len);\n\t\tString val = to + head.value + to;\n\t\tint lenM = val.length();\n\t\tint lenL = (len - lenM) / 2;\n\t\tint lenR = len - lenM - lenL;\n\t\tval = getSpace(lenL) + val + getSpace(lenR);\n\t\tSystem.out.println(getSpace(height * len) + val);\n\t\tprintInOrder(head.left, height + 1, \"^\", len);\n\t}\n\n\tpublic static String getSpace(int num) {\n\t\tString space = \" \";\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tbuf.append(space);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = null;\n\t\tprintTree(head);\n\n\t\tString pre = serialByPre(head);\n\t\tSystem.out.println(\"serialize tree by pre-order: \" + pre);\n\t\thead = reconByPreString(pre);\n\t\tSystem.out.print(\"reconstruct tree by pre-order, \");\n\t\tprintTree(head);\n\n\t\tString level = serialByLevel(head);\n\t\tSystem.out.println(\"serialize tree by level: \" + level);\n\t\thead = reconByLevelString(level);\n\t\tSystem.out.print(\"reconstruct tree by level, \");\n\t\tprintTree(head);\n\n\t\tSystem.out.println(\"====================================\");\n\n\t\thead = new Node(1);\n\t\tprintTree(head);\n\n\t\tpre = serialByPre(head);\n\t\tSystem.out.println(\"serialize tree by pre-order: \" + pre);\n\t\thead = reconByPreString(pre);\n\t\tSystem.out.print(\"reconstruct tree by pre-order, \");\n\t\tprintTree(head);\n\n\t\tlevel = serialByLevel(head);\n\t\tSystem.out.println(\"serialize tree by level: \" + level);\n\t\thead = reconByLevelString(level);\n\t\tSystem.out.print(\"reconstruct tree by level, \");\n\t\tprintTree(head);\n\n\t\tSystem.out.println(\"====================================\");\n\n\t\thead = new Node(1);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(4);\n\t\thead.right.right = new Node(5);\n\t\tprintTree(head);\n\n\t\tpre = serialByPre(head);\n\t\tSystem.out.println(\"serialize tree by pre-order: \" + pre);\n\t\thead = reconByPreString(pre);\n\t\tSystem.out.print(\"reconstruct tree by pre-order, \");\n\t\tprintTree(head);\n\n\t\tlevel = serialByLevel(head);\n\t\tSystem.out.println(\"serialize tree by level: \" + level);\n\t\thead = reconByLevelString(level);\n\t\tSystem.out.print(\"reconstruct tree by level, \");\n\t\tprintTree(head);\n\n\t\tSystem.out.println(\"====================================\");\n\n\t\thead = new Node(100);\n\t\thead.left = new Node(21);\n\t\thead.left.left = new Node(37);\n\t\thead.right = new Node(-42);\n\t\thead.right.left = new Node(0);\n\t\thead.right.right = new Node(666);\n\t\tprintTree(head);\n\n\t\tpre = serialByPre(head);\n\t\tSystem.out.println(\"serialize tree by pre-order: \" + pre);\n\t\thead = reconByPreString(pre);\n\t\tSystem.out.print(\"reconstruct tree by pre-order, \");\n\t\tprintTree(head);\n\n\t\tlevel = serialByLevel(head);\n\t\tSystem.out.println(\"serialize tree by level: \" + level);\n\t\thead = reconByLevelString(level);\n\t\tSystem.out.print(\"reconstruct tree by level, \");\n\t\tprintTree(head);\n\n\t\tSystem.out.println(\"====================================\");\n\n\t}\n}\n"]],[10083,10083],[15513,15513]]],[1570800196714,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800196714,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800141530,["GJX@GJXAIOU",[[1,15522,"```"]],[15522,15522],[15525,15525]]],[1570800141567,["GJX@GJXAIOU",[[1,15525,"language\n```\n"]],[15525,15525],[15525,15533]]],[1570800142545,["GJX@GJXAIOU",[[-1,15525,"language"],[1,15533,"j"]],[15525,15533],[15526,15526]]],[1570800143129,["GJX@GJXAIOU",[[1,15526,"ava"]],[15526,15526],[15529,15529]]],[1570800143263,["GJX@GJXAIOU",[[1,15530,"\n"]],[15529,15529],[15530,15530]]],[1570800145962,["GJX@GJXAIOU",[[1,15530,"package nowcoder.easy.day04;\n\npublic class PaperFolding {\n\n\tpublic static void printAllFolds(int N) {\n\t\tprintProcess(1, N, true);\n\t}\n\n\tpublic static void printProcess(int i, int N, boolean down) {\n\t\tif (i > N) {\n\t\t\treturn;\n\t\t}\n\t\tprintProcess(i + 1, N, true);\n\t\tSystem.out.println(down ? \"down \" : \"up \");\n\t\tprintProcess(i + 1, N, false);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint N = 4;\n\t\tprintAllFolds(N);\n\t}\n}\n"]],[15530,15530],[15952,15952]]],[1570800158269,["GJX@GJXAIOU",[[1,15519,"### 折纸问题\n【题目】 请把一段纸条竖着放在桌子上，然后从纸条的下边向\n上方对折1次，压出折痕后展开。此时 折痕是凹下去的，即折痕\n突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折\n2 次，压出折痕后展开，此时有三条折痕，从上到下依次是下折\n痕、下折痕和上折痕。\n给定一 个输入参数N，代表纸条都从下边向上方连续对折N次，\n请从上到下打印所有折痕的方向。 例如：N=1时，打印： down\nN=2时，打印： down down up"]],[15519,15519],[15741,15741]]],[1570800160871,["GJX@GJXAIOU",[[-1,15556,"\n"]],[15556,15556],[15556,15556]]],[1570800161700,["GJX@GJXAIOU",[[-1,15585,"\n"]],[15585,15585],[15585,15585]]],[1570800162581,["GJX@GJXAIOU",[[-1,15613,"\n"]],[15613,15613],[15613,15613]]],[1570800163797,["GJX@GJXAIOU",[[-1,15642,"\n"]],[15642,15642],[15642,15642]]],[1570800164533,["GJX@GJXAIOU",[[-1,15652,"\n"]],[15652,15652],[15652,15652]]],[1570800167221,["GJX@GJXAIOU",[[1,15652,"\n"]],[15652,15652],[15653,15653]]],[1570800168980,["GJX@GJXAIOU",[[-1,15682,"\n"]],[15682,15682],[15682,15682]]],[1570800170526,["GJX@GJXAIOU",[[-1,15714,"\n"]],[15714,15714],[15714,15714]]],[1570800172047,["GJX@GJXAIOU",[[1,15714," "]],[15714,15714],[15715,15715]]],[1570800256774,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800256774,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800210605,["GJX@GJXAIOU",[[1,16175,"### 判断一棵二叉树是否是平衡二叉树"]],[16175,16175],[16194,16194]]],[1570800244542,["GJX@GJXAIOU",[[1,16196,"ping"]],[16196,16196],[16200,16200]]],[1570800245315,["GJX@GJXAIOU",[[-1,16196,"ping"]],[16200,16200],[16196,16196]]],[1570800246111,["GJX@GJXAIOU",[[1,16196,"【"]],[16196,16196],[16197,16197]]],[1570800247278,["GJX@GJXAIOU",[[-1,16196,"【"]],[16197,16197],[16196,16196]]],[1570800256656,["GJX@GJXAIOU",[[1,16196,"平衡二叉树：对于任意一棵"]],[16196,16196],[16208,16208]]],[1570800316775,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800316775,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800272376,["GJX@GJXAIOU",[[1,16208,"子树，左子树和右子树的高度差不能超过1"]],[16208,16208],[16227,16227]]],[1570800272416,["GJX@GJXAIOU",[[1,16226," "]],[16227,16227],[16228,16228]]],[1570800272904,["GJX@GJXAIOU",[[1,16228,"；"]],[16228,16228],[16229,16229]]],[1570800376815,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800376815,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800341824,["GJX@GJXAIOU",[[1,16231,"\n"]],[16229,16229],[16230,16230]]],[1570800343509,["GJX@GJXAIOU",[[1,16230,"****"]],[16230,16230],[16232,16232]]],[1570800346610,["GJX@GJXAIOU",[[1,16232,"思路："]],[16232,16232],[16235,16235]]],[1570800348103,["GJX@GJXAIOU",[[1,16239,"\n"]],[16237,16237],[16238,16238]]],[1570800352176,["GJX@GJXAIOU",[[1,16238,"首先将问题分集"]],[16238,16238],[16245,16245]]],[1570800353012,["GJX@GJXAIOU",[[-1,16243,"分集"]],[16245,16245],[16243,16243]]],[1570800367520,["GJX@GJXAIOU",[[1,16243,"分解：只要保证以每个结点 为"]],[16243,16243],[16257,16257]]],[1570800375821,["GJX@GJXAIOU",[[-1,16255," 为"]],[16257,16257],[16255,16255]]],[1570800376699,["GJX@GJXAIOU",[[1,16255,"为"]],[16255,16255],[16256,16256]]],[1570800436816,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800436816,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800381922,["GJX@GJXAIOU",[[1,16256,"根节点的数"]],[16256,16256],[16261,16261]]],[1570800382420,["GJX@GJXAIOU",[[-1,16260,"数"]],[16261,16261],[16260,16260]]],[1570800389233,["GJX@GJXAIOU",[[1,16260,"树是否平衡；"]],[16260,16260],[16266,16266]]],[1570800404830,["GJX@GJXAIOU",[[1,16268,"\n"]],[16266,16266],[16267,16267]]],[1570800408188,["GJX@GJXAIOU",[[1,16267,"判断殊勋"]],[16267,16267],[16271,16271]]],[1570800408872,["GJX@GJXAIOU",[[-1,16269,"殊勋"]],[16271,16271],[16269,16269]]],[1570800436595,["GJX@GJXAIOU",[[1,16269,"顺序，首先判断该结点的左子树是否平衡，然后判断"]],[16269,16269],[16292,16292]]],[1570800496823,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800496823,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800454291,["GJX@GJXAIOU",[[1,16292,"该结点的右子树是否平衡，最好"]],[16292,16292],[16306,16306]]],[1570800455017,["GJX@GJXAIOU",[[-1,16304,"最好"]],[16306,16306],[16304,16304]]],[1570800480387,["GJX@GJXAIOU",[[1,16304,"如果两个子树都平衡，分别计算左树和右树的高度"]],[16304,16304],[16326,16326]]],[1570800484968,["GJX@GJXAIOU",[[1,16328,"\n"]],[16326,16326],[16327,16327]]],[1570800488356,["GJX@GJXAIOU",[[-1,16328,"\n"]],[16327,16327],[16326,16326]]],[1570800489176,["GJX@GJXAIOU",[[1,16326,"，"]],[16326,16326],[16327,16327]]],[1570800489636,["GJX@GJXAIOU",[[-1,16326,"，"]],[16327,16327],[16326,16326]]],[1570800493952,["GJX@GJXAIOU",[[1,16326,"；因此设计的"]],[16326,16326],[16332,16332]]],[1570800556823,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800556823,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800505595,["GJX@GJXAIOU",[[1,16332,"递归函数的返回值应该是数是否是"]],[16332,16332],[16347,16347]]],[1570800506526,["GJX@GJXAIOU",[[-1,16343,"数是否是"]],[16347,16347],[16343,16343]]],[1570800518850,["GJX@GJXAIOU",[[1,16343,"树是否是平稳的，同时返回数的公安"]],[16343,16343],[16359,16359]]],[1570800519988,["GJX@GJXAIOU",[[-1,16357,"公安"]],[16359,16359],[16357,16357]]],[1570800522169,["GJX@GJXAIOU",[[1,16357,"高度；"]],[16357,16357],[16360,16360]]],[1570800543592,["GJX@GJXAIOU",[[1,16362,"\n"]],[16360,16360],[16361,16361]]],[1570800543743,["GJX@GJXAIOU",[[1,16363,"\n"]],[16361,16361],[16362,16362]]],[1570800546604,["GJX@GJXAIOU",[[1,16362,"****"]],[16362,16362],[16364,16364]]],[1570800548994,["GJX@GJXAIOU",[[1,16364,"注意点："]],[16364,16364],[16368,16368]]],[1570800550270,["GJX@GJXAIOU",[[1,16372,"\n"]],[16370,16370],[16371,16371]]],[1570800554726,["GJX@GJXAIOU",[[1,16371,"因为使用敌对"]],[16371,16371],[16377,16377]]],[1570800556300,["GJX@GJXAIOU",[[-1,16375,"敌对"]],[16377,16377],[16375,16375]]],[1570800616818,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800616818,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800560561,["GJX@GJXAIOU",[[1,16375,"递归进项而茶花树的"]],[16375,16375],[16384,16384]]],[1570800562828,["GJX@GJXAIOU",[[-1,16377,"进项而茶花树的"]],[16384,16384],[16377,16377]]],[1570800570312,["GJX@GJXAIOU",[[1,16377,"进行二叉树的比那里"]],[16377,16377],[16386,16386]]],[1570800571478,["GJX@GJXAIOU",[[-1,16383,"比那里"]],[16386,16386],[16383,16383]]],[1570800585241,["GJX@GJXAIOU",[[1,16383,"遍历的时候，每个递归含糊"]],[16383,16383],[16395,16395]]],[1570800585826,["GJX@GJXAIOU",[[-1,16393,"含糊"]],[16395,16395],[16393,16393]]],[1570800592352,["GJX@GJXAIOU",[[1,16393,"函数会到一个节点3"]],[16393,16393],[16402,16402]]],[1570800592391,["GJX@GJXAIOU",[[1,16401," "]],[16402,16402],[16403,16403]]],[1570800593241,["GJX@GJXAIOU",[[1,16403,"次"]],[16403,16403],[16404,16404]]],[1570800593279,["GJX@GJXAIOU",[[1,16403," "]],[16404,16404],[16405,16405]]],[1570800616296,["GJX@GJXAIOU",[[1,16405,"：首先会到一次，然后范围"]],[16405,16405],[16417,16417]]],[1570800676823,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800676823,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800617199,["GJX@GJXAIOU",[[-1,16415,"范围"]],[16417,16417],[16415,16415]]],[1570800643535,["GJX@GJXAIOU",[[1,16415,"访问左子树之后会回来一次，最后访问右子树之后会回来一次；"]],[16415,16415],[16443,16443]]],[1570800646142,["GJX@GJXAIOU",[[1,16445,"\n"]],[16443,16443],[16444,16444]]],[1570800655091,["GJX@GJXAIOU",[[1,16444,"****"]],[16444,16444],[16446,16446]]],[1570800658272,["GJX@GJXAIOU",[[1,16446,"心得："]],[16446,16446],[16449,16449]]],[1570800661688,["GJX@GJXAIOU",[[1,16451," 使用"]],[16451,16451],[16454,16454]]],[1570800663150,["GJX@GJXAIOU",[[-1,16452,"使用"]],[16454,16454],[16452,16452]]],[1570800672113,["GJX@GJXAIOU",[[1,16452,"对于二叉树使用地轨道额"]],[16452,16452],[16463,16463]]],[1570800673940,["GJX@GJXAIOU",[[-1,16459,"地轨道额"]],[16463,16463],[16459,16459]]],[1570800676042,["GJX@GJXAIOU",[[1,16459,"递归的"]],[16459,16459],[16462,16462]]],[1570800736825,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800736825,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800698627,["GJX@GJXAIOU",[[1,16462,"时候，首先想办法收集一下左子树上的信息，然后想办法手机一下"]],[16462,16462],[16491,16491]]],[1570800700500,["GJX@GJXAIOU",[[-1,16487,"手机一下"]],[16491,16491],[16487,16487]]],[1570800712945,["GJX@GJXAIOU",[[1,16487,"收集一下右子树上的信息，最后将这个"]],[16487,16487],[16504,16504]]],[1570800716268,["GJX@GJXAIOU",[[-1,16502,"这个"]],[16504,16504],[16502,16502]]],[1570800720801,["GJX@GJXAIOU",[[1,16502,"这些信息惊醒"]],[16502,16502],[16508,16508]]],[1570800721551,["GJX@GJXAIOU",[[-1,16506,"惊醒"]],[16508,16508],[16506,16506]]],[1570800727288,["GJX@GJXAIOU",[[1,16506,"进行整合，"]],[16506,16506],[16511,16511]]],[1570800728876,["GJX@GJXAIOU",[[-1,16510,"，"]],[16511,16511],[16510,16510]]],[1570800734096,["GJX@GJXAIOU",[[1,16510,"皆可以得到该"]],[16510,16510],[16516,16516]]],[1570800796852,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800796852,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800753648,["GJX@GJXAIOU",[[1,16516,"结点所在的整棵树符不符合标准，"]],[16516,16516],[16531,16531]]],[1570800755700,["GJX@GJXAIOU",[[-1,16530,"，"]],[16531,16531],[16530,16530]]],[1570800771496,["GJX@GJXAIOU",[[1,16530,"；本题中的标准就是判断该数是否平衡；"]],[16530,16530],[16548,16548]]],[1570800796408,["GJX@GJXAIOU",[[-1,16549,"\n"],[1,16550,"`"]],[16549,16549],[16550,16550]]],[1570800796800,["GJX@GJXAIOU",[[1,16550,"``"]],[16550,16550],[16552,16552]]],[1570800856848,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"]],[7041,7041],[7297,7297]]],[1570800856848,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"]],[7297,7297],[7041,7041]]],[1570800797719,["GJX@GJXAIOU",[[-1,16552,"language"],[1,16560,"j"]],[16552,16560],[16553,16553]]],[1570800798086,["GJX@GJXAIOU",[[1,16553,"ava"]],[16553,16553],[16556,16556]]],[1570800799038,["GJX@GJXAIOU",[[1,16557,"\n"]],[16556,16556],[16557,16557]]],[1570800802792,["GJX@GJXAIOU",[[1,16557,"package nowcoder.easy.day04;\n\npublic class IsBalancedTree {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static boolean isBalance(Node head) {\n\t\tboolean[] res = new boolean[1];\n\t\tres[0] = true;\n\t\tgetHeight(head, 1, res);\n\t\treturn res[0];\n\t}\n\n\tpublic static int getHeight(Node head, int level, boolean[] res) {\n\t\tif (head == null) {\n\t\t\treturn level;\n\t\t}\n\t\tint lH = getHeight(head.left, level + 1, res);\n\t\tif (!res[0]) {\n\t\t\treturn level;\n\t\t}\n\t\tint rH = getHeight(head.right, level + 1, res);\n\t\tif (!res[0]) {\n\t\t\treturn level;\n\t\t}\n\t\tif (Math.abs(lH - rH) > 1) {\n\t\t\tres[0] = false;\n\t\t}\n\t\treturn Math.max(lH, rH);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(1);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(4);\n\t\thead.left.right = new Node(5);\n\t\thead.right.left = new Node(6);\n\t\thead.right.right = new Node(7);\n\n\t\tSystem.out.println(isBalance(head));\n\n\t}\n\n}\n"]],[16557,16557],[17583,17583]]],[1570800805957,["GJX@GJXAIOU",[[-1,17580,"\n"]],[17580,17580],[17579,17579]]],[1570800806758,["GJX@GJXAIOU",[[-1,17576,"\n"]],[17576,17576],[17575,17575]]],[1570800808469,["GJX@GJXAIOU",[[-1,17581,"\n"]],[17581,17581],[17580,17580]]],[1570800809598,["GJX@GJXAIOU",[[1,17585,"\n"]],[17584,17584],[17585,17585]]],[1570800809759,["GJX@GJXAIOU",[[1,17586,"\n"]],[17585,17585],[17586,17586]]],[1570800809925,["GJX@GJXAIOU",[[1,17587,"\n"]],[17586,17586],[17587,17587]]],[1570800810088,["GJX@GJXAIOU",[[1,17588,"\n"]],[17587,17587],[17588,17588]]],[1570801456987,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[1,17580,"\n```"]],[7041,7041],[17584,17584]]],[1570801456987,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[-1,17580,"\n```"]],[17584,17584],[7041,7041]]],[1570801413980,["GJX@GJXAIOU",[[1,17587,"### 判断一棵树是否是搜索二叉树、判断一棵树是否是完全二叉树"]],[17587,17587],[17618,17618]]],[1570801415566,["GJX@GJXAIOU",[[1,17620,"\n"]],[17618,17618],[17619,17619]]],[1570801456694,["GJX@GJXAIOU",[[1,17621,"\n"]],[17619,17619],[17620,17620]]],[1570801456822,["GJX@GJXAIOU",[[1,17622,"\n"]],[17620,17620],[17621,17621]]],[1570801516985,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[1,17616,"\n\n"]],[7041,7041],[17618,17618]]],[1570801516985,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[-1,17618,"\n\n"]],[17618,17618],[7041,7041]]],[1570801457006,["GJX@GJXAIOU",[[1,17623,"\n"]],[17621,17621],[17622,17622]]],[1570801457145,["GJX@GJXAIOU",[[1,17624,"\n"]],[17622,17622],[17623,17623]]],[1570801457269,["GJX@GJXAIOU",[[1,17625,"\n"]],[17623,17623],[17624,17624]]],[1570801457371,["GJX@GJXAIOU",[[1,17626,"\n"]],[17624,17624],[17625,17625]]],[1570801457505,["GJX@GJXAIOU",[[1,17627,"\n"]],[17625,17625],[17626,17626]]],[1570801457670,["GJX@GJXAIOU",[[1,17628,"\n"]],[17626,17626],[17627,17627]]],[1570801457798,["GJX@GJXAIOU",[[1,17629,"\n"]],[17627,17627],[17628,17628]]],[1570801457939,["GJX@GJXAIOU",[[1,17630,"\n"]],[17628,17628],[17629,17629]]],[1570801458083,["GJX@GJXAIOU",[[1,17631,"\n"]],[17629,17629],[17630,17630]]],[1570801458187,["GJX@GJXAIOU",[[1,17632,"\n"]],[17630,17630],[17631,17631]]],[1570801458415,["GJX@GJXAIOU",[[1,17633,"\n"]],[17631,17631],[17632,17632]]],[1570801458506,["GJX@GJXAIOU",[[1,17634,"\n"]],[17632,17632],[17633,17633]]],[1570801461352,["GJX@GJXAIOU",[[1,17620,"****"]],[17620,17620],[17622,17622]]],[1570801461902,["GJX@GJXAIOU",[[1,17622,"sou"]],[17622,17622],[17625,17625]]],[1570801465286,["GJX@GJXAIOU",[[-1,17622,"sou"]],[17625,17625],[17622,17622]]],[1570801471575,["GJX@GJXAIOU",[[1,17622,"搜索二叉树："]],[17622,17622],[17628,17628]]],[1570801491950,["GJX@GJXAIOU",[[1,17630," 根据二叉树的中序遍历是否递增；"]],[17630,17630],[17646,17646]]],[1570801500550,["GJX@GJXAIOU",[[1,17631,"\n"]],[17631,17631],[17632,17632]]],[1570801500685,["GJX@GJXAIOU",[[1,17632,"\n"]],[17632,17632],[17633,17633]]],[1570801516387,["GJX@GJXAIOU",[[1,17631,"任何一个结点"]],[17631,17631],[17637,17637]]],[1570801576987,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n"],[-1,17619,"\n"],[1,17654,"\n\n\n\n"]],[7041,7041],[17658,17658]]],[1570801576987,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n"],[1,17620,"\n"],[-1,17654,"\n\n\n\n"]],[17658,17658],[7041,7041]]],[1570801575974,["GJX@GJXAIOU",[[1,17637,"的左子树的值都比该结点小，右子树的值都比该结点的值大；（）"]],[17637,17637],[17666,17666]]],[1570801636986,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17683,"\n\n\n\n"]],[7041,7041],[17687,17687]]],[1570801636986,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17683,"\n\n\n\n"]],[17687,17687],[7041,7041]]],[1570801612155,["GJX@GJXAIOU",[[1,17665,"不存在重复的结点，因为重复结点的值可以以list"]],[17665,17665],[17689,17689]]],[1570801612197,["GJX@GJXAIOU",[[1,17685," "]],[17689,17689],[17690,17690]]],[1570801613211,["GJX@GJXAIOU",[[1,17690,"进行"]],[17690,17690],[17692,17692]]],[1570801613250,["GJX@GJXAIOU",[[1,17690," "]],[17692,17692],[17693,17693]]],[1570801614657,["GJX@GJXAIOU",[[1,17693,"存放"]],[17693,17693],[17695,17695]]],[1570801627722,["GJX@GJXAIOU",[[1,17698,"****"]],[17698,17698],[17700,17700]]],[1570801630521,["GJX@GJXAIOU",[[1,17700,"解法："]],[17700,17700],[17703,17703]]],[1570801632123,["GJX@GJXAIOU",[[1,17705," "]],[17705,17705],[17706,17706]]],[1570801696991,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17721,"\n\n\n\n"]],[7041,7041],[17725,17725]]],[1570801696991,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17721,"\n\n\n\n"]],[17725,17725],[7041,7041]]],[1570801644800,["GJX@GJXAIOU",[[1,17627,"BST"]],[17627,17627],[17630,17630]]],[1570801644843,["GJX@GJXAIOU",[[1,17627," "]],[17630,17630],[17631,17631]]],[1570801648906,["GJX@GJXAIOU",[[1,17727,"****"]],[17727,17727],[17729,17729]]],[1570801656960,["GJX@GJXAIOU",[[1,17729,"完全二叉树 CBT："]],[17729,17729],[17739,17739]]],[1570801658138,["GJX@GJXAIOU",[[1,17741," "]],[17741,17741],[17742,17742]]],[1570801674841,["GJX@GJXAIOU",[[1,17755,"\n"]],[17742,17742],[17743,17743]]],[1570801676769,["GJX@GJXAIOU",[[1,17743,"****"]],[17743,17743],[17745,17745]]],[1570801678226,["GJX@GJXAIOU",[[1,17745,"戒饭"]],[17745,17745],[17747,17747]]],[1570801678870,["GJX@GJXAIOU",[[-1,17745,"戒饭"]],[17747,17747],[17745,17745]]],[1570801682751,["GJX@GJXAIOU",[[1,17745,"解法："]],[17745,17745],[17748,17748]]],[1570801696715,["GJX@GJXAIOU",[[1,17750," 将二叉树按层"]],[17750,17750],[17757,17757]]],[1570801756991,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17757,"\n\n\n\n"]],[7041,7041],[17761,17761]]],[1570801756991,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17757,"\n\n\n\n"]],[17761,17761],[7041,7041]]],[1570801702387,["GJX@GJXAIOU",[[1,17757,"遍历，如果结点的"]],[17757,17757],[17765,17765]]],[1570801703988,["GJX@GJXAIOU",[[-1,17764,"的"]],[17765,17765],[17764,17764]]],[1570801713748,["GJX@GJXAIOU",[[1,17764,"有右孩子但是没有左孩子则一定是"]],[17764,17764],[17779,17779]]],[1570801717108,["GJX@GJXAIOU",[[-1,17776,"一定是"]],[17779,17779],[17776,17776]]],[1570801748499,["GJX@GJXAIOU",[[1,17776,"一定不是完全二叉树，如果不符合上面，则接着判断是否是 "]],[17776,17776],[17803,17803]]],[1570801816991,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"\n\n\n\n"]],[7041,7041],[17807,17807]]],[1570801816991,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"\n\n\n\n"]],[17807,17807],[7041,7041]]],[1570801770308,["GJX@GJXAIOU",[[1,17803,"有左孩子没有右孩子或者是连个"]],[17803,17803],[17817,17817]]],[1570801770926,["GJX@GJXAIOU",[[-1,17815,"连个"]],[17817,17817],[17815,17815]]],[1570801814339,["GJX@GJXAIOU",[[1,17815,"两个都没有，如果是这种情况则该结点下面的所有节点都必须是叶子结点；否则就不是完全"]],[17815,17815],[17855,17855]]],[1570801876994,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17855,"\n\n\n\n"]],[7041,7041],[17859,17859]]],[1570801876994,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17855,"\n\n\n\n"]],[17859,17859],[7041,7041]]],[1570801818481,["GJX@GJXAIOU",[[1,17855,"二叉树；"]],[17855,17855],[17859,17859]]],[1570801834334,["GJX@GJXAIOU",[[1,17727,"\n"]],[17726,17726],[17727,17727]]],[1570801834436,["GJX@GJXAIOU",[[1,17728,"\n"]],[17727,17727],[17728,17728]]],[1570801843610,["GJX@GJXAIOU",[[1,17726,"下面代码听歌的"]],[17726,17726],[17733,17733]]],[1570801844869,["GJX@GJXAIOU",[[-1,17730,"听歌的"]],[17733,17733],[17730,17730]]],[1570801860721,["GJX@GJXAIOU",[[1,17730,"提供的是递归版本，如果想要飞"]],[17730,17730],[17744,17744]]],[1570801861742,["GJX@GJXAIOU",[[-1,17743,"飞"]],[17744,17744],[17743,17743]]],[1570801876624,["GJX@GJXAIOU",[[1,17743,"非递归版本，只要将中序遍历"]],[17743,17743],[17756,17756]]],[1570801936995,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17891,"\n\n\n\n"]],[7041,7041],[17895,17895]]],[1570801936995,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17891,"\n\n\n\n"]],[17895,17895],[7041,7041]]],[1570801885984,["GJX@GJXAIOU",[[1,17756,"的非递归版本的但因"]],[17756,17756],[17765,17765]]],[1570801886908,["GJX@GJXAIOU",[[-1,17763,"但因"]],[17765,17765],[17763,17763]]],[1570801891687,["GJX@GJXAIOU",[[1,17763,"答应"]],[17763,17763],[17765,17765]]],[1570801892252,["GJX@GJXAIOU",[[-1,17763,"答应"]],[17765,17765],[17763,17763]]],[1570801903635,["GJX@GJXAIOU",[[1,17763,"打印方法去掉，居然后"]],[17763,17763],[17773,17773]]],[1570801905285,["GJX@GJXAIOU",[[-1,17770,"居然后"]],[17773,17773],[17770,17770]]],[1570801924223,["GJX@GJXAIOU",[[1,17770,"然后改成与上一个结点值的比较即可（）"]],[17770,17770],[17788,17788]]],[1570801936049,["GJX@GJXAIOU",[[1,17787,"可以采用一个变量保存上一个结点的"]],[17787,17787],[17803,17803]]],[1570801996996,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17939,"\n\n\n\n"]],[7041,7041],[17943,17943]]],[1570801996996,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17939,"\n\n\n\n"]],[17943,17943],[7041,7041]]],[1570801938530,["GJX@GJXAIOU",[[1,17805,"；"]],[17805,17805],[17806,17806]]],[1570801959700,["GJX@GJXAIOU",[[1,17943,"···"]],[17943,17943],[17946,17946]]],[1570801960886,["GJX@GJXAIOU",[[-1,17943,"···"]],[17946,17946],[17943,17943]]],[1570801961867,["GJX@GJXAIOU",[[1,17943,"```"]],[17943,17943],[17946,17946]]],[1570801961916,["GJX@GJXAIOU",[[1,17946,"language\n```\n"]],[17946,17946],[17946,17954]]],[1570801962240,["GJX@GJXAIOU",[[-1,17946,"language"],[1,17954,"j"]],[17946,17954],[17947,17947]]],[1570801962552,["GJX@GJXAIOU",[[1,17947,"av"]],[17947,17947],[17949,17949]]],[1570801962711,["GJX@GJXAIOU",[[1,17950,"\n"]],[17949,17949],[17950,17950]]],[1570801962808,["GJX@GJXAIOU",[[1,17950,"a"]],[17950,17950],[17951,17951]]],[1570801964038,["GJX@GJXAIOU",[[-1,17950,"a"]],[17951,17951],[17950,17950]]],[1570801964758,["GJX@GJXAIOU",[[-1,17950,"\n"]],[17950,17950],[17949,17949]]],[1570801965862,["GJX@GJXAIOU",[[1,17949,"a"]],[17949,17949],[17950,17950]]],[1570801966464,["GJX@GJXAIOU",[[1,17951,"\n"]],[17950,17950],[17951,17951]]],[1570801966562,["GJX@GJXAIOU",[[1,17951,"'"]],[17951,17951],[17952,17952]]],[1570801967645,["GJX@GJXAIOU",[[-1,17951,"'"]],[17952,17952],[17951,17951]]],[1570801970026,["GJX@GJXAIOU",[[1,17951,"package nowcoder.easy.day04;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class IsBSTAndCBT {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static boolean isBST(Node head) {\n\t\tif (head == null) {\n\t\t\treturn true;\n\t\t}\n\t\tboolean res = true;\n\t\tNode pre = null;\n\t\tNode cur1 = head;\n\t\tNode cur2 = null;\n\t\twhile (cur1 != null) {\n\t\t\tcur2 = cur1.left;\n\t\t\tif (cur2 != null) {\n\t\t\t\twhile (cur2.right != null && cur2.right != cur1) {\n\t\t\t\t\tcur2 = cur2.right;\n\t\t\t\t}\n\t\t\t\tif (cur2.right == null) {\n\t\t\t\t\tcur2.right = cur1;\n\t\t\t\t\tcur1 = cur1.left;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tcur2.right = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pre != null && pre.value > cur1.value) {\n\t\t\t\tres = false;\n\t\t\t}\n\t\t\tpre = cur1;\n\t\t\tcur1 = cur1.right;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static boolean isCBT(Node head) {\n\t\tif (head == null) {\n\t\t\treturn true;\n\t\t}\n\t\tQueue<Node> queue = new LinkedList<Node>();\n\t\tboolean leaf = false;\n\t\tNode l = null;\n\t\tNode r = null;\n\t\tqueue.offer(head);\n\t\twhile (!queue.isEmpty()) {\n\t\t\thead = queue.poll();\n\t\t\tl = head.left;\n\t\t\tr = head.right;\n\t\t\tif ((leaf && (l != null || r != null)) || (l == null && r != null)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (l != null) {\n\t\t\t\tqueue.offer(l);\n\t\t\t}\n\t\t\tif (r != null) {\n\t\t\t\tqueue.offer(r);\n\t\t\t} else {\n\t\t\t\t// 左等于空或者右等于空 则开启。因为上面代码已经去掉左等于空的情况，因此这里只需要判断右是否为空；\n\t\t\t\tleaf = true;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// for test -- print tree\n\tpublic static void printTree(Node head) {\n\t\tSystem.out.println(\"Binary Tree:\");\n\t\tprintInOrder(head, 0, \"H\", 17);\n\t\tSystem.out.println();\n\t}\n\n\tpublic static void printInOrder(Node head, int height, String to, int len) {\n\t\tif (head == null) {\n\t\t\treturn;\n\t\t}\n\t\tprintInOrder(head.right, height + 1, \"v\", len);\n\t\tString val = to + head.value + to;\n\t\tint lenM = val.length();\n\t\tint lenL = (len - lenM) / 2;\n\t\tint lenR = len - lenM - lenL;\n\t\tval = getSpace(lenL) + val + getSpace(lenR);\n\t\tSystem.out.println(getSpace(height * len) + val);\n\t\tprintInOrder(head.left, height + 1, \"^\", len);\n\t}\n\n\tpublic static String getSpace(int num) {\n\t\tString space = \" \";\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tbuf.append(space);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(4);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(6);\n\t\thead.left.left = new Node(1);\n\t\thead.left.right = new Node(3);\n\t\thead.right.left = new Node(5);\n\n\t\tprintTree(head);\n\t\tSystem.out.println(isBST(head));\n\t\tSystem.out.println(isCBT(head));\n\n\t}\n}"]],[17951,17951],[20517,20517]]],[1570801974295,["GJX@GJXAIOU",[[1,20533,"\n"]],[20522,20522],[20523,20523]]],[1570801974412,["GJX@GJXAIOU",[[1,20534,"\n"]],[20523,20523],[20524,20524]]],[1570801991733,["GJX@GJXAIOU",[[1,20535,"\n"]],[20523,20523],[20524,20524]]],[1570801992437,["GJX@GJXAIOU",[[1,20524,"### "]],[20524,20524],[20528,20528]]],[1570802057004,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20528,"\n\n\n\n\n"]],[7041,7041],[20533,20533]]],[1570802057004,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20528,"\n\n\n\n\n"]],[20533,20533],[7041,7041]]],[1570802002150,["GJX@GJXAIOU",[[1,20528,"已知一棵完全二叉树，求其节点的个数\n要求：时间复杂度低于O(N)，N为这棵树的节点个数"]],[20528,20528],[20571,20571]]],[1570802004839,["GJX@GJXAIOU",[[1,20583,"\n"]],[20571,20571],[20572,20572]]],[1570802038630,["GJX@GJXAIOU",[[1,20584,"\n"]],[20572,20572],[20573,20573]]],[1570802039489,["GJX@GJXAIOU",[[1,20573,"****"]],[20573,20573],[20575,20575]]],[1570802040293,["GJX@GJXAIOU",[[1,20575,"jie"]],[20575,20575],[20578,20578]]],[1570802041282,["GJX@GJXAIOU",[[-1,20575,"jie"]],[20578,20578],[20575,20575]]],[1570802042194,["GJX@GJXAIOU",[[1,20575,"Jiel"]],[20575,20575],[20579,20579]]],[1570802043034,["GJX@GJXAIOU",[[-1,20575,"Jiel"]],[20579,20579],[20575,20575]]],[1570802044952,["GJX@GJXAIOU",[[1,20575,"结论："]],[20575,20575],[20578,20578]]],[1570802056092,["GJX@GJXAIOU",[[1,20580," 对于满二叉树，如果"]],[20580,20580],[20590,20590]]],[1570802116998,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20590,"\n\n\n\n\n"]],[7041,7041],[20595,20595]]],[1570802116998,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20590,"\n\n\n\n\n"]],[20595,20595],[7041,7041]]],[1570802060609,["GJX@GJXAIOU",[[1,20590,"数的高度为L"]],[20590,20590],[20596,20596]]],[1570802060656,["GJX@GJXAIOU",[[1,20595," "]],[20596,20596],[20597,20597]]],[1570802068498,["GJX@GJXAIOU",[[1,20597,"，则其节点数为"]],[20597,20597],[20604,20604]]],[1570802237009,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20604,"\n\n\n\n\n"]],[7041,7041],[20609,20609]]],[1570802237009,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20604,"\n\n\n\n\n"]],[20609,20609],[7041,7041]]],[1570802197346,["GJX@GJXAIOU",[[1,20604," ``"]],[20604,20604],[20607,20607]]],[1570802204106,["GJX@GJXAIOU",[[1,20606,"{x"]],[20606,20606],[20608,20608]]],[1570802204996,["GJX@GJXAIOU",[[-1,20607,"x"]],[20608,20608],[20607,20607]]],[1570802208336,["GJX@GJXAIOU",[[1,20607,"2}^{l"]],[20607,20607],[20612,20612]]],[1570802209214,["GJX@GJXAIOU",[[-1,20611,"l"]],[20612,20612],[20611,20611]]],[1570802214730,["GJX@GJXAIOU",[[1,20611,"L} -1$"]],[20611,20611],[20617,20617]]],[1570802217466,["GJX@GJXAIOU",[[1,20606,"$"]],[20606,20606],[20607,20607]]],[1570802221940,["GJX@GJXAIOU",[[-1,20605,"`"]],[20606,20606],[20605,20605]]],[1570802222811,["GJX@GJXAIOU",[[-1,20617,"`"]],[20618,20618],[20617,20617]]],[1570802226687,["GJX@GJXAIOU",[[1,20617,","]],[20617,20617],[20618,20618]]],[1570802232774,["GJX@GJXAIOU",[[-1,20617,","]],[20618,20618],[20617,20617]]],[1570802236289,["GJX@GJXAIOU",[[1,20617,"，这里"]],[20617,20617],[20620,20620]]],[1570802297004,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20620,"\n\n\n\n\n"]],[7041,7041],[20625,20625]]],[1570802297004,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20620,"\n\n\n\n\n"]],[20625,20625],[7041,7041]]],[1570802239505,["GJX@GJXAIOU",[[1,20620,"采用的方法是"]],[20620,20620],[20626,20626]]],[1570802249780,["GJX@GJXAIOU",[[-1,20625,"是"]],[20626,20626],[20625,20625]]],[1570802257467,["GJX@GJXAIOU",[[1,20625,"如果一共有N"]],[20625,20625],[20631,20631]]],[1570802257533,["GJX@GJXAIOU",[[1,20630," "]],[20631,20631],[20632,20632]]],[1570802257924,["GJX@GJXAIOU",[[1,20632,"个"]],[20632,20632],[20633,20633]]],[1570802257966,["GJX@GJXAIOU",[[1,20632," "]],[20633,20633],[20634,20634]]],[1570802268080,["GJX@GJXAIOU",[[1,20634,"结点，每一层都之后"]],[20634,20634],[20643,20643]]],[1570802269101,["GJX@GJXAIOU",[[-1,20641,"之后"]],[20643,20643],[20641,20641]]],[1570802295984,["GJX@GJXAIOU",[[1,20641,"只会遍历一个，不是左孩子就是右孩子，则一共"]],[20641,20641],[20662,20662]]],[1570802357010,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20662,"\n\n\n\n\n"]],[7041,7041],[20667,20667]]],[1570802357010,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20662,"\n\n\n\n\n"]],[20667,20667],[7041,7041]]],[1570802301038,["GJX@GJXAIOU",[[1,20662," O（）"]],[20662,20662],[20666,20666]]],[1570802304155,["GJX@GJXAIOU",[[-1,20663,"O（）"]],[20666,20666],[20663,20663]]],[1570802306440,["GJX@GJXAIOU",[[1,20663,"￥￥"]],[20663,20663],[20665,20665]]],[1570802307852,["GJX@GJXAIOU",[[-1,20663,"￥￥"]],[20665,20665],[20663,20663]]],[1570802309336,["GJX@GJXAIOU",[[1,20663,"$$"]],[20663,20663],[20665,20665]]],[1570802312527,["GJX@GJXAIOU",[[1,20664,"O()"]],[20664,20664],[20667,20667]]],[1570802314453,["GJX@GJXAIOU",[[1,20666,"long"]],[20666,20666],[20670,20670]]],[1570802315742,["GJX@GJXAIOU",[[-1,20668,"ng"]],[20670,20670],[20668,20668]]],[1570802330863,["GJX@GJXAIOU",[[1,20668,"g_2{N}"]],[20668,20668],[20674,20674]]],[1570802336386,["GJX@GJXAIOU",[[1,20670,"{"]],[20670,20670],[20671,20671]]],[1570802339945,["GJX@GJXAIOU",[[1,20672,"}^"]],[20672,20672],[20674,20674]]],[1570802344282,["GJX@GJXAIOU",[[1,20679,","]],[20679,20679],[20680,20680]]],[1570802344741,["GJX@GJXAIOU",[[-1,20679,","]],[20680,20680],[20679,20679]]],[1570802356543,["GJX@GJXAIOU",[[1,20679,"，到了某个结点之后，"]],[20679,20679],[20689,20689]]],[1570802417010,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20689,"\n\n\n\n\n"]],[7041,7041],[20694,20694]]],[1570802417010,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20689,"\n\n\n\n\n"]],[20694,20694],[7041,7041]]],[1570802380849,["GJX@GJXAIOU",[[1,20689,"一直往下遍历的时间复杂度也是 $O(log_{2}^{N})$，最红"]],[20689,20689],[20723,20723]]],[1570802381674,["GJX@GJXAIOU",[[-1,20721,"最红"]],[20723,20723],[20721,20721]]],[1570802395795,["GJX@GJXAIOU",[[1,20721,"最终结果就是两者成绩；"]],[20721,20721],[20732,20732]]],[1570802396550,["GJX@GJXAIOU",[[-1,20729,"成绩；"]],[20732,20732],[20729,20729]]],[1570802404785,["GJX@GJXAIOU",[[1,20729,"乘积；"]],[20729,20729],[20732,20732]]],[1570802405830,["GJX@GJXAIOU",[[1,20744,"\n"]],[20732,20732],[20733,20733]]],[1570802406401,["GJX@GJXAIOU",[[1,20745,"\n"]],[20733,20733],[20734,20734]]],[1570802477014,[null,[[-1,7041,"no"],[1,7043,"**"],[-1,7295,"\n"],[1,7296,"；"],[-1,17581,"\n"],[1,17582,"```"],[-1,17616,"\n\n"],[1,17803,"值"],[1,17804,"；"],[-1,17805,"；"],[-1,17940,"\n"],[1,20732,"\n\n\n\n\n"]],[7041,7041],[20737,20737]]],[1570802477014,[null,[[1,7041,"no"],[-1,7041,"**"],[1,7295,"\n"],[-1,7295,"；"],[1,17581,"\n"],[-1,17581,"```"],[1,17618,"\n\n"],[-1,17803,"值"],[-1,17805,"；"],[1,17807,"；"],[1,17941,"\n"],[-1,20732,"\n\n\n\n\n"]],[20737,20737],[7041,7041]]],[1570802426811,["GJX@GJXAIOU",[[1,20735,"package nowcoder.easy.day04;   public class CompleteTreeNodeNumber {\n\n   public static class Node {\n      public int value;\n public Node left;\n public Node right;   public Node(int data) {\n         this.value = data;\n  }\n   }\n\n   public static int nodeNum(Node head) {\n      if (head == null) {\n         return 0;\n  }\n      return bs(head, 1, mostLeftLevel(head, 1));\n  }\n\n   // node 表示当前节点， level：当前节点在第几层，h:整棵树的高度，为定值；返回值是以这个节点为头的子树一共有多少个节点；\n  public static int bs(Node node, int level, int h) {\n      if (level == h) {\n         return 1;\n  }\n      // node 的右子树上的左边界到 h 层\n  if (mostLeftLevel(node.right, level + 1) == h) {\n         // 1 << (h - level)表示当前节点的左子树和当前节点的节点个数和，2^(h - level)个\n  // 因为右孩子也是一个完全二叉树，使用递归求其总节点，就是后面部分；\n  return (1 << (h - level)) + bs(node.right, level + 1, h);\n  } else {\n         // 没有到 h 层，则右树的高度比左树少一个，1 << (h - level - 1))就是右树所有节点加上当前节点个数，然后后面是左树也是完全二叉树，递归求解；\n  return (1 << (h - level - 1)) + bs(node.left, level + 1, h);\n  }\n   }\n\n   public static int mostLeftLevel(Node node, int level) {\n      while (node != null) {\n         level++;\n  node = node.left;\n  }\n      return level - 1;\n  }\n\n   public static void main(String[] args) {\n      Node head = new Node(1);\n  head.left = new Node(2);\n  head.right = new Node(3);\n  head.left.left = new Node(4);\n  head.left.right = new Node(5);\n  head.right.left = new Node(6);\n  System.out.println(nodeNum(head));    }\n\n}"]],[20735,20735],[22130,22130]]],[1570802428866,["GJX@GJXAIOU",[[-1,20735,"package nowcoder.easy.day04;   public class CompleteTreeNodeNumber {\n\n   public static class Node {\n      public int value;\n public Node left;\n public Node right;   public Node(int data) {\n         this.value = data;\n  }\n   }\n\n   public static int nodeNum(Node head) {\n      if (head == null) {\n         return 0;\n  }\n      return bs(head, 1, mostLeftLevel(head, 1));\n  }\n\n   // node 表示当前节点， level：当前节点在第几层，h:整棵树的高度，为定值；返回值是以这个节点为头的子树一共有多少个节点；\n  public static int bs(Node node, int level, int h) {\n      if (level == h) {\n         return 1;\n  }\n      // node 的右子树上的左边界到 h 层\n  if (mostLeftLevel(node.right, level + 1) == h) {\n         // 1 << (h - level)表示当前节点的左子树和当前节点的节点个数和，2^(h - level)个\n  // 因为右孩子也是一个完全二叉树，使用递归求其总节点，就是后面部分；\n  return (1 << (h - level)) + bs(node.right, level + 1, h);\n  } else {\n         // 没有到 h 层，则右树的高度比左树少一个，1 << (h - level - 1))就是右树所有节点加上当前节点个数，然后后面是左树也是完全二叉树，递归求解；\n  return (1 << (h - level - 1)) + bs(node.left, level + 1, h);\n  }\n   }\n\n   public static int mostLeftLevel(Node node, int level) {\n      while (node != null) {\n         level++;\n  node = node.left;\n  }\n      return level - 1;\n  }\n\n   public static void main(String[] args) {\n      Node head = new Node(1);\n  head.left = new Node(2);\n  head.right = new Node(3);\n  head.left.left = new Node(4);\n  head.left.right = new Node(5);\n  head.right.left = new Node(6);\n  System.out.println(nodeNum(head));    }\n\n}"]],[22130,22130],[20735,20735]]],[1570802431290,["GJX@GJXAIOU",[[1,20734,"···"]],[20734,20734],[20737,20737]]],[1570802432360,["GJX@GJXAIOU",[[-1,20734,"···"]],[20737,20737],[20734,20734]]],[1570802433738,["GJX@GJXAIOU",[[1,20734,"```"]],[20734,20734],[20737,20737]]],[1570802433781,["GJX@GJXAIOU",[[1,20737,"language\n```\n"]],[20737,20737],[20737,20745]]],[1570802434107,["GJX@GJXAIOU",[[-1,20737,"language"],[1,20745,"j"]],[20737,20745],[20738,20738]]],[1570802434588,["GJX@GJXAIOU",[[1,20738,"ava"]],[20738,20738],[20741,20741]]],[1570802434705,["GJX@GJXAIOU",[[1,20742,"\n"]],[20741,20741],[20742,20742]]],[1570802437777,["GJX@GJXAIOU",[[1,20742,"package nowcoder.easy.day04;\n\npublic class CompleteTreeNodeNumber {\n\n\tpublic static class Node {\n\t\tpublic int value;\n\t\tpublic Node left;\n\t\tpublic Node right;\n\n\t\tpublic Node(int data) {\n\t\t\tthis.value = data;\n\t\t}\n\t}\n\n\tpublic static int nodeNum(Node head) {\n\t\tif (head == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn bs(head, 1, mostLeftLevel(head, 1));\n\t}\n\n\t// node 表示当前节点， level：当前节点在第几层，h:整棵树的高度，为定值；返回值是以这个节点为头的子树一共有多少个节点；\n\tpublic static int bs(Node node, int level, int h) {\n\t\tif (level == h) {\n\t\t\treturn 1;\n\t\t}\n\t\t// node 的右子树上的左边界到 h 层\n\t\tif (mostLeftLevel(node.right, level + 1) == h) {\n\t\t\t// 1 << (h - level)表示当前节点的左子树和当前节点的节点个数和，2^(h - level)个\n\t\t\t// 因为右孩子也是一个完全二叉树，使用递归求其总节点，就是后面部分；\n\t\t\treturn (1 << (h - level)) + bs(node.right, level + 1, h);\n\t\t} else {\n\t\t\t// 没有到 h 层，则右树的高度比左树少一个，1 << (h - level - 1))就是右树所有节点加上当前节点个数，然后后面是左树也是完全二叉树，递归求解；\n\t\t\treturn (1 << (h - level - 1)) + bs(node.left, level + 1, h);\n\t\t}\n\t}\n\n\tpublic static int mostLeftLevel(Node node, int level) {\n\t\twhile (node != null) {\n\t\t\tlevel++;\n\t\t\tnode = node.left;\n\t\t}\n\t\treturn level - 1;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tNode head = new Node(1);\n\t\thead.left = new Node(2);\n\t\thead.right = new Node(3);\n\t\thead.left.left = new Node(4);\n\t\thead.left.right = new Node(5);\n\t\thead.right.left = new Node(6);\n\t\tSystem.out.println(nodeNum(head));\n\n\t}\n\n}\n"]],[20742,20742],[22058,22058]]]],null,"GJX@GJXAIOU"]]}