{"compress":true,"commitItems":[["e9628bc9-9c80-40e4-97d2-65a31676c974",1570166995189,"",[[1570166992303,["GJX@GJXAIOU",[[1,0,"# AlgorithmEasy\n\n\n\n"]],[0,0],[18,18]]],[1570167012406,["GJX@GJXAIOU",[[1,15," Day -1"]],[15,15],[22,22]]],[1570167013937,["GJX@GJXAIOU",[[-1,19," -1"]],[22,22],[19,19]]],[1570167014593,["GJX@GJXAIOU",[[1,19,"01"]],[19,19],[21,21]]],[1570167019001,["GJX@GJXAIOU",[[-1,15," "]],[16,16],[15,15]]],[1570167021442,["GJX@GJXAIOU",[[1,24,"\n"]],[20,20],[21,21]]],[1570167029170,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1570167030985,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1570167031109,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1570167031242,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1570167031264,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1570167031340,["GJX@GJXAIOU",[[1,4,"-"]],[4,4],[5,5]]],[1570167033306,["GJX@GJXAIOU",[[-1,4,"-"]],[5,5],[4,4]]],[1570167052574,["GJX@GJXAIOU",[[1,4,"tags: [时间复杂度，冒泡排序、"]],[4,4],[22,22]]],[1570167053231,["GJX@GJXAIOU",[[-1,21,"、"]],[22,22],[21,21]]],[1570167053827,["GJX@GJXAIOU",[[1,21,"，"]],[21,21],[22,22]]],[1570167067324,["GJX@GJXAIOU",[[1,22,"选择排序，插入排序，"]],[22,22],[32,32]]],[1570167086130,["GJX@GJXAIOU",[[1,17,"空间复杂度，"]],[17,17],[23,23]]],[1570167110092,["GJX@GJXAIOU",[[1,38,"二分查找，递归]"]],[38,38],[46,46]]],[1570167114374,["GJX@GJXAIOU",[[1,47,"\n"]],[46,46],[47,47]]],[1570167125546,["GJX@GJXAIOU",[[1,47,"note: wen"]],[47,47],[56,56]]],[1570167126170,["GJX@GJXAIOU",[[-1,53,"wen"]],[56,56],[53,53]]],[1570167137437,["GJX@GJXAIOU",[[1,53,"文章主要包含 时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归 的内容；"]],[53,53],[99,99]]],[1570167142717,["GJX@GJXAIOU",[[1,127,"#"]],[127,127],[128,128]]],[1570167144077,["GJX@GJXAIOU",[[-1,127,"#"]],[128,128],[127,127]]],[1570167153158,["GJX@GJXAIOU",[[1,127,"## 一、时间复杂度和空间复杂度"]],[127,127],[143,143]]],[1570167153685,["GJX@GJXAIOU",[[1,146,"\n"]],[143,143],[144,144]]],[1570167529115,["GJX@GJXAIOU",[[1,145,"\\begin{array}{l}{\\log _{2}^{N}} \\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}"]],[145,145],[221,221]]],[1570167532770,["GJX@GJXAIOU",[[1,223,"\n"]],[221,221],[222,222]]],[1570167538618,["GJX@GJXAIOU",[[1,224,"\n"]],[222,222],[223,223]]],[1570167539361,["GJX@GJXAIOU",[[1,223,"$\\log _{2}^{N} $\n$N * \\log _{2}^{N} $\n$N^{2} $"]],[223,223],[269,269]]],[1570167542290,["GJX@GJXAIOU",[[1,271,"\n"]],[269,269],[270,270]]],[1570167546537,["GJX@GJXAIOU",[[1,272,"\n"]],[270,270],[271,271]]],[1570167546673,["GJX@GJXAIOU",[[1,273,"\n"]],[271,271],[272,272]]],[1570167547156,["GJX@GJXAIOU",[[1,272,"$$\n\\begin{array}{l}{\\log _{2}^{N}} \\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}\n$$"]],[272,272],[354,354]]],[1570167556186,["GJX@GJXAIOU",[[1,356,"\n"]],[355,355],[356,356]]],[1570167556797,["GJX@GJXAIOU",[[1,356,"\\begin{equation}\n\\begin{array}{l}{\\log _{2}^{N}} \\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}\n\\end{equation}"]],[356,356],[464,464]]],[1570167562867,["GJX@GJXAIOU",[[1,145,"￥"]],[145,145],[146,146]]],[1570167564145,["GJX@GJXAIOU",[[-1,145,"￥"]],[146,146],[145,145]]],[1570167565210,["GJX@GJXAIOU",[[1,145,"$"]],[145,145],[146,146]]],[1570167567770,["GJX@GJXAIOU",[[1,222,"$"]],[222,222],[223,223]]],[1570167573818,["GJX@GJXAIOU",[[1,242,"\n"]],[241,241],[242,242]]],[1570167576732,["GJX@GJXAIOU",[[1,226,"$"]],[225,225],[226,226]]],[1570167578937,["GJX@GJXAIOU",[[1,242,"$"]],[242,242],[243,243]]],[1570167590033,["GJX@GJXAIOU",[[1,178,"\n"]],[178,178],[179,179]]],[1570167592875,["GJX@GJXAIOU",[[1,178,"$"]],[178,178],[179,179]]],[1570167597137,["GJX@GJXAIOU",[[-1,177," "]],[177,178],[177,177]]],[1570167619434,["GJX@GJXAIOU",[[1,266,"$"]],[266,266],[267,267]]],[1570167622811,["GJX@GJXAIOU",[[1,247,"$"]],[247,247],[248,248]]],[1570167625873,["GJX@GJXAIOU",[[1,270,"$\n\n$$\n"]],[270,270],[272,272]]],[1570167631937,["GJX@GJXAIOU",[[1,268,"$"]],[268,268],[269,269]]],[1570167633945,["GJX@GJXAIOU",[[-1,268,"$"]],[269,269],[268,268]]],[1570167635220,["GJX@GJXAIOU",[[1,269,"\n"]],[268,268],[269,269]]],[1570167641144,["GJX@GJXAIOU",[[-1,269,"\n"]],[269,269],[268,268]]],[1570167641574,["GJX@GJXAIOU",[[1,268,"$"]],[268,268],[269,269]]],[1570167642065,["GJX@GJXAIOU",[[-1,268,"$"]],[269,269],[268,268]]],[1570167642536,["GJX@GJXAIOU",[[-1,270,"$\n\n$$\n"]],[272,272],[270,270]]],[1570167646896,["GJX@GJXAIOU",[[1,270,"$\n\n$$\n"]],[270,270],[272,272]]],[1570167650047,["GJX@GJXAIOU",[[-1,270,"$\n\n$$\n"]],[272,272],[270,270]]],[1570167653482,["GJX@GJXAIOU",[[1,277,"$"]],[277,277],[278,278]]],[1570167655029,["GJX@GJXAIOU",[[1,270,"$"]],[270,270],[271,271]]],[1570167661521,["GJX@GJXAIOU",[[-1,282,"$$\n\\begin{array}{l}{\\log _{2}^{N}} \\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}\n$$\n\n\\begin{equation}\n\\begin{array}{l}{\\log _{2}^{N}} \\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}\n\\end{equation}"]],[282,474],[282,282]]],[1570167666023,["GJX@GJXAIOU",[[-1,145,"$\\begin{array}{l}{\\log _{2}^{N}}$\n\\\\ {N * \\log _{2}^{N}} \\\\ {N^{2}}\\end{array}$"]],[145,224],[145,145]]],[1570167667043,["GJX@GJXAIOU",[[-1,166,"\n"]],[166,166],[165,165]]],[1570167710921,["GJX@GJXAIOU",[[-1,149,"\\"]],[150,150],[149,149]]],[1570167718846,["GJX@GJXAIOU",[[1,149,"\\\\\\"]],[149,149],[152,152]]],[1570167720980,["GJX@GJXAIOU",[[-1,150,"\\\\"]],[152,152],[150,150]]],[1570167761544,["GJX@GJXAIOU",[[-1,147,"$$\\log _{2}^{N} $$\n$$N * \\log _{2}^{N} $$\n$$N^{2} $$"]],[147,199],[147,147]]],[1570167783188,["GJX@GJXAIOU",[[1,151,"\n"]],[144,144],[145,145]]],[1570167784394,["GJX@GJXAIOU",[[1,145,"shij"]],[145,145],[149,149]]],[1570167785473,["GJX@GJXAIOU",[[-1,145,"shij"]],[149,149],[145,145]]],[1570167788330,["GJX@GJXAIOU",[[1,145,"### ()"]],[145,145],[151,151]]],[1570167789467,["GJX@GJXAIOU",[[-1,149,"()"]],[151,151],[149,149]]],[1570167790093,["GJX@GJXAIOU",[[1,149,"（）"]],[149,149],[151,151]]],[1570167791391,["GJX@GJXAIOU",[[1,150,"一"]],[150,150],[151,151]]],[1570167795579,["GJX@GJXAIOU",[[1,152,"时间复杂度"]],[152,152],[157,157]]],[1570167795864,["GJX@GJXAIOU",[[1,164,"\n"]],[157,157],[158,158]]],[1570167800926,["GJX@GJXAIOU",[[1,158,"- 比较实用"]],[158,158],[164,164]]],[1570167801688,["GJX@GJXAIOU",[[-1,162,"实用"]],[164,164],[162,162]]],[1570167823866,["GJX@GJXAIOU",[[1,162,"先比较次幂，然后比较系数以及其他项；"]],[162,162],[180,180]]],[1570167894024,["GJX@GJXAIOU",[[1,160,"操作数量表达式中"]],[160,160],[168,168]]],[1570167938076,["GJX@GJXAIOU",[[1,168,"，只要高阶项，不要低阶项，去掉高阶项的系数，"]],[168,168],[190,190]]],[1570167956422,["GJX@GJXAIOU",[[1,158,"\n"]],[157,157],[158,158]]],[1570167957621,["GJX@GJXAIOU",[[1,159,"\n"]],[158,158],[159,159]]],[1570167969799,["GJX@GJXAIOU",[[1,159,"- 常数时间的操作：一个操作和"]],[159,159],[174,174]]],[1570167970482,["GJX@GJXAIOU",[[-1,173,"和"]],[174,174],[173,173]]],[1570167989660,["GJX@GJXAIOU",[[1,173,"和样本数据量没有关系，每次都是在固定的时间内筒"]],[173,173],[196,196]]],[1570167990178,["GJX@GJXAIOU",[[-1,195,"筒"]],[196,196],[195,195]]],[1570167996781,["GJX@GJXAIOU",[[1,195,"完成，叫做常数"]],[195,195],[202,202]]],[1570168024507,["GJX@GJXAIOU",[[1,202,"操作；"]],[202,202],[205,205]]],[1570168050450,["GJX@GJXAIOU",[[1,260,"****"]],[260,260],[262,262]]],[1570168058202,["GJX@GJXAIOU",[[1,262,"以一个示例比较："]],[262,262],[270,270]]],[1570168059637,["GJX@GJXAIOU",[[1,277,"\n"]],[272,272],[273,273]]],[1570168067035,["GJX@GJXAIOU",[[1,274,"一个有序数组A，另一个无序数组B，请打印B中的所有不在A中的数，A数\n组长度为N，B数组长度为M。"]],[274,274],[323,323]]],[1570168098428,["GJX@GJXAIOU",[[1,325,"算法流程1：对于数组B中的每一个数，都在A中通过遍历的方式找一下；\n算法流程2：对于数组B中的每一个数，都在A中通过二分的方式找一下；\n算法流程3：先把数组B排序，然后用类似外排的方式打印所有在A中出现\n的数；"]],[325,325],[430,430]]],[1570168100234,["GJX@GJXAIOU",[[1,325,"- "]],[325,325],[327,327]]],[1570168102204,["GJX@GJXAIOU",[[1,361,"- "]],[361,361],[363,363]]],[1570168104735,["GJX@GJXAIOU",[[1,397,"- "]],[397,397],[399,399]]],[1570168106657,["GJX@GJXAIOU",[[1,361,"\n"]],[361,361],[362,362]]],[1570168107922,["GJX@GJXAIOU",[[1,398,"\n"]],[398,398],[399,399]]],[1570168139951,["GJX@GJXAIOU",[[1,361,"B中"]],[361,361],[363,363]]],[1570168139975,["GJX@GJXAIOU",[[1,362," "]],[363,363],[364,364]]],[1570168142345,["GJX@GJXAIOU",[[-1,361,"B 中"]],[364,364],[361,361]]],[1570168151187,["GJX@GJXAIOU",[[1,361,"相当于：B中"]],[361,361],[367,367]]],[1570168151212,["GJX@GJXAIOU",[[1,366," "]],[367,367],[368,368]]],[1570168160284,["GJX@GJXAIOU",[[1,368,"每一个数都要在 A总"]],[368,368],[378,378]]],[1570168160307,["GJX@GJXAIOU",[[1,377," "]],[378,378],[379,379]]],[1570168163138,["GJX@GJXAIOU",[[-1,378,"总"]],[379,379],[378,378]]],[1570168176472,["GJX@GJXAIOU",[[1,378,"中遍历一遍，则 设"]],[378,378],[387,387]]],[1570168178377,["GJX@GJXAIOU",[[-1,385," 设"]],[387,387],[385,385]]],[1570168182627,["GJX@GJXAIOU",[[1,385,"设每一个"]],[385,385],[389,389]]],[1570168189177,["GJX@GJXAIOU",[[-1,386,"每一个"]],[389,389],[386,386]]],[1570168193780,["GJX@GJXAIOU",[[1,386,"每次操作"]],[386,386],[390,390]]],[1570168196938,["GJX@GJXAIOU",[[1,390,"的时间为："]],[390,390],[395,395]]],[1570168208259,["GJX@GJXAIOU",[[1,259,"- \n"]],[258,258],[261,261]]],[1570168209259,["GJX@GJXAIOU",[[1,261,"-"]],[261,261],[262,262]]],[1570168209953,["GJX@GJXAIOU",[[-1,261,"-"]],[262,262],[261,261]]],[1570168217716,["GJX@GJXAIOU",[[1,261," 可以将 O()"]],[261,261],[269,269]]],[1570168219050,["GJX@GJXAIOU",[[1,268,"1"]],[268,268],[269,269]]],[1570168221061,["GJX@GJXAIOU",[[1,270," kan"]],[270,270],[274,274]]],[1570168221888,["GJX@GJXAIOU",[[-1,271,"kan"]],[274,274],[271,271]]],[1570168233115,["GJX@GJXAIOU",[[1,271,"看做每一次操作的时间；"]],[271,271],[282,282]]],[1570168237330,["GJX@GJXAIOU",[[-1,408,"则设每次操作的时间为："]],[408,419],[408,408]]],[1570168247519,["GJX@GJXAIOU",[[1,408,"则需要操作 N遍"]],[408,408],[416,416]]],[1570168247542,["GJX@GJXAIOU",[[1,415," "]],[416,416],[417,417]]],[1570168252949,["GJX@GJXAIOU",[[1,417,"，而"]],[417,417],[419,419]]],[1570168254624,["GJX@GJXAIOU",[[1,419,"B"]],[419,419],[420,420]]],[1570168254648,["GJX@GJXAIOU",[[1,419," "]],[420,420],[421,421]]],[1570168256100,["GJX@GJXAIOU",[[1,421,"转给你"]],[421,421],[424,424]]],[1570168256125,["GJX@GJXAIOU",[[1,421," "]],[424,424],[425,425]]],[1570168256500,["GJX@GJXAIOU",[[1,425," "]],[425,425],[426,426]]],[1570168257309,["GJX@GJXAIOU",[[-1,422,"转给你 "]],[426,426],[422,422]]],[1570168258852,["GJX@GJXAIOU",[[1,422,"中M"]],[422,422],[424,424]]],[1570168258877,["GJX@GJXAIOU",[[1,423," "]],[424,424],[425,425]]],[1570168259887,["GJX@GJXAIOU",[[1,425,"个"]],[425,425],[426,426]]],[1570168259911,["GJX@GJXAIOU",[[1,425," "]],[426,426],[427,427]]],[1570168280691,["GJX@GJXAIOU",[[1,427,"数都需要按照上面操作一遍，共操作 M* N"]],[427,427],[448,448]]],[1570168282851,["GJX@GJXAIOU",[[1,445," "]],[445,445],[446,446]]],[1570168296390,["GJX@GJXAIOU",[[1,449," 遍，因此时间复杂度为：）"]],[449,449],[462,462]]],[1570168296850,["GJX@GJXAIOU",[[-1,461,"）"]],[462,462],[461,461]]],[1570168299653,["GJX@GJXAIOU",[[1,461,"``"]],[461,461],[463,463]]],[1570168302781,["GJX@GJXAIOU",[[1,462,"O()"]],[462,462],[465,465]]],[1570168305658,["GJX@GJXAIOU",[[1,464,"M *N "]],[464,464],[469,469]]],[1570168307346,["GJX@GJXAIOU",[[1,467," "]],[467,467],[468,468]]],[1570168309001,["GJX@GJXAIOU",[[-1,469," "]],[470,470],[469,469]]],[1570168314691,["GJX@GJXAIOU",[[1,471,";"]],[471,471],[472,472]]],[1570168316313,["GJX@GJXAIOU",[[-1,471,";"]],[472,472],[471,471]]],[1570168317205,["GJX@GJXAIOU",[[1,471,"；"]],[471,471],[472,472]]],[1570168340692,["GJX@GJXAIOU",[[1,509,"因为 A中"]],[509,509],[514,514]]],[1570168340715,["GJX@GJXAIOU",[[1,513," "]],[514,514],[515,515]]],[1570168348225,["GJX@GJXAIOU",[[1,515,"数组是有序的，英雌"]],[515,515],[524,524]]],[1570168349667,["GJX@GJXAIOU",[[-1,522,"英雌"]],[524,524],[522,522]]],[1570168353935,["GJX@GJXAIOU",[[1,522,"因此可以尽享"]],[522,522],[528,528]]],[1570168354653,["GJX@GJXAIOU",[[-1,526,"尽享"]],[528,528],[526,526]]],[1570168359421,["GJX@GJXAIOU",[[1,526,"进行二分查找，"]],[526,526],[533,533]]],[1570168377345,["GJX@GJXAIOU",[[1,575,"\n"]],[574,574],[575,575]]],[1570168377501,["GJX@GJXAIOU",[[1,576,"\n"]],[575,575],[576,576]]],[1570168462535,["GJX@GJXAIOU",[[1,532,"[^非]"],[1,577,"[^非]: 定点"]],[532,532],[536,536]]],[1570169268828,["GJX@GJXAIOU",[[-1,534,"非"]],[535,535],[534,534]]],[1570169273397,["GJX@GJXAIOU",[[1,534,"二分查找"]],[534,534],[538,538]]],[1570169282362,["GJX@GJXAIOU",[[-1,586,"非"]],[587,587],[586,586]]],[1570169285940,["GJX@GJXAIOU",[[1,586,"二分查找"]],[586,586],[590,590]]],[1570169292357,["GJX@GJXAIOU",[[-1,593,"定点"]],[595,595],[593,593]]],[1570169298688,["GJX@GJXAIOU",[[1,593,"二分查找每次都是"]],[593,593],[601,601]]],[1570169303325,["GJX@GJXAIOU",[[-1,597,"每次都是"]],[601,601],[597,597]]],[1570169333048,["GJX@GJXAIOU",[[1,597,"前提是该数组必须有序，每次进行查找都是将数组划分"]],[597,597],[621,621]]],[1570169354674,["GJX@GJXAIOU",[[1,621,"一般，N 样本的数组一共可以划分 $$$$"]],[621,621],[642,642]]],[1570169360687,["GJX@GJXAIOU",[[1,640,"lo"]],[640,640],[642,642]]],[1570169362227,["GJX@GJXAIOU",[[-1,640,"lo"]],[642,642],[640,640]]],[1570169376718,["GJX@GJXAIOU",[[1,640,"\\log_{2}^{N}"]],[640,640],[652,652]]],[1570169383019,["GJX@GJXAIOU",[[1,638,"`"]],[638,638],[639,639]]],[1570169383891,["GJX@GJXAIOU",[[1,655,"`"]],[655,655],[656,656]]],[1570169393324,["GJX@GJXAIOU",[[-1,637," `$$\\log_{2}^{N}$$`"]],[638,656],[637,637]]],[1570169408210,["GJX@GJXAIOU",[[-1,621,"一般"]],[623,623],[621,621]]],[1570169409771,["GJX@GJXAIOU",[[1,621,"y"]],[621,621],[622,622]]],[1570169409796,["GJX@GJXAIOU",[[1,621," "]],[622,622],[623,623]]],[1570169410226,["GJX@GJXAIOU",[[1,623,"iba"]],[623,623],[626,626]]],[1570169411537,["GJX@GJXAIOU",[[-1,621," yiba"]],[626,626],[621,621]]],[1570169414499,["GJX@GJXAIOU",[[1,621,"一半"]],[621,621],[623,623]]],[1570169416412,["GJX@GJXAIOU",[[1,593," "]],[593,593],[594,594]]],[1570169428770,["GJX@GJXAIOU",[[1,638," `$$\\log_{2}^{N}$$`"]],[638,638],[657,657]]],[1570169432601,["GJX@GJXAIOU",[[-1,639,"`"]],[640,640],[639,639]]],[1570169433453,["GJX@GJXAIOU",[[-1,655,"`"]],[656,656],[655,655]]],[1570169443069,["GJX@GJXAIOU",[[1,655,"次，因此"]],[655,655],[659,659]]],[1570169465740,["GJX@GJXAIOU",[[1,659,"时间复杂度为 ￥￥"]],[659,659],[668,668]]],[1570169466840,["GJX@GJXAIOU",[[-1,666,"￥￥"]],[668,668],[666,666]]],[1570169468780,["GJX@GJXAIOU",[[1,666,"$$$$"]],[666,666],[670,670]]],[1570169476723,["GJX@GJXAIOU",[[1,668,"log_"]],[668,668],[672,672]]],[1570169480203,["GJX@GJXAIOU",[[-1,668,"log_"]],[672,672],[668,668]]],[1570169483563,["GJX@GJXAIOU",[[1,668,"O()"]],[668,668],[671,671]]],[1570169486947,["GJX@GJXAIOU",[[1,670,"logn"]],[670,670],[674,674]]],[1570169488594,["GJX@GJXAIOU",[[-1,672,"gn"]],[674,674],[672,672]]],[1570169489669,["GJX@GJXAIOU",[[1,672,"ng"]],[672,672],[674,674]]],[1570169490140,["GJX@GJXAIOU",[[-1,672,"ng"]],[674,674],[672,672]]],[1570169490426,["GJX@GJXAIOU",[[1,672,"f"]],[672,672],[673,673]]],[1570169491173,["GJX@GJXAIOU",[[-1,672,"f"]],[673,673],[672,672]]],[1570169498868,["GJX@GJXAIOU",[[1,672,"g_{2}^{N}"]],[672,672],[681,681]]],[1570169507077,["GJX@GJXAIOU",[[-1,584,"[^"]],[584,586],[584,584]]],[1570169510601,["GJX@GJXAIOU",[[-1,588,"]: "]],[591,591],[588,588]]],[1570169512045,["GJX@GJXAIOU",[[1,588,":"]],[588,588],[589,589]]],[1570169513717,["GJX@GJXAIOU",[[-1,588,":"]],[589,589],[588,588]]],[1570169514483,["GJX@GJXAIOU",[[1,588,"："]],[588,588],[589,589]]],[1570169518403,["GJX@GJXAIOU",[[-1,636,"$"]],[636,636],[635,635]]],[1570169519834,["GJX@GJXAIOU",[[-1,649,"$"]],[650,650],[649,649]]],[1570169523405,["GJX@GJXAIOU",[[-1,677,"$"]],[678,678],[677,677]]],[1570169526297,["GJX@GJXAIOU",[[-1,659," $"]],[661,661],[659,659]]],[1570169530014,["GJX@GJXAIOU",[[1,584,"【"]],[584,584],[585,585]]],[1570169531017,["GJX@GJXAIOU",[[-1,584,"【"]],[585,585],[584,584]]],[1570169536411,["GJX@GJXAIOU",[[1,584,"[^"]],[584,584],[586,586]]],[1570169536434,["GJX@GJXAIOU",[[1,586,"footnote-name]"]],[586,586],[586,599]]],[1570169541755,["GJX@GJXAIOU",[[-1,586,"footnote-nam"]],[586,599],[587,587]]],[1570169542562,["GJX@GJXAIOU",[[1,587,"rfen"]],[587,587],[591,591]]],[1570169544281,["GJX@GJXAIOU",[[-1,586,"erfen"]],[591,591],[586,586]]],[1570169550524,["GJX@GJXAIOU",[[1,586,"二分查找"]],[586,586],[590,590]]],[1570169553443,["GJX@GJXAIOU",[[1,591,":"]],[591,591],[592,592]]],[1570169558738,["GJX@GJXAIOU",[[-1,584,"[^分查找]:二"]],[592,592],[584,584]]],[1570169570856,["GJX@GJXAIOU",[[-1,532,"[^二分查找]"]],[532,539],[532,532]]],[1570169593218,["GJX@GJXAIOU",[[1,533,"ying"]],[533,533],[537,537]]],[1570169594114,["GJX@GJXAIOU",[[-1,533,"ying"]],[537,537],[533,533]]],[1570169596048,["GJX@GJXAIOU",[[1,533,"英雌"]],[533,533],[535,535]]],[1570169596825,["GJX@GJXAIOU",[[-1,533,"英雌"]],[535,535],[533,533]]],[1570169603173,["GJX@GJXAIOU",[[1,533,"因此正式"]],[533,533],[537,537]]],[1570169603733,["GJX@GJXAIOU",[[-1,535,"正式"]],[537,537],[535,535]]],[1570169611436,["GJX@GJXAIOU",[[1,535,"整体时间复杂度为：``"]],[535,535],[546,546]]],[1570169614156,["GJX@GJXAIOU",[[1,545,"O()"]],[545,545],[548,548]]],[1570169625932,["GJX@GJXAIOU",[[1,547,"M * "]],[547,547],[551,551]]],[1570169635796,["GJX@GJXAIOU",[[1,545,"$"]],[545,545],[546,546]]],[1570169638266,["GJX@GJXAIOU",[[-1,545,"$"]],[546,546],[545,545]]],[1570169639603,["GJX@GJXAIOU",[[1,544,"$"]],[544,544],[545,545]]],[1570169643436,["GJX@GJXAIOU",[[1,554,"$"]],[554,554],[555,555]]],[1570169649653,["GJX@GJXAIOU",[[-1,553,"`"]],[554,554],[553,553]]],[1570169652593,["GJX@GJXAIOU",[[1,546,"4"]],[546,546],[547,547]]],[1570169654826,["GJX@GJXAIOU",[[-1,545,"`4"]],[547,547],[545,545]]],[1570169659347,["GJX@GJXAIOU",[[1,551," "]],[550,550],[551,551]]],[1570169659779,["GJX@GJXAIOU",[[1,551,"llo"]],[551,551],[554,554]]],[1570169660609,["GJX@GJXAIOU",[[-1,552,"lo"]],[554,554],[552,552]]],[1570169668195,["GJX@GJXAIOU",[[1,552,"og_{2}^{N}"]],[552,552],[562,562]]],[1570169673044,["GJX@GJXAIOU",[[-1,562," "]],[563,563],[562,562]]],[1570169674804,["GJX@GJXAIOU",[[1,564,";"]],[564,564],[565,565]]],[1570169675258,["GJX@GJXAIOU",[[-1,564,";"]],[565,565],[564,564]]],[1570169675733,["GJX@GJXAIOU",[[1,564,"；"]],[564,564],[565,565]]],[1570169694807,["GJX@GJXAIOU",[[1,596,"不"]],[596,596],[597,597]]],[1570169699249,["GJX@GJXAIOU",[[-1,602,"\n"]],[603,603],[602,602]]],[1570169721900,["GJX@GJXAIOU",[[1,606,"因为可以是会用 "]],[606,606],[614,614]]],[1570169723749,["GJX@GJXAIOU",[[-1,613," "]],[614,614],[613,613]]],[1570169727377,["GJX@GJXAIOU",[[1,613,"快读"]],[613,613],[615,615]]],[1570169728162,["GJX@GJXAIOU",[[-1,613,"快读"]],[615,615],[613,613]]],[1570169752340,["GJX@GJXAIOU",[[1,613,"快速排序对数组 B 进行排序，因此时间复杂度为：$$"]],[613,613],[639,639]]],[1570169754587,["GJX@GJXAIOU",[[1,638,"lo"]],[638,638],[640,640]]],[1570169755163,["GJX@GJXAIOU",[[-1,638,"lo"]],[640,640],[638,638]]],[1570169758039,["GJX@GJXAIOU",[[1,638,"M *("]],[638,638],[642,642]]],[1570169759018,["GJX@GJXAIOU",[[-1,641,"("]],[642,642],[641,641]]],[1570169763437,["GJX@GJXAIOU",[[1,641," log_"]],[641,641],[646,646]]],[1570169767858,["GJX@GJXAIOU",[[1,642,"\\"]],[642,642],[643,643]]],[1570169780787,["GJX@GJXAIOU",[[1,647,"{2}^{N}"]],[647,647],[654,654]]],[1570169786459,["GJX@GJXAIOU",[[1,551,"\\"]],[551,551],[552,552]]],[1570169796410,["GJX@GJXAIOU",[[1,737,"\\"]],[737,737],[738,738]]],[1570169804420,["GJX@GJXAIOU",[[-1,653,"N"]],[654,654],[653,653]]],[1570169804867,["GJX@GJXAIOU",[[1,653,"M"]],[653,653],[654,654]]],[1570169807669,["GJX@GJXAIOU",[[1,656,","]],[656,656],[657,657]]],[1570169808013,["GJX@GJXAIOU",[[-1,656,","]],[657,657],[656,656]]],[1570169808572,["GJX@GJXAIOU",[[1,656,"，"]],[656,656],[657,657]]],[1570169878867,["GJX@GJXAIOU",[[1,657,"****"]],[657,657],[659,659]]],[1570169889050,["GJX@GJXAIOU",[[1,659,"外排思想："]],[659,659],[664,664]]],[1570169892986,["GJX@GJXAIOU",[[1,666," "]],[666,666],[667,667]]],[1570169985078,["GJX@GJXAIOU",[[1,667,"数组 A 开头放置下标 a，数组 B 开头放置下标 B"]],[667,667],[694,694]]],[1570169986049,["GJX@GJXAIOU",[[-1,693,"B"]],[694,694],[693,693]]],[1570169987981,["GJX@GJXAIOU",[[1,693,"b，"]],[693,693],[695,695]]],[1570170042232,["GJX@GJXAIOU",[[1,695,"比较两个下标指向的值，如果 b <= a 的值，则 b 向右移动，否则 啊"]],[695,695],[732,732]]],[1570170042930,["GJX@GJXAIOU",[[-1,731,"啊"]],[732,732],[731,731]]],[1570170047719,["GJX@GJXAIOU",[[1,731,"a 向右移动，"]],[731,731],[738,738]]],[1570170061884,["GJX@GJXAIOU",[[1,738,"其中若 b "]],[738,738],[744,744]]],[1570170070236,["GJX@GJXAIOU",[[1,716,"z "]],[716,716],[717,717]]],[1570170070500,["GJX@GJXAIOU",[[1,717,"hix"]],[717,717],[720,720]]],[1570170071764,["GJX@GJXAIOU",[[-1,716,"zhix"]],[720,720],[716,716]]],[1570170074659,["GJX@GJXAIOU",[[1,717,"指向"]],[717,717],[719,719]]],[1570170083471,["GJX@GJXAIOU",[[1,747,"指向的值 《 "]],[747,747],[754,754]]],[1570170083980,["GJX@GJXAIOU",[[-1,752,"《 "]],[754,754],[752,752]]],[1570170087310,["GJX@GJXAIOU",[[1,752," < a zh"]],[752,752],[759,759]]],[1570170087802,["GJX@GJXAIOU",[[-1,757,"zh"]],[759,759],[757,757]]],[1570170101882,["GJX@GJXAIOU",[[1,757,"指向的值，则 b xiang"]],[757,757],[771,771]]],[1570170102953,["GJX@GJXAIOU",[[-1,766,"xiang"]],[771,771],[766,766]]],[1570170110461,["GJX@GJXAIOU",[[1,766,"向右移动同时打印"]],[766,766],[774,774]]],[1570170136769,["GJX@GJXAIOU",[[1,774," 吧"]],[774,774],[776,776]]],[1570170137389,["GJX@GJXAIOU",[[-1,775,"吧"]],[776,776],[775,775]]],[1570170160966,["GJX@GJXAIOU",[[1,775,"b 指向的数，若等于则向右移动不打印；"]],[775,775],[794,794]]],[1570170204154,["GJX@GJXAIOU",[[1,797,"\n"]],[794,794],[795,795]]],[1570170215230,["GJX@GJXAIOU",[[1,795,"因此整体外排最差为"]],[795,795],[804,804]]],[1570170281172,["GJX@GJXAIOU",[[1,801,"时间复杂度"]],[801,801],[806,806]]],[1570170284739,["GJX@GJXAIOU",[[1,809," $$"]],[809,809],[812,812]]],[1570170290813,["GJX@GJXAIOU",[[1,811,"O（）"]],[811,811],[814,814]]],[1570170291538,["GJX@GJXAIOU",[[-1,812,"（）"]],[814,814],[812,812]]],[1570170292674,["GJX@GJXAIOU",[[1,812,"()"]],[812,812],[814,814]]],[1570170304858,["GJX@GJXAIOU",[[1,813,"logn"]],[813,813],[817,817]]],[1570170306844,["GJX@GJXAIOU",[[-1,813,"logn"]],[817,817],[813,813]]],[1570170307835,["GJX@GJXAIOU",[[1,813," M"]],[813,813],[815,815]]],[1570170308394,["GJX@GJXAIOU",[[-1,813," M"]],[815,815],[813,813]]],[1570170310748,["GJX@GJXAIOU",[[1,813,"M + N"]],[813,813],[818,818]]],[1570170314427,["GJX@GJXAIOU",[[1,820,","]],[820,820],[821,821]]],[1570170314980,["GJX@GJXAIOU",[[-1,820,","]],[821,821],[820,820]]],[1570170326826,["GJX@GJXAIOU",[[1,820,"，因此整个流程时间复杂度为：$$"]],[820,820],[836,836]]],[1570170332314,["GJX@GJXAIOU",[[1,835,"m"]],[835,835],[836,836]]],[1570170333233,["GJX@GJXAIOU",[[-1,835,"m"]],[836,836],[835,835]]],[1570170338131,["GJX@GJXAIOU",[[1,835,"M * long"]],[835,835],[843,843]]],[1570170338898,["GJX@GJXAIOU",[[-1,841,"ng"]],[843,843],[841,841]]],[1570170351014,["GJX@GJXAIOU",[[1,841,"g_{2}^{M} + "]],[841,841],[853,853]]],[1570170358147,["GJX@GJXAIOU",[[1,853,"O（）"]],[853,853],[856,856]]],[1570170359044,["GJX@GJXAIOU",[[-1,854,"（）"]],[856,856],[854,854]]],[1570170360202,["GJX@GJXAIOU",[[1,854,"()"]],[854,854],[856,856]]],[1570170363380,["GJX@GJXAIOU",[[1,855,"M +N"]],[855,855],[859,859]]],[1570170364563,["GJX@GJXAIOU",[[1,858," "]],[858,858],[859,859]]],[1570170368276,["GJX@GJXAIOU",[[1,850,")"]],[850,850],[851,851]]],[1570170372562,["GJX@GJXAIOU",[[1,835,"("]],[835,835],[836,836]]],[1570170374290,["GJX@GJXAIOU",[[1,835,"O"]],[835,835],[836,836]]],[1570170396163,["GJX@GJXAIOU",[[1,867,"****"]],[867,867],[869,869]]],[1570170397331,["GJX@GJXAIOU",[[1,869,"zongjie"]],[869,869],[876,876]]],[1570170398948,["GJX@GJXAIOU",[[-1,869,"zongjie"]],[876,876],[869,869]]],[1570170400923,["GJX@GJXAIOU",[[1,869,"总结："]],[869,869],[872,872]]],[1570170406128,["GJX@GJXAIOU",[[1,874," A"]],[874,874],[876,876]]],[1570170409226,["GJX@GJXAIOU",[[-1,875,"A"]],[876,876],[875,875]]],[1570170412015,["GJX@GJXAIOU",[[1,875,"流程YI"]],[875,875],[879,879]]],[1570170412041,["GJX@GJXAIOU",[[1,877," "]],[879,879],[880,880]]],[1570170412342,["GJX@GJXAIOU",[[1,880,"："]],[880,880],[881,881]]],[1570170413732,["GJX@GJXAIOU",[[-1,877," YI："]],[881,881],[877,877]]],[1570170414765,["GJX@GJXAIOU",[[1,877,"一："]],[877,877],[879,879]]],[1570170425201,["GJX@GJXAIOU",[[-1,461,"`"]],[462,462],[461,461]]],[1570170426293,["GJX@GJXAIOU",[[-1,469,"`"]],[470,470],[469,469]]],[1570170431626,["GJX@GJXAIOU",[[1,461,"$"]],[461,461],[462,462]]],[1570170434443,["GJX@GJXAIOU",[[1,470,"4"]],[470,470],[471,471]]],[1570170435545,["GJX@GJXAIOU",[[-1,470,"4"]],[471,471],[470,470]]],[1570170435937,["GJX@GJXAIOU",[[1,470,"4"]],[470,470],[471,471]]],[1570170437012,["GJX@GJXAIOU",[[-1,470,"4"]],[471,471],[470,470]]],[1570170437835,["GJX@GJXAIOU",[[1,470,"$"]],[470,470],[471,471]]],[1570170470657,["GJX@GJXAIOU",[[1,879,"$O(M * N)$，流程二：$O(M * \\log_{2}^{N})$，流程三：$O(M * log_{2}^{M}) + O(M + N)$"]],[879,879],[951,951]]],[1570170472787,["GJX@GJXAIOU",[[1,952,"\n"]],[951,951],[952,952]]],[1570170472905,["GJX@GJXAIOU",[[1,953,"\n"]],[952,952],[953,953]]],[1570170473084,["GJX@GJXAIOU",[[1,954,"\n"]],[953,953],[954,954]]],[1570170480086,["GJX@GJXAIOU",[[1,951,"；当"]],[951,951],[953,953]]],[1570170581283,["GJX@GJXAIOU",[[1,953," A数组"]],[953,953],[957,957]]],[1570170581310,["GJX@GJXAIOU",[[1,955," "]],[957,957],[958,958]]],[1570170590830,["GJX@GJXAIOU",[[1,958,"较短的时候，流程而"]],[958,958],[967,967]]],[1570170591297,["GJX@GJXAIOU",[[-1,966,"而"]],[967,967],[966,966]]],[1570170592175,["GJX@GJXAIOU",[[1,966,"二"]],[966,966],[967,967]]],[1570170605102,["GJX@GJXAIOU",[[1,967,"较好，当 B数组"]],[967,967],[975,975]]],[1570170605128,["GJX@GJXAIOU",[[1,973," "]],[975,975],[976,976]]],[1570170613460,["GJX@GJXAIOU",[[1,976,"较短的时候，流程三较好；"]],[976,976],[988,988]]],[1570170624609,["GJX@GJXAIOU",[[-1,991,"\n"]],[990,990],[989,989]]],[1570170629610,["GJX@GJXAIOU",[[1,1083,"\n\n"]],[1083,1083],[1084,1084]]],[1570170629771,["GJX@GJXAIOU",[[1,1085,"\n"]],[1084,1084],[1085,1085]]],[1570170629937,["GJX@GJXAIOU",[[1,1086,"\n"]],[1085,1085],[1086,1086]]],[1570170630099,["GJX@GJXAIOU",[[1,1087,"\n"]],[1086,1086],[1087,1087]]],[1570171179971,["GJX@GJXAIOU",[[1,1085,"### （）"]],[1085,1085],[1091,1091]]],[1570171181080,["GJX@GJXAIOU",[[1,1090,"二"]],[1090,1090],[1091,1091]]],[1570171186894,["GJX@GJXAIOU",[[1,1092,"空间复杂苏"]],[1092,1092],[1097,1097]]],[1570171188163,["GJX@GJXAIOU",[[-1,1094,"复杂苏"]],[1097,1097],[1094,1094]]],[1570171190678,["GJX@GJXAIOU",[[1,1094,"复杂度"]],[1094,1094],[1097,1097]]],[1570171190949,["GJX@GJXAIOU",[[1,1100,"\n"]],[1097,1097],[1098,1098]]],[1570171197080,["GJX@GJXAIOU",[[1,1098,"就是啊"]],[1098,1098],[1101,1101]]],[1570171197914,["GJX@GJXAIOU",[[-1,1100,"啊"]],[1101,1101],[1100,1100]]],[1570171208197,["GJX@GJXAIOU",[[1,1100,"在操作的过程中需要的****"]],[1100,1100],[1112,1112]]],[1570171210957,["GJX@GJXAIOU",[[1,1112,"二外"]],[1112,1112],[1114,1114]]],[1570171212226,["GJX@GJXAIOU",[[-1,1112,"二外"]],[1114,1114],[1112,1112]]],[1570171216269,["GJX@GJXAIOU",[[1,1112,"额外的空间"]],[1112,1112],[1117,1117]]],[1570171232701,["GJX@GJXAIOU",[[1,1119,"，如果仅仅需要有限个变量：$$"]],[1119,1119],[1134,1134]]],[1570171236379,["GJX@GJXAIOU",[[1,1133,"O()"]],[1133,1133],[1136,1136]]],[1570171237507,["GJX@GJXAIOU",[[1,1135,"1"]],[1135,1135],[1136,1136]]],[1570171252908,["GJX@GJXAIOU",[[1,1138,"，如果需要原来数组的长度或者"]],[1138,1138],[1152,1152]]],[1570171267156,["GJX@GJXAIOU",[[1,1152,"和样本数有关，则为：$$"]],[1152,1152],[1164,1164]]],[1570171269803,["GJX@GJXAIOU",[[1,1163,"O()"]],[1163,1163],[1166,1166]]],[1570171271406,["GJX@GJXAIOU",[[1,1165,"N"]],[1165,1165],[1166,1166]]],[1570171276406,["GJX@GJXAIOU",[[1,1168,"；"]],[1168,1168],[1169,1169]]],[1570171277437,["GJX@GJXAIOU",[[1,1172,"\n"]],[1169,1169],[1170,1170]]],[1570171306556,["GJX@GJXAIOU",[[1,1173,"\n"]],[1170,1170],[1171,1171]]],[1570171309475,["GJX@GJXAIOU",[[1,1171,"## 二、"]],[1171,1171],[1176,1176]]],[1570171320477,["GJX@GJXAIOU",[[1,1176,"排序算法"]],[1176,1176],[1180,1180]]],[1570171320820,["GJX@GJXAIOU",[[1,1183,"\n"]],[1180,1180],[1181,1181]]],[1570171320970,["GJX@GJXAIOU",[[1,1184,"\n"]],[1181,1181],[1182,1182]]],[1570171353034,["GJX@GJXAIOU",[[1,1171,"\n"]],[1171,1171],[1172,1172]]],[1570171426440,["GJX@GJXAIOU",[[1,1183,"### （）"]],[1183,1183],[1189,1189]]],[1570171430110,["GJX@GJXAIOU",[[1,1188,"一"]],[1188,1188],[1189,1189]]],[1570171433891,["GJX@GJXAIOU",[[1,1190,"冒泡排序"]],[1190,1190],[1194,1194]]],[1570171434186,["GJX@GJXAIOU",[[1,1197,"\n"]],[1194,1194],[1195,1195]]],[1570171460889,["GJX@GJXAIOU",[[1,1195,"两两比较，将较大的一个一个向上冒，"]],[1195,1195],[1212,1212]]],[1570171463248,["GJX@GJXAIOU",[[-1,1211,"，"]],[1212,1212],[1211,1211]]],[1570171464727,["GJX@GJXAIOU",[[1,1211,"，****"]],[1211,1211],[1214,1214]]],[1570171473248,["GJX@GJXAIOU",[[1,1214,"每次只能排好一个数"]],[1214,1214],[1223,1223]]],[1570171475482,["GJX@GJXAIOU",[[1,1225,"；"]],[1225,1225],[1226,1226]]],[1570171478099,["GJX@GJXAIOU",[[1,1229,"\n"]],[1226,1226],[1227,1227]]],[1570171478964,["GJX@GJXAIOU",[[1,1230,"\n"]],[1227,1227],[1228,1228]]],[1570171485475,["GJX@GJXAIOU",[[1,1228,"时间复杂度：$$"]],[1228,1228],[1236,1236]]],[1570171488130,["GJX@GJXAIOU",[[1,1235,"O()"]],[1235,1235],[1238,1238]]],[1570171489765,["GJX@GJXAIOU",[[1,1237,"N"]],[1237,1237],[1238,1238]]],[1570171498243,["GJX@GJXAIOU",[[1,1238,"^{2}"]],[1238,1238],[1242,1242]]],[1570171502013,["GJX@GJXAIOU",[[1,1247,"\n"]],[1245,1245],[1246,1246]]],[1570171502170,["GJX@GJXAIOU",[[1,1248,"\n"]],[1246,1246],[1247,1247]]],[1570171505141,["GJX@GJXAIOU",[[1,1247,"### ()"]],[1247,1247],[1253,1253]]],[1570171507124,["GJX@GJXAIOU",[[-1,1251,"()"]],[1253,1253],[1251,1251]]],[1570171507820,["GJX@GJXAIOU",[[1,1251,"（）"]],[1251,1251],[1253,1253]]],[1570171508941,["GJX@GJXAIOU",[[1,1252,"二"]],[1252,1252],[1253,1253]]],[1570171513316,["GJX@GJXAIOU",[[1,1254,"选择排序"]],[1254,1254],[1258,1258]]],[1570171513674,["GJX@GJXAIOU",[[1,1260,"\n"]],[1258,1258],[1259,1259]]],[1570171547692,["GJX@GJXAIOU",[[1,1259,"首先从 0 ~ N-1 上选择最小说"]],[1259,1259],[1277,1277]]],[1570171548185,["GJX@GJXAIOU",[[-1,1276,"说"]],[1277,1277],[1276,1276]]],[1570171554174,["GJX@GJXAIOU",[[1,1276,"的数和 0 位置上"]],[1276,1276],[1285,1285]]],[1570171575983,["GJX@GJXAIOU",[[1,1285,"互换，然后才能够 1 ~ N-1 上选择最小的数和 1 位置上互换，"]],[1285,1285],[1319,1319]]],[1570171576811,["GJX@GJXAIOU",[[-1,1318,"，"]],[1319,1319],[1318,1318]]],[1570171587207,["GJX@GJXAIOU",[[1,1318,".....，****"]],[1318,1318],[1326,1326]]],[1570171593048,["GJX@GJXAIOU",[[1,1326,"每次只能排好一个数"]],[1326,1326],[1335,1335]]],[1570171595740,["GJX@GJXAIOU",[[1,1337,"，"]],[1337,1337],[1338,1338]]],[1570171603874,["GJX@GJXAIOU",[[-1,1337,"，"]],[1338,1338],[1337,1337]]],[1570171604326,["GJX@GJXAIOU",[[1,1337,"；"]],[1337,1337],[1338,1338]]],[1570171604507,["GJX@GJXAIOU",[[1,1340,"\n"]],[1338,1338],[1339,1339]]],[1570171612948,["GJX@GJXAIOU",[[1,1339,"时间复杂度：$$"]],[1339,1339],[1347,1347]]],[1570171617179,["GJX@GJXAIOU",[[1,1346,"O()"]],[1346,1346],[1349,1349]]],[1570171623051,["GJX@GJXAIOU",[[1,1348,"N^{2}"]],[1348,1348],[1353,1353]]],[1570171627483,["GJX@GJXAIOU",[[1,1357,"\n"]],[1355,1355],[1356,1356]]],[1570171627656,["GJX@GJXAIOU",[[1,1358,"\n"]],[1356,1356],[1357,1357]]],[1570171652578,["GJX@GJXAIOU",[[1,1357,"### ()"]],[1357,1357],[1363,1363]]],[1570171653769,["GJX@GJXAIOU",[[-1,1361,"()"]],[1363,1363],[1361,1361]]],[1570171654426,["GJX@GJXAIOU",[[1,1361,"（0"]],[1361,1361],[1363,1363]]],[1570171655532,["GJX@GJXAIOU",[[-1,1361,"（0"]],[1363,1363],[1361,1361]]],[1570171656109,["GJX@GJXAIOU",[[1,1361,"（）"]],[1361,1361],[1363,1363]]],[1570171660315,["GJX@GJXAIOU",[[1,1362,"插入排序"]],[1362,1362],[1366,1366]]],[1570171662330,["GJX@GJXAIOU",[[-1,1362,"插入排序"]],[1366,1366],[1362,1362]]],[1570171663268,["GJX@GJXAIOU",[[1,1362,"三"]],[1362,1362],[1363,1363]]],[1570171666457,["GJX@GJXAIOU",[[1,1364,"插入排序"]],[1364,1364],[1368,1368]]],[1570171667067,["GJX@GJXAIOU",[[1,1370,"\n"]],[1368,1368],[1369,1369]]],[1570171703655,["GJX@GJXAIOU",[[1,1369,"shouxian"]],[1369,1369],[1377,1377]]],[1570171705139,["GJX@GJXAIOU",[[-1,1369,"shouxian"]],[1377,1377],[1369,1369]]],[1570171714560,["GJX@GJXAIOU",[[1,1369,"首先默认第一个数是排好序的"]],[1369,1369],[1382,1382]]],[1570171718094,["GJX@GJXAIOU",[[1,1377,"()"]],[1377,1377],[1379,1379]]],[1570171719361,["GJX@GJXAIOU",[[-1,1377,"()"]],[1379,1379],[1377,1377]]],[1570171720021,["GJX@GJXAIOU",[[1,1377,"（）"]],[1377,1377],[1379,1379]]],[1570171723771,["GJX@GJXAIOU",[[1,1378,"0~1"]],[1378,1378],[1381,1381]]],[1570171726982,["GJX@GJXAIOU",[[1,1387,"，"]],[1387,1387],[1388,1388]]],[1570171744947,["GJX@GJXAIOU",[[-1,1379,"~1"]],[1381,1381],[1379,1379]]],[1570171777737,["GJX@GJXAIOU",[[1,1386,"然后拿第二个数和第一个数比较，如果比第一个数小，就互换，反之不发欧诺个"]],[1386,1386],[1421,1421]]],[1570171779028,["GJX@GJXAIOU",[[-1,1417,"发欧诺个"]],[1421,1421],[1417,1417]]],[1570171784468,["GJX@GJXAIOU",[[1,1417,"动，这样 "]],[1417,1417],[1422,1422]]],[1570171787067,["GJX@GJXAIOU",[[-1,1421," "]],[1422,1422],[1421,1421]]],[1570171788578,["GJX@GJXAIOU",[[1,1421,"1"]],[1421,1421],[1422,1422]]],[1570171788604,["GJX@GJXAIOU",[[1,1421," "]],[1422,1422],[1423,1423]]],[1570171789422,["GJX@GJXAIOU",[[-1,1422,"1"]],[1423,1423],[1422,1422]]],[1570171793925,["GJX@GJXAIOU",[[1,1422,"0~1位置上"]],[1422,1422],[1428,1428]]],[1570171793952,["GJX@GJXAIOU",[[1,1425," "]],[1428,1428],[1429,1429]]],[1570171794876,["GJX@GJXAIOU",[[1,1429,"第"]],[1429,1429],[1430,1430]]],[1570171796393,["GJX@GJXAIOU",[[-1,1429,"第"]],[1430,1430],[1429,1429]]],[1570171799746,["GJX@GJXAIOU",[[1,1429,"十"]],[1429,1429],[1430,1430]]],[1570171800298,["GJX@GJXAIOU",[[-1,1429,"十"]],[1430,1430],[1429,1429]]],[1570171801005,["GJX@GJXAIOU",[[1,1429,"十"]],[1429,1429],[1430,1430]]],[1570171801738,["GJX@GJXAIOU",[[-1,1429,"十"]],[1430,1430],[1429,1429]]],[1570171805931,["GJX@GJXAIOU",[[1,1429,"是排好序的，"]],[1429,1429],[1435,1435]]],[1570171810675,["GJX@GJXAIOU",[[-1,1434,"，"]],[1435,1435],[1434,1434]]],[1570171853216,["GJX@GJXAIOU",[[1,1434,"；然后拿第三个数和第二个数比较，比他小就互换，如果更换之后再次和第一个数比较，看是否"]],[1434,1434],[1476,1476]]],[1570171864499,["GJX@GJXAIOU",[[1,1476,"需要互换，最终 0"]],[1476,1476],[1485,1485]]],[1570171865786,["GJX@GJXAIOU",[[1,1487,"\n"]],[1485,1485],[1486,1486]]],[1570171866211,["GJX@GJXAIOU",[[1,1486,"~"]],[1486,1486],[1487,1487]]],[1570171866810,["GJX@GJXAIOU",[[-1,1486,"~"]],[1487,1487],[1486,1486]]],[1570171866938,["GJX@GJXAIOU",[[-1,1487,"\n"]],[1486,1486],[1485,1485]]],[1570171873935,["GJX@GJXAIOU",[[1,1485,"~2 位置上是排好序的，"]],[1485,1485],[1497,1497]]],[1570171874858,["GJX@GJXAIOU",[[-1,1496,"，"]],[1497,1497],[1496,1496]]],[1570171876955,["GJX@GJXAIOU",[[1,1496,"......."]],[1496,1496],[1503,1503]]],[1570171879787,["GJX@GJXAIOU",[[1,1505,"\n"]],[1503,1503],[1504,1504]]],[1570171894950,["GJX@GJXAIOU",[[1,1506,"\n"]],[1504,1504],[1505,1505]]],[1570171896196,["GJX@GJXAIOU",[[1,1505,"zuih"]],[1505,1505],[1509,1509]]],[1570171897155,["GJX@GJXAIOU",[[-1,1505,"zuih"]],[1509,1509],[1505,1505]]],[1570171911531,["GJX@GJXAIOU",[[1,1505,"最好的情况是原来就有序：$$"]],[1505,1505],[1519,1519]]],[1570171913508,["GJX@GJXAIOU",[[1,1518,"O"]],[1518,1518],[1519,1519]]],[1570171914964,["GJX@GJXAIOU",[[1,1519,"()"]],[1519,1519],[1521,1521]]],[1570171916734,["GJX@GJXAIOU",[[1,1520,"N"]],[1520,1520],[1521,1521]]],[1570171919572,["GJX@GJXAIOU",[[1,1523,","]],[1523,1523],[1524,1524]]],[1570171920211,["GJX@GJXAIOU",[[-1,1523,","]],[1524,1524],[1523,1523]]],[1570171923770,["GJX@GJXAIOU",[[1,1523,"，最差的请求"]],[1523,1523],[1529,1529]]],[1570171924522,["GJX@GJXAIOU",[[-1,1527,"请求"]],[1529,1529],[1527,1527]]],[1570171927708,["GJX@GJXAIOU",[[1,1527,"情况是："]],[1527,1527],[1531,1531]]],[1570171928754,["GJX@GJXAIOU",[[-1,1530,"："]],[1531,1531],[1530,1530]]],[1570171933596,["GJX@GJXAIOU",[[1,1530,"原来就是倒叙"]],[1530,1530],[1536,1536]]],[1570171934277,["GJX@GJXAIOU",[[-1,1534,"倒叙"]],[1536,1536],[1534,1534]]],[1570171942692,["GJX@GJXAIOU",[[1,1534,"倒序的：$$"]],[1534,1534],[1540,1540]]],[1570171944966,["GJX@GJXAIOU",[[1,1539,"O()"]],[1539,1539],[1542,1542]]],[1570171951803,["GJX@GJXAIOU",[[1,1541,"N^{2}"]],[1541,1541],[1546,1546]]],[1570171954171,["GJX@GJXAIOU",[[1,1548,";"]],[1548,1548],[1549,1549]]],[1570171954906,["GJX@GJXAIOU",[[-1,1548,";"]],[1549,1549],[1548,1548]]],[1570171959872,["GJX@GJXAIOU",[[1,1548,"；，因此最红的"]],[1548,1548],[1555,1555]]],[1570171961965,["GJX@GJXAIOU",[[-1,1549,"，"]],[1550,1550],[1549,1549]]],[1570171963998,["GJX@GJXAIOU",[[-1,1551,"最红"]],[1553,1553],[1551,1551]]],[1570171965231,["GJX@GJXAIOU",[[1,1551,"最终"]],[1551,1551],[1553,1553]]],[1570171970595,["GJX@GJXAIOU",[[1,1554,"时间复杂度为："]],[1554,1554],[1561,1561]]],[1570171974847,["GJX@GJXAIOU",[[1,1561,"$$"]],[1561,1561],[1563,1563]]],[1570171978046,["GJX@GJXAIOU",[[1,1562,"O()"]],[1562,1562],[1565,1565]]],[1570171984235,["GJX@GJXAIOU",[[1,1564,"N^{2}"]],[1564,1564],[1569,1569]]],[1570172003982,["GJX@GJXAIOU",[[1,1569,"\n"]],[1569,1569],[1570,1570]]],[1570172004129,["GJX@GJXAIOU",[[1,1570,"\n"]],[1570,1570],[1571,1571]]],[1570172004298,["GJX@GJXAIOU",[[1,1571,"\n"]],[1571,1571],[1572,1572]]],[1570172005450,["GJX@GJXAIOU",[[-1,1571,"\n"]],[1572,1572],[1571,1571]]],[1570172005603,["GJX@GJXAIOU",[[-1,1570,"\n"]],[1571,1571],[1570,1570]]],[1570172005756,["GJX@GJXAIOU",[[-1,1569,"\n"]],[1570,1570],[1569,1569]]],[1570172008132,["GJX@GJXAIOU",[[1,1573,"\n"]],[1571,1571],[1572,1572]]],[1570172008250,["GJX@GJXAIOU",[[1,1574,"\n"]],[1572,1572],[1573,1573]]],[1570172008518,["GJX@GJXAIOU",[[1,1575,"\n"]],[1573,1573],[1574,1574]]],[1570172008642,["GJX@GJXAIOU",[[1,1576,"\n"]],[1574,1574],[1575,1575]]],[1570172008780,["GJX@GJXAIOU",[[1,1577,"\n"]],[1575,1575],[1576,1576]]],[1570172009019,["GJX@GJXAIOU",[[1,1578,"\n"]],[1576,1576],[1577,1577]]],[1570172012212,["GJX@GJXAIOU",[[1,1577,"## san"]],[1577,1577],[1583,1583]]],[1570172013250,["GJX@GJXAIOU",[[-1,1580,"san"]],[1583,1583],[1580,1580]]],[1570172023188,["GJX@GJXAIOU",[[1,1580,"三、对数器"]],[1580,1580],[1585,1585]]],[1570172024282,["GJX@GJXAIOU",[[1,1587,"\n"]],[1585,1585],[1586,1586]]],[1570172024579,["GJX@GJXAIOU",[[1,1588,"\n"]],[1586,1586],[1587,1587]]],[1570172062615,["GJX@GJXAIOU",[[1,1587,"- 首先有一个你先要"]],[1587,1587],[1597,1597]]],[1570172063362,["GJX@GJXAIOU",[[-1,1595,"先要"]],[1597,1597],[1595,1595]]],[1570172075702,["GJX@GJXAIOU",[[1,1595,"想要验证是否正确的方法 A；"]],[1595,1595],[1609,1609]]],[1570172076092,["GJX@GJXAIOU",[[1,1610,"- \n"]],[1609,1609],[1612,1612]]],[1570172081867,["GJX@GJXAIOU",[[1,1612,"其次需要衣蛾"]],[1612,1612],[1618,1618]]],[1570172082956,["GJX@GJXAIOU",[[-1,1616,"衣蛾"]],[1618,1618],[1616,1616]]],[1570172087457,["GJX@GJXAIOU",[[1,1616,"一个绝对"]],[1616,1616],[1620,1620]]],[1570172088309,["GJX@GJXAIOU",[[-1,1618,"绝对"]],[1620,1620],[1618,1618]]],[1570172094111,["GJX@GJXAIOU",[[1,1618,"已知绝对正确"]],[1618,1618],[1624,1624]]],[1570172097349,["GJX@GJXAIOU",[[1,1624,"但是课鞥呢"]],[1624,1624],[1629,1629]]],[1570172098076,["GJX@GJXAIOU",[[-1,1626,"课鞥呢"]],[1629,1629],[1626,1626]]],[1570172100240,["GJX@GJXAIOU",[[1,1626,"可能使劲"]],[1626,1626],[1630,1630]]],[1570172101921,["GJX@GJXAIOU",[[-1,1626,"可能使劲"]],[1630,1630],[1626,1626]]],[1570172113966,["GJX@GJXAIOU",[[1,1626,"可能时间复杂度不好的方法 B；（）"]],[1626,1626],[1643,1643]]],[1570172122596,["GJX@GJXAIOU",[[1,1642,"也可以不完全正确"]],[1642,1642],[1650,1650]]],[1570172124159,["GJX@GJXAIOU",[[1,1652,"- \n"]],[1651,1651],[1654,1654]]],[1570172144189,["GJX@GJXAIOU",[[1,1654,"实现一个随机样本产生器；"]],[1654,1654],[1666,1666]]],[1570172146034,["GJX@GJXAIOU",[[1,1667,"- \n"]],[1666,1666],[1669,1669]]],[1570172150710,["GJX@GJXAIOU",[[1,1669,"实现"]],[1669,1669],[1671,1671]]],[1570172157781,["GJX@GJXAIOU",[[1,1671,"两个方法 A和"]],[1671,1671],[1678,1678]]],[1570172157808,["GJX@GJXAIOU",[[1,1677," "]],[1678,1678],[1679,1679]]],[1570172163578,["GJX@GJXAIOU",[[1,1679," B对比"]],[1679,1679],[1683,1683]]],[1570172163605,["GJX@GJXAIOU",[[1,1681," "]],[1683,1683],[1684,1684]]],[1570172165787,["GJX@GJXAIOU",[[1,1684,"的方法；"]],[1684,1684],[1688,1688]]],[1570172170083,["GJX@GJXAIOU",[[1,1689,"- \n"]],[1688,1688],[1691,1691]]],[1570172174412,["GJX@GJXAIOU",[[1,1691,"将 "]],[1691,1691],[1693,1693]]],[1570172177131,["GJX@GJXAIOU",[[-1,1692," "]],[1693,1693],[1692,1692]]],[1570172179181,["GJX@GJXAIOU",[[1,1692,"方法 啊"]],[1692,1692],[1696,1696]]],[1570172180467,["GJX@GJXAIOU",[[-1,1695,"啊"]],[1696,1696],[1695,1695]]],[1570172181860,["GJX@GJXAIOU",[[1,1695,"A和"]],[1695,1695],[1697,1697]]],[1570172181889,["GJX@GJXAIOU",[[1,1696," "]],[1697,1697],[1698,1698]]],[1570172184314,["GJX@GJXAIOU",[[1,1698,"方法B"]],[1698,1698],[1701,1701]]],[1570172184341,["GJX@GJXAIOU",[[1,1700," "]],[1701,1701],[1702,1702]]],[1570172186413,["GJX@GJXAIOU",[[1,1702,"通过"]],[1702,1702],[1704,1704]]],[1570172186441,["GJX@GJXAIOU",[[1,1702," "]],[1704,1704],[1705,1705]]],[1570172200377,["GJX@GJXAIOU",[[1,1705,"很多次验证来判断 A是否"]],[1705,1705],[1717,1717]]],[1570172200404,["GJX@GJXAIOU",[[1,1715," "]],[1717,1717],[1718,1718]]],[1570172201804,["GJX@GJXAIOU",[[1,1718,"正确；"]],[1718,1718],[1721,1721]]],[1570172207491,["GJX@GJXAIOU",[[1,1722,"- \n"]],[1721,1721],[1724,1724]]],[1570172213576,["GJX@GJXAIOU",[[1,1724,"如果某一个"]],[1724,1724],[1729,1729]]],[1570172219910,["GJX@GJXAIOU",[[1,1729,"样本输出连个"]],[1729,1729],[1735,1735]]],[1570172220705,["GJX@GJXAIOU",[[-1,1733,"连个"]],[1735,1735],[1733,1733]]],[1570172228672,["GJX@GJXAIOU",[[1,1733,"两个样本"]],[1733,1733],[1737,1737]]],[1570172230395,["GJX@GJXAIOU",[[-1,1735,"样本"]],[1737,1737],[1735,1735]]],[1570172248350,["GJX@GJXAIOU",[[1,1735,"方法的结果不一致，可以打印出该样本，然后更加"]],[1735,1735],[1757,1757]]],[1570172249242,["GJX@GJXAIOU",[[-1,1755,"更加"]],[1757,1757],[1755,1755]]],[1570172265628,["GJX@GJXAIOU",[[1,1755,"根据该样本分析是哪个方法出错了；"]],[1755,1755],[1771,1771]]],[1570172268771,["GJX@GJXAIOU",[[1,1772,"- \n"]],[1771,1771],[1774,1774]]],[1570172273406,["GJX@GJXAIOU",[[1,1774,"方"]],[1774,1774],[1775,1775]]],[1570172274362,["GJX@GJXAIOU",[[-1,1774,"方"]],[1775,1775],[1774,1774]]],[1570172277953,["GJX@GJXAIOU",[[1,1774,"当样本量"]],[1774,1774],[1778,1778]]],[1570172291397,["GJX@GJXAIOU",[[1,1775,"进行大量"]],[1775,1775],[1779,1779]]],[1570172298829,["GJX@GJXAIOU",[[1,1782,"对比之后此时"]],[1782,1782],[1788,1788]]],[1570172299513,["GJX@GJXAIOU",[[-1,1786,"此时"]],[1788,1788],[1786,1786]]],[1570172318843,["GJX@GJXAIOU",[[1,1786,"测试仍然正确，可以确认方法 A 是正确的；"]],[1786,1786],[1807,1807]]],[1570172345379,["GJX@GJXAIOU",[[1,1245,"空间复杂度：$$"]],[1245,1245],[1253,1253]]],[1570172348116,["GJX@GJXAIOU",[[1,1252,"O()"]],[1252,1252],[1255,1255]]],[1570172349142,["GJX@GJXAIOU",[[1,1254,"1"]],[1254,1254],[1255,1255]]],[1570172354293,["GJX@GJXAIOU",[[1,1369,"\n"]],[1367,1367],[1368,1368]]],[1570172354802,["GJX@GJXAIOU",[[1,1368,"空间复杂度：$O(1)$"]],[1368,1368],[1380,1380]]],[1570172356717,["GJX@GJXAIOU",[[1,1351,"\n"]],[1351,1351],[1352,1352]]],[1570172368931,["GJX@GJXAIOU",[[1,1597,","]],[1597,1597],[1598,1598]]],[1570172370653,["GJX@GJXAIOU",[[-1,1597,","]],[1598,1598],[1597,1597]]],[1570172375218,["GJX@GJXAIOU",[[1,1597,"，空间复杂度：$O(1)$；"]],[1597,1597],[1611,1611]]],[1570172383060,["GJX@GJXAIOU",[[1,1849,"\n"]],[1848,1848],[1849,1849]]],[1570172383205,["GJX@GJXAIOU",[[1,1850,"\n"]],[1849,1849],[1850,1850]]],[1570172383362,["GJX@GJXAIOU",[[1,1851,"\n"]],[1850,1850],[1851,1851]]],[1570172391435,["GJX@GJXAIOU",[[1,1851,"## 四、"]],[1851,1851],[1856,1856]]],[1570172394766,["GJX@GJXAIOU",[[1,1856,"递归"]],[1856,1856],[1858,1858]]],[1570172395077,["GJX@GJXAIOU",[[1,1859,"\n"]],[1858,1858],[1859,1859]]],[1570172851534,["GJX@GJXAIOU",[[-1,1859,"\n"],[1,1860,"="]],[1859,1859],[1860,1860]]],[1570172866116,["GJX@GJXAIOU",[[1,1860,"=递归就是自己调自己=="]],[1860,1860],[1872,1872]]],[1570172867196,["GJX@GJXAIOU",[[1,1872,"\n\n"]],[1872,1872],[1873,1873]]],[1570172868606,["GJX@GJXAIOU",[[-1,1873,"\n"],[1,1874,"="]],[1873,1873],[1874,1874]]],[1570172873150,["GJX@GJXAIOU",[[1,1874,"=任何递归"]],[1874,1874],[1879,1879]]],[1570172881762,["GJX@GJXAIOU",[[1,1879,"都可以改为非递归=="]],[1879,1879],[1889,1889]]],[1570172886611,["GJX@GJXAIOU",[[1,1889,"\n\n"]],[1889,1889],[1890,1890]]],[1570172889844,["GJX@GJXAIOU",[[-1,1890,"\n"],[1,1891,"递归"]],[1890,1890],[1892,1892]]],[1570172931203,["GJX@GJXAIOU",[[1,1892,"函数本质上就是系统在帮我们压栈，如果改为自己压栈就可以改为非递归；"]],[1892,1892],[1925,1925]]],[1570172931771,["GJX@GJXAIOU",[[1,1925,"\n\n"]],[1925,1925],[1926,1926]]],[1570172939095,["GJX@GJXAIOU",[[1,1927,"\n"]],[1926,1926],[1927,1927]]],[1570172940180,["GJX@GJXAIOU",[[-1,1927,"\n"],[1,1928,"*"]],[1927,1927],[1928,1928]]],[1570172940336,["GJX@GJXAIOU",[[1,1928,"***"]],[1928,1928],[1929,1929]]],[1570172952686,["GJX@GJXAIOU",[[1,1929,"下面以一个示例解释递归过程："]],[1929,1929],[1943,1943]]],[1570172954643,["GJX@GJXAIOU",[[1,1945,"\n\n"]],[1945,1945],[1946,1946]]],[1570172957868,["GJX@GJXAIOU",[[1,1947,"\n"]],[1946,1946],[1947,1947]]],[1570172957955,["GJX@GJXAIOU",[[1,1948,"\n"]],[1947,1947],[1948,1948]]],[1570172958084,["GJX@GJXAIOU",[[1,1949,"\n"]],[1948,1948],[1949,1949]]],[1570172958195,["GJX@GJXAIOU",[[1,1950,"\n"]],[1949,1949],[1950,1950]]],[1570172958314,["GJX@GJXAIOU",[[1,1951,"\n"]],[1950,1950],[1951,1951]]],[1570172958437,["GJX@GJXAIOU",[[1,1952,"\n"]],[1951,1951],[1952,1952]]],[1570172958574,["GJX@GJXAIOU",[[1,1953,"\n"]],[1952,1952],[1953,1953]]],[1570172958691,["GJX@GJXAIOU",[[1,1954,"\n"]],[1953,1953],[1954,1954]]],[1570172958828,["GJX@GJXAIOU",[[1,1955,"\n"]],[1954,1954],[1955,1955]]],[1570172958950,["GJX@GJXAIOU",[[1,1956,"\n"]],[1955,1955],[1956,1956]]],[1570172959094,["GJX@GJXAIOU",[[1,1957,"\n"]],[1956,1956],[1957,1957]]],[1570172959219,["GJX@GJXAIOU",[[1,1958,"\n"]],[1957,1957],[1958,1958]]],[1570172959375,["GJX@GJXAIOU",[[1,1959,"\n"]],[1958,1958],[1959,1959]]],[1570173141595,["GJX@GJXAIOU",[[1,1858,"（）"]],[1858,1858],[1860,1860]]],[1570173148318,["GJX@GJXAIOU",[[1,1859,"R而粗肉丝on"]],[1859,1859],[1866,1866]]],[1570173150899,["GJX@GJXAIOU",[[-1,1859,"R而粗肉丝on"]],[1866,1866],[1859,1859]]],[1570173156704,["GJX@GJXAIOU",[[1,1859,"Recursion"]],[1859,1859],[1868,1868]]],[1570178373844,["GJX@GJXAIOU",[[1,1962,"### gui"]],[1962,1962],[1969,1969]]],[1570178374547,["GJX@GJXAIOU",[[-1,1966,"gui"]],[1969,1969],[1966,1966]]],[1570178380845,["GJX@GJXAIOU",[[1,1966,"归并排序"]],[1966,1966],[1970,1970]]],[1570178381171,["GJX@GJXAIOU",[[1,1979,"\n"]],[1970,1970],[1971,1971]]],[1570178401718,["GJX@GJXAIOU",[[1,1971,"首相"]],[1971,1971],[1973,1973]]],[1570178403526,["GJX@GJXAIOU",[[-1,1971,"首相"]],[1973,1973],[1971,1971]]],[1570178407686,["GJX@GJXAIOU",[[1,1971,"流程：首相"]],[1971,1971],[1976,1976]]],[1570178409348,["GJX@GJXAIOU",[[-1,1974,"首相"]],[1976,1976],[1974,1974]]],[1570178415815,["GJX@GJXAIOU",[[1,1974,"首先将数组分为连个"]],[1974,1974],[1983,1983]]],[1570178416595,["GJX@GJXAIOU",[[-1,1981,"连个"]],[1983,1983],[1981,1981]]],[1570178419466,["GJX@GJXAIOU",[[1,1981,"两个部分"]],[1981,1981],[1985,1985]]],[1570178424468,["GJX@GJXAIOU",[[1,1985,"（）"]],[1985,1985],[1987,1987]]],[1570178428864,["GJX@GJXAIOU",[[-1,1979,"分为两个部分（）"]],[1987,1987],[1979,1979]]],[1570178476605,["GJX@GJXAIOU",[[1,1979,"对半分为两个部分，然后分别对左右两边进行排序；最后对整体进行外排；"]],[1979,1979],[2012,2012]]],[1570178506463,["GJX@GJXAIOU",[[1,2021,"\n"]],[2012,2012],[2013,2013]]],[1570178516842,["GJX@GJXAIOU",[[1,2013,"重点关注：最后侦探个头"]],[2013,2013],[2024,2024]]],[1570178517823,["GJX@GJXAIOU",[[-1,2020,"侦探个头"]],[2024,2024],[2020,2020]]],[1570178522311,["GJX@GJXAIOU",[[1,2020,"整体的外排"]],[2020,2020],[2025,2025]]],[1570178522838,["GJX@GJXAIOU",[[1,2034,"\n"]],[2025,2025],[2026,2026]]],[1570178524348,["GJX@GJXAIOU",[[1,2035,"\n"]],[2026,2026],[2027,2027]]],[1570178525092,["GJX@GJXAIOU",[[1,2027,"*8"]],[2027,2027],[2029,2029]]],[1570178526676,["GJX@GJXAIOU",[[-1,2027,"*8"]],[2029,2029],[2027,2027]]],[1570178527401,["GJX@GJXAIOU",[[1,2027,"****"]],[2027,2027],[2029,2029]]],[1570178528662,["GJX@GJXAIOU",[[1,2029,"示例："]],[2029,2029],[2032,2032]]],[1570178534909,["GJX@GJXAIOU",[[1,2034," 原来数组元素为："]],[2034,2034],[2043,2043]]],[1570178547957,["GJX@GJXAIOU",[[1,2043,"32"]],[2043,2043],[2045,2045]]],[1570178548666,["GJX@GJXAIOU",[[-1,2044,"2"]],[2045,2045],[2044,2044]]],[1570178549957,["GJX@GJXAIOU",[[1,2044,"，4，"]],[2044,2044],[2047,2047]]],[1570178550610,["GJX@GJXAIOU",[[-1,2046,"，"]],[2047,2047],[2046,2046]]],[1570178550829,["GJX@GJXAIOU",[[1,2046,",6，"]],[2046,2046],[2049,2049]]],[1570178552809,["GJX@GJXAIOU",[[1,2047," "]],[2047,2047],[2048,2048]]],[1570178554828,["GJX@GJXAIOU",[[1,2050,"2，"]],[2050,2050],[2052,2052]]],[1570178556666,["GJX@GJXAIOU",[[-1,2051,"，"]],[2052,2052],[2051,2051]]],[1570178556703,["GJX@GJXAIOU",[[1,2051,",7"]],[2051,2051],[2053,2053]]],[1570178557683,["GJX@GJXAIOU",[[-1,2052,"7"]],[2053,2053],[2052,2052]]],[1570178560204,["GJX@GJXAIOU",[[1,2052," 7，"]],[2052,2052],[2055,2055]]],[1570178563480,["GJX@GJXAIOU",[[-1,2054,"，"]],[2055,2055],[2054,2054]]],[1570178563499,["GJX@GJXAIOU",[[1,2054,","]],[2054,2054],[2055,2055]]],[1570178563911,["GJX@GJXAIOU",[[-1,2053,"7,"]],[2055,2055],[2053,2053]]],[1570178565076,["GJX@GJXAIOU",[[1,2053,"5，"]],[2053,2053],[2055,2055]]],[1570178565858,["GJX@GJXAIOU",[[-1,2054,"，"]],[2055,2055],[2054,2054]]],[1570178565896,["GJX@GJXAIOU",[[1,2054,",8"]],[2054,2054],[2056,2056]]],[1570178567829,["GJX@GJXAIOU",[[1,2055," "]],[2055,2055],[2056,2056]]],[1570178583310,["GJX@GJXAIOU",[[1,2057,"；首先划分为：Left:[]"]],[2057,2057],[2071,2071]]],[1570178586693,["GJX@GJXAIOU",[[1,2070,"3,4,5"]],[2070,2070],[2075,2075]]],[1570178587322,["GJX@GJXAIOU",[[-1,2074,"5"]],[2075,2075],[2074,2074]]],[1570178587728,["GJX@GJXAIOU",[[1,2074,"6"]],[2074,2074],[2075,2075]]],[1570178593621,["GJX@GJXAIOU",[[1,2076,"和 right:[]"]],[2076,2076],[2086,2086]]],[1570178599253,["GJX@GJXAIOU",[[1,2085,"2,"]],[2085,2085],[2087,2087]]],[1570178600807,["GJX@GJXAIOU",[[1,2087,"5,8"]],[2087,2087],[2090,2090]]],[1570178711235,["GJX@GJXAIOU",[[-1,2045,"4"]],[2046,2046],[2045,2045]]],[1570178712167,["GJX@GJXAIOU",[[1,2045,"6"]],[2045,2045],[2046,2046]]],[1570178713963,["GJX@GJXAIOU",[[-1,2048,"6"]],[2049,2049],[2048,2048]]],[1570178714237,["GJX@GJXAIOU",[[1,2048,"4"]],[2048,2048],[2049,2049]]],[1570178716284,["GJX@GJXAIOU",[[-1,2050,"2"]],[2051,2051],[2050,2050]]],[1570178716981,["GJX@GJXAIOU",[[1,2050,"5"]],[2050,2050],[2051,2051]]],[1570178718871,["GJX@GJXAIOU",[[-1,2053,"5"]],[2054,2054],[2053,2053]]],[1570178719792,["GJX@GJXAIOU",[[1,2053,"2"]],[2053,2053],[2054,2054]]],[1570185315389,["GJX@GJXAIOU",[[-1,2072,"4"]],[2073,2073],[2072,2072]]],[1570185316152,["GJX@GJXAIOU",[[1,2072,"6"]],[2072,2072],[2073,2073]]],[1570185317355,["GJX@GJXAIOU",[[-1,2074,"6"]],[2075,2075],[2074,2074]]],[1570185318046,["GJX@GJXAIOU",[[1,2074,"4"]],[2074,2074],[2075,2075]]],[1570185321028,["GJX@GJXAIOU",[[-1,2085,"2"]],[2086,2086],[2085,2085]]],[1570185321486,["GJX@GJXAIOU",[[1,2085,"5"]],[2085,2085],[2086,2086]]],[1570185322581,["GJX@GJXAIOU",[[-1,2087,"5"]],[2088,2088],[2087,2087]]],[1570185323045,["GJX@GJXAIOU",[[1,2087,"2"]],[2087,2087],[2088,2088]]],[1570185325975,["GJX@GJXAIOU",[[1,2091,";"]],[2091,2091],[2092,2092]]],[1570185327763,["GJX@GJXAIOU",[[-1,2091,";"]],[2092,2092],[2091,2091]]],[1570185344153,["GJX@GJXAIOU",[[1,2091,"；然后将他们分别排序为：let"]],[2091,2091],[2106,2106]]],[1570185344956,["GJX@GJXAIOU",[[-1,2103,"let"]],[2106,2106],[2103,2103]]],[1570185355674,["GJX@GJXAIOU",[[1,2103,"Left:[3,4,6] 和 Righty"]],[2103,2103],[2124,2124]]],[1570185356774,["GJX@GJXAIOU",[[-1,2123,"y"]],[2124,2124],[2123,2123]]],[1570185357518,["GJX@GJXAIOU",[[1,2123,"："]],[2123,2123],[2124,2124]]],[1570185358317,["GJX@GJXAIOU",[[-1,2123,"："]],[2124,2124],[2123,2123]]],[1570185359960,["GJX@GJXAIOU",[[1,2123,":[]"]],[2123,2123],[2126,2126]]],[1570185363854,["GJX@GJXAIOU",[[1,2125,"2,5,8"]],[2125,2125],[2130,2130]]],[1570185383323,["GJX@GJXAIOU",[[1,2131,"，然后左右各取第一"]],[2131,2131],[2140,2140]]],[1570185385469,["GJX@GJXAIOU",[[-1,2138,"第一"]],[2140,2140],[2138,2138]]],[1570185387518,["GJX@GJXAIOU",[[1,2138,"下标"]],[2138,2138],[2140,2140]]],[1570185389245,["GJX@GJXAIOU",[[1,2140," a,b"]],[2140,2140],[2144,2144]]],[1570185394635,["GJX@GJXAIOU",[[-1,2138,"下标"]],[2140,2140],[2138,2138]]],[1570185395746,["GJX@GJXAIOU",[[1,2138,"z"]],[2138,2138],[2139,2139]]],[1570185395774,["GJX@GJXAIOU",[[1,2138," "]],[2139,2139],[2140,2140]]],[1570185396089,["GJX@GJXAIOU",[[1,2140,"hizh"]],[2140,2140],[2144,2144]]],[1570185397197,["GJX@GJXAIOU",[[-1,2139,"zhizh "]],[2144,2144],[2138,2138]]],[1570185398556,["GJX@GJXAIOU",[[1,2138,"指针"]],[2138,2138],[2140,2140]]],[1570185404935,["GJX@GJXAIOU",[[1,2144,"；通话四"]],[2144,2144],[2148,2148]]],[1570185405822,["GJX@GJXAIOU",[[-1,2144,"；通话四"]],[2148,2148],[2144,2144]]],[1570185424290,["GJX@GJXAIOU",[[1,2144,"，同时准备一个辅助数组，长度和原数组长度想听"]],[2144,2144],[2166,2166]]],[1570185425988,["GJX@GJXAIOU",[[-1,2162,"长度想听"]],[2166,2166],[2162,2162]]],[1570185429511,["GJX@GJXAIOU",[[1,2162,"长度相同；"]],[2162,2162],[2167,2167]]],[1570185457257,["GJX@GJXAIOU",[[1,2167,"然后分别"]],[2167,2167],[2171,2171]]],[1570185461134,["GJX@GJXAIOU",[[-1,2169,"分别"]],[2171,2171],[2169,2169]]],[1570185466794,["GJX@GJXAIOU",[[1,2169,"比较 a,b指向"]],[2169,2169],[2177,2177]]],[1570185466824,["GJX@GJXAIOU",[[1,2175," "]],[2177,2177],[2178,2178]]],[1570185492553,["GJX@GJXAIOU",[[1,2178,"元素的大小，哪一个小哪一个就放进数组，同时下标 _+"]],[2178,2178],[2204,2204]]],[1570185492589,["GJX@GJXAIOU",[[-1,2203,"+"],[1,2204,"_"]],[2204,2204],[2203,2203]]],[1570185495420,["GJX@GJXAIOU",[[-1,2201," __"]],[2203,2203],[2201,2201]]],[1570185497647,["GJX@GJXAIOU",[[1,2201," + 1,"]],[2201,2201],[2206,2206]]],[1570185498573,["GJX@GJXAIOU",[[-1,2205,","]],[2206,2206],[2205,2205]]],[1570185499121,["GJX@GJXAIOU",[[1,2205,"，"]],[2205,2205],[2206,2206]]],[1570185567545,["GJX@GJXAIOU",[[1,2206,"然后再次比较，直到某一方全部放入数组，则另一方剩余的全部放入数组，最后将该数组拷贝回"]],[2206,2206],[2248,2248]]],[1570185568737,["GJX@GJXAIOU",[[1,2248,"员阿里"]],[2248,2248],[2251,2251]]],[1570185569973,["GJX@GJXAIOU",[[-1,2248,"员阿里"]],[2251,2251],[2248,2248]]],[1570185572323,["GJX@GJXAIOU",[[1,2248,"原来数组；"]],[2248,2248],[2253,2253]]],[1570185585357,["GJX@GJXAIOU",[[1,2262,"\n"]],[2253,2253],[2254,2254]]],[1570185589208,["GJX@GJXAIOU",[[1,2254,"试讲"]],[2254,2254],[2256,2256]]],[1570185590134,["GJX@GJXAIOU",[[-1,2254,"试讲"]],[2256,2256],[2254,2254]]],[1570185614339,["GJX@GJXAIOU",[[1,2254,"因为一共 N 的样本，分为两个一样的部分，则"]],[2254,2254],[2276,2276]]],[1570185616588,["GJX@GJXAIOU",[[-1,2275,"则"]],[2276,2276],[2275,2275]]],[1570185626967,["GJX@GJXAIOU",[[1,2275,"每部分的时间复杂度为 ："]],[2275,2275],[2287,2287]]],[1570185629375,["GJX@GJXAIOU",[[1,2287,"$$"]],[2287,2287],[2289,2289]]],[1570185638990,["GJX@GJXAIOU",[[1,2288,"T()"]],[2288,2288],[2291,2291]]],[1570185642950,["GJX@GJXAIOU",[[1,2290,"N?"]],[2290,2290],[2292,2292]]],[1570185643604,["GJX@GJXAIOU",[[-1,2291,"?"]],[2292,2292],[2291,2291]]],[1570185645158,["GJX@GJXAIOU",[[1,2291,"/2"]],[2291,2291],[2293,2293]]],[1570185712074,["GJX@GJXAIOU",[[-1,2290,"N/2"],[1,2293,"$\\frac{\\mathrm{N}}{2}$"]],[2290,2293],[2312,2312]]],[1570185719260,["GJX@GJXAIOU",[[-1,2311,"$"]],[2312,2312],[2311,2311]]],[1570185720932,["GJX@GJXAIOU",[[-1,2290,"$"]],[2291,2291],[2290,2290]]],[1570185783814,["GJX@GJXAIOU",[[1,2312,","]],[2312,2312],[2313,2313]]],[1570185784604,["GJX@GJXAIOU",[[-1,2312,","]],[2313,2313],[2312,2312]]],[1570185806896,["GJX@GJXAIOU",[[1,2312,"，每一部分进行比较等操作"]],[2312,2312],[2324,2324]]],[1570185811286,["GJX@GJXAIOU",[[1,2324,"为：$4"]],[2324,2324],[2328,2328]]],[1570185812124,["GJX@GJXAIOU",[[-1,2327,"4"]],[2328,2328],[2327,2327]]],[1570185812501,["GJX@GJXAIOU",[[1,2327,"4"]],[2327,2327],[2328,2328]]],[1570185813932,["GJX@GJXAIOU",[[-1,2327,"4"]],[2328,2328],[2327,2327]]],[1570185814438,["GJX@GJXAIOU",[[1,2327,"￥"]],[2327,2327],[2328,2328]]],[1570185816038,["GJX@GJXAIOU",[[-1,2327,"￥"]],[2328,2328],[2327,2327]]],[1570185816846,["GJX@GJXAIOU",[[1,2327,"$"]],[2327,2327],[2328,2328]]],[1570185820367,["GJX@GJXAIOU",[[1,2327,"O()"]],[2327,2327],[2330,2330]]],[1570185821926,["GJX@GJXAIOU",[[1,2329,"N"]],[2329,2329],[2330,2330]]],[1570185843750,["GJX@GJXAIOU",[[1,2332,"，因此时间复杂度为：$$"]],[2332,2332],[2344,2344]]],[1570185846277,["GJX@GJXAIOU",[[1,2343,"T()"]],[2343,2343],[2346,2346]]],[1570185847825,["GJX@GJXAIOU",[[1,2345,"N"]],[2345,2345],[2346,2346]]],[1570185854286,["GJX@GJXAIOU",[[1,2347," = s"]],[2347,2347],[2351,2351]]],[1570185855727,["GJX@GJXAIOU",[[-1,2350,"s"]],[2351,2351],[2350,2350]]],[1570185858655,["GJX@GJXAIOU",[[1,2350,"2 "]],[2350,2350],[2352,2352]]],[1570185859701,["GJX@GJXAIOU",[[-1,2351," "]],[2352,2352],[2351,2351]]],[1570185861526,["GJX@GJXAIOU",[[1,2351,"* /"]],[2351,2351],[2354,2354]]],[1570185862791,["GJX@GJXAIOU",[[-1,2353,"/"]],[2354,2354],[2353,2353]]],[1570185865810,["GJX@GJXAIOU",[[1,2353,"\\fran"]],[2353,2353],[2358,2358]]],[1570185866421,["GJX@GJXAIOU",[[-1,2357,"n"]],[2358,2358],[2357,2357]]],[1570185866525,["GJX@GJXAIOU",[[1,2357,"c"]],[2357,2357],[2358,2358]]],[1570185870191,["GJX@GJXAIOU",[[1,2358,"{}{}"]],[2358,2358],[2362,2362]]],[1570185873871,["GJX@GJXAIOU",[[1,2361,"2"]],[2361,2361],[2362,2362]]],[1570185877606,["GJX@GJXAIOU",[[1,2359,"mathm"]],[2359,2359],[2364,2364]]],[1570185882694,["GJX@GJXAIOU",[[-1,2363,"m"]],[2364,2364],[2363,2363]]],[1570185886670,["GJX@GJXAIOU",[[1,2363,"rm{N"]],[2363,2363],[2367,2367]]],[1570185888975,["GJX@GJXAIOU",[[1,2368,"}"]],[2368,2368],[2369,2369]]],[1570185902582,["GJX@GJXAIOU",[[1,2372,"}"]],[2372,2372],[2373,2373]]],[1570185906550,["GJX@GJXAIOU",[[1,2353,"{"]],[2353,2353],[2354,2354]]],[1570185915815,["GJX@GJXAIOU",[[1,2374," + O()"]],[2374,2374],[2380,2380]]],[1570185917010,["GJX@GJXAIOU",[[1,2379,"N"]],[2379,2379],[2380,2380]]],[1570185927292,["GJX@GJXAIOU",[[-1,2360,"mathrm{"]],[2367,2367],[2360,2360]]],[1570185930086,["GJX@GJXAIOU",[[-1,2362,"}"]],[2362,2362],[2361,2361]]],[1570185931029,["GJX@GJXAIOU",[[-1,2359,"{"]],[2360,2360],[2359,2359]]],[1570185933670,["GJX@GJXAIOU",[[1,2359,"{"]],[2359,2359],[2360,2360]]],[1570185942728,["GJX@GJXAIOU",[[1,2353,"Y"]],[2353,2353],[2354,2354]]],[1570185943301,["GJX@GJXAIOU",[[-1,2353,"Y"]],[2354,2354],[2353,2353]]],[1570185944401,["GJX@GJXAIOU",[[1,2353,"T("]],[2353,2353],[2355,2355]]],[1570185947823,["GJX@GJXAIOU",[[1,2368,")"]],[2368,2368],[2369,2369]]],[1570185965870,["GJX@GJXAIOU",[[1,2378,"$$"]],[2378,2378],[2380,2380]]],[1570185965900,["GJX@GJXAIOU",[[1,2382,"$$\n\n\n"]],[2380,2380],[2381,2381]]],[1570185968894,["GJX@GJXAIOU",[[1,2381,"fran"]],[2381,2381],[2385,2385]]],[1570185969285,["GJX@GJXAIOU",[[-1,2384,"n"]],[2385,2385],[2384,2384]]],[1570185974031,["GJX@GJXAIOU",[[1,2384,"c{N}{2}"]],[2384,2384],[2391,2391]]],[1570185979733,["GJX@GJXAIOU",[[1,2381,"\\"]],[2381,2381],[2382,2382]]],[1570185985382,["GJX@GJXAIOU",[[-1,2381,"\\frac{N}{2}"]],[2381,2392],[2381,2381]]],[1570185985884,["GJX@GJXAIOU",[[-1,2381,"\n"]],[2381,2381],[2380,2380]]],[1570185988652,["GJX@GJXAIOU",[[-1,2378,"$$\n$$"]],[2378,2383],[2378,2378]]],[1570185990028,["GJX@GJXAIOU",[[-1,2386,"\n"]],[2378,2378],[2377,2377]]],[1570185991287,["GJX@GJXAIOU",[[1,2377,","]],[2377,2377],[2378,2378]]],[1570185991916,["GJX@GJXAIOU",[[-1,2377,","]],[2378,2378],[2377,2377]]],[1570186015250,["GJX@GJXAIOU",[[1,2377,"，根据 master公式"]],[2377,2377],[2389,2389]]],[1570186015282,["GJX@GJXAIOU",[[1,2387," "]],[2389,2389],[2390,2390]]],[1570186020875,["GJX@GJXAIOU",[[1,2390,"结果为：PO"]],[2390,2390],[2396,2396]]],[1570186021881,["GJX@GJXAIOU",[[-1,2394,"PO"]],[2396,2396],[2394,2394]]],[1570186023777,["GJX@GJXAIOU",[[1,2394,"$$"]],[2394,2394],[2396,2396]]],[1570186026745,["GJX@GJXAIOU",[[1,2395,"O()"]],[2395,2395],[2398,2398]]],[1570186040862,["GJX@GJXAIOU",[[1,2397,"N * log_2"]],[2397,2397],[2406,2406]]],[1570186042581,["GJX@GJXAIOU",[[-1,2405,"2"]],[2406,2406],[2405,2405]]],[1570186044104,["GJX@GJXAIOU",[[1,2405,"{}"]],[2405,2405],[2407,2407]]],[1570186045512,["GJX@GJXAIOU",[[1,2406,"2"]],[2406,2406],[2407,2407]]],[1570186047278,["GJX@GJXAIOU",[[1,2408,"^"]],[2408,2408],[2409,2409]]],[1570186049175,["GJX@GJXAIOU",[[1,2409,"{N}"]],[2409,2409],[2412,2412]]],[1570186053895,["GJX@GJXAIOU",[[1,2401,"\\"]],[2401,2401],[2402,2402]]],[1570186075496,["GJX@GJXAIOU",[[1,2415," "]],[2415,2415],[2416,2416]]],[1570186089465,["GJX@GJXAIOU",[[1,2418,"****"]],[2418,2418],[2420,2420]]],[1570186090525,["GJX@GJXAIOU",[[1,2420,"Ma"]],[2420,2420],[2422,2422]]],[1570186091168,["GJX@GJXAIOU",[[-1,2420,"Ma"]],[2422,2422],[2420,2420]]],[1570186091894,["GJX@GJXAIOU",[[1,2420,"mst"]],[2420,2420],[2423,2423]]],[1570186092660,["GJX@GJXAIOU",[[-1,2421,"st"]],[2423,2423],[2421,2421]]],[1570186096153,["GJX@GJXAIOU",[[1,2421,"aster 公式"]],[2421,2421],[2429,2429]]],[1570186097764,["GJX@GJXAIOU",[[1,2438,"\n"]],[2431,2431],[2432,2432]]],[1570186106934,["GJX@GJXAIOU",[[1,2432,"一般的时间复杂度公式可以表示为："]],[2432,2432],[2448,2448]]],[1570186115484,["GJX@GJXAIOU",[[1,2448,"￥"]],[2448,2448],[2449,2449]]],[1570186116102,["GJX@GJXAIOU",[[-1,2448,"￥"]],[2449,2449],[2448,2448]]],[1570186117246,["GJX@GJXAIOU",[[1,2448,"$$"]],[2448,2448],[2450,2450]]],[1570186119401,["GJX@GJXAIOU",[[1,2449,"T()"]],[2449,2449],[2452,2452]]],[1570186120878,["GJX@GJXAIOU",[[1,2451,"N "]],[2451,2451],[2453,2453]]],[1570186121795,["GJX@GJXAIOU",[[-1,2452," "]],[2453,2453],[2452,2452]]],[1570186129263,["GJX@GJXAIOU",[[1,2453," = aT()"]],[2453,2453],[2460,2460]]],[1570186131181,["GJX@GJXAIOU",[[1,2459,"f"]],[2459,2459],[2460,2460]]],[1570186131995,["GJX@GJXAIOU",[[-1,2459,"f"]],[2460,2460],[2459,2459]]],[1570186138215,["GJX@GJXAIOU",[[1,2459,"\\frac{N}{@}"]],[2459,2459],[2470,2470]]],[1570186140011,["GJX@GJXAIOU",[[-1,2468,"@"]],[2469,2469],[2468,2468]]],[1570186140405,["GJX@GJXAIOU",[[1,2468,"2"]],[2468,2468],[2469,2469]]],[1570186147413,["GJX@GJXAIOU",[[-1,2468,"2"]],[2469,2469],[2468,2468]]],[1570186147775,["GJX@GJXAIOU",[[1,2468,"b"]],[2468,2468],[2469,2469]]],[1570186157006,["GJX@GJXAIOU",[[1,2470," + O("]],[2470,2470],[2475,2475]]],[1570186157050,["GJX@GJXAIOU",[[1,2476,")"]],[2475,2475],[2476,2476]]],[1570186162336,["GJX@GJXAIOU",[[1,2475,"N{"]],[2475,2475],[2477,2477]]],[1570186163055,["GJX@GJXAIOU",[[-1,2475,"N{"]],[2477,2477],[2475,2475]]],[1570186167325,["GJX@GJXAIOU",[[1,2475,"{N}^{D"]],[2475,2475],[2481,2481]]],[1570186167876,["GJX@GJXAIOU",[[-1,2480,"D"]],[2481,2481],[2480,2480]]],[1570186168911,["GJX@GJXAIOU",[[1,2480,"d}"]],[2480,2480],[2482,2482]]],[1570186178518,["GJX@GJXAIOU",[[1,2470,")"]],[2470,2470],[2471,2471]]],[1570186200879,["GJX@GJXAIOU",[[1,2486,","]],[2486,2486],[2487,2487]]],[1570186201453,["GJX@GJXAIOU",[[-1,2486,","]],[2487,2487],[2486,2486]]],[1570186209713,["GJX@GJXAIOU",[[1,2486,"，其中 N表示"]],[2486,2486],[2493,2493]]],[1570186209744,["GJX@GJXAIOU",[[1,2491," "]],[2493,2493],[2494,2494]]],[1570186221751,["GJX@GJXAIOU",[[1,2494,"整个过程的样本量，"]],[2494,2494],[2503,2503]]],[1570186235334,["GJX@GJXAIOU",[[1,2503,"$$"]],[2503,2503],[2505,2505]]],[1570186243010,["GJX@GJXAIOU",[[1,2504,"N/b"]],[2504,2504],[2507,2507]]],[1570186245732,["GJX@GJXAIOU",[[-1,2504,"N/b"]],[2507,2507],[2504,2504]]],[1570186246734,["GJX@GJXAIOU",[[1,2504,"fra"]],[2504,2504],[2507,2507]]],[1570186247479,["GJX@GJXAIOU",[[-1,2504,"fra"]],[2507,2507],[2504,2504]]],[1570186255111,["GJX@GJXAIOU",[[1,2504,"\\frac{N}{b}"]],[2504,2504],[2515,2515]]],[1570186269896,["GJX@GJXAIOU",[[1,2516,"表示划分之后子过程的样本量"]],[2516,2516],[2529,2529]]],[1570186766575,["GJX@GJXAIOU",[[1,2529,"，a 表示"]],[2529,2529],[2534,2534]]],[1570186776965,["GJX@GJXAIOU",[[1,2534,"子过程发生"]],[2534,2534],[2539,2539]]],[1570186778813,["GJX@GJXAIOU",[[-1,2537,"发生"]],[2539,2539],[2537,2537]]],[1570186816494,["GJX@GJXAIOU",[[1,2537,"共发生多少次，后面的：$ O({N}^{d}))$"]],[2537,2537],[2562,2562]]],[1570186819055,["GJX@GJXAIOU",[[-1,2549," "]],[2550,2550],[2549,2549]]],[1570186823598,["GJX@GJXAIOU",[[1,2561," baioshi"]],[2561,2561],[2569,2569]]],[1570186824635,["GJX@GJXAIOU",[[-1,2562,"baioshi"]],[2569,2569],[2562,2562]]],[1570186826043,["GJX@GJXAIOU",[[1,2562,"表示"]],[2562,2562],[2564,2564]]],[1570186829842,["GJX@GJXAIOU",[[1,2564,"出了"]],[2564,2564],[2566,2566]]],[1570186830580,["GJX@GJXAIOU",[[-1,2564,"出了"]],[2566,2566],[2564,2564]]],[1570186855419,["GJX@GJXAIOU",[[1,2564,"除了子过程之外其它操作的时间复杂度；****"]],[2564,2564],[2584,2584]]],[1570186869704,["GJX@GJXAIOU",[[1,2584,"这里的子过程只是划分一次之后的"]],[2584,2584],[2599,2599]]],[1570186974454,["GJX@GJXAIOU",[[1,2599,"数量。"]],[2599,2599],[2602,2602]]],[1570187003060,["GJX@GJXAIOU",[[-1,2610,"\n"]],[2606,2606],[2605,2605]]],[1570187006589,["GJX@GJXAIOU",[[1,2605,"如果"]],[2605,2605],[2607,2607]]],[1570187033746,["GJX@GJXAIOU",[[1,2607,"一个过程的时间复杂度表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，"]],[2607,2607],[2660,2660]]],[1570187221342,["GJX@GJXAIOU",[[1,2660,"则可以根据 master 公式化为："]],[2660,2660],[2678,2678]]],[1570187224301,["GJX@GJXAIOU",[[-1,2677,"："]],[2678,2678],[2677,2677]]],[1570187229449,["GJX@GJXAIOU",[[1,2677,"以下结果："]],[2677,2677],[2682,2682]]],[1570187234012,["GJX@GJXAIOU",[[1,2687,"\n"]],[2682,2682],[2683,2683]]],[1570187244090,["GJX@GJXAIOU",[[1,2683,"- $$"]],[2683,2683],[2687,2687]]],[1570187246614,["GJX@GJXAIOU",[[1,2686,"lo"]],[2686,2686],[2688,2688]]],[1570187257094,["GJX@GJXAIOU",[[1,2688,"g_{b}{a}"]],[2688,2688],[2696,2696]]],[1570187261573,["GJX@GJXAIOU",[[1,2686,"\\"]],[2686,2686],[2687,2687]]],[1570187266271,["GJX@GJXAIOU",[[1,2694,"^"]],[2694,2694],[2695,2695]]],[1570187274455,["GJX@GJXAIOU",[[1,2698," > d"]],[2698,2698],[2702,2702]]],[1570187279255,["GJX@GJXAIOU",[[1,2703," ："]],[2703,2703],[2705,2705]]],[1570187281023,["GJX@GJXAIOU",[[-1,2704,"："]],[2705,2705],[2704,2704]]],[1570187289863,["GJX@GJXAIOU",[[1,2704,"：复杂度为：$$"]],[2704,2704],[2712,2712]]],[1570187292966,["GJX@GJXAIOU",[[1,2711,"O()"]],[2711,2711],[2714,2714]]],[1570187294778,["GJX@GJXAIOU",[[1,2713,"N"]],[2713,2713],[2714,2714]]],[1570187300510,["GJX@GJXAIOU",[[-1,2713,"N"]],[2714,2714],[2713,2713]]],[1570187302233,["GJX@GJXAIOU",[[1,2713,"{}"]],[2713,2713],[2715,2715]]],[1570187303535,["GJX@GJXAIOU",[[1,2714,"N"]],[2714,2714],[2715,2715]]],[1570187307174,["GJX@GJXAIOU",[[1,2716,"^{"]],[2716,2716],[2718,2718]]],[1570187307749,["GJX@GJXAIOU",[[1,2718,"}"]],[2718,2718],[2719,2719]]],[1570187310583,["GJX@GJXAIOU",[[1,2718,"lon"]],[2718,2718],[2721,2721]]],[1570187311501,["GJX@GJXAIOU",[[-1,2720,"n"]],[2721,2721],[2720,2720]]],[1570187315200,["GJX@GJXAIOU",[[1,2720,"g{b"]],[2720,2720],[2723,2723]]],[1570187315686,["GJX@GJXAIOU",[[1,2724,"}"]],[2723,2723],[2724,2724]]],[1570187319496,["GJX@GJXAIOU",[[1,2724,"^{a"]],[2724,2724],[2727,2727]]],[1570187320078,["GJX@GJXAIOU",[[1,2728,"}"]],[2727,2727],[2728,2728]]],[1570187330198,["GJX@GJXAIOU",[[1,2731,"；"]],[2731,2731],[2732,2732]]],[1570187330749,["GJX@GJXAIOU",[[1,2733,"- \n"]],[2732,2732],[2735,2735]]],[1570187338292,["GJX@GJXAIOU",[[1,2735,"$\\log_{b}^{a} > d$ ："]],[2735,2735],[2755,2755]]],[1570187339998,["GJX@GJXAIOU",[[1,2756,"- \n"]],[2755,2755],[2758,2758]]],[1570187341925,["GJX@GJXAIOU",[[1,2758,"$\\log_{b}^{a} > d$ ："]],[2758,2758],[2778,2778]]],[1570187344221,["GJX@GJXAIOU",[[-1,2749,">"]],[2750,2750],[2749,2749]]],[1570187344564,["GJX@GJXAIOU",[[1,2749,"="]],[2749,2749],[2750,2750]]],[1570187347119,["GJX@GJXAIOU",[[-1,2772,">"]],[2773,2773],[2772,2772]]],[1570187347551,["GJX@GJXAIOU",[[1,2772,"《"]],[2772,2772],[2773,2773]]],[1570187348645,["GJX@GJXAIOU",[[-1,2772,"《"]],[2773,2773],[2772,2772]]],[1570187349304,["GJX@GJXAIOU",[[1,2772,"<"]],[2772,2772],[2773,2773]]],[1570187356341,["GJX@GJXAIOU",[[1,2755,"复杂度为：$O({N}^{log{b}^{a}})$；"]],[2755,2755],[2782,2782]]],[1570187358469,["GJX@GJXAIOU",[[1,2805,"复杂度为：$O({N}^{log{b}^{a}})$；"]],[2805,2805],[2832,2832]]],[1570187365840,["GJX@GJXAIOU",[[-1,2822,"b"]],[2823,2823],[2822,2822]]],[1570187366496,["GJX@GJXAIOU",[[1,2822,"N"]],[2822,2822],[2823,2823]]],[1570187375214,["GJX@GJXAIOU",[[-1,2818,"log{N}^{a}"]],[2821,2821],[2818,2818]]],[1570187375465,["GJX@GJXAIOU",[[1,2818,"d"]],[2818,2818],[2819,2819]]],[1570187385526,["GJX@GJXAIOU",[[1,2768,"{"]],[2767,2767],[2768,2768]]],[1570187391519,["GJX@GJXAIOU",[[1,2768,"d} *"]],[2768,2768],[2772,2772]]],[1570187398668,["GJX@GJXAIOU",[[-1,2777,"b"]],[2778,2778],[2777,2777]]],[1570187400221,["GJX@GJXAIOU",[[1,2777,"2"]],[2777,2777],[2778,2778]]],[1570187403088,["GJX@GJXAIOU",[[-1,2781,"a"]],[2782,2782],[2781,2781]]],[1570187403671,["GJX@GJXAIOU",[[1,2781,"N"]],[2781,2781],[2782,2782]]],[1570187419749,["GJX@GJXAIOU",[[1,2773,"\\"]],[2773,2773],[2774,2774]]],[1570187751810,["GJX@GJXAIOU",[[1,2604,"hua"]],[2604,2604],[2607,2607]]],[1570187752581,["GJX@GJXAIOU",[[-1,2604,"hua"]],[2607,2607],[2604,2604]]],[1570187764767,["GJX@GJXAIOU",[[1,2604," 划分的子问题应该规模相同；"]],[2604,2604],[2618,2618]]],[1570187765581,["GJX@GJXAIOU",[[-1,2617,"；"]],[2618,2618],[2617,2617]]],[1570187766191,["GJX@GJXAIOU",[[1,2617,"；"]],[2617,2617],[2618,2618]]],[1570187808518,["GJX@GJXAIOU",[[1,2418,"\n"]],[2418,2418],[2419,2419]]],[1570187824406,["GJX@GJXAIOU",[[1,2417,"空间复杂度：$$"]],[2417,2417],[2425,2425]]],[1570187827255,["GJX@GJXAIOU",[[1,2424,"O()"]],[2424,2424],[2427,2427]]],[1570187828534,["GJX@GJXAIOU",[[1,2426,"N"]],[2426,2426],[2427,2427]]],[1570187886760,["GJX@GJXAIOU",[[1,2861,"\n"]],[2858,2858],[2859,2859]]],[1570187890030,["GJX@GJXAIOU",[[1,2859,"### shili"]],[2859,2859],[2868,2868]]],[1570187890807,["GJX@GJXAIOU",[[-1,2863,"shili"]],[2868,2868],[2863,2863]]],[1570187892249,["GJX@GJXAIOU",[[1,2863,"示例"]],[2863,2863],[2865,2865]]],[1570187892716,["GJX@GJXAIOU",[[1,2868,"\n"]],[2865,2865],[2866,2866]]],[1570187893154,["GJX@GJXAIOU",[[1,2869,"\n"]],[2866,2866],[2867,2867]]],[1570187894932,["GJX@GJXAIOU",[[1,2867,"****"]],[2867,2867],[2869,2869]]],[1570187899264,["GJX@GJXAIOU",[[1,2869,"小和问题："]],[2869,2869],[2874,2874]]],[1570187909532,["GJX@GJXAIOU",[[1,2877,"在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组\n的小和。"]],[2877,2877],[2922,2922]]],[1570187914275,["GJX@GJXAIOU",[[-1,2917,"\n"]],[2918,2918],[2917,2917]]],[1570187947558,["GJX@GJXAIOU",[[-1,2922,"\n"],[1,2923,"·"]],[2922,2922],[2923,2923]]],[1570187948597,["GJX@GJXAIOU",[[-1,2922,"·"],[1,2923,"\n"]],[2923,2923],[2922,2922]]],[1570187949121,["GJX@GJXAIOU",[[-1,2922,"\n"],[1,2923,"`"]],[2922,2922],[2923,2923]]],[1570187950390,["GJX@GJXAIOU",[[1,2923,"``"]],[2923,2923],[2925,2925]]],[1570187950423,["GJX@GJXAIOU",[[1,2925,"language\n```\n"]],[2925,2925],[2925,2933]]],[1570187952750,["GJX@GJXAIOU",[[-1,2925,"language"],[1,2933,"j"]],[2925,2933],[2926,2926]]],[1570187953247,["GJX@GJXAIOU",[[1,2926,"ava"]],[2926,2926],[2929,2929]]],[1570187953421,["GJX@GJXAIOU",[[1,2930,"\n"]],[2929,2929],[2930,2930]]],[1570187957638,["GJX@GJXAIOU",[[1,2930,"[1,3,4,2,5]\n1左边比1小的数，没有；\n3左边比3小的数，1；\n4左边比4小的数，1、3；\n2左边比2小的数，1；\n5左边比5小的数，1、3、4、2；\n所以小和为1+1+3+1+1+3+4+2=16"]],[2930,2930],[3034,3034]]],[1570187965470,["GJX@GJXAIOU",[[1,3039,"\n"]],[3038,3038],[3039,3039]]],[1570187965622,["GJX@GJXAIOU",[[1,3040,"\n"]],[3039,3039],[3040,3040]]],[1570187966904,["GJX@GJXAIOU",[[1,3041,"\n"]],[3040,3040],[3041,3041]]],[1570187967012,["GJX@GJXAIOU",[[1,3042,"\n"]],[3041,3041],[3042,3042]]],[1570187967167,["GJX@GJXAIOU",[[1,3043,"\n"]],[3042,3042],[3043,3043]]],[1570187967337,["GJX@GJXAIOU",[[1,3044,"\n"]],[3043,3043],[3044,3044]]],[1570187967514,["GJX@GJXAIOU",[[1,3045,"\n"]],[3044,3044],[3045,3045]]],[1570187967829,["GJX@GJXAIOU",[[1,3047,"\n"]],[3046,3046],[3047,3047]]],[1570187967977,["GJX@GJXAIOU",[[1,3048,"\n"]],[3047,3047],[3048,3048]]],[1570188507721,[null,[[1,3048,"\n"]],[3048,3048],[3049,3049]]],[1570188507721,[null,[[-1,3048,"\n"]],[3049,3049],[3048,3048]]],[1570188492013,["GJX@GJXAIOU",[[1,3040,"****"]],[3040,3040],[3042,3042]]],[1570188492622,["GJX@GJXAIOU",[[1,3042,"qiu"]],[3042,3042],[3045,3045]]],[1570188493582,["GJX@GJXAIOU",[[-1,3042,"qiu"]],[3045,3045],[3042,3042]]],[1570188495311,["GJX@GJXAIOU",[[1,3042,"求解："]],[3042,3042],[3045,3045]]],[1570188496775,["GJX@GJXAIOU",[[1,3056,"\n"]],[3047,3047],[3048,3048]]],[1570188503732,["GJX@GJXAIOU",[[1,3048,"将该数组部分"]],[3048,3048],[3054,3054]]],[1570188504447,["GJX@GJXAIOU",[[-1,3052,"部分"]],[3054,3054],[3052,3052]]],[1570188507424,["GJX@GJXAIOU",[[1,3052,"不断的"]],[3052,3052],[3055,3055]]],[1570188567750,[null,[[1,3063,"\n"]],[3063,3063],[3064,3064]]],[1570188567750,[null,[[-1,3063,"\n"]],[3064,3064],[3063,3063]]],[1570188510622,["GJX@GJXAIOU",[[1,3055,"切分："]],[3055,3055],[3058,3058]]],[1570188511614,["GJX@GJXAIOU",[[-1,3057,"："]],[3058,3058],[3057,3057]]],[1570188512638,["GJX@GJXAIOU",[[1,3057,"[]"]],[3057,3057],[3059,3059]]],[1570188515335,["GJX@GJXAIOU",[[1,3058,"1,34"]],[3058,3058],[3062,3062]]],[1570188515981,["GJX@GJXAIOU",[[-1,3061,"4"]],[3062,3062],[3061,3061]]],[1570188516598,["GJX@GJXAIOU",[[1,3061,",4"]],[3061,3061],[3063,3063]]],[1570188519239,["GJX@GJXAIOU",[[1,3064,"["]],[3064,3064],[3065,3065]]],[1570188519271,["GJX@GJXAIOU",[[1,3065,"reference-id]"]],[3065,3065],[3065,3077]]],[1570188521152,["GJX@GJXAIOU",[[-1,3065,"reference-id"],[1,3077,"2"]],[3065,3077],[3066,3066]]],[1570188521615,["GJX@GJXAIOU",[[1,3066,",54"]],[3066,3066],[3069,3069]]],[1570188522324,["GJX@GJXAIOU",[[-1,3068,"4"]],[3069,3069],[3068,3068]]],[1570188534747,["GJX@GJXAIOU",[[1,3069,"，然后再次切分：[1,3k"]],[3069,3069],[3082,3082]]],[1570188535302,["GJX@GJXAIOU",[[-1,3081,"k"]],[3082,3082],[3081,3081]]],[1570188536840,["GJX@GJXAIOU",[[1,3081,"]["]],[3081,3081],[3083,3083]]],[1570188536872,["GJX@GJXAIOU",[[1,3083,"reference-id]"]],[3083,3083],[3083,3095]]],[1570188537369,["GJX@GJXAIOU",[[-1,3083,"reference-id"],[1,3095,"4"]],[3083,3095],[3084,3084]]],[1570188537713,["GJX@GJXAIOU",[[1,3084,","]],[3084,3084],[3085,3085]]],[1570188538245,["GJX@GJXAIOU",[[-1,3084,","]],[3085,3085],[3084,3084]]],[1570188539809,["GJX@GJXAIOU",[[1,3085,"["]],[3085,3085],[3086,3086]]],[1570188539840,["GJX@GJXAIOU",[[1,3086,"reference-id]"]],[3086,3086],[3086,3098]]],[1570188541093,["GJX@GJXAIOU",[[-1,3086,"reference-id"]],[3086,3098],[3086,3086]]],[1570188542391,["GJX@GJXAIOU",[[1,3086,"2,"]],[3086,3086],[3088,3088]]],[1570188543270,["GJX@GJXAIOU",[[-1,3087,","]],[3088,3088],[3087,3087]]],[1570188545031,["GJX@GJXAIOU",[[1,3088,"["]],[3088,3088],[3089,3089]]],[1570188545063,["GJX@GJXAIOU",[[1,3089,"reference-id]"]],[3089,3089],[3089,3101]]],[1570188545631,["GJX@GJXAIOU",[[-1,3089,"reference-id"],[1,3101,"5"]],[3089,3101],[3090,3090]]],[1570188563407,["GJX@GJXAIOU",[[1,3091,",最后切分为：[1."]],[3091,3091],[3101,3101]]],[1570188564189,["GJX@GJXAIOU",[[-1,3100,"."]],[3101,3101],[3100,3100]]],[1570188566815,["GJX@GJXAIOU",[[1,3100,"]["]],[3100,3100],[3102,3102]]],[1570188566846,["GJX@GJXAIOU",[[1,3102,"reference-id]"]],[3102,3102],[3102,3114]]],[1570188627685,[null,[[1,3123,"\n"]],[3123,3123],[3124,3124]]],[1570188627685,[null,[[-1,3123,"\n"]],[3124,3124],[3123,3123]]],[1570188568090,["GJX@GJXAIOU",[[-1,3102,"reference-id"],[1,3114,"3"]],[3102,3114],[3103,3103]]],[1570188570042,["GJX@GJXAIOU",[[1,3104,"["]],[3104,3104],[3105,3105]]],[1570188570075,["GJX@GJXAIOU",[[1,3105,"reference-id]"]],[3105,3105],[3105,3117]]],[1570188570616,["GJX@GJXAIOU",[[-1,3105,"reference-id"],[1,3117,"4"]],[3105,3117],[3106,3106]]],[1570188571697,["GJX@GJXAIOU",[[1,3106,"  "]],[3106,3106],[3108,3108]]],[1570188573565,["GJX@GJXAIOU",[[-1,3106,"  "]],[3108,3108],[3106,3106]]],[1570188575025,["GJX@GJXAIOU",[[1,3107,"["]],[3107,3107],[3108,3108]]],[1570188575056,["GJX@GJXAIOU",[[1,3108,"reference-id]"]],[3108,3108],[3108,3120]]],[1570188576994,["GJX@GJXAIOU",[[-1,3108,"reference-id"],[1,3120,"2"]],[3108,3120],[3109,3109]]],[1570188578777,["GJX@GJXAIOU",[[1,3110,"["]],[3110,3110],[3111,3111]]],[1570188578808,["GJX@GJXAIOU",[[1,3111,"reference-id]"]],[3111,3111],[3111,3123]]],[1570188579407,["GJX@GJXAIOU",[[-1,3111,"reference-id"],[1,3123,"5"]],[3111,3123],[3112,3112]]],[1570188580950,["GJX@GJXAIOU",[[1,3113,";"]],[3113,3113],[3114,3114]]],[1570188588959,["GJX@GJXAIOU",[[1,3123,"\n"]],[3114,3114],[3115,3115]]],[1570188589895,["GJX@GJXAIOU",[[1,3115,"zhel"]],[3115,3115],[3119,3119]]],[1570188590893,["GJX@GJXAIOU",[[-1,3115,"zhel"]],[3119,3119],[3115,3115]]],[1570188596355,["GJX@GJXAIOU",[[1,3115,"这里以1"]],[3115,3115],[3119,3119]]],[1570188596386,["GJX@GJXAIOU",[[1,3118," "]],[3119,3119],[3120,3120]]],[1570188608482,["GJX@GJXAIOU",[[1,3120," 为例，[]"]],[3120,3120],[3126,3126]]],[1570188609943,["GJX@GJXAIOU",[[1,3125,"1"]],[3125,3125],[3126,3126]]],[1570188611487,["GJX@GJXAIOU",[[1,3127,"["]],[3127,3127],[3128,3128]]],[1570188611520,["GJX@GJXAIOU",[[1,3128,"reference-id]"]],[3128,3128],[3128,3140]]],[1570188611638,["GJX@GJXAIOU",[[-1,3128,"reference-id"],[1,3140,"]"]],[3128,3140],[3129,3129]]],[1570188613141,["GJX@GJXAIOU",[[-1,3129,"]"]],[3129,3129],[3128,3128]]],[1570188613481,["GJX@GJXAIOU",[[1,3128,"3"]],[3128,3128],[3129,3129]]],[1570188626057,["GJX@GJXAIOU",[[1,3130,"中有一个 1（）"]],[3130,3130],[3138,3138]]],[1570188687686,[null,[[1,3146,"\n"]],[3146,3146],[3147,3147]]],[1570188687686,[null,[[-1,3146,"\n"]],[3147,3147],[3146,3146]]],[1570188631449,["GJX@GJXAIOU",[[1,3137,"即3"]],[3137,3137],[3139,3139]]],[1570188631480,["GJX@GJXAIOU",[[1,3138," "]],[3139,3139],[3140,3140]]],[1570188632866,["GJX@GJXAIOU",[[1,3140,"的"]],[3140,3140],[3141,3141]]],[1570188632898,["GJX@GJXAIOU",[[1,3140," "]],[3141,3141],[3142,3142]]],[1570188634626,["GJX@GJXAIOU",[[1,3142,"坐标"]],[3142,3142],[3144,3144]]],[1570188635749,["GJX@GJXAIOU",[[-1,3142,"坐标"]],[3144,3144],[3142,3142]]],[1570188646657,["GJX@GJXAIOU",[[1,3142,"左边有一个 1比他小"]],[3142,3142],[3152,3152]]],[1570188646689,["GJX@GJXAIOU",[[1,3149," "]],[3152,3152],[3153,3153]]],[1570188650407,["GJX@GJXAIOU",[[1,3154,"，ranhou"]],[3154,3154],[3161,3161]]],[1570188651285,["GJX@GJXAIOU",[[-1,3155,"ranhou"]],[3161,3161],[3155,3155]]],[1570188654329,["GJX@GJXAIOU",[[1,3155,"然后[p"]],[3155,3155],[3159,3159]]],[1570188654973,["GJX@GJXAIOU",[[-1,3158,"p"]],[3159,3159],[3158,3158]]],[1570188657615,["GJX@GJXAIOU",[[1,3158,"1,2"]],[3158,3158],[3161,3161]]],[1570188658368,["GJX@GJXAIOU",[[-1,3160,"2"]],[3161,3161],[3160,3160]]],[1570188667107,["GJX@GJXAIOU",[[1,3160,"3]和[4]，有一个1"]],[3160,3160],[3171,3171]]],[1570188667139,["GJX@GJXAIOU",[[1,3170," "]],[3171,3171],[3172,3172]]],[1570188668371,["GJX@GJXAIOU",[[1,3172,"（）"]],[3172,3172],[3174,3174]]],[1570188672185,["GJX@GJXAIOU",[[1,3173,"即4"]],[3173,3173],[3175,3175]]],[1570188672216,["GJX@GJXAIOU",[[1,3174," "]],[3175,3175],[3176,3176]]],[1570188675797,["GJX@GJXAIOU",[[1,3176,"左边"]],[3176,3176],[3178,3178]]],[1570188675828,["GJX@GJXAIOU",[[1,3176," "]],[3178,3178],[3179,3179]]],[1570188679106,["GJX@GJXAIOU",[[1,3179,"有一个1"]],[3179,3179],[3183,3183]]],[1570188679137,["GJX@GJXAIOU",[[1,3182," "]],[3183,3183],[3184,3184]]],[1570188681605,["GJX@GJXAIOU",[[1,3184,"比他小"]],[3184,3184],[3187,3187]]],[1570188681653,["GJX@GJXAIOU",[[1,3184," "]],[3187,3187],[3188,3188]]],[1570188685306,["GJX@GJXAIOU",[[1,3189,"，ranh"]],[3189,3189],[3194,3194]]],[1570188686661,["GJX@GJXAIOU",[[-1,3188,"），ranh"]],[3194,3194],[3188,3188]]],[1570188747721,[null,[[1,3196,"\n"]],[3196,3196],[3197,3197]]],[1570188747721,[null,[[-1,3196,"\n"]],[3197,3197],[3196,3196]]],[1570188687943,["GJX@GJXAIOU",[[1,3188,")"]],[3188,3188],[3189,3189]]],[1570188688679,["GJX@GJXAIOU",[[-1,3188,")"]],[3189,3189],[3188,3188]]],[1570188696488,["GJX@GJXAIOU",[[1,3188,"），然后 [1,2,4"]],[3188,3188],[3199,3199]]],[1570188697840,["GJX@GJXAIOU",[[-1,3196,"2,4"]],[3199,3199],[3196,3196]]],[1570188701950,["GJX@GJXAIOU",[[1,3196,"3,4]和【"]],[3196,3196],[3202,3202]]],[1570188702517,["GJX@GJXAIOU",[[-1,3201,"【"]],[3202,3202],[3201,3201]]],[1570188703047,["GJX@GJXAIOU",[[1,3201,"p"]],[3201,3201],[3202,3202]]],[1570188703079,["GJX@GJXAIOU",[[1,3201," "]],[3202,3202],[3203,3203]]],[1570188703679,["GJX@GJXAIOU",[[-1,3202,"p"]],[3203,3203],[3202,3202]]],[1570188711948,["GJX@GJXAIOU",[[1,3202,"[2,5]，有两个比"]],[3202,3202],[3212,3212]]],[1570188714141,["GJX@GJXAIOU",[[-1,3211,"比"]],[3212,3212],[3211,3211]]],[1570188715355,["GJX@GJXAIOU",[[1,3211,"1"]],[3211,3211],[3212,3212]]],[1570188715387,["GJX@GJXAIOU",[[1,3211," "]],[3212,3212],[3213,3213]]],[1570188733031,["GJX@GJXAIOU",[[1,3213,"（）"]],[3213,3213],[3215,3215]]],[1570188735001,["GJX@GJXAIOU",[[1,3214,"及"]],[3214,3214],[3215,3215]]],[1570188736324,["GJX@GJXAIOU",[[-1,3214,"及"]],[3215,3215],[3214,3214]]],[1570188738815,["GJX@GJXAIOU",[[1,3214,"即2"]],[3214,3214],[3216,3216]]],[1570188738850,["GJX@GJXAIOU",[[1,3215," "]],[3216,3216],[3217,3217]]],[1570188740585,["GJX@GJXAIOU",[[1,3217,"和"]],[3217,3217],[3218,3218]]],[1570188740617,["GJX@GJXAIOU",[[1,3217," "]],[3218,3218],[3219,3219]]],[1570188741519,["GJX@GJXAIOU",[[1,3219,"5"]],[3219,3219],[3220,3220]]],[1570188741551,["GJX@GJXAIOU",[[1,3219," "]],[3220,3220],[3221,3221]]],[1570188746528,["GJX@GJXAIOU",[[1,3221," 左边有一个 1 "]],[3221,3221],[3230,3230]]],[1570188807688,[null,[[1,3239,"\n"]],[3239,3239],[3240,3240]]],[1570188807688,[null,[[-1,3239,"\n"]],[3240,3240],[3239,3239]]],[1570188750769,["GJX@GJXAIOU",[[1,3230,"比它小"]],[3230,3230],[3233,3233]]],[1570188791612,["GJX@GJXAIOU",[[1,3234,"，最终一"]],[3234,3234],[3238,3238]]],[1570188792238,["GJX@GJXAIOU",[[-1,3237,"一"]],[3238,3238],[3237,3237]]],[1570188795263,["GJX@GJXAIOU",[[1,3237,"以1"]],[3237,3237],[3239,3239]]],[1570188795297,["GJX@GJXAIOU",[[1,3238," "]],[3239,3239],[3240,3240]]],[1570188797423,["GJX@GJXAIOU",[[1,3240,"为例"]],[3240,3240],[3242,3242]]],[1570188797455,["GJX@GJXAIOU",[[1,3240," "]],[3242,3242],[3243,3243]]],[1570188805456,["GJX@GJXAIOU",[[1,3243,"的小和为：1"]],[3243,3243],[3249,3249]]],[1570188867690,[null,[[1,3257,"\n"]],[3257,3257],[3258,3258]]],[1570188867690,[null,[[-1,3257,"\n"]],[3258,3258],[3257,3257]]],[1570188822234,["GJX@GJXAIOU",[[1,3249," + 1 + 2*1 = 4;qi"]],[3249,3249],[3266,3266]]],[1570188822871,["GJX@GJXAIOU",[[-1,3264,"qi"]],[3266,3266],[3264,3264]]],[1570188826748,["GJX@GJXAIOU",[[1,3264,"其他类似；"]],[3264,3264],[3269,3269]]],[1570188927690,[null,[[1,3277,"\n"]],[3277,3277],[3278,3278]]],[1570188927690,[null,[[-1,3277,"\n"]],[3278,3278],[3277,3277]]],[1570188883088,["GJX@GJXAIOU",[[1,3272,"****"]],[3272,3272],[3274,3274]]],[1570188889185,["GJX@GJXAIOU",[[1,3274,"逆序对问题"]],[3274,3274],[3279,3279]]],[1570188890654,["GJX@GJXAIOU",[[1,3287,"\n"]],[3281,3281],[3282,3282]]],[1570188895942,["GJX@GJXAIOU",[[1,3283,"在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序\n对。"]],[3283,3283],[3326,3326]]],[1570188897324,["GJX@GJXAIOU",[[-1,3282,"\n"]],[3282,3282],[3281,3281]]]],null,"GJX@GJXAIOU"],["4e77df6a-0999-4e5d-9b14-2c717526c90d",1570410452256,"---\ntags: [时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归]\nnote: 文章主要包含 时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归 的内容；\n---\n\n# AlgorithmEasyDay01\n\n## 一、时间复杂度和空间复杂度\n\n### （一）时间复杂度\n\n- 常数时间的操作：一个操作和样本数据量没有关系，每次都是在固定的时间内完成，叫做常数操作；\n- 操作数量表达式中，只要高阶项，不要低阶项，去掉高阶项的系数，比较先比较次幂，然后比较系数以及其他项；\n-  可以将 O(1) 看做每一次操作的时间；\n\n**以一个示例比较：**\n\n一个有序数组A，另一个无序数组B，请打印B中的所有不在A中的数，A数\n组长度为N，B数组长度为M。\n\n- 算法流程1：对于数组B中的每一个数，都在A中通过遍历的方式找一下；\n相当于：B 中每一个数都要在 A 中遍历一遍，则需要操作 N 遍，而 B 中 M 个数都需要按照上面操作一遍，共操作 M * N 遍，因此时间复杂度为：$O(M * N)$；\n- 算法流程2：对于数组B中的每一个数，都在A中通过二分的方式找一下；\n因为 A 中数组是有序的，因此可以进行二分查找，因此整体时间复杂度为：$O(M * \\log_{2}^{N})$；\n- 算法流程3：先把数组B排序，然后用类似外排的方式打印所有不在A中出现的数；\n因为可以是会用快速排序对数组 B 进行排序，因此时间复杂度为：$M * \\log_{2}^{M}$，**外排思想：** 数组 A 开头放置下标 a，数组 B 开头放置下标 b，比较两个下标指向的值，如果 b <= a  指向的值，则 b 向右移动，否则 a 向右移动，其中若 b 指向的值  < a 指向的值，则 b 向右移动同时打印 b 指向的数，若等于则向右移动不打印；\n因此整体外排时间复杂度最差为 $O(M + N)$，因此整个流程时间复杂度为：$O(M * log_{2}^{M}) + O(M + N)$\n\n**总结：** 流程一：$O(M * N)$，流程二：$O(M * \\log_{2}^{N})$，流程三：$O(M * log_{2}^{M}) + O(M + N)$；当 A 数组较短的时候，流程二较好，当 B 数组较短的时候，流程三较好；\n\n\n二分查找： 二分查找前提是该数组必须有序，每次进行查找都是将数组划分一半，N 样本的数组一共可以划分 $\\log_{2}^{N}$次，因此时间复杂度为$O(\\log_{2}^{N})$\n\n### （二）空间复杂度\n就是在操作的过程中需要的**额外的空间**，如果仅仅需要有限个变量：$O(1)$，如果需要原来数组的长度或者和样本数有关，则为：$O(N)$；\n\n\n## 二、排序算法\n\n### （一）冒泡排序\n两两比较，将较大的一个一个向上冒，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n### （二）选择排序\n首先从 0 ~ N-1 上选择最小的数和 0 位置上互换，然后才能够 1 ~ N-1 上选择最小的数和 1 位置上互换.....，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n### （三）插入排序\n首先默认第一个数（0）是排好序的，然后拿第二个数和第一个数比较，如果比第一个数小，就互换，反之不动，这样 0~1 位置上是排好序的；然后拿第三个数和第二个数比较，比他小就互换，如果更换之后再次和第一个数比较，看是否需要互换，最终 0~2 位置上是排好序的.......\n\n最好的情况是原来就有序：$O(N)$，最差的情况是原来就是倒序的：$O(N^{2})$；因此最终的时间复杂度为：$O(N^{2})$，空间复杂度：$O(1)$；\n\n\n\n\n\n## 三、对数器\n\n- 首先有一个你想要验证是否正确的方法 A；\n- 其次需要一个已知绝对正确但是可能时间复杂度不好的方法 B；（也可以不完全正确）\n- 实现一个随机样本产生器；\n- 实现两个方法 A 和 B 对比的方法；\n- 将方法 A 和方法 B 通过很多次验证来判断 A 是否正确；\n- 如果某一个样本输出两个方法的结果不一致，可以打印出该样本，然后根据该样本分析是哪个方法出错了；\n- 当进行大量样本量对比之后测试仍然正确，可以确认方法 A 是正确的；\n\n\n\n## 四、递归（Recursion）\n==递归就是自己调自己==\n==任何递归都可以改为非递归==\n递归函数本质上就是系统在帮我们压栈，如果改为自己压栈就可以改为非递归；\n\n**下面以一个示例解释递归过程：**\n\n\n\n\n\n### 归并排序\n流程：首先将数组对半分为两个部分，然后分别对左右两边进行排序；最后对整体进行外排；\n重点关注：最后整体的外排\n\n**示例：** 原来数组元素为：3，6, 4，5, 2, 8；首先划分为：Left:[3,6,4]和 right:[5,2,8]；然后将他们分别排序为：Left:[3,4,6] 和 Right:[2,5,8]，然后左右各取指针 a,b，同时准备一个辅助数组，长度和原数组长度相同；然后比较 a,b 指向元素的大小，哪一个小哪一个就放进数组，同时下标 + 1，然后再次比较，直到某一方全部放入数组，则另一方剩余的全部放入数组，最后将该数组拷贝回原来数组；\n因为一共 N 的样本，分为两个一样的部分，每部分的时间复杂度为 ：$T(\\frac{\\mathrm{N}}{2})$，每一部分进行比较等操作为：$O(N)$，因此时间复杂度为：$T(N) = 2* T({\\frac{N}{2}}) + O(N)$，根据 master 公式结果为：$O(N * \\log_{2}^{N})$ \n空间复杂度：$O(N)$\n\n**master 公式**\n一般的时间复杂度公式可以表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，其中 N 表示整个过程的样本量，$\\frac{N}{b}$表示划分之后子过程的样本量，a 表示子过程共发生多少次，后面的：$O({N}^{d}))$ 表示除了子过程之外其它操作的时间复杂度；**这里的子过程只是划分一次之后的数量。** 划分的子问题应该规模相同；\n如果一个过程的时间复杂度表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，则可以根据 master 公式化为以下结果：\n- $\\log_{b}^{a} > d$ ：复杂度为：$O({N}^{log{b}^{a}})$；\n- $\\log_{b}^{a} = d$ ：复杂度为：$O({N}^{d} *{\\log{2}^{N}})$；\n- $\\log_{b}^{a} < d$ ：复杂度为：$O({N}^{d})$；\n\n\n### 示例\n\n**小和问题：**\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n```java\n[1,3,4,2,5]\n1左边比1小的数，没有；\n3左边比3小的数，1；\n4左边比4小的数，1、3；\n2左边比2小的数，1；\n5左边比5小的数，1、3、4、2；\n所以小和为1+1+3+1+1+3+4+2=16\n```\n\n**求解：**\n将该数组不断的切分[1,3,4][2,5]，然后再次切分：[1,3][4][2][5],最后切分为：[1][3][4][2][5];\n这里以 1 为例，[1][3]中有一个 1（即 3 的左边有一个 1 比他小），然后[1,3]和[4]，有一个 1（即 4 左边有一个 1 比他小），然后 [1,3,4]和 [2,5]，有两个 1（即 2 和 5 左边有一个 1 比它小），最终以 1 为例的小和为：1 + 1 + 2*1 = 4;其他类似；\n\n\n**逆序对问题**\n在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序\n对。\n\n\n\n\n",[[1570410396129,["GJX@GJXAIOU",[[1,351,"**"],[1,356,"**"]],[351,356],[351,360]]],[1570410399376,["GJX@GJXAIOU",[[1,573,"**"],[1,578,"**"]],[573,578],[573,582]]],[1570410402769,["GJX@GJXAIOU",[[1,479,"**"],[1,484,"**"]],[479,484],[479,488]]],[1570410472512,["GJX@GJXAIOU",[[1,296,"（）"]],[296,296],[298,298]]],[1570410474987,["GJX@GJXAIOU",[[1,297,"是利益"]],[297,297],[300,300]]],[1570410475992,["GJX@GJXAIOU",[[-1,297,"是利益"]],[300,300],[297,297]]],[1570410479370,["GJX@GJXAIOU",[[1,297,"示例一"]],[297,297],[300,300]]],[1570411794991,["GJX@GJXAIOU",[[1,1004,"（）"]],[1004,1004],[1006,1006]]],[1570411809256,["GJX@GJXAIOU",[[1,1005,"因为流程三需要对 B 记性"]],[1005,1005],[1018,1018]]],[1570411809997,["GJX@GJXAIOU",[[-1,1016,"记性"]],[1018,1018],[1016,1016]]],[1570411812256,["GJX@GJXAIOU",[[1,1016,"进行排序"]],[1016,1016],[1020,1020]]],[1570411828341,["GJX@GJXAIOU",[[1,1031,"**"],[1,1045,"**"]],[1031,1045],[1031,1049]]],[1570411921309,["GJX@GJXAIOU",[[1,1179,"**"],[1,1196,"**"]],[1179,1196],[1179,1200]]],[1570413069437,["GJX@GJXAIOU",[[1,1301,"\n"]],[1300,1300],[1301,1301]]],[1570413069581,["GJX@GJXAIOU",[[1,1302,"\n"]],[1301,1301],[1302,1302]]],[1570413069716,["GJX@GJXAIOU",[[1,1303,"\n"]],[1302,1302],[1303,1303]]],[1570413071325,["GJX@GJXAIOU",[[1,1304,"\n"]],[1300,1300],[1301,1301]]],[1570413073453,["GJX@GJXAIOU",[[1,1301,"```java"]],[1301,1301],[1308,1308]]],[1570413073918,["GJX@GJXAIOU",[[1,1312,"\n"]],[1308,1308],[1309,1309]]],[1570413074044,["GJX@GJXAIOU",[[1,1313,"\n"]],[1309,1309],[1310,1310]]],[1570413075374,["GJX@GJXAIOU",[[1,1310,"```"]],[1310,1310],[1313,1313]]],[1570413096902,["GJX@GJXAIOU",[[1,1309,"import java.util.Arrays;   public class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n  }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n  for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n  }\n            }\n        }\n    }\n\n    public static void swap(int[] arr, int left, int right) {\n        arr[left] = arr[left] ^ arr[right];\n  arr[right] = arr[left] ^ arr[right];\n  arr[left] = arr[left] ^ arr[right];\n  }"]],[1309,1309],[2007,2007]]],[1570413099865,["GJX@GJXAIOU",[[-1,1309,"import java.util.Arrays;   public class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n  }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n  for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n  }\n            }\n        }\n    }\n\n    public static void swap(int[] arr, int left, int right) {\n        arr[left] = arr[left] ^ arr[right];\n  arr[right] = arr[left] ^ arr[right];\n  arr[left] = arr[left] ^ arr[right];\n  }"]],[2007,2007],[1309,1309]]],[1570413102045,["GJX@GJXAIOU",[[1,1309,"import java.util.Arrays;\n\npublic class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n                }\n            }\n        }\n    }\n\n    public static void swap(int[] arr, int left, int right) {\n        arr[left] = arr[left] ^ arr[right];\n        arr[right] = arr[left] ^ arr[right];\n        arr[left] = arr[left] ^ arr[right];\n    }"]],[1309,1309],[2046,2046]]],[1570413105732,["GJX@GJXAIOU",[[1,2047,"    \n"]],[2046,2046],[2051,2051]]],[1570413109496,["GJX@GJXAIOU",[[1,2047,"}"]],[2047,2047],[2048,2048]]],[1570413365461,["GJX@GJXAIOU",[[-1,1880,"arr"],[1,1883,"sourceArray"],[-1,1916,"arr"],[1,1919,"sourceArray"],[-1,1928,"arr"],[1,1931,"sourceArray"],[-1,1940,"a"],[1,1941,"sourceA"],[1,1943,"ay"],[-1,1960,"arr"],[1,1963,"sourceArray"],[-1,1973,"a"],[1,1974,"sourceA"],[1,1976,"ay"],[-1,1985,"a"],[1,1986,"sourceA"],[1,1988,"ay"],[-1,2005,"arr"],[1,2008,"sourceArray"],[-1,2017,"a"],[1,2018,"sourceA"],[1,2020,"ay"],[-1,2029,"arr"],[1,2032,"sourceArray"]],[1849,2046],[2126,2126]]],[1570415755387,["GJX@GJXAIOU",[[1,2264,"\n"]],[2263,2263],[2264,2264]]],[1570415755525,["GJX@GJXAIOU",[[1,2265,"\n"]],[2264,2264],[2265,2265]]],[1570415755667,["GJX@GJXAIOU",[[1,2266,"\n"]],[2265,2265],[2266,2266]]],[1570415755762,["GJX@GJXAIOU",[[1,2267,"\n"]],[2266,2266],[2267,2267]]],[1570415758463,["GJX@GJXAIOU",[[1,2264,"···"]],[2264,2264],[2267,2267]]],[1570415759933,["GJX@GJXAIOU",[[-1,2264,"···"]],[2267,2267],[2264,2264]]],[1570415762183,["GJX@GJXAIOU",[[1,2264,"```java"]],[2264,2264],[2271,2271]]],[1570415762316,["GJX@GJXAIOU",[[1,2275,"\n"]],[2271,2271],[2272,2272]]],[1570415762428,["GJX@GJXAIOU",[[1,2276,"\n"]],[2272,2272],[2273,2273]]],[1570415762691,["GJX@GJXAIOU",[[1,2277,"\n"]],[2273,2273],[2274,2274]]],[1570415763342,["GJX@GJXAIOU",[[1,2274,"```"]],[2274,2274],[2277,2277]]],[1570415773156,["GJX@GJXAIOU",[[1,2272,"import java.util.Arrays;\n\npublic class SelectionSort {\n\n    public static void selectionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int i = 0; i < sourceArray.length - 1; i++) {\n            int minIndex = i;\n            // 寻找从 i + 1 位置到最后的最小的数下标\n            for (int j = i + 1; j < sourceArray.length; j++) {\n                minIndex = sourceArray[j] < sourceArray[minIndex] ? j : minIndex;\n            }\n            swap(sourceArray, i, minIndex);\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n       sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n       sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n       sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }"]],[2272,2272],[3101,3101]]],[1570415775900,["GJX@GJXAIOU",[[1,3102,"    \n"]],[3101,3101],[3106,3106]]],[1570415779590,["GJX@GJXAIOU",[[1,3102,"}"]],[3102,3102],[3103,3103]]],[1570415785682,["GJX@GJXAIOU",[[-1,2327,"\n"]],[2327,2327],[2326,2326]]],[1570415796154,["GJX@GJXAIOU",[[-1,3114,"\n"]],[3113,3113],[3112,3112]]],[1570416980466,["GJX@GJXAIOU",[[1,1309,"package sort.nowcoder;\n\n"],[-1,1348,"Bubb"],[1,1352,"Se"],[1,1354,"ction"],[-1,1385,"bubb"],[1,1389,"se"],[1,1391,"ction"],[-1,1516,"// end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        "],[-1,1569,"end"],[1,1572,"start"],[1,1575,"0; start < "],[-1,1599,"end > 0; end--) {"],[1,1616,"start++) {\n            int minIndex = start;\n            // 从 i + 1 位置到最后的最小的数下标"],[1,1638,"cur = "],[-1,1644,"= 0; start"],[1,1654,"+ 1; cur"],[1,1657,"sourceArray.l"],[-1,1659,"d; start"],[1,1667,"gth; cur"],[-1,1689,"if ("],[1,1693,"minIndex = "],[-1,1705,"start] >"],[1,1713,"cur] <"],[-1,1726,"start + 1]) {"],[1,1739,"minIndex] ? cur : minIndex;"],[1,1748,"    }\n"],[-1,1785,"start + 1"],[1,1794,"minIndex"],[-1,1796,"\n                }\n            }"],[-1,1924,"sourceArray[left]"],[1,1941,"int tmp"],[-1,1961," ^ sourceArray[right]"],[-1,2004,"right] = sourceArray["],[-1,2031,"^"],[1,2032,"="],[-1,2073,"lef"],[1,2076,"righ"],[-1,2081,"sourceArray[left] ^ sourceArray[right]"],[1,2119,"tmp"],[-1,2126,"\n}    "]],[1309,2132],[2111,2111]]],[1570416983066,["GJX@GJXAIOU",[[1,2112,"    \n"]],[2111,2111],[2116,2116]]],[1570416983217,["GJX@GJXAIOU",[[-1,2112,"    "],[1,2116,"\n"]],[2116,2116],[2113,2113]]],[1570416984067,["GJX@GJXAIOU",[[1,2113,"}"]],[2113,2113],[2114,2114]]],[1570416985642,["GJX@GJXAIOU",[[-1,2112,"\n"]],[2112,2112],[2111,2111]]],[1570416995236,["GJX@GJXAIOU",[[1,2112,"\n"]],[2111,2111],[2112,2112]]],[1570416996409,["GJX@GJXAIOU",[[-1,2113,"}"]],[2114,2114],[2113,2113]]],[1570416997203,["GJX@GJXAIOU",[[1,2112,"    "],[-1,2112,"\n"]],[2113,2113],[2116,2116]]],[1570416997892,["GJX@GJXAIOU",[[-1,2112,"    \n"]],[2116,2116],[2111,2111]]],[1570416998746,["GJX@GJXAIOU",[[-1,1309,"package sort.nowcoder;\n\n"],[1,1372,"Bubb"],[-1,1372,"Se"],[-1,1376,"ction"],[1,1412,"bubb"],[-1,1412,"se"],[-1,1416,"ction"],[1,1546,"// end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        "],[1,1555,"end"],[-1,1555,"start"],[-1,1563,"0; start < "],[1,1598,"end > 0; end--) {"],[-1,1598,"start++) {\n            int minIndex = start;\n            // 从 i + 1 位置到最后的最小的数下标"],[-1,1700,"cur = "],[1,1712,"= 0; start"],[-1,1712,"+ 1; cur"],[-1,1723,"sourceArray.l"],[1,1738,"d; start"],[-1,1738,"gth; cur"],[1,1768,"if ("],[-1,1768,"minIndex = "],[1,1791,"start] >"],[-1,1791,"cur] <"],[1,1810,"start + 1]) {"],[-1,1810,"minIndex] ? cur : minIndex;"],[-1,1846,"    }\n"],[1,1889,"start + 1"],[-1,1889,"minIndex"],[1,1899,"\n                }\n            }"],[1,1995,"sourceArray[left]"],[-1,1995,"int tmp"],[1,2022," ^ sourceArray[right]"],[1,2044,"right] = sourceArray["],[1,2050,"^"],[-1,2050,"="],[1,2092,"lef"],[-1,2092,"righ"],[1,2101,"sourceArray[left] ^ sourceArray[right]"],[-1,2101,"tmp"],[1,2111,"\n}    "]],[2111,2111],[1309,2132]]],[1570417007720,["GJX@GJXAIOU",[[1,2272,"package sort.nowcoder;\n\n"],[1,2327,"\n"],[-1,2493,"i"],[1,2494,"start"],[-1,2500,"i"],[1,2501,"start"],[-1,2528,"i"],[1,2529,"start"],[-1,2562,"i"],[1,2563,"start"],[-1,2580,"寻找"],[-1,2624,"j = i"],[1,2629,"cur = start"],[-1,2635,"j"],[1,2636,"cur"],[-1,2659,"j"],[1,2660,"cur"],[-1,2705,"j"],[1,2706,"cur"],[-1,2734,"j"],[1,2735,"cur"],[-1,2792,"i"],[1,2793,"start"],[-1,2900,"sourceArray[left]"],[1,2917," int tmp"],[-1,2937," ^ sourceArray[right]"],[-1,2967,"sourceArray[right] ="],[-1,3006,"^"],[1,3007,"="],[-1,3035,"sourceArray[left] = sourceArray[left] ^"],[1,3093," = tmp"],[-1,3100,"\n}    "]],[2272,3106],[3074,3074]]],[1570417009921,["GJX@GJXAIOU",[[1,3075,"    \n"]],[3074,3074],[3079,3079]]],[1570417010386,["GJX@GJXAIOU",[[1,3079,"}"]],[3079,3079],[3080,3080]]],[1570417012964,["GJX@GJXAIOU",[[-1,3075,"    "]],[3079,3079],[3075,3075]]],[1570417014555,["GJX@GJXAIOU",[[-1,3077,"\n"]],[3077,3077],[3076,3076]]],[1570417634185,["GJX@GJXAIOU",[[1,3083,"\n"]],[3080,3080],[3081,3081]]],[1570417634291,["GJX@GJXAIOU",[[1,3084,"\n"]],[3081,3081],[3082,3082]]],[1570417636063,["GJX@GJXAIOU",[[1,3082,"****"]],[3082,3082],[3084,3084]]],[1570417637466,["GJX@GJXAIOU",[[1,3084,"zhuy"]],[3084,3084],[3088,3088]]],[1570417638825,["GJX@GJXAIOU",[[-1,3084,"zhuy"]],[3088,3088],[3084,3084]]],[1570417640589,["GJX@GJXAIOU",[[1,3084,"注意："]],[3084,3084],[3087,3087]]],[1570417642113,["GJX@GJXAIOU",[[1,3092,"\n"]],[3089,3089],[3090,3090]]],[1570417651067,["GJX@GJXAIOU",[[1,3090,"上面的交换程序可以改为："]],[3090,3090],[3102,3102]]],[1570417651409,["GJX@GJXAIOU",[[1,3105,"\n"]],[3102,3102],[3103,3103]]],[1570417654364,["GJX@GJXAIOU",[[1,3103,"```java"]],[3103,3103],[3110,3110]]],[1570417654523,["GJX@GJXAIOU",[[1,3113,"\n"]],[3110,3110],[3111,3111]]],[1570417654632,["GJX@GJXAIOU",[[1,3114,"\n"]],[3111,3111],[3112,3112]]],[1570417654755,["GJX@GJXAIOU",[[1,3115,"\n"]],[3112,3112],[3113,3113]]],[1570417655514,["GJX@GJXAIOU",[[1,3113,"```"]],[3113,3113],[3116,3116]]],[1570417660196,["GJX@GJXAIOU",[[1,3111," public static void swap(int[] sourceArray, int left, int right) {\n        if (left == right){\n            return;\n        }\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }"]],[3111,3111],[3446,3446]]],[1570417664737,["GJX@GJXAIOU",[[-1,3447,"\n"]],[3447,3447],[3446,3446]]],[1570417723130,["GJX@GJXAIOU",[[1,3451,"如果之前minIndex没有改变过，则i与minIndex是相等的，在进行swap()的时候，`arr[i] = arr[i] ^ arr[j];`相当于对两个相同的数做异或运算，结果是0。swap函数出现错误。可以在swap函数加上`if(i==j)return;`来解决。\n\n作者：快乐的博格巴\n链接：https://juejin.im/post/5bbe062ce51d4567ad7bd748\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[3451,3451],[3692,3692]]],[1570417726001,["GJX@GJXAIOU",[[1,3451,"y "]],[3451,3451],[3452,3452]]],[1570417726431,["GJX@GJXAIOU",[[1,3452,"iwnei"]],[3452,3452],[3457,3457]]],[1570417727496,["GJX@GJXAIOU",[[-1,3451,"yiwnei"]],[3457,3457],[3451,3451]]],[1570417728950,["GJX@GJXAIOU",[[1,3451,"以为"]],[3451,3451],[3453,3453]]],[1570417732259,["GJX@GJXAIOU",[[-1,3451,"以为 如"]],[3455,3455],[3451,3451]]],[1570417736563,["GJX@GJXAIOU",[[1,3451,"因为如"]],[3451,3451],[3454,3454]]],[1570417740889,["GJX@GJXAIOU",[[-1,3472,"i"]],[3473,3473],[3472,3472]]],[1570417742924,["GJX@GJXAIOU",[[1,3472,"start"]],[3472,3472],[3477,3477]]],[1570417742958,["GJX@GJXAIOU",[[1,3472," "],[1,3477," "]],[3477,3477],[3478,3478]]],[1570417746305,["GJX@GJXAIOU",[[-1,3511,"i"]],[3512,3512],[3511,3511]]],[1570417747636,["GJX@GJXAIOU",[[1,3511,"left"]],[3511,3511],[3515,3515]]],[1570417750313,["GJX@GJXAIOU",[[-1,3523,"i"]],[3524,3524],[3523,3523]]],[1570417753667,["GJX@GJXAIOU",[[1,3523,"lsft"]],[3523,3523],[3527,3527]]],[1570417756952,["GJX@GJXAIOU",[[-1,3469,"过"]],[3470,3470],[3469,3469]]],[1570417757245,["GJX@GJXAIOU",[[1,3469,"e"]],[3469,3469],[3470,3470]]],[1570417757280,["GJX@GJXAIOU",[[1,3469," "]],[3470,3470],[3471,3471]]],[1570417761280,["GJX@GJXAIOU",[[-1,3469," e"]],[3471,3471],[3469,3469]]],[1570417763136,["GJX@GJXAIOU",[[-1,3523,"s"]],[3524,3524],[3523,3523]]],[1570417763498,["GJX@GJXAIOU",[[1,3523,"e"]],[3523,3523],[3524,3524]]],[1570417766161,["GJX@GJXAIOU",[[-1,3534,"j"]],[3535,3535],[3534,3534]]],[1570417767228,["GJX@GJXAIOU",[[1,3534,"right"]],[3534,3534],[3539,3539]]],[1570417771432,["GJX@GJXAIOU",[[-1,3589,"i"]],[3590,3590],[3589,3589]]],[1570417772642,["GJX@GJXAIOU",[[1,3589,"left"]],[3589,3589],[3593,3593]]],[1570417774873,["GJX@GJXAIOU",[[-1,3595,"j"]],[3596,3596],[3595,3595]]],[1570417776182,["GJX@GJXAIOU",[[1,3595,"right"]],[3595,3595],[3600,3600]]],[1570417844523,["GJX@GJXAIOU",[[1,3615,"\n"]],[3613,3613],[3614,3614]]],[1570417844657,["GJX@GJXAIOU",[[1,3616,"\n"]],[3614,3614],[3615,3615]]],[1570417845089,["GJX@GJXAIOU",[[1,3615,"交换数组中的两个数,一个数自己与自己异或结果为0；一个数与0异或，结果还是自己。"]],[3615,3615],[3655,3655]]],[1570417853027,["GJX@GJXAIOU",[[-1,3657,"作者：快乐的博格巴\n链接：https://juejin.im/post/5bbe062ce51d4567ad7bd748\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[3657,3758],[3657,3657]]],[1570418006809,["GJX@GJXAIOU",[[1,3888,"```java"]],[3888,3888],[3895,3895]]],[1570418006952,["GJX@GJXAIOU",[[1,3900,"\n"]],[3895,3895],[3896,3896]]],[1570418007100,["GJX@GJXAIOU",[[1,3901,"\n"]],[3896,3896],[3897,3897]]],[1570418007901,["GJX@GJXAIOU",[[1,3897,"```"]],[3897,3897],[3900,3900]]],[1570418010933,["GJX@GJXAIOU",[[1,3896,"import java.util.Arrays;\n\npublic class InsertionSort {\n\n    public static void insertionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int i = 1; i < sourceArray.length; i++) {\n            for (int j = i - 1; j >= 0 && sourceArray[j] > sourceArray[j + 1]; j--) {\n                swap(sourceArray, j, j + 1);\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }"]],[3896,3896],[4598,4598]]],[1570418013329,["GJX@GJXAIOU",[[1,4599,"    \n"]],[4598,4598],[4603,4603]]],[1570418014146,["GJX@GJXAIOU",[[1,4603,"}"]],[4603,4603],[4604,4604]]],[1570418016409,["GJX@GJXAIOU",[[-1,4599,"    "]],[4603,4603],[4599,4599]]],[1570418078695,["GJX@GJXAIOU",[[-1,4118,"i"],[1,4119,"end"],[-1,4125,"i"],[1,4126,"end"],[-1,4149,"i"],[1,4150,"end"],[-1,4177,"j = i"],[1,4182,"cur = end"],[-1,4188,"j"],[1,4189,"cur"],[-1,4210,"j"],[1,4211,"cur"],[-1,4227,"j"],[1,4228,"cur"],[-1,4235,"j"],[1,4236,"cur"],[-1,4276,"j, j"],[1,4280,"cur, cur"]],[3896,4598],[4620,4620]]],[1570418084992,["GJX@GJXAIOU",[[-1,4630,"\n"]],[4629,4629],[4628,4628]]],[1570418085428,["GJX@GJXAIOU",[[-1,4629,"\n"]],[4628,4628],[4627,4627]]],[1570418935984,["GJX@GJXAIOU",[[1,5443,"\n"]],[5442,5442],[5443,5443]]],[1570418936120,["GJX@GJXAIOU",[[1,5444,"\n"]],[5443,5443],[5444,5444]]],[1570418936248,["GJX@GJXAIOU",[[1,5445,"\n"]],[5444,5444],[5445,5445]]],[1570418938800,["GJX@GJXAIOU",[[-1,5445,"\n"]],[5444,5444],[5443,5443]]],[1570418938936,["GJX@GJXAIOU",[[-1,5444,"\n"]],[5443,5443],[5442,5442]]],[1570418942913,["GJX@GJXAIOU",[[1,5039,"\n"]],[5038,5038],[5039,5039]]],[1570418943041,["GJX@GJXAIOU",[[1,5040,"\n"]],[5039,5039],[5040,5040]]],[1570418944833,["GJX@GJXAIOU",[[1,5041,"\n"]],[5038,5038],[5039,5039]]],[1570418948866,["GJX@GJXAIOU",[[1,5039,"```java"]],[5039,5039],[5046,5046]]],[1570418949185,["GJX@GJXAIOU",[[1,5049,"\n"]],[5046,5046],[5047,5047]]],[1570418949768,["GJX@GJXAIOU",[[1,5050,"\n"]],[5047,5047],[5048,5048]]],[1570418950571,["GJX@GJXAIOU",[[1,5048,"111"]],[5048,5048],[5051,5051]]],[1570418951704,["GJX@GJXAIOU",[[-1,5048,"111"]],[5051,5051],[5048,5048]]],[1570418952545,["GJX@GJXAIOU",[[1,5048,"```"]],[5048,5048],[5051,5051]]],[1570418956663,["GJX@GJXAIOU",[[1,5047,"import java.util.Arrays;\n\npublic class MergeSort {\n\n\tpublic static void mergeSort(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tmergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static void mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\tmergeSort(sourceArray, left, mid);\n\t\tmergeSort(sourceArray, mid + 1, right);\n\t\tmerge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static void merge(int[] sourceArray, int left, int mid, int right) {\n\t\t// 准备一个和原数组等长的辅助数组；\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startLeft] < sourceArray[startRight] ? sourceArray[startLeft++] : sourceArray[startRight++];\n\t\t}\n\t\t// 两个必有一个越界，这两个 while 只会执行一个\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = sourceArray[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tsourceArray[left + i] = help[i];\n\t\t}\n\t}"]],[5047,5047],[6197,6197]]],[1570418960560,["GJX@GJXAIOU",[[1,6198,"\t\n"]],[6197,6197],[6199,6199]]],[1570418964234,["GJX@GJXAIOU",[[1,6198,"}"]],[6198,6198],[6199,6199]]],[1570419068978,["GJX@GJXAIOU",[[1,7453,"\n"]],[7451,7451],[7452,7452]]],[1570419071255,["GJX@GJXAIOU",[[1,7452,"···"]],[7452,7452],[7455,7455]]],[1570419073034,["GJX@GJXAIOU",[[-1,7452,"···"]],[7455,7455],[7452,7452]]],[1570419074186,["GJX@GJXAIOU",[[1,7452,"```"]],[7452,7452],[7455,7455]]],[1570419074227,["GJX@GJXAIOU",[[1,7455,"language\n```\n"]],[7455,7455],[7455,7463]]],[1570419075108,["GJX@GJXAIOU",[[-1,7455,"language"],[1,7463,"j"]],[7455,7463],[7456,7456]]],[1570419075523,["GJX@GJXAIOU",[[1,7456,"aca"]],[7456,7456],[7459,7459]]],[1570419076273,["GJX@GJXAIOU",[[-1,7457,"ca"]],[7459,7459],[7457,7457]]],[1570419076442,["GJX@GJXAIOU",[[1,7457,"va"]],[7457,7457],[7459,7459]]],[1570419076824,["GJX@GJXAIOU",[[1,7460,"\n"]],[7459,7459],[7460,7460]]],[1570419076951,["GJX@GJXAIOU",[[1,7461,"\n"]],[7460,7460],[7461,7461]]],[1570419258635,["GJX@GJXAIOU",[[1,7460,"public class SmallSum {\n\n\tpublic static int smallSum(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn mergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static int mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn 0;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\treturn mergeSort(sourceArray, left, mid) + mergeSort(sourceArray, mid + 1, right) + merge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static int merge(int[] arr, int left, int mid, int right) {\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\tint res = 0;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\tres += arr[startLeft] < arr[startRight] ? (right - startRight + 1) * arr[startLeft] : 0;\n\t\t\thelp[i++] = arr[startLeft] < arr[startRight] ? arr[startLeft++] : arr[startRight++];\n\t\t}\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = arr[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = arr[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tarr[left + i] = help[i];\n\t\t}\n\t\treturn res;\n\t}\n"]],[7460,7460],[8600,8600]]],[1570419262308,["GJX@GJXAIOU",[[1,8601,"}"]],[8601,8601],[8602,8602]]],[1570455765904,["GJX@GJXAIOU",[[-1,8659,"\n"]],[8660,8660],[8659,8659]]]],null,"GJX@GJXAIOU"],["c715878e-01f7-455f-ae39-7ffcc039d867",1570677619632,"---\ntags: [时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归]\nnote: 文章主要包含 时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归 的内容；\n---\n\n# AlgorithmEasyDay01\n\n## 一、时间复杂度和空间复杂度\n\n### （一）时间复杂度\n\n- 常数时间的操作：一个操作和样本数据量没有关系，每次都是在固定的时间内完成，叫做常数操作；\n- 操作数量表达式中，只要高阶项，不要低阶项，去掉高阶项的系数，比较先比较次幂，然后比较系数以及其他项；\n-  可以将 O(1) 看做每一次操作的时间；\n\n**以一个示例比较：**（示例一）\n\n一个有序数组A，另一个无序数组B，请打印B中的所有不在A中的数，A数\n组长度为N，B数组长度为M。\n\n- **算法流程1**：对于数组B中的每一个数，都在A中通过遍历的方式找一下；\n相当于：B 中每一个数都要在 A 中遍历一遍，则需要操作 N 遍，而 B 中 M 个数都需要按照上面操作一遍，共操作 M * N 遍，因此时间复杂度为：$O(M * N)$；\n- **算法流程2**：对于数组B中的每一个数，都在A中通过二分的方式找一下；\n因为 A 中数组是有序的，因此可以进行二分查找，因此整体时间复杂度为：$O(M * \\log_{2}^{N})$；\n- **算法流程3**：先把数组B排序，然后用类似外排的方式打印所有不在A中出现的数；\n因为可以是会用快速排序对数组 B 进行排序，因此时间复杂度为：$M * \\log_{2}^{M}$，**外排思想：** 数组 A 开头放置下标 a，数组 B 开头放置下标 b，比较两个下标指向的值，如果 b <= a  指向的值，则 b 向右移动，否则 a 向右移动，其中若 b 指向的值  < a 指向的值，则 b 向右移动同时打印 b 指向的数，若等于则向右移动不打印；\n因此整体外排时间复杂度最差为 $O(M + N)$，因此整个流程时间复杂度为：$O(M * log_{2}^{M}) + O(M + N)$\n\n**总结：** 流程一：$O(M * N)$，流程二：$O(M * \\log_{2}^{N})$，流程三：$O(M * log_{2}^{M}) + O(M + N)$；当 A 数组较短的时候，流程二较好，当 B 数组较短的时候，流程三较好（因为流程三需要对 B 进行排序）；\n\n\n二分查找： **二分查找前提是该数组必须有序**，每次进行查找都是将数组划分一半，N 样本的数组一共可以划分 $\\log_{2}^{N}$次，因此时间复杂度为$O(\\log_{2}^{N})$\n\n### （二）空间复杂度\n就是在操作的过程中需要的**额外的空间**，如果仅仅需要有限个变量：$O(1)$，如果**需要原来数组的长度或者和样本数有关**，则为：$O(N)$；\n\n\n## 二、排序算法\n\n### （一）冒泡排序\n两两比较，将较大的一个一个向上冒，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\nimport java.util.Arrays;\n\npublic class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n                }\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}    \n```\n\n\n\n### （二）选择排序\n首先从 0 ~ N-1 上选择最小的数和 0 位置上互换，然后才能够 1 ~ N-1 上选择最小的数和 1 位置上互换.....，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\npackage sort.nowcoder;\n\nimport java.util.Arrays;\n\npublic class SelectionSort {\n\n    public static void selectionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int start = 0; start < sourceArray.length - 1; start++) {\n            int minIndex = start;\n            // 从 i + 1 位置到最后的最小的数下标\n            for (int cur = start + 1; cur < sourceArray.length; cur++) {\n                minIndex = sourceArray[cur] < sourceArray[minIndex] ? cur : minIndex;\n            }\n            swap(sourceArray, start, minIndex);\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        int tmp = sourceArray[left];\n        sourceArray[left] = sourceArray[right];\n        sourceArray[right] = tmp;\n    }\n}\n```\n\n**注意：**\n上面的交换程序可以改为：\n```java\n public static void swap(int[] sourceArray, int left, int right) {\n        if (left == right){\n            return;\n        }\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n```\n因为如果之前minIndex没有改变，则 start 与minIndex是相等的，在进行swap()的时候，`arr[left] = arr[left] ^ arr[right];`相当于对两个相同的数做异或运算，结果是0。swap函数出现错误。可以在swap函数加上`if(left==right)return;`来解决。\n\n交换数组中的两个数,一个数自己与自己异或结果为0；一个数与0异或，结果还是自己。\n\n\n\n### （三）插入排序\n首先默认第一个数（0）是排好序的，然后拿第二个数和第一个数比较，如果比第一个数小，就互换，反之不动，这样 0~1 位置上是排好序的；然后拿第三个数和第二个数比较，比他小就互换，如果更换之后再次和第一个数比较，看是否需要互换，最终 0~2 位置上是排好序的.......\n\n最好的情况是原来就有序：$O(N)$，最差的情况是原来就是倒序的：$O(N^{2})$；因此最终的时间复杂度为：$O(N^{2})$，空间复杂度：$O(1)$；\n```java\nimport java.util.Arrays;\n\npublic class InsertionSort {\n\n    public static void insertionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int end = 1; end < sourceArray.length; end++) {\n            for (int cur = end - 1; cur >= 0 && sourceArray[cur] > sourceArray[cur + 1]; cur--) {\n                swap(sourceArray, cur, cur + 1);\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}\n```\n\n\n## 三、对数器\n\n- 首先有一个你想要验证是否正确的方法 A；\n- 其次需要一个已知绝对正确但是可能时间复杂度不好的方法 B；（也可以不完全正确）\n- 实现一个随机样本产生器；\n- 实现两个方法 A 和 B 对比的方法；\n- 将方法 A 和方法 B 通过很多次验证来判断 A 是否正确；\n- 如果某一个样本输出两个方法的结果不一致，可以打印出该样本，然后根据该样本分析是哪个方法出错了；\n- 当进行大量样本量对比之后测试仍然正确，可以确认方法 A 是正确的；\n\n\n\n## 四、递归（Recursion）\n==递归就是自己调自己==\n==任何递归都可以改为非递归==\n递归函数本质上就是系统在帮我们压栈，如果改为自己压栈就可以改为非递归；\n\n**下面以一个示例解释递归过程：**\n\n\n\n\n\n### 归并排序\n流程：首先将数组对半分为两个部分，然后分别对左右两边进行排序；最后对整体进行外排；\n重点关注：最后整体的外排\n\n```java\nimport java.util.Arrays;\n\npublic class MergeSort {\n\n\tpublic static void mergeSort(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tmergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static void mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\tmergeSort(sourceArray, left, mid);\n\t\tmergeSort(sourceArray, mid + 1, right);\n\t\tmerge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static void merge(int[] sourceArray, int left, int mid, int right) {\n\t\t// 准备一个和原数组等长的辅助数组；\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startLeft] < sourceArray[startRight] ? sourceArray[startLeft++] : sourceArray[startRight++];\n\t\t}\n\t\t// 两个必有一个越界，这两个 while 只会执行一个\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = sourceArray[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tsourceArray[left + i] = help[i];\n\t\t}\n\t}\n}\t\n```\n\n\n**示例：** 原来数组元素为：3，6, 4，5, 2, 8；首先划分为：Left:[3,6,4]和 right:[5,2,8]；然后将他们分别排序为：Left:[3,4,6] 和 Right:[2,5,8]，然后左右各取指针 a,b，同时准备一个辅助数组，长度和原数组长度相同；然后比较 a,b 指向元素的大小，哪一个小哪一个就放进数组，同时下标 + 1，然后再次比较，直到某一方全部放入数组，则另一方剩余的全部放入数组，最后将该数组拷贝回原来数组；\n因为一共 N 的样本，分为两个一样的部分，每部分的时间复杂度为 ：$T(\\frac{\\mathrm{N}}{2})$，每一部分进行比较等操作为：$O(N)$，因此时间复杂度为：$T(N) = 2* T({\\frac{N}{2}}) + O(N)$，根据 master 公式结果为：$O(N * \\log_{2}^{N})$ \n空间复杂度：$O(N)$\n\n\n**master 公式**\n一般的时间复杂度公式可以表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，其中 N 表示整个过程的样本量，$\\frac{N}{b}$表示划分之后子过程的样本量，a 表示子过程共发生多少次，后面的：$O({N}^{d}))$ 表示除了子过程之外其它操作的时间复杂度；**这里的子过程只是划分一次之后的数量。** 划分的子问题应该规模相同；\n如果一个过程的时间复杂度表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，则可以根据 master 公式化为以下结果：\n- $\\log_{b}^{a} > d$ ：复杂度为：$O({N}^{log{b}^{a}})$；\n- $\\log_{b}^{a} = d$ ：复杂度为：$O({N}^{d} *{\\log{2}^{N}})$；\n- $\\log_{b}^{a} < d$ ：复杂度为：$O({N}^{d})$；\n\n\n### 示例\n\n**小和问题：**\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n```java\n[1,3,4,2,5]\n1左边比1小的数，没有；\n3左边比3小的数，1；\n4左边比4小的数，1、3；\n2左边比2小的数，1；\n5左边比5小的数，1、3、4、2；\n所以小和为1+1+3+1+1+3+4+2=16\n```\n\n**求解：**\n将该数组不断的切分[1,3,4][2,5]，然后再次切分：[1,3][4][2][5],最后切分为：[1][3][4][2][5];\n这里以 1 为例，[1][3]中有一个 1（即 3 的左边有一个 1 比他小），然后[1,3]和[4]，有一个 1（即 4 左边有一个 1 比他小），然后 [1,3,4]和 [2,5]，有两个 1（即 2 和 5 左边有一个 1 比它小），最终以 1 为例的小和为：1 + 1 + 2*1 = 4;其他类似；\n\n```java\npublic class SmallSum {\n\n\tpublic static int smallSum(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn mergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static int mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn 0;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\treturn mergeSort(sourceArray, left, mid) + mergeSort(sourceArray, mid + 1, right) + merge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static int merge(int[] arr, int left, int mid, int right) {\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\tint res = 0;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\tres += arr[startLeft] < arr[startRight] ? (right - startRight + 1) * arr[startLeft] : 0;\n\t\t\thelp[i++] = arr[startLeft] < arr[startRight] ? arr[startLeft++] : arr[startRight++];\n\t\t}\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = arr[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = arr[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tarr[left + i] = help[i];\n\t\t}\n\t\treturn res;\n\t}\n\n}\n```\n\n\n**逆序对问题**\n在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序对。\n\n\n\n\n",[[1570677614157,["GJX@GJXAIOU",[[1,1123,"\n"]],[1122,1122],[1123,1123]]],[1570677614418,["GJX@GJXAIOU",[[1,1124,"\n"]],[1123,1123],[1124,1124]]],[1570677614705,["GJX@GJXAIOU",[[1,1125,"\n"]],[1124,1124],[1125,1125]]],[1570677615033,["GJX@GJXAIOU",[[1,1126,"\n"]],[1125,1125],[1126,1126]]],[1570677615258,["GJX@GJXAIOU",[[1,1127,"\n"]],[1126,1126],[1127,1127]]],[1570677615503,["GJX@GJXAIOU",[[1,1128,"\n"]],[1127,1127],[1128,1128]]],[1570677615781,["GJX@GJXAIOU",[[1,1129,"\n"]],[1128,1128],[1129,1129]]],[1570677664454,["GJX@GJXAIOU",[[1,1123,"```ksva"]],[1123,1123],[1130,1130]]],[1570677665290,["GJX@GJXAIOU",[[-1,1126,"ksva"]],[1130,1130],[1126,1126]]],[1570677666388,["GJX@GJXAIOU",[[1,1126,"kava"]],[1126,1126],[1130,1130]]],[1570677666515,["GJX@GJXAIOU",[[1,1137,"\n"]],[1130,1130],[1131,1131]]],[1570677667846,["GJX@GJXAIOU",[[1,1138,"\n"]],[1131,1131],[1132,1132]]],[1570677669263,["GJX@GJXAIOU",[[1,1132,"```"]],[1132,1132],[1135,1135]]],[1570677671371,["GJX@GJXAIOU",[[-1,1126,"k"]],[1127,1127],[1126,1126]]],[1570677671787,["GJX@GJXAIOU",[[1,1126,"j"]],[1126,1126],[1127,1127]]],[1570677678707,["GJX@GJXAIOU",[[1,1131,"package sort.nowcoder.easy.day01;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class GetAllNotIncluded {\n\n\tpublic static List<Integer> GetAllNotIncluded(int[] A, int[] B) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tfor (int i = 0; i < B.length; i++) {\n\t\t\tint l = 0;\n\t\t\tint r = A.length - 1;\n\t\t\tboolean contains = false;\n\t\t\twhile (l <= r) {\n\t\t\t\tint mid = l + ((r - l) >> 1);\n\t\t\t\tif (A[mid] == B[i]) {\n\t\t\t\t\tcontains = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (A[mid] > B[i]) {\n\t\t\t\t\tr = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tl = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contains) {\n\t\t\t\tres.add(B[i]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}"]],[1131,1131],[1789,1789]]],[1570753278688,["GJX@GJXAIOU",[[-1,2833,"0"]],[2834,2834],[2833,2833]]],[1570753279610,["GJX@GJXAIOU",[[1,2833,"1"]],[2833,2833],[2834,2834]]],[1570753282170,["GJX@GJXAIOU",[[-1,2864,"1"]],[2865,2865],[2864,2864]]],[1570753283317,["GJX@GJXAIOU",[[1,2864,"2"]],[2864,2864],[2865,2865]]]],null,"GJX@GJXAIOU"],["f08bc2c9-fad3-4fd6-a646-5c98b42046de",1571964366193,"---\ntags: [时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归]\nnote: 文章主要包含 时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归 的内容；\n---\n\n# AlgorithmEasyDay01\n\n## 一、时间复杂度和空间复杂度\n\n### （一）时间复杂度\n\n- 常数时间的操作：一个操作和样本数据量没有关系，每次都是在固定的时间内完成，叫做常数操作；\n- 操作数量表达式中，只要高阶项，不要低阶项，去掉高阶项的系数，比较先比较次幂，然后比较系数以及其他项；\n-  可以将 O(1) 看做每一次操作的时间；\n\n**以一个示例比较：**（示例一）\n\n一个有序数组A，另一个无序数组B，请打印B中的所有不在A中的数，A数\n组长度为N，B数组长度为M。\n\n- **算法流程1**：对于数组B中的每一个数，都在A中通过遍历的方式找一下；\n相当于：B 中每一个数都要在 A 中遍历一遍，则需要操作 N 遍，而 B 中 M 个数都需要按照上面操作一遍，共操作 M * N 遍，因此时间复杂度为：$O(M * N)$；\n- **算法流程2**：对于数组B中的每一个数，都在A中通过二分的方式找一下；\n因为 A 中数组是有序的，因此可以进行二分查找，因此整体时间复杂度为：$O(M * \\log_{2}^{N})$；\n- **算法流程3**：先把数组B排序，然后用类似外排的方式打印所有不在A中出现的数；\n因为可以是会用快速排序对数组 B 进行排序，因此时间复杂度为：$M * \\log_{2}^{M}$，**外排思想：** 数组 A 开头放置下标 a，数组 B 开头放置下标 b，比较两个下标指向的值，如果 b <= a  指向的值，则 b 向右移动，否则 a 向右移动，其中若 b 指向的值  < a 指向的值，则 b 向右移动同时打印 b 指向的数，若等于则向右移动不打印；\n因此整体外排时间复杂度最差为 $O(M + N)$，因此整个流程时间复杂度为：$O(M * log_{2}^{M}) + O(M + N)$\n\n**总结：** 流程一：$O(M * N)$，流程二：$O(M * \\log_{2}^{N})$，流程三：$O(M * log_{2}^{M}) + O(M + N)$；当 A 数组较短的时候，流程二较好，当 B 数组较短的时候，流程三较好（因为流程三需要对 B 进行排序）；\n\n\n二分查找： **二分查找前提是该数组必须有序**，每次进行查找都是将数组划分一半，N 样本的数组一共可以划分 $\\log_{2}^{N}$次，因此时间复杂度为$O(\\log_{2}^{N})$\n\n```java\npackage sort.nowcoder.easy.day01;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class GetAllNotIncluded {\n\n\tpublic static List<Integer> GetAllNotIncluded(int[] A, int[] B) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tfor (int i = 0; i < B.length; i++) {\n\t\t\tint l = 0;\n\t\t\tint r = A.length - 1;\n\t\t\tboolean contains = false;\n\t\t\twhile (l <= r) {\n\t\t\t\tint mid = l + ((r - l) >> 1);\n\t\t\t\tif (A[mid] == B[i]) {\n\t\t\t\t\tcontains = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (A[mid] > B[i]) {\n\t\t\t\t\tr = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tl = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contains) {\n\t\t\t\tres.add(B[i]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n```\n\n\n\n\n\n\n### （二）空间复杂度\n就是在操作的过程中需要的**额外的空间**，如果仅仅需要有限个变量：$O(1)$，如果**需要原来数组的长度或者和样本数有关**，则为：$O(N)$；\n\n\n## 二、排序算法\n\n### （一）冒泡排序\n两两比较，将较大的一个一个向上冒，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\nimport java.util.Arrays;\n\npublic class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n                }\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}    \n```\n\n\n\n### （二）选择排序\n首先从 1 ~ N-1 上选择最小的数和 0 位置上互换，然后才能够 2 ~ N-1 上选择最小的数和 1 位置上互换.....，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\npackage sort.nowcoder;\n\nimport java.util.Arrays;\n\npublic class SelectionSort {\n\n    public static void selectionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int start = 0; start < sourceArray.length - 1; start++) {\n            int minIndex = start;\n            // 从 i + 1 位置到最后的最小的数下标\n            for (int cur = start + 1; cur < sourceArray.length; cur++) {\n                minIndex = sourceArray[cur] < sourceArray[minIndex] ? cur : minIndex;\n            }\n            swap(sourceArray, start, minIndex);\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        int tmp = sourceArray[left];\n        sourceArray[left] = sourceArray[right];\n        sourceArray[right] = tmp;\n    }\n}\n```\n\n**注意：**\n上面的交换程序可以改为：\n```java\n public static void swap(int[] sourceArray, int left, int right) {\n        if (left == right){\n            return;\n        }\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n```\n因为如果之前minIndex没有改变，则 start 与minIndex是相等的，在进行swap()的时候，`arr[left] = arr[left] ^ arr[right];`相当于对两个相同的数做异或运算，结果是0。swap函数出现错误。可以在swap函数加上`if(left==right)return;`来解决。\n\n交换数组中的两个数,一个数自己与自己异或结果为0；一个数与0异或，结果还是自己。\n\n\n\n### （三）插入排序\n首先默认第一个数（0）是排好序的，然后拿第二个数和第一个数比较，如果比第一个数小，就互换，反之不动，这样 0~1 位置上是排好序的；然后拿第三个数和第二个数比较，比他小就互换，如果更换之后再次和第一个数比较，看是否需要互换，最终 0~2 位置上是排好序的.......\n\n最好的情况是原来就有序：$O(N)$，最差的情况是原来就是倒序的：$O(N^{2})$；因此最终的时间复杂度为：$O(N^{2})$，空间复杂度：$O(1)$；\n```java\nimport java.util.Arrays;\n\npublic class InsertionSort {\n\n    public static void insertionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int end = 1; end < sourceArray.length; end++) {\n            for (int cur = end - 1; cur >= 0 && sourceArray[cur] > sourceArray[cur + 1]; cur--) {\n                swap(sourceArray, cur, cur + 1);\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}\n```\n\n\n## 三、对数器\n\n- 首先有一个你想要验证是否正确的方法 A；\n- 其次需要一个已知绝对正确但是可能时间复杂度不好的方法 B；（也可以不完全正确）\n- 实现一个随机样本产生器；\n- 实现两个方法 A 和 B 对比的方法；\n- 将方法 A 和方法 B 通过很多次验证来判断 A 是否正确；\n- 如果某一个样本输出两个方法的结果不一致，可以打印出该样本，然后根据该样本分析是哪个方法出错了；\n- 当进行大量样本量对比之后测试仍然正确，可以确认方法 A 是正确的；\n\n\n\n## 四、递归（Recursion）\n==递归就是自己调自己==\n==任何递归都可以改为非递归==\n递归函数本质上就是系统在帮我们压栈，如果改为自己压栈就可以改为非递归；\n\n**下面以一个示例解释递归过程：**\n\n\n\n\n\n### 归并排序\n流程：首先将数组对半分为两个部分，然后分别对左右两边进行排序；最后对整体进行外排；\n重点关注：最后整体的外排\n\n```java\nimport java.util.Arrays;\n\npublic class MergeSort {\n\n\tpublic static void mergeSort(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tmergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static void mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\tmergeSort(sourceArray, left, mid);\n\t\tmergeSort(sourceArray, mid + 1, right);\n\t\tmerge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static void merge(int[] sourceArray, int left, int mid, int right) {\n\t\t// 准备一个和原数组等长的辅助数组；\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startLeft] < sourceArray[startRight] ? sourceArray[startLeft++] : sourceArray[startRight++];\n\t\t}\n\t\t// 两个必有一个越界，这两个 while 只会执行一个\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = sourceArray[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tsourceArray[left + i] = help[i];\n\t\t}\n\t}\n}\t\n```\n\n\n**示例：** 原来数组元素为：3，6, 4，5, 2, 8；首先划分为：Left:[3,6,4]和 right:[5,2,8]；然后将他们分别排序为：Left:[3,4,6] 和 Right:[2,5,8]，然后左右各取指针 a,b，同时准备一个辅助数组，长度和原数组长度相同；然后比较 a,b 指向元素的大小，哪一个小哪一个就放进数组，同时下标 + 1，然后再次比较，直到某一方全部放入数组，则另一方剩余的全部放入数组，最后将该数组拷贝回原来数组；\n因为一共 N 的样本，分为两个一样的部分，每部分的时间复杂度为 ：$T(\\frac{\\mathrm{N}}{2})$，每一部分进行比较等操作为：$O(N)$，因此时间复杂度为：$T(N) = 2* T({\\frac{N}{2}}) + O(N)$，根据 master 公式结果为：$O(N * \\log_{2}^{N})$ \n空间复杂度：$O(N)$\n\n\n**master 公式**\n一般的时间复杂度公式可以表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，其中 N 表示整个过程的样本量，$\\frac{N}{b}$表示划分之后子过程的样本量，a 表示子过程共发生多少次，后面的：$O({N}^{d}))$ 表示除了子过程之外其它操作的时间复杂度；**这里的子过程只是划分一次之后的数量。** 划分的子问题应该规模相同；\n如果一个过程的时间复杂度表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，则可以根据 master 公式化为以下结果：\n- $\\log_{b}^{a} > d$ ：复杂度为：$O({N}^{log{b}^{a}})$；\n- $\\log_{b}^{a} = d$ ：复杂度为：$O({N}^{d} *{\\log{2}^{N}})$；\n- $\\log_{b}^{a} < d$ ：复杂度为：$O({N}^{d})$；\n\n\n### 示例\n\n**小和问题：**\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n```java\n[1,3,4,2,5]\n1左边比1小的数，没有；\n3左边比3小的数，1；\n4左边比4小的数，1、3；\n2左边比2小的数，1；\n5左边比5小的数，1、3、4、2；\n所以小和为1+1+3+1+1+3+4+2=16\n```\n\n**求解：**\n将该数组不断的切分[1,3,4][2,5]，然后再次切分：[1,3][4][2][5],最后切分为：[1][3][4][2][5];\n这里以 1 为例，[1][3]中有一个 1（即 3 的左边有一个 1 比他小），然后[1,3]和[4]，有一个 1（即 4 左边有一个 1 比他小），然后 [1,3,4]和 [2,5]，有两个 1（即 2 和 5 左边有一个 1 比它小），最终以 1 为例的小和为：1 + 1 + 2*1 = 4;其他类似；\n\n```java\npublic class SmallSum {\n\n\tpublic static int smallSum(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn mergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static int mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn 0;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\treturn mergeSort(sourceArray, left, mid) + mergeSort(sourceArray, mid + 1, right) + merge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static int merge(int[] arr, int left, int mid, int right) {\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\tint res = 0;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\tres += arr[startLeft] < arr[startRight] ? (right - startRight + 1) * arr[startLeft] : 0;\n\t\t\thelp[i++] = arr[startLeft] < arr[startRight] ? arr[startLeft++] : arr[startRight++];\n\t\t}\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = arr[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = arr[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tarr[left + i] = help[i];\n\t\t}\n\t\treturn res;\n\t}\n\n}\n```\n\n\n**逆序对问题**\n在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序对。\n\n\n\n\n",[[1571964347652,["GJX@GJXAIOU",[[1,100,"\n"]],[99,99],[100,100]]],[1571964354402,["GJX@GJXAIOU",[[1,100,"style: asu"]],[100,100],[110,110]]],[1571964356679,["GJX@GJXAIOU",[[-1,107,"asu"]],[110,110],[107,107]]],[1571964357760,["GJX@GJXAIOU",[[1,107,"aumm"]],[107,107],[111,111]]],[1571964359100,["GJX@GJXAIOU",[[-1,107,"aumm"]],[111,111],[107,107]]],[1571964360336,["GJX@GJXAIOU",[[1,107,"summwe"]],[107,107],[113,113]]],[1571964361233,["GJX@GJXAIOU",[[-1,111,"we"]],[113,113],[111,111]]],[1571964362799,["GJX@GJXAIOU",[[1,111,"er"]],[111,111],[113,113]]]],null,"GJX@GJXAIOU"],["58766c91-64d8-418e-890a-7ffc64d0097b",1573519070954,"---\ntags: [时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归]\nnote: 文章主要包含 时间复杂度，空间复杂度，冒泡排序，选择排序，插入排序，二分查找，递归 的内容；\nstyle: summer\n---\n\n# AlgorithmEasyDay01\n\n## 一、时间复杂度和空间复杂度\n\n### （一）时间复杂度\n\n- 常数时间的操作：一个操作和样本数据量没有关系，每次都是在固定的时间内完成，叫做常数操作；\n- 操作数量表达式中，只要高阶项，不要低阶项，去掉高阶项的系数，比较先比较次幂，然后比较系数以及其他项；\n-  可以将 O(1) 看做每一次操作的时间；\n\n**以一个示例比较：**（示例一）\n\n一个有序数组A，另一个无序数组B，请打印B中的所有不在A中的数，A数\n组长度为N，B数组长度为M。\n\n- **算法流程1**：对于数组B中的每一个数，都在A中通过遍历的方式找一下；\n相当于：B 中每一个数都要在 A 中遍历一遍，则需要操作 N 遍，而 B 中 M 个数都需要按照上面操作一遍，共操作 M * N 遍，因此时间复杂度为：$O(M * N)$；\n- **算法流程2**：对于数组B中的每一个数，都在A中通过二分的方式找一下；\n因为 A 中数组是有序的，因此可以进行二分查找，因此整体时间复杂度为：$O(M * \\log_{2}^{N})$；\n- **算法流程3**：先把数组B排序，然后用类似外排的方式打印所有不在A中出现的数；\n因为可以是会用快速排序对数组 B 进行排序，因此时间复杂度为：$M * \\log_{2}^{M}$，**外排思想：** 数组 A 开头放置下标 a，数组 B 开头放置下标 b，比较两个下标指向的值，如果 b <= a  指向的值，则 b 向右移动，否则 a 向右移动，其中若 b 指向的值  < a 指向的值，则 b 向右移动同时打印 b 指向的数，若等于则向右移动不打印；\n因此整体外排时间复杂度最差为 $O(M + N)$，因此整个流程时间复杂度为：$O(M * log_{2}^{M}) + O(M + N)$\n\n**总结：** 流程一：$O(M * N)$，流程二：$O(M * \\log_{2}^{N})$，流程三：$O(M * log_{2}^{M}) + O(M + N)$；当 A 数组较短的时候，流程二较好，当 B 数组较短的时候，流程三较好（因为流程三需要对 B 进行排序）；\n\n\n二分查找： **二分查找前提是该数组必须有序**，每次进行查找都是将数组划分一半，N 样本的数组一共可以划分 $\\log_{2}^{N}$次，因此时间复杂度为$O(\\log_{2}^{N})$\n\n```java\npackage sort.nowcoder.easy.day01;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class GetAllNotIncluded {\n\n\tpublic static List<Integer> GetAllNotIncluded(int[] A, int[] B) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tfor (int i = 0; i < B.length; i++) {\n\t\t\tint l = 0;\n\t\t\tint r = A.length - 1;\n\t\t\tboolean contains = false;\n\t\t\twhile (l <= r) {\n\t\t\t\tint mid = l + ((r - l) >> 1);\n\t\t\t\tif (A[mid] == B[i]) {\n\t\t\t\t\tcontains = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (A[mid] > B[i]) {\n\t\t\t\t\tr = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tl = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contains) {\n\t\t\t\tres.add(B[i]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n```\n\n\n\n\n\n\n### （二）空间复杂度\n就是在操作的过程中需要的**额外的空间**，如果仅仅需要有限个变量：$O(1)$，如果**需要原来数组的长度或者和样本数有关**，则为：$O(N)$；\n\n\n## 二、排序算法\n\n### （一）冒泡排序\n两两比较，将较大的一个一个向上冒，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\nimport java.util.Arrays;\n\npublic class BubbleSort {\n\n    public static void bubbleSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        // end 刚开始在 length-1,但是得大于零，每排完一圈减一\n        for (int end = sourceArray.length - 1; end > 0; end--) {\n            for (int start = 0; start < end; start++) {\n                if (sourceArray[start] > sourceArray[start + 1]) {\n                    swap(sourceArray, start, start + 1);\n                }\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}    \n```\n\n\n\n### （二）选择排序\n首先从 1 ~ N-1 上选择最小的数和 0 位置上互换，然后才能够 2 ~ N-1 上选择最小的数和 1 位置上互换.....，**每次只能排好一个数**；\n\n时间复杂度：$O(N^{2})$\n空间复杂度：$O(1)$\n\n```java\npackage sort.nowcoder;\n\nimport java.util.Arrays;\n\npublic class SelectionSort {\n\n    public static void selectionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int start = 0; start < sourceArray.length - 1; start++) {\n            int minIndex = start;\n            // 从 i + 1 位置到最后的最小的数下标\n            for (int cur = start + 1; cur < sourceArray.length; cur++) {\n                minIndex = sourceArray[cur] < sourceArray[minIndex] ? cur : minIndex;\n            }\n            swap(sourceArray, start, minIndex);\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        int tmp = sourceArray[left];\n        sourceArray[left] = sourceArray[right];\n        sourceArray[right] = tmp;\n    }\n}\n```\n\n**注意：**\n上面的交换程序可以改为：\n```java\n public static void swap(int[] sourceArray, int left, int right) {\n        if (left == right){\n            return;\n        }\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n```\n因为如果之前minIndex没有改变，则 start 与minIndex是相等的，在进行swap()的时候，`arr[left] = arr[left] ^ arr[right];`相当于对两个相同的数做异或运算，结果是0。swap函数出现错误。可以在swap函数加上`if(left==right)return;`来解决。\n\n交换数组中的两个数,一个数自己与自己异或结果为0；一个数与0异或，结果还是自己。\n\n\n\n### （三）插入排序\n首先默认第一个数（0）是排好序的，然后拿第二个数和第一个数比较，如果比第一个数小，就互换，反之不动，这样 0~1 位置上是排好序的；然后拿第三个数和第二个数比较，比他小就互换，如果更换之后再次和第一个数比较，看是否需要互换，最终 0~2 位置上是排好序的.......\n\n最好的情况是原来就有序：$O(N)$，最差的情况是原来就是倒序的：$O(N^{2})$；因此最终的时间复杂度为：$O(N^{2})$，空间复杂度：$O(1)$；\n```java\nimport java.util.Arrays;\n\npublic class InsertionSort {\n\n    public static void insertionSort(int[] sourceArray) {\n        if (sourceArray == null || sourceArray.length < 2) {\n            return;\n        }\n        for (int end = 1; end < sourceArray.length; end++) {\n            for (int cur = end - 1; cur >= 0 && sourceArray[cur] > sourceArray[cur + 1]; cur--) {\n                swap(sourceArray, cur, cur + 1);\n            }\n        }\n    }\n\n    public static void swap(int[] sourceArray, int left, int right) {\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[right] = sourceArray[left] ^ sourceArray[right];\n        sourceArray[left] = sourceArray[left] ^ sourceArray[right];\n    }\n}\n```\n\n\n## 三、对数器\n\n- 首先有一个你想要验证是否正确的方法 A；\n- 其次需要一个已知绝对正确但是可能时间复杂度不好的方法 B；（也可以不完全正确）\n- 实现一个随机样本产生器；\n- 实现两个方法 A 和 B 对比的方法；\n- 将方法 A 和方法 B 通过很多次验证来判断 A 是否正确；\n- 如果某一个样本输出两个方法的结果不一致，可以打印出该样本，然后根据该样本分析是哪个方法出错了；\n- 当进行大量样本量对比之后测试仍然正确，可以确认方法 A 是正确的；\n\n\n\n## 四、递归（Recursion）\n==递归就是自己调自己==\n==任何递归都可以改为非递归==\n递归函数本质上就是系统在帮我们压栈，如果改为自己压栈就可以改为非递归；\n\n**下面以一个示例解释递归过程：**\n\n\n\n\n\n### 归并排序\n流程：首先将数组对半分为两个部分，然后分别对左右两边进行排序；最后对整体进行外排；\n重点关注：最后整体的外排\n\n```java\nimport java.util.Arrays;\n\npublic class MergeSort {\n\n\tpublic static void mergeSort(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tmergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static void mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\tmergeSort(sourceArray, left, mid);\n\t\tmergeSort(sourceArray, mid + 1, right);\n\t\tmerge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static void merge(int[] sourceArray, int left, int mid, int right) {\n\t\t// 准备一个和原数组等长的辅助数组；\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startLeft] < sourceArray[startRight] ? sourceArray[startLeft++] : sourceArray[startRight++];\n\t\t}\n\t\t// 两个必有一个越界，这两个 while 只会执行一个\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = sourceArray[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = sourceArray[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tsourceArray[left + i] = help[i];\n\t\t}\n\t}\n}\t\n```\n\n\n**示例：** 原来数组元素为：3，6, 4，5, 2, 8；首先划分为：Left:[3,6,4]和 right:[5,2,8]；然后将他们分别排序为：Left:[3,4,6] 和 Right:[2,5,8]，然后左右各取指针 a,b，同时准备一个辅助数组，长度和原数组长度相同；然后比较 a,b 指向元素的大小，哪一个小哪一个就放进数组，同时下标 + 1，然后再次比较，直到某一方全部放入数组，则另一方剩余的全部放入数组，最后将该数组拷贝回原来数组；\n因为一共 N 的样本，分为两个一样的部分，每部分的时间复杂度为 ：$T(\\frac{\\mathrm{N}}{2})$，每一部分进行比较等操作为：$O(N)$，因此时间复杂度为：$T(N) = 2* T({\\frac{N}{2}}) + O(N)$，根据 master 公式结果为：$O(N * \\log_{2}^{N})$ \n空间复杂度：$O(N)$\n\n\n**master 公式**\n一般的时间复杂度公式可以表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，其中 N 表示整个过程的样本量，$\\frac{N}{b}$表示划分之后子过程的样本量，a 表示子过程共发生多少次，后面的：$O({N}^{d}))$ 表示除了子过程之外其它操作的时间复杂度；**这里的子过程只是划分一次之后的数量。** 划分的子问题应该规模相同；\n如果一个过程的时间复杂度表示为：$T(N) = aT(\\frac{N}{b}) + O({N}^{d}))$，则可以根据 master 公式化为以下结果：\n- $\\log_{b}^{a} > d$ ：复杂度为：$O({N}^{log{b}^{a}})$；\n- $\\log_{b}^{a} = d$ ：复杂度为：$O({N}^{d} *{\\log{2}^{N}})$；\n- $\\log_{b}^{a} < d$ ：复杂度为：$O({N}^{d})$；\n\n\n### 示例\n\n**小和问题：**\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n```java\n[1,3,4,2,5]\n1左边比1小的数，没有；\n3左边比3小的数，1；\n4左边比4小的数，1、3；\n2左边比2小的数，1；\n5左边比5小的数，1、3、4、2；\n所以小和为1+1+3+1+1+3+4+2=16\n```\n\n**求解：**\n将该数组不断的切分[1,3,4][2,5]，然后再次切分：[1,3][4][2][5],最后切分为：[1][3][4][2][5];\n这里以 1 为例，[1][3]中有一个 1（即 3 的左边有一个 1 比他小），然后[1,3]和[4]，有一个 1（即 4 左边有一个 1 比他小），然后 [1,3,4]和 [2,5]，有两个 1（即 2 和 5 左边有一个 1 比它小），最终以 1 为例的小和为：1 + 1 + 2*1 = 4;其他类似；\n\n```java\npublic class SmallSum {\n\n\tpublic static int smallSum(int[] sourceArray) {\n\t\tif (sourceArray == null || sourceArray.length < 2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn mergeSort(sourceArray, 0, sourceArray.length - 1);\n\t}\n\n\tpublic static int mergeSort(int[] sourceArray, int left, int right) {\n\t\tif (left == right) {\n\t\t\treturn 0;\n\t\t}\n\t\tint mid = left + ((right - left) >> 1);\n\t\treturn mergeSort(sourceArray, left, mid) + mergeSort(sourceArray, mid + 1, right) + merge(sourceArray, left, mid, right);\n\t}\n\n\tpublic static int merge(int[] arr, int left, int mid, int right) {\n\t\tint[] help = new int[right - left + 1];\n\t\tint i = 0;\n\t\tint startLeft = left;\n\t\tint startRight = mid + 1;\n\t\tint res = 0;\n\t\twhile (startLeft <= mid && startRight <= right) {\n\t\t\tres += arr[startLeft] < arr[startRight] ? (right - startRight + 1) * arr[startLeft] : 0;\n\t\t\thelp[i++] = arr[startLeft] < arr[startRight] ? arr[startLeft++] : arr[startRight++];\n\t\t}\n\t\twhile (startLeft <= mid) {\n\t\t\thelp[i++] = arr[startLeft++];\n\t\t}\n\t\twhile (startRight <= right) {\n\t\t\thelp[i++] = arr[startRight++];\n\t\t}\n\t\tfor (i = 0; i < help.length; i++) {\n\t\t\tarr[left + i] = help[i];\n\t\t}\n\t\treturn res;\n\t}\n\n}\n```\n\n\n**逆序对问题**\n在一个数组中，左边的数如果比右边的数大，则折两个数构成一个逆序对，请打印所有逆序对。\n\n\n\n\n",[[1573519036695,["GJX@GJXAIOU",[[1,114,"\n"]],[113,113],[114,114]]],[1573519043653,["GJX@GJXAIOU",[[1,114,"CUS"]],[114,114],[117,117]]],[1573519044937,["GJX@GJXAIOU",[[-1,114,"CUS"]],[117,117],[114,114]]],[1573519045233,["GJX@GJXAIOU",[[-1,114,"\n"]],[114,114],[113,113]]],[1573519049317,["GJX@GJXAIOU",[[1,113,"custer"]],[113,113],[119,119]]],[1573519051567,["GJX@GJXAIOU",[[-1,113,"custer"]],[119,119],[113,113]]],[1573519052202,["GJX@GJXAIOU",[[1,114,"\n"]],[113,113],[114,114]]],[1573519054615,["GJX@GJXAIOU",[[1,114,"custer"]],[114,114],[120,120]]],[1573519057567,["GJX@GJXAIOU",[[-1,118,"er"]],[120,120],[118,118]]],[1573519065438,["GJX@GJXAIOU",[[1,118,"om: GJXAIOU"]],[118,118],[129,129]]]],null,"GJX@GJXAIOU"]]}