{"compress":true,"commitItems":[["e5f871de-e913-4525-bb05-57dab9ef90f4",1559043283196,"前缀、中缀、后缀表达式转换详解\n昨天参加了ebay实习生笔试题，其中一道题目给定了前缀表达式，让我们求转换成中缀表达式时辅助栈的做多情况下容乃几个元素以及中缀表达式的值。当时没有做出来，会后后网上查了些资料，发现很少有文章将前缀、中缀和后缀表达式之间的转化覆盖了，所以写下这篇文章希望能够将前缀、中缀和后缀表达式之间的转化讲解清楚。\n\n一般而言，我们最常遇到的是将中缀表达式转化为后缀表达式，既然这样，首先就来看看中缀表达式转化为后缀表达式的方法。\n\n中缀表达式转后缀表达式：\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为后缀表达式。\n\n方法一：利用表达式树\n首先将中缀表达式转换为表达式树，然后后序遍历表达式树，所得结果就是后缀表达式。\n\n将中缀表达式转化为表达式树方法：表达式树的树叶是操作数，而其他的节点为操作符，根节点为优先级最低且靠右的操作符（如上述表达式优先级最低的是- 和+，但 + 更靠右，所以根为+），圆括号不包括。如上述中缀表达式转换后的表达式树如下：\n\n\n\n经过后序遍历表达式树后得到的后缀表达式为：12 3 + 4 * + 5 –\n\n方法二：利用辅助栈\n从左到右遍历中缀表达式的每个操作数和操作符。当读到操作数时，立即把它输出，即成为后缀表达式的一部分；若读到操作符，判断该符号与栈顶符号的优先级，若该符号优先级高于栈顶元素，则将该操作符入栈，否则就一次把栈中运算符弹出并加到后缀表达式尾端，直到遇到优先级低于该操作符的栈元素，然后把该操作符压入栈中。如果遇到”(”，直接压入栈中，如果遇到一个”)”，那么就将栈元素弹出并加到后缀表达式尾端，但左右括号并不输出。最后，如果读到中缀表达式的尾端，将栈元素依次完全弹出并加到后缀表达式尾端。\n\n仍然以上面的表达式为例，其转换过程如下：\n\n\n利用辅助栈后缀表达式与用表达式树的结果一样，都为：1 2 3 + 4 * + 5 –\n\n后缀表达式转换为中缀表达式\n假定有后缀表达式1 2 3 + 4 * +5 – ，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n从左到右扫面后缀表达式，一次一个符号读入表达式。如果符号是操作数，那么就建立一个单节点树并将它推入栈中。如果符号是操作符，那么就从栈中弹出两个树T1和T2（T1先弹出）并形成一颗新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。然后将指向这棵新树的指针压入栈中。\n\n\n\n前三个符号是操作数，因此创建三颗单节点树并将指向它们的指针压入栈中。\n\n\n“+”被读入，因此指向最后两颗树的指针被弹出，形成一颗新树，并将指向新树的指针压入栈中。以下的流程图以相同原理执行。\n\n\n\n\n\n\n\n最后再中序遍历所得的表达式树即得到我们所需的中缀表达式：1+（（2+3）*4）-5\n\n中缀表达式转换为前缀表达式\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n先将表达式用表达式树来表示，然后在前序遍历表达式树即得到我们所需的前缀表大式。表达式树前面已经介绍过，这里不再累赘。\n\n此处，经过前序遍历所得前缀表达式为：- + 1 * + 2 3 4 5\n\n方法二：利用辅助栈\n首先构造一个运算符栈，然后从右至左扫描中缀表达式。如果是操作数，则直接输出，作为前缀表达式的一个直接转换表达式Temp（最后，前缀表达式由该表达式翻转得到）；如果是运算符，则比较优先级：若该运算符优先级大于等于栈顶元素，则将该运算符入栈，否则栈内元素出栈并加到Temp表达式尾端，直到该运算符大于等于栈顶元素的优先级时，再将该运算符压入栈中。遇到右括号直接压入栈中，如果遇到一个左括号，那么就将栈元素弹出并加到Temp表达式尾端，但左右括号并不输出。最后，若运算符栈中还有元素，则将元素一次弹出并加到Temp表达式尾端，最后一步是将Temp表达式翻转。\n\n         其过程如下图所示：\n\n\n从右到左开始扫描，5为数字放入Temp中，-为操作符入栈。\n\n\n遇到左括号，元素弹出直到遇到右括号为止。\n\n\n\n\n所得前缀表达式为：- + 1 * + 2 3 4 5\n\n前缀表达式转换为中缀表达式：\n假定有前缀表达式 - + 1 * + 23 4 5，请将它转化为中缀表达式。\n\n方法一：辅助栈\n首先创建一个数字栈。从右到左扫描前缀表达式，如果遇到操作数，则入栈。如果遇到操作符，则将栈顶元素弹出（后扫面的数字位于表达式前面），并和操作符结合写成表达式，作为中缀表达式。如果遇到的操作符优先级大于已存在表达式的最后执行操作符的优先级，则将已存在的表达式加上（）。\n\n如下是前缀表达式转为中缀表达式的示意图：\n\n\n\n扫描到操作数直接入栈。\n\n\n扫描到操作符，将两个栈顶元素弹出，并和操作符结合写成表达式。\n\n\n\n\n\n\n表达式不是（2+3）*4，因为1比2、3、4后扫描到。\n\n\n表达是不是5-（1+（2+3）*4），因为5是最早扫面到的数字。\n\n所以中缀表达式为5-(1+（2+3）*4）。",[[1559043240189,["GJX@GJXAIOU",[[1,166,"[link](https://img-blog.csdn.net/20140402150513015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)"]],[166,166],[354,354]]],[1559043245913,["GJX@GJXAIOU",[[-1,166,"[link](https://img-blog.csdn.net/20140402150513015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)"]],[166,354],[166,166]]],[1559043281309,["GJX@GJXAIOU",[[-1,0,"前缀、中缀、后缀表达式转换详解\n昨天参加了ebay实习生笔试题，其中一道题目给定了前缀表达式，让我们求转换成中缀表达式时辅助栈的做多情况下容乃几个元素以及中缀表达式的值。当时没有做出来，会后后网上查了些资料，发现很少有文章将前缀、中缀和后缀表达式之间的转化覆盖了，所以写下这篇文章希望能够将前缀、中缀和后缀表达式之间的转化讲解清楚。\n\n一般而言，我们最常遇到的是将中缀表达式转化为后缀表达式，既然这样，首先就来看看中缀表达式转化为后缀表达式的方法。\n\n中缀表达式转后缀表达式：\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为后缀表达式。\n\n方法一：利用表达式树\n首先将中缀表达式转换为表达式树，然后后序遍历表达式树，所得结果就是后缀表达式。\n\n将中缀表达式转化为表达式树方法：表达式树的树叶是操作数，而其他的节点为操作符，根节点为优先级最低且靠右的操作符（如上述表达式优先级最低的是- 和+，但 + 更靠右，所以根为+），圆括号不包括。如上述中缀表达式转换后的表达式树如下：\n\n\n\n经过后序遍历表达式树后得到的后缀表达式为：12 3 + 4 * + 5 –\n\n方法二：利用辅助栈\n从左到右遍历中缀表达式的每个操作数和操作符。当读到操作数时，立即把它输出，即成为后缀表达式的一部分；若读到操作符，判断该符号与栈顶符号的优先级，若该符号优先级高于栈顶元素，则将该操作符入栈，否则就一次把栈中运算符弹出并加到后缀表达式尾端，直到遇到优先级低于该操作符的栈元素，然后把该操作符压入栈中。如果遇到”(”，直接压入栈中，如果遇到一个”)”，那么就将栈元素弹出并加到后缀表达式尾端，但左右括号并不输出。最后，如果读到中缀表达式的尾端，将栈元素依次完全弹出并加到后缀表达式尾端。\n\n仍然以上面的表达式为例，其转换过程如下：\n\n\n利用辅助栈后缀表达式与用表达式树的结果一样，都为：1 2 3 + 4 * + 5 –\n\n后缀表达式转换为中缀表达式\n假定有后缀表达式1 2 3 + 4 * +5 – ，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n从左到右扫面后缀表达式，一次一个符号读入表达式。如果符号是操作数，那么就建立一个单节点树并将它推入栈中。如果符号是操作符，那么就从栈中弹出两个树T1和T2（T1先弹出）并形成一颗新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。然后将指向这棵新树的指针压入栈中。\n\n\n\n前三个符号是操作数，因此创建三颗单节点树并将指向它们的指针压入栈中。\n\n\n“+”被读入，因此指向最后两颗树的指针被弹出，形成一颗新树，并将指向新树的指针压入栈中。以下的流程图以相同原理执行。\n\n\n\n\n\n\n\n最后再中序遍历所得的表达式树即得到我们所需的中缀表达式：1+（（2+3）*4）-5\n\n中缀表达式转换为前缀表达式\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n先将表达式用表达式树来表示，然后在前序遍历表达式树即得到我们所需的前缀表大式。表达式树前面已经介绍过，这里不再累赘。\n\n此处，经过前序遍历所得前缀表达式为：- + 1 * + 2 3 4 5\n\n方法二：利用辅助栈\n首先构造一个运算符栈，然后从右至左扫描中缀表达式。如果是操作数，则直接输出，作为前缀表达式的一个直接转换表达式Temp（最后，前缀表达式由该表达式翻转得到）；如果是运算符，则比较优先级：若该运算符优先级大于等于栈顶元素，则将该运算符入栈，否则栈内元素出栈并加到Temp表达式尾端，直到该运算符大于等于栈顶元素的优先级时，再将该运算符压入栈中。遇到右括号直接压入栈中，如果遇到一个左括号，那么就将栈元素弹出并加到Temp表达式尾端，但左右括号并不输出。最后，若运算符栈中还有元素，则将元素一次弹出并加到Temp表达式尾端，最后一步是将Temp表达式翻转。\n\n         其过程如下图所示：\n\n\n从右到左开始扫描，5为数字放入Temp中，-为操作符入栈。\n\n\n遇到左括号，元素弹出直到遇到右括号为止。\n\n\n\n\n所得前缀表达式为：- + 1 * + 2 3 4 5\n\n前缀表达式转换为中缀表达式：\n假定有前缀表达式 - + 1 * + 23 4 5，请将它转化为中缀表达式。\n\n方法一：辅助栈\n首先创建一个数字栈。从右到左扫描前缀表达式，如果遇到操作数，则入栈。如果遇到操作符，则将栈顶元素弹出（后扫面的数字位于表达式前面），并和操作符结合写成表达式，作为中缀表达式。如果遇到的操作符优先级大于已存在表达式的最后执行操作符的优先级，则将已存在的表达式加上（）。\n\n如下是前缀表达式转为中缀表达式的示意图：\n\n\n\n扫描到操作数直接入栈。\n\n\n扫描到操作符，将两个栈顶元素弹出，并和操作符结合写成表达式。\n\n\n\n\n\n\n表达式不是（2+3）*4，因为1比2、3、4后扫描到。\n\n\n表达是不是5-（1+（2+3）*4），因为5是最早扫面到的数字。\n\n所以中缀表达式为5-(1+（2+3）*4）。"]],[0,2085],[0,0]]],[1559043303026,["GJX@GJXAIOU",[[1,0,"前缀、中缀、后缀表达式转换详解\n昨天参加了ebay实习生笔试题，其中一道题目给定了前缀表达式，让我们求转换成中缀表达式时辅助栈的做多情况下容乃几个元素以及中缀表达式的值。当时没有做出来，会后后网上查了些资料，发现很少有文章将前缀、中缀和后缀表达式之间的转化覆盖了，所以写下这篇文章希望能够将前缀、中缀和后缀表达式之间的转化讲解清楚。\n\n一般而言，我们最常遇到的是将中缀表达式转化为后缀表达式，既然这样，首先就来看看中缀表达式转化为后缀表达式的方法。\n\n中缀表达式转后缀表达式：\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为后缀表达式。\n\n方法一：利用表达式树\n首先将中缀表达式转换为表达式树，然后后序遍历表达式树，所得结果就是后缀表达式。\n\n将中缀表达式转化为表达式树方法：表达式树的树叶是操作数，而其他的节点为操作符，根节点为优先级最低且靠右的操作符（如上述表达式优先级最低的是- 和+，但 + 更靠右，所以根为+），圆括号不包括。如上述中缀表达式转换后的表达式树如下：\n\n\n\n经过后序遍历表达式树后得到的后缀表达式为：12 3 + 4 * + 5 –\n\n方法二：利用辅助栈\n从左到右遍历中缀表达式的每个操作数和操作符。当读到操作数时，立即把它输出，即成为后缀表达式的一部分；若读到操作符，判断该符号与栈顶符号的优先级，若该符号优先级高于栈顶元素，则将该操作符入栈，否则就一次把栈中运算符弹出并加到后缀表达式尾端，直到遇到优先级低于该操作符的栈元素，然后把该操作符压入栈中。如果遇到”(”，直接压入栈中，如果遇到一个”)”，那么就将栈元素弹出并加到后缀表达式尾端，但左右括号并不输出。最后，如果读到中缀表达式的尾端，将栈元素依次完全弹出并加到后缀表达式尾端。\n\n仍然以上面的表达式为例，其转换过程如下：\n\n\n利用辅助栈后缀表达式与用表达式树的结果一样，都为：1 2 3 + 4 * + 5 –\n\n后缀表达式转换为中缀表达式\n假定有后缀表达式1 2 3 + 4 * +5 – ，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n从左到右扫面后缀表达式，一次一个符号读入表达式。如果符号是操作数，那么就建立一个单节点树并将它推入栈中。如果符号是操作符，那么就从栈中弹出两个树T1和T2（T1先弹出）并形成一颗新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。然后将指向这棵新树的指针压入栈中。\n\n\n\n前三个符号是操作数，因此创建三颗单节点树并将指向它们的指针压入栈中。\n\n\n“+”被读入，因此指向最后两颗树的指针被弹出，形成一颗新树，并将指向新树的指针压入栈中。以下的流程图以相同原理执行。\n\n\n\n\n\n\n\n最后再中序遍历所得的表达式树即得到我们所需的中缀表达式：1+（（2+3）*4）-5\n\n中缀表达式转换为前缀表达式\n假定有中缀表达式1 + (( 2 + 3)* 4 ) – 5，请将它转化为前缀表达式。\n\n方法一：利用表达式树\n先将表达式用表达式树来表示，然后在前序遍历表达式树即得到我们所需的前缀表大式。表达式树前面已经介绍过，这里不再累赘。\n\n此处，经过前序遍历所得前缀表达式为：- + 1 * + 2 3 4 5\n\n方法二：利用辅助栈\n首先构造一个运算符栈，然后从右至左扫描中缀表达式。如果是操作数，则直接输出，作为前缀表达式的一个直接转换表达式Temp（最后，前缀表达式由该表达式翻转得到）；如果是运算符，则比较优先级：若该运算符优先级大于等于栈顶元素，则将该运算符入栈，否则栈内元素出栈并加到Temp表达式尾端，直到该运算符大于等于栈顶元素的优先级时，再将该运算符压入栈中。遇到右括号直接压入栈中，如果遇到一个左括号，那么就将栈元素弹出并加到Temp表达式尾端，但左右括号并不输出。最后，若运算符栈中还有元素，则将元素一次弹出并加到Temp表达式尾端，最后一步是将Temp表达式翻转。\n\n         其过程如下图所示：\n\n\n从右到左开始扫描，5为数字放入Temp中，-为操作符入栈。\n\n\n遇到左括号，元素弹出直到遇到右括号为止。\n\n\n\n\n所得前缀表达式为：- + 1 * + 2 3 4 5\n\n前缀表达式转换为中缀表达式：\n假定有前缀表达式 - + 1 * + 23 4 5，请将它转化为中缀表达式。\n\n方法一：辅助栈\n首先创建一个数字栈。从右到左扫描前缀表达式，如果遇到操作数，则入栈。如果遇到操作符，则将栈顶元素弹出（后扫面的数字位于表达式前面），并和操作符结合写成表达式，作为中缀表达式。如果遇到的操作符优先级大于已存在表达式的最后执行操作符的优先级，则将已存在的表达式加上（）。\n\n如下是前缀表达式转为中缀表达式的示意图：\n\n\n\n扫描到操作数直接入栈。\n\n\n扫描到操作符，将两个栈顶元素弹出，并和操作符结合写成表达式。\n\n\n\n\n\n\n表达式不是（2+3）*4，因为1比2、3、4后扫描到。\n\n\n表达是不是5-（1+（2+3）*4），因为5是最早扫面到的数字。\n\n所以中缀表达式为5-(1+（2+3）*4）。"]],[0,0],[2085,2085]]],[1559043365165,["GJX@GJXAIOU",[[1,453,"[link](https://img-blog.csdn.net/20140402144303578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)"]],[453,453],[641,641]]],[1559043381786,["GJX@GJXAIOU",[[-1,453,"[link](https://img-blog.csdn.net/20140402144303578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)"]],[453,641],[453,453]]],[1559043390635,["GJX@GJXAIOU",[[1,453,"（"],[-1,1620,"        "],[1,1628,"        "]],[453,453],[454,454]]],[1559043390686,["GJX@GJXAIOU",[[1,454,"）"]],[454,454],[455,455]]],[1559043391868,["GJX@GJXAIOU",[[-1,453,"（）"]],[455,455],[453,453]]],[1559043395090,["GJX@GJXAIOU",[[1,453,"[]("]],[453,453],[456,456]]],[1559043395115,["GJX@GJXAIOU",[[1,456,"https://)"]],[456,456],[456,464]]],[1559043395178,["GJX@GJXAIOU",[[-1,456,"https://"],[1,464,")"]],[456,464],[457,457]]],[1559043396922,["GJX@GJXAIOU",[[-1,457,")"]],[457,457],[456,456]]],[1559043398499,["GJX@GJXAIOU",[[1,456,"https://img-blog.csdn.net/20140402144303578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"]],[456,456],[636,636]]],[1559043405417,["GJX@GJXAIOU",[[1,454,"zhongzhuo"]],[454,454],[463,463]]],[1559043406781,["GJX@GJXAIOU",[[-1,453,"[zhongzhuo"]],[463,463],[453,453]]],[1559043406818,["GJX@GJXAIOU",[[-1,452,"\n"]],[453,453],[452,452]]],[1559043409707,["GJX@GJXAIOU",[[-1,452,"](https://img-blog.csdn.net/20140402144303578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2Fsa2Vya2Fscg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)"]],[452,635],[452,452]]],[1559043446238,["GJX@GJXAIOU",[[1,452,"![由中缀表达式得到表达式树]($resource/%E7%94%B1%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BE%97%E5%88%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91.jpg)"]],[452,452],[592,592]]],[1559043450897,["GJX@GJXAIOU",[[1,452,"\n"]],[451,451],[452,452]]],[1559043468180,["GJX@GJXAIOU",[[1,909,"\n"]],[907,907],[908,908]]],[1559043468313,["GJX@GJXAIOU",[[1,910,"\n"]],[908,908],[909,909]]],[1559043468458,["GJX@GJXAIOU",[[1,911,"\n"]],[909,909],[910,910]]],[1559043468702,["GJX@GJXAIOU",[[1,912,"\n"]],[910,910],[911,911]]],[1559043468826,["GJX@GJXAIOU",[[1,913,"\n"]],[911,911],[912,912]]],[1559043474178,["GJX@GJXAIOU",[[-1,913,"\n"]],[912,912],[911,911]]],[1559043499105,["GJX@GJXAIOU",[[1,908,"![转换过程]($resource/%E8%BD%AC%E6%8D%A2%E8%BF%87%E7%A8%8B.jpg)"]],[908,908],[968,968]]],[1559043509017,["GJX@GJXAIOU",[[-1,1824,"       "]],[1827,1830],[1823,1823]]],[1559043538306,["GJX@GJXAIOU",[[-1,1323,"\n"]],[1322,1322],[1321,1321]]],[1559043538724,["GJX@GJXAIOU",[[-1,1322,"\n"]],[1321,1321],[1320,1320]]],[1559043539076,["GJX@GJXAIOU",[[-1,1321,"\n"]],[1320,1320],[1319,1319]]],[1559043539442,["GJX@GJXAIOU",[[-1,1320,"\n"]],[1319,1319],[1318,1318]]],[1559043542272,["GJX@GJXAIOU",[[1,1363,"\n"]],[1361,1361],[1362,1362]]],[1559043542405,["GJX@GJXAIOU",[[1,1364,"\n"]],[1362,1362],[1363,1363]]],[1559043574801,["GJX@GJXAIOU",[[1,1365,"## "]],[1365,1378],[1381,1381]]],[1559043600898,["GJX@GJXAIOU",[[1,1016,"## "]],[1016,1029],[1032,1032]]],[1559043600919,["GJX@GJXAIOU",[[1,1018,"#"]],[1032,1032],[1033,1033]]],[1559043654051,["GJX@GJXAIOU",[[1,1223,"![20140402144804703]($resource/20140402144804703.jpg)"]],[1223,1223],[1277,1277]]],[1559043665622,["GJX@GJXAIOU",[[1,1313,"![20140402144855656]($resource/20140402144855656.jpg)"]],[1313,1313],[1367,1367]]],[1559043678251,["GJX@GJXAIOU",[[1,1428,"![搜狗截图20190528194038]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190528194038.jpg)"]],[1428,1428],[1516,1516]]],[1559043757114,["GJX@GJXAIOU",[[1,2033,"![20140402145345906]($resource/20140402145345906.jpg)"]],[2033,2033],[2087,2087]]],[1559043832230,["GJX@GJXAIOU",[[1,2117,"![搜狗截图20190528194340]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190528194340.jpg)"]],[2117,2117],[2205,2205]]],[1559043855162,["GJX@GJXAIOU",[[1,2228,"![搜狗截图20190528194404]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190528194404.jpg)"]],[2228,2228],[2316,2316]]],[1559043922762,["GJX@GJXAIOU",[[1,2566,"![1]($resource/1.jpg)"]],[2566,2566],[2588,2588]]],[1559043930451,["GJX@GJXAIOU",[[1,2602,"![2]($resource/2.jpg)"]],[2602,2602],[2624,2624]]],[1559043954602,["GJX@GJXAIOU",[[1,2657,"![3]($resource/3.jpg)"]],[2657,2657],[2679,2679]]],[1559043971098,["GJX@GJXAIOU",[[1,2710,"![4]($resource/4.jpg)"]],[2710,2711],[2732,2732]]]],null,"GJX@GJXAIOU"]]}