{"compress":true,"commitItems":[["6db68924-0467-4518-9184-2eb3763e7707",1562850016284,"",[[1562849959641,["GJX@GJXAIOU",[[1,0,"# 学习数据结构的框架思维\n\n\n\n"]],[0,0],[16,16]]],[1562849975911,["GJX@GJXAIOU",[[1,16,"本文是对整个数据结构及算法的总体框架认识，旨在帮助读者自顶向下，从整体到细节，从抽象到具体地看待数据结构。希望通过本文读者能在对数据结构的学习和理解上能有更高层的认识。\n\n先声明一下：首先，这里讲的都是普通的数据结构，咱不是搞算法竞赛的，自学野路子出生，很多厉害的知识我不会，我只会解决常规的问题。另外，以下是我个人的经验的总结，没有哪本书会写这些东西，所以请读者试着理解我的角度，如果不是严重的逻辑错误，没必要纠结于细节问题，因为这篇文章就是希望对数据结构和算法建立一个框架性的认识。相信大家能从这篇文章里学到点东西。\n\n如果你没时间细看，不要错过第四点。\n\n**一、数据结构千变万化，但不离其宗**\n\n最高层的抽象，数据结构只有两种：数组和链表。\n\n这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？\n\n我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你列出的这么多，都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。\n\n比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的空间存储节点指针。\n\n「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是一般比较耗费空间。邻接表比较节省空间，但是时间上肯定不如邻接矩阵快。\n\n「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要空间；线性探查法就需要数组特性，以便连续寻址，省空间，但操作稍微复杂些。\n\n「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。\n\n以上也可以看出，没有完美的数据结构，没有一劳永逸的解决方案。\n\n**二、数据结构的操作,无非遍历 + 访问**\n\n遍历 + 访问，再具体一点就是：增删查改。\n\n数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。试问，除此之外还有其他吗？\n\n如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式，线性的和非线性的。\n\n线性就是 for/while 为代表，非线性就是递归为代表。无非以下两种框架：\n\n数组遍历框架，典型的线性遍历结构：\n\n```\nvoid traverse(int[] arr) {    for (int i = 0; i < arr.length; i++) {        // 访问 arr[i]    }}\n```\n\n二叉树遍历框架，典型的非线性递归遍历结构：\n\n```\nvoid traverse(TreeNode root) {    traverse(root.left)    traverse(root.right)}\n```\n\n以上两个框架可以随意改造。\n\n链表遍历框架，兼具线性和非线性遍历结构：\n\n```\nvoid traverse(ListNode head) {    for (ListNode p = head; p != null; p = p.next) {        // 访问 p.val    }}void traverse(ListNode head) {    // 访问 head.val    traverse(head.next)}\n```\n\n二叉树框架又可以具体扩展为 N 叉树的遍历框架：\n\n```\nvoid traverse(TreeNode root) {    for (TreeNode child : root.children)        traverse(child)}\n```\n\nN 叉树的遍历又可以扩展为图的遍历，因为，图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，就不贴代码了。\n\n所谓框架，就是说不管具体问题是什么，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了。\n\n**三、为什么算法总是和数据结构同时出现**\n\n数据结构是工具，算法是通过合适的工具解决问题的方法。\n\n拿原始人举例，我们学会了数据结构，就像原始人拥有了石刀，石斧等工具。而根据制造工具的工艺不同，石刀又分尖锐的石刀和锯齿状石刀，前者适合打猎，后者适合切割；就像「图」这种数据结构通过不同的实现方法（链表、数组），可以表示为邻接表和邻接矩阵，前者适合处理非稠密图，后者适合处理稠密图。\n\n原始人想要造一栋房子，就要进行规划，石斧砍树，石刀磨尖角等等；就像我们设计算法，发挥数据结构的特性，去解决实际问题。\n\n算法利用数据结构，可以显式利用，比如说前文讲解的 [单调栈](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483803&idx=1&sn=d8c5fac3a15dcac0833445cb934e1a46&chksm=fb3361d9cc44e8cff919df33cf9f1517ce9ad746452f86dd93f282f4964e93ac1eb3abb10cde&scene=21#wechat_redirect)，就是巧妙地直接利用了栈结构先进后出的特性。稍微高级一点的算法设计思路，就是隐式利用数据结构，比如前文讲过的 [回溯算法](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483841&idx=1&sn=9819393f9142892312fa3aeba173c879&chksm=fb336183cc44e895b7e7a29ec52f2504a1a6aa925655bcf129f1c215a376fa67c302d747f253&scene=21#wechat_redirect)、[动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect)，以及传说中的的分治算法，都在利用树这种结构来解决问题。\n\n但是，无论怎样利用数据结构，多么高大上的算法，其解法都逃不出第二点中相应的框架，是不是？\n\n**四、最后总结（重要）**\n\n对于一个初学算法的人来说，一定要学会从框架上看问题，而不要纠结于细节问题。\n\n啥叫细节问题？比如说 i 到底应该加到 n 还是加到 n - 1 ？这个数组的大小到底应该开 n 还是 n + 1 ？\n\n啥叫从框架上看问题？比如说前文 [动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect) 中凑零钱的问题，如果你看了一眼代码就自动排除细节问题，直接提取出 N 叉树遍历框架，那么你的框架思维就到位了。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4nzqCibBMflxmUBlk0Oia6f3HYaZC0KDia2YEF35tpNsibiccVoBJRq8Pia7AfaicHKS6z9WK4BeCVHHib9ng/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n当然，如果细节出错，你得不到正确的答案，但是只要有框架在，你再错也错不到哪去，因为你的方向是对的。\n\n但是，你要是心中没有框架，那么你根本无法解题，给了你答案，你也不会发现这就是个树的遍历问题。\n\n**这就是框架的力量，能够保证你在快睡着的时候，依然能写出正确的程序；就算你啥都不会，都能比别人高一个级别。**\n\n初学阶段，没到纠结细节的地步。细节出错，可以有各种方法查出来，比如到处打 log，没有找不到的 bug 。\n\n相比之下，别人还束手无策的时候，你已经做出了一个错误的答案；当别人没有框架的指导，被无限细节劝退数据结构的时候，你已经借助框架看穿了数据结构的本质。这不就是一种巨大的成功吗？给你鼓掌。"]],[16,16],[3861,3861]]],[1562849994720,["GJX@GJXAIOU",[[1,1200,"\n"]],[1200,1200],[1201,1201]]],[1562849999585,["GJX@GJXAIOU",[[-1,1241,"      "]],[1240,1246],[1240,1240]]],[1562850004315,["GJX@GJXAIOU",[[1,1241,"\n"]],[1241,1241],[1242,1242]]],[1562850006707,["GJX@GJXAIOU",[[1,1258,"\n"]],[1258,1258],[1259,1259]]],[1562850010024,["GJX@GJXAIOU",[[1,1260,"\n"]],[1260,1260],[1261,1261]]],[1562850011776,["GJX@GJXAIOU",[[1,1201,"  "]],[1201,1201],[1203,1203]]],[1562850013249,["GJX@GJXAIOU",[[1,1244,"    "]],[1244,1244],[1248,1248]]],[1562850014186,["GJX@GJXAIOU",[[1,1265,"  "]],[1265,1265],[1267,1267]]],[1562850022265,["GJX@GJXAIOU",[[1,1333,"\n"],[1,1356,"\n"],[1,1380,"\n"]],[1303,1381],[1384,1384]]],[1562850033617,["GJX@GJXAIOU",[[1,1461,"\n"],[1,1513,"\n"],[1,1532,"\n"],[1,1537,"\n"],[1,1538,"\n\n"],[1,1568,"\n"],[1,1586,"\n"],[1,1609,"\n"]],[1431,1610],[1619,1619]]],[1562850046642,["GJX@GJXAIOU",[[1,1685,"\n"],[1,1725,"\n"],[1,1748,"\n"]],[1655,1749],[1752,1752]]]],null,"GJX@GJXAIOU"],["be508a22-480d-4b52-ae16-ed62060441e3",1562891866952,"# 学习数据结构的框架思维\n\n\n本文是对整个数据结构及算法的总体框架认识，旨在帮助读者自顶向下，从整体到细节，从抽象到具体地看待数据结构。希望通过本文读者能在对数据结构的学习和理解上能有更高层的认识。\n\n先声明一下：首先，这里讲的都是普通的数据结构，咱不是搞算法竞赛的，自学野路子出生，很多厉害的知识我不会，我只会解决常规的问题。另外，以下是我个人的经验的总结，没有哪本书会写这些东西，所以请读者试着理解我的角度，如果不是严重的逻辑错误，没必要纠结于细节问题，因为这篇文章就是希望对数据结构和算法建立一个框架性的认识。相信大家能从这篇文章里学到点东西。\n\n如果你没时间细看，不要错过第四点。\n\n**一、数据结构千变万化，但不离其宗**\n\n最高层的抽象，数据结构只有两种：数组和链表。\n\n这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？\n\n我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你列出的这么多，都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。\n\n比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的空间存储节点指针。\n\n「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是一般比较耗费空间。邻接表比较节省空间，但是时间上肯定不如邻接矩阵快。\n\n「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要空间；线性探查法就需要数组特性，以便连续寻址，省空间，但操作稍微复杂些。\n\n「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。\n\n以上也可以看出，没有完美的数据结构，没有一劳永逸的解决方案。\n\n**二、数据结构的操作,无非遍历 + 访问**\n\n遍历 + 访问，再具体一点就是：增删查改。\n\n数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。试问，除此之外还有其他吗？\n\n如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式，线性的和非线性的。\n\n线性就是 for/while 为代表，非线性就是递归为代表。无非以下两种框架：\n\n数组遍历框架，典型的线性遍历结构：\n\n```\nvoid traverse(int[] arr) {    \n  for (int i = 0; i < arr.length; i++) {  \n    // 访问 arr[i]    \n  }\n}\n```\n\n二叉树遍历框架，典型的非线性递归遍历结构：\n\n```\nvoid traverse(TreeNode root) {\n    traverse(root.left)\n    traverse(root.right)\n}\n```\n\n以上两个框架可以随意改造。\n\n链表遍历框架，兼具线性和非线性遍历结构：\n\n```\nvoid traverse(ListNode head) {\n    for (ListNode p = head; p != null; p = p.next) {\n        // 访问 p.val\n    }\n}\n\nvoid traverse(ListNode head) {\n    // 访问 head.val\n    traverse(head.next)\n}\n```\n\n二叉树框架又可以具体扩展为 N 叉树的遍历框架：\n\n```\nvoid traverse(TreeNode root) {\n    for (TreeNode child : root.children)\n        traverse(child)\n}\n```\n\nN 叉树的遍历又可以扩展为图的遍历，因为，图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，就不贴代码了。\n\n所谓框架，就是说不管具体问题是什么，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了。\n\n**三、为什么算法总是和数据结构同时出现**\n\n数据结构是工具，算法是通过合适的工具解决问题的方法。\n\n拿原始人举例，我们学会了数据结构，就像原始人拥有了石刀，石斧等工具。而根据制造工具的工艺不同，石刀又分尖锐的石刀和锯齿状石刀，前者适合打猎，后者适合切割；就像「图」这种数据结构通过不同的实现方法（链表、数组），可以表示为邻接表和邻接矩阵，前者适合处理非稠密图，后者适合处理稠密图。\n\n原始人想要造一栋房子，就要进行规划，石斧砍树，石刀磨尖角等等；就像我们设计算法，发挥数据结构的特性，去解决实际问题。\n\n算法利用数据结构，可以显式利用，比如说前文讲解的 [单调栈](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483803&idx=1&sn=d8c5fac3a15dcac0833445cb934e1a46&chksm=fb3361d9cc44e8cff919df33cf9f1517ce9ad746452f86dd93f282f4964e93ac1eb3abb10cde&scene=21#wechat_redirect)，就是巧妙地直接利用了栈结构先进后出的特性。稍微高级一点的算法设计思路，就是隐式利用数据结构，比如前文讲过的 [回溯算法](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483841&idx=1&sn=9819393f9142892312fa3aeba173c879&chksm=fb336183cc44e895b7e7a29ec52f2504a1a6aa925655bcf129f1c215a376fa67c302d747f253&scene=21#wechat_redirect)、[动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect)，以及传说中的的分治算法，都在利用树这种结构来解决问题。\n\n但是，无论怎样利用数据结构，多么高大上的算法，其解法都逃不出第二点中相应的框架，是不是？\n\n**四、最后总结（重要）**\n\n对于一个初学算法的人来说，一定要学会从框架上看问题，而不要纠结于细节问题。\n\n啥叫细节问题？比如说 i 到底应该加到 n 还是加到 n - 1 ？这个数组的大小到底应该开 n 还是 n + 1 ？\n\n啥叫从框架上看问题？比如说前文 [动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect) 中凑零钱的问题，如果你看了一眼代码就自动排除细节问题，直接提取出 N 叉树遍历框架，那么你的框架思维就到位了。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4nzqCibBMflxmUBlk0Oia6f3HYaZC0KDia2YEF35tpNsibiccVoBJRq8Pia7AfaicHKS6z9WK4BeCVHHib9ng/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n当然，如果细节出错，你得不到正确的答案，但是只要有框架在，你再错也错不到哪去，因为你的方向是对的。\n\n但是，你要是心中没有框架，那么你根本无法解题，给了你答案，你也不会发现这就是个树的遍历问题。\n\n**这就是框架的力量，能够保证你在快睡着的时候，依然能写出正确的程序；就算你啥都不会，都能比别人高一个级别。**\n\n初学阶段，没到纠结细节的地步。细节出错，可以有各种方法查出来，比如到处打 log，没有找不到的 bug 。\n\n相比之下，别人还束手无策的时候，你已经做出了一个错误的答案；当别人没有框架的指导，被无限细节劝退数据结构的时候，你已经借助框架看穿了数据结构的本质。这不就是一种巨大的成功吗？给你鼓掌。\n",[[1562891853060,["GJX@GJXAIOU",[[1,319,"**"],[1,340,"**"]],[319,340],[319,344]]],[1562891856498,["GJX@GJXAIOU",[[1,297,"## "]],[297,297],[320,320]]],[1562891861017,["GJX@GJXAIOU",[[1,958,"## "]],[958,958],[984,984]]],[1562891870698,["GJX@GJXAIOU",[[1,2996,"## "]],[2996,2996],[3013,3013]]],[1562891985933,[null,[[1,1920,"## "],[1,2993,"## "],[-1,2996,"## "]],[1920,1920],[2996,2996]]],[1562891985933,[null,[[-1,1920,"## "],[-1,2996,"## "],[1,3002,"## "]],[2996,2996],[1920,1920]]],[1562891967515,["GJX@GJXAIOU",[[1,436,"**"],[1,449,"**"]],[436,449],[436,453]]],[1562892225946,[null,[[1,1924,"## "],[1,2997,"## "],[-1,3000,"## "]],[1924,1924],[3000,3000]]],[1562892225946,[null,[[-1,1924,"## "],[-1,3000,"## "],[1,3006,"## "]],[3000,3000],[1924,1924]]],[1562892168863,["GJX@GJXAIOU",[[1,1090,"**"],[1,1118,"**"]],[1090,1118],[1090,1122]]],[1562893126019,[null,[[1,1928,"## "],[1,3001,"## "],[-1,3004,"## "]],[1928,1928],[3004,3004]]],[1562893126019,[null,[[-1,1928,"## "],[-1,3004,"## "],[1,3010,"## "]],[3004,3004],[1928,1928]]],[1562893120529,["GJX@GJXAIOU",[[-1,3418,"![](https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4nzqCibBMflxmUBlk0Oia6f3HYaZC0KDia2YEF35tpNsibiccVoBJRq8Pia7AfaicHKS6z9WK4BeCVHHib9ng/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n"]],[3417,3600],[3417,3417]]],[1562893122523,["GJX@GJXAIOU",[[-1,1192," "],[1,1193," "],[-1,1207," "],[1,1208," "],[-1,1212," {    "],[1,1218," {    "],[-1,1224," "],[1,1225," "],[-1,1229," i = 0; i < "],[1,1241," i = 0; i < "],[-1,1252," "],[1,1253," "],[-1,1257," {  "],[1,1261," {  "],[-1,1268," 访问 "],[1,1272," 访问 "],[-1,1278,"    "],[1,1282,"    "],[-1,1325," "],[1,1326," "],[-1,1343," "],[1,1344," "],[-1,1349," {\n    "],[1,1356," {\n    "],[-1,1376,"    "],[1,1380,"    "],[-1,1453," "],[1,1454," "],[-1,1471," "],[1,1472," "],[-1,1477," {\n    for "],[1,1488," {\n    for "],[-1,1497," p = "],[1,1502," p = "],[-1,1507," p != "],[1,1513," p != "],[-1,1518," p = "],[1,1523," p = "],[-1,1530," {\n        // 访问 "],[1,1547," {\n        // 访问 "],[-1,1553,"    "],[1,1557,"    "],[-1,1566," "],[1,1567," "],[-1,1584," "],[1,1585," "],[-1,1590," {\n    // 访问 "],[1,1603," {\n    // 访问 "],[-1,1612,"    "],[1,1616,"    "],[-1,1677," "],[1,1678," "],[-1,1695," "],[1,1696," "],[-1,1701," {\n    for "],[1,1712," {\n    for "],[-1,1721," "],[1,1722," "],[-1,1727," : "],[1,1730," : "],[-1,1745,"        "],[1,1753,"        "],[-1,2209," "],[1,2210," "],[-1,2484," "],[1,2485," "],[-1,3138," "],[1,3139," "],[-1,3360," "],[1,3361," "],[1,3417,"```"]],[3417,3417],[3420,3420]]],[1562893122553,["GJX@GJXAIOU",[[1,3420,"language\n```\n"]],[3420,3420],[3420,3428]]],[1562893123643,["GJX@GJXAIOU",[[-1,3420,"language"],[1,3428,"j"]],[3420,3428],[3421,3421]]],[1562893124164,["GJX@GJXAIOU",[[1,3421,"ava"]],[3421,3421],[3424,3424]]],[1562893124581,["GJX@GJXAIOU",[[1,3425,"\n"]],[3424,3424],[3425,3425]]],[1562893125458,["GJX@GJXAIOU",[[1,3425,"int coinChange(vector<int>& coins, int amount){\n    if(amount == 0){\n        return 0;\n    }\n    int ans = INT_MAX;\n    for (int coin; coins ) {\n        //金额不可达\n        if (amount - coin < 0) {\n            continue;\n        }\n        int subProb = coinChange(coins, amount - coin);\n        //子问题无解\n        if (subProb == -1) {\n            continue;\n        }\n        ans = min(ans, subProb + 1);\n    }\n    return ans == INT_MAX ? -1 : ans;\n}\n\n// N 叉树遍历框架\nint coinChange(vector<int> & coins, int amount){\n    for (int coin; coins) {\n        coinChange(coins, amount - coin);\n    }\n}"]],[3425,3425],[4006,4006]]]],null,"GJX@GJXAIOU"],["9bb454cf-86eb-4f7d-b7e2-64f3638c1cb6",1570932776936,"# 学习数据结构的框架思维\n\n\n本文是对整个数据结构及算法的总体框架认识，旨在帮助读者自顶向下，从整体到细节，从抽象到具体地看待数据结构。希望通过本文读者能在对数据结构的学习和理解上能有更高层的认识。\n\n先声明一下：首先，这里讲的都是普通的数据结构，咱不是搞算法竞赛的，自学野路子出生，很多厉害的知识我不会，我只会解决常规的问题。另外，以下是我个人的经验的总结，没有哪本书会写这些东西，所以请读者试着理解我的角度，如果不是严重的逻辑错误，没必要纠结于细节问题，因为这篇文章就是希望对数据结构和算法建立一个框架性的认识。相信大家能从这篇文章里学到点东西。\n\n如果你没时间细看，不要错过第四点。\n\n## **一、数据结构千变万化，但不离其宗**\n\n**最高层的抽象，数据结构只有两种：数组和链表**。\n\n这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？\n\n我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你列出的这么多，都属于「上层建筑」，而**数组和链表才是「结构基础」**。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。\n\n比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的空间存储节点指针。\n\n「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是一般比较耗费空间。邻接表比较节省空间，但是时间上肯定不如邻接矩阵快。\n\n「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要空间；线性探查法就需要数组特性，以便连续寻址，省空间，但操作稍微复杂些。\n\n「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。\n\n以上也可以看出，没有完美的数据结构，没有一劳永逸的解决方案。\n\n## **二、数据结构的操作,无非遍历 + 访问**\n\n遍历 + 访问，再具体一点就是：增删查改。\n\n数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。试问，除此之外还有其他吗？\n\n如何遍历 + 访问？我们仍然从最高层来看，各种**数据结构的遍历 + 访问无非两种形式，线性的和非线性的。**\n\n线性就是 for/while 为代表，非线性就是递归为代表。无非以下两种框架：\n\n数组遍历框架，典型的线性遍历结构：\n\n```\nvoid traverse(int[] arr) {    \n  for (int i = 0; i < arr.length; i++) {  \n    // 访问 arr[i]    \n  }\n}\n```\n\n二叉树遍历框架，典型的非线性递归遍历结构：\n\n```\nvoid traverse(TreeNode root) {\n    traverse(root.left)\n    traverse(root.right)\n}\n```\n\n以上两个框架可以随意改造。\n\n链表遍历框架，兼具线性和非线性遍历结构：\n\n```\nvoid traverse(ListNode head) {\n    for (ListNode p = head; p != null; p = p.next) {\n        // 访问 p.val\n    }\n}\n\nvoid traverse(ListNode head) {\n    // 访问 head.val\n    traverse(head.next)\n}\n```\n\n二叉树框架又可以具体扩展为 N 叉树的遍历框架：\n\n```\nvoid traverse(TreeNode root) {\n    for (TreeNode child : root.children)\n        traverse(child)\n}\n```\n\nN 叉树的遍历又可以扩展为图的遍历，因为，图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，就不贴代码了。\n\n所谓框架，就是说不管具体问题是什么，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了。\n\n## **三、为什么算法总是和数据结构同时出现**\n\n数据结构是工具，算法是通过合适的工具解决问题的方法。\n\n拿原始人举例，我们学会了数据结构，就像原始人拥有了石刀，石斧等工具。而根据制造工具的工艺不同，石刀又分尖锐的石刀和锯齿状石刀，前者适合打猎，后者适合切割；就像「图」这种数据结构通过不同的实现方法（链表、数组），可以表示为邻接表和邻接矩阵，前者适合处理非稠密图，后者适合处理稠密图。\n\n原始人想要造一栋房子，就要进行规划，石斧砍树，石刀磨尖角等等；就像我们设计算法，发挥数据结构的特性，去解决实际问题。\n\n算法利用数据结构，可以显式利用，比如说前文讲解的 [单调栈](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483803&idx=1&sn=d8c5fac3a15dcac0833445cb934e1a46&chksm=fb3361d9cc44e8cff919df33cf9f1517ce9ad746452f86dd93f282f4964e93ac1eb3abb10cde&scene=21#wechat_redirect)，就是巧妙地直接利用了栈结构先进后出的特性。稍微高级一点的算法设计思路，就是隐式利用数据结构，比如前文讲过的 [回溯算法](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483841&idx=1&sn=9819393f9142892312fa3aeba173c879&chksm=fb336183cc44e895b7e7a29ec52f2504a1a6aa925655bcf129f1c215a376fa67c302d747f253&scene=21#wechat_redirect)、[动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect)，以及传说中的的分治算法，都在利用树这种结构来解决问题。\n\n但是，无论怎样利用数据结构，多么高大上的算法，其解法都逃不出第二点中相应的框架，是不是？\n\n## **四、最后总结（重要）**\n\n对于一个初学算法的人来说，一定要学会从框架上看问题，而不要纠结于细节问题。\n\n啥叫细节问题？比如说 i 到底应该加到 n 还是加到 n - 1 ？这个数组的大小到底应该开 n 还是 n + 1 ？\n\n啥叫从框架上看问题？比如说前文 [动态规划](http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect) 中凑零钱的问题，如果你看了一眼代码就自动排除细节问题，直接提取出 N 叉树遍历框架，那么你的框架思维就到位了。\n```java\nint coinChange(vector<int>& coins, int amount){\n    if(amount == 0){\n        return 0;\n    }\n    int ans = INT_MAX;\n    for (int coin; coins ) {\n        //金额不可达\n        if (amount - coin < 0) {\n            continue;\n        }\n        int subProb = coinChange(coins, amount - coin);\n        //子问题无解\n        if (subProb == -1) {\n            continue;\n        }\n        ans = min(ans, subProb + 1);\n    }\n    return ans == INT_MAX ? -1 : ans;\n}\n\n// N 叉树遍历框架\nint coinChange(vector<int> & coins, int amount){\n    for (int coin; coins) {\n        coinChange(coins, amount - coin);\n    }\n}\n```\n\n\n当然，如果细节出错，你得不到正确的答案，但是只要有框架在，你再错也错不到哪去，因为你的方向是对的。\n\n但是，你要是心中没有框架，那么你根本无法解题，给了你答案，你也不会发现这就是个树的遍历问题。\n\n**这就是框架的力量，能够保证你在快睡着的时候，依然能写出正确的程序；就算你啥都不会，都能比别人高一个级别。**\n\n初学阶段，没到纠结细节的地步。细节出错，可以有各种方法查出来，比如到处打 log，没有找不到的 bug 。\n\n相比之下，别人还束手无策的时候，你已经做出了一个错误的答案；当别人没有框架的指导，被无限细节劝退数据结构的时候，你已经借助框架看穿了数据结构的本质。这不就是一种巨大的成功吗？给你鼓掌。\n",[[1570932767814,["GJX@GJXAIOU",[[-1,102,"先声明一下：首先，这里讲的都是普通的数据结构，咱不是搞算法竞赛的，自学野路子出生，很多厉害的知识我不会，我只会解决常规的问题。另外，以下是我个人的经验的总结，没有哪本书会写这些东西，所以请读者试着理解我的角度，如果不是严重的逻辑错误，没必要纠结于细节问题，因为这篇文章就是希望对数据结构和算法建立一个框架性的认识。相信大家能从这篇文章里学到点东西。\n\n如果你没时间细看，不要错过第四点。"]],[102,295],[102,102]]],[1570932769141,["GJX@GJXAIOU",[[-1,103,"\n"]],[102,102],[101,101]]],[1570932864807,["GJX@GJXAIOU",[[1,399,"**"],[1,417,"**"]],[399,417],[399,421]]],[1570932869461,["GJX@GJXAIOU",[[1,323,"**"],[1,339,"**"]],[323,339],[323,343]]],[1570932913630,["GJX@GJXAIOU",[[1,591,"**"],[1,615,"**"]],[591,615],[591,619]]],[1570932941469,["GJX@GJXAIOU",[[1,641,"**"],[1,657,"**"]],[641,657],[641,661]]],[1570933002260,["GJX@GJXAIOU",[[-1,809,"*"]],[810,810],[809,809]]],[1570933004635,["GJX@GJXAIOU",[[-1,787,"**"]],[789,789],[787,787]]],[1570933006211,["GJX@GJXAIOU",[[-1,806,"*"]],[807,807],[806,806]]],[1570933008908,["GJX@GJXAIOU",[[-1,124,"**"]],[126,126],[124,124]]],[1570933010291,["GJX@GJXAIOU",[[-1,106,"**"]],[108,108],[106,106]]],[1570933039892,["GJX@GJXAIOU",[[-1,866,"试问，除此之外还有其他吗？"]],[866,879],[866,866]]],[1570933054066,["GJX@GJXAIOU",[[1,925,"**"],[1,954,"**"]],[925,954],[925,958]]],[1570933098725,["GJX@GJXAIOU",[[-1,1736,"**"]],[1738,1738],[1736,1736]]],[1570933101821,["GJX@GJXAIOU",[[-1,1754,"**"]],[1756,1756],[1754,1754]]],[1570933107328,["GJX@GJXAIOU",[[1,1756,"**"],[1,1781,"**"]],[1756,1781],[1756,1785]]]],null,"GJX@GJXAIOU"]]}