{"compress":true,"commitItems":[["c9183412-44d1-45bb-b115-29ed73c6d0ac",1559130992680,"",[[1559130937620,["GJX@GJXAIOU",[[1,0,"# 树\n\n\n\n"]],[0,0],[6,6]]],[1559131293740,["GJX@GJXAIOU",[[1,7,"\n"]],[5,5],[6,6]]],[1559131300579,["GJX@GJXAIOU",[[1,6,"## 6.2 树的定义："]],[6,6],[18,18]]],[1559131300820,["GJX@GJXAIOU",[[1,20,"\n"]],[18,18],[19,19]]],[1559131310603,["GJX@GJXAIOU",[[1,20,"•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n\n–有且仅有一个特定的称为根(Root)的结点；\n\n–当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。"]],[20,20],[166,166]]],[1559131314137,["GJX@GJXAIOU",[[-1,66,"–"]],[66,67],[66,66]]],[1559131314542,["GJX@GJXAIOU",[[-1,65,"\n"]],[66,66],[65,65]]],[1559131316964,["GJX@GJXAIOU",[[-1,89,"–"]],[90,90],[89,89]]],[1559131317241,["GJX@GJXAIOU",[[-1,88,"\n"]],[89,89],[88,88]]],[1559131319292,["GJX@GJXAIOU",[[-1,64,"\n"]],[65,65],[64,64]]],[1559131320479,["GJX@GJXAIOU",[[1,64,"\n"]],[64,64],[65,65]]],[1559131321701,["GJX@GJXAIOU",[[1,65,"- "]],[65,65],[67,67]]],[1559131323401,["GJX@GJXAIOU",[[1,90,"- "]],[90,90],[92,92]]],[1559132633884,["GJX@GJXAIOU",[[1,167,"- \n"]],[166,166],[169,169]]],[1559132637025,["GJX@GJXAIOU",[[-1,167,"- "]],[169,169],[167,167]]],[1559132638116,["GJX@GJXAIOU",[[1,168,"\n"]],[167,167],[168,168]]],[1559132639897,["GJX@GJXAIOU",[[1,168,"–n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n\n–m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。"]],[168,168],[229,229]]],[1559132650867,["GJX@GJXAIOU",[[-1,168,"–"]],[169,169],[168,168]]],[1559132651234,["GJX@GJXAIOU",[[1,168,"- "]],[168,168],[170,170]]],[1559132658010,["GJX@GJXAIOU",[[1,167,"注意点："]],[167,167],[171,171]]],[1559132661560,["GJX@GJXAIOU",[[1,167,"\n"]],[167,167],[168,168]]],[1559132664085,["GJX@GJXAIOU",[[-1,203,"–"]],[204,204],[203,203]]],[1559132664617,["GJX@GJXAIOU",[[1,203,"- "]],[203,203],[205,205]]],[1559132667204,["GJX@GJXAIOU",[[-1,202,"\n"]],[202,202],[201,201]]],[1559132704084,["GJX@GJXAIOU",[[1,236,"- \n"]],[235,235],[238,238]]],[1559132704228,["GJX@GJXAIOU",[[-1,236,"- "]],[238,238],[237,237]]],[1559132704388,["GJX@GJXAIOU",[[1,237,"\n"]],[237,237],[238,238]]],[1559132705083,["GJX@GJXAIOU",[[1,238,"\n"]],[238,238],[239,239]]],[1559132707075,["GJX@GJXAIOU",[[-1,238,"\n"],[1,239,"#"]],[239,239],[239,239]]],[1559132712691,["GJX@GJXAIOU",[[1,239,"## 6。"]],[239,239],[244,244]]],[1559132713272,["GJX@GJXAIOU",[[-1,243,"。"]],[244,244],[243,243]]],[1559132720962,["GJX@GJXAIOU",[[1,243,".2.1 结点分类"]],[243,243],[252,252]]],[1559132721559,["GJX@GJXAIOU",[[1,252,"\n\n"]],[252,252],[253,253]]],[1559132725530,["GJX@GJXAIOU",[[-1,17,"："]],[18,18],[17,17]]],[1559132914149,["GJX@GJXAIOU",[[1,253,"\n"]],[252,252],[253,253]]],[1559132914460,["GJX@GJXAIOU",[[-1,253,"\n"],[1,254,"-"]],[253,253],[254,254]]],[1559132926467,["GJX@GJXAIOU",[[1,254," 结点拥有子树数目"]],[254,254],[263,263]]],[1559132931497,["GJX@GJXAIOU",[[1,263,"称为结点的度："]],[263,263],[270,270]]],[1559132932072,["GJX@GJXAIOU",[[-1,269,"："]],[270,270],[269,269]]],[1559132942609,["GJX@GJXAIOU",[[1,269,"；\n- 度为0的结点称为叶结点(Leaf)或终端结点"]],[269,269],[295,295]]],[1559132943411,["GJX@GJXAIOU",[[1,271,"  "]],[295,295],[297,297]]],[1559132957575,["GJX@GJXAIOU",[[1,297,"\n  - –度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。"]],[297,297],[341,341]]],[1559132961068,["GJX@GJXAIOU",[[-1,302,"–"]],[302,303],[302,302]]],[1559132969403,["GJX@GJXAIOU",[[1,340,"\n  - "]],[340,340],[345,345]]],[1559132969544,["GJX@GJXAIOU",[[-1,341,"  - "],[1,345,"\n\n"]],[345,345],[342,342]]],[1559132973875,["GJX@GJXAIOU",[[-1,342,"\n"],[1,343,"数"]],[342,342],[343,343]]],[1559132974309,["GJX@GJXAIOU",[[1,343,"的"]],[343,343],[344,344]]],[1559132975652,["GJX@GJXAIOU",[[-1,343,"的"]],[344,344],[343,343]]],[1559132975825,["GJX@GJXAIOU",[[-1,342,"数"],[1,343,"\n"]],[343,343],[342,342]]],[1559132978367,["GJX@GJXAIOU",[[-1,342,"\n"],[1,343,"树"]],[342,342],[343,343]]],[1559132986437,["GJX@GJXAIOU",[[1,343,"的度是数内"]],[343,343],[348,348]]],[1559132997899,["GJX@GJXAIOU",[[1,348,"各结点"]],[348,348],[351,351]]],[1559133038077,["GJX@GJXAIOU",[[-1,346,"数"]],[347,347],[346,346]]],[1559133040397,["GJX@GJXAIOU",[[1,346,"树"]],[346,346],[347,347]]],[1559133049435,["GJX@GJXAIOU",[[1,351,"的度的最大是"]],[351,351],[357,357]]],[1559133049995,["GJX@GJXAIOU",[[-1,356,"是"]],[357,357],[356,356]]],[1559133051433,["GJX@GJXAIOU",[[1,356,"值；"]],[356,356],[358,358]]],[1559133064557,["GJX@GJXAIOU",[[1,358,"\n\n"]],[358,358],[359,359]]],[1559133064724,["GJX@GJXAIOU",[[1,360,"\n"]],[359,359],[360,360]]],[1559133078700,["GJX@GJXAIOU",[[1,360,"### 6.2.2结点之间的关系"]],[360,360],[376,376]]],[1559133092411,["GJX@GJXAIOU",[[1,377,"\n"]],[376,376],[377,377]]],[1559133107668,["GJX@GJXAIOU",[[1,378,"\n"]],[377,377],[378,378]]],[1559133108106,["GJX@GJXAIOU",[[1,378,"•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。"]],[378,378],[448,448]]],[1559133123779,["GJX@GJXAIOU",[[1,449,"\n"]],[448,448],[449,449]]],[1559133124811,["GJX@GJXAIOU",[[1,449,"•结点的祖先是从根到该结点所经分支上的所有结点。"]],[449,449],[473,473]]],[1559133163960,["GJX@GJXAIOU",[[1,474,"\n"]],[473,473],[474,474]]],[1559133164099,["GJX@GJXAIOU",[[1,475,"\n"]],[474,474],[475,475]]],[1559133166614,["GJX@GJXAIOU",[[1,475,"### "]],[475,475],[479,479]]],[1559133182668,["GJX@GJXAIOU",[[1,479,"6.2.3 数"]],[479,479],[486,486]]],[1559133183222,["GJX@GJXAIOU",[[-1,485,"数"]],[486,486],[485,485]]],[1559133193268,["GJX@GJXAIOU",[[1,485,"树的其他相关概念"]],[485,485],[493,493]]],[1559133193888,["GJX@GJXAIOU",[[1,494,"\n"]],[493,493],[494,494]]],[1559133194225,["GJX@GJXAIOU",[[1,495,"\n"]],[494,494],[495,495]]],[1559133207483,["GJX@GJXAIOU",[[1,495,"•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n\n•其双亲在同一层的结点互为堂兄弟。\n\n•树中结点的最大层次称为树的深度(Depth)或高度。"]],[495,495],[579,579]]],[1559133209602,["GJX@GJXAIOU",[[-1,532,"\n"]],[532,532],[531,531]]],[1559133211279,["GJX@GJXAIOU",[[-1,550,"\n"]],[550,550],[549,549]]],[1559133290664,["GJX@GJXAIOU",[[1,578,"\n"]],[577,577],[578,578]]],[1559133293967,["GJX@GJXAIOU",[[-1,578,"\n"],[1,579,"如果"]],[578,578],[580,580]]],[1559133326973,["GJX@GJXAIOU",[[1,580,"将树中结点的各个子树看成从左到右是有次序的，不嗯呢更换的"]],[580,580],[608,608]]],[1559133329403,["GJX@GJXAIOU",[[-1,603,"嗯呢"]],[605,605],[603,603]]],[1559133331123,["GJX@GJXAIOU",[[1,603,"能"]],[603,603],[604,604]]],[1559133337739,["GJX@GJXAIOU",[[-1,604,"更换"]],[606,606],[604,604]]],[1559133339994,["GJX@GJXAIOU",[[1,604,"互换"]],[604,604],[606,606]]],[1559133344280,["GJX@GJXAIOU",[[1,607,"，则"]],[607,607],[609,609]]],[1559133354084,["GJX@GJXAIOU",[[1,609,"称改"]],[609,609],[611,611]]],[1559133355945,["GJX@GJXAIOU",[[-1,610,"改"]],[611,611],[610,610]]],[1559133390053,["GJX@GJXAIOU",[[1,610,"该树为有序树，否则称为无序树；"]],[610,610],[625,625]]],[1559133391607,["GJX@GJXAIOU",[[1,625,"\n\n"]],[625,625],[626,626]]],[1559133395181,["GJX@GJXAIOU",[[-1,626,"\n"],[1,627,"森林"]],[626,626],[628,628]]],[1559133397530,["GJX@GJXAIOU",[[1,628,"是M"]],[628,628],[630,630]]],[1559133398539,["GJX@GJXAIOU",[[-1,629,"M"]],[630,630],[629,629]]],[1559133400935,["GJX@GJXAIOU",[[1,629,"m()"]],[629,629],[632,632]]],[1559133406098,["GJX@GJXAIOU",[[1,631,"m>=0"]],[631,631],[635,635]]],[1559133428198,["GJX@GJXAIOU",[[1,636,"棵互不相交的树的集合；"]],[636,636],[647,647]]],[1559133511210,["GJX@GJXAIOU",[[1,647,"\n\n"]],[647,647],[648,648]]],[1559133511369,["GJX@GJXAIOU",[[1,649,"\n"]],[648,648],[649,649]]],[1559133511962,["GJX@GJXAIOU",[[1,650,"\n"]],[649,649],[650,650]]],[1559133523796,["GJX@GJXAIOU",[[1,650,"## 6.3 树的抽象数据类型"]],[650,650],[665,665]]],[1559133524296,["GJX@GJXAIOU",[[1,666,"\n"]],[665,665],[666,666]]],[1559133525291,["GJX@GJXAIOU",[[1,667,"\n"]],[666,666],[667,667]]],[1559133526120,["GJX@GJXAIOU",[[-1,667,"\n"],[1,668,"`"]],[667,667],[668,668]]],[1559133526569,["GJX@GJXAIOU",[[1,668,"``"]],[668,668],[670,670]]],[1559133526599,["GJX@GJXAIOU",[[1,670,"language\n```\n"]],[670,670],[670,678]]],[1559133527904,["GJX@GJXAIOU",[[-1,670,"language"],[1,678,"c"]],[670,678],[671,671]]],[1559133528668,["GJX@GJXAIOU",[[1,672,"\n"]],[671,671],[672,672]]],[1559133530179,["GJX@GJXAIOU",[[1,672,"ADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT"]],[672,672],[1363,1363]]],[1559133946211,["GJX@GJXAIOU",[[1,1368,"\n"]],[1367,1367],[1368,1368]]],[1559133946373,["GJX@GJXAIOU",[[1,1369,"\n"]],[1368,1368],[1369,1369]]],[1559133950952,["GJX@GJXAIOU",[[1,1370,"\n"]],[1369,1369],[1370,1370]]],[1559133951108,["GJX@GJXAIOU",[[1,1371,"\n"]],[1370,1370],[1371,1371]]],[1559133960228,["GJX@GJXAIOU",[[1,1372,"\n"]],[1369,1369],[1370,1370]]],[1559133960388,["GJX@GJXAIOU",[[1,1373,"\n"]],[1370,1370],[1371,1371]]],[1559133964665,["GJX@GJXAIOU",[[1,1371,"## 6.4"]],[1371,1371],[1377,1377]]],[1559134103183,["GJX@GJXAIOU",[[1,1377," shu"]],[1377,1377],[1381,1381]]],[1559134104044,["GJX@GJXAIOU",[[-1,1378,"shu"]],[1381,1381],[1378,1378]]],[1559134108844,["GJX@GJXAIOU",[[1,1378,"树的存储结构"]],[1378,1378],[1384,1384]]],[1559134216244,["GJX@GJXAIOU",[[1,1387,"\n"]],[1384,1384],[1385,1385]]],[1559134216391,["GJX@GJXAIOU",[[1,1388,"\n"]],[1385,1385],[1386,1386]]],[1559134235757,["GJX@GJXAIOU",[[1,1386,"- 三种表示方法：双亲表示法，孩子表示法，"]],[1386,1386],[1407,1407]]],[1559134237047,["GJX@GJXAIOU",[[-1,1406,"，"]],[1407,1407],[1406,1406]]],[1559134246373,["GJX@GJXAIOU",[[1,1406,"、孩子兄弟"]],[1406,1406],[1411,1411]]],[1559134248730,["GJX@GJXAIOU",[[1,1411,"表示法"]],[1411,1411],[1414,1414]]],[1559134249326,["GJX@GJXAIOU",[[1,1415,"- \n"]],[1414,1414],[1417,1417]]],[1559134251347,["GJX@GJXAIOU",[[-1,1415,"- "]],[1417,1417],[1415,1415]]],[1559134252292,["GJX@GJXAIOU",[[1,1418,"\n"]],[1415,1415],[1416,1416]]],[1559134252414,["GJX@GJXAIOU",[[1,1419,"\n"]],[1416,1416],[1417,1417]]],[1559134257695,["GJX@GJXAIOU",[[1,1417,"### 6.4.2"]],[1417,1417],[1426,1426]]],[1559134258186,["GJX@GJXAIOU",[[-1,1425,"2"]],[1426,1426],[1425,1425]]],[1559134264171,["GJX@GJXAIOU",[[1,1425,"1 双亲表示法"]],[1425,1425],[1432,1432]]],[1559134264907,["GJX@GJXAIOU",[[1,1435,"\n"]],[1432,1432],[1433,1433]]],[1559134265272,["GJX@GJXAIOU",[[1,1436,"\n"]],[1433,1433],[1434,1434]]],[1559134485514,["GJX@GJXAIOU",[[1,1434,"在每个结点"]],[1434,1434],[1439,1439]]],[1559134519154,["GJX@GJXAIOU",[[1,1439,"中附设一个指示器指示其双亲结点在数组中的位置。"]],[1439,1439],[1462,1462]]],[1559134723427,["GJX@GJXAIOU",[[1,1465,"\n"]],[1463,1463],[1464,1464]]],[1559134730363,["GJX@GJXAIOU",[[1,1464,"![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)"]],[1464,1464],[1574,1574]]],[1559134732451,["GJX@GJXAIOU",[[1,1575,"\n"]],[1574,1574],[1575,1575]]],[1559134764756,["GJX@GJXAIOU",[[1,1576,"\n"]],[1573,1573],[1574,1574]]],[1559134764915,["GJX@GJXAIOU",[[1,1577,"\n"]],[1574,1574],[1575,1575]]],[1559134777385,["GJX@GJXAIOU",[[1,1575,"双亲表示法结点结构定义代码："]],[1575,1575],[1589,1589]]],[1559134777770,["GJX@GJXAIOU",[[1,1592,"\n"]],[1589,1589],[1590,1590]]],[1559134779352,["GJX@GJXAIOU",[[1,1590,"```"]],[1590,1590],[1593,1593]]],[1559134779378,["GJX@GJXAIOU",[[1,1593,"language\n```\n"]],[1593,1593],[1593,1601]]],[1559134780640,["GJX@GJXAIOU",[[-1,1593,"language"],[1,1601,"c"]],[1593,1601],[1594,1594]]],[1559134780902,["GJX@GJXAIOU",[[1,1595,"\n"]],[1594,1594],[1595,1595]]],[1559134782114,["GJX@GJXAIOU",[[1,1595,"#define MAX_TREE_SIZE 100\n\ntypedef int ElemType;\n\ntypedef struct PTNode\n{\n\tElemType data;\t// 缁撶偣鏁版嵁\n\tint parent;\t\t// 鍙屼翰浣嶇疆\n}PTNode;\n\ntypedef struct\n{\n\tPTNode nodes[MAX_TREE_SIZE];\n\tint r;\t\t\t// 鏍圭殑浣嶇疆\n\tint n;\t\t\t// 缁撶偣鏁扮洰\n}PTree;"]],[1595,1595],[1823,1823]]],[1559134784634,["GJX@GJXAIOU",[[1,1595,"\n"]],[1594,1594],[1595,1595]]],[1559134785866,["GJX@GJXAIOU",[[1,1595,"//"]],[1595,1595],[1597,1597]]],[1559134798261,["GJX@GJXAIOU",[[1,1597,"数的双亲表示法结点结构定义"]],[1597,1597],[1610,1610]]],[1559134801671,["GJX@GJXAIOU",[[-1,1637,"\n"]],[1637,1637],[1636,1636]]],[1559134816980,["GJX@GJXAIOU",[[1,1681," 、"]],[1681,1681],[1683,1683]]],[1559134817571,["GJX@GJXAIOU",[[-1,1682,"、"]],[1683,1683],[1682,1682]]],[1559134820635,["GJX@GJXAIOU",[[1,1682,"//结点结构"]],[1682,1682],[1688,1688]]],[1559134831925,["GJX@GJXAIOU",[[-1,1710,"缁撶偣鏁版嵁"],[1,1716,"结点"]],[1710,1710],[1712,1712]]],[1559134832919,["GJX@GJXAIOU",[[1,1712,"数据"]],[1712,1712],[1714,1714]]],[1559134837983,["GJX@GJXAIOU",[[-1,1732,"鍙屼翰浣嶇疆"],[1,1738,"双亲"]],[1732,1732],[1734,1734]]],[1559134838813,["GJX@GJXAIOU",[[1,1734,"位置"]],[1734,1734],[1736,1736]]],[1559134863167,["GJX@GJXAIOU",[[1,1761,"  "]],[1761,1761],[1763,1763]]],[1559134864116,["GJX@GJXAIOU",[[-1,1762," "]],[1763,1763],[1762,1762]]],[1559134865787,["GJX@GJXAIOU",[[1,1762,"。。="]],[1762,1762],[1765,1765]]],[1559134866527,["GJX@GJXAIOU",[[-1,1762,"。。="]],[1765,1765],[1762,1762]]],[1559134869893,["GJX@GJXAIOU",[[1,1762,"//数"]],[1762,1762],[1765,1765]]],[1559134871997,["GJX@GJXAIOU",[[-1,1764,"数"]],[1765,1765],[1764,1764]]],[1559134875074,["GJX@GJXAIOU",[[1,1764,"树结构"]],[1764,1764],[1767,1767]]],[1559134880474,["GJX@GJXAIOU",[[-1,1810,"// 鏍圭殑浣嶇疆"]],[1810,1819],[1810,1810]]],[1559134883276,["GJX@GJXAIOU",[[-1,1821,"// 缁撶偣鏁扮洰"]],[1821,1830],[1821,1821]]],[1559134892083,["GJX@GJXAIOU",[[1,1799," 、、"]],[1799,1799],[1802,1802]]],[1559134892804,["GJX@GJXAIOU",[[-1,1800,"、、"]],[1802,1802],[1800,1800]]],[1559134895822,["GJX@GJXAIOU",[[1,1800,"//结点数组"]],[1800,1800],[1806,1806]]],[1559134902124,["GJX@GJXAIOU",[[1,1817," //跟"]],[1817,1817],[1821,1821]]],[1559134903142,["GJX@GJXAIOU",[[-1,1820,"跟"]],[1821,1821],[1820,1820]]],[1559134906199,["GJX@GJXAIOU",[[1,1820,"根的"]],[1820,1820],[1822,1822]]],[1559134910885,["GJX@GJXAIOU",[[1,1822,"位置和节点数"]],[1822,1822],[1828,1828]]]],null,"GJX@GJXAIOU"],["bab8c3e3-1427-4060-a068-402c11a06e13",1559200268357,"# 树\n\n\n## 6.2 树的定义\n\n•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n- 有且仅有一个特定的称为根(Root)的结点；\n- 当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n\n注意点：\n- n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n- m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。\n\n\n### 6.2.1 结点分类\n\n- 结点拥有子树数目称为结点的度；\n  - 度为0的结点称为叶结点(Leaf)或终端结点\n  - 度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。\n\n树的度是树内各结点的度的最大值；\n\n### 6.2.2结点之间的关系\n\n•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。\n•结点的祖先是从根到该结点所经分支上的所有结点。\n\n### 6.2.3 树的其他相关概念\n\n•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n•其双亲在同一层的结点互为堂兄弟。\n•树中结点的最大层次称为树的深度(Depth)或高度。\n如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树；\n森林是m(m>=0)棵互不相交的树的集合；\n\n\n## 6.3 树的抽象数据类型\n\n```c\nADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT\n```\n\n\n\n## 6.4 树的存储结构\n\n- 三种表示方法：双亲表示法，孩子表示法、孩子兄弟表示法\n\n\n### 6.4.1 双亲表示法\n\n在每个结点中附设一个指示器指示其双亲结点在数组中的位置。\n\n![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n双亲表示法结点结构定义代码：\n```c\n//数的双亲表示法结点结构定义\n#define MAX_TREE_SIZE 100\ntypedef int ElemType;\n\ntypedef struct PTNode //结点结构\n{\n\tElemType data;\t// 结点数据\n\tint parent;\t\t// 双亲位置\n}PTNode;\n\ntypedef struct //树结构\n{\n\tPTNode nodes[MAX_TREE_SIZE]; //结点数组\n\tint r;\t\t\t //根的位置和节点数\n\tint n;\t\t\t\n}PTree;\n```\n\n\n\n",[[1559200247139,["GJX@GJXAIOU",[[1,1855,"\n"]],[1851,1851],[1852,1852]]],[1559200247284,["GJX@GJXAIOU",[[1,1856,"\n"]],[1852,1852],[1853,1853]]],[1559200377981,["GJX@GJXAIOU",[[1,1857,"\n"]],[1851,1851],[1852,1852]]],[1559200378430,["GJX@GJXAIOU",[[1,1858,"\n"]],[1852,1852],[1853,1853]]],[1559200380354,["GJX@GJXAIOU",[[1,1853,"注："]],[1853,1853],[1855,1855]]],[1559200403103,["GJX@GJXAIOU",[[1,1855,"根节点的"]],[1855,1855],[1859,1859]]],[1559200486853,["GJX@GJXAIOU",[[1,1859,"位置域即pr"]],[1859,1859],[1865,1865]]],[1559200487525,["GJX@GJXAIOU",[[-1,1864,"r"]],[1865,1865],[1864,1864]]],[1559200488014,["GJX@GJXAIOU",[[1,1864,"atr"]],[1864,1864],[1867,1867]]],[1559200488859,["GJX@GJXAIOU",[[-1,1865,"tr"]],[1867,1867],[1865,1865]]],[1559200497231,["GJX@GJXAIOU",[[1,1865,"rent域设置为-1；"]],[1865,1865],[1876,1876]]],[1559200988860,["GJX@GJXAIOU",[[1,1882,"\n"]],[1876,1876],[1877,1877]]],[1559201016782,["GJX@GJXAIOU",[[1,1877,"图示如下："]],[1877,1877],[1882,1882]]],[1559201017199,["GJX@GJXAIOU",[[1,1888,"\n"]],[1882,1882],[1883,1883]]],[1559201215343,["GJX@GJXAIOU",[[1,1889,"\n"]],[1883,1883],[1884,1884]]],[1559201221873,["GJX@GJXAIOU",[[1,1884,"![双亲表示法]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)"]],[1884,1884],[1954,1954]]],[1559201223467,["GJX@GJXAIOU",[[1,1959,"\n"]],[1954,1954],[1955,1955]]],[1559201224599,["GJX@GJXAIOU",[[1,1960,"\n"]],[1955,1955],[1956,1956]]],[1559201227646,["GJX@GJXAIOU",[[1,1956,"补充："]],[1956,1956],[1959,1959]]],[1559201230991,["GJX@GJXAIOU",[[-1,1958,"："]],[1959,1959],[1958,1958]]],[1559201233453,["GJX@GJXAIOU",[[1,1958,"：上面 "]],[1958,1958],[1962,1962]]],[1559201234242,["GJX@GJXAIOU",[[-1,1961," "]],[1962,1962],[1961,1961]]],[1559201286768,["GJX@GJXAIOU",[[1,1961,"的双亲表示法无法很方便的之后某个结点的孩子结点有哪些，因此在结点结构的加上一个最左边（）"]],[1961,1961],[2005,2005]]],[1559201290214,["GJX@GJXAIOU",[[1,2004,"章子"]],[2004,2004],[2006,2006]]],[1559201290784,["GJX@GJXAIOU",[[-1,2004,"章子"]],[2006,2006],[2004,2004]]],[1559201292999,["GJX@GJXAIOU",[[1,2004,"长子"]],[2004,2004],[2006,2006]]],[1559201302495,["GJX@GJXAIOU",[[1,2007,"域，没有还在"]],[2007,2007],[2013,2013]]],[1559201305238,["GJX@GJXAIOU",[[-1,2011,"还在"]],[2013,2013],[2011,2011]]],[1559201312311,["GJX@GJXAIOU",[[1,2011,"孩子的节点"]],[2011,2011],[2016,2016]]],[1559201312995,["GJX@GJXAIOU",[[-1,2014,"节点"]],[2016,2016],[2014,2014]]],[1559201332112,["GJX@GJXAIOU",[[1,2014,"结点长子域设置为-1；"]],[2014,2014],[2025,2025]]],[1559201382770,["GJX@GJXAIOU",[[1,2030,"\n"]],[2025,2025],[2026,2026]]],[1559201387456,["GJX@GJXAIOU",[[1,2026,"因袭结构"]],[2026,2026],[2030,2030]]],[1559201390912,["GJX@GJXAIOU",[[-1,2026,"因袭结构"]],[2030,2030],[2026,2026]]],[1559201393834,["GJX@GJXAIOU",[[1,2026,"因此界都"]],[2026,2026],[2030,2030]]],[1559201394428,["GJX@GJXAIOU",[[-1,2028,"界都"]],[2030,2030],[2028,2028]]],[1559201396565,["GJX@GJXAIOU",[[1,2028,"结构"]],[2028,2028],[2030,2030]]],[1559201400099,["GJX@GJXAIOU",[[-1,2026,"因此结构"]],[2030,2030],[2026,2026]]],[1559201400520,["GJX@GJXAIOU",[[-1,2030,"\n"]],[2026,2026],[2025,2025]]],[1559201437200,["GJX@GJXAIOU",[[1,2030,"\n"]],[2025,2025],[2026,2026]]],[1559201442960,["GJX@GJXAIOU",[[1,2026,"如果同时"]],[2026,2026],[2030,2030]]],[1559201561295,["GJX@GJXAIOU",[[1,2030,"关注各兄弟之间的关系；可以同时加上一个"]],[2030,2030],[2049,2049]]],[1559201595107,["GJX@GJXAIOU",[[1,2049,"右兄弟域"]],[2049,2049],[2053,2053]]],[1559201767752,["GJX@GJXAIOU",[[1,2053,"，如果存在"]],[2053,2053],[2058,2058]]],[1559201785012,["GJX@GJXAIOU",[[1,2058,"右兄弟则记录下标，没有就记为-1;"]],[2058,2058],[2075,2075]]],[1559201786795,["GJX@GJXAIOU",[[1,2080,"\n"]],[2075,2075],[2076,2076]]],[1559202906134,["GJX@GJXAIOU",[[1,2077,"buchong"]],[2077,2077],[2084,2084]]],[1559202907721,["GJX@GJXAIOU",[[-1,2077,"buchong"]],[2084,2084],[2077,2077]]],[1559202910520,["GJX@GJXAIOU",[[1,2077,"补充"]],[2077,2077],[2079,2079]]],[1559202912429,["GJX@GJXAIOU",[[-1,2077,"补充"]],[2079,2079],[2077,2077]]],[1559202943910,["GJX@GJXAIOU",[[1,2077,"补充之后图示："]],[2077,2077],[2084,2084]]],[1559202944514,["GJX@GJXAIOU",[[1,2088,"\n"]],[2084,2084],[2085,2085]]],[1559202985508,["GJX@GJXAIOU",[[1,2085,"![双亲表示法补充]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%A1%A5%E5%85%85.jpg)"]],[2085,2085],[2175,2175]]],[1559202987778,["GJX@GJXAIOU",[[1,2178,"\n"]],[2175,2175],[2176,2176]]],[1559203057366,["GJX@GJXAIOU",[[1,2176,"===="]],[2176,2176],[2178,2178]]],[1559203076867,["GJX@GJXAIOU",[[1,2178,"实际使用过程中，存储结构的设计十分灵活"]],[2178,2178],[2197,2197]]],[1559203109369,["GJX@GJXAIOU",[[1,2197,"，根据具体情况采用"]],[2197,2197],[2206,2206]]],[1559203299538,["GJX@GJXAIOU",[[1,2211,"\n"]],[2210,2210],[2211,2211]]],[1559203299666,["GJX@GJXAIOU",[[1,2212,"\n"]],[2211,2211],[2212,2212]]],[1559203308475,["GJX@GJXAIOU",[[1,2212,"### 6.4.2 haizi"]],[2212,2212],[2227,2227]]],[1559203309467,["GJX@GJXAIOU",[[-1,2222,"haizi"]],[2227,2227],[2222,2222]]],[1559203314288,["GJX@GJXAIOU",[[1,2222,"孩子表示法"]],[2222,2222],[2227,2227]]],[1559203315006,["GJX@GJXAIOU",[[1,2228,"\n"]],[2227,2227],[2228,2228]]],[1559203534378,["GJX@GJXAIOU",[[1,2229,"\n"]],[2228,2228],[2229,2229]]],[1559203565744,["GJX@GJXAIOU",[[-1,2229,"\n"],[1,2230,"因为"]],[2229,2229],[2231,2231]]],[1559203567255,["GJX@GJXAIOU",[[1,2231,"数的"]],[2231,2231],[2233,2233]]],[1559203583045,["GJX@GJXAIOU",[[1,2233,"每个结点可能含有多个子树，因袭"]],[2233,2233],[2248,2248]]],[1559203583706,["GJX@GJXAIOU",[[-1,2246,"因袭"]],[2248,2248],[2246,2246]]],[1559203617293,["GJX@GJXAIOU",[[1,2246,"因此可以使用多重链表：每个结点有多个指针域，其中每个指针指向一颗"]],[2246,2246],[2278,2278]]],[1559203618929,["GJX@GJXAIOU",[[-1,2276,"一颗"]],[2278,2278],[2276,2276]]],[1559203625828,["GJX@GJXAIOU",[[1,2276,"一棵"]],[2276,2276],[2278,2278]]],[1559203647222,["GJX@GJXAIOU",[[1,2278,"子树的根节点，称为多重链表表示法；"]],[2278,2278],[2295,2295]]],[1559203649009,["GJX@GJXAIOU",[[1,2295,"\n\n"]],[2295,2295],[2296,2296]]],[1559203650548,["GJX@GJXAIOU",[[1,2297,"\n"]],[2296,2296],[2297,2297]]],[1559203651529,["GJX@GJXAIOU",[[1,2298,"\n"]],[2297,2297],[2298,2298]]],[1559203652894,["GJX@GJXAIOU",[[-1,2298,"\n"],[1,2299,"-"]],[2298,2298],[2299,2299]]],[1559203669606,["GJX@GJXAIOU",[[1,2299," 方案一：指针域的个数等于数的度"]],[2299,2299],[2315,2315]]],[1559203675530,["GJX@GJXAIOU",[[-1,2312,"数的度"]],[2315,2315],[2312,2312]]],[1559203680968,["GJX@GJXAIOU",[[1,2312,"树的度（）"]],[2312,2312],[2317,2317]]],[1559203687526,["GJX@GJXAIOU",[[1,2316,"树的度为数的"]],[2316,2316],[2322,2322]]],[1559203699414,["GJX@GJXAIOU",[[1,2322,"各个结点度的最大值"]],[2322,2322],[2331,2331]]],[1559203720788,["GJX@GJXAIOU",[[1,2332,"\n- "]],[2332,2332],[2335,2335]]],[1559203721857,["GJX@GJXAIOU",[[-1,2334," "]],[2335,2335],[2334,2334]]],[1559203722019,["GJX@GJXAIOU",[[-1,2333,"-"],[1,2334,"\n"]],[2334,2334],[2333,2333]]],[1559203724044,["GJX@GJXAIOU",[[-1,2333,"\n"],[1,2334,"当"]],[2333,2333],[2334,2334]]],[1559203743655,["GJX@GJXAIOU",[[1,2334,"树中各个结点的度相差很大的时候，蓝给"]],[2334,2334],[2352,2352]]],[1559203745481,["GJX@GJXAIOU",[[-1,2350,"蓝给"]],[2352,2352],[2350,2350]]],[1559203758754,["GJX@GJXAIOU",[[1,2350,"浪费空间；，"]],[2350,2350],[2356,2356]]],[1559203759649,["GJX@GJXAIOU",[[-1,2355,"，"]],[2356,2356],[2355,2355]]],[1559203776915,["GJX@GJXAIOU",[[1,2355,"相差很小的时候是一种有点"]],[2355,2355],[2367,2367]]],[1559203777977,["GJX@GJXAIOU",[[-1,2365,"有点"]],[2367,2367],[2365,2365]]],[1559203781518,["GJX@GJXAIOU",[[1,2365,"优点；"]],[2365,2365],[2368,2368]]],[1559203795411,["GJX@GJXAIOU",[[1,2368,"\n\n"]],[2368,2368],[2369,2369]]],[1559203795978,["GJX@GJXAIOU",[[1,2370,"\n"]],[2369,2369],[2370,2370]]],[1559203797500,["GJX@GJXAIOU",[[-1,2370,"\n"],[1,2371,"-"]],[2370,2370],[2371,2371]]],[1559203800644,["GJX@GJXAIOU",[[1,2371," 方案二："]],[2371,2371],[2376,2376]]],[1559203830687,["GJX@GJXAIOU",[[1,2376,"每个结点指针域的个数等于该结点的度"]],[2376,2376],[2393,2393]]],[1559203885977,["GJX@GJXAIOU",[[1,2370,"\n"]],[2369,2369],[2370,2370]]],[1559203896921,["GJX@GJXAIOU",[[1,2394,"\n- "]],[2394,2394],[2397,2397]]],[1559203897505,["GJX@GJXAIOU",[[-1,2395,"- "],[1,2397,"\n\n"]],[2397,2397],[2396,2396]]],[1559203900713,["GJX@GJXAIOU",[[-1,2396,"\n"]],[2396,2396],[2395,2395]]],[1559203912095,["GJX@GJXAIOU",[[-1,2395,"\n"],[1,2396,"空间利用率"]],[2395,2395],[2400,2400]]],[1559203916349,["GJX@GJXAIOU",[[1,2400,"更高了"]],[2400,2400],[2403,2403]]],[1559203988004,["GJX@GJXAIOU",[[1,2403,"，但是维护各个结点度的"]],[2403,2403],[2414,2414]]],[1559203993574,["GJX@GJXAIOU",[[1,2414,"数值较为麻烦"]],[2414,2414],[2420,2420]]],[1559204009629,["GJX@GJXAIOU",[[1,2406,"因为各个结点的链表结构不同；"]],[2406,2406],[2420,2420]]],[1559204010424,["GJX@GJXAIOU",[[-1,2419,"；"]],[2420,2420],[2419,2419]]],[1559204011052,["GJX@GJXAIOU",[[1,2419,"，"]],[2419,2419],[2420,2420]]],[1559204197190,["GJX@GJXAIOU",[[1,2370,"![孩子表示法方案一]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80.png)"]],[2370,2370],[2470,2470]]],[1559204199353,["GJX@GJXAIOU",[[1,2370,"\n"]],[2369,2369],[2370,2370]]],[1559204440643,["GJX@GJXAIOU",[[1,2371,"\n"]],[2370,2370],[2371,2371]]],[1559204455884,["GJX@GJXAIOU",[[1,2370,"![孩子表示法方案一结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)"]],[2370,2370],[2510,2510]]],[1559204601464,["GJX@GJXAIOU",[[1,2638,"\n"]],[2638,2638],[2639,2639]]],[1559204602992,["GJX@GJXAIOU",[[-1,2638,"\n"]],[2639,2639],[2638,2638]]],[1559204605939,["GJX@GJXAIOU",[[1,2674,"\n\n"]],[2674,2674],[2675,2675]]],[1559204606572,["GJX@GJXAIOU",[[1,2676,"\n"]],[2675,2675],[2676,2676]]],[1559204618077,["GJX@GJXAIOU",[[1,2676,"![孩子表示法方案二结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n"]],[2676,2676],[2816,2816]]],[1559204620040,["GJX@GJXAIOU",[[1,2611,"\n"]],[2610,2610],[2611,2611]]],[1559204622696,["GJX@GJXAIOU",[[1,2818,"\n"]],[2816,2816],[2817,2817]]],[1559204622824,["GJX@GJXAIOU",[[1,2819,"\n"]],[2817,2817],[2818,2818]]],[1559204672157,["GJX@GJXAIOU",[[1,2819,"![孩子表示法方案二]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n"]],[2819,2819],[2919,2919]]],[1559204674712,["GJX@GJXAIOU",[[1,2920,"\n"]],[2918,2918],[2919,2919]]],[1559204674872,["GJX@GJXAIOU",[[1,2921,"\n"]],[2919,2919],[2920,2920]]],[1559205433746,["GJX@GJXAIOU",[[-1,2921,"\n"],[1,2922,"-"]],[2921,2921],[2922,2922]]],[1559205437227,["GJX@GJXAIOU",[[1,2922," 具体方案："]],[2922,2922],[2928,2928]]],[1559205439920,["GJX@GJXAIOU",[[-1,2927,"："]],[2928,2928],[2927,2927]]],[1559205441119,["GJX@GJXAIOU",[[1,2927,"：\n- "]],[2927,2927],[2931,2931]]],[1559205442177,["GJX@GJXAIOU",[[-1,2930," "]],[2931,2931],[2930,2930]]],[1559205442303,["GJX@GJXAIOU",[[-1,2929,"-"],[1,2930,"\n"]],[2930,2930],[2929,2929]]],[1559205444764,["GJX@GJXAIOU",[[-1,2929,"\n"],[1,2930,"把"]],[2929,2929],[2930,2930]]],[1559205487350,["GJX@GJXAIOU",[[1,2930,"每个结点的孩子结点排列起来，以单链表做存储结构，则n个结点有n个孩子"]],[2930,2930],[2964,2964]]],[1559205492681,["GJX@GJXAIOU",[[1,2964,"链表，乳沟"]],[2964,2964],[2969,2969]]],[1559205494329,["GJX@GJXAIOU",[[-1,2967,"乳沟"]],[2969,2969],[2967,2967]]],[1559205513550,["GJX@GJXAIOU",[[1,2967,"如果是叶子结点则此单链表为空行"]],[2967,2967],[2982,2982]]],[1559205514168,["GJX@GJXAIOU",[[-1,2981,"行"]],[2982,2982],[2981,2981]]],[1559205546451,["GJX@GJXAIOU",[[1,2981,"；然后n个头指针又组成一个线性表，采用顺序储存结构，"]],[2981,2981],[3007,3007]]],[1559205549947,["GJX@GJXAIOU",[[1,3007,"存放仅"]],[3007,3007],[3010,3010]]],[1559205550753,["GJX@GJXAIOU",[[-1,3009,"仅"]],[3010,3010],[3009,3009]]],[1559205559429,["GJX@GJXAIOU",[[1,3009,"进一个一维数组中，"]],[3009,3009],[3018,3018]]],[1559205560136,["GJX@GJXAIOU",[[-1,3017,"，"]],[3018,3018],[3017,3017]]],[1559205561794,["GJX@GJXAIOU",[[1,3017,"。"]],[3017,3017],[3018,3018]]],[1559205562585,["GJX@GJXAIOU",[[1,3018,"\n\n"]],[3018,3018],[3019,3019]]],[1559205565237,["GJX@GJXAIOU",[[-1,3019,"\n"],[1,3020,"如下图"]],[3019,3019],[3022,3022]]],[1559205566809,["GJX@GJXAIOU",[[1,3022,"所示："]],[3022,3022],[3025,3025]]],[1559205568080,["GJX@GJXAIOU",[[1,3025,"\n\n"]],[3025,3025],[3026,3026]]],[1559206209206,["GJX@GJXAIOU",[[1,3026,"![图片1]($resource/%E5%9B%BE%E7%89%871.jpg)\n"]],[3026,3026],[3068,3068]]],[1559206215737,["GJX@GJXAIOU",[[1,3069,"\n"]],[3068,3068],[3069,3069]]],[1559206215879,["GJX@GJXAIOU",[[1,3070,"\n"]],[3069,3069],[3070,3070]]],[1559206219476,["GJX@GJXAIOU",[[-1,3070,"\n"],[1,3071,"孩子"]],[3070,3070],[3072,3072]]],[1559206228883,["GJX@GJXAIOU",[[1,3072,"表示法的结构定义代码："]],[3072,3072],[3083,3083]]],[1559206229118,["GJX@GJXAIOU",[[1,3083,"\n\n"]],[3083,3083],[3084,3084]]],[1559206230240,["GJX@GJXAIOU",[[1,3085,"\n"]],[3084,3084],[3085,3085]]],[1559206231409,["GJX@GJXAIOU",[[-1,3085,"\n"]],[3085,3085],[3084,3084]]],[1559206232331,["GJX@GJXAIOU",[[-1,3084,"\n"],[1,3085,"·"]],[3084,3084],[3085,3085]]],[1559206232724,["GJX@GJXAIOU",[[1,3085,"··"]],[3085,3085],[3087,3087]]],[1559206233801,["GJX@GJXAIOU",[[-1,3085,"··"]],[3087,3087],[3085,3085]]],[1559206233950,["GJX@GJXAIOU",[[-1,3084,"·"],[1,3085,"\n"]],[3085,3085],[3084,3084]]],[1559206234776,["GJX@GJXAIOU",[[-1,3084,"\n"],[1,3085,"`"]],[3084,3084],[3085,3085]]],[1559206235162,["GJX@GJXAIOU",[[1,3085,"``"]],[3085,3085],[3087,3087]]],[1559206235190,["GJX@GJXAIOU",[[1,3087,"language\n```\n"]],[3087,3087],[3087,3095]]],[1559206236280,["GJX@GJXAIOU",[[-1,3087,"language"],[1,3095,"c"]],[3087,3095],[3088,3088]]],[1559206236465,["GJX@GJXAIOU",[[1,3089,"\n"]],[3088,3088],[3089,3089]]],[1559206257639,["GJX@GJXAIOU",[[1,3089,"#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 瀛╁瓙缁撶偣\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 瀛╁瓙缁撶偣鐨勪笅鏍?\n\tstruct CTNode *next;\t// 鎸囧悜涓嬩竴涓瀛愮粨鐐圭殑鎸囬拡\n} *ChildPtr;\n\n// 琛ㄥご缁撴瀯\ntypedef struct\n{\t\n\tElemType data;\t\t\t// 瀛樻斁鍦ㄦ爲涓殑缁撶偣鐨勬暟鎹?\n\tint parent;\t\t\t\t// 瀛樻斁鍙屼翰鐨勪笅鏍?\n\tChildPtr firstchild;\t// 鎸囧悜绗竴涓瀛愮殑鎸囬拡\n} CTBox;\n\n// 鏍戠粨鏋?\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 缁撶偣鏁扮粍\n\tint r, n;\n}"]],[3089,3089],[3489,3489]]],[1559206261041,["GJX@GJXAIOU",[[-1,3089,"#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 瀛╁瓙缁撶偣\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 瀛╁瓙缁撶偣鐨勪笅鏍?\n\tstruct CTNode *next;\t// 鎸囧悜涓嬩竴涓瀛愮粨鐐圭殑鎸囬拡\n} *ChildPtr;\n\n// 琛ㄥご缁撴瀯\ntypedef struct\n{\t\n\tElemType data;\t\t\t// 瀛樻斁鍦ㄦ爲涓殑缁撶偣鐨勬暟鎹?\n\tint parent;\t\t\t\t// 瀛樻斁鍙屼翰鐨勪笅鏍?\n\tChildPtr firstchild;\t// 鎸囧悜绗竴涓瀛愮殑鎸囬拡\n} CTBox;\n\n// 鏍戠粨鏋?\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 缁撶偣鏁扮粍\n\tint r, n;\n}"]],[3489,3489],[3089,3089]]],[1559206452583,["GJX@GJXAIOU",[[1,3089,"/*\n\t孩子表示法结构定义\n*/\n#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 孩子结点\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 该结点在表头数组中的下标\n\tstruct CTNode *next;\t\n} *ChildPtr;\n\n// 表头结构\ntypedef struct\n{\t\n\tElemType data;\t\t\t\n\tint parent;\t\t\t\t\n\tChildPtr firstchild;\t// 存储该结点孩子链表的头指针\n} CTBox;\n\n//树结构\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 结点数组\n\tint r, n; //根的位置和结点数\n}"]],[3089,3089],[3452,3452]]],[1559206495657,["GJX@GJXAIOU",[[1,3457,"\n"]],[3456,3456],[3457,3457]]],[1559206495784,["GJX@GJXAIOU",[[1,3458,"\n"]],[3457,3457],[3458,3458]]],[1559206497371,["GJX@GJXAIOU",[[-1,3458,"\n"],[1,3459,"g"]],[3458,3458],[3459,3459]]],[1559206497544,["GJX@GJXAIOU",[[1,3459,"ai"]],[3459,3459],[3461,3461]]],[1559206498278,["GJX@GJXAIOU",[[-1,3459,"ai"]],[3461,3461],[3459,3459]]],[1559206498570,["GJX@GJXAIOU",[[-1,3458,"g"],[1,3459,"\n"]],[3459,3459],[3458,3458]]],[1559206499725,["GJX@GJXAIOU",[[-1,3458,"\n"],[1,3459,"该"]],[3458,3458],[3459,3459]]],[1559206508170,["GJX@GJXAIOU",[[1,3459,"结构便于查找某个"]],[3459,3459],[3467,3467]]],[1559206552518,["GJX@GJXAIOU",[[1,3467,"结点的某个孩子或者某个结点的兄弟有利，但是要查找某个结点的双亲就需要遍历整棵树，可以才有"]],[3467,3467],[3511,3511]]],[1559206553759,["GJX@GJXAIOU",[[-1,3509,"才有"]],[3511,3511],[3509,3509]]],[1559206567974,["GJX@GJXAIOU",[[1,3509,"采用在表头数组中在data和"]],[3509,3509],[3523,3523]]],[1559206570427,["GJX@GJXAIOU",[[1,3523,"firts"]],[3523,3523],[3528,3528]]],[1559206571000,["GJX@GJXAIOU",[[-1,3526,"ts"]],[3528,3528],[3526,3526]]],[1559206573084,["GJX@GJXAIOU",[[1,3526,"stchils"]],[3526,3526],[3533,3533]]],[1559206573840,["GJX@GJXAIOU",[[-1,3532,"s"]],[3533,3533],[3532,3532]]],[1559206603675,["GJX@GJXAIOU",[[1,3532,"d中加上一列parent实现；称为：双亲孩子表示法。"]],[3532,3532],[3558,3558]]],[1559206604446,["GJX@GJXAIOU",[[1,3558,"\n\n"]],[3558,3558],[3559,3559]]],[1559206604687,["GJX@GJXAIOU",[[1,3560,"\n"]],[3559,3559],[3560,3560]]],[1559206604839,["GJX@GJXAIOU",[[1,3561,"\n"]],[3560,3560],[3561,3561]]],[1559206604945,["GJX@GJXAIOU",[[1,3562,"\n"]],[3561,3561],[3562,3562]]],[1559206605063,["GJX@GJXAIOU",[[1,3563,"\n"]],[3562,3562],[3563,3563]]],[1559206605209,["GJX@GJXAIOU",[[1,3564,"\n"]],[3563,3563],[3564,3564]]],[1559206732091,["GJX@GJXAIOU",[[1,3564,"### 6.4.3 孩子兄弟表示法"]],[3564,3564],[3581,3581]]],[1559206732680,["GJX@GJXAIOU",[[1,3582,"\n"]],[3581,3581],[3582,3582]]],[1559206733520,["GJX@GJXAIOU",[[1,3583,"\n"]],[3582,3582],[3583,3583]]],[1559207300242,["GJX@GJXAIOU",[[-1,3583,"\n"],[1,3584,"理论"]],[3583,3583],[3585,3585]]],[1559207318926,["GJX@GJXAIOU",[[1,3585,"：如果任意一棵树，他的结点的第一个孩子如果纯真的额"]],[3585,3585],[3610,3610]]],[1559207322118,["GJX@GJXAIOU",[[-1,3606,"纯真的额"]],[3610,3610],[3606,3606]]],[1559207343552,["GJX@GJXAIOU",[[1,3606,"存在就是唯一的，他的右兄弟如果存在也是为一个"]],[3606,3606],[3628,3628]]],[1559207344271,["GJX@GJXAIOU",[[-1,3626,"一个"]],[3628,3628],[3626,3626]]],[1559207347616,["GJX@GJXAIOU",[[1,3626,"唯一的；"]],[3626,3626],[3630,3630]]],[1559207537082,["GJX@GJXAIOU",[[1,3630,"\n\n"]],[3630,3630],[3631,3631]]],[1559207537832,["GJX@GJXAIOU",[[1,3632,"\n"]],[3631,3631],[3632,3632]]],[1559207539777,["GJX@GJXAIOU",[[-1,3632,"\n"],[1,3633,"结点"]],[3632,3632],[3634,3634]]],[1559207541201,["GJX@GJXAIOU",[[1,3634,"结果"]],[3634,3634],[3636,3636]]],[1559207544145,["GJX@GJXAIOU",[[-1,3633,"点结果"]],[3636,3636],[3633,3633]]],[1559207544574,["GJX@GJXAIOU",[[-1,3632,"结"],[1,3633,"\n"]],[3633,3633],[3632,3632]]],[1559207546645,["GJX@GJXAIOU",[[-1,3632,"\n"],[1,3633,"数"]],[3632,3632],[3633,3633]]],[1559207558530,["GJX@GJXAIOU",[[1,3633,"的孩子兄弟表示法结构定义："]],[3633,3633],[3646,3646]]],[1559207566130,["GJX@GJXAIOU",[[-1,3632,"数"]],[3633,3633],[3632,3632]]],[1559207568276,["GJX@GJXAIOU",[[1,3632,"树"]],[3632,3632],[3633,3633]]],[1559207684358,["GJX@GJXAIOU",[[1,3646,"\n\n"]],[3646,3646],[3647,3647]]],[1559207684888,["GJX@GJXAIOU",[[-1,3647,"\n"],[1,3648,"`"]],[3647,3647],[3648,3648]]],[1559207685263,["GJX@GJXAIOU",[[1,3648,"``"]],[3648,3648],[3650,3650]]],[1559207685293,["GJX@GJXAIOU",[[1,3650,"language\n```\n"]],[3650,3650],[3650,3658]]],[1559207686567,["GJX@GJXAIOU",[[-1,3650,"language"],[1,3658,"c"]],[3650,3658],[3651,3651]]],[1559207686733,["GJX@GJXAIOU",[[1,3652,"\n"]],[3651,3651],[3652,3652]]],[1559207687767,["GJX@GJXAIOU",[[1,3652,"/*\n\t树的孩子兄弟表示法结构定义\n*/\ntypedef struct CSNode{\n\tTElemType data;\n\tstruct CSNode *firstchild,*rightsib;\n}CSNode.*CSTree;"]],[3652,3652],[3767,3767]]],[1559207692637,["GJX@GJXAIOU",[[1,3772,"\n"]],[3771,3771],[3772,3772]]],[1559208479405,["GJX@GJXAIOU",[[1,3773,"\n"]],[3772,3772],[3773,3773]]],[1559208487125,["GJX@GJXAIOU",[[1,3773,"![孩子兄弟表示法]($resource/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n"]],[3773,3773],[3863,3863]]],[1559208490677,["GJX@GJXAIOU",[[1,3864,"\n"]],[3863,3863],[3864,3864]]],[1559208495767,["GJX@GJXAIOU",[[1,3865,"\n"]],[3864,3864],[3865,3865]]],[1559208496261,["GJX@GJXAIOU",[[1,3866,"\n"]],[3865,3865],[3866,3866]]],[1559208497480,["GJX@GJXAIOU",[[-1,3866,"\n"],[1,3867,"#"]],[3866,3866],[3867,3867]]],[1559208501046,["GJX@GJXAIOU",[[1,3867,"# 6.5 ercha"]],[3867,3867],[3878,3878]]],[1559208501846,["GJX@GJXAIOU",[[-1,3873,"ercha"]],[3878,3878],[3873,3873]]],[1559208504072,["GJX@GJXAIOU",[[1,3873,"二叉树"]],[3873,3873],[3876,3876]]],[1559208504605,["GJX@GJXAIOU",[[1,3876,"\n\n"]],[3876,3876],[3877,3877]]],[1559208504879,["GJX@GJXAIOU",[[1,3878,"\n"]],[3877,3877],[3878,3878]]],[1559208557934,["GJX@GJXAIOU",[[1,3878,"•二叉树（Binary Tree）是n（n>=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。"]],[3878,3878],[3966,3966]]],[1559208603845,["GJX@GJXAIOU",[[1,3967,"\n"]],[3966,3966],[3967,3967]]],[1559208603976,["GJX@GJXAIOU",[[1,3968,"\n"]],[3967,3967],[3968,3968]]],[1559208604476,["GJX@GJXAIOU",[[1,3969,"\n"]],[3968,3968],[3969,3969]]],[1559208608655,["GJX@GJXAIOU",[[1,3969,"### 6.5.1"]],[3969,3969],[3978,3978]]],[1559208613279,["GJX@GJXAIOU",[[1,3978,"二叉树特点"]],[3978,3978],[3983,3983]]],[1559208613613,["GJX@GJXAIOU",[[1,3984,"\n"]],[3983,3983],[3984,3984]]],[1559208613991,["GJX@GJXAIOU",[[1,3985,"\n"]],[3984,3984],[3985,3985]]],[1559208615833,["GJX@GJXAIOU",[[-1,3985,"\n"],[1,3986,"-"]],[3985,3985],[3986,3986]]],[1559208642106,["GJX@GJXAIOU",[[1,3986," 每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。\n- 左子树和右子树是有顺序的，次序不能颠倒；\n- 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树；"]],[3986,3986],[4071,4071]]],[1559208685508,["GJX@GJXAIOU",[[1,4071,"\n- 二叉树的物种"]],[4071,4071],[4080,4080]]],[1559208686661,["GJX@GJXAIOU",[[-1,4078,"物种"]],[4080,4080],[4078,4078]]],[1559208696791,["GJX@GJXAIOU",[[1,4078,"五种基本形态：\n- "]],[4078,4078],[4088,4088]]],[1559208697734,["GJX@GJXAIOU",[[1,4086,"  "]],[4088,4088],[4090,4090]]],[1559208708140,["GJX@GJXAIOU",[[1,4090,"•空二叉树\n\n•只有一个根结点\n\n•根结点只有左子树\n\n•根结点只有右子树\n\n•根结点既有左子树又有右子树"]],[4090,4090],[4143,4143]]],[1559208711093,["GJX@GJXAIOU",[[-1,4096,"\n"]],[4096,4096],[4095,4095]]],[1559208714649,["GJX@GJXAIOU",[[1,4096,"- "]],[4096,4096],[4098,4098]]],[1559208722559,["GJX@GJXAIOU",[[1,4096,"  "],[1,4107,"  "],[1,4108,"  "],[1,4118,"  "],[1,4119,"  "],[1,4129,"  "],[1,4130,"  "]],[4098,4144],[4100,4158]]],[1559208725281,["GJX@GJXAIOU",[[1,4113,"-"]],[4113,4113],[4114,4114]]],[1559208726103,["GJX@GJXAIOU",[[1,4115," "]],[4114,4114],[4115,4115]]],[1559208727851,["GJX@GJXAIOU",[[1,4131,"-"]],[4131,4131],[4132,4132]]],[1559208728807,["GJX@GJXAIOU",[[1,4132," "]],[4132,4132],[4133,4133]]],[1559208730688,["GJX@GJXAIOU",[[1,4148,"- "]],[4148,4148],[4150,4150]]],[1559208732098,["GJX@GJXAIOU",[[1,4113," "]],[4112,4112],[4113,4113]]],[1559208733647,["GJX@GJXAIOU",[[-1,4110," "]],[4111,4111],[4110,4110]]],[1559208734725,["GJX@GJXAIOU",[[-1,4110,"\n"]],[4110,4110],[4110,4110]]],[1559208735832,["GJX@GJXAIOU",[[-1,4127,"\n"]],[4127,4127],[4127,4127]]],[1559208736806,["GJX@GJXAIOU",[[-1,4143,"\n"]],[4143,4143],[4143,4143]]],[1559208739430,["GJX@GJXAIOU",[[-1,4111," "]],[4112,4112],[4111,4111]]],[1559208740213,["GJX@GJXAIOU",[[-1,4127," "]],[4127,4127],[4126,4126]]],[1559208741373,["GJX@GJXAIOU",[[-1,4126," "]],[4127,4127],[4126,4126]]],[1559208742600,["GJX@GJXAIOU",[[-1,4140,"  "]],[4141,4141],[4139,4139]]]],null,"GJX@GJXAIOU"],["a33370c2-e6aa-43ec-bb2d-731bc1c8399d",1559215103958,"# 树\n\n\n## 6.2 树的定义\n\n•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n- 有且仅有一个特定的称为根(Root)的结点；\n- 当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n\n注意点：\n- n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n- m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。\n\n\n### 6.2.1 结点分类\n\n- 结点拥有子树数目称为结点的度；\n  - 度为0的结点称为叶结点(Leaf)或终端结点\n  - 度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。\n\n树的度是树内各结点的度的最大值；\n\n### 6.2.2结点之间的关系\n\n•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。\n•结点的祖先是从根到该结点所经分支上的所有结点。\n\n### 6.2.3 树的其他相关概念\n\n•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n•其双亲在同一层的结点互为堂兄弟。\n•树中结点的最大层次称为树的深度(Depth)或高度。\n如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树；\n森林是m(m>=0)棵互不相交的树的集合；\n\n\n## 6.3 树的抽象数据类型\n\n```c\nADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT\n```\n\n\n\n## 6.4 树的存储结构\n\n- 三种表示方法：双亲表示法，孩子表示法、孩子兄弟表示法\n\n\n### 6.4.1 双亲表示法\n\n在每个结点中附设一个指示器指示其双亲结点在数组中的位置。\n\n![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n双亲表示法结点结构定义代码：\n```c\n//数的双亲表示法结点结构定义\n#define MAX_TREE_SIZE 100\ntypedef int ElemType;\n\ntypedef struct PTNode //结点结构\n{\n\tElemType data;\t// 结点数据\n\tint parent;\t\t// 双亲位置\n}PTNode;\n\ntypedef struct //树结构\n{\n\tPTNode nodes[MAX_TREE_SIZE]; //结点数组\n\tint r;\t\t\t //根的位置和节点数\n\tint n;\t\t\t\n}PTree;\n```\n\n注：根节点的位置域即parent域设置为-1；\n图示如下：\n\n![双亲表示法]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n补充：上面的双亲表示法无法很方便的之后某个结点的孩子结点有哪些，因此在结点结构的加上一个最左边（长子）域，没有孩子的结点长子域设置为-1；\n如果同时关注各兄弟之间的关系；可以同时加上一个右兄弟域，如果存在右兄弟则记录下标，没有就记为-1;\n\n补充之后图示：\n![双亲表示法补充]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%A1%A5%E5%85%85.jpg)\n\n==实际使用过程中，存储结构的设计十分灵活，根据具体情况采用==\n\n\n\n### 6.4.2 孩子表示法\n\n因为数的每个结点可能含有多个子树，因此可以使用多重链表：每个结点有多个指针域，其中每个指针指向一棵子树的根节点，称为多重链表表示法；\n\n\n- 方案一：指针域的个数等于树的度（树的度为数的各个结点度的最大值）\n当树中各个结点的度相差很大的时候，浪费空间；相差很小的时候是一种优点；\n\n![孩子表示法方案一结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n![孩子表示法方案一]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80.png)\n\n- 方案二：每个结点指针域的个数等于该结点的度\n空间利用率更高了，但是因为各个结点的链表结构不同，维护各个结点度的数值较为麻烦\n\n![孩子表示法方案二结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n\n![孩子表示法方案二]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n\n\n- 具体方案：\n把每个结点的孩子结点排列起来，以单链表做存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空；然后n个头指针又组成一个线性表，采用顺序储存结构，存放进一个一维数组中。\n如下图所示：\n![图片1]($resource/%E5%9B%BE%E7%89%871.jpg)\n\n\n孩子表示法的结构定义代码：\n```c\n/*\n\t孩子表示法结构定义\n*/\n#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 孩子结点\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 该结点在表头数组中的下标\n\tstruct CTNode *next;\t\n} *ChildPtr;\n\n// 表头结构\ntypedef struct\n{\t\n\tElemType data;\t\t\t\n\tint parent;\t\t\t\t\n\tChildPtr firstchild;\t// 存储该结点孩子链表的头指针\n} CTBox;\n\n//树结构\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 结点数组\n\tint r, n; //根的位置和结点数\n}\n```\n\n该结构便于查找某个结点的某个孩子或者某个结点的兄弟有利，但是要查找某个结点的双亲就需要遍历整棵树，可以采用在表头数组中在data和firstchild中加上一列parent实现；称为：双亲孩子表示法。\n\n\n\n\n\n### 6.4.3 孩子兄弟表示法\n\n理论：如果任意一棵树，他的结点的第一个孩子如果存在就是唯一的，他的右兄弟如果存在也是为唯一的；\n\n树的孩子兄弟表示法结构定义：\n```c\n/*\n\t树的孩子兄弟表示法结构定义\n*/\ntypedef struct CSNode{\n\tTElemType data;\n\tstruct CSNode *firstchild,*rightsib;\n}CSNode.*CSTree;\n```\n\n![孩子兄弟表示法]($resource/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n\n## 6.5 二叉树\n\n•二叉树（Binary Tree）是n（n>=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。\n\n\n### 6.5.1二叉树特点\n\n- 每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。\n- 左子树和右子树是有顺序的，次序不能颠倒；\n- 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树；\n- 二叉树的五种基本形态：\n  - •空二叉树\n  - •只有一个根结点\n  -  •根结点只有左子树\n  - •根结点只有右子树\n  - •根结点既有左子树又有右子树",[[1559215046999,["GJX@GJXAIOU",[[1,4156,"\n  - "]],[4156,4156],[4161,4161]]],[1559215047167,["GJX@GJXAIOU",[[-1,4157,"  - "],[1,4161,"\n\n"]],[4161,4161],[4158,4158]]],[1559215059928,["GJX@GJXAIOU",[[1,4158,"### 6.5.2 特殊的二叉树"]],[4158,4158],[4174,4174]]],[1559215060402,["GJX@GJXAIOU",[[1,4175,"\n"]],[4174,4174],[4175,4175]]],[1559215069232,["GJX@GJXAIOU",[[-1,4175,"\n"],[1,4176,"="]],[4175,4175],[4176,4176]]],[1559215070365,["GJX@GJXAIOU",[[-1,4175,"="],[1,4176,"\n"]],[4176,4176],[4175,4175]]],[1559215070792,["GJX@GJXAIOU",[[1,4176,"\n"]],[4175,4175],[4176,4176]]],[1559215071112,["GJX@GJXAIOU",[[-1,4176,"\n"],[1,4177,"-"]],[4176,4176],[4177,4177]]],[1559215082493,["GJX@GJXAIOU",[[1,4177," 斜树：\n- "]],[4177,4177],[4184,4184]]],[1559215083381,["GJX@GJXAIOU",[[1,4182,"  "]],[4184,4184],[4186,4186]]],[1559215102792,["GJX@GJXAIOU",[[1,4186,"所有"]],[4186,4186],[4188,4188]]],[1559215156636,["GJX@GJXAIOU",[[1,4188,"节点都只有左子树或者只有右子树，称为：左斜树和右斜树；\n  - "]],[4188,4188],[4220,4220]]],[1559215160672,["GJX@GJXAIOU",[[-1,4217," - "]],[4220,4220],[4217,4217]]],[1559215161306,["GJX@GJXAIOU",[[-1,4216," "],[1,4217,"\n"]],[4217,4217],[4216,4216]]],[1559215161832,["GJX@GJXAIOU",[[-1,4216,"\n"]],[4216,4216],[4215,4215]]],[1559215163024,["GJX@GJXAIOU",[[1,4216,"  - \n"]],[4215,4215],[4220,4220]]],[1559215166149,["GJX@GJXAIOU",[[-1,4216,"  "]],[4220,4220],[4218,4218]]],[1559215172729,["GJX@GJXAIOU",[[1,4218,"满二叉树："]],[4218,4218],[4223,4223]]],[1559215172998,["GJX@GJXAIOU",[[1,4224,"- \n"]],[4223,4223],[4226,4226]]],[1559215190263,["GJX@GJXAIOU",[[1,4224,"  "]],[4226,4226],[4228,4228]]],[1559215196681,["GJX@GJXAIOU",[[1,4228,"所有分子"]],[4228,4228],[4232,4232]]],[1559215199056,["GJX@GJXAIOU",[[-1,4230,"分子"]],[4232,4232],[4230,4230]]],[1559215204057,["GJX@GJXAIOU",[[1,4230,"分支结点"]],[4230,4230],[4234,4234]]],[1559215206630,["GJX@GJXAIOU",[[-1,4188,"节"]],[4189,4189],[4188,4188]]],[1559215210694,["GJX@GJXAIOU",[[1,4188,"结"]],[4188,4188],[4189,4189]]],[1559215219722,["GJX@GJXAIOU",[[1,4234,"都存在不"]],[4234,4234],[4238,4238]]],[1559215220230,["GJX@GJXAIOU",[[-1,4237,"不"]],[4238,4238],[4237,4237]]],[1559215222568,["GJX@GJXAIOU",[[1,4237,"左子树和"]],[4237,4237],[4241,4241]]],[1559215244809,["GJX@GJXAIOU",[[1,4241,"右子树，并且所有的叶子都在同一层上；"]],[4241,4241],[4259,4259]]],[1559215321517,["GJX@GJXAIOU",[[1,4260,"  - \n"]],[4259,4259],[4264,4264]]],[1559215324526,["GJX@GJXAIOU",[[1,4264,"特点："]],[4264,4264],[4267,4267]]],[1559215325347,["GJX@GJXAIOU",[[1,4268,"  - \n"]],[4267,4267],[4272,4272]]],[1559215326441,["GJX@GJXAIOU",[[1,4270,"  "]],[4272,4272],[4274,4274]]],[1559215327691,["GJX@GJXAIOU",[[1,4274,"•满二叉树的特点有：\n\n–叶子只能出现在最下一层。\n\n–非叶子结点的度一定是2。\n\n–在同样深度的二叉树中，满二叉树的结点个数一定最多，同时叶子也是最多。"]],[4274,4274],[4351,4351]]],[1559215334222,["GJX@GJXAIOU",[[-1,4268,"    - •满二叉树的特点有："]],[4273,4284],[4268,4268]]],[1559215335155,["GJX@GJXAIOU",[[-1,4269,"\n"]],[4269,4269],[4268,4268]]],[1559215336108,["GJX@GJXAIOU",[[-1,4268,"\n"]],[4268,4268],[4267,4267]]],[1559215338042,["GJX@GJXAIOU",[[-1,4268,"–"]],[4269,4269],[4268,4268]]],[1559215338898,["GJX@GJXAIOU",[[-1,4282,"–"]],[4283,4283],[4282,4282]]],[1559215339731,["GJX@GJXAIOU",[[-1,4296,"–"]],[4297,4297],[4296,4296]]],[1559215343350,["GJX@GJXAIOU",[[-1,4295,"\n"]],[4295,4295],[4295,4295]]],[1559215344211,["GJX@GJXAIOU",[[-1,4281,"\n"]],[4281,4281],[4281,4281]]],[1559215346853,["GJX@GJXAIOU",[[1,4268,"  "],[1,4281,"  "],[1,4294,"  "]],[4268,4328],[4268,4334]]],[1559215347652,["GJX@GJXAIOU",[[1,4270,"  "],[1,4283," "],[1,4285," "],[1,4298,"  "]],[4268,4334],[4268,4340]]],[1559215353556,["GJX@GJXAIOU",[[-1,4270," "],[1,4271,"-"],[-1,4285," "],[1,4288,"-"],[-1,4304," "],[1,4305,"-"]],[4272,4340],[4272,4340]]],[1559215355742,["GJX@GJXAIOU",[[1,4270,"  "],[1,4285," "],[1,4287," "],[1,4302,"  "]],[4272,4340],[4274,4346]]],[1559215370800,["GJX@GJXAIOU",[[1,4347,"    - \n"]],[4346,4346],[4353,4353]]],[1559215371020,["GJX@GJXAIOU",[[-1,4347,"    - "]],[4353,4353],[4348,4348]]],[1559215373960,["GJX@GJXAIOU",[[-1,4347,"\n"],[1,4348,"-"]],[4348,4348],[4348,4348]]],[1559215379897,["GJX@GJXAIOU",[[1,4348," 完全二叉树：\n- "]],[4348,4348],[4358,4358]]],[1559215381005,["GJX@GJXAIOU",[[1,4356,"  "]],[4358,4358],[4360,4360]]],[1559215401968,["GJX@GJXAIOU",[[1,4360,"对一棵具有n个结点的二叉树按层序编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点位置完全相同；"]],[4360,4360],[4422,4422]]],[1559215418783,["GJX@GJXAIOU",[[1,4422,"不一定"]],[4422,4422],[4425,4425]]],[1559215420868,["GJX@GJXAIOU",[[-1,4422,"不一定"]],[4425,4425],[4422,4422]]],[1559215566557,["GJX@GJXAIOU",[[1,4422,"\n  - •完全二叉树的特点有：\n\n–叶子结点只能出现在最下两层。\n\n–最下层的叶子一定集中在左部连续位置。\n\n–倒数第二层，若有叶子结点，一定都在右部连续位置。\n\n–如果结点度为1，则该结点只有左孩子。\n\n–同样结点树的二叉树，完全二叉树的深度最小。\n\n•注意：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。"]],[4422,4422],[4582,4582]]],[1559215569604,["GJX@GJXAIOU",[[-1,4427,"•"]],[4428,4428],[4427,4427]]],[1559215572139,["GJX@GJXAIOU",[[-1,4439,"–"]],[4440,4440],[4439,4439]]],[1559215572939,["GJX@GJXAIOU",[[-1,4455,"–"]],[4456,4456],[4455,4455]]],[1559215574202,["GJX@GJXAIOU",[[-1,4454,"\n"]],[4454,4454],[4454,4454]]],[1559215575146,["GJX@GJXAIOU",[[-1,4473,"\n"]],[4473,4473],[4472,4472]]],[1559215575981,["GJX@GJXAIOU",[[-1,4473,"–"]],[4474,4474],[4473,4473]]],[1559215577059,["GJX@GJXAIOU",[[-1,4498,"\n"]],[4498,4498],[4497,4497]]],[1559215577896,["GJX@GJXAIOU",[[-1,4498,"–"]],[4499,4499],[4498,4498]]],[1559215579076,["GJX@GJXAIOU",[[-1,4517,"\n"]],[4517,4517],[4517,4517]]],[1559215580038,["GJX@GJXAIOU",[[-1,4517,"–"]],[4518,4518],[4517,4517]]],[1559215581796,["GJX@GJXAIOU",[[-1,4438,"\n"]],[4438,4438],[4437,4437]]],[1559215585048,["GJX@GJXAIOU",[[1,4438,"  - "],[1,4453,"  - "],[1,4472,"  - "],[1,4497,"  - "],[1,4516,"  - "]],[4438,4538],[4442,4558]]],[1559215586495,["GJX@GJXAIOU",[[1,4440,"  "],[1,4457,"  "],[1,4480," "],[1,4482," "],[1,4511,"  "],[1,4532,"  "]],[4442,4558],[4444,4568]]],[1559215590160,["GJX@GJXAIOU",[[-1,4569,"•"]],[4569,4570],[4569,4569]]],[1559215590778,["GJX@GJXAIOU",[[-1,4568,"\n"]],[4569,4569],[4568,4568]]],[1559215594219,["GJX@GJXAIOU",[[1,4568,"  - "]],[4568,4568],[4572,4572]]],[1559215597991,["GJX@GJXAIOU",[[1,4603,"\n  - "]],[4603,4603],[4608,4608]]],[1559216024170,["GJX@GJXAIOU",[[1,4608,"判断：++++"]],[4608,4608],[4613,4613]]],[1559216025253,["GJX@GJXAIOU",[[-1,4613,"++"]],[4613,4613],[4611,4611]]],[1559216026552,["GJX@GJXAIOU",[[-1,4611,"++"]],[4613,4613],[4611,4611]]],[1559216027502,["GJX@GJXAIOU",[[1,4611,"===="]],[4611,4611],[4613,4613]]],[1559216049052,["GJX@GJXAIOU",[[1,4613,"将每个结点按照满二叉树的结构逐层排序"]],[4613,4613],[4631,4631]]],[1559216053331,["GJX@GJXAIOU",[[-1,4629,"排序"]],[4631,4631],[4629,4629]]],[1559216061764,["GJX@GJXAIOU",[[1,4629,"顺序编号，如果"]],[4629,4629],[4636,4636]]],[1559216081470,["GJX@GJXAIOU",[[1,4636,"顺序出现空档，则说明不是完全二叉树，否则就是"]],[4636,4636],[4658,4658]]],[1559216116639,["GJX@GJXAIOU",[[1,4660,"\n  - "]],[4660,4660],[4665,4665]]],[1559216142400,["GJX@GJXAIOU",[[-1,4661,"  - "],[1,4665,"\n"]],[4661,4665],[4661,4661]]],[1559216143322,["GJX@GJXAIOU",[[1,4662,"\n"]],[4661,4661],[4662,4662]]],[1559216144589,["GJX@GJXAIOU",[[1,4662,"### "]],[4662,4662],[4666,4666]]],[1559216149988,["GJX@GJXAIOU",[[-1,4664,"#"]],[4665,4665],[4664,4664]]],[1559216154485,["GJX@GJXAIOU",[[1,4665,"6.6 "]],[4665,4665],[4669,4669]]],[1559216235536,["GJX@GJXAIOU",[[1,4669,"二叉树的性质"]],[4669,4669],[4675,4675]]],[1559216235946,["GJX@GJXAIOU",[[1,4676,"\n"]],[4675,4675],[4676,4676]]],[1559216236539,["GJX@GJXAIOU",[[1,4677,"\n"]],[4676,4676],[4677,4677]]],[1559216242540,["GJX@GJXAIOU",[[1,4677,"### 6.6.1 "]],[4677,4677],[4687,4687]]],[1559216274350,["GJX@GJXAIOU",[[1,4687,"性质1：在二叉树的第i层•至多有2^(i-1)个结点(i>=1)"]],[4687,4687],[4719,4719]]],[1559216277574,["GJX@GJXAIOU",[[-1,4699,"•"]],[4700,4700],[4699,4699]]],[1559216296515,["GJX@GJXAIOU",[[-1,4677,"### 6.6.1 "]],[4677,4687],[4677,4677]]],[1559216298299,["GJX@GJXAIOU",[[1,4677,"- "]],[4677,4677],[4679,4679]]],[1559216300598,["GJX@GJXAIOU",[[1,4710,"；"]],[4710,4710],[4711,4711]]],[1559216300855,["GJX@GJXAIOU",[[1,4712,"- \n"]],[4711,4711],[4714,4714]]],[1559216302903,["GJX@GJXAIOU",[[1,4714,"性质"]],[4714,4714],[4716,4716]]],[1559216318448,["GJX@GJXAIOU",[[1,4716,"2：深度为K的二叉树之多"]],[4716,4716],[4728,4728]]],[1559216319043,["GJX@GJXAIOU",[[-1,4726,"之多"]],[4728,4728],[4726,4726]]],[1559216345386,["GJX@GJXAIOU",[[1,4726,"至多有2^k"]],[4726,4726],[4732,4732]]],[1559216349276,["GJX@GJXAIOU",[[1,4729,"("]],[4729,4729],[4730,4730]]],[1559216358917,["GJX@GJXAIOU",[[1,4733,")-1个结点（）"]],[4733,4733],[4741,4741]]],[1559216362074,["GJX@GJXAIOU",[[1,4740,"k"]],[4740,4740],[4741,4741]]],[1559216364884,["GJX@GJXAIOU",[[1,4742,"=1"]],[4742,4742],[4744,4744]]],[1559216366690,["GJX@GJXAIOU",[[1,4745,";"]],[4745,4745],[4746,4746]]],[1559216366954,["GJX@GJXAIOU",[[1,4747,"- \n"]],[4746,4746],[4749,4749]]],[1559216368058,["GJX@GJXAIOU",[[1,4749,"x"]],[4749,4749],[4750,4750]]],[1559216368695,["GJX@GJXAIOU",[[-1,4749,"x"]],[4750,4750],[4749,4749]]],[1559216399821,["GJX@GJXAIOU",[[1,4749,"性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1；"]],[4749,4749],[4795,4795]]],[1559216483046,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"]],[4741,4741],[4796,4796]]],[1559216483046,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"]],[4796,4796],[4741,4741]]],[1559216471451,["GJX@GJXAIOU",[[1,4796,"- \n"]],[4795,4795],[4798,4798]]],[1559216473115,["GJX@GJXAIOU",[[1,4798,"具有n个结点的完全二叉树的深度为⌊log₂n⌋+1"]],[4798,4798],[4823,4823]]],[1559216543056,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4823,"\n"]],[4741,4741],[4824,4824]]],[1559216543056,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4823,"\n"]],[4824,4824],[4741,4741]]],[1559216505046,["GJX@GJXAIOU",[[1,4798,"性质4："]],[4798,4798],[4802,4802]]],[1559216512573,["GJX@GJXAIOU",[[1,4827,"；（）"]],[4827,4827],[4830,4830]]],[1559216514125,["GJX@GJXAIOU",[[1,4829,"⌊log₂n⌋"]],[4829,4829],[4836,4836]]],[1559216516534,["GJX@GJXAIOU",[[-1,4830,"log₂n"]],[4835,4835],[4830,4830]]],[1559216518726,["GJX@GJXAIOU",[[1,4830,"x"]],[4830,4830],[4831,4831]]],[1559216532384,["GJX@GJXAIOU",[[1,4832,"表示不大于x的最大整数"]],[4832,4832],[4843,4843]]],[1559216603062,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"]],[4741,4741],[4845,4845]]],[1559216603062,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"]],[4845,4845],[4741,4741]]],[1559216580058,["GJX@GJXAIOU",[[1,4845,"- \n"]],[4844,4844],[4847,4847]]],[1559216580732,["GJX@GJXAIOU",[[1,4847,"•性质五：如果对一棵有n个结点的完全二叉树(其深度为⌊log₂n⌋+1)的结点按层序编号，对任一结点i(1<=i<=n)有以下性质：\n\n–如果i = 1，则结点 i  是二叉树的根，无双亲；如果i > 1，则其双亲是结点⌊i/2⌋\n\n–如果2i > n，则结点 i  无做左孩子(结点 i  为叶子结点)；否则其左孩子是结点2i\n\n–如果2i+1 > n，则结点  i  无右孩子；否则其右孩子是结点2i+1"]],[4847,4847],[5051,5051]]],[1559216583806,["GJX@GJXAIOU",[[-1,4915,"–"]],[4916,4916],[4915,4915]]],[1559216585352,["GJX@GJXAIOU",[[-1,4963,"–"]],[4964,4964],[4963,4963]]],[1559216586664,["GJX@GJXAIOU",[[-1,5011,"–"]],[5012,5012],[5011,5011]]],[1559216587561,["GJX@GJXAIOU",[[-1,5010,"\n"]],[5010,5010],[5010,5010]]],[1559216588718,["GJX@GJXAIOU",[[-1,4962,"\n"]],[4962,4962],[4962,4962]]],[1559216590008,["GJX@GJXAIOU",[[-1,4914,"\n"]],[4914,4914],[4914,4914]]],[1559216591629,["GJX@GJXAIOU",[[-1,4847,"•"]],[4848,4848],[4847,4847]]],[1559216593804,["GJX@GJXAIOU",[[-1,4849,"五"]],[4850,4850],[4849,4849]]],[1559216594707,["GJX@GJXAIOU",[[1,4849,"5"]],[4849,4849],[4850,4850]]],[1559216600565,["GJX@GJXAIOU",[[1,4913,"- "],[1,4960,"- "],[1,5007,"- "]],[4913,5044],[4915,5050]]],[1559216601580,["GJX@GJXAIOU",[[1,4913,"  "],[1,4962,"  "],[1,5011,"  "]],[4915,5050],[4917,5056]]],[1559216723063,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[1,5056,"\n"]],[4741,4741],[5057,5057]]],[1559216723063,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[-1,5056,"\n"]],[5057,5057],[4741,4741]]],[1559216679059,["GJX@GJXAIOU",[[1,5057,"  - \n"]],[5056,5056],[5061,5061]]],[1559216679209,["GJX@GJXAIOU",[[-1,5057,"  - "]],[5061,5061],[5058,5058]]],[1559216679327,["GJX@GJXAIOU",[[1,5058,"\n"]],[5058,5058],[5059,5059]]],[1559216679447,["GJX@GJXAIOU",[[1,5059,"\n"]],[5059,5059],[5060,5060]]],[1559216679586,["GJX@GJXAIOU",[[1,5060,"\n"]],[5060,5060],[5061,5061]]],[1559216679725,["GJX@GJXAIOU",[[1,5061,"\n"]],[5061,5061],[5062,5062]]],[1559216679847,["GJX@GJXAIOU",[[1,5062,"\n"]],[5062,5062],[5063,5063]]],[1559216684987,["GJX@GJXAIOU",[[1,5063,"##  "]],[5063,5063],[5066,5066]]],[1559216692757,["GJX@GJXAIOU",[[1,5066,"6.7二叉树的存储结构"]],[5066,5066],[5077,5077]]],[1559216693514,["GJX@GJXAIOU",[[1,5077,"\n"]],[5077,5077],[5078,5078]]],[1559216783077,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5078," "]],[4741,4741],[5079,5079]]],[1559216783077,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5078," "]],[5079,5079],[4741,4741]]],[1559216759763,["GJX@GJXAIOU",[[1,5078,"\n"]],[5077,5077],[5078,5078]]],[1559216759921,["GJX@GJXAIOU",[[1,5079,"\n"]],[5078,5078],[5079,5079]]],[1559216760125,["GJX@GJXAIOU",[[1,5080,"\n"]],[5079,5079],[5080,5080]]],[1559216760485,["GJX@GJXAIOU",[[1,5081,"\n"]],[5080,5080],[5081,5081]]],[1559216760648,["GJX@GJXAIOU",[[1,5082,"\n"]],[5081,5081],[5082,5082]]],[1559216760820,["GJX@GJXAIOU",[[1,5083,"\n"]],[5082,5082],[5083,5083]]],[1559216761083,["GJX@GJXAIOU",[[1,5084,"\n"]],[5083,5083],[5084,5084]]],[1559216761274,["GJX@GJXAIOU",[[1,5085,"\n"]],[5084,5084],[5085,5085]]],[1559216761464,["GJX@GJXAIOU",[[1,5086,"\n"]],[5085,5085],[5086,5086]]],[1559216761608,["GJX@GJXAIOU",[[1,5087,"\n"]],[5086,5086],[5087,5087]]],[1559216761753,["GJX@GJXAIOU",[[1,5088,"\n"]],[5087,5087],[5088,5088]]],[1559216761874,["GJX@GJXAIOU",[[1,5089,"\n"]],[5088,5088],[5089,5089]]],[1559216762037,["GJX@GJXAIOU",[[1,5090,"\n"]],[5089,5089],[5090,5090]]],[1559216762240,["GJX@GJXAIOU",[[1,5091,"\n"]],[5090,5090],[5091,5091]]],[1559216762402,["GJX@GJXAIOU",[[1,5092,"\n"]],[5091,5091],[5092,5092]]],[1559216762552,["GJX@GJXAIOU",[[1,5093,"\n"]],[5092,5092],[5093,5093]]],[1559216762691,["GJX@GJXAIOU",[[1,5094,"\n"]],[5093,5093],[5094,5094]]],[1559216762824,["GJX@GJXAIOU",[[1,5095,"\n"]],[5094,5094],[5095,5095]]],[1559216762992,["GJX@GJXAIOU",[[1,5096,"\n"]],[5095,5095],[5096,5096]]],[1559216763241,["GJX@GJXAIOU",[[1,5097,"\n"]],[5096,5096],[5097,5097]]],[1559216775549,["GJX@GJXAIOU",[[1,5079,"二叉树可以使用书序"]],[5079,5079],[5088,5088]]],[1559216776341,["GJX@GJXAIOU",[[-1,5086,"书序"]],[5088,5088],[5086,5086]]],[1559216779830,["GJX@GJXAIOU",[[1,5086,"顺序"]],[5086,5086],[5088,5088]]],[1559216843082,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5107," "]],[4741,4741],[5108,5108]]],[1559216843082,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5107," "]],[5108,5108],[4741,4741]]],[1559216811358,["GJX@GJXAIOU",[[1,5088,"存储结构；完全二叉树的使用一维数组"]],[5088,5088],[5105,5105]]],[1559216903090,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5124," "]],[4741,4741],[5125,5125]]],[1559216903090,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5124," "]],[5125,5125],[4741,4741]]],[1559216900024,["GJX@GJXAIOU",[[1,5105,"实现"]],[5105,5105],[5107,5107]]],[1559216963088,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5126," "]],[4741,4741],[5127,5127]]],[1559216963088,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5126," "]],[5127,5127],[4741,4741]]],[1559216961262,["GJX@GJXAIOU",[[1,5107,"顺序存储结构，同时数组的下标可以体现结点"]],[5107,5107],[5127,5127]]],[1559217023099,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5146," "]],[4741,4741],[5147,5147]]],[1559217023099,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5146," "]],[5147,5147],[4741,4741]]],[1559216967812,["GJX@GJXAIOU",[[1,5127,"之间的逻辑关系；"]],[5127,5127],[5135,5135]]],[1559216977090,["GJX@GJXAIOU",[[1,5154,"\n"]],[5135,5135],[5136,5136]]],[1559217083101,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5155," "]],[4741,4741],[5156,5156]]],[1559217083101,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5155," "]],[5156,5156],[4741,4741]]],[1559217061864,["GJX@GJXAIOU",[[1,5138,"![完全二叉树的顺序存储结构]($resource/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)"]],[5138,5138],[5278,5278]]],[1559217063659,["GJX@GJXAIOU",[[1,5294,"\n"]],[5278,5278],[5279,5279]]],[1559217066328,["GJX@GJXAIOU",[[-1,5137,"\n"]],[5137,5137],[5136,5136]]],[1559217143120,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5294," "]],[4741,4741],[5295,5295]]],[1559217143120,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5294," "]],[5295,5295],[4741,4741]]],[1559217115513,["GJX@GJXAIOU",[[1,5278,"当存储普通的二叉树时候使用\""]],[5278,5278],[5292,5292]]],[1559217115548,["GJX@GJXAIOU",[[-1,5291,"\""],[1,5292,"“"]],[5292,5292],[5292,5292]]],[1559217116467,["GJX@GJXAIOU",[[-1,5291,"“"]],[5292,5292],[5291,5291]]],[1559217117473,["GJX@GJXAIOU",[[1,5291,"``"]],[5291,5291],[5293,5293]]],[1559217135251,["GJX@GJXAIOU",[[1,5292,"……"]],[5292,5292],[5294,5294]]],[1559217136748,["GJX@GJXAIOU",[[-1,5292,"……"]],[5294,5294],[5292,5292]]],[1559217138790,["GJX@GJXAIOU",[[1,5292,"……"]],[5292,5292],[5294,5294]]],[1559217140256,["GJX@GJXAIOU",[[-1,5292,"……"]],[5294,5294],[5292,5292]]],[1559217141849,["GJX@GJXAIOU",[[1,5292,"^"]],[5292,5292],[5293,5293]]],[1559217203120,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5310," "]],[4741,4741],[5311,5311]]],[1559217203120,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5310," "]],[5311,5311],[4741,4741]]],[1559217169618,["GJX@GJXAIOU",[[1,5294,"代替不存在的结点存储在数组中；，"]],[5294,5294],[5310,5310]]],[1559217170881,["GJX@GJXAIOU",[[-1,5309,"，"]],[5310,5310],[5309,5309]]],[1559217195546,["GJX@GJXAIOU",[[1,5309,"但是会造成很大的空间浪费，因此++++"]],[5309,5309],[5326,5326]]],[1559217197964,["GJX@GJXAIOU",[[-1,5324,"++++"]],[5328,5328],[5324,5324]]],[1559217198953,["GJX@GJXAIOU",[[1,5324,"===="]],[5324,5324],[5326,5326]]],[1559217263142,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5344," "]],[4741,4741],[5345,5345]]],[1559217263142,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5344," "]],[5345,5345],[4741,4741]]],[1559217219476,["GJX@GJXAIOU",[[1,5326,"顺序存储结构一般仅仅用于完全二叉树的除虫"]],[5326,5326],[5346,5346]]],[1559217220120,["GJX@GJXAIOU",[[-1,5344,"除虫"]],[5346,5346],[5344,5344]]],[1559217222778,["GJX@GJXAIOU",[[1,5344,"存储中"]],[5344,5344],[5347,5347]]],[1559217244311,["GJX@GJXAIOU",[[1,5079,"\n"]],[5078,5078],[5079,5079]]],[1559217252921,["GJX@GJXAIOU",[[1,5079,"- 顺序存储结构："]],[5079,5079],[5088,5088]]],[1559217262879,["GJX@GJXAIOU",[[1,5361,"- 链式存储结构"]],[5361,5361],[5369,5369]]],[1559217323140,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5383," "]],[4741,4741],[5384,5384]]],[1559217323140,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5383," "]],[5384,5384],[4741,4741]]],[1559217263364,["GJX@GJXAIOU",[[1,5369,"："]],[5369,5369],[5370,5370]]],[1559217263928,["GJX@GJXAIOU",[[1,5371,"- \n"]],[5370,5370],[5373,5373]]],[1559217264944,["GJX@GJXAIOU",[[-1,5371,"- "]],[5373,5373],[5371,5371]]],[1559217280795,["GJX@GJXAIOU",[[1,5370,"（）"]],[5370,5370],[5372,5372]]],[1559217286091,["GJX@GJXAIOU",[[1,5371,"二叉链表"]],[5371,5371],[5375,5375]]],[1559217301955,["GJX@GJXAIOU",[[1,5377,"结点"]],[5377,5377],[5379,5379]]],[1559217309288,["GJX@GJXAIOU",[[-1,5377,"结点"]],[5379,5379],[5377,5377]]],[1559217311701,["GJX@GJXAIOU",[[1,5377,"儿茶"]],[5377,5377],[5379,5379]]],[1559217312792,["GJX@GJXAIOU",[[-1,5377,"儿茶"]],[5379,5379],[5377,5377]]],[1559217322822,["GJX@GJXAIOU",[[1,5377,"二叉链表结点"]],[5377,5377],[5383,5383]]],[1559217383152,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5397," "]],[4741,4741],[5398,5398]]],[1559217383152,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5397," "]],[5398,5398],[4741,4741]]],[1559217327402,["GJX@GJXAIOU",[[1,5383,"结构定义如下："]],[5383,5383],[5390,5390]]],[1559217328635,["GJX@GJXAIOU",[[1,5404,"\n"]],[5390,5390],[5391,5391]]],[1559217330320,["GJX@GJXAIOU",[[1,5391,"```"]],[5391,5391],[5394,5394]]],[1559217330354,["GJX@GJXAIOU",[[1,5394,"language\n```\n"]],[5394,5394],[5394,5402]]],[1559217331353,["GJX@GJXAIOU",[[-1,5394,"language"],[1,5402,"c"]],[5394,5402],[5395,5395]]],[1559217331655,["GJX@GJXAIOU",[[1,5396,"\n"]],[5395,5395],[5396,5396]]],[1559217335184,["GJX@GJXAIOU",[[1,5396,"typedeg"]],[5396,5396],[5403,5403]]],[1559217336991,["GJX@GJXAIOU",[[-1,5396,"typedeg"]],[5403,5403],[5396,5396]]],[1559217503179,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5415," "]],[4741,4741],[5416,5416]]],[1559217503179,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5415," "]],[5416,5416],[4741,4741]]],[1559217488838,["GJX@GJXAIOU",[[1,5396,"/*\n\t二叉树的二叉链表结点结构定义\n*/\n//结点结构\ntypedef struct BiTNode{\n\tTElemType data; //结点数据\n\tstruct BiTNode *lchild,*rchild; //左右孩子指针\n}BiTNode.*BiTree;"]],[5396,5396],[5532,5532]]],[1559218883327,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5551," "]],[4741,4741],[5552,5552]]],[1559218883327,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5551," "]],[5552,5552],[4741,4741]]],[1559218835956,["GJX@GJXAIOU",[[1,5377,"- \n"]],[5376,5376],[5379,5379]]],[1559218836088,["GJX@GJXAIOU",[[-1,5377,"- "]],[5379,5379],[5378,5378]]],[1559218838394,["GJX@GJXAIOU",[[1,5378,"\n"]],[5377,5377],[5378,5378]]],[1559218838555,["GJX@GJXAIOU",[[1,5379,"\n"]],[5378,5378],[5379,5379]]],[1559218841551,["GJX@GJXAIOU",[[1,5378,"jiedian"]],[5378,5378],[5385,5385]]],[1559218842966,["GJX@GJXAIOU",[[-1,5378,"jiedian"]],[5385,5385],[5378,5378]]],[1559218844608,["GJX@GJXAIOU",[[1,5378,"儿茶"]],[5378,5378],[5380,5380]]],[1559218845258,["GJX@GJXAIOU",[[-1,5378,"儿茶"]],[5380,5380],[5378,5378]]],[1559218855637,["GJX@GJXAIOU",[[1,5378,"二叉链表结点机构示意图："]],[5378,5378],[5390,5390]]],[1559218855897,["GJX@GJXAIOU",[[1,5392,"\n"]],[5390,5390],[5391,5391]]],[1559218863607,["GJX@GJXAIOU",[[1,5391,"![二叉链表结点存储结构]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)"]],[5391,5391],[5511,5511]]],[1559218943340,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5686," "]],[4741,4741],[5687,5687]]],[1559218943340,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5686," "]],[5687,5687],[4741,4741]]],[1559218885118,["GJX@GJXAIOU",[[1,5672,"二"]],[5672,5672],[5673,5673]]],[1559218886035,["GJX@GJXAIOU",[[-1,5672,"二"]],[5673,5673],[5672,5672]]],[1559218903274,["GJX@GJXAIOU",[[1,5672,"二叉链表存储结构示例："]],[5672,5672],[5683,5683]]],[1559218903539,["GJX@GJXAIOU",[[1,5697,"\n"]],[5683,5683],[5684,5684]]],[1559219063361,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5698," "]],[4741,4741],[5699,5699]]],[1559219063361,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5698," "]],[5699,5699],[4741,4741]]],[1559219004440,["GJX@GJXAIOU",[[1,5685,"![二叉链表存储结构示例]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.png)"]],[5685,5685],[5805,5805]]],[1559219008064,["GJX@GJXAIOU",[[1,5817,"\n"]],[5805,5805],[5806,5806]]],[1559219663421,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5818," "]],[4741,4741],[5819,5819]]],[1559219663421,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5818," "]],[5819,5819],[4741,4741]]],[1559219632856,["GJX@GJXAIOU",[[1,5809,"## 6.8 遍历二叉树"]],[5809,5809],[5821,5821]]],[1559219633461,["GJX@GJXAIOU",[[1,5830,"\n"]],[5821,5821],[5822,5822]]],[1559219633714,["GJX@GJXAIOU",[[1,5831,"\n"]],[5822,5822],[5823,5823]]],[1559219723430,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5832," "]],[4741,4741],[5833,5833]]],[1559219723430,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5832," "]],[5833,5833],[4741,4741]]],[1559219681231,["GJX@GJXAIOU",[[1,5823,"•二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。"]],[5823,5823],[5901,5901]]],[1559219682865,["GJX@GJXAIOU",[[1,5910,"\n"]],[5901,5901],[5902,5902]]],[1559219683462,["GJX@GJXAIOU",[[1,5911,"\n"]],[5902,5902],[5903,5903]]],[1559219693849,["GJX@GJXAIOU",[[1,5871,"**"],[1,5873,"**"]],[5871,5873],[5871,5877]]],[1559219700169,["GJX@GJXAIOU",[[1,5867,"**"],[1,5869,"**"]],[5867,5869],[5867,5873]]],[1559219843444,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5920," "]],[4741,4741],[5921,5921]]],[1559219843444,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5920," "]],[5921,5921],[4741,4741]]],[1559219815669,["GJX@GJXAIOU",[[1,5911,"### 6.8.1遍历方法"]],[5911,5911],[5924,5924]]],[1559219819495,["GJX@GJXAIOU",[[1,5920,"二叉树"]],[5920,5920],[5923,5923]]],[1559219839373,["GJX@GJXAIOU",[[1,5928,"在限定从左到右的遍历顺序之后，分为四类；"]],[5928,5928],[5948,5948]]],[1559219963454,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5956," "]],[4741,4741],[5957,5957]]],[1559219963454,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5956," "]],[5957,5957],[4741,4741]]],[1559219950946,["GJX@GJXAIOU",[[1,5956,"\n"]],[5948,5948],[5949,5949]]],[1559219951324,["GJX@GJXAIOU",[[1,5957,"\n"]],[5949,5949],[5950,5950]]],[1559219960991,["GJX@GJXAIOU",[[1,5950,"- 前序遍历："]],[5950,5950],[5957,5957]]],[1559219961283,["GJX@GJXAIOU",[[1,5958,"- \n"]],[5957,5957],[5960,5960]]],[1559220023474,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,5968," "]],[4741,4741],[5969,5969]]],[1559220023474,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,5968," "]],[5969,5969],[4741,4741]]],[1559219968140,["GJX@GJXAIOU",[[1,5960,"中序遍历："]],[5960,5960],[5965,5965]]],[1559219968380,["GJX@GJXAIOU",[[1,5966,"- \n"]],[5965,5965],[5968,5968]]],[1559219972886,["GJX@GJXAIOU",[[1,5968,"后序遍历："]],[5968,5968],[5973,5973]]],[1559219973115,["GJX@GJXAIOU",[[1,5974,"- \n"]],[5973,5973],[5976,5976]]],[1559219978621,["GJX@GJXAIOU",[[1,5976,"层序遍历："]],[5976,5976],[5981,5981]]],[1559219978883,["GJX@GJXAIOU",[[1,5982,"- \n"]],[5981,5981],[5984,5984]]],[1559219979738,["GJX@GJXAIOU",[[-1,5982,"- "]],[5984,5984],[5982,5982]]],[1559219996931,["GJX@GJXAIOU",[[1,5960,"\n- "]],[5957,5957],[5960,5960]]],[1559219997406,["GJX@GJXAIOU",[[1,5960,"–若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。"]],[5960,5960],[6003,6003]]],[1559219999785,["GJX@GJXAIOU",[[-1,5958,"- –"]],[5958,5961],[5958,5958]]],[1559220203486,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6033," "]],[4741,4741],[6034,6034]]],[1559220203486,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6033," "]],[6034,6034],[4741,4741]]],[1559220173059,["GJX@GJXAIOU",[[1,6001,"\n"]],[6000,6000],[6001,6001]]],[1559220174117,["GJX@GJXAIOU",[[1,6002,"\n"]],[6001,6001],[6002,6002]]],[1559220181740,["GJX@GJXAIOU",[[1,6002,"![二叉树前序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png)"]],[6002,6002],[6092,6092]]],[1559220183845,["GJX@GJXAIOU",[[1,6092,"\n"]],[6091,6091],[6092,6092]]],[1559220263500,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6125," "]],[4741,4741],[6126,6126]]],[1559220263500,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6125," "]],[6126,6126],[4741,4741]]],[1559220217642,["GJX@GJXAIOU",[[1,6103,"\n- "]],[6100,6100],[6103,6103]]],[1559220218341,["GJX@GJXAIOU",[[-1,6101,"- "]],[6103,6103],[6101,6101]]],[1559220219522,["GJX@GJXAIOU",[[1,6101,"–若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。"]],[6101,6101],[6167,6167]]],[1559220221761,["GJX@GJXAIOU",[[-1,6101,"–"]],[6102,6102],[6101,6101]]],[1559220223780,["GJX@GJXAIOU",[[1,6167,"\n"]],[6166,6166],[6167,6167]]],[1559220223928,["GJX@GJXAIOU",[[1,6168,"\n"]],[6167,6167],[6168,6168]]],[1559220383508,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6193," "]],[4741,4741],[6194,6194]]],[1559220383508,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6193," "]],[6194,6194],[4741,4741]]],[1559220334768,["GJX@GJXAIOU",[[1,6167,"![二叉树中序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png)"]],[6167,6167],[6257,6257]]],[1559220337127,["GJX@GJXAIOU",[[1,6268,"\n- "]],[6265,6265],[6268,6268]]],[1559220337264,["GJX@GJXAIOU",[[-1,6266,"- "]],[6268,6268],[6267,6267]]],[1559220349791,["GJX@GJXAIOU",[[1,6266,"–若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。"]],[6266,6266],[6311,6311]]],[1559220350977,["GJX@GJXAIOU",[[1,6312,"\n"]],[6311,6311],[6312,6312]]],[1559220351143,["GJX@GJXAIOU",[[1,6313,"\n"]],[6312,6312],[6313,6313]]],[1559220353262,["GJX@GJXAIOU",[[-1,6266,"–"]],[6267,6267],[6266,6266]]],[1559220503524,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6329," "]],[4741,4741],[6330,6330]]],[1559220503524,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6329," "]],[6330,6330],[4741,4741]]],[1559220482517,["GJX@GJXAIOU",[[1,6311,"![二叉树后序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png)"]],[6311,6311],[6401,6401]]],[1559220500209,["GJX@GJXAIOU",[[1,6410,"–若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。"]],[6410,6410],[6474,6474]]],[1559220502316,["GJX@GJXAIOU",[[-1,6410,"–"]],[6411,6411],[6410,6410]]],[1559220683536,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6481," "]],[4741,4741],[6482,6482]]],[1559220683536,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6481," "]],[6482,6482],[4741,4741]]],[1559220656859,["GJX@GJXAIOU",[[1,6474,"![二叉树的层序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.png)"]],[6474,6475],[6574,6574]]],[1559220659299,["GJX@GJXAIOU",[[1,6580,"\n"]],[6574,6574],[6575,6575]]],[1559220659432,["GJX@GJXAIOU",[[1,6581,"\n"]],[6575,6575],[6576,6576]]],[1559220863562,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6582," "]],[4741,4741],[6583,6583]]],[1559220863562,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6582," "]],[6583,6583],[4741,4741]]],[1559220862932,["GJX@GJXAIOU",[[1,6576,"### 6.8.3 前序遍历算法"]],[6576,6576],[6592,6592]]],[1559220923579,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6598," "]],[4741,4741],[6599,6599]]],[1559220923579,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6598," "]],[6599,6599],[4741,4741]]],[1559220863627,["GJX@GJXAIOU",[[1,6598,"\n"]],[6592,6592],[6593,6593]]],[1559220921472,["GJX@GJXAIOU",[[1,6593,"```"]],[6593,6593],[6596,6596]]],[1559220921509,["GJX@GJXAIOU",[[1,6596,"language\n```\n"]],[6596,6596],[6596,6604]]],[1559220923103,["GJX@GJXAIOU",[[-1,6596,"language"],[1,6604,"c"]],[6596,6604],[6597,6597]]],[1559220923263,["GJX@GJXAIOU",[[1,6598,"\n"]],[6597,6597],[6598,6598]]],[1559220983596,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6609," "]],[4741,4741],[6610,6610]]],[1559220983596,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6609," "]],[6610,6610],[4741,4741]]],[1559220931929,["GJX@GJXAIOU",[[1,6598,"//"]],[6598,6598],[6600,6600]]],[1559220932725,["GJX@GJXAIOU",[[-1,6598,"//"]],[6600,6600],[6598,6598]]],[1559222073838,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6609," "]],[4741,4741],[6610,6610]]],[1559222073838,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6609," "]],[6610,6610],[4741,4741]]],[1559222017183,["GJX@GJXAIOU",[[1,6598,"/*\n\t二叉树的前序遍历算法\n*/\n\nvoid PreOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->lchild); //先序遍历左子树\n\tPreOrderTraverse(T->rchild); //先序遍历右子树\n}\n"]],[6598,6598],[6810,6810]]],[1559222373876,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6821," "]],[4741,4741],[6822,6822]]],[1559222373876,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6821," "]],[6822,6822],[4741,4741]]],[1559222360356,["GJX@GJXAIOU",[[1,6821,"\n"]],[6814,6814],[6815,6815]]],[1559222361430,["GJX@GJXAIOU",[[1,6815,"shiyo"]],[6815,6815],[6820,6820]]],[1559222362549,["GJX@GJXAIOU",[[-1,6815,"shiyo"]],[6820,6820],[6815,6815]]],[1559222366728,["GJX@GJXAIOU",[[1,6815,"使用递归"]],[6815,6815],[6819,6819]]],[1559222493881,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6826," "]],[4741,4741],[6827,6827]]],[1559222493881,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6826," "]],[6827,6827],[4741,4741]]],[1559222450560,["GJX@GJXAIOU",[[1,6826,"\n"]],[6819,6819],[6820,6820]]],[1559222457120,["GJX@GJXAIOU",[[1,6820,"以下图为例："]],[6820,6820],[6826,6826]]],[1559222458268,["GJX@GJXAIOU",[[-1,6825,"："]],[6826,6826],[6825,6825]]],[1559222463192,["GJX@GJXAIOU",[[1,6825,"程序说明："]],[6825,6825],[6830,6830]]],[1559222463684,["GJX@GJXAIOU",[[1,6837,"\n"]],[6830,6830],[6831,6831]]],[1559223814048,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6838," "]],[4741,4741],[6839,6839]]],[1559223814048,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6838," "]],[6839,6839],[4741,4741]]],[1559223765812,["GJX@GJXAIOU",[[1,6831,"![前序遍历算法]($resource/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.jpg)"]],[6831,6831],[6911,6911]]],[1559223994067,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,6917," "]],[4741,4741],[6918,6918]]],[1559223994067,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,6917," "]],[6918,6918],[4741,4741]]],[1559223936509,["GJX@GJXAIOU",[[1,6913,"### 6.8.3 前序遍历算法\n```c\n/*\n\t二叉树的前序遍历算法\n*/\n\nvoid PreOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->lchild); //先序遍历左子树\n\tPreOrderTraverse(T->rchild); //先序遍历右子树\n}\n\n```"]],[6913,6913],[7151,7151]]],[1559223938626,["GJX@GJXAIOU",[[-1,6921,"3"]],[6922,6922],[6921,6921]]],[1559223939012,["GJX@GJXAIOU",[[1,6921,"4"]],[6921,6921],[6922,6922]]],[1559223940224,["GJX@GJXAIOU",[[-1,6923,"前"]],[6924,6924],[6923,6923]]],[1559223941481,["GJX@GJXAIOU",[[1,6923,"中"]],[6923,6923],[6924,6924]]],[1559223944778,["GJX@GJXAIOU",[[-1,6943,"前"]],[6944,6944],[6943,6943]]],[1559223945830,["GJX@GJXAIOU",[[1,6943,"中"]],[6943,6943],[6944,6944]]],[1559223952554,["GJX@GJXAIOU",[[-1,6959,"Pre"],[1,6962,"In"]],[6959,6959],[6961,6961]]],[1559223966892,["GJX@GJXAIOU",[[-1,7065,"PreOrderTraverse(T->lchild); //先序遍历左子树"]],[7065,7103],[7065,7065]]],[1559223968393,["GJX@GJXAIOU",[[-1,7065,"\n"]],[7065,7065],[7065,7065]]],[1559223971183,["GJX@GJXAIOU",[[-1,7065,"\t"]],[7065,7066],[7065,7065]]],[1559223973268,["GJX@GJXAIOU",[[1,7015,"\n\t"]],[7013,7013],[7015,7015]]],[1559223973794,["GJX@GJXAIOU",[[1,7015,"PreOrderTraverse(T->lchild); //先序遍历左子树"]],[7015,7015],[7053,7053]]],[1559224894088,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7154," "]],[4741,4741],[7155,7155]]],[1559224894088,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7154," "]],[7155,7155],[4741,4741]]],[1559224867545,["GJX@GJXAIOU",[[1,7154,"\n"]],[7150,7150],[7151,7151]]],[1559224878302,["GJX@GJXAIOU",[[-1,7046,"先"]],[7047,7047],[7046,7046]]],[1559224879453,["GJX@GJXAIOU",[[1,7046,"中"]],[7046,7046],[7047,7047]]],[1559224886353,["GJX@GJXAIOU",[[-1,7136,"先"]],[7137,7137],[7136,7136]]],[1559224887407,["GJX@GJXAIOU",[[1,7136,"中"]],[7136,7136],[7137,7137]]],[1559225254153,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7155," "]],[4741,4741],[7156,7156]]],[1559225254153,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7155," "]],[7156,7156],[4741,4741]]],[1559225211765,["GJX@GJXAIOU",[[1,7155,"\n"]],[7150,7150],[7151,7151]]],[1559225231897,["GJX@GJXAIOU",[[1,7151,"中序遍历上面二叉树的节点顺序为：HKd"]],[7151,7151],[7170,7170]]],[1559225232479,["GJX@GJXAIOU",[[-1,7169,"d"]],[7170,7170],[7169,7169]]],[1559225235953,["GJX@GJXAIOU",[[1,7169,"DBR"]],[7169,7169],[7172,7172]]],[1559225236447,["GJX@GJXAIOU",[[-1,7171,"R"]],[7172,7172],[7171,7171]]],[1559225242256,["GJX@GJXAIOU",[[1,7171,"EAIFCGK"]],[7171,7171],[7178,7178]]],[1559225243070,["GJX@GJXAIOU",[[-1,7177,"K"]],[7178,7178],[7177,7177]]],[1559225244823,["GJX@GJXAIOU",[[1,7177,"J"]],[7177,7177],[7178,7178]]],[1559225314160,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7183," "]],[4741,4741],[7184,7184]]],[1559225314160,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7183," "]],[7184,7184],[4741,4741]]],[1559225264208,["GJX@GJXAIOU",[[1,7183,"\n"]],[7179,7179],[7180,7180]]],[1559225264320,["GJX@GJXAIOU",[[1,7184,"\n"]],[7180,7180],[7181,7181]]],[1559225264806,["GJX@GJXAIOU",[[1,7181,"### 6.8.4 中序遍历算法\n```c\n/*\n\t二叉树的中序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //中序遍历左子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->rchild); //中序遍历右子树\n}\n\n```\n中序遍历上面二叉树的节点顺序为：HKDBEAIFCGJ"]],[7181,7181],[7446,7446]]],[1559225267237,["GJX@GJXAIOU",[[-1,7191,"中"]],[7192,7192],[7191,7191]]],[1559225268049,["GJX@GJXAIOU",[[1,7191,"HOU"]],[7191,7191],[7194,7194]]],[1559225268702,["GJX@GJXAIOU",[[-1,7191,"HOU"]],[7194,7194],[7191,7191]]],[1559225270678,["GJX@GJXAIOU",[[1,7191,"后"]],[7191,7191],[7192,7192]]],[1559225272668,["GJX@GJXAIOU",[[-1,7211,"中"]],[7212,7212],[7211,7211]]],[1559225273858,["GJX@GJXAIOU",[[1,7211,"后"]],[7211,7211],[7212,7212]]],[1559225277551,["GJX@GJXAIOU",[[-1,7373,"PreOrderTraverse(T->rchild); //中序遍历右子树"]],[7373,7411],[7373,7373]]],[1559225278826,["GJX@GJXAIOU",[[-1,7373,"\n"]],[7373,7373],[7373,7373]]],[1559225280775,["GJX@GJXAIOU",[[1,7323,"\n\t"]],[7321,7321],[7323,7323]]],[1559225281191,["GJX@GJXAIOU",[[1,7323,"PreOrderTraverse(T->rchild); //中序遍历右子树"]],[7323,7323],[7361,7361]]],[1559225283612,["GJX@GJXAIOU",[[-1,7412,"\t"]],[7413,7413],[7412,7412]]],[1559225290457,["GJX@GJXAIOU",[[-1,7314,"中"]],[7315,7315],[7314,7314]]],[1559225291709,["GJX@GJXAIOU",[[1,7314,"后"]],[7314,7314],[7315,7315]]],[1559225292859,["GJX@GJXAIOU",[[-1,7354,"中"]],[7355,7355],[7354,7354]]],[1559225294264,["GJX@GJXAIOU",[[1,7354,"后"]],[7354,7354],[7355,7355]]],[1559225297897,["GJX@GJXAIOU",[[-1,7419,"中"]],[7420,7420],[7419,7419]]],[1559225299025,["GJX@GJXAIOU",[[1,7419,"后"]],[7419,7419],[7420,7420]]],[1559225304904,["GJX@GJXAIOU",[[-1,7435,"H"],[-1,7437,"DBEAIFCGJ"]],[7435,7446],[7436,7436]]],[1559225306038,["GJX@GJXAIOU",[[1,7436,"HS"]],[7436,7436],[7438,7438]]],[1559225306681,["GJX@GJXAIOU",[[-1,7437,"S"]],[7438,7438],[7437,7437]]],[1559225313127,["GJX@GJXAIOU",[[1,7437,"DEBIFJ"]],[7437,7437],[7443,7443]]],[1559225374171,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7447," "]],[4741,4741],[7448,7448]]],[1559225374171,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7447," "]],[7448,7448],[4741,4741]]],[1559225316142,["GJX@GJXAIOU",[[1,7443,"GCA"]],[7443,7443],[7446,7446]]],[1559225434180,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7450," "]],[4741,4741],[7451,7451]]],[1559225434180,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7450," "]],[7451,7451],[4741,4741]]],[1559225377262,["GJX@GJXAIOU",[[1,7450,"\n"]],[7446,7446],[7447,7447]]],[1559225377374,["GJX@GJXAIOU",[[1,7451,"\n"]],[7447,7447],[7448,7448]]],[1559225377512,["GJX@GJXAIOU",[[1,7452,"\n"]],[7448,7448],[7449,7449]]],[1559225377750,["GJX@GJXAIOU",[[1,7453,"\n"]],[7449,7449],[7450,7450]]],[1559225377897,["GJX@GJXAIOU",[[1,7454,"\n"]],[7450,7450],[7451,7451]]],[1559225379271,["GJX@GJXAIOU",[[1,7451,"ZHUY"]],[7451,7451],[7455,7455]]],[1559225380170,["GJX@GJXAIOU",[[-1,7451,"ZHUY"]],[7455,7455],[7451,7451]]],[1559225382604,["GJX@GJXAIOU",[[1,7451,"注意："]],[7451,7451],[7454,7454]]],[1559225384352,["GJX@GJXAIOU",[[1,7458,"\n"]],[7454,7454],[7455,7455]]],[1559225422559,["GJX@GJXAIOU",[[1,7455,"已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；"]],[7455,7455],[7483,7483]]],[1559225430063,["GJX@GJXAIOU",[[1,7455,"- "]],[7455,7455],[7457,7457]]],[1559225432508,["GJX@GJXAIOU",[[1,7486,"- \n"]],[7485,7485],[7488,7488]]],[1559225494176,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7492," "]],[4741,4741],[7493,7493]]],[1559225494176,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7492," "]],[7493,7493],[4741,4741]]],[1559225456771,["GJX@GJXAIOU",[[1,7488,"已知后序遍历序列和中序遍历序列，可以唯一确定一个"]],[7488,7488],[7512,7512]]],[1559225457241,["GJX@GJXAIOU",[[-1,7511,"个"]],[7512,7512],[7511,7511]]],[1559225460725,["GJX@GJXAIOU",[[1,7511,"棵二叉树；"]],[7511,7511],[7516,7516]]],[1559225479371,["GJX@GJXAIOU",[[1,7517,"- \n"]],[7516,7516],[7519,7519]]],[1559225479497,["GJX@GJXAIOU",[[-1,7517,"- "]],[7519,7519],[7518,7518]]],[1559225479628,["GJX@GJXAIOU",[[1,7521,"\n"]],[7518,7518],[7519,7519]]],[1559225479777,["GJX@GJXAIOU",[[1,7522,"\n"]],[7519,7519],[7520,7520]]],[1559225492411,["GJX@GJXAIOU",[[1,7520,"## 6.9 二叉树的建立"]],[7520,7520],[7533,7533]]],[1559225492759,["GJX@GJXAIOU",[[1,7536,"\n"]],[7533,7533],[7534,7534]]],[1559225493197,["GJX@GJXAIOU",[[1,7537,"\n"]],[7534,7534],[7535,7535]]],[1559225614183,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7538," "]],[4741,4741],[7539,7539]]],[1559225614183,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7538," "]],[7539,7539],[4741,4741]]],[1559225614014,["GJX@GJXAIOU",[[1,7535,"假设二叉树每个结点都是一个字符，"]],[7535,7535],[7551,7551]]],[1559225674193,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7554," "]],[4741,4741],[7555,7555]]],[1559225674193,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7554," "]],[7555,7555],[4741,4741]]],[1559225622903,["GJX@GJXAIOU",[[1,7551,"而且空节点使用``"]],[7551,7551],[7560,7560]]],[1559225625093,["GJX@GJXAIOU",[[1,7559,"#"]],[7559,7559],[7560,7560]]],[1559225626717,["GJX@GJXAIOU",[[1,7561,"dai"]],[7561,7561],[7564,7564]]],[1559225627602,["GJX@GJXAIOU",[[-1,7561,"dai"]],[7564,7564],[7561,7561]]],[1559225631177,["GJX@GJXAIOU",[[1,7561,"代替；"]],[7561,7561],[7564,7564]]],[1559225634007,["GJX@GJXAIOU",[[1,7567,"\n"]],[7564,7564],[7565,7565]]],[1559225638485,["GJX@GJXAIOU",[[1,7565,"```"]],[7565,7565],[7568,7568]]],[1559225638524,["GJX@GJXAIOU",[[1,7568,"language\n```\n"]],[7568,7568],[7568,7576]]],[1559225639591,["GJX@GJXAIOU",[[-1,7568,"language"],[1,7576,"c"]],[7568,7576],[7569,7569]]],[1559225639753,["GJX@GJXAIOU",[[1,7570,"\n"]],[7569,7569],[7570,7570]]],[1559225734201,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7578," "]],[4741,4741],[7579,7579]]],[1559225734201,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7578," "]],[7579,7579],[4741,4741]]],[1559225701608,["GJX@GJXAIOU",[[1,7570,"typedef char ElemType;\n\ntypedef struct BiTNode\n{\n\tchar data;\n\tstruct BiTNode *lchild, *rchild;\n} BiTNode, *BiTree;\n\n// 鍒涘缓涓€妫典簩鍙夋爲锛岀害瀹氱敤鎴烽伒鐓у墠搴忛亶鍘嗙殑鏂瑰紡杈撳叆鏁版嵁\nCreateBiTree(BiTree *T)\n{\n\tchar c;\n\n\tscanf(\"%c\", &c);\n\tif( ' ' == c )\n\t{\n\t\t*T = NULL;\n\t}\n\telse\n\t{\n\t\t*T = (BiTNode *)malloc(sizeof(BiTNode));\n\t\t(*T)->data = c;\n\t\tCreateBiTree(&(*T)->lchild);\n\t\tCreateBiTree(&(*T)->rchild);\n\t}\n}"]],[7570,7570],[7953,7953]]],[1559225715026,["GJX@GJXAIOU",[[-1,7689,"鍒涘缓涓€妫典簩鍙夋爲锛岀害瀹氱敤鎴烽伒鐓у墠搴忛亶鍘嗙殑鏂瑰紡杈撳叆鏁版嵁"]],[7689,7727],[7689,7689]]],[1559225723072,["GJX@GJXAIOU",[[1,7689,"an"]],[7689,7689],[7691,7691]]],[1559225723749,["GJX@GJXAIOU",[[-1,7689,"an"]],[7691,7691],[7689,7689]]],[1559225730004,["GJX@GJXAIOU",[[1,7689,"按前序输入"]],[7689,7689],[7694,7694]]],[1559225794208,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7928," "]],[4741,4741],[7929,7929]]],[1559225794208,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7928," "]],[7929,7929],[4741,4741]]],[1559225741637,["GJX@GJXAIOU",[[1,7694,"二叉树中结点的值（）"]],[7694,7694],[7704,7704]]],[1559225745042,["GJX@GJXAIOU",[[1,7703,"一个字符"]],[7703,7703],[7707,7707]]],[1559225771299,["GJX@GJXAIOU",[[1,7708,"，使用#表示空树，构造二叉链表表示二叉树"]],[7708,7708],[7728,7728]]],[1559225854216,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,7962," "]],[4741,4741],[7963,7963]]],[1559225854216,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,7962," "]],[7963,7963],[4741,4741]]],[1559225795677,["GJX@GJXAIOU",[[-1,7789," "]],[7790,7790],[7789,7789]]],[1559225796633,["GJX@GJXAIOU",[[1,7789,"#"]],[7789,7789],[7790,7790]]],[1559225813822,["GJX@GJXAIOU",[[1,7872,"\n\t\t"]],[7869,7869],[7872,7872]]],[1559225817916,["GJX@GJXAIOU",[[1,7872,"if()"]],[7872,7872],[7876,7876]]],[1559225822639,["GJX@GJXAIOU",[[1,7875,"!*T"]],[7875,7875],[7878,7878]]],[1559225827103,["GJX@GJXAIOU",[[1,7879,"{"]],[7879,7879],[7880,7880]]],[1559225827645,["GJX@GJXAIOU",[[1,7881,"\n"]],[7880,7880],[7881,7881]]],[1559225830611,["GJX@GJXAIOU",[[1,7881,"        "]],[7881,7881],[7889,7889]]],[1559225831566,["GJX@GJXAIOU",[[-1,7881,"        "],[1,7889,"\n"]],[7889,7889],[7882,7882]]],[1559225834351,["GJX@GJXAIOU",[[1,7882,"        }"]],[7882,7882],[7891,7891]]],[1559225843989,["GJX@GJXAIOU",[[1,7881,"          exit();"]],[7881,7881],[7898,7898]]],[1559225851694,["GJX@GJXAIOU",[[1,7896,"OVERFLOW"]],[7896,7896],[7904,7904]]],[1559225914226,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,8009," "]],[4741,4741],[8010,8010]]],[1559225914226,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,8009," "]],[8010,8010],[4741,4741]]],[1559225886274,["GJX@GJXAIOU",[[1,7934," //生成根节点"]],[7934,7934],[7942,7942]]],[1559225896577,["GJX@GJXAIOU",[[1,7973," //构造左子树"]],[7973,7973],[7981,7981]]],[1559225902888,["GJX@GJXAIOU",[[1,8012," //构造右子树"]],[8012,8012],[8020,8020]]],[1559226311763,[null,[[-1,4741,"）=1\n;"],[1,4746,">=1）;\n"],[-1,4748,"\n"],[1,4795,"\n"],[-1,4797,"\n"],[1,4844,"\n"],[-1,4846,"\n"],[-1,5056," "],[1,5057,"\n\n"],[-1,5064," "],[1,8033," "]],[4741,4741],[8034,8034]]],[1559226311763,[null,[[1,4741,"）=1\n;"],[-1,4741,">=1）;\n"],[1,4749,"\n"],[-1,4795,"\n"],[1,4798,"\n"],[-1,4844,"\n"],[1,4847,"\n"],[1,5056," "],[-1,5056,"\n\n"],[1,5065," "],[-1,8033," "]],[8034,8034],[4741,4741]]],[1559226291757,["GJX@GJXAIOU",[[1,8033,"\n"]],[8029,8029],[8030,8030]]],[1559226291917,["GJX@GJXAIOU",[[1,8034,"\n"]],[8030,8030],[8031,8031]]],[1559226292553,["GJX@GJXAIOU",[[1,8035,"\n"]],[8031,8031],[8032,8032]]],[1559226293468,["GJX@GJXAIOU",[[1,8036,"\n"]],[8032,8032],[8033,8033]]],[1559226293652,["GJX@GJXAIOU",[[1,8037,"\n"]],[8033,8033],[8034,8034]]],[1559226295558,["GJX@GJXAIOU",[[1,8034,"### "]],[8034,8034],[8038,8038]]],[1559226297916,["GJX@GJXAIOU",[[-1,8036,"# "]],[8038,8038],[8036,8036]]],[1559226305043,["GJX@GJXAIOU",[[1,8036," 6.10 线索二叉树"]],[8036,8036],[8047,8047]]]],null,"GJX@GJXAIOU"],["7470fd7c-d9b5-4f5c-9ee4-6808138830f9",1559265768231,"# 树\n\n\n## 6.2 树的定义\n\n•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n- 有且仅有一个特定的称为根(Root)的结点；\n- 当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n\n注意点：\n- n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n- m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。\n\n\n### 6.2.1 结点分类\n\n- 结点拥有子树数目称为结点的度；\n  - 度为0的结点称为叶结点(Leaf)或终端结点\n  - 度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。\n\n树的度是树内各结点的度的最大值；\n\n### 6.2.2结点之间的关系\n\n•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。\n•结点的祖先是从根到该结点所经分支上的所有结点。\n\n### 6.2.3 树的其他相关概念\n\n•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n•其双亲在同一层的结点互为堂兄弟。\n•树中结点的最大层次称为树的深度(Depth)或高度。\n如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树；\n森林是m(m>=0)棵互不相交的树的集合；\n\n\n## 6.3 树的抽象数据类型\n\n```c\nADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT\n```\n\n\n\n## 6.4 树的存储结构\n\n- 三种表示方法：双亲表示法，孩子表示法、孩子兄弟表示法\n\n\n### 6.4.1 双亲表示法\n\n在每个结点中附设一个指示器指示其双亲结点在数组中的位置。\n\n![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n双亲表示法结点结构定义代码：\n```c\n//数的双亲表示法结点结构定义\n#define MAX_TREE_SIZE 100\ntypedef int ElemType;\n\ntypedef struct PTNode //结点结构\n{\n\tElemType data;\t// 结点数据\n\tint parent;\t\t// 双亲位置\n}PTNode;\n\ntypedef struct //树结构\n{\n\tPTNode nodes[MAX_TREE_SIZE]; //结点数组\n\tint r;\t\t\t //根的位置和节点数\n\tint n;\t\t\t\n}PTree;\n```\n\n注：根节点的位置域即parent域设置为-1；\n图示如下：\n\n![双亲表示法]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n补充：上面的双亲表示法无法很方便的之后某个结点的孩子结点有哪些，因此在结点结构的加上一个最左边（长子）域，没有孩子的结点长子域设置为-1；\n如果同时关注各兄弟之间的关系；可以同时加上一个右兄弟域，如果存在右兄弟则记录下标，没有就记为-1;\n\n补充之后图示：\n![双亲表示法补充]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%A1%A5%E5%85%85.jpg)\n\n==实际使用过程中，存储结构的设计十分灵活，根据具体情况采用==\n\n\n\n### 6.4.2 孩子表示法\n\n因为数的每个结点可能含有多个子树，因此可以使用多重链表：每个结点有多个指针域，其中每个指针指向一棵子树的根节点，称为多重链表表示法；\n\n\n- 方案一：指针域的个数等于树的度（树的度为数的各个结点度的最大值）\n当树中各个结点的度相差很大的时候，浪费空间；相差很小的时候是一种优点；\n\n![孩子表示法方案一结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n![孩子表示法方案一]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80.png)\n\n- 方案二：每个结点指针域的个数等于该结点的度\n空间利用率更高了，但是因为各个结点的链表结构不同，维护各个结点度的数值较为麻烦\n\n![孩子表示法方案二结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n\n![孩子表示法方案二]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n\n\n- 具体方案：\n把每个结点的孩子结点排列起来，以单链表做存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空；然后n个头指针又组成一个线性表，采用顺序储存结构，存放进一个一维数组中。\n如下图所示：\n![图片1]($resource/%E5%9B%BE%E7%89%871.jpg)\n\n\n孩子表示法的结构定义代码：\n```c\n/*\n\t孩子表示法结构定义\n*/\n#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 孩子结点\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 该结点在表头数组中的下标\n\tstruct CTNode *next;\t\n} *ChildPtr;\n\n// 表头结构\ntypedef struct\n{\t\n\tElemType data;\t\t\t\n\tint parent;\t\t\t\t\n\tChildPtr firstchild;\t// 存储该结点孩子链表的头指针\n} CTBox;\n\n//树结构\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 结点数组\n\tint r, n; //根的位置和结点数\n}\n```\n\n该结构便于查找某个结点的某个孩子或者某个结点的兄弟有利，但是要查找某个结点的双亲就需要遍历整棵树，可以采用在表头数组中在data和firstchild中加上一列parent实现；称为：双亲孩子表示法。\n\n\n\n\n\n### 6.4.3 孩子兄弟表示法\n\n理论：如果任意一棵树，他的结点的第一个孩子如果存在就是唯一的，他的右兄弟如果存在也是为唯一的；\n\n树的孩子兄弟表示法结构定义：\n```c\n/*\n\t树的孩子兄弟表示法结构定义\n*/\ntypedef struct CSNode{\n\tTElemType data;\n\tstruct CSNode *firstchild,*rightsib;\n}CSNode.*CSTree;\n```\n\n![孩子兄弟表示法]($resource/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n\n## 6.5 二叉树\n\n•二叉树（Binary Tree）是n（n>=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。\n\n\n### 6.5.1二叉树特点\n\n- 每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。\n- 左子树和右子树是有顺序的，次序不能颠倒；\n- 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树；\n- 二叉树的五种基本形态：\n  - •空二叉树\n  - •只有一个根结点\n  -  •根结点只有左子树\n  - •根结点只有右子树\n  - •根结点既有左子树又有右子树\n\n### 6.5.2 特殊的二叉树\n\n- 斜树：\n  - 所有结点都只有左子树或者只有右子树，称为：左斜树和右斜树；\n- 满二叉树：\n  - 所有分支结点都存在左子树和右子树，并且所有的叶子都在同一层上；\n  - 特点：\n    - 叶子只能出现在最下一层。\n    - 非叶子结点的度一定是2。\n    - 在同样深度的二叉树中，满二叉树的结点个数一定最多，同时叶子也是最多。\n- 完全二叉树：\n  - 对一棵具有n个结点的二叉树按层序编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点位置完全相同；\n  - 完全二叉树的特点有：\n    - 叶子结点只能出现在最下两层。\n    - 最下层的叶子一定集中在左部连续位置。\n    - 倒数第二层，若有叶子结点，一定都在右部连续位置。\n    - 如果结点度为1，则该结点只有左孩子。\n    - 同样结点树的二叉树，完全二叉树的深度最小。\n  - 注意：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。\n  - 判断：==将每个结点按照满二叉树的结构逐层顺序编号，如果顺序出现空档，则说明不是完全二叉树，否则就是==\n\n## 6.6 二叉树的性质\n\n- 性质1：在二叉树的第i层至多有2^(i-1)个结点(i>=1)；\n- 性质2：深度为K的二叉树至多有(2^k)-1个结点（k>=1）;\n- 性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1；\n- 性质4：具有n个结点的完全二叉树的深度为⌊log₂n⌋+1；（⌊x⌋表示不大于x的最大整数）\n- 性质5：如果对一棵有n个结点的完全二叉树(其深度为⌊log₂n⌋+1)的结点按层序编号，对任一结点i(1<=i<=n)有以下性质：\n  - 如果i = 1，则结点 i  是二叉树的根，无双亲；如果i > 1，则其双亲是结点⌊i/2⌋\n  - 如果2i > n，则结点 i  无做左孩子(结点 i  为叶子结点)；否则其左孩子是结点2i\n  - 如果2i+1 > n，则结点  i  无右孩子；否则其右孩子是结点2i+1\n\n\n\n\n\n\n## 6.7二叉树的存储结构\n\n- 顺序存储结构：\n二叉树可以使用顺序存储结构；完全二叉树的使用一维数组实现顺序存储结构，同时数组的下标可以体现结点之间的逻辑关系；\n\n![完全二叉树的顺序存储结构]($resource/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n当存储普通的二叉树时候使用`^`代替不存在的结点存储在数组中；但是会造成很大的空间浪费，因此==顺序存储结构一般仅仅用于完全二叉树的存储中==\n\n- 链式存储结构：（二叉链表）\n\n二叉链表结点机构示意图：\n![二叉链表结点存储结构]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n二叉链表结点结构定义如下：\n```c\n/*\n\t二叉树的二叉链表结点结构定义\n*/\n//结点结构\ntypedef struct BiTNode{\n\tTElemType data; //结点数据\n\tstruct BiTNode *lchild,*rchild; //左右孩子指针\n}BiTNode.*BiTree;\n```\n二叉链表存储结构示例：\n\n![二叉链表存储结构示例]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.png)\n\n\n\n\n## 6.8 遍历二叉树\n\n•二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种**次序**依次**访问**二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。\n\n### 6.8.1二叉树遍历方法\n在限定从左到右的遍历顺序之后，分为四类；\n\n- 前序遍历：\n若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。\n\n![二叉树前序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 中序遍历：\n若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。\n![二叉树中序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 后序遍历：\n若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。\n![二叉树后序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 层序遍历：\n若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。\n![二叉树的层序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n\n### 6.8.3 前序遍历算法\n```c\n/*\n\t二叉树的前序遍历算法\n*/\n\nvoid PreOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->lchild); //先序遍历左子树\n\tPreOrderTraverse(T->rchild); //先序遍历右子树\n}\n\n```\n使用递归\n以下图为例程序说明：\n![前序遍历算法]($resource/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.jpg)\n\n\n### 6.8.4 中序遍历算法\n```c\n/*\n\t二叉树的中序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //中序遍历左子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->rchild); //中序遍历右子树\n}\n\n```\n中序遍历上面二叉树的节点顺序为：HKDBEAIFCGJ\n\n\n### 6.8.4 后序遍历算法\n```c\n/*\n\t二叉树的后序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //后序遍历左子树\n\tPreOrderTraverse(T->rchild); //后序遍历右子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n}\n\n```\n后序遍历上面二叉树的节点顺序为：KHDEBIFJGCA\n\n\n\n\n注意：\n- 已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n- 已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n\n\n\n## 6.9 二叉树的建立\n\n假设二叉树每个结点都是一个字符，而且空节点使用`#`代替；\n```c\ntypedef char ElemType;\n\ntypedef struct BiTNode\n{\n\tchar data;\n\tstruct BiTNode *lchild, *rchild;\n} BiTNode, *BiTree;\n\n// 按前序输入二叉树中结点的值（一个字符），使用#表示空树，构造二叉链表表示二叉树\nCreateBiTree(BiTree *T)\n{\n\tchar c;\n\n\tscanf(\"%c\", &c);\n\tif( '#' == c )\n\t{\n\t\t*T = NULL;\n\t}\n\telse\n\t{\n\t\t*T = (BiTNode *)malloc(sizeof(BiTNode));\n\t\tif(!*T){\n          exit(OVERFLOW);\n        }\n\t\t(*T)->data = c; //生成根节点\n\t\tCreateBiTree(&(*T)->lchild); //构造左子树\n\t\tCreateBiTree(&(*T)->rchild); //构造右子树\n\t}\n}\n```\n\n\n\n\n## 6.10 线索二叉树\n\n\n\n ",[[1559265718591,["GJX@GJXAIOU",[[1,8051,"\n"]],[8049,8049],[8050,8050]]],[1559265718698,["GJX@GJXAIOU",[[1,8052,"\n"]],[8050,8050],[8051,8051]]],[1559265718832,["GJX@GJXAIOU",[[1,8053,"\n"]],[8051,8051],[8052,8052]]],[1559265718931,["GJX@GJXAIOU",[[1,8054,"\n"]],[8052,8052],[8053,8053]]],[1559265719053,["GJX@GJXAIOU",[[1,8055,"\n"]],[8053,8053],[8054,8054]]],[1559265719163,["GJX@GJXAIOU",[[1,8056,"\n"]],[8054,8054],[8055,8055]]],[1559265719285,["GJX@GJXAIOU",[[1,8057,"\n"]],[8055,8055],[8056,8056]]],[1559265719387,["GJX@GJXAIOU",[[1,8058,"\n"]],[8056,8056],[8057,8057]]],[1559265719534,["GJX@GJXAIOU",[[1,8059,"\n"]],[8057,8057],[8058,8058]]],[1559265719652,["GJX@GJXAIOU",[[1,8060,"\n"]],[8058,8058],[8059,8059]]],[1559265719787,["GJX@GJXAIOU",[[1,8061,"\n"]],[8059,8059],[8060,8060]]],[1559265719916,["GJX@GJXAIOU",[[1,8062,"\n"]],[8060,8060],[8061,8061]]],[1559265720036,["GJX@GJXAIOU",[[1,8063,"\n"]],[8061,8061],[8062,8062]]],[1559265720185,["GJX@GJXAIOU",[[1,8064,"\n"]],[8062,8062],[8063,8063]]],[1559265720302,["GJX@GJXAIOU",[[1,8065,"\n"]],[8063,8063],[8064,8064]]],[1559265720436,["GJX@GJXAIOU",[[1,8066,"\n"]],[8064,8064],[8065,8065]]],[1559265988603,["GJX@GJXAIOU",[[1,8067,"\n"]],[8050,8050],[8051,8051]]],[1559266184152,["GJX@GJXAIOU",[[1,8049,"根据二叉链表的图示，可以看出"]],[8049,8049],[8063,8063]]],[1559266234853,["GJX@GJXAIOU",[[1,8063,"结点结构中没有左孩子和右孩子的部分使用``"]],[8063,8063],[8084,8084]]],[1559266236877,["GJX@GJXAIOU",[[1,8083,"^"]],[8083,8083],[8084,8084]]],[1559266245054,["GJX@GJXAIOU",[[1,8085,"代替，浪费了很多空间；"]],[8085,8085],[8096,8096]]],[1559266265892,["GJX@GJXAIOU",[[1,8096,"同时二叉链表===="]],[8096,8096],[8104,8104]]],[1559266304008,["GJX@GJXAIOU",[[1,8104,"只能知道每个结点指向其左右孩子结点的地址，而不知道某个结点的"]],[8104,8104],[8134,8134]]],[1559266347175,["GJX@GJXAIOU",[[1,8134,"前驱和后继分别是谁，必须通过再次遍历才能得到。"]],[8134,8134],[8157,8157]]],[1559266349473,["GJX@GJXAIOU",[[1,8178,"\n"]],[8160,8160],[8161,8161]]],[1559266365087,["GJX@GJXAIOU",[[1,8161,"可以采用之间在存储的是"]],[8161,8161],[8172,8172]]],[1559266365632,["GJX@GJXAIOU",[[-1,8170,"的是"]],[8172,8172],[8170,8170]]],[1559266367475,["GJX@GJXAIOU",[[1,8170,"节点"]],[8170,8170],[8172,8172]]],[1559266368214,["GJX@GJXAIOU",[[-1,8170,"节点"]],[8172,8172],[8170,8170]]],[1559266383212,["GJX@GJXAIOU",[[1,8170,"结点的时候直接记住前驱和后继，"]],[8170,8170],[8185,8185]]],[1559266388936,["GJX@GJXAIOU",[[-1,8184,"，"]],[8185,8185],[8184,8184]]],[1559266389422,["GJX@GJXAIOU",[[1,8184,"；"]],[8184,8184],[8185,8185]]],[1559266389636,["GJX@GJXAIOU",[[1,8203,"\n"]],[8185,8185],[8186,8186]]],[1559266390025,["GJX@GJXAIOU",[[1,8204,"\n"]],[8186,8186],[8187,8187]]],[1559266394513,["GJX@GJXAIOU",[[1,8187,"将指向"]],[8187,8187],[8190,8190]]],[1559266397249,["GJX@GJXAIOU",[[-1,8187,"将指向"]],[8190,8190],[8187,8187]]],[1559266397431,["GJX@GJXAIOU",[[-1,8204,"\n"]],[8187,8187],[8186,8186]]],[1559266398612,["GJX@GJXAIOU",[[1,8204,"\n"]],[8186,8186],[8187,8187]]],[1559266401576,["GJX@GJXAIOU",[[-1,8204,"\n"]],[8187,8187],[8186,8186]]],[1559266402676,["GJX@GJXAIOU",[[1,8204,"\n"]],[8186,8186],[8187,8187]]],[1559266413198,["GJX@GJXAIOU",[[1,8187,"- 线索：指向前去"]],[8187,8187],[8196,8196]]],[1559266414575,["GJX@GJXAIOU",[[-1,8194,"前去"]],[8196,8196],[8194,8194]]],[1559266427094,["GJX@GJXAIOU",[[1,8194,"前驱和后继的指针"]],[8194,8194],[8202,8202]]],[1559266433558,["GJX@GJXAIOU",[[1,8203,"- \n"]],[8202,8202],[8205,8205]]],[1559266455061,["GJX@GJXAIOU",[[1,8205,"二叉链表：加上线索的二叉链表"]],[8205,8205],[8219,8219]]],[1559266458456,["GJX@GJXAIOU",[[-1,8205,"二叉"]],[8207,8207],[8205,8205]]],[1559266462739,["GJX@GJXAIOU",[[1,8205,"线索"]],[8205,8205],[8207,8207]]],[1559266465818,["GJX@GJXAIOU",[[1,8220,"- \n"]],[8219,8219],[8222,8222]]],[1559266480006,["GJX@GJXAIOU",[[1,8222,"线索二叉树：对应的二叉树"]],[8222,8222],[8234,8234]]],[1559266771660,["GJX@GJXAIOU",[[1,8236,"将===="]],[8236,8236],[8239,8239]]],[1559266775135,["GJX@GJXAIOU",[[1,8239,"中序遍历"]],[8239,8239],[8243,8243]]],[1559266782475,["GJX@GJXAIOU",[[1,8245,"中的```"]],[8245,8245],[8250,8250]]],[1559266785643,["GJX@GJXAIOU",[[1,8248,"^"]],[8248,8248],[8249,8249]]],[1559266787091,["GJX@GJXAIOU",[[-1,8250,"`"]],[8251,8251],[8250,8250]]],[1559266787749,["GJX@GJXAIOU",[[1,8250,"j"]],[8250,8250],[8251,8251]]],[1559266788240,["GJX@GJXAIOU",[[-1,8250,"j"]],[8251,8251],[8250,8250]]],[1559266793845,["GJX@GJXAIOU",[[1,8250,"利用完成之后"]],[8250,8250],[8256,8256]]],[1559266796623,["GJX@GJXAIOU",[[-1,8250,"利用完成之后"]],[8256,8256],[8250,8250]]],[1559266804364,["GJX@GJXAIOU",[[1,8250,"充分利用之后的效果图："]],[8250,8250],[8261,8261]]],[1559266805028,["GJX@GJXAIOU",[[-1,8260,"："]],[8261,8261],[8260,8260]]],[1559266805574,["GJX@GJXAIOU",[[1,8260,"；"]],[8260,8260],[8261,8261]]],[1559266806242,["GJX@GJXAIOU",[[1,8277,"\n"]],[8261,8261],[8262,8262]]],[1559267112443,["GJX@GJXAIOU",[[1,8263,"![线索二叉树]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png)"]],[8263,8263],[8333,8333]]],[1559267114405,["GJX@GJXAIOU",[[1,8347,"\n"]],[8333,8333],[8334,8334]]],[1559267114526,["GJX@GJXAIOU",[[1,8348,"\n"]],[8334,8334],[8335,8335]]],[1559267432322,["GJX@GJXAIOU",[[1,8335,"以上方法相当于将一棵二叉树转换成了双向链表；"]],[8335,8335],[8357,8357]]],[1559267432888,["GJX@GJXAIOU",[[1,8371,"\n"]],[8357,8357],[8358,8358]]],[1559267650013,["GJX@GJXAIOU",[[1,8359,"![二叉树转换成为双向链表]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.jpg)"]],[8359,8359],[8489,8489]]],[1559267713202,["GJX@GJXAIOU",[[1,8490,"方法补充：引入两个标志域：la"]],[8490,8490],[8505,8505]]],[1559267713691,["GJX@GJXAIOU",[[-1,8504,"a"]],[8505,8505],[8504,8504]]],[1559267724467,["GJX@GJXAIOU",[[1,8504,"tag和rtag（）"]],[8504,8504],[8514,8514]]],[1559267733209,["GJX@GJXAIOU",[[1,8513,"只是存放0或1de"]],[8513,8513],[8522,8522]]],[1559267733745,["GJX@GJXAIOU",[[-1,8520,"de"]],[8522,8522],[8520,8520]]],[1559267743741,["GJX@GJXAIOU",[[1,8520,"数字的布尔型变量"]],[8520,8520],[8528,8528]]],[1559267784087,["GJX@GJXAIOU",[[1,8529,"，得到结点界都"]],[8529,8529],[8536,8536]]],[1559267784645,["GJX@GJXAIOU",[[-1,8534,"界都"]],[8536,8536],[8534,8534]]],[1559267789586,["GJX@GJXAIOU",[[1,8534,"结构如下："]],[8534,8534],[8539,8539]]],[1559267790427,["GJX@GJXAIOU",[[1,8550,"\n"]],[8539,8539],[8540,8540]]],[1559267882492,["GJX@GJXAIOU",[[1,8541,"![线索二叉链表结点格式]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E6%A0%BC%E5%BC%8F.png)"]],[8541,8541],[8661,8661]]],[1559267885086,["GJX@GJXAIOU",[[1,8670,"\n"]],[8661,8661],[8662,8662]]],[1559267927323,["GJX@GJXAIOU",[[1,8662,"–ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。\n\n–rtag为0时指向该结点的右孩子，为1时指向该结点的后继。"]],[8662,8662],[8724,8724]]],[1559268514102,["GJX@GJXAIOU",[[1,8726,"![原结构与线索二叉树结构对比]($resource/%E5%8E%9F%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94.jpg)"]],[8726,8726],[8876,8876]]],[1559270822356,["GJX@GJXAIOU",[[1,8882,"\n"]],[8877,8877],[8878,8878]]],[1559270841650,["GJX@GJXAIOU",[[1,8878,"线索二叉树"]],[8878,8878],[8883,8883]]],[1559270882725,["GJX@GJXAIOU",[[1,8883,"结构实现定义代码："]],[8883,8883],[8892,8892]]],[1559270883176,["GJX@GJXAIOU",[[1,8897,"\n"]],[8892,8892],[8893,8893]]],[1559270884933,["GJX@GJXAIOU",[[1,8893,"```"]],[8893,8893],[8896,8896]]],[1559270884974,["GJX@GJXAIOU",[[1,8896,"language\n```\n"]],[8896,8896],[8896,8904]]],[1559270886464,["GJX@GJXAIOU",[[-1,8896,"language"],[1,8904,"c"]],[8896,8904],[8897,8897]]],[1559270886712,["GJX@GJXAIOU",[[1,8898,"\n"]],[8897,8897],[8898,8898]]],[1559270985734,["GJX@GJXAIOU",[[1,8898,"typedef char ElemType;\n\n// 绾跨储瀛樺偍鏍囧織浣?\n// Link(0)锛氳〃绀烘寚鍚戝乏鍙冲瀛愮殑鎸囬拡\n// Thread(1)锛氳〃绀烘寚鍚戝墠椹卞悗缁х殑绾跨储\ntypedef enum {Link, Thread} PointerTag;\n\ntypedef struct BiThrNode\n{\n\tchar data;\n\tstruct BiThrNode *lchild, *rchild;\n\tPointerTag ltag;\n\tPointerTag rtag;\n} BiThrNode, *BiThrTree;"]],[8898,8898],[9173,9173]]],[1559270999732,["GJX@GJXAIOU",[[-1,8898,"typedef char ElemType;\n\n// 绾跨储瀛樺偍鏍囧織浣?\n// Link(0)锛氳〃绀烘寚鍚戝乏鍙冲瀛愮殑鎸囬拡\n// Thread(1)锛氳〃绀烘寚鍚戝墠椹卞悗缁х殑绾跨储"]],[8898,8996],[8898,8898]]],[1559271001460,["GJX@GJXAIOU",[[-1,8898,"\n"]],[8898,8898],[8897,8897]]]],null,"GJX@GJXAIOU"],["2580ac8f-0aaf-4de9-8b7c-32f5c0601446",1559301831993,"# 树\n\n\n## 6.2 树的定义\n\n•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n- 有且仅有一个特定的称为根(Root)的结点；\n- 当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n\n注意点：\n- n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n- m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。\n\n\n### 6.2.1 结点分类\n\n- 结点拥有子树数目称为结点的度；\n  - 度为0的结点称为叶结点(Leaf)或终端结点\n  - 度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。\n\n树的度是树内各结点的度的最大值；\n\n### 6.2.2结点之间的关系\n\n•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。\n•结点的祖先是从根到该结点所经分支上的所有结点。\n\n### 6.2.3 树的其他相关概念\n\n•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n•其双亲在同一层的结点互为堂兄弟。\n•树中结点的最大层次称为树的深度(Depth)或高度。\n如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树；\n森林是m(m>=0)棵互不相交的树的集合；\n\n\n## 6.3 树的抽象数据类型\n\n```c\nADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT\n```\n\n\n\n## 6.4 树的存储结构\n\n- 三种表示方法：双亲表示法，孩子表示法、孩子兄弟表示法\n\n\n### 6.4.1 双亲表示法\n\n在每个结点中附设一个指示器指示其双亲结点在数组中的位置。\n\n![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n双亲表示法结点结构定义代码：\n```c\n//数的双亲表示法结点结构定义\n#define MAX_TREE_SIZE 100\ntypedef int ElemType;\n\ntypedef struct PTNode //结点结构\n{\n\tElemType data;\t// 结点数据\n\tint parent;\t\t// 双亲位置\n}PTNode;\n\ntypedef struct //树结构\n{\n\tPTNode nodes[MAX_TREE_SIZE]; //结点数组\n\tint r;\t\t\t //根的位置和节点数\n\tint n;\t\t\t\n}PTree;\n```\n\n注：根节点的位置域即parent域设置为-1；\n图示如下：\n\n![双亲表示法]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n补充：上面的双亲表示法无法很方便的之后某个结点的孩子结点有哪些，因此在结点结构的加上一个最左边（长子）域，没有孩子的结点长子域设置为-1；\n如果同时关注各兄弟之间的关系；可以同时加上一个右兄弟域，如果存在右兄弟则记录下标，没有就记为-1;\n\n补充之后图示：\n![双亲表示法补充]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%A1%A5%E5%85%85.jpg)\n\n==实际使用过程中，存储结构的设计十分灵活，根据具体情况采用==\n\n\n\n### 6.4.2 孩子表示法\n\n因为数的每个结点可能含有多个子树，因此可以使用多重链表：每个结点有多个指针域，其中每个指针指向一棵子树的根节点，称为多重链表表示法；\n\n\n- 方案一：指针域的个数等于树的度（树的度为数的各个结点度的最大值）\n当树中各个结点的度相差很大的时候，浪费空间；相差很小的时候是一种优点；\n\n![孩子表示法方案一结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n![孩子表示法方案一]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80.png)\n\n- 方案二：每个结点指针域的个数等于该结点的度\n空间利用率更高了，但是因为各个结点的链表结构不同，维护各个结点度的数值较为麻烦\n\n![孩子表示法方案二结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n\n![孩子表示法方案二]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n\n\n- 具体方案：\n把每个结点的孩子结点排列起来，以单链表做存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空；然后n个头指针又组成一个线性表，采用顺序储存结构，存放进一个一维数组中。\n如下图所示：\n![图片1]($resource/%E5%9B%BE%E7%89%871.jpg)\n\n\n孩子表示法的结构定义代码：\n```c\n/*\n\t孩子表示法结构定义\n*/\n#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 孩子结点\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 该结点在表头数组中的下标\n\tstruct CTNode *next;\t\n} *ChildPtr;\n\n// 表头结构\ntypedef struct\n{\t\n\tElemType data;\t\t\t\n\tint parent;\t\t\t\t\n\tChildPtr firstchild;\t// 存储该结点孩子链表的头指针\n} CTBox;\n\n//树结构\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 结点数组\n\tint r, n; //根的位置和结点数\n}\n```\n\n该结构便于查找某个结点的某个孩子或者某个结点的兄弟有利，但是要查找某个结点的双亲就需要遍历整棵树，可以采用在表头数组中在data和firstchild中加上一列parent实现；称为：双亲孩子表示法。\n\n\n\n\n\n### 6.4.3 孩子兄弟表示法\n\n理论：如果任意一棵树，他的结点的第一个孩子如果存在就是唯一的，他的右兄弟如果存在也是为唯一的；\n\n树的孩子兄弟表示法结构定义：\n```c\n/*\n\t树的孩子兄弟表示法结构定义\n*/\ntypedef struct CSNode{\n\tTElemType data;\n\tstruct CSNode *firstchild,*rightsib;\n}CSNode.*CSTree;\n```\n\n![孩子兄弟表示法]($resource/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n\n## 6.5 二叉树\n\n•二叉树（Binary Tree）是n（n>=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。\n\n\n### 6.5.1二叉树特点\n\n- 每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。\n- 左子树和右子树是有顺序的，次序不能颠倒；\n- 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树；\n- 二叉树的五种基本形态：\n  - •空二叉树\n  - •只有一个根结点\n  -  •根结点只有左子树\n  - •根结点只有右子树\n  - •根结点既有左子树又有右子树\n\n### 6.5.2 特殊的二叉树\n\n- 斜树：\n  - 所有结点都只有左子树或者只有右子树，称为：左斜树和右斜树；\n- 满二叉树：\n  - 所有分支结点都存在左子树和右子树，并且所有的叶子都在同一层上；\n  - 特点：\n    - 叶子只能出现在最下一层。\n    - 非叶子结点的度一定是2。\n    - 在同样深度的二叉树中，满二叉树的结点个数一定最多，同时叶子也是最多。\n- 完全二叉树：\n  - 对一棵具有n个结点的二叉树按层序编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点位置完全相同；\n  - 完全二叉树的特点有：\n    - 叶子结点只能出现在最下两层。\n    - 最下层的叶子一定集中在左部连续位置。\n    - 倒数第二层，若有叶子结点，一定都在右部连续位置。\n    - 如果结点度为1，则该结点只有左孩子。\n    - 同样结点树的二叉树，完全二叉树的深度最小。\n  - 注意：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。\n  - 判断：==将每个结点按照满二叉树的结构逐层顺序编号，如果顺序出现空档，则说明不是完全二叉树，否则就是==\n\n## 6.6 二叉树的性质\n\n- 性质1：在二叉树的第i层至多有2^(i-1)个结点(i>=1)；\n- 性质2：深度为K的二叉树至多有(2^k)-1个结点（k>=1）;\n- 性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1；\n- 性质4：具有n个结点的完全二叉树的深度为⌊log₂n⌋+1；（⌊x⌋表示不大于x的最大整数）\n- 性质5：如果对一棵有n个结点的完全二叉树(其深度为⌊log₂n⌋+1)的结点按层序编号，对任一结点i(1<=i<=n)有以下性质：\n  - 如果i = 1，则结点 i  是二叉树的根，无双亲；如果i > 1，则其双亲是结点⌊i/2⌋\n  - 如果2i > n，则结点 i  无做左孩子(结点 i  为叶子结点)；否则其左孩子是结点2i\n  - 如果2i+1 > n，则结点  i  无右孩子；否则其右孩子是结点2i+1\n\n\n\n\n\n\n## 6.7二叉树的存储结构\n\n- 顺序存储结构：\n二叉树可以使用顺序存储结构；完全二叉树的使用一维数组实现顺序存储结构，同时数组的下标可以体现结点之间的逻辑关系；\n\n![完全二叉树的顺序存储结构]($resource/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n当存储普通的二叉树时候使用`^`代替不存在的结点存储在数组中；但是会造成很大的空间浪费，因此==顺序存储结构一般仅仅用于完全二叉树的存储中==\n\n- 链式存储结构：（二叉链表）\n\n二叉链表结点机构示意图：\n![二叉链表结点存储结构]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n二叉链表结点结构定义如下：\n```c\n/*\n\t二叉树的二叉链表结点结构定义\n*/\n//结点结构\ntypedef struct BiTNode{\n\tTElemType data; //结点数据\n\tstruct BiTNode *lchild,*rchild; //左右孩子指针\n}BiTNode.*BiTree;\n```\n二叉链表存储结构示例：\n\n![二叉链表存储结构示例]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.png)\n\n\n\n\n## 6.8 遍历二叉树\n\n•二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种**次序**依次**访问**二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。\n\n### 6.8.1二叉树遍历方法\n在限定从左到右的遍历顺序之后，分为四类；\n\n- 前序遍历：\n若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。\n\n![二叉树前序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 中序遍历：\n若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。\n![二叉树中序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 后序遍历：\n若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。\n![二叉树后序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 层序遍历：\n若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。\n![二叉树的层序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n\n### 6.8.3 前序遍历算法\n```c\n/*\n\t二叉树的前序遍历算法\n*/\n\nvoid PreOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->lchild); //先序遍历左子树\n\tPreOrderTraverse(T->rchild); //先序遍历右子树\n}\n\n```\n使用递归\n以下图为例程序说明：\n![前序遍历算法]($resource/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.jpg)\n\n\n### 6.8.4 中序遍历算法\n```c\n/*\n\t二叉树的中序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //中序遍历左子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->rchild); //中序遍历右子树\n}\n\n```\n中序遍历上面二叉树的节点顺序为：HKDBEAIFCGJ\n\n\n### 6.8.4 后序遍历算法\n```c\n/*\n\t二叉树的后序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //后序遍历左子树\n\tPreOrderTraverse(T->rchild); //后序遍历右子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n}\n\n```\n后序遍历上面二叉树的节点顺序为：KHDEBIFJGCA\n\n\n\n\n注意：\n- 已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n- 已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n\n\n\n## 6.9 二叉树的建立\n\n假设二叉树每个结点都是一个字符，而且空节点使用`#`代替；\n```c\ntypedef char ElemType;\n\ntypedef struct BiTNode\n{\n\tchar data;\n\tstruct BiTNode *lchild, *rchild;\n} BiTNode, *BiTree;\n\n// 按前序输入二叉树中结点的值（一个字符），使用#表示空树，构造二叉链表表示二叉树\nCreateBiTree(BiTree *T)\n{\n\tchar c;\n\n\tscanf(\"%c\", &c);\n\tif( '#' == c )\n\t{\n\t\t*T = NULL;\n\t}\n\telse\n\t{\n\t\t*T = (BiTNode *)malloc(sizeof(BiTNode));\n\t\tif(!*T){\n          exit(OVERFLOW);\n        }\n\t\t(*T)->data = c; //生成根节点\n\t\tCreateBiTree(&(*T)->lchild); //构造左子树\n\t\tCreateBiTree(&(*T)->rchild); //构造右子树\n\t}\n}\n```\n\n\n\n\n## 6.10 线索二叉树\n\n根据二叉链表的图示，可以看出结点结构中没有左孩子和右孩子的部分使用`^`代替，浪费了很多空间；同时二叉链表==只能知道每个结点指向其左右孩子结点的地址，而不知道某个结点的前驱和后继分别是谁，必须通过再次遍历才能得到。==\n\n可以采用之间在存储结点的时候直接记住前驱和后继；\n\n- 线索：指向前驱和后继的指针\n- 线索链表：加上线索的二叉链表\n- 线索二叉树：对应的二叉树\n\n将==中序遍历==中的`^`充分利用之后的效果图；\n\n![线索二叉树]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n\n以上方法相当于将一棵二叉树转换成了双向链表；\n\n![二叉树转换成为双向链表]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.jpg)\n\n方法补充：引入两个标志域：ltag和rtag（只是存放0或1数字的布尔型变量），得到结点结构如下：\n\n![线索二叉链表结点格式]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E6%A0%BC%E5%BC%8F.png)\n\n–ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。\n\n–rtag为0时指向该结点的右孩子，为1时指向该结点的后继。\n\n![原结构与线索二叉树结构对比]($resource/%E5%8E%9F%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94.jpg)\n\n\n线索二叉树结构实现定义代码：\n```c\ntypedef enum {Link, Thread} PointerTag;\n\ntypedef struct BiThrNode\n{\n\tchar data;\n\tstruct BiThrNode *lchild, *rchild;\n\tPointerTag ltag;\n\tPointerTag rtag;\n} BiThrNode, *BiThrTree;\n```\n\n\n\n\n\n ",[[1559301820285,["GJX@GJXAIOU",[[1,9084,"\n"]],[9078,9078],[9079,9079]]],[1559301820408,["GJX@GJXAIOU",[[1,9085,"\n"]],[9079,9079],[9080,9080]]],[1559302009518,["GJX@GJXAIOU",[[1,9080,"线索话二叉树的实质就是在二叉链表中的"]],[9080,9080],[9098,9098]]],[1559302012807,["GJX@GJXAIOU",[[-1,9091,"在"]],[9092,9092],[9091,9091]]],[1559302013936,["GJX@GJXAIOU",[[1,9091,"将"]],[9091,9091],[9092,9092]]],[1559302056247,["GJX@GJXAIOU",[[1,9098,"空指针改为指向前驱或者后继的线索，也就是相当于在遍历的过程中袖肥"]],[9098,9098],[9130,9130]]],[1559302057073,["GJX@GJXAIOU",[[-1,9127,"中袖肥"]],[9130,9130],[9127,9127]]],[1559302065502,["GJX@GJXAIOU",[[1,9127,"中修改空指针的过程；"]],[9127,9127],[9137,9137]]],[1559302066045,["GJX@GJXAIOU",[[-1,9136,"；"]],[9137,9137],[9136,9136]]],[1559302066669,["GJX@GJXAIOU",[[1,9136,"。"]],[9136,9136],[9137,9137]]],[1559302109937,["GJX@GJXAIOU",[[1,9143,"\n"]],[9137,9137],[9138,9138]]],[1559302110057,["GJX@GJXAIOU",[[1,9144,"\n"]],[9138,9138],[9139,9139]]],[1559302123684,["GJX@GJXAIOU",[[1,9139,"中序遍历线索化的递归函数代码："]],[9139,9139],[9154,9154]]],[1559302123974,["GJX@GJXAIOU",[[1,9160,"\n"]],[9154,9154],[9155,9155]]],[1559302124757,["GJX@GJXAIOU",[[1,9161,"\n"]],[9155,9155],[9156,9156]]],[1559302125947,["GJX@GJXAIOU",[[1,9156,"```"]],[9156,9156],[9159,9159]]],[1559302125988,["GJX@GJXAIOU",[[1,9159,"language\n```\n"]],[9159,9159],[9159,9167]]],[1559302127355,["GJX@GJXAIOU",[[-1,9159,"language"],[1,9167,"c"]],[9159,9167],[9160,9160]]],[1559302127512,["GJX@GJXAIOU",[[1,9161,"\n"]],[9160,9160],[9161,9161]]],[1559302159254,["GJX@GJXAIOU",[[1,9161,"BiThrTree pre;"]],[9161,9161],[9175,9175]]],[1559302160179,["GJX@GJXAIOU",[[1,9176,"\n"]],[9175,9175],[9176,9176]]],[1559302170263,["GJX@GJXAIOU",[[1,9176,"void InThreading(BiThrTree T)\n{\n\tif( T )\n\t{\n\t\tInThreading( T->lchild );\t\t// 閫掑綊宸﹀瀛愮嚎绱㈠寲\n\n\t\tif( !T->lchild )\t// 濡傛灉璇ョ粨鐐规病鏈夊乏瀛╁瓙锛岃缃甽tag涓篢hread锛屽苟鎶妉child鎸囧悜鍒氬垰璁块棶鐨勭粨鐐广€?\n\t\t{\n\t\t\tT->ltag = Thread;\n\t\t\tT->lchild = pre;\n\t\t}\n\n\t\tif( !pre->rchild )\n\t\t{\n\t\t\tpre->rtag = Thread;\n\t\t\tpre->rchild = T;\n\t\t}\n\n\t\tpre = T;\n\n\t\tInThreading( T->rchild );\t\t// 閫掑綊鍙冲瀛愮嚎绱㈠寲\n\t}\n}\n"]],[9176,9176],[9530,9530]]],[1559302175212,["GJX@GJXAIOU",[[1,9175," //qu"]],[9175,9175],[9180,9180]]],[1559302175682,["GJX@GJXAIOU",[[-1,9178,"qu"]],[9180,9180],[9178,9178]]],[1559302190279,["GJX@GJXAIOU",[[1,9178,"全局变量，始终指向刚刚"]],[9178,9178],[9189,9189]]],[1559302196386,["GJX@GJXAIOU",[[1,9189,"访问过的节点"]],[9189,9189],[9195,9195]]],[1559302197088,["GJX@GJXAIOU",[[-1,9193,"节点"]],[9195,9195],[9193,9193]]],[1559302200059,["GJX@GJXAIOU",[[1,9193,"结点"]],[9193,9193],[9195,9195]]],[1559302214530,["GJX@GJXAIOU",[[-1,9308,"濡傛灉璇ョ粨鐐规病鏈夊乏瀛╁瓙锛岃缃甽tag涓篢hread锛屽苟鎶妉child鎸囧悜鍒氬垰璁块棶鐨勭粨鐐广€?"]],[9308,9364],[9308,9308]]],[1559302219532,["GJX@GJXAIOU",[[-1,9272,"閫掑綊宸﹀瀛愮嚎绱㈠寲\n"],[1,9285,"递归"]],[9272,9272],[9274,9274]]],[1559302224470,["GJX@GJXAIOU",[[1,9274,"左子树线索化"]],[9274,9274],[9280,9280]]],[1559302233647,["GJX@GJXAIOU",[[1,9302,"没有左孩子"]],[9302,9302],[9307,9307]]],[1559302248724,["GJX@GJXAIOU",[[1,9333," 、"]],[9333,9333],[9335,9335]]],[1559302249342,["GJX@GJXAIOU",[[-1,9334,"、"]],[9335,9335],[9334,9334]]],[1559302249978,["GJX@GJXAIOU",[[1,9334,"//"]],[9334,9334],[9336,9336]]],[1559302256615,["GJX@GJXAIOU",[[1,9336,"前驱线索"]],[9336,9336],[9340,9340]]],[1559302268208,["GJX@GJXAIOU",[[1,9360," //左孩子指针指向前驱"]],[9360,9360],[9372,9372]]],[1559302281116,["GJX@GJXAIOU",[[1,9398," //前驱没有右孩子"]],[9398,9398],[9408,9408]]],[1559302291989,["GJX@GJXAIOU",[[1,9435," 、"]],[9435,9435],[9437,9437]]],[1559302292379,["GJX@GJXAIOU",[[-1,9436,"、"]],[9437,9437],[9436,9436]]],[1559302297399,["GJX@GJXAIOU",[[1,9436,"//后继线索"]],[9436,9436],[9442,9442]]],[1559302310109,["GJX@GJXAIOU",[[1,9462," //前驱右孩子指针"]],[9462,9462],[9472,9472]]],[1559302314738,["GJX@GJXAIOU",[[1,9472,"指向后继（）"]],[9472,9472],[9478,9478]]],[1559302320606,["GJX@GJXAIOU",[[1,9477,"当前的结点T"]],[9477,9477],[9483,9483]]],[1559302341249,["GJX@GJXAIOU",[[1,9500," //保持pre指向T的前驱"]],[9500,9500],[9514,9514]]],[1559302356694,["GJX@GJXAIOU",[[-1,9547," 閫掑綊鍙冲瀛愮嚎绱㈠寲"]],[9548,9560],[9547,9547]]],[1559302363890,["GJX@GJXAIOU",[[1,9547,"递归右子树线索化"]],[9547,9547],[9555,9555]]],[1559302387851,["GJX@GJXAIOU",[[1,9155,"解释见书本：p92"]],[9155,9155],[9164,9164]]],[1559302390131,["GJX@GJXAIOU",[[1,9162,"1"]],[9162,9162],[9163,9163]]],[1559302395454,["GJX@GJXAIOU",[[1,9582,"\n"]],[9575,9575],[9576,9576]]],[1559302395558,["GJX@GJXAIOU",[[1,9583,"\n"]],[9576,9576],[9577,9577]]],[1559302395740,["GJX@GJXAIOU",[[1,9584,"\n"]],[9577,9577],[9578,9578]]],[1559302401512,["GJX@GJXAIOU",[[1,9578,"遍历的代码“："]],[9578,9578],[9585,9585]]],[1559302403541,["GJX@GJXAIOU",[[-1,9581,"代码“："]],[9585,9585],[9581,9581]]],[1559302404828,["GJX@GJXAIOU",[[1,9581,"代码："]],[9581,9581],[9584,9584]]],[1559302405301,["GJX@GJXAIOU",[[1,9591,"\n"]],[9584,9584],[9585,9585]]],[1559302406819,["GJX@GJXAIOU",[[1,9585,"```"]],[9585,9585],[9588,9588]]],[1559302406860,["GJX@GJXAIOU",[[1,9588,"language\n```\n"]],[9588,9588],[9588,9596]]],[1559302410766,["GJX@GJXAIOU",[[-1,9588,"language"]],[9596,9596],[9588,9588]]],[1559302411164,["GJX@GJXAIOU",[[1,9588,"c"]],[9588,9588],[9589,9589]]],[1559302411756,["GJX@GJXAIOU",[[1,9590,"\n"]],[9589,9589],[9590,9590]]],[1559302440070,["GJX@GJXAIOU",[[1,9590,"void InOrderThreading( BiThrTree *p, BiThrTree T )\n{\n\t*p = (BiThrTree)malloc(sizeof(BiThrNode));\n\t(*p)->ltag = Link;\n\t(*p)->rtag = Thread;\n\t(*p)->rchild = *p;\n\tif( !T )\n\t{\n\t\t(*p)->lchild = *p;\n\t}\n\telse\n\t{\n\t\t(*p)->lchild = T;\n\t\tpre = *p;\n\t\tInThreading(T);\n\t\tpre->rchild = *p;\n\t\tpre->rtag = Thread;\n\t\t(*p)->rchild = pre;\n\t}\n}\n\nvoid visit( char c )\n{\n\tprintf(\"%c\", c);\n}\n\n// 涓簭閬嶅巻浜屽弶鏍戯紝闈為€掑綊\nvoid InOrderTraverse( BiThrTree T )\n{\n\tBiThrTree p;\n\tp = T->lchild;\n\n\twhile( p != T )\n\t{\n\t\twhile( p->ltag == Link )\n\t\t{\n\t\t\tp = p->lchild;\n\t\t}\n\t\tvisit(p->data);\n\n\t\twhile( p->rtag == Thread && p->rchild != T )\n\t\t{\n\t\t\tp = p->rchild;\n\t\t\tvisit(p->data);\n\t\t}\n\t\t\n\t\tp = p->rchild;\n\t}\n}"]],[9590,9590],[10257,10257]]],[1559302476125,["GJX@GJXAIOU",[[1,9584,"juti"]],[9584,9584],[9588,9588]]],[1559302476991,["GJX@GJXAIOU",[[-1,9584,"juti"]],[9588,9588],[9584,9584]]],[1559302480986,["GJX@GJXAIOU",[[1,9584,"具体见P193"]],[9584,9584],[9591,9591]]],[1559302580426,["GJX@GJXAIOU",[[1,10276,"\n"]],[10268,10268],[10269,10269]]],[1559302580544,["GJX@GJXAIOU",[[1,10277,"\n"]],[10269,10269],[10270,10270]]],[1559302580667,["GJX@GJXAIOU",[[1,10278,"\n"]],[10270,10270],[10271,10271]]],[1559302580792,["GJX@GJXAIOU",[[1,10279,"\n"]],[10271,10271],[10272,10272]]],[1559302580911,["GJX@GJXAIOU",[[1,10280,"\n"]],[10272,10272],[10273,10273]]],[1559302581046,["GJX@GJXAIOU",[[1,10281,"\n"]],[10273,10273],[10274,10274]]],[1559302587253,["GJX@GJXAIOU",[[1,10274,"## 6.11 数"]],[10274,10274],[10283,10283]]],[1559302587690,["GJX@GJXAIOU",[[-1,10282,"数"]],[10283,10283],[10282,10282]]],[1559302597805,["GJX@GJXAIOU",[[1,10282,"树、森林转换为二叉树"]],[10282,10282],[10292,10292]]],[1559302598432,["GJX@GJXAIOU",[[1,10300,"\n"]],[10292,10292],[10293,10293]]],[1559302598695,["GJX@GJXAIOU",[[1,10301,"\n"]],[10293,10293],[10294,10294]]],[1559302611718,["GJX@GJXAIOU",[[1,10302,"\n"]],[10293,10293],[10294,10294]]],[1559302623794,["GJX@GJXAIOU",[[1,10294,"### 6.11.1 将树转换为二叉树"]],[10294,10294],[10313,10313]]],[1559302624331,["GJX@GJXAIOU",[[1,10322,"\n"]],[10313,10313],[10314,10314]]],[1559302633325,["GJX@GJXAIOU",[[1,10315,"–加线，在所有兄弟结点之间加一条连线。\n\n–去线，对树中每个结点，只保留它与第一孩子结点的连线，删除它与其他孩子结点之间的连线。\n\n–层次调整，以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。"]],[10315,10315],[10421,10421]]],[1559302636124,["GJX@GJXAIOU",[[-1,10315,"–"]],[10315,10316],[10315,10315]]],[1559302637882,["GJX@GJXAIOU",[[-1,10335,"–"]],[10335,10336],[10335,10335]]],[1559302638840,["GJX@GJXAIOU",[[-1,10334,"\n"]],[10334,10334],[10334,10334]]],[1559302639911,["GJX@GJXAIOU",[[-1,10377,"\n"]],[10377,10377],[10377,10377]]],[1559302640946,["GJX@GJXAIOU",[[-1,10377,"–"]],[10378,10378],[10377,10377]]],[1559302644713,["GJX@GJXAIOU",[[1,10315,"* "],[1,10334,"* "],[1,10377,"* "]],[10315,10417],[10317,10423]]],[1559302720239,["GJX@GJXAIOU",[[1,10425,"### 6.11.1 将树转换为二叉树"]],[10425,10425],[10444,10444]]],[1559302724395,["GJX@GJXAIOU",[[-1,10437,"树"]],[10438,10438],[10437,10437]]],[1559302726854,["GJX@GJXAIOU",[[1,10437,"森林"]],[10437,10437],[10439,10439]]],[1559302734380,["GJX@GJXAIOU",[[1,10447,"–把每棵树转换为二叉树。\n\n–第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来。"]],[10447,10447],[10518,10518]]],[1559302736317,["GJX@GJXAIOU",[[-1,10447,"–"]],[10448,10448],[10447,10447]]],[1559302737185,["GJX@GJXAIOU",[[-1,10459,"\n"]],[10459,10459],[10459,10459]]],[1559302738634,["GJX@GJXAIOU",[[-1,10459,"–"]],[10459,10459],[10459,10459]]],[1559302741176,["GJX@GJXAIOU",[[1,10447,"* "],[1,10459,"* "]],[10447,10515],[10449,10519]]],[1559302744832,["GJX@GJXAIOU",[[1,10520,"* \n"]],[10519,10519],[10522,10522]]],[1559302746353,["GJX@GJXAIOU",[[-1,10520,"* "]],[10522,10522],[10520,10520]]],[1559302805252,["GJX@GJXAIOU",[[-1,10434,"1"]],[10435,10435],[10434,10434]]],[1559302806107,["GJX@GJXAIOU",[[1,10434,"3"]],[10434,10434],[10435,10435]]],[1559302807181,["GJX@GJXAIOU",[[-1,10434,"3"]],[10435,10435],[10434,10434]]],[1559302807307,["GJX@GJXAIOU",[[1,10434,"2"]],[10434,10434],[10435,10435]]],[1559302821656,["GJX@GJXAIOU",[[1,10521,"### 6.11.34"]],[10521,10521],[10532,10532]]],[1559302822325,["GJX@GJXAIOU",[[-1,10531,"4"]],[10532,10532],[10531,10531]]],[1559302823654,["GJX@GJXAIOU",[[1,10531," 二叉树转换为树、森林"]],[10531,10531],[10542,10542]]],[1559302830022,["GJX@GJXAIOU",[[1,10543,"•二叉树转换为普通树是刚才的逆过程，步骤也就是反过来做而已。\n\n•判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有的话就是森林，没有的话就是一棵树。"]],[10543,10543],[10642,10642]]],[1559302860019,["GJX@GJXAIOU",[[1,10643,"\n"]],[10642,10642],[10643,10643]]],[1559302860167,["GJX@GJXAIOU",[[1,10644,"\n"]],[10643,10643],[10644,10644]]],[1559302860346,["GJX@GJXAIOU",[[1,10645,"\n"]],[10644,10644],[10645,10645]]],[1559302860752,["GJX@GJXAIOU",[[1,10646,"\n"]],[10645,10645],[10646,10646]]],[1559302865788,["GJX@GJXAIOU",[[1,10646,"### 6.22."]],[10646,10646],[10655,10655]]],[1559302866350,["GJX@GJXAIOU",[[-1,10652,"22."]],[10655,10655],[10652,10652]]],[1559302875286,["GJX@GJXAIOU",[[1,10652,"11.4 树和森林的遍历"]],[10652,10652],[10664,10664]]],[1559302875596,["GJX@GJXAIOU",[[1,10665,"\n"]],[10664,10664],[10665,10665]]],[1559302875772,["GJX@GJXAIOU",[[1,10666,"\n"]],[10665,10665],[10666,10666]]],[1559302884029,["GJX@GJXAIOU",[[1,10667,"\n"]],[10665,10665],[10666,10666]]],[1559302884343,["GJX@GJXAIOU",[[1,10666,"•树的遍历分为两种方式：一种是先根遍历，另一种是后根遍历。\n\n•先根遍历：先访问树的根结点，然后再依次先根遍历根的每棵子树。\n\n•后根遍历：先依次遍历每棵子树，然后再访问根结点。"]],[10666,10666],[10755,10755]]],[1559302889620,["GJX@GJXAIOU",[[-1,10666,"•"]],[10666,10667],[10666,10666]]],[1559302890277,["GJX@GJXAIOU",[[1,10666,"- "]],[10666,10666],[10668,10668]]],[1559302892355,["GJX@GJXAIOU",[[-1,10730,"\n"]],[10730,10730],[10729,10729]]],[1559302896461,["GJX@GJXAIOU",[[-1,10730,"•"]],[10731,10731],[10730,10730]]],[1559302898013,["GJX@GJXAIOU",[[-1,10698,"•"]],[10699,10699],[10698,10698]]],[1559302900866,["GJX@GJXAIOU",[[1,10698,"* "],[1,10729,"* "]],[10698,10753],[10700,10757]]],[1559302902321,["GJX@GJXAIOU",[[1,10698,"  "],[1,10731,"  "]],[10700,10757],[10702,10761]]],[1559302904267,["GJX@GJXAIOU",[[-1,10697,"\n"]],[10697,10697],[10696,10696]]],[1559302910131,["GJX@GJXAIOU",[[1,10761,"  * \n"]],[10760,10760],[10765,10765]]],[1559302912756,["GJX@GJXAIOU",[[-1,10761,"  "]],[10765,10765],[10763,10763]]],[1559302928998,["GJX@GJXAIOU",[[1,10763,"森林的遍历：前序遍历，后续"]],[10763,10763],[10776,10776]]],[1559302930607,["GJX@GJXAIOU",[[-1,10774,"后续"]],[10776,10776],[10774,10774]]],[1559302933373,["GJX@GJXAIOU",[[1,10774,"后序遍历"]],[10774,10774],[10778,10778]]],[1559302965727,["GJX@GJXAIOU",[[1,10779,"•树、森林的前根（序）遍历和二叉树的前序遍历结果相同，树、森林的后根（序）遍历和二叉树的中序遍历结果相同！"]],[10779,10779],[10832,10832]]],[1559302968261,["GJX@GJXAIOU",[[1,10833,"\n"]],[10832,10832],[10833,10833]]],[1559302968404,["GJX@GJXAIOU",[[1,10834,"\n"]],[10833,10833],[10834,10834]]],[1559302968556,["GJX@GJXAIOU",[[1,10835,"\n"]],[10834,10834],[10835,10835]]],[1559302968739,["GJX@GJXAIOU",[[1,10836,"\n"]],[10835,10835],[10836,10836]]],[1559303078962,["GJX@GJXAIOU",[[1,10837,"\n"]],[10833,10833],[10834,10834]]],[1559303079089,["GJX@GJXAIOU",[[1,10838,"\n"]],[10834,10834],[10835,10835]]],[1559303079271,["GJX@GJXAIOU",[[1,10839,"\n"]],[10835,10835],[10836,10836]]],[1559303086884,["GJX@GJXAIOU",[[1,10836,"## "]],[10836,10836],[10839,10839]]],[1559303089402,["GJX@GJXAIOU",[[1,10836,"\n"]],[10834,10834],[10835,10835]]],[1559303089535,["GJX@GJXAIOU",[[1,10837,"\n"]],[10835,10835],[10836,10836]]],[1559303090079,["GJX@GJXAIOU",[[1,10836,"--"]],[10836,10836],[10838,10838]]],[1559303090306,["GJX@GJXAIOU",[[1,10839,"-"]],[10839,10839],[10840,10840]]],[1559303093205,["GJX@GJXAIOU",[[1,10845," "]],[10844,10844],[10845,10845]]],[1559303094606,["GJX@GJXAIOU",[[1,10845,"6.12"]],[10845,10845],[10849,10849]]],[1559303095005,["GJX@GJXAIOU",[[1,10850," "]],[10849,10849],[10850,10850]]],[1559303103203,["GJX@GJXAIOU",[[1,10850,"赫尔曼树"]],[10850,10850],[10854,10854]]],[1559303145152,["GJX@GJXAIOU",[[1,10859,"\n"]],[10856,10856],[10857,10857]]],[1559303210216,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[1,10858,"\n\n"],[-1,10859,"\n"]],[10838,10838],[10859,10859]]],[1559303210216,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[-1,10858,"\n\n"],[1,10861,"\n"]],[10859,10859],[10838,10838]]],[1559303158342,["GJX@GJXAIOU",[[1,10857,"引例："]],[10857,10857],[10860,10860]]],[1559303158574,["GJX@GJXAIOU",[[1,10863,"\n"]],[10860,10860],[10861,10861]]],[1559303390225,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10861," "],[1,10862,"\n"],[1,10864," "]],[10838,10838],[10865,10865]]],[1559303390225,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10861," "],[-1,10861,"\n"],[-1,10864," "]],[10865,10865],[10838,10838]]],[1559303386655,["GJX@GJXAIOU",[[1,10861,"因为每个结点出现情况的概率不同，因此可以"]],[10861,10861],[10881,10881]]],[1559303450228,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10881," "],[1,10882,"\n"],[1,10884," "]],[10838,10838],[10885,10885]]],[1559303450228,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10881," "],[-1,10881,"\n"],[-1,10884," "]],[10885,10885],[10838,10838]]],[1559303404079,["GJX@GJXAIOU",[[1,10881,"重新狗仔"]],[10881,10881],[10885,10885]]],[1559303406461,["GJX@GJXAIOU",[[-1,10881,"重新狗仔"]],[10885,10885],[10881,10881]]],[1559303444654,["GJX@GJXAIOU",[[1,10881,"重新构造二叉树使得总体的路径长度最短；"]],[10881,10881],[10900,10900]]],[1559303445185,["GJX@GJXAIOU",[[1,10903,"\n"]],[10900,10900],[10901,10901]]],[1559303690260,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,10904," "]],[10838,10838],[10905,10905]]],[1559303690260,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,10904," "]],[10905,10905],[10838,10838]]],[1559303641380,["GJX@GJXAIOU",[[1,10902,"![赫尔曼树]($resource/%E8%B5%AB%E5%B0%94%E6%9B%BC%E6%A0%91.png)"]],[10902,10902],[10962,10962]]],[1559303643289,["GJX@GJXAIOU",[[1,10963,"\n"]],[10962,10962],[10963,10963]]],[1559303643438,["GJX@GJXAIOU",[[1,10964,"\n"]],[10963,10963],[10964,10964]]],[1559303750260,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,10965," "]],[10838,10838],[10966,10966]]],[1559303750260,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,10965," "]],[10966,10966],[10838,10838]]],[1559303692367,["GJX@GJXAIOU",[[1,10965,"\n"]],[10963,10963],[10964,10964]]],[1559303693119,["GJX@GJXAIOU",[[1,10964,"•结点的路径长度：\n\n–从根结点到该结点的路径上的连接数。\n\n•树的路径长度：\n\n–树中每个叶子结点的路径长度之和。\n\n•结点带权路径长度：\n\n–结点的路径长度与结点权值的乘积。\n\n•树的带权路径长度：\n\n–WPL(Weighted Path Length)是树中所有叶子结点的带权路径长度之和。"]],[10964,10964],[11112,11112]]],[1559303810263,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11114," "]],[10838,10838],[11115,11115]]],[1559303810263,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11114," "]],[11115,11115],[10838,10838]]],[1559303778792,["GJX@GJXAIOU",[[-1,10964,"•结点的路径长度："],[-1,10974,"\n–从根结点到该结点的路径上的连接数。\n\n•树的路径长度：\n\n–树中每个叶子结点的路径长度之和。\n\n•结点带权路径长度：\n\n–结点的路径长度与结点权值的乘积。\n\n•树的带权路径长度：\n\n–WPL(Weighted Path Length)是树中所有叶子结点的带权路径长度之和。"]],[10964,11112],[10965,10965]]],[1559303784846,["GJX@GJXAIOU",[[1,10965,"常用概念："]],[10965,10965],[10970,10970]]],[1559303785258,["GJX@GJXAIOU",[[1,10972,"\n"]],[10970,10970],[10971,10971]]],[1559303798270,["GJX@GJXAIOU",[[1,10971,"- "]],[10971,10971],[10973,10973]]],[1559303870276,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,10975," "]],[10838,10838],[10976,10976]]],[1559303870276,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,10975," "]],[10976,10976],[10838,10838]]],[1559303868873,["GJX@GJXAIOU",[[1,10973,"路径长度：从树的一个结点到另一个结点之间的"]],[10973,10973],[10994,10994]]],[1559303930273,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,10996," "]],[10838,10838],[10997,10997]]],[1559303930273,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,10996," "]],[10997,10997],[10838,10838]]],[1559303877928,["GJX@GJXAIOU",[[1,10994,"分支构成两个节点"]],[10994,10994],[11002,11002]]],[1559303878770,["GJX@GJXAIOU",[[-1,11000,"节点"]],[11002,11002],[11000,11000]]],[1559303896427,["GJX@GJXAIOU",[[1,11000,"结点之间的路径，路径多行的分支数据"]],[11000,11000],[11017,11017]]],[1559303897050,["GJX@GJXAIOU",[[-1,11015,"数据"]],[11017,11017],[11015,11015]]],[1559303904663,["GJX@GJXAIOU",[[1,11015,"数目称为路径长苏"]],[11015,11015],[11023,11023]]],[1559303905210,["GJX@GJXAIOU",[[-1,11021,"长苏"]],[11023,11023],[11021,11021]]],[1559303908119,["GJX@GJXAIOU",[[1,11021,"长度；"]],[11021,11021],[11024,11024]]],[1559303990285,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11026," "]],[10838,10838],[11027,11027]]],[1559303990285,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11026," "]],[11027,11027],[10838,10838]]],[1559303953512,["GJX@GJXAIOU",[[1,11025,"- \n"]],[11024,11024],[11027,11027]]],[1559303969056,["GJX@GJXAIOU",[[1,11027,"树的路径长度：树根带每一个"]],[11027,11027],[11040,11040]]],[1559303977825,["GJX@GJXAIOU",[[1,10993,"结点"]],[10993,10993],[10995,10995]]],[1559303980266,["GJX@GJXAIOU",[[-1,10993,"结点"]],[10995,10995],[10993,10993]]],[1559303989330,["GJX@GJXAIOU",[[1,11040,"结点的路径"]],[11040,11040],[11045,11045]]],[1559304050300,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11047," "]],[10838,10838],[11048,11048]]],[1559304050300,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11047," "]],[11048,11048],[10838,10838]]],[1559303997303,["GJX@GJXAIOU",[[1,11045,"长度之和；"]],[11045,11045],[11050,11050]]],[1559304950381,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11052," "]],[10838,10838],[11053,11053]]],[1559304950381,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11052," "]],[11053,11053],[10838,10838]]],[1559304916008,["GJX@GJXAIOU",[[1,11053,"\n![路径长度和最优二叉树]($resource/%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%A0%91.jpg)\n\n"]],[11053,11053],[11174,11174]]],[1559305010386,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11052," "]],[10838,10838],[11053,11053]]],[1559305010386,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11052," "]],[11053,11053],[10838,10838]]],[1559304969872,["GJX@GJXAIOU",[[1,11051,"- \n"]],[11050,11050],[11053,11053]]],[1559304977519,["GJX@GJXAIOU",[[1,11053,"树的戴荃路径"]],[11053,11053],[11059,11059]]],[1559304978491,["GJX@GJXAIOU",[[-1,11055,"戴荃路径"]],[11059,11059],[11055,11055]]],[1559305008505,["GJX@GJXAIOU",[[1,11055,"带权路径长度：等于所有叶子结点的带权路径长度"]],[11055,11055],[11077,11077]]],[1559305070388,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11079," "]],[10838,10838],[11080,11080]]],[1559305070388,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11079," "]],[11080,11080],[10838,10838]]],[1559305011529,["GJX@GJXAIOU",[[1,11077,"之和；"]],[11077,11077],[11080,11080]]],[1559305016661,["GJX@GJXAIOU",[[1,11081,"- \n"]],[11080,11080],[11083,11083]]],[1559305028260,["GJX@GJXAIOU",[[1,11083,"赫夫曼树（）"]],[11083,11083],[11089,11089]]],[1559305030753,["GJX@GJXAIOU",[[1,11088,"最有"]],[11088,11088],[11090,11090]]],[1559305031897,["GJX@GJXAIOU",[[-1,11089,"有"]],[11090,11090],[11089,11089]]],[1559305034816,["GJX@GJXAIOU",[[1,11089,"优二叉树"]],[11089,11089],[11093,11093]]],[1559305036457,["GJX@GJXAIOU",[[1,11094,"；"]],[11094,11094],[11095,11095]]],[1559305037293,["GJX@GJXAIOU",[[-1,11094,"；"]],[11095,11095],[11094,11094]]],[1559305060920,["GJX@GJXAIOU",[[1,11094,"：带权路径长度WPL最小的二叉树；"]],[11094,11094],[11111,11111]]],[1559305130397,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "]],[10838,10838],[11114,11114]]],[1559305130397,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "]],[11114,11114],[10838,10838]]],[1559305106389,["GJX@GJXAIOU",[[1,11236,"\n"]],[11234,11234],[11235,11235]]],[1559305106541,["GJX@GJXAIOU",[[1,11237,"\n"]],[11235,11235],[11236,11236]]],[1559305106699,["GJX@GJXAIOU",[[1,11238,"\n"]],[11236,11236],[11237,11237]]],[1559305124168,["GJX@GJXAIOU",[[1,11237,"赫夫曼树构造方法："]],[11237,11237],[11246,11246]]],[1559305124697,["GJX@GJXAIOU",[[1,11248,"\n"]],[11246,11246],[11247,11247]]],[1559305250401,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11236,"\n"],[1,11246,"\n"]],[10838,10838],[11247,11247]]],[1559305250401,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11237,"\n"],[-1,11246,"\n"]],[11247,11247],[10838,10838]]],[1559305242350,["GJX@GJXAIOU",[[1,11248,"![赫夫曼树构造方法]($resource/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.jpg)\n"]],[11248,11248],[11348,11348]]],[1559305244862,["GJX@GJXAIOU",[[1,11349,"\n"]],[11348,11348],[11349,11349]]],[1559305246712,["GJX@GJXAIOU",[[-1,11349,"\n"],[1,11350,"="]],[11349,11349],[11350,11350]]],[1559305246905,["GJX@GJXAIOU",[[1,11350,"==="]],[11350,11350],[11351,11351]]],[1559305310403,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559305310403,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559305265490,["GJX@GJXAIOU",[[1,11351,"最有的赫夫曼树不一定性能上是最好的"]],[11351,11351],[11368,11368]]],[1559305370416,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559305370416,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559305337630,["GJX@GJXAIOU",[[1,11370,"\n\n"]],[11370,11370],[11371,11371]]],[1559305337770,["GJX@GJXAIOU",[[1,11372,"\n"]],[11371,11371],[11372,11372]]],[1559305337909,["GJX@GJXAIOU",[[1,11373,"\n"]],[11372,11372],[11373,11373]]],[1559305338559,["GJX@GJXAIOU",[[1,11374,"\n"]],[11373,11373],[11374,11374]]],[1559305345032,["GJX@GJXAIOU",[[1,11374,"### "]],[11374,11374],[11378,11378]]],[1559305346295,["GJX@GJXAIOU",[[-1,11377," "]],[11378,11378],[11377,11377]]],[1559305348135,["GJX@GJXAIOU",[[1,11377,"6.13"]],[11377,11377],[11381,11381]]],[1559305350557,["GJX@GJXAIOU",[[-1,11376,"#"]],[11377,11377],[11376,11376]]],[1559305350726,["GJX@GJXAIOU",[[1,11376," "]],[11376,11376],[11377,11377]]],[1559305356781,["GJX@GJXAIOU",[[1,11381,"赫夫曼编码"]],[11381,11381],[11386,11386]]],[1559305357442,["GJX@GJXAIOU",[[1,11387,"\n"]],[11386,11386],[11387,11387]]],[1559305357568,["GJX@GJXAIOU",[[1,11388,"\n"]],[11387,11387],[11388,11388]]],[1559305360818,["GJX@GJXAIOU",[[-1,11388,"\n"],[1,11389,"因为"]],[11388,11388],[11390,11390]]],[1559305368646,["GJX@GJXAIOU",[[1,11390,"数据传输过程图各种"]],[11390,11390],[11399,11399]]],[1559305370053,["GJX@GJXAIOU",[[-1,11396,"图各种"]],[11399,11399],[11396,11396]]],[1559305430424,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559305430424,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559305384482,["GJX@GJXAIOU",[[1,11396,"中各个字符出现的频率其实不是等待"]],[11396,11396],[11412,11412]]],[1559305385014,["GJX@GJXAIOU",[[-1,11410,"等待"]],[11412,11412],[11410,11410]]],[1559305389514,["GJX@GJXAIOU",[[1,11410,"灯盖"]],[11410,11410],[11412,11412]]],[1559305390700,["GJX@GJXAIOU",[[-1,11410,"灯盖"]],[11412,11412],[11410,11410]]],[1559305404376,["GJX@GJXAIOU",[[1,11410,"等概的，"]],[11410,11410],[11414,11414]]],[1559305970508,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559305970508,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559305950568,["GJX@GJXAIOU",[[1,11414,"因此如果每个字母都是用相同长度的编码，会浪费空间，"]],[11414,11414],[11439,11439]]],[1559306150569,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306150569,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306111576,["GJX@GJXAIOU",[[1,11439,"，"]],[11439,11439],[11440,11440]]],[1559306112448,["GJX@GJXAIOU",[[-1,11439,"，"]],[11440,11440],[11439,11439]]],[1559306118599,["GJX@GJXAIOU",[[1,11439,"然后根据"]],[11439,11439],[11443,11443]]],[1559306210562,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306210562,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306183414,["GJX@GJXAIOU",[[1,11443,"每个字符出现的概率进行构造"]],[11443,11443],[11456,11456]]],[1559306510595,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306510595,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306457029,["GJX@GJXAIOU",[[1,11456,"赫夫曼树，"]],[11456,11456],[11461,11461]]],[1559306630615,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306630615,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306621207,["GJX@GJXAIOU",[[1,11461,"，概率值"]],[11461,11461],[11465,11465]]],[1559306622875,["GJX@GJXAIOU",[[-1,11461,"，"]],[11462,11462],[11461,11461]]],[1559306626201,["GJX@GJXAIOU",[[1,11464,"就是"]],[11464,11464],[11466,11466]]],[1559306690638,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306690638,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306676095,["GJX@GJXAIOU",[[1,11466,"每个结点的权，然后将权值左分支改为0》"]],[11466,11466],[11485,11485]]],[1559306677494,["GJX@GJXAIOU",[[-1,11484,"》"]],[11485,11485],[11484,11484]]],[1559306678119,["GJX@GJXAIOU",[[1,11484,"，"]],[11484,11484],[11485,11485]]],[1559306750636,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306750636,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306743548,["GJX@GJXAIOU",[[1,11485,"右分支改为1，"]],[11485,11485],[11492,11492]]],[1559306810645,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306810645,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306788923,["GJX@GJXAIOU",[[1,11492,"之后就是赫夫曼树，即高频"]],[11492,11492],[11504,11504]]],[1559306790065,["GJX@GJXAIOU",[[-1,11500,"，即高频"]],[11504,11504],[11500,11500]]],[1559306810148,["GJX@GJXAIOU",[[1,11500,"，而编码位数就是结点所处的深度，"]],[11500,11500],[11516,11516]]],[1559306870654,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306870654,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306863303,["GJX@GJXAIOU",[[1,11516,"并且高频字使用短码，低频字使用长码"]],[11516,11516],[11533,11533]]],[1559306930675,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559306930675,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559306877880,["GJX@GJXAIOU",[[1,11533,"；"]],[11533,11533],[11534,11534]]],[1559306905855,["GJX@GJXAIOU",[[1,11534,"\n\n"]],[11534,11534],[11535,11535]]],[1559306909669,["GJX@GJXAIOU",[[1,11536,"\n"]],[11535,11535],[11536,11536]]],[1559306912535,["GJX@GJXAIOU",[[-1,11536,"\n"],[1,11537,"如示例"]],[11536,11536],[11539,11539]]],[1559306914791,["GJX@GJXAIOU",[[1,11539,"图所示："]],[11539,11539],[11543,11543]]],[1559306915085,["GJX@GJXAIOU",[[1,11543,"\n\n"]],[11543,11543],[11544,11544]]],[1559307050717,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559307050717,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559307027310,["GJX@GJXAIOU",[[1,11544,"![赫夫曼编码]($resource/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.jpg)\n"]],[11544,11544],[11614,11614]]],[1559307033558,["GJX@GJXAIOU",[[1,11615,"\n"]],[11613,11613],[11614,11614]]],[1559307033703,["GJX@GJXAIOU",[[1,11616,"\n"]],[11614,11614],[11615,11615]]],[1559307110707,[null,[[1,10838,"--"],[-1,10839,"-"],[-1,10844,"\n"],[-1,10900," "],[1,10901,"\n"],[1,11113," "],[-1,11233,"\n"]],[10838,10838],[11233,11233]]],[1559307110707,[null,[[-1,10838,"--"],[1,10841,"-"],[1,10845,"\n"],[1,10900," "],[-1,10900,"\n"],[-1,11113," "],[1,11234,"\n"]],[11233,11233],[10838,10838]]],[1559307103110,["GJX@GJXAIOU",[[1,11615,"解码的时候同样使用赫夫曼编码；"]],[11615,11615],[11630,11630]]],[1559307103710,["GJX@GJXAIOU",[[-1,11629,"；"]],[11630,11630],[11629,11629]]],[1559307104264,["GJX@GJXAIOU",[[1,11629,"。"]],[11629,11629],[11630,11630]]],[1559307104738,["GJX@GJXAIOU",[[1,11632,"\n"]],[11630,11630],[11631,11631]]],[1559307104904,["GJX@GJXAIOU",[[1,11633,"\n"]],[11631,11631],[11632,11632]]],[1559307105043,["GJX@GJXAIOU",[[1,11634,"\n"]],[11632,11632],[11633,11633]]],[1559307105182,["GJX@GJXAIOU",[[1,11635,"\n"]],[11633,11633],[11634,11634]]]],null,"GJX@GJXAIOU"],["41ad2d57-3e89-475d-b671-46de25113829",1570933355442,"# 树\n\n\n## 6.2 树的定义\n\n•树(Tree)是n(n>=0)个结点的有限集。当n=0时成为空树，在任意一棵非空树中：\n- 有且仅有一个特定的称为根(Root)的结点；\n- 当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、...、Tm，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。\n\n注意点：\n- n>0时，根结点是唯一的，坚决不可能存在多个根结点。\n- m>0时，子树的个数是没有限制的，但它们互相是一定不会相交的。\n\n\n### 6.2.1 结点分类\n\n- 结点拥有子树数目称为结点的度；\n  - 度为0的结点称为叶结点(Leaf)或终端结点\n  - 度不为0的结点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。\n\n树的度是树内各结点的度的最大值；\n\n### 6.2.2结点之间的关系\n\n•结点的子树的根称为结点的孩子(Child)，相应的，该结点称为孩子的双亲(Parent)，同一双亲的孩子之间互称为兄弟(Sibling)。\n•结点的祖先是从根到该结点所经分支上的所有结点。\n\n### 6.2.3 树的其他相关概念\n\n•结点的层次(Level)从根开始定一起，根为第一层，根的孩子为第二层。\n•其双亲在同一层的结点互为堂兄弟。\n•树中结点的最大层次称为树的深度(Depth)或高度。\n如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称该树为有序树，否则称为无序树；\n森林是m(m>=0)棵互不相交的树的集合；\n\n\n## 6.3 树的抽象数据类型\n\n```c\nADT  树（tree）\nData\n    树是由一个根结点和若干棵子树构成。树中结点具有相同数据类型及层次关系。\nOperation\n    InitTree(*T):构造空树T\n    DestroyTree(*T):销毁树T\n    CreateTree(*T,definition):按definition中给出树的定义来构造树\n    ClearTree(*T):若树T存在，则将树T情空为空树\n    TreeEmpty(T):若T为空树，返回true，否则返回false\n    TreeDepth(T):返回T的深度\n    Root(T):返回T的根结点\n    Value(T,cur_e):cur_e是树T中的一个结点，返回此结点的值\n    Assign(T,cur_e,value):给树T的结点cur_e赋值为value\n    Parent(T,cur_e):若cur_e是树T的非根结点，则返回它的双亲，否则返回空\n    LeftChild(T,cur_e):若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空\n    RightSibling(T,cur_e):若cur_e有右兄弟，则返回它的右兄弟，否则返回空\n    InsertChild(*T,*p,i,c):其中p指向树T的某个结点，i为所指结点p的度上加1，非空树c与T不相交，操作结果为插入c为树T中p指结点的第i棵子树\n    DeleteChild(*T,*p,i):其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树\nendADT\n```\n\n\n\n## 6.4 树的存储结构\n\n- 三种表示方法：双亲表示法，孩子表示法、孩子兄弟表示法\n\n\n### 6.4.1 双亲表示法\n\n在每个结点中附设一个指示器指示其双亲结点在数组中的位置。\n\n![双亲表示法结点结构]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n双亲表示法结点结构定义代码：\n```c\n//数的双亲表示法结点结构定义\n#define MAX_TREE_SIZE 100\ntypedef int ElemType;\n\ntypedef struct PTNode //结点结构\n{\n\tElemType data;\t// 结点数据\n\tint parent;\t\t// 双亲位置\n}PTNode;\n\ntypedef struct //树结构\n{\n\tPTNode nodes[MAX_TREE_SIZE]; //结点数组\n\tint r;\t\t\t //根的位置和节点数\n\tint n;\t\t\t\n}PTree;\n```\n\n注：根节点的位置域即parent域设置为-1；\n图示如下：\n\n![双亲表示法]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n补充：上面的双亲表示法无法很方便的之后某个结点的孩子结点有哪些，因此在结点结构的加上一个最左边（长子）域，没有孩子的结点长子域设置为-1；\n如果同时关注各兄弟之间的关系；可以同时加上一个右兄弟域，如果存在右兄弟则记录下标，没有就记为-1;\n\n补充之后图示：\n![双亲表示法补充]($resource/%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%A1%A5%E5%85%85.jpg)\n\n==实际使用过程中，存储结构的设计十分灵活，根据具体情况采用==\n\n\n\n### 6.4.2 孩子表示法\n\n因为数的每个结点可能含有多个子树，因此可以使用多重链表：每个结点有多个指针域，其中每个指针指向一棵子树的根节点，称为多重链表表示法；\n\n\n- 方案一：指针域的个数等于树的度（树的度为数的各个结点度的最大值）\n当树中各个结点的度相差很大的时候，浪费空间；相差很小的时候是一种优点；\n\n![孩子表示法方案一结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n![孩子表示法方案一]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%B8%80.png)\n\n- 方案二：每个结点指针域的个数等于该结点的度\n空间利用率更高了，但是因为各个结点的链表结构不同，维护各个结点度的数值较为麻烦\n\n![孩子表示法方案二结点结构]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C%E7%BB%93%E7%82%B9%E7%BB%93%E6%9E%84.jpg)\n\n\n![孩子表示法方案二]($resource/%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95%E6%96%B9%E6%A1%88%E4%BA%8C.png)\n\n\n- 具体方案：\n把每个结点的孩子结点排列起来，以单链表做存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空；然后n个头指针又组成一个线性表，采用顺序储存结构，存放进一个一维数组中。\n如下图所示：\n![图片1]($resource/%E5%9B%BE%E7%89%871.jpg)\n\n\n孩子表示法的结构定义代码：\n```c\n/*\n\t孩子表示法结构定义\n*/\n#define MAX_TREE_SIZE \t100\n\ntypedef char ElemType;\n\n// 孩子结点\ntypedef struct CTNode\n{\n\tint child;\t\t\t\t// 该结点在表头数组中的下标\n\tstruct CTNode *next;\t\n} *ChildPtr;\n\n// 表头结构\ntypedef struct\n{\t\n\tElemType data;\t\t\t\n\tint parent;\t\t\t\t\n\tChildPtr firstchild;\t// 存储该结点孩子链表的头指针\n} CTBox;\n\n//树结构\ntypedef struct\n{\n\tCTBox nodes[MAX_TREE_SIZE];\t// 结点数组\n\tint r, n; //根的位置和结点数\n}\n```\n\n该结构便于查找某个结点的某个孩子或者某个结点的兄弟有利，但是要查找某个结点的双亲就需要遍历整棵树，可以采用在表头数组中在data和firstchild中加上一列parent实现；称为：双亲孩子表示法。\n\n\n\n\n\n### 6.4.3 孩子兄弟表示法\n\n理论：如果任意一棵树，他的结点的第一个孩子如果存在就是唯一的，他的右兄弟如果存在也是为唯一的；\n\n树的孩子兄弟表示法结构定义：\n```c\n/*\n\t树的孩子兄弟表示法结构定义\n*/\ntypedef struct CSNode{\n\tTElemType data;\n\tstruct CSNode *firstchild,*rightsib;\n}CSNode.*CSTree;\n```\n\n![孩子兄弟表示法]($resource/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95.jpg)\n\n\n\n## 6.5 二叉树\n\n•二叉树（Binary Tree）是n（n>=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。\n\n\n### 6.5.1二叉树特点\n\n- 每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。\n- 左子树和右子树是有顺序的，次序不能颠倒；\n- 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树；\n- 二叉树的五种基本形态：\n  - •空二叉树\n  - •只有一个根结点\n  -  •根结点只有左子树\n  - •根结点只有右子树\n  - •根结点既有左子树又有右子树\n\n### 6.5.2 特殊的二叉树\n\n- 斜树：\n  - 所有结点都只有左子树或者只有右子树，称为：左斜树和右斜树；\n- 满二叉树：\n  - 所有分支结点都存在左子树和右子树，并且所有的叶子都在同一层上；\n  - 特点：\n    - 叶子只能出现在最下一层。\n    - 非叶子结点的度一定是2。\n    - 在同样深度的二叉树中，满二叉树的结点个数一定最多，同时叶子也是最多。\n- 完全二叉树：\n  - 对一棵具有n个结点的二叉树按层序编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点位置完全相同；\n  - 完全二叉树的特点有：\n    - 叶子结点只能出现在最下两层。\n    - 最下层的叶子一定集中在左部连续位置。\n    - 倒数第二层，若有叶子结点，一定都在右部连续位置。\n    - 如果结点度为1，则该结点只有左孩子。\n    - 同样结点树的二叉树，完全二叉树的深度最小。\n  - 注意：满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。\n  - 判断：==将每个结点按照满二叉树的结构逐层顺序编号，如果顺序出现空档，则说明不是完全二叉树，否则就是==\n\n## 6.6 二叉树的性质\n\n- 性质1：在二叉树的第i层至多有2^(i-1)个结点(i>=1)；\n- 性质2：深度为K的二叉树至多有(2^k)-1个结点（k>=1）;\n- 性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1；\n- 性质4：具有n个结点的完全二叉树的深度为⌊log₂n⌋+1；（⌊x⌋表示不大于x的最大整数）\n- 性质5：如果对一棵有n个结点的完全二叉树(其深度为⌊log₂n⌋+1)的结点按层序编号，对任一结点i(1<=i<=n)有以下性质：\n  - 如果i = 1，则结点 i  是二叉树的根，无双亲；如果i > 1，则其双亲是结点⌊i/2⌋\n  - 如果2i > n，则结点 i  无做左孩子(结点 i  为叶子结点)；否则其左孩子是结点2i\n  - 如果2i+1 > n，则结点  i  无右孩子；否则其右孩子是结点2i+1\n\n\n\n\n\n\n## 6.7二叉树的存储结构\n\n- 顺序存储结构：\n二叉树可以使用顺序存储结构；完全二叉树的使用一维数组实现顺序存储结构，同时数组的下标可以体现结点之间的逻辑关系；\n\n![完全二叉树的顺序存储结构]($resource/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n当存储普通的二叉树时候使用`^`代替不存在的结点存储在数组中；但是会造成很大的空间浪费，因此==顺序存储结构一般仅仅用于完全二叉树的存储中==\n\n- 链式存储结构：（二叉链表）\n\n二叉链表结点机构示意图：\n![二叉链表结点存储结构]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n二叉链表结点结构定义如下：\n```c\n/*\n\t二叉树的二叉链表结点结构定义\n*/\n//结点结构\ntypedef struct BiTNode{\n\tTElemType data; //结点数据\n\tstruct BiTNode *lchild,*rchild; //左右孩子指针\n}BiTNode.*BiTree;\n```\n二叉链表存储结构示例：\n\n![二叉链表存储结构示例]($resource/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.png)\n\n\n\n\n## 6.8 遍历二叉树\n\n•二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种**次序**依次**访问**二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。\n\n### 6.8.1二叉树遍历方法\n在限定从左到右的遍历顺序之后，分为四类；\n\n- 前序遍历：\n若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。\n\n![二叉树前序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 中序遍历：\n若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。\n![二叉树中序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 后序遍历：\n若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。\n![二叉树后序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n- 层序遍历：\n若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。\n![二叉树的层序遍历]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.png)\n\n\n### 6.8.3 前序遍历算法\n```c\n/*\n\t二叉树的前序遍历算法\n*/\n\nvoid PreOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->lchild); //先序遍历左子树\n\tPreOrderTraverse(T->rchild); //先序遍历右子树\n}\n\n```\n使用递归\n以下图为例程序说明：\n![前序遍历算法]($resource/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95.jpg)\n\n\n### 6.8.4 中序遍历算法\n```c\n/*\n\t二叉树的中序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //中序遍历左子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n\tPreOrderTraverse(T->rchild); //中序遍历右子树\n}\n\n```\n中序遍历上面二叉树的节点顺序为：HKDBEAIFCGJ\n\n\n### 6.8.4 后序遍历算法\n```c\n/*\n\t二叉树的后序遍历算法\n*/\n\nvoid InOrderTraverse(BiTree T){\n\tif (T==NULL){\n\t\treturn;\n\t}\n\tPreOrderTraverse(T->lchild); //后序遍历左子树\n\tPreOrderTraverse(T->rchild); //后序遍历右子树\n\tprintf(\"%c\", T->data); //这里操作时显示结点数据，当然此操作可以自行更改\n}\n\n```\n后序遍历上面二叉树的节点顺序为：KHDEBIFJGCA\n\n\n\n\n注意：\n- 已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n- 已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树；\n\n\n\n## 6.9 二叉树的建立\n\n假设二叉树每个结点都是一个字符，而且空节点使用`#`代替；\n```c\ntypedef char ElemType;\n\ntypedef struct BiTNode\n{\n\tchar data;\n\tstruct BiTNode *lchild, *rchild;\n} BiTNode, *BiTree;\n\n// 按前序输入二叉树中结点的值（一个字符），使用#表示空树，构造二叉链表表示二叉树\nCreateBiTree(BiTree *T)\n{\n\tchar c;\n\n\tscanf(\"%c\", &c);\n\tif( '#' == c )\n\t{\n\t\t*T = NULL;\n\t}\n\telse\n\t{\n\t\t*T = (BiTNode *)malloc(sizeof(BiTNode));\n\t\tif(!*T){\n          exit(OVERFLOW);\n        }\n\t\t(*T)->data = c; //生成根节点\n\t\tCreateBiTree(&(*T)->lchild); //构造左子树\n\t\tCreateBiTree(&(*T)->rchild); //构造右子树\n\t}\n}\n```\n\n\n\n\n## 6.10 线索二叉树\n\n根据二叉链表的图示，可以看出结点结构中没有左孩子和右孩子的部分使用`^`代替，浪费了很多空间；同时二叉链表==只能知道每个结点指向其左右孩子结点的地址，而不知道某个结点的前驱和后继分别是谁，必须通过再次遍历才能得到。==\n\n可以采用之间在存储结点的时候直接记住前驱和后继；\n\n- 线索：指向前驱和后继的指针\n- 线索链表：加上线索的二叉链表\n- 线索二叉树：对应的二叉树\n\n将==中序遍历==中的`^`充分利用之后的效果图；\n\n![线索二叉树]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n\n以上方法相当于将一棵二叉树转换成了双向链表；\n\n![二叉树转换成为双向链表]($resource/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.jpg)\n\n方法补充：引入两个标志域：ltag和rtag（只是存放0或1数字的布尔型变量），得到结点结构如下：\n\n![线索二叉链表结点格式]($resource/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E6%A0%BC%E5%BC%8F.png)\n\n–ltag为0时指向该结点的左孩子，为1时指向该结点的前驱。\n\n–rtag为0时指向该结点的右孩子，为1时指向该结点的后继。\n\n![原结构与线索二叉树结构对比]($resource/%E5%8E%9F%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94.jpg)\n\n\n线索二叉树结构实现定义代码：\n```c\ntypedef enum {Link, Thread} PointerTag;\n\ntypedef struct BiThrNode\n{\n\tchar data;\n\tstruct BiThrNode *lchild, *rchild;\n\tPointerTag ltag;\n\tPointerTag rtag;\n} BiThrNode, *BiThrTree;\n```\n\n线索话二叉树的实质就是将二叉链表中的空指针改为指向前驱或者后继的线索，也就是相当于在遍历的过程中修改空指针的过程。\n\n中序遍历线索化的递归函数代码：\n解释见书本：p192\n```c\nBiThrTree pre; //全局变量，始终指向刚刚访问过的结点\nvoid InThreading(BiThrTree T)\n{\n\tif( T )\n\t{\n\t\tInThreading( T->lchild );\t\t// 递归左子树线索化\n\t\tif( !T->lchild )\t//没有左孩子 \n\t\t{\n\t\t\tT->ltag = Thread; //前驱线索\n\t\t\tT->lchild = pre; //左孩子指针指向前驱\n\t\t}\n\n\t\tif( !pre->rchild ) //前驱没有右孩子\n\t\t{\n\t\t\tpre->rtag = Thread; //后继线索\n\t\t\tpre->rchild = T; //前驱右孩子指针指向后继（当前的结点T）\n\t\t}\n\n\t\tpre = T; //保持pre指向T的前驱\n\n\t\tInThreading( T->rchild );\t\t//递归右子树线索化\n\t}\n}\n\n```\n\n\n遍历的代码：具体见P193\n```c\nvoid InOrderThreading( BiThrTree *p, BiThrTree T )\n{\n\t*p = (BiThrTree)malloc(sizeof(BiThrNode));\n\t(*p)->ltag = Link;\n\t(*p)->rtag = Thread;\n\t(*p)->rchild = *p;\n\tif( !T )\n\t{\n\t\t(*p)->lchild = *p;\n\t}\n\telse\n\t{\n\t\t(*p)->lchild = T;\n\t\tpre = *p;\n\t\tInThreading(T);\n\t\tpre->rchild = *p;\n\t\tpre->rtag = Thread;\n\t\t(*p)->rchild = pre;\n\t}\n}\n\nvoid visit( char c )\n{\n\tprintf(\"%c\", c);\n}\n\n// 涓簭閬嶅巻浜屽弶鏍戯紝闈為€掑綊\nvoid InOrderTraverse( BiThrTree T )\n{\n\tBiThrTree p;\n\tp = T->lchild;\n\n\twhile( p != T )\n\t{\n\t\twhile( p->ltag == Link )\n\t\t{\n\t\t\tp = p->lchild;\n\t\t}\n\t\tvisit(p->data);\n\n\t\twhile( p->rtag == Thread && p->rchild != T )\n\t\t{\n\t\t\tp = p->rchild;\n\t\t\tvisit(p->data);\n\t\t}\n\t\t\n\t\tp = p->rchild;\n\t}\n}\n```\n\n\n\n\n\n## 6.11 树、森林转换为二叉树\n\n### 6.11.1 将树转换为二叉树\n\n* 加线，在所有兄弟结点之间加一条连线。\n* 去线，对树中每个结点，只保留它与第一孩子结点的连线，删除它与其他孩子结点之间的连线。\n* 层次调整，以树的根结点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。\n\n\n### 6.11.2 将森林转换为二叉树\n\n* 把每棵树转换为二叉树。\n* 第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连接起来。\n\n### 6.11.3 二叉树转换为树、森林\n•二叉树转换为普通树是刚才的逆过程，步骤也就是反过来做而已。\n\n•判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有的话就是森林，没有的话就是一棵树。\n\n\n\n### 6.11.4 树和森林的遍历\n\n- 树的遍历分为两种方式：一种是先根遍历，另一种是后根遍历。\n  * 先根遍历：先访问树的根结点，然后再依次先根遍历根的每棵子树。\n  * 后根遍历：先依次遍历每棵子树，然后再访问根结点。\n* 森林的遍历：前序遍历，后序遍历\n•树、森林的前根（序）遍历和二叉树的前序遍历结果相同，树、森林的后根（序）遍历和二叉树的中序遍历结果相同！\n\n\n\n----\n\n## 6.12 赫尔曼树 \n\n引例：\n因为每个结点出现情况的概率不同，因此可以重新构造二叉树使得总体的路径长度最短；\n\n![赫尔曼树]($resource/%E8%B5%AB%E5%B0%94%E6%9B%BC%E6%A0%91.png)\n\n\n\n常用概念：\n- 路径长度：从树的一个结点到另一个结点之间的分支构成两个结点之间的路径，路径多行的分支数目称为路径长度；\n- 树的路径长度：树根带每一个结点的路径长度之和；\n- 树的带权路径长度：等于所有叶子结点的带权路径长度之和；\n- 赫夫曼树（最优二叉树）：带权路径长度WPL最小的二叉树；\n\n \n![路径长度和最优二叉树]($resource/%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%A0%91.jpg)\n\n\n赫夫曼树构造方法：\n\n![赫夫曼树构造方法]($resource/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.jpg)\n\n==最有的赫夫曼树不一定性能上是最好的==\n\n\n\n## 6.13赫夫曼编码\n\n因为数据传输过程中各个字符出现的频率其实不是等概的，因此如果每个字母都是用相同长度的编码，会浪费空间，然后根据每个字符出现的概率进行构造赫夫曼树，概率值就是每个结点的权，然后将权值左分支改为0，右分支改为1，之后就是赫夫曼树，而编码位数就是结点所处的深度，并且高频字使用短码，低频字使用长码；\n\n如示例图所示：\n![赫夫曼编码]($resource/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.jpg)\n\n解码的时候同样使用赫夫曼编码。\n\n\n\n\n\n",[[1570933340308,["GJX@GJXAIOU",[[1,265,"**"],[1,269,"**"]],[265,269],[265,273]]],[1570933385228,["GJX@GJXAIOU",[[1,346,"**"],[1,362,"**"]],[346,362],[346,366]]],[1570933416077,["GJX@GJXAIOU",[[1,458,"**"],[1,463,"**"]],[458,463],[458,467]]],[1570933423861,["GJX@GJXAIOU",[[-1,386,"•"]],[387,387],[386,386]]],[1570933424312,["GJX@GJXAIOU",[[1,386,"- "]],[386,386],[388,388]]],[1570933426758,["GJX@GJXAIOU",[[-1,458,"•"]],[458,459],[458,458]]],[1570933427205,["GJX@GJXAIOU",[[1,458,"- "]],[458,458],[460,460]]],[1570933431308,["GJX@GJXAIOU",[[-1,509,"•"]],[510,510],[509,509]]],[1570933431887,["GJX@GJXAIOU",[[1,509,"- "]],[509,509],[511,511]]],[1570933454908,["GJX@GJXAIOU",[[-1,547,"•"]],[548,548],[547,547]]],[1570933455672,["GJX@GJXAIOU",[[1,547,"- "]],[547,547],[549,549]]],[1570933487807,["GJX@GJXAIOU",[[-1,566,"•"]],[567,567],[566,566]]],[1570933488695,["GJX@GJXAIOU",[[1,566,"- "]],[566,566],[568,568]]],[1570933495838,["GJX@GJXAIOU",[[1,595,"- "]],[595,595],[597,597]]],[1570933499824,["GJX@GJXAIOU",[[1,645,"- "]],[645,645],[647,647]]],[1570933572252,["GJX@GJXAIOU",[[-1,3899,"•"]],[3900,3900],[3899,3899]]],[1570933636075,["GJX@GJXAIOU",[[-1,4110,"•"]],[4111,4111],[4110,4110]]],[1570933637419,["GJX@GJXAIOU",[[-1,4119,"•"]],[4120,4120],[4119,4119]]],[1570933639882,["GJX@GJXAIOU",[[-1,4131," •"]],[4133,4133],[4131,4131]]],[1570933641883,["GJX@GJXAIOU",[[-1,4144,"•"]],[4145,4145],[4144,4144]]],[1570933642940,["GJX@GJXAIOU",[[-1,4157,"•"]],[4158,4158],[4157,4157]]],[1570933657148,["GJX@GJXAIOU",[[1,4242,"**"],[1,4272,"**"]],[4242,4272],[4242,4276]]],[1570933685907,["GJX@GJXAIOU",[[1,4367,"**"],[1,4372,"**"]],[4367,4372],[4367,4376]]],[1570933688981,["GJX@GJXAIOU",[[1,4232,"**"],[1,4236,"**"]],[4232,4236],[4232,4240]]],[1570933795702,["GJX@GJXAIOU",[[1,4720,"￥"]],[4720,4720],[4721,4721]]],[1570933797044,["GJX@GJXAIOU",[[-1,4720,"￥"]],[4721,4721],[4720,4720]]],[1570933802418,["GJX@GJXAIOU",[[1,4720,"${"]],[4720,4720],[4722,4722]]],[1570933803839,["GJX@GJXAIOU",[[1,4723,"}"]],[4723,4723],[4724,4724]]],[1570933805383,["GJX@GJXAIOU",[[-1,4725,"("]],[4726,4726],[4725,4725]]],[1570933805736,["GJX@GJXAIOU",[[1,4725,"{"]],[4725,4725],[4726,4726]]],[1570933807628,["GJX@GJXAIOU",[[-1,4729,")"]],[4730,4730],[4729,4729]]],[1570933810262,["GJX@GJXAIOU",[[1,4729,"}$"]],[4729,4729],[4731,4731]]],[1570933815577,["GJX@GJXAIOU",[[1,4766,"$"]],[4766,4766],[4767,4767]]],[1570933817478,["GJX@GJXAIOU",[[-1,4763,")"]],[4764,4764],[4763,4763]]],[1570933818240,["GJX@GJXAIOU",[[1,4763,"{"]],[4763,4763],[4764,4764]]],[1570933819718,["GJX@GJXAIOU",[[-1,4763,"{"]],[4764,4764],[4763,4763]]],[1570933820080,["GJX@GJXAIOU",[[1,4763,"}"]],[4763,4763],[4764,4764]]],[1570933821944,["GJX@GJXAIOU",[[1,4762,"{"]],[4762,4762],[4763,4763]]],[1570933823801,["GJX@GJXAIOU",[[1,4761,"}"]],[4761,4761],[4762,4762]]],[1570933825623,["GJX@GJXAIOU",[[1,4760,"{"]],[4760,4760],[4761,4761]]],[1570933827781,["GJX@GJXAIOU",[[-1,4759,"("]],[4760,4760],[4759,4759]]],[1570933829456,["GJX@GJXAIOU",[[1,4759,"$"]],[4759,4759],[4760,4760]]],[1570933864337,["GJX@GJXAIOU",[[1,4852,"$"]],[4852,4852],[4853,4853]]],[1570933868983,["GJX@GJXAIOU",[[1,4862,"$"]],[4862,4862],[4863,4863]]],[1570933887213,["GJX@GJXAIOU",[[1,4857,"_{"]],[4857,4857],[4859,4859]]],[1570933888869,["GJX@GJXAIOU",[[-1,4859,"₂"]],[4860,4860],[4859,4859]]],[1570933891400,["GJX@GJXAIOU",[[1,4859,"2}"]],[4859,4859],[4861,4861]]],[1570933896368,["GJX@GJXAIOU",[[1,4861,"^{"]],[4861,4861],[4863,4863]]],[1570933898512,["GJX@GJXAIOU",[[1,4864,"}"]],[4864,4864],[4865,4865]]],[1570933915246,["GJX@GJXAIOU",[[1,4914,"$"],[-1,4918,"₂n"],[1,4920,"_{2}^{n}"],[1,4923,"$"]],[4914,4923],[4931,4931]]],[1570933984591,["GJX@GJXAIOU",[[-1,5873,"•"]],[5874,5874],[5873,5873]]]],null,"GJX@GJXAIOU"]]}