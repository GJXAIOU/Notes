{"compress":true,"commitItems":[["2a5f4e1c-39d5-4b58-8f8c-4f7ac2f2a74c",1559117370722,"",[[1559117319322,["GJX@GJXAIOU",[[1,0,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        <h1 class=\"title-article\">33-串的链式存储结构和基本操作</h1>\n      </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n    <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n              <div class=\"article-copyright\">\n                      <svg class=\"icon\" title=\"CSDN认证原创\" aria-hidden=\"true\" style=\"width:53px; height: 18px; vertical-align: -4px;\">\n              <use xlink:href=\"#CSDN_Cert\"></use>\n            </svg>\n          \n          版权声明：本文为博主原创文章，未经博主允许不得转载。          https://blog.csdn.net/qq_35733751/article/details/80777274        </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css\">\n                              <div id=\"content_views\" class=\"markdown_views\">\n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>\n            <h3 id=\"1-串的链式存储结构\"><a name=\"t0\"></a>1. 串的链式存储结构</h3>\n\n<p>  串的链式存储结构与线性表是相似的，但是在链式存储结构中每个节点的数据域可以是一个字符，或者多个字符。如果每个节点的数据域是以一个字符存储的话，由于内存对齐的的影响下，链串的存储密度较小，因此会存在浪费。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622181949243?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p><br> <br>\n  如果每个节点的数据域是以四个字符存储的话，链串的存储密度较大，即便在内存对齐的的影响下，也不容易浪费空间。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182044140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>关于内存对齐，假设每个节点的数据域以一个字符存储，定义的链串数据结构如下：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs d has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> snode\n{\n    <span class=\"hljs-built_in\">char</span> data;              <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-keyword\">struct</span> snode *next;     <span class=\"hljs-comment\">//指针域</span>\n} LiString;<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\n\n<p>  在上面用C语言定义的数据结构中，节点的数据域是用一个字节来存储一个字符，但是当分配内存时，会进行内存对齐，也就是说，snode节点的数据域会占用4字节的，但是每个节点只使用了一个字节。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182203304?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>  需要明白的是，一个节点存储多少字符需要根据实际的情况来决定的，因为这会直接影响到串处理的效率。总体来说，串的链式存储结构不如顺序存储结构存储灵活，性能也不如顺序存储结构，因此，在大多数情况使用串的顺序存储结构比较多。</p>\n\n<h3 id=\"2-链式串的基本操作\"><a name=\"t1\"></a>2. 链式串的基本操作</h3>\n\n<p>1.串赋值：StrAssign(s,cstr)</p>\n\n<p>  将一个字符串常量cstr赋给串s（采用尾插法） <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182643824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cpp has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">void</span> StrAssign(LiString *&amp;s,<span class=\"hljs-keyword\">char</span> cstr[])\n{\n    <span class=\"hljs-keyword\">int</span> i;\n    LiString *r,*p;\n    s=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n    r=s; <span class=\"hljs-comment\">//r始终指向尾节点</span>\n    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; cstr[i]!=<span class=\"hljs-string\">'\\0'</span>; i++)\n    {\n       p=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n       p-&gt;data=cstr[i];\n       r-&gt;next=p;\n       r=p;\n    }\n    r-&gt;next=NULL;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>2.串复制: StrCopy(s,t)</p>\n\n<p>  将串t复制给串s <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182818973?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-literal\">void</span> StrCopy(LiString <span class=\"hljs-subst\">*&amp;</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    s<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>s; <span class=\"hljs-comment\">//r始终指向串s的尾节点</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>) <span class=\"hljs-comment\">//p将串t的所有节点复制到串s中</span>\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>3.判串相等：StrEqual(s,t)</p>\n\n<p>  若两个串s与t相等返回真（1）；否则返回假（0）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">bool StrEqual(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">==</span>q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>)\n    {\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n       q<span class=\"hljs-subst\">=</span>q<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    <span class=\"hljs-keyword\">if</span> (p<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span>)\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">else</span>\n       <span class=\"hljs-comment\">//说明p和q有一个不为空</span>\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li></ul></pre>\n\n<p>4.求串长：StrLength(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">int</span> StrLength(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n       i++;\n       p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> i;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li></ul></pre>\n\n<p>5.串连接：Concat(s,t)</p>\n\n<p>  将两个串s和t连接形成新串，返回这个新串。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-subst\">*</span>Concat(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>str,<span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    <span class=\"hljs-comment\">//新串str</span>\n    str<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>str;\n    <span class=\"hljs-comment\">//将s的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-comment\">//将t的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li></ul></pre>\n\n<p>6.求子串: SubStr(s,i,j)</p>\n\n<p>  返回串s中从第i个字符开始的、由连续j个字符组成的子串。 <br>\n  参数不正确时返回一个空串 （1≤i≤StrLength(s)）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-variable\">*SubStr</span>(LiString <span class=\"hljs-variable\">*s</span>,<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)\n{\n    <span class=\"hljs-keyword\">int</span> k;\n    LiString <span class=\"hljs-variable\">*str</span>,<span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>,<span class=\"hljs-variable\">*q</span>,<span class=\"hljs-variable\">*r</span>;\n    str=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n    str-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    r=str; <span class=\"hljs-regexp\">//r</span>指向新串str的尾节点\n    <span class=\"hljs-keyword\">if</span> (i&lt;=<span class=\"hljs-number\">0</span> || i&gt;StrLength(<span class=\"hljs-keyword\">s</span>) || j&lt;<span class=\"hljs-number\">0</span> || i+j-<span class=\"hljs-number\">1</span>&gt;StrLength(<span class=\"hljs-keyword\">s</span>))\n        <span class=\"hljs-keyword\">return</span> str; <span class=\"hljs-regexp\">//</span>参数非法时的处理\n    //移动到串<span class=\"hljs-keyword\">s</span>的第i个节点\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">0</span>; k&lt;i-<span class=\"hljs-number\">1</span>; k++)\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-regexp\">//</span>将<span class=\"hljs-keyword\">s</span>的第i个节点开始的j个节点复制到str\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">1</span>; k&lt;=j; k++)\n    {\n        <span class=\"hljs-keyword\">q</span>=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n        <span class=\"hljs-keyword\">q</span>-&gt;data=p-&gt;data;\n        r-&gt;<span class=\"hljs-keyword\">next</span>=<span class=\"hljs-keyword\">q</span>;\n        r=<span class=\"hljs-keyword\">q</span>;\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    //将尾节点的<span class=\"hljs-keyword\">next</span>置为NULL\n    r-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li></ul></pre>\n\n<p>7.输出串：DispStr(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">void DispStr(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n        <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">%c</span>\"</span>,p-&gt;data);\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre>          </div>\n          <link href=\"https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css\" rel=\"stylesheet\">\n                  </div>\n  </article>\n</div>"]],[0,0],[21807,21807]]],[1559117343634,["GJX@GJXAIOU",[[-1,21801,"</div>"],[1,21807,"\n"]],[21801,21807],[21801,21801]]],[1559117346367,["GJX@GJXAIOU",[[-1,21769,"            </div>"]],[21769,21787],[21769,21769]]],[1559117428769,["GJX@GJXAIOU",[[-1,2076," <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n              <div class=\"article-copyright\">\n                      <svg class=\"icon\" title=\"CSDN认证原创\" aria-hidden=\"true\" style=\"width:53px; height: 18px; vertical-align: -4px;\">\n              <use xlink:href=\"#CSDN_Cert\"></use>\n            </svg>\n          \n          版权声明：本文为博主原创文章，未经博主允许不得转载。          https://blog.csdn.net/qq_35733751/article/details/80777274        </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css\">\n                              <div id=\"content_views\" class=\"markdown_views\">"]],[2076,2793],[2076,2076]]],[1559117464029,["GJX@GJXAIOU",[[-1,258,"  </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n   \n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>"]],[2085,2362],[258,258]]],[1559117478703,["GJX@GJXAIOU",[[-1,0,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        "]],[0,206],[0,0]]],[1559117481342,["GJX@GJXAIOU",[[1,0,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        "]],[0,0],[0,206]]],[1559117483591,["GJX@GJXAIOU",[[1,258,"  </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n   \n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>"]],[258,258],[2085,2362]]],[1559117504175,["GJX@GJXAIOU",[[-1,0,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        <h1 class=\"title-article\">33-串的链式存储结构和基本操作</h1>\n      </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n   \n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>"]],[0,2362],[0,0]]],[1559117507334,["GJX@GJXAIOU",[[-1,3,"          "]],[3,13],[3,3]]],[1559117530920,["GJX@GJXAIOU",[[-1,1287,">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>"]],[1287,1485],[1287,1287]]]],null,"GJX@GJXAIOU"]]}