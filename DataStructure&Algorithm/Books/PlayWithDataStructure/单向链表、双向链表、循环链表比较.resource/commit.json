{"compress":true,"commitItems":[["4c487426-727b-43ec-aacd-b1a8b2de4d13",1556546128085,"",[[1556546101599,["GJX@GJXAIOU",[[1,0,"# 单向链表、双向链表、循环链表比较\n\n\n\n"]],[0,0],[21,21]]],[1556546114083,["GJX@GJXAIOU",[[1,21,"单向链表（单链表）\n\n         单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向表中的下一个节点，而最后一个节点则      指向一个空值NULL。\n单向链表只可向一个方向遍历。\n查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。也可以提前把一个节点的位置另外保存起来，然后直接访问。\n\n双向链表,（双链表）\n          双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。第一个节点的\"前连接\"指向NULL，最后一个节点的\"后连接\"指向NULL。\n这样可以从任何一个节点访问前一个节点，也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。\n由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。\n有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表。\n\n\n循环链表\n        在一个循环链表中, 首节点和末节点被连接在一起。这种方式在单向和双向链表中皆可实现。要转换一个循环链表，你开始于任意一个节点然后沿着列表的任一方向直到返回开始的节点。循环链表可以被视为\"无头无尾\"。\n循环链表中第一个节点之前就是最后一个节点，反之亦然。循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理，区别不大。\n另外有一种模拟的循环链表，就是在访问到最后一个节点之后的时候，手工跳转到第一个节点。访问到第一个节点之前的时候也一样。这样也可以实现循环链表的功能，在直接用循环链表比较麻烦或者可能会出现问题的时候可以用。\n--------------------- \n作者：四阿哥漫步后花园 \n来源：CSDN \n原文：https://blog.csdn.net/u012989536/article/details/42216153 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[21,21],[994,994]]],[1556546117108,["GJX@GJXAIOU",[[-1,33,"        "]],[33,41],[33,33]]],[1556546119062,["GJX@GJXAIOU",[[1,21,"**"],[1,30,"**"]],[21,30],[21,34]]],[1556546121069,["GJX@GJXAIOU",[[1,186,"**"],[1,196,"**"]],[186,196],[186,200]]],[1556546123228,["GJX@GJXAIOU",[[1,540,"**"],[1,544,"**"]],[540,544],[540,548]]],[1556546264492,["GJX@GJXAIOU",[[-1,84,"      "]],[84,90],[84,84]]],[1556546267976,["GJX@GJXAIOU",[[-1,36," "]],[37,37],[36,36]]],[1556546272692,["GJX@GJXAIOU",[[1,36,"* "],[1,95,"* "],[1,110,"* "]],[36,177],[38,183]]],[1556546818244,["GJX@GJXAIOU",[[-1,200,"          "]],[210,210],[200,200]]],[1556546829134,["GJX@GJXAIOU",[[1,200,"* "],[1,270,"* "],[1,336,"* "],[1,413,"* "]],[200,527],[202,535]]],[1556546832702,["GJX@GJXAIOU",[[1,274,"\n* "]],[271,271],[274,274]]],[1556546834572,["GJX@GJXAIOU",[[-1,272,"* "]],[274,274],[272,272]]],[1556546843158,["GJX@GJXAIOU",[[1,343,"\n* "]],[340,340],[343,343]]],[1556546844071,["GJX@GJXAIOU",[[-1,341,"* "]],[343,343],[341,341]]],[1556546873584,["GJX@GJXAIOU",[[1,423,"\n* "]],[420,420],[423,423]]],[1556546874430,["GJX@GJXAIOU",[[-1,421,"* "]],[423,423],[421,421]]],[1556546882685,["GJX@GJXAIOU",[[-1,549,"        "]],[557,557],[549,549]]],[1556546888541,["GJX@GJXAIOU",[[-1,858,"--------------------- \n作者：四阿哥漫步后花园 \n来源：CSDN \n原文：https://blog.csdn.net/u012989536/article/details/42216153 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[858,990],[858,858]]],[1556546892765,["GJX@GJXAIOU",[[1,549,"* "],[1,649,"* "],[1,755,"* "]],[549,857],[551,863]]],[1556546904349,["GJX@GJXAIOU",[[1,653,"\n* "]],[650,650],[653,653]]],[1556546905303,["GJX@GJXAIOU",[[-1,651,"* "]],[653,653],[651,651]]]],null,"GJX@GJXAIOU"]]}