{"compress":true,"commitItems":[["643d655e-6631-4714-bf67-ae75e4991209",1533129458197,"## 数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n\n- 逻辑结构：数据对象中数据元素之间的相互关系；     \n\n    - 集合结构；仅仅属于一个集合的关系；    \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；   \n\n- 物理结构：数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。    \n    - 顺序存储 ：将数据元素存储在地址连续的存储单元中； 存储结构与逻辑关系一致；  \n    - 链式存储：将数据元素存储在任一的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n    \n    \n    \n    \n    \n    \n    \n## 谈谈算法    \n算法是解决特定问题求解步骤的描述；    \n\n算法简化；\n\n1.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n2.算法设计要求：  \n正确性、可读性、健壮性、时间效率高和存储量低；     \n\n\n\n\n\n\n\n\n## 时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 时间复杂度：    \n\n    - 定义：\n        在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的** 增长率**和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n      \n       ** PS:**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n    - 那么如何分析一个算法的时间复杂度呢?步骤如下：  \n    \n    1.用常数 1 取代运行时间中的所有加法常数。    \n    2.再修改后的运行次数函数中，只保留最高阶项。    \n    3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n        \n\n\n\n    - 函数调用的时间复杂性分析    \n    \n    （1）时间复杂度O(1)   \n        int a=1,b=3,sum=0;//执行1次   \n        sum=a+b;//执行1次   \n        cout<<\"sum=\"<<sum<<endl;//执行1次       \n\n\n\n\n    (2)时间复杂度O(n)\n        for(int i = 0; i < n; i++)//执行n次\n        {\n         cout<<i<<endl;\n        }   \n\n\n    （3）时间复杂度O(n^2)\n        for(int i = 0; i < n; i++)//执行n^2次\n        {\n        for(int j = 0; j < n; j++)\n             {\n        cout<<i<<endl;\n            }\n        }   \n\n\n        **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n    （4）时间复杂度O(logn)\n        int i=1;\n        while(i<n)\n        {\n              i=i*2;\n        }\n\n        **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了x=log2n次，所以其时间复杂度为O(logn)。\n\n\n\n\n\n\n## 线性表    \n\n第一个数据结构     \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；\n\n### 定义       \n\n    **线性表（List）：** 由零个或多个数据元素组成的有限序列。\n    [若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。]      \n    \n    所以线性表元素的个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。    \n\n    \n    **注**  这里需要强调几个关键的地方：    \n    1.首先它是一个序列，也就是说元素之间是有个先来后到的，像刚才的小蝌蚪就没有顺序。    \n    \n    2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。    \n    \n    3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n### 抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n**C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n- 抽象数据类型（Abstract Data Type，ADT）  \n   是指一个数学模型及定义在该模型上的一组操作（将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）    \n\n    **标准格式：**   \n    \n     ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   \n    \n    // [       \nInitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     \n   \n    ]\n    endADT    \n    \n    \n    \n    \n    **exp:**     \n    \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，弱不存在，则插入A中即可。      \n    \n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n\n\n\n\n    \n### 线性表的存储结构    \n- 顺序存储结构    \n\n    -  概念：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n    \n    -  物理上的存储方式：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n    - 顺序存储结构封装需要三个属性：   \n        1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n        \n        2.线性表的最大存储容量：数组的长度MaxSize。  \n        \n        3.线性表的当前长度：length。   \n        \n        4.注意，数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。   \n        \n        \n    **注**线性表开始位置为1；   \n    \n    - 地址计算方式：   \n        1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n        \n        2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为随机存储结构。    \n        \n        \n    - 获取元素操作；   \n        \n        实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见       \n        \n    - 插入操作：  \n    \n        ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见     \n        \n        \n        \n        \n        \n        \n        \n----\n第八讲结束   \n----\n        \n         \n\n\n        \n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n- 链式存储结构    \n\n\n    \n\n    \n    \n    \n\n",[[1533129411189,["gjx16@GJXAIOU",[[1,1083,"\n    "]],[1078,1078],[1083,1083]]],[1533130340718,["gjx16@GJXAIOU",[[1,1083,"~~"]],[1083,1083],[1085,1085]]],[1533130340956,["gjx16@GJXAIOU",[[1,1085,"~~~"]],[1085,1085],[1086,1086]]],[1533130344816,["gjx16@GJXAIOU",[[-1,1087,"~"]],[1086,1086],[1085,1085]]],[1533130352550,["gjx16@GJXAIOU",[[1,1197,"~~"]],[1197,1197],[1199,1199]]],[1533130352582,["gjx16@GJXAIOU",[[1,1199,"~~"]],[1199,1199],[1199,1199]]],[1533130362291,["gjx16@GJXAIOU",[[1,1220,"  \n    ·~~"]],[1220,1220],[1230,1230]]],[1533130363643,["gjx16@GJXAIOU",[[-1,1227,"·~~"]],[1230,1230],[1227,1227]]],[1533130364802,["gjx16@GJXAIOU",[[1,1227,"~~"]],[1227,1227],[1229,1229]]],[1533130371594,["gjx16@GJXAIOU",[[-1,1085,"~~"]],[1087,1087],[1085,1085]]],[1533130375242,["gjx16@GJXAIOU",[[1,1085,"~"]],[1085,1085],[1086,1086]]],[1533130380341,["gjx16@GJXAIOU",[[-1,1202,"\n"]],[1202,1202],[1201,1201]]],[1533130380575,["gjx16@GJXAIOU",[[-1,1201,"\n"]],[1201,1201],[1200,1200]]],[1533130383412,["gjx16@GJXAIOU",[[-1,1196,"~~~~"]],[1200,1200],[1196,1196]]],[1533130394536,["gjx16@GJXAIOU",[[1,1195,"~~"]],[1195,1195],[1197,1197]]],[1533130394569,["gjx16@GJXAIOU",[[1,1197,"~~"]],[1197,1197],[1197,1197]]],[1533130399009,["gjx16@GJXAIOU",[[1,1219,"  \n    "]],[1218,1218],[1225,1225]]],[1533130406622,["gjx16@GJXAIOU",[[-1,1198,"~"]],[1199,1199],[1198,1198]]],[1533130410917,["gjx16@GJXAIOU",[[-1,1080,"   "]],[1083,1083],[1080,1080]]],[1533130415931,["gjx16@GJXAIOU",[[-1,1200," "]],[1200,1200],[1199,1199]]],[1533130478272,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533130478272,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533130429097,["gjx16@GJXAIOU",[[1,1318,"~~"]],[1318,1318],[1320,1320]]],[1533130429131,["gjx16@GJXAIOU",[[1,1320,"~~"]],[1320,1320],[1320,1320]]],[1533130598284,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533130598284,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533130574665,["gjx16@GJXAIOU",[[-1,1318,"~~"]],[1320,1320],[1318,1318]]],[1533130574939,["gjx16@GJXAIOU",[[-1,1317,"\n"]],[1318,1318],[1317,1317]]],[1533130583490,["gjx16@GJXAIOU",[[-1,1222,"    "]],[1226,1226],[1222,1222]]],[1533130584472,["gjx16@GJXAIOU",[[-1,1221,"\n"]],[1222,1222],[1221,1221]]],[1533130586119,["gjx16@GJXAIOU",[[1,1221,"\n     "]],[1221,1221],[1227,1227]]],[1533130587938,["gjx16@GJXAIOU",[[-1,1224,"   "]],[1227,1227],[1224,1224]]],[1533130589363,["gjx16@GJXAIOU",[[1,1226,"~"]],[1224,1224],[1225,1225]]],[1533130598135,["gjx16@GJXAIOU",[[1,1337,"  \n    ~~"]],[1337,1337],[1346,1346]]],[1533130598167,["gjx16@GJXAIOU",[[1,1346,"~~"]],[1346,1346],[1346,1346]]],[1533130658297,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533130658297,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533130598386,["gjx16@GJXAIOU",[[1,1348,"~"]],[1346,1346],[1347,1347]]],[1533130599448,["gjx16@GJXAIOU",[[-1,1348,"~"]],[1347,1347],[1346,1346]]],[1533130604702,["gjx16@GJXAIOU",[[1,1502,"~~"]],[1502,1502],[1504,1504]]],[1533130604883,["gjx16@GJXAIOU",[[1,1504,"~~~"]],[1504,1504],[1505,1505]]],[1533130613322,["gjx16@GJXAIOU",[[-1,1343," "]],[1344,1344],[1343,1343]]],[1533130624745,["gjx16@GJXAIOU",[[-1,1319,"    "]],[1323,1323],[1319,1319]]],[1533130628457,["gjx16@GJXAIOU",[[-1,1338," "]],[1338,1338],[1337,1337]]],[1533130630710,["gjx16@GJXAIOU",[[1,1318,"~"]],[1318,1318],[1319,1319]]],[1533130640032,["gjx16@GJXAIOU",[[-1,1222,"  "]],[1224,1224],[1222,1222]]],[1533130718294,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533130718294,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533130693205,["gjx16@GJXAIOU",[[-1,1504,"      "]],[1510,1510],[1504,1504]]],[1533131200437,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533131200437,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533131142779,["gjx16@GJXAIOU",[[1,1578,"  \n    "]],[1578,1578],[1585,1585]]],[1533131146750,["gjx16@GJXAIOU",[[-1,1562," "]],[1563,1563],[1562,1562]]],[1533131154046,["gjx16@GJXAIOU",[[1,1583,"~~"]],[1583,1583],[1585,1585]]],[1533131154079,["gjx16@GJXAIOU",[[1,1585,"~~"]],[1585,1585],[1585,1585]]],[1533131161048,["gjx16@GJXAIOU",[[1,1666,"~~"]],[1666,1666],[1668,1668]]],[1533131161080,["gjx16@GJXAIOU",[[1,1668,"~~"]],[1668,1668],[1668,1668]]],[1533131177360,["gjx16@GJXAIOU",[[-1,1672,"      "]],[1677,1677],[1672,1672]]],[1533131195296,["gjx16@GJXAIOU",[[-1,1812," "]],[1813,1813],[1812,1812]]],[1533131260439,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533131260439,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533131207309,["gjx16@GJXAIOU",[[-1,1952," "]],[1952,1952],[1951,1951]]],[1533131215023,["gjx16@GJXAIOU",[[-1,2004," "]],[2005,2005],[2004,2004]]],[1533131226972,["gjx16@GJXAIOU",[[-1,2088," "]],[2089,2089],[2088,2088]]],[1533131230309,["gjx16@GJXAIOU",[[-1,2149," "]],[2150,2150],[2149,2149]]],[1533131240993,["gjx16@GJXAIOU",[[-1,2449," "]],[2450,2450],[2449,2449]]],[1533131255906,["gjx16@GJXAIOU",[[1,3050,"···"]],[3050,3050],[3053,3053]]],[1533131257194,["gjx16@GJXAIOU",[[-1,3050,"···"]],[3053,3053],[3050,3050]]],[1533131258824,["gjx16@GJXAIOU",[[1,3050,"~~"]],[3050,3050],[3052,3052]]],[1533131258967,["gjx16@GJXAIOU",[[1,3052,"~~~"]],[3052,3052],[3053,3053]]],[1533131260261,["gjx16@GJXAIOU",[[-1,3054,"~"]],[3053,3053],[3052,3052]]],[1533131320444,[null,[[-1,1215," "],[1,1217," "]],[1215,1215],[1218,1218]]],[1533131320444,[null,[[1,1215," "],[-1,1216," "]],[1218,1218],[1215,1215]]],[1533131268055,["gjx16@GJXAIOU",[[1,3451,"~~"]],[3451,3451],[3453,3453]]],[1533131268091,["gjx16@GJXAIOU",[[1,3453,"~~"]],[3453,3453],[3453,3453]]],[1533131274987,["gjx16@GJXAIOU",[[-1,3459,"   "]],[3462,3462],[3459,3459]]],[1533131275538,["gjx16@GJXAIOU",[[-1,3458,"\n"]],[3459,3459],[3458,3458]]],[1533131282982,["gjx16@GJXAIOU",[[-1,3459,"\n"]],[3460,3460],[3459,3459]]],[1533131288388,["gjx16@GJXAIOU",[[1,3458,"\n"]],[3457,3457],[3458,3458]]],[1533131298186,["gjx16@GJXAIOU",[[1,3476,"  \n "]],[3472,3472],[3476,3476]]],[1533131380450,[null,[[-1,1215," "],[1,1217," "],[1,3474,"\n"],[-1,3478,"\n"]],[1215,1215],[3478,3478]]],[1533131380450,[null,[[1,1215," "],[-1,1216," "],[-1,3474,"\n"],[1,3479,"\n"]],[3478,3478],[1215,1215]]],[1533131337158,["gjx16@GJXAIOU",[[-1,3048,"  "]],[3050,3050],[3048,3048]]]],null,"gjx16@GJXAIOU"],["145450ce-ee61-4729-b868-b9784d49f7c7",1533167415230,"## 数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n\n- 逻辑结构：数据对象中数据元素之间的相互关系；     \n\n    - 集合结构；仅仅属于一个集合的关系；    \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；   \n\n- 物理结构：数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。    \n    - 顺序存储 ：将数据元素存储在地址连续的存储单元中； 存储结构与逻辑关系一致；  \n    - 链式存储：将数据元素存储在任一的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n    \n    \n    \n    \n    \n    \n    \n## 谈谈算法    \n算法是解决特定问题求解步骤的描述；    \n\n算法简化；\n\n1.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n2.算法设计要求：  \n正确性、可读性、健壮性、时间效率高和存储量低；     \n\n\n\n\n\n\n\n\n## 时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 时间复杂度：    \n\n    - 定义：\n        在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的** 增长率**和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n      \n       ** PS:**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n    - 那么如何分析一个算法的时间复杂度呢?步骤如下：  \n    \n    1.用常数 1 取代运行时间中的所有加法常数。    \n    2.再修改后的运行次数函数中，只保留最高阶项。    \n    3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n        \n\n\n\n    - 函数调用的时间复杂性分析    \n    \n    （1）时间复杂度O(1)   \n ~~~\n        int a=1,b=3,sum=0;//执行1次   \n        sum=a+b;//执行1次   \n        cout<<\"sum=\"<<sum<<endl;//执行1次       \n~~~\n\n   (2)时间复杂度O(n)   \n     \n~~~\n        for(int i = 0; i < n; i++)//执行n次\n        {\n         cout<<i<<endl;\n        }   \n~~~\n（3）时间复杂度O(n^2)  \n  ~~~~\n        for(int i = 0; i < n; i++)//执行n^2次\n        {\n        for(int j = 0; j < n; j++)\n             {\n        cout<<i<<endl;\n            }\n        }   \n~~~~~\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n   （4）时间复杂度O(logn)  \n   ~~~~ \n        int i=1;\n        while(i<n)\n        {\n              i=i*2;\n        }\n~~~~\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了x=log2n次，所以其时间复杂度为O(logn)。\n\n\n\n\n\n\n## 线性表    \n\n第一个数据结构     \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；\n\n### 定义       \n\n   **线性表（List）：** 由零个或多个数据元素组成的有限序列。\n    [若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。]      \n    \n   所以线性表元素的个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。    \n\n    \n   **注**  这里需要强调几个关键的地方：    \n    1.首先它是一个序列，也就是说元素之间是有个先来后到的，像刚才的小蝌蚪就没有顺序。    \n    \n   2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。    \n    \n   3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n### 抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n**C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n- 抽象数据类型（Abstract Data Type，ADT）  \n   是指一个数学模型及定义在该模型上的一组操作（将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）    \n\n   **标准格式：**   \n    \n     ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   \n    \n    // [       \nInitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     \n   \n    ]\n    endADT    \n    \n    \n    \n    \n    **exp:**     \n    \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，弱不存在，则插入A中即可。      \n ~~~~ \n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n~~~~\n\n\n\n ### 线性表的存储结构  \n     \n- 顺序存储结构    \n\n    -  概念：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n    \n    -  物理上的存储方式：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n    - 顺序存储结构封装需要三个属性：   \n        1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n        \n        2.线性表的最大存储容量：数组的长度MaxSize。  \n        \n        3.线性表的当前长度：length。   \n        \n        4.注意，数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。   \n        \n        \n    **注**线性表开始位置为1；   \n    \n    - 地址计算方式：   \n        1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n        \n        2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为随机存储结构。    \n        \n        \n    - 获取元素操作；   \n        \n        实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见       \n        \n    - 插入操作：  \n    \n        ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见     \n        \n        \n        \n        \n        \n        \n        \n----\n第八讲结束   \n----\n        \n         \n\n\n        \n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n- 链式存储结构    \n\n\n    \n\n    \n    \n    \n\n",[[1533167401654,["gjx16@GJXAIOU",[[1,66,"**"]],[66,66],[68,68]]],[1533167401687,["gjx16@GJXAIOU",[[1,68,"**"]],[68,68],[68,68]]],[1533167416275,["gjx16@GJXAIOU",[[-1,70,"逻辑结构："]],[70,75],[70,70]]],[1533167418231,["gjx16@GJXAIOU",[[1,68,"逻辑结构："]],[68,68],[73,73]]],[1533167426872,["gjx16@GJXAIOU",[[1,75," "]],[75,75],[76,76]]],[1533167446389,["gjx16@GJXAIOU",[[1,93,"可以分为逻辑结构和物理结构。"]],[93,93],[107,107]]],[1533167475561,["gjx16@GJXAIOU",[[-1,93,"可以分为逻辑结构和物理结构。     \n"]],[93,113],[93,93]]],[1533167492127,["gjx16@GJXAIOU",[[1,240,"  "]],[236,236],[238,238]]],[1533167492382,["gjx16@GJXAIOU",[[1,238,"\n"]],[238,238],[239,239]]],[1533167497218,["gjx16@GJXAIOU",[[-1,239,"    "]],[243,243],[239,239]]],[1533167497745,["gjx16@GJXAIOU",[[-1,239,"\n"]],[239,239],[238,238]]],[1533167503379,["gjx16@GJXAIOU",[[1,191,"**"]],[191,191],[193,193]]],[1533167503410,["gjx16@GJXAIOU",[[1,193,"**"]],[193,193],[193,193]]],[1533167511498,["gjx16@GJXAIOU",[[-1,191,"****物理结构："]],[195,200],[191,191]]],[1533167514071,["gjx16@GJXAIOU",[[1,191,"****物理结构："]],[191,191],[195,200]]],[1533167518444,["gjx16@GJXAIOU",[[-1,191,"****"]],[195,195],[191,191]]],[1533167522520,["gjx16@GJXAIOU",[[1,191,"**"],[1,196,"**"]],[191,196],[191,200]]],[1533167553818,["gjx16@GJXAIOU",[[1,200," "]],[200,200],[201,201]]],[1533167572586,["gjx16@GJXAIOU",[[-1,380,"    "]],[384,384],[380,380]]],[1533167572753,["gjx16@GJXAIOU",[[-1,380,"\n"]],[380,380],[379,379]]],[1533167573702,["gjx16@GJXAIOU",[[-1,375,"    "]],[379,379],[375,375]]],[1533167573901,["gjx16@GJXAIOU",[[-1,375,"\n"]],[375,375],[374,374]]],[1533167574686,["gjx16@GJXAIOU",[[-1,370,"    "]],[374,374],[370,370]]],[1533167574882,["gjx16@GJXAIOU",[[-1,370,"\n"]],[370,370],[369,369]]],[1533167575664,["gjx16@GJXAIOU",[[-1,365,"    "]],[369,369],[365,365]]],[1533167575849,["gjx16@GJXAIOU",[[-1,365,"\n"]],[365,365],[364,364]]],[1533167576695,["gjx16@GJXAIOU",[[-1,360,"    "]],[364,364],[360,360]]],[1533167576891,["gjx16@GJXAIOU",[[-1,360,"\n"]],[360,360],[359,359]]],[1533167577729,["gjx16@GJXAIOU",[[-1,355,"    "]],[359,359],[355,355]]],[1533167577961,["gjx16@GJXAIOU",[[-1,355,"\n"]],[355,355],[354,354]]],[1533167578443,["gjx16@GJXAIOU",[[-1,352,"  "]],[354,354],[352,352]]],[1533167579550,["gjx16@GJXAIOU",[[-1,350,"  "],[1,352,"\n"]],[352,352],[351,351]]],[1533167579715,["gjx16@GJXAIOU",[[1,352,"\n"]],[351,351],[352,352]]],[1533167579926,["gjx16@GJXAIOU",[[1,353,"\n"]],[352,352],[353,353]]],[1533167580120,["gjx16@GJXAIOU",[[1,354,"\n"]],[353,353],[354,354]]],[1533167591675,["gjx16@GJXAIOU",[[1,351,"---"]],[351,351],[354,354]]],[1533167595947,["gjx16@GJXAIOU",[[1,354,"-------"]],[354,354],[361,361]]],[1533167602077,["gjx16@GJXAIOU",[[-1,351,"----------"]],[361,361],[351,351]]],[1533167604780,["gjx16@GJXAIOU",[[1,351,"---"]],[351,351],[354,354]]],[1533167618613,["gjx16@GJXAIOU",[[-1,393,"算法简化；"]],[398,398],[393,393]]],[1533167619247,["gjx16@GJXAIOU",[[-1,394,"\n"]],[393,393],[392,392]]],[1533167638283,["gjx16@GJXAIOU",[[1,370,"1.**"]],[370,370],[374,374]]],[1533167643479,["gjx16@GJXAIOU",[[1,374,"**概念："]],[374,374],[377,377]]],[1533167645432,["gjx16@GJXAIOU",[[1,379," "]],[379,379],[380,380]]],[1533167650644,["gjx16@GJXAIOU",[[-1,403,"\n"]],[403,403],[402,402]]],[1533167651272,["gjx16@GJXAIOU",[[-1,402,"\n"]],[402,402],[401,401]]],[1533167652860,["gjx16@GJXAIOU",[[1,402,"\n"]],[401,401],[402,402]]],[1533167714231,[null,[[-1,374,"**"],[1,379,"**"]],[374,374],[381,381]]],[1533167714231,[null,[[1,374,"**"],[-1,377,"**"]],[381,381],[374,374]]],[1533167656291,["gjx16@GJXAIOU",[[-1,403,"1"]],[404,404],[403,403]]],[1533167656984,["gjx16@GJXAIOU",[[1,403,"2"]],[403,403],[404,404]]],[1533167660008,["gjx16@GJXAIOU",[[-1,460,"2"]],[461,461],[460,460]]],[1533167660242,["gjx16@GJXAIOU",[[1,460,"3"]],[460,460],[461,461]]],[1533167675027,["gjx16@GJXAIOU",[[1,505,"---"]],[505,505],[508,508]]],[1533167702901,["gjx16@GJXAIOU",[[-1,764,"      "]],[770,770],[764,764]]],[1533167703556,["gjx16@GJXAIOU",[[-1,763,"\n"]],[764,764],[763,763]]],[1533167705449,["gjx16@GJXAIOU",[[-1,758,"     "]],[763,763],[758,758]]],[1533167709812,["gjx16@GJXAIOU",[[1,769," "]],[769,769],[770,770]]],[1533167713580,["gjx16@GJXAIOU",[[1,765," "]],[765,765],[766,766]]],[1533167774244,[null,[[-1,374,"**"],[1,379,"**"]],[374,374],[381,381]]],[1533167774244,[null,[[1,374,"**"],[-1,377,"**"]],[381,381],[374,374]]],[1533167718794,["gjx16@GJXAIOU",[[-1,757,"  "]],[759,759],[757,757]]],[1533167719834,["gjx16@GJXAIOU",[[-1,756,"\n"]],[757,757],[756,756]]],[1533167721959,["gjx16@GJXAIOU",[[1,756,"\n"]],[756,756],[757,757]]],[1533167737495,["gjx16@GJXAIOU",[[1,757,"      "]],[757,757],[763,763]]],[1533167761035,["gjx16@GJXAIOU",[[-1,757,"      ** PS: **   "]],[775,775],[757,757]]],[1533167761520,["gjx16@GJXAIOU",[[-1,756,"\n"]],[757,757],[756,756]]],[1533167763390,["gjx16@GJXAIOU",[[1,756,"\n"]],[756,756],[757,757]]],[1533167772811,["gjx16@GJXAIOU",[[1,757,"    ****"]],[757,757],[765,765]]],[1533167834258,[null,[[-1,374,"**"],[1,379,"**"]],[374,374],[381,381]]],[1533167834258,[null,[[1,374,"**"],[-1,377,"**"]],[381,381],[374,374]]],[1533167779524,["gjx16@GJXAIOU",[[-1,758,"   ****"]],[765,765],[758,758]]],[1533167780905,["gjx16@GJXAIOU",[[1,758,"**"]],[758,758],[760,760]]],[1533167788787,["gjx16@GJXAIOU",[[1,760,"**PS："]],[760,760],[763,763]]],[1533167793735,["gjx16@GJXAIOU",[[1,765," "]],[765,765],[766,766]]],[1533167810697,["gjx16@GJXAIOU",[[-1,838,"    "]],[842,842],[838,838]]],[1533167811300,["gjx16@GJXAIOU",[[-1,837,"\n"]],[838,838],[837,837]]],[1533167812856,["gjx16@GJXAIOU",[[1,837,"\n"]],[837,837],[838,838]]],[1533167817941,["gjx16@GJXAIOU",[[1,838,"    "]],[838,838],[842,842]]],[1533167822512,["gjx16@GJXAIOU",[[1,838,"\n"]],[837,837],[838,838]]],[1533167825793,["gjx16@GJXAIOU",[[-1,871,"    "],[1,875,"\n"]],[875,875],[872,872]]],[1533167830040,["gjx16@GJXAIOU",[[-1,872,"\n"]],[872,872],[871,871]]],[1533167830540,["gjx16@GJXAIOU",[[-1,871,"\n"]],[871,871],[870,870]]],[1533167894259,[null,[[-1,374,"**"],[1,379,"**"],[-1,760,"**"],[1,765,"**"]],[374,374],[767,767]]],[1533167894259,[null,[[1,374,"**"],[-1,377,"**"],[1,760,"**"],[-1,763,"**"]],[767,767],[374,374]]],[1533167839641,["gjx16@GJXAIOU",[[-1,558,"    "]],[562,562],[558,558]]],[1533167841069,["gjx16@GJXAIOU",[[-1,557,"\n"]],[558,558],[557,557]]],[1533167842204,["gjx16@GJXAIOU",[[1,557,"\n"]],[557,557],[558,558]]],[1533167844097,["gjx16@GJXAIOU",[[1,558,"    "]],[558,558],[562,562]]],[1533167850913,["gjx16@GJXAIOU",[[-1,839,"    "]],[843,843],[839,839]]],[1533167851922,["gjx16@GJXAIOU",[[-1,838,"\n"]],[839,839],[838,838]]],[1533167853061,["gjx16@GJXAIOU",[[1,838,"\n"]],[838,838],[839,839]]],[1533167854151,["gjx16@GJXAIOU",[[1,839,"    "]],[839,839],[843,843]]],[1533167857775,["gjx16@GJXAIOU",[[-1,842," "]],[843,843],[842,842]]],[1533167861273,["gjx16@GJXAIOU",[[-1,561," "]],[562,562],[561,561]]],[1533167889040,["gjx16@GJXAIOU",[[-1,843,"那么如何"]],[847,847],[843,843]]],[1533167954274,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"]],[374,374],[766,766]]],[1533167954274,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"]],[766,766],[374,374]]],[1533167896253,["gjx16@GJXAIOU",[[-1,855,"呢?步骤如下："]],[862,862],[855,855]]],[1533167900077,["gjx16@GJXAIOU",[[1,855,"步骤："]],[855,855],[858,858]]],[1533167922386,["gjx16@GJXAIOU",[[1,1030,"     \n "]],[1030,1030],[1037,1037]]],[1533167930222,["gjx16@GJXAIOU",[[-1,1014," "]],[1015,1015],[1014,1014]]],[1533168014265,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"]],[374,374],[1034,1034]]],[1533168014265,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"]],[1034,1034],[374,374]]],[1533167962924,["gjx16@GJXAIOU",[[-1,4496,"\n"]],[4484,4484],[4483,4483]]],[1533167964133,["gjx16@GJXAIOU",[[-1,4475,"        "]],[4483,4483],[4475,4475]]],[1533167964295,["gjx16@GJXAIOU",[[-1,4487,"\n"]],[4475,4475],[4474,4474]]],[1533167965359,["gjx16@GJXAIOU",[[-1,4466,"        "]],[4474,4474],[4466,4466]]],[1533167965527,["gjx16@GJXAIOU",[[-1,4478,"\n"]],[4466,4466],[4465,4465]]],[1533167966442,["gjx16@GJXAIOU",[[-1,4457,"        "]],[4465,4465],[4457,4457]]],[1533167966487,["gjx16@GJXAIOU",[[-1,4469,"\n"]],[4457,4457],[4456,4456]]],[1533167966540,["gjx16@GJXAIOU",[[-1,4468,"\n"]],[4456,4456],[4455,4455]]],[1533167966586,["gjx16@GJXAIOU",[[-1,4467,"\n"]],[4455,4455],[4454,4454]]],[1533167967457,["gjx16@GJXAIOU",[[-1,4445,"         "]],[4454,4454],[4445,4445]]],[1533167967561,["gjx16@GJXAIOU",[[-1,4457,"\n"]],[4445,4445],[4444,4444]]],[1533167970254,["gjx16@GJXAIOU",[[-1,4436,"        "]],[4444,4444],[4436,4436]]],[1533167970454,["gjx16@GJXAIOU",[[-1,4448,"\n"]],[4436,4436],[4435,4435]]],[1533167971306,["gjx16@GJXAIOU",[[-1,4431,"----"]],[4435,4435],[4431,4431]]],[1533167971504,["gjx16@GJXAIOU",[[-1,4443,"\n"]],[4431,4431],[4430,4430]]],[1533167973100,["gjx16@GJXAIOU",[[-1,4422,"第八讲结束   "]],[4430,4430],[4422,4422]]],[1533167973285,["gjx16@GJXAIOU",[[-1,4434,"\n"]],[4422,4422],[4421,4421]]],[1533167974885,["gjx16@GJXAIOU",[[-1,4417,"----"]],[4421,4421],[4417,4417]]],[1533167975051,["gjx16@GJXAIOU",[[-1,4429,"\n"]],[4417,4417],[4416,4416]]],[1533167976269,["gjx16@GJXAIOU",[[-1,4408,"        "]],[4416,4416],[4408,4408]]],[1533167976404,["gjx16@GJXAIOU",[[-1,4420,"\n"]],[4408,4408],[4407,4407]]],[1533167977636,["gjx16@GJXAIOU",[[-1,4399,"        "]],[4407,4407],[4399,4399]]],[1533167977769,["gjx16@GJXAIOU",[[-1,4411,"\n"]],[4399,4399],[4398,4398]]],[1533167977902,["gjx16@GJXAIOU",[[-1,4397," "]],[4398,4398],[4397,4397]]],[1533167980375,["gjx16@GJXAIOU",[[-1,4409,"\n"]],[4407,4407],[4406,4406]]],[1533167980538,["gjx16@GJXAIOU",[[-1,4408,"\n"]],[4406,4406],[4405,4405]]],[1533167980682,["gjx16@GJXAIOU",[[-1,4407,"\n"]],[4405,4405],[4404,4404]]],[1533167980832,["gjx16@GJXAIOU",[[-1,4406,"\n"]],[4404,4404],[4403,4403]]],[1533167980966,["gjx16@GJXAIOU",[[-1,4405,"\n"]],[4403,4403],[4402,4402]]],[1533167981239,["gjx16@GJXAIOU",[[-1,4404,"\n"]],[4402,4402],[4401,4401]]],[1533167981399,["gjx16@GJXAIOU",[[-1,4403,"\n"]],[4401,4401],[4400,4400]]],[1533167981536,["gjx16@GJXAIOU",[[-1,4402,"\n"]],[4400,4400],[4399,4399]]],[1533167981666,["gjx16@GJXAIOU",[[-1,4401,"\n"]],[4399,4399],[4398,4398]]],[1533167981814,["gjx16@GJXAIOU",[[-1,4400,"\n"]],[4398,4398],[4397,4397]]],[1533167982929,["gjx16@GJXAIOU",[[-1,4390,"       "]],[4397,4397],[4390,4390]]],[1533167983064,["gjx16@GJXAIOU",[[-1,4392,"\n"]],[4390,4390],[4389,4389]]],[1533167984545,["gjx16@GJXAIOU",[[-1,4381,"        "]],[4389,4389],[4381,4381]]],[1533167984725,["gjx16@GJXAIOU",[[-1,4383,"\n"]],[4381,4381],[4380,4380]]],[1533167986258,["gjx16@GJXAIOU",[[-1,4372,"        "]],[4380,4380],[4372,4372]]],[1533167986378,["gjx16@GJXAIOU",[[-1,4374,"\n"]],[4372,4372],[4371,4371]]],[1533167986712,["gjx16@GJXAIOU",[[-1,4369,"  "]],[4371,4371],[4369,4369]]],[1533167992334,["gjx16@GJXAIOU",[[1,4385,"  "]],[4385,4385],[4387,4387]]],[1533167993613,["gjx16@GJXAIOU",[[-1,4386," "]],[4387,4387],[4386,4386]]],[1533167994035,["gjx16@GJXAIOU",[[-1,4385," "],[1,4386,"\n"]],[4386,4386],[4386,4386]]],[1533168374308,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"]],[374,374],[1034,1034]]],[1533168374308,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"]],[1034,1034],[374,374]]],[1533168358073,["gjx16@GJXAIOU",[[1,4369,"- "]],[4369,4369],[4371,4371]]],[1533168366635,["gjx16@GJXAIOU",[[-1,4363,"      - "]],[4371,4371],[4363,4363]]],[1533168367136,["gjx16@GJXAIOU",[[-1,4365,"\n"]],[4363,4363],[4362,4362]]],[1533168368889,["gjx16@GJXAIOU",[[-1,4354,"        "],[1,4362,"\n"]],[4362,4362],[4355,4355]]],[1533168373877,["gjx16@GJXAIOU",[[1,4355,"    -"]],[4355,4355],[4360,4360]]],[1533168434308,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"]],[374,374],[1034,1034]]],[1533168434308,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"]],[1034,1034],[374,374]]],[1533168392721,["gjx16@GJXAIOU",[[1,4360," 删除操作：       - \n"]],[4360,4360],[4376,4376]]],[1533168396313,["gjx16@GJXAIOU",[[-1,4374,"- "]],[4376,4376],[4374,4374]]],[1533168402197,["gjx16@GJXAIOU",[[1,4374,"  "]],[4374,4374],[4376,4376]]],[1533168494312,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4369,"\n"],[-1,4373,"-"]],[374,374],[4373,4373]]],[1533168494312,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4369,"\n"],[1,4374,"-"]],[4373,4373],[374,374]]],[1533168438531,["gjx16@GJXAIOU",[[1,4376,"      –如果删除位置不合理，抛出异常；\n\n–取出删除元素；\n\n–从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n\n–表长-1。"]],[4373,4373],[4452,4452]]],[1533168444517,["gjx16@GJXAIOU",[[-1,4377,"  –"]],[4380,4380],[4377,4377]]],[1533168447310,["gjx16@GJXAIOU",[[-1,4394,"–"]],[4395,4395],[4394,4394]]],[1533168448256,["gjx16@GJXAIOU",[[-1,4393,"\n"]],[4394,4394],[4393,4393]]],[1533168452375,["gjx16@GJXAIOU",[[-1,4402,"–"]],[4403,4403],[4402,4402]]],[1533168455759,["gjx16@GJXAIOU",[[-1,4440,"–"]],[4441,4441],[4440,4440]]],[1533168466976,["gjx16@GJXAIOU",[[1,4393,"      "]],[4393,4393],[4399,4399]]],[1533168468672,["gjx16@GJXAIOU",[[1,4408,"    "]],[4408,4408],[4412,4412]]],[1533168471979,["gjx16@GJXAIOU",[[-1,4407,"\n"]],[4407,4407],[4406,4406]]],[1533168476095,["gjx16@GJXAIOU",[[-1,4448,"\n"]],[4449,4449],[4448,4448]]],[1533168476368,["gjx16@GJXAIOU",[[-1,4447,"\n"]],[4448,4448],[4447,4447]]],[1533168478490,["gjx16@GJXAIOU",[[1,4447,"\n    "]],[4447,4447],[4452,4452]]],[1533168482262,["gjx16@GJXAIOU",[[1,4377,"1."]],[4377,4377],[4379,4379]]],[1533168486597,["gjx16@GJXAIOU",[[1,4401,"2. "]],[4401,4401],[4404,4404]]],[1533168490240,["gjx16@GJXAIOU",[[-1,4403," "]],[4404,4404],[4403,4403]]],[1533168493704,["gjx16@GJXAIOU",[[1,4401," "]],[4401,4401],[4402,4402]]],[1533168554319,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4369,"\n"],[-1,4373,"-"],[-1,4379,"  –"],[1,4395,"常；\n"],[-1,4404,"\n\n–"],[1,4412,"素；\n"],[-1,4416,"\n\n–"],[1,4452,"位置；"],[-1,4457,"\n\n–"],[1,4465,"   "]],[374,374],[4468,4468]]],[1533168554319,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4369,"\n"],[1,4374,"-"],[1,4379,"  –"],[-1,4392,"常；\n"],[1,4404,"\n\n–"],[-1,4409,"素；\n"],[1,4416,"\n\n–"],[-1,4449,"位置；"],[1,4457,"\n\n–"],[-1,4462,"   "]],[4468,4468],[374,374]]],[1533168498778,["gjx16@GJXAIOU",[[1,4416,"   3."]],[4416,4416],[4421,4421]]],[1533168501541,["gjx16@GJXAIOU",[[1,4462,"22"]],[4462,4462],[4464,4464]]],[1533168503368,["gjx16@GJXAIOU",[[-1,4461," 22"]],[4464,4464],[4461,4461]]],[1533168509122,["gjx16@GJXAIOU",[[1,4461,"     4."]],[4461,4461],[4468,4468]]],[1533168734319,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4369,"\n"],[-1,4373,"-"],[-1,4379,"  –"],[1,4395,"常；\n"],[-1,4404,"\n\n–"],[1,4412,"素；\n"],[-1,4421,"\n\n–"],[1,4457,"位置；"],[-1,4468,"\n\n–"],[1,4476,"   "]],[374,374],[4479,4479]]],[1533168734319,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4369,"\n"],[1,4374,"-"],[1,4379,"  –"],[-1,4392,"常；\n"],[1,4404,"\n\n–"],[-1,4409,"素；\n"],[1,4421,"\n\n–"],[-1,4454,"位置；"],[1,4468,"\n\n–"],[-1,4473,"   "]],[4479,4479],[374,374]]],[1533168703355,["gjx16@GJXAIOU",[[1,4477,"**"]],[4477,4477],[4479,4479]]],[1533168708829,["gjx16@GJXAIOU",[[1,4479,"**时间复杂度"]],[4479,4479],[4484,4484]]],[1533168712068,["gjx16@GJXAIOU",[[-1,4479,"时间复杂度"]],[4484,4484],[4479,4479]]],[1533168715198,["gjx16@GJXAIOU",[[1,4479,"PS："]],[4479,4479],[4482,4482]]],[1533168724951,["gjx16@GJXAIOU",[[1,4484,"时间复杂度为o"]],[4484,4484],[4491,4491]]],[1533168727945,["gjx16@GJXAIOU",[[-1,4490,"o"]],[4491,4491],[4490,4490]]],[1533168730425,["gjx16@GJXAIOU",[[1,4490,"O()"]],[4490,4490],[4493,4493]]],[1533168732244,["gjx16@GJXAIOU",[[1,4492,"1"]],[4492,4492],[4493,4493]]],[1533168794335,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4369,"\n"],[-1,4373,"-"],[-1,4379,"  –"],[1,4395,"常；\n"],[-1,4404,"\n\n–"],[1,4412,"素；\n"],[-1,4421,"\n\n–"],[1,4457,"位置；"],[-1,4468,"\n\n–"],[1,4476,"   "],[-1,4482,"杂度"],[1,4484,"**"]],[374,374],[4486,4486]]],[1533168794335,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4369,"\n"],[1,4374,"-"],[1,4379,"  –"],[-1,4392,"常；\n"],[1,4404,"\n\n–"],[-1,4409,"素；\n"],[1,4421,"\n\n–"],[-1,4454,"位置；"],[1,4468,"\n\n–"],[-1,4473,"   "],[1,4482,"杂度"],[-1,4482,"**"]],[4486,4486],[374,374]]],[1533168738346,["gjx16@GJXAIOU",[[1,4494,"~O()"]],[4494,4494],[4498,4498]]],[1533168739915,["gjx16@GJXAIOU",[[1,4497,"n"]],[4497,4497],[4498,4498]]],[1533168749180,["gjx16@GJXAIOU",[[1,4499,",fen"]],[4499,4499],[4503,4503]]],[1533168750209,["gjx16@GJXAIOU",[[-1,4500,"fen"]],[4503,4503],[4500,4500]]],[1533168755228,["gjx16@GJXAIOU",[[1,4500,"分别表示"]],[4500,4500],[4504,4504]]],[1533168764173,["gjx16@GJXAIOU",[[-1,4490,"O(1)~"]],[4495,4495],[4490,4490]]],[1533168778935,["gjx16@GJXAIOU",[[-1,4494,",分别表示"]],[4499,4499],[4494,4494]]],[1533168787687,["gjx16@GJXAIOU",[[1,4355,"\n"]],[4354,4354],[4355,4355]]],[1533168788164,["gjx16@GJXAIOU",[[1,4355,"**PS：**时间复杂度为O(n)"]],[4355,4355],[4372,4372]]],[1533168790975,["gjx16@GJXAIOU",[[1,4373,"\n"]],[4372,4372],[4373,4373]]],[1533168854322,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4388,"\n"],[-1,4392,"-"],[-1,4398,"  –"],[1,4414,"常；\n"],[-1,4423,"\n\n–"],[1,4431,"素；\n"],[-1,4440,"\n\n–"],[1,4476,"位置；"],[-1,4487,"\n\n–"],[1,4495,"   "],[-1,4501,"杂度"],[1,4503,"**"]],[374,374],[4505,4505]]],[1533168854322,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4388,"\n"],[1,4393,"-"],[1,4398,"  –"],[-1,4411,"常；\n"],[1,4423,"\n\n–"],[-1,4428,"素；\n"],[1,4440,"\n\n–"],[-1,4473,"位置；"],[1,4487,"\n\n–"],[-1,4492,"   "],[1,4501,"杂度"],[-1,4501,"**"]],[4505,4505],[374,374]]],[1533168804882,["gjx16@GJXAIOU",[[1,4515,"\n"]],[4514,4514],[4515,4515]]],[1533168805059,["gjx16@GJXAIOU",[[1,4516,"\n"]],[4515,4515],[4516,4516]]],[1533168807271,["gjx16@GJXAIOU",[[1,4517,"\n"]],[4516,4516],[4517,4517]]],[1533168813990,["gjx16@GJXAIOU",[[1,4517,"- 总结   \n- "]],[4517,4517],[4527,4527]]],[1533168816604,["gjx16@GJXAIOU",[[-1,4525,"- "]],[4527,4527],[4525,4525]]],[1533168838594,["gjx16@GJXAIOU",[[1,4525,"•优点：\n\n–无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n\n–可以快速地存取表中任意位置的元素。\n\n•缺点：\n\n–插入和删除操作需要移动大量元素。\n\n–当线性表长度变化较大时，难以确定存储空间的容量。\n\n容易造成存储空间的“碎片”"]],[4525,4525],[4646,4646]]],[1533168842815,["gjx16@GJXAIOU",[[-1,4525,"•"]],[4526,4526],[4525,4525]]],[1533168845329,["gjx16@GJXAIOU",[[1,4525,"- "]],[4525,4525],[4527,4527]]],[1533168846898,["gjx16@GJXAIOU",[[1,4525,"  "]],[4526,4526],[4528,4528]]],[1533168851539,["gjx16@GJXAIOU",[[-1,4534,"–"]],[4535,4535],[4534,4534]]],[1533168914325,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4388,"\n"],[-1,4392,"-"],[-1,4398,"  –"],[1,4414,"常；\n"],[-1,4423,"\n\n–"],[1,4431,"素；\n"],[-1,4440,"\n\n–"],[1,4476,"位置；"],[-1,4487,"\n\n–"],[1,4495,"   "],[-1,4501,"杂度"],[1,4503,"**"]],[374,374],[4505,4505]]],[1533168914325,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4388,"\n"],[1,4393,"-"],[1,4398,"  –"],[-1,4411,"常；\n"],[1,4423,"\n\n–"],[-1,4428,"素；\n"],[1,4440,"\n\n–"],[-1,4473,"位置；"],[1,4487,"\n\n–"],[-1,4492,"   "],[1,4501,"杂度"],[-1,4501,"**"]],[4505,4505],[374,374]]],[1533168854852,["gjx16@GJXAIOU",[[-1,4563,"–"]],[4564,4564],[4563,4563]]],[1533168873526,["gjx16@GJXAIOU",[[-1,4582,"•"]],[4583,4583],[4582,4582]]],[1533168874172,["gjx16@GJXAIOU",[[1,4582,"- "]],[4582,4582],[4584,4584]]],[1533168877097,["gjx16@GJXAIOU",[[1,4582,"  "]],[4582,4582],[4584,4584]]],[1533168883068,["gjx16@GJXAIOU",[[-1,4591,"–"]],[4592,4592],[4591,4591]]],[1533168885377,["gjx16@GJXAIOU",[[-1,4609,"–"]],[4610,4610],[4609,4609]]],[1533168898082,["gjx16@GJXAIOU",[[1,4648,"     "]],[4648,4648],[4653,4653]]],[1533168898343,["gjx16@GJXAIOU",[[1,4654,"\n"]],[4653,4653],[4654,4654]]],[1533168899240,["gjx16@GJXAIOU",[[1,4655,"\n"]],[4654,4654],[4655,4655]]],[1533168904930,["gjx16@GJXAIOU",[[-1,4533,"\n"]],[4533,4533],[4532,4532]]],[1533168910022,["gjx16@GJXAIOU",[[1,4567,"1"]],[4567,4567],[4568,4568]]],[1533168912313,["gjx16@GJXAIOU",[[-1,4567,"1"]],[4568,4568],[4567,4567]]],[1533168974331,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4388,"\n"],[-1,4392,"-"],[-1,4398,"  –"],[1,4414,"常；\n"],[-1,4423,"\n\n–"],[1,4431,"素；\n"],[-1,4440,"\n\n–"],[1,4476,"位置；"],[-1,4487,"\n\n–"],[1,4495,"   "],[-1,4501,"杂度"],[1,4503,"**"]],[374,374],[4505,4505]]],[1533168974331,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4388,"\n"],[1,4393,"-"],[1,4398,"  –"],[-1,4411,"常；\n"],[1,4423,"\n\n–"],[-1,4428,"素；\n"],[1,4440,"\n\n–"],[-1,4473,"位置；"],[1,4487,"\n\n–"],[-1,4492,"   "],[1,4501,"杂度"],[-1,4501,"**"]],[4505,4505],[374,374]]],[1533168914746,["gjx16@GJXAIOU",[[1,4561,"、"]],[4561,4561],[4562,4562]]],[1533168915773,["gjx16@GJXAIOU",[[-1,4561,"、"]],[4562,4562],[4561,4561]]],[1533168915998,["gjx16@GJXAIOU",[[-1,4561,"\n"]],[4561,4561],[4560,4560]]],[1533168920373,["gjx16@GJXAIOU",[[-1,4588,"\n"]],[4588,4588],[4587,4587]]],[1533168924140,["gjx16@GJXAIOU",[[-1,4605,"\n"]],[4605,4605],[4604,4604]]],[1533168926734,["gjx16@GJXAIOU",[[-1,4630,"\n"]],[4630,4630],[4629,4629]]],[1533168936102,["gjx16@GJXAIOU",[[1,4588,"1."]],[4588,4588],[4590,4590]]],[1533168940534,["gjx16@GJXAIOU",[[1,4607,"2."]],[4607,4607],[4609,4609]]],[1533168945040,["gjx16@GJXAIOU",[[1,4634,"3."]],[4634,4634],[4636,4636]]],[1533168953048,["gjx16@GJXAIOU",[[1,4533,"1."]],[4533,4533],[4535,4535]]],[1533168957117,["gjx16@GJXAIOU",[[1,4563,"2，"]],[4563,4563],[4565,4565]]],[1533168958677,["gjx16@GJXAIOU",[[-1,4564,"，"]],[4565,4565],[4564,4564]]],[1533168959006,["gjx16@GJXAIOU",[[1,4564,",。"]],[4564,4564],[4566,4566]]],[1533168960571,["gjx16@GJXAIOU",[[-1,4564,",。"]],[4566,4566],[4564,4564]]],[1533168961603,["gjx16@GJXAIOU",[[1,4564,"。"]],[4564,4564],[4565,4565]]],[1533168962724,["gjx16@GJXAIOU",[[-1,4564,"。"]],[4565,4565],[4564,4564]]],[1533168963234,["gjx16@GJXAIOU",[[1,4564,"."]],[4564,4564],[4565,4565]]],[1533169034327,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[1,4388,"\n"],[-1,4392,"-"],[-1,4398,"  –"],[1,4414,"常；\n"],[-1,4423,"\n\n–"],[1,4431,"素；\n"],[-1,4440,"\n\n–"],[1,4476,"位置；"],[-1,4487,"\n\n–"],[1,4495,"   "],[-1,4501,"杂度"],[1,4503,"**"]],[374,374],[4505,4505]]],[1533169034327,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[-1,4388,"\n"],[1,4393,"-"],[1,4398,"  –"],[-1,4411,"常；\n"],[1,4423,"\n\n–"],[-1,4428,"素；\n"],[1,4440,"\n\n–"],[-1,4473,"位置；"],[1,4487,"\n\n–"],[-1,4492,"   "],[1,4501,"杂度"],[-1,4501,"**"]],[4505,4505],[374,374]]],[1533168980573,["gjx16@GJXAIOU",[[1,4393,"- \n    "]],[4388,4388],[4395,4395]]],[1533168986671,["gjx16@GJXAIOU",[[-1,4393,"- "]],[4395,4395],[4393,4393]]],[1533168999012,["gjx16@GJXAIOU",[[-1,4374,"    "]],[4378,4378],[4374,4374]]],[1533169000273,["gjx16@GJXAIOU",[[-1,4373,"\n"]],[4374,4374],[4373,4373]]],[1533169003684,["gjx16@GJXAIOU",[[1,4373,"    "]],[4373,4373],[4377,4377]]],[1533169012024,["gjx16@GJXAIOU",[[-1,4388,"    "]],[4392,4392],[4388,4388]]],[1533169014208,["gjx16@GJXAIOU",[[-1,4388,"\n"]],[4388,4388],[4387,4387]]],[1533169019320,["gjx16@GJXAIOU",[[1,4372,"  "]],[4372,4372],[4374,4374]]],[1533169019668,["gjx16@GJXAIOU",[[1,4375,"\n"]],[4374,4374],[4375,4375]]],[1533169027133,["gjx16@GJXAIOU",[[-1,4354,"\n"]],[4354,4354],[4353,4353]]],[1533169028658,["gjx16@GJXAIOU",[[1,4354,"        \n"]],[4353,4353],[4362,4362]]],[1533169031336,["gjx16@GJXAIOU",[[1,4505,"  \n        "]],[4503,4503],[4514,4514]]],[1533169094330,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4398," "],[1,4399,"\n"],[-1,4408,"  –"],[1,4424,"常；\n"],[-1,4433,"\n\n–"],[1,4441,"素；\n"],[-1,4450,"\n\n–"],[1,4486,"位置；"],[-1,4497,"\n\n–"],[1,4507," "],[1,4508,"  "],[-1,4522,"杂度"],[1,4524,"**"]],[374,374],[4526,4526]]],[1533169094330,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4398," "],[-1,4398,"\n"],[1,4408,"  –"],[-1,4421,"常；\n"],[1,4433,"\n\n–"],[-1,4438,"素；\n"],[1,4450,"\n\n–"],[-1,4483,"位置；"],[1,4497,"\n\n–"],[-1,4504," "],[-1,4506,"  "],[1,4522,"杂度"],[-1,4522,"**"]],[4526,4526],[374,374]]],[1533169038485,["gjx16@GJXAIOU",[[-1,4384,"    - "]],[4384,4390],[4384,4384]]],[1533169038609,["gjx16@GJXAIOU",[[-1,4383,"\n"]],[4384,4384],[4383,4383]]],[1533169040475,["gjx16@GJXAIOU",[[1,4383,"\n"]],[4383,4383],[4384,4384]]],[1533169043044,["gjx16@GJXAIOU",[[1,4384,"- "]],[4384,4384],[4386,4386]]],[1533169050245,["gjx16@GJXAIOU",[[1,4384,"    "]],[4384,4384],[4388,4388]]],[1533169054701,["gjx16@GJXAIOU",[[1,4398,"  \n    "]],[4397,4397],[4404,4404]]],[1533169274334,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"]],[374,374],[4533,4533]]],[1533169274334,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"]],[4533,4533],[374,374]]],[1533169260129,["gjx16@GJXAIOU",[[1,4702,"- tedian"]],[4702,4702],[4710,4710]]],[1533169261680,["gjx16@GJXAIOU",[[-1,4704,"tedian"]],[4710,4710],[4704,4704]]],[1533169264699,["gjx16@GJXAIOU",[[1,4704,"特点"]],[4704,4704],[4706,4706]]],[1533169267544,["gjx16@GJXAIOU",[[1,4702,"  "]],[4702,4702],[4704,4704]]],[1533169274132,["gjx16@GJXAIOU",[[1,4709,"  "]],[4709,4709],[4711,4711]]],[1533169334333,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"]],[374,374],[4533,4533]]],[1533169334333,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"]],[4533,4533],[374,374]]],[1533169295071,["gjx16@GJXAIOU",[[1,4711,"    是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。         \n- "]],[4711,4711],[4772,4772]]],[1533169301728,["gjx16@GJXAIOU",[[-1,4768,"  - "]],[4772,4772],[4768,4768]]],[1533169303173,["gjx16@GJXAIOU",[[1,4768,"- "]],[4768,4768],[4770,4770]]],[1533169304973,["gjx16@GJXAIOU",[[-1,4766,"  - "]],[4770,4770],[4766,4766]]],[1533169305920,["gjx16@GJXAIOU",[[1,4766,"- "]],[4766,4766],[4768,4768]]],[1533169310531,["gjx16@GJXAIOU",[[1,4766," "]],[4766,4766],[4767,4767]]],[1533169312499,["gjx16@GJXAIOU",[[-1,4766," "]],[4767,4767],[4766,4766]]],[1533169394337,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4763," "],[1,4764,"\n"]],[374,374],[4765,4765]]],[1533169394337,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4763," "],[-1,4763,"\n"]],[4765,4765],[374,374]]],[1533169349853,["gjx16@GJXAIOU",[[1,4701,"   - \n"]],[4701,4701],[4707,4707]]],[1533169351420,["gjx16@GJXAIOU",[[-1,4705,"- "]],[4707,4707],[4705,4705]]],[1533169380207,["gjx16@GJXAIOU",[[1,4705,"每个元素多用一个位置存放下一个元素"]],[4705,4705],[4722,4722]]],[1533169454337,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4784," "],[1,4785,"\n"]],[374,374],[4786,4786]]],[1533169454337,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4784," "],[-1,4784,"\n"]],[4786,4786],[374,374]]],[1533169405669,["gjx16@GJXAIOU",[[1,4722,"的位置的指针；"]],[4722,4722],[4729,4729]]],[1533169514339,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"]],[374,374],[4793,4793]]],[1533169514339,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"]],[4793,4793],[374,374]]],[1533169510731,["gjx16@GJXAIOU",[[1,4796,"定义     - \n"]],[4796,4796],[4806,4806]]],[1533169513596,["gjx16@GJXAIOU",[[-1,4804,"- "]],[4806,4806],[4804,4804]]],[1533169574341,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"]],[374,374],[4803,4803]]],[1533169574341,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"]],[4803,4803],[374,374]]],[1533169529315,["gjx16@GJXAIOU",[[1,4804,"  •把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称为指针或链。这两部分信息组成数据元素称为存储映像，称为结点(Node)。\n\n•n个结点链接成一个链表，即为线性表(a1, a2, a3, …, an)的链式存储结构。\n\n因为此链表的每个结点中只包含一个指针域，所以叫做单链表。"]],[4804,4804],[4964,4964]]],[1533169533057,["gjx16@GJXAIOU",[[-1,4806,"•"]],[4807,4807],[4806,4806]]],[1533169543690,["gjx16@GJXAIOU",[[1,4806,"数据域："]],[4806,4806],[4810,4810]]],[1533169549901,["gjx16@GJXAIOU",[[-1,4821,"称为数据域，"]],[4821,4827],[4821,4821]]],[1533169551235,["gjx16@GJXAIOU",[[1,4821,"\n    "]],[4821,4821],[4826,4826]]],[1533169634340,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"]],[374,374],[4803,4803]]],[1533169634340,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"]],[4803,4803],[374,374]]],[1533169602390,["gjx16@GJXAIOU",[[1,4806,"**"]],[4806,4806],[4808,4808]]],[1533169606405,["gjx16@GJXAIOU",[[1,4808,"**数据域"]],[4808,4808],[4811,4811]]],[1533169610538,["gjx16@GJXAIOU",[[-1,4813,"数据域："]],[4817,4817],[4813,4813]]],[1533169612936,["gjx16@GJXAIOU",[[1,4811,"："]],[4811,4811],[4812,4812]]],[1533169621291,["gjx16@GJXAIOU",[[-1,4814,"把"]],[4815,4815],[4814,4814]]],[1533169627647,["gjx16@GJXAIOU",[[1,4829,"**"]],[4829,4829],[4831,4831]]],[1533169633082,["gjx16@GJXAIOU",[[1,4831,"**指针域："]],[4831,4831],[4835,4835]]],[1533169694343,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4831,"**"],[1,4837,"**"]],[374,374],[4839,4839]]],[1533169694343,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4831,"**"],[-1,4835,"**"]],[4839,4839],[374,374]]],[1533169636684,["gjx16@GJXAIOU",[[-1,4837,"把"]],[4838,4838],[4837,4837]]],[1533169644297,["gjx16@GJXAIOU",[[-1,4847,"称为指针域。"]],[4853,4853],[4847,4847]]],[1533169646486,["gjx16@GJXAIOU",[[1,4847,"\n    "]],[4847,4847],[4852,4852]]],[1533169652774,["gjx16@GJXAIOU",[[-1,4863,"指针或链"]],[4863,4867],[4863,4863]]],[1533169656306,["gjx16@GJXAIOU",[[1,4852,"**"]],[4852,4852],[4854,4854]]],[1533169660231,["gjx16@GJXAIOU",[[1,4854,"**指针或链："]],[4854,4854],[4859,4859]]],[1533169667996,["gjx16@GJXAIOU",[[-1,4870,"称为。"]],[4870,4872],[4870,4870]]],[1533169672417,["gjx16@GJXAIOU",[[1,4870,"\n    "]],[4870,4870],[4875,4875]]],[1533169754346,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4831,"**"],[1,4837,"**"],[-1,4854,"**"],[1,4861,"**"]],[374,374],[4863,4863]]],[1533169754346,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4831,"**"],[-1,4835,"**"],[1,4854,"**"],[-1,4859,"**"]],[4863,4863],[374,374]]],[1533169698781,["gjx16@GJXAIOU",[[-1,4887,"称为存储映像，称为结点(Node)。"]],[4887,4905],[4887,4887]]],[1533169702798,["gjx16@GJXAIOU",[[1,4875,"**"]],[4875,4875],[4877,4877]]],[1533169704278,["gjx16@GJXAIOU",[[1,4877,"**称为存储映像，称为结点(Node)。"]],[4877,4877],[4895,4895]]],[1533169707337,["gjx16@GJXAIOU",[[-1,4877,"称为"]],[4879,4879],[4877,4877]]],[1533169712499,["gjx16@GJXAIOU",[[-1,4881,"，称为"]],[4884,4884],[4881,4881]]],[1533169714166,["gjx16@GJXAIOU",[[1,4881,"或"]],[4881,4881],[4882,4882]]],[1533169720435,["gjx16@GJXAIOU",[[-1,4890,"。"]],[4891,4891],[4890,4890]]],[1533169720966,["gjx16@GJXAIOU",[[1,4890,"："]],[4890,4890],[4891,4891]]],[1533169722583,["gjx16@GJXAIOU",[[1,4893," "]],[4893,4893],[4894,4894]]],[1533169725860,["gjx16@GJXAIOU",[[1,4814," "]],[4814,4814],[4815,4815]]],[1533169726630,["gjx16@GJXAIOU",[[1,4838," "]],[4838,4838],[4839,4839]]],[1533169727388,["gjx16@GJXAIOU",[[1,4863," "]],[4863,4863],[4864,4864]]],[1533169814349,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"]],[374,374],[4901,4901]]],[1533169814349,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"]],[4901,4901],[374,374]]],[1533169757697,["gjx16@GJXAIOU",[[-1,4926,"线性表(a1, a2, a3, …, an)的链式存储结构。"]],[4926,4956],[4926,4926]]],[1533169760802,["gjx16@GJXAIOU",[[-1,4911,"•"]],[4912,4912],[4911,4911]]],[1533169761775,["gjx16@GJXAIOU",[[1,4911,"**"]],[4911,4911],[4913,4913]]],[1533169762914,["gjx16@GJXAIOU",[[1,4913,"**线性表(a1, a2, a3, …, an)的链式存储结构。"]],[4913,4913],[4943,4943]]],[1533169765420,["gjx16@GJXAIOU",[[-1,4942,"。"]],[4943,4943],[4942,4942]]],[1533169765943,["gjx16@GJXAIOU",[[1,4942,"："]],[4942,4942],[4943,4943]]],[1533169770317,["gjx16@GJXAIOU",[[-1,4956,"，即为\n"]],[4956,4960],[4956,4956]]],[1533169773839,["gjx16@GJXAIOU",[[1,4956,"。  "]],[4956,4956],[4959,4959]]],[1533169774119,["gjx16@GJXAIOU",[[1,4960,"\n"]],[4959,4959],[4960,4960]]],[1533169777334,["gjx16@GJXAIOU",[[-1,4910,"\n"]],[4910,4910],[4909,4909]]],[1533169781251,["gjx16@GJXAIOU",[[1,4943," "]],[4943,4943],[4944,4944]]],[1533169784173,["gjx16@GJXAIOU",[[-1,4943," "]],[4944,4944],[4943,4943]]],[1533169786265,["gjx16@GJXAIOU",[[1,4944," "]],[4944,4944],[4945,4945]]],[1533169793390,["gjx16@GJXAIOU",[[-1,4980,"，所以叫做单链表。"]],[4980,4989],[4980,4980]]],[1533169796074,["gjx16@GJXAIOU",[[-1,4960,"\n"]],[4960,4960],[4959,4959]]],[1533169802649,["gjx16@GJXAIOU",[[1,4960,"**"]],[4960,4960],[4962,4962]]],[1533169804022,["gjx16@GJXAIOU",[[1,4962,"**，所以叫做单链表。"]],[4962,4962],[4971,4971]]],[1533169807413,["gjx16@GJXAIOU",[[-1,4962,"，所以叫做"]],[4962,4967],[4962,4962]]],[1533169810116,["gjx16@GJXAIOU",[[-1,4965,"。"]],[4966,4966],[4965,4965]]],[1533169811321,["gjx16@GJXAIOU",[[1,4965,"："]],[4965,4965],[4966,4966]]],[1533169874351,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4854,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"]],[374,374],[4974,4974]]],[1533169874351,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4854,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"]],[4974,4974],[374,374]]],[1533169818993,["gjx16@GJXAIOU",[[-1,4968,"因为此"]],[4968,4971],[4968,4968]]],[1533169819167,["gjx16@GJXAIOU",[[1,4968," "]],[4968,4968],[4969,4969]]],[1533169934350,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4854,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"]],[374,374],[4974,4974]]],[1533169934350,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4854,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"]],[4974,4974],[374,374]]],[1533169883579,["gjx16@GJXAIOU",[[1,4989,"\n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n"]],[4989,4989],[5040,5040]]],[1533169994395,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4854,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"]],[374,374],[4974,4974]]],[1533169994395,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4854,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"]],[4974,4974],[374,374]]],[1533169936057,["gjx16@GJXAIOU",[[1,4986,"**"]],[4986,4986],[4988,4988]]],[1533169942555,["gjx16@GJXAIOU",[[1,4988,"**头指针："]],[4988,4988],[4992,4992]]],[1533169946383,["gjx16@GJXAIOU",[[1,4994,"•链表中的第一个结点的存储位置叫做头指针，最后一个结点指针为空(NULL)。"]],[4994,4994],[5032,5032]]],[1533169950246,["gjx16@GJXAIOU",[[-1,4994,"•"]],[4995,4995],[4994,4994]]],[1533169955991,["gjx16@GJXAIOU",[[-1,5009,"做头指针，"]],[5009,5014],[5009,5009]]],[1533169959711,["gjx16@GJXAIOU",[[1,5009,"\n"]],[5009,5009],[5010,5010]]],[1533169962383,["gjx16@GJXAIOU",[[-1,5008,"叫"]],[5009,5009],[5008,5008]]],[1533169966524,["gjx16@GJXAIOU",[[1,5009,"**"]],[5009,5009],[5011,5011]]],[1533169970336,["gjx16@GJXAIOU",[[1,5011,"**空（）"]],[5011,5011],[5014,5014]]],[1533169975872,["gjx16@GJXAIOU",[[1,5013,"NULL"]],[5013,5013],[5017,5017]]],[1533169980021,["gjx16@GJXAIOU",[[-1,5028,"为空(NULL)。"]],[5028,5037],[5028,5028]]],[1533170054388,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5011,"**"],[1,5013,"空（"],[-1,5017,"空（"],[1,5020,"**"]],[374,374],[5022,5022]]],[1533170054388,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5011,"**"],[-1,5011,"空（"],[1,5017,"空（"],[-1,5018,"**"]],[5022,5022],[374,374]]],[1533170008431,["gjx16@GJXAIOU",[[1,4994," "]],[4994,4994],[4995,4995]]],[1533170009958,["gjx16@GJXAIOU",[[1,5021," "]],[5021,5021],[5022,5022]]],[1533170016021,["gjx16@GJXAIOU",[[1,5019,"："]],[5019,5019],[5020,5020]]],[1533170020226,["gjx16@GJXAIOU",[[-1,5019,"："]],[5020,5020],[5019,5019]]],[1533170021486,["gjx16@GJXAIOU",[[1,5019,":"]],[5019,5019],[5020,5020]]],[1533171014438,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"]],[374,374],[5026,5026]]],[1533171014438,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"]],[5026,5026],[374,374]]],[1533170958556,["gjx16@GJXAIOU",[[1,5088,"**"]],[5088,5088],[5090,5090]]],[1533170959933,["gjx16@GJXAIOU",[[1,5090,"**zhu"]],[5090,5090],[5093,5093]]],[1533170961108,["gjx16@GJXAIOU",[[-1,5090,"zhu"]],[5093,5093],[5090,5090]]],[1533170964814,["gjx16@GJXAIOU",[[1,5090,"注："]],[5090,5090],[5092,5092]]],[1533170980556,["gjx16@GJXAIOU",[[1,5094,"头指针和头结点的异同："]],[5094,5094],[5105,5105]]],[1533171434444,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"]],[374,374],[5096,5096]]],[1533171434445,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"]],[5096,5096],[374,374]]],[1533171380304,["gjx16@GJXAIOU",[[1,5105,"   "]],[5105,5105],[5108,5108]]],[1533171380913,["gjx16@GJXAIOU",[[1,5109,"\n"]],[5108,5108],[5109,5109]]],[1533171407221,["gjx16@GJXAIOU",[[1,5109,"1.头指针：  "]],[5109,5109],[5117,5117]]],[1533171407384,["gjx16@GJXAIOU",[[1,5118,"\n"]],[5117,5117],[5118,5118]]],[1533171416793,["gjx16@GJXAIOU",[[-1,5109,"1."]],[5111,5111],[5109,5109]]],[1533171418248,["gjx16@GJXAIOU",[[1,5109,"  "]],[5109,5109],[5111,5111]]],[1533171419231,["gjx16@GJXAIOU",[[-1,5110," "]],[5111,5111],[5110,5110]]],[1533171420134,["gjx16@GJXAIOU",[[1,5110,"- "]],[5110,5110],[5112,5112]]],[1533171431738,["gjx16@GJXAIOU",[[1,5118,"  \n     - "]],[5116,5116],[5126,5126]]],[1533171494487,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[1,5127,"  "]],[374,374],[5129,5129]]],[1533171494487,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[-1,5125,"  "]],[5129,5129],[374,374]]],[1533171441759,["gjx16@GJXAIOU",[[1,5126,"概念：  \n       -"]],[5126,5126],[5140,5140]]],[1533171442703,["gjx16@GJXAIOU",[[-1,5139,"-"]],[5140,5140],[5139,5139]]],[1533171444567,["gjx16@GJXAIOU",[[1,5139,"-"]],[5139,5139],[5140,5140]]],[1533171445589,["gjx16@GJXAIOU",[[-1,5138," -"]],[5140,5140],[5138,5138]]],[1533171446625,["gjx16@GJXAIOU",[[1,5138,"-"]],[5138,5138],[5139,5139]]],[1533171448821,["gjx16@GJXAIOU",[[-1,5137," -"]],[5139,5139],[5137,5137]]],[1533171454779,["gjx16@GJXAIOU",[[1,5137,"- 作用："]],[5137,5137],[5142,5142]]],[1533171463367,["gjx16@GJXAIOU",[[1,5131,"–指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。"]],[5131,5131],[5165,5165]]],[1533171467369,["gjx16@GJXAIOU",[[-1,5129,"  –"]],[5132,5132],[5129,5129]]],[1533171473400,["gjx16@GJXAIOU",[[1,5126,"**"]],[5126,5126],[5128,5128]]],[1533171478180,["gjx16@GJXAIOU",[[1,5128,"**概念："]],[5128,5128],[5131,5131]]],[1533171481352,["gjx16@GJXAIOU",[[-1,5133,"概念："]],[5136,5136],[5133,5133]]],[1533171481983,["gjx16@GJXAIOU",[[1,5133," "]],[5133,5133],[5134,5134]]],[1533171486264,["gjx16@GJXAIOU",[[1,5175,"**"],[1,5179,"**"]],[5175,5179],[5175,5183]]],[1533171488416,["gjx16@GJXAIOU",[[1,5184," "]],[5184,5184],[5185,5185]]],[1533171554448,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[1,5118,"\n"],[-1,5120,"\n "],[1,5125,"-"],[-1,5126,"*"],[-1,5129,"*"],[1,5133,"**"],[-1,5180,"-"],[1,5181," "]],[374,374],[5182,5182]]],[1533171554448,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[-1,5118,"\n"],[1,5121,"\n "],[-1,5124,"-"],[1,5126,"*"],[1,5128,"*"],[-1,5131,"**"],[1,5180,"-"],[-1,5180," "]],[5182,5182],[374,374]]],[1533171497047,["gjx16@GJXAIOU",[[1,5185,"–具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。"]],[5185,5185],[5217,5217]]],[1533171499508,["gjx16@GJXAIOU",[[-1,5185,"–"]],[5186,5186],[5185,5185]]],[1533171503952,["gjx16@GJXAIOU",[[1,5185," "]],[5185,5185],[5186,5186]]],[1533171509414,["gjx16@GJXAIOU",[[-1,5180," "]],[5181,5181],[5180,5180]]],[1533171522689,["gjx16@GJXAIOU",[[1,5116,"dhou"]],[5116,5116],[5120,5120]]],[1533171524451,["gjx16@GJXAIOU",[[-1,5116,"dhou"]],[5120,5120],[5116,5116]]],[1533171527415,["gjx16@GJXAIOU",[[1,5116,"（）"]],[5116,5116],[5118,5118]]],[1533171532552,["gjx16@GJXAIOU",[[1,5117,"他的"]],[5117,5117],[5119,5119]]],[1533171534274,["gjx16@GJXAIOU",[[-1,5117,"他的"]],[5119,5119],[5117,5117]]],[1533171553744,["gjx16@GJXAIOU",[[1,5117,"它的数据域不存储任何信息"]],[5117,5117],[5129,5129]]],[1533171614449,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5132,"  "],[-1,5140,"**"],[1,5142,"- "],[1,5147,"**"]],[374,374],[5149,5149]]],[1533171614449,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5132,"  "],[1,5138,"**"],[-1,5138,"- "],[-1,5145,"**"]],[5149,5149],[374,374]]],[1533171556908,["gjx16@GJXAIOU",[[1,5132,"  \n "]],[5130,5130],[5134,5134]]],[1533171794455,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5132,"  "],[-1,5144,"**"],[1,5146,"- "],[1,5151,"**"]],[374,374],[5153,5153]]],[1533171794455,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5132,"  "],[1,5142,"**"],[-1,5142,"- "],[-1,5149,"**"]],[5153,5153],[374,374]]],[1533171782327,["gjx16@GJXAIOU",[[-1,5116,"（它的数据域不存储任何信息）"]],[5116,5130],[5116,5116]]],[1533171787932,["gjx16@GJXAIOU",[[1,5222,"\n"]],[5221,5221],[5222,5222]]],[1533171854473,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"]],[374,374],[5139,5139]]],[1533171854473,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"]],[5139,5139],[374,374]]],[1533171800539,["gjx16@GJXAIOU",[[1,5223,"\n"]],[5222,5222],[5223,5223]]],[1533171812582,["gjx16@GJXAIOU",[[1,5223,"- 头结点"]],[5223,5223],[5228,5228]]],[1533171824603,["gjx16@GJXAIOU",[[1,5221,"–无论链表是否为空，头指针均不为空。\n\n–头指针是链表的必要元素。"]],[5221,5221],[5254,5254]]],[1533171826546,["gjx16@GJXAIOU",[[-1,5221,"–"]],[5222,5222],[5221,5221]]],[1533171828449,["gjx16@GJXAIOU",[[1,5221,"    "]],[5221,5221],[5225,5225]]],[1533171831153,["gjx16@GJXAIOU",[[-1,5244,"–"]],[5245,5245],[5244,5244]]],[1533171832206,["gjx16@GJXAIOU",[[1,5244,"    "]],[5244,5244],[5248,5248]]],[1533171834593,["gjx16@GJXAIOU",[[-1,5247," "]],[5248,5248],[5247,5247]]],[1533171835588,["gjx16@GJXAIOU",[[1,5247," "]],[5247,5247],[5248,5248]]],[1533171914454,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"]],[374,374],[5139,5139]]],[1533171914454,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"]],[5139,5139],[374,374]]],[1533171884457,["gjx16@GJXAIOU",[[1,5189,"\n     1."]],[5189,5189],[5197,5197]]],[1533171887675,["gjx16@GJXAIOU",[[1,5233,"2."]],[5233,5233],[5235,5235]]],[1533171889797,["gjx16@GJXAIOU",[[-1,5253,"\n"]],[5253,5253],[5252,5252]]],[1533171895027,["gjx16@GJXAIOU",[[1,5257,"3."]],[5257,5257],[5259,5259]]],[1533171974454,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4808,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"]],[374,374],[5139,5139]]],[1533171974454,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4808,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"]],[5139,5139],[374,374]]],[1533171959171,["gjx16@GJXAIOU",[[1,5278,"：  - \n**"]],[5278,5278],[5286,5286]]],[1533171964774,["gjx16@GJXAIOU",[[1,5286,"**作用："]],[5286,5286],[5289,5289]]],[1533171968431,["gjx16@GJXAIOU",[[1,5279,"–无论链表是否为空，头指针均不为空。\n\n–头指针是链表的必要元素。"]],[5279,5279],[5312,5312]]],[1533172034459,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5314,"\n"],[-1,5316,"\n**"],[1,5324,"**"]],[374,374],[5326,5326]]],[1533172034459,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5314,"\n"],[1,5317,"\n**"],[-1,5322,"**"]],[5326,5326],[374,374]]],[1533171974915,["gjx16@GJXAIOU",[[-1,5279,"–无论链表是否为空，头指针均不为空。"]],[5279,5297],[5279,5279]]],[1533171978267,["gjx16@GJXAIOU",[[-1,5281,"–头指针是链表的必要元素。  "]],[5281,5296],[5281,5281]]],[1533171978744,["gjx16@GJXAIOU",[[-1,5281,"\n"]],[5281,5281],[5280,5280]]],[1533171979365,["gjx16@GJXAIOU",[[-1,5280,"\n"]],[5280,5280],[5279,5279]]],[1533171990777,["gjx16@GJXAIOU",[[1,5279,"（）"]],[5279,5279],[5281,5281]]],[1533172001860,["gjx16@GJXAIOU",[[1,5280,"数据域不存储任何信息"]],[5280,5280],[5290,5290]]],[1533172004603,["gjx16@GJXAIOU",[[1,5301,"  - \n"]],[5301,5301],[5306,5306]]],[1533172007547,["gjx16@GJXAIOU",[[1,5292,"  "]],[5292,5292],[5294,5294]]],[1533172010120,["gjx16@GJXAIOU",[[-1,5306,"-"]],[5307,5307],[5306,5306]]],[1533172012591,["gjx16@GJXAIOU",[[1,5307,"  "]],[5306,5306],[5308,5308]]],[1533172015006,["gjx16@GJXAIOU",[[-1,5307,"  "]],[5309,5309],[5307,5307]]],[1533172026224,["gjx16@GJXAIOU",[[1,5307,"    –头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n\n–有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n\n–头结点不一定是链表的必须要素。"]],[5307,5307],[5432,5432]]],[1533172029242,["gjx16@GJXAIOU",[[-1,5311,"–"]],[5312,5312],[5311,5311]]],[1533172030511,["gjx16@GJXAIOU",[[1,5311,"1."]],[5311,5311],[5313,5313]]],[1533172033573,["gjx16@GJXAIOU",[[-1,5372,"–"]],[5373,5373],[5372,5372]]],[1533172034267,["gjx16@GJXAIOU",[[1,5372,"2"]],[5372,5372],[5373,5373]]],[1533172094478,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "]],[374,374],[5308,5308]]],[1533172094478,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "]],[5308,5308],[374,374]]],[1533172037633,["gjx16@GJXAIOU",[[-1,5418,"–"]],[5419,5419],[5418,5418]]],[1533172038514,["gjx16@GJXAIOU",[[1,5418,"3."]],[5418,5418],[5420,5420]]],[1533172046308,["gjx16@GJXAIOU",[[1,5372,"    "]],[5372,5372],[5376,5376]]],[1533172048995,["gjx16@GJXAIOU",[[-1,5375," "]],[5376,5376],[5375,5375]]],[1533172052210,["gjx16@GJXAIOU",[[1,5421,"  "]],[5421,5421],[5423,5423]]],[1533172056169,["gjx16@GJXAIOU",[[1,5440,"   \n  "]],[5440,5440],[5446,5446]]],[1533172214462,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"**"],[1,4838,"**"],[-1,4854,"*"],[-1,4857,"*"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"*"],[-1,4913,"*"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5010,"*"],[-1,5013,"*"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n*"],[-1,5299,"*"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"]],[374,374],[5447,5447]]],[1533172214462,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"**"],[-1,4836,"**"],[1,4854,"*"],[1,4856,"*"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"*"],[1,4912,"*"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5010,"*"],[1,5012,"*"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n*"],[1,5298,"*"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"]],[5447,5447],[374,374]]],[1533172174483,["gjx16@GJXAIOU",[[1,5452,"![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n**"]],[5451,5451],[5594,5594]]],[1533172178322,["gjx16@GJXAIOU",[[1,5594,"**注："]],[5594,5594],[5596,5596]]],[1533172182496,["gjx16@GJXAIOU",[[1,5592,"\n"]],[5592,5592],[5593,5593]]],[1533172191283,["gjx16@GJXAIOU",[[1,5599," 头指针只想"]],[5599,5599],[5605,5605]]],[1533172192022,["gjx16@GJXAIOU",[[-1,5603,"只想"]],[5605,5605],[5603,5603]]],[1533172214182,["gjx16@GJXAIOU",[[1,5603,"指向头结点，头结点"]],[5603,5603],[5612,5612]]],[1533172274463,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4854,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n "],[1,5441,"   \n"],[-1,5448,"  "],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5612,"*"],[1,5613,"\n "]],[374,374],[5615,5615]]],[1533172274463,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4854,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n "],[-1,5440,"   \n"],[1,5451,"  "],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5612,"*"],[-1,5612,"\n "]],[5615,5615],[374,374]]],[1533172271334,["gjx16@GJXAIOU",[[1,5612,"数据域可以空也可以存放当前列表的长度，头结点指向第一节点   "]],[5612,5612],[5643,5643]]],[1533172271985,["gjx16@GJXAIOU",[[1,5644,"\n"]],[5643,5643],[5644,5644]]],[1533172272460,["gjx16@GJXAIOU",[[1,5645,"\n"]],[5644,5644],[5645,5645]]],[1533172694472,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4512," "],[1,4523,"  "],[-1,4529,"杂度"],[1,4531,"**"],[1,4541,"\n"],[-1,4544,"\n"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"*"],[-1,4809,"*"],[-1,4811,"："],[1,4814,"：**"],[-1,4832,"**"],[1,4838,"**"],[-1,4854,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4988,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（"],[1,5022,":**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n "],[1,5441,"   \n"],[-1,5448,"  "],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*"],[1,5644,"\n"],[1,5646," "]],[374,374],[5647,5647]]],[1533172694472,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4509," "],[-1,4521,"  "],[1,4529,"杂度"],[-1,4529,"**"],[-1,4541,"\n"],[1,4545,"\n"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"*"],[1,4808,"*"],[1,4809,"："],[-1,4811,"：**"],[1,4832,"**"],[-1,4836,"**"],[1,4854,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4988,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（"],[-1,5019,":**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n "],[-1,5440,"   \n"],[1,5451,"  "],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*"],[-1,5643,"\n"],[-1,5646," "]],[5647,5647],[374,374]]],[1533172674942,["gjx16@GJXAIOU",[[1,5645,"**"]],[5645,5645],[5647,5647]]],[1533172685751,["gjx16@GJXAIOU",[[1,5647,"**单链表的读取："]],[5647,5647],[5654,5654]]],[1533172687864,["gjx16@GJXAIOU",[[1,5656,"  "]],[5656,5656],[5658,5658]]],[1533172688105,["gjx16@GJXAIOU",[[1,5659,"\n"]],[5658,5658],[5659,5659]]],[1533172754491,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4912,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"**"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5311," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5660," "]],[374,374],[5661,5661]]],[1533172754491,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4912,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"**"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5310," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5660," "]],[5661,5661],[374,374]]],[1533172703586,["gjx16@GJXAIOU",[[1,5659,"•获得链表第i个数据的算法思路：\n\n–声明一个结点p指向链表第一个结点，初始化j从1开始；\n\n–当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n\n–若到链表末尾p为空，则说明第i个元素不存在；\n\n–否则查找成功，返回结点p的数据。\n\n•有了以上的思路提示，小甲鱼邀请大家再度进行头脑风暴：算法的C语言实现代码，GetElem.c"]],[5659,5659],[5835,5835]]],[1533172706680,["gjx16@GJXAIOU",[[-1,5659,"•"]],[5660,5660],[5659,5659]]],[1533172711319,["gjx16@GJXAIOU",[[-1,5676,"–"]],[5677,5677],[5676,5676]]],[1533172712103,["gjx16@GJXAIOU",[[1,5676,"1."]],[5676,5676],[5678,5678]]],[1533172720663,["gjx16@GJXAIOU",[[-1,5706,"–"]],[5707,5707],[5706,5706]]],[1533172721520,["gjx16@GJXAIOU",[[1,5706,"2."]],[5706,5706],[5708,5708]]],[1533172723975,["gjx16@GJXAIOU",[[-1,5745,"–"]],[5746,5746],[5745,5745]]],[1533172724744,["gjx16@GJXAIOU",[[1,5745,"3."]],[5745,5745],[5747,5747]]],[1533172727612,["gjx16@GJXAIOU",[[-1,5771,"–"]],[5772,5772],[5771,5771]]],[1533172728435,["gjx16@GJXAIOU",[[1,5771,"4."]],[5771,5771],[5773,5773]]],[1533172731388,["gjx16@GJXAIOU",[[-1,5791,"•"]],[5792,5792],[5791,5791]]],[1533172732244,["gjx16@GJXAIOU",[[1,5791,"5 ."]],[5791,5791],[5794,5794]]],[1533172734140,["gjx16@GJXAIOU",[[-1,5793,"."]],[5794,5794],[5793,5793]]],[1533172735115,["gjx16@GJXAIOU",[[1,5793,"."]],[5793,5793],[5794,5794]]],[1533172737104,["gjx16@GJXAIOU",[[-1,5792," ."]],[5794,5794],[5792,5792]]],[1533172737920,["gjx16@GJXAIOU",[[1,5792,"."]],[5792,5792],[5793,5793]]],[1533172740343,["gjx16@GJXAIOU",[[1,5839,"   "]],[5839,5839],[5842,5842]]],[1533172741304,["gjx16@GJXAIOU",[[1,5843,"\n"]],[5842,5842],[5843,5843]]],[1533172746366,["gjx16@GJXAIOU",[[-1,5793,"有了以上的思路提示，小甲鱼邀请大家再度进行头脑风暴："]],[5793,5819],[5793,5793]]],[1533173054482,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5818," "]],[374,374],[5819,5819]]],[1533173054482,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5818," "]],[5819,5819],[374,374]]],[1533173022105,["gjx16@GJXAIOU",[[1,5818,"\n"]],[5817,5817],[5818,5818]]],[1533173022996,["gjx16@GJXAIOU",[[1,5818,"**"]],[5818,5818],[5820,5820]]],[1533173026138,["gjx16@GJXAIOU",[[1,5820,"**注："]],[5820,5820],[5822,5822]]],[1533173040279,["gjx16@GJXAIOU",[[1,5824,"首先没有定义表厂"]],[5824,5824],[5832,5832]]],[1533173040976,["gjx16@GJXAIOU",[[-1,5830,"表厂"]],[5832,5832],[5830,5830]]],[1533173047258,["gjx16@GJXAIOU",[[1,5830,"表尝"]],[5830,5830],[5832,5832]]],[1533173048237,["gjx16@GJXAIOU",[[-1,5831,"尝"]],[5832,5832],[5831,5831]]],[1533173053373,["gjx16@GJXAIOU",[[1,5831,"长，"]],[5831,5831],[5833,5833]]],[1533173114467,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[1,5834," "]],[374,374],[5835,5835]]],[1533173114467,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[-1,5834," "]],[5835,5835],[374,374]]],[1533173079032,["gjx16@GJXAIOU",[[1,5833,"不能用for，而且读取的时间复杂度最差为O（）"]],[5833,5833],[5856,5856]]],[1533173081658,["gjx16@GJXAIOU",[[1,5855,"n"]],[5855,5855],[5856,5856]]],[1533173083753,["gjx16@GJXAIOU",[[1,5857,"."]],[5857,5857],[5858,5858]]],[1533173097134,["gjx16@GJXAIOU",[[-1,5859,"    "],[1,5863,"\n"]],[5863,5863],[5860,5860]]],[1533173097298,["gjx16@GJXAIOU",[[1,5861,"\n"]],[5860,5860],[5861,5861]]],[1533173099817,["gjx16@GJXAIOU",[[1,5861,"**"]],[5861,5861],[5863,5863]]],[1533173103146,["gjx16@GJXAIOU",[[1,5863,"**danli"]],[5863,5863],[5868,5868]]],[1533173104734,["gjx16@GJXAIOU",[[-1,5863,"danli"]],[5868,5868],[5863,5863]]],[1533173108461,["gjx16@GJXAIOU",[[1,5863,"单链表的"]],[5863,5863],[5867,5867]]],[1533173234483,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5867,"li\n"],[1,5870,"**\n "]],[374,374],[5874,5874]]],[1533173234483,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5867,"li\n"],[-1,5867,"**\n "]],[5874,5874],[374,374]]],[1533173234136,["gjx16@GJXAIOU",[[1,5867,"插入"]],[5867,5867],[5869,5869]]],[1533173294485,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5869,"li\n"],[1,5872,"**\n "]],[374,374],[5876,5876]]],[1533173294485,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5869,"li\n"],[-1,5869,"**\n "]],[5876,5876],[374,374]]],[1533173235612,["gjx16@GJXAIOU",[[1,5869,"："]],[5869,5869],[5870,5870]]],[1533173237884,["gjx16@GJXAIOU",[[1,5872,"   "]],[5872,5872],[5875,5875]]],[1533173238147,["gjx16@GJXAIOU",[[1,5876,"\n"]],[5875,5875],[5876,5876]]],[1533173238357,["gjx16@GJXAIOU",[[1,5877,"\n"]],[5876,5876],[5877,5877]]],[1533173474489,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5870,"li"],[1,5872,"**"],[1,5878," "]],[374,374],[5879,5879]]],[1533173474489,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5870,"li"],[-1,5870,"**"],[-1,5878," "]],[5879,5879],[374,374]]],[1533173439057,["gjx16@GJXAIOU",[[1,5878,"\n"]],[5876,5876],[5877,5877]]],[1533173441195,["gjx16@GJXAIOU",[[1,5877,"**"]],[5877,5877],[5879,5879]]],[1533173445442,["gjx16@GJXAIOU",[[1,5879,"**exp："]],[5879,5879],[5883,5883]]],[1533173461981,["gjx16@GJXAIOU",[[1,5885,"假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化，"]],[5885,5885],[5924,5924]]],[1533173464188,["gjx16@GJXAIOU",[[-1,5923,"，"]],[5924,5924],[5923,5923]]],[1533173594490,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5870,"li"],[1,5872,"**"],[-1,5877,"*"],[-1,5880,"*"],[1,5885,"**"],[1,5925," "]],[374,374],[5926,5926]]],[1533173594490,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5870,"li"],[-1,5870,"**"],[1,5877,"*"],[1,5879,"*"],[-1,5883,"**"],[-1,5925," "]],[5926,5926],[374,374]]],[1533173557472,["gjx16@GJXAIOU",[[1,5924,"![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n代码实现'"]],[5924,5924],[6009,6009]]],[1533173557514,["gjx16@GJXAIOU",[[-1,6008,"'"],[1,6009,"‘"]],[6009,6009],[6009,6009]]],[1533173559355,["gjx16@GJXAIOU",[[-1,6004,"代码实现‘"]],[6009,6009],[6004,6004]]],[1533173561956,["gjx16@GJXAIOU",[[1,6004,"**"]],[6004,6004],[6006,6006]]],[1533173563445,["gjx16@GJXAIOU",[[1,6006,"**dai"]],[6006,6006],[6009,6009]]],[1533173565286,["gjx16@GJXAIOU",[[-1,6006,"dai"]],[6009,6009],[6006,6006]]],[1533173570877,["gjx16@GJXAIOU",[[1,6006,"代码实现："]],[6006,6006],[6011,6011]]],[1533173573282,["gjx16@GJXAIOU",[[1,6013,"–s->next = p->next;\n\n–p->next = s;"]],[6013,6013],[6047,6047]]],[1533173576905,["gjx16@GJXAIOU",[[1,6013,"\n"]],[6013,6013],[6014,6014]]],[1533173580589,["gjx16@GJXAIOU",[[-1,6014,"–"]],[6015,6015],[6014,6014]]],[1533173582952,["gjx16@GJXAIOU",[[-1,6034,"–"]],[6035,6035],[6034,6034]]],[1533173583395,["gjx16@GJXAIOU",[[-1,6033,"\n"]],[6034,6034],[6033,6033]]],[1533173586195,["gjx16@GJXAIOU",[[1,6013,"   "]],[6013,6013],[6016,6016]]],[1533173586556,["gjx16@GJXAIOU",[[1,6017,"\n"]],[6016,6016],[6017,6017]]],[1533173590616,["gjx16@GJXAIOU",[[1,6017,"~~"]],[6017,6017],[6019,6019]]],[1533173590655,["gjx16@GJXAIOU",[[1,6019,"~~"]],[6019,6019],[6019,6019]]],[1533173594174,["gjx16@GJXAIOU",[[-1,6059,"\n"],[1,6060,"~"]],[6059,6059],[6060,6060]]],[1533173654489,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5870,"li"],[1,5872,"**"],[-1,5879,"**"],[1,5885,"**"],[-1,6011,"ai"],[1,6013,"**"],[-1,6057,"\n"],[1,6058," "]],[374,374],[6059,6059]]],[1533173654489,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5870,"li"],[-1,5870,"**"],[1,5879,"**"],[-1,5883,"**"],[1,6011,"ai"],[-1,6011,"**"],[1,6057,"\n"],[-1,6057," "]],[6059,6059],[374,374]]],[1533173594601,["gjx16@GJXAIOU",[[1,6060,"~"]],[6060,6060],[6061,6061]]],[1533173594641,["gjx16@GJXAIOU",[[1,6061,"~~"]],[6061,6061],[6061,6061]]],[1533173596877,["gjx16@GJXAIOU",[[1,6063,"   "]],[6063,6063],[6066,6066]]],[1533173597303,["gjx16@GJXAIOU",[[1,6066,"\n\n"]],[6066,6066],[6067,6067]]],[1533173597576,["gjx16@GJXAIOU",[[1,6068,"\n"]],[6067,6067],[6068,6068]]],[1533173614811,["gjx16@GJXAIOU",[[-1,6068,"\n"],[1,6069,"**"]],[6068,6068],[6070,6070]]],[1533173623577,["gjx16@GJXAIOU",[[1,6070,"**•单链表第i个数据插入结点的算法思路："]],[6070,6070],[6089,6089]]],[1533173625892,["gjx16@GJXAIOU",[[-1,6070,"•"]],[6071,6071],[6070,6070]]],[1533173628018,["gjx16@GJXAIOU",[[1,6090,"  "]],[6090,6090],[6092,6092]]],[1533173643690,["gjx16@GJXAIOU",[[1,6092,"\n\n–声明一结点p指向链表头结点，初始化j从1开始；\n\n–当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n–若到链表末尾p为空，则说明第i个元素不存在；\n\n–否则查找成功，在系统中生成一个空结点s；\n\n–将数据元素e赋值给s->data；\n\n–单链表的插入刚才两个标准语句；\n\n返回成功。"]],[6092,6092],[6249,6249]]],[1533173648157,["gjx16@GJXAIOU",[[-1,6093,"–"]],[6094,6094],[6093,6093]]],[1533173652299,["gjx16@GJXAIOU",[[1,6093,"1."]],[6093,6093],[6095,6095]]],[1533173714486,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5870,"li"],[1,5872,"**"],[-1,5879,"**"],[1,5885,"**"],[-1,6011,"ai"],[1,6013,"**"],[-1,6057,"\n"],[1,6058," "],[-1,6070,"*•"],[1,6090,"**"],[-1,6095,"–"],[-1,6251,""],[1,6251,"\n"]],[374,374],[6252,6252]]],[1533173714486,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5870,"li"],[-1,5870,"**"],[1,5879,"**"],[-1,5883,"**"],[1,6011,"ai"],[-1,6011,"**"],[1,6057,"\n"],[-1,6057," "],[1,6070,"*•"],[-1,6088,"**"],[1,6095,"–"],[1,6250,""],[-1,6250,"\n"]],[6252,6252],[374,374]]],[1533173654709,["gjx16@GJXAIOU",[[-1,6120,"–"]],[6121,6121],[6120,6120]]],[1533173656688,["gjx16@GJXAIOU",[[1,6120,"2."]],[6120,6120],[6122,6122]]],[1533173659424,["gjx16@GJXAIOU",[[-1,6160,"–"]],[6161,6161],[6160,6160]]],[1533173661514,["gjx16@GJXAIOU",[[1,6160,"3."]],[6160,6160],[6162,6162]]],[1533173663706,["gjx16@GJXAIOU",[[-1,6186,"–"]],[6187,6187],[6186,6186]]],[1533173665778,["gjx16@GJXAIOU",[[1,6186,"4，"]],[6186,6186],[6188,6188]]],[1533173671813,["gjx16@GJXAIOU",[[-1,6187,"，"]],[6188,6188],[6187,6187]]],[1533173672458,["gjx16@GJXAIOU",[[1,6187,"。"]],[6187,6187],[6188,6188]]],[1533173673562,["gjx16@GJXAIOU",[[-1,6187,"。"]],[6188,6188],[6187,6187]]],[1533173673995,["gjx16@GJXAIOU",[[1,6187,"."]],[6187,6187],[6188,6188]]],[1533173676368,["gjx16@GJXAIOU",[[-1,6210,"–"]],[6211,6211],[6210,6210]]],[1533173677779,["gjx16@GJXAIOU",[[1,6210,"5."]],[6210,6210],[6212,6212]]],[1533173680097,["gjx16@GJXAIOU",[[-1,6231,"–"]],[6232,6232],[6231,6231]]],[1533173681671,["gjx16@GJXAIOU",[[1,6231,"6."]],[6231,6231],[6233,6233]]],[1533173686436,["gjx16@GJXAIOU",[[1,6250,"7."]],[6250,6250],[6252,6252]]],[1533175934539,[null,[[-1,374,"**"],[1,379,"**"],[-1,759,"**"],[1,764,"**"],[1,1031,"\n"],[-1,1034,"\n"],[-1,4399," "],[1,4406,"\n"],[-1,4415,"  –"],[1,4431,"常；\n"],[-1,4440,"\n\n–"],[1,4448,"素；\n"],[-1,4457,"\n\n–"],[1,4493,"位置；"],[-1,4504,"\n\n–"],[1,4514," "],[1,4515,"  "],[-1,4529,"杂度"],[1,4531,"**"],[-1,4704,"-"],[1,4705,"\n"],[-1,4791," "],[1,4792,"\n"],[1,4801,"\n"],[-1,4803,"-"],[-1,4806,"**"],[-1,4811,"："],[1,4814,"：**"],[-1,4830,"*"],[-1,4833,"*"],[1,4838,"**"],[-1,4856,"**"],[1,4863,"**"],[-1,4880,"称为"],[1,4884,"映像"],[-1,4885,"称为"],[-1,4893,"：)。"],[1,4896,"e)：**"],[-1,4910,"**"],[-1,4941,"：构。"],[1,4944,"结构：**"],[-1,4962,"叫做单：表。"],[1,4968,"单链表：**"],[-1,4986,"*"],[-1,4989,"*"],[1,4994,"**"],[-1,5012,"**"],[1,5014,"空（"],[-1,5018,"空:（）"],[1,5022,"）:**"],[-1,5092,"hu"],[1,5094,"**"],[-1,5118,"  "],[-1,5130,"**"],[1,5132,"- "],[1,5137,"**"],[1,5294,"-"],[-1,5295,"\n**"],[1,5303,"**"],[-1,5305,"-"],[1,5307," "],[1,5376,"."],[-1,5420,"–"],[1,5425,"头"],[-1,5439,"\n"],[1,5446,"\n"],[-1,5451," "],[-1,5593,"\n*"],[1,5599,"**"],[-1,5643,"*\n**"],[1,5647,"\n\n"],[1,5656,"**"],[1,5820,"注："],[-1,5822,"注："],[-1,5860," "],[1,5861,"\n"],[-1,5870,"li"],[1,5872,"**"],[-1,5879,"**"],[1,5885,"**"],[-1,6011,"ai"],[1,6013,"**"],[-1,6057,"\n"],[1,6058," "],[-1,6070,"*•"],[1,6090,"**"],[-1,6095,"–"],[1,6120,"\n"],[-1,6122,"–"],[1,6159,"\n"],[-1,6162,"–"],[1,6186,"\n"],[-1,6188,"–"],[1,6210,"\n"],[-1,6212,"–"],[1,6231,"\n"],[-1,6233,"–"],[1,6250,"\n"],[-1,6252,"\n"],[1,6258,"\n"]],[374,374],[6259,6259]]],[1533175934539,[null,[[1,374,"**"],[-1,377,"**"],[1,759,"**"],[-1,762,"**"],[-1,1031,"\n"],[1,1035,"\n"],[1,4399," "],[-1,4405,"\n"],[1,4415,"  –"],[-1,4428,"常；\n"],[1,4440,"\n\n–"],[-1,4445,"素；\n"],[1,4457,"\n\n–"],[-1,4490,"位置；"],[1,4504,"\n\n–"],[-1,4511," "],[-1,4513,"  "],[1,4529,"杂度"],[-1,4529,"**"],[1,4704,"-"],[-1,4704,"\n"],[1,4791," "],[-1,4791,"\n"],[-1,4801,"\n"],[1,4804,"-"],[1,4806,"**"],[1,4809,"："],[-1,4811,"：**"],[1,4830,"*"],[1,4832,"*"],[-1,4836,"**"],[1,4856,"**"],[-1,4861,"**"],[1,4880,"称为"],[-1,4882,"映像"],[1,4885,"称为"],[1,4891,"：)。"],[-1,4891,"e)：**"],[1,4910,"**"],[1,4939,"：构。"],[-1,4939,"结构：**"],[1,4962,"叫做单：表。"],[-1,4962,"单链表：**"],[1,4986,"*"],[1,4988,"*"],[-1,4992,"**"],[1,5012,"**"],[-1,5012,"空（"],[1,5018,"空:（）"],[-1,5018,"）:**"],[1,5092,"hu"],[-1,5092,"**"],[1,5118,"  "],[1,5128,"**"],[-1,5128,"- "],[-1,5135,"**"],[-1,5294,"-"],[1,5296,"\n**"],[-1,5301,"**"],[1,5305,"-"],[-1,5306," "],[-1,5376,"."],[1,5421,"–"],[-1,5425,"头"],[1,5440,"\n"],[-1,5446,"\n"],[1,5452," "],[1,5593,"\n*"],[-1,5597,"**"],[1,5643,"*\n**"],[-1,5643,"\n\n"],[-1,5654,"**"],[-1,5820,"注："],[1,5824,"注："],[1,5860," "],[-1,5860,"\n"],[1,5870,"li"],[-1,5870,"**"],[1,5879,"**"],[-1,5883,"**"],[1,6011,"ai"],[-1,6011,"**"],[1,6057,"\n"],[-1,6057," "],[1,6070,"*•"],[-1,6088,"**"],[1,6095,"–"],[-1,6119,"\n"],[1,6122,"–"],[-1,6158,"\n"],[1,6162,"–"],[-1,6185,"\n"],[1,6188,"–"],[-1,6209,"\n"],[1,6212,"–"],[-1,6230,"\n"],[1,6233,"–"],[-1,6249,"\n"],[1,6252,"\n"],[-1,6257,"\n"]],[6259,6259],[374,374]]],[1533175885928,["gjx16@GJXAIOU",[[1,6257,"     "]],[6257,6257],[6262,6262]]],[1533175886011,["gjx16@GJXAIOU",[[1,6263,"\n"]],[6262,6262],[6263,6263]]],[1533175886202,["gjx16@GJXAIOU",[[1,6264,"\n"]],[6263,6263],[6264,6264]]],[1533175893520,["gjx16@GJXAIOU",[[1,5859,"    "]],[5859,5859],[5863,5863]]],[1533175895024,["gjx16@GJXAIOU",[[-1,5859,"    "],[1,5863,"\n"]],[5863,5863],[5860,5860]]],[1533175895167,["gjx16@GJXAIOU",[[1,5862,"\n"]],[5860,5860],[5861,5861]]],[1533175895336,["gjx16@GJXAIOU",[[1,5863,"\n"]],[5861,5861],[5862,5862]]],[1533175898340,["gjx16@GJXAIOU",[[-1,6267,"\n"],[1,6268," "]],[6267,6267],[6268,6268]]],[1533175899046,["gjx16@GJXAIOU",[[-1,6267," "],[1,6268,"\n\n"]],[6268,6268],[6268,6268]]],[1533175899184,["gjx16@GJXAIOU",[[1,6269,"\n"]],[6268,6268],[6269,6269]]],[1533175899328,["gjx16@GJXAIOU",[[1,6270,"\n"]],[6269,6269],[6270,6270]]],[1533175899767,["gjx16@GJXAIOU",[[1,6271,"\n"]],[6270,6270],[6271,6271]]],[1533175900950,["gjx16@GJXAIOU",[[-1,6271,"\n"],[1,6272,"**"]],[6271,6271],[6273,6273]]],[1533175903170,["gjx16@GJXAIOU",[[1,6273,"**danlian"]],[6273,6273],[6280,6280]]],[1533175905509,["gjx16@GJXAIOU",[[-1,6273,"danlian"]],[6280,6280],[6273,6273]]],[1533175915848,["gjx16@GJXAIOU",[[1,6273,"单链表的删除;"]],[6273,6273],[6280,6280]]],[1533175917225,["gjx16@GJXAIOU",[[-1,6279,";"]],[6280,6280],[6279,6279]]],[1533175917692,["gjx16@GJXAIOU",[[1,6279,":"]],[6279,6279],[6280,6280]]],[1533175919645,["gjx16@GJXAIOU",[[1,6282,"   "]],[6282,6282],[6285,6285]]],[1533175919874,["gjx16@GJXAIOU",[[1,6285,"\n\n"]],[6285,6285],[6286,6286]]]],null,"gjx16@GJXAIOU"],["f153f37b-a7c6-4dfe-a3a5-6d3fd241bd64",1533179095829,"## 数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系；    \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；   \n\n- **物理结构：** 数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在地址连续的存储单元中； 存储结构与逻辑关系一致；  \n    - 链式存储：将数据元素存储在任一的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n\n---\n\n\n\n## 谈谈算法    \n1.**概念：** 算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n正确性、可读性、健壮性、时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n## 时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 时间复杂度：    \n\n   - 定义：\n        在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的** 增长率**和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：** 简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n   - 分析一个算法的时间复杂度步骤：  \n    1.用常数 1 取代运行时间中的所有加法常数。    \n    2.再修改后的运行次数函数中，只保留最高阶项。    \n    3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n        \n\n\n\n    - 函数调用的时间复杂性分析    \n    \n   （1）时间复杂度O(1)     \n    \n ~~~\n        int a=1,b=3,sum=0;//执行1次   \n        sum=a+b;//执行1次   \n        cout<<\"sum=\"<<sum<<endl;//执行1次       \n~~~\n\n   (2)时间复杂度O(n)   \n     \n~~~\n        for(int i = 0; i < n; i++)//执行n次\n        {\n         cout<<i<<endl;\n        }   \n~~~\n（3）时间复杂度O(n^2)  \n  ~~~~\n        for(int i = 0; i < n; i++)//执行n^2次\n        {\n        for(int j = 0; j < n; j++)\n             {\n        cout<<i<<endl;\n            }\n        }   \n~~~~~\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n   （4）时间复杂度O(logn)  \n   ~~~~ \n        int i=1;\n        while(i<n)\n        {\n              i=i*2;\n        }\n~~~~\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了x=log2n次，所以其时间复杂度为O(logn)。\n\n\n\n\n\n\n## 线性表    \n\n第一个数据结构     \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；\n\n### 定义       \n\n   **线性表（List）：** 由零个或多个数据元素组成的有限序列。\n    [若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。]      \n    \n   所以线性表元素的个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。    \n\n    \n   **注**  这里需要强调几个关键的地方：    \n    1.首先它是一个序列，也就是说元素之间是有个先来后到的，像刚才的小蝌蚪就没有顺序。    \n    \n   2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。    \n    \n   3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n### 抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n**C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n- 抽象数据类型（Abstract Data Type，ADT）  \n   是指一个数学模型及定义在该模型上的一组操作（将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）    \n\n   **标准格式：**   \n    \n     ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   \n    \n    // [       \nInitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     \n   \n    ]\n    endADT    \n    \n    \n    \n    \n    **exp:**     \n    \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，弱不存在，则插入A中即可。      \n ~~~~ \n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n~~~~\n\n\n\n ### 线性表的存储结构  \n     \n- 顺序存储结构    \n\n    -  概念：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n    \n    -  物理上的存储方式：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n    - 顺序存储结构封装需要三个属性：   \n        1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n        \n        2.线性表的最大存储容量：数组的长度MaxSize。  \n        \n        3.线性表的当前长度：length。   \n        \n        4.注意，数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。   \n        \n        \n    **注**线性表开始位置为1；   \n    \n    - 地址计算方式：   \n        1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n        \n        2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为随机存储结构。    \n        \n        \n    - 获取元素操作；   \n        \n        实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见       \n        \n    - 插入操作：  \n    \n        ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见     \n        \n**PS：**时间复杂度为O(n)  \n\n    - 删除操作：    \n     \n       1.如果删除位置不合理，抛出异常；\n       2.取出删除元素；\n       3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n        4.表长-1。   \n          \n**PS：**时间复杂度为O(n)\n\n\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n\n- 链式存储结构       \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点\n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：**头指针和头结点的异同：   \n - 头指针：  \n   \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n\n  3.头结点不一定是链表的必须要素。   \n  \n    \n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n**注：** 头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n**单链表的读取：**  \n获得链表第i个数据的算法思路：\n\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，返回结点p的数据。\n\n5.算法的C语言实现代码，GetElem.c   \n\n**注：**首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n**单链表的插入：**   \n\n**exp：**假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n**代码实现：**   \n~~~~\ns->next = p->next;\np->next = s;\n    \n~~~~   \n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，在系统中生成一个空结点s；\n\n5.将数据元素e赋值给s->data；\n\n6.单链表的插入刚才两个标准语句；\n\n7.返回成功。     \n\n\n\n\n\n**单链表的删除:**   \n\n",[[1533179075772,["gjx16@GJXAIOU",[[1,6286,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n"]],[6286,6286],[6376,6376]]],[1533179081651,["gjx16@GJXAIOU",[[1,6377,"\n"]],[6376,6376],[6377,6377]]],[1533179208058,["gjx16@GJXAIOU",[[1,0,"---\ntags:\n  - 数据结构\nflag: blue\n---\n"]],[6233,6233],[6267,6267]]],[1533179422621,["gjx16@GJXAIOU",[[1,6412,"\n"]],[6410,6410],[6411,6411]]],[1533179425042,["gjx16@GJXAIOU",[[1,6411,"**"]],[6411,6411],[6413,6413]]],[1533179429932,["gjx16@GJXAIOU",[[1,6413,"**代码实现："]],[6413,6413],[6418,6418]]],[1533179431447,["gjx16@GJXAIOU",[[1,6420," "]],[6420,6420],[6421,6421]]],[1533179508274,[null,[[-1,6413,"**"],[1,6420,"**"]],[6413,6413],[6422,6422]]],[1533179508274,[null,[[1,6413,"**"],[-1,6418,"**"]],[6422,6422],[6413,6413]]],[1533179448590,["gjx16@GJXAIOU",[[-1,6422,"\n"],[1,6423,"~~"]],[6422,6422],[6424,6424]]],[1533179448792,["gjx16@GJXAIOU",[[1,6424,"~~~"]],[6424,6424],[6425,6425]]],[1533179451010,["gjx16@GJXAIOU",[[-1,6426,"~"]],[6425,6425],[6424,6424]]],[1533179452687,["gjx16@GJXAIOU",[[1,6426,"  "]],[6426,6426],[6428,6428]]],[1533179454191,["gjx16@GJXAIOU",[[1,6428,"\n\n–p->next = p->next->next;\n\n–也可以是：q=p->next; p->next=q->next;"]],[6428,6428],[6489,6489]]],[1533179457679,["gjx16@GJXAIOU",[[-1,6429,"–"]],[6430,6430],[6429,6429]]],[1533179461666,["gjx16@GJXAIOU",[[-1,6455,"–也可以是："]],[6455,6461],[6455,6455]]],[1533179463969,["gjx16@GJXAIOU",[[1,6455,"或者"]],[6455,6455],[6457,6457]]],[1533179466607,["gjx16@GJXAIOU",[[1,6484,"  "]],[6484,6484],[6486,6486]]],[1533179466937,["gjx16@GJXAIOU",[[1,6487,"\n"]],[6486,6486],[6487,6487]]],[1533179467437,["gjx16@GJXAIOU",[[1,6488,"\n"]],[6487,6487],[6488,6488]]],[1533179468925,["gjx16@GJXAIOU",[[-1,6488,"\n"],[1,6489,"~~"]],[6488,6488],[6490,6490]]],[1533179468972,["gjx16@GJXAIOU",[[1,6490,"~~"]],[6490,6490],[6490,6490]]],[1533179472059,["gjx16@GJXAIOU",[[1,6492,"  "]],[6492,6492],[6494,6494]]],[1533179472312,["gjx16@GJXAIOU",[[1,6494,"\n\n"]],[6494,6494],[6495,6495]]],[1533179472467,["gjx16@GJXAIOU",[[1,6496,"\n"]],[6495,6495],[6496,6496]]],[1533179478252,["gjx16@GJXAIOU",[[-1,6496,"\n"],[1,6497,"**"]],[6496,6496],[6498,6498]]],[1533179505934,["gjx16@GJXAIOU",[[1,6498,"**单链表的第i个数据删除"]],[6498,6498],[6509,6509]]],[1533179568279,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6496,"*"],[-1,6499,"*"],[1,6511,"**"]],[6413,6413],[6513,6513]]],[1533179568279,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6496,"*"],[1,6498,"*"],[-1,6509,"**"]],[6513,6513],[6413,6413]]],[1533179511947,["gjx16@GJXAIOU",[[1,6509,"节点的算法："]],[6509,6509],[6515,6515]]],[1533179514277,["gjx16@GJXAIOU",[[1,6517,"  "]],[6517,6517],[6519,6519]]],[1533179526853,["gjx16@GJXAIOU",[[1,6519,"\n\n–声明结点p指向链表第一个结点，初始化j=1；\n\n–当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n\n–若到链表末尾p为空，则说明第i个元素不存在；\n\n–否则查找成功，将欲删除结点p->next赋值给q；\n\n–单链表的删除标准语句p->next = q->next；\n\n–将q结点中的数据赋值给e，作为返回；\n\n–释放q结点。"]],[6519,6519],[6697,6697]]],[1533179529622,["gjx16@GJXAIOU",[[-1,6520,"–"]],[6521,6521],[6520,6520]]],[1533179530866,["gjx16@GJXAIOU",[[1,6520,"1."]],[6520,6520],[6522,6522]]],[1533179536275,["gjx16@GJXAIOU",[[-1,6546,"–"]],[6547,6547],[6546,6546]]],[1533179537021,["gjx16@GJXAIOU",[[1,6546,"2."]],[6546,6546],[6548,6548]]],[1533179539252,["gjx16@GJXAIOU",[[-1,6587,"–"]],[6588,6588],[6587,6587]]],[1533179539913,["gjx16@GJXAIOU",[[1,6587,"3."]],[6587,6587],[6589,6589]]],[1533179542484,["gjx16@GJXAIOU",[[-1,6613,"–"]],[6614,6614],[6613,6613]]],[1533179543119,["gjx16@GJXAIOU",[[1,6613,"4."]],[6613,6613],[6615,6615]]],[1533179545810,["gjx16@GJXAIOU",[[-1,6642,"–"]],[6643,6643],[6642,6642]]],[1533179547388,["gjx16@GJXAIOU",[[1,6642,"5."]],[6642,6642],[6644,6644]]],[1533179549402,["gjx16@GJXAIOU",[[-1,6674,"–"]],[6675,6675],[6674,6674]]],[1533179550074,["gjx16@GJXAIOU",[[1,6674,"6、"]],[6674,6674],[6676,6676]]],[1533179550996,["gjx16@GJXAIOU",[[-1,6675,"、"]],[6676,6676],[6675,6675]]],[1533179551511,["gjx16@GJXAIOU",[[1,6675,"。"]],[6675,6675],[6676,6676]]],[1533179553263,["gjx16@GJXAIOU",[[-1,6674,"6。"]],[6676,6676],[6674,6674]]],[1533179555293,["gjx16@GJXAIOU",[[1,6674,"6."]],[6674,6674],[6676,6676]]],[1533179557337,["gjx16@GJXAIOU",[[-1,6696,"–"]],[6697,6697],[6696,6696]]],[1533179559612,["gjx16@GJXAIOU",[[1,6696,"7."]],[6696,6696],[6698,6698]]],[1533179562251,["gjx16@GJXAIOU",[[1,6704,"    "]],[6704,6704],[6708,6708]]],[1533179562499,["gjx16@GJXAIOU",[[1,6709,"\n"]],[6708,6708],[6709,6709]]],[1533179562667,["gjx16@GJXAIOU",[[1,6710,"\n"]],[6709,6709],[6710,6710]]],[1533179563170,["gjx16@GJXAIOU",[[1,6711,"\n"]],[6710,6710],[6711,6711]]],[1533179628280,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6496,"*"],[-1,6499,"*"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6586,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6641,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6695,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"]],[6413,6413],[6710,6710]]],[1533179628280,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6496,"*"],[1,6498,"*"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6585,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6640,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6694,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"]],[6710,6710],[6413,6413]]],[1533179588994,["gjx16@GJXAIOU",[[-1,6711,"\n"],[1,6712,"  "]],[6711,6711],[6713,6713]]],[1533179590731,["gjx16@GJXAIOU",[[-1,6712," "]],[6713,6713],[6712,6712]]],[1533179592605,["gjx16@GJXAIOU",[[1,6712,"**"]],[6712,6712],[6714,6714]]],[1533179595081,["gjx16@GJXAIOU",[[1,6714,"**注："]],[6714,6714],[6716,6716]]],[1533179612370,["gjx16@GJXAIOU",[[1,6718," 插入和删除操作首先都是便利"]],[6718,6718],[6732,6732]]],[1533179613190,["gjx16@GJXAIOU",[[-1,6730,"便利"]],[6732,6732],[6730,6730]]],[1533179619365,["gjx16@GJXAIOU",[[1,6730,"遍历找到"]],[6730,6730],[6734,6734]]],[1533179688279,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179688279,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179685354,["gjx16@GJXAIOU",[[1,6734,"第i个元素，然后实现插入和删除操作；"]],[6734,6734],[6752,6752]]],[1533179748281,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179748281,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179689833,["gjx16@GJXAIOU",[[1,6752,"七"]],[6752,6752],[6753,6753]]],[1533179690571,["gjx16@GJXAIOU",[[-1,6752,"七"]],[6753,6753],[6752,6752]]],[1533179704502,["gjx16@GJXAIOU",[[1,6752,"其时间复杂度均为O（）"]],[6752,6752],[6763,6763]]],[1533179706513,["gjx16@GJXAIOU",[[1,6762,"n"]],[6762,6762],[6763,6763]]],[1533179709245,["gjx16@GJXAIOU",[[1,6764,"'"]],[6764,6764],[6765,6765]]],[1533179709286,["gjx16@GJXAIOU",[[-1,6764,"'"],[1,6765,"‘"]],[6765,6765],[6765,6765]]],[1533179710367,["gjx16@GJXAIOU",[[-1,6764,"‘"]],[6765,6765],[6764,6764]]],[1533179712424,["gjx16@GJXAIOU",[[1,6764,";   \n "]],[6764,6764],[6770,6770]]],[1533179808282,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179808282,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179792019,["gjx16@GJXAIOU",[[1,6770,"liru "]],[6770,6770],[6775,6775]]],[1533179794220,["gjx16@GJXAIOU",[[-1,6770,"liru "]],[6775,6775],[6770,6770]]],[1533179799916,["gjx16@GJXAIOU",[[1,6719,"1."]],[6719,6719],[6721,6721]]],[1533179802117,["gjx16@GJXAIOU",[[1,6719,"\n "]],[6719,6719],[6721,6721]]],[1533179805213,["gjx16@GJXAIOU",[[1,6774,"2."]],[6774,6774],[6776,6776]]],[1533179868282,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179868283,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179809952,["gjx16@GJXAIOU",[[1,6776,"c"]],[6776,6776],[6777,6777]]],[1533179810713,["gjx16@GJXAIOU",[[-1,6776,"c"]],[6777,6777],[6776,6776]]],[1533179821448,["gjx16@GJXAIOU",[[1,6776,"从第i个位置插入"]],[6776,6776],[6784,6784]]],[1533179823680,["gjx16@GJXAIOU",[[-1,6782,"插入"]],[6784,6784],[6782,6782]]],[1533179867510,["gjx16@GJXAIOU",[[1,6782,"连续插入10个元素：  \n 顺序存储：每次都要移动n-i"]],[6782,6782],[6810,6810]]],[1533179928284,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179928284,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179884380,["gjx16@GJXAIOU",[[1,6810,"个位置，每次的时间复杂度都是O（）"]],[6810,6810],[6827,6827]]],[1533179890081,["gjx16@GJXAIOU",[[1,6826,"n"]],[6826,6826],[6827,6827]]],[1533179898250,["gjx16@GJXAIOU",[[1,6828,";  \n danli"]],[6828,6828],[6838,6838]]],[1533179899322,["gjx16@GJXAIOU",[[-1,6833,"danli"]],[6838,6838],[6833,6833]]],[1533179927972,["gjx16@GJXAIOU",[[1,6833,"单链表：第一次需要找到第i个位置"]],[6833,6833],[6849,6849]]],[1533179988284,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179988284,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179938013,["gjx16@GJXAIOU",[[1,6849,"的指针，为O（）"]],[6849,6849],[6857,6857]]],[1533179941063,["gjx16@GJXAIOU",[[1,6856,"n"]],[6856,6856],[6857,6857]]],[1533179947932,["gjx16@GJXAIOU",[[1,6858,";jie"]],[6858,6858],[6862,6862]]],[1533179949178,["gjx16@GJXAIOU",[[-1,6859,"jie"]],[6862,6862],[6859,6859]]],[1533179986595,["gjx16@GJXAIOU",[[1,6859,"接下来简单通过赋值移动指针即可，时间复杂度均为"]],[6859,6859],[6882,6882]]],[1533179999824,[null,[[-1,6413,"**"],[1,6420,"**"],[-1,6429,"–"],[1,6455,"\n"],[-1,6457,"："],[1,6484,";"],[-1,6486,";"],[1,6487,"\n"],[-1,6498,"**"],[1,6509,"删除"],[-1,6515,"删除"],[1,6517,"**"],[-1,6522,"–"],[1,6546,"\n"],[-1,6548,"–"],[1,6587,"\n"],[-1,6589,"–"],[1,6612,"\n"],[-1,6615,"–"],[1,6642,"\n"],[-1,6644,"–"],[1,6674,"\n"],[-1,6676,"–"],[1,6696,"\n"],[-1,6698,"–"],[1,6704,"。"],[-1,6708,"。"],[1,6709,"\n"],[1,6714,"注："],[-1,6716,"注："]],[6413,6413],[6716,6716]]],[1533179999824,[null,[[1,6413,"**"],[-1,6418,"**"],[1,6429,"–"],[-1,6454,"\n"],[1,6457,"："],[-1,6483,";"],[1,6486,";"],[-1,6486,"\n"],[1,6498,"**"],[-1,6507,"删除"],[1,6515,"删除"],[-1,6515,"**"],[1,6522,"–"],[-1,6545,"\n"],[1,6548,"–"],[-1,6586,"\n"],[1,6589,"–"],[-1,6611,"\n"],[1,6615,"–"],[-1,6641,"\n"],[1,6644,"–"],[-1,6673,"\n"],[1,6676,"–"],[-1,6695,"\n"],[1,6698,"–"],[-1,6703,"。"],[1,6708,"。"],[-1,6708,"\n"],[-1,6714,"注："],[1,6718,"注："]],[6716,6716],[6413,6413]]],[1533179988924,["gjx16@GJXAIOU",[[1,6882,"O（）"]],[6882,6882],[6885,6885]]],[1533179990011,["gjx16@GJXAIOU",[[1,6884,"1"]],[6884,6884],[6885,6885]]],[1533179993119,["gjx16@GJXAIOU",[[1,6886,"."]],[6886,6886],[6887,6887]]]],null,"gjx16@GJXAIOU"],["e82a6e7b-56b9-494e-bb58-2f5d77588e14",1533253960164,"---\ntags:\n  - 数据结构\nflag: blue\n---\n## 数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系；    \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；   \n\n- **物理结构：** 数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在地址连续的存储单元中； 存储结构与逻辑关系一致；  \n    - 链式存储：将数据元素存储在任一的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n\n---\n\n\n\n## 谈谈算法    \n1.**概念：** 算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n正确性、可读性、健壮性、时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n## 时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 时间复杂度：    \n\n   - 定义：\n        在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的** 增长率**和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：** 简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n   - 分析一个算法的时间复杂度步骤：  \n    1.用常数 1 取代运行时间中的所有加法常数。    \n    2.再修改后的运行次数函数中，只保留最高阶项。    \n    3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n        \n\n\n\n    - 函数调用的时间复杂性分析    \n    \n   （1）时间复杂度O(1)     \n    \n ~~~\n        int a=1,b=3,sum=0;//执行1次   \n        sum=a+b;//执行1次   \n        cout<<\"sum=\"<<sum<<endl;//执行1次       \n~~~\n\n   (2)时间复杂度O(n)   \n     \n~~~\n        for(int i = 0; i < n; i++)//执行n次\n        {\n         cout<<i<<endl;\n        }   \n~~~\n（3）时间复杂度O(n^2)  \n  ~~~~\n        for(int i = 0; i < n; i++)//执行n^2次\n        {\n        for(int j = 0; j < n; j++)\n             {\n        cout<<i<<endl;\n            }\n        }   \n~~~~~\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n   （4）时间复杂度O(logn)  \n   ~~~~ \n        int i=1;\n        while(i<n)\n        {\n              i=i*2;\n        }\n~~~~\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了x=log2n次，所以其时间复杂度为O(logn)。\n\n\n\n\n\n\n## 线性表    \n\n第一个数据结构     \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；\n\n### 定义       \n\n   **线性表（List）：** 由零个或多个数据元素组成的有限序列。\n    [若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的直接前驱元素,ai+1是ai的直接后继元素。]      \n    \n   所以线性表元素的个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。    \n\n    \n   **注**  这里需要强调几个关键的地方：    \n    1.首先它是一个序列，也就是说元素之间是有个先来后到的，像刚才的小蝌蚪就没有顺序。    \n    \n   2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继。    \n    \n   3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n### 抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n**C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n- 抽象数据类型（Abstract Data Type，ADT）  \n   是指一个数学模型及定义在该模型上的一组操作（将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）    \n\n   **标准格式：**   \n    \n     ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   \n    \n    // [       \nInitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     \n   \n    ]\n    endADT    \n    \n    \n    \n    \n    **exp:**     \n    \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，弱不存在，则插入A中即可。      \n ~~~~ \n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n~~~~\n\n\n\n ### 线性表的存储结构  \n     \n- 顺序存储结构    \n\n    -  概念：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n    \n    -  物理上的存储方式：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n    - 顺序存储结构封装需要三个属性：   \n        1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n        \n        2.线性表的最大存储容量：数组的长度MaxSize。  \n        \n        3.线性表的当前长度：length。   \n        \n        4.注意，数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。   \n        \n        \n    **注**线性表开始位置为1；   \n    \n    - 地址计算方式：   \n        1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n        \n        2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为随机存储结构。    \n        \n        \n    - 获取元素操作；   \n        \n        实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见       \n        \n    - 插入操作：  \n    \n        ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见     \n        \n**PS：**时间复杂度为O(n)  \n\n    - 删除操作：    \n     \n       1.如果删除位置不合理，抛出异常；\n       2.取出删除元素；\n       3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n        4.表长-1。   \n          \n**PS：**时间复杂度为O(n)\n\n\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n\n- 链式存储结构       \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点\n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：**头指针和头结点的异同：   \n - 头指针：  \n   \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n\n  3.头结点不一定是链表的必须要素。   \n  \n    \n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n**注：** 头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n**单链表的读取：**  \n获得链表第i个数据的算法思路：\n\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，返回结点p的数据。\n\n5.算法的C语言实现代码，GetElem.c   \n\n**注：**首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n**单链表的插入：**   \n\n**exp：**假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n**代码实现：**   \n~~~~\ns->next = p->next;\np->next = s;\n    \n~~~~   \n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，在系统中生成一个空结点s；\n\n5.将数据元素e赋值给s->data；\n\n6.单链表的插入刚才两个标准语句；\n\n7.返回成功。     \n\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，将欲删除结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next = q->next；\n\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点。    \n\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.",[[1533253951336,["gjx16@GJXAIOU",[[1,1701,"￥￥"]],[1701,1701],[1703,1703]]],[1533253953473,["gjx16@GJXAIOU",[[-1,1701,"￥￥"]],[1703,1703],[1701,1701]]],[1533253954233,["gjx16@GJXAIOU",[[1,1701,"￥￥"]],[1701,1701],[1703,1703]]],[1533253954946,["gjx16@GJXAIOU",[[-1,1701,"￥￥"]],[1703,1703],[1701,1701]]],[1533253956485,["gjx16@GJXAIOU",[[1,1701,"$$"]],[1701,1701],[1703,1703]]],[1533253961758,["gjx16@GJXAIOU",[[1,1710," "]],[1710,1710],[1711,1711]]],[1533253966268,["gjx16@GJXAIOU",[[1,1703," "]],[1703,1703],[1704,1704]]],[1533253973346,["gjx16@GJXAIOU",[[1,1712,"￥￥"]],[1712,1712],[1714,1714]]],[1533253974620,["gjx16@GJXAIOU",[[-1,1712,"￥￥"]],[1714,1714],[1712,1712]]],[1533253976384,["gjx16@GJXAIOU",[[1,1712,"$$"]],[1712,1712],[1714,1714]]],[1533253984543,["gjx16@GJXAIOU",[[1,1710,"^"]],[1710,1710],[1711,1711]]],[1533254023286,["gjx16@GJXAIOU",[[1,1748,"()"]],[1748,1748],[1750,1750]]],[1533254027646,["gjx16@GJXAIOU",[[1,1749,"diyid"]],[1749,1749],[1754,1754]]],[1533254028886,["gjx16@GJXAIOU",[[-1,1749,"diyid"]],[1754,1754],[1749,1749]]],[1533254037101,["gjx16@GJXAIOU",[[1,1749,"第一个数据结构"]],[1749,1749],[1756,1756]]],[1533254040905,["gjx16@GJXAIOU",[[-1,1762,"第一个数据结构     \n"]],[1762,1775],[1762,1762]]],[1533254043987,["gjx16@GJXAIOU",[[-1,1762,"\n"]],[1762,1762],[1761,1761]]],[1533254102807,["gjx16@GJXAIOU",[[1,1805,"1."]],[1805,1805],[1807,1807]]],[1533254105945,["gjx16@GJXAIOU",[[1,1846,"2."]],[1846,1846],[1848,1848]]],[1533254109808,["gjx16@GJXAIOU",[[-1,1950,"所以"]],[1952,1952],[1950,1950]]],[1533254111737,["gjx16@GJXAIOU",[[1,1950,"3."]],[1950,1950],[1952,1952]]],[1533254114577,["gjx16@GJXAIOU",[[1,1841,"  2. \n  "]],[1841,1841],[1849,1849]]],[1533254124192,["gjx16@GJXAIOU",[[-1,1844,"  2. "]],[1849,1849],[1844,1844]]],[1533254127449,["gjx16@GJXAIOU",[[-1,1848," "]],[1849,1849],[1848,1848]]],[1533254132775,["gjx16@GJXAIOU",[[-1,1850,"["]],[1851,1851],[1850,1850]]],[1533254136053,["gjx16@GJXAIOU",[[-1,1935,"]"]],[1936,1936],[1935,1935]]],[1533254199117,[null,[[-1,1843,"2"],[1,1844,"\n"]],[1843,1843],[1845,1845]]],[1533254199117,[null,[[1,1843,"2"],[-1,1843,"\n"]],[1845,1845],[1843,1843]]],[1533254150829,["gjx16@GJXAIOU",[[1,1913," **"]],[1913,1913],[1916,1916]]],[1533254150866,["gjx16@GJXAIOU",[[1,1916,"**"]],[1916,1916],[1916,1916]]],[1533254155270,["gjx16@GJXAIOU",[[-1,1914,"****"]],[1918,1918],[1914,1914]]],[1533254159057,["gjx16@GJXAIOU",[[1,1914,"****"]],[1914,1914],[1916,1916]]],[1533254162848,["gjx16@GJXAIOU",[[-1,1914,"****"]],[1914,1918],[1914,1914]]],[1533254167386,["gjx16@GJXAIOU",[[1,1914,"**"],[1,1920,"**"]],[1914,1920],[1914,1924]]],[1533254175367,["gjx16@GJXAIOU",[[1,1933,"**"],[1,1939,"** "]],[1933,1939],[1934,1934]]],[1533254181126,["gjx16@GJXAIOU",[[1,1980,"**"],[1,1986,"**"]],[1980,1986],[1980,1990]]],[1533254185541,["gjx16@GJXAIOU",[[1,1999,"**"],[1,2001,"**"]],[1999,2001],[1999,2005]]],[1533254259115,[null,[[-1,1843,"2"],[1,1844,"\n"],[1,1933," "],[-1,1943," "]],[1843,1843],[1943,1943]]],[1533254259115,[null,[[1,1843,"2"],[-1,1843,"\n"],[-1,1933," "],[1,1944," "]],[1943,1943],[1843,1843]]],[1533254205565,["gjx16@GJXAIOU",[[-1,2015," "]],[2016,2016],[2015,2015]]],[1533254222532,["gjx16@GJXAIOU",[[-1,2076,"，像刚才的小蝌蚪就没有顺序"]],[2076,2089],[2076,2076]]],[1533254233118,["gjx16@GJXAIOU",[[1,2126,"**"]],[2126,2126],[2128,2128]]],[1533254233157,["gjx16@GJXAIOU",[[1,2128,"**"]],[2128,2128],[2128,2128]]],[1533254236510,["gjx16@GJXAIOU",[[-1,2126,"****"]],[2130,2130],[2126,2126]]],[1533254240100,["gjx16@GJXAIOU",[[1,2126,"**"],[1,2130,"**"]],[2126,2130],[2126,2134]]],[1533254319128,[null,[[-1,1843,"2"],[1,1844,"\n"],[1,1933," "],[-1,1943," "]],[1843,1843],[1943,1943]]],[1533254319128,[null,[[1,1843,"2"],[-1,1843,"\n"],[-1,1933," "],[1,1944," "]],[1943,1943],[1843,1843]]],[1533254271423,["gjx16@GJXAIOU",[[1,1786,"   "]],[1786,1786],[1789,1789]]],[1533254271821,["gjx16@GJXAIOU",[[1,1791,"\n"]],[1789,1789],[1790,1790]]],[1533254272054,["gjx16@GJXAIOU",[[1,1792,"\n"]],[1790,1790],[1791,1791]]],[1533254273818,["gjx16@GJXAIOU",[[1,1793,"\n"]],[1791,1791],[1792,1792]]],[1533254278150,["gjx16@GJXAIOU",[[1,2208,"   \n"]],[2207,2207],[2211,2211]]],[1533254278303,["gjx16@GJXAIOU",[[-1,2208,"   "],[1,2211,"\n"]],[2211,2211],[2209,2209]]],[1533254278468,["gjx16@GJXAIOU",[[1,2211,"\n"]],[2209,2209],[2210,2210]]],[1533254278667,["gjx16@GJXAIOU",[[1,2212,"\n"]],[2210,2210],[2211,2211]]],[1533254279024,["gjx16@GJXAIOU",[[1,2213,"\n"]],[2211,2211],[2212,2212]]],[1533254559147,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "]],[1849,1849],[1949,1949]]],[1533254559147,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "]],[1949,1949],[1849,1849]]],[1533254555553,["gjx16@GJXAIOU",[[1,2413,"即"]],[2413,2413],[2414,2414]]],[1533254619163,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "]],[1849,1849],[1949,1949]]],[1533254619163,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "]],[1949,1949],[1849,1849]]],[1533254581194,["gjx16@GJXAIOU",[[1,2412,"\n   //"]],[2412,2412],[2418,2418]]],[1533254588873,["gjx16@GJXAIOU",[[-1,2416,"//"]],[2418,2418],[2416,2416]]],[1533254597336,["gjx16@GJXAIOU",[[1,2416,"~~"]],[2416,2416],[2418,2418]]],[1533254597375,["gjx16@GJXAIOU",[[1,2418,"~~"]],[2418,2418],[2418,2418]]],[1533254602691,["gjx16@GJXAIOU",[[1,2467,"~~"]],[2467,2467],[2469,2469]]],[1533254602728,["gjx16@GJXAIOU",[[1,2469,"~~"]],[2469,2469],[2469,2469]]],[1533254618868,["gjx16@GJXAIOU",[[-1,2467,"~~~~  "]],[2466,2472],[2466,2466]]],[1533254679169,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "]],[1849,1849],[1949,1949]]],[1533254679169,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "]],[1949,1949],[1849,1849]]],[1533254628510,["gjx16@GJXAIOU",[[1,2469,"  ~~"]],[2469,2469],[2473,2473]]],[1533254628547,["gjx16@GJXAIOU",[[1,2473,"~~"]],[2473,2473],[2473,2473]]],[1533254640937,["gjx16@GJXAIOU",[[1,2471,"  "]],[2469,2469],[2471,2471]]],[1533254645924,["gjx16@GJXAIOU",[[-1,2471,"  ~~~~"]],[2472,2477],[2471,2471]]],[1533254648684,["gjx16@GJXAIOU",[[-1,2416,"~~~~"]],[2420,2420],[2416,2416]]],[1533254799180,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "]],[1849,1849],[1949,1949]]],[1533254799180,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "]],[1949,1949],[1849,1849]]],[1533254772909,["gjx16@GJXAIOU",[[1,2353,"\n"]],[2352,2352],[2353,2353]]],[1533254773055,["gjx16@GJXAIOU",[[1,2354,"\n"]],[2353,2353],[2354,2354]]],[1533254790702,["gjx16@GJXAIOU",[[1,2393,"- **"]],[2393,2393],[2397,2397]]],[1533254794467,["gjx16@GJXAIOU",[[1,2397,"**概念"]],[2397,2397],[2399,2399]]],[1533254798971,["gjx16@GJXAIOU",[[-1,2401,"是"]],[2401,2402],[2401,2401]]],[1533254859186,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[1,2397,"概念"],[-1,2399,"概念"]],[1849,1849],[2399,2399]]],[1533254859186,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[-1,2397,"概念"],[1,2401,"概念"]],[2399,2399],[1849,1849]]],[1533254801069,["gjx16@GJXAIOU",[[1,2399,"："]],[2399,2399],[2400,2400]]],[1533254806205,["gjx16@GJXAIOU",[[1,2481,"- "]],[2481,2481],[2483,2483]]],[1533254810612,["gjx16@GJXAIOU",[[1,2390,"- \n"]],[2389,2389],[2392,2392]]],[1533254812775,["gjx16@GJXAIOU",[[-1,2390,"- "]],[2392,2392],[2390,2390]]],[1533254851399,["gjx16@GJXAIOU",[[1,2992,"- 常用的操作  - \n    "]],[2992,2992],[3008,3008]]],[1533254853251,["gjx16@GJXAIOU",[[-1,3006,"- "]],[3008,3008],[3006,3006]]],[1533254919196,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,3001,"- "],[1,3004,"  "]],[1849,1849],[3006,3006]]],[1533254919196,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,3001,"- "],[-1,3002,"  "]],[3006,3006],[1849,1849]]],[1533254860681,["gjx16@GJXAIOU",[[-1,2603,"InitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     "]],[2603,2957],[2603,2603]]],[1533254863211,["gjx16@GJXAIOU",[[1,2652,"InitList(*L): 初始化操作，建立一个空的线性表L。    \nListEmpty(L): 判断线性表是否为空表，若线性表为空，返回true，否则返回false。   \nClearList(*L): 将线性表清空。    \nGetElem(L,i,*e): 将线性表L中的第i个位置元素值返回给e。    \nLocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L): 返回线性表L的元素个数。     "]],[2652,2652],[3006,3006]]],[1533254865247,["gjx16@GJXAIOU",[[1,2647,"  - \n    "]],[2647,2647],[2656,2656]]],[1533254867037,["gjx16@GJXAIOU",[[-1,2654,"- "]],[2656,2656],[2654,2654]]],[1533254878989,["gjx16@GJXAIOU",[[1,2654,"函数 |作用   \n    "]],[2654,2654],[2668,2668]]],[1533254879105,["gjx16@GJXAIOU",[[-1,2664,"    "],[1,2668,"\n"]],[2668,2668],[2665,2665]]],[1533254880196,["gjx16@GJXAIOU",[[-1,2665,"\n"]],[2665,2665],[2664,2664]]],[1533254880734,["gjx16@GJXAIOU",[[-1,2664,"\n"]],[2664,2664],[2663,2663]]],[1533254892363,["gjx16@GJXAIOU",[[1,2668,"\n    ---|---"]],[2663,2663],[2675,2675]]],[1533254907333,["gjx16@GJXAIOU",[[1,2694,"  | "]],[2694,2694],[2698,2698]]],[1533254911239,["gjx16@GJXAIOU",[[1,2734," | "]],[2734,2734],[2737,2737]]],[1533254913678,["gjx16@GJXAIOU",[[1,2791," |"]],[2790,2790],[2792,2792]]],[1533254917827,["gjx16@GJXAIOU",[[1,2822," |"]],[2821,2821],[2823,2823]]],[1533254979211,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2649,"- "],[1,2652,"  "],[-1,2665,"\n  \n "],[1,2680,"\n    "],[-1,2791," "],[1,2793," "],[-1,2822," "],[1,2824," "]],[1849,1849],[2825,2825]]],[1533254979211,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2649,"- "],[-1,2650,"  "],[1,2665,"\n  \n "],[-1,2675,"\n    "],[1,2791," "],[-1,2792," "],[1,2822," "],[-1,2823," "]],[2825,2825],[1849,1849]]],[1533254920447,["gjx16@GJXAIOU",[[1,2866," |"]],[2866,2866],[2868,2868]]],[1533254923378,["gjx16@GJXAIOU",[[1,2945," |"]],[2944,2944],[2946,2946]]],[1533254927109,["gjx16@GJXAIOU",[[1,2990," |"]],[2989,2989],[2991,2991]]],[1533254930199,["gjx16@GJXAIOU",[[1,3034," |"]],[3034,3034],[3036,3036]]],[1533254939969,["gjx16@GJXAIOU",[[1,2654,"|"]],[2654,2654],[2655,2655]]],[1533254942627,["gjx16@GJXAIOU",[[1,2669,"|"]],[2669,2669],[2670,2670]]],[1533254945426,["gjx16@GJXAIOU",[[1,2663,"|"]],[2663,2663],[2664,2664]]],[1533254948395,["gjx16@GJXAIOU",[[-1,2677,"-"]],[2678,2678],[2677,2677]]],[1533254952826,["gjx16@GJXAIOU",[[1,2677,"- |"]],[2677,2677],[2680,2680]]],[1533254956308,["gjx16@GJXAIOU",[[1,2684,"|"]],[2684,2684],[2685,2685]]],[1533254961104,["gjx16@GJXAIOU",[[1,2721,"|"]],[2721,2721],[2722,2722]]],[1533254965348,["gjx16@GJXAIOU",[[1,2674,"--"]],[2674,2674],[2676,2676]]],[1533254970951,["gjx16@GJXAIOU",[[1,2680,"--"]],[2680,2680],[2682,2682]]],[1533255099211,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2649,"- "],[1,2652,"  "],[-1,2667,"\n"],[-1,2669," |\n"],[-1,2674,"--  "],[1,2678,"|-"],[-1,2682," "],[-1,2685,"|"],[-1,2688,"|"],[1,2690,"- |\n   | "],[-1,2802," "],[1,2804," "],[-1,2833," "],[1,2835," "],[-1,2956," "],[1,2958," "],[-1,3001," "],[1,3003," "]],[1849,1849],[3004,3004]]],[1533255099211,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2649,"- "],[-1,2650,"  "],[1,2667,"\n"],[1,2668," |\n"],[1,2670,"--  "],[-1,2670,"|-"],[1,2676," "],[1,2678,"|"],[1,2680,"|"],[-1,2681,"- |\n   | "],[1,2802," "],[-1,2803," "],[1,2833," "],[-1,2834," "],[1,2956," "],[-1,2957," "],[1,3001," "],[-1,3002," "]],[3004,3004],[1849,1849]]],[1533255043019,["gjx16@GJXAIOU",[[1,2649,"    - \n    "]],[2649,2649],[2660,2660]]],[1533255046257,["gjx16@GJXAIOU",[[-1,2658,"- "]],[2660,2660],[2658,2658]]],[1533255051890,["gjx16@GJXAIOU",[[1,2740,"|"]],[2740,2740],[2741,2741]]],[1533255055137,["gjx16@GJXAIOU",[[-1,2740,"|"]],[2741,2741],[2740,2740]]],[1533255058206,["gjx16@GJXAIOU",[[-1,2697,"|"]],[2698,2698],[2697,2697]]],[1533255061965,["gjx16@GJXAIOU",[[-1,2733,"|    "]],[2738,2738],[2733,2733]]],[1533255068882,["gjx16@GJXAIOU",[[-1,2679,"|"]],[2680,2680],[2679,2679]]],[1533255073091,["gjx16@GJXAIOU",[[-1,2663,"|"]],[2664,2664],[2663,2663]]],[1533255075434,["gjx16@GJXAIOU",[[-1,2671,"| "]],[2673,2673],[2671,2671]]],[1533255078177,["gjx16@GJXAIOU",[[-1,2688,"|"]],[2689,2689],[2688,2688]]],[1533255084843,["gjx16@GJXAIOU",[[-1,2689,"    "]],[2693,2693],[2689,2689]]],[1533255092659,["gjx16@GJXAIOU",[[1,2675,"|"]],[2675,2675],[2676,2676]]],[1533255098183,["gjx16@GJXAIOU",[[1,2689,"|"]],[2689,2689],[2690,2690]]],[1533255159224,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- \n"],[1,2656,"\n "],[-1,2658,"-"],[1,2661," "],[1,2663," "],[-1,2673,"\n"],[-1,2675,"| \n"],[1,2679,"|"],[-1,2682,"  "],[1,2684,"---|-"],[-1,2690,"-"],[1,2691,"\n"],[-1,2798," "],[1,2800," "],[-1,2829," "],[1,2831," "],[-1,2952," "],[1,2954," "],[-1,2997," "],[1,2999," "]],[1849,1849],[3000,3000]]],[1533255159224,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- \n"],[-1,2653,"\n "],[1,2657,"-"],[-1,2659," "],[-1,2662," "],[1,2673,"\n"],[1,2674,"| \n"],[-1,2675,"|"],[1,2679,"  "],[-1,2679,"---|-"],[1,2690,"-"],[-1,2690,"\n"],[1,2798," "],[-1,2799," "],[1,2829," "],[-1,2830," "],[1,2952," "],[-1,2953," "],[1,2997," "],[-1,2998," "]],[3000,3000],[1849,1849]]],[1533255103115,["gjx16@GJXAIOU",[[1,2691,"|"]],[2691,2691],[2692,2692]]],[1533255106996,["gjx16@GJXAIOU",[[1,2727,"|"]],[2727,2727],[2728,2728]]],[1533255110522,["gjx16@GJXAIOU",[[1,2692," "]],[2692,2692],[2693,2693]]],[1533255115074,["gjx16@GJXAIOU",[[1,2730,"| "]],[2730,2730],[2732,2732]]],[1533255119071,["gjx16@GJXAIOU",[[1,2785,"|"]],[2785,2785],[2786,2786]]],[1533255122654,["gjx16@GJXAIOU",[[1,2789,"| "]],[2789,2789],[2791,2791]]],[1533255124914,["gjx16@GJXAIOU",[[1,2815,"|"]],[2815,2815],[2816,2816]]],[1533255131334,["gjx16@GJXAIOU",[[1,2662,"|"]],[2662,2662],[2663,2663]]],[1533255133603,["gjx16@GJXAIOU",[[1,2672,"|"]],[2672,2672],[2673,2673]]],[1533255139069,["gjx16@GJXAIOU",[[1,2862,"|"]],[2862,2862],[2863,2863]]],[1533255142621,["gjx16@GJXAIOU",[[1,2823,"|"]],[2823,2823],[2824,2824]]],[1533255147094,["gjx16@GJXAIOU",[[-1,2674,"  "]],[2676,2676],[2674,2674]]],[1533255148948,["gjx16@GJXAIOU",[[-1,2673,"\n"]],[2674,2674],[2673,2673]]],[1533255152374,["gjx16@GJXAIOU",[[1,2674,"\n   "]],[2674,2674],[2678,2678]]],[1533255156402,["gjx16@GJXAIOU",[[-1,2660,"  "]],[2662,2662],[2660,2660]]],[1533255219227,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2677," \n "],[-1,2683,"  "],[1,2685,"---|-"],[-1,2691,"-"],[1,2692,"\n"],[-1,2807," "],[1,2809," "],[-1,2840," "],[1,2842," "],[-1,2964," "],[1,2966," "],[-1,3009," "],[1,3011," "]],[1849,1849],[3012,3012]]],[1533255219227,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2677," \n "],[1,2680,"  "],[-1,2680,"---|-"],[1,2691,"-"],[-1,2691,"\n"],[1,2807," "],[-1,2808," "],[1,2840," "],[-1,2841," "],[1,2964," "],[-1,2965," "],[1,3009," "],[-1,3010," "]],[3012,3012],[1849,1849]]],[1533255160302,["gjx16@GJXAIOU",[[-1,2673,"  "]],[2675,2675],[2673,2673]]],[1533255183561,["gjx16@GJXAIOU",[[-1,3099,"    "]],[3103,3103],[3099,3099]]],[1533255184211,["gjx16@GJXAIOU",[[-1,3099,"\n"]],[3099,3099],[3098,3098]]],[1533255186154,["gjx16@GJXAIOU",[[-1,3096,"  "]],[3098,3098],[3096,3096]]],[1533255192613,["gjx16@GJXAIOU",[[-1,3082,"   "]],[3085,3085],[3082,3082]]],[1533255218660,["gjx16@GJXAIOU",[[1,3560,"\n"]],[3558,3558],[3559,3559]]],[1533255218831,["gjx16@GJXAIOU",[[1,3561,"\n"]],[3559,3559],[3560,3560]]],[1533255219012,["gjx16@GJXAIOU",[[1,3562,"\n"]],[3560,3560],[3561,3561]]],[1533255279232,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255279232,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255273415,["gjx16@GJXAIOU",[[1,3568," "]],[3568,3568],[3569,3569]]],[1533255276426,["gjx16@GJXAIOU",[[-1,3563," ###  "]],[3569,3569],[3563,3563]]],[1533255277364,["gjx16@GJXAIOU",[[-1,3562,"\n"]],[3563,3563],[3562,3562]]],[1533255339233,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255339233,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255282666,["gjx16@GJXAIOU",[[1,3562,"K##"]],[3562,3562],[3565,3565]]],[1533255284034,["gjx16@GJXAIOU",[[-1,3562,"K##"]],[3565,3565],[3562,3562]]],[1533255286698,["gjx16@GJXAIOU",[[1,3562,"### "]],[3562,3562],[3566,3566]]],[1533255399229,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255399229,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255362720,["gjx16@GJXAIOU",[[1,3734,"\n    - "]],[3727,3727],[3734,3734]]],[1533255366074,["gjx16@GJXAIOU",[[-1,3732,"- "]],[3734,3734],[3732,3732]]],[1533255519237,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255519237,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255503352,["gjx16@GJXAIOU",[[-1,3912,"4."]],[3914,3914],[3912,3912]]],[1533255509296,["gjx16@GJXAIOU",[[1,3912,"**"],[1,3914,"**"]],[3912,3914],[3912,3918]]],[1533255511851,["gjx16@GJXAIOU",[[-1,3918,"，"]],[3919,3919],[3918,3918]]],[1533255518564,["gjx16@GJXAIOU",[[1,3916,"："]],[3916,3916],[3917,3917]]],[1533255579240,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255579240,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255525169,["gjx16@GJXAIOU",[[1,3919," "]],[3919,3919],[3920,3920]]],[1533255639248,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255639248,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255595095,["gjx16@GJXAIOU",[[1,3920,"1."]],[3920,3920],[3922,3922]]],[1533255597661,["gjx16@GJXAIOU",[[1,3920,"\n        "]],[3920,3920],[3929,3929]]],[1533255602020,["gjx16@GJXAIOU",[[-1,4034,"**注**"],[1,4039,"2."]],[4034,4039],[4036,4036]]],[1533255605804,["gjx16@GJXAIOU",[[-1,4021,"        "]],[4029,4029],[4021,4021]]],[1533255606019,["gjx16@GJXAIOU",[[-1,4021,"\n"]],[4021,4021],[4020,4020]]],[1533255611559,["gjx16@GJXAIOU",[[1,4025,"    "]],[4025,4025],[4029,4029]]],[1533255699247,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255699247,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255688521,["gjx16@GJXAIOU",[[1,4527," "]],[4527,4527],[4528,4528]]],[1533255690284,["gjx16@GJXAIOU",[[1,4689," "]],[4689,4689],[4690,4690]]],[1533255759253,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255759253,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255700737,["gjx16@GJXAIOU",[[-1,4659," "]],[4660,4660],[4659,4659]]],[1533255709072,["gjx16@GJXAIOU",[[1,4703,"  "]],[4703,4703],[4705,4705]]],[1533255710915,["gjx16@GJXAIOU",[[1,4715,"  "]],[4714,4714],[4716,4716]]],[1533255712771,["gjx16@GJXAIOU",[[1,4776,"  "]],[4775,4775],[4777,4777]]],[1533255723554,["gjx16@GJXAIOU",[[1,4705,"  "]],[4705,4705],[4707,4707]]],[1533255735736,["gjx16@GJXAIOU",[[1,4719,"  "]],[4719,4719],[4721,4721]]],[1533255737403,["gjx16@GJXAIOU",[[1,4782,"  "]],[4782,4782],[4784,4784]]],[1533255741952,["gjx16@GJXAIOU",[[1,4707,"  "]],[4707,4707],[4709,4709]]],[1533255745521,["gjx16@GJXAIOU",[[-1,4703,"      "]],[4709,4709],[4703,4703]]],[1533255747750,["gjx16@GJXAIOU",[[-1,4702,"\n"]],[4703,4703],[4702,4702]]],[1533255750433,["gjx16@GJXAIOU",[[1,4702,"    "]],[4702,4702],[4706,4706]]],[1533255756955,["gjx16@GJXAIOU",[[-1,4701,"\n"]],[4701,4701],[4700,4700]]],[1533255819249,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255819249,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255771418,["gjx16@GJXAIOU",[[-1,4558,"     "]],[4563,4563],[4558,4558]]],[1533255772598,["gjx16@GJXAIOU",[[-1,4558,"\n"]],[4558,4558],[4557,4557]]],[1533255785503,["gjx16@GJXAIOU",[[1,4713,"  "]],[4713,4713],[4715,4715]]],[1533255787590,["gjx16@GJXAIOU",[[1,4778,"  "]],[4778,4778],[4780,4780]]],[1533255879259,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255879259,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255835244,["gjx16@GJXAIOU",[[1,4902,"："]],[4902,4902],[4903,4903]]],[1533255837890,["gjx16@GJXAIOU",[[1,4965,"："]],[4965,4965],[4966,4966]]],[1533255999269,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533255999269,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533255979258,["gjx16@GJXAIOU",[[1,7021,"      \n "]],[7021,7021],[7029,7029]]],[1533255979469,["gjx16@GJXAIOU",[[-1,7028," "],[1,7029,"\n\n"]],[7029,7029],[7029,7029]]],[1533255979652,["gjx16@GJXAIOU",[[1,7030,"\n"]],[7029,7029],[7030,7030]]],[1533255979860,["gjx16@GJXAIOU",[[1,7031,"\n"]],[7030,7030],[7031,7031]]],[1533256179287,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "]],[1849,1849],[3010,3010]]],[1533256179287,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "]],[3010,3010],[1849,1849]]],[1533256169926,["gjx16@GJXAIOU",[[1,7032,"\n"]],[7029,7029],[7030,7030]]],[1533256170110,["gjx16@GJXAIOU",[[1,7033,"\n"]],[7030,7030],[7031,7031]]],[1533256171290,["gjx16@GJXAIOU",[[1,7031,"**"]],[7031,7031],[7033,7033]]],[1533256175734,["gjx16@GJXAIOU",[[1,7033,"**单链表的"]],[7033,7033],[7037,7037]]],[1533256239285,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7039,"**"]],[1849,1849],[7041,7041]]],[1533256239285,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7037,"**"]],[7041,7041],[1849,1849]]],[1533256206277,["gjx16@GJXAIOU",[[1,7037,"整表创建"]],[7037,7037],[7041,7041]]],[1533256299287,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"]],[1849,1849],[7045,7045]]],[1533256299287,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"]],[7045,7045],[1849,1849]]],[1533256295804,["gjx16@GJXAIOU",[[1,7044,"占用空间的大小的"]],[7044,7044],[7052,7052]]],[1533256297006,["gjx16@GJXAIOU",[[-1,7051,"的"]],[7052,7052],[7051,7051]]],[1533256298685,["gjx16@GJXAIOU",[[1,7051,"和"]],[7051,7051],[7052,7052]]],[1533256359289,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"]],[1849,1849],[7045,7045]]],[1533256359289,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"]],[7045,7045],[1849,1849]]],[1533256336383,["gjx16@GJXAIOU",[[1,7052,"位置不需要预先分配划定，可以根据系统情况和实际需求划定；"]],[7052,7052],[7080,7080]]],[1533256351257,["gjx16@GJXAIOU",[[1,7082,"\n"]],[7080,7080],[7081,7081]]],[1533256351539,["gjx16@GJXAIOU",[[1,7083,"\n"]],[7081,7081],[7082,7082]]],[1533256419306,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"]],[1849,1849],[7045,7045]]],[1533256419306,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"]],[7045,7045],[1849,1849]]],[1533256364606,["gjx16@GJXAIOU",[[1,7082,"创建思路“"]],[7082,7082],[7087,7087]]],[1533256365959,["gjx16@GJXAIOU",[[-1,7086,"“"]],[7087,7087],[7086,7086]]],[1533256368337,["gjx16@GJXAIOU",[[1,7086,"： "]],[7086,7086],[7088,7088]]],[1533256368850,["gjx16@GJXAIOU",[[1,7090,"\n"]],[7088,7088],[7089,7089]]],[1533256379505,["gjx16@GJXAIOU",[[1,7089,"–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。"]],[7089,7089],[7167,7167]]],[1533256384255,["gjx16@GJXAIOU",[[1,7169,"\n"]],[7168,7168],[7169,7169]]],[1533256384399,["gjx16@GJXAIOU",[[1,7170,"\n"]],[7169,7169],[7170,7170]]],[1533256384563,["gjx16@GJXAIOU",[[1,7171,"\n"]],[7170,7170],[7171,7171]]],[1533256384699,["gjx16@GJXAIOU",[[1,7172,"\n"]],[7171,7171],[7172,7172]]],[1533256394798,["gjx16@GJXAIOU",[[-1,7172,"\n"],[1,7173,"- **"]],[7172,7172],[7176,7176]]],[1533256398188,["gjx16@GJXAIOU",[[1,7176,"**头插法"]],[7176,7176],[7179,7179]]],[1533256401602,["gjx16@GJXAIOU",[[1,7181,"  \n- "]],[7181,7181],[7186,7186]]],[1533256410504,["gjx16@GJXAIOU",[[-1,7185," "]],[7186,7186],[7185,7185]]],[1533256410993,["gjx16@GJXAIOU",[[-1,7184,"-"],[1,7185,"\n"]],[7185,7185],[7184,7184]]],[1533256479293,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"]],[1849,1849],[7183,7183]]],[1533256479294,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"]],[7183,7183],[1849,1849]]],[1533256422805,["gjx16@GJXAIOU",[[1,7184,"•头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n•简单来说，就是把新加进的元素放在表头后的第一个位置：\n\n–先让新节点的next指向头节点之后\n\n–然后让表头的next指向新节点"]],[7184,7184],[7310,7310]]],[1533256431623,["gjx16@GJXAIOU",[[-1,7184,"•"]],[7185,7185],[7184,7184]]],[1533256433801,["gjx16@GJXAIOU",[[1,7184,"**"]],[7184,7184],[7186,7186]]],[1533256438622,["gjx16@GJXAIOU",[[1,7186,"**概念："]],[7186,7186],[7189,7189]]],[1533256446537,["gjx16@GJXAIOU",[[-1,7251,"•"]],[7252,7252],[7251,7251]]],[1533256448324,["gjx16@GJXAIOU",[[1,7251,"**"]],[7251,7251],[7253,7253]]],[1533256450780,["gjx16@GJXAIOU",[[1,7253,"**反感"]],[7253,7253],[7255,7255]]],[1533256451981,["gjx16@GJXAIOU",[[-1,7253,"反感"]],[7255,7255],[7253,7253]]],[1533256457695,["gjx16@GJXAIOU",[[1,7253,"方案："]],[7253,7253],[7256,7256]]],[1533256460083,["gjx16@GJXAIOU",[[1,7258," "]],[7258,7258],[7259,7259]]],[1533256461542,["gjx16@GJXAIOU",[[1,7191," "]],[7191,7191],[7192,7192]]],[1533256467574,["gjx16@GJXAIOU",[[1,7324,"   "]],[7324,7324],[7327,7327]]],[1533256468567,["gjx16@GJXAIOU",[[1,7328,"\n"]],[7327,7327],[7328,7328]]],[1533256468760,["gjx16@GJXAIOU",[[1,7329,"\n"]],[7328,7328],[7329,7329]]],[1533256469084,["gjx16@GJXAIOU",[[1,7330,"\n"]],[7329,7329],[7330,7330]]],[1533256469291,["gjx16@GJXAIOU",[[1,7331,"\n"]],[7330,7330],[7331,7331]]],[1533256659299,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"]],[1849,1849],[7261,7261]]],[1533256659299,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"]],[7261,7261],[1849,1849]]],[1533256632249,["gjx16@GJXAIOU",[[1,7329,"```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数种子\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n\n"]],[7328,7328],[7710,7710]]],[1533256719301,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"]],[1849,1849],[7261,7261]]],[1533256719301,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"]],[7261,7261],[1849,1849]]],[1533256681622,["gjx16@GJXAIOU",[[-1,7454,"数种子"]],[7457,7457],[7454,7454]]],[1533256711544,["gjx16@GJXAIOU",[[1,7454,"数函数，得到随机数"]],[7454,7454],[7463,7463]]],[1533256779303,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"]],[1849,1849],[7261,7261]]],[1533256779303,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"]],[7261,7261],[1849,1849]]],[1533256754821,["gjx16@GJXAIOU",[[1,7648,"//rand()%100得到0-99"]],[7648,7648],[7666,7666]]],[1533256959310,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"]],[1849,1849],[7261,7261]]],[1533256959310,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"]],[7261,7261],[1849,1849]]],[1533256919794,["gjx16@GJXAIOU",[[1,7736,"- **"]],[7736,7736],[7740,7740]]],[1533256928197,["gjx16@GJXAIOU",[[1,7740,"**尾插法"]],[7740,7740],[7743,7743]]],[1533256955996,["gjx16@GJXAIOU",[[1,7734,"头插法中生成的链表中节点的"]],[7734,7734],[7747,7747]]],[1533257019307,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7753,"**"],[1,7758,"**"]],[1849,1849],[7760,7760]]],[1533257019307,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7753,"**"],[-1,7756,"**"]],[7760,7760],[1849,1849]]],[1533256969403,["gjx16@GJXAIOU",[[1,7747,"次序和输入的书序相反"]],[7747,7747],[7757,7757]]],[1533256973349,["gjx16@GJXAIOU",[[-1,7753,"书序"]],[7755,7755],[7753,7753]]],[1533256976995,["gjx16@GJXAIOU",[[1,7753,"顺序"]],[7753,7753],[7755,7755]]],[1533256979591,["gjx16@GJXAIOU",[[1,7757,"；"]],[7757,7757],[7758,7758]]],[1533257139309,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"]],[1849,1849],[7771,7771]]],[1533257139309,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"]],[7771,7771],[1849,1849]]],[1533257093956,["gjx16@GJXAIOU",[[1,7771,"```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L;\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n\n"]],[7770,7770],[8160,8160]]],[1533257559317,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"]],[1849,1849],[7771,7771]]],[1533257559318,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"]],[7771,7771],[1849,1849]]],[1533257550618,["gjx16@GJXAIOU",[[1,8161,"\n"]],[8160,8160],[8161,8161]]],[1533257550747,["gjx16@GJXAIOU",[[1,8162,"\n"]],[8161,8161],[8162,8162]]],[1533257550933,["gjx16@GJXAIOU",[[1,8163,"\n"]],[8162,8162],[8163,8163]]],[1533257551050,["gjx16@GJXAIOU",[[1,8164,"\n"]],[8163,8163],[8164,8164]]],[1533257619307,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"]],[1849,1849],[7771,7771]]],[1533257619307,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"]],[7771,7771],[1849,1849]]],[1533257571148,["gjx16@GJXAIOU",[[1,8165,"\n"]],[8160,8160],[8161,8161]]],[1533257571356,["gjx16@GJXAIOU",[[1,8166,"\n"]],[8161,8161],[8162,8162]]],[1533257580998,["gjx16@GJXAIOU",[[1,8162,"**"]],[8162,8162],[8164,8164]]],[1533257591642,["gjx16@GJXAIOU",[[1,8164,"**单链表的整表删除"]],[8164,8164],[8172,8172]]],[1533257594467,["gjx16@GJXAIOU",[[1,8174,"  "]],[8174,8174],[8176,8176]]],[1533257594777,["gjx16@GJXAIOU",[[1,8181,"\n"]],[8176,8176],[8177,8177]]],[1533257595859,["gjx16@GJXAIOU",[[1,8182,"\n"]],[8177,8177],[8178,8178]]],[1533257679318,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533257679318,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533257678797,["gjx16@GJXAIOU",[[1,8178,"•单链表整表删除的算法思路如下：\n\n–声明结点p和q；\n\n–将第一个结点赋值给p，下一结点赋值给q；\n\n–循环执行释放p和将q赋值给p的操作；"]],[8178,8178],[8249,8249]]],[1533257739321,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533257739321,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533257681990,["gjx16@GJXAIOU",[[1,8179,"**"],[1,8194,"**"]],[8179,8194],[8179,8198]]],[1533257684706,["gjx16@GJXAIOU",[[-1,8178,"•"]],[8179,8179],[8178,8178]]],[1533257687549,["gjx16@GJXAIOU",[[1,8197,"  "]],[8197,8197],[8199,8199]]],[1533257738218,["gjx16@GJXAIOU",[[1,8257,"```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)\n    {\n        q = p->next;\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n"]],[8257,8257],[8462,8462]]],[1533257799323,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533257799323,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533257746938,["gjx16@GJXAIOU",[[1,8349,"、、"]],[8349,8349],[8351,8351]]],[1533257748139,["gjx16@GJXAIOU",[[-1,8349,"、、"]],[8351,8351],[8349,8349]]],[1533257751396,["gjx16@GJXAIOU",[[1,8349,"//youshu"]],[8349,8349],[8357,8357]]],[1533257752401,["gjx16@GJXAIOU",[[-1,8351,"youshu"]],[8357,8357],[8351,8351]]],[1533257759965,["gjx16@GJXAIOU",[[1,8351,"有数据情况下"]],[8351,8351],[8357,8357]]],[1533257919324,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533257919324,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533257916766,["gjx16@GJXAIOU",[[1,8384,"//因为对P节点进行删除和内存释放工作的时候，也会将"]],[8384,8384],[8410,8410]]],[1533257979323,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533257979323,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533257946747,["gjx16@GJXAIOU",[[1,8390,"整个"]],[8390,8390],[8392,8392]]],[1533257961328,["gjx16@GJXAIOU",[[1,8412,"，剪下一个环节"]],[8412,8412],[8419,8419]]],[1533257964233,["gjx16@GJXAIOU",[[-1,8413,"剪"]],[8414,8414],[8413,8413]]],[1533257965900,["gjx16@GJXAIOU",[[1,8413,"将"]],[8413,8413],[8414,8414]]],[1533257974231,["gjx16@GJXAIOU",[[1,8419,"指向的指针"]],[8419,8419],[8424,8424]]],[1533258039318,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533258039318,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533258003749,["gjx16@GJXAIOU",[[1,8424,"也会释放掉，需要使用Q临时记载P的下一个节点。"]],[8424,8424],[8447,8447]]],[1533258159334,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"]],[1849,1849],[8176,8176]]],[1533258159334,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"]],[8176,8176],[1849,1849]]],[1533258155571,["gjx16@GJXAIOU",[[-1,8534,"\n"],[1,8535,"**"]],[8534,8534],[8536,8536]]],[1533258158557,["gjx16@GJXAIOU",[[1,8536,"**单链表"]],[8536,8536],[8539,8539]]],[1533258219329,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8541,"**"]],[1849,1849],[8543,8543]]],[1533258219329,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8539,"**"]],[8543,8543],[1849,1849]]],[1533258174939,["gjx16@GJXAIOU",[[1,8539,"与书序存储结构的优缺点"]],[8539,8539],[8550,8550]]],[1533258179450,["gjx16@GJXAIOU",[[1,8539,"结构"]],[8539,8539],[8541,8541]]],[1533258183816,["gjx16@GJXAIOU",[[1,8554,"   "]],[8554,8554],[8557,8557]]],[1533258184001,["gjx16@GJXAIOU",[[1,8557,"\n\n"]],[8557,8557],[8558,8558]]],[1533258184514,["gjx16@GJXAIOU",[[1,8559,"\n"]],[8558,8558],[8559,8559]]],[1533258184754,["gjx16@GJXAIOU",[[1,8560,"\n"]],[8559,8559],[8560,8560]]],[1533258399332,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258399332,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258383684,["gjx16@GJXAIOU",[[1,8559,"存储分配方式"]],[8559,8559],[8565,8565]]],[1533258459333,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258459333,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258403781,["gjx16@GJXAIOU",[[1,8559,"\n"]],[8558,8558],[8559,8559]]],[1533258429104,["gjx16@GJXAIOU",[[1,8559,"比较方面 | 单链表"]],[8559,8559],[8569,8569]]],[1533258433058,["gjx16@GJXAIOU",[[-1,8566,"单链表"]],[8569,8569],[8566,8566]]],[1533258451353,["gjx16@GJXAIOU",[[1,8566,"顺序存储结构 |单链表结构 "]],[8566,8566],[8580,8580]]],[1533258453828,["gjx16@GJXAIOU",[[1,8581,"\n"]],[8580,8580],[8581,8581]]],[1533258459013,["gjx16@GJXAIOU",[[1,8581,"---|"]],[8581,8581],[8585,8585]]],[1533258519334,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258519334,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258462433,["gjx16@GJXAIOU",[[1,8585,"---|---"]],[8585,8585],[8592,8592]]],[1533258467527,["gjx16@GJXAIOU",[[1,8599," |"]],[8599,8599],[8601,8601]]],[1533258579386,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258579386,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258521162,["gjx16@GJXAIOU",[[1,8601,"用一点"]],[8601,8601],[8604,8604]]],[1533258521841,["gjx16@GJXAIOU",[[-1,8603,"点"]],[8604,8604],[8603,8603]]],[1533258524950,["gjx16@GJXAIOU",[[1,8603,"端"]],[8603,8603],[8604,8604]]],[1533258525762,["gjx16@GJXAIOU",[[-1,8603,"端"]],[8604,8604],[8603,8603]]],[1533258538390,["gjx16@GJXAIOU",[[1,8603,"段连续的存续结构"]],[8603,8603],[8611,8611]]],[1533258541085,["gjx16@GJXAIOU",[[-1,8607,"存续结构"]],[8611,8611],[8607,8607]]],[1533258579229,["gjx16@GJXAIOU",[[1,8607,"存储结构依次存储线性表的书籍"]],[8607,8607],[8621,8621]]],[1533258639383,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258639383,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258580025,["gjx16@GJXAIOU",[[-1,8619,"书籍"]],[8621,8621],[8619,8619]]],[1533258586690,["gjx16@GJXAIOU",[[1,8619,"数据结构"]],[8619,8619],[8623,8623]]],[1533258589894,["gjx16@GJXAIOU",[[-1,8621,"结构"]],[8623,8623],[8621,8621]]],[1533258637986,["gjx16@GJXAIOU",[[1,8621,"元素 |采用链式存储结构，用一组任意的存储单元存放线性表的"]],[8621,8621],[8650,8650]]],[1533258699388,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"]],[1849,1849],[8556,8556]]],[1533258699388,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"]],[8556,8556],[1849,1849]]],[1533258641165,["gjx16@GJXAIOU",[[1,8652,"    "]],[8652,8652],[8656,8656]]],[1533258641665,["gjx16@GJXAIOU",[[1,8657,"   |   |   \n"]],[8656,8656],[8657,8660]]],[1533258674231,["gjx16@GJXAIOU",[[1,8659,"时间性能呢"]],[8657,8657],[8664,8664]]],[1533258674899,["gjx16@GJXAIOU",[[-1,8663,"呢"]],[8664,8664],[8663,8663]]],[1533258677029,["gjx16@GJXAIOU",[[1,8668," "]],[8665,8665],[8666,8666]]],[1533258939525,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[1,8663," "],[1,8664," "],[-1,8671," "],[1,8672,"\n"]],[1849,1849],[8673,8673]]],[1533258939525,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[-1,8663," "],[-1,8665," "],[1,8673," "],[-1,8673,"\n"]],[8673,8673],[1849,1849]]],[1533258888045,["gjx16@GJXAIOU",[[1,8666,"**"]],[8666,8666],[8668,8668]]],[1533258892964,["gjx16@GJXAIOU",[[1,8668,"**查找"]],[8668,8668],[8670,8670]]],[1533258906931,["gjx16@GJXAIOU",[[1,8675," ：O（）"]],[8672,8672],[8677,8677]]],[1533258913029,["gjx16@GJXAIOU",[[-1,8677,"   "]],[8680,8680],[8677,8677]]],[1533258920473,["gjx16@GJXAIOU",[[1,8676,"1"]],[8676,8676],[8677,8677]]],[1533258939354,["gjx16@GJXAIOU",[[1,8679,"O（）"]],[8679,8679],[8682,8682]]],[1533258999522,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n"],[1,8652,"元素"],[-1,8656," "],[1,8657,"\n"],[1,8663," "],[-1,8665," *"],[-1,8669,"*"],[-1,8672," |  1： "],[1,8679,"** ：O（1）|"],[1,8684," \n"]],[1849,1849],[8686,8686]]],[1533258999522,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n"],[-1,8650,"元素"],[1,8656," "],[-1,8656,"\n"],[-1,8663," "],[1,8666," *"],[1,8668,"*"],[1,8670," |  1： "],[-1,8670,"** ：O（1）|"],[-1,8684," \n"]],[8686,8686],[1849,1849]]],[1533258942807,["gjx16@GJXAIOU",[[1,8681,"n"]],[8681,8681],[8682,8682]]],[1533258945571,["gjx16@GJXAIOU",[[1,8686," \n  "]],[8683,8683],[8687,8687]]],[1533258953398,["gjx16@GJXAIOU",[[-1,8658," "]],[8659,8659],[8658,8658]]],[1533258963478,["gjx16@GJXAIOU",[[1,8683,"  \n shiji"]],[8682,8682],[8691,8691]]],[1533258964529,["gjx16@GJXAIOU",[[-1,8686,"shiji"]],[8691,8691],[8686,8686]]],[1533258978774,["gjx16@GJXAIOU",[[1,8686,"时间性能 |**"]],[8686,8686],[8694,8694]]],[1533258993338,["gjx16@GJXAIOU",[[1,8694,"**插入和删除："]],[8694,8694],[8700,8700]]],[1533258996410,["gjx16@GJXAIOU",[[-1,8672,"："]],[8673,8673],[8672,8672]]],[1533259059518,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[-1,8667,"**"],[-1,8671,"   1： "],[1,8677,"** O（1）|"],[-1,8683," "],[1,8685," "],[-1,8691,"**"],[-1,8701,"i"],[1,8702,"**"],[-1,8705,"\n"],[1,8708,"  \n\n"]],[1849,1849],[8712,8712]]],[1533259059518,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[1,8667,"**"],[1,8669,"   1： "],[-1,8669,"** O（1）|"],[1,8683," "],[-1,8684," "],[1,8691,"**"],[1,8699,"i"],[-1,8699,"**"],[1,8704,"\n"],[-1,8706,"  \n\n"]],[8712,8712],[1849,1849]]],[1533259020032,["gjx16@GJXAIOU",[[1,8703," 需要平移"]],[8702,8702],[8707,8707]]],[1533259023584,["gjx16@GJXAIOU",[[-1,8705,"平移"]],[8707,8707],[8705,8705]]],[1533259040971,["gjx16@GJXAIOU",[[1,8705,"平均移动表长一般"]],[8705,8705],[8713,8713]]],[1533259041914,["gjx16@GJXAIOU",[[-1,8711,"一般"]],[8713,8713],[8711,8711]]],[1533259054603,["gjx16@GJXAIOU",[[1,8711,"一半的元素，时间为）"]],[8711,8711],[8721,8721]]],[1533259056411,["gjx16@GJXAIOU",[[-1,8720,"）"]],[8721,8721],[8720,8720]]],[1533259058592,["gjx16@GJXAIOU",[[1,8720,"O()"]],[8720,8720],[8723,8723]]],[1533259119519,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[1,8667,"查找："],[-1,8669,"查找   1： "],[1,8677," O（1）|"],[1,8683,"\n"],[-1,8684,"\n"],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8723,"移\n \n"],[1,8727," \n   "],[1,8729,"\n\n"]],[1849,1849],[8731,8731]]],[1533259119519,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[-1,8667,"查找："],[1,8672,"查找   1： "],[-1,8672," O（1）|"],[-1,8684,"\n"],[1,8686,"\n"],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8723,"移\n \n"],[-1,8723," \n   "],[-1,8730,"\n\n"]],[8731,8731],[1849,1849]]],[1533259060745,["gjx16@GJXAIOU",[[1,8722,"n"]],[8722,8722],[8723,8723]]],[1533259064884,["gjx16@GJXAIOU",[[1,8725," |"]],[8724,8724],[8726,8726]]],[1533259079461,["gjx16@GJXAIOU",[[1,8725,"zai"]],[8725,8725],[8728,8728]]],[1533259080711,["gjx16@GJXAIOU",[[-1,8725,"zai"]],[8728,8728],[8725,8725]]],[1533259118619,["gjx16@GJXAIOU",[[1,8727,"在计算出某位置的指针后，插入和删除时间仅为"]],[8727,8727],[8748,8748]]],[1533259179526,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[1,8667,"查找："],[-1,8669,"查找   1： "],[1,8677," O（1）|"],[1,8683,"\n"],[-1,8684,"\n"],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8724,"移"],[1,8727," "],[-1,8750,"\n"],[1,8751,"  "],[1,8753,"\n\n"]],[1849,1849],[8755,8755]]],[1533259179526,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[-1,8667,"查找："],[1,8672,"查找   1： "],[-1,8672," O（1）|"],[-1,8684,"\n"],[1,8686,"\n"],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8724,"移"],[-1,8726," "],[1,8750,"\n"],[-1,8750,"  "],[-1,8754,"\n\n"]],[8755,8755],[1849,1849]]],[1533259120945,["gjx16@GJXAIOU",[[1,8748,"O（）"]],[8748,8748],[8751,8751]]],[1533259122093,["gjx16@GJXAIOU",[[1,8750,"1"]],[8750,8750],[8751,8751]]],[1533259124106,["gjx16@GJXAIOU",[[1,8752,"  "]],[8752,8752],[8754,8754]]],[1533259124443,["gjx16@GJXAIOU",[[1,8758,"|   |   \n   "]],[8754,8754],[8755,8758]]],[1533259135074,["gjx16@GJXAIOU",[[1,8756,"空间性能"]],[8755,8755],[8760,8760]]],[1533259142498,["gjx16@GJXAIOU",[[1,8764,"余姚"]],[8764,8764],[8766,8766]]],[1533259143190,["gjx16@GJXAIOU",[[-1,8764,"余姚"]],[8766,8766],[8764,8764]]],[1533259176603,["gjx16@GJXAIOU",[[1,8764,"需要预分配存储结构，可能会造成空间浪费和"]],[8764,8764],[8784,8784]]],[1533259239522,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[1,8667,"查找："],[-1,8669,"查找   1： "],[1,8677," O（1）|"],[1,8683,"\n"],[-1,8684,"\n"],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8724,"移"],[1,8727," "],[-1,8760,"\n"],[1,8761," "],[1,8795," \n\n"]],[1849,1849],[8798,8798]]],[1533259239522,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[-1,8667,"查找："],[1,8672,"查找   1： "],[-1,8672," O（1）|"],[-1,8684,"\n"],[1,8686,"\n"],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8724,"移"],[-1,8726," "],[1,8760,"\n"],[-1,8760," "],[-1,8795," \n\n"]],[8798,8798],[1849,1849]]],[1533259181660,["gjx16@GJXAIOU",[[1,8784,"溢出"]],[8784,8784],[8786,8786]]],[1533259237124,["gjx16@GJXAIOU",[[1,8790,"不需要分配存储空间，元素个数不受控制     \n "]],[8790,8790],[8815,8815]]],[1533259237945,["gjx16@GJXAIOU",[[-1,8814,"   "],[1,8817,"\n"]],[8815,8815],[8815,8815]]],[1533259299528,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[1,8667,"查找："],[-1,8669,"查找   1： "],[1,8677," O（1）|"],[1,8683,"\n"],[-1,8684,"\n"],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8724,"移"],[1,8727," "],[-1,8760,"\n"],[1,8761," "],[1,8820," \n\n"]],[1849,1849],[8823,8823]]],[1533259299528,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[-1,8667,"查找："],[1,8672,"查找   1： "],[-1,8672," O（1）|"],[-1,8684,"\n"],[1,8686,"\n"],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8724,"移"],[-1,8726," "],[1,8760,"\n"],[-1,8760," "],[-1,8820," \n\n"]],[8823,8823],[1849,1849]]],[1533259242436,["gjx16@GJXAIOU",[[1,8815,"**"]],[8815,8815],[8817,8817]]],[1533259248234,["gjx16@GJXAIOU",[[1,8817,"**综上所述："]],[8817,8817],[8822,8822]]],[1533259265158,["gjx16@GJXAIOU",[[1,8824,"若线性表只需要平方数"]],[8824,8824],[8834,8834]]],[1533259266700,["gjx16@GJXAIOU",[[-1,8831,"平方数"]],[8834,8834],[8831,8831]]],[1533259286010,["gjx16@GJXAIOU",[[1,8831,"频繁的查找，很少进行插入好人"]],[8831,8831],[8845,8845]]],[1533259287003,["gjx16@GJXAIOU",[[-1,8843,"好人"]],[8845,8845],[8843,8843]]],[1533259293900,["gjx16@GJXAIOU",[[1,8843,"和删除操作，"]],[8843,8843],[8849,8849]]],[1533259359527,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n"],[1,8652,"元素"],[-1,8656," "],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[1,8667,"查找："],[-1,8669,"查找   1： "],[1,8677," O（1）|"],[-1,8683," "],[1,8685," "],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8724,"移"],[1,8727," "],[-1,8760,"\n"],[1,8761," "],[-1,8815,"**"],[1,8824,"**"],[1,8854," \n\n"]],[1849,1849],[8857,8857]]],[1533259359527,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n"],[-1,8650,"元素"],[1,8656," "],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[-1,8667,"查找："],[1,8672,"查找   1： "],[-1,8672," O（1）|"],[1,8684," "],[-1,8685," "],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8724,"移"],[-1,8726," "],[1,8760,"\n"],[-1,8760," "],[1,8815,"**"],[-1,8822,"**"],[-1,8854," \n\n"]],[8857,8857],[1849,1849]]],[1533259314574,["gjx16@GJXAIOU",[[1,8849,"宜采用顺序存储结构；   "]],[8849,8849],[8862,8862]]],[1533259315001,["gjx16@GJXAIOU",[[1,8863,"\n"]],[8862,8862],[8863,8863]]],[1533259322877,["gjx16@GJXAIOU",[[1,8864,"\n"]],[8863,8863],[8864,8864]]],[1533259328978,["gjx16@GJXAIOU",[[1,8864,"防止"]],[8864,8864],[8866,8866]]],[1533259329759,["gjx16@GJXAIOU",[[-1,8864,"防止"]],[8866,8866],[8864,8864]]],[1533259333505,["gjx16@GJXAIOU",[[1,8864,"平方数"]],[8864,8864],[8867,8867]]],[1533259335166,["gjx16@GJXAIOU",[[-1,8864,"平方数"]],[8867,8867],[8864,8864]]],[1533259346420,["gjx16@GJXAIOU",[[1,8864,"频繁插入和删除"]],[8864,8864],[8871,8871]]],[1533259404834,[null,[[-1,1849,"2"],[1,1850,"\n"],[1,1939," "],[-1,1949," "],[-1,2398,"**："],[1,2403,"：**"],[-1,2653,"- "],[-1,2658,"-"],[1,2659,"  \n"],[-1,2675," \n "],[-1,2681,"  "],[1,2683,"---|-"],[-1,2689,"-"],[1,2690,"\n"],[-1,2805," "],[1,2807," "],[-1,2838," "],[1,2840," "],[-1,2962," "],[1,2964," "],[-1,3007," "],[1,3009," "],[-1,7033,"**"],[1,7037,"表的"],[-1,7041,"表的"],[1,7043,"**"],[-1,7176,"**"],[1,7181,"**"],[-1,7186,"**"],[1,7191,"**"],[-1,7257,"反感"],[1,7259,"**"],[-1,7764,"**"],[1,7769,"**"],[-1,8164,"**"],[1,8174,"**"],[-1,8536,"**"],[1,8539,"链表"],[-1,8552,"链表"],[1,8554,"**"],[-1,8650,"\n\n "],[1,8653,"元素"],[1,8657,"\n"],[-1,8662,"|"],[1,8664,"|"],[-1,8665,"**"],[-1,8671,"   1"],[1,8676,"**"],[1,8679,"1）|O（"],[1,8683,"\n"],[-1,8684,"\n"],[-1,8691,"*"],[-1,8694,"*"],[-1,8701,"i "],[1,8703,"**"],[1,8705,"要"],[-1,8724,"移"],[1,8727," "],[-1,8760,"\n"],[1,8761," "],[-1,8817,"**"],[1,8824,"**"],[-1,8876,""],[1,8876," \n\n"]],[1849,1849],[8879,8879]]],[1533259404834,[null,[[1,1849,"2"],[-1,1849,"\n"],[-1,1939," "],[1,1950," "],[1,2398,"**："],[-1,2400,"：**"],[1,2653,"- "],[1,2656,"-"],[-1,2656,"  \n"],[1,2675," \n "],[1,2678,"  "],[-1,2678,"---|-"],[1,2689,"-"],[-1,2689,"\n"],[1,2805," "],[-1,2806," "],[1,2838," "],[-1,2839," "],[1,2962," "],[-1,2963," "],[1,3007," "],[-1,3008," "],[1,7033,"**"],[-1,7035,"表的"],[1,7041,"表的"],[-1,7041,"**"],[1,7176,"**"],[-1,7179,"**"],[1,7186,"**"],[-1,7189,"**"],[1,7257,"反感"],[-1,7257,"**"],[1,7764,"**"],[-1,7767,"**"],[1,8164,"**"],[-1,8172,"**"],[1,8536,"**"],[-1,8537,"链表"],[1,8552,"链表"],[-1,8552,"**"],[1,8650,"\n\n "],[-1,8650,"元素"],[-1,8656,"\n"],[1,8662,"|"],[-1,8663,"|"],[1,8665,"**"],[1,8669,"   1"],[-1,8670,"**"],[-1,8675,"1）|O（"],[-1,8684,"\n"],[1,8686,"\n"],[1,8692,"*"],[1,8694,"*"],[1,8700,"i "],[-1,8700,"**"],[-1,8704,"要"],[1,8724,"移"],[-1,8726," "],[1,8760,"\n"],[-1,8760," "],[1,8817,"**"],[-1,8822,"**"],[1,8876,""],[-1,8876," \n\n"]],[8879,8879],[1849,1849]]],[1533259375136,["gjx16@GJXAIOU",[[1,8871,"则宜采用单链表结构；"]],[8871,8871],[8881,8881]]],[1533259378477,["gjx16@GJXAIOU",[[1,8824,"\n"]],[8824,8824],[8825,8825]]],[1533259380052,["gjx16@GJXAIOU",[[1,8825,"1."]],[8825,8825],[8827,8827]]],[1533259382783,["gjx16@GJXAIOU",[[1,8867,"2."]],[8867,8867],[8869,8869]]],[1533259385167,["gjx16@GJXAIOU",[[1,8886,"   "]],[8886,8886],[8889,8889]]],[1533259385524,["gjx16@GJXAIOU",[[1,8890,"\n"]],[8889,8889],[8890,8890]]],[1533259386743,["gjx16@GJXAIOU",[[1,8891,"\n"]],[8890,8890],[8891,8891]]]],null,"gjx16@GJXAIOU"],["3d2e5fbc-33d4-402b-b132-fddc52f019a6",1556434765105,"---\ntags:\n  - 数据结构\nflag: blue\n---\n## 数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系；    \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；   \n\n- **物理结构：** 数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在地址连续的存储单元中； 存储结构与逻辑关系一致；  \n    - 链式存储：将数据元素存储在任一的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n\n---\n\n\n\n## 谈谈算法    \n1.**概念：** 算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n正确性、可读性、健壮性、时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n## 时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 时间复杂度：    \n\n   - 定义：\n        在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的** 增长率**和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：** 简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n   - 分析一个算法的时间复杂度步骤：  \n    1.用常数 1 取代运行时间中的所有加法常数。    \n    2.再修改后的运行次数函数中，只保留最高阶项。    \n    3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n        \n\n\n\n    - 函数调用的时间复杂性分析    \n    \n   （1）时间复杂度O(1)     \n    \n ~~~\n        int a=1,b=3,sum=0;//执行1次   \n        sum=a+b;//执行1次   \n        cout<<\"sum=\"<<sum<<endl;//执行1次       \n~~~\n\n   (2)时间复杂度O(n)   \n     \n~~~\n        for(int i = 0; i < n; i++)//执行n次\n        {\n         cout<<i<<endl;\n        }   \n~~~\n（3）时间复杂度O(n^2)  \n  ~~~~\n        for(int i = 0; i < n; i++)//执行n^2次\n        {\n        for(int j = 0; j < n; j++)\n             {\n        cout<<i<<endl;\n            }\n        }   \n~~~~~\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n   （4）时间复杂度O(logn)  \n   ~~~~ \n        int i=1;\n        while(i<n)\n        {\n              i=i*2;\n        }\n~~~~\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了$$ x=log2^n $$次，所以其时间复杂度为O(logn)。\n\n\n\n\n\n\n## 线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n\n\n\n### 定义       \n\n  1. **线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n\n   2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      \n    \n   3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n   \n   **注**  这里需要强调几个关键的地方：    \n    1.首先它是一个序列，也就是说元素之间是有个先来后到的。    \n    \n   2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n    \n   3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n\n\n\n### 抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n**C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：**指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   \n    \n     ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   \n    \n    // [       \n\n   \n    ]\n    endADT    \n    \n    - 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，弱不存在，则插入A中即可。      \n ~~~~ \n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n~~~~\n\n\n\n\n\n### 线性表的存储结构  \n     \n- 顺序存储结构    \n\n    -  概念：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n    \n    -  物理上的存储方式：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n    \n    - 顺序存储结构封装需要三个属性：   \n        1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n        \n        2.线性表的最大存储容量：数组的长度MaxSize。  \n        \n        3.线性表的当前长度：length。   \n        \n        **注意：** \n        1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。   \n        \n        2.线性表开始位置为1；   \n    \n    - 地址计算方式：   \n        1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n        \n        2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为随机存储结构。    \n        \n        \n    - 获取元素操作；   \n        \n        实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见       \n        \n    - 插入操作：  \n    \n        ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见     \n        \n**PS：** 时间复杂度为O(n)  \n\n    - 删除操作：    \n       1.如果删除位置不合理，抛出异常；\n       2.取出删除元素；\n       3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n       4.表长-1。   \n          \n**PS：** 时间复杂度为O(n)\n\n    - 总结   \n        - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n        - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n\n- 链式存储结构       \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：\n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：**头指针和头结点的异同：   \n - 头指针：  \n   \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n\n  3.头结点不一定是链表的必须要素。   \n  \n    \n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n**注：** 头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n**单链表的读取：**  \n获得链表第i个数据的算法思路：\n\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，返回结点p的数据。\n\n5.算法的C语言实现代码，GetElem.c   \n\n**注：**首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n**单链表的插入：**   \n\n**exp：**假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n**代码实现：**   \n~~~~\ns->next = p->next;\np->next = s;\n    \n~~~~   \n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，在系统中生成一个空结点s；\n\n5.将数据元素e赋值给s->data；\n\n6.单链表的插入刚才两个标准语句；\n\n7.返回成功。     \n\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，将欲删除结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next = q->next；\n\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点。    \n\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n\n–先让新节点的next指向头节点之后\n\n–然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n头插法中生成的链表中节点的次序和输入的顺序相反；\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L;\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n\n\n**单链表的整表删除**  \n\n**单链表整表删除的算法思路如下：**  \n\n–声明结点p和q；\n\n–将第一个结点赋值给p，下一结点赋值给q；\n\n–循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n     \n\n",[[1556434739527,["GJX@GJXAIOU",[[1,152,"互相之后"]],[152,152],[156,156]]],[1556434741421,["GJX@GJXAIOU",[[-1,154,"之后"]],[156,156],[154,154]]],[1556434745473,["GJX@GJXAIOU",[[1,154,"之间没有关系"]],[154,154],[160,160]]],[1556434798622,["GJX@GJXAIOU",[[1,235,"![图形结构]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)"]],[231,231],[295,295]]],[1556434807275,["GJX@GJXAIOU",[[1,295,"\n"]],[295,295],[296,296]]],[1556434819304,["GJX@GJXAIOU",[[1,383,"数据间"]],[383,383],[386,386]]],[1556434884038,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"]],[226,226],[383,383]]],[1556434884038,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"]],[383,383],[226,226]]],[1556434827417,["GJX@GJXAIOU",[[1,400,"（）"]],[400,400],[402,402]]],[1556434833875,["GJX@GJXAIOU",[[1,401,"例如数组"]],[401,401],[405,405]]],[1556434944035,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "]],[226,226],[411,411]]],[1556434944035,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "]],[411,411],[226,226]]],[1556434898203,["GJX@GJXAIOU",[[-1,426,"任一"]],[428,428],[426,426]]],[1556434900717,["GJX@GJXAIOU",[[1,426,"任意"]],[426,426],[428,428]]],[1556435004036,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"]],[226,226],[434,434]]],[1556435004036,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"]],[434,434],[226,226]]],[1556434984221,["GJX@GJXAIOU",[[1,466,"![链式存储结构]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)"]],[466,466],[546,546]]],[1556435364042,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"]],[226,226],[550,550]]],[1556435364042,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"]],[550,550],[226,226]]],[1556435312959,["GJX@GJXAIOU",[[-1,4858,"  "],[-1,4868,"  "],[-1,4933,"  "]],[4856,4946],[4856,4940]]],[1556435313381,["GJX@GJXAIOU",[[-1,4856,"  "],[-1,4866,"  "],[-1,4929,"  "]],[4856,4940],[4856,4934]]],[1556435313780,["GJX@GJXAIOU",[[-1,4866,"  "],[-1,4925,"  "]],[4856,4934],[4856,4930]]],[1556435331647,["GJX@GJXAIOU",[[-1,1351,"  "]],[1354,1368],[1352,1366]]],[1556435332165,["GJX@GJXAIOU",[[-1,1350," "]],[1352,1366],[1352,1366]]],[1556435336263,["GJX@GJXAIOU",[[-1,1207,"  "]],[1210,1225],[1208,1223]]],[1556435336718,["GJX@GJXAIOU",[[-1,1208,"1）时间复杂度O(1)  "]],[1208,1223],[1210,1210]]],[1556435339898,["GJX@GJXAIOU",[[1,1208,"1）时间复杂度O(1)  "]],[1210,1210],[1208,1223]]],[1556435347764,["GJX@GJXAIOU",[[-1,1380,"  "],[-1,1421,"  "],[-1,1425,"  "],[-1,1449,"  "]],[1381,1461],[1379,1453]]],[1556435348239,["GJX@GJXAIOU",[[-1,1378,"  "],[-1,1417,"  "],[-1,1421,"  "],[-1,1443,"  "]],[1379,1453],[1377,1445]]],[1556435349647,["GJX@GJXAIOU",[[-1,1376,"  "],[-1,1413,"  "],[-1,1417,"  "],[-1,1437,"  "]],[1377,1445],[1375,1437]]],[1556435350229,["GJX@GJXAIOU",[[-1,1374,"  "],[-1,1409,"  "],[-1,1413,"  "],[-1,1431,"  "]],[1375,1437],[1374,1429]]],[1556435355591,["GJX@GJXAIOU",[[-1,1464,"  "],[-1,1501,"  "],[-1,1517,"  "],[-1,1546," "],[-1,1558," "],[-1,1561,"  "],[-1,1594,"  "],[-1,1598,"  "]],[1458,1609],[1458,1595]]],[1556435356102,["GJX@GJXAIOU",[[-1,1462,"  "],[-1,1499,"  "],[-1,1511,"  "],[-1,1540," "],[-1,1550," "],[-1,1553,"  "],[-1,1582,"  "],[-1,1586,"  "]],[1458,1595],[1458,1581]]],[1556435356553,["GJX@GJXAIOU",[[-1,1460,"  "],[-1,1497,"  "],[-1,1505,"  "],[-1,1534," "],[-1,1542," "],[-1,1545,"  "],[-1,1570,"  "],[-1,1574,"  "]],[1458,1581],[1458,1567]]],[1556435357028,["GJX@GJXAIOU",[[-1,1458,"  "],[-1,1495,"  "],[-1,1499,"  "],[-1,1528," "],[-1,1534," "],[-1,1537,"  "],[-1,1558,"  "],[-1,1562,"  "]],[1458,1567],[1458,1553]]],[1556435544066,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[-1,1202,"  "],[-1,1205,"1）复"],[1,1220,"    \n"],[-1,1343,"   "],[1,1348,")时间"],[-1,1369,"     "],[1,1374,"for(i"],[-1,1402,"       "],[1,1409,"{\n cout"],[1,1420,"}"],[-1,1423,"  "],[1,1425,"\n"],[-1,1453,"     "],[1,1458,"for(i"],[-1,1488,"       "],[1,1495,"{\nfor(i"],[-1,1517," "],[-1,1523,"   {  "],[1,1529,"{\ncout<"],[-1,1543,"    "],[1,1547,"}\n}"],[1,1550,"\n"],[-1,4758,"    "],[-1,4764," \n"],[1,4766,"总结"],[1,4769,"\n"],[1,4771,"-"],[1,4773,"点："],[-1,4827,"   "],[1,4830,"- 缺"]],[226,226],[4833,4833]]],[1556435544066,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[1,1207,"  "],[1,1208,"1）复"],[-1,1220,"    \n"],[1,1348,"   "],[-1,1350,")时间"],[1,1374,"     "],[-1,1374,"for(i"],[1,1407,"       "],[-1,1407,"{\n cout"],[-1,1425,"}"],[1,1429,"  "],[-1,1429,"\n"],[1,1458,"     "],[-1,1458,"for(i"],[1,1493,"       "],[-1,1493,"{\nfor(i"],[1,1522," "],[1,1527,"   {  "],[-1,1527,"{\ncout<"],[1,1548,"    "],[-1,1548,"}\n}"],[-1,1554,"\n"],[1,4763,"    "],[1,4765," \n"],[-1,4765,"总结"],[-1,4770,"\n"],[-1,4773,"-"],[-1,4776,"点："],[1,4832,"   "],[-1,4832,"- 缺"]],[4833,4833],[226,226]]],[1556435520380,["GJX@GJXAIOU",[[1,671,"\n"]],[671,671],[672,672]]],[1556435521510,["GJX@GJXAIOU",[[1,676,"\n"]],[676,676],[677,677]]],[1556435522933,["GJX@GJXAIOU",[[1,681,"\n"]],[681,681],[682,682]]],[1556435527197,["GJX@GJXAIOU",[[1,667,"* "],[1,672,"* "],[1,677,"* "],[1,682,"* "]],[667,696],[669,704]]],[1556435530255,["GJX@GJXAIOU",[[-1,672,"、"]],[673,673],[672,672]]],[1556435532061,["GJX@GJXAIOU",[[-1,678,"、"]],[679,679],[678,678]]],[1556435533997,["GJX@GJXAIOU",[[-1,684,"、"]],[685,685],[684,684]]],[1556435536813,["GJX@GJXAIOU",[[1,675,"\n* "]],[672,672],[675,675]]],[1556435904051,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,1213,"  "],[-1,1216,"1）复"],[1,1231,"    \n"],[-1,1354,"   "],[1,1359,")时间"],[-1,1380,"     "],[1,1385,"for(i"],[-1,1413,"       "],[1,1420,"{\n cout"],[1,1431,"}"],[-1,1434,"  "],[1,1436,"\n"],[-1,1464,"     "],[1,1469,"for(i"],[-1,1499,"       "],[1,1506,"{\nfor(i"],[-1,1528," "],[-1,1534,"   {  "],[1,1540,"{\ncout<"],[-1,1554,"    "],[1,1558,"}\n}"],[1,1561,"\n"],[-1,4769,"    "],[-1,4775," \n"],[1,4777,"总结"],[1,4780,"\n"],[1,4782,"-"],[1,4784,"点："],[-1,4838,"   "],[1,4841,"- 缺"]],[226,226],[4844,4844]]],[1556435904051,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,1218,"  "],[1,1219,"1）复"],[-1,1231,"    \n"],[1,1359,"   "],[-1,1361,")时间"],[1,1385,"     "],[-1,1385,"for(i"],[1,1418,"       "],[-1,1418,"{\n cout"],[-1,1436,"}"],[1,1440,"  "],[-1,1440,"\n"],[1,1469,"     "],[-1,1469,"for(i"],[1,1504,"       "],[-1,1504,"{\nfor(i"],[1,1533," "],[1,1538,"   {  "],[-1,1538,"{\ncout<"],[1,1559,"    "],[-1,1559,"}\n}"],[-1,1565,"\n"],[1,4774,"    "],[1,4776," \n"],[-1,4776,"总结"],[-1,4781,"\n"],[-1,4784,"-"],[-1,4787,"点："],[1,4843,"   "],[-1,4843,"- 缺"]],[4844,4844],[226,226]]],[1556435889193,["GJX@GJXAIOU",[[1,750,"\n"]],[748,748],[749,749]]],[1556435889886,["GJX@GJXAIOU",[[1,751,"\n"]],[749,749],[750,750]]],[1556435890463,["GJX@GJXAIOU",[[1,750,"算法效率的度量方法"]],[750,750],[759,759]]],[1556435892031,["GJX@GJXAIOU",[[1,761,"\n"]],[759,759],[760,760]]],[1556435903444,["GJX@GJXAIOU",[[1,760,"- 算法采用的"]],[760,760],[767,767]]],[1556435964054,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,769,"- 时间复"],[-1,1232,"  "],[-1,1235,"1）复"],[1,1250,"    \n"],[-1,1373,"   "],[1,1378,")时间"],[-1,1399,"     "],[1,1404,"for(i"],[-1,1432,"       "],[1,1439,"{\n cout"],[1,1450,"}"],[-1,1453,"  "],[1,1455,"\n"],[-1,1483,"     "],[1,1488,"for(i"],[-1,1518,"       "],[1,1525,"{\nfor(i"],[-1,1547," "],[-1,1553,"   {  "],[1,1559,"{\ncout<"],[-1,1573,"    "],[1,1577,"}\n}"],[1,1580,"\n"],[-1,4788,"    "],[-1,4794," \n"],[1,4796,"总结"],[1,4799,"\n"],[1,4801,"-"],[1,4803,"点："],[-1,4857,"   "],[1,4860,"- 缺"]],[226,226],[4863,4863]]],[1556435964054,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,769,"- 时间复"],[1,1237,"  "],[1,1238,"1）复"],[-1,1250,"    \n"],[1,1378,"   "],[-1,1380,")时间"],[1,1404,"     "],[-1,1404,"for(i"],[1,1437,"       "],[-1,1437,"{\n cout"],[-1,1455,"}"],[1,1459,"  "],[-1,1459,"\n"],[1,1488,"     "],[-1,1488,"for(i"],[1,1523,"       "],[-1,1523,"{\nfor(i"],[1,1552," "],[1,1557,"   {  "],[-1,1557,"{\ncout<"],[1,1578,"    "],[-1,1578,"}\n}"],[-1,1584,"\n"],[1,4793,"    "],[1,4795," \n"],[-1,4795,"总结"],[-1,4800,"\n"],[-1,4803,"-"],[-1,4806,"点："],[1,4862,"   "],[-1,4862,"- 缺"]],[4863,4863],[226,226]]],[1556435909186,["GJX@GJXAIOU",[[1,767,"策略、方案"]],[767,767],[772,772]]],[1556435910077,["GJX@GJXAIOU",[[1,773,"- \n"]],[772,772],[775,775]]],[1556435919954,["GJX@GJXAIOU",[[1,775,"编译产生的代码质量"]],[775,775],[784,784]]],[1556435920279,["GJX@GJXAIOU",[[1,785,"- \n"]],[784,784],[787,787]]],[1556435928923,["GJX@GJXAIOU",[[1,787,"问题的输入规模"]],[787,787],[794,794]]],[1556435929648,["GJX@GJXAIOU",[[1,795,"- \n"]],[794,794],[797,797]]],[1556435931652,["GJX@GJXAIOU",[[1,797,"及其"]],[797,797],[799,799]]],[1556435932406,["GJX@GJXAIOU",[[-1,797,"及其"]],[799,799],[797,797]]],[1556435942525,["GJX@GJXAIOU",[[1,797,"机器执行指令的速度"]],[797,797],[806,806]]],[1556436024054,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[-1,808,""],[1,808,"- 时间复"],[-1,1271,"  "],[-1,1274,"1）复"],[1,1289,"    \n"],[-1,1412,"   "],[1,1417,")时间"],[-1,1438,"     "],[1,1443,"for(i"],[-1,1471,"       "],[1,1478,"{\n cout"],[1,1489,"}"],[-1,1492,"  "],[1,1494,"\n"],[-1,1522,"     "],[1,1527,"for(i"],[-1,1557,"       "],[1,1564,"{\nfor(i"],[-1,1586," "],[-1,1592,"   {  "],[1,1598,"{\ncout<"],[-1,1612,"    "],[1,1616,"}\n}"],[1,1619,"\n"],[-1,4827,"    "],[-1,4833," \n"],[1,4835,"总结"],[1,4838,"\n"],[1,4840,"-"],[1,4842,"点："],[-1,4896,"   "],[1,4899,"- 缺"]],[226,226],[4902,4902]]],[1556436024054,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[1,808,""],[-1,808,"- 时间复"],[1,1276,"  "],[1,1277,"1）复"],[-1,1289,"    \n"],[1,1417,"   "],[-1,1419,")时间"],[1,1443,"     "],[-1,1443,"for(i"],[1,1476,"       "],[-1,1476,"{\n cout"],[-1,1494,"}"],[1,1498,"  "],[-1,1498,"\n"],[1,1527,"     "],[-1,1527,"for(i"],[1,1562,"       "],[-1,1562,"{\nfor(i"],[1,1591," "],[1,1596,"   {  "],[-1,1596,"{\ncout<"],[1,1617,"    "],[-1,1617,"}\n}"],[-1,1623,"\n"],[1,4832,"    "],[1,4834," \n"],[-1,4834,"总结"],[-1,4839,"\n"],[-1,4842,"-"],[-1,4845,"点："],[1,4901,"   "],[-1,4901,"- 缺"]],[4902,4902],[226,226]]],[1556436013632,["GJX@GJXAIOU",[[1,810,"**"],[1,815,"**"]],[810,815],[810,819]]],[1556436804107,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,808,"- **时间复"],[-1,817,"**"],[-1,1275,"  "],[-1,1278,"1）复"],[1,1293,"    \n"],[-1,1416,"   "],[1,1421,")时间"],[-1,1442,"     "],[1,1447,"for(i"],[-1,1475,"       "],[1,1482,"{\n cout"],[1,1493,"}"],[-1,1496,"  "],[1,1498,"\n"],[-1,1526,"     "],[1,1531,"for(i"],[-1,1561,"       "],[1,1568,"{\nfor(i"],[-1,1590," "],[-1,1596,"   {  "],[1,1602,"{\ncout<"],[-1,1616,"    "],[1,1620,"}\n}"],[1,1623,"\n"],[-1,4831,"    "],[-1,4837," \n"],[1,4839,"总结"],[1,4842,"\n"],[1,4844,"-"],[1,4846,"点："],[-1,4900,"   "],[1,4903,"- 缺"]],[226,226],[4906,4906]]],[1556436804107,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,808,"- **时间复"],[1,824,"**"],[1,1280,"  "],[1,1281,"1）复"],[-1,1293,"    \n"],[1,1421,"   "],[-1,1423,")时间"],[1,1447,"     "],[-1,1447,"for(i"],[1,1480,"       "],[-1,1480,"{\n cout"],[-1,1498,"}"],[1,1502,"  "],[-1,1502,"\n"],[1,1531,"     "],[-1,1531,"for(i"],[1,1566,"       "],[-1,1566,"{\nfor(i"],[1,1595," "],[1,1600,"   {  "],[-1,1600,"{\ncout<"],[1,1621,"    "],[-1,1621,"}\n}"],[-1,1627,"\n"],[1,4836,"    "],[1,4838," \n"],[-1,4838,"总结"],[-1,4843,"\n"],[-1,4846,"-"],[-1,4849,"点："],[1,4905,"   "],[-1,4905,"- 缺"]],[4906,4906],[226,226]]],[1556436746223,["GJX@GJXAIOU",[[-1,827,"  "]],[829,834],[827,827]]],[1556436759070,["GJX@GJXAIOU",[[-1,1414,"~~~"]],[1414,1417],[1414,1414]]],[1556436762574,["GJX@GJXAIOU",[[-1,1302,"~~~"]],[1305,1305],[1302,1302]]],[1556436763980,["GJX@GJXAIOU",[[1,1302,"·"]],[1302,1302],[1303,1303]]],[1556436765227,["GJX@GJXAIOU",[[-1,1302,"·"]],[1303,1303],[1302,1302]]],[1556436768634,["GJX@GJXAIOU",[[1,1302,"```java"]],[1302,1302],[1309,1309]]],[1556436769031,["GJX@GJXAIOU",[[1,1311,"\n "]],[1309,1309],[1311,1311]]],[1556436770617,["GJX@GJXAIOU",[[1,1311,"```"]],[1311,1311],[1314,1314]]],[1556436775478,["GJX@GJXAIOU",[[-1,1301," "],[-1,1310," "]],[1301,1314],[1301,1314]]],[1556436778099,["GJX@GJXAIOU",[[1,1309,"\n"]],[1308,1308],[1309,1309]]],[1556436784632,["GJX@GJXAIOU",[[-1,1320,"  "],[-1,1356,"  "],[-1,1376,"  "]],[1322,1417],[1320,1411]]],[1556436785080,["GJX@GJXAIOU",[[-1,1318,"  "],[-1,1352,"  "],[-1,1372,"  "]],[1320,1411],[1318,1405]]],[1556436785774,["GJX@GJXAIOU",[[-1,1316,"  "],[-1,1348,"  "],[-1,1368,"  "]],[1318,1405],[1316,1399]]],[1556436786391,["GJX@GJXAIOU",[[-1,1314,"  "],[-1,1344,"  "],[-1,1364,"  "]],[1316,1399],[1314,1393]]],[1556436788130,["GJX@GJXAIOU",[[-1,1314,"int a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   "]],[1314,1393],[1314,1314]]],[1556436790178,["GJX@GJXAIOU",[[1,1309,"int a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   "]],[1309,1309],[1388,1388]]],[1556436792606,["GJX@GJXAIOU",[[-1,1399,"\n"]],[1399,1399],[1398,1398]]],[1556436792983,["GJX@GJXAIOU",[[-1,1398,"\n"]],[1398,1398],[1397,1397]]],[1556436798302,["GJX@GJXAIOU",[[1,1420,"`"],[1,1423,"`"]],[1420,1423],[1420,1425]]],[1556436798521,["GJX@GJXAIOU",[[-1,1420,"`"],[-1,1424,"`"]],[1420,1425],[1420,1423]]],[1556436798734,["GJX@GJXAIOU",[[1,1420,"`"],[1,1423,"`"]],[1420,1423],[1420,1425]]],[1556436801113,["GJX@GJXAIOU",[[-1,1420,"`"],[-1,1424,"`"]],[1420,1425],[1420,1423]]],[1556436801968,["GJX@GJXAIOU",[[1,1420,"`"],[1,1423,"`"]],[1420,1423],[1420,1425]]],[1556436802806,["GJX@GJXAIOU",[[-1,1420,"`"],[-1,1424,"`"]],[1420,1425],[1420,1423]]],[1556436803966,["GJX@GJXAIOU",[[-1,1420,"~~~"]],[1420,1423],[1420,1420]]],[1556436864115,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,808,"- **时间复"],[-1,817,"**"],[-1,822,"  "],[1,827,"义："],[-1,1273,"  "],[-1,1276,"1）复"],[-1,1297,"~~~"],[1,1300,"   "],[-1,1308," "],[1,1309,"\n"],[-1,1393,"~~~\n\n"],[1,1398,"    \n(2)时间"],[-1,1415,"~~~\n  "],[1,1421,"\nfor(i"],[-1,1449,"       "],[1,1456,"{\n cout"],[1,1467,"}"],[-1,1470,"  "],[1,1472,"\n"],[-1,1500,"     "],[1,1505,"for(i"],[-1,1535,"       "],[1,1542,"{\nfor(i"],[-1,1569,"    {  "],[1,1576,"{\ncout<"],[-1,1590,"    "],[1,1594,"}\n}"],[1,1597,"\n"],[-1,4805,"    "],[-1,4811," \n"],[1,4813,"总结"],[1,4816,"\n"],[1,4818,"-"],[1,4820,"点："],[-1,4874,"   "],[1,4877,"- 缺"]],[226,226],[4880,4880]]],[1556436864115,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,808,"- **时间复"],[1,824,"**"],[1,827,"  "],[-1,830,"义："],[1,1278,"  "],[1,1279,"1）复"],[1,1297,"~~~"],[-1,1297,"   "],[1,1308," "],[-1,1308,"\n"],[1,1393,"~~~\n\n"],[-1,1393,"    \n(2)时间"],[1,1420,"~~~\n  "],[-1,1420,"\nfor(i"],[1,1454,"       "],[-1,1454,"{\n cout"],[-1,1472,"}"],[1,1476,"  "],[-1,1476,"\n"],[1,1505,"     "],[-1,1505,"for(i"],[1,1540,"       "],[-1,1540,"{\nfor(i"],[1,1574,"    {  "],[-1,1574,"{\ncout<"],[1,1595,"    "],[-1,1595,"}\n}"],[-1,1601,"\n"],[1,4810,"    "],[1,4812," \n"],[-1,4812,"总结"],[-1,4817,"\n"],[-1,4820,"-"],[-1,4823,"点："],[1,4879,"   "],[-1,4879,"- 缺"]],[4880,4880],[226,226]]],[1556436806449,["GJX@GJXAIOU",[[1,1421,"``java"]],[1421,1421],[1427,1427]]],[1556436809383,["GJX@GJXAIOU",[[1,1484,"`"],[1,1487,"`"]],[1484,1487],[1484,1489]]],[1556436809560,["GJX@GJXAIOU",[[1,1485,"`"],[1,1488,"`"]],[1484,1489],[1484,1491]]],[1556436809753,["GJX@GJXAIOU",[[1,1486,"`"],[1,1489,"`"]],[1484,1491],[1484,1493]]],[1556436812226,["GJX@GJXAIOU",[[-1,1484,"```~~~```"]],[1484,1493],[1484,1484]]],[1556436812809,["GJX@GJXAIOU",[[1,1484,"```"]],[1484,1484],[1487,1487]]],[1556436819865,["GJX@GJXAIOU",[[1,1488,"\n"]],[1488,1488],[1489,1489]]],[1556436822771,["GJX@GJXAIOU",[[1,1506,"`"],[1,1512,"`"]],[1506,1512],[1506,1514]]],[1556436822999,["GJX@GJXAIOU",[[1,1507,"`"],[1,1513,"`"]],[1506,1514],[1506,1516]]],[1556436823247,["GJX@GJXAIOU",[[1,1508,"`"],[1,1514,"`"]],[1506,1516],[1506,1518]]],[1556436824536,["GJX@GJXAIOU",[[-1,1506,"```  ~~~~```"]],[1506,1518],[1506,1506]]],[1556436826751,["GJX@GJXAIOU",[[1,1506,"```java"]],[1506,1506],[1513,1513]]],[1556436829099,["GJX@GJXAIOU",[[1,1611,"`"],[1,1616,"`"]],[1611,1616],[1611,1618]]],[1556436829281,["GJX@GJXAIOU",[[1,1612,"`"],[1,1617,"`"]],[1611,1618],[1611,1620]]],[1556436829482,["GJX@GJXAIOU",[[1,1613,"`"],[1,1618,"`"]],[1611,1620],[1611,1622]]],[1556436830715,["GJX@GJXAIOU",[[-1,1611,"```~~~~~```"]],[1611,1622],[1611,1611]]],[1556436831259,["GJX@GJXAIOU",[[1,1611,"```"]],[1611,1611],[1614,1614]]],[1556436850210,["GJX@GJXAIOU",[[1,808,"### "]],[808,810],[828,828]]],[1556436853208,["GJX@GJXAIOU",[[-1,812,"-"]],[813,813],[812,812]]],[1556436863480,["GJX@GJXAIOU",[[-1,829," "],[-1,836,"  "]],[829,1023],[829,1021]]],[1556436924117,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"定义："],[-1,1273,"  "],[-1,1276,"1）复"],[-1,1297,"~~~"],[1,1300,"   "],[-1,1308," "],[1,1309,"\n"],[-1,1393,"~~~\n\n"],[1,1398,"    \n(2)时间"],[-1,1415,"~~~\n  "],[1,1421,"`"],[1,1427,"\nfor(i"],[-1,1455,"       "],[1,1462,"{\n cout"],[-1,1473,"  "],[1,1475,"}"],[-1,1478,"~~~"],[-1,1482,"（3"],[1,1487,"\n\n（3）时间"],[-1,1488,"\n"],[-1,1500,"  ~~~~"],[1,1513,"\nfor(i"],[-1,1543,"       "],[1,1550,"{\nfor(i"],[-1,1577,"    {  "],[1,1584,"{\ncout<"],[-1,1594,"   "],[-1,1601," "],[1,1602,"}\n}"],[-1,1605,"~~~~~"],[1,1614,"\n\n  **"],[-1,4811,"    "],[-1,4817," \n"],[1,4819,"总结"],[1,4822,"\n"],[1,4824,"-"],[1,4826,"点："],[-1,4880,"   "],[1,4883,"- 缺"]],[226,226],[4886,4886]]],[1556436924117,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"定义："],[1,1278,"  "],[1,1279,"1）复"],[1,1297,"~~~"],[-1,1297,"   "],[1,1308," "],[-1,1308,"\n"],[1,1393,"~~~\n\n"],[-1,1393,"    \n(2)时间"],[1,1420,"~~~\n  "],[-1,1420,"`"],[-1,1427,"\nfor(i"],[1,1461,"       "],[-1,1461,"{\n cout"],[1,1479,"  "],[-1,1479,"}"],[1,1483,"~~~"],[1,1484,"（3"],[-1,1487,"\n\n（3）时间"],[1,1495,"\n"],[1,1506,"  ~~~~"],[-1,1513,"\nfor(i"],[1,1549,"       "],[-1,1549,"{\nfor(i"],[1,1583,"    {  "],[-1,1583,"{\ncout<"],[1,1600,"   "],[1,1604," "],[-1,1604,"}\n}"],[1,1610,"~~~~~"],[-1,1614,"\n\n  **"],[1,4817,"    "],[1,4819," \n"],[-1,4819,"总结"],[-1,4824,"\n"],[-1,4827,"-"],[-1,4830,"点："],[1,4886,"   "],[-1,4886,"- 缺"]],[4886,4886],[226,226]]],[1556436875241,["GJX@GJXAIOU",[[-1,961," "]],[962,962],[961,961]]],[1556436877243,["GJX@GJXAIOU",[[1,959," "]],[959,959],[960,960]]],[1556436880173,["GJX@GJXAIOU",[[1,967," "]],[967,967],[968,968]]],[1556436888743,["GJX@GJXAIOU",[[1,1032," "]],[1032,1032],[1033,1033]]],[1556436895304,["GJX@GJXAIOU",[[-1,1107,"  "],[-1,1129,"  "],[-1,1163,"  "],[-1,1193,"  "]],[1108,1227],[1106,1219]]],[1556436895754,["GJX@GJXAIOU",[[-1,1106," "],[-1,1127,"  "],[-1,1157,"  "],[-1,1187,"  "]],[1106,1219],[1106,1213]]],[1556436902049,["GJX@GJXAIOU",[[1,1108,"**"],[1,1123,"**"]],[1108,1123],[1108,1127]]],[1556436984118,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"定义："],[1,954," "],[-1,956," "],[-1,959," "],[1,962,"* "],[-1,967," "],[1,1027," "],[-1,1032," "],[-1,1101,"   "],[-1,1106,"个算"],[1,1110,"分析一个算"],[-1,1120,"  \n  "],[1,1129,"\n"],[1,1130,".用常数"],[-1,1153,"    "],[1,1158,".再修改"],[-1,1181,"    "],[1,1186,".如果最"],[-1,1264,"  "],[-1,1267,"1）复"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1406,"~~~\n  "],[1,1414,"`"],[1,1418,"\nfor(i"],[-1,1446,"       "],[1,1453,"{\n cout"],[-1,1464,"  "],[1,1466,"}"],[-1,1469,"~~~"],[-1,1473,"（3"],[-1,1478,"复\n"],[1,1480,"\n\n（3）时间复"],[-1,1491,"  ~~~~"],[1,1504,"\nfor(i"],[-1,1534,"       "],[1,1541,"{\nfor(i"],[-1,1568,"    {  "],[1,1575,"{\ncout<"],[-1,1589,"    "],[1,1593,"}\n}"],[-1,1596,"~~~~~"],[1,1605,"\n\n  **"],[-1,4802,"    "],[-1,4808," \n"],[1,4810,"总结"],[1,4813,"\n"],[1,4815,"-"],[1,4817,"点："],[-1,4871,"   "],[1,4874,"- 缺"]],[226,226],[4877,4877]]],[1556436984118,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"定义："],[-1,959," "],[1,962," "],[1,964," "],[-1,966,"* "],[1,973," "],[-1,1032," "],[1,1038," "],[1,1106,"   "],[1,1108,"个算"],[-1,1110,"分析一个算"],[1,1125,"  \n  "],[-1,1129,"\n"],[-1,1131,".用常数"],[1,1158,"    "],[-1,1159,".再修改"],[1,1186,"    "],[-1,1187,".如果最"],[1,1269,"  "],[1,1270,"1）复"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1411,"~~~\n  "],[-1,1413,"`"],[-1,1418,"\nfor(i"],[1,1452,"       "],[-1,1452,"{\n cout"],[1,1470,"  "],[-1,1470,"}"],[1,1474,"~~~"],[1,1475,"（3"],[1,1478,"复\n"],[-1,1478,"\n\n（3）时间复"],[1,1497,"  ~~~~"],[-1,1504,"\nfor(i"],[1,1540,"       "],[-1,1540,"{\nfor(i"],[1,1574,"    {  "],[-1,1574,"{\ncout<"],[1,1595,"    "],[-1,1595,"}\n}"],[1,1601,"~~~~~"],[-1,1605,"\n\n  **"],[1,4808,"    "],[1,4810," \n"],[-1,4810,"总结"],[-1,4815,"\n"],[-1,4818,"-"],[-1,4821,"点："],[1,4877,"   "],[-1,4877,"- 缺"]],[4877,4877],[226,226]]],[1556436929328,["GJX@GJXAIOU",[[1,831,"**"],[1,834,"**"]],[831,834],[831,838]]],[1556436939527,["GJX@GJXAIOU",[[-1,1244,"    "]],[1244,1248],[1244,1244]]],[1556437104123,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"**定义：**"],[-1,831,"**"],[-1,836,"**"],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1267,"1）复"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1406,"~~~\n  "],[1,1412,"`"],[1,1418,"\nfor(i"],[-1,1446,"       "],[1,1453,"{\n cout"],[-1,1464,"  "],[1,1466,"}"],[-1,1469,"~~~"],[-1,1473,"（3"],[1,1478,"\n\n（3）时间"],[-1,1479,"\n"],[-1,1491,"  ~~~~"],[1,1504,"\nfor(i"],[-1,1534,"       "],[1,1541,"{\nfor(i"],[-1,1568,"    {  "],[1,1575,"{\ncout<"],[-1,1589,"    "],[1,1593,"}\n}"],[-1,1596,"~~~~~"],[1,1605,"\n\n  **"],[-1,4802,"    "],[-1,4808," \n"],[1,4810,"总结"],[1,4813,"\n"],[1,4815,"-"],[1,4817,"点："],[-1,4871,"   "],[1,4874,"- 缺"]],[226,226],[4877,4877]]],[1556437104123,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"**定义：**"],[1,840,"**"],[1,843,"**"],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1270,"1）复"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1411,"~~~\n  "],[-1,1411,"`"],[-1,1418,"\nfor(i"],[1,1452,"       "],[-1,1452,"{\n cout"],[1,1470,"  "],[-1,1470,"}"],[1,1474,"~~~"],[1,1475,"（3"],[-1,1478,"\n\n（3）时间"],[1,1486,"\n"],[1,1497,"  ~~~~"],[-1,1504,"\nfor(i"],[1,1540,"       "],[-1,1540,"{\nfor(i"],[1,1574,"    {  "],[-1,1574,"{\ncout<"],[1,1595,"    "],[-1,1595,"}\n}"],[1,1601,"~~~~~"],[-1,1605,"\n\n  **"],[1,4808,"    "],[1,4810," \n"],[-1,4810,"总结"],[-1,4815,"\n"],[-1,4818,"-"],[-1,4821,"点："],[1,4877,"   "],[-1,4877,"- 缺"]],[4877,4877],[226,226]]],[1556437073560,["GJX@GJXAIOU",[[1,1410,"yiban"]],[1410,1410],[1415,1415]]],[1556437075359,["GJX@GJXAIOU",[[-1,1410,"yiban"]],[1415,1415],[1410,1410]]],[1556437092584,["GJX@GJXAIOU",[[1,1410,"一般含有非嵌套村换"]],[1410,1410],[1419,1419]]],[1556437093345,["GJX@GJXAIOU",[[-1,1416,"套村换"]],[1419,1419],[1416,1416]]],[1556437099781,["GJX@GJXAIOU",[[1,1416,"套循环或者"]],[1416,1416],[1421,1421]]],[1556437164122,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"**定义：**"],[-1,831,"**"],[-1,836,"**"],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1267,"1）复"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1421,"  "],[1,1423,"\n`"],[1,1429,"\nfor(i"],[-1,1457,"       "],[1,1464,"{\n cout"],[-1,1475,"  "],[1,1477,"}"],[-1,1480,"~~~"],[-1,1484,"（3"],[1,1489,"\n\n（3）时间"],[-1,1490,"\n"],[-1,1502,"  ~~~~"],[1,1515,"\nfor(i"],[-1,1545,"       "],[1,1552,"{\nfor(i"],[-1,1579,"    {  "],[1,1586,"{\ncout<"],[-1,1600,"   "],[1,1603,"}\n}"],[-1,1606," ~~~~~"],[1,1616,"\n\n  **"],[-1,4813,"    "],[-1,4819," \n"],[1,4821,"总结"],[1,4824,"\n"],[1,4826,"-"],[1,4828,"点："],[-1,4882,"   "],[1,4885,"- 缺"]],[226,226],[4888,4888]]],[1556437164122,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"**定义：**"],[1,840,"**"],[1,843,"**"],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1270,"1）复"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1421,"  "],[-1,1421,"\n`"],[-1,1429,"\nfor(i"],[1,1463,"       "],[-1,1463,"{\n cout"],[1,1481,"  "],[-1,1481,"}"],[1,1485,"~~~"],[1,1486,"（3"],[-1,1489,"\n\n（3）时间"],[1,1497,"\n"],[1,1508,"  ~~~~"],[-1,1515,"\nfor(i"],[1,1551,"       "],[-1,1551,"{\nfor(i"],[1,1585,"    {  "],[-1,1585,"{\ncout<"],[1,1606,"   "],[-1,1606,"}\n}"],[1,1612," ~~~~~"],[-1,1616,"\n\n  **"],[1,4819,"    "],[1,4821," \n"],[-1,4821,"总结"],[-1,4826,"\n"],[-1,4829,"-"],[-1,4832,"点："],[1,4888,"   "],[-1,4888,"- 缺"]],[4888,4888],[226,226]]],[1556437110575,["GJX@GJXAIOU",[[1,1421,"线性阶"]],[1421,1421],[1424,1424]]],[1556437118259,["GJX@GJXAIOU",[[1,1699,"`"],[1,1707,"`"]],[1699,1707],[1699,1709]]],[1556437118490,["GJX@GJXAIOU",[[1,1700,"`"],[1,1708,"`"]],[1699,1709],[1699,1711]]],[1556437119688,["GJX@GJXAIOU",[[-1,1699,"``   ~~~~ ``"]],[1699,1711],[1699,1699]]],[1556437120444,["GJX@GJXAIOU",[[1,1699,"```"]],[1699,1699],[1702,1702]]],[1556437121961,["GJX@GJXAIOU",[[1,1780,"`"],[1,1784,"`"]],[1780,1784],[1780,1786]]],[1556437122184,["GJX@GJXAIOU",[[1,1781,"`"],[1,1785,"`"]],[1780,1786],[1780,1788]]],[1556437122616,["GJX@GJXAIOU",[[1,1782,"`"],[1,1786,"`"]],[1780,1788],[1780,1790]]],[1556437123788,["GJX@GJXAIOU",[[-1,1780,"```~~~~```"]],[1780,1790],[1780,1780]]],[1556437124371,["GJX@GJXAIOU",[[1,1780,"```"]],[1780,1780],[1783,1783]]],[1556437126641,["GJX@GJXAIOU",[[1,1702,"java"]],[1702,1702],[1706,1706]]],[1556437131905,["GJX@GJXAIOU",[[-1,1713,"  "],[-1,1724,"  "],[-1,1743," "],[-1,1750," "],[-1,1753,"  "],[-1,1774,"  "]],[1707,1783],[1707,1773]]],[1556437132304,["GJX@GJXAIOU",[[-1,1711,"  "],[-1,1722,"  "],[-1,1739," "],[-1,1744," "],[-1,1747,"  "],[-1,1766,"  "]],[1707,1773],[1707,1763]]],[1556437132616,["GJX@GJXAIOU",[[-1,1709,"  "],[-1,1720," "],[-1,1723," "],[-1,1735," "],[-1,1738," "],[-1,1741,"  "],[-1,1758,"  "]],[1707,1763],[1707,1753]]],[1556437284117,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"**定义：**"],[-1,831,"**"],[-1,836,"**"],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[-1,1110,"个算"],[1,1114,"分析一个算"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1267,"1）复"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1727," "],[1,1728,"{\n"],[-1,1731,"\n"],[-1,1746,"    ~~\n "],[1,1754,"}\n"],[1,1757,"\n  **P"],[-1,4784,"    "],[-1,4790," \n"],[1,4792,"总结"],[1,4795,"\n"],[1,4797,"-"],[1,4799,"点："],[-1,4853,"   "],[1,4856,"- 缺"]],[226,226],[4859,4859]]],[1556437284117,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"**定义：**"],[1,840,"**"],[1,843,"**"],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[1,1112,"个算"],[-1,1114,"分析一个算"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1270,"1）复"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1733," "],[-1,1733,"{\n"],[1,1738,"\n"],[1,1752,"    ~~\n "],[-1,1752,"}\n"],[-1,1757,"\n  **P"],[1,4790,"    "],[1,4792," \n"],[-1,4792,"总结"],[-1,4797,"\n"],[-1,4800,"-"],[-1,4803,"点："],[1,4859,"   "],[-1,4859,"- 缺"]],[4859,4859],[226,226]]],[1556437232801,["GJX@GJXAIOU",[[-1,1739,"    "]],[1739,1743],[1739,1739]]],[1556437280610,["GJX@GJXAIOU",[[1,1827," "]],[1827,1827],[1828,1828]]],[1556437584128,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[1,829,"**定义：**"],[-1,831,"**"],[-1,836,"**"],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[-1,1110,"个算"],[1,1114,"分析一个算"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1599,"  "],[-1,1605,"  "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1714,"    "],[1,1718,"whi"],[1,1720,"("],[-1,1727,"    \n "],[1,1733,"{\n"],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[1,1821," "],[-1,1827," "],[1,1828,""],[-1,4781,"    "],[-1,4787," \n"],[1,4789,"总结"],[1,4792,"\n"],[1,4794,"-"],[1,4796,"点："],[-1,4850,"   "],[1,4853,"- 缺"]],[226,226],[4856,4856]]],[1556437584128,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[-1,831,"**定义：**"],[1,840,"**"],[1,843,"**"],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[1,1112,"个算"],[-1,1114,"分析一个算"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1605,"  "],[1,1609,"  "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1720,"    "],[-1,1720,"whi"],[-1,1725,"("],[1,1733,"    \n "],[-1,1733,"{\n"],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[-1,1827," "],[1,1834," "],[-1,1834,""],[1,4787,"    "],[1,4789," \n"],[-1,4789,"总结"],[-1,4794,"\n"],[-1,4797,"-"],[-1,4800,"点："],[1,4856,"   "],[-1,4856,"- 缺"]],[4856,4856],[226,226]]],[1556437580742,["GJX@GJXAIOU",[[1,1829,"![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)"]],[1828,1828],[1929,1929]]],[1556437644124,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,831,"**定义："],[1,833,"\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[-1,1110,"个算"],[1,1114,"分析一个算"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    -"],[1,1244,"- 函数调"],[-1,1263,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1727,"    \n "],[1,1733,"{\n"],[1,1739,"i*2;"],[-1,1740," "],[-1,1743,"   ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[1,1928,"\n\n\n\n##"],[-1,4880,"    "],[-1,4886," \n"],[1,4888,"总结"],[1,4891,"\n"],[1,4893,"-"],[1,4895,"点："],[-1,4949,"   "],[1,4952,"- 缺"]],[226,226],[4955,4955]]],[1556437644124,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,831,"**定义："],[-1,838,"\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[1,1112,"个算"],[-1,1114,"分析一个算"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    -"],[-1,1244,"- 函数调"],[1,1268,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1733,"    \n "],[-1,1733,"{\n"],[-1,1741,"i*2;"],[1,1746," "],[1,1748,"   ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[-1,1928,"\n\n\n\n##"],[1,4886,"    "],[1,4888," \n"],[-1,4888,"总结"],[-1,4893,"\n"],[-1,4896,"-"],[-1,4899,"点："],[1,4955,"   "],[-1,4955,"- 缺"]],[4955,4955],[226,226]]],[1556437618557,["GJX@GJXAIOU",[[1,1929," "]],[1929,1929],[1930,1930]]],[1556437704133,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,831,"**定义："],[1,833,"\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[-1,1110,"个算"],[1,1114,"分析一个算"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    -"],[1,1244,"- 函数调"],[-1,1263,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1727,"    \n "],[1,1733,"{\n"],[1,1739,"i*2;"],[-1,1740," "],[-1,1743,"   ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[1,1928,"\n"],[1,1929,"\n\n\n##"],[-1,4881,"    "],[-1,4887," \n"],[1,4889,"总结"],[1,4892,"\n"],[1,4894,"-"],[1,4896,"点："],[-1,4950,"   "],[1,4953,"- 缺"]],[226,226],[4956,4956]]],[1556437704133,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,831,"**定义："],[-1,838,"\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[1,1112,"个算"],[-1,1114,"分析一个算"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    -"],[-1,1244,"- 函数调"],[1,1268,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1733,"    \n "],[-1,1733,"{\n"],[-1,1741,"i*2;"],[1,1746," "],[1,1748,"   ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[-1,1928,"\n"],[-1,1930,"\n\n\n##"],[1,4887,"    "],[1,4889," \n"],[-1,4889,"总结"],[-1,4894,"\n"],[-1,4897,"-"],[-1,4900,"点："],[1,4956,"   "],[-1,4956,"- 缺"]],[4956,4956],[226,226]]],[1556437674600,["GJX@GJXAIOU",[[-1,1929," "],[1,1930,"\n"]],[1930,1930],[1930,1930]]],[1556437675074,["GJX@GJXAIOU",[[1,1930,"•常用的时间复杂度所耗费的时间从小到大依次是：O(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)"]],[1930,1930],[2028,2028]]],[1556437884132,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,831,"**定义："],[1,833,"\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1031," "],[-1,1036," "],[-1,1105,"   "],[-1,1110,"个算"],[1,1114,"分析一个算"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1267,"1）复"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1714,"    "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   \n "],[1,1733,"{\n"],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[1,2028,"\n\n\n## "],[-1,4979,"    "],[-1,4985," \n"],[1,4987,"总结"],[1,4990,"\n"],[1,4992,"-"],[1,4994,"点："],[-1,5048,"   "],[1,5051,"- 缺"]],[226,226],[5054,5054]]],[1556437884132,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,831,"**定义："],[-1,838,"\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1036," "],[1,1042," "],[1,1110,"   "],[1,1112,"个算"],[-1,1114,"分析一个算"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1270,"1）复"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1720,"    "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   \n "],[-1,1733,"{\n"],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[-1,2028,"\n\n\n## "],[1,4985,"    "],[1,4987," \n"],[-1,4987,"总结"],[-1,4992,"\n"],[-1,4995,"-"],[-1,4998,"点："],[1,5054,"   "],[-1,5054,"- 缺"]],[5054,5054],[226,226]]],[1556437879980,["GJX@GJXAIOU",[[1,2031,"\n"]],[2029,2029],[2030,2030]]],[1556437880131,["GJX@GJXAIOU",[[1,2032,"\n"]],[2030,2030],[2031,2031]]],[1556437880290,["GJX@GJXAIOU",[[1,2033,"\n"]],[2031,2031],[2032,2032]]],[1556437944134,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,4982,"    "],[-1,4988," \n"],[1,4990,"总结"],[1,4993,"\n"],[1,4995,"-"],[1,4997,"点："],[-1,5051,"   "],[1,5054,"- 缺"]],[226,226],[5057,5057]]],[1556437944134,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,4988,"    "],[1,4990," \n"],[-1,4990,"总结"],[-1,4995,"\n"],[-1,4998,"-"],[-1,5001,"点："],[1,5057,"   "],[-1,5057,"- 缺"]],[5057,5057],[226,226]]],[1556437901697,["GJX@GJXAIOU",[[-1,2086,"\n"]],[2085,2085],[2084,2084]]],[1556437901857,["GJX@GJXAIOU",[[-1,2085,"\n"]],[2084,2084],[2083,2083]]],[1556437902041,["GJX@GJXAIOU",[[-1,2084,"\n"]],[2083,2083],[2082,2082]]],[1556438424139,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,4979,"    "],[-1,4985," \n"],[1,4987,"总结"],[1,4990,"\n"],[1,4992,"-"],[1,4994,"点："],[-1,5048,"   "],[1,5051,"- 缺"]],[226,226],[5054,5054]]],[1556438424139,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,4985,"    "],[1,4987," \n"],[-1,4987,"总结"],[-1,4992,"\n"],[-1,4995,"-"],[-1,4998,"点："],[1,5054,"   "],[-1,5054,"- 缺"]],[5054,5054],[226,226]]],[1556438374119,["GJX@GJXAIOU",[[1,2786,"()"]],[2786,2786],[2788,2788]]],[1556438375867,["GJX@GJXAIOU",[[1,2787,"we"]],[2787,2787],[2789,2789]]],[1556438376953,["GJX@GJXAIOU",[[-1,2787,"we"]],[2789,2789],[2787,2787]]],[1556438382418,["GJX@GJXAIOU",[[1,2787,"伪代码如下"]],[2787,2787],[2792,2792]]],[1556438385373,["GJX@GJXAIOU",[[1,2794,"```"]],[2794,2794],[2797,2797]]],[1556438385418,["GJX@GJXAIOU",[[1,2797,"language\n```\n"]],[2797,2797],[2797,2805]]],[1556438393682,["GJX@GJXAIOU",[[-1,2816,"    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   "]],[2816,2894],[2816,2816]]],[1556438395476,["GJX@GJXAIOU",[[1,2806,"\n"]],[2805,2805],[2806,2806]]],[1556438396020,["GJX@GJXAIOU",[[1,2806,"    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作   "]],[2806,2806],[2884,2884]]],[1556438405787,["GJX@GJXAIOU",[[-1,2896,"    \n    // [       \n\n   \n    ]"]],[2897,2927],[2896,2896]]],[1556438409531,["GJX@GJXAIOU",[[-1,2901,"endADT "]],[2901,2908],[2901,2901]]],[1556438411545,["GJX@GJXAIOU",[[1,2883,"\n    endADT "]],[2883,2883],[2895,2895]]],[1556438414163,["GJX@GJXAIOU",[[-1,2906," \n\n       \n    "]],[2906,2921],[2906,2906]]],[1556438417489,["GJX@GJXAIOU",[[-1,2907,"    "]],[2907,2911],[2907,2907]]],[1556438724152,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,4958,"    "],[-1,4964," \n"],[1,4966,"总结"],[1,4969,"\n"],[1,4971,"-"],[1,4973,"点："],[-1,5027,"   "],[1,5030,"- 缺"]],[226,226],[5033,5033]]],[1556438724152,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,4964,"    "],[1,4966," \n"],[-1,4966,"总结"],[-1,4971,"\n"],[-1,4974,"-"],[-1,4977,"点："],[1,5033,"   "],[-1,5033,"- 缺"]],[5033,5033],[226,226]]],[1556438696303,["GJX@GJXAIOU",[[1,3419,"`"],[1,3425,"`"]],[3419,3425],[3419,3427]]],[1556438696547,["GJX@GJXAIOU",[[1,3420,"`"],[1,3426,"`"]],[3419,3427],[3419,3429]]],[1556438697779,["GJX@GJXAIOU",[[-1,3419,"`` ~~~~ ``"]],[3419,3429],[3419,3419]]],[1556438700800,["GJX@GJXAIOU",[[1,3419,"```java"]],[3419,3419],[3426,3426]]],[1556438703450,["GJX@GJXAIOU",[[1,3822,"`"],[1,3826,"`"]],[3822,3826],[3822,3828]]],[1556438703646,["GJX@GJXAIOU",[[1,3823,"`"],[1,3827,"`"]],[3822,3828],[3822,3830]]],[1556438703835,["GJX@GJXAIOU",[[1,3824,"`"],[1,3828,"`"]],[3822,3830],[3822,3832]]],[1556438704795,["GJX@GJXAIOU",[[-1,3822,"```~~~~```"]],[3822,3832],[3822,3822]]],[1556438705367,["GJX@GJXAIOU",[[1,3822,"```"]],[3822,3822],[3825,3825]]],[1556438844163,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n\n\n\n"],[-1,4958,"    "],[-1,4964," \n"],[1,4966,"总结"],[1,4969,"\n"],[1,4971,"-"],[1,4973,"点："],[-1,5027,"   "],[1,5030,"- 缺"]],[226,226],[5033,5033]]],[1556438844163,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n\n\n\n"],[1,4964,"    "],[1,4966," \n"],[-1,4966,"总结"],[-1,4971,"\n"],[-1,4974,"-"],[-1,4977,"点："],[1,5033,"   "],[-1,5033,"- 缺"]],[5033,5033],[226,226]]],[1556438823716,["GJX@GJXAIOU",[[-1,3830,"\n"]],[3829,3829],[3828,3828]]],[1556438823995,["GJX@GJXAIOU",[[-1,3829,"\n"]],[3828,3828],[3827,3827]]],[1556438824371,["GJX@GJXAIOU",[[-1,3828,"\n"]],[3827,3827],[3826,3826]]],[1556438904152,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4955,"    "],[-1,4961," \n"],[1,4963,"总结"],[1,4966,"\n"],[1,4968,"-"],[1,4970,"点："],[-1,5024,"   "],[1,5027,"- 缺"]],[226,226],[5030,5030]]],[1556438904152,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4961,"    "],[1,4963," \n"],[-1,4963,"总结"],[-1,4968,"\n"],[-1,4971,"-"],[-1,4974,"点："],[1,5030,"   "],[-1,5030,"- 缺"]],[5030,5030],[226,226]]],[1556438848636,["GJX@GJXAIOU",[[-1,4170,"        "]],[4170,4178],[4170,4170]]],[1556438854235,["GJX@GJXAIOU",[[-1,4310,"  "]],[4312,4312],[4310,4310]]],[1556438857620,["GJX@GJXAIOU",[[1,4319,"\n  "]],[4319,4319],[4322,4322]]],[1556438864676,["GJX@GJXAIOU",[[-1,4574,"  "]],[4574,4576],[4574,4574]]],[1556438868115,["GJX@GJXAIOU",[[-1,4693,"  "]],[4693,4695],[4693,4693]]],[1556438874212,["GJX@GJXAIOU",[[-1,4799,"  "]],[4799,4801],[4799,4799]]],[1556439264154,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4687,"  "],[1,4693,"操作"],[-1,4793,"  "],[1,4799,"操作"],[-1,4942,"    "],[-1,4948," \n"],[1,4950,"总结"],[1,4953,"\n"],[1,4955,"-"],[1,4957,"点："],[-1,5011,"   "],[1,5014,"- 缺"]],[226,226],[5017,5017]]],[1556439264154,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4693,"  "],[-1,4697,"操作"],[1,4799,"  "],[-1,4803,"操作"],[1,4948,"    "],[1,4950," \n"],[-1,4950,"总结"],[-1,4955,"\n"],[-1,4958,"-"],[-1,4961,"点："],[1,5017,"   "],[-1,5017,"- 缺"]],[5017,5017],[226,226]]],[1556439255487,["GJX@GJXAIOU",[[1,4677,"\n        `"]],[4677,4677],[4687,4687]]],[1556439259270,["GJX@GJXAIOU",[[-1,4682,"        `"]],[4687,4687],[4678,4678]]],[1556439259764,["GJX@GJXAIOU",[[-1,4680,"  "]],[4678,4678],[4678,4678]]],[1556439261119,["GJX@GJXAIOU",[[1,4678,"```"]],[4678,4678],[4681,4681]]],[1556439261161,["GJX@GJXAIOU",[[1,4681,"language\n```\n"]],[4681,4681],[4681,4689]]],[1556439262430,["GJX@GJXAIOU",[[-1,4681,"language"],[1,4689,"j"]],[4681,4689],[4682,4682]]],[1556439263491,["GJX@GJXAIOU",[[-1,4681,"j"]],[4682,4682],[4681,4681]]],[1556439324164,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4688,"\n"],[-1,4691,"\n"],[1,4692,"  "],[1,4695,"\n "],[1,4700,"操作"],[-1,4800,"  "],[1,4806,"操作"],[-1,4949,"    "],[-1,4955," \n"],[1,4957,"总结"],[1,4960,"\n"],[1,4962,"-"],[1,4964,"点："],[-1,5018,"   "],[1,5021,"- 缺"]],[226,226],[5024,5024]]],[1556439324164,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4688,"\n"],[1,4692,"\n"],[-1,4692,"  "],[-1,4697,"\n "],[-1,4704,"操作"],[1,4806,"  "],[-1,4810,"操作"],[1,4955,"    "],[1,4957," \n"],[-1,4957,"总结"],[-1,4962,"\n"],[-1,4965,"-"],[-1,4968,"点："],[1,5024,"   "],[-1,5024,"- 缺"]],[5024,5024],[226,226]]],[1556439264338,["GJX@GJXAIOU",[[1,4683,"\n"]],[4682,4682],[4683,4683]]],[1556439265444,["GJX@GJXAIOU",[[1,4683,"#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}"]],[4683,4683],[5058,5058]]],[1556439444158,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`"],[1,5062,"  \n "],[-1,5067,"\n"],[1,5070,"\n"],[1,5076,"操作"],[-1,5176,"  "],[1,5182,"操作"],[-1,5325,"    "],[-1,5331," \n"],[1,5333,"总结"],[1,5336,"\n"],[1,5338,"-"],[1,5340,"点："],[-1,5394,"   "],[1,5397,"- 缺"]],[226,226],[5400,5400]]],[1556439444158,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`"],[-1,5063,"  \n "],[1,5072,"\n"],[-1,5074,"\n"],[-1,5081,"操作"],[1,5183,"  "],[-1,5187,"操作"],[1,5332,"    "],[1,5334," \n"],[-1,5334,"总结"],[-1,5339,"\n"],[-1,5342,"-"],[-1,5345,"点："],[1,5401,"   "],[-1,5401,"- 缺"]],[5400,5400],[226,226]]],[1556439427531,["GJX@GJXAIOU",[[1,5091,"•插入算法的思路：\n\n–如果插入位置不合理，抛出异常；\n\n–如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n\n–从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n\n–将要插入元素填入位置i处；\n\n–线性表长+1。"]],[5091,5091],[5216,5216]]],[1556439431732,["GJX@GJXAIOU",[[1,5217,"\n"]],[5216,5216],[5217,5217]]],[1556439434662,["GJX@GJXAIOU",[[-1,5219,"       "]],[5218,5225],[5218,5218]]],[1556439438137,["GJX@GJXAIOU",[[1,5264,"\n ``"]],[5264,5264],[5268,5268]]],[1556439439587,["GJX@GJXAIOU",[[-1,5269," ``"]],[5268,5268],[5265,5265]]],[1556439440515,["GJX@GJXAIOU",[[-1,5264,"\n"]],[5265,5265],[5264,5264]]],[1556439441804,["GJX@GJXAIOU",[[1,5264,"\n "]],[5264,5264],[5266,5266]]],[1556439442414,["GJX@GJXAIOU",[[-1,5269," "]],[5266,5266],[5265,5265]]],[1556439443728,["GJX@GJXAIOU",[[1,5265,"```"]],[5265,5265],[5268,5268]]],[1556439443772,["GJX@GJXAIOU",[[1,5268,"language\n```\n"]],[5268,5268],[5268,5276]]],[1556439504160,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5283,"``"],[1,5285,"  \n      "],[-1,5312,"  "],[1,5318,"操作"],[-1,5461,"    "],[-1,5467," \n"],[1,5469,"总结"],[1,5472,"\n"],[1,5474,"-"],[1,5476,"点："],[-1,5530,"   "],[1,5533,"- 缺"]],[226,226],[5536,5536]]],[1556439504160,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5283,"``"],[-1,5283,"  \n      "],[1,5319,"  "],[-1,5323,"操作"],[1,5468,"    "],[1,5470," \n"],[-1,5470,"总结"],[-1,5475,"\n"],[-1,5478,"-"],[-1,5481,"点："],[1,5537,"   "],[-1,5537,"- 缺"]],[5536,5536],[226,226]]],[1556439444889,["GJX@GJXAIOU",[[-1,5268,"language"],[1,5276,"c"]],[5268,5276],[5269,5269]]],[1556439445059,["GJX@GJXAIOU",[[1,5270,"\n"]],[5269,5269],[5270,5270]]],[1556439463748,["GJX@GJXAIOU",[[1,5270,"/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}"]],[5270,5270],[5846,5846]]],[1556440824187,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,6031,"    "],[-1,6037," \n"],[1,6039,"总结"],[1,6042,"\n"],[1,6044,"-"],[1,6046,"点："],[-1,6100,"   "],[1,6103,"- 缺"]],[226,226],[6106,6106]]],[1556440824187,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6038,"    "],[1,6040," \n"],[-1,6040,"总结"],[-1,6045,"\n"],[-1,6048,"-"],[-1,6051,"点："],[1,6107,"   "],[-1,6107,"- 缺"]],[6106,6106],[226,226]]],[1556440775135,["GJX@GJXAIOU",[[1,6003,"\n       "]],[6003,6003],[6011,6011]]],[1556440775295,["GJX@GJXAIOU",[[-1,6004,"          "],[1,6014,"\n"]],[6011,6011],[6005,6005]]],[1556440815282,["GJX@GJXAIOU",[[1,6005,"```c'"]],[6005,6005],[6010,6010]]],[1556440815308,["GJX@GJXAIOU",[[1,6011,"\n"]],[6010,6010],[6011,6011]]],[1556440815392,["GJX@GJXAIOU",[[-1,6009,"'\n"],[1,6011,"’"]],[6011,6011],[6010,6010]]],[1556440816176,["GJX@GJXAIOU",[[-1,6009,"’"]],[6010,6010],[6009,6009]]],[1556440816982,["GJX@GJXAIOU",[[1,6010,"\n"]],[6009,6009],[6010,6010]]],[1556440817851,["GJX@GJXAIOU",[[1,6010,"```"]],[6010,6010],[6013,6013]]],[1556440820024,["GJX@GJXAIOU",[[1,6010,"\n"]],[6009,6009],[6010,6010]]],[1556440820718,["GJX@GJXAIOU",[[1,6010,"/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}"]],[6010,6010],[6476,6476]]],[1556441304199,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6484,""],[1,6484,"       "],[-1,6505,"    "],[-1,6511," \n"],[1,6513,"总结"],[1,6516,"\n"],[1,6518,"-"],[1,6520,"点："],[-1,6574,"   "],[1,6577,"- 缺"]],[226,226],[6580,6580]]],[1556441304199,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6484,""],[-1,6484,"       "],[1,6512,"    "],[1,6514," \n"],[-1,6514,"总结"],[-1,6519,"\n"],[-1,6522,"-"],[-1,6525,"点："],[1,6581,"   "],[-1,6581,"- 缺"]],[6580,6580],[226,226]]],[1556441249196,["GJX@GJXAIOU",[[1,6150," "]],[6150,6150],[6151,6151]]],[1556441544203,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物"],[1,296,"\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,393,"  \n  "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,546,"---\n\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"]],[226,226],[6581,6581]]],[1556441544203,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物"],[-1,295,"\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,398,"  \n  "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,546,"---\n\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"]],[6581,6581],[226,226]]],[1556441517494,["GJX@GJXAIOU",[[1,6705," "]],[6705,6705],[6706,6706]]],[1556441604198,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6700,"\n"]],[226,226],[6701,6701]]],[1556441604198,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6706,"\n"]],[6701,6701],[226,226]]],[1556441558685,["GJX@GJXAIOU",[[1,6706,"   "]],[6706,6706],[6709,6709]]],[1556441844206,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6703,"\n"]],[226,226],[6704,6704]]],[1556441844206,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6709,"\n"]],[6704,6704],[226,226]]],[1556441840811,["GJX@GJXAIOU",[[1,6871,"shujuy"]],[6871,6871],[6877,6877]]],[1556441842231,["GJX@GJXAIOU",[[-1,6871,"shujuy"]],[6877,6877],[6871,6871]]],[1556441904212,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6703,"\n"]],[226,226],[6704,6704]]],[1556441904212,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6709,"\n"]],[6704,6704],[226,226]]],[1556441847468,["GJX@GJXAIOU",[[1,6874,"和指针域"]],[6874,6874],[6878,6878]]],[1556441866617,["GJX@GJXAIOU",[[1,7091,"\n "]],[7091,7091],[7093,7093]]],[1556441964206,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[1,294,"\n\n- **"],[-1,295,"\n"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6703,"\n"],[1,6864,"数据域和指针域"],[-1,6874,"和指针域"],[1,7081,"\n "],[-1,7088," \n"]],[226,226],[7088,7088]]],[1556441964206,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[-1,294,"\n\n- **"],[1,301,"\n"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6709,"\n"],[-1,6871,"数据域和指针域"],[1,6888,"和指针域"],[-1,7091,"\n "],[1,7100," \n"]],[7088,7088],[226,226]]],[1556441949267,["GJX@GJXAIOU",[[1,7249,"  "]],[7249,7249],[7251,7251]]],[1556442084210,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物\n"],[1,296,"\n\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---"],[1,548,"\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6703,"\n"],[1,6864,"数据域和指针域"],[-1,6874,"和指针域"],[1,7080," \n"],[-1,7090," \n"],[1,7239,"  "],[-1,7249,"  "]],[226,226],[7249,7249]]],[1556442084210,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物\n"],[-1,294,"\n\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---"],[-1,552,"\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6709,"\n"],[-1,6871,"数据域和指针域"],[1,6888,"和指针域"],[-1,7090," \n"],[1,7102," \n"],[-1,7249,"  "],[1,7261,"  "]],[7249,7249],[226,226]]],[1556442054008,["GJX@GJXAIOU",[[1,7436,"头指针指向头结点，头结点的数据域一般是没有"]],[7436,7436],[7457,7457]]],[1556442060952,["GJX@GJXAIOU",[[-1,7455,"没有"]],[7457,7457],[7455,7455]]],[1556442077327,["GJX@GJXAIOU",[[1,7455,"空的，一般可以用于存储当前链表的长度；"]],[7455,7455],[7474,7474]]],[1556447000036,[null,[[1,226,"\n"],[-1,229,"\n\n- **"],[1,235,"    \n"],[-1,294,"物\n"],[1,296,"\n\n- **物"],[1,378,"数据间"],[-1,383,"数据间"],[-1,395,"\n    "],[1,406,"\n    "],[-1,422,"一的存储任意"],[1,428,"意的存储单元"],[-1,460,"\n\n---"],[1,545,"\n---"],[1,548,"\n"],[1,662,"* "],[-1,665,"、可"],[1,667,"\n"],[-1,669,"读性、"],[1,675,"可读性"],[1,678,"健"],[-1,680,"、"],[1,684,"时"],[-1,687,"\n* "],[1,690,"高"],[-1,745,"- 时间复"],[1,750,""],[1,812," **时间复杂"],[-1,820,"**"],[-1,824,"   "],[-1,829,"\n "],[1,833,"定义：**\n"],[-1,836,"**"],[1,838," "],[1,958," "],[-1,960," "],[-1,963," "],[1,966,"* "],[-1,971," "],[1,1030," "],[-1,1036," "],[-1,1105,"   "],[1,1110,"**分析一"],[-1,1112,"**"],[-1,1124,"  \n  "],[1,1133,"\n"],[1,1134,".用常数"],[-1,1157,"    "],[1,1162,".再修改"],[-1,1185,"    "],[1,1190,".如果最"],[-1,1239,"    "],[1,1244," 函数调"],[-1,1264,"  "],[-1,1269,"复1）"],[-1,1288,"~~~"],[1,1291,"   "],[-1,1299," "],[1,1300,"\n"],[-1,1384,"~~~\n\n"],[1,1389,"    \n(2)时间"],[-1,1405,"\n~~~\n"],[-1,1424,"  "],[1,1426,"\n`"],[1,1432,"\nfor(i"],[-1,1460,"       "],[1,1467,"{\n cout"],[-1,1478,"  "],[1,1480,"}"],[-1,1483,"~~~"],[-1,1487,"（3"],[1,1492,"\n\n（3）时间"],[-1,1493,"\n"],[-1,1505,"  ~~~~"],[1,1518,"\nfor(i"],[-1,1548,"       "],[1,1555,"{\nfor(i"],[-1,1582,"    {  "],[1,1589,"{\ncout<"],[-1,1603,"    "],[1,1607,"}\n}"],[-1,1610,"~~~~~"],[1,1619,"\n\n  **"],[-1,1693,"   ~~~"],[1,1706,"\n"],[1,1708,"int"],[1,1709,"i="],[-1,1712," "],[-1,1715,"   "],[1,1718,"whi"],[1,1720,"("],[-1,1725," "],[-1,1728,"   "],[1,1731,"{"],[-1,1736," "],[1,1739,"i*2;"],[-1,1742,"    ~~\n "],[1,1750,"}\n"],[1,1753,"\n  **P"],[-1,1821,"\n\n\n\n\n# #"],[1,1829," \n"],[-1,1928," "],[1,1929,"\n"],[-1,2028,"线性表"],[1,2031,"\n"],[1,2034,"\n\n## 线性表"],[-1,2078,"\n\n\n"],[1,2084," 定义"],[-1,2780,"\n    \n"],[-1,2793," "],[1,2794,"\n"],[-1,2905,"A "],[1,2907,"\n\n- 常用的操"],[-1,3413," ~~~~ "],[1,3426,"\n    /"],[-1,3816,"~~~~\n\n"],[1,3825,"\n\n\n"],[1,3828," 线性"],[-1,4164,"      "],[1,4170,"**注意：*"],[-1,4304,"  "],[1,4310,"计算"],[1,4313,"\n"],[-1,4316,"\n"],[-1,4568,"  "],[1,4574,"元素"],[-1,4671,"    \n "],[1,4681,"c"],[-1,4682,"`"],[1,5061,"`\n  "],[-1,5066," \n"],[1,5072,"\n  "],[1,5076,"操作"],[-1,5080,"    \n  "],[-1,5216," "],[1,5217,"\n"],[1,5219,"ListIns"],[-1,5256,"     \n "],[-1,5853,"``"],[1,5855,"  \n      "],[-1,5882,"  "],[1,5888,"操作"],[-1,5996,"   \n   "],[1,6003,""],[-1,6485,""],[1,6485,"       "],[-1,6506,"    "],[-1,6512," \n"],[1,6514,"总结"],[1,6517,"\n"],[1,6519,"-"],[1,6521,"点："],[-1,6575,"   "],[1,6578,"- 缺"],[-1,6698,"\n"],[1,6703,"\n"],[1,6864,"数据域和指针域"],[-1,6874,"和指针域"],[1,7081,"\n "],[-1,7088," \n"],[1,7239,"  "],[-1,7249,"  "],[-1,7426,"\n![单链表中的头结"],[1,7474,"\n![单链表中的头结"]],[226,226],[7484,7484]]],[1556447000036,[null,[[-1,226,"\n"],[1,230,"\n\n- **"],[-1,230,"    \n"],[1,294,"物\n"],[-1,294,"\n\n- **物"],[-1,383,"数据间"],[1,391,"数据间"],[1,400,"\n    "],[-1,406,"\n    "],[1,427,"一的存储任意"],[-1,427,"意的存储单元"],[1,465,"\n\n---"],[-1,545,"\n---"],[-1,552,"\n"],[-1,667,"* "],[1,672,"、可"],[-1,672,"\n"],[1,675,"读性、"],[-1,678,"可读性"],[-1,684,"健"],[1,687,"、"],[-1,690,"时"],[1,694,"\n* "],[-1,694,"高"],[1,750,"- 时间复"],[-1,750,""],[-1,812," **时间复杂"],[1,827,"**"],[1,829,"   "],[1,831,"\n "],[-1,833,"定义：**\n"],[1,842,"**"],[-1,842," "],[-1,963," "],[1,966," "],[1,968," "],[-1,970,"* "],[1,977," "],[-1,1035," "],[1,1042," "],[1,1110,"   "],[-1,1112,"**分析一"],[1,1119,"**"],[1,1129,"  \n  "],[-1,1133,"\n"],[-1,1135,".用常数"],[1,1162,"    "],[-1,1163,".再修改"],[1,1190,"    "],[-1,1191,".如果最"],[1,1244,"    "],[-1,1245," 函数调"],[1,1269,"  "],[1,1272,"复1）"],[1,1288,"~~~"],[-1,1288,"   "],[1,1299," "],[-1,1299,"\n"],[1,1384,"~~~\n\n"],[-1,1384,"    \n(2)时间"],[1,1410,"\n~~~\n"],[1,1424,"  "],[-1,1424,"\n`"],[-1,1432,"\nfor(i"],[1,1466,"       "],[-1,1466,"{\n cout"],[1,1484,"  "],[-1,1484,"}"],[1,1488,"~~~"],[1,1489,"（3"],[-1,1492,"\n\n（3）时间"],[1,1500,"\n"],[1,1511,"  ~~~~"],[-1,1518,"\nfor(i"],[1,1554,"       "],[-1,1554,"{\nfor(i"],[1,1588,"    {  "],[-1,1588,"{\ncout<"],[1,1609,"    "],[-1,1609,"}\n}"],[1,1615,"~~~~~"],[-1,1619,"\n\n  **"],[1,1699,"   ~~~"],[-1,1706,"\n"],[-1,1709,"int"],[-1,1713,"i="],[1,1718," "],[1,1720,"   "],[-1,1720,"whi"],[-1,1725,"("],[1,1731," "],[1,1733,"   "],[-1,1733,"{"],[1,1739," "],[-1,1741,"i*2;"],[1,1748,"    ~~\n "],[-1,1748,"}\n"],[-1,1753,"\n  **P"],[1,1827,"\n\n\n\n\n# #"],[-1,1827," \n"],[1,1928," "],[-1,1928,"\n"],[1,2028,"线性表"],[-1,2028,"\n"],[-1,2032,"\n\n## 线性表"],[1,2084,"\n\n\n"],[-1,2087," 定义"],[1,2786,"\n    \n"],[1,2793," "],[-1,2793,"\n"],[1,2905,"A "],[-1,2905,"\n\n- 常用的操"],[1,3419," ~~~~ "],[-1,3426,"\n    /"],[1,3822,"~~~~\n\n"],[-1,3825,"\n\n\n"],[-1,3831," 线性"],[1,4170,"      "],[-1,4170,"**注意：*"],[1,4310,"  "],[-1,4314,"计算"],[-1,4319,"\n"],[1,4323,"\n"],[1,4574,"  "],[-1,4578,"元素"],[1,4677,"    \n "],[-1,4681,"c"],[1,4683,"`"],[-1,5061,"`\n  "],[1,5070," \n"],[-1,5074,"\n  "],[-1,5081,"操作"],[1,5087,"    \n  "],[1,5216," "],[-1,5216,"\n"],[-1,5219,"ListIns"],[1,5263,"     \n "],[1,5853,"``"],[-1,5853,"  \n      "],[1,5889,"  "],[-1,5893,"操作"],[1,6003,"   \n   "],[-1,6003,""],[1,6485,""],[-1,6485,"       "],[1,6513,"    "],[1,6515," \n"],[-1,6515,"总结"],[-1,6520,"\n"],[-1,6523,"-"],[-1,6526,"点："],[1,6582,"   "],[-1,6582,"- 缺"],[1,6705,"\n"],[-1,6709,"\n"],[-1,6871,"数据域和指针域"],[1,6888,"和指针域"],[-1,7091,"\n "],[1,7100," \n"],[-1,7249,"  "],[1,7261,"  "],[1,7436,"\n![单链表中的头结"],[-1,7474,"\n![单链表中的头结"]],[7484,7484],[226,226]]],[1556446970600,["GJX@GJXAIOU",[[1,34,"\n"]],[33,33],[34,34]]],[1556446970743,["GJX@GJXAIOU",[[1,35,"\n"]],[34,34],[35,35]]],[1556446980451,["GJX@GJXAIOU",[[1,35,"# 数据结构与算法"]],[35,35],[44,44]]],[1556446980929,["GJX@GJXAIOU",[[1,45,"\n"]],[44,44],[45,45]]],[1556446985482,["GJX@GJXAIOU",[[1,49,"一、"]],[49,49],[51,51]]],[1556446998247,["GJX@GJXAIOU",[[-1,111,"\n"]],[111,111],[110,110]]],[1556447060035,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,307,"物\n"],[1,309,"\n\n- **物"],[1,391,"数据间"],[-1,396,"数据间"],[-1,408,"\n    "],[1,419,"\n    "],[-1,435,"一的存储任意"],[1,441,"意的存储单元"],[-1,473,"\n\n---"],[1,558,"\n---"],[1,561,"\n"],[1,675,"* "],[-1,678,"、可"],[1,680,"\n"],[-1,682,"读性、"],[1,688,"可读性"],[1,691,"健"],[-1,693,"、"],[1,697,"时"],[-1,700,"\n* "],[1,703,"高"],[-1,758,"- 时间复"],[1,763,""],[1,825," **时间复杂"],[-1,833,"**"],[-1,837,"   "],[-1,842,"\n "],[1,846,"定义：**\n"],[-1,849,"**"],[1,851," "],[1,971," "],[-1,973," "],[-1,976," "],[1,979,"* "],[-1,984," "],[1,1043," "],[-1,1049," "],[-1,1118,"   "],[1,1123,"**分析一"],[-1,1125,"**"],[-1,1137,"  \n  "],[1,1146,"\n"],[1,1147,".用常数"],[-1,1170,"    "],[1,1175,".再修改"],[-1,1198,"    "],[1,1203,".如果最"],[-1,1252,"    "],[1,1257," 函数调"],[-1,1277,"  "],[-1,1282,"复1）"],[-1,1301,"~~~"],[1,1304,"   "],[-1,1312," "],[1,1313,"\n"],[-1,1397,"~~~\n\n"],[1,1402,"    \n(2)时间"],[-1,1418,"\n~~~\n"],[-1,1437,"  "],[1,1439,"\n`"],[1,1445,"\nfor(i"],[-1,1473,"       "],[1,1480,"{\n cout"],[-1,1491,"  "],[1,1493,"}"],[-1,1496,"~~~"],[-1,1500,"（3"],[1,1505,"\n\n（3）时间"],[-1,1506,"\n"],[-1,1518,"  ~~~~"],[1,1531,"\nfor(i"],[-1,1561,"       "],[1,1568,"{\nfor(i"],[-1,1595,"    {  "],[1,1602,"{\ncout<"],[-1,1616,"    "],[1,1620,"}\n}"],[-1,1623,"~~~~~"],[1,1632,"\n\n  **"],[-1,1706,"   ~~~"],[1,1719,"\n"],[1,1721,"int"],[1,1722,"i="],[-1,1725," "],[-1,1728,"   "],[1,1731,"whi"],[1,1733,"("],[-1,1738," "],[-1,1741,"   "],[1,1744,"{"],[-1,1749," "],[1,1752,"i*2;"],[-1,1755,"    ~~\n "],[1,1763,"}\n"],[1,1766,"\n  **P"],[-1,1834,"\n\n\n\n\n# #"],[1,1842," \n"],[-1,1941," "],[1,1942,"\n"],[-1,2041,"线性表"],[1,2044,"\n"],[1,2047,"\n\n## 线性表"],[-1,2091,"\n\n\n"],[1,2097," 定义"],[-1,2793,"\n    \n"],[-1,2806," "],[1,2807,"\n"],[-1,2918,"A "],[1,2920,"\n\n- 常用的操"],[-1,3426," ~~~~ "],[1,3439,"\n    /"],[-1,3829,"~~~~\n\n"],[1,3838,"\n\n\n"],[1,3841," 线性"],[-1,4177,"      "],[1,4183,"**注意：*"],[-1,4317,"  "],[1,4323,"计算"],[1,4326,"\n"],[-1,4329,"\n"],[-1,4581,"  "],[1,4587,"元素"],[-1,4684,"    \n "],[1,4694,"c"],[-1,4695,"`"],[1,5074,"`\n  "],[-1,5079," \n"],[1,5085,"\n  "],[1,5089,"操作"],[-1,5093,"    \n  "],[-1,5229," "],[1,5230,"\n"],[1,5232,"ListIns"],[-1,5269,"     \n "],[-1,5866,"``"],[1,5868,"  \n      "],[-1,5895,"  "],[1,5901,"操作"],[-1,6009,"   \n   "],[1,6016,""],[-1,6498,""],[1,6498,"       "],[-1,6519,"    "],[-1,6525," \n"],[1,6527,"总结"],[1,6530,"\n"],[1,6532,"-"],[1,6534,"点："],[-1,6588,"   "],[1,6591,"- 缺"],[-1,6711,"\n"],[1,6716,"\n"],[1,6877,"数据域和指针域"],[-1,6887,"和指针域"],[1,7094,"\n "],[-1,7101," \n"],[1,7252,"  "],[-1,7262,"  "],[-1,7439,"\n![单链表中的头结"],[1,7487,"\n![单链表中的头结"]],[239,239],[7497,7497]]],[1556447060035,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,307,"物\n"],[-1,307,"\n\n- **物"],[-1,396,"数据间"],[1,404,"数据间"],[1,413,"\n    "],[-1,419,"\n    "],[1,440,"一的存储任意"],[-1,440,"意的存储单元"],[1,478,"\n\n---"],[-1,558,"\n---"],[-1,565,"\n"],[-1,680,"* "],[1,685,"、可"],[-1,685,"\n"],[1,688,"读性、"],[-1,691,"可读性"],[-1,697,"健"],[1,700,"、"],[-1,703,"时"],[1,707,"\n* "],[-1,707,"高"],[1,763,"- 时间复"],[-1,763,""],[-1,825," **时间复杂"],[1,840,"**"],[1,842,"   "],[1,844,"\n "],[-1,846,"定义：**\n"],[1,855,"**"],[-1,855," "],[-1,976," "],[1,979," "],[1,981," "],[-1,983,"* "],[1,990," "],[-1,1048," "],[1,1055," "],[1,1123,"   "],[-1,1125,"**分析一"],[1,1132,"**"],[1,1142,"  \n  "],[-1,1146,"\n"],[-1,1148,".用常数"],[1,1175,"    "],[-1,1176,".再修改"],[1,1203,"    "],[-1,1204,".如果最"],[1,1257,"    "],[-1,1258," 函数调"],[1,1282,"  "],[1,1285,"复1）"],[1,1301,"~~~"],[-1,1301,"   "],[1,1312," "],[-1,1312,"\n"],[1,1397,"~~~\n\n"],[-1,1397,"    \n(2)时间"],[1,1423,"\n~~~\n"],[1,1437,"  "],[-1,1437,"\n`"],[-1,1445,"\nfor(i"],[1,1479,"       "],[-1,1479,"{\n cout"],[1,1497,"  "],[-1,1497,"}"],[1,1501,"~~~"],[1,1502,"（3"],[-1,1505,"\n\n（3）时间"],[1,1513,"\n"],[1,1524,"  ~~~~"],[-1,1531,"\nfor(i"],[1,1567,"       "],[-1,1567,"{\nfor(i"],[1,1601,"    {  "],[-1,1601,"{\ncout<"],[1,1622,"    "],[-1,1622,"}\n}"],[1,1628,"~~~~~"],[-1,1632,"\n\n  **"],[1,1712,"   ~~~"],[-1,1719,"\n"],[-1,1722,"int"],[-1,1726,"i="],[1,1731," "],[1,1733,"   "],[-1,1733,"whi"],[-1,1738,"("],[1,1744," "],[1,1746,"   "],[-1,1746,"{"],[1,1752," "],[-1,1754,"i*2;"],[1,1761,"    ~~\n "],[-1,1761,"}\n"],[-1,1766,"\n  **P"],[1,1840,"\n\n\n\n\n# #"],[-1,1840," \n"],[1,1941," "],[-1,1941,"\n"],[1,2041,"线性表"],[-1,2041,"\n"],[-1,2045,"\n\n## 线性表"],[1,2097,"\n\n\n"],[-1,2100," 定义"],[1,2799,"\n    \n"],[1,2806," "],[-1,2806,"\n"],[1,2918,"A "],[-1,2918,"\n\n- 常用的操"],[1,3432," ~~~~ "],[-1,3439,"\n    /"],[1,3835,"~~~~\n\n"],[-1,3838,"\n\n\n"],[-1,3844," 线性"],[1,4183,"      "],[-1,4183,"**注意：*"],[1,4323,"  "],[-1,4327,"计算"],[-1,4332,"\n"],[1,4336,"\n"],[1,4587,"  "],[-1,4591,"元素"],[1,4690,"    \n "],[-1,4694,"c"],[1,4696,"`"],[-1,5074,"`\n  "],[1,5083," \n"],[-1,5087,"\n  "],[-1,5094,"操作"],[1,5100,"    \n  "],[1,5229," "],[-1,5229,"\n"],[-1,5232,"ListIns"],[1,5276,"     \n "],[1,5866,"``"],[-1,5866,"  \n      "],[1,5902,"  "],[-1,5906,"操作"],[1,6016,"   \n   "],[-1,6016,""],[1,6498,""],[-1,6498,"       "],[1,6526,"    "],[1,6528," \n"],[-1,6528,"总结"],[-1,6533,"\n"],[-1,6536,"-"],[-1,6539,"点："],[1,6595,"   "],[-1,6595,"- 缺"],[1,6718,"\n"],[-1,6722,"\n"],[-1,6884,"数据域和指针域"],[1,6901,"和指针域"],[-1,7104,"\n "],[1,7113," \n"],[-1,7262,"  "],[1,7274,"  "],[1,7449,"\n![单链表中的头结"],[-1,7487,"\n![单链表中的头结"]],[7497,7497],[239,239]]],[1556447007489,["GJX@GJXAIOU",[[1,559,"\n"]],[558,558],[559,559]]],[1556447011275,["GJX@GJXAIOU",[[1,560,"\n"]],[559,559],[560,560]]],[1556447021663,["GJX@GJXAIOU",[[1,254,"海里"]],[254,254],[256,256]]],[1556447022656,["GJX@GJXAIOU",[[-1,254,"海里"]],[256,256],[254,254]]],[1556447025250,["GJX@GJXAIOU",[[1,254,"示例"]],[254,254],[256,256]]],[1556447240042,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物"],[1,311,"\n- **物"],[1,393,"数据间"],[-1,398,"数据间"],[-1,408,"  \n  "],[1,421,"\n    "],[-1,437,"一的存储任意"],[1,443,"意的存储单元"],[-1,475,"\n\n---"],[1,563,"---\n"],[1,565,"\n"],[1,679,"* "],[-1,682,"、可"],[1,684,"\n"],[-1,686,"读性、"],[1,692,"可读性"],[1,695,"健"],[-1,697,"、"],[1,701,"时"],[-1,704,"\n* "],[1,707,"高"],[-1,762,"- 时间复"],[1,767,""],[1,829," **时间复杂"],[-1,837,"**"],[-1,841,"   "],[-1,846,"\n "],[1,850,"定义：**\n"],[-1,853,"**"],[1,855," "],[1,975," "],[-1,977," "],[-1,980," "],[1,983,"* "],[-1,988," "],[1,1047," "],[-1,1053," "],[-1,1122,"   "],[1,1127,"**分析一"],[-1,1129,"**"],[-1,1141,"  \n  "],[1,1150,"\n"],[1,1151,".用常数"],[-1,1174,"    "],[1,1179,".再修改"],[-1,1202,"    "],[1,1207,".如果最"],[-1,1256,"    "],[1,1261," 函数调"],[-1,1281,"  "],[-1,1286,"复1）"],[-1,1305,"~~~"],[1,1308,"   "],[-1,1316," "],[1,1317,"\n"],[-1,1401,"~~~\n\n"],[1,1406,"    \n(2)时间"],[-1,1422,"\n~~~\n"],[-1,1441,"  "],[1,1443,"\n`"],[1,1449,"\nfor(i"],[-1,1477,"       "],[1,1484,"{\n cout"],[-1,1495,"  "],[1,1497,"}"],[-1,1500,"~~~"],[-1,1504,"（3"],[1,1509,"\n\n（3）时间"],[-1,1510,"\n"],[-1,1522,"  ~~~~"],[1,1535,"\nfor(i"],[-1,1565,"       "],[1,1572,"{\nfor(i"],[-1,1599,"    {  "],[1,1606,"{\ncout<"],[-1,1620,"    "],[1,1624,"}\n}"],[-1,1627,"~~~~~"],[1,1636,"\n\n  **"],[-1,1710,"   ~~~"],[1,1723,"\n"],[1,1725,"int"],[1,1726,"i="],[-1,1729," "],[-1,1732,"   "],[1,1735,"whi"],[1,1737,"("],[-1,1742," "],[-1,1745,"   "],[1,1748,"{"],[-1,1753," "],[1,1756,"i*2;"],[-1,1759,"    ~~\n "],[1,1767,"}\n"],[1,1770,"\n  **P"],[-1,1838,"\n\n\n\n\n# #"],[1,1846," \n"],[-1,1945," "],[1,1946,"\n"],[-1,2045,"线性表"],[1,2048,"\n"],[1,2051,"\n\n## 线性表"],[-1,2095,"\n\n\n"],[1,2101," 定义"],[-1,2797,"\n    \n"],[-1,2810," "],[1,2811,"\n"],[-1,2922,"A "],[1,2924,"\n\n- 常用的操"],[-1,3430," ~~~~ "],[1,3443,"\n    /"],[-1,3833,"~~~~\n\n"],[1,3842,"\n\n\n"],[1,3845," 线性"],[-1,4181,"      "],[1,4187,"**注意：*"],[-1,4321,"  "],[1,4327,"计算"],[1,4330,"\n"],[-1,4333,"\n"],[-1,4585,"  "],[1,4591,"元素"],[-1,4688,"    \n "],[1,4698,"c"],[-1,4699,"`"],[1,5078,"`\n  "],[-1,5083," \n"],[1,5089,"\n  "],[1,5093,"操作"],[-1,5097,"    \n  "],[-1,5233," "],[1,5234,"\n"],[1,5236,"ListIns"],[-1,5273,"     \n "],[-1,5870,"``"],[1,5872,"  \n      "],[-1,5899,"  "],[1,5905,"操作"],[-1,6013,"   \n   "],[1,6020,""],[-1,6502,""],[1,6502,"       "],[-1,6523,"    "],[-1,6529," \n"],[1,6531,"总结"],[1,6534,"\n"],[1,6536,"-"],[1,6538,"点："],[-1,6592,"   "],[1,6595,"- 缺"],[-1,6715,"\n"],[1,6720,"\n"],[1,6881,"数据域和指针域"],[-1,6891,"和指针域"],[1,7098,"\n "],[-1,7105," \n"],[1,7256,"  "],[-1,7266,"  "],[-1,7443,"\n![单链表中的头结"],[1,7491,"\n![单链表中的头结"]],[239,239],[7501,7501]]],[1556447240042,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物"],[-1,310,"\n- **物"],[-1,398,"数据间"],[1,406,"数据间"],[1,413,"  \n  "],[-1,421,"\n    "],[1,442,"一的存储任意"],[-1,442,"意的存储单元"],[1,480,"\n\n---"],[-1,563,"---\n"],[-1,569,"\n"],[-1,684,"* "],[1,689,"、可"],[-1,689,"\n"],[1,692,"读性、"],[-1,695,"可读性"],[-1,701,"健"],[1,704,"、"],[-1,707,"时"],[1,711,"\n* "],[-1,711,"高"],[1,767,"- 时间复"],[-1,767,""],[-1,829," **时间复杂"],[1,844,"**"],[1,846,"   "],[1,848,"\n "],[-1,850,"定义：**\n"],[1,859,"**"],[-1,859," "],[-1,980," "],[1,983," "],[1,985," "],[-1,987,"* "],[1,994," "],[-1,1052," "],[1,1059," "],[1,1127,"   "],[-1,1129,"**分析一"],[1,1136,"**"],[1,1146,"  \n  "],[-1,1150,"\n"],[-1,1152,".用常数"],[1,1179,"    "],[-1,1180,".再修改"],[1,1207,"    "],[-1,1208,".如果最"],[1,1261,"    "],[-1,1262," 函数调"],[1,1286,"  "],[1,1289,"复1）"],[1,1305,"~~~"],[-1,1305,"   "],[1,1316," "],[-1,1316,"\n"],[1,1401,"~~~\n\n"],[-1,1401,"    \n(2)时间"],[1,1427,"\n~~~\n"],[1,1441,"  "],[-1,1441,"\n`"],[-1,1449,"\nfor(i"],[1,1483,"       "],[-1,1483,"{\n cout"],[1,1501,"  "],[-1,1501,"}"],[1,1505,"~~~"],[1,1506,"（3"],[-1,1509,"\n\n（3）时间"],[1,1517,"\n"],[1,1528,"  ~~~~"],[-1,1535,"\nfor(i"],[1,1571,"       "],[-1,1571,"{\nfor(i"],[1,1605,"    {  "],[-1,1605,"{\ncout<"],[1,1626,"    "],[-1,1626,"}\n}"],[1,1632,"~~~~~"],[-1,1636,"\n\n  **"],[1,1716,"   ~~~"],[-1,1723,"\n"],[-1,1726,"int"],[-1,1730,"i="],[1,1735," "],[1,1737,"   "],[-1,1737,"whi"],[-1,1742,"("],[1,1748," "],[1,1750,"   "],[-1,1750,"{"],[1,1756," "],[-1,1758,"i*2;"],[1,1765,"    ~~\n "],[-1,1765,"}\n"],[-1,1770,"\n  **P"],[1,1844,"\n\n\n\n\n# #"],[-1,1844," \n"],[1,1945," "],[-1,1945,"\n"],[1,2045,"线性表"],[-1,2045,"\n"],[-1,2049,"\n\n## 线性表"],[1,2101,"\n\n\n"],[-1,2104," 定义"],[1,2803,"\n    \n"],[1,2810," "],[-1,2810,"\n"],[1,2922,"A "],[-1,2922,"\n\n- 常用的操"],[1,3436," ~~~~ "],[-1,3443,"\n    /"],[1,3839,"~~~~\n\n"],[-1,3842,"\n\n\n"],[-1,3848," 线性"],[1,4187,"      "],[-1,4187,"**注意：*"],[1,4327,"  "],[-1,4331,"计算"],[-1,4336,"\n"],[1,4340,"\n"],[1,4591,"  "],[-1,4595,"元素"],[1,4694,"    \n "],[-1,4698,"c"],[1,4700,"`"],[-1,5078,"`\n  "],[1,5087," \n"],[-1,5091,"\n  "],[-1,5098,"操作"],[1,5104,"    \n  "],[1,5233," "],[-1,5233,"\n"],[-1,5236,"ListIns"],[1,5280,"     \n "],[1,5870,"``"],[-1,5870,"  \n      "],[1,5906,"  "],[-1,5910,"操作"],[1,6020,"   \n   "],[-1,6020,""],[1,6502,""],[-1,6502,"       "],[1,6530,"    "],[1,6532," \n"],[-1,6532,"总结"],[-1,6537,"\n"],[-1,6540,"-"],[-1,6543,"点："],[1,6599,"   "],[-1,6599,"- 缺"],[1,6722,"\n"],[-1,6726,"\n"],[-1,6888,"数据域和指针域"],[1,6905,"和指针域"],[-1,7108,"\n "],[1,7117," \n"],[-1,7266,"  "],[1,7278,"  "],[1,7453,"\n![单链表中的头结"],[-1,7491,"\n![单链表中的头结"]],[7501,7501],[239,239]]],[1556447230482,["GJX@GJXAIOU",[[1,323," "]],[323,323],[324,324]]],[1556447300040,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[1,309,"\n\n- **"],[-1,310,"\n"],[1,318," "],[-1,323," "],[1,394,"数据间"],[-1,399,"数据间"],[-1,411,"\n    "],[1,422,"\n    "],[-1,438,"一的存储任意"],[1,444,"意的存储单元"],[-1,476,"\n\n---"],[1,564,"---\n"],[1,566,"\n"],[1,680,"* "],[-1,683,"、可"],[1,685,"\n"],[-1,687,"读性、"],[1,693,"可读性"],[1,696,"健"],[-1,698,"、"],[1,702,"时"],[-1,705,"\n* "],[1,708,"高"],[-1,763,"- 时间复"],[1,768,""],[1,830," **时间复杂"],[-1,838,"**"],[-1,842,"   "],[-1,847,"\n "],[1,851,"定义：**\n"],[-1,854,"**"],[1,856," "],[1,976," "],[-1,978," "],[-1,981," "],[1,984,"* "],[-1,989," "],[1,1048," "],[-1,1054," "],[-1,1123,"   "],[1,1128,"**分析一"],[-1,1130,"**"],[-1,1142,"  \n  "],[1,1151,"\n"],[1,1152,".用常数"],[-1,1175,"    "],[1,1180,".再修改"],[-1,1203,"    "],[1,1208,".如果最"],[-1,1257,"    "],[1,1262," 函数调"],[-1,1282,"  "],[-1,1287,"复1）"],[-1,1306,"~~~"],[1,1309,"   "],[-1,1317," "],[1,1318,"\n"],[-1,1402,"~~~\n\n"],[1,1407,"    \n(2)时间"],[-1,1423,"\n~~~\n"],[-1,1442,"  "],[1,1444,"\n`"],[1,1450,"\nfor(i"],[-1,1478,"       "],[1,1485,"{\n cout"],[-1,1496,"  "],[1,1498,"}"],[-1,1501,"~~~"],[-1,1505,"（3"],[1,1510,"\n\n（3）时间"],[-1,1511,"\n"],[-1,1523,"  ~~~~"],[1,1536,"\nfor(i"],[-1,1566,"       "],[1,1573,"{\nfor(i"],[-1,1600,"    {  "],[1,1607,"{\ncout<"],[-1,1621,"    "],[1,1625,"}\n}"],[-1,1628,"~~~~~"],[1,1637,"\n\n  **"],[-1,1711,"   ~~~"],[1,1724,"\n"],[1,1726,"int"],[1,1727,"i="],[-1,1730," "],[-1,1733,"   "],[1,1736,"whi"],[1,1738,"("],[-1,1743," "],[-1,1746,"   "],[1,1749,"{"],[-1,1754," "],[1,1757,"i*2;"],[-1,1760,"    ~~\n "],[1,1768,"}\n"],[1,1771,"\n  **P"],[-1,1839,"\n\n\n\n\n# #"],[1,1847," \n"],[-1,1946," "],[1,1947,"\n"],[-1,2046,"线性表"],[1,2049,"\n"],[1,2052,"\n\n## 线性表"],[-1,2096,"\n\n\n"],[1,2102," 定义"],[-1,2798,"\n    \n"],[-1,2811," "],[1,2812,"\n"],[-1,2923,"A "],[1,2925,"\n\n- 常用的操"],[-1,3431," ~~~~ "],[1,3444,"\n    /"],[-1,3834,"~~~~\n\n"],[1,3843,"\n\n\n"],[1,3846," 线性"],[-1,4182,"      "],[1,4188,"**注意：*"],[-1,4322,"  "],[1,4328,"计算"],[1,4331,"\n"],[-1,4334,"\n"],[-1,4586,"  "],[1,4592,"元素"],[-1,4689,"    \n "],[1,4699,"c"],[-1,4700,"`"],[1,5079,"`\n  "],[-1,5084," \n"],[1,5090,"\n  "],[1,5094,"操作"],[-1,5098,"    \n  "],[-1,5234," "],[1,5235,"\n"],[1,5237,"ListIns"],[-1,5274,"     \n "],[-1,5871,"``"],[1,5873,"  \n      "],[-1,5900,"  "],[1,5906,"操作"],[-1,6014,"   \n   "],[1,6021,""],[-1,6503,""],[1,6503,"       "],[-1,6524,"    "],[-1,6530," \n"],[1,6532,"总结"],[1,6535,"\n"],[1,6537,"-"],[1,6539,"点："],[-1,6593,"   "],[1,6596,"- 缺"],[-1,6716,"\n"],[1,6721,"\n"],[1,6882,"数据域和指针域"],[-1,6892,"和指针域"],[1,7099,"\n "],[-1,7106," \n"],[1,7257,"  "],[-1,7267,"  "],[-1,7444,"\n![单链表中的头结"],[1,7492,"\n![单链表中的头结"]],[239,239],[7502,7502]]],[1556447300040,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[-1,309,"\n\n- **"],[1,316,"\n"],[-1,323," "],[1,329," "],[-1,399,"数据间"],[1,407,"数据间"],[1,416,"\n    "],[-1,422,"\n    "],[1,443,"一的存储任意"],[-1,443,"意的存储单元"],[1,481,"\n\n---"],[-1,564,"---\n"],[-1,570,"\n"],[-1,685,"* "],[1,690,"、可"],[-1,690,"\n"],[1,693,"读性、"],[-1,696,"可读性"],[-1,702,"健"],[1,705,"、"],[-1,708,"时"],[1,712,"\n* "],[-1,712,"高"],[1,768,"- 时间复"],[-1,768,""],[-1,830," **时间复杂"],[1,845,"**"],[1,847,"   "],[1,849,"\n "],[-1,851,"定义：**\n"],[1,860,"**"],[-1,860," "],[-1,981," "],[1,984," "],[1,986," "],[-1,988,"* "],[1,995," "],[-1,1053," "],[1,1060," "],[1,1128,"   "],[-1,1130,"**分析一"],[1,1137,"**"],[1,1147,"  \n  "],[-1,1151,"\n"],[-1,1153,".用常数"],[1,1180,"    "],[-1,1181,".再修改"],[1,1208,"    "],[-1,1209,".如果最"],[1,1262,"    "],[-1,1263," 函数调"],[1,1287,"  "],[1,1290,"复1）"],[1,1306,"~~~"],[-1,1306,"   "],[1,1317," "],[-1,1317,"\n"],[1,1402,"~~~\n\n"],[-1,1402,"    \n(2)时间"],[1,1428,"\n~~~\n"],[1,1442,"  "],[-1,1442,"\n`"],[-1,1450,"\nfor(i"],[1,1484,"       "],[-1,1484,"{\n cout"],[1,1502,"  "],[-1,1502,"}"],[1,1506,"~~~"],[1,1507,"（3"],[-1,1510,"\n\n（3）时间"],[1,1518,"\n"],[1,1529,"  ~~~~"],[-1,1536,"\nfor(i"],[1,1572,"       "],[-1,1572,"{\nfor(i"],[1,1606,"    {  "],[-1,1606,"{\ncout<"],[1,1627,"    "],[-1,1627,"}\n}"],[1,1633,"~~~~~"],[-1,1637,"\n\n  **"],[1,1717,"   ~~~"],[-1,1724,"\n"],[-1,1727,"int"],[-1,1731,"i="],[1,1736," "],[1,1738,"   "],[-1,1738,"whi"],[-1,1743,"("],[1,1749," "],[1,1751,"   "],[-1,1751,"{"],[1,1757," "],[-1,1759,"i*2;"],[1,1766,"    ~~\n "],[-1,1766,"}\n"],[-1,1771,"\n  **P"],[1,1845,"\n\n\n\n\n# #"],[-1,1845," \n"],[1,1946," "],[-1,1946,"\n"],[1,2046,"线性表"],[-1,2046,"\n"],[-1,2050,"\n\n## 线性表"],[1,2102,"\n\n\n"],[-1,2105," 定义"],[1,2804,"\n    \n"],[1,2811," "],[-1,2811,"\n"],[1,2923,"A "],[-1,2923,"\n\n- 常用的操"],[1,3437," ~~~~ "],[-1,3444,"\n    /"],[1,3840,"~~~~\n\n"],[-1,3843,"\n\n\n"],[-1,3849," 线性"],[1,4188,"      "],[-1,4188,"**注意：*"],[1,4328,"  "],[-1,4332,"计算"],[-1,4337,"\n"],[1,4341,"\n"],[1,4592,"  "],[-1,4596,"元素"],[1,4695,"    \n "],[-1,4699,"c"],[1,4701,"`"],[-1,5079,"`\n  "],[1,5088," \n"],[-1,5092,"\n  "],[-1,5099,"操作"],[1,5105,"    \n  "],[1,5234," "],[-1,5234,"\n"],[-1,5237,"ListIns"],[1,5281,"     \n "],[1,5871,"``"],[-1,5871,"  \n      "],[1,5907,"  "],[-1,5911,"操作"],[1,6021,"   \n   "],[-1,6021,""],[1,6503,""],[-1,6503,"       "],[1,6531,"    "],[1,6533," \n"],[-1,6533,"总结"],[-1,6538,"\n"],[-1,6541,"-"],[-1,6544,"点："],[1,6600,"   "],[-1,6600,"- 缺"],[1,6723,"\n"],[-1,6727,"\n"],[-1,6889,"数据域和指针域"],[1,6906,"和指针域"],[-1,7109,"\n "],[1,7118," \n"],[-1,7267,"  "],[1,7279,"  "],[1,7454,"\n![单链表中的头结"],[-1,7492,"\n![单链表中的头结"]],[7502,7502],[239,239]]],[1556447266312,["GJX@GJXAIOU",[[1,387,"**"],[1,391,"**"]],[387,391],[387,395]]],[1556447288258,["GJX@GJXAIOU",[[-1,437,"：将数据元"]],[437,437],[437,437]]],[1556447360042,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,563,"---\n"],[1,565,"\n"],[1,679,"* "],[-1,682,"、可"],[1,684,"\n"],[-1,686,"读性、"],[1,692,"可读性"],[1,695,"健"],[-1,697,"、"],[1,701,"时"],[-1,704,"\n* "],[1,707,"高"],[-1,762,"- 时间复"],[1,767,""],[1,829," **时间复杂"],[-1,837,"**"],[-1,841,"   "],[-1,846,"\n "],[1,850,"定义：**\n"],[-1,853,"**"],[1,855," "],[1,975," "],[-1,977," "],[-1,980," "],[1,983,"* "],[-1,988," "],[1,1047," "],[-1,1053," "],[-1,1122,"   "],[1,1127,"**分析一"],[-1,1129,"**"],[-1,1141,"  \n  "],[1,1150,"\n"],[1,1151,".用常数"],[-1,1174,"    "],[1,1179,".再修改"],[-1,1202,"    "],[1,1207,".如果最"],[-1,1256,"    "],[1,1261," 函数调"],[-1,1281,"  "],[-1,1286,"复1）"],[-1,1305,"~~~"],[1,1308,"   "],[-1,1316," "],[1,1317,"\n"],[-1,1401,"~~~\n\n"],[1,1406,"    \n(2)时间"],[-1,1422,"\n~~~\n"],[-1,1441,"  "],[1,1443,"\n`"],[1,1449,"\nfor(i"],[-1,1477,"       "],[1,1484,"{\n cout"],[-1,1495,"  "],[1,1497,"}"],[-1,1500,"~~~"],[-1,1504,"（3"],[1,1509,"\n\n（3）时间"],[-1,1510,"\n"],[-1,1522,"  ~~~~"],[1,1535,"\nfor(i"],[-1,1565,"       "],[1,1572,"{\nfor(i"],[-1,1599,"    {  "],[1,1606,"{\ncout<"],[-1,1620,"    "],[1,1624,"}\n}"],[-1,1627,"~~~~~"],[1,1636,"\n\n  **"],[-1,1710,"   ~~~"],[1,1723,"\n"],[1,1725,"int"],[1,1726,"i="],[-1,1729," "],[-1,1732,"   "],[1,1735,"whi"],[1,1737,"("],[-1,1742," "],[-1,1745,"   "],[1,1748,"{"],[-1,1753," "],[1,1756,"i*2;"],[-1,1759,"    ~~\n "],[1,1767,"}\n"],[1,1770,"\n  **P"],[-1,1838,"\n\n\n\n\n# #"],[1,1846," \n"],[-1,1945," "],[1,1946,"\n"],[-1,2045,"线性表"],[1,2048,"\n"],[1,2051,"\n\n## 线性表"],[-1,2095,"\n\n\n"],[1,2101," 定义"],[-1,2797,"\n    \n"],[-1,2810," "],[1,2811,"\n"],[-1,2922,"A "],[1,2924,"\n\n- 常用的操"],[-1,3430," ~~~~ "],[1,3443,"\n    /"],[-1,3833,"~~~~\n\n"],[1,3842,"\n\n\n"],[1,3845," 线性"],[-1,4181,"      "],[1,4187,"**注意：*"],[-1,4321,"  "],[1,4327,"计算"],[1,4330,"\n"],[-1,4333,"\n"],[-1,4585,"  "],[1,4591,"元素"],[-1,4688,"    \n "],[1,4698,"c"],[-1,4699,"`"],[1,5078,"`\n  "],[-1,5083," \n"],[1,5089,"\n  "],[1,5093,"操作"],[-1,5097,"    \n  "],[-1,5233," "],[1,5234,"\n"],[1,5236,"ListIns"],[-1,5273,"     \n "],[-1,5870,"``"],[1,5872,"  \n      "],[-1,5899,"  "],[1,5905,"操作"],[-1,6013,"   \n   "],[1,6020,""],[-1,6502,""],[1,6502,"       "],[-1,6523,"    "],[-1,6529," \n"],[1,6531,"总结"],[1,6534,"\n"],[1,6536,"-"],[1,6538,"点："],[-1,6592,"   "],[1,6595,"- 缺"],[-1,6715,"\n"],[1,6720,"\n"],[1,6881,"数据域和指针域"],[-1,6891,"和指针域"],[1,7098,"\n "],[-1,7105," \n"],[1,7256,"  "],[-1,7266,"  "],[-1,7443,"\n![单链表中的头结"],[1,7491,"\n![单链表中的头结"]],[239,239],[7501,7501]]],[1556447360042,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,563,"---\n"],[-1,569,"\n"],[-1,684,"* "],[1,689,"、可"],[-1,689,"\n"],[1,692,"读性、"],[-1,695,"可读性"],[-1,701,"健"],[1,704,"、"],[-1,707,"时"],[1,711,"\n* "],[-1,711,"高"],[1,767,"- 时间复"],[-1,767,""],[-1,829," **时间复杂"],[1,844,"**"],[1,846,"   "],[1,848,"\n "],[-1,850,"定义：**\n"],[1,859,"**"],[-1,859," "],[-1,980," "],[1,983," "],[1,985," "],[-1,987,"* "],[1,994," "],[-1,1052," "],[1,1059," "],[1,1127,"   "],[-1,1129,"**分析一"],[1,1136,"**"],[1,1146,"  \n  "],[-1,1150,"\n"],[-1,1152,".用常数"],[1,1179,"    "],[-1,1180,".再修改"],[1,1207,"    "],[-1,1208,".如果最"],[1,1261,"    "],[-1,1262," 函数调"],[1,1286,"  "],[1,1289,"复1）"],[1,1305,"~~~"],[-1,1305,"   "],[1,1316," "],[-1,1316,"\n"],[1,1401,"~~~\n\n"],[-1,1401,"    \n(2)时间"],[1,1427,"\n~~~\n"],[1,1441,"  "],[-1,1441,"\n`"],[-1,1449,"\nfor(i"],[1,1483,"       "],[-1,1483,"{\n cout"],[1,1501,"  "],[-1,1501,"}"],[1,1505,"~~~"],[1,1506,"（3"],[-1,1509,"\n\n（3）时间"],[1,1517,"\n"],[1,1528,"  ~~~~"],[-1,1535,"\nfor(i"],[1,1571,"       "],[-1,1571,"{\nfor(i"],[1,1605,"    {  "],[-1,1605,"{\ncout<"],[1,1626,"    "],[-1,1626,"}\n}"],[1,1632,"~~~~~"],[-1,1636,"\n\n  **"],[1,1716,"   ~~~"],[-1,1723,"\n"],[-1,1726,"int"],[-1,1730,"i="],[1,1735," "],[1,1737,"   "],[-1,1737,"whi"],[-1,1742,"("],[1,1748," "],[1,1750,"   "],[-1,1750,"{"],[1,1756," "],[-1,1758,"i*2;"],[1,1765,"    ~~\n "],[-1,1765,"}\n"],[-1,1770,"\n  **P"],[1,1844,"\n\n\n\n\n# #"],[-1,1844," \n"],[1,1945," "],[-1,1945,"\n"],[1,2045,"线性表"],[-1,2045,"\n"],[-1,2049,"\n\n## 线性表"],[1,2101,"\n\n\n"],[-1,2104," 定义"],[1,2803,"\n    \n"],[1,2810," "],[-1,2810,"\n"],[1,2922,"A "],[-1,2922,"\n\n- 常用的操"],[1,3436," ~~~~ "],[-1,3443,"\n    /"],[1,3839,"~~~~\n\n"],[-1,3842,"\n\n\n"],[-1,3848," 线性"],[1,4187,"      "],[-1,4187,"**注意：*"],[1,4327,"  "],[-1,4331,"计算"],[-1,4336,"\n"],[1,4340,"\n"],[1,4591,"  "],[-1,4595,"元素"],[1,4694,"    \n "],[-1,4698,"c"],[1,4700,"`"],[-1,5078,"`\n  "],[1,5087," \n"],[-1,5091,"\n  "],[-1,5098,"操作"],[1,5104,"    \n  "],[1,5233," "],[-1,5233,"\n"],[-1,5236,"ListIns"],[1,5280,"     \n "],[1,5870,"``"],[-1,5870,"  \n      "],[1,5906,"  "],[-1,5910,"操作"],[1,6020,"   \n   "],[-1,6020,""],[1,6502,""],[-1,6502,"       "],[1,6530,"    "],[1,6532," \n"],[-1,6532,"总结"],[-1,6537,"\n"],[-1,6540,"-"],[-1,6543,"点："],[1,6599,"   "],[-1,6599,"- 缺"],[1,6722,"\n"],[-1,6726,"\n"],[-1,6888,"数据域和指针域"],[1,6905,"和指针域"],[-1,7108,"\n "],[1,7117," \n"],[-1,7266,"  "],[1,7278,"  "],[1,7453,"\n![单链表中的头结"],[-1,7491,"\n![单链表中的头结"]],[7501,7501],[239,239]]],[1556447353027,["GJX@GJXAIOU",[[1,489,"示意图"]],[489,489],[492,492]]],[1556447359663,["GJX@GJXAIOU",[[1,576,"二"]],[576,576],[577,577]]],[1556447420045,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n"],[1,568,"\n"],[1,571,"二"],[-1,576,"二"],[1,683,"* "],[-1,686,"、可"],[1,688,"\n"],[-1,690,"读性、"],[1,696,"可读性"],[1,699,"健"],[-1,701,"、"],[1,705,"时"],[-1,708,"\n* "],[1,711,"高"],[-1,766,"- 时间复"],[1,771,""],[1,833," **时间复杂"],[-1,841,"**"],[-1,845,"   "],[-1,850,"\n "],[1,854,"定义：**\n"],[-1,857,"**"],[1,859," "],[1,979," "],[-1,981," "],[-1,984," "],[1,987,"* "],[-1,992," "],[1,1051," "],[-1,1057," "],[-1,1126,"   "],[1,1131,"**分析一"],[-1,1133,"**"],[-1,1145,"  \n  "],[1,1154,"\n"],[1,1155,".用常数"],[-1,1178,"    "],[1,1183,".再修改"],[-1,1206,"    "],[1,1211,".如果最"],[-1,1260,"    "],[1,1265," 函数调"],[-1,1285,"  "],[-1,1290,"复1）"],[-1,1309,"~~~"],[1,1312,"   "],[-1,1320," "],[1,1321,"\n"],[-1,1405,"~~~\n\n"],[1,1410,"    \n(2)时间"],[-1,1426,"\n~~~\n"],[-1,1445,"  "],[1,1447,"\n`"],[1,1453,"\nfor(i"],[-1,1481,"       "],[1,1488,"{\n cout"],[-1,1499,"  "],[1,1501,"}"],[-1,1504,"~~~"],[-1,1508,"（3"],[1,1513,"\n\n（3）时间"],[-1,1514,"\n"],[-1,1526,"  ~~~~"],[1,1539,"\nfor(i"],[-1,1569,"       "],[1,1576,"{\nfor(i"],[-1,1603,"    {  "],[1,1610,"{\ncout<"],[-1,1624,"    "],[1,1628,"}\n}"],[-1,1631,"~~~~~"],[1,1640,"\n\n  **"],[-1,1714,"   ~~~"],[1,1727,"\n"],[1,1729,"int"],[1,1730,"i="],[-1,1733," "],[-1,1736,"   "],[1,1739,"whi"],[1,1741,"("],[-1,1746," "],[-1,1749,"   "],[1,1752,"{"],[-1,1757," "],[1,1760,"i*2;"],[-1,1763,"    ~~\n "],[1,1771,"}\n"],[1,1774,"\n  **P"],[-1,1842,"\n\n\n\n\n# #"],[1,1850," \n"],[-1,1949," "],[1,1950,"\n"],[-1,2049,"线性表"],[1,2052,"\n"],[1,2055,"\n\n## 线性表"],[-1,2099,"\n\n\n"],[1,2105," 定义"],[-1,2801,"\n    \n"],[-1,2814," "],[1,2815,"\n"],[-1,2926,"A "],[1,2928,"\n\n- 常用的操"],[-1,3434," ~~~~ "],[1,3447,"\n    /"],[-1,3837,"~~~~\n\n"],[1,3846,"\n\n\n"],[1,3849," 线性"],[-1,4185,"      "],[1,4191,"**注意：*"],[-1,4325,"  "],[1,4331,"计算"],[1,4334,"\n"],[-1,4337,"\n"],[-1,4589,"  "],[1,4595,"元素"],[-1,4692,"    \n "],[1,4702,"c"],[-1,4703,"`"],[1,5082,"`\n  "],[-1,5087," \n"],[1,5093,"\n  "],[1,5097,"操作"],[-1,5101,"    \n  "],[-1,5237," "],[1,5238,"\n"],[1,5240,"ListIns"],[-1,5277,"     \n "],[-1,5874,"``"],[1,5876,"  \n      "],[-1,5903,"  "],[1,5909,"操作"],[-1,6017,"   \n   "],[1,6024,""],[-1,6506,""],[1,6506,"       "],[-1,6527,"    "],[-1,6533," \n"],[1,6535,"总结"],[1,6538,"\n"],[1,6540,"-"],[1,6542,"点："],[-1,6596,"   "],[1,6599,"- 缺"],[-1,6719,"\n"],[1,6724,"\n"],[1,6885,"数据域和指针域"],[-1,6895,"和指针域"],[1,7102,"\n "],[-1,7109," \n"],[1,7260,"  "],[-1,7270,"  "],[-1,7447,"\n![单链表中的头结"],[1,7495,"\n![单链表中的头结"]],[239,239],[7505,7505]]],[1556447420045,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n"],[-1,572,"\n"],[-1,576,"二"],[1,582,"二"],[-1,688,"* "],[1,693,"、可"],[-1,693,"\n"],[1,696,"读性、"],[-1,699,"可读性"],[-1,705,"健"],[1,708,"、"],[-1,711,"时"],[1,715,"\n* "],[-1,715,"高"],[1,771,"- 时间复"],[-1,771,""],[-1,833," **时间复杂"],[1,848,"**"],[1,850,"   "],[1,852,"\n "],[-1,854,"定义：**\n"],[1,863,"**"],[-1,863," "],[-1,984," "],[1,987," "],[1,989," "],[-1,991,"* "],[1,998," "],[-1,1056," "],[1,1063," "],[1,1131,"   "],[-1,1133,"**分析一"],[1,1140,"**"],[1,1150,"  \n  "],[-1,1154,"\n"],[-1,1156,".用常数"],[1,1183,"    "],[-1,1184,".再修改"],[1,1211,"    "],[-1,1212,".如果最"],[1,1265,"    "],[-1,1266," 函数调"],[1,1290,"  "],[1,1293,"复1）"],[1,1309,"~~~"],[-1,1309,"   "],[1,1320," "],[-1,1320,"\n"],[1,1405,"~~~\n\n"],[-1,1405,"    \n(2)时间"],[1,1431,"\n~~~\n"],[1,1445,"  "],[-1,1445,"\n`"],[-1,1453,"\nfor(i"],[1,1487,"       "],[-1,1487,"{\n cout"],[1,1505,"  "],[-1,1505,"}"],[1,1509,"~~~"],[1,1510,"（3"],[-1,1513,"\n\n（3）时间"],[1,1521,"\n"],[1,1532,"  ~~~~"],[-1,1539,"\nfor(i"],[1,1575,"       "],[-1,1575,"{\nfor(i"],[1,1609,"    {  "],[-1,1609,"{\ncout<"],[1,1630,"    "],[-1,1630,"}\n}"],[1,1636,"~~~~~"],[-1,1640,"\n\n  **"],[1,1720,"   ~~~"],[-1,1727,"\n"],[-1,1730,"int"],[-1,1734,"i="],[1,1739," "],[1,1741,"   "],[-1,1741,"whi"],[-1,1746,"("],[1,1752," "],[1,1754,"   "],[-1,1754,"{"],[1,1760," "],[-1,1762,"i*2;"],[1,1769,"    ~~\n "],[-1,1769,"}\n"],[-1,1774,"\n  **P"],[1,1848,"\n\n\n\n\n# #"],[-1,1848," \n"],[1,1949," "],[-1,1949,"\n"],[1,2049,"线性表"],[-1,2049,"\n"],[-1,2053,"\n\n## 线性表"],[1,2105,"\n\n\n"],[-1,2108," 定义"],[1,2807,"\n    \n"],[1,2814," "],[-1,2814,"\n"],[1,2926,"A "],[-1,2926,"\n\n- 常用的操"],[1,3440," ~~~~ "],[-1,3447,"\n    /"],[1,3843,"~~~~\n\n"],[-1,3846,"\n\n\n"],[-1,3852," 线性"],[1,4191,"      "],[-1,4191,"**注意：*"],[1,4331,"  "],[-1,4335,"计算"],[-1,4340,"\n"],[1,4344,"\n"],[1,4595,"  "],[-1,4599,"元素"],[1,4698,"    \n "],[-1,4702,"c"],[1,4704,"`"],[-1,5082,"`\n  "],[1,5091," \n"],[-1,5095,"\n  "],[-1,5102,"操作"],[1,5108,"    \n  "],[1,5237," "],[-1,5237,"\n"],[-1,5240,"ListIns"],[1,5284,"     \n "],[1,5874,"``"],[-1,5874,"  \n      "],[1,5910,"  "],[-1,5914,"操作"],[1,6024,"   \n   "],[-1,6024,""],[1,6506,""],[-1,6506,"       "],[1,6534,"    "],[1,6536," \n"],[-1,6536,"总结"],[-1,6541,"\n"],[-1,6544,"-"],[-1,6547,"点："],[1,6603,"   "],[-1,6603,"- 缺"],[1,6726,"\n"],[-1,6730,"\n"],[-1,6892,"数据域和指针域"],[1,6909,"和指针域"],[-1,7112,"\n "],[1,7121," \n"],[-1,7270,"  "],[1,7282,"  "],[1,7457,"\n![单链表中的头结"],[-1,7495,"\n![单链表中的头结"]],[7505,7505],[239,239]]],[1556447360091,["GJX@GJXAIOU",[[1,577,"、"]],[577,577],[578,578]]],[1556447368366,["GJX@GJXAIOU",[[1,597," "]],[597,597],[598,598]]],[1556447376113,["GJX@GJXAIOU",[[-1,696,"* "]],[696,698],[696,696]]],[1556447377464,["GJX@GJXAIOU",[[-1,696,"\n"]],[696,696],[695,695]]],[1556447480045,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可"],[1,690,"\n"],[1,692,"可"],[-1,694,"、"],[1,698,"健"],[-1,700,"、"],[1,704,"时"],[-1,707,"\n* "],[1,710,"高"],[-1,765,"- 时间复"],[1,770,""],[1,832," **时间复杂"],[-1,840,"**"],[-1,844,"   "],[-1,849,"\n "],[1,853,"定义：**\n"],[-1,856,"**"],[1,858," "],[1,978," "],[-1,980," "],[-1,983," "],[1,986,"* "],[-1,991," "],[1,1050," "],[-1,1056," "],[-1,1125,"   "],[1,1130,"**分析一"],[-1,1132,"**"],[-1,1144,"  \n  "],[1,1153,"\n"],[1,1154,".用常数"],[-1,1177,"    "],[1,1182,".再修改"],[-1,1205,"    "],[1,1210,".如果最"],[-1,1259,"    "],[1,1264," 函数调"],[-1,1284,"  "],[-1,1289,"复1）"],[-1,1308,"~~~"],[1,1311,"   "],[-1,1319," "],[1,1320,"\n"],[-1,1404,"~~~\n\n"],[1,1409,"    \n(2)时间"],[-1,1425,"\n~~~\n"],[-1,1444,"  "],[1,1446,"\n`"],[1,1452,"\nfor(i"],[-1,1480,"       "],[1,1487,"{\n cout"],[-1,1498,"  "],[1,1500,"}"],[-1,1503,"~~~"],[-1,1507,"（3"],[1,1512,"\n\n（3）时间"],[-1,1513,"\n"],[-1,1525,"  ~~~~"],[1,1538,"\nfor(i"],[-1,1568,"       "],[1,1575,"{\nfor(i"],[-1,1602,"    {  "],[1,1609,"{\ncout<"],[-1,1623,"    "],[1,1627,"}\n}"],[-1,1630,"~~~~~"],[1,1639,"\n\n  **"],[-1,1713,"   ~~~"],[1,1726,"\n"],[1,1728,"int"],[1,1729,"i="],[-1,1732," "],[-1,1735,"   "],[1,1738,"whi"],[1,1740,"("],[-1,1745," "],[-1,1748,"   "],[1,1751,"{"],[-1,1756," "],[1,1759,"i*2;"],[-1,1762,"    ~~\n "],[1,1770,"}\n"],[1,1773,"\n  **P"],[-1,1841,"\n\n\n\n\n# #"],[1,1849," \n"],[-1,1948," "],[1,1949,"\n"],[-1,2048,"线性表"],[1,2051,"\n"],[1,2054,"\n\n## 线性表"],[-1,2098,"\n\n\n"],[1,2104," 定义"],[-1,2800,"\n    \n"],[-1,2813," "],[1,2814,"\n"],[-1,2925,"A "],[1,2927,"\n\n- 常用的操"],[-1,3433," ~~~~ "],[1,3446,"\n    /"],[-1,3836,"~~~~\n\n"],[1,3845,"\n\n\n"],[1,3848," 线性"],[-1,4184,"      "],[1,4190,"**注意：*"],[-1,4324,"  "],[1,4330,"计算"],[1,4333,"\n"],[-1,4336,"\n"],[-1,4588,"  "],[1,4594,"元素"],[-1,4691,"    \n "],[1,4701,"c"],[-1,4702,"`"],[1,5081,"`\n  "],[-1,5086," \n"],[1,5092,"\n  "],[1,5096,"操作"],[-1,5100,"    \n  "],[-1,5236," "],[1,5237,"\n"],[1,5239,"ListIns"],[-1,5276,"     \n "],[-1,5873,"``"],[1,5875,"  \n      "],[-1,5902,"  "],[1,5908,"操作"],[-1,6016,"   \n   "],[1,6023,""],[-1,6505,""],[1,6505,"       "],[-1,6526,"    "],[-1,6532," \n"],[1,6534,"总结"],[1,6537,"\n"],[1,6539,"-"],[1,6541,"点："],[-1,6595,"   "],[1,6598,"- 缺"],[-1,6718,"\n"],[1,6723,"\n"],[1,6884,"数据域和指针域"],[-1,6894,"和指针域"],[1,7101,"\n "],[-1,7108," \n"],[1,7259,"  "],[-1,7269,"  "],[-1,7446,"\n![单链表中的头结"],[1,7494,"\n![单链表中的头结"]],[239,239],[7504,7504]]],[1556447480045,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可"],[-1,695,"\n"],[-1,698,"可"],[1,701,"、"],[-1,704,"健"],[1,707,"、"],[-1,710,"时"],[1,714,"\n* "],[-1,714,"高"],[1,770,"- 时间复"],[-1,770,""],[-1,832," **时间复杂"],[1,847,"**"],[1,849,"   "],[1,851,"\n "],[-1,853,"定义：**\n"],[1,862,"**"],[-1,862," "],[-1,983," "],[1,986," "],[1,988," "],[-1,990,"* "],[1,997," "],[-1,1055," "],[1,1062," "],[1,1130,"   "],[-1,1132,"**分析一"],[1,1139,"**"],[1,1149,"  \n  "],[-1,1153,"\n"],[-1,1155,".用常数"],[1,1182,"    "],[-1,1183,".再修改"],[1,1210,"    "],[-1,1211,".如果最"],[1,1264,"    "],[-1,1265," 函数调"],[1,1289,"  "],[1,1292,"复1）"],[1,1308,"~~~"],[-1,1308,"   "],[1,1319," "],[-1,1319,"\n"],[1,1404,"~~~\n\n"],[-1,1404,"    \n(2)时间"],[1,1430,"\n~~~\n"],[1,1444,"  "],[-1,1444,"\n`"],[-1,1452,"\nfor(i"],[1,1486,"       "],[-1,1486,"{\n cout"],[1,1504,"  "],[-1,1504,"}"],[1,1508,"~~~"],[1,1509,"（3"],[-1,1512,"\n\n（3）时间"],[1,1520,"\n"],[1,1531,"  ~~~~"],[-1,1538,"\nfor(i"],[1,1574,"       "],[-1,1574,"{\nfor(i"],[1,1608,"    {  "],[-1,1608,"{\ncout<"],[1,1629,"    "],[-1,1629,"}\n}"],[1,1635,"~~~~~"],[-1,1639,"\n\n  **"],[1,1719,"   ~~~"],[-1,1726,"\n"],[-1,1729,"int"],[-1,1733,"i="],[1,1738," "],[1,1740,"   "],[-1,1740,"whi"],[-1,1745,"("],[1,1751," "],[1,1753,"   "],[-1,1753,"{"],[1,1759," "],[-1,1761,"i*2;"],[1,1768,"    ~~\n "],[-1,1768,"}\n"],[-1,1773,"\n  **P"],[1,1847,"\n\n\n\n\n# #"],[-1,1847," \n"],[1,1948," "],[-1,1948,"\n"],[1,2048,"线性表"],[-1,2048,"\n"],[-1,2052,"\n\n## 线性表"],[1,2104,"\n\n\n"],[-1,2107," 定义"],[1,2806,"\n    \n"],[1,2813," "],[-1,2813,"\n"],[1,2925,"A "],[-1,2925,"\n\n- 常用的操"],[1,3439," ~~~~ "],[-1,3446,"\n    /"],[1,3842,"~~~~\n\n"],[-1,3845,"\n\n\n"],[-1,3851," 线性"],[1,4190,"      "],[-1,4190,"**注意：*"],[1,4330,"  "],[-1,4334,"计算"],[-1,4339,"\n"],[1,4343,"\n"],[1,4594,"  "],[-1,4598,"元素"],[1,4697,"    \n "],[-1,4701,"c"],[1,4703,"`"],[-1,5081,"`\n  "],[1,5090," \n"],[-1,5094,"\n  "],[-1,5101,"操作"],[1,5107,"    \n  "],[1,5236," "],[-1,5236,"\n"],[-1,5239,"ListIns"],[1,5283,"     \n "],[1,5873,"``"],[-1,5873,"  \n      "],[1,5909,"  "],[-1,5913,"操作"],[1,6023,"   \n   "],[-1,6023,""],[1,6505,""],[-1,6505,"       "],[1,6533,"    "],[1,6535," \n"],[-1,6535,"总结"],[-1,6540,"\n"],[-1,6543,"-"],[-1,6546,"点："],[1,6602,"   "],[-1,6602,"- 缺"],[1,6725,"\n"],[-1,6729,"\n"],[-1,6891,"数据域和指针域"],[1,6908,"和指针域"],[-1,7111,"\n "],[1,7120," \n"],[-1,7269,"  "],[1,7281,"  "],[1,7456,"\n![单链表中的头结"],[-1,7494,"\n![单链表中的头结"]],[7504,7504],[239,239]]],[1556447439834,["GJX@GJXAIOU",[[1,698,"\n* "]],[695,695],[698,698]]],[1556447440413,["GJX@GJXAIOU",[[1,698,"•算法程序没有语法错误。\n\n•算法程序对于合法输入能够产生满足要求的输出。\n\n•算法程序对于非法输入能够产生满足规格的说明。\n\n•算法程序对于故意刁难的测试输入都有满足要求的输出结果。"]],[698,698],[790,790]]],[1556447443073,["GJX@GJXAIOU",[[-1,711,"\n"]],[711,711],[710,710]]],[1556447444826,["GJX@GJXAIOU",[[-1,735,"\n"]],[735,735],[734,734]]],[1556447446624,["GJX@GJXAIOU",[[-1,759,"\n"]],[759,759],[758,758]]],[1556447449809,["GJX@GJXAIOU",[[-1,759,"•"]],[760,760],[759,759]]],[1556447450433,["GJX@GJXAIOU",[[-1,735,"•"]],[736,736],[735,735]]],[1556447451073,["GJX@GJXAIOU",[[-1,711,"•"]],[712,712],[711,711]]],[1556447451740,["GJX@GJXAIOU",[[-1,698,"•"]],[699,699],[698,698]]],[1556447455068,["GJX@GJXAIOU",[[1,710,"* "],[1,733,"* "],[1,756,"* "]],[710,783],[712,789]]],[1556447458834,["GJX@GJXAIOU",[[1,696,"  "],[1,710,"  "],[1,735,"  "],[1,760,"  "]],[698,789],[700,797]]],[1556447660049,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[-1,867,"- 时间复"],[1,872,""],[1,934," **时间复杂"],[-1,942,"**"],[-1,946,"   "],[-1,951,"\n "],[1,955,"定义：**\n"],[-1,958,"**"],[1,960," "],[1,1080," "],[-1,1082," "],[-1,1085," "],[1,1088,"* "],[-1,1093," "],[1,1152," "],[-1,1158," "],[-1,1227,"   "],[1,1232,"**分析一"],[-1,1234,"**"],[-1,1246,"  \n  "],[1,1255,"\n"],[1,1256,".用常数"],[-1,1279,"    "],[1,1284,".再修改"],[-1,1307,"    "],[1,1312,".如果最"],[-1,1361,"    "],[1,1366," 函数调"],[-1,1386,"  "],[-1,1391,"复1）"],[-1,1410,"~~~"],[1,1413,"   "],[-1,1421," "],[1,1422,"\n"],[-1,1506,"~~~\n\n"],[1,1511,"    \n(2)时间"],[-1,1527,"\n~~~\n"],[-1,1546,"  "],[1,1548,"\n`"],[1,1554,"\nfor(i"],[-1,1582,"       "],[1,1589,"{\n cout"],[-1,1600,"  "],[1,1602,"}"],[-1,1605,"~~~"],[-1,1609,"（3"],[1,1614,"\n\n（3）时间"],[-1,1615,"\n"],[-1,1627,"  ~~~~"],[1,1640,"\nfor(i"],[-1,1670,"       "],[1,1677,"{\nfor(i"],[-1,1704,"    {  "],[1,1711,"{\ncout<"],[-1,1725,"    "],[1,1729,"}\n}"],[-1,1732,"~~~~~"],[1,1741,"\n\n  **"],[-1,1815,"   ~~~"],[1,1828,"\n"],[1,1830,"int"],[1,1831,"i="],[-1,1834," "],[-1,1837,"   "],[1,1840,"whi"],[1,1842,"("],[-1,1847," "],[-1,1850,"   "],[1,1853,"{"],[-1,1858," "],[1,1861,"i*2;"],[-1,1864,"    ~~\n "],[1,1872,"}\n"],[1,1875,"\n  **P"],[-1,1943,"\n\n\n\n\n# #"],[1,1951," \n"],[-1,2050," "],[1,2051,"\n"],[-1,2150,"线性表"],[1,2153,"\n"],[1,2156,"\n\n## 线性表"],[-1,2200,"\n\n\n"],[1,2206," 定义"],[-1,2902,"\n    \n"],[-1,2915," "],[1,2916,"\n"],[-1,3027,"A "],[1,3029,"\n\n- 常用的操"],[-1,3535," ~~~~ "],[1,3548,"\n    /"],[-1,3938,"~~~~\n\n"],[1,3947,"\n\n\n"],[1,3950," 线性"],[-1,4286,"      "],[1,4292,"**注意：*"],[-1,4426,"  "],[1,4432,"计算"],[1,4435,"\n"],[-1,4438,"\n"],[-1,4690,"  "],[1,4696,"元素"],[-1,4793,"    \n "],[1,4803,"c"],[-1,4804,"`"],[1,5183,"`\n  "],[-1,5188," \n"],[1,5194,"\n  "],[1,5198,"操作"],[-1,5202,"    \n  "],[-1,5338," "],[1,5339,"\n"],[1,5341,"ListIns"],[-1,5378,"     \n "],[-1,5975,"``"],[1,5977,"  \n      "],[-1,6004,"  "],[1,6010,"操作"],[-1,6118,"   \n   "],[1,6125,""],[-1,6607,""],[1,6607,"       "],[-1,6628,"    "],[-1,6634," \n"],[1,6636,"总结"],[1,6639,"\n"],[1,6641,"-"],[1,6643,"点："],[-1,6697,"   "],[1,6700,"- 缺"],[-1,6820,"\n"],[1,6825,"\n"],[1,6986,"数据域和指针域"],[-1,6996,"和指针域"],[1,7203,"\n "],[-1,7210," \n"],[1,7361,"  "],[-1,7371,"  "],[-1,7548,"\n![单链表中的头结"],[1,7596,"\n![单链表中的头结"]],[239,239],[7606,7606]]],[1556447660049,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[1,872,"- 时间复"],[-1,872,""],[-1,934," **时间复杂"],[1,949,"**"],[1,951,"   "],[1,953,"\n "],[-1,955,"定义：**\n"],[1,964,"**"],[-1,964," "],[-1,1085," "],[1,1088," "],[1,1090," "],[-1,1092,"* "],[1,1099," "],[-1,1157," "],[1,1164," "],[1,1232,"   "],[-1,1234,"**分析一"],[1,1241,"**"],[1,1251,"  \n  "],[-1,1255,"\n"],[-1,1257,".用常数"],[1,1284,"    "],[-1,1285,".再修改"],[1,1312,"    "],[-1,1313,".如果最"],[1,1366,"    "],[-1,1367," 函数调"],[1,1391,"  "],[1,1394,"复1）"],[1,1410,"~~~"],[-1,1410,"   "],[1,1421," "],[-1,1421,"\n"],[1,1506,"~~~\n\n"],[-1,1506,"    \n(2)时间"],[1,1532,"\n~~~\n"],[1,1546,"  "],[-1,1546,"\n`"],[-1,1554,"\nfor(i"],[1,1588,"       "],[-1,1588,"{\n cout"],[1,1606,"  "],[-1,1606,"}"],[1,1610,"~~~"],[1,1611,"（3"],[-1,1614,"\n\n（3）时间"],[1,1622,"\n"],[1,1633,"  ~~~~"],[-1,1640,"\nfor(i"],[1,1676,"       "],[-1,1676,"{\nfor(i"],[1,1710,"    {  "],[-1,1710,"{\ncout<"],[1,1731,"    "],[-1,1731,"}\n}"],[1,1737,"~~~~~"],[-1,1741,"\n\n  **"],[1,1821,"   ~~~"],[-1,1828,"\n"],[-1,1831,"int"],[-1,1835,"i="],[1,1840," "],[1,1842,"   "],[-1,1842,"whi"],[-1,1847,"("],[1,1853," "],[1,1855,"   "],[-1,1855,"{"],[1,1861," "],[-1,1863,"i*2;"],[1,1870,"    ~~\n "],[-1,1870,"}\n"],[-1,1875,"\n  **P"],[1,1949,"\n\n\n\n\n# #"],[-1,1949," \n"],[1,2050," "],[-1,2050,"\n"],[1,2150,"线性表"],[-1,2150,"\n"],[-1,2154,"\n\n## 线性表"],[1,2206,"\n\n\n"],[-1,2209," 定义"],[1,2908,"\n    \n"],[1,2915," "],[-1,2915,"\n"],[1,3027,"A "],[-1,3027,"\n\n- 常用的操"],[1,3541," ~~~~ "],[-1,3548,"\n    /"],[1,3944,"~~~~\n\n"],[-1,3947,"\n\n\n"],[-1,3953," 线性"],[1,4292,"      "],[-1,4292,"**注意：*"],[1,4432,"  "],[-1,4436,"计算"],[-1,4441,"\n"],[1,4445,"\n"],[1,4696,"  "],[-1,4700,"元素"],[1,4799,"    \n "],[-1,4803,"c"],[1,4805,"`"],[-1,5183,"`\n  "],[1,5192," \n"],[-1,5196,"\n  "],[-1,5203,"操作"],[1,5209,"    \n  "],[1,5338," "],[-1,5338,"\n"],[-1,5341,"ListIns"],[1,5385,"     \n "],[1,5975,"``"],[-1,5975,"  \n      "],[1,6011,"  "],[-1,6015,"操作"],[1,6125,"   \n   "],[-1,6125,""],[1,6607,""],[-1,6607,"       "],[1,6635,"    "],[1,6637," \n"],[-1,6637,"总结"],[-1,6642,"\n"],[-1,6645,"-"],[-1,6648,"点："],[1,6704,"   "],[-1,6704,"- 缺"],[1,6827,"\n"],[-1,6831,"\n"],[-1,6993,"数据域和指针域"],[1,7010,"和指针域"],[-1,7213,"\n "],[1,7222," \n"],[-1,7371,"  "],[1,7383,"  "],[1,7558,"\n![单链表中的头结"],[-1,7596,"\n![单链表中的头结"]],[7606,7606],[239,239]]],[1556447618933,["GJX@GJXAIOU",[[1,843,"三、"]],[843,843],[845,845]]],[1556447720053,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,869,"- 时间复"],[1,936," **时间复杂"],[-1,944,"**"],[-1,948,"   "],[-1,952," \n"],[1,957,"定义：**\n "],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1363,"    -"],[1,1368,"- 函数调"],[-1,1387,"  "],[-1,1393,"复1）"],[-1,1412,"~~~"],[1,1415,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1556,"\nfor(i"],[-1,1584,"       "],[1,1591,"{\n cout"],[-1,1602,"  "],[1,1604,"}"],[-1,1607,"~~~"],[-1,1611,"（3"],[-1,1616,"复\n"],[1,1618,"\n\n（3）时间复"],[-1,1629,"  ~~~~"],[1,1642,"\nfor(i"],[-1,1672,"       "],[1,1679,"{\nfor(i"],[-1,1706,"    {  "],[1,1713,"{\ncout<"],[-1,1727,"    "],[1,1731,"}\n}"],[-1,1734,"~~~~~"],[1,1743,"\n\n  **"],[-1,1817,"   ~~~"],[1,1830,"\n"],[1,1832,"int"],[1,1833,"i="],[-1,1838,"    "],[1,1842,"whi"],[1,1844,"("],[-1,1851,"    \n "],[1,1857,"{\n"],[1,1863,"i*2;"],[-1,1866,"    ~~\n "],[1,1874,"}\n"],[1,1877,"\n  **P"],[-1,1945,"\n\n\n\n\n# #"],[1,1953," \n"],[-1,2052," "],[1,2053,"\n"],[-1,2152,"线性表"],[1,2158,"\n\n\n## 线性表"],[-1,2202,"\n\n\n"],[1,2208," 定义"],[-1,2904,"\n    \n"],[-1,2917," "],[1,2918,"\n"],[-1,3029,"A "],[1,3031,"\n\n- 常用的操"],[-1,3537," ~~~~ "],[1,3550,"\n    /"],[-1,3940,"~~~~\n\n"],[1,3949,"\n\n\n"],[1,3952," 线性"],[-1,4288,"      "],[1,4294,"**注意：*"],[-1,4428,"  "],[1,4434,"计算"],[1,4437,"\n"],[-1,4440,"\n"],[-1,4692,"  "],[1,4698,"元素"],[-1,4795,"    \n "],[1,4805,"c"],[-1,4806,"`"],[1,5185,"`\n  "],[-1,5190," \n"],[1,5196,"\n  "],[1,5200,"操作"],[-1,5204,"    \n  "],[-1,5340," "],[1,5341,"\n"],[1,5343,"ListIns"],[-1,5380,"     \n "],[-1,5977,"``"],[1,5979,"  \n      "],[-1,6006,"  "],[1,6012,"操作"],[-1,6120,"   \n   "],[1,6127,""],[-1,6609,""],[1,6609,"       "],[-1,6630,"    "],[-1,6636," \n"],[1,6638,"总结"],[1,6641,"\n"],[1,6643,"-"],[1,6645,"点："],[-1,6699,"   "],[1,6702,"- 缺"],[-1,6822,"\n"],[1,6827,"\n"],[1,6988,"数据域和指针域"],[-1,6998,"和指针域"],[1,7205,"\n "],[-1,7212," \n"],[1,7363,"  "],[-1,7373,"  "],[-1,7550,"\n![单链表中的头结"],[1,7598,"\n![单链表中的头结"]],[239,239],[7608,7608]]],[1556447720053,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,874,"- 时间复"],[-1,936," **时间复杂"],[1,951,"**"],[1,953,"   "],[1,954," \n"],[-1,957,"定义：**\n "],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1368,"    -"],[-1,1368,"- 函数调"],[1,1392,"  "],[1,1396,"复1）"],[1,1412,"~~~"],[-1,1412,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1556,"\nfor(i"],[1,1590,"       "],[-1,1590,"{\n cout"],[1,1608,"  "],[-1,1608,"}"],[1,1612,"~~~"],[1,1613,"（3"],[1,1616,"复\n"],[-1,1616,"\n\n（3）时间复"],[1,1635,"  ~~~~"],[-1,1642,"\nfor(i"],[1,1678,"       "],[-1,1678,"{\nfor(i"],[1,1712,"    {  "],[-1,1712,"{\ncout<"],[1,1733,"    "],[-1,1733,"}\n}"],[1,1739,"~~~~~"],[-1,1743,"\n\n  **"],[1,1823,"   ~~~"],[-1,1830,"\n"],[-1,1833,"int"],[-1,1837,"i="],[1,1844,"    "],[-1,1844,"whi"],[-1,1849,"("],[1,1857,"    \n "],[-1,1857,"{\n"],[-1,1865,"i*2;"],[1,1872,"    ~~\n "],[-1,1872,"}\n"],[-1,1877,"\n  **P"],[1,1951,"\n\n\n\n\n# #"],[-1,1951," \n"],[1,2052," "],[-1,2052,"\n"],[1,2152,"线性表"],[-1,2155,"\n\n\n## 线性表"],[1,2208,"\n\n\n"],[-1,2211," 定义"],[1,2910,"\n    \n"],[1,2917," "],[-1,2917,"\n"],[1,3029,"A "],[-1,3029,"\n\n- 常用的操"],[1,3543," ~~~~ "],[-1,3550,"\n    /"],[1,3946,"~~~~\n\n"],[-1,3949,"\n\n\n"],[-1,3955," 线性"],[1,4294,"      "],[-1,4294,"**注意：*"],[1,4434,"  "],[-1,4438,"计算"],[-1,4443,"\n"],[1,4447,"\n"],[1,4698,"  "],[-1,4702,"元素"],[1,4801,"    \n "],[-1,4805,"c"],[1,4807,"`"],[-1,5185,"`\n  "],[1,5194," \n"],[-1,5198,"\n  "],[-1,5205,"操作"],[1,5211,"    \n  "],[1,5340," "],[-1,5340,"\n"],[-1,5343,"ListIns"],[1,5387,"     \n "],[1,5977,"``"],[-1,5977,"  \n      "],[1,6013,"  "],[-1,6017,"操作"],[1,6127,"   \n   "],[-1,6127,""],[1,6609,""],[-1,6609,"       "],[1,6637,"    "],[1,6639," \n"],[-1,6639,"总结"],[-1,6644,"\n"],[-1,6647,"-"],[-1,6650,"点："],[1,6706,"   "],[-1,6706,"- 缺"],[1,6829,"\n"],[-1,6833,"\n"],[-1,6995,"数据域和指针域"],[1,7012,"和指针域"],[-1,7215,"\n "],[1,7224," \n"],[-1,7373,"  "],[1,7385,"  "],[1,7560,"\n![单链表中的头结"],[-1,7598,"\n![单链表中的头结"]],[7608,7608],[239,239]]],[1556447665910,["GJX@GJXAIOU",[[-1,879,"度量"]],[881,881],[879,879]]],[1556447667523,["GJX@GJXAIOU",[[-1,879,"方法"]],[881,881],[879,879]]],[1556447671368,["GJX@GJXAIOU",[[1,879,"取决因素"]],[879,879],[883,883]]],[1556447675606,["GJX@GJXAIOU",[[1,874,"- "]],[874,874],[876,876]]],[1556447679803,["GJX@GJXAIOU",[[1,886,"  "],[1,899,"  "],[1,911,"  "],[1,921,"  "]],[886,932],[886,940]]],[1556447690498,["GJX@GJXAIOU",[[1,947,"（）"]],[947,947],[949,949]]],[1556447692865,["GJX@GJXAIOU",[[1,948,"一"]],[948,948],[949,949]]],[1556448081283,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度"],[1,947," "],[1,952,"时间复杂度**"],[-1,957,"**"],[-1,961,"   "],[-1,966,"\n **"],[1,970,"**定义：**\n "],[-1,973,"**"],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1168," "],[-1,1173," "],[-1,1242,"   "],[-1,1247,"个算"],[1,1251,"分析一个算"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1376,"    "],[1,1381," 函数调"],[-1,1401,"  "],[-1,1404,"1）复"],[-1,1425,"~~~"],[1,1428,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n`"],[1,1569,"\nfor(i"],[-1,1597,"       "],[1,1604,"{\n cout"],[-1,1615,"  "],[1,1617,"}"],[-1,1620,"~~~"],[-1,1624,"（3"],[1,1629,"\n\n（3）时间"],[-1,1630,"\n"],[-1,1642,"  ~~~~"],[1,1655,"\nfor(i"],[-1,1685,"       "],[1,1692,"{\nfor(i"],[-1,1719,"    {  "],[1,1726,"{\ncout<"],[-1,1740,"    "],[1,1744,"}\n}"],[-1,1747,"~~~~~"],[1,1756,"\n\n  **"],[-1,1830,"   ~~~"],[1,1843,"\n"],[1,1845,"int"],[1,1846,"i="],[-1,1851,"    "],[1,1855,"whi"],[1,1857,"("],[-1,1864,"    \n "],[1,1870,"{\n"],[1,1876,"i*2;"],[-1,1879,"    ~~\n "],[1,1887,"}\n"],[1,1890,"\n  **P"],[-1,1958,"\n\n\n\n\n# #"],[1,1966," \n"],[-1,2065," "],[1,2066,"\n"],[-1,2165,"线性表"],[1,2171,"\n\n\n## 线性表"],[-1,2215,"\n\n\n"],[1,2221," 定义"],[-1,2917,"\n    \n"],[-1,2930," "],[1,2931,"\n"],[-1,3042,"A "],[1,3044,"\n\n- 常用的操"],[-1,3550," ~~~~ "],[1,3563,"\n    /"],[-1,3953,"~~~~\n\n"],[1,3962,"\n\n\n"],[1,3965," 线性"],[-1,4301,"      "],[1,4307,"**注意：*"],[-1,4441,"  "],[1,4447,"计算"],[1,4450,"\n"],[-1,4453,"\n"],[-1,4705,"  "],[1,4711,"元素"],[-1,4808,"    \n "],[1,4818,"c"],[-1,4819,"`"],[1,5198,"`\n  "],[-1,5203," \n"],[1,5209,"\n  "],[1,5213,"操作"],[-1,5217,"    \n  "],[-1,5353," "],[1,5354,"\n"],[1,5356,"ListIns"],[-1,5393,"     \n "],[-1,5990,"``"],[1,5992,"  \n      "],[-1,6019,"  "],[1,6025,"操作"],[-1,6133,"   \n   "],[1,6140,""],[-1,6622,""],[1,6622,"       "],[-1,6643,"    "],[-1,6649," \n"],[1,6651,"总结"],[1,6654,"\n"],[1,6656,"-"],[1,6658,"点："],[-1,6712,"   "],[1,6715,"- 缺"],[-1,6835,"\n"],[1,6840,"\n"],[1,7001,"数据域和指针域"],[-1,7011,"和指针域"],[1,7218,"\n "],[-1,7225," \n"],[1,7376,"  "],[-1,7386,"  "],[-1,7563,"\n![单链表中的头结"],[1,7611,"\n![单链表中的头结"]],[239,239],[7621,7621]]],[1556448081283,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度"],[-1,946," "],[-1,952,"时间复杂度**"],[1,964,"**"],[1,966,"   "],[1,968,"\n **"],[-1,968,"**定义：**\n "],[1,980,"**"],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1173," "],[1,1179," "],[1,1247,"   "],[1,1249,"个算"],[-1,1251,"分析一个算"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1381,"    "],[-1,1382," 函数调"],[1,1406,"  "],[1,1407,"1）复"],[1,1425,"~~~"],[-1,1425,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n`"],[-1,1569,"\nfor(i"],[1,1603,"       "],[-1,1603,"{\n cout"],[1,1621,"  "],[-1,1621,"}"],[1,1625,"~~~"],[1,1626,"（3"],[-1,1629,"\n\n（3）时间"],[1,1637,"\n"],[1,1648,"  ~~~~"],[-1,1655,"\nfor(i"],[1,1691,"       "],[-1,1691,"{\nfor(i"],[1,1725,"    {  "],[-1,1725,"{\ncout<"],[1,1746,"    "],[-1,1746,"}\n}"],[1,1752,"~~~~~"],[-1,1756,"\n\n  **"],[1,1836,"   ~~~"],[-1,1843,"\n"],[-1,1846,"int"],[-1,1850,"i="],[1,1857,"    "],[-1,1857,"whi"],[-1,1862,"("],[1,1870,"    \n "],[-1,1870,"{\n"],[-1,1878,"i*2;"],[1,1885,"    ~~\n "],[-1,1885,"}\n"],[-1,1890,"\n  **P"],[1,1964,"\n\n\n\n\n# #"],[-1,1964," \n"],[1,2065," "],[-1,2065,"\n"],[1,2165,"线性表"],[-1,2168,"\n\n\n## 线性表"],[1,2221,"\n\n\n"],[-1,2224," 定义"],[1,2923,"\n    \n"],[1,2930," "],[-1,2930,"\n"],[1,3042,"A "],[-1,3042,"\n\n- 常用的操"],[1,3556," ~~~~ "],[-1,3563,"\n    /"],[1,3959,"~~~~\n\n"],[-1,3962,"\n\n\n"],[-1,3968," 线性"],[1,4307,"      "],[-1,4307,"**注意：*"],[1,4447,"  "],[-1,4451,"计算"],[-1,4456,"\n"],[1,4460,"\n"],[1,4711,"  "],[-1,4715,"元素"],[1,4814,"    \n "],[-1,4818,"c"],[1,4820,"`"],[-1,5198,"`\n  "],[1,5207," \n"],[-1,5211,"\n  "],[-1,5218,"操作"],[1,5224,"    \n  "],[1,5353," "],[-1,5353,"\n"],[-1,5356,"ListIns"],[1,5400,"     \n "],[1,5990,"``"],[-1,5990,"  \n      "],[1,6026,"  "],[-1,6030,"操作"],[1,6140,"   \n   "],[-1,6140,""],[1,6622,""],[-1,6622,"       "],[1,6650,"    "],[1,6652," \n"],[-1,6652,"总结"],[-1,6657,"\n"],[-1,6660,"-"],[-1,6663,"点："],[1,6719,"   "],[-1,6719,"- 缺"],[1,6842,"\n"],[-1,6846,"\n"],[-1,7008,"数据域和指针域"],[1,7025,"和指针域"],[-1,7228,"\n "],[1,7237," \n"],[-1,7386,"  "],[1,7398,"  "],[1,7573,"\n![单链表中的头结"],[-1,7611,"\n![单链表中的头结"]],[7621,7621],[239,239]]],[1556448021687,["GJX@GJXAIOU",[[-1,1380,"\n"]],[1379,1379],[1378,1378]]],[1556448021809,["GJX@GJXAIOU",[[-1,1379,"\n"]],[1378,1378],[1377,1377]]],[1556448021963,["GJX@GJXAIOU",[[-1,1376," "]],[1377,1377],[1376,1376]]],[1556448026553,["GJX@GJXAIOU",[[1,1380,"常见"]],[1380,1380],[1382,1382]]],[1556448032713,["GJX@GJXAIOU",[[1,1380,"**"],[1,1394,"**"]],[1380,1394],[1380,1398]]],[1556448041229,["GJX@GJXAIOU",[[-1,1435,"java"],[1,1439,"c"]],[1435,1439],[1436,1436]]],[1556448045379,["GJX@GJXAIOU",[[-1,1565,"java"],[1,1569,"c"]],[1565,1569],[1566,1566]]],[1556448049139,["GJX@GJXAIOU",[[-1,1648,"java"],[1,1652,"c"]],[1648,1652],[1649,1649]]],[1556448059348,["GJX@GJXAIOU",[[-1,1810,"  "]],[1813,1813],[1811,1811]]],[1556448059921,["GJX@GJXAIOU",[[-1,1809," "]],[1811,1811],[1811,1811]]],[1556448072899,["GJX@GJXAIOU",[[1,1920,"`"],[1,1923,"`"]],[1920,1923],[1920,1925]]],[1556448074319,["GJX@GJXAIOU",[[-1,1920,"`$$ `"]],[1920,1925],[1920,1920]]],[1556448074493,["GJX@GJXAIOU",[[1,1920,"`"]],[1920,1920],[1921,1921]]],[1556448077469,["GJX@GJXAIOU",[[-1,1930,"$$"]],[1930,1932],[1930,1930]]],[1556448077628,["GJX@GJXAIOU",[[1,1930,"`"]],[1930,1930],[1931,1931]]],[1556448080973,["GJX@GJXAIOU",[[1,1942,"`"]],[1942,1942],[1943,1943]]],[1556448141295,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度"],[1,947," "],[1,950,"**时间复杂度"],[-1,957,"**"],[-1,961,"   "],[-1,966,"\n "],[1,970,"定义：**\n"],[-1,973,"**"],[1,975," "],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1168," "],[-1,1173," "],[-1,1242,"   "],[-1,1247,"个算"],[1,1251,"分析一个算"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1371," \n"],[-1,1375,"\n  用的"],[1,1380,"- "],[1,1384,"函数调用的"],[1,1391,"**"],[-1,1396,"**"],[-1,1404,"  "],[-1,1409,"复1）"],[-1,1428,"~~~"],[1,1431,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n`"],[1,1566,"\nfor(i"],[-1,1594,"       "],[1,1601,"{\n cout"],[-1,1612,"  "],[1,1614,"}"],[-1,1617,"~~~"],[-1,1621,"（3"],[-1,1626,"复\n"],[1,1628,"\n\n（3）时间复"],[-1,1639,"  ~~~~"],[1,1649,"\nfor(i"],[-1,1679,"       "],[1,1686,"{\nfor(i"],[-1,1713,"    {  "],[1,1720,"{\ncout<"],[-1,1734,"    "],[1,1738,"}\n}"],[-1,1741,"~~~~~"],[1,1750,"\n\n  **"],[-1,1803,"   "],[1,1809,"时间复"],[-1,1821,"   ~~~"],[1,1834,"\n"],[1,1836,"int"],[1,1837,"i="],[-1,1842,"    "],[1,1846,"whi"],[1,1848,"("],[-1,1855,"    \n "],[1,1861,"{\n"],[1,1867,"i*2;"],[-1,1870,"    ~~\n "],[1,1878,"}\n"],[1,1881,"\n  **P"],[-1,1914,"$$ x=l`^n $$"],[1,1926,"`x=log2^n `"],[-1,1930,"`"],[1,1931,"其时"],[1,1936,"`"],[-1,1942,"`"],[-1,1947,"\n\n\n\n\n# #"],[1,1955," \n"],[-1,2054," "],[1,2055,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2160,"## 线性表"],[-1,2204,"\n\n\n"],[1,2210," 定义"],[-1,2906,"\n    \n"],[-1,2919," "],[1,2920,"\n"],[-1,3031,"A "],[1,3033,"\n\n- 常用的操"],[-1,3539," ~~~~ "],[1,3552,"\n    /"],[-1,3942,"~~~~\n\n"],[1,3951,"\n\n\n"],[1,3954," 线性"],[-1,4290,"      "],[1,4296,"**注意：*"],[-1,4430,"  "],[1,4436,"计算"],[1,4439,"\n"],[-1,4442,"\n"],[-1,4694,"  "],[1,4700,"元素"],[-1,4797,"    \n "],[1,4807,"c"],[-1,4808,"`"],[1,5187,"`\n  "],[-1,5192," \n"],[1,5198,"\n  "],[1,5202,"操作"],[-1,5206,"    \n  "],[-1,5342," "],[1,5343,"\n"],[1,5345,"ListIns"],[-1,5382,"     \n "],[-1,5979,"``"],[1,5981,"  \n      "],[-1,6008,"  "],[1,6014,"操作"],[-1,6122,"   \n   "],[1,6129,""],[-1,6611,""],[1,6611,"       "],[-1,6632,"    "],[-1,6638," \n"],[1,6640,"总结"],[1,6643,"\n"],[1,6645,"-"],[1,6647,"点："],[-1,6701,"   "],[1,6704,"- 缺"],[-1,6824,"\n"],[1,6829,"\n"],[1,6990,"数据域和指针域"],[-1,7000,"和指针域"],[1,7207,"\n "],[-1,7214," \n"],[1,7365,"  "],[-1,7375,"  "],[-1,7552,"\n![单链表中的头结"],[1,7600,"\n![单链表中的头结"]],[239,239],[7610,7610]]],[1556448141295,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度"],[-1,946," "],[-1,950,"**时间复杂度"],[1,964,"**"],[1,966,"   "],[1,968,"\n "],[-1,970,"定义：**\n"],[1,979,"**"],[-1,979," "],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1173," "],[1,1179," "],[1,1247,"   "],[1,1249,"个算"],[-1,1251,"分析一个算"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1376," \n"],[1,1378,"\n  用的"],[-1,1378,"- "],[-1,1384,"函数调用的"],[-1,1396,"**"],[1,1403,"**"],[1,1409,"  "],[1,1412,"复1）"],[1,1428,"~~~"],[-1,1428,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n`"],[-1,1566,"\nfor(i"],[1,1600,"       "],[-1,1600,"{\n cout"],[1,1618,"  "],[-1,1618,"}"],[1,1622,"~~~"],[1,1623,"（3"],[1,1626,"复\n"],[-1,1626,"\n\n（3）时间复"],[1,1645,"  ~~~~"],[-1,1649,"\nfor(i"],[1,1685,"       "],[-1,1685,"{\nfor(i"],[1,1719,"    {  "],[-1,1719,"{\ncout<"],[1,1740,"    "],[-1,1740,"}\n}"],[1,1746,"~~~~~"],[-1,1750,"\n\n  **"],[1,1809,"   "],[-1,1812,"时间复"],[1,1827,"   ~~~"],[-1,1834,"\n"],[-1,1837,"int"],[-1,1841,"i="],[1,1848,"    "],[-1,1848,"whi"],[-1,1853,"("],[1,1861,"    \n "],[-1,1861,"{\n"],[-1,1869,"i*2;"],[1,1876,"    ~~\n "],[-1,1876,"}\n"],[-1,1881,"\n  **P"],[1,1920,"$$ x=l`^n $$"],[-1,1920,"`x=log2^n `"],[1,1935,"`"],[-1,1935,"其时"],[-1,1942,"`"],[1,1949,"`"],[1,1953,"\n\n\n\n\n# #"],[-1,1953," \n"],[1,2054," "],[-1,2054,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2160,"## 线性表"],[1,2210,"\n\n\n"],[-1,2213," 定义"],[1,2912,"\n    \n"],[1,2919," "],[-1,2919,"\n"],[1,3031,"A "],[-1,3031,"\n\n- 常用的操"],[1,3545," ~~~~ "],[-1,3552,"\n    /"],[1,3948,"~~~~\n\n"],[-1,3951,"\n\n\n"],[-1,3957," 线性"],[1,4296,"      "],[-1,4296,"**注意：*"],[1,4436,"  "],[-1,4440,"计算"],[-1,4445,"\n"],[1,4449,"\n"],[1,4700,"  "],[-1,4704,"元素"],[1,4803,"    \n "],[-1,4807,"c"],[1,4809,"`"],[-1,5187,"`\n  "],[1,5196," \n"],[-1,5200,"\n  "],[-1,5207,"操作"],[1,5213,"    \n  "],[1,5342," "],[-1,5342,"\n"],[-1,5345,"ListIns"],[1,5389,"     \n "],[1,5979,"``"],[-1,5979,"  \n      "],[1,6015,"  "],[-1,6019,"操作"],[1,6129,"   \n   "],[-1,6129,""],[1,6611,""],[-1,6611,"       "],[1,6639,"    "],[1,6641," \n"],[-1,6641,"总结"],[-1,6646,"\n"],[-1,6649,"-"],[-1,6652,"点："],[1,6708,"   "],[-1,6708,"- 缺"],[1,6831,"\n"],[-1,6835,"\n"],[-1,6997,"数据域和指针域"],[1,7014,"和指针域"],[-1,7217,"\n "],[1,7226," \n"],[-1,7375,"  "],[1,7387,"  "],[1,7562,"\n![单链表中的头结"],[-1,7600,"\n![单链表中的头结"]],[7610,7610],[239,239]]],[1556448082078,["GJX@GJXAIOU",[[1,1950,"`"]],[1950,1950],[1951,1951]]],[1556448096264,["GJX@GJXAIOU",[[1,2161,"\n"]],[2157,2157],[2158,2158]]],[1556448096388,["GJX@GJXAIOU",[[1,2162,"\n"]],[2158,2158],[2159,2159]]],[1556448100583,["GJX@GJXAIOU",[[1,2159,"### ()"]],[2159,2159],[2165,2165]]],[1556448101909,["GJX@GJXAIOU",[[1,2164,"er"]],[2164,2164],[2166,2166]]],[1556448102738,["GJX@GJXAIOU",[[-1,2164,"er"]],[2166,2166],[2164,2164]]],[1556448104276,["GJX@GJXAIOU",[[1,2164,"二"]],[2164,2164],[2165,2165]]],[1556448110395,["GJX@GJXAIOU",[[1,2166,"空间复杂度"]],[2166,2166],[2171,2171]]],[1556448111005,["GJX@GJXAIOU",[[1,2175,"\n"]],[2171,2171],[2172,2172]]],[1556448201307,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度"],[1,947," "],[1,952,"时间复杂度**"],[-1,957,"**"],[-1,961,"   "],[-1,966,"\n "],[1,968,"**定义："],[1,970,"\n"],[-1,973,"**"],[1,975," "],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1167," "],[-1,1173," "],[-1,1242,"   "],[-1,1247,"个算"],[1,1251,"分析一个算"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1371," \n"],[-1,1375,"\n  用的"],[1,1380,"- "],[1,1384,"函数调用的"],[1,1391,"**"],[-1,1396,"**"],[-1,1403,"  "],[-1,1409,"复1）"],[-1,1428,"~~~"],[1,1431,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n"],[1,1565,"`"],[1,1566,"\nfor(i"],[-1,1594,"       "],[1,1601,"{\n cout"],[-1,1612,"  "],[1,1614,"}"],[-1,1617,"~~~"],[-1,1621,"（3"],[1,1626,"\n\n（3）时间"],[-1,1627,"\n"],[-1,1639,"  ~~~~"],[1,1649,"\nfor(i"],[-1,1679,"       "],[1,1686,"{\nfor(i"],[-1,1713,"    {  "],[1,1720,"{\ncout<"],[-1,1734,"    "],[1,1738,"}\n}"],[-1,1741,"~~~~~"],[1,1750,"\n\n  **"],[-1,1803,"   "],[1,1809,"时间复"],[-1,1821,"   ~~~"],[1,1834,"\n"],[1,1836,"int"],[1,1837,"i="],[-1,1842,"    "],[1,1846,"whi"],[1,1848,"("],[-1,1855,"    \n "],[1,1861,"{\n"],[1,1867,"i*2;"],[-1,1870,"    ~~\n "],[1,1878,"}\n"],[1,1881,"\n  **P"],[-1,1914,"$$ x=l`^n $$"],[1,1926,"`x=log2^n `"],[-1,1930,"`"],[1,1931,"其时"],[1,1936,"`"],[-1,1942,"`"],[-1,1944,"。\n\n\n\n\n"],[1,1951,"。"],[-1,1953,"# #"],[1,1956," \n"],[-1,2055," "],[1,2056,"\n"],[-1,2155,"线性表"],[1,2158,"\n\n\n"],[1,2176,"## 线性表"],[-1,2220,"\n\n\n"],[1,2226," 定义"],[-1,2922,"\n    \n"],[-1,2935," "],[1,2936,"\n"],[-1,3047,"A "],[1,3049,"\n\n- 常用的操"],[-1,3555," ~~~~ "],[1,3568,"\n    /"],[-1,3958,"~~~~\n\n"],[1,3967,"\n\n\n"],[1,3970," 线性"],[-1,4306,"      "],[1,4312,"**注意：*"],[-1,4446,"  "],[1,4452,"计算"],[1,4455,"\n"],[-1,4458,"\n"],[-1,4710,"  "],[1,4716,"元素"],[-1,4813,"    \n "],[1,4823,"c"],[-1,4824,"`"],[1,5203,"`\n  "],[-1,5208," \n"],[1,5214,"\n  "],[1,5218,"操作"],[-1,5222,"    \n  "],[-1,5358," "],[1,5359,"\n"],[1,5361,"ListIns"],[-1,5398,"     \n "],[-1,5995,"``"],[1,5997,"  \n      "],[-1,6024,"  "],[1,6030,"操作"],[-1,6138,"   \n   "],[1,6145,""],[-1,6627,""],[1,6627,"       "],[-1,6648,"    "],[-1,6654," \n"],[1,6656,"总结"],[1,6659,"\n"],[1,6661,"-"],[1,6663,"点："],[-1,6717,"   "],[1,6720,"- 缺"],[-1,6840,"\n"],[1,6845,"\n"],[1,7006,"数据域和指针域"],[-1,7016,"和指针域"],[1,7223,"\n "],[-1,7230," \n"],[1,7381,"  "],[-1,7391,"  "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"]],[239,239],[7626,7626]]],[1556448201307,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度"],[-1,946," "],[-1,952,"时间复杂度**"],[1,964,"**"],[1,966,"   "],[1,968,"\n "],[-1,968,"**定义："],[-1,975,"\n"],[1,979,"**"],[-1,979," "],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1172," "],[1,1179," "],[1,1247,"   "],[1,1249,"个算"],[-1,1251,"分析一个算"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1376," \n"],[1,1378,"\n  用的"],[-1,1378,"- "],[-1,1384,"函数调用的"],[-1,1396,"**"],[1,1403,"**"],[1,1408,"  "],[1,1412,"复1）"],[1,1428,"~~~"],[-1,1428,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n"],[-1,1564,"`"],[-1,1566,"\nfor(i"],[1,1600,"       "],[-1,1600,"{\n cout"],[1,1618,"  "],[-1,1618,"}"],[1,1622,"~~~"],[1,1623,"（3"],[-1,1626,"\n\n（3）时间"],[1,1634,"\n"],[1,1645,"  ~~~~"],[-1,1649,"\nfor(i"],[1,1685,"       "],[-1,1685,"{\nfor(i"],[1,1719,"    {  "],[-1,1719,"{\ncout<"],[1,1740,"    "],[-1,1740,"}\n}"],[1,1746,"~~~~~"],[-1,1750,"\n\n  **"],[1,1809,"   "],[-1,1812,"时间复"],[1,1827,"   ~~~"],[-1,1834,"\n"],[-1,1837,"int"],[-1,1841,"i="],[1,1848,"    "],[-1,1848,"whi"],[-1,1853,"("],[1,1861,"    \n "],[-1,1861,"{\n"],[-1,1869,"i*2;"],[1,1876,"    ~~\n "],[-1,1876,"}\n"],[-1,1881,"\n  **P"],[1,1920,"$$ x=l`^n $$"],[-1,1920,"`x=log2^n `"],[1,1935,"`"],[-1,1935,"其时"],[-1,1942,"`"],[1,1949,"`"],[1,1950,"。\n\n\n\n\n"],[-1,1951,"。"],[1,1954,"# #"],[-1,1954," \n"],[1,2055," "],[-1,2055,"\n"],[1,2155,"线性表"],[-1,2155,"\n\n\n"],[-1,2176,"## 线性表"],[1,2226,"\n\n\n"],[-1,2229," 定义"],[1,2928,"\n    \n"],[1,2935," "],[-1,2935,"\n"],[1,3047,"A "],[-1,3047,"\n\n- 常用的操"],[1,3561," ~~~~ "],[-1,3568,"\n    /"],[1,3964,"~~~~\n\n"],[-1,3967,"\n\n\n"],[-1,3973," 线性"],[1,4312,"      "],[-1,4312,"**注意：*"],[1,4452,"  "],[-1,4456,"计算"],[-1,4461,"\n"],[1,4465,"\n"],[1,4716,"  "],[-1,4720,"元素"],[1,4819,"    \n "],[-1,4823,"c"],[1,4825,"`"],[-1,5203,"`\n  "],[1,5212," \n"],[-1,5216,"\n  "],[-1,5223,"操作"],[1,5229,"    \n  "],[1,5358," "],[-1,5358,"\n"],[-1,5361,"ListIns"],[1,5405,"     \n "],[1,5995,"``"],[-1,5995,"  \n      "],[1,6031,"  "],[-1,6035,"操作"],[1,6145,"   \n   "],[-1,6145,""],[1,6627,""],[-1,6627,"       "],[1,6655,"    "],[1,6657," \n"],[-1,6657,"总结"],[-1,6662,"\n"],[-1,6665,"-"],[-1,6668,"点："],[1,6724,"   "],[-1,6724,"- 缺"],[1,6847,"\n"],[-1,6851,"\n"],[-1,7013,"数据域和指针域"],[1,7030,"和指针域"],[-1,7233,"\n "],[1,7242," \n"],[-1,7391,"  "],[1,7403,"  "],[1,7578,"\n![单链表中的头结"],[-1,7616,"\n![单链表中的头结"]],[7626,7626],[239,239]]],[1556448146277,["GJX@GJXAIOU",[[1,2173,"- ****"]],[2173,2173],[2177,2177]]],[1556448147740,["GJX@GJXAIOU",[[1,2177,"定义"]],[2177,2177],[2179,2179]]],[1556448149843,["GJX@GJXAIOU",[[1,2173,"  "]],[2179,2179],[2181,2181]]],[1556448152309,["GJX@GJXAIOU",[[-1,2173,"  "]],[2181,2181],[2179,2179]]],[1556448154166,["GJX@GJXAIOU",[[1,2182,"- \n"]],[2181,2181],[2184,2184]]],[1556448156620,["GJX@GJXAIOU",[[-1,2182,"- "]],[2184,2184],[2182,2182]]],[1556448157706,["GJX@GJXAIOU",[[1,2182,"•算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。"]],[2182,2182],[2267,2267]]],[1556448164454,["GJX@GJXAIOU",[[1,2270,"\n"]],[2267,2267],[2268,2268]]],[1556448174781,["GJX@GJXAIOU",[[1,2268,"空间复杂度表示空间需求；"]],[2268,2268],[2280,2280]]],[1556448184505,["GJX@GJXAIOU",[[-1,2182,"•"]],[2183,2183],[2182,2182]]],[1556448188360,["GJX@GJXAIOU",[[1,2282,"\n"]],[2281,2281],[2282,2282]]],[1556448188494,["GJX@GJXAIOU",[[1,2283,"\n"]],[2282,2282],[2283,2283]]],[1556448191016,["GJX@GJXAIOU",[[-1,2158,"\n"]],[2157,2157],[2156,2156]]],[1556448193374,["GJX@GJXAIOU",[[-1,2057,"•"]],[2058,2058],[2057,2057]]],[1556448194637,["GJX@GJXAIOU",[[1,2057,"- "]],[2057,2057],[2059,2059]]],[1556448261304,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度"],[1,947," "],[1,950,"**时间复杂度"],[-1,957,"**"],[-1,961,"   "],[1,966,"**定义：**"],[-1,968,"**"],[-1,973,"**"],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1168," "],[-1,1173," "],[-1,1242,"   "],[1,1247,"**分析一"],[-1,1249,"**"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1371," "],[-1,1374,"\n\n  用的"],[1,1380,"- "],[1,1384,"函数调用的"],[-1,1391,"    \n"],[1,1396,""],[1,1405,"  \n"],[-1,1409,"复1）"],[-1,1428,"~~~"],[1,1431,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n`"],[1,1566,"\nfor(i"],[-1,1594,"       "],[1,1601,"{\n cout"],[-1,1612,"  "],[1,1614,"}"],[-1,1617,"~~~"],[-1,1621,"（3"],[-1,1626,"复\n"],[1,1628,"\n\n（3）时间复"],[-1,1639,"  ~~~~"],[1,1649,"\nfor(i"],[-1,1679,"       "],[1,1686,"{\nfor(i"],[-1,1713,"    {  "],[1,1720,"{\ncout<"],[-1,1734," "],[1,1735,"}\n}"],[-1,1738,"   ~~~~~"],[1,1750,"\n\n  **"],[-1,1803,"   "],[1,1809,"时间复"],[-1,1821,"   ~~~"],[1,1834,"\n"],[1,1836,"int"],[1,1837,"i="],[-1,1842,"    "],[1,1846,"whi"],[1,1848,"("],[-1,1855,"    \n "],[1,1861,"{\n"],[1,1867,"i*2;"],[-1,1870,"    ~~\n "],[1,1878,"}\n"],[1,1881,"\n  **P"],[-1,1914,"$$ x=l`^n $$"],[1,1926,"`x=log2^n `"],[-1,1930,"`"],[1,1931,"其时"],[1,1936,"`"],[-1,1942,"`"],[-1,1944,"。\n\n\n\n\n"],[1,1951,"。"],[-1,1953,"# #"],[1,1956," \n"],[-1,2055," "],[1,2056,"\n"],[-1,2156,"线性表"],[1,2159,"\n\n\n"],[-1,2284,""],[1,2284,"## 线性表"],[-1,2328,"\n\n\n"],[1,2334," 定义"],[-1,3030,"\n    \n"],[-1,3043," "],[1,3044,"\n"],[-1,3155,"A "],[1,3157,"\n\n- 常用的操"],[-1,3663," ~~~~ "],[1,3676,"\n    /"],[-1,4066,"~~~~\n\n"],[1,4075,"\n\n\n"],[1,4078," 线性"],[-1,4414,"      "],[1,4420,"**注意：*"],[-1,4554,"  "],[1,4560,"计算"],[1,4563,"\n"],[-1,4566,"\n"],[-1,4818,"  "],[1,4824,"元素"],[-1,4921,"    \n "],[1,4931,"c"],[-1,4932,"`"],[1,5311,"`\n  "],[-1,5316," \n"],[1,5322,"\n  "],[1,5326,"操作"],[-1,5330,"    \n  "],[-1,5466," "],[1,5467,"\n"],[1,5469,"ListIns"],[-1,5506,"     \n "],[-1,6103,"``"],[1,6105,"  \n      "],[-1,6132,"  "],[1,6138,"操作"],[-1,6246,"   \n   "],[1,6253,""],[-1,6735,""],[1,6735,"       "],[-1,6756,"    "],[-1,6762," \n"],[1,6764,"总结"],[1,6767,"\n"],[1,6769,"-"],[1,6771,"点："],[-1,6825,"   "],[1,6828,"- 缺"],[-1,6948,"\n"],[1,6953,"\n"],[1,7114,"数据域和指针域"],[-1,7124,"和指针域"],[1,7331,"\n "],[-1,7338," \n"],[1,7489,"  "],[-1,7499,"  "],[-1,7676,"\n![单链表中的头结"],[1,7724,"\n![单链表中的头结"]],[239,239],[7734,7734]]],[1556448261304,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度"],[-1,946," "],[-1,950,"**时间复杂度"],[1,964,"**"],[1,966,"   "],[-1,968,"**定义：**"],[1,977,"**"],[1,980,"**"],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1173," "],[1,1179," "],[1,1247,"   "],[-1,1249,"**分析一"],[1,1256,"**"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1376," "],[1,1378,"\n\n  用的"],[-1,1378,"- "],[-1,1384,"函数调用的"],[1,1396,"    \n"],[-1,1396,""],[-1,1405,"  \n"],[1,1412,"复1）"],[1,1428,"~~~"],[-1,1428,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n`"],[-1,1566,"\nfor(i"],[1,1600,"       "],[-1,1600,"{\n cout"],[1,1618,"  "],[-1,1618,"}"],[1,1622,"~~~"],[1,1623,"（3"],[1,1626,"复\n"],[-1,1626,"\n\n（3）时间复"],[1,1645,"  ~~~~"],[-1,1649,"\nfor(i"],[1,1685,"       "],[-1,1685,"{\nfor(i"],[1,1719,"    {  "],[-1,1719,"{\ncout<"],[1,1740," "],[-1,1740,"}\n}"],[1,1746,"   ~~~~~"],[-1,1750,"\n\n  **"],[1,1809,"   "],[-1,1812,"时间复"],[1,1827,"   ~~~"],[-1,1834,"\n"],[-1,1837,"int"],[-1,1841,"i="],[1,1848,"    "],[-1,1848,"whi"],[-1,1853,"("],[1,1861,"    \n "],[-1,1861,"{\n"],[-1,1869,"i*2;"],[1,1876,"    ~~\n "],[-1,1876,"}\n"],[-1,1881,"\n  **P"],[1,1920,"$$ x=l`^n $$"],[-1,1920,"`x=log2^n `"],[1,1935,"`"],[-1,1935,"其时"],[-1,1942,"`"],[1,1949,"`"],[1,1950,"。\n\n\n\n\n"],[-1,1951,"。"],[1,1954,"# #"],[-1,1954," \n"],[1,2055," "],[-1,2055,"\n"],[1,2156,"线性表"],[-1,2156,"\n\n\n"],[1,2284,""],[-1,2284,"## 线性表"],[1,2334,"\n\n\n"],[-1,2337," 定义"],[1,3036,"\n    \n"],[1,3043," "],[-1,3043,"\n"],[1,3155,"A "],[-1,3155,"\n\n- 常用的操"],[1,3669," ~~~~ "],[-1,3676,"\n    /"],[1,4072,"~~~~\n\n"],[-1,4075,"\n\n\n"],[-1,4081," 线性"],[1,4420,"      "],[-1,4420,"**注意：*"],[1,4560,"  "],[-1,4564,"计算"],[-1,4569,"\n"],[1,4573,"\n"],[1,4824,"  "],[-1,4828,"元素"],[1,4927,"    \n "],[-1,4931,"c"],[1,4933,"`"],[-1,5311,"`\n  "],[1,5320," \n"],[-1,5324,"\n  "],[-1,5331,"操作"],[1,5337,"    \n  "],[1,5466," "],[-1,5466,"\n"],[-1,5469,"ListIns"],[1,5513,"     \n "],[1,6103,"``"],[-1,6103,"  \n      "],[1,6139,"  "],[-1,6143,"操作"],[1,6253,"   \n   "],[-1,6253,""],[1,6735,""],[-1,6735,"       "],[1,6763,"    "],[1,6765," \n"],[-1,6765,"总结"],[-1,6770,"\n"],[-1,6773,"-"],[-1,6776,"点："],[1,6832,"   "],[-1,6832,"- 缺"],[1,6955,"\n"],[-1,6959,"\n"],[-1,7121,"数据域和指针域"],[1,7138,"和指针域"],[-1,7341,"\n "],[1,7350," \n"],[-1,7499,"  "],[1,7511,"  "],[1,7686,"\n![单链表中的头结"],[-1,7724,"\n![单链表中的头结"]],[7734,7734],[239,239]]],[1556448202091,["GJX@GJXAIOU",[[1,2073,"\n"]],[2073,2073],[2074,2074]]],[1556448203497,["GJX@GJXAIOU",[[1,2074,"\n"]],[2074,2074],[2075,2075]]],[1556448206840,["GJX@GJXAIOU",[[1,2059,"**"],[1,2073,"**"]],[2059,2073],[2059,2077]]],[1556448211777,["GJX@GJXAIOU",[[1,2290,"\n"]],[2285,2285],[2286,2286]]],[1556448212231,["GJX@GJXAIOU",[[1,2291,"\n"]],[2286,2286],[2287,2287]]],[1556448227821,["GJX@GJXAIOU",[[1,2287,"默认为时间复杂度"]],[2287,2287],[2295,2295]]],[1556448239094,["GJX@GJXAIOU",[[1,2303,"三、"]],[2303,2303],[2305,2305]]],[1556448245839,["GJX@GJXAIOU",[[1,2299,"@toc"]],[2299,2299],[2303,2303]]],[1556448260136,["GJX@GJXAIOU",[[-1,2299,"@toc"]],[2299,2303],[2299,2299]]],[1556448321318,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度"],[1,947," "],[1,950,"**时间复杂度"],[-1,957,"**"],[-1,961,"   "],[1,966,"**定义：**"],[-1,968,"**"],[-1,973,"**"],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1168," "],[-1,1173," "],[-1,1242,"   "],[1,1247,"**分析一"],[-1,1249,"**"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1371," "],[-1,1374,"\n\n  用的"],[1,1380,"- "],[1,1384,"函数调用的"],[-1,1391,"    \n"],[1,1396,""],[1,1405,"  \n"],[-1,1409,"复1）"],[-1,1428,"~~~"],[1,1431,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n`"],[1,1566,"\nfor(i"],[-1,1594,"       "],[1,1601,"{\n cout"],[-1,1612,"  "],[1,1614,"}"],[-1,1617,"~~~"],[-1,1621,"（3"],[-1,1626,"复\n"],[1,1628,"\n\n（3）时间复"],[-1,1639,"  ~~~~"],[1,1649,"\nfor(i"],[-1,1679,"       "],[1,1686,"{\nfor(i"],[-1,1713,"    {  "],[1,1720,"{\ncout<"],[-1,1734," "],[1,1735,"}\n}"],[-1,1738,"   ~~~~~"],[1,1750,"\n\n  **"],[-1,1803,"   "],[1,1809,"时间复"],[-1,1821,"   ~~~"],[1,1834,"\n"],[1,1836,"int"],[1,1837,"i="],[-1,1842,"    "],[1,1846,"whi"],[1,1848,"("],[-1,1855,"    \n "],[1,1861,"{\n"],[1,1867,"i*2;"],[-1,1870,"    ~~\n "],[1,1878,"}\n"],[1,1881,"\n  **P"],[-1,1914,"$$ x=l`^n $$"],[1,1926,"`x=log2^n `"],[-1,1930,"`"],[1,1931,"其时"],[1,1936,"`"],[-1,1942,"`"],[-1,1944,"。\n\n\n\n\n"],[1,1951,"。"],[-1,1953,"# #"],[1,1956," \n"],[-1,2055," "],[1,2056,"\n"],[-1,2162,"线性表"],[1,2165,"\n\n\n"],[1,2300,"## 三、线性表"],[-1,2303,"三、"],[-1,2346,"\n\n\n"],[1,2352," 定义"],[-1,3048,"\n    \n"],[-1,3061," "],[1,3062,"\n"],[-1,3173,"A "],[1,3175,"\n\n- 常用的操"],[-1,3681," ~~~~ "],[1,3694,"\n    /"],[-1,4084,"~~~~\n\n"],[1,4093,"\n\n\n"],[1,4096," 线性"],[-1,4432,"      "],[1,4438,"**注意：*"],[-1,4572,"  "],[1,4578,"计算"],[1,4581,"\n"],[-1,4584,"\n"],[-1,4836,"  "],[1,4842,"元素"],[-1,4939,"    \n "],[1,4949,"c"],[-1,4950,"`"],[1,5329,"`\n  "],[-1,5334," \n"],[1,5340,"\n  "],[1,5344,"操作"],[-1,5348,"    \n  "],[-1,5484," "],[1,5485,"\n"],[1,5487,"ListIns"],[-1,5524,"     \n "],[-1,6121,"``"],[1,6123,"  \n      "],[-1,6150,"  "],[1,6156,"操作"],[-1,6264,"   \n   "],[1,6271,""],[-1,6753,""],[1,6753,"       "],[-1,6774,"    "],[-1,6780," \n"],[1,6782,"总结"],[1,6785,"\n"],[1,6787,"-"],[1,6789,"点："],[-1,6843,"   "],[1,6846,"- 缺"],[-1,6966,"\n"],[1,6971,"\n"],[1,7132,"数据域和指针域"],[-1,7142,"和指针域"],[1,7349,"\n "],[-1,7356," \n"],[1,7507,"  "],[-1,7517,"  "],[-1,7694,"\n![单链表中的头结"],[1,7742,"\n![单链表中的头结"]],[239,239],[7752,7752]]],[1556448321318,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度"],[-1,946," "],[-1,950,"**时间复杂度"],[1,964,"**"],[1,966,"   "],[-1,968,"**定义：**"],[1,977,"**"],[1,980,"**"],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1173," "],[1,1179," "],[1,1247,"   "],[-1,1249,"**分析一"],[1,1256,"**"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1376," "],[1,1378,"\n\n  用的"],[-1,1378,"- "],[-1,1384,"函数调用的"],[1,1396,"    \n"],[-1,1396,""],[-1,1405,"  \n"],[1,1412,"复1）"],[1,1428,"~~~"],[-1,1428,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n`"],[-1,1566,"\nfor(i"],[1,1600,"       "],[-1,1600,"{\n cout"],[1,1618,"  "],[-1,1618,"}"],[1,1622,"~~~"],[1,1623,"（3"],[1,1626,"复\n"],[-1,1626,"\n\n（3）时间复"],[1,1645,"  ~~~~"],[-1,1649,"\nfor(i"],[1,1685,"       "],[-1,1685,"{\nfor(i"],[1,1719,"    {  "],[-1,1719,"{\ncout<"],[1,1740," "],[-1,1740,"}\n}"],[1,1746,"   ~~~~~"],[-1,1750,"\n\n  **"],[1,1809,"   "],[-1,1812,"时间复"],[1,1827,"   ~~~"],[-1,1834,"\n"],[-1,1837,"int"],[-1,1841,"i="],[1,1848,"    "],[-1,1848,"whi"],[-1,1853,"("],[1,1861,"    \n "],[-1,1861,"{\n"],[-1,1869,"i*2;"],[1,1876,"    ~~\n "],[-1,1876,"}\n"],[-1,1881,"\n  **P"],[1,1920,"$$ x=l`^n $$"],[-1,1920,"`x=log2^n `"],[1,1935,"`"],[-1,1935,"其时"],[-1,1942,"`"],[1,1949,"`"],[1,1950,"。\n\n\n\n\n"],[-1,1951,"。"],[1,1954,"# #"],[-1,1954," \n"],[1,2055," "],[-1,2055,"\n"],[1,2162,"线性表"],[-1,2162,"\n\n\n"],[-1,2300,"## 三、线性表"],[1,2311,"三、"],[1,2352,"\n\n\n"],[-1,2355," 定义"],[1,3054,"\n    \n"],[1,3061," "],[-1,3061,"\n"],[1,3173,"A "],[-1,3173,"\n\n- 常用的操"],[1,3687," ~~~~ "],[-1,3694,"\n    /"],[1,4090,"~~~~\n\n"],[-1,4093,"\n\n\n"],[-1,4099," 线性"],[1,4438,"      "],[-1,4438,"**注意：*"],[1,4578,"  "],[-1,4582,"计算"],[-1,4587,"\n"],[1,4591,"\n"],[1,4842,"  "],[-1,4846,"元素"],[1,4945,"    \n "],[-1,4949,"c"],[1,4951,"`"],[-1,5329,"`\n  "],[1,5338," \n"],[-1,5342,"\n  "],[-1,5349,"操作"],[1,5355,"    \n  "],[1,5484," "],[-1,5484,"\n"],[-1,5487,"ListIns"],[1,5531,"     \n "],[1,6121,"``"],[-1,6121,"  \n      "],[1,6157,"  "],[-1,6161,"操作"],[1,6271,"   \n   "],[-1,6271,""],[1,6753,""],[-1,6753,"       "],[1,6781,"    "],[1,6783," \n"],[-1,6783,"总结"],[-1,6788,"\n"],[-1,6791,"-"],[-1,6794,"点："],[1,6850,"   "],[-1,6850,"- 缺"],[1,6973,"\n"],[-1,6977,"\n"],[-1,7139,"数据域和指针域"],[1,7156,"和指针域"],[-1,7359,"\n "],[1,7368," \n"],[-1,7517,"  "],[1,7529,"  "],[1,7704,"\n![单链表中的头结"],[-1,7742,"\n![单链表中的头结"]],[7752,7752],[239,239]]],[1556448262067,["GJX@GJXAIOU",[[-1,2303,"三"]],[2304,2304],[2303,2303]]],[1556448262376,["GJX@GJXAIOU",[[1,2303,"sa"]],[2303,2303],[2305,2305]]],[1556448262962,["GJX@GJXAIOU",[[-1,2303,"sa"]],[2305,2305],[2303,2303]]],[1556448264585,["GJX@GJXAIOU",[[1,2303,"四"]],[2303,2303],[2304,2304]]],[1556448270131,["GJX@GJXAIOU",[[-1,950,"**"]],[952,952],[950,950]]],[1556448273796,["GJX@GJXAIOU",[[-1,955,"**："]],[957,957],[955,955]]],[1556448288928,["GJX@GJXAIOU",[[1,2351,"（）"]],[2351,2351],[2353,2353]]],[1556448290762,["GJX@GJXAIOU",[[1,2352,"一"]],[2352,2352],[2353,2353]]],[1556448561320,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1829,"\n"],[1,1831,"int"],[1,1832,"i="],[-1,1837,"    "],[1,1841,"whi"],[1,1843,"("],[-1,1850,"    \n "],[1,1856,"{\n"],[1,1862,"i*2;"],[-1,1865,"    ~~\n "],[1,1873,"}\n"],[1,1876,"\n  **P"],[-1,1909,"$$ x=l`^n $$"],[1,1921,"`x=log2^n `"],[-1,1925,"`"],[1,1926,"其时"],[1,1931,"`"],[-1,1937,"`"],[-1,1939,"。\n\n\n\n\n"],[1,1946,"。"],[-1,1948,"# #"],[1,1951," \n"],[-1,2050," "],[1,2051,"\n"],[-1,2157,"线性表"],[1,2160,"\n\n\n"],[1,2295,"## 四、线性表"],[-1,2298,"四、"],[-1,2341,"\n\n\n"],[-1,2347,"   "],[1,2354,"定义    "],[-1,3046,"\n    \n"],[-1,3059," "],[1,3060,"\n"],[-1,3171,"A "],[1,3173,"\n\n- 常用的操"],[-1,3679," ~~~~ "],[1,3692,"\n    /"],[-1,4082,"~~~~\n\n"],[1,4091,"\n\n\n"],[1,4094," 线性"],[-1,4430,"      "],[1,4436,"**注意：*"],[-1,4570,"  "],[1,4576,"计算"],[1,4579,"\n"],[-1,4582,"\n"],[-1,4834,"  "],[1,4840,"元素"],[-1,4937,"    \n "],[1,4947,"c"],[-1,4948,"`"],[1,5327,"`\n  "],[-1,5332," \n"],[1,5338,"\n  "],[1,5342,"操作"],[-1,5346,"    \n  "],[-1,5482," "],[1,5483,"\n"],[1,5485,"ListIns"],[-1,5522,"     \n "],[-1,6119,"``"],[1,6121,"  \n      "],[-1,6148,"  "],[1,6154,"操作"],[-1,6262,"   \n   "],[1,6269,""],[-1,6751,""],[1,6751,"       "],[-1,6772,"    "],[-1,6778," \n"],[1,6780,"总结"],[1,6783,"\n"],[1,6785,"-"],[1,6787,"点："],[-1,6841,"   "],[1,6844,"- 缺"],[-1,6964,"\n"],[1,6969,"\n"],[1,7130,"数据域和指针域"],[-1,7140,"和指针域"],[1,7347,"\n "],[-1,7354," \n"],[1,7505,"  "],[-1,7515,"  "],[-1,7692,"\n![单链表中的头结"],[1,7740,"\n![单链表中的头结"]],[239,239],[7750,7750]]],[1556448561320,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1829,"\n"],[-1,1832,"int"],[-1,1836,"i="],[1,1843,"    "],[-1,1843,"whi"],[-1,1848,"("],[1,1856,"    \n "],[-1,1856,"{\n"],[-1,1864,"i*2;"],[1,1871,"    ~~\n "],[-1,1871,"}\n"],[-1,1876,"\n  **P"],[1,1915,"$$ x=l`^n $$"],[-1,1915,"`x=log2^n `"],[1,1930,"`"],[-1,1930,"其时"],[-1,1937,"`"],[1,1944,"`"],[1,1945,"。\n\n\n\n\n"],[-1,1946,"。"],[1,1949,"# #"],[-1,1949," \n"],[1,2050," "],[-1,2050,"\n"],[1,2157,"线性表"],[-1,2157,"\n\n\n"],[-1,2295,"## 四、线性表"],[1,2306,"四、"],[1,2347,"\n\n\n"],[1,2350,"   "],[-1,2354,"定义    "],[1,3052,"\n    \n"],[1,3059," "],[-1,3059,"\n"],[1,3171,"A "],[-1,3171,"\n\n- 常用的操"],[1,3685," ~~~~ "],[-1,3692,"\n    /"],[1,4088,"~~~~\n\n"],[-1,4091,"\n\n\n"],[-1,4097," 线性"],[1,4436,"      "],[-1,4436,"**注意：*"],[1,4576,"  "],[-1,4580,"计算"],[-1,4585,"\n"],[1,4589,"\n"],[1,4840,"  "],[-1,4844,"元素"],[1,4943,"    \n "],[-1,4947,"c"],[1,4949,"`"],[-1,5327,"`\n  "],[1,5336," \n"],[-1,5340,"\n  "],[-1,5347,"操作"],[1,5353,"    \n  "],[1,5482," "],[-1,5482,"\n"],[-1,5485,"ListIns"],[1,5529,"     \n "],[1,6119,"``"],[-1,6119,"  \n      "],[1,6155,"  "],[-1,6159,"操作"],[1,6269,"   \n   "],[-1,6269,""],[1,6751,""],[-1,6751,"       "],[1,6779,"    "],[1,6781," \n"],[-1,6781,"总结"],[-1,6786,"\n"],[-1,6789,"-"],[-1,6792,"点："],[1,6848,"   "],[-1,6848,"- 缺"],[1,6971,"\n"],[-1,6975,"\n"],[-1,7137,"数据域和指针域"],[1,7154,"和指针域"],[-1,7357,"\n "],[1,7366," \n"],[-1,7515,"  "],[1,7527,"  "],[1,7702,"\n![单链表中的头结"],[-1,7740,"\n![单链表中的头结"]],[7750,7750],[239,239]]],[1556448532292,["GJX@GJXAIOU",[[-1,2769,"\n"]],[2767,2768],[2767,2767]]],[1556448532522,["GJX@GJXAIOU",[[-1,2768,"\n"]],[2767,2767],[2766,2766]]],[1556448532965,["GJX@GJXAIOU",[[-1,2767,"\n"]],[2766,2766],[2765,2765]]],[1556448552795,["GJX@GJXAIOU",[[1,2771,"（）"]],[2771,2771],[2773,2773]]],[1556448554781,["GJX@GJXAIOU",[[1,2772,"二"]],[2772,2772],[2773,2773]]],[1556448681334,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1829,"\n"],[1,1831,"int"],[1,1832,"i="],[-1,1837,"    "],[1,1841,"whi"],[1,1843,"("],[-1,1850,"    \n "],[1,1856,"{\n"],[1,1862,"i*2;"],[-1,1865,"    ~~\n "],[1,1873,"}\n"],[1,1876,"\n  **P"],[-1,1909,"$$ x=l`^n $$"],[1,1921,"`x=log2^n `"],[-1,1925,"`"],[1,1926,"其时"],[1,1931,"`"],[-1,1937,"`"],[-1,1939,"。\n\n\n\n\n"],[1,1946,"。"],[-1,1948,"# #"],[1,1951," \n"],[-1,2050," "],[1,2051,"\n"],[-1,2157,"线性表"],[1,2160,"\n\n\n"],[1,2295,"## 四、线性表"],[-1,2298,"四、"],[-1,2341,"\n\n\n"],[-1,2347,"   "],[1,2354,"定义    "],[-1,2761,"\n\n\n"],[1,2767," （二）抽象"],[-1,2771,"（二）"],[-1,3046,"\n    \n"],[-1,3059," "],[1,3060,"\n"],[-1,3171,"A "],[1,3173,"\n\n- 常用的操"],[-1,3679," ~~~~ "],[1,3692,"\n    /"],[-1,4082,"~~~~\n\n"],[1,4091,"\n\n\n"],[1,4094," 线性"],[-1,4430,"      "],[1,4436,"**注意：*"],[-1,4570,"  "],[1,4576,"计算"],[1,4579,"\n"],[-1,4582,"\n"],[-1,4834,"  "],[1,4840,"元素"],[-1,4937,"    \n "],[1,4947,"c"],[-1,4948,"`"],[1,5327,"`\n  "],[-1,5332," \n"],[1,5338,"\n  "],[1,5342,"操作"],[-1,5346,"    \n  "],[-1,5482," "],[1,5483,"\n"],[1,5485,"ListIns"],[-1,5522,"     \n "],[-1,6119,"``"],[1,6121,"  \n      "],[-1,6148,"  "],[1,6154,"操作"],[-1,6262,"   \n   "],[1,6269,""],[-1,6751,""],[1,6751,"       "],[-1,6772,"    "],[-1,6778," \n"],[1,6780,"总结"],[1,6783,"\n"],[1,6785,"-"],[1,6787,"点："],[-1,6841,"   "],[1,6844,"- 缺"],[-1,6964,"\n"],[1,6969,"\n"],[1,7130,"数据域和指针域"],[-1,7140,"和指针域"],[1,7346," \n"],[-1,7356," \n"],[1,7505,"  "],[-1,7515,"  "],[-1,7692,"\n![单链表中的头结"],[1,7740,"\n![单链表中的头结"]],[239,239],[7750,7750]]],[1556448681334,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1829,"\n"],[-1,1832,"int"],[-1,1836,"i="],[1,1843,"    "],[-1,1843,"whi"],[-1,1848,"("],[1,1856,"    \n "],[-1,1856,"{\n"],[-1,1864,"i*2;"],[1,1871,"    ~~\n "],[-1,1871,"}\n"],[-1,1876,"\n  **P"],[1,1915,"$$ x=l`^n $$"],[-1,1915,"`x=log2^n `"],[1,1930,"`"],[-1,1930,"其时"],[-1,1937,"`"],[1,1944,"`"],[1,1945,"。\n\n\n\n\n"],[-1,1946,"。"],[1,1949,"# #"],[-1,1949," \n"],[1,2050," "],[-1,2050,"\n"],[1,2157,"线性表"],[-1,2157,"\n\n\n"],[-1,2295,"## 四、线性表"],[1,2306,"四、"],[1,2347,"\n\n\n"],[1,2350,"   "],[-1,2354,"定义    "],[1,2767,"\n\n\n"],[-1,2770," （二）抽象"],[1,2780,"（二）"],[1,3052,"\n    \n"],[1,3059," "],[-1,3059,"\n"],[1,3171,"A "],[-1,3171,"\n\n- 常用的操"],[1,3685," ~~~~ "],[-1,3692,"\n    /"],[1,4088,"~~~~\n\n"],[-1,4091,"\n\n\n"],[-1,4097," 线性"],[1,4436,"      "],[-1,4436,"**注意：*"],[1,4576,"  "],[-1,4580,"计算"],[-1,4585,"\n"],[1,4589,"\n"],[1,4840,"  "],[-1,4844,"元素"],[1,4943,"    \n "],[-1,4947,"c"],[1,4949,"`"],[-1,5327,"`\n  "],[1,5336," \n"],[-1,5340,"\n  "],[-1,5347,"操作"],[1,5353,"    \n  "],[1,5482," "],[-1,5482,"\n"],[-1,5485,"ListIns"],[1,5529,"     \n "],[1,6119,"``"],[-1,6119,"  \n      "],[1,6155,"  "],[-1,6159,"操作"],[1,6269,"   \n   "],[-1,6269,""],[1,6751,""],[-1,6751,"       "],[1,6779,"    "],[1,6781," \n"],[-1,6781,"总结"],[-1,6786,"\n"],[-1,6789,"-"],[-1,6792,"点："],[1,6848,"   "],[-1,6848,"- 缺"],[1,6971,"\n"],[-1,6975,"\n"],[-1,7137,"数据域和指针域"],[1,7154,"和指针域"],[-1,7356," \n"],[1,7368," \n"],[-1,7515,"  "],[1,7527,"  "],[1,7702,"\n![单链表中的头结"],[-1,7740,"\n![单链表中的头结"]],[7750,7750],[239,239]]],[1556448626569,["GJX@GJXAIOU",[[-1,2366," "]],[2367,2367],[2366,2366]]],[1556448629475,["GJX@GJXAIOU",[[-1,2368," "]],[2369,2369],[2368,2368]]],[1556448635311,["GJX@GJXAIOU",[[-1,2365," "],[-1,2405,"  "],[-1,2514,"  "],[-1,2517,"  "],[-1,2573,"  "],[-1,2576,"  "],[-1,2607,"  "],[-1,2644,"  "],[-1,2647,"  "],[-1,2709,"  "],[-1,2712,"  "]],[2366,2759],[2365,2739]]],[1556448635894,["GJX@GJXAIOU",[[-1,2404," "],[-1,2509,"  "],[-1,2512," "],[-1,2565," "],[-1,2567," "],[-1,2594,"  "],[-1,2629,"  "],[-1,2632," "],[-1,2690,"  "],[-1,2693," "]],[2365,2739],[2365,2731]]],[1556448643333,["GJX@GJXAIOU",[[1,2588,"  "],[1,2621,"  "],[1,2622,"  "],[1,2679,"  "],[1,2680,"  "]],[2588,2724],[2588,2734]]],[1556448646393,["GJX@GJXAIOU",[[1,2365,"  "],[1,2403,"  "],[1,2404,"  "],[1,2508,"  "],[1,2509,"  "]],[2365,2559],[2365,2569]]],[1556448656590,["GJX@GJXAIOU",[[1,2829,"  "]],[2829,2829],[2831,2831]]],[1556448678367,["GJX@GJXAIOU",[[1,2944," "]],[2944,2944],[2945,2945]]],[1556448801355,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1829,"\n"],[1,1831,"int"],[1,1832,"i="],[-1,1837,"    "],[1,1841,"whi"],[1,1843,"("],[-1,1850,"    \n "],[1,1856,"{\n"],[1,1862,"i*2;"],[-1,1865,"    ~~\n "],[1,1873,"}\n"],[1,1876,"\n  **P"],[-1,1909,"$$ x=l`^n $$"],[1,1921,"`x=log2^n `"],[-1,1925,"`"],[1,1926,"其时"],[1,1931,"`"],[-1,1937,"`"],[-1,1939,"。\n\n\n\n\n"],[1,1946,"。"],[-1,1948,"# #"],[1,1951," \n"],[-1,2050," "],[1,2051,"\n"],[-1,2157,"线性表"],[1,2160,"\n\n\n"],[1,2295,"## 四、线性表"],[-1,2298,"四、"],[-1,2341,"\n\n\n"],[-1,2347,"   "],[1,2354,"定义    "],[-1,2363," *  "],[1,2367,"**线"],[1,2369,"（"],[1,2399,"  "],[-1,2400," "],[-1,2405,"  若  "],[1,2410,"若将线性"],[-1,2510,"  "],[-1,2515," 线  "],[1,2519,"3.线性表元"],[-1,2565,"   \n  注"],[1,2572,"\n**注** "],[-1,2594,"  "],[-1,2598,"  "],[1,2600,"首先它是"],[-1,2627,"  "],[-1,2634," 若  "],[1,2638,"2.若元素存"],[-1,2691,"  "],[-1,2694," "],[-1,2697,"另  "],[1,2700,"3.另外，线"],[-1,2744,"\n\n\n"],[1,2750," （二）抽象"],[-1,2754,"（二）"],[1,2823,"  "],[-1,2829,"  "],[1,2938," "],[-1,2944," "],[-1,3032,"\n    \n"],[-1,3045," "],[1,3046,"\n"],[-1,3157,"A "],[1,3159,"\n\n- 常用的操"],[-1,3665," ~~~~ "],[1,3678,"\n    /"],[-1,4068,"~~~~\n\n"],[1,4077,"\n\n\n"],[1,4080," 线性"],[-1,4416,"      "],[1,4422,"**注意：*"],[-1,4556,"  "],[1,4562,"计算"],[1,4565,"\n"],[-1,4568,"\n"],[-1,4820,"  "],[1,4826,"元素"],[-1,4923,"    \n "],[1,4933,"c"],[-1,4934,"`"],[1,5313,"`\n  "],[-1,5318," \n"],[1,5324,"\n  "],[1,5328,"操作"],[-1,5332,"    \n  "],[-1,5468," "],[1,5469,"\n"],[1,5471,"ListIns"],[-1,5508,"     \n "],[-1,6105,"``"],[1,6107,"  \n      "],[-1,6134,"  "],[1,6140,"操作"],[-1,6248,"   \n   "],[1,6255,""],[-1,6737,""],[1,6737,"       "],[-1,6758,"    "],[-1,6764," \n"],[1,6766,"总结"],[1,6769,"\n"],[1,6771,"-"],[1,6773,"点："],[-1,6827,"   "],[1,6830,"- 缺"],[-1,6950,"\n"],[1,6955,"\n"],[1,7116,"数据域和指针域"],[-1,7126,"和指针域"],[1,7333,"\n "],[-1,7340," \n"],[1,7491,"  "],[-1,7501,"  "],[-1,7678,"\n![单链表中的头结"],[1,7726,"\n![单链表中的头结"]],[239,239],[7736,7736]]],[1556448801355,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1829,"\n"],[-1,1832,"int"],[-1,1836,"i="],[1,1843,"    "],[-1,1843,"whi"],[-1,1848,"("],[1,1856,"    \n "],[-1,1856,"{\n"],[-1,1864,"i*2;"],[1,1871,"    ~~\n "],[-1,1871,"}\n"],[-1,1876,"\n  **P"],[1,1915,"$$ x=l`^n $$"],[-1,1915,"`x=log2^n `"],[1,1930,"`"],[-1,1930,"其时"],[-1,1937,"`"],[1,1944,"`"],[1,1945,"。\n\n\n\n\n"],[-1,1946,"。"],[1,1949,"# #"],[-1,1949," \n"],[1,2050," "],[-1,2050,"\n"],[1,2157,"线性表"],[-1,2157,"\n\n\n"],[-1,2295,"## 四、线性表"],[1,2306,"四、"],[1,2347,"\n\n\n"],[1,2350,"   "],[-1,2354,"定义    "],[1,2369," *  "],[-1,2369,"**线"],[-1,2374,"（"],[-1,2405,"  "],[1,2408," "],[1,2412,"  若  "],[-1,2412,"若将线性"],[1,2516,"  "],[1,2519," 线  "],[-1,2519,"3.线性表元"],[1,2571,"   \n  注"],[-1,2571,"\n**注** "],[1,2600,"  "],[1,2602,"  "],[-1,2602,"首先它是"],[1,2633,"  "],[1,2638," 若  "],[-1,2638,"2.若元素存"],[1,2697,"  "],[1,2698," "],[1,2700,"另  "],[-1,2700,"3.另外，线"],[1,2750,"\n\n\n"],[-1,2753," （二）抽象"],[1,2763,"（二）"],[-1,2829,"  "],[1,2837,"  "],[-1,2944," "],[1,2951," "],[1,3038,"\n    \n"],[1,3045," "],[-1,3045,"\n"],[1,3157,"A "],[-1,3157,"\n\n- 常用的操"],[1,3671," ~~~~ "],[-1,3678,"\n    /"],[1,4074,"~~~~\n\n"],[-1,4077,"\n\n\n"],[-1,4083," 线性"],[1,4422,"      "],[-1,4422,"**注意：*"],[1,4562,"  "],[-1,4566,"计算"],[-1,4571,"\n"],[1,4575,"\n"],[1,4826,"  "],[-1,4830,"元素"],[1,4929,"    \n "],[-1,4933,"c"],[1,4935,"`"],[-1,5313,"`\n  "],[1,5322," \n"],[-1,5326,"\n  "],[-1,5333,"操作"],[1,5339,"    \n  "],[1,5468," "],[-1,5468,"\n"],[-1,5471,"ListIns"],[1,5515,"     \n "],[1,6105,"``"],[-1,6105,"  \n      "],[1,6141,"  "],[-1,6145,"操作"],[1,6255,"   \n   "],[-1,6255,""],[1,6737,""],[-1,6737,"       "],[1,6765,"    "],[1,6767," \n"],[-1,6767,"总结"],[-1,6772,"\n"],[-1,6775,"-"],[-1,6778,"点："],[1,6834,"   "],[-1,6834,"- 缺"],[1,6957,"\n"],[-1,6961,"\n"],[-1,7123,"数据域和指针域"],[1,7140,"和指针域"],[-1,7343,"\n "],[1,7352," \n"],[-1,7501,"  "],[1,7513,"  "],[1,7688,"\n![单链表中的头结"],[-1,7726,"\n![单链表中的头结"]],[7736,7736],[239,239]]],[1556448743161,["GJX@GJXAIOU",[[-1,3651,"弱"]],[3652,3652],[3651,3651]]],[1556448747662,["GJX@GJXAIOU",[[1,3651,"若"]],[3651,3651],[3652,3652]]],[1556448753610,["GJX@GJXAIOU",[[-1,3674,"java"],[1,3678,"c"]],[3674,3678],[3675,3675]]],[1556448760550,["GJX@GJXAIOU",[[-1,1825,"java"],[1,1829,"c"]],[1825,1829],[1826,1826]]],[1556448777644,["GJX@GJXAIOU",[[1,4078,"()"]],[4078,4078],[4080,4080]]],[1556448778931,["GJX@GJXAIOU",[[1,4079,"sa"]],[4079,4079],[4081,4081]]],[1556448780277,["GJX@GJXAIOU",[[-1,4079,"sa"]],[4081,4081],[4079,4079]]],[1556448782081,["GJX@GJXAIOU",[[1,4079,"三"]],[4079,4079],[4080,4080]]],[1556448861357,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4413,"      "],[1,4419,"**注意：*"],[-1,4553,"  "],[1,4559,"计算"],[1,4562,"\n"],[-1,4565,"\n"],[-1,4817,"  "],[1,4823,"元素"],[-1,4920,"    \n "],[1,4930,"c"],[-1,4931,"`"],[1,5310,"`\n  "],[-1,5315," \n"],[1,5321,"\n  "],[1,5325,"操作"],[-1,5329,"    \n  "],[-1,5465," "],[1,5466,"\n"],[1,5468,"ListIns"],[-1,5505,"     \n "],[-1,6102,"``"],[1,6104,"  \n      "],[-1,6131,"  "],[1,6137,"操作"],[-1,6245,"   \n   "],[1,6252,""],[-1,6734,""],[1,6734,"       "],[-1,6755,"    "],[-1,6761," \n"],[1,6763,"总结"],[1,6766,"\n"],[1,6768,"-"],[1,6770,"点："],[-1,6824,"   "],[1,6827,"- 缺"],[-1,6947,"\n"],[1,6952,"\n"],[1,7113,"数据域和指针域"],[-1,7123,"和指针域"],[1,7330,"\n "],[-1,7337," \n"],[1,7488,"  "],[-1,7498,"  "],[-1,7675,"\n![单链表中的头结"],[1,7723,"\n![单链表中的头结"]],[239,239],[7733,7733]]],[1556448861357,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4419,"      "],[-1,4419,"**注意：*"],[1,4559,"  "],[-1,4563,"计算"],[-1,4568,"\n"],[1,4572,"\n"],[1,4823,"  "],[-1,4827,"元素"],[1,4926,"    \n "],[-1,4930,"c"],[1,4932,"`"],[-1,5310,"`\n  "],[1,5319," \n"],[-1,5323,"\n  "],[-1,5330,"操作"],[1,5336,"    \n  "],[1,5465," "],[-1,5465,"\n"],[-1,5468,"ListIns"],[1,5512,"     \n "],[1,6102,"``"],[-1,6102,"  \n      "],[1,6138,"  "],[-1,6142,"操作"],[1,6252,"   \n   "],[-1,6252,""],[1,6734,""],[-1,6734,"       "],[1,6762,"    "],[1,6764," \n"],[-1,6764,"总结"],[-1,6769,"\n"],[-1,6772,"-"],[-1,6775,"点："],[1,6831,"   "],[-1,6831,"- 缺"],[1,6954,"\n"],[-1,6958,"\n"],[-1,7120,"数据域和指针域"],[1,7137,"和指针域"],[-1,7340,"\n "],[1,7349," \n"],[-1,7498,"  "],[1,7510,"  "],[1,7685,"\n![单链表中的头结"],[-1,7723,"\n![单链表中的头结"]],[7733,7733],[239,239]]],[1556448828936,["GJX@GJXAIOU",[[-1,4114,"  "],[-1,4158,"  "],[-1,4161,"  "],[-1,4245,"  "],[-1,4248,"  "],[-1,4279,"  "],[-1,4331,"  "],[-1,4334," "],[-1,4341," "],[-1,4377,"  "],[-1,4380,"  "]],[4115,4409],[4113,4389]]],[1556448829419,["GJX@GJXAIOU",[[-1,4112,"  "],[-1,4154,"  "],[-1,4157,"  "],[-1,4237,"  "],[-1,4240,"  "],[-1,4267,"  "],[-1,4317,"  "],[-1,4320," "],[-1,4325," "],[-1,4359,"  "],[-1,4362,"  "]],[4113,4389],[4112,4369]]],[1556448830846,["GJX@GJXAIOU",[[1,4112,"  "],[1,4152,"  "],[1,4153,"  "],[1,4231,"  "],[1,4232,"  "],[1,4257,"  "],[1,4305,"  "],[1,4306," "],[1,4310," "],[1,4343,"  "],[1,4344,"  "]],[4112,4369],[4112,4389]]],[1556448834362,["GJX@GJXAIOU",[[1,4269,"  "],[1,4319,"  "],[1,4320," "],[1,4326," "],[1,4361,"  "],[1,4362,"  "]],[4268,4389],[4270,4399]]],[1556448837274,["GJX@GJXAIOU",[[-1,4361,"        "]],[4361,4369],[4361,4361]]],[1556448839880,["GJX@GJXAIOU",[[-1,4320,"   "]],[4323,4323],[4320,4320]]],[1556448841191,["GJX@GJXAIOU",[[-1,4358,"\n"]],[4358,4358],[4357,4357]]],[1556448844445,["GJX@GJXAIOU",[[-1,4315,"     "]],[4320,4320],[4315,4315]]],[1556448845594,["GJX@GJXAIOU",[[-1,4315,"\n"]],[4315,4315],[4314,4314]]],[1556448921362,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4108,"  "],[-1,4113," "],[1,4114,"概念："],[-1,4150,"  "],[-1,4155,"  "],[1,4157,"-"],[1,4159,"物理上"],[-1,4233,"  "],[-1,4236," "],[-1,4239,"   "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[-1,4385,"      "],[1,4391,"**注意：*"],[-1,4525,"  "],[1,4531,"计算"],[1,4534,"\n"],[-1,4537,"\n"],[-1,4789,"  "],[1,4795,"元素"],[-1,4892,"    \n "],[1,4902,"c"],[-1,4903,"`"],[1,5282,"`\n  "],[-1,5287," \n"],[1,5293,"\n  "],[1,5297,"操作"],[-1,5301,"    \n  "],[-1,5437," "],[1,5438,"\n"],[1,5440,"ListIns"],[-1,5477,"     \n "],[-1,6074,"``"],[1,6076,"  \n      "],[-1,6103,"  "],[1,6109,"操作"],[-1,6217,"   \n   "],[1,6224,""],[-1,6706,""],[1,6706,"       "],[-1,6727,"    "],[-1,6733," \n"],[1,6735,"总结"],[1,6738,"\n"],[1,6740,"-"],[1,6742,"点："],[-1,6796,"   "],[1,6799,"- 缺"],[-1,6919,"\n"],[1,6924,"\n"],[1,7085,"数据域和指针域"],[-1,7095,"和指针域"],[1,7302,"\n "],[-1,7309," \n"],[1,7460,"  "],[-1,7470,"  "],[-1,7647,"\n![单链表中的头结"],[1,7695,"\n![单链表中的头结"]],[239,239],[7705,7705]]],[1556448921362,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4114,"  "],[1,4117," "],[-1,4117,"概念："],[1,4156,"  "],[1,4159,"  "],[-1,4159,"-"],[-1,4162,"物理上"],[1,4239,"  "],[1,4240," "],[1,4242,"   "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[1,4391,"      "],[-1,4391,"**注意：*"],[1,4531,"  "],[-1,4535,"计算"],[-1,4540,"\n"],[1,4544,"\n"],[1,4795,"  "],[-1,4799,"元素"],[1,4898,"    \n "],[-1,4902,"c"],[1,4904,"`"],[-1,5282,"`\n  "],[1,5291," \n"],[-1,5295,"\n  "],[-1,5302,"操作"],[1,5308,"    \n  "],[1,5437," "],[-1,5437,"\n"],[-1,5440,"ListIns"],[1,5484,"     \n "],[1,6074,"``"],[-1,6074,"  \n      "],[1,6110,"  "],[-1,6114,"操作"],[1,6224,"   \n   "],[-1,6224,""],[1,6706,""],[-1,6706,"       "],[1,6734,"    "],[1,6736," \n"],[-1,6736,"总结"],[-1,6741,"\n"],[-1,6744,"-"],[-1,6747,"点："],[1,6803,"   "],[-1,6803,"- 缺"],[1,6926,"\n"],[-1,6930,"\n"],[-1,7092,"数据域和指针域"],[1,7109,"和指针域"],[-1,7312,"\n "],[1,7321," \n"],[-1,7470,"  "],[1,7482,"  "],[1,7657,"\n![单链表中的头结"],[-1,7695,"\n![单链表中的头结"]],[7705,7705],[239,239]]],[1556448914349,["GJX@GJXAIOU",[[-1,4529,"  "]],[4531,4540],[4529,4529]]],[1556448918829,["GJX@GJXAIOU",[[1,4529,"  "]],[4531,4531],[4533,4533]]],[1556448981381,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4108,"  "],[-1,4113," "],[1,4114,"概念："],[-1,4150,"  "],[-1,4155,"  "],[1,4157,"-"],[1,4159,"物理上"],[-1,4233,"  "],[-1,4236," "],[-1,4239,"   "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[-1,4385,"      "],[1,4391,"**注意：*"],[-1,4525,"  "],[-1,4529,"  "],[1,4531,"地址计算"],[1,4534,"\n"],[-1,4537,"\n"],[-1,4789,"  "],[1,4795,"元素"],[-1,4892,"    \n "],[1,4902,"c"],[-1,4903,"`"],[1,5282,"`\n  "],[-1,5287," \n"],[1,5293,"\n  "],[1,5297,"操作"],[-1,5301,"    \n  "],[-1,5437," "],[1,5438,"\n"],[1,5440,"ListIns"],[-1,5477,"     \n "],[-1,6074,"``"],[1,6076,"  \n      "],[-1,6103,"  "],[1,6109,"操作"],[-1,6217,"   \n   "],[1,6224,""],[-1,6706,""],[1,6706,"       "],[-1,6727,"    "],[-1,6733," \n"],[1,6735,"总结"],[1,6738,"\n"],[1,6740,"-"],[1,6742,"点："],[-1,6796,"   "],[1,6799,"- 缺"],[-1,6919,"\n"],[1,6924,"\n"],[1,7085,"数据域和指针域"],[-1,7095,"和指针域"],[1,7302,"\n "],[-1,7309," \n"],[1,7460,"  "],[-1,7470,"  "],[-1,7647,"\n![单链表中的头结"],[1,7695,"\n![单链表中的头结"]],[239,239],[7705,7705]]],[1556448981381,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4114,"  "],[1,4117," "],[-1,4117,"概念："],[1,4156,"  "],[1,4159,"  "],[-1,4159,"-"],[-1,4162,"物理上"],[1,4239,"  "],[1,4240," "],[1,4242,"   "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[1,4391,"      "],[-1,4391,"**注意：*"],[1,4531,"  "],[1,4533,"  "],[-1,4533,"地址计算"],[-1,4540,"\n"],[1,4544,"\n"],[1,4795,"  "],[-1,4799,"元素"],[1,4898,"    \n "],[-1,4902,"c"],[1,4904,"`"],[-1,5282,"`\n  "],[1,5291," \n"],[-1,5295,"\n  "],[-1,5302,"操作"],[1,5308,"    \n  "],[1,5437," "],[-1,5437,"\n"],[-1,5440,"ListIns"],[1,5484,"     \n "],[1,6074,"``"],[-1,6074,"  \n      "],[1,6110,"  "],[-1,6114,"操作"],[1,6224,"   \n   "],[-1,6224,""],[1,6706,""],[-1,6706,"       "],[1,6734,"    "],[1,6736," \n"],[-1,6736,"总结"],[-1,6741,"\n"],[-1,6744,"-"],[-1,6747,"点："],[1,6803,"   "],[-1,6803,"- 缺"],[1,6926,"\n"],[-1,6930,"\n"],[-1,7092,"数据域和指针域"],[1,7109,"和指针域"],[-1,7312,"\n "],[1,7321," \n"],[-1,7470,"  "],[1,7482,"  "],[1,7657,"\n![单链表中的头结"],[-1,7695,"\n![单链表中的头结"]],[7705,7705],[239,239]]],[1556448939247,["GJX@GJXAIOU",[[-1,4391,"**"]],[4391,4393],[4391,4391]]],[1556448939625,["GJX@GJXAIOU",[[1,4391,"-"]],[4391,4391],[4392,4392]]],[1556448942513,["GJX@GJXAIOU",[[-1,4395,"** "]],[4395,4398],[4395,4395]]],[1556448944946,["GJX@GJXAIOU",[[1,4392," "]],[4392,4392],[4393,4393]]],[1556448946054,["GJX@GJXAIOU",[[1,4391,"  "]],[4393,4393],[4395,4395]]],[1556448950996,["GJX@GJXAIOU",[[-1,4491,"       "]],[4490,4497],[4490,4490]]],[1556448951744,["GJX@GJXAIOU",[[-1,4489,"\n"]],[4490,4490],[4489,4489]]],[1556448966076,["GJX@GJXAIOU",[[-1,4544,"  "]],[4546,4546],[4544,4544]]],[1556448971393,["GJX@GJXAIOU",[[-1,4663,"  "]],[4665,4665],[4663,4663]]],[1556448979962,["GJX@GJXAIOU",[[-1,4532,"     "]],[4537,4537],[4532,4532]]],[1556448980802,["GJX@GJXAIOU",[[-1,4532,"\n"]],[4532,4532],[4531,4531]]],[1556449041380,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4106," "],[-1,4109," "],[-1,4113," "],[1,4114,"概念："],[-1,4148," "],[-1,4151," "],[1,4155,"-"],[-1,4157,"  "],[1,4159,"物理上"],[-1,4233,"  "],[-1,4238,"    "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[1,4387,"-"],[1,4388,"注意：\n"],[-1,4393,"- \n  "],[-1,4483,"\n"],[1,4485,"\n"],[-1,4516,"  "],[-1,4520,"  "],[1,4522,"地址计算"],[1,4525,"\n"],[-1,4528,"\n"],[-1,4531,"\n "],[1,4538,"El"],[-1,4651,"  "],[1,4657,"对于"],[-1,4770,"  "],[1,4776,"元素"],[-1,4873,"    \n "],[1,4883,"c"],[-1,4884,"`"],[1,5263,"`\n  "],[-1,5268," \n"],[1,5274,"\n  "],[1,5278,"操作"],[-1,5282,"    \n  "],[-1,5418," "],[1,5419,"\n"],[1,5421,"ListIns"],[-1,5458,"     \n "],[-1,6055,"``"],[1,6057,"  \n      "],[-1,6084,"  "],[1,6090,"操作"],[-1,6198,"   \n   "],[1,6205,""],[-1,6687,""],[1,6687,"       "],[-1,6708,"    "],[-1,6714," \n"],[1,6716,"总结"],[1,6719,"\n"],[1,6721,"-"],[1,6723,"点："],[-1,6777,"   "],[1,6780,"- 缺"],[-1,6900,"\n"],[1,6905,"\n"],[1,7066,"数据域和指针域"],[-1,7076,"和指针域"],[1,7283,"\n "],[-1,7290," \n"],[1,7441,"  "],[-1,7451,"  "],[-1,7628,"\n![单链表中的头结"],[1,7676,"\n![单链表中的头结"]],[239,239],[7686,7686]]],[1556449041380,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4112," "],[1,4114," "],[1,4117," "],[-1,4117,"概念："],[1,4154," "],[1,4156," "],[-1,4159,"-"],[1,4162,"  "],[-1,4162,"物理上"],[1,4239,"  "],[1,4242,"    "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[-1,4393,"-"],[-1,4395,"注意：\n"],[1,4404,"- \n  "],[1,4489,"\n"],[-1,4490,"\n"],[1,4522,"  "],[1,4524,"  "],[-1,4524,"地址计算"],[-1,4531,"\n"],[1,4535,"\n"],[1,4537,"\n "],[-1,4542,"El"],[1,4657,"  "],[-1,4661,"对于"],[1,4776,"  "],[-1,4780,"元素"],[1,4879,"    \n "],[-1,4883,"c"],[1,4885,"`"],[-1,5263,"`\n  "],[1,5272," \n"],[-1,5276,"\n  "],[-1,5283,"操作"],[1,5289,"    \n  "],[1,5418," "],[-1,5418,"\n"],[-1,5421,"ListIns"],[1,5465,"     \n "],[1,6055,"``"],[-1,6055,"  \n      "],[1,6091,"  "],[-1,6095,"操作"],[1,6205,"   \n   "],[-1,6205,""],[1,6687,""],[-1,6687,"       "],[1,6715,"    "],[1,6717," \n"],[-1,6717,"总结"],[-1,6722,"\n"],[-1,6725,"-"],[-1,6728,"点："],[1,6784,"   "],[-1,6784,"- 缺"],[1,6907,"\n"],[-1,6911,"\n"],[-1,7073,"数据域和指针域"],[1,7090,"和指针域"],[-1,7293,"\n "],[1,7302," \n"],[-1,7451,"  "],[1,7463,"  "],[1,7638,"\n![单链表中的头结"],[-1,7676,"\n![单链表中的头结"]],[7686,7686],[239,239]]],[1556449001224,["GJX@GJXAIOU",[[1,4744,"**"],[1,4750,"**"]],[4744,4750],[4744,4754]]],[1556449005104,["GJX@GJXAIOU",[[-1,4793,"        "]],[4793,4801],[4793,4793]]],[1556449005907,["GJX@GJXAIOU",[[-1,4793,"\n"]],[4793,4793],[4792,4792]]],[1556449019163,["GJX@GJXAIOU",[[-1,5284,"    •"]],[5284,5289],[5284,5284]]],[1556449020451,["GJX@GJXAIOU",[[1,5284,"\n"]],[5284,5284],[5285,5285]]],[1556449026886,["GJX@GJXAIOU",[[1,5296," "]],[5296,5296],[5297,5297]]],[1556449027696,["GJX@GJXAIOU",[[1,5315," "]],[5315,5315],[5316,5316]]],[1556449030465,["GJX@GJXAIOU",[[-1,5295,"– "],[1,5297,"-"]],[5295,5295],[5296,5296]]],[1556449030679,["GJX@GJXAIOU",[[1,5296," "]],[5296,5296],[5297,5297]]],[1556449033289,["GJX@GJXAIOU",[[-1,5314,"– "],[1,5316,"-"]],[5314,5314],[5315,5315]]],[1556449033961,["GJX@GJXAIOU",[[1,5315," "]],[5315,5315],[5316,5316]]],[1556449036273,["GJX@GJXAIOU",[[-1,5349,"–"],[1,5350,"-"]],[5349,5349],[5350,5350]]],[1556449036426,["GJX@GJXAIOU",[[1,5350," "]],[5350,5350],[5351,5351]]],[1556449039200,["GJX@GJXAIOU",[[-1,5388,"–"],[1,5389,"-"]],[5388,5388],[5389,5389]]],[1556449039339,["GJX@GJXAIOU",[[1,5389," "]],[5389,5389],[5390,5390]]],[1556449101388,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4106,"  "],[-1,4113," "],[1,4114,"概念："],[-1,4148,"  "],[-1,4155,"  "],[1,4157,"-"],[1,4159,"物理上"],[-1,4233,"  "],[-1,4238,"    "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[-1,4387,"    "],[1,4391,"- 注意：\n"],[-1,4393,"-"],[-1,4395,"\n"],[-1,4483,"\n"],[1,4485,"\n"],[-1,4516,"  "],[-1,4520,"  "],[1,4522,"地址计算"],[1,4525,"\n"],[-1,4528,"\n"],[-1,4531,"\n "],[1,4538,"El"],[-1,4645," "],[-1,4652," "],[1,4657,"对于"],[1,4738,"**"],[-1,4752,"**"],[-1,4774,"  "],[1,4780,"元素"],[-1,4868,"    \n "],[1,4878,"c"],[-1,4879,"`"],[1,5258,"`\n  "],[-1,5263," \n"],[1,5269,"\n  "],[1,5273,"操作"],[-1,5277,"    \n  "],[-1,5413," "],[1,5414,"\n"],[1,5416,"ListIns"],[-1,5453,"     \n "],[-1,6050,"``"],[1,6052,"  \n      "],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6895,"\n"],[1,6900,"\n"],[1,7061,"数据域和指针域"],[-1,7071,"和指针域"],[1,7278,"\n "],[-1,7285," \n"],[1,7436,"  "],[-1,7446,"  "],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"]],[239,239],[7681,7681]]],[1556449101389,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4112,"  "],[1,4117," "],[-1,4117,"概念："],[1,4154,"  "],[1,4159,"  "],[-1,4159,"-"],[-1,4162,"物理上"],[1,4239,"  "],[1,4242,"    "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[1,4393,"    "],[-1,4393,"- 注意：\n"],[1,4401,"-"],[1,4402,"\n"],[1,4489,"\n"],[-1,4490,"\n"],[1,4522,"  "],[1,4524,"  "],[-1,4524,"地址计算"],[-1,4531,"\n"],[1,4535,"\n"],[1,4537,"\n "],[-1,4542,"El"],[1,4651," "],[1,4657," "],[-1,4661,"对于"],[-1,4744,"**"],[1,4760,"**"],[1,4780,"  "],[-1,4784,"元素"],[1,4874,"    \n "],[-1,4878,"c"],[1,4880,"`"],[-1,5258,"`\n  "],[1,5267," \n"],[-1,5271,"\n  "],[-1,5278,"操作"],[1,5284,"    \n  "],[1,5413," "],[-1,5413,"\n"],[-1,5416,"ListIns"],[1,5460,"     \n "],[1,6050,"``"],[-1,6050,"  \n      "],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6902,"\n"],[-1,6906,"\n"],[-1,7068,"数据域和指针域"],[1,7085,"和指针域"],[-1,7288,"\n "],[1,7297," \n"],[-1,7446,"  "],[1,7458,"  "],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"]],[7681,7681],[239,239]]],[1556449042200,["GJX@GJXAIOU",[[-1,5405,"–"],[1,5406,"-"]],[5405,5405],[5406,5406]]],[1556449042386,["GJX@GJXAIOU",[[1,5406," "]],[5406,5406],[5407,5407]]],[1556449044944,["GJX@GJXAIOU",[[-1,5313,"\n"]],[5313,5313],[5312,5312]]],[1556449045877,["GJX@GJXAIOU",[[-1,5347,"\n"]],[5347,5347],[5346,5346]]],[1556449046702,["GJX@GJXAIOU",[[-1,5385,"\n"]],[5385,5385],[5384,5384]]],[1556449047526,["GJX@GJXAIOU",[[-1,5401,"\n"]],[5401,5401],[5400,5400]]],[1556449049190,["GJX@GJXAIOU",[[-1,5409,"。"]],[5410,5410],[5409,5409]]],[1556449051597,["GJX@GJXAIOU",[[1,5295,"  "],[1,5313,"  "],[1,5347,"  "],[1,5385,"  "],[1,5401,"  "]],[5295,5409],[5295,5419]]],[1556449053598,["GJX@GJXAIOU",[[-1,5294,"\n"]],[5294,5294],[5293,5293]]],[1556449055504,["GJX@GJXAIOU",[[1,5285,"  "]],[5285,5285],[5287,5287]]],[1556449065309,["GJX@GJXAIOU",[[1,5298,"  "],[1,5316,"  "],[1,5352," "],[1,5354," "],[1,5394,"  "],[1,5410,"  "]],[5299,5420],[5301,5430]]],[1556449072621,["GJX@GJXAIOU",[[1,5274,"  "]],[5274,5274],[5276,5276]]],[1556449075686,["GJX@GJXAIOU",[[-1,5275," "]],[5276,5276],[5275,5275]]],[1556449081110,["GJX@GJXAIOU",[[1,5288," "]],[5288,5288],[5289,5289]]],[1556449083754,["GJX@GJXAIOU",[[-1,5300,"  "],[-1,5320,"  "],[-1,5358," "],[-1,5361," "],[-1,5402,"  "],[-1,5420,"  "]],[5302,5433],[5300,5423]]],[1556449091116,["GJX@GJXAIOU",[[-1,5285,"\n"]],[5285,5285],[5284,5284]]],[1556449095478,["GJX@GJXAIOU",[[1,5299,"  "],[1,5317,"  "],[1,5353," "],[1,5355," "],[1,5395,"  "],[1,5411,"  "]],[5299,5421],[5301,5431]]],[1556449161384,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4106,"  "],[-1,4113," "],[1,4114,"概念："],[-1,4148,"  "],[-1,4155,"  "],[1,4157,"-"],[1,4159,"物理上"],[-1,4233,"  "],[-1,4238,"    "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[-1,4387,"    "],[1,4391,"- 注意：\n"],[-1,4393,"-"],[-1,4395,"\n"],[-1,4483,"\n"],[1,4485,"\n"],[-1,4516,"  "],[-1,4520,"  "],[1,4522,"地址计算"],[1,4525,"\n"],[-1,4528,"\n"],[-1,4531,"\n "],[1,4538,"El"],[-1,4645," "],[-1,4652," "],[1,4657,"对于"],[1,4738,"**"],[-1,4752,"**"],[-1,4774,"  "],[1,4780,"元素"],[-1,4868,"    \n "],[1,4878,"c"],[-1,4879,"`"],[1,5258,"`"],[-1,5259,"   "],[-1,5269,"-"],[-1,5271,"插入："],[-1,5281," \n"],[1,5283,"- 插入操作："],[1,5285,"\n"],[-1,5431," "],[1,5432,"\n"],[1,5434,"ListIns"],[-1,5471,"     \n "],[-1,6068,"``"],[1,6070,"  \n      "],[-1,6097,"  "],[1,6103,"操作"],[-1,6211,"   \n   "],[1,6218,""],[-1,6700,""],[1,6700,"       "],[-1,6721,"    "],[-1,6727," \n"],[1,6729,"总结"],[1,6732,"\n"],[1,6734,"-"],[1,6736,"点："],[-1,6790,"   "],[1,6793,"- 缺"],[-1,6913,"\n"],[1,6918,"\n"],[1,7079,"数据域和指针域"],[-1,7089,"和指针域"],[1,7296,"\n "],[-1,7303," \n"],[1,7454,"  "],[-1,7464,"  "],[-1,7641,"\n![单链表中的头结"],[1,7689,"\n![单链表中的头结"]],[239,239],[7699,7699]]],[1556449161384,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4112,"  "],[1,4117," "],[-1,4117,"概念："],[1,4154,"  "],[1,4159,"  "],[-1,4159,"-"],[-1,4162,"物理上"],[1,4239,"  "],[1,4242,"    "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[1,4393,"    "],[-1,4393,"- 注意：\n"],[1,4401,"-"],[1,4402,"\n"],[1,4489,"\n"],[-1,4490,"\n"],[1,4522,"  "],[1,4524,"  "],[-1,4524,"地址计算"],[-1,4531,"\n"],[1,4535,"\n"],[1,4537,"\n "],[-1,4542,"El"],[1,4651," "],[1,4657," "],[-1,4661,"对于"],[-1,4744,"**"],[1,4760,"**"],[1,4780,"  "],[-1,4784,"元素"],[1,4874,"    \n "],[-1,4878,"c"],[1,4880,"`"],[-1,5258,"`"],[1,5260,"   "],[1,5267,"-"],[1,5268,"插入："],[1,5275," \n"],[-1,5275,"- 插入操作："],[-1,5284,"\n"],[1,5431," "],[-1,5431,"\n"],[-1,5434,"ListIns"],[1,5478,"     \n "],[1,6068,"``"],[-1,6068,"  \n      "],[1,6104,"  "],[-1,6108,"操作"],[1,6218,"   \n   "],[-1,6218,""],[1,6700,""],[-1,6700,"       "],[1,6728,"    "],[1,6730," \n"],[-1,6730,"总结"],[-1,6735,"\n"],[-1,6738,"-"],[-1,6741,"点："],[1,6797,"   "],[-1,6797,"- 缺"],[1,6920,"\n"],[-1,6924,"\n"],[-1,7086,"数据域和指针域"],[1,7103,"和指针域"],[-1,7306,"\n "],[1,7315," \n"],[-1,7464,"  "],[1,7476,"  "],[1,7651,"\n![单链表中的头结"],[-1,7689,"\n![单链表中的头结"]],[7699,7699],[239,239]]],[1556449103044,["GJX@GJXAIOU",[[-1,5285,"   "]],[5288,5288],[5285,5285]]],[1556449103651,["GJX@GJXAIOU",[[-1,5284,"\n"]],[5285,5285],[5284,5284]]],[1556449104977,["GJX@GJXAIOU",[[1,5284,"\n   "]],[5284,5284],[5288,5288]]],[1556449107035,["GJX@GJXAIOU",[[-1,5285,"   "]],[5288,5288],[5285,5285]]],[1556449113809,["GJX@GJXAIOU",[[1,5298,"  "],[1,5316,"  "],[1,5354," "],[1,5358," "],[1,5400,"  "],[1,5416,"  "]],[5300,5428],[5302,5438]]],[1556449129104,["GJX@GJXAIOU",[[-1,6078,"        "]],[6086,6086],[6078,6078]]],[1556449129295,["GJX@GJXAIOU",[[-1,6078,"\n"]],[6078,6078],[6077,6077]]],[1556449130660,["GJX@GJXAIOU",[[-1,6073,"    "]],[6077,6077],[6073,6073]]],[1556449130966,["GJX@GJXAIOU",[[-1,6073,"\n"]],[6073,6073],[6072,6072]]],[1556449221393,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4106,"  "],[-1,4113," "],[1,4114,"概念："],[-1,4148,"  "],[-1,4155,"  "],[1,4157,"-"],[1,4159,"物理上"],[-1,4233,"  "],[-1,4238,"    "],[1,4242,"- 顺序存储"],[-1,4267,"    "],[1,4271,"存储空间"],[-1,4321,"  "],[1,4323,"表的"],[-1,4354,"  "],[1,4356,"3."],[-1,4387,"    "],[1,4391,"- 注意：\n"],[-1,4393,"-"],[-1,4395,"\n"],[-1,4483,"\n"],[1,4485,"\n"],[-1,4516,"  "],[-1,4520,"  "],[1,4522,"地址计算"],[1,4525,"\n"],[-1,4528,"\n"],[-1,4531,"\n "],[1,4538,"El"],[-1,4645," "],[-1,4652," "],[1,4657,"对于"],[1,4738,"**"],[-1,4752,"**"],[-1,4774,"  "],[1,4780,"元素"],[-1,4868,"    \n "],[1,4878,"c"],[-1,4879,"`"],[1,5258,"`"],[-1,5259,"   "],[-1,5269,"-"],[-1,5271,"插入："],[-1,5281," \n"],[1,5283,"- 插入操作： "],[-1,5438," "],[1,5439,"\n"],[1,5441,"ListIns"],[-1,5478,"     \n "],[1,6073,"**PS：**"],[-1,6090,"  "],[1,6096,"操作"],[-1,6204,"   \n   "],[1,6211,""],[-1,6693,""],[1,6693,"       "],[-1,6714,"    "],[-1,6720," \n"],[1,6722,"总结"],[1,6725,"\n"],[1,6727,"-"],[1,6729,"点："],[-1,6783,"   "],[1,6786,"- 缺"],[-1,6906,"\n"],[1,6911,"\n"],[1,7072,"数据域和指针域"],[-1,7082,"和指针域"],[1,7289,"\n "],[-1,7296," \n"],[1,7447,"  "],[-1,7457,"  "],[-1,7634,"\n![单链表中的头结"],[1,7682,"\n![单链表中的头结"]],[239,239],[7692,7692]]],[1556449221393,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4112,"  "],[1,4117," "],[-1,4117,"概念："],[1,4154,"  "],[1,4159,"  "],[-1,4159,"-"],[-1,4162,"物理上"],[1,4239,"  "],[1,4242,"    "],[-1,4242,"- 顺序存储"],[1,4273,"    "],[-1,4273,"存储空间"],[1,4327,"  "],[-1,4327,"表的"],[1,4360,"  "],[-1,4360,"3."],[1,4393,"    "],[-1,4393,"- 注意：\n"],[1,4401,"-"],[1,4402,"\n"],[1,4489,"\n"],[-1,4490,"\n"],[1,4522,"  "],[1,4524,"  "],[-1,4524,"地址计算"],[-1,4531,"\n"],[1,4535,"\n"],[1,4537,"\n "],[-1,4542,"El"],[1,4651," "],[1,4657," "],[-1,4661,"对于"],[-1,4744,"**"],[1,4760,"**"],[1,4780,"  "],[-1,4784,"元素"],[1,4874,"    \n "],[-1,4878,"c"],[1,4880,"`"],[-1,5258,"`"],[1,5260,"   "],[1,5267,"-"],[1,5268,"插入："],[1,5275," \n"],[-1,5275,"- 插入操作： "],[1,5438," "],[-1,5438,"\n"],[-1,5441,"ListIns"],[1,5485,"     \n "],[-1,6073,"**PS：**"],[1,6097,"  "],[-1,6101,"操作"],[1,6211,"   \n   "],[-1,6211,""],[1,6693,""],[-1,6693,"       "],[1,6721,"    "],[1,6723," \n"],[-1,6723,"总结"],[-1,6728,"\n"],[-1,6731,"-"],[-1,6734,"点："],[1,6790,"   "],[-1,6790,"- 缺"],[1,6913,"\n"],[-1,6917,"\n"],[-1,7079,"数据域和指针域"],[1,7096,"和指针域"],[-1,7299,"\n "],[1,7308," \n"],[-1,7457,"  "],[1,7469,"  "],[1,7644,"\n![单链表中的头结"],[-1,7682,"\n![单链表中的头结"]],[7692,7692],[239,239]]],[1556449194846,["GJX@GJXAIOU",[[1,4098,"#### "]],[4098,4100],[4115,4115]]],[1556449197637,["GJX@GJXAIOU",[[-1,4103,"- "]],[4103,4105],[4103,4103]]],[1556449207066,["GJX@GJXAIOU",[[-1,6868,"- "]],[6868,6870],[6868,6868]]],[1556449208523,["GJX@GJXAIOU",[[1,6868,"#### "]],[6868,6868],[6886,6886]]],[1556449212740,["GJX@GJXAIOU",[[1,6867,"---"]],[6867,6867],[6870,6870]]],[1556449213691,["GJX@GJXAIOU",[[1,6871,"\n"]],[6870,6870],[6871,6871]]],[1556449217377,["GJX@GJXAIOU",[[1,6889,"\n"]],[6889,6889],[6890,6890]]],[1556449401540,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7300,"\n "],[-1,7307," \n"],[1,7458,"  "],[-1,7468,"  "],[-1,7645,"\n![单链表中的头结"],[1,7693,"\n![单链表中的头结"]],[239,239],[7703,7703]]],[1556449401540,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7310,"\n "],[1,7319," \n"],[-1,7468,"  "],[1,7480,"  "],[1,7655,"\n![单链表中的头结"],[-1,7693,"\n![单链表中的头结"]],[7703,7703],[239,239]]],[1556449397903,["GJX@GJXAIOU",[[-1,7309," "]],[7309,7310],[7309,7309]]],[1556449398551,["GJX@GJXAIOU",[[-1,7309,"\n"]],[7309,7309],[7308,7308]]],[1556449401352,["GJX@GJXAIOU",[[-1,7320,"  "]],[7322,7322],[7320,7320]]],[1556449461510,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[-1,7310,"  "],[1,7320,"**"],[1,7454,"  "],[-1,7464,"  "],[-1,7641,"\n![单链表中的头结"],[1,7689,"\n![单链表中的头结"]],[239,239],[7699,7699]]],[1556449461510,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[1,7320,"  "],[-1,7328,"**"],[-1,7464,"  "],[1,7476,"  "],[1,7651,"\n![单链表中的头结"],[-1,7689,"\n![单链表中的头结"]],[7699,7699],[239,239]]],[1556449401754,["GJX@GJXAIOU",[[-1,7319," "]],[7320,7320],[7319,7319]]],[1556449402186,["GJX@GJXAIOU",[[-1,7319,"\n"]],[7319,7319],[7318,7318]]],[1556449521518,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[-1,7312,"\n   "],[1,7319," **概"],[1,7452,"  "],[-1,7462,"  "],[-1,7639,"\n![单链表中的头结"],[1,7687,"\n![单链表中的头结"]],[239,239],[7697,7697]]],[1556449521518,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[1,7322,"\n   "],[-1,7325," **概"],[-1,7462,"  "],[1,7474,"  "],[1,7649,"\n![单链表中的头结"],[-1,7687,"\n![单链表中的头结"]],[7697,7697],[239,239]]],[1556449515269,["GJX@GJXAIOU",[[-1,7462,"  "]],[7464,7464],[7462,7462]]],[1556449701572,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[-1,7312,"\n   "],[1,7319," **概"],[-1,7637,"\n![单链表中的头结"],[1,7685,"\n![单链表中的头结"]],[239,239],[7695,7695]]],[1556449701573,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[1,7322,"\n   "],[-1,7325," **概"],[1,7647,"\n![单链表中的头结"],[-1,7685,"\n![单链表中的头结"]],[7695,7695],[239,239]]],[1556449665353,["GJX@GJXAIOU",[[1,7834," "]],[7834,7834],[7835,7835]]],[1556449669310,["GJX@GJXAIOU",[[-1,7830,"："]],[7831,7831],[7830,7830]]],[1556449674726,["GJX@GJXAIOU",[[1,7830,"："]],[7830,7830],[7831,7831]]],[1556449684434,["GJX@GJXAIOU",[[1,7294," "]],[7294,7294],[7295,7295]]],[1556449821579,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[1,7825," "],[-1,7831,"："],[1,7832,"结"],[-1,7835," "]],[239,239],[7835,7835]]],[1556449821580,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[-1,7835," "],[1,7842,"："],[-1,7842,"结"],[1,7846," "]],[7835,7835],[239,239]]],[1556449799343,["GJX@GJXAIOU",[[1,7828,"\n"]],[7826,7826],[7827,7827]]],[1556449799507,["GJX@GJXAIOU",[[1,7829,"\n"]],[7827,7827],[7828,7828]]],[1556449800486,["GJX@GJXAIOU",[[1,7830,"\n"]],[7828,7828],[7829,7829]]],[1556449800734,["GJX@GJXAIOU",[[1,7831,"\n"]],[7829,7829],[7830,7830]]],[1556449800934,["GJX@GJXAIOU",[[1,7832,"\n"]],[7830,7830],[7831,7831]]],[1556449801110,["GJX@GJXAIOU",[[1,7833,"\n"]],[7831,7831],[7832,7832]]],[1556449819278,["GJX@GJXAIOU",[[1,7828," 可以使用C语言中的结构指针来藐视"]],[7828,7828],[7845,7845]]],[1556449881585,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,7851,"**注：**  头指针"],[-1,7854,"："],[1,7855,"结"],[-1,7858," "]],[239,239],[7858,7858]]],[1556449881585,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,7851,"**注：**  头指针"],[1,7865,"："],[-1,7865,"结"],[1,7869," "]],[7858,7858],[239,239]]],[1556449821829,["GJX@GJXAIOU",[[1,7845,"单链表"]],[7845,7845],[7848,7848]]],[1556449824373,["GJX@GJXAIOU",[[-1,7843,"藐视"]],[7845,7845],[7843,7843]]],[1556449826954,["GJX@GJXAIOU",[[1,7843,"描述"]],[7843,7843],[7845,7845]]],[1556449849315,["GJX@GJXAIOU",[[1,7849,"·"]],[7849,7849],[7850,7850]]],[1556449850351,["GJX@GJXAIOU",[[-1,7849,"·"]],[7850,7850],[7849,7849]]],[1556449850932,["GJX@GJXAIOU",[[1,7849,"···"]],[7849,7849],[7852,7852]]],[1556449852342,["GJX@GJXAIOU",[[-1,7849,"···"]],[7852,7852],[7849,7849]]],[1556449852664,["GJX@GJXAIOU",[[-1,7853,"\n"]],[7849,7849],[7848,7848]]],[1556449853799,["GJX@GJXAIOU",[[1,7849," \n"]],[7848,7848],[7850,7850]]],[1556449854460,["GJX@GJXAIOU",[[1,7850,"·"]],[7850,7850],[7851,7851]]],[1556449855176,["GJX@GJXAIOU",[[-1,7850,"·"]],[7851,7851],[7850,7850]]],[1556449858132,["GJX@GJXAIOU",[[1,7850,"```c"]],[7850,7850],[7854,7854]]],[1556449858327,["GJX@GJXAIOU",[[1,7855," \n"]],[7854,7854],[7856,7856]]],[1556449859234,["GJX@GJXAIOU",[[-1,7855," "],[1,7856,"\n"]],[7856,7856],[7856,7856]]],[1556449859969,["GJX@GJXAIOU",[[1,7856,"```"]],[7856,7856],[7859,7859]]],[1556449863243,["GJX@GJXAIOU",[[1,7855,"typedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;"]],[7855,7855],[7970,7970]]],[1556449865639,["GJX@GJXAIOU",[[-1,7849," "]],[7850,7850],[7849,7849]]],[1556450121585,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,7978,"**注：**  头指针"],[-1,7981,"："],[1,7982,"结"],[-1,7985," "]],[239,239],[7985,7985]]],[1556450121585,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,7978,"**注：**  头指针"],[1,7992,"："],[-1,7992,"结"],[1,7996," "]],[7985,7985],[239,239]]],[1556450103458,["GJX@GJXAIOU",[[1,7969,"  // LinkList相当于 Node*"]],[7969,7969],[7991,7991]]],[1556450181593,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "]],[239,239],[8007,8007]]],[1556450181593,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "]],[8007,8007],[239,239]]],[1556450127031,["GJX@GJXAIOU",[[1,8226,"\n"]],[8224,8224],[8225,8225]]],[1556450128135,["GJX@GJXAIOU",[[1,8227,"\n"]],[8225,8225],[8226,8226]]],[1556450130986,["GJX@GJXAIOU",[[1,8226,"```c"]],[8226,8226],[8230,8230]]],[1556450131225,["GJX@GJXAIOU",[[1,8232,"\n"]],[8230,8230],[8231,8231]]],[1556450131687,["GJX@GJXAIOU",[[1,8233,"\n"]],[8231,8231],[8232,8232]]],[1556450131866,["GJX@GJXAIOU",[[1,8234,"\n"]],[8232,8232],[8233,8233]]],[1556450132977,["GJX@GJXAIOU",[[1,8233,"```"]],[8233,8233],[8236,8236]]],[1556450241598,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8238,"**注：**首先没有"]],[239,239],[8248,8248]]],[1556450241598,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8238,"**注：**首先没有"]],[8248,8248],[239,239]]],[1556450241278,["GJX@GJXAIOU",[[1,8231,"/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}"]],[8231,8231],[8634,8634]]],[1556450481592,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：**首先没有"]],[239,239],[8651,8651]]],[1556450481592,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：**首先没有"]],[8651,8651],[239,239]]],[1556450429122,["GJX@GJXAIOU",[[1,8711," "]],[8711,8711],[8712,8712]]],[1556450434763,["GJX@GJXAIOU",[[1,8647," "]],[8647,8647],[8648,8648]]],[1556450470246,["GJX@GJXAIOU",[[1,8752,"\n"]],[8752,8752],[8753,8753]]],[1556450475718,["GJX@GJXAIOU",[[1,8833,"\n"]],[8833,8833],[8834,8834]]],[1556450479031,["GJX@GJXAIOU",[[1,8847,"`"],[1,8851,"`"]],[8847,8851],[8847,8853]]],[1556450480304,["GJX@GJXAIOU",[[-1,8847,"`~~~~`"]],[8847,8853],[8847,8847]]],[1556450481251,["GJX@GJXAIOU",[[1,8847,"```"]],[8847,8847],[8850,8850]]],[1556450542084,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```"],[-1,8847,"```"],[1,8850,"xt ="]],[239,239],[8854,8854]]],[1556450542084,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```"],[1,8856,"```"],[-1,8856,"xt ="]],[8854,8854],[239,239]]],[1556450482827,["GJX@GJXAIOU",[[1,8850,"c"]],[8850,8850],[8851,8851]]],[1556450486976,["GJX@GJXAIOU",[[-1,8885,"   \n~~~~   "]],[8884,8895],[8884,8884]]],[1556450488212,["GJX@GJXAIOU",[[1,8884,"```"]],[8884,8884],[8887,8887]]],[1556450491555,["GJX@GJXAIOU",[[1,8883,"\\"]],[8883,8883],[8884,8884]]],[1556450492574,["GJX@GJXAIOU",[[-1,8883,"\\"]],[8884,8884],[8883,8883]]],[1556450493511,["GJX@GJXAIOU",[[1,8884,"\n"]],[8883,8883],[8884,8884]]],[1556450495790,["GJX@GJXAIOU",[[1,8891,"\n"]],[8890,8890],[8891,8891]]],[1556450507789,["GJX@GJXAIOU",[[1,8847,"\n"]],[8847,8847],[8848,8848]]],[1556450515542,["GJX@GJXAIOU",[[1,8893,"\n"]],[8891,8891],[8892,8892]]],[1556450515687,["GJX@GJXAIOU",[[1,8894,"\n"]],[8892,8892],[8893,8893]]],[1556450535590,["GJX@GJXAIOU",[[-1,8847,"\n"]],[8847,8847],[8846,8846]]],[1556450602097,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8741,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8889,"数据"],[1,8891,"\n\n"],[1,8894,"**单链表第i个数据"]],[239,239],[8904,8904]]],[1556450602097,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8751,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8889,"数据"],[-1,8889,"\n\n"],[-1,8894,"**单链表第i个数据"]],[8904,8904],[239,239]]],[1556450545757,["GJX@GJXAIOU",[[-1,8945,"\n"]],[8945,8945],[8944,8944]]],[1556450548143,["GJX@GJXAIOU",[[-1,8984,"\n"]],[8984,8984],[8983,8983]]],[1556450549245,["GJX@GJXAIOU",[[-1,9009,"\n"]],[9009,9009],[9008,9008]]],[1556450550062,["GJX@GJXAIOU",[[-1,9032,"\n"]],[9032,9032],[9031,9031]]],[1556450550853,["GJX@GJXAIOU",[[-1,9052,"\n"]],[9052,9052],[9051,9051]]],[1556450551702,["GJX@GJXAIOU",[[-1,9070,"\n"]],[9070,9070],[9069,9069]]],[1556450556685,["GJX@GJXAIOU",[[-1,8893,"\n"]],[8892,8892],[8891,8891]]],[1556450557133,["GJX@GJXAIOU",[[-1,8892,"\n"]],[8891,8891],[8890,8890]]],[1556450566537,["GJX@GJXAIOU",[[-1,8885,"``` "]],[8885,8889],[8885,8885]]],[1556450567644,["GJX@GJXAIOU",[[-1,8847,"```c"]],[8847,8851],[8847,8847]]],[1556450573188,["GJX@GJXAIOU",[[1,8880,"```"]],[8880,8880],[8883,8883]]],[1556450577444,["GJX@GJXAIOU",[[1,8847,"```c"]],[8847,8847],[8851,8851]]],[1556450662091,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8822,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[1,8888,"\n\n\n**单链表第i个"],[-1,8890,"\n"],[-1,8932,"\n"],[1,8942,"遍"],[-1,8971,"\n"],[1,8981,"为"],[-1,8996,"\n"],[1,9006,"在"],[-1,9019,"\n"],[1,9029,"值"],[-1,9039,"\n"],[1,9049,"才"],[-1,9057,"\n"],[1,9065," "]],[239,239],[9066,9066]]],[1556450662091,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8832,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[-1,8888,"\n\n\n**单链表第i个"],[1,8901,"\n"],[1,8942,"\n"],[-1,8951,"遍"],[1,8981,"\n"],[-1,8990,"为"],[1,9006,"\n"],[-1,9015,"在"],[1,9029,"\n"],[-1,9038,"值"],[1,9049,"\n"],[-1,9058,"才"],[1,9067,"\n"],[-1,9074," "]],[9066,9066],[239,239]]],[1556450643781,["GJX@GJXAIOU",[[1,8888,"daima"]],[8888,8888],[8893,8893]]],[1556450644748,["GJX@GJXAIOU",[[-1,8888,"daima"]],[8893,8893],[8888,8888]]],[1556450645025,["GJX@GJXAIOU",[[-1,8890,"\n"]],[8888,8888],[8887,8887]]],[1556450645992,["GJX@GJXAIOU",[[1,8890,"\n"]],[8887,8887],[8888,8888]]],[1556450646774,["GJX@GJXAIOU",[[1,8888,"dai"]],[8888,8888],[8891,8891]]],[1556450647308,["GJX@GJXAIOU",[[-1,8888,"dai"]],[8891,8891],[8888,8888]]],[1556450647633,["GJX@GJXAIOU",[[-1,8890,"\n"]],[8888,8888],[8887,8887]]],[1556450648359,["GJX@GJXAIOU",[[1,8890,"\n"]],[8887,8887],[8888,8888]]],[1556450650973,["GJX@GJXAIOU",[[1,8888,"代码书序"]],[8888,8888],[8892,8892]]],[1556450651582,["GJX@GJXAIOU",[[-1,8890,"书序"]],[8892,8892],[8890,8890]]],[1556450655847,["GJX@GJXAIOU",[[1,8890,"顺序不能更改"]],[8890,8890],[8896,8896]]],[1556450656212,["GJX@GJXAIOU",[[1,8899,"\n"]],[8896,8896],[8897,8897]]],[1556450722104,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[1,8896,"\n\n\n\n**单链表第i个"],[-1,8898,"\n\n"],[-1,8941,"\n"],[1,8951,"遍"],[-1,8980,"\n"],[1,8990,"为"],[-1,9005,"\n"],[1,9015,"在"],[-1,9028,"\n"],[1,9038,"值"],[-1,9048,"\n"],[1,9058,"才"],[-1,9066,"\n"],[1,9074," "]],[239,239],[9075,9075]]],[1556450722104,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[-1,8896,"\n\n\n\n**单链表第i个"],[1,8910,"\n\n"],[1,8951,"\n"],[-1,8960,"遍"],[1,8990,"\n"],[-1,8999,"为"],[1,9015,"\n"],[-1,9024,"在"],[1,9038,"\n"],[-1,9047,"值"],[1,9058,"\n"],[-1,9067,"才"],[1,9076,"\n"],[-1,9083," "]],[9075,9075],[239,239]]],[1556450695419,["GJX@GJXAIOU",[[1,8896,"；先连接后断开"]],[8896,8896],[8903,8903]]],[1556450782098,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[1,8903,"\n\n\n\n**单链表第i个"],[-1,8905,"\n\n"],[-1,8948,"\n"],[1,8958,"遍"],[-1,8987,"\n"],[1,8997,"为"],[-1,9012,"\n"],[1,9022,"在"],[-1,9035,"\n"],[1,9045,"值"],[-1,9055,"\n"],[1,9065,"才"],[-1,9073,"\n"],[1,9081," "]],[239,239],[9082,9082]]],[1556450782098,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[-1,8903,"\n\n\n\n**单链表第i个"],[1,8917,"\n\n"],[1,8958,"\n"],[-1,8967,"遍"],[1,8997,"\n"],[-1,9006,"为"],[1,9022,"\n"],[-1,9031,"在"],[1,9045,"\n"],[-1,9054,"值"],[1,9065,"\n"],[-1,9074,"才"],[1,9083,"\n"],[-1,9090," "]],[9082,9082],[239,239]]],[1556450774316,["GJX@GJXAIOU",[[1,8904,"·"]],[8904,8904],[8905,8905]]],[1556450775686,["GJX@GJXAIOU",[[-1,8904,"·"]],[8905,8905],[8904,8904]]],[1556450778373,["GJX@GJXAIOU",[[1,8904,"```c"]],[8904,8904],[8908,8908]]],[1556450778591,["GJX@GJXAIOU",[[1,8911,"\n"]],[8908,8908],[8909,8909]]],[1556450779185,["GJX@GJXAIOU",[[1,8912,"\n"]],[8909,8909],[8910,8910]]],[1556450780132,["GJX@GJXAIOU",[[1,8910,"```"]],[8910,8910],[8913,8913]]],[1556450962110,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数"],[1,8904,"\n"],[-1,8908,"据"],[1,8909,"\n"],[1,8916,"**单链表第i个数据"],[-1,8957,"\n"],[1,8967,"遍"],[-1,8996,"\n"],[1,9006,"为"],[-1,9021,"\n"],[1,9031,"在"],[-1,9044,"\n"],[1,9054,"值"],[-1,9064,"\n"],[1,9074,"才"],[-1,9082,"\n"],[1,9090," "]],[239,239],[9091,9091]]],[1556450962110,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数"],[-1,8903,"\n"],[1,8908,"据"],[-1,8908,"\n"],[-1,8916,"**单链表第i个数据"],[1,8967,"\n"],[-1,8976,"遍"],[1,9006,"\n"],[-1,9015,"为"],[1,9031,"\n"],[-1,9040,"在"],[1,9054,"\n"],[-1,9063,"值"],[1,9074,"\n"],[-1,9083,"才"],[1,9092,"\n"],[-1,9099," "]],[9091,9091],[239,239]]],[1556450938303,["GJX@GJXAIOU",[[1,9520,"···"]],[9520,9520],[9523,9523]]],[1556450939995,["GJX@GJXAIOU",[[-1,9520,"···"]],[9523,9523],[9520,9520]]],[1556450942645,["GJX@GJXAIOU",[[1,9520,"```c"]],[9520,9520],[9524,9524]]],[1556450942948,["GJX@GJXAIOU",[[1,9529,"\n"]],[9524,9524],[9525,9525]]],[1556450943078,["GJX@GJXAIOU",[[1,9530,"\n"]],[9525,9525],[9526,9526]]],[1556450944572,["GJX@GJXAIOU",[[1,9526,"```"]],[9526,9526],[9529,9529]]],[1556450946048,["GJX@GJXAIOU",[[1,9525,"/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}"]],[9525,9525],[9975,9975]]],[1556451022152,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8741,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数"],[1,8904,"\n"],[-1,8908,"据\n```\n\n\n插入结点的算法思路：*"],[1,8927,"\n/"],[-1,8929," \n1.声明一结点p指向链表头结点，"],[-1,8949,"化j从1开始；\n\n2.当j<1时，就历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p空，则说明"],[1,9011,"条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的"],[-1,9014,"元素不存在；\n\n4.否则查找成功，系统中生成一个空结点s；\n\n5.将"],[-1,9052,"e赋给s->data；\n\n6.单链表的插入刚两个标准语句；\n\n7.返回成功。"],[1,9090,"，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n "],[1,9093,"int"],[1,9094,"j;"],[1,9095,"    LinkList p, q;"],[1,9097,"    p = *L;"],[1,9098,"    j = 1;"],[-1,9100,"**单链表的删除:**"],[-1,9114,"\n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~"],[1,9221," while( p->next && j<i )\n  "],[1,9223,"{"],[1,9224,"        p = "],[-1,9231," = "],[1,9234,";\n        ++j;\n    }\n\n    if( !("],[-1,9241,"->next;\n\n或者q="],[1,9254,") || j>i )\n    {\n        return ERROR;\n    }\n\n    q = "],[1,9262,"\n   "],[1,9270," "],[1,9271," "],[1,9279,"\n\n"],[-1,9281,"\n\n~~~~  "],[1,9289,"  *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n"],[-1,9296,"的"],[-1,9302,"删除节"],[1,9305,"插入结"],[1,9309,"思路"],[1,9319,"一"],[-1,9326,"第一个"],[1,9329,"头"],[-1,9336,"=1；\n"],[1,9340,"从1开始；"],[-1,9356,"P"],[1,9357,"p"],[-1,9371,"个"],[-1,9380,"\n"],[-1,9407,"\n"],[-1,9417,"将欲删除结点p->next赋值给q；\n\n5"],[1,9438,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9443,"删除"],[1,9445,"插入刚才两个"],[-1,9449,"p->next = q->next"],[-1,9468,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9498,"7.返回成功"],[-1,9503,"\n\n\n **注：**"],[-1,9515," 1.插入"],[-1,9524,"和"],[1,9525,"\n"],[-1,9975,"删```除操作"],[1,9982,"\n```\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，将欲删除结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next = q->next；\n\n6.将q结点中的数据赋值给e，作为返回；"],[1,9984,"7.释放q结点。    \n\n\n **注：** \n 1.插入和删除操作"]],[239,239],[10018,10018]]],[1556451022152,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8751,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数"],[-1,8903,"\n"],[1,8908,"据\n```\n\n\n插入结点的算法思路：*"],[-1,8908,"\n/"],[1,8912," \n1.声明一结点p指向链表头结点，"],[1,8914,"化j从1开始；\n\n2.当j<1时，就历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p空，则说明"],[-1,8914,"条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的"],[1,8965,"元素不存在；\n\n4.否则查找成功，系统中生成一个空结点s；\n\n5.将"],[1,8969,"e赋给s->data；\n\n6.单链表的插入刚两个标准语句；\n\n7.返回成功。"],[-1,8969,"，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n "],[-1,9046,"int"],[-1,9050,"j;"],[-1,9053,"    LinkList p, q;"],[-1,9073,"    p = *L;"],[-1,9085,"    j = 1;"],[1,9097,"**单链表的删除:**"],[1,9100,"\n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~"],[-1,9100," while( p->next && j<i )\n  "],[-1,9129,"{"],[-1,9131,"        p = "],[1,9150," = "],[-1,9150,";\n        ++j;\n    }\n\n    if( !("],[1,9189,"->next;\n\n或者q="],[-1,9189,") || j>i )\n    {\n        return ERROR;\n    }\n\n    q = "],[-1,9251,"\n   "],[-1,9263," "],[-1,9265," "],[-1,9274,"\n\n"],[1,9278,"\n\n~~~~  "],[-1,9278,"  *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n"],[1,9336,"的"],[1,9341,"删除节"],[-1,9341,"插入结"],[-1,9348,"思路"],[-1,9360,"一"],[1,9368,"第一个"],[-1,9368,"头"],[1,9376,"=1；\n"],[-1,9376,"从1开始；"],[1,9397,"P"],[-1,9397,"p"],[1,9412,"个"],[1,9420,"\n"],[1,9446,"\n"],[1,9455,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9455,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9495,"删除"],[-1,9495,"插入刚才两个"],[1,9505,"p->next = q->next"],[1,9507,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9507,"7.返回成功"],[1,9518,"\n\n\n **注：**"],[1,9520," 1.插入"],[1,9524,"和"],[-1,9524,"\n"],[1,9975,"删```除操作"],[-1,9975,"\n```\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个元素不存在；\n\n4.否则查找成功，将欲删除结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next = q->next；\n\n6.将q结点中的数据赋值给e，作为返回；"],[-1,10375,"7.释放q结点。    \n\n\n **注：** \n 1.插入和删除操作"]],[10018,10018],[239,239]]],[1556450991756,["GJX@GJXAIOU",[[1,10175,"\n"]],[10174,10174],[10175,10175]]],[1556450991921,["GJX@GJXAIOU",[[1,10176,"\n"]],[10175,10175],[10176,10176]]],[1556451003576,["GJX@GJXAIOU",[[-1,10267,"\n"]],[10267,10267],[10266,10266]]],[1556451004850,["GJX@GJXAIOU",[[-1,10226,"\n"]],[10226,10226],[10225,10225]]],[1556451005649,["GJX@GJXAIOU",[[-1,10291,"\n"]],[10291,10291],[10290,10290]]],[1556451006447,["GJX@GJXAIOU",[[-1,10319,"\n"]],[10319,10319],[10318,10318]]],[1556451007271,["GJX@GJXAIOU",[[-1,10350,"\n"]],[10350,10350],[10349,10349]]],[1556451008071,["GJX@GJXAIOU",[[-1,10371,"\n"]],[10371,10371],[10370,10370]]],[1556451082148,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8741,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数"],[1,8904,"\n"],[-1,8908,"据\n```\n\n\n插入结点的算法思路：*"],[1,8927,"\n/"],[-1,8929," \n1.声明一结点p指向链表头结点，"],[-1,8949,"化j从1开始；\n\n2.当j<1时，就历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p空，则说明"],[1,9011,"条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的"],[1,9014,"数据"],[-1,9016,"不存在；\n\n4.否则查找成功，系统中生成一个空结点s；\n\n5.将数据元素e赋给s->data；\n\n6.单链表的插入刚两个标准语句；\n\n7.返回成功。"],[1,9090,"，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n "],[1,9093,"int"],[1,9094,"j;"],[1,9095,"    LinkList p, q;"],[1,9097,"    p = *L;"],[1,9098,"    j = 1;"],[-1,9100,"**单链表的删除:**"],[-1,9114,"\n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~"],[1,9221," while( p->next && j<i )\n  "],[1,9223,"{"],[1,9224,"        p = "],[-1,9231," = "],[1,9234,";\n        ++j;\n    }\n\n    if( !("],[-1,9241,"->next;\n\n或者q="],[1,9254,") || j>i )\n    {\n        return ERROR;\n    }\n\n    q = "],[1,9262,"\n   "],[1,9270," "],[1,9271," "],[1,9279,"\n\n"],[1,9281,"  *e = q->data;\n    free(q);"],[-1,9283,"~~~~  "],[1,9289,"    return OK;\n}\n```\n"],[-1,9296,"的"],[-1,9302,"删除节"],[1,9305,"插入结"],[1,9309,"思路"],[1,9319,"一"],[-1,9326,"第一个"],[1,9329,"头"],[-1,9336,"=1；\n"],[1,9340,"从1开始；"],[-1,9356,"P"],[1,9357,"p"],[-1,9371,"个"],[-1,9381,"\n"],[-1,9406,"\n"],[-1,9417,"将欲删除结点p->next赋值给q；\n\n5"],[1,9438,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9443,"删除"],[1,9445,"插入刚才两个"],[-1,9449,"p->next = q->next"],[-1,9468,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9498,"7.返回成功"],[-1,9503,"\n\n\n **注：**"],[-1,9515," 1.插入"],[-1,9524,"和"],[1,9525,"\n"],[-1,9975,"删```除操作"],[1,9982,"\n```\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    "],[1,9984,"\n **注：** \n 1.插入和删除操作"],[-1,10175,"\n\n"],[1,10177,""],[1,10227,"\n"],[-1,10266,""],[1,10266,"单"],[1,10291,"\n"],[1,10319,"开"],[1,10350,"入"],[1,10371,"方"]],[239,239],[10372,10372]]],[1556451082148,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8751,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数"],[-1,8903,"\n"],[1,8908,"据\n```\n\n\n插入结点的算法思路：*"],[-1,8908,"\n/"],[1,8912," \n1.声明一结点p指向链表头结点，"],[1,8914,"化j从1开始；\n\n2.当j<1时，就历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p空，则说明"],[-1,8914,"条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的"],[-1,8965,"数据"],[1,8969,"不存在；\n\n4.否则查找成功，系统中生成一个空结点s；\n\n5.将数据元素e赋给s->data；\n\n6.单链表的插入刚两个标准语句；\n\n7.返回成功。"],[-1,8969,"，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n "],[-1,9046,"int"],[-1,9050,"j;"],[-1,9053,"    LinkList p, q;"],[-1,9073,"    p = *L;"],[-1,9085,"    j = 1;"],[1,9097,"**单链表的删除:**"],[1,9100,"\n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~"],[-1,9100," while( p->next && j<i )\n  "],[-1,9129,"{"],[-1,9131,"        p = "],[1,9150," = "],[-1,9150,";\n        ++j;\n    }\n\n    if( !("],[1,9189,"->next;\n\n或者q="],[-1,9189,") || j>i )\n    {\n        return ERROR;\n    }\n\n    q = "],[-1,9251,"\n   "],[-1,9263," "],[-1,9265," "],[-1,9274,"\n\n"],[-1,9278,"  *e = q->data;\n    free(q);"],[1,9308,"~~~~  "],[-1,9308,"    return OK;\n}\n```\n"],[1,9336,"的"],[1,9341,"删除节"],[-1,9341,"插入结"],[-1,9348,"思路"],[-1,9360,"一"],[1,9368,"第一个"],[-1,9368,"头"],[1,9376,"=1；\n"],[-1,9376,"从1开始；"],[1,9397,"P"],[-1,9397,"p"],[1,9412,"个"],[1,9421,"\n"],[1,9445,"\n"],[1,9455,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9455,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9495,"删除"],[-1,9495,"插入刚才两个"],[1,9505,"p->next = q->next"],[1,9507,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9507,"7.返回成功"],[1,9518,"\n\n\n **注：**"],[1,9520," 1.插入"],[1,9524,"和"],[-1,9524,"\n"],[1,9975,"删```除操作"],[-1,9975,"\n```\n\n\n\n\n**单链表的删除:**   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    "],[-1,10385,"\n **注：** \n 1.插入和删除操作"],[1,10596,"\n\n"],[-1,10596,""],[-1,10646,"\n"],[1,10686,""],[-1,10686,"单"],[-1,10712,"\n"],[-1,10741,"开"],[-1,10773,"入"],[-1,10795,"方"]],[10372,10372],[239,239]]],[1556451051135,["GJX@GJXAIOU",[[-1,8904,"```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```"]],[8904,9328],[8904,8904]]],[1556451059409,["GJX@GJXAIOU",[[1,9961,"```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```"]],[9961,9961],[10385,10385]]],[1556451062080,["GJX@GJXAIOU",[[1,10386,"\n"]],[10385,10385],[10386,10386]]],[1556451202135,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8741,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1"],[1,8914,"从1开始"],[-1,8916,"\n"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9719,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9721,"\n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新"],[-1,10386,"\n"]],[239,239],[10386,10386]]],[1556451202135,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8751,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1"],[-1,8952,"从1开始"],[1,8958,"\n"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9741,"\n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新"],[1,10812,"\n"]],[10386,10386],[239,239]]],[1556451145528,["GJX@GJXAIOU",[[1,10570," \n"]],[10569,10569],[10571,10571]]],[1556451147538,["GJX@GJXAIOU",[[1,10571,"suiyu"]],[10571,10571],[10576,10576]]],[1556451148940,["GJX@GJXAIOU",[[-1,10570," suiyu"]],[10576,10576],[10570,10570]]],[1556451160498,["GJX@GJXAIOU",[[1,10570,"对于插入和删除操作较为平凡"]],[10570,10570],[10583,10583]]],[1556451161774,["GJX@GJXAIOU",[[-1,10581,"平凡"]],[10583,10583],[10581,10581]]],[1556451170108,["GJX@GJXAIOU",[[1,10581,"频繁使用单链表"]],[10581,10581],[10588,10588]]],[1556451502171,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[1,9790,"结点p指向链表第"],[1,9791,"个"],[-1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9835,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[1,10589,""]],[239,239],[10589,10589]]],[1556451502171,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[-1,9781,"结点p指向链表第"],[-1,9790,"个"],[1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9793,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,11014,"对于插入和删除操作较为频繁使用单链表\n"],[-1,11014,""]],[10589,10589],[239,239]]],[1556451495544,["GJX@GJXAIOU",[[1,10592,"\n"]],[10592,10592],[10593,10593]]],[1556451622179,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[1,9790,"结点p指向链表第"],[1,9791,"个"],[-1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9835,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"]],[239,239],[10592,10592]]],[1556451622179,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[-1,9781,"结点p指向链表第"],[-1,9790,"个"],[1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9793,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–声明一结点p和计数器变量i；\n\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n\n–循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,11015,"对于插入和删除操作较为频繁使用单链表\n"],[1,11018,"\n"]],[10592,10592],[239,239]]],[1556451597938,["GJX@GJXAIOU",[[-1,10667,"\n"]],[10667,10667],[10666,10666]]],[1556451598906,["GJX@GJXAIOU",[[-1,10678,"\n"]],[10678,10678],[10677,10677]]],[1556451599586,["GJX@GJXAIOU",[[-1,10710,"\n"]],[10710,10710],[10709,10709]]],[1556451601474,["GJX@GJXAIOU",[[-1,10710,"–"]],[10710,10711],[10710,10710]]],[1556451602410,["GJX@GJXAIOU",[[-1,10678,"–"]],[10679,10679],[10678,10678]]],[1556451603344,["GJX@GJXAIOU",[[-1,10667,"–"]],[10668,10668],[10667,10667]]],[1556451604233,["GJX@GJXAIOU",[[-1,10651,"–"]],[10652,10652],[10651,10651]]],[1556451608065,["GJX@GJXAIOU",[[1,10651,"* "],[1,10666,"* "],[1,10676,"* "],[1,10707,"* "]],[10651,10722],[10653,10730]]],[1556451682188,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1"],[1,8914,"从1开始"],[-1,8916,"\n"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10669," "],[-1,10680,"*"],[1,10681,";"],[-1,10713,"* "],[1,10715,"(L"]],[239,239],[10717,10717]]],[1556451682189,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1"],[-1,8952,"从1开始"],[1,8958,"\n"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,11016,"对于插入和删除操作较为频繁使用单链表\n"],[1,11019,"\n"],[1,11077,"* "],[-1,11077,"-"],[1,11093,"*"],[-1,11093," "],[1,11105,"*"],[-1,11105,";"],[1,11138,"* "],[-1,11138,"(L"]],[10717,10717],[239,239]]],[1556451659336,["GJX@GJXAIOU",[[1,10852," "]],[10852,10852],[10853,10853]]],[1556451662031,["GJX@GJXAIOU",[[1,10873," "]],[10873,10873],[10874,10874]]],[1556451668041,["GJX@GJXAIOU",[[-1,10850,"\n"]],[10850,10850],[10849,10849]]],[1556451742169,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1"],[1,8914,"从1开始"],[-1,8916,"\n"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[1,9790,"结点p指向链表第"],[1,9791,"个"],[-1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[1,9911,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[1,9913,"中"],[-1,9916,"域中，然后将新"],[1,9923,"赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10669," "],[-1,10680,"*"],[1,10681,";"],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "]],[239,239],[10872,10872]]],[1556451742169,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1"],[-1,8952,"从1开始"],[1,8958,"\n"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[-1,9781,"结点p指向链表第"],[-1,9790,"个"],[1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9793,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[-1,9932,"中"],[1,9936,"域中，然后将新"],[-1,9936,"赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11094," "],[1,11106,"*"],[-1,11106,";"],[1,11139,"* "],[-1,11139,"(L"],[-1,11276,"e"],[1,11278," "],[1,11298," "]],[10872,10872],[239,239]]],[1556451733523,["GJX@GJXAIOU",[[1,11298,"**"],[1,11322,"**"]],[11298,11322],[11298,11326]]],[1556451735689,["GJX@GJXAIOU",[[1,11328,"\n"]],[11326,11326],[11327,11327]]],[1556451736634,["GJX@GJXAIOU",[[1,11329,"\n"]],[11327,11327],[11328,11328]]],[1556451982188,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8823,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1"],[1,8914,"从1开始"],[-1,8916,"\n"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8956,"\n"],[-1,8983,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删"],[1,9552,"\n"],[-1,9555,"除操作"],[-1,9560,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[1,9790,"结点p指向链表第"],[1,9791,"个"],[-1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[1,9911,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[1,9913,"中"],[-1,9916,"域中，然后将新"],[1,9923,"赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10669," "],[-1,10680,"*"],[1,10681,";"],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "],[1,10873,"**"],[1,10897,"**\n\n"],[-1,11298,"**"],[1,11300,""],[-1,11324,"**"],[-1,11328,"\n\n"]],[239,239],[11328,11328]]],[1556451982188,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8833,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1"],[-1,8952,"从1开始"],[1,8958,"\n"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8996,"\n"],[1,9022,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删"],[-1,9551,"\n"],[1,9555,"除操作"],[1,9557,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[-1,9781,"结点p指向链表第"],[-1,9790,"个"],[1,9793,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9793,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[-1,9932,"中"],[1,9936,"域中，然后将新"],[-1,9936,"赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11094," "],[1,11106,"*"],[-1,11106,";"],[1,11139,"* "],[-1,11139,"(L"],[-1,11276,"e"],[1,11278," "],[1,11298," "],[-1,11298,"**"],[-1,11324,"**\n\n"],[1,11729,"**"],[-1,11729,""],[1,11753,"**"],[1,11755,"\n\n"]],[11328,11328],[239,239]]],[1556451923709,["GJX@GJXAIOU",[[1,11131,"\n    "]],[11126,11126],[11131,11131]]],[1556451936027,["GJX@GJXAIOU",[[1,11131,"// P是中介节点"]],[11131,11131],[11140,11140]]],[1556451937348,["GJX@GJXAIOU",[[-1,11138,"节点"]],[11140,11140],[11138,11138]]],[1556451940169,["GJX@GJXAIOU",[[1,11138,"结点"]],[11138,11138],[11140,11140]]],[1556452102187,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8822,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8957,"\n"],[-1,8982,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9720,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9722," "],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10672," "],[-1,10680,"*"],[1,10681,";"],[1,10705,"// P是中介结点\n   "],[1,10709," "],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "],[1,10873,"**"],[1,10897,"**\n\n"],[-1,11131,"// P是中介结点\n    "],[1,11145,""],[-1,11312,"**"],[1,11314,""],[-1,11338,"**"],[-1,11342,"\n\n"]],[239,239],[11342,11342]]],[1556452102187,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8832,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8997,"\n"],[1,9021,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9551,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9749," "],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11097," "],[1,11106,"*"],[-1,11106,";"],[-1,11131,"// P是中介结点\n   "],[-1,11148," "],[1,11153,"* "],[-1,11153,"(L"],[-1,11290,"e"],[1,11292," "],[1,11312," "],[-1,11312,"**"],[-1,11338,"**\n\n"],[1,11576,"// P是中介结点\n    "],[-1,11576,""],[1,11743,"**"],[-1,11743,""],[1,11767,"**"],[1,11769,"\n\n"]],[11342,11342],[239,239]]],[1556452058946,["GJX@GJXAIOU",[[1,11525," //人"]],[11525,11525],[11529,11529]]],[1556452059920,["GJX@GJXAIOU",[[-1,11528,"人"]],[11529,11529],[11528,11528]]],[1556452061541,["GJX@GJXAIOU",[[1,11528," r"]],[11528,11528],[11530,11530]]],[1556452162213,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8822,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8957,"\n"],[-1,8982,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9720,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9722," "],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10672," "],[-1,10680,"*"],[1,10681,";"],[1,10705,"// P是中介结点\n   "],[1,10709," "],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "],[1,10873,"**"],[1,10897,"**\n\n"],[-1,11080,""],[1,11080," // r"],[-1,11131,"// P是中介结点\n    "],[1,11145,""],[-1,11312,"**"],[1,11314,""],[-1,11338,"**"],[-1,11342,"\n\n"],[-1,11525," // r"],[1,11530,""]],[239,239],[11530,11530]]],[1556452162214,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8832,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8997,"\n"],[1,9021,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9551,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9749," "],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11097," "],[1,11106,"*"],[-1,11106,";"],[-1,11131,"// P是中介结点\n   "],[-1,11148," "],[1,11153,"* "],[-1,11153,"(L"],[-1,11290,"e"],[1,11292," "],[1,11312," "],[-1,11312,"**"],[-1,11338,"**\n\n"],[1,11525,""],[-1,11525," // r"],[1,11581,"// P是中介结点\n    "],[-1,11581,""],[1,11748,"**"],[-1,11748,""],[1,11772,"**"],[1,11774,"\n\n"],[1,11955," // r"],[-1,11955,""]],[11530,11530],[239,239]]],[1556452160973,["GJX@GJXAIOU",[[1,11530,"指向列表的尾部"]],[11530,11530],[11537,11537]]],[1556452222206,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8822,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8957,"\n"],[-1,8982,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9720,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9722," "],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10672," "],[-1,10680,"*"],[1,10681,";"],[1,10705,"// P是中介结点\n   "],[1,10709," "],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "],[1,10873,"**"],[1,10897,"**\n\n"],[-1,11080,""],[1,11080," // r指向列表的尾部"],[-1,11131,"// P是中介结点\n    "],[1,11145,""],[-1,11312,"**"],[1,11314,""],[-1,11338,"**"],[-1,11342,"\n\n"],[-1,11525," // r指向列表的尾部"],[1,11537,""]],[239,239],[11537,11537]]],[1556452222206,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8832,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8997,"\n"],[1,9021,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9551,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9749," "],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11097," "],[1,11106,"*"],[-1,11106,";"],[-1,11131,"// P是中介结点\n   "],[-1,11148," "],[1,11153,"* "],[-1,11153,"(L"],[-1,11290,"e"],[1,11292," "],[1,11312," "],[-1,11312,"**"],[-1,11338,"**\n\n"],[1,11525,""],[-1,11525," // r指向列表的尾部"],[1,11588,"// P是中介结点\n    "],[-1,11588,""],[1,11755,"**"],[-1,11755,""],[1,11779,"**"],[1,11781,"\n\n"],[1,11962," // r指向列表的尾部"],[-1,11962,""]],[11537,11537],[239,239]]],[1556452168030,["GJX@GJXAIOU",[[1,11538,"P是一个中介结点"]],[11538,11538],[11546,11546]]],[1556454142262,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8216,"**注：**首先没有"],[1,8226,""],[1,8641,"**注：** 首先没有"],[-1,8647," "],[1,8702," "],[-1,8712," "],[1,8742,"\n"],[-1,8752,"\n"],[1,8822,"\n"],[-1,8833,"\n"],[-1,8837,"~~~~"],[1,8841,"```c"],[-1,8847,"```c"],[1,8851,"xt ="],[-1,8874,"    \n~~~~ "],[-1,8903,"数个"],[1,8905,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8912,"=1；\n"],[1,8916,"从1开始；"],[-1,8932,"P"],[1,8933,"p"],[-1,8947,"个"],[-1,8957,"\n"],[-1,8982,"\n"],[-1,8993,"将欲删除结点p->next赋值给q；\n\n5"],[1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9019,"删除"],[1,9021,"插入刚才两个"],[-1,9025,"p->next = q->next"],[-1,9044,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9074,"7.返回成功"],[-1,9079,"\n\n\n **注：**"],[-1,9091," 1.插入"],[-1,9100,"和"],[1,9101,"\n"],[-1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9599,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9603," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9720,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9722," "],[-1,9733,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9788,"第i个数据删除节点的算法：**  \n1."],[-1,9790,"一"],[-1,9794,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9822,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9825,"向后移动，不断"],[-1,9827,"NULL，即建立"],[1,9835,"下"],[-1,9837,"带头"],[-1,9841,"的"],[1,9842,"，j累加1；\n3.若到"],[1,9844,"末尾p为空，则说明第i个元素不存在"],[-1,9846,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9923,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9925,"插到当前链表的表头上，直到结束为止"],[1,9943,"    "],[-1,9945,"**案：** 简单来说，就是把新"],[-1,10385,"加\n"],[1,10387,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10403,"\n"],[1,10406," "],[1,10426," "],[-1,10570,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10592,"\n"],[-1,10651,"* "],[1,10653,"-"],[-1,10668,"*"],[1,10672," "],[-1,10680,"*"],[1,10681,";"],[1,10705,"// P是中介结点\n   "],[1,10709," "],[-1,10713,"* "],[1,10715,"(L"],[1,10850,"e"],[-1,10851," "],[-1,10872," "],[1,10873,"**"],[1,10897,"**\n\n"],[-1,11080,""],[1,11080," // r指向列表的尾部，P是一个中介结点"],[-1,11131,"// P是中介结点\n    "],[1,11145,""],[-1,11312,"**"],[1,11314,""],[-1,11338,"**"],[-1,11342,"\n\n"],[-1,11526,"// r指向列表的尾部 P是一个中介结点"],[1,11546,""]],[239,239],[11546,11546]]],[1556454142262,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8226,"**注：**首先没有"],[-1,8226,""],[-1,8641,"**注：** 首先没有"],[1,8658," "],[-1,8712," "],[1,8723," "],[-1,8752,"\n"],[1,8763,"\n"],[-1,8832,"\n"],[1,8844,"\n"],[1,8847,"~~~~"],[-1,8847,"```c"],[1,8857,"```c"],[-1,8857,"xt ="],[1,8884,"    \n~~~~ "],[1,8903,"数个"],[-1,8903,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8952,"=1；\n"],[-1,8952,"从1开始；"],[1,8973,"P"],[-1,8973,"p"],[1,8988,"个"],[1,8997,"\n"],[1,9021,"\n"],[1,9031,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9031,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9071,"删除"],[-1,9071,"插入刚才两个"],[1,9081,"p->next = q->next"],[1,9083,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9083,"7.返回成功"],[1,9094,"\n\n\n **注：**"],[1,9096," 1.插入"],[1,9100,"和"],[-1,9100,"\n"],[1,9551,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9551,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9575," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9575,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9749," "],[1,9759,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9759,"第i个数据删除节点的算法：**  \n1."],[1,9781,"一"],[1,9784,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9784,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9821,"向后移动，不断"],[1,9830,"NULL，即建立"],[-1,9830,"下"],[1,9833,"带头"],[1,9835,"的"],[-1,9835,"，j累加1；\n3.若到"],[-1,9848,"末尾p为空，则说明第i个元素不存在"],[1,9867,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9867,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9954,"插到当前链表的表头上，直到结束为止"],[-1,9955,"    "],[1,9961,"**案：** 简单来说，就是把新"],[1,10385,"加\n"],[-1,10385,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n"],[-1,10851," "],[-1,10872," "],[1,11017,"对于插入和删除操作较为频繁使用单链表\n"],[1,11020,"\n"],[1,11078,"* "],[-1,11078,"-"],[1,11094,"*"],[-1,11097," "],[1,11106,"*"],[-1,11106,";"],[-1,11131,"// P是中介结点\n   "],[-1,11148," "],[1,11153,"* "],[-1,11153,"(L"],[-1,11290,"e"],[1,11292," "],[1,11312," "],[-1,11312,"**"],[-1,11338,"**\n\n"],[1,11525,""],[-1,11525," // r指向列表的尾部，P是一个中介结点"],[1,11597,"// P是中介结点\n    "],[-1,11597,""],[1,11764,"**"],[-1,11764,""],[1,11788,"**"],[1,11790,"\n\n"],[1,11972,"// r指向列表的尾部 P是一个中介结点"],[-1,11972,""]],[11546,11546],[239,239]]],[1556454082684,["GJX@GJXAIOU",[[-1,8053,"**"],[-1,8062,"**"]],[8053,8065],[8053,8060]]],[1556454084615,["GJX@GJXAIOU",[[1,8053,"#### "]],[8053,8060],[8067,8067]]],[1556454562333,[null,[[1,239,"\n"],[-1,242,"\n\n- **"],[1,248,"    \n"],[-1,309,"物\n"],[1,311,"\n\n- **物"],[1,318," "],[-1,323," "],[1,382,"**"],[-1,386,"的"],[1,389,"的"],[-1,393,"**"],[1,398,"数据间"],[-1,403,"数据间"],[-1,415,"\n    "],[1,426,"\n    "],[-1,432,"：将数据元一的"],[1,439,"素"],[1,441,"在"],[1,443,"的存储单元"],[-1,475,"\n\n---"],[1,566,"---\n\n"],[1,571,"二、"],[-1,576,"二、"],[1,592," "],[-1,597," "],[1,685,"* "],[-1,688,"、可* 读性、"],[1,800,"可读性\n* 健"],[-1,802,"、"],[1,806,"时"],[-1,809,"\n* "],[1,812,"高"],[1,838,"三、"],[-1,843,"三、"],[-1,871,"时间复- "],[-1,946,"度（一）："],[1,951," （一）时间复杂度"],[-1,956,"   "],[1,959,"\n"],[1,961,"**定义：**"],[-1,963,"**"],[-1,968,"**"],[1,1090," "],[-1,1092," "],[-1,1095," "],[1,1098,"* "],[-1,1103," "],[1,1163," "],[-1,1168," "],[-1,1237,"   "],[1,1242,"**分析一"],[-1,1244,"**"],[-1,1256,"  \n  "],[1,1265,"\n"],[1,1266,".用常数"],[-1,1289,"    "],[1,1294,".再修改"],[-1,1317,"    "],[1,1322,".如果最"],[-1,1366," \n"],[-1,1370,"\n  用的"],[1,1375,"- "],[1,1379,"函数调用的"],[1,1386,"**"],[-1,1391,"**"],[-1,1398,"  "],[-1,1404,"复1）"],[-1,1423,"~~~"],[1,1426,"   "],[-1,1431," "],[1,1432,"\n"],[-1,1516,"~~~\n\n"],[1,1521,"    \n(2)时间"],[-1,1537,"\n~~~\n"],[-1,1556,"  "],[1,1558,"\n`"],[1,1561,"\nfor(i"],[-1,1589,"       "],[1,1596,"{\n cout"],[-1,1607,"  "],[1,1609,"}"],[-1,1612,"~~~"],[-1,1616,"（3"],[-1,1621,"复"],[1,1623,"\n（3）时间复"],[-1,1634,"  ~~~~"],[1,1644,"\nfor(i"],[-1,1674,"       "],[1,1681,"{\nfor(i"],[-1,1708,"    {  "],[1,1715,"{\ncout<"],[-1,1729,"  "],[1,1731,"}\n}"],[-1,1734,"  ~~~~~"],[1,1745,"\n\n  **"],[-1,1798,"   "],[1,1804,"时间复"],[-1,1816,"   ~~~"],[1,1826,"\n"],[1,1828,"int"],[1,1829,"i="],[-1,1834,"    "],[1,1838,"whi"],[1,1840,"("],[-1,1847,"    \n "],[1,1853,"{\n"],[1,1859,"i*2;"],[-1,1862,"    ~~\n "],[1,1870,"}\n"],[1,1873,"\n  **P"],[-1,1906,"$$ x=l`^n $$"],[1,1918,"`x=log2^n `"],[-1,1922,"`"],[1,1923,"其时"],[1,1928,"`"],[-1,1934,"`"],[-1,1936,"。\n\n\n\n\n"],[1,1943,"。"],[-1,1945,"# #"],[1,1948," \n"],[-1,2047," "],[1,2048,"\n"],[-1,2154,"线性表"],[1,2157,"\n\n\n"],[1,2292,"## 四、线性表"],[-1,2295,"四、"],[-1,2338,"\n\n\n"],[-1,2344,"   "],[1,2351,"定义    "],[-1,2360," *  "],[1,2364,"**线"],[1,2366,"（"],[1,2396,"  "],[-1,2397," "],[-1,2402,"  若  "],[1,2407,"若将线性"],[-1,2507,"  "],[-1,2512," 线  "],[1,2516,"3.线性表元"],[-1,2562,"   \n  注"],[1,2569,"\n**注** "],[-1,2591,"  "],[-1,2595,"  "],[1,2597,"首先它是"],[-1,2624,"  "],[-1,2631," 若  "],[1,2635,"2.若元素存"],[-1,2688,"  "],[-1,2691," "],[-1,2694,"另  "],[1,2697,"3.另外，线"],[-1,2741,"\n\n\n"],[1,2747," （二）抽象"],[-1,2751,"（二）"],[1,2820,"  "],[-1,2826,"  "],[1,2935," "],[-1,2941," "],[-1,3029,"\n    \n"],[-1,3042," "],[1,3043,"\n"],[-1,3154,"A "],[1,3156,"\n\n- 常用的操"],[-1,3642,"弱"],[1,3643,"若"],[-1,3648,"若"],[1,3649,"插"],[-1,3662," ~~~~ "],[1,3672,"\n    /"],[-1,4062,"~~~~\n\n"],[1,4071,"\n\n\n"],[1,4074," (三)线性"],[-1,4078,"(三)"],[-1,4092,"- 顺序存储"],[1,4103,"顺序存储结构"],[-1,4111,"  "],[-1,4116," "],[1,4117,"概念："],[-1,4153,"  "],[-1,4158,"  "],[1,4160,"-"],[1,4162,"物理上"],[-1,4236,"  "],[-1,4241,"    "],[1,4245,"- 顺序存储"],[-1,4270,"    "],[1,4274,"存储空间"],[-1,4324,"  "],[1,4326,"表的"],[-1,4357,"  "],[1,4359,"3."],[-1,4390,"   "],[1,4393,"- 注意：\n"],[-1,4396,"- \n"],[-1,4486,"\n"],[1,4488,"\n"],[-1,4519,"  "],[-1,4523,"  "],[1,4525,"地址计算"],[1,4528,"\n"],[-1,4531,"\n"],[-1,4534,"\n "],[1,4541,"El"],[-1,4654,"  "],[1,4660,"对于"],[1,4741,"**"],[-1,4755,"**"],[-1,4777,"  "],[1,4783,"元素"],[-1,4871,"    \n "],[1,4881,"c"],[-1,4882,"`"],[1,5261,"`"],[-1,5262,"   "],[-1,5272,"-"],[-1,5274,"插入："],[-1,5284," \n"],[1,5286,"- 插入操作： "],[-1,5441," "],[1,5442,"\n"],[1,5444,"ListIns"],[-1,5481,"     \n "],[1,6076,"**PS：**"],[-1,6093,"  "],[1,6099,"操作"],[-1,6207,"   \n   "],[1,6214,""],[-1,6696,""],[1,6696,"       "],[-1,6717,"    "],[-1,6723," \n"],[1,6725,"总结"],[1,6728,"\n"],[1,6730,"-"],[1,6732,"点："],[-1,6786,"   "],[1,6789,"- 缺"],[-1,6860,"\n- 链式存储"],[-1,6870,"结"],[1,6871,"\n"],[1,6877,"链式存储结构"],[1,6884," \n"],[-1,6889,"\n"],[-1,6917,"\n"],[1,6922,"\n"],[1,7083,"数据域和指针域"],[-1,7093,"和指针域"],[1,7284," "],[-1,7294," "],[-1,7313,"\n   "],[1,7320," **概"],[-1,7638,"\n![单链表中的头结"],[1,7686,"\n![单链表中的头结"],[-1,7818,"**注：** 头指针"],[1,8000,"**注：**  头指针"],[-1,8003,"："],[1,8004,"结"],[-1,8007," "],[-1,8043,"**"],[1,8045,"#### "],[-1,8052,"*####"],[1,8065,"i个"],[-1,8217,"**注：**首先没有"],[1,8227,""],[1,8642,"**注：** 首先没有"],[-1,8648," "],[1,8703," "],[-1,8713," "],[1,8743,"\n"],[-1,8753,"\n"],[1,8823,"\n"],[-1,8834,"\n"],[-1,8838,"~~~~"],[1,8842,"```c"],[-1,8848,"```c"],[1,8852,"xt ="],[-1,8875,"    \n~~~~ "],[-1,8904,"数个"],[1,8906,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8913,"=1；\n"],[1,8917,"从1开始；"],[-1,8933,"P"],[1,8934,"p"],[-1,8948,"个"],[-1,8958,"\n"],[-1,8983,"\n"],[-1,8994,"将欲删除结点p->next赋值给q；\n\n5"],[1,9015,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9020,"删除"],[1,9022,"插入刚才两个"],[-1,9026,"p->next = q->next"],[-1,9045,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9075,"7.返回成功"],[-1,9080,"\n\n\n **注：**"],[-1,9092," 1.插入"],[-1,9101,"和"],[1,9102,"\n"],[-1,9552,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9600,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9604," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9723," "],[-1,9734,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9789,"第i个数据删除节点的算法：**  \n1."],[-1,9791,"一"],[-1,9795,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9823,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9826,"向后移动，不断"],[-1,9828,"NULL，即建立"],[1,9836,"下"],[-1,9838,"带头"],[-1,9842,"的"],[1,9843,"，j累加1；\n3.若到"],[1,9845,"末尾p为空，则说明第i个元素不存在"],[-1,9847,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9924,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9926,"插到当前链表的表头上，直到结束为止"],[1,9944,"    "],[-1,9946,"**案：** 简单来说，就是把新"],[-1,10386,"加\n"],[1,10388,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10404,"\n"],[1,10407," "],[1,10427," "],[-1,10571,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10593,"\n"],[-1,10652,"* "],[1,10654,"-"],[-1,10669,"*"],[1,10673," "],[-1,10681,"*"],[1,10682,";"],[1,10706,"// P是中介结点\n   "],[1,10710," "],[-1,10714,"* "],[1,10716,"(L"],[1,10851,"e"],[-1,10852," "],[-1,10873," "],[1,10874,"**"],[1,10898,"**\n\n"],[-1,11081,""],[1,11081," // r指向列表的尾部，P是一个中介结点"],[-1,11132,"// P是中介结点\n    "],[1,11146,""],[-1,11313,"**"],[1,11315,""],[-1,11339,"**"],[-1,11343,"\n\n"],[-1,11527,"// r指向列表的尾部 P是一个中介结点"],[1,11547,""]],[239,239],[11547,11547]]],[1556454562333,[null,[[-1,239,"\n"],[1,243,"\n\n- **"],[-1,243,"    \n"],[1,309,"物\n"],[-1,309,"\n\n- **物"],[-1,323," "],[1,329," "],[-1,387,"**"],[1,393,"的"],[-1,395,"的"],[1,400,"**"],[-1,403,"数据间"],[1,411,"数据间"],[1,420,"\n    "],[-1,426,"\n    "],[1,437,"：将数据元一的"],[-1,437,"素"],[-1,440,"在"],[-1,443,"的存储单元"],[1,480,"\n\n---"],[-1,566,"---\n\n"],[-1,576,"二、"],[1,583,"二、"],[-1,597," "],[1,603," "],[-1,690,"* "],[1,695,"、可* 读性、"],[-1,800,"可读性\n* 健"],[1,809,"、"],[-1,812,"时"],[1,816,"\n* "],[-1,816,"高"],[-1,843,"三、"],[1,850,"三、"],[1,876,"时间复- "],[1,946,"度（一）："],[-1,946," （一）时间复杂度"],[1,960,"   "],[-1,960,"\n"],[-1,963,"**定义：**"],[1,972,"**"],[1,975,"**"],[-1,1095," "],[1,1098," "],[1,1100," "],[-1,1102,"* "],[1,1109," "],[-1,1168," "],[1,1174," "],[1,1242,"   "],[-1,1244,"**分析一"],[1,1251,"**"],[1,1261,"  \n  "],[-1,1265,"\n"],[-1,1267,".用常数"],[1,1294,"    "],[-1,1295,".再修改"],[1,1322,"    "],[-1,1323,".如果最"],[1,1371," \n"],[1,1373,"\n  用的"],[-1,1373,"- "],[-1,1379,"函数调用的"],[-1,1391,"**"],[1,1398,"**"],[1,1403,"  "],[1,1407,"复1）"],[1,1423,"~~~"],[-1,1423,"   "],[1,1431," "],[-1,1431,"\n"],[1,1516,"~~~\n\n"],[-1,1516,"    \n(2)时间"],[1,1542,"\n~~~\n"],[1,1556,"  "],[-1,1556,"\n`"],[-1,1561,"\nfor(i"],[1,1595,"       "],[-1,1595,"{\n cout"],[1,1613,"  "],[-1,1613,"}"],[1,1617,"~~~"],[1,1618,"（3"],[1,1621,"复"],[-1,1622,"\n（3）时间复"],[1,1640,"  ~~~~"],[-1,1644,"\nfor(i"],[1,1680,"       "],[-1,1680,"{\nfor(i"],[1,1714,"    {  "],[-1,1714,"{\ncout<"],[1,1735,"  "],[-1,1735,"}\n}"],[1,1741,"  ~~~~~"],[-1,1745,"\n\n  **"],[1,1804,"   "],[-1,1807,"时间复"],[1,1822,"   ~~~"],[-1,1826,"\n"],[-1,1829,"int"],[-1,1833,"i="],[1,1840,"    "],[-1,1840,"whi"],[-1,1845,"("],[1,1853,"    \n "],[-1,1853,"{\n"],[-1,1861,"i*2;"],[1,1868,"    ~~\n "],[-1,1868,"}\n"],[-1,1873,"\n  **P"],[1,1912,"$$ x=l`^n $$"],[-1,1912,"`x=log2^n `"],[1,1927,"`"],[-1,1927,"其时"],[-1,1934,"`"],[1,1941,"`"],[1,1942,"。\n\n\n\n\n"],[-1,1943,"。"],[1,1946,"# #"],[-1,1946," \n"],[1,2047," "],[-1,2047,"\n"],[1,2154,"线性表"],[-1,2154,"\n\n\n"],[-1,2292,"## 四、线性表"],[1,2303,"四、"],[1,2344,"\n\n\n"],[1,2347,"   "],[-1,2351,"定义    "],[1,2366," *  "],[-1,2366,"**线"],[-1,2371,"（"],[-1,2402,"  "],[1,2405," "],[1,2409,"  若  "],[-1,2409,"若将线性"],[1,2513,"  "],[1,2516," 线  "],[-1,2516,"3.线性表元"],[1,2568,"   \n  注"],[-1,2568,"\n**注** "],[1,2597,"  "],[1,2599,"  "],[-1,2599,"首先它是"],[1,2630,"  "],[1,2635," 若  "],[-1,2635,"2.若元素存"],[1,2694,"  "],[1,2695," "],[1,2697,"另  "],[-1,2697,"3.另外，线"],[1,2747,"\n\n\n"],[-1,2750," （二）抽象"],[1,2760,"（二）"],[-1,2826,"  "],[1,2834,"  "],[-1,2941," "],[1,2948," "],[1,3035,"\n    \n"],[1,3042," "],[-1,3042,"\n"],[1,3154,"A "],[-1,3154,"\n\n- 常用的操"],[1,3648,"弱"],[-1,3648,"若"],[1,3654,"若"],[-1,3654,"插"],[1,3668," ~~~~ "],[-1,3672,"\n    /"],[1,4068,"~~~~\n\n"],[-1,4071,"\n\n\n"],[-1,4077," (三)线性"],[1,4087,"(三)"],[1,4098,"- 顺序存储"],[-1,4103,"顺序存储结构"],[1,4117,"  "],[1,4120," "],[-1,4120,"概念："],[1,4159,"  "],[1,4162,"  "],[-1,4162,"-"],[-1,4165,"物理上"],[1,4242,"  "],[1,4245,"    "],[-1,4245,"- 顺序存储"],[1,4276,"    "],[-1,4276,"存储空间"],[1,4330,"  "],[-1,4330,"表的"],[1,4363,"  "],[-1,4363,"3."],[1,4396,"   "],[-1,4396,"- 注意：\n"],[1,4405,"- \n"],[1,4492,"\n"],[-1,4493,"\n"],[1,4525,"  "],[1,4527,"  "],[-1,4527,"地址计算"],[-1,4534,"\n"],[1,4538,"\n"],[1,4540,"\n "],[-1,4545,"El"],[1,4660,"  "],[-1,4664,"对于"],[-1,4747,"**"],[1,4763,"**"],[1,4783,"  "],[-1,4787,"元素"],[1,4877,"    \n "],[-1,4881,"c"],[1,4883,"`"],[-1,5261,"`"],[1,5263,"   "],[1,5270,"-"],[1,5271,"插入："],[1,5278," \n"],[-1,5278,"- 插入操作： "],[1,5441," "],[-1,5441,"\n"],[-1,5444,"ListIns"],[1,5488,"     \n "],[-1,6076,"**PS：**"],[1,6100,"  "],[-1,6104,"操作"],[1,6214,"   \n   "],[-1,6214,""],[1,6696,""],[-1,6696,"       "],[1,6724,"    "],[1,6726," \n"],[-1,6726,"总结"],[-1,6731,"\n"],[-1,6734,"-"],[-1,6737,"点："],[1,6793,"   "],[-1,6793,"- 缺"],[1,6867,"\n- 链式存储"],[1,6870,"结"],[-1,6870,"\n"],[-1,6877,"链式存储结构"],[-1,6890," \n"],[1,6897,"\n"],[1,6924,"\n"],[-1,6928,"\n"],[-1,7090,"数据域和指针域"],[1,7107,"和指针域"],[-1,7294," "],[1,7305," "],[1,7323,"\n   "],[-1,7326," **概"],[1,7648,"\n![单链表中的头结"],[-1,7686,"\n![单链表中的头结"],[1,7828,"**注：** 头指针"],[-1,8000,"**注：**  头指针"],[1,8014,"："],[-1,8014,"结"],[1,8018," "],[1,8053,"**"],[-1,8053,"#### "],[1,8065,"*####"],[-1,8073,"i个"],[1,8227,"**注：**首先没有"],[-1,8227,""],[-1,8642,"**注：** 首先没有"],[1,8659," "],[-1,8713," "],[1,8724," "],[-1,8753,"\n"],[1,8764,"\n"],[-1,8833,"\n"],[1,8845,"\n"],[1,8848,"~~~~"],[-1,8848,"```c"],[1,8858,"```c"],[-1,8858,"xt ="],[1,8885,"    \n~~~~ "],[1,8904,"数个"],[-1,8904,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8953,"=1；\n"],[-1,8953,"从1开始；"],[1,8974,"P"],[-1,8974,"p"],[1,8989,"个"],[1,8998,"\n"],[1,9022,"\n"],[1,9032,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9032,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9072,"删除"],[-1,9072,"插入刚才两个"],[1,9082,"p->next = q->next"],[1,9084,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9084,"7.返回成功"],[1,9095,"\n\n\n **注：**"],[1,9097," 1.插入"],[1,9101,"和"],[-1,9101,"\n"],[1,9552,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9552,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9576," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9576,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9750," "],[1,9760,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9760,"第i个数据删除节点的算法：**  \n1."],[1,9782,"一"],[1,9785,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9785,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9822,"向后移动，不断"],[1,9831,"NULL，即建立"],[-1,9831,"下"],[1,9834,"带头"],[1,9836,"的"],[-1,9836,"，j累加1；\n3.若到"],[-1,9849,"末尾p为空，则说明第i个元素不存在"],[1,9868,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9868,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9955,"插到当前链表的表头上，直到结束为止"],[-1,9956,"    "],[1,9962,"**案：** 简单来说，就是把新"],[1,10386,"加\n"],[-1,10386,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10850,"\n"],[-1,10852," "],[-1,10873," "],[1,11018,"对于插入和删除操作较为频繁使用单链表\n"],[1,11021,"\n"],[1,11079,"* "],[-1,11079,"-"],[1,11095,"*"],[-1,11098," "],[1,11107,"*"],[-1,11107,";"],[-1,11132,"// P是中介结点\n   "],[-1,11149," "],[1,11154,"* "],[-1,11154,"(L"],[-1,11291,"e"],[1,11293," "],[1,11313," "],[-1,11313,"**"],[-1,11339,"**\n\n"],[1,11526,""],[-1,11526," // r指向列表的尾部，P是一个中介结点"],[1,11598,"// P是中介结点\n    "],[-1,11598,""],[1,11765,"**"],[-1,11765,""],[1,11789,"**"],[1,11791,"\n\n"],[1,11973,"// r指向列表的尾部 P是一个中介结点"],[-1,11973,""]],[11547,11547],[239,239]]],[1556454511452,["GJX@GJXAIOU",[[1,34,"@toc"]],[34,34],[38,38]]],[1556454513078,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1556454622332,[null,[[1,244,"\n"],[-1,247,"\n\n- **"],[1,253,"    \n"],[-1,314,"物\n"],[1,316,"\n\n- **物"],[1,323," "],[-1,328," "],[1,387,"**"],[-1,391,"的"],[1,394,"的"],[-1,398,"**"],[1,403,"数据间"],[-1,408,"数据间"],[-1,420,"\n    "],[1,431,"\n    "],[-1,437,"：将数据元一的"],[1,444,"素"],[1,446,"在"],[1,448,"的存储单元"],[-1,480,"\n\n---"],[1,571,"---\n\n"],[1,576,"二、"],[-1,581,"二、"],[1,597," "],[-1,602," "],[1,690,"* "],[-1,693,"、可* 读性、"],[1,805,"可读性\n* 健"],[-1,807,"、"],[1,811,"时"],[-1,814,"\n* "],[1,817,"高"],[1,843,"三、"],[-1,848,"三、"],[-1,876,"时间复- "],[-1,951,"度（一）："],[1,956," （一）时间复杂度"],[-1,961,"   "],[1,964,"\n"],[1,966,"**定义：**"],[-1,968,"**"],[-1,973,"**"],[1,1095," "],[-1,1097," "],[-1,1100," "],[1,1103,"* "],[-1,1108," "],[1,1168," "],[-1,1173," "],[-1,1242,"   "],[1,1247,"**分析一"],[-1,1249,"**"],[-1,1261,"  \n  "],[1,1270,"\n"],[1,1271,".用常数"],[-1,1294,"    "],[1,1299,".再修改"],[-1,1322,"    "],[1,1327,".如果最"],[-1,1371," \n"],[-1,1375,"\n  用的"],[1,1380,"- "],[1,1384,"函数调用的"],[1,1391,"**"],[-1,1396,"**"],[-1,1403,"  "],[-1,1409,"复1）"],[-1,1428,"~~~"],[1,1431,"   "],[-1,1436," "],[1,1437,"\n"],[-1,1521,"~~~\n\n"],[1,1526,"    \n(2)时间"],[-1,1542,"\n~~~\n"],[-1,1561,"  "],[1,1563,"\n`"],[1,1566,"\nfor(i"],[-1,1594,"       "],[1,1601,"{\n cout"],[-1,1612,"  "],[1,1614,"}"],[-1,1617,"~~~"],[-1,1621,"（3"],[-1,1626,"复"],[1,1628,"\n（3）时间复"],[-1,1639,"  ~~~~"],[1,1649,"\nfor(i"],[-1,1679,"       "],[1,1686,"{\nfor(i"],[-1,1713,"    {  "],[1,1720,"{\ncout<"],[-1,1734,"  "],[1,1736,"}\n}"],[-1,1739,"  ~~~~~"],[1,1750,"\n\n  **"],[-1,1803,"   "],[1,1809,"时间复"],[-1,1821,"   ~~~"],[1,1831,"\n"],[1,1833,"int"],[1,1834,"i="],[-1,1839,"    "],[1,1843,"whi"],[1,1845,"("],[-1,1852,"    \n "],[1,1858,"{\n"],[1,1864,"i*2;"],[-1,1867,"    ~~\n "],[1,1875,"}\n"],[1,1878,"\n  **P"],[-1,1911,"$$ x=l`^n $$"],[1,1923,"`x=log2^n `"],[-1,1927,"`"],[1,1928,"其时"],[1,1933,"`"],[-1,1939,"`"],[-1,1941,"。\n\n\n\n\n"],[1,1948,"。"],[-1,1950,"# #"],[1,1953," \n"],[-1,2052," "],[1,2053,"\n"],[-1,2159,"线性表"],[1,2162,"\n\n\n"],[1,2297,"## 四、线性表"],[-1,2300,"四、"],[-1,2343,"\n\n\n"],[-1,2349,"   "],[1,2356,"定义    "],[-1,2365," *  "],[1,2369,"**线"],[1,2371,"（"],[1,2401,"  "],[-1,2402," "],[-1,2407,"  若  "],[1,2412,"若将线性"],[-1,2512,"  "],[-1,2517," 线  "],[1,2521,"3.线性表元"],[-1,2567,"   \n  注"],[1,2574,"\n**注** "],[-1,2596,"  "],[-1,2600,"  "],[1,2602,"首先它是"],[-1,2629,"  "],[-1,2636," 若  "],[1,2640,"2.若元素存"],[-1,2693,"  "],[-1,2696," "],[-1,2699,"另  "],[1,2702,"3.另外，线"],[-1,2746,"\n\n\n"],[1,2752," （二）抽象"],[-1,2756,"（二）"],[1,2825,"  "],[-1,2831,"  "],[1,2940," "],[-1,2946," "],[-1,3034,"\n    \n"],[-1,3047," "],[1,3048,"\n"],[-1,3159,"A "],[1,3161,"\n\n- 常用的操"],[-1,3647,"弱"],[1,3648,"若"],[-1,3653,"若"],[1,3654,"插"],[-1,3667," ~~~~ "],[1,3677,"\n    /"],[-1,4067,"~~~~\n\n"],[1,4076,"\n\n\n"],[1,4079," (三)线性"],[-1,4083,"(三)"],[-1,4097,"- 顺序存储"],[1,4108,"顺序存储结构"],[-1,4116,"  "],[-1,4121," "],[1,4122,"概念："],[-1,4158,"  "],[-1,4163,"  "],[1,4165,"-"],[1,4167,"物理上"],[-1,4241,"  "],[-1,4246,"    "],[1,4250,"- 顺序存储"],[-1,4275,"    "],[1,4279,"存储空间"],[-1,4329,"  "],[1,4331,"表的"],[-1,4362,"  "],[1,4364,"3."],[-1,4395,"   "],[1,4398,"- 注意：\n"],[-1,4401,"- \n"],[-1,4491,"\n"],[1,4493,"\n"],[-1,4524,"  "],[-1,4528,"  "],[1,4530,"地址计算"],[1,4533,"\n"],[-1,4536,"\n"],[-1,4539,"\n "],[1,4546,"El"],[-1,4659,"  "],[1,4665,"对于"],[1,4746,"**"],[-1,4760,"**"],[-1,4782,"  "],[1,4788,"元素"],[-1,4876,"    \n "],[1,4886,"c"],[-1,4887,"`"],[1,5266,"`"],[-1,5267,"   "],[-1,5277,"-"],[-1,5279,"插入："],[-1,5289," \n"],[1,5291,"- 插入操作： "],[-1,5446," "],[1,5447,"\n"],[1,5449,"ListIns"],[-1,5486,"     \n "],[1,6081,"**PS：**"],[-1,6098,"  "],[1,6104,"操作"],[-1,6212,"   \n   "],[1,6219,""],[-1,6701,""],[1,6701,"       "],[-1,6722,"    "],[-1,6728," \n"],[1,6730,"总结"],[1,6733,"\n"],[1,6735,"-"],[1,6737,"点："],[-1,6791,"   "],[1,6794,"- 缺"],[-1,6865,"\n- 链式存储"],[-1,6875,"结"],[1,6876,"\n"],[1,6882,"链式存储结构"],[1,6889," \n"],[-1,6894,"\n"],[-1,6922,"\n"],[1,6927,"\n"],[1,7088,"数据域和指针域"],[-1,7098,"和指针域"],[1,7289," "],[-1,7299," "],[-1,7318,"\n   "],[1,7325," **概"],[-1,7643,"\n![单链表中的头结"],[1,7691,"\n![单链表中的头结"],[-1,7823,"**注：** 头指针"],[1,8005,"**注：**  头指针"],[-1,8008,"："],[1,8009,"结"],[-1,8012," "],[-1,8048,"**"],[1,8050,"#### "],[-1,8057,"*####"],[1,8070,"i个"],[-1,8222,"**注：**首先没有"],[1,8232,""],[1,8647,"**注：** 首先没有"],[-1,8653," "],[1,8708," "],[-1,8718," "],[1,8748,"\n"],[-1,8758,"\n"],[1,8828,"\n"],[-1,8839,"\n"],[-1,8843,"~~~~"],[1,8847,"```c"],[-1,8853,"```c"],[1,8857,"xt ="],[-1,8880,"    \n~~~~ "],[-1,8909,"数个"],[1,8911,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8918,"=1；\n"],[1,8922,"从1开始；"],[-1,8938,"P"],[1,8939,"p"],[-1,8953,"个"],[-1,8963,"\n"],[-1,8988,"\n"],[-1,8999,"将欲删除结点p->next赋值给q；\n\n5"],[1,9020,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9025,"删除"],[1,9027,"插入刚才两个"],[-1,9031,"p->next = q->next"],[-1,9050,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9080,"7.返回成功"],[-1,9085,"\n\n\n **注：**"],[-1,9097," 1.插入"],[-1,9106,"和"],[1,9107,"\n"],[-1,9557,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9605,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9609," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9726,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9728," "],[-1,9739,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9794,"第i个数据删除节点的算法：**  \n1."],[-1,9796,"一"],[-1,9800,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9828,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9831,"向后移动，不断"],[-1,9833,"NULL，即建立"],[1,9841,"下"],[-1,9843,"带头"],[-1,9847,"的"],[1,9848,"，j累加1；\n3.若到"],[1,9850,"末尾p为空，则说明第i个元素不存在"],[-1,9852,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9929,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9931,"插到当前链表的表头上，直到结束为止"],[1,9949,"    "],[-1,9951,"**案：** 简单来说，就是把新"],[-1,10391,"加\n"],[1,10393,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10409,"\n"],[1,10412," "],[1,10432," "],[-1,10576,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10598,"\n"],[-1,10657,"* "],[1,10659,"-"],[-1,10674,"*"],[1,10678," "],[-1,10686,"*"],[1,10687,";"],[1,10711,"// P是中介结点\n   "],[1,10715," "],[-1,10719,"* "],[1,10721,"(L"],[1,10856,"e"],[-1,10857," "],[-1,10878," "],[1,10879,"**"],[1,10903,"**\n\n"],[-1,11086,""],[1,11086," // r指向列表的尾部，P是一个中介结点"],[-1,11137,"// P是中介结点\n    "],[1,11151,""],[-1,11318,"**"],[1,11320,""],[-1,11344,"**"],[-1,11348,"\n\n"],[-1,11532,"// r指向列表的尾部 P是一个中介结点"],[1,11552,""]],[244,244],[11552,11552]]],[1556454622332,[null,[[-1,244,"\n"],[1,248,"\n\n- **"],[-1,248,"    \n"],[1,314,"物\n"],[-1,314,"\n\n- **物"],[-1,328," "],[1,334," "],[-1,392,"**"],[1,398,"的"],[-1,400,"的"],[1,405,"**"],[-1,408,"数据间"],[1,416,"数据间"],[1,425,"\n    "],[-1,431,"\n    "],[1,442,"：将数据元一的"],[-1,442,"素"],[-1,445,"在"],[-1,448,"的存储单元"],[1,485,"\n\n---"],[-1,571,"---\n\n"],[-1,581,"二、"],[1,588,"二、"],[-1,602," "],[1,608," "],[-1,695,"* "],[1,700,"、可* 读性、"],[-1,805,"可读性\n* 健"],[1,814,"、"],[-1,817,"时"],[1,821,"\n* "],[-1,821,"高"],[-1,848,"三、"],[1,855,"三、"],[1,881,"时间复- "],[1,951,"度（一）："],[-1,951," （一）时间复杂度"],[1,965,"   "],[-1,965,"\n"],[-1,968,"**定义：**"],[1,977,"**"],[1,980,"**"],[-1,1100," "],[1,1103," "],[1,1105," "],[-1,1107,"* "],[1,1114," "],[-1,1173," "],[1,1179," "],[1,1247,"   "],[-1,1249,"**分析一"],[1,1256,"**"],[1,1266,"  \n  "],[-1,1270,"\n"],[-1,1272,".用常数"],[1,1299,"    "],[-1,1300,".再修改"],[1,1327,"    "],[-1,1328,".如果最"],[1,1376," \n"],[1,1378,"\n  用的"],[-1,1378,"- "],[-1,1384,"函数调用的"],[-1,1396,"**"],[1,1403,"**"],[1,1408,"  "],[1,1412,"复1）"],[1,1428,"~~~"],[-1,1428,"   "],[1,1436," "],[-1,1436,"\n"],[1,1521,"~~~\n\n"],[-1,1521,"    \n(2)时间"],[1,1547,"\n~~~\n"],[1,1561,"  "],[-1,1561,"\n`"],[-1,1566,"\nfor(i"],[1,1600,"       "],[-1,1600,"{\n cout"],[1,1618,"  "],[-1,1618,"}"],[1,1622,"~~~"],[1,1623,"（3"],[1,1626,"复"],[-1,1627,"\n（3）时间复"],[1,1645,"  ~~~~"],[-1,1649,"\nfor(i"],[1,1685,"       "],[-1,1685,"{\nfor(i"],[1,1719,"    {  "],[-1,1719,"{\ncout<"],[1,1740,"  "],[-1,1740,"}\n}"],[1,1746,"  ~~~~~"],[-1,1750,"\n\n  **"],[1,1809,"   "],[-1,1812,"时间复"],[1,1827,"   ~~~"],[-1,1831,"\n"],[-1,1834,"int"],[-1,1838,"i="],[1,1845,"    "],[-1,1845,"whi"],[-1,1850,"("],[1,1858,"    \n "],[-1,1858,"{\n"],[-1,1866,"i*2;"],[1,1873,"    ~~\n "],[-1,1873,"}\n"],[-1,1878,"\n  **P"],[1,1917,"$$ x=l`^n $$"],[-1,1917,"`x=log2^n `"],[1,1932,"`"],[-1,1932,"其时"],[-1,1939,"`"],[1,1946,"`"],[1,1947,"。\n\n\n\n\n"],[-1,1948,"。"],[1,1951,"# #"],[-1,1951," \n"],[1,2052," "],[-1,2052,"\n"],[1,2159,"线性表"],[-1,2159,"\n\n\n"],[-1,2297,"## 四、线性表"],[1,2308,"四、"],[1,2349,"\n\n\n"],[1,2352,"   "],[-1,2356,"定义    "],[1,2371," *  "],[-1,2371,"**线"],[-1,2376,"（"],[-1,2407,"  "],[1,2410," "],[1,2414,"  若  "],[-1,2414,"若将线性"],[1,2518,"  "],[1,2521," 线  "],[-1,2521,"3.线性表元"],[1,2573,"   \n  注"],[-1,2573,"\n**注** "],[1,2602,"  "],[1,2604,"  "],[-1,2604,"首先它是"],[1,2635,"  "],[1,2640," 若  "],[-1,2640,"2.若元素存"],[1,2699,"  "],[1,2700," "],[1,2702,"另  "],[-1,2702,"3.另外，线"],[1,2752,"\n\n\n"],[-1,2755," （二）抽象"],[1,2765,"（二）"],[-1,2831,"  "],[1,2839,"  "],[-1,2946," "],[1,2953," "],[1,3040,"\n    \n"],[1,3047," "],[-1,3047,"\n"],[1,3159,"A "],[-1,3159,"\n\n- 常用的操"],[1,3653,"弱"],[-1,3653,"若"],[1,3659,"若"],[-1,3659,"插"],[1,3673," ~~~~ "],[-1,3677,"\n    /"],[1,4073,"~~~~\n\n"],[-1,4076,"\n\n\n"],[-1,4082," (三)线性"],[1,4092,"(三)"],[1,4103,"- 顺序存储"],[-1,4108,"顺序存储结构"],[1,4122,"  "],[1,4125," "],[-1,4125,"概念："],[1,4164,"  "],[1,4167,"  "],[-1,4167,"-"],[-1,4170,"物理上"],[1,4247,"  "],[1,4250,"    "],[-1,4250,"- 顺序存储"],[1,4281,"    "],[-1,4281,"存储空间"],[1,4335,"  "],[-1,4335,"表的"],[1,4368,"  "],[-1,4368,"3."],[1,4401,"   "],[-1,4401,"- 注意：\n"],[1,4410,"- \n"],[1,4497,"\n"],[-1,4498,"\n"],[1,4530,"  "],[1,4532,"  "],[-1,4532,"地址计算"],[-1,4539,"\n"],[1,4543,"\n"],[1,4545,"\n "],[-1,4550,"El"],[1,4665,"  "],[-1,4669,"对于"],[-1,4752,"**"],[1,4768,"**"],[1,4788,"  "],[-1,4792,"元素"],[1,4882,"    \n "],[-1,4886,"c"],[1,4888,"`"],[-1,5266,"`"],[1,5268,"   "],[1,5275,"-"],[1,5276,"插入："],[1,5283," \n"],[-1,5283,"- 插入操作： "],[1,5446," "],[-1,5446,"\n"],[-1,5449,"ListIns"],[1,5493,"     \n "],[-1,6081,"**PS：**"],[1,6105,"  "],[-1,6109,"操作"],[1,6219,"   \n   "],[-1,6219,""],[1,6701,""],[-1,6701,"       "],[1,6729,"    "],[1,6731," \n"],[-1,6731,"总结"],[-1,6736,"\n"],[-1,6739,"-"],[-1,6742,"点："],[1,6798,"   "],[-1,6798,"- 缺"],[1,6872,"\n- 链式存储"],[1,6875,"结"],[-1,6875,"\n"],[-1,6882,"链式存储结构"],[-1,6895," \n"],[1,6902,"\n"],[1,6929,"\n"],[-1,6933,"\n"],[-1,7095,"数据域和指针域"],[1,7112,"和指针域"],[-1,7299," "],[1,7310," "],[1,7328,"\n   "],[-1,7331," **概"],[1,7653,"\n![单链表中的头结"],[-1,7691,"\n![单链表中的头结"],[1,7833,"**注：** 头指针"],[-1,8005,"**注：**  头指针"],[1,8019,"："],[-1,8019,"结"],[1,8023," "],[1,8058,"**"],[-1,8058,"#### "],[1,8070,"*####"],[-1,8078,"i个"],[1,8232,"**注：**首先没有"],[-1,8232,""],[-1,8647,"**注：** 首先没有"],[1,8664," "],[-1,8718," "],[1,8729," "],[-1,8758,"\n"],[1,8769,"\n"],[-1,8838,"\n"],[1,8850,"\n"],[1,8853,"~~~~"],[-1,8853,"```c"],[1,8863,"```c"],[-1,8863,"xt ="],[1,8890,"    \n~~~~ "],[1,8909,"数个"],[-1,8909,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8958,"=1；\n"],[-1,8958,"从1开始；"],[1,8979,"P"],[-1,8979,"p"],[1,8994,"个"],[1,9003,"\n"],[1,9027,"\n"],[1,9037,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9037,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9077,"删除"],[-1,9077,"插入刚才两个"],[1,9087,"p->next = q->next"],[1,9089,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9089,"7.返回成功"],[1,9100,"\n\n\n **注：**"],[1,9102," 1.插入"],[1,9106,"和"],[-1,9106,"\n"],[1,9557,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9557,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9581," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9581,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9755," "],[1,9765,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9765,"第i个数据删除节点的算法：**  \n1."],[1,9787,"一"],[1,9790,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9790,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9827,"向后移动，不断"],[1,9836,"NULL，即建立"],[-1,9836,"下"],[1,9839,"带头"],[1,9841,"的"],[-1,9841,"，j累加1；\n3.若到"],[-1,9854,"末尾p为空，则说明第i个元素不存在"],[1,9873,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9873,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9960,"插到当前链表的表头上，直到结束为止"],[-1,9961,"    "],[1,9967,"**案：** 简单来说，就是把新"],[1,10391,"加\n"],[-1,10391,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10855,"\n"],[-1,10857," "],[-1,10878," "],[1,11023,"对于插入和删除操作较为频繁使用单链表\n"],[1,11026,"\n"],[1,11084,"* "],[-1,11084,"-"],[1,11100,"*"],[-1,11103," "],[1,11112,"*"],[-1,11112,";"],[-1,11137,"// P是中介结点\n   "],[-1,11154," "],[1,11159,"* "],[-1,11159,"(L"],[-1,11296,"e"],[1,11298," "],[1,11318," "],[-1,11318,"**"],[-1,11344,"**\n\n"],[1,11531,""],[-1,11531," // r指向列表的尾部，P是一个中介结点"],[1,11603,"// P是中介结点\n    "],[-1,11603,""],[1,11770,"**"],[-1,11770,""],[1,11794,"**"],[1,11796,"\n\n"],[1,11978,"// r指向列表的尾部 P是一个中介结点"],[-1,11978,""]],[11552,11552],[244,244]]],[1556454599028,["GJX@GJXAIOU",[[-1,52,"#"]],[51,51],[69,69]]],[1556454604793,["GJX@GJXAIOU",[[-1,40,"# 数据结构与算法"]],[40,49],[40,40]]],[1556454609126,["GJX@GJXAIOU",[[-1,569,"#"]],[570,570],[580,580]]],[1556454610941,["GJX@GJXAIOU",[[-1,835,"#"]],[836,836],[865,865]]],[1556454613458,["GJX@GJXAIOU",[[-1,937,"#"]],[937,937],[951,951]]],[1556454619754,["GJX@GJXAIOU",[[-1,2151,"#"]],[2152,2152],[2160,2160]]],[1556454682327,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度（一）："],[1,943," （一）时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"## 四、线性表"],[-1,2286,"四、"],[-1,2329,"\n\n\n"],[-1,2335,"   "],[1,2342,"定义    "],[-1,2351," *  "],[1,2355,"**线"],[1,2357,"（"],[1,2387,"  "],[-1,2388," "],[-1,2393,"  若  "],[1,2398,"若将线性"],[-1,2498,"  "],[-1,2503," 线  "],[1,2507,"3.线性表元"],[-1,2553,"   \n  注"],[1,2560,"\n**注** "],[-1,2582,"  "],[-1,2586,"  "],[1,2588,"首先它是"],[-1,2615,"  "],[-1,2622," 若  "],[1,2626,"2.若元素存"],[-1,2679,"  "],[-1,2682," "],[-1,2685,"另  "],[1,2688,"3.另外，线"],[-1,2732,"\n\n\n"],[1,2738," （二）抽象"],[-1,2742,"（二）"],[1,2811,"  "],[-1,2817,"  "],[1,2926," "],[-1,2932," "],[-1,3020,"\n    \n"],[-1,3033," "],[1,3034,"\n"],[-1,3145,"A "],[1,3147,"\n\n- 常用的操"],[-1,3633,"弱"],[1,3634,"若"],[-1,3639,"若"],[1,3640,"插"],[-1,3653," ~~~~ "],[1,3663,"\n    /"],[-1,4053,"~~~~\n\n"],[1,4062,"\n\n\n"],[1,4065," (三)线性"],[-1,4069,"(三)"],[-1,4083,"- 顺序存储"],[1,4094,"顺序存储结构"],[-1,4102,"  "],[-1,4107," "],[1,4108,"概念："],[-1,4144,"  "],[-1,4149,"  "],[1,4151,"-"],[1,4153,"物理上"],[-1,4227,"  "],[-1,4232,"    "],[1,4236,"- 顺序存储"],[-1,4261,"    "],[1,4265,"存储空间"],[-1,4315,"  "],[1,4317,"表的"],[-1,4348,"  "],[1,4350,"3."],[-1,4381,"   "],[1,4384,"- 注意：\n"],[-1,4387,"- \n"],[-1,4477,"\n"],[1,4479,"\n"],[-1,4510,"  "],[-1,4514,"  "],[1,4516,"地址计算"],[1,4519,"\n"],[-1,4522,"\n"],[-1,4525,"\n "],[1,4532,"El"],[-1,4645,"  "],[1,4651,"对于"],[1,4732,"**"],[-1,4746,"**"],[-1,4768,"  "],[1,4774,"元素"],[-1,4862,"    \n "],[1,4872,"c"],[-1,4873,"`"],[1,5252,"`"],[-1,5253,"   "],[-1,5263,"-"],[-1,5265,"插入："],[-1,5275," \n"],[1,5277,"- 插入操作： "],[-1,5432," "],[1,5433,"\n"],[1,5435,"ListIns"],[-1,5472,"     \n "],[1,6067,"**PS：**"],[-1,6084,"  "],[1,6090,"操作"],[-1,6198,"   \n   "],[1,6205,""],[-1,6687,""],[1,6687,"       "],[-1,6708,"    "],[-1,6714," \n"],[1,6716,"总结"],[1,6719,"\n"],[1,6721,"-"],[1,6723,"点："],[-1,6777,"   "],[1,6780,"- 缺"],[-1,6851,"\n- 链式存储"],[-1,6861,"结"],[1,6862,"\n"],[1,6868,"链式存储结构"],[1,6875," \n"],[-1,6880,"\n"],[-1,6908,"\n"],[1,6913,"\n"],[1,7074,"数据域和指针域"],[-1,7084,"和指针域"],[1,7275," "],[-1,7285," "],[-1,7304,"\n   "],[1,7311," **概"],[-1,7629,"\n![单链表中的头结"],[1,7677,"\n![单链表中的头结"],[-1,7809,"**注：** 头指针"],[1,7991,"**注：**  头指针"],[-1,7994,"："],[1,7995,"结"],[-1,7998," "],[-1,8034,"**"],[1,8036,"#### "],[-1,8043,"*####"],[1,8056,"i个"],[-1,8208,"**注：**首先没有"],[1,8218,""],[1,8633,"**注：** 首先没有"],[-1,8639," "],[1,8694," "],[-1,8704," "],[1,8734,"\n"],[-1,8744,"\n"],[1,8814,"\n"],[-1,8825,"\n"],[-1,8829,"~~~~"],[1,8833,"```c"],[-1,8839,"```c"],[1,8843,"xt ="],[-1,8866,"    \n~~~~ "],[-1,8895,"数个"],[1,8897,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8904,"=1；\n"],[1,8908,"从1开始；"],[-1,8924,"P"],[1,8925,"p"],[-1,8939,"个"],[-1,8949,"\n"],[-1,8974,"\n"],[-1,8985,"将欲删除结点p->next赋值给q；\n\n5"],[1,9006,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9011,"删除"],[1,9013,"插入刚才两个"],[-1,9017,"p->next = q->next"],[-1,9036,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9066,"7.返回成功"],[-1,9071,"\n\n\n **注：**"],[-1,9083," 1.插入"],[-1,9092,"和"],[1,9093,"\n"],[-1,9543,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9591,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9595," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9712,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9714," "],[-1,9725,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9780,"第i个数据删除节点的算法：**  \n1."],[-1,9782,"一"],[-1,9786,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9814,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9817,"向后移动，不断"],[-1,9819,"NULL，即建立"],[1,9827,"下"],[-1,9829,"带头"],[-1,9833,"的"],[1,9834,"，j累加1；\n3.若到"],[1,9836,"末尾p为空，则说明第i个元素不存在"],[-1,9838,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9915,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9917,"插到当前链表的表头上，直到结束为止"],[1,9935,"    "],[-1,9937,"**案：** 简单来说，就是把新"],[-1,10377,"加\n"],[1,10379,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10395,"\n"],[1,10398," "],[1,10418," "],[-1,10562,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10584,"\n"],[-1,10643,"* "],[1,10645,"-"],[-1,10660,"*"],[1,10664," "],[-1,10672,"*"],[1,10673,";"],[1,10697,"// P是中介结点\n   "],[1,10701," "],[-1,10705,"* "],[1,10707,"(L"],[1,10842,"e"],[-1,10843," "],[-1,10864," "],[1,10865,"**"],[1,10889,"**\n\n"],[-1,11072,""],[1,11072," // r指向列表的尾部，P是一个中介结点"],[-1,11123,"// P是中介结点\n    "],[1,11137,""],[-1,11304,"**"],[1,11306,""],[-1,11330,"**"],[-1,11334,"\n\n"],[-1,11518,"// r指向列表的尾部 P是一个中介结点"],[1,11538,""]],[234,234],[11538,11538]]],[1556454682327,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度（一）："],[-1,938," （一）时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"## 四、线性表"],[1,2294,"四、"],[1,2335,"\n\n\n"],[1,2338,"   "],[-1,2342,"定义    "],[1,2357," *  "],[-1,2357,"**线"],[-1,2362,"（"],[-1,2393,"  "],[1,2396," "],[1,2400,"  若  "],[-1,2400,"若将线性"],[1,2504,"  "],[1,2507," 线  "],[-1,2507,"3.线性表元"],[1,2559,"   \n  注"],[-1,2559,"\n**注** "],[1,2588,"  "],[1,2590,"  "],[-1,2590,"首先它是"],[1,2621,"  "],[1,2626," 若  "],[-1,2626,"2.若元素存"],[1,2685,"  "],[1,2686," "],[1,2688,"另  "],[-1,2688,"3.另外，线"],[1,2738,"\n\n\n"],[-1,2741," （二）抽象"],[1,2751,"（二）"],[-1,2817,"  "],[1,2825,"  "],[-1,2932," "],[1,2939," "],[1,3026,"\n    \n"],[1,3033," "],[-1,3033,"\n"],[1,3145,"A "],[-1,3145,"\n\n- 常用的操"],[1,3639,"弱"],[-1,3639,"若"],[1,3645,"若"],[-1,3645,"插"],[1,3659," ~~~~ "],[-1,3663,"\n    /"],[1,4059,"~~~~\n\n"],[-1,4062,"\n\n\n"],[-1,4068," (三)线性"],[1,4078,"(三)"],[1,4089,"- 顺序存储"],[-1,4094,"顺序存储结构"],[1,4108,"  "],[1,4111," "],[-1,4111,"概念："],[1,4150,"  "],[1,4153,"  "],[-1,4153,"-"],[-1,4156,"物理上"],[1,4233,"  "],[1,4236,"    "],[-1,4236,"- 顺序存储"],[1,4267,"    "],[-1,4267,"存储空间"],[1,4321,"  "],[-1,4321,"表的"],[1,4354,"  "],[-1,4354,"3."],[1,4387,"   "],[-1,4387,"- 注意：\n"],[1,4396,"- \n"],[1,4483,"\n"],[-1,4484,"\n"],[1,4516,"  "],[1,4518,"  "],[-1,4518,"地址计算"],[-1,4525,"\n"],[1,4529,"\n"],[1,4531,"\n "],[-1,4536,"El"],[1,4651,"  "],[-1,4655,"对于"],[-1,4738,"**"],[1,4754,"**"],[1,4774,"  "],[-1,4778,"元素"],[1,4868,"    \n "],[-1,4872,"c"],[1,4874,"`"],[-1,5252,"`"],[1,5254,"   "],[1,5261,"-"],[1,5262,"插入："],[1,5269," \n"],[-1,5269,"- 插入操作： "],[1,5432," "],[-1,5432,"\n"],[-1,5435,"ListIns"],[1,5479,"     \n "],[-1,6067,"**PS：**"],[1,6091,"  "],[-1,6095,"操作"],[1,6205,"   \n   "],[-1,6205,""],[1,6687,""],[-1,6687,"       "],[1,6715,"    "],[1,6717," \n"],[-1,6717,"总结"],[-1,6722,"\n"],[-1,6725,"-"],[-1,6728,"点："],[1,6784,"   "],[-1,6784,"- 缺"],[1,6858,"\n- 链式存储"],[1,6861,"结"],[-1,6861,"\n"],[-1,6868,"链式存储结构"],[-1,6881," \n"],[1,6888,"\n"],[1,6915,"\n"],[-1,6919,"\n"],[-1,7081,"数据域和指针域"],[1,7098,"和指针域"],[-1,7285," "],[1,7296," "],[1,7314,"\n   "],[-1,7317," **概"],[1,7639,"\n![单链表中的头结"],[-1,7677,"\n![单链表中的头结"],[1,7819,"**注：** 头指针"],[-1,7991,"**注：**  头指针"],[1,8005,"："],[-1,8005,"结"],[1,8009," "],[1,8044,"**"],[-1,8044,"#### "],[1,8056,"*####"],[-1,8064,"i个"],[1,8218,"**注：**首先没有"],[-1,8218,""],[-1,8633,"**注：** 首先没有"],[1,8650," "],[-1,8704," "],[1,8715," "],[-1,8744,"\n"],[1,8755,"\n"],[-1,8824,"\n"],[1,8836,"\n"],[1,8839,"~~~~"],[-1,8839,"```c"],[1,8849,"```c"],[-1,8849,"xt ="],[1,8876,"    \n~~~~ "],[1,8895,"数个"],[-1,8895,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8944,"=1；\n"],[-1,8944,"从1开始；"],[1,8965,"P"],[-1,8965,"p"],[1,8980,"个"],[1,8989,"\n"],[1,9013,"\n"],[1,9023,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9023,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9063,"删除"],[-1,9063,"插入刚才两个"],[1,9073,"p->next = q->next"],[1,9075,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9075,"7.返回成功"],[1,9086,"\n\n\n **注：**"],[1,9088," 1.插入"],[1,9092,"和"],[-1,9092,"\n"],[1,9543,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9543,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9567," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9567,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9741," "],[1,9751,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9751,"第i个数据删除节点的算法：**  \n1."],[1,9773,"一"],[1,9776,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9776,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9813,"向后移动，不断"],[1,9822,"NULL，即建立"],[-1,9822,"下"],[1,9825,"带头"],[1,9827,"的"],[-1,9827,"，j累加1；\n3.若到"],[-1,9840,"末尾p为空，则说明第i个元素不存在"],[1,9859,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9859,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9946,"插到当前链表的表头上，直到结束为止"],[-1,9947,"    "],[1,9953,"**案：** 简单来说，就是把新"],[1,10377,"加\n"],[-1,10377,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10841,"\n"],[-1,10843," "],[-1,10864," "],[1,11009,"对于插入和删除操作较为频繁使用单链表\n"],[1,11012,"\n"],[1,11070,"* "],[-1,11070,"-"],[1,11086,"*"],[-1,11089," "],[1,11098,"*"],[-1,11098,";"],[-1,11123,"// P是中介结点\n   "],[-1,11140," "],[1,11145,"* "],[-1,11145,"(L"],[-1,11282,"e"],[1,11284," "],[1,11304," "],[-1,11304,"**"],[-1,11330,"**\n\n"],[1,11517,""],[-1,11517," // r指向列表的尾部，P是一个中介结点"],[1,11589,"// P是中介结点\n    "],[-1,11589,""],[1,11756,"**"],[-1,11756,""],[1,11780,"**"],[1,11782,"\n\n"],[1,11964,"// r指向列表的尾部 P是一个中介结点"],[-1,11964,""]],[11538,11538],[234,234]]],[1556454623859,["GJX@GJXAIOU",[[-1,2284,"#"]],[2284,2284],[2303,2303]]],[1556454626584,["GJX@GJXAIOU",[[-1,2336,"#"]],[2336,2336],[2349,2349]]],[1556454630562,["GJX@GJXAIOU",[[1,2737,"2"]],[2737,2737],[2738,2738]]],[1556454632159,["GJX@GJXAIOU",[[-1,2737,"2"]],[2738,2738],[2737,2737]]],[1556454632518,["GJX@GJXAIOU",[[-1,2738,"#"]],[2737,2737],[2752,2752]]],[1556454643871,["GJX@GJXAIOU",[[-1,4064,"#"]],[4064,4064],[4078,4078]]],[1556454645993,["GJX@GJXAIOU",[[-1,4088,"#"]],[4085,4085],[4099,4099]]],[1556454654334,["GJX@GJXAIOU",[[-1,6861,"#"]],[6861,6861],[6874,6874]]],[1556454670658,["GJX@GJXAIOU",[[1,8053," "]],[8053,8053],[8054,8054]]],[1556454742333,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度（一）："],[1,943," （一）时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#"],[1,4062," (三)线性"],[1,4064,"存"],[-1,4065,"(三)"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4097,"  "],[-1,4102," "],[1,4103,"概念："],[-1,4139,"  "],[-1,4144,"  "],[1,4146,"-"],[1,4148,"物理上"],[-1,4222,"  "],[-1,4227,"    "],[1,4231,"- 顺序存储"],[-1,4256,"    "],[1,4260,"存储空间"],[-1,4310,"  "],[1,4312,"表的"],[-1,4343,"  "],[1,4345,"3."],[-1,4376,"   "],[1,4379,"- 注意：\n"],[-1,4382,"- \n"],[-1,4472,"\n"],[1,4474,"\n"],[-1,4505,"  "],[-1,4509,"  "],[1,4511,"地址计算"],[1,4514,"\n"],[-1,4517,"\n"],[-1,4520,"\n "],[1,4527,"El"],[-1,4640,"  "],[1,4646,"对于"],[1,4727,"**"],[-1,4741,"**"],[-1,4763,"  "],[1,4769,"元素"],[-1,4857,"    \n "],[1,4867,"c"],[-1,4868,"`"],[1,5247,"`"],[-1,5248,"   "],[-1,5258,"-"],[-1,5260,"插入："],[-1,5270," \n"],[1,5272,"- 插入操作： "],[-1,5427," "],[1,5428,"\n"],[1,5430,"ListIns"],[-1,5467,"     \n "],[1,6062,"**PS：**"],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6846,"\n- 链式存储"],[-1,6856,"结"],[1,6857,"\n"],[1,6862,"链式存储结构"],[1,6869," \n"],[-1,6874,"\n"],[-1,6902,"\n"],[1,6907,"\n"],[1,7068,"数据域和指针域"],[-1,7078,"和指针域"],[1,7269," "],[-1,7279," "],[-1,7298,"\n   "],[1,7305," **概"],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"],[-1,7803,"**注：** 头指针"],[1,7985,"**注：**  头指针"],[-1,7988,"："],[1,7989,"结"],[-1,7992," "],[-1,8028,"**"],[1,8030,"#### "],[-1,8037,"*####"],[1,8045," "],[1,8050,"i个"],[-1,8053," "],[-1,8203,"**注：**首先没有"],[1,8213,""],[1,8628,"**注：** 首先没有"],[-1,8634," "],[1,8689," "],[-1,8699," "],[1,8729,"\n"],[-1,8739,"\n"],[1,8809,"\n"],[-1,8820,"\n"],[-1,8824,"~~~~"],[1,8828,"```c"],[-1,8834,"```c"],[1,8838,"xt ="],[-1,8861,"    \n~~~~ "],[-1,8890,"数个"],[1,8892,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8899,"=1；\n"],[1,8903,"从1开始；"],[-1,8919,"P"],[1,8920,"p"],[-1,8934,"个"],[-1,8944,"\n"],[-1,8969,"\n"],[-1,8980,"将欲删除结点p->next赋值给q；\n\n5"],[1,9001,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9006,"删除"],[1,9008,"插入刚才两个"],[-1,9012,"p->next = q->next"],[-1,9031,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9061,"7.返回成功"],[-1,9066,"\n\n\n **注：**"],[-1,9078," 1.插入"],[-1,9087,"和"],[1,9088,"\n"],[-1,9538,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9586,"\n```\n\n\n\n\n**单链表的删除:**"],[-1,9590," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[1,9707,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9709," "],[-1,9720,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9775,"第i个数据删除节点的算法：**  \n1."],[-1,9777,"一"],[-1,9781,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9809,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9812,"向后移动，不断"],[-1,9814,"NULL，即建立"],[1,9822,"下"],[-1,9824,"带头"],[-1,9828,"的"],[1,9829,"，j累加1；\n3.若到"],[1,9831,"末尾p为空，则说明第i个元素不存在"],[-1,9833,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9910,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9912,"插到当前链表的表头上，直到结束为止"],[1,9930,"    "],[-1,9932,"**案：** 简单来说，就是把新"],[-1,10372,"加\n"],[1,10374,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10390,"\n"],[1,10393," "],[1,10413," "],[-1,10557,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10579,"\n"],[-1,10638,"* "],[1,10640,"-"],[-1,10655,"*"],[1,10659," "],[-1,10667,"*"],[1,10668,";"],[1,10692,"// P是中介结点\n   "],[1,10696," "],[-1,10700,"* "],[1,10702,"(L"],[1,10837,"e"],[-1,10838," "],[-1,10859," "],[1,10860,"**"],[1,10884,"**\n\n"],[-1,11067,""],[1,11067," // r指向列表的尾部，P是一个中介结点"],[-1,11118,"// P是中介结点\n    "],[1,11132,""],[-1,11299,"**"],[1,11301,""],[-1,11325,"**"],[-1,11329,"\n\n"],[-1,11513,"// r指向列表的尾部 P是一个中介结点"],[1,11533,""]],[234,234],[11533,11533]]],[1556454742333,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度（一）："],[-1,938," （一）时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#"],[-1,4064," (三)线性"],[-1,4072,"存"],[1,4074,"(三)"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4103,"  "],[1,4106," "],[-1,4106,"概念："],[1,4145,"  "],[1,4148,"  "],[-1,4148,"-"],[-1,4151,"物理上"],[1,4228,"  "],[1,4231,"    "],[-1,4231,"- 顺序存储"],[1,4262,"    "],[-1,4262,"存储空间"],[1,4316,"  "],[-1,4316,"表的"],[1,4349,"  "],[-1,4349,"3."],[1,4382,"   "],[-1,4382,"- 注意：\n"],[1,4391,"- \n"],[1,4478,"\n"],[-1,4479,"\n"],[1,4511,"  "],[1,4513,"  "],[-1,4513,"地址计算"],[-1,4520,"\n"],[1,4524,"\n"],[1,4526,"\n "],[-1,4531,"El"],[1,4646,"  "],[-1,4650,"对于"],[-1,4733,"**"],[1,4749,"**"],[1,4769,"  "],[-1,4773,"元素"],[1,4863,"    \n "],[-1,4867,"c"],[1,4869,"`"],[-1,5247,"`"],[1,5249,"   "],[1,5256,"-"],[1,5257,"插入："],[1,5264," \n"],[-1,5264,"- 插入操作： "],[1,5427," "],[-1,5427,"\n"],[-1,5430,"ListIns"],[1,5474,"     \n "],[-1,6062,"**PS：**"],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6853,"\n- 链式存储"],[1,6856,"结"],[-1,6856,"\n"],[-1,6862,"链式存储结构"],[-1,6875," \n"],[1,6882,"\n"],[1,6909,"\n"],[-1,6913,"\n"],[-1,7075,"数据域和指针域"],[1,7092,"和指针域"],[-1,7279," "],[1,7290," "],[1,7308,"\n   "],[-1,7311," **概"],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"],[1,7813,"**注：** 头指针"],[-1,7985,"**注：**  头指针"],[1,7999,"："],[-1,7999,"结"],[1,8003," "],[1,8038,"**"],[-1,8038,"#### "],[1,8050,"*####"],[-1,8053," "],[-1,8059,"i个"],[1,8064," "],[1,8213,"**注：**首先没有"],[-1,8213,""],[-1,8628,"**注：** 首先没有"],[1,8645," "],[-1,8699," "],[1,8710," "],[-1,8739,"\n"],[1,8750,"\n"],[-1,8819,"\n"],[1,8831,"\n"],[1,8834,"~~~~"],[-1,8834,"```c"],[1,8844,"```c"],[-1,8844,"xt ="],[1,8871,"    \n~~~~ "],[1,8890,"数个"],[-1,8890,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8939,"=1；\n"],[-1,8939,"从1开始；"],[1,8960,"P"],[-1,8960,"p"],[1,8975,"个"],[1,8984,"\n"],[1,9008,"\n"],[1,9018,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9018,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9058,"删除"],[-1,9058,"插入刚才两个"],[1,9068,"p->next = q->next"],[1,9070,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9070,"7.返回成功"],[1,9081,"\n\n\n **注：**"],[1,9083," 1.插入"],[1,9087,"和"],[-1,9087,"\n"],[1,9538,"删```除操作\n\n首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9538,"\n```\n\n\n\n\n**单链表的删除:**"],[1,9562," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.   "],[-1,9562,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9736," "],[1,9746,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9746,"第i个数据删除节点的算法：**  \n1."],[1,9768,"一"],[1,9771,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9771,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9808,"向后移动，不断"],[1,9817,"NULL，即建立"],[-1,9817,"下"],[1,9820,"带头"],[1,9822,"的"],[-1,9822,"，j累加1；\n3.若到"],[-1,9835,"末尾p为空，则说明第i个元素不存在"],[1,9854,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9854,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9941,"插到当前链表的表头上，直到结束为止"],[-1,9942,"    "],[1,9948,"**案：** 简单来说，就是把新"],[1,10372,"加\n"],[-1,10372,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10836,"\n"],[-1,10838," "],[-1,10859," "],[1,11004,"对于插入和删除操作较为频繁使用单链表\n"],[1,11007,"\n"],[1,11065,"* "],[-1,11065,"-"],[1,11081,"*"],[-1,11084," "],[1,11093,"*"],[-1,11093,";"],[-1,11118,"// P是中介结点\n   "],[-1,11135," "],[1,11140,"* "],[-1,11140,"(L"],[-1,11277,"e"],[1,11279," "],[1,11299," "],[-1,11299,"**"],[-1,11325,"**\n\n"],[1,11512,""],[-1,11512," // r指向列表的尾部，P是一个中介结点"],[1,11584,"// P是中介结点\n    "],[-1,11584,""],[1,11751,"**"],[-1,11751,""],[1,11775,"**"],[1,11777,"\n\n"],[1,11959,"// r指向列表的尾部 P是一个中介结点"],[-1,11959,""]],[11533,11533],[234,234]]],[1556454703574,["GJX@GJXAIOU",[[-1,8070,"\n"]],[8070,8070],[8069,8069]]],[1556454704358,["GJX@GJXAIOU",[[-1,8099,"\n"]],[8099,8099],[8098,8098]]],[1556454704963,["GJX@GJXAIOU",[[-1,8137,"\n"]],[8137,8137],[8136,8136]]],[1556454705605,["GJX@GJXAIOU",[[-1,8162,"\n"]],[8162,8162],[8161,8161]]],[1556454706600,["GJX@GJXAIOU",[[-1,8164,"否"]],[8165,8165],[8164,8164]]],[1556454709226,["GJX@GJXAIOU",[[1,8164,"否"]],[8164,8164],[8165,8165]]],[1556454710557,["GJX@GJXAIOU",[[-1,8181,"\n"]],[8181,8181],[8180,8180]]],[1556454715775,["GJX@GJXAIOU",[[1,8054,"\n "]],[8054,8054],[8056,8056]]],[1556454723639,["GJX@GJXAIOU",[[-1,8672,"**"],[-1,8681,"**"]],[8678,8678],[8672,8679]]],[1556454726174,["GJX@GJXAIOU",[[1,8672,"#### "]],[8672,8679],[8687,8687]]],[1556454731926,["GJX@GJXAIOU",[[-1,8683,"："]],[8684,8684],[8683,8683]]],[1556454735245,["GJX@GJXAIOU",[[-1,8049,"："]],[8050,8050],[8049,8049]]],[1556454802335,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度（一）："],[1,943," （一）时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#"],[1,4062," (三)线性"],[1,4064,"存"],[-1,4065,"(三)"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4097,"  "],[-1,4102," "],[1,4103,"概念："],[-1,4139,"  "],[-1,4144,"  "],[1,4146,"-"],[1,4148,"物理上"],[-1,4222,"  "],[-1,4227,"    "],[1,4231,"- 顺序存储"],[-1,4256,"    "],[1,4260,"存储空间"],[-1,4310,"  "],[1,4312,"表的"],[-1,4343,"  "],[1,4345,"3."],[-1,4376,"   "],[1,4379,"- 注意：\n"],[-1,4382,"- \n"],[-1,4472,"\n"],[1,4474,"\n"],[-1,4505,"  "],[-1,4509,"  "],[1,4511,"地址计算"],[1,4514,"\n"],[-1,4517,"\n"],[-1,4520,"\n "],[1,4527,"El"],[-1,4640,"  "],[1,4646,"对于"],[1,4727,"**"],[-1,4741,"**"],[-1,4763,"  "],[1,4769,"元素"],[-1,4857,"    \n "],[1,4867,"c"],[-1,4868,"`"],[1,5247,"`"],[-1,5248,"   "],[-1,5258,"-"],[-1,5260,"插入："],[-1,5270," \n"],[1,5272,"- 插入操作： "],[-1,5427," "],[1,5428,"\n"],[1,5430,"ListIns"],[-1,5467,"     \n "],[1,6062,"**PS：**"],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6846,"\n- 链式存储"],[-1,6856,"结"],[1,6857,"\n"],[1,6862,"链式存储结构"],[1,6869," \n"],[-1,6874,"\n"],[-1,6902,"\n"],[1,6907,"\n"],[1,7068,"数据域和指针域"],[-1,7078,"和指针域"],[1,7269," "],[-1,7279," "],[-1,7298,"\n   "],[1,7305," **概"],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"],[-1,7803,"**注：** 头指针"],[1,7985,"**注：**  头指针"],[-1,7988,"："],[1,7989,"结"],[-1,7992," "],[-1,8028,"**"],[1,8030,"#### "],[-1,8036,"：*#### "],[1,8043,"  \n"],[1,8045," "],[1,8049,"第i个"],[-1,8052," \n "],[-1,8060,"\n"],[1,8071,"指"],[-1,8090,"\n"],[1,8100,"遍"],[-1,8128,"\n"],[1,8138,"为"],[-1,8152,"\n"],[1,8163,"返"],[-1,8165,"否"],[1,8166,"点"],[-1,8171,"\n"],[1,8182,"现"],[-1,8199,"**注：**首先没有"],[1,8624,"**注：** 首先没有"],[-1,8630," "],[-1,8661,"**"],[1,8663,"#### "],[-1,8669,"：*####"],[1,8682,"exp"],[1,8685," "],[-1,8695," "],[1,8725,"\n"],[-1,8735,"\n"],[1,8806,"\n"],[-1,8816,"\n"],[-1,8820,"~~~~"],[1,8824,"```c"],[-1,8830,"```c"],[1,8834,"xt ="],[-1,8857,"    \n~~~~ "],[-1,8886,"数个"],[1,8888,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[-1,8895,"=1；\n"],[1,8899,"从1开始；"],[-1,8915,"P"],[1,8916,"p"],[-1,8930,"个"],[-1,8939,"\n"],[-1,8966,"\n"],[-1,8976,"将欲删除结点p->next赋值给q；\n\n5"],[1,8997,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9002,"删除"],[1,9004,"插入刚才两个"],[-1,9008,"p->next = q->next"],[-1,9027,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9057,"7.返回成功"],[-1,9062,"\n\n\n **注：**"],[-1,9074," 1.插入"],[-1,9083,"和"],[1,9084,"\n"],[-1,9534,"删"],[1,9535,"\n"],[-1,9538,"除操作"],[-1,9543,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[1,9582,"\n\n\n**单链表的删除:**"],[-1,9586," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9704,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9716,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9771,"第i个数据删除节点的算法：**  \n1."],[1,9773,"结点p指向链表第"],[1,9774,"个"],[-1,9776,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9805,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9808,"向后移动，不断"],[-1,9810,"NULL，即建立"],[1,9818,"下"],[-1,9820,"带头"],[-1,9824,"的"],[1,9825,"，j累加1；\n3.若到"],[1,9827,"末尾p为空，则说明第i个元素不存在"],[-1,9829,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9906,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9908,"插到当前链表的表头上，直到结束为止"],[1,9926,"    "],[-1,9928,"**案：** 简单来说，就是把新"],[-1,10368,"加\n"],[1,10370,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10386,"\n"],[1,10389," "],[1,10409," "],[-1,10553,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10575,"\n"],[-1,10634,"* "],[1,10636,"-"],[-1,10651,"*"],[1,10652," "],[-1,10663,"*"],[1,10664,";"],[1,10688,"// P是中介结点\n   "],[1,10692," "],[-1,10696,"* "],[1,10698,"(L"],[1,10833,"e"],[-1,10834," "],[-1,10855," "],[1,10856,"**"],[1,10880,"**\n\n"],[-1,11063,""],[1,11063," // r指向列表的尾部，P是一个中介结点"],[-1,11114,"// P是中介结点\n    "],[1,11128,""],[-1,11295,"**"],[1,11297,""],[-1,11321,"**"],[-1,11325,"\n\n"],[-1,11509,"// r指向列表的尾部 P是一个中介结点"],[1,11529,""]],[234,234],[11529,11529]]],[1556454802335,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度（一）："],[-1,938," （一）时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#"],[-1,4064," (三)线性"],[-1,4072,"存"],[1,4074,"(三)"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4103,"  "],[1,4106," "],[-1,4106,"概念："],[1,4145,"  "],[1,4148,"  "],[-1,4148,"-"],[-1,4151,"物理上"],[1,4228,"  "],[1,4231,"    "],[-1,4231,"- 顺序存储"],[1,4262,"    "],[-1,4262,"存储空间"],[1,4316,"  "],[-1,4316,"表的"],[1,4349,"  "],[-1,4349,"3."],[1,4382,"   "],[-1,4382,"- 注意：\n"],[1,4391,"- \n"],[1,4478,"\n"],[-1,4479,"\n"],[1,4511,"  "],[1,4513,"  "],[-1,4513,"地址计算"],[-1,4520,"\n"],[1,4524,"\n"],[1,4526,"\n "],[-1,4531,"El"],[1,4646,"  "],[-1,4650,"对于"],[-1,4733,"**"],[1,4749,"**"],[1,4769,"  "],[-1,4773,"元素"],[1,4863,"    \n "],[-1,4867,"c"],[1,4869,"`"],[-1,5247,"`"],[1,5249,"   "],[1,5256,"-"],[1,5257,"插入："],[1,5264," \n"],[-1,5264,"- 插入操作： "],[1,5427," "],[-1,5427,"\n"],[-1,5430,"ListIns"],[1,5474,"     \n "],[-1,6062,"**PS：**"],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6853,"\n- 链式存储"],[1,6856,"结"],[-1,6856,"\n"],[-1,6862,"链式存储结构"],[-1,6875," \n"],[1,6882,"\n"],[1,6909,"\n"],[-1,6913,"\n"],[-1,7075,"数据域和指针域"],[1,7092,"和指针域"],[-1,7279," "],[1,7290," "],[1,7308,"\n   "],[-1,7311," **概"],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"],[1,7813,"**注：** 头指针"],[-1,7985,"**注：**  头指针"],[1,7999,"："],[-1,7999,"结"],[1,8003," "],[1,8038,"**"],[-1,8038,"#### "],[1,8049,"：*#### "],[-1,8049,"  \n"],[-1,8054," "],[-1,8059,"第i个"],[1,8065," \n "],[1,8070,"\n"],[-1,8080,"指"],[1,8100,"\n"],[-1,8109,"遍"],[1,8138,"\n"],[-1,8147,"为"],[1,8162,"\n"],[-1,8172,"返"],[1,8175,"否"],[-1,8175,"点"],[1,8181,"\n"],[-1,8191,"现"],[1,8209,"**注：**首先没有"],[-1,8624,"**注：** 首先没有"],[1,8641," "],[1,8671,"**"],[-1,8671,"#### "],[1,8682,"：*####"],[-1,8689,"exp"],[-1,8695," "],[1,8706," "],[-1,8735,"\n"],[1,8746,"\n"],[-1,8816,"\n"],[1,8827,"\n"],[1,8830,"~~~~"],[-1,8830,"```c"],[1,8840,"```c"],[-1,8840,"xt ="],[1,8867,"    \n~~~~ "],[1,8886,"数个"],[-1,8886,"\n\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头"],[1,8935,"=1；\n"],[-1,8935,"从1开始；"],[1,8956,"P"],[-1,8956,"p"],[1,8971,"个"],[1,8979,"\n"],[1,9005,"\n"],[1,9014,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9014,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9054,"删除"],[-1,9054,"插入刚才两个"],[1,9064,"p->next = q->next"],[1,9066,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9066,"7.返回成功"],[1,9077,"\n\n\n **注：**"],[1,9079," 1.插入"],[1,9083,"和"],[-1,9083,"\n"],[1,9534,"删"],[-1,9534,"\n"],[1,9538,"除操作"],[1,9540,"首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;"],[-1,9540,"\n\n\n**单链表的删除:**"],[1,9558," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9558,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9742,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9742,"第i个数据删除节点的算法：**  \n1."],[-1,9764,"结点p指向链表第"],[-1,9773,"个"],[1,9776,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9776,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9804,"向后移动，不断"],[1,9813,"NULL，即建立"],[-1,9813,"下"],[1,9816,"带头"],[1,9818,"的"],[-1,9818,"，j累加1；\n3.若到"],[-1,9831,"末尾p为空，则说明第i个元素不存在"],[1,9850,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9850,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9937,"插到当前链表的表头上，直到结束为止"],[-1,9938,"    "],[1,9944,"**案：** 简单来说，就是把新"],[1,10368,"加\n"],[-1,10368,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n**单链表的整表创建**\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10832,"\n"],[-1,10834," "],[-1,10855," "],[1,11000,"对于插入和删除操作较为频繁使用单链表\n"],[1,11003,"\n"],[1,11061,"* "],[-1,11061,"-"],[1,11077,"*"],[-1,11077," "],[1,11089,"*"],[-1,11089,";"],[-1,11114,"// P是中介结点\n   "],[-1,11131," "],[1,11136,"* "],[-1,11136,"(L"],[-1,11273,"e"],[1,11275," "],[1,11295," "],[-1,11295,"**"],[-1,11321,"**\n\n"],[1,11508,""],[-1,11508," // r指向列表的尾部，P是一个中介结点"],[1,11580,"// P是中介结点\n    "],[-1,11580,""],[1,11747,"**"],[-1,11747,""],[1,11771,"**"],[1,11773,"\n\n"],[1,11955,"// r指向列表的尾部 P是一个中介结点"],[-1,11955,""]],[11529,11529],[234,234]]],[1556454743341,["GJX@GJXAIOU",[[-1,8889,"\n"]],[8888,8888],[8887,8887]]],[1556454750156,["GJX@GJXAIOU",[[-1,9542,"**"],[-1,9551,"**"]],[9548,9548],[9542,9549]]],[1556454753098,["GJX@GJXAIOU",[[1,9542,"#### "]],[9542,9549],[9557,9557]]],[1556454754786,["GJX@GJXAIOU",[[-1,9553,":"]],[9554,9554],[9553,9553]]],[1556454762993,["GJX@GJXAIOU",[[-1,10575,"**"],[-1,10585,"**"]],[10580,10580],[10575,10583]]],[1556454765159,["GJX@GJXAIOU",[[1,10575,"#### "]],[10575,10583],[10588,10588]]],[1556454774591,["GJX@GJXAIOU",[[-1,11750,"**"],[-1,11760,"**"]],[11754,11754],[11750,11758]]],[1556454776048,["GJX@GJXAIOU",[[1,11750,"#### "]],[11750,11758],[11765,11765]]],[1556454781312,["GJX@GJXAIOU",[[-1,12480,"\n"]],[12481,12481],[12480,12480]]],[1556454781839,["GJX@GJXAIOU",[[-1,12479,"\n"]],[12480,12480],[12479,12479]]],[1556454862356,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度（一）："],[1,943," （一）时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#"],[1,4062," (三)线性"],[1,4064,"存"],[-1,4065,"(三)"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4097,"  "],[-1,4102," "],[1,4103,"概念："],[-1,4139,"  "],[-1,4144,"  "],[1,4146,"-"],[1,4148,"物理上"],[-1,4222,"  "],[-1,4227,"    "],[1,4231,"- 顺序存储"],[-1,4256,"    "],[1,4260,"存储空间"],[-1,4310,"  "],[1,4312,"表的"],[-1,4343,"  "],[1,4345,"3."],[-1,4376,"   "],[1,4379,"- 注意：\n"],[-1,4382,"- \n"],[-1,4472,"\n"],[1,4474,"\n"],[-1,4505,"  "],[-1,4509,"  "],[1,4511,"地址计算"],[1,4514,"\n"],[-1,4517,"\n"],[-1,4520,"\n "],[1,4527,"El"],[-1,4640,"  "],[1,4646,"对于"],[1,4727,"**"],[-1,4741,"**"],[-1,4763,"  "],[1,4769,"元素"],[-1,4857,"    \n "],[1,4867,"c"],[-1,4868,"`"],[1,5247,"`"],[-1,5248,"   "],[-1,5258,"-"],[-1,5260,"插入："],[-1,5270," \n"],[1,5272,"- 插入操作： "],[-1,5427," "],[1,5428,"\n"],[1,5430,"ListIns"],[-1,5467,"     \n "],[1,6062,"**PS：**"],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6846,"\n- 链式存储"],[-1,6856,"结"],[1,6857,"\n"],[1,6862,"链式存储结构"],[1,6869," \n"],[-1,6874,"\n"],[-1,6902,"\n"],[1,6907,"\n"],[1,7068,"数据域和指针域"],[-1,7078,"和指针域"],[1,7269," "],[-1,7279," "],[-1,7298,"\n   "],[1,7305," **概"],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"],[-1,7803,"**注：** 头指针"],[1,7985,"**注：**  头指针"],[-1,7988,"："],[1,7989,"结"],[-1,7992," "],[-1,8028,"**"],[1,8030,"#### "],[-1,8036,"：*#### "],[1,8043,"  \n"],[1,8045," "],[1,8049,"第i个"],[-1,8052," \n "],[-1,8060,"\n"],[1,8071,"指"],[-1,8090,"\n"],[1,8100,"遍"],[-1,8128,"\n"],[1,8138,"为"],[-1,8152,"\n"],[1,8163,"返"],[-1,8165,"否"],[1,8166,"点"],[-1,8171,"\n"],[1,8182,"现"],[-1,8199,"**注：**首先没有"],[1,8624,"**注：** 首先没有"],[-1,8630," "],[-1,8661,"**"],[1,8663,"#### "],[-1,8669,"：*####"],[1,8682,"exp"],[1,8685," "],[-1,8695," "],[1,8725,"\n"],[-1,8735,"\n"],[1,8806,"\n"],[-1,8816,"\n"],[-1,8820,"~~~~"],[1,8824,"```c"],[-1,8830,"```c"],[1,8834,"xt ="],[-1,8857,"    \n~~~~ "],[-1,8886,"数个结"],[1,8889,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8894,"=1；\n"],[1,8898,"从1开始；"],[-1,8914,"P"],[1,8915,"p"],[-1,8929,"个"],[-1,8938,"\n"],[-1,8965,"\n"],[-1,8975,"将欲删除结点p->next赋值给q；\n\n5"],[1,8996,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9001,"删除"],[1,9003,"插入刚才两个"],[-1,9007,"p->next = q->next"],[-1,9026,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9056,"7.返回成功"],[-1,9061,"\n\n\n **注：**"],[-1,9073," 1.插入"],[-1,9082,"和"],[1,9083,"\n"],[-1,9533,"删```除操作"],[1,9540,"\n```\n\n\n"],[-1,9547,"都是遍历找到元素，然后实现插入和"],[1,9563,"单链表的"],[-1,9565,"操作；其时间复杂度均为O（n）;"],[-1,9585," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9703,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9715,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9770,"第i个数据删除节点的算法：**  \n1."],[-1,9772,"一"],[-1,9776,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9817,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9819,"带头"],[-1,9823,"的"],[1,9824,"，j累加1；\n3.若到"],[1,9826,"末尾p为空，则说明第i个元素不存在"],[-1,9828,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9905,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9907,"插到当前链表的表头上，直到结束为止"],[1,9925,"    "],[-1,9927,"**案：** 简单来说，就是把新"],[-1,10367,"加\n"],[1,10369,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10385,"\n"],[1,10388," "],[1,10408," "],[-1,10552,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10574,"\n#### "],[1,10580,"数，"],[1,10587,"  "],[-1,10634,"* "],[1,10636,"-"],[-1,10651,"*"],[1,10652," "],[-1,10663,"*"],[1,10664,";"],[1,10688,"// P是中介结点\n   "],[1,10692," "],[-1,10696,"* "],[1,10698,"(L"],[1,10833,"e"],[-1,10834," "],[-1,10855," "],[1,10856,"**"],[1,10880,"**\n\n"],[-1,11063,""],[1,11063," // r指向列表的尾部，P是一个中介结点"],[-1,11114,"// P是中介结点\n    "],[1,11128,""],[-1,11295,"**"],[-1,11300,"**"],[1,11302,"#### "],[-1,11310,"**"],[-1,11321,"**"],[-1,11325,"\n\n"],[-1,11509,"// r指向列表的尾部 P是一个中介结点"],[1,11529,""],[-1,11750,"#### "],[1,11755,"|-"],[1,11763,"式 "],[-1,12052,"\n\n"],[1,12054,""]],[234,234],[12054,12054]]],[1556454862356,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度（一）："],[-1,938," （一）时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#"],[-1,4064," (三)线性"],[-1,4072,"存"],[1,4074,"(三)"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4103,"  "],[1,4106," "],[-1,4106,"概念："],[1,4145,"  "],[1,4148,"  "],[-1,4148,"-"],[-1,4151,"物理上"],[1,4228,"  "],[1,4231,"    "],[-1,4231,"- 顺序存储"],[1,4262,"    "],[-1,4262,"存储空间"],[1,4316,"  "],[-1,4316,"表的"],[1,4349,"  "],[-1,4349,"3."],[1,4382,"   "],[-1,4382,"- 注意：\n"],[1,4391,"- \n"],[1,4478,"\n"],[-1,4479,"\n"],[1,4511,"  "],[1,4513,"  "],[-1,4513,"地址计算"],[-1,4520,"\n"],[1,4524,"\n"],[1,4526,"\n "],[-1,4531,"El"],[1,4646,"  "],[-1,4650,"对于"],[-1,4733,"**"],[1,4749,"**"],[1,4769,"  "],[-1,4773,"元素"],[1,4863,"    \n "],[-1,4867,"c"],[1,4869,"`"],[-1,5247,"`"],[1,5249,"   "],[1,5256,"-"],[1,5257,"插入："],[1,5264," \n"],[-1,5264,"- 插入操作： "],[1,5427," "],[-1,5427,"\n"],[-1,5430,"ListIns"],[1,5474,"     \n "],[-1,6062,"**PS：**"],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6853,"\n- 链式存储"],[1,6856,"结"],[-1,6856,"\n"],[-1,6862,"链式存储结构"],[-1,6875," \n"],[1,6882,"\n"],[1,6909,"\n"],[-1,6913,"\n"],[-1,7075,"数据域和指针域"],[1,7092,"和指针域"],[-1,7279," "],[1,7290," "],[1,7308,"\n   "],[-1,7311," **概"],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"],[1,7813,"**注：** 头指针"],[-1,7985,"**注：**  头指针"],[1,7999,"："],[-1,7999,"结"],[1,8003," "],[1,8038,"**"],[-1,8038,"#### "],[1,8049,"：*#### "],[-1,8049,"  \n"],[-1,8054," "],[-1,8059,"第i个"],[1,8065," \n "],[1,8070,"\n"],[-1,8080,"指"],[1,8100,"\n"],[-1,8109,"遍"],[1,8138,"\n"],[-1,8147,"为"],[1,8162,"\n"],[-1,8172,"返"],[1,8175,"否"],[-1,8175,"点"],[1,8181,"\n"],[-1,8191,"现"],[1,8209,"**注：**首先没有"],[-1,8624,"**注：** 首先没有"],[1,8641," "],[1,8671,"**"],[-1,8671,"#### "],[1,8682,"：*####"],[-1,8689,"exp"],[-1,8695," "],[1,8706," "],[-1,8735,"\n"],[1,8746,"\n"],[-1,8816,"\n"],[1,8827,"\n"],[1,8830,"~~~~"],[-1,8830,"```c"],[1,8840,"```c"],[-1,8840,"xt ="],[1,8867,"    \n~~~~ "],[1,8886,"数个结"],[-1,8886,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8934,"=1；\n"],[-1,8934,"从1开始；"],[1,8955,"P"],[-1,8955,"p"],[1,8970,"个"],[1,8978,"\n"],[1,9004,"\n"],[1,9013,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9013,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9053,"删除"],[-1,9053,"插入刚才两个"],[1,9063,"p->next = q->next"],[1,9065,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9065,"7.返回成功"],[1,9076,"\n\n\n **注：**"],[1,9078," 1.插入"],[1,9082,"和"],[-1,9082,"\n"],[1,9533,"删```除操作"],[-1,9533,"\n```\n\n\n"],[1,9547,"都是遍历找到元素，然后实现插入和"],[-1,9547,"单链表的"],[1,9553,"操作；其时间复杂度均为O（n）;"],[1,9557," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9557,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9741,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9741,"第i个数据删除节点的算法：**  \n1."],[1,9763,"一"],[1,9766,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9766,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9815,"带头"],[1,9817,"的"],[-1,9817,"，j累加1；\n3.若到"],[-1,9830,"末尾p为空，则说明第i个元素不存在"],[1,9849,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9849,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9936,"插到当前链表的表头上，直到结束为止"],[-1,9937,"    "],[1,9943,"**案：** 简单来说，就是把新"],[1,10367,"加\n"],[-1,10367,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10832,"\n"],[-1,10834," "],[-1,10855," "],[1,11000,"对于插入和删除操作较为频繁使用单链表\n"],[1,11003,"\n#### "],[-1,11003,"数，"],[-1,11012,"  "],[1,11061,"* "],[-1,11061,"-"],[1,11077,"*"],[-1,11077," "],[1,11089,"*"],[-1,11089,";"],[-1,11114,"// P是中介结点\n   "],[-1,11131," "],[1,11136,"* "],[-1,11136,"(L"],[-1,11273,"e"],[1,11275," "],[1,11295," "],[-1,11295,"**"],[-1,11321,"**\n\n"],[1,11508,""],[-1,11508," // r指向列表的尾部，P是一个中介结点"],[1,11580,"// P是中介结点\n    "],[-1,11580,""],[1,11747,"**"],[1,11750,"**"],[-1,11750,"#### "],[1,11763,"**"],[1,11772,"**"],[1,11774,"\n\n"],[1,11956,"// r指向列表的尾部 P是一个中介结点"],[-1,11956,""],[1,12177,"#### "],[-1,12177,"|-"],[-1,12187,"式 "],[1,12478,"\n\n"],[-1,12478,""]],[12054,12054],[234,234]]],[1556454821632,["GJX@GJXAIOU",[[-1,939,"（一）"]],[939,942],[939,939]]],[1556454823652,["GJX@GJXAIOU",[[1,939,"()"]],[939,939],[941,941]]],[1556454825880,["GJX@GJXAIOU",[[1,940,"y"]],[940,940],[941,941]]],[1556454826810,["GJX@GJXAIOU",[[-1,940,"y"]],[941,941],[940,940]]],[1556454827921,["GJX@GJXAIOU",[[1,940,"一"]],[940,940],[941,941]]],[1556454841827,["GJX@GJXAIOU",[[1,4068," "]],[4068,4068],[4069,4069]]],[1556454845455,["GJX@GJXAIOU",[[-1,4065,"(三) "]],[4064,4068],[4064,4064]]],[1556454848740,["GJX@GJXAIOU",[[1,4065,"（）"]],[4065,4065],[4067,4067]]],[1556454851058,["GJX@GJXAIOU",[[-1,4065,"（）"]],[4067,4067],[4065,4065]]],[1556454852733,["GJX@GJXAIOU",[[1,4065,"()"]],[4065,4065],[4067,4067]]],[1556454854942,["GJX@GJXAIOU",[[1,4066,"三"]],[4066,4066],[4067,4067]]],[1556454922358,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#"],[1,4062," (三)线性"],[1,4064,"存"],[-1,4065,"(三)"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4097,"  "],[-1,4102," "],[1,4103,"概念："],[-1,4139,"  "],[-1,4144,"  "],[1,4146,"-"],[1,4148,"物理上"],[-1,4222,"  "],[-1,4227,"    "],[1,4231,"- 顺序存储"],[-1,4256,"    "],[1,4260,"存储空间"],[-1,4310,"  "],[1,4312,"表的"],[-1,4343,"  "],[1,4345,"3."],[-1,4376,"   "],[1,4379,"- 注意：\n"],[-1,4382,"- \n"],[-1,4472,"\n"],[1,4474,"\n"],[-1,4505,"  "],[-1,4509,"  "],[1,4511,"地址计算"],[1,4514,"\n"],[-1,4517,"\n"],[-1,4520,"\n "],[1,4527,"El"],[-1,4640,"  "],[1,4646,"对于"],[1,4727,"**"],[-1,4741,"**"],[-1,4763,"  "],[1,4769,"元素"],[-1,4857,"    \n "],[1,4867,"c"],[-1,4868,"`"],[1,5247,"`"],[-1,5248,"   "],[-1,5258,"-"],[-1,5260,"插入："],[-1,5270," \n"],[1,5272,"- 插入操作： "],[-1,5427," "],[1,5428,"\n"],[1,5430,"ListIns"],[-1,5467,"     \n "],[1,6062,"**PS：**"],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6846,"\n- 链式存储"],[-1,6856,"结"],[1,6857,"\n"],[1,6862,"链式存储结构"],[1,6869," \n"],[-1,6874,"\n"],[-1,6902,"\n"],[1,6907,"\n"],[1,7068,"数据域和指针域"],[-1,7078,"和指针域"],[1,7269," "],[-1,7279," "],[-1,7298,"\n   "],[1,7305," **概"],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"],[-1,7803,"**注：** 头指针"],[1,7985,"**注：**  头指针"],[-1,7988,"："],[1,7989,"结"],[-1,7992," "],[-1,8028,"**"],[1,8030,"#### "],[-1,8036,"：*#### "],[1,8043,"  \n"],[1,8045," "],[1,8049,"第i个"],[-1,8052," \n "],[-1,8060,"\n"],[1,8071,"指"],[-1,8090,"\n"],[1,8100,"遍"],[-1,8128,"\n"],[1,8138,"为"],[-1,8152,"\n"],[1,8163,"返"],[-1,8165,"否"],[1,8166,"点"],[-1,8171,"\n"],[1,8182,"现"],[-1,8199,"**注：**首先没有"],[1,8624,"**注：** 首先没有"],[-1,8630," "],[-1,8661,"**"],[1,8663,"#### "],[-1,8669,"：*####"],[1,8682,"exp"],[1,8685," "],[-1,8695," "],[1,8725,"\n"],[-1,8735,"\n"],[1,8806,"\n"],[-1,8816,"\n"],[-1,8820,"~~~~"],[1,8824,"```c"],[-1,8830,"```c"],[1,8834,"xt ="],[-1,8857,"    \n~~~~ "],[-1,8886,"数个结"],[1,8889,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8894,"=1；\n"],[1,8898,"从1开始；"],[-1,8914,"P"],[1,8915,"p"],[-1,8929,"个"],[-1,8938,"\n"],[-1,8965,"\n"],[-1,8975,"将欲删除结点p->next赋值给q；\n\n5"],[1,8996,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9001,"删除"],[1,9003,"插入刚才两个"],[-1,9007,"p->next = q->next"],[-1,9026,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9056,"7.返回成功"],[-1,9061,"\n\n\n **注：**"],[-1,9073," 1.插入"],[-1,9082,"和"],[1,9083,"\n"],[-1,9533,"删```除操作"],[1,9540,"\n```\n\n\n"],[-1,9547,"都是遍历找到元素，然后实现插入和"],[1,9563,"单链表的"],[-1,9565,"操作；其时间复杂度均为O（n）;"],[-1,9585," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9703,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9715,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9770,"第i个数据删除节点的算法：**  \n1."],[-1,9772,"一"],[-1,9776,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9817,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9819,"带头"],[-1,9823,"的"],[1,9824,"，j累加1；\n3.若到"],[1,9826,"末尾p为空，则说明第i个元素不存在"],[-1,9828,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9905,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9907,"插到当前链表的表头上，直到结束为止"],[1,9925,"    "],[-1,9927,"**案：** 简单来说，就是把新"],[-1,10367,"加\n"],[1,10369,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10385,"\n"],[1,10388," "],[1,10408," "],[-1,10552,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10574,"\n#### "],[1,10580,"数，"],[1,10587,"  "],[-1,10634,"* "],[1,10636,"-"],[-1,10651,"*"],[1,10652," "],[-1,10663,"*"],[1,10664,";"],[1,10688,"// P是中介结点\n   "],[1,10692," "],[-1,10696,"* "],[1,10698,"(L"],[1,10833,"e"],[-1,10834," "],[-1,10855," "],[1,10856,"**"],[1,10880,"**\n\n"],[-1,11063,""],[1,11063," // r指向列表的尾部，P是一个中介结点"],[-1,11114,"// P是中介结点\n    "],[1,11128,""],[-1,11295,"**"],[-1,11300,"**"],[1,11302,"#### "],[-1,11310,"**"],[-1,11321,"**"],[-1,11325,"\n\n"],[-1,11509,"// r指向列表的尾部 P是一个中介结点"],[1,11529,""],[-1,11750,"#### "],[1,11755,"|-"],[1,11763,"式 "],[-1,12052,"\n\n"],[1,12054,""]],[234,234],[12054,12054]]],[1556454922358,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#"],[-1,4064," (三)线性"],[-1,4072,"存"],[1,4074,"(三)"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4103,"  "],[1,4106," "],[-1,4106,"概念："],[1,4145,"  "],[1,4148,"  "],[-1,4148,"-"],[-1,4151,"物理上"],[1,4228,"  "],[1,4231,"    "],[-1,4231,"- 顺序存储"],[1,4262,"    "],[-1,4262,"存储空间"],[1,4316,"  "],[-1,4316,"表的"],[1,4349,"  "],[-1,4349,"3."],[1,4382,"   "],[-1,4382,"- 注意：\n"],[1,4391,"- \n"],[1,4478,"\n"],[-1,4479,"\n"],[1,4511,"  "],[1,4513,"  "],[-1,4513,"地址计算"],[-1,4520,"\n"],[1,4524,"\n"],[1,4526,"\n "],[-1,4531,"El"],[1,4646,"  "],[-1,4650,"对于"],[-1,4733,"**"],[1,4749,"**"],[1,4769,"  "],[-1,4773,"元素"],[1,4863,"    \n "],[-1,4867,"c"],[1,4869,"`"],[-1,5247,"`"],[1,5249,"   "],[1,5256,"-"],[1,5257,"插入："],[1,5264," \n"],[-1,5264,"- 插入操作： "],[1,5427," "],[-1,5427,"\n"],[-1,5430,"ListIns"],[1,5474,"     \n "],[-1,6062,"**PS：**"],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6853,"\n- 链式存储"],[1,6856,"结"],[-1,6856,"\n"],[-1,6862,"链式存储结构"],[-1,6875," \n"],[1,6882,"\n"],[1,6909,"\n"],[-1,6913,"\n"],[-1,7075,"数据域和指针域"],[1,7092,"和指针域"],[-1,7279," "],[1,7290," "],[1,7308,"\n   "],[-1,7311," **概"],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"],[1,7813,"**注：** 头指针"],[-1,7985,"**注：**  头指针"],[1,7999,"："],[-1,7999,"结"],[1,8003," "],[1,8038,"**"],[-1,8038,"#### "],[1,8049,"：*#### "],[-1,8049,"  \n"],[-1,8054," "],[-1,8059,"第i个"],[1,8065," \n "],[1,8070,"\n"],[-1,8080,"指"],[1,8100,"\n"],[-1,8109,"遍"],[1,8138,"\n"],[-1,8147,"为"],[1,8162,"\n"],[-1,8172,"返"],[1,8175,"否"],[-1,8175,"点"],[1,8181,"\n"],[-1,8191,"现"],[1,8209,"**注：**首先没有"],[-1,8624,"**注：** 首先没有"],[1,8641," "],[1,8671,"**"],[-1,8671,"#### "],[1,8682,"：*####"],[-1,8689,"exp"],[-1,8695," "],[1,8706," "],[-1,8735,"\n"],[1,8746,"\n"],[-1,8816,"\n"],[1,8827,"\n"],[1,8830,"~~~~"],[-1,8830,"```c"],[1,8840,"```c"],[-1,8840,"xt ="],[1,8867,"    \n~~~~ "],[1,8886,"数个结"],[-1,8886,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8934,"=1；\n"],[-1,8934,"从1开始；"],[1,8955,"P"],[-1,8955,"p"],[1,8970,"个"],[1,8978,"\n"],[1,9004,"\n"],[1,9013,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9013,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9053,"删除"],[-1,9053,"插入刚才两个"],[1,9063,"p->next = q->next"],[1,9065,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9065,"7.返回成功"],[1,9076,"\n\n\n **注：**"],[1,9078," 1.插入"],[1,9082,"和"],[-1,9082,"\n"],[1,9533,"删```除操作"],[-1,9533,"\n```\n\n\n"],[1,9547,"都是遍历找到元素，然后实现插入和"],[-1,9547,"单链表的"],[1,9553,"操作；其时间复杂度均为O（n）;"],[1,9557," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9557,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9741,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9741,"第i个数据删除节点的算法：**  \n1."],[1,9763,"一"],[1,9766,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9766,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9815,"带头"],[1,9817,"的"],[-1,9817,"，j累加1；\n3.若到"],[-1,9830,"末尾p为空，则说明第i个元素不存在"],[1,9849,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9849,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9936,"插到当前链表的表头上，直到结束为止"],[-1,9937,"    "],[1,9943,"**案：** 简单来说，就是把新"],[1,10367,"加\n"],[-1,10367,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10832,"\n"],[-1,10834," "],[-1,10855," "],[1,11000,"对于插入和删除操作较为频繁使用单链表\n"],[1,11003,"\n#### "],[-1,11003,"数，"],[-1,11012,"  "],[1,11061,"* "],[-1,11061,"-"],[1,11077,"*"],[-1,11077," "],[1,11089,"*"],[-1,11089,";"],[-1,11114,"// P是中介结点\n   "],[-1,11131," "],[1,11136,"* "],[-1,11136,"(L"],[-1,11273,"e"],[1,11275," "],[1,11295," "],[-1,11295,"**"],[-1,11321,"**\n\n"],[1,11508,""],[-1,11508," // r指向列表的尾部，P是一个中介结点"],[1,11580,"// P是中介结点\n    "],[-1,11580,""],[1,11747,"**"],[1,11750,"**"],[-1,11750,"#### "],[1,11763,"**"],[1,11772,"**"],[1,11774,"\n\n"],[1,11956,"// r指向列表的尾部 P是一个中介结点"],[-1,11956,""],[1,12177,"#### "],[-1,12177,"|-"],[-1,12187,"式 "],[1,12478,"\n\n"],[-1,12478,""]],[12054,12054],[234,234]]],[1556454873812,["GJX@GJXAIOU",[[-1,4065,"(三)"],[1,4068,"（"]],[4065,4065],[4066,4066]]],[1556454873918,["GJX@GJXAIOU",[[1,4066,"）"]],[4066,4066],[4067,4067]]],[1556454876379,["GJX@GJXAIOU",[[1,4066,"三"]],[4066,4066],[4067,4067]]],[1556454982373,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#"],[1,4062," （三）线性"],[1,4064,"存"],[-1,4065,"（三）"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4097,"  "],[-1,4102," "],[1,4103,"概念："],[-1,4139,"  "],[-1,4144,"  "],[1,4146,"-"],[1,4148,"物理上"],[-1,4222,"  "],[-1,4227,"    "],[1,4231,"- 顺序存储"],[-1,4256,"    "],[1,4260,"存储空间"],[-1,4310,"  "],[1,4312,"表的"],[-1,4343,"  "],[1,4345,"3."],[-1,4376,"   "],[1,4379,"- 注意：\n"],[-1,4382,"- \n"],[-1,4472,"\n"],[1,4474,"\n"],[-1,4505,"  "],[-1,4509,"  "],[1,4511,"地址计算"],[1,4514,"\n"],[-1,4517,"\n"],[-1,4520,"\n "],[1,4527,"El"],[-1,4640,"  "],[1,4646,"对于"],[1,4727,"**"],[-1,4741,"**"],[-1,4763,"  "],[1,4769,"元素"],[-1,4857,"    \n "],[1,4867,"c"],[-1,4868,"`"],[1,5247,"`"],[-1,5248,"   "],[-1,5258,"-"],[-1,5260,"插入："],[-1,5270," \n"],[1,5272,"- 插入操作： "],[-1,5427," "],[1,5428,"\n"],[1,5430,"ListIns"],[-1,5467,"     \n "],[1,6062,"**PS：**"],[-1,6079,"  "],[1,6085,"操作"],[-1,6193,"   \n   "],[1,6200,""],[-1,6682,""],[1,6682,"       "],[-1,6703,"    "],[-1,6709," \n"],[1,6711,"总结"],[1,6714,"\n"],[1,6716,"-"],[1,6718,"点："],[-1,6772,"   "],[1,6775,"- 缺"],[-1,6846,"\n- 链式存储"],[-1,6856,"结"],[1,6857,"\n"],[1,6862,"链式存储结构"],[1,6869," \n"],[-1,6874,"\n"],[-1,6902,"\n"],[1,6907,"\n"],[1,7068,"数据域和指针域"],[-1,7078,"和指针域"],[1,7269," "],[-1,7279," "],[-1,7298,"\n   "],[1,7305," **概"],[-1,7623,"\n![单链表中的头结"],[1,7671,"\n![单链表中的头结"],[-1,7803,"**注：** 头指针"],[1,7985,"**注：**  头指针"],[-1,7988,"："],[1,7989,"结"],[-1,7992," "],[-1,8028,"**"],[1,8030,"#### "],[-1,8036,"：*#### "],[1,8043,"  \n"],[1,8045," "],[1,8049,"第i个"],[-1,8052," \n "],[-1,8060,"\n"],[1,8071,"指"],[-1,8090,"\n"],[1,8100,"遍"],[-1,8128,"\n"],[1,8138,"为"],[-1,8152,"\n"],[1,8163,"返"],[-1,8165,"否"],[1,8166,"点"],[-1,8171,"\n"],[1,8182,"现"],[-1,8199,"**注：**首先没有"],[1,8624,"**注：** 首先没有"],[-1,8630," "],[-1,8661,"**"],[1,8663,"#### "],[-1,8669,"：*####"],[1,8682,"exp"],[1,8685," "],[-1,8695," "],[1,8725,"\n"],[-1,8735,"\n"],[1,8806,"\n"],[-1,8816,"\n"],[-1,8820,"~~~~"],[1,8824,"```c"],[-1,8830,"```c"],[1,8834,"xt ="],[-1,8857,"    \n~~~~ "],[-1,8886,"数个结"],[1,8889,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8894,"=1；\n"],[1,8898,"从1开始；"],[-1,8914,"P"],[1,8915,"p"],[-1,8929,"个"],[-1,8938,"\n"],[-1,8965,"\n"],[-1,8975,"将欲删除结点p->next赋值给q；\n\n5"],[1,8996,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9001,"删除"],[1,9003,"插入刚才两个"],[-1,9007,"p->next = q->next"],[-1,9026,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9056,"7.返回成功"],[-1,9061,"\n\n\n **注：**"],[-1,9073," 1.插入"],[-1,9082,"和"],[1,9083,"\n"],[-1,9533,"删```除操作"],[1,9540,"\n```\n\n\n"],[-1,9547,"都是遍历找到元素，然后实现插入和"],[1,9563,"单链表的"],[-1,9565,"操作；其时间复杂度均为O（n）;"],[-1,9585," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9703,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9715,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9770,"第i个数据删除节点的算法：**  \n1."],[-1,9772,"一"],[-1,9776,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9817,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9819,"带头"],[-1,9823,"的"],[1,9824,"，j累加1；\n3.若到"],[1,9826,"末尾p为空，则说明第i个元素不存在"],[-1,9828,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9905,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9907,"插到当前链表的表头上，直到结束为止"],[1,9925,"    "],[-1,9927,"**案：** 简单来说，就是把新"],[-1,10367,"加\n"],[1,10369,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10385,"\n"],[1,10388," "],[1,10408," "],[-1,10552,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10574,"\n#### "],[1,10580,"数，"],[1,10587,"  "],[-1,10634,"* "],[1,10636,"-"],[-1,10651,"*"],[1,10652," "],[-1,10663,"*"],[1,10664,";"],[1,10688,"// P是中介结点\n   "],[1,10692," "],[-1,10696,"* "],[1,10698,"(L"],[1,10833,"e"],[-1,10834," "],[-1,10855," "],[1,10856,"**"],[1,10880,"**\n\n"],[-1,11063,""],[1,11063," // r指向列表的尾部，P是一个中介结点"],[-1,11114,"// P是中介结点\n    "],[1,11128,""],[-1,11295,"**"],[-1,11300,"**"],[1,11302,"#### "],[-1,11310,"**"],[-1,11321,"**"],[-1,11325,"\n\n"],[-1,11509,"// r指向列表的尾部 P是一个中介结点"],[1,11529,""],[-1,11750,"#### "],[1,11755,"|-"],[1,11763,"式 "],[-1,12052,"\n\n"],[1,12054,""]],[234,234],[12054,12054]]],[1556454982374,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#"],[-1,4064," （三）线性"],[-1,4072,"存"],[1,4074,"（三）"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4103,"  "],[1,4106," "],[-1,4106,"概念："],[1,4145,"  "],[1,4148,"  "],[-1,4148,"-"],[-1,4151,"物理上"],[1,4228,"  "],[1,4231,"    "],[-1,4231,"- 顺序存储"],[1,4262,"    "],[-1,4262,"存储空间"],[1,4316,"  "],[-1,4316,"表的"],[1,4349,"  "],[-1,4349,"3."],[1,4382,"   "],[-1,4382,"- 注意：\n"],[1,4391,"- \n"],[1,4478,"\n"],[-1,4479,"\n"],[1,4511,"  "],[1,4513,"  "],[-1,4513,"地址计算"],[-1,4520,"\n"],[1,4524,"\n"],[1,4526,"\n "],[-1,4531,"El"],[1,4646,"  "],[-1,4650,"对于"],[-1,4733,"**"],[1,4749,"**"],[1,4769,"  "],[-1,4773,"元素"],[1,4863,"    \n "],[-1,4867,"c"],[1,4869,"`"],[-1,5247,"`"],[1,5249,"   "],[1,5256,"-"],[1,5257,"插入："],[1,5264," \n"],[-1,5264,"- 插入操作： "],[1,5427," "],[-1,5427,"\n"],[-1,5430,"ListIns"],[1,5474,"     \n "],[-1,6062,"**PS：**"],[1,6086,"  "],[-1,6090,"操作"],[1,6200,"   \n   "],[-1,6200,""],[1,6682,""],[-1,6682,"       "],[1,6710,"    "],[1,6712," \n"],[-1,6712,"总结"],[-1,6717,"\n"],[-1,6720,"-"],[-1,6723,"点："],[1,6779,"   "],[-1,6779,"- 缺"],[1,6853,"\n- 链式存储"],[1,6856,"结"],[-1,6856,"\n"],[-1,6862,"链式存储结构"],[-1,6875," \n"],[1,6882,"\n"],[1,6909,"\n"],[-1,6913,"\n"],[-1,7075,"数据域和指针域"],[1,7092,"和指针域"],[-1,7279," "],[1,7290," "],[1,7308,"\n   "],[-1,7311," **概"],[1,7633,"\n![单链表中的头结"],[-1,7671,"\n![单链表中的头结"],[1,7813,"**注：** 头指针"],[-1,7985,"**注：**  头指针"],[1,7999,"："],[-1,7999,"结"],[1,8003," "],[1,8038,"**"],[-1,8038,"#### "],[1,8049,"：*#### "],[-1,8049,"  \n"],[-1,8054," "],[-1,8059,"第i个"],[1,8065," \n "],[1,8070,"\n"],[-1,8080,"指"],[1,8100,"\n"],[-1,8109,"遍"],[1,8138,"\n"],[-1,8147,"为"],[1,8162,"\n"],[-1,8172,"返"],[1,8175,"否"],[-1,8175,"点"],[1,8181,"\n"],[-1,8191,"现"],[1,8209,"**注：**首先没有"],[-1,8624,"**注：** 首先没有"],[1,8641," "],[1,8671,"**"],[-1,8671,"#### "],[1,8682,"：*####"],[-1,8689,"exp"],[-1,8695," "],[1,8706," "],[-1,8735,"\n"],[1,8746,"\n"],[-1,8816,"\n"],[1,8827,"\n"],[1,8830,"~~~~"],[-1,8830,"```c"],[1,8840,"```c"],[-1,8840,"xt ="],[1,8867,"    \n~~~~ "],[1,8886,"数个结"],[-1,8886,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8934,"=1；\n"],[-1,8934,"从1开始；"],[1,8955,"P"],[-1,8955,"p"],[1,8970,"个"],[1,8978,"\n"],[1,9004,"\n"],[1,9013,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9013,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9053,"删除"],[-1,9053,"插入刚才两个"],[1,9063,"p->next = q->next"],[1,9065,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9065,"7.返回成功"],[1,9076,"\n\n\n **注：**"],[1,9078," 1.插入"],[1,9082,"和"],[-1,9082,"\n"],[1,9533,"删```除操作"],[-1,9533,"\n```\n\n\n"],[1,9547,"都是遍历找到元素，然后实现插入和"],[-1,9547,"单链表的"],[1,9553,"操作；其时间复杂度均为O（n）;"],[1,9557," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9557,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9741,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9741,"第i个数据删除节点的算法：**  \n1."],[1,9763,"一"],[1,9766,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9766,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9815,"带头"],[1,9817,"的"],[-1,9817,"，j累加1；\n3.若到"],[-1,9830,"末尾p为空，则说明第i个元素不存在"],[1,9849,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9849,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9936,"插到当前链表的表头上，直到结束为止"],[-1,9937,"    "],[1,9943,"**案：** 简单来说，就是把新"],[1,10367,"加\n"],[-1,10367,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10832,"\n"],[-1,10834," "],[-1,10855," "],[1,11000,"对于插入和删除操作较为频繁使用单链表\n"],[1,11003,"\n#### "],[-1,11003,"数，"],[-1,11012,"  "],[1,11061,"* "],[-1,11061,"-"],[1,11077,"*"],[-1,11077," "],[1,11089,"*"],[-1,11089,";"],[-1,11114,"// P是中介结点\n   "],[-1,11131," "],[1,11136,"* "],[-1,11136,"(L"],[-1,11273,"e"],[1,11275," "],[1,11295," "],[-1,11295,"**"],[-1,11321,"**\n\n"],[1,11508,""],[-1,11508," // r指向列表的尾部，P是一个中介结点"],[1,11580,"// P是中介结点\n    "],[-1,11580,""],[1,11747,"**"],[1,11750,"**"],[-1,11750,"#### "],[1,11763,"**"],[1,11772,"**"],[1,11774,"\n\n"],[1,11956,"// r指向列表的尾部 P是一个中介结点"],[-1,11956,""],[1,12177,"#### "],[-1,12177,"|-"],[-1,12187,"式 "],[1,12478,"\n\n"],[-1,12478,""]],[12054,12054],[234,234]]],[1556454938686,["GJX@GJXAIOU",[[1,4106,"**"],[1,4108,"**"]],[4106,4108],[4106,4112]]],[1556454943288,["GJX@GJXAIOU",[[1,4155,"**"],[1,4163,"**"]],[4155,4163],[4155,4167]]],[1556454948285,["GJX@GJXAIOU",[[1,4241,"**"],[1,4255,"**"]],[4241,4255],[4241,4259]]],[1556454951332,["GJX@GJXAIOU",[[1,4395,"**"],[1,4398,"**"]],[4395,4398],[4395,4402]]],[1556454953142,["GJX@GJXAIOU",[[-1,4397," "]],[4398,4398],[4397,4397]]],[1556454955795,["GJX@GJXAIOU",[[1,4395," "]],[4395,4395],[4396,4396]]],[1556454963666,["GJX@GJXAIOU",[[-1,4101,"  "],[-1,4147,"  "],[-1,4150,"  "],[-1,4234,"  "],[-1,4237,"  "],[-1,4264," "],[-1,4271," "],[-1,4322,"  "],[-1,4353,"  "],[-1,4389,"  "],[-1,4392,"  "],[-1,4404," "],[-1,4411," "],[-1,4502,"  "],[-1,4522,"  "],[-1,4525,"  "],[-1,4537,"  "],[-1,4647,"  "],[-1,4660,"  "],[-1,4771,"  "],[-1,4774,"  "],[-1,4783,"  "],[-1,4798,"  "]],[4103,4879],[4101,4837]]],[1556454970313,["GJX@GJXAIOU",[[1,4501,"**"],[1,4508,"**"]],[4501,4508],[4501,4512]]],[1556454976428,["GJX@GJXAIOU",[[1,4751,"**"],[1,4757,"**"]],[4751,4757],[4751,4761]]],[1556455042366,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4247,"**"],[-1,4254," "],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4361,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4385,"  "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"  "],[-1,4628,"  "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**"],[1,4735,"\n"],[-1,4737,"\n"],[-1,4743,"    "],[1,4749,"**获取元素"],[-1,4759,"**"],[-1,4839,"    \n "],[1,4849,"c"],[-1,4850,"`"],[1,5229,"`"],[-1,5230,"   "],[-1,5240,"-"],[-1,5242,"插入："],[-1,5252," \n"],[1,5254,"- 插入操作： "],[-1,5409," "],[1,5410,"\n"],[1,5412,"ListIns"],[-1,5449,"     \n "],[1,6044,"**PS：**"],[-1,6061,"  "],[1,6067,"操作"],[-1,6175,"   \n   "],[1,6182,""],[-1,6664,""],[1,6664,"       "],[-1,6685,"    "],[-1,6691," \n"],[1,6693,"总结"],[1,6696,"\n"],[1,6698,"-"],[1,6700,"点："],[-1,6754,"   "],[1,6757,"- 缺"],[-1,6828,"\n- 链式存储"],[-1,6838,"结"],[1,6839,"\n"],[1,6844,"链式存储结构"],[1,6851," \n"],[-1,6856,"\n"],[-1,6884,"\n"],[1,6889,"\n"],[1,7050,"数据域和指针域"],[-1,7060,"和指针域"],[1,7251," "],[-1,7261," "],[-1,7280,"\n   "],[1,7287," **概"],[-1,7605,"\n![单链表中的头结"],[1,7653,"\n![单链表中的头结"],[-1,7785,"**注：** 头指针"],[1,7967,"**注：**  头指针"],[-1,7970,"："],[1,7971,"结"],[-1,7974," "],[-1,8010,"**"],[1,8012,"#### "],[-1,8018,"：*#### "],[1,8025,"  \n"],[1,8027," "],[1,8031,"第i个"],[-1,8034," \n "],[-1,8042,"\n"],[1,8053,"指"],[-1,8072,"\n"],[1,8082,"遍"],[-1,8110,"\n"],[1,8120,"为"],[-1,8134,"\n"],[1,8145,"返"],[-1,8147,"否"],[1,8148,"点"],[-1,8153,"\n"],[1,8164,"现"],[-1,8181,"**注：**首先没有"],[1,8606,"**注：** 首先没有"],[-1,8612," "],[-1,8643,"**"],[1,8645,"#### "],[-1,8651,"：*####"],[1,8664,"exp"],[1,8667," "],[-1,8677," "],[1,8707,"\n"],[-1,8717,"\n"],[1,8788,"\n"],[-1,8798,"\n"],[-1,8802,"~~~~"],[1,8806,"```c"],[-1,8812,"```c"],[1,8816,"xt ="],[-1,8839,"    \n~~~~ "],[-1,8868,"数个结"],[1,8871,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8876,"=1；\n"],[1,8880,"从1开始；"],[-1,8896,"P"],[1,8897,"p"],[-1,8911,"个"],[-1,8920,"\n"],[-1,8947,"\n"],[-1,8957,"将欲删除结点p->next赋值给q；\n\n5"],[1,8978,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,8983,"删除"],[1,8985,"插入刚才两个"],[-1,8989,"p->next = q->next"],[-1,9008,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9038,"7.返回成功"],[-1,9043,"\n\n\n **注：**"],[-1,9055," 1.插入"],[-1,9064,"和"],[1,9065,"\n"],[-1,9515,"删```除操作"],[1,9522,"\n```\n\n\n"],[-1,9529,"都是遍历找到元素，然后实现插入和"],[1,9545,"单链表的"],[-1,9547,"操作；其时间复杂度均为O（n）;"],[-1,9567," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9685,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9697,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9752,"第i个数据删除节点的算法：**  \n1."],[-1,9754,"一"],[-1,9758,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9799,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9801,"带头"],[-1,9805,"的"],[1,9806,"，j累加1；\n3.若到"],[1,9808,"末尾p为空，则说明第i个元素不存在"],[-1,9810,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9887,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9889,"插到当前链表的表头上，直到结束为止"],[1,9907,"    "],[-1,9909,"**案：** 简单来说，就是把新"],[-1,10349,"加\n"],[1,10351,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10367,"\n"],[1,10370," "],[1,10390," "],[-1,10534,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10556,"\n#### "],[1,10562,"数，"],[1,10569,"  "],[-1,10616,"* "],[1,10618,"-"],[-1,10633,"*"],[1,10634," "],[-1,10645,"*"],[1,10646,";"],[1,10670,"// P是中介结点\n   "],[1,10674," "],[-1,10678,"* "],[1,10680,"(L"],[1,10815,"e"],[-1,10816," "],[-1,10837," "],[1,10838,"**"],[1,10862,"**\n\n"],[-1,11045,""],[1,11045," // r指向列表的尾部，P是一个中介结点"],[-1,11096,"// P是中介结点\n    "],[1,11110,""],[-1,11277,"**"],[-1,11282,"**"],[1,11284,"#### "],[-1,11292,"**"],[-1,11303,"**"],[-1,11307,"\n\n"],[-1,11491,"// r指向列表的尾部 P是一个中介结点"],[1,11511,""],[-1,11732,"#### "],[1,11737,"|-"],[1,11745,"式 "],[-1,12034,"\n\n"],[1,12036,""]],[234,234],[12036,12036]]],[1556455042366,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4255,"**"],[1,4260," "],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4367,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4388,"  "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"  "],[1,4632,"  "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**"],[-1,4741,"\n"],[1,4744,"\n"],[1,4749,"    "],[-1,4751,"**获取元素"],[1,4767,"**"],[1,4845,"    \n "],[-1,4849,"c"],[1,4851,"`"],[-1,5229,"`"],[1,5231,"   "],[1,5238,"-"],[1,5239,"插入："],[1,5246," \n"],[-1,5246,"- 插入操作： "],[1,5409," "],[-1,5409,"\n"],[-1,5412,"ListIns"],[1,5456,"     \n "],[-1,6044,"**PS：**"],[1,6068,"  "],[-1,6072,"操作"],[1,6182,"   \n   "],[-1,6182,""],[1,6664,""],[-1,6664,"       "],[1,6692,"    "],[1,6694," \n"],[-1,6694,"总结"],[-1,6699,"\n"],[-1,6702,"-"],[-1,6705,"点："],[1,6761,"   "],[-1,6761,"- 缺"],[1,6835,"\n- 链式存储"],[1,6838,"结"],[-1,6838,"\n"],[-1,6844,"链式存储结构"],[-1,6857," \n"],[1,6864,"\n"],[1,6891,"\n"],[-1,6895,"\n"],[-1,7057,"数据域和指针域"],[1,7074,"和指针域"],[-1,7261," "],[1,7272," "],[1,7290,"\n   "],[-1,7293," **概"],[1,7615,"\n![单链表中的头结"],[-1,7653,"\n![单链表中的头结"],[1,7795,"**注：** 头指针"],[-1,7967,"**注：**  头指针"],[1,7981,"："],[-1,7981,"结"],[1,7985," "],[1,8020,"**"],[-1,8020,"#### "],[1,8031,"：*#### "],[-1,8031,"  \n"],[-1,8036," "],[-1,8041,"第i个"],[1,8047," \n "],[1,8052,"\n"],[-1,8062,"指"],[1,8082,"\n"],[-1,8091,"遍"],[1,8120,"\n"],[-1,8129,"为"],[1,8144,"\n"],[-1,8154,"返"],[1,8157,"否"],[-1,8157,"点"],[1,8163,"\n"],[-1,8173,"现"],[1,8191,"**注：**首先没有"],[-1,8606,"**注：** 首先没有"],[1,8623," "],[1,8653,"**"],[-1,8653,"#### "],[1,8664,"：*####"],[-1,8671,"exp"],[-1,8677," "],[1,8688," "],[-1,8717,"\n"],[1,8728,"\n"],[-1,8798,"\n"],[1,8809,"\n"],[1,8812,"~~~~"],[-1,8812,"```c"],[1,8822,"```c"],[-1,8822,"xt ="],[1,8849,"    \n~~~~ "],[1,8868,"数个结"],[-1,8868,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8916,"=1；\n"],[-1,8916,"从1开始；"],[1,8937,"P"],[-1,8937,"p"],[1,8952,"个"],[1,8960,"\n"],[1,8986,"\n"],[1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[-1,8995,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9035,"删除"],[-1,9035,"插入刚才两个"],[1,9045,"p->next = q->next"],[1,9047,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9047,"7.返回成功"],[1,9058,"\n\n\n **注：**"],[1,9060," 1.插入"],[1,9064,"和"],[-1,9064,"\n"],[1,9515,"删```除操作"],[-1,9515,"\n```\n\n\n"],[1,9529,"都是遍历找到元素，然后实现插入和"],[-1,9529,"单链表的"],[1,9535,"操作；其时间复杂度均为O（n）;"],[1,9539," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9539,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9723,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9723,"第i个数据删除节点的算法：**  \n1."],[1,9745,"一"],[1,9748,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9748,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9797,"带头"],[1,9799,"的"],[-1,9799,"，j累加1；\n3.若到"],[-1,9812,"末尾p为空，则说明第i个元素不存在"],[1,9831,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9831,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9918,"插到当前链表的表头上，直到结束为止"],[-1,9919,"    "],[1,9925,"**案：** 简单来说，就是把新"],[1,10349,"加\n"],[-1,10349,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10814,"\n"],[-1,10816," "],[-1,10837," "],[1,10982,"对于插入和删除操作较为频繁使用单链表\n"],[1,10985,"\n#### "],[-1,10985,"数，"],[-1,10994,"  "],[1,11043,"* "],[-1,11043,"-"],[1,11059,"*"],[-1,11059," "],[1,11071,"*"],[-1,11071,";"],[-1,11096,"// P是中介结点\n   "],[-1,11113," "],[1,11118,"* "],[-1,11118,"(L"],[-1,11255,"e"],[1,11257," "],[1,11277," "],[-1,11277,"**"],[-1,11303,"**\n\n"],[1,11490,""],[-1,11490," // r指向列表的尾部，P是一个中介结点"],[1,11562,"// P是中介结点\n    "],[-1,11562,""],[1,11729,"**"],[1,11732,"**"],[-1,11732,"#### "],[1,11745,"**"],[1,11754,"**"],[1,11756,"\n\n"],[1,11938,"// r指向列表的尾部 P是一个中介结点"],[-1,11938,""],[1,12159,"#### "],[-1,12159,"|-"],[-1,12169,"式 "],[1,12460,"\n\n"],[-1,12460,""]],[12036,12036],[234,234]]],[1556455015378,["GJX@GJXAIOU",[[-1,4751,"**"],[-1,4749,"- **"]],[4755,4755],[4749,4749]]],[1556455016296,["GJX@GJXAIOU",[[1,4749,"#### "]],[4749,4749],[4764,4764]]],[1556455020265,["GJX@GJXAIOU",[[-1,4759,"作；   "]],[4764,4764],[4759,4759]]],[1556455022900,["GJX@GJXAIOU",[[1,4759,"做"]],[4759,4759],[4760,4760]]],[1556455023356,["GJX@GJXAIOU",[[-1,4759,"做"]],[4760,4760],[4759,4759]]],[1556455025725,["GJX@GJXAIOU",[[1,4759,"作"]],[4759,4759],[4760,4760]]],[1556455032056,["GJX@GJXAIOU",[[-1,5239,"  "],[-1,5260," "],[-1,5265," "],[-1,5284,"  "],[-1,5328,"  "],[-1,5372,"  "],[-1,5390,"  "]],[5239,5405],[5238,5393]]],[1556455032441,["GJX@GJXAIOU",[[-1,5238," "],[-1,5258,"  "],[-1,5282,"  "],[-1,5318," "],[-1,5321," "],[-1,5362,"  "],[-1,5380,"  "]],[5238,5393],[5238,5383]]],[1556455038918,["GJX@GJXAIOU",[[1,5238,"#### "]],[5238,5240],[5252,5252]]],[1556455041580,["GJX@GJXAIOU",[[-1,5243,"- "]],[5245,5245],[5243,5243]]],[1556455102391,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6040,"  "],[1,6046,"操作"],[-1,6154,"   \n   "],[1,6161,""],[-1,6643,""],[1,6643,"       "],[-1,6664,"    "],[-1,6670," \n"],[1,6672,"总结"],[1,6675,"\n"],[1,6677,"-"],[1,6679,"点："],[-1,6733,"   "],[1,6736,"- 缺"],[-1,6807,"\n- 链式存储"],[-1,6817,"结"],[1,6818,"\n"],[1,6823,"链式存储结构"],[1,6830," \n"],[-1,6835,"\n"],[-1,6863,"\n"],[1,6868,"\n"],[1,7029,"数据域和指针域"],[-1,7039,"和指针域"],[1,7230," "],[-1,7240," "],[-1,7259,"\n   "],[1,7266," **概"],[-1,7584,"\n![单链表中的头结"],[1,7632,"\n![单链表中的头结"],[-1,7764,"**注：** 头指针"],[1,7946,"**注：**  头指针"],[-1,7949,"："],[1,7950,"结"],[-1,7953," "],[-1,7989,"**"],[1,7991,"#### "],[-1,7997,"：*#### "],[1,8004,"  \n"],[1,8006," "],[1,8010,"第i个"],[-1,8013," \n "],[-1,8021,"\n"],[1,8032,"指"],[-1,8051,"\n"],[1,8061,"遍"],[-1,8089,"\n"],[1,8099,"为"],[-1,8113,"\n"],[1,8124,"返"],[-1,8126,"否"],[1,8127,"点"],[-1,8132,"\n"],[1,8143,"现"],[-1,8160,"**注：**首先没有"],[1,8585,"**注：** 首先没有"],[-1,8591," "],[-1,8622,"**"],[1,8624,"#### "],[-1,8630,"：*####"],[1,8643,"exp"],[1,8646," "],[-1,8656," "],[1,8686,"\n"],[-1,8696,"\n"],[1,8767,"\n"],[-1,8777,"\n"],[-1,8781,"~~~~"],[1,8785,"```c"],[-1,8791,"```c"],[1,8795,"xt ="],[-1,8818,"    \n~~~~ "],[-1,8847,"数个结"],[1,8850,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8855,"=1；\n"],[1,8859,"从1开始；"],[-1,8875,"P"],[1,8876,"p"],[-1,8890,"个"],[-1,8899,"\n"],[-1,8926,"\n"],[-1,8936,"将欲删除结点p->next赋值给q；\n\n5"],[1,8957,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,8962,"删除"],[1,8964,"插入刚才两个"],[-1,8968,"p->next = q->next"],[-1,8987,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9017,"7.返回成功"],[-1,9022,"\n\n\n **注：**"],[-1,9034," 1.插入"],[-1,9043,"和"],[1,9044,"\n"],[-1,9494,"删```除操作"],[1,9501,"\n```\n\n\n"],[-1,9508,"都是遍历找到元素，然后实现插入和"],[1,9524,"单链表的"],[-1,9526,"操作；其时间复杂度均为O（n）;"],[-1,9546," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9664,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9676,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9731,"第i个数据删除节点的算法：**  \n1."],[-1,9733,"一"],[-1,9737,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9778,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9780,"带头"],[-1,9784,"的"],[1,9785,"，j累加1；\n3.若到"],[1,9787,"末尾p为空，则说明第i个元素不存在"],[-1,9789,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9866,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9868,"插到当前链表的表头上，直到结束为止"],[1,9886,"    "],[-1,9888,"**案：** 简单来说，就是把新"],[-1,10328,"加\n"],[1,10330,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10346,"\n"],[1,10349," "],[1,10369," "],[-1,10513,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10535,"\n#### "],[1,10541,"数，"],[1,10548,"  "],[-1,10595,"* "],[1,10597,"-"],[-1,10612,"*"],[1,10613," "],[-1,10624,"*"],[1,10625,";"],[1,10649,"// P是中介结点\n   "],[1,10653," "],[-1,10657,"* "],[1,10659,"(L"],[1,10794,"e"],[-1,10795," "],[-1,10816," "],[1,10817,"**"],[1,10841,"**\n\n"],[-1,11024,""],[1,11024," // r指向列表的尾部，P是一个中介结点"],[-1,11075,"// P是中介结点\n    "],[1,11089,""],[-1,11256,"**"],[-1,11261,"**"],[1,11263,"#### "],[-1,11271,"**"],[-1,11282,"**"],[-1,11286,"\n\n"],[-1,11470,"// r指向列表的尾部 P是一个中介结点"],[1,11490,""],[-1,11711,"#### "],[1,11716,"|-"],[1,11724,"式 "],[-1,12013,"\n\n"],[1,12015,""]],[234,234],[12015,12015]]],[1556455102391,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6043,"  "],[-1,6047,"操作"],[1,6157,"   \n   "],[-1,6157,""],[1,6639,""],[-1,6639,"       "],[1,6667,"    "],[1,6669," \n"],[-1,6669,"总结"],[-1,6674,"\n"],[-1,6677,"-"],[-1,6680,"点："],[1,6736,"   "],[-1,6736,"- 缺"],[1,6810,"\n- 链式存储"],[1,6813,"结"],[-1,6813,"\n"],[-1,6819,"链式存储结构"],[-1,6832," \n"],[1,6839,"\n"],[1,6866,"\n"],[-1,6870,"\n"],[-1,7032,"数据域和指针域"],[1,7049,"和指针域"],[-1,7236," "],[1,7247," "],[1,7265,"\n   "],[-1,7268," **概"],[1,7590,"\n![单链表中的头结"],[-1,7628,"\n![单链表中的头结"],[1,7770,"**注：** 头指针"],[-1,7942,"**注：**  头指针"],[1,7956,"："],[-1,7956,"结"],[1,7960," "],[1,7995,"**"],[-1,7995,"#### "],[1,8006,"：*#### "],[-1,8006,"  \n"],[-1,8011," "],[-1,8016,"第i个"],[1,8022," \n "],[1,8027,"\n"],[-1,8037,"指"],[1,8057,"\n"],[-1,8066,"遍"],[1,8095,"\n"],[-1,8104,"为"],[1,8119,"\n"],[-1,8129,"返"],[1,8132,"否"],[-1,8132,"点"],[1,8138,"\n"],[-1,8148,"现"],[1,8166,"**注：**首先没有"],[-1,8581,"**注：** 首先没有"],[1,8598," "],[1,8628,"**"],[-1,8628,"#### "],[1,8639,"：*####"],[-1,8646,"exp"],[-1,8652," "],[1,8663," "],[-1,8692,"\n"],[1,8703,"\n"],[-1,8773,"\n"],[1,8784,"\n"],[1,8787,"~~~~"],[-1,8787,"```c"],[1,8797,"```c"],[-1,8797,"xt ="],[1,8824,"    \n~~~~ "],[1,8843,"数个结"],[-1,8843,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8891,"=1；\n"],[-1,8891,"从1开始；"],[1,8912,"P"],[-1,8912,"p"],[1,8927,"个"],[1,8935,"\n"],[1,8961,"\n"],[1,8970,"将欲删除结点p->next赋值给q；\n\n5"],[-1,8970,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9010,"删除"],[-1,9010,"插入刚才两个"],[1,9020,"p->next = q->next"],[1,9022,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9022,"7.返回成功"],[1,9033,"\n\n\n **注：**"],[1,9035," 1.插入"],[1,9039,"和"],[-1,9039,"\n"],[1,9490,"删```除操作"],[-1,9490,"\n```\n\n\n"],[1,9504,"都是遍历找到元素，然后实现插入和"],[-1,9504,"单链表的"],[1,9510,"操作；其时间复杂度均为O（n）;"],[1,9514," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9514,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9698,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9698,"第i个数据删除节点的算法：**  \n1."],[1,9720,"一"],[1,9723,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9723,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9772,"带头"],[1,9774,"的"],[-1,9774,"，j累加1；\n3.若到"],[-1,9787,"末尾p为空，则说明第i个元素不存在"],[1,9806,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9806,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9893,"插到当前链表的表头上，直到结束为止"],[-1,9894,"    "],[1,9900,"**案：** 简单来说，就是把新"],[1,10324,"加\n"],[-1,10324,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10789,"\n"],[-1,10791," "],[-1,10812," "],[1,10957,"对于插入和删除操作较为频繁使用单链表\n"],[1,10960,"\n#### "],[-1,10960,"数，"],[-1,10969,"  "],[1,11018,"* "],[-1,11018,"-"],[1,11034,"*"],[-1,11034," "],[1,11046,"*"],[-1,11046,";"],[-1,11071,"// P是中介结点\n   "],[-1,11088," "],[1,11093,"* "],[-1,11093,"(L"],[-1,11230,"e"],[1,11232," "],[1,11252," "],[-1,11252,"**"],[-1,11278,"**\n\n"],[1,11465,""],[-1,11465," // r指向列表的尾部，P是一个中介结点"],[1,11537,"// P是中介结点\n    "],[-1,11537,""],[1,11704,"**"],[1,11707,"**"],[-1,11707,"#### "],[1,11720,"**"],[1,11729,"**"],[1,11731,"\n\n"],[1,11913,"// r指向列表的尾部 P是一个中介结点"],[-1,11913,""],[1,12134,"#### "],[-1,12134,"|-"],[-1,12144,"式 "],[1,12435,"\n\n"],[-1,12435,""]],[12015,12015],[234,234]]],[1556455047949,["GJX@GJXAIOU",[[-1,6041,"  "],[-1,6055,"  "],[-1,6080," "],[-1,6086," "],[-1,6097,"  "],[-1,6143,"  "]],[6045,6157],[6043,6147]]],[1556455048419,["GJX@GJXAIOU",[[-1,6056,"  "],[-1,6079,"  "],[-1,6091,"  "],[-1,6135,"  "]],[6043,6147],[6043,6139]]],[1556455052297,["GJX@GJXAIOU",[[1,6041,"#### "]],[6041,6043],[6057,6057]]],[1556455055268,["GJX@GJXAIOU",[[-1,6046,"- "]],[6048,6048],[6046,6046]]],[1556455056085,["GJX@GJXAIOU",[[1,6046," "]],[6046,6046],[6047,6047]]],[1556455058647,["GJX@GJXAIOU",[[-1,6051,"："]],[6052,6052],[6051,6051]]],[1556456422516,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7569,"\n![单链表中的头结"],[1,7617,"\n![单链表中的头结"],[-1,7749,"**注：** 头指针"],[1,7931,"**注：**  头指针"],[-1,7934,"："],[1,7935,"结"],[-1,7938," "],[-1,7974,"**"],[1,7976,"#### "],[-1,7982,"：*#### "],[1,7989,"  \n"],[1,7991," "],[1,7995,"第i个"],[-1,7998," \n "],[-1,8006,"\n"],[1,8017,"指"],[-1,8036,"\n"],[1,8046,"遍"],[-1,8074,"\n"],[1,8084,"为"],[-1,8098,"\n"],[1,8109,"返"],[-1,8111,"否"],[1,8112,"点"],[-1,8117,"\n"],[1,8128,"现"],[-1,8145,"**注：**首先没有"],[1,8570,"**注：** 首先没有"],[-1,8576," "],[-1,8607,"**"],[1,8609,"#### "],[-1,8615,"：*####"],[1,8628,"exp"],[1,8631," "],[-1,8641," "],[1,8671,"\n"],[-1,8681,"\n"],[1,8752,"\n"],[-1,8762,"\n"],[-1,8766,"~~~~"],[1,8770,"```c"],[-1,8776,"```c"],[1,8780,"xt ="],[-1,8803,"    \n~~~~ "],[-1,8832,"数个结"],[1,8835,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8840,"=1；\n"],[1,8844,"从1开始；"],[-1,8860,"P"],[1,8861,"p"],[-1,8875,"个"],[-1,8884,"\n"],[-1,8911,"\n"],[-1,8921,"将欲删除结点p->next赋值给q；\n\n5"],[1,8942,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,8947,"删除"],[1,8949,"插入刚才两个"],[-1,8953,"p->next = q->next"],[-1,8972,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9002,"7.返回成功"],[-1,9007,"\n\n\n **注：**"],[-1,9019," 1.插入"],[-1,9028,"和"],[1,9029,"\n"],[-1,9479,"删```除操作"],[1,9486,"\n```\n\n\n"],[-1,9493,"都是遍历找到元素，然后实现插入和"],[1,9509,"单链表的"],[-1,9511,"操作；其时间复杂度均为O（n）;"],[-1,9531," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9649,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9661,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9716,"第i个数据删除节点的算法：**  \n1."],[-1,9718,"一"],[-1,9722,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9763,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9765,"带头"],[-1,9769,"的"],[1,9770,"，j累加1；\n3.若到"],[1,9772,"末尾p为空，则说明第i个元素不存在"],[-1,9774,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9851,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9853,"插到当前链表的表头上，直到结束为止"],[1,9871,"    "],[-1,9873,"**案：** 简单来说，就是把新"],[-1,10313,"加\n"],[1,10315,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10331,"\n"],[1,10334," "],[1,10354," "],[-1,10498,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10520,"\n#### "],[1,10526,"数，"],[1,10533,"  "],[-1,10580,"* "],[1,10582,"-"],[-1,10597,"*"],[1,10598," "],[-1,10609,"*"],[1,10610,";"],[1,10634,"// P是中介结点\n   "],[1,10638," "],[-1,10642,"* "],[1,10644,"(L"],[1,10779,"e"],[-1,10780," "],[-1,10801," "],[1,10802,"**"],[1,10826,"**\n\n"],[-1,11009,""],[1,11009," // r指向列表的尾部，P是一个中介结点"],[-1,11060,"// P是中介结点\n    "],[1,11074,""],[-1,11241,"**"],[-1,11246,"**"],[1,11248,"#### "],[-1,11256,"**"],[-1,11267,"**"],[-1,11271,"\n\n"],[-1,11455,"// r指向列表的尾部 P是一个中介结点"],[1,11475,""],[-1,11696,"#### "],[1,11701,"|-"],[1,11709,"式 "],[-1,11998,"\n\n"],[1,12000,""]],[234,234],[12000,12000]]],[1556456422516,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7575,"\n![单链表中的头结"],[-1,7613,"\n![单链表中的头结"],[1,7755,"**注：** 头指针"],[-1,7927,"**注：**  头指针"],[1,7941,"："],[-1,7941,"结"],[1,7945," "],[1,7980,"**"],[-1,7980,"#### "],[1,7991,"：*#### "],[-1,7991,"  \n"],[-1,7996," "],[-1,8001,"第i个"],[1,8007," \n "],[1,8012,"\n"],[-1,8022,"指"],[1,8042,"\n"],[-1,8051,"遍"],[1,8080,"\n"],[-1,8089,"为"],[1,8104,"\n"],[-1,8114,"返"],[1,8117,"否"],[-1,8117,"点"],[1,8123,"\n"],[-1,8133,"现"],[1,8151,"**注：**首先没有"],[-1,8566,"**注：** 首先没有"],[1,8583," "],[1,8613,"**"],[-1,8613,"#### "],[1,8624,"：*####"],[-1,8631,"exp"],[-1,8637," "],[1,8648," "],[-1,8677,"\n"],[1,8688,"\n"],[-1,8758,"\n"],[1,8769,"\n"],[1,8772,"~~~~"],[-1,8772,"```c"],[1,8782,"```c"],[-1,8782,"xt ="],[1,8809,"    \n~~~~ "],[1,8828,"数个结"],[-1,8828,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8876,"=1；\n"],[-1,8876,"从1开始；"],[1,8897,"P"],[-1,8897,"p"],[1,8912,"个"],[1,8920,"\n"],[1,8946,"\n"],[1,8955,"将欲删除结点p->next赋值给q；\n\n5"],[-1,8955,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,8995,"删除"],[-1,8995,"插入刚才两个"],[1,9005,"p->next = q->next"],[1,9007,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9007,"7.返回成功"],[1,9018,"\n\n\n **注：**"],[1,9020," 1.插入"],[1,9024,"和"],[-1,9024,"\n"],[1,9475,"删```除操作"],[-1,9475,"\n```\n\n\n"],[1,9489,"都是遍历找到元素，然后实现插入和"],[-1,9489,"单链表的"],[1,9495,"操作；其时间复杂度均为O（n）;"],[1,9499," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9499,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9683,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9683,"第i个数据删除节点的算法：**  \n1."],[1,9705,"一"],[1,9708,"和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9708,"指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9757,"带头"],[1,9759,"的"],[-1,9759,"，j累加1；\n3.若到"],[-1,9772,"末尾p为空，则说明第i个元素不存在"],[1,9791,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9791,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9878,"插到当前链表的表头上，直到结束为止"],[-1,9879,"    "],[1,9885,"**案：** 简单来说，就是把新"],[1,10309,"加\n"],[-1,10309,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10774,"\n"],[-1,10776," "],[-1,10797," "],[1,10942,"对于插入和删除操作较为频繁使用单链表\n"],[1,10945,"\n#### "],[-1,10945,"数，"],[-1,10954,"  "],[1,11003,"* "],[-1,11003,"-"],[1,11019,"*"],[-1,11019," "],[1,11031,"*"],[-1,11031,";"],[-1,11056,"// P是中介结点\n   "],[-1,11073," "],[1,11078,"* "],[-1,11078,"(L"],[-1,11215,"e"],[1,11217," "],[1,11237," "],[-1,11237,"**"],[-1,11263,"**\n\n"],[1,11450,""],[-1,11450," // r指向列表的尾部，P是一个中介结点"],[1,11522,"// P是中介结点\n    "],[-1,11522,""],[1,11689,"**"],[1,11692,"**"],[-1,11692,"#### "],[1,11705,"**"],[1,11714,"**"],[1,11716,"\n\n"],[1,11898,"// r指向列表的尾部 P是一个中介结点"],[-1,11898,""],[1,12119,"#### "],[-1,12119,"|-"],[-1,12129,"式 "],[1,12420,"\n\n"],[-1,12420,""]],[12000,12000],[234,234]]],[1556456404134,["GJX@GJXAIOU",[[1,8224,"typedef struct Node* "]],[8224,8224],[8245,8245]]],[1556456405963,["GJX@GJXAIOU",[[-1,8243,"* "]],[8245,8245],[8243,8243]]],[1556456409061,["GJX@GJXAIOU",[[1,8243," *li"]],[8243,8243],[8247,8247]]],[1556456409905,["GJX@GJXAIOU",[[-1,8245,"li"]],[8247,8247],[8245,8245]]],[1556456414630,["GJX@GJXAIOU",[[1,8245,"LinkList;"]],[8245,8245],[8254,8254]]],[1556456482525,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7569,"\n![单链表中的头结"],[1,7617,"\n![单链表中的头结"],[-1,7749,"**注：** 头指针"],[1,7931,"**注：**  头指针"],[-1,7934,"："],[1,7935,"结"],[-1,7938," "],[-1,7974,"**"],[1,7976,"#### "],[-1,7982,"：*####"],[1,7991," \n "],[1,7995,"第i个"],[-1,7998," \n "],[-1,8006,"\n"],[1,8017,"指"],[-1,8035,"\n"],[1,8046,"遍"],[-1,8074,"\n"],[1,8084,"为"],[-1,8099,"\n"],[1,8109,"返"],[-1,8111,"否"],[1,8112,"点"],[-1,8117,"\n"],[1,8128,"现"],[-1,8145,"**注：**首先没有"],[1,8224," */\n"],[-1,8254," */\n"],[1,8600,"**注：** 首先没有"],[-1,8606," "],[-1,8637,"**"],[1,8639,"#### "],[-1,8645,"：*####"],[1,8658,"exp"],[1,8661," "],[-1,8671," "],[1,8701,"\n"],[-1,8711,"\n"],[1,8781,"\n"],[-1,8792,"\n"],[-1,8796,"~~~~"],[1,8800,"```c"],[-1,8806,"```c"],[1,8810,"xt ="],[-1,8833,"    \n~~~~ "],[-1,8862,"数个结"],[1,8865,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8870,"=1；\n"],[1,8874,"从1开始；"],[-1,8890,"P"],[1,8891,"p"],[-1,8905,"个"],[-1,8915,"\n"],[-1,8941,"\n"],[-1,8951,"将欲删除结点p->next赋值给q；\n\n5"],[1,8972,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,8977,"删除"],[1,8979,"插入刚才两个"],[-1,8983,"p->next = q->next"],[-1,9002,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9032,"7.返回成功"],[-1,9037,"\n\n\n **注：**"],[-1,9049," 1.插入"],[-1,9058,"和"],[1,9059,"\n"],[-1,9509,"删```除操作"],[1,9516,"\n```\n\n\n"],[-1,9523,"都是遍历找到元素，然后实现插入和"],[1,9539,"单链表的"],[-1,9541,"操作；其时间复杂度均为O（n）;"],[-1,9561," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9679,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9691,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9746,"第i个数据删除节点的算法：**  \n1."],[1,9748,"结点p指向链表第"],[1,9749,"个"],[-1,9751,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9793,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9795,"带头"],[-1,9799,"的"],[1,9800,"，j累加1；\n3.若到"],[1,9802,"末尾p为空，则说明第i个元素不存在"],[-1,9804,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[1,9869,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[1,9871,"中"],[-1,9874,"域中，然后将新"],[1,9881,"赋值给e，作为返回；\n7.释放q"],[-1,9883,"插到当前链表的表头上，直到结束为止"],[1,9901,"    "],[-1,9903,"**案：** 简单来说，就是把新"],[-1,10343,"加\n"],[1,10345,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10361,"\n"],[1,10364," "],[1,10384," "],[-1,10528,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10550,"\n#### "],[1,10556,"数，"],[1,10563,"  "],[-1,10610,"* "],[1,10612,"-"],[-1,10627,"*"],[1,10628," "],[-1,10639,"*"],[1,10640,";"],[1,10664,"// P是中介结点\n   "],[1,10668," "],[-1,10672,"* "],[1,10674,"(L"],[1,10809,"e"],[-1,10810," "],[-1,10831," "],[1,10832,"**"],[1,10856,"**\n\n"],[-1,11039,""],[1,11039," // r指向列表的尾部，P是一个中介结点"],[-1,11090,"// P是中介结点\n    "],[1,11104,""],[-1,11271,"**"],[-1,11276,"**"],[1,11278,"#### "],[-1,11286,"**"],[-1,11297,"**"],[-1,11301,"\n\n"],[-1,11485,"// r指向列表的尾部 P是一个中介结点"],[1,11505,""],[-1,11726,"#### "],[1,11731,"|-"],[1,11739,"式 "],[-1,12028,"\n\n"],[1,12030,""]],[234,234],[12030,12030]]],[1556456482525,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7575,"\n![单链表中的头结"],[-1,7613,"\n![单链表中的头结"],[1,7755,"**注：** 头指针"],[-1,7927,"**注：**  头指针"],[1,7941,"："],[-1,7941,"结"],[1,7945," "],[1,7980,"**"],[-1,7980,"#### "],[1,7991,"：*####"],[-1,7994," \n "],[-1,8001,"第i个"],[1,8007," \n "],[1,8012,"\n"],[-1,8022,"指"],[1,8041,"\n"],[-1,8051,"遍"],[1,8080,"\n"],[-1,8089,"为"],[1,8105,"\n"],[-1,8114,"返"],[1,8117,"否"],[-1,8117,"点"],[1,8123,"\n"],[-1,8133,"现"],[1,8151,"**注：**首先没有"],[-1,8220," */\n"],[1,8254," */\n"],[-1,8596,"**注：** 首先没有"],[1,8613," "],[1,8643,"**"],[-1,8643,"#### "],[1,8654,"：*####"],[-1,8661,"exp"],[-1,8667," "],[1,8678," "],[-1,8707,"\n"],[1,8718,"\n"],[-1,8787,"\n"],[1,8799,"\n"],[1,8802,"~~~~"],[-1,8802,"```c"],[1,8812,"```c"],[-1,8812,"xt ="],[1,8839,"    \n~~~~ "],[1,8858,"数个结"],[-1,8858,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8906,"=1；\n"],[-1,8906,"从1开始；"],[1,8927,"P"],[-1,8927,"p"],[1,8942,"个"],[1,8951,"\n"],[1,8976,"\n"],[1,8985,"将欲删除结点p->next赋值给q；\n\n5"],[-1,8985,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9025,"删除"],[-1,9025,"插入刚才两个"],[1,9035,"p->next = q->next"],[1,9037,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9037,"7.返回成功"],[1,9048,"\n\n\n **注：**"],[1,9050," 1.插入"],[1,9054,"和"],[-1,9054,"\n"],[1,9505,"删```除操作"],[-1,9505,"\n```\n\n\n"],[1,9519,"都是遍历找到元素，然后实现插入和"],[-1,9519,"单链表的"],[1,9525,"操作；其时间复杂度均为O（n）;"],[1,9529," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9529,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9713,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9713,"第i个数据删除节点的算法：**  \n1."],[-1,9735,"结点p指向链表第"],[-1,9744,"个"],[1,9747,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9747,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9787,"带头"],[1,9789,"的"],[-1,9789,"，j累加1；\n3.若到"],[-1,9802,"末尾p为空，则说明第i个元素不存在"],[1,9821,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[-1,9821,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[-1,9886,"中"],[1,9890,"域中，然后将新"],[-1,9890,"赋值给e，作为返回；\n7.释放q"],[1,9908,"插到当前链表的表头上，直到结束为止"],[-1,9909,"    "],[1,9915,"**案：** 简单来说，就是把新"],[1,10339,"加\n"],[-1,10339,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10804,"\n"],[-1,10806," "],[-1,10827," "],[1,10972,"对于插入和删除操作较为频繁使用单链表\n"],[1,10975,"\n#### "],[-1,10975,"数，"],[-1,10984,"  "],[1,11033,"* "],[-1,11033,"-"],[1,11049,"*"],[-1,11049," "],[1,11061,"*"],[-1,11061,";"],[-1,11086,"// P是中介结点\n   "],[-1,11103," "],[1,11108,"* "],[-1,11108,"(L"],[-1,11245,"e"],[1,11247," "],[1,11267," "],[-1,11267,"**"],[-1,11293,"**\n\n"],[1,11480,""],[-1,11480," // r指向列表的尾部，P是一个中介结点"],[1,11552,"// P是中介结点\n    "],[-1,11552,""],[1,11719,"**"],[1,11722,"**"],[-1,11722,"#### "],[1,11735,"**"],[1,11744,"**"],[1,11746,"\n\n"],[1,11928,"// r指向列表的尾部 P是一个中介结点"],[-1,11928,""],[1,12149,"#### "],[-1,12149,"|-"],[-1,12159,"式 "],[1,12450,"\n\n"],[-1,12450,""]],[12030,12030],[234,234]]],[1556456433408,["GJX@GJXAIOU",[[1,8254,"  //定义"]],[8254,8254],[8260,8260]]],[1556456434952,["GJX@GJXAIOU",[[-1,8258,"定义"]],[8260,8260],[8258,8258]]],[1556456448776,["GJX@GJXAIOU",[[1,8258," 定义链表LinkList ,使l"]],[8258,8258],[8275,8275]]],[1556456448864,["GJX@GJXAIOU",[[-1,8274,"l"]],[8275,8275],[8274,8274]]],[1556456456982,["GJX@GJXAIOU",[[1,8274,"LinkList == strucr"]],[8274,8274],[8292,8292]]],[1556456457845,["GJX@GJXAIOU",[[-1,8291,"r"]],[8292,8292],[8291,8291]]],[1556456461948,["GJX@GJXAIOU",[[1,8291,"t Node*"]],[8291,8291],[8298,8298]]],[1556456602562,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7569,"\n![单链表中的头结"],[1,7617,"\n![单链表中的头结"],[-1,7749,"**注：** 头指针"],[1,7931,"**注：**  头指针"],[-1,7934,"："],[1,7935,"结"],[-1,7938," "],[-1,7974,"**"],[1,7976,"#### "],[-1,7982,"：*####"],[1,7991," \n "],[1,7995,"第i个"],[-1,7998," \n "],[-1,8006,"\n"],[1,8017,"指"],[-1,8035,"\n"],[1,8046,"遍"],[-1,8074,"\n"],[1,8084,"为"],[-1,8099,"\n"],[1,8109,"返"],[-1,8111,"否"],[1,8112,"点"],[-1,8117,"\n"],[1,8128,"现"],[-1,8145,"**注：**首先没有"],[1,8224," */\n"],[-1,8298," */\n"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8745,"\n"],[-1,8755,"\n"],[1,8825,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8959,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[1,9723,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[1,9837,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[1,9913,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[1,9915,"中"],[-1,9918,"域中，然后将新"],[1,9925,"赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10405,"\n"],[1,10408," "],[1,10428," "],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10853,"e"],[-1,10854," "],[-1,10875," "],[1,10876,"**"],[1,10900,"**\n\n"],[-1,11083,""],[1,11083," // r指向列表的尾部，P是一个中介结点"],[-1,11134,"// P是中介结点\n    "],[1,11148,""],[-1,11315,"**"],[-1,11320,"**"],[1,11322,"#### "],[-1,11330,"**"],[-1,11341,"**"],[-1,11345,"\n\n"],[-1,11529,"// r指向列表的尾部 P是一个中介结点"],[1,11549,""],[-1,11770,"#### "],[1,11775,"|-"],[1,11783,"式 "],[-1,12072,"\n\n"],[1,12074,""]],[234,234],[12074,12074]]],[1556456602562,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7575,"\n![单链表中的头结"],[-1,7613,"\n![单链表中的头结"],[1,7755,"**注：** 头指针"],[-1,7927,"**注：**  头指针"],[1,7941,"："],[-1,7941,"结"],[1,7945," "],[1,7980,"**"],[-1,7980,"#### "],[1,7991,"：*####"],[-1,7994," \n "],[-1,8001,"第i个"],[1,8007," \n "],[1,8012,"\n"],[-1,8022,"指"],[1,8041,"\n"],[-1,8051,"遍"],[1,8080,"\n"],[-1,8089,"为"],[1,8105,"\n"],[-1,8114,"返"],[1,8117,"否"],[-1,8117,"点"],[1,8123,"\n"],[-1,8133,"现"],[1,8151,"**注：**首先没有"],[-1,8220," */\n"],[1,8298," */\n"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8751,"\n"],[1,8762,"\n"],[-1,8831,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8995,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.    "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点的指针指向NULL，即建立"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q"],[-1,9930,"中"],[1,9934,"域中，然后将新"],[-1,9934,"赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10848,"\n"],[-1,10850," "],[-1,10871," "],[1,11016,"对于插入和删除操作较为频繁使用单链表\n"],[1,11019,"\n#### "],[-1,11019,"数，"],[-1,11028,"  "],[1,11077,"* "],[-1,11077,"-"],[1,11093,"*"],[-1,11093," "],[1,11105,"*"],[-1,11105,";"],[-1,11130,"// P是中介结点\n   "],[-1,11147," "],[1,11152,"* "],[-1,11152,"(L"],[-1,11289,"e"],[1,11291," "],[1,11311," "],[-1,11311,"**"],[-1,11337,"**\n\n"],[1,11524,""],[-1,11524," // r指向列表的尾部，P是一个中介结点"],[1,11596,"// P是中介结点\n    "],[-1,11596,""],[1,11763,"**"],[1,11766,"**"],[-1,11766,"#### "],[1,11779,"**"],[1,11788,"**"],[1,11790,"\n\n"],[1,11972,"// r指向列表的尾部 P是一个中介结点"],[-1,11972,""],[1,12193,"#### "],[-1,12193,"|-"],[-1,12203,"式 "],[1,12494,"\n\n"],[-1,12494,""]],[12074,12074],[234,234]]],[1556456563699,["GJX@GJXAIOU",[[-1,7495,"\n"]],[7495,7495],[7494,7494]]],[1556456564659,["GJX@GJXAIOU",[[-1,7543,"\n"]],[7543,7543],[7542,7542]]],[1556456566045,["GJX@GJXAIOU",[[1,7545," "]],[7543,7543],[7544,7544]]],[1556458282770,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," */\n"],[1,8643,"**注：** 首先没有"],[-1,8649," "],[-1,8680,"**"],[1,8682,"#### "],[-1,8688,"：*####"],[1,8701,"exp"],[1,8704," "],[-1,8714," "],[1,8743,"\n"],[-1,8754,"\n"],[1,8825,"\n"],[-1,8835,"\n"],[-1,8839,"~~~~"],[1,8843,"```c"],[-1,8849,"```c"],[1,8853,"xt ="],[-1,8876,"    \n~~~~ "],[-1,8905,"数个结"],[1,8908,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8913,"=1；\n"],[1,8917,"从1开始；"],[-1,8933,"P"],[1,8934,"p"],[-1,8948,"个"],[-1,8957,"\n"],[-1,8984,"\n"],[-1,8994,"将欲删除结点p->next赋值给q；\n\n5"],[1,9015,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9020,"删除"],[1,9022,"插入刚才两个"],[-1,9026,"p->next = q->next"],[-1,9045,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9075,"7.返回成功"],[-1,9080,"\n\n\n **注：**"],[-1,9092," 1.插入"],[-1,9101,"和"],[1,9102,"\n"],[-1,9552,"删```除操作"],[1,9559,"\n```\n\n\n"],[-1,9566,"都是遍历找到元素，然后实现插入和"],[1,9582,"单链表的"],[-1,9584,"操作；其时间复杂度均为O（n）;"],[-1,9604," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9720,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9722,"\n\n~~~~"],[-1,9734,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9789,"第i个数据删除节点的算法：**  \n1."],[1,9791,"结点p指向链表第"],[1,9792,"个"],[-1,9794,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9823,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9826,"向后移动，不断"],[-1,9828,"NULL，即建立"],[1,9836,"下"],[-1,9838,"带头"],[-1,9842,"的"],[1,9843,"，j累加1；\n3.若到"],[1,9845,"末尾p为空，则说明第i个元素不存在"],[-1,9847,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9924,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9926,"插到当前链表的表头上，直到结束为止"],[1,9944,"    "],[-1,9946,"**案：** 简单来说，就是把新"],[-1,10386,"加\n"],[1,10388,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10404,"\n"],[1,10407," "],[1,10427," "],[-1,10571,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10593,"\n#### "],[1,10599,"数，"],[1,10606,"  "],[-1,10653,"* "],[1,10655,"-"],[-1,10670,"*"],[1,10671," "],[-1,10682,"*"],[1,10683,";"],[1,10707,"// P是中介结点\n   "],[1,10711," "],[-1,10715,"* "],[1,10717,"(L"],[1,10852,"e"],[-1,10853," "],[-1,10874," "],[1,10875,"**"],[1,10899,"**\n\n"],[-1,11082,""],[1,11082," // r指向列表的尾部，P是一个中介结点"],[-1,11133,"// P是中介结点\n    "],[1,11147,""],[-1,11314,"**"],[-1,11319,"**"],[1,11321,"#### "],[-1,11329,"**"],[-1,11340,"**"],[-1,11344,"\n\n"],[-1,11528,"// r指向列表的尾部 P是一个中介结点"],[1,11548,""],[-1,11769,"#### "],[1,11774,"|-"],[1,11782,"式 "],[-1,12071,"\n\n"],[1,12073,""]],[234,234],[12073,12073]]],[1556458282770,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," */\n"],[-1,8639,"**注：** 首先没有"],[1,8656," "],[1,8686,"**"],[-1,8686,"#### "],[1,8697,"：*####"],[-1,8704,"exp"],[-1,8710," "],[1,8721," "],[-1,8749,"\n"],[1,8761,"\n"],[-1,8831,"\n"],[1,8842,"\n"],[1,8845,"~~~~"],[-1,8845,"```c"],[1,8855,"```c"],[-1,8855,"xt ="],[1,8882,"    \n~~~~ "],[1,8901,"数个结"],[-1,8901,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8949,"=1；\n"],[-1,8949,"从1开始；"],[1,8970,"P"],[-1,8970,"p"],[1,8985,"个"],[1,8993,"\n"],[1,9019,"\n"],[1,9028,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9028,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9068,"删除"],[-1,9068,"插入刚才两个"],[1,9078,"p->next = q->next"],[1,9080,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9080,"7.返回成功"],[1,9091,"\n\n\n **注：**"],[1,9093," 1.插入"],[1,9097,"和"],[-1,9097,"\n"],[1,9548,"删```除操作"],[-1,9548,"\n```\n\n\n"],[1,9562,"都是遍历找到元素，然后实现插入和"],[-1,9562,"单链表的"],[1,9568,"操作；其时间复杂度均为O（n）;"],[1,9572," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9572,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9738,"\n\n~~~~"],[1,9756,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9756,"第i个数据删除节点的算法：**  \n1."],[-1,9778,"结点p指向链表第"],[-1,9787,"个"],[1,9790,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9790,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9818,"向后移动，不断"],[1,9827,"NULL，即建立"],[-1,9827,"下"],[1,9830,"带头"],[1,9832,"的"],[-1,9832,"，j累加1；\n3.若到"],[-1,9845,"末尾p为空，则说明第i个元素不存在"],[1,9864,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9864,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9951,"插到当前链表的表头上，直到结束为止"],[-1,9952,"    "],[1,9958,"**案：** 简单来说，就是把新"],[1,10382,"加\n"],[-1,10382,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10847,"\n"],[-1,10849," "],[-1,10870," "],[1,11015,"对于插入和删除操作较为频繁使用单链表\n"],[1,11018,"\n#### "],[-1,11018,"数，"],[-1,11027,"  "],[1,11076,"* "],[-1,11076,"-"],[1,11092,"*"],[-1,11092," "],[1,11104,"*"],[-1,11104,";"],[-1,11129,"// P是中介结点\n   "],[-1,11146," "],[1,11151,"* "],[-1,11151,"(L"],[-1,11288,"e"],[1,11290," "],[1,11310," "],[-1,11310,"**"],[-1,11336,"**\n\n"],[1,11523,""],[-1,11523," // r指向列表的尾部，P是一个中介结点"],[1,11595,"// P是中介结点\n    "],[-1,11595,""],[1,11762,"**"],[1,11765,"**"],[-1,11765,"#### "],[1,11778,"**"],[1,11787,"**"],[1,11789,"\n\n"],[1,11971,"// r指向列表的尾部 P是一个中介结点"],[-1,11971,""],[1,12192,"#### "],[-1,12192,"|-"],[-1,12202,"式 "],[1,12493,"\n\n"],[-1,12493,""]],[12073,12073],[234,234]]],[1556458272301,["GJX@GJXAIOU",[[1,8298,"\n"]],[8298,8298],[8299,8299]]],[1556458702844,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," \n*/"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8744,"\n"],[-1,8755,"\n"],[1,8826,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8958,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9723,"\n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9824,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9827,"向后移动，不断"],[-1,9829,"NULL，即建立"],[1,9837,"下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9925,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10405,"\n"],[1,10408," "],[1,10428," "],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10853,"e"],[-1,10854," "],[-1,10875," "],[1,10876,"**"],[1,10900,"**\n\n"],[-1,11083,""],[1,11083," // r指向列表的尾部，P是一个中介结点"],[-1,11134,"// P是中介结点\n    "],[1,11148,""],[-1,11315,"**"],[-1,11320,"**"],[1,11322,"#### "],[-1,11330,"**"],[-1,11341,"**"],[-1,11345,"\n\n"],[-1,11529,"// r指向列表的尾部 P是一个中介结点"],[1,11549,""],[-1,11770,"#### "],[1,11775,"|-"],[1,11783,"式 "],[-1,12072,"\n\n"],[1,12074,""]],[234,234],[12074,12074]]],[1556458702844,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," \n*/"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8750,"\n"],[1,8762,"\n"],[-1,8832,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8994,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9739,"\n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9819,"向后移动，不断"],[1,9828,"NULL，即建立"],[-1,9828,"下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10848,"\n"],[-1,10850," "],[-1,10871," "],[1,11016,"对于插入和删除操作较为频繁使用单链表\n"],[1,11019,"\n#### "],[-1,11019,"数，"],[-1,11028,"  "],[1,11077,"* "],[-1,11077,"-"],[1,11093,"*"],[-1,11093," "],[1,11105,"*"],[-1,11105,";"],[-1,11130,"// P是中介结点\n   "],[-1,11147," "],[1,11152,"* "],[-1,11152,"(L"],[-1,11289,"e"],[1,11291," "],[1,11311," "],[-1,11311,"**"],[-1,11337,"**\n\n"],[1,11524,""],[-1,11524," // r指向列表的尾部，P是一个中介结点"],[1,11596,"// P是中介结点\n    "],[-1,11596,""],[1,11763,"**"],[1,11766,"**"],[-1,11766,"#### "],[1,11779,"**"],[1,11788,"**"],[1,11790,"\n\n"],[1,11972,"// r指向列表的尾部 P是一个中介结点"],[-1,11972,""],[1,12193,"#### "],[-1,12193,"|-"],[-1,12203,"式 "],[1,12494,"\n\n"],[-1,12494,""]],[12074,12074],[234,234]]],[1556458677589,["GJX@GJXAIOU",[[-1,10849,"– "]],[10849,10851],[10849,10849]]],[1556458683672,["GJX@GJXAIOU",[[-1,10867,"\n– "]],[10867,10870],[10867,10867]]],[1556459423049,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," \n*/"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8744,"\n"],[-1,8755,"\n"],[1,8826,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8958,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9723,"\n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9824,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9827,"向后移动，不断"],[-1,9829,"NULL，即建立"],[1,9837,"下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9925,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10406,"\n–"],[-1,10426,"\n–"],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10849,")-"],[1,10851,"e"],[-1,10852," "],[1,10867,"\n\n`"],[-1,10870," "],[1,10871,"**"],[1,10895,"**\n\n"],[-1,11078,""],[1,11078," // r指向列表的尾部，P是一个中介结点"],[-1,11129,"// P是中介结点\n    "],[1,11143,""],[-1,11310,"**"],[-1,11315,"**"],[1,11317,"#### "],[-1,11325,"**"],[-1,11336,"**"],[-1,11340,"\n\n"],[-1,11524,"// r指向列表的尾部 P是一个中介结点"],[1,11544,""],[-1,11765,"#### "],[1,11770,"|-"],[1,11778,"式 "],[-1,12067,"\n\n"],[1,12069,""]],[234,234],[12069,12069]]],[1556459423049,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," \n*/"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8750,"\n"],[1,8762,"\n"],[-1,8832,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8994,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9739,"\n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9819,"向后移动，不断"],[1,9828,"NULL，即建立"],[-1,9828,"下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n–"],[1,10867,"\n–"],[1,11011,"对于插入和删除操作较为频繁使用单链表\n"],[1,11014,"\n#### "],[-1,11014,"数，"],[-1,11023,"  "],[1,11072,"* "],[-1,11072,"-"],[1,11088,"*"],[-1,11088," "],[1,11100,"*"],[-1,11100,";"],[-1,11125,"// P是中介结点\n   "],[-1,11142," "],[1,11147,"* "],[-1,11147,"(L"],[-1,11280,")-"],[-1,11284,"e"],[1,11286," "],[-1,11300,"\n\n`"],[1,11306," "],[-1,11306,"**"],[-1,11332,"**\n\n"],[1,11519,""],[-1,11519," // r指向列表的尾部，P是一个中介结点"],[1,11591,"// P是中介结点\n    "],[-1,11591,""],[1,11758,"**"],[1,11761,"**"],[-1,11761,"#### "],[1,11774,"**"],[1,11783,"**"],[1,11785,"\n\n"],[1,11967,"// r指向列表的尾部 P是一个中介结点"],[-1,11967,""],[1,12188,"#### "],[-1,12188,"|-"],[-1,12198,"式 "],[1,12489,"\n\n"],[-1,12489,""]],[12069,12069],[234,234]]],[1556459385152,["GJX@GJXAIOU",[[1,11761,"\n"]],[11758,11758],[11759,11759]]],[1556459396230,["GJX@GJXAIOU",[[1,11759,"备注：R"]],[11759,11759],[11763,11763]]],[1556459400911,["GJX@GJXAIOU",[[-1,11762,"R"]],[11763,11763],[11762,11762]]],[1556459413211,["GJX@GJXAIOU",[[1,11762,"r指向当前结点，L "]],[11762,11762],[11772,11772]]],[1556459414067,["GJX@GJXAIOU",[[-1,11771," "]],[11772,11772],[11771,11771]]],[1556459414537,["GJX@GJXAIOU",[[1,11771,"wei"]],[11771,11771],[11774,11774]]],[1556459415820,["GJX@GJXAIOU",[[-1,11770,"Lwei"]],[11774,11774],[11770,11770]]],[1556459422610,["GJX@GJXAIOU",[[1,11770,"L为中介结点，"]],[11770,11770],[11777,11777]]],[1556459483068,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," \n*/"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8744,"\n"],[-1,8755,"\n"],[1,8826,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8958,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9723,"\n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9824,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9827,"向后移动，不断"],[-1,9829,"NULL，即建立"],[1,9837,"下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9925,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10406,"\n–"],[-1,10426,"\n–"],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10849,")-"],[1,10851,"e"],[-1,10852," "],[1,10867,"\n\n`"],[-1,10870," "],[1,10871,"**"],[1,10895,"**\n\n"],[-1,11078,""],[1,11078," // r指向列表的尾部，P是一个中介结点"],[-1,11129,"// P是中介结点\n    "],[1,11143,""],[-1,11310,"**"],[1,11313,"备注：r指向当前结点，L为中介结点，"],[-1,11315,"**"],[1,11317,"\n#### "],[-1,11325,"**"],[-1,11336,"**"],[-1,11340,"\n\n"],[-1,11524,"// r指向列表的尾部 P是一个中介结点"],[1,11544,""],[-1,11759,"备注：r指向当前结点，L为中介结点，"],[-1,11779,"\n"],[-1,11784,"#### "],[1,11789,"|-"],[1,11797,"式 "],[-1,12086,"\n\n"],[1,12088,""]],[234,234],[12088,12088]]],[1556459483068,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," \n*/"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8750,"\n"],[1,8762,"\n"],[-1,8832,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8994,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9739,"\n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9819,"向后移动，不断"],[1,9828,"NULL，即建立"],[-1,9828,"下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n–"],[1,10867,"\n–"],[1,11011,"对于插入和删除操作较为频繁使用单链表\n"],[1,11014,"\n#### "],[-1,11014,"数，"],[-1,11023,"  "],[1,11072,"* "],[-1,11072,"-"],[1,11088,"*"],[-1,11088," "],[1,11100,"*"],[-1,11100,";"],[-1,11125,"// P是中介结点\n   "],[-1,11142," "],[1,11147,"* "],[-1,11147,"(L"],[-1,11280,")-"],[-1,11284,"e"],[1,11286," "],[-1,11300,"\n\n`"],[1,11306," "],[-1,11306,"**"],[-1,11332,"**\n\n"],[1,11519,""],[-1,11519," // r指向列表的尾部，P是一个中介结点"],[1,11591,"// P是中介结点\n    "],[-1,11591,""],[1,11758,"**"],[-1,11759,"备注：r指向当前结点，L为中介结点，"],[1,11779,"**"],[-1,11779,"\n#### "],[1,11793,"**"],[1,11802,"**"],[1,11804,"\n\n"],[1,11986,"// r指向列表的尾部 P是一个中介结点"],[-1,11986,""],[1,12201,"备注：r指向当前结点，L为中介结点，"],[1,12203,"\n"],[1,12207,"#### "],[-1,12207,"|-"],[-1,12217,"式 "],[1,12508,"\n\n"],[-1,12508,""]],[12088,12088],[234,234]]],[1556459447199,["GJX@GJXAIOU",[[1,11777,"当新的L结点加入链表，首先r结点的"]],[11777,11777],[11794,11794]]],[1556459456846,["GJX@GJXAIOU",[[1,11769,"（）"]],[11769,11769],[11771,11771]]],[1556459463415,["GJX@GJXAIOU",[[1,11770,"当前结点"]],[11770,11770],[11774,11774]]],[1556459464584,["GJX@GJXAIOU",[[-1,11772,"结点"]],[11774,11774],[11772,11772]]],[1556459471197,["GJX@GJXAIOU",[[1,11772,"链表的尾部结点"]],[11772,11772],[11779,11779]]],[1556459482581,["GJX@GJXAIOU",[[1,11805,"next指向"]],[11805,11805],[11811,11811]]],[1556459543068,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," \n*/"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8744,"\n"],[-1,8755,"\n"],[1,8826,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8958,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9723,"\n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9824,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9827,"向后移动，不断"],[-1,9829,"NULL，即建立"],[1,9837,"下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9925,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10406,"\n–"],[-1,10426,"\n–"],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10849,")-"],[1,10851,"e"],[-1,10852," "],[1,10867,"\n\n`"],[-1,10870," "],[1,10871,"**"],[1,10895,"**\n\n"],[-1,11078,""],[1,11078," // r指向列表的尾部，P是一个中介结点"],[-1,11129,"// P是中介结点\n    "],[1,11143,""],[-1,11310,"**"],[1,11313,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向"],[-1,11315,"**"],[1,11317,"\n#### "],[-1,11325,"**"],[-1,11336,"**"],[-1,11340,"\n\n"],[-1,11524,"// r指向列表的尾部 P是一个中介结点"],[1,11544,""],[-1,11759,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向"],[-1,11813,"\n"],[-1,11818,"#### "],[1,11823,"|-"],[1,11831,"式 "],[-1,12120,"\n\n"],[1,12122,""]],[234,234],[12122,12122]]],[1556459543068,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," \n*/"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8750,"\n"],[1,8762,"\n"],[-1,8832,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8994,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9739,"\n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9819,"向后移动，不断"],[1,9828,"NULL，即建立"],[-1,9828,"下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n–"],[1,10867,"\n–"],[1,11011,"对于插入和删除操作较为频繁使用单链表\n"],[1,11014,"\n#### "],[-1,11014,"数，"],[-1,11023,"  "],[1,11072,"* "],[-1,11072,"-"],[1,11088,"*"],[-1,11088," "],[1,11100,"*"],[-1,11100,";"],[-1,11125,"// P是中介结点\n   "],[-1,11142," "],[1,11147,"* "],[-1,11147,"(L"],[-1,11280,")-"],[-1,11284,"e"],[1,11286," "],[-1,11300,"\n\n`"],[1,11306," "],[-1,11306,"**"],[-1,11332,"**\n\n"],[1,11519,""],[-1,11519," // r指向列表的尾部，P是一个中介结点"],[1,11591,"// P是中介结点\n    "],[-1,11591,""],[1,11758,"**"],[-1,11759,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向"],[1,11813,"**"],[-1,11813,"\n#### "],[1,11827,"**"],[1,11836,"**"],[1,11838,"\n\n"],[1,12020,"// r指向列表的尾部 P是一个中介结点"],[-1,12020,""],[1,12235,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向"],[1,12237,"\n"],[1,12241,"#### "],[-1,12241,"|-"],[-1,12251,"式 "],[1,12542,"\n\n"],[-1,12542,""]],[12122,12122],[234,234]]],[1556459527980,["GJX@GJXAIOU",[[1,11811,"L结点，然后r指向L结点，则当前的L结点就是尾部结点，"]],[11811,11811],[11838,11838]]],[1556459528853,["GJX@GJXAIOU",[[-1,11837,"，"]],[11838,11838],[11837,11837]]],[1556459529308,["GJX@GJXAIOU",[[1,11837,"；"]],[11837,11837],[11838,11838]]],[1556459723080,[null,[[1,234,"\n"],[-1,237,"\n\n- **"],[1,243,"    \n"],[-1,304,"物\n"],[1,306,"\n\n- **物"],[1,313," "],[-1,318," "],[1,377,"**"],[-1,381,"的"],[1,384,"的"],[-1,388,"**"],[1,393,"数据间"],[-1,398,"数据间"],[-1,410,"\n    "],[1,421,"\n    "],[-1,427,"：将数据元一的"],[1,434,"素"],[1,436,"在"],[1,438,"的存储单元"],[-1,470,"\n\n---"],[1,561,"---\n"],[-1,563,"#"],[1,564,"\n"],[1,566,"二、"],[1,569,"法"],[-1,570,"二、"],[1,586," "],[-1,591," "],[1,679,"* "],[-1,682,"、可* 读性、"],[1,794,"可读性\n* 健"],[-1,796,"、"],[1,800,"时"],[-1,803,"\n* "],[1,806,"高"],[-1,830,"#"],[1,832,"三、"],[1,835,"杂"],[-1,836,"三、"],[-1,864,"时间复- "],[-1,938,"度(一)："],[1,943," (一)时间复杂度"],[-1,948,"   "],[1,951,"\n"],[1,953,"**定义：**"],[-1,955,"**"],[-1,960,"**"],[1,1082," "],[-1,1084," "],[-1,1087," "],[1,1090,"* "],[-1,1095," "],[1,1155," "],[-1,1160," "],[-1,1229,"   "],[1,1234,"**分析一"],[-1,1236,"**"],[-1,1248,"  \n  "],[1,1257,"\n"],[1,1258,".用常数"],[-1,1281,"    "],[1,1286,".再修改"],[-1,1309,"    "],[1,1314,".如果最"],[-1,1358," "],[-1,1361,"\n\n  用的"],[1,1367,"- "],[1,1371,"函数调用的"],[-1,1378,"    \n"],[1,1383,""],[1,1392,"  \n"],[-1,1396,"复1）"],[-1,1415,"~~~"],[1,1418,"   "],[-1,1423," "],[1,1424,"\n"],[-1,1508,"~~~\n\n"],[1,1513,"    \n(2)时间"],[-1,1529,"\n~~~\n"],[-1,1548,"  "],[1,1550,"\n`"],[1,1553,"\nfor(i"],[-1,1581,"       "],[1,1588,"{\n cout"],[-1,1599,"  "],[1,1601,"}"],[-1,1604,"~~~"],[-1,1608,"（3"],[-1,1613,"复\n"],[1,1615,"\n\n（3）时间复"],[-1,1626,"  ~~~~"],[1,1636,"\nfor(i"],[-1,1666,"       "],[1,1673,"{\nfor(i"],[-1,1700,"    {  "],[1,1707,"{\ncout<"],[-1,1721," "],[1,1722,"}\n}"],[-1,1725,"   ~~~~~"],[1,1737,"\n\n  **"],[-1,1790,"   "],[1,1796,"时间复"],[-1,1808,"   ~~~"],[1,1818,"\n"],[1,1820,"int"],[1,1821,"i="],[-1,1826,"    "],[1,1830,"whi"],[1,1832,"("],[-1,1839,"    \n "],[1,1845,"{\n"],[1,1851,"i*2;"],[-1,1854,"    ~~\n "],[1,1862,"}\n"],[1,1865,"\n  **P"],[-1,1898,"$$ x=l`^n $$"],[1,1910,"`x=log2^n `"],[-1,1914,"`"],[1,1915,"其时"],[1,1920,"`"],[-1,1926,"`"],[-1,1928,"。\n\n\n\n\n"],[1,1935,"。"],[-1,1937,"# #"],[1,1940," \n"],[-1,2039," "],[1,2040,"\n"],[-1,2146,"线性表"],[1,2149,"\n\n\n"],[1,2283,"#"],[-1,2284,"第"],[1,2287,"线性表 (第"],[-1,2328,"\n\n\n"],[-1,2333,"#  "],[1,2340,"定义    "],[-1,2349," *  "],[1,2353,"**线"],[1,2355,"（"],[1,2385,"  "],[-1,2386," "],[-1,2391,"  若  "],[1,2396,"若将线性"],[-1,2496,"  "],[-1,2501," 线  "],[1,2505,"3.线性表元"],[-1,2551,"   \n  注"],[1,2558,"\n**注** "],[-1,2580,"  "],[-1,2584,"  "],[1,2586,"首先它是"],[-1,2615,"  "],[-1,2618," "],[-1,2621,"若  "],[1,2624,"2.若元素存"],[-1,2677,"  "],[-1,2682," 另  "],[1,2686,"3.另外，线"],[-1,2730,"\n\n\n"],[-1,2735,"#"],[1,2736," （二）抽象"],[1,2738,"类"],[-1,2739,"（二）"],[1,2808,"  "],[-1,2814,"  "],[1,2923," "],[-1,2929," "],[-1,3017,"\n    \n"],[-1,3030," "],[1,3031,"\n"],[-1,3142,"A "],[1,3144,"\n\n- 常用的操"],[-1,3630,"弱"],[1,3631,"若"],[-1,3636,"若"],[1,3637,"插"],[-1,3650," ~~~~ "],[1,3660,"\n    /"],[-1,4050,"~~~~\n\n"],[1,4059,"\n\n\n"],[-1,4061,"#表的储"],[1,4065," "],[1,4068,"线性表的存储"],[-1,4079,"-"],[1,4080,"###"],[-1,4085,"### "],[1,4089,"结构"],[-1,4095,"    "],[1,4101," **概念**："],[-1,4104,"**"],[-1,4108,"**"],[-1,4139,"    "],[1,4144,"-"],[1,4146,"**物理上"],[-1,4149,"**"],[1,4153,"**"],[-1,4159,"**"],[-1,4222,"    \n  "],[1,4229,"\n- **顺序存储"],[-1,4231,"**"],[1,4241,"**"],[-1,4246," **"],[-1,4257,"   "],[1,4260,"存储空间"],[-1,4304,"  "],[1,4310,"表的"],[-1,4339,"  "],[1,4341,"3."],[-1,4367,"  "],[-1,4370,"    "],[1,4378,"注意**："],[-1,4380,"**"],[1,4382," "],[1,4385," "],[1,4390,"长"],[-1,4466,"\n   "],[1,4470," \n"],[1,4480,"表开"],[-1,4492,"  \n    "],[1,4499,"\n- **地址计算"],[1,4501,"："],[-1,4503,"："],[1,4504,"\n"],[-1,4507,"\n"],[-1,4509," **\n"],[1,4517,"El"],[-1,4622,"   "],[-1,4629," "],[1,4632,"所以对于"],[1,4713,"**"],[-1,4727,"**  "],[-1,4742,"\n "],[-1,4746," - "],[1,4749,"\n"],[1,4754,"获取元素"],[-1,4756,"；  作"],[1,4760,"\n "],[-1,4838,"    \n "],[1,4848,"c"],[-1,4849,"`"],[1,5228,"`\n  "],[-1,5233," \n"],[1,5238," \n"],[1,5243,"插入操作"],[-1,5246," \n    \n "],[1,5260,"思路："],[-1,5263,"   "],[1,5280,"异常"],[-1,5282,"  "],[1,5316,"容"],[-1,5318,"  "],[1,5320,"\n"],[-1,5358,"  "],[1,5360,"；\n"],[-1,5374,"    "],[1,5378,"i处；\n"],[-1,5388," "],[1,5389,"\n"],[1,5391,"ListIns"],[-1,5428,"     \n "],[1,6023,"**PS：**"],[-1,6038,"   "],[-1,6047,"除："],[1,6049,"删除操作 "],[-1,6056,"  "],[1,6059,".如"],[-1,6077,"   "],[1,6080,"2.取"],[-1,6139,"   \n   "],[1,6146,""],[-1,6628,""],[1,6628,"       "],[-1,6649,"    "],[-1,6655," \n"],[1,6657,"总结"],[1,6660,"\n"],[1,6662,"-"],[1,6664,"点："],[-1,6718,"   "],[1,6721,"- 缺"],[-1,6792,"\n- 链式存储"],[-1,6802,"结"],[1,6803,"\n"],[1,6808,"链式存储结构"],[1,6815," \n"],[-1,6820,"\n"],[-1,6848,"\n"],[1,6853,"\n"],[1,7014,"数据域和指针域"],[-1,7024,"和指针域"],[1,7215," "],[-1,7225," "],[-1,7244,"\n   "],[1,7251," **概"],[-1,7489,"\n"],[1,7495,"有"],[-1,7537,"\n"],[1,7538," "],[1,7543,"结"],[-1,7545," "],[-1,7568,"\n![单链表中的头结"],[1,7616,"\n![单链表中的头结"],[-1,7748,"**注：** 头指针"],[1,7930,"**注：**  头指针"],[-1,7933,"："],[1,7934,"结"],[-1,7937," "],[-1,7973,"**"],[1,7975,"#### "],[-1,7981,"：*#### "],[1,7988,"  \n"],[1,7990," "],[1,7994,"第i个"],[-1,7997," \n "],[-1,8006,"\n"],[1,8016,"指"],[-1,8034,"\n"],[1,8045,"遍"],[-1,8073,"\n"],[1,8083,"为"],[-1,8098,"\n"],[1,8108,"返"],[-1,8110,"否"],[1,8111,"点"],[-1,8116,"\n"],[1,8127,"现"],[-1,8144,"**注：**首先没有"],[1,8223," */\n"],[-1,8297," \n*/"],[1,8644,"**注：** 首先没有"],[-1,8650," "],[-1,8681,"**"],[1,8683,"#### "],[-1,8689,"：*####"],[1,8702,"exp"],[1,8705," "],[-1,8715," "],[1,8744,"\n"],[-1,8755,"\n"],[1,8826,"\n"],[-1,8836,"\n"],[-1,8840,"~~~~"],[1,8844,"```c"],[-1,8850,"```c"],[1,8854,"xt ="],[-1,8877,"    \n~~~~ "],[-1,8906,"数个结"],[1,8909,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[-1,8914,"=1；\n"],[1,8918,"从1开始；"],[-1,8934,"P"],[1,8935,"p"],[-1,8949,"个"],[-1,8958,"\n"],[-1,8985,"\n"],[-1,8995,"将欲删除结点p->next赋值给q；\n\n5"],[1,9016,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[-1,9021,"删除"],[1,9023,"插入刚才两个"],[-1,9027,"p->next = q->next"],[-1,9046,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[1,9076,"7.返回成功"],[-1,9081,"\n\n\n **注：**"],[-1,9093," 1.插入"],[-1,9102,"和"],[1,9103,"\n"],[-1,9553,"删```除操作"],[1,9560,"\n```\n\n\n"],[-1,9567,"都是遍历找到元素，然后实现插入和"],[1,9583,"单链表的"],[-1,9585,"操作；其时间复杂度均为O（n）;"],[-1,9605," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[1,9721,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[1,9723,"\n\n~~~~"],[-1,9735,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[1,9790,"第i个数据删除节点的算法：**  \n1."],[1,9792,"结点p指向链表第"],[1,9793,"个"],[-1,9795,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[1,9824,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[1,9827,"向后移动，不断"],[-1,9829,"NULL，即建立"],[1,9837,"下"],[-1,9839,"带头"],[-1,9843,"的"],[1,9844,"，j累加1；\n3.若到"],[1,9846,"末尾p为空，则说明第i个元素不存在"],[-1,9848,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[1,9925,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[-1,9927,"插到当前链表的表头上，直到结束为止"],[1,9945,"    "],[-1,9947,"**案：** 简单来说，就是把新"],[-1,10387,"加\n"],[1,10389,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[-1,10406,"\n–"],[-1,10426,"\n–"],[-1,10572,"对于插入和删除操作较为频繁使用单链表\n"],[-1,10594,"\n#### "],[1,10600,"数，"],[1,10607,"  "],[-1,10654,"* "],[1,10656,"-"],[-1,10671,"*"],[1,10672," "],[-1,10683,"*"],[1,10684,";"],[1,10708,"// P是中介结点\n   "],[1,10712," "],[-1,10716,"* "],[1,10718,"(L"],[1,10849,")-"],[1,10851,"e"],[-1,10852," "],[1,10867,"\n\n`"],[-1,10870," "],[1,10871,"**"],[1,10895,"**\n\n"],[-1,11078,""],[1,11078," // r指向列表的尾部，P是一个中介结点"],[-1,11129,"// P是中介结点\n    "],[1,11143,""],[-1,11310,"**\n\n\n**"],[1,11317,"\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### "],[-1,11325,"**"],[-1,11336,"**"],[-1,11340,"\n\n"],[-1,11524,"// r指向列表的尾部 P是一个中介结点"],[1,11544,""],[-1,11759,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；"],[-1,11840,"\n"],[-1,11845,"#### "],[1,11850,"|-"],[1,11858,"式 "],[-1,12147,"\n\n"],[1,12149,""]],[234,234],[12149,12149]]],[1556459723080,[null,[[-1,234,"\n"],[1,238,"\n\n- **"],[-1,238,"    \n"],[1,304,"物\n"],[-1,304,"\n\n- **物"],[-1,318," "],[1,324," "],[-1,382,"**"],[1,388,"的"],[-1,390,"的"],[1,395,"**"],[-1,398,"数据间"],[1,406,"数据间"],[1,415,"\n    "],[-1,421,"\n    "],[1,432,"：将数据元一的"],[-1,432,"素"],[-1,435,"在"],[-1,438,"的存储单元"],[1,475,"\n\n---"],[-1,561,"---\n"],[1,567,"#"],[-1,567,"\n"],[-1,570,"二、"],[-1,575,"法"],[1,577,"二、"],[-1,591," "],[1,597," "],[-1,684,"* "],[1,689,"、可* 读性、"],[-1,794,"可读性\n* 健"],[1,803,"、"],[-1,806,"时"],[1,810,"\n* "],[-1,810,"高"],[1,835,"#"],[-1,836,"三、"],[-1,841,"杂"],[1,843,"三、"],[1,869,"时间复- "],[1,938,"度(一)："],[-1,938," (一)时间复杂度"],[1,952,"   "],[-1,952,"\n"],[-1,955,"**定义：**"],[1,964,"**"],[1,967,"**"],[-1,1087," "],[1,1090," "],[1,1092," "],[-1,1094,"* "],[1,1101," "],[-1,1160," "],[1,1166," "],[1,1234,"   "],[-1,1236,"**分析一"],[1,1243,"**"],[1,1253,"  \n  "],[-1,1257,"\n"],[-1,1259,".用常数"],[1,1286,"    "],[-1,1287,".再修改"],[1,1314,"    "],[-1,1315,".如果最"],[1,1363," "],[1,1365,"\n\n  用的"],[-1,1365,"- "],[-1,1371,"函数调用的"],[1,1383,"    \n"],[-1,1383,""],[-1,1392,"  \n"],[1,1399,"复1）"],[1,1415,"~~~"],[-1,1415,"   "],[1,1423," "],[-1,1423,"\n"],[1,1508,"~~~\n\n"],[-1,1508,"    \n(2)时间"],[1,1534,"\n~~~\n"],[1,1548,"  "],[-1,1548,"\n`"],[-1,1553,"\nfor(i"],[1,1587,"       "],[-1,1587,"{\n cout"],[1,1605,"  "],[-1,1605,"}"],[1,1609,"~~~"],[1,1610,"（3"],[1,1613,"复\n"],[-1,1613,"\n\n（3）时间复"],[1,1632,"  ~~~~"],[-1,1636,"\nfor(i"],[1,1672,"       "],[-1,1672,"{\nfor(i"],[1,1706,"    {  "],[-1,1706,"{\ncout<"],[1,1727," "],[-1,1727,"}\n}"],[1,1733,"   ~~~~~"],[-1,1737,"\n\n  **"],[1,1796,"   "],[-1,1799,"时间复"],[1,1814,"   ~~~"],[-1,1818,"\n"],[-1,1821,"int"],[-1,1825,"i="],[1,1832,"    "],[-1,1832,"whi"],[-1,1837,"("],[1,1845,"    \n "],[-1,1845,"{\n"],[-1,1853,"i*2;"],[1,1860,"    ~~\n "],[-1,1860,"}\n"],[-1,1865,"\n  **P"],[1,1904,"$$ x=l`^n $$"],[-1,1904,"`x=log2^n `"],[1,1919,"`"],[-1,1919,"其时"],[-1,1926,"`"],[1,1933,"`"],[1,1934,"。\n\n\n\n\n"],[-1,1935,"。"],[1,1938,"# #"],[-1,1938," \n"],[1,2039," "],[-1,2039,"\n"],[1,2146,"线性表"],[-1,2146,"\n\n\n"],[-1,2283,"#"],[1,2285,"第"],[-1,2287,"线性表 (第"],[1,2334,"\n\n\n"],[1,2336,"#  "],[-1,2340,"定义    "],[1,2355," *  "],[-1,2355,"**线"],[-1,2360,"（"],[-1,2391,"  "],[1,2394," "],[1,2398,"  若  "],[-1,2398,"若将线性"],[1,2502,"  "],[1,2505," 线  "],[-1,2505,"3.线性表元"],[1,2557,"   \n  注"],[-1,2557,"\n**注** "],[1,2586,"  "],[1,2588,"  "],[-1,2588,"首先它是"],[1,2621,"  "],[1,2622," "],[1,2624,"若  "],[-1,2624,"2.若元素存"],[1,2683,"  "],[1,2686," 另  "],[-1,2686,"3.另外，线"],[1,2736,"\n\n\n"],[1,2738,"#"],[-1,2738," （二）抽象"],[-1,2746,"类"],[1,2748,"（二）"],[-1,2814,"  "],[1,2822,"  "],[-1,2929," "],[1,2936," "],[1,3023,"\n    \n"],[1,3030," "],[-1,3030,"\n"],[1,3142,"A "],[-1,3142,"\n\n- 常用的操"],[1,3636,"弱"],[-1,3636,"若"],[1,3642,"若"],[-1,3642,"插"],[1,3656," ~~~~ "],[-1,3660,"\n    /"],[1,4056,"~~~~\n\n"],[-1,4059,"\n\n\n"],[1,4064,"#表的储"],[-1,4064," "],[-1,4068,"线性表的存储"],[1,4085,"-"],[-1,4085,"###"],[1,4093,"### "],[-1,4093,"结构"],[1,4101,"    "],[-1,4103," **概念**："],[1,4114,"**"],[1,4116,"**"],[1,4145,"    "],[-1,4146,"-"],[-1,4149,"**物理上"],[1,4157,"**"],[-1,4159,"**"],[1,4167,"**"],[1,4228,"    \n  "],[-1,4228,"\n- **顺序存储"],[1,4239,"**"],[-1,4247,"**"],[1,4254," **"],[1,4262,"   "],[-1,4262,"存储空间"],[1,4310,"  "],[-1,4314,"表的"],[1,4345,"  "],[-1,4345,"3."],[1,4373,"  "],[1,4374,"    "],[-1,4378,"注意**："],[1,4385,"**"],[-1,4385," "],[-1,4389," "],[-1,4395,"长"],[1,4472,"\n   "],[-1,4472," \n"],[-1,4484,"表开"],[1,4498,"  \n    "],[-1,4498,"\n- **地址计算"],[-1,4509,"："],[1,4512,"："],[-1,4512,"\n"],[1,4516,"\n"],[1,4517," **\n"],[-1,4521,"El"],[1,4628,"   "],[1,4632," "],[-1,4634,"所以对于"],[-1,4719,"**"],[1,4735,"**  "],[1,4746,"\n "],[1,4748," - "],[-1,4748,"\n"],[-1,4754,"获取元素"],[1,4760,"；  作"],[-1,4760,"\n "],[1,4840,"    \n "],[-1,4844,"c"],[1,4846,"`"],[-1,5224,"`\n  "],[1,5233," \n"],[-1,5236," \n"],[-1,5243,"插入操作"],[1,5250," \n    \n "],[-1,5256,"思路："],[1,5262,"   "],[-1,5276,"异常"],[1,5280,"  "],[-1,5312,"容"],[1,5315,"  "],[-1,5315,"\n"],[1,5354,"  "],[-1,5354,"；\n"],[1,5370,"    "],[-1,5370,"i处；\n"],[1,5384," "],[-1,5384,"\n"],[-1,5387,"ListIns"],[1,5431,"     \n "],[-1,6019,"**PS：**"],[1,6041,"   "],[1,6047,"除："],[-1,6047,"删除操作 "],[1,6059,"  "],[-1,6060,".如"],[1,6080,"   "],[-1,6080,"2.取"],[1,6142,"   \n   "],[-1,6142,""],[1,6624,""],[-1,6624,"       "],[1,6652,"    "],[1,6654," \n"],[-1,6654,"总结"],[-1,6659,"\n"],[-1,6662,"-"],[-1,6665,"点："],[1,6721,"   "],[-1,6721,"- 缺"],[1,6795,"\n- 链式存储"],[1,6798,"结"],[-1,6798,"\n"],[-1,6804,"链式存储结构"],[-1,6817," \n"],[1,6824,"\n"],[1,6851,"\n"],[-1,6855,"\n"],[-1,7017,"数据域和指针域"],[1,7034,"和指针域"],[-1,7221," "],[1,7232," "],[1,7250,"\n   "],[-1,7253," **概"],[1,7495,"\n"],[-1,7500,"有"],[1,7543,"\n"],[-1,7543," "],[-1,7549,"结"],[1,7552," "],[1,7574,"\n![单链表中的头结"],[-1,7612,"\n![单链表中的头结"],[1,7754,"**注：** 头指针"],[-1,7926,"**注：**  头指针"],[1,7940,"："],[-1,7940,"结"],[1,7944," "],[1,7979,"**"],[-1,7979,"#### "],[1,7990,"：*#### "],[-1,7990,"  \n"],[-1,7995," "],[-1,8000,"第i个"],[1,8006," \n "],[1,8012,"\n"],[-1,8021,"指"],[1,8040,"\n"],[-1,8050,"遍"],[1,8079,"\n"],[-1,8088,"为"],[1,8104,"\n"],[-1,8113,"返"],[1,8116,"否"],[-1,8116,"点"],[1,8122,"\n"],[-1,8132,"现"],[1,8150,"**注：**首先没有"],[-1,8219," */\n"],[1,8297," \n*/"],[-1,8640,"**注：** 首先没有"],[1,8657," "],[1,8687,"**"],[-1,8687,"#### "],[1,8698,"：*####"],[-1,8705,"exp"],[-1,8711," "],[1,8722," "],[-1,8750,"\n"],[1,8762,"\n"],[-1,8832,"\n"],[1,8843,"\n"],[1,8846,"~~~~"],[-1,8846,"```c"],[1,8856,"```c"],[-1,8856,"xt ="],[1,8883,"    \n~~~~ "],[1,8902,"数个结"],[-1,8902,"\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点"],[1,8950,"=1；\n"],[-1,8950,"从1开始；"],[1,8971,"P"],[-1,8971,"p"],[1,8986,"个"],[1,8994,"\n"],[1,9020,"\n"],[1,9029,"将欲删除结点p->next赋值给q；\n\n5"],[-1,9029,"在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6"],[1,9069,"删除"],[-1,9069,"插入刚才两个"],[1,9079,"p->next = q->next"],[1,9081,"\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点"],[-1,9081,"7.返回成功"],[1,9092,"\n\n\n **注：**"],[1,9094," 1.插入"],[1,9098,"和"],[-1,9098,"\n"],[1,9549,"删```除操作"],[-1,9549,"\n```\n\n\n"],[1,9563,"都是遍历找到元素，然后实现插入和"],[-1,9563,"单链表的"],[1,9569,"操作；其时间复杂度均为O（n）;"],[1,9573," 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.  "],[-1,9573,"![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;"],[-1,9739,"\n\n~~~~"],[1,9757,"整表创建**\n占用空间的大小和位置不\n\n需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n–"],[-1,9757,"第i个数据删除节点的算法：**  \n1."],[-1,9779,"结点p指向链表第"],[-1,9788,"个"],[1,9791,"p和计数器变量i；\n–初始化一空链表L；\n\n–让L的头结点"],[-1,9791,"，初始化j=1；\n2.当j<1时，就遍历链表，让P"],[-1,9819,"向后移动，不断"],[1,9828,"NULL，即建立"],[-1,9828,"下"],[1,9831,"带头"],[1,9833,"的"],[-1,9833,"，j累加1；\n3.若到"],[-1,9846,"末尾p为空，则说明第i个元素不存在"],[1,9865,"\n–循环实现后继结点的赋值和插入。\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表始，生成新结点，读取数据存放到新结点的数据域中，然后将新"],[-1,9865,"4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q"],[1,9952,"插到当前链表的表头上，直到结束为止"],[-1,9953,"    "],[1,9959,"**案：** 简单来说，就是把新"],[1,10383,"加\n"],[-1,10383,"\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加"],[1,10849,"\n–"],[1,10867,"\n–"],[1,11011,"对于插入和删除操作较为频繁使用单链表\n"],[1,11014,"\n#### "],[-1,11014,"数，"],[-1,11023,"  "],[1,11072,"* "],[-1,11072,"-"],[1,11088,"*"],[-1,11088," "],[1,11100,"*"],[-1,11100,";"],[-1,11125,"// P是中介结点\n   "],[-1,11142," "],[1,11147,"* "],[-1,11147,"(L"],[-1,11280,")-"],[-1,11284,"e"],[1,11286," "],[-1,11300,"\n\n`"],[1,11306," "],[-1,11306,"**"],[-1,11332,"**\n\n"],[1,11519,""],[-1,11519," // r指向列表的尾部，P是一个中介结点"],[1,11591,"// P是中介结点\n    "],[-1,11591,""],[1,11758,"**\n\n\n**"],[-1,11758,"\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### "],[1,11854,"**"],[1,11863,"**"],[1,11865,"\n\n"],[1,12047,"// r指向列表的尾部 P是一个中介结点"],[-1,12047,""],[1,12262,"备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；"],[1,12264,"\n"],[1,12268,"#### "],[-1,12268,"|-"],[-1,12278,"式 "],[1,12569,"\n\n"],[-1,12569,""]],[12149,12149],[234,234]]],[1556459686320,["GJX@GJXAIOU",[[-1,11881,"–"]],[11882,11882],[11881,11881]]],[1556459689064,["GJX@GJXAIOU",[[-1,11891,"–"]],[11892,11892],[11891,11891]]],[1556459689850,["GJX@GJXAIOU",[[-1,11890,"\n"]],[11891,11891],[11890,11890]]],[1556459692819,["GJX@GJXAIOU",[[-1,11912,"–"]],[11913,11913],[11912,11912]]],[1556459693199,["GJX@GJXAIOU",[[-1,11911,"\n"]],[11912,11912],[11911,11911]]],[1556459696962,["GJX@GJXAIOU",[[1,11881,"* "],[1,11890,"* "],[1,11911,"* "]],[11881,11930],[11883,11936]]]],null,"GJX@GJXAIOU"],["03571fdb-c8eb-4e08-860e-c96a84513a4a",1556535530041,"---\ntags:\n  - 数据结构\nflag: blue\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1)     \n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n    \n(2)时间复杂度O(n)   \n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  \n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      \n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。  \n      3.线性表的当前长度：length。   \n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；   \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n      \n#### 获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** 首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n     \n\n",[[1556535498949,["GJX@GJXAIOU",[[1,12571,"\n"]],[12570,12570],[12571,12571]]],[1556535499085,["GJX@GJXAIOU",[[1,12572,"\n"]],[12571,12571],[12572,12572]]],[1556535499262,["GJX@GJXAIOU",[[1,12573,"\n"]],[12572,12572],[12573,12573]]],[1556535511402,["GJX@GJXAIOU",[[1,12573,"### 静态链表"]],[12573,12573],[12581,12581]]],[1556535511736,["GJX@GJXAIOU",[[1,12582,"\n"]],[12581,12581],[12582,12582]]],[1556535512068,["GJX@GJXAIOU",[[1,12583,"\n"]],[12582,12582],[12583,12583]]],[1556535517521,["GJX@GJXAIOU",[[-1,12584,"     "]],[12589,12589],[12584,12584]]],[1556535517620,["GJX@GJXAIOU",[[-1,12585,"\n"]],[12584,12584],[12583,12583]]],[1556535529422,["GJX@GJXAIOU",[[1,12582,"用数组"]],[12582,12582],[12585,12585]]],[1556535530738,["GJX@GJXAIOU",[[1,12585,"表示的"]],[12585,12585],[12588,12588]]],[1556535532202,["GJX@GJXAIOU",[[-1,12585,"表示的"]],[12588,12588],[12585,12585]]],[1556535544212,["GJX@GJXAIOU",[[1,12585,"描述的链表叫做静态链表"]],[12585,12585],[12596,12596]]],[1556535544534,["GJX@GJXAIOU",[[1,12599,"\n"]],[12596,12596],[12597,12597]]],[1556535616635,["GJX@GJXAIOU",[[1,12600,"\n"]],[12596,12596],[12597,12597]]],[1556535630015,["GJX@GJXAIOU",[[1,12597,"该方法称为：游标实现法："]],[12597,12597],[12609,12609]]],[1556535630275,["GJX@GJXAIOU",[[1,12613,"\n"]],[12609,12609],[12610,12610]]],[1556535682092,["GJX@GJXAIOU",[[1,12611,"![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)"]],[12611,12611],[12731,12731]]],[1556535690369,["GJX@GJXAIOU",[[-1,12732,"\n"],[1,12733,"数组"]],[12732,12732],[12734,12734]]],[1556535692203,["GJX@GJXAIOU",[[1,12734,"系哦啊表"]],[12734,12734],[12738,12738]]],[1556535694068,["GJX@GJXAIOU",[[-1,12734,"系哦啊表"]],[12738,12738],[12734,12734]]],[1556535705712,["GJX@GJXAIOU",[[1,12734,"下标为0的数据域不存放数据，"]],[12734,12734],[12748,12748]]],[1556535718559,["GJX@GJXAIOU",[[1,12738,"和max"]],[12738,12738],[12742,12742]]],[1556535719771,["GJX@GJXAIOU",[[-1,12739,"max"]],[12742,12742],[12739,12739]]],[1556535724056,["GJX@GJXAIOU",[[1,12739,"maxsize-1"]],[12739,12739],[12748,12748]]],[1556535748065,["GJX@GJXAIOU",[[1,12758,"游标的第一的"]],[12758,12758],[12764,12764]]],[1556535748771,["GJX@GJXAIOU",[[-1,12762,"一的"]],[12764,12764],[12762,12762]]],[1556535767080,["GJX@GJXAIOU",[[1,12762,"一个数值表示数组中第一个"]],[12762,12762],[12774,12774]]],[1556535782105,["GJX@GJXAIOU",[[1,12774,"没有存放数据区域的下标"]],[12774,12774],[12785,12785]]],[1556535785513,["GJX@GJXAIOU",[[-1,12780,"区域"]],[12782,12782],[12780,12780]]],[1556535790034,["GJX@GJXAIOU",[[1,12780,"元素"]],[12780,12780],[12782,12782]]],[1556535808858,["GJX@GJXAIOU",[[1,12785,"，（）途中"]],[12785,12785],[12790,12790]]],[1556535809451,["GJX@GJXAIOU",[[-1,12788,"途中"]],[12790,12790],[12788,12788]]],[1556535827179,["GJX@GJXAIOU",[[1,12787,"图中下标为5的数据域没有存放数据，"]],[12787,12787],[12804,12804]]],[1556535827810,["GJX@GJXAIOU",[[-1,12803,"，"]],[12804,12804],[12803,12803]]],[1556535829584,["GJX@GJXAIOU",[[1,12804,"，"]],[12804,12804],[12805,12805]]],[1556535889954,["GJX@GJXAIOU",[[1,12805,"游标的最后一个值表示第一个存放数据的"]],[12805,12805],[12823,12823]]],[1556535895558,["GJX@GJXAIOU",[[1,12823,"元素的下标。"]],[12823,12823],[12829,12829]]],[1556535896442,["GJX@GJXAIOU",[[-1,12828,"。"]],[12829,12829],[12828,12828]]],[1556535897855,["GJX@GJXAIOU",[[1,12828,"，（）"]],[12828,12828],[12831,12831]]],[1556535921618,["GJX@GJXAIOU",[[1,12830,"图中下标为1的数据域为第一个存放数据的"]],[12830,12830],[12849,12849]]],[1556535940747,["GJX@GJXAIOU",[[1,12850,"\n\n"]],[12850,12850],[12851,12851]]],[1556535941439,["GJX@GJXAIOU",[[1,12851,"•线性表的静态链表存储结构\n\n#define MAXSIZE 1000\n\ntypedef  struct\n\n{\n\nElemType data; // 数据\n\nint cur; // 游标（Cursor）\n\n} Component, StaticLinkList[MAXSIZE];"]],[12851,12851],[12991,12991]]],[1556535995120,["GJX@GJXAIOU",[[1,12850,"。其他的游标均表示failed数据的"]],[12850,12850],[12868,12868]]],[1556535998913,["GJX@GJXAIOU",[[-1,12859,"failed数据的"]],[12868,12868],[12859,12859]]],[1556536008777,["GJX@GJXAIOU",[[1,12859,"该数据的下一个数据的下标"]],[12859,12859],[12871,12871]]],[1556536048875,["GJX@GJXAIOU",[[1,13014,"\n"]],[13013,13013],[13014,13014]]],[1556536049014,["GJX@GJXAIOU",[[1,13015,"\n"]],[13014,13014],[13015,13015]]],[1556536049149,["GJX@GJXAIOU",[[1,13016,"\n"]],[13015,13015],[13016,13016]]],[1556536049269,["GJX@GJXAIOU",[[1,13017,"\n"]],[13016,13016],[13017,13017]]],[1556536050036,["GJX@GJXAIOU",[[1,13017,"•对静态链表进行初始化相当于初始化数组：\n\nStatus InitList(StaticLinkList space)\n\n{\n\nint  i;\n\nfor( i=0; i < MAXSIZE-1; i++ )\n\nspace[i].cur = i + 1;\n\nspace[MAXSIZE-1].cur = 0;\n\nreturn OK;\n\n}"]],[13017,13017],[13185,13185]]],[1556536055619,["GJX@GJXAIOU",[[1,13186,"\n"]],[13185,13185],[13186,13186]]],[1556536055784,["GJX@GJXAIOU",[[1,13187,"\n"]],[13186,13186],[13187,13187]]],[1556536055940,["GJX@GJXAIOU",[[1,13188,"\n"]],[13187,13187],[13188,13188]]],[1556536056147,["GJX@GJXAIOU",[[1,13189,"\n"]],[13188,13188],[13189,13189]]],[1556536130136,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13185,"\n"]],[12871,12871],[13186,13186]]],[1556536130136,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13185,"\n"]],[13186,13186],[12871,12871]]],[1556536070980,["GJX@GJXAIOU",[[1,13190,"\n"]],[13185,13185],[13186,13186]]],[1556536071110,["GJX@GJXAIOU",[[1,13191,"\n"]],[13186,13186],[13187,13187]]],[1556536071622,["GJX@GJXAIOU",[[1,13187,"–我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。\n\n–我们通常把未使用的数组元素称为备用链表。\n\n–数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标。\n\n–数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。"]],[13187,13187],[13349,13349]]],[1556536075331,["GJX@GJXAIOU",[[-1,13187,"–"]],[13187,13188],[13187,13187]]],[1556536077402,["GJX@GJXAIOU",[[-1,13224,"–"]],[13224,13225],[13224,13224]]],[1556536078546,["GJX@GJXAIOU",[[-1,13246,"–"]],[13246,13247],[13246,13246]]],[1556536080426,["GJX@GJXAIOU",[[-1,13288,"–"]],[13289,13289],[13288,13288]]],[1556536082523,["GJX@GJXAIOU",[[1,13350,"\n"]],[13345,13345],[13346,13346]]],[1556536082726,["GJX@GJXAIOU",[[1,13351,"\n"]],[13346,13346],[13347,13347]]],[1556536082899,["GJX@GJXAIOU",[[1,13352,"\n"]],[13347,13347],[13348,13348]]],[1556536092630,["GJX@GJXAIOU",[[1,13353,"\n"]],[13346,13346],[13347,13347]]],[1556536190135,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13345,"\n"]],[12871,12871],[13346,13346]]],[1556536190135,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13345,"\n"]],[13346,13346],[12871,12871]]],[1556536186855,["GJX@GJXAIOU",[[1,13349,"####  静态"]],[13349,13349],[13357,13357]]],[1556536250149,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13357,"\n"]],[12871,12871],[13358,13358]]],[1556536250149,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13357,"\n"]],[13358,13358],[12871,12871]]],[1556536195474,["GJX@GJXAIOU",[[1,13357,"链表的插入操作"]],[13357,13357],[13364,13364]]],[1556536196251,["GJX@GJXAIOU",[[1,13369,"\n"]],[13364,13364],[13365,13365]]],[1556536247859,["GJX@GJXAIOU",[[1,13246,"**"],[1,13285,"**"]],[13246,13285],[13246,13289]]],[1556536430140,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13368,"\n"]],[12871,12871],[13369,13369]]],[1556536430140,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13368,"\n"]],[13369,13369],[12871,12871]]],[1556536393489,["GJX@GJXAIOU",[[1,13369,"在A之后插入B"]],[13369,13369],[13376,13376]]],[1556536393994,["GJX@GJXAIOU",[[1,13381,"\n"]],[13376,13376],[13377,13377]]],[1556536490139,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13376,"\n"]],[12871,12871],[13377,13377]]],[1556536490139,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13376,"\n"]],[13377,13377],[12871,12871]]],[1556536479359,["GJX@GJXAIOU",[[1,13378,"![j静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)"]],[13378,13378],[13490,13490]]],[1556536481412,["GJX@GJXAIOU",[[-1,13380,"j"]],[13381,13381],[13380,13380]]],[1556536550139,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13488,"\n"]],[12871,12871],[13489,13489]]],[1556536550139,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13488,"\n"]],[13489,13489],[12871,12871]]],[1556536499847,["GJX@GJXAIOU",[[1,13489,"代码是以"]],[13489,13489],[13493,13493]]],[1556536500809,["GJX@GJXAIOU",[[-1,13491,"是以"]],[13493,13493],[13491,13491]]],[1556536504399,["GJX@GJXAIOU",[[1,13491,"示意："]],[13491,13491],[13494,13494]]],[1556536504795,["GJX@GJXAIOU",[[1,13497,"\n"]],[13494,13494],[13495,13495]]],[1556536506847,["GJX@GJXAIOU",[[1,13495,"···"]],[13495,13495],[13498,13498]]],[1556536508105,["GJX@GJXAIOU",[[-1,13495,"···"]],[13498,13498],[13495,13495]]],[1556536509120,["GJX@GJXAIOU",[[1,13495,"```"]],[13495,13495],[13498,13498]]],[1556536509175,["GJX@GJXAIOU",[[1,13498,"language\n```\n"]],[13498,13498],[13498,13506]]],[1556536510558,["GJX@GJXAIOU",[[-1,13498,"language"],[1,13506,"c"]],[13498,13506],[13499,13499]]],[1556536510747,["GJX@GJXAIOU",[[1,13500,"\n"]],[13499,13499],[13500,13500]]],[1556536511993,["GJX@GJXAIOU",[[1,13500,"•首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n\n{\n\nint  i = space[0].cur;\n\nif( space[0].cur )\n\nspace[0].cur = space[i].cur;\n\n // 把它的下一个分量用来作为备用。\n\nreturn i;\n\n}"]],[13500,13500],[13665,13665]]],[1556536514818,["GJX@GJXAIOU",[[1,13673,"\n"]],[13671,13671],[13672,13672]]],[1556536515321,["GJX@GJXAIOU",[[1,13674,"\n"]],[13672,13672],[13673,13673]]],[1556536515424,["GJX@GJXAIOU",[[1,13675,"\n"]],[13673,13673],[13674,13674]]],[1556536515518,["GJX@GJXAIOU",[[1,13676,"\n"]],[13674,13674],[13675,13675]]],[1556536515612,["GJX@GJXAIOU",[[1,13677,"\n"]],[13675,13675],[13676,13676]]],[1556536515732,["GJX@GJXAIOU",[[1,13678,"\n"]],[13676,13676],[13677,13677]]],[1556536515837,["GJX@GJXAIOU",[[1,13679,"\n"]],[13677,13677],[13678,13678]]],[1556536515949,["GJX@GJXAIOU",[[1,13680,"\n"]],[13678,13678],[13679,13679]]],[1556536516050,["GJX@GJXAIOU",[[1,13681,"\n"]],[13679,13679],[13680,13680]]],[1556536516154,["GJX@GJXAIOU",[[1,13682,"\n"]],[13680,13680],[13681,13681]]],[1556536516271,["GJX@GJXAIOU",[[1,13683,"\n"]],[13681,13681],[13682,13682]]],[1556536516378,["GJX@GJXAIOU",[[1,13684,"\n"]],[13682,13682],[13683,13683]]],[1556536516484,["GJX@GJXAIOU",[[1,13685,"\n"]],[13683,13683],[13684,13684]]],[1556536516615,["GJX@GJXAIOU",[[1,13686,"\n"]],[13684,13684],[13685,13685]]],[1556536516845,["GJX@GJXAIOU",[[1,13687,"\n"]],[13685,13685],[13686,13686]]],[1556536516942,["GJX@GJXAIOU",[[1,13688,"\n"]],[13686,13686],[13687,13687]]],[1556536517038,["GJX@GJXAIOU",[[1,13689,"\n"]],[13687,13687],[13688,13688]]],[1556536517141,["GJX@GJXAIOU",[[1,13690,"\n"]],[13688,13688],[13689,13689]]],[1556536517241,["GJX@GJXAIOU",[[1,13691,"\n"]],[13689,13689],[13690,13690]]],[1556536517340,["GJX@GJXAIOU",[[1,13692,"\n"]],[13690,13690],[13691,13691]]],[1556536517448,["GJX@GJXAIOU",[[1,13693,"\n"]],[13691,13691],[13692,13692]]],[1556536517560,["GJX@GJXAIOU",[[1,13694,"\n"]],[13692,13692],[13693,13693]]],[1556536517679,["GJX@GJXAIOU",[[1,13695,"\n"]],[13693,13693],[13694,13694]]],[1556536517811,["GJX@GJXAIOU",[[1,13696,"\n"]],[13694,13694],[13695,13695]]],[1556536517908,["GJX@GJXAIOU",[[1,13697,"\n"]],[13695,13695],[13696,13696]]],[1556536518022,["GJX@GJXAIOU",[[1,13698,"\n"]],[13696,13696],[13697,13697]]],[1556536518120,["GJX@GJXAIOU",[[1,13699,"\n"]],[13697,13697],[13698,13698]]],[1556536518220,["GJX@GJXAIOU",[[1,13700,"\n"]],[13698,13698],[13699,13699]]],[1556536518322,["GJX@GJXAIOU",[[1,13701,"\n"]],[13699,13699],[13700,13700]]],[1556536518422,["GJX@GJXAIOU",[[1,13702,"\n"]],[13700,13700],[13701,13701]]],[1556536518522,["GJX@GJXAIOU",[[1,13703,"\n"]],[13701,13701],[13702,13702]]],[1556536518627,["GJX@GJXAIOU",[[1,13704,"\n"]],[13702,13702],[13703,13703]]],[1556536518732,["GJX@GJXAIOU",[[1,13705,"\n"]],[13703,13703],[13704,13704]]],[1556536518851,["GJX@GJXAIOU",[[1,13706,"\n"]],[13704,13704],[13705,13705]]],[1556536518961,["GJX@GJXAIOU",[[1,13707,"\n"]],[13705,13705],[13706,13706]]],[1556536519058,["GJX@GJXAIOU",[[1,13708,"\n"]],[13706,13706],[13707,13707]]],[1556536519161,["GJX@GJXAIOU",[[1,13709,"\n"]],[13707,13707],[13708,13708]]],[1556536519259,["GJX@GJXAIOU",[[1,13710,"\n"]],[13708,13708],[13709,13709]]],[1556536519358,["GJX@GJXAIOU",[[1,13711,"\n"]],[13709,13709],[13710,13710]]],[1556536519461,["GJX@GJXAIOU",[[1,13712,"\n"]],[13710,13710],[13711,13711]]],[1556536519563,["GJX@GJXAIOU",[[1,13713,"\n"]],[13711,13711],[13712,13712]]],[1556536519670,["GJX@GJXAIOU",[[1,13714,"\n"]],[13712,13712],[13713,13713]]],[1556536519779,["GJX@GJXAIOU",[[1,13715,"\n"]],[13713,13713],[13714,13714]]],[1556536519882,["GJX@GJXAIOU",[[1,13716,"\n"]],[13714,13714],[13715,13715]]],[1556536519987,["GJX@GJXAIOU",[[1,13717,"\n"]],[13715,13715],[13716,13716]]],[1556536520131,["GJX@GJXAIOU",[[1,13718,"\n"]],[13716,13716],[13717,13717]]],[1556536520231,["GJX@GJXAIOU",[[1,13719,"\n"]],[13717,13717],[13718,13718]]],[1556536520329,["GJX@GJXAIOU",[[1,13720,"\n"]],[13718,13718],[13719,13719]]],[1556536520448,["GJX@GJXAIOU",[[1,13721,"\n"]],[13719,13719],[13720,13720]]],[1556536520559,["GJX@GJXAIOU",[[1,13722,"\n"]],[13720,13720],[13721,13721]]],[1556536520665,["GJX@GJXAIOU",[[1,13723,"\n"]],[13721,13721],[13722,13722]]],[1556536520775,["GJX@GJXAIOU",[[1,13724,"\n"]],[13722,13722],[13723,13723]]],[1556536520881,["GJX@GJXAIOU",[[1,13725,"\n"]],[13723,13723],[13724,13724]]],[1556536520991,["GJX@GJXAIOU",[[1,13726,"\n"]],[13724,13724],[13725,13725]]],[1556536521104,["GJX@GJXAIOU",[[1,13727,"\n"]],[13725,13725],[13726,13726]]],[1556536521224,["GJX@GJXAIOU",[[1,13728,"\n"]],[13726,13726],[13727,13727]]],[1556536521377,["GJX@GJXAIOU",[[1,13729,"\n"]],[13727,13727],[13728,13728]]],[1556536521480,["GJX@GJXAIOU",[[1,13730,"\n"]],[13728,13728],[13729,13729]]],[1556536521584,["GJX@GJXAIOU",[[1,13731,"\n"]],[13729,13729],[13730,13730]]],[1556536530481,["GJX@GJXAIOU",[[-1,13554,"\n"]],[13554,13554],[13553,13553]]],[1556536536560,["GJX@GJXAIOU",[[1,13579," // houmai"]],[13579,13579],[13589,13589]]],[1556536537539,["GJX@GJXAIOU",[[-1,13583,"houmai"]],[13589,13589],[13583,13583]]],[1556536540196,["GJX@GJXAIOU",[[1,13583,"后面的额"]],[13583,13583],[13587,13587]]],[1556536541282,["GJX@GJXAIOU",[[-1,13586,"额"]],[13587,13587],[13586,13586]]],[1556536541407,["GJX@GJXAIOU",[[1,13586,"="]],[13586,13586],[13587,13587]]],[1556536542756,["GJX@GJXAIOU",[[-1,13586,"="]],[13587,13587],[13586,13586]]],[1556536549591,["GJX@GJXAIOU",[[1,13586,"值为5"]],[13586,13586],[13589,13589]]],[1556536610142,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13678,"\n"]],[12871,12871],[13679,13679]]],[1556536610142,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13678,"\n"]],[13679,13679],[12871,12871]]],[1556536555336,["GJX@GJXAIOU",[[1,13589,"，则现在ide"]],[13589,13589],[13596,13596]]],[1556536555967,["GJX@GJXAIOU",[[-1,13594,"de"]],[13596,13596],[13594,13594]]],[1556536558751,["GJX@GJXAIOU",[[1,13594,"的值为5"]],[13594,13594],[13598,13598]]],[1556536571716,["GJX@GJXAIOU",[[1,13750,"\n"]],[13687,13687],[13688,13688]]],[1556536580389,["GJX@GJXAIOU",[[1,13751,"\n"]],[13688,13688],[13689,13689]]],[1556536582961,["GJX@GJXAIOU",[[1,13689,"·"]],[13689,13689],[13690,13690]]],[1556536583769,["GJX@GJXAIOU",[[-1,13689,"·"]],[13690,13690],[13689,13689]]],[1556536584979,["GJX@GJXAIOU",[[1,13689,"```"]],[13689,13689],[13692,13692]]],[1556536585032,["GJX@GJXAIOU",[[1,13692,"language\n```\n"]],[13692,13692],[13692,13700]]],[1556536586294,["GJX@GJXAIOU",[[-1,13692,"language"],[1,13700,"c"]],[13692,13700],[13693,13693]]],[1556536586491,["GJX@GJXAIOU",[[1,13694,"\n"]],[13693,13693],[13694,13694]]],[1556536587993,["GJX@GJXAIOU",[[1,13694,"/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur;\n        }\n        L[j].cur = L[k].cur;\n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}"]],[13694,13694],[14151,14151]]],[1556536591027,["GJX@GJXAIOU",[[1,13694,"\n"]],[13693,13693],[13694,13694]]],[1556536593192,["GJX@GJXAIOU",[[1,13694,"8 "]],[13694,13694],[13696,13696]]],[1556536594105,["GJX@GJXAIOU",[[-1,13694,"8 "]],[13696,13696],[13694,13694]]],[1556536595121,["GJX@GJXAIOU",[[1,13694,"jai"]],[13694,13694],[13697,13697]]],[1556536595961,["GJX@GJXAIOU",[[-1,13694,"jai"]],[13697,13697],[13694,13694]]],[1556536600945,["GJX@GJXAIOU",[[1,13694,"插入操作的代码："]],[13694,13694],[13702,13702]]],[1556536601380,["GJX@GJXAIOU",[[1,13703,"\n"]],[13702,13702],[13703,13703]]],[1556536850147,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,14165,"\n"]],[12871,12871],[14166,14166]]],[1556536850147,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,14165,"\n"]],[14166,14166],[12871,12871]]],[1556536816860,["GJX@GJXAIOU",[[1,13648," 、、"]],[13648,13648],[13651,13651]]],[1556536817565,["GJX@GJXAIOU",[[-1,13649,"、、"]],[13651,13651],[13649,13649]]],[1556536825584,["GJX@GJXAIOU",[[1,13649,"//将5这个次啊比哦啊"]],[13649,13649],[13660,13660]]],[1556536826638,["GJX@GJXAIOU",[[-1,13655,"次啊比哦啊"]],[13660,13660],[13655,13655]]],[1556536848283,["GJX@GJXAIOU",[[1,13655,"下标的元素的游标地址 给0的"]],[13655,13655],[13669,13669]]],[1556536910159,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,14186,"\n"]],[12871,12871],[14187,14187]]],[1556536910159,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,14186,"\n"]],[14187,14187],[12871,12871]]],[1556536851508,["GJX@GJXAIOU",[[1,13671,"地址"]],[13671,13671],[13673,13673]]],[1556536854353,["GJX@GJXAIOU",[[-1,13669,"下标地址"]],[13673,13673],[13669,13669]]],[1556536875417,["GJX@GJXAIOU",[[1,13669,"游标，因为5的下一个不一定是6"]],[13669,13669],[13684,13684]]],[1556536891424,["GJX@GJXAIOU",[[1,13618," 、、"]],[13618,13618],[13621,13621]]],[1556536892244,["GJX@GJXAIOU",[[-1,13619,"、、"]],[13621,13621],[13619,13619]]],[1556536899843,["GJX@GJXAIOU",[[1,13619,"//如果不是空链表的话"]],[13619,13619],[13630,13630]]],[1556537030193,[null,[[1,12871,"；"],[-1,13012,"\n"],[1,13696,"\n\n"],[1,14211,"\n"]],[12871,12871],[14212,14212]]],[1556537030193,[null,[[-1,12871,"；"],[1,13013,"\n"],[-1,13696,"\n\n"],[-1,14213,"\n"]],[14212,14212],[12871,12871]]],[1556536988343,["GJX@GJXAIOU",[[1,12872,"最后一个圆度"]],[12872,12872],[12878,12878]]],[1556536990241,["GJX@GJXAIOU",[[-1,12874,"一个圆度"]],[12878,12878],[12874,12874]]],[1556536997384,["GJX@GJXAIOU",[[1,12874,"一个元素的游标是0"]],[12874,12874],[12883,12883]]],[1556537150197,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13023,"\n"],[1,13707,"\n\n"],[1,14222,"\n"]],[12871,12871],[14223,14223]]],[1556537150197,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13024,"\n"],[-1,13707,"\n\n"],[-1,14224,"\n"]],[14223,14223],[12871,12871]]],[1556537117566,["GJX@GJXAIOU",[[1,14112," 最后一个元素的游标赋值给K，则K= 1"]],[14112,14112],[14132,14132]]],[1556537120866,["GJX@GJXAIOU",[[1,14113,"// "]],[14113,14113],[14116,14116]]],[1556537210208,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14242,""],[1,14245,"\n"]],[12871,12871],[14246,14246]]],[1556537210208,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14244,""],[-1,14247,"\n"]],[14246,14246],[12871,12871]]],[1556537166908,["GJX@GJXAIOU",[[1,14311,"\n"]],[14247,14247],[14248,14248]]],[1556537167061,["GJX@GJXAIOU",[[1,14312,"\n"]],[14248,14248],[14249,14249]]],[1556537810205,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14242,""],[1,14245,"\n"]],[12871,12871],[14246,14246]]],[1556537810205,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14244,""],[-1,14247,"\n"]],[14246,14246],[12871,12871]]],[1556537778799,["GJX@GJXAIOU",[[1,14250,"####  jintai"]],[14250,14250],[14262,14262]]],[1556537780520,["GJX@GJXAIOU",[[-1,14256,"jintai"]],[14262,14262],[14256,14256]]],[1556537788745,["GJX@GJXAIOU",[[1,14256,"静态链表的删除操作"]],[14256,14256],[14265,14265]]],[1556537789170,["GJX@GJXAIOU",[[1,14328,"\n"]],[14265,14265],[14266,14266]]],[1556537930237,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[-1,13707,""],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[1,14265,"\n\n\n"]],[12871,12871],[14268,14268]]],[1556537930237,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[1,13707,""],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[-1,14265,"\n\n\n"]],[14268,14268],[12871,12871]]],[1556537902810,["GJX@GJXAIOU",[[1,14329,"\n"]],[14266,14266],[14267,14267]]],[1556537918073,["GJX@GJXAIOU",[[1,14267,"删除元素C，删除之后结果如下："]],[14267,14267],[14282,14282]]],[1556537918627,["GJX@GJXAIOU",[[1,14345,"\n"]],[14282,14282],[14283,14283]]],[1556537990216,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[-1,13707,""],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[1,14282,"\n\n\n"]],[12871,12871],[14285,14285]]],[1556537990216,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[1,13707,""],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[-1,14282,"\n\n\n"]],[14285,14285],[12871,12871]]],[1556537964515,["GJX@GJXAIOU",[[1,14284,"![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)"]],[14284,14284],[14394,14394]]],[1556537967027,["GJX@GJXAIOU",[[1,14455,"\n"]],[14394,14394],[14395,14395]]],[1556538050208,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[-1,14284,""],[1,14393,"\n\n\n"]],[12871,12871],[14396,14396]]],[1556538050208,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[1,14284,""],[-1,14393,"\n\n\n"]],[14396,14396],[12871,12871]]],[1556538003073,["GJX@GJXAIOU",[[1,14396,"代码示例："]],[14396,14396],[14401,14401]]],[1556538003580,["GJX@GJXAIOU",[[1,14461,"\n"]],[14401,14401],[14402,14402]]],[1556538029056,["GJX@GJXAIOU",[[1,14403,"··"]],[14403,14403],[14405,14405]]],[1556538030364,["GJX@GJXAIOU",[[-1,14403,"··"]],[14405,14405],[14403,14403]]],[1556538031830,["GJX@GJXAIOU",[[1,14403,"```"]],[14403,14403],[14406,14406]]],[1556538031885,["GJX@GJXAIOU",[[1,14406,"language\n```\n"]],[14406,14406],[14406,14414]]],[1556538033439,["GJX@GJXAIOU",[[-1,14406,"language"],[1,14414,"c"]],[14406,14414],[14407,14407]]],[1556538033645,["GJX@GJXAIOU",[[1,14408,"\n"]],[14407,14407],[14408,14408]]],[1556538034818,["GJX@GJXAIOU",[[1,14408,"/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}"]],[14408,14408],[15065,15065]]],[1556538045714,["GJX@GJXAIOU",[[1,15129,"\n"]],[15071,15071],[15072,15072]]],[1556538110215,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[-1,15066,""],[1,15069,"\n\n\n"]],[12871,12871],[15072,15072]]],[1556538110215,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[1,15066,""],[-1,15069,"\n\n\n"]],[15072,15072],[12871,12871]]],[1556538051793,["GJX@GJXAIOU",[[1,15077,"jin"]],[15077,15077],[15080,15080]]],[1556538053098,["GJX@GJXAIOU",[[-1,15077,"jin"]],[15080,15080],[15077,15077]]],[1556538053868,["GJX@GJXAIOU",[[1,15077,"Jin"]],[15077,15077],[15080,15080]]],[1556538054706,["GJX@GJXAIOU",[[-1,15077,"Jin"]],[15080,15080],[15077,15077]]],[1556538058886,["GJX@GJXAIOU",[[1,15077,"优缺点总结"]],[15077,15077],[15082,15082]]],[1556538059341,["GJX@GJXAIOU",[[1,15140,"\n"]],[15082,15082],[15083,15083]]],[1556538067591,["GJX@GJXAIOU",[[1,15083,"•优点：\n\n–在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。"]],[15083,15083],[15205,15205]]],[1556538084162,["GJX@GJXAIOU",[[1,15263,"\n"]],[15205,15205],[15206,15206]]],[1556538084586,["GJX@GJXAIOU",[[1,15264,"\n"]],[15206,15206],[15207,15207]]],[1556538085397,["GJX@GJXAIOU",[[1,15265,"\n"]],[15207,15207],[15208,15208]]],[1556538088004,["GJX@GJXAIOU",[[1,15208,"•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。，"]],[15208,15208],[15250,15250]]],[1556538090664,["GJX@GJXAIOU",[[-1,15249,"，"]],[15250,15250],[15249,15249]]],[1556538108873,["GJX@GJXAIOU",[[1,15249,"能用单链表就不用静态链表"]],[15249,15249],[15261,15261]]],[1556538170213,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[-1,15072,"\n\n\n\n\n"],[1,15077,"#### "],[-1,15208,""],[1,15261,"\n\n\n\n\n\n\n\n"]],[12871,12871],[15269,15269]]],[1556538170213,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[1,15072,"\n\n\n\n\n"],[-1,15072,"#### "],[1,15208,""],[-1,15261,"\n\n\n\n\n\n\n\n"]],[15269,15269],[12871,12871]]],[1556538127202,["GJX@GJXAIOU",[[1,15319,"\n"]],[15265,15265],[15266,15266]]],[1556538138865,["GJX@GJXAIOU",[[1,15266,"### 小的程序题："]],[15266,15266],[15276,15276]]],[1556538145428,["GJX@GJXAIOU",[[1,15330,"\n"]],[15276,15276],[15277,15277]]],[1556538164704,["GJX@GJXAIOU",[[1,15277,"题目：快速找到未知长度单链表的中间节点"]],[15277,15277],[15296,15296]]],[1556538168234,["GJX@GJXAIOU",[[1,15350,"\n"]],[15296,15296],[15297,15297]]],[1556538230216,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[-1,15072,"\n\n\n\n\n"],[1,15077,"#### "],[-1,15277,""],[1,15296,"\n\n\n\n\n\n\n\n"]],[12871,12871],[15304,15304]]],[1556538230216,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[1,15072,"\n\n\n\n\n"],[-1,15072,"#### "],[1,15277,""],[-1,15296,"\n\n\n\n\n\n\n\n"]],[15304,15304],[12871,12871]]],[1556538179582,["GJX@GJXAIOU",[[1,15298,"利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想"]],[15298,15298],[15397,15397]]],[1556538182796,["GJX@GJXAIOU",[[1,15450,"\n"]],[15397,15397],[15398,15398]]],[1556538184879,["GJX@GJXAIOU",[[1,15398,"·"]],[15398,15398],[15399,15399]]],[1556538185300,["GJX@GJXAIOU",[[-1,15398,"·"]],[15399,15399],[15398,15398]]],[1556538187863,["GJX@GJXAIOU",[[1,15398,"```"]],[15398,15398],[15401,15401]]],[1556538187932,["GJX@GJXAIOU",[[1,15401,"language\n```\n"]],[15401,15401],[15401,15409]]],[1556538189120,["GJX@GJXAIOU",[[-1,15401,"language"],[1,15409,"c"]],[15401,15409],[15402,15402]]],[1556538189308,["GJX@GJXAIOU",[[1,15403,"\n"]],[15402,15402],[15403,15403]]],[1556538203760,["GJX@GJXAIOU",[[1,15403,"Status GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}"]],[15403,15403],[15809,15809]]],[1556538207090,["GJX@GJXAIOU",[[1,15867,"\n"]],[15813,15813],[15814,15814]]],[1556538207306,["GJX@GJXAIOU",[[1,15868,"\n"]],[15814,15814],[15815,15815]]],[1556538220075,["GJX@GJXAIOU",[[1,15869,"\n"]],[15815,15815],[15816,15816]]],[1556538221090,["GJX@GJXAIOU",[[1,15816,"timu"]],[15816,15816],[15820,15820]]],[1556538222264,["GJX@GJXAIOU",[[-1,15816,"timu"]],[15820,15820],[15816,15816]]],[1556538227143,["GJX@GJXAIOU",[[1,15816,"题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。"]],[15816,15816],[15871,15871]]],[1556538228714,["GJX@GJXAIOU",[[1,15925,"\n"]],[15871,15871],[15872,15872]]],[1556538290466,[null,[[-1,12871,"\n"],[1,12872,"；"],[1,12883,"\n"],[-1,13025,"\n"],[1,13707,"\n\n"],[-1,14110,"\n "],[1,14135,"\n "],[-1,14248,"\n\n"],[-1,15072,"\n\n\n\n\n"],[1,15077,"#### "],[-1,15816,""],[1,15871,"\n\n\n\n\n\n\n\n"]],[12871,12871],[15879,15879]]],[1556538290466,[null,[[1,12871,"\n"],[-1,12871,"；"],[-1,12883,"\n"],[1,13026,"\n"],[-1,13707,"\n\n"],[1,14112,"\n "],[-1,14135,"\n "],[1,14250,"\n\n"],[1,15072,"\n\n\n\n\n"],[-1,15072,"#### "],[1,15816,""],[-1,15871,"\n\n\n\n\n\n\n\n"]],[15879,15879],[12871,12871]]],[1556538230929,["GJX@GJXAIOU",[[1,15872,"```"]],[15872,15872],[15875,15875]]],[1556538231000,["GJX@GJXAIOU",[[1,15875,"language\n```\n"]],[15875,15875],[15875,15883]]],[1556538232262,["GJX@GJXAIOU",[[-1,15875,"language"],[1,15883,"c"]],[15875,15883],[15876,15876]]],[1556538232425,["GJX@GJXAIOU",[[1,15877,"\n"]],[15876,15876],[15877,15877]]],[1556538256872,["GJX@GJXAIOU",[[1,15877,"#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n"]],[15877,15877],[19025,19025]]],[1556538285021,["GJX@GJXAIOU",[[1,12573,"\n"]],[12571,12571],[12572,12572]]],[1556538285217,["GJX@GJXAIOU",[[1,12574,"\n"]],[12572,12572],[12573,12573]]],[1556538287306,["GJX@GJXAIOU",[[1,12573,"2"]],[12573,12573],[12574,12574]]],[1556538288313,["GJX@GJXAIOU",[[-1,12573,"2"]],[12574,12574],[12573,12573]]],[1556538290201,["GJX@GJXAIOU",[[1,12573,"@to"]],[12573,12573],[12576,12576]]],[1556538350470,[null,[[-1,12876,"\n"],[1,12877,"；"],[1,12888,"\n"],[-1,13030,"\n"],[1,13712,"\n\n"],[-1,14115,"\n "],[1,14140,"\n "],[-1,14253,"\n\n"],[-1,15077,"\n\n\n\n\n"],[1,15082,"#### "],[1,19034,"\n\n\n\n\n\n\n\n"]],[12876,12876],[19042,19042]]],[1556538350470,[null,[[1,12876,"\n"],[-1,12876,"；"],[-1,12888,"\n"],[1,13031,"\n"],[-1,13712,"\n\n"],[1,14117,"\n "],[-1,14140,"\n "],[1,14255,"\n\n"],[1,15077,"\n\n\n\n\n"],[-1,15077,"#### "],[-1,19034,"\n\n\n\n\n\n\n\n"]],[19042,19042],[12876,12876]]],[1556538291329,["GJX@GJXAIOU",[[-1,12576,"v"]],[12577,12577],[12576,12576]]],[1556538291479,["GJX@GJXAIOU",[[1,12576,"c"]],[12576,12576],[12577,12577]]],[1556538340234,["GJX@GJXAIOU",[[1,7979,"\n"]],[7977,7977],[7978,7978]]],[1556538340403,["GJX@GJXAIOU",[[1,7980,"\n"]],[7978,7978],[7979,7979]]],[1556538340668,["GJX@GJXAIOU",[[1,7981,"\n"]],[7979,7979],[7980,7980]]],[1556538345535,["GJX@GJXAIOU",[[1,7980,"### danlian"]],[7980,7980],[7991,7991]]],[1556538347072,["GJX@GJXAIOU",[[-1,7984,"danlian"]],[7991,7991],[7984,7984]]],[1556538410471,[null,[[1,12585,"\n"],[-1,12883,"\n"],[1,12884,"；"],[1,12895,"\n"],[-1,13037,"\n"],[1,13719,"\n\n"],[-1,14122,"\n "],[1,14147,"\n "],[-1,14260,"\n\n"],[-1,15084,"\n\n\n\n\n"],[1,15089,"#### "],[1,19041,"\n\n\n\n\n\n\n\n"]],[12585,12585],[19049,19049]]],[1556538410471,[null,[[-1,12585,"\n"],[1,12884,"\n"],[-1,12884,"；"],[-1,12896,"\n"],[1,13039,"\n"],[-1,13720,"\n\n"],[1,14125,"\n "],[-1,14148,"\n "],[1,14263,"\n\n"],[1,15085,"\n\n\n\n\n"],[-1,15085,"#### "],[-1,19042,"\n\n\n\n\n\n\n\n"]],[19049,19049],[12585,12585]]],[1556538350895,["GJX@GJXAIOU",[[1,7984,"单链表"]],[7984,7984],[7987,7987]]],[1556538369072,["GJX@GJXAIOU",[[-1,12583,"@toc"]],[12583,12587],[12583,12583]]],[1556538369739,["GJX@GJXAIOU",[[-1,12584,"\n"]],[12583,12583],[12582,12582]]],[1556538370226,["GJX@GJXAIOU",[[-1,12583,"\n"]],[12582,12582],[12581,12581]]],[1556538371322,["GJX@GJXAIOU",[[1,12583,"\n"]],[12581,12581],[12582,12582]]],[1556538371524,["GJX@GJXAIOU",[[1,12584,"\n"]],[12582,12582],[12583,12583]]],[1556538371774,["GJX@GJXAIOU",[[1,12585,"\n"]],[12583,12583],[12584,12584]]],[1556538373664,["GJX@GJXAIOU",[[1,12584,"-----"]],[12584,12584],[12589,12589]]],[1556538376164,["GJX@GJXAIOU",[[1,12600,"\n"]],[12599,12599],[12600,12600]]],[1556538376714,["GJX@GJXAIOU",[[1,12601,"\n"]],[12600,12600],[12601,12601]]],[1556538377566,["GJX@GJXAIOU",[[1,12591,"\n"]],[12590,12590],[12591,12591]]],[1556538377996,["GJX@GJXAIOU",[[1,12592,"\n"]],[12591,12591],[12592,12592]]],[1556538379657,["GJX@GJXAIOU",[[-1,12603,"\n"]],[12603,12603],[12602,12602]]],[1556538402465,["GJX@GJXAIOU",[[1,12905,"\n"]],[12905,12905],[12906,12906]]],[1556542574912,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[1,19050,"\n\n\n\n\n\n\n\n"]],[12595,12595],[19058,19058]]],[1556542574912,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[-1,19051,"\n\n\n\n\n\n\n\n"]],[19058,19058],[12595,12595]]],[1556542527420,["GJX@GJXAIOU",[[1,19055,"### 循环列表"]],[19055,19055],[19063,19063]]],[1556542528914,["GJX@GJXAIOU",[[-1,19061,"列表"]],[19063,19063],[19061,19061]]],[1556542531402,["GJX@GJXAIOU",[[1,19061,"链表"]],[19061,19061],[19063,19063]]],[1556542531721,["GJX@GJXAIOU",[[1,19114,"\n"]],[19063,19063],[19064,19064]]],[1556542545121,["GJX@GJXAIOU",[[1,19066,"将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表"]],[19066,19066],[19128,19128]]],[1556542635364,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[1,19128,"\n\n\n\n\n\n\n\n\n"]],[12595,12595],[19137,19137]]],[1556542635364,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[-1,19128,"\n\n\n\n\n\n\n\n\n"]],[19137,19137],[12595,12595]]],[1556542580018,["GJX@GJXAIOU",[[1,19131,"![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)"]],[19131,19131],[19221,19221]]],[1556542582179,["GJX@GJXAIOU",[[1,19266,"\n"]],[19221,19221],[19222,19222]]],[1556542588976,["GJX@GJXAIOU",[[1,19222,"•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head。"]],[19222,19222],[19322,19322]]],[1556542606040,["GJX@GJXAIOU",[[1,19326,"代码示例："]],[19326,19326],[19331,19331]]],[1556542606329,["GJX@GJXAIOU",[[1,19372,"\n"]],[19331,19331],[19332,19332]]],[1556542626173,["GJX@GJXAIOU",[[1,19333,"·"]],[19333,19333],[19334,19334]]],[1556542627030,["GJX@GJXAIOU",[[-1,19333,"·"]],[19334,19334],[19333,19333]]],[1556542628175,["GJX@GJXAIOU",[[1,19333,"```"]],[19333,19333],[19336,19336]]],[1556542628270,["GJX@GJXAIOU",[[1,19336,"language\n```\n"]],[19336,19336],[19336,19344]]],[1556542629693,["GJX@GJXAIOU",[[-1,19336,"language"],[1,19344,"c"]],[19336,19344],[19337,19337]]],[1556542629901,["GJX@GJXAIOU",[[1,19338,"\n"]],[19337,19337],[19338,19338]]],[1556542631118,["GJX@GJXAIOU",[[1,19338,"/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}"]],[19338,19338],[20122,20122]]],[1556542634548,["GJX@GJXAIOU",[[1,19332,"chus"]],[19332,19332],[19336,19336]]],[1556542635098,["GJX@GJXAIOU",[[-1,19333,"hus"]],[19336,19336],[19333,19333]]],[1556542695371,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[1,20127,"\n\n\n\n\n\n\n\n\n"]],[12595,12595],[20136,20136]]],[1556542695371,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[-1,20127,"\n\n\n\n\n\n\n\n\n"]],[20136,20136],[12595,12595]]],[1556542635536,["GJX@GJXAIOU",[[-1,19332,"c"]],[19333,19333],[19332,19332]]],[1556542636183,["GJX@GJXAIOU",[[1,19332," "]],[19332,19332],[19333,19333]]],[1556542637776,["GJX@GJXAIOU",[[-1,19332," "],[1,19333,"\n"]],[19333,19333],[19333,19333]]],[1556542640888,["GJX@GJXAIOU",[[1,19333,"初始化部分"]],[19333,19333],[19338,19338]]],[1556542654910,["GJX@GJXAIOU",[[1,20134,"插入部分"]],[20134,20134],[20138,20138]]],[1556542655336,["GJX@GJXAIOU",[[1,20177,"\n"]],[20138,20138],[20139,20139]]],[1556542656884,["GJX@GJXAIOU",[[1,20139,"```"]],[20139,20139],[20142,20142]]],[1556542656973,["GJX@GJXAIOU",[[1,20142,"language\n```\n"]],[20142,20142],[20142,20150]]],[1556542657559,["GJX@GJXAIOU",[[-1,20142,"language"],[1,20150,"c"]],[20142,20150],[20143,20143]]],[1556542657708,["GJX@GJXAIOU",[[1,20144,"\n"]],[20143,20143],[20144,20144]]],[1556542662478,["GJX@GJXAIOU",[[1,20144,"/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}"]],[20144,20144],[21094,21094]]],[1556542673617,["GJX@GJXAIOU",[[1,21101,"sahgnchu"]],[21101,21101],[21109,21109]]],[1556542675117,["GJX@GJXAIOU",[[-1,21101,"sahgnchu"]],[21109,21109],[21101,21101]]],[1556542675270,["GJX@GJXAIOU",[[-1,21137,"\n"]],[21101,21101],[21100,21100]]],[1556542675654,["GJX@GJXAIOU",[[-1,21136,"\n"]],[21100,21100],[21099,21099]]],[1556542676985,["GJX@GJXAIOU",[[1,21136,"\n"]],[21099,21099],[21100,21100]]],[1556542677432,["GJX@GJXAIOU",[[1,21137,"\n"]],[21100,21100],[21101,21101]]],[1556542681765,["GJX@GJXAIOU",[[1,21101,"删除部分"]],[21101,21101],[21105,21105]]],[1556542682196,["GJX@GJXAIOU",[[1,21142,"\n"]],[21105,21105],[21106,21106]]],[1556542684491,["GJX@GJXAIOU",[[1,21106,"```"]],[21106,21106],[21109,21109]]],[1556542684583,["GJX@GJXAIOU",[[1,21109,"language\n```\n"]],[21109,21109],[21109,21117]]],[1556542685510,["GJX@GJXAIOU",[[-1,21109,"language"],[1,21117,"c"]],[21109,21117],[21110,21110]]],[1556542685685,["GJX@GJXAIOU",[[1,21111,"\n"]],[21110,21110],[21111,21111]]],[1556542691961,["GJX@GJXAIOU",[[1,21111,"/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}"]],[21111,21111],[21630,21630]]],[1556542755386,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,21631,""],[1,21634,"\n\n\n\n\n\n\n"]],[12595,12595],[21641,21641]]],[1556542755386,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,21631,""],[-1,21634,"\n\n\n\n\n\n\n"]],[21641,21641],[12595,12595]]],[1556542698049,["GJX@GJXAIOU",[[1,21637,"dou"]],[21637,21637],[21640,21640]]],[1556542698981,["GJX@GJXAIOU",[[-1,21637,"dou"]],[21640,21640],[21637,21637]]],[1556542702888,["GJX@GJXAIOU",[[1,21637,"搜索部分"]],[21637,21637],[21641,21641]]],[1556542703265,["GJX@GJXAIOU",[[1,21676,"\n"]],[21641,21641],[21642,21642]]],[1556542704744,["GJX@GJXAIOU",[[1,21642,"```"]],[21642,21642],[21645,21645]]],[1556542704848,["GJX@GJXAIOU",[[1,21645,"language\n```\n"]],[21645,21645],[21645,21653]]],[1556542705404,["GJX@GJXAIOU",[[-1,21645,"language"],[1,21653,"c"]],[21645,21653],[21646,21646]]],[1556542705648,["GJX@GJXAIOU",[[1,21647,"\n"]],[21646,21646],[21647,21647]]],[1556542713934,["GJX@GJXAIOU",[[1,21647,"/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}"]],[21647,21647],[21928,21928]]],[1556542935356,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,21929,""],[1,21932,"\n\n\n\n\n\n\n"]],[12595,12595],[21939,21939]]],[1556542935356,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,21929,""],[-1,21932,"\n\n\n\n\n\n\n"]],[21939,21939],[12595,12595]]],[1556542896221,["GJX@GJXAIOU",[[1,21935,"  "]],[21935,21935],[21937,21937]]],[1556543415368,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,21935,""],[1,21937,"\n\n\n\n\n\n\n"]],[12595,12595],[21944,21944]]],[1556543415368,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,21935,""],[-1,21937,"\n\n\n\n\n\n\n"]],[21944,21944],[12595,12595]]],[1556543366938,["GJX@GJXAIOU",[[1,21937,"yuesu"]],[21937,21937],[21942,21942]]],[1556543368179,["GJX@GJXAIOU",[[-1,21936," yuesu"]],[21942,21942],[21936,21936]]],[1556543374592,["GJX@GJXAIOU",[[1,21936,"约瑟夫问题："]],[21936,21936],[21942,21942]]],[1556543375120,["GJX@GJXAIOU",[[1,21943," \n"]],[21942,21942],[21944,21944]]],[1556543377949,["GJX@GJXAIOU",[[1,21944,"```c"]],[21944,21944],[21948,21948]]],[1556543378186,["GJX@GJXAIOU",[[1,21949," \n"]],[21948,21948],[21950,21950]]],[1556543379791,["GJX@GJXAIOU",[[1,21950,"```"]],[21950,21950],[21953,21953]]],[1556543382251,["GJX@GJXAIOU",[[1,21950,"\n "]],[21948,21948],[21950,21950]]],[1556543385655,["GJX@GJXAIOU",[[-1,21943," "],[-1,21949," "],[-1,21951," "]],[21943,21955],[21943,21955]]],[1556543403699,["GJX@GJXAIOU",[[1,21948,"//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));\n\tp = head;\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next;\n\t}\n\n\tfree(head);\n\n\treturn s->next ;\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n);\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}"]],[21948,21948],[22766,22766]]],[1556543475367,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22767,""],[1,22770,"\n\n\n\n\n\n\n"]],[12595,12595],[22777,22777]]],[1556543475367,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22767,""],[-1,22770,"\n\n\n\n\n\n\n"]],[22777,22777],[12595,12595]]],[1556543444452,["GJX@GJXAIOU",[[1,22074,"\n"]],[22073,22073],[22074,22074]]],[1556543444660,["GJX@GJXAIOU",[[1,22075,"\n"]],[22074,22074],[22075,22075]]],[1556543445687,["GJX@GJXAIOU",[[1,22075,"?/"]],[22075,22075],[22077,22077]]],[1556543446813,["GJX@GJXAIOU",[[-1,22075,"?/"]],[22077,22077],[22075,22075]]],[1556543458961,["GJX@GJXAIOU",[[1,22075,"// 创建链表"]],[22075,22075],[22082,22082]]],[1556543473642,["GJX@GJXAIOU",[[1,22489," //"]],[22489,22489],[22492,22492]]],[1556543535367,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22779,""],[1,22782,"\n\n\n\n\n\n\n"]],[12595,12595],[22789,22789]]],[1556543535367,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22779,""],[-1,22782,"\n\n\n\n\n\n\n"]],[22789,22789],[12595,12595]]],[1556543479243,["GJX@GJXAIOU",[[1,22492,"p是指向o"]],[22492,22492],[22497,22497]]],[1556543480057,["GJX@GJXAIOU",[[-1,22496,"o"]],[22497,22497],[22496,22496]]],[1556543501006,["GJX@GJXAIOU",[[1,22496,"node节点的指针，就是指向循环列报表"]],[22496,22496],[22515,22515]]],[1556543502789,["GJX@GJXAIOU",[[-1,22512,"列报表"]],[22515,22515],[22512,22512]]],[1556543512286,["GJX@GJXAIOU",[[1,22512,"链表第一个结点的指针"]],[22512,22512],[22522,22522]]],[1556543534027,["GJX@GJXAIOU",[[1,22167,"  // 创建一个头结点"]],[22167,22167],[22179,22179]]],[1556543595382,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22821,""],[1,22824,"\n\n\n\n\n\n\n"]],[12595,12595],[22831,22831]]],[1556543595382,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22821,""],[-1,22824,"\n\n\n\n\n\n\n"]],[22831,22831],[12595,12595]]],[1556543541683,["GJX@GJXAIOU",[[1,22190,"///"]],[22190,22190],[22193,22193]]],[1556543542701,["GJX@GJXAIOU",[[-1,22192,"/"]],[22193,22193],[22192,22192]]],[1556543560239,["GJX@GJXAIOU",[[1,22192," P是指向当前结点的指针，是经常换的"]],[22192,22192],[22210,22210]]],[1556543655380,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22841,""],[1,22844,"\n\n\n\n\n\n\n"]],[12595,12595],[22851,22851]]],[1556543655380,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22841,""],[-1,22844,"\n\n\n\n\n\n\n"]],[22851,22851],[12595,12595]]],[1556543625813,["GJX@GJXAIOU",[[1,22414," //zui"]],[22414,22414],[22420,22420]]],[1556543626575,["GJX@GJXAIOU",[[-1,22417,"zui"]],[22420,22420],[22417,22417]]],[1556543643662,["GJX@GJXAIOU",[[1,22417," 最后一个节点指向第一个结点"]],[22417,22417],[22431,22431]]],[1556543652436,["GJX@GJXAIOU",[[1,22448,"// 去掉头结点"]],[22448,22448],[22456,22456]]],[1556543715385,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22866,""],[1,22869,"\n\n\n\n\n\n\n"]],[12595,12595],[22876,22876]]],[1556543715385,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22866,""],[-1,22869,"\n\n\n\n\n\n\n"]],[22876,22876],[12595,12595]]],[1556543673978,["GJX@GJXAIOU",[[1,22475," // dan"]],[22475,22475],[22482,22482]]],[1556543675078,["GJX@GJXAIOU",[[-1,22479,"dan"]],[22482,22482],[22479,22479]]],[1556543683671,["GJX@GJXAIOU",[[1,22479,"返回指向第一个结点的地址"]],[22479,22479],[22491,22491]]],[1556543895464,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,22882,""],[1,22885,"\n\n\n\n\n\n\n"]],[12595,12595],[22892,22892]]],[1556543895464,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,22882,""],[-1,22885,"\n\n\n\n\n\n\n"]],[22892,22892],[12595,12595]]],[1556543876609,["GJX@GJXAIOU",[[1,21943," \n"]],[21942,21942],[21944,21944]]],[1556543877432,["GJX@GJXAIOU",[[-1,21943," "],[1,21944,"\n"]],[21944,21944],[21944,21944]]],[1556543878025,["GJX@GJXAIOU",[[1,21944,"•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。"]],[21944,21944],[22181,22181]]],[1556543892047,["GJX@GJXAIOU",[[1,23129,"•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。"]],[23129,23129],[23275,23275]]],[1556543895104,["GJX@GJXAIOU",[[1,23277,"`"]],[23277,23277],[23278,23278]]],[1556543955472,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19054,"\n"],[-1,23277,""],[1,23278,"\n\n\n\n\n\n\n"]],[12595,12595],[23285,23285]]],[1556543955472,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19055,"\n"],[1,23277,""],[-1,23278,"\n\n\n\n\n\n\n"]],[23285,23285],[12595,12595]]],[1556543896030,["GJX@GJXAIOU",[[1,23278,"``"]],[23278,23278],[23280,23280]]],[1556543896091,["GJX@GJXAIOU",[[1,23280,"language\n```\n"]],[23280,23280],[23280,23288]]],[1556543897247,["GJX@GJXAIOU",[[-1,23280,"language"],[1,23288,"c"]],[23280,23288],[23281,23281]]],[1556543898098,["GJX@GJXAIOU",[[1,23282,"\n"]],[23281,23281],[23282,23282]]],[1556543912865,["GJX@GJXAIOU",[[1,23282,"#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n"]],[23282,23282],[26301,26301]]],[1556544675481,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26305,"\n\n\n\n\n\n\n"]],[12595,12595],[26312,26312]]],[1556544675481,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26305,"\n\n\n\n\n\n\n"]],[26312,26312],[12595,12595]]],[1556544625352,["GJX@GJXAIOU",[[1,26310,"#### cun"]],[26310,26310],[26318,26318]]],[1556544626712,["GJX@GJXAIOU",[[-1,26315,"cun"]],[26318,26318],[26315,26315]]],[1556544635713,["GJX@GJXAIOU",[[1,26315,"循环链表的特点："]],[26315,26315],[26323,26323]]],[1556544636637,["GJX@GJXAIOU",[[-1,26322,"："]],[26323,26323],[26322,26322]]],[1556544637179,["GJX@GJXAIOU",[[1,26344,"\n"]],[26322,26322],[26323,26323]]],[1556544975655,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26322,"\n\n\n\n\n\n\n"]],[12595,12595],[26329,26329]]],[1556544975655,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26322,"\n\n\n\n\n\n\n"]],[26329,26329],[12595,12595]]],[1556544917311,["GJX@GJXAIOU",[[1,26324,"可以"]],[26324,26324],[26326,26326]]],[1556544919351,["GJX@GJXAIOU",[[-1,26324,"可以"]],[26326,26326],[26324,26324]]],[1556544919776,["GJX@GJXAIOU",[[-1,26344,"\n"]],[26324,26324],[26323,26323]]],[1556544926143,["GJX@GJXAIOU",[[1,26323,"循环链表也可以说"]],[26323,26323],[26331,26331]]],[1556544929192,["GJX@GJXAIOU",[[-1,26330,"说"]],[26331,26331],[26330,26330]]],[1556544966854,["GJX@GJXAIOU",[[1,26330,"使用指向终端节点的尾指针来表示循环链表。"]],[26330,26330],[26350,26350]]],[1556544967608,["GJX@GJXAIOU",[[1,26371,"\n"]],[26350,26350],[26351,26351]]],[1556544975357,["GJX@GJXAIOU",[[1,26351,"此时判断是否"]],[26351,26351],[26357,26357]]],[1556545035650,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26357,"\n\n\n\n\n\n"]],[12595,12595],[26363,26363]]],[1556545035650,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26357,"\n\n\n\n\n\n"]],[26363,26363],[12595,12595]]],[1556544988586,["GJX@GJXAIOU",[[1,26357,"为空链表的条件为：rear ===="]],[26357,26357],[26373,26373]]],[1556544989974,["GJX@GJXAIOU",[[-1,26373,"=="]],[26373,26373],[26371,26371]]],[1556544994471,["GJX@GJXAIOU",[[1,26373," r"]],[26373,26373],[26375,26375]]],[1556544994651,["GJX@GJXAIOU",[[-1,26374,"r"]],[26375,26375],[26374,26374]]],[1556545000048,["GJX@GJXAIOU",[[1,26374,"rear-"]],[26374,26374],[26379,26379]]],[1556545002134,["GJX@GJXAIOU",[[-1,26378,"-"]],[26379,26379],[26378,26378]]],[1556545003136,["GJX@GJXAIOU",[[1,26378,"_"]],[26378,26378],[26379,26379]]],[1556545004087,["GJX@GJXAIOU",[[-1,26378,"_"]],[26379,26379],[26378,26378]]],[1556545011372,["GJX@GJXAIOU",[[1,26378,"->next`"]],[26378,26378],[26385,26385]]],[1556545013773,["GJX@GJXAIOU",[[1,26366,"`"]],[26366,26366],[26367,26367]]],[1556545027883,["GJX@GJXAIOU",[[1,26407,"\n"]],[26386,26386],[26387,26387]]],[1556545034120,["GJX@GJXAIOU",[[1,26387,"特点：无需"]],[26387,26387],[26392,26392]]],[1556545034743,["GJX@GJXAIOU",[[-1,26391,"需"]],[26392,26392],[26391,26391]]],[1556545095654,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26391,"\n\n\n\n\n\n"]],[12595,12595],[26397,26397]]],[1556545095654,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26391,"\n\n\n\n\n\n"]],[26397,26397],[12595,12595]]],[1556545074233,["GJX@GJXAIOU",[[1,26391,"须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加联合"]],[26391,26391],[26422,26422]]],[1556545075085,["GJX@GJXAIOU",[[-1,26420,"联合"]],[26422,26422],[26420,26420]]],[1556545077911,["GJX@GJXAIOU",[[1,26420,"灵活；"]],[26420,26420],[26423,26423]]],[1556545155654,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26423,"\n\n\n\n\n\n"]],[12595,12595],[26429,26429]]],[1556545155654,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26423,"\n\n\n\n\n\n"]],[26429,26429],[12595,12595]]],[1556545113345,["GJX@GJXAIOU",[[1,26425,"![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)"]],[26425,26425],[26535,26535]]],[1556545121729,["GJX@GJXAIOU",[[1,26553,"\n"]],[26535,26535],[26536,26536]]],[1556545154967,["GJX@GJXAIOU",[[1,26537,"- 例题一：****"]],[26537,26537],[26545,26545]]],[1556545215654,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26547,"\n\n\n\n\n\n"]],[12595,12595],[26553,26553]]],[1556545215654,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26547,"\n\n\n\n\n\n"]],[26553,26553],[12595,12595]]],[1556545157429,["GJX@GJXAIOU",[[-1,26543,"****"],[1,26547,"•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。"]],[26543,26547],[26605,26605]]],[1556545186379,["GJX@GJXAIOU",[[1,26607,"![图片1]($resource/%E5%9B%BE%E7%89%871.png)"]],[26607,26607],[26649,26649]]],[1556545188512,["GJX@GJXAIOU",[[1,26663,"\n"]],[26649,26649],[26650,26650]]],[1556545190827,["GJX@GJXAIOU",[[1,26650,"```"]],[26650,26650],[26653,26653]]],[1556545190975,["GJX@GJXAIOU",[[1,26653,"language\n```\n"]],[26653,26653],[26653,26661]]],[1556545192581,["GJX@GJXAIOU",[[-1,26653,"language"],[1,26661,"c"]],[26653,26661],[26654,26654]]],[1556545192845,["GJX@GJXAIOU",[[1,26655,"\n"]],[26654,26654],[26655,26655]]],[1556545275660,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[1,26659,"\n\n\n\n\n\n"]],[12595,12595],[26665,26665]]],[1556545275660,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[-1,26659,"\n\n\n\n\n\n"]],[26665,26665],[12595,12595]]],[1556545227723,["GJX@GJXAIOU",[[1,26902,"\n"]],[26889,26889],[26890,26890]]],[1556545229332,["GJX@GJXAIOU",[[1,26890,"- li"]],[26890,26890],[26894,26894]]],[1556545230573,["GJX@GJXAIOU",[[-1,26892,"li"]],[26894,26894],[26892,26892]]],[1556545248504,["GJX@GJXAIOU",[[1,26892,"例题二：判断单链表中是否忧患"]],[26892,26892],[26906,26906]]],[1556545249354,["GJX@GJXAIOU",[[-1,26904,"忧患"]],[26906,26906],[26904,26904]]],[1556545252391,["GJX@GJXAIOU",[[1,26904,"有环"]],[26904,26904],[26906,26906]]],[1556545252587,["GJX@GJXAIOU",[[1,26907,"- \n"]],[26906,26906],[26909,26909]]],[1556545255052,["GJX@GJXAIOU",[[-1,26907,"- "]],[26909,26909],[26907,26907]]],[1556545264640,["GJX@GJXAIOU",[[1,26908,"•有环的定义是，链表的尾节点指向了链表中的某个节点。"]],[26908,26908],[26934,26934]]],[1556545335658,[null,[[1,12595,"#"],[-1,12601,"用"],[1,12603,"用"],[-1,12891,"\n"],[1,12892,"；"],[1,12903,"\n\n"],[-1,12905,"\n"],[-1,13046,"\n"],[1,13728,"\n\n"],[-1,14131,"\n "],[1,14156,"\n "],[-1,14269,"\n\n"],[-1,15093,"\n\n\n\n\n"],[1,15098,"#### "],[-1,19050,"\n"],[-1,26655,"\n```\n\n\n\n\n\n\n"],[1,26666,"//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```"],[-1,26671,"li"],[-1,26685,"忧患"],[-1,26689,"- "],[1,26691,"\n"],[1,26718,"\n\n\n\n\n\n\n\n\n\n\n\n"]],[12595,12595],[26730,26730]]],[1556545335658,[null,[[-1,12595,"#"],[1,12602,"用"],[-1,12603,"用"],[1,12892,"\n"],[-1,12892,"；"],[-1,12904,"\n\n"],[1,12908,"\n"],[1,13048,"\n"],[-1,13729,"\n\n"],[1,14134,"\n "],[-1,14157,"\n "],[1,14272,"\n\n"],[1,15094,"\n\n\n\n\n"],[-1,15094,"#### "],[1,19051,"\n"],[1,26655,"\n```\n\n\n\n\n\n\n"],[-1,26655,"//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```"],[1,26892,"li"],[1,26904,"忧患"],[1,26906,"- "],[-1,26906,"\n"],[-1,26934,"\n\n\n\n\n\n\n\n\n\n\n\n"]],[26730,26730],[12595,12595]]],[1556545296274,["GJX@GJXAIOU",[[1,26936,"![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)"]],[26936,26936],[27056,27056]]],[1556545306916,["GJX@GJXAIOU",[[1,27057,"•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。"]],[27057,27057],[27217,27217]]],[1556545323639,["GJX@GJXAIOU",[[1,27219,"·"]],[27219,27219],[27220,27220]]],[1556545324734,["GJX@GJXAIOU",[[-1,27219,"·"]],[27220,27220],[27219,27219]]],[1556545326380,["GJX@GJXAIOU",[[1,27219,"```"]],[27219,27219],[27222,27222]]],[1556545326442,["GJX@GJXAIOU",[[1,27222,"language\n```\n"]],[27222,27222],[27222,27230]]],[1556545327903,["GJX@GJXAIOU",[[-1,27222,"language"],[1,27230,"c"]],[27222,27230],[27223,27223]]],[1556545328232,["GJX@GJXAIOU",[[1,27224,"\n"]],[27223,27223],[27224,27224]]],[1556545329558,["GJX@GJXAIOU",[[1,27224,"#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}"]],[27224,27224],[31521,31521]]]],null,"GJX@GJXAIOU"],["d822e722-67db-45ef-a8d5-a03961ed7f04",1557038673372,"---\ntags:\n  - 数据结构\nflag: blue\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1)     \n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n    \n(2)时间复杂度O(n)   \n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  \n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      \n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。  \n      3.线性表的当前长度：length。   \n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；   \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n      \n#### 获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** 首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n### 静态链表\n\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，游标的第一个数值表示数组中第一个没有存放数据元素的下标，（图中下标为5的数据域没有存放数据），游标的最后一个值表示第一个存放数据的元素的下标，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n\n•线性表的静态链表存储结构\n\n#define MAXSIZE 1000\n\ntypedef  struct\n\n{\n\nElemType data; // 数据\n\nint cur; // 游标（Cursor）\n\n} Component, StaticLinkList[MAXSIZE];\n\n\n\n•对静态链表进行初始化相当于初始化数组：\n\nStatus InitList(StaticLinkList space)\n\n{\n\nint  i;\n\nfor( i=0; i < MAXSIZE-1; i++ )\n\nspace[i].cur = i + 1;\n\nspace[MAXSIZE-1].cur = 0;\n\nreturn OK;\n\n}\n\n我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。\n\n我们通常把未使用的数组元素称为备用链表。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。\n\n\n\n####  静态链表的插入操作\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n•首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i;\n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;\n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n–在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n### 循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n\n\n\n\n",[[1557038647020,["GJX@GJXAIOU",[[1,31527,"···"]],[31527,31527],[31530,31530]]],[1557038648597,["GJX@GJXAIOU",[[-1,31527,"···"]],[31530,31530],[31527,31527]]],[1557038649292,["GJX@GJXAIOU",[[-1,31531,"\n"]],[31527,31527],[31526,31526]]],[1557038650623,["GJX@GJXAIOU",[[1,31531,"\n"]],[31526,31526],[31527,31527]]],[1557038650981,["GJX@GJXAIOU",[[1,31532,"\n"]],[31527,31527],[31528,31528]]],[1557038652048,["GJX@GJXAIOU",[[1,31528,"```"]],[31528,31528],[31531,31531]]],[1557038652270,["GJX@GJXAIOU",[[1,31531,"language\n```\n"]],[31531,31531],[31531,31539]]],[1557038653328,["GJX@GJXAIOU",[[-1,31531,"language"],[1,31539,"j"]],[31531,31539],[31532,31532]]],[1557038654459,["GJX@GJXAIOU",[[1,31532,"ava"]],[31532,31532],[31535,31535]]],[1557038654770,["GJX@GJXAIOU",[[1,31536,"\n"]],[31535,31535],[31536,31536]]],[1557038656461,["GJX@GJXAIOU",[[1,31536,"#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}"]],[31536,31536],[32889,32889]]],[1557038658831,["GJX@GJXAIOU",[[1,31528,"\n"]],[31527,31527],[31528,31528]]],[1557038660347,["GJX@GJXAIOU",[[1,31528,"mo"]],[31528,31528],[31530,31530]]],[1557038660971,["GJX@GJXAIOU",[[-1,31528,"mo"]],[31530,31530],[31528,31528]]],[1557038666994,["GJX@GJXAIOU",[[1,31528,"魔术师发牌问题："]],[31528,31528],[31536,31536]]],[1557038667683,["GJX@GJXAIOU",[[1,31537,"\n"]],[31536,31536],[31537,31537]]],[1557038669727,["GJX@GJXAIOU",[[1,31537,"是哟金"]],[31537,31537],[31540,31540]]],[1557038670966,["GJX@GJXAIOU",[[-1,31537,"是哟金"]],[31540,31540],[31537,31537]]],[1557038672470,["GJX@GJXAIOU",[[1,31537,"使用"]],[31537,31537],[31539,31539]]],[1557038681598,["GJX@GJXAIOU",[[1,31539,"单项循环链表："]],[31539,31539],[31546,31546]]],[1557038682274,["GJX@GJXAIOU",[[1,31547,"\n"]],[31546,31546],[31547,31547]]],[1557038700852,["GJX@GJXAIOU",[[1,31547,"•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？"]],[31547,31547],[31756,31756]]],[1557039127924,["GJX@GJXAIOU",[[1,33125,"### 双向链表"]],[33125,33125],[33133,33133]]],[1557039128264,["GJX@GJXAIOU",[[1,33136,"\n"]],[33133,33133],[33134,33134]]],[1557039128565,["GJX@GJXAIOU",[[1,33137,"\n"]],[33134,33134],[33135,33135]]],[1557039143137,["GJX@GJXAIOU",[[1,33135,"双向链表结点结构"]],[33135,33135],[33143,33143]]],[1557039144814,["GJX@GJXAIOU",[[1,33146,"\n"]],[33143,33143],[33144,33144]]],[1557039152241,["GJX@GJXAIOU",[[1,33144,"typedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;"]],[33144,33144],[33281,33281]]],[1557039157165,["GJX@GJXAIOU",[[1,33284,"\n"]],[33281,33281],[33282,33282]]],[1557039157413,["GJX@GJXAIOU",[[1,33285,"\n"]],[33282,33282],[33283,33283]]],[1557039189355,["GJX@GJXAIOU",[[1,33283,"![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)"]],[33283,33283],[33383,33383]]],[1557039208544,["GJX@GJXAIOU",[[1,33135,"#### "]],[33135,33135],[33148,33148]]],[1557039212007,["GJX@GJXAIOU",[[1,33389,"#### "]],[33389,33389],[33394,33394]]],[1557039225482,["GJX@GJXAIOU",[[1,33394,"双向链表的玄幻"]],[33394,33394],[33401,33401]]],[1557039228493,["GJX@GJXAIOU",[[-1,33398,"的玄幻"]],[33401,33401],[33398,33398]]],[1557039235611,["GJX@GJXAIOU",[[1,33398,"的循环链表"]],[33398,33398],[33403,33403]]],[1557039236472,["GJX@GJXAIOU",[[1,33404,"\n"]],[33403,33403],[33404,33404]]],[1557039280700,["GJX@GJXAIOU",[[1,33404,"![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n"]],[33404,33404],[33514,33514]]],[1557039293047,["GJX@GJXAIOU",[[1,33515,"\n"]],[33514,33514],[33515,33515]]],[1557039293309,["GJX@GJXAIOU",[[1,33516,"\n"]],[33515,33515],[33516,33516]]],[1557039293536,["GJX@GJXAIOU",[[1,33517,"\n"]],[33516,33516],[33517,33517]]],[1557039293804,["GJX@GJXAIOU",[[1,33518,"\n"]],[33517,33517],[33518,33518]]],[1557039294046,["GJX@GJXAIOU",[[1,33519,"\n"]],[33518,33518],[33519,33519]]],[1557039294281,["GJX@GJXAIOU",[[1,33520,"\n"]],[33519,33519],[33520,33520]]],[1557039294536,["GJX@GJXAIOU",[[1,33521,"\n"]],[33520,33520],[33521,33521]]],[1557039294936,["GJX@GJXAIOU",[[1,33522,"\n"]],[33521,33521],[33522,33522]]],[1557039295162,["GJX@GJXAIOU",[[1,33523,"\n"]],[33522,33522],[33523,33523]]],[1557039295408,["GJX@GJXAIOU",[[1,33524,"\n"]],[33523,33523],[33524,33524]]],[1557039295631,["GJX@GJXAIOU",[[1,33525,"\n"]],[33524,33524],[33525,33525]]],[1557039295867,["GJX@GJXAIOU",[[1,33526,"\n"]],[33525,33525],[33526,33526]]],[1557039296089,["GJX@GJXAIOU",[[1,33527,"\n"]],[33526,33526],[33527,33527]]],[1557039296352,["GJX@GJXAIOU",[[1,33528,"\n"]],[33527,33527],[33528,33528]]],[1557039296585,["GJX@GJXAIOU",[[1,33529,"\n"]],[33528,33528],[33529,33529]]],[1557039296816,["GJX@GJXAIOU",[[1,33530,"\n"]],[33529,33529],[33530,33530]]],[1557039298651,["GJX@GJXAIOU",[[1,33531,"\n"]],[33530,33530],[33531,33531]]],[1557039298885,["GJX@GJXAIOU",[[1,33532,"\n"]],[33531,33531],[33532,33532]]],[1557039299113,["GJX@GJXAIOU",[[1,33533,"\n"]],[33532,33532],[33533,33533]]],[1557039299372,["GJX@GJXAIOU",[[1,33534,"\n"]],[33533,33533],[33534,33534]]],[1557039299621,["GJX@GJXAIOU",[[1,33535,"\n"]],[33534,33534],[33535,33535]]],[1557039299851,["GJX@GJXAIOU",[[1,33536,"\n"]],[33535,33535],[33536,33536]]],[1557039300091,["GJX@GJXAIOU",[[1,33537,"\n"]],[33536,33536],[33537,33537]]],[1557039300443,["GJX@GJXAIOU",[[1,33538,"\n"]],[33537,33537],[33538,33538]]],[1557039300668,["GJX@GJXAIOU",[[1,33539,"\n"]],[33538,33538],[33539,33539]]],[1557039300889,["GJX@GJXAIOU",[[1,33540,"\n"]],[33539,33539],[33540,33540]]],[1557039304902,["GJX@GJXAIOU",[[1,33541,"\n"]],[33515,33515],[33516,33516]]],[1557039305135,["GJX@GJXAIOU",[[1,33542,"\n"]],[33516,33516],[33517,33517]]],[1557039306247,["GJX@GJXAIOU",[[1,33517,"￥"]],[33517,33517],[33518,33518]]],[1557039307365,["GJX@GJXAIOU",[[-1,33517,"￥"]],[33518,33518],[33517,33517]]],[1557039318969,["GJX@GJXAIOU",[[1,33517,"#### 双向链表的插入操作"]],[33517,33517],[33531,33531]]],[1557039319296,["GJX@GJXAIOU",[[1,33557,"\n"]],[33531,33531],[33532,33532]]],[1557039595261,["GJX@GJXAIOU",[[1,33533,"![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)"]],[33533,33533],[33643,33643]]],[1557039610129,["GJX@GJXAIOU",[[1,33532,"···"]],[33532,33532],[33535,33535]]],[1557039612049,["GJX@GJXAIOU",[[-1,33532,"···"]],[33535,33535],[33532,33532]]],[1557039613496,["GJX@GJXAIOU",[[1,33532,"```"]],[33532,33532],[33535,33535]]],[1557039613706,["GJX@GJXAIOU",[[1,33535,"language\n```\n"]],[33535,33535],[33535,33543]]],[1557039615263,["GJX@GJXAIOU",[[-1,33535,"language"],[1,33543,"c"]],[33535,33543],[33536,33536]]],[1557039615497,["GJX@GJXAIOU",[[1,33537,"\n"]],[33536,33536],[33537,33537]]],[1557039616683,["GJX@GJXAIOU",[[1,33537,"–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;"]],[33537,33537],[33614,33614]]],[1557039650713,["GJX@GJXAIOU",[[1,33732,"#### "]],[33732,33732],[33737,33737]]],[1557039652594,["GJX@GJXAIOU",[[-1,33550," "],[1,33551," "],[-1,33574," "],[1,33575," "],[-1,33597," "],[1,33598," "],[1,33737,"shang"]],[33737,33737],[33742,33742]]],[1557039655539,["GJX@GJXAIOU",[[-1,33737,"shang"]],[33742,33742],[33737,33737]]],[1557039666223,["GJX@GJXAIOU",[[1,33737,"双向链表的删除操作"]],[33737,33737],[33746,33746]]],[1557039666537,["GJX@GJXAIOU",[[1,33768,"\n"]],[33746,33746],[33747,33747]]],[1557039668454,["GJX@GJXAIOU",[[1,33769,"\n"]],[33747,33747],[33748,33748]]],[1557039671907,["GJX@GJXAIOU",[[1,33748,"··"]],[33748,33748],[33750,33750]]],[1557039672695,["GJX@GJXAIOU",[[-1,33748,"··"]],[33750,33750],[33748,33748]]],[1557039674044,["GJX@GJXAIOU",[[1,33748,"```"]],[33748,33748],[33751,33751]]],[1557039674250,["GJX@GJXAIOU",[[1,33751,"language\n```\n"]],[33751,33751],[33751,33759]]],[1557039674757,["GJX@GJXAIOU",[[-1,33751,"language"],[1,33759,"c"]],[33751,33759],[33752,33752]]],[1557039674993,["GJX@GJXAIOU",[[1,33753,"\n"]],[33752,33752],[33753,33753]]],[1557039676282,["GJX@GJXAIOU",[[1,33753,"–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);"]],[33753,33753],[33820,33820]]],[1557039688435,["GJX@GJXAIOU",[[1,33825,"![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)"]],[33825,33825],[33935,33935]]],[1557039700562,["GJX@GJXAIOU",[[1,33936,"双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间"]],[33936,33936],[33967,33967]]],[1557039786246,["GJX@GJXAIOU",[[1,33149,"\n"]],[33148,33148],[33149,33149]]],[1557039787597,["GJX@GJXAIOU",[[1,33149,"`"],[-1,33809," "],[1,33810," "]],[33149,33149],[33150,33150]]],[1557039790284,["GJX@GJXAIOU",[[1,33150,"``c"]],[33150,33150],[33153,33153]]],[1557040843470,["GJX@GJXAIOU",[[1,33293,"  "]],[33293,33293],[33295,33295]]],[1557040904548,["GJX@GJXAIOU",[[1,33295," "]],[33295,33295],[33296,33296]]],[1557043595053,["GJX@GJXAIOU",[[1,33979,"######"]],[33979,33979],[33985,33985]]],[1557043596145,["GJX@GJXAIOU",[[-1,33982,"###"]],[33985,33985],[33982,33982]]],[1557043598757,["GJX@GJXAIOU",[[1,33982," moshu"]],[33982,33982],[33988,33988]]],[1557043601276,["GJX@GJXAIOU",[[-1,33983,"moshu"]],[33988,33988],[33983,33983]]],[1557043605690,["GJX@GJXAIOU",[[1,33983,"魔术师发牌问题"]],[33983,33983],[33990,33990]]],[1557043606414,["GJX@GJXAIOU",[[1,34006,"\n"]],[33990,33990],[33991,33991]]],[1557043607838,["GJX@GJXAIOU",[[1,33991,"·"]],[33991,33991],[33992,33992]]],[1557043608567,["GJX@GJXAIOU",[[-1,33991,"·"]],[33992,33992],[33991,33991]]],[1557043611644,["GJX@GJXAIOU",[[1,33991,"```c"]],[33991,33991],[33995,33995]]],[1557043611879,["GJX@GJXAIOU",[[1,34011,"\n"]],[33995,33995],[33996,33996]]],[1557043615229,["GJX@GJXAIOU",[[-1,33990,"\n"]],[33991,33991],[33990,33990]]],[1557043616807,["GJX@GJXAIOU",[[1,33990,"\n"]],[33990,33990],[33991,33991]]],[1557043619413,["GJX@GJXAIOU",[[1,33997,"```"]],[33997,33997],[34000,34000]]],[1557043622813,["GJX@GJXAIOU",[[1,33991,"\n"]],[33991,33991],[33992,33992]]],[1557043624759,["GJX@GJXAIOU",[[1,33997,"#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n"]],[33997,33997],[35996,35996]]],[1557045371520,["GJX@GJXAIOU",[[1,36001,"```c"]],[36001,36001],[36005,36005]]],[1557045371783,["GJX@GJXAIOU",[[1,36019,"\n"]],[36005,36005],[36006,36006]]],[1557045373498,["GJX@GJXAIOU",[[1,36006,"```"]],[36006,36006],[36009,36009]]],[1557045376294,["GJX@GJXAIOU",[[1,36001,"\n"]],[36000,36000],[36001,36001]]],[1557045376550,["GJX@GJXAIOU",[[1,36002,"\n"]],[36001,36001],[36002,36002]]],[1557045380002,["GJX@GJXAIOU",[[1,36002,"guan"]],[36002,36002],[36006,36006]]],[1557045381480,["GJX@GJXAIOU",[[-1,36002,"guan"]],[36006,36006],[36002,36002]]],[1557045381917,["GJX@GJXAIOU",[[-1,36002,"\n"]],[36002,36002],[36001,36001]]],[1557045383406,["GJX@GJXAIOU",[[1,36002,"\n"]],[36001,36001],[36002,36002]]],[1557045389454,["GJX@GJXAIOU",[[1,36002,"视频版本"]],[36002,36002],[36006,36006]]],[1557045391841,["GJX@GJXAIOU",[[1,36012,"\n"]],[36011,36011],[36012,36012]]],[1557045392372,["GJX@GJXAIOU",[[1,36012,"#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}"]],[36012,36012],[37159,37159]]]],null,"GJX@GJXAIOU"],["b6331069-7117-476c-8db8-401b56fc5ee4",1557298839419,"---\ntags:\n  - 数据结构\nflag: blue\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1)     \n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n    \n(2)时间复杂度O(n)   \n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  \n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      \n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。  \n      3.线性表的当前长度：length。   \n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；   \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n      \n#### 获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** 首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n### 静态链表\n\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，游标的第一个数值表示数组中第一个没有存放数据元素的下标，（图中下标为5的数据域没有存放数据），游标的最后一个值表示第一个存放数据的元素的下标，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n\n•线性表的静态链表存储结构\n\n#define MAXSIZE 1000\n\ntypedef  struct\n\n{\n\nElemType data; // 数据\n\nint cur; // 游标（Cursor）\n\n} Component, StaticLinkList[MAXSIZE];\n\n\n\n•对静态链表进行初始化相当于初始化数组：\n\nStatus InitList(StaticLinkList space)\n\n{\n\nint  i;\n\nfor( i=0; i < MAXSIZE-1; i++ )\n\nspace[i].cur = i + 1;\n\nspace[MAXSIZE-1].cur = 0;\n\nreturn OK;\n\n}\n\n我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。\n\n我们通常把未使用的数组元素称为备用链表。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。\n\n\n\n####  静态链表的插入操作\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n•首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i;\n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;\n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n–在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n### 循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n魔术师发牌问题：\n使用单项循环链表：\n•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？\n```java\n#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}\n```\n\n\n### 双向链表\n\n#### 双向链表结点结构\n```c\ntypedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;\n\n   ![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)\n\n#### 双向链表的循环链表\n![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n\n\n\n#### 双向链表的插入操作\n```c\n–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;\n```\n\n![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n\n\n#### 双向链表的删除操作\n\n```c\n–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);\n```\n![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间\n\n\n\n### 魔术师发牌问题\n\n```c\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n\n```\n\n视频版本\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1557298804718,["GJX@GJXAIOU",[[1,4049,"    \n"]],[4048,4048],[4053,4053]]]],null,"GJX@GJXAIOU"],["280d2932-2bee-41a7-af4b-cb6c78cf6971",1558962563758,"---\ntags:\n  - 数据结构\nflag: blue\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：    \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1)     \n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n    \n(2)时间复杂度O(n)   \n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  \n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < (n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      \n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;   \n    La_len = ListLength(*La);   \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   \n        if( !LocateElem(*La, e) )   \n        {   \n            ListInsert(La, ++La_len, e);   \n        }     \n    }     \n    \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。  \n      3.线性表的当前长度：length。   \n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；   \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n      \n#### 获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** 首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n### 静态链表\n\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，游标的第一个数值表示数组中第一个没有存放数据元素的下标，（图中下标为5的数据域没有存放数据），游标的最后一个值表示第一个存放数据的元素的下标，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n\n•线性表的静态链表存储结构\n\n#define MAXSIZE 1000\n\ntypedef  struct\n\n{\n\nElemType data; // 数据\n\nint cur; // 游标（Cursor）\n\n} Component, StaticLinkList[MAXSIZE];\n\n\n\n•对静态链表进行初始化相当于初始化数组：\n\nStatus InitList(StaticLinkList space)\n\n{\n\nint  i;\n\nfor( i=0; i < MAXSIZE-1; i++ )\n\nspace[i].cur = i + 1;\n\nspace[MAXSIZE-1].cur = 0;\n\nreturn OK;\n\n}\n\n我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。\n\n我们通常把未使用的数组元素称为备用链表。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。\n\n\n\n####  静态链表的插入操作\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n•首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i;\n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;\n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n–在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n### 循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n魔术师发牌问题：\n使用单项循环链表：\n•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？\n```java\n#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}\n```\n\n\n### 双向链表\n\n#### 双向链表结点结构\n```c\ntypedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;\n\n   ![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)\n\n#### 双向链表的循环链表\n![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n\n\n\n#### 双向链表的插入操作\n```c\n–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;\n```\n\n![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n\n\n#### 双向链表的删除操作\n\n```c\n–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);\n```\n![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间\n\n\n\n### 魔术师发牌问题\n\n```c\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n\n```\n\n视频版本\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1558962513912,["GJX@GJXAIOU",[[1,103,"\n"]],[103,103],[104,104]]],[1558962557659,["GJX@GJXAIOU",[[1,104,"3.数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合；"]],[104,104],[137,137]]],[1558962666538,["GJX@GJXAIOU",[[1,246,"相当远"]],[246,246],[249,249]]],[1558962667051,["GJX@GJXAIOU",[[-1,248,"远"]],[249,249],[248,248]]],[1558962675620,["GJX@GJXAIOU",[[1,248,"于一种一对多的关系；"]],[248,248],[258,258]]],[1558962778148,["GJX@GJXAIOU",[[1,522,"\n"]],[521,521],[522,522]]],[1558962783044,["GJX@GJXAIOU",[[1,522,"逻辑连接后"]],[522,522],[527,527]]],[1558962785788,["GJX@GJXAIOU",[[-1,522,"逻辑连接后"]],[527,527],[522,522]]],[1558962798953,["GJX@GJXAIOU",[[1,522,"逻辑结构式面向问题的，"]],[522,522],[533,533]]],[1558962805066,["GJX@GJXAIOU",[[1,535,"结果"]],[535,535],[537,537]]],[1558962805783,["GJX@GJXAIOU",[[-1,535,"结果"]],[537,537],[535,535]]],[1558962814272,["GJX@GJXAIOU",[[1,535,"结构式面向计算机的；"]],[535,535],[545,545]]],[1558962817619,["GJX@GJXAIOU",[[-1,537,"式"]],[538,538],[537,537]]],[1558962818715,["GJX@GJXAIOU",[[1,537,"是"]],[537,537],[538,538]]],[1558962823551,["GJX@GJXAIOU",[[1,522,"**"],[1,545,"**"]],[522,545],[522,549]]],[1558963402731,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"]],[535,535],[551,551]]],[1558963402731,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"]],[551,551],[535,535]]],[1558963393749,["GJX@GJXAIOU",[[1,738,"（）"]],[738,738],[740,740]]],[1558963401879,["GJX@GJXAIOU",[[1,739,"算法的每一步"]],[739,739],[745,745]]],[1558963462723,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,746,"  "]],[535,535],[748,748]]],[1558963462723,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,746,"  "]],[748,748],[535,535]]],[1558963410089,["GJX@GJXAIOU",[[1,745,"都能够通过执行邮箱"]],[745,745],[754,754]]],[1558963411897,["GJX@GJXAIOU",[[-1,752,"邮箱"]],[754,754],[752,752]]],[1558963418185,["GJX@GJXAIOU",[[1,752,"有限次数完成"]],[752,752],[758,758]]],[1558963522722,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "]],[535,535],[761,761]]],[1558963522722,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "]],[761,761],[535,535]]],[1558963498068,["GJX@GJXAIOU",[[1,898,"（）"]],[898,898],[900,900]]],[1558963517562,["GJX@GJXAIOU",[[1,899,"对于程序输入的数据进行判断是否合法"]],[899,899],[916,916]]],[1558963582730,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,917,"\n*"]],[535,535],[919,919]]],[1558963582730,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,917,"\n*"]],[919,919],[535,535]]],[1558963547298,["GJX@GJXAIOU",[[1,916,"，不合法时候进行相关的处理，而不是产生异常或者错误"]],[916,916],[941,941]]],[1558963702734,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"]],[535,535],[944,944]]],[1558963702734,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"]],[944,944],[535,535]]],[1558963683282,["GJX@GJXAIOU",[[1,1193,"**"],[1,1205,"**"]],[1193,1205],[1193,1209]]],[1558963690033,["GJX@GJXAIOU",[[1,1210," "]],[1210,1210],[1211,1211]]],[1558963692897,["GJX@GJXAIOU",[[1,1209," "]],[1209,1209],[1210,1210]]],[1558963762728,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "]],[535,535],[1211,1211]]],[1558963762728,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "]],[1211,1211],[535,535]]],[1558963754267,["GJX@GJXAIOU",[[-1,1554,"    "]],[1558,1558],[1554,1554]]],[1558963755305,["GJX@GJXAIOU",[[1,1554,"："]],[1554,1554],[1555,1555]]],[1558963822741,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1555,"\n "]],[535,535],[1557,1557]]],[1558963822741,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1555,"\n "]],[1557,1557],[535,535]]],[1558963764417,["GJX@GJXAIOU",[[1,1555,"常数阶"]],[1555,1555],[1558,1558]]],[1558963772690,["GJX@GJXAIOU",[[1,1673,"：线性阶"]],[1673,1673],[1677,1677]]],[1558963787026,["GJX@GJXAIOU",[[1,1780,"：平方阶"]],[1780,1780],[1784,1784]]],[1558963882899,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1671,"\n "],[1,1677,"\n "],[-1,1778,"\n`"],[1,1784,"\n`"]],[535,535],[1786,1786]]],[1558963882899,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1673,"\n "],[-1,1677,"\n "],[1,1780,"\n`"],[-1,1784,"\n`"]],[1786,1786],[535,535]]],[1558963844019,["GJX@GJXAIOU",[[1,1653,"\n"]],[1652,1652],[1653,1653]]],[1558963861199,["GJX@GJXAIOU",[[1,1653,"同样：当初的分支结构（）"]],[1653,1653],[1665,1665]]],[1558963866176,["GJX@GJXAIOU",[[1,1664,"不在循环中"]],[1664,1664],[1669,1669]]],[1558963869381,["GJX@GJXAIOU",[[1,1670,"也是"]],[1670,1670],[1672,1672]]],[1558963874932,["GJX@GJXAIOU",[[-1,1670,"也是"]],[1672,1672],[1670,1670]]],[1558963882321,["GJX@GJXAIOU",[[1,1670,"的时间复杂度也是O()"]],[1670,1670],[1681,1681]]],[1558963942905,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1684,"  "],[-1,1700,"\n "],[1,1706,"\n "],[-1,1807,"\n`"],[1,1813,"\n`"]],[535,535],[1815,1815]]],[1558963942905,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1684,"  "],[1,1702,"\n "],[-1,1706,"\n "],[1,1809,"\n`"],[-1,1813,"\n`"]],[1815,1815],[535,535]]],[1558963883153,["GJX@GJXAIOU",[[1,1680,"0"]],[1680,1680],[1681,1681]]],[1558963885377,["GJX@GJXAIOU",[[-1,1680,"0"]],[1681,1681],[1680,1680]]],[1558963885807,["GJX@GJXAIOU",[[1,1680,"1"]],[1680,1680],[1681,1681]]],[1558963889318,["GJX@GJXAIOU",[[1,1682,";"]],[1682,1682],[1683,1683]]],[1558964062904,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1686,"  "],[-1,1702,"\n "],[1,1708,"\n "],[-1,1809,"\n`"],[1,1815,"\n`"]],[535,535],[1817,1817]]],[1558964062904,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1686,"  "],[1,1704,"\n "],[-1,1708,"\n "],[1,1811,"\n`"],[-1,1815,"\n`"]],[1817,1817],[535,535]]],[1558964013926,["GJX@GJXAIOU",[[1,2272,"O"]],[2272,2272],[2273,2273]]],[1558964123362,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1686,"  "],[-1,1702,"\n "],[1,1708,"\n "],[-1,1809,"\n`"],[1,1815,"\n`"],[1,2270,"O"],[-1,2272,"O"]],[535,535],[2272,2272]]],[1558964123362,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1686,"  "],[1,1704,"\n "],[-1,1708,"\n "],[1,1811,"\n`"],[-1,1815,"\n`"],[-1,2272,"O"],[1,2275,"O"]],[2272,2272],[535,535]]],[1558964122304,["GJX@GJXAIOU",[[1,2798,"jis"]],[2798,2798],[2801,2801]]],[1558964122957,["GJX@GJXAIOU",[[-1,2799,"is"]],[2801,2801],[2799,2799]]],[1558964183369,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1686,"  "],[-1,1702,"\n "],[1,1708,"\n "],[-1,1809,"\n`"],[1,1815,"\n`"],[1,2270,"O"],[-1,2272,"O"],[1,2796,"j"],[-1,2798,"j"]],[535,535],[2798,2798]]],[1558964183369,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1686,"  "],[1,1704,"\n "],[-1,1708,"\n "],[1,1811,"\n`"],[-1,1815,"\n`"],[-1,2272,"O"],[1,2275,"O"],[-1,2798,"j"],[1,2801,"j"]],[2798,2798],[535,535]]],[1558964123637,["GJX@GJXAIOU",[[-1,2798,"j"]],[2799,2799],[2798,2798]]],[1558964131915,["GJX@GJXAIOU",[[1,2798,"即是元素之间是有顺序的"]],[2798,2798],[2809,2809]]],[1558964603372,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1686,"  "],[-1,1702,"\n "],[1,1708,"\n "],[-1,1809,"\n`"],[1,1815,"\n`"],[1,2270,"O"],[-1,2272,"O"],[-1,2796,"。 "],[1,2809,"。 "]],[535,535],[2811,2811]]],[1558964603372,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1686,"  "],[1,1704,"\n "],[-1,1708,"\n "],[1,1811,"\n`"],[-1,1815,"\n`"],[-1,2272,"O"],[1,2275,"O"],[1,2798,"。 "],[-1,2809,"。 "]],[2811,2811],[535,535]]],[1558964570728,["GJX@GJXAIOU",[[1,2684,"直接从i = 1开始；"]],[2684,2684],[2695,2695]]],[1558964703283,[null,[[-1,535,"\n!"],[1,537,"物理"],[1,549,"\n!"],[-1,736,"  "],[1,759,"  "],[-1,896,"\n*"],[1,942,"\n*"],[1,1191,"**"],[-1,1193,"**"],[-1,1205,"。它"],[1,1210,"。 它"],[-1,1211," "],[-1,1552,"  "],[1,1558,"\n "],[-1,1651,"  "],[1,1686,"  "],[-1,1702,"\n "],[1,1708,"\n "],[-1,1809,"\n`"],[1,1815,"\n`"],[1,2270,"O"],[-1,2272,"O"],[-1,2682,"\n "],[1,2695,"\n "],[-1,2807,"。 "],[1,2820,"。 "]],[535,535],[2822,2822]]],[1558964703283,[null,[[1,535,"\n!"],[-1,535,"物理"],[-1,549,"\n!"],[1,738,"  "],[-1,759,"  "],[1,898,"\n*"],[-1,942,"\n*"],[-1,1193,"**"],[1,1197,"**"],[1,1207,"。它"],[-1,1210,"。 它"],[1,1214," "],[1,1554,"  "],[-1,1558,"\n "],[1,1653,"  "],[-1,1686,"  "],[1,1704,"\n "],[-1,1708,"\n "],[1,1811,"\n`"],[-1,1815,"\n`"],[-1,2272,"O"],[1,2275,"O"],[1,2684,"\n "],[-1,2695,"\n "],[1,2809,"。 "],[-1,2820,"。 "]],[2822,2822],[535,535]]],[1558964702851,["GJX@GJXAIOU",[[1,30,"style: ocean\n"]],[2695,2695],[2708,2708]]],[1558964706016,[null,[[-1,548,"\n!"],[1,550,"物理"],[1,562,"\n!"],[-1,749,"  "],[1,772,"  "],[-1,909,"\n*"],[1,955,"\n*"],[1,1204,"**"],[-1,1206,"**"],[-1,1218,"。它"],[1,1223,"。 它"],[-1,1224," "],[-1,1565,"  "],[1,1571,"\n "],[-1,1664,"  "],[1,1699,"  "],[-1,1715,"\n "],[1,1721,"\n "],[-1,1822,"\n`"],[1,1828,"\n`"],[1,2283,"O"],[-1,2285,"O"],[-1,2695,"\n "],[1,2708,"\n "],[-1,2820,"。 "],[1,2833,"。 "]],[548,548],[2835,2835]]],[1558964706016,[null,[[1,548,"\n!"],[-1,548,"物理"],[-1,562,"\n!"],[1,751,"  "],[-1,772,"  "],[1,911,"\n*"],[-1,955,"\n*"],[-1,1206,"**"],[1,1210,"**"],[1,1220,"。它"],[-1,1223,"。 它"],[1,1227," "],[1,1567,"  "],[-1,1571,"\n "],[1,1666,"  "],[-1,1699,"  "],[1,1717,"\n "],[-1,1721,"\n "],[1,1824,"\n`"],[-1,1828,"\n`"],[-1,2285,"O"],[1,2288,"O"],[1,2697,"\n "],[-1,2708,"\n "],[1,2822,"。 "],[-1,2833,"。 "]],[2835,2835],[548,548]]],[1558964705632,["GJX@GJXAIOU",[[-1,37,"ocea"],[1,41,"plai"]],[2708,2708],[2708,2708]]],[1558964713395,[null,[[-1,548,"\n!"],[1,550,"物理"],[1,562,"\n!"],[-1,749,"  "],[1,772,"  "],[-1,909,"\n*"],[1,955,"\n*"],[1,1204,"**"],[-1,1206,"**"],[-1,1218,"。它"],[1,1223,"。 它"],[-1,1224," "],[-1,1565,"  "],[1,1571,"\n "],[-1,1664,"  "],[1,1699,"  "],[-1,1715,"\n "],[1,1721,"\n "],[-1,1822,"\n`"],[1,1828,"\n`"],[1,2283,"O"],[-1,2285,"O"],[-1,2695,"\n "],[1,2708,"\n "],[-1,2820,"。 "],[1,2833,"。 "]],[548,548],[2835,2835]]],[1558964713395,[null,[[1,548,"\n!"],[-1,548,"物理"],[-1,562,"\n!"],[1,751,"  "],[-1,772,"  "],[1,911,"\n*"],[-1,955,"\n*"],[-1,1206,"**"],[1,1210,"**"],[1,1220,"。它"],[-1,1223,"。 它"],[1,1227," "],[1,1567,"  "],[-1,1571,"\n "],[1,1666,"  "],[-1,1699,"  "],[1,1717,"\n "],[-1,1721,"\n "],[1,1824,"\n`"],[-1,1828,"\n`"],[-1,2285,"O"],[1,2288,"O"],[1,2697,"\n "],[-1,2708,"\n "],[1,2822,"。 "],[-1,2833,"。 "]],[2835,2835],[548,548]]],[1558964713004,["GJX@GJXAIOU",[[-1,37,"plai"],[1,41,"ocea"]],[2708,2708],[2708,2708]]],[1558964713582,[null,[[-1,548,"\n!"],[1,550,"物理"],[1,562,"\n!"],[-1,749,"  "],[1,772,"  "],[-1,909,"\n*"],[1,955,"\n*"],[1,1204,"**"],[-1,1206,"**"],[-1,1218,"。它"],[1,1223,"。 它"],[-1,1224," "],[-1,1565,"  "],[1,1571,"\n "],[-1,1664,"  "],[1,1699,"  "],[-1,1715,"\n "],[1,1721,"\n "],[-1,1822,"\n`"],[1,1828,"\n`"],[1,2283,"O"],[-1,2285,"O"],[-1,2695,"\n "],[1,2708,"\n "],[-1,2820,"。 "],[1,2833,"。 "]],[548,548],[2835,2835]]],[1558964713582,[null,[[1,548,"\n!"],[-1,548,"物理"],[-1,562,"\n!"],[1,751,"  "],[-1,772,"  "],[1,911,"\n*"],[-1,955,"\n*"],[-1,1206,"**"],[1,1210,"**"],[1,1220,"。它"],[-1,1223,"。 它"],[1,1227," "],[1,1567,"  "],[-1,1571,"\n "],[1,1666,"  "],[-1,1699,"  "],[1,1717,"\n "],[-1,1721,"\n "],[1,1824,"\n`"],[-1,1828,"\n`"],[-1,2285,"O"],[1,2288,"O"],[1,2697,"\n "],[-1,2708,"\n "],[1,2822,"。 "],[-1,2833,"。 "]],[2835,2835],[548,548]]],[1558964713004,["GJX@GJXAIOU",[[-1,37,"plai"],[1,41,"ocea"]],[2708,2708],[2708,2708]]],[1558964716645,[null,[[-1,548,"\n!"],[1,550,"物理"],[1,562,"\n!"],[-1,749,"  "],[1,772,"  "],[-1,909,"\n*"],[1,955,"\n*"],[1,1204,"**"],[-1,1206,"**"],[-1,1218,"。它"],[1,1223,"。 它"],[-1,1224," "],[-1,1565,"  "],[1,1571,"\n "],[-1,1664,"  "],[1,1699,"  "],[-1,1715,"\n "],[1,1721,"\n "],[-1,1822,"\n`"],[1,1828,"\n`"],[1,2283,"O"],[-1,2285,"O"],[-1,2695,"\n "],[1,2708,"\n "],[-1,2820,"。 "],[1,2833,"。 "]],[548,548],[2835,2835]]],[1558964716645,[null,[[1,548,"\n!"],[-1,548,"物理"],[-1,562,"\n!"],[1,751,"  "],[-1,772,"  "],[1,911,"\n*"],[-1,955,"\n*"],[-1,1206,"**"],[1,1210,"**"],[1,1220,"。它"],[-1,1223,"。 它"],[1,1227," "],[1,1567,"  "],[-1,1571,"\n "],[1,1666,"  "],[-1,1699,"  "],[1,1717,"\n "],[-1,1721,"\n "],[1,1824,"\n`"],[-1,1828,"\n`"],[-1,2285,"O"],[1,2288,"O"],[1,2697,"\n "],[-1,2708,"\n "],[1,2822,"。 "],[-1,2833,"。 "]],[2835,2835],[548,548]]],[1558964716207,["GJX@GJXAIOU",[[-1,37,"ocean"],[1,42,"summer"]],[2708,2708],[2709,2709]]],[1558964716818,[null,[[-1,549,"\n!"],[1,551,"物理"],[1,563,"\n!"],[-1,750,"  "],[1,773,"  "],[-1,910,"\n*"],[1,956,"\n*"],[1,1205,"**"],[-1,1207,"**"],[-1,1219,"。它"],[1,1224,"。 它"],[-1,1225," "],[-1,1566,"  "],[1,1572,"\n "],[-1,1665,"  "],[1,1700,"  "],[-1,1716,"\n "],[1,1722,"\n "],[-1,1823,"\n`"],[1,1829,"\n`"],[1,2284,"O"],[-1,2286,"O"],[-1,2696,"\n "],[1,2709,"\n "],[-1,2821,"。 "],[1,2834,"。 "]],[549,549],[2836,2836]]],[1558964716818,[null,[[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "]],[2836,2836],[549,549]]],[1558964716207,["GJX@GJXAIOU",[[-1,37,"ocean"],[1,42,"summer"]],[2708,2708],[2709,2709]]],[1558965196725,[null,[[-1,43,"r"],[1,45,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "]],[43,43],[2837,2837]]],[1558965196725,[null,[[1,43,"r"],[-1,44,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "]],[2837,2837],[43,43]]],[1558965155056,["GJX@GJXAIOU",[[1,3825,"实现线性表A与B的合并操作："]],[3825,3825],[3839,3839]]],[1558965156175,["GJX@GJXAIOU",[[-1,3838,"："]],[3839,3839],[3838,3838]]],[1558965156673,["GJX@GJXAIOU",[[1,3838,"；"]],[3838,3838],[3839,3839]]],[1558965256725,[null,[[-1,43,"r"],[1,45,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"]],[43,43],[3840,3840]]],[1558965256725,[null,[[1,43,"r"],[-1,44,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"]],[3840,3840],[43,43]]],[1558965252981,["GJX@GJXAIOU",[[1,4021,"、、、、"]],[4021,4021],[4025,4025]]],[1558965254415,["GJX@GJXAIOU",[[-1,4020," 、、、、"]],[4025,4025],[4020,4020]]],[1558965256304,["GJX@GJXAIOU",[[1,4020,"//"]],[4020,4020],[4022,4022]]],[1558965316750,[null,[[-1,43,"r"],[1,45,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4022,"\n"]],[43,43],[4023,4023]]],[1558965316750,[null,[[1,43,"r"],[-1,44,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4022,"\n"]],[4023,4023],[43,43]]],[1558965257675,["GJX@GJXAIOU",[[1,4022,"shen"]],[4022,4022],[4026,4026]]],[1558965259583,["GJX@GJXAIOU",[[-1,4022,"shen"]],[4026,4026],[4022,4022]]],[1558965264043,["GJX@GJXAIOU",[[1,4022,"声明领域"]],[4022,4022],[4026,4026]]],[1558965265623,["GJX@GJXAIOU",[[-1,4024,"领域"]],[4026,4026],[4024,4024]]],[1558965272417,["GJX@GJXAIOU",[[1,4024,"与La与LB"]],[4024,4024],[4030,4030]]],[1558965278628,["GJX@GJXAIOU",[[-1,4027,"与"]],[4028,4028],[4027,4027]]],[1558965280481,["GJX@GJXAIOU",[[1,4027,"和"]],[4027,4027],[4028,4028]]],[1558965291775,["GJX@GJXAIOU",[[1,4030,"相同的数据元素e*;"]],[4030,4030],[4040,4040]]],[1558965301071,["GJX@GJXAIOU",[[-1,4029,"B"]],[4030,4030],[4029,4029]]],[1558965301728,["GJX@GJXAIOU",[[1,4029,"n"]],[4029,4029],[4030,4030]]],[1558965302554,["GJX@GJXAIOU",[[-1,4029,"n"]],[4030,4030],[4029,4029]]],[1558965303058,["GJX@GJXAIOU",[[1,4029,"b"]],[4029,4029],[4030,4030]]],[1558965311262,["GJX@GJXAIOU",[[1,4071,"、、"]],[4071,4071],[4073,4073]]],[1558965312386,["GJX@GJXAIOU",[[-1,4072,"、"]],[4073,4073],[4072,4072]]],[1558965313621,["GJX@GJXAIOU",[[1,4072,"//"]],[4072,4072],[4074,4074]]],[1558965316103,["GJX@GJXAIOU",[[-1,4071,"、"]],[4072,4072],[4071,4071]]],[1558965376738,[null,[[-1,43,"r"],[1,45,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4073," "]],[43,43],[4074,4074]]],[1558965376738,[null,[[1,43,"r"],[-1,44,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4073," "]],[4074,4074],[43,43]]],[1558965318050,["GJX@GJXAIOU",[[1,4073,"de"]],[4073,4073],[4075,4075]]],[1558965318905,["GJX@GJXAIOU",[[-1,4073,"de"]],[4075,4075],[4073,4073]]],[1558965322978,["GJX@GJXAIOU",[[1,4073,"得到相信比哦啊"]],[4073,4073],[4080,4080]]],[1558965325123,["GJX@GJXAIOU",[[-1,4074,"到相信比哦啊"]],[4080,4080],[4074,4074]]],[1558965334113,["GJX@GJXAIOU",[[1,4074,"到线性表的长度；"]],[4074,4074],[4082,4082]]],[1558965354131,["GJX@GJXAIOU",[[1,4193,"//从Lbzhon"]],[4193,4193],[4202,4202]]],[1558965356135,["GJX@GJXAIOU",[[-1,4198,"zhon"]],[4202,4202],[4198,4198]]],[1558965374127,["GJX@GJXAIOU",[[1,4198,"中挨个获取元素并且放入e中；"]],[4198,4198],[4212,4212]]],[1558965436745,[null,[[-1,43,"r"],[1,45,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4212,"\n"]],[43,43],[4213,4213]]],[1558965436745,[null,[[1,43,"r"],[-1,44,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4212,"\n"]],[4213,4213],[43,43]]],[1558965382352,["GJX@GJXAIOU",[[1,4212,"机"]],[4212,4212],[4213,4213]]],[1558965384314,["GJX@GJXAIOU",[[-1,4212,"机"]],[4213,4213],[4212,4212]]],[1558965393432,["GJX@GJXAIOU",[[1,4212,"即将Lb中国"]],[4212,4212],[4218,4218]]],[1558965394255,["GJX@GJXAIOU",[[-1,4217,"国"]],[4218,4218],[4217,4217]]],[1558965403358,["GJX@GJXAIOU",[[1,4217,"i元素赋值非e"]],[4217,4217],[4224,4224]]],[1558965405878,["GJX@GJXAIOU",[[-1,4222,"非"]],[4223,4223],[4222,4222]]],[1558965407922,["GJX@GJXAIOU",[[1,4222,"给"]],[4222,4222],[4223,4223]]],[1558965410383,["GJX@GJXAIOU",[[1,4224,"；"]],[4224,4224],[4225,4225]]],[1558965424801,["GJX@GJXAIOU",[[1,4262," //ruguo"]],[4262,4262],[4270,4270]]],[1558965426913,["GJX@GJXAIOU",[[-1,4265,"ruguo"]],[4270,4270],[4265,4265]]],[1558965430238,["GJX@GJXAIOU",[[1,4265,"如果l"]],[4265,4265],[4268,4268]]],[1558965430823,["GJX@GJXAIOU",[[-1,4267,"l"]],[4268,4268],[4267,4267]]],[1558965432729,["GJX@GJXAIOU",[[1,4267,"Laz"]],[4267,4267],[4270,4270]]],[1558965433366,["GJX@GJXAIOU",[[-1,4269,"z"]],[4270,4270],[4269,4269]]],[1558965435153,["GJX@GJXAIOU",[[1,4269,"中"]],[4269,4269],[4270,4270]]],[1558965496775,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4270,"\n"]],[43,43],[4271,4271]]],[1558965496775,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4270,"\n"]],[4271,4271],[43,43]]],[1558965443571,["GJX@GJXAIOU",[[1,4270,"不存在e这个元素"]],[4270,4270],[4278,4278]]],[1558965460555,["GJX@GJXAIOU",[[1,4335,"//将这个元素插图"]],[4335,4335],[4344,4344]]],[1558965461034,["GJX@GJXAIOU",[[-1,4343,"图"]],[4344,4344],[4343,4343]]],[1558965463255,["GJX@GJXAIOU",[[1,4343,"入；"]],[4343,4343],[4345,4345]]],[1558965467425,["GJX@GJXAIOU",[[1,4278,"；"]],[4278,4278],[4279,4279]]],[1558965976767,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"]],[43,43],[4347,4347]]],[1558965976767,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"]],[4347,4347],[43,43]]],[1558965926744,["GJX@GJXAIOU",[[1,4703,"      \n"]],[4695,4695],[4702,4702]]],[1558965929838,["GJX@GJXAIOU",[[1,4702,"````"]],[4702,4702],[4706,4706]]],[1558965931502,["GJX@GJXAIOU",[[-1,4705,"`"]],[4706,4706],[4705,4705]]],[1558965933177,["GJX@GJXAIOU",[[1,4705,"x"]],[4705,4705],[4706,4706]]],[1558965933767,["GJX@GJXAIOU",[[1,4714,"      \n"]],[4706,4706],[4713,4713]]],[1558965937480,["GJX@GJXAIOU",[[-1,4707,"      "]],[4713,4713],[4707,4707]]],[1558965938273,["GJX@GJXAIOU",[[-1,4707,"\n"]],[4707,4707],[4706,4706]]],[1558965939104,["GJX@GJXAIOU",[[-1,4705,"x"]],[4706,4706],[4705,4705]]],[1558965939590,["GJX@GJXAIOU",[[1,4705,"c"]],[4705,4705],[4706,4706]]],[1558965940943,["GJX@GJXAIOU",[[1,4714,"      \n"]],[4706,4706],[4713,4713]]],[1558965941655,["GJX@GJXAIOU",[[1,4713,"\\"]],[4713,4713],[4714,4714]]],[1558965941927,["GJX@GJXAIOU",[[1,4722,"      \n"]],[4714,4714],[4721,4721]]],[1558965946148,["GJX@GJXAIOU",[[-1,4715,"      "]],[4721,4721],[4715,4715]]],[1558965946929,["GJX@GJXAIOU",[[-1,4715,"\n"]],[4715,4715],[4714,4714]]],[1558965947656,["GJX@GJXAIOU",[[-1,4713,"\\"]],[4714,4714],[4713,4713]]],[1558965949346,["GJX@GJXAIOU",[[1,4713,"```"]],[4713,4713],[4716,4716]]],[1558965955184,["GJX@GJXAIOU",[[-1,4696,"      "]],[4702,4702],[4696,4696]]],[1558965963702,["GJX@GJXAIOU",[[-1,4701,"      "]],[4707,4707],[4701,4701]]],[1558965966424,["GJX@GJXAIOU",[[1,4701,"\n"]],[4700,4700],[4701,4701]]],[1558965973666,["GJX@GJXAIOU",[[1,4701,"#define MA"]],[4701,4701],[4711,4711]]],[1558965974129,["GJX@GJXAIOU",[[-1,4710,"A"]],[4711,4711],[4710,4710]]],[1558966036764,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[1,4722,"-"]],[43,43],[4723,4723]]],[1558966036764,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[-1,4722,"-"]],[4723,4723],[43,43]]],[1558966008411,["GJX@GJXAIOU",[[1,4710,"AXSIZE 20  //存储空间的初试"]],[4710,4710],[4730,4730]]],[1558966010292,["GJX@GJXAIOU",[[-1,4728,"初试"]],[4730,4730],[4728,4728]]],[1558966017227,["GJX@GJXAIOU",[[1,4728,"初始分配量"]],[4728,4728],[4733,4733]]],[1558966017580,["GJX@GJXAIOU",[[1,4734,"\n"]],[4733,4733],[4734,4734]]],[1558966023713,["GJX@GJXAIOU",[[1,4734,"typeg"]],[4734,4734],[4739,4739]]],[1558966024274,["GJX@GJXAIOU",[[-1,4738,"g"]],[4739,4739],[4738,4738]]],[1558966025065,["GJX@GJXAIOU",[[1,4738,"deg"]],[4738,4738],[4741,4741]]],[1558966026158,["GJX@GJXAIOU",[[-1,4740,"g"]],[4741,4741],[4740,4740]]],[1558966034804,["GJX@GJXAIOU",[[1,4740,"f int ElemType"]],[4740,4740],[4754,4754]]],[1558966096772,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[1,4766,"-"]],[43,43],[4767,4767]]],[1558966096772,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[-1,4766,"-"]],[4767,4767],[43,43]]],[1558966056376,["GJX@GJXAIOU",[[1,4754,"; //Elemtypeleishi"]],[4754,4754],[4772,4772]]],[1558966059400,["GJX@GJXAIOU",[[-1,4766,"leishi"]],[4772,4772],[4766,4766]]],[1558966083194,["GJX@GJXAIOU",[[1,4766,"类型根据实际情况而定，这里假设为int"]],[4766,4766],[4785,4785]]],[1558966084270,["GJX@GJXAIOU",[[1,4786,"\n"]],[4785,4785],[4786,4786]]],[1558966087683,["GJX@GJXAIOU",[[1,4786,"tyu"]],[4786,4786],[4789,4789]]],[1558966088889,["GJX@GJXAIOU",[[-1,4788,"u"]],[4789,4789],[4788,4788]]],[1558966095395,["GJX@GJXAIOU",[[1,4788,"pedef struct"]],[4788,4788],[4800,4800]]],[1558966157037,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[1,4812,"-"]],[43,43],[4813,4813]]],[1558966157037,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[-1,4812,"-"]],[4813,4813],[43,43]]],[1558966096961,["GJX@GJXAIOU",[[1,4801,"\n"]],[4800,4800],[4801,4801]]],[1558966097839,["GJX@GJXAIOU",[[1,4801,"{"]],[4801,4801],[4802,4802]]],[1558966098123,["GJX@GJXAIOU",[[1,4803,"\n"]],[4802,4802],[4803,4803]]],[1558966099354,["GJX@GJXAIOU",[[1,4804,"\n"]],[4803,4803],[4804,4804]]],[1558966099620,["GJX@GJXAIOU",[[1,4805,"\n"]],[4804,4804],[4805,4805]]],[1558966100023,["GJX@GJXAIOU",[[1,4805,"}"]],[4805,4805],[4806,4806]]],[1558966121206,["GJX@GJXAIOU",[[1,4803,"  ElemType data[maxsi"]],[4803,4803],[4824,4824]]],[1558966123133,["GJX@GJXAIOU",[[-1,4818,"[maxsi"]],[4824,4824],[4818,4818]]],[1558966139681,["GJX@GJXAIOU",[[1,4818,"[MAXSIZE]; //s"]],[4818,4818],[4832,4832]]],[1558966140088,["GJX@GJXAIOU",[[-1,4831,"s"]],[4832,4832],[4831,4831]]],[1558966155639,["GJX@GJXAIOU",[[1,4831,"数组存储数据元素，最大值为ma"]],[4831,4831],[4846,4846]]],[1558966156646,["GJX@GJXAIOU",[[-1,4845,"a"]],[4846,4846],[4845,4845]]],[1558966217039,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[1,4860,"-"]],[43,43],[4861,4861]]],[1558966217039,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[-1,4860,"-"]],[4861,4861],[43,43]]],[1558966162103,["GJX@GJXAIOU",[[1,4844,"MAXSIZE"]],[4844,4844],[4851,4851]]],[1558966166390,["GJX@GJXAIOU",[[1,4852,"  \n"]],[4851,4851],[4854,4854]]],[1558966188328,["GJX@GJXAIOU",[[1,4854,"int length;  //线性表当前长度"]],[4854,4854],[4876,4876]]],[1558966189178,["GJX@GJXAIOU",[[1,4877,"  \n"]],[4876,4876],[4879,4879]]],[1558966194369,["GJX@GJXAIOU",[[-1,4880,"\n"]],[4880,4880],[4879,4879]]],[1558966195354,["GJX@GJXAIOU",[[-1,4877,"  "]],[4879,4879],[4877,4877]]],[1558966196123,["GJX@GJXAIOU",[[-1,4877,"\n"]],[4877,4877],[4876,4876]]],[1558966196509,["GJX@GJXAIOU",[[-1,4875,"度"]],[4876,4876],[4875,4875]]],[1558966199804,["GJX@GJXAIOU",[[1,4875,"度"]],[4875,4875],[4876,4876]]],[1558966207617,["GJX@GJXAIOU",[[1,4878,"Aqlist"]],[4878,4878],[4884,4884]]],[1558966209854,["GJX@GJXAIOU",[[-1,4880,"l"]],[4881,4881],[4880,4880]]],[1558966210247,["GJX@GJXAIOU",[[1,4880,"L"]],[4880,4880],[4881,4881]]],[1558966211854,["GJX@GJXAIOU",[[-1,4878,"A"]],[4879,4879],[4878,4878]]],[1558966212559,["GJX@GJXAIOU",[[1,4880,"s"]],[4880,4880],[4881,4881]]],[1558966214598,["GJX@GJXAIOU",[[-1,4880,"s"]],[4881,4881],[4880,4880]]],[1558966277360,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[-1,4851,"m"],[1,4852,"\n"],[-1,4877,"\n"],[1,4878,"}"],[-1,4883,"}"],[1,4896,"-"]],[43,43],[4897,4897]]],[1558966277360,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[1,4851,"m"],[-1,4851,"\n"],[1,4877,"\n"],[-1,4877,"}"],[1,4883,"}"],[-1,4895,"-"]],[4897,4897],[43,43]]],[1558966218054,["GJX@GJXAIOU",[[1,4878,"S"]],[4878,4878],[4879,4879]]],[1558966274328,["GJX@GJXAIOU",[[1,4666,"bubian"]],[4666,4666],[4672,4672]]],[1558966276958,["GJX@GJXAIOU",[[-1,4666,"bubian"]],[4672,4672],[4666,4666]]],[1558966337515,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4695," "],[-1,4700,"-"],[1,4701,"\n"],[-1,4851,"m"],[1,4852,"\n"],[-1,4877,"\n"],[1,4878,"}"],[-1,4884,"}"],[1,4897,"-"]],[43,43],[4898,4898]]],[1558966337515,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4696," "],[1,4700,"-"],[-1,4700,"\n"],[1,4851,"m"],[-1,4851,"\n"],[1,4877,"\n"],[-1,4877,"}"],[1,4884,"}"],[-1,4896,"-"]],[4898,4898],[43,43]]],[1558966280262,["GJX@GJXAIOU",[[1,4666,"不变"]],[4666,4666],[4668,4668]]],[1558966282953,["GJX@GJXAIOU",[[1,4697,"变"]],[4697,4697],[4698,4698]]],[1558966303445,["GJX@GJXAIOU",[[1,5019,"\n      3."]],[5019,5019],[5028,5028]]],[1558966305327,["GJX@GJXAIOU",[[-1,5026,"3."]],[5028,5028],[5026,5026]]],[1558966307070,["GJX@GJXAIOU",[[1,5026,"3."]],[5026,5026],[5028,5028]]],[1558966309126,["GJX@GJXAIOU",[[-1,5027,"."]],[5028,5028],[5027,5027]]],[1558966310390,["GJX@GJXAIOU",[[1,5027,"。"]],[5027,5027],[5028,5028]]],[1558966311480,["GJX@GJXAIOU",[[-1,5027,"。"]],[5028,5028],[5027,5027]]],[1558966322814,["GJX@GJXAIOU",[[1,5027,".线性表的第Ige"]],[5027,5027],[5036,5036]]],[1558966324177,["GJX@GJXAIOU",[[-1,5033,"Ige"]],[5036,5036],[5033,5033]]],[1558966335937,["GJX@GJXAIOU",[[1,5033,"i个元素要存储在数据"]],[5033,5033],[5043,5043]]],[1558966337101,["GJX@GJXAIOU",[[-1,5042,"据"]],[5043,5043],[5042,5042]]],[1558966397512,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4665," "],[1,4668," "],[-1,4696,"\n变 "],[1,4699,"变\n"],[-1,4703,"-"],[1,4704,"\n"],[-1,4854,"m"],[1,4855,"\n"],[-1,4880,"\n"],[1,4881,"}"],[-1,4887,"}"],[1,4900,"-"]],[43,43],[4901,4901]]],[1558966397512,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4666," "],[-1,4668," "],[1,4697,"\n变 "],[-1,4697,"变\n"],[1,4703,"-"],[-1,4703,"\n"],[1,4854,"m"],[-1,4854,"\n"],[1,4880,"\n"],[-1,4880,"}"],[1,4887,"}"],[-1,4899,"-"]],[4901,4901],[43,43]]],[1558966338444,["GJX@GJXAIOU",[[-1,5041,"数"]],[5042,5042],[5041,5041]]],[1558966352041,["GJX@GJXAIOU",[[1,5041,"数组下标为i-1的位置；"]],[5041,5041],[5053,5053]]],[1558966457677,[null,[[-1,43,"r"],[1,44,""],[-1,550,"\n!"],[1,552,"物理"],[1,564,"\n!"],[-1,751,"  "],[1,774,"  "],[-1,911,"\n*"],[1,957,"\n*"],[1,1206,"**"],[-1,1208,"**"],[-1,1220,"。它"],[1,1225,"。 它"],[-1,1226," "],[-1,1567,"  "],[1,1573,"\n "],[-1,1666,"  "],[1,1701,"  "],[-1,1717,"\n "],[1,1723,"\n "],[-1,1824,"\n`"],[1,1830,"\n`"],[1,2285,"O"],[-1,2287,"O"],[-1,2697,"\n "],[1,2710,"\n "],[-1,2822,"。 "],[1,2835,"。 "],[-1,3824,"我"],[1,3839,"我"],[-1,4019," "],[1,4040,"\n"],[-1,4070," "],[1,4082," "],[-1,4192,"\n"],[1,4225,"\n"],[-1,4261,"\n"],[1,4279,"\n"],[-1,4335,"\n"],[1,4346,"\n"],[-1,4665," "],[1,4668," "],[-1,4696,"\n变 "],[1,4699,"变\n"],[-1,4703,"-"],[1,4704,"\n"],[-1,4854,"m"],[1,4855,"\n"],[-1,4880,"\n"],[1,4881,"}"],[-1,4887,"}"],[1,4900,"-"]],[43,43],[4901,4901]]],[1558966457677,[null,[[1,43,"r"],[-1,43,""],[1,549,"\n!"],[-1,549,"物理"],[-1,563,"\n!"],[1,752,"  "],[-1,773,"  "],[1,912,"\n*"],[-1,956,"\n*"],[-1,1207,"**"],[1,1211,"**"],[1,1221,"。它"],[-1,1224,"。 它"],[1,1228," "],[1,1568,"  "],[-1,1572,"\n "],[1,1667,"  "],[-1,1700,"  "],[1,1718,"\n "],[-1,1722,"\n "],[1,1825,"\n`"],[-1,1829,"\n`"],[-1,2286,"O"],[1,2289,"O"],[1,2698,"\n "],[-1,2709,"\n "],[1,2823,"。 "],[-1,2834,"。 "],[1,3825,"我"],[-1,3839,"我"],[1,4020," "],[-1,4040,"\n"],[1,4071," "],[-1,4082," "],[1,4193,"\n"],[-1,4225,"\n"],[1,4262,"\n"],[-1,4279,"\n"],[1,4336,"\n"],[-1,4346,"\n"],[1,4666," "],[-1,4668," "],[1,4697,"\n变 "],[-1,4697,"变\n"],[1,4703,"-"],[-1,4703,"\n"],[1,4854,"m"],[-1,4854,"\n"],[1,4880,"\n"],[-1,4880,"}"],[1,4887,"}"],[-1,4899,"-"]],[4901,4901],[43,43]]],[1558966423832,["GJX@GJXAIOU",[[1,5301,"### "]],[5302,5302],[5311,5311]]],[1558966426287,["GJX@GJXAIOU",[[1,5311,"35."]],[5311,5311],[5314,5314]]],[1558966428053,["GJX@GJXAIOU",[[-1,5311,"35."]],[5314,5314],[5311,5311]]],[1558966453561,["GJX@GJXAIOU",[[1,5311,"3.5 顺序存储结构的插入和删除"]],[5311,5311],[5327,5327]]],[1558966457266,["GJX@GJXAIOU",[[1,5333,"3."]],[5333,5333],[5335,5335]]]],null,"GJX@GJXAIOU"],["8266124e-ba8d-4c9b-bf6f-c81199dbfde9",1559004590181,"---\ntags:\n  - 数据结构\nflag: blue\nstyle: summer\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：   \n3.数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合； \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；相当于一种一对多的关系；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n**逻辑结构式面向问题的，物理结构是面向计算机的；**\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性（算法的每一步都能够通过执行有限次数完成）      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性（对于程序输入的数据进行判断是否合法，不合法时候进行相关的处理，而不是产生异常或者错误）\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：**T(n)=O(f(n))** 。 它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1) ：常数阶\n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n同样：当初的分支结构（不在循环中）的时间复杂度也是O(1);\n    \n(2)时间复杂度O(n)   ：线性阶\n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  ：平方阶\n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      直接从i = 1开始；\n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的即是元素之间是有顺序的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    实现线性表A与B的合并操作；我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;  //声明与La和Lb相同的数据元素e*;\n    La_len = ListLength(*La); //得到线性表的长度；  \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   //从Lb中挨个获取元素并且放入e中；即将Lb中i元素赋值给e；\n        if( !LocateElem(*La, e) )    //如果La中不存在e这个元素；\n        {   \n            ListInsert(La, ++La_len, e);   //将这个元素插入；\n        }     \n    }     \n    \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。 不变 \n      3.线性表的当前长度：length。   变\n```c\n#define MAXSIZE 20  //存储空间的初始分配量\ntypedef int ElemType; //Elemtype类型根据实际情况而定，这里假设为int\ntypedef struct\n{\n  ElemType data[MAXSIZE]; //数组存储数据元素，最大值为MAXSIZE\n  int length;  //线性表当前长度\n}SqList\n```\n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；  \n      3.线性表的第i个元素要存储在数组下标为i-1的位置； \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n###       3.5 顺序存储结构的插入和删除\n#### 3.获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - 缺点：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** 首先没有定义表长，不能用for，而且读取的时间复杂度最差为O（n）.\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 单链表的整表创建\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;\n        r->next = p;\n        r = p;                 // 备注：初学者可能很难理解这句，重点解释。\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next;\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n### 静态链表\n\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，游标的第一个数值表示数组中第一个没有存放数据元素的下标，（图中下标为5的数据域没有存放数据），游标的最后一个值表示第一个存放数据的元素的下标，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n\n•线性表的静态链表存储结构\n\n#define MAXSIZE 1000\n\ntypedef  struct\n\n{\n\nElemType data; // 数据\n\nint cur; // 游标（Cursor）\n\n} Component, StaticLinkList[MAXSIZE];\n\n\n\n•对静态链表进行初始化相当于初始化数组：\n\nStatus InitList(StaticLinkList space)\n\n{\n\nint  i;\n\nfor( i=0; i < MAXSIZE-1; i++ )\n\nspace[i].cur = i + 1;\n\nspace[MAXSIZE-1].cur = 0;\n\nreturn OK;\n\n}\n\n我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据。\n\n我们通常把未使用的数组元素称为备用链表。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。\n\n\n\n####  静态链表的插入操作\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n•首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i;\n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;\n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n–在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n### 循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n魔术师发牌问题：\n使用单项循环链表：\n•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？\n```java\n#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}\n```\n\n\n### 双向链表\n\n#### 双向链表结点结构\n```c\ntypedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;\n\n   ![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)\n\n#### 双向链表的循环链表\n![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n\n\n\n#### 双向链表的插入操作\n```c\n–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;\n```\n\n![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n\n\n#### 双向链表的删除操作\n\n```c\n–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);\n```\n![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间\n\n\n\n### 魔术师发牌问题\n\n```c\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n\n```\n\n视频版本\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1559004554766,["GJX@GJXAIOU",[[1,7304,"**"],[1,7306,"**"]],[7304,7306],[7304,7310]]],[1559005895508,["GJX@GJXAIOU",[[1,9241,"**"],[1,9257,"**"]],[9241,9257],[9241,9261]]],[1559005899155,["GJX@GJXAIOU",[[1,9241," "]],[9241,9241],[9242,9242]]],[1559005904468,["GJX@GJXAIOU",[[-1,9244," "]],[9245,9245],[9244,9244]]],[1559005927183,["GJX@GJXAIOU",[[1,9280,"核心思想：工作指针后移"]],[9280,9280],[9291,9291]]],[1559006677645,["GJX@GJXAIOU",[[1,9883,"、、"]],[9883,9883],[9885,9885]]],[1559006679066,["GJX@GJXAIOU",[[-1,9883,"、、"]],[9885,9885],[9883,9883]]],[1559006680510,["GJX@GJXAIOU",[[1,9883,"//"]],[9883,9883],[9885,9885]]],[1559006735242,["GJX@GJXAIOU",[[1,9885,"A"]],[9885,9885],[9886,9886]]],[1559006736388,["GJX@GJXAIOU",[[-1,9885,"A"]],[9886,9886],[9885,9885]]],[1559006748091,["GJX@GJXAIOU",[[1,9885,"这里的p指向的是"]],[9885,9885],[9893,9893]]],[1559006756977,["GJX@GJXAIOU",[[1,9893,"线性表的头结点"]],[9893,9893],[9900,9900]]],[1559006916315,["GJX@GJXAIOU",[[1,11223,"3.9 "]],[11223,11223],[11227,11227]]],[1559006997508,["GJX@GJXAIOU",[[1,11236,"\n"]],[11235,11235],[11236,11236]]],[1559007005540,["GJX@GJXAIOU",[[1,11236,"头插法和尾插法"]],[11236,11236],[11243,11243]]],[1559007317335,["GJX@GJXAIOU",[[1,11550,"//xhenxu"]],[11550,11550],[11558,11558]]],[1559007320170,["GJX@GJXAIOU",[[-1,11552,"xhenxu"]],[11558,11558],[11552,11552]]],[1559007327006,["GJX@GJXAIOU",[[1,11552,"程序中的节点"]],[11552,11552],[11558,11558]]],[1559007328786,["GJX@GJXAIOU",[[-1,11556,"节点"]],[11558,11558],[11556,11556]]],[1559007340841,["GJX@GJXAIOU",[[1,11556,"结点中的数值都是随机生成的；"]],[11556,11556],[11570,11570]]],[1559007375465,["GJX@GJXAIOU",[[1,11746,"//以上生成了一个空链表；"]],[11746,11746],[11759,11759]]],[1559007638066,["GJX@GJXAIOU",[[-1,12364,"         "]],[12373,12373],[12364,12364]]],[1559007646622,["GJX@GJXAIOU",[[-1,12367,"备注：初学者可能很难理解这句，重点解释。"],[1,12387,"将"]],[12367,12367],[12368,12368]]],[1559007648756,["GJX@GJXAIOU",[[1,12368,"当前"]],[12368,12368],[12370,12370]]],[1559007651507,["GJX@GJXAIOU",[[1,12370,"新节点"]],[12370,12370],[12373,12373]]],[1559007652898,["GJX@GJXAIOU",[[-1,12371,"节点"]],[12373,12373],[12371,12371]]],[1559007672976,["GJX@GJXAIOU",[[1,12371,"结点定义为表尾终端节点"]],[12371,12371],[12382,12382]]],[1559007673849,["GJX@GJXAIOU",[[-1,12380,"节点"]],[12382,12382],[12380,12380]]],[1559007675827,["GJX@GJXAIOU",[[1,12380,"结点"]],[12380,12380],[12382,12382]]],[1559007696819,["GJX@GJXAIOU",[[1,12341,"   //将表尾终端结点指向"]],[12341,12341],[12355,12355]]],[1559007716401,["GJX@GJXAIOU",[[1,12355,"新结点"]],[12355,12355],[12358,12358]]],[1559007722729,["GJX@GJXAIOU",[[1,12353,"的"]],[12353,12353],[12354,12354]]],[1559007724483,["GJX@GJXAIOU",[[1,12355,"针指"]],[12354,12354],[12356,12356]]],[1559007730184,["GJX@GJXAIOU",[[1,12320,"  、、"]],[12320,12320],[12324,12324]]],[1559007731439,["GJX@GJXAIOU",[[-1,12322,"、、"]],[12324,12324],[12322,12322]]],[1559007734809,["GJX@GJXAIOU",[[1,12322,"//suiji sh"]],[12322,12322],[12332,12332]]],[1559007737669,["GJX@GJXAIOU",[[-1,12323,"/suiji sh"]],[12332,12332],[12323,12323]]],[1559007740137,["GJX@GJXAIOU",[[1,12323,"、"]],[12323,12323],[12324,12324]]],[1559007741205,["GJX@GJXAIOU",[[-1,12323,"、"]],[12324,12324],[12323,12323]]],[1559007742377,["GJX@GJXAIOU",[[1,12323,"、"]],[12323,12323],[12324,12324]]],[1559007743226,["GJX@GJXAIOU",[[-1,12323,"、"]],[12324,12324],[12323,12323]]],[1559007753053,["GJX@GJXAIOU",[[1,12323,"/随机生成0-100之间的数字"]],[12323,12323],[12338,12338]]],[1559007809658,["GJX@GJXAIOU",[[1,12542,"3.10"]],[12542,12542],[12546,12546]]],[1559008025151,["GJX@GJXAIOU",[[1,12716,"、、"]],[12716,12716],[12718,12718]]],[1559008026431,["GJX@GJXAIOU",[[-1,12716,"、、"]],[12718,12718],[12716,12716]]],[1559008038969,["GJX@GJXAIOU",[[1,12716," //p指向链表的第一个结点"]],[12716,12716],[12730,12730]]],[1559008118444,["GJX@GJXAIOU",[[1,13297,"\n"]],[13295,13295],[13296,13296]]],[1559008118729,["GJX@GJXAIOU",[[1,13298,"\n"]],[13296,13296],[13297,13297]]],[1559008118998,["GJX@GJXAIOU",[[1,13299,"\n"]],[13297,13297],[13298,13298]]],[1559008119299,["GJX@GJXAIOU",[[1,13300,"\n"]],[13298,13298],[13299,13299]]],[1559008119595,["GJX@GJXAIOU",[[1,13301,"\n"]],[13299,13299],[13300,13300]]],[1559008119900,["GJX@GJXAIOU",[[1,13302,"\n"]],[13300,13300],[13301,13301]]],[1559008120173,["GJX@GJXAIOU",[[1,13303,"\n"]],[13301,13301],[13302,13302]]],[1559008120662,["GJX@GJXAIOU",[[1,13304,"\n"]],[13302,13302],[13303,13303]]],[1559008334348,["GJX@GJXAIOU",[[-1,13618,"•"]],[13619,13619],[13618,13618]]],[1559008335068,["GJX@GJXAIOU",[[1,13618,"、、"]],[13618,13618],[13620,13620]]],[1559008336665,["GJX@GJXAIOU",[[-1,13618,"、、"]],[13620,13620],[13618,13618]]],[1559008337531,["GJX@GJXAIOU",[[1,13618,"//"]],[13618,13618],[13620,13620]]],[1559008342177,["GJX@GJXAIOU",[[1,13617,"```c"]],[13617,13617],[13621,13621]]],[1559008354775,["GJX@GJXAIOU",[[1,13764,"```"]],[13764,13764],[13767,13767]]],[1559008357689,["GJX@GJXAIOU",[[-1,13659,"\n"]],[13659,13659],[13658,13658]]],[1559008359484,["GJX@GJXAIOU",[[-1,13675,"\n"]],[13675,13675],[13674,13674]]],[1559008361243,["GJX@GJXAIOU",[[-1,13677,"\n"]],[13677,13677],[13676,13676]]],[1559008364144,["GJX@GJXAIOU",[[1,13677,"  "]],[13677,13677],[13679,13679]]],[1559008366188,["GJX@GJXAIOU",[[-1,13700,"\n"]],[13700,13700],[13699,13699]]],[1559008370600,["GJX@GJXAIOU",[[1,13700,"  "]],[13700,13700],[13702,13702]]],[1559008372220,["GJX@GJXAIOU",[[-1,13725,"\n"]],[13725,13725],[13724,13724]]],[1559008410901,["GJX@GJXAIOU",[[1,13724,",dang"]],[13724,13724],[13729,13729]]],[1559008412994,["GJX@GJXAIOU",[[-1,13725,"dang"]],[13729,13729],[13725,13725]]],[1559008417730,["GJX@GJXAIOU",[[1,13725,"当为0时候表示"]],[13725,13725],[13732,13732]]],[1559008622469,["GJX@GJXAIOU",[[1,14055,"**"],[1,14112,"**"]],[14055,14112],[14055,14116]]],[1559008633317,["GJX@GJXAIOU",[[1,13987,"**"],[1,14006,"**"]],[13987,14006],[13987,14010]]],[1559008639485,["GJX@GJXAIOU",[[1,13950,"**"],[1,13984,"**"]],[13950,13984],[13950,13988]]],[1559008909303,[null,[[1,13732,"无指向"],[1,13947,"**"],[-1,13950,"**"],[1,13983,"**"],[-1,13991,"**"],[1,14009,"**"],[-1,14014,"**"],[1,14060,"**"],[-1,14063,"**"],[1,14119,"**"],[-1,14122,"**"]],[13732,13732],[14122,14122]]],[1559008909303,[null,[[-1,13732,"无指向"],[-1,13950,"**"],[1,13955,"**"],[-1,13986,"**"],[1,13996,"**"],[-1,14012,"**"],[1,14019,"**"],[-1,14063,"**"],[1,14068,"**"],[-1,14122,"**"],[1,14127,"**"]],[14122,14122],[13732,13732]]],[1559008870741,["GJX@GJXAIOU",[[1,14125,"![静态链表的存储结构]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)"]],[14125,14126],[14235,14235]]],[1559008882643,["GJX@GJXAIOU",[[-1,14125,"![静态链表的存储结构]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)"]],[14125,14234],[14125,14125]]],[1559008969260,[null,[[1,13732,"无指向"],[1,13947,"**"],[-1,13950,"**"],[1,13983,"**"],[-1,13991,"**"],[1,14009,"**"],[-1,14014,"**"],[1,14060,"**"],[-1,14063,"**"],[1,14119,"**"],[-1,14122,"**"]],[13732,13732],[14122,14122]]],[1559008969260,[null,[[-1,13732,"无指向"],[-1,13950,"**"],[1,13955,"**"],[-1,13986,"**"],[1,13996,"**"],[-1,14012,"**"],[1,14019,"**"],[-1,14063,"**"],[1,14068,"**"],[-1,14122,"**"],[1,14127,"**"]],[14122,14122],[13732,13732]]],[1559008939153,["GJX@GJXAIOU",[[1,14125,"![静态链表的存储结构示例]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.jpg)"]],[14125,14125],[14255,14255]]],[1559009029250,[null,[[-1,13732,""],[1,13732,"无指向"],[1,13947,"**"],[-1,13950,"**"],[1,13983,"**"],[-1,13991,"**"],[1,14009,"**"],[-1,14012,"*"],[-1,14015,"*"],[1,14060,"**"],[-1,14063,"**"],[-1,14119,"\n\n\n"],[1,14254,"\n\n\n"]],[13732,13732],[14257,14257]]],[1559009029250,[null,[[1,13732,""],[-1,13732,"无指向"],[-1,13950,"**"],[1,13955,"**"],[-1,13986,"**"],[1,13996,"**"],[-1,14012,"**"],[1,14017,"*"],[1,14019,"*"],[-1,14063,"**"],[1,14068,"**"],[1,14122,"\n\n\n"],[-1,14254,"\n\n\n"]],[14257,14257],[13732,13732]]],[1559009023083,["GJX@GJXAIOU",[[1,13801,"·"]],[13801,13801],[13802,13802]]],[1559009024274,["GJX@GJXAIOU",[[-1,13801,"·"]],[13802,13802],[13801,13801]]],[1559009027179,["GJX@GJXAIOU",[[1,13801,"```c"]],[13801,13801],[13805,13805]]],[1559009089250,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[1,13805,"\nSt"],[1,13951,"**"],[-1,13954,"**"],[1,13987,"**"],[-1,13995,"**"],[1,14013,"**"],[-1,14016,"*"],[-1,14019,"*"],[1,14064,"**"],[-1,14067,"**"],[-1,14123,"\n\n\n"],[1,14258,"\n\n\n"]],[13732,13732],[14261,14261]]],[1559009089250,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[-1,13805,"\nSt"],[-1,13954,"**"],[1,13959,"**"],[-1,13990,"**"],[1,14000,"**"],[-1,14016,"**"],[1,14021,"*"],[1,14023,"*"],[-1,14067,"**"],[1,14072,"**"],[1,14126,"\n\n\n"],[-1,14258,"\n\n\n"]],[14261,14261],[13732,13732]]],[1559009032195,["GJX@GJXAIOU",[[1,13953,"```"]],[13953,13953],[13956,13956]]],[1559009034938,["GJX@GJXAIOU",[[-1,13844,"\n"]],[13844,13844],[13843,13843]]],[1559009036650,["GJX@GJXAIOU",[[-1,13846,"\n"]],[13846,13846],[13845,13845]]],[1559009038517,["GJX@GJXAIOU",[[-1,13854,"\n"]],[13854,13854],[13853,13853]]],[1559009040536,["GJX@GJXAIOU",[[-1,13885,"\n"]],[13885,13885],[13884,13884]]],[1559009042114,["GJX@GJXAIOU",[[-1,13907,"\n"]],[13907,13907],[13906,13906]]],[1559009044306,["GJX@GJXAIOU",[[-1,13933,"\n"]],[13933,13933],[13932,13932]]],[1559009046074,["GJX@GJXAIOU",[[-1,13944,"\n"]],[13944,13944],[13943,13943]]],[1559009049597,["GJX@GJXAIOU",[[1,13846,"  "],[1,13854,"  "],[1,13885,"  "],[1,13907,"  "],[1,13933,"  "]],[13846,13943],[13846,13953]]],[1559009077116,["GJX@GJXAIOU",[[1,13806,"\n"]],[13805,13805],[13806,13806]]],[1559009087972,["GJX@GJXAIOU",[[1,13806,"//将一维数组space"]],[13806,13806],[13818,13818]]],[1559009149256,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13819,"Sta"],[-1,13854,"\n"],[-1,13857,"in"],[1,13861,"int"],[-1,13866,"\nfo"],[1,13871,"for"],[-1,13899,"\nsp"],[1,13904,"spa"],[-1,13923,"\nsp"],[1,13928,"spa"],[-1,13951,"\nre"],[1,13956,"ret"],[-1,13963,"\n"],[-1,13967,"我们"],[-1,13972,"对"],[1,13973,"\n"],[1,13975,"我们对"],[1,14006,"**"],[-1,14014,"**"],[1,14032,"**"],[-1,14035,"**"],[1,14083,"**"],[-1,14086,"**"],[-1,14142,"\n\n\n"],[1,14277,"\n\n\n"]],[13732,13732],[14280,14280]]],[1559009149256,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13819,"Sta"],[1,13857,"\n"],[1,13859,"in"],[-1,13861,"int"],[1,13869,"\nfo"],[-1,13871,"for"],[1,13902,"\nsp"],[-1,13904,"spa"],[1,13926,"\nsp"],[-1,13928,"spa"],[1,13954,"\nre"],[-1,13956,"ret"],[1,13966,"\n"],[1,13969,"我们"],[1,13972,"对"],[-1,13972,"\n"],[-1,13975,"我们对"],[-1,14009,"**"],[1,14019,"**"],[-1,14035,"**"],[1,14040,"**"],[-1,14086,"**"],[1,14091,"**"],[1,14145,"\n\n\n"],[-1,14277,"\n\n\n"]],[14280,14280],[13732,13732]]],[1559009118089,["GJX@GJXAIOU",[[1,13818,"中各分量链成一备用"]],[13818,13818],[13827,13827]]],[1559009329326,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13828,"Sta"],[-1,13863,"\n"],[-1,13866,"in"],[1,13870,"int"],[-1,13875,"\nfo"],[1,13880,"for"],[-1,13908,"\nsp"],[1,13913,"spa"],[-1,13932,"\nsp"],[1,13937,"spa"],[-1,13960,"\nre"],[1,13965,"ret"],[-1,13972,"\n"],[-1,13976,"我们"],[-1,13981,"对"],[1,13982,"\n"],[1,13984,"我们对"],[1,14015,"**"],[-1,14023,"**"],[1,14041,"**"],[-1,14044,"**"],[1,14092,"**"],[-1,14095,"**"],[-1,14151,"\n\n\n"],[1,14286,"\n\n\n"]],[13732,13732],[14289,14289]]],[1559009329326,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13828,"Sta"],[1,13866,"\n"],[1,13868,"in"],[-1,13870,"int"],[1,13878,"\nfo"],[-1,13880,"for"],[1,13911,"\nsp"],[-1,13913,"spa"],[1,13935,"\nsp"],[-1,13937,"spa"],[1,13963,"\nre"],[-1,13965,"ret"],[1,13975,"\n"],[1,13978,"我们"],[1,13981,"对"],[-1,13981,"\n"],[-1,13984,"我们对"],[-1,14018,"**"],[1,14028,"**"],[-1,14044,"**"],[1,14049,"**"],[-1,14095,"**"],[1,14100,"**"],[1,14154,"\n\n\n"],[-1,14286,"\n\n\n"]],[14289,14289],[13732,13732]]],[1559009298616,["GJX@GJXAIOU",[[1,13827,"链表"]],[13827,13827],[13829,13829]]],[1559009310923,["GJX@GJXAIOU",[[1,13830,"\n"]],[13829,13829],[13830,13830]]],[1559009315744,["GJX@GJXAIOU",[[1,13830,"、、"]],[13830,13830],[13832,13832]]],[1559009316632,["GJX@GJXAIOU",[[-1,13830,"、、"]],[13832,13832],[13830,13830]]],[1559009328833,["GJX@GJXAIOU",[[1,13830,"//*space[0]."]],[13830,13830],[13842,13842]]],[1559009389523,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13843,"Sta"],[-1,13878,"\n"],[-1,13881,"in"],[1,13885,"int"],[-1,13890,"\nfo"],[1,13895,"for"],[-1,13923,"\nsp"],[1,13928,"spa"],[-1,13947,"\nsp"],[1,13952,"spa"],[-1,13975,"\nre"],[1,13980,"ret"],[-1,13987,"\n"],[-1,13991,"我们"],[-1,13996,"对"],[1,13997,"\n"],[1,13999,"我们对"],[1,14030,"**"],[-1,14038,"**"],[1,14056,"**"],[-1,14059,"**"],[1,14107,"**"],[-1,14110,"**"],[-1,14166,"\n\n\n"],[1,14301,"\n\n\n"]],[13732,13732],[14304,14304]]],[1559009389523,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13843,"Sta"],[1,13881,"\n"],[1,13883,"in"],[-1,13885,"int"],[1,13893,"\nfo"],[-1,13895,"for"],[1,13926,"\nsp"],[-1,13928,"spa"],[1,13950,"\nsp"],[-1,13952,"spa"],[1,13978,"\nre"],[-1,13980,"ret"],[1,13990,"\n"],[1,13993,"我们"],[1,13996,"对"],[-1,13996,"\n"],[-1,13999,"我们对"],[-1,14033,"**"],[1,14043,"**"],[-1,14059,"**"],[1,14064,"**"],[-1,14110,"**"],[1,14115,"**"],[1,14169,"\n\n\n"],[-1,14301,"\n\n\n"]],[14304,14304],[13732,13732]]],[1559009347724,["GJX@GJXAIOU",[[1,13842,"cur 为头指针，\"0\"表示空指针"]],[13842,13842],[13859,13859]]],[1559009381957,["GJX@GJXAIOU",[[1,13994,"、、"]],[13994,13994],[13996,13996]]],[1559009383004,["GJX@GJXAIOU",[[-1,13994,"、、"]],[13996,13996],[13994,13994]]],[1559009389100,["GJX@GJXAIOU",[[1,13994,"//目前静态"]],[13994,13994],[14000,14000]]],[1559009449504,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp  "],[1,13945,"  spa"],[-1,13964,"\nsp"],[1,13969,"spa"],[-1,13991,"\n\nr"],[-1,14000,"e"],[1,14001,"\n"],[1,14003,"ret"],[-1,14011,"\n"],[-1,14014,"我们"],[-1,14019,"对"],[1,14020,"\n"],[1,14022,"我们对"],[1,14053,"**"],[-1,14061,"**"],[1,14079,"**"],[-1,14082,"**"],[1,14130,"**"],[-1,14133,"**"],[-1,14189,"\n\n\n"],[1,14324,"\n\n\n"]],[13732,13732],[14327,14327]]],[1559009449504,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp  "],[-1,13943,"  spa"],[1,13967,"\nsp"],[-1,13969,"spa"],[1,13994,"\n\nr"],[1,14000,"e"],[-1,14000,"\n"],[-1,14003,"ret"],[1,14014,"\n"],[1,14016,"我们"],[1,14019,"对"],[-1,14019,"\n"],[-1,14022,"我们对"],[-1,14056,"**"],[1,14066,"**"],[-1,14082,"**"],[1,14087,"**"],[-1,14133,"**"],[1,14138,"**"],[1,14192,"\n\n\n"],[-1,14324,"\n\n\n"]],[14327,14327],[13732,13732]]],[1559009403652,["GJX@GJXAIOU",[[1,14000,"链表为空，所以最有"]],[14000,14000],[14009,14009]]],[1559009404537,["GJX@GJXAIOU",[[-1,14007,"最有"]],[14009,14009],[14007,14007]]],[1559009414865,["GJX@GJXAIOU",[[1,14007,"最后一个元素的cur为0；"]],[14007,14007],[14020,14020]]],[1559009809813,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp  "],[1,13945,"  spa"],[-1,13964,"\nsp"],[1,13969,"spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"]],[13732,13732],[14347,14347]]],[1559009809813,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp  "],[-1,13943,"  spa"],[1,13967,"\nsp"],[-1,13969,"spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"]],[14347,14347],[13732,13732]]],[1559009794730,["GJX@GJXAIOU",[[1,14363,"\n"]],[14362,14362],[14363,14363]]],[1559009795017,["GJX@GJXAIOU",[[1,14364,"\n"]],[14363,14363],[14364,14364]]],[1559009869816,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[1,14360,"\n\n"],[-1,14363,"\n\n"]],[13732,13732],[14363,14363]]],[1559009869816,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[-1,14363,"\n\n"],[1,14368,"\n\n"]],[14363,14363],[13732,13732]]],[1559009818995,["GJX@GJXAIOU",[[1,14364,"因为静态两包"]],[14364,14364],[14370,14370]]],[1559009820302,["GJX@GJXAIOU",[[-1,14368,"两包"]],[14370,14370],[14368,14368]]],[1559009856763,["GJX@GJXAIOU",[[1,14368,"链表中无法实现像动态链表中的malloc和free，需要自行实现，同时需要判断那"]],[14368,14368],[14408,14408]]],[1559009857936,["GJX@GJXAIOU",[[-1,14407,"那"]],[14408,14408],[14407,14407]]],[1559009867163,["GJX@GJXAIOU",[[1,14407,"数组中哪些分量未被"]],[14407,14407],[14416,14416]]],[1559009929813,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[-1,14360,"在A之"],[1,14417,"在A之"]],[13732,13732],[14420,14420]]],[1559009929813,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[1,14363,"在A之"],[-1,14417,"在A之"]],[14420,14420],[13732,13732]]],[1559009895431,["GJX@GJXAIOU",[[1,14416,"使用过，解决办法：将所有未被使用过的及其以及"]],[14416,14416],[14438,14438]]],[1559009896633,["GJX@GJXAIOU",[[-1,14436,"以及"]],[14438,14438],[14436,14436]]],[1559009927808,["GJX@GJXAIOU",[[1,14436,"已经被删除的分量用游标链接成一个备用的链表，进行"]],[14436,14436],[14460,14460]]],[1559009976024,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[-1,14360,"在A之"],[1,14461,"在A之"]],[13732,13732],[14464,14464]]],[1559009976024,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[1,14363,"在A之"],[-1,14461,"在A之"]],[14464,14464],[13732,13732]]],[1559009933216,["GJX@GJXAIOU",[[1,14460,"插入的是会后"]],[14460,14460],[14466,14466]]],[1559009934331,["GJX@GJXAIOU",[[-1,14464,"会后"]],[14466,14466],[14464,14464]]],[1559009974083,["GJX@GJXAIOU",[[1,14464,"时候，就从备用链表中选取一个结点作为待插入的新节点。"]],[14464,14464],[14490,14490]]],[1559010036017,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[-1,14360,"在A之"],[1,14491,"在A之"]],[13732,13732],[14494,14494]]],[1559010036017,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[1,14363,"在A之"],[-1,14491,"在A之"]],[14494,14494],[13732,13732]]],[1559010026875,["GJX@GJXAIOU",[[-1,14622,"•"]],[14623,14623],[14622,14622]]],[1559010027376,["GJX@GJXAIOU",[[1,14622,"、"]],[14622,14622],[14623,14623]]],[1559010028586,["GJX@GJXAIOU",[[-1,14622,"、"]],[14623,14623],[14622,14622]]],[1559010029455,["GJX@GJXAIOU",[[1,14622,"//"]],[14622,14622],[14624,14624]]],[1559010096018,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[-1,14360,"在A之"],[-1,14491,""],[1,14491,"在A之"],[-1,14619,"•首先"],[1,14624,"首先是"]],[13732,13732],[14627,14627]]],[1559010096018,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[1,14363,"在A之"],[1,14491,""],[-1,14491,"在A之"],[1,14622,"•首先"],[-1,14624,"首先是"]],[14627,14627],[13732,13732]]],[1559010061962,["GJX@GJXAIOU",[[1,14721,"//xiangdan"]],[14721,14721],[14731,14731]]],[1559010066142,["GJX@GJXAIOU",[[-1,14723,"xiangdan"]],[14731,14731],[14723,14723]]],[1559010084729,["GJX@GJXAIOU",[[1,14723,"相当于返回第一个备用空闲分享"]],[14723,14723],[14737,14737]]],[1559010086420,["GJX@GJXAIOU",[[-1,14735,"分享"]],[14737,14737],[14735,14735]]],[1559010092505,["GJX@GJXAIOU",[[1,14735,"分量的下标；"]],[14735,14735],[14741,14741]]],[1559010576058,[null,[[-1,13732,""],[1,13732,"无指向"],[-1,13798,"\nSt"],[-1,13805,"a"],[1,13806,"\n"],[1,13860,"Sta"],[-1,13894,"\n"],[1,13898,"  "],[-1,13900,"  "],[1,13902,"t"],[-1,13907,"\nfo  "],[1,13912,"  for"],[-1,13940,"\nsp"],[1,13945,"spa"],[-1,13964,"\nsp  "],[1,13969,"  spa"],[-1,13991,"\n\nr"],[-1,14020,"e"],[1,14021,"\n"],[1,14023,"ret"],[-1,14031,"\n"],[-1,14034,"我们"],[-1,14039,"对"],[1,14040,"\n"],[1,14042,"我们对"],[1,14073,"**"],[-1,14081,"**"],[1,14099,"**"],[-1,14102,"**"],[1,14150,"**"],[-1,14153,"**"],[-1,14209,"\n\n\n"],[1,14344,"\n\n\n"],[-1,14360,"在A之"],[-1,14491,""],[1,14491,"在A之"],[-1,14619,"•首先"],[1,14624,"首先是"],[-1,14718,"\n\ni"],[1,14741,"\n\ni"]],[13732,13732],[14744,14744]]],[1559010576058,[null,[[1,13732,""],[-1,13732,"无指向"],[1,13801,"\nSt"],[1,13805,"a"],[-1,13805,"\n"],[-1,13860,"Sta"],[1,13897,"\n"],[-1,13900,"  "],[1,13904,"  "],[-1,13904,"t"],[1,13910,"\nfo  "],[-1,13910,"  for"],[1,13943,"\nsp"],[-1,13945,"spa"],[1,13967,"\nsp  "],[-1,13967,"  spa"],[1,13994,"\n\nr"],[1,14020,"e"],[-1,14020,"\n"],[-1,14023,"ret"],[1,14034,"\n"],[1,14036,"我们"],[1,14039,"对"],[-1,14039,"\n"],[-1,14042,"我们对"],[-1,14076,"**"],[1,14086,"**"],[-1,14102,"**"],[1,14107,"**"],[-1,14153,"**"],[1,14158,"**"],[1,14212,"\n\n\n"],[-1,14344,"\n\n\n"],[1,14363,"在A之"],[1,14491,""],[-1,14491,"在A之"],[1,14622,"•首先"],[-1,14624,"首先是"],[1,14721,"\n\ni"],[-1,14741,"\n\ni"]],[14744,14744],[13732,13732]]],[1559010567909,["GJX@GJXAIOU",[[1,13314,"实际上是为了给没有 指针的高级语言设计的一种是西南"]],[13314,13314],[13339,13339]]],[1559010570416,["GJX@GJXAIOU",[[-1,13336,"是西南"]],[13339,13339],[13336,13336]]],[1559010574330,["GJX@GJXAIOU",[[1,13336,"师兄那"]],[13336,13336],[13339,13339]]],[1559010636035,[null,[[-1,13757,""],[1,13757,"无指向"],[-1,13823,"\nSt"],[-1,13830,"a"],[1,13831,"\n"],[1,13885,"Sta"],[-1,13919,"\n"],[1,13923,"  "],[-1,13925,"  "],[1,13927,"t"],[-1,13932,"\nfo  "],[1,13937,"  for"],[-1,13965,"\nsp"],[1,13970,"spa"],[-1,13989,"\nsp  "],[1,13994,"  spa"],[-1,14016,"\n\nr"],[-1,14045,"e"],[1,14046,"\n"],[1,14048,"ret"],[-1,14056,"\n"],[-1,14059,"我们"],[-1,14064,"对"],[1,14065,"\n"],[1,14067,"我们对"],[1,14098,"**"],[-1,14106,"**"],[1,14124,"**"],[-1,14127,"**"],[1,14175,"**"],[-1,14178,"**"],[-1,14234,"\n\n\n"],[1,14369,"\n\n\n"],[-1,14385,"在A之"],[-1,14516,""],[1,14516,"在A之"],[-1,14644,"•首先"],[1,14649,"首先是"],[-1,14743,"\n\ni"],[1,14766,"\n\ni"]],[13757,13757],[14769,14769]]],[1559010636035,[null,[[1,13757,""],[-1,13757,"无指向"],[1,13826,"\nSt"],[1,13830,"a"],[-1,13830,"\n"],[-1,13885,"Sta"],[1,13922,"\n"],[-1,13925,"  "],[1,13929,"  "],[-1,13929,"t"],[1,13935,"\nfo  "],[-1,13935,"  for"],[1,13968,"\nsp"],[-1,13970,"spa"],[1,13992,"\nsp  "],[-1,13992,"  spa"],[1,14019,"\n\nr"],[1,14045,"e"],[-1,14045,"\n"],[-1,14048,"ret"],[1,14059,"\n"],[1,14061,"我们"],[1,14064,"对"],[-1,14064,"\n"],[-1,14067,"我们对"],[-1,14101,"**"],[1,14111,"**"],[-1,14127,"**"],[1,14132,"**"],[-1,14178,"**"],[1,14183,"**"],[1,14237,"\n\n\n"],[-1,14369,"\n\n\n"],[1,14388,"在A之"],[1,14516,""],[-1,14516,"在A之"],[1,14647,"•首先"],[-1,14649,"首先是"],[1,14746,"\n\ni"],[-1,14766,"\n\ni"]],[14769,14769],[13757,13757]]],[1559010586688,["GJX@GJXAIOU",[[1,13339,"单链表能力的方法："]],[13339,13339],[13348,13348]]],[1559010587721,["GJX@GJXAIOU",[[-1,13347,"："]],[13348,13348],[13347,13347]]],[1559010588217,["GJX@GJXAIOU",[[1,13347,"；"]],[13347,13347],[13348,13348]]],[1559010756044,[null,[[-1,13766,""],[1,13766,"无指向"],[-1,13832,"\nSt"],[-1,13839,"a"],[1,13840,"\n"],[1,13894,"Sta"],[-1,13928,"\n"],[1,13932,"  "],[-1,13934,"  "],[1,13936,"t"],[-1,13941,"\nfo  "],[1,13946,"  for"],[-1,13974,"\nsp"],[1,13979,"spa"],[-1,13998,"\nsp  "],[1,14003,"  spa"],[-1,14025,"\n\nr"],[-1,14054,"e"],[1,14055,"\n"],[1,14057,"ret"],[-1,14065,"\n"],[-1,14068,"我们"],[-1,14073,"对"],[1,14074,"\n"],[1,14076,"我们对"],[1,14107,"**"],[-1,14115,"**"],[1,14133,"**"],[-1,14136,"**"],[1,14184,"**"],[-1,14187,"**"],[-1,14243,"\n\n\n"],[1,14378,"\n\n\n"],[-1,14394,"在A之"],[-1,14525,""],[1,14525,"在A之"],[-1,14653,"•首先"],[1,14658,"首先是"],[-1,14752,"\n\ni"],[1,14775,"\n\ni"]],[13766,13766],[14778,14778]]],[1559010756044,[null,[[1,13766,""],[-1,13766,"无指向"],[1,13835,"\nSt"],[1,13839,"a"],[-1,13839,"\n"],[-1,13894,"Sta"],[1,13931,"\n"],[-1,13934,"  "],[1,13938,"  "],[-1,13938,"t"],[1,13944,"\nfo  "],[-1,13944,"  for"],[1,13977,"\nsp"],[-1,13979,"spa"],[1,14001,"\nsp  "],[-1,14001,"  spa"],[1,14028,"\n\nr"],[1,14054,"e"],[-1,14054,"\n"],[-1,14057,"ret"],[1,14068,"\n"],[1,14070,"我们"],[1,14073,"对"],[-1,14073,"\n"],[-1,14076,"我们对"],[-1,14110,"**"],[1,14120,"**"],[-1,14136,"**"],[1,14141,"**"],[-1,14187,"**"],[1,14192,"**"],[1,14246,"\n\n\n"],[-1,14378,"\n\n\n"],[1,14397,"在A之"],[1,14525,""],[-1,14525,"在A之"],[1,14656,"•首先"],[-1,14658,"首先是"],[1,14755,"\n\ni"],[-1,14775,"\n\ni"]],[14778,14778],[13766,13766]]],[1559010710772,["GJX@GJXAIOU",[[1,20199,"\n"]],[20197,20197],[20198,20198]]],[1559010711049,["GJX@GJXAIOU",[[1,20200,"\n"]],[20198,20198],[20199,20199]]],[1559010711376,["GJX@GJXAIOU",[[1,20201,"\n"]],[20199,20199],[20200,20200]]],[1559010711674,["GJX@GJXAIOU",[[1,20202,"\n"]],[20200,20200],[20201,20201]]],[1559010716038,["GJX@GJXAIOU",[[1,20207,"3.13"]],[20207,20207],[20211,20211]]],[1559010816049,[null,[[-1,13766,""],[1,13766,"无指向"],[-1,13832,"\nSt"],[-1,13839,"a"],[1,13840,"\n"],[1,13894,"Sta"],[-1,13928,"\n"],[1,13932,"  "],[-1,13934,"  "],[1,13936,"t"],[-1,13941,"\nfo  "],[1,13946,"  for"],[-1,13974,"\nsp"],[1,13979,"spa"],[-1,13998,"\nsp  "],[1,14003,"  spa"],[-1,14025,"\n\nr"],[-1,14054,"e"],[1,14055,"\n"],[1,14057,"ret"],[-1,14065,"\n"],[-1,14068,"我们"],[-1,14073,"对"],[1,14074,"\n"],[1,14076,"我们对"],[1,14107,"**"],[-1,14115,"**"],[1,14133,"**"],[-1,14136,"**"],[1,14184,"**"],[-1,14187,"**"],[-1,14243,"\n\n\n"],[1,14378,"\n\n\n"],[-1,14394,"在A之"],[-1,14525,""],[1,14525,"在A之"],[-1,14653,"•首先"],[1,14658,"首先是"],[-1,14752,"\n\ni"],[1,14775,"\n\ni"],[-1,20196,"###"],[1,20203,"###"],[-1,20204,"循环链"],[1,20211,"循环链"]],[13766,13766],[20214,20214]]],[1559010816049,[null,[[1,13766,""],[-1,13766,"无指向"],[1,13835,"\nSt"],[1,13839,"a"],[-1,13839,"\n"],[-1,13894,"Sta"],[1,13931,"\n"],[-1,13934,"  "],[1,13938,"  "],[-1,13938,"t"],[1,13944,"\nfo  "],[-1,13944,"  for"],[1,13977,"\nsp"],[-1,13979,"spa"],[1,14001,"\nsp  "],[-1,14001,"  spa"],[1,14028,"\n\nr"],[1,14054,"e"],[-1,14054,"\n"],[-1,14057,"ret"],[1,14068,"\n"],[1,14070,"我们"],[1,14073,"对"],[-1,14073,"\n"],[-1,14076,"我们对"],[-1,14110,"**"],[1,14120,"**"],[-1,14136,"**"],[1,14141,"**"],[-1,14187,"**"],[1,14192,"**"],[1,14246,"\n\n\n"],[-1,14378,"\n\n\n"],[1,14397,"在A之"],[1,14525,""],[-1,14525,"在A之"],[1,14656,"•首先"],[-1,14658,"首先是"],[1,14755,"\n\ni"],[-1,14775,"\n\ni"],[1,20199,"###"],[-1,20203,"###"],[1,20207,"循环链"],[-1,20211,"循环链"]],[20214,20214],[13766,13766]]],[1559010784820,["GJX@GJXAIOU",[[1,20473,"（）"]],[20473,20473],[20475,20475]]],[1559010787984,["GJX@GJXAIOU",[[1,20474,"头结点"]],[20474,20474],[20477,20477]]],[1559011656277,[null,[[-1,13766,""],[1,13766,"无指向"],[-1,13832,"\nSt"],[-1,13839,"a"],[1,13840,"\n"],[1,13894,"Sta"],[-1,13928,"\n"],[1,13932,"  "],[-1,13934,"  "],[1,13936,"t"],[-1,13941,"\nfo  "],[1,13946,"  for"],[-1,13974,"\nsp"],[1,13979,"spa"],[-1,13998,"\nsp  "],[1,14003,"  spa"],[-1,14025,"\n\nr"],[-1,14054,"e"],[1,14055,"\n"],[1,14057,"ret"],[-1,14065,"\n"],[-1,14068,"我们"],[-1,14073,"对"],[1,14074,"\n"],[1,14076,"我们对"],[1,14107,"**"],[-1,14115,"**"],[1,14133,"**"],[-1,14136,"**"],[1,14184,"**"],[-1,14187,"**"],[-1,14243,"\n\n\n"],[1,14378,"\n\n\n"],[-1,14394,"在A之"],[-1,14525,""],[1,14525,"在A之"],[-1,14653,"•首先"],[1,14658,"首先是"],[-1,14752,"\n\ni"],[1,14775,"\n\ni"],[-1,20196,"###"],[1,20203,"###"],[-1,20204,"循环链"],[1,20211,"循环链"],[-1,20470,"。\n\n"],[1,20478,"。\n\n"]],[13766,13766],[20481,20481]]],[1559011656277,[null,[[1,13766,""],[-1,13766,"无指向"],[1,13835,"\nSt"],[1,13839,"a"],[-1,13839,"\n"],[-1,13894,"Sta"],[1,13931,"\n"],[-1,13934,"  "],[1,13938,"  "],[-1,13938,"t"],[1,13944,"\nfo  "],[-1,13944,"  for"],[1,13977,"\nsp"],[-1,13979,"spa"],[1,14001,"\nsp  "],[-1,14001,"  spa"],[1,14028,"\n\nr"],[1,14054,"e"],[-1,14054,"\n"],[-1,14057,"ret"],[1,14068,"\n"],[1,14070,"我们"],[1,14073,"对"],[-1,14073,"\n"],[-1,14076,"我们对"],[-1,14110,"**"],[1,14120,"**"],[-1,14136,"**"],[1,14141,"**"],[-1,14187,"**"],[1,14192,"**"],[1,14246,"\n\n\n"],[-1,14378,"\n\n\n"],[1,14397,"在A之"],[1,14525,""],[-1,14525,"在A之"],[1,14656,"•首先"],[-1,14658,"首先是"],[1,14755,"\n\ni"],[-1,14775,"\n\ni"],[1,20199,"###"],[-1,20203,"###"],[1,20207,"循环链"],[-1,20211,"循环链"],[1,20473,"。\n\n"],[-1,20478,"。\n\n"]],[20481,20481],[13766,13766]]],[1559011631244,["GJX@GJXAIOU",[[1,20374,"\n"]],[20373,20373],[20374,20374]]],[1559011631554,["GJX@GJXAIOU",[[1,20375,"\n"]],[20374,20374],[20375,20375]]],[1559011646308,["GJX@GJXAIOU",[[1,20374,"[单链表的尾指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8C%87%E9%92%88.bmp)"]],[20374,20374],[20463,20463]]],[1559011655739,["GJX@GJXAIOU",[[-1,20374,"[单链表的尾指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8C%87%E9%92%88.bmp)"]],[20374,20462],[20374,20374]]],[1559011716292,[null,[[-1,13766,""],[1,13766,"无指向"],[-1,13832,"\nSt"],[-1,13839,"a"],[1,13840,"\n"],[1,13894,"Sta"],[-1,13928,"\n"],[1,13932,"  "],[-1,13934,"  "],[1,13936,"t"],[-1,13941,"\nfo  "],[1,13946,"  for"],[-1,13974,"\nsp"],[1,13979,"spa"],[-1,13998,"\nsp  "],[1,14003,"  spa"],[-1,14025,"\n\nr"],[-1,14054,"e"],[1,14055,"\n"],[1,14057,"ret"],[-1,14065,"\n"],[-1,14068,"我们"],[-1,14073,"对"],[1,14074,"\n"],[1,14076,"我们对"],[1,14107,"**"],[-1,14115,"**"],[1,14133,"**"],[-1,14136,"**"],[1,14184,"**"],[-1,14187,"**"],[-1,14243,"\n\n\n"],[1,14378,"\n\n\n"],[-1,14394,"在A之"],[-1,14525,""],[1,14525,"在A之"],[-1,14653,"•首先"],[1,14658,"首先是"],[-1,14752,"\n\ni"],[1,14775,"\n\ni"],[-1,20196,"###"],[1,20203,"###"],[-1,20204,"循环链"],[1,20211,"循环链"],[1,20371,"\n\n"],[-1,20374,"\n\n"],[-1,20472,"。\n\n"],[1,20480,"。\n\n"]],[13766,13766],[20483,20483]]],[1559011716292,[null,[[1,13766,""],[-1,13766,"无指向"],[1,13835,"\nSt"],[1,13839,"a"],[-1,13839,"\n"],[-1,13894,"Sta"],[1,13931,"\n"],[-1,13934,"  "],[1,13938,"  "],[-1,13938,"t"],[1,13944,"\nfo  "],[-1,13944,"  for"],[1,13977,"\nsp"],[-1,13979,"spa"],[1,14001,"\nsp  "],[-1,14001,"  spa"],[1,14028,"\n\nr"],[1,14054,"e"],[-1,14054,"\n"],[-1,14057,"ret"],[1,14068,"\n"],[1,14070,"我们"],[1,14073,"对"],[-1,14073,"\n"],[-1,14076,"我们对"],[-1,14110,"**"],[1,14120,"**"],[-1,14136,"**"],[1,14141,"**"],[-1,14187,"**"],[1,14192,"**"],[1,14246,"\n\n\n"],[-1,14378,"\n\n\n"],[1,14397,"在A之"],[1,14525,""],[-1,14525,"在A之"],[1,14656,"•首先"],[-1,14658,"首先是"],[1,14755,"\n\ni"],[-1,14775,"\n\ni"],[1,20199,"###"],[-1,20203,"###"],[1,20207,"循环链"],[-1,20211,"循环链"],[-1,20374,"\n\n"],[1,20379,"\n\n"],[1,20475,"。\n\n"],[-1,20480,"。\n\n"]],[20483,20483],[13766,13766]]],[1559011675840,["GJX@GJXAIOU",[[1,20374,"![单链表的尾指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8C%87%E9%92%88.jpg)"]],[20374,20374],[20464,20464]]],[1559012676308,[null,[[-1,13766,""],[1,13766,"无指向"],[-1,13832,"\nSt"],[-1,13839,"a"],[1,13840,"\n"],[1,13894,"Sta"],[-1,13928,"\n"],[1,13932,"  "],[-1,13934,"  "],[1,13936,"t"],[-1,13941,"\nfo  "],[1,13946,"  for"],[-1,13974,"\nsp"],[1,13979,"spa"],[-1,13998,"\nsp  "],[1,14003,"  spa"],[-1,14025,"\n\nr"],[-1,14054,"e"],[1,14055,"\n"],[1,14057,"ret"],[-1,14065,"\n"],[-1,14068,"我们"],[-1,14073,"对"],[1,14074,"\n"],[1,14076,"我们对"],[1,14107,"**"],[-1,14115,"**"],[1,14133,"**"],[-1,14136,"**"],[1,14184,"**"],[-1,14187,"**"],[-1,14243,"\n\n\n"],[1,14378,"\n\n\n"],[-1,14394,"在A之"],[-1,14525,""],[1,14525,"在A之"],[-1,14653,"•首先"],[1,14658,"首先是"],[-1,14752,"\n\ni"],[1,14775,"\n\ni"],[-1,20196,"###"],[1,20203,"###"],[-1,20204,"循环链"],[1,20211,"循环链"],[-1,20371,"•注："],[1,20465,"•注："],[-1,20561,"。\n\n"],[1,20569,"。\n\n"]],[13766,13766],[20572,20572]]],[1559012676308,[null,[[1,13766,""],[-1,13766,"无指向"],[1,13835,"\nSt"],[1,13839,"a"],[-1,13839,"\n"],[-1,13894,"Sta"],[1,13931,"\n"],[-1,13934,"  "],[1,13938,"  "],[-1,13938,"t"],[1,13944,"\nfo  "],[-1,13944,"  for"],[1,13977,"\nsp"],[-1,13979,"spa"],[1,14001,"\nsp  "],[-1,14001,"  spa"],[1,14028,"\n\nr"],[1,14054,"e"],[-1,14054,"\n"],[-1,14057,"ret"],[1,14068,"\n"],[1,14070,"我们"],[1,14073,"对"],[-1,14073,"\n"],[-1,14076,"我们对"],[-1,14110,"**"],[1,14120,"**"],[-1,14136,"**"],[1,14141,"**"],[-1,14187,"**"],[1,14192,"**"],[1,14246,"\n\n\n"],[-1,14378,"\n\n\n"],[1,14397,"在A之"],[1,14525,""],[-1,14525,"在A之"],[1,14656,"•首先"],[-1,14658,"首先是"],[1,14755,"\n\ni"],[-1,14775,"\n\ni"],[1,20199,"###"],[-1,20203,"###"],[1,20207,"循环链"],[-1,20211,"循环链"],[1,20374,"•注："],[-1,20465,"•注："],[1,20564,"。\n\n"],[-1,20569,"。\n\n"]],[20572,20572],[13766,13766]]],[1559012619392,["GJX@GJXAIOU",[[-1,13323," "]],[13324,13324],[13323,13323]]],[1559012625234,["GJX@GJXAIOU",[[1,13314,"**"],[1,13347,"**"]],[13314,13347],[13314,13351]]],[1559012639266,["GJX@GJXAIOU",[[-1,13337,"师兄那"]],[13340,13340],[13337,13337]]],[1559012642191,["GJX@GJXAIOU",[[1,13337,"实现"]],[13337,13337],[13339,13339]]],[1559017776387,[null,[[-1,13768,""],[1,13768,"无指向"],[-1,13834,"\nSt"],[-1,13841,"a"],[1,13842,"\n"],[1,13896,"Sta"],[-1,13930,"\n"],[1,13934,"  "],[-1,13936,"  "],[1,13938,"t"],[-1,13943,"\nfo  "],[1,13948,"  for"],[-1,13976,"\nsp"],[1,13981,"spa"],[-1,14000,"\nsp  "],[1,14005,"  spa"],[-1,14027,"\n\nr"],[-1,14056,"e"],[1,14057,"\n"],[1,14059,"ret"],[-1,14067,"\n"],[-1,14070,"我们"],[-1,14075,"对"],[1,14076,"\n"],[1,14078,"我们对"],[1,14109,"**"],[-1,14117,"**"],[1,14135,"**"],[-1,14138,"**"],[1,14186,"**"],[-1,14189,"**"],[-1,14245,"\n\n\n"],[1,14380,"\n\n\n"],[-1,14396,"在A之"],[-1,14527,""],[1,14527,"在A之"],[-1,14655,"•首先"],[1,14660,"首先是"],[-1,14754,"\n\ni"],[1,14777,"\n\ni"],[-1,20198,"###"],[1,20205,"###"],[-1,20206,"循环链"],[1,20213,"循环链"],[-1,20373,"•注："],[1,20467,"•注："],[-1,20563,"。\n\n"],[1,20571,"。\n\n"]],[13768,13768],[20574,20574]]],[1559017776387,[null,[[1,13768,""],[-1,13768,"无指向"],[1,13837,"\nSt"],[1,13841,"a"],[-1,13841,"\n"],[-1,13896,"Sta"],[1,13933,"\n"],[-1,13936,"  "],[1,13940,"  "],[-1,13940,"t"],[1,13946,"\nfo  "],[-1,13946,"  for"],[1,13979,"\nsp"],[-1,13981,"spa"],[1,14003,"\nsp  "],[-1,14003,"  spa"],[1,14030,"\n\nr"],[1,14056,"e"],[-1,14056,"\n"],[-1,14059,"ret"],[1,14070,"\n"],[1,14072,"我们"],[1,14075,"对"],[-1,14075,"\n"],[-1,14078,"我们对"],[-1,14112,"**"],[1,14122,"**"],[-1,14138,"**"],[1,14143,"**"],[-1,14189,"**"],[1,14194,"**"],[1,14248,"\n\n\n"],[-1,14380,"\n\n\n"],[1,14399,"在A之"],[1,14527,""],[-1,14527,"在A之"],[1,14658,"•首先"],[-1,14660,"首先是"],[1,14757,"\n\ni"],[-1,14777,"\n\ni"],[1,20201,"###"],[-1,20205,"###"],[1,20209,"循环链"],[-1,20213,"循环链"],[1,20376,"•注："],[-1,20467,"•注："],[1,20566,"。\n\n"],[-1,20571,"。\n\n"]],[20574,20574],[13768,13768]]],[1559017746290,["GJX@GJXAIOU",[[1,13527,"**"],[1,13554,"**"]],[13527,13554],[13527,13558]]],[1559017750222,["GJX@GJXAIOU",[[1,13578,"**"],[1,13601,"**"]],[13578,13601],[13578,13605]]],[1559018136392,[null,[[-1,13776,""],[1,13776,"无指向"],[-1,13842,"\nSt"],[-1,13849,"a"],[1,13850,"\n"],[1,13904,"Sta"],[-1,13938,"\n"],[1,13942,"  "],[-1,13944,"  "],[1,13946,"t"],[-1,13951,"\nfo  "],[1,13956,"  for"],[-1,13984,"\nsp"],[1,13989,"spa"],[-1,14008,"\nsp  "],[1,14013,"  spa"],[-1,14035,"\n\nr"],[-1,14064,"e"],[1,14065,"\n"],[1,14067,"ret"],[-1,14075,"\n"],[-1,14078,"我们"],[-1,14083,"对"],[1,14084,"\n"],[1,14086,"我们对"],[1,14117,"**"],[-1,14125,"**"],[1,14143,"**"],[-1,14146,"**"],[1,14194,"**"],[-1,14197,"**"],[-1,14253,"\n\n\n"],[1,14388,"\n\n\n"],[-1,14404,"在A之"],[-1,14535,""],[1,14535,"在A之"],[-1,14663,"•首先"],[1,14668,"首先是"],[-1,14762,"\n\ni"],[1,14785,"\n\ni"],[-1,20206,"###"],[1,20213,"###"],[-1,20214,"循环链"],[1,20221,"循环链"],[-1,20381,"•注："],[1,20475,"•注："],[-1,20571,"。\n\n"],[1,20579,"。\n\n"]],[13776,13776],[20582,20582]]],[1559018136392,[null,[[1,13776,""],[-1,13776,"无指向"],[1,13845,"\nSt"],[1,13849,"a"],[-1,13849,"\n"],[-1,13904,"Sta"],[1,13941,"\n"],[-1,13944,"  "],[1,13948,"  "],[-1,13948,"t"],[1,13954,"\nfo  "],[-1,13954,"  for"],[1,13987,"\nsp"],[-1,13989,"spa"],[1,14011,"\nsp  "],[-1,14011,"  spa"],[1,14038,"\n\nr"],[1,14064,"e"],[-1,14064,"\n"],[-1,14067,"ret"],[1,14078,"\n"],[1,14080,"我们"],[1,14083,"对"],[-1,14083,"\n"],[-1,14086,"我们对"],[-1,14120,"**"],[1,14130,"**"],[-1,14146,"**"],[1,14151,"**"],[-1,14197,"**"],[1,14202,"**"],[1,14256,"\n\n\n"],[-1,14388,"\n\n\n"],[1,14407,"在A之"],[1,14535,""],[-1,14535,"在A之"],[1,14666,"•首先"],[-1,14668,"首先是"],[1,14765,"\n\ni"],[-1,14785,"\n\ni"],[1,20209,"###"],[-1,20213,"###"],[1,20217,"循环链"],[-1,20221,"循环链"],[1,20384,"•注："],[-1,20475,"•注："],[1,20574,"。\n\n"],[-1,20579,"。\n\n"]],[20582,20582],[13776,13776]]],[1559018097570,["GJX@GJXAIOU",[[1,14915,"、、"]],[14915,14915],[14917,14917]]],[1559018098841,["GJX@GJXAIOU",[[-1,14915,"、、"]],[14917,14917],[14915,14915]]],[1559018101143,["GJX@GJXAIOU",[[1,14915,"// "]],[14915,14915],[14918,14918]]],[1559018103198,["GJX@GJXAIOU",[[1,14915," "]],[14915,14915],[14916,14916]]],[1559018105452,["GJX@GJXAIOU",[[1,14918,"zhe"]],[14918,14918],[14921,14921]]],[1559018107128,["GJX@GJXAIOU",[[-1,14918,"zhe"]],[14921,14921],[14918,14918]]],[1559018113322,["GJX@GJXAIOU",[[1,14918,"这里的ijiushi"]],[14918,14918],[14928,14928]]],[1559018115685,["GJX@GJXAIOU",[[-1,14921,"ijiushi"]],[14928,14928],[14921,14921]]],[1559018119652,["GJX@GJXAIOU",[[1,14921,"ijiushi"]],[14921,14921],[14928,14928]]],[1559018123568,["GJX@GJXAIOU",[[-1,14922,"jiushi"]],[14928,14928],[14922,14922]]],[1559018130776,["GJX@GJXAIOU",[[1,14922,"就是可以插入的位置"]],[14922,14922],[14931,14931]]],[1559018196392,[null,[[-1,13776,""],[1,13776,"无指向"],[-1,13842,"\nSt"],[-1,13849,"a"],[1,13850,"\n"],[1,13904,"Sta"],[-1,13938,"\n"],[1,13942,"  "],[-1,13944,"  "],[1,13946,"t"],[-1,13951,"\nfo  "],[1,13956,"  for"],[-1,13984,"\nsp"],[1,13989,"spa"],[-1,14008,"\nsp  "],[1,14013,"  spa"],[-1,14035,"\n\nr"],[-1,14064,"e"],[1,14065,"\n"],[1,14067,"ret"],[-1,14075,"\n"],[-1,14078,"我们"],[-1,14083,"对"],[1,14084,"\n"],[1,14086,"我们对"],[1,14117,"**"],[-1,14125,"**"],[1,14143,"**"],[-1,14146,"**"],[1,14194,"**"],[-1,14197,"**"],[-1,14253,"\n\n\n"],[1,14388,"\n\n\n"],[-1,14404,"在A之"],[-1,14535,""],[1,14535,"在A之"],[-1,14663,"•首先"],[1,14668,"首先是"],[-1,14762,"\n\ni"],[1,14785,"\n\ni"],[-1,14912,"\n\n}"],[1,14932,"\n\n}"],[-1,20223,"###"],[1,20230,"###"],[-1,20231,"循环链"],[1,20238,"循环链"],[-1,20398,"•注："],[1,20492,"•注："],[-1,20588,"。\n\n"],[1,20596,"。\n\n"]],[13776,13776],[20599,20599]]],[1559018196392,[null,[[1,13776,""],[-1,13776,"无指向"],[1,13845,"\nSt"],[1,13849,"a"],[-1,13849,"\n"],[-1,13904,"Sta"],[1,13941,"\n"],[-1,13944,"  "],[1,13948,"  "],[-1,13948,"t"],[1,13954,"\nfo  "],[-1,13954,"  for"],[1,13987,"\nsp"],[-1,13989,"spa"],[1,14011,"\nsp  "],[-1,14011,"  spa"],[1,14038,"\n\nr"],[1,14064,"e"],[-1,14064,"\n"],[-1,14067,"ret"],[1,14078,"\n"],[1,14080,"我们"],[1,14083,"对"],[-1,14083,"\n"],[-1,14086,"我们对"],[-1,14120,"**"],[1,14130,"**"],[-1,14146,"**"],[1,14151,"**"],[-1,14197,"**"],[1,14202,"**"],[1,14256,"\n\n\n"],[-1,14388,"\n\n\n"],[1,14407,"在A之"],[1,14535,""],[-1,14535,"在A之"],[1,14666,"•首先"],[-1,14668,"首先是"],[1,14765,"\n\ni"],[-1,14785,"\n\ni"],[1,14915,"\n\n}"],[-1,14932,"\n\n}"],[1,20226,"###"],[-1,20230,"###"],[1,20234,"循环链"],[-1,20238,"循环链"],[1,20401,"•注："],[-1,20492,"•注："],[1,20591,"。\n\n"],[-1,20596,"。\n\n"]],[20599,20599],[13776,13776]]],[1559018138180,["GJX@GJXAIOU",[[1,14931,"，"]],[14931,14931],[14932,14932]]],[1559018144676,["GJX@GJXAIOU",[[-1,14931,"，"]],[14932,14932],[14931,14931]]],[1559018162575,["GJX@GJXAIOU",[[1,14931,"，相当于分配为"]],[14931,14931],[14938,14938]]],[1559018163493,["GJX@GJXAIOU",[[-1,14937,"为"]],[14938,14938],[14937,14937]]],[1559018165591,["GJX@GJXAIOU",[[1,14937,"位置I"]],[14937,14937],[14940,14940]]],[1559018166445,["GJX@GJXAIOU",[[-1,14939,"I"]],[14940,14940],[14939,14939]]],[1559018169471,["GJX@GJXAIOU",[[1,14939,"i共"]],[14939,14939],[14941,14941]]],[1559018170048,["GJX@GJXAIOU",[[-1,14940,"共"]],[14941,14941],[14940,14940]]],[1559018173375,["GJX@GJXAIOU",[[1,14940,"供使用；"]],[14940,14940],[14944,14944]]],[1559018556399,[null,[[-1,13776,""],[1,13776,"无指向"],[-1,13842,"\nSt"],[-1,13849,"a"],[1,13850,"\n"],[1,13904,"Sta"],[-1,13938,"\n"],[1,13942,"  "],[-1,13944,"  "],[1,13946,"t"],[-1,13951,"\nfo  "],[1,13956,"  for"],[-1,13984,"\nsp"],[1,13989,"spa"],[-1,14008,"\nsp  "],[1,14013,"  spa"],[-1,14035,"\n\nr"],[-1,14064,"e"],[1,14065,"\n"],[1,14067,"ret"],[-1,14075,"\n"],[-1,14078,"我们"],[-1,14083,"对"],[1,14084,"\n"],[1,14086,"我们对"],[1,14117,"**"],[-1,14125,"**"],[1,14143,"**"],[-1,14146,"**"],[1,14194,"**"],[-1,14197,"**"],[-1,14253,"\n\n\n"],[1,14388,"\n\n\n"],[-1,14404,"在A之"],[-1,14535,""],[1,14535,"在A之"],[-1,14663,"•首先"],[1,14668,"首先是"],[-1,14762,"\n\ni"],[1,14785,"\n\ni"],[-1,14912,"\n\n}"],[1,14945,"\n\n}"],[-1,20236,"###"],[1,20243,"###"],[-1,20244,"循环链"],[1,20251,"循环链"],[-1,20411,"•注："],[1,20505,"•注："],[-1,20601,"。\n\n"],[1,20609,"。\n\n"]],[13776,13776],[20612,20612]]],[1559018556399,[null,[[1,13776,""],[-1,13776,"无指向"],[1,13845,"\nSt"],[1,13849,"a"],[-1,13849,"\n"],[-1,13904,"Sta"],[1,13941,"\n"],[-1,13944,"  "],[1,13948,"  "],[-1,13948,"t"],[1,13954,"\nfo  "],[-1,13954,"  for"],[1,13987,"\nsp"],[-1,13989,"spa"],[1,14011,"\nsp  "],[-1,14011,"  spa"],[1,14038,"\n\nr"],[1,14064,"e"],[-1,14064,"\n"],[-1,14067,"ret"],[1,14078,"\n"],[1,14080,"我们"],[1,14083,"对"],[-1,14083,"\n"],[-1,14086,"我们对"],[-1,14120,"**"],[1,14130,"**"],[-1,14146,"**"],[1,14151,"**"],[-1,14197,"**"],[1,14202,"**"],[1,14256,"\n\n\n"],[-1,14388,"\n\n\n"],[1,14407,"在A之"],[1,14535,""],[-1,14535,"在A之"],[1,14666,"•首先"],[-1,14668,"首先是"],[1,14765,"\n\ni"],[-1,14785,"\n\ni"],[1,14915,"\n\n}"],[-1,14945,"\n\n}"],[1,20239,"###"],[-1,20243,"###"],[1,20247,"循环链"],[-1,20251,"循环链"],[1,20414,"•注："],[-1,20505,"•注："],[1,20604,"。\n\n"],[-1,20609,"。\n\n"]],[20612,20612],[13776,13776]]],[1559018532732,["GJX@GJXAIOU",[[1,15380,"    "]],[15380,15380],[15384,15384]]],[1559023296506,[null,[[-1,13776,""],[1,13776,"无指向"],[-1,13842,"\nSt"],[-1,13849,"a"],[1,13850,"\n"],[1,13904,"Sta"],[-1,13938,"\n"],[1,13942,"  "],[-1,13944,"  "],[1,13946,"t"],[-1,13951,"\nfo  "],[1,13956,"  for"],[-1,13984,"\nsp"],[1,13989,"spa"],[-1,14008,"\nsp  "],[1,14013,"  spa"],[-1,14035,"\n\nr"],[-1,14064,"e"],[1,14065,"\n"],[1,14067,"ret"],[-1,14075,"\n"],[-1,14078,"我们"],[-1,14083,"对"],[1,14084,"\n"],[1,14086,"我们对"],[1,14117,"**"],[-1,14125,"**"],[1,14143,"**"],[-1,14146,"**"],[1,14194,"**"],[-1,14197,"**"],[-1,14253,"\n\n\n"],[1,14388,"\n\n\n"],[-1,14404,"在A之"],[-1,14535,""],[1,14535,"在A之"],[-1,14663,"•首先"],[1,14668,"首先是"],[-1,14762,"\n\ni"],[1,14785,"\n\ni"],[-1,14912,"\n\n}"],[1,14945,"\n\n}"],[-1,15377,"\n"],[1,15382,"\n"],[-1,20240,"###"],[1,20247,"###"],[-1,20248,"循环链"],[1,20255,"循环链"],[-1,20415,"•注："],[1,20509,"•注："],[-1,20605,"。\n\n"],[1,20613,"。\n\n"]],[13776,13776],[20616,20616]]],[1559023296506,[null,[[1,13776,""],[-1,13776,"无指向"],[1,13845,"\nSt"],[1,13849,"a"],[-1,13849,"\n"],[-1,13904,"Sta"],[1,13941,"\n"],[-1,13944,"  "],[1,13948,"  "],[-1,13948,"t"],[1,13954,"\nfo  "],[-1,13954,"  for"],[1,13987,"\nsp"],[-1,13989,"spa"],[1,14011,"\nsp  "],[-1,14011,"  spa"],[1,14038,"\n\nr"],[1,14064,"e"],[-1,14064,"\n"],[-1,14067,"ret"],[1,14078,"\n"],[1,14080,"我们"],[1,14083,"对"],[-1,14083,"\n"],[-1,14086,"我们对"],[-1,14120,"**"],[1,14130,"**"],[-1,14146,"**"],[1,14151,"**"],[-1,14197,"**"],[1,14202,"**"],[1,14256,"\n\n\n"],[-1,14388,"\n\n\n"],[1,14407,"在A之"],[1,14535,""],[-1,14535,"在A之"],[1,14666,"•首先"],[-1,14668,"首先是"],[1,14765,"\n\ni"],[-1,14785,"\n\ni"],[1,14915,"\n\n}"],[-1,14945,"\n\n}"],[1,15380,"\n"],[-1,15384,"\n"],[1,20243,"###"],[-1,20247,"###"],[1,20251,"循环链"],[-1,20255,"循环链"],[1,20418,"•注："],[-1,20509,"•注："],[1,20608,"。\n\n"],[-1,20613,"。\n\n"]],[20616,20616],[13776,13776]]],[1559023259388,["GJX@GJXAIOU",[[1,16300," "]],[16300,16300],[16301,16301]]]],null,"GJX@GJXAIOU"],["a1c6af1b-06da-47d2-a9e8-21d8c2e75a63",1566520424733,"---\ntags:\n  - 数据结构\nflag: blue\nstyle: summer\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：   \n3.数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合； \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；相当于一种一对多的关系；    \n    - 图形结构：多对多结构；\n       \n![图形结构示例]($resource/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg)\n\n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n**逻辑结构式面向问题的，物理结构是面向计算机的；**\n![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)\n\n\n---\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性（算法的每一步都能够通过执行有限次数完成）      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性（对于程序输入的数据进行判断是否合法，不合法时候进行相关的处理，而不是产生异常或者错误）\n* 时间效率高和存储量低；     \n\n\n\n\n---\n\n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：**T(n)=O(f(n))** 。 它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1) ：常数阶\n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n同样：当初的分支结构（不在循环中）的时间复杂度也是O(1);\n    \n(2)时间复杂度O(n)   ：线性阶\n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  ：平方阶\n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      直接从i = 1开始；\n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的即是元素之间是有顺序的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    实现线性表A与B的合并操作；我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;  //声明与La和Lb相同的数据元素e*;\n    La_len = ListLength(*La); //得到线性表的长度；  \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   //从Lb中挨个获取元素并且放入e中；即将Lb中i元素赋值给e；\n        if( !LocateElem(*La, e) )    //如果La中不存在e这个元素；\n        {   \n            ListInsert(La, ++La_len, e);   //将这个元素插入；\n        }     \n    }     \n    \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。 不变 \n      3.线性表的当前长度：length。   变\n```c\n#define MAXSIZE 20  //存储空间的初始分配量\ntypedef int ElemType; //Elemtype类型根据实际情况而定，这里假设为int\ntypedef struct\n{\n  ElemType data[MAXSIZE]; //数组存储数据元素，最大值为MAXSIZE\n  int length;  //线性表当前长度\n}SqList\n```\n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；  \n      3.线性表的第i个元素要存储在数组下标为i-1的位置； \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n###       3.5 顺序存储结构的插入和删除\n#### 3.获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - **缺点**：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** **首先没有定义表长，不能用for**，而且读取的时间复杂度最差为O（n）.核心思想：工作指针后移\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;//这里的p指向的是线性表的头结点\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 3.9 单链表的整表创建\n头插法和尾插法\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n//程序中的结点中的数值都是随机生成的；\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n//以上生成了一个空链表；\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;  //随机生成0-100之间的数字\n        r->next = p;   //将表尾终端结点的指针指向新结点\n        r = p;        // 将当前新结点定义为表尾终端结点\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 3.10单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next; //p指向链表的第一个结点\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n\n\n\n\n\n\n\n\n### 静态链表\n**实际上是为了给没有指针的高级语言设计的一种实现单链表能力的方法；**\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，**游标的第一个数值表示数组中第一个没有存放数据元素的下标**，（图中下标为5的数据域没有存放数据），**游标的最后一个值表示第一个存放数据的元素的下标**，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n```c\n//线性表的静态链表存储结构\n\n#define MAXSIZE 1000\ntypedef  struct\n{\n  ElemType data; // 数据\n  int cur; // 游标（Cursor）,当为0时候表示无指向\n} Component, StaticLinkList[MAXSIZE];\n```\n\n\n•对静态链表进行初始化相当于初始化数组：\n```c\n//将一维数组space中各分量链成一备用链表\n//*space[0].cur 为头指针，\"0\"表示空指针\nStatus InitList(StaticLinkList space)\n{\n  int  i;\n  for( i=0; i < MAXSIZE-1; i++ )\n  space[i].cur = i + 1;\n  space[MAXSIZE-1].cur = 0;//目前静态链表为空，所以最后一个元素的cur为0；\n  return OK;\n}\n```\n**我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据**。\n\n**我们通常把未使用的数组元素称为备用链表**。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n**数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。**\n![静态链表的存储结构示例]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.jpg)\n\n\n####  静态链表的插入操作\n\n因为静态链表中无法实现像动态链表中的malloc和free，需要自行实现，同时需要判断数组中哪些分量未被使用过，解决办法：将所有未被使用过的及其已经被删除的分量用游标链接成一个备用的链表，进行插入的是时候，就从备用链表中选取一个结点作为待插入的新节点。\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n//首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5//相当于返回第一个备用空闲分量的下标；\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i; //这里的i就是可以插入的位置，相当于分配位置i供使用； \n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;    \n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n– 在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n\n\n\n\n### 3.13循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n![单链表的尾指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8C%87%E9%92%88.jpg)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head（头结点）。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n魔术师发牌问题：\n使用单项循环链表：\n•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？\n```java\n#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}\n```\n\n\n### 双向链表\n\n#### 双向链表结点结构\n```c\ntypedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;\n\n   ![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)\n\n#### 双向链表的循环链表\n![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n\n\n\n#### 双向链表的插入操作\n```c\n–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;\n```\n\n![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n\n\n#### 双向链表的删除操作\n\n```c\n–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);\n```\n![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间\n\n\n\n### 魔术师发牌问题\n\n```c\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n\n```\n\n视频版本\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1566520403768,["GJX@GJXAIOU",[[-1,564,"![链式存储结构示意图]($resource/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg)"]],[564,646],[564,564]]],[1566520404829,["GJX@GJXAIOU",[[-1,566,"\n"]],[566,566],[565,565]]],[1566520405109,["GJX@GJXAIOU",[[-1,565,"\n"]],[565,565],[564,564]]],[1566520408198,["GJX@GJXAIOU",[[-1,895,"\n"]],[894,894],[893,893]]],[1566520408591,["GJX@GJXAIOU",[[-1,894,"\n"]],[893,893],[892,892]]],[1566520410565,["GJX@GJXAIOU",[[-1,893,"\n"]],[893,893],[892,892]]],[1566520412853,["GJX@GJXAIOU",[[-1,571,"\n"]],[570,570],[569,569]]],[1566520416165,["GJX@GJXAIOU",[[-1,565,"---"]],[565,568],[565,565]]],[1566520425693,["GJX@GJXAIOU",[[-1,304,"\n"]],[303,303],[302,302]]],[1566520427046,["GJX@GJXAIOU",[[-1,303,"\n"]],[303,303],[302,302]]],[1566520432311,["GJX@GJXAIOU",[[-1,832,"\n"]],[831,831],[830,830]]],[1566520433549,["GJX@GJXAIOU",[[-1,826,"---"]],[826,829],[826,826]]],[1566520434141,["GJX@GJXAIOU",[[-1,828,"\n"]],[826,826],[825,825]]],[1566520435109,["GJX@GJXAIOU",[[-1,827,"\n"]],[826,826],[825,825]]]],null,"GJX@GJXAIOU"],["e95ada38-cbea-4295-b61c-c99ee82ffc4d",1570708292537,"---\ntags:\n  - 数据结构\nflag: blue\nstyle: summer\n---\n@toc\n\n\n\n# 一、数据结构与算法概述     \n\n1、程序设计=数据结构+ 算法    \n2、数据结构分为逻辑结构与物理结构：   \n3.数据结构：是相互之间存在一种或者多种特定关系的数据元素的集合； \n\n- **逻辑结构：** 数据对象中数据元素之间的相互关系；\n    - 集合结构；仅仅属于一个集合的关系； 互相之间没有关系   \n    - 线性结构：一对一关系；     \n    - 树形结构：金字塔结构；相当于一种一对多的关系；    \n    - 图形结构：多对多结构；\n       \n- **物理结构：**  数据的逻辑结构在计算机中的存储形式； 如何将数据结构存储进计算机，一般针对内存。  \n    - 顺序存储 ：将数据元素存储在**地址连续**的存储单元中； 数据间存储结构与逻辑关系一致；  （例如数组）\n    - 链式存储素存储在任意的存储单元中，可以是连续的，也可以是不连续的；存储关系不能反映逻辑关系；\n\n**逻辑结构式面向问题的，物理结构是面向计算机的；**\n\n\n\n\n# 二、谈谈算法    \n1.**概念：**  算法是解决特定问题求解步骤的描述；    \n\n2.算法的五大特征：   \n输入（零个或者多个输入）、输出（至少一个输出）、有穷性、确定性、可行性（算法的每一步都能够通过执行有限次数完成）      \n\n3.算法设计要求：  \n* 正确性\n  * 算法程序没有语法错误。\n  * 算法程序对于合法输入能够产生满足要求的输出。\n  * 算法程序对于非法输入能够产生满足规格的说明。\n  * 算法程序对于故意刁难的测试输入都有满足要求的输出结果。\n* 可读性\n* 健壮性（对于程序输入的数据进行判断是否合法，不合法时候进行相关的处理，而不是产生异常或者错误）\n* 时间效率高和存储量低；     \n\n\n# 三、时间复杂度和空间复杂度 （算法效率的度量方法）    \n\n- 算法效率的取决因素\n  - 算法采用的策略、方案\n  - 编译产生的代码质量\n  - 问题的输入规模\n  - 机器执行指令的速度\n\n##  (一)时间复杂度    \n\n- **定义：**\n      在进行算法分析时， 语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量  。算法的时间复杂度。也就是算法的时间量度，记做：**T(n)=O(f(n))** 。 它表示随问题规模n的增大，算法执行时间的 **增长率** 和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。 其中f(n)是问题规模n的某个函数。\n\n **PS：**  简单的理解时间复杂度就是用来表示执行次数T(n)随问题规模n增加的变化趋势。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。  \n\n\n- **分析一个算法的时间复杂度步骤：**  \n1.用常数 1 取代运行时间中的所有加法常数。    \n2.再修改后的运行次数函数中，只保留最高阶项。    \n3.如果最高阶项存在且不是 1 ，则去除与这个项相乘的常数。           \n       \n\n- **常见函数调用的时间复杂性分析**    \n    \n （1）时间复杂度O(1) ：常数阶\n    \n```c\nint a=1,b=3,sum=0;//执行1次   \nsum=a+b;//执行1次   \ncout<<\"sum=\"<<sum<<endl;//执行1次   \n```\n同样：当初的分支结构（不在循环中）的时间复杂度也是O(1);\n    \n(2)时间复杂度O(n)   ：线性阶\n     一般含有非嵌套循环或者线性阶\n```c\nfor(int i = 0; i < n; i++)//执行n次\n{\n cout<<i<<endl;\n}   \n```\n\n（3）时间复杂度O(n^2)  ：平方阶\n```c\nfor(int i = 0; i < n; i++)//执行n^2次\n{\nfor(int j = 0; j < n; j++)\n     {\ncout<<i<<endl;\n    }\n}   \n```\n\n  **PS** 综上，我们可以看出，若每层嵌套的时间复杂度为O(n)，则n层嵌套的时间复杂度为O(nn)。\n\n\n（4）时间复杂度O(logn)  \n```c\n  int i=1;\n  while(i<n)\n  {\n    i=i*2;\n  }\n```\n  **PS** 由于每次执行i乘以2，当2x<n时结束循环。所以总共执行了`x=log2^n `次，所以其时间复杂度为`O(logn)`。\n\n \n![常见的时间复杂度]($resource/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg)\n\n- **常用的时间复杂度所耗费的时间**\n\n从小到大依次是：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)\n\n\n## (二)空间复杂度\n\n- **定义**\n算法的空间复杂度通过计算算法所需的存储空间实现，算法的空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n空间复杂度表示空间需求；\n\n默认为时间复杂度\n\n\n\n\n# 四、线性表 (第一个数据结构)   \n\n按照一定顺序排序的时候，只需要记住前后是谁即可；   \n\n## （一）定义       \n\n  1.**线性表（List）：** 由零个或多个数据元素组成的有限序列。  \n  \n  2.若将线性表记为（a1,…,ai-1,ai,ai+1,…an）,则表中ai-1领先于ai,ai领先于ai+1,称ai-1是ai的 **直接前驱元素**,ai+1是ai的 **直接后继元素**。      直接从i = 1开始；\n  \n  3.线性表元素的个数n(n>=0)定义为**线性表的长度**，当n=0时，称为**空表**。    \n\n\n**注**  这里需要强调几个关键的地方：    \n  1.首先它是一个序列，也就是说元素之间是有个先来后到的即是元素之间是有顺序的。    \n  \n  2.若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都**有且只有**一个前驱和后继。    \n  \n  3.另外，线性表强调是有限的，事实上无论计算机发展到多强大，它所处理的元素都是有限的。   \n\n\n\n## （二）抽象数据类型    \n\n- 数据类型：   \n    是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。例如整型、浮点型；    \n\n  **C语言**中数据类型包含两类：原子类型（不可再分的基本类型：例如整型）和结构类型（例如数组中含有多种数据类型）；   \n\n\n\n- 抽象数据类型（Abstract Data Type，ADT）  \n\n   - **概念：** 指一个数学模型及定义在该模型上的一组操作\n   （即将数据类型和操作进行捆绑； 定义仅取决与他的一组逻辑特性，与其在计算机内部怎么实现无关）  \n  \n   - **标准格式：**   (伪代码如下)\n```language\n    ADT 抽象数据类型名   \n    Data   \n    数据元素之间逻辑关系的定义   \n    Operation   \n    操作  \n    endADT  \n```\n    \n\n- 常用的操作        \n    \n | 函数 |作用  | \n | -----|----- |\n| InitList(*L):   | 初始化操作，建立一个空的线性表L。|\n| ListEmpty(L):  | 判断线性表是否为空表，若线性表为空，返回true，否则返回false。 |  \n| ClearList(*L): | 将线性表清空。|    \n|GetElem(L,i,*e): | 将线性表L中的第i个位置元素值返回给e。|    \nLocateElem(L,e):  |在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。   \n ListInsert(*L,i,e): | 在线性表L中第i个位置插入新元素e。   \nListDelete(*L,i,*e): | 删除线性表L中第i个位置元素，并用e返回其值。   \nListLength(L):  |返回线性表L的元素个数。     \n    \n    \n **exp:**   \n    实现线性表A与B的合并操作；我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。      \n```c\n    // La表示A集合，Lb表示B集合。   \n    void unionL(List *La, list Lb)   \n    {   \n    int La_len, Lb_len, i;   \n  \n    ElemType e;  //声明与La和Lb相同的数据元素e*;\n    La_len = ListLength(*La); //得到线性表的长度；  \n    Lb_len = ListLength(Lb);   \n\n    for( i=1; i <= Lb_len; i++ )   \n    {   \n        GetElem(Lb, i, &e);   //从Lb中挨个获取元素并且放入e中；即将Lb中i元素赋值给e；\n        if( !LocateElem(*La, e) )    //如果La中不存在e这个元素；\n        {   \n            ListInsert(La, ++La_len, e);   //将这个元素插入；\n        }     \n    }     \n    \n}     \n```\n\n\n## （三）线性表的存储结构  \n     \n### 顺序存储结构    \n\n-  **概念**：指的是用一段地址连续的存储单元依次存储线性表的数据元素。     \n\n-  **物理上的存储方式**：事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。   \n\n- **顺序存储结构封装需要三个属性**：   \n      1.存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。   \n      2.线性表的最大存储容量：数组的长度MaxSize。 不变 \n      3.线性表的当前长度：length。   变\n```c\n#define MAXSIZE 20  //存储空间的初始分配量\ntypedef int ElemType; //Elemtype类型根据实际情况而定，这里假设为int\ntypedef struct\n{\n  ElemType data[MAXSIZE]; //数组存储数据元素，最大值为MAXSIZE\n  int length;  //线性表当前长度\n}SqList\n```\n      \n- **注意**：\n      1.数组的长度与线性表的当前长度需要区分一下：数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会变化的。    \n      2.线性表开始位置为1；  \n      3.线性表的第i个元素要存储在数组下标为i-1的位置； \n  \n- **地址计算方式：**\n    1.假设ElemType占用的是c个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）：LOC(ai+1) = LOC(ai) + c    \n      \n    2.所以对于第i个数据元素ai的存储位置可以由a1推算得出：LOC(ai) = LOC(a1) + (i-1)*c    ；那么它的存储时间性能当然就为O(1)，我们通常称为**随机存储结构**。    \n      \n###       3.5 顺序存储结构的插入和删除\n#### 3.获取元素操作\n      实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。就程序而言非常简单了，我们只需要把数组第i-1下标的值返回即可。 代码见   \n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;\n\n// Status 是函数的类型，其值是函数结果状态代码，如OK等。\n// 初始条件：顺序线性表L已存在，1 <= i <= ListLength(L)\n// 操作结果：用e返回L中第i个数据元素的值。\n\nStatus GetElem(SqList L, int i, ElemType *e)//第一个为线性表，第二个为索引位置，第三个为存放位置\n{\n    if( L.length==0 || i<1 || i>L.length )\n    {\n        return ERROR;\n    }\n    *e = L.data[i-1];\n\n    return OK;\n}\n```\n  \n        \n#### 插入操作：  \n插入算法的思路：\n  - 如果插入位置不合理，抛出异常；\n  - 如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；\n  - 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；\n  - 将要插入元素填入位置i处；\n  - 线性表长+1\n\n ListInsert(*L, i, e)，即在线性表L中的第i个位置插入新元素e，代码见 \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L)。 */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L长度+1。*/\n\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n\n    if( L->length == MAXSIZE )  // 判断顺序线性表是否已经满了\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length+1)   // 当i（插入位置）不在范围内时\n    {\n        return ERROR;\n    }\n    if( i <= L->length )   // 若插入数据位置不在表尾，相当于插入位置合法\n    {\n        /* 将要插入位置后数据元素向后移动一位 */\n        for( k=L->length-1; k >= i-1; k-- )\n        {\n            L->data[k+1] = L->data[k];\n        }\n    }\n\n    L->data[i-1] = e;  // 将新元素插入\n    L->length++;\n\n    return OK;\n}\n```\n**PS：** 时间复杂度为O(n)  \n\n####  删除操作    \n   1.如果删除位置不合理，抛出异常；\n   2.取出删除元素；\n   3.从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；\n   4.表长-1。\n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k; \n\n    if( L->length == 0 )\n    {\n        return ERROR;\n    }\n    if( i<1 || i>L->length )\n    {\n        return ERROR;\n    }\n\n    *e = L->data[i-1];//数组从零开始\n\n    if( i < L->length )\n    {\n        for( k=i; k < L->length; k++ )\n        {\n            L->data[k-1] = L->data[k];\n        }\n    }\n\n    L->length--;\n\n    return OK;\n}\n```\n          \n**PS：** 时间复杂度为O(n)\n\n- 总结   \n  - 优点：\n1.无须为表示表中元素之间的逻辑关系而增加额外的存储空间。\n2.可以快速地存取表中任意位置的元素。\n\n  - **缺点**：\n1.插入和删除操作需要移动大量元素。\n2.当线性表长度变化较大时，难以确定存储空间的容量。\n3.容易造成存储空间的“碎片”     \n\n---\n\n### 链式存储结构      \n \n每个元素多用一个位置存放下一个元素的位置的指针；\n  - 特点：    \n      是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置。   \n  - 定义：   \n    **数据域：** 存储数据元素信息的域\n    **指针域：** 存储直接后继位置的域\n    **指针或链：** 指针域中存储的信息\n    **存储映像或结点(Node)：** 数据域和指针域这两部分信息组成数据元素\n**线性表(a1, a2, a3, …, an)的链式存储结构：** n个结点链接成一个链表。  \n**单链表：** 链表的每个结点中只包含一个指针域\n**头指针：** 链表中的第一个结点的存储位置\n**空（NULL）:** 最后一个结点指针\n  \n![单链表]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8.png)\n  \n**注：** 头指针和头结点的异同：   \n - 头指针：  \n     - **概念：** 指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。\n     - **作用：**   \n     1.具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）。\n    2.无论链表是否为空，头指针均不为空。\n    3.头指针是链表的必要元素。\n\n- 头结点：（数据域不存储任何信息）\n  - **作用：**  \n     1.头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。\n   2.有了头结点，对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了。\n   3.头结点不一定是链表的必须要素。   \n  \n    头指针指向头结点，头结点的数据域一般是空的，一般可以用于存储当前链表的长度；\n![单链表中的头结点与头指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%B4%E7%BB%93%E7%82%B9%E4%B8%8E%E5%A4%B4%E6%8C%87%E9%92%88.jpg)\n\n 可以使用C语言中的结构指针来描述单链表\n```c\ntypedef  struct Node\n\n{\n\nElemType data; // 数据域\n\nstruct Node* Next; // 指针域\n\n} Node;\n\ntypedef  struct Node* LinkList;  // LinkList相当于 Node*\n```\n\n\n\n\n**注：**  头指针指向头结点，头结点数据域可以空也可以存放当前列表的长度，头结点指向第一节点   \n\n\n### 单链表\n\n#### 单链表的读取  \n \n 获得链表第i个数据的算法思路：\n1.声明一个结点p指向链表第一个结点，初始化j从1开始；\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，返回结点p的数据。\n5.算法的C语言实现代码，GetElem.c   \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\ntypedef struct Node *LinkList;  // 定义链表LinkList ,使LinkList == struct Node*\n\nStatus GetElem( LinkList L, int i, ElemType *e )\n{\n    int j;\n    LinkList p;//LinkList即为一个列表，P为指针\n\n    p = L->next;// P指向链表L的第一个结点 \n    j = 1;\n\n    while( p && j<i )//P不能为空（到结尾即索引完了即为空），并且还没找到该元素\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    *e = p->data;\n\n    return OK;\n}\n\n```\n\n**注：** **首先没有定义表长，不能用for**，而且读取的时间复杂度最差为O（n）.核心思想：工作指针后移\n\n\n\n\n\n#### 单链表的插入   \n\n**exp：** 假设存储元素e的结点为s，要实现结点p、p->next和s之间逻辑关系的变化\n\n![单链表的插入]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.jpg)\n\n**代码实现：**   \n```c\ns->next = p->next;\np->next = s;\n```\n代码顺序不能更改；先连接后断开\n\n\n**单链表第i个数据插入结点的算法思路：**  \n1.声明一结点p指向链表头结点，初始化j从1开始；\n2.当j<1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，在系统中生成一个空结点s；\n5.将数据元素e赋值给s->data；\n6.单链表的插入刚才两个标准语句；\n7.返回成功。     \n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\n\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n\n    p = *L;//这里的p指向的是线性表的头结点\n    j = 1;\n\n    while( p && j<i )   // 用于寻找第i个结点，直到i时候 \n    {\n        p = p->next;\n        j++;\n    }\n\n    if( !p || j>i )\n    {\n        return ERROR;\n    }\n\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n\n\n\n    s->next = p->next;\n    p->next = s;\n\n    return OK;\n}\n```\n\n\n\n\n#### 单链表的删除   \n![单链表删除示例]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%A4%BA%E4%BE%8B.png)\n\n**代码实现：** \n~~~~  \np->next = p->next->next;\n\n或者q=p->next; p->next=q->next;  \n\n~~~~  \n\n\n\n**单链表的第i个数据删除节点的算法：**  \n1.声明结点p指向链表第一个结点，初始化j=1；\n2.当j<1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；\n3.若到链表末尾p为空，则说明第i个元素不存在；\n4.否则查找成功，将欲删除结点p->next赋值给q；\n5.单链表的删除标准语句p->next = q->next；\n6.将q结点中的数据赋值给e，作为返回；\n7.释放q结点。    \n\n```c\n/* 初始条件：顺序线性表L已存在，1<=i<=ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度-1 */\n\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n\n    p = *L;\n    j = 1;\n\n    while( p->next && j<i )\n    {\n        p = p->next;\n        ++j;\n    }\n\n    if( !(p->next) || j>i )\n    {\n        return ERROR;\n    }\n\n    q = p->next;\n    p->next = q->next;\n\n    *e = q->data;\n    free(q);\n\n    return OK;\n}\n```\n\n **注：** \n 1.插入和删除操作首先都是遍历找到第i个元素，然后实现插入和删除操作；其时间复杂度均为O（n）;   \n 2.从第i个位置连续插入10个元素：  \n 顺序存储：每次都要移动n-i个位置，每次的时间复杂度都是O（n）;  \n 单链表：第一次需要找到第i个位置的指针，为O（n）;接下来简单通过赋值移动指针即可，时间复杂度均为O（1）.      \n对于插入和删除操作较为频繁使用单链表\n\n\n\n\n#### 3.9 单链表的整表创建\n头插法和尾插法\n占用空间的大小和位置不需要预先分配划定，可以根据系统情况和实际需求划定；\n\n创建思路： \n* 声明一结点p和计数器变量i；\n* 初始化一空链表L；\n* 让L的头结点的指针指向NULL，即建立一个带头结点的单链表；\n* 循环实现后继结点的赋值和插入。\n\n\n\n\n- **头插法**  \n**概念：** 头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。\n\n**方案：** 简单来说，就是把新加进的元素放在表头后的第一个位置：\n先让新节点的next指向头节点之后\n然后让表头的next指向新节点   \n\n```cpp\n/* 头插法建立单链表示例 */\n//程序中的结点中的数值都是随机生成的；\nvoid CreateListHead(LinkList *L, int n)\n{\n    LinkList p;\n    int i;\n\n    srand(time(0));   // 初始化随机数函数，得到随机数\n\n    *L = (LinkList)malloc(sizeof(Node));\n    (*L)->next = NULL;\n//以上生成了一个空链表；\n    for( i=0; i < n; i++ )\n    {\n    // P是中介结点\n        p = (LinkList)malloc(sizeof(Node));  // 生成新结点\n        p->data = rand()%100+1;//rand()%100得到0-99\n        p->next = (*L)->next;\n        (*L)->next = p;\n    }\n}\n\n```\n**头插法中生成的链表中节点的次序和输入的顺序相反；**\n\n\n\n- **尾插法**\n\n```cpp\n/* 尾插法建立单链表演示 */\n\nvoid CreateListTail(LinkList *L, int n)\n{\n    LinkList p, r;\n    int i;\n\n    srand(time(0));\n    *L = (LinkList)malloc(sizeof(Node));\n    r = *L; // r指向列表的尾部，P是一个中介结点\n\n    for( i=0; i < n; i++ )\n    {\n        p = (Node *)malloc(sizeof(Node));\n        p->data = rand()%100+1;  //随机生成0-100之间的数字\n        r->next = p;   //将表尾终端结点的指针指向新结点\n        r = p;        // 将当前新结点定义为表尾终端结点\n    }\n\n    r->next = NULL;\n}\n\n```\n备注：r指向当前结点（当前链表的尾部结点），L为中介结点，当新的L结点加入链表，首先r结点的next指向L结点，然后r指向L结点，则当前的L结点就是尾部结点；\n\n\n#### 3.10单链表的整表删除  \n\n**单链表整表删除的算法思路如下：**  \n\n* 声明结点p和q；\n* 将第一个结点赋值给p，下一结点赋值给q；\n* 循环执行释放p和将q赋值给p的操作；\n\n\n```cpp\nStatus ClearList(LinkList *L)\n{\n    LinkList p, q;\n\n    p = (*L)->next; //p指向链表的第一个结点\n\n    while(p)//有数据情况下\n    {\n        q = p->next;//因为对P整个节点进行删除和内存释放工作的时候，也会将，将下一个环节指向的指针也会释放掉，需要使用Q临时记载P的下一个节点。\n        free(p);\n        p = q;\n    }\n\n    (*L)->next = NULL;\n\n    return OK;\n}\n\n```\n\n**单链表结构与书序存储结构的优缺点**   \n\n比较方面 | 顺序存储结构 |单链表结构 \n---|---|---\n存储分配方式 |用一段连续的存储结构依次存储线性表的数据元素 |采用链式存储结构，用一组任意的存储单元存放线性表的元素    \n 时间性能 | **查找：** O（1）|O（n）  \n 时间性能 |**插入和删除：** 需要平均移动表长一半的元素，时间为O(n) | 在计算出某位置的指针后，插入和删除时间仅为O（1）  \n 空间性能  | 需要预分配存储结构，可能会造成空间浪费和溢出  | 不需要分配存储空间，元素个数不受控制     \n\n**综上所述：**\n1.若线性表只需要频繁的查找，很少进行插入和删除操作，宜采用顺序存储结构；   \n\n2.频繁插入和删除则宜采用单链表结构；   \n\n\n\n-----\n\n\n\n\n\n\n\n\n\n\n\n### 静态链表\n**实际上是为了给没有指针的高级语言设计的一种实现单链表能力的方法；**\n用数组描述的链表叫做静态链表\n该方法称为：游标实现法：\n\n![静态链表的游标实现法]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%B8%B8%E6%A0%87%E5%AE%9E%E7%8E%B0%E6%B3%95.png)\n\n数组下标为0和maxsize-1的数据域不存放数据，**游标的第一个数值表示数组中第一个没有存放数据元素的下标**，（图中下标为5的数据域没有存放数据），**游标的最后一个值表示第一个存放数据的元素的下标**，（图中下标为1的数据域为第一个存放数据的）。其他的游标均表示该数据的下一个数据的下标；最后一个元素的游标是0\n```c\n//线性表的静态链表存储结构\n\n#define MAXSIZE 1000\ntypedef  struct\n{\n  ElemType data; // 数据\n  int cur; // 游标（Cursor）,当为0时候表示无指向\n} Component, StaticLinkList[MAXSIZE];\n```\n\n\n•对静态链表进行初始化相当于初始化数组：\n```c\n//将一维数组space中各分量链成一备用链表\n//*space[0].cur 为头指针，\"0\"表示空指针\nStatus InitList(StaticLinkList space)\n{\n  int  i;\n  for( i=0; i < MAXSIZE-1; i++ )\n  space[i].cur = i + 1;\n  space[MAXSIZE-1].cur = 0;//目前静态链表为空，所以最后一个元素的cur为0；\n  return OK;\n}\n```\n**我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据**。\n\n**我们通常把未使用的数组元素称为备用链表**。\n\n**数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个结点的下标**。\n\n**数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。**\n![静态链表的存储结构示例]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.jpg)\n\n\n####  静态链表的插入操作\n\n因为静态链表中无法实现像动态链表中的malloc和free，需要自行实现，同时需要判断数组中哪些分量未被使用过，解决办法：将所有未被使用过的及其已经被删除的分量用游标链接成一个备用的链表，进行插入的是时候，就从备用链表中选取一个结点作为待插入的新节点。\n在A之后插入B\n\n![静态链表的插入操作]($resource/j%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n代码示意：\n```c\n//首先是获得空闲分量的下标：\n\nint  Malloc_SLL(StaticLinkList space)\n{\n\nint  i = space[0].cur; // 后面的值为5，则现在i的值为5//相当于返回第一个备用空闲分量的下标；\n\nif( space[0].cur ) //如果不是空链表的话\n\nspace[0].cur = space[i].cur; //将5这个下标的元素的游标地址 给0的游标，因为5的下一个不一定是6\n\n // 把它的下一个分量用来作为备用。\n\nreturn i; //这里的i就是可以插入的位置，相当于分配位置i供使用； \n\n}\n```\n\n```c\n插入操作的代码：\n\n/* 在静态链表L中第i个元素之前插入新的数据元素e */\n\nStatus ListInsert( StaticLinkList L, int i, ElemType e )\n{\n    int j, k, l;\n\n    k = MAX_SIZE - 1;    // 数组的最后一个元素\n    if( i<1 || i>ListLength(L)+1 )\n    {\n        return ERROR;\n    }\n\n    j = Malloc_SLL(L);\n    if( j )\n    {\n        L[j].data = e;\n        for( l=1; l <= i-1; l++ )\n        {\n            k = L[k].cur; // 最后一个元素的游标赋值给K，则K= 1\n        }\n        L[j].cur = L[k].cur;    \n        L[k].cur = j;\n\n        return OK;\n    }\n\n    return ERROR;\n}\n```\n\n\n####  静态链表的删除操作\n\n删除元素C，删除之后结果如下：\n\n![静态链表的删除操作]($resource/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n\n代码示例：\n\n```c\n/* 删除在L中的第i个数据元素 */\nStatus ListDelete(StaticLinkList L, int i)\n{\n    int j, k;\n\n    if( i<1 || i>ListLength(L) )\n    {\n        return ERROR;\n    }\n\n    k = MAX_SIZE - 1;\n\n    for( j=1; j <= i-1; j++ )\n    {\n        k = L[k].cur;    // k1 = 1, k2 = 5\n    }\n\n    j = L[k].cur;        // j = 2\n    L[k].cur = L[j].cur;\n\n    Free_SLL(L, j);\n\n    return OK;\n}\n\n/* 将下标为k的空闲结点回收到备用链表 */\nvoid Free_SLL(StaticLinkList space, int k)\n{\n    space[k].cur = space[0].cur;\n    space[0].cur = k;\n}\n\n/* 返回L中数据元素个数 */\nint ListLength(StaticLinkList L)\n{\n    int j = 0;\n    int i = L[MAXSIZE-1].cur;\n\n    while(i)\n    {\n        i = L[i].cur;\n        j++;\n    }\n\n    return j;\n}\n```\n\n\n#### 优缺点总结\n•优点：\n\n– 在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n\n•缺点：\n\n–没有解决连续存储分配（数组）带来的表长难以确定的问题。\n\n–失去了顺序存储结构随机存取的特性。\n\n\n•总的来说，静态链表其实是为了给没有指针的编程语言设计的一种实现单链表功能的方法。能用单链表就不用静态链表\n\n\n\n\n### 小的程序题：\n题目：快速找到未知长度单链表的中间节点\n\n利用快慢指针原理：设置两个指针*search、*mid都指向单链表的头节点。其中* search的移动速度是*mid的2倍。当*search指向末尾节点的时候，mid正好就在中间了。这也是标尺的思想\n```c\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n```\n\n\n题目二：•实现随机生成20个元素的链表（尾插法或头插法任意），用我们刚才学到的方法快速查找中间结点的值并显示。\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;   /* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node;\n\ntypedef struct Node *LinkList; /* 定义LinkList */\n\nStatus visit(ElemType c)\n{\n    printf(\"%d \",c);\n    return OK;\n}\n\n/* 初始化顺序线性表 */\nStatus InitList(LinkList *L)\n{\n    *L=(LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n    {\n        return ERROR;\n    }\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n\n    return i;\n}\n\n/* 初始条件：顺序线性表L已存在 */\n/* 操作结果：依次对L的每个数据元素输出 */\nStatus ListTraverse(LinkList L)\n{\n    LinkList p=L->next;\n\n    while(p)\n    {\n        visit(p->data);\n        p = p->next;\n    }\n\n    printf(\"\\n\");\n\n    return OK;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr=*L;                                /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n\tr->next = NULL;                       /* 表示当前链表结束 */\n\t// 创建有环链表\n    //r->next = p;\n}\n\nStatus GetMidNode(LinkList L, ElemType *e)\n{\n    LinkList search, mid;\n    mid = search = L;\n\n    while (search->next != NULL)\n    {\n        //search移动的速度是 mid 的2倍\n        if (search->next->next != NULL)\n        {\n            search = search->next->next;\n            mid = mid->next;\n        }\n        else\n        {\n            search = search->next;\n        }\n    }\n\n    *e = mid->data;\n\n    return OK;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i=InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.查看链表 \\n2.创建链表（尾插法） \\n3.链表长度 \\n4.中间结点值 \\n0.退出 \\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListTail(&L,20);\n                printf(\"整体创建L的元素(尾插法)：\\n\");\n                ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                //clearList(pHead);   //清空链表\n                printf(\"ListLength(L)=%d \\n\",ListLength(L));\n                printf(\"\\n\");\n                break;\n\n            case '4':\n                //GetNthNodeFromBack(L,find,&e);\n                GetMidNode(L, &e);\n                printf(\"链表中间结点的值为：%d\\n\", e);\n                //ListTraverse(L);\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n}\n\n```\n\n\n\n\n\n\n\n### 3.13循环链表\n\n\n将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表\n\n\n![单循环链示意图]($resource/%E5%8D%95%E5%BE%AA%E7%8E%AF%E9%93%BE%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n![单链表的尾指针]($resource/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8C%87%E9%92%88.jpg)\n\n•注：这里并不是说循环链表一定要有头结点。\n\n•其实循环链表的单链表的主要差异就在于循环的判断空链表的条件上，原来判断head->next是否为null，现在则是head->next是否等于head（头结点）。\n\n\n\n代码示例：\n\n初始化部分\n```c\n/*初始化循环链表*/\nvoid ds_init(node **pNode)\n{\n    int item;\n    node *temp;\n    node *target;\n\n    printf(\"输入结点的值，输入0完成初始化\\n\");\n\n\twhile(1)\n\t{\n        scanf(\"%d\", &item);\n        fflush(stdin);\n\n\t\tif(item == 0)\n            return;\n\n        if((*pNode) == NULL)\n\t\t{ /*循环链表中只有一个结点*/\n\t\t\t*pNode = (node*)malloc(sizeof(struct CLinkList));\n\t\t\t\n\t\t\tif(!(*pNode))\n\t\t\t\texit(0);\n\t\t\t\n\t\t\t(*pNode)->data = item;\n\t\t\t(*pNode)->next = *pNode;\n\t\t}\n        else\n\t\t{\n            /*找到next指向第一个结点的结点*/\n            for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t\t;\n\n            /*生成一个新的结点*/\n            temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\t\tif(!temp)\n\t\t\t\texit(0);\n\n\t\t\ttemp->data = item;\n            temp->next = *pNode;\n            target->next = temp;\n        }\n    }\n}\n```\n\n插入部分\n```c\n/*链表存储结构的定义*/\ntypedef struct CLinkList\n{\n    int data;\n    struct CLinkList *next;\n}node;\n\n/*插入结点*/\n/*参数：链表的第一个结点，插入的位置*/\nvoid ds_insert(node **pNode , int i)\n{\n    node *temp;\n    node *target;\n    node *p;\n    int item;\n    int j = 1;\n\n    printf(\"输入要插入结点的值:\");\n    scanf(\"%d\", &item);\n\n    if(i == 1)\n\t{ //新插入的结点作为第一个结点\n        temp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\n        /*寻找到最后一个结点*/\n        for(target = (*pNode); target->next != (*pNode); target = target->next)\n\t\t\t;\n\n\t\ttemp->next = (*pNode);\n        target->next = temp;\n        *pNode = temp;\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < (i-1); ++j )\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}  \n\t\t\n\t\t// target指向第三个元素的\n\t\t\n\t\ttemp = (node *)malloc(sizeof(struct CLinkList));\n\n\t\tif(!temp)\n            exit(0);\n\n\t\ttemp->data = item;\n\t\t\n        p = target->next;\n        target->next = temp;\n        temp->next = p;\n    }\n}\n```\n\n\n删除部分\n```c\n/*删除结点*/\nvoid ds_delete(node **pNode, int i)\n{\n    node *target;\n    node *temp;\n    int j = 1;\n\n    if(i == 1)\n\t{ //删除的是第一个结点\n        /*找到最后一个结点*/\n        for(target = *pNode; target->next != *pNode;target = target->next)\n\t\t\t;\n\n\t\ttemp = *pNode;\n        *pNode = (*pNode)->next;\n        target->next = *pNode;\n        free(temp);\n    }\n    else\n\t{\n        target = *pNode;\n\n\t\tfor( ; j < i-1; ++j)\n\t\t{\n\t\t\ttarget = target->next;\n\t\t}\n\t\t\n\t\ttemp = target->next;\n        target->next = temp->next;\n        free(temp);\n    }\n}\n```\n\n\n搜索部分\n```c\n/*返回结点所在位置*/\nint ds_search(node *pNode, int elem)\n{\n    node *target;\n    int i = 1;\n\n    for(target = pNode; target->data != elem && target->next != pNode; ++i)\n\t{\n\t\ttarget = target->next;\n\t}\n\t\n\tif(target->next == pNode) /*表中不存在该元素*/\n        return 0;\n    else\n        return i;\n}\n```\n\n\n 约瑟夫问题：\n\n•据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。\n\n•然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n```c\n//n个人围圈报数，报m出列，最后剩下的是几号？\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct node\n{\n\tint data;\n\tstruct node *next;\n}node;\n\n\n// 创建链表\nnode *create(int n)\n{\n\tnode *p = NULL, *head;\n\thead = (node*)malloc(sizeof (node ));  // 创建一个头结点\n\tp = head;// P是指向当前结点的指针，是经常换的\n\tnode *s;\n\tint i = 1;\n\n\tif( 0 != n )\n\t{\n\t\twhile( i <= n )\n\t\t{\n\t\t\ts = (node *)malloc(sizeof (node));\n\t\t\ts->data = i++;    // 为循环链表初始化，第一个结点为1，第二个结点为2。\n\t\t\tp->next = s;\n\t\t\tp = s;\n\t\t}\n\t\ts->next = head->next; // 最后一个节点指向第一个结点\n\t}\n\n\tfree(head);// 去掉头结点\n\n\treturn s->next ; // 返回指向第一个结点的地址\n}\n\nint main()\n{\n\tint n = 41;\n\tint m = 3;\n\tint i;\n\tnode *p = create(n); //p是指向node节点的指针，就是指向循环链表第一个结点的指针\n\tnode *temp;\n\n\tm %= n;   // m在这里是等于2\n\n\twhile (p != p->next )\n\t{\n\t\tfor (i = 1; i < m-1; i++)\n\t\t{\n\t\t\tp = p->next ;\n\t\t}\n\n\t\tprintf(\"%d->\", p->next->data );\n\n\t\ttemp = p->next ;\t\t\t\t//删除第m个节点\n\t\tp->next = temp->next ;\n\t\tfree(temp);\n\n\t\tp = p->next ;\n\t}\n\n\tprintf(\"%d\\n\", p->data );\n\n\treturn 0;\n}\n```\n\n\n\n\n•编号为1～N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数，可以自由输入），开始人选一个正整数作为报数上限值M，从第一个人按顺时针方向自1开始顺序报数，报道M时停止报数。报M的人出列，将他的密码作为新的M值，从他顺时针方向上的下一个人开始从1报数，如此下去，直至所有人全部出列为止。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_NODE_NUM 100\n#define TRUE 1U\n#define FALSE 0U\n\ntypedef struct NodeType\n{\n    int id;\n    int cipher;\n    struct NodeType *next;\n} NodeType;\n\n/* 创建单向循环链表 */\nstatic void CreaList(NodeType **, const int);\n/* 运行\"约瑟夫环\"问题 */\nstatic void StatGame(NodeType **, int);\n/* 打印循环链表 */\nstatic void PrntList(const NodeType *);\n/* 得到一个结点 */\nstatic NodeType *GetNode(const int, const int);\n/* 测试链表是否为空, 空为TRUE，非空为FALSE */\nstatic unsigned EmptyList(const NodeType *);\n\nint main(void)\n{\n    int n, m;\n    NodeType *pHead = NULL;\n    while (1)\n    {\n        printf(\"请输入人数n（最多%d个）: \", MAX_NODE_NUM);\n        scanf(\"%d\", &n);\n        printf(\"和初始密码m: \");\n        scanf(\"%d\", &m);\n        if (n > MAX_NODE_NUM)\n        {\n            printf(\"人数太多，请重新输入！\\n\");\n            continue;\n        }\n        else\n            break;\n    }\n    CreaList(&pHead, n);\n    printf(\"\\n------------ 循环链表原始打印 -------------\\n\");\n    PrntList(pHead);\n    printf(\"\\n-------------删除出队情况打印 -------------\\n\");\n    StatGame(&pHead, m);\n}\n\nstatic void CreaList(NodeType **ppHead, const int n)\n{\n    int i, iCipher;\n    NodeType *pNew, *pCur;\n    for (i = 1; i <= n; i++)\n    {\n        printf(\"输入第%d个人的密码: \", i);\n        scanf(\"%d\", &iCipher);\n        pNew = GetNode(i, iCipher);\n        if (*ppHead == NULL)\n        {\n            *ppHead = pCur = pNew;\n            pCur->next = *ppHead;\n        }\n        else\n        {\n            pNew->next = pCur->next;\n            pCur->next = pNew;\n            pCur = pNew;\n        }\n    }\n    printf(\"完成单向循环链表的创建!\\n\");\n}\n\nstatic void StatGame(NodeType **ppHead, int iCipher)\n{\n    int iCounter, iFlag = 1;\n    NodeType *pPrv, *pCur, *pDel;\n    pPrv = pCur = *ppHead;\n    /* 将pPrv初始为指向尾结点，为删除作好准备 */\n    while (pPrv->next != *ppHead)\n        pPrv = pPrv->next;\n    while (iFlag)\n    {\n        for (iCounter = 1; iCounter < iCipher; iCounter++)\n        {\n            pPrv = pCur;\n            pCur = pCur->next;\n        }\n        if (pPrv == pCur)\n            iFlag = 0;\n        pDel = pCur; /* 删除pCur指向的结点，即有人出列 */\n        pPrv->next = pCur->next;\n        pCur = pCur->next;\n        iCipher = pDel->cipher;\n        printf(\"第%d个人出列, 密码: %d\\n\", pDel->id, pDel->cipher);\n        free(pDel);\n    }\n    *ppHead = NULL;\n    getchar();\n}\n\nstatic void PrntList(const NodeType *pHead)\n{\n    const NodeType *pCur = pHead;\n    if (EmptyList(pHead))\n        return;\n    do\n    {\n        printf(\"第%d个人, 密码: %d\\n\", pCur->id, pCur->cipher);\n        pCur = pCur->next;\n    }\n    while (pCur != pHead);\n    getchar();\n}\n\nstatic NodeType *GetNode(const int iId, const int iCipher)\n{\n    NodeType *pNew;\n    pNew = (NodeType *)malloc(sizeof(NodeType));\n    if(!pNew)\n    {\n        printf(\"Error, the memory is not enough!\\n\");\n        exit(-1);\n    }\n    pNew->id = iId;\n    pNew->cipher = iCipher;\n    pNew->next = NULL;\n    return pNew;\n}\n\nstatic unsigned EmptyList(const NodeType *pHead)\n{\n    if(!pHead)\n    {\n        printf(\"The list is empty!\\n\");\n        return TRUE;\n    }\n    return FALSE;\n}\n\n```\n\n\n\n\n#### 循环链表的特点\n循环链表也可以使用指向终端节点的尾指针来表示循环链表。\n此时判断是否为空链表的条件为：`rear == rear->next`\n特点：无须增加存储量，仅对链接方式稍微做出改变，可以使表的处理更加灵活；\n\n![循环链表使用尾指针]($resource/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E5%B0%BE%E6%8C%87%E9%92%88.png)\n\n\n- 例题一：•实现将两个线性表（a1，a2，…，an）和（b1，b2，…，bm）连接成一个线性表（a1，…，an，b1，…bm）的运算。\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n```c\n//假设A，B为非空循环链表的尾指针\nLinkList Connect(LinkList A,LinkList B)\n{\t\n\tLinkList p = A->next;\t\t//保存A表的头结点位置\n\t\n\tA->next = B->next->next;\t//B表的开始结点链接到A表尾\n\t\n\tfree(B->next);\t//释放B表的头结点,初学者容易忘记\n\t\n\tB->next = p;\t\t\n\t\n\treturn B;\t\t//返回新循环链表的尾指针\n} \n```\n\n\n- 例题二：判断单链表中是否有环\n\n•有环的定义是，链表的尾节点指向了链表中的某个节点。\n\n![链表中有环示意图‘’]($resource/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E7%8E%AF%E7%A4%BA%E6%84%8F%E5%9B%BE%E2%80%98%E2%80%99.png)\n\n•方法一：使用p、q两个指针，p总是向前走，但q每次都从头开始走，对于每个节点，看p走的步数是否和q一样。如图，当p从6走到3时，用了6步，此时若q从head出发，则只需两步就到3，因而步数不等，出现矛盾，存在环。\n\n•方法二：使用p、q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p == q，则存在环。\n\n```c\n#include \"stdio.h\"\n\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\n\ntypedef int Status;/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int ElemType;/* ElemType类型根据实际情况而定，这里假设为int */\n\ntypedef struct Node\n{\n    ElemType data;\n    struct Node *next;\n}Node, *LinkList;\n\n/* 初始化带头结点的空链表 */\nStatus InitList(LinkList *L)\n{\n    *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */\n\n    if(!(*L)) /* 存储分配失败 */\n            return ERROR;\n\n    (*L)->next=NULL; /* 指针域为空 */\n\n    return OK;\n}\n\n/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */\nint ListLength(LinkList L)\n{\n    int i=0;\n    LinkList p=L->next; /* p指向第一个结点 */\n    while(p)\n    {\n        i++;\n        p=p->next;\n    }\n    return i;\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（头插法） */\nvoid CreateListHead(LinkList *L, int n)\n{\n\tLinkList p;\n\tint i;\n\n\tsrand(time(0));                         /*  初始化随机数种子 */\n\n\t*L = (LinkList)malloc(sizeof(Node));\n\t(*L)->next = NULL;                      /*  建立一个带头结点的单链表 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (LinkList)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;             /*  随机生成100以内的数字 */\n\t\tp->next = (*L)->next;\n\t\t(*L)->next = p;\t\t\t\t\t\t/*  插入到表头 */\n\t}\n}\n\n/*  随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法） */\nvoid CreateListTail(LinkList *L, int n)\n{\n\tLinkList p,r;\n\tint i;\n\n\tsrand(time(0));                      /* 初始化随机数种子 */\n\t*L = (LinkList)malloc(sizeof(Node)); /* L为整个线性表 */\n\tr = *L;                              /* r为指向尾部的结点 */\n\n\tfor (i=0; i < n; i++)\n\t{\n\t\tp = (Node *)malloc(sizeof(Node)); /*  生成新结点 */\n\t\tp->data = rand()%100+1;           /*  随机生成100以内的数字 */\n\t\tr->next=p;                        /* 将表尾终端结点的指针指向新结点 */\n\t\tr = p;                            /* 将当前的新结点定义为表尾终端结点 */\n\t}\n\n    r->next = (*L)->next->next;\n}\n\n// 比较步数的方法\nint HasLoop1(LinkList L)\n{\n    LinkList cur1 = L;  // 定义结点 cur1\n    int pos1 = 0;       // cur1 的步数\n\n    while(cur1)\n    {                       // cur1 结点存在\n        LinkList cur2 = L;  // 定义结点 cur2\n        int pos2 = 0;       // cur2 的步数\n        while(cur2)\n        {                           // cur2 结点不为空\n            if(cur2 == cur1)\n            {                       // 当cur1与cur2到达相同结点时\n                if(pos1 == pos2)    // 走过的步数一样\n                    break;          // 说明没有环\n                else                // 否则\n                {\n                    printf(\"环的位置在第%d个结点处。\\n\\n\", pos2);\n                    return 1;       // 有环并返回1\n                }\n            }\n            cur2 = cur2->next;      // 如果没发现环，继续下一个结点\n            pos2++;                 // cur2 步数自增\n        }\n        cur1 = cur1->next;  // cur1继续向后一个结点\n        pos1++;             // cur1 步数自增\n    }\n    return 0;\n}\n\n// 利用快慢指针的方法\nint HasLoop2(LinkList L)\n{\n    int step1 = 1;\n    int step2 = 2;\n    LinkList p = L;\n    LinkList q = L;\n\n    while (p != NULL && q != NULL && q->next != NULL)\n    {\n        p = p->next;\n        if (q->next != NULL)\n            q = q->next->next;\n\n        printf(\"p:%d, q:%d \\n\", p->data, q->data);\n\n        if (p == q)\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    LinkList L;\n    Status i;\n    char opp;\n    ElemType e;\n    int find;\n    int tmp;\n\n    i = InitList(&L);\n    printf(\"初始化L后：ListLength(L)=%d\\n\",ListLength(L));\n\n    printf(\"\\n1.创建有环链表（尾插法） \\n2.创建无环链表（头插法） \\n3.判断链表是否有环 \\n0.退出 \\n\\n请选择你的操作：\\n\");\n    while(opp != '0')\n    {\n        scanf(\"%c\",&opp);\n        switch(opp)\n        {\n            case '1':\n                CreateListTail(&L, 10);\n                printf(\"成功创建有环L(尾插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '2':\n                CreateListHead(&L, 10);\n                printf(\"成功创建无环L(头插法)\\n\");\n                printf(\"\\n\");\n                break;\n\n            case '3':\n                printf(\"方法一: \\n\\n\");\n                if( HasLoop1(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n\n                printf(\"方法二：\\n\\n\");\n                if( HasLoop2(L) )\n                {\n                    printf(\"结论：链表有环\\n\\n\\n\");\n                }\n                else\n                {\n                    printf(\"结论：链表无环\\n\\n\\n\");\n                }\n                printf(\"\\n\");\n                break;\n\n            case '0':\n                exit(0);\n        }\n    }\n\n}\n```\n\n\n魔术师发牌问题：\n使用单项循环链表：\n•问题描述：魔术师利用一副牌中的13张黑牌，预先将他们排好后叠放在一起，牌面朝下。对观众说：“我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？现场演示。”魔术师将最上面的那张牌数为1，把他翻过来正好是黑桃A，将黑桃A放在桌子上，第二次数1,2，将第一张牌放在这些牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上这样依次进行将13张牌全部翻出，准确无误。\n\n•问题：牌的开始顺序是如何安排的？\n```java\n#include <stdio.h>\n#include <stdlib.h>\n\n#define  CardNumber 13\n\n// 生成一个单循环链表  \ntypedef struct node\n{\n    int data;\n    struct node *next;\n}sqlist, *linklist;\n\nlinklist CreateLinkList()\n{\n    linklist head = NULL;\n    linklist s, r;\n    int i;\n\n    r = head;\n\n    for(i=1; i <= CardNumber; i++)\n    {\n        s = (linklist)malloc(sizeof(sqlist));\n        s->data = 0;\n\n        if(head == NULL)\n            head = s;\n        else\n            r->next = s;\n\n        r = s;\n    }\n\n    r->next = head;\n\n    return head;\n}\n\n// 发牌顺序计算\nvoid Magician(linklist head)\n{\n    linklist p;\n    int j;\n    int Countnumber = 2;\n\n    p = head;\n    p->data = 1;  //第一张牌放1\n\n    while(1)\n    {\n        for(j=0; j < Countnumber; j++)\n        {\n            p = p->next;\n            if(p->data != 0)  //该位置有牌的话,则下一个位置\n            {\n                p->next;\n                j--;\n            }\n        }\n\n        if(p->data == 0)\n        {\n            p->data = Countnumber;\n            Countnumber ++;\n\n            if(Countnumber == 14)\n                break;\n        }\n    }\n}\n\n// 链表的销毁工作\nvoid DestoryList(linklist* list)\nj\n}\n\nint main()\n{\n    linklist p;\n    int i;\n\n    p = CreateLinkList();\n    Magician(p);\n\n    printf(\"按如下顺序排列：\\n\");\n    for (i=0; i < CardNumber; i++)\n    {\n        printf(\"黑桃%d \", p->data);\n        p = p->next;\n    }\n\n    DestoryList(&p);\n\n    return 0;\n}\n```\n\n\n### 双向链表\n\n#### 双向链表结点结构\n```c\ntypedef  struct  DualNode\n\n{\n\nElemType data;\n\nstruct  DualNode  *prior; //前驱结点\n\nstruct  DualNode  *next; //后继结点\n\n} DualNode, *DuLinkList;\n\n   ![双向链表节点结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.png)\n\n#### 双向链表的循环链表\n![双向链表的循环结构]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.png)\n\n\n\n#### 双向链表的插入操作\n```c\n–s->next = p; \n\n–s->prior = p->prior; \n\n–p->prior->next = s; \n\n–p->prior = s;\n```\n\n![双向链表的插入操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png)\n\n\n#### 双向链表的删除操作\n\n```c\n–p->prior->next = p->next;\n\n–p->next->prior = p->prior; \n\n–free(p);\n```\n![双向链表的删除操作]($resource/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png)\n\n双向链表可以有效提高算法的时间性能，说白了就是用空间来换取时间\n\n\n\n### 魔术师发牌问题\n\n```c\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <malloc.h>\n#include <stdlib.h>\n \n \ntypedef int Elemtype;\n \ntypedef struct Node {\n\tElemtype data;\n\tstruct Node *next;\n}List,*NodeList;\n \n//构建循环链表//\nNodeList Create_List(int CardNum) {\n\tNodeList PHead = (Node *)malloc(sizeof(Node));\n\tNodeList S,P;     //动态创建结点\n\tS = (Node *)malloc(sizeof(Node));//创建第一个结点\n\tS->data = 0;\n\tS->next = NULL;\n\tPHead->next = S;//头结点指向第一个结点\n\tP = S;\n\tfor (int i = 1; i < CardNum; i++) {\n\t\t//创建剩下的CardNum-1个结点\n\t\tS = (Node *)malloc(sizeof(Node));\n\t\tS->data = 0;\n\t\tS->next = NULL;\n\t\tP->next = S;\n\t\tP = S;\n\t}\n\t//退出循环的时候P,S指向最后一个结点\n\tP->next = PHead->next;\n\tfree(PHead);\n\treturn P->next;  //返回第一个结点\n}\n \n//遍历循环链表//\nvoid Traverse(NodeList P) {\n\tint count = 1;\n\tNodeList P1 = P;\n\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\tcount++;\n\twhile (P1->next != P) {\n\t\tP1 = P1->next;\n\t\tprintf(\"NO.%d->%d\\t\", count, P1->data);\n\t\tcount++;\n\t}\n\t//当退出循环的时候，P1指向最后一个结点\n\tprintf(\"\\n\");\n}\n \n//魔术师发牌问题解法//\nvoid Magical_Card(NodeList P,int CardNum) {\n\t//算法是按照等差数列递增的方法进行计数\n\t//当到达的结点值为0的时候则跳过，重新计数\n\t//也就是说要在所有为0的结点处进行牌的放置\n\tint count = 1;\n\tP->data = count;   //头结点赋值为1\n\tcount++;\n\twhile (1) {\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\t//往后逐渐计数\n\t\t\tP = P->next;\n\t\t\tif (P->data != 0)\n\t\t\t\t//此时表示这个位置已经放置过牌了\n\t\t\t\t//也就是在表演魔术的时候已经把牌拿出去了\n\t\t\t\ti--;  //表示要重新计数\n\t\t}\n\t\t//退出循环之后P指向要填入数字的结点\n\t\tP->data = count;\n\t\tcount++;\n\t\tif (count == CardNum+1)\n\t\t\tbreak;//退出条件就是13个数字全部填入了\n\t}\n}\n \n//拉丁方阵问题解法//\nvoid Latin_Matrix(NodeList P,int CardNum) {\n\t//拉丁方阵实际上要指定两个指针，进行循环嵌套\n\t//输出过一遍之后就进行换行\n\tint i, j;\n\tprintf(\"拉丁方阵为:\\n\");\n\tNodeList P1;   //用来记录每行开始循环的位置\n\tP1 = P;        //第一行就是从第一个结点开始打印\n\tfor (i = 0; i < CardNum; i++) {\n\t\tprintf(\"%d\\t\", P->data);\n\t\tP = P->next;\n\t}\n\tprintf(\"\\n\");\n\tfor (i = 1; i < CardNum;i++) {\n\t\tP1 = P1->next;\n\t\tP = P1;    //接下来每一次循环P1都会向后一位,P从P1位置开始\n\t\tfor (j = 0; j < CardNum; j++) {\n\t\t\tprintf(\"%d\\t\", P->data);\n\t\t\tP = P->next;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n \nint main()\n{\n\tNodeList P;\n\tP = Create_List(5);\n\tMagical_Card(P,5);\n\tTraverse(P);\n\tLatin_Matrix(P,5);\n    return 0;\n}\n\n```\n\n视频版本\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define OK     1\n#define ERROR  0\n\ntypedef char ElemType;\ntypedef int  Status;\n\ntypedef struct DualNode\n{\n\tElemType data;\n\tstruct DualNode *prior;\n\tstruct DualNode *next;\n}DualNode, *DuLinkList;\n\n\nStatus InitList(DuLinkList *L)\n{\n\tDualNode *p, *q;  // 使用p和q轮流交换位置进行逐个赋值\n\tint i;\n\t*L = (DuLinkList)malloc(sizeof(DualNode));\n\tif (!(*L))\n\t{\n\t\treturn ERROR;\n\t}\n\n\t(*L)->next = (*L)->prior = null;\n\tp = (*L);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tq = (DualNode *)malloc (sizeof(DualNode));\n\t\tif (!q)\n\t\t{\n\t\t\treturn ERROR;\n\t\t}\n\n\t\tq->data = 'A' + i;\n\t\tq->prior = p;\n\t\tq->next = p->next;\n\t\tp->next = q;\n\n\t\tp = q;  // 将当前q的位置赋予p，下一个结点的为q，一直循环\n\t}\n\n\tp->next = (*L)->next;\n\t(*L)->next->prior = p;\n\n\treturn OK;\n}\n\n\nvoid Caesar(DuLinkList *L, int i)\n{\n\tif (i > 0)\n\t{\t\t\t\t\t\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(--i);\n\t}\n\n\tif (i < 0)\n\t{\n\t\tdo\n\t\t{\n\t\t\t(*L) = (*L)->next;\n\t\t}while(++i);\n\t}\n}\n\n\nint main()\n{\n\tDuLinkList L;\n\tint i, n;\\\n\n\tInitList(&L);\n\n\tprintf(\"请输入一个整数：\\n\");\n\tscanf(\"%d\",&n);\n\n\tprintf(\"\\n\");\n\n\tCaesar(&L ,n);\n\n\tfor (int i = 0; i < 26; ++i)\n\t{\n\t\tL = L->next;\n\t\tprintf(\"%c\\n\",L->data );\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1570708233906,["GJX@GJXAIOU",[[-1,32782,"他翻"]],[32783,32784],[32782,32782]]],[1570708242698,["GJX@GJXAIOU",[[1,32782,"他翻"]],[32782,32782],[32783,32784]]]],null,"GJX@GJXAIOU"]]}