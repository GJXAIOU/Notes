{"compress":true,"commitItems":[["369651f0-6a7c-4808-a170-0fa348daa922",1559439516978,"方法1：两个数字相加除以2\n\n源代码：\n\n/*\n*\t函数名称：AverageOne\n*\n*\t函数功能：求两个整型数字的平均值(方法1)\n*\n*\t入口参数：num1, num2\n*\n*\t出口参数：空\n*\n*\t返回类型：void\n*/\n \nvoid AverageOne(int num1, int num2)\n{\n    int avg = 0;\n    avg = (num1 + num2) / 2;\n \n    printf(\"avg = %d\\n\", avg);\n\t\n    return;\n}\n不足：先求num1加num2的话整数会溢出。\n\n方法2：想象下如何使得两根不一样长的树变得一样长，首先两棵树的高度作差，然后在对剩下的部分取半即可。\n\n源代码：\n\n/*\n*\t函数名称：AverageTwo\n*\n*\t函数功能：求两个整型数字的平均值(方法2)\n*\n*\t入口参数：num3, num4\n*\n*\t出口参数：空\n*\n*\t返回类型：void\n*/\n \nvoid AverageTwo(int num3, int num4)\n{\n    int avg = 0;\n    avg = num3 + (num4 - num3) / 2;\n \n    printf(\"avg = %d\\n\", avg);\n\t\n    return;\n}\n不足：该算法要执行三种运算，分别是：除法、加法以及减法，而执行除法操作是比较麻烦的（需要移位、逻辑判断以及累减），于是乎考虑使用移位运算来代替。\n\n方法3：移位运算，逻辑右移一位相当于除以2，左边补0，左移一位相当于乘以2，右边补0。这里分别对两个数字逻辑右移一位再求和。\n\n源代码：\n\n/*\n*\t函数名称：AverageThree\n*\n*\t函数功能：求两个整型数字的平均值(方法3)\n*\n*\t入口参数：num5, num6\n*\n*\t出口参数：空\n*\n*\t返回类型：void\n*/\n \nvoid AverageThree(int num5, int num6)\n{\n    int avg = 0;\n    avg = (num5 >> 1) + (num6 >> 1);\n \n    printf(\"avg = %d\\n\", avg);\n\t\n    return;\n}\n方法4：首先，每个二进制数字可以分解为每个位上的数字乘其权积（也就是2）的和，那么当各位置上的数字同时为1时，按位与运算可以得到1，由于在加法运算中逢2（1+1=2）进1，所以按位与得到的值的二倍就是该位置上数字之和（ps：不只是1+1=2，还得乘该位置的权积）。其次，当两个位置上的数字不同时（即就是0或者1），那么按位异或得到的值就是1，由于该位置上两个数字相加的和就是1，所以按位异或得到的值就是该位置上的数字之和（ps:注意是系数乘权积之和）。二进制位的加法运算，无外乎这四种情况（1+1、1+0、0+1、0+0），1+1的情况可以通过按位与完成，1+0或者0+1的情况可以通过按位异或完成，至于0+0的情况，由于本身加起来和为0，然后再乘上权积，得到的也是0。综上所述，求两个整型数字平均值的运算就可以转换为 各位置上数字相同时的平均值（按位与） 加上 各位置上数字不同时的平均值（按位异或后右移一位），即就是\n\navg = (num7 & num8) + ((num7 ^ num8) >> 1) \n  下面通过剖析数字5加上数字9来说明，选择5和9这两个数字的原因是恰好满足四种情况：同为0，同为1，一个为0，一个为1。\n\nint num1 = 5;//   5      0101\nint num2 = 9;//   9      1001\n             // 相同位     01\n             //+相同位     01\n             //           10    2\n             // 相同位     01\n             //&相同位     01\n             //           01    1 = 2 / 2     \n \n             // 不同位   01\n             //+不同位   10\n             //         11      12\n             // 不同位   01\n             //^不同位   10\n             //         11      12\n            \n             //相同位的和 + 不同位的和 = 2 + 12 = 14\n             //即就是两个数字的和 5 + 9 = 14\n \n//1.相同位数字按位与运算可以得到相同位数字加起来和的一半，\n//这是因为只有某一位同为1时，按位与运算才会得到1，\n//而同为0时，按位与运算得到0，\n//一个为0，另一个为1时，按位与得到的也是0，\n//这样通过相同位的按位与运算就可以得到相同位数字的和的一半。\n \n//2.不同位数字按位异或可以得到不同位数字加起来的和，\n//这是因为某一位上两数字不相同时，按位异或可以得到1，\n//两数字同为0或者同为1时，按位异或可以得到0，\n//那么通过不同位的按位异或运算就可以得到不同位数字的和。\n \n//3.求两个数字的平均值就可以转换为\n//相同位的和的一半 加上 不同位的和的一半，\n//而相同位的和的一半就是相同位的按位与的结果，\n//不同位的和的一半就是不同位的按位异或的结果的一半，\n//也可以通过右移1位来实现。\n源代码：\n\n/*\n*\t函数名称：AverageFour\n*\n*\t函数功能：求两个整型数字的平均值(方法4)\n*\n*\t入口参数：num7, num8\n*\n*\t出口参数：空\n*\n*\t返回类型：void\n*/\n \nvoid AverageFour(int num7, int num8)\n{\n    int avg = 0;\n    avg = (num7 & num8) + ((num7 ^ num8) >> 1);\n \n    printf(\"avg = %d\\n\", avg);\n\t\n    return;\n}\n主函数：\n\nint main(void)\n{\n    AverageOne(10, 20);\n    AverageTwo(65534, 65535);\n    AverageThree(65534, 65535);\n    AverageFour(65534, 65535);\n \n    system(\"pause\");\n \n    return 0;\n}\n输出结果：",[[1559439463150,["GJX@GJXAIOU",[[-1,20,""],[1,20,"`"],[-1,156,"    "],[1,160,"    "],[-1,173,"    "],[1,177,"    "],[-1,204,"    "],[1,208,"    "],[-1,237,"    "],[1,241,"    "],[-1,468,"    "],[1,472,"    "],[-1,485,"    "],[1,489,"    "],[-1,523,"    "],[1,527,"    "],[-1,556,"    "],[1,560,"    "],[-1,853,"    "],[1,857,"    "],[-1,870,"    "],[1,874,"    "],[-1,909,"    "],[1,913,"    "],[-1,942,"    "],[1,946,"    "],[-1,1412," "],[1,1413," "],[-1,2499,"    "],[1,2503,"    "],[-1,2516,"    "],[1,2520,"    "],[-1,2566,"    "],[1,2570,"    "],[-1,2599,"    "],[1,2603,"    "],[-1,2636,"    "],[1,2640,"    "],[-1,2660,"    "],[1,2664,"    "],[-1,2690,"    "],[1,2694,"    "],[-1,2722,"    "],[1,2726,"    "],[-1,2755,"    "],[1,2759,"    "],[-1,2778,"    "],[1,2782,"    "]],[20,20],[21,21]]],[1559439463765,["GJX@GJXAIOU",[[1,21,"``"]],[21,21],[23,23]]],[1559439463791,["GJX@GJXAIOU",[[1,23,"language\n```\n"]],[23,23],[23,31]]],[1559439467267,["GJX@GJXAIOU",[[-1,32,"```"]],[32,35],[32,32]]],[1559439469869,["GJX@GJXAIOU",[[1,264,"\n"]],[263,263],[264,264]]],[1559439470389,["GJX@GJXAIOU",[[1,264,"```"]],[264,264],[267,267]]],[1559439477278,["GJX@GJXAIOU",[[1,349,"```"]],[349,349],[352,352]]],[1559439477306,["GJX@GJXAIOU",[[1,352,"language\n```\n"]],[352,352],[352,360]]],[1559439480149,["GJX@GJXAIOU",[[-1,361,"```"]],[361,364],[361,361]]],[1559439483587,["GJX@GJXAIOU",[[1,600,"\n"]],[599,599],[600,600]]],[1559439484092,["GJX@GJXAIOU",[[1,600,"```"]],[600,600],[603,603]]],[1559439488151,["GJX@GJXAIOU",[[1,747,"```"]],[747,747],[750,750]]],[1559439488176,["GJX@GJXAIOU",[[1,750,"language\n```\n"]],[750,750],[750,758]]],[1559439490718,["GJX@GJXAIOU",[[-1,759,"```"]],[759,762],[759,759]]],[1559439493181,["GJX@GJXAIOU",[[1,1003,"\n"]],[1002,1002],[1003,1003]]],[1559439493938,["GJX@GJXAIOU",[[1,1003,"```"]],[1003,1003],[1006,1006]]],[1559439499134,["GJX@GJXAIOU",[[1,1419,"`"]],[1419,1419],[1420,1420]]],[1559439500069,["GJX@GJXAIOU",[[1,1463,"`"]],[1463,1463],[1464,1464]]],[1559439502300,["GJX@GJXAIOU",[[1,1418,"`"]],[1418,1418],[1419,1419]]],[1559439503494,["GJX@GJXAIOU",[[-1,1418,"`"]],[1419,1419],[1418,1418]]],[1559439503676,["GJX@GJXAIOU",[[-1,1418,"\n"]],[1418,1418],[1417,1417]]],[1559439506404,["GJX@GJXAIOU",[[1,1526,"```"]],[1526,1526],[1529,1529]]],[1559439506431,["GJX@GJXAIOU",[[1,1529,"language\n```\n"]],[1529,1529],[1529,1537]]],[1559439509638,["GJX@GJXAIOU",[[-1,1538,"```"]],[1538,1541],[1538,1538]]],[1559439521718,["GJX@GJXAIOU",[[1,2054,"```"]],[2054,2054],[2057,2057]]],[1559439524357,["GJX@GJXAIOU",[[-1,2053," "]],[2054,2054],[2053,2053]]],[1559439528515,["GJX@GJXAIOU",[[1,2428,"```"]],[2428,2428],[2431,2431]]],[1559439528541,["GJX@GJXAIOU",[[1,2431,"language\n```\n"]],[2431,2431],[2431,2439]]],[1559439530842,["GJX@GJXAIOU",[[-1,2440,"```"]],[2440,2443],[2440,2440]]],[1559439534187,["GJX@GJXAIOU",[[1,2874,"\n"]],[2873,2873],[2874,2874]]],[1559439534884,["GJX@GJXAIOU",[[1,2874,"```"]],[2874,2874],[2877,2877]]],[1559439536821,["GJX@GJXAIOU",[[1,2883,"\n\n"]],[2883,2883],[2884,2884]]],[1559439592961,["GJX@GJXAIOU",[[1,2884,"![平均值结果]($resource/%E5%B9%B3%E5%9D%87%E5%80%BC%E7%BB%93%E6%9E%9C.jpg)\n"]],[2884,2884],[2954,2954]]],[1559439598934,["GJX@GJXAIOU",[[1,2698,"```c"]],[2698,2698],[2702,2702]]],[1559439600611,["GJX@GJXAIOU",[[1,2693,"\n"]],[2692,2692],[2693,2693]]],[1559439601908,["GJX@GJXAIOU",[[1,2693,"      "]],[2693,2693],[2699,2699]]],[1559439603963,["GJX@GJXAIOU",[[-1,2693,"      "]],[2699,2699],[2693,2693]]],[1559439604395,["GJX@GJXAIOU",[[-1,2693,"\n"]],[2693,2693],[2692,2692]]],[1559439605435,["GJX@GJXAIOU",[[1,2693,"\n"]],[2692,2692],[2693,2693]]],[1559439606199,["GJX@GJXAIOU",[[1,2693,"```"]],[2693,2693],[2696,2696]]],[1559439615454,["GJX@GJXAIOU",[[-1,2431,"language\n"]],[2431,2440],[2431,2431]]],[1559439615876,["GJX@GJXAIOU",[[1,2431,"c"]],[2431,2431],[2432,2432]]],[1559439617541,["GJX@GJXAIOU",[[-1,2433,"\n"]],[2433,2433],[2433,2433]]],[1559439628915,["GJX@GJXAIOU",[[-1,2053,"```"]],[2053,2056],[2053,2053]]],[1559439632004,["GJX@GJXAIOU",[[1,2420,"\n"]],[2419,2419],[2420,2420]]],[1559439632150,["GJX@GJXAIOU",[[1,2421,"\n"]],[2420,2420],[2421,2421]]],[1559439632718,["GJX@GJXAIOU",[[1,2422,"\n"]],[2421,2421],[2422,2422]]],[1559439634731,["GJX@GJXAIOU",[[1,2420,"```"]],[2420,2420],[2423,2423]]],[1559439644134,["GJX@GJXAIOU",[[-1,750,"language"]],[750,750],[750,750]]],[1559439644364,["GJX@GJXAIOU",[[1,750,"c"]],[750,750],[751,751]]],[1559439646587,["GJX@GJXAIOU",[[-1,753,"\n"]],[753,753],[752,752]]],[1559439646971,["GJX@GJXAIOU",[[-1,752,"\n"]],[752,752],[751,751]]],[1559439650998,["GJX@GJXAIOU",[[-1,362,"\n"]],[362,362],[361,361]]],[1559439651155,["GJX@GJXAIOU",[[-1,361,"\n"]],[361,361],[360,360]]],[1559439653019,["GJX@GJXAIOU",[[-1,352,"language"]],[360,360],[352,352]]],[1559439653293,["GJX@GJXAIOU",[[1,352,"c"]],[352,352],[353,353]]],[1559439660667,["GJX@GJXAIOU",[[-1,33,"\n"]],[33,33],[32,32]]],[1559439660828,["GJX@GJXAIOU",[[-1,32,"\n"]],[32,32],[31,31]]],[1559439662830,["GJX@GJXAIOU",[[-1,23,"language"]],[31,31],[23,23]]],[1559439663036,["GJX@GJXAIOU",[[1,23,"c"]],[23,23],[24,24]]],[1559439666300,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1559439666462,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1559439666611,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1559439666758,["GJX@GJXAIOU",[[1,3,"\n"]],[3,3],[4,4]]],[1559439689996,["GJX@GJXAIOU",[[1,1,"# 求两个整型数字的平均值"]],[1,1],[14,14]]],[1559439693667,["GJX@GJXAIOU",[[1,17,"\n"]],[16,16],[17,17]]],[1559439720761,["GJX@GJXAIOU",[[1,16,"[博客原网页链接](https://blog.csdn.net/sustzc/article/details/79615022)"]],[16,16],[80,80]]],[1559439733380,["GJX@GJXAIOU",[[1,82,"## "]],[82,82],[98,98]]],[1559439736278,["GJX@GJXAIOU",[[1,368,"## "]],[368,368],[421,421]]],[1559439740892,["GJX@GJXAIOU",[[1,748,"## "]],[748,748],[813,813]]],[1559439744165,["GJX@GJXAIOU",[[1,1071,"## "]],[1071,1071],[1484,1484]]],[1559439749427,["GJX@GJXAIOU",[[1,1078,"\n"]],[1078,1078],[1079,1079]]],[1559439752338,["GJX@GJXAIOU",[[1,1071,"\n"]],[1071,1071],[1072,1072]]],[1559439757339,["GJX@GJXAIOU",[[1,760,"\n"]],[760,760],[761,761]]],[1559439759715,["GJX@GJXAIOU",[[-1,759,"，"]],[760,760],[759,759]]]],null,"GJX@GJXAIOU"]]}