{"compress":true,"commitItems":[["b117bdf2-38b2-4fb4-8871-33c9123109ca",1559105078616,"",[[1559105026217,["GJX@GJXAIOU",[[1,0,"# 串\n\n\n\n"]],[0,0],[6,6]]],[1559105058797,["GJX@GJXAIOU",[[-1,6,"\n"]],[6,6],[5,5]]],[1559107638197,["GJX@GJXAIOU",[[-1,5,"\n"],[1,6,"@"]],[5,5],[6,6]]],[1559107638380,["GJX@GJXAIOU",[[1,6,"@"]],[6,6],[7,7]]],[1559107639167,["GJX@GJXAIOU",[[-1,6,"@"]],[7,7],[6,6]]],[1559107639296,["GJX@GJXAIOU",[[-1,5,"@"],[1,6,"\n"]],[6,6],[5,5]]],[1559107640700,["GJX@GJXAIOU",[[-1,5,"\n"],[1,6,"#"]],[5,5],[6,6]]],[1559107644292,["GJX@GJXAIOU",[[1,6,"# 4.1"]],[6,6],[11,11]]],[1559107646384,["GJX@GJXAIOU",[[-1,8,"4.1"]],[11,11],[8,8]]],[1559107649564,["GJX@GJXAIOU",[[1,8,"5.1 zif"]],[8,8],[15,15]]],[1559107650132,["GJX@GJXAIOU",[[-1,12,"zif"]],[15,15],[12,12]]],[1559107654341,["GJX@GJXAIOU",[[1,12,"字符串的定义"]],[12,12],[18,18]]],[1559108252646,["GJX@GJXAIOU",[[1,18,"\n\n"]],[18,18],[19,19]]],[1559108257953,["GJX@GJXAIOU",[[-1,19,"\n"],[1,20,"串"]],[19,19],[20,20]]],[1559108258542,["GJX@GJXAIOU",[[1,20,"（）"]],[20,20],[22,22]]],[1559108260878,["GJX@GJXAIOU",[[1,21,"string"]],[21,21],[27,27]]],[1559108304284,["GJX@GJXAIOU",[[1,28,"：有零个或者多个字符组成的有限序列，一般记为：'"]],[28,28],[52,52]]],[1559108304308,["GJX@GJXAIOU",[[-1,51,"'"],[1,52,"‘"]],[52,52],[52,52]]],[1559108304460,["GJX@GJXAIOU",[[1,52,"'"]],[52,52],[53,53]]],[1559108304483,["GJX@GJXAIOU",[[-1,52,"'"],[1,53,"’"]],[53,53],[53,53]]],[1559108305954,["GJX@GJXAIOU",[[-1,51,"‘’"]],[53,53],[51,51]]],[1559108307876,["GJX@GJXAIOU",[[1,51,"a"]],[51,51],[52,52]]],[1559108310437,["GJX@GJXAIOU",[[-1,51,"a"]],[52,52],[51,51]]],[1559108311644,["GJX@GJXAIOU",[[1,51,"a = "]],[51,51],[55,55]]],[1559108312647,["GJX@GJXAIOU",[[-1,51,"a = "]],[55,55],[51,51]]],[1559108314212,["GJX@GJXAIOU",[[1,51,"s = a"]],[51,51],[56,56]]],[1559108315015,["GJX@GJXAIOU",[[-1,55,"a"]],[56,56],[55,55]]],[1559108315940,["GJX@GJXAIOU",[[1,55,"\""]],[55,55],[56,56]]],[1559108315964,["GJX@GJXAIOU",[[-1,55,"\""],[1,56,"“"]],[56,56],[56,56]]],[1559108320676,["GJX@GJXAIOU",[[1,57,"1z"]],[57,57],[59,59]]],[1559108321731,["GJX@GJXAIOU",[[-1,58,"z"]],[59,59],[58,58]]],[1559108328380,["GJX@GJXAIOU",[[1,58,"a2a3......an\""]],[58,58],[71,71]]],[1559108328403,["GJX@GJXAIOU",[[-1,70,"\""],[1,71,"”"]],[71,71],[71,71]]],[1559108332085,["GJX@GJXAIOU",[[1,51,"`"]],[51,51],[52,52]]],[1559108355396,["GJX@GJXAIOU",[[1,72,"`,key"]],[72,72],[77,77]]],[1559108356066,["GJX@GJXAIOU",[[-1,74,"key"]],[77,77],[74,74]]],[1559108359838,["GJX@GJXAIOU",[[1,74,"可以直接抵用"]],[74,74],[80,80]]],[1559108360567,["GJX@GJXAIOU",[[-1,78,"抵用"]],[80,80],[78,78]]],[1559108365916,["GJX@GJXAIOU",[[1,78,"使用双引号``"]],[78,78],[85,85]]],[1559108367836,["GJX@GJXAIOU",[[1,84,"\"\""]],[84,84],[86,86]]],[1559108374833,["GJX@GJXAIOU",[[1,87,"表示空字符串。"]],[87,87],[94,94]]],[1559108498901,[null,[[1,57,"a"],[-1,58,"z"]],[57,57],[58,58]]],[1559108498901,[null,[[-1,57,"a"],[1,59,"z"]],[58,58],[57,57]]],[1559108457511,["GJX@GJXAIOU",[[1,45,"（）"]],[45,45],[47,47]]],[1559108490590,["GJX@GJXAIOU",[[1,46,"序列：即字符串的相邻字符质安监"]],[46,46],[61,61]]],[1559108492197,["GJX@GJXAIOU",[[-1,58,"质安监"]],[61,61],[58,58]]],[1559108495078,["GJX@GJXAIOU",[[1,58,"之间具有"]],[58,58],[62,62]]],[1559108558910,[null,[[1,75,"a"],[-1,76,"z"]],[75,75],[76,76]]],[1559108558910,[null,[[-1,75,"a"],[1,77,"z"]],[76,76],[75,75]]],[1559108507193,["GJX@GJXAIOU",[[1,62,"前驱和后继的关系"]],[62,62],[70,70]]],[1559108531175,["GJX@GJXAIOU",[[1,120,"\n\n"]],[120,120],[121,121]]],[1559108531360,["GJX@GJXAIOU",[[1,122,"\n"]],[121,121],[122,122]]],[1559108536173,["GJX@GJXAIOU",[[-1,122,"\n"],[1,123,"*"]],[122,122],[123,123]]],[1559108536348,["GJX@GJXAIOU",[[1,123,"***"]],[123,123],[124,124]]],[1559108538438,["GJX@GJXAIOU",[[1,124,"PS："]],[124,124],[127,127]]],[1559108547186,["GJX@GJXAIOU",[[1,19,"**"],[1,28,"**"]],[19,28],[19,32]]],[1559108618910,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108618910,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108570340,["GJX@GJXAIOU",[[1,133," kong"]],[133,133],[138,138]]],[1559108571572,["GJX@GJXAIOU",[[-1,134,"kong"]],[138,138],[134,134]]],[1559108572500,["GJX@GJXAIOU",[[1,134,"Kong"]],[134,134],[138,138]]],[1559108573371,["GJX@GJXAIOU",[[-1,134,"Kong"]],[138,138],[134,134]]],[1559108598175,["GJX@GJXAIOU",[[1,134,"空格串：只包含空格的串（）"]],[134,134],[147,147]]],[1559108607879,["GJX@GJXAIOU",[[1,146,"可以不止一个空格"]],[146,146],[154,154]]],[1559108618047,["GJX@GJXAIOU",[[1,155,"，不等于空"]],[155,155],[160,160]]],[1559108678911,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108678911,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108621806,["GJX@GJXAIOU",[[1,160,"字符串；"]],[160,160],[164,164]]],[1559108631046,["GJX@GJXAIOU",[[1,156,"，"]],[155,155],[156,156]]],[1559108639407,["GJX@GJXAIOU",[[1,156,"是有内容有长度的"]],[156,156],[164,164]]],[1559108656008,["GJX@GJXAIOU",[[1,133,"\n"]],[133,133],[134,134]]],[1559108657198,["GJX@GJXAIOU",[[1,134,"-"]],[134,134],[135,135]]],[1559108657404,["GJX@GJXAIOU",[[1,136," "]],[135,135],[136,136]]],[1559108667687,["GJX@GJXAIOU",[[1,176,"\n- 子串："]],[176,176],[182,182]]],[1559108738928,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108738928,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108734798,["GJX@GJXAIOU",[[1,182,"串中任意个数的连续字符组成的子序列称为该串的子串；\n- 主串："]],[182,182],[213,213]]],[1559108798931,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108798931,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108748502,["GJX@GJXAIOU",[[1,213,"包含子串的串称为主串；"]],[213,213],[224,224]]],[1559108753366,["GJX@GJXAIOU",[[1,189,"**"],[1,193,"**"]],[189,193],[189,197]]],[1559108789007,["GJX@GJXAIOU",[[1,211,"子串在主串中的位置就是子串的第一个字符在主串中的序号；"]],[211,211],[238,238]]],[1559108858935,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108858935,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108806540,["GJX@GJXAIOU",[[1,241,"\n- "]],[238,238],[241,241]]],[1559108806675,["GJX@GJXAIOU",[[-1,239,"- "]],[241,241],[240,240]]],[1559108807917,["GJX@GJXAIOU",[[-1,239,"\n"]],[240,240],[239,239]]],[1559108810106,["GJX@GJXAIOU",[[1,255,"\n- "]],[255,255],[258,258]]],[1559108810239,["GJX@GJXAIOU",[[-1,256,"- "],[1,258,"\n\n"]],[258,258],[257,257]]],[1559108811075,["GJX@GJXAIOU",[[1,258,"\n"]],[257,257],[258,258]]],[1559108813022,["GJX@GJXAIOU",[[-1,258,"\n"],[1,259,"#"]],[258,258],[259,259]]],[1559108815596,["GJX@GJXAIOU",[[1,259,"# 4.3"]],[259,259],[264,264]]],[1559108816663,["GJX@GJXAIOU",[[-1,261,"4.3"]],[264,264],[261,261]]],[1559108822519,["GJX@GJXAIOU",[[1,261,"5.2 串的比较"]],[261,261],[269,269]]],[1559108823504,["GJX@GJXAIOU",[[1,269,"\n\n"]],[269,269],[270,270]]],[1559108858463,["GJX@GJXAIOU",[[-1,270,"\n"],[1,271,"-"]],[270,270],[271,271]]],[1559108918949,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108918949,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108859685,["GJX@GJXAIOU",[[-1,270,"-"],[1,271,"\n"]],[271,271],[270,270]]],[1559108860026,["GJX@GJXAIOU",[[1,271,"\n"]],[270,270],[271,271]]],[1559108860911,["GJX@GJXAIOU",[[-1,271,"\n"],[1,272,"="]],[271,271],[272,272]]],[1559108861586,["GJX@GJXAIOU",[[-1,271,"="],[1,272,"\n"]],[272,272],[271,271]]],[1559108862207,["GJX@GJXAIOU",[[-1,271,"\n"],[1,272,"-"]],[271,271],[272,272]]],[1559108871243,["GJX@GJXAIOU",[[1,272," 常见的编码：\n- "]],[272,272],[282,282]]],[1559108872034,["GJX@GJXAIOU",[[1,280,"  "]],[282,282],[284,284]]],[1559108892498,["GJX@GJXAIOU",[[1,284,"ASCII：共计128个字符"]],[284,284],[298,298]]],[1559108898625,["GJX@GJXAIOU",[[1,292,"可表示"]],[292,292],[295,295]]],[1559108914888,["GJX@GJXAIOU",[[1,290,"，每个字符由7个二进制为标识"]],[290,290],[304,304]]],[1559108915604,["GJX@GJXAIOU",[[-1,302,"标识"]],[304,304],[302,302]]],[1559108918576,["GJX@GJXAIOU",[[1,302,"表示"]],[302,302],[304,304]]],[1559108978958,[null,[[1,87,"a"],[-1,88,"z"]],[87,87],[88,88]]],[1559108978958,[null,[[-1,87,"a"],[1,89,"z"]],[88,88],[87,87]]],[1559108919423,["GJX@GJXAIOU",[[1,304,"，"]],[304,304],[305,305]]]],null,"GJX@GJXAIOU"],["5ff200f4-c284-4eab-87bd-7991a4107915",1559109612843,"# 串\n\n## 5.1 字符串的定义\n**串（string）**：有零个或者多个字符组成的有限序列（序列：即字符串的相邻字符之间具有前驱和后继的关系），一般记为：`s = “a1a2a3......an”`,可以直接使用双引号`\"\"`表示空字符串。\n\n**PS：**\n-  空格串：只包含空格的串（可以不止一个空格），是有内容有长度的，不等于空字符串；\n- 子串：串中任意个数的**连续字符**组成的子序列称为该串的子串；子串在主串中的位置就是子串的第一个字符在主串中的序号；\n- 主串：包含子串的串称为主串；\n\n\n## 5.2 串的比较\n\n- 常见的编码：\n  - ASCII：，每个字符由7个二进制为表示，共计可表示128个字符",[[1559109610743,["GJX@GJXAIOU",[[1,316,"，后拓展使用8个二进制表示，可表示256个字符；\n  - Unicode："]],[316,316],[353,353]]],[1559109637383,["GJX@GJXAIOU",[[1,353,"每个字符由16位二进制表示"]],[353,353],[366,366]]],[1559109643166,["GJX@GJXAIOU",[[-1,301,"为"]],[302,302],[301,301]]],[1559109645936,["GJX@GJXAIOU",[[1,301,"位"]],[301,301],[302,302]]],[1559109662792,["GJX@GJXAIOU",[[1,366,"，前256个字符与ASCII相同，"]],[366,366],[383,383]]],[1559109685535,["GJX@GJXAIOU",[[-1,382,"，"]],[383,383],[382,382]]],[1559109686167,["GJX@GJXAIOU",[[1,382,"；"]],[382,382],[383,383]]]],null,"GJX@GJXAIOU"],["61c337db-0673-4eb1-bc81-182c04facbe7",1559111313664,"# 串\n\n## 5.1 字符串的定义\n**串（string）**：有零个或者多个字符组成的有限序列（序列：即字符串的相邻字符之间具有前驱和后继的关系），一般记为：`s = “a1a2a3......an”`,可以直接使用双引号`\"\"`表示空字符串。\n\n**PS：**\n-  空格串：只包含空格的串（可以不止一个空格），是有内容有长度的，不等于空字符串；\n- 子串：串中任意个数的**连续字符**组成的子序列称为该串的子串；子串在主串中的位置就是子串的第一个字符在主串中的序号；\n- 主串：包含子串的串称为主串；\n\n\n## 5.2 串的比较\n\n- 常见的编码：\n  - ASCII：，每个字符由7个二进制位表示，共计可表示128个字符，后拓展使用8个二进制表示，可表示256个字符；\n  - Unicode：每个字符由16位二进制表示，前256个字符与ASCII相同；",[[1559111257612,["GJX@GJXAIOU",[[1,383,"\n  - "]],[383,383],[388,388]]],[1559111257771,["GJX@GJXAIOU",[[-1,384,"  - "],[1,388,"\n\n"]],[388,388],[385,385]]],[1559111262289,["GJX@GJXAIOU",[[-1,385,"\n"]],[385,385],[384,384]]],[1559111263928,["GJX@GJXAIOU",[[1,385,"\n"]],[384,384],[385,385]]],[1559111264236,["GJX@GJXAIOU",[[-1,385,"\n"],[1,386,"-"]],[385,385],[386,386]]],[1559111279245,["GJX@GJXAIOU",[[1,386," 判定两个字符串大小标砖"]],[386,386],[398,398]]],[1559111280034,["GJX@GJXAIOU",[[-1,396,"标砖"]],[398,398],[396,396]]],[1559111284905,["GJX@GJXAIOU",[[1,396,"标准：\n- "]],[396,396],[402,402]]],[1559111286406,["GJX@GJXAIOU",[[1,400,"  "]],[402,402],[404,404]]],[1559111288795,["GJX@GJXAIOU",[[1,404,"如果"]],[404,404],[406,406]]],[1559111291981,["GJX@GJXAIOU",[[-1,405,"果"]],[406,406],[405,405]]],[1559111312316,["GJX@GJXAIOU",[[1,405,"果s1字符串从开头"]],[405,405],[414,414]]],[1559111319292,["GJX@GJXAIOU",[[1,414,"开始连续的"]],[414,414],[419,419]]],[1559111323826,["GJX@GJXAIOU",[[-1,416,"连续的"]],[419,419],[416,416]]],[1559111361260,["GJX@GJXAIOU",[[1,416,"为S2字符串的子串，且长度小于s2,则 s1<s2;\n  - 如果"]],[416,416],[449,449]]],[1559111790171,["GJX@GJXAIOU",[[1,449,"两个字符串中"]],[449,449],[455,455]]],[1559111833697,["GJX@GJXAIOU",[[1,455,"挨个字符比较，在最先不同的字符上a1"]],[455,455],[473,473]]],[1559111835107,["GJX@GJXAIOU",[[-1,471,"a1"]],[473,473],[471,471]]],[1559111841851,["GJX@GJXAIOU",[[1,471,"s1较小，则："]],[471,471],[478,478]]],[1559111842432,["GJX@GJXAIOU",[[-1,477,"："]],[478,478],[477,477]]],[1559111846630,["GJX@GJXAIOU",[[1,477," s1<s2;\n  - "]],[477,477],[489,489]]],[1559111847051,["GJX@GJXAIOU",[[-1,485,"  - "],[1,489,"\n\n"]],[489,489],[486,486]]],[1559112202786,["GJX@GJXAIOU",[[1,362,"\n  "]],[362,362],[365,365]]],[1559112260762,["GJX@GJXAIOU",[[1,488,"  - \n"]],[487,487],[492,492]]],[1559112260869,["GJX@GJXAIOU",[[-1,488,"  - "]],[492,492],[489,489]]],[1559112261019,["GJX@GJXAIOU",[[1,491,"\n"]],[489,489],[490,490]]],[1559112261124,["GJX@GJXAIOU",[[1,492,"\n"]],[490,490],[491,491]]],[1559112261249,["GJX@GJXAIOU",[[1,493,"\n"]],[491,491],[492,492]]],[1559112262106,["GJX@GJXAIOU",[[-1,493,"\n"]],[492,492],[491,491]]],[1559112263269,["GJX@GJXAIOU",[[-1,492,"\n"]],[491,491],[490,490]]],[1559112270163,["GJX@GJXAIOU",[[1,490,"### 5.3 chuan"]],[490,490],[503,503]]],[1559112270996,["GJX@GJXAIOU",[[-1,498,"chuan"]],[503,503],[498,498]]],[1559112279426,["GJX@GJXAIOU",[[1,498,"串的抽象数据雷鬼选哪个"]],[498,498],[509,509]]],[1559112280693,["GJX@GJXAIOU",[[-1,504,"雷鬼选哪个"]],[509,509],[504,504]]],[1559112282899,["GJX@GJXAIOU",[[1,504,"类型"]],[504,504],[506,506]]],[1559112283549,["GJX@GJXAIOU",[[1,508,"\n"]],[506,506],[507,507]]],[1559112283681,["GJX@GJXAIOU",[[1,509,"\n"]],[507,507],[508,508]]],[1559112286369,["GJX@GJXAIOU",[[1,508,"```"]],[508,508],[511,511]]],[1559112286395,["GJX@GJXAIOU",[[1,511,"language\n```\n"]],[511,511],[511,519]]],[1559112287494,["GJX@GJXAIOU",[[-1,511,"language"],[1,519,"c"]],[511,519],[512,512]]],[1559112287665,["GJX@GJXAIOU",[[1,513,"\n"]],[512,512],[513,513]]],[1559112288693,["GJX@GJXAIOU",[[1,513,"\tADT 串(string)\n\tData\n\t  串中元素仅有一个字符组成，相邻元素具有前驱和后继关系。\n\tOperation\n\t  StrAssign(T,*chars):生成一个其值等于字符串常量chars的串T。\n\t  StrCopy(T,S):串S存在，由串S复制得串T。\n\t  ClearString(S):串S存在，将串复制得串T。\n\t  StringEmpty(S):若串S为空，返回true，否则返回false。\n\t  StrLength(S):返回串S的元素个数，即串的长度。\n\t  StrCompare(S,T):若S>T,返回值>0,若S=T,返回0，若S<T,返回值<0。\n\t  Concat(T,S1,S2):用T返回由S1和S2联接成的新串。\n\t  SubString(Sub,S,pos,len):串S存在，1<=pos<=StrLength(S),且0<=len<=StrLength(S)-pos+1,用Sub返回串S的第pos个字符起长度为len的子串。\n\t  Index(S,T,pos):串S和T存在，T是非空串，1<=pos<=StrLength(S),若主串S中存在和串T值相同的子串，则返回它在主串S中第pos个字符之后第一次出现的位置，否则返回0.\n\t  Replace(S,T,V):串S、T和V存在，T是非空串。用V替换主串S中出现的所有与T相等的不重叠的子串。\n\t  StrInsert(S,pos,T):串S和T存在，1<=pos<=StrLength(S)+1,在串S的第pos个字符之前插入串T。\n\t  StrDelete(S,pos,len):串S存在，1<=pos<=STrLength(S)-len+1,从串S中删除第pos个字符起长度为len的子串。\n\tendADT"]],[513,513],[1279,1279]]],[1559112312642,["GJX@GJXAIOU",[[1,507,"dang"]],[507,507],[511,511]]],[1559112313738,["GJX@GJXAIOU",[[-1,507,"dang"]],[511,511],[507,507]]],[1559112314425,["GJX@GJXAIOU",[[1,508,"\n"]],[507,507],[508,508]]],[1559112315514,["GJX@GJXAIOU",[[-1,508,"\n"]],[508,508],[507,507]]],[1559112326397,["GJX@GJXAIOU",[[1,507,"当然不同的编程语言对于字符串时间"]],[507,507],[523,523]]],[1559112329762,["GJX@GJXAIOU",[[-1,521,"时间"]],[523,523],[521,521]]],[1559112334855,["GJX@GJXAIOU",[[1,521,"操作方法"]],[521,521],[525,525]]],[1559112339236,["GJX@GJXAIOU",[[-1,523,"方法"]],[525,525],[523,523]]],[1559112353284,["GJX@GJXAIOU",[[1,523,"方法名称有所不同，需要根据实际修改；"]],[523,523],[541,541]]],[1559112359945,["GJX@GJXAIOU",[[1,1320,"\n"]],[1317,1317],[1318,1318]]],[1559112360074,["GJX@GJXAIOU",[[1,1321,"\n"]],[1318,1318],[1319,1319]]],[1559112365906,["GJX@GJXAIOU",[[1,1319,"以indexx"]],[1319,1319],[1326,1326]]],[1559112366400,["GJX@GJXAIOU",[[-1,1325,"x"]],[1326,1326],[1325,1325]]],[1559112375820,["GJX@GJXAIOU",[[1,1325,"的实现为示例代码："]],[1325,1325],[1334,1334]]],[1559112376163,["GJX@GJXAIOU",[[1,1337,"\n"]],[1334,1334],[1335,1335]]],[1559112377610,["GJX@GJXAIOU",[[1,1335,"```"]],[1335,1335],[1338,1338]]],[1559112377636,["GJX@GJXAIOU",[[1,1338,"language\n```\n"]],[1338,1338],[1338,1346]]],[1559112381218,["GJX@GJXAIOU",[[-1,1338,"language"]],[1346,1346],[1338,1338]]],[1559112381946,["GJX@GJXAIOU",[[1,1338,"c"]],[1338,1338],[1339,1339]]],[1559112382224,["GJX@GJXAIOU",[[1,1340,"\n"]],[1339,1339],[1340,1340]]],[1559112382347,["GJX@GJXAIOU",[[1,1341,"\n"]],[1340,1340],[1341,1341]]],[1559112382473,["GJX@GJXAIOU",[[1,1342,"\n"]],[1341,1341],[1342,1342]]],[1559112382587,["GJX@GJXAIOU",[[1,1343,"\n"]],[1342,1342],[1343,1343]]],[1559112409584,["GJX@GJXAIOU",[[1,1340,"//T "]],[1340,1340],[1344,1344]]],[1559112410128,["GJX@GJXAIOU",[[-1,1343," "]],[1344,1344],[1343,1343]]],[1559112410555,["GJX@GJXAIOU",[[1,1343,"wei"]],[1343,1343],[1346,1346]]],[1559112411291,["GJX@GJXAIOU",[[-1,1343,"wei"]],[1346,1346],[1343,1343]]],[1559112427012,["GJX@GJXAIOU",[[1,1343,"为非空串，如果主串S中第Pos"]],[1343,1343],[1358,1358]]],[1559112430769,["GJX@GJXAIOU",[[-1,1355,"P"]],[1356,1356],[1355,1355]]],[1559112431957,["GJX@GJXAIOU",[[1,1355,"p"]],[1355,1355],[1356,1356]]],[1559112450556,["GJX@GJXAIOU",[[1,1358,"个字符之后存在于T相等的子串，则"]],[1358,1358],[1374,1374]]],[1559112478597,["GJX@GJXAIOU",[[1,1374,"返回第一个这样的子串在S中的位置，否则返回0；"]],[1374,1374],[1397,1397]]],[1559112479722,["GJX@GJXAIOU",[[1,1401,"\n"]],[1397,1397],[1398,1398]]],[1559112481506,["GJX@GJXAIOU",[[1,1402,"\n"]],[1398,1398],[1399,1399]]],[1559112490506,["GJX@GJXAIOU",[[1,1399,"int Index()"]],[1399,1399],[1410,1410]]],[1559112492859,["GJX@GJXAIOU",[[1,1409,"Sr"]],[1409,1409],[1411,1411]]],[1559112493341,["GJX@GJXAIOU",[[-1,1410,"r"]],[1411,1411],[1410,1410]]],[1559112498940,["GJX@GJXAIOU",[[1,1410,"tring S,St"]],[1410,1410],[1420,1420]]],[1559112500268,["GJX@GJXAIOU",[[-1,1418,"St"]],[1420,1420],[1418,1418]]],[1559112508553,["GJX@GJXAIOU",[[1,1418," String T, int o"]],[1418,1418],[1434,1434]]],[1559112509040,["GJX@GJXAIOU",[[-1,1433,"o"]],[1434,1434],[1433,1433]]],[1559112509907,["GJX@GJXAIOU",[[1,1433,"pois"]],[1433,1433],[1437,1437]]],[1559112510529,["GJX@GJXAIOU",[[-1,1435,"is"]],[1437,1437],[1435,1435]]],[1559112510770,["GJX@GJXAIOU",[[1,1435,"s"]],[1435,1435],[1436,1436]]],[1559112514170,["GJX@GJXAIOU",[[1,1437,"{"]],[1437,1437],[1438,1438]]],[1559112514426,["GJX@GJXAIOU",[[1,1442,"\n"]],[1438,1438],[1439,1439]]],[1559112515807,["GJX@GJXAIOU",[[1,1443,"\n"]],[1439,1439],[1440,1440]]],[1559112515961,["GJX@GJXAIOU",[[1,1444,"\n"]],[1440,1440],[1441,1441]]],[1559112516083,["GJX@GJXAIOU",[[1,1445,"\n"]],[1441,1441],[1442,1442]]],[1559112517066,["GJX@GJXAIOU",[[1,1442,"}"]],[1442,1442],[1443,1443]]],[1559112519940,["GJX@GJXAIOU",[[-1,1446,"\n"]],[1446,1446],[1445,1445]]],[1559112520066,["GJX@GJXAIOU",[[-1,1445,"\n"]],[1445,1445],[1444,1444]]],[1559112529356,["GJX@GJXAIOU",[[1,1439,"  int n,mm"]],[1439,1439],[1449,1449]]],[1559112530040,["GJX@GJXAIOU",[[-1,1448,"m"]],[1449,1449],[1448,1448]]],[1559112531379,["GJX@GJXAIOU",[[1,1448,",i;"]],[1448,1448],[1451,1451]]],[1559112531777,["GJX@GJXAIOU",[[1,1452,"  \n"]],[1451,1451],[1454,1454]]],[1559112539475,["GJX@GJXAIOU",[[1,1454,"String sub;"]],[1454,1454],[1465,1465]]],[1559112539903,["GJX@GJXAIOU",[[1,1466,"  \n"]],[1465,1465],[1468,1468]]],[1559112542466,["GJX@GJXAIOU",[[1,1468,"of()"]],[1468,1468],[1472,1472]]],[1559112544523,["GJX@GJXAIOU",[[-1,1468,"o"]],[1469,1469],[1468,1468]]],[1559112544842,["GJX@GJXAIOU",[[1,1468,"i"]],[1468,1468],[1469,1469]]],[1559112552169,["GJX@GJXAIOU",[[1,1471,"pos > 0"]],[1471,1471],[1478,1478]]],[1559112554538,["GJX@GJXAIOU",[[1,1479,"{"]],[1479,1479],[1480,1480]]],[1559112556479,["GJX@GJXAIOU",[[1,1481,"  \n"]],[1480,1480],[1483,1483]]],[1559112557987,["GJX@GJXAIOU",[[1,1483,"n"]],[1483,1483],[1484,1484]]],[1559112559505,["GJX@GJXAIOU",[[-1,1483,"n"]],[1484,1484],[1483,1483]]],[1559112561777,["GJX@GJXAIOU",[[1,1483,"   b"]],[1483,1483],[1487,1487]]],[1559112562578,["GJX@GJXAIOU",[[-1,1486,"b"]],[1487,1487],[1486,1486]]],[1559112950976,["GJX@GJXAIOU",[[1,1486,"n = StrLength(S);"],[1,1487,"     m = StrLength(T);\n     i = pos;\n     while(i <= n-m+1){\n     \t\tSubString(sub,S,i,m); //取主串第i个位置，长度与T相等的子串给sub\n     \t\tif (StrCompare(sub,T) != 0){  //如果两个字符串不相等\n     \t\t\t++i;\n     \t\t}else{\n     \t\t\treturn i;\n     \t\t}\n     }\n  }\n  return 0;   //若无子串与T相等，则返回0"]],[1340,1490],[1766,1766]]],[1559113030321,["GJX@GJXAIOU",[[1,1775,"\n"]],[1771,1771],[1772,1772]]],[1559113031570,["GJX@GJXAIOU",[[1,1776,"\n"]],[1772,1772],[1773,1773]]],[1559113041052,["GJX@GJXAIOU",[[-1,492,"#"]],[493,493],[492,492]]],[1559113044370,["GJX@GJXAIOU",[[1,1776,"\n"]],[1771,1771],[1772,1772]]],[1559113044498,["GJX@GJXAIOU",[[1,1777,"\n"]],[1772,1772],[1773,1773]]],[1559113045433,["GJX@GJXAIOU",[[1,1773,"2"]],[1773,1773],[1774,1774]]],[1559113046496,["GJX@GJXAIOU",[[-1,1773,"2"]],[1774,1774],[1773,1773]]],[1559113051074,["GJX@GJXAIOU",[[1,1773,"## 5.4 chuan"]],[1773,1773],[1785,1785]]],[1559113052295,["GJX@GJXAIOU",[[-1,1780,"chuan"]],[1785,1785],[1780,1780]]],[1559113054925,["GJX@GJXAIOU",[[1,1780,"传的"]],[1780,1780],[1782,1782]]],[1559113056059,["GJX@GJXAIOU",[[-1,1779," 传的"]],[1782,1782],[1779,1779]]],[1559113061584,["GJX@GJXAIOU",[[1,1779," 串的存储结构"]],[1779,1779],[1786,1786]]],[1559113062018,["GJX@GJXAIOU",[[1,1791,"\n"]],[1786,1786],[1787,1787]]],[1559113065015,["GJX@GJXAIOU",[[1,1792,"\n"]],[1787,1787],[1788,1788]]],[1559113077213,["GJX@GJXAIOU",[[1,1788,"### 5.4.1 串的顺序存储结构"]],[1788,1788],[1806,1806]]],[1559113077836,["GJX@GJXAIOU",[[1,1811,"\n"]],[1806,1806],[1807,1807]]],[1559113078051,["GJX@GJXAIOU",[[1,1812,"\n"]],[1807,1807],[1808,1808]]],[1559113093963,["GJX@GJXAIOU",[[1,1808,"### 5.4.2 串的链式存储结构"]],[1808,1808],[1826,1826]]],[1559113096699,["GJX@GJXAIOU",[[1,1808,"\n"]],[1807,1807],[1808,1808]]],[1559113137791,["GJX@GJXAIOU",[[-1,1808,"\n"]],[1808,1808],[1807,1807]]],[1559113172732,["GJX@GJXAIOU",[[1,1807,"使用定长数组来存储字符串，可以在串值后面加一个不计入串长度"]],[1807,1807],[1836,1836]]],[1559113193859,["GJX@GJXAIOU",[[1,1836,"的结束标记字符，比如“、0"]],[1836,1836],[1849,1849]]],[1559113194908,["GJX@GJXAIOU",[[-1,1847,"、0"]],[1849,1849],[1847,1847]]],[1559113200383,["GJX@GJXAIOU",[[1,1847,"\\0\""]],[1847,1847],[1850,1850]]],[1559113200408,["GJX@GJXAIOU",[[-1,1849,"\""],[1,1850,"”"]],[1850,1850],[1850,1850]]],[1559113203524,["GJX@GJXAIOU",[[1,1850,","]],[1850,1850],[1851,1851]]],[1559113204766,["GJX@GJXAIOU",[[-1,1850,","]],[1851,1851],[1850,1850]]],[1559113219885,["GJX@GJXAIOU",[[1,1850,"来表示串值的终结；"]],[1850,1850],[1859,1859]]],[1559113284694,["GJX@GJXAIOU",[[1,1860,"\n"]],[1859,1859],[1860,1860]]],[1559113285564,["GJX@GJXAIOU",[[1,1861,"\n"]],[1860,1860],[1861,1861]]],[1559113291908,["GJX@GJXAIOU",[[1,1861,"实际使用过程中"]],[1861,1861],[1868,1868]]],[1559113311194,["GJX@GJXAIOU",[[1,1868,"经常使用堆来动态分配； 即使用函数mallox"]],[1868,1868],[1891,1891]]],[1559113311819,["GJX@GJXAIOU",[[-1,1890,"x"]],[1891,1891],[1890,1890]]],[1559113316890,["GJX@GJXAIOU",[[1,1890,"c 和freejinxing"]],[1890,1890],[1904,1904]]],[1559113318298,["GJX@GJXAIOU",[[-1,1897,"jinxing"]],[1904,1904],[1897,1897]]],[1559113324084,["GJX@GJXAIOU",[[1,1897,"进行管理；"]],[1897,1897],[1902,1902]]],[1559113366082,["GJX@GJXAIOU",[[1,1903,"\n"]],[1902,1902],[1903,1903]]],[1559113368699,["GJX@GJXAIOU",[[1,1927,"\n"]],[1923,1923],[1924,1924]]],[1559113411878,["GJX@GJXAIOU",[[1,1924,"与线性表类似，如果一个节点只放置一个字符"]],[1924,1924],[1944,1944]]],[1559113413268,["GJX@GJXAIOU",[[1,1944,"蓝给"]],[1944,1944],[1946,1946]]],[1559113413941,["GJX@GJXAIOU",[[-1,1944,"蓝给"]],[1946,1946],[1944,1944]]],[1559113419525,["GJX@GJXAIOU",[[1,1944,"浪费空间，因袭"]],[1944,1944],[1951,1951]]],[1559117295338,["GJX@GJXAIOU",[[1,1953,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        <h1 class=\"title-article\">33-串的链式存储结构和基本操作</h1>\n      </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n    <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n              <div class=\"article-copyright\">\n                      <svg class=\"icon\" title=\"CSDN认证原创\" aria-hidden=\"true\" style=\"width:53px; height: 18px; vertical-align: -4px;\">\n              <use xlink:href=\"#CSDN_Cert\"></use>\n            </svg>\n          \n          版权声明：本文为博主原创文章，未经博主允许不得转载。          https://blog.csdn.net/qq_35733751/article/details/80777274        </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css\">\n                              <div id=\"content_views\" class=\"markdown_views\">\n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>\n            <h3 id=\"1-串的链式存储结构\"><a name=\"t0\"></a>1. 串的链式存储结构</h3>\n\n<p>  串的链式存储结构与线性表是相似的，但是在链式存储结构中每个节点的数据域可以是一个字符，或者多个字符。如果每个节点的数据域是以一个字符存储的话，由于内存对齐的的影响下，链串的存储密度较小，因此会存在浪费。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622181949243?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p><br> <br>\n  如果每个节点的数据域是以四个字符存储的话，链串的存储密度较大，即便在内存对齐的的影响下，也不容易浪费空间。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182044140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>关于内存对齐，假设每个节点的数据域以一个字符存储，定义的链串数据结构如下：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs d has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> snode\n{\n    <span class=\"hljs-built_in\">char</span> data;              <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-keyword\">struct</span> snode *next;     <span class=\"hljs-comment\">//指针域</span>\n} LiString;<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\n\n<p>  在上面用C语言定义的数据结构中，节点的数据域是用一个字节来存储一个字符，但是当分配内存时，会进行内存对齐，也就是说，snode节点的数据域会占用4字节的，但是每个节点只使用了一个字节。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182203304?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>  需要明白的是，一个节点存储多少字符需要根据实际的情况来决定的，因为这会直接影响到串处理的效率。总体来说，串的链式存储结构不如顺序存储结构存储灵活，性能也不如顺序存储结构，因此，在大多数情况使用串的顺序存储结构比较多。</p>\n\n<h3 id=\"2-链式串的基本操作\"><a name=\"t1\"></a>2. 链式串的基本操作</h3>\n\n<p>1.串赋值：StrAssign(s,cstr)</p>\n\n<p>  将一个字符串常量cstr赋给串s（采用尾插法） <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182643824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cpp has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">void</span> StrAssign(LiString *&amp;s,<span class=\"hljs-keyword\">char</span> cstr[])\n{\n    <span class=\"hljs-keyword\">int</span> i;\n    LiString *r,*p;\n    s=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n    r=s; <span class=\"hljs-comment\">//r始终指向尾节点</span>\n    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; cstr[i]!=<span class=\"hljs-string\">'\\0'</span>; i++)\n    {\n       p=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n       p-&gt;data=cstr[i];\n       r-&gt;next=p;\n       r=p;\n    }\n    r-&gt;next=NULL;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>2.串复制: StrCopy(s,t)</p>\n\n<p>  将串t复制给串s <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182818973?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-literal\">void</span> StrCopy(LiString <span class=\"hljs-subst\">*&amp;</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    s<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>s; <span class=\"hljs-comment\">//r始终指向串s的尾节点</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>) <span class=\"hljs-comment\">//p将串t的所有节点复制到串s中</span>\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>3.判串相等：StrEqual(s,t)</p>\n\n<p>  若两个串s与t相等返回真（1）；否则返回假（0）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">bool StrEqual(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">==</span>q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>)\n    {\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n       q<span class=\"hljs-subst\">=</span>q<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    <span class=\"hljs-keyword\">if</span> (p<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span>)\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">else</span>\n       <span class=\"hljs-comment\">//说明p和q有一个不为空</span>\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li></ul></pre>\n\n<p>4.求串长：StrLength(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">int</span> StrLength(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n       i++;\n       p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> i;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li></ul></pre>\n\n<p>5.串连接：Concat(s,t)</p>\n\n<p>  将两个串s和t连接形成新串，返回这个新串。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-subst\">*</span>Concat(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>str,<span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    <span class=\"hljs-comment\">//新串str</span>\n    str<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>str;\n    <span class=\"hljs-comment\">//将s的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-comment\">//将t的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li></ul></pre>\n\n<p>6.求子串: SubStr(s,i,j)</p>\n\n<p>  返回串s中从第i个字符开始的、由连续j个字符组成的子串。 <br>\n  参数不正确时返回一个空串 （1≤i≤StrLength(s)）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-variable\">*SubStr</span>(LiString <span class=\"hljs-variable\">*s</span>,<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)\n{\n    <span class=\"hljs-keyword\">int</span> k;\n    LiString <span class=\"hljs-variable\">*str</span>,<span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>,<span class=\"hljs-variable\">*q</span>,<span class=\"hljs-variable\">*r</span>;\n    str=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n    str-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    r=str; <span class=\"hljs-regexp\">//r</span>指向新串str的尾节点\n    <span class=\"hljs-keyword\">if</span> (i&lt;=<span class=\"hljs-number\">0</span> || i&gt;StrLength(<span class=\"hljs-keyword\">s</span>) || j&lt;<span class=\"hljs-number\">0</span> || i+j-<span class=\"hljs-number\">1</span>&gt;StrLength(<span class=\"hljs-keyword\">s</span>))\n        <span class=\"hljs-keyword\">return</span> str; <span class=\"hljs-regexp\">//</span>参数非法时的处理\n    //移动到串<span class=\"hljs-keyword\">s</span>的第i个节点\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">0</span>; k&lt;i-<span class=\"hljs-number\">1</span>; k++)\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-regexp\">//</span>将<span class=\"hljs-keyword\">s</span>的第i个节点开始的j个节点复制到str\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">1</span>; k&lt;=j; k++)\n    {\n        <span class=\"hljs-keyword\">q</span>=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n        <span class=\"hljs-keyword\">q</span>-&gt;data=p-&gt;data;\n        r-&gt;<span class=\"hljs-keyword\">next</span>=<span class=\"hljs-keyword\">q</span>;\n        r=<span class=\"hljs-keyword\">q</span>;\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    //将尾节点的<span class=\"hljs-keyword\">next</span>置为NULL\n    r-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li></ul></pre>\n\n<p>7.输出串：DispStr(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">void DispStr(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n        <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">%c</span>\"</span>,p-&gt;data);\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre>          </div>\n          <link href=\"https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css\" rel=\"stylesheet\">\n                  </div>\n  </article>\n</div>"]],[1953,1953],[23760,23760]]],[1559117304240,["GJX@GJXAIOU",[[-1,1953,"<div class=\"blog-content-box\">\n  <div class=\"article-header-box\">\n    <div class=\"article-header\">\n      <div class=\"article-title-box\">\n        <span class=\"article-type type-1 float-left\">原</span>        <h1 class=\"title-article\">33-串的链式存储结构和基本操作</h1>\n      </div>\n      <div class=\"article-info-box\">\n        <div class=\"article-bar-top\" style=\"height: 26px;\">\n                                                  <span class=\"time\">2018年06月22日 20:10:03</span>\n          <a class=\"follow-nickName\" href=\"https://me.csdn.net/qq_35733751\" target=\"_blank\">songly_</a>\n          <span class=\"read-count\">阅读数：484</span>\n          \n                          <span class=\"tags-box artic-tag-box\">\n                <span class=\"label\">标签：</span>\n                                  <a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;字符串&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=字符串&amp;t=blog\" target=\"_blank\">字符串                                    </a><a data-track-click=\"{&quot;mod&quot;:&quot;popu_626&quot;,&quot;con&quot;:&quot;链式存储&quot;}\" class=\"tag-link\" href=\"https://so.csdn.net/so/search/s.do?q=链式存储&amp;t=blog\" target=\"_blank\">链式存储                                  </a>\n              <span class=\"article_info_click\">更多</span></span>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">个人分类：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/qq_35733751/article/category/7567771\" target=\"_blank\">数据结构基础                                  </a>\n              </div>\n                                      <div class=\"tags-box space\">\n                <span class=\"label\">所属专栏：</span>\n                                  <a class=\"tag-link\" href=\"https://blog.csdn.net/column/details/24774.html\" target=\"_blank\">数据结构基础</a>\n                                \n              </div>\n                              </div>\n        <div class=\"operating\">\n                  </div>\n      </div>\n    </div>\n  </div>\n  <article class=\"baidu_pl\">\n    <div id=\"article_content\" class=\"article_content clearfix csdn-tracking-statistics\" data-pid=\"blog\" data-mod=\"popu_307\" data-dsm=\"post\">\n              <div class=\"article-copyright\">\n                      <svg class=\"icon\" title=\"CSDN认证原创\" aria-hidden=\"true\" style=\"width:53px; height: 18px; vertical-align: -4px;\">\n              <use xlink:href=\"#CSDN_Cert\"></use>\n            </svg>\n          \n          版权声明：本文为博主原创文章，未经博主允许不得转载。          https://blog.csdn.net/qq_35733751/article/details/80777274        </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css\">\n                              <div id=\"content_views\" class=\"markdown_views\">\n            <!-- flowchart 箭头图标 勿删 -->\n            <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n              <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n            </svg>\n            <h3 id=\"1-串的链式存储结构\"><a name=\"t0\"></a>1. 串的链式存储结构</h3>\n\n<p>  串的链式存储结构与线性表是相似的，但是在链式存储结构中每个节点的数据域可以是一个字符，或者多个字符。如果每个节点的数据域是以一个字符存储的话，由于内存对齐的的影响下，链串的存储密度较小，因此会存在浪费。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622181949243?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p><br> <br>\n  如果每个节点的数据域是以四个字符存储的话，链串的存储密度较大，即便在内存对齐的的影响下，也不容易浪费空间。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182044140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>关于内存对齐，假设每个节点的数据域以一个字符存储，定义的链串数据结构如下：</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs d has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> snode\n{\n    <span class=\"hljs-built_in\">char</span> data;              <span class=\"hljs-comment\">//数据域</span>\n    <span class=\"hljs-keyword\">struct</span> snode *next;     <span class=\"hljs-comment\">//指针域</span>\n} LiString;<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\n\n<p>  在上面用C语言定义的数据结构中，节点的数据域是用一个字节来存储一个字符，但是当分配内存时，会进行内存对齐，也就是说，snode节点的数据域会占用4字节的，但是每个节点只使用了一个字节。 <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182203304?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n<p>  需要明白的是，一个节点存储多少字符需要根据实际的情况来决定的，因为这会直接影响到串处理的效率。总体来说，串的链式存储结构不如顺序存储结构存储灵活，性能也不如顺序存储结构，因此，在大多数情况使用串的顺序存储结构比较多。</p>\n\n<h3 id=\"2-链式串的基本操作\"><a name=\"t1\"></a>2. 链式串的基本操作</h3>\n\n<p>1.串赋值：StrAssign(s,cstr)</p>\n\n<p>  将一个字符串常量cstr赋给串s（采用尾插法） <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182643824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs cpp has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">void</span> StrAssign(LiString *&amp;s,<span class=\"hljs-keyword\">char</span> cstr[])\n{\n    <span class=\"hljs-keyword\">int</span> i;\n    LiString *r,*p;\n    s=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n    r=s; <span class=\"hljs-comment\">//r始终指向尾节点</span>\n    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; cstr[i]!=<span class=\"hljs-string\">'\\0'</span>; i++)\n    {\n       p=(LiString *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LiString));\n       p-&gt;data=cstr[i];\n       r-&gt;next=p;\n       r=p;\n    }\n    r-&gt;next=NULL;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>2.串复制: StrCopy(s,t)</p>\n\n<p>  将串t复制给串s <br>\n</p><center><img src=\"https://img-blog.csdn.net/20180622182818973?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></center><p></p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-literal\">void</span> StrCopy(LiString <span class=\"hljs-subst\">*&amp;</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    s<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>s; <span class=\"hljs-comment\">//r始终指向串s的尾节点</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>) <span class=\"hljs-comment\">//p将串t的所有节点复制到串s中</span>\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\n\n<p>3.判串相等：StrEqual(s,t)</p>\n\n<p>  若两个串s与t相等返回真（1）；否则返回假（0）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">bool StrEqual(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">==</span>q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>)\n    {\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n       q<span class=\"hljs-subst\">=</span>q<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    <span class=\"hljs-keyword\">if</span> (p<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span> <span class=\"hljs-subst\">&amp;&amp;</span> q<span class=\"hljs-subst\">==</span><span class=\"hljs-built_in\">NULL</span>)\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">else</span>\n       <span class=\"hljs-comment\">//说明p和q有一个不为空</span>\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li></ul></pre>\n\n<p>4.求串长：StrLength(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\"><span class=\"hljs-keyword\">int</span> StrLength(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n       i++;\n       p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> i;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li></ul></pre>\n\n<p>5.串连接：Concat(s,t)</p>\n\n<p>  将两个串s和t连接形成新串，返回这个新串。</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs lasso has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-subst\">*</span>Concat(LiString <span class=\"hljs-subst\">*</span>s,LiString <span class=\"hljs-subst\">*</span>t)\n{\n    LiString <span class=\"hljs-subst\">*</span>str,<span class=\"hljs-subst\">*</span>p<span class=\"hljs-subst\">=</span>s<span class=\"hljs-subst\">-&gt;</span>next,<span class=\"hljs-subst\">*</span>q,<span class=\"hljs-subst\">*</span>r;\n    <span class=\"hljs-comment\">//新串str</span>\n    str<span class=\"hljs-subst\">=</span>(LiString <span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n    r<span class=\"hljs-subst\">=</span>str;\n    <span class=\"hljs-comment\">//将s的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    p<span class=\"hljs-subst\">=</span>t<span class=\"hljs-subst\">-&gt;</span>next;\n    <span class=\"hljs-comment\">//将t的所有节点复制到str</span>\n    <span class=\"hljs-keyword\">while</span> (p<span class=\"hljs-subst\">!=</span><span class=\"hljs-built_in\">NULL</span>)\n    {\n       q<span class=\"hljs-subst\">=</span>(LiString<span class=\"hljs-subst\">*</span>)malloc(sizeof(LiString));\n       q<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span><span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span><span class=\"hljs-built_in\">data</span>;\n       r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span>q;\n       r<span class=\"hljs-subst\">=</span>q;\n       p<span class=\"hljs-subst\">=</span>p<span class=\"hljs-subst\">-&gt;</span>next;\n    }\n    r<span class=\"hljs-subst\">-&gt;</span>next<span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li></ul></pre>\n\n<p>6.求子串: SubStr(s,i,j)</p>\n\n<p>  返回串s中从第i个字符开始的、由连续j个字符组成的子串。 <br>\n  参数不正确时返回一个空串 （1≤i≤StrLength(s)）</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">LiString <span class=\"hljs-variable\">*SubStr</span>(LiString <span class=\"hljs-variable\">*s</span>,<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)\n{\n    <span class=\"hljs-keyword\">int</span> k;\n    LiString <span class=\"hljs-variable\">*str</span>,<span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>,<span class=\"hljs-variable\">*q</span>,<span class=\"hljs-variable\">*r</span>;\n    str=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n    str-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    r=str; <span class=\"hljs-regexp\">//r</span>指向新串str的尾节点\n    <span class=\"hljs-keyword\">if</span> (i&lt;=<span class=\"hljs-number\">0</span> || i&gt;StrLength(<span class=\"hljs-keyword\">s</span>) || j&lt;<span class=\"hljs-number\">0</span> || i+j-<span class=\"hljs-number\">1</span>&gt;StrLength(<span class=\"hljs-keyword\">s</span>))\n        <span class=\"hljs-keyword\">return</span> str; <span class=\"hljs-regexp\">//</span>参数非法时的处理\n    //移动到串<span class=\"hljs-keyword\">s</span>的第i个节点\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">0</span>; k&lt;i-<span class=\"hljs-number\">1</span>; k++)\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-regexp\">//</span>将<span class=\"hljs-keyword\">s</span>的第i个节点开始的j个节点复制到str\n    <span class=\"hljs-keyword\">for</span> (k=<span class=\"hljs-number\">1</span>; k&lt;=j; k++)\n    {\n        <span class=\"hljs-keyword\">q</span>=(LiString <span class=\"hljs-variable\">*)</span>malloc(sizeof(LiString));\n        <span class=\"hljs-keyword\">q</span>-&gt;data=p-&gt;data;\n        r-&gt;<span class=\"hljs-keyword\">next</span>=<span class=\"hljs-keyword\">q</span>;\n        r=<span class=\"hljs-keyword\">q</span>;\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    //将尾节点的<span class=\"hljs-keyword\">next</span>置为NULL\n    r-&gt;<span class=\"hljs-keyword\">next</span>=NULL;\n    <span class=\"hljs-keyword\">return</span> str;\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li></ul></pre>\n\n<p>7.输出串：DispStr(s)</p>\n\n\n\n<pre class=\"prettyprint\" name=\"code\"><code class=\"hljs perl has-numbering\" onclick=\"mdcp.copyCode(event)\">void DispStr(LiString <span class=\"hljs-variable\">*s</span>)\n{\n    LiString <span class=\"hljs-variable\">*p</span>=<span class=\"hljs-keyword\">s</span>-&gt;<span class=\"hljs-keyword\">next</span>;\n    <span class=\"hljs-keyword\">while</span> (p!=NULL)\n    {\n        <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"<span class=\"hljs-variable\">%c</span>\"</span>,p-&gt;data);\n        p=p-&gt;<span class=\"hljs-keyword\">next</span>;\n    }\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n}<div class=\"hljs-button {2}\" data-title=\"复制\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre>          </div>\n          <link href=\"https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css\" rel=\"stylesheet\">\n                  </div>\n  </article>\n</div>"]],[23760,23760],[1953,1953]]],[1559117577018,["GJX@GJXAIOU",[[-1,1949,"因袭"]],[1951,1951],[1949,1949]]],[1559117587077,["GJX@GJXAIOU",[[1,1949,"因袭"]],[1949,1949],[1951,1951]]],[1559117588903,["GJX@GJXAIOU",[[-1,1949,"因袭"]],[1951,1951],[1949,1949]]],[1559117591820,["GJX@GJXAIOU",[[1,1949,"因此使用"]],[1949,1949],[1953,1953]]],[1559117595342,["GJX@GJXAIOU",[[-1,1951,"使用"]],[1953,1953],[1951,1951]]],[1559117612698,["GJX@GJXAIOU",[[1,1951,"一个结点一般防止多个字符；具体防止"]],[1951,1951],[1968,1968]]],[1559117621705,["GJX@GJXAIOU",[[1,1968,"数目根据实际情况；"]],[1968,1968],[1977,1977]]],[1559117623449,["GJX@GJXAIOU",[[1,1981,"\n"]],[1977,1977],[1978,1978]]],[1559117624849,["GJX@GJXAIOU",[[1,1982,"\n"]],[1978,1978],[1979,1979]]],[1559117626004,["GJX@GJXAIOU",[[1,1979,"===="]],[1979,1979],[1981,1981]]],[1559117666723,["GJX@GJXAIOU",[[1,1981,"串的链式存储结构除了方便与连接串和串操作的时候便利，总体不如顺序存储"]],[1981,1981],[2015,2015]]],[1559117785179,["GJX@GJXAIOU",[[1,2021,"\n"]],[2018,2018],[2019,2019]]],[1559117785312,["GJX@GJXAIOU",[[1,2022,"\n"]],[2019,2019],[2020,2020]]],[1559117785415,["GJX@GJXAIOU",[[1,2023,"\n"]],[2020,2020],[2021,2021]]],[1559117786226,["GJX@GJXAIOU",[[1,2024,"\n"]],[2021,2021],[2022,2022]]],[1559117792996,["GJX@GJXAIOU",[[1,2022,"## 5.5 朴素的"]],[2022,2022],[2032,2032]]],[1559117798387,["GJX@GJXAIOU",[[1,2032,"模式匹配算法"]],[2032,2032],[2038,2038]]],[1559117810215,["GJX@GJXAIOU",[[1,2041,"\n"]],[2038,2038],[2039,2039]]],[1559117811433,["GJX@GJXAIOU",[[1,2042,"\n"]],[2039,2039],[2040,2040]]],[1559117832122,["GJX@GJXAIOU",[[1,2040,"即是：子串的定位操作（）"]],[2040,2040],[2052,2052]]],[1559117835113,["GJX@GJXAIOU",[[1,2051,"也称为"]],[2051,2051],[2054,2054]]],[1559117870059,["GJX@GJXAIOU",[[1,2054,"串的模式匹配"]],[2054,2054],[2060,2060]]],[1559117921776,["GJX@GJXAIOU",[[1,2064,"\n"]],[2061,2061],[2062,2062]]],[1559117931709,["GJX@GJXAIOU",[[1,2062,"朴素的模式匹配算法就是"]],[2062,2062],[2073,2073]]],[1559117932256,["GJX@GJXAIOU",[[-1,2071,"就是"]],[2073,2073],[2071,2071]]],[1559117937474,["GJX@GJXAIOU",[[1,2071,"就是挨个以为"]],[2071,2071],[2077,2077]]],[1559117938394,["GJX@GJXAIOU",[[-1,2075,"以为"]],[2077,2077],[2075,2075]]],[1559117949530,["GJX@GJXAIOU",[[1,2075,"移位进行匹配；"]],[2075,2075],[2082,2082]]],[1559117950344,["GJX@GJXAIOU",[[1,2085,"\n"]],[2082,2082],[2083,2083]]],[1559117950479,["GJX@GJXAIOU",[[1,2086,"\n"]],[2083,2083],[2084,2084]]],[1559117950607,["GJX@GJXAIOU",[[1,2087,"\n"]],[2084,2084],[2085,2085]]],[1559117951151,["GJX@GJXAIOU",[[1,2088,"\n"]],[2085,2085],[2086,2086]]],[1559117966131,["GJX@GJXAIOU",[[1,2086,"## 5.6 KMP模式匹配算法"]],[2086,2086],[2102,2102]]],[1559117966840,["GJX@GJXAIOU",[[1,2105,"\n"]],[2102,2102],[2103,2103]]],[1559117999274,["GJX@GJXAIOU",[[1,2083,"容易造成大量的重复遍历温情"]],[2083,2083],[2096,2096]]],[1559118002178,["GJX@GJXAIOU",[[-1,2094,"温情"]],[2096,2096],[2094,2094]]],[1559118004410,["GJX@GJXAIOU",[[1,2094,"问题；"]],[2094,2094],[2097,2097]]],[1559118313294,["GJX@GJXAIOU",[[1,2120,"\n"]],[2117,2117],[2118,2118]]],[1559118331339,["GJX@GJXAIOU",[[1,2118,"引入：主串："]],[2118,2118],[2124,2124]]],[1559118336995,["GJX@GJXAIOU",[[-1,2123,"："]],[2124,2124],[2123,2123]]],[1559118340801,["GJX@GJXAIOU",[[1,2123,"S= \""]],[2123,2123],[2127,2127]]],[1559118340826,["GJX@GJXAIOU",[[-1,2126,"\""],[1,2127,"“"]],[2127,2127],[2127,2127]]],[1559118355943,["GJX@GJXAIOU",[[1,2127,"abcdefgab\""]],[2127,2127],[2137,2137]]],[1559118355969,["GJX@GJXAIOU",[[-1,2136,"\""],[1,2137,"”"]],[2137,2137],[2137,2137]]],[1559118358593,["GJX@GJXAIOU",[[1,2137,"   /"]],[2137,2137],[2141,2141]]],[1559118359263,["GJX@GJXAIOU",[[-1,2140,"/"]],[2141,2141],[2140,2140]]],[1559118370201,["GJX@GJXAIOU",[[1,2140,"; 子串T=\""]],[2140,2140],[2147,2147]]],[1559118370228,["GJX@GJXAIOU",[[-1,2146,"\""],[1,2147,"“"]],[2147,2147],[2147,2147]]],[1559118377521,["GJX@GJXAIOU",[[1,2147,"abcdex\""]],[2147,2147],[2154,2154]]],[1559118377549,["GJX@GJXAIOU",[[-1,2153,"\""],[1,2154,"”"]],[2154,2154],[2154,2154]]],[1559118382944,["GJX@GJXAIOU",[[1,2120,"1"]],[2120,2120],[2121,2121]]],[1559118483222,["GJX@GJXAIOU",[[1,2158,"\n"]],[2155,2155],[2156,2156]]],[1559118491902,["GJX@GJXAIOU",[[1,2156,"diyi"]],[2156,2156],[2160,2160]]],[1559118492997,["GJX@GJXAIOU",[[-1,2156,"diyi"]],[2160,2160],[2156,2156]]],[1559118511667,["GJX@GJXAIOU",[[1,2156,"第一波匹配：发现到第6个"]],[2156,2156],[2168,2168]]],[1559118515549,["GJX@GJXAIOU",[[1,2168,"菜"]],[2168,2168],[2169,2169]]],[1559118516654,["GJX@GJXAIOU",[[-1,2168,"菜"]],[2169,2169],[2168,2168]]],[1559118522095,["GJX@GJXAIOU",[[1,2168,"菜不想"]],[2168,2168],[2171,2171]]],[1559118524606,["GJX@GJXAIOU",[[-1,2168,"菜不想"]],[2171,2171],[2168,2168]]],[1559118573604,["GJX@GJXAIOU",[[1,2168,"才不相同，而且字符串子串T中首字母和后面所有字符都不相等，"]],[2168,2168],[2197,2197]]],[1559118599901,["GJX@GJXAIOU",[[1,2197,"同时子串T的前五个字符和主串分别相等，则"]],[2197,2197],[2217,2217]]],[1559118608295,["GJX@GJXAIOU",[[-1,2215,"，则"]],[2217,2217],[2215,2215]]],[1559118608794,["GJX@GJXAIOU",[[1,2215,"；"]],[2215,2215],[2216,2216]]],[1559118609054,["GJX@GJXAIOU",[[1,2219,"\n"]],[2216,2216],[2217,2217]]],[1559118627578,["GJX@GJXAIOU",[[1,2217,"则第二波匹配不再是使用子串T的"]],[2217,2217],[2232,2232]]],[1559118628591,["GJX@GJXAIOU",[[-1,2231,"的"]],[2232,2232],[2231,2231]]],[1559118629442,["GJX@GJXAIOU",[[1,2231,"和"]],[2231,2231],[2232,2232]]],[1559118647259,["GJX@GJXAIOU",[[1,2232,"主串S的第二项开始比较，而是"]],[2232,2232],[2246,2246]]],[1559118668885,["GJX@GJXAIOU",[[1,2216,"所以子串首字符不可能和主串前往"]],[2216,2216],[2231,2231]]],[1559118669633,["GJX@GJXAIOU",[[-1,2230,"往"]],[2231,2231],[2230,2230]]],[1559118675825,["GJX@GJXAIOU",[[1,2230,"5个字符相等；"]],[2230,2230],[2237,2237]]],[1559118689094,["GJX@GJXAIOU",[[1,2267,"直接和第6个字符相比较；"]],[2267,2267],[2279,2279]]],[1559118716674,["GJX@GJXAIOU",[[1,2282,"\n"]],[2279,2279],[2280,2280]]],[1559118716822,["GJX@GJXAIOU",[[1,2283,"\n"]],[2280,2280],[2281,2281]]],[1559118727395,["GJX@GJXAIOU",[[1,2281,"引入2：主串 S= '"]],[2281,2281],[2292,2292]]],[1559118727422,["GJX@GJXAIOU",[[-1,2291,"'"],[1,2292,"‘"]],[2292,2292],[2292,2292]]],[1559118728416,["GJX@GJXAIOU",[[-1,2291,"‘"]],[2292,2292],[2291,2291]]],[1559118729083,["GJX@GJXAIOU",[[1,2291,"\""]],[2291,2291],[2292,2292]]],[1559118729108,["GJX@GJXAIOU",[[-1,2291,"\""],[1,2292,"“"]],[2292,2292],[2292,2292]]],[1559118740066,["GJX@GJXAIOU",[[1,2292,"abcababca\""]],[2292,2292],[2302,2302]]],[1559118740093,["GJX@GJXAIOU",[[-1,2301,"\""],[1,2302,"”"]],[2302,2302],[2302,2302]]],[1559118753562,["GJX@GJXAIOU",[[1,2302," ,"]],[2302,2302],[2304,2304]]],[1559118754649,["GJX@GJXAIOU",[[1,2304,"z"]],[2304,2304],[2305,2305]]],[1559118755198,["GJX@GJXAIOU",[[-1,2304,"z"]],[2305,2305],[2304,2304]]],[1559118761497,["GJX@GJXAIOU",[[1,2304,"子串T=\""]],[2304,2304],[2309,2309]]],[1559118761523,["GJX@GJXAIOU",[[-1,2308,"\""],[1,2309,"“"]],[2309,2309],[2309,2309]]],[1559118768563,["GJX@GJXAIOU",[[1,2309,"abcabx\""]],[2309,2309],[2316,2316]]],[1559118768591,["GJX@GJXAIOU",[[-1,2315,"\""],[1,2316,"”"]],[2316,2316],[2316,2316]]],[1559118938545,["GJX@GJXAIOU",[[1,2319,"\n"]],[2316,2316],[2317,2317]]],[1559118942208,["GJX@GJXAIOU",[[1,2317,"diyi"]],[2317,2317],[2321,2321]]],[1559118943699,["GJX@GJXAIOU",[[-1,2317,"diyi"]],[2321,2321],[2317,2317]]],[1559118963888,["GJX@GJXAIOU",[[1,2317,"第一波匹配：发现到第6个 "]],[2317,2317],[2330,2330]]],[1559118965303,["GJX@GJXAIOU",[[-1,2329," "]],[2330,2330],[2329,2329]]],[1559118977833,["GJX@GJXAIOU",[[1,2329,"才不相同，但是"]],[2329,2329],[2336,2336]]],[1559119290378,["GJX@GJXAIOU",[[1,2336,"因为子串T"]],[2336,2336],[2341,2341]]],[1559119344579,["GJX@GJXAIOU",[[1,2341,"的首字母和后面的"]],[2341,2341],[2349,2349]]],[1559119345305,["GJX@GJXAIOU",[[-1,2346,"后面的"]],[2349,2349],[2346,2346]]],[1559119353168,["GJX@GJXAIOU",[[1,2346,"后面的第4"]],[2346,2346],[2351,2351]]],[1559119366834,["GJX@GJXAIOU",[[1,2351,"个字符相等，所以直接从"]],[2351,2351],[2362,2362]]],[1559119373033,["GJX@GJXAIOU",[[-1,2356,"，所以直接从"]],[2362,2362],[2356,2356]]],[1559119373792,["GJX@GJXAIOU",[[1,2356,"；"]],[2356,2356],[2357,2357]]],[1559119374743,["GJX@GJXAIOU",[[1,2360,"\n"]],[2357,2357],[2358,2358]]],[1559119410859,["GJX@GJXAIOU",[[1,2358,"则第二波匹配直接和主串的第5个字符比较即可，"]],[2358,2358],[2380,2380]]],[1559119425100,["GJX@GJXAIOU",[[1,2380,"，"]],[2380,2380],[2381,2381]]],[1559119425743,["GJX@GJXAIOU",[[-1,2380,"，"]],[2381,2381],[2380,2380]]],[1559119459627,["GJX@GJXAIOU",[[1,2380,"同时T中首位的a和第四位的a相同，第二位的b和第5为的"]],[2380,2380],[2407,2407]]],[1559119460374,["GJX@GJXAIOU",[[-1,2405,"为的"]],[2407,2407],[2405,2405]]],[1559119469874,["GJX@GJXAIOU",[[1,2405,"位的b相同，而"]],[2405,2405],[2412,2412]]],[1559119474724,["GJX@GJXAIOU",[[1,2412,"第一批"]],[2412,2412],[2415,2415]]],[1559119475295,["GJX@GJXAIOU",[[-1,2414,"批"]],[2415,2415],[2414,2414]]],[1559119480154,["GJX@GJXAIOU",[[1,2414,"波匹配中"]],[2414,2414],[2418,2418]]],[1559119591129,["GJX@GJXAIOU",[[1,2418,"T中第四位和第五位已经和主串S中的对应位置比较过了"]],[2418,2418],[2443,2443]]],[1559119653179,["GJX@GJXAIOU",[[1,2443,"，是相等的，因此这里的T的首字母和第二位"]],[2443,2443],[2463,2463]]],[1559119676813,["GJX@GJXAIOU",[[1,2463,"字符就不必再次比较了；"]],[2463,2463],[2474,2474]]],[1559119738321,["GJX@GJXAIOU",[[1,2477,"\n"]],[2474,2474],[2475,2475]]],[1559119738470,["GJX@GJXAIOU",[[1,2478,"\n"]],[2475,2475],[2476,2476]]],[1559119739296,["GJX@GJXAIOU",[[1,2479,"\n"]],[2476,2476],[2477,2477]]],[1559119744284,["GJX@GJXAIOU",[[1,2477,"这里定义I"]],[2477,2477],[2482,2482]]],[1559119744887,["GJX@GJXAIOU",[[-1,2481,"I"]],[2482,2482],[2481,2481]]],[1559119749611,["GJX@GJXAIOU",[[1,2481,"i值（）"]],[2481,2481],[2485,2485]]],[1559119758340,["GJX@GJXAIOU",[[1,2484,"主串当前位置的下标"]],[2484,2484],[2493,2493]]],[1559119772897,["GJX@GJXAIOU",[[1,2494,"，KMP算法"]],[2494,2494],[2500,2500]]],[1559119810887,["GJX@GJXAIOU",[[1,2500,"是实现i值不回溯，就是只能变大不能变小，因此因为可变话的ej"]],[2500,2500],[2530,2530]]],[1559119812989,["GJX@GJXAIOU",[[-1,2528,"ej"]],[2530,2530],[2528,2528]]],[1559119831034,["GJX@GJXAIOU",[[1,2528,"j值进行判断子串中首字母和后面"]],[2528,2528],[2543,2543]]],[1559119884973,["GJX@GJXAIOU",[[1,2543,"字符的比较，因此j值的多少取决于当前字符之前的串的前后缀的相似度；"]],[2543,2543],[2576,2576]]],[1559119913426,["GJX@GJXAIOU",[[1,2477,"\n"]],[2476,2476],[2477,2477]]],[1559119943236,["GJX@GJXAIOU",[[1,2477,"### 5.6.1 判断子串中首字母与后面字符的相似度"]],[2477,2477],[2504,2504]]],[1559119946360,["GJX@GJXAIOU",[[1,2607,"\n"]],[2604,2604],[2605,2605]]],[1559119947172,["GJX@GJXAIOU",[[1,2608,"\n"]],[2605,2605],[2606,2606]]],[1559119953596,["GJX@GJXAIOU",[[1,2606,"将T串"]],[2606,2606],[2609,2609]]],[1559119985937,["GJX@GJXAIOU",[[1,2609,"各个位置的j值变换定义为一个数组next,数组长度就是子串的长苏"]],[2609,2609],[2641,2641]]],[1559119986554,["GJX@GJXAIOU",[[-1,2639,"长苏"]],[2641,2641],[2639,2639]]],[1559119995379,["GJX@GJXAIOU",[[1,2639,"长度，定义乳腺"]],[2639,2639],[2646,2646]]],[1559119995999,["GJX@GJXAIOU",[[-1,2644,"乳腺"]],[2646,2646],[2644,2644]]],[1559120002185,["GJX@GJXAIOU",[[1,2644,"如下："]],[2644,2644],[2647,2647]]],[1559120002410,["GJX@GJXAIOU",[[1,2650,"\n"]],[2647,2647],[2648,2648]]],[1559120385624,["GJX@GJXAIOU",[[1,2649,"![数组next定义]($resource/%E6%95%B0%E7%BB%84next%E5%AE%9A%E4%B9%89.jpg)"]],[2649,2649],[2717,2717]]],[1559120388059,["GJX@GJXAIOU",[[1,2718,"\n"]],[2717,2717],[2718,2718]]],[1559120388197,["GJX@GJXAIOU",[[1,2719,"\n"]],[2718,2718],[2719,2719]]],[1559120549587,["GJX@GJXAIOU",[[1,2718,"示例："]],[2718,2718],[2721,2721]]],[1559120550835,["GJX@GJXAIOU",[[1,2723,"\n"]],[2721,2721],[2722,2722]]],[1559120588581,["GJX@GJXAIOU",[[1,2722,"![next数组值推导示例]($resource/next%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC%E7%A4%BA%E4%BE%8B.jpg)"]],[2722,2722],[2820,2820]]],[1559120590728,["GJX@GJXAIOU",[[1,2821,"\n"]],[2820,2820],[2821,2821]]],[1559120590863,["GJX@GJXAIOU",[[1,2822,"\n"]],[2821,2821],[2822,2822]]],[1559120669382,["GJX@GJXAIOU",[[1,2118,"\n"]],[2117,2117],[2118,2118]]],[1559120669503,["GJX@GJXAIOU",[[1,2119,"\n"]],[2118,2118],[2119,2119]]],[1559120671076,["GJX@GJXAIOU",[[1,2120,"\n"]],[2117,2117],[2118,2118]]],[1559120672985,["GJX@GJXAIOU",[[1,2118,"一般"]],[2118,2118],[2120,2120]]],[1559120701898,["GJX@GJXAIOU",[[1,2120,"仅仅当模式与主串中间存在许多的“部分匹配的"]],[2120,2120],[2141,2141]]],[1559120702371,["GJX@GJXAIOU",[[-1,2140,"的"]],[2141,2141],[2140,2140]]],[1559120719725,["GJX@GJXAIOU",[[1,2140,"”的情况下，优势较为明显，否则插件"]],[2140,2140],[2157,2157]]],[1559120720449,["GJX@GJXAIOU",[[-1,2155,"插件"]],[2157,2157],[2155,2155]]],[1559120723537,["GJX@GJXAIOU",[[1,2155,"差距不大；"]],[2155,2155],[2160,2160]]],[1559120804459,["GJX@GJXAIOU",[[1,2868,"\n"]],[2865,2865],[2866,2866]]],[1559120804834,["GJX@GJXAIOU",[[1,2869,"\n"]],[2866,2866],[2867,2867]]],[1559120805014,["GJX@GJXAIOU",[[1,2870,"\n"]],[2867,2867],[2868,2868]]],[1559120805180,["GJX@GJXAIOU",[[1,2871,"\n"]],[2868,2868],[2869,2869]]],[1559120805357,["GJX@GJXAIOU",[[1,2872,"\n"]],[2869,2869],[2870,2870]]],[1559120805508,["GJX@GJXAIOU",[[1,2873,"\n"]],[2870,2870],[2871,2871]]],[1559120805647,["GJX@GJXAIOU",[[1,2874,"\n"]],[2871,2871],[2872,2872]]],[1559120805780,["GJX@GJXAIOU",[[1,2875,"\n"]],[2872,2872],[2873,2873]]],[1559120805912,["GJX@GJXAIOU",[[1,2876,"\n"]],[2873,2873],[2874,2874]]],[1559120806006,["GJX@GJXAIOU",[[1,2877,"\n"]],[2874,2874],[2875,2875]]],[1559120806160,["GJX@GJXAIOU",[[1,2878,"\n"]],[2875,2875],[2876,2876]]],[1559120809065,["GJX@GJXAIOU",[[1,2876,"代码："]],[2876,2876],[2879,2879]]],[1559120809815,["GJX@GJXAIOU",[[1,2882,"\n"]],[2879,2879],[2880,2880]]],[1559122144151,["GJX@GJXAIOU",[[1,2880,"···"]],[2880,2880],[2883,2883]]],[1559122145397,["GJX@GJXAIOU",[[-1,2880,"···"]],[2883,2883],[2880,2880]]],[1559122146670,["GJX@GJXAIOU",[[1,2880,"```"]],[2880,2880],[2883,2883]]],[1559122146698,["GJX@GJXAIOU",[[1,2883,"language\n```\n"]],[2883,2883],[2883,2891]]],[1559122147999,["GJX@GJXAIOU",[[-1,2883,"language"],[1,2891,"c"]],[2883,2891],[2884,2884]]],[1559122148278,["GJX@GJXAIOU",[[1,2885,"\n"]],[2884,2884],[2885,2885]]],[1559122149200,["GJX@GJXAIOU",[[1,2885,"/*\n\t求模式串T的next函数修正值并存入数组nextval\n*/\n\nvoid get_nextval(String T, int *nextval){\n\tint i ,j;\n\ti = 1;\n\tj = 0;\n\tnextval[1] = 0;\n\twhile(i<T[0]){ //此处的T[0]表示串T的长度\n\t\tif (j==0 || T[i] == T[j]){ //T[i]表示后缀的单个字符，T[j]表示前缀的单个字符\n\t\t\t++i;\n\t\t\t++j;\n\t\t\tif (T[i] != T[j]){ //若当前字符与前缀字符不同\n\t\t\t\tnextval[i] = j; //则当前的j为nextval在i位置的值\n\t\t\t}else{\n\t\t\t\tnextval[i] = nextval[j]; //如果与前缀字符相同，则将前缀字符的nextval值赋值给nextval在i位置的值\n\t\t\t}\n\t\t}\n\n\t}else{\n\t\tj = nextval[j]; //若字符不同，则j值回溯\n\t}\n}\n\n\n\n\n/*\n\t本段为了计算当前要匹配的串T的next数组\n\t返回子串T在主串S中的第pos个字符之后的位置，若不存在，则函数返回值为0；\n\tT非空，1<=pos<=StrLength(S)\n*/\n\nint Index_KMP(String S, String T, int pos){\n\tint i = pos; //i用于主串S当前位置下标值，若pos不为1则从pos位置开始匹配\n\tint j = 1; //j用于子串T中当前位置的下标值\n\tint nextval[255];  //定义一个next数组\n\tget_nextval(T, nextval); //对T记性分析，得到next数组\n\twhile(i <= s[0] && j <=T[0]){ //若i小于S的长度且j小于T的长度时，循环继续\n\t\tif (j == 0 || S[i] == T[j]){ //两个字母相等则继续，相对于朴素算法增加了j = 0 的判断\n\t\t\t++i;\n\t\t\t++j;\t\n\t\t}else{ //指针后退重新开始匹配\n\t\t\tj = nextval[j]; //j退到合适的位置，i值不变\n\t\t}\n\t}\n\tif (j > T[0]){\n\t\treturn i - T[0];\n\t}else{\n\t\treturn 0;\n\t}\n}\n"]],[2885,2885],[3892,3892]]],[1559130478537,["GJX@GJXAIOU",[[1,2871,"                                                            "]],[2871,2871],[2931,2931]]],[1559130485593,["GJX@GJXAIOU",[[-1,2871,"                                                            "]],[2931,2931],[2871,2871]]],[1559130485629,["GJX@GJXAIOU",[[-1,2875,"\n"]],[2871,2871],[2870,2870]]],[1559130485662,["GJX@GJXAIOU",[[-1,2874,"\n"]],[2870,2870],[2869,2869]]],[1559130485696,["GJX@GJXAIOU",[[-1,2873,"\n"]],[2869,2869],[2868,2868]]],[1559130485727,["GJX@GJXAIOU",[[-1,2872,"\n"]],[2868,2868],[2867,2867]]],[1559130734957,["GJX@GJXAIOU",[[1,2872,"\n"]],[2867,2867],[2868,2868]]],[1559130735098,["GJX@GJXAIOU",[[1,2873,"\n"]],[2868,2868],[2869,2869]]],[1559130737531,["GJX@GJXAIOU",[[1,2869,"shili"]],[2869,2869],[2874,2874]]],[1559130738537,["GJX@GJXAIOU",[[-1,2869,"shili"]],[2874,2874],[2869,2869]]],[1559130738685,["GJX@GJXAIOU",[[-1,2873,"\n"]],[2869,2869],[2868,2868]]],[1559130739712,["GJX@GJXAIOU",[[1,2868,"示例，"]],[2868,2868],[2871,2871]]],[1559130740787,["GJX@GJXAIOU",[[-1,2870,"，"]],[2871,2871],[2870,2870]]],[1559130754247,["GJX@GJXAIOU",[[1,2870,"：nextval数组值"]],[2870,2870],[2881,2881]]],[1559130755702,["GJX@GJXAIOU",[[1,2881,"推导"]],[2881,2881],[2883,2883]]],[1559130756740,["GJX@GJXAIOU",[[1,2888,"\n"]],[2883,2883],[2884,2884]]],[1559130897539,["GJX@GJXAIOU",[[1,2885,"![nextval数组值推导1]($resource/nextval%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC1.jpg)\n![nextval数组值推导2]($resource/nextval%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC2.jpg)"]],[2885,2885],[3057,3057]]],[1559130900147,["GJX@GJXAIOU",[[1,2971,"\n"]],[2970,2970],[2971,2971]]]],null,"GJX@GJXAIOU"],["3c137325-e0d7-48ca-813d-9efde22aaa8a",1559175577665,"# 串\n\n## 5.1 字符串的定义\n**串（string）**：有零个或者多个字符组成的有限序列（序列：即字符串的相邻字符之间具有前驱和后继的关系），一般记为：`s = “a1a2a3......an”`,可以直接使用双引号`\"\"`表示空字符串。\n\n**PS：**\n-  空格串：只包含空格的串（可以不止一个空格），是有内容有长度的，不等于空字符串；\n- 子串：串中任意个数的**连续字符**组成的子序列称为该串的子串；子串在主串中的位置就是子串的第一个字符在主串中的序号；\n- 主串：包含子串的串称为主串；\n\n\n## 5.2 串的比较\n\n- 常见的编码：\n  - ASCII：，每个字符由7个二进制位表示，共计可表示128个字符，后拓展使用8个二进制表示，可表示256个字符；\n  - Unicode：每个字符由16位二\n  进制表示，前256个字符与ASCII相同；\n\n- 判定两个字符串大小标准：\n  - 如果s1字符串从开头开始为S2字符串的子串，且长度小于s2,则 s1<s2;\n  - 如果两个字符串中挨个字符比较，在最先不同的字符上s1较小，则 s1<s2;\n\n\n## 5.3 串的抽象数据类型\n当然不同的编程语言对于字符串操作方法名称有所不同，需要根据实际修改；\n```c\n\tADT 串(string)\n\tData\n\t  串中元素仅有一个字符组成，相邻元素具有前驱和后继关系。\n\tOperation\n\t  StrAssign(T,*chars):生成一个其值等于字符串常量chars的串T。\n\t  StrCopy(T,S):串S存在，由串S复制得串T。\n\t  ClearString(S):串S存在，将串复制得串T。\n\t  StringEmpty(S):若串S为空，返回true，否则返回false。\n\t  StrLength(S):返回串S的元素个数，即串的长度。\n\t  StrCompare(S,T):若S>T,返回值>0,若S=T,返回0，若S<T,返回值<0。\n\t  Concat(T,S1,S2):用T返回由S1和S2联接成的新串。\n\t  SubString(Sub,S,pos,len):串S存在，1<=pos<=StrLength(S),且0<=len<=StrLength(S)-pos+1,用Sub返回串S的第pos个字符起长度为len的子串。\n\t  Index(S,T,pos):串S和T存在，T是非空串，1<=pos<=StrLength(S),若主串S中存在和串T值相同的子串，则返回它在主串S中第pos个字符之后第一次出现的位置，否则返回0.\n\t  Replace(S,T,V):串S、T和V存在，T是非空串。用V替换主串S中出现的所有与T相等的不重叠的子串。\n\t  StrInsert(S,pos,T):串S和T存在，1<=pos<=StrLength(S)+1,在串S的第pos个字符之前插入串T。\n\t  StrDelete(S,pos,len):串S存在，1<=pos<=STrLength(S)-len+1,从串S中删除第pos个字符起长度为len的子串。\n\tendADT\n```\n\n以index的实现为示例代码：\n```c\n//T为非空串，如果主串S中第pos个字符之后存在于T相等的子串，则返回第一个这样的子串在S中的位置，否则返回0；\n\nint Index(String S, String T, int pos){\n  int n,m,i;\n  String sub;\n  if(pos > 0){\n     n = StrLength(S);\n     m = StrLength(T);\n     i = pos;\n     while(i <= n-m+1){\n     \t\tSubString(sub,S,i,m); //取主串第i个位置，长度与T相等的子串给sub\n     \t\tif (StrCompare(sub,T) != 0){  //如果两个字符串不相等\n     \t\t\t++i;\n     \t\t}else{\n     \t\t\treturn i;\n     \t\t}\n     }\n  }\n  return 0;   //若无子串与T相等，则返回0\n\n}\n\n```\n\n\n## 5.4 串的存储结构\n\n### 5.4.1 串的顺序存储结构\n使用定长数组来存储字符串，可以在串值后面加一个不计入串长度的结束标记字符，比如“\\0”来表示串值的终结；\n\n实际使用过程中经常使用堆来动态分配； 即使用函数malloc 和free进行管理；\n\n### 5.4.2 串的链式存储结构\n\n与线性表类似，如果一个节点只放置一个字符浪费空间，因此一个结点一般防止多个字符；具体防止数目根据实际情况；\n\n==串的链式存储结构除了方便与连接串和串操作的时候便利，总体不如顺序存储==\n\n\n\n\n## 5.5 朴素的模式匹配算法\n\n即是：子串的定位操作（也称为串的模式匹配）\n朴素的模式匹配算法就是挨个移位进行匹配；\n容易造成大量的重复遍历问题；\n\n\n## 5.6 KMP模式匹配算法\n\n一般仅仅当模式与主串中间存在许多的“部分匹配”的情况下，优势较为明显，否则差距不大；\n\n\n引入1：主串S= “abcdefgab”   ; 子串T=“abcdex”\n第一波匹配：发现到第6个才不相同，而且字符串子串T中首字母和后面所有字符都不相等，同时子串T的前五个字符和主串分别相等；所以子串首字符不可能和主串前5个字符相等；\n则第二波匹配不再是使用子串T和主串S的第二项开始比较，而是直接和第6个字符相比较；\n\n引入2：主串 S= “abcababca” ,子串T=“abcabx”\n第一波匹配：发现到第6个才不相同，但是因为子串T的首字母和后面的第4个字符相等；\n则第二波匹配直接和主串的第5个字符比较即可，同时T中首位的a和第四位的a相同，第二位的b和第5位的b相同，而第一波匹配中T中第四位和第五位已经和主串S中的对应位置比较过了，是相等的，因此这里的T的首字母和第二位字符就不必再次比较了；\n\n\n### 5.6.1 判断子串中首字母与后面字符的相似度\n这里定义i值（主串当前位置的下标），KMP算法是实现i值不回溯，就是只能变大不能变小，因此因为可变话的j值进行判断子串中首字母和后面字符的比较，因此j值的多少取决于当前字符之前的串的前后缀的相似度；\n\n将T串各个位置的j值变换定义为一个数组next,数组长度就是子串的长度，定义如下：\n\n![数组next定义]($resource/%E6%95%B0%E7%BB%84next%E5%AE%9A%E4%B9%89.jpg)\n\n示例：\n![next数组值推导示例]($resource/next%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC%E7%A4%BA%E4%BE%8B.jpg)\n\n\n\n示例：nextval数组值推导\n\n![nextval数组值推导1]($resource/nextval%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC1.jpg)\n\n![nextval数组值推导2]($resource/nextval%E6%95%B0%E7%BB%84%E5%80%BC%E6%8E%A8%E5%AF%BC2.jpg)\n\n\n\n代码：\n```c\n/*\n\t求模式串T的next函数修正值并存入数组nextval\n*/\n\nvoid get_nextval(String T, int *nextval){\n\tint i ,j;\n\ti = 1;\n\tj = 0;\n\tnextval[1] = 0;\n\twhile(i<T[0]){ //此处的T[0]表示串T的长度\n\t\tif (j==0 || T[i] == T[j]){ //T[i]表示后缀的单个字符，T[j]表示前缀的单个字符\n\t\t\t++i;\n\t\t\t++j;\n\t\t\tif (T[i] != T[j]){ //若当前字符与前缀字符不同\n\t\t\t\tnextval[i] = j; //则当前的j为nextval在i位置的值\n\t\t\t}else{\n\t\t\t\tnextval[i] = nextval[j]; //如果与前缀字符相同，则将前缀字符的nextval值赋值给nextval在i位置的值\n\t\t\t}\n\t\t}\n\n\t}else{\n\t\tj = nextval[j]; //若字符不同，则j值回溯\n\t}\n}\n\n\n\n\n/*\n\t本段为了计算当前要匹配的串T的next数组\n\t返回子串T在主串S中的第pos个字符之后的位置，若不存在，则函数返回值为0；\n\tT非空，1<=pos<=StrLength(S)\n*/\n\nint Index_KMP(String S, String T, int pos){\n\tint i = pos; //i用于主串S当前位置下标值，若pos不为1则从pos位置开始匹配\n\tint j = 1; //j用于子串T中当前位置的下标值\n\tint nextval[255];  //定义一个next数组\n\tget_nextval(T, nextval); //对T记性分析，得到next数组\n\twhile(i <= s[0] && j <=T[0]){ //若i小于S的长度且j小于T的长度时，循环继续\n\t\tif (j == 0 || S[i] == T[j]){ //两个字母相等则继续，相对于朴素算法增加了j = 0 的判断\n\t\t\t++i;\n\t\t\t++j;\t\n\t\t}else{ //指针后退重新开始匹配\n\t\t\tj = nextval[j]; //j退到合适的位置，i值不变\n\t\t}\n\t}\n\tif (j > T[0]){\n\t\treturn i - T[0];\n\t}else{\n\t\treturn 0;\n\t}\n}\n\n```\n\n\n\n",[[1559175569083,["GJX@GJXAIOU",[[-1,363,"  "]],[365,365],[363,363]]],[1559175569528,["GJX@GJXAIOU",[[-1,362,"\n"]],[363,363],[362,362]]],[1559175613731,["GJX@GJXAIOU",[[1,436,"·"]],[436,436],[437,437]]],[1559175615011,["GJX@GJXAIOU",[[-1,436,"·"]],[437,437],[436,436]]],[1559175615566,["GJX@GJXAIOU",[[1,436,"`"]],[436,436],[437,437]]],[1559175617326,["GJX@GJXAIOU",[[1,442,"`"]],[442,442],[443,443]]],[1559175618510,["GJX@GJXAIOU",[[1,485,"`"]],[485,485],[486,486]]],[1559175620430,["GJX@GJXAIOU",[[1,480,"`"]],[480,480],[481,481]]],[1559175826279,["GJX@GJXAIOU",[[-1,710,"将串复制得串T"]],[717,717],[710,710]]],[1559175832406,["GJX@GJXAIOU",[[1,710,"jiang"]],[710,710],[715,715]]],[1559175833483,["GJX@GJXAIOU",[[-1,710,"jiang"]],[715,715],[710,710]]],[1559175839843,["GJX@GJXAIOU",[[1,710,"将串清空"]],[710,710],[714,714]]],[1559176332471,["GJX@GJXAIOU",[[1,1561," 、、"]],[1561,1561],[1564,1564]]],[1559176332992,["GJX@GJXAIOU",[[-1,1562,"、、"]],[1564,1564],[1562,1562]]],[1559176350471,["GJX@GJXAIOU",[[1,1562,"//这里i是位置，实际数组中坐标要小1；"]],[1562,1562],[1582,1582]]],[1559176411714,["GJX@GJXAIOU",[[-1,1976,"防止"]],[1978,1978],[1976,1976]]],[1559176414558,["GJX@GJXAIOU",[[1,1976,"放置"]],[1976,1976],[1978,1978]]],[1559176420870,["GJX@GJXAIOU",[[-1,1985,"防止"]],[1987,1987],[1985,1985]]],[1559176422458,["GJX@GJXAIOU",[[1,1985,"放置"]],[1985,1985],[1987,1987]]],[1559176437744,["GJX@GJXAIOU",[[-1,2012,"与"]],[2013,2013],[2012,2012]]],[1559176439807,["GJX@GJXAIOU",[[1,2012,"于"]],[2012,2012],[2013,2013]]],[1559176448932,["GJX@GJXAIOU",[[-1,2021,"时候"]],[2023,2023],[2021,2021]]],[1559176471472,["GJX@GJXAIOU",[[1,2135,"**"],[1,2177,"**"]],[2135,2177],[2135,2181]]],[1559176631429,["GJX@GJXAIOU",[[1,2184,"**"],[1,2221,"**"]],[2184,2221],[2184,2225]]],[1559176635776,["GJX@GJXAIOU",[[1,2351,"**"],[1,2386,"**"]],[2351,2386],[2351,2390]]],[1559176695725,["GJX@GJXAIOU",[[-1,2445,"5"]],[2446,2446],[2445,2445]]],[1559176696454,["GJX@GJXAIOU",[[1,2445,"4"]],[2445,2445],[2446,2446]]],[1559176728824,["GJX@GJXAIOU",[[1,2544,"和主串"]],[2544,2544],[2547,2547]]],[1559176764962,["GJX@GJXAIOU",[[-1,2630,"变话"]],[2632,2632],[2630,2630]]],[1559176767007,["GJX@GJXAIOU",[[1,2630,"变化"]],[2630,2630],[2632,2632]]],[1559176770412,["GJX@GJXAIOU",[[-1,2626,"此因"]],[2627,2627],[2625,2625]]],[1559176775947,["GJX@GJXAIOU",[[1,2625,"又"]],[2625,2625],[2626,2626]]],[1559176783576,["GJX@GJXAIOU",[[1,2628,"需要"]],[2628,2628],[2630,2630]]],[1559179064521,["GJX@GJXAIOU",[[1,256,"- \n"]],[255,255],[258,258]]],[1559179075768,["GJX@GJXAIOU",[[1,258,"前缀：指的是字符串的子串中从原串最前面开始的子串，如abcdef的前缀有：a,ab,abc,abcd,abcde\n后缀：指的是字符串的子串中在原串结尾处结尾的子串，如abcdef的后缀有：f,ef,def,cdef,bcdef"]],[258,258],[371,371]]],[1559179078322,["GJX@GJXAIOU",[[1,315,"- "]],[315,315],[317,317]]],[1559179080682,["GJX@GJXAIOU",[[-1,294,"："]],[295,295],[294,294]]],[1559179083580,["GJX@GJXAIOU",[[1,294,"："]],[294,294],[295,295]]],[1559179133443,["GJX@GJXAIOU",[[1,2802,"\n"]],[2801,2801],[2802,2802]]],[1559179144480,["GJX@GJXAIOU",[[1,2802,"F[i]表示的是前i的字符组成的这个子串**最长的相同前缀后缀的长度！**"]],[2802,2802],[2839,2839]]],[1559179146242,["GJX@GJXAIOU",[[-1,2802,"F"]],[2803,2803],[2802,2802]]],[1559179147546,["GJX@GJXAIOU",[[1,2802,"nezx"]],[2802,2802],[2806,2806]]],[1559179149322,["GJX@GJXAIOU",[[-1,2804,"zx"]],[2806,2806],[2804,2804]]],[1559179151481,["GJX@GJXAIOU",[[1,2804,"xt"]],[2804,2804],[2806,2806]]],[1559179194707,["GJX@GJXAIOU",[[1,2842,";"]],[2842,2842],[2843,2843]]],[1559179308587,["GJX@GJXAIOU",[[1,2843,"例如字符串aababaaba的相同前缀后缀有a和aaba，那么其中最长的就是aaba。"]],[2843,2843],[2886,2886]]],[1559179324964,["GJX@GJXAIOU",[[1,2842,"()"]],[2842,2842],[2844,2844]]],[1559179326946,["GJX@GJXAIOU",[[1,2843,"qian"]],[2843,2843],[2847,2847]]],[1559179328201,["GJX@GJXAIOU",[[-1,2843,"qian"]],[2847,2847],[2843,2843]]],[1559179343347,["GJX@GJXAIOU",[[1,2843,"前缀和后缀相同的最大长度"]],[2843,2843],[2855,2855]]],[1559199975554,["GJX@GJXAIOU",[[1,2801,"  "]],[2801,2801],[2803,2803]]]],null,"GJX@GJXAIOU"]]}