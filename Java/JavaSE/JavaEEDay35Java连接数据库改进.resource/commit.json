{"compress":true,"commitItems":[["00ef1167-84c0-4680-a297-6878d576f3f4",1564385988327,"",[[1564385949462,["GJX@GJXAIOU",[[1,0,"# JavaEEDay35数据库\n\n\n\n"]],[0,0],[19,19]]],[1564385960994,["GJX@GJXAIOU",[[1,20,"\n"]],[16,16],[17,17]]],[1564385961993,["GJX@GJXAIOU",[[1,21,"\n"]],[17,17],[18,18]]],[1564385981787,["GJX@GJXAIOU",[[1,18,"## preparedstatement使用"]],[18,18],[40,40]]],[1564385981810,["GJX@GJXAIOU",[[1,38," "]],[40,40],[41,41]]],[1564385982296,["GJX@GJXAIOU",[[1,45,"\n"]],[41,41],[42,42]]],[1564385991634,["GJX@GJXAIOU",[[1,46,"\n"]],[42,42],[43,43]]],[1564386003862,["GJX@GJXAIOU",[[1,43,"- 首先对应数据库建立一个实体类："]],[43,43],[60,60]]],[1564386004076,["GJX@GJXAIOU",[[1,61,"- \n"]],[60,60],[63,63]]],[1564386005204,["GJX@GJXAIOU",[[-1,61,"- "]],[63,63],[61,61]]],[1564386005610,["GJX@GJXAIOU",[[-1,64,"\n"]],[61,61],[60,60]]],[1564386013930,["GJX@GJXAIOU",[[1,60,"Person.java"]],[60,60],[71,71]]],[1564386014484,["GJX@GJXAIOU",[[1,72,"- \n"]],[71,71],[74,74]]],[1564386015123,["GJX@GJXAIOU",[[-1,72,"- "]],[74,74],[72,72]]],[1564386016475,["GJX@GJXAIOU",[[1,72,"··"]],[72,72],[74,74]]],[1564386017289,["GJX@GJXAIOU",[[-1,72,"··"]],[74,74],[72,72]]],[1564386018490,["GJX@GJXAIOU",[[1,72,"```"]],[72,72],[75,75]]],[1564386018511,["GJX@GJXAIOU",[[1,75,"language\n```\n"]],[75,75],[75,83]]],[1564386019362,["GJX@GJXAIOU",[[-1,75,"language"],[1,83,"j"]],[75,83],[76,76]]],[1564386019786,["GJX@GJXAIOU",[[1,76,"ava"]],[76,76],[79,79]]],[1564386019937,["GJX@GJXAIOU",[[1,80,"\n"]],[79,79],[80,80]]],[1564386031093,["GJX@GJXAIOU",[[1,80,"package a_preparedstatement;   public class Person {\n   /*\n * 实体类：一般情况会与数据库中表内的数据类型一致  * 建议:成员变量的名字要和数据库里面的字段名一致  * 建议:使用基本数据类型的包装类  */  private Integer id;\n private String name;\n private Integer age;   public Integer getId() {\n      return id;\n  }\n   public void setId(Integer id) {\n      this.id = id;\n  }\n   public String getName() {\n      return name;\n  }\n   public void setName(String name) {\n      this.name = name;\n  }\n   public Integer getAge() {\n      return age;\n  }\n   public void setAge(Integer age) {\n      this.age = age;\n  }\n\n   @Override\n  public String toString() {\n      return \"Person [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\n  }\n}"]],[80,80],[743,743]]],[1564386035946,["GJX@GJXAIOU",[[1,752,"\n"]],[747,747],[748,748]]],[1564386036074,["GJX@GJXAIOU",[[1,753,"\n"]],[748,748],[749,749]]],[1564386036265,["GJX@GJXAIOU",[[1,754,"\n"]],[749,749],[750,750]]],[1564386037618,["GJX@GJXAIOU",[[1,750,"ranh"]],[750,750],[754,754]]],[1564386038337,["GJX@GJXAIOU",[[-1,750,"ranh"]],[754,754],[750,750]]],[1564386038762,["GJX@GJXAIOU",[[-1,754,"\n"]],[750,750],[749,749]]],[1564386047735,["GJX@GJXAIOU",[[1,749,"- 然后完成对应的具体实现"]],[749,749],[762,762]]],[1564386054358,["GJX@GJXAIOU",[[1,762,"类PersonDao"]],[762,762],[772,772]]],[1564386054382,["GJX@GJXAIOU",[[1,763," "]],[772,772],[773,773]]],[1564386056506,["GJX@GJXAIOU",[[1,773,".java"]],[773,773],[778,778]]],[1564386056730,["GJX@GJXAIOU",[[1,779,"- \n"]],[778,778],[781,781]]],[1564386057624,["GJX@GJXAIOU",[[-1,779,"- "]],[781,781],[779,779]]],[1564386059131,["GJX@GJXAIOU",[[1,779,"···"]],[779,779],[782,782]]],[1564386059929,["GJX@GJXAIOU",[[-1,779,"···"]],[782,782],[779,779]]],[1564386062220,["GJX@GJXAIOU",[[1,779,"```"]],[779,779],[782,782]]],[1564386062243,["GJX@GJXAIOU",[[1,782,"language\n```\n"]],[782,782],[782,790]]],[1564386063027,["GJX@GJXAIOU",[[-1,782,"language"],[1,790,"j"]],[782,790],[783,783]]],[1564386063475,["GJX@GJXAIOU",[[1,783,"ava"]],[783,783],[786,786]]],[1564386063617,["GJX@GJXAIOU",[[1,787,"\n"]],[786,786],[787,787]]],[1564386074528,["GJX@GJXAIOU",[[1,787,"package a_preparedstatement;   import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List;   import utils.JDBCUtil;   public class PersonDao {\n\n   /*\n  使用PreparedStatement\n  增删改查  */  /**\n * 出入一个Person类对象，保存数据到数据库中\n  * @param person\n  * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n  */\n  public int add(Person person) {\n      //连接数据库\n  Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"insert into person(name, age) values(?,?)\";\n  //预处理SQL语句，获取到PreparedStatement\n  statement = conn.prepareStatement(sql);\n  //给予参数\n  statement.setString(1, person.getName());// 1表示第一个?\n  statement.setInt(2, person.getAge());\n  //执行SQL语句,返回Int类型，为影响的行数\n  return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  e.printStackTrace();\n  } finally {\n         JDBCUtil.close(conn, statement);\n  }\n\n      return 0;\n  }\n\n   /**\n * 根据ID删除数据库里面的数据\n  * @param id\n  * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n  */\n  public int deleteById(int id) {\n      Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"delete from person where id = ?\";\n  statement = conn.prepareStatement(sql);\n  statement.setInt(1, id);\n return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  e.printStackTrace();\n  } finally {\n         JDBCUtil.close(conn, statement);\n  }\n      return 0;\n  }\n\n   /**\n * 修改Person的个人信息\n  * @param person 传入的Person类对象\n  * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n  */\n  public int update(Person person) {\n      Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"update person set name=?, age=? where id=?\";\n  statement = conn.prepareStatement(sql);\n  statement.setString(1, person.getName());\n  statement.setInt(2, person.getAge());\n  statement.setInt(3, person.getId());\n return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  } finally {\n\n      }\n      return 0;\n  } \n\n   /**\n * 查询数据库里面的所有的Person信息，返回一个List集合\n  * @return 返回保存Person类对象的List集合\n  */\n  public List<Person> findAll() {\n      ResultSet set = null;\n  Connection conn = null;\n  PreparedStatement statement = null;\n  List<Person> list = new ArrayList<Person>();\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"select * from person\";\n  statement = conn.prepareStatement(sql);\n  set = statement.executeQuery();\n while (set.next()) {\n            Person p = new Person();\n  p.setId(set.getInt(\"id\"));\n  p.setName(set.getString(\"name\"));\n  p.setAge(set.getInt(\"age\"));\n  list.add(p);\n  }\n\n         return list;\n  } catch (Exception e) {\n         // TODO: handle exception\n  } finally {\n         JDBCUtil.close(conn, statement, set);\n  }\n      return null;\n  }\n\n   /**\n * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n  * @param id 要查询的PersonID\n * @return 返回一个Person类对象，如果没有找到，返回null\n */  public Person findById(int id) {\n      ResultSet set = null;\n  Connection conn = null;\n  PreparedStatement statement = null;\n  Person p = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"select * from person where id=?\";\n  statement = conn.prepareStatement(sql);\n  statement.setInt(1, id);\n  set = statement.executeQuery();\n if (set.next()) {\n            p = new Person();\n  p.setId(set.getInt(\"id\"));\n  p.setName(set.getString(\"name\"));\n  p.setAge(set.getInt(\"age\"));\n  }\n\n         return p;\n  } catch (Exception e) {\n         // TODO: handle exception\n  } finally {\n         JDBCUtil.close(conn, statement, set);\n  }\n      return null;\n  }\n}"]],[787,787],[4542,4542]]],[1564386076986,["GJX@GJXAIOU",[[-1,787,"package a_preparedstatement;   import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List;   import utils.JDBCUtil;   public class PersonDao {\n\n   /*\n  使用PreparedStatement\n  增删改查  */  /**\n * 出入一个Person类对象，保存数据到数据库中\n  * @param person\n  * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n  */\n  public int add(Person person) {\n      //连接数据库\n  Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"insert into person(name, age) values(?,?)\";\n  //预处理SQL语句，获取到PreparedStatement\n  statement = conn.prepareStatement(sql);\n  //给予参数\n  statement.setString(1, person.getName());// 1表示第一个?\n  statement.setInt(2, person.getAge());\n  //执行SQL语句,返回Int类型，为影响的行数\n  return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  e.printStackTrace();\n  } finally {\n         JDBCUtil.close(conn, statement);\n  }\n\n      return 0;\n  }\n\n   /**\n * 根据ID删除数据库里面的数据\n  * @param id\n  * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n  */\n  public int deleteById(int id) {\n      Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"delete from person where id = ?\";\n  statement = conn.prepareStatement(sql);\n  statement.setInt(1, id);\n return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  e.printStackTrace();\n  } finally {\n         JDBCUtil.close(conn, statement);\n  }\n      return 0;\n  }\n\n   /**\n * 修改Person的个人信息\n  * @param person 传入的Person类对象\n  * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n  */\n  public int update(Person person) {\n      Connection conn = null;\n  PreparedStatement statement = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"update person set name=?, age=? where id=?\";\n  statement = conn.prepareStatement(sql);\n  statement.setString(1, person.getName());\n  statement.setInt(2, person.getAge());\n  statement.setInt(3, person.getId());\n return statement.executeUpdate();\n  } catch (SQLException e) {\n         // TODO: handle exception\n  } finally {\n\n      }\n      return 0;\n  } \n\n   /**\n * 查询数据库里面的所有的Person信息，返回一个List集合\n  * @return 返回保存Person类对象的List集合\n  */\n  public List<Person> findAll() {\n      ResultSet set = null;\n  Connection conn = null;\n  PreparedStatement statement = null;\n  List<Person> list = new ArrayList<Person>();\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"select * from person\";\n  statement = conn.prepareStatement(sql);\n  set = statement.executeQuery();\n while (set.next()) {\n            Person p = new Person();\n  p.setId(set.getInt(\"id\"));\n  p.setName(set.getString(\"name\"));\n  p.setAge(set.getInt(\"age\"));\n  list.add(p);\n  }\n\n         return list;\n  } catch (Exception e) {\n         // TODO: handle exception\n  } finally {\n         JDBCUtil.close(conn, statement, set);\n  }\n      return null;\n  }\n\n   /**\n * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n  * @param id 要查询的PersonID\n * @return 返回一个Person类对象，如果没有找到，返回null\n */  public Person findById(int id) {\n      ResultSet set = null;\n  Connection conn = null;\n  PreparedStatement statement = null;\n  Person p = null;\n try {\n         conn = JDBCUtil.getConnection();\n  String sql = \"select * from person where id=?\";\n  statement = conn.prepareStatement(sql);\n  statement.setInt(1, id);\n  set = statement.executeQuery();\n if (set.next()) {\n            p = new Person();\n  p.setId(set.getInt(\"id\"));\n  p.setName(set.getString(\"name\"));\n  p.setAge(set.getInt(\"age\"));\n  }\n\n         return p;\n  } catch (Exception e) {\n         // TODO: handle exception\n  } finally {\n         JDBCUtil.close(conn, statement, set);\n  }\n      return null;\n  }\n}"]],[4542,4542],[787,787]]],[1564386079358,["GJX@GJXAIOU",[[1,787,"package a_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport utils.JDBCUtil;\n\npublic class PersonDao {\n\t\n\t/*\n\t 使用PreparedStatement\n\t 增删改查\n\t */\n\t/**\n\t * 出入一个Person类对象，保存数据到数据库中\n\t * @param person\n\t * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n\t */\n\tpublic int add(Person person) {\n\t\t//连接数据库\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t//预处理SQL语句，获取到PreparedStatement\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//给予参数\n\t\t\tstatement.setString(1, person.getName());// 1表示第一个?\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\t\n\t\t\t//执行SQL语句,返回Int类型，为影响的行数\n\t\t\treturn statement.executeUpdate();\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 根据ID删除数据库里面的数据\n\t * @param id\n\t * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n\t */\n\tpublic int deleteById(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"delete from person where id = ?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 修改Person的个人信息\n\t * @param person 传入的Person类对象\n\t * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n\t */\n\tpublic int update(Person person) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"update person set name=?, age=? where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setString(1, person.getName());\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\tstatement.setInt(3, person.getId());\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\t\n\t\t}\n\t\treturn 0;\n\t} \n\t\n\t/**\n\t * 查询数据库里面的所有的Person信息，返回一个List集合\n\t * @return 返回保存Person类对象的List集合\n\t */\n\tpublic List<Person> findAll() {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tList<Person> list = new ArrayList<Person>();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\twhile (set.next()) {\n\t\t\t\tPerson p = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t\t\n\t\t\t\tlist.add(p);\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n\t * @param id 要查询的PersonID\n\t * @return 返回一个Person类对象，如果没有找到，返回null\n\t */\n\tpublic Person findById(int id) {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tPerson p = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tp = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t}\n\t\t\t\n\t\t\treturn p;\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[787,787],[4544,4544]]],[1564386093471,["GJX@GJXAIOU",[[-1,108,"   "],[1,111,"\n\n"],[-1,133,"   "],[1,136,"\t"],[1,139,"\t"],[-1,165," "],[1,166,"\n\t"],[-1,192," "],[1,193,"\n\t"],[-1,211,"  */  "],[1,217,"\n\t */\n\t"],[-1,237," "],[1,238,"\t"],[-1,259," "],[1,260,"\t"],[-1,280,"   "],[1,283,"\n\n\t"],[-1,308,"      "],[1,314,"\t\t"],[-1,325,"  }\n   "],[1,332,"\t}\n\t"],[-1,364,"      "],[1,370,"\t\t"],[-1,384,"  }\n   "],[1,391,"\t}\n\t"],[-1,417,"      "],[1,423,"\t\t"],[-1,436,"  }\n   "],[1,443,"\t}\n\t"],[-1,478,"      "],[1,484,"\t\t"],[-1,502,"  }\n   "],[1,509,"\t}\n\t"],[-1,535,"      "],[1,541,"\t\t"],[-1,553,"  }\n   "],[1,560,"\t}\n\t"],[-1,594,"      "],[1,600,"\t\t"],[-1,616,"  }\n\n   "],[1,624,"\t}\n\n\t"],[-1,634,"  "],[1,636,"\t"],[-1,663,"      "],[1,669,"\t\t"],[-1,738,"  "],[1,740,"\t"],[1,743,"\n"]],[80,743],[697,697]]],[1564386099538,["GJX@GJXAIOU",[[-1,4498,"\n"]],[4498,4498],[4497,4497]]],[1564386099674,["GJX@GJXAIOU",[[-1,4497,"\n"]],[4497,4497],[4496,4496]]],[1564386099833,["GJX@GJXAIOU",[[-1,4496,"\n"]],[4496,4496],[4495,4495]]],[1564386099984,["GJX@GJXAIOU",[[-1,4495,"\n"]],[4495,4495],[4494,4494]]],[1564386100145,["GJX@GJXAIOU",[[-1,4494,"\n"]],[4494,4494],[4493,4493]]],[1564386100377,["GJX@GJXAIOU",[[-1,4493,"\n"]],[4493,4493],[4492,4492]]],[1564386100531,["GJX@GJXAIOU",[[-1,4492,"\n"]],[4492,4492],[4491,4491]]],[1564386100657,["GJX@GJXAIOU",[[-1,4491,"\n"]],[4491,4491],[4490,4490]]],[1564386100777,["GJX@GJXAIOU",[[-1,4490,"\n"]],[4490,4490],[4489,4489]]],[1564386101042,["GJX@GJXAIOU",[[-1,4489,"\n"]],[4489,4489],[4488,4488]]],[1564386101188,["GJX@GJXAIOU",[[-1,4488,"\n"]],[4488,4488],[4487,4487]]],[1564386101361,["GJX@GJXAIOU",[[-1,4487,"\n"]],[4487,4487],[4486,4486]]],[1564386101689,["GJX@GJXAIOU",[[-1,4486,"\n"]],[4486,4486],[4485,4485]]],[1564386103730,["GJX@GJXAIOU",[[1,4495,"\n"]],[4489,4489],[4490,4490]]],[1564386103860,["GJX@GJXAIOU",[[1,4496,"\n"]],[4490,4490],[4491,4491]]],[1564386106501,["GJX@GJXAIOU",[[1,4491,"- zuih"]],[4491,4491],[4497,4497]]],[1564386107204,["GJX@GJXAIOU",[[-1,4493,"zuih"]],[4497,4497],[4493,4493]]],[1564386123099,["GJX@GJXAIOU",[[1,4493,"最后实现界面的v"]],[4493,4493],[4501,4501]]],[1564386123125,["GJX@GJXAIOU",[[1,4500," "]],[4501,4501],[4502,4502]]],[1564386126907,["GJX@GJXAIOU",[[1,4502,"iew.java"]],[4502,4502],[4510,4510]]],[1564386136785,["GJX@GJXAIOU",[[1,4511,"- \n"]],[4510,4510],[4513,4513]]],[1564386137218,["GJX@GJXAIOU",[[-1,4511,"- "]],[4513,4513],[4511,4511]]],[1564386138652,["GJX@GJXAIOU",[[1,4511,"···"]],[4511,4511],[4514,4514]]],[1564386139312,["GJX@GJXAIOU",[[-1,4511,"···"]],[4514,4514],[4511,4511]]],[1564386140402,["GJX@GJXAIOU",[[1,4511,"```"]],[4511,4511],[4514,4514]]],[1564386140429,["GJX@GJXAIOU",[[1,4514,"language\n```\n"]],[4514,4514],[4514,4522]]],[1564386141355,["GJX@GJXAIOU",[[-1,4514,"language"],[1,4522,"j"]],[4514,4522],[4515,4515]]],[1564386141861,["GJX@GJXAIOU",[[1,4515,"ava"]],[4515,4515],[4518,4518]]],[1564386141929,["GJX@GJXAIOU",[[1,4519,"\n"]],[4518,4518],[4519,4519]]],[1564386148739,["GJX@GJXAIOU",[[1,4519,"package a_preparedstatement;   import java.util.Scanner;   public class ViewDemo1 {\n   public static void main(String[] args) {\n      PersonDao pDao = new PersonDao();    Scanner sc = new Scanner(System.in);   while (true) {\n         System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n  System.out.println(\"1. 添加数据\");\n  System.out.println(\"2. 删除数据\");\n  System.out.println(\"3. 更新数据\");\n  System.out.println(\"4. 查询所有数据\");\n  System.out.println(\"5. 查看指定数据\");\n  System.out.println(\"6. 退出\");\n  System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n int choose = sc.nextInt();\n switch (choose) {\n            case 1:\n               System.out.println(\"请输入姓名\");\n  String name = sc.next();\n  System.out.println(\"请输入年龄\");\n int age = sc.nextInt();\n  Person p = new Person();\n  p.setName(name);\n  p.setAge(age);\n  pDao.add(p);\n break; case 2:\n               pDao.deleteById(5);\n break; case 3:\n\n               break;\n case 4:\n\n               break;\n case 5:\n\n               break;\n case 6:\n               System.out.println(\"退出程序\");\n  System.exit(0);\n break;             default:\n               break;\n  }\n      }\n   }\n}"]],[4519,4519],[5612,5612]]],[1564386150263,["GJX@GJXAIOU",[[-1,4519,"package a_preparedstatement;   import java.util.Scanner;   public class ViewDemo1 {\n   public static void main(String[] args) {\n      PersonDao pDao = new PersonDao();    Scanner sc = new Scanner(System.in);   while (true) {\n         System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n  System.out.println(\"1. 添加数据\");\n  System.out.println(\"2. 删除数据\");\n  System.out.println(\"3. 更新数据\");\n  System.out.println(\"4. 查询所有数据\");\n  System.out.println(\"5. 查看指定数据\");\n  System.out.println(\"6. 退出\");\n  System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n int choose = sc.nextInt();\n switch (choose) {\n            case 1:\n               System.out.println(\"请输入姓名\");\n  String name = sc.next();\n  System.out.println(\"请输入年龄\");\n int age = sc.nextInt();\n  Person p = new Person();\n  p.setName(name);\n  p.setAge(age);\n  pDao.add(p);\n break; case 2:\n               pDao.deleteById(5);\n break; case 3:\n\n               break;\n case 4:\n\n               break;\n case 5:\n\n               break;\n case 6:\n               System.out.println(\"退出程序\");\n  System.exit(0);\n break;             default:\n               break;\n  }\n      }\n   }\n}"]],[5612,5612],[4519,4519]]],[1564386152867,["GJX@GJXAIOU",[[1,4519,"package a_preparedstatement;\n\nimport java.util.Scanner;\n\npublic class ViewDemo1 {\n\tpublic static void main(String[] args) {\n\t\tPersonDao pDao = new PersonDao();\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\twhile (true) {\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\tSystem.out.println(\"1. 添加数据\");\n\t\t\tSystem.out.println(\"2. 删除数据\");\n\t\t\tSystem.out.println(\"3. 更新数据\");\n\t\t\tSystem.out.println(\"4. 查询所有数据\");\n\t\t\tSystem.out.println(\"5. 查看指定数据\");\n\t\t\tSystem.out.println(\"6. 退出\");\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\t\n\t\t\tint choose = sc.nextInt();\n\t\t\tswitch (choose) {\n\t\t\t\tcase 1:\n\t\t\t\t\tSystem.out.println(\"请输入姓名\");\n\t\t\t\t\tString name = sc.next();\n\t\t\t\t\tSystem.out.println(\"请输入年龄\");\n\t\t\t\t\tint age = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tPerson p = new Person();\n\t\t\t\t\tp.setName(name);\n\t\t\t\t\tp.setAge(age);\n\t\t\t\t\t\n\t\t\t\t\tpDao.add(p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tpDao.deleteById(5);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tSystem.out.println(\"退出程序\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n"]],[4519,4519],[5607,5607]]],[1564386158947,["GJX@GJXAIOU",[[1,4505,"Demo1"]],[4505,4505],[4510,4510]]],[1564386162120,["GJX@GJXAIOU",[[1,4515," ===="]],[4515,4515],[4518,4518]]],[1564386162177,["GJX@GJXAIOU",[[1,4518," "]],[4518,4518],[4519,4519]]],[1564386163140,["GJX@GJXAIOU",[[-1,4518," "]],[4519,4519],[4518,4518]]],[1564386164059,["GJX@GJXAIOU",[[1,4518,"you"]],[4518,4518],[4521,4521]]],[1564386164753,["GJX@GJXAIOU",[[-1,4518,"you"]],[4521,4521],[4518,4518]]],[1564386167213,["GJX@GJXAIOU",[[1,4518,"有的功能"]],[4518,4518],[4522,4522]]],[1564386169013,["GJX@GJXAIOU",[[1,4522,"未完成"]],[4522,4522],[4525,4525]]]],null,"GJX@GJXAIOU"],["8cba1c76-6893-4fa1-be25-cfc552156afd",1564447711851,"# JavaEEDay35数据库\n\n## preparedstatement 使用\n\n- 首先对应数据库建立一个实体类：Person.java\n```java\npackage a_preparedstatement;\n\npublic class Person {\n\t/*\n\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\n\t */\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Integer age;\n\n\tpublic Integer getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Integer id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n\n```\n\n- 然后完成对应的具体实现类 PersonDao.java\n```java\npackage a_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport utils.JDBCUtil;\n\npublic class PersonDao {\n\t\n\t/*\n\t 使用PreparedStatement\n\t 增删改查\n\t */\n\t/**\n\t * 出入一个Person类对象，保存数据到数据库中\n\t * @param person\n\t * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n\t */\n\tpublic int add(Person person) {\n\t\t//连接数据库\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t//预处理SQL语句，获取到PreparedStatement\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//给予参数\n\t\t\tstatement.setString(1, person.getName());// 1表示第一个?\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\t\n\t\t\t//执行SQL语句,返回Int类型，为影响的行数\n\t\t\treturn statement.executeUpdate();\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 根据ID删除数据库里面的数据\n\t * @param id\n\t * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n\t */\n\tpublic int deleteById(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"delete from person where id = ?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 修改Person的个人信息\n\t * @param person 传入的Person类对象\n\t * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n\t */\n\tpublic int update(Person person) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"update person set name=?, age=? where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setString(1, person.getName());\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\tstatement.setInt(3, person.getId());\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\t\n\t\t}\n\t\treturn 0;\n\t} \n\t\n\t/**\n\t * 查询数据库里面的所有的Person信息，返回一个List集合\n\t * @return 返回保存Person类对象的List集合\n\t */\n\tpublic List<Person> findAll() {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tList<Person> list = new ArrayList<Person>();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\twhile (set.next()) {\n\t\t\t\tPerson p = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t\t\n\t\t\t\tlist.add(p);\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n\t * @param id 要查询的PersonID\n\t * @return 返回一个Person类对象，如果没有找到，返回null\n\t */\n\tpublic Person findById(int id) {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tPerson p = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tp = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t}\n\t\t\t\n\t\t\treturn p;\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n```\n\n- 最后实现界面的 viewDemo1.java ==有的功能未完成==\n```java\npackage a_preparedstatement;\n\nimport java.util.Scanner;\n\npublic class ViewDemo1 {\n\tpublic static void main(String[] args) {\n\t\tPersonDao pDao = new PersonDao();\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\twhile (true) {\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\tSystem.out.println(\"1. 添加数据\");\n\t\t\tSystem.out.println(\"2. 删除数据\");\n\t\t\tSystem.out.println(\"3. 更新数据\");\n\t\t\tSystem.out.println(\"4. 查询所有数据\");\n\t\t\tSystem.out.println(\"5. 查看指定数据\");\n\t\t\tSystem.out.println(\"6. 退出\");\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\t\n\t\t\tint choose = sc.nextInt();\n\t\t\tswitch (choose) {\n\t\t\t\tcase 1:\n\t\t\t\t\tSystem.out.println(\"请输入姓名\");\n\t\t\t\t\tString name = sc.next();\n\t\t\t\t\tSystem.out.println(\"请输入年龄\");\n\t\t\t\t\tint age = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tPerson p = new Person();\n\t\t\t\t\tp.setName(name);\n\t\t\t\t\tp.setAge(age);\n\t\t\t\t\t\n\t\t\t\t\tpDao.add(p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tpDao.deleteById(5);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tSystem.out.println(\"退出程序\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n",[[1564447672550,["GJX@GJXAIOU",[[1,39,"接口"]],[39,39],[41,41]]],[1564447903750,["GJX@GJXAIOU",[[1,5637,"\n"]],[5630,5630],[5631,5631]]],[1564447903868,["GJX@GJXAIOU",[[1,5638,"\n"]],[5631,5631],[5632,5632]]],[1564447904020,["GJX@GJXAIOU",[[1,5639,"\n"]],[5632,5632],[5633,5633]]],[1564447998518,["GJX@GJXAIOU",[[1,5632,"## 批处理操作"]],[5632,5632],[5640,5640]]],[1564447998891,["GJX@GJXAIOU",[[1,5648,"\n"]],[5640,5640],[5641,5641]]],[1564447999011,["GJX@GJXAIOU",[[1,5649,"\n"]],[5641,5641],[5642,5642]]],[1564448252329,["GJX@GJXAIOU",[[1,5642,"一般针对于"]],[5642,5642],[5647,5647]]],[1564448259231,["GJX@GJXAIOU",[[1,5647,"批量插入操作；"]],[5647,5647],[5654,5654]]],[1564448259572,["GJX@GJXAIOU",[[1,5662,"\n"]],[5654,5654],[5655,5655]]],[1564449011655,["GJX@GJXAIOU",[[1,5655,"```"]],[5655,5655],[5658,5658]]],[1564449011684,["GJX@GJXAIOU",[[1,5658,"language\n```\n"]],[5658,5658],[5658,5666]]],[1564449014721,["GJX@GJXAIOU",[[-1,5658,"language"],[1,5666,"j"]],[5658,5666],[5659,5659]]],[1564449015161,["GJX@GJXAIOU",[[1,5659,"ava"]],[5659,5659],[5662,5662]]],[1564449015412,["GJX@GJXAIOU",[[1,5663,"\n"]],[5662,5662],[5663,5663]]],[1564449020360,["GJX@GJXAIOU",[[1,5663,"package b_batch;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.PreparedStatement;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\tpublic static void main(String[] args) {\n\t\t//testInsert(); //调用没有经过批处理\n\t\tbatch(); //调用批处理\n\t}\n\t\n\t/**\n\t * 未使用批处理时间是6382ms\n\t */\n\tpublic static void testInsert() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//不使用批处理进行插入操作\n\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\tString name = \"Jack\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\tstatement.executeUpdate();\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n\t\n\t\n\t\n\t/**\n\t * 使用PreparedStatement批处理操作\n\t * 主要用来处理一些有规律的SQL语句，这样做可以降低数据库的处理压力\n\t */\n\tpublic static void batch() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?, ?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\tint flag = 0;\n\t\t\tfor (int i = 0; i < 9950; i++) {\n\t\t\t\tString name = \"John\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\t//添加批处理\n\t\t\t\tstatement.addBatch();\n\t\t\t\tflag++;\n\t\t\t\t//每1000条SQL语句批处理一次\n\t\t\t\tif (flag % 1000 == 0) {\n\t\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\t\tstatement.executeBatch();\n\t\t\t\t\t//执行保存在批处理里面的SQL语句之后，清空批处理缓冲区\n\t\t\t\t\tstatement.clearBatch();\n\t\t\t\t\tflag = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//注意，批处理中剩余的SQL语句\n\t\t\tif (flag > 0) {\n\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\tstatement.executeBatch();\n\t\t\t\t//执行保存在批处理里面的SQL语句之后，情况批处理缓冲区\n\t\t\t\tstatement.clearBatch();\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n}\n\n\n\n\n\n"]],[5663,5663],[7861,7861]]],[1564449023836,["GJX@GJXAIOU",[[-1,7861,"\n"]],[7861,7861],[7860,7860]]],[1564449023980,["GJX@GJXAIOU",[[-1,7860,"\n"]],[7860,7860],[7859,7859]]],[1564449024132,["GJX@GJXAIOU",[[-1,7859,"\n"]],[7859,7859],[7858,7858]]],[1564449024411,["GJX@GJXAIOU",[[-1,7858,"\n"]],[7858,7858],[7857,7857]]],[1564449024620,["GJX@GJXAIOU",[[-1,7857,"\n"]],[7857,7857],[7856,7856]]],[1564449026788,["GJX@GJXAIOU",[[1,7869,"\n"]],[7860,7860],[7861,7861]]],[1564449026948,["GJX@GJXAIOU",[[1,7870,"\n"]],[7861,7861],[7862,7862]]],[1564449109255,["GJX@GJXAIOU",[[1,7863,"## baocu"]],[7863,7863],[7871,7871]]],[1564449110027,["GJX@GJXAIOU",[[-1,7866,"baocu"]],[7871,7871],[7866,7866]]],[1564449122532,["GJX@GJXAIOU",[[1,7866,"保存文本数据加到"]],[7866,7866],[7874,7874]]],[1564449123459,["GJX@GJXAIOU",[[-1,7872,"加到"]],[7874,7874],[7872,7872]]],[1564449126377,["GJX@GJXAIOU",[[1,7872,"到数据库"]],[7872,7872],[7876,7876]]],[1564449131819,["GJX@GJXAIOU",[[1,7884,"\n"]],[7876,7876],[7877,7877]]],[1564449135589,["GJX@GJXAIOU",[[1,7877,"内容使用b"]],[7877,7877],[7882,7882]]],[1564449135620,["GJX@GJXAIOU",[[1,7881," "]],[7882,7882],[7883,7883]]],[1564449139614,["GJX@GJXAIOU",[[1,7883,"lob格式"]],[7883,7883],[7888,7888]]],[1564449139644,["GJX@GJXAIOU",[[1,7886," "]],[7888,7888],[7889,7889]]],[1564449563021,["GJX@GJXAIOU",[[1,7890,"```"]],[7890,7890],[7893,7893]]],[1564449563052,["GJX@GJXAIOU",[[1,7893,"language\n```\n"]],[7893,7893],[7893,7901]]],[1564449564724,["GJX@GJXAIOU",[[-1,7893,"language"],[1,7901,"j"]],[7893,7901],[7894,7894]]],[1564449565161,["GJX@GJXAIOU",[[1,7894,"ava"]],[7894,7894],[7897,7897]]],[1564449565362,["GJX@GJXAIOU",[[1,7898,"\n"]],[7897,7897],[7898,7898]]],[1564449569786,["GJX@GJXAIOU",[[1,7898,"package c_blob;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws Exception {\n\t\t//writeTest();\n\t\treadTest();\n\t}\n\t\n\t/**\n\t * 把文件数据，保存到数据库\n\t * @throws Exception \n\t */\n\tpublic static void writeTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into testblob(value) values(?)\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\t//使用缓冲字节流读取数据\n\t\tBufferedInputStream bs = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(new File(\"./res/《The Story of the Stone》.txt\")));\n\t\t\n\t\t//设置字节流\n\t\tstatement.setBinaryStream(1, bs);\n\t\t//statement.setCharacterStream(int parameterIndex, Reader reader);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\tJDBCUtil.close(conn, statement);\n\t\tbs.close();\n\t}\n\t\n\t\n\t//将刚才放入数据库是的数据拿出\n\tpublic static void readTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select value from testblob where id = 1\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tBufferedInputStream bs = null;\n\t\tBufferedOutputStream bos = null;\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {  \n\t\t\t//采用字符流进行读取\n\t\t\tInputStream in = set.getBinaryStream(1);\n\t\t\tbs = new BufferedInputStream(in);\n\t\t\tbos = new BufferedOutputStream(\n\t\t\t\t\tnew FileOutputStream(new File(\"C:\\\\javaEE1707\\\\Day36\\\\res\\\\1.txt\")));\n\t\t\t\n\t\t\tint length = 0;\n\t\t\tbyte[] buf = new byte[8 * 1024];\n\t\t\twhile ((length = bs.read(buf)) != -1) {\n\t\t\t\tbos.write(buf, 0, length);\n\t\t\t}\n\t\t}\n\t\tJDBCUtil.close(conn, statement, set);\n\t\tbos.close();\n\t\tbs.close();\n\t}\n}\n\n\n\n\n\n\n\n\n\n"]],[7898,7898],[9752,9752]]],[1564449573755,["GJX@GJXAIOU",[[-1,9752,"\n"]],[9752,9752],[9751,9751]]],[1564449573891,["GJX@GJXAIOU",[[-1,9751,"\n"]],[9751,9751],[9750,9750]]],[1564449574066,["GJX@GJXAIOU",[[-1,9750,"\n"]],[9750,9750],[9749,9749]]],[1564449574187,["GJX@GJXAIOU",[[-1,9749,"\n"]],[9749,9749],[9748,9748]]],[1564449574314,["GJX@GJXAIOU",[[-1,9748,"\n"]],[9748,9748],[9747,9747]]],[1564449574458,["GJX@GJXAIOU",[[-1,9747,"\n"]],[9747,9747],[9746,9746]]],[1564449574578,["GJX@GJXAIOU",[[-1,9746,"\n"]],[9746,9746],[9745,9745]]],[1564449574738,["GJX@GJXAIOU",[[-1,9745,"\n"]],[9745,9745],[9744,9744]]],[1564449577534,["GJX@GJXAIOU",[[1,9756,"\n"]],[9748,9748],[9749,9749]]],[1564449577659,["GJX@GJXAIOU",[[1,9757,"\n"]],[9749,9749],[9750,9750]]],[1564450112901,["GJX@GJXAIOU",[[1,9750,"## huo"]],[9750,9750],[9756,9756]]],[1564450113650,["GJX@GJXAIOU",[[-1,9754,"uo"]],[9756,9756],[9754,9754]]],[1564450113764,["GJX@GJXAIOU",[[-1,9753,"h"]],[9754,9754],[9753,9753]]],[1564450121409,["GJX@GJXAIOU",[[1,9753,"获取自增长值"]],[9753,9753],[9759,9759]]],[1564450121907,["GJX@GJXAIOU",[[1,9767,"\n"]],[9759,9759],[9760,9760]]],[1564450123957,["GJX@GJXAIOU",[[1,9760,"```"]],[9760,9760],[9763,9763]]],[1564450123989,["GJX@GJXAIOU",[[1,9763,"language\n```\n"]],[9763,9763],[9763,9771]]],[1564450125036,["GJX@GJXAIOU",[[-1,9763,"language"],[1,9771,"j"]],[9763,9771],[9764,9764]]],[1564450125493,["GJX@GJXAIOU",[[1,9764,"ava"]],[9764,9764],[9767,9767]]],[1564450125749,["GJX@GJXAIOU",[[1,9768,"\n"]],[9767,9767],[9768,9768]]],[1564450129176,["GJX@GJXAIOU",[[1,9768,"package d_getincrement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws SQLException {\n\t\t//getCount();\n\t\tgetAutoIncrementValue();\n\t}\n\t\n\tpublic static void getAutoIncrementValue() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into person(name, age) values('吴京', 40)\";\n\t\t\n\t\t/*\n\t\t * 想要在插入数据的同时获取到当前插入数据的ID号\n\t\t * 实际意义：秒杀活动第几名，第几个注册用户\n\t\t */\n\t\t//获取PreparedStatement添加一个参数 Statement.RETURN_GENERATED_KEYS\n\t\tPreparedStatement statement = conn.prepareStatement(sql,\n\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\t//从已经设置过参数的PreparedStatement里面获取到自增长值结果集ResultSet类型\n\t\tResultSet generatedKeys = statement.getGeneratedKeys();\n\t\t\n\t\tif (generatedKeys.next()) {\n\t\t\tint id = generatedKeys.getInt(1);\n\t\t\tSystem.out.println(\"id = \" + id);\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, generatedKeys);\n\t}\n\t\n\t//计算数据库中数量\n\tpublic static void getCount() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select count(*) c from person\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {\n\t\t\t//System.out.println(set.getInt(\"count(*)\"));\n\t\t\tSystem.out.println(set.getInt(\"c\"));\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, set);\n\t}\n}\n"]],[9768,9768],[11246,11246]]],[1564450132938,["GJX@GJXAIOU",[[1,11259,"\n"]],[11250,11250],[11251,11251]]],[1564450133068,["GJX@GJXAIOU",[[1,11260,"\n"]],[11251,11251],[11252,11252]]],[1564450637847,["GJX@GJXAIOU",[[1,11252,"## rensh"]],[11252,11252],[11260,11260]]],[1564450638586,["GJX@GJXAIOU",[[-1,11255,"rensh"]],[11260,11260],[11255,11255]]],[1564450640375,["GJX@GJXAIOU",[[1,11255,"认识"]],[11255,11255],[11257,11257]]],[1564450641437,["GJX@GJXAIOU",[[-1,11255,"认识"]],[11257,11257],[11255,11255]]],[1564450642623,["GJX@GJXAIOU",[[1,11255,"事物"]],[11255,11255],[11257,11257]]],[1564450644361,["GJX@GJXAIOU",[[-1,11255,"事物"]],[11257,11257],[11255,11255]]],[1564450648361,["GJX@GJXAIOU",[[1,11255,"事务处理"]],[11255,11255],[11259,11259]]],[1564450650379,["GJX@GJXAIOU",[[1,11268,"\n"]],[11259,11259],[11260,11260]]],[1564450650690,["GJX@GJXAIOU",[[1,11269,"\n"]],[11260,11260],[11261,11261]]],[1564450651870,["GJX@GJXAIOU",[[1,11261,"···"]],[11261,11261],[11264,11264]]],[1564450652698,["GJX@GJXAIOU",[[-1,11261,"···"]],[11264,11264],[11261,11261]]],[1564450654677,["GJX@GJXAIOU",[[1,11261,"```"]],[11261,11261],[11264,11264]]],[1564450654709,["GJX@GJXAIOU",[[1,11264,"language\n```\n"]],[11264,11264],[11264,11272]]],[1564450655676,["GJX@GJXAIOU",[[-1,11264,"language"],[1,11272,"j"]],[11264,11272],[11265,11265]]],[1564450656147,["GJX@GJXAIOU",[[1,11265,"ava"]],[11265,11265],[11268,11268]]],[1564450656275,["GJX@GJXAIOU",[[1,11269,"\n"]],[11268,11268],[11269,11269]]],[1564450659299,["GJX@GJXAIOU",[[1,11269,"package e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t//account();\n\t\tuseSavepoint();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}"]],[11269,11269],[12643,12643]]],[1564450675690,["GJX@GJXAIOU",[[1,12644,"\t\n"]],[12643,12643],[12645,12645]]],[1564450676921,["GJX@GJXAIOU",[[-1,12644,"\t"]],[12645,12645],[12644,12644]]],[1564450678637,["GJX@GJXAIOU",[[1,12644,"}"]],[12644,12644],[12645,12645]]],[1564450685813,["GJX@GJXAIOU",[[-1,11528,"\t\tuseSavepoint();"]],[11528,11545],[11528,11528]]],[1564450686829,["GJX@GJXAIOU",[[-1,11528,"\n"]],[11528,11528],[11527,11527]]],[1564450689594,["GJX@GJXAIOU",[[-1,11515,"//"]],[11517,11517],[11515,11515]]],[1564451108626,["GJX@GJXAIOU",[[1,11261,"\n"]],[11259,11259],[11260,11260]]],[1564451113151,["GJX@GJXAIOU",[[1,11260,"- fangshi"]],[11260,11260],[11269,11269]]],[1564451114306,["GJX@GJXAIOU",[[-1,11262,"fangshi"]],[11269,11269],[11262,11262]]],[1564451117350,["GJX@GJXAIOU",[[1,11262,"方式一：设置"]],[11262,11262],[11268,11268]]],[1564451121338,["GJX@GJXAIOU",[[-1,11266,"设置"]],[11268,11268],[11266,11266]]],[1564451123101,["GJX@GJXAIOU",[[1,11266,"冠词"]],[11266,11266],[11268,11268]]],[1564451124489,["GJX@GJXAIOU",[[-1,11265,"：冠词"]],[11268,11268],[11265,11265]]],[1564451127364,["GJX@GJXAIOU",[[1,11265,"关闭"]],[11265,11265],[11267,11267]]],[1564451131093,["GJX@GJXAIOU",[[-1,11265,"关闭"]],[11267,11267],[11265,11265]]],[1564451131757,["GJX@GJXAIOU",[[1,11265,"："]],[11265,11265],[11266,11266]]],[1564451137069,["GJX@GJXAIOU",[[1,11266,"关闭自动提交"]],[11266,11266],[11272,11272]]],[1564451140474,["GJX@GJXAIOU",[[1,12652,"\n"]],[12642,12642],[12643,12643]]],[1564451140619,["GJX@GJXAIOU",[[1,12653,"\n"]],[12643,12643],[12644,12644]]],[1564451151457,["GJX@GJXAIOU",[[1,12644,"- 方式二：设置还原点"]],[12644,12644],[12655,12655]]],[1564451151749,["GJX@GJXAIOU",[[1,12656,"- \n"]],[12655,12655],[12658,12658]]],[1564451152897,["GJX@GJXAIOU",[[-1,12656,"- "]],[12658,12658],[12656,12656]]],[1564451154000,["GJX@GJXAIOU",[[1,12656,"****"]],[12656,12656],[12658,12658]]],[1564451156412,["GJX@GJXAIOU",[[1,12658,"注意c"]],[12658,12658],[12661,12661]]],[1564451156448,["GJX@GJXAIOU",[[1,12660," "]],[12661,12661],[12662,12662]]],[1564451161752,["GJX@GJXAIOU",[[1,12662,"ommit位置"]],[12662,12662],[12669,12669]]],[1564451161786,["GJX@GJXAIOU",[[1,12667," "]],[12669,12669],[12670,12670]]],[1564451178656,["GJX@GJXAIOU",[[1,12672,"，如果还原点之后代码没有问题，就应该提交"]],[12672,12672],[12692,12692]]],[1564451181025,["GJX@GJXAIOU",[[-1,12690,"提交"]],[12692,12692],[12690,12690]]],[1564451192472,["GJX@GJXAIOU",[[1,12690,"将还原点之前操作和之后的操作都"]],[12690,12690],[12705,12705]]],[1564451198391,["GJX@GJXAIOU",[[1,12705,"提交，但是"]],[12705,12705],[12710,12710]]],[1564451200017,["GJX@GJXAIOU",[[-1,12707,"，但是"]],[12710,12710],[12707,12707]]],[1564451205648,["GJX@GJXAIOU",[[1,12707,"；如果幼儿难题"]],[12707,12707],[12714,12714]]],[1564451206634,["GJX@GJXAIOU",[[-1,12710,"幼儿难题"]],[12714,12714],[12710,12710]]],[1564451220397,["GJX@GJXAIOU",[[1,12710,"有问题，应该将还原点之前的代码进行提交；"]],[12710,12710],[12730,12730]]],[1564451221058,["GJX@GJXAIOU",[[-1,12729,"；"]],[12730,12730],[12729,12729]]],[1564451221654,["GJX@GJXAIOU",[[1,12729,"。"]],[12729,12729],[12730,12730]]],[1564451225226,["GJX@GJXAIOU",[[1,12740,"\n"]],[12730,12730],[12731,12731]]],[1564451225570,["GJX@GJXAIOU",[[1,12741,"\n"]],[12731,12731],[12732,12732]]],[1564451227098,["GJX@GJXAIOU",[[1,12732,"    "]],[12732,12732],[12736,12736]]],[1564451228370,["GJX@GJXAIOU",[[-1,12733,"   "]],[12736,12736],[12733,12733]]],[1564451229413,["GJX@GJXAIOU",[[1,12733,"```"]],[12733,12733],[12736,12736]]],[1564451231113,["GJX@GJXAIOU",[[-1,12732," ```"]],[12736,12736],[12732,12732]]],[1564451232773,["GJX@GJXAIOU",[[1,12732,"```"]],[12732,12732],[12735,12735]]],[1564451232808,["GJX@GJXAIOU",[[1,12735,"language\n```\n"]],[12735,12735],[12735,12743]]],[1564451234012,["GJX@GJXAIOU",[[-1,12735,"language"],[1,12743,"j"]],[12735,12743],[12736,12736]]],[1564451234454,["GJX@GJXAIOU",[[1,12736,"ava"]],[12736,12736],[12739,12739]]],[1564451234562,["GJX@GJXAIOU",[[1,12740,"\n"]],[12739,12739],[12740,12740]]],[1564451238189,["GJX@GJXAIOU",[[1,12740,"package e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t//account();\n\t\tuseSavepoint();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic static void useSavepoint() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\t\t//还原点！！！\n\t\tSavepoint savepoint = null;\n\n\t\ttry {\n\t\t\t//下面这里没有还原点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t\tstatement1.close();\n\t\t\tstatement2.close();\n\n\t\t\t\n\t\t\t//下面有还原点\n\t\t\t//设置还原点\n\t\t\tsavepoint = conn.setSavepoint();\n\n\t\t\tsql1 = \"update bank set name = '马云' where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tsql2 = \"update bank set name = '匿名君' where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\n\t\t\ttry {\n\t\t\t\t//回滚到还原点，相当于取消设置还原点之后的代码执行\n\t\t\t\tconn.rollback(savepoint);\n\t\t\t} catch (SQLException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\n\t\t\ttry {\n\t\t\t\tconn.commit();\n\t\t\t\t\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[12740,12740],[15532,15532]]],[1564451250225,["GJX@GJXAIOU",[[-1,12984,"\t\t//account();"]],[12984,12998],[12984,12984]]],[1564451250666,["GJX@GJXAIOU",[[-1,12984,"\n"]],[12984,12984],[12983,12983]]],[1564451256650,["GJX@GJXAIOU",[[-1,13007,"/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n"]],[13007,14100],[13007,13007]]],[1564451258970,["GJX@GJXAIOU",[[-1,13008,"\n"]],[13008,13008],[13007,13007]]],[1564451259361,["GJX@GJXAIOU",[[-1,13006,"\t"]],[13007,13007],[13006,13006]]],[1564451265146,["GJX@GJXAIOU",[[-1,14422,"\n"]],[14422,14422],[14421,14421]]],[1564451265645,["GJX@GJXAIOU",[[-1,14421,"\n"]],[14421,14421],[14420,14420]]],[1564451265753,["GJX@GJXAIOU",[[-1,14420,"\n"]],[14420,14420],[14419,14419]]],[1564451265843,["GJX@GJXAIOU",[[-1,14419,"\n"]],[14419,14419],[14418,14418]]],[1564451265924,["GJX@GJXAIOU",[[-1,14418,"\n"]],[14418,14418],[14417,14417]]],[1564451266015,["GJX@GJXAIOU",[[-1,14417,"\n"]],[14417,14417],[14416,14416]]],[1564451266104,["GJX@GJXAIOU",[[-1,14416,"\n"]],[14416,14416],[14415,14415]]],[1564451266189,["GJX@GJXAIOU",[[-1,14415,"\n"]],[14415,14415],[14414,14414]]],[1564451266275,["GJX@GJXAIOU",[[-1,14414,"\n"]],[14414,14414],[14413,14413]]],[1564451266361,["GJX@GJXAIOU",[[-1,14413,"\n"]],[14413,14413],[14412,14412]]],[1564451266456,["GJX@GJXAIOU",[[-1,14412,"\n"]],[14412,14412],[14411,14411]]],[1564451266551,["GJX@GJXAIOU",[[-1,14411,"\n"]],[14411,14411],[14410,14410]]],[1564451266645,["GJX@GJXAIOU",[[-1,14410,"\n"]],[14410,14410],[14409,14409]]],[1564451266760,["GJX@GJXAIOU",[[-1,14409,"\n"]],[14409,14409],[14408,14408]]],[1564451266838,["GJX@GJXAIOU",[[-1,14408,"\n"]],[14408,14408],[14407,14407]]],[1564451266931,["GJX@GJXAIOU",[[-1,14407,"\n"]],[14407,14407],[14406,14406]]],[1564451267013,["GJX@GJXAIOU",[[-1,14406,"\n"]],[14406,14406],[14405,14405]]],[1564451268641,["GJX@GJXAIOU",[[-1,14405,"\n"]],[14405,14405],[14404,14404]]],[1564451268937,["GJX@GJXAIOU",[[-1,14404,"\n"]],[14404,14404],[14403,14403]]],[1564451269160,["GJX@GJXAIOU",[[-1,14403,"\n"]],[14403,14403],[14402,14402]]],[1564451269370,["GJX@GJXAIOU",[[-1,14402,"\n"]],[14402,14402],[14401,14401]]],[1564451269617,["GJX@GJXAIOU",[[-1,14401,"\n"]],[14401,14401],[14400,14400]]],[1564451269961,["GJX@GJXAIOU",[[-1,14400,"\n"]],[14400,14400],[14399,14399]]],[1564451270313,["GJX@GJXAIOU",[[-1,14399,"\n"]],[14399,14399],[14398,14398]]]],null,"GJX@GJXAIOU"],["a9b705e9-b095-4f5f-a66e-f6f6308c29f3",1564667343068,"# JavaEEDay35数据库\n\n## preparedstatement 接口使用\n\n- 首先对应数据库建立一个实体类：Person.java\n```java\npackage a_preparedstatement;\n\npublic class Person {\n\t/*\n\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\n\t */\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Integer age;\n\n\tpublic Integer getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Integer id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n\n```\n\n- 然后完成对应的具体实现类 PersonDao.java\n```java\npackage a_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport utils.JDBCUtil;\n\npublic class PersonDao {\n\t\n\t/*\n\t 使用PreparedStatement\n\t 增删改查\n\t */\n\t/**\n\t * 出入一个Person类对象，保存数据到数据库中\n\t * @param person\n\t * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n\t */\n\tpublic int add(Person person) {\n\t\t//连接数据库\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t//预处理SQL语句，获取到PreparedStatement\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//给予参数\n\t\t\tstatement.setString(1, person.getName());// 1表示第一个?\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\t\n\t\t\t//执行SQL语句,返回Int类型，为影响的行数\n\t\t\treturn statement.executeUpdate();\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 根据ID删除数据库里面的数据\n\t * @param id\n\t * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n\t */\n\tpublic int deleteById(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"delete from person where id = ?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 修改Person的个人信息\n\t * @param person 传入的Person类对象\n\t * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n\t */\n\tpublic int update(Person person) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"update person set name=?, age=? where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setString(1, person.getName());\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\tstatement.setInt(3, person.getId());\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\t\n\t\t}\n\t\treturn 0;\n\t} \n\t\n\t/**\n\t * 查询数据库里面的所有的Person信息，返回一个List集合\n\t * @return 返回保存Person类对象的List集合\n\t */\n\tpublic List<Person> findAll() {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tList<Person> list = new ArrayList<Person>();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\twhile (set.next()) {\n\t\t\t\tPerson p = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t\t\n\t\t\t\tlist.add(p);\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n\t * @param id 要查询的PersonID\n\t * @return 返回一个Person类对象，如果没有找到，返回null\n\t */\n\tpublic Person findById(int id) {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tPerson p = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tp = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t}\n\t\t\t\n\t\t\treturn p;\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n```\n\n- 最后实现界面的 viewDemo1.java ==有的功能未完成==\n```java\npackage a_preparedstatement;\n\nimport java.util.Scanner;\n\npublic class ViewDemo1 {\n\tpublic static void main(String[] args) {\n\t\tPersonDao pDao = new PersonDao();\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\twhile (true) {\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\tSystem.out.println(\"1. 添加数据\");\n\t\t\tSystem.out.println(\"2. 删除数据\");\n\t\t\tSystem.out.println(\"3. 更新数据\");\n\t\t\tSystem.out.println(\"4. 查询所有数据\");\n\t\t\tSystem.out.println(\"5. 查看指定数据\");\n\t\t\tSystem.out.println(\"6. 退出\");\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\t\n\t\t\tint choose = sc.nextInt();\n\t\t\tswitch (choose) {\n\t\t\t\tcase 1:\n\t\t\t\t\tSystem.out.println(\"请输入姓名\");\n\t\t\t\t\tString name = sc.next();\n\t\t\t\t\tSystem.out.println(\"请输入年龄\");\n\t\t\t\t\tint age = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tPerson p = new Person();\n\t\t\t\t\tp.setName(name);\n\t\t\t\t\tp.setAge(age);\n\t\t\t\t\t\n\t\t\t\t\tpDao.add(p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tpDao.deleteById(5);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tSystem.out.println(\"退出程序\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n## 批处理操作\n\n一般针对于批量插入操作；\n```java\npackage b_batch;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.PreparedStatement;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\tpublic static void main(String[] args) {\n\t\t//testInsert(); //调用没有经过批处理\n\t\tbatch(); //调用批处理\n\t}\n\t\n\t/**\n\t * 未使用批处理时间是6382ms\n\t */\n\tpublic static void testInsert() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//不使用批处理进行插入操作\n\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\tString name = \"Jack\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\tstatement.executeUpdate();\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n\t\n\t\n\t\n\t/**\n\t * 使用PreparedStatement批处理操作\n\t * 主要用来处理一些有规律的SQL语句，这样做可以降低数据库的处理压力\n\t */\n\tpublic static void batch() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?, ?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\tint flag = 0;\n\t\t\tfor (int i = 0; i < 9950; i++) {\n\t\t\t\tString name = \"John\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\t//添加批处理\n\t\t\t\tstatement.addBatch();\n\t\t\t\tflag++;\n\t\t\t\t//每1000条SQL语句批处理一次\n\t\t\t\tif (flag % 1000 == 0) {\n\t\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\t\tstatement.executeBatch();\n\t\t\t\t\t//执行保存在批处理里面的SQL语句之后，清空批处理缓冲区\n\t\t\t\t\tstatement.clearBatch();\n\t\t\t\t\tflag = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//注意，批处理中剩余的SQL语句\n\t\t\tif (flag > 0) {\n\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\tstatement.executeBatch();\n\t\t\t\t//执行保存在批处理里面的SQL语句之后，情况批处理缓冲区\n\t\t\t\tstatement.clearBatch();\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n}\n\n```\n\n\n## 保存文本数据到数据库\n内容使用 blob 格式\n```java\npackage c_blob;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws Exception {\n\t\t//writeTest();\n\t\treadTest();\n\t}\n\t\n\t/**\n\t * 把文件数据，保存到数据库\n\t * @throws Exception \n\t */\n\tpublic static void writeTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into testblob(value) values(?)\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\t//使用缓冲字节流读取数据\n\t\tBufferedInputStream bs = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(new File(\"./res/《The Story of the Stone》.txt\")));\n\t\t\n\t\t//设置字节流\n\t\tstatement.setBinaryStream(1, bs);\n\t\t//statement.setCharacterStream(int parameterIndex, Reader reader);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\tJDBCUtil.close(conn, statement);\n\t\tbs.close();\n\t}\n\t\n\t\n\t//将刚才放入数据库是的数据拿出\n\tpublic static void readTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select value from testblob where id = 1\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tBufferedInputStream bs = null;\n\t\tBufferedOutputStream bos = null;\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {  \n\t\t\t//采用字符流进行读取\n\t\t\tInputStream in = set.getBinaryStream(1);\n\t\t\tbs = new BufferedInputStream(in);\n\t\t\tbos = new BufferedOutputStream(\n\t\t\t\t\tnew FileOutputStream(new File(\"C:\\\\javaEE1707\\\\Day36\\\\res\\\\1.txt\")));\n\t\t\t\n\t\t\tint length = 0;\n\t\t\tbyte[] buf = new byte[8 * 1024];\n\t\t\twhile ((length = bs.read(buf)) != -1) {\n\t\t\t\tbos.write(buf, 0, length);\n\t\t\t}\n\t\t}\n\t\tJDBCUtil.close(conn, statement, set);\n\t\tbos.close();\n\t\tbs.close();\n\t}\n}\n\n\n```\n\n## 获取自增长值\n```java\npackage d_getincrement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws SQLException {\n\t\t//getCount();\n\t\tgetAutoIncrementValue();\n\t}\n\t\n\tpublic static void getAutoIncrementValue() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into person(name, age) values('吴京', 40)\";\n\t\t\n\t\t/*\n\t\t * 想要在插入数据的同时获取到当前插入数据的ID号\n\t\t * 实际意义：秒杀活动第几名，第几个注册用户\n\t\t */\n\t\t//获取PreparedStatement添加一个参数 Statement.RETURN_GENERATED_KEYS\n\t\tPreparedStatement statement = conn.prepareStatement(sql,\n\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\t//从已经设置过参数的PreparedStatement里面获取到自增长值结果集ResultSet类型\n\t\tResultSet generatedKeys = statement.getGeneratedKeys();\n\t\t\n\t\tif (generatedKeys.next()) {\n\t\t\tint id = generatedKeys.getInt(1);\n\t\t\tSystem.out.println(\"id = \" + id);\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, generatedKeys);\n\t}\n\t\n\t//计算数据库中数量\n\tpublic static void getCount() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select count(*) c from person\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {\n\t\t\t//System.out.println(set.getInt(\"count(*)\"));\n\t\t\tSystem.out.println(set.getInt(\"c\"));\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, set);\n\t}\n}\n\n```\n\n## 事务处理\n- 方式一：关闭自动提交\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\taccount();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- 方式二：设置还原点\n**注意 commit 位置**，如果还原点之后代码没有问题，就应该将还原点之前操作和之后的操作都提交；如果有问题，应该将还原点之前的代码进行提交。\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tuseSavepoint();\n\t}\n\n\n\tpublic static void useSavepoint() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\t\t//还原点！！！\n\t\tSavepoint savepoint = null;\n\n\t\ttry {\n\t\t\t//下面这里没有还原点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t\tstatement1.close();\n\t\t\tstatement2.close();\n\n\t\t\t\n\t\t\t//下面有还原点\n\t\t\t//设置还原点\n\t\t\tsavepoint = conn.setSavepoint();\n\n\t\t\tsql1 = \"update bank set name = '马云' where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tsql2 = \"update bank set name = '匿名君' where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\n\t\t\ttry {\n\t\t\t\t//回滚到还原点，相当于取消设置还原点之后的代码执行\n\t\t\t\tconn.rollback(savepoint);\n\t\t\t} catch (SQLException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\n\t\t\ttry {\n\t\t\t\tconn.commit();\n\t\t\t\t\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",[[1564667292293,["GJX@GJXAIOU",[[1,1266," 1."]],[1266,1266],[1269,1269]]],[1564668154915,["GJX@GJXAIOU",[[1,44,"ti"]],[44,44],[46,46]]],[1564668156379,["GJX@GJXAIOU",[[-1,44,"ti"]],[46,46],[44,44]]],[1564668167207,["GJX@GJXAIOU",[[1,44,"提供一个POJO"]],[44,44],[52,52]]],[1564668167242,["GJX@GJXAIOU",[[1,48," "]],[52,52],[53,53]]],[1564668168309,["GJX@GJXAIOU",[[1,53,"文件"]],[53,53],[55,55]]],[1564668168346,["GJX@GJXAIOU",[[1,53," "]],[55,55],[56,56]]],[1564668173456,["GJX@GJXAIOU",[[1,56,"：Person.java"]],[56,56],[68,68]]],[1564668180197,["GJX@GJXAIOU",[[1,69,"\n"]],[68,68],[69,69]]],[1564668181341,["GJX@GJXAIOU",[[1,69,"ranhou"]],[69,69],[75,75]]],[1564668182403,["GJX@GJXAIOU",[[-1,69,"ranhou"]],[75,75],[69,69]]],[1564668189405,["GJX@GJXAIOU",[[1,69,"然后在Person"]],[69,69],[78,78]]],[1564668189442,["GJX@GJXAIOU",[[1,72," "]],[78,78],[79,79]]],[1564668192313,["GJX@GJXAIOU",[[1,79,"D奥"]],[79,79],[81,81]]],[1564668193101,["GJX@GJXAIOU",[[-1,80,"奥"]],[81,81],[80,80]]],[1564668204433,["GJX@GJXAIOU",[[1,80,"ao.java 中实现怎"]],[80,80],[92,92]]],[1564668205020,["GJX@GJXAIOU",[[-1,91,"怎"]],[92,92],[91,91]]],[1564668219824,["GJX@GJXAIOU",[[1,91,"增删改查方法付"]],[91,91],[98,98]]],[1564668220387,["GJX@GJXAIOU",[[-1,97,"付"]],[98,98],[97,97]]],[1564668220998,["GJX@GJXAIOU",[[1,97,"，"]],[97,97],[98,98]]],[1564668222004,["GJX@GJXAIOU",[[-1,97,"，"]],[98,98],[97,97]]],[1564668222564,["GJX@GJXAIOU",[[1,98,"\n"]],[97,97],[98,98]]],[1564668224714,["GJX@GJXAIOU",[[1,98,"****"]],[98,98],[100,100]]],[1564668229208,["GJX@GJXAIOU",[[1,100,"与Day"]],[100,100],[104,104]]],[1564668229245,["GJX@GJXAIOU",[[1,101," "]],[104,104],[105,105]]],[1564668234662,["GJX@GJXAIOU",[[1,105,"34 代码不同带你："]],[105,105],[115,115]]],[1564668235403,["GJX@GJXAIOU",[[-1,112,"带你："]],[115,115],[112,112]]],[1564668238669,["GJX@GJXAIOU",[[1,112,"点："]],[112,112],[114,114]]],[1564668241296,["GJX@GJXAIOU",[[1,116," 参数"]],[116,116],[119,119]]],[1564668243911,["GJX@GJXAIOU",[[1,119,"输入转给你"]],[119,119],[124,124]]],[1564668245307,["GJX@GJXAIOU",[[-1,119,"输入转给你"]],[124,124],[119,119]]],[1564668250319,["GJX@GJXAIOU",[[1,119,"中方式的是g"]],[119,119],[125,125]]],[1564668250355,["GJX@GJXAIOU",[[1,124," "]],[125,125],[126,126]]],[1564668254357,["GJX@GJXAIOU",[[1,126,"et方法"]],[126,126],[130,130]]],[1564668254394,["GJX@GJXAIOU",[[1,128," "]],[130,130],[131,131]]],[1564668261325,["GJX@GJXAIOU",[[1,117,"方法"]],[117,117],[119,119]]],[1564668263310,["GJX@GJXAIOU",[[-1,117,"方法"]],[119,119],[117,117]]],[1564668273040,["GJX@GJXAIOU",[[1,117,"通过在方法中传入Person"]],[117,117],[131,131]]],[1564668274072,["GJX@GJXAIOU",[[1,125," "],[1,131," 对象"]],[131,131],[134,134]]],[1564668274109,["GJX@GJXAIOU",[[1,132," "]],[134,134],[135,135]]],[1564668275696,["GJX@GJXAIOU",[[1,135,"，实现"]],[135,135],[138,138]]],[1564668280733,["GJX@GJXAIOU",[[1,153,"得到"]],[153,153],[155,155]]],[1564668287644,["GJX@GJXAIOU",[[-1,397,"public Integer getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Integer id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n"]],[397,694],[397,397]]],[1564668292859,["GJX@GJXAIOU",[[-1,249,"\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类"]],[249,324],[249,249]]],[1564668294579,["GJX@GJXAIOU",[[1,185,"- \n"]],[184,184],[187,187]]],[1564668295859,["GJX@GJXAIOU",[[1,187,"\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类"]],[187,187],[337,337]]],[1564668298078,["GJX@GJXAIOU",[[-1,187,"\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类"]],[337,337],[187,187]]],[1564668299644,["GJX@GJXAIOU",[[1,187,"\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类"]],[187,187],[262,262]]],[1564668301859,["GJX@GJXAIOU",[[-1,185,"- "]],[185,187],[185,185]]],[1564668302605,["GJX@GJXAIOU",[[-1,184,"\n"]],[185,185],[184,184]]],[1564668363094,[null,[[-1,133," "],[1,135,"象"],[-1,138,"象"],[1,139," "]],[133,133],[140,140]]],[1564668363094,[null,[[1,133," "],[-1,134,"象"],[1,138,"象"],[-1,138," "]],[140,140],[133,133]]],[1564668304020,["GJX@GJXAIOU",[[1,184,"\n"]],[184,184],[185,185]]],[1564668320483,["GJX@GJXAIOU",[[-1,277,"a_"],[1,279,"jdbc."],[-1,287,"s"],[1,288,"S"],[1,299,"/**\n * @author GJXAIOU\n * @create 2019-08-01-20:09\n */\n"],[-1,321,"\t/*\n\n\t */\n\t"],[1,332,"    "],[-1,352,"\t"],[1,353,"    "],[-1,374,"\t"],[1,375,"    private String gender;\n    "],[1,391,"score;\n    priv"],[1,392,"te Strin"],[1,393," hom"],[-1,396,"\n\t\n\t"],[1,400,"    private String hobby;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public String getHome() {\n        return home;\n    }\n\n    public void setHome(String home) {\n        this.home = home;\n    }\n\n    public String getHobby() {\n        return hobby;\n    }\n\n    public void setHobby(String hobby) {\n        this.hobby = hobby;\n    }\n\n    "],[-1,410,"\t"],[1,411,"    "],[-1,438,"\t\t"],[1,440,"        "],[-1,454," ["],[1,456,"{\" +\n                \""],[1,467,"\n               "],[1,476,"'"],[1,487,"'\\'' +\n                "],[-1,490,"a"],[1,493,"nder"],[1,494,"'"],[-1,498,"a"],[1,501,"nder"],[-1,504,"\"]\";\n\t"],[1,510,"'\\'' +\n                \", score=\" + score +\n                \", home='\" + home + '\\'' +\n                \", hobby='\" + hobby + '\\'' +\n                '}';\n    "],[1,513,"\n"]],[269,513],[1675,1675]]],[1564668330636,["GJX@GJXAIOU",[[-1,657," public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public String getHome() {\n        return home;\n    }\n\n    public void setHome(String home) {\n        this.home = home;\n    }\n\n    public String getHobby() {\n        return hobby;\n    }\n\n    public void setHobby(String hobby) {\n        this.hobby = hobby;\n    }\n"]],[657,1329],[657,657]]],[1564668338166,["GJX@GJXAIOU",[[-1,537," public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n"]],[537,653],[537,537]]],[1564668341152,["GJX@GJXAIOU",[[1,537,"、、"]],[537,537],[539,539]]],[1564668341807,["GJX@GJXAIOU",[[-1,537,"、、"]],[539,539],[537,537]]],[1564668353433,["GJX@GJXAIOU",[[1,537,"//这里是上面成员变量"]],[537,537],[548,548]]],[1564668357078,["GJX@GJXAIOU",[[1,539,"、"]],[539,539],[540,540]]],[1564668357434,["GJX@GJXAIOU",[[-1,539,"、"]],[540,540],[539,539]]],[1564668358333,["GJX@GJXAIOU",[[1,539,"/ "]],[539,539],[541,541]]],[1564668362401,["GJX@GJXAIOU",[[1,550,"对应的"]],[550,550],[553,553]]],[1564668423095,[null,[[-1,133," "],[1,135,"象"],[-1,138,"象"],[1,139," "]],[133,133],[140,140]]],[1564668423095,[null,[[1,133," "],[-1,134,"象"],[1,138,"象"],[-1,138," "]],[140,140],[133,133]]],[1564668363828,["GJX@GJXAIOU",[[1,553,"det"]],[553,553],[556,556]]],[1564668365073,["GJX@GJXAIOU",[[-1,553,"det"]],[556,556],[553,553]]],[1564668368136,["GJX@GJXAIOU",[[1,553,"set和git"]],[553,553],[560,560]]],[1564668368790,["GJX@GJXAIOU",[[-1,558,"it"]],[560,560],[558,558]]],[1564668371208,["GJX@GJXAIOU",[[1,558,"et 方"]],[558,558],[562,562]]],[1564668372477,["GJX@GJXAIOU",[[-1,560," 方"]],[562,562],[560,560]]],[1564668373519,["GJX@GJXAIOU",[[1,560,"方法"]],[560,560],[562,562]]],[1564668543095,[null,[[-1,133," "],[1,135,"象"],[-1,138,"象"],[1,139," "]],[133,133],[140,140]]],[1564668543095,[null,[[1,133," "],[-1,134,"象"],[1,138,"象"],[-1,138," "]],[140,140],[133,133]]],[1564668539106,["GJX@GJXAIOU",[[-1,639,"                "]],[655,655],[639,639]]],[1564668539594,["GJX@GJXAIOU",[[-1,638,"\n"]],[639,639],[638,638]]],[1564668542234,["GJX@GJXAIOU",[[-1,651,"                "]],[651,667],[651,651]]],[1564668542605,["GJX@GJXAIOU",[[-1,650,"\n"]],[651,651],[650,650]]],[1564668603099,[null,[[-1,133," "],[1,135,"象"],[-1,138,"象"],[1,139," "]],[133,133],[140,140]]],[1564668603099,[null,[[1,133," "],[-1,134,"象"],[1,138,"象"],[-1,138," "]],[140,140],[133,133]]],[1564668545212,["GJX@GJXAIOU",[[-1,724,"                "]],[724,740],[724,724]]],[1564668545546,["GJX@GJXAIOU",[[-1,723,"\n"]],[724,724],[723,723]]],[1564668551418,["GJX@GJXAIOU",[[-1,787,"                "]],[803,803],[787,787]]],[1564668551842,["GJX@GJXAIOU",[[-1,786,"\n"]],[787,787],[786,786]]],[1564668554466,["GJX@GJXAIOU",[[-1,845,"\n"]],[845,845],[844,844]]],[1564668554659,["GJX@GJXAIOU",[[-1,844,"\n"]],[844,844],[843,843]]]],null,"GJX@GJXAIOU"],["eddcb41f-0cfe-4886-b666-3b312c9db6a5",1564715188767,"# JavaEEDay35数据库\n\n## preparedstatement 接口使用\n提供一个 POJO 文件：Person.java\n然后在 PersonDao.java 中实现增删改查方法\n**与 Day34 代码不同点：** 通过在方法中传入 Person 对象，实现 参数中方式的是 get 方法得到\n- 首先对应数据库建立一个实体类：Person.java\n\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\n```java\npackage jdbc.preparedStatement;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-01-20:09\n */\npublic class Person {\n    private Integer id;\n    private String name;\n    private String gender;\n    private Integer score;\n    private String home;\n    private String hobby;\n\n   /// 这里是上面成员变量对应的set和get方法\n   \n    @Override\n    public String toString() {\n        return \"Person{\" +\"id=\" + id +\", name='\" + name + '\\'' +\n                \", gender='\" + gender + '\\'' +\", score=\" + score +\n                \", home='\" + home + '\\'' +\", hobby='\" + hobby + '\\'' +\n                '}';\n    }\n}\n```\n\n- 然后完成对应的具体实现类 PersonDao.java\n```java\npackage a_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport utils.JDBCUtil;\n\npublic class PersonDao {\n\t\n\t/*\n\t 使用PreparedStatement\n\t 增删改查\n\t */\n\t/**\n\t * 出入一个Person类对象，保存数据到数据库中\n\t * @param person\n\t * @return int类型，返回值大于0表示添加成功，返回0表示添加数据失败\n\t */\n\tpublic int add(Person person) {\n\t\t//连接数据库\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCU 1.til.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t//预处理SQL语句，获取到PreparedStatement\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//给予参数\n\t\t\tstatement.setString(1, person.getName());// 1表示第一个?\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\t\n\t\t\t//执行SQL语句,返回Int类型，为影响的行数\n\t\t\treturn statement.executeUpdate();\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 根据ID删除数据库里面的数据\n\t * @param id\n\t * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n\t */\n\tpublic int deleteById(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"delete from person where id = ?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t/**\n\t * 修改Person的个人信息\n\t * @param person 传入的Person类对象\n\t * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n\t */\n\tpublic int update(Person person) {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"update person set name=?, age=? where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setString(1, person.getName());\n\t\t\tstatement.setInt(2, person.getAge());\n\t\t\tstatement.setInt(3, person.getId());\n\t\t\t\n\t\t\treturn statement.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\t\n\t\t}\n\t\treturn 0;\n\t} \n\t\n\t/**\n\t * 查询数据库里面的所有的Person信息，返回一个List集合\n\t * @return 返回保存Person类对象的List集合\n\t */\n\tpublic List<Person> findAll() {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tList<Person> list = new ArrayList<Person>();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\twhile (set.next()) {\n\t\t\t\tPerson p = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t\t\n\t\t\t\tlist.add(p);\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * 根据ID 查询数据库中的Person信息，返回一个Person类对象\n\t * @param id 要查询的PersonID\n\t * @return 返回一个Person类对象，如果没有找到，返回null\n\t */\n\tpublic Person findById(int id) {\n\t\tResultSet set = null;\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tPerson p = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"select * from person where id=?\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\tstatement.setInt(1, id);\n\t\t\t\n\t\t\tset = statement.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tp = new Person();\n\t\t\t\tp.setId(set.getInt(\"id\"));\n\t\t\t\tp.setName(set.getString(\"name\"));\n\t\t\t\tp.setAge(set.getInt(\"age\"));\n\t\t\t}\n\t\t\t\n\t\t\treturn p;\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement, set);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n```\n\n- 最后实现界面的 viewDemo1.java ==有的功能未完成==\n```java\npackage a_preparedstatement;\n\nimport java.util.Scanner;\n\npublic class ViewDemo1 {\n\tpublic static void main(String[] args) {\n\t\tPersonDao pDao = new PersonDao();\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\twhile (true) {\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\tSystem.out.println(\"1. 添加数据\");\n\t\t\tSystem.out.println(\"2. 删除数据\");\n\t\t\tSystem.out.println(\"3. 更新数据\");\n\t\t\tSystem.out.println(\"4. 查询所有数据\");\n\t\t\tSystem.out.println(\"5. 查看指定数据\");\n\t\t\tSystem.out.println(\"6. 退出\");\n\t\t\tSystem.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\t\t\t\n\t\t\tint choose = sc.nextInt();\n\t\t\tswitch (choose) {\n\t\t\t\tcase 1:\n\t\t\t\t\tSystem.out.println(\"请输入姓名\");\n\t\t\t\t\tString name = sc.next();\n\t\t\t\t\tSystem.out.println(\"请输入年龄\");\n\t\t\t\t\tint age = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tPerson p = new Person();\n\t\t\t\t\tp.setName(name);\n\t\t\t\t\tp.setAge(age);\n\t\t\t\t\t\n\t\t\t\t\tpDao.add(p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tpDao.deleteById(5);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tSystem.out.println(\"退出程序\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n## 批处理操作\n\n一般针对于批量插入操作；\n```java\npackage b_batch;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.PreparedStatement;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\tpublic static void main(String[] args) {\n\t\t//testInsert(); //调用没有经过批处理\n\t\tbatch(); //调用批处理\n\t}\n\t\n\t/**\n\t * 未使用批处理时间是6382ms\n\t */\n\tpublic static void testInsert() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//不使用批处理进行插入操作\n\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\tString name = \"Jack\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\tstatement.executeUpdate();\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n\t\n\t\n\t\n\t/**\n\t * 使用PreparedStatement批处理操作\n\t * 主要用来处理一些有规律的SQL语句，这样做可以降低数据库的处理压力\n\t */\n\tpublic static void batch() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?, ?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\tint flag = 0;\n\t\t\tfor (int i = 0; i < 9950; i++) {\n\t\t\t\tString name = \"John\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\t//添加批处理\n\t\t\t\tstatement.addBatch();\n\t\t\t\tflag++;\n\t\t\t\t//每1000条SQL语句批处理一次\n\t\t\t\tif (flag % 1000 == 0) {\n\t\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\t\tstatement.executeBatch();\n\t\t\t\t\t//执行保存在批处理里面的SQL语句之后，清空批处理缓冲区\n\t\t\t\t\tstatement.clearBatch();\n\t\t\t\t\tflag = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//注意，批处理中剩余的SQL语句\n\t\t\tif (flag > 0) {\n\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\tstatement.executeBatch();\n\t\t\t\t//执行保存在批处理里面的SQL语句之后，情况批处理缓冲区\n\t\t\t\tstatement.clearBatch();\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n}\n\n```\n\n\n## 保存文本数据到数据库\n内容使用 blob 格式\n```java\npackage c_blob;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws Exception {\n\t\t//writeTest();\n\t\treadTest();\n\t}\n\t\n\t/**\n\t * 把文件数据，保存到数据库\n\t * @throws Exception \n\t */\n\tpublic static void writeTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into testblob(value) values(?)\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\t//使用缓冲字节流读取数据\n\t\tBufferedInputStream bs = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(new File(\"./res/《The Story of the Stone》.txt\")));\n\t\t\n\t\t//设置字节流\n\t\tstatement.setBinaryStream(1, bs);\n\t\t//statement.setCharacterStream(int parameterIndex, Reader reader);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\tJDBCUtil.close(conn, statement);\n\t\tbs.close();\n\t}\n\t\n\t\n\t//将刚才放入数据库是的数据拿出\n\tpublic static void readTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select value from testblob where id = 1\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tBufferedInputStream bs = null;\n\t\tBufferedOutputStream bos = null;\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {  \n\t\t\t//采用字符流进行读取\n\t\t\tInputStream in = set.getBinaryStream(1);\n\t\t\tbs = new BufferedInputStream(in);\n\t\t\tbos = new BufferedOutputStream(\n\t\t\t\t\tnew FileOutputStream(new File(\"C:\\\\javaEE1707\\\\Day36\\\\res\\\\1.txt\")));\n\t\t\t\n\t\t\tint length = 0;\n\t\t\tbyte[] buf = new byte[8 * 1024];\n\t\t\twhile ((length = bs.read(buf)) != -1) {\n\t\t\t\tbos.write(buf, 0, length);\n\t\t\t}\n\t\t}\n\t\tJDBCUtil.close(conn, statement, set);\n\t\tbos.close();\n\t\tbs.close();\n\t}\n}\n\n\n```\n\n## 获取自增长值\n```java\npackage d_getincrement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws SQLException {\n\t\t//getCount();\n\t\tgetAutoIncrementValue();\n\t}\n\t\n\tpublic static void getAutoIncrementValue() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into person(name, age) values('吴京', 40)\";\n\t\t\n\t\t/*\n\t\t * 想要在插入数据的同时获取到当前插入数据的ID号\n\t\t * 实际意义：秒杀活动第几名，第几个注册用户\n\t\t */\n\t\t//获取PreparedStatement添加一个参数 Statement.RETURN_GENERATED_KEYS\n\t\tPreparedStatement statement = conn.prepareStatement(sql,\n\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\t//从已经设置过参数的PreparedStatement里面获取到自增长值结果集ResultSet类型\n\t\tResultSet generatedKeys = statement.getGeneratedKeys();\n\t\t\n\t\tif (generatedKeys.next()) {\n\t\t\tint id = generatedKeys.getInt(1);\n\t\t\tSystem.out.println(\"id = \" + id);\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, generatedKeys);\n\t}\n\t\n\t//计算数据库中数量\n\tpublic static void getCount() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select count(*) c from person\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {\n\t\t\t//System.out.println(set.getInt(\"count(*)\"));\n\t\t\tSystem.out.println(set.getInt(\"c\"));\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, set);\n\t}\n}\n\n```\n\n## 事务处理\n- 方式一：关闭自动提交\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\taccount();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- 方式二：设置还原点\n**注意 commit 位置**，如果还原点之后代码没有问题，就应该将还原点之前操作和之后的操作都提交；如果有问题，应该将还原点之前的代码进行提交。\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tuseSavepoint();\n\t}\n\n\n\tpublic static void useSavepoint() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\t\t//还原点！！！\n\t\tSavepoint savepoint = null;\n\n\t\ttry {\n\t\t\t//下面这里没有还原点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t\tstatement1.close();\n\t\t\tstatement2.close();\n\n\t\t\t\n\t\t\t//下面有还原点\n\t\t\t//设置还原点\n\t\t\tsavepoint = conn.setSavepoint();\n\n\t\t\tsql1 = \"update bank set name = '马云' where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tsql2 = \"update bank set name = '匿名君' where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\n\t\t\ttry {\n\t\t\t\t//回滚到还原点，相当于取消设置还原点之后的代码执行\n\t\t\t\tconn.rollback(savepoint);\n\t\t\t} catch (SQLException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\n\t\t\ttry {\n\t\t\t\tconn.commit();\n\t\t\t\t\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",[[1564715146716,["GJX@GJXAIOU",[[-1,537,"/// 这里是上面成员变量对应的set和get方法\n"],[1,563," public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public String getHome() {\n        return home;\n    }\n\n    public void setHome(String home) {\n        this.home = home;\n    }\n\n    public String getHobby() {\n "],[1,566,"    return hobby;\n    }\n\n    public void setHobby(String hobby) {\n        this.hobby = hobby;\n    }\n"],[1,638,"\n                "],[1,650,"\n                "],[1,723,"\n                "],[1,786,"\n                "],[-1,843,""],[1,843,"\n"]],[269,843],[1675,1675]]],[1564715165379,["GJX@GJXAIOU",[[-1,1727,"a_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.P"],[1,1794,"jdbc.p"],[-1,1812,"import java.sql.ResultSet;"],[1,1838,"\n"],[-1,1855,"SQLException"],[1,1867,"*"],[-1,1921,"import utils.JDBCUtil;\n"],[1,1944,"/**通过使用PreparedStatement实现增删改查\n * @author GJXAIOU\n * @create 2019-08-01-21:23\n */"],[-1,1970,"\t\n\t/*\n\t 使用PreparedStatement\n\t 增删改查\n\t */\n\t"],[1,2011,"    "],[-1,2015,"\t * 出"],[1,2020,"     * 输"],[-1,2043,"\t"],[1,2044,"    "],[-1,2061,"\t"],[1,2062,"    "],[-1,2092,"返回"],[1,2094,"等于"],[-1,2104,"\t"],[1,2105,"    "],[-1,2109,"\t"],[1,2110,"    "],[1,2124,"Test"],[-1,2142,"\t\t"],[1,2144,"        "],[1,2146," 1.建立"],[-1,2148,"数据库\n\t\t"],[1,2154,"\n        "],[-1,2169," = null;\n\t\tPr"],[-1,2183,"paredStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\t"],[1,2231,"ti"],[-1,2232,"n"],[-1,2238,"DBCU 1."],[1,2245,"dbcU"],[-1,2266,"\t\t\t"],[1,2269,"\n        // 2.准备预处理SQL语句\n        "],[-1,2308,"a"],[1,2311,"nder, score, home, hobby"],[1,2322," ?, ?, ?, "],[-1,2327,"\t\t\t//预处理SQL语句，获取到P"],[1,2345,"\n        PreparedStatement preparedStatement = null;\n        try {\n            // 3.使用p"],[-1,2361,"\n\t\t\ts"],[1,2366,"处理SQL语句\n            preparedS"],[1,2380,"nectio"],[-1,2405,"\t\t\t\n\t\t\t//给予参数\n\t\t\ts"],[1,2423,"\n            //插入数据\n            preparedS"],[-1,2444," "],[-1,2463,"// 1表示第一个?\n\t\t\ts"],[1,2478,"\n            preparedStatement.setString(2,person.getGender());\n            preparedS"],[-1,2494,"2"],[1,2495,"3"],[-1,2507,"Ag"],[1,2509,"Score());\n            preparedStatement.setString(4,person.getHom"],[-1,2515,"\t\t\t\n\t\t\t//执行"],[1,2526,"            preparedStatement.setString(5, person.getHobby());\n\n            //指向"],[-1,2531,",返回I"],[1,2535,"，返回的i"],[1,2537," "],[-1,2539,"，"],[-1,2547,"\t\t\t"],[1,2550,"            "],[-1,2557,"s"],[1,2558,"preparedS"],[-1,2584,"\t\t\t\n\t\t"],[1,2590,"        "],[-1,2617,"\t\t\t// TODO: handle exception\n\t\t\t"],[1,2649,"            "],[-1,2670,"\t\t"],[1,2672,"        "],[-1,2684,"\t\t\tJDBC"],[1,2691,"            Jdbc"],[1,2701,"Connection"],[1,2706,"ection"],[-1,2708,"s"],[1,2709,"preparedS"],[-1,2720,"\t\t}\n\t\t\n\t\t"],[1,2729,"        }\n\n        "],[-1,2739,"\t}\n\t\n\t"],[1,2745,"\n    }\n\n    "],[-1,2749,"\t"],[1,2750,"    "],[-1,2755,"ID"],[1,2757,"id"],[-1,2762,"里面的数据\n\t"],[1,2769,"中数据\n    "],[-1,2782,"\t"],[1,2783,"    "],[-1,2825,"\t"],[1,2826,"    "],[-1,2830,"\t"],[1,2831,"    "],[-1,2848,"ById"],[1,2852,"Test"],[-1,2860," {\n\t\t"],[1,2865,"{\n        // 1.建立数据库连接\n        "],[-1,2880," = null;\n\t\tPr"],[-1,2894,"paredStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\t"],[1,2942,"ti"],[-1,2943,"n"],[-1,2949,"DBC"],[1,2952,"dbc"],[-1,2974,"\t\t\t"],[1,2977,"\n        // 2.准备预处理SQL语句\n        "],[-1,3025,"\t\t\t\n\t\t\ts"],[1,3033,"\n        // 3.使用preparedStatement处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedS"],[1,3047,"nectio"],[-1,3072,"\t\t\t\n\t\t\ts"],[1,3080,"\n            // 4.输入参数\n            preparedS"],[-1,3104,"\t\t\t\n\t\t\t"],[1,3111,"\n            "],[-1,3118,"s"],[1,3119,"preparedS"],[-1,3145,"\t\t"],[1,3147,"        "],[-1,3174,"\t\t\t// TODO: handle"],[1,3192,"           "],[-1,3194,"xception\n\t\t\te"],[-1,3227,"\t\t} "],[1,3231,"        }"],[-1,3241,"\t\t\tJDBC"],[1,3248,"            Jdbc"],[1,3258,"Connection"],[1,3263,"ection"],[-1,3265,"s"],[1,3266,"preparedS"],[-1,3277,"\t\t}\n\t\t"],[1,3283,"        }\n\n        "],[-1,3293,"\t}\n\t\n\t"],[1,3299,"    }\n\n    "],[-1,3303,"\t"],[1,3304,"    "],[-1,3315,"的个人信息\n\t"],[1,3322,"表中数据信息\n    "],[-1,3342,"P"],[1,3343,"p"],[-1,3352,"\t"],[1,3353,"    "],[-1,3395,"\t"],[1,3396,"    "],[-1,3400,"\t"],[1,3401,"    "],[1,3418,"Test"],[-1,3433," {\n\t\t"],[1,3438,"{\n        // 1.建立连接\n        "],[-1,3453," = null;\n\t\tPr"],[-1,3467,"paredStatement statement = null;\n\t\t\n\t\ttry {\n\t\t\t"],[1,3515,"ti"],[-1,3516,"n"],[-1,3522,"DBC"],[1,3525,"dbc"],[-1,3547,"\t\t\t"],[1,3550,"\n        // 2.准备预处理的SQL语句\n        "],[1,3586," "],[1,3587," "],[1,3588," "],[-1,3590,"a"],[1,3593,"nder "],[1,3594," "],[1,3604," "],[1,3605," "],[-1,3609,"\t\t\t\n\t\t\t"],[1,3616,"\n        // 3.使用prepared"],[1,3625,"处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement"],[1,3631,"nectio"],[-1,3656,"\t\t\t\n\t\t\ts"],[1,3664,"            // 4.输入参数\n            preparedS"],[-1,3705,"\t\t\ts"],[1,3709,"            preparedS"],[-1,3721,"Int"],[1,3724,"String"],[-1,3738,"Age"],[1,3741,"Gender"],[-1,3746,"\t\t\ts"],[1,3750,"            preparedS"],[-1,3786,"\t\t\t\n\t\t\t"],[1,3793,"\n            "],[-1,3800,"s"],[1,3801,"preparedS"],[-1,3827,"\t\t"],[1,3829,"        "],[-1,3856,"\t\t\t// TODO: handle exception\n\t\t} "],[1,3889,"            e.printStackTrace();\n        }"],[-1,3899,"\t\t\t\n\t\t}\n\t\t"],[1,3909,"            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        "],[-1,3919,"\t} \n\t\n\t"],[1,3926,"    }\n\n    "],[-1,3930,"\t"],[1,3931,"    "],[-1,3939,"里面的所有的P"],[1,3946,"p"],[1,3951,"中所有的"],[-1,3958,"L"],[1,3959,"l"],[-1,3965,"\t"],[1,3966,"    "],[-1,3981,"P"],[1,3982,"p"],[-1,3991,"L"],[1,3992,"l"],[-1,3998,"\t"],[1,3999,"    "],[-1,4003,"\t"],[1,4004,"    "],[-1,4024,"findAll"],[1,4031,"selectTest"],[-1,4036,"\t\t"],[1,4038,"        "],[-1,4060,"\t\tConnection conn = null;\n\t\t"],[1,4088,"        "],[-1,4106,"s"],[1,4107,"preparedS"],[-1,4124,"\t\t"],[1,4126,"        "],[-1,4171,"\t\t\n\t\ttry {\n\t\t\t"],[1,4185,"\n        // 1.建立连接\n        Connection "],[1,4189,"ection"],[-1,4193,"DBC"],[1,4196,"dbc"],[-1,4218,"\t\t\t"],[1,4221,"\n        // 2.准备SQL语句\n        "],[-1,4258,"\t\t\t\n\t\t\t"],[1,4265,"\n        // 3.使用prepared"],[-1,4274," ="],[1,4276,"执行SQL语句\n        try {\n           "],[1,4281,"ection"],[-1,4305,"\t\t\t\n\t\t\t"],[1,4312,"\n            // 4.接收结果集\n            "],[-1,4318,"s"],[1,4319,"preparedS"],[-1,4344,"\t\t\t\n\t\t\t"],[1,4351,"\n            // 5.获取查找结果\n            "],[-1,4369," "],[-1,4372,"\t\t\t\t"],[1,4376,"                "],[1,4384,"erson"],[-1,4401,"\t\t\t\tp"],[1,4406,"                person"],[-1,4432,"\t\t\t\tp"],[1,4437,"                person"],[-1,4470,"\t\t\t\tp"],[1,4475,"                person"],[-1,4479,"A"],[1,4480,"Name(set."],[1,4482,"tString(\"gender\"));\n                person.setScore"],[-1,4495,"a"],[1,4496,"score\"));\n                person.setHome(set."],[1,4498,"tString(\"home"],[-1,4503,"\t\t\t\t\n\t\t\t\t"],[1,4512,"                person.setHobby(set.getString(\"hobby\"));\n\n                "],[1,4522,"erson"],[-1,4525,"\t\t\t}\n\t\t\t\n\t\t\t"],[1,4537,"            }\n            "],[-1,4550,"\t\t\t\n\t\t"],[1,4556,"        "],[1,4565,"SQL"],[-1,4580,"\t\t\t// TODO: handle exception\n\t\t} "],[1,4613,"            e.printStackTrace();\n        }"],[-1,4623,"\t\t\tJDBC"],[1,4630,"            Jdbc"],[1,4640,"ConnectionWithResult"],[1,4644,"nectio"],[-1,4647,"s"],[1,4648,"preparedS"],[-1,4664,"\t\t}\n\t\t"],[1,4670,"        }\n        "],[-1,4683,"\t}\n\t\n\t"],[1,4689,"    }\n\n    "],[-1,4693,"\t"],[1,4694,"    "],[-1,4701," "],[1,4702,"，"],[-1,4707,"中的P"],[1,4710,"p"],[1,4715,"中的对应"],[-1,4722,"P"],[1,4723,"p"],[-1,4732,"\t"],[1,4733,"    "],[-1,4750,"PersonID\n\t"],[1,4760,"id\n    "],[-1,4775,"P"],[1,4776,"p"],[-1,4799,"\t"],[1,4800,"    "],[-1,4804,"\t"],[1,4805,"    "],[-1,4819,"find"],[1,4823,"select"],[1,4827,"Test"],[-1,4835," "],[-1,4838,"\t\t"],[1,4840,"        "],[-1,4862,"\t\tConnection conn = null;\n\t\t"],[1,4890,"        "],[-1,4908,"s"],[1,4909,"preparedS"],[-1,4926,"\t\t"],[1,4928,"        Connection connection = null;\n        "],[1,4936,"erson"],[-1,4945,"\t\t\n\t\ttry {\n\t\t\t"],[1,4959,"\n        // 1.连接数据库\n        "],[1,4963,"ection"],[-1,4967,"DBC"],[1,4970,"dbc"],[-1,4992,"\t\t\t"],[1,4995,"\n        // 2.准备SQL语句\n        "],[1,5038," "],[1,5039," "],[-1,5043,"\t\t\t\n\t\t\t"],[1,5050,"\n        // 3.使用Prepared"],[1,5059,"指向SQL语句\n        try {\n            preparedStatement"],[1,5066,"ection"],[-1,5090,"\t\t\t\n\t\t\ts"],[1,5098,"\n            // 4.传入参数：\n            preparedS"],[-1,5116," "],[-1,5122,"\t\t\t\n\t\t\t"],[1,5129,"\n            "],[-1,5135,"s"],[1,5136,"preparedS"],[-1,5161,"\t\t\t\n\t\t\t"],[1,5168,"\n            "],[-1,5183," "],[-1,5186,"\t\t\t\tp = new P"],[1,5199,"                p"],[-1,5204,"();\n\t\t\t\tp"],[-1,5239,"\t\t\t\tp"],[1,5244,"                person"],[-1,5277,"\t\t\t\tp"],[1,5282,"                person"],[-1,5286,"Ag"],[1,5288,"Name(set.getString(\"gender\"));\n                person.setScor"],[-1,5302,"a"],[1,5303,"score\"));\n                person.setHome(set."],[1,5305,"tString(\"home"],[-1,5310,"\t\t\t}\n\t\t\t\n\t\t\t"],[1,5322,"                person.setHobby(set.getString(\"hobby\"));\n            }\n            "],[1,5330,"erson"],[-1,5332,"\t\t"],[1,5334,"        "],[1,5343,"SQL"],[-1,5358,"\t\t\t// TODO: handle exception\n\t\t} "],[1,5391,"            e.printStackTrace();\n        }"],[-1,5401,"\t\t\tJDBC"],[1,5408,"            Jdbc"],[1,5418,"ConnectionWithResult"],[1,5422,"nectio"],[-1,5425,"s"],[1,5426,"preparedS"],[-1,5442,"\t\t}\n\t\t"],[1,5448,"        }\n        "],[-1,5461,"\t}"],[1,5463,"    }\n\n\n"]],[1719,5466],[7436,7436]]],[1564715171356,["GJX@GJXAIOU",[[-1,7467,"==有的功能未完成=="]],[7467,7478],[7467,7467]]],[1564715180532,["GJX@GJXAIOU",[[-1,7452,"viewDemo1"],[1,7461,"Person"]],[7452,7452],[7458,7458]]],[1564715183764,["GJX@GJXAIOU",[[1,7458,"View"]],[7458,7458],[7462,7462]]],[1564715196382,["GJX@GJXAIOU",[[-1,7485,"a_"],[1,7487,"jdbc."],[-1,7495,"s"],[1,7496,"S"],[1,7524,"ArrayList;\nimport java.util.List;\nimport java.util."],[1,7534,"/**\n * @author GJXAIOU\n * @create 2019-08-02-9:39\n */\n"],[1,7547,"Person"],[-1,7551,"Demo1"],[-1,7559,"\t"],[1,7560,"    "],[-1,7601,"\t\t"],[1,7603,"        "],[1,7614,"erson"],[-1,7637,"\n\t\t"],[1,7640,"        "],[1,7650,"anner"],[-1,7678,"\t\t"],[1,7680,"        "],[-1,7695,"\t\t\t"],[1,7698,"            "],[-1,7744,"\t\t\t"],[1,7747,"            "],[-1,7778,"\t\t\t"],[1,7781,"            "],[-1,7812,"\t\t\t"],[1,7815,"            "],[-1,7846,"\t\t\t"],[1,7849,"            "],[-1,7882,"\t\t\t"],[1,7885,"            "],[-1,7918,"\t\t\t"],[1,7921,"            "],[-1,7950,"\t\t\t"],[1,7953,"            "],[-1,7999,"\t\t\t\n\t\t\t"],[1,8006,"\n            "],[1,8021,"anner"],[-1,8033,"\t\t\t"],[1,8036,"            "],[-1,8054,"\t\t\t\t"],[1,8058,"                "],[-1,8066,"\t\t\t\t\t"],[1,8071,"                    "],[-1,8100,"\t\t\t\t\t"],[1,8105,"                    "],[1,8121,"anner"],[-1,8130,"\t\t\t\t\t"],[1,8135,"                    System.out.println(\"请输入性别\");\n                    String gender = scanner.next();\n                    "],[-1,8158,"年龄"],[1,8160,"分数"],[-1,8164,"\t\t\t\t\t"],[1,8169,"                    "],[1,8173,"score = sc"],[1,8174,"nner.nextInt();\n                    System.out.println(\"请输入家乡：江苏、上海、杭州\");\n                    Strin"],[1,8175," hom"],[1,8181,"anner"],[-1,8186,"In"],[1,8188,"();\n                    System.out.println(\"请输入爱好（多选）：游泳、打球、跑步\");\n                    String hobby = scanner.nex"],[-1,8193,"\t\t\t\t\t\n\t\t\t\t\t"],[1,8204,"\n                    "],[1,8212,"erson"],[-1,8229,"\t\t\t\t\tp"],[1,8235,"                    person"],[-1,8251,"\t\t\t\t\tp"],[1,8257,"                    person"],[-1,8261,"Age(age);\n\t\t\t\t\t\n\t\t\t\t\tp"],[1,8283,"Gender(gender);\n                    person.setScore(score);\n                    person.setHome(home);\n                    person.setHobby(hobby);\n\n                    person"],[1,8290,"Test"],[1,8292,"erson"],[-1,8295,"\t\t\t\t\t"],[1,8300,"                    "],[-1,8307,"\t\t\t\t"],[1,8311,"                "],[-1,8319,"\t\t\t\t\tp"],[1,8325,"                    System.out.println(\"请输入要删除的ID号\");\n                    int idDelete = scanner.nextInt();\n                    person"],[-1,8335,"ById(5);\n\t\t\t\t\t"],[1,8349,"Test(idDelete);\n                    "],[-1,8356,"\t\t\t\t"],[1,8360,"                "],[-1,8368,"\t\t\t\t\t\n\t\t\t\t\t"],[1,8379,"                    Person person1 = new Person();\n                    System.out.println(\"请输入要修改人员的ID号：\");\n                    int idUpdate = scanner.nextInt();\n                    person1.setId(idUpdate);\n                    System.out.println(\"请输入修改后的姓名：\");\n                    String nameUpdate = scanner.next();\n                    person1.setName(nameUpdate);\n                    System.out.println(\"请输入修改后的性别：\");\n                    String genderUpdate = scanner.next();\n                    person1.setGender(genderUpdate);\n                    personDao.updateTest(person1);\n                    "],[-1,8386,"\t\t\t\t"],[1,8390,"                "],[-1,8398,"\t\t\t\t\t\n\t\t\t\t\t"],[1,8409,"                    System.out.println(\"person数据表中所有数据为：\");\n\n                    for (Object o : personDao.selectTest().toArray()) {\n                        System.out.println(o);\n                    }\n                    "],[-1,8416,"\t\t\t\t"],[1,8420,"                "],[-1,8428,"\t\t\t\t\t\n\t\t\t\t\t"],[1,8439,"                    System.out.println(\"请输入要查询人员的ID号：\");\n                    int idSelect = scanner.nextInt();\n                    Person person2 = personDao.selectByIdTest(idSelect);\n                    int idSelectById = person2.getId();\n                    System.out.println(idSelectById);\n\n                    "],[-1,8446,"\t\t\t\t"],[1,8450,"                "],[-1,8458,"\t\t\t\t\t"],[1,8463,"                    "],[-1,8491,"\t\t\t\t\t"],[1,8496,"                    "],[-1,8512,"\t\t\t\t\t"],[1,8517,"                    "],[-1,8524,"\t\n\t\t\t\t"],[1,8530,"\n                "],[-1,8539,"\t\t\t\t\t"],[1,8544,"                    "],[-1,8551,"\t\t\t}\n\t\t}\n\t"],[1,8561,"            }\n        }\n\n    "]],[7477,8565],[10838,10838]]],[1564715255082,["GJX@GJXAIOU",[[-1,11130,"\t/**\n\t * 未使用批处理时间是6382ms\n\t */\n\tpublic static void testInsert() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?,?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//不使用批处理进行插入操作\n\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\tString name = \"Jack\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\tstatement.executeUpdate();\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n\t\n\t\n\t\n"]],[11130,11872],[11128,11128]]],[1564715259281,["GJX@GJXAIOU",[[-1,11076,"\t\t//testInsert(); //调用没有经过批处理"]],[11076,11105],[11076,11076]]],[1564715259770,["GJX@GJXAIOU",[[-1,11076,"\n"]],[11076,11076],[11075,11075]]]],null,"GJX@GJXAIOU"],["8befbbec-553f-4983-9ede-36bb82a6c177",1564728753832,"# JavaEEDay35数据库\n\n## preparedstatement 接口使用\n提供一个 POJO 文件：Person.java\n然后在 PersonDao.java 中实现增删改查方法\n**与 Day34 代码不同点：** 通过在方法中传入 Person 对象，实现 参数中方式的是 get 方法得到\n- 首先对应数据库建立一个实体类：Person.java\n\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\n```java\npackage jdbc.preparedStatement;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-01-20:09\n */\npublic class Person {\n    private Integer id;\n    private String name;\n    private String gender;\n    private Integer score;\n    private String home;\n    private String hobby;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public String getHome() {\n        return home;\n    }\n\n    public void setHome(String home) {\n        this.home = home;\n    }\n\n    public String getHobby() {\n        return hobby;\n    }\n\n    public void setHobby(String hobby) {\n        this.hobby = hobby;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", gender='\" + gender + '\\'' +\n                \", score=\" + score +\n                \", home='\" + home + '\\'' +\n                \", hobby='\" + hobby + '\\'' +\n                '}';\n    }\n}\n\n```\n\n- 然后完成对应的具体实现类 PersonDao.java\n```java\npackage jdbc.preparedStatement;\n\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**通过使用PreparedStatement实现增删改查\n * @author GJXAIOU\n * @create 2019-08-01-21:23\n */\npublic class PersonDao {\n    /**\n     * 输入一个Person类对象，保存数据到数据库中\n     * @param person\n     * @return int类型，返回值大于0表示添加成功，等于0表示添加数据失败\n     */\n    public int addTest(Person person) {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句\n        String sql = \"insert into person(name, gender, score, home, hobby) values(?, ?, ?, ?, ?)\";\n\n        PreparedStatement preparedStatement = null;\n        try {\n            // 3.使用preparedStatement处理SQL语句\n            preparedStatement = connection.prepareStatement(sql);\n\n            //插入数据\n            preparedStatement.setString(1,person.getName());\n            preparedStatement.setString(2,person.getGender());\n            preparedStatement.setInt(3, person.getScore());\n            preparedStatement.setString(4,person.getHome());\n            preparedStatement.setString(5, person.getHobby());\n\n            //指向SQL语句，返回的int 类型为影响的行数\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n\n    }\n\n    /**\n     * 根据id删除数据库中数据\n     * @param id\n     * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n     */\n    public int deleteTest(int id){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句\n        String sql = \"delete from person where id = ?\";\n\n        // 3.使用preparedStatement处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 4.输入参数\n            preparedStatement.setInt(1, id);\n\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n    }\n\n    /**\n     * 修改Person表中数据信息\n     * @param person 传入的person类对象\n     * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n     */\n    public int updateTest(Person person){\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理的SQL语句\n        String sql = \"update person set name = ? , gender = ? where id = ?\";\n\n        // 3.使用preparedstatement处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n            // 4.输入参数\n            preparedStatement.setString(1, person.getName());\n            preparedStatement.setString(2, person.getGender());\n            preparedStatement.setInt(3, person.getId());\n\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n    }\n\n    /**\n     * 查询数据库person中所有的信息，返回一个list集合\n     * @return 返回保存person类对象的list集合\n     */\n    public List<Person> selectTest() {\n        ResultSet set = null;\n        PreparedStatement preparedStatement = null;\n        List<Person> list = new ArrayList<Person>();\n\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"select * from person\";\n\n        // 3.使用preparedstatement执行SQL语句\n        try {\n            connection.prepareStatement(sql);\n\n            // 4.接收结果集\n            set = preparedStatement.executeQuery();\n\n            // 5.获取查找结果\n            while (set.next()){\n                Person person = new Person();\n                person.setId(set.getInt(\"id\"));\n                person.setName(set.getString(\"name\"));\n                person.setName(set.getString(\"gender\"));\n                person.setScore(set.getInt(\"score\"));\n                person.setHome(set.getString(\"home\"));\n                person.setHobby(set.getString(\"hobby\"));\n\n                list.add(person);\n            }\n            return list;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n        return null;\n    }\n\n    /**\n     * 根据ID，查询数据库person中的对应信息，返回一个person类对象\n     * @param id 要查询的id\n     * @return 返回一个person类对象，如果没有找到，返回null\n     */\n    public Person selectByIdTest(int id){\n        ResultSet set = null;\n        PreparedStatement preparedStatement = null;\n        Connection connection = null;\n        Person person = null;\n\n        // 1.连接数据库\n        connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"select * from person where id = ?\";\n\n        // 3.使用Preparedstatement指向SQL语句\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 4.传入参数：\n            preparedStatement.setInt(1,id);\n\n            set = preparedStatement.executeQuery();\n\n            if (set.next()){\n                person.setId(set.getInt(\"id\"));\n                person.setName(set.getString(\"name\"));\n                person.setName(set.getString(\"gender\"));\n                person.setScore(set.getInt(\"score\"));\n                person.setHome(set.getString(\"home\"));\n                person.setHobby(set.getString(\"hobby\"));\n            }\n            return person;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n        return null;\n    }\n\n\n\n}\n\n```\n\n- 最后实现界面的 PersonView.java \n```java\npackage jdbc.preparedStatement;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-9:39\n */\npublic class PersonView {\n    public static void main(String[] args) {\n        PersonDao personDao = new PersonDao();\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n            System.out.println(\"1. 添加数据\");\n            System.out.println(\"2. 删除数据\");\n            System.out.println(\"3. 更新数据\");\n            System.out.println(\"4. 查询所有数据\");\n            System.out.println(\"5. 查看指定数据\");\n            System.out.println(\"6. 退出\");\n            System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\n            int choose = scanner.nextInt();\n            switch (choose) {\n                case 1:\n                    System.out.println(\"请输入姓名\");\n                    String name = scanner.next();\n                    System.out.println(\"请输入性别\");\n                    String gender = scanner.next();\n                    System.out.println(\"请输入分数\");\n                    int score = scanner.nextInt();\n                    System.out.println(\"请输入家乡：江苏、上海、杭州\");\n                    String home = scanner.next();\n                    System.out.println(\"请输入爱好（多选）：游泳、打球、跑步\");\n                    String hobby = scanner.next();\n\n                    Person person = new Person();\n                    person.setName(name);\n                    person.setGender(gender);\n                    person.setScore(score);\n                    person.setHome(home);\n                    person.setHobby(hobby);\n\n                    personDao.addTest(person);\n                    break;\n                case 2:\n                    System.out.println(\"请输入要删除的ID号\");\n                    int idDelete = scanner.nextInt();\n                    personDao.deleteTest(idDelete);\n                    break;\n                case 3:\n                    Person person1 = new Person();\n                    System.out.println(\"请输入要修改人员的ID号：\");\n                    int idUpdate = scanner.nextInt();\n                    person1.setId(idUpdate);\n                    System.out.println(\"请输入修改后的姓名：\");\n                    String nameUpdate = scanner.next();\n                    person1.setName(nameUpdate);\n                    System.out.println(\"请输入修改后的性别：\");\n                    String genderUpdate = scanner.next();\n                    person1.setGender(genderUpdate);\n                    personDao.updateTest(person1);\n                    break;\n                case 4:\n                    System.out.println(\"person数据表中所有数据为：\");\n\n                    for (Object o : personDao.selectTest().toArray()) {\n                        System.out.println(o);\n                    }\n                    break;\n                case 5:\n                    System.out.println(\"请输入要查询人员的ID号：\");\n                    int idSelect = scanner.nextInt();\n                    Person person2 = personDao.selectByIdTest(idSelect);\n                    int idSelectById = person2.getId();\n                    System.out.println(idSelectById);\n\n                    break;\n                case 6:\n                    System.out.println(\"退出程序\");\n                    System.exit(0);\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n    }\n}\n\n```\n\n## 批处理操作\n\n一般针对于批量插入操作；\n```java\npackage b_batch;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.PreparedStatement;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\tpublic static void main(String[] args) {\n\t\tbatch(); //调用批处理\n\t}\n\t\n\t/**\n\t * 使用PreparedStatement批处理操作\n\t * 主要用来处理一些有规律的SQL语句，这样做可以降低数据库的处理压力\n\t */\n\tpublic static void batch() {\n\t\tConnection conn = null;\n\t\tPreparedStatement statement = null;\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\tString sql = \"insert into person(name, age) values(?, ?)\";\n\t\t\t\n\t\t\tstatement = conn.prepareStatement(sql);\n\t\t\tint flag = 0;\n\t\t\tfor (int i = 0; i < 9950; i++) {\n\t\t\t\tString name = \"John\" + i;\n\t\t\t\tint age = 18;\n\t\t\t\t\n\t\t\t\tstatement.setString(1, name);\n\t\t\t\tstatement.setInt(2, age);\n\t\t\t\t\n\t\t\t\t//添加批处理\n\t\t\t\tstatement.addBatch();\n\t\t\t\tflag++;\n\t\t\t\t//每1000条SQL语句批处理一次\n\t\t\t\tif (flag % 1000 == 0) {\n\t\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\t\tstatement.executeBatch();\n\t\t\t\t\t//执行保存在批处理里面的SQL语句之后，清空批处理缓冲区\n\t\t\t\t\tstatement.clearBatch();\n\t\t\t\t\tflag = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//注意，批处理中剩余的SQL语句\n\t\t\tif (flag > 0) {\n\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\tstatement.executeBatch();\n\t\t\t\t//执行保存在批处理里面的SQL语句之后，情况批处理缓冲区\n\t\t\t\tstatement.clearBatch();\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, statement);\n\t\t}\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"time:\" + (end - start));\n\t}\n}\n\n```\n\n\n## 保存文本数据到数据库\n内容使用 blob 格式\n```java\npackage c_blob;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws Exception {\n\t\t//writeTest();\n\t\treadTest();\n\t}\n\t\n\t/**\n\t * 把文件数据，保存到数据库\n\t * @throws Exception \n\t */\n\tpublic static void writeTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into testblob(value) values(?)\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\t//使用缓冲字节流读取数据\n\t\tBufferedInputStream bs = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(new File(\"./res/《The Story of the Stone》.txt\")));\n\t\t\n\t\t//设置字节流\n\t\tstatement.setBinaryStream(1, bs);\n\t\t//statement.setCharacterStream(int parameterIndex, Reader reader);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\tJDBCUtil.close(conn, statement);\n\t\tbs.close();\n\t}\n\t\n\t\n\t//将刚才放入数据库是的数据拿出\n\tpublic static void readTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select value from testblob where id = 1\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tBufferedInputStream bs = null;\n\t\tBufferedOutputStream bos = null;\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {  \n\t\t\t//采用字符流进行读取\n\t\t\tInputStream in = set.getBinaryStream(1);\n\t\t\tbs = new BufferedInputStream(in);\n\t\t\tbos = new BufferedOutputStream(\n\t\t\t\t\tnew FileOutputStream(new File(\"C:\\\\javaEE1707\\\\Day36\\\\res\\\\1.txt\")));\n\t\t\t\n\t\t\tint length = 0;\n\t\t\tbyte[] buf = new byte[8 * 1024];\n\t\t\twhile ((length = bs.read(buf)) != -1) {\n\t\t\t\tbos.write(buf, 0, length);\n\t\t\t}\n\t\t}\n\t\tJDBCUtil.close(conn, statement, set);\n\t\tbos.close();\n\t\tbs.close();\n\t}\n}\n\n\n```\n\n## 获取自增长值\n```java\npackage d_getincrement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws SQLException {\n\t\t//getCount();\n\t\tgetAutoIncrementValue();\n\t}\n\t\n\tpublic static void getAutoIncrementValue() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into person(name, age) values('吴京', 40)\";\n\t\t\n\t\t/*\n\t\t * 想要在插入数据的同时获取到当前插入数据的ID号\n\t\t * 实际意义：秒杀活动第几名，第几个注册用户\n\t\t */\n\t\t//获取PreparedStatement添加一个参数 Statement.RETURN_GENERATED_KEYS\n\t\tPreparedStatement statement = conn.prepareStatement(sql,\n\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\t//从已经设置过参数的PreparedStatement里面获取到自增长值结果集ResultSet类型\n\t\tResultSet generatedKeys = statement.getGeneratedKeys();\n\t\t\n\t\tif (generatedKeys.next()) {\n\t\t\tint id = generatedKeys.getInt(1);\n\t\t\tSystem.out.println(\"id = \" + id);\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, generatedKeys);\n\t}\n\t\n\t//计算数据库中数量\n\tpublic static void getCount() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select count(*) c from person\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {\n\t\t\t//System.out.println(set.getInt(\"count(*)\"));\n\t\t\tSystem.out.println(set.getInt(\"c\"));\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, set);\n\t}\n}\n\n```\n\n## 事务处理\n- 方式一：关闭自动提交\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\taccount();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- 方式二：设置还原点\n**注意 commit 位置**，如果还原点之后代码没有问题，就应该将还原点之前操作和之后的操作都提交；如果有问题，应该将还原点之前的代码进行提交。\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tuseSavepoint();\n\t}\n\n\n\tpublic static void useSavepoint() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\t\t//还原点！！！\n\t\tSavepoint savepoint = null;\n\n\t\ttry {\n\t\t\t//下面这里没有还原点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t\tstatement1.close();\n\t\t\tstatement2.close();\n\n\t\t\t\n\t\t\t//下面有还原点\n\t\t\t//设置还原点\n\t\t\tsavepoint = conn.setSavepoint();\n\n\t\t\tsql1 = \"update bank set name = '马云' where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tsql2 = \"update bank set name = '匿名君' where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\n\t\t\ttry {\n\t\t\t\t//回滚到还原点，相当于取消设置还原点之后的代码执行\n\t\t\t\tconn.rollback(savepoint);\n\t\t\t} catch (SQLException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\n\t\t\ttry {\n\t\t\t\tconn.commit();\n\t\t\t\t\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",[[1564728725470,["GJX@GJXAIOU",[[1,155,";"]],[155,155],[156,156]]],[1564728725838,["GJX@GJXAIOU",[[1,157,"\n"]],[156,156],[157,157]]],[1564728730111,["GJX@GJXAIOU",[[1,157,"zuihou"]],[157,157],[163,163]]],[1564728731308,["GJX@GJXAIOU",[[-1,157,"zuihou"]],[163,163],[157,157]]],[1564728736713,["GJX@GJXAIOU",[[1,157,"最后来使用Person"]],[157,157],[168,168]]],[1564728736760,["GJX@GJXAIOU",[[1,162," "]],[168,168],[169,169]]],[1564728739685,["GJX@GJXAIOU",[[1,169,"View。"]],[169,169],[174,174]]],[1564728740188,["GJX@GJXAIOU",[[-1,173,"。"]],[174,174],[173,173]]],[1564728743668,["GJX@GJXAIOU",[[1,173,".java shixian"]],[173,173],[186,186]]],[1564728752660,["GJX@GJXAIOU",[[-1,179,"shixian"]],[186,186],[179,179]]],[1564728766840,["GJX@GJXAIOU",[[1,179,"实现页面；"]],[179,179],[184,184]]],[1564728792923,["GJX@GJXAIOU",[[-1,329,"\n\n"],[1,331,"   "],[-1,385,"\n"],[1,386," "],[-1,432,"   "],[-1,458,"   "],[-1,485,"   "],[-1,512,"   "],[-1,537,"   "],[-1,561,"\n\n "],[-1,613,"  "],[1,615,""],[-1,678,"  "],[1,680,""],[-1,736,"  "],[1,738,""],[-1,808,"  "],[1,810,""],[-1,870,"  "],[1,872,""],[-1,950,"  "],[1,952,""],[-1,1011,"  "],[1,1013,""],[-1,1088,"  "],[1,1090,""],[-1,1146,"  "],[1,1148,""],[-1,1218,"  "],[1,1220,""],[-1,1278,"  "],[1,1280,""],[-1,1354,"  "],[1,1356,""],[-1,1375,"  "],[-1,1455,"id "],[1,1458,"this.getId()"],[-1,1489,"n"],[1,1490,"this.getN"],[1,1493,"()"],[1,1534,"this."],[1,1535,"etG"],[1,1540,"()"],[1,1579,"thi"],[1,1580,".getS"],[1,1584,"()"],[1,1616,"t"],[1,1617,"is.getH"],[1,1620,"()"],[1,1660,"t"],[1,1661,"is.getH"],[1,1665,"()"],[-1,1698,"  }\n"],[1,1704,"}"]],[298,1704],[1717,1717]]],[1564728799792,["GJX@GJXAIOU",[[1,329,"\n\n"],[-1,329,"   "],[1,386,"\n"],[-1,386," "],[1,433,"   "],[1,456,"   "],[1,480,"   "],[1,504,"   "],[1,526,"   "],[1,547,"\n\n "],[1,596,"  "],[-1,596,""],[1,659,"  "],[-1,659,""],[1,715,"  "],[-1,715,""],[1,785,"  "],[-1,785,""],[1,845,"  "],[-1,845,""],[1,923,"  "],[-1,923,""],[1,982,"  "],[-1,982,""],[1,1057,"  "],[-1,1057,""],[1,1113,"  "],[-1,1113,""],[1,1183,"  "],[-1,1183,""],[1,1241,"  "],[-1,1241,""],[1,1315,"  "],[-1,1315,""],[1,1334,"  "],[1,1412,"id "],[-1,1412,"this.getId()"],[1,1455,"n"],[-1,1455,"this.getN"],[-1,1467,"()"],[-1,1510,"this."],[-1,1516,"etG"],[-1,1524,"()"],[-1,1565,"thi"],[-1,1569,".getS"],[-1,1578,"()"],[-1,1612,"t"],[-1,1614,"is.getH"],[-1,1624,"()"],[-1,1666,"t"],[-1,1668,"is.getH"],[-1,1679,"()"],[1,1714,"  }\n"],[-1,1716,"}"]],[1717,1717],[298,1704]]],[1564728802061,["GJX@GJXAIOU",[[-1,1455,"id "],[1,1458,"this.getId()"],[-1,1489,"n"],[1,1490,"this.getN"],[1,1493,"()"],[1,1534,"this."],[1,1536,"tGe"],[1,1540,"()"],[1,1579,"thi"],[1,1580,".getS"],[1,1584,"()"],[1,1616,"t"],[1,1617,"is.getH"],[1,1620,"()"],[1,1660,"t"],[1,1661,"is.getH"],[1,1665,"()"]],[298,1704],[1763,1763]]],[1564728822169,["GJX@GJXAIOU",[[1,1848,"org.junit.jupiter.api.Test;\n\nimport "],[1,5384,"preparedStatement = "],[-1,5418,""],[-1,5726,"Name"],[1,5730,"Gender"],[1,6333,"\n"],[-1,6520,"ull"],[1,6523,"ew Person()"],[1,6525,"\n"],[-1,7073,"Name"],[1,7077,"Gender"],[1,7513,""],[-1,7518,"\n\n"]],[1807,7524],[7592,7592]]],[1564728837231,["GJX@GJXAIOU",[[-1,10258,"\n"],[-1,10284,"Object o"],[1,10292,"Person person2"],[-1,10317,".toArray()"],[1,10374,"pers"],[1,10375,"n2.toString()"],[-1,10582,"Person person2 = "],[1,10599,"System.out.println("],[-1,10633,";\n                    int idSelectById = person2.getId();\n                    System.out.println(idSelectById"],[1,10742,".toString()"]],[7633,10994],[10910,10910]]],[1564728858548,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1564728862993,["GJX@GJXAIOU",[[1,17,"@toc"]],[17,17],[21,21]]],[1564729968107,["GJX@GJXAIOU",[[-1,11063,"\n"]],[11063,11063],[11062,11062]]],[1564729970541,["GJX@GJXAIOU",[[-1,11108,"\t"]],[11109,11109],[11108,11108]]],[1564729970935,["GJX@GJXAIOU",[[-1,11108,"\n"]],[11108,11108],[11107,11107]]],[1564732494909,["GJX@GJXAIOU",[[-1,10960,"b_"],[1,10962,"jdbc."],[1,10967,"ing"],[-1,10978,"ava.sql.Connection;"],[1,10997,"dbc.preparedStatement.JdbcUtil;\n"],[-1,11014,"SQLExcep"],[1,11022,"Connec"],[1,11070,"java.sql.SQLException;\n\n/**\n * @a"],[-1,11072,"ils.JDBCUtil;\n"],[1,11086,"hor GJXAIOU\n * @create 2019-08-02-15:15\n */"],[-1,11100,"Demo1 {\n\t"],[1,11109,"BatchPratice {\n    "],[-1,11150,"\t\t"],[1,11152,"        "],[-1,11160," //调用批处理\n\t"],[1,11170,"\n    "],[-1,11172,"\t"],[-1,11174,"\t/**\n\t"],[-1,11181,"*"],[-1,11183,"使用PreparedStatement批处理操作\n\t"],[-1,11210,"*"],[-1,11212,"主要用来处理一些有规律的SQL语句，这样做可以降低数据库的处理压力\n\t */\n\t"],[1,11265," "],[-1,11281,"\t\t"],[1,11283,"        // 1.建立连接\n        "],[-1,11298," = null;\n\t\tPr"],[-1,11312,"paredStatement statement = null;\n\t\tlong start = System."],[-1,11368,"urren"],[-1,11374,"T"],[-1,11376,"meMillis();\n\t\t\n\t\ttry {\n\t\t\tc"],[-1,11405,"n"],[-1,11410,"DBC"],[1,11413,"dbc"],[-1,11435,"\t\t\t"],[1,11438,"\n        // 2.准备是SQL语句\n        "],[-1,11477,"a"],[1,11480,"nder, score, home, hobby"],[-1,11487,"s"],[1,11493,", ?, ?, ?"],[-1,11497,"\t\t\t\n\t\t\t"],[1,11504,"\n        // 3.使用prepared"],[1,11513,"运输SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n             preparedStatement"],[1,11519,"nectio"],[-1,11544,"\t\t\t"],[1,11547,"\n             "],[-1,11561,"\t\t\t"],[1,11564,"             "],[-1,11584,"995"],[1,11587,"1"],[-1,11597,"\t\t\t\t"],[1,11601,"                "],[-1,11616,"John"],[1,11620,"张三"],[1,11625," + \"号\""],[-1,11627,"\t\t\t\tint a"],[1,11636,"                String "],[1,11638,"nder"],[-1,11641,"18;\n\t\t\t\t\n\t\t\t\ts"],[1,11655,"\"男\";\n                int score =  87 + i;\n                String home = \"江苏\";\n                String hobby = \"游泳\";\n\n                 preparedS"],[-1,11684,"\t\t\t\ts"],[1,11689,"                 preparedStatement.setString(2, gender);\n                 preparedS"],[-1,11705,"2"],[1,11706,"3"],[1,11708,"score);\n                 prep"],[1,11709,"redStatement.setStrin"],[1,11710,"(4, hom"],[-1,11714,"\t\t\t\t\n\t\t\t\t"],[1,11723,"                 preparedStatement.setString(5, hobby);\n\n                 "],[1,11725," 4."],[-1,11731,"\t\t\t\ts"],[1,11736,"                 preparedS"],[-1,11757,"\t\t\t\t"],[1,11761,"                 "],[-1,11769,"\t\t\t\t//每1000条SQL语句"],[1,11786,"                 // 设置每5条"],[-1,11792,"\t\t\t\t"],[1,11796,"                 "],[-1,11807,"1000"],[1,11811,"5"],[-1,11817," "],[-1,11820,"\t\t\t\t\t"],[1,11825,"                     "],[1,11827," "],[-1,11844,"\t\t\t\t\ts"],[1,11850,"                     preparedS"],[-1,11875,"\t\t\t\t\t"],[1,11880,"                     "],[1,11882," "],[1,11906,"的"],[-1,11910,"\t\t\t\t\ts"],[1,11916,"                     preparedS"],[-1,11939,"\t\t\t\t\t"],[1,11944,"                     "],[-1,11954,"\t\t\t\t}\n\t\t\t}\n\t\t\t//注意，"],[1,11973,"                 }\n             }\n\n             // 处理"],[-1,11985,"\n\t\t\t"],[1,11989,"，即剩余不够5个的倍数\n            "],[-1,12002," "],[-1,12005,"\t\t\t\t//执行保存到批处理里面的SQL语句\n\t\t\t\ts"],[1,12033,"                preparedS"],[-1,12058,"\t\t\t\t//执行保存在批处理里面的SQL语句之后，情况批处理缓冲区\n\t\t\t\ts"],[1,12097,"                preparedS"],[-1,12120,"\t\t\t}\n\t\t\t\n\t\t"],[1,12131,"            }\n        "],[-1,12158,"\t\t\t"],[1,12161,"            "],[-1,12182,"\t\t\tthrow new RuntimeException(e);\n\t\t} "],[1,12220,"        }"],[-1,12230,"\t\t\tJDBC"],[1,12237,"            Jdbc"],[1,12247,"Connection"],[-1,12252,", statement);\n\t\t}\n\t\tlong end = Sys"],[1,12286,"ection, preparedSta"],[-1,12289,".curr"],[-1,12297,"TimeMillis("],[-1,12311,"\t\tSystem.out.println(\"time:\" + (end - start));\n\t"],[1,12359,"        }\n    "]],[10952,12363],[13002,13002]]],[1564732519870,["GJX@GJXAIOU",[[1,10943,"BatchPractice.java"]],[10943,10943],[10961,10961]]]],null,"GJX@GJXAIOU"],["c78d272d-bcd1-400a-8c8c-9585cbe45bab",1566632442294,"# JavaEEDay35数据库\n@toc\n\n## preparedstatement 接口使用\n提供一个 POJO 文件：Person.java\n然后在 PersonDao.java 中实现增删改查方法\n**与 Day34 代码不同点：** 通过在方法中传入 Person 对象，实现 参数中方式的是 get 方法得到;\n最后来使用 PersonView.java 实现页面；\n- 首先对应数据库建立一个实体类：Person.java\n\t * 实体类：一般情况会与数据库中表内的数据类型一致\n\t * 建议:成员变量的名字要和数据库里面的字段名一致\n\t * 建议:使用基本数据类型的包装类\n```java\npackage jdbc.preparedStatement;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-01-20:09\n */\npublic class Person {\n    private Integer id;\n    private String name;\n    private String gender;\n    private Integer score;\n    private String home;\n    private String hobby;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public String getHome() {\n        return home;\n    }\n\n    public void setHome(String home) {\n        this.home = home;\n    }\n\n    public String getHobby() {\n        return hobby;\n    }\n\n    public void setHobby(String hobby) {\n        this.hobby = hobby;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"id=\" + this.getId()+\n                \", name='\" + this.getName() + '\\'' +\n                \", gender='\" + this.getGender() + '\\'' +\n                \", score=\" + this.getScore() +\n                \", home='\" + this.getHome() + '\\'' +\n                \", hobby='\" + this.getHobby() + '\\'' +\n                '}';\n    }\n}\n\n```\n\n- 然后完成对应的具体实现类 PersonDao.java\n```java\npackage jdbc.preparedStatement;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**通过使用PreparedStatement实现增删改查\n * @author GJXAIOU\n * @create 2019-08-01-21:23\n */\npublic class PersonDao {\n    /**\n     * 输入一个Person类对象，保存数据到数据库中\n     * @param person\n     * @return int类型，返回值大于0表示添加成功，等于0表示添加数据失败\n     */\n    public int addTest(Person person) {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句\n        String sql = \"insert into person(name, gender, score, home, hobby) values(?, ?, ?, ?, ?)\";\n\n        PreparedStatement preparedStatement = null;\n        try {\n            // 3.使用preparedStatement处理SQL语句\n            preparedStatement = connection.prepareStatement(sql);\n\n            //插入数据\n            preparedStatement.setString(1,person.getName());\n            preparedStatement.setString(2,person.getGender());\n            preparedStatement.setInt(3, person.getScore());\n            preparedStatement.setString(4,person.getHome());\n            preparedStatement.setString(5, person.getHobby());\n\n            //指向SQL语句，返回的int 类型为影响的行数\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n\n    }\n\n    /**\n     * 根据id删除数据库中数据\n     * @param id\n     * @return int类型，返回值大于0表示删除成功，返回0表示删除数据失败\n     */\n    public int deleteTest(int id){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句\n        String sql = \"delete from person where id = ?\";\n\n        // 3.使用preparedStatement处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 4.输入参数\n            preparedStatement.setInt(1, id);\n\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n    }\n\n    /**\n     * 修改Person表中数据信息\n     * @param person 传入的person类对象\n     * @return int类型，返回值大于0表示修改成功，返回0表示修改数据失败\n     */\n    public int updateTest(Person person){\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备预处理的SQL语句\n        String sql = \"update person set name = ? , gender = ? where id = ?\";\n\n        // 3.使用preparedstatement处理SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n            // 4.输入参数\n            preparedStatement.setString(1, person.getName());\n            preparedStatement.setString(2, person.getGender());\n            preparedStatement.setInt(3, person.getId());\n\n            return preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n\n        return 0;\n    }\n\n    /**\n     * 查询数据库person中所有的信息，返回一个list集合\n     * @return 返回保存person类对象的list集合\n     */\n    public List<Person> selectTest() {\n        ResultSet set = null;\n        PreparedStatement preparedStatement = null;\n        List<Person> list = new ArrayList<Person>();\n\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"select * from person\";\n\n        // 3.使用preparedstatement执行SQL语句\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 4.接收结果集\n            set = preparedStatement.executeQuery();\n\n            // 5.获取查找结果\n            while (set.next()){\n                Person person = new Person();\n                person.setId(set.getInt(\"id\"));\n                person.setName(set.getString(\"name\"));\n                person.setGender(set.getString(\"gender\"));\n                person.setScore(set.getInt(\"score\"));\n                person.setHome(set.getString(\"home\"));\n                person.setHobby(set.getString(\"hobby\"));\n\n                list.add(person);\n            }\n            return list;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n        return null;\n    }\n\n    /**\n     * 根据ID，查询数据库person中的对应信息，返回一个person类对象\n     * @param id 要查询的id\n     * @return 返回一个person类对象，如果没有找到，返回null\n     */\n\n    public Person selectByIdTest(int id){\n        ResultSet set = null;\n        PreparedStatement preparedStatement = null;\n        Connection connection = null;\n        Person person = new Person();\n\n\n        // 1.连接数据库\n        connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"select * from person where id = ?\";\n\n        // 3.使用Preparedstatement指向SQL语句\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 4.传入参数：\n            preparedStatement.setInt(1,id);\n\n            set = preparedStatement.executeQuery();\n\n            if (set.next()){\n                person.setId(set.getInt(\"id\"));\n                person.setName(set.getString(\"name\"));\n                person.setGender(set.getString(\"gender\"));\n                person.setScore(set.getInt(\"score\"));\n                person.setHome(set.getString(\"home\"));\n                person.setHobby(set.getString(\"hobby\"));\n            }\n            return person;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n        return null;\n    }\n\n}\n\n```\n\n- 最后实现界面的 PersonView.java \n```java\npackage jdbc.preparedStatement;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-9:39\n */\npublic class PersonView {\n    public static void main(String[] args) {\n        PersonDao personDao = new PersonDao();\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n            System.out.println(\"1. 添加数据\");\n            System.out.println(\"2. 删除数据\");\n            System.out.println(\"3. 更新数据\");\n            System.out.println(\"4. 查询所有数据\");\n            System.out.println(\"5. 查看指定数据\");\n            System.out.println(\"6. 退出\");\n            System.out.println(\"$$$$$$$$$$$$$$$$$$$$$$\");\n\n            int choose = scanner.nextInt();\n            switch (choose) {\n                case 1:\n                    System.out.println(\"请输入姓名\");\n                    String name = scanner.next();\n                    System.out.println(\"请输入性别\");\n                    String gender = scanner.next();\n                    System.out.println(\"请输入分数\");\n                    int score = scanner.nextInt();\n                    System.out.println(\"请输入家乡：江苏、上海、杭州\");\n                    String home = scanner.next();\n                    System.out.println(\"请输入爱好（多选）：游泳、打球、跑步\");\n                    String hobby = scanner.next();\n\n                    Person person = new Person();\n                    person.setName(name);\n                    person.setGender(gender);\n                    person.setScore(score);\n                    person.setHome(home);\n                    person.setHobby(hobby);\n\n                    personDao.addTest(person);\n                    break;\n                case 2:\n                    System.out.println(\"请输入要删除的ID号\");\n                    int idDelete = scanner.nextInt();\n                    personDao.deleteTest(idDelete);\n                    break;\n                case 3:\n                    Person person1 = new Person();\n                    System.out.println(\"请输入要修改人员的ID号：\");\n                    int idUpdate = scanner.nextInt();\n                    person1.setId(idUpdate);\n                    System.out.println(\"请输入修改后的姓名：\");\n                    String nameUpdate = scanner.next();\n                    person1.setName(nameUpdate);\n                    System.out.println(\"请输入修改后的性别：\");\n                    String genderUpdate = scanner.next();\n                    person1.setGender(genderUpdate);\n                    personDao.updateTest(person1);\n                    break;\n                case 4:\n                    System.out.println(\"person数据表中所有数据为：\");\n                    for (Person person2 : personDao.selectTest()) {\n                        System.out.println(person2.toString());\n                    }\n                    break;\n                case 5:\n                    System.out.println(\"请输入要查询人员的ID号：\");\n                    int idSelect = scanner.nextInt();\n                    System.out.println(personDao.selectByIdTest(idSelect).toString());\n\n                    break;\n                case 6:\n                    System.out.println(\"退出程序\");\n                    System.exit(0);\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n    }\n}\n\n```\n\n## 批处理操作\n\n一般针对于批量插入操作；BatchPractice.java\n```java\npackage jdbc.batching;\n\nimport jdbc.preparedStatement.JdbcUtil;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-15:15\n */\npublic class BatchPratice {\n    public static void main(String[] args) {\n        batch();\n    }\n\n    public static  void batch() {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备是SQL语句\n        String sql = \"insert into person(name, gender, score, home, hobby) value(?, ?, ?, ?, ?)\";\n\n        // 3.使用preparedstatement运输SQL语句\n        PreparedStatement preparedStatement = null;\n        try {\n             preparedStatement = connection.prepareStatement(sql);\n\n             int flag = 0;\n             for (int i = 0; i < 10; i++) {\n                String name = \"张三\" + i + \"号\";\n                String gender = \"男\";\n                int score =  87 + i;\n                String home = \"江苏\";\n                String hobby = \"游泳\";\n\n                 preparedStatement.setString(1, name);\n                 preparedStatement.setString(2, gender);\n                 preparedStatement.setInt(3, score);\n                 preparedStatement.setString(4, home);\n                 preparedStatement.setString(5, hobby);\n\n                 // 4.添加批处理\n                 preparedStatement.addBatch();\n                 flag++;\n                 // 设置每5条批处理一次\n                 if (flag % 5 == 0){\n                     // 执行保存到批处理里面的SQL语句\n                     preparedStatement.executeBatch();\n                     // 执行保存在批处理里面的SQL语句之后，清空批处理的缓冲区\n                     preparedStatement.clearBatch();\n                     flag = 0;\n                 }\n             }\n\n             // 处理批处理中剩余的SQL语句，即剩余不够5个的倍数\n            if (flag > 0){\n                preparedStatement.executeBatch();\n                preparedStatement.clearBatch();\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n    }\n}\n\n```\n\n\n## 保存文本数据到数据库\n内容使用 blob 格式\n```java\npackage c_blob;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws Exception {\n\t\t//writeTest();\n\t\treadTest();\n\t}\n\t\n\t/**\n\t * 把文件数据，保存到数据库\n\t * @throws Exception \n\t */\n\tpublic static void writeTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into testblob(value) values(?)\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\t//使用缓冲字节流读取数据\n\t\tBufferedInputStream bs = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(new File(\"./res/《The Story of the Stone》.txt\")));\n\t\t\n\t\t//设置字节流\n\t\tstatement.setBinaryStream(1, bs);\n\t\t//statement.setCharacterStream(int parameterIndex, Reader reader);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\tJDBCUtil.close(conn, statement);\n\t\tbs.close();\n\t}\n\t\n\t\n\t//将刚才放入数据库是的数据拿出\n\tpublic static void readTest() throws Exception {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select value from testblob where id = 1\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tBufferedInputStream bs = null;\n\t\tBufferedOutputStream bos = null;\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {  \n\t\t\t//采用字符流进行读取\n\t\t\tInputStream in = set.getBinaryStream(1);\n\t\t\tbs = new BufferedInputStream(in);\n\t\t\tbos = new BufferedOutputStream(\n\t\t\t\t\tnew FileOutputStream(new File(\"C:\\\\javaEE1707\\\\Day36\\\\res\\\\1.txt\")));\n\t\t\t\n\t\t\tint length = 0;\n\t\t\tbyte[] buf = new byte[8 * 1024];\n\t\t\twhile ((length = bs.read(buf)) != -1) {\n\t\t\t\tbos.write(buf, 0, length);\n\t\t\t}\n\t\t}\n\t\tJDBCUtil.close(conn, statement, set);\n\t\tbos.close();\n\t\tbs.close();\n\t}\n}\n\n\n```\n\n## 获取自增长值\n```java\npackage d_getincrement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport utils.JDBCUtil;\n\npublic class Demo {\n\tpublic static void main(String[] args) throws SQLException {\n\t\t//getCount();\n\t\tgetAutoIncrementValue();\n\t}\n\t\n\tpublic static void getAutoIncrementValue() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"insert into person(name, age) values('吴京', 40)\";\n\t\t\n\t\t/*\n\t\t * 想要在插入数据的同时获取到当前插入数据的ID号\n\t\t * 实际意义：秒杀活动第几名，第几个注册用户\n\t\t */\n\t\t//获取PreparedStatement添加一个参数 Statement.RETURN_GENERATED_KEYS\n\t\tPreparedStatement statement = conn.prepareStatement(sql,\n\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\n\t\tstatement.executeUpdate();\n\t\t\n\t\t//从已经设置过参数的PreparedStatement里面获取到自增长值结果集ResultSet类型\n\t\tResultSet generatedKeys = statement.getGeneratedKeys();\n\t\t\n\t\tif (generatedKeys.next()) {\n\t\t\tint id = generatedKeys.getInt(1);\n\t\t\tSystem.out.println(\"id = \" + id);\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, generatedKeys);\n\t}\n\t\n\t//计算数据库中数量\n\tpublic static void getCount() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tString sql = \"select count(*) c from person\";\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\tif (set.next()) {\n\t\t\t//System.out.println(set.getInt(\"count(*)\"));\n\t\t\tSystem.out.println(set.getInt(\"c\"));\n\t\t}\n\t\t\n\t\tJDBCUtil.close(conn, statement, set);\n\t}\n}\n\n```\n\n## 事务处理\n- 方式一：关闭自动提交\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\taccount();\n\t}\n\n\t/**\n\t * 最基本在Java中使用数据库的回滚机制\n\t */\n\tpublic static void account() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\n\t\ttry {\n\t\t\t//关闭自动提交，这就是开启事务，设置回滚点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\n\t\t\t//如果这里没有确定提交SQL语句，也就是没有commit，数据库里面的数据不会发生改变\n\t\t\tconn.commit();\n\t\t} catch (SQLException e) {\n\t\t\t//如果在执行某一个SQL语句时发生了异常，那么一般情况下，这里事务之后的SQL语句，全部要回滚到事件之前\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\t//回滚到事务之前\n\t\t\t\tconn.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\t//关闭数据库连接要放到最后面，确定在数据库操作中产生的资源全部释放掉之后，再断开数据库连接\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n- 方式二：设置还原点\n**注意 commit 位置**，如果还原点之后代码没有问题，就应该将还原点之前操作和之后的操作都提交；如果有问题，应该将还原点之前的代码进行提交。\n\n```java\npackage e_transaction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Savepoint;\n\n//Savepoint\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tuseSavepoint();\n\t}\n\n\n\tpublic static void useSavepoint() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement1 = null;\n\t\tPreparedStatement statement2 = null;\n\t\t//还原点！！！\n\t\tSavepoint savepoint = null;\n\n\t\ttry {\n\t\t\t//下面这里没有还原点\n\t\t\tconn.setAutoCommit(false);\n\t\t\tString sql1 = \"update bank set money = money - 1000000000 where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tString sql2 = \"update bank set money = money + 1000000000 where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t\tstatement1.close();\n\t\t\tstatement2.close();\n\n\t\t\t\n\t\t\t//下面有还原点\n\t\t\t//设置还原点\n\t\t\tsavepoint = conn.setSavepoint();\n\n\t\t\tsql1 = \"update bank set name = '马云' where userID=1\";\n\t\t\tstatement1 = conn.prepareStatement(sql1);\n\n\t\t\tsql2 = \"update bank set name = '匿名君' where userID=2\";\n\t\t\tstatement2 = conn.prepareStatement(sql2);\n\n\t\t\tstatement1.executeUpdate();\n\t\t\tstatement2.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\n\t\t\ttry {\n\t\t\t\t//回滚到还原点，相当于取消设置还原点之后的代码执行\n\t\t\t\tconn.rollback(savepoint);\n\t\t\t} catch (SQLException e1) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t} finally {\n\n\t\t\ttry {\n\t\t\t\tconn.commit();\n\t\t\t\t\n\t\t\t\tstatement1.close();\n\t\t\t\tstatement2.close();\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n",[[1566632387011,["GJX@GJXAIOU",[[1,12746,"\n            "]],[12733,12733],[12746,12746]]],[1566632387968,["GJX@GJXAIOU",[[1,12746,"、、"]],[12746,12746],[12748,12748]]],[1566632389657,["GJX@GJXAIOU",[[-1,12746,"、、"]],[12748,12748],[12746,12746]]],[1566632394788,["GJX@GJXAIOU",[[1,12746,"// 执行批处理"]],[12746,12746],[12754,12754]]],[1566632397785,["GJX@GJXAIOU",[[1,12746,"    "]],[12746,12746],[12750,12750]]],[1566632429069,["GJX@GJXAIOU",[[1,12256,"，addBatch会将所有记录先放入缓存"]],[12256,12256],[12276,12276]]],[1566632459689,["GJX@GJXAIOU",[[1,10930,"如果通过ps.executeUpdate的方式一条条 地执行语句 ， 那么每次执行语句都包括 “ 连 数据库＋执行语句＋释放数据库 连接\" 3个动作。相比之下 ，如果用批处理的方式， 那么耗费的代价是 “—次连接＋多次执行＋一次释放 ” ，这样就能省去多次连接和释放数据库 资源从而提升操作性能。"]],[10930,10930],[11078,11078]]]],null,"GJX@GJXAIOU"]]}