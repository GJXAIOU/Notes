{"compress":true,"commitItems":[["9136e5cf-8971-481d-8143-02b4f8e61366",1561858017732,"## 复习\n    ArrayList底层维护的是一个Object类型的数组，使用无参构造方法，创建一个ArrayList集合对象\n    默认的元素个数为10\n    特征：\n        查询快，增删慢\n        \n        查询快：\n            使用的是数组的下标访问方式，可以直达目标位置\n        \n        增删慢：\n            增加，有可能会触发数组的扩容机制，会创建一个新的数组，新的数组元素个数大约是原\n            数组的1.5倍。然后会有一个数组拷贝的过程，这个过程是将原数组里面的每一个元素挨个\n            复制到新数组中，这个操作消耗大量的时间和空间\n            \n            删除 是从Object数组中删除是一个元素，删除之后，后面元素会向前移动，移动的过程是\n            一个复制的过程，这个操作，比较浪费时间\n        \n        增加的原理是：\n            newCapacity = oldCapacity + (oldCapacity >> 1);\n            \n    LinkedList:\n        底层维护的是一个链表 《数据结构》\n        增删快，查找慢\n        \n    Vector 线程安全，效率较低的ArrayList JDK1.0\n    \n    HashSet\n        底层维护的是一个哈希表，存储效率极高\n        \n        存储原理：\n            调用存入对象的hashCode方法，获取到该对象的hashCode的值，通过【移位运算】\n            计算该对象应该放到哈希表的哪一个位置\n            \n            情况1:\n                该位置没有任何元素，直接添加\n            \n            情况2：\n                该位置存在其他元素，这时候会调用对象的equals方法，和在该位置保存的其他\n                元素进行一一比较，如果所有的比较结果都为false，表示不相同，可以添加\n                如果出现任何一个true，表示和该位置其他的元素相同，不能添加\n    \n    TreeSet\n        存入TreeSet的元素必须有自然顺序或者是存在比较方式\n        \n        自定义类对象，想要放入到TreeSet集合中，有两种方式：\n            1. 该自定义类【遵从】Comparable接口，实现compareTo(Object o)\n            2. 给TreeSet提供自定义比较器，创建自定义比较器需要【遵从】Comparator接口\n            实现compare(Object o1, Object o2);",[[1561857991347,["GJX@GJXAIOU",[[1,85,"- "]],[85,85],[87,87]]],[1561857994401,["GJX@GJXAIOU",[[-1,81,"    "]],[81,85],[81,81]]],[1561857999185,["GJX@GJXAIOU",[[1,6,"\n"]],[5,5],[6,6]]],[1561858001234,["GJX@GJXAIOU",[[1,6,"- "]],[6,6],[8,8]]],[1561858001889,["GJX@GJXAIOU",[[1,9,"\n"]],[8,8],[9,9]]],[1561858001997,["GJX@GJXAIOU",[[1,9,"A"]],[9,9],[10,10]]],[1561858002754,["GJX@GJXAIOU",[[-1,9,"A"]],[10,10],[9,9]]],[1561858002900,["GJX@GJXAIOU",[[-1,9,"\n"]],[9,9],[8,8]]],[1561858003994,["GJX@GJXAIOU",[[-1,6,"- "]],[8,8],[6,6]]],[1561858008907,["GJX@GJXAIOU",[[1,6,"###"]],[6,6],[9,9]]],[1561858303325,["GJX@GJXAIOU",[[1,9,"ArrayList"]],[9,9],[18,18]]],[1561858308083,["GJX@GJXAIOU",[[1,9," "]],[9,9],[10,10]]],[1561858313685,["GJX@GJXAIOU",[[-1,536,"    "]],[536,540],[536,536]]],[1561858315642,["GJX@GJXAIOU",[[1,536,"### "]],[536,536],[551,551]]],[1561858320187,["GJX@GJXAIOU",[[1,108,"-"]],[108,108],[109,109]]],[1561858320355,["GJX@GJXAIOU",[[1,110," "]],[109,109],[110,110]]],[1561858323394,["GJX@GJXAIOU",[[-1,104,"    "]],[103,107],[103,103]]],[1561858327083,["GJX@GJXAIOU",[[1,132,"- "]],[132,132],[134,134]]],[1561858329378,["GJX@GJXAIOU",[[-1,127,"     "]],[126,131],[126,126]]],[1561858331690,["GJX@GJXAIOU",[[-1,114,"\n"]],[115,115],[114,114]]],[1561858334324,["GJX@GJXAIOU",[[-1,167,"\n"]],[168,168],[167,167]]],[1561858336877,["GJX@GJXAIOU",[[1,183,"-"]],[183,183],[184,184]]],[1561858339410,["GJX@GJXAIOU",[[-1,181,"  "]],[184,184],[182,182]]],[1561858340186,["GJX@GJXAIOU",[[1,181,"  "]],[182,182],[184,184]]],[1561858341793,["GJX@GJXAIOU",[[-1,179,"    "]],[184,184],[180,180]]],[1561858347777,["GJX@GJXAIOU",[[-1,237,"\n            "]],[237,250],[237,237]]],[1561858351525,["GJX@GJXAIOU",[[-1,278,"\n            "]],[278,291],[278,278]]],[1561858361009,["GJX@GJXAIOU",[[1,198,"0 "]],[198,198],[199,199]]],[1561858361994,["GJX@GJXAIOU",[[-1,198,"0"]],[199,199],[198,198]]],[1561858362308,["GJX@GJXAIOU",[[1,198,"-"]],[198,198],[199,199]]],[1561858362542,["GJX@GJXAIOU",[[1,200," "]],[199,199],[200,200]]],[1561858368003,["GJX@GJXAIOU",[[-1,192,"      "]],[193,197],[187,187]]],[1561858370924,["GJX@GJXAIOU",[[1,323,"- "]],[323,323],[325,325]]],[1561858373217,["GJX@GJXAIOU",[[-1,317,"      "]],[325,325],[319,319]]],[1561858376089,["GJX@GJXAIOU",[[-1,321," "]],[322,322],[321,321]]],[1561858376749,["GJX@GJXAIOU",[[1,321,":"]],[321,321],[322,322]]],[1561858378754,["GJX@GJXAIOU",[[1,322,"  "]],[322,322],[324,324]]],[1561858380112,["GJX@GJXAIOU",[[-1,197,"，"]],[198,198],[197,197]]],[1561858381763,["GJX@GJXAIOU",[[1,197,": "]],[197,197],[199,199]]],[1561858387984,["GJX@GJXAIOU",[[-1,310," "]],[300,300],[299,299]]],[1561858388393,["GJX@GJXAIOU",[[-1,298,"\n"]],[299,299],[298,298]]],[1561858397968,["GJX@GJXAIOU",[[-1,363,"\n            "]],[363,376],[363,363]]],[1561858453593,["GJX@GJXAIOU",[[-1,80,"    "]],[84,84],[80,80]]],[1561858453947,["GJX@GJXAIOU",[[-1,79,"\n"]],[80,80],[79,79]]],[1561858455931,["GJX@GJXAIOU",[[1,79,"."]],[79,79],[80,80]]],[1561858459370,["GJX@GJXAIOU",[[1,23,"\n    "]],[23,23],[28,28]]],[1561858463605,["GJX@GJXAIOU",[[-1,25,"    "]],[28,28],[24,24]]],[1561858560611,["GJX@GJXAIOU",[[-1,389,"        增加的原理是：\n            newCapacity = oldCapacity + (oldCapacity >> 1);"]],[389,464],[389,389]]],[1561858563978,["GJX@GJXAIOU",[[1,295,";\n      "]],[295,295],[303,303]]],[1561858565354,["GJX@GJXAIOU",[[1,311,"增加的原理是：\n            newCapacity = oldCapacity + (oldCapacity >> 1);        "]],[303,303],[378,378]]],[1561858569297,["GJX@GJXAIOU",[[-1,307,"    "]],[311,311],[307,307]]],[1561858570091,["GJX@GJXAIOU",[[1,307,"- "]],[307,307],[309,309]]],[1561858574635,["GJX@GJXAIOU",[[-1,303,"    "]],[309,309],[305,305]]],[1561858580496,["GJX@GJXAIOU",[[-1,313,"            "]],[325,325],[313,313]]],[1561858580937,["GJX@GJXAIOU",[[-1,312,"\n"]],[313,313],[312,312]]],[1561858582810,["GJX@GJXAIOU",[[1,312,"·"]],[312,312],[313,313]]],[1561858584049,["GJX@GJXAIOU",[[-1,312,"·"]],[313,313],[312,312]]],[1561858584344,["GJX@GJXAIOU",[[1,312,"\n      "]],[312,312],[319,319]]],[1561858641658,["GJX@GJXAIOU",[[-1,313,"      "]],[319,319],[313,313]]],[1561858642065,["GJX@GJXAIOU",[[-1,312,"\n"]],[313,313],[312,312]]],[1561858643816,["GJX@GJXAIOU",[[1,312,"·"]],[312,312],[313,313]]],[1561858645028,["GJX@GJXAIOU",[[-1,312,"·"]],[313,313],[312,312]]],[1561858645574,["GJX@GJXAIOU",[[1,312,"`"]],[312,312],[313,313]]],[1561858648091,["GJX@GJXAIOU",[[1,361,"`"]],[361,361],[362,362]]],[1561858656871,["GJX@GJXAIOU",[[1,445,";"]],[445,445],[446,446]]],[1561858659668,["GJX@GJXAIOU",[[-1,467,"  "]],[459,459],[457,457]]],[1561858659889,["GJX@GJXAIOU",[[-1,456,"\n"]],[457,457],[456,456]]],[1561858676042,["GJX@GJXAIOU",[[-1,538,"Vector 线程安全，效率较低的ArrayList JDK1.0"]],[538,571],[538,538]]],[1561858678214,["GJX@GJXAIOU",[[1,457,"Vector 线程安全，效率较低的ArrayList JDK1.0"]],[457,457],[490,490]]],[1561858682811,["GJX@GJXAIOU",[[1,456,"#### "]],[457,457],[504,504]]],[1561858687263,["GJX@GJXAIOU",[[1,505,"\n"]],[505,505],[506,506]]],[1561858694330,["GJX@GJXAIOU",[[1,583,"### "]],[583,587],[598,598]]],[1561858697277,["GJX@GJXAIOU",[[-1,589,"  "]],[590,590],[588,588]]],[1561858703884,["GJX@GJXAIOU",[[-1,598,"       "]],[597,604],[597,597]]],[1561858706481,["GJX@GJXAIOU",[[-1,626,"        "]],[626,634],[626,626]]],[1561858710080,["GJX@GJXAIOU",[[-1,640,"    "]],[643,643],[639,639]]],[1561858712634,["GJX@GJXAIOU",[[-1,681,"运"]],[682,682],[681,681]]],[1561858721089,["GJX@GJXAIOU",[[-1,638,"  "],[-1,694,"  "],[-1,715," "],[-1,726," "],[-1,728,"  "],[-1,745,"  "],[-1,786,"  "],[-1,789,"  "],[-1,806,"  "],[-1,875,"  "],[-1,914,"  "]],[639,961],[637,941]]],[1561858721785,["GJX@GJXAIOU",[[-1,636,"  "],[-1,690,"  "],[-1,719,"  "],[-1,722,"  "],[-1,737,"  "],[-1,774,"  "],[-1,777,"  "],[-1,792,"  "],[-1,857,"  "],[-1,896,"  "]],[637,941],[635,921]]],[1561858741577,["GJX@GJXAIOU",[[1,598,"\n "]],[598,598],[600,600]]],[1561858745636,["GJX@GJXAIOU",[[-1,528,"  "],[-1,548,"  "]],[530,563],[528,559]]],[1561858746097,["GJX@GJXAIOU",[[-1,526,"  "],[-1,546,"  "]],[528,559],[526,555]]],[1561858747112,["GJX@GJXAIOU",[[-1,524,"  "],[-1,544,"  "]],[526,555],[524,551]]],[1561858751752,["GJX@GJXAIOU",[[-1,566,"    "]],[570,570],[566,566]]],[1561858752088,["GJX@GJXAIOU",[[-1,566,"\n"]],[566,566],[565,565]]],[1561858755258,["GJX@GJXAIOU",[[-1,582," "]],[583,583],[582,582]]],[1561858774650,["GJX@GJXAIOU",[[-1,664,"        "]],[672,672],[664,664]]],[1561858775065,["GJX@GJXAIOU",[[-1,663,"\n"]],[664,664],[663,663]]],[1561858776355,["GJX@GJXAIOU",[[1,663,","]],[663,663],[664,664]]],[1561858779340,["GJX@GJXAIOU",[[1,661,"j"]],[661,661],[662,662]]],[1561858779949,["GJX@GJXAIOU",[[1,661," "],[1,662," isuan"]],[662,662],[668,668]]],[1561858781604,["GJX@GJXAIOU",[[-1,662,"jisuan"]],[668,668],[662,662]]],[1561858784284,["GJX@GJXAIOU",[[1,662,"计算"]],[662,662],[664,664]]],[1561858787097,["GJX@GJXAIOU",[[-1,663,"算 "]],[664,664],[663,663]]],[1561858790752,["GJX@GJXAIOU",[[-1,692," "]],[686,686],[685,685]]],[1561858791097,["GJX@GJXAIOU",[[-1,684,"\n"]],[685,685],[684,684]]],[1561858793671,["GJX@GJXAIOU",[[1,700,"- "]],[700,700],[702,702]]],[1561858795932,["GJX@GJXAIOU",[[1,751,"- "]],[751,751],[753,753]]],[1561858800400,["GJX@GJXAIOU",[[-1,694,"      "]],[701,701],[695,695]]],[1561858805009,["GJX@GJXAIOU",[[-1,739,"      "]],[745,745],[739,739]]],[1561858807777,["GJX@GJXAIOU",[[1,610,"- "]],[610,610],[612,612]]],[1561858813409,["GJX@GJXAIOU",[[1,897,"### "]],[897,901],[912,912]]],[1561858816120,["GJX@GJXAIOU",[[-1,903,"  "]],[904,905],[903,903]]],[1561858849323,["GJX@GJXAIOU",[[1,10,"1."]],[10,10],[12,12]]],[1561858853920,["GJX@GJXAIOU",[[1,512,"2."]],[512,512],[514,514]]],[1561858856918,["GJX@GJXAIOU",[[1,576,"3."]],[576,576],[578,578]]],[1561858860746,["GJX@GJXAIOU",[[1,909,"4."]],[909,909],[911,911]]],[1561858867657,["GJX@GJXAIOU",[[-1,1013,"  "],[-1,1062,"  "]],[1015,1108],[1013,1104]]],[1561858868169,["GJX@GJXAIOU",[[-1,1011,"  "],[-1,1060,"  "]],[1013,1104],[1011,1100]]],[1561858873082,["GJX@GJXAIOU",[[-1,925,"  "],[-1,962,"  "],[-1,965,"  "],[-1,1009,"  "],[-1,1058,"  "],[-1,1113,"  "]],[927,1157],[925,1145]]],[1561858873465,["GJX@GJXAIOU",[[-1,923,"  "],[-1,958,"  "],[-1,961,"  "],[-1,1001,"  "],[-1,1050," "],[-1,1055," "],[-1,1103,"  "]],[925,1145],[923,1133]]],[1561858874299,["GJX@GJXAIOU",[[-1,921,"  "],[-1,954,"  "],[-1,957,"  "],[-1,993,"  "],[-1,1042," "],[-1,1045," "],[-1,1093,"  "]],[923,1133],[921,1121]]],[1561858875212,["GJX@GJXAIOU",[[-1,919,"  "],[-1,950,"  "],[-1,953,"  "],[-1,985,"  "],[-1,1034,"  "],[-1,1083,"  "]],[921,1121],[919,1109]]],[1561858884409,["GJX@GJXAIOU",[[-1,1073,"    "]],[1077,1077],[1073,1073]]],[1561858884818,["GJX@GJXAIOU",[[-1,1072,"\n"]],[1073,1073],[1072,1072]]],[1561858898347,["GJX@GJXAIOU",[[1,1025,"f方法"]],[1025,1025],[1028,1028]]],[1561858898373,["GJX@GJXAIOU",[[1,1026," "]],[1028,1028],[1029,1029]]],[1561858901571,["GJX@GJXAIOU",[[-1,1025,"f"]],[1026,1026],[1025,1025]]],[1561859448669,["GJX@GJXAIOU",[[1,1107,"\n3. "]],[1107,1107],[1111,1111]]],[1561859448785,["GJX@GJXAIOU",[[-1,1108,"3. "],[1,1111,"\n\n"]],[1111,1111],[1109,1109]]],[1561859448937,["GJX@GJXAIOU",[[1,1110,"\n"]],[1109,1109],[1110,1110]]],[1561859449065,["GJX@GJXAIOU",[[1,1111,"\n"]],[1110,1110],[1111,1111]]],[1561859449177,["GJX@GJXAIOU",[[1,1112,"\n"]],[1111,1111],[1112,1112]]],[1561859449297,["GJX@GJXAIOU",[[1,1113,"\n"]],[1112,1112],[1113,1113]]],[1561859449426,["GJX@GJXAIOU",[[1,1114,"\n"]],[1113,1113],[1114,1114]]],[1561859449545,["GJX@GJXAIOU",[[1,1115,"\n"]],[1114,1114],[1115,1115]]],[1561859449689,["GJX@GJXAIOU",[[1,1116,"\n"]],[1115,1115],[1116,1116]]],[1561859449802,["GJX@GJXAIOU",[[1,1117,"\n"]],[1116,1116],[1117,1117]]],[1561859449953,["GJX@GJXAIOU",[[1,1118,"\n"]],[1117,1117],[1118,1118]]],[1561859450074,["GJX@GJXAIOU",[[1,1119,"\n"]],[1118,1118],[1119,1119]]],[1561859450213,["GJX@GJXAIOU",[[1,1120,"\n"]],[1119,1119],[1120,1120]]],[1561859450355,["GJX@GJXAIOU",[[1,1121,"\n"]],[1120,1120],[1121,1121]]],[1561859499536,["GJX@GJXAIOU",[[1,1111,"## 引言"]],[1111,1111],[1116,1116]]],[1561859500026,["GJX@GJXAIOU",[[1,1127,"\n"]],[1116,1116],[1117,1117]]],[1561859500404,["GJX@GJXAIOU",[[1,1128,"\n"]],[1117,1117],[1118,1118]]],[1561859508199,["GJX@GJXAIOU",[[1,1118,"在ArrayList"]],[1118,1118],[1128,1128]]],[1561859508226,["GJX@GJXAIOU",[[1,1119," "]],[1128,1128],[1129,1129]]],[1561859508956,["GJX@GJXAIOU",[[1,1129,"中"]],[1129,1129],[1130,1130]]],[1561859508981,["GJX@GJXAIOU",[[1,1129," "]],[1130,1130],[1131,1131]]],[1561859516975,["GJX@GJXAIOU",[[1,1131,"可以放入任意类型的数据，"]],[1131,1131],[1143,1143]]],[1561859542844,["GJX@GJXAIOU",[[1,1143,"但实际操作中数据类型不一致会导致更多的错误；"]],[1143,1143],[1165,1165]]],[1561859546502,["GJX@GJXAIOU",[[1,1117,"【】"]],[1117,1117],[1119,1119]]],[1561859550988,["GJX@GJXAIOU",[[1,1118,"问题："]],[1118,1118],[1121,1121]]],[1561859551448,["GJX@GJXAIOU",[[-1,1120,"："]],[1121,1121],[1120,1120]]],[1561859554447,["GJX@GJXAIOU",[[1,1121,"："]],[1121,1121],[1122,1122]]],[1561859556514,["GJX@GJXAIOU",[[1,1181,"\n"]],[1170,1170],[1171,1171]]],[1561859559239,["GJX@GJXAIOU",[[1,1123,"- "]],[1123,1123],[1125,1125]]],[1561859577201,["GJX@GJXAIOU",[[1,1173,"- 就算明知取出的数据时s"]],[1173,1173],[1186,1186]]],[1561859577229,["GJX@GJXAIOU",[[1,1185," "]],[1186,1186],[1187,1187]]],[1561859577730,["GJX@GJXAIOU",[[1,1187,"tr"]],[1187,1187],[1189,1189]]],[1561859579856,["GJX@GJXAIOU",[[1,1189,"ing类型"]],[1189,1189],[1194,1194]]],[1561859579883,["GJX@GJXAIOU",[[1,1192," "]],[1194,1194],[1195,1195]]],[1561859580805,["GJX@GJXAIOU",[[1,1195,"，大海寺"]],[1195,1195],[1199,1199]]],[1561859582336,["GJX@GJXAIOU",[[-1,1196,"大海寺"]],[1199,1199],[1196,1196]]],[1561859596901,["GJX@GJXAIOU",[[1,1196,"但是还是得通过强制类型转换才能得到string"]],[1196,1196],[1219,1219]]],[1561859596928,["GJX@GJXAIOU",[[1,1213," "]],[1219,1219],[1220,1220]]],[1561859598091,["GJX@GJXAIOU",[[1,1220,"类型"]],[1220,1220],[1222,1222]]],[1561859598117,["GJX@GJXAIOU",[[1,1220," "]],[1222,1222],[1223,1223]]],[1561859599819,["GJX@GJXAIOU",[[1,1223,"数据；"]],[1223,1223],[1226,1226]]],[1561859606160,["GJX@GJXAIOU",[[1,1227,"- \n"]],[1226,1226],[1229,1229]]],[1561859607171,["GJX@GJXAIOU",[[-1,1227,"- "]],[1229,1229],[1227,1227]]],[1561859609657,["GJX@GJXAIOU",[[1,1227,"```"]],[1227,1227],[1230,1230]]],[1561859609685,["GJX@GJXAIOU",[[1,1230,"language\n```\n"]],[1230,1230],[1230,1238]]],[1561859611168,["GJX@GJXAIOU",[[-1,1230,"language"],[1,1238,"j"]],[1230,1238],[1231,1231]]],[1561859611812,["GJX@GJXAIOU",[[1,1231,"ava"]],[1231,1231],[1234,1234]]],[1561859612227,["GJX@GJXAIOU",[[1,1235,"\n"]],[1234,1234],[1235,1235]]],[1561859621578,["GJX@GJXAIOU",[[1,1235,"ArrayList list = netr"]],[1235,1235],[1256,1256]]],[1561859622296,["GJX@GJXAIOU",[[-1,1254,"tr"]],[1256,1256],[1254,1254]]],[1561859625483,["GJX@GJXAIOU",[[1,1254,"w Arrayl"]],[1254,1254],[1262,1262]]],[1561859626074,["GJX@GJXAIOU",[[-1,1261,"l"]],[1262,1262],[1261,1261]]],[1561859628260,["GJX@GJXAIOU",[[1,1261,"List();"]],[1261,1261],[1268,1268]]],[1561859629651,["GJX@GJXAIOU",[[1,1269,"\n"]],[1268,1268],[1269,1269]]],[1561859634179,["GJX@GJXAIOU",[[1,1269,"list.add()"]],[1269,1269],[1279,1279]]],[1561859637574,["GJX@GJXAIOU",[[1,1278,"new "]],[1278,1278],[1282,1282]]],[1561859644154,["GJX@GJXAIOU",[[1,1282,"Dem01"]],[1282,1282],[1287,1287]]],[1561859646026,["GJX@GJXAIOU",[[-1,1285,"01"]],[1287,1287],[1285,1285]]],[1561859647300,["GJX@GJXAIOU",[[1,1285,"o1"]],[1285,1285],[1287,1287]]],[1561859653203,["GJX@GJXAIOU",[[1,1288,"; //SEm"]],[1288,1288],[1295,1295]]],[1561859653840,["GJX@GJXAIOU",[[-1,1292,"SEm"]],[1295,1295],[1292,1292]]],[1561859657997,["GJX@GJXAIOU",[[1,1292,"Demo1wei"]],[1292,1292],[1300,1300]]],[1561859658801,["GJX@GJXAIOU",[[-1,1297,"wei"]],[1300,1300],[1297,1297]]],[1561859664365,["GJX@GJXAIOU",[[1,1297,"为该类名称"]],[1297,1297],[1302,1302]]],[1561859664752,["GJX@GJXAIOU",[[1,1303,"\n"]],[1302,1302],[1303,1303]]],[1561859668922,["GJX@GJXAIOU",[[1,1303,"list.agg"]],[1303,1303],[1311,1311]]],[1561859670244,["GJX@GJXAIOU",[[-1,1309,"gg"]],[1311,1311],[1309,1309]]],[1561859672779,["GJX@GJXAIOU",[[1,1309,"dd();"]],[1309,1309],[1314,1314]]],[1561859679465,["GJX@GJXAIOU",[[1,1312,"\"hello\""]],[1312,1312],[1319,1319]]],[1561859682032,["GJX@GJXAIOU",[[1,1322,"\n"]],[1321,1321],[1322,1322]]],[1561859688722,["GJX@GJXAIOU",[[1,1322,"Sting "]],[1322,1322],[1328,1328]]],[1561859693283,["GJX@GJXAIOU",[[1,1324,"r"]],[1324,1324],[1325,1325]]],[1561859694803,["GJX@GJXAIOU",[[1,1329," "]],[1328,1328],[1329,1329]]],[1561859695579,["GJX@GJXAIOU",[[1,1329,"str"]],[1329,1329],[1332,1332]]],[1561859695925,["GJX@GJXAIOU",[[1,1333," "]],[1332,1332],[1333,1333]]],[1561859696778,["GJX@GJXAIOU",[[1,1333,"="]],[1333,1333],[1334,1334]]],[1561859696949,["GJX@GJXAIOU",[[1,1335," "]],[1334,1334],[1335,1335]]],[1561859699506,["GJX@GJXAIOU",[[1,1335,"()"]],[1335,1335],[1337,1337]]],[1561859702098,["GJX@GJXAIOU",[[1,1336,"String"]],[1336,1336],[1342,1342]]],[1561859706083,["GJX@GJXAIOU",[[1,1344," "]],[1343,1343],[1344,1344]]],[1561859706593,["GJX@GJXAIOU",[[1,1344,"li"]],[1344,1344],[1346,1346]]],[1561859707603,["GJX@GJXAIOU",[[-1,1344,"li "]],[1346,1346],[1343,1343]]],[1561859708658,["GJX@GJXAIOU",[[1,1343,"()"]],[1343,1343],[1345,1345]]],[1561859712891,["GJX@GJXAIOU",[[1,1344,"list.s"]],[1344,1344],[1350,1350]]],[1561859713488,["GJX@GJXAIOU",[[-1,1349,"s"]],[1350,1350],[1349,1349]]],[1561859713954,["GJX@GJXAIOU",[[1,1349,"ger"]],[1349,1349],[1352,1352]]],[1561859714904,["GJX@GJXAIOU",[[-1,1351,"r"]],[1352,1352],[1351,1351]]],[1561859716034,["GJX@GJXAIOU",[[1,1351,"t("]],[1351,1351],[1353,1353]]],[1561859716107,["GJX@GJXAIOU",[[1,1354,")"]],[1353,1353],[1354,1354]]],[1561859717410,["GJX@GJXAIOU",[[1,1353,"1"]],[1353,1353],[1354,1354]]],[1561859718898,["GJX@GJXAIOU",[[1,1356,";"]],[1356,1356],[1357,1357]]],[1561859719326,["GJX@GJXAIOU",[[1,1358," "]],[1357,1357],[1358,1358]]],[1561859729542,["GJX@GJXAIOU",[[1,1358,"//必须通过强转才能获得"]],[1358,1358],[1370,1370]]],[1561859736515,["GJX@GJXAIOU",[[1,1387,"\n"]],[1376,1376],[1377,1377]]],[1561859737698,["GJX@GJXAIOU",[[1,1377,"【】"]],[1377,1377],[1379,1379]]],[1561859740509,["GJX@GJXAIOU",[[1,1378,"期望"]],[1378,1378],[1380,1380]]],[1561859755119,["GJX@GJXAIOU",[[1,1381,"："]],[1381,1381],[1382,1382]]],[1561859755377,["GJX@GJXAIOU",[[1,1393,"\n"]],[1382,1382],[1383,1383]]],[1561859761579,["GJX@GJXAIOU",[[1,1383,"集合中的数据雷鬼选哪个"]],[1383,1383],[1394,1394]]],[1561859762824,["GJX@GJXAIOU",[[-1,1389,"雷鬼选哪个"]],[1394,1394],[1389,1389]]],[1561859768077,["GJX@GJXAIOU",[[1,1389,"类型能够统一；"]],[1389,1389],[1396,1396]]],[1561859770620,["GJX@GJXAIOU",[[-1,1395,"；"]],[1396,1396],[1395,1395]]],[1561859786463,["GJX@GJXAIOU",[[1,1395,"，即涉及到数据类型一致化问题；"]],[1395,1395],[1410,1410]]],[1561859799145,["GJX@GJXAIOU",[[1,1421,"\n"]],[1410,1410],[1411,1411]]],[1561859807763,["GJX@GJXAIOU",[[1,1411,"【】"]],[1411,1411],[1413,1413]]],[1561859813567,["GJX@GJXAIOU",[[1,1412,"解决方式"]],[1412,1412],[1416,1416]]],[1561859815263,["GJX@GJXAIOU",[[1,1417,"："]],[1417,1417],[1418,1418]]],[1561859815544,["GJX@GJXAIOU",[[1,1429,"\n"]],[1418,1418],[1419,1419]]],[1561859821887,["GJX@GJXAIOU",[[1,1419,"泛型（）"]],[1419,1419],[1423,1423]]],[1561859828188,["GJX@GJXAIOU",[[1,1422,"JDK1.5之后"]],[1422,1422],[1430,1430]]],[1561859828214,["GJX@GJXAIOU",[[1,1428," "]],[1430,1430],[1431,1431]]],[1561860139985,["GJX@GJXAIOU",[[1,1110,"## 泛型"]],[1110,1110],[1115,1115]]],[1561860144887,["GJX@GJXAIOU",[[1,1118,"#"]],[1120,1120],[1122,1122]]],[1561860147275,["GJX@GJXAIOU",[[1,1116,"\n"]],[1115,1115],[1116,1116]]],[1561860149791,["GJX@GJXAIOU",[[1,1450,"\n"]],[1440,1440],[1441,1441]]],[1561860153460,["GJX@GJXAIOU",[[1,1441,"### 使用"]],[1441,1441],[1447,1447]]],[1561860154279,["GJX@GJXAIOU",[[1,1457,"\n"]],[1447,1447],[1448,1448]]],[1561860164643,["GJX@GJXAIOU",[[1,1448,"泛型作用："]],[1448,1448],[1453,1453]]],[1561860165824,["GJX@GJXAIOU",[[1,1463,"\n"]],[1453,1453],[1454,1454]]],[1561860170543,["GJX@GJXAIOU",[[1,1454,"- 解决集合中国"]],[1454,1454],[1462,1462]]],[1561860172258,["GJX@GJXAIOU",[[-1,1461,"国"]],[1462,1462],[1461,1461]]],[1561860187982,["GJX@GJXAIOU",[[1,1461,"数据类型不一致的问题，要求保存什么什么"]],[1461,1461],[1480,1480]]],[1561860189136,["GJX@GJXAIOU",[[-1,1478,"什么"]],[1480,1480],[1478,1478]]],[1561860190685,["GJX@GJXAIOU",[[1,1478,"数据"]],[1478,1478],[1480,1480]]],[1561860205053,["GJX@GJXAIOU",[[1,1480,"，只能保存什么数据，否则宝座"]],[1480,1480],[1494,1494]]],[1561860205816,["GJX@GJXAIOU",[[-1,1492,"宝座"]],[1494,1494],[1492,1492]]],[1561860208910,["GJX@GJXAIOU",[[1,1492,"包"]],[1492,1492],[1493,1493]]],[1561860209701,["GJX@GJXAIOU",[[-1,1492,"包"]],[1493,1493],[1492,1492]]],[1561860227845,["GJX@GJXAIOU",[[1,1492,"报错，即将异常提前；"]],[1492,1492],[1502,1502]]],[1561860229001,["GJX@GJXAIOU",[[1,1503,"- \n"]],[1502,1502],[1505,1505]]],[1561860249951,["GJX@GJXAIOU",[[1,1505,"从集合中取数据，保存的是什么数据，取出"]],[1505,1505],[1524,1524]]],[1561860264798,["GJX@GJXAIOU",[[1,1524,"也是什么数据，不需要轻质"]],[1524,1524],[1536,1536]]],[1561860265480,["GJX@GJXAIOU",[[-1,1534,"轻质"]],[1536,1536],[1534,1534]]],[1561860271548,["GJX@GJXAIOU",[[1,1534,"强制类型转换"]],[1534,1534],[1540,1540]]],[1561860281159,["GJX@GJXAIOU",[[1,1541,"- \n"]],[1540,1540],[1543,1543]]],[1561860281263,["GJX@GJXAIOU",[[-1,1541,"- "]],[1543,1543],[1542,1542]]],[1561860285053,["GJX@GJXAIOU",[[1,1542,"代码示例："]],[1542,1542],[1547,1547]]],[1561860285375,["GJX@GJXAIOU",[[1,1556,"\n"]],[1547,1547],[1548,1548]]],[1561860799980,["GJX@GJXAIOU",[[1,1548,"```"]],[1548,1548],[1551,1551]]],[1561860800008,["GJX@GJXAIOU",[[1,1551,"language\n```\n"]],[1551,1551],[1551,1559]]],[1561860801292,["GJX@GJXAIOU",[[-1,1551,"language"],[1,1559,"j"]],[1551,1559],[1552,1552]]],[1561860801720,["GJX@GJXAIOU",[[1,1552,"ava"]],[1552,1552],[1555,1555]]],[1561860801809,["GJX@GJXAIOU",[[1,1556,"\n"]],[1555,1555],[1556,1556]]],[1561860803110,["GJX@GJXAIOU",[[1,1556,"/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\n\n\npublic class FanXin_Use {\n\tpublic static void main(String[] args) {\n\t\t//这里<String>即为泛型，要求这个ArrayList集合中有且只能保存String类型的数据\n\t\tArrayList<String> arrayList = new ArrayList<String>();\n\t\t\n\t\tarrayList.add(\"hello\");\n\t\tarrayList.add(\"world\");\n\t\t//无法保存其他数据类型\n\t\t//arrayList.add(1);\n\t\t\n\t\tString string = arrayList.get(1);\n\t\tSystem.out.println(string);\n\t}\n}\n"]],[1556,1556],[1958,1958]]],[1561860805762,["GJX@GJXAIOU",[[-1,1556,"/**\n * \n */"]],[1556,1567],[1556,1556]]],[1561860806238,["GJX@GJXAIOU",[[-1,1556,"\n"]],[1556,1556],[1555,1555]]],[1561860811126,["GJX@GJXAIOU",[[-1,1601,"\n"]],[1601,1601],[1600,1600]]],[1561860814134,["GJX@GJXAIOU",[[-1,1571,"\n"]],[1571,1571],[1570,1570]]],[1561860929532,["GJX@GJXAIOU",[[1,1542,"\n"]],[1541,1541],[1542,1542]]],[1561860930949,["GJX@GJXAIOU",[[1,1542,"biaozhu"]],[1542,1542],[1549,1549]]],[1561860932592,["GJX@GJXAIOU",[[-1,1542,"biaozhu"]],[1549,1549],[1542,1542]]],[1561860937559,["GJX@GJXAIOU",[[1,1542,"标准格式："]],[1542,1542],[1547,1547]]],[1561860937906,["GJX@GJXAIOU",[[1,1548,"\n"]],[1547,1547],[1548,1548]]],[1561861125447,["GJX@GJXAIOU",[[1,1548,"ArrayList<String> arrayList = new ArrayList<String>();"]],[1548,1548],[1602,1602]]],[1561861128329,["GJX@GJXAIOU",[[1,1548,"·"]],[1548,1548],[1549,1549]]],[1561861129681,["GJX@GJXAIOU",[[-1,1548,"·"]],[1549,1549],[1548,1548]]],[1561861130471,["GJX@GJXAIOU",[[1,1548,"`"]],[1548,1548],[1549,1549]]],[1561861131889,["GJX@GJXAIOU",[[1,1603,"`"]],[1603,1603],[1604,1604]]],[1561861493811,["GJX@GJXAIOU",[[1,2021,"\n"]],[2012,2012],[2013,2013]]],[1561861497671,["GJX@GJXAIOU",[[1,2013,"### fanx"]],[2013,2013],[2021,2021]]],[1561861498369,["GJX@GJXAIOU",[[-1,2017,"fanx"]],[2021,2021],[2017,2017]]],[1561861509163,["GJX@GJXAIOU",[[1,2017,"泛型在函数中的使用"]],[2017,2017],[2026,2026]]],[1561861509863,["GJX@GJXAIOU",[[1,2035,"\n"]],[2026,2026],[2027,2027]]],[1561861521641,["GJX@GJXAIOU",[[1,2027,"【需求】"]],[2027,2027],[2031,2031]]],[1561861522782,["GJX@GJXAIOU",[[1,2040,"\n"]],[2031,2031],[2032,2032]]],[1561861538259,["GJX@GJXAIOU",[[1,2032,"  定义一个方法，可以接受任意类型的"]],[2032,2032],[2050,2050]]],[1561861540386,["GJX@GJXAIOU",[[-1,2047,"类型的"]],[2050,2050],[2047,2047]]],[1561861567459,["GJX@GJXAIOU",[[1,2047,"数据类型，而且要求返回的数据类型，就是你传入的数据类型；了如"]],[2047,2047],[2077,2077]]],[1561861568151,["GJX@GJXAIOU",[[-1,2075,"了如"]],[2077,2077],[2075,2075]]],[1561861578308,["GJX@GJXAIOU",[[1,2075,"例如：传入String"]],[2075,2075],[2086,2086]]],[1561861578337,["GJX@GJXAIOU",[[1,2080," "]],[2086,2086],[2087,2087]]],[1561861579262,["GJX@GJXAIOU",[[1,2087,"类型"]],[2087,2087],[2089,2089]]],[1561861579291,["GJX@GJXAIOU",[[1,2087," "]],[2089,2089],[2090,2090]]],[1561861582380,["GJX@GJXAIOU",[[1,2090,"，返回"]],[2090,2090],[2093,2093]]],[1561861583138,["GJX@GJXAIOU",[[1,2094,"  \n"]],[2093,2093],[2096,2096]]],[1561861586531,["GJX@GJXAIOU",[[1,2096,"string类型"]],[2096,2096],[2104,2104]]],[1561861586558,["GJX@GJXAIOU",[[1,2102," "]],[2104,2104],[2105,2105]]],[1561861591182,["GJX@GJXAIOU",[[-1,2094,"  "]],[2096,2096],[2094,2094]]],[1561861591566,["GJX@GJXAIOU",[[-1,2093,"\n"]],[2094,2094],[2093,2093]]],[1561861593276,["GJX@GJXAIOU",[[1,2093," "]],[2093,2093],[2094,2094]]],[1561861606290,["GJX@GJXAIOU",[[1,2103,"，传入e"]],[2103,2103],[2107,2107]]],[1561861606321,["GJX@GJXAIOU",[[1,2106," "]],[2107,2107],[2108,2108]]],[1561861607055,["GJX@GJXAIOU",[[-1,2107,"e"]],[2108,2108],[2107,2107]]],[1561861614933,["GJX@GJXAIOU",[[1,2107,"Demo1类型"]],[2107,2107],[2114,2114]]],[1561861614961,["GJX@GJXAIOU",[[1,2112," "]],[2114,2114],[2115,2115]]],[1561861620737,["GJX@GJXAIOU",[[1,2115,"，返回Demo"]],[2115,2115],[2122,2122]]],[1561861620766,["GJX@GJXAIOU",[[1,2118," "]],[2122,2122],[2123,2123]]],[1561861622294,["GJX@GJXAIOU",[[1,2123,"1类型"]],[2123,2123],[2126,2126]]],[1561861622322,["GJX@GJXAIOU",[[1,2124," "]],[2126,2126],[2127,2127]]],[1561861622969,["GJX@GJXAIOU",[[1,2127,"；"]],[2127,2127],[2128,2128]]],[1561861630430,["GJX@GJXAIOU",[[-1,2032,"  "]],[2033,2034],[2032,2032]]],[1561861775183,["GJX@GJXAIOU",[[1,2135,"\n"]],[2127,2127],[2128,2128]]],[1561861782675,["GJX@GJXAIOU",[[1,2128,"泛型的使用更需要"]],[2128,2128],[2136,2136]]],[1561861783423,["GJX@GJXAIOU",[[-1,2133,"更需要"]],[2136,2136],[2133,2133]]],[1561861784920,["GJX@GJXAIOU",[[1,2133,"需要："]],[2133,2133],[2136,2136]]],[1561861786306,["GJX@GJXAIOU",[[1,2144,"\n"]],[2136,2136],[2137,2137]]],[1561861810564,["GJX@GJXAIOU",[[1,2137,"  占位符，即一个大写字母，只是一个占位符，没有实际"]],[2137,2137],[2163,2163]]],[1561861820196,["GJX@GJXAIOU",[[1,2163,"含义，不同地方的占位符没有联系"]],[2163,2163],[2178,2178]]],[1561861829293,["GJX@GJXAIOU",[[1,2170,"定义"]],[2170,2170],[2172,2172]]],[1561861831826,["GJX@GJXAIOU",[[1,2180,"；"]],[2180,2180],[2181,2181]]],[1561861832110,["GJX@GJXAIOU",[[1,2182,"  \n"]],[2181,2181],[2184,2184]]],[1561861834597,["GJX@GJXAIOU",[[-1,2182,"  "]],[2184,2184],[2182,2182]]],[1561861835535,["GJX@GJXAIOU",[[1,2190,"\n"]],[2182,2182],[2183,2183]]],[1561861839249,["GJX@GJXAIOU",[[1,2183,"泛型在函数总"]],[2183,2183],[2189,2189]]],[1561861840831,["GJX@GJXAIOU",[[-1,2188,"总"]],[2189,2189],[2188,2188]]],[1561861845425,["GJX@GJXAIOU",[[1,2188,"中使用的格式："]],[2188,2188],[2195,2195]]],[1561861845800,["GJX@GJXAIOU",[[1,2203,"\n"]],[2195,2195],[2196,2196]]],[1561861848016,["GJX@GJXAIOU",[[1,2196,"```"]],[2196,2196],[2199,2199]]],[1561861848045,["GJX@GJXAIOU",[[1,2199,"language\n```\n"]],[2199,2199],[2199,2207]]],[1561861850527,["GJX@GJXAIOU",[[-1,2199,"language"],[1,2207,"\n"]],[2199,2207],[2200,2200]]],[1561861855082,["GJX@GJXAIOU",[[1,2200,"xiushi"]],[2200,2200],[2206,2206]]],[1561861856254,["GJX@GJXAIOU",[[-1,2200,"xiushi"]],[2206,2206],[2200,2200]]],[1561861863123,["GJX@GJXAIOU",[[1,2200,"修饰符 <>"]],[2200,2200],[2206,2206]]],[1561861864672,["GJX@GJXAIOU",[[1,2205,"f"]],[2205,2205],[2206,2206]]],[1561861865074,["GJX@GJXAIOU",[[-1,2205,"f"]],[2206,2206],[2205,2205]]],[1561861870139,["GJX@GJXAIOU",[[1,2205,"声明的"]],[2205,2205],[2208,2208]]],[1561861877482,["GJX@GJXAIOU",[[1,2208,"自定义泛型占位符"]],[2208,2208],[2216,2216]]],[1561861902291,["GJX@GJXAIOU",[[1,2217," 返回值类型()"]],[2217,2217],[2225,2225]]],[1561861904215,["GJX@GJXAIOU",[[1,2224,"keyi"]],[2224,2224],[2228,2228]]],[1561861905761,["GJX@GJXAIOU",[[-1,2224,"keyi"]],[2228,2228],[2224,2224]]],[1561861911035,["GJX@GJXAIOU",[[1,2224,"可以使用自定义泛型"]],[2224,2224],[2233,2233]]],[1561861917979,["GJX@GJXAIOU",[[1,2234," 函数名()"]],[2234,2234],[2240,2240]]],[1561861920207,["GJX@GJXAIOU",[[1,2239,"xingshi"]],[2239,2239],[2246,2246]]],[1561861922294,["GJX@GJXAIOU",[[-1,2239,"xingshi"]],[2246,2246],[2239,2239]]],[1561861925030,["GJX@GJXAIOU",[[1,2239,"形式参数"]],[2239,2239],[2243,2243]]],[1561861935770,["GJX@GJXAIOU",[[1,2243,"列表（）"]],[2243,2243],[2247,2247]]],[1561861940100,["GJX@GJXAIOU",[[1,2246,"可以是"]],[2246,2246],[2249,2249]]],[1561861946605,["GJX@GJXAIOU",[[-1,2248,"是"]],[2249,2249],[2248,2248]]],[1561861949934,["GJX@GJXAIOU",[[1,2248,"使用泛型"]],[2248,2248],[2252,2252]]],[1561861954145,["GJX@GJXAIOU",[[1,2254,"{"]],[2254,2254],[2255,2255]]],[1561861954823,["GJX@GJXAIOU",[[1,2256,"\n"]],[2255,2255],[2256,2256]]],[1561861955918,["GJX@GJXAIOU",[[1,2257,"\n"]],[2256,2256],[2257,2257]]],[1561861956523,["GJX@GJXAIOU",[[1,2257,"}"]],[2257,2257],[2258,2258]]],[1561861968593,["GJX@GJXAIOU",[[1,2256,"    函数体（）"]],[2256,2256],[2265,2265]]],[1561861975768,["GJX@GJXAIOU",[[1,2264,"函数体中特，"]],[2264,2264],[2270,2270]]],[1561861978293,["GJX@GJXAIOU",[[-1,2268,"特，"]],[2270,2270],[2268,2268]]],[1561861987922,["GJX@GJXAIOU",[[1,2268,"，所有使用到自定义泛型的地方，"]],[2268,2268],[2283,2283]]],[1561862013628,["GJX@GJXAIOU",[[1,2283,"都可以被传入数据类型替换"]],[2283,2283],[2295,2295]]],[1561862020884,["GJX@GJXAIOU",[[1,2283,"数据类型"]],[2283,2283],[2287,2287]]],[1561862026126,["GJX@GJXAIOU",[[-1,2288,"可以"]],[2290,2290],[2288,2288]]],[1561862033654,["GJX@GJXAIOU",[[1,2313,"\n"]],[2304,2304],[2305,2305]]],[1561862038330,["GJX@GJXAIOU",[[1,2305,"代码示例："]],[2305,2305],[2310,2310]]],[1561862038733,["GJX@GJXAIOU",[[1,2319,"\n"]],[2310,2310],[2311,2311]]],[1561862041688,["GJX@GJXAIOU",[[1,2311,"```"]],[2311,2311],[2314,2314]]],[1561862041716,["GJX@GJXAIOU",[[1,2314,"language\n```\n"]],[2314,2314],[2314,2322]]],[1561862042845,["GJX@GJXAIOU",[[-1,2314,"language"],[1,2322,"j"]],[2314,2322],[2315,2315]]],[1561862043327,["GJX@GJXAIOU",[[1,2315,"ava"]],[2315,2315],[2318,2318]]],[1561862043467,["GJX@GJXAIOU",[[1,2319,"\n"]],[2318,2318],[2319,2319]]],[1561863609189,["GJX@GJXAIOU",[[1,2319,"package study;\n\npublic class FanXin_Fun {\n\tpublic static void main(String[] args) {\n\t\tString string = getType(\"hello\"); //这里传入的“hello”是字符串类型，因此调用的时候，所有的E相当于就是字符串类型；\n\t\tFanXin_Fun fanXin_Fun = getType(new FanXin_Fun());\n\t}\n\t\n\tpublic static <E> E getType(E e) {\n\t\treturn e;\n\t}\n}"]],[2319,2319],[2594,2594]]],[1561863648137,["GJX@GJXAIOU",[[1,2305,"\n"]],[2305,2305],[2306,2306]]],[1561863653058,["GJX@GJXAIOU",[[1,2609,"\n"]],[2600,2600],[2601,2601]]],[1561863655623,["GJX@GJXAIOU",[[1,2601,"- b"]],[2601,2601],[2604,2604]]],[1561863657361,["GJX@GJXAIOU",[[-1,2601,"- b"]],[2604,2604],[2601,2601]]],[1561863663573,["GJX@GJXAIOU",[[1,2539,"\t\n\t"]],[2537,2537],[2540,2540]]],[1561863669695,["GJX@GJXAIOU",[[1,2540,"int num= "]],[2540,2540],[2549,2549]]],[1561863670628,["GJX@GJXAIOU",[[-1,2547,"= "]],[2549,2549],[2547,2547]]],[1561863670976,["GJX@GJXAIOU",[[1,2547," "]],[2547,2547],[2548,2548]]],[1561863677562,["GJX@GJXAIOU",[[1,2548,"= getType()"]],[2548,2548],[2559,2559]]],[1561863679023,["GJX@GJXAIOU",[[1,2558,"5"]],[2558,2558],[2559,2559]]],[1561863680143,["GJX@GJXAIOU",[[1,2560,";"]],[2560,2560],[2561,2561]]],[1561863683240,["GJX@GJXAIOU",[[1,2624,"shang"]],[2624,2624],[2629,2629]]],[1561863684661,["GJX@GJXAIOU",[[-1,2624,"shang"]],[2629,2629],[2624,2624]]],[1561863688622,["GJX@GJXAIOU",[[1,2624,"上面代码中n"]],[2624,2624],[2630,2630]]],[1561863688652,["GJX@GJXAIOU",[[1,2629," "]],[2630,2630],[2631,2631]]],[1561863690482,["GJX@GJXAIOU",[[1,2631,"um是"]],[2631,2631],[2634,2634]]],[1561863690511,["GJX@GJXAIOU",[[1,2633," "]],[2634,2634],[2635,2635]]],[1561863696186,["GJX@GJXAIOU",[[1,2635,"Integer"]],[2635,2635],[2642,2642]]],[1561863696217,["GJX@GJXAIOU",[[1,2635," "]],[2642,2642],[2643,2643]]],[1561863696985,["GJX@GJXAIOU",[[1,2643,"类"]],[2643,2643],[2644,2644]]],[1561863697012,["GJX@GJXAIOU",[[1,2643," "]],[2644,2644],[2645,2645]]],[1561863697922,["GJX@GJXAIOU",[[1,2645,"型"]],[2645,2645],[2646,2646]]],[1561863699981,["GJX@GJXAIOU",[[1,2656,"\n"]],[2646,2646],[2647,2647]]],[1561863704749,["GJX@GJXAIOU",[[-1,2656,"\n"]],[2647,2647],[2646,2646]]],[1561863709307,["GJX@GJXAIOU",[[1,2646,"，是一个包装类"]],[2646,2646],[2653,2653]]],[1561863709654,["GJX@GJXAIOU",[[1,2663,"\n"]],[2653,2653],[2654,2654]]],[1561863709825,["GJX@GJXAIOU",[[1,2664,"\n"]],[2654,2654],[2655,2655]]],[1561863712518,["GJX@GJXAIOU",[[1,2655,"****"]],[2655,2655],[2657,2657]]],[1561863715473,["GJX@GJXAIOU",[[1,2657,"包装类："]],[2657,2657],[2661,2661]]],[1561863717182,["GJX@GJXAIOU",[[1,2673,"\n"]],[2663,2663],[2664,2664]]],[1561863720578,["GJX@GJXAIOU",[[1,2664,"java是"]],[2664,2664],[2669,2669]]],[1561863720606,["GJX@GJXAIOU",[[1,2668," "]],[2669,2669],[2670,2670]]],[1561863724109,["GJX@GJXAIOU",[[-1,2664,"java 是"]],[2670,2670],[2664,2664]]],[1561863726801,["GJX@GJXAIOU",[[1,2664,"Java是"]],[2664,2664],[2669,2669]]],[1561863726830,["GJX@GJXAIOU",[[1,2668," "]],[2669,2669],[2670,2670]]],[1561863727752,["GJX@GJXAIOU",[[1,2670,"完全"]],[2670,2670],[2672,2672]]],[1561863748459,["GJX@GJXAIOU",[[1,2672,"面向对象的语言，在Java"]],[2672,2672],[2685,2685]]],[1561863748487,["GJX@GJXAIOU",[[1,2681," "]],[2685,2685],[2686,2686]]],[1561863749260,["GJX@GJXAIOU",[[1,2686,"中"]],[2686,2686],[2687,2687]]],[1561863749289,["GJX@GJXAIOU",[[1,2686," "]],[2687,2687],[2688,2688]]],[1561863757440,["GJX@GJXAIOU",[[1,2688,"万物皆对象，如果要"]],[2688,2688],[2697,2697]]],[1561863759812,["GJX@GJXAIOU",[[-1,2696,"要"]],[2697,2697],[2696,2696]]],[1561863787563,["GJX@GJXAIOU",[[1,2696,"是要保存类对象，那么八大基本数据类型就无法使用，所以，Java提供了"]],[2696,2696],[2730,2730]]],[1561863787591,["GJX@GJXAIOU",[[1,2727," "]],[2730,2730],[2731,2731]]],[1561863790873,["GJX@GJXAIOU",[[1,2731,"一个包装"]],[2731,2731],[2735,2735]]],[1561863817154,["GJX@GJXAIOU",[[1,2735,"机制，包装基本数据类型，让其变成类对象；称为自动封箱；"]],[2735,2735],[2762,2762]]],[1561864030487,["GJX@GJXAIOU",[[1,2763,"基本数据类型 | "]],[2763,2763],[2772,2772]]],[1561864033817,["GJX@GJXAIOU",[[1,2772,"封装之后"]],[2772,2772],[2776,2776]]],[1561864034437,["GJX@GJXAIOU",[[1,2785,"\n"]],[2776,2776],[2777,2777]]],[1561864039095,["GJX@GJXAIOU",[[1,2777,"---| ---"]],[2777,2777],[2785,2785]]],[1561864040840,["GJX@GJXAIOU",[[1,2786,"   |    \n"]],[2785,2785],[2786,2789]]],[1561864042951,["GJX@GJXAIOU",[[-1,2786,"   "],[1,2789,"s"]],[2786,2789],[2787,2787]]],[1561864045046,["GJX@GJXAIOU",[[1,2787,"hort"]],[2787,2787],[2791,2791]]],[1561864051439,["GJX@GJXAIOU",[[-1,2792,"    "],[1,2796,"Short"]],[2792,2792],[2797,2797]]],[1561864051776,["GJX@GJXAIOU",[[1,2798,"   |    \n"]],[2797,2797],[2798,2801]]],[1561864055928,["GJX@GJXAIOU",[[-1,2798,"   "],[1,2801,"i"]],[2798,2801],[2799,2799]]],[1561864056286,["GJX@GJXAIOU",[[1,2799,"nt"]],[2799,2799],[2801,2801]]],[1561864058105,["GJX@GJXAIOU",[[-1,2802,"    "],[1,2806,"I"]],[2802,2806],[2803,2803]]],[1561864059621,["GJX@GJXAIOU",[[1,2803,"nter"]],[2803,2803],[2807,2807]]],[1561864060253,["GJX@GJXAIOU",[[-1,2806,"r"]],[2807,2807],[2806,2806]]],[1561864064734,["GJX@GJXAIOU",[[1,2806,"ger"]],[2806,2806],[2809,2809]]],[1561864065006,["GJX@GJXAIOU",[[1,2810,"   |    \n"]],[2809,2809],[2810,2813]]],[1561864068974,["GJX@GJXAIOU",[[-1,2810,"   "],[1,2813,"b"]],[2810,2813],[2811,2811]]],[1561864070693,["GJX@GJXAIOU",[[1,2811,"yte"]],[2811,2811],[2814,2814]]],[1561864074529,["GJX@GJXAIOU",[[-1,2815,"    "],[1,2819,"B"]],[2815,2819],[2816,2816]]],[1561864075254,["GJX@GJXAIOU",[[1,2816,"yte"]],[2816,2816],[2819,2819]]],[1561864075966,["GJX@GJXAIOU",[[1,2820,"   |    \n"]],[2819,2819],[2820,2823]]],[1561864078185,["GJX@GJXAIOU",[[-1,2820,"   "],[1,2823,"l"]],[2820,2823],[2821,2821]]],[1561864078746,["GJX@GJXAIOU",[[1,2821,"ong"]],[2821,2821],[2824,2824]]],[1561864080877,["GJX@GJXAIOU",[[-1,2825,"    "],[1,2829,"L"]],[2825,2829],[2826,2826]]],[1561864081455,["GJX@GJXAIOU",[[1,2826,"ong"]],[2826,2826],[2829,2829]]],[1561864082279,["GJX@GJXAIOU",[[1,2830,"   |    \n"]],[2829,2829],[2830,2833]]],[1561864085238,["GJX@GJXAIOU",[[-1,2830,"   "],[1,2833,"d"]],[2830,2833],[2831,2831]]],[1561864086528,["GJX@GJXAIOU",[[1,2831,"ouble"]],[2831,2831],[2836,2836]]],[1561864088386,["GJX@GJXAIOU",[[-1,2837,"    "],[1,2841,"D"]],[2837,2841],[2838,2838]]],[1561864089287,["GJX@GJXAIOU",[[1,2838,"ouble"]],[2838,2838],[2843,2843]]],[1561864089744,["GJX@GJXAIOU",[[1,2844,"   |    \n"]],[2843,2843],[2844,2847]]],[1561864091918,["GJX@GJXAIOU",[[-1,2844,"   "],[1,2847,"f"]],[2844,2847],[2845,2845]]],[1561864094022,["GJX@GJXAIOU",[[1,2845,"loat"]],[2845,2845],[2849,2849]]],[1561864094416,["GJX@GJXAIOU",[[1,2849,"\n"]],[2849,2849],[2850,2850]]],[1561864095565,["GJX@GJXAIOU",[[-1,2849,"\n"]],[2850,2850],[2849,2849]]],[1561864097814,["GJX@GJXAIOU",[[-1,2850,"    "],[1,2854,"F"]],[2850,2854],[2851,2851]]],[1561864099191,["GJX@GJXAIOU",[[1,2851,"loat"]],[2851,2851],[2855,2855]]],[1561864100713,["GJX@GJXAIOU",[[1,2856,"   |    \n"]],[2855,2855],[2856,2859]]],[1561864101551,["GJX@GJXAIOU",[[-1,2856,"   "],[1,2859,"b"]],[2856,2859],[2857,2857]]],[1561864103943,["GJX@GJXAIOU",[[1,2857,"oolean"]],[2857,2857],[2863,2863]]],[1561864109302,["GJX@GJXAIOU",[[-1,2864,"    "],[1,2868,"B"]],[2864,2868],[2865,2865]]],[1561864109669,["GJX@GJXAIOU",[[1,2865,"l"]],[2865,2865],[2866,2866]]],[1561864110264,["GJX@GJXAIOU",[[-1,2865,"l"]],[2866,2866],[2865,2865]]],[1561864112187,["GJX@GJXAIOU",[[1,2865,"oolean"]],[2865,2865],[2871,2871]]],[1561864112845,["GJX@GJXAIOU",[[1,2872,"   |    \n"]],[2871,2871],[2872,2875]]],[1561864114505,["GJX@GJXAIOU",[[-1,2872,"   "],[1,2875,"c"]],[2872,2875],[2873,2873]]],[1561864115038,["GJX@GJXAIOU",[[1,2873,"har"]],[2873,2873],[2876,2876]]],[1561864117991,["GJX@GJXAIOU",[[-1,2877,"    "],[1,2881,"C"]],[2877,2881],[2878,2878]]],[1561864122762,["GJX@GJXAIOU",[[1,2878,"haracter"]],[2878,2878],[2886,2886]]],[1561864180565,["GJX@GJXAIOU",[[1,2887,"ruguo"]],[2887,2887],[2892,2892]]],[1561864182780,["GJX@GJXAIOU",[[-1,2887,"ruguo"]],[2892,2892],[2887,2887]]],[1561864210684,["GJX@GJXAIOU",[[1,2887,"如果使用包装类直接赋值给普通的基本数据"]],[2887,2887],[2906,2906]]],[1561864224354,["GJX@GJXAIOU",[[1,2906,"类型，该操作称为 拆箱；"]],[2906,2906],[2918,2918]]],[1561864226332,["GJX@GJXAIOU",[[1,2926,"\n"]],[2918,2918],[2919,2919]]],[1561864270318,["GJX@GJXAIOU",[[1,2566,"//"]],[2566,2566],[2568,2568]]],[1561864271766,["GJX@GJXAIOU",[[1,2568,",."]],[2568,2568],[2570,2570]]],[1561864273045,["GJX@GJXAIOU",[[-1,2568,",."]],[2570,2570],[2568,2568]]],[1561864273512,["GJX@GJXAIOU",[[1,2568,"<>"]],[2568,2568],[2570,2570]]],[1561864274909,["GJX@GJXAIOU",[[1,2569,"E"]],[2569,2569],[2570,2570]]],[1561864276694,["GJX@GJXAIOU",[[1,2571,"shi"]],[2571,2571],[2574,2574]]],[1561864277301,["GJX@GJXAIOU",[[-1,2571,"shi"]],[2574,2574],[2571,2571]]],[1561864312568,["GJX@GJXAIOU",[[1,2571,"是自定义泛型的占位符，表示在该函数中可以使用占位符E，而E的具体数据类型，"]],[2571,2571],[2608,2608]]],[1561864413964,["GJX@GJXAIOU",[[-1,2607,"，"]],[2608,2608],[2607,2607]]],[1561864442272,["GJX@GJXAIOU",[[1,2607,"由传入的参数控制，这样的操作可以让函数多元化，根据"]],[2607,2607],[2632,2632]]],[1561864443103,["GJX@GJXAIOU",[[-1,2630,"根据"]],[2632,2632],[2630,2630]]],[1561864448137,["GJX@GJXAIOU",[[1,2630,"更加简单；"]],[2630,2630],[2635,2635]]],[1561864809358,["GJX@GJXAIOU",[[1,2990,"### "]],[2990,2990],[2994,2994]]],[1561864818974,["GJX@GJXAIOU",[[1,2994,"泛在"]],[2994,2994],[2996,2996]]],[1561864820884,["GJX@GJXAIOU",[[-1,2994,"泛在"]],[2996,2996],[2994,2994]]],[1561864827801,["GJX@GJXAIOU",[[1,2994,"在类内使用泛型"]],[2994,2994],[3001,3001]]],[1561864830388,["GJX@GJXAIOU",[[1,3007,"\n"]],[3001,3001],[3002,3002]]],[1561864832503,["GJX@GJXAIOU",[[1,3002,"格式："]],[3002,3002],[3005,3005]]],[1561864833139,["GJX@GJXAIOU",[[1,3011,"\n"]],[3005,3005],[3006,3006]]],[1561864835605,["GJX@GJXAIOU",[[1,3006,"  "]],[3006,3006],[3008,3008]]],[1561864842605,["GJX@GJXAIOU",[[-1,3006,"  "]],[3008,3008],[3006,3006]]],[1561864845140,["GJX@GJXAIOU",[[-1,3006,"\n"],[1,3007,"`"]],[3006,3006],[3007,3007]]],[1561864845510,["GJX@GJXAIOU",[[1,3007,"``"]],[3007,3007],[3009,3009]]],[1561864845538,["GJX@GJXAIOU",[[1,3009,"language\n```\n"]],[3009,3009],[3009,3017]]],[1561864847479,["GJX@GJXAIOU",[[-1,3009,"language"]],[3009,3017],[3009,3009]]],[1561864847854,["GJX@GJXAIOU",[[1,3010,"\n"]],[3009,3009],[3010,3010]]],[1561864849937,["GJX@GJXAIOU",[[-1,3010,"\n"],[1,3011,"c"]],[3010,3010],[3011,3011]]],[1561864850120,["GJX@GJXAIOU",[[-1,3011,"`"],[1,3012,"l"]],[3011,3011],[3012,3012]]],[1561864850328,["GJX@GJXAIOU",[[-1,3012,"`"],[1,3013,"a"]],[3012,3012],[3013,3013]]],[1561864850844,["GJX@GJXAIOU",[[-1,3013,"`"],[1,3014,"s"]],[3013,3013],[3014,3014]]],[1561864851078,["GJX@GJXAIOU",[[1,3014,"s"]],[3014,3014],[3015,3015]]],[1561864852043,["GJX@GJXAIOU",[[1,3021,"\n"]],[3015,3015],[3016,3016]]],[1561864853205,["GJX@GJXAIOU",[[-1,3016,"\n"],[1,3017,"`"]],[3016,3016],[3017,3017]]],[1561864853596,["GJX@GJXAIOU",[[1,3017,"``"]],[3017,3017],[3019,3019]]],[1561864857808,["GJX@GJXAIOU",[[1,3015," le"]],[3015,3015],[3018,3018]]],[1561864859019,["GJX@GJXAIOU",[[-1,3016,"le"]],[3018,3018],[3016,3016]]],[1561864862350,["GJX@GJXAIOU",[[1,3016,"类名<>"]],[3016,3016],[3020,3020]]],[1561864866283,["GJX@GJXAIOU",[[-1,3019,">"]],[3019,3019],[3019,3019]]],[1561864868468,["GJX@GJXAIOU",[[1,3019,">"]],[3019,3019],[3020,3020]]],[1561864874137,["GJX@GJXAIOU",[[1,3019,"z"]],[3019,3019],[3020,3020]]],[1561864874587,["GJX@GJXAIOU",[[-1,3019,"z"]],[3020,3020],[3019,3019]]],[1561864883546,["GJX@GJXAIOU",[[1,3019,"自定义泛型的占位符"]],[3019,3019],[3028,3028]]],[1561864886921,["GJX@GJXAIOU",[[1,3029," {"]],[3029,3029],[3031,3031]]],[1561864887565,["GJX@GJXAIOU",[[1,3032,"\n"]],[3031,3031],[3032,3032]]],[1561864887902,["GJX@GJXAIOU",[[1,3033,"\n"]],[3032,3032],[3033,3033]]],[1561864888781,["GJX@GJXAIOU",[[1,3033,"}"]],[3033,3033],[3034,3034]]],[1561864906498,["GJX@GJXAIOU",[[1,3032,"    //在这里所用到的泛型和用户穿件"]],[3032,3032],[3052,3052]]],[1561864907219,["GJX@GJXAIOU",[[-1,3050,"穿件"]],[3052,3052],[3050,3050]]],[1561864919665,["GJX@GJXAIOU",[[1,3050,"创建对象时候声明的是一致的；"]],[3050,3050],[3064,3064]]],[1561864923203,["GJX@GJXAIOU",[[1,3075,"\n"]],[3071,3071],[3072,3072]]],[1561864925292,["GJX@GJXAIOU",[[1,3072,"代码示例："]],[3072,3072],[3077,3077]]],[1561864925547,["GJX@GJXAIOU",[[1,3081,"\n"]],[3077,3077],[3078,3078]]],[1561864927588,["GJX@GJXAIOU",[[1,3078,"```"]],[3078,3078],[3081,3081]]],[1561864927620,["GJX@GJXAIOU",[[1,3081,"language\n```\n"]],[3081,3081],[3081,3089]]],[1561864928294,["GJX@GJXAIOU",[[-1,3081,"language"],[1,3089,"j"]],[3081,3089],[3082,3082]]],[1561864929413,["GJX@GJXAIOU",[[1,3082,"ava"]],[3082,3082],[3085,3085]]],[1561864929611,["GJX@GJXAIOU",[[1,3086,"\n"]],[3085,3085],[3086,3086]]],[1561864930107,["GJX@GJXAIOU",[[1,3087,"\n"]],[3086,3086],[3087,3087]]],[1561876269543,["GJX@GJXAIOU",[[1,3086,"package study;\n\nimport java.util.Comparator;\n\n//异常类\nclass InvalidArrayException extends Exception{\n\tpublic InvalidArrayException(String message) {\n\t\tsuper(message);\n\t}\n}\n\nclass InvalidComparatorException extends Exception{\n\tpublic \tInvalidComparatorException (String message) {\n\t\tsuper(message);\n\t}\n}\n\n\n//泛型类\nclass ArrayTools<A>{\n\t/**\n\t * 利用泛型，来满足不同数据类型的排序算法，可以在创建类对象时约束\n\t * @param array A类型，泛型的数组，可以是任意类型\n\t * @param com <? super A> 是A类型的比较器或者其父类的比较器\n\t * @throws InvalidArrayException 数组无效异常\n\t * @throws InvalidComparatorException 比较器无效异常\n\t */\n\tpublic void selectSortUsingCompare(A[ ] array , Comparator<? super A> com) //这里的?super A表示可以传入A及其父类的数据类型\n\t\tthrows InvalidArrayException,InvalidComparatorException{\n\t\t\t//参数合法性判断\n\t\tif (null == array || array.length == 0) {\n\t\t\tthrow new InvalidArrayException(\"数组无效\");\n\t\t}else if (null == com) {\n\t\t\tthrow new InvalidComparatorException(\"比较器无效\");\t\t\t\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < array.length - 1; i++) {\n\t\t\tint index = i;\n\t\t\t\n\t\t\tfor (int j = i; j < array.length; j++) {\n\t\t\t\tif (com.compare(array[index], array[j]) > 0) {\n\t\t\t\t\tindex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index != i) {\n\t\t\t\tA temp = array[index];\n\t\t\t\tarray[index] = array[i];\n\t\t\t\tarray[i] = temp;\n\t\t\t}\n\t\t}\n\t\t\n\t}\t\n\t\n\tpublic void printArray(A[]  array) {\n\t\tfor (A a : array) {\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\n\t\n\tpublic static <A> void test(A a) {  //因为静态方法比类加载早，所以如果想要使用泛型，则需要自己声明 ，类里面的泛型与之无关\n\t\tSystem.out.println(a);\n\t}\n}\n\npublic class FanXin_class {\n\tpublic static void main(String[] args) throws InvalidArrayException,InvalidComparatorException{\n\t\tInteger [] array = {1,3,4,3,6,2,8,1};\n\t\tArrayTools<Integer> tools = new ArrayTools<Integer>();\n\t\t\n\t\ttools.selectSortUsingCompare(array, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer arg0, Integer arg1) {\n\t\t\t\treturn arg0 - arg1;\n\t\t\t}\n\t\t\n\t\t});\n\t\t\n\t\ttools.printArray(array);\n\t}\n}\n"]],[3086,3086],[4932,4932]]],[1561876275104,["GJX@GJXAIOU",[[1,3072,"\n"]],[3070,3070],[3071,3071]]],[1561876275252,["GJX@GJXAIOU",[[1,3073,"\n"]],[3071,3071],[3072,3072]]],[1561876276577,["GJX@GJXAIOU",[[1,3072,"zh"]],[3072,3072],[3074,3074]]],[1561876277336,["GJX@GJXAIOU",[[-1,3072,"zh"]],[3074,3074],[3072,3072]]],[1561876284376,["GJX@GJXAIOU",[[1,3072,"注意事项："]],[3072,3072],[3077,3077]]],[1561876284728,["GJX@GJXAIOU",[[1,3079,"\n"]],[3077,3077],[3078,3078]]],[1561876403821,["GJX@GJXAIOU",[[-1,4413,"A"]],[4414,4414],[4413,4413]]],[1561876405075,["GJX@GJXAIOU",[[1,4413,"T"]],[4413,4413],[4414,4414]]],[1561876407411,["GJX@GJXAIOU",[[-1,4426,"A"]],[4427,4427],[4426,4426]]],[1561876407950,["GJX@GJXAIOU",[[1,4426,"t"]],[4426,4426],[4427,4427]]],[1561876408919,["GJX@GJXAIOU",[[-1,4426,"t"]],[4427,4427],[4426,4426]]],[1561876409455,["GJX@GJXAIOU",[[1,4426,"T"]],[4426,4426],[4427,4427]]],[1561876616320,["GJX@GJXAIOU",[[1,3078,"- yige"]],[3078,3078],[3084,3084]]],[1561876617762,["GJX@GJXAIOU",[[-1,3080,"yige"]],[3084,3084],[3080,3080]]],[1561876651119,["GJX@GJXAIOU",[[1,3080,"一个类声明的自定义泛型，如果在创建该类对象的时候，确定了泛型的具体数据类型，"]],[3080,3080],[3118,3118]]],[1561876660053,["GJX@GJXAIOU",[[1,3118,"那么整个类内所有的"]],[3118,3118],[3127,3127]]],[1561876660539,["GJX@GJXAIOU",[[-1,3126,"的"]],[3127,3127],[3126,3126]]],[1561876664925,["GJX@GJXAIOU",[[1,3126,"用到泛型"]],[3126,3126],[3130,3130]]],[1561876667807,["GJX@GJXAIOU",[[-1,3128,"泛型"]],[3130,3130],[3128,3128]]],[1561876700416,["GJX@GJXAIOU",[[1,3128,"该泛型占位符的非静态成员方法，使用的数据类型都是创建时候确定的类型；"]],[3128,3128],[3162,3162]]],[1561876701004,["GJX@GJXAIOU",[[1,3163,"- \n"]],[3162,3162],[3165,3165]]],[1561876707559,["GJX@GJXAIOU",[[1,3165,"如果创建十佳"]],[3165,3165],[3171,3171]]],[1561876708605,["GJX@GJXAIOU",[[-1,3169,"十佳"]],[3171,3171],[3169,3169]]],[1561876710454,["GJX@GJXAIOU",[[1,3169,"使用了"]],[3169,3169],[3172,3172]]],[1561876727158,["GJX@GJXAIOU",[[1,3172,"自定义泛型类对象，但是没有确定"]],[3172,3172],[3187,3187]]],[1561876859153,["GJX@GJXAIOU",[[1,3187,"泛型的具体类型，那么编译器会把这个泛型认为是Object"]],[3187,3187],[3215,3215]]],[1561876859187,["GJX@GJXAIOU",[[1,3209," "]],[3215,3215],[3216,3216]]],[1561876860543,["GJX@GJXAIOU",[[1,3216,"类型"]],[3216,3216],[3218,3218]]],[1561876860577,["GJX@GJXAIOU",[[1,3216," "]],[3218,3218],[3219,3219]]],[1561876862121,["GJX@GJXAIOU",[[1,3219,"；"]],[3219,3219],[3220,3220]]],[1561876862455,["GJX@GJXAIOU",[[1,3221,"- \n"]],[3220,3220],[3223,3223]]],[1561876866640,["GJX@GJXAIOU",[[1,3223,"类中生命的额"]],[3223,3223],[3229,3229]]],[1561876867447,["GJX@GJXAIOU",[[-1,3225,"生命的额"]],[3229,3229],[3225,3225]]],[1561876891252,["GJX@GJXAIOU",[[1,3225,"声明的自定义泛型，不能在类中的静态方法使用，如果"]],[3225,3225],[3249,3249]]],[1561876927645,["GJX@GJXAIOU",[[1,3249,"想让静态方法使用泛型，则需要自己声明、自己使用，类似于方法中使用泛型；"]],[3249,3249],[3284,3284]]],[1561876927931,["GJX@GJXAIOU",[[1,3285,"- \n"]],[3284,3284],[3287,3287]]],[1561876951151,["GJX@GJXAIOU",[[1,3287,"4.建议：如果在代码"]],[3287,3287],[3297,3297]]],[1561876980626,["GJX@GJXAIOU",[[1,3297,"中出现了多个使用不同泛型的地方，使用不同的"]],[3297,3297],[3318,3318]]],[1561876981361,["GJX@GJXAIOU",[[-1,3317,"的"]],[3318,3318],[3317,3317]]],[1561876996080,["GJX@GJXAIOU",[[1,3317,"名字的占位符，一般常用的占位符为：T和"]],[3317,3317],[3336,3336]]],[1561876996112,["GJX@GJXAIOU",[[1,3335," "]],[3336,3336],[3337,3337]]],[1561876997325,["GJX@GJXAIOU",[[1,3337,"E"]],[3337,3337],[3338,3338]]],[1561876997357,["GJX@GJXAIOU",[[1,3337," "]],[3338,3338],[3339,3339]]],[1561877021978,["GJX@GJXAIOU",[[1,3001,"和匿名内部类"]],[3001,3001],[3007,3007]]],[1561877026799,["GJX@GJXAIOU",[[1,5217,"\n"]],[5213,5213],[5214,5214]]],[1561877026919,["GJX@GJXAIOU",[[1,5218,"\n"]],[5214,5214],[5215,5215]]],[1561877033730,["GJX@GJXAIOU",[[1,5215,"### 接口中使用泛型"]],[5215,5215],[5226,5226]]],[1561877034369,["GJX@GJXAIOU",[[1,5230,"\n"]],[5226,5226],[5227,5227]]],[1561877034533,["GJX@GJXAIOU",[[1,5231,"\n"]],[5227,5227],[5228,5228]]],[1561877200700,["GJX@GJXAIOU",[[1,5228,"在接口中定义泛型：\n \t\t格式 :\n \t\t\tinterface 接口名<自定义泛型的占位符> {\n \t\t\t\t//成员变量  缺省属性：public static final 定义时必须初始化\n \t\t\t\t//成员方法  缺省属性：abstract\n \t\t\t}\n \t\t\n \t\t两种【遵从】带有自定义泛型的接口方式：\n \t\t\t1. 更加自由，需要使用的泛型类型，在创建对象时确定，类似ArrayList\n \t\t\t\n \t\t\t2. 适合原本这个类就没有使用泛型的情况，例如：一个类遵从Comparable接口\n \t\t\t事项compareTo方法，这里可以在【遵从】时，确定Comparable需要的泛型\n \t\t\t具体数据类型，减少没有必要的强制类型转换"]],[5228,5228],[5549,5549]]],[1561877256996,["GJX@GJXAIOU",[[-1,5238," \t\t"],[-1,5246," \t\t\t"],[-1,5277," \t\t\t\t"],[-1,5324," \t\t\t\t"],[-1,5351," \t\t\t"]],[5241,5356],[5241,5356]]],[1561877263138,["GJX@GJXAIOU",[[1,5243,"\n"]],[5242,5242],[5243,5243]]],[1561877264940,["GJX@GJXAIOU",[[1,5243,"···"]],[5243,5243],[5246,5246]]],[1561877266682,["GJX@GJXAIOU",[[-1,5243,"···"]],[5246,5246],[5243,5243]]],[1561877267815,["GJX@GJXAIOU",[[1,5243,"```"]],[5243,5243],[5246,5246]]],[1561877267850,["GJX@GJXAIOU",[[1,5246,"language\n```\n"]],[5246,5246],[5246,5254]]],[1561877268834,["GJX@GJXAIOU",[[-1,5246,"language"],[1,5254,"j"]],[5246,5254],[5247,5247]]],[1561877270314,["GJX@GJXAIOU",[[1,5247,"aa"]],[5247,5247],[5249,5249]]],[1561877271073,["GJX@GJXAIOU",[[-1,5248,"a"]],[5249,5249],[5248,5248]]],[1561877274403,["GJX@GJXAIOU",[[1,5248,"va"]],[5248,5248],[5250,5250]]],[1561877274808,["GJX@GJXAIOU",[[1,5251,"\n"]],[5250,5250],[5251,5251]]],[1561877279796,["GJX@GJXAIOU",[[1,5251,"interface 接口名<自定义泛型的占位符> {\n//成员变量  缺省属性：public static final 定义时必须初始化\n//成员方法  缺省属性：abstract\n}"]],[5251,5251],[5343,5343]]],[1561877281480,["GJX@GJXAIOU",[[1,5278,"  "]],[5278,5278],[5280,5280]]],[1561877283100,["GJX@GJXAIOU",[[1,5322,"  "]],[5322,5322],[5324,5324]]],[1561877290299,["GJX@GJXAIOU",[[-1,5353,"interface 接口名<自定义泛型的占位符> {\n//成员变量  缺省属性：public static final 定义时必须初始化\n//成员方法  缺省属性：abstract\n}"]],[5353,5445],[5353,5353]]],[1561877293407,["GJX@GJXAIOU",[[-1,5354," \t\t"]],[5357,5357],[5354,5354]]],[1561877293844,["GJX@GJXAIOU",[[-1,5354,"\n"]],[5354,5354],[5353,5353]]],[1561877296610,["GJX@GJXAIOU",[[-1,5354," \t\t"]],[5354,5357],[5354,5354]]],[1561877302103,["GJX@GJXAIOU",[[-1,5374," \t\t\t"],[-1,5417," \t\t\t"],[-1,5422," \t\t\t"]],[5378,5455],[5378,5455]]],[1561877307219,["GJX@GJXAIOU",[[-1,5456," \t\t\t"]],[5460,5460],[5456,5456]]],[1561877307640,["GJX@GJXAIOU",[[-1,5455,"\n"]],[5456,5456],[5455,5455]]],[1561877309385,["GJX@GJXAIOU",[[-1,5498," \t\t\t"]],[5502,5502],[5498,5498]]],[1561877309784,["GJX@GJXAIOU",[[-1,5497,"\n"]],[5498,5498],[5497,5497]]],[1561877312372,["GJX@GJXAIOU",[[-1,5413,"\n"]],[5413,5413],[5412,5412]]],[1561877400040,["GJX@GJXAIOU",[[1,5520,"\n"]],[5517,5517],[5518,5518]]],[1561877401058,["GJX@GJXAIOU",[[1,5518,"daia"]],[5518,5518],[5522,5522]]],[1561877402276,["GJX@GJXAIOU",[[-1,5518,"daia"]],[5522,5522],[5518,5518]]],[1561877407143,["GJX@GJXAIOU",[[1,5518,"代码示例："]],[5518,5518],[5523,5523]]],[1561877407790,["GJX@GJXAIOU",[[1,5526,"\n"]],[5523,5523],[5524,5524]]],[1561877408949,["GJX@GJXAIOU",[[1,5524,"```"]],[5524,5524],[5527,5527]]],[1561877408983,["GJX@GJXAIOU",[[1,5527,"language\n```\n"]],[5527,5527],[5527,5535]]],[1561877410140,["GJX@GJXAIOU",[[-1,5527,"language"],[1,5535,"m"]],[5527,5535],[5528,5528]]],[1561877410674,["GJX@GJXAIOU",[[-1,5527,"m"]],[5528,5528],[5527,5527]]],[1561877411831,["GJX@GJXAIOU",[[1,5527,"java"]],[5527,5527],[5531,5531]]],[1561877411961,["GJX@GJXAIOU",[[1,5532,"\n"]],[5531,5531],[5532,5532]]],[1561877413043,["GJX@GJXAIOU",[[1,5532,"interface A<T> {\n\tpublic void testA(T t); //这个方法中使用了定义接口时声明的自定义泛型\n}\n\n//PlanA\n//一个类【遵从】接口，而且类中声明的自定义泛型和接口泛型一致，没有确定泛型的具体类型，由调用者来确定\nclass TestClass1<T> implements A<T> {\n\n\t@Override\n\tpublic void testA(T t) {\n\t\tSystem.out.println(t.getClass() + \"类型！！！\");\n\t}\t\n}\n\n//PlanB\n//一个类【遵从】接口，但是接口的泛型已经被确定的数据类型替代\nclass TestClass2 implements A<String> {\n\n\t@Override\n\tpublic void testA(String t) {\n\t\tSystem.out.println(\"String类型的方法\");\n\t}\n\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tTestClass1<Integer> test = new TestClass1<Integer>();\n\t\t\n\t\ttest.testA(5);\n\t\t\n\t\tTestClass2 test2 = new TestClass2();\n\t\t\n\t\ttest2.testA(\"233333\");\n\t}\n}\n\n"]],[5532,5532],[6173,6173]]],[1561877543683,["GJX@GJXAIOU",[[-1,5454,"事项"]],[5456,5456],[5454,5454]]],[1561877545241,["GJX@GJXAIOU",[[1,5454,"s"]],[5454,5454],[5455,5455]]],[1561877545275,["GJX@GJXAIOU",[[1,5454," "]],[5455,5455],[5456,5456]]],[1561877545828,["GJX@GJXAIOU",[[1,5456,"hixian"]],[5456,5456],[5462,5462]]],[1561877547901,["GJX@GJXAIOU",[[-1,5455,"shixian"]],[5462,5462],[5455,5455]]],[1561877549875,["GJX@GJXAIOU",[[1,5455,"实现 "]],[5455,5455],[5457,5457]]],[1561877610677,["GJX@GJXAIOU",[[1,6181,"### 泛型的上下限"]],[6181,6181],[6191,6191]]],[1561877612252,["GJX@GJXAIOU",[[1,6193,"\n"]],[6191,6191],[6192,6192]]],[1561877731953,["GJX@GJXAIOU",[[1,6194,"\n"]],[6192,6192],[6193,6193]]],[1561877733172,["GJX@GJXAIOU",[[1,6193,"泛型的上下限\n\t<? super T>\n\t<? extends T>\n\t\n\tT 泛型的占位符\n\t? 通配符（表示一个字符）\n\tsuper: 调用父类方法的关键字\n\textends: 继承的关键字\n\t\n需求：定义一个函数接受任意类型数值的集合，但是这个数据必须是数值类型\n\t\t数值类型：Number 已知子类：Integer Short Long Double Float (包装类)\n\t\t\n\t\t要求传入的对象是Number类对象或者其子类对象\n\t\t\tInteger extends Number;\n\t\t\tFloat extends Number;\n\t\t\tDouble extends Number;\n\t\t\t\n\t\t\t? extends Number;\n\t\t\t这就是泛型的上限：\n\t\t\t<? extends E>\n\t\t\t\n需求：定义一个函数能够传入一个任意类型的集合，但是要求集合里面保存的数据必须是Number类对象，或者其\n\t父类对象\n\t\t<? super E>\n\t\t泛型的下限\n\t\t<? super Number>\n\t\t\t能够保存的数据是Number类对象本身或者其父类对象\n  "]],[6193,6193],[6684,6684]]],[1561877752223,["GJX@GJXAIOU",[[1,6193,"- "]],[6193,6193],[6195,6195]]],[1561877756547,["GJX@GJXAIOU",[[1,6295,"- "]],[6295,6295],[6297,6297]]],[1561877766239,["GJX@GJXAIOU",[[1,6556,"- "]],[6556,6556],[6558,6558]]],[1561877808051,["GJX@GJXAIOU",[[1,6445," 、、"]],[6445,6445],[6448,6448]]],[1561877808807,["GJX@GJXAIOU",[[-1,6446,"、、"]],[6448,6448],[6446,6446]]],[1561877815551,["GJX@GJXAIOU",[[1,6446,"//Integer是"]],[6446,6446],[6456,6456]]],[1561877815589,["GJX@GJXAIOU",[[1,6455," "]],[6456,6456],[6457,6457]]],[1561877821373,["GJX@GJXAIOU",[[1,6457,"自Number"]],[6457,6457],[6464,6464]]],[1561877823122,["GJX@GJXAIOU",[[-1,6456,"是自Number"]],[6464,6464],[6456,6456]]],[1561877826160,["GJX@GJXAIOU",[[1,6456,"是N"]],[6456,6456],[6458,6458]]],[1561877826195,["GJX@GJXAIOU",[[1,6457," "]],[6458,6458],[6459,6459]]],[1561877830098,["GJX@GJXAIOU",[[1,6459,"umber的"]],[6459,6459],[6465,6465]]],[1561877830130,["GJX@GJXAIOU",[[1,6464," "]],[6465,6465],[6466,6466]]],[1561877830975,["GJX@GJXAIOU",[[1,6466,"子类"]],[6466,6466],[6468,6468]]],[1561877835880,["GJX@GJXAIOU",[[-1,6545,"\t\t\t"]],[6548,6548],[6545,6545]]],[1561877836232,["GJX@GJXAIOU",[[-1,6544,"\n"]],[6545,6545],[6544,6544]]],[1561877838246,["GJX@GJXAIOU",[[1,6544,"、、"]],[6544,6544],[6546,6546]]],[1561877839583,["GJX@GJXAIOU",[[-1,6544,"、、"]],[6546,6546],[6544,6544]]],[1561877840389,["GJX@GJXAIOU",[[1,6544,"///"]],[6544,6544],[6547,6547]]],[1561877841495,["GJX@GJXAIOU",[[-1,6546,"/"]],[6547,6547],[6546,6546]]],[1561877850058,["GJX@GJXAIOU",[[1,6572," //通用类型"]],[6572,6572],[6579,6579]]],[1561877876380,["GJX@GJXAIOU",[[-1,6333,"\t"],[-1,6390,"\t"],[-1,6392,"\t"],[-1,6421,"\t"],[-1,6469,"\t"],[-1,6496,"\t"],[-1,6522,"\t"],[-1,6524,"\t"],[-1,6556,"\t"]],[6334,6579],[6333,6570]]],[1561877902994,["GJX@GJXAIOU",[[-1,6518,"\t"],[-1,6548,"\t"]],[6519,6570],[6518,6568]]],[1561877989320,["GJX@GJXAIOU",[[-1,6708,"\n"],[1,6709,"`"]],[6708,6708],[6709,6709]]],[1561877989704,["GJX@GJXAIOU",[[1,6709,"``"]],[6709,6709],[6711,6711]]],[1561877989742,["GJX@GJXAIOU",[[1,6711,"language\n```\n"]],[6711,6711],[6711,6719]]],[1561877990827,["GJX@GJXAIOU",[[-1,6711,"language"],[1,6719,"j"]],[6711,6719],[6712,6712]]],[1561877991318,["GJX@GJXAIOU",[[1,6712,"ava"]],[6712,6712],[6715,6715]]],[1561877991382,["GJX@GJXAIOU",[[1,6716,"\n"]],[6715,6715],[6716,6716]]],[1561877992840,["GJX@GJXAIOU",[[1,6716,"public class Demo6 {\n\tpublic static void main(String[] args) {\n\t\tArrayList<Number> list1 = new ArrayList<Number>();\n\t\tArrayList<Double> list2 = new ArrayList<Double>();\n\t\tArrayList<String> list3 = new ArrayList<String>();\n\t\tArrayList<Object> list4 = new ArrayList<Object>();\n\t\t\n\t\t//传入的实际参数是一个ArrayList对象，里面保存的数据是Number类型\n\t\ttest1(list1);\n\t\ttest1(list2);\n\t\t//test1(list3); 不行，因为ArrayList<String> 里面保存的String类型不是Number的子类\n\t\t\n\t\ttest2(list1);\n\t\ttest2(list4);\n\t}\n\t\n\t/**\n\t * \n\t * @param c Collection<? extends Number> 要求传入的是一个Collection集合接口的实现类\n\t * 而且要求该实现类里面保存的数据是Number类对象本身或者其子类对象\n\t */\n\tpublic static void test1(Collection<? extends Number> c) {\n\t\tSystem.out.println(c.toString());\n\t}\n\t\n\tpublic static void test2(Collection<? super Number> c) {\n\t\tSystem.out.println(\"泛型的下限！！！\");\n\t}\n}"]],[6716,6716],[7495,7495]]],[1561877995839,["GJX@GJXAIOU",[[1,6716,"\n"]],[6715,6715],[6716,6716]]],[1561878016142,["GJX@GJXAIOU",[[1,6716,"package com.qfedu.a_generticity;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n"]],[6716,6716],[6807,6807]]],[1561878059657,["GJX@GJXAIOU",[[-1,6648,"\t\t"]],[6650,6650],[6648,6648]]],[1561878059996,["GJX@GJXAIOU",[[-1,6647,"\n"]],[6648,6648],[6647,6647]]],[1561878062877,["GJX@GJXAIOU",[[-1,6628,"\t"]],[6629,6629],[6628,6628]]],[1561878063125,["GJX@GJXAIOU",[[-1,6627,"\n"]],[6628,6628],[6627,6627]]],[1561878070444,["GJX@GJXAIOU",[[1,6653,"liru"]],[6653,6653],[6657,6657]]],[1561878073136,["GJX@GJXAIOU",[[-1,6653,"liru"]],[6657,6657],[6653,6653]]],[1561878075010,["GJX@GJXAIOU",[[1,6653,"例如："]],[6653,6653],[6656,6656]]],[1561878101091,["GJX@GJXAIOU",[[1,7590,"\n"]],[7589,7589],[7590,7590]]],[1561878101231,["GJX@GJXAIOU",[[1,7591,"\n"]],[7590,7590],[7591,7591]]],[1561878625137,["GJX@GJXAIOU",[[1,7592,"\n"]],[7590,7590],[7591,7591]]],[1561878625283,["GJX@GJXAIOU",[[1,7593,"\n"]],[7591,7591],[7592,7592]]],[1561878625414,["GJX@GJXAIOU",[[1,7594,"\n"]],[7592,7592],[7593,7593]]],[1561878627183,["GJX@GJXAIOU",[[1,7593,"@"]],[7593,7593],[7594,7594]]],[1561878628387,["GJX@GJXAIOU",[[-1,7593,"@"]],[7594,7594],[7593,7593]]],[1561878629445,["GJX@GJXAIOU",[[1,7593,"## "]],[7593,7593],[7596,7596]]],[1561878632295,["GJX@GJXAIOU",[[1,7596,"Map"]],[7596,7596],[7599,7599]]],[1561878632987,["GJX@GJXAIOU",[[1,7601,"\n"]],[7599,7599],[7600,7600]]],[1561878633129,["GJX@GJXAIOU",[[1,7602,"\n"]],[7600,7600],[7601,7601]]],[1561878634313,["GJX@GJXAIOU",[[1,7601,"  ---| Collection\n  ------| List\n  ----------| ArrayList      查询快 增删慢\n  ----------| LinkedList    查询慢，增删快\n  ----------| Vector         线程安全的ArrayList\n  ------| Set\n  ----------| HashSet       掌握它的存储原理\n  ----------| TreeSet\n  \t----|比较器：\n  \t\tComparable接口 实现compareTo方法\n  \t\tComparator接口 实现compare方法\n  \t\t\t\t\t\n生活中有关联，有关系的数据更多一点。例如：账号  密码；钥匙  锁\n\t\t\n  \t\t---| Map<K, V> 双列集合，这是一个接口\n  \t\t------| HashMap 实现类\n  \t\t------| TreeMap \n  \t\t\n  \t\tK：Key 键 !!! 唯一值!!! 不允许重复!!!\n  \t\tV：Value 值 一个键(Key)对应一个值(Value) 可以重复的\n  \t\t\n  \t\t在Map<K, V> 双列集合中，保存的只能是一个键(Key)值(Value)对！！！\n  \t\t\n  \t\t\n  \t\tMap中要学习的方法：\n  \t\t\t增\n  \t\t\t\tput(K key, V value); 添加一个键(Key)值(Value)对\n  \t\t\t\tputAll(Map<? extends K, ? extends V> map);\n  \t\t\t\t添加一个符合数据类型的Map双列集合\n  \t\t\t删\n  \t\t\t\tclear(); 清空所有的键(Key)值(Value)对\n  \t\t\t\tremove(Object key); 根据Key删除对应的键(Key)值(Value)对\n  \t\t\t改\n  \t\t\t\tput(K key, V value); 当键(Key)存在时，这个操作是重新修改值(Value)\n  \t\t\t查\t \n  \t\t\t\tsize(); 获取键值对个数\n  \t\t\t\tget(Object key); 通过键(Key)找出对应的值(Value)\n  \t\t\t\tcontainsKey(Object key); 查看这个Key是否在Map中存在\n  \t\t\t\tcontainsValue(Object value); 查看这个Value是否在Map存在\n  \t\t\t\t\n  \t\t\t\tkeySet(); 返回所有键(Key)Set集合\n  \t\t\t\tvalues(); 返回所有值(Value)Collection集合\n "]],[7601,7601],[8719,8719]]],[1561878642133,["GJX@GJXAIOU",[[1,7600,"- 回顾："]],[7600,7600],[7605,7605]]],[1561878651264,["GJX@GJXAIOU",[[-1,7947,"  "],[-1,7978,"  "],[-1,8002,"  "],[-1,8023,"  "],[-1,8028,"  "],[-1,8060,"  "],[-1,8101,"  "],[-1,8106,"  "],[-1,8154,"  "],[-1,8159,"  "],[-1,8164,"  "],[-1,8180,"  "],[-1,8187,"  "],[-1,8234,"  "],[-1,8283,"  "],[-1,8308,"  "],[-1,8315,"  "],[-1,8351,"  "],[-1,8403,"  "],[-1,8410,"  "],[-1,8466,"  "],[-1,8475,"  "],[-1,8497,"  "],[-1,8542,"  "],[-1,8590,"  "],[-1,8643,"  "],[-1,8650,"  "],[-1,8682,"  "]],[7951,8722],[7949,8666]]],[1561878652109,["GJX@GJXAIOU",[[-1,7948,"\t"],[-1,7976,"\t"],[-1,7999,"\t"],[-1,8017,"\t"],[-1,8021,"\t"],[-1,8050,"\t"],[-1,8089,"\t"],[-1,8093,"\t"],[-1,8139,"\t"],[-1,8141,"\t"],[-1,8144,"\t"],[-1,8160,"\t"],[-1,8163,"\t"],[-1,8208,"\t"],[-1,8258,"\t"],[-1,8280,"\t"],[-1,8283,"\t"],[-1,8317,"\t"],[-1,8369,"\t"],[-1,8372,"\t"],[-1,8426,"\t"],[-1,8436,"\t"],[-1,8453,"\t"],[-1,8499,"\t"],[-1,8542,"\t"],[-1,8596,"\t"],[-1,8598,"\t"],[-1,8628,"\t"]],[7949,8666],[7948,8638]]],[1561878652694,["GJX@GJXAIOU",[[-1,7947,"\t"],[-1,7975,"\t"],[-1,7996,"\t"],[-1,8014,"\t"],[-1,8016,"\t"],[-1,8045,"\t"],[-1,8083,"\t"],[-1,8085,"\t"],[-1,8130,"\t"],[-1,8132,"\t"],[-1,8134,"\t"],[-1,8148,"\t"],[-1,8151,"\t"],[-1,8195,"\t"],[-1,8243,"\t"],[-1,8264,"\t"],[-1,8267,"\t"],[-1,8300,"\t"],[-1,8350,"\t"],[-1,8353,"\t"],[-1,8406,"\t"],[-1,8414,"\t"],[-1,8431,"\t"],[-1,8475,"\t"],[-1,8518,"\t"],[-1,8570,"\t"],[-1,8572,"\t"],[-1,8601,"\t"]],[7948,8638],[7947,8610]]],[1561878657377,["GJX@GJXAIOU",[[-1,7944,"\t\t"],[1,7946,"\n"]],[7945,7945],[7945,7945]]],[1561878657642,["GJX@GJXAIOU",[[1,7946,"\n"]],[7945,7945],[7946,7946]]],[1561878664953,["GJX@GJXAIOU",[[1,7946,"### Map"]],[7946,7946],[7953,7953]]],[1561878677439,["GJX@GJXAIOU",[[1,7954,"\n"]],[7953,7953],[7954,7954]]],[1561878858351,["GJX@GJXAIOU",[[1,8145,"- "]],[8145,8145],[8147,8147]]],[1561878860698,["GJX@GJXAIOU",[[-1,8144,"\t"]],[8144,8145],[8144,8144]]],[1561878863126,["GJX@GJXAIOU",[[-1,8257,"\t"]],[8257,8258],[8257,8257]]],[1561878864362,["GJX@GJXAIOU",[[1,8257,"- "]],[8257,8257],[8259,8259]]],[1561878866127,["GJX@GJXAIOU",[[-1,8341,"\t"]],[8341,8342],[8341,8341]]],[1561878866924,["GJX@GJXAIOU",[[1,8341,"- "]],[8341,8341],[8343,8343]]],[1561878869138,["GJX@GJXAIOU",[[-1,8397,"\t"]],[8397,8398],[8397,8397]]],[1561878870042,["GJX@GJXAIOU",[[1,8397,"- "]],[8397,8397],[8399,8399]]],[1561878878700,["GJX@GJXAIOU",[[-1,8148,"\t\t"],[1,8150,"- "],[-1,8191,"\t\t"],[1,8193,"- "],[-1,8236,"\t\t"],[1,8238,"- "]],[8150,8256],[8150,8256]]],[1561878880260,["GJX@GJXAIOU",[[1,8148,"  "],[1,8191,"  "],[1,8236,"  "]],[8150,8256],[8152,8262]]],[1561878906921,["GJX@GJXAIOU",[[-1,8267,"\t\t"],[1,8269,"- "],[-1,8299,"\t\t"],[1,8301,"- "]],[8269,8346],[8269,8346]]],[1561878909980,["GJX@GJXAIOU",[[1,8267,"  "],[1,8299,"  "]],[8269,8346],[8271,8350]]],[1561878914682,["GJX@GJXAIOU",[[1,8357,"- "]],[8357,8357],[8359,8359]]],[1561878917467,["GJX@GJXAIOU",[[-1,8355,"\t\t"]],[8357,8357],[8355,8355]]],[1561878918687,["GJX@GJXAIOU",[[1,8355,"  "]],[8355,8355],[8357,8357]]],[1561878962668,["GJX@GJXAIOU",[[-1,8415,"\t\t"],[1,8417,"- "],[-1,8433,"\t\t"],[1,8435,"- "],[-1,8474,"\t\t"],[1,8476,"- "],[-1,8518,"\t\t"],[1,8520,"- "],[-1,8567,"\t\t\n\t\t"],[1,8572,"- \n- "],[-1,8598,"\t\t"],[1,8600,"- "]],[8417,8634],[8417,8634]]],[1561878964201,["GJX@GJXAIOU",[[1,8415,"  "],[1,8433,"  "],[1,8474,"  "],[1,8518,"  "],[1,8567,"  "],[1,8570,"  "],[1,8598,"  "]],[8417,8634],[8419,8648]]],[1561878966615,["GJX@GJXAIOU",[[-1,8575,"  - "]],[8575,8579],[8575,8575]]],[1561879002825,["GJX@GJXAIOU",[[1,8173,"   "]],[8172,8172],[8175,8175]]],[1561879009518,["GJX@GJXAIOU",[[-1,8243,"  - "]],[8243,8247],[8243,8243]]],[1561879009935,["GJX@GJXAIOU",[[-1,8242,"\n"]],[8243,8243],[8242,8242]]],[1561879011187,["GJX@GJXAIOU",[[1,8242," "]],[8242,8242],[8243,8243]]],[1561879013579,["GJX@GJXAIOU",[[-1,8242," "]],[8243,8243],[8242,8242]]],[1561879572016,["GJX@GJXAIOU",[[-1,8645,"\n"],[1,8646,"代码"]],[8645,8645],[8647,8647]]],[1561879573164,["GJX@GJXAIOU",[[1,8647,"示例："]],[8647,8647],[8650,8650]]],[1561879574192,["GJX@GJXAIOU",[[1,8650,"\n\n"]],[8650,8650],[8651,8651]]],[1561879575065,["GJX@GJXAIOU",[[-1,8651,"\n"],[1,8652,"`"]],[8651,8651],[8652,8652]]],[1561879575428,["GJX@GJXAIOU",[[1,8652,"``"]],[8652,8652],[8654,8654]]],[1561879575467,["GJX@GJXAIOU",[[1,8654,"language\n```\n"]],[8654,8654],[8654,8662]]],[1561879576367,["GJX@GJXAIOU",[[-1,8654,"language"],[1,8662,"j"]],[8654,8662],[8655,8655]]],[1561879576957,["GJX@GJXAIOU",[[1,8655,"ava"]],[8655,8655],[8658,8658]]],[1561879577025,["GJX@GJXAIOU",[[1,8659,"\n"]],[8658,8658],[8659,8659]]],[1561879578278,["GJX@GJXAIOU",[[1,8659,"public class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\t\n\t\t//使用put(K k, V v)添加元素\n\t\tmap.put(\"薛之谦\", \"高磊鑫\");\n\t\tmap.put(\"鹿晗\", \"关晓彤\");\n\t\tmap.put(\"宋仲基\", \"宋慧乔\");\n\t\tmap.put(\"余文乐\", \"王棠云\");\n\t\tmap.put(\"王宝强\", \"马蓉\");\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\tMap<String, String> map2 = new HashMap<String, String>();\n\t\t\n\t\tmap2.put(\"科比\", \"瓦妮莎\");\n\t\tmap2.put(\"TT\", \"卡戴珊\");\n\t\t\n\t\t//添加另一个Map\n\t\tmap.putAll(map2);\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\t//清空当前Map双列集合\n\t\tmap2.clear();\n\t\tSystem.out.println(map2.isEmpty());\n\t\t\n\t\t//根据Key删除对应的键值对\n\t\tmap.remove(\"TT\");\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\t//当Key存在时，这个操作修改对应Value\n\t\tmap.put(\"王宝强\", null);\n\t\tSystem.out.println(map);\n\t\t\n\t\t\n\t\tSystem.out.println(map.size());\n\t\t\n\t\tSystem.out.println(map.containsKey(\"谢霆锋\"));\n\t\tSystem.out.println(map.containsKey(\"薛之谦\"));\n\t\t\n\t\tSystem.out.println(map.containsValue(\"高磊鑫\"));\n\t\tSystem.out.println(map.containsValue(\"王菲\"));\n\t\t\n\t\tSystem.out.println(map.get(\"科比\"));\n\t\tSystem.out.println(map.get(\"TT\"));\n\t\t\n\t\tSet<String> set = map.keySet();\n\t\tfor (String string : set) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\tSystem.out.println(\"-------------------------------\");\n\t\tCollection<String> c = map.values();\n\t\tfor (String string : c) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\n\t}\n}"]],[8659,8659],[9944,9944]]],[1561879580099,["GJX@GJXAIOU",[[1,8659,"\n"]],[8658,8658],[8659,8659]]],[1561879590927,["GJX@GJXAIOU",[[1,8659,"package com.qfedu.b_map;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;"]],[8659,8659],[8783,8783]]],[1561879593219,["GJX@GJXAIOU",[[1,8784,"\n"]],[8783,8783],[8784,8784]]],[1561879594325,["GJX@GJXAIOU",[[1,8785,"\n"]],[8784,8784],[8785,8785]]]],null,"GJX@GJXAIOU"],["edb340e0-c2fb-45d6-82d1-8c38065480e4",1563438293481,"## 复习\n### 1.ArrayList\n   \n ArrayList底层维护的是一个Object类型的数组，使用无参构造方法，创建一个ArrayList集合对象.默认的元素个数为10\n- 特征：\n   -  查询快，增删慢        \n   - 查询快：\n            使用的是数组的下标访问方式，可以直达目标位置        \n   - 增删慢：\n      -  增加: 有可能会触发数组的扩容机制，会创建一个新的数组，新的数组元素个数大约是原数组的1.5倍。然后会有一个数组拷贝的过程，这个过程是将原数组里面的每一个元素挨个复制到新数组中，这个操作消耗大量的时间和空间;\n      - 增加的原理是：`newCapacity = oldCapacity + (oldCapacity >> 1); `          \n      - 删除:  是从Object数组中删除是一个元素，删除之后，后面元素会向前移动，移动的过程是一个复制的过程，这个操作，比较浪费时间;\n        \n####  Vector 线程安全，效率较低的ArrayList JDK1.0         \n\n### 2.LinkedList:\n  底层维护的是一个链表 《数据结构》\n  增删快，查找慢\n        \n    \n###   3.HashSet\n \n底层维护的是一个哈希表，存储效率极高\n        \n- 存储原理：\n    调用存入对象的hashCode方法，获取到该对象的hashCode的值，通过【移位 计算】,计算该对象应该放到哈希表的哪一个位置       \n  - 情况1:\n            该位置没有任何元素，直接添加\n        \n  - 情况2：\n            该位置存在其他元素，这时候会调用对象的equals方法，和在该位置保存的其他\n            元素进行一一比较，如果所有的比较结果都为false，表示不相同，可以添加\n            如果出现任何一个true，表示和该位置其他的元素相同，不能添加\n    \n###   4.TreeSet\n存入TreeSet的元素必须有自然顺序或者是存在比较方式\n\n自定义类对象，想要放入到TreeSet集合中，有两种方式：\n1. 该自定义类【遵从】Comparable接口，实现compareTo(Object o) 方法\n2. 给TreeSet提供自定义比较器，创建自定义比较器需要【遵从】Comparator接口实现compare(Object o1, Object o2);\n\n\n## 泛型\n\n### 引言\n【问题】：\n- 在 ArrayList 中可以放入任意类型的数据，但实际操作中数据类型不一致会导致更多的错误；\n- 就算明知取出的数据时 string 类型，但是还是得通过强制类型转换才能得到 string 类型数据；\n```java\nArrayList list = new ArrayList();\nlist.add(new Demo1); //Demo1为该类名称\nlist.add(\"hello\");\nString str = (String)(list.get(1)); //必须通过强转才能获得 \n```\n\n【期望】：\n集合中的数据类型能够统一，即涉及到数据类型一致化问题；\n【解决方式】：\n泛型（JDK1.5 之后）\n\n### 使用\n泛型作用：\n- 解决集合中数据类型不一致的问题，要求保存什么数据，只能保存什么数据，否则报错，即将异常提前；\n- 从集合中取数据，保存的是什么数据，取出也是什么数据，不需要强制类型转换\n\n标准格式：\n`ArrayList<String> arrayList = new ArrayList<String>();`\n代码示例：\n```java\npackage study;\nimport java.util.ArrayList;\n\npublic class FanXin_Use {\n\tpublic static void main(String[] args) {\n\t\t//这里<String>即为泛型，要求这个ArrayList集合中有且只能保存String类型的数据\n\t\tArrayList<String> arrayList = new ArrayList<String>();\n\t\t\n\t\tarrayList.add(\"hello\");\n\t\tarrayList.add(\"world\");\n\t\t//无法保存其他数据类型\n\t\t//arrayList.add(1);\n\t\t\n\t\tString string = arrayList.get(1);\n\t\tSystem.out.println(string);\n\t}\n}\n\n```\n\n### 泛型在函数中的使用\n【需求】\n定义一个方法，可以接受任意数据类型，而且要求返回的数据类型，就是你传入的数据类型；例如：传入 String 类型，返回 string 类型，传入 Demo1 类型，返回 Demo1 类型；\n\n泛型的使用需要：\n  占位符，即一个大写字母，只是一个占位符，没有实际含义，不同地方定义的占位符没有联系；\n\n泛型在函数中使用的格式：\n```\n修饰符 <声明的自定义泛型占位符> 返回值类型(可以使用自定义泛型) 函数名(形式参数列表（可以使用泛型）){\n    函数体（函数体中，所有使用到自定义泛型的地方，数据类型都被传入数据类型替换）\n}\n```\n\n代码示例：\n```java\npackage study;\n\npublic class FanXin_Fun {\n\tpublic static void main(String[] args) {\n\t\tString string = getType(\"hello\"); //这里传入的“hello”是字符串类型，因此调用的时候，所有的E相当于就是字符串类型；\n\t\tFanXin_Fun fanXin_Fun = getType(new FanXin_Fun());\n\t\tint num = getType(5);\n\t}\n\t//<E>是自定义泛型的占位符，表示在该函数中可以使用占位符E，而E的具体数据类型由传入的参数控制，这样的操作可以让函数多元化，更加简单；\n\tpublic static <E> E getType(E e) {\n\t\treturn e;\n\t}\n}\n```\n上面代码中 num 是 Integer 类型，是一个包装类\n\n**包装类：**\nJava 是完全面向对象的语言，在 Java 中万物皆对象，如果是要保存类对象，那么八大基本数据类型就无法使用，所以，Java 提供了一个包装机制，包装基本数据类型，让其变成类对象；称为自动封箱；\n基本数据类型 | 封装之后\n---| ---\nshort|Short\nint|Integer\nbyte|Byte\nlong|Long\ndouble|Double\nfloat|Float\nboolean|Boolean\nchar|Character\n如果使用包装类直接赋值给普通的基本数据类型，该操作称为 拆箱；\n\n\n### 在类内使用泛型和匿名内部类\n格式：\n```\nclass 类名<自定义泛型的占位符> {\n    //在这里所用到的泛型和用户创建对象时候声明的是一致的；\n}\n```\n\n注意事项：\n- 一个类声明的自定义泛型，如果在创建该类对象的时候，确定了泛型的具体数据类型，那么整个类内所有用到该泛型占位符的非静态成员方法，使用的数据类型都是创建时候确定的类型；\n- 如果创建使用了自定义泛型类对象，但是没有确定泛型的具体类型，那么编译器会把这个泛型认为是 Object 类型；\n- 类中声明的自定义泛型，不能在类中的静态方法使用，如果想让静态方法使用泛型，则需要自己声明、自己使用，类似于方法中使用泛型；\n- 4.建议：如果在代码中出现了多个使用不同泛型的地方，使用不同名字的占位符，一般常用的占位符为：T 和 E\n\n代码示例：\n```java\npackage study;\n\nimport java.util.Comparator;\n\n//异常类\nclass InvalidArrayException extends Exception{\n\tpublic InvalidArrayException(String message) {\n\t\tsuper(message);\n\t}\n}\n\nclass InvalidComparatorException extends Exception{\n\tpublic \tInvalidComparatorException (String message) {\n\t\tsuper(message);\n\t}\n}\n\n\n//泛型类\nclass ArrayTools<A>{\n\t/**\n\t * 利用泛型，来满足不同数据类型的排序算法，可以在创建类对象时约束\n\t * @param array A类型，泛型的数组，可以是任意类型\n\t * @param com <? super A> 是A类型的比较器或者其父类的比较器\n\t * @throws InvalidArrayException 数组无效异常\n\t * @throws InvalidComparatorException 比较器无效异常\n\t */\n\tpublic void selectSortUsingCompare(A[ ] array , Comparator<? super A> com) //这里的?super A表示可以传入A及其父类的数据类型\n\t\tthrows InvalidArrayException,InvalidComparatorException{\n\t\t\t//参数合法性判断\n\t\tif (null == array || array.length == 0) {\n\t\t\tthrow new InvalidArrayException(\"数组无效\");\n\t\t}else if (null == com) {\n\t\t\tthrow new InvalidComparatorException(\"比较器无效\");\t\t\t\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < array.length - 1; i++) {\n\t\t\tint index = i;\n\t\t\t\n\t\t\tfor (int j = i; j < array.length; j++) {\n\t\t\t\tif (com.compare(array[index], array[j]) > 0) {\n\t\t\t\t\tindex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index != i) {\n\t\t\t\tA temp = array[index];\n\t\t\t\tarray[index] = array[i];\n\t\t\t\tarray[i] = temp;\n\t\t\t}\n\t\t}\n\t\t\n\t}\t\n\t\n\tpublic void printArray(A[]  array) {\n\t\tfor (A a : array) {\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\n\t\n\tpublic static <T> void test(T a) {  //因为静态方法比类加载早，所以如果想要使用泛型，则需要自己声明 ，类里面的泛型与之无关\n\t\tSystem.out.println(a);\n\t}\n}\n\npublic class FanXin_class {\n\tpublic static void main(String[] args) throws InvalidArrayException,InvalidComparatorException{\n\t\tInteger [] array = {1,3,4,3,6,2,8,1};\n\t\tArrayTools<Integer> tools = new ArrayTools<Integer>();\n\t\t\n\t\ttools.selectSortUsingCompare(array, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer arg0, Integer arg1) {\n\t\t\t\treturn arg0 - arg1;\n\t\t\t}\n\t\t\n\t\t});\n\t\t\n\t\ttools.printArray(array);\n\t}\n}\n\n\n```\n\n\n### 接口中使用泛型\n\n在接口中定义泛型：\n格式 :\n```java\ninterface 接口名<自定义泛型的占位符> {\n  //成员变量  缺省属性：public static final 定义时必须初始化\n  //成员方法  缺省属性：abstract\n}\n```\n\n\n两种【遵从】带有自定义泛型的接口方式：\n1. 更加自由，需要使用的泛型类型，在创建对象时确定，类似ArrayList\n2. 适合原本这个类就没有使用泛型的情况，例如：一个类遵从Comparable接口 实现 compareTo方法，这里可以在【遵从】时，确定Comparable需要的泛型具体数据类型，减少没有必要的强制类型转换\n\n代码示例：\n```java\ninterface A<T> {\n\tpublic void testA(T t); //这个方法中使用了定义接口时声明的自定义泛型\n}\n\n//PlanA\n//一个类【遵从】接口，而且类中声明的自定义泛型和接口泛型一致，没有确定泛型的具体类型，由调用者来确定\nclass TestClass1<T> implements A<T> {\n\n\t@Override\n\tpublic void testA(T t) {\n\t\tSystem.out.println(t.getClass() + \"类型！！！\");\n\t}\t\n}\n\n//PlanB\n//一个类【遵从】接口，但是接口的泛型已经被确定的数据类型替代\nclass TestClass2 implements A<String> {\n\n\t@Override\n\tpublic void testA(String t) {\n\t\tSystem.out.println(\"String类型的方法\");\n\t}\n\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tTestClass1<Integer> test = new TestClass1<Integer>();\n\t\t\n\t\ttest.testA(5);\n\t\t\n\t\tTestClass2 test2 = new TestClass2();\n\t\t\n\t\ttest2.testA(\"233333\");\n\t}\n}\n\n\n```\n\n### 泛型的上下限\n\n- 泛型的上下限\n\t<? super T>\n\t<? extends T>\n\t\n\tT 泛型的占位符\n\t? 通配符（表示一个字符）\n\tsuper: 调用父类方法的关键字\n\textends: 继承的关键字\n\t\n- 需求：定义一个函数接受任意类型数值的集合，但是这个数据必须是数值类型\n\t数值类型：Number 已知子类：Integer Short Long Double Float (包装类)\n\t\n\t要求传入的对象是Number类对象或者其子类对象\n\t\tInteger extends Number; //Integer 是 Number 的子类\n\t\tFloat extends Number;\n\t\tDouble extends Number;\n\t\t\n\t? extends Number;//这就是泛型的上限：\n\t<? extends E> //通用类型\n\t\t\t\n- 需求：定义一个函数能够传入一个任意类型的集合，但是要求集合里面保存的数据必须是Number类对象，或者其父类对象\n\t\t<? super E>泛型的下限\n\t\t例如：<? super Number>\n\t\t\t能够保存的数据是Number类对象本身或者其父类对象\n  \n```java\npackage com.qfedu.a_generticity;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class Demo6 {\n\tpublic static void main(String[] args) {\n\t\tArrayList<Number> list1 = new ArrayList<Number>();\n\t\tArrayList<Double> list2 = new ArrayList<Double>();\n\t\tArrayList<String> list3 = new ArrayList<String>();\n\t\tArrayList<Object> list4 = new ArrayList<Object>();\n\t\t\n\t\t//传入的实际参数是一个ArrayList对象，里面保存的数据是Number类型\n\t\ttest1(list1);\n\t\ttest1(list2);\n\t\t//test1(list3); 不行，因为ArrayList<String> 里面保存的String类型不是Number的子类\n\t\t\n\t\ttest2(list1);\n\t\ttest2(list4);\n\t}\n\t\n\t/**\n\t * \n\t * @param c Collection<? extends Number> 要求传入的是一个Collection集合接口的实现类\n\t * 而且要求该实现类里面保存的数据是Number类对象本身或者其子类对象\n\t */\n\tpublic static void test1(Collection<? extends Number> c) {\n\t\tSystem.out.println(c.toString());\n\t}\n\t\n\tpublic static void test2(Collection<? super Number> c) {\n\t\tSystem.out.println(\"泛型的下限！！！\");\n\t}\n}\n```\n\n\n\n## Map\n- 回顾：\n  ---| Collection\n  ------| List\n  ----------| ArrayList      查询快 增删慢\n  ----------| LinkedList    查询慢，增删快\n  ----------| Vector         线程安全的ArrayList\n  ------| Set\n  ----------| HashSet       掌握它的存储原理\n  ----------| TreeSet\n  \t----|比较器：\n  \t\tComparable接口 实现compareTo方法\n  \t\tComparator接口 实现compare方法\n  \t\t\t\t\t\n生活中有关联，有关系的数据更多一点。例如：账号  密码；钥匙  锁\n\n\n### Map\n\n---| Map<K, V> 双列集合，这是一个接口\n------| HashMap 实现类\n------| TreeMap \n\nK：Key 键 !!! 唯一值!!! 不允许重复!!!\nV：Value 值 一个键(Key)对应一个值(Value) 可以重复的\n\n在Map<K, V> 双列集合中，保存的只能是一个键(Key)值(Value)对！！！\n\n\nMap中要学习的方法：\n- 增\n  - put(K key, V value);    添加一个键(Key)值(Value)对\n  - putAll(Map<? extends K, ? extends V> map);添加一个符合数据类型的Map双列集合\n- 删\n  - clear(); 清空所有的键(Key)值(Value)对\n  - remove(Object key); 根据Key删除对应的键(Key)值(Value)对\n- 改\n  - put(K key, V value); 当键(Key)存在时，这个操作是重新修改值(Value)\n- 查\t \n  - size(); 获取键值对个数\n  - get(Object key); 通过键(Key)找出对应的值(Value)\n  - containsKey(Object key); 查看这个Key是否在Map中存在\n  - containsValue(Object value); 查看这个Value是否在Map存在\n\n  - keySet(); 返回所有键(Key)Set集合\n  - values(); 返回所有值(Value)Collection集合\n \n代码示例：\n```java\npackage com.qfedu.b_map;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tMap<String, String> map = new HashMap<String, String>();\n\t\t\n\t\t//使用put(K k, V v)添加元素\n\t\tmap.put(\"薛之谦\", \"高磊鑫\");\n\t\tmap.put(\"鹿晗\", \"关晓彤\");\n\t\tmap.put(\"宋仲基\", \"宋慧乔\");\n\t\tmap.put(\"余文乐\", \"王棠云\");\n\t\tmap.put(\"王宝强\", \"马蓉\");\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\tMap<String, String> map2 = new HashMap<String, String>();\n\t\t\n\t\tmap2.put(\"科比\", \"瓦妮莎\");\n\t\tmap2.put(\"TT\", \"卡戴珊\");\n\t\t\n\t\t//添加另一个Map\n\t\tmap.putAll(map2);\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\t//清空当前Map双列集合\n\t\tmap2.clear();\n\t\tSystem.out.println(map2.isEmpty());\n\t\t\n\t\t//根据Key删除对应的键值对\n\t\tmap.remove(\"TT\");\n\t\t\n\t\tSystem.out.println(map);\n\t\t\n\t\t//当Key存在时，这个操作修改对应Value\n\t\tmap.put(\"王宝强\", null);\n\t\tSystem.out.println(map);\n\t\t\n\t\t\n\t\tSystem.out.println(map.size());\n\t\t\n\t\tSystem.out.println(map.containsKey(\"谢霆锋\"));\n\t\tSystem.out.println(map.containsKey(\"薛之谦\"));\n\t\t\n\t\tSystem.out.println(map.containsValue(\"高磊鑫\"));\n\t\tSystem.out.println(map.containsValue(\"王菲\"));\n\t\t\n\t\tSystem.out.println(map.get(\"科比\"));\n\t\tSystem.out.println(map.get(\"TT\"));\n\t\t\n\t\tSet<String> set = map.keySet();\n\t\tfor (String string : set) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\tSystem.out.println(\"-------------------------------\");\n\t\tCollection<String> c = map.values();\n\t\tfor (String string : c) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\n\t}\n}\n```\n",[[1563438245886,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563438246028,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1563438246164,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1563438256197,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: yellow\n---\n\n@toc"]],[0,1],[45,45]]],[1563438258352,["GJX@GJXAIOU",[[1,47,"\n"]],[45,45],[46,46]]],[1563438260462,["GJX@GJXAIOU",[[1,46,"# j"]],[46,46],[49,49]]],[1563438261102,["GJX@GJXAIOU",[[-1,48,"j"]],[49,49],[48,48]]],[1563438263455,["GJX@GJXAIOU",[[1,48,"JavaS"]],[48,48],[53,53]]],[1563438263933,["GJX@GJXAIOU",[[-1,52,"S"]],[53,53],[52,52]]],[1563438268550,["GJX@GJXAIOU",[[1,52,"Day18 fan"]],[52,52],[61,61]]],[1563438269336,["GJX@GJXAIOU",[[-1,58,"fan"]],[61,61],[58,58]]],[1563438271227,["GJX@GJXAIOU",[[1,58,"泛型"]],[58,58],[60,60]]],[1563438277687,["GJX@GJXAIOU",[[1,65,"一、"]],[65,65],[67,67]]],[1563438332565,["GJX@GJXAIOU",[[1,535,"\n"]],[535,535],[536,536]]],[1563438357324,["GJX@GJXAIOU",[[-1,825,"      "]],[831,831],[825,825]]],[1563438362485,["GJX@GJXAIOU",[[-1,864,"            "]],[876,876],[864,864]]],[1563438362884,["GJX@GJXAIOU",[[-1,863,"\n"]],[864,864],[863,863]]],[1563438366698,["GJX@GJXAIOU",[[1,899,"。"]],[899,899],[900,900]]],[1563438370990,["GJX@GJXAIOU",[[-1,901,"            "]],[913,913],[901,901]]],[1563438371304,["GJX@GJXAIOU",[[-1,900,"\n"]],[901,901],[900,900]]],[1563438392050,["GJX@GJXAIOU",[[-1,1013,"1. "],[1,1016,"-"]],[1013,1013],[1014,1014]]],[1563438392359,["GJX@GJXAIOU",[[1,1014," "]],[1014,1014],[1015,1015]]],[1563438395780,["GJX@GJXAIOU",[[-1,1062,"2. "],[1,1065,"-"]],[1062,1062],[1063,1063]]],[1563438396135,["GJX@GJXAIOU",[[1,1063," "]],[1063,1063],[1064,1064]]],[1563438403328,["GJX@GJXAIOU",[[1,1145,"二、"]],[1145,1145],[1147,1147]]],[1563438405044,["GJX@GJXAIOU",[[1,1142,"\n"]],[1141,1141],[1142,1142]]],[1563438406095,["GJX@GJXAIOU",[[1,1141,"---"]],[1141,1141],[1144,1144]]],[1563438410650,["GJX@GJXAIOU",[[1,1159,"（）"]],[1159,1159],[1161,1161]]],[1563438412170,["GJX@GJXAIOU",[[1,1160,"一"]],[1160,1160],[1161,1161]]],[1563438654489,["GJX@GJXAIOU",[[1,1223,"同时"]],[1223,1223],[1225,1225]]],[1563438669823,["GJX@GJXAIOU",[[1,1223,"例如下列代码中，"]],[1223,1223],[1231,1231]]],[1563438672980,["GJX@GJXAIOU",[[-1,1231,"同时就"]],[1234,1234],[1231,1231]]],[1563438674746,["GJX@GJXAIOU",[[1,1231,"就"]],[1231,1231],[1232,1232]]],[1563440355515,["GJX@GJXAIOU",[[1,1494,"（）"]],[1494,1494],[1496,1496]]],[1563440356872,["GJX@GJXAIOU",[[1,1495,"二"]],[1495,1495],[1496,1496]]],[1563440426330,["GJX@GJXAIOU",[[1,2069,"（）"]],[2069,2069],[2071,2071]]],[1563440428650,["GJX@GJXAIOU",[[1,2070,"三"]],[2070,2070],[2071,2071]]],[1563447481841,["GJX@GJXAIOU",[[1,3049,"（）"]],[3049,3049],[3051,3051]]],[1563447483793,["GJX@GJXAIOU",[[1,3050,"四"]],[3050,3050],[3051,3051]]],[1563447517631,["GJX@GJXAIOU",[[1,5277,"（0 "]],[5277,5277],[5279,5279]]],[1563447518820,["GJX@GJXAIOU",[[-1,5278,"0"]],[5279,5279],[5278,5278]]],[1563447520387,["GJX@GJXAIOU",[[1,5278,"）"]],[5278,5278],[5279,5279]]],[1563447522141,["GJX@GJXAIOU",[[1,5278,"五"]],[5278,5278],[5279,5279]]],[1563447527919,["GJX@GJXAIOU",[[1,6247,"（）"]],[6247,6247],[6249,6249]]],[1563447530286,["GJX@GJXAIOU",[[1,6248,"六"]],[6248,6248],[6249,6249]]],[1563447550093,["GJX@GJXAIOU",[[1,7661,"三 "]],[7661,7661],[7662,7662]]],[1563447550463,["GJX@GJXAIOU",[[1,7662,"、"]],[7662,7662],[7663,7663]]],[1563447552480,["GJX@GJXAIOU",[[-1,7663," "]],[7664,7664],[7663,7663]]]],null,"GJX@GJXAIOU"]]}