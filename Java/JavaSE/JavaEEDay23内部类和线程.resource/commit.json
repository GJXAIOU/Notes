{"compress":true,"commitItems":[["2c8dc776-c73d-45e7-96b4-0aeee98b6ac3",1563844681005,"",[[1563844638965,["GJX@GJXAIOU",[[1,0,"# JavaDay23\n\n\n\n"]],[0,0],[14,14]]],[1563844645438,["GJX@GJXAIOU",[[1,13,"### "]],[13,13],[17,17]]],[1563844647289,["GJX@GJXAIOU",[[-1,13,"### "]],[17,17],[13,13]]],[1563844651004,["GJX@GJXAIOU",[[1,13,"## 一、复习"]],[13,13],[20,20]]],[1563844651321,["GJX@GJXAIOU",[[1,22,"\n"]],[20,20],[21,21]]],[1563844655618,["GJX@GJXAIOU",[[1,21,"### （）"]],[21,21],[27,27]]],[1563844657360,["GJX@GJXAIOU",[[1,26,"一"]],[26,26],[27,27]]],[1563844673600,["GJX@GJXAIOU",[[1,28,"Comparable和"]],[28,28],[39,39]]],[1563844673622,["GJX@GJXAIOU",[[1,38," "]],[39,39],[40,40]]],[1563844682585,["GJX@GJXAIOU",[[1,40,"Comparator"]],[40,40],[50,50]]],[1563844682609,["GJX@GJXAIOU",[[1,40," "]],[50,50],[51,51]]],[1563844686459,["GJX@GJXAIOU",[[1,53,"\n"]],[51,51],[52,52]]],[1563844692649,["GJX@GJXAIOU",[[1,52,"两者都是借口"]],[52,52],[58,58]]],[1563844693304,["GJX@GJXAIOU",[[-1,56,"借口"]],[58,58],[56,56]]],[1563844695442,["GJX@GJXAIOU",[[1,56,"接口"]],[56,56],[58,58]]],[1563844696035,["GJX@GJXAIOU",[[1,60,"\n"]],[58,58],[59,59]]],[1563844706037,["GJX@GJXAIOU",[[1,59,"- Comparable是一个"]],[59,59],[74,74]]],[1563844706059,["GJX@GJXAIOU",[[1,71," "]],[74,74],[75,75]]],[1563844732834,["GJX@GJXAIOU",[[1,75,"接口，给自定义类提供比较方式，遵从Comparable"]],[75,75],[102,102]]],[1563844732856,["GJX@GJXAIOU",[[1,92," "]],[102,102],[103,103]]],[1563844734057,["GJX@GJXAIOU",[[1,103,"<>"]],[103,103],[105,105]]],[1563844735946,["GJX@GJXAIOU",[[1,104,"TR"]],[104,104],[106,106]]],[1563844737330,["GJX@GJXAIOU",[[-1,105,"R"]],[106,106],[105,105]]],[1563844739702,["GJX@GJXAIOU",[[1,106,"的"]],[106,106],[107,107]]],[1563844758158,["GJX@GJXAIOU",[[1,107,"实现类，必须实现compareTo"]],[107,107],[124,124]]],[1563844758182,["GJX@GJXAIOU",[[1,115," "]],[124,124],[125,125]]],[1563844759339,["GJX@GJXAIOU",[[1,125,"（）"]],[125,125],[127,127]]],[1563844765719,["GJX@GJXAIOU",[[1,126,"T 哦"]],[126,126],[129,129]]],[1563844766779,["GJX@GJXAIOU",[[-1,128,"哦"]],[129,129],[128,128]]],[1563844767241,["GJX@GJXAIOU",[[1,128,"o"]],[128,128],[129,129]]],[1563844770238,["GJX@GJXAIOU",[[1,130,"方法"]],[130,130],[132,132]]],[1563844770875,["GJX@GJXAIOU",[[1,133,"- \n"]],[132,132],[135,135]]],[1563844849898,["GJX@GJXAIOU",[[1,135,"Comparator是"]],[135,135],[146,146]]],[1563844849921,["GJX@GJXAIOU",[[1,145," "]],[146,146],[147,147]]],[1563844860425,["GJX@GJXAIOU",[[1,147,"一个接口，用来做自定义"]],[147,147],[158,158]]],[1563844875954,["GJX@GJXAIOU",[[1,158,"比较器，遵从Comparator"]],[158,158],[174,174]]],[1563844875976,["GJX@GJXAIOU",[[1,164," "]],[174,174],[175,175]]],[1563844877376,["GJX@GJXAIOU",[[1,175,"<."]],[175,175],[177,177]]],[1563844878874,["GJX@GJXAIOU",[[-1,176,"."]],[177,177],[176,176]]],[1563844879273,["GJX@GJXAIOU",[[1,176,">"]],[176,176],[177,177]]],[1563844880865,["GJX@GJXAIOU",[[1,176,"T"]],[176,176],[177,177]]],[1563844901764,["GJX@GJXAIOU",[[1,178,"接口的实现类，必须使用Comparator"]],[178,178],[199,199]]],[1563844901787,["GJX@GJXAIOU",[[1,189," "]],[199,199],[200,200]]],[1563844905632,["GJX@GJXAIOU",[[-1,190,"Comparator"]],[200,200],[190,190]]],[1563844911489,["GJX@GJXAIOU",[[1,190,"compare()"]],[190,190],[199,199]]],[1563844917298,["GJX@GJXAIOU",[[1,198,"T o1, T o1"]],[198,198],[208,208]]],[1563844918113,["GJX@GJXAIOU",[[-1,207,"1"]],[208,208],[207,207]]],[1563844918923,["GJX@GJXAIOU",[[1,207,"2"]],[207,207],[208,208]]],[1563844923099,["GJX@GJXAIOU",[[1,209,"；"]],[209,209],[210,210]]],[1563844923666,["GJX@GJXAIOU",[[1,211,"- \n"]],[210,210],[213,213]]],[1563844927938,["GJX@GJXAIOU",[[-1,211,"- "]],[213,213],[211,211]]],[1563844928587,["GJX@GJXAIOU",[[1,213,"\n"]],[211,211],[212,212]]],[1563844930377,["GJX@GJXAIOU",[[1,212,"1l"]],[212,212],[214,214]]],[1563844931124,["GJX@GJXAIOU",[[-1,213,"l"]],[214,214],[213,213]]],[1563844932441,["GJX@GJXAIOU",[[1,213,".shixa"]],[213,213],[219,219]]],[1563844933585,["GJX@GJXAIOU",[[-1,214,"shixa"]],[219,219],[214,214]]],[1563844935019,["GJX@GJXAIOU",[[1,214,"师兄那"]],[214,214],[217,217]]],[1563844938064,["GJX@GJXAIOU",[[-1,214,"师兄那"]],[217,217],[214,214]]],[1563844942395,["GJX@GJXAIOU",[[1,214,"实现自定义比较器"]],[214,214],[222,222]]],[1563844942745,["GJX@GJXAIOU",[[1,224,"\n"]],[222,222],[223,223]]],[1563844944194,["GJX@GJXAIOU",[[1,223,"```"]],[223,223],[226,226]]],[1563844944217,["GJX@GJXAIOU",[[1,226,"language\n```\n"]],[226,226],[226,234]]],[1563844944402,["GJX@GJXAIOU",[[-1,226,"language"],[1,234,"j"]],[226,234],[227,227]]],[1563844944635,["GJX@GJXAIOU",[[1,227,"as"]],[227,227],[229,229]]],[1563844945483,["GJX@GJXAIOU",[[-1,228,"s"]],[229,229],[228,228]]],[1563844945714,["GJX@GJXAIOU",[[1,228,"va"]],[228,228],[230,230]]],[1563844945969,["GJX@GJXAIOU",[[1,231,"\n"]],[230,230],[231,231]]],[1563845013281,["GJX@GJXAIOU",[[1,231,"class Mys"]],[231,231],[240,240]]],[1563845014040,["GJX@GJXAIOU",[[-1,239,"s"]],[240,240],[239,239]]],[1563845016337,["GJX@GJXAIOU",[[1,239,"Cop"]],[239,239],[242,242]]],[1563845017122,["GJX@GJXAIOU",[[-1,241,"p"]],[242,242],[241,241]]],[1563845034960,["GJX@GJXAIOU",[[1,241,"mpare implements Comparator<>"]],[241,241],[270,270]]],[1563845037704,["GJX@GJXAIOU",[[1,269,"Stur"]],[269,269],[273,273]]],[1563845038297,["GJX@GJXAIOU",[[-1,272,"r"]],[273,273],[272,272]]],[1563845038800,["GJX@GJXAIOU",[[1,272,"dent"]],[272,272],[276,276]]],[1563845042704,["GJX@GJXAIOU",[[1,277,"{"]],[277,277],[278,278]]],[1563845043256,["GJX@GJXAIOU",[[1,279,"\n"]],[278,278],[279,279]]],[1563845043655,["GJX@GJXAIOU",[[1,280,"\n"]],[279,279],[280,280]]],[1563845044488,["GJX@GJXAIOU",[[1,280,"}"]],[280,280],[281,281]]],[1563845052192,["GJX@GJXAIOU",[[1,279,"  @override"]],[279,279],[290,290]]],[1563845054499,["GJX@GJXAIOU",[[1,291,"  \n"]],[290,290],[293,293]]],[1563845057112,["GJX@GJXAIOU",[[1,293,"publiu"]],[293,293],[299,299]]],[1563845057648,["GJX@GJXAIOU",[[-1,298,"u"]],[299,299],[298,298]]],[1563845065563,["GJX@GJXAIOU",[[1,298,"c int compare()"]],[298,298],[313,313]]],[1563845077817,["GJX@GJXAIOU",[[1,312,"Student o1, Student o2"]],[312,312],[334,334]]],[1563845079908,["GJX@GJXAIOU",[[1,335,"{"]],[335,335],[336,336]]],[1563845080156,["GJX@GJXAIOU",[[1,337,"  \n"]],[336,336],[339,339]]],[1563845081193,["GJX@GJXAIOU",[[-1,337,"  "],[1,339,"\n"]],[339,339],[338,338]]],[1563845081666,["GJX@GJXAIOU",[[1,338,"}"]],[338,338],[339,339]]],[1563845083073,["GJX@GJXAIOU",[[1,338,"  "]],[338,338],[340,340]]],[1563845100812,["GJX@GJXAIOU",[[1,337,"    return o1.getAge() - o2."]],[337,337],[365,365]]],[1563845105909,["GJX@GJXAIOU",[[1,365,"getAge();"]],[365,365],[374,374]]],[1563845156828,["GJX@GJXAIOU",[[1,385,"shang"]],[385,385],[390,390]]],[1563845157783,["GJX@GJXAIOU",[[-1,385,"shang"]],[390,390],[385,385]]],[1563845160378,["GJX@GJXAIOU",[[1,385,"上面这种"]],[385,385],[389,389]]],[1563845161484,["GJX@GJXAIOU",[[1,389,"方式："]],[389,389],[392,392]]],[1563845169003,["GJX@GJXAIOU",[[1,212,"方法 "]],[212,212],[214,214]]],[1563845171088,["GJX@GJXAIOU",[[-1,214," "]],[215,215],[214,214]]],[1563845173890,["GJX@GJXAIOU",[[1,396,"\n"]],[395,395],[396,396]]],[1563845175306,["GJX@GJXAIOU",[[-1,396,"\n"],[1,397,"方法"]],[396,396],[398,398]]],[1563845177088,["GJX@GJXAIOU",[[1,398,"2"]],[398,398],[399,399]]],[1563845177111,["GJX@GJXAIOU",[[1,398," "]],[399,399],[400,400]]],[1563845177665,["GJX@GJXAIOU",[[1,400,"："]],[400,400],[401,401]]],[1563845340930,["GJX@GJXAIOU",[[1,394,"好理解但是需要重新定义一个类，而且可能会统一放在一个包里面，略显复杂；"]],[394,394],[429,429]]],[1563845367243,["GJX@GJXAIOU",[[1,436,"使用匿名内部类的匿名对象："]],[436,436],[449,449]]],[1563845369928,["GJX@GJXAIOU",[[-1,448,"："]],[449,449],[448,448]]],[1563845370625,["GJX@GJXAIOU",[[1,448,"\n\n"]],[448,448],[449,449]]],[1563845372093,["GJX@GJXAIOU",[[-1,449,"\n"],[1,450,"格式"]],[449,449],[451,451]]],[1563845373761,["GJX@GJXAIOU",[[1,451,"：``"]],[451,451],[454,454]]],[1563845375929,["GJX@GJXAIOU",[[1,453,"Ass"]],[453,453],[456,456]]],[1563845376488,["GJX@GJXAIOU",[[-1,454,"ss"]],[456,456],[454,454]]],[1563845377923,["GJX@GJXAIOU",[[1,454,"rrats"]],[454,454],[459,459]]],[1563845378504,["GJX@GJXAIOU",[[-1,457,"ts"]],[459,459],[457,457]]],[1563845383002,["GJX@GJXAIOU",[[1,457,"ys.sort()"]],[457,457],[466,466]]],[1563845399712,["GJX@GJXAIOU",[[1,465,"T[] t, Compa"]],[465,465],[477,477]]],[1563845411096,["GJX@GJXAIOU",[[1,477,"rator<>>"]],[477,477],[484,484]]],[1563845411488,["GJX@GJXAIOU",[[-1,484,">"]],[484,484],[483,483]]],[1563845416204,["GJX@GJXAIOU",[[1,483,"? extebg"]],[483,483],[491,491]]],[1563845416875,["GJX@GJXAIOU",[[-1,490,"g"]],[491,491],[490,490]]],[1563845417002,["GJX@GJXAIOU",[[1,490,"="]],[490,490],[491,491]]],[1563845417384,["GJX@GJXAIOU",[[-1,489,"b="]],[491,491],[489,489]]],[1563845423504,["GJX@GJXAIOU",[[1,489,"nds T"]],[489,489],[494,494]]],[1563845426337,["GJX@GJXAIOU",[[1,495," com"]],[495,495],[499,499]]],[1563845431552,["GJX@GJXAIOU",[[1,501,"\n\n"]],[501,501],[502,502]]],[1563845432501,["GJX@GJXAIOU",[[-1,502,"\n"],[1,503,"·"]],[502,502],[503,503]]],[1563845432898,["GJX@GJXAIOU",[[1,503,"··"]],[503,503],[505,505]]],[1563845433728,["GJX@GJXAIOU",[[-1,503,"··"]],[505,505],[503,503]]],[1563845434207,["GJX@GJXAIOU",[[-1,502,"·"],[1,503,"\n"]],[503,503],[502,502]]],[1563845434810,["GJX@GJXAIOU",[[-1,502,"\n"],[1,503,"`"]],[502,502],[503,503]]],[1563845435204,["GJX@GJXAIOU",[[1,503,"``"]],[503,503],[505,505]]],[1563845435227,["GJX@GJXAIOU",[[1,505,"language\n```\n"]],[505,505],[505,513]]],[1563845435977,["GJX@GJXAIOU",[[-1,505,"language"],[1,513,"j"]],[505,513],[506,506]]],[1563845436432,["GJX@GJXAIOU",[[1,506,"ava"]],[506,506],[509,509]]],[1563845436531,["GJX@GJXAIOU",[[1,510,"\n"]],[509,509],[510,510]]],[1563845443906,["GJX@GJXAIOU",[[1,510,"Student s"]],[510,510],[519,519]]],[1563845444895,["GJX@GJXAIOU",[[-1,517," s"]],[519,519],[517,517]]],[1563845447632,["GJX@GJXAIOU",[[1,517,"[] arrau"]],[517,517],[525,525]]],[1563845448236,["GJX@GJXAIOU",[[-1,524,"u"]],[525,525],[524,524]]],[1563845454875,["GJX@GJXAIOU",[[1,524,"y = {stu1. "]],[524,524],[535,535]]],[1563845455432,["GJX@GJXAIOU",[[-1,533,". "]],[535,535],[533,533]]],[1563845460416,["GJX@GJXAIOU",[[1,533,", stu2, stu3"]],[533,533],[545,545]]],[1563845461906,["GJX@GJXAIOU",[[1,545,"};"]],[545,545],[547,547]]],[1563845462187,["GJX@GJXAIOU",[[1,548,"\n"]],[547,547],[548,548]]],[1563845463080,["GJX@GJXAIOU",[[1,549,"\n"]],[548,548],[549,549]]],[1563845474137,["GJX@GJXAIOU",[[1,549,"Arrays.sort()"]],[549,549],[562,562]]],[1563845479800,["GJX@GJXAIOU",[[1,561,"array.net"]],[561,561],[570,570]]],[1563845480352,["GJX@GJXAIOU",[[-1,569,"t"]],[570,570],[569,569]]],[1563845491088,["GJX@GJXAIOU",[[1,569,"w Comparator "]],[569,569],[582,582]]],[1563845491735,["GJX@GJXAIOU",[[-1,581," "]],[582,582],[581,581]]],[1563845492595,["GJX@GJXAIOU",[[1,581,"<:>"]],[581,581],[584,584]]],[1563845493863,["GJX@GJXAIOU",[[-1,582,":"]],[583,583],[582,582]]],[1563845495696,["GJX@GJXAIOU",[[1,582,"Sturde"]],[582,582],[588,588]]],[1563845496281,["GJX@GJXAIOU",[[-1,585,"rde"]],[588,588],[585,585]]],[1563845497016,["GJX@GJXAIOU",[[1,585,"dent"]],[585,585],[589,589]]],[1563845503879,["GJX@GJXAIOU",[[1,590,"{"]],[590,590],[591,591]]],[1563845505015,["GJX@GJXAIOU",[[1,591,"\n"]],[591,591],[592,592]]],[1563845505334,["GJX@GJXAIOU",[[1,592,"\n"]],[592,592],[593,593]]],[1563845506471,["GJX@GJXAIOU",[[1,593,"}"]],[593,593],[594,594]]],[1563845508791,["GJX@GJXAIOU",[[1,592,"  "]],[592,592],[594,594]]],[1563845511487,["GJX@GJXAIOU",[[1,597,";"]],[597,597],[598,598]]],[1563845519487,["GJX@GJXAIOU",[[1,594,"@Override"]],[594,594],[603,603]]],[1563845520511,["GJX@GJXAIOU",[[1,604,"  \n"]],[603,603],[606,606]]],[1563845523152,["GJX@GJXAIOU",[[1,606,"publli"]],[606,606],[612,612]]],[1563845524017,["GJX@GJXAIOU",[[-1,610,"li"]],[612,612],[610,610]]],[1563845525119,["GJX@GJXAIOU",[[1,610,"iv"]],[610,610],[612,612]]],[1563845525546,["GJX@GJXAIOU",[[-1,611,"v"]],[612,612],[611,611]]],[1563845531719,["GJX@GJXAIOU",[[1,611,"c int compare()"]],[611,611],[626,626]]],[1563845536680,["GJX@GJXAIOU",[[1,625,"Student 0"]],[625,625],[634,634]]],[1563845537312,["GJX@GJXAIOU",[[-1,633,"0"]],[634,634],[633,633]]],[1563845543767,["GJX@GJXAIOU",[[1,633,"o1, Student o2"]],[633,633],[647,647]]],[1563845547007,["GJX@GJXAIOU",[[1,648,"{"]],[648,648],[649,649]]],[1563845547280,["GJX@GJXAIOU",[[1,650,"  \n"]],[649,649],[652,652]]],[1563845548943,["GJX@GJXAIOU",[[1,652,"}"]],[652,652],[653,653]]],[1563845551158,["GJX@GJXAIOU",[[1,652,"\n  "]],[652,652],[655,655]]],[1563845569416,["GJX@GJXAIOU",[[1,652,"  return o1.getAge() - o2.getAfe"]],[652,652],[684,684]]],[1563845569943,["GJX@GJXAIOU",[[-1,682,"fe"]],[684,684],[682,682]]],[1563845571745,["GJX@GJXAIOU",[[1,682,"ge();"]],[682,682],[687,687]]],[1563845579663,["GJX@GJXAIOU",[[1,700,"\n"]],[699,699],[700,700]]],[1563845579808,["GJX@GJXAIOU",[[1,701,"\n"]],[700,700],[701,701]]],[1563845688695,["GJX@GJXAIOU",[[1,702,"\n"]],[700,700],[701,701]]],[1563845688823,["GJX@GJXAIOU",[[1,703,"\n"]],[701,701],[702,702]]],[1563845690848,["GJX@GJXAIOU",[[1,702,"## er "]],[702,702],[708,708]]],[1563845692065,["GJX@GJXAIOU",[[-1,705,"er "]],[708,708],[705,705]]],[1563845695490,["GJX@GJXAIOU",[[1,705,"二、内部类"]],[705,705],[710,710]]],[1563845695831,["GJX@GJXAIOU",[[1,712,"\n"]],[710,710],[711,711]]],[1563845695938,["GJX@GJXAIOU",[[1,713,"\n"]],[711,711],[712,712]]],[1563845697441,["GJX@GJXAIOU",[[1,712,"package com.qfedu.a_innnerclass;\n\n/*\n\t人：\n  \t\t成员变量：\n  \t\t\t体重，性别，血液\n  \t\t成员方法：\n  \t\t\t睡觉，吃饭，跑步，敲代码\n  \t\t\n  \t\t心脏：\n  \t\t\t心跳 行为\n  \t\t\t会使用到人体内的成员变量，血液\n  \t\t\t心室 和 心房\n  \t\t\n  \t[特征]\n  \t\t在人类中，有些东西，比如内脏，用成员方法或者成员变量描述都显着有点不太合适，因为这些内脏\n  \t\t首先是属于【人体的一部分】，而且会使用【人体的一些属性】，但是又拥有自己的一些【特征】\n  \t\t\n  \t[思考]\n  \t\t能不能把这些器官，认为是一个类，一个属于人类内部的一个类\n  \t\t\n  \t\t成员内部类！！！\n  \t\t\n  \t\t内部类：\n  \t\t\t1. 成员内部类\n  \t\t\t2. 局部内部类\n  \t\t\t3. 匿名内部类\n  \t\t\t\n  \t内部类和外部类不得不说的秘密：\n  \t\t1. 成员内部类可以使用外部类的成员变量和成员方法, 不管用什么权限修饰，不管是private还是public都\n  \t\t可以使用，因为，这是在内部类的内部使用\n  \t\t2. 【在Outer类的外部创建Outer的Inner对象】\n  \t\t\t格式如下:\n  \t\t\t\t外部类名.内部类名  内部类对象名 = new 外部类名().new 内部类名();\n  \t\t\t例如：\n  \t\t\t\tOuter.inner inner = new Outer().new Inner();\n \t\t\t【第一个知识点】:普通的成员变量和成员方法，在没有对象的情况下，不能再类外使用\n \t\t3. 如果内部类和外部类存在同名的成员变量，这里默认是就近原则，使用的是内部类的成员变量\n \t\t如果想要使用外部类的成员变量的：\n \t\t\t格式： \n \t\t\t\t外部类名.this.同名成员变量;\n \t\t\t\t外部类名.this.同名成员方法(蚕食列表);\n \t\t4. 在外部类的类内方法中，可以创建内部类的对象\n \t\t\t\t\n */\nclass Outer {\n\tint num = 100; //外部类的成员变量\n\t\n\tprivate static int s = 10;\n\t\n\tclass Inner { //这是Outer类的一个成员内部类\n\t\tint i = 10; //内部类的成员变量\n\t\tint num = 50;\n\t\tpublic void testInner() {\n\t\t\tSystem.out.println(\"内部类的成员方法\");\n\t\t\ttestOuter();\n\t\t\tSystem.out.println(\"内部类成员变量:\" + num); // 50 100 就近原则\n\t\t\tSystem.out.println(\"外部类成员变量:\" + Outer.this.num);\n\t\t\t\n\t\t\ttest();\n\t\t\tOuter.this.test();\n\t\t\t\n\t\t\tSystem.out.println(s);\n\t\t\ttestStatic();\n\t\t}\t\t\n\t\t\n\t\tpublic void test() {\n\t\t\tSystem.out.println(\"内部类的test方法\");\n\t\t}\n\t}\n\t\n\tpublic void testOuter() {\n\t\tSystem.out.println(\"外部类的成员方法\");\n\t}\n\t\n\tpublic void test() {\n\t\tSystem.out.println(\"外部类的test方法\");\n\t}\n\t\n\t//在【外部类】中定义【内部类的类对象】\n\tpublic void createInnnerClass() {\n\t\t//外部类的成员方法中调用内部类的构造方法，通过new关键字来创建内部类类对象使用\n\t\tInner inner = new Inner();\n\t\tinner.testInner();\n\t}\n\t\n\tpublic static void testStatic() {\n\t\tSystem.out.println(\"外部类的静态成员方法~\");\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n//\t\tOuter outer = new Outer();\n//\t\t\n//\t\touter.createInnnerClass();\n\t\t\n\t\t//想要在这里创建一个Inner类对象\n\t\t//Entry<K, V> entrySet\n\t\t//Set<Map.Entry<K, V>>\n\t\t//数据类型是Outer.Inner 表示是外部类里面的内部类数据类型\n\t\tOuter.Inner inner = new Outer().new Inner();\n\t\tinner.testInner();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[712,712],[2766,2766]]],[1563845706594,["GJX@GJXAIOU",[[-1,746,"/*\n\t人：\n  \t\t成员变量：\n  \t\t\t体重，性别，血液\n  \t\t成员方法：\n  \t\t\t睡觉，吃饭，跑步，敲代码\n  \t\t\n  \t\t心脏：\n  \t\t\t心跳 行为\n  \t\t\t会使用到人体内的成员变量，血液\n  \t\t\t心室 和 心房\n  \t\t\n  \t[特征]\n  \t\t在人类中，有些东西，比如内脏，用成员方法或者成员变量描述都显着有点不太合适，因为这些内脏\n  \t\t首先是属于【人体的一部分】，而且会使用【人体的一些属性】，但是又拥有自己的一些【特征】\n  \t\t\n  \t[思考]\n  \t\t能不能把这些器官，认为是一个类，一个属于人类内部的一个类\n  \t\t\n  \t\t成员内部类！！！\n  \t\t\n  \t\t内部类：\n  \t\t\t1. 成员内部类\n  \t\t\t2. 局部内部类\n  \t\t\t3. 匿名内部类\n  \t\t\t\n  \t内部类和外部类不得不说的秘密：\n  \t\t1. 成员内部类可以使用外部类的成员变量和成员方法, 不管用什么权限修饰，不管是private还是public都\n  \t\t可以使用，因为，这是在内部类的内部使用\n  \t\t2. 【在Outer类的外部创建Outer的Inner对象】\n  \t\t\t格式如下:\n  \t\t\t\t外部类名.内部类名  内部类对象名 = new 外部类名().new 内部类名();\n  \t\t\t例如：\n  \t\t\t\tOuter.inner inner = new Outer().new Inner();\n \t\t\t【第一个知识点】:普通的成员变量和成员方法，在没有对象的情况下，不能再类外使用\n \t\t3. 如果内部类和外部类存在同名的成员变量，这里默认是就近原则，使用的是内部类的成员变量\n \t\t如果想要使用外部类的成员变量的：\n \t\t\t格式： \n \t\t\t\t外部类名.this.同名成员变量;\n \t\t\t\t外部类名.this.同名成员方法(蚕食列表);\n \t\t4. 在外部类的类内方法中，可以创建内部类的对象\n \t\t\t\t\n */"]],[746,1568],[746,746]]],[1563845708744,["GJX@GJXAIOU",[[-1,746,"\n"]],[746,746],[745,745]]],[1563845710751,["GJX@GJXAIOU",[[1,712,"\n"]],[711,711],[712,712]]],[1563845711792,["GJX@GJXAIOU",[[1,712,"```"]],[712,712],[715,715]]],[1563845711818,["GJX@GJXAIOU",[[1,715,"language\n```\n"]],[715,715],[715,723]]],[1563845712825,["GJX@GJXAIOU",[[-1,715,"language"],[1,723,"j"]],[715,723],[716,716]]],[1563845713288,["GJX@GJXAIOU",[[1,716,"ava"]],[716,716],[719,719]]],[1563845716346,["GJX@GJXAIOU",[[-1,720,"```"]],[720,723],[720,720]]],[1563845719890,["GJX@GJXAIOU",[[1,1932,"```"]],[1932,1932],[1935,1935]]],[1563845725319,["GJX@GJXAIOU",[[-1,721,"\n"]],[721,721],[720,720]]],[1563845725751,["GJX@GJXAIOU",[[-1,720,"\n"]],[720,720],[719,719]]],[1563845727377,["GJX@GJXAIOU",[[1,712,"\n"]],[711,711],[712,712]]],[1563845728063,["GJX@GJXAIOU",[[1,712,"```"]],[712,712],[715,715]]],[1563845730475,["GJX@GJXAIOU",[[-1,712,"```"]],[715,715],[712,712]]],[1563845739149,["GJX@GJXAIOU",[[1,712,"/*\n\t人：\n  \t\t成员变量：\n  \t\t\t体重，性别，血液\n  \t\t成员方法：\n  \t\t\t睡觉，吃饭，跑步，敲代码\n  \t\t\n  \t\t心脏：\n  \t\t\t心跳 行为\n  \t\t\t会使用到人体内的成员变量，血液\n  \t\t\t心室 和 心房\n  \t\t\n  \t[特征]\n  \t\t在人类中，有些东西，比如内脏，用成员方法或者成员变量描述都显着有点不太合适，因为这些内脏\n  \t\t首先是属于【人体的一部分】，而且会使用【人体的一些属性】，但是又拥有自己的一些【特征】\n  \t\t\n  \t[思考]\n  \t\t能不能把这些器官，认为是一个类，一个属于人类内部的一个类\n  \t\t\n  \t\t成员内部类！！！\n  \t\t\n  \t\t内部类：\n  \t\t\t1. 成员内部类\n  \t\t\t2. 局部内部类\n  \t\t\t3. 匿名内部类\n  \t\t\t\n  \t内部类和外部类不得不说的秘密：\n  \t\t1. 成员内部类可以使用外部类的成员变量和成员方法, 不管用什么权限修饰，不管是private还是public都\n  \t\t可以使用，因为，这是在内部类的内部使用\n  \t\t2. 【在Outer类的外部创建Outer的Inner对象】\n  \t\t\t格式如下:\n  \t\t\t\t外部类名.内部类名  内部类对象名 = new 外部类名().new 内部类名();\n  \t\t\t例如：\n  \t\t\t\tOuter.inner inner = new Outer().new Inner();\n \t\t\t【第一个知识点】:普通的成员变量和成员方法，在没有对象的情况下，不能再类外使用\n \t\t3. 如果内部类和外部类存在同名的成员变量，这里默认是就近原则，使用的是内部类的成员变量\n \t\t如果想要使用外部类的成员变量的：\n \t\t\t格式： \n \t\t\t\t外部类名.this.同名成员变量;\n \t\t\t\t外部类名.this.同名成员方法(蚕食列表);\n \t\t4. 在外部类的类内方法中，可以创建内部类的对象\n \t\t\t\t\n */"]],[712,712],[1534,1534]]],[1563845742911,["GJX@GJXAIOU",[[-1,712,"/*"]],[712,714],[712,712]]],[1563845743377,["GJX@GJXAIOU",[[-1,712,"\n"]],[712,712],[711,711]]],[1563845756340,["GJX@GJXAIOU",[[-1,712,"\t"],[-1,716,"  "],[-1,726,"  "],[-1,740,"  "],[-1,750,"  "],[-1,768,"  "],[-1,773,"  "],[-1,781,"  "],[-1,792,"  "],[-1,813,"  "],[-1,826,"  "],[-1,831,"  "],[-1,839,"  "],[-1,888,"  "],[-1,936,"  "],[-1,941,"  "],[-1,949,"  "],[-1,982,"  "],[-1,987,"  "],[-1,1000,"  "],[-1,1005,"  "],[-1,1014,"  "],[-1,1028,"  "],[-1,1042,"  "],[-1,1056,"  "],[-1,1062,"  "],[-1,1081,"  "],[-1,1142,"  "],[-1,1166,"  "],[-1,1201,"  "],[-1,1212,"  "],[-1,1261,"  "],[-1,1270,"  "],[-1,1321," \t\t\t"],[-1,1365," \t\t"],[-1,1413," \t\t"],[-1,1433," \t\t\t"],[-1,1442," \t\t\t\t"],[-1,1465," \t\t\t\t"],[-1,1494," \t\t"]],[713,1521],[712,1456]]],[1563845760615,["GJX@GJXAIOU",[[-1,1437,"*/"]],[1439,1439],[1437,1437]]],[1563845761046,["GJX@GJXAIOU",[[-1,1436," "]],[1437,1437],[1436,1436]]],[1563845761545,["GJX@GJXAIOU",[[-1,1436,"\n"]],[1436,1436],[1435,1435]]],[1563845771304,["GJX@GJXAIOU",[[-1,716,"\t"],[-1,723,"\t"],[-1,736,"\t"],[-1,743,"\t"],[-1,760,"\t"],[-1,762,"\t"],[-1,770,"\t"],[-1,777,"\t"],[-1,798,"\t"],[-1,807,"\t"],[-1,810,"\t"],[-1,816,"\t"],[-1,864,"\t"],[-1,910,"\t"],[-1,912,"\t"],[-1,918,"\t"],[-1,950,"\t"],[-1,952,"\t"],[-1,964,"\t"],[-1,966,"\t"],[-1,975,"\t"],[-1,985,"\t"],[-1,999,"\t"],[-1,1009,"\t"],[-1,1013,"\t"],[-1,1030,"\t"],[-1,1090,"\t"],[-1,1111,"\t"],[-1,1146,"\t"],[-1,1153,"\t"],[-1,1202,"\t"],[-1,1207,"\t"]],[712,1295],[712,1263]]],[1563845772047,["GJX@GJXAIOU",[[-1,715,"\t"],[-1,722,"\t"],[-1,733,"\t"],[-1,740,"\t"],[-1,755,"\t"],[-1,757,"\t"],[-1,763,"\t"],[-1,770,"\t"],[-1,789,"\t"],[-1,798,"\t"],[-1,805,"\t"],[-1,851,"\t"],[-1,896,"\t"],[-1,903,"\t"],[-1,933,"\t"],[-1,935,"\t"],[-1,945,"\t"],[-1,947,"\t"],[-1,953,"\t"],[-1,965,"\t"],[-1,975,"\t"],[-1,986,"\t"],[-1,1005,"\t"],[-1,1063,"\t"],[-1,1084,"\t"],[-1,1116,"\t"],[-1,1126,"\t"],[-1,1171,"\t"],[-1,1176,"\t"]],[712,1263],[712,1234]]],[1563845779422,["GJX@GJXAIOU",[[1,790,"- "]],[790,790],[792,792]]],[1563845792921,["GJX@GJXAIOU",[[-1,841,"\n"]],[842,842],[841,841]]],[1563845801231,["GJX@GJXAIOU",[[-1,939," "]],[940,940],[939,939]]],[1563845801974,["GJX@GJXAIOU",[[-1,948," "]],[949,949],[948,948]]],[1563845802766,["GJX@GJXAIOU",[[-1,957," "]],[958,958],[957,957]]],[1563845804975,["GJX@GJXAIOU",[[1,931,"- "]],[931,931],[933,933]]],[1563845812889,["GJX@GJXAIOU",[[1,967,"- "]],[967,967],[969,969]]],[1563845814775,["GJX@GJXAIOU",[[-1,987," "]],[988,988],[987,987]]],[1563845815719,["GJX@GJXAIOU",[[-1,1063," "]],[1064,1064],[1063,1063]]],[1563845817184,["GJX@GJXAIOU",[[-1,1237," "]],[1238,1238],[1237,1237]]],[1563845818312,["GJX@GJXAIOU",[[-1,1345," "]],[1346,1346],[1345,1345]]],[1563845828364,["GJX@GJXAIOU",[[1,985,"- "]],[985,985],[987,987]]],[1563845829719,["GJX@GJXAIOU",[[1,985,"  "]],[987,987],[989,989]]],[1563845831839,["GJX@GJXAIOU",[[1,1065,"- "]],[1065,1065],[1067,1067]]],[1563845832038,["GJX@GJXAIOU",[[1,1065,"  "]],[1067,1067],[1069,1069]]],[1563845834568,["GJX@GJXAIOU",[[1,1243,"- "]],[1243,1243],[1245,1245]]],[1563845834766,["GJX@GJXAIOU",[[1,1243,"  "]],[1245,1245],[1247,1247]]],[1563845837495,["GJX@GJXAIOU",[[1,1355,"-  "]],[1355,1355],[1358,1358]]],[1563845845767,["GJX@GJXAIOU",[[1,1355,"  "]],[1355,1355],[1357,1357]]],[1563845998316,["GJX@GJXAIOU",[[1,2057,"//为了将内部的"]],[2057,2057],[2065,2065]]],[1563846001298,["GJX@GJXAIOU",[[-1,2064,"的"]],[2065,2065],[2064,2064]]],[1563846006627,["GJX@GJXAIOU",[[1,2064,"类的语句输出"]],[2064,2064],[2070,2070]]],[1563846009630,["GJX@GJXAIOU",[[1,2057,"\n\t"]],[2055,2055],[2057,2057]]],[1563846107102,["GJX@GJXAIOU",[[-1,1044,"\n"]],[1045,1045],[1044,1044]]],[1563846233345,["GJX@GJXAIOU",[[-1,2461,"\t\t//Entry<K, V> entrySet\n\t\t//Set<Map.Entry<K, V>>"]],[2461,2510],[2461,2461]]],[1563846233984,["GJX@GJXAIOU",[[-1,2461,"\n"]],[2461,2461],[2460,2460]]],[1563846468845,["GJX@GJXAIOU",[[-1,2400,"//\t"]],[2400,2403],[2400,2400]]],[1563846469284,["GJX@GJXAIOU",[[-1,2399,"\n"]],[2400,2400],[2399,2399]]],[1563846471693,["GJX@GJXAIOU",[[1,2369,"\n"]],[2369,2369],[2370,2370]]],[1563846479959,["GJX@GJXAIOU",[[1,2369,"        在外部"]],[2369,2369],[2380,2380]]],[1563846482527,["GJX@GJXAIOU",[[1,2377,"、、"]],[2377,2377],[2379,2379]]],[1563846483156,["GJX@GJXAIOU",[[-1,2377,"、、"]],[2379,2379],[2377,2377]]],[1563846483878,["GJX@GJXAIOU",[[1,2377,"//"]],[2377,2377],[2379,2379]]],[1563846487679,["GJX@GJXAIOU",[[1,2382,"类总"]],[2382,2382],[2384,2384]]],[1563846489015,["GJX@GJXAIOU",[[-1,2383,"总"]],[2384,2384],[2383,2383]]],[1563846496728,["GJX@GJXAIOU",[[1,2383,"中创建内部类对象"]],[2383,2383],[2391,2391]]],[1563846504152,["GJX@GJXAIOU",[[-1,2462,"想要"],[-1,2465,"这里"]],[2462,2462],[2463,2463]]],[1563846505874,["GJX@GJXAIOU",[[1,2463,"类外"]],[2463,2463],[2465,2465]]],[1563846609053,["GJX@GJXAIOU",[[-1,1705,"100 "]],[1705,1709],[1705,1705]]],[1563846626214,["GJX@GJXAIOU",[[1,1269,"**"],[1,1276,"**"]],[1269,1276],[1269,1280]]],[1563846732531,["GJX@GJXAIOU",[[-1,1351,"蚕食"]],[1353,1353],[1351,1351]]],[1563846734953,["GJX@GJXAIOU",[[1,1351,"参数"]],[1351,1351],[1353,1353]]],[1563846809300,["GJX@GJXAIOU",[[-1,965,"\t"],[1,966,"\n"]],[965,965],[966,966]]],[1563846809484,["GJX@GJXAIOU",[[1,967,"\n"]],[966,966],[967,967]]],[1563846817313,["GJX@GJXAIOU",[[1,967,"### 成员内部内"]],[967,967],[976,976]]],[1563846818675,["GJX@GJXAIOU",[[-1,975,"内"]],[976,976],[975,975]]],[1563846819678,["GJX@GJXAIOU",[[1,975,"类"]],[975,975],[976,976]]],[1563846827253,["GJX@GJXAIOU",[[1,971,"（）"]],[971,971],[973,973]]],[1563846830366,["GJX@GJXAIOU",[[1,972,"一"]],[972,972],[973,973]]],[1563846837088,["GJX@GJXAIOU",[[1,2607,"### （）"]],[2607,2607],[2613,2613]]],[1563846840330,["GJX@GJXAIOU",[[1,2612,"二"]],[2612,2612],[2613,2613]]],[1563846846678,["GJX@GJXAIOU",[[1,2614,"局部内部类"]],[2614,2614],[2619,2619]]],[1563846847139,["GJX@GJXAIOU",[[1,2640,"\n"]],[2619,2619],[2620,2620]]],[1563846847326,["GJX@GJXAIOU",[[1,2641,"\n"]],[2620,2620],[2621,2621]]],[1563846874828,["GJX@GJXAIOU",[[1,2621,"package com.qfedu.a_innnerclass;\n\n/*\n 局部内部类：\n \t放在方法内或者函数内的类，称之为局部内部类\n \t\n \t【第二个知识点】\n \t\t1. 局部变量的\n \t\t\t【生存期】\n \t\t\t\t从声明定义位置开始，到代码块结束\n \t\t\t【作用域】\n \t\t\t\t只能在当前代码块内部\n \t\t2. 类对象的\n \t\t\t【生存期】\n \t\t\t\t通过new关键字创建的时候开始，JVM垃圾回收机制调用时，销毁该对象，结束\n \t\t\t【作用域】\n \t\t\t\t那个引用变量拥有这个对象的首地址，哪里就是他的作用域\n \t\n \t说明：\n \t\t局部内部类只能在函数或者方法中使用，方法或者函数外不能使用\n \t\n \t发现：\n \t\t局部内部类中，貌似不能【修改】所在方法或者函数中的局部变量\n \t\t\n \t原因：一下内容懂了更好，不懂拉倒\n \t----------------------------------------------------------------------------\n \t\t局部内部类的对象是在函数或者说方法的内部通过JVM借助于new关键字，和局部内部类的构造方法，创建\n \t\t的一个类对象，并且该对象是由JVM的垃圾回收机制回收的\n \t\t\n \t\t但是局部变量n是在testInner()方法中，而这个局部变量的n的生存周期是和testInner()该方法的\n \t\t大括号有关，生存期和作用域都是在大括号以内\n \t\t\n \t\t如果在testInner()方法的内部，MethodInner()这个类是方法中的局部内部类，而创建的对象在使\n \t\t用testInner()方法中的局部变量时，因为对象的销毁时间不确定，但是一定是晚于局部变量的销毁的，\n \t\t这里隐含了一个类对象【延长了局部变量生存期】，这个是不符合Java原理的\n \t\t\n \t\t这就是为什么不能修改，因为有可能在这个对象被使用的时候，局部变量的内存空间已经被内存收回，换而言\n \t\t之这个局部变量不存在了！！！\n \t\t\n \t\t为了解决这个问题\n \t\t\n \t\t【解决方法】\n \t\t\t如果是在局部内部类中使用的所在函数或者方法的局部变量，该变量用final修饰\n \t----------------------------------------------------------------------------\n \t以上内容，听不懂，没事~~~\n \t\n \t要求\n \t\t【第三个知识点】\n \t\t\t记下结论：\n \t\t\t\t如果是局部内部类要使用所在函数或者方法的局部变量，该变量用【final】修饰\n \t\n \t\t\n */\n\nclass Test {\n\tint num = 100;\n\t\n\tpublic void testInner() {\n\t\t//这里是在方法中定义了一个类,这个类只能在当前函数或者方法中使用\n\t\tfinal int n = 10;\n\t\tclass MethodInner {\n\t\t\tint i = 10;\n\t\t\t\n\t\t\tpublic void function() {\n\t\t\t\tSystem.out.println(i);\n\t\t\t\tnum = 20;\n\t\t\t\tSystem.out.println(num);\n\t\t\t\t//n = 20;\n\t\t\t\tSystem.out.println(n);\n\t\t\t\tSystem.out.println(\"局部内部类的成员方法\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tMethodInner methodInner = new MethodInner();\n\t\tmethodInner.function();\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n//\t\tfor (int i = 0; i < 10; i++) {\n//\t\t\tSystem.out.println(i);\n//\t\t}\n\t\t\n//\t\tSystem.out.println(i);\n\t\tnew Test().testInner();\n\t}\n}\n\n\n"]],[2621,2621],[4345,4345]]],[1563846886277,["GJX@GJXAIOU",[[-1,2655,"/*\n 局部内部类：\n \t放在方法内或者函数内的类，称之为局部内部类\n \t\n \t【第二个知识点】\n \t\t1. 局部变量的\n \t\t\t【生存期】\n \t\t\t\t从声明定义位置开始，到代码块结束\n \t\t\t【作用域】\n \t\t\t\t只能在当前代码块内部\n \t\t2. 类对象的\n \t\t\t【生存期】\n \t\t\t\t通过new关键字创建的时候开始，JVM垃圾回收机制调用时，销毁该对象，结束\n \t\t\t【作用域】\n \t\t\t\t那个引用变量拥有这个对象的首地址，哪里就是他的作用域\n \t\n \t说明：\n \t\t局部内部类只能在函数或者方法中使用，方法或者函数外不能使用\n \t\n \t发现：\n \t\t局部内部类中，貌似不能【修改】所在方法或者函数中的局部变量\n \t\t\n \t原因：一下内容懂了更好，不懂拉倒\n \t----------------------------------------------------------------------------\n \t\t局部内部类的对象是在函数或者说方法的内部通过JVM借助于new关键字，和局部内部类的构造方法，创建\n \t\t的一个类对象，并且该对象是由JVM的垃圾回收机制回收的\n \t\t\n \t\t但是局部变量n是在testInner()方法中，而这个局部变量的n的生存周期是和testInner()该方法的\n \t\t大括号有关，生存期和作用域都是在大括号以内\n \t\t\n \t\t如果在testInner()方法的内部，MethodInner()这个类是方法中的局部内部类，而创建的对象在使\n \t\t用testInner()方法中的局部变量时，因为对象的销毁时间不确定，但是一定是晚于局部变量的销毁的，\n \t\t这里隐含了一个类对象【延长了局部变量生存期】，这个是不符合Java原理的\n \t\t\n \t\t这就是为什么不能修改，因为有可能在这个对象被使用的时候，局部变量的内存空间已经被内存收回，换而言\n \t\t之这个局部变量不存在了！！！\n \t\t\n \t\t为了解决这个问题\n \t\t\n \t\t【解决方法】\n \t\t\t如果是在局部内部类中使用的所在函数或者方法的局部变量，该变量用final修饰\n \t----------------------------------------------------------------------------\n \t以上内容，听不懂，没事~~~\n \t\n \t要求\n \t\t【第三个知识点】\n \t\t\t记下结论：\n \t\t\t\t如果是局部内部类要使用所在函数或者方法的局部变量，该变量用【final】修饰\n \t"]],[2655,3715],[2655,2655]]],[1563846888820,["GJX@GJXAIOU",[[1,2621,"\n"]],[2620,2620],[2621,2621]]],[1563846889245,["GJX@GJXAIOU",[[1,2621,"/*\n 局部内部类：\n \t放在方法内或者函数内的类，称之为局部内部类\n \t\n \t【第二个知识点】\n \t\t1. 局部变量的\n \t\t\t【生存期】\n \t\t\t\t从声明定义位置开始，到代码块结束\n \t\t\t【作用域】\n \t\t\t\t只能在当前代码块内部\n \t\t2. 类对象的\n \t\t\t【生存期】\n \t\t\t\t通过new关键字创建的时候开始，JVM垃圾回收机制调用时，销毁该对象，结束\n \t\t\t【作用域】\n \t\t\t\t那个引用变量拥有这个对象的首地址，哪里就是他的作用域\n \t\n \t说明：\n \t\t局部内部类只能在函数或者方法中使用，方法或者函数外不能使用\n \t\n \t发现：\n \t\t局部内部类中，貌似不能【修改】所在方法或者函数中的局部变量\n \t\t\n \t原因：一下内容懂了更好，不懂拉倒\n \t----------------------------------------------------------------------------\n \t\t局部内部类的对象是在函数或者说方法的内部通过JVM借助于new关键字，和局部内部类的构造方法，创建\n \t\t的一个类对象，并且该对象是由JVM的垃圾回收机制回收的\n \t\t\n \t\t但是局部变量n是在testInner()方法中，而这个局部变量的n的生存周期是和testInner()该方法的\n \t\t大括号有关，生存期和作用域都是在大括号以内\n \t\t\n \t\t如果在testInner()方法的内部，MethodInner()这个类是方法中的局部内部类，而创建的对象在使\n \t\t用testInner()方法中的局部变量时，因为对象的销毁时间不确定，但是一定是晚于局部变量的销毁的，\n \t\t这里隐含了一个类对象【延长了局部变量生存期】，这个是不符合Java原理的\n \t\t\n \t\t这就是为什么不能修改，因为有可能在这个对象被使用的时候，局部变量的内存空间已经被内存收回，换而言\n \t\t之这个局部变量不存在了！！！\n \t\t\n \t\t为了解决这个问题\n \t\t\n \t\t【解决方法】\n \t\t\t如果是在局部内部类中使用的所在函数或者方法的局部变量，该变量用final修饰\n \t----------------------------------------------------------------------------\n \t以上内容，听不懂，没事~~~\n \t\n \t要求\n \t\t【第三个知识点】\n \t\t\t记下结论：\n \t\t\t\t如果是局部内部类要使用所在函数或者方法的局部变量，该变量用【final】修饰\n \t"]],[2621,2621],[3681,3681]]],[1563846893885,["GJX@GJXAIOU",[[-1,3717," \t\t\n */\n\n"]],[3716,3725],[3716,3716]]],[1563846894293,["GJX@GJXAIOU",[[-1,3716,"\n"]],[3716,3716],[3715,3715]]],[1563846897395,["GJX@GJXAIOU",[[1,3679,"···"]],[3679,3679],[3682,3682]]],[1563846899003,["GJX@GJXAIOU",[[-1,3679,"···"]],[3682,3682],[3679,3679]]],[1563846900505,["GJX@GJXAIOU",[[1,3679,"```"]],[3679,3679],[3682,3682]]],[1563846900535,["GJX@GJXAIOU",[[1,3682,"language\n```\n"]],[3682,3682],[3682,3690]]],[1563846901478,["GJX@GJXAIOU",[[-1,3682,"language"],[1,3690,"j"]],[3682,3690],[3683,3683]]],[1563846901854,["GJX@GJXAIOU",[[1,3683,"ava"]],[3683,3683],[3686,3686]]],[1563846903804,["GJX@GJXAIOU",[[-1,3687,"```"]],[3687,3690],[3687,3687]]],[1563846906469,["GJX@GJXAIOU",[[1,4343,"```"]],[4343,4343],[4346,4346]]],[1563846909612,["GJX@GJXAIOU",[[-1,3688," \t"]],[3690,3690],[3688,3688]]],[1563846909800,["GJX@GJXAIOU",[[-1,3688,"\n"]],[3688,3688],[3687,3687]]],[1563846910252,["GJX@GJXAIOU",[[-1,3687,"\n"]],[3687,3687],[3686,3686]]],[1563846918720,["GJX@GJXAIOU",[[-1,2621,"/*"]],[2621,2623],[2621,2621]]],[1563846918878,["GJX@GJXAIOU",[[-1,2621,"\n"]],[2621,2621],[2620,2620]]],[1563847013756,["GJX@GJXAIOU",[[-1,2621," 局部内部类："]],[2621,2628],[2621,2621]]],[1563847014062,["GJX@GJXAIOU",[[-1,2621,"\n"]],[2621,2621],[2620,2620]]],[1563847014444,["GJX@GJXAIOU",[[-1,2620,"\n"]],[2620,2620],[2619,2619]]],[1563847020413,["GJX@GJXAIOU",[[-1,2620," \t"],[-1,2644," \t"],[-1,2647," \t"],[-1,2658," \t\t"],[-1,2670," \t\t\t"],[-1,2680," \t\t\t\t"],[-1,2702," \t\t\t"],[-1,2712," \t\t\t\t"],[-1,2728," \t\t"],[-1,2739," \t\t\t"],[-1,2749," \t\t\t\t"],[-1,2792," \t\t\t"],[-1,2802," \t\t\t\t"],[-1,2834," \t"],[-1,2837," \t"],[-1,2843," \t\t"],[-1,2876," \t"],[-1,2879," \t"],[-1,2885," \t\t"],[-1,2918," \t\t"],[-1,2922," \t"],[-1,2941," \t"],[-1,3020," \t\t"],[-1,3073," \t\t"],[-1,3104," \t\t"],[-1,3108," \t\t"],[-1,3167," \t\t"],[-1,3192," \t\t"],[-1,3196," \t\t"],[-1,3255," \t\t"],[-1,3310," \t\t"],[-1,3350," \t\t"],[-1,3354," \t\t"],[-1,3406," \t\t"],[-1,3424," \t\t"],[-1,3428," \t\t"],[-1,3440," \t\t"],[-1,3444," \t\t"],[-1,3454," \t\t\t"],[-1,3497," \t"],[-1,3576," \t"],[-1,3593," \t"],[-1,3596," \t"],[-1,3601," \t\t"],[-1,3613," \t\t\t"],[-1,3623," \t\t\t\t"]],[2622,3666],[2622,3666]]],[1563847052573,["GJX@GJXAIOU",[[1,2643,"- "]],[2643,2643],[2645,2645]]],[1563847054562,["GJX@GJXAIOU",[[-1,2656," "]],[2657,2657],[2656,2656]]],[1563847055782,["GJX@GJXAIOU",[[-1,2704," "]],[2705,2705],[2704,2704]]],[1563847060774,["GJX@GJXAIOU",[[1,2654,"  - "]],[2654,2654],[2658,2658]]],[1563847063270,["GJX@GJXAIOU",[[1,2706,"  - "]],[2706,2706],[2710,2710]]],[1563847070660,["GJX@GJXAIOU",[[1,2717,"    - "]],[2717,2717],[2723,2723]]],[1563847073277,["GJX@GJXAIOU",[[1,2767,"    - "]],[2767,2767],[2773,2773]]],[1563847076285,["GJX@GJXAIOU",[[1,2666,"    - "]],[2666,2666],[2672,2672]]],[1563847078966,["GJX@GJXAIOU",[[1,2695,"    - "]],[2695,2695],[2701,2701]]],[1563847167797,["GJX@GJXAIOU",[[-1,2906,"----------------------------------------------------------------------------"]],[2958,2982],[2906,2906]]],[1563847176815,["GJX@GJXAIOU",[[1,2819,"- "]],[2819,2819],[2821,2821]]],[1563847179708,["GJX@GJXAIOU",[[1,2856,"- "]],[2856,2856],[2858,2858]]],[1563847336560,["GJX@GJXAIOU",[[1,3794,"//不能修改"]],[3794,3794],[3800,3800]]],[1563847349359,["GJX@GJXAIOU",[[-1,2893,"原因：一下内容懂了更好，不懂拉倒"]],[2893,2909],[2893,2893]]],[1563847349899,["GJX@GJXAIOU",[[-1,2894,"\n"]],[2893,2893],[2892,2892]]],[1563847351331,["GJX@GJXAIOU",[[-1,2893,"\n"]],[2892,2892],[2891,2891]]],[1563847356081,["GJX@GJXAIOU",[[1,2891,"，原因如下："]],[2891,2891],[2897,2897]]],[1563847376437,["GJX@GJXAIOU",[[-1,2948,"\n"]],[2949,2949],[2948,2948]]],[1563847391835,["GJX@GJXAIOU",[[-1,3032,"\n"]],[3033,3033],[3032,3032]]],[1563847408000,["GJX@GJXAIOU",[[1,2975,"；"]],[2975,2975],[2976,2976]]],[1563847409923,["GJX@GJXAIOU",[[-1,2977,"\n"]],[2977,2977],[2976,2976]]],[1563847422774,["GJX@GJXAIOU",[[1,3053,"；"]],[3053,3053],[3054,3054]]],[1563847425162,["GJX@GJXAIOU",[[-1,3055,"\n"]],[3055,3055],[3054,3054]]],[1563847488421,["GJX@GJXAIOU",[[-1,3110,"\n"]],[3111,3111],[3110,3110]]],[1563847504699,["GJX@GJXAIOU",[[-1,3161,"\n"]],[3162,3162],[3161,3161]]],[1563847509317,["GJX@GJXAIOU",[[1,3197,"；"]],[3197,3197],[3198,3198]]],[1563847548556,["GJX@GJXAIOU",[[-1,3199,"\n"]],[3199,3199],[3198,3198]]],[1563847551739,["GJX@GJXAIOU",[[-1,3247,"\n"]],[3248,3248],[3247,3247]]],[1563847555782,["GJX@GJXAIOU",[[-1,3263,"为了解决这个问题"]],[3263,3271],[3263,3263]]],[1563847556195,["GJX@GJXAIOU",[[-1,3264,"\n"]],[3263,3263],[3262,3262]]],[1563847556597,["GJX@GJXAIOU",[[-1,3263,"\n"]],[3262,3262],[3261,3261]]],[1563847559707,["GJX@GJXAIOU",[[-1,3309,"----------------------------------------------------------------------------"]],[3309,3385],[3309,3309]]],[1563847562683,["GJX@GJXAIOU",[[-1,3310,"以上内容，听不懂，没事~~~\n"]],[3309,3324],[3309,3309]]],[1563847572416,["GJX@GJXAIOU",[[1,3263,"- "]],[3263,3263],[3265,3265]]],[1563847633307,["GJX@GJXAIOU",[[-1,3313,"要求\n【第三个知识点】\n记下结论：\n如果是局部内部类要使用所在函数或者方法的局部变量，该变量用【final】修饰\n"]],[3312,3369],[3312,3312]]],[1563847633849,["GJX@GJXAIOU",[[-1,3312,"\n"]],[3312,3312],[3311,3311]]],[1563847645021,["GJX@GJXAIOU",[[-1,3622,"不能修改"],[1,3626,"使用"]],[3622,3622],[3624,3624]]],[1563847652316,["GJX@GJXAIOU",[[1,3624,"final之后就可以了"]],[3624,3624],[3635,3635]]],[1563847675843,["GJX@GJXAIOU",[[-1,3258,"！！！"]],[3261,3261],[3258,3258]]],[1563847676950,["GJX@GJXAIOU",[[1,3258,"。"]],[3258,3258],[3259,3259]]],[1563847718475,["GJX@GJXAIOU",[[1,4011,"\n"]],[3989,3989],[3990,3990]]],[1563847720912,["GJX@GJXAIOU",[[1,3990,"### （）"]],[3990,3990],[3996,3996]]],[1563847722333,["GJX@GJXAIOU",[[1,3995,"三"]],[3995,3995],[3996,3996]]],[1563847726789,["GJX@GJXAIOU",[[1,3997,"匿名内部类"]],[3997,3997],[4002,4002]]],[1563847727144,["GJX@GJXAIOU",[[1,4024,"\n"]],[4002,4002],[4003,4003]]],[1563847741379,["GJX@GJXAIOU",[[1,4003,"package com.qfedu.a_innnerclass;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\n/*\n\t匿名内部类\n\t\t\n\t\t【第四个知识点】\n\t\t\t类的本体\n\t\t\t\t在类声明部分，大括号里面的内容就是累的本体！！！\n\t\t\t\tclass Test {\n\t\t\t\t\t//成员变量\n\t\t\t\t\t//成员方法\n\t\t\t\t}\n\t\t匿名内部类就是没有名字的类，但是有类的本体！！！\n\t\t\n\t\t【第五个知识点】\n\t\t\t看到内部类要认识\n\t\t\t哦，这个就是内部类啊~\n */\n\nabstract class Animal {\n\tint age;\n\t\n\tpublic abstract void test();\n\tabstract public void jump();\n}\n\nclass CodingMonkey extends Animal {\n\n\t//以下两个方法是类的本体！！！\n\t@Override\n\tpublic void test() {\n\t\tSystem.out.println(\"这是类本体中的一个成员方法\");\n\t}\n\n\t@Override\n\tpublic void jump() {\n\t\tSystem.out.println(\"You Jump， I Jump!!!\");\n\t}\n}\n\ninterface A {\n\tint i = 0; // public static final\n\tpublic void testA(); //abstract\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tCodingMonkey cm = new CodingMonkey();\n\t\t\n\t\t//Animal a = cm; 多态，父类的引用指向子类的对象~\n\t\tcm.test();\n\t\tcm.jump();\n\t\t\n\t\t//抽象类有没有自己的类对象！？\n\t\tAnimal ani = new Animal() {\n\t\t\t/*\n\t\t\t Animal是一个抽象类，ani 是抽象类的一个引用类型变量\n\t\t\t \n\t\t\t new Animal() {\n\t\t\t \t发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\t\t\t \t\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\t\t\t \t\n\t\t\t \t这里隐含了一个【继承】关系\n\t\t\t };\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void test() {\n\t\t\t\tSystem.out.println(\"匿名内部类的里面的test方法\");\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void jump() {\n\t\t\t\tSystem.out.println(\"匿名内部类的You jump， I jump\");\n\t\t\t}\n\t\t};\n\t\t\n\t\tani.jump();\n\t\tani.test();\n\t\t\n\t\t//匿名内部类的匿名对象直接调用方法\n\t\tnew A() {\n\t\t\t//这里是一个类【遵从】接口之后，要求实现接口中的抽象方法，这里也是一个【匿名内部类】\n\t\t\t@Override\n\t\t\tpublic void testA() {\n\t\t\t\tSystem.out.println(\"匿名内部类实现interface A中的testA方法\");\n\t\t\t}\n\t\t}.testA();\n\t\t//Java Android开发\n\t\t\n\t\tInteger[] arr = {3, 2, 4, 5, 6, 1};\n\t\t\n\t\t//匿名内部类的匿名对象作为方法的参数\n\t\tArrays.sort(arr, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn o1 - o2;\n\t\t\t}\n\t\t});\n\t\t\n\t\tSystem.out.println(Arrays.toString(arr));\n\t}\n\t\n}\n\n\n\n\n\n\n\n"]],[4003,4003],[5854,5854]]],[1563847744135,["GJX@GJXAIOU",[[1,5847,"··"]],[5847,5847],[5849,5849]]],[1563847745282,["GJX@GJXAIOU",[[-1,5847,"··"]],[5849,5849],[5847,5847]]],[1563847746493,["GJX@GJXAIOU",[[1,5847,"```"]],[5847,5847],[5850,5850]]],[1563847746527,["GJX@GJXAIOU",[[1,5850,"language\n```\n"]],[5850,5850],[5850,5858]]],[1563847747988,["GJX@GJXAIOU",[[-1,5850,"language"],[1,5858,"j"]],[5850,5858],[5851,5851]]],[1563847748456,["GJX@GJXAIOU",[[1,5851,"ava"]],[5851,5851],[5854,5854]]],[1563847750690,["GJX@GJXAIOU",[[-1,5847,"```java"]],[5847,5854],[5847,5847]]],[1563847756411,["GJX@GJXAIOU",[[1,4003,"\n"]],[4002,4002],[4003,4003]]],[1563847757093,["GJX@GJXAIOU",[[1,4004,"\n"]],[4003,4003],[4004,4004]]],[1563847758042,["GJX@GJXAIOU",[[1,4004,"```java"]],[4004,4004],[4011,4011]]],[1563847763281,["GJX@GJXAIOU",[[-1,4105,"匿名内部类\n\t\t\n\t\t【第四个知识点】\n\t\t\t类的本体\n\t\t\t\t在类声明部分，大括号里面的内容就是累的本体！！！\n\t\t\t\tclass Test {\n\t\t\t\t\t//成员变量\n\t\t\t\t\t//成员方法\n\t\t\t\t}\n\t\t匿名内部类就是没有名字的类，但是有类的本体！！！\n\t\t\n\t\t【第五个知识点】\n\t\t\t看到内部类要认识\n\t\t\t哦，这个就是内部类啊~"]],[4105,4276],[4105,4105]]],[1563847765236,["GJX@GJXAIOU",[[1,4004,"\n"]],[4003,4003],[4004,4004]]],[1563847765666,["GJX@GJXAIOU",[[1,4004,"匿名内部类\n\t\t\n\t\t【第四个知识点】\n\t\t\t类的本体\n\t\t\t\t在类声明部分，大括号里面的内容就是累的本体！！！\n\t\t\t\tclass Test {\n\t\t\t\t\t//成员变量\n\t\t\t\t\t//成员方法\n\t\t\t\t}\n\t\t匿名内部类就是没有名字的类，但是有类的本体！！！\n\t\t\n\t\t【第五个知识点】\n\t\t\t看到内部类要认识\n\t\t\t哦，这个就是内部类啊~"]],[4004,4004],[4175,4175]]],[1563847769506,["GJX@GJXAIOU",[[-1,4053,"累"]],[4054,4054],[4053,4053]]],[1563847770052,["GJX@GJXAIOU",[[1,4053,"l"]],[4053,4053],[4054,4054]]],[1563847770278,["GJX@GJXAIOU",[[1,4053," "],[1,4054," ei"]],[4054,4054],[4057,4057]]],[1563847771489,["GJX@GJXAIOU",[[-1,4054,"lei "]],[4057,4057],[4053,4053]]],[1563847772854,["GJX@GJXAIOU",[[1,4053,"类"]],[4053,4053],[4054,4054]]],[1563847795978,["GJX@GJXAIOU",[[-1,4004,"匿名内部类"]],[4004,4009],[4004,4004]]],[1563847796258,["GJX@GJXAIOU",[[-1,4004,"\n"]],[4004,4004],[4003,4003]]],[1563847798954,["GJX@GJXAIOU",[[-1,4003,"\n"]],[4004,4004],[4003,4003]]],[1563847799281,["GJX@GJXAIOU",[[-1,4002,"\n"]],[4003,4003],[4002,4002]]],[1563847803028,["GJX@GJXAIOU",[[-1,4266,"/*\n\t\n */\n"]],[4266,4275],[4266,4266]]],[1563847803402,["GJX@GJXAIOU",[[-1,4266,"\n"]],[4266,4266],[4265,4265]]],[1563848253556,["GJX@GJXAIOU",[[1,5560,"、、"]],[5560,5560],[5562,5562]]],[1563848254193,["GJX@GJXAIOU",[[-1,5560,"、、"]],[5562,5562],[5560,5560]]],[1563848259441,["GJX@GJXAIOU",[[1,5560,"//new A（0"]],[5560,5560],[5569,5569]]],[1563848260713,["GJX@GJXAIOU",[[-1,5567,"（0"]],[5569,5569],[5567,5567]]],[1563848270278,["GJX@GJXAIOU",[[1,5567,"(){}可以看成匿名对象"]],[5567,5567],[5579,5579]]],[1563849010048,["GJX@GJXAIOU",[[1,5893,"\n"]],[5863,5863],[5864,5864]]],[1563849010202,["GJX@GJXAIOU",[[1,5894,"\n"]],[5864,5864],[5865,5865]]],[1563849010352,["GJX@GJXAIOU",[[1,5895,"\n"]],[5865,5865],[5866,5866]]],[1563849020258,["GJX@GJXAIOU",[[1,5866,"## 多线程与多进程"]],[5866,5866],[5876,5876]]],[1563849020688,["GJX@GJXAIOU",[[1,5906,"\n"]],[5876,5876],[5877,5877]]],[1563849021530,["GJX@GJXAIOU",[[1,5907,"\n"]],[5877,5877],[5878,5878]]],[1563849022582,["GJX@GJXAIOU",[[1,5878,"package com.qfedu.b_thread;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\n\n/*\n 多线程和多进程：\n \t线程：\n \t\t在一个软件中，负责不同功能的子程序，称之为线程。\n \t进程：\n \t\t是在计算机系统中所有正在运行的程序，都可以看做是一个进程。多进程的操作系统\n \t\n 计算机问题：\n \twindows操作系统是一个多任务的操作系统，为什么windows可以同时执行多任务？？？\n \t\n \t从表面上看：windows的确可以同时执行不同的应用程序，同时执行：eclipse 还有 feiQ\n \t\t玩游戏，一些电脑管家类的软件，会提示你，关闭掉占用网络较多和内存占用较多的程序\n \t\t为什么？？？\n \t\t\t降低CPU，内存，网络的使用率，给游戏提供更好运行环境\n \t\n \t从实际出发：\n \t\t每一个CPU的内核在一个时间片内只能执行一件事情。但是这个时间片非常的短，不同的程序会出现在不同的时间片上，\n\t\t不断的切换，所以你感觉是在同时运行\n \t                现在的CPU基本上都是多核多线程的\n \t\n \t\n \t面试题：\n \t\t请问一个Java程序再运行的时候，最少有几个线程？？？\n \t\t\n \t\t最少是两个线程：1. main线程，即主线程   2. JVM的垃圾回收机制\n \t\t\n \t多线程的好处：\n \t\t1. 可以让一个程序同时执行不同的任务\n \t\t2. 可以提高资源的利用率\n \t\n \t多线程的弊端：\n \t\t1. 线程安全问题 之前的迭代器\n \t\t2. 增加了CPU负担\n \t\t3. 降低了其他程序CPU的执行概率\n \t\t4. 容易出现死锁行为\n \t\n \t如何创建一个线程：\n \t\t两种方式：\n \t\t\t1. 自定义一个类继承Thread类，那么这个类就可以看做是一个多线程类\n \t\t\t2. 要求【重写】Thread类里面的run方法，把需要执行的自定义线程代码放入这个run方法\n */\n\nclass MyThread extends Thread {\n\t//要求重写【run】方法\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"自定义Thread类:\" + i);\n\t\t}\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//1. 创建自定义线程类的类对象\n\t\tMyThread mt = new MyThread();\n\t\t\n\t\t//2. 启动线程 。\n\t\t//mt.run();尝试调用n方法 相当于调用了一个普通的方法，而不是一个线程\n\t\tmt.start(); //启动线程的方式，会发现，MyThread线程和main线程在抢占CPU资源\n\t\t\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"main线程：\" + i);\n\t\t}\n\t\t\n\t\t/*\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\n\t\tlist.add(\"hello, how do you do\");\n\t\tlist.add(\"I'm fine, Thank you , and you\");\n\t\tlist.add(\"I'm fine, too\");\n\t\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tSystem.out.println(list.get(i));\n\t\t}\n\t\t\n\t\tfor (String string : list) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\tIterator<String> it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t\t*/\n\t}\n}\n\n\n\n\n\n\n\n\n\n"]],[5878,5878],[7660,7660]]],[1563849025448,["GJX@GJXAIOU",[[1,5878,"\n"]],[5877,5877],[5878,5878]]],[1563849026402,["GJX@GJXAIOU",[[1,5878,"```"]],[5878,5878],[5881,5881]]],[1563849026438,["GJX@GJXAIOU",[[1,5881,"language\n```\n"]],[5881,5881],[5881,5889]]],[1563849027282,["GJX@GJXAIOU",[[-1,5881,"language"],[1,5889,"j"]],[5881,5889],[5882,5882]]],[1563849027639,["GJX@GJXAIOU",[[1,5882,"ava"]],[5882,5882],[5885,5885]]],[1563849030546,["GJX@GJXAIOU",[[-1,5886,"```"]],[5886,5889],[5886,5886]]],[1563849035391,["GJX@GJXAIOU",[[1,7661,"```"]],[7661,7661],[7664,7664]]],[1563849043174,["GJX@GJXAIOU",[[-1,5974,"/*\n 多线程和多进程：\n \t线程：\n \t\t在一个软件中，负责不同功能的子程序，称之为线程。\n \t进程：\n \t\t是在计算机系统中所有正在运行的程序，都可以看做是一个进程。多进程的操作系统\n \t\n 计算机问题：\n \twindows操作系统是一个多任务的操作系统，为什么windows可以同时执行多任务？？？\n \t\n \t从表面上看：windows的确可以同时执行不同的应用程序，同时执行：eclipse 还有 feiQ\n \t\t玩游戏，一些电脑管家类的软件，会提示你，关闭掉占用网络较多和内存占用较多的程序\n \t\t为什么？？？\n \t\t\t降低CPU，内存，网络的使用率，给游戏提供更好运行环境\n \t\n \t从实际出发：\n \t\t每一个CPU的内核在一个时间片内只能执行一件事情。但是这个时间片非常的短，不同的程序会出现在不同的时间片上，\n\t\t不断的切换，所以你感觉是在同时运行\n \t                现在的CPU基本上都是多核多线程的\n \t\n \t\n \t面试题：\n \t\t请问一个Java程序再运行的时候，最少有几个线程？？？\n \t\t\n \t\t最少是两个线程：1. main线程，即主线程   2. JVM的垃圾回收机制\n \t\t\n \t多线程的好处：\n \t\t1. 可以让一个程序同时执行不同的任务\n \t\t2. 可以提高资源的利用率\n \t\n \t多线程的弊端：\n \t\t1. 线程安全问题 之前的迭代器\n \t\t2. 增加了CPU负担\n \t\t3. 降低了其他程序CPU的执行概率\n \t\t4. 容易出现死锁行为\n \t\n \t如何创建一个线程：\n \t\t两种方式：\n \t\t\t1. 自定义一个类继承Thread类，那么这个类就可以看做是一个多线程类\n \t\t\t2. 要求【重写】Thread类里面的run方法，把需要执行的自定义线程代码放入这个run方法\n */"]],[5974,6742],[5974,5974]]],[1563849045081,["GJX@GJXAIOU",[[-1,5975,"\n"]],[5975,5975],[5974,5974]]],[1563849045439,["GJX@GJXAIOU",[[-1,5974,"\n"]],[5974,5974],[5973,5973]]],[1563849046350,["GJX@GJXAIOU",[[-1,5887,"\n"]],[5887,5887],[5886,5886]]],[1563849046751,["GJX@GJXAIOU",[[-1,5886,"\n"]],[5886,5886],[5885,5885]]],[1563849049217,["GJX@GJXAIOU",[[1,5877,"/*\n 多线程和多进程：\n \t线程：\n \t\t在一个软件中，负责不同功能的子程序，称之为线程。\n \t进程：\n \t\t是在计算机系统中所有正在运行的程序，都可以看做是一个进程。多进程的操作系统\n \t\n 计算机问题：\n \twindows操作系统是一个多任务的操作系统，为什么windows可以同时执行多任务？？？\n \t\n \t从表面上看：windows的确可以同时执行不同的应用程序，同时执行：eclipse 还有 feiQ\n \t\t玩游戏，一些电脑管家类的软件，会提示你，关闭掉占用网络较多和内存占用较多的程序\n \t\t为什么？？？\n \t\t\t降低CPU，内存，网络的使用率，给游戏提供更好运行环境\n \t\n \t从实际出发：\n \t\t每一个CPU的内核在一个时间片内只能执行一件事情。但是这个时间片非常的短，不同的程序会出现在不同的时间片上，\n\t\t不断的切换，所以你感觉是在同时运行\n \t                现在的CPU基本上都是多核多线程的\n \t\n \t\n \t面试题：\n \t\t请问一个Java程序再运行的时候，最少有几个线程？？？\n \t\t\n \t\t最少是两个线程：1. main线程，即主线程   2. JVM的垃圾回收机制\n \t\t\n \t多线程的好处：\n \t\t1. 可以让一个程序同时执行不同的任务\n \t\t2. 可以提高资源的利用率\n \t\n \t多线程的弊端：\n \t\t1. 线程安全问题 之前的迭代器\n \t\t2. 增加了CPU负担\n \t\t3. 降低了其他程序CPU的执行概率\n \t\t4. 容易出现死锁行为\n \t\n \t如何创建一个线程：\n \t\t两种方式：\n \t\t\t1. 自定义一个类继承Thread类，那么这个类就可以看做是一个多线程类\n \t\t\t2. 要求【重写】Thread类里面的run方法，把需要执行的自定义线程代码放入这个run方法\n */"]],[5877,5877],[6645,6645]]],[1563849051566,["GJX@GJXAIOU",[[-1,5877,"/*"]],[5877,5879],[5877,5877]]],[1563849052007,["GJX@GJXAIOU",[[-1,5877,"\n"]],[5877,5877],[5876,5876]]],[1563849056502,["GJX@GJXAIOU",[[-1,6639," */"]],[6639,6642],[6639,6639]]],[1563849061970,["GJX@GJXAIOU",[[-1,5877," "],[-1,5887," \t"],[-1,5893," \t\t"],[-1,5921," \t"],[-1,5927," \t\t"],[-1,5968," \t"],[-1,5971," "],[-1,5979," \t"],[-1,6027," \t"],[-1,6030," \t"],[-1,6082," \t\t"],[-1,6125," \t\t"],[-1,6135," \t\t\t"],[-1,6167," \t"],[-1,6170," \t"],[-1,6179," \t\t"],[-1,6238,"\t"],[-1,6257," \t                "],[-1,6293," \t"],[-1,6296," \t"],[-1,6299," \t"],[-1,6306," \t\t"],[-1,6337," \t\t"],[-1,6341," \t\t"],[-1,6383," \t\t"],[-1,6387," \t"],[-1,6397," \t\t"],[-1,6420," \t\t"],[-1,6437," \t"],[-1,6440," \t"],[-1,6450," \t\t"],[-1,6470," \t\t"],[-1,6485," \t\t"],[-1,6507," \t\t"],[-1,6522," \t"],[-1,6525," \t"],[-1,6537," \t\t"],[-1,6546," \t\t\t"],[-1,6587," \t\t\t"]],[5877,6638],[5877,6637]]],[1563849067547,["GJX@GJXAIOU",[[1,5877,"- "]],[5877,5877],[5879,5879]]],[1563849070792,["GJX@GJXAIOU",[[1,5877,"\n"]],[5876,5876],[5877,5877]]],[1563849074337,["GJX@GJXAIOU",[[1,5889,"  - "]],[5889,5889],[5893,5893]]],[1563849076602,["GJX@GJXAIOU",[[1,5922,"  - "]],[5922,5922],[5926,5926]]],[1563849083929,["GJX@GJXAIOU",[[1,6149,"- "]],[6149,6149],[6151,6151]]],[1563849087481,["GJX@GJXAIOU",[[1,6252,"- "]],[6252,6252],[6254,6254]]],[1563849093449,["GJX@GJXAIOU",[[1,6328,"- "]],[6328,6328],[6330,6330]]],[1563849096612,["GJX@GJXAIOU",[[1,6373,"- "]],[6373,6373],[6375,6375]]],[1563849099962,["GJX@GJXAIOU",[[1,6444,"  - "]],[6444,6444],[6448,6448]]],[1563849102910,["GJX@GJXAIOU",[[-1,6444,"  "]],[6444,6446],[6444,6444]]],[1563849106438,["GJX@GJXAIOU",[[-1,6464," "]],[6465,6465],[6464,6464]]],[1563849107624,["GJX@GJXAIOU",[[-1,6500," "]],[6501,6501],[6500,6500]]],[1563849109255,["GJX@GJXAIOU",[[-1,6385," "]],[6386,6386],[6385,6385]]],[1563849110103,["GJX@GJXAIOU",[[-1,6401," "]],[6402,6402],[6401,6401]]],[1563849110751,["GJX@GJXAIOU",[[-1,6412," "]],[6413,6413],[6412,6412]]],[1563849111367,["GJX@GJXAIOU",[[-1,6430," "]],[6431,6431],[6430,6430]]],[1563849113062,["GJX@GJXAIOU",[[-1,6340," "]],[6341,6341],[6340,6340]]],[1563849113841,["GJX@GJXAIOU",[[-1,6359," "]],[6360,6360],[6359,6359]]],[1563849122975,["GJX@GJXAIOU",[[-1,6287,"\n"]],[6287,6287],[6286,6286]]],[1563849148321,["GJX@GJXAIOU",[[1,6539,"\n"]],[6538,6538],[6539,6539]]],[1563849149089,["GJX@GJXAIOU",[[1,6540,"\n"]],[6539,6539],[6540,6540]]],[1563849149895,["GJX@GJXAIOU",[[1,6540,"xia"]],[6540,6540],[6543,6543]]],[1563849150895,["GJX@GJXAIOU",[[-1,6540,"xia"]],[6543,6543],[6540,6540]]],[1563849171100,["GJX@GJXAIOU",[[1,6540,"下面是使用迭代器出现的同时操作问题；"]],[6540,6540],[6558,6558]]],[1563849174631,["GJX@GJXAIOU",[[-1,6652,"\n"]],[6651,6651],[6650,6650]]],[1563849202272,["GJX@GJXAIOU",[[1,7300,"  "]],[7300,7300],[7302,7302]]],[1563849203336,["GJX@GJXAIOU",[[-1,7299,"\t  "],[1,7302,"\n"]],[7302,7302],[7300,7300]]],[1563849206651,["GJX@GJXAIOU",[[1,7300,"        、、"]],[7300,7300],[7310,7310]]],[1563849207312,["GJX@GJXAIOU",[[-1,7308,"、、"]],[7310,7310],[7308,7308]]],[1563849209580,["GJX@GJXAIOU",[[1,7308,"//SA"]],[7308,7308],[7312,7312]]],[1563849210040,["GJX@GJXAIOU",[[-1,7310,"SA"]],[7312,7312],[7310,7310]]],[1563849211387,["GJX@GJXAIOU",[[1,7310,"san"]],[7310,7310],[7313,7313]]],[1563849212593,["GJX@GJXAIOU",[[-1,7310,"san"]],[7313,7313],[7310,7310]]],[1563849216190,["GJX@GJXAIOU",[[1,7310,"三种迭代"]],[7310,7310],[7314,7314]]],[1563849218783,["GJX@GJXAIOU",[[-1,7312,"迭代"]],[7314,7314],[7312,7312]]],[1563849221628,["GJX@GJXAIOU",[[1,7312,"遍历方式："]],[7312,7312],[7317,7317]]],[1563849239378,["GJX@GJXAIOU",[[-1,7126,"\t\t"],[1,7128,"\n"]],[7128,7128],[7127,7127]]],[1563849239536,["GJX@GJXAIOU",[[1,7128,"\n"]],[7127,7127],[7128,7128]]],[1563849239687,["GJX@GJXAIOU",[[1,7129,"\n"]],[7128,7128],[7129,7129]]],[1563849239808,["GJX@GJXAIOU",[[1,7130,"\n"]],[7129,7129],[7130,7130]]],[1563849620157,["GJX@GJXAIOU",[[-1,7130,"\n"]],[7130,7130],[7129,7129]]]],null,"GJX@GJXAIOU"],["14e5fe50-fd7f-4b7a-8624-8f74b343c2c2",1563880026257,"# JavaDay23\n\n## 一、复习\n### （一）Comparable 和 Comparator\n两者都是接口\n- Comparable 是一个接口，给自定义类提供比较方式，遵从 Comparable<T>的实现类，必须实现 compareTo（T o）方法\n- Comparator 是一个接口，用来做自定义比较器，遵从 Comparator<T>接口的实现类，必须使用 compare(T o1, T o2)；\n\n方法1.实现自定义比较器\n```java\nclass MyCompare implements Comparator<Student>{\n  @override\n  public int compare(Student o1, Student o2){\n    return o1.getAge() - o2.getAge();\n  }\n}\n```\n上面这种方式：好理解但是需要重新定义一个类，而且可能会统一放在一个包里面，略显复杂；\n\n方法 2：使用匿名内部类的匿名对象\n格式：`Arrays.sort(T[] t, Comparator<? extends T> com)`\n```java\nStudent[] array = {stu1, stu2, stu3};\n\nArrays.sort(array.new Comparator<Student>{\n  @Override\n  public int compare(Student o1, Student o2){\n    return o1.getAge() - o2.getAge();\n  }\n});\n```\n\n\n## 二、内部类\n\n人：\n成员变量：\n\t体重，性别，血液\n成员方法：\n\t睡觉，吃饭，跑步，敲代码\n\n心脏：\n\t心跳 行为\n\t会使用到人体内的成员变量，血液\n\t心室 和 心房\n\n- [特征]\n在人类中，有些东西，比如内脏，用成员方法或者成员变量描述都显着有点不太合适，因为这些内脏首先是属于【人体的一部分】，而且会使用【人体的一些属性】，但是又拥有自己的一些【特征】\n\n[思考]\n能不能把这些器官，认为是一个类，一个属于人类内部的一个类\n\n成员内部类！！！\n\n- 内部类：\n\t1.成员内部类\n\t2.局部内部类\n\t3.匿名内部类\n\n\n### （一）成员内部类\n- 内部类和外部类不得不说的秘密：\n  - 1.成员内部类可以使用外部类的成员变量和成员方法, 不管用什么权限修饰，不管是private还是public都可以使用，因为，这是在内部类的内部使用\n  - 2.【在Outer类的外部创建Outer的Inner对象】\n\t格式如下:\n\t\t外部类名.内部类名  内部类对象名 = new 外部类名().new 内部类名();\n\t例如：\n\t\tOuter.inner inner = new Outer().new Inner();\n【第一个知识点】:普通的成员变量和成员方法，在没有对象的情况下，不能再类外使用\n  - 3.如果内部类和外部类存在同名的成员变量，这里**默认是就近原则**，使用的是内部类的成员变量\n如果想要使用外部类的成员变量的：\n格式： \n外部类名.this.同名成员变量;\n外部类名.this.同名成员方法(参数列表);\n  -  4.在外部类的类内方法中，可以创建内部类的对象\n \t\t\t\t\n```java\npackage com.qfedu.a_innnerclass;\n\nclass Outer {\n\tint num = 100; //外部类的成员变量\n\t\n\tprivate static int s = 10;\n\t\n\tclass Inner { //这是Outer类的一个成员内部类\n\t\tint i = 10; //内部类的成员变量\n\t\tint num = 50;\n\t\tpublic void testInner() {\n\t\t\tSystem.out.println(\"内部类的成员方法\");\n\t\t\ttestOuter();\n\t\t\tSystem.out.println(\"内部类成员变量:\" + num); // 50 就近原则\n\t\t\tSystem.out.println(\"外部类成员变量:\" + Outer.this.num);\n\t\t\t\n\t\t\ttest();\n\t\t\tOuter.this.test();\n\t\t\t\n\t\t\tSystem.out.println(s);\n\t\t\ttestStatic();\n\t\t}\t\t\n\t\t\n\t\tpublic void test() {\n\t\t\tSystem.out.println(\"内部类的test方法\");\n\t\t}\n\t}\n\t\n\tpublic void testOuter() {\n\t\tSystem.out.println(\"外部类的成员方法\");\n\t}\n\t\n\tpublic void test() {\n\t\tSystem.out.println(\"外部类的test方法\");\n\t}\n\t\n\t//为了将内部类的语句输出\n\t//在【外部类】中定义【内部类的类对象】\n\tpublic void createInnnerClass() {\n\t\t//外部类的成员方法中调用内部类的构造方法，通过new关键字来创建内部类类对象使用\n\t\tInner inner = new Inner();\n\t\tinner.testInner();\n\t}\n\t\n\tpublic static void testStatic() {\n\t\tSystem.out.println(\"外部类的静态成员方法~\");\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n        //在外部类中创建内部类对象\n//\t\tOuter outer = new Outer();\t\n//\t\touter.createInnnerClass();\n\t\t\n\t\t//在类外创建一个Inner类对象\n\t\t//数据类型是Outer.Inner 表示是外部类里面的内部类数据类型\n\t\tOuter.Inner inner = new Outer().new Inner();\n\t\tinner.testInner();\n\t}\n}\n```\n\n### （二）局部内部类\n放在方法内或者函数内的类，称之为局部内部类\n\n- 【第二个知识点】\n  - 1.局部变量的\n    - 【生存期】\n从声明定义位置开始，到代码块结束\n    - 【作用域】\n只能在当前代码块内部\n  - 2.类对象的\n    - 【生存期】\n通过new关键字创建的时候开始，JVM垃圾回收机制调用时，销毁该对象，结束\n    - 【作用域】\n那个引用变量拥有这个对象的首地址，哪里就是他的作用域\n\n- 说明：\n局部内部类只能在函数或者方法中使用，方法或者函数外不能使用\n\n- 发现：\n局部内部类中，貌似不能【修改】所在方法或者函数中的局部变量，原因如下：\n\n局部内部类的对象是在函数或者说方法的内部通过JVM借助于new关键字，和局部内部类的构造方法，创建的一个类对象，并且该对象是由JVM的垃圾回收机制回收的；\n但是局部变量n是在testInner()方法中，而这个局部变量的n的生存周期是和testInner()该方法的大括号有关，生存期和作用域都是在大括号以内；\n如果在testInner()方法的内部，MethodInner()这个类是方法中的局部内部类，而创建的对象在使用testInner()方法中的局部变量时，因为对象的销毁时间不确定，但是一定是晚于局部变量的销毁的，这里隐含了一个类对象【延长了局部变量生存期】，这个是不符合Java原理的；\n这就是为什么不能修改，因为有可能在这个对象被使用的时候，局部变量的内存空间已经被内存收回，换而言之这个局部变量不存在了。\n\n- 【解决方法】\n如果是在局部内部类中使用的所在函数或者方法的局部变量，该变量用final修饰\n\n```java\npackage com.qfedu.a_innnerclass;\n\nclass Test {\n\tint num = 100;\n\t\n\tpublic void testInner() {\n\t\t//这里是在方法中定义了一个类,这个类只能在当前函数或者方法中使用\n\t\tfinal int n = 10;\n\t\tclass MethodInner {\n\t\t\tint i = 10;\n\t\t\t\n\t\t\tpublic void function() {\n\t\t\t\tSystem.out.println(i);\n\t\t\t\tnum = 20;\n\t\t\t\tSystem.out.println(num);\n\t\t\t\t//n = 20;//使用final之后就可以了\n\t\t\t\tSystem.out.println(n);\n\t\t\t\tSystem.out.println(\"局部内部类的成员方法\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tMethodInner methodInner = new MethodInner();\n\t\tmethodInner.function();\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n//\t\tfor (int i = 0; i < 10; i++) {\n//\t\t\tSystem.out.println(i);\n//\t\t}\n\t\t\n//\t\tSystem.out.println(i);\n\t\tnew Test().testInner();\n\t}\n}\n```\n\n### （三）匿名内部类\t\t\n\t\t【第四个知识点】\n\t\t\t类的本体\n\t\t\t\t在类声明部分，大括号里面的内容就是类 的本体！！！\n\t\t\t\tclass Test {\n\t\t\t\t\t//成员变量\n\t\t\t\t\t//成员方法\n\t\t\t\t}\n\t\t匿名内部类就是没有名字的类，但是有类的本体！！！\n\t\t\n\t\t【第五个知识点】\n\t\t\t看到内部类要认识\n\t\t\t哦，这个就是内部类啊~\n```java\npackage com.qfedu.a_innnerclass;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nabstract class Animal {\n\tint age;\n\t\n\tpublic abstract void test();\n\tabstract public void jump();\n}\n\nclass CodingMonkey extends Animal {\n\n\t//以下两个方法是类的本体！！！\n\t@Override\n\tpublic void test() {\n\t\tSystem.out.println(\"这是类本体中的一个成员方法\");\n\t}\n\n\t@Override\n\tpublic void jump() {\n\t\tSystem.out.println(\"You Jump， I Jump!!!\");\n\t}\n}\n\ninterface A {\n\tint i = 0; // public static final\n\tpublic void testA(); //abstract\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tCodingMonkey cm = new CodingMonkey();\n\t\t\n\t\t//Animal a = cm; 多态，父类的引用指向子类的对象~\n\t\tcm.test();\n\t\tcm.jump();\n\t\t\n\t\t//抽象类有没有自己的类对象！？\n\t\tAnimal ani = new Animal() {\n\t\t\t/*\n\t\t\t Animal是一个抽象类，ani 是抽象类的一个引用类型变量\n\t\t\t \n\t\t\t new Animal() {\n\t\t\t \t发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\t\t\t \t\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\t\t\t \t\n\t\t\t \t这里隐含了一个【继承】关系\n\t\t\t };\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void test() {\n\t\t\t\tSystem.out.println(\"匿名内部类的里面的test方法\");\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void jump() {\n\t\t\t\tSystem.out.println(\"匿名内部类的You jump， I jump\");\n\t\t\t}\n\t\t};\n\t\t\n\t\tani.jump();\n\t\tani.test();\n\t\t\n\t\t//匿名内部类的匿名对象直接调用方法\n\t\tnew A() {\n\t\t\t//这里是一个类【遵从】接口之后，要求实现接口中的抽象方法，这里也是一个【匿名内部类】\n\t\t\t@Override\n\t\t\tpublic void testA() {\n\t\t\t\tSystem.out.println(\"匿名内部类实现interface A中的testA方法\");\n\t\t\t}\n\t\t}.testA();//new A(){}可以看成匿名对象\n\t\t//Java Android开发\n\t\t\n\t\tInteger[] arr = {3, 2, 4, 5, 6, 1};\n\t\t\n\t\t//匿名内部类的匿名对象作为方法的参数\n\t\tArrays.sort(arr, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn o1 - o2;\n\t\t\t}\n\t\t});\n\t\t\n\t\tSystem.out.println(Arrays.toString(arr));\n\t}\n\t\n}\n\n```\n\n\n## 多线程与多进程\n\n- 多线程和多进程：\n  - 线程：\n在一个软件中，负责不同功能的子程序，称之为线程。\n  - 进程：\n是在计算机系统中所有正在运行的程序，都可以看做是一个进程。多进程的操作系统\n\n计算机问题：\nwindows操作系统是一个多任务的操作系统，为什么windows可以同时执行多任务？？？\n\n从表面上看：windows的确可以同时执行不同的应用程序，同时执行：eclipse 还有 feiQ\n玩游戏，一些电脑管家类的软件，会提示你，关闭掉占用网络较多和内存占用较多的程序\n为什么？？？\n降低CPU，内存，网络的使用率，给游戏提供更好运行环境\n\n- 从实际出发：\n每一个CPU的内核在一个时间片内只能执行一件事情。但是这个时间片非常的短，不同的程序会出现在不同的时间片上，\n\t不断的切换，所以你感觉是在同时运行\n现在的CPU基本上都是多核多线程的\n\n\n- 面试题：\n请问一个Java程序再运行的时候，最少有几个线程？？？\n最少是两个线程：1. main线程，即主线程   2. JVM的垃圾回收机制\n\n- 多线程的好处：\n1.可以让一个程序同时执行不同的任务\n2.可以提高资源的利用率\n\n- 多线程的弊端：\n1.线程安全问题 之前的迭代器\n2.增加了CPU负担\n3.降低了其他程序CPU的执行概率\n4.容易出现死锁行为\n\n- 如何创建一个线程：\n两种方式：\n1.自定义一个类继承Thread类，那么这个类就可以看做是一个多线程类\n2.要求【重写】Thread类里面的run方法，把需要执行的自定义线程代码放入这个run方法\n\n\n下面是使用迭代器出现的同时操作问题；\n```java\npackage com.qfedu.b_thread;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\nclass MyThread extends Thread {\n\t//要求重写【run】方法\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"自定义Thread类:\" + i);\n\t\t}\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//1. 创建自定义线程类的类对象\n\t\tMyThread mt = new MyThread();\n\t\t\n\t\t//2. 启动线程 。\n\t\t//mt.run();尝试调用n方法 相当于调用了一个普通的方法，而不是一个线程\n\t\tmt.start(); //启动线程的方式，会发现，MyThread线程和main线程在抢占CPU资源\n\t\t\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"main线程：\" + i);\n\t\t}\n\n\n\n\n\t\t/*\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\n\t\tlist.add(\"hello, how do you do\");\n\t\tlist.add(\"I'm fine, Thank you , and you\");\n\t\tlist.add(\"I'm fine, too\");\n\n        //三种遍历方式：\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tSystem.out.println(list.get(i));\n\t\t}\n\t\t\n\t\tfor (String string : list) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\tIterator<String> it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t\t*/\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1563879980818,["GJX@GJXAIOU",[[1,12,"@toc"]],[12,12],[16,16]]],[1563879982715,["GJX@GJXAIOU",[[1,17,"\n"]],[16,16],[17,17]]],[1563879983962,["GJX@GJXAIOU",[[1,12,"\n"]],[12,12],[13,13]]],[1563879985557,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563879987246,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1563879987387,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1563879987494,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1563879987528,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1563880171316,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1563880172002,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1563880178102,["GJX@GJXAIOU",[[1,11,"- xian"]],[11,11],[17,17]]],[1563880179610,["GJX@GJXAIOU",[[-1,12," xian"]],[17,17],[12,12]]],[1563880183205,["GJX@GJXAIOU",[[1,12," 线程"]],[12,12],[15,15]]],[1563880183479,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1563880185862,["GJX@GJXAIOU",[[1,16,"- 进程"]],[16,16],[20,20]]],[1563880186355,["GJX@GJXAIOU",[[1,21,"\n"]],[20,20],[21,21]]],[1563880192670,["GJX@GJXAIOU",[[1,21,"style: summer"]],[21,21],[34,34]]],[1563880470426,["GJX@GJXAIOU",[[1,5915,"s "]],[5915,5915],[5916,5916]]],[1563880470647,["GJX@GJXAIOU",[[1,5916,"an"]],[5916,5916],[5918,5918]]],[1563880470876,["GJX@GJXAIOU",[[1,5919," "]],[5918,5918],[5919,5919]]],[1563880473738,["GJX@GJXAIOU",[[-1,5915,"san  "]],[5919,5919],[5915,5915]]],[1563880476760,["GJX@GJXAIOU",[[1,5915,"三、"]],[5915,5915],[5917,5917]]],[1563881564018,["GJX@GJXAIOU",[[1,178,"；即进行两个对象的比较；"]],[178,178],[190,190]]],[1563881576447,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1563881578706,["GJX@GJXAIOU",[[1,11,"- 内部类"]],[11,11],[16,16]]],[1563881589067,["GJX@GJXAIOU",[[1,57," 内部类和线程"]],[57,57],[64,64]]],[1563881613436,["GJX@GJXAIOU",[[1,58,"**"],[1,64,"**"]],[58,64],[58,68]]],[1563881628856,["GJX@GJXAIOU",[[-1,58,"**"]],[60,60],[58,58]]],[1563881629899,["GJX@GJXAIOU",[[-1,64,"**"]],[66,66],[64,64]]],[1563882847503,["GJX@GJXAIOU",[[-1,783,"人：\n成员变量：\n\t体重，性别，血液\n成员方法：\n\t睡觉，吃饭，跑步，敲代码\n\n心脏：\n\t心跳 行为\n\t会使用到人体内的成员变量，血液\n\t心室 和 心房"]],[783,859],[783,783]]],[1563882847929,["GJX@GJXAIOU",[[-1,784,"\n"]],[783,783],[782,782]]],[1563882851423,["GJX@GJXAIOU",[[-1,783,"\n"]],[783,783],[782,782]]],[1563882858309,["GJX@GJXAIOU",[[-1,785,"[特征]"]],[789,789],[785,785]]],[1563882862042,["GJX@GJXAIOU",[[1,785,"生活实例："]],[785,785],[790,790]]],[1563882866071,["GJX@GJXAIOU",[[-1,879,"\n"]],[880,880],[879,879]]],[1563882870894,["GJX@GJXAIOU",[[-1,879,"[思考]"]],[879,883],[879,879]]],[1563882871254,["GJX@GJXAIOU",[[-1,879,"\n"]],[879,879],[878,878]]],[1563882874158,["GJX@GJXAIOU",[[-1,878,"\n"]],[879,879],[878,878]]],[1563882874872,["GJX@GJXAIOU",[[1,878,"；"]],[878,878],[879,879]]],[1563882879574,["GJX@GJXAIOU",[[-1,909,"成员内部类！！"]],[909,916],[909,909]]],[1563882879965,["GJX@GJXAIOU",[[-1,908,"\n"]],[909,909],[908,908]]],[1563882880895,["GJX@GJXAIOU",[[-1,908,"！"]],[909,909],[908,908]]],[1563882881190,["GJX@GJXAIOU",[[-1,909,"\n"]],[908,908],[907,907]]],[1563882904717,["GJX@GJXAIOU",[[1,838,"**"],[1,878,"**"]],[838,878],[838,882]]],[1563882911081,["GJX@GJXAIOU",[[1,911,"。"]],[911,911],[912,912]]],[1563882916609,["GJX@GJXAIOU",[[1,919,"分类"]],[919,919],[921,921]]],[1563882933857,["GJX@GJXAIOU",[[-1,974,"不得不说的秘密"],[1,981,"笔记"]],[974,974],[976,976]]],[1563882934862,["GJX@GJXAIOU",[[-1,974,"笔记"]],[976,976],[974,974]]],[1563882938360,["GJX@GJXAIOU",[[1,974,"比较"]],[974,974],[976,976]]],[1563882951263,["GJX@GJXAIOU",[[1,1056,"。"]],[1056,1056],[1057,1057]]],[1563882959641,["GJX@GJXAIOU",[[1,997,"所有"]],[997,997],[999,999]]],[1563882963414,["GJX@GJXAIOU",[[1,984,"**"],[1,1008,"**"]],[984,1008],[984,1012]]],[1563882976841,["GJX@GJXAIOU",[[1,1107,"·"]],[1107,1107],[1108,1108]]],[1563882977982,["GJX@GJXAIOU",[[-1,1107,"·"]],[1108,1108],[1107,1107]]],[1563882978394,["GJX@GJXAIOU",[[1,1107,"`"]],[1107,1107],[1108,1108]]],[1563882980059,["GJX@GJXAIOU",[[1,1150,"`"]],[1150,1150],[1151,1151]]],[1563883005510,["GJX@GJXAIOU",[[-1,1157,"\t\t"]],[1159,1159],[1157,1157]]],[1563883005831,["GJX@GJXAIOU",[[-1,1156,"\n"]],[1157,1157],[1156,1156]]],[1563883010889,["GJX@GJXAIOU",[[1,1156,"`"]],[1156,1156],[1157,1157]]],[1563883015272,["GJX@GJXAIOU",[[1,1201,"`"]],[1201,1201],[1202,1202]]],[1563883046543,["GJX@GJXAIOU",[[1,1249,"**"],[1,1294,"**"]],[1249,1294],[1249,1298]]],[1563883048872,["GJX@GJXAIOU",[[-1,1272,"**"]],[1274,1274],[1272,1272]]],[1563883050305,["GJX@GJXAIOU",[[-1,1279,"**"]],[1281,1281],[1279,1279]]],[1563883057489,["GJX@GJXAIOU",[[1,1317,"`"]],[1317,1317],[1318,1318]]],[1563883059001,["GJX@GJXAIOU",[[1,1336,"`"]],[1336,1336],[1337,1337]]],[1563883059962,["GJX@GJXAIOU",[[1,1335,"`"]],[1335,1335],[1336,1336]]],[1563883060753,["GJX@GJXAIOU",[[1,1361,"`"]],[1361,1361],[1362,1362]]],[1563883070620,["GJX@GJXAIOU",[[1,1299,"**"],[1,1309,"**h"]],[1299,1309],[1312,1312]]],[1563883070653,["GJX@GJXAIOU",[[1,1311," "]],[1312,1312],[1313,1313]]],[1563883071012,["GJX@GJXAIOU",[[1,1313,"e "]],[1313,1313],[1315,1315]]],[1563883071950,["GJX@GJXAIOU",[[-1,1311," he "]],[1315,1315],[1311,1311]]],[1563883074764,["GJX@GJXAIOU",[[1,1311,"和陈燕"]],[1311,1311],[1314,1314]]],[1563883075325,["GJX@GJXAIOU",[[-1,1312,"陈燕"]],[1314,1314],[1312,1312]]],[1563883136217,[null,[[-1,1313,"h"],[1,1314,"*"]],[1313,1313],[1315,1315]]],[1563883136217,[null,[[1,1313,"h"],[-1,1313,"*"]],[1315,1315],[1313,1313]]],[1563883080764,["GJX@GJXAIOU",[[1,1312,"成员方法"]],[1312,1312],[1316,1316]]],[1563883084687,["GJX@GJXAIOU",[[-1,1320,"\n"]],[1321,1321],[1320,1320]]],[1563883085039,["GJX@GJXAIOU",[[-1,1319,"："]],[1320,1320],[1319,1319]]],[1563883196235,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563883196235,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563883191815,["GJX@GJXAIOU",[[1,2606,"\n"]],[2604,2604],[2605,2605]]],[1563883196122,["GJX@GJXAIOU",[[1,2605,"运行"]],[2605,2605],[2607,2607]]],[1563883257162,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563883257162,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563883197823,["GJX@GJXAIOU",[[1,2607,"结果："]],[2607,2607],[2610,2610]]],[1563883198046,["GJX@GJXAIOU",[[1,2612,"\n"]],[2610,2610],[2611,2611]]],[1563883200623,["GJX@GJXAIOU",[[1,2611,"```java"]],[2611,2611],[2618,2618]]],[1563883200744,["GJX@GJXAIOU",[[1,2620,"\n"]],[2618,2618],[2619,2619]]],[1563883202453,["GJX@GJXAIOU",[[1,2619,"内部类的成员方法\n外部类的成员方法\n内部类成员变量:50\n外部类成员变量:100\n内部类的test方法\n外部类的test方法\n10\n外部类的静态成员方法~"]],[2619,2619],[2696,2696]]],[1563883203621,["GJX@GJXAIOU",[[1,2698,"\n"]],[2696,2696],[2697,2697]]],[1563883204655,["GJX@GJXAIOU",[[1,2697,"```"]],[2697,2697],[2700,2700]]],[1563883988162,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563883988162,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563883941469,["GJX@GJXAIOU",[[-1,1445,"\n\n"],[1,1447,"   "],[-1,1461,"\t"],[1,1462,"   "],[-1,1487,"\n\t\n\t"],[1,1491,"    "],[-1,1517,"\n\t\n\t"],[1,1521,"   "],[-1,1554,"\t\t"],[1,1556,"  "],[-1,1579,"\t\t"],[1,1581,"  "],[-1,1595,"\t\t"],[1,1597," "],[-1,1623,"\t\t\t"],[1,1626,"         "],[-1,1658,"\t\t\t"],[1,1661,"  "],[-1,1674,"\t\t\t"],[1,1677,"  "],[1,1700,"同名"],[-1,1726,"\t\t\t"],[1,1729,"  //使用  外部类名.this.成员变量名  获取同名外部成员变量\n  "],[1,1752,"同名"],[-1,1778,"\t\t\t\n\t\t\t"],[1,1785,"  //分别调用内部和外部成员方法\n  "],[-1,1793,"\t\t\t"],[1,1796,"  "],[-1,1814,"\n\t\t\t\n\t\t\t"],[1,1822,"    "],[-1,1845,"\t\t\t"],[1,1848,"  "],[-1,1862,"\t\t}\t\t\n\t\t\n\t\t"],[1,1873,"  }\n\n      "],[-1,1894,"\t\t\t"],[1,1897,"         "],[-1,1931,"\t\t}\n\t}\n\t\n\t"],[1,1941,"  }\n   }//inner    "],[-1,1967,"\t\t"],[1,1969,"      "],[-1,2001,"\t}\n\t\n\t"],[1,2007,"  }\n\n   "],[-1,2028,"\t\t"],[1,2030,"      "],[-1,2064,"\t}\n\t\n\t"],[1,2070,"  }\n\n   "],[-1,2084,"\t"],[1,2085,"  "],[-1,2106,"\t"],[1,2107,"  "],[-1,2141,"\t\t"],[1,2143,"      "],[-1,2185,"\t\t"],[1,2187,"  "],[-1,2214,"\t\t"],[1,2216,"  "],[-1,2235,"\t}\n\t\n\t"],[1,2241,"  }\n\n   "],[-1,2275,"\t\t"],[1,2277,"      "],[-1,2312,"\t"],[1,2313,"  "],[-1,2339,"\t"],[1,2340,"   "],[-1,2387,"  "],[1,2391,"创建内部类对象的方法一："],[-1,2403,"\n//\t\t"],[1,2408," //    "],[-1,2434,"\t\n//\t\t"],[1,2440," //    "],[-1,2466,"\n\t\t\n\t\t"],[1,2472,"   "],[1,2474,"创建内部类对象的方法一："],[-1,2490,"\t\t"],[1,2492,"  "],[-1,2528,"\t\t"],[1,2530,"  "],[-1,2575,"\t\t"],[1,2577,"  "],[-1,2596,"\t"],[1,2597,"  "]],[1413,2600],[2716,2716]]],[1563883949720,["GJX@GJXAIOU",[[1,1445,"\n\n"],[-1,1445,"   "],[1,1462,"\t"],[-1,1462,"   "],[1,1490,"\n\t\n\t"],[-1,1490,"    "],[1,1520,"\n\t\n\t"],[-1,1520,"   "],[1,1556,"\t\t"],[-1,1556,"  "],[1,1581,"\t\t"],[-1,1581,"  "],[1,1597,"\t\t"],[-1,1597," "],[1,1624,"\t\t\t"],[-1,1624,"         "],[1,1665,"\t\t\t"],[-1,1665,"  "],[1,1680,"\t\t\t"],[-1,1680,"  "],[-1,1705,"同名"],[1,1733,"\t\t\t"],[-1,1733,"  //使用  外部类名.this.成员变量名  获取同名外部成员变量\n  "],[-1,1794,"同名"],[1,1822,"\t\t\t\n\t\t\t"],[-1,1822,"  //分别调用内部和外部成员方法\n  "],[1,1850,"\t\t\t"],[-1,1850,"  "],[1,1870,"\n\t\t\t\n\t\t\t"],[-1,1870,"    "],[1,1897,"\t\t\t"],[-1,1897,"  "],[1,1913,"\t\t}\t\t\n\t\t\n\t\t"],[-1,1913,"  }\n\n      "],[1,1945,"\t\t\t"],[-1,1945,"         "],[1,1988,"\t\t}\n\t}\n\t\n\t"],[-1,1988,"  }\n   }//inner    "],[1,2033,"\t\t"],[-1,2033,"      "],[1,2071,"\t}\n\t\n\t"],[-1,2071,"  }\n\n   "],[1,2100,"\t\t"],[-1,2100,"      "],[1,2140,"\t}\n\t\n\t"],[-1,2140,"  }\n\n   "],[1,2162,"\t"],[-1,2162,"  "],[1,2185,"\t"],[-1,2185,"  "],[1,2221,"\t\t"],[-1,2221,"      "],[1,2269,"\t\t"],[-1,2269,"  "],[1,2298,"\t\t"],[-1,2298,"  "],[1,2319,"\t}\n\t\n\t"],[-1,2319,"  }\n\n   "],[1,2361,"\t\t"],[-1,2361,"      "],[1,2402,"\t"],[-1,2402,"  "],[1,2430,"\t"],[-1,2430,"   "],[1,2480,"  "],[-1,2482,"创建内部类对象的方法一："],[1,2506,"\n//\t\t"],[-1,2506," //    "],[1,2539,"\t\n//\t\t"],[-1,2539," //    "],[1,2572,"\n\t\t\n\t\t"],[-1,2572,"   "],[-1,2577,"创建内部类对象的方法一："],[1,2605,"\t\t"],[-1,2605,"  "],[1,2643,"\t\t"],[-1,2643,"  "],[1,2690,"\t\t"],[-1,2690,"  "],[1,2711,"\t"],[-1,2711,"  "]],[2716,2716],[1413,2600]]],[1563883952199,["GJX@GJXAIOU",[[-1,1488,"\t"],[1,1489,""],[-1,1518,"\t"],[1,1519,""],[1,1700,"同名"],[1,1729,"//使用  外部类名.this.成员变量名  获取同名外部成员变量\n\t\t\t"],[1,1752,"同名"],[1,1781,"\n\t\t\t//分别调用内部和外部成员方法"],[-1,1815,"\t\t\t"],[1,1818,""],[-1,1865,"\t\t"],[-1,1868,"\t\t"],[-1,1937,""],[1,1937,"//inner\n"],[-1,2004,"\t"],[1,2005,""],[-1,2067,"\t"],[1,2068,""],[-1,2238,"\t"],[1,2239,""],[-1,2381,"        "],[1,2389,"\t\t"],[1,2391,"创建内部类对象的方法一："],[-1,2434,"\t"],[-1,2467,"\t\t"],[1,2474,"创建内部类对象的方法一："]],[1413,2600],[2671,2671]]],[1563884048161,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563884048161,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563884006892,["GJX@GJXAIOU",[[1,2991,"**"],[1,3020,"**"]],[2991,3020],[2991,3024]]],[1563884029924,["GJX@GJXAIOU",[[1,3032,"**"],[1,3061,"**"]],[3032,3061],[3032,3065]]],[1563884228165,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563884228165,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563884226268,["GJX@GJXAIOU",[[1,4164,"\n"]],[4162,4162],[4163,4163]]],[1563884227807,["GJX@GJXAIOU",[[1,4163,"chengxu"]],[4163,4163],[4170,4170]]],[1563884228059,["GJX@GJXAIOU",[[-1,4169,"u"]],[4170,4170],[4169,4169]]],[1563884288165,[null,[[-1,1317,"h"],[1,1318,"*"]],[1317,1317],[1319,1319]]],[1563884288165,[null,[[1,1317,"h"],[-1,1317,"*"]],[1319,1319],[1317,1317]]],[1563884229124,["GJX@GJXAIOU",[[-1,4163,"cheng"]],[4168,4168],[4163,4163]]],[1563884235105,["GJX@GJXAIOU",[[1,4163,"程序运行结果："]],[4163,4163],[4170,4170]]],[1563884235510,["GJX@GJXAIOU",[[1,4172,"\n"]],[4170,4170],[4171,4171]]],[1563884238518,["GJX@GJXAIOU",[[1,4171,"```java"]],[4171,4171],[4178,4178]]],[1563884238732,["GJX@GJXAIOU",[[1,4180,"\n"]],[4178,4178],[4179,4179]]],[1563884238925,["GJX@GJXAIOU",[[1,4181,"\n"]],[4179,4179],[4180,4180]]],[1563884240213,["GJX@GJXAIOU",[[1,4180,"```"]],[4180,4180],[4183,4183]]],[1563884241277,["GJX@GJXAIOU",[[1,4179,"10\n20\n10\n局部内部类的成员方法"]],[4179,4179],[4198,4198]]],[1563884251237,["GJX@GJXAIOU",[[-1,4220,"\t"],[-1,4232,"\t"],[-1,4238,"\t"],[-1,4271,"\t"],[-1,4289,"\t"],[-1,4297,"\t"],[-1,4312,"\t"],[-1,4315,"\t"],[-1,4342,"\t"],[-1,4346,"\t"],[-1,4356,"\t"],[-1,4368,"\t"]],[4221,4382],[4220,4370]]],[1563884251791,["GJX@GJXAIOU",[[-1,4219,"\t"],[-1,4230,"\t"],[-1,4236,"\t"],[-1,4267,"\t"],[-1,4284,"\t"],[-1,4292,"\t"],[-1,4305,"\t"],[-1,4308,"\t"],[-1,4334,"\t"],[-1,4336,"\t"],[-1,4346,"\t"],[-1,4357,"\t"]],[4220,4370],[4219,4358]]],[1563884260383,["GJX@GJXAIOU",[[-1,4234,"\t\t"]],[4234,4236],[4234,4234]]],[1563884260715,["GJX@GJXAIOU",[[-1,4233,"\n"]],[4234,4234],[4233,4233]]],[1563884262607,["GJX@GJXAIOU",[[1,4233,":"]],[4233,4233],[4234,4234]]],[1563884271268,["GJX@GJXAIOU",[[1,4262,"\n\t\t"]],[4262,4262],[4265,4265]]],[1563884275599,["GJX@GJXAIOU",[[1,4260,"```"]],[4260,4260],[4263,4263]]],[1563884275633,["GJX@GJXAIOU",[[1,4263,"language\n```\n"]],[4263,4263],[4263,4271]]],[1563884276191,["GJX@GJXAIOU",[[-1,4263,"language"],[1,4271,"j"]],[4263,4271],[4264,4264]]],[1563884277287,["GJX@GJXAIOU",[[1,4264,"ava"]],[4264,4264],[4267,4267]]],[1563884278332,["GJX@GJXAIOU",[[1,4268,"\n"]],[4267,4267],[4268,4268]]],[1563884281382,["GJX@GJXAIOU",[[-1,4278,"class Test {\n\t\t\t//成员变量\n\t\t\t//成员方法\n\t\t}"]],[4278,4314],[4278,4278]]],[1563884283086,["GJX@GJXAIOU",[[1,4268,"class Test {\n\t\t\t//成员变量\n\t\t\t//成员方法\n\t\t}"]],[4268,4268],[4304,4304]]],[1563884286636,["GJX@GJXAIOU",[[-1,4282,"\t\t"]],[4282,4284],[4282,4282]]],[1563884348170,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[-1,4307,"\n"],[1,4308,"\t"],[-1,4312,"}\t"],[1,4314,"\n"],[-1,4338,"\t\t"],[1,4340,"\n\n"],[-1,4348,"\t"],[1,4349,"\n"],[-1,4358,"\t"],[1,4359,"\n"]],[1317,1317],[4360,4360]]],[1563884348170,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[1,4307,"\n"],[-1,4307,"\t"],[1,4312,"}\t"],[-1,4312,"\n"],[1,4337,"\t\t"],[-1,4337,"\n\n"],[1,4347,"\t"],[-1,4347,"\n"],[1,4357,"\t"],[-1,4357,"\n"]],[4360,4360],[1317,1317]]],[1563884288749,["GJX@GJXAIOU",[[-1,4290,"\t\t"]],[4290,4292],[4290,4290]]],[1563884290384,["GJX@GJXAIOU",[[-1,4297,"\t\t"]],[4297,4299],[4297,4297]]],[1563884293484,["GJX@GJXAIOU",[[-1,4307,"\t"]],[4307,4307],[4306,4306]]],[1563884293871,["GJX@GJXAIOU",[[-1,4305,"\n"]],[4306,4306],[4305,4305]]],[1563884294644,["GJX@GJXAIOU",[[-1,4304,"\t\t"]],[4305,4305],[4303,4303]]],[1563884295005,["GJX@GJXAIOU",[[-1,4302,"\n"]],[4303,4303],[4302,4302]]],[1563884296669,["GJX@GJXAIOU",[[1,4302,"\n"]],[4302,4302],[4303,4303]]],[1563884310749,["GJX@GJXAIOU",[[-1,4331,"【第五个知识点】\n\t看到内部类要认识\n\t哦，这个就是内部类啊~"]],[4331,4362],[4331,4331]]],[1563884311104,["GJX@GJXAIOU",[[-1,4331,"\n"]],[4331,4331],[4330,4330]]],[1563884408175,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"]],[1317,1317],[4332,4332]]],[1563884408175,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"]],[4332,4332],[1317,1317]]],[1563884381790,["GJX@GJXAIOU",[[1,6028,"\n"]],[6026,6026],[6027,6027]]],[1563884403028,["GJX@GJXAIOU",[[1,6027,"在使用匿名内部类的过程中，我们需要注意如下几点：\n\n1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。\n2、匿名内部类中是不能定义构造函数的。\n 3、匿名内部类中不能存在任何的静态成员变量和静态方法。\n 4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。\n 5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。"]],[6027,6027],[6240,6240]]],[1563884405136,["GJX@GJXAIOU",[[1,6027,"- "]],[6027,6027],[6029,6029]]],[1563884408071,["GJX@GJXAIOU",[[-1,6054,"\n"]],[6054,6054],[6053,6053]]],[1563884708185,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"],[1,6027,"\n"],[-1,6241,"\n"]],[1317,1317],[6241,6241]]],[1563884708185,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"],[-1,6026,"\n"],[1,6241,"\n"]],[6241,6241],[1317,1317]]],[1563884687109,["GJX@GJXAIOU",[[-1,6021,"\n"]],[6021,6021],[6020,6020]]],[1563884689150,["GJX@GJXAIOU",[[1,6026,"\n"]],[6024,6024],[6025,6025]]],[1563884690974,["GJX@GJXAIOU",[[1,6025,"ch"]],[6025,6025],[6027,6027]]],[1563884691579,["GJX@GJXAIOU",[[-1,6025,"ch"]],[6027,6027],[6025,6025]]],[1563884695390,["GJX@GJXAIOU",[[1,6025,"程序运行结果："]],[6025,6025],[6032,6032]]],[1563884695726,["GJX@GJXAIOU",[[1,6034,"\n"]],[6032,6032],[6033,6033]]],[1563884698581,["GJX@GJXAIOU",[[1,6033,"```java"]],[6033,6033],[6040,6040]]],[1563884698726,["GJX@GJXAIOU",[[1,6042,"\n"]],[6040,6040],[6041,6041]]],[1563884698859,["GJX@GJXAIOU",[[1,6043,"\n"]],[6041,6041],[6042,6042]]],[1563884699950,["GJX@GJXAIOU",[[1,6042,"```"]],[6042,6042],[6045,6045]]],[1563884700196,["GJX@GJXAIOU",[[1,6047,"\n"]],[6045,6045],[6046,6046]]],[1563884701666,["GJX@GJXAIOU",[[1,6041,"这是类本体中的一个成员方法\nYou Jump， I Jump!!!\n匿名内部类的You jump， I jump\n匿名内部类的里面的test方法\n匿名内部类实现interface A中的testA方法\n[1, 2, 3, 4, 5, 6]"]],[6041,6041],[6160,6160]]],[1563884768192,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"],[1,6025,"\n"],[-1,6381,"\n"]],[1317,1317],[6381,6381]]],[1563884768192,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"],[-1,6024,"\n"],[1,6381,"\n"]],[6381,6381],[1317,1317]]],[1563884715709,["GJX@GJXAIOU",[[-1,4371,"\n\n"],[1,4373,"   "],[-1,4397,"\n"],[1,4398," "],[-1,4426,"\n\n"],[1,4428,"   "],[-1,4452,"\t"],[1,4453,"   "],[-1,4461,"\n\t\n\t"],[1,4465,"   "],[-1,4494,"\t"],[1,4495," "],[-1,4523,"\n"],[1,4524," "],[-1,4564,"\t"],[1,4565,"   "],[-1,4582,"\t"],[1,4583,"  "],[-1,4593,"\t"],[1,4594,"  "],[-1,4615,"\t\t"],[1,4617,"      "],[-1,4654,"\t}\n\n\t"],[1,4659,"  }\n\n   "],[-1,4669,"\t"],[1,4670,"  "],[-1,4691,"\t\t"],[1,4693,"      "],[-1,4736,"\t"],[1,4737,"  "],[-1,4756,"\t"],[1,4757,"   "],[-1,4791,"\t"],[1,4792,"  "],[-1,4823,"\n"],[1,4824," "],[-1,4848,"\t"],[1,4849,"   "],[-1,4890,"\t\t"],[1,4892,"      //正常方法： 可以创建CodingMonkey即Animal的子类的对象，进行方法的操作\n  "],[-1,4929,"\n\t\t\n\t\t"],[1,4935,"    "],[-1,4969,"\t\t"],[1,4971,"  "],[-1,4982,"\t\t"],[1,4984,"  "],[-1,4994,"\n\t\t\n\t\t//抽象类有没有自己的类对象！？\n\t\t"],[1,5019,"      //匿名对象类： 也可以直接通过匿名对象类进行直接操作\n  "],[-1,5047,"\t\t\t"],[1,5050,"         "],[-1,5053,"\t\t\t"],[-1,5087,"\n\t\t\t \n\t\t\t"],[1,5096,"   "],[-1,5111,"\n\t\t\t \t"],[1,5117,"  "],[-1,5141,"\t\t\t"],[-1,5145,"\t"],[-1,5161,"\n\t\t\t"],[-1,5166,"\t"],[-1,5174,"\n\t\t\t"],[-1,5179,"\t"],[-1,5201,"\n\t\t\t \t\n\t\t\t \t"],[1,5213,"   "],[-1,5227,"\n\t\t\t"],[-1,5232,"\t"],[-1,5272,"\n\t\t\t \t\n\t\t\t \t"],[1,5284,"    "],[-1,5297,"\n\t\t\t"],[1,5301," "],[-1,5304,"\n\t\t\t"],[-1,5311,"\n\t\t\t"],[1,5315,"  "],[-1,5325,"\t\t\t"],[1,5328,"  "],[-1,5349,"\t\t\t\t"],[1,5353,"            "],[-1,5392,"\t\t\t}\n\t\t\t\n\t\t\t"],[1,5404,"  }\n\n         "],[-1,5414,"\t\t\t"],[1,5417,"  "],[-1,5438,"\t\t\t\t"],[1,5442,"            "],[-1,5488,"\t\t\t}\n\t\t};\n\t\t\n\t\t"],[1,5503,"  }\n      };    "],[-1,5515,"\t\t"],[1,5517,"  "],[-1,5528,"\n\t\t\n\t\t"],[1,5534,"      //以上更加简洁的使用方式：    "],[-1,5553,"\t\t"],[1,5555,"  "],[-1,5565,"\t\t\t"],[1,5568,"         "],[-1,5612,"\t\t\t"],[1,5615,"  "],[-1,5625,"\t\t\t"],[1,5628,"  "],[-1,5650,"\t\t\t\t"],[1,5654,"            "],[-1,5705,"\t\t\t}\n\t\t"],[1,5712,"  }\n      "],[-1,5742,"\t\t"],[1,5744,"  "],[-1,5760,"\n\t\t\n\t\t"],[1,5766,"    "],[-1,5801,"\n\t\t\n\t\t"],[1,5807,"    "],[-1,5827,"\t\t"],[1,5829,"  "],[-1,5875,"\t\t\t"],[1,5878,"         "],[-1,5888,"\t\t\t"],[1,5891,"  "],[-1,5936,"\t\t\t\t"],[1,5940,"            "],[-1,5956,"\t\t\t}\n\t\t});\n\t\t\n\t\t"],[1,5972,"  }\n      });    "],[-1,6014,"\t"],[1,6015,"  "],[-1,6017,"\t"]],[4339,6020],[6114,6114]]],[1563884719160,["GJX@GJXAIOU",[[1,4371,"\n\n"],[-1,4371,"   "],[1,4398,"\n"],[-1,4398," "],[1,4427,"\n\n"],[-1,4427,"   "],[1,4454,"\t"],[-1,4454,"   "],[1,4465,"\n\t\n\t"],[-1,4465,"   "],[1,4497,"\t"],[-1,4497," "],[1,4526,"\n"],[-1,4526," "],[1,4567,"\t"],[-1,4567,"   "],[1,4587,"\t"],[-1,4587,"  "],[1,4599,"\t"],[-1,4599,"  "],[1,4622,"\t\t"],[-1,4622,"      "],[1,4665,"\t}\n\n\t"],[-1,4665,"  }\n\n   "],[1,4683,"\t"],[-1,4683,"  "],[1,4706,"\t\t"],[-1,4706,"      "],[1,4755,"\t"],[-1,4755,"  "],[1,4776,"\t"],[-1,4776,"   "],[1,4813,"\t"],[-1,4813,"  "],[1,4846,"\n"],[-1,4846," "],[1,4871,"\t"],[-1,4871,"   "],[1,4915,"\t\t"],[-1,4915,"      //正常方法： 可以创建CodingMonkey即Animal的子类的对象，进行方法的操作\n  "],[1,5006,"\n\t\t\n\t\t"],[-1,5006,"    "],[1,5044,"\t\t"],[-1,5044,"  "],[1,5057,"\t\t"],[-1,5057,"  "],[1,5069,"\n\t\t\n\t\t//抽象类有没有自己的类对象！？\n\t\t"],[-1,5069,"      //匿名对象类： 也可以直接通过匿名对象类进行直接操作\n  "],[1,5133,"\t\t\t"],[-1,5133,"         "],[1,5145,"\t\t\t"],[1,5176,"\n\t\t\t \n\t\t\t"],[-1,5176,"   "],[1,5194,"\n\t\t\t \t"],[-1,5194,"  "],[1,5220,"\t\t\t"],[1,5221,"\t"],[1,5236,"\n\t\t\t"],[1,5237,"\t"],[1,5244,"\n\t\t\t"],[1,5245,"\t"],[1,5266,"\n\t\t\t \t\n\t\t\t \t"],[-1,5266,"   "],[1,5283,"\n\t\t\t"],[1,5284,"\t"],[1,5323,"\n\t\t\t \t\n\t\t\t \t"],[-1,5323,"    "],[1,5340,"\n\t\t\t"],[-1,5340," "],[1,5344,"\n\t\t\t"],[1,5347,"\n\t\t\t"],[-1,5347,"  "],[1,5359,"\t\t\t"],[-1,5359,"  "],[1,5382,"\t\t\t\t"],[-1,5382,"            "],[1,5433,"\t\t\t}\n\t\t\t\n\t\t\t"],[-1,5433,"  }\n\n         "],[1,5457,"\t\t\t"],[-1,5457,"  "],[1,5480,"\t\t\t\t"],[-1,5480,"            "],[1,5538,"\t\t\t}\n\t\t};\n\t\t\n\t\t"],[-1,5538,"  }\n      };    "],[1,5566,"\t\t"],[-1,5566,"  "],[1,5579,"\n\t\t\n\t\t"],[-1,5579,"      //以上更加简洁的使用方式：    "],[1,5622,"\t\t"],[-1,5622,"  "],[1,5634,"\t\t\t"],[-1,5634,"         "],[1,5687,"\t\t\t"],[-1,5687,"  "],[1,5699,"\t\t\t"],[-1,5699,"  "],[1,5723,"\t\t\t\t"],[-1,5723,"            "],[1,5786,"\t\t\t}\n\t\t"],[-1,5786,"  }\n      "],[1,5826,"\t\t"],[-1,5826,"  "],[1,5844,"\n\t\t\n\t\t"],[-1,5844,"    "],[1,5883,"\n\t\t\n\t\t"],[-1,5883,"    "],[1,5907,"\t\t"],[-1,5907,"  "],[1,5955,"\t\t\t"],[-1,5955,"         "],[1,5974,"\t\t\t"],[-1,5974,"  "],[1,6021,"\t\t\t\t"],[-1,6021,"            "],[1,6049,"\t\t\t}\n\t\t});\n\t\t\n\t\t"],[-1,6049,"  }\n      });    "],[1,6108,"\t"],[-1,6108,"  "],[1,6112,"\t"]],[6114,6114],[4339,6020]]],[1563884721889,["GJX@GJXAIOU",[[-1,4462,"\t"],[1,4464,""],[1,4742,"\n\n"],[1,4890,"\t\t//正常方法： 可以创建CodingMonkey即Animal的子类的对象，进行方法的操作\n"],[-1,4930,"\t\t"],[1,4933,""],[-1,4995,"\t\t"],[1,4997,"\n"],[-1,5002,"抽象类有没有自己的类对象！？"],[1,5016,"匿名对象类： 也可以直接通过匿名对象类进行直接操作"],[-1,5088,"\t\t\t "],[1,5093,""],[-1,5202,"\t\t\t \t"],[1,5208,""],[-1,5273,"\t\t\t \t"],[1,5279,""],[-1,5397,"\t\t\t"],[1,5401,""],[-1,5498,"\t\t"],[1,5501,""],[1,5529,"\n\n"],[1,5531,"//以上更加简洁的使用方式：\n"],[-1,5761,"\t\t"],[1,5764,""],[-1,5802,"\t\t"],[1,5805,""],[-1,5967,"\t\t"],[1,5970,""],[-1,6017,"\t"]],[4339,6020],[6068,6068]]],[1563885128206,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"],[-1,4371,"\n"],[1,4372,";"],[-1,4397,"\n"],[1,4398,";"],[-1,4426,"\n"],[1,4427,";"],[-1,4452,"\t"],[1,4453,"\n"],[1,4461,";"],[-1,4463,"\t"],[-1,4493,"\t"],[1,4494,"\n"],[-1,4522,"\n"],[1,4523,";"],[-1,4563,"\t"],[1,4564,"\n"],[-1,4581,"\t"],[1,4582,"\n"],[-1,4592,"\t"],[1,4593,"\n"],[1,4614,"\n"],[-1,4616,"\t"],[1,4653,"\n"],[-1,4657,"\t"],[-1,4668,"\t"],[1,4669,"\n"],[-1,4690,"\t"],[1,4691,"\n"],[-1,4735,"\t"],[1,4736,"\n"],[-1,4757,"\t"],[1,4758,"\n"],[-1,4792,"\t"],[1,4793,"\n"],[-1,4824,"\n"],[1,4825,"t"],[-1,4849,"\t"],[1,4850,"\n"],[1,4891,"\n"],[-1,4941,"\t"],[1,4978,";"],[-1,4982,"\t"],[1,5016,"\n"],[-1,5018,"\t"],[-1,5029,"\t"],[1,5030,"\n"],[1,5041,";"],[-1,5074,"\t"],[-1,5104,"\t"],[1,5105,"\n"],[-1,5110,"\t"],[1,5111,"\n"],[1,5144,"量"],[-1,5146,"\t"],[1,5164,"{"],[-1,5169,"\t"],[1,5194,"\n"],[-1,5197,"\t\t"],[1,5199," "],[1,5214,"法"],[-1,5218,"\t\t"],[1,5220," "],[1,5227,"体"],[-1,5231,"\t\t"],[1,5233," "],[1,5254,"字"],[-1,5261,"\t"],[1,5275,"】"],[-1,5279,"\t\t"],[1,5281," "],[1,5320,"i"],[-1,5326,"\t"],[1,5340,"系"],[-1,5341,"\t"],[1,5347,";"],[-1,5348,"\t"],[1,5354,"/"],[-1,5355,"\t"],[1,5368,"\n"],[-1,5371,"\t"],[-1,5392,"\t"],[1,5393,"\n"],[1,5435,"\n"],[-1,5444,"\t"],[-1,5454,"\t"],[1,5455,"\n"],[-1,5478,"\t"],[1,5479,"\n"],[1,5528,"\n"],[-1,5539,"\t"],[-1,5553,"\t"],[1,5554,"\n"],[1,5566,";"],[-1,5589,"\t"],[1,5608,"\n"],[-1,5610,"\t"],[1,5620,"\n"],[-1,5623,"\t"],[-1,5667,"\t"],[1,5668,"\n"],[-1,5680,"\t"],[1,5681,"\n"],[-1,5705,"\t"],[1,5706,"\n"],[1,5760,"\n"],[-1,5765,"\t"],[-1,5797,"\t"],[1,5798,"\n"],[1,5815,"发"],[-1,5817,"\t"],[1,5854,";"],[-1,5856,"\t"],[-1,5878,"\t"],[1,5879,"\n"],[1,5925,"\n"],[-1,5929,"\t"],[-1,5939,"\t"],[1,5940,"\n"],[1,5987,"\n"],[-1,5991,"\t"],[1,6007,"\n"],[-1,6019,"\t"],[-1,6063,"\t\t}\t"],[1,6067,"\n\t}\n"],[1,6073,"\n"],[-1,6429,"\n"],[1,6430,""]],[1317,1317],[6430,6430]]],[1563885128206,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"],[1,4370,"\n"],[-1,4370,";"],[1,4396,"\n"],[-1,4396,";"],[1,4425,"\n"],[-1,4425,";"],[1,4451,"\t"],[-1,4451,"\n"],[-1,4460,";"],[1,4463,"\t"],[1,4492,"\t"],[-1,4492,"\n"],[1,4521,"\n"],[-1,4521,";"],[1,4562,"\t"],[-1,4562,"\n"],[1,4580,"\t"],[-1,4580,"\n"],[1,4591,"\t"],[-1,4591,"\n"],[-1,4613,"\n"],[1,4616,"\t"],[-1,4652,"\n"],[1,4657,"\t"],[1,4667,"\t"],[-1,4667,"\n"],[1,4689,"\t"],[-1,4689,"\n"],[1,4734,"\t"],[-1,4734,"\n"],[1,4756,"\t"],[-1,4756,"\n"],[1,4791,"\t"],[-1,4791,"\n"],[1,4823,"\n"],[-1,4823,"t"],[1,4848,"\t"],[-1,4848,"\n"],[-1,4890,"\n"],[1,4941,"\t"],[-1,4977,";"],[1,4982,"\t"],[-1,5015,"\n"],[1,5018,"\t"],[1,5028,"\t"],[-1,5028,"\n"],[-1,5040,";"],[1,5074,"\t"],[1,5103,"\t"],[-1,5103,"\n"],[1,5109,"\t"],[-1,5109,"\n"],[-1,5143,"量"],[1,5146,"\t"],[-1,5163,"{"],[1,5169,"\t"],[-1,5193,"\n"],[1,5197,"\t\t"],[-1,5197," "],[-1,5213,"法"],[1,5218,"\t\t"],[-1,5218," "],[-1,5226,"体"],[1,5231,"\t\t"],[-1,5231," "],[-1,5253,"字"],[1,5261,"\t"],[-1,5274,"】"],[1,5279,"\t\t"],[-1,5279," "],[-1,5319,"i"],[1,5326,"\t"],[-1,5339,"系"],[1,5341,"\t"],[-1,5346,";"],[1,5348,"\t"],[-1,5353,"/"],[1,5355,"\t"],[-1,5367,"\n"],[1,5371,"\t"],[1,5391,"\t"],[-1,5391,"\n"],[-1,5434,"\n"],[1,5444,"\t"],[1,5453,"\t"],[-1,5453,"\n"],[1,5477,"\t"],[-1,5477,"\n"],[-1,5527,"\n"],[1,5539,"\t"],[1,5552,"\t"],[-1,5552,"\n"],[-1,5565,";"],[1,5589,"\t"],[-1,5607,"\n"],[1,5610,"\t"],[-1,5619,"\n"],[1,5623,"\t"],[1,5666,"\t"],[-1,5666,"\n"],[1,5679,"\t"],[-1,5679,"\n"],[1,5704,"\t"],[-1,5704,"\n"],[-1,5759,"\n"],[1,5765,"\t"],[1,5796,"\t"],[-1,5796,"\n"],[-1,5814,"发"],[1,5817,"\t"],[-1,5853,";"],[1,5856,"\t"],[1,5877,"\t"],[-1,5877,"\n"],[-1,5924,"\n"],[1,5929,"\t"],[1,5938,"\t"],[-1,5938,"\n"],[-1,5986,"\n"],[1,5991,"\t"],[-1,6006,"\n"],[1,6019,"\t"],[1,6062,"\t\t}\t"],[-1,6062,"\n\t}\n"],[-1,6072,"\n"],[1,6429,"\n"],[-1,6429,""]],[6430,6430],[1317,1317]]],[1563885100499,["GJX@GJXAIOU",[[-1,6536,"计算机问题：\nwindows操作系统是一个多任务的操作系统，为什么windows可以同时执行多任务？？？\n\n从表面上看：windows的确可以同时执行不同的应用程序，同时执行：eclipse 还有 feiQ\n玩游戏，一些电脑管家类的软件，会提示你，关闭掉占用网络较多和内存占用较多的程序\n为什么？？？\n降低CPU，内存，网络的使用率，给游戏提供更好运行环境"]],[6536,6714],[6536,6536]]],[1563885101062,["GJX@GJXAIOU",[[-1,6537,"\n"]],[6536,6536],[6535,6535]]],[1563885104283,["GJX@GJXAIOU",[[-1,6536,"\n"]],[6536,6536],[6535,6535]]],[1563885107478,["GJX@GJXAIOU",[[-1,6600,"\t"]],[6600,6601],[6600,6600]]],[1563885107837,["GJX@GJXAIOU",[[-1,6599,"\n"]],[6600,6600],[6599,6599]]],[1563885110571,["GJX@GJXAIOU",[[-1,6616,"\n"]],[6617,6617],[6616,6616]]],[1563885111302,["GJX@GJXAIOU",[[1,6616,","]],[6616,6616],[6617,6617]]],[1563885115497,["GJX@GJXAIOU",[[1,6634,"."]],[6634,6634],[6635,6635]]],[1563885118228,["GJX@GJXAIOU",[[-1,6634,"."]],[6635,6635],[6634,6634]]],[1563885118862,["GJX@GJXAIOU",[[1,6634,"."]],[6634,6634],[6635,6635]]],[1563885119885,["GJX@GJXAIOU",[[-1,6634,"."]],[6635,6635],[6634,6634]]],[1563885120670,["GJX@GJXAIOU",[[1,6634,"。"]],[6634,6634],[6635,6635]]],[1563885188201,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"],[-1,4371,"\n"],[1,4372,";"],[-1,4397,"\n"],[1,4398,";"],[-1,4426,"\n"],[1,4427,";"],[-1,4452,"\t"],[1,4453,"\n"],[1,4461,";"],[-1,4463,"\t"],[-1,4493,"\t"],[1,4494,"\n"],[-1,4522,"\n"],[1,4523,";"],[-1,4563,"\t"],[1,4564,"\n"],[-1,4581,"\t"],[1,4582,"\n"],[-1,4592,"\t"],[1,4593,"\n"],[1,4614,"\n"],[-1,4616,"\t"],[1,4653,"\n"],[-1,4657,"\t"],[-1,4668,"\t"],[1,4669,"\n"],[-1,4690,"\t"],[1,4691,"\n"],[-1,4735,"\t"],[1,4736,"\n"],[-1,4757,"\t"],[1,4758,"\n"],[-1,4792,"\t"],[1,4793,"\n"],[-1,4824,"\n"],[1,4825,"t"],[-1,4849,"\t"],[1,4850,"\n"],[1,4891,"\n"],[-1,4941,"\t"],[1,4978,";"],[-1,4982,"\t"],[1,5016,"\n"],[-1,5018,"\t"],[-1,5029,"\t"],[1,5030,"\n"],[1,5041,";"],[-1,5074,"\t"],[-1,5104,"\t"],[1,5105,"\n"],[-1,5110,"\t"],[1,5111,"\n"],[1,5144,"量"],[-1,5146,"\t"],[1,5164,"{"],[-1,5169,"\t"],[1,5194,"\n"],[-1,5197,"\t\t"],[1,5199," "],[1,5214,"法"],[-1,5218,"\t\t"],[1,5220," "],[1,5227,"体"],[-1,5231,"\t\t"],[1,5233," "],[1,5254,"字"],[-1,5261,"\t"],[1,5275,"】"],[-1,5279,"\t\t"],[1,5281," "],[1,5320,"i"],[-1,5326,"\t"],[1,5340,"系"],[-1,5341,"\t"],[1,5347,";"],[-1,5348,"\t"],[1,5354,"/"],[-1,5355,"\t"],[1,5368,"\n"],[-1,5371,"\t"],[-1,5392,"\t"],[1,5393,"\n"],[1,5435,"\n"],[-1,5444,"\t"],[-1,5454,"\t"],[1,5455,"\n"],[-1,5478,"\t"],[1,5479,"\n"],[1,5528,"\n"],[-1,5539,"\t"],[-1,5553,"\t"],[1,5554,"\n"],[1,5566,";"],[-1,5589,"\t"],[1,5608,"\n"],[-1,5610,"\t"],[1,5620,"\n"],[-1,5623,"\t"],[-1,5667,"\t"],[1,5668,"\n"],[-1,5680,"\t"],[1,5681,"\n"],[-1,5705,"\t"],[1,5706,"\n"],[1,5760,"\n"],[-1,5765,"\t"],[-1,5797,"\t"],[1,5798,"\n"],[1,5815,"发"],[-1,5817,"\t"],[1,5854,";"],[-1,5856,"\t"],[-1,5878,"\t"],[1,5879,"\n"],[1,5925,"\n"],[-1,5929,"\t"],[-1,5939,"\t"],[1,5940,"\n"],[1,5987,"\n"],[-1,5991,"\t"],[1,6007,"\n"],[-1,6019,"\t"],[-1,6063,"\t\t}\t"],[1,6067,"\n\t}\n"],[1,6073,"\n"],[-1,6431,"\n"],[-1,6599,"\t"],[1,6600,"，"],[1,6616,"行"],[-1,6617,"\n"],[-1,6634,"。"],[1,6636,"。"]],[1317,1317],[6637,6637]]],[1563885188202,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"],[1,4370,"\n"],[-1,4370,";"],[1,4396,"\n"],[-1,4396,";"],[1,4425,"\n"],[-1,4425,";"],[1,4451,"\t"],[-1,4451,"\n"],[-1,4460,";"],[1,4463,"\t"],[1,4492,"\t"],[-1,4492,"\n"],[1,4521,"\n"],[-1,4521,";"],[1,4562,"\t"],[-1,4562,"\n"],[1,4580,"\t"],[-1,4580,"\n"],[1,4591,"\t"],[-1,4591,"\n"],[-1,4613,"\n"],[1,4616,"\t"],[-1,4652,"\n"],[1,4657,"\t"],[1,4667,"\t"],[-1,4667,"\n"],[1,4689,"\t"],[-1,4689,"\n"],[1,4734,"\t"],[-1,4734,"\n"],[1,4756,"\t"],[-1,4756,"\n"],[1,4791,"\t"],[-1,4791,"\n"],[1,4823,"\n"],[-1,4823,"t"],[1,4848,"\t"],[-1,4848,"\n"],[-1,4890,"\n"],[1,4941,"\t"],[-1,4977,";"],[1,4982,"\t"],[-1,5015,"\n"],[1,5018,"\t"],[1,5028,"\t"],[-1,5028,"\n"],[-1,5040,";"],[1,5074,"\t"],[1,5103,"\t"],[-1,5103,"\n"],[1,5109,"\t"],[-1,5109,"\n"],[-1,5143,"量"],[1,5146,"\t"],[-1,5163,"{"],[1,5169,"\t"],[-1,5193,"\n"],[1,5197,"\t\t"],[-1,5197," "],[-1,5213,"法"],[1,5218,"\t\t"],[-1,5218," "],[-1,5226,"体"],[1,5231,"\t\t"],[-1,5231," "],[-1,5253,"字"],[1,5261,"\t"],[-1,5274,"】"],[1,5279,"\t\t"],[-1,5279," "],[-1,5319,"i"],[1,5326,"\t"],[-1,5339,"系"],[1,5341,"\t"],[-1,5346,";"],[1,5348,"\t"],[-1,5353,"/"],[1,5355,"\t"],[-1,5367,"\n"],[1,5371,"\t"],[1,5391,"\t"],[-1,5391,"\n"],[-1,5434,"\n"],[1,5444,"\t"],[1,5453,"\t"],[-1,5453,"\n"],[1,5477,"\t"],[-1,5477,"\n"],[-1,5527,"\n"],[1,5539,"\t"],[1,5552,"\t"],[-1,5552,"\n"],[-1,5565,";"],[1,5589,"\t"],[-1,5607,"\n"],[1,5610,"\t"],[-1,5619,"\n"],[1,5623,"\t"],[1,5666,"\t"],[-1,5666,"\n"],[1,5679,"\t"],[-1,5679,"\n"],[1,5704,"\t"],[-1,5704,"\n"],[-1,5759,"\n"],[1,5765,"\t"],[1,5796,"\t"],[-1,5796,"\n"],[-1,5814,"发"],[1,5817,"\t"],[-1,5853,";"],[1,5856,"\t"],[1,5877,"\t"],[-1,5877,"\n"],[-1,5924,"\n"],[1,5929,"\t"],[1,5938,"\t"],[-1,5938,"\n"],[-1,5986,"\n"],[1,5991,"\t"],[-1,6006,"\n"],[1,6019,"\t"],[1,6062,"\t\t}\t"],[-1,6062,"\n\t}\n"],[-1,6072,"\n"],[1,6431,"\n"],[1,6598,"\t"],[-1,6598,"，"],[-1,6615,"行"],[1,6617,"\n"],[1,6633,"。"],[-1,6634,"。"]],[6637,6637],[1317,1317]]],[1563885180283,["GJX@GJXAIOU",[[1,6715,"**"],[1,6721,"**"]],[6715,6721],[6715,6725]]],[1563885183117,["GJX@GJXAIOU",[[1,6762,"**"],[1,6768,"**"]],[6762,6768],[6762,6772]]],[1563885248201,[null,[[-1,1317,"h"],[1,1318,"*"],[-1,4170,"x"],[1,4171,"\n"],[-1,4204,"\n"],[-1,4219,"\t"],[1,4220,"\n"],[1,4233,"体"],[-1,4234,"\t"],[1,4260,"\n"],[1,4303,"\t"],[-1,4304,"}\t"],[-1,4330,"\t"],[1,4331,"\n"],[-1,4371,"\n"],[1,4372,";"],[-1,4397,"\n"],[1,4398,";"],[-1,4426,"\n"],[1,4427,";"],[-1,4452,"\t"],[1,4453,"\n"],[1,4461,";"],[-1,4463,"\t"],[-1,4493,"\t"],[1,4494,"\n"],[-1,4522,"\n"],[1,4523,";"],[-1,4563,"\t"],[1,4564,"\n"],[-1,4581,"\t"],[1,4582,"\n"],[-1,4592,"\t"],[1,4593,"\n"],[1,4614,"\n"],[-1,4616,"\t"],[1,4653,"\n"],[-1,4657,"\t"],[-1,4668,"\t"],[1,4669,"\n"],[-1,4690,"\t"],[1,4691,"\n"],[-1,4735,"\t"],[1,4736,"\n"],[-1,4757,"\t"],[1,4758,"\n"],[-1,4792,"\t"],[1,4793,"\n"],[-1,4824,"\n"],[1,4825,"t"],[-1,4849,"\t"],[1,4850,"\n"],[1,4891,"\n"],[-1,4941,"\t"],[1,4978,";"],[-1,4982,"\t"],[1,5016,"\n"],[-1,5018,"\t"],[-1,5029,"\t"],[1,5030,"\n"],[1,5041,";"],[-1,5074,"\t"],[-1,5104,"\t"],[1,5105,"\n"],[-1,5110,"\t"],[1,5111,"\n"],[1,5144,"量"],[-1,5146,"\t"],[1,5164,"{"],[-1,5169,"\t"],[1,5194,"\n"],[-1,5197,"\t\t"],[1,5199," "],[1,5214,"法"],[-1,5218,"\t\t"],[1,5220," "],[1,5227,"体"],[-1,5231,"\t\t"],[1,5233," "],[1,5254,"字"],[-1,5261,"\t"],[1,5275,"】"],[-1,5279,"\t\t"],[1,5281," "],[1,5320,"i"],[-1,5326,"\t"],[1,5340,"系"],[-1,5341,"\t"],[1,5347,";"],[-1,5348,"\t"],[1,5354,"/"],[-1,5355,"\t"],[1,5368,"\n"],[-1,5371,"\t"],[-1,5392,"\t"],[1,5393,"\n"],[1,5435,"\n"],[-1,5444,"\t"],[-1,5454,"\t"],[1,5455,"\n"],[-1,5478,"\t"],[1,5479,"\n"],[1,5528,"\n"],[-1,5539,"\t"],[-1,5553,"\t"],[1,5554,"\n"],[1,5566,";"],[-1,5589,"\t"],[1,5608,"\n"],[-1,5610,"\t"],[1,5620,"\n"],[-1,5623,"\t"],[-1,5667,"\t"],[1,5668,"\n"],[-1,5680,"\t"],[1,5681,"\n"],[-1,5705,"\t"],[1,5706,"\n"],[1,5760,"\n"],[-1,5765,"\t"],[-1,5797,"\t"],[1,5798,"\n"],[1,5815,"发"],[-1,5817,"\t"],[1,5854,";"],[-1,5856,"\t"],[-1,5878,"\t"],[1,5879,"\n"],[1,5925,"\n"],[-1,5929,"\t"],[-1,5939,"\t"],[1,5940,"\n"],[1,5987,"\n"],[-1,5991,"\t"],[1,6007,"\n"],[-1,6019,"\t"],[-1,6063,"\t\t}\t"],[1,6067,"\n\t}\n"],[1,6073,"\n"],[-1,6431,"\n"],[-1,6599,"\t"],[1,6600,"，"],[1,6616,"行"],[-1,6617,"\n"],[-1,6634,"。"],[1,6636,"。"],[1,6715," "],[-1,6717," "],[1,6723,"处"],[-1,6725,"处"],[1,6762," "],[-1,6764," "],[1,6770,"端"],[-1,6772,"端"]],[1317,1317],[6772,6772]]],[1563885248201,[null,[[1,1317,"h"],[-1,1317,"*"],[1,4170,"x"],[-1,4170,"\n"],[1,4204,"\n"],[1,4218,"\t"],[-1,4218,"\n"],[-1,4232,"体"],[1,4234,"\t"],[-1,4259,"\n"],[-1,4303,"\t"],[1,4305,"}\t"],[1,4329,"\t"],[-1,4329,"\n"],[1,4370,"\n"],[-1,4370,";"],[1,4396,"\n"],[-1,4396,";"],[1,4425,"\n"],[-1,4425,";"],[1,4451,"\t"],[-1,4451,"\n"],[-1,4460,";"],[1,4463,"\t"],[1,4492,"\t"],[-1,4492,"\n"],[1,4521,"\n"],[-1,4521,";"],[1,4562,"\t"],[-1,4562,"\n"],[1,4580,"\t"],[-1,4580,"\n"],[1,4591,"\t"],[-1,4591,"\n"],[-1,4613,"\n"],[1,4616,"\t"],[-1,4652,"\n"],[1,4657,"\t"],[1,4667,"\t"],[-1,4667,"\n"],[1,4689,"\t"],[-1,4689,"\n"],[1,4734,"\t"],[-1,4734,"\n"],[1,4756,"\t"],[-1,4756,"\n"],[1,4791,"\t"],[-1,4791,"\n"],[1,4823,"\n"],[-1,4823,"t"],[1,4848,"\t"],[-1,4848,"\n"],[-1,4890,"\n"],[1,4941,"\t"],[-1,4977,";"],[1,4982,"\t"],[-1,5015,"\n"],[1,5018,"\t"],[1,5028,"\t"],[-1,5028,"\n"],[-1,5040,";"],[1,5074,"\t"],[1,5103,"\t"],[-1,5103,"\n"],[1,5109,"\t"],[-1,5109,"\n"],[-1,5143,"量"],[1,5146,"\t"],[-1,5163,"{"],[1,5169,"\t"],[-1,5193,"\n"],[1,5197,"\t\t"],[-1,5197," "],[-1,5213,"法"],[1,5218,"\t\t"],[-1,5218," "],[-1,5226,"体"],[1,5231,"\t\t"],[-1,5231," "],[-1,5253,"字"],[1,5261,"\t"],[-1,5274,"】"],[1,5279,"\t\t"],[-1,5279," "],[-1,5319,"i"],[1,5326,"\t"],[-1,5339,"系"],[1,5341,"\t"],[-1,5346,";"],[1,5348,"\t"],[-1,5353,"/"],[1,5355,"\t"],[-1,5367,"\n"],[1,5371,"\t"],[1,5391,"\t"],[-1,5391,"\n"],[-1,5434,"\n"],[1,5444,"\t"],[1,5453,"\t"],[-1,5453,"\n"],[1,5477,"\t"],[-1,5477,"\n"],[-1,5527,"\n"],[1,5539,"\t"],[1,5552,"\t"],[-1,5552,"\n"],[-1,5565,";"],[1,5589,"\t"],[-1,5607,"\n"],[1,5610,"\t"],[-1,5619,"\n"],[1,5623,"\t"],[1,5666,"\t"],[-1,5666,"\n"],[1,5679,"\t"],[-1,5679,"\n"],[1,5704,"\t"],[-1,5704,"\n"],[-1,5759,"\n"],[1,5765,"\t"],[1,5796,"\t"],[-1,5796,"\n"],[-1,5814,"发"],[1,5817,"\t"],[-1,5853,";"],[1,5856,"\t"],[1,5877,"\t"],[-1,5877,"\n"],[-1,5924,"\n"],[1,5929,"\t"],[1,5938,"\t"],[-1,5938,"\n"],[-1,5986,"\n"],[1,5991,"\t"],[-1,6006,"\n"],[1,6019,"\t"],[1,6062,"\t\t}\t"],[-1,6062,"\n\t}\n"],[-1,6072,"\n"],[1,6431,"\n"],[1,6598,"\t"],[-1,6598,"，"],[-1,6615,"行"],[1,6617,"\n"],[1,6633,"。"],[-1,6634,"。"],[-1,6714," "],[1,6717," "],[-1,6722,"处"],[1,6725,"处"],[-1,6761," "],[1,6764," "],[-1,6769,"端"],[1,6772,"端"]],[6772,6772],[1317,1317]]],[1563885239515,["GJX@GJXAIOU",[[1,6833,"**"],[1,6841,"**"]],[6833,6841],[6833,6845]]]],null,"GJX@GJXAIOU"],["7b1097fb-775e-432b-adce-e5ad7fcb9262",1563928482709,"---\ntags: \n- 内部类\n- 线程\n- 进程\nstyle: summer\n---\n\n# JavaDay23 内部类和线程\n\n@toc\n\n## 一、复习\n### （一）Comparable 和 Comparator\n两者都是接口\n- Comparable 是一个接口，给自定义类提供比较方式，遵从 Comparable<T>的实现类，必须实现 compareTo（T o）方法；即进行两个对象的比较；\n- Comparator 是一个接口，用来做自定义比较器，遵从 Comparator<T>接口的实现类，必须使用 compare(T o1, T o2)；\n\n方法1.实现自定义比较器\n```java\nclass MyCompare implements Comparator<Student>{\n  @override\n  public int compare(Student o1, Student o2){\n    return o1.getAge() - o2.getAge();\n  }\n}\n```\n上面这种方式：好理解但是需要重新定义一个类，而且可能会统一放在一个包里面，略显复杂；\n\n方法 2：使用匿名内部类的匿名对象\n格式：`Arrays.sort(T[] t, Comparator<? extends T> com)`\n```java\nStudent[] array = {stu1, stu2, stu3};\n\nArrays.sort(array.new Comparator<Student>{\n  @Override\n  public int compare(Student o1, Student o2){\n    return o1.getAge() - o2.getAge();\n  }\n});\n```\n\n\n## 二、内部类\n\n- 生活实例：\n在人类中，有些东西，比如内脏，用成员方法或者成员变量描述都显着有点不太合适，因为这些内脏首先是**属于【人体的一部分】，而且会使用【人体的一些属性】，但是又拥有自己的一些【特征】**；能不能把这些器官，认为是一个类，一个属于人类内部的一个类。\n\n- 内部类分类：\n\t1.成员内部类\n\t2.局部内部类\n\t3.匿名内部类\n\n\n### （一）成员内部类\n- 内部类和外部类比较：\n  - 1.**成员内部类可以使用外部类的所有成员变量和成员方法**, 不管用什么权限修饰，不管是private还是public都可以使用，因为，这是在内部类的内部使用。\n  - 2.【在Outer类的外部创建Outer的Inner对象】\n\t格式如下:\n\t\t`外部类名.内部类名  内部类对象名 = new 外部类名().new 内部类名();`\n\t例如：`Outer.inner inner = new Outer().new Inner();`\n【第一个知识点】:普通的成员变量和成员方法，在没有对象的情况下，不能再类外使用\n  - 3.**如果内部类和外部类存在同名的成员变量，这里默认是就近原则，使用的是内部类的成员变量**\n如果想要**使用外部类的成员变量和成员方法**的格式： \n`外部类名.this.同名成员变量;`\n`外部类名.this.同名成员方法(参数列表);`\n  -  4.在外部类的类内方法中，可以创建内部类的对象\n \t\t\t\t\n```java\npackage com.qfedu.a_innnerclass;\n\nclass Outer {\n\tint num = 100; //外部类的成员变量\n\n\tprivate static int s = 10;\n\n\tclass Inner { //这是Outer类的一个成员内部类\n\t\tint i = 10; //内部类的成员变量\n\t\tint num = 50;\n\t\tpublic void testInner() {\n\t\t\tSystem.out.println(\"内部类的成员方法\");\n\t\t\ttestOuter();\n\t\t\tSystem.out.println(\"内部类同名成员变量:\" + num); // 50 就近原则\n\t\t\t//使用  外部类名.this.成员变量名  获取同名外部成员变量\n\t\t\tSystem.out.println(\"外部类同名成员变量:\" + Outer.this.num);\n\t\t\t\n\t\t\t//分别调用内部和外部成员方法\n\t\t\ttest();\n\t\t\tOuter.this.test();\n\n\t\t\tSystem.out.println(s);\n\t\t\ttestStatic();\n\t\t}\n\n\t\tpublic void test() {\n\t\t\tSystem.out.println(\"内部类的test方法\");\n\t\t}\n\t}//inner\n\n\t\n\tpublic void testOuter() {\n\t\tSystem.out.println(\"外部类的成员方法\");\n\t}\n\n\tpublic void test() {\n\t\tSystem.out.println(\"外部类的test方法\");\n\t}\n\n\t//为了将内部类的语句输出\n\t//在【外部类】中定义【内部类的类对象】\n\tpublic void createInnnerClass() {\n\t\t//外部类的成员方法中调用内部类的构造方法，通过new关键字来创建内部类类对象使用\n\t\tInner inner = new Inner();\n\t\tinner.testInner();\n\t}\n\n\tpublic static void testStatic() {\n\t\tSystem.out.println(\"外部类的静态成员方法~\");\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t//创建内部类对象的方法一：在外部类中创建内部类对象\n//\t\tOuter outer = new Outer();\n//\t\touter.createInnnerClass();\n\n\t\t//创建内部类对象的方法一：在类外创建一个Inner类对象\n\t\t//数据类型是Outer.Inner 表示是外部类里面的内部类数据类型\n\t\tOuter.Inner inner = new Outer().new Inner();\n\t\tinner.testInner();\n\t}\n}\n```\n运行结果：\n```java\n内部类的成员方法\n外部类的成员方法\n内部类成员变量:50\n外部类成员变量:100\n内部类的test方法\n外部类的test方法\n10\n外部类的静态成员方法~\n```\n\n### （二）局部内部类\n放在方法内或者函数内的类，称之为局部内部类\n\n- 【第二个知识点】\n  - 1.局部变量的\n    - 【生存期】\n从声明定义位置开始，到代码块结束\n    - 【作用域】\n只能在当前代码块内部\n  - 2.类对象的\n    - 【生存期】\n通过new关键字创建的时候开始，JVM垃圾回收机制调用时，销毁该对象，结束\n    - 【作用域】\n那个引用变量拥有这个对象的首地址，哪里就是他的作用域\n\n- 说明：\n**局部内部类只能在函数或者方法中使用，方法或者函数外不能使用**\n\n- 发现：\n**局部内部类中，貌似不能【修改】所在方法或者函数中的局部变量**，原因如下：\n\n局部内部类的对象是在函数或者说方法的内部通过JVM借助于new关键字，和局部内部类的构造方法，创建的一个类对象，并且该对象是由JVM的垃圾回收机制回收的；\n但是局部变量n是在testInner()方法中，而这个局部变量的n的生存周期是和testInner()该方法的大括号有关，生存期和作用域都是在大括号以内；\n如果在testInner()方法的内部，MethodInner()这个类是方法中的局部内部类，而创建的对象在使用testInner()方法中的局部变量时，因为对象的销毁时间不确定，但是一定是晚于局部变量的销毁的，这里隐含了一个类对象【延长了局部变量生存期】，这个是不符合Java原理的；\n这就是为什么不能修改，因为有可能在这个对象被使用的时候，局部变量的内存空间已经被内存收回，换而言之这个局部变量不存在了。\n\n- 【解决方法】\n如果是在局部内部类中使用的所在函数或者方法的局部变量，该变量用final修饰\n\n```java\npackage com.qfedu.a_innnerclass;\n\nclass Test {\n\tint num = 100;\n\t\n\tpublic void testInner() {\n\t\t//这里是在方法中定义了一个类,这个类只能在当前函数或者方法中使用\n\t\tfinal int n = 10;\n\t\tclass MethodInner {\n\t\t\tint i = 10;\n\t\t\t\n\t\t\tpublic void function() {\n\t\t\t\tSystem.out.println(i);\n\t\t\t\tnum = 20;\n\t\t\t\tSystem.out.println(num);\n\t\t\t\t//n = 20;//使用final之后就可以了\n\t\t\t\tSystem.out.println(n);\n\t\t\t\tSystem.out.println(\"局部内部类的成员方法\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tMethodInner methodInner = new MethodInner();\n\t\tmethodInner.function();\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n//\t\tfor (int i = 0; i < 10; i++) {\n//\t\t\tSystem.out.println(i);\n//\t\t}\n\t\t\n//\t\tSystem.out.println(i);\n\t\tnew Test().testInner();\n\t}\n}\n```\n程序运行结果：\n```java\n10\n20\n10\n局部内部类的成员方法\n```\n\n### （三）匿名内部类\t\t\n【第四个知识点】\n\t类的本体:在类声明部分，大括号里面的内容就是类 的本体！！！\n```java\nclass Test {\n\t//成员变量\n\t//成员方法\n}\n```\n\t\n匿名内部类就是没有名字的类，但是有类的本体！！！\n\n```java\npackage com.qfedu.a_innnerclass;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\nabstract class Animal {\n\tint age;\n\n\tpublic abstract void test();\n\tabstract public void jump();\n}\n\nclass CodingMonkey extends Animal {\n\n\t//以下两个方法是类的本体！！！\n\t@Override\n\tpublic void test() {\n\t\tSystem.out.println(\"这是类本体中的一个成员方法\");\n\t}\n\n\t@Override\n\tpublic void jump() {\n\t\tSystem.out.println(\"You Jump， I Jump!!!\");\n\t}\n}\n\n\n\ninterface A {\n\tint i = 0; // public static final\n\tpublic void testA(); //abstract\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\t//正常方法： 可以创建CodingMonkey即Animal的子类的对象，进行方法的操作\n\t\tCodingMonkey cm = new CodingMonkey();\n\n\t\t//Animal a = cm; 多态，父类的引用指向子类的对象~\n\t\tcm.test();\n\t\tcm.jump();\n\n\n\t\t//匿名对象类： 也可以直接通过匿名对象类进行直接操作\n\t\tAnimal ani = new Animal() {\n\t\t\t/*\n\t\t\t Animal是一个抽象类，ani 是抽象类的一个引用类型变量\n\n\t\t\t new Animal() {\n\t\t\t \t发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系\n\t\t\t };\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void test() {\n\t\t\t\tSystem.out.println(\"匿名内部类的里面的test方法\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void jump() {\n\t\t\t\tSystem.out.println(\"匿名内部类的You jump， I jump\");\n\t\t\t}\n\t\t};\n\n\t\tani.jump();\n\t\tani.test();\n\n\n\t\t//以上更加简洁的使用方式：\n\n\t\t//匿名内部类的匿名对象直接调用方法\n\t\tnew A() {\n\t\t\t//这里是一个类【遵从】接口之后，要求实现接口中的抽象方法，这里也是一个【匿名内部类】\n\t\t\t@Override\n\t\t\tpublic void testA() {\n\t\t\t\tSystem.out.println(\"匿名内部类实现interface A中的testA方法\");\n\t\t\t}\n\t\t}.testA();//new A(){}可以看成匿名对象\n\t\t//Java Android开发\n\n\t\tInteger[] arr = {3, 2, 4, 5, 6, 1};\n\n\t\t//匿名内部类的匿名对象作为方法的参数\n\t\tArrays.sort(arr, new Comparator<Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn o1 - o2;\n\t\t\t}\n\t\t});\n\n\t\tSystem.out.println(Arrays.toString(arr));\n\t}\n\n}\n```\n程序运行结果：\n```java\n这是类本体中的一个成员方法\nYou Jump， I Jump!!!\n匿名内部类的You jump， I jump\n匿名内部类的里面的test方法\n匿名内部类实现interface A中的testA方法\n[1, 2, 3, 4, 5, 6]\n```\n\n\n- 在使用匿名内部类的过程中，我们需要注意如下几点：\n1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。\n2、匿名内部类中是不能定义构造函数的。\n 3、匿名内部类中不能存在任何的静态成员变量和静态方法。\n 4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。\n 5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。\n\n## 三、多线程与多进程\n\n- 多线程和多进程：\n  - 线程：\n在一个软件中，负责不同功能的子程序，称之为线程。\n  - 进程：\n是在计算机系统中所有正在运行的程序，都可以看做是一个进程。多进程的操作系统\n\n- 从实际出发：\n每一个CPU的内核在一个时间片内只能执行一件事情。但是这个时间片非常的短，不同的程序会出现在不同的时间片上，不断的切换，所以你感觉是在同时运行,现在的CPU基本上都是多核多线程的。\n\n\n- 面试题：\n请问一个Java程序再运行的时候，最少有几个线程？？？\n最少是两个线程：1. main线程，即主线程   2. JVM的垃圾回收机制\n\n- **多线程的好处**：\n1.可以让一个程序同时执行不同的任务\n2.可以提高资源的利用率\n\n- **多线程的弊端**：\n1.线程安全问题 之前的迭代器\n2.增加了CPU负担\n3.降低了其他程序CPU的执行概率\n4.容易出现死锁行为\n\n- **如何创建一个线程**：\n两种方式：\n1.自定义一个类继承Thread类，那么这个类就可以看做是一个多线程类\n2.要求【重写】Thread类里面的run方法，把需要执行的自定义线程代码放入这个run方法\n\n\n下面是使用迭代器出现的同时操作问题；\n```java\npackage com.qfedu.b_thread;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\nclass MyThread extends Thread {\n\t//要求重写【run】方法\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"自定义Thread类:\" + i);\n\t\t}\n\t}\n}\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//1. 创建自定义线程类的类对象\n\t\tMyThread mt = new MyThread();\n\t\t\n\t\t//2. 启动线程 。\n\t\t//mt.run();尝试调用n方法 相当于调用了一个普通的方法，而不是一个线程\n\t\tmt.start(); //启动线程的方式，会发现，MyThread线程和main线程在抢占CPU资源\n\t\t\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tSystem.out.println(\"main线程：\" + i);\n\t\t}\n\n\n\n\n\t\t/*\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\n\t\tlist.add(\"hello, how do you do\");\n\t\tlist.add(\"I'm fine, Thank you , and you\");\n\t\tlist.add(\"I'm fine, too\");\n\n        //三种遍历方式：\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tSystem.out.println(list.get(i));\n\t\t}\n\t\t\n\t\tfor (String string : list) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\tIterator<String> it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t\t*/\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1563928433176,["GJX@GJXAIOU",[[-1,8026,"\n"]],[8026,8026],[8025,8025]]],[1563928433323,["GJX@GJXAIOU",[[-1,8025,"\n"]],[8025,8025],[8024,8024]]],[1563928433499,["GJX@GJXAIOU",[[-1,8024,"\n"]],[8024,8024],[8023,8023]]],[1563928433649,["GJX@GJXAIOU",[[-1,8023,"\n"]],[8023,8023],[8022,8022]]],[1563928433819,["GJX@GJXAIOU",[[-1,8022,"\n"]],[8022,8022],[8021,8021]]],[1563928433987,["GJX@GJXAIOU",[[-1,8021,"\n"]],[8021,8021],[8020,8020]]],[1563928434138,["GJX@GJXAIOU",[[-1,8020,"\n"]],[8020,8020],[8019,8019]]],[1563928434250,["GJX@GJXAIOU",[[-1,8019,"\n"]],[8019,8019],[8018,8018]]],[1563928434385,["GJX@GJXAIOU",[[-1,8018,"\n"]],[8018,8018],[8017,8017]]],[1563928438715,["GJX@GJXAIOU",[[-1,8017,"\n"]],[7993,7993],[7992,7992]]],[1563928438843,["GJX@GJXAIOU",[[-1,8016,"\n"]],[7992,7992],[7991,7991]]],[1563928439011,["GJX@GJXAIOU",[[-1,8015,"\n"]],[7991,7991],[7990,7990]]],[1563928441026,["GJX@GJXAIOU",[[-1,8014,"\n"]],[8011,8011],[8010,8010]]],[1563928441153,["GJX@GJXAIOU",[[-1,8013,"\n"]],[8010,8010],[8009,8009]]],[1563928441314,["GJX@GJXAIOU",[[-1,8012,"\n"]],[8009,8009],[8008,8008]]],[1563928441458,["GJX@GJXAIOU",[[-1,8011,"\n"]],[8008,8008],[8007,8007]]],[1563928441690,["GJX@GJXAIOU",[[-1,8010,"\n"]],[8007,8007],[8006,8006]]],[1563928441851,["GJX@GJXAIOU",[[-1,8009,"\n"]],[8006,8006],[8005,8005]]],[1563928441970,["GJX@GJXAIOU",[[-1,8008,"\n"]],[8005,8005],[8004,8004]]],[1563928442266,["GJX@GJXAIOU",[[-1,8007,"\n"]],[8004,8004],[8003,8003]]],[1563928442434,["GJX@GJXAIOU",[[-1,8006,"\n"]],[8003,8003],[8002,8002]]],[1563928442587,["GJX@GJXAIOU",[[-1,8005,"\n"]],[8002,8002],[8001,8001]]],[1563928442729,["GJX@GJXAIOU",[[-1,8004,"\n"]],[8001,8001],[8000,8000]]],[1563928442979,["GJX@GJXAIOU",[[-1,8003,"\n"]],[8000,8000],[7999,7999]]],[1563928445282,["GJX@GJXAIOU",[[-1,8002,"\n"]],[8002,8002],[8001,8001]]],[1563928445418,["GJX@GJXAIOU",[[-1,8001,"\n"]],[8001,8001],[8000,8000]]],[1563928445572,["GJX@GJXAIOU",[[-1,8000,"\n"]],[8000,8000],[7999,7999]]],[1563928445714,["GJX@GJXAIOU",[[-1,7999,"\n"]],[7999,7999],[7998,7998]]],[1563928445851,["GJX@GJXAIOU",[[-1,7998,"\n"]],[7998,7998],[7997,7997]]],[1563928445961,["GJX@GJXAIOU",[[-1,7997,"\n"]],[7997,7997],[7996,7996]]],[1563928446227,["GJX@GJXAIOU",[[-1,7996,"\n"]],[7996,7996],[7995,7995]]],[1563928446362,["GJX@GJXAIOU",[[-1,7995,"\n"]],[7995,7995],[7994,7994]]],[1563928446489,["GJX@GJXAIOU",[[-1,7994,"\n"]],[7994,7994],[7993,7993]]],[1563928446619,["GJX@GJXAIOU",[[-1,7993,"\n"]],[7993,7993],[7992,7992]]],[1563928446781,["GJX@GJXAIOU",[[-1,7992,"\n"]],[7992,7992],[7991,7991]]],[1563928446986,["GJX@GJXAIOU",[[-1,7991,"\n"]],[7991,7991],[7990,7990]]],[1563928447539,["GJX@GJXAIOU",[[-1,7990,"\n"]],[7990,7990],[7989,7989]]],[1563929026891,["GJX@GJXAIOU",[[1,2374,"\n"]],[2373,2373],[2374,2374]]],[1563929032404,["GJX@GJXAIOU",[[1,2374,"、、"]],[2374,2374],[2376,2376]]],[1563929033073,["GJX@GJXAIOU",[[-1,2374,"、、"]],[2376,2376],[2374,2374]]],[1563929036147,["GJX@GJXAIOU",[[1,2374,"//wuj"]],[2374,2374],[2379,2379]]],[1563929036978,["GJX@GJXAIOU",[[-1,2376,"wuj"]],[2379,2379],[2376,2376]]],[1563929067202,["GJX@GJXAIOU",[[1,2376,"☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆"]],[2376,2376],[2394,2394]]],[1563929230081,["GJX@GJXAIOU",[[1,4240,"\n"]],[4239,4239],[4240,4240]]],[1563929246963,["GJX@GJXAIOU",[[1,4240,"只是没有了名字，但是类本体中该事项"]],[4240,4240],[4257,4257]]],[1563929247775,["GJX@GJXAIOU",[[-1,4255,"事项"]],[4257,4257],[4255,4255]]],[1563929256810,["GJX@GJXAIOU",[[1,4255,"实现的还得实现；"]],[4255,4255],[4263,4263]]],[1563929313953,["GJX@GJXAIOU",[[1,6291,"**"],[1,6316,"**"]],[6291,6316],[6291,6320]]],[1563929319228,["GJX@GJXAIOU",[[1,4264,"\n"]],[4263,4263],[4264,4264]]],[1563929321431,["GJX@GJXAIOU",[[1,4264,"且"]],[4264,4264],[4265,4265]]],[1563929327507,["GJX@GJXAIOU",[[1,4265,"匿名内部类补习"]],[4265,4265],[4272,4272]]],[1563929328055,["GJX@GJXAIOU",[[-1,4270,"补习"]],[4272,4272],[4270,4270]]],[1563929341389,["GJX@GJXAIOU",[[1,4270,"必须继承一个父类或者实现一个"]],[4270,4270],[4284,4284]]],[1563929367145,["GJX@GJXAIOU",[[-1,4276,"父"]],[4277,4277],[4276,4276]]],[1563929370899,["GJX@GJXAIOU",[[1,4283,"接口；"]],[4283,4283],[4286,4286]]],[1563929375577,["GJX@GJXAIOU",[[1,4265,"**"],[1,4285,"**"]],[4265,4285],[4265,4289]]],[1563929422795,["GJX@GJXAIOU",[[1,4967,"方法一："]],[4967,4967],[4971,4971]]],[1563929427038,["GJX@GJXAIOU",[[1,5124,"方法问"]],[5124,5124],[5127,5127]]],[1563929428673,["GJX@GJXAIOU",[[-1,5124,"方法问"]],[5127,5127],[5124,5124]]],[1563929429499,["GJX@GJXAIOU",[[1,5124,"fangf"]],[5124,5124],[5129,5129]]],[1563929431049,["GJX@GJXAIOU",[[-1,5124,"fangf"]],[5129,5129],[5124,5124]]],[1563929433748,["GJX@GJXAIOU",[[1,5124,"方法二："]],[5124,5124],[5128,5128]]],[1563929459898,["GJX@GJXAIOU",[[-1,5250,"发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系"]],[5250,5420],[5250,5250]]],[1563929464080,["GJX@GJXAIOU",[[1,5225,"              "]],[5225,5225],[5239,5239]]],[1563929465184,["GJX@GJXAIOU",[[-1,5238," "]],[5239,5239],[5238,5238]]],[1563929465792,["GJX@GJXAIOU",[[1,5238,"发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系"]],[5238,5238],[5408,5408]]],[1563929490463,["GJX@GJXAIOU",[[-1,5238,"发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系"]],[5408,5408],[5238,5238]]],[1563929505664,["GJX@GJXAIOU",[[1,5238," "]],[5238,5238],[5239,5239]]],[1563929506502,["GJX@GJXAIOU",[[-1,5225,"              "]],[5239,5239],[5225,5225]]],[1563929507116,["GJX@GJXAIOU",[[1,5250,"发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系"]],[5250,5250],[5250,5420]]],[1563929521961,["GJX@GJXAIOU",[[-1,5187,"/*\n\t\t\t Animal是一个抽象类，ani 是抽象类的一个引用类型变量\n\n\t\t\t new Animal() {\n\t\t\t \t发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系\n\t\t\t };\n\t\t\t */"]],[5187,5434],[5187,5187]]],[1563929523737,["GJX@GJXAIOU",[[1,5156,"\n\t\t"]],[5153,5153],[5156,5156]]],[1563929525290,["GJX@GJXAIOU",[[-1,5154,"\t\t"],[1,5156,"\n"]],[5156,5156],[5155,5155]]],[1563929525840,["GJX@GJXAIOU",[[1,5155,"/*\n\t\t\t Animal是一个抽象类，ani 是抽象类的一个引用类型变量\n\n\t\t\t new Animal() {\n\t\t\t \t发现这里面的内容和继承该抽象类的子类内容一致，\n\t\t\t \t都是抽象类，要求子类实现的方法\n\t\t\t \t这里是类的本体\n\t\t\t \t而这里可以看做是一个类，但是这个类没有名字\n\n\t\t\t \t所以：这个就是【匿名内部类】\n\t\t\t \t这里创建了一个【匿名内部类】的对象，赋值给了Animal的引用数据类型 ani\n\n\t\t\t \t这里隐含了一个【继承】关系\n\t\t\t };\n\t\t\t */"]],[5155,5155],[5402,5402]]],[1563929530937,["GJX@GJXAIOU",[[1,5155,"            "]],[5155,5155],[5167,5167]]],[1563929538832,["GJX@GJXAIOU",[[-1,5160,"       "]],[5160,5167],[5160,5160]]],[1563929541336,["GJX@GJXAIOU",[[-1,5165,"\t "]],[5165,5167],[5165,5165]]],[1563929543671,["GJX@GJXAIOU",[[-1,5199,"\t "]],[5201,5201],[5199,5199]]],[1563929547290,["GJX@GJXAIOU",[[-1,5217," \t"]],[5217,5219],[5217,5217]]],[1563929549415,["GJX@GJXAIOU",[[-1,5241,"\t\t\t \t"]],[5241,5246],[5241,5241]]],[1563929549839,["GJX@GJXAIOU",[[-1,5240,"\n"]],[5241,5241],[5240,5240]]],[1563929558127,["GJX@GJXAIOU",[[-1,5269,"\t\t\t \t"]],[5274,5274],[5269,5269]]],[1563929558386,["GJX@GJXAIOU",[[-1,5268,"\n"]],[5269,5269],[5268,5268]]],[1563929560340,["GJX@GJXAIOU",[[1,5268,"，"]],[5268,5268],[5269,5269]]],[1563929563534,["GJX@GJXAIOU",[[1,5261,"同时"]],[5261,5261],[5263,5263]]],[1563929566116,["GJX@GJXAIOU",[[1,5261,"；"]],[5261,5261],[5262,5262]]],[1563929568591,["GJX@GJXAIOU",[[-1,5256,"\t\t\t \t"]],[5261,5261],[5256,5256]]],[1563929568792,["GJX@GJXAIOU",[[-1,5255,"\n"]],[5256,5256],[5255,5255]]],[1563929573776,["GJX@GJXAIOU",[[-1,5289,"\t\t\t \t"]],[5294,5294],[5289,5289]]],[1563929573961,["GJX@GJXAIOU",[[-1,5288,"\n"]],[5289,5289],[5288,5288]]],[1563929574136,["GJX@GJXAIOU",[[-1,5287,"\n"]],[5288,5288],[5287,5287]]],[1563929576884,["GJX@GJXAIOU",[[1,5287,"，"]],[5287,5287],[5288,5288]]],[1563929580711,["GJX@GJXAIOU",[[-1,5303,"\t\t\t \t"]],[5308,5308],[5303,5303]]],[1563929586420,["GJX@GJXAIOU",[[1,5303,"本质上"]],[5303,5303],[5306,5306]]],[1563929588982,["GJX@GJXAIOU",[[1,5303,"；"]],[5303,5303],[5304,5304]]],[1563929590824,["GJX@GJXAIOU",[[-1,5302,"\n"]],[5303,5303],[5302,5302]]],[1563929594240,["GJX@GJXAIOU",[[-1,5346,"\n"]],[5346,5346],[5345,5345]]],[1563929597322,["GJX@GJXAIOU",[[-1,5346,"\t\t\t \t"]],[5346,5351],[5346,5346]]],[1563929597609,["GJX@GJXAIOU",[[-1,5345,"\n"]],[5346,5346],[5345,5345]]],[1563929600124,["GJX@GJXAIOU",[[1,5345,"，同时"]],[5345,5345],[5348,5348]]],[1563929618643,["GJX@GJXAIOU",[[1,5409,"、、"]],[5409,5409],[5411,5411]]],[1563929619264,["GJX@GJXAIOU",[[-1,5409,"、、"]],[5411,5411],[5409,5409]]],[1563929619900,["GJX@GJXAIOU",[[1,5409,"//"]],[5409,5409],[5411,5411]]],[1563929630053,["GJX@GJXAIOU",[[1,5411,"同样需要实现继承的相关功能"]],[5411,5411],[5424,5424]]],[1563929641296,["GJX@GJXAIOU",[[-1,5587," "]],[5588,5588],[5587,5587]]],[1563929657532,["GJX@GJXAIOU",[[-1,4784,"You Jump， I Jump!!!"],[1,4803,"Hello"]],[4784,4784],[4789,4789]]],[1563929666026,["GJX@GJXAIOU",[[-1,5564,"You jump，I jump"],[1,5579,"Hello"]],[5564,5564],[5569,5569]]],[1563929675396,["GJX@GJXAIOU",[[-1,6174,"You jump， I jump"],[1,6190,"Hello"]],[6174,6174],[6179,6179]]],[1563929681028,["GJX@GJXAIOU",[[-1,6148,"You Jump， I Jump!!!"],[1,6167,"Hello"]],[6148,6148],[6153,6153]]],[1563929687080,["GJX@GJXAIOU",[[-1,6345," "]],[6346,6346],[6345,6345]]],[1563929688608,["GJX@GJXAIOU",[[-1,6373," "]],[6374,6374],[6373,6373]]],[1563929690584,["GJX@GJXAIOU",[[-1,6411," "]],[6412,6412],[6411,6411]]],[1563929716088,["GJX@GJXAIOU",[[1,6327,"**"],[1,6343,"**"]],[6327,6343],[6327,6347]]],[1563929728361,["GJX@GJXAIOU",[[1,6351,"**"],[1,6375,"**"]],[6351,6375],[6351,6379]]]],null,"GJX@GJXAIOU"]]}