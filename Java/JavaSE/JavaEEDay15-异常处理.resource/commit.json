{"compress":true,"commitItems":[["aad00c72-db12-488b-b8c0-3dcf7a627fe4",1561595588810,"",[[1561595548743,["GJX@GJXAIOU",[[1,0,"# JavaEEDay15-异常处理和集合初步\n\n\n\n"]],[0,0],[26,26]]],[1561595557777,["GJX@GJXAIOU",[[1,25,"## 异常"]],[25,25],[30,30]]],[1561595558100,["GJX@GJXAIOU",[[1,32,"\n"]],[30,30],[31,31]]],[1561595815655,["GJX@GJXAIOU",[[-1,32,"\n"],[1,33,"java"]],[32,32],[36,36]]],[1561595817793,["GJX@GJXAIOU",[[1,36,"中遇到"]],[36,36],[39,39]]],[1561595818693,["GJX@GJXAIOU",[[-1,33,"ava中遇到"]],[39,39],[33,33]]],[1561595819053,["GJX@GJXAIOU",[[-1,32,"j"],[1,33,"\n"]],[33,33],[32,32]]],[1561595820552,["GJX@GJXAIOU",[[-1,32,"\n"],[1,33,"Java"]],[32,32],[36,36]]],[1561595821686,["GJX@GJXAIOU",[[1,36,"开发 "]],[36,36],[39,39]]],[1561595823373,["GJX@GJXAIOU",[[-1,38," "]],[39,39],[38,38]]],[1561595828521,["GJX@GJXAIOU",[[1,38,"中遇到的"]],[38,38],[42,42]]],[1561595831480,["GJX@GJXAIOU",[[1,42,"异常、"]],[42,42],[45,45]]],[1561595832021,["GJX@GJXAIOU",[[-1,44,"、"]],[45,45],[44,44]]],[1561595844679,["GJX@GJXAIOU",[[1,44,"/错误也是一步一步造成的；"]],[44,44],[57,57]]],[1561595901382,["GJX@GJXAIOU",[[1,57,"\n\n"]],[57,57],[58,58]]],[1561596028527,["GJX@GJXAIOU",[[1,59,"\n"]],[58,58],[59,59]]],[1561596040649,["GJX@GJXAIOU",[[1,59,"### Throwable"]],[59,59],[72,72]]],[1561596041365,["GJX@GJXAIOU",[[1,73,"\n"]],[72,72],[73,73]]],[1561596042237,["GJX@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1561596046201,["GJX@GJXAIOU",[[-1,74,"\n"],[1,75,"Java"]],[74,74],[78,78]]],[1561596056515,["GJX@GJXAIOU",[[1,78,"中所有错误或者异常的超累"]],[78,78],[90,90]]],[1561596059215,["GJX@GJXAIOU",[[-1,88,"超累"]],[90,90],[88,88]]],[1561596063263,["GJX@GJXAIOU",[[1,88,"超类"]],[88,88],[90,90]]],[1561596080564,["GJX@GJXAIOU",[[1,90,"\n\n"]],[90,90],[91,91]]],[1561596081911,["GJX@GJXAIOU",[[-1,91,"\n"],[1,92,"-"]],[91,91],[92,92]]],[1561596118190,["GJX@GJXAIOU",[[1,92," Error ： 错误，无法处理，只能避免\n- Exception: 异常 可以处理了"]],[92,92],[135,135]]],[1561596118749,["GJX@GJXAIOU",[[-1,134,"了"]],[135,135],[134,134]]],[1561596123735,["GJX@GJXAIOU",[[-1,99,"： "]],[101,101],[99,99]]],[1561596125813,["GJX@GJXAIOU",[[1,99,": "]],[99,99],[101,101]]],[1561596129429,["GJX@GJXAIOU",[[-1,129," "]],[130,130],[129,129]]],[1561596131317,["GJX@GJXAIOU",[[1,129,", "]],[129,129],[131,131]]],[1561596153173,["GJX@GJXAIOU",[[1,135,", fen"]],[135,135],[140,140]]],[1561596154455,["GJX@GJXAIOU",[[-1,137,"fen"]],[140,140],[137,137]]],[1561596175107,["GJX@GJXAIOU",[[1,137,"分两种情况：运行时异常和编译时间"]],[137,137],[153,153]]],[1561596175637,["GJX@GJXAIOU",[[-1,152,"间"]],[153,153],[152,152]]],[1561596178950,["GJX@GJXAIOU",[[1,152,"异常"]],[152,152],[154,154]]],[1561596227438,["GJX@GJXAIOU",[[1,90,"；"]],[90,90],[91,91]]],[1561596338531,["GJX@GJXAIOU",[[1,91," "]],[91,91],[92,92]]],[1561596369462,["GJX@GJXAIOU",[[1,156,"\n- "]],[156,156],[159,159]]],[1561596369612,["GJX@GJXAIOU",[[-1,157,"- "],[1,159,"\n\n"]],[159,159],[158,158]]],[1561596373799,["GJX@GJXAIOU",[[-1,158,"\n"],[1,159,"运行"]],[158,158],[160,160]]],[1561596375561,["GJX@GJXAIOU",[[1,160,"时候"]],[160,160],[162,162]]],[1561596376052,["GJX@GJXAIOU",[[-1,161,"候"]],[162,162],[161,161]]],[1561596385656,["GJX@GJXAIOU",[[1,161,"异常和编译时异常："]],[161,161],[170,170]]],[1561596386027,["GJX@GJXAIOU",[[1,170,"\n\n"]],[170,170],[171,171]]],[1561596394125,["GJX@GJXAIOU",[[1,158,"- "]],[158,158],[160,160]]],[1561596399183,["GJX@GJXAIOU",[[1,93,"  "],[1,116,"  "]],[93,156],[93,160]]],[1561596403485,["GJX@GJXAIOU",[[1,162,"\n"]],[161,161],[162,162]]],[1561596411623,["GJX@GJXAIOU",[[1,59,"\n"]],[59,59],[60,60]]],[1561596422831,["GJX@GJXAIOU",[[-1,164,"- "]],[166,166],[164,164]]],[1561596426189,["GJX@GJXAIOU",[[1,178,"\n"]],[176,176],[177,177]]],[1561596428366,["GJX@GJXAIOU",[[1,177,"- "]],[177,177],[179,179]]],[1561596433799,["GJX@GJXAIOU",[[1,177,"\n"]],[177,177],[178,178]]],[1561596445190,["GJX@GJXAIOU",[[1,180," "]],[179,179],[180,180]]],[1561596454512,["GJX@GJXAIOU",[[1,180,"吃完饭发现没带钱包"]],[180,180],[189,189]]],[1561596454813,["GJX@GJXAIOU",[[1,189,"\n"]],[189,189],[190,190]]],[1561596455834,["GJX@GJXAIOU",[[1,190,"-"]],[190,190],[191,191]]],[1561596456005,["GJX@GJXAIOU",[[1,192," "]],[191,191],[192,192]]],[1561596472744,["GJX@GJXAIOU",[[1,192,"准备去吃饭没带钱包："]],[192,192],[202,202]]],[1561596483519,["GJX@GJXAIOU",[[1,189,"：运行时异常"]],[189,189],[195,195]]],[1561596490921,["GJX@GJXAIOU",[[1,209,"编译时异常"]],[209,209],[214,214]]],[1561596496332,["GJX@GJXAIOU",[[-1,208," "]],[209,209],[208,208]]],[1561596589629,["GJX@GJXAIOU",[[1,215,"\n"]],[214,214],[215,215]]],[1561596589784,["GJX@GJXAIOU",[[1,216,"\n"]],[215,215],[216,216]]],[1561596595170,["GJX@GJXAIOU",[[-1,216,"\n"],[1,217,"研究"]],[216,216],[218,218]]],[1561596608663,["GJX@GJXAIOU",[[1,218,"Exception"]],[218,218],[227,227]]],[1561596632414,["GJX@GJXAIOU",[[1,227,"和Error先从Throwable开始；"]],[227,227],[247,247]]],[1561596635436,["GJX@GJXAIOU",[[1,247,"\n\n"]],[247,247],[248,248]]],[1561596833167,["GJX@GJXAIOU",[[-1,248,"\n"],[1,249," "]],[248,248],[249,249]]],[1561596838247,["GJX@GJXAIOU",[[-1,248," "],[1,249,"\n\n"]],[249,249],[249,249]]],[1561596838348,["GJX@GJXAIOU",[[1,250,"\n"]],[249,249],[250,250]]],[1561596839278,["GJX@GJXAIOU",[[-1,250,"\n"],[1,251,"-"]],[250,250],[251,251]]],[1561596841241,["GJX@GJXAIOU",[[1,251," ****"]],[251,251],[254,254]]],[1561596843527,["GJX@GJXAIOU",[[-1,249,"\n"]],[249,249],[248,248]]],[1561596858417,["GJX@GJXAIOU",[[1,253,"Throwable类"]],[253,253],[263,263]]],[1561596861527,["GJX@GJXAIOU",[[1,265,"\n- "]],[265,265],[268,268]]],[1561596862948,["GJX@GJXAIOU",[[1,266,"  "]],[268,268],[270,270]]],[1561596866052,["GJX@GJXAIOU",[[1,270,"构造方法：\n  - "]],[270,270],[280,280]]],[1561596867452,["GJX@GJXAIOU",[[1,278,"  "]],[280,280],[282,282]]],[1561596885055,["GJX@GJXAIOU",[[1,282,"Throwable(); //午餐"]],[282,282],[299,299]]],[1561596886109,["GJX@GJXAIOU",[[-1,297,"午餐"]],[299,299],[297,297]]],[1561596905327,["GJX@GJXAIOU",[[1,297,"无参的构造方法，创建一个【异常信息】为"]],[297,297],[316,316]]],[1561596930077,["GJX@GJXAIOU",[[1,316,"null的Throwable类对象；\n    - Throwable（）"]],[316,316],[352,352]]],[1561596931357,["GJX@GJXAIOU",[[-1,350,"（）"]],[352,352],[350,350]]],[1561596932496,["GJX@GJXAIOU",[[1,350,"(0"]],[350,350],[352,352]]],[1561596933731,["GJX@GJXAIOU",[[-1,351,"0"]],[352,352],[351,351]]],[1561596934085,["GJX@GJXAIOU",[[1,351,")"]],[351,351],[352,352]]],[1561596937725,["GJX@GJXAIOU",[[1,351,"Ste"]],[351,351],[354,354]]],[1561596938429,["GJX@GJXAIOU",[[-1,353,"e"]],[354,354],[353,353]]],[1561596942022,["GJX@GJXAIOU",[[1,353,"ring messaf"]],[353,353],[364,364]]],[1561596943111,["GJX@GJXAIOU",[[-1,363,"f"]],[364,364],[363,363]]],[1561596943344,["GJX@GJXAIOU",[[1,363,"ge"]],[363,363],[365,365]]],[1561596948543,["GJX@GJXAIOU",[[1,366,"; //c"]],[366,366],[371,371]]],[1561596949068,["GJX@GJXAIOU",[[-1,370,"c"]],[371,371],[370,370]]],[1561596951030,["GJX@GJXAIOU",[[1,370,"创建爱你"]],[370,370],[374,374]]],[1561596951653,["GJX@GJXAIOU",[[-1,372,"爱你"]],[374,374],[372,372]]],[1561596956916,["GJX@GJXAIOU",[[1,372,"一个【异常信息\n    - "]],[372,372],[386,386]]],[1561596958451,["GJX@GJXAIOU",[[-1,381,"   - "]],[386,386],[381,381]]],[1561596958748,["GJX@GJXAIOU",[[-1,380," "],[1,381,"\n"]],[381,381],[380,380]]],[1561596959108,["GJX@GJXAIOU",[[-1,380,"\n"]],[380,380],[379,379]]],[1561596963718,["GJX@GJXAIOU",[[1,379,"】为mas"]],[379,379],[384,384]]],[1561596964318,["GJX@GJXAIOU",[[-1,382,"as"]],[384,384],[382,382]]],[1561596966357,["GJX@GJXAIOU",[[1,382,"essage"]],[382,382],[388,388]]],[1561596971168,["GJX@GJXAIOU",[[1,388,"的The"]],[388,388],[392,392]]],[1561596971735,["GJX@GJXAIOU",[[-1,391,"e"]],[392,392],[391,391]]],[1561596974215,["GJX@GJXAIOU",[[1,391,"rowal"]],[391,391],[396,396]]],[1561596974924,["GJX@GJXAIOU",[[-1,395,"l"]],[396,396],[395,395]]],[1561596979320,["GJX@GJXAIOU",[[1,395,"ble类对称"]],[395,395],[401,401]]],[1561596980355,["GJX@GJXAIOU",[[-1,399,"对称"]],[401,401],[399,399]]],[1561596982105,["GJX@GJXAIOU",[[1,399,"对象；"]],[399,399],[402,402]]],[1561596982348,["GJX@GJXAIOU",[[1,403,"    - \n"]],[402,402],[409,409]]],[1561596984756,["GJX@GJXAIOU",[[1,407,"  "]],[409,409],[411,411]]],[1561596986268,["GJX@GJXAIOU",[[-1,405,"    "]],[411,411],[407,407]]],[1561596990182,["GJX@GJXAIOU",[[1,407,"成员方法："]],[407,407],[412,412]]],[1561596990623,["GJX@GJXAIOU",[[1,413,"  - \n"]],[412,412],[417,417]]],[1561596991901,["GJX@GJXAIOU",[[1,415,"  "]],[417,417],[419,419]]],[1561597002684,["GJX@GJXAIOU",[[1,419,"String gert"]],[419,419],[430,430]]],[1561597003628,["GJX@GJXAIOU",[[-1,428,"rt"]],[430,430],[428,428]]],[1561597007669,["GJX@GJXAIOU",[[1,428,"tmessage()"]],[428,428],[438,438]]],[1561597012550,["GJX@GJXAIOU",[[-1,429,"m"]],[430,430],[429,429]]],[1561597013278,["GJX@GJXAIOU",[[1,429,"M"]],[429,429],[430,430]]],[1561597028465,["GJX@GJXAIOU",[[1,438,";  //获取Throwable类对象"]],[438,438],[457,457]]],[1561597035240,["GJX@GJXAIOU",[[1,457,"里面保存的【异常信息】"]],[457,457],[468,468]]],[1561597036349,["GJX@GJXAIOU",[[1,469,"    - \n"]],[468,468],[475,475]]],[1561597053073,["GJX@GJXAIOU",[[1,475,"String toMessage();  、、"]],[475,475],[498,498]]],[1561597053749,["GJX@GJXAIOU",[[-1,496,"、、"]],[498,498],[496,496]]],[1561597054422,["GJX@GJXAIOU",[[1,496,"、、"]],[496,496],[498,498]]],[1561597055021,["GJX@GJXAIOU",[[-1,496,"、、"]],[498,498],[496,496]]],[1561597055746,["GJX@GJXAIOU",[[1,496,"、、"]],[496,496],[498,498]]],[1561597056301,["GJX@GJXAIOU",[[-1,496,"、、"]],[498,498],[496,496]]],[1561597067438,["GJX@GJXAIOU",[[1,496,"//返回一个异常的简短藐视"]],[496,496],[509,509]]],[1561597068101,["GJX@GJXAIOU",[[-1,507,"藐视"]],[509,509],[507,507]]],[1561597070905,["GJX@GJXAIOU",[[1,507,"描述"]],[507,507],[509,509]]],[1561597071253,["GJX@GJXAIOU",[[1,510,"    - \n"]],[509,509],[516,516]]],[1561597073711,["GJX@GJXAIOU",[[1,516,"boi"]],[516,516],[519,519]]],[1561597074564,["GJX@GJXAIOU",[[-1,516,"boi"]],[519,519],[516,516]]],[1561597077936,["GJX@GJXAIOU",[[1,516,"vois"]],[516,516],[520,520]]],[1561597078548,["GJX@GJXAIOU",[[-1,519,"s"]],[520,520],[519,519]]],[1561597079983,["GJX@GJXAIOU",[[1,519,"d ptr"]],[519,519],[524,524]]],[1561597081115,["GJX@GJXAIOU",[[-1,522,"tr"]],[524,524],[522,522]]],[1561597086668,["GJX@GJXAIOU",[[1,522,"rintStack"]],[522,522],[531,531]]],[1561597099880,["GJX@GJXAIOU",[[1,531,"Trace(); // 在"]],[531,531],[544,544]]],[1561597100364,["GJX@GJXAIOU",[[-1,542," 在"]],[544,544],[542,542]]],[1561597115422,["GJX@GJXAIOU",[[1,542,"在控制台中显示详细的异常问题"]],[542,542],[556,556]]],[1561598598532,["GJX@GJXAIOU",[[1,557,"    - \n"]],[556,556],[563,563]]],[1561598598925,["GJX@GJXAIOU",[[-1,557,"    - "]],[563,563],[558,558]]],[1561598605499,["GJX@GJXAIOU",[[-1,557,"\n"],[1,558,"区分"]],[558,558],[559,559]]],[1561598650952,["GJX@GJXAIOU",[[-1,558,"分"]],[559,559],[558,558]]],[1561598651085,["GJX@GJXAIOU",[[-1,557,"区"],[1,558,"\n"]],[558,558],[557,557]]],[1561598652085,["GJX@GJXAIOU",[[1,558,"\n"]],[557,557],[558,558]]],[1561598654253,["GJX@GJXAIOU",[[-1,558,"\n"],[1,559,"s"]],[558,558],[559,559]]],[1561598654656,["GJX@GJXAIOU",[[1,559,"hil"]],[559,559],[562,562]]],[1561598655333,["GJX@GJXAIOU",[[-1,559,"hil"]],[562,562],[559,559]]],[1561598655533,["GJX@GJXAIOU",[[-1,558,"s"],[1,559,"\n"]],[559,559],[558,558]]],[1561598656784,["GJX@GJXAIOU",[[-1,558,"\n"],[1,559,"示例"]],[558,558],[560,560]]],[1561598657890,["GJX@GJXAIOU",[[1,560,"代码"]],[560,560],[562,562]]],[1561598658248,["GJX@GJXAIOU",[[1,562,"\n\n"]],[562,562],[563,563]]],[1561598659168,["GJX@GJXAIOU",[[-1,563,"\n"],[1,564,"`"]],[563,563],[564,564]]],[1561598659529,["GJX@GJXAIOU",[[1,564,"``"]],[564,564],[566,566]]],[1561598659552,["GJX@GJXAIOU",[[1,566,"language\n```\n"]],[566,566],[566,574]]],[1561598660733,["GJX@GJXAIOU",[[-1,566,"language"],[1,574,"j"]],[566,574],[567,567]]],[1561598661152,["GJX@GJXAIOU",[[1,567,"ava"]],[567,567],[570,570]]],[1561598661174,["GJX@GJXAIOU",[[1,571,"\n"]],[570,570],[571,571]]],[1561598662301,["GJX@GJXAIOU",[[1,571,"/**\n * \n */\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class YiChangLeiLianXi {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t//首先创建一个异常类，\n\t\t//调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n\t\t//调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n\t\t\n\t\t//Throwable throwable = new Throwable(); //调用无参构造方法\n\t\tThrowable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n\t\t\n\t\tSystem.out.println(throwable2.getMessage());\n\t\tSystem.out.println(throwable2.toString());\n\t\tthrowable2.printStackTrace();\n\n\t}\n\n}\n"]],[571,571],[1129,1129]]],[1561598665889,["GJX@GJXAIOU",[[1,1134,"\n"]],[1133,1133],[1134,1134]]],[1561598666021,["GJX@GJXAIOU",[[1,1135,"\n"]],[1134,1134],[1135,1135]]],[1561598666365,["GJX@GJXAIOU",[[1,1136,"\n"]],[1135,1135],[1136,1136]]],[1561598834301,["GJX@GJXAIOU",[[1,1135,"dui"]],[1135,1135],[1138,1138]]],[1561598835232,["GJX@GJXAIOU",[[-1,1135,"dui"]],[1138,1138],[1135,1135]]],[1561598835452,["GJX@GJXAIOU",[[-1,1136,"\n"]],[1135,1135],[1134,1134]]],[1561598840747,["GJX@GJXAIOU",[[1,1134,"对异常类的额"]],[1134,1134],[1140,1140]]],[1561598841381,["GJX@GJXAIOU",[[-1,1139,"额"]],[1140,1140],[1139,1139]]],[1561598842336,["GJX@GJXAIOU",[[1,1139,"测试"]],[1139,1139],[1141,1141]]],[1561598842575,["GJX@GJXAIOU",[[1,1143,"\n"]],[1141,1141],[1142,1142]]],[1561598850030,["GJX@GJXAIOU",[[1,1142,"![搜狗截图20190627092658]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)"]],[1142,1142],[1230,1230]]],[1561598853923,["GJX@GJXAIOU",[[-1,1144,"搜狗截图20190627092658"],[1,1162,"对"]],[1144,1144],[1145,1145]]],[1561598859843,["GJX@GJXAIOU",[[1,1145,"异常类的测试"]],[1145,1145],[1151,1151]]],[1561598862693,["GJX@GJXAIOU",[[1,1220,"\n"]],[1219,1219],[1220,1220]]],[1561598865289,["GJX@GJXAIOU",[[-1,1220,"\n"],[1,1221,"这里"]],[1220,1220],[1222,1222]]],[1561598867042,["GJX@GJXAIOU",[[1,1222,"的两个"]],[1222,1222],[1225,1225]]],[1561598944074,["GJX@GJXAIOU",[[1,1225,"错误分别对应了创建该异常的位置和调用该异常的额为孩子"]],[1225,1225],[1251,1251]]],[1561598945565,["GJX@GJXAIOU",[[-1,1247,"额为孩子"]],[1251,1251],[1247,1247]]],[1561598947170,["GJX@GJXAIOU",[[1,1247,"位置；"]],[1247,1247],[1250,1250]]],[1561598947805,["GJX@GJXAIOU",[[1,1250,"\n\n"]],[1250,1250],[1251,1251]]],[1561598947925,["GJX@GJXAIOU",[[1,1252,"\n"]],[1251,1251],[1252,1252]]],[1561598962629,["GJX@GJXAIOU",[[1,1253,"\n"]],[1252,1252],[1253,1253]]],[1561598962764,["GJX@GJXAIOU",[[1,1254,"\n"]],[1253,1253],[1254,1254]]],[1561598964109,["GJX@GJXAIOU",[[-1,1254,"\n"],[1,1255,"怎么"]],[1254,1254],[1256,1256]]],[1561598965871,["GJX@GJXAIOU",[[-1,1255,"么"]],[1256,1256],[1255,1255]]],[1561598966389,["GJX@GJXAIOU",[[-1,1254,"怎"],[1,1255,"\n"]],[1255,1255],[1254,1254]]],[1561598967504,["GJX@GJXAIOU",[[-1,1254,"\n"],[1,1255,"区分"]],[1254,1254],[1256,1256]]],[1561598984057,["GJX@GJXAIOU",[[1,1256,"Error和Exception：看提示的末尾即可；"]],[1256,1256],[1281,1281]]],[1561599443973,["GJX@GJXAIOU",[[1,1281,"\n\n"]],[1281,1281],[1282,1282]]],[1561599445641,["GJX@GJXAIOU",[[-1,1282,"\n"],[1,1283,"代码"]],[1282,1282],[1284,1284]]],[1561599447466,["GJX@GJXAIOU",[[1,1284,"示例："]],[1284,1284],[1287,1287]]],[1561599447656,["GJX@GJXAIOU",[[1,1287,"\n\n"]],[1287,1287],[1288,1288]]],[1561599448951,["GJX@GJXAIOU",[[-1,1288,"\n"],[1,1289,"`"]],[1288,1288],[1289,1289]]],[1561599449318,["GJX@GJXAIOU",[[1,1289,"``"]],[1289,1289],[1291,1291]]],[1561599449343,["GJX@GJXAIOU",[[1,1291,"language\n```\n"]],[1291,1291],[1291,1299]]],[1561599450029,["GJX@GJXAIOU",[[-1,1291,"language"],[1,1299,"j"]],[1291,1299],[1292,1292]]],[1561599450126,["GJX@GJXAIOU",[[1,1292,"a"]],[1292,1292],[1293,1293]]],[1561599450328,["GJX@GJXAIOU",[[1,1294,"\n"]],[1293,1293],[1294,1294]]],[1561599450497,["GJX@GJXAIOU",[[1,1294,"va"]],[1294,1294],[1296,1296]]],[1561599451264,["GJX@GJXAIOU",[[-1,1294,"va"]],[1296,1296],[1294,1294]]],[1561599451997,["GJX@GJXAIOU",[[-1,1294,"\n"]],[1294,1294],[1293,1293]]],[1561599452397,["GJX@GJXAIOU",[[1,1293,"va"]],[1293,1293],[1295,1295]]],[1561599452733,["GJX@GJXAIOU",[[1,1296,"\n"]],[1295,1295],[1296,1296]]],[1561601305340,["GJX@GJXAIOU",[[1,1296,"public class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}"]],[1296,1296],[1678,1678]]],[1561601314001,["GJX@GJXAIOU",[[1,1683,"\n"]],[1682,1682],[1683,1683]]],[1561601314137,["GJX@GJXAIOU",[[1,1684,"\n"]],[1683,1683],[1684,1684]]],[1561601314276,["GJX@GJXAIOU",[[1,1685,"\n"]],[1684,1684],[1685,1685]]],[1561601324364,["GJX@GJXAIOU",[[1,1685,"## yic"]],[1685,1685],[1691,1691]]],[1561601325240,["GJX@GJXAIOU",[[-1,1688,"yic"]],[1691,1691],[1688,1688]]],[1561601329348,["GJX@GJXAIOU",[[1,1688,"异常的处理"]],[1688,1688],[1693,1693]]],[1561601330016,["GJX@GJXAIOU",[[1,1694,"\n"]],[1693,1693],[1694,1694]]],[1561601511547,["GJX@GJXAIOU",[[1,1695,"\n"]],[1694,1694],[1695,1695]]],[1561601515739,["GJX@GJXAIOU",[[-1,1695,"\n"],[1,1696,"Java"]],[1695,1695],[1699,1699]]],[1561601526141,["GJX@GJXAIOU",[[1,1699,"程序运行的时候，Juin"]],[1699,1699],[1711,1711]]],[1561601527490,["GJX@GJXAIOU",[[-1,1707,"Juin"]],[1711,1711],[1707,1707]]],[1561601530686,["GJX@GJXAIOU",[[1,1707,"会监听"]],[1707,1707],[1710,1710]]],[1561601543951,["GJX@GJXAIOU",[[1,1710,"异常，发生异响"]],[1710,1710],[1717,1717]]],[1561601544841,["GJX@GJXAIOU",[[-1,1715,"异响"]],[1717,1717],[1715,1715]]],[1561601565918,["GJX@GJXAIOU",[[1,1715,"异常的时候，会创建Throwable类对象，处理异常；"]],[1715,1715],[1742,1742]]],[1561601680770,["GJX@GJXAIOU",[[1,1742,"\n\n"]],[1742,1742],[1743,1743]]],[1561601684344,["GJX@GJXAIOU",[[-1,1743,"\n"],[1,1744,"Java"]],[1743,1743],[1747,1747]]],[1561601689613,["GJX@GJXAIOU",[[1,1747,"中异常处理"]],[1747,1747],[1752,1752]]],[1561602036459,["GJX@GJXAIOU",[[1,1752,"\n\n"]],[1752,1752],[1753,1753]]],[1561602371522,["GJX@GJXAIOU",[[1,1754,"\n"]],[1753,1753],[1754,1754]]],[1561602375395,["GJX@GJXAIOU",[[-1,1754,"\n"],[1,1755,"程序"]],[1754,1754],[1756,1756]]],[1561602377148,["GJX@GJXAIOU",[[1,1756,"示例："]],[1756,1756],[1759,1759]]]],null,"GJX@GJXAIOU"],["7af53e2b-fe9f-4c2b-93ac-3ac1c91155fe",1561681980785,"# JavaEEDay15-异常处理和集合初步\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### Throwable\n\nJava中所有错误或者异常的超类； \n  - Error : 错误，无法处理，只能避免\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常\n\n\n运行时异常和编译时异常：\n\n- 吃完饭发现没带钱包：运行时异常\n- 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - String getMessage();  //获取Throwable类对象里面保存的【异常信息】\n    - String toMessage();  //返回一个异常的简短描述\n    - void printStackTrace(); //在控制台中显示详细的异常问题\n\n示例代码\n```java\n/**\n * \n */\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class YiChangLeiLianXi {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t//首先创建一个异常类，\n\t\t//调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n\t\t//调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n\t\t\n\t\t//Throwable throwable = new Throwable(); //调用无参构造方法\n\t\tThrowable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n\t\t\n\t\tSystem.out.println(throwable2.getMessage());\n\t\tSystem.out.println(throwable2.toString());\n\t\tthrowable2.printStackTrace();\n\n\t}\n\n}\n\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n区分Error和Exception：看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\nJava中异常处理\n\n程序示例：",[[1561681968334,["GJX@GJXAIOU",[[1,1754,"\n"]],[1753,1753],[1754,1754]]],[1561681975119,["GJX@GJXAIOU",[[1,1754,"使用try - catch"]],[1754,1754],[1767,1767]]],[1561681975510,["GJX@GJXAIOU",[[-1,1766,"h"]],[1767,1767],[1766,1766]]],[1561681978656,["GJX@GJXAIOU",[[1,1766,"h的"]],[1766,1766],[1768,1768]]],[1561681981394,["GJX@GJXAIOU",[[1,1768,"注意事项："]],[1768,1768],[1773,1773]]],[1561681981608,["GJX@GJXAIOU",[[1,1774,"\n"]],[1773,1773],[1774,1774]]],[1561682038570,["GJX@GJXAIOU",[[1,1774,"- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会"]],[1774,1774],[1817,1817]]],[1561682048818,["GJX@GJXAIOU",[[1,1817,"继续执行后面的代码；"]],[1817,1817],[1827,1827]]],[1561682049486,["GJX@GJXAIOU",[[1,1828,"- \n"]],[1827,1827],[1830,1830]]],[1561682055369,["GJX@GJXAIOU",[[1,1830,"一旦异常"]],[1830,1830],[1834,1834]]],[1561682058190,["GJX@GJXAIOU",[[1,1840,"\n\n"]],[1840,1840],[1841,1841]]],[1561682058302,["GJX@GJXAIOU",[[1,1842,"\n"]],[1841,1841],[1842,1842]]],[1561682058398,["GJX@GJXAIOU",[[1,1843,"\n"]],[1842,1842],[1843,1843]]],[1561682058511,["GJX@GJXAIOU",[[1,1844,"\n"]],[1843,1843],[1844,1844]]],[1561682058640,["GJX@GJXAIOU",[[1,1845,"\n"]],[1844,1844],[1845,1845]]],[1561682058758,["GJX@GJXAIOU",[[1,1846,"\n"]],[1845,1845],[1846,1846]]],[1561682058871,["GJX@GJXAIOU",[[1,1847,"\n"]],[1846,1846],[1847,1847]]],[1561682058998,["GJX@GJXAIOU",[[1,1848,"\n"]],[1847,1847],[1848,1848]]],[1561682059119,["GJX@GJXAIOU",[[1,1849,"\n"]],[1848,1848],[1849,1849]]],[1561682059254,["GJX@GJXAIOU",[[1,1850,"\n"]],[1849,1849],[1850,1850]]],[1561682059382,["GJX@GJXAIOU",[[1,1851,"\n"]],[1850,1850],[1851,1851]]],[1561682059518,["GJX@GJXAIOU",[[1,1852,"\n"]],[1851,1851],[1852,1852]]],[1561682059726,["GJX@GJXAIOU",[[1,1853,"\n"]],[1852,1852],[1853,1853]]],[1561682087741,["GJX@GJXAIOU",[[1,1834,"被try-catch捕获，那么JVM救护"]],[1834,1834],[1854,1854]]],[1561682089013,["GJX@GJXAIOU",[[-1,1852,"救护"]],[1854,1854],[1852,1852]]],[1561682100530,["GJX@GJXAIOU",[[1,1852,"就会认为当前代码找那个已经不存在异常"]],[1852,1852],[1870,1870]]],[1561682107040,["GJX@GJXAIOU",[[1,1870,"，可以继续运作；"]],[1870,1870],[1878,1878]]],[1561682107438,["GJX@GJXAIOU",[[1,1879,"- \n"]],[1878,1878],[1881,1881]]],[1561682117112,["GJX@GJXAIOU",[[1,1881,"在try-catch中"]],[1881,1881],[1892,1892]]],[1561682142007,["GJX@GJXAIOU",[[1,1882," "]],[1882,1882],[1883,1883]]],[1561682143047,["GJX@GJXAIOU",[[1,1892," "]],[1892,1892],[1893,1893]]],[1561682148055,["GJX@GJXAIOU",[[-1,1893,"中"]],[1894,1894],[1893,1893]]],[1561682160680,["GJX@GJXAIOU",[[1,1893,"语句块里面，如果出现了多种异常，这里"]],[1893,1893],[1911,1911]]],[1561682165879,["GJX@GJXAIOU",[[1,1911,"可以加上多个c"]],[1911,1911],[1918,1918]]],[1561682165906,["GJX@GJXAIOU",[[1,1917," "]],[1918,1918],[1919,1919]]],[1561682170282,["GJX@GJXAIOU",[[1,1919,"atch语句块"]],[1919,1919],[1926,1926]]],[1561682170307,["GJX@GJXAIOU",[[1,1923," "]],[1926,1926],[1927,1927]]],[1561682180018,["GJX@GJXAIOU",[[1,1927,"，对不同的意向做"]],[1927,1927],[1935,1935]]],[1561682181069,["GJX@GJXAIOU",[[-1,1932,"意向做"]],[1935,1935],[1932,1932]]],[1561682199891,["GJX@GJXAIOU",[[1,1932,"异常做区别对待，做到异常的金砖"]],[1932,1932],[1947,1947]]],[1561682200518,["GJX@GJXAIOU",[[-1,1945,"金砖"]],[1947,1947],[1945,1945]]],[1561682204400,["GJX@GJXAIOU",[[1,1945,"精准匹配；"]],[1945,1945],[1950,1950]]],[1561682205608,["GJX@GJXAIOU",[[1,1951,"- \n"]],[1950,1950],[1953,1953]]],[1561682207471,["GJX@GJXAIOU",[[1,1953,"在r"]],[1953,1953],[1955,1955]]],[1561682207497,["GJX@GJXAIOU",[[1,1954," "]],[1955,1955],[1956,1956]]],[1561682207873,["GJX@GJXAIOU",[[-1,1955,"r"]],[1956,1956],[1955,1955]]],[1561682210281,["GJX@GJXAIOU",[[1,1955,"try- can"]],[1955,1955],[1963,1963]]],[1561682211398,["GJX@GJXAIOU",[[-1,1962,"n"]],[1963,1963],[1962,1962]]],[1561682214015,["GJX@GJXAIOU",[[1,1962,"tchz"]],[1962,1962],[1966,1966]]],[1561682214639,["GJX@GJXAIOU",[[-1,1965,"z"]],[1966,1966],[1965,1965]]],[1561682216137,["GJX@GJXAIOU",[[1,1965,"中"]],[1965,1965],[1966,1966]]],[1561682216162,["GJX@GJXAIOU",[[1,1965," "]],[1966,1966],[1967,1967]]],[1561682218742,["GJX@GJXAIOU",[[-1,1966,"中"]],[1967,1967],[1966,1966]]],[1561682220456,["GJX@GJXAIOU",[[1,1966,"语句块"]],[1966,1966],[1969,1969]]],[1561682230417,["GJX@GJXAIOU",[[1,1969,"中，如果存在大面积的意向"]],[1969,1969],[1981,1981]]],[1561682234125,["GJX@GJXAIOU",[[-1,1979,"意向"]],[1981,1981],[1979,1979]]],[1561682245087,["GJX@GJXAIOU",[[1,1979,"异常，可以放在整个c"]],[1979,1979],[1989,1989]]],[1561682245113,["GJX@GJXAIOU",[[1,1988," "]],[1989,1989],[1990,1990]]],[1561682245767,["GJX@GJXAIOU",[[1,1990,"ath"]],[1990,1990],[1993,1993]]],[1561682246598,["GJX@GJXAIOU",[[-1,1992,"h"]],[1993,1993],[1992,1992]]],[1561682250977,["GJX@GJXAIOU",[[1,1992,"ch语句块"]],[1992,1992],[1997,1997]]],[1561682251004,["GJX@GJXAIOU",[[1,1994," "]],[1997,1997],[1998,1998]]],[1561682269464,["GJX@GJXAIOU",[[1,1998,"中的最后一个，如果放在前面可能导致前面"]],[1998,1998],[2017,2017]]],[1561682270096,["GJX@GJXAIOU",[[-1,2015,"前面"]],[2017,2017],[2015,2015]]],[1561682277816,["GJX@GJXAIOU",[[1,2015,"其他的catch"]],[2015,2015],[2023,2023]]],[1561682277842,["GJX@GJXAIOU",[[1,2018," "]],[2023,2023],[2024,2024]]],[1561682279659,["GJX@GJXAIOU",[[1,2024,"异常"]],[2024,2024],[2026,2026]]],[1561682279685,["GJX@GJXAIOU",[[1,2024," "]],[2026,2026],[2027,2027]]],[1561682284614,["GJX@GJXAIOU",[[1,2027,"不会"]],[2027,2027],[2029,2029]]],[1561682294302,["GJX@GJXAIOU",[[-1,2027,"不会"]],[2029,2029],[2027,2027]]],[1561682300456,["GJX@GJXAIOU",[[1,2027,"无效；（）"]],[2027,2027],[2032,2032]]],[1561682314172,["GJX@GJXAIOU",[[1,2031,"因为Exception"]],[2031,2031],[2042,2042]]],[1561682314198,["GJX@GJXAIOU",[[1,2033," "]],[2042,2042],[2043,2043]]],[1561682315956,["GJX@GJXAIOU",[[1,2043,"是"]],[2043,2043],[2044,2044]]],[1561682315982,["GJX@GJXAIOU",[[1,2043," "]],[2044,2044],[2045,2045]]],[1561682323168,["GJX@GJXAIOU",[[1,2045,"其他异常的父类"]],[2045,2045],[2052,2052]]],[1561682326774,["GJX@GJXAIOU",[[1,2054,"\n"]],[2054,2054],[2055,2055]]],[1561682957071,["GJX@GJXAIOU",[[1,2061,"```"]],[2061,2061],[2064,2064]]],[1561682957097,["GJX@GJXAIOU",[[1,2064,"language\n```\n"]],[2064,2064],[2064,2072]]],[1561682958361,["GJX@GJXAIOU",[[-1,2064,"language"],[1,2072,"j"]],[2064,2072],[2065,2065]]],[1561682958593,["GJX@GJXAIOU",[[1,2065,"av"]],[2065,2065],[2067,2067]]],[1561682958657,["GJX@GJXAIOU",[[1,2068,"\n"]],[2067,2067],[2068,2068]]],[1561682959398,["GJX@GJXAIOU",[[-1,2068,"\n"]],[2068,2068],[2067,2067]]],[1561682959519,["GJX@GJXAIOU",[[-1,2066,"v"]],[2067,2067],[2066,2066]]],[1561682959782,["GJX@GJXAIOU",[[1,2066,"a"]],[2066,2066],[2067,2067]]],[1561682960392,["GJX@GJXAIOU",[[-1,2066,"a"]],[2067,2067],[2066,2066]]],[1561682960593,["GJX@GJXAIOU",[[1,2066,"va"]],[2066,2066],[2068,2068]]],[1561682960999,["GJX@GJXAIOU",[[1,2069,"\n"]],[2068,2068],[2069,2069]]],[1561682961950,["GJX@GJXAIOU",[[1,2069,"package a_JavaException;\n\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常\n\t\t\t// TODO: handle exception\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n\n}\n"]],[2069,2069],[2637,2637]]],[1561682965118,["GJX@GJXAIOU",[[1,2655,"\n"]],[2641,2641],[2642,2642]]],[1561682965930,["GJX@GJXAIOU",[[1,2642,"cheng"]],[2642,2642],[2647,2647]]],[1561682966957,["GJX@GJXAIOU",[[-1,2642,"cheng"]],[2647,2647],[2642,2642]]],[1561682971504,["GJX@GJXAIOU",[[1,2642,"程序执行结果："]],[2642,2642],[2649,2649]]],[1561682971752,["GJX@GJXAIOU",[[1,2663,"\n"]],[2649,2649],[2650,2650]]],[1561682973222,["GJX@GJXAIOU",[[1,2650,"```"]],[2650,2650],[2653,2653]]],[1561682973250,["GJX@GJXAIOU",[[1,2653,"language\n```\n"]],[2653,2653],[2653,2661]]],[1561682974581,["GJX@GJXAIOU",[[-1,2653,"language"]],[2653,2661],[2653,2653]]],[1561682975608,["GJX@GJXAIOU",[[1,2654,"\n"]],[2653,2653],[2654,2654]]],[1561682980766,["GJX@GJXAIOU",[[1,2654,"java.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)"]],[2654,2654],[2782,2782]]],[1561683010830,["GJX@GJXAIOU",[[1,2801,"\n"]],[2786,2786],[2787,2787]]],[1561683010973,["GJX@GJXAIOU",[[1,2802,"\n"]],[2787,2787],[2788,2788]]],[1561683065103,["GJX@GJXAIOU",[[1,2566,",shen"]],[2566,2566],[2571,2571]]],[1561683066102,["GJX@GJXAIOU",[[-1,2566,",shen"]],[2571,2571],[2566,2566]]],[1561683067642,["GJX@GJXAIOU",[[1,2566,",chu"]],[2566,2566],[2570,2570]]],[1561683068414,["GJX@GJXAIOU",[[-1,2567,"chu"]],[2570,2570],[2567,2567]]],[1561683072721,["GJX@GJXAIOU",[[1,2567,"出上面意外"]],[2567,2567],[2572,2572]]],[1561683073631,["GJX@GJXAIOU",[[-1,2570,"意外"]],[2572,2572],[2570,2570]]],[1561683091907,["GJX@GJXAIOU",[[1,2570,"以外的所有的异常均有这条异常处理"]],[2570,2570],[2586,2586]]],[1561683140935,["GJX@GJXAIOU",[[1,1743,"\n"]],[1743,1743],[1744,1744]]],[1561683143365,["GJX@GJXAIOU",[[1,1744,"**"],[1,1753,"**"]],[1744,1753],[1744,1757]]],[1561683144877,["GJX@GJXAIOU",[[1,1759,"\n"]],[1757,1757],[1758,1758]]],[1561683155727,["GJX@GJXAIOU",[[1,1758,"- 第一种方式：捕获异常："]],[1758,1758],[1771,1771]]],[1561683155968,["GJX@GJXAIOU",[[1,1773,"\n"]],[1771,1771],[1772,1772]]],[1561683161377,["GJX@GJXAIOU",[[1,1772,"```"]],[1772,1772],[1775,1775]]],[1561683162693,["GJX@GJXAIOU",[[1,1777,"\n"]],[1775,1775],[1776,1776]]],[1561683162861,["GJX@GJXAIOU",[[1,1778,"\n"]],[1776,1776],[1777,1777]]],[1561683163005,["GJX@GJXAIOU",[[1,1779,"\n"]],[1777,1777],[1778,1778]]],[1561683163118,["GJX@GJXAIOU",[[1,1780,"\n"]],[1778,1778],[1779,1779]]],[1561683163969,["GJX@GJXAIOU",[[1,1779,"```"]],[1779,1779],[1782,1782]]],[1561683171054,["GJX@GJXAIOU",[[1,1776,"try{"]],[1776,1776],[1780,1780]]],[1561683171678,["GJX@GJXAIOU",[[1,1783,"\n"]],[1780,1780],[1781,1781]]],[1561683176230,["GJX@GJXAIOU",[[1,1781,"  //"]],[1781,1781],[1785,1785]]],[1561683195336,["GJX@GJXAIOU",[[1,1785,"可能出现异常的代码"]],[1785,1785],[1794,1794]]],[1561683197237,["GJX@GJXAIOU",[[1,1795,"  \n"]],[1794,1794],[1797,1797]]],[1561683199693,["GJX@GJXAIOU",[[-1,1795,"  "]],[1797,1797],[1795,1795]]],[1561683207719,["GJX@GJXAIOU",[[1,1795,"} catch（）"]],[1795,1795],[1804,1804]]],[1561683211511,["GJX@GJXAIOU",[[1,1803,"yichang"]],[1803,1803],[1810,1810]]],[1561683212885,["GJX@GJXAIOU",[[-1,1803,"yichang"]],[1810,1810],[1803,1803]]],[1561683217487,["GJX@GJXAIOU",[[1,1803,"异常类型 e"]],[1803,1803],[1809,1809]]],[1561683220479,["GJX@GJXAIOU",[[1,1810,"{"]],[1810,1810],[1811,1811]]],[1561683220741,["GJX@GJXAIOU",[[1,1814,"\n"]],[1811,1811],[1812,1812]]],[1561683222796,["GJX@GJXAIOU",[[1,1815,"\n"]],[1812,1812],[1813,1813]]],[1561683223330,["GJX@GJXAIOU",[[1,1813,"}"]],[1813,1813],[1814,1814]]],[1561683234547,["GJX@GJXAIOU",[[1,1812,"  //异常的处理方式"]],[1812,1812],[1823,1823]]],[1561683241327,["GJX@GJXAIOU",[[-1,1827,"\n"]],[1827,1827],[1826,1826]]],[1561683243796,["GJX@GJXAIOU",[[-1,1826,"\n"]],[1826,1826],[1825,1825]]],[1561683260876,["GJX@GJXAIOU",[[1,1831,"\n"]],[1829,1829],[1830,1830]]],[1561683276703,["GJX@GJXAIOU",[[1,2887,"- 第二种方法：抛出异常"]],[2887,2887],[2899,2899]]],[1561683277517,["GJX@GJXAIOU",[[1,2900,"- \n"]],[2899,2899],[2902,2902]]],[1561683278998,["GJX@GJXAIOU",[[-1,2900,"- "]],[2902,2902],[2900,2900]]],[1561683290894,["GJX@GJXAIOU",[[1,2900,"  ```"]],[2900,2900],[2905,2905]]],[1561683293741,["GJX@GJXAIOU",[[1,2906,"  \n"]],[2905,2905],[2908,2908]]],[1561683294758,["GJX@GJXAIOU",[[1,2908,"```"]],[2908,2908],[2911,2911]]],[1561683296021,["GJX@GJXAIOU",[[1,2908,"\n  "]],[2905,2905],[2908,2908]]],[1561683298004,["GJX@GJXAIOU",[[-1,2900,"  "]],[2902,2902],[2900,2900]]],[1561683299549,["GJX@GJXAIOU",[[1,2900,"\n"]],[2900,2900],[2901,2901]]],[1561683301608,["GJX@GJXAIOU",[[-1,2909," "]],[2909,2909],[2908,2908]]],[1561683301752,["GJX@GJXAIOU",[[-1,2907,"\n"]],[2908,2908],[2907,2907]]],[1561683303005,["GJX@GJXAIOU",[[-1,2906,"  "]],[2907,2907],[2905,2905]]],[1561683305630,["GJX@GJXAIOU",[[1,2905,"\n"]],[2904,2904],[2905,2905]]],[1561683640453,["GJX@GJXAIOU",[[1,2901,"\n"]],[2900,2900],[2901,2901]]],[1561683642101,["GJX@GJXAIOU",[[1,2901,"shiyogn"]],[2901,2901],[2908,2908]]],[1561683643428,["GJX@GJXAIOU",[[-1,2901,"shiyogn"]],[2908,2908],[2901,2901]]],[1561683653255,["GJX@GJXAIOU",[[1,2901,"使用关键字throw"]],[2901,2901],[2911,2911]]],[1561683653282,["GJX@GJXAIOU",[[1,2906," "]],[2911,2911],[2912,2912]]],[1561683654384,["GJX@GJXAIOU",[[1,2912,"和"]],[2912,2912],[2913,2913]]],[1561683654413,["GJX@GJXAIOU",[[1,2912," "]],[2913,2913],[2914,2914]]],[1561683655646,["GJX@GJXAIOU",[[1,2914,"t"]],[2914,2914],[2915,2915]]],[1561683655674,["GJX@GJXAIOU",[[1,2914," "]],[2915,2915],[2916,2916]]],[1561683656758,["GJX@GJXAIOU",[[1,2916,"hrowa"]],[2916,2916],[2921,2921]]],[1561683657557,["GJX@GJXAIOU",[[-1,2920,"a"]],[2921,2921],[2920,2920]]],[1561683657629,["GJX@GJXAIOU",[[1,2920,"s"]],[2920,2920],[2921,2921]]],[1561683662448,["GJX@GJXAIOU",[[1,2921,"；"]],[2921,2921],[2922,2922]]],[1561683662789,["GJX@GJXAIOU",[[1,2923,"\n"]],[2922,2922],[2923,2923]]],[1561683669367,["GJX@GJXAIOU",[[1,2923,"- throw使用"]],[2923,2923],[2932,2932]]],[1561683669394,["GJX@GJXAIOU",[[1,2930," "]],[2932,2932],[2933,2933]]],[1561683673221,["GJX@GJXAIOU",[[-1,2931,"使用"]],[2933,2933],[2931,2931]]],[1561683697847,["GJX@GJXAIOU",[[1,2931,"在方法体中使用，用于抛出异常的关键字；"]],[2931,2931],[2950,2950]]],[1561683698549,["GJX@GJXAIOU",[[1,2951,"- \n"]],[2950,2950],[2953,2953]]],[1561683701296,["GJX@GJXAIOU",[[1,2953,"rh"]],[2953,2953],[2955,2955]]],[1561683701764,["GJX@GJXAIOU",[[-1,2953,"rh"]],[2955,2955],[2953,2953]]],[1561683706600,["GJX@GJXAIOU",[[1,2953,"throws在"]],[2953,2953],[2960,2960]]],[1561683706627,["GJX@GJXAIOU",[[1,2959," "]],[2960,2960],[2961,2961]]],[1561683713527,["GJX@GJXAIOU",[[1,2961,"方法"]],[2961,2961],[2963,2963]]],[1561683731176,["GJX@GJXAIOU",[[1,2963,"声明之后，宝石"]],[2963,2963],[2970,2970]]],[1561683731797,["GJX@GJXAIOU",[[-1,2968,"宝石"]],[2970,2970],[2968,2968]]],[1561683744216,["GJX@GJXAIOU",[[1,2968,"表示当前抛出的异常有哪些，"]],[2968,2968],[2981,2981]]],[1561683746607,["GJX@GJXAIOU",[[-1,2980,"，"]],[2981,2981],[2980,2980]]],[1561683747222,["GJX@GJXAIOU",[[1,2980,"（）"]],[2980,2980],[2982,2982]]],[1561683756742,["GJX@GJXAIOU",[[1,2981,"当方法体中含有th"]],[2981,2981],[2990,2990]]],[1561683756768,["GJX@GJXAIOU",[[1,2988," "],[-1,2989,"h"]],[2990,2990],[2990,2990]]],[1561683757289,["GJX@GJXAIOU",[[1,2990,"row"]],[2990,2990],[2993,2993]]],[1561683758460,["GJX@GJXAIOU",[[-1,2990,"row"]],[2993,2993],[2990,2990]]],[1561683762607,["GJX@GJXAIOU",[[1,2990,"hrowde"]],[2990,2990],[2996,2996]]],[1561683763493,["GJX@GJXAIOU",[[-1,2994,"de"]],[2996,2996],[2994,2994]]],[1561683764347,["GJX@GJXAIOU",[[1,2994,"的"]],[2994,2994],[2995,2995]]],[1561683764374,["GJX@GJXAIOU",[[1,2994," "]],[2995,2995],[2996,2996]]],[1561683766707,["GJX@GJXAIOU",[[1,2996,"时候"]],[2996,2996],[2998,2998]]],[1561683777032,["GJX@GJXAIOU",[[1,2953,"\n- "]],[2950,2950],[2953,2953]]],[1561683778517,["GJX@GJXAIOU",[[-1,2951,"- "]],[2953,2953],[2951,2951]]],[1561683788888,["GJX@GJXAIOU",[[1,2951,"  代码格式： ``"]],[2951,2951],[2961,2961]]],[1561683794463,["GJX@GJXAIOU",[[1,2960,"throw nw"]],[2960,2960],[2968,2968]]],[1561683795254,["GJX@GJXAIOU",[[-1,2967,"w"]],[2968,2968],[2967,2967]]],[1561683800992,["GJX@GJXAIOU",[[1,2967,"ew 异常类型90"]],[2967,2967],[2976,2976]]],[1561683801837,["GJX@GJXAIOU",[[-1,2974,"90"]],[2976,2976],[2974,2974]]],[1561683802664,["GJX@GJXAIOU",[[1,2974,"（）"]],[2974,2974],[2976,2976]]],[1561683803813,["GJX@GJXAIOU",[[-1,2974,"（）"]],[2976,2976],[2974,2974]]],[1561683805511,["GJX@GJXAIOU",[[1,2974,"();"]],[2974,2974],[2977,2977]]],[1561683824843,["GJX@GJXAIOU",[[1,2975,"可以有参或者无参，参数为返回的提示"]],[2975,2975],[2992,2992]]],[1561683826524,["GJX@GJXAIOU",[[-1,2990,"提示"]],[2992,2992],[2990,2990]]],[1561683831447,["GJX@GJXAIOU",[[1,2990,"语句提示"]],[2990,2990],[2994,2994]]],[1561683840152,["GJX@GJXAIOU",[[1,3047,"- \n"]],[3046,3046],[3049,3049]]],[1561683841230,["GJX@GJXAIOU",[[-1,3047,"- "]],[3049,3049],[3047,3047]]],[1561683846758,["GJX@GJXAIOU",[[1,3047,"  代码格式：'"]],[3047,3047],[3055,3055]]],[1561683846785,["GJX@GJXAIOU",[[-1,3054,"'"],[1,3055,"‘"]],[3055,3055],[3055,3055]]],[1561683846902,["GJX@GJXAIOU",[[1,3055,"'"]],[3055,3055],[3056,3056]]],[1561683846929,["GJX@GJXAIOU",[[-1,3055,"'"],[1,3056,"’"]],[3056,3056],[3056,3056]]],[1561683847948,["GJX@GJXAIOU",[[-1,3054,"‘’"]],[3056,3056],[3054,3054]]],[1561683848958,["GJX@GJXAIOU",[[1,3054,"fa"]],[3054,3054],[3056,3056]]],[1561683849445,["GJX@GJXAIOU",[[-1,3054,"fa"]],[3056,3056],[3054,3054]]],[1561683850608,["GJX@GJXAIOU",[[1,3054,"·"]],[3054,3054],[3055,3055]]],[1561683851374,["GJX@GJXAIOU",[[-1,3054,"·"]],[3055,3055],[3054,3054]]],[1561683852518,["GJX@GJXAIOU",[[1,3054,"··"]],[3054,3054],[3056,3056]]],[1561683853148,["GJX@GJXAIOU",[[-1,3054,"··"]],[3056,3056],[3054,3054]]],[1561683853849,["GJX@GJXAIOU",[[1,3054,"``"]],[3054,3054],[3056,3056]]],[1561683857985,["GJX@GJXAIOU",[[1,3055,"方法（）"]],[3055,3055],[3059,3059]]],[1561683864103,["GJX@GJXAIOU",[[1,3055,"函数"]],[3055,3055],[3057,3057]]],[1561683867776,["GJX@GJXAIOU",[[1,3060,"参数"]],[3060,3060],[3062,3062]]],[1561683940560,["GJX@GJXAIOU",[[1,3063,"throws 异常类型"]],[3063,3063],[3074,3074]]],[1561684221847,["GJX@GJXAIOU",[[1,3076,"  \n"]],[3075,3075],[3078,3078]]],[1561684222000,["GJX@GJXAIOU",[[-1,3076,"  "],[1,3078,"\n"]],[3078,3078],[3077,3077]]],[1561684222645,["GJX@GJXAIOU",[[1,3078,"\n"]],[3077,3077],[3078,3078]]],[1561684227019,["GJX@GJXAIOU",[[1,3077,"注意事项："]],[3077,3077],[3082,3082]]],[1561684228582,["GJX@GJXAIOU",[[1,3084,"\n"]],[3082,3082],[3083,3083]]],[1561684237927,["GJX@GJXAIOU",[[1,3083,"- 如果在代码中国存在n"]],[3083,3083],[3095,3095]]],[1561684237955,["GJX@GJXAIOU",[[1,3094," "]],[3095,3095],[3096,3096]]],[1561684238916,["GJX@GJXAIOU",[[-1,3095,"n"]],[3096,3096],[3095,3095]]],[1561684239606,["GJX@GJXAIOU",[[1,3095,"r"]],[3095,3095],[3096,3096]]],[1561684239982,["GJX@GJXAIOU",[[-1,3095,"r"]],[3096,3096],[3095,3095]]],[1561684242410,["GJX@GJXAIOU",[[1,3095,"throw nes"]],[3095,3095],[3104,3104]]],[1561684243016,["GJX@GJXAIOU",[[-1,3103,"s"]],[3104,3104],[3103,3103]]],[1561684262792,["GJX@GJXAIOU",[[1,3103,"w 异常类型()，那么这条语句之后的代码不会再执行"]],[3103,3103],[3128,3128]]],[1561685025541,["GJX@GJXAIOU",[[1,3134,"/**\n * \n */\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\n\t\t\t\n\t\t\n\t}\n\t\n}\n"]],[3134,3134],[4109,4109]]],[1561685046988,["GJX@GJXAIOU",[[1,3130,"\n"]],[3129,3129],[3130,3130]]],[1561685047117,["GJX@GJXAIOU",[[1,3131,"\n"]],[3130,3130],[3131,3131]]],[1561685050584,["GJX@GJXAIOU",[[1,3135,"java"]],[3135,3135],[3139,3139]]],[1561685053798,["GJX@GJXAIOU",[[1,3130,"****"]],[3130,3130],[3132,3132]]],[1561685055065,["GJX@GJXAIOU",[[1,3132,"duiy"]],[3132,3132],[3136,3136]]],[1561685056012,["GJX@GJXAIOU",[[-1,3132,"duiy"]],[3136,3136],[3132,3132]]],[1561685067691,["GJX@GJXAIOU",[[1,3132,"对于调用一个抛出一样"]],[3132,3132],[3142,3142]]],[1561685068348,["GJX@GJXAIOU",[[-1,3140,"一样"]],[3142,3142],[3140,3140]]],[1561685078222,["GJX@GJXAIOU",[[1,3140,"异常的方法处理方式："]],[3140,3140],[3150,3150]]],[1561685081461,["GJX@GJXAIOU",[[1,3154,"\n"]],[3152,3152],[3153,3153]]],[1561685082182,["GJX@GJXAIOU",[[1,3153,"- "]],[3153,3153],[3155,3155]]],[1561685087256,["GJX@GJXAIOU",[[1,3155,"处理当前异常；"]],[3155,3155],[3162,3162]]],[1561685087531,["GJX@GJXAIOU",[[1,3163,"- \n"]],[3162,3162],[3165,3165]]],[1561685094869,["GJX@GJXAIOU",[[1,3165,"继续抛出异常"]],[3165,3165],[3171,3171]]],[1561685097357,["GJX@GJXAIOU",[[-1,3172,"\n"]],[3173,3173],[3172,3172]]],[1561685098437,["GJX@GJXAIOU",[[1,3172,"\n"]],[3172,3172],[3173,3173]]],[1561685102765,["GJX@GJXAIOU",[[-1,4157," "]],[4158,4158],[4157,4157]]],[1561685108307,["GJX@GJXAIOU",[[-1,3181,"/**\n * \n */"]],[3181,3192],[3181,3181]]],[1561685108995,["GJX@GJXAIOU",[[-1,3181,"\n"]],[3181,3181],[3180,3180]]],[1561685139720,["GJX@GJXAIOU",[[1,3128,"；"]],[3128,3128],[3129,3129]]],[1561685140235,["GJX@GJXAIOU",[[1,3130,"- \n"]],[3129,3129],[3132,3132]]],[1561685158396,["GJX@GJXAIOU",[[1,3132,"如果代码中存在多种异常需要抛出，不能将异常卸载"]],[3132,3132],[3155,3155]]],[1561685158983,["GJX@GJXAIOU",[[-1,3153,"卸载"]],[3155,3155],[3153,3153]]],[1561685196040,["GJX@GJXAIOU",[[1,3153,"写在同一个代码块总，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；"]],[3153,3153],[3191,3191]]],[1561685196327,["GJX@GJXAIOU",[[1,3192,"- \n"]],[3191,3191],[3194,3194]]],[1561685201340,["GJX@GJXAIOU",[[1,3194,"不同的异常哟啊"]],[3194,3194],[3201,3201]]],[1561685202407,["GJX@GJXAIOU",[[-1,3200,"啊"]],[3201,3201],[3200,3200]]],[1561685202932,["GJX@GJXAIOU",[[-1,3199,"哟"]],[3200,3200],[3199,3199]]],[1561685203630,["GJX@GJXAIOU",[[1,3199,"哟啊"]],[3199,3199],[3201,3201]]],[1561685204845,["GJX@GJXAIOU",[[-1,3199,"哟啊"]],[3201,3201],[3199,3199]]],[1561685212694,["GJX@GJXAIOU",[[1,3199,"要分情况抛出，需要使用i"]],[3199,3199],[3211,3211]]],[1561685212725,["GJX@GJXAIOU",[[1,3210," "]],[3211,3211],[3212,3212]]],[1561685214660,["GJX@GJXAIOU",[[1,3212,"d-else"]],[3212,3212],[3218,3218]]],[1561685216619,["GJX@GJXAIOU",[[-1,3212,"d-else"]],[3218,3218],[3212,3212]]],[1561685218492,["GJX@GJXAIOU",[[1,3212,"f -s"]],[3212,3212],[3216,3216]]],[1561685219163,["GJX@GJXAIOU",[[-1,3215,"s"]],[3216,3216],[3215,3215]]],[1561685229047,["GJX@GJXAIOU",[[1,3215,"else if 结构，在不同的i"]],[3215,3215],[3231,3231]]],[1561685229077,["GJX@GJXAIOU",[[1,3230," "]],[3231,3231],[3232,3232]]],[1561685230509,["GJX@GJXAIOU",[[1,3232,"fzhogn"]],[3232,3232],[3238,3238]]],[1561685231438,["GJX@GJXAIOU",[[-1,3233,"zhogn"]],[3238,3238],[3233,3233]]],[1561685232953,["GJX@GJXAIOU",[[1,3233,"中"]],[3233,3233],[3234,3234]]],[1561685232982,["GJX@GJXAIOU",[[1,3233," "]],[3234,3234],[3235,3235]]],[1561685233567,["GJX@GJXAIOU",[[1,3235,"药"]],[3235,3235],[3236,3236]]],[1561685234347,["GJX@GJXAIOU",[[-1,3235,"药"]],[3236,3236],[3235,3235]]],[1561685239193,["GJX@GJXAIOU",[[1,3235,"抛出不同的异常"]],[3235,3235],[3242,3242]]],[1561685273710,["GJX@GJXAIOU",[[1,3242,"；"]],[3242,3242],[3243,3243]]],[1561685277815,["GJX@GJXAIOU",[[1,3244,"- \n"]],[3243,3243],[3246,3246]]],[1561685294533,["GJX@GJXAIOU",[[1,3246,"如果代码中出现了多种异常，需要在函数之后什么"]],[3246,3246],[3268,3268]]],[1561685295267,["GJX@GJXAIOU",[[-1,3266,"什么"]],[3268,3268],[3266,3266]]],[1561685310614,["GJX@GJXAIOU",[[1,3266,"声明，不同的异常使用逗号分开"]],[3266,3266],[3280,3280]]],[1561685441987,["GJX@GJXAIOU",[[1,3281,"- \n"]],[3280,3280],[3283,3283]]],[1561685442455,["GJX@GJXAIOU",[[-1,3281,"- "]],[3283,3283],[3282,3282]]],[1561685443851,["GJX@GJXAIOU",[[1,3283,"\n"]],[3282,3282],[3283,3283]]],[1561685455757,["GJX@GJXAIOU",[[1,3282,"捕获异常和抛出异常："]],[3282,3282],[3292,3292]]],[1561685458243,["GJX@GJXAIOU",[[-1,3291,"："]],[3292,3292],[3291,3291]]],[1561685459894,["GJX@GJXAIOU",[[1,3291,"注意："]],[3291,3291],[3294,3294]]],[1561685460348,["GJX@GJXAIOU",[[1,3296,"\n"]],[3294,3294],[3295,3295]]],[1561685501002,["GJX@GJXAIOU",[[1,3295,"捕获在那里都可以，但是抛出异常一旦涉及到用户"]],[3295,3295],[3317,3317]]],[1561685535957,["GJX@GJXAIOU",[[1,3317,"层面的，一定要不能抛出，必须捕获；"]],[3317,3317],[3334,3334]]],[1561685772509,["GJX@GJXAIOU",[[1,4356,"### 自定义 异常"]],[4356,4356],[4366,4366]]],[1561685772820,["GJX@GJXAIOU",[[1,4378,"\n"]],[4366,4366],[4367,4367]]],[1561685776222,["GJX@GJXAIOU",[[-1,4363," "]],[4364,4364],[4363,4363]]],[1561685777963,["GJX@GJXAIOU",[[1,4378,"\n"]],[4366,4366],[4367,4367]]],[1561685857644,["GJX@GJXAIOU",[[1,4367," "]],[4367,4367],[4368,4368]]],[1561685953440,["GJX@GJXAIOU",[[1,4368," "]],[4368,4368],[4369,4369]]],[1561686038602,["GJX@GJXAIOU",[[-1,4367,"  "]],[4369,4369],[4367,4367]]],[1561686262373,["GJX@GJXAIOU",[[1,4379,"\n"]],[4366,4366],[4367,4367]]],[1561686264477,["GJX@GJXAIOU",[[1,4367,"定义"]],[4367,4367],[4369,4369]]],[1561686270890,["GJX@GJXAIOU",[[-1,4367,"定义"]],[4369,4369],[4367,4367]]],[1561686273181,["GJX@GJXAIOU",[[1,4367,"定义格式："]],[4367,4367],[4372,4372]]],[1561686273468,["GJX@GJXAIOU",[[1,4385,"\n"]],[4372,4372],[4373,4373]]],[1561686276084,["GJX@GJXAIOU",[[1,4373,"```"]],[4373,4373],[4376,4376]]],[1561686276114,["GJX@GJXAIOU",[[1,4376,"language\n```\n"]],[4376,4376],[4376,4384]]],[1561686278522,["GJX@GJXAIOU",[[-1,4376,"language"],[1,4384,"\n"]],[4376,4384],[4377,4377]]],[1561686282446,["GJX@GJXAIOU",[[1,4377,"cl"]],[4377,4377],[4379,4379]]],[1561686285612,["GJX@GJXAIOU",[[1,4379,"ass zi"]],[4379,4379],[4385,4385]]],[1561686286420,["GJX@GJXAIOU",[[-1,4383,"zi"]],[4385,4385],[4383,4383]]],[1561686293492,["GJX@GJXAIOU",[[1,4383,"自定义异常类名 exteng"]],[4383,4383],[4397,4397]]],[1561686294251,["GJX@GJXAIOU",[[-1,4396,"g"]],[4397,4397],[4396,4396]]],[1561686296631,["GJX@GJXAIOU",[[1,4396,"ds R"]],[4396,4396],[4400,4400]]],[1561686297034,["GJX@GJXAIOU",[[-1,4399,"R"]],[4400,4400],[4399,4399]]],[1561686301540,["GJX@GJXAIOU",[[1,4399,"Exception{"]],[4399,4399],[4409,4409]]],[1561686301770,["GJX@GJXAIOU",[[1,4410,"\n"]],[4409,4409],[4410,4410]]],[1561686302890,["GJX@GJXAIOU",[[1,4411,"\n"]],[4410,4410],[4411,4411]]],[1561686303460,["GJX@GJXAIOU",[[1,4411,"}"]],[4411,4411],[4412,4412]]],[1561686307331,["GJX@GJXAIOU",[[1,4410,"pub"]],[4410,4410],[4413,4413]]],[1561686308189,["GJX@GJXAIOU",[[-1,4410,"pub"]],[4413,4413],[4410,4410]]],[1561686322052,["GJX@GJXAIOU",[[1,4410,"  public 自定义异常类名()"]],[4410,4410],[4428,4428]]],[1561686324540,["GJX@GJXAIOU",[[1,4427,"Stirng"]],[4427,4427],[4433,4433]]],[1561686326044,["GJX@GJXAIOU",[[-1,4428,"tirng"]],[4433,4433],[4428,4428]]],[1561686330684,["GJX@GJXAIOU",[[1,4428,"tring message"]],[4428,4428],[4441,4441]]],[1561686333891,["GJX@GJXAIOU",[[1,4442,"{"]],[4442,4442],[4443,4443]]],[1561686334147,["GJX@GJXAIOU",[[1,4444,"  \n"]],[4443,4443],[4446,4446]]],[1561686335780,["GJX@GJXAIOU",[[-1,4444,"  "],[1,4446,"\n"]],[4446,4446],[4445,4445]]],[1561686336252,["GJX@GJXAIOU",[[1,4445,"}"]],[4445,4445],[4446,4446]]],[1561686337813,["GJX@GJXAIOU",[[1,4445,"  "]],[4445,4445],[4447,4447]]],[1561686339210,["GJX@GJXAIOU",[[1,4444,"    "]],[4444,4444],[4448,4448]]],[1561686347404,["GJX@GJXAIOU",[[1,4453,"()"]],[4453,4453],[4455,4455]]],[1561686349085,["GJX@GJXAIOU",[[1,4454,",m"]],[4454,4454],[4456,4456]]],[1561686350226,["GJX@GJXAIOU",[[-1,4454,",m"]],[4456,4456],[4454,4454]]],[1561686352892,["GJX@GJXAIOU",[[1,4454,"message"]],[4454,4454],[4461,4461]]],[1561686354668,["GJX@GJXAIOU",[[1,4462,";"]],[4462,4462],[4463,4463]]],[1561686360429,["GJX@GJXAIOU",[[1,4443,"  、、"]],[4443,4443],[4447,4447]]],[1561686361218,["GJX@GJXAIOU",[[-1,4443,"  、、"]],[4447,4447],[4443,4443]]],[1561686369956,["GJX@GJXAIOU",[[1,4443," //gouzao"]],[4443,4443],[4452,4452]]],[1561686371282,["GJX@GJXAIOU",[[-1,4446,"gouzao"]],[4452,4452],[4446,4446]]],[1561686376860,["GJX@GJXAIOU",[[1,4446,"构造方法必须实现"]],[4446,4446],[4454,4454]]],[1561686380267,["GJX@GJXAIOU",[[1,4474,"  "]],[4474,4474],[4476,4476]]],[1561686380970,["GJX@GJXAIOU",[[-1,4475," "]],[4476,4476],[4475,4475]]],[1561686381885,["GJX@GJXAIOU",[[1,4475,"、、"]],[4475,4475],[4477,4477]]],[1561686382468,["GJX@GJXAIOU",[[-1,4475,"、、"]],[4477,4477],[4475,4475]]],[1561686399487,["GJX@GJXAIOU",[[1,4475,"//这里调用的是Exception中的"]],[4475,4475],[4494,4494]]],[1561686462790,[null,[[-1,4459,"\n  }\n"],[1,4464,"super"],[1,4494,"\n  }\n"]],[4459,4459],[4499,4499]]],[1561686462790,[null,[[1,4459,"\n  }\n"],[-1,4459,"super"],[-1,4494,"\n  }\n"]],[4499,4499],[4459,4459]]],[1561686446812,["GJX@GJXAIOU",[[1,4494,"message，最终调用的是Throwable中的getmessage方法；"]],[4494,4494],[4532,4532]]],[1561688622824,[null,[[-1,4459,"\n  }\n"],[1,4464,"super"],[1,4532,"\n  }\n"]],[4459,4459],[4537,4537]]],[1561688622824,[null,[[1,4459,"\n  }\n"],[-1,4459,"super"],[-1,4532,"\n  }\n"]],[4537,4537],[4459,4459]]],[1561688573042,["GJX@GJXAIOU",[[1,4535,"  \n  "]],[4532,4532],[4537,4537]]],[1561689762851,[null,[[-1,4459,"\n  }\n"],[1,4464,"super"],[-1,4532,"}\n`"],[1,4535,"\n  "],[1,4540,"}\n}\n`"]],[4459,4459],[4545,4545]]],[1561689762851,[null,[[1,4459,"\n  }\n"],[-1,4459,"super"],[1,4532,"}\n`"],[-1,4532,"\n  "],[-1,4540,"}\n}\n`"]],[4545,4545],[4459,4459]]],[1561689708843,["GJX@GJXAIOU",[[1,4561,"\n"]],[4547,4547],[4548,4548]]],[1561689708959,["GJX@GJXAIOU",[[1,4562,"\n"]],[4548,4548],[4549,4549]]],[1561689709079,["GJX@GJXAIOU",[[1,4563,"\n"]],[4549,4549],[4550,4550]]],[1561689711866,["GJX@GJXAIOU",[[1,4550,"代码示例“"]],[4550,4550],[4555,4555]]],[1561689712467,["GJX@GJXAIOU",[[-1,4554,"“"]],[4555,4555],[4554,4554]]],[1561689713075,["GJX@GJXAIOU",[[1,4554,"："]],[4554,4554],[4555,4555]]],[1561689713625,["GJX@GJXAIOU",[[1,4569,"\n"]],[4555,4555],[4556,4556]]],[1561689715139,["GJX@GJXAIOU",[[1,4556,"```"]],[4556,4556],[4559,4559]]],[1561689715175,["GJX@GJXAIOU",[[1,4559,"language\n```\n"]],[4559,4559],[4559,4567]]],[1561689716251,["GJX@GJXAIOU",[[-1,4559,"language"],[1,4567,"j"]],[4559,4567],[4560,4560]]],[1561689716633,["GJX@GJXAIOU",[[1,4560,"ava"]],[4560,4560],[4563,4563]]],[1561689716711,["GJX@GJXAIOU",[[1,4564,"\n"]],[4563,4563],[4564,4564]]],[1561689717927,["GJX@GJXAIOU",[[1,4564,"/**\n * \n */\npackage a_JavaException;\n\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\n\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n\n"]],[4564,4564],[5327,5327]]],[1561689722119,["GJX@GJXAIOU",[[-1,4564,"/**\n * \n */"]],[4564,4575],[4564,4564]]],[1561689722873,["GJX@GJXAIOU",[[-1,4564,"\n"]],[4564,4564],[4563,4563]]],[1561689725358,["GJX@GJXAIOU",[[-1,4590,"\n"]],[4590,4590],[4589,4589]]],[1561689740202,["GJX@GJXAIOU",[[-1,5314,"\n"]],[5314,5314],[5313,5313]]],[1561689740703,["GJX@GJXAIOU",[[-1,5313,"\n"]],[5313,5313],[5312,5312]]]],null,"GJX@GJXAIOU"],["c7b658fc-7092-4fc5-af4c-f1b2d41d37e2",1561770251542,"# JavaEEDay15-异常处理和集合初步\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### Throwable\n\nJava中所有错误或者异常的超类； \n  - Error : 错误，无法处理，只能避免\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常\n\n\n运行时异常和编译时异常：\n\n- 吃完饭发现没带钱包：运行时异常\n- 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - String getMessage();  //获取Throwable类对象里面保存的【异常信息】\n    - String toMessage();  //返回一个异常的简短描述\n    - void printStackTrace(); //在控制台中显示详细的异常问题\n\n示例代码\n```java\n/**\n * \n */\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class YiChangLeiLianXi {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t//首先创建一个异常类，\n\t\t//调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n\t\t//调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n\t\t\n\t\t//Throwable throwable = new Throwable(); //调用无参构造方法\n\t\tThrowable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n\t\t\n\t\tSystem.out.println(throwable2.getMessage());\n\t\tSystem.out.println(throwable2.toString());\n\t\tthrowable2.printStackTrace();\n\n\t}\n\n}\n\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n区分Error和Exception：看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\n\n**Java中异常处理**\n- 第一种方式：捕获异常：\n```\ntry{\n  //可能出现异常的代码\n} catch（异常类型 e）{\n  //异常的处理方式\n}\n```\n\n\n使用try - catch的注意事项：\n- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会继续执行后面的代码；\n- 一旦异常被try-catch捕获，那么JVM就会认为当前代码找那个已经不存在异常，可以继续运作；\n- 在 try-catch 语句块里面，如果出现了多种异常，这里可以加上多个 catch 语句块，对不同的异常做区别对待，做到异常的精准匹配；\n- 在 try- catch 语句块中，如果存在大面积的异常，可以放在整个 catch 语句块中的最后一个，如果放在前面可能导致其他的 catch 异常无效；（因为 Exception 是其他异常的父类）\n\n程序示例：\n```java\npackage a_JavaException;\n\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常,出上面以外的所有的异常均有这条异常处理\n\t\t\t// TODO: handle exception\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n\n}\n\n```\n程序执行结果：\n```\njava.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)\n```\n\n\n- 第二种方法：抛出异常\n\n使用关键字 throw 和 throws；\n- throw 在方法体中使用，用于抛出异常的关键字；\n  代码格式： `throw new 异常类型(可以有参或者无参，参数为返回的语句提示);`\n- throws 在方法声明之后，表示当前抛出的异常有哪些（当方法体中含有 throw 的时候）\n  代码格式：`函数方法（参数）throws 异常类型`\n\n注意事项：\n- 如果在代码中国存在 throw new 异常类型()，那么这条语句之后的代码不会再执行；\n- 如果代码中存在多种异常需要抛出，不能将异常写在同一个代码块总，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；\n- 不同的异常要分情况抛出，需要使用 if -else if 结构，在不同的 if 中抛出不同的异常；\n- 如果代码中出现了多种异常，需要在函数之后声明，不同的异常使用逗号分开\n\n捕获异常和抛出异常注意：\n捕获在那里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；\n\n**对于调用一个抛出异常的方法处理方式：**\n- 处理当前异常；\n- 继续抛出异常\n\n```java\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\n\t\t\t\n\t\t\n\t}\n\t\n}\n\n```\n\n### 自定义异常\n\n定义格式：\n```\nclass 自定义异常类名 extends Exception{\n  public 自定义异常类名(String message){ //构造方法必须实现\n    super(message); //这里调用的是Exception中的message，最终调用的是Throwable中的getmessage方法；\n    \n  }\n}\n```\n\n\n代码示例：\n```java\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\n\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1561770235981,["GJX@GJXAIOU",[[1,64,"一 "]],[64,64],[65,65]]],[1561770236291,["GJX@GJXAIOU",[[1,65,"、"]],[65,65],[66,66]]],[1561770244462,["GJX@GJXAIOU",[[1,121,"；"]],[121,121],[122,122]]],[1561770247542,["GJX@GJXAIOU",[[1,165,"；"]],[165,165],[166,166]]],[1561770261172,["GJX@GJXAIOU",[[-1,168,"\n"]],[169,169],[168,168]]],[1561770261740,["GJX@GJXAIOU",[[-1,167,"\n"]],[168,168],[167,167]]],[1561770267926,["GJX@GJXAIOU",[[1,167,"··"]],[167,167],[169,169]]],[1561770268971,["GJX@GJXAIOU",[[-1,167,"··"]],[169,169],[167,167]]],[1561770271269,["GJX@GJXAIOU",[[1,167,"  - "]],[167,167],[171,171]]],[1561770273227,["GJX@GJXAIOU",[[1,169,"  "]],[171,171],[173,173]]],[1561770275685,["GJX@GJXAIOU",[[1,186,"      "]],[188,188],[194,194]]],[1561770277035,["GJX@GJXAIOU",[[1,210,"      "]],[212,212],[218,218]]],[1561770370503,[null,[[-1,192,"\n"],[1,210,"\n"],[-1,216,"\n"]],[192,192],[216,216]]],[1561770370503,[null,[[1,192,"\n"],[-1,209,"\n"],[1,216,"\n"]],[216,216],[192,192]]],[1561770332267,["GJX@GJXAIOU",[[-1,599," */"]],[602,602],[599,599]]],[1561770332506,["GJX@GJXAIOU",[[-1,599,"\n"]],[599,599],[598,598]]],[1561770333146,["GJX@GJXAIOU",[[-1,595," * "]],[598,598],[595,595]]],[1561770333323,["GJX@GJXAIOU",[[-1,595,"\n"]],[595,595],[594,594]]],[1561770334045,["GJX@GJXAIOU",[[-1,591,"/**"]],[594,594],[591,591]]],[1561770334475,["GJX@GJXAIOU",[[-1,591,"\n"]],[591,591],[590,590]]],[1561770344925,["GJX@GJXAIOU",[[-1,617,"/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */"]],[617,682],[617,617]]],[1561770345395,["GJX@GJXAIOU",[[-1,617,"\n"]],[617,617],[616,616]]],[1561770346251,["GJX@GJXAIOU",[[-1,616,"\n"]],[616,616],[615,615]]],[1561770349907,["GJX@GJXAIOU",[[-1,650,"/**\n\t * @param args\n\t */\n\t"]],[648,674],[648,648]]],[1561770351109,["GJX@GJXAIOU",[[-1,648,"\n"]],[648,648],[647,647]]],[1561770550507,[null,[[-1,192,"\n"],[1,210,"\n"],[-1,216,"\n"]],[192,192],[216,216]]],[1561770550507,[null,[[1,192,"\n"],[-1,209,"\n"],[1,216,"\n"]],[216,216],[192,192]]],[1561770519237,["GJX@GJXAIOU",[[-1,1040,"\n"]],[1040,1040],[1039,1039]]],[1561770520379,["GJX@GJXAIOU",[[-1,1042,"\n"]],[1042,1042],[1041,1041]]],[1561770522099,["GJX@GJXAIOU",[[-1,1036,"\n"]],[1036,1036],[1035,1035]]],[1561770529356,["GJX@GJXAIOU",[[-1,908,"\n"]],[909,909],[908,908]]],[1561770533315,["GJX@GJXAIOU",[[1,908,"\n\t\t"]],[908,908],[911,911]]],[1561770730513,[null,[[-1,192,"\n"],[1,210,"\n"],[-1,216,"\n"],[1,908,"法"],[-1,911,"\n"]],[192,192],[911,911]]],[1561770730513,[null,[[1,192,"\n"],[-1,209,"\n"],[1,216,"\n"],[-1,907,"法"],[1,911,"\n"]],[911,911],[192,192]]],[1561770720376,["GJX@GJXAIOU",[[-1,648,"\t"],[1,649,"    "],[-1,690,"\t\t"],[1,692,"        "],[-1,705,"\t\t"],[1,707,"        "],[-1,748,"\t\t"],[1,750,"        "],[-1,792,"\t\t\n\t\t"],[1,797,"        \n        "],[-1,849,"\t\t"],[1,851,"        "],[-1,909,"\t\t\t\t\n\t\t"],[1,916,"                \n        "],[-1,961,"\t\t"],[1,963,"        "],[-1,1006,"\t\t"],[1,1008,"        //"],[-1,1038,"\t"],[1,1039,"\n        testThrowable();\n    }\n\n    public static void testThrowable(){\n        Throwable throwable = new Throwable(\"这里有问题\");\n        throwable.printStackTrace();\n    "]],[591,1042],[1280,1280]]],[1561770790513,[null,[[-1,192,"\n"],[1,210,"\n"],[-1,216,"\n"],[1,648,"\n"],[-1,652,"\t"],[1,693,"\n"],[-1,701,"\t"],[1,714,"\n"],[-1,722,"\t"],[1,763,"\n"],[-1,771,"\t"],[1,813,"\n"],[-1,830,"\t"],[1,882,"\n"],[-1,890,"\t"],[1,947,"法"],[-1,973,"\t"],[1,1018,"\n"],[-1,1026,"\t"],[1,1069,"\n"],[-1,1079,"\t"],[1,1109,"\n"],[-1,1277,"\t"],[1,1278,""]],[192,192],[1278,1278]]],[1561770790513,[null,[[1,192,"\n"],[-1,209,"\n"],[1,216,"\n"],[-1,647,"\n"],[1,652,"\t"],[-1,692,"\n"],[1,701,"\t"],[-1,713,"\n"],[1,722,"\t"],[-1,762,"\n"],[1,771,"\t"],[-1,812,"\n"],[1,830,"\t"],[-1,881,"\n"],[1,890,"\t"],[-1,946,"法"],[1,973,"\t"],[-1,1017,"\n"],[1,1026,"\t"],[-1,1068,"\n"],[1,1079,"\t"],[-1,1108,"\n"],[1,1277,"\t"],[-1,1277,""]],[1278,1278],[192,192]]],[1561770739845,["GJX@GJXAIOU",[[1,1235,"  /"]],[1235,1235],[1238,1238]]],[1561770740464,["GJX@GJXAIOU",[[-1,1236," /"]],[1238,1238],[1236,1236]]],[1561770744040,["GJX@GJXAIOU",[[1,1236,"//创"]],[1236,1236],[1239,1239]]],[1561770745410,["GJX@GJXAIOU",[[-1,1238,"创"]],[1239,1239],[1238,1238]]],[1561770753405,["GJX@GJXAIOU",[[1,1238,"创建该异常位置；"]],[1238,1238],[1246,1246]]],[1561770766079,["GJX@GJXAIOU",[[1,1134," //调用该异常位置；"]],[1134,1134],[1145,1145]]]],null,"GJX@GJXAIOU"],["9b951913-cd9b-4ec2-b5b9-83ad7c82c481",1561770969157,"# JavaEEDay15-异常处理和集合初步\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### 一、 Throwable\n\nJava中所有错误或者异常的超类； \n  - Error : 错误，无法处理，只能避免；\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常；\n    - 运行时异常和编译时异常：\n      - 吃完饭发现没带钱包：运行时异常\n      - 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - String getMessage();  //获取Throwable类对象里面保存的【异常信息】\n    - String toMessage();  //返回一个异常的简短描述\n    - void printStackTrace(); //在控制台中显示详细的异常问题\n\n示例代码\n```java\npackage a_JavaException;\npublic class YiChangLeiLianXi {\n    public static void main(String[] args) {\n        //首先创建一个异常类，\n        //调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n        //调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n        \n        //Throwable throwable = new Throwable(); //调用无参构造方法\n        Throwable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n                \n        System.out.println(throwable2.getMessage());\n        System.out.println(throwable2.toString());\n        //throwable2.printStackTrace();\n\n        testThrowable(); //调用该异常位置；\n    }\n\n    public static void testThrowable(){\n        Throwable throwable = new Throwable(\"这里有问题\"); //创建该异常位置；\n        throwable.printStackTrace();\n    }\n}\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n区分Error和Exception：看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\n\n**Java中异常处理**\n- 第一种方式：捕获异常：\n```\ntry{\n  //可能出现异常的代码\n} catch（异常类型 e）{\n  //异常的处理方式\n}\n```\n\n\n使用try - catch的注意事项：\n- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会继续执行后面的代码；\n- 一旦异常被try-catch捕获，那么JVM就会认为当前代码找那个已经不存在异常，可以继续运作；\n- 在 try-catch 语句块里面，如果出现了多种异常，这里可以加上多个 catch 语句块，对不同的异常做区别对待，做到异常的精准匹配；\n- 在 try- catch 语句块中，如果存在大面积的异常，可以放在整个 catch 语句块中的最后一个，如果放在前面可能导致其他的 catch 异常无效；（因为 Exception 是其他异常的父类）\n\n程序示例：\n```java\npackage a_JavaException;\n\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常,出上面以外的所有的异常均有这条异常处理\n\t\t\t// TODO: handle exception\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n\n}\n\n```\n程序执行结果：\n```\njava.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)\n```\n\n\n- 第二种方法：抛出异常\n\n使用关键字 throw 和 throws；\n- throw 在方法体中使用，用于抛出异常的关键字；\n  代码格式： `throw new 异常类型(可以有参或者无参，参数为返回的语句提示);`\n- throws 在方法声明之后，表示当前抛出的异常有哪些（当方法体中含有 throw 的时候）\n  代码格式：`函数方法（参数）throws 异常类型`\n\n注意事项：\n- 如果在代码中国存在 throw new 异常类型()，那么这条语句之后的代码不会再执行；\n- 如果代码中存在多种异常需要抛出，不能将异常写在同一个代码块总，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；\n- 不同的异常要分情况抛出，需要使用 if -else if 结构，在不同的 if 中抛出不同的异常；\n- 如果代码中出现了多种异常，需要在函数之后声明，不同的异常使用逗号分开\n\n捕获异常和抛出异常注意：\n捕获在那里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；\n\n**对于调用一个抛出异常的方法处理方式：**\n- 处理当前异常；\n- 继续抛出异常\n\n```java\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\n\t\t\t\n\t\t\n\t}\n\t\n}\n\n```\n\n### 自定义异常\n\n定义格式：\n```\nclass 自定义异常类名 extends Exception{\n  public 自定义异常类名(String message){ //构造方法必须实现\n    super(message); //这里调用的是Exception中的message，最终调用的是Throwable中的getmessage方法；\n    \n  }\n}\n```\n\n\n代码示例：\n```java\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\n\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1561770930039,["GJX@GJXAIOU",[[1,1445,"\n"]],[1445,1445],[1446,1446]]],[1561770932780,["GJX@GJXAIOU",[[1,1427,"**"],[1,1445,"**"]],[1427,1445],[1427,1449]]],[1561771030579,["GJX@GJXAIOU",[[-1,2116,"找那个"]],[2119,2119],[2116,2116]]],[1561771035330,["GJX@GJXAIOU",[[-1,2128,"运作"]],[2130,2130],[2128,2128]]],[1561771037834,["GJX@GJXAIOU",[[1,2128,"运行"]],[2128,2128],[2130,2130]]],[1561771187734,["GJX@GJXAIOU",[[1,2305,"，包含多有"]],[2305,2305],[2310,2310]]],[1561771188503,["GJX@GJXAIOU",[[-1,2308,"多有"]],[2310,2310],[2308,2308]]],[1561771201374,["GJX@GJXAIOU",[[1,2308,"所有异常"]],[2308,2308],[2312,2312]]],[1561771207506,["GJX@GJXAIOU",[[-1,2355,"\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月27日\n */\n"]],[2354,2421],[2354,2354]]],[1561771207875,["GJX@GJXAIOU",[[-1,2354,"\n"]],[2354,2354],[2353,2353]]],[1561771227462,["GJX@GJXAIOU",[[-1,2759,"出"]],[2760,2760],[2759,2759]]],[1561771231576,["GJX@GJXAIOU",[[1,2759,"除了"]],[2759,2759],[2761,2761]]],[1561771231805,["GJX@GJXAIOU",[[-1,2760,"了"]],[2761,2761],[2760,2760]]],[1561771237385,["GJX@GJXAIOU",[[-1,2779,"\t\t\t// TODO: handle exception"]],[2779,2807],[2779,2779]]],[1561771238049,["GJX@GJXAIOU",[[-1,2779,"\n"]],[2779,2779],[2778,2778]]],[1561771251712,["GJX@GJXAIOU",[[-1,2820,"\n"]],[2820,2820],[2819,2819]]],[1561771253754,["GJX@GJXAIOU",[[-1,2817,"\n"]],[2817,2817],[2817,2817]]],[1561771297032,["GJX@GJXAIOU",[[1,3128,"作为搭配使用"]],[3128,3128],[3134,3134]]],[1561771311989,["GJX@GJXAIOU",[[-1,1936,"- "]],[1938,1938],[1936,1936]]],[1561771314440,["GJX@GJXAIOU",[[1,1936,"### "]],[1936,1936],[1951,1951]]],[1561771330654,["GJX@GJXAIOU",[[-1,2972,"- "]],[2972,2974],[2972,2972]]],[1561771332589,["GJX@GJXAIOU",[[1,2972,"### "]],[2972,2972],[2986,2986]]],[1561771349608,["GJX@GJXAIOU",[[-1,3184,"国"]],[3185,3185],[3184,3184]]],[1561771353046,["GJX@GJXAIOU",[[1,3186,"语句"]],[3186,3186],[3188,3188]]],[1561771355581,["GJX@GJXAIOU",[[1,3189,"`"]],[3189,3189],[3190,3190]]],[1561771358474,["GJX@GJXAIOU",[[1,3206,"`"]],[3206,3206],[3207,3207]]],[1561771376195,["GJX@GJXAIOU",[[-1,3257,"总"]],[3258,3258],[3257,3257]]],[1561771376774,["GJX@GJXAIOU",[[1,3257,"z"]],[3257,3257],[3258,3258]]],[1561771376805,["GJX@GJXAIOU",[[1,3257," "]],[3258,3258],[3259,3259]]],[1561771377813,["GJX@GJXAIOU",[[1,3259,"ho"]],[3259,3259],[3261,3261]]],[1561771380694,["GJX@GJXAIOU",[[-1,3258,"zho"]],[3261,3261],[3258,3258]]],[1561771383897,["GJX@GJXAIOU",[[1,3258,"中"]],[3258,3258],[3259,3259]]],[1561771386179,["GJX@GJXAIOU",[[-1,3257," "]],[3258,3258],[3257,3257]]],[1561771413006,["GJX@GJXAIOU",[[1,3307,"·"]],[3307,3307],[3308,3308]]],[1561771414425,["GJX@GJXAIOU",[[-1,3307,"·"]],[3308,3308],[3307,3307]]],[1561771415837,["GJX@GJXAIOU",[[1,3307,"`"]],[3307,3307],[3308,3308]]],[1561771418773,["GJX@GJXAIOU",[[1,3319,"`"]],[3319,3319],[3320,3320]]],[1561771433010,["GJX@GJXAIOU",[[1,3378,";"]],[3378,3378],[3379,3379]]],[1561771440870,["GJX@GJXAIOU",[[-1,3397,"那"]],[3398,3398],[3397,3397]]],[1561771441588,["GJX@GJXAIOU",[[1,3397,"n"]],[3397,3397],[3398,3398]]],[1561771441812,["GJX@GJXAIOU",[[1,3397," "],[1,3398," a"]],[3398,3398],[3400,3400]]],[1561771442686,["GJX@GJXAIOU",[[-1,3398,"na"]],[3400,3400],[3398,3398]]],[1561771444324,["GJX@GJXAIOU",[[1,3398,"nali"]],[3398,3398],[3402,3402]]],[1561771445547,["GJX@GJXAIOU",[[-1,3398,"nali "]],[3402,3402],[3397,3397]]],[1561771447174,["GJX@GJXAIOU",[[-1,3397," "]],[3398,3398],[3397,3397]]],[1561771450097,["GJX@GJXAIOU",[[1,3397,"哪里"]],[3397,3397],[3399,3399]]],[1561771450368,["GJX@GJXAIOU",[[-1,3399,"里"]],[3399,3399],[3398,3398]]],[1561771458501,["GJX@GJXAIOU",[[1,2988,"- "]],[2988,2988],[2990,2990]]],[1561771462179,["GJX@GJXAIOU",[[1,3012,"  "],[1,3040,"  "],[1,3087,"  "],[1,3142,"  "]],[3014,3170],[3016,3178]]],[1561771465084,["GJX@GJXAIOU",[[1,3180,"- "]],[3180,3180],[3182,3182]]],[1561771468360,["GJX@GJXAIOU",[[1,3188,"  "],[1,3238,"  "],[1,3300,"  "],[1,3354,"  "]],[3190,3391],[3192,3399]]],[1561771471508,["GJX@GJXAIOU",[[1,3401,"- "]],[3401,3401],[3403,3403]]],[1561771474466,["GJX@GJXAIOU",[[-1,3416,"捕获在哪里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；"],[1,3455,"  "]],[3416,3455],[3418,3418]]],[1561771477098,["GJX@GJXAIOU",[[1,3416,"捕获在哪里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；"],[-1,3416,"  "]],[3418,3418],[3416,3455]]],[1561771483342,["GJX@GJXAIOU",[[1,3416,"    "]],[3416,3416],[3420,3420]]],[1561771509390,["GJX@GJXAIOU",[[-1,3538,"/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */"]],[3538,3603],[3538,3538]]],[1561771509818,["GJX@GJXAIOU",[[-1,3538,"\n"]],[3538,3538],[3537,3537]]],[1561771510440,["GJX@GJXAIOU",[[-1,3537,"\n"]],[3537,3537],[3536,3536]]],[1561771548444,["GJX@GJXAIOU",[[-1,18,"和集合初步"]],[18,23],[18,18]]]],null,"GJX@GJXAIOU"],["9ffc3d0a-3433-4e48-bcfe-aa733baa0810",1561942262497,"# JavaEEDay15-异常处理\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### 一、 Throwable\n\nJava中所有错误或者异常的超类； \n  - Error : 错误，无法处理，只能避免；\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常；\n    - 运行时异常和编译时异常：\n      - 吃完饭发现没带钱包：运行时异常\n      - 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - String getMessage();  //获取Throwable类对象里面保存的【异常信息】\n    - String toMessage();  //返回一个异常的简短描述\n    - void printStackTrace(); //在控制台中显示详细的异常问题\n\n示例代码\n```java\npackage a_JavaException;\npublic class YiChangLeiLianXi {\n    public static void main(String[] args) {\n        //首先创建一个异常类，\n        //调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n        //调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n        \n        //Throwable throwable = new Throwable(); //调用无参构造方法\n        Throwable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n                \n        System.out.println(throwable2.getMessage());\n        System.out.println(throwable2.toString());\n        //throwable2.printStackTrace();\n\n        testThrowable(); //调用该异常位置；\n    }\n\n    public static void testThrowable(){\n        Throwable throwable = new Throwable(\"这里有问题\"); //创建该异常位置；\n        throwable.printStackTrace();\n    }\n}\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n**区分Error和Exception：**\n看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\n\n**Java中异常处理**\n### 第一种方式：捕获异常：\n```\ntry{\n  //可能出现异常的代码\n} catch（异常类型 e）{\n  //异常的处理方式\n}\n```\n\n\n使用try - catch的注意事项：\n- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会继续执行后面的代码；\n- 一旦异常被try-catch捕获，那么JVM就会认为当前代码已经不存在异常，可以继续运行；\n- 在 try-catch 语句块里面，如果出现了多种异常，这里可以加上多个 catch 语句块，对不同的异常做区别对待，做到异常的精准匹配；\n- 在 try- catch 语句块中，如果存在大面积的异常，可以放在整个 catch 语句块中的最后一个，如果放在前面可能导致其他的 catch 异常无效；（因为 Exception 是其他异常的父类，包含所有异常）\n\n程序示例：\n```java\npackage a_JavaException;\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常,除上面以外的所有的异常均有这条异常处理\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n}\n```\n程序执行结果：\n```\njava.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)\n```\n\n\n### 第二种方法：抛出异常\n\n- 使用关键字 throw 和 throws；\n  - throw 在方法体中使用，用于抛出异常的关键字；\n    代码格式： `throw new 异常类型(可以有参或者无参，参数为返回的语句提示);`\n  - throws 在方法声明之后，表示当前抛出的异常有哪些（当方法体中含有 throw 的时候作为搭配使用）\n    代码格式：`函数方法（参数）throws 异常类型`\n\n- 注意事项：\n  - 如果在代码中存在语句 `throw new 异常类型()`，那么这条语句之后的代码不会再执行；\n  - 如果代码中存在多种异常需要抛出，不能将异常写在同一个代码块中，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；\n  - 不同的异常要分情况抛出，需要使用 `if -else if` 结构，在不同的 if 中抛出不同的异常；\n  - 如果代码中出现了多种异常，需要在函数之后声明，不同的异常使用逗号分开;\n\n- 捕获异常和抛出异常注意：\n    捕获在哪里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；\n\n**对于调用一个抛出异常的方法处理方式：**\n- 处理当前异常；\n- 继续抛出异常\n\n```java\npackage a_JavaException;\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\n\t\t\t\n\t\t\n\t}\n\t\n}\n\n```\n\n### 自定义异常\n\n定义格式：\n```\nclass 自定义异常类名 extends Exception{\n  public 自定义异常类名(String message){ //构造方法必须实现\n    super(message); //这里调用的是Exception中的message，最终调用的是Throwable中的getmessage方法；\n    \n  }\n}\n```\n\n\n代码示例：\n```java\npackage a_JavaException;\n\n/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\n\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1561942205894,["GJX@GJXAIOU",[[-1,72,"\n"]],[73,73],[72,72]]],[1561942209000,["GJX@GJXAIOU",[[1,89,"\n"]],[89,89],[90,90]]],[1561942218501,["GJX@GJXAIOU",[[1,90,"Throwable分类"]],[90,90],[101,101]]],[1561942218532,["GJX@GJXAIOU",[[1,99," "]],[101,101],[102,102]]],[1561942218777,["GJX@GJXAIOU",[[1,102,"："]],[102,102],[103,103]]],[1561942457689,["GJX@GJXAIOU",[[1,496,"、"]],[496,496],[497,497]]],[1561942458197,["GJX@GJXAIOU",[[-1,496,"、"]],[497,497],[496,496]]],[1561942459991,["GJX@GJXAIOU",[[1,496,"// "]],[496,496],[499,499]]],[1561942460734,["GJX@GJXAIOU",[[-1,498," "]],[499,499],[498,498]]],[1561942463704,["GJX@GJXAIOU",[[1,498,"返回值为s"]],[498,498],[503,503]]],[1561942463737,["GJX@GJXAIOU",[[1,502," "]],[503,503],[504,504]]],[1561942464503,["GJX@GJXAIOU",[[1,504,"tring"]],[504,504],[509,509]]],[1561942467421,["GJX@GJXAIOU",[[-1,503,"s"]],[504,504],[503,503]]],[1561942469202,["GJX@GJXAIOU",[[1,503,"S"]],[503,503],[504,504]]],[1561942472439,["GJX@GJXAIOU",[[1,501,"l"]],[501,501],[502,502]]],[1561942473255,["GJX@GJXAIOU",[[1,501," "],[1,502," eix"]],[502,502],[506,506]]],[1561942475183,["GJX@GJXAIOU",[[-1,502,"leix "]],[506,506],[501,501]]],[1561942477154,["GJX@GJXAIOU",[[1,501,"类型"]],[501,501],[503,503]]],[1561942482367,["GJX@GJXAIOU",[[-1,447,"Strin g"]],[454,454],[447,447]]],[1561942486245,["GJX@GJXAIOU",[[-1,496," "]],[497,497],[496,496]]],[1561942492949,["GJX@GJXAIOU",[[1,545," ****"]],[545,545],[548,548]]],[1561942494573,["GJX@GJXAIOU",[[-1,549,"*"]],[548,548],[547,547]]],[1561942496790,["GJX@GJXAIOU",[[-1,546,"***"]],[549,549],[546,546]]],[1561942497885,["GJX@GJXAIOU",[[1,546,"//返回值类型为 String"]],[546,546],[561,561]]],[1561942502749,["GJX@GJXAIOU",[[-1,511,"String "]],[511,518],[511,511]]],[1561942508174,["GJX@GJXAIOU",[[-1,561,"void "]],[561,566],[561,561]]],[1561942512955,["GJX@GJXAIOU",[[1,596," //返回值类型为 String"]],[596,596],[612,612]]],[1561942517691,["GJX@GJXAIOU",[[-1,606,"String"],[1,612,"void "]],[606,612],[611,611]]],[1561943280862,["GJX@GJXAIOU",[[-1,4432,"\n"]],[4433,4433],[4432,4432]]],[1561943284940,["GJX@GJXAIOU",[[-1,4437,"\n"]],[4438,4438],[4437,4437]]],[1561943287486,["GJX@GJXAIOU",[[-1,4428,"\n"]],[4429,4429],[4428,4428]]],[1561943309989,["GJX@GJXAIOU",[[-1,4622,"\n"]],[4623,4623],[4622,4622]]],[1561943353515,["GJX@GJXAIOU",[[-1,5024,"\n"]],[5025,5025],[5024,5024]]],[1561943363015,["GJX@GJXAIOU",[[-1,4679,"/**\n * class detail:\n * @author GJXAIOU\n * @since  2019年6月28日\n */\n"]],[4678,4744],[4678,4678]]],[1561943367804,["GJX@GJXAIOU",[[-1,3844,"\n"]],[3845,3845],[3844,3844]]]],null,"GJX@GJXAIOU"],["f70604c6-0220-412e-a208-598f9fefee7c",1562284262665,"# JavaEEDay15-异常处理\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### 一、 Throwable\nJava中所有错误或者异常的超类；\nThrowable 分类： \n  - Error : 错误，无法处理，只能避免；\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常；\n    - 运行时异常和编译时异常：\n      - 吃完饭发现没带钱包：运行时异常\n      - 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - getMessage();  //获取Throwable类对象里面保存的【异常信息】//返回值类型为 String\n    - toMessage();  //返回一个异常的简短描述 //返回值类型为 String\n    - printStackTrace(); //在控制台中显示详细的异常问题 //返回值类型为 void \n\n示例代码\n```java\npackage a_JavaException;\npublic class YiChangLeiLianXi {\n    public static void main(String[] args) {\n        //首先创建一个异常类，\n        //调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n        //调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n        \n        //Throwable throwable = new Throwable(); //调用无参构造方法\n        Throwable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n                \n        System.out.println(throwable2.getMessage());\n        System.out.println(throwable2.toString());\n        //throwable2.printStackTrace();\n\n        testThrowable(); //调用该异常位置；\n    }\n\n    public static void testThrowable(){\n        Throwable throwable = new Throwable(\"这里有问题\"); //创建该异常位置；\n        throwable.printStackTrace();\n    }\n}\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n**区分Error和Exception：**\n看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\n\n**Java中异常处理**\n### 第一种方式：捕获异常：\n```\ntry{\n  //可能出现异常的代码\n} catch（异常类型 e）{\n  //异常的处理方式\n}\n```\n\n\n使用try - catch的注意事项：\n- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会继续执行后面的代码；\n- 一旦异常被try-catch捕获，那么JVM就会认为当前代码已经不存在异常，可以继续运行；\n- 在 try-catch 语句块里面，如果出现了多种异常，这里可以加上多个 catch 语句块，对不同的异常做区别对待，做到异常的精准匹配；\n- 在 try- catch 语句块中，如果存在大面积的异常，可以放在整个 catch 语句块中的最后一个，如果放在前面可能导致其他的 catch 异常无效；（因为 Exception 是其他异常的父类，包含所有异常）\n\n程序示例：\n```java\npackage a_JavaException;\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常,除上面以外的所有的异常均有这条异常处理\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n}\n```\n程序执行结果：\n```\njava.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)\n```\n\n\n### 第二种方法：抛出异常\n\n- 使用关键字 throw 和 throws；\n  - throw 在方法体中使用，用于抛出异常的关键字；\n    代码格式： `throw new 异常类型(可以有参或者无参，参数为返回的语句提示);`\n  - throws 在方法声明之后，表示当前抛出的异常有哪些（当方法体中含有 throw 的时候作为搭配使用）\n    代码格式：`函数方法（参数）throws 异常类型`\n\n- 注意事项：\n  - 如果在代码中存在语句 `throw new 异常类型()`，那么这条语句之后的代码不会再执行；\n  - 如果代码中存在多种异常需要抛出，不能将异常写在同一个代码块中，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；\n  - 不同的异常要分情况抛出，需要使用 `if -else if` 结构，在不同的 if 中抛出不同的异常；\n  - 如果代码中出现了多种异常，需要在函数之后声明，不同的异常使用逗号分开;\n\n- 捕获异常和抛出异常注意：\n    捕获在哪里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；\n\n**对于调用一个抛出异常的方法处理方式：**\n- 处理当前异常；\n- 继续抛出异常\n\n```java\npackage a_JavaException;\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\t\t\t\t\t\n\t}\t\n}\n\n```\n\n### 自定义异常\n\n定义格式：\n```\nclass 自定义异常类名 extends Exception{\n  public 自定义异常类名(String message){ //构造方法必须实现\n    super(message); //这里调用的是Exception中的message，最终调用的是Throwable中的getmessage方法；    \n  }\n}\n```\n\n\n代码示例：\n```java\npackage a_JavaException;\n\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1562284253526,["GJX@GJXAIOU",[[1,583,"**"],[1,586,"**"]],[583,586],[583,590]]],[1562284328714,["GJX@GJXAIOU",[[1,2051,"**"],[1,2069,"**"]],[2051,2069],[2051,2073]]],[1562284504952,["GJX@GJXAIOU",[[1,3225,"**"],[1,3229,"**"]],[3225,3229],[3225,3233]]]],null,"GJX@GJXAIOU"],["b85c13c5-94d1-427f-9402-cad2a788f136",1563365022799,"# JavaEEDay15-异常处理\n\n## 异常\n\nJava开发中遇到的异常/错误也是一步一步造成的；\n\n\n### 一、 Throwable\nJava中所有错误或者异常的超类；\nThrowable 分类： \n  - Error : 错误，无法处理，只能避免；\n  - Exception: 异常, 可以处理, 分两种情况：运行时异常和编译时异常；\n    - 运行时异常和编译时异常：\n      - 吃完饭发现没带钱包：运行时异常\n      - 准备去吃饭没带钱包：编译时异常\n\n\n研究Exception和Error先从Throwable开始；\n\n- **Throwable类**\n  - 构造方法：\n    - Throwable(); //无参的构造方法，创建一个【异常信息】为null的Throwable类对象；\n    - Throwable(String message); //创建一个【异常信息】为message的Throwable类对象；\n  - 成员方法：\n    - getMessage();  //获取Throwable类对象里面保存的【异常信息】//返回值类型为 String\n    - toMessage();  //返回一个异常的简短描述 //返回值类型为 String\n    - printStackTrace(); //在**控制台**中显示详细的异常问题 //返回值类型为 void \n\n示例代码\n```java\npackage a_JavaException;\npublic class YiChangLeiLianXi {\n    public static void main(String[] args) {\n        //首先创建一个异常类，\n        //调用的无参的构造方法，创建了一个异常信息为null的Throwable类对象\n        //调用有参的构造方法，创建一个异常信息为message的Throwable类对象\n        \n        //Throwable throwable = new Throwable(); //调用无参构造方法\n        Throwable throwable2 = new Throwable(\"这里出错啦\"); //调用有参构造方法\n                \n        System.out.println(throwable2.getMessage());\n        System.out.println(throwable2.toString());\n        //throwable2.printStackTrace();\n\n        testThrowable(); //调用该异常位置；\n    }\n\n    public static void testThrowable(){\n        Throwable throwable = new Throwable(\"这里有问题\"); //创建该异常位置；\n        throwable.printStackTrace();\n    }\n}\n```\n对异常类的测试\n![对异常类的测试]($resource/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190627092658.jpg)\n\n这里的两个错误分别对应了创建该异常的位置和调用该异常的位置；\n\n\n\n**区分Error和Exception：**\n看提示的末尾即可；\n代码示例：\n```java\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//Error:这里假设系统的内存空间为8GB \n\t\tlong[] arr = new long[1024 * 1024 * 1024];\n\t\t//Exception in thread \"main\" java.lang.OutOfMemoryError: 根据末尾知道这是错误：程序使用的内存空间超过了当前硬件限制\n\t\t\n\t\tint[] arr1 = null; //数组名为arr1的引用类型变量保存的是null;\n\t\tarr1[0] = 7;\n\t\t//Exception in thread \"main\" java.lang.NullPointerException:异常，空指针异常，表示当前代码操作Null地址空间\n\t}\n}\n```\n\n\n## 异常的处理\n\nJava程序运行的时候，会监听异常，发生异常的时候，会创建Throwable类对象，处理异常；\n\n**Java中异常处理**\n### 第一种方式：捕获异常：\n```\ntry{\n  //可能出现异常的代码\n} catch（异常类型 e）{\n  //异常的处理方式\n}\n```\n\n\n**使用try - catch的注意事项**：\n- 在没有捕获异常的情况下，程序中一旦发生了异常，程序就会在发生异常的地方停下来，不会继续执行后面的代码；\n- 一旦异常被try-catch捕获，那么JVM就会认为当前代码已经不存在异常，可以继续运行；\n- 在 try-catch 语句块里面，如果出现了多种异常，这里可以加上多个 catch 语句块，对不同的异常做区别对待，做到异常的精准匹配；\n- 在 try- catch 语句块中，如果存在大面积的异常，可以放在整个 catch 语句块中的最后一个，如果放在前面可能导致其他的 catch 异常无效；（因为 Exception 是其他异常的父类，包含所有异常）\n\n程序示例：\n```java\npackage a_JavaException;\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\ttest(1, 0, null);\n\t}\n\t\n\tpublic static void test (int num1, int num2, int[] arr) {\n\t\tint ret = 0;\n\t\ttry {\n\t\t\tarr[0] = 5;\n\t\t\tret = num1/num2; //可能的异常有：分母为0以及NullPointerException\n\t\t}catch (ArithmeticException e) {\n\t\t\t\te.printStackTrace();\n\t\t}catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\t\t\t\n\t\t} catch (Exception e) { //这个异常包含所有的异常,除上面以外的所有的异常均有这条异常处理\n\t\t}\n\t\tSystem.out.println(\"执行该命令\");\n\t}\n}\n```\n程序执行结果：\n```\njava.lang.NullPointerException\n执行该命令\n\tat a_JavaException.Demo3.test(Demo3.java:21)\n\tat a_JavaException.Demo3.main(Demo3.java:15)\n```\n\n\n### 第二种方法：抛出异常\n\n- 使用关键字 throw 和 throws；\n  - throw 在方法体中使用，用于抛出异常的关键字；\n    代码格式： `throw new 异常类型(可以有参或者无参，参数为返回的语句提示);`\n  - throws 在方法声明之后，表示当前抛出的异常有哪些（当方法体中含有 throw 的时候作为搭配使用）\n    代码格式：`函数方法（参数）throws 异常类型`\n\n- **注意事项**：\n  - 如果在代码中存在语句 `throw new 异常类型()`，那么这条语句之后的代码不会再执行；\n  - 如果代码中存在多种异常需要抛出，不能将异常写在同一个代码块中，否则只能处理一个异常，剩下的异常都会变成不能触及的代码；\n  - 不同的异常要分情况抛出，需要使用 `if -else if` 结构，在不同的 if 中抛出不同的异常；\n  - 如果代码中出现了多种异常，需要在函数之后声明，不同的异常使用逗号分开;\n\n- 捕获异常和抛出异常注意：\n    捕获在哪里都可以，但是抛出异常一旦涉及到用户层面的，一定要不能抛出，必须捕获；\n\n**对于调用一个抛出异常的方法处理方式：**\n- 处理当前异常；\n- 继续抛出异常\n\n```java\npackage a_JavaException;\npublic class Throw_Use {\n\tpublic static void main(String[] args) {\n\t\t//如果调用一个存在抛出异常的方法，通常有两种处理方法\n\t\t//第一种：处理当前异常\n\t\ttry {\n\t\t\ttestThrow(null, 1, 2);\n\t\t} catch (NullPointerException e) {\n\t\t\te.printStackTrace();\n\t\t}catch (ArithmeticException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\t//第二种方案：继续向外抛出异常，就只需要在调用该方法的函数后面添加 throws 异常类型即可\n\t\t//\tpublic static void main(String[] args) throws NullPointerException, ArithmeticException {\n\t\t//\t\ttestThrow(null, 1, 2);\n\t\t//\t}\n\t\n\tpublic static void testThrow(int[] arr, int num1, int num2)\n\tthrows NullPointerException, ArithmeticException{\n\t\t//之前使用的参数合法性判断\n//\t\tif (arr == null || arr.length == 0) {\n//\t\t\tSystem.out.println(\" \");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\tif (arr == null || arr.length == 0) {\n\t\t\tthrow new NullPointerException(\"测试一下Throw\");\n\t\t\t//这里无论输入什么语句都不再执行\n\t\t}else if (num2 == 0) {\n\t\t\tthrow new ArithmeticException();\n\t\t}\t\t\t\t\t\n\t}\t\n}\n\n```\n\n### 自定义异常\n\n定义格式：\n```\nclass 自定义异常类名 extends Exception{\n  public 自定义异常类名(String message){ //构造方法必须实现\n    super(message); //这里调用的是Exception中的message，最终调用的是Throwable中的getmessage方法；    \n  }\n}\n```\n\n\n代码示例：\n```java\npackage a_JavaException;\n\npublic class ZiDingYiException  {\n\tpublic static void main(String[] args)throws NoGrilException{\n\t\t//以下的捕获或者抛出二选一；\n\t\t//进行捕获\n\t\ttry {\n\t\t\tbuyOneFreeOne(false);\n\t\t} catch (NoGrilException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t//进行抛出\n\t\tbuyOneFreeOne(true);  //这里是抛出，所以上面需要加throws\n\t}\n\t\t\n\tpublic static void buyOneFreeOne(boolean isLonely) throws NoGrilException {\n\t\tif (isLonely) {\n\t\t\t//直接创建自定义异常的匿名类对象，通过throw关键字跳出\n\t\t\tthrow new NoGrilException(\"不用，谢谢\");\n\t\t}\n\t\tSystem.out.println(\"阔以\");\n\t}\n\t\n}\n\n\nclass NoGrilException extends Exception {\n\t//String message 是当前异常的详细信息，用来传递给Exception的构造方法，保存该异常信息；\n\tpublic NoGrilException(String message) {\n\t\tsuper(message);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1563364988038,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563364989072,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: blue\n---\n\n@toc"]],[0,0],[42,42]]],[1563364991366,["GJX@GJXAIOU",[[1,43,"\n"]],[42,42],[43,43]]],[1563364993428,["GJX@GJXAIOU",[[-1,37,"\n"]],[37,37],[36,36]]],[1563364998823,["GJX@GJXAIOU",[[1,66,"一、"]],[66,66],[68,68]]],[1563365067820,["GJX@GJXAIOU",[[-1,220,"    - 运行时异常和编译时异常："]],[220,238],[220,220]]],[1563365068534,["GJX@GJXAIOU",[[-1,220,"\n"]],[220,220],[219,219]]],[1563365071501,["GJX@GJXAIOU",[[-1,225," "]],[226,226],[225,225]]],[1563365073383,["GJX@GJXAIOU",[[-1,248," "]],[248,248],[247,247]]],[1563365081471,["GJX@GJXAIOU",[[-1,104,"一、"],[1,106,"（"]],[104,104],[105,105]]],[1563365081601,["GJX@GJXAIOU",[[1,105,"*）"]],[105,105],[107,107]]],[1563365083948,["GJX@GJXAIOU",[[-1,105,"*"]],[106,106],[105,105]]],[1563365084903,["GJX@GJXAIOU",[[1,105,"一"]],[105,105],[106,106]]],[1563365725961,["GJX@GJXAIOU",[[1,1491,"- "]],[1491,1491],[1493,1493]]],[1563365738272,["GJX@GJXAIOU",[[1,1932,"二、"]],[1932,1932],[1934,1934]]],[1563365757430,["GJX@GJXAIOU",[[1,1734,"\n\t\t、、"]],[1734,1734],[1739,1739]]],[1563365758686,["GJX@GJXAIOU",[[-1,1737,"、、"]],[1739,1739],[1737,1737]]],[1563365759665,["GJX@GJXAIOU",[[1,1737,"//"]],[1737,1737],[1739,1739]]],[1563365762878,["GJX@GJXAIOU",[[-1,1705," "]],[1706,1706],[1705,1705]]],[1563365775096,["GJX@GJXAIOU",[[1,1896,"\n\t\t//"]],[1896,1896],[1901,1901]]],[1563365778007,["GJX@GJXAIOU",[[-1,1864," "]],[1865,1865],[1864,1864]]],[1563365784085,["GJX@GJXAIOU",[[-1,1894,":"]],[1895,1895],[1894,1894]]],[1563365787013,["GJX@GJXAIOU",[[-1,1857," "]],[1858,1858],[1857,1857]]],[1563365789175,["GJX@GJXAIOU",[[1,1857," "]],[1857,1857],[1858,1858]]],[1563365791896,["GJX@GJXAIOU",[[1,1864," "]],[1864,1864],[1865,1865]]],[1563365796357,["GJX@GJXAIOU",[[-1,1835,"\t"]],[1836,1836],[1835,1835]]],[1563365799110,["GJX@GJXAIOU",[[-1,1896,"\t"]],[1897,1897],[1896,1896]]],[1563365824699,["GJX@GJXAIOU",[[1,2014,"()"]],[2014,2014],[2016,2016]]],[1563365826870,["GJX@GJXAIOU",[[1,2015,"yi "]],[2015,2015],[2018,2018]]],[1563365827884,["GJX@GJXAIOU",[[-1,2015,"yi "]],[2018,2018],[2015,2015]]],[1563365828978,["GJX@GJXAIOU",[[1,2015,"一"]],[2015,2015],[2016,2016]]],[1563365839772,["GJX@GJXAIOU",[[-1,1996,"**Java中异常处理**\n"]],[1995,2009],[1995,1995]]],[1563365840261,["GJX@GJXAIOU",[[-1,1995,"\n"]],[1995,1995],[1994,1994]]],[1563365945928,["GJX@GJXAIOU",[[1,2813,"\n\t\t"]],[2813,2813],[2816,2816]]],[1563365964633,["GJX@GJXAIOU",[[-1,2838,"的"]],[2839,2839],[2838,2838]]],[1563365972993,["GJX@GJXAIOU",[[1,2627,"\n\t\t\t"]],[2627,2627],[2631,2631]]],[1563366131994,["GJX@GJXAIOU",[[1,3048,"（）"]],[3048,3048],[3050,3050]]],[1563366133496,["GJX@GJXAIOU",[[1,3049,"二"]],[3049,3049],[3050,3050]]],[1563366150351,["GJX@GJXAIOU",[[1,3065,"=="],[1,3085,"=="]],[3065,3085],[3065,3089]]],[1563366161886,["GJX@GJXAIOU",[[1,2074,"=="],[1,2097,"=="]],[2074,2097],[2074,2101]]],[1563366331040,["GJX@GJXAIOU",[[1,4501,"（）"]],[4501,4501],[4503,4503]]],[1563366334165,["GJX@GJXAIOU",[[1,4502,"三"]],[4502,4502],[4503,4503]]],[1563367316295,["GJX@GJXAIOU",[[1,323,"=="],[1,327,"=="]],[323,327],[323,331]]],[1563367320409,["GJX@GJXAIOU",[[1,464,"=="],[1,468,"=="]],[464,468],[464,472]]],[1563367570648,["GJX@GJXAIOU",[[1,1468,"=="],[1,1494,"=="]],[1468,1494],[1468,1498]]],[1563368197379,["GJX@GJXAIOU",[[1,4523,"自定义异常"]],[4523,4523],[4528,4528]]],[1563368207103,["GJX@GJXAIOU",[[1,4523,"=="],[1,4528,"=="]],[4523,4528],[4523,4532]]],[1563368236493,["GJX@GJXAIOU",[[-1,28,"blue"]],[32,32],[28,28]]],[1563368239378,["GJX@GJXAIOU",[[1,28,"yellow"]],[28,28],[34,34]]]],null,"GJX@GJXAIOU"]]}