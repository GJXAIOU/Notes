{"compress":true,"commitItems":[["fca21e9d-2f08-452e-aa78-069b42298732",1564468645678,"",[[1564468622125,["GJX@GJXAIOU",[[1,0,"# JavaEEDay37C3P0连接池\n\n\n\n"]],[0,0],[23,23]]],[1564469214277,["GJX@GJXAIOU",[[1,23,"-- MySQL增强\ncreate database day38;\nuse day38;\n\n-- **********************数据约束**********************\n-- 1.1 默认值\ncreate table student(\n\tid int, \n\tname varchar(20),\n\tcountry varchar(20) default '中国' -- 默认值\n);\n\n-- 没有设置默认值的字段，在没有赋值的情况下都是NULL\ninsert into student(id, name) values(1, \"孬蛋\");\ninsert into student(id, name, country) values(2, \"金豆\", \"China\");\ninsert into student(id) values(3);\n\ndrop table student;\n\n-- 1.2 非空\ncreate table student(\n\tid int, \n\tname varchar(20),\n\tgender varchar(2) not null -- 非空\n);\n\n-- 如果存在非空字段，必须赋值\ninsert into student(id, name) values(1, \"孬蛋\");\n-- ERROR 1364 (HY000): Field 'gender' doesn't have a default value\n\n-- 必须给非空字段赋值\ninsert into student(id, name, gender) values(1, \"狗蛋\", \"男\");\n\n-- 非空字段用在什么地方？\n-- 用户名，密码，邮箱，手机\ndrop table student;\n\n-- 1.3 唯一\ncreate table student(\n\tid int UNIQUE, -- 唯一\n\tname varchar(20)\n);\n\ninsert into student(id, name) values(1, \"孬蛋\");\ninsert into student(id, name) values(2, \"孬蛋\");\n-- ERROR 1062(23000):Duplicate entry '1' for key 'id'\n-- 唯一值不能重复\ninsert into student(id, name) values(1, \"狗剩\");\n\ndrop table student;\n\n-- 1.4 主键 (非空+唯一)\ncreate table student(\n\tid int primary key,\n\tname varchar(20)\n);\n\ninsert into student(id, name) values(1, \"狗蛋\");\ninsert into student(id, name) values(2, \"狗剩\");\n\n-- ERROR 1364 (HY000): Field 'id' doesn't have a default value\n-- ID值不能为空，必须有数据\ninsert into student(name) values('辣鸡');\n-- ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n-- ID值是唯一索引，不能为空，并且不能重复\ninsert into student(id, name) values(1, \"炸鸡\");\n\ndrop table student;\n\n-- 1.5 自增长\nCREATE TABLE student(\n\t-- 自增长 ZEROFILL 零填充，从0开始\n\tid INT ZEROFILL PRIMARY KEY AUTO_INCREMENT, \n\tname VARCHAR(20)\n);\n\ninsert into student(name) values(\"张三\");\ninsert into student(name) values(\"李四\");\ninsert into student(name) values(\"王五\");\ninsert into student(name) values(\"马六\");\n\n-- 1.6 外键约束\ncreate table employee(\n\tid int primary key, -- 员工ID\n\tempName varchar(20), -- 员工名\n\tdeptName varchar(20) -- 部门名\n);\n\ninsert into employee values(1, \"老刘\", \"JavaEE教学部\");\ninsert into employee values(2, \"我党\", \"JavaEE教学部\");\ninsert into employee values(3, \"大飞\", \"JavaEE教学部\");\ninsert into employee values(4, \"瑞哥\", \"JavaEE教学部\");\ninsert into employee values(5, \"赋赋\", \"JavaEE教学部\");\n\n-- 每一个人都是JavaEE教学部，这里每一个数据行中，都有JavaEE教学部\n-- 导致了数据的冗余\n-- 是否可以把部门做成一张表\n\n-- 设计一个独立的部门表\ncreate table dept(\n\tid int primary key,\n\tdeptName varchar(20)\n);\n\ndrop table employee;\n\n-- 设计一个新的员工表，带有部门ID\ncreate table employee(\n\tid int primary key,\n\tempName varchar(20),\n\tdeptID int, -- 用部门的ID来表示当前员工的部门是哪一个\n\t-- 建立一个外键约束\n\tCONSTRAINT emp_dept_fk foreign key(deptID) references dept(id) on update cascade on delete cascade -- 级联修改\n\t--         外键名称               外键                连接的参考字段\n);\n\n\ninsert into dept(id, deptName) values(1, \"JavaEE教学部\");\ninsert into dept(id, deptName) values(2, \"PHP教学部\");\ninsert into dept(id, deptName) values(3, \"iOS教学部\");\ninsert into dept(id, deptName) values(4, \"Python教学部\");\n\ninsert into employee values(1, \"张三\", 1);\ninsert into employee values(2, \"李四\", 2);\ninsert into employee values(3, \"王五\", 3);\ninsert into employee values(4, \"赵六\", 1);\n\n-- 存在问题，因为在部门中并没有部门ID为4的部门，这里数据无法添加\n-- ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint f\n-- ails (`day38`.`employee`, CONSTRAINT `emp_dept_fk` FOREIGN KEY (`deptID`) REFERE\n-- NCES `dept` (`id`) ON DELETE CASCADE ON UPDATE CASCADE)\ninsert into employee values(5, \"喜峰\", 4);\n\n-- 级联修改 on update cascade on delete cascade\n-- 修改部门，这里会随之修改主表里面的数据\nupdate dept set id=4 where id=3;\n-- 删除部门表 同时会帮助我们删除员工信息\ndelete from dept where id=2;\n-- 修改员工表信息\nupdate employee set deptID=2 where id=4;\n\n\n-- 如果没有级联修改，请问如果是好？？？\n-- 1) 当存在外键约束，添加数据的顺序：先添加主表，在添加副表\n-- 2) 当存在外键约束，修改数据的顺序：先修改副表，在修改主表\n-- 3) 当存在外键约束，删除数据的顺序：先删除副表，在删除主表\n\n-- **************关联查询*****************\n\n-- 交叉查询 这个结果是有问题的 笛卡尔乘积 存在重复数据，不推荐使用\nselect empName,deptName from employee, dept;\n\n-- 需求：查询员工及其所在目标，显示员工姓名和部门名称\n-- 多表查询\n-- 1. 确定查询那些表格 2. 确定要查询的字段 3. 表和表之间的关系\n-- 内连接查询。只有满足条件的结果才会展示(使用最多的多表查询)\nselect empName,deptName  -- 要查询的字段\nfrom employee, dept   -- 要查询的表格\nwhere employee.deptID = dept.id; -- 表和表之间的关系\n\n-- inner join 内连接的另一种语法\nselect empName, deptName\nfrom employee   -- 主表\ninner join dept -- 连接的是哪一张表\non employee.deptID = dept.id; -- 表示条件 \n\n-- 使用别名\nselect e.empName, d.deptName\nfrom employee e\ninner join dept d\non e.deptID = d.id;\n\n-- 需求，查看每一个部门的员工\n-- 预期结果\n--\tJavaEE 张三\n-- \tJavaEE 赵六\n--  iOS  王五\n--  PHP  李四\n\n-- 左[外]连接查询：使用左边表中的数据来匹配右边表的数据，如果符合条件，展示数据\n-- 如果没有符合条件的连接数据，显示null\nselect d.deptName, e.empName\nfrom dept d\nleft outer join employee e\non d.id = e.deptID;\n\n-- 右[外]连接查询：使用右边表中的数据来匹配左边表的数据，如果符合条件，展示数据\n-- 如果没有符合条件的连接数据，显示null\nselect d.deptName, e.empName\nfrom employee e\nright outer join dept d\non d.id = e.deptID;\n\n-- 自连接查询\n-- 修改员工表结构，添加上司\nalter table employee add bossId int;\n\nupdate employee set bossId=1 where id=2;\nupdate employee set bossId=2 where id=3;\nupdate employee set bossId=3 where id=4;\n\n-- 预期结果\n\t-- 张三  null\n\t-- 李四  张三\n\t-- 王五  李四\n\t-- 赵六  王五\nselect e.empName, b.empName\nfrom employee e\nleft outer join employee b\non e.bossId = b.id;"]],[23,23],[5002,5002]]],[1564469236505,["GJX@GJXAIOU",[[1,132,"\n"]],[131,131],[132,132]]],[1564469237963,["GJX@GJXAIOU",[[1,132,"```"]],[132,132],[135,135]]],[1564469237990,["GJX@GJXAIOU",[[1,135,"language\n```\n"]],[135,135],[135,143]]],[1564469239549,["GJX@GJXAIOU",[[-1,135,"language"],[1,143,"s"]],[135,143],[136,136]]],[1564469240149,["GJX@GJXAIOU",[[1,136,"ql"]],[136,136],[138,138]]],[1564469241273,["GJX@GJXAIOU",[[1,139,"\n"]],[138,138],[139,139]]],[1564469244673,["GJX@GJXAIOU",[[-1,145,"create table student(\n\tid int, \n\tname varchar(20),\n\tcountry varchar(20) default '中国' -- 默认值\n);"]],[145,239],[145,145]]],[1564469246281,["GJX@GJXAIOU",[[1,139,"create table student(\n\tid int, \n\tname varchar(20),\n\tcountry varchar(20) default '中国' -- 默认值\n);"]],[139,139],[233,233]]],[1564469256033,["GJX@GJXAIOU",[[-1,240,"\n"]],[240,240],[239,239]]],[1564469256385,["GJX@GJXAIOU",[[-1,239,"\n"]],[239,239],[238,238]]],[1564469283065,["GJX@GJXAIOU",[[1,121,"## "]],[121,124],[134,134]]],[1564469289009,["GJX@GJXAIOU",[[-1,69,"-- *********************"]],[69,93],[69,69]]],[1564469292257,["GJX@GJXAIOU",[[-1,74,"**********************"]],[74,96],[74,74]]],[1564469294344,["GJX@GJXAIOU",[[-1,69,"*"]],[70,70],[69,69]]],[1564469298702,["GJX@GJXAIOU",[[1,69,"# y "]],[69,69],[72,72]]],[1564469298765,["GJX@GJXAIOU",[[1,72,"i"]],[72,72],[73,73]]],[1564469299425,["GJX@GJXAIOU",[[-1,71,"yi"]],[73,73],[71,71]]],[1564469300652,["GJX@GJXAIOU",[[1,71,"一、"]],[71,71],[73,73]]],[1564469303524,["GJX@GJXAIOU",[[-1,82,"-- 1.1"],[1,88,"（"]],[82,82],[83,83]]],[1564469303588,["GJX@GJXAIOU",[[1,83,"）"]],[83,83],[84,84]]],[1564469305380,["GJX@GJXAIOU",[[1,83,"有"]],[83,83],[84,84]]],[1564469306468,["GJX@GJXAIOU",[[-1,83,"有"]],[84,84],[83,83]]],[1564469307178,["GJX@GJXAIOU",[[1,83,"一"]],[83,83],[84,84]]],[1564469318124,["GJX@GJXAIOU",[[1,396,"## "]],[396,403],[408,408]]],[1564469322140,["GJX@GJXAIOU",[[-1,399,"-- 1.2 "]],[399,406],[399,399]]],[1564469322675,["GJX@GJXAIOU",[[1,399,"（）"]],[399,399],[401,401]]],[1564469323878,["GJX@GJXAIOU",[[1,400,"二"]],[400,400],[401,401]]],[1564469345377,["GJX@GJXAIOU",[[-1,196,"\n"]],[196,196],[195,195]]],[1564469356265,["GJX@GJXAIOU",[[1,404,"\n"]],[403,403],[404,404]]],[1564469357845,["GJX@GJXAIOU",[[1,404,"··"]],[404,404],[406,406]]],[1564469358730,["GJX@GJXAIOU",[[-1,404,"··"]],[406,406],[404,404]]],[1564469360619,["GJX@GJXAIOU",[[1,404,"```"]],[404,404],[407,407]]],[1564469360647,["GJX@GJXAIOU",[[1,407,"language\n```\n"]],[407,407],[407,415]]],[1564469363866,["GJX@GJXAIOU",[[-1,407,"language"],[1,415,"s"]],[407,415],[408,408]]],[1564469364236,["GJX@GJXAIOU",[[1,408,"ql"]],[408,408],[410,410]]],[1564469364812,["GJX@GJXAIOU",[[1,411,"\n"]],[410,410],[411,411]]],[1564469367865,["GJX@GJXAIOU",[[-1,374,"drop table student;"]],[374,393],[374,374]]],[1564469368321,["GJX@GJXAIOU",[[-1,375,"\n"]],[374,374],[373,373]]],[1564469371858,["GJX@GJXAIOU",[[-1,397,"create table student(\n\tid int, \n\tname varchar(20),\n\tgender varchar(2) not null -- 非空\n);"]],[397,484],[397,397]]],[1564469373313,["GJX@GJXAIOU",[[1,391,"create table student(\n\tid int, \n\tname varchar(20),\n\tgender varchar(2) not null -- 非空\n);"]],[391,391],[478,478]]],[1564469379273,["GJX@GJXAIOU",[[-1,485,"\n"]],[485,485],[484,484]]],[1564469379394,["GJX@GJXAIOU",[[-1,484,"\n"]],[484,484],[483,483]]],[1564469379553,["GJX@GJXAIOU",[[-1,483,"\n"]],[483,483],[482,482]]],[1564469382921,["GJX@GJXAIOU",[[-1,484,"- "]],[486,486],[484,484]]],[1564469383210,["GJX@GJXAIOU",[[1,484," "]],[484,484],[485,485]]],[1564469391650,["GJX@GJXAIOU",[[1,499,"`"]],[499,499],[500,500]]],[1564469444802,["GJX@GJXAIOU",[[-1,547,"-- "]],[547,550],[547,547]]],[1564469447588,["GJX@GJXAIOU",[[1,546,"`"]],[546,546],[547,547]]],[1564469510931,["GJX@GJXAIOU",[[1,498,",xiam"]],[498,498],[503,503]]],[1564469512289,["GJX@GJXAIOU",[[-1,499,"xiam"]],[503,503],[499,499]]],[1564469519820,["GJX@GJXAIOU",[[1,499,"下面会报错；"]],[499,499],[505,505]]],[1564469526731,["GJX@GJXAIOU",[[1,633,"`"]],[633,633],[634,634]]],[1564469528995,["GJX@GJXAIOU",[[1,693,"`"]],[693,693],[694,694]]],[1564469537691,["GJX@GJXAIOU",[[1,632,",下面语句正确；"]],[632,632],[640,640]]],[1564469544417,["GJX@GJXAIOU",[[-1,621,"-"]],[622,622],[621,621]]],[1564469546570,["GJX@GJXAIOU",[[-1,704,"-"]],[705,705],[704,704]]],[1564469549401,["GJX@GJXAIOU",[[-1,718,"-"]],[719,719],[718,718]]],[1564469552081,["GJX@GJXAIOU",[[-1,717,"- "]],[717,719],[717,717]]],[1564469554547,["GJX@GJXAIOU",[[-1,730,"drop table student;\n"]],[730,750],[730,730]]],[1564469558113,["GJX@GJXAIOU",[[-1,731,"-- 1.3"]],[731,737],[731,731]]],[1564469559537,["GJX@GJXAIOU",[[1,731,"## "]],[731,731],[737,737]]],[1564469562772,["GJX@GJXAIOU",[[1,735,"（）"]],[735,735],[737,737]]],[1564469564708,["GJX@GJXAIOU",[[1,736,"三"]],[736,736],[737,737]]],[1564469575390,["GJX@GJXAIOU",[[1,741,"\n"]],[741,741],[742,742]]],[1564469577933,["GJX@GJXAIOU",[[1,741,"·"]],[741,741],[742,742]]],[1564469578522,["GJX@GJXAIOU",[[-1,741,"·"]],[742,742],[741,741]]],[1564469580379,["GJX@GJXAIOU",[[1,741,"```"]],[741,741],[744,744]]],[1564469580409,["GJX@GJXAIOU",[[1,744,"language\n```\n"]],[744,744],[744,752]]],[1564469581571,["GJX@GJXAIOU",[[-1,744,"language"],[1,752,"s"]],[744,752],[745,745]]],[1564469581957,["GJX@GJXAIOU",[[1,745,"ql"]],[745,745],[747,747]]],[1564469582355,["GJX@GJXAIOU",[[1,748,"\n"]],[747,747],[748,748]]],[1564469585682,["GJX@GJXAIOU",[[-1,754,"create table student(\n\tid int UNIQUE, -- 唯一\n\tname varchar(20)\n);"]],[754,818],[754,754]]],[1564469587130,["GJX@GJXAIOU",[[1,748,"create table student(\n\tid int UNIQUE, -- 唯一\n\tname varchar(20)\n);"]],[748,748],[812,812]]],[1564469588828,["GJX@GJXAIOU",[[-1,819,"\n"]],[819,819],[818,818]]],[1564469588946,["GJX@GJXAIOU",[[-1,818,"\n"]],[818,818],[817,817]]],[1564469635473,["GJX@GJXAIOU",[[-1,977,"insert into student(id, name) values(1, \"狗剩\");"]],[977,1023],[977,977]]],[1564469637721,["GJX@GJXAIOU",[[-1,902,"2, \"孬蛋"],[1,908,"1, \"狗剩"]],[865,911],[911,911]]],[1564469645875,["GJX@GJXAIOU",[[-1,979,"drop table student;"]],[979,998],[979,979]]],[1564469646177,["GJX@GJXAIOU",[[-1,980,"\n"]],[979,979],[978,978]]],[1564469649155,["GJX@GJXAIOU",[[-1,980,"-- 1.4 "]],[980,987],[980,980]]],[1564469655892,["GJX@GJXAIOU",[[1,980,"## ()"]],[980,980],[985,985]]],[1564469661754,["GJX@GJXAIOU",[[1,984,"si"]],[984,984],[986,986]]],[1564469662434,["GJX@GJXAIOU",[[-1,984,"si"]],[986,986],[984,984]]],[1564469663348,["GJX@GJXAIOU",[[1,984,"四"]],[984,984],[985,985]]],[1564470601608,["GJX@GJXAIOU",[[-1,817,"\n"]],[817,817],[816,816]]],[1564470632860,["GJX@GJXAIOU",[[-1,911,"-- "]],[911,914],[911,911]]],[1564470633324,["GJX@GJXAIOU",[[1,911,"·"]],[911,911],[912,912]]],[1564470634483,["GJX@GJXAIOU",[[-1,911,"·"]],[912,912],[911,911]]],[1564470636387,["GJX@GJXAIOU",[[1,911,"`"]],[911,911],[912,912]]],[1564470637500,["GJX@GJXAIOU",[[1,962,"`"]],[962,962],[963,963]]],[1564470645859,["GJX@GJXAIOU",[[1,995,"\n"]],[995,995],[996,996]]],[1564470647338,["GJX@GJXAIOU",[[1,995,"```"]],[995,995],[998,998]]],[1564470647367,["GJX@GJXAIOU",[[1,998,"language\n```\n"]],[998,998],[998,1006]]],[1564470649058,["GJX@GJXAIOU",[[-1,998,"language"],[1,1006,"s"]],[998,1006],[999,999]]],[1564470649516,["GJX@GJXAIOU",[[1,999,"q;"]],[999,999],[1001,1001]]],[1564470658657,["GJX@GJXAIOU",[[-1,1000,";"]],[1001,1001],[1000,1000]]],[1564470659065,["GJX@GJXAIOU",[[1,1000,"l"]],[1000,1000],[1001,1001]]],[1564470660594,["GJX@GJXAIOU",[[1,1002,"\n"]],[1001,1001],[1002,1002]]],[1564470664258,["GJX@GJXAIOU",[[-1,1008,"create table student(\n\tid int primary key,\n\tname varchar(20)\n);"]],[1008,1071],[1008,1008]]],[1564470665706,["GJX@GJXAIOU",[[1,1002,"create table student(\n\tid int primary key,\n\tname varchar(20)\n);"]],[1002,1002],[1065,1065]]],[1564470672499,["GJX@GJXAIOU",[[-1,1072,"\n"]],[1072,1072],[1071,1071]]],[1564470672938,["GJX@GJXAIOU",[[-1,1071,"\n"]],[1071,1071],[1070,1070]]],[1564470673640,["GJX@GJXAIOU",[[-1,1070,"\n"]],[1070,1070],[1069,1069]]],[1564470693494,["GJX@GJXAIOU",[[-1,1245,"insert into student(name) values('辣鸡');"]],[1245,1284],[1245,1245]]],[1564470695899,["GJX@GJXAIOU",[[1,1164,"insert into student(name) values('辣鸡');"]],[1164,1164],[1203,1203]]],[1564470700898,["GJX@GJXAIOU",[[-1,1370,"insert into student(id, name) values(1, \"炸鸡\");"]],[1370,1416],[1370,1370]]],[1564470704175,["GJX@GJXAIOU",[[1,1284,"insert into student(id, name) values(1, \"炸鸡\");"]],[1284,1284],[1330,1330]]],[1564470706203,["GJX@GJXAIOU",[[1,1284,"\n"]],[1284,1284],[1285,1285]]],[1564470785064,["GJX@GJXAIOU",[[-1,1419,"drop table student;"]],[1419,1438],[1419,1419]]],[1564470785392,["GJX@GJXAIOU",[[-1,1420,"\n"]],[1419,1419],[1418,1418]]],[1564470788392,["GJX@GJXAIOU",[[1,1431,"\n"]],[1430,1430],[1431,1431]]],[1564470790165,["GJX@GJXAIOU",[[1,1431,"```"]],[1431,1431],[1434,1434]]],[1564470790194,["GJX@GJXAIOU",[[1,1434,"language\n```\n"]],[1434,1434],[1434,1442]]],[1564470790828,["GJX@GJXAIOU",[[-1,1434,"language"],[1,1442,"s"]],[1434,1442],[1435,1435]]],[1564470791252,["GJX@GJXAIOU",[[1,1435,"ql"]],[1435,1435],[1437,1437]]],[1564470792009,["GJX@GJXAIOU",[[1,1438,"\n"]],[1437,1437],[1438,1438]]],[1564470800945,["GJX@GJXAIOU",[[-1,1444,"CREATE TABLE student(\n\t-- 自增长 ZEROFILL 零填充，从0开始\n\tid INT ZEROFILL PRIMARY KEY AUTO_INCREMENT, \n\tname VARCHAR(20)\n);\n\ninsert into student(name) values(\"张三\");\ninsert into student(name) values(\"李四\");\ninsert into student(name) values(\"王五\");\ninsert into student(name) values(\"马六\");"]],[1444,1719],[1444,1444]]],[1564470802608,["GJX@GJXAIOU",[[1,1438,"CREATE TABLE student(\n\t-- 自增长 ZEROFILL 零填充，从0开始\n\tid INT ZEROFILL PRIMARY KEY AUTO_INCREMENT, \n\tname VARCHAR(20)\n);\n\ninsert into student(name) values(\"张三\");\ninsert into student(name) values(\"李四\");\ninsert into student(name) values(\"王五\");\ninsert into student(name) values(\"马六\");"]],[1438,1438],[1713,1713]]],[1564470847161,["GJX@GJXAIOU",[[1,1420,"## "]],[1420,1427],[1433,1433]]],[1564470852609,["GJX@GJXAIOU",[[-1,1423,"-- 1.5 "]],[1424,1430],[1423,1423]]],[1564470853969,["GJX@GJXAIOU",[[1,1423,"()"]],[1423,1423],[1425,1425]]],[1564470856299,["GJX@GJXAIOU",[[1,1424,"五"]],[1424,1424],[1425,1425]]],[1564470868928,["GJX@GJXAIOU",[[-1,1720,"-- 1.6"]],[1720,1726],[1720,1720]]],[1564470871521,["GJX@GJXAIOU",[[1,1720,"## "]],[1720,1720],[1728,1728]]],[1564470875062,["GJX@GJXAIOU",[[1,1724,"（）"]],[1724,1724],[1726,1726]]],[1564470879620,["GJX@GJXAIOU",[[1,1725,"六"]],[1725,1725],[1726,1726]]],[1564470934522,["GJX@GJXAIOU",[[1,1732,"\n"]],[1731,1731],[1732,1732]]],[1564470935715,["GJX@GJXAIOU",[[1,1732,"```"]],[1732,1732],[1735,1735]]],[1564470935745,["GJX@GJXAIOU",[[1,1735,"language\n```\n"]],[1735,1735],[1735,1743]]],[1564470936700,["GJX@GJXAIOU",[[-1,1735,"language"],[1,1743,"s"]],[1735,1743],[1736,1736]]],[1564470937098,["GJX@GJXAIOU",[[1,1736,"ql"]],[1736,1736],[1738,1738]]],[1564470937945,["GJX@GJXAIOU",[[1,1739,"\n"]],[1738,1738],[1739,1739]]],[1564470942812,["GJX@GJXAIOU",[[-1,1745,"create table employee(\n\tid int primary key, -- 员工ID\n\tempName varchar(20), -- 员工名\n\tdeptName varchar(20) -- 部门名\n);\n\ninsert into employee values(1, \"老刘\", \"JavaEE教学部\");\ninsert into employee values(2, \"我党\", \"JavaEE教学部\");\ninsert into employee values(3, \"大飞\", \"JavaEE教学部\");\ninsert into employee values(4, \"瑞哥\", \"JavaEE教学部\");\ninsert into employee values(5, \"赋赋\", \"JavaEE教学部\");"]],[1745,2113],[1745,1745]]],[1564470944548,["GJX@GJXAIOU",[[1,1739,"create table employee(\n\tid int primary key, -- 员工ID\n\tempName varchar(20), -- 员工名\n\tdeptName varchar(20) -- 部门名\n);\n\ninsert into employee values(1, \"老刘\", \"JavaEE教学部\");\ninsert into employee values(2, \"我党\", \"JavaEE教学部\");\ninsert into employee values(3, \"大飞\", \"JavaEE教学部\");\ninsert into employee values(4, \"瑞哥\", \"JavaEE教学部\");\ninsert into employee values(5, \"赋赋\", \"JavaEE教学部\");"]],[1739,1739],[2107,2107]]],[1564471020720,["GJX@GJXAIOU",[[-1,2114,"\n"]],[2114,2114],[2113,2113]]],[1564471020897,["GJX@GJXAIOU",[[-1,2113,"\n"]],[2113,2113],[2112,2112]]],[1564471021752,["GJX@GJXAIOU",[[-1,2112,"\n"]],[2112,2112],[2111,2111]]],[1564471041224,["GJX@GJXAIOU",[[-1,2112,"-- 每一个人都是JavaEE教学部，这里每一个数据行中，都有JavaEE教学部\n-- 导致了数据的冗余\n-- 是否可以把部门做成一张表\n"]],[2112,2181],[2112,2112]]],[1564471043040,["GJX@GJXAIOU",[[1,1732,"\n"]],[1731,1731],[1732,1732]]],[1564471043639,["GJX@GJXAIOU",[[1,1732,"-- 每一个人都是JavaEE教学部，这里每一个数据行中，都有JavaEE教学部\n-- 导致了数据的冗余\n-- 是否可以把部门做成一张表\n"]],[1732,1732],[1801,1801]]],[1564471046834,["GJX@GJXAIOU",[[-1,1732,"-- "],[1,1735,"x"]],[1732,1735],[1733,1733]]],[1564471046986,["GJX@GJXAIOU",[[1,1733,"ia"]],[1733,1733],[1735,1735]]],[1564471046998,["GJX@GJXAIOU",[[-1,1734,"a"],[1,1735," "]],[1735,1735],[1734,1734]]],[1564471047031,["GJX@GJXAIOU",[[1,1734,"a"]],[1734,1734],[1735,1735]]],[1564471047881,["GJX@GJXAIOU",[[-1,1732,"xia"]],[1735,1735],[1732,1732]]],[1564471054845,["GJX@GJXAIOU",[[1,1732,"下面表的设计中："]],[1732,1732],[1740,1740]]],[1564471063096,["GJX@GJXAIOU",[[-1,1740," "]],[1740,1741],[1740,1740]]],[1564471089498,["GJX@GJXAIOU",[[1,2202,"\n"]],[2202,2202],[2203,2203]]],[1564471092005,["GJX@GJXAIOU",[[1,2202,"··"]],[2202,2202],[2204,2204]]],[1564471093208,["GJX@GJXAIOU",[[-1,2202,"··"]],[2204,2204],[2202,2202]]],[1564471094435,["GJX@GJXAIOU",[[1,2202,"```"]],[2202,2202],[2205,2205]]],[1564471094465,["GJX@GJXAIOU",[[1,2205,"language\n```\n"]],[2205,2205],[2205,2213]]],[1564471095876,["GJX@GJXAIOU",[[-1,2205,"language"],[1,2213,"s"]],[2205,2213],[2206,2206]]],[1564471096435,["GJX@GJXAIOU",[[1,2206,"q;"]],[2206,2206],[2208,2208]]],[1564471097299,["GJX@GJXAIOU",[[-1,2207,";"]],[2208,2208],[2207,2207]]],[1564471098770,["GJX@GJXAIOU",[[1,2207,"l"]],[2207,2207],[2208,2208]]],[1564471099385,["GJX@GJXAIOU",[[1,2209,"\n"]],[2208,2208],[2209,2209]]],[1564471103641,["GJX@GJXAIOU",[[-1,2215,"create table dept(\n\tid int primary key,\n\tdeptName varchar(20)\n);"]],[2215,2279],[2215,2215]]],[1564471105176,["GJX@GJXAIOU",[[1,2209,"create table dept(\n\tid int primary key,\n\tdeptName varchar(20)\n);"]],[2209,2209],[2273,2273]]],[1564471107880,["GJX@GJXAIOU",[[-1,2281,"drop table employee;\n"]],[2280,2301],[2280,2280]]],[1564471108015,["GJX@GJXAIOU",[[-1,2281,"\n"]],[2280,2280],[2279,2279]]],[1564471108177,["GJX@GJXAIOU",[[-1,2280,"\n"]],[2279,2279],[2278,2278]]],[1564471108907,["GJX@GJXAIOU",[[-1,2279,"\n"]],[2278,2278],[2277,2277]]],[1564471112369,["GJX@GJXAIOU",[[1,2299,"\n"]],[2298,2298],[2299,2299]]],[1564471113931,["GJX@GJXAIOU",[[1,2299,"```"]],[2299,2299],[2302,2302]]],[1564471113959,["GJX@GJXAIOU",[[1,2302,"language\n```\n"]],[2302,2302],[2302,2310]]],[1564471114747,["GJX@GJXAIOU",[[-1,2302,"language"],[1,2310,"s"]],[2302,2310],[2303,2303]]],[1564471115034,["GJX@GJXAIOU",[[1,2303,"ql"]],[2303,2303],[2305,2305]]],[1564471115424,["GJX@GJXAIOU",[[1,2306,"\n"]],[2305,2305],[2306,2306]]],[1564471121601,["GJX@GJXAIOU",[[-1,2312,"create table employee(\n\tid int primary key,\n\tempName varchar(20),\n\tdeptID int, -- 用部门的ID来表示当前员工的部门是哪一个\n\t-- 建立一个外键约束\n\tCONSTRAINT emp_dept_fk foreign key(deptID) references dept(id) on update cascade on delete cascade -- 级联修改\n\t--         外键名称               外键                连接的参考字段\n);"]],[2312,2595],[2312,2312]]],[1564471123680,["GJX@GJXAIOU",[[1,2306,"create table employee(\n\tid int primary key,\n\tempName varchar(20),\n\tdeptID int, -- 用部门的ID来表示当前员工的部门是哪一个\n\t-- 建立一个外键约束\n\tCONSTRAINT emp_dept_fk foreign key(deptID) references dept(id) on update cascade on delete cascade -- 级联修改\n\t--         外键名称               外键                连接的参考字段\n);"]],[2306,2306],[2589,2589]]],[1564471157728,["GJX@GJXAIOU",[[-1,1778,"-- "]],[1778,1781],[1778,1778]]],[1564471158170,["GJX@GJXAIOU",[[-1,1777,"\n"]],[1778,1778],[1777,1777]]],[1564471160227,["GJX@GJXAIOU",[[1,1777,","]],[1777,1777],[1778,1778]]],[1564471162890,["GJX@GJXAIOU",[[-1,1787,"-- "]],[1787,1790],[1787,1787]]],[1564471163208,["GJX@GJXAIOU",[[-1,1786,"\n"]],[1787,1787],[1786,1786]]],[1564471164715,["GJX@GJXAIOU",[[1,1786,","]],[1786,1786],[1787,1787]]],[1564471166690,["GJX@GJXAIOU",[[-1,1800,"\n"]],[1800,1800],[1799,1799]]],[1564471297844,["GJX@GJXAIOU",[[1,2528,"emp_dept_fk"]],[2528,2528],[2539,2539]]],[1564471300729,["GJX@GJXAIOU",[[-1,2540,"      "]],[2546,2546],[2540,2540]]],[1564471302138,["GJX@GJXAIOU",[[1,2540,":"]],[2540,2540],[2541,2541]]],[1564471313313,["GJX@GJXAIOU",[[1,2556,"deptID:"]],[2556,2556],[2563,2563]]],[1564471316050,["GJX@GJXAIOU",[[-1,2563,"    "]],[2567,2567],[2563,2563]]],[1564471321749,["GJX@GJXAIOU",[[1,2571,"dept()"]],[2571,2571],[2577,2577]]],[1564471323259,["GJX@GJXAIOU",[[1,2576,"id"]],[2576,2576],[2578,2578]]],[1564471328881,["GJX@GJXAIOU",[[-1,2580,"         "]],[2588,2588],[2579,2579]]],[1564471329909,["GJX@GJXAIOU",[[1,2579,":"]],[2579,2579],[2580,2580]]],[1564471331104,["GJX@GJXAIOU",[[-1,2580," "]],[2581,2581],[2580,2580]]],[1564471334250,["GJX@GJXAIOU",[[-1,2568,"   "]],[2571,2571],[2568,2568]]],[1564471338218,["GJX@GJXAIOU",[[-1,2550,"      "]],[2554,2554],[2548,2548]]],[1564471342681,["GJX@GJXAIOU",[[-1,2526,"  "]],[2528,2528],[2526,2526]]],[1564471534272,["GJX@GJXAIOU",[[1,2580,"\n"]],[2579,2579],[2580,2580]]],[1564471534418,["GJX@GJXAIOU",[[1,2581,"\n"]],[2580,2580],[2581,2581]]],[1564471537913,["GJX@GJXAIOU",[[-1,2590,"insert into dept(id, deptName) values(1, \"JavaEE教学部\");\ninsert into dept(id, deptName) values(2, \"PHP教学部\");\ninsert into dept(id, deptName) values(3, \"iOS教学部\");\ninsert into dept(id, deptName) values(4, \"Python教学部\");\n\ninsert into employee values(1, \"张三\", 1);\ninsert into employee values(2, \"李四\", 2);\ninsert into employee values(3, \"王五\", 3);\ninsert into employee values(4, \"赵六\", 1);"]],[2590,2968],[2590,2590]]],[1564471540155,["GJX@GJXAIOU",[[1,2581,"insert into dept(id, deptName) values(1, \"JavaEE教学部\");\ninsert into dept(id, deptName) values(2, \"PHP教学部\");\ninsert into dept(id, deptName) values(3, \"iOS教学部\");\ninsert into dept(id, deptName) values(4, \"Python教学部\");\n\ninsert into employee values(1, \"张三\", 1);\ninsert into employee values(2, \"李四\", 2);\ninsert into employee values(3, \"王五\", 3);\ninsert into employee values(4, \"赵六\", 1);"]],[2581,2581],[2959,2959]]],[1564471543610,["GJX@GJXAIOU",[[-1,2969,"\n"]],[2969,2969],[2968,2968]]],[1564471543728,["GJX@GJXAIOU",[[-1,2968,"\n"]],[2968,2968],[2967,2967]]],[1564471543864,["GJX@GJXAIOU",[[-1,2967,"\n"]],[2967,2967],[2966,2966]]],[1564471544377,["GJX@GJXAIOU",[[-1,2966,"\n"]],[2966,2966],[2965,2965]]],[1564471544649,["GJX@GJXAIOU",[[-1,2965,"\n"]],[2965,2965],[2964,2964]]],[1564471546034,["GJX@GJXAIOU",[[1,2964,"``"]],[2964,2964],[2966,2966]]],[1564471561977,["GJX@GJXAIOU",[[1,2965,"insert into employee values(5, \"喜峰\", 4);"]],[2965,2965],[3005,3005]]],[1564471865392,["GJX@GJXAIOU",[[-1,3127,"-- "]],[3127,3130],[3127,3127]]],[1564471865424,["GJX@GJXAIOU",[[1,3127,"="]],[3127,3127],[3128,3128]]],[1564471865984,["GJX@GJXAIOU",[[-1,3127,"="]],[3128,3128],[3127,3127]]],[1564471866672,["GJX@GJXAIOU",[[-1,3126,"\n"]],[3127,3127],[3126,3126]]],[1564471868944,["GJX@GJXAIOU",[[-1,3207,"--"]],[3207,3209],[3207,3207]]],[1564471871584,["GJX@GJXAIOU",[[-1,3264,"insert into employee values(5, \"喜峰\", 4);"]],[3264,3304],[3264,3264]]],[1564471877008,["GJX@GJXAIOU",[[-1,3162," `"]],[3163,3163],[3162,3162]]],[1564471877377,["GJX@GJXAIOU",[[1,3162," "]],[3162,3162],[3163,3163]]],[1564471884488,["GJX@GJXAIOU",[[-1,3174,"`"]],[3175,3175],[3174,3174]]],[1564471888946,["GJX@GJXAIOU",[[1,3163,"`"]],[3163,3163],[3164,3164]]],[1564471890065,["GJX@GJXAIOU",[[1,3175,"`"]],[3175,3175],[3176,3176]]],[1564471934391,["GJX@GJXAIOU",[[1,3313,"r "]],[3313,3313],[3314,3314]]],[1564471934845,["GJX@GJXAIOU",[[1,3314,"uguo"]],[3314,3314],[3318,3318]]],[1564471936824,["GJX@GJXAIOU",[[-1,3313,"ruguo"]],[3318,3318],[3313,3313]]],[1564471939158,["GJX@GJXAIOU",[[1,3313,"如果"]],[3313,3313],[3315,3315]]],[1564471942929,["GJX@GJXAIOU",[[-1,3315," "]],[3316,3316],[3315,3315]]],[1564471946850,["GJX@GJXAIOU",[[1,3335,"`"]],[3335,3335],[3336,3336]]],[1564471950026,["GJX@GJXAIOU",[[1,3368,"`"]],[3368,3368],[3369,3369]]],[1564471955778,["GJX@GJXAIOU",[[1,3369,"原来i"]],[3369,3369],[3372,3372]]],[1564471955808,["GJX@GJXAIOU",[[1,3371," "]],[3372,3372],[3373,3373]]],[1564471955924,["GJX@GJXAIOU",[[1,3373,"d"]],[3373,3373],[3374,3374]]],[1564471961938,["GJX@GJXAIOU",[[-1,3369,"原来 id"]],[3374,3374],[3369,3369]]],[1564472012047,["GJX@GJXAIOU",[[-1,3311,"- "]],[3313,3313],[3311,3311]]],[1564472012402,["GJX@GJXAIOU",[[1,3311," "]],[3311,3311],[3312,3312]]],[1564472014896,["GJX@GJXAIOU",[[-1,3370,"-"]],[3371,3371],[3370,3370]]],[1564472017600,["GJX@GJXAIOU",[[-1,3421,"-"]],[3422,3422],[3421,3421]]],[1564472020417,["GJX@GJXAIOU",[[1,3391,"`"]],[3391,3391],[3392,3392]]],[1564472021660,["GJX@GJXAIOU",[[1,3420,"`"]],[3420,3420],[3421,3421]]],[1564472022467,["GJX@GJXAIOU",[[1,3472,"`"]],[3472,3472],[3473,3473]]],[1564472023674,["GJX@GJXAIOU",[[1,3432,"`"]],[3432,3432],[3433,3433]]],[1564472029940,["GJX@GJXAIOU",[[1,3273,"y"]],[3273,3273],[3274,3274]]],[1564472029970,["GJX@GJXAIOU",[[1,3273," "]],[3274,3274],[3275,3275]]],[1564472030300,["GJX@GJXAIOU",[[1,3275,"ing"]],[3275,3275],[3278,3278]]],[1564472031016,["GJX@GJXAIOU",[[-1,3274,"ying"]],[3278,3278],[3274,3274]]],[1564472036347,["GJX@GJXAIOU",[[1,3274,"因为后面的这句话："]],[3274,3274],[3283,3283]]],[1564472038536,["GJX@GJXAIOU",[[-1,3273," "]],[3274,3274],[3273,3273]]],[1564472096832,["GJX@GJXAIOU",[[-1,3487,"-"]],[3488,3488],[3487,3487]]],[1564472100209,["GJX@GJXAIOU",[[-1,3507,"--"],[1,3509," "]],[3507,3510],[3509,3509]]],[1564472100624,["GJX@GJXAIOU",[[1,3509,"- "]],[3509,3509],[3511,3511]]],[1564472104728,["GJX@GJXAIOU",[[-1,3542,"--"],[1,3544," "]],[3542,3545],[3544,3544]]],[1564472105269,["GJX@GJXAIOU",[[1,3544,"- "]],[3544,3544],[3546,3546]]],[1564472108483,["GJX@GJXAIOU",[[-1,3577,"--"],[1,3579,"  "]],[3577,3579],[3579,3579]]],[1564472108861,["GJX@GJXAIOU",[[1,3579,"-"]],[3579,3579],[3580,3580]]],[1564472109004,["GJX@GJXAIOU",[[1,3581," "]],[3580,3580],[3581,3581]]],[1564472113464,["GJX@GJXAIOU",[[-1,3496,"，请问如果是好？？？"]],[3496,3506],[3496,3496]]],[1564472118992,["GJX@GJXAIOU",[[-1,3571," "]],[3572,3572],[3571,3571]]],[1564472181532,["GJX@GJXAIOU",[[1,3603,"## "]],[3603,3620],[3644,3644]]],[1564472185336,["GJX@GJXAIOU",[[-1,3627,"*****************"]],[3627,3644],[3627,3627]]],[1564472188620,["GJX@GJXAIOU",[[-1,3606,"-- **************"]],[3606,3623],[3606,3606]]],[1564472190236,["GJX@GJXAIOU",[[1,3606,"二、"]],[3606,3606],[3608,3608]]],[1564472212240,["GJX@GJXAIOU",[[-1,3614,"-- "]],[3614,3617],[3614,3614]]],[1564472215096,["GJX@GJXAIOU",[[1,3614,"### "]],[3614,3614],[3651,3651]]],[1564472219138,["GJX@GJXAIOU",[[1,3622,"\n"]],[3622,3622],[3623,3623]]],[1564472221951,["GJX@GJXAIOU",[[1,3697,"·"]],[3697,3697],[3698,3698]]],[1564472223096,["GJX@GJXAIOU",[[-1,3697,"·"]],[3698,3698],[3697,3697]]],[1564472223554,["GJX@GJXAIOU",[[1,3697,"`"]],[3697,3697],[3698,3698]]],[1564472230189,["GJX@GJXAIOU",[[1,3653,"`"]],[3653,3653],[3654,3654]]],[1564472238656,["GJX@GJXAIOU",[[-1,3653,"`select empName,deptName from employee, dept;`"]],[3653,3699],[3653,3653]]],[1564472240018,["GJX@GJXAIOU",[[1,3623,"\n"]],[3622,3622],[3623,3623]]],[1564472240842,["GJX@GJXAIOU",[[1,3623,"`select empName,deptName from employee, dept;`"]],[3623,3623],[3669,3669]]],[1564472283393,["GJX@GJXAIOU",[[-1,3701,"\n"]],[3701,3701],[3700,3700]]],[1564472289563,["GJX@GJXAIOU",[[-1,3715,"目标"]],[3717,3717],[3715,3715]]],[1564472290075,["GJX@GJXAIOU",[[1,3715,"b"]],[3715,3715],[3716,3716]]],[1564472290106,["GJX@GJXAIOU",[[1,3715," "]],[3716,3716],[3717,3717]]],[1564472290861,["GJX@GJXAIOU",[[1,3717,"umeng"]],[3717,3717],[3722,3722]]],[1564472292676,["GJX@GJXAIOU",[[-1,3715," bumeng"]],[3722,3722],[3715,3715]]],[1564472296862,["GJX@GJXAIOU",[[1,3715,"部门"]],[3715,3715],[3717,3717]]],[1564472361089,["GJX@GJXAIOU",[[1,3730,"\n"]],[3729,3729],[3730,3730]]],[1564472370099,["GJX@GJXAIOU",[[1,3730,"将上面的表格"]],[3730,3730],[3736,3736]]],[1564472377595,["GJX@GJXAIOU",[[1,3736,"进行重新新建；"]],[3736,3736],[3743,3743]]],[1564472382073,["GJX@GJXAIOU",[[-1,3744,"-- "]],[3747,3747],[3744,3744]]],[1564472382859,["GJX@GJXAIOU",[[1,3744,"\n"]],[3744,3744],[3745,3745]]],[1564472383664,["GJX@GJXAIOU",[[1,3745,"### "]],[3745,3745],[3753,3753]]],[1564472386906,["GJX@GJXAIOU",[[1,3754,"\n"]],[3753,3753],[3754,3754]]],[1564472389394,["GJX@GJXAIOU",[[1,3754,"- 规则："]],[3754,3754],[3759,3759]]],[1564472392407,["GJX@GJXAIOU",[[-1,3760,"-- "]],[3760,3763],[3760,3760]]],[1564472392658,["GJX@GJXAIOU",[[1,3760,"·"]],[3760,3760],[3761,3761]]],[1564472393363,["GJX@GJXAIOU",[[-1,3760,"·"]],[3761,3761],[3760,3760]]],[1564472394860,["GJX@GJXAIOU",[[1,3760,"  - "]],[3760,3760],[3764,3764]]],[1564472745928,["GJX@GJXAIOU",[[-1,3800,"-- "]],[3800,3803],[3800,3800]]],[1564472746815,["GJX@GJXAIOU",[[1,3800,"#### "]],[3800,3800],[3835,3835]]],[1564472749793,["GJX@GJXAIOU",[[1,3811,"\n"]],[3811,3811],[3812,3812]]],[1564472775089,["GJX@GJXAIOU",[[1,3837,"\n"]],[3836,3836],[3837,3837]]],[1564472775971,["GJX@GJXAIOU",[[1,3837,"``"]],[3837,3837],[3839,3839]]],[1564472786106,["GJX@GJXAIOU",[[1,3838,"select "]],[3838,3838],[3845,3845]]],[1564472813235,["GJX@GJXAIOU",[[1,3845,"empName,deptName from employee, dept where employee.deptID = dept.id;"]],[3838,3845],[3914,3914]]],[1564472819634,["GJX@GJXAIOU",[[-1,4029,"--"]],[4031,4031],[4029,4029]]],[1564472820011,["GJX@GJXAIOU",[[1,4029,"-"]],[4029,4029],[4030,4030]]],[1564472828188,["GJX@GJXAIOU",[[1,4052,"- \n"]],[4051,4051],[4054,4054]]],[1564472828584,["GJX@GJXAIOU",[[-1,4052,"- "]],[4054,4054],[4052,4052]]],[1564472830005,["GJX@GJXAIOU",[[1,4052,"``"]],[4052,4052],[4054,4054]]],[1564472850433,["GJX@GJXAIOU",[[1,4053,"select empName, deptName from employee  inner join dept  on employee.deptID = dept.id;"]],[4053,4053],[4139,4139]]],[1564472856616,["GJX@GJXAIOU",[[-1,4257,"-"]],[4258,4258],[4257,4257]]],[1564472857815,["GJX@GJXAIOU",[[1,4257,"huo"]],[4257,4257],[4260,4260]]],[1564472858459,["GJX@GJXAIOU",[[-1,4257,"huo"]],[4260,4260],[4257,4257]]],[1564472861056,["GJX@GJXAIOU",[[1,4258," h "]],[4257,4257],[4260,4260]]],[1564472861426,["GJX@GJXAIOU",[[1,4260,"uoz"]],[4260,4260],[4263,4263]]],[1564472862737,["GJX@GJXAIOU",[[-1,4259,"huoz"]],[4263,4263],[4259,4259]]],[1564472864819,["GJX@GJXAIOU",[[1,4259,"或者"]],[4259,4259],[4261,4261]]],[1564472870578,["GJX@GJXAIOU",[[-1,4295,"\n"]],[4296,4296],[4295,4295]]],[1564472871274,["GJX@GJXAIOU",[[1,4295," "]],[4295,4295],[4296,4296]]],[1564472875288,["GJX@GJXAIOU",[[-1,4311,"\n"]],[4312,4312],[4311,4311]]],[1564472875434,["GJX@GJXAIOU",[[1,4311," "]],[4311,4311],[4312,4312]]],[1564472882072,["GJX@GJXAIOU",[[-1,4329,"\n"]],[4330,4330],[4329,4329]]],[1564472882306,["GJX@GJXAIOU",[[1,4329," "]],[4329,4329],[4330,4330]]],[1564472884484,["GJX@GJXAIOU",[[1,4267,"·"]],[4267,4267],[4268,4268]]],[1564472885695,["GJX@GJXAIOU",[[-1,4267,"·"]],[4268,4268],[4267,4267]]],[1564472886091,["GJX@GJXAIOU",[[1,4267,"`"]],[4267,4267],[4268,4268]]],[1564472887602,["GJX@GJXAIOU",[[1,4350,"`"]],[4350,4350],[4351,4351]]],[1564472891549,["GJX@GJXAIOU",[[-1,4354,"- "]],[4353,4356],[4354,4354]]],[1564472891730,["GJX@GJXAIOU",[[1,4354," "]],[4354,4354],[4355,4355]]],[1564472898504,["GJX@GJXAIOU",[[1,4353,"\n"]],[4352,4352],[4353,4353]]],[1564472930472,["GJX@GJXAIOU",[[-1,4431,"-"]],[4431,4431],[4430,4430]]],[1564472934779,["GJX@GJXAIOU",[[1,4496,"`"]],[4496,4496],[4497,4497]]],[1564472936719,["GJX@GJXAIOU",[[-1,4525,"\n"]],[4526,4526],[4525,4525]]],[1564472936924,["GJX@GJXAIOU",[[1,4525," "]],[4525,4525],[4526,4526]]],[1564472942210,["GJX@GJXAIOU",[[1,4538,"`"]],[4538,4538],[4539,4539]]],[1564472943783,["GJX@GJXAIOU",[[-1,4538,"`"]],[4539,4539],[4538,4538]]],[1564472944040,["GJX@GJXAIOU",[[-1,4537,"\n"]],[4538,4538],[4537,4537]]],[1564472944835,["GJX@GJXAIOU",[[1,4537," "]],[4537,4537],[4538,4538]]],[1564472948976,["GJX@GJXAIOU",[[-1,4564,"\n"]],[4565,4565],[4564,4564]]],[1564472949386,["GJX@GJXAIOU",[[1,4564," "]],[4564,4564],[4565,4565]]],[1564472952188,["GJX@GJXAIOU",[[1,4584,"`"]],[4584,4584],[4585,4585]]],[1564473007456,["GJX@GJXAIOU",[[-1,4682,"\n"]],[4683,4683],[4682,4682]]],[1564473008010,["GJX@GJXAIOU",[[1,4682," "]],[4682,4682],[4683,4683]]],[1564473011825,["GJX@GJXAIOU",[[1,4654,"`"]],[4654,4654],[4655,4655]]],[1564473014202,["GJX@GJXAIOU",[[-1,4699,"\n"]],[4700,4700],[4699,4699]]],[1564473014651,["GJX@GJXAIOU",[[1,4699," "]],[4699,4699],[4700,4700]]],[1564473017689,["GJX@GJXAIOU",[[1,4743,"`"]],[4743,4743],[4744,4744]]],[1564473021096,["GJX@GJXAIOU",[[-1,4723,"\n"]],[4724,4724],[4723,4723]]],[1564473021844,["GJX@GJXAIOU",[[1,4723," "]],[4723,4723],[4724,4724]]],[1564473046007,["GJX@GJXAIOU",[[-1,2740,"insert into dept(id, deptName) values(4, \"Python教学部\");"]],[2740,2794],[2740,2740]]],[1564473114744,["GJX@GJXAIOU",[[-1,4692,"--"]],[4692,4694],[4692,4692]]],[1564473115842,["GJX@GJXAIOU",[[1,4692,"### "]],[4692,4692],[4702,4702]]],[1564473125457,["GJX@GJXAIOU",[[1,4299,"### zuoyo"]],[4299,4299],[4308,4308]]],[1564473126663,["GJX@GJXAIOU",[[-1,4303,"zuoyo"]],[4308,4308],[4303,4303]]],[1564473130524,["GJX@GJXAIOU",[[1,4303,"左右外连接"]],[4303,4303],[4308,4308]]],[1564473179408,["GJX@GJXAIOU",[[1,4728,"\n"]],[4727,4727],[4728,4728]]],[1564473180804,["GJX@GJXAIOU",[[1,4728,"```"]],[4728,4728],[4731,4731]]],[1564473180835,["GJX@GJXAIOU",[[1,4731,"language\n```\n"]],[4731,4731],[4731,4739]]],[1564473182107,["GJX@GJXAIOU",[[-1,4731,"language"],[1,4739,"s"]],[4731,4739],[4732,4732]]],[1564473182142,["GJX@GJXAIOU",[[1,4732,"d"]],[4732,4732],[4733,4733]]],[1564473182832,["GJX@GJXAIOU",[[-1,4732,"d"]],[4733,4733],[4732,4732]]],[1564473183410,["GJX@GJXAIOU",[[1,4732,"ql"]],[4732,4732],[4734,4734]]],[1564473184520,["GJX@GJXAIOU",[[1,4735,"\n"]],[4734,4734],[4735,4735]]],[1564473188425,["GJX@GJXAIOU",[[-1,4741,"alter table employee add bossId int;\n\nupdate employee set bossId=1 where id=2;\nupdate employee set bossId=2 where id=3;\nupdate employee set bossId=3 where id=4;"]],[4741,4901],[4741,4741]]],[1564473189937,["GJX@GJXAIOU",[[1,4735,"alter table employee add bossId int;\n\nupdate employee set bossId=1 where id=2;\nupdate employee set bossId=2 where id=3;\nupdate employee set bossId=3 where id=4;"]],[4735,4735],[4895,4895]]],[1564473192048,["GJX@GJXAIOU",[[-1,4902,"\n"]],[4902,4902],[4901,4901]]],[1564473192219,["GJX@GJXAIOU",[[-1,4901,"\n"]],[4901,4901],[4900,4900]]],[1564473271468,["GJX@GJXAIOU",[[1,4955,"`"]],[4955,4955],[4956,4956]]],[1564473272979,["GJX@GJXAIOU",[[1,5046,"`"]],[5046,5046],[5047,5047]]],[1564473275104,["GJX@GJXAIOU",[[-1,4983,"\n"]],[4984,4984],[4983,4983]]],[1564473275498,["GJX@GJXAIOU",[[1,4983," "]],[4983,4983],[4984,4984]]],[1564473279626,["GJX@GJXAIOU",[[-1,5026,"\n"]],[5027,5027],[5026,5026]]],[1564473279915,["GJX@GJXAIOU",[[1,5026," "]],[5026,5026],[5027,5027]]],[1564473283104,["GJX@GJXAIOU",[[-1,4999,"\n"]],[5000,5000],[4999,4999]]],[1564473283483,["GJX@GJXAIOU",[[1,4999," "]],[4999,4999],[5000,5000]]]],null,"GJX@GJXAIOU"],["7dcfdece-9ae2-4f1a-80b9-5c8dee8412ad",1564749602181,"# JavaEEDay37C3P0连接池\n\n\n-- MySQL增强\ncreate database day38;\nuse day38;\n\n# 一、 数据约束\n## （一） 默认值\n```sql\ncreate table student(\n\tid int, \n\tname varchar(20),\n\tcountry varchar(20) default '中国' -- 默认值\n);\n```\n-- 没有设置默认值的字段，在没有赋值的情况下都是NULL\ninsert into student(id, name) values(1, \"孬蛋\");\ninsert into student(id, name, country) values(2, \"金豆\", \"China\");\ninsert into student(id) values(3);\n\n\n## （二）非空\n```sql\ncreate table student(\n\tid int, \n\tname varchar(20),\n\tgender varchar(2) not null -- 非空\n);\n```\n- 如果存在非空字段，必须赋值,下面会报错；\n`insert into student(id, name) values(1, \"孬蛋\");`\nERROR 1364 (HY000): Field 'gender' doesn't have a default value\n\n- 必须给非空字段赋值,下面语句正确；\n`insert into student(id, name, gender) values(1, \"狗蛋\", \"男\");`\n\n- 非空字段用在什么地方？\n用户名，密码，邮箱，手机\n\n##  （三）唯一\n```sql\ncreate table student(\n\tid int UNIQUE, -- 唯一\n\tname varchar(20)\n);\n```\ninsert into student(id, name) values(1, \"孬蛋\");\ninsert into student(id, name) values(1, \"狗剩\");\n`ERROR 1062(23000):Duplicate entry '1' for key 'id'`\n-- 唯一值不能重复\n\n\n\n## (四)主键 (非空+唯一)\n```sql\ncreate table student(\n\tid int primary key,\n\tname varchar(20)\n);\n```\ninsert into student(id, name) values(1, \"狗蛋\");\ninsert into student(id, name) values(2, \"狗剩\");\ninsert into student(name) values('辣鸡');\n-- ERROR 1364 (HY000): Field 'id' doesn't have a default value\n-- ID值不能为空，必须有数据\n\ninsert into student(id, name) values(1, \"炸鸡\");\n-- ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n-- ID值是唯一索引，不能为空，并且不能重复\n\n\n\n## (五)自增长\n```sql\nCREATE TABLE student(\n\t-- 自增长 ZEROFILL 零填充，从0开始\n\tid INT ZEROFILL PRIMARY KEY AUTO_INCREMENT, \n\tname VARCHAR(20)\n);\n\ninsert into student(name) values(\"张三\");\ninsert into student(name) values(\"李四\");\ninsert into student(name) values(\"王五\");\ninsert into student(name) values(\"马六\");\n```\n\n\n\n##  （六）外键约束\n下面表的设计中：每一个人都是JavaEE教学部，这里每一个数据行中，都有JavaEE教学部,导致了数据的冗余,是否可以把部门做成一张表\n```sql\ncreate table employee(\n\tid int primary key, -- 员工ID\n\tempName varchar(20), -- 员工名\n\tdeptName varchar(20) -- 部门名\n);\n\ninsert into employee values(1, \"老刘\", \"JavaEE教学部\");\ninsert into employee values(2, \"我党\", \"JavaEE教学部\");\ninsert into employee values(3, \"大飞\", \"JavaEE教学部\");\ninsert into employee values(4, \"瑞哥\", \"JavaEE教学部\");\ninsert into employee values(5, \"赋赋\", \"JavaEE教学部\");\n```\n\n-- 设计一个独立的部门表\n```sql\ncreate table dept(\n\tid int primary key,\n\tdeptName varchar(20)\n);\n```\n\n-- 设计一个新的员工表，带有部门ID\n```sql\ncreate table employee(\n\tid int primary key,\n\tempName varchar(20),\n\tdeptID int, -- 用部门的ID来表示当前员工的部门是哪一个\n\t-- 建立一个外键约束\n\tCONSTRAINT emp_dept_fk foreign key(deptID) references dept(id) on update cascade on delete cascade -- 级联修改\n\t--emp_dept_fk :外键名称     deptID:外键   dept(id):连接的参考字段\n);\n\ninsert into dept(id, deptName) values(1, \"JavaEE教学部\");\ninsert into dept(id, deptName) values(2, \"PHP教学部\");\ninsert into dept(id, deptName) values(3, \"iOS教学部\");\n\n\ninsert into employee values(1, \"张三\", 1);\ninsert into employee values(2, \"李四\", 2);\ninsert into employee values(3, \"王五\", 3);\ninsert into employee values(4, \"赵六\", 1);\n```\n`insert into employee values(5, \"喜峰\", 4);`\n-- 存在问题，因为在部门中并没有部门ID为4的部门，这里数据无法添加\n-- ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`day38`.`employee`, CONSTRAINT `emp_dept_fk` FOREIGN KEY (`deptID`) REFERE\n NCES `dept` (`id`) ON DELETE CASCADE ON UPDATE CASCADE)\n\n\n-- 级联修改因为后面的这句话： on update cascade on delete cascade\n- 如果修改部门，这里会随之修改主表里面的数据\n`update dept set id=4 where id=3;`\n- 删除部门表 同时会帮助我们删除员工信息\n`delete from dept where id=2;`\n- 修改员工表信息\n`update employee set deptID=2 where id=4;`\n\n\n- 如果没有级联修改\n  - 1) 当存在外键约束，添加数据的顺序：先添加主表，在添加副表\n  - 2) 当存在外键约束，修改数据的顺序：先修改副表，在修改主表\n  - 3) 当存在外键约束，删除数据的顺序：先删除副表，在删除主表\n\n## 二、关联查询\n\n### 交叉查询\n`select empName,deptName from employee, dept;`\n 这个结果是有问题的 笛卡尔乘积 存在重复数据，不推荐使用\n\n-- 需求：查询员工及其所在部门，显示员工姓名和部门名称\n将上面的表格进行重新新建；\n\n### 多表查询\n- 规则：\n  - 1. 确定查询那些表格 2. 确定要查询的字段 3. 表和表之间的关系\n#### 内连接查询。\n只有满足条件的结果才会展示(使用最多的多表查询)\n`select empName,deptName from employee, dept where employee.deptID = dept.id;`\nselect empName,deptName  -- 要查询的字段\nfrom employee, dept   -- 要查询的表格\nwhere employee.deptID = dept.id; -- 表和表之间的关系\n\n- inner join 内连接的另一种语法\n`select empName, deptName from employee  inner join dept  on employee.deptID = dept.id;`\nselect empName, deptName\nfrom employee   -- 主表\ninner join dept -- 连接的是哪一张表\non employee.deptID = dept.id; -- 表示条件 \n\n-  或者 使用别名\n`select e.empName, d.deptName from employee e inner join dept d on e.deptID = d.id;`\n\n### 左右外连接\n- 需求，查看每一个部门的员工\n-- 预期结果\n--\tJavaEE 张三\n-- \tJavaEE 赵六\n--  iOS  王五\n--  PHP  李四\n\n- 左[外]连接查询：使用左边表中的数据来匹配右边表的数据，如果符合条件，展示数据\n-- 如果没有符合条件的连接数据，显示null\n`select d.deptName, e.empName from dept d left outer join employee e on d.id = e.deptID;`\n\n-- 右[外]连接查询：使用右边表中的数据来匹配左边表的数据，如果符合条件，展示数据\n-- 如果没有符合条件的连接数据，显示null\n`select d.deptName, e.empName from employee e right outer join dept d on d.id = e.deptID;`\n\n###  自连接查询\n-- 修改员工表结构，添加上司\n```sql\nalter table employee add bossId int;\n\nupdate employee set bossId=1 where id=2;\nupdate employee set bossId=2 where id=3;\nupdate employee set bossId=3 where id=4;\n```\n\n-- 预期结果\n\t-- 张三  null\n\t-- 李四  张三\n\t-- 王五  李四\n\t-- 赵六  王五\n`select e.empName, b.empName from employee e left outer join employee b on e.bossId = b.id;`\n",[[1564749572826,["GJX@GJXAIOU",[[1,23,"\n"]],[21,21],[22,22]]],[1564749572996,["GJX@GJXAIOU",[[1,24,"\n"]],[22,22],[23,23]]],[1564749575019,["GJX@GJXAIOU",[[1,23,"## 四、连接池\n\n- 问题：发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 ，因为涉及到数据库的打开，关闭，这里非常影响软件的运行效率。\n- 解决方案：把数据库连接对象，放到一个池子里\t\n- 连接池功能如下：\n1.初始化连接的个数，最大连接数，当前连接数，池子用集合来表示 ，一般使用LinkedList ；因为增删多，基本上没有查找\n2.构造方法：创建初始化连接\n3.创建连接的方法\n4.获取连接的方法：\n---> 判断：池子中有没有可用的连接\n  --> 有，直接拿走\n  --> 没有\t判断是否达到了最大连接数，\n    -->到达则抛出异常\n    -->没有达到，创建新的连接\n5.释放连接： 是将正在使用的数据库连接对象，放回池子内\n\n```java\npackage e_mypool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n\npublic class MyConnectionPool {\n\tprivate int initCount = 5; //初始化连接数目，默认5个\n\tprivate int maxCount = 10; //最大连接数\n\tprivate int currentCount = 0; //记录当前连接数\n\t\n\t//连接池，用LinkedList集合来操作\n\tprivate LinkedList<Connection> pool = new LinkedList<Connection>();\n\t\n\t//1. 构造方法，按照指定初始化连接个数，创建新的连接\n\tpublic MyConnectionPool() {\n\t\tfor (int i = 0; i <initCount; i++) {\n\t\t\t//类内创建连接的方式\n\t\t\tConnection conn = createConnection();\n\t\t\tpool.addLast(conn);\n\t\t\tcurrentCount++; //记录连接池里面的连接数目\n\t\t}\n\t}\n\t\n\tpublic int getCurrentCount() {\n\t\treturn currentCount;\n\t}\n\t\n\t//2. 创建一个新的连接的方法\n\tprivate Connection createConnection() {\n\t\t//1. 加载驱动\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tString url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\t\t\tString user = \"root\";\n\t\t\tString password = \"123456\";\n\t\t\t//最原始的连接对象\n\t\t\tfinal Connection finalConn = DriverManager.getConnection(url, user, password);\n\t\t\t//代理思想~~\n\t\t\tConnection proxy = (Connection) Proxy.newProxyInstance(\n\t\t\t\t\t\tfinalConn.getClass().getClassLoader(), //类加载器\n\t\t\t\t\t\tnew Class[] {Connection.class}, //目标对象实现的接口\n\t\t\t\t\t\t\n\t\t\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//定义一个返回值\n\t\t\t\t\t\t\t\tObject result = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//获取要执行方法的方法名\n\t\t\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//这里只是限制了close的操作，如果是其他的方法，按照原来的操作进行\n\t\t\t\t\t\t\t\t//修改关闭close执行的任务\n\t\t\t\t\t\t\t\tif (\"close\".equals(methodName)) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"执行close方法\");\n\t\t\t\t\t\t\t\t\t//放回连接池内\n\t\t\t\t\t\t\t\t\tpool.addLast(finalConn);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"数据库连接已经放回到连接池中\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = method.invoke(finalConn, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\treturn proxy;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t//3. 从连接池中获取连接的方法\n\tpublic Connection getConnection() {\n\t\t//1. 判断池子中有没有连接\n\t\tif (pool.size() > 0) {\n\t\t\treturn pool.removeFirst();\n\t\t}\n\t\t\n\t\t//2. 如果没有连接，判断当前连接数是否达到最大值限制\n\t\tif (currentCount < maxCount) {\n\t\t\tcurrentCount++;\n\t\t\treturn createConnection();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"当前连接数已经达到最大值\");\n\t}\n\t\n\t//4. 释放连接\n\tpublic void realeaseConnection(Connection conn) {\n\t\t//如果池子中读取的数目是小于初始化连接的，放入池子\n\t\tif (pool.size() < initCount) {\n\t\t\tpool.addLast(conn);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t//关闭\n\t\t\t\tcurrentCount--;\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) throws SQLException {\n\t\tMyConnectionPool pool = new MyConnectionPool();\n\t\t\n\t\tSystem.out.println(\"当前连接数：\" + pool.getCurrentCount());\n\t\t\n\t\tConnection conn1 = pool.getConnection();\n\t\tConnection conn2 = pool.getConnection();\n\t\tConnection conn3 = pool.getConnection();\n\t\tConnection conn4 = pool.getConnection();\n\t\tConnection conn5 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn1);\n\t\tSystem.out.println(conn2);\n\t\tSystem.out.println(conn3);\n\t\tSystem.out.println(conn4);\n\t\tSystem.out.println(conn5);\n\t\t\n\t\tconn1.close();\n\t\t\n\t\tconn1 = pool.getConnection();\n\t\tSystem.out.println(conn1);\n\t\t\n\t\tConnection conn6 = pool.getConnection();\n\t\tConnection conn7 = pool.getConnection();\n\t\tConnection conn8 = pool.getConnection();\n\t\tConnection conn9 = pool.getConnection();\n\t\tConnection conn10 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn6);\n\t\tSystem.out.println(conn7);\n\t\tSystem.out.println(conn8);\n\t\tSystem.out.println(conn9);\n\t\tSystem.out.println(conn10);\n\t\t\n\t\tConnection conn11 = pool.getConnection();\n\t}\n}\n\n```\n\n\n## 使用 C3P0 连接池\n```java\npackage a_c3p0;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\n\n/*\n    ComboPooledDataSource\n\n */\n\npublic class Demo {\n\n\t//第一种方式：硬编码方式\n\t\t@Test\n\t\t//硬编码方式，使用C3P0连接池管理连接数据库对象\n\t\tpublic void test1() throws Exception {\n\t\t\t//创建连接池的核心工具类\n\t\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\n\t\t\t//设置所需参数\n\t\t\t//连接数据库所需参数\n\t\t\tdataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day38?useSSL=true\");//设置URL\n\t\t\tdataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); //加载驱动\n\t\t\tdataSource.setUser(\"root\"); //设置用户名\n\t\t\tdataSource.setPassword(\"123456\"); //设置密码\n\n\t\t\t//C3P0连接池的属性\n\t\t\tdataSource.setInitialPoolSize(3);  //初始化连接数\n\t\t\tdataSource.setMaxPoolSize(6); //最大连接数\n\t\t\tdataSource.setMaxIdleTime(1000); //设置等待时间\n\n\t\t\t//从连接池中获取到数据库连接对象\n\t\t\tConnection conn = dataSource.getConnection();\n\n\t\t\tconn.prepareStatement(\"delete from student where id=3\").executeUpdate();\n\n\t\t\tconn.close();\n\t\t}\n\n\n\t\t//第二种方法：使用XML配置文件\n\n\t@Test\n\t//使用XML配置文件的方式，创建C3P0连接池\n\tpublic void testXML() throws Exception {\n\t\t//创建c3p0核心类\n\t\t//创建当前核心类，就会自动加载在src下的c3p0-config.xml\n\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\t\tPreparedStatement pstmt = null;\n\n\t\tConnection conn = dataSource.getConnection();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tString sql = \"insert into student(name) values(?)\";\n\n\t\t\tpstmt = conn.prepareStatement(sql);\n\n\t\t\tpstmt.setString(1, \"逗比\");\n\n\t\t\tpstmt.executeUpdate();\n\t\t}\n\n\t\tpstmt.close();\n\t\tconn.close();\n\n\n\t}\n}\n\n\n```\n针对第二种方式，一般使用 XML 配置文件，也可以使用.properties 文件，这里使用 xml 文件，将其放置在上面代码同一包下即可；命名为：c3p0-config.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<c3p0-config>\n\t<default-config>\n\t\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/day38?useSSL=true</property>\n\t\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"user\">root</property>\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"initialPoolSize\">3</property>\n\t\t<property name=\"maxPoolSize\">6</property>\n\t\t<property name=\"maxIdleTime\">1000</property>\n\t</default-config>\n</c3p0-config>\n\n```\n\n\n\n\n\n"]],[23,23],[6476,6476]]],[1564749595780,["GJX@GJXAIOU",[[1,32,"不在使用"]],[32,32],[36,36]]],[1564749596995,["GJX@GJXAIOU",[[-1,32,"不在使用"]],[36,36],[32,32]]],[1564749600708,["GJX@GJXAIOU",[[1,32,"===="]],[32,32],[36,36]]],[1564749602884,["GJX@GJXAIOU",[[1,32,"\n"]],[32,32],[33,33]]],[1564749610331,["GJX@GJXAIOU",[[1,35,"不再使用JDBC"]],[35,35],[43,43]]],[1564749610369,["GJX@GJXAIOU",[[1,39," "]],[43,43],[44,44]]],[1564749611995,["GJX@GJXAIOU",[[1,44,"连接"]],[44,44],[46,46]]],[1564749612032,["GJX@GJXAIOU",[[1,44," "]],[46,46],[47,47]]],[1564749623331,["GJX@GJXAIOU",[[1,47,"数据库，采用连接池的方式"]],[47,47],[59,59]]],[1564753155984,["GJX@GJXAIOU",[[-1,408,"package e_mypool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n\npublic class MyConnectionPool {\n\tprivate int initCount = 5; //初始化连接数目，默认5个\n\tprivate int maxCount = 10; //最大连接数\n\tprivate int currentCount = 0; //记录当前连接数\n\t\n\t//连接池，用LinkedList集合来操作\n\tprivate LinkedList<Connection> pool = new LinkedList<Connection>();\n\t\n\t//1. 构造方法，按照指定初始化连接个数，创建新的连接\n\tpublic MyConnectionPool() {\n\t\tfor (int i = 0; i <initCount; i++) {\n\t\t\t//类内创建连接的方式\n\t\t\tConnection conn = createConnection();\n\t\t\tpool.addLast(conn);\n\t\t\tcurrentCount++; //记录连接池里面的连接数目\n\t\t}\n\t}\n\t\n\tpublic int getCurrentCount() {\n\t\treturn currentCount;\n\t}\n\t\n\t//2. 创建一个新的连接的方法\n\tprivate Connection createConnection() {\n\t\t//1. 加载驱动\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tString url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\t\t\tString user = \"root\";\n\t\t\tString password = \"123456\";\n\t\t\t//最原始的连接对象\n\t\t\tfinal Connection finalConn = DriverManager.getConnection(url, user, password);\n\t\t\t//代理思想~~\n\t\t\tConnection proxy = (Connection) Proxy.newProxyInstance(\n\t\t\t\t\t\tfinalConn.getClass().getClassLoader(), //类加载器\n\t\t\t\t\t\tnew Class[] {Connection.class}, //目标对象实现的接口\n\t\t\t\t\t\t\n\t\t\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//定义一个返回值\n\t\t\t\t\t\t\t\tObject result = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//获取要执行方法的方法名\n\t\t\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//这里只是限制了close的操作，如果是其他的方法，按照原来的操作进行\n\t\t\t\t\t\t\t\t//修改关闭close执行的任务\n\t\t\t\t\t\t\t\tif (\"close\".equals(methodName)) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"执行close方法\");\n\t\t\t\t\t\t\t\t\t//放回连接池内\n\t\t\t\t\t\t\t\t\tpool.addLast(finalConn);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"数据库连接已经放回到连接池中\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = method.invoke(finalConn, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\treturn proxy;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t//3. 从连接池中获取连接的方法\n\tpublic Connection getConnection() {\n\t\t//1. 判断池子中有没有连接\n\t\tif (pool.size() > 0) {\n\t\t\treturn pool.removeFirst();\n\t\t}\n\t\t\n\t\t//2. 如果没有连接，判断当前连接数是否达到最大值限制\n\t\tif (currentCount < maxCount) {\n\t\t\tcurrentCount++;\n\t\t\treturn createConnection();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"当前连接数已经达到最大值\");\n\t}\n\t\n\t//4. 释放连接\n\tpublic void realeaseConnection(Connection conn) {\n\t\t//如果池子中读取的数目是小于初始化连接的，放入池子\n\t\tif (pool.size() < initCount) {\n\t\t\tpool.addLast(conn);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t//关闭\n\t\t\t\tcurrentCount--;\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) throws SQLException {\n\t\tMyConnectionPool pool = new MyConnectionPool();\n\t\t\n\t\tSystem.out.println(\"当前连接数：\" + pool.getCurrentCount());\n\t\t\n\t\tConnection conn1 = pool.getConnection();\n\t\tConnection conn2 = pool.getConnection();\n\t\tConnection conn3 = pool.getConnection();\n\t\tConnection conn4 = pool.getConnection();\n\t\tConnection conn5 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn1);\n\t\tSystem.out.println(conn2);\n\t\tSystem.out.println(conn3);\n\t\tSystem.out.println(conn4);\n\t\tSystem.out.println(conn5);\n\t\t\n\t\tconn1.close();\n\t\t\n\t\tconn1 = pool.getConnection();\n\t\tSystem.out.println(conn1);\n\t\t\n\t\tConnection conn6 = pool.getConnection();\n\t\tConnection conn7 = pool.getConnection();\n\t\tConnection conn8 = pool.getConnection();\n\t\tConnection conn9 = pool.getConnection();\n\t\tConnection conn10 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn6);\n\t\tSystem.out.println(conn7);\n\t\tSystem.out.println(conn8);\n\t\tSystem.out.println(conn9);\n\t\tSystem.out.println(conn10);\n\t\t\n\t\tConnection conn11 = pool.getConnection();\n\t}\n}"]],[408,4317],[408,408]]],[1564753161761,["GJX@GJXAIOU",[[1,408,"package connectionpool;\n\nimport metadata.JdbcUtil;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-20:37\n */\npublic class ConnectionPoolPractice {\n    /*\n    初始化连接数目，这里默认为3\n     */\n    private int initCount = 3;\n    /*\n    连接池最大连接数目，这里定义为6\n     */\n    private final int maxCount = 6;\n    /*\n     记录当前的连接数目\n     */\n    private int currentCount = 0;\n\n    // 新建连接池，使用linkedlist操作\n    private  LinkedList<Connection> connectionPool = new LinkedList<Connection>();\n\n    // 1.构造方法，按照指定初始化连接个数并且创建新的连接\n    public ConnectionPoolPractice(){\n        for (int i = 0; i < initCount; i++) {\n            // 类内创建连接的方式\n            Connection connection = createConnection();\n            connectionPool.addLast(connection);\n            currentCount++;\n        }\n    }\n\n    public int getCurrentCount(){\n        return currentCount;\n    }\n\n    // 2.创建一个新的连接\n    private Connection createConnection(){\n        // 2.1加载驱动\n       final Connection connection = JdbcUtil.getConnection();\n\n        Connection proxy = (Connection)Proxy.newProxyInstance(connection.getClass().getClassLoader(), new Class[]{Connection.class}, new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                // 定义一个返回值\n                Object result = null;\n                // 获取要执行方法的方法名\n                String methodName = method.getName();\n                // 这里只是限制了close的操作，其他的方法按照原来的操作进行\n                // 修改关闭close执行的任务\n                if (\"close\".equals(methodName)) {\n                    System.out.println(\"执行close方法\");\n                    // 放回连接池内\n                    connectionPool.addLast(connection);\n                    System.out.println(\"数据库连接已经放回到连接池中\");\n                }else{\n                    result = method.invoke(connection, args);\n                }\n                return result;\n            }\n        });\n        return proxy;\n\n    }\n\n    // 3.从连接池中获取连接的方法\n    public Connection getConnection(){\n        // 3.1判断池子中有没有连接\n        if (connectionPool.size() > 0){\n            return connectionPool.removeFirst();\n        }\n\n        // 3.2如果没有连接，判断当前连接数是否达到最大值限制\n        if (currentCount < maxCount){\n            currentCount++;\n            return createConnection();\n        }\n        throw new RuntimeException(\"当前连接数已经达到最大值\");\n    }\n\n    // 4.释放连接\n    public void realeaseConnection(Connection connection){\n        // 4.1如果池子中读取的数目小于初始化连接，放入池子\n        if(connectionPool.size() < initCount){\n            connectionPool.addLast(connection);\n        }else {\n            currentCount--;\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ConnectionPoolPractice connectionPoolPractice = new ConnectionPoolPractice();\n        System.out.println(\"当前连接数目为：\" + connectionPoolPractice.getCurrentCount());\n\n        Connection connection = connectionPoolPractice.getConnection();\n        Connection connection1 = connectionPoolPractice.getConnection();\n        Connection connection2 = connectionPoolPractice.getConnection();\n        System.out.println(connection);\n        System.out.println(connection1);\n        System.out.println(connection2);\n\n        try {\n            connection.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        Connection connection3 = connectionPoolPractice.getConnection();\n        System.out.println(connection3);\n\n    }\n\n}\n"]],[408,408],[4129,4129]]],[1564753639073,["GJX@GJXAIOU",[[1,4152,"\n"]],[4151,4151],[4152,4152]]],[1564753647802,["GJX@GJXAIOU",[[1,4152,"一共两种连接方式："]],[4152,4152],[4161,4161]]],[1564753648240,["GJX@GJXAIOU",[[1,4162,"\n"]],[4161,4161],[4162,4162]]],[1564753650060,["GJX@GJXAIOU",[[1,4162,"方式一个"]],[4162,4162],[4166,4166]]],[1564753651089,["GJX@GJXAIOU",[[-1,4165,"个"]],[4166,4166],[4165,4165]]],[1564753669988,["GJX@GJXAIOU",[[1,4165,"：硬编码方式"]],[4165,4165],[4171,4171]]],[1564753693744,["GJX@GJXAIOU",[[1,4172,"\n"]],[4171,4171],[4172,4172]]],[1564753699123,["GJX@GJXAIOU",[[1,4172,"方式二：使用XML"]],[4172,4172],[4181,4181]]],[1564753699160,["GJX@GJXAIOU",[[1,4178," "]],[4181,4181],[4182,4182]]],[1564753700132,["GJX@GJXAIOU",[[1,4182,"文件"]],[4182,4182],[4184,4184]]],[1564753700169,["GJX@GJXAIOU",[[1,4182," "]],[4184,4184],[4185,4185]]],[1564753703559,["GJX@GJXAIOU",[[1,4186,"\n"]],[4185,4185],[4186,4186]]],[1564753703714,["GJX@GJXAIOU",[[1,4187,"\n"]],[4186,4186],[4187,4187]]],[1564753712692,["GJX@GJXAIOU",[[1,4187,"- 方式一：使用硬编码的"]],[4187,4187],[4199,4199]]],[1564753714000,["GJX@GJXAIOU",[[-1,4198,"的"]],[4199,4199],[4198,4198]]],[1564753720044,["GJX@GJXAIOU",[[1,4198,"方式的代码"]],[4198,4198],[4203,4203]]],[1564756121926,["GJX@GJXAIOU",[[-1,4212,"package a_c3p0;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\n\n/*\n    ComboPooledDataSource\n\n */\n\npublic class Demo {\n\n\t//第一种方式：硬编码方式\n\t\t@Test\n\t\t//硬编码方式，使用C3P0连接池管理连接数据库对象\n\t\tpublic void test1() throws Exception {\n\t\t\t//创建连接池的核心工具类\n\t\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\n\t\t\t//设置所需参数\n\t\t\t//连接数据库所需参数\n\t\t\tdataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day38?useSSL=true\");//设置URL\n\t\t\tdataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); //加载驱动\n\t\t\tdataSource.setUser(\"root\"); //设置用户名\n\t\t\tdataSource.setPassword(\"123456\"); //设置密码\n\n\t\t\t//C3P0连接池的属性\n\t\t\tdataSource.setInitialPoolSize(3);  //初始化连接数\n\t\t\tdataSource.setMaxPoolSize(6); //最大连接数\n\t\t\tdataSource.setMaxIdleTime(1000); //设置等待时间\n\n\t\t\t//从连接池中获取到数据库连接对象\n\t\t\tConnection conn = dataSource.getConnection();\n\n\t\t\tconn.prepareStatement(\"delete from student where id=3\").executeUpdate();\n\n\t\t\tconn.close();\n\t\t}\n\n\n\t\t//第二种方法：使用XML配置文件\n\n\t@Test\n\t//使用XML配置文件的方式，创建C3P0连接池\n\tpublic void testXML() throws Exception {\n\t\t//创建c3p0核心类\n\t\t//创建当前核心类，就会自动加载在src下的c3p0-config.xml\n\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\t\tPreparedStatement pstmt = null;\n\n\t\tConnection conn = dataSource.getConnection();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tString sql = \"insert into student(name) values(?)\";\n\n\t\t\tpstmt = conn.prepareStatement(sql);\n\n\t\t\tpstmt.setString(1, \"逗比\");\n\n\t\t\tpstmt.executeUpdate();\n\t\t}\n\n\t\tpstmt.close();\n\t\tconn.close();\n\n\n\t}\n}\n"]],[4212,5778],[4212,4212]]],[1564756134151,["GJX@GJXAIOU",[[1,4212,"package connectionpool;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-21:42\n */\npublic class C3P0ConnectionPool {\n    /**\n     * 使用硬连接的方式\n     * @throws PropertyVetoException\n     * @throws SQLException\n     */\n    public void HardcodeStyleTest() throws PropertyVetoException, SQLException {\n        // 1.创建连接池的核心工具类\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.设置连接数据库所需的参数\n        comboPooledDataSource.setDriverClass(\"com.mysql.cj.jdbc.Driver\");\n        comboPooledDataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8 \");\n        comboPooledDataSource.setUser(\"root\");\n        comboPooledDataSource.setPassword(\"GJXAIOU\");\n\n        // 3.设置C3P0连接池的属性:初始化连接数、最大连接数、等待时间\n        comboPooledDataSource.setInitialPoolSize(3);\n        comboPooledDataSource.setMaxPoolSize(6);\n        comboPooledDataSource.setMaxIdleTime(1000);\n\n        // 4.从连接池中获取数据库连接对象\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 5.准备preparedStatement执行SQL语句\n        connection.prepareStatement(\"delete from person where id = 3\").executeUpdate();\n    }\n\n    /**\n     * 通过配置XML文件，创建C3P0连接池\n     * @throws SQLException\n     */\n    public void XmlStyleTest() throws SQLException {\n        // 1.创建C3P0核心类，会自动的加载s目录下的c3p0-config.xml文件\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.创建连接\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 3.准备preparedStatement以及SQL语句\n        PreparedStatement preparedStatement = null;\n        String sql = \"insert into person(name, gender, score, home, hobby) value(?, ?, ?, ?, ?)\";\n\n        for (int i = 0; i < 10; i++) {\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setString(1,\"钱十\");\n            preparedStatement.setString(2,\"男\");\n            preparedStatement.setInt(3, 98);\n            preparedStatement.setString(4, \"江苏\");\n            preparedStatement.setString(5, \"游泳\");\n            preparedStatement.executeUpdate();\n        }\n        preparedStatement.close();\n        connection.close();\n    }\n}\n"]],[4212,4212],[6560,6560]]],[1564756139231,["GJX@GJXAIOU",[[1,6566,"\n"]],[6565,6565],[6566,6566]]],[1564756140191,["GJX@GJXAIOU",[[1,6567,"\n"]],[6566,6566],[6567,6567]]],[1564756152657,["GJX@GJXAIOU",[[1,6567,"- 方式二：使用XML"]],[6567,6567],[6578,6578]]],[1564756152695,["GJX@GJXAIOU",[[1,6575," "]],[6578,6578],[6579,6579]]],[1564756153869,["GJX@GJXAIOU",[[1,6579,"文件"]],[6579,6579],[6581,6581]]],[1564756153905,["GJX@GJXAIOU",[[1,6579," "]],[6581,6581],[6582,6582]]],[1564756156557,["GJX@GJXAIOU",[[1,6582,"的形式"]],[6582,6582],[6585,6585]]],[1564756157262,["GJX@GJXAIOU",[[1,6586,"- \n"]],[6585,6585],[6588,6588]]],[1564756158009,["GJX@GJXAIOU",[[-1,6586,"- "]],[6588,6588],[6586,6586]]],[1564756160826,["GJX@GJXAIOU",[[1,6586,"```java"]],[6586,6586],[6593,6593]]],[1564756160988,["GJX@GJXAIOU",[[1,6594,"\n"]],[6593,6593],[6594,6594]]],[1564756161104,["GJX@GJXAIOU",[[1,6595,"\n"]],[6594,6594],[6595,6595]]],[1564756161237,["GJX@GJXAIOU",[[1,6596,"\n"]],[6595,6595],[6596,6596]]],[1564756161359,["GJX@GJXAIOU",[[1,6597,"\n"]],[6596,6596],[6597,6597]]],[1564756162265,["GJX@GJXAIOU",[[1,6597,"```"]],[6597,6597],[6600,6600]]],[1564756168823,["GJX@GJXAIOU",[[1,6594,"package connectionpool;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-21:42\n */\npublic class C3P0ConnectionPool {\n    /**\n     * 使用硬连接的方式\n     * @throws PropertyVetoException\n     * @throws SQLException\n     */\n    public void HardcodeStyleTest() throws PropertyVetoException, SQLException {\n        // 1.创建连接池的核心工具类\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.设置连接数据库所需的参数\n        comboPooledDataSource.setDriverClass(\"com.mysql.cj.jdbc.Driver\");\n        comboPooledDataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8 \");\n        comboPooledDataSource.setUser(\"root\");\n        comboPooledDataSource.setPassword(\"GJXAIOU\");\n\n        // 3.设置C3P0连接池的属性:初始化连接数、最大连接数、等待时间\n        comboPooledDataSource.setInitialPoolSize(3);\n        comboPooledDataSource.setMaxPoolSize(6);\n        comboPooledDataSource.setMaxIdleTime(1000);\n\n        // 4.从连接池中获取数据库连接对象\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 5.准备preparedStatement执行SQL语句\n        connection.prepareStatement(\"delete from person where id = 3\").executeUpdate();\n    }\n\n    /**\n     * 通过配置XML文件，创建C3P0连接池\n     * @throws SQLException\n     */\n    public void XmlStyleTest() throws SQLException {\n        // 1.创建C3P0核心类，会自动的加载s目录下的c3p0-config.xml文件\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.创建连接\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 3.准备preparedStatement以及SQL语句\n        PreparedStatement preparedStatement = null;\n        String sql = \"insert into person(name, gender, score, home, hobby) value(?, ?, ?, ?, ?)\";\n\n        for (int i = 0; i < 10; i++) {\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setString(1,\"钱十\");\n            preparedStatement.setString(2,\"男\");\n            preparedStatement.setInt(3, 98);\n            preparedStatement.setString(4, \"江苏\");\n            preparedStatement.setString(5, \"游泳\");\n            preparedStatement.executeUpdate();\n        }\n        preparedStatement.close();\n        connection.close();\n    }\n}\n"]],[6594,6594],[8942,8942]]],[1564756178159,["GJX@GJXAIOU",[[-1,6894,"    /**\n     * 使用硬连接的方式\n     * @throws PropertyVetoException\n     * @throws SQLException\n     */\n    public void HardcodeStyleTest() throws PropertyVetoException, SQLException {\n        // 1.创建连接池的核心工具类\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.设置连接数据库所需的参数\n        comboPooledDataSource.setDriverClass(\"com.mysql.cj.jdbc.Driver\");\n        comboPooledDataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8 \");\n        comboPooledDataSource.setUser(\"root\");\n        comboPooledDataSource.setPassword(\"GJXAIOU\");\n\n        // 3.设置C3P0连接池的属性:初始化连接数、最大连接数、等待时间\n        comboPooledDataSource.setInitialPoolSize(3);\n        comboPooledDataSource.setMaxPoolSize(6);\n        comboPooledDataSource.setMaxIdleTime(1000);\n\n        // 4.从连接池中获取数据库连接对象\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 5.准备preparedStatement执行SQL语句\n        connection.prepareStatement(\"delete from person where id = 3\").executeUpdate();\n    }\n"]],[6898,7925],[6894,6894]]],[1564756178590,["GJX@GJXAIOU",[[-1,6894,"\n"]],[6894,6894],[6893,6893]]],[1564756198775,["GJX@GJXAIOU",[[-1,5544,"    /**\n     * 通过配置XML文件，创建C3P0连接池\n     * @throws SQLException\n     */\n    public void XmlStyleTest() throws SQLException {\n        // 1.创建C3P0核心类，会自动的加载s目录下的c3p0-config.xml文件\n        ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource();\n\n        // 2.创建连接\n        Connection connection = comboPooledDataSource.getConnection();\n\n        // 3.准备preparedStatement以及SQL语句\n        PreparedStatement preparedStatement = null;\n        String sql = \"insert into person(name, gender, score, home, hobby) value(?, ?, ?, ?, ?)\";\n\n        for (int i = 0; i < 10; i++) {\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setString(1,\"钱十\");\n            preparedStatement.setString(2,\"男\");\n            preparedStatement.setInt(3, 98);\n            preparedStatement.setString(4, \"江苏\");\n            preparedStatement.setString(5, \"游泳\");\n            preparedStatement.executeUpdate();\n        }\n        preparedStatement.close();\n        connection.close();\n    }"]],[5544,6557],[5544,5544]]],[1564756200159,["GJX@GJXAIOU",[[-1,5544,"\n"]],[5544,5544],[5543,5543]]],[1564756200650,["GJX@GJXAIOU",[[-1,5543,"\n"]],[5543,5543],[5542,5542]]],[1564756292168,["GJX@GJXAIOU",[[-1,7052,"\t"],[1,7053,"    "],[-1,7070,"\t\t"],[1,7072,"        "],[-1,7129,"8?useSSL=true"],[1,7142,"4jdbc?serverTimezone = GMT%2B8 "],[-1,7154,"\t\t"],[1,7156,"        "],[1,7195,"cj."],[-1,7218,"\t\t"],[1,7220,"        "],[-1,7258,"\t\t"],[1,7260,"        "],[-1,7286,"123456"],[1,7292,"GJXAIOU"],[-1,7304,"\t\t"],[1,7306,"        "],[-1,7352,"\t\t"],[1,7354,"        "],[-1,7396,"\t\t"],[1,7398,"        "],[-1,7443,"\t"],[1,7444,"    "]],[6999,7477],[7547,7547]]]],null,"GJX@GJXAIOU"]]}