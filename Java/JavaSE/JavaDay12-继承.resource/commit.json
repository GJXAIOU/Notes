{"compress":true,"commitItems":[["52669f4b-a84c-405e-b51e-4b81a841f4f6",1556352403386,"## 继承初步\n    生活中继承关系\n     \t父亲 和 儿子 的关系？\n     \t父子关系\n     \t\n     \t第一顺位继承人\n     \t\n    代码中的继承关系：\n     \t英雄联盟:\n     \t\t所有的英雄人物都属于英雄类，在这个类里面规定了英雄应该拥有的属性，血量，攻击力，魔法值，魔抗，物抗~\n     \t\t\n     \t但是每一个英雄，例如，凯特琳(皮城女警), 在这个英雄类基础上，特定的技能，特定的皮肤，特定的模型~~~\n    \n     \t在游戏开发中，大量的使用【继承】，来简化代码，提供开发效率\n     \t\n     \t用代码来实现继承关系:\n \t\textends\n \t\t在代码中继承使用的关键字是extends，如果一个类通过extends关键字继承了其他类，那么\n \t\t就可以说，当前类是其他类的子类，或者其他类是当前类父类\n \t\n \t【发现】\n   1.  在创建子类对象的时候，会首先自动调用父类的构造方法\n        这里是为了初始化属于父类的成员变量。有其父必有其子\n           \t2. 父类中的【非私有化】成员变量，子类可以通过继承之后得到使用的权限 \n             3. 父类中的【非私有化】成员方法，子类可以通过继承之后得到使用的权限\n              4. 在父类中用private修饰的私有化成员方法，这个私有化成员方法不能通过继承该类的子类对象来调用\n                 原因:\n                  \t私有化的成员方法，只能在当前类的内部使用，外部没有任何使用权限\n              5. 父类中用private修饰的私有化成员变量，这个私有化的成员变量不能通过继承该类的子类对象来调用\n                 原因：\n                  \t私有化的成员变量，只能在当前类的内部使用，外部没有任何使用权限\n                  【总结】\n                  在继承中，父类里没有私有化的成员变量和成员方法都可以被子类继承，但是一旦私有化，子类就无法继承\n                  这些属性或者方法， 原理是封装思想。\n\n         【使用继承的注意事项】\n         \t继承可以节省代码，提高开发效率，但是在使用继承的时候，前提条件就是，两个类之间的确包含有继承\n         \t的关系\n         \t\t例如：\n         \t\t\tAnimal 动物类\n         \t\t\t\tDog 狗\n         \t\t\t\tCat 猫\n         \t\t\t\t绿萝 这里不属于动物类，不能使用继承关系\n\n## super关键字\n    子类在创建对象时候，首先会自动调用父类的构造方法\n\n \t【前提】\n \t父类的构造方法，不能被子类继承\n \t\n \t[问题]\n \t\t在子类中如果通过构造方法初始化从父类继承而来的成员变量，可能会存在一定的隐患，如果直接使用\n \t\tthis.成员变量赋值操作，会导致父类中的成员变量不符合一些业务逻辑，或者生活逻辑。\n \t\n \t[考虑]\n \t\t能否借助于父类的构造方法，来初始化原本属于父类的成员变量\n \t\n \t[解决]\n \t\t借助于 super 关键字  调用父类方法的关键字\n \t\t\n \t\tsuper关键字的注意事项：\n    1.  super关键字可以在子类中直接调用父类的成员方法\n          \t\t\n          \t\t\n         2. 【重点】使用super调用父类的构造方法：\n              super(实际参数); \n               \t\tJava编译器会根据不同的参数类型，来调用不同的父类中的构造方法\n               \t\n                 \t3. 使用super关键字调用父类的构造方法的时候，要求必须当前代码块的第一行\n\n                   4. this关键字调用构造方法，和super关键字调用构造方法，不能同时出现在一个代码块里面\n\n                    5. 在子类的构造方法中，如果没有通过super指定调用父类的构造方法，那么Java编译器会帮我们\n                       自动调用父类的无参构造方法来使用。\n                        [建议]存在继承关系下， 父类中最好提供一个无参的构造方法供子类使用\n\n\n          [回顾]\n          \tthis关键字调用构造方法的格式：\n             \t\t1. this(实际参数)  Java编译器会根据不同的参数类型，来调用不同的构造方法\n                2. 如果用this调用构造方法，必须在当前代码块的第一行\n                   3. this关键字调用构造方法的时候，不能相互调用\n\n## 重写\n\t[问题]\n  \t\t父亲，业余活动，喜欢钓鱼，但是儿子业余活动，喜欢吃鸡\n  \t\t\n  \t\t父类中存在一个playGame()的方法，这个方法是比较符合父类的实际情况\n  \t\t子类继承之后，也能调用playGame()，但是这个方法不太符合子类的情况\n  \t\t\n  \t[期望]\n  \t\t需要让继承而来的方法， 更加适合子类的实际情况\n  \t\t\n  \t【重写】\n  \t\t子类中存在和父类同名，同参数，同返回值的方法，这种情况称之为【重写】\n  \t\t通常会使用【注解】@Override 开启严格的重写检查\n  \t\t如果父类中没有这个方法，使用@Override检查会报错",[[1556352386002,["GJX@GJXAIOU",[[-1,25,"\t父亲 和 儿子 的关系？\n     \t父子关系"]],[25,49],[25,25]]],[1556352407966,["GJX@GJXAIOU",[[-1,68,"     \t英雄联盟:\n     \t\t所有的英雄人物都属于英雄类，在这个类里面规定了英雄应该拥有的属性，血量，攻击力，魔法值，魔抗，物抗~\n     \t\t\n     \t但是每一个英雄，例如，凯特琳(皮城女警), 在这个英雄类基础上，特定的技能，特定的皮肤，特定的模型~~~\n    "]],[68,209],[68,68]]],[1556352419342,["GJX@GJXAIOU",[[-1,72,"  "],[-1,108,"  "],[-1,112,"  "]],[69,129],[69,123]]],[1556352423569,["GJX@GJXAIOU",[[-1,20,"     \n     \t\n     \t"]],[20,39],[20,20]]],[1556352436381,["GJX@GJXAIOU",[[-1,10,"  "],[-1,31,"  "],[-1,35,"  "],[-1,51,"  "],[-1,85,"  "],[-1,90,"  "],[-1,105," \t\t"],[-1,116," \t\t"],[-1,167," \t\t"],[-1,198," \t"],[-1,201," \t"],[-1,209,"  "],[-1,247,"  "],[-1,275,"  "],[-1,335,"  "],[-1,373,"  "],[-1,439," "],[-1,455," "],[-1,460,"  "],[-1,511,"  "],[-1,592,"  "],[-1,598,"  "],[-1,649," "],[-1,666," "],[-1,672,"  "],[-1,738,"  "],[-1,783,"  "],[-1,797,"  "],[-1,861,"  "],[-1,868,"  "],[-1,883,"  "],[-1,913,"  "],[-1,925,"  "],[-1,944," "],[-1,952," "],[-1,993,"  "],[-1,1021," \t"],[-1,1028," \t"],[-1,1046," \t"],[-1,1049," \t"],[-1,1056," \t\t"],[-1,1105," \t\t"],[-1,1151," \t"],[-1,1154," \t"],[-1,1161," \t\t"],[-1,1193," \t"],[-1,1196," \t"],[-1,1203," \t\t"],[-1,1232," \t\t"],[-1,1236," \t\t"],[-1,1254,"  "],[-1,1288,"  "],[-1,1309,"  "],[-1,1314,"  "],[-1,1348," "],[-1,1361," "],[-1,1376,"  "],[-1,1426,"  "],[-1,1458,"  "],[-1,1502,"  "],[-1,1570," "],[-1,1589," "],[-1,1661,"  "],[-1,1681,"  "],[-1,1750,"  "],[-1,1757,"  "],[-1,1786," "],[-1,1798," "],[-1,1859,"  "],[-1,1891,"  "],[-1,1944,"\t"],[-1,1950,"  "],[-1,1981,"  "],[-1,1986,"  "],[-1,2028,"  "],[-1,2070,"  "],[-1,2075,"  "],[-1,2083,"  "],[-1,2111,"  "],[-1,2116,"  "],[-1,2124,"  "],[-1,2163,"  "],[-1,2196,"  "]],[11,2228],[9,2113]]],[1556352445678,["GJX@GJXAIOU",[[-1,730,"  "],[-1,744,"  "],[-1,804,"  "],[-1,811,"  "],[-1,829,"  "],[-1,845,"  "],[-1,867,"  "],[-1,879,"  "]],[730,911],[728,895]]],[1556352446151,["GJX@GJXAIOU",[[-1,728,"  "],[-1,742,"  "],[-1,798,"  "],[-1,805,"  "],[-1,819,"  "],[-1,835,"  "],[-1,853,"  "],[-1,865,"  "]],[728,895],[726,879]]],[1556352448062,["GJX@GJXAIOU",[[-1,726,"  "],[-1,740,"  "],[-1,792,"  "],[-1,799,"  "],[-1,809,"  "],[-1,825,"  "],[-1,839,"  "],[-1,851,"  "]],[726,879],[725,863]]],[1556352452854,["GJX@GJXAIOU",[[-1,787," \t"]],[789,789],[787,787]]],[1556352453350,["GJX@GJXAIOU",[[-1,786,"\n"]],[787,787],[786,786]]],[1556352454726,["GJX@GJXAIOU",[[-1,785,"承"]],[786,786],[785,785]]],[1556352457387,["GJX@GJXAIOU",[[1,785,"承"]],[785,785],[786,786]]],[1556352459366,["GJX@GJXAIOU",[[-1,739,"\t"]],[740,740],[739,739]]],[1556352464110,["GJX@GJXAIOU",[[-1,789," \t\t"],[-1,796," \t\t\t"],[-1,811," \t\t\t\t"],[-1,822," \t\t\t\t"],[-1,833," \t\t\t\t"]],[792,858],[792,858]]],[1556352471854,["GJX@GJXAIOU",[[-1,417,"  "],[-1,423,"  "],[-1,472,"  "]],[415,530],[413,524]]],[1556352472326,["GJX@GJXAIOU",[[-1,415,"  "],[-1,421,"  "],[-1,468,"  "]],[413,524],[411,518]]],[1556352473178,["GJX@GJXAIOU",[[-1,413,"  "],[-1,419,"  "],[-1,464,"  "]],[411,518],[409,512]]],[1556352473949,["GJX@GJXAIOU",[[-1,411,"  "],[-1,417,"  "],[-1,460,"  "]],[409,512],[407,506]]],[1556352477522,["GJX@GJXAIOU",[[-1,525,"  "],[-1,531,"  "],[-1,580," "],[-1,595," "],[-1,601,"  "],[-1,665,"  "]],[523,699],[521,689]]],[1556352477975,["GJX@GJXAIOU",[[-1,523,"  "],[-1,529,"  "],[-1,576," "],[-1,589," "],[-1,595,"  "],[-1,657,"  "]],[521,689],[519,679]]],[1556352478390,["GJX@GJXAIOU",[[-1,521,"  "],[-1,527,"  "],[-1,572," "],[-1,583," "],[-1,589,"  "],[-1,649,"  "]],[519,679],[517,669]]],[1556352478805,["GJX@GJXAIOU",[[-1,519,"  "],[-1,525,"  "],[-1,568," "],[-1,577," "],[-1,583,"  "],[-1,641,"  "]],[517,669],[515,659]]],[1556352479288,["GJX@GJXAIOU",[[-1,517,"  "],[-1,523,"  "],[-1,564," "],[-1,571," "],[-1,577,"  "],[-1,633,"  "]],[515,659],[513,649]]],[1556352483070,["GJX@GJXAIOU",[[-1,573,"    "]],[586,586],[582,582]]],[1556352498640,["GJX@GJXAIOU",[[-1,8,"  生活中继承关系\n第一顺位继承人"]],[8,25],[8,8]]],[1556352503606,["GJX@GJXAIOU",[[-1,9,"   \t"]],[13,13],[9,9]]],[1556352503818,["GJX@GJXAIOU",[[-1,9,"\n"]],[9,9],[8,8]]],[1556352504310,["GJX@GJXAIOU",[[-1,8,"\n"]],[8,8],[7,7]]],[1556352567166,["GJX@GJXAIOU",[[-1,230,"  "],[-1,279,"  "],[-1,317,"  "]],[233,375],[231,369]]],[1556352567591,["GJX@GJXAIOU",[[-1,228,"  "],[-1,275,"  "],[-1,313,"  "]],[231,369],[229,363]]],[1556352567934,["GJX@GJXAIOU",[[-1,226,"  "],[-1,271,"  "],[-1,309,"  "]],[229,363],[227,357]]],[1556352568575,["GJX@GJXAIOU",[[-1,224,"  "],[-1,264," "],[-1,268," "],[-1,305,"  "]],[227,357],[225,351]]],[1556352569030,["GJX@GJXAIOU",[[-1,223," \t"],[-1,263,"  "],[-1,301,"  "]],[225,351],[223,347]]],[1556352569854,["GJX@GJXAIOU",[[-1,260," "],[-1,297,"  "]],[223,347],[223,345]]],[1556352574214,["GJX@GJXAIOU",[[-1,160," "],[-1,191,"  "]],[160,222],[160,220]]],[1556352672526,["GJX@GJXAIOU",[[-1,362,"  "],[-1,397,"  "]],[365,452],[363,448]]],[1556352672943,["GJX@GJXAIOU",[[-1,360,"  "],[-1,395,"  "]],[363,448],[361,444]]],[1556357837402,["GJX@GJXAIOU",[[1,704," "]],[704,704],[705,705]]],[1556366645510,["GJX@GJXAIOU",[[-1,933,"  "],[-1,971,"  "],[-1,976," "],[-1,983," "],[-1,987,"  "],[-1,1019,"  "],[-1,1056,"  "],[-1,1104,"  "],[-1,1108," "],[-1,1122," "],[-1,1165,"  "],[-1,1231,"  "]],[935,1298],[933,1278]]],[1556366645920,["GJX@GJXAIOU",[[-1,967,"  "],[-1,972," "],[-1,977," "],[-1,981,"  "],[-1,1019,"  "],[-1,1035," "],[-1,1045," "],[-1,1090,"  "],[-1,1094,"  "],[-1,1162,"  "],[-1,1213,"  "]],[933,1278],[933,1260]]],[1556366646380,["GJX@GJXAIOU",[[1,965,"\t\t\n"],[-1,971,"   \t\t\n   "],[-1,1005,"  "],[-1,1034,"  "],[-1,1078,"  "],[-1,1082," "],[-1,1092," "],[-1,1135,"  "],[-1,1197,"  "]],[933,1260],[933,1242]]],[1556366646723,["GJX@GJXAIOU",[[-1,963,"  "],[-1,968,"  "],[-1,973," "],[-1,1003,"  "],[-1,1019,"  "],[-1,1066,"  "],[-1,1070,"  "],[-1,1130,"  "],[-1,1181,"  "]],[933,1242],[933,1226]]],[1556366647100,["GJX@GJXAIOU",[[-1,964,"\t"],[-1,966,"\t"],[-1,996,"  "],[-1,1012,"  "],[-1,1052,"  "],[-1,1064,"  "],[-1,1108,"  "],[-1,1166,"  "]],[933,1226],[933,1212]]],[1556366647545,["GJX@GJXAIOU",[[-1,963,"\t"],[-1,965,"\t"],[-1,992,"  "],[-1,1008,"  "],[-1,1046,"  "],[-1,1054,"  "],[-1,1098,"  "],[-1,1154,"  "]],[933,1212],[933,1198]]],[1556366648245,["GJX@GJXAIOU",[[-1,1004," \t\t"],[-1,1040," \t"],[-1,1044,"  "],[-1,1088,"  "],[-1,1142,"  "]],[933,1198],[933,1192]]],[1556366648650,["GJX@GJXAIOU",[[-1,1038," \t"],[-1,1081,"  "],[-1,1135,"  "],[-1,1187,"  "]],[933,1192],[933,1186]]],[1556366649528,["GJX@GJXAIOU",[[-1,1079," "],[-1,1129,"  "],[-1,1181,"  "]],[933,1186],[933,1182]]],[1556366655787,["GJX@GJXAIOU",[[-1,1193,"  "]],[1128,1195],[1128,1193]]],[1556366656152,["GJX@GJXAIOU",[[-1,1191,"  "]],[1128,1193],[1128,1191]]],[1556366656411,["GJX@GJXAIOU",[[-1,1189,"  "]],[1128,1191],[1128,1189]]],[1556366656692,["GJX@GJXAIOU",[[-1,1187,"  "]],[1128,1189],[1128,1187]]],[1556366656976,["GJX@GJXAIOU",[[-1,1185,"  "]],[1128,1187],[1128,1185]]],[1556366657305,["GJX@GJXAIOU",[[-1,1183,"  "]],[1128,1185],[1128,1183]]],[1556366657616,["GJX@GJXAIOU",[[-1,1181,"  "]],[1128,1183],[1128,1181]]],[1556366657936,["GJX@GJXAIOU",[[-1,1179,"  "]],[1128,1181],[1128,1179]]],[1556366658339,["GJX@GJXAIOU",[[-1,1178," "]],[1128,1179],[1128,1179]]],[1556366661771,["GJX@GJXAIOU",[[-1,1177,"\n"]],[1178,1178],[1177,1177]]],[1556366665555,["GJX@GJXAIOU",[[-1,964,"\n"]],[964,964],[963,963]]],[1556366945446,["GJX@GJXAIOU",[[-1,1259,"  "],[-1,1266,"  "],[-1,1293," "],[-1,1303," "],[-1,1362,"  "],[-1,1394,"  "]],[1252,1437],[1252,1427]]],[1556366945937,["GJX@GJXAIOU",[[-1,1257,"  "],[-1,1264,"  "],[-1,1289," "],[-1,1297," "],[-1,1354,"  "],[-1,1386,"  "]],[1252,1427],[1252,1417]]],[1556366946260,["GJX@GJXAIOU",[[-1,1255,"  "],[-1,1262,"  "],[-1,1285," "],[-1,1291," "],[-1,1346,"  "],[-1,1378,"  "]],[1252,1417],[1252,1407]]],[1556366946744,["GJX@GJXAIOU",[[-1,1253,"  "],[-1,1260,"  "],[-1,1281," "],[-1,1285," "],[-1,1338,"  "],[-1,1370,"  "]],[1252,1407],[1252,1397]]],[1556366952113,["GJX@GJXAIOU",[[-1,1278,"  "],[-1,1330,"  "],[-1,1362,"  "]],[1280,1397],[1278,1391]]],[1556366952507,["GJX@GJXAIOU",[[-1,1277," \t\t"],[-1,1326,"  "],[-1,1358,"  "]],[1278,1391],[1277,1387]]],[1556366954088,["GJX@GJXAIOU",[[-1,1321,"  "],[-1,1353,"  "]],[1277,1387],[1277,1383]]],[1556366954578,["GJX@GJXAIOU",[[-1,1352,"  "]],[1277,1383],[1277,1381]]],[1556366955180,["GJX@GJXAIOU",[[-1,1351," "]],[1277,1381],[1277,1381]]],[1556366961604,["GJX@GJXAIOU",[[1,1378,"4. \n"]],[1377,1377],[1381,1381]]],[1556366961745,["GJX@GJXAIOU",[[-1,1378,"4. "]],[1381,1381],[1379,1379]]],[1556367972387,["GJX@GJXAIOU",[[-1,1392,"\t"],[-1,1421,"\t"],[-1,1423,"\t"],[-1,1464,"\t"],[-1,1504,"\t"],[-1,1506,"\t"],[-1,1513,"\t"],[-1,1539,"\t"],[-1,1541,"\t"],[-1,1548,"\t"],[-1,1585,"\t"],[-1,1615,"\t"]],[1393,1645],[1392,1633]]],[1556369236662,["GJX@GJXAIOU",[[1,693,"\n"]],[692,692],[693,693]]],[1556369237162,["GJX@GJXAIOU",[[1,694,"\n"]],[693,693],[694,694]]],[1556369237196,["GJX@GJXAIOU",[[1,695,"\n"]],[694,694],[695,695]]],[1556369237229,["GJX@GJXAIOU",[[1,696,"\n"]],[695,695],[696,696]]],[1556369237270,["GJX@GJXAIOU",[[1,697,"\n"]],[696,696],[697,697]]],[1556369237298,["GJX@GJXAIOU",[[1,698,"\n"]],[697,697],[698,698]]],[1556369237325,["GJX@GJXAIOU",[[1,699,"\n"]],[698,698],[699,699]]],[1556369237370,["GJX@GJXAIOU",[[1,700,"\n"]],[699,699],[700,700]]],[1556369237395,["GJX@GJXAIOU",[[1,701,"\n"]],[700,700],[701,701]]],[1556369249075,["GJX@GJXAIOU",[[1,693,"·"]],[693,693],[694,694]]],[1556369249693,["GJX@GJXAIOU",[[-1,693,"·"]],[694,694],[693,693]]],[1556369251334,["GJX@GJXAIOU",[[1,693,"```"]],[693,693],[696,696]]],[1556369251361,["GJX@GJXAIOU",[[1,696,"language\n```\n"]],[696,696],[696,704]]],[1556369252406,["GJX@GJXAIOU",[[-1,696,"language"],[1,704,"j"]],[696,704],[697,697]]],[1556369252902,["GJX@GJXAIOU",[[1,697,"ava"]],[697,697],[700,700]]],[1556369253389,["GJX@GJXAIOU",[[1,701,"\n"]],[700,700],[701,701]]],[1556369254562,["GJX@GJXAIOU",[[1,701,"class Hero {\n\tint blood;\n\t//父类中私有化的成员变量\n\tprivate int power;\n\t\n\tpublic Hero() {\n\t\tSystem.out.println(\"父类 Hero类的无参构造方法\");\n\t}\n\t\n\tpublic Hero(int blood, int power) {\n\t\tthis.blood = blood;\n\t\tthis.power = power;\n\t\tSystem.out.println(\"父类 Hero类的有参构造方法\");\n\t}\n\t\n\t\n\t//父类Hero类里面成员方法\n\tpublic void D() {\n\t\tSystem.out.println(\"闪现~~~\");\n\t}\n\t\n\tpublic void F() {\n\t\tSystem.out.println(\"屏障~~~\");\n\t}\n\t\n\tprivate void test() {\n\t\tSystem.out.println(\"父类中私有化的方法\");\n\t}\n}\n\n//extends 继承的关键字，表示当前VN类是Hero类的一个子类，或者说Hero类是VN类的父类\nclass VN extends Hero {\n\tString name; //子类的成员变量 英雄名字\n\t\n\tpublic VN() {\n\t\tSystem.out.println(\"子类 VN类的无参构造方法\");\n\t}\n\t\n\tpublic VN(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"子类VN类的有参构造方法\");\n\t}\n\t\n\t//子类自己的方法\n\tpublic void R() {\n\t\tSystem.out.println(\"终极时刻\");\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//创建一个父类的对象\n//\t\tHero h = new Hero();\n//\t\tSystem.out.println(h);\n\t\t\n\t\t//创建一个继承于Hero类的一个子类 VN类对象\n\t\tVN vn = new VN();\n\t\tSystem.out.println(vn);\n\t\t\n\t\t//子类对象使用继承于父类得来的【非私有化】成员变量\n\t\tvn.blood = 100;\n\t\t\n\t\t//子类不能使用父类中的私有化成员变量\n\t\t//vn.power = 200;\n\t\t\n\t\t//子类使用自己的成员变量\n\t\tvn.name = \"暗夜猎手\";\n\t\t\n\t\t//子类自己的成员方法\n\t\tvn.R();\n\t\t\n\t\t//子类通过继承获取到使用父类【非私有化】成员方法的权限\n\t\tvn.D();\n\t\tvn.F();\n\t\t\n\t\t//子类不能使用父类的私有化的成员方法，也就说没有继承的权限\n\t\t//vn.test();\n\t}\n}\n"]],[701,701],[1946,1946]]],[1556369267505,["GJX@GJXAIOU",[[1,2647,"\n"]],[2646,2646],[2647,2647]]],[1556369267616,["GJX@GJXAIOU",[[1,2648,"\n"]],[2647,2647],[2648,2648]]],[1556369267749,["GJX@GJXAIOU",[[1,2649,"\n"]],[2648,2648],[2649,2649]]],[1556369268133,["GJX@GJXAIOU",[[1,2650,"\n"]],[2649,2649],[2650,2650]]],[1556369268217,["GJX@GJXAIOU",[[1,2651,"\n"]],[2650,2650],[2651,2651]]],[1556369268358,["GJX@GJXAIOU",[[1,2652,"\n"]],[2651,2651],[2652,2652]]],[1556369281064,["GJX@GJXAIOU",[[1,2646,"```"]],[2646,2646],[2649,2649]]],[1556369281092,["GJX@GJXAIOU",[[1,2649,"language\n```\n"]],[2649,2649],[2649,2657]]],[1556369281912,["GJX@GJXAIOU",[[-1,2649,"language"],[1,2657,"j"]],[2649,2657],[2650,2650]]],[1556369282343,["GJX@GJXAIOU",[[1,2650,"ava"]],[2650,2650],[2653,2653]]],[1556369282462,["GJX@GJXAIOU",[[1,2654,"\n"]],[2653,2653],[2654,2654]]],[1556369283478,["GJX@GJXAIOU",[[1,2654,"class Fu {\n\tint age;\n\tString name;\n\t\n\tpublic Fu() {\n\t\tSystem.out.println(\"父类无参的构造方法\");\n\t}\n\t\n\tpublic Fu(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\t \n\t\tthis.name = name;\n\t\tSystem.out.println(\"父类有参数的构造方法\");\n\t}\n\t\n\tpublic void work() {\n\t\tSystem.out.println(\"父亲是机械工程师~~~\");\n\t}\n}\n\nclass Zi extends Fu {\n\tString hobby;\n\t\n\tpublic Zi() {\n\t\t//这里没有用super来调用任何的父类中的构造方法\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\t\n\tpublic Zi(String hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic Zi(String name, int age, String hobby) {\n\t\t//name 属性，和age属性是从父类继承而来，既然是父类的属性，就用父类的方法来初始化\n\t\tsuper(age, name); //这里相对于调用父类中两个参数的的构造方法，来初始化父类中的成员变量\n\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic void play() {\n\t\twork();\n\t\tSystem.out.println(\"玩吃鸡~~~\");\n\t}\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\t//这里是匿名对象调用方法\n\t\tnew Zi().play();\n\t}\n\t\n}\n"]],[2654,2654],[3513,3513]]],[1556369298600,["GJX@GJXAIOU",[[1,3778,"\n\t"]],[3778,3778],[3780,3780]]],[1556369298758,["GJX@GJXAIOU",[[-1,3779,"\t"],[1,3780,"\n\n"]],[3780,3780],[3780,3780]]],[1556369298886,["GJX@GJXAIOU",[[1,3781,"\n"]],[3780,3780],[3781,3781]]],[1556369306968,["GJX@GJXAIOU",[[-1,3781,"\n"],[1,3782,"·"]],[3781,3781],[3782,3782]]],[1556369307360,["GJX@GJXAIOU",[[1,3782,"··"]],[3782,3782],[3784,3784]]],[1556369308039,["GJX@GJXAIOU",[[-1,3782,"··"]],[3784,3784],[3782,3782]]],[1556369308164,["GJX@GJXAIOU",[[-1,3781,"·"],[1,3782,"\n"]],[3782,3782],[3781,3781]]],[1556369309167,["GJX@GJXAIOU",[[-1,3781,"\n"],[1,3782,"`"]],[3781,3781],[3782,3782]]],[1556369309575,["GJX@GJXAIOU",[[1,3782,"``"]],[3782,3782],[3784,3784]]],[1556369309604,["GJX@GJXAIOU",[[1,3784,"language\n```\n"]],[3784,3784],[3784,3792]]],[1556369310486,["GJX@GJXAIOU",[[-1,3784,"language"],[1,3792,"j"]],[3784,3792],[3785,3785]]],[1556369310936,["GJX@GJXAIOU",[[1,3785,"ava"]],[3785,3785],[3788,3788]]],[1556369311182,["GJX@GJXAIOU",[[1,3789,"\n"]],[3788,3788],[3789,3789]]],[1556369312509,["GJX@GJXAIOU",[[1,3789,"class Father {\n\tint age;\n\tString name;\n\t\n\tpublic Father() {}\n\t\n\tpublic Father(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"喜欢钓鱼\");\n\t}\n}\n\nclass Son extends Father {\n\tint id;\n\t\n\tpublic Son() {}\n\t\n\tpublic Son(int age, String name, int id) {\n\t\t//age和name是父类的成员变量，所以使用父类的构造方法来初始化\n\t\tsuper(age, name);\n\t\t//子类的成员变量，自己处理\n\t\tthis.id = id;\n\t}\n\t\n\t@Override\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"大吉大利，今晚吃鸡\");\n\t}\n\t\n}\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tFather f = new Father(60, \"王健林\");\n\t\t\n\t\tf.playGame();\n\t\t\n\t\tSon s = new Son(29, \"王思聪\", 666);\n\t\t\n\t\ts.playGame();\n\t}\n}\n\n"]],[3789,3789],[4528,4528]]],[1556369349669,["GJX@GJXAIOU",[[1,4533,"\n"]],[4532,4532],[4533,4533]]],[1556369349821,["GJX@GJXAIOU",[[1,4534,"\n"]],[4533,4533],[4534,4534]]],[1556369350037,["GJX@GJXAIOU",[[1,4535,"\n"]],[4534,4534],[4535,4535]]],[1556369350278,["GJX@GJXAIOU",[[1,4536,"\n"]],[4535,4535],[4536,4536]]],[1556369351929,["GJX@GJXAIOU",[[-1,4536,"\n"],[1,4537,"l"]],[4536,4536],[4537,4537]]],[1556369352522,["GJX@GJXAIOU",[[1,4537,"ianxi"]],[4537,4537],[4542,4542]]],[1556369353615,["GJX@GJXAIOU",[[-1,4537,"ianxi"]],[4542,4542],[4537,4537]]],[1556369353701,["GJX@GJXAIOU",[[-1,4536,"l"],[1,4537,"\n"]],[4537,4537],[4536,4536]]],[1556369353847,["GJX@GJXAIOU",[[-1,4536,"\n"]],[4536,4536],[4535,4535]]],[1556369353965,["GJX@GJXAIOU",[[-1,4535,"\n"]],[4535,4535],[4534,4534]]],[1556369362668,["GJX@GJXAIOU",[[-1,4534,"\n"],[1,4535,"示例"]],[4534,4534],[4536,4536]]],[1556369410085,["GJX@GJXAIOU",[[1,4536,"\n\n"]],[4536,4536],[4537,4537]]],[1556369410664,["GJX@GJXAIOU",[[1,4538,"\n"]],[4537,4537],[4538,4538]]],[1556369411635,["GJX@GJXAIOU",[[-1,4538,"\n"],[1,4539,"`"]],[4538,4538],[4539,4539]]],[1556369412033,["GJX@GJXAIOU",[[1,4539,"``"]],[4539,4539],[4541,4541]]],[1556369412063,["GJX@GJXAIOU",[[1,4541,"language\n```\n"]],[4541,4541],[4541,4549]]],[1556369413280,["GJX@GJXAIOU",[[-1,4541,"language"],[1,4549,"j"]],[4541,4549],[4542,4542]]],[1556369413719,["GJX@GJXAIOU",[[1,4542,"ava"]],[4542,4542],[4545,4545]]],[1556369413832,["GJX@GJXAIOU",[[1,4546,"\n"]],[4545,4545],[4546,4546]]],[1556369415192,["GJX@GJXAIOU",[[1,4546,"package com.qfedu.a_extends;\n\n/*\n \t定义游戏人物类\n \t 都有QWE方法\n \t \n \t 不同的英雄有不同的QWE方法\n \t \n \t 皮城女警 Q 和平使者 W 约德尔诱捕器  E 90口径绳网\n \t 维鲁斯  Q 穿刺之箭 W 枯萎箭袋  E 恶灵箭雨\n */\n\nclass LOLHero {\n\tString name;\n\t\n\tpublic LOLHero() {}\n\t\n\tpublic LOLHero(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void Q() {\n\t\tSystem.out.println(\"Q技能\");\n\t}\n\t\n\tpublic void W() {\n\t\tSystem.out.println(\"W技能\");\n\t}\n\t\n\tpublic void E() {\n\t\tSystem.out.println(\"E技能\");\n\t}\n}\n\nclass Caitlyn extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"和平使者\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"约德尔诱捕器\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"90口径绳网\");\n\t}\n}\n\nclass Verus extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"穿刺之箭\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"腐败箭袋\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"恶灵箭雨\");\n\t}\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tVerus nimingjun = new Verus();\n\t\t\n\t\tnimingjun.Q();\n\t\tnimingjun.E();\n\t\tnimingjun.W();\n\t\t\n\t\tCaitlyn yuye = new Caitlyn();\n\t\t\n\t\tyuye.Q();\n\t\tyuye.E();\n\t\tyuye.W();\n\t\t\n\t}\n}\n"]],[4546,4546],[5655,5655]]],[1556369464526,["GJX@GJXAIOU",[[-1,8,"  代码中的继承关系：\n\n \t在游戏开发中，大量的使用【继承】，来简化代码，提供开发效率\n \t\n \t用代码来实现继承关系:\nextends"]],[8,77],[8,8]]],[1556369465373,["GJX@GJXAIOU",[[-1,8,"\n"]],[8,8],[7,7]]],[1556369475397,["GJX@GJXAIOU",[[-1,120,"    "]],[124,124],[120,120]]],[1556369475832,["GJX@GJXAIOU",[[-1,119,"\n"]],[120,120],[119,119]]],[1556369477391,["GJX@GJXAIOU",[[1,119,","]],[119,119],[120,120]]],[1556369481448,["GJX@GJXAIOU",[[-1,137,"。有其父必有其子"]],[137,145],[137,137]]],[1556369481871,["GJX@GJXAIOU",[[1,137,"."]],[137,137],[138,138]]],[1556369483536,["GJX@GJXAIOU",[[-1,137,"."]],[138,138],[137,137]]],[1556369484152,["GJX@GJXAIOU",[[1,137,"。"]],[137,137],[138,138]]],[1556369486438,["GJX@GJXAIOU",[[-1,119,","]],[120,120],[119,119]]],[1556369486996,["GJX@GJXAIOU",[[1,119,"，"]],[119,119],[120,120]]],[1556369504477,["GJX@GJXAIOU",[[-1,275,"    \t"]],[280,280],[275,275]]],[1556369504928,["GJX@GJXAIOU",[[-1,274,"\n"]],[275,275],[274,274]]],[1556369519110,["GJX@GJXAIOU",[[-1,366,"\n      \t"]],[366,374],[366,366]]],[1556369528854,["GJX@GJXAIOU",[[-1,402,"  "],[-1,409,"  "],[-1,459,"  "]],[398,483],[398,477]]],[1556369529304,["GJX@GJXAIOU",[[-1,400,"  "],[-1,455,"  "]],[398,477],[398,473]]],[1556369529647,["GJX@GJXAIOU",[[-1,398,"  "],[-1,453,"  "]],[398,473],[398,469]]],[1556369538766,["GJX@GJXAIOU",[[-1,471," "],[-1,484," "]],[472,582],[472,582]]],[1556369547504,["GJX@GJXAIOU",[[-1,533,"例如：\nAnimal 动物类\nDog 狗\nCat 猫\n绿萝 这里不属于动物类，不能使用继承关系"]],[533,580],[533,533]]],[1556369646876,["GJX@GJXAIOU",[[1,1794,"![继承内存分析图]($resource/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.jpg)"]],[1794,1794],[1884,1884]]],[1556369739512,["GJX@GJXAIOU",[[-1,1890,"\n"]],[1890,1890],[1889,1889]]],[1556369739646,["GJX@GJXAIOU",[[-1,1889,"\n"]],[1889,1889],[1888,1888]]],[1556369739807,["GJX@GJXAIOU",[[-1,1888,"\n"]],[1888,1888],[1887,1887]]],[1556369740062,["GJX@GJXAIOU",[[-1,1887,"\n"]],[1887,1887],[1886,1886]]],[1556369749062,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1556369749197,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1556369749294,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1556369755689,["GJX@GJXAIOU",[[1,1,"# 继承"]],[1,1],[5,5]]],[1556369760626,["GJX@GJXAIOU",[[1,10,"一、"]],[10,10],[12,12]]],[1556369769187,["GJX@GJXAIOU",[[1,1899,"二、"]],[1899,1899],[1901,1901]]],[1556369777707,["GJX@GJXAIOU",[[1,3466,"三、"]],[3466,3466],[3468,3468]]],[1556369786664,["GJX@GJXAIOU",[[-1,3476,"\t"],[-1,3504,"\t"],[-1,3506,"\t"],[-1,3545,"\t"],[-1,3584,"\t"],[-1,3591,"\t"],[-1,3616,"\t"],[-1,3623,"\t"],[-1,3659,"\t"],[-1,3689,"\t"]],[3471,3719],[3471,3709]]],[1556369798854,["GJX@GJXAIOU",[[-1,3476,"父亲，业余活动，喜欢钓鱼，但是儿子业余活动，喜欢吃鸡\n"]],[3476,3503],[3476,3476]]],[1556369800230,["GJX@GJXAIOU",[[-1,3476,"\n"]],[3477,3477],[3476,3476]]],[1556369828350,["GJX@GJXAIOU",[[1,1959,"，大师"]],[1959,1959],[1962,1962]]],[1556369828886,["GJX@GJXAIOU",[[-1,1960,"大师"]],[1962,1962],[1960,1960]]],[1556369834187,["GJX@GJXAIOU",[[1,1960,"但是子类可以使用"]],[1960,1960],[1968,1968]]],[1556369865056,["GJX@GJXAIOU",[[1,2176,"；``"]],[2176,2176],[2179,2179]]],[1556369874979,["GJX@GJXAIOU",[[1,2178,"super.成员方法；"]],[2178,2178],[2189,2189]]],[1556369876881,["GJX@GJXAIOU",[[-1,2188,"；"]],[2189,2189],[2188,2188]]],[1556369877593,["GJX@GJXAIOU",[[1,2188,";"]],[2188,2188],[2189,2189]]],[1556369881752,["GJX@GJXAIOU",[[1,2217,"`"]],[2217,2217],[2218,2218]]],[1556369882682,["GJX@GJXAIOU",[[1,2231,"`"]],[2231,2231],[2232,2232]]],[1556369894489,["GJX@GJXAIOU",[[1,2445,"\n                      "]],[2445,2445],[2468,2468]]],[1556369897998,["GJX@GJXAIOU",[[-1,2447,"                      "]],[2468,2468],[2446,2446]]],[1556369900807,["GJX@GJXAIOU",[[-1,2446," "]],[2447,2447],[2447,2447]]],[1556369903383,["GJX@GJXAIOU",[[1,2450,"\n"]],[2450,2450],[2451,2451]]],[1556369972417,["GJX@GJXAIOU",[[1,3614,"**"],[1,3648,"**"]],[3614,3648],[3614,3652]]]],null,"GJX@GJXAIOU"],["6f95a066-b397-450f-bf11-a6d0f32b9841",1556411728442,"\n# 继承\n\n## 一、继承初步\n在代码中继承使用的关键字是extends，如果一个类通过extends关键字继承了其他类，那么\n就可以说，当前类是其他类的子类，或者其他类是当前类父类\n\n【发现】\n1.  在创建子类对象的时候，会首先自动调用父类的构造方法，这里是为了初始化属于父类的成员变量。\n2. 父类中的【非私有化】成员变量，子类可以通过继承之后得到使用的权限 \n3. 父类中的【非私有化】成员方法，子类可以通过继承之后得到使用的权限\n4. 在父类中用private修饰的私有化成员方法，这个私有化成员方法不能通过继承该类的子类对象来调用\n       原因:私有化的成员方法，只能在当前类的内部使用，外部没有任何使用权限\n5. 父类中用private修饰的私有化成员变量，这个私有化的成员变量不能通过继承该类的子类对象来调用\n     原因：私有化的成员变量，只能在当前类的内部使用，外部没有任何使用权限\n【总结】\n在继承中，父类里没有私有化的成员变量和成员方法都可以被子类继承，但是一旦私有化，子类就无法继承\n这些属性或者方法， 原理是封装思想。\n\n【使用继承的注意事项】\n继承可以节省代码，提高开发效率，但是在使用继承的时候，前提条件就是，两个类之间的确包含有继承的关系\n\n\n```java\nclass Hero {\n\tint blood;\n\t//父类中私有化的成员变量\n\tprivate int power;\n\t\n\tpublic Hero() {\n\t\tSystem.out.println(\"父类 Hero类的无参构造方法\");\n\t}\n\t\n\tpublic Hero(int blood, int power) {\n\t\tthis.blood = blood;\n\t\tthis.power = power;\n\t\tSystem.out.println(\"父类 Hero类的有参构造方法\");\n\t}\n\t\n\t\n\t//父类Hero类里面成员方法\n\tpublic void D() {\n\t\tSystem.out.println(\"闪现~~~\");\n\t}\n\t\n\tpublic void F() {\n\t\tSystem.out.println(\"屏障~~~\");\n\t}\n\t\n\tprivate void test() {\n\t\tSystem.out.println(\"父类中私有化的方法\");\n\t}\n}\n\n//extends 继承的关键字，表示当前VN类是Hero类的一个子类，或者说Hero类是VN类的父类\nclass VN extends Hero {\n\tString name; //子类的成员变量 英雄名字\n\t\n\tpublic VN() {\n\t\tSystem.out.println(\"子类 VN类的无参构造方法\");\n\t}\n\t\n\tpublic VN(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"子类VN类的有参构造方法\");\n\t}\n\t\n\t//子类自己的方法\n\tpublic void R() {\n\t\tSystem.out.println(\"终极时刻\");\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//创建一个父类的对象\n//\t\tHero h = new Hero();\n//\t\tSystem.out.println(h);\n\t\t\n\t\t//创建一个继承于Hero类的一个子类 VN类对象\n\t\tVN vn = new VN();\n\t\tSystem.out.println(vn);\n\t\t\n\t\t//子类对象使用继承于父类得来的【非私有化】成员变量\n\t\tvn.blood = 100;\n\t\t\n\t\t//子类不能使用父类中的私有化成员变量\n\t\t//vn.power = 200;\n\t\t\n\t\t//子类使用自己的成员变量\n\t\tvn.name = \"暗夜猎手\";\n\t\t\n\t\t//子类自己的成员方法\n\t\tvn.R();\n\t\t\n\t\t//子类通过继承获取到使用父类【非私有化】成员方法的权限\n\t\tvn.D();\n\t\tvn.F();\n\t\t\n\t\t//子类不能使用父类的私有化的成员方法，也就说没有继承的权限\n\t\t//vn.test();\n\t}\n}\n\n```\n\n![继承内存分析图]($resource/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.jpg)\n\n\n\n## 二、super关键字 \n  子类在创建对象时候，首先会自动调用父类的构造方法\n\n【前提】\n父类的构造方法，不能被子类继承，但是子类可以使用\n\n[问题]\n在子类中如果通过构造方法初始化从父类继承而来的成员变量，可能会存在一定的隐患，如果直接使用\nthis.成员变量赋值操作，会导致父类中的成员变量不符合一些业务逻辑，或者生活逻辑。\n\n[考虑]\n能否借助于父类的构造方法，来初始化原本属于父类的成员变量\n\n[解决]\n借助于 super 关键字  调用父类方法的关键字\n\nsuper关键字的注意事项：\n1.  super关键字可以在子类中直接调用父类的成员方法；`super.成员方法;`\n\n2. 【重点】使用super调用父类的构造方法：\n`super(实际参数); `\nJava编译器会根据不同的参数类型，来调用不同的父类中的构造方法\n\n3. 使用super关键字调用父类的构造方法的时候，要求必须当前代码块的第一行\n\n4. this关键字调用构造方法，和super关键字调用构造方法，不能同时出现在一个代码块里面\n\n5. 在子类的构造方法中，如果没有通过super指定调用父类的构造方法，那么Java编译器会帮我们自动调用父类的无参构造方法来使用。\n                     \n[建议]\n存在继承关系下， 父类中最好提供一个无参的构造方法供子类使用\n\n\n[回顾]\n\tthis关键字调用构造方法的格式：\n1. this(实际参数)  Java编译器会根据不同的参数类型，来调用不同的构造方法\n2. 如果用this调用构造方法，必须在当前代码块的第一行\n3. this关键字调用构造方法的时候，不能相互调用\n\n```java\nclass Fu {\n\tint age;\n\tString name;\n\t\n\tpublic Fu() {\n\t\tSystem.out.println(\"父类无参的构造方法\");\n\t}\n\t\n\tpublic Fu(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\t \n\t\tthis.name = name;\n\t\tSystem.out.println(\"父类有参数的构造方法\");\n\t}\n\t\n\tpublic void work() {\n\t\tSystem.out.println(\"父亲是机械工程师~~~\");\n\t}\n}\n\nclass Zi extends Fu {\n\tString hobby;\n\t\n\tpublic Zi() {\n\t\t//这里没有用super来调用任何的父类中的构造方法\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\t\n\tpublic Zi(String hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic Zi(String name, int age, String hobby) {\n\t\t//name 属性，和age属性是从父类继承而来，既然是父类的属性，就用父类的方法来初始化\n\t\tsuper(age, name); //这里相对于调用父类中两个参数的的构造方法，来初始化父类中的成员变量\n\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic void play() {\n\t\twork();\n\t\tSystem.out.println(\"玩吃鸡~~~\");\n\t}\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\t//这里是匿名对象调用方法\n\t\tnew Zi().play();\n\t}\n\t\n}\n\n```\n\n\n\n\n\n\n\n## 三、重写\n[问题]\n父类中存在一个playGame()的方法，这个方法是比较符合父类的实际情况\n子类继承之后，也能调用playGame()，但是这个方法不太符合子类的情况\n\n[期望]\n需要让继承而来的方法， 更加适合子类的实际情况\n\n【重写】\n**子类中存在和父类同名，同参数，同返回值的方法，这种情况称之为【重写】**\n通常会使用【注解】@Override 开启严格的重写检查\n如果父类中没有这个方法，使用@Override检查会报错\n\n\n```java\nclass Father {\n\tint age;\n\tString name;\n\t\n\tpublic Father() {}\n\t\n\tpublic Father(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"喜欢钓鱼\");\n\t}\n}\n\nclass Son extends Father {\n\tint id;\n\t\n\tpublic Son() {}\n\t\n\tpublic Son(int age, String name, int id) {\n\t\t//age和name是父类的成员变量，所以使用父类的构造方法来初始化\n\t\tsuper(age, name);\n\t\t//子类的成员变量，自己处理\n\t\tthis.id = id;\n\t}\n\t\n\t@Override\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"大吉大利，今晚吃鸡\");\n\t}\n\t\n}\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tFather f = new Father(60, \"王健林\");\n\t\t\n\t\tf.playGame();\n\t\t\n\t\tSon s = new Son(29, \"王思聪\", 666);\n\t\t\n\t\ts.playGame();\n\t}\n}\n\n\n```\n\n示例\n\n```java\npackage com.qfedu.a_extends;\n\n/*\n \t定义游戏人物类\n \t 都有QWE方法\n \t \n \t 不同的英雄有不同的QWE方法\n \t \n \t 皮城女警 Q 和平使者 W 约德尔诱捕器  E 90口径绳网\n \t 维鲁斯  Q 穿刺之箭 W 枯萎箭袋  E 恶灵箭雨\n */\n\nclass LOLHero {\n\tString name;\n\t\n\tpublic LOLHero() {}\n\t\n\tpublic LOLHero(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void Q() {\n\t\tSystem.out.println(\"Q技能\");\n\t}\n\t\n\tpublic void W() {\n\t\tSystem.out.println(\"W技能\");\n\t}\n\t\n\tpublic void E() {\n\t\tSystem.out.println(\"E技能\");\n\t}\n}\n\nclass Caitlyn extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"和平使者\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"约德尔诱捕器\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"90口径绳网\");\n\t}\n}\n\nclass Verus extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"穿刺之箭\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"腐败箭袋\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"恶灵箭雨\");\n\t}\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tVerus nimingjun = new Verus();\n\t\t\n\t\tnimingjun.Q();\n\t\tnimingjun.E();\n\t\tnimingjun.W();\n\t\t\n\t\tCaitlyn yuye = new Caitlyn();\n\t\t\n\t\tyuye.Q();\n\t\tyuye.E();\n\t\tyuye.W();\n\t\t\n\t}\n}\n\n```\n",[[1556411725610,["GJX@GJXAIOU",[[-1,64,"\n"]],[65,65],[64,64]]],[1556412069873,["GJX@GJXAIOU",[[1,406,"     \n"]],[405,405],[411,411]]],[1556412082647,["GJX@GJXAIOU",[[-1,464,"\n"]],[465,465],[464,464]]],[1556412083723,["GJX@GJXAIOU",[[1,464,"."]],[464,464],[465,465]]],[1556412085314,["GJX@GJXAIOU",[[-1,464,"."]],[465,465],[464,464]]],[1556412086026,["GJX@GJXAIOU",[[1,464,"。"]],[464,464],[465,465]]],[1556412398006,["GJX@GJXAIOU",[[1,1892,"%202"]],[1834,1834],[1901,1901]]],[1556412420343,["GJX@GJXAIOU",[[1,1922,"**"],[1,1946,"**"]],[1922,1946],[1922,1950]]],[1556412423852,["GJX@GJXAIOU",[[1,1957,"**"],[1,1981,"**"]],[1957,1981],[1957,1985]]],[1556412434818,["GJX@GJXAIOU",[[-1,2037,"\n"]],[2038,2038],[2037,2037]]],[1556412449902,["GJX@GJXAIOU",[[1,2086,"**"],[1,2114,"**"]],[2086,2114],[2086,2118]]],[1556412486427,["GJX@GJXAIOU",[[1,2139,"："]],[2139,2139],[2140,2140]]],[1556412945384,["GJX@GJXAIOU",[[1,2472,"**"],[1,2502,"**"]],[2472,2502],[2472,2506]]]],null,"GJX@GJXAIOU"],["78e5e81a-912a-43c2-87b3-b5aef255f7ef",1556435604030,"\n# 继承\n\n## 一、继承初步\n在代码中继承使用的关键字是extends，如果一个类通过extends关键字继承了其他类，那么就可以说，当前类是其他类的子类，或者其他类是当前类父类\n\n【发现】\n1.  在创建子类对象的时候，会首先自动调用父类的构造方法，这里是为了初始化属于父类的成员变量。\n2. 父类中的【非私有化】成员变量，子类可以通过继承之后得到使用的权限 \n3. 父类中的【非私有化】成员方法，子类可以通过继承之后得到使用的权限\n4. 在父类中用private修饰的私有化成员方法，这个私有化成员方法不能通过继承该类的子类对象来调用\n       原因:私有化的成员方法，只能在当前类的内部使用，外部没有任何使用权限\n5. 父类中用private修饰的私有化成员变量，这个私有化的成员变量不能通过继承该类的子类对象来调用\n     原因：私有化的成员变量，只能在当前类的内部使用，外部没有任何使用权限\n     \n【总结】\n在继承中，父类里没有私有化的成员变量和成员方法都可以被子类继承，但是一旦私有化，子类就无法继承。这些属性或者方法， 原理是封装思想。\n\n【使用继承的注意事项】\n继承可以节省代码，提高开发效率，但是在使用继承的时候，前提条件就是，两个类之间的确包含有继承的关系\n\n\n```java\nclass Hero {\n\tint blood;\n\t//父类中私有化的成员变量\n\tprivate int power;\n\t\n\tpublic Hero() {\n\t\tSystem.out.println(\"父类 Hero类的无参构造方法\");\n\t}\n\t\n\tpublic Hero(int blood, int power) {\n\t\tthis.blood = blood;\n\t\tthis.power = power;\n\t\tSystem.out.println(\"父类 Hero类的有参构造方法\");\n\t}\n\t\n\t\n\t//父类Hero类里面成员方法\n\tpublic void D() {\n\t\tSystem.out.println(\"闪现~~~\");\n\t}\n\t\n\tpublic void F() {\n\t\tSystem.out.println(\"屏障~~~\");\n\t}\n\t\n\tprivate void test() {\n\t\tSystem.out.println(\"父类中私有化的方法\");\n\t}\n}\n\n//extends 继承的关键字，表示当前VN类是Hero类的一个子类，或者说Hero类是VN类的父类\nclass VN extends Hero {\n\tString name; //子类的成员变量 英雄名字\n\t\n\tpublic VN() {\n\t\tSystem.out.println(\"子类 VN类的无参构造方法\");\n\t}\n\t\n\tpublic VN(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"子类VN类的有参构造方法\");\n\t}\n\t\n\t//子类自己的方法\n\tpublic void R() {\n\t\tSystem.out.println(\"终极时刻\");\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//创建一个父类的对象\n//\t\tHero h = new Hero();\n//\t\tSystem.out.println(h);\n\t\t\n\t\t//创建一个继承于Hero类的一个子类 VN类对象\n\t\tVN vn = new VN();\n\t\tSystem.out.println(vn);\n\t\t\n\t\t//子类对象使用继承于父类得来的【非私有化】成员变量\n\t\tvn.blood = 100;\n\t\t\n\t\t//子类不能使用父类中的私有化成员变量\n\t\t//vn.power = 200;\n\t\t\n\t\t//子类使用自己的成员变量\n\t\tvn.name = \"暗夜猎手\";\n\t\t\n\t\t//子类自己的成员方法\n\t\tvn.R();\n\t\t\n\t\t//子类通过继承获取到使用父类【非私有化】成员方法的权限\n\t\tvn.D();\n\t\tvn.F();\n\t\t\n\t\t//子类不能使用父类的私有化的成员方法，也就说没有继承的权限\n\t\t//vn.test();\n\t}\n}\n\n```\n\n![继承内存分析图]($resource/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE%202.jpg)\n\n\n\n## 二、super关键字 \n  **子类在创建对象时候，首先会自动调用父类的构造方法**\n\n【前提】\n**父类的构造方法，不能被子类继承，但是子类可以使用**\n\n[问题]\n在子类中如果通过构造方法初始化从父类继承而来的成员变量，可能会存在一定的隐患，如果直接使用this.成员变量赋值操作，会导致父类中的成员变量不符合一些业务逻辑，或者生活逻辑。\n\n[考虑]\n**能否借助于父类的构造方法，来初始化原本属于父类的成员变量**\n\n[解决]\n借助于 super 关键字 ： 调用父类方法的关键字\n\nsuper关键字的注意事项：\n1.  super关键字可以在子类中直接调用父类的成员方法；`super.成员方法;`\n\n2. 【重点】使用super调用父类的构造方法：\n`super(实际参数); `\nJava编译器会根据不同的参数类型，来调用不同的父类中的构造方法\n\n3. 使用super关键字调用父类的构造方法的时候，要求必须当前代码块的第一行\n\n4. this关键字调用构造方法，和super关键字调用构造方法，不能同时出现在一个代码块里面\n\n5. 在子类的构造方法中，如果没有通过super指定调用父类的构造方法，那么Java编译器会帮我们自动调用父类的无参构造方法来使用。\n                     \n[建议]\n**存在继承关系下， 父类中最好提供一个无参的构造方法供子类使用**\n\n\n[回顾]\n\tthis关键字调用构造方法的格式：\n1. this(实际参数)  Java编译器会根据不同的参数类型，来调用不同的构造方法\n2. 如果用this调用构造方法，必须在当前代码块的第一行\n3. this关键字调用构造方法的时候，不能相互调用\n\n```java\nclass Fu {\n\tint age;\n\tString name;\n\t\n\tpublic Fu() {\n\t\tSystem.out.println(\"父类无参的构造方法\");\n\t}\n\t\n\tpublic Fu(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\t \n\t\tthis.name = name;\n\t\tSystem.out.println(\"父类有参数的构造方法\");\n\t}\n\t\n\tpublic void work() {\n\t\tSystem.out.println(\"父亲是机械工程师~~~\");\n\t}\n}\n\nclass Zi extends Fu {\n\tString hobby;\n\t\n\tpublic Zi() {\n\t\t//这里没有用super来调用任何的父类中的构造方法\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\t\n\tpublic Zi(String hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic Zi(String name, int age, String hobby) {\n\t\t//name 属性，和age属性是从父类继承而来，既然是父类的属性，就用父类的方法来初始化\n\t\tsuper(age, name); //这里相对于调用父类中两个参数的的构造方法，来初始化父类中的成员变量\n\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic void play() {\n\t\twork();\n\t\tSystem.out.println(\"玩吃鸡~~~\");\n\t}\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\t//这里是匿名对象调用方法\n\t\tnew Zi().play();\n\t}\n\t\n}\n\n```\n\n\n\n\n\n\n\n## 三、重写\n[问题]\n父类中存在一个playGame()的方法，这个方法是比较符合父类的实际情况\n子类继承之后，也能调用playGame()，但是这个方法不太符合子类的情况\n\n[期望]\n需要让继承而来的方法， 更加适合子类的实际情况\n\n【重写】\n**子类中存在和父类同名，同参数，同返回值的方法，这种情况称之为【重写】**\n通常会使用【注解】@Override 开启严格的重写检查\n如果父类中没有这个方法，使用@Override检查会报错\n\n\n```java\nclass Father {\n\tint age;\n\tString name;\n\t\n\tpublic Father() {}\n\t\n\tpublic Father(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"喜欢钓鱼\");\n\t}\n}\n\nclass Son extends Father {\n\tint id;\n\t\n\tpublic Son() {}\n\t\n\tpublic Son(int age, String name, int id) {\n\t\t//age和name是父类的成员变量，所以使用父类的构造方法来初始化\n\t\tsuper(age, name);\n\t\t//子类的成员变量，自己处理\n\t\tthis.id = id;\n\t}\n\t\n\t@Override\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"大吉大利，今晚吃鸡\");\n\t}\n\t\n}\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tFather f = new Father(60, \"王健林\");\n\t\t\n\t\tf.playGame();\n\t\t\n\t\tSon s = new Son(29, \"王思聪\", 666);\n\t\t\n\t\ts.playGame();\n\t}\n}\n\n\n```\n\n示例\n\n```java\npackage com.qfedu.a_extends;\n\n/*\n \t定义游戏人物类\n \t 都有QWE方法\n \t \n \t 不同的英雄有不同的QWE方法\n \t \n \t 皮城女警 Q 和平使者 W 约德尔诱捕器  E 90口径绳网\n \t 维鲁斯  Q 穿刺之箭 W 枯萎箭袋  E 恶灵箭雨\n */\n\nclass LOLHero {\n\tString name;\n\t\n\tpublic LOLHero() {}\n\t\n\tpublic LOLHero(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void Q() {\n\t\tSystem.out.println(\"Q技能\");\n\t}\n\t\n\tpublic void W() {\n\t\tSystem.out.println(\"W技能\");\n\t}\n\t\n\tpublic void E() {\n\t\tSystem.out.println(\"E技能\");\n\t}\n}\n\nclass Caitlyn extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"和平使者\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"约德尔诱捕器\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"90口径绳网\");\n\t}\n}\n\nclass Verus extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"穿刺之箭\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"腐败箭袋\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"恶灵箭雨\");\n\t}\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tVerus nimingjun = new Verus();\n\t\t\n\t\tnimingjun.Q();\n\t\tnimingjun.E();\n\t\tnimingjun.W();\n\t\t\n\t\tCaitlyn yuye = new Caitlyn();\n\t\t\n\t\tyuye.Q();\n\t\tyuye.E();\n\t\tyuye.W();\n\t\t\n\t}\n}\n\n```\n",[[1556435546302,["GJX@GJXAIOU",[[1,2607,"  "]],[2633,2633],[2635,2635]]]],null,"GJX@GJXAIOU"],["c5c728af-5843-4a54-8033-92f2c0515849",1563347572915,"\n# 继承\n\n## 一、继承初步\n在代码中继承使用的关键字是extends，如果一个类通过extends关键字继承了其他类，那么就可以说，当前类是其他类的子类，或者其他类是当前类父类\n\n【发现】\n1.  在创建子类对象的时候，会首先自动调用父类的构造方法，这里是为了初始化属于父类的成员变量。\n2. 父类中的【非私有化】成员变量，子类可以通过继承之后得到使用的权限 \n3. 父类中的【非私有化】成员方法，子类可以通过继承之后得到使用的权限\n4. 在父类中用private修饰的私有化成员方法，这个私有化成员方法不能通过继承该类的子类对象来调用\n       原因:私有化的成员方法，只能在当前类的内部使用，外部没有任何使用权限\n5. 父类中用private修饰的私有化成员变量，这个私有化的成员变量不能通过继承该类的子类对象来调用\n     原因：私有化的成员变量，只能在当前类的内部使用，外部没有任何使用权限\n     \n【总结】\n在继承中，父类里没有私有化的成员变量和成员方法都可以被子类继承，但是一旦私有化，子类就无法继承。这些属性或者方法， 原理是封装思想。\n\n【使用继承的注意事项】\n继承可以节省代码，提高开发效率，但是在使用继承的时候，前提条件就是，两个类之间的确包含有继承的关系\n\n\n```java\nclass Hero {\n\tint blood;\n\t//父类中私有化的成员变量\n\tprivate int power;\n\t\n\tpublic Hero() {\n\t\tSystem.out.println(\"父类 Hero类的无参构造方法\");\n\t}\n\t\n\tpublic Hero(int blood, int power) {\n\t\tthis.blood = blood;\n\t\tthis.power = power;\n\t\tSystem.out.println(\"父类 Hero类的有参构造方法\");\n\t}\n\t\n\t\n\t//父类Hero类里面成员方法\n\tpublic void D() {\n\t\tSystem.out.println(\"闪现~~~\");\n\t}\n\t\n\tpublic void F() {\n\t\tSystem.out.println(\"屏障~~~\");\n\t}\n\t\n\tprivate void test() {\n\t\tSystem.out.println(\"父类中私有化的方法\");\n\t}\n}\n\n//extends 继承的关键字，表示当前VN类是Hero类的一个子类，或者说Hero类是VN类的父类\nclass VN extends Hero {\n\tString name; //子类的成员变量 英雄名字\n\t\n\tpublic VN() {\n\t\tSystem.out.println(\"子类 VN类的无参构造方法\");\n\t}\n\t\n\tpublic VN(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"子类VN类的有参构造方法\");\n\t}\n\t\n\t//子类自己的方法\n\tpublic void R() {\n\t\tSystem.out.println(\"终极时刻\");\n\t}\n\t\n}\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\t//创建一个父类的对象\n//\t\tHero h = new Hero();\n//\t\tSystem.out.println(h);\n\t\t\n\t\t//创建一个继承于Hero类的一个子类 VN类对象\n\t\tVN vn = new VN();\n\t\tSystem.out.println(vn);\n\t\t\n\t\t//子类对象使用继承于父类得来的【非私有化】成员变量\n\t\tvn.blood = 100;\n\t\t\n\t\t//子类不能使用父类中的私有化成员变量\n\t\t//vn.power = 200;\n\t\t\n\t\t//子类使用自己的成员变量\n\t\tvn.name = \"暗夜猎手\";\n\t\t\n\t\t//子类自己的成员方法\n\t\tvn.R();\n\t\t\n\t\t//子类通过继承获取到使用父类【非私有化】成员方法的权限\n\t\tvn.D();\n\t\tvn.F();\n\t\t\n\t\t//子类不能使用父类的私有化的成员方法，也就说没有继承的权限\n\t\t//vn.test();\n\t}\n}\n\n```\n\n![继承内存分析图]($resource/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE%202.jpg)\n\n\n\n## 二、super关键字 \n  **子类在创建对象时候，首先会自动调用父类的构造方法**\n\n【前提】\n**父类的构造方法，不能被子类继承，但是子类可以使用**\n\n[问题]\n在子类中如果通过构造方法初始化从父类继承而来的成员变量，可能会存在一定的隐患，如果直接使用this.成员变量赋值操作，会导致父类中的成员变量不符合一些业务逻辑，或者生活逻辑。\n\n[考虑]\n**能否借助于父类的构造方法，来初始化原本属于父类的成员变量**\n\n[解决]\n借助于 super 关键字 ： 调用父类方法的关键字\n\nsuper关键字的注意事项：\n1.  super关键字可以在子类中直接调用父类的成员方法；`super.成员方法;`\n\n2. 【重点】使用super调用父类的构造方法：\n`super(实际参数); `\nJava编译器会根据不同的参数类型，来调用不同的父类中的构造方法\n\n3. 使用super关键字调用父类的构造方法的时候，要求必须当前代码块的第一行\n\n4. this关键字调用构造方法，和super关键字调用构造方法，不能同时出现在一个代码块里面\n\n5. 在子类的构造方法中，如果没有通过super指定调用父类的构造方法，那么Java编译器会帮我们自动调用父类的无参构造方法来使用。\n                     \n[建议]\n**存在继承关系下， 父类中最好提供一个无参的构造方法供子类使用**\n\n\n[回顾]\n\tthis关键字调用构造方法的格式：\n1. this(实际参数)  Java编译器会根据不同的参数类型，来调用不同的构造方法\n2. 如果用this调用构造方法，必须在当前代码块的第一行\n  3. this关键字调用构造方法的时候，不能相互调用\n\n```java\nclass Fu {\n\tint age;\n\tString name;\n\t\n\tpublic Fu() {\n\t\tSystem.out.println(\"父类无参的构造方法\");\n\t}\n\t\n\tpublic Fu(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\t \n\t\tthis.name = name;\n\t\tSystem.out.println(\"父类有参数的构造方法\");\n\t}\n\t\n\tpublic void work() {\n\t\tSystem.out.println(\"父亲是机械工程师~~~\");\n\t}\n}\n\nclass Zi extends Fu {\n\tString hobby;\n\t\n\tpublic Zi() {\n\t\t//这里没有用super来调用任何的父类中的构造方法\n\t\tSystem.out.println(\"子类无参构造方法\");\n\t}\n\t\n\tpublic Zi(String hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic Zi(String name, int age, String hobby) {\n\t\t//name 属性，和age属性是从父类继承而来，既然是父类的属性，就用父类的方法来初始化\n\t\tsuper(age, name); //这里相对于调用父类中两个参数的的构造方法，来初始化父类中的成员变量\n\n\t\tthis.hobby = hobby;\n\t}\n\t\n\tpublic void play() {\n\t\twork();\n\t\tSystem.out.println(\"玩吃鸡~~~\");\n\t}\t\n}\n\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\t//这里是匿名对象调用方法\n\t\tnew Zi().play();\n\t}\n\t\n}\n\n```\n\n\n\n\n\n\n\n## 三、重写\n[问题]\n父类中存在一个playGame()的方法，这个方法是比较符合父类的实际情况\n子类继承之后，也能调用playGame()，但是这个方法不太符合子类的情况\n\n[期望]\n需要让继承而来的方法， 更加适合子类的实际情况\n\n【重写】\n**子类中存在和父类同名，同参数，同返回值的方法，这种情况称之为【重写】**\n通常会使用【注解】@Override 开启严格的重写检查\n如果父类中没有这个方法，使用@Override检查会报错\n\n\n```java\nclass Father {\n\tint age;\n\tString name;\n\t\n\tpublic Father() {}\n\t\n\tpublic Father(int age, String name) {\n\t\tif (age < 0) {\n\t\t\tthis.age = 30;\n\t\t} else {\n\t\t\tthis.age = age;\n\t\t}\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"喜欢钓鱼\");\n\t}\n}\n\nclass Son extends Father {\n\tint id;\n\t\n\tpublic Son() {}\n\t\n\tpublic Son(int age, String name, int id) {\n\t\t//age和name是父类的成员变量，所以使用父类的构造方法来初始化\n\t\tsuper(age, name);\n\t\t//子类的成员变量，自己处理\n\t\tthis.id = id;\n\t}\n\t\n\t@Override\n\tpublic void playGame() {\n\t\tSystem.out.println(this.name + \"大吉大利，今晚吃鸡\");\n\t}\n\t\n}\n\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tFather f = new Father(60, \"王健林\");\n\t\t\n\t\tf.playGame();\n\t\t\n\t\tSon s = new Son(29, \"王思聪\", 666);\n\t\t\n\t\ts.playGame();\n\t}\n}\n\n\n```\n\n示例\n\n```java\npackage com.qfedu.a_extends;\n\n/*\n \t定义游戏人物类\n \t 都有QWE方法\n \t \n \t 不同的英雄有不同的QWE方法\n \t \n \t 皮城女警 Q 和平使者 W 约德尔诱捕器  E 90口径绳网\n \t 维鲁斯  Q 穿刺之箭 W 枯萎箭袋  E 恶灵箭雨\n */\n\nclass LOLHero {\n\tString name;\n\t\n\tpublic LOLHero() {}\n\t\n\tpublic LOLHero(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void Q() {\n\t\tSystem.out.println(\"Q技能\");\n\t}\n\t\n\tpublic void W() {\n\t\tSystem.out.println(\"W技能\");\n\t}\n\t\n\tpublic void E() {\n\t\tSystem.out.println(\"E技能\");\n\t}\n}\n\nclass Caitlyn extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"和平使者\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"约德尔诱捕器\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"90口径绳网\");\n\t}\n}\n\nclass Verus extends LOLHero{\n\t@Override\n\tpublic void Q() {\n\t\tSystem.out.println(\"穿刺之箭\");\n\t}\n\t\n\t@Override\n\tpublic void W() {\n\t\tSystem.out.println(\"腐败箭袋\");\n\t}\n\t\n\t@Override\n\tpublic void E() {\n\t\tSystem.out.println(\"恶灵箭雨\");\n\t}\t\n}\n\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tVerus nimingjun = new Verus();\n\t\t\n\t\tnimingjun.Q();\n\t\tnimingjun.E();\n\t\tnimingjun.W();\n\t\t\n\t\tCaitlyn yuye = new Caitlyn();\n\t\t\n\t\tyuye.Q();\n\t\tyuye.E();\n\t\tyuye.W();\n\t\t\n\t}\n}\n\n```\n",[[1563347549222,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: blue\n---\n\n@toc"]],[0,0],[42,42]]],[1563347551847,["GJX@GJXAIOU",[[1,43,"\n"]],[42,42],[43,43]]],[1563347556383,["GJX@GJXAIOU",[[1,46,"Java "]],[46,46],[50,50]]],[1563347558798,["GJX@GJXAIOU",[[1,50,"Day12"]],[50,50],[55,55]]],[1563347559046,["GJX@GJXAIOU",[[1,56," "]],[55,55],[56,56]]],[1563347913007,["GJX@GJXAIOU",[[1,147,"- "]],[147,147],[149,149]]],[1563347924349,["GJX@GJXAIOU",[[1,159,"=="],[1,183,"=="]],[159,183],[159,187]]],[1563347975224,["GJX@GJXAIOU",[[1,472,"- "]],[472,472],[474,474]]],[1563347979191,["GJX@GJXAIOU",[[1,547,"- "]],[547,547],[549,549]]],[1563347992990,["GJX@GJXAIOU",[[-1,612,"\n"]],[612,612],[611,611]]],[1563347998400,["GJX@GJXAIOU",[[1,611,"示例代码："]],[611,611],[616,616]]],[1563348001542,["GJX@GJXAIOU",[[1,611,"- "]],[611,611],[613,613]]],[1563348004958,["GJX@GJXAIOU",[[1,611,"\n"]],[611,611],[612,612]]],[1563348482662,["GJX@GJXAIOU",[[1,628,"package lianxi;\n\n"],[1,874,"\n\t}\n\t\n\tpublic Hero(String name) {\n\t\tSystem.out.println(\"父类有参构造方法\");\n\t\t"],[1,1607,"VN cVn = new VN(\"zhangsan\");\n\t\tSystem.out.println(cVn);\n\t\t\n\t\t"],[-1,1872,"\n"]],[628,1873],[2020,2020]]],[1563348490343,["GJX@GJXAIOU",[[1,181,"无参"]],[181,181],[183,183]]],[1563348497086,["GJX@GJXAIOU",[[1,2028,"\n"]],[2026,2026],[2027,2027]]],[1563348501934,["GJX@GJXAIOU",[[1,2027,"程序结果："]],[2027,2027],[2032,2032]]],[1563348502204,["GJX@GJXAIOU",[[1,2034,"\n"]],[2032,2032],[2033,2033]]],[1563348504679,["GJX@GJXAIOU",[[1,2033,"```java"]],[2033,2033],[2040,2040]]],[1563348504899,["GJX@GJXAIOU",[[1,2042,"\n"]],[2040,2040],[2041,2041]]],[1563348505981,["GJX@GJXAIOU",[[1,2043,"\n"]],[2041,2041],[2042,2042]]],[1563348506494,["GJX@GJXAIOU",[[1,2042,"```"]],[2042,2042],[2045,2045]]],[1563348515837,["GJX@GJXAIOU",[[1,2041,"父类 Hero类的无参构造方法\n子类 VN类的无参构造方法\nlianxi.VN@7c53a9eb\n父类 Hero类的无参构造方法\n子类VN类的有参构造方法\nlianxi.VN@ed17bee\n终极时刻\n闪现~~~\n屏障~~~"]],[2041,2041],[2153,2153]]],[1563348636270,["GJX@GJXAIOU",[[-1,181,"无参"]],[183,183],[181,181]]],[1563348700039,["GJX@GJXAIOU",[[-1,2271,"**"],[-1,2297,"**"]],[2273,2297],[2271,2295]]],[1563348701840,["GJX@GJXAIOU",[[1,2271,"=="],[1,2295,"=="]],[2271,2295],[2271,2299]]],[1563348704094,["GJX@GJXAIOU",[[-1,2300,"\n"]],[2300,2300],[2299,2299]]],[1563348711541,["GJX@GJXAIOU",[[-1,2305,"**"],[-1,2331,"**"]],[2307,2331],[2305,2329]]],[1563348713476,["GJX@GJXAIOU",[[-1,2304,"\n"]],[2305,2305],[2304,2304]]],[1563348722459,["GJX@GJXAIOU",[[1,2301,"=="],[1,2328,"=="]],[2301,2328],[2301,2332]]],[1563348725226,["GJX@GJXAIOU",[[-1,2301,"=="]],[2301,2303],[2301,2301]]],[1563348727837,["GJX@GJXAIOU",[[1,2300,"=="]],[2300,2300],[2302,2302]]],[1563348783862,["GJX@GJXAIOU",[[-1,2584,"\n"]],[2585,2585],[2584,2584]]],[1563348791573,["GJX@GJXAIOU",[[1,2519,"=="],[1,2544,"=="]],[2519,2544],[2519,2548]]],[1563348845674,["GJX@GJXAIOU",[[1,2731,"=="],[1,2793,"=="]],[2731,2793],[2731,2797]]],[1563348858976,["GJX@GJXAIOU",[[-1,2825,"\n"]],[2826,2826],[2825,2825]]],[1563349345036,["GJX@GJXAIOU",[[1,3862,"cheng"]],[3862,3862],[3867,3867]]],[1563349346229,["GJX@GJXAIOU",[[-1,3862,"cheng"]],[3867,3867],[3862,3862]]],[1563349349041,["GJX@GJXAIOU",[[1,3862,"程序结果："]],[3862,3862],[3867,3867]]],[1563349349262,["GJX@GJXAIOU",[[1,3874,"\n"]],[3867,3867],[3868,3868]]],[1563349351543,["GJX@GJXAIOU",[[1,3868,"```java"]],[3868,3868],[3875,3875]]],[1563349351711,["GJX@GJXAIOU",[[1,3882,"\n"]],[3875,3875],[3876,3876]]],[1563349352304,["GJX@GJXAIOU",[[1,3883,"\n"]],[3876,3876],[3877,3877]]],[1563349353000,["GJX@GJXAIOU",[[1,3877,"```"]],[3877,3877],[3880,3880]]],[1563349354341,["GJX@GJXAIOU",[[1,3876,"父类无参的构造方法\n子类无参构造方法\n父亲是机械工程师~~~\n玩吃鸡~~~"]],[3876,3876],[3913,3913]]],[1563349358197,["GJX@GJXAIOU",[[-1,3923,"\n"]],[3922,3922],[3921,3921]]],[1563349358342,["GJX@GJXAIOU",[[-1,3922,"\n"]],[3921,3921],[3920,3920]]],[1563349358509,["GJX@GJXAIOU",[[-1,3921,"\n"]],[3920,3920],[3919,3919]]],[1563349359752,["GJX@GJXAIOU",[[1,3919,"---"]],[3919,3919],[3922,3922]]],[1563349371463,["GJX@GJXAIOU",[[1,2252,"---"]],[2252,2252],[2255,2255]]],[1563349462806,["GJX@GJXAIOU",[[-1,4052,"**"],[-1,4088,"**"]],[4054,4090],[4052,4086]]],[1563349463951,["GJX@GJXAIOU",[[1,4052,"=="],[1,4086,"=="]],[4052,4086],[4052,4090]]],[1563349772782,["GJX@GJXAIOU",[[1,4904,"\n"]],[4902,4902],[4903,4903]]],[1563349774212,["GJX@GJXAIOU",[[1,4903,"chegn"]],[4903,4903],[4908,4908]]],[1563349775413,["GJX@GJXAIOU",[[-1,4903,"chegn"]],[4908,4908],[4903,4903]]],[1563349781042,["GJX@GJXAIOU",[[1,4903,"程序运行结果："]],[4903,4903],[4910,4910]]],[1563349781303,["GJX@GJXAIOU",[[1,4912,"\n"]],[4910,4910],[4911,4911]]],[1563349783929,["GJX@GJXAIOU",[[1,4911,"```java"]],[4911,4911],[4918,4918]]],[1563349784104,["GJX@GJXAIOU",[[1,4920,"\n"]],[4918,4918],[4919,4919]]],[1563349785670,["GJX@GJXAIOU",[[1,4921,"\n"]],[4919,4919],[4920,4920]]],[1563349786328,["GJX@GJXAIOU",[[1,4920,"```"]],[4920,4920],[4923,4923]]],[1563349787584,["GJX@GJXAIOU",[[1,4919,"王健林喜欢钓鱼\n王思聪大吉大利，今晚吃鸡"]],[4919,4919],[4939,4939]]],[1563349812462,["GJX@GJXAIOU",[[-1,2963,"  "]],[2965,2965],[2963,2963]]],[1563349815119,["GJX@GJXAIOU",[[1,2991,"\n"]],[2990,2990],[2991,2991]]],[1563349829268,["GJX@GJXAIOU",[[1,4149,"chong"]],[4149,4149],[4154,4154]]],[1563349830206,["GJX@GJXAIOU",[[-1,4149,"chong"]],[4154,4154],[4149,4149]]],[1563349836539,["GJX@GJXAIOU",[[1,4149,"重写代码示例一；"]],[4149,4149],[4157,4157]]],[1563349838078,["GJX@GJXAIOU",[[-1,4156,"；"]],[4157,4157],[4156,4156]]],[1563349839391,["GJX@GJXAIOU",[[1,4156,"："]],[4156,4156],[4157,4157]]],[1563349846465,["GJX@GJXAIOU",[[-1,4952,"示例"],[1,4954,"重写"]],[4952,4952],[4954,4954]]],[1563349849353,["GJX@GJXAIOU",[[1,4954,"代码示例二："]],[4954,4954],[4960,4960]]],[1563349889121,["GJX@GJXAIOU",[[1,6084,"\n"]],[6083,6083],[6084,6084]]],[1563349890841,["GJX@GJXAIOU",[[-1,6084,"\n"],[1,6085,"程序"]],[6084,6084],[6086,6086]]],[1563349893898,["GJX@GJXAIOU",[[1,6086,"运行结果："]],[6086,6086],[6091,6091]]],[1563349894261,["GJX@GJXAIOU",[[1,6091,"\n\n"]],[6091,6091],[6092,6092]]],[1563349895248,["GJX@GJXAIOU",[[-1,6092,"\n"],[1,6093,"`"]],[6092,6092],[6093,6093]]],[1563349895729,["GJX@GJXAIOU",[[1,6093,"``"]],[6093,6093],[6095,6095]]],[1563349895760,["GJX@GJXAIOU",[[1,6095,"language\n```\n"]],[6095,6095],[6095,6103]]],[1563349897000,["GJX@GJXAIOU",[[-1,6095,"language"],[1,6103,"j"]],[6095,6103],[6096,6096]]],[1563349897463,["GJX@GJXAIOU",[[1,6096,"ava"]],[6096,6096],[6099,6099]]],[1563349897911,["GJX@GJXAIOU",[[1,6100,"\n"]],[6099,6099],[6100,6100]]],[1563349899158,["GJX@GJXAIOU",[[1,6100,"穿刺之箭\n恶灵箭雨\n腐败箭袋\n和平使者\n90口径绳网\n约德尔诱捕器"]],[6100,6100],[6133,6133]]]],null,"GJX@GJXAIOU"]]}