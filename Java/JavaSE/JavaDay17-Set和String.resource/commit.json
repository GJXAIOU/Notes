{"compress":true,"commitItems":[["a17976a8-8bf2-42e4-8838-6ff305fd6d0b",1561595789189,"## 复习\n    ---| Collection 集合的总接口\n        add(Object o) addAll(Collection c) remove(Object o) clear() removeAll(Collection c)\n        retainAll(Collection c) contains(Object o) containsAll(Collection c) isEmpty() \n        equals(Collection c) iterator() size() toArray()\n    ------| List 接口  有序 可重复\n            add(int index, Object o) addAll(int index, Collection c) indexOf(Object o)\n            lastIndexOf(Object o) get(int index) subList(int fromIndex, int toIndex)\n            set(int index, Object o) listIterator() \n    ---------| ArrayList  \n                底层维护的是一个Object类型的数组，默认的元素个数为10 \n                特征： 增删慢，查找快\n                    ensureCapacity(int minCapacity);\n                    trimToSize();\n    ---------| LinkedList \n                底层维护的是一个链表\n                特征： 增删快，查找慢\n                    addFrist(Object o) addLast(Object o) getFrist() getLast() removeFirst() \n                    removeLast()  \n    ---------| Vector (了解)\n                和ArrayList是类似的，基本上常用的方法也是一致\n                    线程安全，效率低！！！\n    ------| Set\n    \n    \n    迭代的方法：\n        Iterator \n            next() hasNext() remove()\n        ListIterator\n            add(Object o) set(Object o) nextIndex()\n            \n\n    \n            ",[[1561595753206,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561595753349,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561595753501,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1561595758847,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1561595759406,["GJX@GJXAIOU",[[-1,0,"-"]],[1,1],[0,0]]],[1561595766649,["GJX@GJXAIOU",[[-1,11,"  "],[-1,36,"  "],[-1,134,"  "],[-1,216,"  "],[-1,275,"  "],[-1,301,"  "],[-1,398,"  "],[-1,473," "],[-1,484," "],[-1,528,"  "],[-1,553," "],[-1,568," "],[-1,601,"  "],[-1,647,"  "],[-1,700,"  "],[-1,716,"  "],[-1,743," "],[-1,758," "],[-1,770,"  "],[-1,798,"  "],[-1,909,"  "],[-1,926," "],[-1,929," "],[-1,953,"  "],[-1,1015,"  "],[-1,1029,"  "],[-1,1047,"  "],[-1,1050,"  "],[-1,1057,"  "],[-1,1066," "],[-1,1073," "],[-1,1084,"  "],[-1,1128,"  "],[-1,1143,"  "]],[10,1194],[9,1136]]],[1561595776862,["GJX@GJXAIOU",[[-1,9,"  "],[-1,12,"--|"]],[9,9],[10,10]]],[1561595780568,["GJX@GJXAIOU",[[-1,260,"  "],[-1,263,"-----|"]],[260,260],[261,261]]],[1561595784456,["GJX@GJXAIOU",[[-1,497,"  "],[-1,500,"--------|"]],[497,497],[498,498]]],[1561595784670,["GJX@GJXAIOU",[[1,499," "]],[498,498],[499,499]]],[1561595785957,["GJX@GJXAIOU",[[-1,499," "]],[499,499],[498,498]]],[1561595790976,["GJX@GJXAIOU",[[-1,666,"  "],[-1,669,"--------| "]],[666,666],[667,667]]],[1561595791441,["GJX@GJXAIOU",[[1,667," "]],[667,667],[668,668]]],[1561595795695,["GJX@GJXAIOU",[[-1,855,"  "],[-1,858,"--------|"]],[855,855],[856,856]]],[1561595795855,["GJX@GJXAIOU",[[1,857," "]],[856,856],[857,857]]],[1561595798103,["GJX@GJXAIOU",[[-1,942,"  "],[-1,945,"-----| "]],[942,942],[943,943]]],[1561595798247,["GJX@GJXAIOU",[[1,943," "]],[943,943],[944,944]]],[1561595803132,["GJX@GJXAIOU",[[-1,1108,"       "]],[1110,1110],[1103,1103]]],[1561595803317,["GJX@GJXAIOU",[[-1,1102,"\n"]],[1103,1103],[1102,1102]]],[1561595804215,["GJX@GJXAIOU",[[-1,1103,"    "]],[1102,1102],[1098,1098]]],[1561595804390,["GJX@GJXAIOU",[[-1,1097,"\n"]],[1098,1098],[1097,1097]]]],null,"GJX@GJXAIOU"],["3bf2b21b-cd3d-4d13-afac-a9ca75ab410e",1561707892771,"\n\n\n## 复习\n- Collection 集合的总接口\n      add(Object o) addAll(Collection c) remove(Object o) clear() removeAll(Collection c)\n      retainAll(Collection c) contains(Object o) containsAll(Collection c) isEmpty() \n      equals(Collection c) iterator() size() toArray()\n- List 接口  有序 可重复\n          add(int index, Object o) addAll(int index, Collection c) indexOf(Object o)\n          lastIndexOf(Object o) get(int index) subList(int fromIndex, int toIndex)\n          set(int index, Object o) listIterator() \n- ArrayList  \n              底层维护的是一个Object类型的数组，默认的元素个数为10 \n              特征： 增删慢，查找快\n                  ensureCapacity(int minCapacity);\n                  trimToSize();\n- LinkedList \n              底层维护的是一个链表\n              特征： 增删快，查找慢\n                  addFrist(Object o) addLast(Object o) getFrist() getLast() removeFirst() \n                  removeLast()  \n-  Vector (了解)\n              和ArrayList是类似的，基本上常用的方法也是一致\n                  线程安全，效率低！！！\n- Set\n  \n  \n  迭代的方法：\n      Iterator \n          next() hasNext() remove()\n      ListIterator\n          add(Object o) set(Object o) nextIndex()\n            \n     ",[[1561707853254,["GJX@GJXAIOU",[[1,3,"\n"]],[1,1],[2,2]]],[1561707853377,["GJX@GJXAIOU",[[1,4,"\n"]],[2,2],[3,3]]],[1561707853494,["GJX@GJXAIOU",[[1,5,"\n"]],[3,3],[4,4]]],[1561707853607,["GJX@GJXAIOU",[[1,6,"\n"]],[4,4],[5,5]]],[1561707859495,["GJX@GJXAIOU",[[1,2,"@#"]],[2,2],[4,4]]],[1561707860581,["GJX@GJXAIOU",[[-1,2,"@#"]],[4,4],[2,2]]],[1561707867975,["GJX@GJXAIOU",[[1,2,"## colll"]],[2,2],[10,10]]],[1561707868576,["GJX@GJXAIOU",[[-1,9,"l"]],[10,10],[9,9]]],[1561707870839,["GJX@GJXAIOU",[[1,9,"ection]"]],[9,9],[16,16]]],[1561707871750,["GJX@GJXAIOU",[[-1,15,"]"]],[16,16],[15,15]]],[1561707872473,["GJX@GJXAIOU",[[1,20,"\n"]],[15,15],[16,16]]],[1561707876048,["GJX@GJXAIOU",[[1,21,"\n"]],[16,16],[17,17]]],[1561707879334,["GJX@GJXAIOU",[[1,17,"-"]],[17,17],[18,18]]],[1561707879758,["GJX@GJXAIOU",[[-1,17,"-"]],[18,18],[17,17]]],[1561707885409,["GJX@GJXAIOU",[[1,17,"- containsa"]],[17,17],[28,28]]],[1561707886022,["GJX@GJXAIOU",[[-1,27,"a"]],[28,28],[27,27]]],[1561707892527,["GJX@GJXAIOU",[[1,27,", containAll,qi"]],[27,27],[42,42]]],[1561707893142,["GJX@GJXAIOU",[[-1,40,"qi"]],[42,42],[40,40]]],[1561707894625,["GJX@GJXAIOU",[[1,40,"equall"]],[40,40],[46,46]]],[1561707895182,["GJX@GJXAIOU",[[-1,45,"l"]],[46,46],[45,45]]],[1561707897702,["GJX@GJXAIOU",[[1,45,"d"]],[45,45],[46,46]]],[1561707898926,["GJX@GJXAIOU",[[-1,45,"d"]],[46,46],[45,45]]],[1561707900872,["GJX@GJXAIOU",[[1,45,"sfa"]],[45,45],[48,48]]],[1561707901656,["GJX@GJXAIOU",[[-1,46,"fa"]],[48,48],[46,46]]],[1561707902954,["GJX@GJXAIOU",[[1,46,"方法"]],[46,46],[48,48]]],[1561707902978,["GJX@GJXAIOU",[[1,46," "]],[48,48],[49,49]]],[1561707903537,["GJX@GJXAIOU",[[1,49,"；"]],[49,49],[50,50]]],[1561707905984,["GJX@GJXAIOU",[[1,51,"- \n"]],[50,50],[53,53]]],[1561707907662,["GJX@GJXAIOU",[[1,51,"  "]],[53,53],[55,55]]],[1561707909392,["GJX@GJXAIOU",[[1,55,"发现："]],[55,55],[58,58]]],[1561707911007,["GJX@GJXAIOU",[[1,59,"  - \n"]],[58,58],[63,63]]],[1561707912030,["GJX@GJXAIOU",[[1,61,"  "]],[63,63],[65,65]]],[1561707914715,["GJX@GJXAIOU",[[1,65,"Java语言"]],[65,65],[71,71]]],[1561707914740,["GJX@GJXAIOU",[[1,69," "]],[71,71],[72,72]]],[1561707930026,["GJX@GJXAIOU",[[1,72,"总，默认判断两个对象是否相等"]],[72,72],[86,86]]],[1561707931462,["GJX@GJXAIOU",[[-1,85,"等"]],[86,86],[85,85]]],[1561707951162,["GJX@GJXAIOU",[[1,85,"同的方式是：判断这两个对象的地址是否相同；"]],[85,85],[106,106]]],[1561707951414,["GJX@GJXAIOU",[[1,107,"    - \n"]],[106,106],[113,113]]],[1561707959273,["GJX@GJXAIOU",[[1,113,"在这里student"]],[113,113],[123,123]]],[1561707959298,["GJX@GJXAIOU",[[1,116," "]],[123,123],[124,124]]],[1561707962753,["GJX@GJXAIOU",[[1,124,"1对象"]],[124,124],[127,127]]],[1561707962777,["GJX@GJXAIOU",[[1,125," "]],[127,127],[128,128]]],[1561707966537,["GJX@GJXAIOU",[[1,128,"和new"]],[128,128],[132,132]]],[1561707966563,["GJX@GJXAIOU",[[1,129," "]],[132,132],[133,133]]],[1561707973363,["GJX@GJXAIOU",[[1,133," Student（）"]],[133,133],[143,143]]],[1561707976496,["GJX@GJXAIOU",[[1,142,"1 ，"]],[142,142],[145,145]]],[1561707977167,["GJX@GJXAIOU",[[-1,143," ，"]],[145,145],[143,143]]],[1561707979955,["GJX@GJXAIOU",[[1,143,", \""]],[143,143],[146,146]]],[1561707979980,["GJX@GJXAIOU",[[-1,145,"\""],[1,146,"“"]],[146,146],[146,146]]],[1561707981391,["GJX@GJXAIOU",[[1,146,"c"]],[146,146],[147,147]]],[1561707981970,["GJX@GJXAIOU",[[-1,146,"c"]],[147,147],[146,146]]],[1561707982941,["GJX@GJXAIOU",[[1,146,"成，"]],[146,146],[148,148]]],[1561707983727,["GJX@GJXAIOU",[[-1,147,"，"]],[148,148],[147,147]]],[1561707984924,["GJX@GJXAIOU",[[1,147,"空"]],[147,147],[148,148]]],[1561707985303,["GJX@GJXAIOU",[[-1,147,"空"]],[148,148],[147,147]]],[1561707987866,["GJX@GJXAIOU",[[1,147,"long"]],[147,147],[151,151]]],[1561707987890,["GJX@GJXAIOU",[[1,147," "]],[151,151],[152,152]]],[1561707989791,["GJX@GJXAIOU",[[-1,147," long"]],[152,152],[147,147]]],[1561707993760,["GJX@GJXAIOU",[[1,147,"龙\""]],[147,147],[149,149]]],[1561707997474,["GJX@GJXAIOU",[[-1,148,"\""],[1,149,"”;shi"]],[149,149],[154,154]]],[1561707998335,["GJX@GJXAIOU",[[-1,151,"shi"]],[154,154],[151,151]]],[1561708008386,["GJX@GJXAIOU",[[1,151,"是两个完全不同的对象；"]],[151,151],[162,162]]],[1561708009991,["GJX@GJXAIOU",[[1,163,"    - \n"]],[162,162],[169,169]]],[1561708011593,["GJX@GJXAIOU",[[-1,168," "]],[169,169],[168,168]]],[1561708072773,[null,[[1,149,"）"],[-1,150,"s"]],[149,149],[150,150]]],[1561708072773,[null,[[-1,149,"）"],[1,151,"s"]],[150,150],[149,149]]],[1561708016867,["GJX@GJXAIOU",[[1,168," 问题~"]],[168,168],[172,172]]],[1561708018535,["GJX@GJXAIOU",[[-1,165,"  ~"]],[172,172],[169,169]]],[1561708019746,["GJX@GJXAIOU",[[1,169,"："]],[169,169],[170,170]]],[1561708021079,["GJX@GJXAIOU",[[1,171,"  - \n"]],[170,170],[175,175]]],[1561708022425,["GJX@GJXAIOU",[[1,173,"  "]],[175,175],[177,177]]],[1561708029643,["GJX@GJXAIOU",[[1,177,"因为上面两个对象的"]],[177,177],[186,186]]],[1561708030823,["GJX@GJXAIOU",[[-1,185,"的"]],[186,186],[185,185]]],[1561708032851,["GJX@GJXAIOU",[[1,185,"里面按"]],[185,185],[188,188]]],[1561708033431,["GJX@GJXAIOU",[[-1,187,"按"]],[188,188],[187,187]]],[1561708065467,["GJX@GJXAIOU",[[1,187,"保存的数据其实是一样的，也是符合业务逻辑的，或者是符合生活逻辑的，实现在符合预防"]],[187,187],[227,227]]],[1561708066526,["GJX@GJXAIOU",[[-1,225,"预防"]],[227,227],[225,225]]],[1561708071203,["GJX@GJXAIOU",[[1,225,"语法的前提"]],[225,225],[230,230]]],[1561708132773,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561708132773,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561708131384,["GJX@GJXAIOU",[[1,230,"下，也符合生活逻辑；"]],[230,230],[240,240]]],[1561708192777,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561708192777,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561708133477,["GJX@GJXAIOU",[[1,241,"    - \n"]],[240,240],[247,247]]],[1561708163102,["GJX@GJXAIOU",[[-1,243,"  "]],[247,247],[245,245]]],[1561708168218,["GJX@GJXAIOU",[[1,245,"解决方法："]],[245,245],[250,250]]],[1561708169070,["GJX@GJXAIOU",[[1,251,"  - \n"]],[250,250],[255,255]]],[1561708170134,["GJX@GJXAIOU",[[1,253,"  "]],[255,255],[257,257]]],[1561708176177,["GJX@GJXAIOU",[[1,257,"重写equal"]],[257,257],[264,264]]],[1561708176202,["GJX@GJXAIOU",[[1,259," "]],[264,264],[265,265]]],[1561708179643,["GJX@GJXAIOU",[[1,265,"s和"]],[265,265],[267,267]]],[1561708179667,["GJX@GJXAIOU",[[1,266," "]],[267,267],[268,268]]],[1561708184612,["GJX@GJXAIOU",[[1,268,"hashCode"]],[268,268],[276,276]]],[1561708184638,["GJX@GJXAIOU",[[1,268," "]],[276,276],[277,277]]],[1561708186162,["GJX@GJXAIOU",[[1,277,"方法"]],[277,277],[279,279]]],[1561708186188,["GJX@GJXAIOU",[[1,277," "]],[279,279],[280,280]]],[1561708187448,["GJX@GJXAIOU",[[1,280,"；"]],[280,280],[281,281]]],[1561708187959,["GJX@GJXAIOU",[[1,282,"    - \n"]],[281,281],[288,288]]],[1561708252777,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561708252777,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561708250455,["GJX@GJXAIOU",[[1,288,"默认情况下："]],[288,288],[294,294]]],[1561708251639,["GJX@GJXAIOU",[[1,295,"    - \n"]],[294,294],[301,301]]],[1561708252117,["GJX@GJXAIOU",[[1,299,"  "]],[301,301],[303,303]]],[1561708312779,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561708312779,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561708259730,["GJX@GJXAIOU",[[1,303,"hashCode方法"]],[303,303],[313,313]]],[1561708259756,["GJX@GJXAIOU",[[1,311," "]],[313,313],[314,314]]],[1561708262988,["GJX@GJXAIOU",[[1,314,"在刺痛"]],[314,314],[317,317]]],[1561708265280,["GJX@GJXAIOU",[[-1,315,"刺痛"]],[317,317],[315,315]]],[1561708287220,["GJX@GJXAIOU",[[1,315,"系统默认情况下，是当前类的对象"]],[315,315],[330,330]]],[1561708372780,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561708372780,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561708335660,["GJX@GJXAIOU",[[1,330,"在内存地址"]],[330,330],[335,335]]],[1561708339515,["GJX@GJXAIOU",[[1,333,"中"]],[333,333],[334,334]]],[1561708348063,["GJX@GJXAIOU",[[1,336,"的十进制数；"]],[336,336],[342,342]]],[1561708348445,["GJX@GJXAIOU",[[1,343,"      - \n"]],[342,342],[351,351]]],[1561708356180,["GJX@GJXAIOU",[[1,351,"equals方法"]],[351,351],[359,359]]],[1561708356204,["GJX@GJXAIOU",[[1,357," "]],[359,359],[360,360]]],[1561708367353,["GJX@GJXAIOU",[[1,360,"是两个对象相互比较的法则；"]],[360,360],[373,373]]],[1561711564774,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561711564774,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561711539941,["GJX@GJXAIOU",[[1,375,"```"]],[375,375],[378,378]]],[1561711539966,["GJX@GJXAIOU",[[1,378,"language\n```\n"]],[378,378],[378,386]]],[1561711541259,["GJX@GJXAIOU",[[-1,378,"language"],[1,386,"j"]],[378,386],[379,379]]],[1561711541675,["GJX@GJXAIOU",[[1,379,"ava"]],[379,379],[382,382]]],[1561711541749,["GJX@GJXAIOU",[[1,383,"\n"]],[382,382],[383,383]]],[1561711543651,["GJX@GJXAIOU",[[1,344,"\n      "]],[344,344],[351,351]]],[1561711545915,["GJX@GJXAIOU",[[-1,344,"\n"]],[344,344],[344,344]]],[1561711548660,["GJX@GJXAIOU",[[1,380,"daima"]],[380,380],[385,385]]],[1561711549554,["GJX@GJXAIOU",[[-1,380,"daima"]],[385,385],[380,380]]],[1561711552150,["GJX@GJXAIOU",[[1,380,"代码示例："]],[380,380],[385,385]]],[1561711552539,["GJX@GJXAIOU",[[1,386,"\n"]],[385,385],[386,386]]],[1561711554708,["GJX@GJXAIOU",[[1,395,"package study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n\nclass Student{\n\tprivate int  id;\n\tprivate String name;\n\n\tpublic Student() {\t\n\t\t\n\t}\n\t\n\tpublic  Student(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\t\n\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\t\n\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\t//描述当前类对象，当通过打印方法的时候自动调用\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"    Name : \" + name + \"]\";\n\t}\n\t\n\t//重写equals方法和hashCode方法\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\t//这里的equals方法是Student类重写的方法，当集合调用contains、containsAll、equals方法的时候\n\t\t//都会调用这里的Student类中的equals方法进行比较，比较的对象是Student对象；\n\t\tSystem.out.println(\"Student的equals方法\");\n\t\t\n\t\t//原来的equals方法不符合生活逻辑，仅仅是判断两个对象的地址是否相同，不判断里面的内容是否一致，\n\t\t//重写改变为判断对象中的数据是否一致\n\t\t\n\t\t//1.首先进行强制类型转换\n\t\tStudent student = (Student)obj;\n\t\tSystem.out.println(this.name + \" 和 \" + student.name + \"进行比较\");\n\t\t\n\t\t//这里的this.name.equals(student.name)中的equals方法是调用String类型的equals方法，用于判断两字符串是否相等；\n\t\treturn this.id == student.id && this.name.equals(student.name);\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tSystem.out.println(\"Student 的 HashCode 方法\");\n\t\t//如果重写了equals方法，同时也要重写hashCode方法\n\t\t//因为hashCode值要确定【唯一性】，只要满足自己逻辑就OK，这里认为id是唯一的\n\t\treturn this.id;\n\t}\n\t\n\t\n\t\n\t\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tCollection collection  =  new ArrayList();\n\t\tStudent student1 = new Student(1,\"张三\");\n\t\tStudent student2 = new Student(2,\"李四\"\t);\n\t\tStudent student3 = new Student(3,\"王五\");\n\t\t\n\t\tcollection.add(student1);\n\t\tcollection.add(student2);\n\t\tcollection.add(student3);\n\t\t\n\t\tSystem.out.println(collection);\n\t\t\n\t\tboolean ret = collection.contains(new Student(1, \"张三\")); //\n\t\tSystem.out.println(ret);\n\t} \n}\n\n\n\n\n\n\n\n\n\n\n\n"]],[395,395],[2214,2214]]],[1561711559011,["GJX@GJXAIOU",[[-1,2214,"\n"]],[2214,2214],[2213,2213]]],[1561711559147,["GJX@GJXAIOU",[[-1,2213,"\n"]],[2213,2213],[2212,2212]]],[1561711559282,["GJX@GJXAIOU",[[-1,2212,"\n"]],[2212,2212],[2211,2211]]],[1561711559475,["GJX@GJXAIOU",[[-1,2211,"\n"]],[2211,2211],[2210,2210]]],[1561711559635,["GJX@GJXAIOU",[[-1,2210,"\n"]],[2210,2210],[2209,2209]]],[1561711559803,["GJX@GJXAIOU",[[-1,2209,"\n"]],[2209,2209],[2208,2208]]],[1561711559957,["GJX@GJXAIOU",[[-1,2208,"\n"]],[2208,2208],[2207,2207]]],[1561711560092,["GJX@GJXAIOU",[[-1,2207,"\n"]],[2207,2207],[2206,2206]]],[1561711560338,["GJX@GJXAIOU",[[-1,2206,"\n"]],[2206,2206],[2205,2205]]],[1561711560475,["GJX@GJXAIOU",[[-1,2205,"\n"]],[2205,2205],[2204,2204]]],[1561711560834,["GJX@GJXAIOU",[[-1,2204,"\n"]],[2204,2204],[2203,2203]]],[1561711924787,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561711924787,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561711864883,["GJX@GJXAIOU",[[-1,1739,"\n"]],[1740,1740],[1739,1739]]],[1561711865018,["GJX@GJXAIOU",[[-1,1739,"\t"]],[1739,1739],[1738,1738]]],[1561711865357,["GJX@GJXAIOU",[[-1,1737,"\n"]],[1738,1738],[1737,1737]]],[1561711865850,["GJX@GJXAIOU",[[-1,1737,"\t"]],[1737,1737],[1736,1736]]],[1561711866067,["GJX@GJXAIOU",[[-1,1735,"\n"]],[1736,1736],[1735,1735]]],[1561711866266,["GJX@GJXAIOU",[[-1,1735,"\t"]],[1735,1735],[1734,1734]]],[1561711866538,["GJX@GJXAIOU",[[-1,1733,"\n"]],[1734,1734],[1733,1733]]],[1561711874797,["GJX@GJXAIOU",[[1,2204,"\n"]],[2200,2200],[2201,2201]]],[1561711874915,["GJX@GJXAIOU",[[1,2205,"\n"]],[2201,2201],[2202,2202]]],[1561722455769,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561722455769,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561722442452,["GJX@GJXAIOU",[[1,2203,"### "]],[2203,2203],[2207,2207]]],[1561722444160,["GJX@GJXAIOU",[[-1,2205,"# "]],[2207,2207],[2205,2205]]],[1561722447597,["GJX@GJXAIOU",[[1,2205," 迭代器"]],[2205,2205],[2209,2209]]],[1561722447897,["GJX@GJXAIOU",[[1,2212,"\n"]],[2209,2209],[2210,2210]]],[1561722449468,["GJX@GJXAIOU",[[1,2210,"/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n\n/**\n * class detail:迭代器\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class DieDaiQi {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\t//第一种遍历方式：将集合转化为数组，然后按照数组的方式进行遍历\n\t\t//缺点：需要拷贝一份完整的集合数据，如果集合的数据过多，会造成内存的极大浪费，甚至超过内存的最大值\n\t\tObject[] array = collection.toArray();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.println(array[i]);\n\t\t}\n\t\t\n\t\t//第二种方式：使用迭代器\n\t\t/*Itreator  迭代器\n\t\t * boolean hasNext();  //判断当前迭代器是否有下一个元素\n\t\t * Object next(); //获取当前迭代器指向的元素，并且获取之后，指向下一个元素；\n\t\t * void remove(); //删除当前迭代器通过next获取到的对象\n\t\t * [要求]: 在通过迭代器调用remove方法时候，之前必须调用过next方法，否则会报异常：java.lang.IllegalAtateException\n\t\t */\n\t\t//上述方法使用示例\n\t\tIterator iterator = collection.iterator(); //返回当前集合的一个迭代器\n\t\tSystem.out.println(\"当前元素有没有下一个元素：\" + iterator.hasNext());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"调用了一下删除的方法\");\n\t\titerator.remove(); //这里删除的是上一个指向的next元素；\n\t\tSystem.out.println(collection);\n\t\t\n\t\t//使用迭代器，借助hasNext和next方法，完成对整个集合的遍历\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(\"迭代器操作：\" + iterator.next());\n\t\t\t//将整个集合清空\n\t\t\t//iterator.remove();\n\t\t}\n\t\t\n\t}\n}\n"]],[2210,2210],[3576,3576]]],[1561722451978,["GJX@GJXAIOU",[[-1,2210,"/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n\n/**\n * class detail:迭代器\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class DieDaiQi {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\t//第一种遍历方式：将集合转化为数组，然后按照数组的方式进行遍历\n\t\t//缺点：需要拷贝一份完整的集合数据，如果集合的数据过多，会造成内存的极大浪费，甚至超过内存的最大值\n\t\tObject[] array = collection.toArray();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.println(array[i]);\n\t\t}\n\t\t\n\t\t//第二种方式：使用迭代器\n\t\t/*Itreator  迭代器\n\t\t * boolean hasNext();  //判断当前迭代器是否有下一个元素\n\t\t * Object next(); //获取当前迭代器指向的元素，并且获取之后，指向下一个元素；\n\t\t * void remove(); //删除当前迭代器通过next获取到的对象\n\t\t * [要求]: 在通过迭代器调用remove方法时候，之前必须调用过next方法，否则会报异常：java.lang.IllegalAtateException\n\t\t */\n\t\t//上述方法使用示例\n\t\tIterator iterator = collection.iterator(); //返回当前集合的一个迭代器\n\t\tSystem.out.println(\"当前元素有没有下一个元素：\" + iterator.hasNext());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"调用了一下删除的方法\");\n\t\titerator.remove(); //这里删除的是上一个指向的next元素；\n\t\tSystem.out.println(collection);\n\t\t\n\t\t//使用迭代器，借助hasNext和next方法，完成对整个集合的遍历\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(\"迭代器操作：\" + iterator.next());\n\t\t\t//将整个集合清空\n\t\t\t//iterator.remove();\n\t\t}\n\t\t\n\t}\n}\n"]],[3576,3576],[2210,2210]]],[1561722453289,["GJX@GJXAIOU",[[1,2213,"\n"]],[2210,2210],[2211,2211]]],[1561722455488,["GJX@GJXAIOU",[[1,2211,"代码示例"]],[2211,2211],[2215,2215]]],[1561722515770,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561722515770,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561722455906,["GJX@GJXAIOU",[[1,2218,"\n"]],[2215,2215],[2216,2216]]],[1561722457969,["GJX@GJXAIOU",[[1,2216,"1"]],[2216,2216],[2217,2217]]],[1561722458812,["GJX@GJXAIOU",[[-1,2216,"1"]],[2217,2217],[2216,2216]]],[1561722459338,["GJX@GJXAIOU",[[1,2216,"```"]],[2216,2216],[2219,2219]]],[1561722459364,["GJX@GJXAIOU",[[1,2219,"language\n```\n"]],[2219,2219],[2219,2227]]],[1561722460755,["GJX@GJXAIOU",[[-1,2219,"language"],[1,2227,"j"]],[2219,2227],[2220,2220]]],[1561722461157,["GJX@GJXAIOU",[[1,2220,"ava"]],[2220,2220],[2223,2223]]],[1561722461600,["GJX@GJXAIOU",[[1,2224,"\n"]],[2223,2223],[2224,2224]]],[1561722462723,["GJX@GJXAIOU",[[1,2224,"/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n\n/**\n * class detail:迭代器\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class DieDaiQi {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\t//第一种遍历方式：将集合转化为数组，然后按照数组的方式进行遍历\n\t\t//缺点：需要拷贝一份完整的集合数据，如果集合的数据过多，会造成内存的极大浪费，甚至超过内存的最大值\n\t\tObject[] array = collection.toArray();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.println(array[i]);\n\t\t}\n\t\t\n\t\t//第二种方式：使用迭代器\n\t\t/*Itreator  迭代器\n\t\t * boolean hasNext();  //判断当前迭代器是否有下一个元素\n\t\t * Object next(); //获取当前迭代器指向的元素，并且获取之后，指向下一个元素；\n\t\t * void remove(); //删除当前迭代器通过next获取到的对象\n\t\t * [要求]: 在通过迭代器调用remove方法时候，之前必须调用过next方法，否则会报异常：java.lang.IllegalAtateException\n\t\t */\n\t\t//上述方法使用示例\n\t\tIterator iterator = collection.iterator(); //返回当前集合的一个迭代器\n\t\tSystem.out.println(\"当前元素有没有下一个元素：\" + iterator.hasNext());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"调用了一下删除的方法\");\n\t\titerator.remove(); //这里删除的是上一个指向的next元素；\n\t\tSystem.out.println(collection);\n\t\t\n\t\t//使用迭代器，借助hasNext和next方法，完成对整个集合的遍历\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(\"迭代器操作：\" + iterator.next());\n\t\t\t//将整个集合清空\n\t\t\t//iterator.remove();\n\t\t}\n\t\t\n\t}\n}\n"]],[2224,2224],[3590,3590]]],[1561722466609,["GJX@GJXAIOU",[[1,3598,"\n"]],[3594,3594],[3595,3595]]],[1561722466729,["GJX@GJXAIOU",[[1,3599,"\n"]],[3595,3595],[3596,3596]]],[1561722466859,["GJX@GJXAIOU",[[1,3600,"\n"]],[3596,3596],[3597,3597]]],[1561722466977,["GJX@GJXAIOU",[[1,3601,"\n"]],[3597,3597],[3598,3598]]],[1561722815777,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561722815777,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561722780258,["GJX@GJXAIOU",[[1,3602,"\n"]],[3595,3595],[3596,3596]]],[1561722783110,["GJX@GJXAIOU",[[1,3596,"## gong"]],[3596,3596],[3603,3603]]],[1561722784564,["GJX@GJXAIOU",[[-1,3599,"gong"]],[3603,3603],[3599,3599]]],[1561722793064,["GJX@GJXAIOU",[[1,3599,"共享资源问题"]],[3599,3599],[3605,3605]]],[1561722794353,["GJX@GJXAIOU",[[1,3612,"\n"]],[3605,3605],[3606,3606]]],[1561722815397,["GJX@GJXAIOU",[[1,3607,"针对同一个资源"]],[3607,3607],[3614,3614]]],[1561722875782,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561722875782,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561722821239,["GJX@GJXAIOU",[[1,3614,"，同时两个主题"]],[3614,3614],[3621,3621]]],[1561722822433,["GJX@GJXAIOU",[[-1,3619,"主题"]],[3621,3621],[3619,3619]]],[1561722832460,["GJX@GJXAIOU",[[1,3619,"主体在使用，容易产生冲突；"]],[3619,3619],[3632,3632]]],[1561722832923,["GJX@GJXAIOU",[[1,3638,"\n"]],[3632,3632],[3633,3633]]],[1561722851243,["GJX@GJXAIOU",[[1,3633,"代码示例：集合对象和迭代器童年故事"]],[3633,3633],[3650,3650]]],[1561722852640,["GJX@GJXAIOU",[[-1,3646,"童年故事"]],[3650,3650],[3646,3646]]],[1561722865668,["GJX@GJXAIOU",[[1,3646,"同时处理集合中的元素，造成冲突；"]],[3646,3646],[3662,3662]]],[1561722866577,["GJX@GJXAIOU",[[1,3668,"\n"]],[3662,3662],[3663,3663]]],[1561722868235,["GJX@GJXAIOU",[[1,3663,"```"]],[3663,3663],[3666,3666]]],[1561722868263,["GJX@GJXAIOU",[[1,3666,"language\n```\n"]],[3666,3666],[3666,3674]]],[1561722869876,["GJX@GJXAIOU",[[-1,3666,"language"],[1,3674,"J"]],[3666,3674],[3667,3667]]],[1561722870413,["GJX@GJXAIOU",[[1,3667,"ava"]],[3667,3667],[3670,3670]]],[1561722870907,["GJX@GJXAIOU",[[1,3671,"\n"]],[3670,3670],[3671,3671]]],[1561723415789,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561723415789,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561723377033,["GJX@GJXAIOU",[[1,3671,"/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * class detail:共享资源处理问题\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ShareSources {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\tIterator iterator = collection.iterator();\n\t\t\n\t\t//下面代码会抛出异常： java.util.ConcurrentModificationException\n\t\t/*\n\t\t * 这里存在两种操作集合数据的方式，第一种方式：集合的对象collection；第二种方式：集合的迭代器iterator\n\t\t * 这里两种操作都有查看和删除的权限，但是一方操作的同时，另一方也在操作，或造成共享资源问题；\n\t\t * \n\t\t * 解决方法：\n\t\t *  \t1.使用迭代器操作放弃集合对象操作\n\t\t *  \t2.使用集合对象操作放弃迭代器操作\n\t\t */\n\t\twhile (iterator.hasNext()) {\n\t\t\t\t\tSystem.out.println(iterator.next());\n\t\t\t\t\tcollection.remove(\"李四\");\t\n\t\t}\n\t}\n}\n"]],[3671,3671],[4457,4457]]],[1561723475791,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561723475791,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561723431289,["GJX@GJXAIOU",[[1,2205,"#"]],[2205,2205],[2210,2210]]],[1561723436820,["GJX@GJXAIOU",[[1,3599,"#"]],[3599,3599],[3607,3607]]],[1561723440848,["GJX@GJXAIOU",[[1,4470,"\n"]],[4469,4469],[4470,4470]]],[1561723440976,["GJX@GJXAIOU",[[1,4471,"\n"]],[4470,4470],[4471,4471]]],[1561723441088,["GJX@GJXAIOU",[[1,4472,"\n"]],[4471,4471],[4472,4472]]],[1561723441187,["GJX@GJXAIOU",[[1,4473,"\n"]],[4472,4472],[4473,4473]]],[1561723441320,["GJX@GJXAIOU",[[1,4474,"\n"]],[4473,4473],[4474,4474]]],[1561723441432,["GJX@GJXAIOU",[[1,4475,"\n"]],[4474,4474],[4475,4475]]],[1561723441584,["GJX@GJXAIOU",[[1,4476,"\n"]],[4475,4475],[4476,4476]]],[1561723441668,["GJX@GJXAIOU",[[1,4477,"\n"]],[4476,4476],[4477,4477]]],[1561723441800,["GJX@GJXAIOU",[[1,4478,"\n"]],[4477,4477],[4478,4478]]],[1561723441921,["GJX@GJXAIOU",[[1,4479,"\n"]],[4478,4478],[4479,4479]]],[1561723444928,["GJX@GJXAIOU",[[1,4470,"## "]],[4470,4470],[4473,4473]]],[1561723535794,[null,[[1,149,"）"],[-1,150,"s"],[1,165,"-"],[-1,168,"~"]],[149,149],[168,168]]],[1561723535794,[null,[[-1,149,"）"],[1,151,"s"],[-1,165,"-"],[1,169,"~"]],[168,168],[149,149]]],[1561723526219,["GJX@GJXAIOU",[[-1,2,"## collection\n\n- contains, containAll,equals 方法；\n  - 发现：\n    - Java 语言总，默认判断两个对象是否相同的方式是：判断这两个对象的地址是否相同；\n    - 在这里 student1 对象和 new Student（1, “成龙”）;是两个完全不同的对象；\n  - 问题：\n    - 因为上面两个对象里面保存的数据其实是一样的，也是符合业务逻辑的，或者是符合生活逻辑的，实现在符合语法的前提下，也符合生活逻辑；\n  - 解决方法：\n    - 重写 equals 和 hashCode 方法；\n    - 默认情况下：\n      - hashCode 方法在系统默认情况下，是当前类的对象在内存中地址的十进制数；\n            - equals 方法是两个对象相互比较的法则；\n代码示例：\n\n```java\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n\nclass Student{\n\tprivate int  id;\n\tprivate String name;\n\n\tpublic Student() {\t\n\t\t\n\t}\n\t\n\tpublic  Student(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\t\n\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\t\n\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\t//描述当前类对象，当通过打印方法的时候自动调用\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"    Name : \" + name + \"]\";\n\t}\n\t\n\t//重写equals方法和hashCode方法\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\t//这里的equals方法是Student类重写的方法，当集合调用contains、containsAll、equals方法的时候\n\t\t//都会调用这里的Student类中的equals方法进行比较，比较的对象是Student对象；\n\t\tSystem.out.println(\"Student的equals方法\");\n\t\t\n\t\t//原来的equals方法不符合生活逻辑，仅仅是判断两个对象的地址是否相同，不判断里面的内容是否一致，\n\t\t//重写改变为判断对象中的数据是否一致\n\t\t\n\t\t//1.首先进行强制类型转换\n\t\tStudent student = (Student)obj;\n\t\tSystem.out.println(this.name + \" 和 \" + student.name + \"进行比较\");\n\t\t\n\t\t//这里的this.name.equals(student.name)中的equals方法是调用String类型的equals方法，用于判断两字符串是否相等；\n\t\treturn this.id == student.id && this.name.equals(student.name);\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tSystem.out.println(\"Student 的 HashCode 方法\");\n\t\t//如果重写了equals方法，同时也要重写hashCode方法\n\t\t//因为hashCode值要确定【唯一性】，只要满足自己逻辑就OK，这里认为id是唯一的\n\t\treturn this.id;\n\t}\t\n}\n\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tCollection collection  =  new ArrayList();\n\t\tStudent student1 = new Student(1,\"张三\");\n\t\tStudent student2 = new Student(2,\"李四\"\t);\n\t\tStudent student3 = new Student(3,\"王五\");\n\t\t\n\t\tcollection.add(student1);\n\t\tcollection.add(student2);\n\t\tcollection.add(student3);\n\t\t\n\t\tSystem.out.println(collection);\n\t\t\n\t\tboolean ret = collection.contains(new Student(1, \"张三\")); //\n\t\tSystem.out.println(ret);\n\t} \n}\n\n```\n\n\n### 迭代器\n\n代码示例\n```java\n/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n\n/**\n * class detail:迭代器\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class DieDaiQi {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\t//第一种遍历方式：将集合转化为数组，然后按照数组的方式进行遍历\n\t\t//缺点：需要拷贝一份完整的集合数据，如果集合的数据过多，会造成内存的极大浪费，甚至超过内存的最大值\n\t\tObject[] array = collection.toArray();\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.println(array[i]);\n\t\t}\n\t\t\n\t\t//第二种方式：使用迭代器\n\t\t/*Itreator  迭代器\n\t\t * boolean hasNext();  //判断当前迭代器是否有下一个元素\n\t\t * Object next(); //获取当前迭代器指向的元素，并且获取之后，指向下一个元素；\n\t\t * void remove(); //删除当前迭代器通过next获取到的对象\n\t\t * [要求]: 在通过迭代器调用remove方法时候，之前必须调用过next方法，否则会报异常：java.lang.IllegalAtateException\n\t\t */\n\t\t//上述方法使用示例\n\t\tIterator iterator = collection.iterator(); //返回当前集合的一个迭代器\n\t\tSystem.out.println(\"当前元素有没有下一个元素：\" + iterator.hasNext());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"当前迭代器指向的元素：\" + iterator.next());\n\t\tSystem.out.println(\"调用了一下删除的方法\");\n\t\titerator.remove(); //这里删除的是上一个指向的next元素；\n\t\tSystem.out.println(collection);\n\t\t\n\t\t//使用迭代器，借助hasNext和next方法，完成对整个集合的遍历\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(\"迭代器操作：\" + iterator.next());\n\t\t\t//将整个集合清空\n\t\t\t//iterator.remove();\n\t\t}\n\t\t\n\t}\n}\n\n```\n\n### 共享资源问题\n\n针对同一个资源，同时两个主体在使用，容易产生冲突；\n代码示例：集合对象和迭代器同时处理集合中的元素，造成冲突；\n```Java\n/**\n * \n */\npackage study;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n/**\n * class detail:共享资源处理问题\n * @author GJXAIOU\n * @since  2019年6月28日\n */\npublic class ShareSources {\n\tpublic static void main(String[] args) {\n\t\tCollection collection = new ArrayList();\n\t\tcollection.add(\"张三\");\n\t\tcollection.add(\"李四\");\n\t\tcollection.add(\"王五\");\n\t\t\n\t\tIterator iterator = collection.iterator();\n\t\t\n\t\t//下面代码会抛出异常： java.util.ConcurrentModificationException\n\t\t/*\n\t\t * 这里存在两种操作集合数据的方式，第一种方式：集合的对象collection；第二种方式：集合的迭代器iterator\n\t\t * 这里两种操作都有查看和删除的权限，但是一方操作的同时，另一方也在操作，或造成共享资源问题；\n\t\t * \n\t\t * 解决方法：\n\t\t *  \t1.使用迭代器操作放弃集合对象操作\n\t\t *  \t2.使用集合对象操作放弃迭代器操作\n\t\t */\n\t\twhile (iterator.hasNext()) {\n\t\t\t\t\tSystem.out.println(iterator.next());\n\t\t\t\t\tcollection.remove(\"李四\");\t\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n## \n"]],[2,4474],[2,2]]],[1561723527875,["GJX@GJXAIOU",[[-1,10,"\n"]],[8,8],[7,7]]],[1561723528002,["GJX@GJXAIOU",[[-1,9,"\n"]],[7,7],[6,6]]],[1561723528203,["GJX@GJXAIOU",[[-1,8,"\n"]],[6,6],[5,5]]],[1561723528322,["GJX@GJXAIOU",[[-1,7,"\n"]],[5,5],[4,4]]],[1561723528568,["GJX@GJXAIOU",[[-1,6,"\n"]],[4,4],[3,3]]],[1561723528787,["GJX@GJXAIOU",[[-1,5,"\n"]],[3,3],[2,2]]],[1561723528960,["GJX@GJXAIOU",[[-1,4,"\n"]],[2,2],[1,1]]]],null,"GJX@GJXAIOU"],["e553ca24-c759-4e25-8abe-d1647369eb43",1561773668128,"\n\n\n\n## 复习\n- Collection 集合的总接口\n      add(Object o) addAll(Collection c) remove(Object o) clear() removeAll(Collection c)\n      retainAll(Collection c) contains(Object o) containsAll(Collection c) isEmpty() \n      equals(Collection c) iterator() size() toArray()\n- List 接口  有序 可重复\n          add(int index, Object o) addAll(int index, Collection c) indexOf(Object o)\n          lastIndexOf(Object o) get(int index) subList(int fromIndex, int toIndex)\n          set(int index, Object o) listIterator() \n- ArrayList  \n              底层维护的是一个Object类型的数组，默认的元素个数为10 \n              特征： 增删慢，查找快\n                  ensureCapacity(int minCapacity);\n                  trimToSize();\n- LinkedList \n              底层维护的是一个链表\n              特征： 增删快，查找慢\n                  addFrist(Object o) addLast(Object o) getFrist() getLast() removeFirst() \n                  removeLast()  \n-  Vector (了解)\n              和ArrayList是类似的，基本上常用的方法也是一致\n                  线程安全，效率低！！！\n- Set\n  \n  \n  迭代的方法：\n      Iterator \n          next() hasNext() remove()\n      ListIterator\n          add(Object o) set(Object o) nextIndex()\n            \n     ",[[1561773630241,["GJX@GJXAIOU",[[-1,3,"\n"]],[3,3],[2,2]]],[1561773630408,["GJX@GJXAIOU",[[-1,2,"\n"]],[2,2],[1,1]]],[1561773630632,["GJX@GJXAIOU",[[-1,0,"\n"]],[1,1],[0,0]]],[1561774265172,["GJX@GJXAIOU",[[1,47,"  "]],[47,47],[49,49]]],[1561774266316,["GJX@GJXAIOU",[[1,70,"   "]],[70,70],[73,73]]],[1561774267988,["GJX@GJXAIOU",[[1,90,"  "]],[90,90],[92,92]]],[1561774268177,["GJX@GJXAIOU",[[1,92," "]],[92,92],[93,93]]],[1561774269533,["GJX@GJXAIOU",[[1,124," "]],[124,124],[125,125]]],[1561774271603,["GJX@GJXAIOU",[[1,156,"   "]],[156,156],[159,159]]],[1561774272761,["GJX@GJXAIOU",[[1,178,"   "]],[177,177],[180,180]]],[1561774274675,["GJX@GJXAIOU",[[1,245,"   "]],[245,245],[248,248]]],[1561774275908,["GJX@GJXAIOU",[[1,259,"   "]],[259,259],[262,262]]],[1561774277177,["GJX@GJXAIOU",[[1,269,"   "]],[269,269],[272,272]]],[1561774280843,["GJX@GJXAIOU",[[-1,128,"    "]],[130,130],[126,126]]],[1561774281225,["GJX@GJXAIOU",[[-1,125,"\n"]],[126,126],[125,125]]],[1561774286072,["GJX@GJXAIOU",[[-1,214,"     "]],[218,218],[213,213]]],[1561774286489,["GJX@GJXAIOU",[[-1,212,"\n"]],[213,213],[212,212]]],[1561774289473,["GJX@GJXAIOU",[[1,202,"  "]],[201,201],[203,203]]],[1561774487048,["GJX@GJXAIOU",[[1,1000,"gongy"]],[1000,1000],[1005,1005]]],[1561774488185,["GJX@GJXAIOU",[[-1,1000,"gongy"]],[1005,1005],[1000,1000]]],[1561774489829,["GJX@GJXAIOU",[[1,1000,"公有"]],[1000,1000],[1002,1002]]],[1561774490704,["GJX@GJXAIOU",[[-1,1000,"公有"]],[1002,1002],[1000,1000]]],[1561774494035,["GJX@GJXAIOU",[[1,1000,"共有的："]],[1000,1000],[1004,1004]]],[1561774498040,["GJX@GJXAIOU",[[-1,1060," "]],[1061,1061],[1060,1060]]],[1561774500061,["GJX@GJXAIOU",[[1,1060,"特有 "]],[1060,1060],[1062,1062]]],[1561774500884,["GJX@GJXAIOU",[[1,1062,"的："]],[1062,1062],[1064,1064]]],[1561774577858,["GJX@GJXAIOU",[[-1,981," "]],[982,982],[981,981]]],[1561774580814,["GJX@GJXAIOU",[[-1,1036," "]],[1037,1037],[1036,1036]]],[1561774658799,["GJX@GJXAIOU",[[-1,1116,"     "],[1,1121,"\n\n"]],[1121,1121],[1117,1117]]],[1561774658959,["GJX@GJXAIOU",[[1,1118,"\n"]],[1117,1117],[1118,1118]]],[1561774659095,["GJX@GJXAIOU",[[1,1119,"\n"]],[1118,1118],[1119,1119]]],[1561774659343,["GJX@GJXAIOU",[[1,1120,"\n"]],[1119,1119],[1120,1120]]],[1561774659519,["GJX@GJXAIOU",[[1,1121,"\n"]],[1120,1120],[1121,1121]]],[1561774659673,["GJX@GJXAIOU",[[1,1122,"\n"]],[1121,1121],[1122,1122]]],[1561774659928,["GJX@GJXAIOU",[[1,1123,"\n"]],[1122,1122],[1123,1123]]],[1561774660143,["GJX@GJXAIOU",[[1,1124,"\n"]],[1123,1123],[1124,1124]]],[1561774660504,["GJX@GJXAIOU",[[1,1125,"\n"]],[1124,1124],[1125,1125]]],[1561774667537,["GJX@GJXAIOU",[[1,1125,"## Set"]],[1125,1125],[1131,1131]]],[1561774758066,["GJX@GJXAIOU",[[-1,967,"  "],[-1,976,"  "],[-1,991," "],[-1,998," "],[-1,1034,"  "],[-1,1049,"  "]],[969,1102],[967,1092]]],[1561774759561,["GJX@GJXAIOU",[[-1,975,"  "],[-1,987,"  "],[-1,1026,"  "],[-1,1041,"  "]],[967,1092],[967,1084]]],[1561774764567,["GJX@GJXAIOU",[[1,975,"  "],[1,985,"  "],[1,1022,"  "],[1,1035,"  "]],[975,1084],[977,1092]]],[1561774770369,["GJX@GJXAIOU",[[1,967,"- "]],[967,967],[969,969]]],[1561774774563,["GJX@GJXAIOU",[[1,1102,"\n       "]],[1094,1094],[1102,1102]]],[1561774774999,["GJX@GJXAIOU",[[-1,1095,"       "],[1,1102,"\n"]],[1102,1102],[1096,1096]]],[1561774777458,["GJX@GJXAIOU",[[1,1097,"\n"]],[1096,1096],[1097,1097]]],[1561774778631,["GJX@GJXAIOU",[[-1,1097,"\n"]],[1097,1097],[1096,1096]]],[1561774781663,["GJX@GJXAIOU",[[-1,1108," "]],[1098,1098],[1097,1097]]],[1561774782047,["GJX@GJXAIOU",[[-1,1096,"\n"]],[1097,1097],[1096,1096]]],[1561775057473,["GJX@GJXAIOU",[[-1,1100,"       "]],[1103,1103],[1096,1096]]],[1561775057705,["GJX@GJXAIOU",[[-1,1095,"\n"]],[1096,1096],[1095,1095]]],[1561775057897,["GJX@GJXAIOU",[[-1,1094,"\n"]],[1095,1095],[1094,1094]]],[1561775059234,["GJX@GJXAIOU",[[1,1094,"\n       "]],[1094,1094],[1102,1102]]],[1561775059625,["GJX@GJXAIOU",[[-1,1095,"           "],[1,1106,"\n"]],[1102,1102],[1096,1096]]],[1561775136600,["GJX@GJXAIOU",[[1,1096," "]],[1096,1096],[1097,1097]]],[1561775180359,["GJX@GJXAIOU",[[1,1114,"\n"]],[1113,1113],[1114,1114]]],[1561775187761,["GJX@GJXAIOU",[[-1,1114,"\n"],[1,1115,"是一个"]],[1114,1114],[1117,1117]]],[1561775194267,["GJX@GJXAIOU",[[1,1117,"接口、无序（）"]],[1117,1117],[1124,1124]]],[1561775196595,["GJX@GJXAIOU",[[1,1123,"值"]],[1123,1123],[1124,1124]]],[1561775197136,["GJX@GJXAIOU",[[-1,1123,"值"]],[1124,1124],[1123,1123]]],[1561775209524,["GJX@GJXAIOU",[[1,1123,"指添加顺序和展示数据可能"]],[1123,1123],[1135,1135]]],[1561775213599,["GJX@GJXAIOU",[[-1,1131,"数据"]],[1133,1133],[1131,1131]]],[1561775215524,["GJX@GJXAIOU",[[1,1131,"顺序"]],[1131,1131],[1133,1133]]],[1561775218484,["GJX@GJXAIOU",[[1,1135,"不一致"]],[1135,1135],[1138,1138]]],[1561775223152,["GJX@GJXAIOU",[[1,1139,"\n\n"]],[1139,1139],[1140,1140]]],[1561775225788,["GJX@GJXAIOU",[[-1,1140,"\n"],[1,1141,"没有"]],[1140,1140],[1142,1142]]],[1561775227901,["GJX@GJXAIOU",[[1,1142,"特有的"]],[1142,1142],[1145,1145]]],[1561775229547,["GJX@GJXAIOU",[[1,1145,"方法："]],[1145,1145],[1148,1148]]],[1561775230410,["GJX@GJXAIOU",[[-1,1147,"："]],[1148,1148],[1147,1147]]],[1561775230761,["GJX@GJXAIOU",[[1,1147,"；"]],[1147,1147],[1148,1148]]],[1561775234674,["GJX@GJXAIOU",[[1,1139,"；"]],[1139,1139],[1140,1140]]],[1561775236937,["GJX@GJXAIOU",[[1,1149,"\n\n"]],[1149,1149],[1150,1150]]],[1561775237191,["GJX@GJXAIOU",[[1,1151,"\n"]],[1150,1150],[1151,1151]]],[1561775512241,["GJX@GJXAIOU",[[1,1150,"一般使用程序："]],[1150,1150],[1157,1157]]],[1561775512983,["GJX@GJXAIOU",[[1,1159,"\n"]],[1157,1157],[1158,1158]]],[1561775514135,["GJX@GJXAIOU",[[1,1158,"```"]],[1158,1158],[1161,1161]]],[1561775514160,["GJX@GJXAIOU",[[1,1161,"language\n```\n"]],[1161,1161],[1161,1169]]],[1561775515249,["GJX@GJXAIOU",[[-1,1161,"language"],[1,1169,"j"]],[1161,1169],[1162,1162]]],[1561775515695,["GJX@GJXAIOU",[[1,1162,"ava"]],[1162,1162],[1165,1165]]],[1561775515952,["GJX@GJXAIOU",[[1,1166,"\n"]],[1165,1165],[1166,1166]]],[1561775517054,["GJX@GJXAIOU",[[1,1166,"package study;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Set_Use {\n\tpublic static void main(String[] args) {\n\t\tSet set = new HashSet();\n\t\t\n\t\tset.add(\"A\");\n\t\tset.add(\"B\");\n\t\tset.add(\"E\");\n\t\tset.add(\"B\");\n\t\tset.add(\"C\");\n\t\tSystem.out.println(set);\n\t}\n}"]],[1166,1166],[1437,1437]]],[1561775519625,["GJX@GJXAIOU",[[1,1444,"\n"]],[1441,1441],[1442,1442]]],[1561775521905,["GJX@GJXAIOU",[[1,1442,"jieguo"]],[1442,1442],[1448,1448]]],[1561775523064,["GJX@GJXAIOU",[[-1,1442,"jieguo"]],[1448,1448],[1442,1442]]],[1561775523976,["GJX@GJXAIOU",[[1,1442,"Jiegu"]],[1442,1442],[1447,1447]]],[1561775525102,["GJX@GJXAIOU",[[-1,1442,"Jiegu"]],[1447,1447],[1442,1442]]],[1561775526896,["GJX@GJXAIOU",[[1,1442,"结果："]],[1442,1442],[1445,1445]]],[1561775527321,["GJX@GJXAIOU",[[1,1448,"\n"]],[1445,1445],[1446,1446]]],[1561775528743,["GJX@GJXAIOU",[[1,1446,"```"]],[1446,1446],[1449,1449]]],[1561775528768,["GJX@GJXAIOU",[[1,1449,"language\n```\n"]],[1449,1449],[1449,1457]]],[1561775529905,["GJX@GJXAIOU",[[-1,1449,"language"]],[1449,1457],[1449,1449]]],[1561775530758,["GJX@GJXAIOU",[[1,1450,"\n"]],[1449,1449],[1450,1450]]],[1561775549937,["GJX@GJXAIOU",[[1,1450,"[A, B, C, E]"]],[1450,1450],[1462,1462]]],[1561775556566,["GJX@GJXAIOU",[[1,1470,"\n"]],[1466,1466],[1467,1467]]],[1561775556695,["GJX@GJXAIOU",[[1,1471,"\n"]],[1467,1467],[1468,1468]]],[1561775568050,["GJX@GJXAIOU",[[1,1468,"### set "]],[1468,1468],[1476,1476]]],[1561775568630,["GJX@GJXAIOU",[[-1,1475," "]],[1476,1476],[1475,1475]]],[1561775569017,["GJX@GJXAIOU",[[1,1475,"l"]],[1475,1475],[1476,1476]]],[1561775569527,["GJX@GJXAIOU",[[-1,1475,"l"]],[1476,1476],[1475,1475]]],[1561775570818,["GJX@GJXAIOU",[[1,1475,"两"]],[1475,1475],[1476,1476]]],[1561775570842,["GJX@GJXAIOU",[[1,1475," "]],[1476,1476],[1477,1477]]],[1561775576411,["GJX@GJXAIOU",[[1,1477,"个实现类"]],[1477,1477],[1481,1481]]],[1561775577518,["GJX@GJXAIOU",[[1,1485,"\n"]],[1481,1481],[1482,1482]]],[1561776048384,["GJX@GJXAIOU",[[1,1482,"- HashSet："]],[1482,1482],[1492,1492]]],[1561776048904,["GJX@GJXAIOU",[[1,1493,"- \n"]],[1492,1492],[1495,1495]]],[1561776049845,["GJX@GJXAIOU",[[-1,1493,"- "]],[1495,1495],[1493,1493]]],[1561776052797,["GJX@GJXAIOU",[[1,1497,"\n"]],[1493,1493],[1494,1494]]],[1561776052911,["GJX@GJXAIOU",[[1,1498,"\n"]],[1494,1494],[1495,1495]]],[1561776053054,["GJX@GJXAIOU",[[1,1499,"\n"]],[1495,1495],[1496,1496]]],[1561776053165,["GJX@GJXAIOU",[[1,1500,"\n"]],[1496,1496],[1497,1497]]],[1561776053296,["GJX@GJXAIOU",[[1,1501,"\n"]],[1497,1497],[1498,1498]]],[1561776053421,["GJX@GJXAIOU",[[1,1502,"\n"]],[1498,1498],[1499,1499]]],[1561776053542,["GJX@GJXAIOU",[[1,1503,"\n"]],[1499,1499],[1500,1500]]],[1561776053670,["GJX@GJXAIOU",[[1,1504,"\n"]],[1500,1500],[1501,1501]]],[1561776053789,["GJX@GJXAIOU",[[1,1505,"\n"]],[1501,1501],[1502,1502]]],[1561776053919,["GJX@GJXAIOU",[[1,1506,"\n"]],[1502,1502],[1503,1503]]],[1561776054048,["GJX@GJXAIOU",[[1,1507,"\n"]],[1503,1503],[1504,1504]]],[1561776054181,["GJX@GJXAIOU",[[1,1508,"\n"]],[1504,1504],[1505,1505]]],[1561777724753,["GJX@GJXAIOU",[[1,1493,"在添加元素的是"]],[1493,1493],[1500,1500]]],[1561777726085,["GJX@GJXAIOU",[[-1,1498,"的是"]],[1500,1500],[1498,1498]]],[1561777739455,["GJX@GJXAIOU",[[1,1498,"的时候，每一次都会调用h"]],[1498,1498],[1510,1510]]],[1561777739480,["GJX@GJXAIOU",[[1,1509," "]],[1510,1510],[1511,1511]]],[1561777739983,["GJX@GJXAIOU",[[1,1511,"ac"]],[1511,1511],[1513,1513]]],[1561777740940,["GJX@GJXAIOU",[[-1,1512,"c"]],[1513,1513],[1512,1512]]],[1561777744911,["GJX@GJXAIOU",[[1,1512,"shCode方法"]],[1512,1512],[1520,1520]]],[1561777744935,["GJX@GJXAIOU",[[1,1518," "]],[1520,1520],[1521,1521]]],[1561777745377,["GJX@GJXAIOU",[[1,1521,"，"]],[1521,1521],[1522,1522]]],[1561777747492,["GJX@GJXAIOU",[[-1,1521,"，"]],[1522,1522],[1521,1521]]],[1561777749119,["GJX@GJXAIOU",[[1,1521,"；"]],[1521,1521],[1522,1522]]],[1561777749644,["GJX@GJXAIOU",[[1,1538,"\n"]],[1522,1522],[1523,1523]]],[1561777758285,["GJX@GJXAIOU",[[1,1523,"下面代码通过重写h"]],[1523,1523],[1532,1532]]],[1561777758311,["GJX@GJXAIOU",[[1,1531," "]],[1532,1532],[1533,1533]]],[1561777760301,["GJX@GJXAIOU",[[1,1533,"ashCosw"]],[1533,1533],[1540,1540]]],[1561777760916,["GJX@GJXAIOU",[[-1,1538,"sw"]],[1540,1540],[1538,1538]]],[1561777765563,["GJX@GJXAIOU",[[1,1538,"de和"]],[1538,1538],[1541,1541]]],[1561777765588,["GJX@GJXAIOU",[[1,1540," "]],[1541,1541],[1542,1542]]],[1561777769217,["GJX@GJXAIOU",[[1,1542,"equals"]],[1542,1542],[1548,1548]]],[1561777769242,["GJX@GJXAIOU",[[1,1542," "]],[1548,1548],[1549,1549]]],[1561777770337,["GJX@GJXAIOU",[[1,1549,"方法"]],[1549,1549],[1551,1551]]],[1561777770361,["GJX@GJXAIOU",[[1,1549," "]],[1551,1551],[1552,1552]]],[1561777778152,["GJX@GJXAIOU",[[1,1552,"，也是首先带哦用"]],[1552,1552],[1560,1560]]],[1561777778932,["GJX@GJXAIOU",[[-1,1557,"带哦用"]],[1560,1560],[1557,1557]]],[1561777786570,["GJX@GJXAIOU",[[1,1557,"调用hashCode"]],[1557,1557],[1567,1567]]],[1561777786595,["GJX@GJXAIOU",[[1,1559," "]],[1567,1567],[1568,1568]]],[1561777787643,["GJX@GJXAIOU",[[1,1568,"方法"]],[1568,1568],[1570,1570]]],[1561777787669,["GJX@GJXAIOU",[[1,1568," "]],[1570,1570],[1571,1571]]],[1561777796055,["GJX@GJXAIOU",[[1,1571,"，然后调用equal"]],[1571,1571],[1581,1581]]],[1561777796080,["GJX@GJXAIOU",[[1,1576," "]],[1581,1581],[1582,1582]]],[1561777797217,["GJX@GJXAIOU",[[1,1582,"方法"]],[1582,1582],[1584,1584]]],[1561777797242,["GJX@GJXAIOU",[[1,1582," "]],[1584,1584],[1585,1585]]],[1561777800191,["GJX@GJXAIOU",[[1,1582,"s"]],[1582,1582],[1583,1583]]],[1561777802453,["GJX@GJXAIOU",[[1,1586,";"]],[1586,1586],[1587,1587]]],[1561777802735,["GJX@GJXAIOU",[[1,1603,"\n"]],[1587,1587],[1588,1588]]],[1561777802892,["GJX@GJXAIOU",[[1,1604,"\n"]],[1588,1588],[1589,1589]]],[1561777805909,["GJX@GJXAIOU",[[1,1589,"- h"]],[1589,1589],[1592,1592]]],[1561777806412,["GJX@GJXAIOU",[[-1,1591,"h"]],[1592,1592],[1591,1591]]],[1561777807703,["GJX@GJXAIOU",[[1,1591,"Hash"]],[1591,1591],[1595,1595]]],[1561777814193,["GJX@GJXAIOU",[[1,1595,"Set存储"]],[1595,1595],[1600,1600]]],[1561777814218,["GJX@GJXAIOU",[[1,1598," "]],[1600,1600],[1601,1601]]],[1561777816001,["GJX@GJXAIOU",[[1,1601,"原理："]],[1601,1601],[1604,1604]]],[1561777816332,["GJX@GJXAIOU",[[1,1605,"- \n"]],[1604,1604],[1607,1607]]],[1561777819941,["GJX@GJXAIOU",[[1,1605,"  "]],[1607,1607],[1609,1609]]],[1561778339503,["GJX@GJXAIOU",[[1,1609,"当向HashSet"]],[1609,1609],[1618,1618]]],[1561778339529,["GJX@GJXAIOU",[[1,1611," "]],[1618,1618],[1619,1619]]],[1561778340399,["GJX@GJXAIOU",[[1,1619,"中"]],[1619,1619],[1620,1620]]],[1561778340426,["GJX@GJXAIOU",[[1,1619," "]],[1620,1620],[1621,1621]]],[1561778374204,["GJX@GJXAIOU",[[-1,1620,"中"]],[1621,1621],[1620,1620]]],[1561778387743,["GJX@GJXAIOU",[[1,1620,"集合中添加元素，HashSet首先"]],[1620,1620],[1637,1637]]],[1561778387770,["GJX@GJXAIOU",[[1,1635," "]],[1637,1637],[1638,1638]]],[1561778390241,["GJX@GJXAIOU",[[1,1638,"会调研"]],[1638,1638],[1641,1641]]],[1561778391116,["GJX@GJXAIOU",[[-1,1639,"调研"]],[1641,1641],[1639,1639]]],[1561778399477,["GJX@GJXAIOU",[[1,1639,"调用该元素h"]],[1639,1639],[1645,1645]]],[1561778399503,["GJX@GJXAIOU",[[1,1644," "]],[1645,1645],[1646,1646]]],[1561778403431,["GJX@GJXAIOU",[[1,1646,"ashCode方法"]],[1646,1646],[1655,1655]]],[1561778403456,["GJX@GJXAIOU",[[1,1653," "]],[1655,1655],[1656,1656]]],[1561778413554,["GJX@GJXAIOU",[[1,1656,"，获取该对象的Hash"]],[1656,1656],[1667,1667]]],[1561778413579,["GJX@GJXAIOU",[[1,1663," "]],[1667,1667],[1668,1668]]],[1561778414567,["GJX@GJXAIOU",[[1,1668,"值"]],[1668,1668],[1669,1669]]],[1561778414593,["GJX@GJXAIOU",[[1,1668," "]],[1669,1669],[1670,1670]]],[1561778417959,["GJX@GJXAIOU",[[1,1670,"（）"]],[1670,1670],[1672,1672]]],[1561778422152,["GJX@GJXAIOU",[[1,1671,"因为这里的"]],[1671,1671],[1676,1676]]],[1561778423644,["GJX@GJXAIOU",[[-1,1675,"的"]],[1676,1676],[1675,1675]]],[1561778433016,["GJX@GJXAIOU",[[1,1675,"进行了h"]],[1675,1675],[1679,1679]]],[1561778433041,["GJX@GJXAIOU",[[1,1678," "]],[1679,1679],[1680,1680]]],[1561778438361,["GJX@GJXAIOU",[[1,1680,"ashCode方法"]],[1680,1680],[1689,1689]]],[1561778438386,["GJX@GJXAIOU",[[1,1687," "]],[1689,1689],[1690,1690]]],[1561778454220,["GJX@GJXAIOU",[[1,1690,"的重写，所以获取的不再是该对象的地址"]],[1690,1690],[1708,1708]]],[1561778472894,["GJX@GJXAIOU",[[1,1709,"。然后通过【"]],[1709,1709],[1715,1715]]],[1561778480018,["GJX@GJXAIOU",[[1,1715,"移位】极端"]],[1715,1715],[1720,1720]]],[1561778480589,["GJX@GJXAIOU",[[-1,1718,"极端"]],[1720,1720],[1718,1718]]],[1561778502018,["GJX@GJXAIOU",[[1,1718,"计算，计算出该元素应该保存在【哈希】表总的"]],[1718,1718],[1739,1739]]],[1561778503637,["GJX@GJXAIOU",[[-1,1737,"总的"]],[1739,1739],[1737,1737]]],[1561778509550,["GJX@GJXAIOU",[[1,1737,"中的哪一个位置；"]],[1737,1737],[1745,1745]]],[1561778513229,["GJX@GJXAIOU",[[1,1746,"  - \n"]],[1745,1745],[1750,1750]]],[1561778534918,["GJX@GJXAIOU",[[1,1750,"情况一：该位置没有任何元素，"]],[1750,1750],[1764,1764]]],[1561778540318,["GJX@GJXAIOU",[[1,1764,"直接插入；"]],[1764,1764],[1769,1769]]],[1561778540735,["GJX@GJXAIOU",[[1,1770,"  - \n"]],[1769,1769],[1774,1774]]],[1561778573137,["GJX@GJXAIOU",[[1,1774,"情况二：该位置存在其他元素，哈希表就会调研"]],[1774,1774],[1795,1795]]],[1561778574143,["GJX@GJXAIOU",[[-1,1793,"调研"]],[1795,1795],[1793,1793]]],[1561778582021,["GJX@GJXAIOU",[[1,1793,"调用该元素的e"]],[1793,1793],[1800,1800]]],[1561778582044,["GJX@GJXAIOU",[[1,1799," "]],[1800,1800],[1801,1801]]],[1561778586478,["GJX@GJXAIOU",[[1,1801,"quals方法"]],[1801,1801],[1808,1808]]],[1561778586504,["GJX@GJXAIOU",[[1,1806," "]],[1808,1808],[1809,1809]]],[1561778591062,["GJX@GJXAIOU",[[1,1809,"，和以及"]],[1809,1809],[1813,1813]]],[1561778593299,["GJX@GJXAIOU",[[-1,1811,"以及"]],[1813,1813],[1811,1811]]],[1561778649524,["GJX@GJXAIOU",[[1,1811,"已经保存在哈希表里面的元素进行比较；"]],[1811,1811],[1829,1829]]],[1561778650291,["GJX@GJXAIOU",[[1,1830,"  - \n"]],[1829,1829],[1834,1834]]],[1561778651068,["GJX@GJXAIOU",[[1,1832,"  "]],[1834,1834],[1836,1836]]],[1561778653990,["GJX@GJXAIOU",[[1,1836,"如果比较的"]],[1836,1836],[1841,1841]]],[1561778657788,["GJX@GJXAIOU",[[1,1841,"结果为t"]],[1841,1841],[1845,1845]]],[1561778657813,["GJX@GJXAIOU",[[1,1844," "]],[1845,1845],[1846,1846]]],[1561778667953,["GJX@GJXAIOU",[[1,1846,"rue，表示相同的元素，无法添加；"]],[1846,1846],[1863,1863]]],[1561778668131,["GJX@GJXAIOU",[[1,1864,"    - \n"]],[1863,1863],[1870,1870]]],[1561778674391,["GJX@GJXAIOU",[[1,1870,"如果比较的结果为f"]],[1870,1870],[1879,1879]]],[1561778674417,["GJX@GJXAIOU",[[1,1878," "]],[1879,1879],[1880,1880]]],[1561778674604,["GJX@GJXAIOU",[[1,1880,"l"]],[1880,1880],[1881,1881]]],[1561778675283,["GJX@GJXAIOU",[[-1,1880,"l"]],[1881,1881],[1880,1880]]],[1561778686015,["GJX@GJXAIOU",[[1,1880,"alse,biao"]],[1880,1880],[1889,1889]]],[1561778687604,["GJX@GJXAIOU",[[-1,1885,"biao"]],[1889,1889],[1885,1885]]],[1561778698103,["GJX@GJXAIOU",[[1,1885,"表示为不同的元素怒"]],[1885,1885],[1894,1894]]],[1561778698539,["GJX@GJXAIOU",[[-1,1893,"怒"]],[1894,1894],[1893,1893]]],[1561778702181,["GJX@GJXAIOU",[[1,1893,"，可以添加；"]],[1893,1893],[1899,1899]]],[1561784832546,["GJX@GJXAIOU",[[1,1468,"\n"]],[1467,1467],[1468,1468]]],[1561784832664,["GJX@GJXAIOU",[[1,1469,"\n"]],[1468,1468],[1469,1469]]],[1561784832831,["GJX@GJXAIOU",[[1,1470,"\n"]],[1469,1469],[1470,1470]]],[1561785728849,["GJX@GJXAIOU",[[1,1904,"代码实现："]],[1904,1904],[1909,1909]]],[1561785729126,["GJX@GJXAIOU",[[1,1923,"\n"]],[1909,1909],[1910,1910]]],[1561785730593,["GJX@GJXAIOU",[[1,1910,"···"]],[1910,1910],[1913,1913]]],[1561785731903,["GJX@GJXAIOU",[[-1,1910,"···"]],[1913,1913],[1910,1910]]],[1561785733338,["GJX@GJXAIOU",[[1,1910,"```"]],[1910,1910],[1913,1913]]],[1561785733364,["GJX@GJXAIOU",[[1,1913,"language\n```\n"]],[1913,1913],[1913,1921]]],[1561785734463,["GJX@GJXAIOU",[[-1,1913,"language"],[1,1921,"j"]],[1913,1921],[1914,1914]]],[1561785734872,["GJX@GJXAIOU",[[1,1914,"ava"]],[1914,1914],[1917,1917]]],[1561785735023,["GJX@GJXAIOU",[[1,1918,"\n"]],[1917,1917],[1918,1918]]],[1561785763814,["GJX@GJXAIOU",[[1,1918,"package study;\n\nimport java.util.HashSet;\n\n\n/**\n * class detail:hashSet\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass StudentT{\n\tprivate int id;\n\tprivate String name;\n\t\n\tpublic StudentT() {\t}\n\t\n\tpublic StudentT(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id  + \"Name : \" + name + \"]\";\n\t}\n\t//重写HashCode和equals方法\n\t@Override\n\tpublic boolean equals(Object object) {\n\t\tSystem.out.println(\"********equals*********\");\n\t\tStudentT studentT = (StudentT) object;\n\t\t//return this.id == studentT.id;\n\t\treturn this.name == studentT.name;\n\t}\n\t\t\n\t@Override\n\tpublic int hashCode() {\n\t\tSystem.out.println(\"*********hashCode***********\");\n\t\treturn this.id;\n\t}\n}\t\n\n\npublic class HashSet_Use {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashSet = new HashSet();\n\t\t\n\t\thashSet.add(new StudentT(1,\"A\"));\n\t\thashSet.add(new StudentT(2,\"C\"));\n\t\thashSet.add(new StudentT(3, \"B\"));\n\t\thashSet.add(new StudentT(2,\"D\"));\n\t\tSystem.out.println(hashSet);\n\t}\t\n\t\t\n}\n\n"]],[1918,1918],[2943,2943]]],[1561785766422,["GJX@GJXAIOU",[[-1,1961,"\n"]],[1961,1961],[1960,1960]]],[1561785766582,["GJX@GJXAIOU",[[-1,1960,"\n"]],[1960,1960],[1959,1959]]],[1561785775470,["GJX@GJXAIOU",[[1,2960,"\n"]],[2945,2945],[2946,2946]]],[1561785777136,["GJX@GJXAIOU",[[1,2946,"cong"]],[2946,2946],[2950,2950]]],[1561785778142,["GJX@GJXAIOU",[[-1,2946,"cong"]],[2950,2950],[2946,2946]]],[1561785783235,["GJX@GJXAIOU",[[1,2946,"重写equals"]],[2946,2946],[2954,2954]]],[1561785783261,["GJX@GJXAIOU",[[1,2948," "]],[2954,2954],[2955,2955]]],[1561785787409,["GJX@GJXAIOU",[[1,2955,"方法"]],[2955,2955],[2957,2957]]],[1561785787436,["GJX@GJXAIOU",[[1,2955," "]],[2957,2957],[2958,2958]]],[1561785798686,["GJX@GJXAIOU",[[1,2958,"中，如果返回为：return this.id ===="]],[2958,2958],[2983,2983]]],[1561785798756,["GJX@GJXAIOU",[[1,2983," "]],[2983,2983],[2984,2984]]],[1561785799969,["GJX@GJXAIOU",[[-1,2983,"== "]],[2984,2984],[2981,2981]]],[1561785807653,["GJX@GJXAIOU",[[1,2983," studentT.id·"]],[2983,2983],[2996,2996]]],[1561785808711,["GJX@GJXAIOU",[[-1,2995,"·"]],[2996,2996],[2995,2995]]],[1561785809208,["GJX@GJXAIOU",[[1,2995,"`"]],[2995,2995],[2996,2996]]],[1561785812353,["GJX@GJXAIOU",[[1,2966,"`"]],[2966,2966],[2967,2967]]],[1561785822875,["GJX@GJXAIOU",[[1,2997,"程序运行结果为："]],[2997,2997],[3005,3005]]],[1561785825679,["GJX@GJXAIOU",[[1,3020,"\n"]],[3005,3005],[3006,3006]]],[1561785829003,["GJX@GJXAIOU",[[1,3006,"如果范围"]],[3006,3006],[3010,3010]]],[1561785830087,["GJX@GJXAIOU",[[-1,3008,"范围"]],[3010,3010],[3008,3008]]],[1561785834713,["GJX@GJXAIOU",[[1,3008,"返回为：``"]],[3008,3008],[3014,3014]]],[1561785838704,["GJX@GJXAIOU",[[1,3013,"return thsi"]],[3013,3013],[3024,3024]]],[1561785839582,["GJX@GJXAIOU",[[-1,3022,"si"]],[3024,3024],[3022,3022]]],[1561785840720,["GJX@GJXAIOU",[[1,3022,"id."]],[3022,3022],[3025,3025]]],[1561785841297,["GJX@GJXAIOU",[[-1,3023,"d."]],[3025,3025],[3023,3023]]],[1561785841955,["GJX@GJXAIOU",[[1,3023,"s,"]],[3023,3023],[3025,3025]]],[1561785842815,["GJX@GJXAIOU",[[-1,3024,","]],[3025,3025],[3024,3024]]],[1561785843354,["GJX@GJXAIOU",[[1,3024,".,"]],[3024,3024],[3026,3026]]],[1561785843975,["GJX@GJXAIOU",[[-1,3025,","]],[3026,3026],[3025,3025]]],[1561785847771,["GJX@GJXAIOU",[[1,3025,"name ==  S"]],[3025,3025],[3035,3035]]],[1561785848489,["GJX@GJXAIOU",[[-1,3033," S"]],[3035,3035],[3033,3033]]],[1561785849329,["GJX@GJXAIOU",[[1,3033,"S"]],[3033,3033],[3034,3034]]],[1561785849878,["GJX@GJXAIOU",[[-1,3033,"S"]],[3034,3034],[3033,3033]]],[1561785851991,["GJX@GJXAIOU",[[1,3033,"studetn"]],[3033,3033],[3040,3040]]],[1561785853366,["GJX@GJXAIOU",[[-1,3038,"tn"]],[3040,3040],[3038,3038]]],[1561785856484,["GJX@GJXAIOU",[[1,3038,"ntt"]],[3038,3038],[3041,3041]]],[1561785857189,["GJX@GJXAIOU",[[-1,3040,"t"]],[3041,3041],[3040,3040]]],[1561785860567,["GJX@GJXAIOU",[[1,3040,"T.name"]],[3040,3040],[3046,3046]]],[1561785866958,["GJX@GJXAIOU",[[1,3047,"程序返回"]],[3047,3047],[3051,3051]]],[1561785870350,["GJX@GJXAIOU",[[-1,3049,"返回"]],[3051,3051],[3049,3049]]],[1561785873792,["GJX@GJXAIOU",[[1,3049,"运行结果为："]],[3049,3049],[3055,3055]]],[1561785874726,["GJX@GJXAIOU",[[1,3070,"\n"]],[3055,3055],[3056,3056]]],[1561785893738,["GJX@GJXAIOU",[[1,3056,"```"]],[3056,3056],[3059,3059]]],[1561785893764,["GJX@GJXAIOU",[[1,3059,"language\n```\n"]],[3059,3059],[3059,3067]]],[1561785895646,["GJX@GJXAIOU",[[-1,3059,"language"]],[3059,3067],[3059,3059]]],[1561785896470,["GJX@GJXAIOU",[[1,3060,"\n"]],[3059,3059],[3060,3060]]],[1561785896968,["GJX@GJXAIOU",[[1,3060,"*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 2Name : D], [ ID : 3Name : B]]"]],[3060,3060],[3276,3276]]],[1561785899415,["GJX@GJXAIOU",[[1,3006,"\n"]],[3005,3005],[3006,3006]]],[1561785900955,["GJX@GJXAIOU",[[1,3006,"```"]],[3006,3006],[3009,3009]]],[1561785902974,["GJX@GJXAIOU",[[1,3010,"\n"]],[3009,3009],[3010,3010]]],[1561785903265,["GJX@GJXAIOU",[[1,3011,"\n"]],[3010,3010],[3011,3011]]],[1561785903863,["GJX@GJXAIOU",[[1,3011,"```"]],[3011,3011],[3014,3014]]],[1561785925813,["GJX@GJXAIOU",[[1,3010,"*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 3Name : B]]"]],[3010,3010],[3207,3207]]],[1561785961166,["GJX@GJXAIOU",[[1,1903,"    - \n"]],[1902,1902],[1909,1909]]],[1561785964502,["GJX@GJXAIOU",[[1,1907,"  "]],[1909,1909],[1911,1911]]],[1561785967726,["GJX@GJXAIOU",[[-1,1903,"      "]],[1911,1911],[1905,1905]]],[1561785969695,["GJX@GJXAIOU",[[1,1905,"HAXI"]],[1905,1905],[1909,1909]]],[1561785970854,["GJX@GJXAIOU",[[-1,1905,"HAXI"]],[1909,1909],[1905,1905]]],[1561785972239,["GJX@GJXAIOU",[[1,1905,"hax"]],[1905,1905],[1908,1908]]],[1561785972861,["GJX@GJXAIOU",[[-1,1905,"hax"]],[1908,1908],[1905,1905]]],[1561785974500,["GJX@GJXAIOU",[[1,1905,"哈希"]],[1905,1905],[1907,1907]]],[1561786024424,["GJX@GJXAIOU",[[1,1907,"表中每一个单元都是一个桶式结构，可以保存多个元素，允许元素共存；"]],[1907,1907],[1939,1939]]],[1561787879875,["GJX@GJXAIOU",[[1,3525,"HashSet小"]],[3525,3525],[3533,3533]]],[1561787879901,["GJX@GJXAIOU",[[1,3532," "]],[3533,3533],[3534,3534]]],[1561787882447,["GJX@GJXAIOU",[[1,3534,"代码实验："]],[3534,3534],[3539,3539]]],[1561787882782,["GJX@GJXAIOU",[[1,3553,"\n"]],[3539,3539],[3540,3540]]],[1561787884213,["GJX@GJXAIOU",[[1,3540,"```"]],[3540,3540],[3543,3543]]],[1561787884240,["GJX@GJXAIOU",[[1,3543,"language\n```\n"]],[3543,3543],[3543,3551]]],[1561787885509,["GJX@GJXAIOU",[[-1,3543,"language"],[1,3551,"j"]],[3543,3551],[3544,3544]]],[1561787885887,["GJX@GJXAIOU",[[1,3544,"ava"]],[3544,3544],[3547,3547]]],[1561787886052,["GJX@GJXAIOU",[[1,3548,"\n"]],[3547,3547],[3548,3548]]],[1561787887204,["GJX@GJXAIOU",[[1,3548,"/**\n * \n */\npackage study;\n\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * class detail: 从键盘上接收用户输入（账号和密码），如果账号相同则认为是相同用户，则无法添加，使用HashSet；\n * @author GJXAIOU\n * @since  2019年6月29日\n */\nclass Account{\n\tprivate String userName;\n\tprivate String password;\n\t\n\tpublic Account() {}\n\t\n\tpublic  Account(String userName, String password) {\n\t\tthis.userName = userName;\n\t\tthis.password = password;\n\t}\n\t\n\n\t@Override\n\tpublic int hashCode() {\n\t\t//这里使用用户的hashCode作为当前对象hashCode值，因为字符串只要是不同的字符串，就会有不同的hashCode\n\t\treturn this.userName.hashCode();\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object arg0) {\n\t\tAccount account = (Account)arg0;\n\t\treturn this.userName.equals(account.userName);\n\t}\n}\n\n\npublic class Practice {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashset = new HashSet();\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"请输入用户名：\");\n\t\t\tString userName = scanner.nextLine();\n\t\t\t\n\t\t\tSystem.out.println(\"请输入密码：\");\n\t\t\tString password = scanner.nextLine();\n\n\t\t\tAccount account = new Account(userName, password);\n\t\t\tif (hashset.add(account)) {\n\t\t\t\tSystem.out.println(\"注册成功\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"用户名已存在，请重新输入\");\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n"]],[3548,3548],[4736,4736]]],[1561787889580,["GJX@GJXAIOU",[[-1,3548,"/**\n * \n */"]],[3548,3559],[3548,3548]]],[1561788822022,["GJX@GJXAIOU",[[1,4731,"- TreeSet实现"]],[4731,4731],[4742,4742]]],[1561788822051,["GJX@GJXAIOU",[[1,4740," "]],[4742,4742],[4743,4743]]],[1561788823065,["GJX@GJXAIOU",[[1,4743,"类"]],[4743,4743],[4744,4744]]],[1561788823515,["GJX@GJXAIOU",[[1,4745,"- \n"]],[4744,4744],[4747,4747]]],[1561788824578,["GJX@GJXAIOU",[[-1,4745,"- "]],[4747,4747],[4745,4745]]],[1561788865459,["GJX@GJXAIOU",[[1,4745,"TreeSet是一个"]],[4745,4745],[4755,4755]]],[1561788865487,["GJX@GJXAIOU",[[1,4752," "]],[4755,4755],[4756,4756]]],[1561788867678,["GJX@GJXAIOU",[[1,4756,"属性"]],[4756,4756],[4758,4758]]],[1561788868342,["GJX@GJXAIOU",[[-1,4756,"属性"]],[4758,4758],[4756,4756]]],[1561788876205,["GJX@GJXAIOU",[[1,4756,"树形结构的Set"]],[4756,4756],[4764,4764]]],[1561788876234,["GJX@GJXAIOU",[[1,4761," "]],[4764,4764],[4765,4765]]],[1561788877237,["GJX@GJXAIOU",[[1,4765,"结构"]],[4765,4765],[4767,4767]]],[1561788877266,["GJX@GJXAIOU",[[1,4765," "]],[4767,4767],[4768,4768]]],[1561788878230,["GJX@GJXAIOU",[[1,4768,"；"]],[4768,4768],[4769,4769]]],[1561788878803,["GJX@GJXAIOU",[[1,4782,"\n"]],[4769,4769],[4770,4770]]],[1561788881773,["GJX@GJXAIOU",[[1,4770,"  发现："]],[4770,4770],[4775,4775]]],[1561788888925,["GJX@GJXAIOU",[[1,4775,"TreeSet中"]],[4775,4775],[4783,4783]]],[1561788888954,["GJX@GJXAIOU",[[1,4782," "]],[4783,4783],[4784,4784]]],[1561788918066,["GJX@GJXAIOU",[[1,4784,"添加元素原本是字符串类型，当添加自定义对象或者数组的"]],[4784,4784],[4810,4810]]],[1561788918755,["GJX@GJXAIOU",[[-1,4807,"数组的"]],[4810,4810],[4807,4807]]],[1561788927942,["GJX@GJXAIOU",[[1,4807,"数字的时候，会报异常；"]],[4807,4807],[4818,4818]]],[1561788939423,["GJX@GJXAIOU",[[1,4819,"  \n"]],[4818,4818],[4821,4821]]],[1561788943832,["GJX@GJXAIOU",[[1,4821,"原因："]],[4821,4821],[4824,4824]]],[1561788950426,["GJX@GJXAIOU",[[1,4824,"因为TreeSet"]],[4824,4824],[4833,4833]]],[1561788950454,["GJX@GJXAIOU",[[1,4826," "]],[4833,4833],[4834,4834]]],[1561788954527,["GJX@GJXAIOU",[[1,4834,"是"]],[4834,4834],[4835,4835]]],[1561788954557,["GJX@GJXAIOU",[[1,4834," "]],[4835,4835],[4836,4836]]],[1561788960876,["GJX@GJXAIOU",[[1,4836,"一个树形结构，所有的额"]],[4836,4836],[4847,4847]]],[1561788962815,["GJX@GJXAIOU",[[-1,4846,"额"]],[4847,4847],[4846,4846]]],[1561788968728,["GJX@GJXAIOU",[[1,4846,"元素都需要精细"]],[4846,4846],[4853,4853]]],[1561788969885,["GJX@GJXAIOU",[[-1,4851,"精细"]],[4853,4853],[4851,4851]]],[1561788974034,["GJX@GJXAIOU",[[1,4851,"进行比较滞后"]],[4851,4851],[4857,4857]]],[1561788975219,["GJX@GJXAIOU",[[-1,4855,"滞后"]],[4857,4857],[4855,4855]]],[1561788985855,["GJX@GJXAIOU",[[1,4855,"之后才可以放入发哦Set"]],[4855,4855],[4867,4867]]],[1561788985886,["GJX@GJXAIOU",[[1,4864," "]],[4867,4867],[4868,4868]]],[1561788988084,["GJX@GJXAIOU",[[-1,4863,"哦 Set"]],[4868,4868],[4863,4863]]],[1561788994579,["GJX@GJXAIOU",[[1,4863,"入到Set"]],[4863,4863],[4868,4868]]],[1561788994609,["GJX@GJXAIOU",[[1,4865," "]],[4868,4868],[4869,4869]]],[1561788995679,["GJX@GJXAIOU",[[1,4869,"集合"]],[4869,4869],[4871,4871]]],[1561788995709,["GJX@GJXAIOU",[[1,4869," "]],[4871,4871],[4872,4872]]],[1561788996282,["GJX@GJXAIOU",[[1,4872,"中"]],[4872,4872],[4873,4873]]],[1561789001562,["GJX@GJXAIOU",[[-1,4862,"发入"]],[4864,4864],[4862,4862]]],[1561789027694,["GJX@GJXAIOU",[[1,4871,"，而字符串和自定义类对象是没有比较的方式和方法的；"]],[4871,4871],[4896,4896]]],[1561789028555,["GJX@GJXAIOU",[[1,4897,"  \n"]],[4896,4896],[4899,4899]]],[1561789049510,["GJX@GJXAIOU",[[1,4899,"也就是说【要求】在TreeSet"]],[4899,4899],[4915,4915]]],[1561789049538,["GJX@GJXAIOU",[[1,4908," "]],[4915,4915],[4916,4916]]],[1561789051102,["GJX@GJXAIOU",[[1,4916,"里面"]],[4916,4916],[4918,4918]]],[1561789051131,["GJX@GJXAIOU",[[1,4916," "]],[4918,4918],[4919,4919]]],[1561789063968,["GJX@GJXAIOU",[[1,4919,"的所有的元素都要有【比较的方式】"]],[4919,4919],[4935,4935]]],[1561789077238,["GJX@GJXAIOU",[[1,4935,"或者有【自然顺序】"]],[4935,4935],[4944,4944]]],[1561789081692,["GJX@GJXAIOU",[[1,4945,"  \n"]],[4944,4944],[4947,4947]]],[1561789081836,["GJX@GJXAIOU",[[-1,4945,"  "],[1,4947,"\n"]],[4947,4947],[4946,4946]]],[1561789088616,["GJX@GJXAIOU",[[1,4946,"TreeSet总"]],[4946,4946],[4954,4954]]],[1561789088644,["GJX@GJXAIOU",[[1,4953," "]],[4954,4954],[4955,4955]]],[1561789091094,["GJX@GJXAIOU",[[-1,4954,"总"]],[4955,4955],[4954,4954]]],[1561789100679,["GJX@GJXAIOU",[[1,4954,"中添加自定义元素的方式："]],[4954,4954],[4966,4966]]],[1561789101063,["GJX@GJXAIOU",[[1,4979,"\n"]],[4966,4966],[4967,4967]]],[1561789125158,["GJX@GJXAIOU",[[1,4967,"  - 方式一：让这个自定义类【遵从】Comparable"]],[4967,4967],[4996,4996]]],[1561789129463,["GJX@GJXAIOU",[[1,4996,"接口"]],[4996,4996],[4998,4998]]],[1561789129491,["GJX@GJXAIOU",[[1,4996," "]],[4998,4998],[4999,4999]]],[1561789137367,["GJX@GJXAIOU",[[1,4999,"，实现compare"]],[4999,4999],[5009,5009]]],[1561789137397,["GJX@GJXAIOU",[[1,5002," "]],[5009,5009],[5010,5010]]],[1561789140318,["GJX@GJXAIOU",[[1,5010,"To方法"]],[5010,5010],[5014,5014]]],[1561789140345,["GJX@GJXAIOU",[[1,5012," "]],[5014,5014],[5015,5015]]],[1561789140912,["GJX@GJXAIOU",[[1,5015,"；"]],[5015,5015],[5016,5016]]],[1561790181143,["GJX@GJXAIOU",[[1,5018,"```"]],[5018,5018],[5021,5021]]],[1561790181172,["GJX@GJXAIOU",[[1,5021,"language\n```\n"]],[5021,5021],[5021,5029]]],[1561790182379,["GJX@GJXAIOU",[[-1,5021,"language"],[1,5029,"j"]],[5021,5029],[5022,5022]]],[1561790182829,["GJX@GJXAIOU",[[1,5022,"ava"]],[5022,5022],[5025,5025]]],[1561790182924,["GJX@GJXAIOU",[[1,5026,"\n"]],[5025,5025],[5026,5026]]],[1561790184097,["GJX@GJXAIOU",[[1,5026,"package study;\n\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass Person implements Comparable{\n\tprivate int id;\n\tprivate String name;\n\tprivate int salary;\n\t\n\tpublic Person(){ }\n\t\n\tpublic Person(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\t\n\t@Override\n\t//返回值有三种：0、正整数、负整数\n\t/*   0            表示相同；\n\t *   正整数    表示【调用这个方法的对象】大于传值的对象；\n\t *   负整数    表示【调用这个方法的对象】小于传值的对象；\n\t */\n\tpublic int compareTo(Object arg0) {\n\t\t//这里以工资为标准\n\t\tPerson person = (Person)arg0;\n\t\treturn this.salary  -  person.salary;\n\t}\n\t\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n}\n\n\npublic class TreeSet_Use {\n\tpublic static void main(String[] args) {\n\t\tTreeSet treeSet = new TreeSet();\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new Person(1, \"A\", 20));\n\t\ttreeSet.add(new Person(2,\"B\",24));\n\t\ttreeSet.add(new Person(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n"]],[5026,5026],[6152,6152]]],[1561790192642,["GJX@GJXAIOU",[[-1,5672,"\n"]],[5672,5672],[5671,5671]]],[1561790198459,["GJX@GJXAIOU",[[1,6167,"\n"]],[6156,6156],[6157,6157]]],[1561790205486,["GJX@GJXAIOU",[[1,6157,"  - "]],[6157,6157],[6161,6161]]],[1561790206135,["GJX@GJXAIOU",[[1,6161,"fang"]],[6161,6161],[6165,6165]]],[1561790207098,["GJX@GJXAIOU",[[-1,6161,"fang"]],[6165,6165],[6161,6161]]],[1561790234064,["GJX@GJXAIOU",[[1,6161,"方法二：自定义比较器，这个比较器是【遵从】Comparator接口"]],[6161,6161],[6194,6194]]],[1561790234093,["GJX@GJXAIOU",[[1,6192," "]],[6194,6194],[6195,6195]]],[1561790237615,["GJX@GJXAIOU",[[1,6195,"，实现c"]],[6195,6195],[6199,6199]]],[1561790237645,["GJX@GJXAIOU",[[1,6198," "]],[6199,6199],[6200,6200]]],[1561790238828,["GJX@GJXAIOU",[[1,6200,"im"]],[6200,6200],[6202,6202]]],[1561790239506,["GJX@GJXAIOU",[[-1,6200,"im"]],[6202,6202],[6200,6200]]],[1561790240283,["GJX@GJXAIOU",[[1,6200,"op"]],[6200,6200],[6202,6202]]],[1561790241082,["GJX@GJXAIOU",[[-1,6201,"p"]],[6202,6202],[6201,6201]]],[1561790245349,["GJX@GJXAIOU",[[1,6201,"mpare()"]],[6201,6201],[6208,6208]]],[1561790251947,["GJX@GJXAIOU",[[1,6207,"Object 0"]],[6207,6207],[6215,6215]]],[1561790253570,["GJX@GJXAIOU",[[-1,6214,"0"]],[6215,6215],[6214,6214]]],[1561790261223,["GJX@GJXAIOU",[[1,6214,"o,Object o1"]],[6214,6214],[6225,6225]]],[1561790266788,["GJX@GJXAIOU",[[1,6215,"1"]],[6215,6215],[6216,6216]]],[1561790268609,["GJX@GJXAIOU",[[-1,6225,"1"]],[6226,6226],[6225,6225]]],[1561790268789,["GJX@GJXAIOU",[[1,6225,"2"]],[6225,6225],[6226,6226]]],[1561790273486,["GJX@GJXAIOU",[[1,6199,"int "]],[6199,6199],[6203,6203]]],[1561790276517,["GJX@GJXAIOU",[[1,6199,"`"]],[6199,6199],[6200,6200]]],[1561790277927,["GJX@GJXAIOU",[[1,6232,"`"]],[6232,6232],[6233,6233]]],[1561790329734,["GJX@GJXAIOU",[[1,6234,"keyi "]],[6234,6234],[6239,6239]]],[1561790331140,["GJX@GJXAIOU",[[-1,6234,"keyi "]],[6239,6239],[6234,6234]]],[1561790337800,["GJX@GJXAIOU",[[1,6234,"可以在创建啊"]],[6234,6234],[6240,6240]]],[1561790338338,["GJX@GJXAIOU",[[-1,6239,"啊"]],[6240,6240],[6239,6239]]],[1561790340111,["GJX@GJXAIOU",[[1,6239,"t"]],[6239,6239],[6240,6240]]],[1561790340141,["GJX@GJXAIOU",[[1,6239," "]],[6240,6240],[6241,6241]]],[1561790343012,["GJX@GJXAIOU",[[1,6241,"reeSet"]],[6241,6241],[6247,6247]]],[1561790345827,["GJX@GJXAIOU",[[-1,6240,"t"]],[6241,6241],[6240,6240]]],[1561790346204,["GJX@GJXAIOU",[[1,6240,"T"]],[6240,6240],[6241,6241]]],[1561790350235,["GJX@GJXAIOU",[[1,6247,"duixan"]],[6247,6247],[6253,6253]]],[1561790351378,["GJX@GJXAIOU",[[-1,6246,"tduixan"]],[6253,6253],[6246,6246]]],[1561790353757,["GJX@GJXAIOU",[[1,6246,"t的"]],[6246,6246],[6248,6248]]],[1561790353786,["GJX@GJXAIOU",[[1,6247," "]],[6248,6248],[6249,6249]]],[1561790355160,["GJX@GJXAIOU",[[1,6249,"时候"]],[6249,6249],[6251,6251]]],[1561790362397,["GJX@GJXAIOU",[[1,6248,"兑仓"]],[6248,6248],[6250,6250]]],[1561790363193,["GJX@GJXAIOU",[[-1,6247," 兑仓"]],[6250,6250],[6247,6247]]],[1561790365284,["GJX@GJXAIOU",[[1,6247," 对象"]],[6247,6247],[6250,6250]]],[1561790378973,["GJX@GJXAIOU",[[1,6253,"，传入比较器对西南作为比较方式；"]],[6253,6253],[6269,6269]]],[1561791702589,["GJX@GJXAIOU",[[1,6271,"```"]],[6271,6271],[6274,6274]]],[1561791702620,["GJX@GJXAIOU",[[1,6274,"language\n```\n"]],[6274,6274],[6274,6282]]],[1561791703582,["GJX@GJXAIOU",[[-1,6274,"language"],[1,6282,"j"]],[6274,6282],[6275,6275]]],[1561791703988,["GJX@GJXAIOU",[[1,6275,"ava"]],[6275,6275],[6278,6278]]],[1561791704066,["GJX@GJXAIOU",[[1,6279,"\n"]],[6278,6278],[6279,6279]]],[1561791705289,["GJX@GJXAIOU",[[1,6279,"package study;\n\nimport java.util.Comparator;\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass PersonP{\n\tprivate int id;\n\tprivate String name;\n\t int salary;\n\t\n\tpublic PersonP(){ }\n\t\n\tpublic PersonP(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n\t\n}\n\n\n\n//自定义比较器\n\tclass MyCompare implements Comparator{\n\n\t\t@Override\n\t\tpublic int compare(Object arg0, Object arg1) {\n\t\t\tPersonP person0 = (PersonP) arg0;\n\t\t\tPersonP person1 = (PersonP) arg1;\n\t\t\treturn person0.salary - person1.salary;\n\t\t}\n\t}\n\n\n\t\npublic class ZiDingYiCompare {\n\tpublic static void main(String[] args) {\n\t\t//创建TreeSet时候，传入自定义比较器对象\n\t\tTreeSet treeSet = new TreeSet(new MyCompare());\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new PersonP(1, \"A\", 20));\n\t\ttreeSet.add(new PersonP(2, \"B\", 24));\n\t\ttreeSet.add(new PersonP(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n"]],[6279,6279],[7441,7441]]],[1561791712737,["GJX@GJXAIOU",[[-1,6260,"西南"]],[6262,6262],[6260,6260]]],[1561791754930,["GJX@GJXAIOU",[[1,7111,"\n\t\t"]],[7111,7111],[7114,7114]]]],null,"GJX@GJXAIOU"],["43b1b312-bf50-4414-8216-3f4a4fa0b157",1563433499285,"\n## 复习\n- Collection 集合的总接口\n      add(Object o)   addAll(Collection c)    remove(Object o)    clear() removeAll(Collection c)   retainAll(Collection c)    contains(Object o)    containsAll(Collection c)   isEmpty()  equals(Collection c)    iterator()    size()    toArray()\n- List 接口  有序 可重复\n          add(int index, Object o) addAll(int index, Collection c) indexOf(Object o)\n          lastIndexOf(Object o) get(int index) subList(int fromIndex, int toIndex)\n          set(int index, Object o) listIterator() \n- ArrayList  \n              底层维护的是一个Object类型的数组，默认的元素个数为10 \n              特征： 增删慢，查找快\n                  ensureCapacity(int minCapacity);\n                  trimToSize();\n- LinkedList \n              底层维护的是一个链表\n              特征： 增删快，查找慢\n                  addFrist(Object o) addLast(Object o) getFrist() getLast() removeFirst() \n                  removeLast()  \n-  Vector (了解)\n              和ArrayList是类似的，基本上常用的方法也是一致\n                  线程安全，效率低！！！\n- Set\n  \n  \n- 迭代的方法：\n   Iterator \n      共有的：  next() hasNext() remove()\n   ListIterator\n       特有的： add(Object o) set(Object o) nextIndex()\n\n \n\n\n\n\n\n\n\n\n\n## Set\n是一个接口、无序（指添加顺序和展示顺序可能不一致）；\n没有特有的方法；\n一般使用程序：\n```java\npackage study;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Set_Use {\n\tpublic static void main(String[] args) {\n\t\tSet set = new HashSet();\n\t\t\n\t\tset.add(\"A\");\n\t\tset.add(\"B\");\n\t\tset.add(\"E\");\n\t\tset.add(\"B\");\n\t\tset.add(\"C\");\n\t\tSystem.out.println(set);\n\t}\n}\n```\n结果：\n```\n[A, B, C, E]\n```\n\n\n\n\n### set 两个实现类\n- HashSet：\n在添加元素的时候，每一次都会调用 hashCode 方法；\n下面代码通过重写 hashCode 和 equals 方法，也是首先调用 hashCode 方法，然后调用 equals 方法;\n\n- HashSet 存储原理：\n  - 当向 HashSet 集合中添加元素，HashSet 首先会调用该元素 hashCode 方法，获取该对象的 Hash 值（因为这里进行了 hashCode 方法的重写，所以获取的不再是该对象的地址）。然后通过【移位】计算，计算出该元素应该保存在【哈希】表中的哪一个位置；\n  - 情况一：该位置没有任何元素，直接插入；\n  - 情况二：该位置存在其他元素，哈希表就会调用该元素的 equals 方法，和已经保存在哈希表里面的元素进行比较；\n    - 如果比较的结果为 true，表示相同的元素，无法添加；\n    - 如果比较的结果为 false,表示为不同的元素，可以添加；\n- 哈希表中每一个单元都是一个桶式结构，可以保存多个元素，允许元素共存；\n\n代码实现：\n```java\npackage study;\n\nimport java.util.HashSet;\n/**\n * class detail:hashSet\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass StudentT{\n\tprivate int id;\n\tprivate String name;\n\t\n\tpublic StudentT() {\t}\n\t\n\tpublic StudentT(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id  + \"Name : \" + name + \"]\";\n\t}\n\t//重写HashCode和equals方法\n\t@Override\n\tpublic boolean equals(Object object) {\n\t\tSystem.out.println(\"********equals*********\");\n\t\tStudentT studentT = (StudentT) object;\n\t\t//return this.id == studentT.id;\n\t\treturn this.name == studentT.name;\n\t}\n\t\t\n\t@Override\n\tpublic int hashCode() {\n\t\tSystem.out.println(\"*********hashCode***********\");\n\t\treturn this.id;\n\t}\n}\t\n\n\npublic class HashSet_Use {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashSet = new HashSet();\n\t\t\n\t\thashSet.add(new StudentT(1,\"A\"));\n\t\thashSet.add(new StudentT(2,\"C\"));\n\t\thashSet.add(new StudentT(3, \"B\"));\n\t\thashSet.add(new StudentT(2,\"D\"));\n\t\tSystem.out.println(hashSet);\n\t}\t\n\t\t\n}\n\n\n```\n重写 equals 方法中，如果返回为：`return this.id == studentT.id`程序运行结果为：\n```\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 3Name : B]]\n```\n如果返回为：`return this.name == studentT.name`程序运行结果为：\n```\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 2Name : D], [ ID : 3Name : B]]\n```\n\nHashSet 小代码实验：\n```java\n\npackage study;\n\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * class detail: 从键盘上接收用户输入（账号和密码），如果账号相同则认为是相同用户，则无法添加，使用HashSet；\n * @author GJXAIOU\n * @since  2019年6月29日\n */\nclass Account{\n\tprivate String userName;\n\tprivate String password;\n\t\n\tpublic Account() {}\n\t\n\tpublic  Account(String userName, String password) {\n\t\tthis.userName = userName;\n\t\tthis.password = password;\n\t}\n\t\n\n\t@Override\n\tpublic int hashCode() {\n\t\t//这里使用用户的hashCode作为当前对象hashCode值，因为字符串只要是不同的字符串，就会有不同的hashCode\n\t\treturn this.userName.hashCode();\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object arg0) {\n\t\tAccount account = (Account)arg0;\n\t\treturn this.userName.equals(account.userName);\n\t}\n}\n\n\npublic class Practice {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashset = new HashSet();\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"请输入用户名：\");\n\t\t\tString userName = scanner.nextLine();\n\t\t\t\n\t\t\tSystem.out.println(\"请输入密码：\");\n\t\t\tString password = scanner.nextLine();\n\n\t\t\tAccount account = new Account(userName, password);\n\t\t\tif (hashset.add(account)) {\n\t\t\t\tSystem.out.println(\"注册成功\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"用户名已存在，请重新输入\");\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\n```\n\n- TreeSet 实现类\nTreeSet 是一个树形结构的 Set 结构；\n  发现：TreeSet 中添加元素原本是字符串类型，当添加自定义对象或者数字的时候，会报异常；\n  原因：因为 TreeSet 是一个树形结构，所有的元素都需要进行比较之后才可以放入到 Set 集合中，而字符串和自定义类对象是没有比较的方式和方法的；\n  也就是说【要求】在 TreeSet 里面的所有的元素都要有【比较的方式】或者有【自然顺序】\n\nTreeSet 中添加自定义元素的方式：\n  - 方式一：让这个自定义类【遵从】Comparable 接口，实现 compareTo 方法；\n\n```java\npackage study;\n\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass Person implements Comparable{\n\tprivate int id;\n\tprivate String name;\n\tprivate int salary;\n\t\n\tpublic Person(){ }\n\t\n\tpublic Person(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\t\n\t@Override\n\t//返回值有三种：0、正整数、负整数\n\t/*   0            表示相同；\n\t *   正整数    表示【调用这个方法的对象】大于传值的对象；\n\t *   负整数    表示【调用这个方法的对象】小于传值的对象；\n\t */\n\tpublic int compareTo(Object arg0) {\n\t\t//这里以工资为标准\n\t\tPerson person = (Person)arg0;\n\t\treturn this.salary  -  person.salary;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n}\n\n\npublic class TreeSet_Use {\n\tpublic static void main(String[] args) {\n\t\tTreeSet treeSet = new TreeSet();\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new Person(1, \"A\", 20));\n\t\ttreeSet.add(new Person(2,\"B\",24));\n\t\ttreeSet.add(new Person(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n\n```\n\n  - 方法二：自定义比较器，这个比较器是【遵从】Comparator 接口，实现 `int compare(Object o1,Object o2)`\n可以在创建 TreeSet 对象的时候，传入比较器对作为比较方式；\n\n```java\npackage study;\n\nimport java.util.Comparator;\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass PersonP{\n\tprivate int id;\n\tprivate String name;\n\t int salary;\n\t\n\tpublic PersonP(){ }\n\t\n\tpublic PersonP(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n\t\n}\n\n\n\n//自定义比较器\n\tclass MyCompare implements Comparator{\n\n\t\t@Override\n\t\tpublic int compare(Object arg0, Object arg1) {\n\t\t\tPersonP person0 = (PersonP) arg0;\n\t\t\tPersonP person1 = (PersonP) arg1;\n\t\t\treturn person0.salary - person1.salary;\n\t\t}\n\t}\n\n\n\t\npublic class ZiDingYiCompare {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//创建TreeSet时候，传入自定义比较器对象\n\t\tTreeSet treeSet = new TreeSet(new MyCompare());\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new PersonP(1, \"A\", 20));\n\t\ttreeSet.add(new PersonP(2, \"B\", 24));\n\t\ttreeSet.add(new PersonP(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n",[[1563433467323,["GJX@GJXAIOU",[[1,0,"---\ntags : \n- java基础\n\nflag: yellow\n---\n@toc"]],[0,0],[43,43]]],[1563433469338,["GJX@GJXAIOU",[[1,44,"\n"]],[43,43],[44,44]]],[1563433469451,["GJX@GJXAIOU",[[1,45,"\n"]],[44,44],[45,45]]],[1563433470988,["GJX@GJXAIOU",[[1,39,"\n"]],[39,39],[40,40]]],[1563433476420,["GJX@GJXAIOU",[[1,46,"# Jva"]],[46,46],[51,51]]],[1563433477387,["GJX@GJXAIOU",[[-1,49,"va"]],[51,51],[49,49]]],[1563433477861,["GJX@GJXAIOU",[[1,49,"abva"]],[49,49],[53,53]]],[1563433478790,["GJX@GJXAIOU",[[-1,50,"bva"]],[53,53],[50,50]]],[1563433486278,["GJX@GJXAIOU",[[1,50,"vaDay17 Set和"]],[50,50],[62,62]]],[1563433486308,["GJX@GJXAIOU",[[1,61," "]],[62,62],[63,63]]],[1563433488105,["GJX@GJXAIOU",[[1,63,"String"]],[63,63],[69,69]]],[1563433488136,["GJX@GJXAIOU",[[1,63," "]],[69,69],[70,70]]],[1563433534224,["GJX@GJXAIOU",[[1,74,"一、collection "]],[74,74],[86,86]]],[1563433534791,["GJX@GJXAIOU",[[1,86,"、"]],[86,86],[87,87]]],[1563433541053,["GJX@GJXAIOU",[[-1,76,"collection、 "]],[87,87],[76,76]]],[1563433550011,["GJX@GJXAIOU",[[1,71,"\n"]],[70,70],[71,71]]],[1563433553891,["GJX@GJXAIOU",[[1,80,"\n"]],[79,79],[80,80]]]],null,"GJX@GJXAIOU"],["201db42e-df8a-4eac-b162-1344cbc5daf8",1563433705509,"---\ntags : \n- java基础\n\nflag: yellow\n---\n\n@toc\n\n# JavaDay17 Set 和 String\n\n## 一、复习\n\n- Collection 集合的总接口\n      add(Object o)   addAll(Collection c)    remove(Object o)    clear() removeAll(Collection c)   retainAll(Collection c)    contains(Object o)    containsAll(Collection c)   isEmpty()  equals(Collection c)    iterator()    size()    toArray()\n- List 接口  有序 可重复\n          add(int index, Object o) addAll(int index, Collection c) indexOf(Object o)\n          lastIndexOf(Object o) get(int index) subList(int fromIndex, int toIndex)\n          set(int index, Object o) listIterator() \n- ArrayList  \n              底层维护的是一个Object类型的数组，默认的元素个数为10 \n              特征： 增删慢，查找快\n                  ensureCapacity(int minCapacity);\n                  trimToSize();\n- LinkedList \n              底层维护的是一个链表\n              特征： 增删快，查找慢\n                  addFrist(Object o) addLast(Object o) getFrist() getLast() removeFirst() \n                  removeLast()  \n-  Vector (了解)\n              和ArrayList是类似的，基本上常用的方法也是一致\n                  线程安全，效率低！！！\n- Set\n  \n  \n- 迭代的方法：\n   Iterator \n      共有的：  next() hasNext() remove()\n   ListIterator\n       特有的： add(Object o) set(Object o) nextIndex()\n\n \n\n\n\n\n\n\n\n\n\n## Set\n是一个接口、无序（指添加顺序和展示顺序可能不一致）；\n没有特有的方法；\n一般使用程序：\n```java\npackage study;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Set_Use {\n\tpublic static void main(String[] args) {\n\t\tSet set = new HashSet();\n\t\t\n\t\tset.add(\"A\");\n\t\tset.add(\"B\");\n\t\tset.add(\"E\");\n\t\tset.add(\"B\");\n\t\tset.add(\"C\");\n\t\tSystem.out.println(set);\n\t}\n}\n```\n结果：\n```\n[A, B, C, E]\n```\n\n\n\n\n### set 两个实现类\n- HashSet：\n在添加元素的时候，每一次都会调用 hashCode 方法；\n下面代码通过重写 hashCode 和 equals 方法，也是首先调用 hashCode 方法，然后调用 equals 方法;\n\n- HashSet 存储原理：\n  - 当向 HashSet 集合中添加元素，HashSet 首先会调用该元素 hashCode 方法，获取该对象的 Hash 值（因为这里进行了 hashCode 方法的重写，所以获取的不再是该对象的地址）。然后通过【移位】计算，计算出该元素应该保存在【哈希】表中的哪一个位置；\n  - 情况一：该位置没有任何元素，直接插入；\n  - 情况二：该位置存在其他元素，哈希表就会调用该元素的 equals 方法，和已经保存在哈希表里面的元素进行比较；\n    - 如果比较的结果为 true，表示相同的元素，无法添加；\n    - 如果比较的结果为 false,表示为不同的元素，可以添加；\n- 哈希表中每一个单元都是一个桶式结构，可以保存多个元素，允许元素共存；\n\n代码实现：\n```java\npackage study;\n\nimport java.util.HashSet;\n/**\n * class detail:hashSet\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass StudentT{\n\tprivate int id;\n\tprivate String name;\n\t\n\tpublic StudentT() {\t}\n\t\n\tpublic StudentT(int id, String name) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id  + \"Name : \" + name + \"]\";\n\t}\n\t//重写HashCode和equals方法\n\t@Override\n\tpublic boolean equals(Object object) {\n\t\tSystem.out.println(\"********equals*********\");\n\t\tStudentT studentT = (StudentT) object;\n\t\t//return this.id == studentT.id;\n\t\treturn this.name == studentT.name;\n\t}\n\t\t\n\t@Override\n\tpublic int hashCode() {\n\t\tSystem.out.println(\"*********hashCode***********\");\n\t\treturn this.id;\n\t}\n}\t\n\n\npublic class HashSet_Use {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashSet = new HashSet();\n\t\t\n\t\thashSet.add(new StudentT(1,\"A\"));\n\t\thashSet.add(new StudentT(2,\"C\"));\n\t\thashSet.add(new StudentT(3, \"B\"));\n\t\thashSet.add(new StudentT(2,\"D\"));\n\t\tSystem.out.println(hashSet);\n\t}\t\n\t\t\n}\n\n\n```\n重写 equals 方法中，如果返回为：`return this.id == studentT.id`程序运行结果为：\n```\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 3Name : B]]\n```\n如果返回为：`return this.name == studentT.name`程序运行结果为：\n```\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n*********hashCode***********\n********equals*********\n[[ ID : 1Name : A], [ ID : 2Name : C], [ ID : 2Name : D], [ ID : 3Name : B]]\n```\n\nHashSet 小代码实验：\n```java\n\npackage study;\n\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * class detail: 从键盘上接收用户输入（账号和密码），如果账号相同则认为是相同用户，则无法添加，使用HashSet；\n * @author GJXAIOU\n * @since  2019年6月29日\n */\nclass Account{\n\tprivate String userName;\n\tprivate String password;\n\t\n\tpublic Account() {}\n\t\n\tpublic  Account(String userName, String password) {\n\t\tthis.userName = userName;\n\t\tthis.password = password;\n\t}\n\t\n\n\t@Override\n\tpublic int hashCode() {\n\t\t//这里使用用户的hashCode作为当前对象hashCode值，因为字符串只要是不同的字符串，就会有不同的hashCode\n\t\treturn this.userName.hashCode();\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object arg0) {\n\t\tAccount account = (Account)arg0;\n\t\treturn this.userName.equals(account.userName);\n\t}\n}\n\n\npublic class Practice {\n\tpublic static void main(String[] args) {\n\t\tHashSet hashset = new HashSet();\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"请输入用户名：\");\n\t\t\tString userName = scanner.nextLine();\n\t\t\t\n\t\t\tSystem.out.println(\"请输入密码：\");\n\t\t\tString password = scanner.nextLine();\n\n\t\t\tAccount account = new Account(userName, password);\n\t\t\tif (hashset.add(account)) {\n\t\t\t\tSystem.out.println(\"注册成功\");\n\t\t\t}else {\n\t\t\t\tSystem.out.println(\"用户名已存在，请重新输入\");\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\n```\n\n- TreeSet 实现类\nTreeSet 是一个树形结构的 Set 结构；\n  发现：TreeSet 中添加元素原本是字符串类型，当添加自定义对象或者数字的时候，会报异常；\n  原因：因为 TreeSet 是一个树形结构，所有的元素都需要进行比较之后才可以放入到 Set 集合中，而字符串和自定义类对象是没有比较的方式和方法的；\n  也就是说【要求】在 TreeSet 里面的所有的元素都要有【比较的方式】或者有【自然顺序】\n\nTreeSet 中添加自定义元素的方式：\n  - 方式一：让这个自定义类【遵从】Comparable 接口，实现 compareTo 方法；\n\n```java\npackage study;\n\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass Person implements Comparable{\n\tprivate int id;\n\tprivate String name;\n\tprivate int salary;\n\t\n\tpublic Person(){ }\n\t\n\tpublic Person(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\t\n\t@Override\n\t//返回值有三种：0、正整数、负整数\n\t/*   0            表示相同；\n\t *   正整数    表示【调用这个方法的对象】大于传值的对象；\n\t *   负整数    表示【调用这个方法的对象】小于传值的对象；\n\t */\n\tpublic int compareTo(Object arg0) {\n\t\t//这里以工资为标准\n\t\tPerson person = (Person)arg0;\n\t\treturn this.salary  -  person.salary;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n}\n\n\npublic class TreeSet_Use {\n\tpublic static void main(String[] args) {\n\t\tTreeSet treeSet = new TreeSet();\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new Person(1, \"A\", 20));\n\t\ttreeSet.add(new Person(2,\"B\",24));\n\t\ttreeSet.add(new Person(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n\n```\n\n  - 方法二：自定义比较器，这个比较器是【遵从】Comparator 接口，实现 `int compare(Object o1,Object o2)`\n可以在创建 TreeSet 对象的时候，传入比较器对作为比较方式；\n\n```java\npackage study;\n\nimport java.util.Comparator;\nimport java.util.TreeSet;\n\n/**\n * class detail:通过在自定义类中实现compareTo方法，实现可以在TreeSet中添加自定义类元素\n * @author GJXAIOU\n * @since  2019年6月29日\n */\n\nclass PersonP{\n\tprivate int id;\n\tprivate String name;\n\t int salary;\n\t\n\tpublic PersonP(){ }\n\t\n\tpublic PersonP(int id, String name, int salary) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"[ ID : \" + id + \"  Name : \"  + name + \"  Salary : \" + salary + \" ]\";\n\t}\n\t\n\t\n}\n\n\n\n//自定义比较器\n\tclass MyCompare implements Comparator{\n\n\t\t@Override\n\t\tpublic int compare(Object arg0, Object arg1) {\n\t\t\tPersonP person0 = (PersonP) arg0;\n\t\t\tPersonP person1 = (PersonP) arg1;\n\t\t\treturn person0.salary - person1.salary;\n\t\t}\n\t}\n\n\n\t\npublic class ZiDingYiCompare {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//创建TreeSet时候，传入自定义比较器对象\n\t\tTreeSet treeSet = new TreeSet(new MyCompare());\n\t\t\n//\t\ttreeSet.add(\"1\");\n//\t\ttreeSet.add(\"3\");\n//\t\ttreeSet.add(\"5\");\n//\t\ttreeSet.add(\"1\");\n\t\t\n\t\ttreeSet.add(new PersonP(1, \"A\", 20));\n\t\ttreeSet.add(new PersonP(2, \"B\", 24));\n\t\ttreeSet.add(new PersonP(3, \"C\", 20));\n\t\t\n\t\tSystem.err.println(treeSet);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n",[[1563433670187,["GJX@GJXAIOU",[[-1,606,"      "]],[612,612],[606,606]]],[1563433672220,["GJX@GJXAIOU",[[-1,649,"   "]],[651,651],[648,648]]],[1563433674149,["GJX@GJXAIOU",[[-1,673,"      "]],[678,678],[672,672]]],[1563433676228,["GJX@GJXAIOU",[[-1,718,"      "]],[723,723],[717,717]]],[1563433681331,["GJX@GJXAIOU",[[-1,749,"           "]],[749,760],[749,749]]],[1563433684323,["GJX@GJXAIOU",[[-1,762,"            "]],[762,774],[762,762]]],[1563433686492,["GJX@GJXAIOU",[[-1,777,"               "]],[777,792],[777,777]]],[1563433687234,["GJX@GJXAIOU",[[-1,748," "]],[749,749],[748,748]]],[1563433689555,["GJX@GJXAIOU",[[-1,853,"              "]],[853,867],[853,853]]],[1563433691546,["GJX@GJXAIOU",[[-1,887,"          "]],[887,897],[887,887]]],[1563433693810,["GJX@GJXAIOU",[[-1,932," "]],[933,933],[932,932]]],[1563433695778,["GJX@GJXAIOU",[[-1,645,"    "]],[649,649],[645,645]]],[1563433697069,["GJX@GJXAIOU",[[-1,602,"    "]],[606,606],[602,602]]],[1563433698940,["GJX@GJXAIOU",[[-1,638,"   "]],[641,641],[638,638]]],[1563433701922,["GJX@GJXAIOU",[[-1,654,"        "]],[662,662],[654,654]]],[1563433705194,["GJX@GJXAIOU",[[-1,691,"        "]],[699,699],[691,691]]],[1563433716740,["GJX@GJXAIOU",[[-1,1068,"\n"]],[1064,1064],[1063,1063]]],[1563433716850,["GJX@GJXAIOU",[[-1,1067,"\n"]],[1063,1063],[1062,1062]]],[1563433716970,["GJX@GJXAIOU",[[-1,1066,"\n"]],[1062,1062],[1061,1061]]],[1563433717101,["GJX@GJXAIOU",[[-1,1065,"\n"]],[1061,1061],[1060,1060]]],[1563433717212,["GJX@GJXAIOU",[[-1,1064,"\n"]],[1060,1060],[1059,1059]]],[1563433717333,["GJX@GJXAIOU",[[-1,1058," "]],[1059,1059],[1058,1058]]],[1563433717859,["GJX@GJXAIOU",[[-1,1062,"\n"]],[1058,1058],[1057,1057]]],[1563433719762,["GJX@GJXAIOU",[[-1,1061,"\n"]],[1059,1059],[1058,1058]]],[1563433719907,["GJX@GJXAIOU",[[-1,1060,"\n"]],[1058,1058],[1057,1057]]],[1563433721915,["GJX@GJXAIOU",[[1,1059,"---"]],[1059,1059],[1062,1062]]],[1563433724860,["GJX@GJXAIOU",[[-1,1058,"\n"]],[1058,1058],[1057,1057]]],[1563433728637,["GJX@GJXAIOU",[[1,1065,"二 "]],[1065,1065],[1066,1066]]],[1563433729007,["GJX@GJXAIOU",[[1,1066,"、"]],[1066,1066],[1067,1067]]],[1563433819226,["GJX@GJXAIOU",[[-1,1098,"\n"]],[1099,1099],[1098,1098]]],[1563433823290,["GJX@GJXAIOU",[[-1,1107,"一般使用程序："]],[1107,1114],[1107,1107]]],[1563433828094,["GJX@GJXAIOU",[[1,1107,"使用diamante"]],[1107,1107],[1117,1117]]],[1563433828125,["GJX@GJXAIOU",[[1,1109," "]],[1117,1117],[1118,1118]]],[1563433829851,["GJX@GJXAIOU",[[-1,1109," diamante"]],[1118,1118],[1109,1109]]],[1563433832684,["GJX@GJXAIOU",[[1,1109,"代码示例："]],[1109,1109],[1114,1114]]],[1563433904724,["GJX@GJXAIOU",[[-1,1427,"\n"]],[1427,1427],[1426,1426]]],[1563433904842,["GJX@GJXAIOU",[[-1,1426,"\n"]],[1426,1426],[1425,1425]]],[1563433907698,["GJX@GJXAIOU",[[1,1430,"（）"]],[1430,1430],[1432,1432]]],[1563433909542,["GJX@GJXAIOU",[[1,1431,"一"]],[1431,1431],[1432,1432]]],[1563433917986,["GJX@GJXAIOU",[[-1,1420,"```"]],[1420,1423],[1420,1420]]],[1563433919229,["GJX@GJXAIOU",[[-1,1403,"```"]],[1403,1406],[1403,1403]]],[1563433920514,["GJX@GJXAIOU",[[-1,1403,"\n"]],[1403,1403],[1402,1402]]],[1563433922059,["GJX@GJXAIOU",[[1,1403,"·"]],[1403,1403],[1404,1404]]],[1563433923337,["GJX@GJXAIOU",[[-1,1403,"·"]],[1404,1404],[1403,1403]]],[1563433923588,["GJX@GJXAIOU",[[1,1403,"·"]],[1403,1403],[1404,1404]]],[1563433924650,["GJX@GJXAIOU",[[-1,1403,"·"]],[1404,1404],[1403,1403]]],[1563433925072,["GJX@GJXAIOU",[[1,1403,"`"]],[1403,1403],[1404,1404]]],[1563433927548,["GJX@GJXAIOU",[[1,1416,"`"]],[1416,1416],[1417,1417]]],[1563433930260,["GJX@GJXAIOU",[[-1,1402,"\n"]],[1403,1403],[1402,1402]]],[1563434882627,["GJX@GJXAIOU",[[-1,2581,"*******"]],[2588,2588],[2581,2581]]],[1563434884764,["GJX@GJXAIOU",[[1,2581,"congxie"]],[2581,2581],[2588,2588]]],[1563434885805,["GJX@GJXAIOU",[[-1,2581,"congxie"]],[2588,2588],[2581,2581]]],[1563434888592,["GJX@GJXAIOU",[[1,2581,"重写"]],[2581,2581],[2583,2583]]],[1563434904918,["GJX@GJXAIOU",[[1,2591,"，根据id判断值是否相等"]],[2591,2591],[2603,2603]]],[1563434909059,["GJX@GJXAIOU",[[-1,2606,"********"]],[2611,2611],[2603,2603]]],[1563434911467,["GJX@GJXAIOU",[[-1,2604,"**"]],[2605,2605],[2603,2603]]],[1563435051695,["GJX@GJXAIOU",[[-1,2842," "]],[2843,2843],[2842,2842]]],[1563435238334,["GJX@GJXAIOU",[[1,2253,"  "]],[2253,2253],[2255,2255]]],[1563435241413,["GJX@GJXAIOU",[[1,3146,"  "]],[3146,3146],[3148,3148]]],[1563435243006,["GJX@GJXAIOU",[[1,3167,"  "]],[3167,3167],[3169,3169]]],[1563435244867,["GJX@GJXAIOU",[[1,3188,"  "]],[3188,3188],[3190,3190]]],[1563435295787,["GJX@GJXAIOU",[[-1,3504,"\n"]],[3504,3504],[3503,3503]]],[1563435298507,["GJX@GJXAIOU",[[-1,3519,"\n"]],[3519,3519],[3518,3518]]],[1563435305693,["GJX@GJXAIOU",[[-1,1922,"\n"]],[1922,1922],[1921,1921]]],[1563435308811,["GJX@GJXAIOU",[[-1,1138,"\n"]],[1138,1138],[1137,1137]]],[1563435334564,["GJX@GJXAIOU",[[-1,3786," "]],[3787,3787],[3786,3786]]],[1563436816652,["GJX@GJXAIOU",[[1,1436,"#### "]],[1436,1438],[1451,1451]]],[1563436819462,["GJX@GJXAIOU",[[-1,1441,"-"]],[1441,1442],[1441,1441]]],[1563436823902,["GJX@GJXAIOU",[[1,1441,"1."]],[1441,1441],[1443,1443]]],[1563436832070,["GJX@GJXAIOU",[[-1,4688,"-"]],[4688,4689],[4688,4688]]],[1563436836798,["GJX@GJXAIOU",[[1,4688,"#### 2."]],[4688,4688],[4695,4695]]],[1563436838323,["GJX@GJXAIOU",[[-1,4695," "]],[4696,4696],[4695,4695]]],[1563436877573,["GJX@GJXAIOU",[[1,4737,"=="],[1,4779,"=="]],[4737,4779],[4737,4783]]],[1563437531309,["GJX@GJXAIOU",[[-1,5391,"\t//返回值有三种：0、正整数、负整数\n\t/*   0            表示相同；\n\t *   正整数    表示【调用这个方法的对象】大于传值的对象；\n\t *   负整数    表示【调用这个方法的对象】小于传值的对象；\n\t */"]],[5391,5510],[5391,5391]]],[1563437533432,["GJX@GJXAIOU",[[-1,5391,"\n"]],[5391,5391],[5390,5390]]],[1563437538135,["GJX@GJXAIOU",[[1,4983,"  \t//返回值有三种：0、正整数、负整数\n\t/*   0            表示相同；\n\t *   正整数    表示【调用这个方法的对象】大于传值的对象；\n\t *   负整数    表示【调用这个方法的对象】小于传值的对象；\n\t */"]],[4983,4983],[5104,5104]]],[1563437541100,["GJX@GJXAIOU",[[-1,4986,"//"]],[4988,4988],[4986,4986]]],[1563437546496,["GJX@GJXAIOU",[[1,4986,"compare "]],[4986,4986],[4993,4993]]],[1563437549089,["GJX@GJXAIOU",[[1,4993,"To的"]],[4993,4993],[4996,4996]]],[1563437549124,["GJX@GJXAIOU",[[1,4995," "]],[4996,4996],[4997,4997]]],[1563437550588,["GJX@GJXAIOU",[[-1,4997," "]],[4998,4998],[4997,4997]]],[1563437554414,["GJX@GJXAIOU",[[-1,5015,"/*"]],[5017,5017],[5015,5015]]],[1563437558541,["GJX@GJXAIOU",[[-1,5041," *"]],[5040,5040],[5038,5038]]],[1563437562468,["GJX@GJXAIOU",[[-1,5074," *"]],[5073,5073],[5071,5071]]],[1563437565775,["GJX@GJXAIOU",[[-1,5103,"\t */"]],[5107,5107],[5103,5103]]],[1563437566054,["GJX@GJXAIOU",[[-1,5103,"\n"]],[5103,5103],[5102,5102]]],[1563437582398,["GJX@GJXAIOU",[[1,5018,"\n\t   "]],[5018,5018],[5023,5023]]],[1563437586697,["GJX@GJXAIOU",[[1,5018,"返回值："]],[5018,5018],[5022,5022]]],[1563437587340,["GJX@GJXAIOU",[[-1,5021,"："]],[5022,5022],[5021,5021]]],[1563437588654,["GJX@GJXAIOU",[[1,5021,"| "]],[5021,5021],[5023,5023]]],[1563437591289,["GJX@GJXAIOU",[[1,5021,"  "]],[5021,5021],[5023,5023]]],[1563437593985,["GJX@GJXAIOU",[[1,5025," 含义"]],[5025,5025],[5028,5028]]],[1563437595272,["GJX@GJXAIOU",[[1,5033,"\n\t   "]],[5028,5028],[5033,5033]]],[1563437599669,["GJX@GJXAIOU",[[1,5033,"---| ---"]],[5033,5033],[5041,5041]]],[1563437603489,["GJX@GJXAIOU",[[1,5054,"|"]],[5054,5054],[5055,5055]]],[1563437607264,["GJX@GJXAIOU",[[1,5075,"|"]],[5075,5075],[5076,5076]]],[1563437609448,["GJX@GJXAIOU",[[1,5109,"|"]],[5109,5109],[5110,5110]]],[1563437792328,[null,[[-1,5068,"*"],[1,5069," "],[-1,5102,"*"],[1,5103," "]],[5068,5068],[5104,5104]]],[1563437792328,[null,[[1,5068,"*"],[-1,5068," "],[1,5102,"*"],[-1,5102," "]],[5104,5104],[5068,5068]]],[1563437744260,["GJX@GJXAIOU",[[1,6153,"\n"]],[6151,6151],[6152,6152]]],[1563437748440,["GJX@GJXAIOU",[[1,6152,"程序运行结果："]],[6152,6152],[6159,6159]]],[1563437749637,["GJX@GJXAIOU",[[1,6161,"\n"]],[6159,6159],[6160,6160]]],[1563437753430,["GJX@GJXAIOU",[[1,6160,"```"]],[6160,6160],[6163,6163]]],[1563437754664,["GJX@GJXAIOU",[[-1,6162,"`"]],[6163,6163],[6162,6162]]],[1563437756212,["GJX@GJXAIOU",[[1,6161,"[[ ID : 1  Name : A  Salary : 20 ], [ ID : 2  Name : B  Salary : 24 ]]"]],[6161,6161],[6231,6231]]],[1563437785812,["GJX@GJXAIOU",[[-1,6866,"\n"]],[6867,6867],[6866,6866]]],[1563437787092,["GJX@GJXAIOU",[[-1,6866,"\t"]],[6866,6866],[6865,6865]]],[1563437787541,["GJX@GJXAIOU",[[-1,6864,"\n"]],[6865,6865],[6864,6864]]],[1563437790646,["GJX@GJXAIOU",[[-1,6870,"\n"]],[6869,6869],[6868,6868]]],[1563437852328,[null,[[-1,5068,"*"],[1,5069," "],[-1,5102,"*"],[1,5103," "]],[5068,5068],[5104,5104]]],[1563437852328,[null,[[1,5068,"*"],[-1,5068," "],[1,5102,"*"],[-1,5102," "]],[5104,5104],[5068,5068]]],[1563437802639,["GJX@GJXAIOU",[[-1,6879,"\t"],[-1,6920,"\t"],[-1,6933,"\t"],[-1,6981,"\t"],[-1,7020,"\t"],[-1,7055,"\t"],[-1,7099,"\t"],[-1,7102,"\t"]],[6880,7104],[6879,7096]]],[1563437972334,[null,[[-1,5068,"*"],[1,5069," "],[-1,5102,"*"],[1,5103," "]],[5068,5068],[5104,5104]]],[1563437972334,[null,[[1,5068,"*"],[-1,5068," "],[1,5102,"*"],[-1,5102," "]],[5104,5104],[5068,5068]]],[1563437928798,["GJX@GJXAIOU",[[1,7520,"\n"]],[7511,7511],[7512,7512]]],[1563437930369,["GJX@GJXAIOU",[[1,7512,"cheng"]],[7512,7512],[7517,7517]]],[1563437931711,["GJX@GJXAIOU",[[-1,7512,"cheng"]],[7517,7517],[7512,7512]]],[1563437937591,["GJX@GJXAIOU",[[1,7512,"程序运行结果：``"]],[7512,7512],[7521,7521]]],[1563437938776,["GJX@GJXAIOU",[[1,7520,"[[ ID : 1  Name : A  Salary : 20 ], [ ID : 2  Name : B  Salary : 24 ]]"]],[7520,7520],[7590,7590]]],[1563438332340,[null,[[-1,5068,"*"],[1,5069," "],[-1,5102,"*"],[1,5103," "]],[5068,5068],[5104,5104]]],[1563438332340,[null,[[1,5068,"*"],[-1,5068," "],[1,5102,"*"],[-1,5102," "]],[5104,5104],[5068,5068]]],[1563438286852,["GJX@GJXAIOU",[[1,1062,"\n"]],[1061,1061],[1062,1062]]]],null,"GJX@GJXAIOU"]]}