{"compress":true,"commitItems":[["709539a7-5c3b-4b80-9aa7-d7049fc52173",1564362383502,"",[[1564362334438,["GJX@GJXAIOU",[[1,0,"# JavaEEDay34数据库\n\n\n\n"]],[0,0],[19,19]]],[1564363233916,["GJX@GJXAIOU",[[1,18,"DCL"]],[18,18],[21,21]]],[1564363235929,["GJX@GJXAIOU",[[-1,18,"DCL"]],[21,21],[18,18]]],[1564363241699,["GJX@GJXAIOU",[[1,18,"## DCL操作"]],[18,18],[26,26]]],[1564363241722,["GJX@GJXAIOU",[[1,24," "]],[26,26],[27,27]]],[1564363242404,["GJX@GJXAIOU",[[1,27,"："]],[27,27],[28,28]]],[1564363242762,["GJX@GJXAIOU",[[1,30,"\n"]],[28,28],[29,29]]],[1564363254814,["GJX@GJXAIOU",[[1,29,"一般是项目经理记性"]],[29,29],[38,38]]],[1564363255441,["GJX@GJXAIOU",[[-1,36,"记性"]],[38,38],[36,36]]],[1564363257892,["GJX@GJXAIOU",[[1,36,"进行管理"]],[36,36],[40,40]]],[1564363265500,["GJX@GJXAIOU",[[1,36,"或者DBA"]],[36,36],[41,41]]],[1564363265523,["GJX@GJXAIOU",[[1,38," "],[1,41," "]],[41,41],[42,42]]],[1564363267876,["GJX@GJXAIOU",[[1,47,"；"]],[47,47],[48,48]]],[1564363268113,["GJX@GJXAIOU",[[1,50,"\n"]],[48,48],[49,49]]],[1564363268257,["GJX@GJXAIOU",[[1,51,"\n"]],[49,49],[50,50]]],[1564363268391,["GJX@GJXAIOU",[[1,52,"\n"]],[50,50],[51,51]]],[1564363268547,["GJX@GJXAIOU",[[1,53,"\n"]],[51,51],[52,52]]],[1564363280658,["GJX@GJXAIOU",[[1,52,"## 用户管理："]],[52,52],[60,60]]],[1564363280929,["GJX@GJXAIOU",[[1,62,"\n"]],[60,60],[61,61]]],[1564363281601,["GJX@GJXAIOU",[[1,63,"\n"]],[61,61],[62,62]]],[1564363282411,["GJX@GJXAIOU",[[1,62,"-"]],[62,62],[63,63]]],[1564363284556,["GJX@GJXAIOU",[[1,63," ****"]],[63,63],[66,66]]],[1564363287075,["GJX@GJXAIOU",[[1,66,"创建一个"]],[66,66],[70,70]]],[1564363289498,["GJX@GJXAIOU",[[-1,67,"*创建一个"]],[70,70],[65,65]]],[1564363290760,["GJX@GJXAIOU",[[-1,65,"**"]],[66,66],[64,64]]],[1564363292041,["GJX@GJXAIOU",[[-1,64,"*"]],[65,65],[64,64]]],[1564363304425,["GJX@GJXAIOU",[[1,64,"创建一个用户，用户名为z"]],[64,64],[76,76]]],[1564363304448,["GJX@GJXAIOU",[[1,75," "]],[76,76],[77,77]]],[1564363315827,["GJX@GJXAIOU",[[1,77,"hangsan 所在数据库的主机地址为l"]],[77,77],[97,97]]],[1564363315851,["GJX@GJXAIOU",[[1,96," "]],[97,97],[98,98]]],[1564363318157,["GJX@GJXAIOU",[[1,98,"ocalhose"]],[98,98],[106,106]]],[1564363318729,["GJX@GJXAIOU",[[-1,105,"e"]],[106,106],[105,105]]],[1564363329979,["GJX@GJXAIOU",[[1,105,"t，初始化密码：12345:"]],[105,105],[119,119]]],[1564363331626,["GJX@GJXAIOU",[[1,120,"- \n"]],[119,119],[122,122]]],[1564363332939,["GJX@GJXAIOU",[[-1,120,"- "]],[122,122],[120,120]]],[1564363333961,["GJX@GJXAIOU",[[1,120,"``"]],[120,120],[122,122]]],[1564363337042,["GJX@GJXAIOU",[[1,121,"creza"]],[121,121],[126,126]]],[1564363337594,["GJX@GJXAIOU",[[-1,124,"za"]],[126,126],[124,124]]],[1564363342393,["GJX@GJXAIOU",[[1,124,"ate user \""]],[124,124],[134,134]]],[1564363344306,["GJX@GJXAIOU",[[1,134,"xiaoyu"]],[134,134],[140,140]]],[1564363345563,["GJX@GJXAIOU",[[-1,134,"xiaoyu"]],[140,140],[134,134]]],[1564363352785,["GJX@GJXAIOU",[[1,134,"zhangsan\"@l"]],[134,134],[145,145]]],[1564363353305,["GJX@GJXAIOU",[[-1,144,"l"]],[145,145],[144,144]]],[1564363357386,["GJX@GJXAIOU",[[1,144,"\"localhose"]],[144,144],[154,154]]],[1564363357940,["GJX@GJXAIOU",[[-1,153,"e"]],[154,154],[153,153]]],[1564363358140,["GJX@GJXAIOU",[[1,153,"rt"]],[153,153],[155,155]]],[1564363358843,["GJX@GJXAIOU",[[-1,153,"rt"]],[155,155],[153,153]]],[1564363370281,["GJX@GJXAIOU",[[1,153,"t\" identified bu"]],[153,153],[169,169]]],[1564363370689,["GJX@GJXAIOU",[[-1,168,"u"]],[169,169],[168,168]]],[1564363376241,["GJX@GJXAIOU",[[1,168,"y \"12345\";"]],[168,168],[178,178]]],[1564363378827,["GJX@GJXAIOU",[[1,181,"\n"]],[179,179],[180,180]]],[1564363380891,["GJX@GJXAIOU",[[1,180,"- shou"]],[180,180],[186,186]]],[1564363381849,["GJX@GJXAIOU",[[-1,182,"shou"]],[186,186],[182,182]]],[1564363402205,["GJX@GJXAIOU",[[1,182,"授予新用户权限，上面的"]],[182,182],[193,193]]],[1564363406523,["GJX@GJXAIOU",[[1,193,"localhost"]],[193,193],[202,202]]],[1564363406546,["GJX@GJXAIOU",[[1,193," "]],[202,202],[203,203]]],[1564363407791,["GJX@GJXAIOU",[[1,203,"也可以"]],[203,203],[206,206]]],[1564363407815,["GJX@GJXAIOU",[[1,203," "]],[206,206],[207,207]]],[1564363411474,["GJX@GJXAIOU",[[1,207,"是一个IP"]],[207,207],[212,212]]],[1564363411498,["GJX@GJXAIOU",[[1,210," "]],[212,212],[213,213]]],[1564363412361,["GJX@GJXAIOU",[[1,213,"地址"]],[213,213],[215,215]]],[1564363412385,["GJX@GJXAIOU",[[1,213," "]],[215,215],[216,216]]],[1564363412642,["GJX@GJXAIOU",[[1,216,"；"]],[216,216],[217,217]]],[1564363413865,["GJX@GJXAIOU",[[1,218,"- \n"]],[217,217],[220,220]]],[1564363415360,["GJX@GJXAIOU",[[-1,218,"- "]],[220,220],[218,218]]],[1564363416851,["GJX@GJXAIOU",[[1,218,"··"]],[218,218],[220,220]]],[1564363417833,["GJX@GJXAIOU",[[-1,218,"··"]],[220,220],[218,218]]],[1564363418585,["GJX@GJXAIOU",[[1,218,"``"]],[218,218],[220,220]]],[1564363420875,["GJX@GJXAIOU",[[1,219,"f"]],[219,219],[220,220]]],[1564363422208,["GJX@GJXAIOU",[[-1,219,"f"]],[220,220],[219,219]]],[1564363423016,["GJX@GJXAIOU",[[1,219,"grang"]],[219,219],[224,224]]],[1564363423433,["GJX@GJXAIOU",[[-1,223,"g"]],[224,224],[223,223]]],[1564363425203,["GJX@GJXAIOU",[[1,223,"t alll "]],[223,223],[230,230]]],[1564363425785,["GJX@GJXAIOU",[[-1,228,"l "]],[230,230],[228,228]]],[1564363439673,["GJX@GJXAIOU",[[1,228," on hello.* to \"x"]],[228,228],[245,245]]],[1564363440240,["GJX@GJXAIOU",[[-1,244,"x"]],[245,245],[244,244]]],[1564363441042,["GJX@GJXAIOU",[[1,244,"hang"]],[244,244],[248,248]]],[1564363441860,["GJX@GJXAIOU",[[-1,244,"hang"]],[248,248],[244,244]]],[1564363452946,["GJX@GJXAIOU",[[1,244,"zhangsan\" @\"localhouse"]],[244,244],[266,266]]],[1564363453498,["GJX@GJXAIOU",[[-1,263,"use"]],[266,266],[263,263]]],[1564363456585,["GJX@GJXAIOU",[[1,263,"st\";"]],[263,263],[267,267]]],[1564363459360,["GJX@GJXAIOU",[[1,268," //"]],[268,268],[271,271]]],[1564363465566,["GJX@GJXAIOU",[[1,271,"将hello"]],[271,271],[277,277]]],[1564363465588,["GJX@GJXAIOU",[[1,272," "]],[277,277],[278,278]]],[1564363468131,["GJX@GJXAIOU",[[1,278,"数据库"]],[278,278],[281,281]]],[1564363468154,["GJX@GJXAIOU",[[1,278," "]],[281,281],[282,282]]],[1564363479098,["GJX@GJXAIOU",[[1,282,"赋值全校"]],[282,282],[286,286]]],[1564363480761,["GJX@GJXAIOU",[[-1,284,"全校"]],[286,286],[284,284]]],[1564363486508,["GJX@GJXAIOU",[[1,284,"权限给zhangs"]],[284,284],[293,293]]],[1564363486531,["GJX@GJXAIOU",[[1,287," "]],[293,293],[294,294]]],[1564363491362,["GJX@GJXAIOU",[[1,294,"an;"]],[294,294],[297,297]]],[1564363491896,["GJX@GJXAIOU",[[1,299,"\n"]],[297,297],[298,298]]],[1564363503532,["GJX@GJXAIOU",[[1,298,"- 刷新权限：·"]],[298,298],[306,306]]],[1564363504288,["GJX@GJXAIOU",[[-1,305,"·"]],[306,306],[305,305]]],[1564363505122,["GJX@GJXAIOU",[[1,305,"``"]],[305,305],[307,307]]],[1564363521090,["GJX@GJXAIOU",[[1,306,"flush privileges;"]],[306,306],[323,323]]],[1564363524985,["GJX@GJXAIOU",[[1,324," zhi"]],[324,324],[328,328]]],[1564363525658,["GJX@GJXAIOU",[[-1,325,"zhi"]],[328,328],[325,325]]],[1564363539586,["GJX@GJXAIOU",[[1,325,"至此完成新用户管理；"]],[325,325],[335,335]]],[1564363540433,["GJX@GJXAIOU",[[1,336,"- \n"]],[335,335],[338,338]]],[1564363547860,["GJX@GJXAIOU",[[1,338,"取消授权：``"]],[338,338],[345,345]]],[1564363581913,["GJX@GJXAIOU",[[1,344,"revoke all on hello.* from \"zhangsan\" @ \"localhost\";"]],[344,344],[396,396]]],[1564363587794,["GJX@GJXAIOU",[[1,398,"- \n"]],[397,397],[400,400]]],[1564363589802,["GJX@GJXAIOU",[[1,400,"shan"]],[400,400],[404,404]]],[1564363590876,["GJX@GJXAIOU",[[-1,400,"shan"]],[404,404],[400,400]]],[1564363597993,["GJX@GJXAIOU",[[1,400,"删除用户：``"]],[400,400],[407,407]]],[1564363602410,["GJX@GJXAIOU",[[1,406,"drop ue"]],[406,406],[413,413]]],[1564363603424,["GJX@GJXAIOU",[[-1,412,"e"]],[413,413],[412,412]]],[1564363614913,["GJX@GJXAIOU",[[1,412,"ser \"zhangsan\" @l"]],[412,412],[429,429]]],[1564363615440,["GJX@GJXAIOU",[[-1,428,"l"]],[429,429],[428,428]]],[1564363620780,["GJX@GJXAIOU",[[1,428," \"localhost\";"]],[428,428],[441,441]]],[1564363655306,["GJX@GJXAIOU",[[1,49,"jiushi"]],[49,49],[55,55]]],[1564363656816,["GJX@GJXAIOU",[[-1,49,"jiushi"]],[55,55],[49,49]]],[1564363681699,["GJX@GJXAIOU",[[1,49,"即管理用户：创建用户，给予用户操作数据的权限；"]],[49,49],[72,72]]],[1564363684913,["GJX@GJXAIOU",[[1,467,"\n"]],[466,466],[467,467]]],[1564363685412,["GJX@GJXAIOU",[[1,468,"\n"]],[467,467],[468,468]]],[1564363685445,["GJX@GJXAIOU",[[1,469,"\n"]],[468,468],[469,469]]],[1564363685478,["GJX@GJXAIOU",[[1,470,"\n"]],[469,469],[470,470]]],[1564363685512,["GJX@GJXAIOU",[[1,471,"\n"]],[470,470],[471,471]]],[1564363685546,["GJX@GJXAIOU",[[1,472,"\n"]],[471,471],[472,472]]],[1564363685581,["GJX@GJXAIOU",[[1,473,"\n"]],[472,472],[473,473]]],[1564363685609,["GJX@GJXAIOU",[[1,474,"\n"]],[473,473],[474,474]]],[1564363685643,["GJX@GJXAIOU",[[1,475,"\n"]],[474,474],[475,475]]],[1564363685677,["GJX@GJXAIOU",[[1,476,"\n"]],[475,475],[476,476]]],[1564363685709,["GJX@GJXAIOU",[[1,477,"\n"]],[476,476],[477,477]]],[1564363685744,["GJX@GJXAIOU",[[1,478,"\n"]],[477,477],[478,478]]],[1564363685775,["GJX@GJXAIOU",[[1,479,"\n"]],[478,478],[479,479]]],[1564363685808,["GJX@GJXAIOU",[[1,480,"\n"]],[479,479],[480,480]]],[1564363685844,["GJX@GJXAIOU",[[1,481,"\n"]],[480,480],[481,481]]],[1564363685875,["GJX@GJXAIOU",[[1,482,"\n"]],[481,481],[482,482]]],[1564363685906,["GJX@GJXAIOU",[[1,483,"\n"]],[482,482],[483,483]]],[1564363685940,["GJX@GJXAIOU",[[1,484,"\n"]],[483,483],[484,484]]],[1564363685972,["GJX@GJXAIOU",[[1,485,"\n"]],[484,484],[485,485]]],[1564363686006,["GJX@GJXAIOU",[[1,486,"\n"]],[485,485],[486,486]]],[1564363686039,["GJX@GJXAIOU",[[1,487,"\n"]],[486,486],[487,487]]],[1564363686072,["GJX@GJXAIOU",[[1,488,"\n"]],[487,487],[488,488]]],[1564363686105,["GJX@GJXAIOU",[[1,489,"\n"]],[488,488],[489,489]]],[1564363686139,["GJX@GJXAIOU",[[1,490,"\n"]],[489,489],[490,490]]],[1564363686171,["GJX@GJXAIOU",[[1,491,"\n"]],[490,490],[491,491]]],[1564363686203,["GJX@GJXAIOU",[[1,492,"\n"]],[491,491],[492,492]]],[1564363686237,["GJX@GJXAIOU",[[1,493,"\n"]],[492,492],[493,493]]],[1564363686270,["GJX@GJXAIOU",[[1,494,"\n"]],[493,493],[494,494]]],[1564363686303,["GJX@GJXAIOU",[[1,495,"\n"]],[494,494],[495,495]]],[1564363686336,["GJX@GJXAIOU",[[1,496,"\n"]],[495,495],[496,496]]],[1564363686369,["GJX@GJXAIOU",[[1,497,"\n"]],[496,496],[497,497]]],[1564363686402,["GJX@GJXAIOU",[[1,498,"\n"]],[497,497],[498,498]]],[1564363686436,["GJX@GJXAIOU",[[1,499,"\n"]],[498,498],[499,499]]],[1564363702212,["GJX@GJXAIOU",[[1,469,"## DTLE"]],[469,469],[476,476]]],[1564363702800,["GJX@GJXAIOU",[[-1,475,"E"]],[476,476],[475,475]]],[1564363705069,["GJX@GJXAIOU",[[1,475,"事务"]],[475,475],[477,477]]],[1564363705092,["GJX@GJXAIOU",[[1,475," "]],[477,477],[478,478]]],[1564363709888,["GJX@GJXAIOU",[[1,478,"处理"]],[478,478],[480,480]]],[1564363776504,["GJX@GJXAIOU",[[1,511,"\n"]],[480,480],[481,481]]],[1564364294236,["GJX@GJXAIOU",[[1,482,"闲散与"]],[482,482],[485,485]]],[1564364294977,["GJX@GJXAIOU",[[-1,482,"闲散与"]],[485,485],[482,482]]],[1564364295080,["GJX@GJXAIOU",[[-1,511,"\n"]],[482,482],[481,481]]],[1564364297883,["GJX@GJXAIOU",[[1,481,"相当云"]],[481,481],[484,484]]],[1564364299144,["GJX@GJXAIOU",[[-1,481,"相当云"]],[484,484],[481,481]]],[1564364299250,["GJX@GJXAIOU",[[-1,510,"\n"]],[481,481],[480,480]]],[1564364300330,["GJX@GJXAIOU",[[1,480,"当"]],[480,480],[481,481]]],[1564364301514,["GJX@GJXAIOU",[[-1,480,"当"]],[481,481],[480,480]]],[1564364302137,["GJX@GJXAIOU",[[1,510,"\n"]],[480,480],[481,481]]],[1564364321538,["GJX@GJXAIOU",[[1,481,"当出现操作错误的时候，给予回退的机会；"]],[481,481],[500,500]]],[1564364322584,["GJX@GJXAIOU",[[1,530,"\n"]],[500,500],[501,501]]],[1564364325921,["GJX@GJXAIOU",[[1,531,"\n"]],[501,501],[502,502]]],[1564364326977,["GJX@GJXAIOU",[[1,502,"- xia"]],[502,502],[507,507]]],[1564364327688,["GJX@GJXAIOU",[[-1,504,"xia"]],[507,507],[504,504]]],[1564364329066,["GJX@GJXAIOU",[[1,504,"首先"]],[504,504],[506,506]]],[1564364330137,["GJX@GJXAIOU",[[-1,505,"先"]],[506,506],[505,505]]],[1564364333403,["GJX@GJXAIOU",[[1,505,"先"]],[505,505],[506,506]]],[1564364340137,["GJX@GJXAIOU",[[-1,504,"首先"]],[506,506],[504,504]]],[1564364345700,["GJX@GJXAIOU",[[1,504,"以银行庄站"]],[504,504],[509,509]]],[1564364346552,["GJX@GJXAIOU",[[-1,507,"庄站"]],[509,509],[507,507]]],[1564364356978,["GJX@GJXAIOU",[[1,507,"转账未来"]],[507,507],[511,511]]],[1564364357640,["GJX@GJXAIOU",[[-1,509,"未来"]],[511,511],[509,509]]],[1564364361698,["GJX@GJXAIOU",[[1,509,"为例，首先创建"]],[509,509],[516,516]]],[1564364366081,["GJX@GJXAIOU",[[1,516,"数据表："]],[516,516],[520,520]]],[1564364366433,["GJX@GJXAIOU",[[1,521,"- \n"]],[520,520],[523,523]]],[1564364367186,["GJX@GJXAIOU",[[-1,521,"- "]],[523,523],[521,521]]],[1564364369666,["GJX@GJXAIOU",[[1,521,"```"]],[521,521],[524,524]]],[1564364369690,["GJX@GJXAIOU",[[1,524,"language\n```\n"]],[524,524],[524,532]]],[1564364371219,["GJX@GJXAIOU",[[-1,524,"language"],[1,532,"j"]],[524,532],[525,525]]],[1564364371402,["GJX@GJXAIOU",[[1,525,"a"]],[525,525],[526,526]]],[1564364372219,["GJX@GJXAIOU",[[-1,524,"ja"]],[526,526],[524,524]]],[1564364373074,["GJX@GJXAIOU",[[1,524,"sql"]],[524,524],[527,527]]],[1564364373536,["GJX@GJXAIOU",[[1,528,"\n"]],[527,527],[528,528]]],[1564364386625,["GJX@GJXAIOU",[[1,528,"care"]],[528,528],[532,532]]],[1564364387880,["GJX@GJXAIOU",[[-1,529,"are"]],[532,532],[529,529]]],[1564364394957,["GJX@GJXAIOU",[[1,529,"reate tba"]],[529,529],[538,538]]],[1564364395752,["GJX@GJXAIOU",[[-1,536,"ba"]],[538,538],[536,536]]],[1564364397283,["GJX@GJXAIOU",[[1,536,"able "]],[536,536],[541,541]]],[1564365049971,["GJX@GJXAIOU",[[1,541,"bank(\nuserID tinyint not null primary key auto_increment,\nmoney double(15,2),\nname varchar(30)\n);"]],[528,541],[638,638]]],[1564365051808,["GJX@GJXAIOU",[[1,547,"  "]],[547,547],[549,549]]],[1564365053159,["GJX@GJXAIOU",[[1,601,"  "]],[601,601],[603,603]]],[1564365054439,["GJX@GJXAIOU",[[1,623,"  "]],[623,623],[625,625]]],[1564365058153,["GJX@GJXAIOU",[[1,679,"\n"]],[648,648],[649,649]]],[1564365061681,["GJX@GJXAIOU",[[1,649,"- cha"]],[649,649],[654,654]]],[1564365062496,["GJX@GJXAIOU",[[-1,651,"cha"]],[654,654],[651,651]]],[1564365071930,["GJX@GJXAIOU",[[1,651,"插入部分数据，用于测试："]],[651,651],[663,663]]],[1564365072240,["GJX@GJXAIOU",[[1,664,"- \n"]],[663,663],[666,666]]],[1564365073695,["GJX@GJXAIOU",[[-1,664,"- "]],[666,666],[664,664]]],[1564365075050,["GJX@GJXAIOU",[[1,664,"···"]],[664,664],[667,667]]],[1564365075738,["GJX@GJXAIOU",[[-1,664,"···"]],[667,667],[664,664]]],[1564365079139,["GJX@GJXAIOU",[[1,664,"```"]],[664,664],[667,667]]],[1564365079162,["GJX@GJXAIOU",[[1,667,"language\n```\n"]],[667,667],[667,675]]],[1564365080481,["GJX@GJXAIOU",[[-1,667,"language"],[1,675,"s"]],[667,675],[668,668]]],[1564365080833,["GJX@GJXAIOU",[[1,668,"ql"]],[668,668],[670,670]]],[1564365081264,["GJX@GJXAIOU",[[1,671,"\n"]],[670,670],[671,671]]],[1564365092929,["GJX@GJXAIOU",[[1,671,"insert into bank(money,name) values(66,\"zhangsan\");\ninsert into bank(money,name) values(11,\"lisi\");"]],[671,671],[770,770]]],[1564365111562,["GJX@GJXAIOU",[[1,806,"\n"]],[774,774],[775,775]]],[1564365114017,["GJX@GJXAIOU",[[1,775,"- kai"]],[775,775],[780,780]]],[1564365114799,["GJX@GJXAIOU",[[-1,777,"kai"]],[780,780],[777,777]]],[1564365128177,["GJX@GJXAIOU",[[1,777,"开启事务：一共两种方式："]],[777,777],[789,789]]],[1564365128760,["GJX@GJXAIOU",[[1,790,"- \n"]],[789,789],[792,792]]],[1564365129976,["GJX@GJXAIOU",[[1,790,"  "]],[792,792],[794,794]]],[1564365134065,["GJX@GJXAIOU",[[1,794,"方式一：``"]],[794,794],[800,800]]],[1564365135924,["GJX@GJXAIOU",[[1,799,"strat"]],[799,799],[804,804]]],[1564365136843,["GJX@GJXAIOU",[[-1,801,"rat"]],[804,804],[801,801]]],[1564365144537,["GJX@GJXAIOU",[[1,801,"art transaction;"]],[801,801],[817,817]]],[1564365147400,["GJX@GJXAIOU",[[1,819,"  - \n"]],[818,818],[823,823]]],[1564365148314,["GJX@GJXAIOU",[[1,823,"f"]],[823,823],[824,824]]],[1564365148944,["GJX@GJXAIOU",[[-1,823,"f"]],[824,824],[823,823]]],[1564365150860,["GJX@GJXAIOU",[[1,823,"方式二："]],[823,823],[827,827]]],[1564365166578,["GJX@GJXAIOU",[[1,827,"``"]],[827,827],[829,829]]],[1564365176793,["GJX@GJXAIOU",[[1,828,"set autocommit = 0;"]],[828,828],[847,847]]],[1564365181312,["GJX@GJXAIOU",[[1,849,"  - \n"]],[848,848],[853,853]]],[1564365182911,["GJX@GJXAIOU",[[-1,849,"  - "]],[853,853],[849,849]]],[1564365184483,["GJX@GJXAIOU",[[1,849,"···"]],[849,849],[852,852]]],[1564365185304,["GJX@GJXAIOU",[[-1,849,"···"]],[852,852],[849,849]]],[1564365186642,["GJX@GJXAIOU",[[1,849,"```"]],[849,849],[852,852]]],[1564365186666,["GJX@GJXAIOU",[[1,852,"language\n```\n"]],[852,852],[852,860]]],[1564365187961,["GJX@GJXAIOU",[[-1,852,"language"],[1,860,"s"]],[852,860],[853,853]]],[1564365188250,["GJX@GJXAIOU",[[1,853,"ql"]],[853,853],[855,855]]],[1564365188832,["GJX@GJXAIOU",[[1,856,"\n"]],[855,855],[856,856]]],[1564365197891,["GJX@GJXAIOU",[[1,856,"start transaction;"]],[856,856],[874,874]]],[1564365199593,["GJX@GJXAIOU",[[1,911,"\n"]],[878,878],[879,879]]],[1564365202697,["GJX@GJXAIOU",[[1,879,"- ranho"]],[879,879],[886,886]]],[1564365203712,["GJX@GJXAIOU",[[-1,881,"ranho"]],[886,886],[881,881]]],[1564365209876,["GJX@GJXAIOU",[[1,881,"然后开始进行操作："]],[881,881],[890,890]]],[1564365210167,["GJX@GJXAIOU",[[1,891,"- \n"]],[890,890],[893,893]]],[1564365210922,["GJX@GJXAIOU",[[-1,891,"- "]],[893,893],[891,891]]],[1564365212489,["GJX@GJXAIOU",[[1,891,"```"]],[891,891],[894,894]]],[1564365212514,["GJX@GJXAIOU",[[1,894,"language\n```\n"]],[894,894],[894,902]]],[1564365213377,["GJX@GJXAIOU",[[-1,894,"language"],[1,902,"s"]],[894,902],[895,895]]],[1564365213728,["GJX@GJXAIOU",[[1,895,"ql"]],[895,895],[897,897]]],[1564365214143,["GJX@GJXAIOU",[[1,898,"\n"]],[897,897],[898,898]]],[1564365222800,["GJX@GJXAIOU",[[1,898,"update bank set money = money - 55 where userID = 1;\nupdate bank set money = money + 55 where userID = 2;"]],[898,898],[1003,1003]]],[1564365227672,["GJX@GJXAIOU",[[1,1041,"\n"]],[1007,1007],[1008,1008]]],[1564365244000,["GJX@GJXAIOU",[[1,1008,"- caouz"]],[1008,1008],[1015,1015]]],[1564365244743,["GJX@GJXAIOU",[[-1,1010,"caouz"]],[1015,1015],[1010,1010]]],[1564365252882,["GJX@GJXAIOU",[[1,1010,"操作完成之后，如果"]],[1010,1010],[1019,1019]]],[1564365255848,["GJX@GJXAIOU",[[-1,1016,"，如果"]],[1019,1019],[1016,1016]]],[1564365259772,["GJX@GJXAIOU",[[1,1016,"，两种却"]],[1016,1016],[1020,1020]]],[1564365260312,["GJX@GJXAIOU",[[-1,1019,"却"]],[1020,1020],[1019,1019]]],[1564365263107,["GJX@GJXAIOU",[[1,1019,"确认方式："]],[1019,1019],[1024,1024]]],[1564365263337,["GJX@GJXAIOU",[[1,1025,"- \n"]],[1024,1024],[1027,1027]]],[1564365264032,["GJX@GJXAIOU",[[-1,1025,"- "]],[1027,1027],[1025,1025]]],[1564365265481,["GJX@GJXAIOU",[[1,1025,"``"]],[1025,1025],[1027,1027]]],[1564365267191,["GJX@GJXAIOU",[[-1,1025,"``"]],[1027,1027],[1025,1025]]],[1564365271320,["GJX@GJXAIOU",[[1,1025,"  - hui"]],[1025,1025],[1032,1032]]],[1564365271808,["GJX@GJXAIOU",[[-1,1031,"i"]],[1032,1032],[1031,1031]]],[1564365272063,["GJX@GJXAIOU",[[-1,1029,"hu"]],[1031,1031],[1029,1029]]],[1564365297145,["GJX@GJXAIOU",[[1,1029,"回滚，即操作中出现了异常，可以回滚到开始事务之前，"]],[1029,1029],[1054,1054]]],[1564365302664,["GJX@GJXAIOU",[[-1,1053,"，"]],[1054,1054],[1053,1053]]],[1564365310827,["GJX@GJXAIOU",[[1,1053,"；命令为：``"]],[1053,1053],[1060,1060]]],[1564365313955,["GJX@GJXAIOU",[[1,1059,"rollva"]],[1059,1059],[1065,1065]]],[1564365314712,["GJX@GJXAIOU",[[-1,1063,"va"]],[1065,1065],[1063,1063]]],[1564365316971,["GJX@GJXAIOU",[[1,1063,"back;"]],[1063,1063],[1068,1068]]],[1564365318240,["GJX@GJXAIOU",[[1,1070,"  - \n"]],[1069,1069],[1074,1074]]],[1564365319977,["GJX@GJXAIOU",[[1,1074,"que"]],[1074,1074],[1077,1077]]],[1564365320496,["GJX@GJXAIOU",[[-1,1074,"que"]],[1077,1077],[1074,1074]]],[1564365324894,["GJX@GJXAIOU",[[1,1074,"提交，即却"]],[1074,1074],[1079,1079]]],[1564365325578,["GJX@GJXAIOU",[[-1,1078,"却"]],[1079,1079],[1078,1078]]],[1564365331741,["GJX@GJXAIOU",[[1,1078,"确认操作无误"]],[1078,1078],[1084,1084]]],[1564365350785,["GJX@GJXAIOU",[[1,1084,"，提交开始事务之后的所有操作；命令为：``"]],[1084,1084],[1105,1105]]],[1564365354536,["GJX@GJXAIOU",[[1,1104,"commit;"]],[1104,1104],[1111,1111]]],[1564365356784,["GJX@GJXAIOU",[[1,1113,"  - \n"]],[1112,1112],[1117,1117]]],[1564365357187,["GJX@GJXAIOU",[[-1,1113,"  - "]],[1117,1117],[1114,1114]]],[1564365372939,["GJX@GJXAIOU",[[1,1115,"## shuj"]],[1115,1115],[1122,1122]]],[1564365373546,["GJX@GJXAIOU",[[-1,1118,"shuj"]],[1122,1122],[1118,1118]]],[1564365376731,["GJX@GJXAIOU",[[1,1118,"数据库进"]],[1118,1118],[1122,1122]]],[1564365377798,["GJX@GJXAIOU",[[-1,1121,"进"]],[1122,1122],[1121,1121]]],[1564365380485,["GJX@GJXAIOU",[[1,1121,"导入导出"]],[1121,1121],[1125,1125]]],[1564365380826,["GJX@GJXAIOU",[[1,1157,"\n"]],[1125,1125],[1126,1126]]],[1564365380969,["GJX@GJXAIOU",[[1,1158,"\n"]],[1126,1126],[1127,1127]]],[1564365397728,["GJX@GJXAIOU",[[-1,1158,"\n"]],[1127,1127],[1126,1126]]],[1564365400040,["GJX@GJXAIOU",[[-1,1157,"\n"]],[1126,1126],[1125,1125]]],[1564365402127,["GJX@GJXAIOU",[[1,1157,"\n"]],[1125,1125],[1126,1126]]],[1564365411082,["GJX@GJXAIOU",[[1,1126,"使用命令行导入车道出"]],[1126,1126],[1136,1136]]],[1564365411688,["GJX@GJXAIOU",[[-1,1133,"车道出"]],[1136,1136],[1133,1133]]],[1564365428236,["GJX@GJXAIOU",[[1,1133,"导出数据库，必须是没有登录数据库的状态下；"]],[1133,1133],[1154,1154]]],[1564365452407,["GJX@GJXAIOU",[[1,1186,"\n"]],[1154,1154],[1155,1155]]],[1564365453137,["GJX@GJXAIOU",[[1,1187,"\n"]],[1155,1155],[1156,1156]]],[1564365652712,["GJX@GJXAIOU",[[1,1188,"\n"]],[1154,1154],[1155,1155]]],[1564365653680,["GJX@GJXAIOU",[[1,1189,"\n"]],[1155,1155],[1156,1156]]],[1564365653824,["GJX@GJXAIOU",[[1,1190,"\n"]],[1156,1156],[1157,1157]]],[1564365658177,["GJX@GJXAIOU",[[1,1157,"### 导出数据库："]],[1157,1157],[1167,1167]]],[1564365658719,["GJX@GJXAIOU",[[1,1201,"\n"]],[1167,1167],[1168,1168]]],[1564365668835,["GJX@GJXAIOU",[[1,1168,"导出的是一个.sql文件"]],[1168,1168],[1180,1180]]],[1564365668860,["GJX@GJXAIOU",[[1,1178," "]],[1180,1180],[1181,1181]]],[1564365675004,["GJX@GJXAIOU",[[1,1181,"，里面包含了所有的额"]],[1181,1181],[1191,1191]]],[1564365676017,["GJX@GJXAIOU",[[-1,1190,"额"]],[1191,1191],[1190,1190]]],[1564365691331,["GJX@GJXAIOU",[[1,1190,"数据库操作信息，包括创建数据库和插入"]],[1190,1190],[1208,1208]]],[1564365692505,["GJX@GJXAIOU",[[1,1208,"数据；"]],[1208,1208],[1211,1211]]],[1564365692767,["GJX@GJXAIOU",[[1,1245,"\n"]],[1211,1211],[1212,1212]]],[1564365699366,["GJX@GJXAIOU",[[1,1212,"****"]],[1212,1212],[1214,1214]]],[1564365715581,["GJX@GJXAIOU",[[1,1214,"在未登录数据库的状态下操作以下语句："]],[1214,1214],[1232,1232]]],[1564365717153,["GJX@GJXAIOU",[[1,1268,"\n"]],[1234,1234],[1235,1235]]],[1564365718795,["GJX@GJXAIOU",[[1,1235,"mu"]],[1235,1235],[1237,1237]]],[1564365719192,["GJX@GJXAIOU",[[-1,1236,"u"]],[1237,1237],[1236,1236]]],[1564365723778,["GJX@GJXAIOU",[[1,1236,"ysqldump"]],[1236,1236],[1244,1244]]],[1564365726219,["GJX@GJXAIOU",[[-1,1235,"mysqldump"]],[1244,1244],[1235,1235]]],[1564365727666,["GJX@GJXAIOU",[[1,1235,"··"]],[1235,1235],[1237,1237]]],[1564365728611,["GJX@GJXAIOU",[[-1,1235,"··"]],[1237,1237],[1235,1235]]],[1564365729338,["GJX@GJXAIOU",[[1,1235,"``"]],[1235,1235],[1237,1237]]],[1564365743283,["GJX@GJXAIOU",[[1,1236,"mysqldump -uroot -p jj"]],[1236,1236],[1258,1258]]],[1564365743938,["GJX@GJXAIOU",[[-1,1256,"jj"]],[1258,1258],[1256,1256]]],[1564365750683,["GJX@GJXAIOU",[[1,1256,"hello > hello.sq;"]],[1256,1256],[1273,1273]]],[1564365751368,["GJX@GJXAIOU",[[-1,1272,";"]],[1273,1273],[1272,1272]]],[1564365751611,["GJX@GJXAIOU",[[1,1272,"l"]],[1272,1272],[1273,1273]]],[1564365755177,["GJX@GJXAIOU",[[1,1275," 将h"]],[1275,1275],[1278,1278]]],[1564365755203,["GJX@GJXAIOU",[[1,1277," "]],[1278,1278],[1279,1279]]],[1564365757866,["GJX@GJXAIOU",[[1,1279,"ello数据库"]],[1279,1279],[1286,1286]]],[1564365757892,["GJX@GJXAIOU",[[1,1283," "]],[1286,1286],[1287,1287]]],[1564365764754,["GJX@GJXAIOU",[[1,1287,"导出保存为h"]],[1287,1287],[1293,1293]]],[1564365764780,["GJX@GJXAIOU",[[1,1292," "]],[1293,1293],[1294,1294]]],[1564365765321,["GJX@GJXAIOU",[[1,1294,"wll"]],[1294,1294],[1297,1297]]],[1564365765955,["GJX@GJXAIOU",[[-1,1294,"wll"]],[1297,1297],[1294,1294]]],[1564365768291,["GJX@GJXAIOU",[[1,1294,"ello.sq;"]],[1294,1294],[1302,1302]]],[1564365768816,["GJX@GJXAIOU",[[-1,1301,";"]],[1302,1302],[1301,1301]]],[1564365770866,["GJX@GJXAIOU",[[1,1301,"l文件"]],[1301,1301],[1304,1304]]],[1564365770894,["GJX@GJXAIOU",[[1,1302," "]],[1304,1304],[1305,1305]]],[1564365772724,["GJX@GJXAIOU",[[1,1305,"；"]],[1305,1305],[1306,1306]]],[1564365773241,["GJX@GJXAIOU",[[1,1340,"\n"]],[1306,1306],[1307,1307]]],[1564365774860,["GJX@GJXAIOU",[[1,1307,"注意"]],[1307,1307],[1309,1309]]],[1564365776313,["GJX@GJXAIOU",[[-1,1307,"注意"]],[1309,1309],[1307,1307]]],[1564365777293,["GJX@GJXAIOU",[[1,1307,"****"]],[1307,1307],[1309,1309]]],[1564365778844,["GJX@GJXAIOU",[[1,1309,"注意："]],[1309,1309],[1312,1312]]],[1564365791140,["GJX@GJXAIOU",[[1,1314," 导出文件的保存为"]],[1314,1314],[1323,1323]]],[1564365794016,["GJX@GJXAIOU",[[-1,1322,"为"]],[1323,1323],[1322,1322]]],[1564365808724,["GJX@GJXAIOU",[[1,1322,"位置为当前操作的命令的文件目录致残"]],[1322,1322],[1339,1339]]],[1564365809400,["GJX@GJXAIOU",[[-1,1337,"致残"]],[1339,1339],[1337,1337]]],[1564365811601,["GJX@GJXAIOU",[[1,1337,"下，"]],[1337,1337],[1339,1339]]],[1564365871864,[null,[[1,1273,";"],[-1,1274,"\n"],[1,1339,"\n"]],[1273,1273],[1340,1340]]],[1564365871864,[null,[[-1,1273,";"],[1,1275,"\n"],[-1,1339,"\n"]],[1340,1340],[1273,1273]]],[1564365832554,["GJX@GJXAIOU",[[1,1339,"可以通过先修改操作命令的目录"]],[1339,1339],[1353,1353]]],[1564365839346,["GJX@GJXAIOU",[[-1,1351,"目录"]],[1353,1353],[1351,1351]]],[1564365850801,["GJX@GJXAIOU",[[1,1351,"目录进行保存位置的修改；"]],[1351,1351],[1363,1363]]],[1564365851530,["GJX@GJXAIOU",[[1,1397,"\n"]],[1363,1363],[1364,1364]]],[1564365851663,["GJX@GJXAIOU",[[1,1398,"\n"]],[1364,1364],[1365,1365]]],[1564365858395,["GJX@GJXAIOU",[[1,1365,"### 导入数据库："]],[1365,1365],[1375,1375]]],[1564365858641,["GJX@GJXAIOU",[[1,1409,"\n"]],[1375,1375],[1376,1376]]],[1564365860059,["GJX@GJXAIOU",[[1,1376,"****"]],[1376,1376],[1378,1378]]],[1564365862569,["GJX@GJXAIOU",[[1,1378,"前提："]],[1378,1378],[1381,1381]]],[1564365871666,["GJX@GJXAIOU",[[1,1383," 必须在数据库中"]],[1383,1383],[1391,1391]]],[1564365931867,[null,[[1,1273,";"],[-1,1274,"\n"],[1,1391,"\n"]],[1273,1273],[1392,1392]]],[1564365931867,[null,[[-1,1273,";"],[1,1275,"\n"],[-1,1391,"\n"]],[1392,1392],[1273,1273]]],[1564365876580,["GJX@GJXAIOU",[[1,1391,"创建一个数据库英语"]],[1391,1391],[1400,1400]]],[1564365878186,["GJX@GJXAIOU",[[-1,1398,"英语"]],[1400,1400],[1398,1398]]],[1564365886220,["GJX@GJXAIOU",[[1,1398,"用于接收导入的数据库"]],[1398,1398],[1408,1408]]],[1564365886891,["GJX@GJXAIOU",[[1,1442,"\n"]],[1408,1408],[1409,1409]]],[1564365890239,["GJX@GJXAIOU",[[-1,1442,"\n"]],[1409,1409],[1408,1408]]],[1564365892331,["GJX@GJXAIOU",[[1,1408,",****"]],[1408,1408],[1411,1411]]],[1564365893665,["GJX@GJXAIOU",[[1,1411,"ranhou"]],[1411,1411],[1417,1417]]],[1564365894578,["GJX@GJXAIOU",[[-1,1411,"ranhou"]],[1417,1417],[1411,1411]]],[1564365910474,["GJX@GJXAIOU",[[1,1411,"然后退出数据库，操作以下语句："]],[1411,1411],[1426,1426]]],[1564365911954,["GJX@GJXAIOU",[[1,1462,"\n"]],[1428,1428],[1429,1429]]],[1564365913468,["GJX@GJXAIOU",[[1,1429,"··"]],[1429,1429],[1431,1431]]],[1564365914696,["GJX@GJXAIOU",[[-1,1429,"··"]],[1431,1431],[1429,1429]]],[1564365915274,["GJX@GJXAIOU",[[1,1429,"``"]],[1429,1429],[1431,1431]]],[1564365917074,["GJX@GJXAIOU",[[1,1430,"mu"]],[1430,1430],[1432,1432]]],[1564365917552,["GJX@GJXAIOU",[[-1,1431,"u"]],[1432,1432],[1431,1431]]],[1564365923580,["GJX@GJXAIOU",[[1,1431,"ysql -uroot -p["]],[1431,1431],[1446,1446]]],[1564365924674,["GJX@GJXAIOU",[[-1,1445,"["]],[1446,1446],[1445,1445]]],[1564365931345,["GJX@GJXAIOU",[[1,1445," hell"]],[1445,1445],[1450,1450]]],[1564365991867,[null,[[1,1273,";"],[-1,1274,"\n"]],[1273,1273],[1274,1274]]],[1564365991867,[null,[[-1,1273,";"],[1,1275,"\n"]],[1274,1274],[1273,1273]]],[1564365935553,["GJX@GJXAIOU",[[1,1451," <"]],[1451,1451],[1453,1453]]],[1564365938336,["GJX@GJXAIOU",[[-1,1446,"hello <"]],[1453,1453],[1446,1446]]],[1564365967369,["GJX@GJXAIOU",[[1,1446,"ReceiveH"]],[1446,1446],[1454,1454]]],[1564365968223,["GJX@GJXAIOU",[[-1,1453,"H"]],[1454,1454],[1453,1453]]],[1564365969192,["GJX@GJXAIOU",[[1,1453,"hllo"]],[1453,1453],[1457,1457]]],[1564365970831,["GJX@GJXAIOU",[[-1,1453,"hllo"]],[1457,1457],[1453,1453]]],[1564365973003,["GJX@GJXAIOU",[[1,1453,"Hello"]],[1453,1453],[1458,1458]]],[1564365975367,["GJX@GJXAIOU",[[-1,1446,"R"]],[1447,1447],[1446,1446]]],[1564365975633,["GJX@GJXAIOU",[[1,1446,"r"]],[1446,1446],[1447,1447]]],[1564365982472,["GJX@GJXAIOU",[[1,1458," < hello.j"]],[1458,1458],[1468,1468]]],[1564365982928,["GJX@GJXAIOU",[[-1,1467,"j"]],[1468,1468],[1467,1467]]],[1564365983496,["GJX@GJXAIOU",[[1,1467,"sq;"]],[1467,1467],[1470,1470]]],[1564365984186,["GJX@GJXAIOU",[[-1,1469,";"]],[1470,1470],[1469,1469]]],[1564365984665,["GJX@GJXAIOU",[[1,1469,"l;"]],[1469,1469],[1471,1471]]],[1564365988058,["GJX@GJXAIOU",[[1,1472," 将h"]],[1472,1472],[1475,1475]]],[1564365988085,["GJX@GJXAIOU",[[1,1474," "]],[1475,1475],[1476,1476]]],[1564365991833,["GJX@GJXAIOU",[[1,1476,"ello.sql数据库"]],[1476,1476],[1487,1487]]],[1564366051868,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1487,"\n"]],[1273,1273],[1488,1488]]],[1564366051868,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1487,"\n"]],[1488,1488],[1273,1273]]],[1564365999867,["GJX@GJXAIOU",[[1,1488,"导入到receive"]],[1488,1488],[1498,1498]]],[1564365999893,["GJX@GJXAIOU",[[1,1491," "]],[1498,1498],[1499,1499]]],[1564366001161,["GJX@GJXAIOU",[[1,1499,".hell"]],[1499,1499],[1504,1504]]],[1564366002815,["GJX@GJXAIOU",[[-1,1499,".hell"]],[1504,1504],[1499,1499]]],[1564366006058,["GJX@GJXAIOU",[[1,1499,"Hello数据库"]],[1499,1499],[1507,1507]]],[1564366006086,["GJX@GJXAIOU",[[1,1504," "]],[1507,1507],[1508,1508]]],[1564366007290,["GJX@GJXAIOU",[[1,1508,"中；"]],[1508,1508],[1510,1510]]],[1564366111871,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1510,"\n\n"]],[1273,1273],[1512,1512]]],[1564366111871,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1510,"\n\n"]],[1512,1512],[1273,1273]]],[1564366064618,["GJX@GJXAIOU",[[1,1514,"## Java连接"]],[1514,1514],[1523,1523]]],[1564366064645,["GJX@GJXAIOU",[[1,1521," "]],[1523,1523],[1524,1524]]],[1564366066634,["GJX@GJXAIOU",[[1,1524,"数据库方式"]],[1524,1524],[1529,1529]]],[1564366067192,["GJX@GJXAIOU",[[1,1559,"\n"]],[1529,1529],[1530,1530]]],[1564366067335,["GJX@GJXAIOU",[[1,1560,"\n"]],[1530,1530],[1531,1531]]],[1564366092189,["GJX@GJXAIOU",[[1,1529,"  JDBC"]],[1529,1529],[1535,1535]]],[1564366098297,["GJX@GJXAIOU",[[1,1531,"\n"]],[1531,1531],[1532,1532]]],[1564366109203,["GJX@GJXAIOU",[[1,1536,"：Java Databse"]],[1536,1536],[1549,1549]]],[1564366110151,["GJX@GJXAIOU",[[-1,1547,"se"]],[1549,1549],[1547,1547]]],[1564366111192,["GJX@GJXAIOU",[[1,1547,"ase"]],[1547,1547],[1550,1550]]],[1564366171869,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1550,"\n\n"]],[1273,1273],[1552,1552]]],[1564366171869,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1550,"\n\n"]],[1552,1552],[1273,1273]]],[1564366115291,["GJX@GJXAIOU",[[1,1550," con"]],[1550,1550],[1554,1554]]],[1564366118943,["GJX@GJXAIOU",[[-1,1551,"con"]],[1554,1554],[1551,1551]]],[1564366167018,["GJX@GJXAIOU",[[1,1551,"Connectivity cao"]],[1551,1551],[1567,1567]]],[1564366167631,["GJX@GJXAIOU",[[-1,1564,"cao"]],[1567,1567],[1564,1564]]],[1564366171677,["GJX@GJXAIOU",[[1,1564,"操作"]],[1564,1564],[1566,1566]]],[1564366231871,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1566,"\n\n"]],[1273,1273],[1568,1568]]],[1564366231871,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1566,"\n\n"]],[1568,1568],[1273,1273]]],[1564366175737,["GJX@GJXAIOU",[[1,1566,"数据库的规范；"]],[1566,1566],[1573,1573]]],[1564366203873,["GJX@GJXAIOU",[[1,1605,"\n"]],[1573,1573],[1574,1574]]],[1564366205343,["GJX@GJXAIOU",[[1,1606,"\n"]],[1574,1574],[1575,1575]]],[1564366209292,["GJX@GJXAIOU",[[1,1575,"JDBC主要"]],[1575,1575],[1581,1581]]],[1564366209320,["GJX@GJXAIOU",[[1,1579," "]],[1581,1581],[1582,1582]]],[1564366217725,["GJX@GJXAIOU",[[1,1582,"通过接口实现，醉成的"]],[1582,1582],[1592,1592]]],[1564366219544,["GJX@GJXAIOU",[[-1,1589,"醉成的"]],[1592,1592],[1589,1589]]],[1564366225580,["GJX@GJXAIOU",[[1,1589,"组成JDBC"]],[1589,1589],[1595,1595]]],[1564366225607,["GJX@GJXAIOU",[[1,1591," "]],[1595,1595],[1596,1596]]],[1564366227853,["GJX@GJXAIOU",[[1,1596,"中"]],[1596,1596],[1597,1597]]],[1564366227880,["GJX@GJXAIOU",[[1,1596," "]],[1597,1597],[1598,1598]]],[1564366230097,["GJX@GJXAIOU",[[1,1598,"两个包"]],[1598,1598],[1601,1601]]],[1564366291873,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1601,"\n\n"]],[1273,1273],[1603,1603]]],[1564366291873,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1601,"\n\n"]],[1603,1603],[1273,1273]]],[1564366233650,["GJX@GJXAIOU",[[1,1601,"："]],[1601,1601],[1602,1602]]],[1564366891887,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1602,"\n\n"]],[1273,1273],[1604,1604]]],[1564366891887,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1602,"\n\n"]],[1604,1604],[1273,1273]]],[1564366877610,["GJX@GJXAIOU",[[1,1602,"java.a"]],[1602,1602],[1608,1608]]],[1564366878207,["GJX@GJXAIOU",[[-1,1607,"a"]],[1608,1608],[1607,1607]]],[1564366880130,["GJX@GJXAIOU",[[1,1607,"sql和"]],[1607,1607],[1611,1611]]],[1564366880158,["GJX@GJXAIOU",[[1,1610," "]],[1611,1611],[1612,1612]]],[1564366880856,["GJX@GJXAIOU",[[1,1612,"j"]],[1612,1612],[1613,1613]]],[1564366880882,["GJX@GJXAIOU",[[1,1612," "]],[1613,1613],[1614,1614]]],[1564366890970,["GJX@GJXAIOU",[[1,1614,"avax.sql，"]],[1614,1614],[1623,1623]]],[1564366951887,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1623,"\n\n"]],[1273,1273],[1625,1625]]],[1564366951887,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1623,"\n\n"]],[1625,1625],[1273,1273]]],[1564366897537,["GJX@GJXAIOU",[[1,1623,"以上亮哥哥"]],[1623,1623],[1628,1628]]],[1564366898265,["GJX@GJXAIOU",[[-1,1625,"亮哥哥"]],[1628,1628],[1625,1625]]],[1564366907540,["GJX@GJXAIOU",[[1,1625,"两个包是JavaSE"]],[1625,1625],[1635,1635]]],[1564366907566,["GJX@GJXAIOU",[[1,1629," "]],[1635,1635],[1636,1636]]],[1564366908379,["GJX@GJXAIOU",[[1,1636,"中"]],[1636,1636],[1637,1637]]],[1564366908407,["GJX@GJXAIOU",[[1,1636," "]],[1637,1637],[1638,1638]]],[1564366911687,["GJX@GJXAIOU",[[1,1638,"包含的，大生男孩"]],[1638,1638],[1646,1646]]],[1564366912546,["GJX@GJXAIOU",[[-1,1642,"大生男孩"]],[1646,1646],[1642,1642]]],[1564366919074,["GJX@GJXAIOU",[[1,1642,"但是需要导入JDBC"]],[1642,1642],[1652,1652]]],[1564366919100,["GJX@GJXAIOU",[[1,1648," "]],[1652,1652],[1653,1653]]],[1564366920674,["GJX@GJXAIOU",[[1,1653,"的"]],[1653,1653],[1654,1654]]],[1564366920701,["GJX@GJXAIOU",[[1,1653," "]],[1654,1654],[1655,1655]]],[1564366942957,["GJX@GJXAIOU",[[1,1655,"实现类才可以使用，该类"]],[1655,1655],[1666,1666]]],[1564366945690,["GJX@GJXAIOU",[[-1,1665,"类"]],[1666,1666],[1665,1665]]],[1564366947603,["GJX@GJXAIOU",[[1,1665,"实现类"]],[1665,1665],[1668,1668]]],[1564367011891,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1668,"\n\n"]],[1273,1273],[1670,1670]]],[1564367011891,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1668,"\n\n"]],[1670,1670],[1273,1273]]],[1564366963629,["GJX@GJXAIOU",[[1,1668,"是由第三方数据库提供商完成；"]],[1668,1668],[1682,1682]]],[1564366963922,["GJX@GJXAIOU",[[1,1714,"\n"]],[1682,1682],[1683,1683]]],[1564366964584,["GJX@GJXAIOU",[[1,1715,"\n"]],[1683,1683],[1684,1684]]],[1564366971925,["GJX@GJXAIOU",[[1,1684,"JDBC主要"]],[1684,1684],[1690,1690]]],[1564366971953,["GJX@GJXAIOU",[[1,1688," "]],[1690,1690],[1691,1691]]],[1564366975994,["GJX@GJXAIOU",[[1,1691,"的接口和类："]],[1691,1691],[1697,1697]]],[1564366976234,["GJX@GJXAIOU",[[1,1729,"\n"]],[1697,1697],[1698,1698]]],[1564366998962,["GJX@GJXAIOU",[[1,1698,"- Driver接口"]],[1698,1698],[1708,1708]]],[1564366998990,["GJX@GJXAIOU",[[1,1706," "]],[1708,1708],[1709,1709]]],[1564367009939,["GJX@GJXAIOU",[[1,1709,"：连接数据库的驱动API"]],[1709,1709],[1721,1721]]],[1564367009967,["GJX@GJXAIOU",[[1,1718," "]],[1721,1721],[1722,1722]]],[1564367010289,["GJX@GJXAIOU",[[1,1722,"；"]],[1722,1722],[1723,1723]]],[1564367010640,["GJX@GJXAIOU",[[1,1724,"- \n"]],[1723,1723],[1726,1726]]],[1564367071888,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1726,"\n\n"]],[1273,1273],[1728,1728]]],[1564367071888,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1726,"\n\n"]],[1728,1728],[1273,1273]]],[1564367025443,["GJX@GJXAIOU",[[1,1726,"DriverManage类"]],[1726,1726],[1739,1739]]],[1564367025473,["GJX@GJXAIOU",[[1,1738," "]],[1739,1739],[1740,1740]]],[1564367048784,["GJX@GJXAIOU",[[1,1740,"：驱动管理类，负责驱动的主动"]],[1740,1740],[1754,1754]]],[1564367049479,["GJX@GJXAIOU",[[-1,1752,"主动"]],[1754,1754],[1752,1752]]],[1564367050025,["GJX@GJXAIOU",[[1,1752,"z"]],[1752,1752],[1753,1753]]],[1564367050052,["GJX@GJXAIOU",[[1,1752," "]],[1753,1753],[1754,1754]]],[1564367051377,["GJX@GJXAIOU",[[-1,1752," z"]],[1754,1754],[1752,1752]]],[1564367060955,["GJX@GJXAIOU",[[1,1752,"注册（）"]],[1752,1752],[1756,1756]]],[1564367063235,["GJX@GJXAIOU",[[1,1755,"加载"]],[1755,1755],[1757,1757]]],[1564367071011,["GJX@GJXAIOU",[[1,1758,"，获取数据库连接"]],[1758,1758],[1766,1766]]],[1564367071368,["GJX@GJXAIOU",[[1,1767,"- \n"]],[1766,1766],[1769,1769]]],[1564367131890,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1769,"\n\n"]],[1273,1273],[1771,1771]]],[1564367131890,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1769,"\n\n"]],[1771,1771],[1273,1273]]],[1564367072846,["GJX@GJXAIOU",[[-1,1767,"- "]],[1769,1769],[1767,1767]]],[1564367073094,["GJX@GJXAIOU",[[-1,1798,"\n"]],[1767,1767],[1766,1766]]],[1564367073580,["GJX@GJXAIOU",[[1,1766,"；"]],[1766,1766],[1767,1767]]],[1564367073798,["GJX@GJXAIOU",[[1,1768,"- \n"]],[1767,1767],[1770,1770]]],[1564367079188,["GJX@GJXAIOU",[[1,1770,"statement"]],[1770,1770],[1779,1779]]],[1564367083689,["GJX@GJXAIOU",[[-1,1770,"s"]],[1771,1771],[1770,1770]]],[1564367088658,["GJX@GJXAIOU",[[1,1770,"S"]],[1770,1770],[1771,1771]]],[1564367091617,["GJX@GJXAIOU",[[1,1779,"类"]],[1779,1779],[1780,1780]]],[1564367091645,["GJX@GJXAIOU",[[1,1779," "]],[1780,1780],[1781,1781]]],[1564367093303,["GJX@GJXAIOU",[[-1,1780,"类"]],[1781,1781],[1780,1780]]],[1564367100075,["GJX@GJXAIOU",[[1,1780,"接口：负责SQL"]],[1780,1780],[1788,1788]]],[1564367100102,["GJX@GJXAIOU",[[1,1785," "]],[1788,1788],[1789,1789]]],[1564367101314,["GJX@GJXAIOU",[[1,1789,"语句"]],[1789,1789],[1791,1791]]],[1564367101341,["GJX@GJXAIOU",[[1,1789," "]],[1791,1791],[1792,1792]]],[1564367103482,["GJX@GJXAIOU",[[1,1792,"的预处理"]],[1792,1792],[1796,1796]]],[1564367107110,["GJX@GJXAIOU",[[-1,1793,"预处理"]],[1796,1796],[1793,1793]]],[1564367109616,["GJX@GJXAIOU",[[1,1793,"执行"]],[1793,1793],[1795,1795]]],[1564367110495,["GJX@GJXAIOU",[[1,1796,"- \n"]],[1795,1795],[1798,1798]]],[1564367111448,["GJX@GJXAIOU",[[1,1796,"  "]],[1798,1798],[1800,1800]]],[1564367118930,["GJX@GJXAIOU",[[1,1800,"Prepareed"]],[1800,1800],[1809,1809]]],[1564367120265,["GJX@GJXAIOU",[[-1,1807,"ed"]],[1809,1809],[1807,1807]]],[1564367131725,["GJX@GJXAIOU",[[1,1807,"dStatement接口"]],[1807,1807],[1819,1819]]],[1564367131753,["GJX@GJXAIOU",[[1,1817," "]],[1819,1819],[1820,1820]]],[1564367191893,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1820,"\n"]],[1273,1273],[1821,1821]]],[1564367191893,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1820,"\n"]],[1821,1821],[1273,1273]]],[1564367137005,["GJX@GJXAIOU",[[1,1820,"：负责SQL"]],[1820,1820],[1826,1826]]],[1564367137032,["GJX@GJXAIOU",[[1,1823," "]],[1826,1826],[1827,1827]]],[1564367138307,["GJX@GJXAIOU",[[1,1827,"语句"]],[1827,1827],[1829,1829]]],[1564367138334,["GJX@GJXAIOU",[[1,1827," "]],[1829,1829],[1830,1830]]],[1564367140659,["GJX@GJXAIOU",[[1,1830,"的预处理；"]],[1830,1830],[1835,1835]]],[1564367142368,["GJX@GJXAIOU",[[1,1836,"  - \n"]],[1835,1835],[1840,1840]]],[1564367144393,["GJX@GJXAIOU",[[-1,1836,"  "]],[1840,1840],[1838,1838]]],[1564367151635,["GJX@GJXAIOU",[[1,1838,"ResultSet接口"]],[1838,1838],[1849,1849]]],[1564367151663,["GJX@GJXAIOU",[[1,1847," "]],[1849,1849],[1850,1850]]],[1564367163156,["GJX@GJXAIOU",[[1,1850,"：处理查询数据库的结果集；"]],[1850,1850],[1863,1863]]],[1564367166754,["GJX@GJXAIOU",[[1,1795,"；"]],[1795,1795],[1796,1796]]],[1564367794778,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1864,"\n"]],[1273,1273],[1865,1865]]],[1564367794778,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1864,"\n"]],[1865,1865],[1273,1273]]],[1564367791155,["GJX@GJXAIOU",[[1,1867,"### 通过JDBC"]],[1867,1867],[1877,1877]]],[1564367791183,["GJX@GJXAIOU",[[1,1873," "]],[1877,1877],[1878,1878]]],[1564367793051,["GJX@GJXAIOU",[[1,1878,"两"]],[1878,1878],[1879,1879]]],[1564367793079,["GJX@GJXAIOU",[[1,1878," "]],[1879,1879],[1880,1880]]],[1564367793815,["GJX@GJXAIOU",[[-1,1879,"两"]],[1880,1880],[1879,1879]]],[1564367854778,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1879,"\n"]],[1273,1273],[1880,1880]]],[1564367854778,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1879,"\n"]],[1880,1880],[1273,1273]]],[1564367799691,["GJX@GJXAIOU",[[1,1879,"连接MySQL"]],[1879,1879],[1886,1886]]],[1564367799720,["GJX@GJXAIOU",[[1,1881," "]],[1886,1886],[1887,1887]]],[1564367800494,["GJX@GJXAIOU",[[1,1916,"\n"]],[1887,1887],[1888,1888]]],[1564368094783,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1887,"\n"]],[1273,1273],[1888,1888]]],[1564368094783,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1887,"\n"]],[1888,1888],[1273,1273]]],[1564368091915,["GJX@GJXAIOU",[[1,1738,"r"]],[1738,1738],[1739,1739]]],[1564369954816,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1888,"\n"]],[1273,1273],[1889,1889]]],[1564369954816,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1888,"\n"]],[1889,1889],[1273,1273]]],[1564369897706,["GJX@GJXAIOU",[[1,1890,"不周一："]],[1890,1890],[1894,1894]]],[1564369898408,["GJX@GJXAIOU",[[-1,1890,"不周一："]],[1894,1894],[1890,1890]]],[1564369899628,["GJX@GJXAIOU",[[1,1890,"步骤"]],[1890,1890],[1892,1892]]],[1564369910006,["GJX@GJXAIOU",[[-1,1890,"步骤"]],[1892,1892],[1890,1890]]],[1564369912207,["GJX@GJXAIOU",[[1,1890,"不周一"]],[1890,1890],[1893,1893]]],[1564369913047,["GJX@GJXAIOU",[[-1,1890,"不周一"]],[1893,1893],[1890,1890]]],[1564369915122,["GJX@GJXAIOU",[[1,1890,"步骤YI"]],[1890,1890],[1894,1894]]],[1564369915150,["GJX@GJXAIOU",[[1,1892," "]],[1894,1894],[1895,1895]]],[1564369915557,["GJX@GJXAIOU",[[-1,1893,"YI"]],[1895,1895],[1893,1893]]],[1564369916135,["GJX@GJXAIOU",[[1,1893,"yi"]],[1893,1893],[1895,1895]]],[1564369917016,["GJX@GJXAIOU",[[-1,1892," yi"]],[1895,1895],[1892,1892]]],[1564369926892,["GJX@GJXAIOU",[[1,1892,"一：确定数据库的URL"]],[1892,1892],[1903,1903]]],[1564369926920,["GJX@GJXAIOU",[[1,1900," "]],[1903,1903],[1904,1904]]],[1564369928201,["GJX@GJXAIOU",[[1,1904,"，"]],[1904,1904],[1905,1905]]],[1564369929141,["GJX@GJXAIOU",[[-1,1904,"，"]],[1905,1905],[1904,1904]]],[1564369930087,["GJX@GJXAIOU",[[1,1904,"；"]],[1904,1904],[1905,1905]]],[1564369934542,["GJX@GJXAIOU",[[1,1933,"\n"]],[1905,1905],[1906,1906]]],[1564369937487,["GJX@GJXAIOU",[[1,1906,"例如：``"]],[1906,1906],[1911,1911]]],[1564370014819,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1911,"\n"]],[1273,1273],[1912,1912]]],[1564370014819,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1911,"\n"]],[1912,1912],[1273,1273]]],[1564369974215,["GJX@GJXAIOU",[[1,1910,"jdbc:mysql://localhost:3306/hello"]],[1910,1910],[1943,1943]]],[1564369992642,["GJX@GJXAIOU",[[1,1944," 协议：自协议：、、"]],[1944,1944],[1954,1954]]],[1564369993246,["GJX@GJXAIOU",[[-1,1952,"、、"]],[1954,1954],[1952,1952]]],[1564370002306,["GJX@GJXAIOU",[[1,1952,"//IP：端口号/."]],[1952,1952],[1962,1962]]],[1564370002813,["GJX@GJXAIOU",[[-1,1961,"."]],[1962,1962],[1961,1961]]],[1564370003943,["GJX@GJXAIOU",[[1,1961,"s"]],[1961,1961],[1962,1962]]],[1564370004461,["GJX@GJXAIOU",[[-1,1961,"s"]],[1962,1962],[1961,1961]]],[1564370012787,["GJX@GJXAIOU",[[1,1961,"数据库名？参数"]],[1961,1961],[1968,1968]]],[1564370074815,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,1968,"\n"]],[1273,1273],[1969,1969]]],[1564370074815,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,1968,"\n"]],[1969,1969],[1273,1273]]],[1564370042402,["GJX@GJXAIOU",[[1,1969,"协议：JDBC总协议"]],[1969,1969],[1979,1979]]],[1564370042431,["GJX@GJXAIOU",[[1,1976," "]],[1979,1979],[1980,1980]]],[1564370042873,["GJX@GJXAIOU",[[1,1980,"；"]],[1980,1980],[1981,1981]]],[1564370043157,["GJX@GJXAIOU",[[1,2008,"\n"]],[1981,1981],[1982,1982]]],[1564370055784,["GJX@GJXAIOU",[[1,1982,"自协议：目前使用的是连接MySQL"]],[1982,1982],[1999,1999]]],[1564370055810,["GJX@GJXAIOU",[[1,1994," "]],[1999,1999],[2000,2000]]],[1564370134816,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,2000,"\n"]],[1273,1273],[2001,2001]]],[1564370134816,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,2000,"\n"]],[2001,2001],[1273,1273]]],[1564370094019,["GJX@GJXAIOU",[[1,2000,"数据库"]],[2000,2000],[2003,2003]]],[1564370094047,["GJX@GJXAIOU",[[1,2000," "]],[2003,2003],[2004,2004]]],[1564370095815,["GJX@GJXAIOU",[[1,2004,"的协议；"]],[2004,2004],[2008,2008]]],[1564370096022,["GJX@GJXAIOU",[[1,2035,"\n"]],[2008,2008],[2009,2009]]],[1564370104674,["GJX@GJXAIOU",[[1,2009,"IP：是数据库服务器的IP"]],[2009,2009],[2022,2022]]],[1564370104702,["GJX@GJXAIOU",[[1,2020," "]],[2022,2022],[2023,2023]]],[1564370107676,["GJX@GJXAIOU",[[1,2023,"地址"]],[2023,2023],[2025,2025]]],[1564370107704,["GJX@GJXAIOU",[[1,2023," "]],[2025,2025],[2026,2026]]],[1564370115072,["GJX@GJXAIOU",[[1,2026,"，localhost表格"]],[2026,2026],[2038,2038]]],[1564370115100,["GJX@GJXAIOU",[[1,2036," "]],[2038,2038],[2039,2039]]],[1564370115893,["GJX@GJXAIOU",[[-1,2037,"表格"]],[2039,2039],[2037,2037]]],[1564370194832,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,2037,"\n"]],[1273,1273],[2038,2038]]],[1564370194832,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,2037,"\n"]],[2038,2038],[1273,1273]]],[1564370189235,["GJX@GJXAIOU",[[1,2037,"表示本机的IP"]],[2037,2037],[2044,2044]]],[1564370189263,["GJX@GJXAIOU",[[1,2042," "]],[2044,2044],[2045,2045]]],[1564370189971,["GJX@GJXAIOU",[[1,2045,"地址"]],[2045,2045],[2047,2047]]],[1564370190001,["GJX@GJXAIOU",[[1,2045," "]],[2047,2047],[2048,2048]]],[1564370314825,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,2048,"\n"]],[1273,1273],[2049,2049]]],[1564370314825,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,2048,"\n"]],[2049,2049],[1273,1273]]],[1564370294992,["GJX@GJXAIOU",[[1,2048,"；"]],[2048,2048],[2049,2049]]],[1564370295246,["GJX@GJXAIOU",[[1,2076,"\n"]],[2049,2049],[2050,2050]]],[1564370307416,["GJX@GJXAIOU",[[1,2050,"端口号：3306 MySQL默认"]],[2050,2050],[2066,2066]]],[1564370307444,["GJX@GJXAIOU",[[1,2064," "]],[2066,2066],[2067,2067]]],[1564370310551,["GJX@GJXAIOU",[[1,2067,"的端口号，这里"]],[2067,2067],[2074,2074]]],[1564370311789,["GJX@GJXAIOU",[[-1,2072,"这里"]],[2074,2074],[2072,2072]]],[1564370314776,["GJX@GJXAIOU",[[1,2072,"可以修改；"]],[2072,2072],[2077,2077]]],[1564370374823,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,2077,"\n"]],[1273,1273],[2078,2078]]],[1564370374823,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,2077,"\n"]],[2078,2078],[1273,1273]]],[1564370315005,["GJX@GJXAIOU",[[1,2104,"\n"]],[2077,2077],[2078,2078]]],[1564370334959,["GJX@GJXAIOU",[[1,2078,"数据库：目前连接的操作的数据库是哪一个；"]],[2078,2078],[2098,2098]]],[1564370335269,["GJX@GJXAIOU",[[1,2125,"\n"]],[2098,2098],[2099,2099]]],[1564370346150,["GJX@GJXAIOU",[[1,2099,"参数：通常为：use"]],[2099,2099],[2109,2109]]],[1564370347181,["GJX@GJXAIOU",[[-1,2106,"use"]],[2109,2109],[2106,2106]]],[1564370348345,["GJX@GJXAIOU",[[1,2106,"``"]],[2106,2106],[2108,2108]]],[1564370350451,["GJX@GJXAIOU",[[1,2107,"usetr"]],[2107,2107],[2112,2112]]],[1564370351253,["GJX@GJXAIOU",[[-1,2110,"tr"]],[2112,2112],[2110,2110]]],[1564370351511,["GJX@GJXAIOU",[[1,2110,"t"]],[2110,2110],[2111,2111]]],[1564370352182,["GJX@GJXAIOU",[[-1,2110,"t"]],[2111,2111],[2110,2110]]],[1564370352313,["GJX@GJXAIOU",[[1,2110,"r"]],[2110,2110],[2111,2111]]],[1564370353751,["GJX@GJXAIOU",[[-1,2110,"r"]],[2111,2111],[2110,2110]]],[1564370361642,["GJX@GJXAIOU",[[1,2110,"Unicode = true;"]],[2110,2110],[2125,2125]]],[1564370362285,["GJX@GJXAIOU",[[-1,2124,";"]],[2125,2125],[2124,2124]]],[1564370362688,["GJX@GJXAIOU",[[1,2124," "]],[2124,2124],[2125,2125]]],[1564370366441,["GJX@GJXAIOU",[[1,2126,"huo"]],[2126,2126],[2129,2129]]],[1564370367054,["GJX@GJXAIOU",[[-1,2126,"huo"]],[2129,2129],[2126,2126]]],[1564370370182,["GJX@GJXAIOU",[[1,2126," ``"]],[2126,2126],[2129,2129]]],[1564370374129,["GJX@GJXAIOU",[[1,2128,"chart"]],[2128,2128],[2133,2133]]],[1564370434827,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"],[1,2134,"\n"]],[1273,1273],[2135,2135]]],[1564370434827,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"],[-1,2134,"\n"]],[2135,2135],[1273,1273]]],[1564370375262,["GJX@GJXAIOU",[[-1,2132,"t"]],[2133,2133],[2132,2132]]],[1564370382623,["GJX@GJXAIOU",[[1,2132,"acterEncodeing"]],[2132,2132],[2146,2146]]],[1564370383741,["GJX@GJXAIOU",[[-1,2142,"eing"]],[2146,2146],[2142,2142]]],[1564370389167,["GJX@GJXAIOU",[[1,2142,"ing = utf-8"]],[2142,2142],[2153,2153]]],[1564370392823,["GJX@GJXAIOU",[[1,2154,";"]],[2154,2154],[2155,2155]]],[1564370393742,["GJX@GJXAIOU",[[1,2182,"\n"]],[2155,2155],[2156,2156]]],[1564370394558,["GJX@GJXAIOU",[[1,2183,"\n"]],[2156,2156],[2157,2157]]],[1564370396366,["GJX@GJXAIOU",[[1,2157,"buzhou"]],[2157,2157],[2163,2163]]],[1564370397605,["GJX@GJXAIOU",[[-1,2157,"buzhou"]],[2163,2163],[2157,2157]]],[1564370400856,["GJX@GJXAIOU",[[1,1890,"- "]],[1890,1890],[1892,1892]]],[1564370405806,["GJX@GJXAIOU",[[1,1908,"  - "]],[1908,1908],[1912,1912]]],[1564370409082,["GJX@GJXAIOU",[[1,1975,"  "],[1,1988,"  "],[1,2015,"  "],[1,2056,"  "],[1,2084,"  "],[1,2105,"  "]],[1975,2162],[1975,2174]]],[1564370409277,["GJX@GJXAIOU",[[1,1977,"  "],[1,1990,"  "],[1,2019,"  "],[1,2064,"  "],[1,2094,"  "],[1,2115,"  "]],[1975,2174],[1975,2186]]],[1564370409571,["GJX@GJXAIOU",[[-1,1975,"    协议：JDBC 总协议；\n    自协议：目前使用的是连接 MySQL 数据库的协议；\n    IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    端口号：3306 MySQL 默认的端口号，可以修改；\n    数据库：目前连接的操作的数据库是哪一个；\n    参数：通常为：`useUnicode = true ` `characterEncoding = utf"],[-1,2182,"8`;\n"]],[1975,2186],[1976,1976]]],[1564370409706,["GJX@GJXAIOU",[[1,1976," "]],[1976,1976],[1977,1977]]],[1564370412795,["GJX@GJXAIOU",[[-1,1976," "]],[1977,1977],[1976,1976]]],[1564370413364,["GJX@GJXAIOU",[[1,1975,"    协议：JDBC 总协议；\n    自协议：目前使用的是连接 MySQL 数据库的协议；\n    IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    端口号：3306 MySQL 默认的端口号，可以修改；\n    数据库：目前连接的操作的数据库是哪一个；\n    参数：通常为：`useUnicode = true ` `characterEncoding = utf"],[1,1976,"8`;\n"]],[1976,1976],[1975,2186]]],[1564370414829,["GJX@GJXAIOU",[[-1,1977," "],[1,1978,"-"],[-1,1994," "],[1,1995,"-"],[-1,2025," "],[1,2026,"-"],[-1,2070," "],[1,2071,"-"],[-1,2102," "],[1,2103,"-"],[-1,2127," "],[1,2128,"-"]],[1975,2186],[1975,2186]]],[1564370416054,["GJX@GJXAIOU",[[1,1977,"  "],[1,1992,"  "],[1,2023,"  "],[1,2070,"  "],[1,2102,"  "],[1,2125,"  "]],[1975,2186],[1975,2198]]],[1564370419518,["GJX@GJXAIOU",[[1,2200,"BUZHOU"]],[2200,2200],[2206,2206]]],[1564370420343,["GJX@GJXAIOU",[[-1,2200,"BUZHOU"]],[2206,2206],[2200,2200]]],[1564370420612,["GJX@GJXAIOU",[[-1,2225,"\n"]],[2200,2200],[2199,2199]]],[1564370425395,["GJX@GJXAIOU",[[1,2199,"步骤二："]],[2199,2199],[2203,2203]]],[1564370430862,["GJX@GJXAIOU",[[1,2199,"- "]],[2199,2199],[2201,2201]]],[1564370494828,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564370494828,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564370439834,["GJX@GJXAIOU",[[1,2205,"连接数据库粗腰"]],[2205,2205],[2212,2212]]],[1564370440549,["GJX@GJXAIOU",[[-1,2210,"粗腰"]],[2212,2212],[2210,2210]]],[1564370444879,["GJX@GJXAIOU",[[1,2210,"需要用户名和密码："]],[2210,2210],[2219,2219]]],[1564370452853,["GJX@GJXAIOU",[[1,2220,"- \n"]],[2219,2219],[2222,2222]]],[1564370453006,["GJX@GJXAIOU",[[-1,2220,"- "]],[2222,2222],[2221,2221]]],[1564370453149,["GJX@GJXAIOU",[[1,2246,"\n"]],[2221,2221],[2222,2222]]],[1564370462432,["GJX@GJXAIOU",[[1,2222,"具体的连接操作方式："]],[2222,2222],[2232,2232]]],[1564370462742,["GJX@GJXAIOU",[[1,2257,"\n"]],[2232,2232],[2233,2233]]],[1564370468761,["GJX@GJXAIOU",[[1,2233,"- 方式一：直接"]],[2233,2233],[2241,2241]]],[1564370473677,["GJX@GJXAIOU",[[-1,2239,"直接"]],[2241,2241],[2239,2239]]],[1564370492977,["GJX@GJXAIOU",[[1,2239,"直接在代码中写入要操作的数据库以及"]],[2239,2239],[2256,2256]]],[1564370554830,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564370554830,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564370499337,["GJX@GJXAIOU",[[1,2256,"用户名和密码细腻"]],[2256,2256],[2264,2264]]],[1564370499885,["GJX@GJXAIOU",[[-1,2262,"细腻"]],[2264,2264],[2262,2262]]],[1564370509923,["GJX@GJXAIOU",[[1,2262,"信息，但是带么"]],[2262,2262],[2269,2269]]],[1564370510521,["GJX@GJXAIOU",[[-1,2267,"带么"]],[2269,2269],[2267,2267]]],[1564370518472,["GJX@GJXAIOU",[[1,2267,"代码不可复用；"]],[2267,2267],[2274,2274]]],[1564370519064,["GJX@GJXAIOU",[[1,2275,"- \n"]],[2274,2274],[2277,2277]]],[1564370519831,["GJX@GJXAIOU",[[-1,2275,"- "]],[2277,2277],[2275,2275]]],[1564370521230,["GJX@GJXAIOU",[[1,2275,"```"]],[2275,2275],[2278,2278]]],[1564370521260,["GJX@GJXAIOU",[[1,2278,"language\n```\n"]],[2278,2278],[2278,2286]]],[1564370522282,["GJX@GJXAIOU",[[-1,2278,"language"],[1,2286,"j"]],[2278,2286],[2279,2279]]],[1564370522710,["GJX@GJXAIOU",[[1,2279,"ava"]],[2279,2279],[2282,2282]]],[1564370522901,["GJX@GJXAIOU",[[1,2283,"\n"]],[2282,2282],[2283,2283]]],[1564370537122,["GJX@GJXAIOU",[[1,2283,"package a_connectmysql;   /**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */   import org.junit.jupiter.api.Test;   import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException;         /*\n Class.forName(\"com.mysql.jdbc.Driver\");  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码  static { try { java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(\"Can't register driver!\"); } }  这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：  1. 创建的MySQL连接的Java程序的JDBC.Driver对象  2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面   这样做到好处： 简化代码的逻辑，提高效率    */   public class Demo1 {\n    //JDBC连接数据库的推荐方式\n  @Test\n  public void connection() {\n        try {\n            //1. 注册驱动 JDBC连接MySQL\n  Class.forName(\"com.mysql.jdbc.Driver\");    //2. 准备URL，是JDCB连接MySQL数据库的URL\n  String url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";    //3. 通过DriverManager获取到连接对象\n  Connection conn = DriverManager.getConnection(url, \"root\", \"123456\");    System.out.println(conn);    //4. 关闭数据库连接，释放资源\n  conn.close();    } catch (ClassNotFoundException e) {\n            // TODO Auto-generated catch block\n  e.printStackTrace();\n  } catch (SQLException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[2283,2283],[3546,3546]]],[1564370539132,["GJX@GJXAIOU",[[-1,2283,"package a_connectmysql;   /**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */   import org.junit.jupiter.api.Test;   import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException;         /*\n Class.forName(\"com.mysql.jdbc.Driver\");  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码  static { try { java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(\"Can't register driver!\"); } }  这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：  1. 创建的MySQL连接的Java程序的JDBC.Driver对象  2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面   这样做到好处： 简化代码的逻辑，提高效率    */   public class Demo1 {\n    //JDBC连接数据库的推荐方式\n  @Test\n  public void connection() {\n        try {\n            //1. 注册驱动 JDBC连接MySQL\n  Class.forName(\"com.mysql.jdbc.Driver\");    //2. 准备URL，是JDCB连接MySQL数据库的URL\n  String url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";    //3. 通过DriverManager获取到连接对象\n  Connection conn = DriverManager.getConnection(url, \"root\", \"123456\");    System.out.println(conn);    //4. 关闭数据库连接，释放资源\n  conn.close();    } catch (ClassNotFoundException e) {\n            // TODO Auto-generated catch block\n  e.printStackTrace();\n  } catch (SQLException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[3546,3546],[2283,2283]]],[1564370541340,["GJX@GJXAIOU",[[1,2283,"package a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n\n\n\n/*\n Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率\n\n */\n\npublic class Demo1 {\n    //JDBC连接数据库的推荐方式\n    @Test\n    public void connection() {\n        try {\n            //1. 注册驱动 JDBC连接MySQL\n            Class.forName(\"com.mysql.jdbc.Driver\");\n\n            //2. 准备URL，是JDCB连接MySQL数据库的URL\n            String url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\n            //3. 通过DriverManager获取到连接对象\n            Connection conn = DriverManager.getConnection(url, \"root\", \"123456\");\n\n            System.out.println(conn);\n\n            //4. 关闭数据库连接，释放资源\n            conn.close();\n\n        } catch (ClassNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"]],[2283,2283],[3709,3709]]],[1564370545974,["GJX@GJXAIOU",[[1,3716,"- fagnsh"]],[3716,3716],[3724,3724]]],[1564370547031,["GJX@GJXAIOU",[[-1,3718,"fagnsh"]],[3724,3724],[3718,3718]]],[1564370550722,["GJX@GJXAIOU",[[1,3718,"方式二："]],[3718,3718],[3722,3722]]],[1564370614833,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564370614833,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564370605535,["GJX@GJXAIOU",[[1,3722,"架构"]],[3722,3722],[3724,3724]]],[1564370606366,["GJX@GJXAIOU",[[-1,3722,"架构"]],[3724,3724],[3722,3722]]],[1564370614353,["GJX@GJXAIOU",[[1,3722,"将数据库的具体信息写入"]],[3722,3722],[3733,3733]]],[1564370674833,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564370674833,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564370646255,["GJX@GJXAIOU",[[1,3733,"：.propertis"]],[3733,3733],[3744,3744]]],[1564370646639,["GJX@GJXAIOU",[[-1,3743,"s"]],[3744,3744],[3743,3743]]],[1564370648954,["GJX@GJXAIOU",[[1,3743,"es文件"]],[3743,3743],[3747,3747]]],[1564370648984,["GJX@GJXAIOU",[[1,3745," "]],[3747,3747],[3748,3748]]],[1564370654943,["GJX@GJXAIOU",[[1,3748,"中，然后使用Java"]],[3748,3748],[3758,3758]]],[1564370654973,["GJX@GJXAIOU",[[1,3754," "]],[3758,3758],[3759,3759]]],[1564370656546,["GJX@GJXAIOU",[[1,3759,"代码"]],[3759,3759],[3761,3761]]],[1564370656577,["GJX@GJXAIOU",[[1,3759," "]],[3761,3761],[3762,3762]]],[1564370659146,["GJX@GJXAIOU",[[1,3762,"连接"]],[3762,3762],[3764,3764]]],[1564370660661,["GJX@GJXAIOU",[[-1,3762,"连接"]],[3764,3764],[3762,3762]]],[1564370673352,["GJX@GJXAIOU",[[1,3762,"读取文件中信息，更改"]],[3762,3762],[3772,3772]]],[1564370734834,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564370734834,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564370691784,["GJX@GJXAIOU",[[1,3772,"数据库信息只要在.properties文件"]],[3772,3772],[3793,3793]]],[1564370691814,["GJX@GJXAIOU",[[1,3791," "]],[3793,3793],[3794,3794]]],[1564370696890,["GJX@GJXAIOU",[[1,3794,"中修改就行；"]],[3794,3794],[3800,3800]]],[1564370697365,["GJX@GJXAIOU",[[-1,3799,"；"]],[3800,3800],[3799,3799]]],[1564370697986,["GJX@GJXAIOU",[[1,3799,"；"]],[3799,3799],[3800,3800]]],[1564370698494,["GJX@GJXAIOU",[[1,3801,"- \n"]],[3800,3800],[3803,3803]]],[1564370699143,["GJX@GJXAIOU",[[-1,3801,"- "]],[3803,3803],[3801,3801]]],[1564370700721,["GJX@GJXAIOU",[[1,3801,"```"]],[3801,3801],[3804,3804]]],[1564370700753,["GJX@GJXAIOU",[[1,3804,"language\n```\n"]],[3804,3804],[3804,3812]]],[1564370702065,["GJX@GJXAIOU",[[-1,3804,"language"],[1,3812,"j"]],[3804,3812],[3805,3805]]],[1564370702503,["GJX@GJXAIOU",[[1,3805,"ava"]],[3805,3805],[3808,3808]]],[1564370702780,["GJX@GJXAIOU",[[1,3809,"\n"]],[3808,3808],[3809,3809]]],[1564370705317,["GJX@GJXAIOU",[[1,3801,"\n"]],[3801,3801],[3802,3802]]],[1564370710039,["GJX@GJXAIOU",[[1,3801,"dg"]],[3801,3801],[3803,3803]]],[1564370710624,["GJX@GJXAIOU",[[-1,3802,"g"]],[3803,3803],[3802,3802]]],[1564370717472,["GJX@GJXAIOU",[[1,3802,"b.properties"]],[3802,3802],[3814,3814]]],[1564370722590,["GJX@GJXAIOU",[[-1,3818,"java"]],[3822,3822],[3818,3818]]],[1564370724559,["GJX@GJXAIOU",[[1,3818,"propr"]],[3818,3818],[3823,3823]]],[1564370725328,["GJX@GJXAIOU",[[-1,3822,"r"]],[3823,3823],[3822,3822]]],[1564370727630,["GJX@GJXAIOU",[[1,3822,"erties"]],[3822,3822],[3828,3828]]],[1564370728360,["GJX@GJXAIOU",[[1,3830,"\n"]],[3828,3828],[3829,3829]]],[1564379131771,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564379131771,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564379098238,["GJX@GJXAIOU",[[1,3829,"drive= "]],[3829,3829],[3836,3836]]],[1564379099031,["GJX@GJXAIOU",[[-1,3834,"= "]],[3836,3836],[3834,3834]]],[1564379101033,["GJX@GJXAIOU",[[1,3834," = con"]],[3834,3834],[3840,3840]]],[1564379101828,["GJX@GJXAIOU",[[-1,3839,"n"]],[3840,3840],[3839,3839]]],[1564379102606,["GJX@GJXAIOU",[[1,3839,"ml"]],[3839,3839],[3841,3841]]],[1564379103164,["GJX@GJXAIOU",[[-1,3840,"l"]],[3841,3841],[3840,3840]]],[1564379112302,["GJX@GJXAIOU",[[1,3840,".mysql.jdbc.Driver"]],[3840,3840],[3858,3858]]],[1564379113940,["GJX@GJXAIOU",[[1,3860,"\n"]],[3858,3858],[3859,3859]]],[1564379125853,["GJX@GJXAIOU",[[1,3859,"url = jdbc:mysql://loi"]],[3859,3859],[3881,3881]]],[1564379126471,["GJX@GJXAIOU",[[-1,3880,"i"]],[3881,3881],[3880,3880]]],[1564379131606,["GJX@GJXAIOU",[[1,3880,"calhost:3"]],[3880,3880],[3889,3889]]],[1564379191771,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564379191771,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564379136238,["GJX@GJXAIOU",[[1,3889,"306/java"]],[3889,3889],[3897,3897]]],[1564379139062,["GJX@GJXAIOU",[[-1,3893,"java"]],[3897,3897],[3893,3893]]],[1564379155695,["GJX@GJXAIOU",[[-1,3253,"javaee1707"],[1,3263,"h"]],[3253,3263],[3254,3254]]],[1564379156641,["GJX@GJXAIOU",[[1,3254,"ello"]],[3254,3254],[3258,3258]]],[1564379176023,["GJX@GJXAIOU",[[1,3888,"hello?useSSL = true"]],[3888,3888],[3907,3907]]],[1564379177606,["GJX@GJXAIOU",[[1,3909,"\n"]],[3907,3907],[3908,3908]]],[1564379182455,["GJX@GJXAIOU",[[1,3908,"user = root"]],[3908,3908],[3919,3919]]],[1564379183526,["GJX@GJXAIOU",[[1,3921,"\n"]],[3919,3919],[3920,3920]]],[1564379185382,["GJX@GJXAIOU",[[1,3920,"passwoe"]],[3920,3920],[3927,3927]]],[1564379185948,["GJX@GJXAIOU",[[-1,3926,"e"]],[3927,3927],[3926,3926]]],[1564379189559,["GJX@GJXAIOU",[[1,3926,"rd = 12345"]],[3926,3926],[3936,3936]]],[1564379251772,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564379251772,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564379194094,["GJX@GJXAIOU",[[-1,3937,"\n"]],[3937,3937],[3936,3936]]],[1564379249559,["GJX@GJXAIOU",[[1,3941,"JDBV"]],[3941,3941],[3945,3945]]],[1564379250455,["GJX@GJXAIOU",[[-1,3944,"V"]],[3945,3945],[3944,3944]]],[1564379251152,["GJX@GJXAIOU",[[1,3944,"C"]],[3944,3944],[3945,3945]]],[1564379311774,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564379311774,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564379256056,["GJX@GJXAIOU",[[1,3945,"Util.java"]],[3945,3945],[3954,3954]]],[1564379256453,["GJX@GJXAIOU",[[1,3977,"\n"]],[3954,3954],[3955,3955]]],[1564379257800,["GJX@GJXAIOU",[[1,3955,"···"]],[3955,3955],[3958,3958]]],[1564379259688,["GJX@GJXAIOU",[[-1,3955,"···"]],[3958,3958],[3955,3955]]],[1564379260971,["GJX@GJXAIOU",[[1,3955,"```"]],[3955,3955],[3958,3958]]],[1564379261002,["GJX@GJXAIOU",[[1,3958,"language\n```\n"]],[3958,3958],[3958,3966]]],[1564379261759,["GJX@GJXAIOU",[[-1,3958,"language"],[1,3966,"j"]],[3958,3966],[3959,3959]]],[1564379262169,["GJX@GJXAIOU",[[1,3959,"ava"]],[3959,3959],[3962,3962]]],[1564379262366,["GJX@GJXAIOU",[[1,3963,"\n"]],[3962,3962],[3963,3963]]],[1564379268572,["GJX@GJXAIOU",[[1,3963,"package b_utils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\n/*\n \t自定义JDBC工具类 \n \t\t1. 加载驱动\n \t\t2. 获取连接对象\n \t\t3. 关闭连接 \n \t\n \t把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件\n */\n\npublic class JDBCUtil {\n\tprivate static String url = null;\n\tprivate static String user = null;\n\tprivate static String password = null;\n\tprivate static String driverClass = null;\n\tprivate static InputStream in = null;\n\t\n\t//利用静态代码块的特征，在类文件加载到内存的时候，就会执行在静态代码块里面的代码\n\tstatic {\n\t\ttry {\n\t\t\t//1. 读取配置文件信息 读取properties文件\n\t\t\tProperties props = new Properties();\n\t\t\t\n\t\t\t//如果一个properties文件加载到内存中，需要借助于IO流\n\t\t\tin = new FileInputStream(\"./src/db.properties\");\n\t\t\t\n\t\t\t//2. 利用Properties里面的load方法加载文件\n\t\t\tprops.load(in);\n\t\t\t\n\t\t\t//3. 可以通过Properties类对象，获取到想要的数据\n\t\t\turl = props.getProperty(\"url\");\n\t\t\tuser = props.getProperty(\"user\");\n\t\t\tpassword = props.getProperty(\"password\");\n\t\t\tdriverClass = props.getProperty(\"driver\");\n\t\t\t\n\t\t\t//4. 加载类文件\n\t\t\tClass.forName(driverClass);\n\t\t} catch (IOException | ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"驱动加载失败\");\n\t\t} finally {\n\t\t\t//关闭文件连接\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取数据库连接对象\n\t * @return\n\t */\n\tpublic static Connection getConnection() {\n\t\tConnection conn = null;\n\t\t\n\t\ttry {\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\t\n\t\treturn conn;\n\t}\n\t\n\t/**\n\t * 关闭数据库连接，释放Statement\n\t * @param conn 数据库连接对象\n\t * @param st Statement对象\n\t */\n\tpublic static void close(Connection conn, Statement st) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t/**\n\t * 关闭带有结果集的查询语句资源\n\t * @param conn\n\t * @param st\n\t * @param set\n\t */\n\tpublic static void close(Connection conn, Statement st, ResultSet set) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t\tif (set != null) {\n\t\t\t\tset.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[3963,3963],[6541,6541]]],[1564379276565,["GJX@GJXAIOU",[[-1,6541,"\n"]],[6540,6540],[6539,6539]]],[1564379276688,["GJX@GJXAIOU",[[-1,6540,"\n"]],[6539,6539],[6538,6538]]],[1564379276829,["GJX@GJXAIOU",[[-1,6539,"\n"]],[6538,6538],[6537,6537]]],[1564379276957,["GJX@GJXAIOU",[[-1,6538,"\n"]],[6537,6537],[6536,6536]]],[1564379277078,["GJX@GJXAIOU",[[-1,6537,"\n"]],[6536,6536],[6535,6535]]],[1564379277206,["GJX@GJXAIOU",[[-1,6536,"\n"]],[6535,6535],[6534,6534]]],[1564379277344,["GJX@GJXAIOU",[[-1,6535,"\n"]],[6534,6534],[6533,6533]]],[1564379277470,["GJX@GJXAIOU",[[-1,6534,"\n"]],[6533,6533],[6532,6532]]],[1564379277589,["GJX@GJXAIOU",[[-1,6533,"\n"]],[6532,6532],[6531,6531]]],[1564379277725,["GJX@GJXAIOU",[[-1,6532,"\n"]],[6531,6531],[6530,6530]]],[1564379280176,["GJX@GJXAIOU",[[-1,6531,"\n"]],[6530,6530],[6529,6529]]],[1564379280285,["GJX@GJXAIOU",[[-1,6530,"\n"]],[6529,6529],[6528,6528]]],[1564379280398,["GJX@GJXAIOU",[[-1,6529,"\n"]],[6528,6528],[6527,6527]]],[1564379280493,["GJX@GJXAIOU",[[-1,6528,"\n"]],[6527,6527],[6526,6526]]],[1564379280638,["GJX@GJXAIOU",[[-1,6527,"\n"]],[6526,6526],[6525,6525]]],[1564379280774,["GJX@GJXAIOU",[[-1,6526,"\n"]],[6525,6525],[6524,6524]]],[1564379280902,["GJX@GJXAIOU",[[-1,6525,"\n"]],[6524,6524],[6523,6523]]],[1564379281047,["GJX@GJXAIOU",[[-1,6524,"\n"]],[6523,6523],[6522,6522]]],[1564379281158,["GJX@GJXAIOU",[[-1,6523,"\n"]],[6522,6522],[6521,6521]]],[1564379281285,["GJX@GJXAIOU",[[-1,6522,"\n"]],[6521,6521],[6520,6520]]],[1564379282886,["GJX@GJXAIOU",[[-1,6521,"\n"]],[6521,6521],[6520,6520]]],[1564379371779,[null,[[1,1273,";"],[-1,1274,"\n"],[-1,1471,"\n"],[1,1472,"`"],[1,1484," "],[-1,1487,"\n"]],[1273,1273],[1487,1487]]],[1564379371779,[null,[[-1,1273,";"],[1,1275,"\n"],[1,1471,"\n"],[-1,1471,"`"],[-1,1484," "],[1,1488,"\n"]],[1487,1487],[1273,1273]]],[1564379351936,["GJX@GJXAIOU",[[1,789,"kai"]],[789,789],[792,792]]],[1564379352751,["GJX@GJXAIOU",[[-1,789,"kai"]],[792,792],[789,789]]],[1564379371368,["GJX@GJXAIOU",[[1,789,"开始事务是将这个表加载在内存中"]],[789,789],[804,804]]],[1564379431778,[null,[[1,1288,";"],[-1,1289,"\n"],[-1,1486,"\n"],[1,1487,"`"],[1,1499," "],[-1,1502,"\n"]],[1288,1288],[1502,1502]]],[1564379431778,[null,[[-1,1288,";"],[1,1290,"\n"],[1,1486,"\n"],[-1,1486,"`"],[-1,1499," "],[1,1503,"\n"]],[1502,1502],[1288,1288]]],[1564379383585,["GJX@GJXAIOU",[[1,804,"进行处理，没有改变原来结构"]],[804,804],[817,817]]],[1564381111808,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381111808,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381106002,["GJX@GJXAIOU",[[1,6555,"实现常见的增删改查操作："]],[6555,6555],[6567,6567]]],[1564381106236,["GJX@GJXAIOU",[[1,6588,"\n"]],[6567,6567],[6568,6568]]],[1564381107332,["GJX@GJXAIOU",[[1,6589,"\n"]],[6568,6568],[6569,6569]]],[1564381108038,["GJX@GJXAIOU",[[1,6569,"···"]],[6569,6569],[6572,6572]]],[1564381108708,["GJX@GJXAIOU",[[-1,6569,"···"]],[6572,6572],[6569,6569]]],[1564381109084,["GJX@GJXAIOU",[[-1,6589,"\n"]],[6569,6569],[6568,6568]]],[1564381110478,["GJX@GJXAIOU",[[1,6568,"```"]],[6568,6568],[6571,6571]]],[1564381110512,["GJX@GJXAIOU",[[1,6571,"language\n```\n"]],[6571,6571],[6571,6579]]],[1564381111414,["GJX@GJXAIOU",[[-1,6571,"language"],[1,6579,"j"]],[6571,6579],[6572,6572]]],[1564381111565,["GJX@GJXAIOU",[[1,6572,"a"]],[6572,6572],[6573,6573]]],[1564381171810,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381171810,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381112213,["GJX@GJXAIOU",[[1,6573,"va"]],[6573,6573],[6575,6575]]],[1564381112454,["GJX@GJXAIOU",[[1,6576,"\n"]],[6575,6575],[6576,6576]]],[1564381115567,["GJX@GJXAIOU",[[1,6576,"package a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-13:51\n */\n\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n\nimport b_utils.JDBCUtil;\nimport org.junit.jupiter.api.Test;\n\npublic class Demo2 {\n\n    /**\n     * 创建表格（通过JDBC操作MYSQL创建了一个表格）\n     */\n    @Test\n    public void createTable() {\n        Statement st = null;\n\n        //1. 通过已经封装好的JDBC工具类，获取到数据库的连接对象\n        Connection conn = JDBCUtil.getConnection();\n        try {\n            //2. 获取Statement,SQL语句运输者，将SQL语句运输到MySQL里面，让MySQL运行\n            st = conn.createStatement();\n\n            //3. 准备SQL语句,语句最后可以不用分号\n            String sql = \"create table WOW(heroID int not null primary key auto_increment,heroName char(30))\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 查看创建的结果\n            System.out.println(\"影响的行数:\" + count);\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 使用Statement执行DML语句\n     */\n    @Test\n    public void testInsert() {\n        Statement st = null;\n\n        //1. 建立数据库连接\n        Connection conn = JDBCUtil.getConnection();\n\n        try {\n            //2. 获取到Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"insert into WOW(heroName) values('萨满');\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 影响的行数\n            System.out.println(\"count = \" + count);\n\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } finally {\n            //conn是连接数据库的资源，st是应用程序到MySQL之间的SQL语句运输者\n            //这两个都算是资源，所以都需要关闭\n            try {\n                if (st != null) {\n                    st.close();\n                }\n                if (conn != null) {\n                    conn.close();\n                }\n            } catch (SQLException e) {\n                // TODO: handle exception\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    /**\n     * 使用Statement删除数据库中一条数据\n     */\n    @Test\n    public void testDelete() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"delete from wow where id=1\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //另一张关闭方式\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement修改数据库中一条数据\n     */\n    @Test\n    public void testUpdate() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"update WOW set heroName = '大法师' where heroID = 2\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement查询数据库中数据\n     */\n    @Test\n    public void testSelect() {\n        Connection conn = null;\n        Statement st = null;\n        ResultSet set = null; //查询语句返回的结果集对象\n\n        try {\n            //1. 获取数据库连接对象\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"select * from WOW\";\n\n            //4. 执行SQL语句 【获取查询结果集】\n            set = st.executeQuery(sql);\n\n            //5. Result next() getXXX(String 字段名) XXX表示不同的数据类型，\n            //根据当前的代码需求 使用不同的数据类型\n            while (set.next()) {\n                int heroID = set.getInt(\"heroID\");\n                String heroName = set.getString(\"heroName\");\n\n                System.out.println(heroID + \":\" + heroName);\n            }\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            JDBCUtil.close(conn, st, set);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[6576,6576],[11319,11319]]],[1564381122101,["GJX@GJXAIOU",[[1,3982," shuj"]],[3982,3982],[3987,3987]]],[1564381122932,["GJX@GJXAIOU",[[-1,3983,"shuj"]],[3987,3987],[3983,3983]]],[1564381133496,["GJX@GJXAIOU",[[1,3983," 数据库连接自定义工具类"]],[3983,3983],[3995,3995]]],[1564381143243,["GJX@GJXAIOU",[[-1,11332,"\n"]],[11332,11332],[11331,11331]]],[1564381143379,["GJX@GJXAIOU",[[-1,11331,"\n"]],[11331,11331],[11330,11330]]],[1564381143515,["GJX@GJXAIOU",[[-1,11330,"\n"]],[11330,11330],[11329,11329]]],[1564381143651,["GJX@GJXAIOU",[[-1,11329,"\n"]],[11329,11329],[11328,11328]]],[1564381143781,["GJX@GJXAIOU",[[-1,11328,"\n"]],[11328,11328],[11327,11327]]],[1564381143915,["GJX@GJXAIOU",[[-1,11327,"\n"]],[11327,11327],[11326,11326]]],[1564381144035,["GJX@GJXAIOU",[[-1,11326,"\n"]],[11326,11326],[11325,11325]]],[1564381144283,["GJX@GJXAIOU",[[-1,11325,"\n"]],[11325,11325],[11324,11324]]],[1564381144428,["GJX@GJXAIOU",[[-1,11324,"\n"]],[11324,11324],[11323,11323]]],[1564381144571,["GJX@GJXAIOU",[[-1,11323,"\n"]],[11323,11323],[11322,11322]]],[1564381144707,["GJX@GJXAIOU",[[-1,11322,"\n"]],[11322,11322],[11321,11321]]],[1564381144859,["GJX@GJXAIOU",[[-1,11321,"\n"]],[11321,11321],[11320,11320]]],[1564381144973,["GJX@GJXAIOU",[[-1,11320,"\n"]],[11320,11320],[11319,11319]]],[1564381145116,["GJX@GJXAIOU",[[-1,11319,"\n"]],[11319,11319],[11318,11318]]],[1564381145252,["GJX@GJXAIOU",[[-1,11318,"\n"]],[11318,11318],[11317,11317]]],[1564381145692,["GJX@GJXAIOU",[[-1,11317,"\n"]],[11317,11317],[11316,11316]]],[1564381145972,["GJX@GJXAIOU",[[-1,11316,"\n"]],[11316,11316],[11315,11315]]],[1564381146235,["GJX@GJXAIOU",[[-1,11315,"\n"]],[11315,11315],[11314,11314]]],[1564381161849,["GJX@GJXAIOU",[[1,11320,"### 上面总结：JDBC核心"]],[11320,11320],[11335,11335]]],[1564381161886,["GJX@GJXAIOU",[[1,11333," "]],[11335,11335],[11336,11336]]],[1564381164596,["GJX@GJXAIOU",[[1,11336,"API"]],[11336,11336],[11339,11339]]],[1564381164632,["GJX@GJXAIOU",[[1,11336," "]],[11339,11339],[11340,11340]]],[1564381165230,["GJX@GJXAIOU",[[1,11360,"\n"]],[11340,11340],[11341,11341]]],[1564381231819,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381231819,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381189956,["GJX@GJXAIOU",[[1,11341,"Driver接口"]],[11341,11341],[11349,11349]]],[1564381190000,["GJX@GJXAIOU",[[1,11347," "]],[11349,11349],[11350,11350]]],[1564381193745,["GJX@GJXAIOU",[[1,11341,"- "]],[11341,11341],[11343,11343]]],[1564381198270,["GJX@GJXAIOU",[[1,11353,"- \n"]],[11352,11352],[11355,11355]]],[1564381199736,["GJX@GJXAIOU",[[1,11353,"  "]],[11355,11355],[11357,11357]]],[1564381291821,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381291821,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381259337,["GJX@GJXAIOU",[[1,11357,"connect()"]],[11357,11357],[11366,11366]]],[1564381261886,["GJX@GJXAIOU",[[1,11365,"ure"]],[11365,11365],[11368,11368]]],[1564381262500,["GJX@GJXAIOU",[[-1,11367,"e"]],[11368,11368],[11367,11367]]],[1564381266254,["GJX@GJXAIOU",[[1,11367,"l,p p"]],[11367,11367],[11372,11372]]],[1564381266807,["GJX@GJXAIOU",[[-1,11370," p"]],[11372,11372],[11370,11370]]],[1564381267311,["GJX@GJXAIOU",[[1,11370," "]],[11370,11370],[11371,11371]]],[1564381267876,["GJX@GJXAIOU",[[-1,11369,"p "]],[11371,11371],[11369,11369]]],[1564381272605,["GJX@GJXAIOU",[[1,11369," propertise"]],[11369,11369],[11380,11380]]],[1564381273652,["GJX@GJXAIOU",[[-1,11378,"se"]],[11380,11380],[11378,11378]]],[1564381273982,["GJX@GJXAIOU",[[1,11378,"es"]],[11378,11378],[11380,11380]]],[1564381283983,["GJX@GJXAIOU",[[1,11381,"; qi"]],[11381,11381],[11385,11385]]],[1564381284491,["GJX@GJXAIOU",[[-1,11383,"qi"]],[11385,11385],[11383,11383]]],[1564381288249,["GJX@GJXAIOU",[[1,11383,"其中URL"]],[11383,11383],[11388,11388]]],[1564381288286,["GJX@GJXAIOU",[[1,11385," "]],[11388,11388],[11389,11389]]],[1564381411827,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381411827,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381386112,["GJX@GJXAIOU",[[-1,11341,"-"],[-1,11349," "],[1,11352,"："],[1,11355,"      -"],[1,11356,"|"],[1,11379,");\n            url: JDBC连接数据库(MySQL)URL\n                jdbc:my"],[1,11380,"ql://localhost:3306/javaee1707?useSSL=true\n            propertie：\n                连接数据库的属性，主要包含的是数据库的用户名和密码\n                \n    DriverManager类：\n        驱动管理类，用户管理【加载/注册】过的驱动程序\n        --| registerDriver(driver"],[-1,11383,"其中 "],[1,11386,"注册驱动程序\n        --| Connection getConnection(url, user, password);\n            获取一个数据库的连接对象，需要的参数是存在JDBC协议的"],[1,11389," 数据库用户名 和 密码\n    \n    Connection接口：\n        --| Statement createStament(); 创建一个Statement的实现类对象\n        --| PreparedStatement preparedStatement(String sql);\n                获取到一个PreparedStatement SQL语句预处理对象\n        --| CallableStatmenet preparedCall(String sql); 了解\n    \n    Statement接口：\n        --| int executeUpdate(String sql); 执行给定的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n        --| ResultSet executeQuery(String sql); 执行给定的SQL语句 DQL 查询语句，返回数据结果集\n    \n    PreparedStatement接口：\n        --| int executeUpdate(); 执行预处理的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n        --| ResultSet executeQuery(); 执行预处理的SQL语句 DQL 查询语句，返回数据结果集\n        \n        SQL注入\n    \n    ResultSet接口： \n        查询语句的数据结果集：\n        --| boolean next(); 得到当前数据行，并且光标指向下一个数据行，如果没有数据行，返回false\n        --| getXXX(String \"字段名\"); 获取指定数据类型的字段数据"]],[11341,11389],[12557,12557]]],[1564381390302,["GJX@GJXAIOU",[[-1,11341," "],[-1,11352,"  "],[-1,11389,"  "],[-1,11440,"  "],[-1,11493,"  "],[-1,11530,"  "],[-1,11572,"  "],[-1,11575,"  "],[-1,11595,"  "],[-1,11633,"  "],[-1,11670,"  "],[-1,11739,"  "],[-1,11785,"  "],[-1,11792,"  "],[-1,11808,"  "],[-1,11873,"  "],[-1,11928,"  "],[-1,11984,"  "],[-1,12039,"  "],[-1,12042,"  "],[-1,12059,"  "],[-1,12143,"  "],[-1,12215,"  "],[-1,12218,"  "],[-1,12243,"  "],[-1,12318,"  "],[-1,12385,"  "],[-1,12388,"  "],[-1,12402,"  "],[-1,12409,"  "],[-1,12431,"  "],[-1,12445,"  "],[-1,12510,"  "]],[11341,12571],[11341,12507]]],[1564381390884,["GJX@GJXAIOU",[[-1,11355,"  "],[-1,11386,"  "],[-1,11433,"  "],[-1,11486,"  "],[-1,11519,"  "],[-1,11559,"  "],[-1,11562,"  "],[-1,11580,"  "],[-1,11614,"  "],[-1,11651,"  "],[-1,11716,"  "],[-1,11762,"  "],[-1,11765,"  "],[-1,11781,"  "],[-1,11842,"  "],[-1,11897,"  "],[-1,11949,"  "],[-1,12002,"  "],[-1,12005,"  "],[-1,12020,"  "],[-1,12100,"  "],[-1,12170,"  "],[-1,12173,"  "],[-1,12196,"  "],[-1,12267,"  "],[-1,12332,"  "],[-1,12335,"  "],[-1,12347,"  "],[-1,12350,"  "],[-1,12370,"  "],[-1,12384,"  "],[-1,12447,"  "]],[11341,12507],[11341,12443]]],[1564381401121,["GJX@GJXAIOU",[[1,11429,"标准 "]],[11429,11429],[11431,11431]]],[1564381404070,["GJX@GJXAIOU",[[1,11431,"格式为：``"]],[11431,11431],[11437,11437]]],[1564381405063,["GJX@GJXAIOU",[[-1,11436,"`"]],[11437,11437],[11436,11436]]],[1564381409350,["GJX@GJXAIOU",[[1,11487,"`"]],[11487,11487],[11488,11488]]],[1564381471826,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381471826,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381412884,["GJX@GJXAIOU",[[-1,11436," "]],[11437,11437],[11436,11436]]],[1564381416198,["GJX@GJXAIOU",[[1,11407,"目前 "]],[11407,11407],[11409,11409]]],[1564381416739,["GJX@GJXAIOU",[[1,11409,"为"]],[11409,11409],[11410,11410]]],[1564381423769,["GJX@GJXAIOU",[[1,11341,"- "]],[11341,11341],[11343,11343]]],[1564381427018,["GJX@GJXAIOU",[[1,11564,"- "]],[11564,11564],[11566,11566]]],[1564381433925,["GJX@GJXAIOU",[[-1,11582,"    "]],[11582,11586],[11582,11582]]],[1564381434456,["GJX@GJXAIOU",[[-1,11581,"\n"]],[11582,11582],[11581,11581]]],[1564381436578,["GJX@GJXAIOU",[[1,11581,"是"]],[11581,11581],[11582,11582]]],[1564381441970,["GJX@GJXAIOU",[[1,11588,"是"]],[11588,11588],[11589,11589]]],[1564381444428,["GJX@GJXAIOU",[[-1,11588,"是"]],[11589,11589],[11588,11588]]],[1564381449941,["GJX@GJXAIOU",[[-1,11588,"用户"]],[11590,11590],[11588,11588]]],[1564381451664,["GJX@GJXAIOU",[[1,11588,"用于"]],[11588,11588],[11590,11590]]],[1564381531829,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381531829,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381505019,["GJX@GJXAIOU",[[1,11708,"返回值是"]],[11708,11708],[11712,11712]]],[1564381511342,["GJX@GJXAIOU",[[-1,11700,"        "]],[11708,11708],[11700,11700]]],[1564381511831,["GJX@GJXAIOU",[[-1,11699,"\n"]],[11700,11700],[11699,11699]]],[1564381519599,["GJX@GJXAIOU",[[1,11734,"，"]],[11734,11734],[11735,11735]]],[1564381526791,["GJX@GJXAIOU",[[1,11749,"- "]],[11749,11749],[11751,11751]]],[1564381528934,["GJX@GJXAIOU",[[1,11979,"- "]],[11979,11979],[11981,11981]]],[1564381531462,["GJX@GJXAIOU",[[1,12141,"- "]],[12141,12141],[12143,12143]]],[1564381591829,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381591829,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381538672,["GJX@GJXAIOU",[[1,11819,"（）"]],[11819,11819],[11821,11821]]],[1564381546136,["GJX@GJXAIOU",[[1,11820,"因为Statement"]],[11820,11820],[11831,11831]]],[1564381546173,["GJX@GJXAIOU",[[1,11822," "]],[11831,11831],[11832,11832]]],[1564381547473,["GJX@GJXAIOU",[[1,11832,"是"]],[11832,11832],[11833,11833]]],[1564381547511,["GJX@GJXAIOU",[[1,11832," "]],[11833,11833],[11834,11834]]],[1564381548475,["GJX@GJXAIOU",[[1,11834,"接口"]],[11834,11834],[11836,11836]]],[1564381562284,["GJX@GJXAIOU",[[-1,11354,"   --| "]],[11353,11360],[11353,11353]]],[1564381562715,["GJX@GJXAIOU",[[1,11354,"  "]],[11353,11353],[11355,11355]]],[1564381563068,["GJX@GJXAIOU",[[1,11355,"-"]],[11355,11355],[11356,11356]]],[1564381563543,["GJX@GJXAIOU",[[1,11357," "]],[11356,11356],[11357,11357]]],[1564381564750,["GJX@GJXAIOU",[[-1,11357," "]],[11357,11357],[11356,11356]]],[1564381568286,["GJX@GJXAIOU",[[1,11389,"-"]],[11389,11389],[11390,11390]]],[1564381570630,["GJX@GJXAIOU",[[1,11499,"- "]],[11499,11499],[11501,11501]]],[1564381572670,["GJX@GJXAIOU",[[-1,11388," "]],[11389,11389],[11388,11388]]],[1564381574507,["GJX@GJXAIOU",[[-1,11497," "]],[11498,11498],[11497,11497]]],[1564381580479,["GJX@GJXAIOU",[[-1,11608,"-| "]],[11607,11607],[11608,11608]]],[1564381580984,["GJX@GJXAIOU",[[1,11608," "]],[11608,11608],[11609,11609]]],[1564381583098,["GJX@GJXAIOU",[[-1,11645,"-| "]],[11644,11644],[11645,11645]]],[1564381583270,["GJX@GJXAIOU",[[1,11645," "]],[11645,11645],[11646,11646]]],[1564381586955,["GJX@GJXAIOU",[[-1,11762,"--"]],[11764,11764],[11762,11762]]],[1564381588872,["GJX@GJXAIOU",[[1,11763,"="]],[11763,11763],[11764,11764]]],[1564381589691,["GJX@GJXAIOU",[[-1,11762,"|="]],[11764,11764],[11762,11762]]],[1564381590674,["GJX@GJXAIOU",[[1,11762,"-"]],[11762,11762],[11763,11763]]],[1564381590832,["GJX@GJXAIOU",[[1,11764," "]],[11763,11763],[11764,11764]]],[1564381651831,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381651831,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381593691,["GJX@GJXAIOU",[[-1,11834,"--| "]],[11838,11838],[11834,11834]]],[1564381594168,["GJX@GJXAIOU",[[1,11834,"- "]],[11834,11834],[11836,11836]]],[1564381601260,["GJX@GJXAIOU",[[-1,11886,"           "]],[11896,11896],[11885,11885]]],[1564381602164,["GJX@GJXAIOU",[[-1,11884,"\n"]],[11885,11885],[11884,11884]]],[1564381606659,["GJX@GJXAIOU",[[-1,11923,"--|"]],[11923,11926],[11923,11923]]],[1564381607503,["GJX@GJXAIOU",[[1,11923,"-"]],[11923,11923],[11924,11924]]],[1564381607689,["GJX@GJXAIOU",[[1,11925," "]],[11924,11924],[11925,11925]]],[1564381611599,["GJX@GJXAIOU",[[-1,11992," "],[-1,11994,"-|"]],[11992,11992],[11993,11993]]],[1564381615251,["GJX@GJXAIOU",[[-1,12064,"--|"]],[12067,12067],[12064,12064]]],[1564381615954,["GJX@GJXAIOU",[[1,12064,"-"]],[12064,12064],[12065,12065]]],[1564381618396,["GJX@GJXAIOU",[[-1,12063," "]],[12064,12064],[12063,12063]]],[1564381620966,["GJX@GJXAIOU",[[-1,12158,"-|"]],[12160,12160],[12158,12158]]],[1564381624022,["GJX@GJXAIOU",[[-1,12221,"-|"]],[12223,12223],[12221,12221]]],[1564381634741,["GJX@GJXAIOU",[[1,12293,"- "]],[12293,12293],[12295,12295]]],[1564381638423,["GJX@GJXAIOU",[[-1,12309,"    "]],[12309,12313],[12309,12309]]],[1564381638756,["GJX@GJXAIOU",[[-1,12308,"\n"]],[12309,12309],[12308,12308]]],[1564381641949,["GJX@GJXAIOU",[[-1,12325,"-|"]],[12327,12327],[12325,12325]]],[1564381644837,["GJX@GJXAIOU",[[-1,12384,"-|"]],[12386,12386],[12384,12384]]],[1564381711834,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381711834,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381669145,["GJX@GJXAIOU",[[1,11998,"   "]],[11997,11997],[12000,12000]]],[1564381671206,["GJX@GJXAIOU",[[1,12078,"   "]],[12077,12077],[12080,12080]]],[1564381672888,["GJX@GJXAIOU",[[1,11775,"  "]],[11774,11774],[11776,11776]]],[1564381674536,["GJX@GJXAIOU",[[1,11856,"  "]],[11856,11856],[11858,11858]]],[1564381676739,["GJX@GJXAIOU",[[1,11948,"   "]],[11948,11948],[11951,11951]]],[1564381681087,["GJX@GJXAIOU",[[1,11657,"   "]],[11657,11657],[11660,11660]]],[1564381684379,["GJX@GJXAIOU",[[1,12179,"   "]],[12179,12179],[12182,12182]]],[1564381685987,["GJX@GJXAIOU",[[1,12251,"   "]],[12251,12251],[12254,12254]]],[1564381771836,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564381771836,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564381714800,["GJX@GJXAIOU",[[-1,12304,"    "],[1,12308,"预处理"]],[12304,12304],[12307,12307]]],[1564381720231,["GJX@GJXAIOU",[[1,12307,"有利于 "]],[12307,12307],[12310,12310]]],[1564381722775,["GJX@GJXAIOU",[[1,12310,"防止"]],[12310,12310],[12312,12312]]],[1564381726668,["GJX@GJXAIOU",[[-1,12303,"\n"]],[12304,12304],[12303,12303]]],[1564381748223,["GJX@GJXAIOU",[[1,12360,"   "]],[12359,12359],[12362,12362]]],[1564382731945,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564382731945,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564382692266,["GJX@GJXAIOU",[[1,12452,"PreparedStatement防止"]],[12452,12452],[12471,12471]]],[1564382692305,["GJX@GJXAIOU",[[1,12469," "]],[12471,12471],[12472,12472]]],[1564382696347,["GJX@GJXAIOU",[[1,12472,"SQL"]],[12472,12472],[12475,12475]]],[1564382696387,["GJX@GJXAIOU",[[1,12472," "]],[12475,12475],[12476,12476]]],[1564382699233,["GJX@GJXAIOU",[[1,12476,"注入"]],[12476,12476],[12478,12478]]],[1564382699272,["GJX@GJXAIOU",[[1,12476," "]],[12478,12478],[12479,12479]]],[1564382701689,["GJX@GJXAIOU",[[1,12479,"diam"]],[12479,12479],[12483,12483]]],[1564382701727,["GJX@GJXAIOU",[[1,12479," "]],[12483,12483],[12484,12484]]],[1564382703061,["GJX@GJXAIOU",[[-1,12479," diam"]],[12484,12484],[12479,12479]]],[1564382704970,["GJX@GJXAIOU",[[1,12479,"代码："]],[12479,12479],[12482,12482]]],[1564382705390,["GJX@GJXAIOU",[[1,12499,"\n"]],[12482,12482],[12483,12483]]],[1564382706902,["GJX@GJXAIOU",[[1,12483,"```"]],[12483,12483],[12486,12486]]],[1564382706942,["GJX@GJXAIOU",[[1,12486,"language\n```\n"]],[12486,12486],[12486,12494]]],[1564382707864,["GJX@GJXAIOU",[[-1,12486,"language"],[1,12494,"j"]],[12486,12494],[12487,12487]]],[1564382708265,["GJX@GJXAIOU",[[1,12487,"ava"]],[12487,12487],[12490,12490]]],[1564382708427,["GJX@GJXAIOU",[[1,12491,"\n"]],[12490,12490],[12491,12491]]],[1564382731815,["GJX@GJXAIOU",[[1,12491,"package c_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport org.junit.Test;\n\n\nimport b_utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\t//private String name = \"Tom\";\n\t//private String password = \"123456\";\n\tprivate String name = \"Tomfdajkjfdkajfkdlfdsafdsa' or 1=1 --\";\n\tprivate String password = \"23456\";\n\t\n\t@Test\n\tpublic void testLoginUserStatement() {\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\tStatement st = null;\n\t\t\n\t\ttry {\n\t\t\t//1. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t//2. 获取Statement\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\t//3. 准备SQL语句\n\t\t\t//SQL注入，如果说用户在输入 信息的时候，偶然间了解到了你的SQL规则\n\t\t\tString sql = \"select * from user where name='\" + name +\n\t\t\t\t\t\"' and password='\" + password + \"'\";\n\t\t\tSystem.out.println(sql);\n\t\t\t//4. 使用Statement执行SQL语句\n\t\t\tset = st.executeQuery(sql);\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, st, set);\n\t\t}\n\t}\n\t\n\t/**\n\t * PreparedStatement 可以有效防止SQL注入，因为在获取PreparedStatment时，已经对SQL语句\n\t * 进行了预处理操作\n\t */\n\t@Test\n\tpublic void testLoginUserPreparedStatement() {\n\t\tPreparedStatement ps = null;\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 准备预处理SQL语句\n\t\t\tString sql = \"select * from user where name=? and password=?\"; //?是数据占位符\n\t\t\t\n\t\t\t//3. 获取PreparedStatement对象,传入的参数就是预处理的SQL语句\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//4. 准备参数\n\t\t\tps.setString(1, name);\n\t\t\tps.setString(2, password);\n\t\t\t\n\t\t\t//5. 执行预处理之后的SQL语句\n\t\t\tset = ps.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, set);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[12491,12491],[14462,14462]]],[1564382792052,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564382792052,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564382741799,["GJX@GJXAIOU",[[-1,13644,"\t"],[1,13645,"\n"]],[13645,13645],[13645,13645]]],[1564382741956,["GJX@GJXAIOU",[[1,13646,"\n"]],[13645,13645],[13646,13646]]],[1564382742094,["GJX@GJXAIOU",[[1,13647,"\n"]],[13646,13646],[13647,13647]]],[1564382749896,["GJX@GJXAIOU",[[1,12924,"\n\t"]],[12922,12922],[12924,12924]]],[1564382759808,["GJX@GJXAIOU",[[1,12924,"//这里没有进行预处理，不嗯呢防止"]],[12924,12924],[12941,12941]]],[1564382761699,["GJX@GJXAIOU",[[-1,12936,"不嗯呢防止"]],[12941,12941],[12936,12936]]],[1564382762753,["GJX@GJXAIOU",[[1,12936,"不嗯呢"]],[12936,12936],[12939,12939]]],[1564382763701,["GJX@GJXAIOU",[[-1,12937,"嗯呢"]],[12939,12939],[12937,12937]]],[1564382769569,["GJX@GJXAIOU",[[1,12937,"能防止SQL注入"]],[12937,12937],[12945,12945]]],[1564382852055,[null,[[1,1301,";"],[-1,1302,"\n"],[-1,1499,"\n"],[1,1500,"`"],[1,1512," "],[-1,1515,"\n"]],[1301,1301],[1515,1515]]],[1564382852055,[null,[[-1,1301,";"],[1,1303,"\n"],[1,1499,"\n"],[-1,1499,"`"],[-1,1512," "],[1,1516,"\n"]],[1515,1515],[1301,1301]]],[1564382794831,["GJX@GJXAIOU",[[-1,14487,"\n"]],[14487,14487],[14486,14486]]],[1564382794989,["GJX@GJXAIOU",[[-1,14486,"\n"]],[14486,14486],[14485,14485]]],[1564382795126,["GJX@GJXAIOU",[[-1,14485,"\n"]],[14485,14485],[14484,14484]]],[1564382795277,["GJX@GJXAIOU",[[-1,14484,"\n"]],[14484,14484],[14483,14483]]],[1564382795405,["GJX@GJXAIOU",[[-1,14483,"\n"]],[14483,14483],[14482,14482]]],[1564382795533,["GJX@GJXAIOU",[[-1,14482,"\n"]],[14482,14482],[14481,14481]]],[1564382795685,["GJX@GJXAIOU",[[-1,14481,"\n"]],[14481,14481],[14480,14480]]],[1564382795823,["GJX@GJXAIOU",[[-1,14480,"\n"]],[14480,14480],[14479,14479]]],[1564382795970,["GJX@GJXAIOU",[[-1,14479,"\n"]],[14479,14479],[14478,14478]]],[1564382796089,["GJX@GJXAIOU",[[-1,14478,"\n"]],[14478,14478],[14477,14477]]],[1564382796228,["GJX@GJXAIOU",[[-1,14477,"\n"]],[14477,14477],[14476,14476]]],[1564382796318,["GJX@GJXAIOU",[[-1,14476,"\n"]],[14476,14476],[14475,14475]]],[1564382796479,["GJX@GJXAIOU",[[-1,14475,"\n"]],[14475,14475],[14474,14474]]],[1564382796635,["GJX@GJXAIOU",[[-1,14474,"\n"]],[14474,14474],[14473,14473]]],[1564382796786,["GJX@GJXAIOU",[[-1,14473,"\n"]],[14473,14473],[14472,14472]]],[1564382796947,["GJX@GJXAIOU",[[-1,14472,"\n"]],[14472,14472],[14471,14471]]],[1564382797093,["GJX@GJXAIOU",[[-1,14471,"\n"]],[14471,14471],[14470,14470]]],[1564382797251,["GJX@GJXAIOU",[[-1,14470,"\n"]],[14470,14470],[14469,14469]]],[1564382797571,["GJX@GJXAIOU",[[-1,14469,"\n"]],[14469,14469],[14468,14468]]],[1564382798094,["GJX@GJXAIOU",[[-1,14468,"\n"]],[14468,14468],[14467,14467]]],[1564382801147,["GJX@GJXAIOU",[[1,14489,"\n"]],[14471,14471],[14472,14472]]],[1564382801299,["GJX@GJXAIOU",[[1,14490,"\n"]],[14472,14472],[14473,14473]]],[1564382801734,["GJX@GJXAIOU",[[1,14491,"\n"]],[14473,14473],[14474,14474]]]],null,"GJX@GJXAIOU"],["da3850e8-4347-48e8-a6c9-383a5e6c8ca6",1564444652900,"# JavaEEDay34数据库\n\n## DCL 操作：\n一般是项目经理或者 DBA 进行管理；\n即管理用户：创建用户，给予用户操作数据的权限；\n\n\n## 用户管理：\n\n- 创建一个用户，用户名为 zhangsan 所在数据库的主机地址为 localhost，初始化密码：12345:\n`create user \"zhangsan\"@\"localhost\" identified by \"12345\";`\n- 授予新用户权限，上面的 localhost 也可以是一个 IP 地址；\n`grant all on hello.* to \"zhangsan\" @\"localhost\";` //将 hello 数据库赋值权限给 zhangsan;\n- 刷新权限：`flush privileges;` 至此完成新用户管理；\n- 取消授权：`revoke all on hello.* from \"zhangsan\" @ \"localhost\";`\n- 删除用户：`drop user \"zhangsan\" @ \"localhost\";`\n\n\n\n## DTL 事务处理\n当出现操作错误的时候，给予回退的机会；\n\n- 以银行转账为例，首先创建数据表：\n```sql\ncreate table bank(\n  userID tinyint not null primary key auto_increment,\n  money double(15,2),\n  name varchar(30)\n);\n```\n- 插入部分数据，用于测试：\n```sql\ninsert into bank(money,name) values(66,\"zhangsan\");\ninsert into bank(money,name) values(11,\"lisi\");\n```\n- 开启事务：一共两种方式：开始事务是将这个表加载在内存中进行处理，没有改变原来结构\n  - 方式一：`start transaction;`\n  - 方式二：`set autocommit = 0;`\n```sql\nstart transaction;\n```\n- 然后开始进行操作：\n```sql\nupdate bank set money = money - 55 where userID = 1;\nupdate bank set money = money + 55 where userID = 2;\n```\n- 操作完成之后，两种确认方式：\n  - 回滚，即操作中出现了异常，可以回滚到开始事务之前；命令为：`rollback;`\n  - 提交，即确认操作无误，提交开始事务之后的所有操作；命令为：`commit;`\n\n\n## 数据库导入导出\n使用命令行导入导出数据库，必须是没有登录数据库的状态下；\n\n\n### 导出数据库：\n导出的是一个.sql 文件，里面包含了所有的数据库操作信息，包括创建数据库和插入数据；\n**在未登录数据库的状态下操作以下语句：**\n`mysqldump -uroot -p hello > hello.sql;` 将 hello 数据库导出保存为 hello.sql 文件；\n**注意：** 导出文件的保存位置为当前操作的命令的文件目录下，可以通过先修改操作命令的目录进行保存位置的修改；\n\n### 导入数据库：\n**前提：** 必须在数据库中创建一个数据库用于接收导入的数据库,**然后退出数据库，操作以下语句：**\n`mysql -uroot -p receiveHello < hello.sql;` 将 hello.sql 数据库导入到 receiveHello 数据库中；\n\n\n\n## Java 连接数据库方式  \nJDBC：Java Database Connectivity 操作数据库的规范；\n\nJDBC 主要通过接口实现，组成 JDBC 中两个包：java.sql 和 javax.sql，以上两个包是 JavaSE 中包含的，但是需要导入 JDBC 的实现类才可以使用，该实现类是由第三方数据库提供商完成；\n\nJDBC 主要的接口和类：\n- Driver 接口：连接数据库的驱动 API；\n- DriverManager 类：驱动管理类，负责驱动的注册（加载），获取数据库连接；\n- Statement 接口：负责 SQL 语句的执行；\n  - PreparedStatement 接口：负责 SQL 语句的预处理；\n- ResultSet 接口：处理查询数据库的结果集；\n\n\n### 通过 JDBC 连接 MySQL\n\n- 步骤一：确定数据库的 URL；\n  - 例如：`jdbc:mysql://localhost:3306/hello` 协议：自协议：//IP：端口号/数据库名？参数\n    - 协议：JDBC 总协议；\n    - 自协议：目前使用的是连接 MySQL 数据库的协议；\n    - IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    - 端口号：3306 MySQL 默认的端口号，可以修改；\n    - 数据库：目前连接的操作的数据库是哪一个；\n    - 参数：通常为：`useUnicode = true ` `characterEncoding = utf-8`;\n\n- 步骤二：连接数据库需要用户名和密码：\n\n\n具体的连接操作方式：\n- 方式一：直接在代码中写入要操作的数据库以及用户名和密码信息，但是代码不可复用；\n```java\npackage a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n\n\n\n/*\n Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率\n\n */\n\npublic class Demo1 {\n    //JDBC连接数据库的推荐方式\n    @Test\n    public void connection() {\n        try {\n            //1. 注册驱动 JDBC连接MySQL\n            Class.forName(\"com.mysql.jdbc.Driver\");\n\n            //2. 准备URL，是JDCB连接MySQL数据库的URL\n            String url = \"jdbc:mysql://localhost:3306/hello?useSSL=true\";\n\n            //3. 通过DriverManager获取到连接对象\n            Connection conn = DriverManager.getConnection(url, \"root\", \"123456\");\n\n            System.out.println(conn);\n\n            //4. 关闭数据库连接，释放资源\n            conn.close();\n\n        } catch (ClassNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n- 方式二：将数据库的具体信息写入：.properties 文件中，然后使用 Java 代码读取文件中信息，更改数据库信息只要在.properties 文件中修改就行；\ndb.properties\n```properties\ndrive = com.mysql.jdbc.Driver\nurl = jdbc:mysql://localhost:3306/hello?useSSL = true\nuser = root\npassword = 12345\n```\nJDBCUtil.java  数据库连接自定义工具类\n```java\npackage b_utils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\n/*\n \t自定义JDBC工具类 \n \t\t1. 加载驱动\n \t\t2. 获取连接对象\n \t\t3. 关闭连接 \n \t\n \t把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件\n */\n\npublic class JDBCUtil {\n\tprivate static String url = null;\n\tprivate static String user = null;\n\tprivate static String password = null;\n\tprivate static String driverClass = null;\n\tprivate static InputStream in = null;\n\t\n\t//利用静态代码块的特征，在类文件加载到内存的时候，就会执行在静态代码块里面的代码\n\tstatic {\n\t\ttry {\n\t\t\t//1. 读取配置文件信息 读取properties文件\n\t\t\tProperties props = new Properties();\n\t\t\t\n\t\t\t//如果一个properties文件加载到内存中，需要借助于IO流\n\t\t\tin = new FileInputStream(\"./src/db.properties\");\n\t\t\t\n\t\t\t//2. 利用Properties里面的load方法加载文件\n\t\t\tprops.load(in);\n\t\t\t\n\t\t\t//3. 可以通过Properties类对象，获取到想要的数据\n\t\t\turl = props.getProperty(\"url\");\n\t\t\tuser = props.getProperty(\"user\");\n\t\t\tpassword = props.getProperty(\"password\");\n\t\t\tdriverClass = props.getProperty(\"driver\");\n\t\t\t\n\t\t\t//4. 加载类文件\n\t\t\tClass.forName(driverClass);\n\t\t} catch (IOException | ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"驱动加载失败\");\n\t\t} finally {\n\t\t\t//关闭文件连接\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取数据库连接对象\n\t * @return\n\t */\n\tpublic static Connection getConnection() {\n\t\tConnection conn = null;\n\t\t\n\t\ttry {\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\t\n\t\treturn conn;\n\t}\n\t\n\t/**\n\t * 关闭数据库连接，释放Statement\n\t * @param conn 数据库连接对象\n\t * @param st Statement对象\n\t */\n\tpublic static void close(Connection conn, Statement st) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t/**\n\t * 关闭带有结果集的查询语句资源\n\t * @param conn\n\t * @param st\n\t * @param set\n\t */\n\tpublic static void close(Connection conn, Statement st, ResultSet set) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t\tif (set != null) {\n\t\t\t\tset.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n\n```\n\n\n实现常见的增删改查操作：\n```java\npackage a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-13:51\n */\n\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n\nimport b_utils.JDBCUtil;\nimport org.junit.jupiter.api.Test;\n\npublic class Demo2 {\n\n    /**\n     * 创建表格（通过JDBC操作MYSQL创建了一个表格）\n     */\n    @Test\n    public void createTable() {\n        Statement st = null;\n\n        //1. 通过已经封装好的JDBC工具类，获取到数据库的连接对象\n        Connection conn = JDBCUtil.getConnection();\n        try {\n            //2. 获取Statement,SQL语句运输者，将SQL语句运输到MySQL里面，让MySQL运行\n            st = conn.createStatement();\n\n            //3. 准备SQL语句,语句最后可以不用分号\n            String sql = \"create table WOW(heroID int not null primary key auto_increment,heroName char(30))\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 查看创建的结果\n            System.out.println(\"影响的行数:\" + count);\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 使用Statement执行DML语句\n     */\n    @Test\n    public void testInsert() {\n        Statement st = null;\n\n        //1. 建立数据库连接\n        Connection conn = JDBCUtil.getConnection();\n\n        try {\n            //2. 获取到Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"insert into WOW(heroName) values('萨满');\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 影响的行数\n            System.out.println(\"count = \" + count);\n\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } finally {\n            //conn是连接数据库的资源，st是应用程序到MySQL之间的SQL语句运输者\n            //这两个都算是资源，所以都需要关闭\n            try {\n                if (st != null) {\n                    st.close();\n                }\n                if (conn != null) {\n                    conn.close();\n                }\n            } catch (SQLException e) {\n                // TODO: handle exception\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    /**\n     * 使用Statement删除数据库中一条数据\n     */\n    @Test\n    public void testDelete() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"delete from wow where id=1\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //另一张关闭方式\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement修改数据库中一条数据\n     */\n    @Test\n    public void testUpdate() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"update WOW set heroName = '大法师' where heroID = 2\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement查询数据库中数据\n     */\n    @Test\n    public void testSelect() {\n        Connection conn = null;\n        Statement st = null;\n        ResultSet set = null; //查询语句返回的结果集对象\n\n        try {\n            //1. 获取数据库连接对象\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"select * from WOW\";\n\n            //4. 执行SQL语句 【获取查询结果集】\n            set = st.executeQuery(sql);\n\n            //5. Result next() getXXX(String 字段名) XXX表示不同的数据类型，\n            //根据当前的代码需求 使用不同的数据类型\n            while (set.next()) {\n                int heroID = set.getInt(\"heroID\");\n                String heroName = set.getString(\"heroName\");\n\n                System.out.println(heroID + \":\" + heroName);\n            }\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            JDBCUtil.close(conn, st, set);\n        }\n    }\n}\n\n```\n\n### 上面总结：JDBC 核心 API\n- Driver接口：\n  - connect(url, propertie);\n      - url: JDBC连接数据库(目前为 MySQL)URL\n            标准格式为：`jdbc:mysql://localhost:3306/javaee1707?useSSL=true`\n       - propertie：\n            连接数据库的属性，主要包含的是数据库的用户名和密码\n            \n- DriverManager类：是驱动管理类，用于管理【加载/注册】过的驱动程序\n    - registerDriver(driver); 注册驱动程序\n    - Connection    getConnection(url, user, password);返回值是获取一个数据库的连接对象，需要的参数是存在JDBC协议的URL， 数据库用户名 和 密码\n\n- Connection接口：\n    -  Statement   createStament(); 创建一个Statement的实现类对象（因为 Statement 是接口）\n    - PreparedStatement   preparedStatement(String sql); 获取到一个PreparedStatement SQL语句预处理对象\n    -  CallableStatmenet    preparedCall(String sql); 了解\n\n- Statement接口：\n   - int    executeUpdate(String sql); 执行给定的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n   - ResultSet    executeQuery(String sql); 执行给定的SQL语句 DQL 查询语句，返回数据结果集\n\n- PreparedStatement接口：\n    - int    executeUpdate(); 执行预处理的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n    - ResultSet    executeQuery(); 执行预处理的SQL语句 DQL 查询语句，返回数据结果集\n    预处理有利于防止 SQL注入\n\n- ResultSet接口： 查询语句的数据结果集：\n    - boolean    next(); 得到当前数据行，并且光标指向下一个数据行，如果没有数据行，返回false\n    - getXXX(String \"字段名\"); 获取指定数据类型的字段数据\n\n\nPreparedStatement 防止 SQL 注入代码：\n```java\npackage c_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport org.junit.Test;\n\n\nimport b_utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\t//private String name = \"Tom\";\n\t//private String password = \"123456\";\n\tprivate String name = \"Tomfdajkjfdkajfkdlfdsafdsa' or 1=1 --\";\n\tprivate String password = \"23456\";\n\t\n\t@Test\n\t//这里没有进行预处理，不能防止SQL注入\n\tpublic void testLoginUserStatement() {\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\tStatement st = null;\n\t\t\n\t\ttry {\n\t\t\t//1. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t//2. 获取Statement\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\t//3. 准备SQL语句\n\t\t\t//SQL注入，如果说用户在输入 信息的时候，偶然间了解到了你的SQL规则\n\t\t\tString sql = \"select * from user where name='\" + name +\n\t\t\t\t\t\"' and password='\" + password + \"'\";\n\t\t\tSystem.out.println(sql);\n\t\t\t//4. 使用Statement执行SQL语句\n\t\t\tset = st.executeQuery(sql);\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, st, set);\n\t\t}\n\t}\n\n\n\n\n\t/**\n\t * PreparedStatement 可以有效防止SQL注入，因为在获取PreparedStatment时，已经对SQL语句\n\t * 进行了预处理操作\n\t */\n\t@Test\n\tpublic void testLoginUserPreparedStatement() {\n\t\tPreparedStatement ps = null;\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 准备预处理SQL语句\n\t\t\tString sql = \"select * from user where name=? and password=?\"; //?是数据占位符\n\t\t\t\n\t\t\t//3. 获取PreparedStatement对象,传入的参数就是预处理的SQL语句\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//4. 准备参数\n\t\t\tps.setString(1, name);\n\t\t\tps.setString(2, password);\n\t\t\t\n\t\t\t//5. 执行预处理之后的SQL语句\n\t\t\tset = ps.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, set);\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1564444647384,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1564444650265,["GJX@GJXAIOU",[[1,18,"@"]],[18,18],[19,19]]],[1564444666049,["GJX@GJXAIOU",[[1,26,"yi"]],[26,26],[28,28]]],[1564444666781,["GJX@GJXAIOU",[[-1,26,"yi"]],[28,28],[26,26]]],[1564444668400,["GJX@GJXAIOU",[[1,26,"一 "]],[26,26],[27,27]]],[1564444668735,["GJX@GJXAIOU",[[1,27,"、"]],[27,27],[28,28]]],[1564444670437,["GJX@GJXAIOU",[[-1,28," "]],[29,29],[28,28]]],[1564444674127,["GJX@GJXAIOU",[[1,85,"二、"]],[85,85],[87,87]]],[1564444680009,["GJX@GJXAIOU",[[1,481,"三 "]],[481,481],[482,482]]],[1564444680368,["GJX@GJXAIOU",[[1,482,"、"]],[482,482],[483,483]]],[1564444687890,["GJX@GJXAIOU",[[1,1158,"四、"]],[1158,1158],[1160,1160]]],[1564444690846,["GJX@GJXAIOU",[[1,1203,"（）"]],[1203,1203],[1205,1205]]],[1564444692793,["GJX@GJXAIOU",[[1,1204,"一"]],[1204,1204],[1205,1205]]],[1564444695852,["GJX@GJXAIOU",[[1,1414,"（）"]],[1414,1414],[1416,1416]]],[1564444697186,["GJX@GJXAIOU",[[1,1415,"二"]],[1415,1415],[1416,1416]]],[1564444702376,["GJX@GJXAIOU",[[1,1565,"五 "]],[1565,1565],[1566,1566]]],[1564444702735,["GJX@GJXAIOU",[[1,1566,"、"]],[1566,1566],[1567,1567]]],[1564444705430,["GJX@GJXAIOU",[[-1,1567," "]],[1568,1568],[1567,1567]]],[1564444710481,["GJX@GJXAIOU",[[1,1922,"（）"]],[1922,1922],[1924,1924]]],[1564444771864,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[1,478,"三、 "],[-1,481,"三、 "],[1,1155,"四、"],[-1,1158,"四、"],[1,1200,"（一）"],[-1,1203,"（一）"],[1,1411,"（二）"],[-1,1414,"（二）"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（）"],[-1,1922,"（）"]],[19,19],[1922,1922]]],[1564444771864,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[-1,481,"三、 "],[1,487,"三、 "],[-1,1158,"四、"],[1,1163,"四、"],[-1,1203,"（一）"],[1,1209,"（一）"],[-1,1414,"（二）"],[1,1420,"（二）"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（）"],[1,1927,"（）"]],[1922,1922],[19,19]]],[1564444712219,["GJX@GJXAIOU",[[1,1923,"一"]],[1923,1923],[1924,1924]]],[1564444891864,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[1,478,"三、 "],[-1,481,"三、 "],[1,1155,"四、"],[-1,1158,"四、"],[1,1200,"（一）"],[-1,1203,"（一）"],[1,1411,"（二）"],[-1,1414,"（二）"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"]],[19,19],[1922,1922]]],[1564444891864,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[-1,481,"三、 "],[1,487,"三、 "],[-1,1158,"四、"],[1,1163,"四、"],[-1,1203,"（一）"],[1,1209,"（一）"],[-1,1414,"（二）"],[1,1420,"（二）"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"]],[1922,1922],[19,19]]],[1564444865303,["GJX@GJXAIOU",[[1,11349,"（）"]],[11349,11349],[11351,11351]]],[1564444866644,["GJX@GJXAIOU",[[1,11350,"二"]],[11350,11350],[11351,11351]]],[1564446091875,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[1,478,"三、 "],[-1,481,"三、 "],[1,1155,"四、"],[-1,1158,"四、"],[1,1200,"（一）"],[-1,1203,"（一）"],[1,1411,"（二）"],[-1,1414,"（二）"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"],[1,11346,"（二）"],[-1,11349,"（二）"]],[19,19],[11349,11349]]],[1564446091875,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[-1,481,"三、 "],[1,487,"三、 "],[-1,1158,"四、"],[1,1163,"四、"],[-1,1203,"（一）"],[1,1209,"（一）"],[-1,1414,"（二）"],[1,1420,"（二）"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"],[-1,11349,"（二）"],[1,11355,"（二）"]],[11349,11349],[19,19]]],[1564446050901,["GJX@GJXAIOU",[[-1,2007,"自"]],[2008,2008],[2007,2007]]],[1564446058824,["GJX@GJXAIOU",[[1,2007,"子"]],[2007,2007],[2008,2008]]],[1564446080772,["GJX@GJXAIOU",[[-1,2053,"自"]],[2054,2054],[2053,2053]]],[1564446081976,["GJX@GJXAIOU",[[1,2053,"子"]],[2053,2053],[2054,2054]]],[1564446151878,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[-1,478,"DTL"],[1,484,"DTL"],[1,1155,"四、"],[-1,1158,"四、"],[-1,1200,"导出数"],[1,1206,"导出数"],[-1,1411,"导入数"],[1,1417,"导入数"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"],[-1,2004,"自协议子"],[1,2008,"子协议："],[-1,2050,"自协议子"],[1,2054,"子协议："],[1,11346,"（二）"],[-1,11349,"（二）"]],[19,19],[11349,11349]]],[1564446151878,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[1,481,"DTL"],[-1,484,"DTL"],[-1,1158,"四、"],[1,1163,"四、"],[1,1203,"导出数"],[-1,1206,"导出数"],[1,1414,"导入数"],[-1,1417,"导入数"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"],[1,2007,"自协议子"],[-1,2007,"子协议："],[1,2053,"自协议子"],[-1,2053,"子协议："],[-1,11349,"（二）"],[1,11355,"（二）"]],[11349,11349],[19,19]]],[1564446124873,["GJX@GJXAIOU",[[1,2170,"名"]],[2170,2170],[2171,2171]]],[1564446391882,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[-1,478,"DTL"],[1,484,"DTL"],[1,1155,"四、"],[-1,1158,"四、"],[-1,1200,"导出数"],[1,1206,"导出数"],[-1,1411,"导入数"],[1,1417,"导入数"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"],[-1,2004,"自协议子"],[1,2008,"子协议："],[-1,2050,"自协议子"],[1,2054,"子协议："],[1,2167,"名"],[-1,2170,"名"],[1,11347,"（二）"],[-1,11350,"（二）"]],[19,19],[11350,11350]]],[1564446391882,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[1,481,"DTL"],[-1,484,"DTL"],[-1,1158,"四、"],[1,1163,"四、"],[1,1203,"导出数"],[-1,1206,"导出数"],[1,1414,"导入数"],[-1,1417,"导入数"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"],[1,2007,"自协议子"],[-1,2007,"子协议："],[1,2053,"自协议子"],[-1,2053,"子协议："],[-1,2170,"名"],[1,2174,"名"],[-1,11350,"（二）"],[1,11356,"（二）"]],[11350,11350],[19,19]]],[1564446335630,["GJX@GJXAIOU",[[1,2279,"**"],[1,2281,"**"]],[2279,2281],[2279,2285]]],[1564446631885,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[-1,478,"DTL"],[1,484,"DTL"],[1,1155,"四、"],[-1,1158,"四、"],[-1,1200,"导出数"],[1,1206,"导出数"],[-1,1411,"导入数"],[1,1417,"导入数"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"],[-1,2004,"自协议子"],[1,2008,"子协议："],[-1,2050,"自协议子"],[1,2054,"子协议："],[1,2167,"名"],[-1,2170,"名"],[1,2276,"**"],[-1,2278,"操"],[1,2281,"操"],[-1,2283,"**"],[1,11351,"（二）"],[-1,11354,"（二）"]],[19,19],[11354,11354]]],[1564446631885,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[1,481,"DTL"],[-1,484,"DTL"],[-1,1158,"四、"],[1,1163,"四、"],[1,1203,"导出数"],[-1,1206,"导出数"],[1,1414,"导入数"],[-1,1417,"导入数"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"],[1,2007,"自协议子"],[-1,2007,"子协议："],[1,2053,"自协议子"],[-1,2053,"子协议："],[-1,2170,"名"],[1,2174,"名"],[-1,2279,"**"],[1,2283,"操"],[-1,2285,"操"],[1,2288,"**"],[-1,11354,"（二）"],[1,11360,"（二）"]],[11354,11354],[19,19]]],[1564446604468,["GJX@GJXAIOU",[[-1,2550,"\n"]],[2549,2549],[2548,2548]]],[1564446604836,["GJX@GJXAIOU",[[-1,2549,"\n"]],[2548,2548],[2547,2547]]],[1564446606612,["GJX@GJXAIOU",[[-1,2548,"\n"]],[2547,2547],[2546,2546]]],[1564446611078,["GJX@GJXAIOU",[[-1,2457,"\n"]],[2457,2457],[2456,2456]]],[1564446627110,["GJX@GJXAIOU",[[-1,6811,"\n"]],[6811,6811],[6810,6810]]],[1564446627364,["GJX@GJXAIOU",[[-1,6810,"\n"]],[6810,6810],[6809,6809]]],[1564446627876,["GJX@GJXAIOU",[[-1,6809,"\n"]],[6809,6809],[6808,6808]]],[1564446629205,["GJX@GJXAIOU",[[-1,6696,"\n"]],[6696,6696],[6695,6695]]],[1564446629628,["GJX@GJXAIOU",[[-1,6695,"\n"]],[6695,6695],[6694,6694]]],[1564446871895,[null,[[1,19,"toc"],[1,23,"一、"],[-1,26,"一、"],[1,82,"二、"],[-1,85,"二、"],[-1,478,"DTL"],[1,484,"DTL"],[1,1155,"四、"],[-1,1158,"四、"],[-1,1200,"导出数"],[1,1206,"导出数"],[-1,1411,"导入数"],[1,1417,"导入数"],[1,1562,"五、"],[-1,1565,"五、"],[1,1919,"（一）"],[-1,1922,"（一）"],[-1,2004,"自协议子"],[1,2008,"子协议："],[-1,2050,"自协议子"],[1,2054,"子协议："],[1,2167,"名"],[-1,2170,"名"],[1,2276,"**"],[-1,2278,"操"],[1,2281,"操"],[-1,2283,"**"],[-1,2454,"\n"],[1,2457,"p"],[-1,2544,"\n\n"],[1,2546,"/*"],[-1,6692,"\n\n"],[1,6695,"mp"],[-1,6804,"\n\n\n"],[1,6807,"imp"],[-1,11342,"上面总"],[1,11348,"上面总"]],[19,19],[11351,11351]]],[1564446871895,[null,[[-1,19,"toc"],[-1,26,"一、"],[1,31,"一、"],[-1,85,"二、"],[1,90,"二、"],[1,481,"DTL"],[-1,484,"DTL"],[-1,1158,"四、"],[1,1163,"四、"],[1,1203,"导出数"],[-1,1206,"导出数"],[1,1414,"导入数"],[-1,1417,"导入数"],[-1,1565,"五、"],[1,1570,"五、"],[-1,1922,"（一）"],[1,1928,"（一）"],[1,2007,"自协议子"],[-1,2007,"子协议："],[1,2053,"自协议子"],[-1,2053,"子协议："],[-1,2170,"名"],[1,2174,"名"],[-1,2279,"**"],[1,2283,"操"],[-1,2285,"操"],[1,2288,"**"],[1,2457,"\n"],[-1,2459,"p"],[1,2547,"\n\n"],[-1,2547,"/*"],[1,6695,"\n\n"],[-1,6696,"mp"],[1,6807,"\n\n\n"],[-1,6807,"imp"],[1,11345,"上面总"],[-1,11348,"上面总"]],[11351,11351],[19,19]]],[1564446814837,["GJX@GJXAIOU",[[1,7351,"\n            "]],[7351,7351],[7364,7364]]]],null,"GJX@GJXAIOU"],["a43d696a-9cd8-483b-ab62-c5d22b86d8f0",1564643459092,"# JavaEEDay34数据库\n\n@toc\n## 一、DCL 操作：\n一般是项目经理或者 DBA 进行管理；\n即管理用户：创建用户，给予用户操作数据的权限；\n\n\n## 二、用户管理：\n\n- 创建一个用户，用户名为 zhangsan 所在数据库的主机地址为 localhost，初始化密码：12345:\n`create user \"zhangsan\"@\"localhost\" identified by \"12345\";`\n- 授予新用户权限，上面的 localhost 也可以是一个 IP 地址；\n`grant all on hello.* to \"zhangsan\" @\"localhost\";` //将 hello 数据库赋值权限给 zhangsan;\n- 刷新权限：`flush privileges;` 至此完成新用户管理；\n- 取消授权：`revoke all on hello.* from \"zhangsan\" @ \"localhost\";`\n- 删除用户：`drop user \"zhangsan\" @ \"localhost\";`\n\n\n\n## 三、 DTL 事务处理\n当出现操作错误的时候，给予回退的机会；\n\n- 以银行转账为例，首先创建数据表：\n```sql\ncreate table bank(\n  userID tinyint not null primary key auto_increment,\n  money double(15,2),\n  name varchar(30)\n);\n```\n- 插入部分数据，用于测试：\n```sql\ninsert into bank(money,name) values(66,\"zhangsan\");\ninsert into bank(money,name) values(11,\"lisi\");\n```\n- 开启事务：一共两种方式：开始事务是将这个表加载在内存中进行处理，没有改变原来结构\n  - 方式一：`start transaction;`\n  - 方式二：`set autocommit = 0;`\n```sql\nstart transaction;\n```\n- 然后开始进行操作：\n```sql\nupdate bank set money = money - 55 where userID = 1;\nupdate bank set money = money + 55 where userID = 2;\n```\n- 操作完成之后，两种确认方式：\n  - 回滚，即操作中出现了异常，可以回滚到开始事务之前；命令为：`rollback;`\n  - 提交，即确认操作无误，提交开始事务之后的所有操作；命令为：`commit;`\n\n\n## 四、数据库导入导出\n使用命令行导入导出数据库，必须是没有登录数据库的状态下；\n\n\n### （一）导出数据库：\n导出的是一个.sql 文件，里面包含了所有的数据库操作信息，包括创建数据库和插入数据；\n**在未登录数据库的状态下操作以下语句：**\n`mysqldump -uroot -p hello > hello.sql;` 将 hello 数据库导出保存为 hello.sql 文件；\n**注意：** 导出文件的保存位置为当前操作的命令的文件目录下，可以通过先修改操作命令的目录进行保存位置的修改；\n\n### （二）导入数据库：\n**前提：** 必须在数据库中创建一个数据库用于接收导入的数据库,**然后退出数据库，操作以下语句：**\n`mysql -uroot -p receiveHello < hello.sql;` 将 hello.sql 数据库导入到 receiveHello 数据库中；\n\n\n\n## 五、Java 连接数据库方式  \nJDBC：Java Database Connectivity 操作数据库的规范；\n\nJDBC 主要通过接口实现，组成 JDBC 中两个包：java.sql 和 javax.sql，以上两个包是 JavaSE 中包含的，但是需要导入 JDBC 的实现类才可以使用，该实现类是由第三方数据库提供商完成；\n\nJDBC 主要的接口和类：\n- Driver 接口：连接数据库的驱动 API；\n- DriverManager 类：驱动管理类，负责驱动的注册（加载），获取数据库连接；\n- Statement 接口：负责 SQL 语句的执行；\n  - PreparedStatement 接口：负责 SQL 语句的预处理；\n- ResultSet 接口：处理查询数据库的结果集；\n\n\n### （一）通过 JDBC 连接 MySQL\n\n- 步骤一：确定数据库的 URL；\n  - 例如：`jdbc:mysql://localhost:3306/hello` 协议：子协议：//IP：端口号/数据库名？参数\n    - 协议：JDBC 总协议；\n    - 子协议：目前使用的是连接 MySQL 数据库的协议；\n    - IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    - 端口号：3306 MySQL 默认的端口号，可以修改；\n    - 数据库名：目前连接的操作的数据库是哪一个；\n    - 参数：通常为：`useUnicode = true ` `characterEncoding = utf-8`;\n\n- 步骤二：连接数据库需要用户名和密码：\n\n\n具体的**连接**操作方式：\n- 方式一：直接在代码中写入要操作的数据库以及用户名和密码信息，但是代码不可复用；\n```java\npackage a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */\n\nimport org.junit.jupiter.api.Test;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n/*\n Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率\n\n */\n\npublic class Demo1 {\n    //JDBC连接数据库的推荐方式\n    @Test\n    public void connection() {\n        try {\n            //1. 注册驱动 JDBC连接MySQL\n            Class.forName(\"com.mysql.jdbc.Driver\");\n\n            //2. 准备URL，是JDCB连接MySQL数据库的URL\n            String url = \"jdbc:mysql://localhost:3306/hello?useSSL=true\";\n\n            //3. 通过DriverManager获取到连接对象\n            Connection conn = DriverManager.getConnection(url, \"root\", \"123456\");\n\n            System.out.println(conn);\n\n            //4. 关闭数据库连接，释放资源\n            conn.close();\n\n        } catch (ClassNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n- 方式二：将数据库的具体信息写入：.properties 文件中，然后使用 Java 代码读取文件中信息，更改数据库信息只要在.properties 文件中修改就行；\ndb.properties\n```properties\ndrive = com.mysql.jdbc.Driver\nurl = jdbc:mysql://localhost:3306/hello?useSSL = true\nuser = root\npassword = 12345\n```\nJDBCUtil.java  数据库连接自定义工具类\n```java\npackage b_utils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\n/*\n \t自定义JDBC工具类 \n \t\t1. 加载驱动\n \t\t2. 获取连接对象\n \t\t3. 关闭连接 \n \t\n \t把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件\n */\n\npublic class JDBCUtil {\n\tprivate static String url = null;\n\tprivate static String user = null;\n\tprivate static String password = null;\n\tprivate static String driverClass = null;\n\tprivate static InputStream in = null;\n\t\n\t//利用静态代码块的特征，在类文件加载到内存的时候，就会执行在静态代码块里面的代码\n\tstatic {\n\t\ttry {\n\t\t\t//1. 读取配置文件信息 读取properties文件\n\t\t\tProperties props = new Properties();\n\t\t\t\n\t\t\t//如果一个properties文件加载到内存中，需要借助于IO流\n\t\t\tin = new FileInputStream(\"./src/db.properties\");\n\t\t\t\n\t\t\t//2. 利用Properties里面的load方法加载文件\n\t\t\tprops.load(in);\n\t\t\t\n\t\t\t//3. 可以通过Properties类对象，获取到想要的数据\n\t\t\turl = props.getProperty(\"url\");\n\t\t\tuser = props.getProperty(\"user\");\n\t\t\tpassword = props.getProperty(\"password\");\n\t\t\tdriverClass = props.getProperty(\"driver\");\n\t\t\t\n\t\t\t//4. 加载类文件\n\t\t\tClass.forName(driverClass);\n\t\t} catch (IOException | ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"驱动加载失败\");\n\t\t} finally {\n\t\t\t//关闭文件连接\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取数据库连接对象\n\t * @return\n\t */\n\tpublic static Connection getConnection() {\n\t\tConnection conn = null;\n\t\t\n\t\ttry {\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\t\n\t\treturn conn;\n\t}\n\t\n\t/**\n\t * 关闭数据库连接，释放Statement\n\t * @param conn 数据库连接对象\n\t * @param st Statement对象\n\t */\n\tpublic static void close(Connection conn, Statement st) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t/**\n\t * 关闭带有结果集的查询语句资源\n\t * @param conn\n\t * @param st\n\t * @param set\n\t */\n\tpublic static void close(Connection conn, Statement st, ResultSet set) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t\tif (set != null) {\n\t\t\t\tset.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n\n```\n\n\n实现常见的增删改查操作：\n```java\npackage a_connectmysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-13:51\n */\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport b_utils.JDBCUtil;\nimport org.junit.jupiter.api.Test;\n\npublic class Demo2 {\n\n    /**\n     * 创建表格（通过JDBC操作MYSQL创建了一个表格）\n     */\n    @Test\n    public void createTable() {\n        Statement st = null;\n\n        //1. 通过已经封装好的JDBC工具类，获取到数据库的连接对象\n        Connection conn = JDBCUtil.getConnection();\n        try {\n            //2. 获取Statement,SQL语句运输者，将SQL语句运输到MySQL里面，让MySQL运行\n            st = conn.createStatement();\n\n            //3. 准备SQL语句,语句最后可以不用分号\n            String sql = \"create table WOW(heroID int not null primary key auto_increment,\n            heroName char(30))\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 查看创建的结果\n            System.out.println(\"影响的行数:\" + count);\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 使用Statement执行DML语句\n     */\n    @Test\n    public void testInsert() {\n        Statement st = null;\n\n        //1. 建立数据库连接\n        Connection conn = JDBCUtil.getConnection();\n\n        try {\n            //2. 获取到Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"insert into WOW(heroName) values('萨满');\";\n\n            //4. 通过Statement执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 影响的行数\n            System.out.println(\"count = \" + count);\n\n        } catch (SQLException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } finally {\n            //conn是连接数据库的资源，st是应用程序到MySQL之间的SQL语句运输者\n            //这两个都算是资源，所以都需要关闭\n            try {\n                if (st != null) {\n                    st.close();\n                }\n                if (conn != null) {\n                    conn.close();\n                }\n            } catch (SQLException e) {\n                // TODO: handle exception\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    /**\n     * 使用Statement删除数据库中一条数据\n     */\n    @Test\n    public void testDelete() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"delete from wow where id=1\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //另一张关闭方式\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement修改数据库中一条数据\n     */\n    @Test\n    public void testUpdate() {\n        Connection conn = null;\n        Statement st = null;\n\n        try {\n            //1. 获取数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"update WOW set heroName = '大法师' where heroID = 2\";\n\n            //4. 执行SQL语句\n            int count = st.executeUpdate(sql);\n\n            //5. 删除影响的行数\n            System.out.println(\"count = \" + count);\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            //调用自定义工具类里面的关闭资源的方法，关闭数据库连接和释放Statement\n            JDBCUtil.close(conn, st);\n        }\n    }\n\n    /**\n     * 使用Statement查询数据库中数据\n     */\n    @Test\n    public void testSelect() {\n        Connection conn = null;\n        Statement st = null;\n        ResultSet set = null; //查询语句返回的结果集对象\n\n        try {\n            //1. 获取数据库连接对象\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取Statement\n            st = conn.createStatement();\n\n            //3. 准备SQL语句\n            String sql = \"select * from WOW\";\n\n            //4. 执行SQL语句 【获取查询结果集】\n            set = st.executeQuery(sql);\n\n            //5. Result next() getXXX(String 字段名) XXX表示不同的数据类型，\n            //根据当前的代码需求 使用不同的数据类型\n            while (set.next()) {\n                int heroID = set.getInt(\"heroID\");\n                String heroName = set.getString(\"heroName\");\n\n                System.out.println(heroID + \":\" + heroName);\n            }\n        } catch (SQLException e) {\n            // TODO: handle exception\n            e.printStackTrace();\n        } finally {\n            JDBCUtil.close(conn, st, set);\n        }\n    }\n}\n\n```\n\n### （二）上面总结：JDBC 核心 API\n- Driver接口：\n  - connect(url, propertie);\n      - url: JDBC连接数据库(目前为 MySQL)URL\n            标准格式为：`jdbc:mysql://localhost:3306/javaee1707?useSSL=true`\n       - propertie：\n            连接数据库的属性，主要包含的是数据库的用户名和密码\n            \n- DriverManager类：是驱动管理类，用于管理【加载/注册】过的驱动程序\n    - registerDriver(driver); 注册驱动程序\n    - Connection    getConnection(url, user, password);返回值是获取一个数据库的连接对象，需要的参数是存在JDBC协议的URL， 数据库用户名 和 密码\n\n- Connection接口：\n    -  Statement   createStament(); 创建一个Statement的实现类对象（因为 Statement 是接口）\n    - PreparedStatement   preparedStatement(String sql); 获取到一个PreparedStatement SQL语句预处理对象\n    -  CallableStatmenet    preparedCall(String sql); 了解\n\n- Statement接口：\n   - int    executeUpdate(String sql); 执行给定的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n   - ResultSet    executeQuery(String sql); 执行给定的SQL语句 DQL 查询语句，返回数据结果集\n\n- PreparedStatement接口：\n    - int    executeUpdate(); 执行预处理的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n    - ResultSet    executeQuery(); 执行预处理的SQL语句 DQL 查询语句，返回数据结果集\n    预处理有利于防止 SQL注入\n\n- ResultSet接口： 查询语句的数据结果集：\n    - boolean    next(); 得到当前数据行，并且光标指向下一个数据行，如果没有数据行，返回false\n    - getXXX(String \"字段名\"); 获取指定数据类型的字段数据\n\n\nPreparedStatement 防止 SQL 注入代码：\n```java\npackage c_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport org.junit.Test;\n\n\nimport b_utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\t//private String name = \"Tom\";\n\t//private String password = \"123456\";\n\tprivate String name = \"Tomfdajkjfdkajfkdlfdsafdsa' or 1=1 --\";\n\tprivate String password = \"23456\";\n\t\n\t@Test\n\t//这里没有进行预处理，不能防止SQL注入\n\tpublic void testLoginUserStatement() {\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\tStatement st = null;\n\t\t\n\t\ttry {\n\t\t\t//1. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t//2. 获取Statement\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\t//3. 准备SQL语句\n\t\t\t//SQL注入，如果说用户在输入 信息的时候，偶然间了解到了你的SQL规则\n\t\t\tString sql = \"select * from user where name='\" + name +\n\t\t\t\t\t\"' and password='\" + password + \"'\";\n\t\t\tSystem.out.println(sql);\n\t\t\t//4. 使用Statement执行SQL语句\n\t\t\tset = st.executeQuery(sql);\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, st, set);\n\t\t}\n\t}\n\n\n\n\n\t/**\n\t * PreparedStatement 可以有效防止SQL注入，因为在获取PreparedStatment时，已经对SQL语句\n\t * 进行了预处理操作\n\t */\n\t@Test\n\tpublic void testLoginUserPreparedStatement() {\n\t\tPreparedStatement ps = null;\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 准备预处理SQL语句\n\t\t\tString sql = \"select * from user where name=? and password=?\"; //?是数据占位符\n\t\t\t\n\t\t\t//3. 获取PreparedStatement对象,传入的参数就是预处理的SQL语句\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//4. 准备参数\n\t\t\tps.setString(1, name);\n\t\t\tps.setString(2, password);\n\t\t\t\n\t\t\t//5. 执行预处理之后的SQL语句\n\t\t\tset = ps.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, set);\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1564643455769,["GJX@GJXAIOU",[[-1,2551,"Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率"]],[2551,3019],[2551,2551]]],[1564643459185,["GJX@GJXAIOU",[[1,2333,"- \n"]],[2332,2332],[2335,2335]]],[1564643459966,["GJX@GJXAIOU",[[-1,2333,"- "]],[2335,2335],[2333,2333]]],[1564643461638,["GJX@GJXAIOU",[[1,2333,"Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率"]],[2333,2333],[2801,2801]]],[1564643464607,["GJX@GJXAIOU",[[1,2333,"\n"]],[2333,2333],[2334,2334]]],[1564643465790,["GJX@GJXAIOU",[[1,2334,"qizh"]],[2334,2334],[2338,2338]]],[1564643466487,["GJX@GJXAIOU",[[-1,2334,"qizh"]],[2338,2338],[2334,2334]]],[1564643466918,["GJX@GJXAIOU",[[-1,2333,"\n"]],[2334,2334],[2333,2333]]],[1564643467847,["GJX@GJXAIOU",[[1,2333,"\n"]],[2333,2333],[2334,2334]]],[1564643470398,["GJX@GJXAIOU",[[1,2334,"其中 "]],[2334,2334],[2336,2336]]],[1564643511510,["GJX@GJXAIOU",[[-1,2822,"a_"],[1,2824,"jdbc."],[-1,2831,"mysql;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-29-10:44\n */"],[1,2893,"ion;"],[1,2930,"\n"],[1,3022,"*"],[1,3024,"* @author GJXAIOU"],[1,3025," * @create 2019-08-01-14:14"],[-1,3029,"\n"],[-1,3044,"Demo1"],[1,3049,"JdbcConnection"],[-1,3056,"//JDBC连接数据库的推荐方式\n    "],[-1,3112,"{\n        try"],[-1,3128,"  "],[-1,3138,"  "],[1,3142," "],[-1,3144," "],[1,3154," "],[1,3168,"  try {\n"],[1,3174,"   "],[1,3199,"cj."],[-1,3215,"    "],[1,3219,"\n"],[1,3229," "],[-1,3231," "],[-1,3234,"URL"],[1,3237,"url"],[-1,3241,"CB"],[1,3243,"BC所要"],[-1,3258,"    "],[-1,3312,"hello?useSSL=true\""],[1,3330,"day34jdbc?serverTimezone = GMT%2B8\" "],[-1,3333,"    "],[1,3347," "],[-1,3349," "],[-1,3365,"获取到"],[-1,3373,"    "],[1,3399," = null;\n\n        co"],[-1,3445,"123456"],[1,3451,"GJXAIOU"],[-1,3456,"    "],[1,3460,"\n"],[-1,3490,"n"],[-1,3503,"    "],[1,3509," "],[-1,3511," "],[-1,3525,"   "],[1,3528,"\n"],[-1,3536," "],[-1,3539,"n"],[-1,3550,"\n"],[-1,3596,"\n            // TODO Auto-generated catch block"],[-1,3760,""],[1,3760,"\n"]],[2814,3763],[3703,3703]]],[1564643518621,["GJX@GJXAIOU",[[1,3232,"，后面"]],[3232,3232],[3235,3235]]],[1564643522948,["GJX@GJXAIOU",[[1,3235,"参数为设置时区"]],[3235,3235],[3242,3242]]],[1564643541247,["GJX@GJXAIOU",[[-1,3719,"\n"]],[3718,3718],[3717,3717]]],[1564644600231,["GJX@GJXAIOU",[[1,3719,"\n"]],[3717,3717],[3718,3718]]],[1564644604260,["GJX@GJXAIOU",[[1,3718,"程序运行结构与哦"]],[3718,3718],[3726,3726]]],[1564644606886,["GJX@GJXAIOU",[[-1,3720,"运行结构与哦"]],[3726,3726],[3720,3720]]],[1564644611280,["GJX@GJXAIOU",[[1,3720,"运行结果：``"]],[3720,3720],[3727,3727]]],[1564644612385,["GJX@GJXAIOU",[[1,3726,"com.mysql.cj.jdbc.ConnectionImpl@15761df8"]],[3726,3726],[3767,3767]]],[1564649486037,["GJX@GJXAIOU",[[1,11359,"\n"]],[11357,11357],[11358,11358]]],[1564649488276,["GJX@GJXAIOU",[[1,11358,"diyige"]],[11358,11358],[11364,11364]]],[1564649490028,["GJX@GJXAIOU",[[-1,11358,"diyige"]],[11364,11364],[11358,11358]]],[1564649493409,["GJX@GJXAIOU",[[1,11358,"第一个Test"]],[11358,11358],[11365,11365]]],[1564649493450,["GJX@GJXAIOU",[[1,11361," "]],[11365,11365],[11366,11366]]],[1564649494208,["GJX@GJXAIOU",[[1,11366,"结果"]],[11366,11366],[11368,11368]]],[1564649494247,["GJX@GJXAIOU",[[1,11366," "]],[11368,11368],[11369,11369]]],[1564649509478,["GJX@GJXAIOU",[[1,11369,"：影响的行数0"]],[11369,11369],[11376,11376]]],[1564649513014,["GJX@GJXAIOU",[[1,11370,"`"]],[11370,11370],[11371,11371]]],[1564649514895,["GJX@GJXAIOU",[[1,11377,"`"]],[11377,11377],[11378,11378]]],[1564651599500,["GJX@GJXAIOU",[[1,11380,"\n"]],[11378,11378],[11379,11379]]],[1564651602813,["GJX@GJXAIOU",[[1,11379,"dier"]],[11379,11379],[11383,11383]]],[1564651603699,["GJX@GJXAIOU",[[-1,11379,"dier"]],[11383,11383],[11379,11379]]],[1564651604059,["GJX@GJXAIOU",[[-1,11380,"\n"]],[11379,11379],[11378,11378]]],[1564651604893,["GJX@GJXAIOU",[[1,11380,"\n"]],[11378,11378],[11379,11379]]],[1564651605518,["GJX@GJXAIOU",[[1,11379,"di"]],[11379,11379],[11381,11381]]],[1564651606029,["GJX@GJXAIOU",[[-1,11379,"di"]],[11381,11381],[11379,11379]]],[1564651611944,["GJX@GJXAIOU",[[1,11379,"第二个T二十日"]],[11379,11379],[11386,11386]]],[1564651611985,["GJX@GJXAIOU",[[1,11382," "]],[11386,11386],[11387,11387]]],[1564651612956,["GJX@GJXAIOU",[[-1,11383,"T二十日"]],[11387,11387],[11383,11383]]],[1564651617047,["GJX@GJXAIOU",[[1,11383,"Test结果"]],[11383,11383],[11389,11389]]],[1564651617087,["GJX@GJXAIOU",[[1,11387," "]],[11389,11389],[11390,11390]]],[1564651618873,["GJX@GJXAIOU",[[1,11390,"：``"]],[11390,11390],[11393,11393]]],[1564651620150,["GJX@GJXAIOU",[[1,11392,"改变的行数：2"]],[11392,11392],[11399,11399]]],[1564651825307,["GJX@GJXAIOU",[[1,11402,"\n"]],[11400,11400],[11401,11401]]],[1564651826278,["GJX@GJXAIOU",[[1,11401,"di"]],[11401,11401],[11403,11403]]],[1564651827626,["GJX@GJXAIOU",[[-1,11401,"di"]],[11403,11403],[11401,11401]]],[1564651833609,["GJX@GJXAIOU",[[1,11401,"第三个Test"]],[11401,11401],[11408,11408]]],[1564651833649,["GJX@GJXAIOU",[[1,11404," "]],[11408,11408],[11409,11409]]],[1564651834751,["GJX@GJXAIOU",[[1,11409,"结果"]],[11409,11409],[11411,11411]]],[1564651834791,["GJX@GJXAIOU",[[1,11409," "]],[11411,11411],[11412,11412]]],[1564651837430,["GJX@GJXAIOU",[[1,11412,"：``"]],[11412,11412],[11415,11415]]],[1564651838772,["GJX@GJXAIOU",[[1,11414,"改变的行数：1"]],[11414,11414],[11421,11421]]],[1564651841612,["GJX@GJXAIOU",[[1,11424,"\n"]],[11422,11422],[11423,11423]]],[1564657381228,["GJX@GJXAIOU",[[1,11425,"\n"]],[11422,11422],[11423,11423]]],[1564657381923,["GJX@GJXAIOU",[[1,11423,"di"]],[11423,11423],[11425,11425]]],[1564657382149,["GJX@GJXAIOU",[[1,11425,"s"]],[11425,11425],[11426,11426]]],[1564657382803,["GJX@GJXAIOU",[[-1,11423,"dis"]],[11426,11426],[11423,11423]]],[1564657383160,["GJX@GJXAIOU",[[-1,11425,"\n"]],[11423,11423],[11422,11422]]],[1564657383965,["GJX@GJXAIOU",[[1,11425,"\n"]],[11422,11422],[11423,11423]]],[1564657389107,["GJX@GJXAIOU",[[1,11423,"第四个Test"]],[11423,11423],[11430,11430]]],[1564657389148,["GJX@GJXAIOU",[[1,11426," "]],[11430,11430],[11431,11431]]],[1564657390364,["GJX@GJXAIOU",[[1,11431,"结果"]],[11431,11431],[11433,11433]]],[1564657390404,["GJX@GJXAIOU",[[1,11431," "]],[11433,11433],[11434,11434]]],[1564657392332,["GJX@GJXAIOU",[[1,11434,"：``"]],[11434,11434],[11437,11437]]],[1564657393570,["GJX@GJXAIOU",[[1,11436,"id :2 name :李四五 gender :女 socore :99.00 home :江苏 hobby :游泳,打球"]],[11436,11436],[11497,11497]]],[1564657605191,["GJX@GJXAIOU",[[-1,6628,"a_"],[1,6630,"jdbc."],[-1,6637,"mysql;\n\n/**\n * @author GJXAIOU\n * @cre"],[1,6675,"ion;   import org.junit.jupiter.api.Test;   import java.m"],[1,6677,"h.BigD"],[1,6678,"cimal;"],[-1,6679,"2019-07-29-13:51\n */\n"],[-1,6727,"\n"],[1,6728," "],[-1,6754,"\n"],[1,6755," "],[-1,6784,"\n"],[1,6785," "],[-1,6811,"\nimport b_utils.JDBC"],[1,6831,"     /**使用Jdbc"],[-1,6835,";\nimport org.junit.jupiter.api.Test;\n\n"],[1,6873,"工具类创建并操作数据表\n  * @author GJXAIOU\n * @create 2019-08-01-16:07\n */ "],[-1,6886,"Demo2"],[1,6891,"JdbcRealizationTest"],[-1,6904,"    "],[-1,6910,"创建表格（"],[-1,6921,"操作MYSQL"],[-1,6930,"了一个表格）"],[1,6936,"数据表"],[-1,6939,"   "],[-1,6945," "],[-1,6948," "],[-1,6955,"  "],[1,6985," "],[-1,6995,"Statement st = null;\n\n        "],[1,7027," "],[-1,7029," "],[-1,7039,"DBC"],[1,7042,"dbcUtil"],[-1,7048,"到"],[-1,7060,"      "],[1,7081,"ection"],[-1,7085,"DBC"],[1,7088,"dbc"],[-1,7109,"\n   "],[-1,7116,"  "],[1,7138," "],[-1,7140," "],[-1,7152,","],[1,7153,"，即"],[1,7158,"的"],[1,7162,"作用是"],[-1,7176,"里面"],[1,7178,"中"],[-1,7190,"         "],[1,7199,"Statement"],[1,7202,"atement"],[1,7208,"nectio"],[-1,7228,"\n\n     "],[-1,7239,"   "],[1,7244," "],[-1,7246," "],[1,7249,"好"],[-1,7254,","],[1,7255,"，"],[-1,7259,"可以"],[-1,7268,"          "],[-1,7305,"WOW(heroID"],[1,7315,"person(\" +\n                    \""],[1,7317,"d tinyi"],[1,7320," "],[1,7328," "],[1,7340," "],[1,7356,"\" +"],[-1,7369,"heroName"],[1,7377,"        \" name char(5) not null,\" +\n                    \" gender"],[-1,7383,"30))\";\n"],[1,7390,"1),\" +\n                    \" score decimal(4, 2),\" +\n                    \" home enum(\\\"江苏\\\", \\\"上海\\\", \\\"杭州\\\", \\\"苏州\\\"),\" +"],[1,7403,"        \" hobby set(\\\"游泳\\\", \\\"打球\\\", \\\"跑步\\\"))\";    "],[1,7405," "],[-1,7407," "],[-1,7410,"S"],[1,7411,"s"],[-1,7429,"          "],[1,7453,"atement"],[-1,7473,"\n\n        "],[1,7489," "],[-1,7491," "],[-1,7502,"          "],[-1,7537,":"],[-1,7549,"\n  "],[-1,7556,"  "],[-1,7597,"// TODO Auto-generated catch block\n            "],[-1,7667,"      "],[1,7674,"\n"],[-1,7691,"    "],[-1,7699,"S"],[1,7700,"s"],[-1,7715,"\n    "],[1,7720,"-- insert into\n"],[-1,7723,"\n  "],[-1,7734,"  "],[-1,7762," "],[-1,7773,"Statement st = null;\n\n        "],[1,7805," "],[-1,7807," "],[-1,7818,"      "],[1,7839,"ection"],[-1,7843,"DBC"],[1,7846,"dbc"],[-1,7867,"\n\n"],[1,7873,"Statement"],[1,7874,"statement"],[1,7875,"="],[1,7876,"null;\n"],[1,7897," "],[-1,7899," "],[-1,7915,"          "],[1,7927,"atement"],[1,7934,"ection"],[-1,7953,"\n\n        "],[1,7969," "],[-1,7971," "],[1,7982,"String"],[1,7983,"sql1"],[1,7984,"="],[1,7985,"\"insert"],[1,7986,"into"],[1,7987,"person(name,"],[1,7988,"gender,"],[1,7989,"score,"],[1,7990,"home, hobby) values(\\\"张三\\\", \\\"男\\\", 98.23, 2, 3)\";\n"],[1,8002,"2"],[-1,8018,"WOW(heroN"],[1,8027,"person(n"],[1,8030,", gender, score, home, hobby"],[-1,8039,"'萨满');\";\n\n        "],[1,8057,"\\\"李四五\\\", \\\"女\\\",99.00,\\\"江苏\\\", \\\"游泳,打球\\\")\";"],[1,8063," "],[-1,8065," "],[-1,8068,"S"],[1,8069,"s"],[-1,8087,"          "],[1,8106,"1"],[1,8111,"atement"],[1,8129,"1"],[-1,8132,"\n        "],[1,8141," int count2 = statement.executeUpdate(sql2);"],[1,8147," "],[-1,8149," "],[1,8150,"打印"],[-1,8156,"          "],[1,8188,"改变的行数：\" + ("],[-1,8193," = \""],[1,8197,"1"],[1,8205,"2)"],[-1,8208,"\n      "],[-1,8256,"// TODO Auto-generated catch block\n            "],[-1,8326,"      "],[-1,8333," "],[1,8358," 6.关闭所有资源:"],[1,8362,"ection "],[-1,8374,"是应"],[1,8376,"atement是引"],[-1,8396,"\n            //这两个都算"],[1,8416,"，都"],[-1,8419,"，所以都需要关闭"],[-1,8430,"          try {\n                if (st != null) {\n                    st"],[1,8502,"JdbcUtil"],[-1,8508,"();\n                }\n                if (conn != null) {\n                    c"],[1,8587,"Connecti"],[-1,8589,"n.close"],[-1,8597,");\n                }\n            } "],[-1,8633,"atch (SQLExcepti"],[-1,8651," e) {\n                // TODO: ha"],[-1,8685,"dl"],[-1,8688," ex"],[-1,8692,"ep"],[-1,8698,"\n                e.pri"],[1,8720,", stateme"],[-1,8722,"StackTrace("],[-1,8738,"          "],[-1,8754,"    "],[-1,8765,"}\n\n  "],[1,8770,"@Test\n"],[-1,8777,"    "],[-1,8785,"S"],[1,8786,"s"],[-1,8807,"   "],[-1,8815,"  @Test\n    "],[1,8862,"// 1.建立数据库连接\n  "],[1,8877,"ection"],[-1,8880,"null;\n   "],[1,8889,"JdbcUtil.getConnection();"],[-1,8893," "],[1,8906,"atement"],[-1,8915,"\n       "],[-1,8944,"1."],[1,8947,"2."],[-1,8949,"数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取S"],[1,9021,"到statement\n  s"],[-1,9029,"\n            st"],[1,9050,"nectio"],[-1,9070,"\n\n        "],[1,9086," "],[-1,9088," "],[-1,9099,"          "],[-1,9135,"wow"],[1,9138,"person"],[1,9147," "],[1,9148," "],[-1,9151,"\n\n      "],[-1,9163,"  "],[1,9167," "],[-1,9169," "],[1,9170,"使用statement"],[-1,9180,"          "],[1,9203,"tatemen"],[-1,9224,"\n\n      "],[-1,9236,"  "],[1,9240," "],[-1,9242," 删除"],[1,9245,"输出"],[-1,9251,"          "],[-1,9283,"count = "],[1,9291,"改变的行数："],[-1,9303,"      "],[-1,9350,"// TODO: handle exception\n            "],[-1,9411,"      "],[-1,9418," "],[-1,9443,"另一张关闭方式\n            //调用自定义工具类里面的"],[1,9476," 6."],[1,9478,"所有"],[-1,9480,"的方法，关闭数据库连接和释放Statement"],[-1,9506,"          JDBC"],[1,9520,"Jdbc"],[1,9530,"Connection"],[1,9535,"ection"],[1,9539,"atement"],[-1,9542,"      "],[-1,9567,"    "],[-1,9576,"S"],[1,9577,"s"],[-1,9598,"   "],[-1,9606,"  @Test\n    "],[-1,9642," "],[1,9653,"// 1.建立数据库连接\n  "],[1,9667,"nectio"],[-1,9671,"null;\n    "],[1,9681,"JdbcUtil.getConnection();"],[1,9697,"atement"],[-1,9706,"\n       "],[-1,9735,"1."],[1,9738,"2."],[-1,9740,"数据库连接\n            conn = JDBCUtil.getConnection();\n\n            //2. 获取S"],[1,9812,"到statement\n  s"],[-1,9820,"\n            st"],[1,9841,"nectio"],[-1,9861,"\n\n        "],[1,9877," "],[-1,9879," "],[-1,9890,"          "],[-1,9921,"WOW"],[1,9924,"person"],[-1,9929,"heroN"],[1,9934,"n"],[-1,9941,"大法师"],[1,9944,"李四"],[-1,9952,"heroID"],[1,9958,"id"],[-1,9964,"\n\n        "],[1,9980," "],[-1,9982," "],[1,9983,"使用statement"],[-1,9993,"          "],[1,10016,"tatemen"],[-1,10037,"\n\n        "],[1,10053," "],[-1,10055," 删除"],[1,10058,"输出"],[-1,10064,"          "],[-1,10096,"count = "],[1,10104,"改变的行数"],[-1,10118,"      "],[-1,10150,"\n            // TODO: handle exception"],[-1,10224,"      "],[-1,10231," "],[-1,10256,"调用自定义工具类里面的"],[1,10267," 6."],[1,10269,"所有的"],[-1,10271,"的方法，关闭数据库连接和释放Statement"],[-1,10297,"          JDBC"],[1,10311,"Jdbc"],[1,10321,"Connection"],[1,10325,"nectio"],[1,10330,"atement"],[-1,10333,"      "],[-1,10359,"    "],[-1,10367,"S"],[1,10368,"s"],[1,10384,"并返回结果集set"],[-1,10386,"    "],[-1,10392,"\n  "],[-1,10403,"  "],[-1,10431," "],[1,10442,"// 1.连接数据库\n  "],[1,10457,"ection"],[-1,10460,"null;\n    "],[1,10470,"JdbcUtil.getConnection();"],[1,10486,"atement"],[-1,10497,"    "],[1,10501,"// 查询语句返回的结果集对象\n"],[-1,10524," //查询语句返回的结果集对象"],[-1,10540,"\n       "],[-1,10569,"1. 获取数据库连接对象\n         "],[-1,10592,"  conn = JDBCUtil.getConnection();\n\n            //"],[-1,10644," "],[-1,10647,"S"],[1,10648,"到s"],[-1,10659,"          "],[1,10671,"atement"],[1,10677,"nectio"],[-1,10697,"\n\n        "],[1,10713," "],[-1,10715," "],[-1,10726,"          "],[-1,10764,"WOW"],[1,10767,"person"],[-1,10769,"\n\n        "],[1,10785," "],[-1,10787," "],[1,10788,"通过statement"],[-1,10795," 【获取"],[1,10799,", 获得"],[-1,10804,"】"],[-1,10806,"          "],[1,10826,"atement"],[-1,10845,"\n\n        "],[1,10861," "],[-1,10863," Result next() getXXX(String 字段名) XXX表示不同的数据类型，"],[1,10910,"输出影响的行数"],[-1,10913,"          //根据当前的代码需求 使用不同的数据类型\n            "],[-1,10962," "],[-1,10975," "],[-1,10998,"heroID"],[1,11004,"id"],[-1,11019,"heroID"],[1,11025,"id"],[1,11031,"String"],[1,11032,"name"],[1,11033,"="],[1,11034,"set.getString(\"name\");\n"],[1,11036,"String"],[1,11037,"gender"],[1,11038,"="],[1,11039,"set.getString(\"gender\");\n"],[1,11041,"BigDecimal"],[1,11042,"score"],[1,11043,"= set.getBigDecimal(\"score\");\n"],[-1,11053,"er"],[-1,11056,"Na"],[-1,11079,"er"],[-1,11082,"Na"],[-1,11090,"\n       "],[1,11100,"String"],[1,11101,"hobby"],[1,11102,"="],[1,11103,"set.getString(\"hobby\");"],[-1,11126,"heroID"],[1,11132,"\"id :\" + id + \" name :\" + name"],[1,11136," gender "],[-1,11141,"heroName);\n"],[1,11152,"gender +\n "],[-1,11164,"}\n"],[1,11166,"   "],[-1,11174,"} catch (SQLException e) {"],[1,11200,"\" socore :\" + score + \" home :\" + home + \" hobby :\" + hobby);      }"],[-1,11209,"    // TODO: handle e"],[1,11230,"} catch (SQLE"],[1,11238," e) {"],[-1,11272,"      "],[-1,11281," "],[-1,11305,"DBC"],[1,11308,"dbc"],[1,11318,"ConnectionWithResult"],[1,11323,"ection"],[1,11327,"atement"],[-1,11335,"      "],[1,11350,"\n"]],[6620,11352],[11048,11048]]],[1564657625825,["GJX@GJXAIOU",[[-1,6620,"package jdbc.connection;   import org.junit.jupiter.api.Test;   import java.math.BigDecimal; import java.sql.Connection; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement;     /**使用JdbcUtil工具类创建并操作数据表\n  * @author GJXAIOU\n * @create 2019-08-01-16:07\n */ public class JdbcRealizationTest {\n\n    /**\n * 通过JDBC创建数据表\n  */\n  @Test\n  public void createTable()  {\n        // 1.通过已经封装好的JdbcUtil工具类，获取数据库的连接对象\n  Connection connection = JdbcUtil.getConnection();   try {\n            // 2.获取Statement，即SQL语句的运输者，作用是将SQL语句运输到MySQL中，让MySQL运行\n  Statement statement = connection.createStatement();    // 3.准备好SQL语句，语句最后不用分号\n  String sql = \"create table person(\" +\n                    \" id tinyint  not null  primary key  auto_increment,\" +\n                    \" name char(5) not null,\" +\n                    \" gender char(1),\" +\n                    \" score decimal(4, 2),\" +\n                    \" home enum(\\\"江苏\\\", \\\"上海\\\", \\\"杭州\\\", \\\"苏州\\\"),\" +\n                    \" hobby set(\\\"游泳\\\", \\\"打球\\\", \\\"跑步\\\"))\";    // 4.通过statement执行SQL语句\n  int count = statement.executeUpdate(sql);    // 5.查看创建的结果\n  System.out.println(\"影响的行数\" + count);    } catch (SQLException e) {\n            e.printStackTrace();\n  }\n\n    }\n\n    /**\n * 使用statement执行DML语句-- insert into\n */  @Test\n  public void testInsert(){\n        // 1.建立数据库连接\n  Connection connection = JdbcUtil.getConnection();    Statement statement = null;\n try {\n            // 2.获取到Statement\n  statement = connection.createStatement();    // 3.准备SQL语句\n  String sql1 = \"insert into person(name, gender, score, home, hobby) values(\\\"张三\\\", \\\"男\\\", 98.23, 2, 3)\";\n  String sql2 = \"insert into person(name, gender, score, home, hobby) values(\\\"李四五\\\", \\\"女\\\",99.00,\\\"江苏\\\", \\\"游泳,打球\\\")\";    // 4.通过statement执行SQL语句\n  int count1 = statement.executeUpdate(sql1);\n int count2 = statement.executeUpdate(sql2);    // 5.打印影响的行数\n  System.out.println(\"改变的行数：\" + (count1 + count2));\n  } catch (SQLException e) {\n            e.printStackTrace();\n  }finally {\n            // 6.关闭所有资源:connection 是连接数据库的资源，statement是引用程序到MySQL之间的SQL语句运输者，都是资源\n  JdbcUtil.closeConnection(connection, statement);\n  }\n    }\n\n    @Test\n  /**\n * 使用statement删除数据库中一条数据\n  */\n  public void testDelete() {\n        // 1.建立数据库连接\n  Connection connection = JdbcUtil.getConnection();    Statement statement = null;\n try {\n            // 2.获取到statement\n  statement = connection.createStatement();    // 3.准备SQL语句\n  String sql = \"delete from person where id = 1\";    // 4.使用statement执行SQL语句\n  int count = statement.executeUpdate(sql);    // 5.输出影响的行数\n  System.out.println(\"改变的行数：\" + count);\n  } catch (SQLException e) {\n            e.printStackTrace();\n  }finally {\n            // 6.关闭所有资源\n  JdbcUtil.closeConnection(connection, statement);\n  }\n    }\n\n    /**\n * 使用statement修改数据库中一条数据\n  */\n  public void testUpdate(){\n        // 1.建立数据库连接\n  Connection connection = JdbcUtil.getConnection();    Statement statement = null;\n try {\n            // 2.获取到statement\n  statement = connection.createStatement();    // 3.准备SQL语句\n  String sql = \"update person set name = '李四' where id = 2\";    // 4.使用statement执行SQL语句\n  int count = statement.executeUpdate(sql);    // 5.输出影响的行数\n  System.out.println(\"改变的行数\" + count);\n  } catch (SQLException e) {\n            e.printStackTrace();\n  }finally {\n            // 6.关闭所有的资源\n  JdbcUtil.closeConnection(connection, statement);\n  }\n    }\n\n    /**\n * 使用statement查询数据库中数据并返回结果集set\n */  @Test\n  public void testSelect(){\n        // 1.连接数据库\n  Connection connection = JdbcUtil.getConnection();    Statement statement = null;\n  // 查询语句返回的结果集对象\n  ResultSet set = null;\n try {\n            // 2.获取到statement\n  statement = connection.createStatement();    // 3.准备SQL语句\n  String sql = \"select * from person\";    // 4.通过statement执行SQL语句, 获得查询结果集\n  set = statement.executeQuery(sql);    // 5.输出影响的行数\n  while(set.next()){\n                int id = set.getInt(\"id\");\n  String name = set.getString(\"name\");\n  String gender = set.getString(\"gender\");\n  BigDecimal score = set.getBigDecimal(\"score\");\n  String home = set.getString(\"home\");\n  String hobby = set.getString(\"hobby\");    System.out.println(\"id :\" + id + \" name :\" + name + \" gender :\" + gender +\n                        \" socore :\" + score + \" home :\" + home + \" hobby :\" + hobby);      }\n        } catch (SQLException e) {\n            e.printStackTrace();\n  }finally {\n            JdbcUtil.closeConnectionWithResult(connection, statement, set);\n  }\n    }\n\n}\n"]],[6620,11049],[6620,6620]]],[1564657630197,["GJX@GJXAIOU",[[1,6620,"package jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n/**使用JdbcUtil工具类创建并操作数据表\n * @author GJXAIOU\n * @create 2019-08-01-16:07\n */\npublic class JdbcRealizationTest {\n\n    /**\n     * 通过JDBC创建数据表\n     */\n    @Test\n    public void createTable()  {\n        // 1.通过已经封装好的JdbcUtil工具类，获取数据库的连接对象\n        Connection connection = JdbcUtil.getConnection();\n\n        try {\n            // 2.获取Statement，即SQL语句的运输者，作用是将SQL语句运输到MySQL中，让MySQL运行\n            Statement statement = connection.createStatement();\n\n            // 3.准备好SQL语句，语句最后不用分号\n            String sql = \"create table person(\" +\n                    \"  id   tinyint  not null  primary key  auto_increment,\" +\n                    \"  name  char(5) not null,\" +\n                    \"  gender  char(1),\" +\n                    \"  score  decimal(4, 2),\" +\n                    \"  home  enum(\\\"江苏\\\", \\\"上海\\\", \\\"杭州\\\", \\\"苏州\\\"),\" +\n                    \"  hobby  set(\\\"游泳\\\", \\\"打球\\\", \\\"跑步\\\"))\";\n\n            // 4.通过statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.查看创建的结果\n            System.out.println(\"影响的行数\" + count);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 使用statement执行DML语句-- insert into\n     */\n    @Test\n    public void testInsert(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到Statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql1 = \"insert into person(name, gender, score, home, hobby) values(\\\"张三\\\", \\\"男\\\", 98.23, 2, 3)\";\n            String sql2 = \"insert into person(name, gender, score, home, hobby) values(\\\"李四五\\\", \\\"女\\\",99.00,\\\"江苏\\\", \\\"游泳,打球\\\")\";\n\n            // 4.通过statement执行SQL语句\n            int count1 = statement.executeUpdate(sql1);\n            int count2 = statement.executeUpdate(sql2);\n\n            // 5.打印影响的行数\n            System.out.println(\"改变的行数：\" + (count1 + count2));\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源:connection 是连接数据库的资源，statement是引用程序到MySQL之间的SQL语句运输者，都是资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    @Test\n    /**\n     * 使用statement删除数据库中一条数据\n     */\n    public void testDelete() {\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"delete from person where id = 1\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数：\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement修改数据库中一条数据\n     */\n    public void testUpdate(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"update person set name = '李四' where id = 2\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有的资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement查询数据库中数据并返回结果集set\n     */\n    @Test\n    public void testSelect(){\n        // 1.连接数据库\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        // 查询语句返回的结果集对象\n        ResultSet set = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"select * from person\";\n\n            // 4.通过statement执行SQL语句, 获得查询结果集\n            set = statement.executeQuery(sql);\n\n            // 5.输出影响的行数\n            while(set.next()){\n                int id = set.getInt(\"id\");\n                String name = set.getString(\"name\");\n                String gender = set.getString(\"gender\");\n                BigDecimal score = set.getBigDecimal(\"score\");\n                String home = set.getString(\"home\");\n                String hobby = set.getString(\"hobby\");\n\n                System.out.println(\"id :\" + id + \" name :\" + name + \" gender :\" + gender +\n                        \" socore :\" + score + \" home :\" + home + \" hobby :\" + hobby);\n\n\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, statement, set);\n        }\n    }\n\n\n}\n"]],[6620,6620],[11788,11788]]],[1564657937275,["GJX@GJXAIOU",[[-1,4001,"DBC"]],[4004,4004],[4001,4001]]],[1564657939858,["GJX@GJXAIOU",[[1,4001,"dbc"]],[4001,4001],[4004,4004]]],[1564657946308,["GJX@GJXAIOU",[[-1,4319,"自定义JDBC工具类 \n \t\t1. 加载驱动\n \t\t2. 获取连接对象\n \t\t3. 关闭连接 \n \t\n \t把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件"]],[4319,4413],[4319,4319]]],[1564657948937,["GJX@GJXAIOU",[[1,4027,"\n"]],[4026,4026],[4027,4027]]],[1564657949561,["GJX@GJXAIOU",[[1,4027,"自定义JDBC工具类 \n \t\t1. 加载驱动\n \t\t2. 获取连接对象\n \t\t3. 关闭连接 \n \t\n \t把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件"]],[4027,4027],[4121,4121]]],[1564657952329,["GJX@GJXAIOU",[[1,4027,"\n"]],[4027,4027],[4028,4028]]],[1564657953466,["GJX@GJXAIOU",[[1,4028,"- "]],[4028,4028],[4030,4030]]],[1564657957312,["GJX@GJXAIOU",[[-1,4042," \t\t"],[-1,4053," \t\t"],[-1,4066," \t\t"]],[4045,4077],[4045,4077]]],[1564657962440,["GJX@GJXAIOU",[[-1,4073,"\t"]],[4074,4074],[4073,4073]]],[1564658060686,["GJX@GJXAIOU",[[1,6593,"j "]],[6593,6593],[6594,6594]]],[1564658070276,["GJX@GJXAIOU",[[1,6594,"dbcRealizationR"]],[6594,6594],[6609,6609]]],[1564658070824,["GJX@GJXAIOU",[[-1,6608,"R"]],[6609,6609],[6608,6608]]],[1564658073510,["GJX@GJXAIOU",[[1,6608,"Test.java"]],[6608,6608],[6617,6617]]],[1564658074226,["GJX@GJXAIOU",[[1,6617,"\n"]],[6617,6617],[6618,6618]]],[1564658084371,["GJX@GJXAIOU",[[-1,4123,"package b_utils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Properties;\n\n/*\n \t\n */\n\npublic class JDBCUtil {\n\tprivate static String url = null;\n\tprivate static String user = null;\n\tprivate static String password = null;\n\tprivate static String driverClass = null;\n\tprivate static InputStream in = null;\n\t\n\t//利用静态代码块的特征，在类文件加载到内存的时候，就会执行在静态代码块里面的代码\n\tstatic {\n\t\ttry {\n\t\t\t//1. 读取配置文件信息 读取properties文件\n\t\t\tProperties props = new Properties();\n\t\t\t\n\t\t\t//如果一个properties文件加载到内存中，需要借助于IO流\n\t\t\tin = new FileInputStream(\"./src/db.properties\");\n\t\t\t\n\t\t\t//2. 利用Properties里面的load方法加载文件\n\t\t\tprops.load(in);\n\t\t\t\n\t\t\t//3. 可以通过Properties类对象，获取到想要的数据\n\t\t\turl = props.getProperty(\"url\");\n\t\t\tuser = props.getProperty(\"user\");\n\t\t\tpassword = props.getProperty(\"password\");\n\t\t\tdriverClass = props.getProperty(\"driver\");\n\t\t\t\n\t\t\t//4. 加载类文件\n\t\t\tClass.forName(driverClass);\n\t\t} catch (IOException | ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"驱动加载失败\");\n\t\t} finally {\n\t\t\t//关闭文件连接\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取数据库连接对象\n\t * @return\n\t */\n\tpublic static Connection getConnection() {\n\t\tConnection conn = null;\n\t\t\n\t\ttry {\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\t\n\t\treturn conn;\n\t}\n\t\n\t/**\n\t * 关闭数据库连接，释放Statement\n\t * @param conn 数据库连接对象\n\t * @param st Statement对象\n\t */\n\tpublic static void close(Connection conn, Statement st) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t/**\n\t * 关闭带有结果集的查询语句资源\n\t * @param conn\n\t * @param st\n\t * @param set\n\t */\n\tpublic static void close(Connection conn, Statement st, ResultSet set) {\n\t\ttry {\n\t\t\tif (st != null) {\n\t\t\t\tst.close();\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t\tif (set != null) {\n\t\t\t\tset.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t\t//糖衣炮弹\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}"]],[4123,6585],[4123,4123]]],[1564658091625,["GJX@GJXAIOU",[[1,4123,"package jdbc.connection;\n\n\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**实现数据库连接和资源关闭操作\n * @author GJXAIOU\n * @create 2019-08-01-15:16\n */\npublic class JdbcUtil {\n   private static String url = null;\n   private static String user = null;\n   private static String password = null;\n   private static String driver = null;\n   private static InputStream inputStream = null;\n\n   // 这里利用静态代码块的特征，在类文件加载到内存的时候，\n   // 就会执行在静态代码块中的代码\n    static {\n       // 1.读取配置文件信息，即读取properties文件\n       Properties properties = new Properties();\n       // 如果一个properties文件加载到内存中，需要借助IO流；\n       try {\n           inputStream = new FileInputStream(\n                   \"E:\\\\Program\\\\Java\\\\Project\\\\VideoClass\\\\JavaEEDay34\" +\n                           \"\\\\src\\\\jdbc\\\\connection\\\\db.properties\");\n       } catch (FileNotFoundException e) {\n           e.printStackTrace();\n       }\n\n       // 2.利用properties里面的load方法\n       try {\n           properties.load(inputStream);\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n       // 3.可以通过properties类对象，获取想要的数据\n       url = properties.getProperty(\"url\");\n       user = properties.getProperty(\"user\");\n       password = properties.getProperty(\"password\");\n       driver = properties.getProperty(\"driver\");\n\n       // 4.加载类文件\n       try {\n           Class.forName(driver);\n       } catch (ClassNotFoundException e) {\n           e.printStackTrace();\n           System.out.println(\"驱动加载失败\");\n       }finally {\n           // 关闭文件连接\n           if (inputStream != null){\n               try {\n                   inputStream.close();\n               } catch (IOException e) {\n                   e.printStackTrace();\n               }\n           }\n       }\n   }\n\n\n    /**\n     * 获取数据库连接对象\n     * @return Connection对象\n     */\n   public static Connection getConnection(){\n       Connection connection = null;\n       try {\n           connection = DriverManager.getConnection(url, user, password);\n       } catch (SQLException e) {\n           e.printStackTrace();\n       }\n\n       return  connection;\n   }\n\n    /**\n     * 关闭数据库连接，释放statement\n     * @param connection 数据库连接对象\n     * @param statement statement对象\n     */\n    public static void closeConnection(Connection connection, Statement statement){\n\n        try {\n            if (statement != null){\n                statement.close();\n            }\n\n            if (connection != null){\n            connection.close();\n            }\n        }catch (SQLException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 关闭带有结果集的查询语句资源\n     * @param connection 数据库连接对象\n     * @param statement statement 对象\n     * @param set 结果集\n     */\n    public static void closeConnectionWithResult(Connection connection, Statement statement, ResultSet set){\n        if (statement != null){\n            try {\n                statement.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (connection != null){\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (set != null){\n            try {\n                set.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n\n}\n"]],[4123,4123],[7640,7640]]],[1564658093520,["GJX@GJXAIOU",[[-1,4150,"\n"]],[4150,4150],[4149,4149]]],[1564658093760,["GJX@GJXAIOU",[[-1,4149,"\n"]],[4149,4149],[4148,4148]]],[1564658102401,["GJX@GJXAIOU",[[-1,7645,"\n"]],[7645,7645],[7644,7644]]],[1564658117657,["GJX@GJXAIOU",[[1,3888,"r"],[1,3901,"cj."],[-1,3912,"\n"],[1,3913," "],[-1,3947,"hello?useSSL = true\n"],[1,3967,"day34jdbc?serverTimezone = GMT%2B8 "],[-1,3978,"\n"],[1,3979," "],[-1,3990,"12345"],[1,3995,"GJXAIOU"]],[3883,3995],[4016,4016]]],[1564658121329,["GJX@GJXAIOU",[[1,3986,"\n"]],[3986,3986],[3987,3987]]],[1564658125840,["GJX@GJXAIOU",[[1,3917,"\n"]],[3917,3917],[3918,3918]]],[1564658129161,["GJX@GJXAIOU",[[1,4000,"\n"]],[4000,4000],[4001,4001]]],[1564658170301,["GJX@GJXAIOU",[[1,14167,"shiyong"]],[14167,14167],[14174,14174]]],[1564658171634,["GJX@GJXAIOU",[[-1,14167,"shiyong"]],[14174,14174],[14167,14167]]],[1564658172856,["GJX@GJXAIOU",[[1,14167,"使用 "]],[14167,14167],[14169,14169]]],[1564660624961,["GJX@GJXAIOU",[[-1,14209,"package c_preparedstatement;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport org.junit.Test;\n\n\nimport b_utils.JDBCUtil;\n\npublic class Demo1 {\n\t\n\t//private String name = \"Tom\";\n\t//private String password = \"123456\";\n\tprivate String name = \"Tomfdajkjfdkajfkdlfdsafdsa' or 1=1 --\";\n\tprivate String password = \"23456\";\n\t\n\t@Test\n\t//这里没有进行预处理，不能防止SQL注入\n\tpublic void testLoginUserStatement() {\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\tStatement st = null;\n\t\t\n\t\ttry {\n\t\t\t//1. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t//2. 获取Statement\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\t//3. 准备SQL语句\n\t\t\t//SQL注入，如果说用户在输入 信息的时候，偶然间了解到了你的SQL规则\n\t\t\tString sql = \"select * from user where name='\" + name +\n\t\t\t\t\t\"' and password='\" + password + \"'\";\n\t\t\tSystem.out.println(sql);\n\t\t\t//4. 使用Statement执行SQL语句\n\t\t\tset = st.executeQuery(sql);\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, st, set);\n\t\t}\n\t}\n\n\n\n\n\t/**\n\t * PreparedStatement 可以有效防止SQL注入，因为在获取PreparedStatment时，已经对SQL语句\n\t * 进行了预处理操作\n\t */\n\t@Test\n\tpublic void testLoginUserPreparedStatement() {\n\t\tPreparedStatement ps = null;\n\t\tConnection conn = null;\n\t\tResultSet set = null;\n\t\t\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 准备预处理SQL语句\n\t\t\tString sql = \"select * from user where name=? and password=?\"; //?是数据占位符\n\t\t\t\n\t\t\t//3. 获取PreparedStatement对象,传入的参数就是预处理的SQL语句\n\t\t\tps = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//4. 准备参数\n\t\t\tps.setString(1, name);\n\t\t\tps.setString(2, password);\n\t\t\t\n\t\t\t//5. 执行预处理之后的SQL语句\n\t\t\tset = ps.executeQuery();\n\t\t\t\n\t\t\tif (set.next()) {\n\t\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, set);\n\t\t}\n\t}\n}"]],[14209,16185],[14209,14209]]],[1564660631977,["GJX@GJXAIOU",[[1,14209,"package jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\n\n/**使用preparedStatement防止SQL注入，因为在获取preparedStatement时候，已经对SQL语句进行了预处理\n * @author GJXAIOU\n * @create 2019-08-01-19:19\n */\npublic class PreparedStatementTest {\n    @Test\n    public void loginInTest(){\n        // 1.建立连接\n        Connection connection = null;\n        connection= JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句，其中？为占位符，且顺序从1开始\n        String sql = \"select * from person where id = ? and name = ?\";\n\n        // 3.获取preparedStatement对象\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 4.准备参数\n        try {\n            preparedStatement.setInt(1,2);\n            preparedStatement.setString(2,\"李四五\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 5.准备接收查询结果\n        ResultSet set = null;\n        try {\n            set = preparedStatement.executeQuery();\n            System.out.println(set);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 6.判断输入的参数在数据表中有没有\n        try {\n            if (set.next()){\n                System.out.println(\"登录成功\");\n            }else{\n                System.out.println(\"登录失败\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n\n    }\n\n\n}\n"]],[14209,14209],[15774,15774]]],[1564660637359,["GJX@GJXAIOU",[[-1,15771,"\n"]],[15771,15771],[15770,15770]]],[1564660637911,["GJX@GJXAIOU",[[-1,15770,"\n"]],[15770,15770],[15769,15769]]],[1564660640384,["GJX@GJXAIOU",[[-1,15763,"\n"]],[15763,15763],[15762,15762]]],[1564660643256,["GJX@GJXAIOU",[[1,15796,"\n"]],[15775,15775],[15776,15776]]],[1564660648508,["GJX@GJXAIOU",[[1,15776,"程序输出的结果："]],[15776,15776],[15784,15784]]],[1564660648864,["GJX@GJXAIOU",[[1,15805,"\n"]],[15784,15784],[15785,15785]]],[1564660650214,["GJX@GJXAIOU",[[-1,15805,"\n"]],[15785,15785],[15784,15784]]],[1564660651267,["GJX@GJXAIOU",[[1,15784,"``"]],[15784,15784],[15786,15786]]],[1564660661715,["GJX@GJXAIOU",[[1,15784,"\n"]],[15784,15784],[15785,15785]]],[1564660664119,["GJX@GJXAIOU",[[1,15786,"com.mysql.cj.jdbc.result.ResultSetImpl@23529fee\n登录成功"]],[15786,15786],[15838,15838]]],[1564660667621,["GJX@GJXAIOU",[[1,15834,"`"]],[15834,15834],[15835,15835]]],[1564660671786,["GJX@GJXAIOU",[[1,15833,"`"]],[15833,15833],[15834,15834]]],[1564660680016,["GJX@GJXAIOU",[[1,15862,"\n"]],[15841,15841],[15842,15842]]],[1564660681068,["GJX@GJXAIOU",[[1,15842,"ci"]],[15842,15842],[15844,15844]]],[1564660681677,["GJX@GJXAIOU",[[-1,15842,"ci"]],[15844,15844],[15842,15842]]],[1564660690244,["GJX@GJXAIOU",[[1,15842,"此时对应的数据库总"]],[15842,15842],[15851,15851]]],[1564660691790,["GJX@GJXAIOU",[[-1,15850,"总"]],[15851,15851],[15850,15850]]],[1564660694180,["GJX@GJXAIOU",[[1,15850,"中数据为："]],[15850,15850],[15855,15855]]],[1564660694558,["GJX@GJXAIOU",[[1,15876,"\n"]],[15855,15855],[15856,15856]]],[1564660774946,["GJX@GJXAIOU",[[1,15856,"```"]],[15856,15856],[15859,15859]]],[1564660774990,["GJX@GJXAIOU",[[1,15859,"language\n```\n"]],[15859,15859],[15859,15867]]],[1564660776657,["GJX@GJXAIOU",[[-1,15859,"language"],[1,15867,"s"]],[15859,15867],[15860,15860]]],[1564660776970,["GJX@GJXAIOU",[[1,15860,"ql"]],[15860,15860],[15862,15862]]],[1564660777377,["GJX@GJXAIOU",[[1,15863,"\n"]],[15862,15862],[15863,15863]]],[1564660778759,["GJX@GJXAIOU",[[1,15863,"mysql> select * from person;\n+----+-----------+--------+-------+--------+---------------+\n| id | name      | gender | score | home   | hobby         |\n+----+-----------+--------+-------+--------+---------------+\n|  2 | 李四五    | 女     | 99.00 | 江苏   | 游泳,打球     |\n+----+-----------+--------+-------+--------+---------------+"]],[15863,15863],[16186,16186]]],[1564660811814,["GJX@GJXAIOU",[[1,23,"\n"]],[22,22],[23,23]]],[1564660811961,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1564660820758,["GJX@GJXAIOU",[[1,24,"# we"]],[24,24],[28,28]]],[1564660821431,["GJX@GJXAIOU",[[-1,25," we"]],[28,28],[25,25]]],[1564660831208,["GJX@GJXAIOU",[[1,25," 笔记总结：2019-8-1"]],[25,25],[39,39]]],[1564660831567,["GJX@GJXAIOU",[[1,40,"\n"]],[39,39],[40,40]]],[1564660841818,["GJX@GJXAIOU",[[1,40,"首先是用户管理，即"]],[40,40],[49,49]]],[1564660859562,["GJX@GJXAIOU",[[1,49,"新建用户和"]],[49,49],[54,54]]],[1564660860558,["GJX@GJXAIOU",[[-1,53,"和"]],[54,54],[53,53]]],[1564660870218,["GJX@GJXAIOU",[[1,53,"并授予权限以及删除用户；"]],[53,53],[65,65]]],[1564660870455,["GJX@GJXAIOU",[[1,66,"\n"]],[65,65],[66,66]]],[1564660882571,["GJX@GJXAIOU",[[1,66,"然后介绍事务；"]],[66,66],[73,73]]],[1564660885455,["GJX@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1564660902379,["GJX@GJXAIOU",[[1,74,"接着介绍数据库数据扫入"]],[74,74],[85,85]]],[1564660903497,["GJX@GJXAIOU",[[-1,83,"扫入"]],[85,85],[83,83]]],[1564660912224,["GJX@GJXAIOU",[[1,83,"导入和导出的方法"]],[83,83],[91,91]]],[1564660912599,["GJX@GJXAIOU",[[1,92,"\n"]],[91,91],[92,92]]],[1564660913270,["GJX@GJXAIOU",[[-1,92,"\n"]],[92,92],[91,91]]],[1564660913953,["GJX@GJXAIOU",[[1,91,"；"]],[91,91],[92,92]]],[1564660914175,["GJX@GJXAIOU",[[1,93,"\n"]],[92,92],[93,93]]],[1564660915556,["GJX@GJXAIOU",[[1,93,"最后"]],[93,93],[95,95]]],[1564660916370,["GJX@GJXAIOU",[[1,96,"\n"]],[95,95],[96,96]]],[1564660916494,["GJX@GJXAIOU",[[1,97,"\n"]],[96,96],[97,97]]],[1564660916618,["GJX@GJXAIOU",[[1,98,"\n"]],[97,97],[98,98]]],[1564660916737,["GJX@GJXAIOU",[[1,99,"\n"]],[98,98],[99,99]]],[1564660916865,["GJX@GJXAIOU",[[1,100,"\n"]],[99,99],[100,100]]],[1564661080873,["GJX@GJXAIOU",[[1,95,"介绍使用Java"]],[95,95],[103,103]]],[1564661080916,["GJX@GJXAIOU",[[1,99," "]],[103,103],[104,104]]],[1564661082308,["GJX@GJXAIOU",[[1,104,"连接"]],[104,104],[106,106]]],[1564661082350,["GJX@GJXAIOU",[[1,104," "]],[106,106],[107,107]]],[1564661084107,["GJX@GJXAIOU",[[1,107,"数据库；"]],[107,107],[111,111]]],[1564661100457,["GJX@GJXAIOU",[[1,112,"- 第一个代码是连接数据库的方式一；"]],[112,112],[130,130]]],[1564661100696,["GJX@GJXAIOU",[[1,136,"\n"]],[130,130],[131,131]]],[1564661110235,["GJX@GJXAIOU",[[1,131,"- 第二个带吗是连接数据看"]],[131,131],[144,144]]],[1564661110871,["GJX@GJXAIOU",[[-1,143,"看"]],[144,144],[143,143]]],[1564661115721,["GJX@GJXAIOU",[[1,143,"库的方式二："]],[143,143],[149,149]]],[1564661115959,["GJX@GJXAIOU",[[1,150,"- \n"]],[149,149],[152,152]]],[1564661121739,["GJX@GJXAIOU",[[1,152,"下面的代码是"]],[152,152],[158,158]]],[1564661124207,["GJX@GJXAIOU",[[-1,136,"带吗"]],[138,138],[136,136]]],[1564661127082,["GJX@GJXAIOU",[[1,136,"代码"]],[136,136],[138,138]]],[1564661130442,["GJX@GJXAIOU",[[1,141,"和"]],[141,141],[142,142]]],[1564661131246,["GJX@GJXAIOU",[[-1,141,"和"]],[142,142],[141,141]]],[1564661136169,["GJX@GJXAIOU",[[1,144,"和释放资源"]],[144,144],[149,149]]],[1564661144524,["GJX@GJXAIOU",[[1,163,"基于第二种"]],[163,163],[168,168]]],[1564661204642,[null,[[1,172,"\n\n"],[-1,173,"\n"]],[172,172],[173,173]]],[1564661204642,[null,[[-1,172,"\n\n"],[1,175,"\n"]],[173,173],[172,172]]],[1564661155818,["GJX@GJXAIOU",[[1,168,"连接数据库的方式进行增删改查操作者"]],[168,168],[185,185]]],[1564661156669,["GJX@GJXAIOU",[[-1,182,"操作者"]],[185,185],[182,182]]],[1564661159418,["GJX@GJXAIOU",[[1,182,"操作；"]],[182,182],[185,185]]],[1564661159633,["GJX@GJXAIOU",[[1,186,"- \n"]],[185,185],[188,188]]],[1564661164063,["GJX@GJXAIOU",[[-1,186,"- "]],[188,188],[186,186]]],[1564661169378,["GJX@GJXAIOU",[[1,186,"最最后节"]],[186,186],[190,190]]],[1564661170702,["GJX@GJXAIOU",[[-1,189,"节"]],[190,190],[189,189]]],[1564661173218,["GJX@GJXAIOU",[[1,189,"介绍了一个"]],[189,189],[194,194]]],[1564661174447,["GJX@GJXAIOU",[[-1,193,"个"]],[194,194],[193,193]]],[1564661180834,["GJX@GJXAIOU",[[1,193,"种防止SQL"]],[193,193],[199,199]]],[1564661180877,["GJX@GJXAIOU",[[1,196," "]],[199,199],[200,200]]],[1564661182002,["GJX@GJXAIOU",[[1,200,"主语"]],[200,200],[202,202]]],[1564661182044,["GJX@GJXAIOU",[[1,200," "]],[202,202],[203,203]]],[1564661182307,["GJX@GJXAIOU",[[1,203,"的"]],[203,203],[204,204]]],[1564661183069,["GJX@GJXAIOU",[[-1,201,"主语的"]],[204,204],[201,201]]],[1564661198985,["GJX@GJXAIOU",[[1,201,"注入的方式：PreparedStare"]],[201,201],[220,220]]],[1564661199831,["GJX@GJXAIOU",[[-1,218,"re"]],[220,220],[218,218]]],[1564661200801,["GJX@GJXAIOU",[[1,218,"tement"]],[218,218],[224,224]]],[1564668944912,[null,[[1,228,"\n\n"],[-1,229,"\n"]],[228,228],[229,229]]],[1564668944912,[null,[[-1,228,"\n\n"],[1,231,"\n"]],[229,229],[228,228]]],[1564668940589,["GJX@GJXAIOU",[[1,13239,"\n"]],[13237,13237],[13238,13238]]],[1564668940742,["GJX@GJXAIOU",[[1,13240,"\n"]],[13238,13238],[13239,13239]]],[1564668942284,["GJX@GJXAIOU",[[1,13239,"****"]],[13239,13239],[13241,13241]]],[1564668944639,["GJX@GJXAIOU",[[1,13241,"上面"]],[13241,13241],[13243,13243]]],[1564669002827,[null,[[1,228,"\n\n"],[-1,229,"\n"],[-1,13238,"#"],[1,13247,"#"]],[228,228],[13248,13248]]],[1564669002827,[null,[[-1,228,"\n\n"],[1,231,"\n"],[1,13239,"#"],[-1,13247,"#"]],[13248,13248],[228,228]]],[1564668946174,["GJX@GJXAIOU",[[1,13243,"的s"]],[13243,13243],[13245,13245]]],[1564668946218,["GJX@GJXAIOU",[[1,13244," "]],[13245,13245],[13246,13246]]],[1564668948175,["GJX@GJXAIOU",[[1,13246,"et.net"]],[13246,13246],[13252,13252]]],[1564668948891,["GJX@GJXAIOU",[[-1,13251,"t"]],[13252,13252],[13251,13251]]],[1564668957375,["GJX@GJXAIOU",[[1,13251,"xt()方法使用说明："]],[13251,13251],[13262,13262]]],[1564668965873,["GJX@GJXAIOU",[[1,13264," 该n"]],[13264,13264],[13267,13267]]],[1564668965916,["GJX@GJXAIOU",[[1,13266," "]],[13267,13267],[13268,13268]]],[1564668967302,["GJX@GJXAIOU",[[1,13268,"esxx"]],[13268,13268],[13272,13272]]],[1564668968379,["GJX@GJXAIOU",[[-1,13269,"sxx"]],[13272,13272],[13269,13269]]],[1564668970840,["GJX@GJXAIOU",[[1,13269,"xt（）"]],[13269,13269],[13273,13273]]],[1564668971579,["GJX@GJXAIOU",[[-1,13271,"（）"]],[13273,13273],[13271,13271]]],[1564668981489,["GJX@GJXAIOU",[[1,13271,"()方法属于Restlt"]],[13271,13271],[13283,13283]]],[1564668981532,["GJX@GJXAIOU",[[1,13277," "]],[13283,13283],[13284,13284]]],[1564668986090,["GJX@GJXAIOU",[[1,13284,"Set中"]],[13284,13284],[13288,13288]]],[1564668986133,["GJX@GJXAIOU",[[1,13287," "]],[13288,13288],[13289,13289]]],[1564668986758,["GJX@GJXAIOU",[[1,13291,"\n"]],[13289,13289],[13290,13290]]],[1564668988518,["GJX@GJXAIOU",[[1,13290,"```"]],[13290,13290],[13293,13293]]],[1564668990558,["GJX@GJXAIOU",[[1,13295,"\n"]],[13293,13293],[13294,13294]]],[1564668990668,["GJX@GJXAIOU",[[1,13296,"\n"]],[13294,13294],[13295,13295]]],[1564668990801,["GJX@GJXAIOU",[[1,13297,"\n"]],[13295,13295],[13296,13296]]],[1564668990909,["GJX@GJXAIOU",[[1,13298,"\n"]],[13296,13296],[13297,13297]]],[1564668991034,["GJX@GJXAIOU",[[1,13299,"\n"]],[13297,13297],[13298,13298]]],[1564668991702,["GJX@GJXAIOU",[[1,13298,"```"]],[13298,13298],[13301,13301]]],[1564668993717,["GJX@GJXAIOU",[[1,13294,"boolean next()\n      throws [SQLException](../../java/sql/SQLException.html \"class in java.sql\")\n\n将光标从当前位置向前移动一行。 `ResultSet`光标最初位于第一行之前; 第一次调用方法`next`使第一行成为当前行; 第二个调用使第二行成为当前行，依此类推。\n\n当调用`next`方法返回`false`时，光标位于最后一行之后。 任何调用需要当前行的`ResultSet`方法将导致抛出`SQLException` 。 如果结果集类型为`TYPE_FORWARD_ONLY` ，这是他们指定的JDBC驱动程序实现是否会返回供应商`false`或抛出一个`SQLException`上的后续调用`next` 。\n\n如果当前行的输入流已打开，则对方法`next`的调用将隐式关闭它。 当读取新行时， `ResultSet`对象的警告链将被清除。\n\n结果\n\n`true`如果新的当前行有效; `false`如果没有更多的行\n\n异常\n\n`[SQLException](../../java/sql/SQLException.html \"class in java.sql\")` - 如果发生数据库访问错误，或者在关闭的结果集上调用此方法"]],[13294,13294],[13861,13861]]]],null,"GJX@GJXAIOU"],["9a31514a-c0eb-47bf-8f10-fe79e1acd020",1564704449287,"# JavaEEDay34数据库\n\n@toc\n\n# 笔记总结：2019-8-1\n首先是用户管理，即新建用户并授予权限以及删除用户；\n然后介绍事务；\n接着介绍数据库数据导入和导出的方法；\n最后介绍使用 Java 连接数据库；\n- 第一个代码是连接数据库的方式一；\n- 第二个代码是连接数据库和释放资源的方式二：\n- 下面的代码是基于第二种连接数据库的方式进行增删改查操作；\n最最后介绍了一种防止 SQL 注入的方式：PreparedStatement\n\n\n\n\n\n## 一、DCL 操作：\n一般是项目经理或者 DBA 进行管理；\n即管理用户：创建用户，给予用户操作数据的权限；\n\n\n## 二、用户管理：\n\n- 创建一个用户，用户名为 zhangsan 所在数据库的主机地址为 localhost，初始化密码：12345:\n`create user \"zhangsan\"@\"localhost\" identified by \"12345\";`\n- 授予新用户权限，上面的 localhost 也可以是一个 IP 地址；\n`grant all on hello.* to \"zhangsan\" @\"localhost\";` //将 hello 数据库赋值权限给 zhangsan;\n- 刷新权限：`flush privileges;` 至此完成新用户管理；\n- 取消授权：`revoke all on hello.* from \"zhangsan\" @ \"localhost\";`\n- 删除用户：`drop user \"zhangsan\" @ \"localhost\";`\n\n\n\n## 三、 DTL 事务处理\n当出现操作错误的时候，给予回退的机会；\n\n- 以银行转账为例，首先创建数据表：\n```sql\ncreate table bank(\n  userID tinyint not null primary key auto_increment,\n  money double(15,2),\n  name varchar(30)\n);\n```\n- 插入部分数据，用于测试：\n```sql\ninsert into bank(money,name) values(66,\"zhangsan\");\ninsert into bank(money,name) values(11,\"lisi\");\n```\n- 开启事务：一共两种方式：开始事务是将这个表加载在内存中进行处理，没有改变原来结构\n  - 方式一：`start transaction;`\n  - 方式二：`set autocommit = 0;`\n```sql\nstart transaction;\n```\n- 然后开始进行操作：\n```sql\nupdate bank set money = money - 55 where userID = 1;\nupdate bank set money = money + 55 where userID = 2;\n```\n- 操作完成之后，两种确认方式：\n  - 回滚，即操作中出现了异常，可以回滚到开始事务之前；命令为：`rollback;`\n  - 提交，即确认操作无误，提交开始事务之后的所有操作；命令为：`commit;`\n\n\n## 四、数据库导入导出\n使用命令行导入导出数据库，必须是没有登录数据库的状态下；\n\n\n### （一）导出数据库：\n导出的是一个.sql 文件，里面包含了所有的数据库操作信息，包括创建数据库和插入数据；\n**在未登录数据库的状态下操作以下语句：**\n`mysqldump -uroot -p hello > hello.sql;` 将 hello 数据库导出保存为 hello.sql 文件；\n**注意：** 导出文件的保存位置为当前操作的命令的文件目录下，可以通过先修改操作命令的目录进行保存位置的修改；\n\n### （二）导入数据库：\n**前提：** 必须在数据库中创建一个数据库用于接收导入的数据库,**然后退出数据库，操作以下语句：**\n`mysql -uroot -p receiveHello < hello.sql;` 将 hello.sql 数据库导入到 receiveHello 数据库中；\n\n\n\n## 五、Java 连接数据库方式  \nJDBC：Java Database Connectivity 操作数据库的规范；\n\nJDBC 主要通过接口实现，组成 JDBC 中两个包：java.sql 和 javax.sql，以上两个包是 JavaSE 中包含的，但是需要导入 JDBC 的实现类才可以使用，该实现类是由第三方数据库提供商完成；\n\nJDBC 主要的接口和类：\n- Driver 接口：连接数据库的驱动 API；\n- DriverManager 类：驱动管理类，负责驱动的注册（加载），获取数据库连接；\n- Statement 接口：负责 SQL 语句的执行；\n  - PreparedStatement 接口：负责 SQL 语句的预处理；\n- ResultSet 接口：处理查询数据库的结果集；\n\n\n### （一）通过 JDBC 连接 MySQL\n\n- 步骤一：确定数据库的 URL；\n  - 例如：`jdbc:mysql://localhost:3306/hello` 协议：子协议：//IP：端口号/数据库名？参数\n    - 协议：JDBC 总协议；\n    - 子协议：目前使用的是连接 MySQL 数据库的协议；\n    - IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    - 端口号：3306 MySQL 默认的端口号，可以修改；\n    - 数据库名：目前连接的操作的数据库是哪一个；\n    - 参数：通常为：`useUnicode = true ` `characterEncoding = utf-8`;\n\n- 步骤二：连接数据库需要用户名和密码：\n\n\n具体的**连接**操作方式：\n- 方式一：直接在代码中写入要操作的数据库以及用户名和密码信息，但是代码不可复用；\n\n其中 Class.forName(\"com.mysql.jdbc.Driver\");\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-01-14:14\n */\npublic class JdbcConnection {\n    @Test\n    public void connection()  {\n        // 1.注册驱动 JDBC 连接MySQL\n        try {\n         Class.forName(\"com.mysql.cj.jdbc.Driver\");\n\n\n        // 2.准备url，是JDBC所要连接MySQL数据库的URL，后面参数为设置时区\n        String url = \"jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8\" ;\n\n        // 3.通过DriverManager连接对象\n        Connection con = null;\n\n        con = DriverManager.getConnection(url, \"root\", \"GJXAIOU\");\n\n\n        System.out.println(con);\n\n        // 4.关闭数据库连接，释放资源\n\n        con.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n程序运行结果：`com.mysql.cj.jdbc.ConnectionImpl@15761df8`\n\n- 方式二：将数据库的具体信息写入：.properties 文件中，然后使用 Java 代码读取文件中信息，更改数据库信息只要在.properties 文件中修改就行；\ndb.properties\n```properties\ndriver = com.mysql.cj.jdbc.Driver \nurl = jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8 \nuser = root \npassword = GJXAIOU\n```\nJdbcUtil.java  数据库连接自定义工具类\n\n- 自定义JDBC工具类 \n1. 加载驱动\n2. 获取连接对象\n3. 关闭连接 \n \t\n 把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件\n```java\npackage jdbc.connection;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**实现数据库连接和资源关闭操作\n * @author GJXAIOU\n * @create 2019-08-01-15:16\n */\npublic class JdbcUtil {\n   private static String url = null;\n   private static String user = null;\n   private static String password = null;\n   private static String driver = null;\n   private static InputStream inputStream = null;\n\n   // 这里利用静态代码块的特征，在类文件加载到内存的时候，\n   // 就会执行在静态代码块中的代码\n    static {\n       // 1.读取配置文件信息，即读取properties文件\n       Properties properties = new Properties();\n       // 如果一个properties文件加载到内存中，需要借助IO流；\n       try {\n           inputStream = new FileInputStream(\n                   \"E:\\\\Program\\\\Java\\\\Project\\\\VideoClass\\\\JavaEEDay34\" +\n                           \"\\\\src\\\\jdbc\\\\connection\\\\db.properties\");\n       } catch (FileNotFoundException e) {\n           e.printStackTrace();\n       }\n\n       // 2.利用properties里面的load方法\n       try {\n           properties.load(inputStream);\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n       // 3.可以通过properties类对象，获取想要的数据\n       url = properties.getProperty(\"url\");\n       user = properties.getProperty(\"user\");\n       password = properties.getProperty(\"password\");\n       driver = properties.getProperty(\"driver\");\n\n       // 4.加载类文件\n       try {\n           Class.forName(driver);\n       } catch (ClassNotFoundException e) {\n           e.printStackTrace();\n           System.out.println(\"驱动加载失败\");\n       }finally {\n           // 关闭文件连接\n           if (inputStream != null){\n               try {\n                   inputStream.close();\n               } catch (IOException e) {\n                   e.printStackTrace();\n               }\n           }\n       }\n   }\n\n\n    /**\n     * 获取数据库连接对象\n     * @return Connection对象\n     */\n   public static Connection getConnection(){\n       Connection connection = null;\n       try {\n           connection = DriverManager.getConnection(url, user, password);\n       } catch (SQLException e) {\n           e.printStackTrace();\n       }\n\n       return  connection;\n   }\n\n    /**\n     * 关闭数据库连接，释放statement\n     * @param connection 数据库连接对象\n     * @param statement statement对象\n     */\n    public static void closeConnection(Connection connection, Statement statement){\n\n        try {\n            if (statement != null){\n                statement.close();\n            }\n\n            if (connection != null){\n            connection.close();\n            }\n        }catch (SQLException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 关闭带有结果集的查询语句资源\n     * @param connection 数据库连接对象\n     * @param statement statement 对象\n     * @param set 结果集\n     */\n    public static void closeConnectionWithResult(Connection connection, Statement statement, ResultSet set){\n        if (statement != null){\n            try {\n                statement.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (connection != null){\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (set != null){\n            try {\n                set.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n\n}\n\n\n```\n\njdbcRealizationTest.java\n 实现常见的增删改查操作：\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n/**使用JdbcUtil工具类创建并操作数据表\n * @author GJXAIOU\n * @create 2019-08-01-16:07\n */\npublic class JdbcRealizationTest {\n\n    /**\n     * 通过JDBC创建数据表\n     */\n    @Test\n    public void createTable()  {\n        // 1.通过已经封装好的JdbcUtil工具类，获取数据库的连接对象\n        Connection connection = JdbcUtil.getConnection();\n\n        try {\n            // 2.获取Statement，即SQL语句的运输者，作用是将SQL语句运输到MySQL中，让MySQL运行\n            Statement statement = connection.createStatement();\n\n            // 3.准备好SQL语句，语句最后不用分号\n            String sql = \"create table person(\" +\n                    \"  id   tinyint  not null  primary key  auto_increment,\" +\n                    \"  name  char(5) not null,\" +\n                    \"  gender  char(1),\" +\n                    \"  score  decimal(4, 2),\" +\n                    \"  home  enum(\\\"江苏\\\", \\\"上海\\\", \\\"杭州\\\", \\\"苏州\\\"),\" +\n                    \"  hobby  set(\\\"游泳\\\", \\\"打球\\\", \\\"跑步\\\"))\";\n\n            // 4.通过statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.查看创建的结果\n            System.out.println(\"影响的行数\" + count);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 使用statement执行DML语句-- insert into\n     */\n    @Test\n    public void testInsert(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到Statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql1 = \"insert into person(name, gender, score, home, hobby) values(\\\"张三\\\", \\\"男\\\", 98.23, 2, 3)\";\n            String sql2 = \"insert into person(name, gender, score, home, hobby) values(\\\"李四五\\\", \\\"女\\\",99.00,\\\"江苏\\\", \\\"游泳,打球\\\")\";\n\n            // 4.通过statement执行SQL语句\n            int count1 = statement.executeUpdate(sql1);\n            int count2 = statement.executeUpdate(sql2);\n\n            // 5.打印影响的行数\n            System.out.println(\"改变的行数：\" + (count1 + count2));\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源:connection 是连接数据库的资源，statement是引用程序到MySQL之间的SQL语句运输者，都是资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    @Test\n    /**\n     * 使用statement删除数据库中一条数据\n     */\n    public void testDelete() {\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"delete from person where id = 1\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数：\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement修改数据库中一条数据\n     */\n    public void testUpdate(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"update person set name = '李四' where id = 2\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有的资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement查询数据库中数据并返回结果集set\n     */\n    @Test\n    public void testSelect(){\n        // 1.连接数据库\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        // 查询语句返回的结果集对象\n        ResultSet set = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"select * from person\";\n\n            // 4.通过statement执行SQL语句, 获得查询结果集\n            set = statement.executeQuery(sql);\n\n            // 5.输出影响的行数\n            while(set.next()){\n                int id = set.getInt(\"id\");\n                String name = set.getString(\"name\");\n                String gender = set.getString(\"gender\");\n                BigDecimal score = set.getBigDecimal(\"score\");\n                String home = set.getString(\"home\");\n                String hobby = set.getString(\"hobby\");\n\n                System.out.println(\"id :\" + id + \" name :\" + name + \" gender :\" + gender +\n                        \" socore :\" + score + \" home :\" + home + \" hobby :\" + hobby);\n\n\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, statement, set);\n        }\n    }\n\n\n}\n\n```\n第一个 Test 结果：`影响的行数0`\n第二个 Test 结果：`改变的行数：2`\n第三个 Test 结果：`改变的行数：1`\n第四个 Test 结果：`id :2 name :李四五 gender :女 socore :99.00 home :江苏 hobby :游泳,打球`\n\n\n**上面的 set.next()方法使用说明：** 该 next()方法属于 RestltSet 中\n```\nboolean next()\n      throws [SQLException](../../java/sql/SQLException.html \"class in java.sql\")\n\n将光标从当前位置向前移动一行。 `ResultSet`光标最初位于第一行之前; 第一次调用方法`next`使第一行成为当前行; 第二个调用使第二行成为当前行，依此类推。\n\n当调用`next`方法返回`false`时，光标位于最后一行之后。 任何调用需要当前行的`ResultSet`方法将导致抛出`SQLException` 。 如果结果集类型为`TYPE_FORWARD_ONLY` ，这是他们指定的JDBC驱动程序实现是否会返回供应商`false`或抛出一个`SQLException`上的后续调用`next` 。\n\n如果当前行的输入流已打开，则对方法`next`的调用将隐式关闭它。 当读取新行时， `ResultSet`对象的警告链将被清除。\n\n结果\n\n`true`如果新的当前行有效; `false`如果没有更多的行\n\n异常\n\n`[SQLException](../../java/sql/SQLException.html \"class in java.sql\")` - 如果发生数据库访问错误，或者在关闭的结果集上调用此方法\n\n\n\n```\n\n### （二）上面总结：JDBC 核心 API\n- Driver接口：\n  - connect(url, propertie);\n      - url: JDBC连接数据库(目前为 MySQL)URL\n            标准格式为：`jdbc:mysql://localhost:3306/javaee1707?useSSL=true`\n       - propertie：\n            连接数据库的属性，主要包含的是数据库的用户名和密码\n            \n- DriverManager类：是驱动管理类，用于管理【加载/注册】过的驱动程序\n    - registerDriver(driver); 注册驱动程序\n    - Connection    getConnection(url, user, password);返回值是获取一个数据库的连接对象，需要的参数是存在JDBC协议的URL， 数据库用户名 和 密码\n\n- Connection接口：\n    -  Statement   createStament(); 创建一个Statement的实现类对象（因为 Statement 是接口）\n    - PreparedStatement   preparedStatement(String sql); 获取到一个PreparedStatement SQL语句预处理对象\n    -  CallableStatmenet    preparedCall(String sql); 了解\n\n- Statement接口：\n   - int    executeUpdate(String sql); 执行给定的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n   - ResultSet    executeQuery(String sql); 执行给定的SQL语句 DQL 查询语句，返回数据结果集\n\n- PreparedStatement接口：\n    - int    executeUpdate(); 执行预处理的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n    - ResultSet    executeQuery(); 执行预处理的SQL语句 DQL 查询语句，返回数据结果集\n    预处理有利于防止 SQL注入\n\n- ResultSet接口： 查询语句的数据结果集：\n    - boolean    next(); 得到当前数据行，并且光标指向下一个数据行，如果没有数据行，返回false\n    - getXXX(String \"字段名\"); 获取指定数据类型的字段数据\n\n\n使用 PreparedStatement 防止 SQL 注入代码：\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\n\n/**使用preparedStatement防止SQL注入，因为在获取preparedStatement时候，已经对SQL语句进行了预处理\n * @author GJXAIOU\n * @create 2019-08-01-19:19\n */\npublic class PreparedStatementTest {\n    @Test\n    public void loginInTest(){\n        // 1.建立连接\n        Connection connection = null;\n        connection= JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句，其中？为占位符，且顺序从1开始\n        String sql = \"select * from person where id = ? and name = ?\";\n\n        // 3.获取preparedStatement对象\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 4.准备参数\n        try {\n            preparedStatement.setInt(1,2);\n            preparedStatement.setString(2,\"李四五\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 5.准备接收查询结果\n        ResultSet set = null;\n        try {\n            set = preparedStatement.executeQuery();\n            System.out.println(set);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 6.判断输入的参数在数据表中有没有\n        try {\n            if (set.next()){\n                System.out.println(\"登录成功\");\n            }else{\n                System.out.println(\"登录失败\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n    }\n}\n\n```\n程序输出的结果：\n`com.mysql.cj.jdbc.result.ResultSetImpl@23529fee`\n`登录成功`\n此时对应的数据库中数据为：\n```sql\nmysql> select * from person;\n+----+-----------+--------+-------+--------+---------------+\n| id | name      | gender | score | home   | hobby         |\n+----+-----------+--------+-------+--------+---------------+\n|  2 | 李四五    | 女     | 99.00 | 江苏   | 游泳,打球     |\n+----+-----------+--------+-------+--------+---------------+\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1564704414991,["GJX@GJXAIOU",[[-1,2152,"步骤一"],[1,2155,"需要"],[-1,13301," "],[1,13302," "]],[2152,2152],[2154,2154]]],[1564704418266,["GJX@GJXAIOU",[[1,2154,"一"]],[2154,2154],[2155,2155]]],[1564704424102,["GJX@GJXAIOU",[[-1,2462,"步骤二"]],[2463,2465],[2462,2462]]],[1564704425979,["GJX@GJXAIOU",[[1,2462,"需要二"]],[2462,2462],[2465,2465]]],[1564704435928,["GJX@GJXAIOU",[[1,2541,"\n"]],[2540,2540],[2541,2541]]],[1564704436063,["GJX@GJXAIOU",[[1,2542,"\n"]],[2541,2541],[2542,2542]]],[1564704439910,["GJX@GJXAIOU",[[-1,2490,"**"]],[2492,2492],[2490,2490]]],[1564704442294,["GJX@GJXAIOU",[[-1,2486,"**"]],[2488,2488],[2486,2486]]],[1564704446098,["GJX@GJXAIOU",[[1,2536,"  - "]],[2536,2536],[2540,2540]]],[1564704469169,["GJX@GJXAIOU",[[1,2541,"一：通过forClass"]],[2541,2541],[2553,2553]]],[1564704469214,["GJX@GJXAIOU",[[1,2545," "]],[2553,2553],[2554,2554]]],[1564704470725,["GJX@GJXAIOU",[[1,2554,"注册"]],[2554,2554],[2556,2556]]],[1564704470769,["GJX@GJXAIOU",[[1,2554," "]],[2556,2556],[2557,2557]]],[1564704472198,["GJX@GJXAIOU",[[-1,2555,"注册"]],[2557,2557],[2555,2555]]],[1564704474485,["GJX@GJXAIOU",[[1,2555,"注册驱动"]],[2555,2555],[2559,2559]]],[1564704489856,["GJX@GJXAIOU",[[1,2545,"Class"]],[2545,2545],[2550,2550]]],[1564704489902,["GJX@GJXAIOU",[[1,2545," "]],[2550,2550],[2551,2551]]],[1564704490903,["GJX@GJXAIOU",[[1,2551,"."]],[2551,2551],[2552,2552]]],[1564704492966,["GJX@GJXAIOU",[[-1,2552," "]],[2553,2553],[2552,2552]]],[1564704496542,["GJX@GJXAIOU",[[-1,2555,"Class"]],[2560,2560],[2555,2555]]],[1564704507681,["GJX@GJXAIOU",[[1,2555,"Name();"]],[2555,2555],[2562,2562]]],[1564704568249,[null,[[-1,2540,"\n"],[1,2541,"步"],[1,2567,"\n"]],[2540,2540],[2568,2568]]],[1564704568249,[null,[[1,2540,"\n"],[-1,2540,"步"],[-1,2567,"\n"]],[2568,2568],[2540,2540]]],[1564704510024,["GJX@GJXAIOU",[[1,2560,"\""]],[2560,2560],[2561,2561]]],[1564704510069,["GJX@GJXAIOU",[[-1,2560,"\""],[1,2561,"“"]],[2561,2561],[2561,2561]]],[1564704511464,["GJX@GJXAIOU",[[1,2561,"\""]],[2561,2561],[2562,2562]]],[1564704511508,["GJX@GJXAIOU",[[-1,2561,"\""],[1,2562,"”"]],[2562,2562],[2562,2562]]],[1564704515057,["GJX@GJXAIOU",[[1,2561,"com.mu"]],[2561,2561],[2567,2567]]],[1564704515789,["GJX@GJXAIOU",[[-1,2566,"u"]],[2567,2567],[2566,2566]]],[1564704520656,["GJX@GJXAIOU",[[1,2566,"ysql.jdbc.chj"]],[2566,2566],[2579,2579]]],[1564704521621,["GJX@GJXAIOU",[[-1,2577,"hj"]],[2579,2579],[2577,2577]]],[1564704528055,["GJX@GJXAIOU",[[1,2577,"j.Drin"]],[2577,2577],[2583,2583]]],[1564704528910,["GJX@GJXAIOU",[[-1,2582,"n"]],[2583,2583],[2582,2582]]],[1564704529505,["GJX@GJXAIOU",[[1,2582,"ver"]],[2582,2582],[2585,2585]]],[1564704628245,[null,[[-1,2540,"\n"],[1,2541,"步"],[1,2593,"\n"]],[2540,2540],[2594,2594]]],[1564704628245,[null,[[1,2540,"\n"],[-1,2540,"步"],[-1,2593,"\n"]],[2594,2594],[2540,2540]]],[1564704576867,["GJX@GJXAIOU",[[1,2546,"`"]],[2546,2546],[2547,2547]]],[1564704578571,["GJX@GJXAIOU",[[1,2589,"`"]],[2589,2589],[2590,2590]]],[1564704580994,["GJX@GJXAIOU",[[1,2595,";"]],[2595,2595],[2596,2596]]],[1564704581271,["GJX@GJXAIOU",[[1,2597,"  - \n"]],[2596,2596],[2601,2601]]],[1564704582365,["GJX@GJXAIOU",[[1,2601,"bu"]],[2601,2601],[2603,2603]]],[1564704583158,["GJX@GJXAIOU",[[-1,2601,"bu"]],[2603,2603],[2601,2601]]],[1564704589107,["GJX@GJXAIOU",[[1,2601,"步二：准备URL"]],[2601,2601],[2609,2609]]],[1564704589151,["GJX@GJXAIOU",[[1,2606," "]],[2609,2609],[2610,2610]]],[1564704593978,["GJX@GJXAIOU",[[1,2610,"：``"]],[2610,2610],[2613,2613]]],[1564704596961,["GJX@GJXAIOU",[[1,2612,"jdbc."]],[2612,2612],[2617,2617]]],[1564704606829,["GJX@GJXAIOU",[[1,2483,"===="]],[2483,2483],[2485,2485]]],[1564704609419,["GJX@GJXAIOU",[[-1,2485,"=="]],[2487,2487],[2485,2485]]],[1564704612770,["GJX@GJXAIOU",[[1,2495,"=="]],[2495,2495],[2497,2497]]],[1564704748254,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2622,"\n"]],[2544,2544],[2623,2623]]],[1564704748254,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2622,"\n"]],[2623,2623],[2544,2544]]],[1564704708214,["GJX@GJXAIOU",[[-1,2620,"."]],[2621,2621],[2620,2620]]],[1564704719872,["GJX@GJXAIOU",[[1,2620,":mysql://locall"]],[2620,2620],[2635,2635]]],[1564704720254,["GJX@GJXAIOU",[[-1,2634,"l"]],[2635,2635],[2634,2634]]],[1564704729600,["GJX@GJXAIOU",[[1,2634,"host:3306/sh"]],[2634,2634],[2646,2646]]],[1564704730046,["GJX@GJXAIOU",[[-1,2644,"sh"]],[2646,2646],[2644,2644]]],[1564704733378,["GJX@GJXAIOU",[[1,2644,"数据库名"]],[2644,2644],[2648,2648]]],[1564704742246,["GJX@GJXAIOU",[[-1,2629,"localhost"]],[2629,2638],[2629,2629]]],[1564704745281,["GJX@GJXAIOU",[[1,2629,"数据库IP"]],[2629,2629],[2634,2634]]],[1564704808255,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2645,"\n"]],[2544,2544],[2646,2646]]],[1564704808255,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2645,"\n"]],[2646,2646],[2544,2544]]],[1564704763537,["GJX@GJXAIOU",[[1,2644," ？"]],[2644,2644],[2646,2646]]],[1564704766229,["GJX@GJXAIOU",[[-1,2645,"？"]],[2646,2646],[2645,2645]]],[1564704775625,["GJX@GJXAIOU",[[1,2645,"? serverTimezonge"]],[2645,2645],[2662,2662]]],[1564704776087,["GJX@GJXAIOU",[[-1,2660,"ge"]],[2662,2662],[2660,2660]]],[1564704787481,["GJX@GJXAIOU",[[1,2660,"e = GMT%2b8"]],[2660,2660],[2671,2671]]],[1564704790223,["GJX@GJXAIOU",[[-1,2669,"b"]],[2670,2670],[2669,2669]]],[1564704791080,["GJX@GJXAIOU",[[1,2669,"B"]],[2669,2669],[2670,2670]]],[1564704803988,["GJX@GJXAIOU",[[1,2672,";"]],[2672,2672],[2673,2673]]],[1564704804527,["GJX@GJXAIOU",[[1,2674,"  - \n"]],[2673,2673],[2678,2678]]],[1564704806176,["GJX@GJXAIOU",[[1,2678,"bu"]],[2678,2678],[2680,2680]]],[1564704806919,["GJX@GJXAIOU",[[-1,2678,"bu"]],[2680,2680],[2678,2678]]],[1564704808006,["GJX@GJXAIOU",[[1,2678,"步"]],[2678,2678],[2679,2679]]],[1564704868259,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2679,"\n"]],[2544,2544],[2680,2680]]],[1564704868259,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2679,"\n"]],[2680,2680],[2544,2544]]],[1564704829283,["GJX@GJXAIOU",[[1,2679,"三：通过Driver"]],[2679,2679],[2689,2689]]],[1564704829328,["GJX@GJXAIOU",[[1,2683," "]],[2689,2689],[2690,2690]]],[1564704833001,["GJX@GJXAIOU",[[1,2690,"Manager连接"]],[2690,2690],[2699,2699]]],[1564704833047,["GJX@GJXAIOU",[[1,2697," "]],[2699,2699],[2700,2700]]],[1564704845456,["GJX@GJXAIOU",[[1,2700,"对象：即调用：``"]],[2700,2700],[2709,2709]]],[1564704851360,["GJX@GJXAIOU",[[1,2708,"Drivee"]],[2708,2708],[2714,2714]]],[1564704851885,["GJX@GJXAIOU",[[-1,2713,"e"]],[2714,2714],[2713,2713]]],[1564704860909,["GJX@GJXAIOU",[[1,2713,"rManager.connection()"]],[2713,2713],[2734,2734]]],[1564704928257,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2735,"\n"]],[2544,2544],[2736,2736]]],[1564704928257,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2735,"\n"]],[2736,2736],[2544,2544]]],[1564704871481,["GJX@GJXAIOU",[[1,2722,"gr"]],[2722,2722],[2724,2724]]],[1564704872039,["GJX@GJXAIOU",[[-1,2723,"r"]],[2724,2724],[2723,2723]]],[1564704872315,["GJX@GJXAIOU",[[1,2723,"et"]],[2723,2723],[2725,2725]]],[1564704874493,["GJX@GJXAIOU",[[-1,2725,"c"]],[2726,2726],[2725,2725]]],[1564704875488,["GJX@GJXAIOU",[[1,2725,"C"]],[2725,2725],[2726,2726]]],[1564704897273,["GJX@GJXAIOU",[[1,2736,"url, yonhu"]],[2736,2736],[2746,2746]]],[1564704898368,["GJX@GJXAIOU",[[-1,2741,"yonhu"]],[2746,2746],[2741,2741]]],[1564704904244,["GJX@GJXAIOU",[[1,2741,"用户名， 密码"]],[2741,2741],[2748,2748]]],[1564704906594,["GJX@GJXAIOU",[[1,2750,"；"]],[2750,2750],[2751,2751]]],[1564704908400,["GJX@GJXAIOU",[[1,2752,"  - \n"]],[2751,2751],[2756,2756]]],[1564704920723,["GJX@GJXAIOU",[[1,2756,"步四：关闭数据库：conn"]],[2756,2756],[2769,2769]]],[1564704922664,["GJX@GJXAIOU",[[-1,2765,"conn"]],[2769,2769],[2765,2765]]],[1564704988259,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2765,"\n"]],[2544,2544],[2766,2766]]],[1564704988259,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2765,"\n"]],[2766,2766],[2544,2544]]],[1564704933481,["GJX@GJXAIOU",[[1,2765,"连接对象.co"]],[2765,2765],[2772,2772]]],[1564704933992,["GJX@GJXAIOU",[[-1,2771,"o"]],[2772,2772],[2771,2771]]],[1564704936408,["GJX@GJXAIOU",[[1,2771,"lose();"]],[2771,2771],[2778,2778]]],[1564704940427,["GJX@GJXAIOU",[[1,2777,"·"]],[2777,2777],[2778,2778]]],[1564704943526,["GJX@GJXAIOU",[[-1,2777,"·"]],[2778,2778],[2777,2777]]],[1564704944115,["GJX@GJXAIOU",[[1,2777,"`"]],[2777,2777],[2778,2778]]],[1564704946122,["GJX@GJXAIOU",[[1,2765,"`"]],[2765,2765],[2766,2766]]],[1564704950008,["GJX@GJXAIOU",[[1,2781,"  - \n"]],[2780,2780],[2785,2785]]],[1564704950470,["GJX@GJXAIOU",[[-1,2781,"  - "]],[2785,2785],[2782,2782]]],[1564704953709,["GJX@GJXAIOU",[[1,2782,"- fang"]],[2782,2782],[2788,2788]]],[1564704955088,["GJX@GJXAIOU",[[-1,2784,"fang"]],[2788,2788],[2784,2784]]],[1564704957328,["GJX@GJXAIOU",[[1,2784,"方式为："]],[2784,2784],[2788,2788]]],[1564704958071,["GJX@GJXAIOU",[[-1,2785,"式为："]],[2788,2788],[2785,2785]]],[1564704974066,["GJX@GJXAIOU",[[1,2785,"式二：使用.properties文件"]],[2785,2785],[2803,2803]]],[1564704974111,["GJX@GJXAIOU",[[1,2801," "]],[2803,2803],[2804,2804]]],[1564704974814,["GJX@GJXAIOU",[[1,2805,"- \n"]],[2804,2804],[2807,2807]]],[1564704976024,["GJX@GJXAIOU",[[1,2805,"  "]],[2807,2807],[2809,2809]]],[1564704987874,["GJX@GJXAIOU",[[1,2809,"步一"]],[2809,2809],[2811,2811]]],[1564705048261,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2811,"\n"]],[2544,2544],[2812,2812]]],[1564705048261,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2811,"\n"]],[2812,2812],[2544,2544]]],[1564704989075,["GJX@GJXAIOU",[[1,2811,"；"]],[2811,2811],[2812,2812]]],[1564704989997,["GJX@GJXAIOU",[[-1,2811,"；"]],[2812,2812],[2811,2811]]],[1564704999748,["GJX@GJXAIOU",[[1,2811,"：建立.properties文件"]],[2811,2811],[2827,2827]]],[1564704999803,["GJX@GJXAIOU",[[1,2825," "]],[2827,2827],[2828,2828]]],[1564705008568,["GJX@GJXAIOU",[[1,2828,"，内容为：```"]],[2828,2828],[2836,2836]]],[1564705011353,["GJX@GJXAIOU",[[1,2833,"\n  "]],[2833,2833],[2836,2836]]],[1564705013166,["GJX@GJXAIOU",[[-1,2834,"  "]],[2836,2836],[2834,2834]]],[1564705015402,["GJX@GJXAIOU",[[1,2838,"```"]],[2838,2838],[2841,2841]]],[1564705016982,["GJX@GJXAIOU",[[1,2838,"\n"]],[2837,2837],[2838,2838]]],[1564705019058,["GJX@GJXAIOU",[[1,2838,"f"]],[2838,2838],[2839,2839]]],[1564705019591,["GJX@GJXAIOU",[[-1,2838,"f"]],[2839,2839],[2838,2838]]],[1564705020904,["GJX@GJXAIOU",[[1,2838,"drei"]],[2838,2838],[2842,2842]]],[1564705021498,["GJX@GJXAIOU",[[-1,2840,"ei"]],[2842,2842],[2840,2840]]],[1564705022489,["GJX@GJXAIOU",[[1,2840,"ibe"]],[2840,2840],[2843,2843]]],[1564705023118,["GJX@GJXAIOU",[[-1,2841,"be"]],[2843,2843],[2841,2841]]],[1564705023673,["GJX@GJXAIOU",[[1,2841,"ce"]],[2841,2841],[2843,2843]]],[1564705024247,["GJX@GJXAIOU",[[-1,2841,"ce"]],[2843,2843],[2841,2841]]],[1564705030041,["GJX@GJXAIOU",[[1,2841,"ve = j"]],[2841,2841],[2847,2847]]],[1564705036072,["GJX@GJXAIOU",[[-1,2846,"j"]],[2847,2847],[2846,2846]]],[1564705040975,["GJX@GJXAIOU",[[1,2846,"com.mysql.js"]],[2846,2846],[2858,2858]]],[1564705041793,["GJX@GJXAIOU",[[-1,2857,"s"]],[2858,2858],[2857,2857]]],[1564705042104,["GJX@GJXAIOU",[[1,2857,"de"]],[2857,2857],[2859,2859]]],[1564705043167,["GJX@GJXAIOU",[[-1,2858,"e"]],[2859,2859],[2858,2858]]],[1564705047897,["GJX@GJXAIOU",[[1,2858,"bc.cj.D"]],[2858,2858],[2865,2865]]],[1564705108368,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2869,"\n"]],[2544,2544],[2870,2870]]],[1564705108368,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2869,"\n"]],[2870,2870],[2544,2544]]],[1564705050945,["GJX@GJXAIOU",[[1,2865,"river"]],[2865,2865],[2870,2870]]],[1564705062882,["GJX@GJXAIOU",[[1,2843,"r"]],[2843,2843],[2844,2844]]],[1564705065311,["GJX@GJXAIOU",[[1,2872,"\n"]],[2871,2871],[2872,2872]]],[1564705072074,["GJX@GJXAIOU",[[1,2872,"user = 用户名"]],[2872,2872],[2882,2882]]],[1564705072391,["GJX@GJXAIOU",[[1,2883,"\n"]],[2882,2882],[2883,2883]]],[1564705075328,["GJX@GJXAIOU",[[1,2883,"padd"]],[2883,2883],[2887,2887]]],[1564705075942,["GJX@GJXAIOU",[[-1,2885,"dd"]],[2887,2887],[2885,2885]]],[1564705083378,["GJX@GJXAIOU",[[1,2885,"ssword = 密码"]],[2885,2885],[2896,2896]]],[1564705084119,["GJX@GJXAIOU",[[1,2897,"\n"]],[2896,2896],[2897,2897]]],[1564705096487,["GJX@GJXAIOU",[[1,2897,"url = mysql:"]],[2897,2897],[2909,2909]]],[1564705099499,["GJX@GJXAIOU",[[-1,2902," mysql:"]],[2909,2909],[2902,2902]]],[1564705101839,["GJX@GJXAIOU",[[1,2902," jsd"]],[2902,2902],[2906,2906]]],[1564705102409,["GJX@GJXAIOU",[[-1,2904,"sd"]],[2906,2906],[2904,2904]]],[1564705102792,["GJX@GJXAIOU",[[1,2904,"dc"]],[2904,2904],[2906,2906]]],[1564705103477,["GJX@GJXAIOU",[[-1,2905,"c"]],[2906,2906],[2905,2905]]],[1564705103936,["GJX@GJXAIOU",[[1,2905,"nc"]],[2905,2905],[2907,2907]]],[1564705105109,["GJX@GJXAIOU",[[-1,2905,"nc"]],[2907,2907],[2905,2905]]],[1564705108199,["GJX@GJXAIOU",[[1,2905,"bc:mysql"]],[2905,2905],[2913,2913]]],[1564705168367,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2917,"\n"]],[2544,2544],[2918,2918]]],[1564705168367,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2917,"\n"]],[2918,2918],[2544,2544]]],[1564705108944,["GJX@GJXAIOU",[[1,2913,";"]],[2913,2913],[2914,2914]]],[1564705109629,["GJX@GJXAIOU",[[-1,2913,";"]],[2914,2914],[2913,2913]]],[1564705112950,["GJX@GJXAIOU",[[1,2913,"://loc"]],[2913,2913],[2919,2919]]],[1564705113645,["GJX@GJXAIOU",[[-1,2916,"loc"]],[2919,2919],[2916,2916]]],[1564705118025,["GJX@GJXAIOU",[[1,2916,"IP："]],[2916,2916],[2919,2919]]],[1564705119270,["GJX@GJXAIOU",[[-1,2918,"："]],[2919,2919],[2918,2918]]],[1564705121362,["GJX@GJXAIOU",[[1,2918,":330-2"]],[2918,2918],[2924,2924]]],[1564705122110,["GJX@GJXAIOU",[[-1,2922,"-2"]],[2924,2924],[2922,2922]]],[1564705151794,["GJX@GJXAIOU",[[1,2922,"6/数据库名 ? serverTimezone = GMT%2B8"]],[2922,2922],[2955,2955]]],[1564705228376,[null,[[-1,2544,"\n"],[1,2545,"步"],[1,2959,"\n"]],[2544,2544],[2960,2960]]],[1564705228376,[null,[[1,2544,"\n"],[-1,2544,"步"],[-1,2959,"\n"]],[2960,2960],[2544,2544]]],[1564705193797,["GJX@GJXAIOU",[[-1,4091,"\n"]],[4091,4091],[4090,4090]]],[1564705194335,["GJX@GJXAIOU",[[-1,4090,"\n"]],[4090,4090],[4089,4089]]],[1564705195476,["GJX@GJXAIOU",[[-1,4022,"\n"]],[4022,4022],[4021,4021]]],[1564705197992,["GJX@GJXAIOU",[[-1,4149,"\n"]],[4149,4149],[4148,4148]]],[1564705200966,["GJX@GJXAIOU",[[-1,3817,"\n"]],[3817,3817],[3816,3816]]],[1564705219638,["GJX@GJXAIOU",[[-1,684,"\n"]],[683,683],[682,682]]],[1564705223079,["GJX@GJXAIOU",[[-1,229,"\n"]],[228,228],[227,227]]],[1564705223494,["GJX@GJXAIOU",[[-1,228,"\n"]],[227,227],[226,226]]],[1564705223895,["GJX@GJXAIOU",[[-1,227,"\n"]],[226,226],[225,225]]],[1564705288377,[null,[[-1,2540,"\n"],[1,2541,"步"],[1,2955,"\n"],[-1,3812,"\n"],[1,3813," "],[-1,4016,"\n"],[1,4017," "],[-1,4083,"\n"],[1,4084," "],[-1,4143,"\n"],[1,4144," "]],[2540,2540],[4145,4145]]],[1564705288377,[null,[[1,2540,"\n"],[-1,2540,"步"],[-1,2955,"\n"],[1,3813,"\n"],[-1,3813," "],[1,4017,"\n"],[-1,4017," "],[1,4084,"\n"],[-1,4084," "],[1,4144,"\n"],[-1,4144," "]],[4145,4145],[2540,2540]]],[1564705231438,["GJX@GJXAIOU",[[-1,1764,"\n"]],[1763,1763],[1762,1762]]],[1564705259061,["GJX@GJXAIOU",[[1,2955,"\n"]],[2954,2954],[2955,2955]]],[1564705261860,["GJX@GJXAIOU",[[1,2955,"  - bu"]],[2955,2955],[2961,2961]]],[1564705262614,["GJX@GJXAIOU",[[-1,2959,"bu"]],[2961,2961],[2959,2959]]],[1564705265146,["GJX@GJXAIOU",[[1,2959,"步骤"]],[2959,2959],[2961,2961]]],[1564705265751,["GJX@GJXAIOU",[[-1,2960,"骤"]],[2961,2961],[2960,2960]]],[1564705279715,["GJX@GJXAIOU",[[1,2960,"二：建立"]],[2960,2960],[2964,2964]]],[1564705348382,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,2965,"其"],[-1,3821,"\n"],[1,3822," "],[-1,4025,"\n"],[1,4026," "],[-1,4092,"\n"],[1,4093," "],[-1,4152,"\n"],[1,4153," "]],[2539,2539],[4154,4154]]],[1564705348382,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,2965,"其"],[1,3822,"\n"],[-1,3822," "],[1,4026,"\n"],[-1,4026," "],[1,4093,"\n"],[-1,4093," "],[1,4153,"\n"],[-1,4153," "]],[4154,4154],[2539,2539]]],[1564705291875,["GJX@GJXAIOU",[[1,2964,"jdbc"]],[2964,2964],[2968,2968]]],[1564705291924,["GJX@GJXAIOU",[[1,2964," "]],[2968,2968],[2969,2969]]],[1564705295534,["GJX@GJXAIOU",[[-1,2965,"j"]],[2966,2966],[2965,2965]]],[1564705296002,["GJX@GJXAIOU",[[1,2965,"J"]],[2965,2965],[2966,2966]]],[1564705306802,["GJX@GJXAIOU",[[1,2969,"Util.java类"]],[2969,2969],[2979,2979]]],[1564705306849,["GJX@GJXAIOU",[[1,2978," "]],[2979,2979],[2980,2980]]],[1564705408380,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,2981,"其"],[-1,3837,"\n"],[1,3838," "],[-1,4041,"\n"],[1,4042," "],[-1,4108,"\n"],[1,4109," "],[-1,4168,"\n"],[1,4169," "]],[2539,2539],[4170,4170]]],[1564705408380,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,2981,"其"],[1,3838,"\n"],[-1,3838," "],[1,4042,"\n"],[-1,4042," "],[1,4109,"\n"],[-1,4109," "],[1,4169,"\n"],[-1,4169," "]],[4170,4170],[2539,2539]]],[1564705387197,["GJX@GJXAIOU",[[1,2980,"，里面包含数据库连接好"]],[2980,2980],[2991,2991]]],[1564705388558,["GJX@GJXAIOU",[[-1,2990,"好"]],[2991,2991],[2990,2990]]],[1564705391427,["GJX@GJXAIOU",[[1,2990,"和关闭的方式"]],[2990,2990],[2996,2996]]],[1564705392551,["GJX@GJXAIOU",[[1,2997,"  - \n"]],[2996,2996],[3001,3001]]],[1564705394238,["GJX@GJXAIOU",[[-1,2999,"- "]],[3001,3001],[2999,2999]]],[1564705398778,["GJX@GJXAIOU",[[1,2999,"    - 连接："]],[2999,2999],[3008,3008]]],[1564705468381,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3009,"其"],[-1,3865,"\n"],[1,3866," "],[-1,4069,"\n"],[1,4070," "],[-1,4136,"\n"],[1,4137," "],[-1,4196,"\n"],[1,4197," "]],[2539,2539],[4198,4198]]],[1564705468381,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3009,"其"],[1,3866,"\n"],[-1,3866," "],[1,4070,"\n"],[-1,4070," "],[1,4137,"\n"],[-1,4137," "],[1,4197,"\n"],[-1,4197," "]],[4198,4198],[2539,2539]]],[1564705464511,["GJX@GJXAIOU",[[1,3009,"      - \n"]],[3008,3008],[3017,3017]]],[1564705466174,["GJX@GJXAIOU",[[1,3015,"  "]],[3017,3017],[3019,3019]]],[1564705467733,["GJX@GJXAIOU",[[1,3019,"步"]],[3019,3019],[3020,3020]]],[1564705528417,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3021,"其"],[-1,3877,"\n"],[1,3878," "],[-1,4081,"\n"],[1,4082," "],[-1,4148,"\n"],[1,4149," "],[-1,4208,"\n"],[1,4209," "]],[2539,2539],[4210,4210]]],[1564705528417,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3021,"其"],[1,3878,"\n"],[-1,3878," "],[1,4082,"\n"],[-1,4082," "],[1,4149,"\n"],[-1,4149," "],[1,4209,"\n"],[-1,4209," "]],[4210,4210],[2539,2539]]],[1564705484322,["GJX@GJXAIOU",[[1,3020,"一：读取配置文件，即.per"]],[3020,3020],[3034,3034]]],[1564705485008,["GJX@GJXAIOU",[[-1,3032,"er"]],[3034,3034],[3032,3032]]],[1564705489051,["GJX@GJXAIOU",[[1,3032,"ropertire"]],[3032,3032],[3041,3041]]],[1564705489653,["GJX@GJXAIOU",[[-1,3039,"re"]],[3041,3041],[3039,3039]]],[1564705490025,["GJX@GJXAIOU",[[1,3039,"ew"]],[3039,3039],[3041,3041]]],[1564705490719,["GJX@GJXAIOU",[[-1,3040,"w"]],[3041,3041],[3040,3040]]],[1564705492355,["GJX@GJXAIOU",[[1,3040,"s文件"]],[3040,3040],[3043,3043]]],[1564705492400,["GJX@GJXAIOU",[[1,3041," "]],[3043,3043],[3044,3044]]],[1564705496216,["GJX@GJXAIOU",[[1,3044,"：``"]],[3044,3044],[3047,3047]]],[1564705512738,["GJX@GJXAIOU",[[1,3046,"new Ptro"]],[3046,3046],[3054,3054]]],[1564705514015,["GJX@GJXAIOU",[[-1,3051,"tro"]],[3054,3054],[3051,3051]]],[1564705520345,["GJX@GJXAIOU",[[1,3051,"roperties();"]],[3051,3051],[3063,3063]]],[1564705528242,["GJX@GJXAIOU",[[1,3046,"Proper"]],[3046,3046],[3052,3052]]],[1564705588418,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3071,"其"],[-1,3113,""],[-1,3927,"\n"],[1,3928," "],[-1,4131,"\n"],[1,4132," "],[-1,4198,"\n"],[1,4199," "],[-1,4258,"\n"],[1,4259," "]],[2539,2539],[4260,4260]]],[1564705588418,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3071,"其"],[1,3114,""],[1,3928,"\n"],[-1,3928," "],[1,4132,"\n"],[-1,4132," "],[1,4199,"\n"],[-1,4199," "],[1,4259,"\n"],[-1,4259," "]],[4260,4260],[2539,2539]]],[1564705533729,["GJX@GJXAIOU",[[1,3052,"ties p = "]],[3052,3052],[3061,3061]]],[1564705539862,["GJX@GJXAIOU",[[1,3080,"        - \n"]],[3079,3079],[3090,3090]]],[1564705540728,["GJX@GJXAIOU",[[1,3090,"bu"]],[3090,3090],[3092,3092]]],[1564705541460,["GJX@GJXAIOU",[[-1,3090,"bu"]],[3092,3092],[3090,3090]]],[1564705543441,["GJX@GJXAIOU",[[1,3090,"步二："]],[3090,3090],[3093,3093]]],[1564705648421,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3094,"其"],[-1,3136,""],[-1,3950,"\n"],[1,3951," "],[-1,4154,"\n"],[1,4155," "],[-1,4221,"\n"],[1,4222," "],[-1,4281,"\n"],[1,4282," "]],[2539,2539],[4283,4283]]],[1564705648421,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3094,"其"],[1,3137,""],[1,3951,"\n"],[-1,3951," "],[1,4155,"\n"],[-1,4155," "],[1,4222,"\n"],[-1,4222," "],[1,4282,"\n"],[-1,4282," "]],[4283,4283],[2539,2539]]],[1564705589374,["GJX@GJXAIOU",[[-1,3088,"- 步二："]],[3088,3093],[3088,3088]]],[1564705609216,["GJX@GJXAIOU",[[1,3079," 并将其加入到内存之中：``"]],[3079,3079],[3093,3093]]],[1564705948421,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3103,"其"],[-1,3145,""],[-1,3959,"\n"],[1,3960," "],[-1,4163,"\n"],[1,4164," "],[-1,4230,"\n"],[1,4231," "],[-1,4290,"\n"],[1,4291," "]],[2539,2539],[4292,4292]]],[1564705948421,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3103,"其"],[1,3146,""],[1,3960,"\n"],[-1,3960," "],[1,4164,"\n"],[-1,4164," "],[1,4231,"\n"],[-1,4231," "],[1,4291,"\n"],[-1,4291," "]],[4292,4292],[2539,2539]]],[1564705897753,["GJX@GJXAIOU",[[1,3092,"mew "]],[3092,3092],[3096,3096]]],[1564705899894,["GJX@GJXAIOU",[[-1,3092,"mew "]],[3096,3096],[3092,3092]]],[1564705902127,["GJX@GJXAIOU",[[1,3092,"new in"]],[3092,3092],[3098,3098]]],[1564705902652,["GJX@GJXAIOU",[[-1,3097,"n"]],[3098,3098],[3097,3097]]],[1564705904030,["GJX@GJXAIOU",[[1,3097,"Inp"]],[3097,3097],[3100,3100]]],[1564705905044,["GJX@GJXAIOU",[[-1,3096,"iInp"]],[3100,3100],[3096,3096]]],[1564705911585,["GJX@GJXAIOU",[[1,3096,"InputStream"]],[3096,3096],[3107,3107]]],[1564705928819,["GJX@GJXAIOU",[[1,3096,"File"]],[3096,3096],[3100,3100]]],[1564705933712,["GJX@GJXAIOU",[[1,3111,"()"]],[3111,3111],[3113,3113]]],[1564705939657,["GJX@GJXAIOU",[[1,3112,"wen"]],[3112,3112],[3115,3115]]],[1564705941124,["GJX@GJXAIOU",[[-1,3112,"wen"]],[3115,3115],[3112,3112]]],[1564705944048,["GJX@GJXAIOU",[[1,3112,"文件路径"]],[3112,3112],[3116,3116]]],[1564706008423,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3128,"其"],[-1,3170,""],[-1,3984,"\n"],[1,3985," "],[-1,4188,"\n"],[1,4189," "],[-1,4255,"\n"],[1,4256," "],[-1,4315,"\n"],[1,4316," "]],[2539,2539],[4317,4317]]],[1564706008423,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3128,"其"],[1,3171,""],[1,3985,"\n"],[-1,3985," "],[1,4189,"\n"],[-1,4189," "],[1,4256,"\n"],[-1,4256," "],[1,4316,"\n"],[-1,4316," "]],[4317,4317],[2539,2539]]],[1564705981960,["GJX@GJXAIOU",[[1,3092," InputStream is= "]],[3092,3092],[3109,3109]]],[1564705983720,["GJX@GJXAIOU",[[1,3107," "]],[3107,3107],[3108,3108]]],[1564705986542,["GJX@GJXAIOU",[[-1,3092," "]],[3093,3093],[3092,3092]]],[1564706068428,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3145,"其"],[-1,3187,""],[-1,4001,"\n"],[1,4002," "],[-1,4205,"\n"],[1,4206," "],[-1,4272,"\n"],[1,4273," "],[-1,4332,"\n"],[1,4333," "]],[2539,2539],[4334,4334]]],[1564706068428,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3145,"其"],[1,3188,""],[1,4002,"\n"],[-1,4002," "],[1,4206,"\n"],[-1,4206," "],[1,4273,"\n"],[-1,4273," "],[1,4333,"\n"],[-1,4333," "]],[4334,4334],[2539,2539]]],[1564706030023,["GJX@GJXAIOU",[[1,3144,"- \n        "]],[3135,3135],[3146,3146]]],[1564706047328,["GJX@GJXAIOU",[[1,3146,"步二：利用Properties"]],[3146,3146],[3161,3161]]],[1564706047377,["GJX@GJXAIOU",[[1,3151," "]],[3161,3161],[3162,3162]]],[1564706049378,["GJX@GJXAIOU",[[1,3162,"里面"]],[3162,3162],[3164,3164]]],[1564706049426,["GJX@GJXAIOU",[[1,3162," "]],[3164,3164],[3165,3165]]],[1564706050665,["GJX@GJXAIOU",[[1,3165,"的l"]],[3165,3165],[3167,3167]]],[1564706050713,["GJX@GJXAIOU",[[1,3166," "]],[3167,3167],[3168,3168]]],[1564706053385,["GJX@GJXAIOU",[[1,3168,"oad方法"]],[3168,3168],[3173,3173]]],[1564706053433,["GJX@GJXAIOU",[[1,3171," "]],[3173,3173],[3174,3174]]],[1564706055449,["GJX@GJXAIOU",[[1,3174,"：``"]],[3174,3174],[3177,3177]]],[1564706061057,["GJX@GJXAIOU",[[1,3176,"pro"]],[3176,3176],[3179,3179]]],[1564706062044,["GJX@GJXAIOU",[[-1,3177,"ro"]],[3179,3179],[3177,3177]]],[1564706063552,["GJX@GJXAIOU",[[1,3177,"l"]],[3177,3177],[3178,3178]]],[1564706064861,["GJX@GJXAIOU",[[-1,3177,"l"]],[3178,3178],[3177,3177]]],[1564706066233,["GJX@GJXAIOU",[[1,3177,".los"]],[3177,3177],[3181,3181]]],[1564706066880,["GJX@GJXAIOU",[[-1,3180,"s"]],[3181,3181],[3180,3180]]],[1564706067448,["GJX@GJXAIOU",[[1,3180,"ad"]],[3180,3180],[3182,3182]]],[1564706128429,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3193,"其"],[-1,3235,""],[-1,4049,"\n"],[1,4050," "],[-1,4253,"\n"],[1,4254," "],[-1,4320,"\n"],[1,4321," "],[-1,4380,"\n"],[1,4381," "]],[2539,2539],[4382,4382]]],[1564706128429,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3193,"其"],[1,3236,""],[1,4050,"\n"],[-1,4050," "],[1,4254,"\n"],[-1,4254," "],[1,4321,"\n"],[-1,4321," "],[1,4381,"\n"],[-1,4381," "]],[4382,4382],[2539,2539]]],[1564706068584,["GJX@GJXAIOU",[[1,3182,"()"]],[3182,3182],[3184,3184]]],[1564706070454,["GJX@GJXAIOU",[[1,3183,"is"]],[3183,3183],[3185,3185]]],[1564706083852,["GJX@GJXAIOU",[[1,3196,"- \n        "]],[3187,3187],[3198,3198]]],[1564706085052,["GJX@GJXAIOU",[[1,3198,"bu"]],[3198,3198],[3200,3200]]],[1564706085775,["GJX@GJXAIOU",[[-1,3198,"bu"]],[3200,3200],[3198,3198]]],[1564706093418,["GJX@GJXAIOU",[[1,3198,"步三：通过p"]],[3198,3198],[3204,3204]]],[1564706093464,["GJX@GJXAIOU",[[1,3203," "]],[3204,3204],[3205,3205]]],[1564706097225,["GJX@GJXAIOU",[[1,3205,"ropertiew"]],[3205,3205],[3214,3214]]],[1564706097909,["GJX@GJXAIOU",[[-1,3213,"w"]],[3214,3214],[3213,3213]]],[1564706100793,["GJX@GJXAIOU",[[1,3213,"s类"]],[3213,3213],[3215,3215]]],[1564706100839,["GJX@GJXAIOU",[[1,3214," "]],[3215,3215],[3216,3216]]],[1564706106866,["GJX@GJXAIOU",[[1,3216,"对象获取想要的数据："]],[3216,3216],[3226,3226]]],[1564706108039,["GJX@GJXAIOU",[[1,3235,"- \n        "]],[3226,3226],[3237,3237]]],[1564706111838,["GJX@GJXAIOU",[[-1,3227,"        - "]],[3237,3237],[3227,3227]]],[1564706112773,["GJX@GJXAIOU",[[-1,3227,"\n"]],[3227,3227],[3226,3226]]],[1564706114433,["GJX@GJXAIOU",[[1,3226,"``"]],[3226,3226],[3228,3228]]],[1564706127482,["GJX@GJXAIOU",[[1,3227,"p.getProp"]],[3227,3227],[3236,3236]]],[1564706188431,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3247,"其"],[-1,3289,""],[-1,4103,"\n"],[1,4104," "],[-1,4307,"\n"],[1,4308," "],[-1,4374,"\n"],[1,4375," "],[-1,4434,"\n"],[1,4435," "]],[2539,2539],[4436,4436]]],[1564706188431,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3247,"其"],[1,3290,""],[1,4104,"\n"],[-1,4104," "],[1,4308,"\n"],[-1,4308," "],[1,4375,"\n"],[-1,4375," "],[1,4435,"\n"],[-1,4435," "]],[4436,4436],[2539,2539]]],[1564706132489,["GJX@GJXAIOU",[[1,3236,"erty()"]],[3236,3236],[3242,3242]]],[1564706137528,["GJX@GJXAIOU",[[1,3241,"\"url\""]],[3241,3241],[3246,3246]]],[1564706142391,["GJX@GJXAIOU",[[1,3247,";den"]],[3247,3247],[3251,3251]]],[1564706143437,["GJX@GJXAIOU",[[-1,3248,"den"]],[3251,3251],[3248,3248]]],[1564706147002,["GJX@GJXAIOU",[[1,3248,"等等"]],[3248,3248],[3250,3250]]],[1564706148862,["GJX@GJXAIOU",[[1,3260,"- \n        "]],[3251,3251],[3262,3262]]],[1564706161186,["GJX@GJXAIOU",[[1,3262,"步四：加载类文件：``"]],[3262,3262],[3273,3273]]],[1564706162574,["GJX@GJXAIOU",[[1,3272,"cal"]],[3272,3272],[3275,3275]]],[1564706164750,["GJX@GJXAIOU",[[-1,3272,"cal"]],[3275,3275],[3272,3272]]],[1564706167211,["GJX@GJXAIOU",[[1,3272,"Cladd"]],[3272,3272],[3277,3277]]],[1564706167958,["GJX@GJXAIOU",[[-1,3275,"dd"]],[3277,3277],[3275,3275]]],[1564706173247,["GJX@GJXAIOU",[[1,3275,"ss.forName()"]],[3275,3275],[3287,3287]]],[1564706181756,["GJX@GJXAIOU",[[1,3286,"driver"]],[3286,3286],[3292,3292]]],[1564706248431,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3304,"其"],[-1,3346,""],[-1,4160,"\n"],[1,4161," "],[-1,4364,"\n"],[1,4365," "],[-1,4431,"\n"],[1,4432," "],[-1,4491,"\n"],[1,4492," "]],[2539,2539],[4493,4493]]],[1564706248431,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3304,"其"],[1,3347,""],[1,4161,"\n"],[-1,4161," "],[1,4365,"\n"],[-1,4365," "],[1,4432,"\n"],[-1,4432," "],[1,4492,"\n"],[-1,4492," "]],[4493,4493],[2539,2539]]],[1564706201807,["GJX@GJXAIOU",[[1,3303,"- \n        "]],[3294,3294],[3305,3305]]],[1564706203031,["GJX@GJXAIOU",[[1,3305,"bu"]],[3305,3305],[3307,3307]]],[1564706203798,["GJX@GJXAIOU",[[-1,3305,"bu"]],[3307,3307],[3305,3305]]],[1564706219818,["GJX@GJXAIOU",[[1,3305,"步五：关闭资源：在finally"]],[3305,3305],[3321,3321]]],[1564706219867,["GJX@GJXAIOU",[[1,3314," "]],[3321,3321],[3322,3322]]],[1564706221577,["GJX@GJXAIOU",[[1,3322,"里面"]],[3322,3322],[3324,3324]]],[1564706221624,["GJX@GJXAIOU",[[1,3322," "]],[3324,3324],[3325,3325]]],[1564706224794,["GJX@GJXAIOU",[[1,3325,"加入：``"]],[3325,3325],[3330,3330]]],[1564706226159,["GJX@GJXAIOU",[[1,3329,"in"]],[3329,3329],[3331,3331]]],[1564706227078,["GJX@GJXAIOU",[[-1,3330,"n"]],[3331,3331],[3330,3330]]],[1564706231153,["GJX@GJXAIOU",[[1,3330,"s.close();"]],[3330,3330],[3340,3340]]],[1564706308452,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3351,"其"],[-1,3393,""],[-1,4207,"\n"],[1,4208," "],[-1,4411,"\n"],[1,4412," "],[-1,4478,"\n"],[1,4479," "],[-1,4538,"\n"],[1,4539," "]],[2539,2539],[4540,4540]]],[1564706308452,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3351,"其"],[1,3394,""],[1,4208,"\n"],[-1,4208," "],[1,4412,"\n"],[-1,4412," "],[1,4479,"\n"],[-1,4479," "],[1,4539,"\n"],[-1,4539," "]],[4540,4540],[2539,2539]]],[1564706286768,["GJX@GJXAIOU",[[1,3005,"z "]],[3005,3005],[3006,3006]]],[1564706287077,["GJX@GJXAIOU",[[1,3006,"hu"]],[3006,3006],[3008,3008]]],[1564706287845,["GJX@GJXAIOU",[[-1,3005,"zhu"]],[3008,3008],[3005,3005]]],[1564706289874,["GJX@GJXAIOU",[[-1,3006,"连接"]],[3008,3008],[3006,3006]]],[1564706295329,["GJX@GJXAIOU",[[1,3006,"转呗"]],[3006,3006],[3008,3008]]],[1564706296589,["GJX@GJXAIOU",[[-1,3006,"转呗"]],[3008,3008],[3006,3006]]],[1564706300002,["GJX@GJXAIOU",[[1,3006,"准备工作"]],[3006,3006],[3010,3010]]],[1564706303389,["GJX@GJXAIOU",[[1,3353,"- \n        "]],[3344,3344],[3355,3355]]],[1564706305014,["GJX@GJXAIOU",[[-1,3351,"  "]],[3355,3355],[3353,3353]]],[1564706307067,["GJX@GJXAIOU",[[1,3353,"jinx"]],[3353,3353],[3357,3357]]],[1564706308277,["GJX@GJXAIOU",[[-1,3353,"jinx"]],[3357,3357],[3353,3353]]],[1564706368447,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3363,"其"],[-1,3405,""],[-1,4219,"\n"],[1,4220," "],[-1,4423,"\n"],[1,4424," "],[-1,4490,"\n"],[1,4491," "],[-1,4550,"\n"],[1,4551," "]],[2539,2539],[4552,4552]]],[1564706368447,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3363,"其"],[1,3406,""],[1,4220,"\n"],[-1,4220," "],[1,4424,"\n"],[-1,4424," "],[1,4491,"\n"],[-1,4491," "],[1,4551,"\n"],[-1,4551," "]],[4552,4552],[2539,2539]]],[1564706314441,["GJX@GJXAIOU",[[1,3353,"进行连接："]],[3353,3353],[3358,3358]]],[1564706315104,["GJX@GJXAIOU",[[1,3365,"- \n      "]],[3358,3358],[3367,3367]]],[1564706316254,["GJX@GJXAIOU",[[1,3365,"  "]],[3367,3367],[3369,3369]]],[1564706319553,["GJX@GJXAIOU",[[1,3369,"步一：手机"]],[3369,3369],[3374,3374]]],[1564706320265,["GJX@GJXAIOU",[[-1,3372,"手机"]],[3374,3374],[3372,3372]]],[1564706328121,["GJX@GJXAIOU",[[1,3372,"建立新的连接方法：``"]],[3372,3372],[3383,3383]]],[1564706343843,["GJX@GJXAIOU",[[1,3382,"getConnection(),ranhui"]],[3382,3382],[3404,3404]]],[1564706345150,["GJX@GJXAIOU",[[-1,3398,"ranhui"]],[3404,3404],[3398,3398]]],[1564706357250,["GJX@GJXAIOU",[[1,3398,"返回值为Connectiono"]],[3398,3398],[3413,3413]]],[1564706358141,["GJX@GJXAIOU",[[-1,3412,"o"]],[3413,3413],[3412,3412]]],[1564706359473,["GJX@GJXAIOU",[[1,3412,"类型"]],[3412,3412],[3414,3414]]],[1564706362301,["GJX@GJXAIOU",[[1,3424,"- \n        "]],[3415,3415],[3426,3426]]],[1564706364203,["GJX@GJXAIOU",[[1,3426,"布尔"]],[3426,3426],[3428,3428]]],[1564706364996,["GJX@GJXAIOU",[[-1,3426,"布尔"]],[3428,3428],[3426,3426]]],[1564706366952,["GJX@GJXAIOU",[[1,3426,"步二："]],[3426,3426],[3429,3429]]],[1564706428450,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3439,"其"],[-1,3481,""],[-1,4295,"\n"],[1,4296," "],[-1,4499,"\n"],[1,4500," "],[-1,4566,"\n"],[1,4567," "],[-1,4626,"\n"],[1,4627," "]],[2539,2539],[4628,4628]]],[1564706428450,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3439,"其"],[1,3482,""],[1,4296,"\n"],[-1,4296," "],[1,4500,"\n"],[-1,4500," "],[1,4567,"\n"],[-1,4567," "],[1,4627,"\n"],[-1,4627," "]],[4628,4628],[2539,2539]]],[1564706383889,["GJX@GJXAIOU",[[1,3429,"建立连接：DriveManagerl"]],[3429,3429],[3447,3447]]],[1564706384710,["GJX@GJXAIOU",[[-1,3446,"l"]],[3447,3447],[3446,3446]]],[1564706391581,["GJX@GJXAIOU",[[1,3446,".getConnection()"]],[3446,3446],[3462,3462]]],[1564706394447,["GJX@GJXAIOU",[[1,3461,"r"]],[3461,3461],[3462,3462]]],[1564706395172,["GJX@GJXAIOU",[[-1,3461,"r"]],[3462,3462],[3461,3461]]],[1564706405466,["GJX@GJXAIOU",[[1,3461,"url, user, password"]],[3461,3461],[3480,3480]]],[1564706411231,["GJX@GJXAIOU",[[1,3434,"`"]],[3434,3434],[3435,3435]]],[1564706412529,["GJX@GJXAIOU",[[1,3482,"`"]],[3482,3482],[3483,3483]]],[1564706417668,["GJX@GJXAIOU",[[1,3492,"- \n        "]],[3483,3483],[3494,3494]]],[1564706418917,["GJX@GJXAIOU",[[1,3494,"bu"]],[3494,3494],[3496,3496]]],[1564706419596,["GJX@GJXAIOU",[[-1,3494,"bu"]],[3496,3496],[3494,3494]]],[1564706427361,["GJX@GJXAIOU",[[1,3494,"步三：返回建立的"]],[3494,3494],[3502,3502]]],[1564706488526,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[1,3512,"其"],[-1,3554,""],[-1,4368,"\n"],[1,4369," "],[-1,4572,"\n"],[1,4573," "],[-1,4639,"\n"],[1,4640," "],[-1,4699,"\n"],[1,4700," "]],[2539,2539],[4701,4701]]],[1564706488526,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[-1,3512,"其"],[1,3555,""],[1,4369,"\n"],[-1,4369," "],[1,4573,"\n"],[-1,4573," "],[1,4640,"\n"],[-1,4640," "],[1,4700,"\n"],[-1,4700," "]],[4701,4701],[2539,2539]]],[1564706430016,["GJX@GJXAIOU",[[1,3504,"：``"]],[3504,3504],[3507,3507]]],[1564706436545,["GJX@GJXAIOU",[[1,3506,"return connection;"]],[3506,3506],[3524,3524]]],[1564706446669,["GJX@GJXAIOU",[[1,3534,"- \n        "]],[3525,3525],[3536,3536]]],[1564706464112,["GJX@GJXAIOU",[[1,3536,"~"]],[3536,3536],[3537,3537]]],[1564706465444,["GJX@GJXAIOU",[[-1,3535," ~"]],[3537,3537],[3535,3535]]],[1564706466999,["GJX@GJXAIOU",[[1,3535," "]],[3535,3535],[3536,3536]]],[1564706468367,["GJX@GJXAIOU",[[-1,3532,"  "]],[3536,3536],[3534,3534]]],[1564706471018,["GJX@GJXAIOU",[[1,3534,"guan"]],[3534,3534],[3538,3538]]],[1564706472157,["GJX@GJXAIOU",[[-1,3534,"guan"]],[3538,3538],[3534,3534]]],[1564706478120,["GJX@GJXAIOU",[[1,3534,"关闭连接："]],[3534,3534],[3539,3539]]],[1564706548525,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[1,3525,"\n"],[-1,3531," "],[1,3548,"\n其中"],[-1,4403,"\n"],[1,4404," "],[-1,4607,"\n"],[1,4608," "],[-1,4674,"\n"],[1,4675," "],[-1,4734,"\n"],[1,4735," "]],[2539,2539],[4736,4736]]],[1564706548525,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[-1,3525,"\n"],[1,3532," "],[-1,3548,"\n其中"],[1,4406,"\n"],[-1,4406," "],[1,4610,"\n"],[-1,4610," "],[1,4677,"\n"],[-1,4677," "],[1,4737,"\n"],[-1,4737," "]],[4736,4736],[2539,2539]]],[1564706501669,["GJX@GJXAIOU",[[1,3546,"- \n      "]],[3539,3539],[3548,3548]]],[1564706503957,["GJX@GJXAIOU",[[1,3546,"  "]],[3548,3548],[3550,3550]]],[1564706519031,["GJX@GJXAIOU",[[1,3550,"类一：没有结果集的关闭（）"]],[3550,3550],[3563,3563]]],[1564706538690,["GJX@GJXAIOU",[[1,3562,"针对：增、删、改操作"]],[3562,3562],[3572,3572]]],[1564706608529,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3582,"\n其中"],[-1,4437,"\n"],[1,4438," "],[-1,4641,"\n"],[1,4642," "],[-1,4708,"\n"],[1,4709," "],[-1,4768,"\n"],[1,4769," "]],[2539,2539],[4770,4770]]],[1564706608529,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3582,"\n其中"],[1,4440,"\n"],[-1,4440," "],[1,4644,"\n"],[-1,4644," "],[1,4711,"\n"],[-1,4711," "],[1,4771,"\n"],[-1,4771," "]],[4770,4770],[2539,2539]]],[1564706563254,["GJX@GJXAIOU",[[1,3582,"- \n        "]],[3573,3573],[3584,3584]]],[1564706567092,["GJX@GJXAIOU",[[1,3584,"步一："]],[3584,3584],[3587,3587]]],[1564706567966,["GJX@GJXAIOU",[[1,3582,"  "]],[3587,3587],[3589,3589]]],[1564706603917,["GJX@GJXAIOU",[[1,3589,"新建的关闭方法中药"]],[3589,3589],[3598,3598]]],[1564706604503,["GJX@GJXAIOU",[[-1,3597,"药"]],[3598,3598],[3597,3597]]],[1564706668529,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3606,"\n其中"],[-1,4461,"\n"],[1,4462," "],[-1,4665,"\n"],[1,4666," "],[-1,4732,"\n"],[1,4733," "],[-1,4792,"\n"],[1,4793," "]],[2539,2539],[4794,4794]]],[1564706668529,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3606,"\n其中"],[1,4464,"\n"],[-1,4464," "],[1,4668,"\n"],[-1,4668," "],[1,4735,"\n"],[-1,4735," "],[1,4795,"\n"],[-1,4795," "]],[4794,4794],[2539,2539]]],[1564706622250,["GJX@GJXAIOU",[[1,3597,"参数为Connection"]],[3597,3597],[3610,3610]]],[1564706622297,["GJX@GJXAIOU",[[1,3600," "]],[3610,3610],[3611,3611]]],[1564706624349,["GJX@GJXAIOU",[[1,3611,"和"]],[3611,3611],[3612,3612]]],[1564706624399,["GJX@GJXAIOU",[[1,3611," "]],[3612,3612],[3613,3613]]],[1564706646140,["GJX@GJXAIOU",[[1,3613,"Statement"]],[3613,3613],[3622,3622]]],[1564706646195,["GJX@GJXAIOU",[[1,3613," "]],[3622,3622],[3623,3623]]],[1564706647707,["GJX@GJXAIOU",[[1,3623,"类型"]],[3623,3623],[3625,3625]]],[1564706647759,["GJX@GJXAIOU",[[1,3623," "]],[3625,3625],[3626,3626]]],[1564706653675,["GJX@GJXAIOU",[[1,3626,"；"]],[3626,3626],[3627,3627]]],[1564706654536,["GJX@GJXAIOU",[[1,3636,"  - \n        "]],[3627,3627],[3640,3640]]],[1564706664962,["GJX@GJXAIOU",[[1,3640,"步二：逐个冠词"]],[3640,3640],[3647,3647]]],[1564706665631,["GJX@GJXAIOU",[[-1,3645,"冠词"]],[3647,3647],[3645,3645]]],[1564706668281,["GJX@GJXAIOU",[[1,3645,"关闭"]],[3645,3645],[3647,3647]]],[1564706728530,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3656,"\n其中"],[-1,4511,"\n"],[1,4512," "],[-1,4715,"\n"],[1,4716," "],[-1,4782,"\n"],[1,4783," "],[-1,4842,"\n"],[1,4843," "]],[2539,2539],[4844,4844]]],[1564706728530,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3656,"\n其中"],[1,4514,"\n"],[-1,4514," "],[1,4718,"\n"],[-1,4718," "],[1,4785,"\n"],[-1,4785," "],[1,4845,"\n"],[-1,4845," "]],[4844,4844],[2539,2539]]],[1564706685514,["GJX@GJXAIOU",[[1,3647,"资源：先关闭statement"]],[3647,3647],[3662,3662]]],[1564706685575,["GJX@GJXAIOU",[[1,3653," "]],[3662,3662],[3663,3663]]],[1564706693346,["GJX@GJXAIOU",[[1,3663,"，后关闭Connection"]],[3663,3663],[3677,3677]]],[1564706693394,["GJX@GJXAIOU",[[1,3667," "]],[3677,3677],[3678,3678]]],[1564706694128,["GJX@GJXAIOU",[[1,3678,"；"]],[3678,3678],[3679,3679]]],[1564706697341,["GJX@GJXAIOU",[[1,3688,"  - \n        "]],[3679,3679],[3692,3692]]],[1564706699277,["GJX@GJXAIOU",[[-1,3688,"  "]],[3692,3692],[3690,3690]]],[1564706713074,["GJX@GJXAIOU",[[1,3690,"类二：含有结果集的关闭（）"]],[3690,3690],[3703,3703]]],[1564706724306,["GJX@GJXAIOU",[[1,3702,"针对：查操作"]],[3702,3702],[3708,3708]]],[1564706788531,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3718,"\n其中"],[-1,4573,"\n"],[1,4574," "],[-1,4777,"\n"],[1,4778," "],[-1,4844,"\n"],[1,4845," "],[-1,4904,"\n"],[1,4905," "]],[2539,2539],[4906,4906]]],[1564706788531,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3718,"\n其中"],[1,4576,"\n"],[-1,4576," "],[1,4780,"\n"],[-1,4780," "],[1,4847,"\n"],[-1,4847," "],[1,4907,"\n"],[-1,4907," "]],[4906,4906],[2539,2539]]],[1564706744719,["GJX@GJXAIOU",[[1,3718,"- \n        "]],[3709,3709],[3720,3720]]],[1564706746191,["GJX@GJXAIOU",[[1,3718,"  "]],[3720,3720],[3722,3722]]],[1564706751915,["GJX@GJXAIOU",[[1,3722,"步一：方法总"]],[3722,3722],[3728,3728]]],[1564706752605,["GJX@GJXAIOU",[[-1,3727,"总"]],[3728,3728],[3727,3727]]],[1564706768538,["GJX@GJXAIOU",[[1,3727,"中的参数为：Connection、Statement？"]],[3727,3727],[3754,3754]]],[1564706769119,["GJX@GJXAIOU",[[-1,3753,"？"]],[3754,3754],[3753,3753]]],[1564706785137,["GJX@GJXAIOU",[[1,3753,"、Result"]],[3753,3753],[3760,3760]]],[1564706848533,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3769,"\n其中"],[-1,4624,"\n"],[1,4625," "],[-1,4828,"\n"],[1,4829," "],[-1,4895,"\n"],[1,4896," "],[-1,4955,"\n"],[1,4956," "]],[2539,2539],[4957,4957]]],[1564706848533,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3769,"\n其中"],[1,4627,"\n"],[-1,4627," "],[1,4831,"\n"],[-1,4831," "],[1,4898,"\n"],[-1,4898," "],[1,4958,"\n"],[-1,4958," "]],[4957,4957],[2539,2539]]],[1564706817473,["GJX@GJXAIOU",[[1,3760,"Setle"]],[3760,3760],[3765,3765]]],[1564706818199,["GJX@GJXAIOU",[[-1,3763,"le"]],[3765,3765],[3763,3763]]],[1564706819522,["GJX@GJXAIOU",[[1,3763,"类型"]],[3763,3763],[3765,3765]]],[1564706819570,["GJX@GJXAIOU",[[1,3763," "]],[3765,3765],[3766,3766]]],[1564706821403,["GJX@GJXAIOU",[[1,3766,"；"]],[3766,3766],[3767,3767]]],[1564706821712,["GJX@GJXAIOU",[[1,3776,"  - \n        "]],[3767,3767],[3780,3780]]],[1564706835737,["GJX@GJXAIOU",[[1,3780,"步二：逐个关闭资源："]],[3780,3780],[3790,3790]]],[1564706908534,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3799,"\n其中"],[-1,4654,"\n"],[1,4655," "],[-1,4858,"\n"],[1,4859," "],[-1,4925,"\n"],[1,4926," "],[-1,4985,"\n"],[1,4986," "]],[2539,2539],[4987,4987]]],[1564706908534,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3799,"\n其中"],[1,4657,"\n"],[-1,4657," "],[1,4861,"\n"],[-1,4861," "],[1,4928,"\n"],[-1,4928," "],[1,4988,"\n"],[-1,4988," "]],[4987,4987],[2539,2539]]],[1564706868568,["GJX@GJXAIOU",[[1,3790,"顺序为：Statement、Connection、ResultSet"]],[3790,3790],[3824,3824]]],[1564706885508,["GJX@GJXAIOU",[[1,3833,"  - \n        "]],[3824,3824],[3837,3837]]],[1564706885764,["GJX@GJXAIOU",[[-1,3825,"          - "]],[3837,3837],[3826,3826]]],[1564706894527,["GJX@GJXAIOU",[[1,3826,"-具体是实现类："]],[3826,3826],[3834,3834]]],[1564706896794,["GJX@GJXAIOU",[[1,3827," "]],[3827,3827],[3828,3828]]],[1564706899954,["GJX@GJXAIOU",[[1,3835,"（）"]],[3835,3835],[3837,3837]]],[1564706904569,["GJX@GJXAIOU",[[1,3836,"以"]],[3836,3836],[3837,3837]]],[1564706968534,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3846,"\n其中"],[-1,4701,"\n"],[1,4702," "],[-1,4905,"\n"],[1,4906," "],[-1,4972,"\n"],[1,4973," "],[-1,5032,"\n"],[1,5033," "]],[2539,2539],[5034,5034]]],[1564706968534,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3846,"\n其中"],[1,4704,"\n"],[-1,4704," "],[1,4908,"\n"],[-1,4908," "],[1,4975,"\n"],[-1,4975," "],[1,5035,"\n"],[-1,5035," "]],[5034,5034],[2539,2539]]],[1564706941846,["GJX@GJXAIOU",[[1,3837,"创建数据表和查询数据表为例"]],[3837,3837],[3850,3850]]],[1564706943519,["GJX@GJXAIOU",[[1,3851,"\n"]],[3851,3851],[3852,3852]]],[1564706950957,["GJX@GJXAIOU",[[-1,3830,"是"]],[3831,3831],[3830,3830]]],[1564706954768,["GJX@GJXAIOU",[[1,3859,"- "]],[3859,3859],[3861,3861]]],[1564706959119,["GJX@GJXAIOU",[[-1,3851,"        "]],[3859,3859],[3851,3851]]],[1564706960368,["GJX@GJXAIOU",[[1,3851,"  "]],[3851,3851],[3853,3853]]],[1564706961624,["GJX@GJXAIOU",[[1,3855," "]],[3854,3854],[3855,3855]]],[1564706968183,["GJX@GJXAIOU",[[1,3855,"创建表格：\n  "]],[3855,3855],[3863,3863]]],[1564707028534,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3864,"\n其中"],[-1,4719,"\n"],[1,4720," "],[-1,4923,"\n"],[1,4924," "],[-1,4990,"\n"],[1,4991," "],[-1,5050,"\n"],[1,5051," "]],[2539,2539],[5052,5052]]],[1564707028534,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3864,"\n其中"],[1,4722,"\n"],[-1,4722," "],[1,4926,"\n"],[-1,4926," "],[1,4993,"\n"],[-1,4993," "],[1,5053,"\n"],[-1,5053," "]],[5052,5052],[2539,2539]]],[1564706970752,["GJX@GJXAIOU",[[-1,3862,"  "]],[3863,3863],[3861,3861]]],[1564706970974,["GJX@GJXAIOU",[[-1,3860,"\n"]],[3861,3861],[3860,3860]]],[1564706972046,["GJX@GJXAIOU",[[1,3860,"\n  "]],[3860,3860],[3863,3863]]],[1564706980799,["GJX@GJXAIOU",[[1,3864,"  "]],[3863,3863],[3865,3865]]],[1564706981145,["GJX@GJXAIOU",[[1,3865,"-"]],[3865,3865],[3866,3866]]],[1564706981434,["GJX@GJXAIOU",[[1,3867," "]],[3866,3866],[3867,3867]]],[1564706983666,["GJX@GJXAIOU",[[1,3867,"步一；"]],[3867,3867],[3870,3870]]],[1564706984686,["GJX@GJXAIOU",[[-1,3869,"；"]],[3870,3870],[3869,3869]]],[1564707008479,["GJX@GJXAIOU",[[1,3869,"：通过已经创建好的工具类创建数据库连接对象：11"]],[3869,3869],[3893,3893]]],[1564707009989,["GJX@GJXAIOU",[[-1,3891,"11"]],[3893,3893],[3891,3891]]],[1564707010713,["GJX@GJXAIOU",[[1,3891,"``"]],[3891,3891],[3893,3893]]],[1564707023885,["GJX@GJXAIOU",[[1,3892,"jdbcUtil.getConnection()"]],[3892,3892],[3916,3916]]],[1564707088536,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3918,"\n其中"],[-1,4773,"\n"],[1,4774," "],[-1,4977,"\n"],[1,4978," "],[-1,5044,"\n"],[1,5045," "],[-1,5104,"\n"],[1,5105," "]],[2539,2539],[5106,5106]]],[1564707088536,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3918,"\n其中"],[1,4776,"\n"],[-1,4776," "],[1,4980,"\n"],[-1,4980," "],[1,5047,"\n"],[-1,5047," "],[1,5107,"\n"],[-1,5107," "]],[5106,5106],[2539,2539]]],[1564707031590,["GJX@GJXAIOU",[[1,3917,"\n    -"]],[3917,3917],[3923,3923]]],[1564707031768,["GJX@GJXAIOU",[[1,3924," "]],[3923,3923],[3924,3924]]],[1564707032306,["GJX@GJXAIOU",[[1,3924,"bu"]],[3924,3924],[3926,3926]]],[1564707032938,["GJX@GJXAIOU",[[-1,3924,"bu"]],[3926,3926],[3924,3924]]],[1564707040930,["GJX@GJXAIOU",[[1,3924,"步二：获取Statement"]],[3924,3924],[3938,3938]]],[1564707040982,["GJX@GJXAIOU",[[1,3929," "]],[3938,3938],[3939,3939]]],[1564707043628,["GJX@GJXAIOU",[[1,3939,"（）"]],[3939,3939],[3941,3941]]],[1564707048137,["GJX@GJXAIOU",[[1,3940,"SQL语句"]],[3940,3940],[3945,3945]]],[1564707048188,["GJX@GJXAIOU",[[1,3943," "]],[3945,3945],[3946,3946]]],[1564707050456,["GJX@GJXAIOU",[[1,3946,"运输者"]],[3946,3946],[3949,3949]]],[1564707056616,["GJX@GJXAIOU",[[1,3950,"：``"]],[3950,3950],[3953,3953]]],[1564707059640,["GJX@GJXAIOU",[[1,3952,"connec"]],[3952,3952],[3958,3958]]],[1564707067690,["GJX@GJXAIOU",[[1,3892,"conn"]],[3892,3892],[3896,3896]]],[1564707072718,["GJX@GJXAIOU",[[-1,3892,"conn"]],[3896,3896],[3892,3892]]],[1564707082778,["GJX@GJXAIOU",[[1,3892,"Connection connection = "]],[3892,3892],[3916,3916]]],[1564707087577,["GJX@GJXAIOU",[[1,3982,"tion"]],[3982,3982],[3986,3986]]],[1564707148540,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,3988,"\n其中"],[-1,4843,"\n"],[1,4844," "],[-1,5047,"\n"],[1,5048," "],[-1,5114,"\n"],[1,5115," "],[-1,5174,"\n"],[1,5175," "]],[2539,2539],[5176,5176]]],[1564707148540,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,3988,"\n其中"],[1,4846,"\n"],[-1,4846," "],[1,5050,"\n"],[-1,5050," "],[1,5117,"\n"],[-1,5117," "],[1,5177,"\n"],[-1,5177," "]],[5176,5176],[2539,2539]]],[1564707103241,["GJX@GJXAIOU",[[1,3986,".createStatement();"]],[3986,3986],[4005,4005]]],[1564707109156,["GJX@GJXAIOU",[[1,3976,"stat"]],[3976,3976],[3980,3980]]],[1564707110399,["GJX@GJXAIOU",[[-1,3975,"`stat"]],[3980,3980],[3975,3975]]],[1564707112778,["GJX@GJXAIOU",[[1,3975,"1"]],[3975,3975],[3976,3976]]],[1564707113518,["GJX@GJXAIOU",[[-1,3975,"1"]],[3976,3976],[3975,3975]]],[1564707117449,["GJX@GJXAIOU",[[1,3975,"`S "]],[3975,3975],[3978,3978]]],[1564707118709,["GJX@GJXAIOU",[[-1,3977," "]],[3978,3978],[3977,3977]]],[1564707129624,["GJX@GJXAIOU",[[1,3977,"tatement statement = "]],[3977,3977],[3998,3998]]],[1564707136377,["GJX@GJXAIOU",[[1,4028,"\n    -"]],[4028,4028],[4034,4034]]],[1564707136558,["GJX@GJXAIOU",[[1,4035," "]],[4034,4034],[4035,4035]]],[1564707136981,["GJX@GJXAIOU",[[1,4035,"bu"]],[4035,4035],[4037,4037]]],[1564707137749,["GJX@GJXAIOU",[[-1,4035,"bu"]],[4037,4037],[4035,4035]]],[1564707147840,["GJX@GJXAIOU",[[1,4035,"步三：准备SQL"]],[4035,4035],[4043,4043]]],[1564707147887,["GJX@GJXAIOU",[[1,4040," "]],[4043,4043],[4044,4044]]],[1564707208539,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,4045,"\n其中"],[-1,4900,"\n"],[1,4901," "],[-1,5104,"\n"],[1,5105," "],[-1,5171,"\n"],[1,5172," "],[-1,5231,"\n"],[1,5232," "]],[2539,2539],[5233,5233]]],[1564707208539,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,4045,"\n其中"],[1,4903,"\n"],[-1,4903," "],[1,5107,"\n"],[-1,5107," "],[1,5174,"\n"],[-1,5174," "],[1,5234,"\n"],[-1,5234," "]],[5233,5233],[2539,2539]]],[1564707148938,["GJX@GJXAIOU",[[1,4044,"语句"]],[4044,4044],[4046,4046]]],[1564707148986,["GJX@GJXAIOU",[[1,4044," "]],[4046,4046],[4047,4047]]],[1564707164760,["GJX@GJXAIOU",[[1,4047,"，语句的最后不需要分号：``"]],[4047,4047],[4061,4061]]],[1564707170319,["GJX@GJXAIOU",[[1,4060,"string sql = :"]],[4060,4060],[4074,4074]]],[1564707171405,["GJX@GJXAIOU",[[-1,4073,":"]],[4074,4074],[4073,4073]]],[1564707173407,["GJX@GJXAIOU",[[1,4073,"\"\";"]],[4073,4073],[4076,4076]]],[1564707177589,["GJX@GJXAIOU",[[-1,4060,"s"]],[4061,4061],[4060,4060]]],[1564707178032,["GJX@GJXAIOU",[[1,4060,"S"]],[4060,4060],[4061,4061]]],[1564707184279,["GJX@GJXAIOU",[[1,4077,"\n    -"]],[4077,4077],[4083,4083]]],[1564707184488,["GJX@GJXAIOU",[[1,4084," "]],[4083,4083],[4084,4084]]],[1564707185107,["GJX@GJXAIOU",[[1,4084,"bu"]],[4084,4084],[4086,4086]]],[1564707185625,["GJX@GJXAIOU",[[-1,4084,"bu"]],[4086,4086],[4084,4084]]],[1564707186006,["GJX@GJXAIOU",[[1,4084,"bu"]],[4084,4084],[4086,4086]]],[1564707186226,["GJX@GJXAIOU",[[1,4087," "]],[4086,4086],[4087,4087]]],[1564707187168,["GJX@GJXAIOU",[[-1,4084,"bu  "]],[4087,4087],[4083,4083]]],[1564707187346,["GJX@GJXAIOU",[[1,4083,"b"]],[4083,4083],[4084,4084]]],[1564707187931,["GJX@GJXAIOU",[[-1,4083,"b"]],[4084,4084],[4083,4083]]],[1564707191609,["GJX@GJXAIOU",[[1,4083,"步四："]],[4083,4083],[4086,4086]]],[1564707193216,["GJX@GJXAIOU",[[1,4083," "]],[4083,4083],[4084,4084]]],[1564707206411,["GJX@GJXAIOU",[[1,4088,"通过statement"]],[4088,4088],[4099,4099]]],[1564707206465,["GJX@GJXAIOU",[[1,4090," "]],[4099,4099],[4100,4100]]],[1564707207576,["GJX@GJXAIOU",[[1,4100,"执行"]],[4100,4100],[4102,4102]]],[1564707207625,["GJX@GJXAIOU",[[1,4100," "]],[4102,4102],[4103,4103]]],[1564707268541,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,4103,"\n其中"],[-1,4958,"\n"],[1,4959," "],[-1,5162,"\n"],[1,5163," "],[-1,5229,"\n"],[1,5230," "],[-1,5289,"\n"],[1,5290," "]],[2539,2539],[5291,5291]]],[1564707268541,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,4103,"\n其中"],[1,4961,"\n"],[-1,4961," "],[1,5165,"\n"],[-1,5165," "],[1,5232,"\n"],[-1,5232," "],[1,5292,"\n"],[-1,5292," "]],[5291,5291],[2539,2539]]],[1564707209381,["GJX@GJXAIOU",[[1,4103,"SQL"]],[4103,4103],[4106,4106]]],[1564707209429,["GJX@GJXAIOU",[[1,4103," "]],[4106,4106],[4107,4107]]],[1564707210506,["GJX@GJXAIOU",[[1,4107,"语句"]],[4107,4107],[4109,4109]]],[1564707210553,["GJX@GJXAIOU",[[1,4107," "]],[4109,4109],[4110,4110]]],[1564707221090,["GJX@GJXAIOU",[[1,4110,"：statement."]],[4110,4110],[4121,4121]]],[1564707225208,["GJX@GJXAIOU",[[1,4111,"`"]],[4111,4111],[4112,4112]]],[1564707227592,["GJX@GJXAIOU",[[1,4122,"`"]],[4122,4122],[4123,4123]]],[1564707238608,["GJX@GJXAIOU",[[1,4122,"executeUpa"]],[4122,4122],[4132,4132]]],[1564707239104,["GJX@GJXAIOU",[[-1,4131,"a"]],[4132,4132],[4131,4131]]],[1564707242115,["GJX@GJXAIOU",[[1,4131,"date()"]],[4131,4131],[4137,4137]]],[1564707243794,["GJX@GJXAIOU",[[1,4136,"sql"]],[4136,4136],[4139,4139]]],[1564707246201,["GJX@GJXAIOU",[[1,4140,";"]],[4140,4140],[4141,4141]]],[1564707328634,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[1,4142,"\n其中"],[-1,4997,"\n"],[1,4998," "],[-1,5201,"\n"],[1,5202," "],[-1,5268,"\n"],[1,5269," "],[-1,5328,"\n"],[1,5329," "]],[2539,2539],[5330,5330]]],[1564707328634,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[-1,4142,"\n其中"],[1,5000,"\n"],[-1,5000," "],[1,5204,"\n"],[-1,5204," "],[1,5271,"\n"],[-1,5271," "],[1,5331,"\n"],[-1,5331," "]],[5330,5330],[2539,2539]]],[1564707276238,["GJX@GJXAIOU",[[1,4143,"    - \n"]],[4142,4142],[4149,4149]]],[1564707277903,["GJX@GJXAIOU",[[1,4149,"bu"]],[4149,4149],[4151,4151]]],[1564707278495,["GJX@GJXAIOU",[[-1,4149,"bu"]],[4151,4151],[4149,4149]]],[1564707278913,["GJX@GJXAIOU",[[1,4149,"bu"]],[4149,4149],[4151,4151]]],[1564707279880,["GJX@GJXAIOU",[[-1,4149,"bu"]],[4151,4151],[4149,4149]]],[1564707290064,["GJX@GJXAIOU",[[1,4149,"步五：关闭资源：``"]],[4149,4149],[4159,4159]]],[1564707291498,["GJX@GJXAIOU",[[1,4158,"js"]],[4158,4158],[4160,4160]]],[1564707293006,["GJX@GJXAIOU",[[-1,4159,"s"]],[4160,4160],[4159,4159]]],[1564707295602,["GJX@GJXAIOU",[[1,4159,"dbcUtil"]],[4159,4159],[4166,4166]]],[1564707298884,["GJX@GJXAIOU",[[-1,4158,"j"]],[4159,4159],[4158,4158]]],[1564707299999,["GJX@GJXAIOU",[[1,4158,"J"]],[4158,4158],[4159,4159]]],[1564707312247,["GJX@GJXAIOU",[[1,4166,".closeConnecr"]],[4166,4166],[4179,4179]]],[1564707313156,["GJX@GJXAIOU",[[-1,4178,"r"]],[4179,4179],[4178,4178]]],[1564707315125,["GJX@GJXAIOU",[[1,4178,"tion()"]],[4178,4178],[4184,4184]]],[1564707326337,["GJX@GJXAIOU",[[1,4183,"conn.., sta."]],[4183,4183],[4195,4195]]],[1564707326924,["GJX@GJXAIOU",[[-1,4194,"."]],[4195,4195],[4194,4194]]],[1564707328497,["GJX@GJXAIOU",[[1,4195,";"]],[4195,4195],[4196,4196]]],[1564707388630,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4142," "],[1,4143,"\n"],[1,4198,"其中 "],[-1,5052,"\n"],[1,5053," "],[-1,5256,"\n"],[1,5257," "],[-1,5323,"\n"],[1,5324," "],[-1,5383,"\n"],[1,5384," "]],[2539,2539],[5385,5385]]],[1564707388630,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4142," "],[-1,4142,"\n"],[-1,4198,"其中 "],[1,5055,"\n"],[-1,5055," "],[1,5259,"\n"],[-1,5259," "],[1,5326,"\n"],[-1,5326," "],[1,5386,"\n"],[-1,5386," "]],[5385,5385],[2539,2539]]],[1564707357883,["GJX@GJXAIOU",[[1,3860,"tong"]],[3860,3860],[3864,3864]]],[1564707359501,["GJX@GJXAIOU",[[-1,3860,"tong"]],[3864,3864],[3860,3860]]],[1564707372042,["GJX@GJXAIOU",[[1,3860,"同删除、修改操作，仅仅是SQL"]],[3860,3860],[3875,3875]]],[1564707372090,["GJX@GJXAIOU",[[1,3872," "]],[3875,3875],[3876,3876]]],[1564707373152,["GJX@GJXAIOU",[[1,3876,"语句"]],[3876,3876],[3878,3878]]],[1564707373201,["GJX@GJXAIOU",[[1,3876," "]],[3878,3878],[3879,3879]]],[1564707375978,["GJX@GJXAIOU",[[1,3879,"不通"]],[3879,3879],[3881,3881]]],[1564707376588,["GJX@GJXAIOU",[[-1,3880,"通"]],[3881,3881],[3880,3880]]],[1564707377785,["GJX@GJXAIOU",[[1,3880,"同"]],[3880,3880],[3881,3881]]],[1564707380940,["GJX@GJXAIOU",[[1,4219,"    - \n"]],[4218,4218],[4225,4225]]],[1564707384901,["GJX@GJXAIOU",[[-1,4219,"    "]],[4225,4225],[4221,4221]]],[1564707386710,["GJX@GJXAIOU",[[1,4219,"  "]],[4221,4221],[4223,4223]]],[1564707448634,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4163," "],[1,4164,"\n"],[1,4224,"其中 "],[-1,5078,"\n"],[1,5079," "],[-1,5282,"\n"],[1,5283," "],[-1,5349,"\n"],[1,5350," "],[-1,5409,"\n"],[1,5410," "]],[2539,2539],[5411,5411]]],[1564707448634,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4163," "],[-1,4163,"\n"],[-1,4224,"其中 "],[1,5081,"\n"],[-1,5081," "],[1,5285,"\n"],[-1,5285," "],[1,5352,"\n"],[-1,5352," "],[1,5412,"\n"],[-1,5412," "]],[5411,5411],[2539,2539]]],[1564707402584,["GJX@GJXAIOU",[[1,4223,"查询信息：即查操作"]],[4223,4223],[4232,4232]]],[1564707404500,["GJX@GJXAIOU",[[1,4233,"  - \n"]],[4232,4232],[4237,4237]]],[1564707406029,["GJX@GJXAIOU",[[1,4235,"  "]],[4237,4237],[4239,4239]]],[1564707424644,["GJX@GJXAIOU",[[1,4239,"步一：连接数据库，同时"]],[4239,4239],[4250,4250]]],[1564707425253,["GJX@GJXAIOU",[[-1,4249,"时"]],[4250,4250],[4249,4249]]],[1564707426714,["GJX@GJXAIOU",[[1,4249,"上；"]],[4249,4249],[4251,4251]]],[1564707426974,["GJX@GJXAIOU",[[1,4252,"    - \n"]],[4251,4251],[4258,4258]]],[1564707438945,["GJX@GJXAIOU",[[1,4258,"步二：获取state"]],[4258,4258],[4268,4268]]],[1564707438994,["GJX@GJXAIOU",[[1,4263," "]],[4268,4268],[4269,4269]]],[1564707440997,["GJX@GJXAIOU",[[-1,4263," state"]],[4269,4269],[4263,4263]]],[1564707445000,["GJX@GJXAIOU",[[1,4263,"Statement"]],[4263,4263],[4272,4272]]],[1564707445052,["GJX@GJXAIOU",[[1,4263," "]],[4272,4272],[4273,4273]]],[1564707508637,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4163," "],[1,4164,"\n"],[1,4274,"其中 "],[-1,4314,""],[-1,5128,"\n"],[1,5129," "],[-1,5332,"\n"],[1,5333," "],[-1,5399,"\n"],[1,5400," "],[-1,5459,"\n"],[1,5460," "]],[2539,2539],[5461,5461]]],[1564707508637,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4163," "],[-1,4163,"\n"],[-1,4274,"其中 "],[1,4317,""],[1,5131,"\n"],[-1,5131," "],[1,5335,"\n"],[-1,5335," "],[1,5402,"\n"],[-1,5402," "],[1,5462,"\n"],[-1,5462," "]],[5461,5461],[2539,2539]]],[1564707449356,["GJX@GJXAIOU",[[1,4274,"    - \n"]],[4273,4273],[4280,4280]]],[1564707456346,["GJX@GJXAIOU",[[1,4280,"步三：准备SQL"]],[4280,4280],[4288,4288]]],[1564707456396,["GJX@GJXAIOU",[[1,4285," "]],[4288,4288],[4289,4289]]],[1564707457291,["GJX@GJXAIOU",[[1,4289,"语句"]],[4289,4289],[4291,4291]]],[1564707457340,["GJX@GJXAIOU",[[1,4289," "]],[4291,4291],[4292,4292]]],[1564707458770,["GJX@GJXAIOU",[[1,4292,"；"]],[4292,4292],[4293,4293]]],[1564707460714,["GJX@GJXAIOU",[[1,4273,"；"]],[4273,4273],[4274,4274]]],[1564707462909,["GJX@GJXAIOU",[[1,4295,"    - \n"]],[4294,4294],[4301,4301]]],[1564707490328,["GJX@GJXAIOU",[[1,4301,"步四：通过statement"]],[4301,4301],[4315,4315]]],[1564707490378,["GJX@GJXAIOU",[[1,4306," "]],[4315,4315],[4316,4316]]],[1564707492177,["GJX@GJXAIOU",[[1,4316,"执行"]],[4316,4316],[4318,4318]]],[1564707492228,["GJX@GJXAIOU",[[1,4316," "]],[4318,4318],[4319,4319]]],[1564707493098,["GJX@GJXAIOU",[[1,4319,"SQL"]],[4319,4319],[4322,4322]]],[1564707493148,["GJX@GJXAIOU",[[1,4319," "]],[4322,4322],[4323,4323]]],[1564707494082,["GJX@GJXAIOU",[[1,4323,"语句"]],[4323,4323],[4325,4325]]],[1564707494133,["GJX@GJXAIOU",[[1,4323," "]],[4325,4325],[4326,4326]]],[1564707496423,["GJX@GJXAIOU",[[1,4326,"：``"]],[4326,4326],[4329,4329]]],[1564707508346,["GJX@GJXAIOU",[[1,4328,"statement.execute"]],[4328,4328],[4345,4345]]],[1564707568637,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4163," "],[1,4164,"\n"],[1,4347,"其中 "],[-1,4387,""],[-1,5201,"\n"],[1,5202," "],[-1,5405,"\n"],[1,5406," "],[-1,5472,"\n"],[1,5473," "],[-1,5532,"\n"],[1,5533," "]],[2539,2539],[5534,5534]]],[1564707568637,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4163," "],[-1,4163,"\n"],[-1,4347,"其中 "],[1,4390,""],[1,5204,"\n"],[-1,5204," "],[1,5408,"\n"],[-1,5408," "],[1,5475,"\n"],[-1,5475," "],[1,5535,"\n"],[-1,5535," "]],[5534,5534],[2539,2539]]],[1564707517052,["GJX@GJXAIOU",[[1,4345,"Query()"]],[4345,4345],[4352,4352]]],[1564707518746,["GJX@GJXAIOU",[[1,4351,"sql"]],[4351,4351],[4354,4354]]],[1564707528713,["GJX@GJXAIOU",[[1,4355,";"]],[4355,4355],[4356,4356]]],[1564707533906,["GJX@GJXAIOU",[[1,4328,"Re"]],[4328,4328],[4330,4330]]],[1564707534305,["GJX@GJXAIOU",[[1,4331,"s"]],[4330,4330],[4331,4331]]],[1564707538752,["GJX@GJXAIOU",[[1,4331,"ultSet "]],[4331,4331],[4338,4338]]],[1564707539096,["GJX@GJXAIOU",[[1,4339,"s"]],[4338,4338],[4339,4339]]],[1564707541329,["GJX@GJXAIOU",[[1,4339,"et = "]],[4339,4339],[4344,4344]]],[1564707628640,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4163," "],[1,4164,"\n"],[1,4374,"其中 "],[-1,4414,""],[-1,5228,"\n"],[1,5229," "],[-1,5432,"\n"],[1,5433," "],[-1,5499,"\n"],[1,5500," "],[-1,5559,"\n"],[1,5560," "]],[2539,2539],[5561,5561]]],[1564707628640,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4163," "],[-1,4163,"\n"],[-1,4374,"其中 "],[1,4417,""],[1,5231,"\n"],[-1,5231," "],[1,5435,"\n"],[-1,5435," "],[1,5502,"\n"],[-1,5502," "],[1,5562,"\n"],[-1,5562," "]],[5561,5561],[2539,2539]]],[1564707575357,["GJX@GJXAIOU",[[1,4374,"    - \n"]],[4373,4373],[4380,4380]]],[1564707576828,["GJX@GJXAIOU",[[1,4380,"bu"]],[4380,4380],[4382,4382]]],[1564707577541,["GJX@GJXAIOU",[[-1,4380,"bu"]],[4382,4382],[4380,4380]]],[1564707585632,["GJX@GJXAIOU",[[1,4380,"步五：关闭资源：``"]],[4380,4380],[4390,4390]]],[1564707591933,["GJX@GJXAIOU",[[1,4389,"JdbcUtil.co"]],[4389,4389],[4400,4400]]],[1564707592855,["GJX@GJXAIOU",[[-1,4399,"o"]],[4400,4400],[4399,4399]]],[1564707593529,["GJX@GJXAIOU",[[1,4399,"lse"]],[4399,4399],[4402,4402]]],[1564707594269,["GJX@GJXAIOU",[[-1,4401,"e"]],[4402,4402],[4401,4401]]],[1564707594688,["GJX@GJXAIOU",[[1,4401,"o"]],[4401,4401],[4402,4402]]],[1564707595829,["GJX@GJXAIOU",[[-1,4400,"so"]],[4402,4402],[4400,4400]]],[1564707598793,["GJX@GJXAIOU",[[1,4400,"oseConnd"]],[4400,4400],[4408,4408]]],[1564707599405,["GJX@GJXAIOU",[[-1,4407,"d"]],[4408,4408],[4407,4407]]],[1564707612384,["GJX@GJXAIOU",[[1,4407,"ectionWithResult()"]],[4407,4407],[4425,4425]]],[1564707616327,["GJX@GJXAIOU",[[1,4424,"con,,"]],[4424,4424],[4429,4429]]],[1564707617941,["GJX@GJXAIOU",[[-1,4427,",,"]],[4429,4429],[4427,4427]]],[1564707625584,["GJX@GJXAIOU",[[1,4427,".., state.., "]],[4427,4427],[4440,4440]]],[1564707688681,[null,[[-1,2539,"\n"],[1,2540,"步"],[-1,2954,"其"],[1,2955,"\n"],[-1,3502,"\n "],[1,3504,"连接"],[-1,3525," "],[1,3526,"\n"],[-1,4163," "],[1,4164,"\n"],[1,4443,"其中 "],[-1,4483,""],[-1,5297,"\n"],[1,5298," "],[-1,5501,"\n"],[1,5502," "],[-1,5568,"\n"],[1,5569," "],[-1,5628,"\n"],[1,5629," "]],[2539,2539],[5630,5630]]],[1564707688681,[null,[[1,2539,"\n"],[-1,2539,"步"],[1,2954,"其"],[-1,2954,"\n"],[1,3502,"\n "],[-1,3502,"连接"],[1,3525," "],[-1,3525,"\n"],[1,4163," "],[-1,4163,"\n"],[-1,4443,"其中 "],[1,4486,""],[1,5300,"\n"],[-1,5300," "],[1,5504,"\n"],[-1,5504," "],[1,5571,"\n"],[-1,5571," "],[1,5631,"\n"],[-1,5631," "]],[5630,5630],[2539,2539]]],[1564707629249,["GJX@GJXAIOU",[[1,4440,"set"]],[4440,4440],[4443,4443]]],[1564707635061,["GJX@GJXAIOU",[[1,4446,"    - \n"]],[4445,4445],[4452,4452]]],[1564707637701,["GJX@GJXAIOU",[[-1,4450,"- "]],[4452,4452],[4450,4450]]],[1564707645523,["GJX@GJXAIOU",[[1,4451,"x "]],[4451,4451],[4452,4452]]],[1564707645713,["GJX@GJXAIOU",[[1,4452,"ia"]],[4452,4452],[4454,4454]]],[1564707646637,["GJX@GJXAIOU",[[-1,4451,"xia"]],[4454,4454],[4451,4451]]],[1564707649877,["GJX@GJXAIOU",[[-1,4452,"其中"]],[4454,4454],[4452,4452]]],[1564707654882,["GJX@GJXAIOU",[[1,4452,"下面代码中："]],[4452,4452],[4458,4458]]],[1564707657096,["GJX@GJXAIOU",[[1,4459,"`"]],[4459,4459],[4460,4460]]],[1564707662048,["GJX@GJXAIOU",[[1,4499,"`"]],[4499,4499],[4500,4500]]]],null,"GJX@GJXAIOU"],["9d6b20da-9122-495f-a65f-60dc7fadfeec",1564738561850,"# JavaEEDay34数据库\n\n@toc\n\n# 笔记总结：2019-8-1\n首先是用户管理，即新建用户并授予权限以及删除用户；\n然后介绍事务；\n接着介绍数据库数据导入和导出的方法；\n最后介绍使用 Java 连接数据库；\n- 第一个代码是连接数据库的方式一；\n- 第二个代码是连接数据库和释放资源的方式二：\n- 下面的代码是基于第二种连接数据库的方式进行增删改查操作；\n最最后介绍了一种防止 SQL 注入的方式：PreparedStatement\n\n\n## 一、DCL 操作：\n一般是项目经理或者 DBA 进行管理；\n即管理用户：创建用户，给予用户操作数据的权限；\n\n\n## 二、用户管理：\n\n- 创建一个用户，用户名为 zhangsan 所在数据库的主机地址为 localhost，初始化密码：12345:\n`create user \"zhangsan\"@\"localhost\" identified by \"12345\";`\n- 授予新用户权限，上面的 localhost 也可以是一个 IP 地址；\n`grant all on hello.* to \"zhangsan\" @\"localhost\";` //将 hello 数据库赋值权限给 zhangsan;\n- 刷新权限：`flush privileges;` 至此完成新用户管理；\n- 取消授权：`revoke all on hello.* from \"zhangsan\" @ \"localhost\";`\n- 删除用户：`drop user \"zhangsan\" @ \"localhost\";`\n\n\n## 三、 DTL 事务处理\n当出现操作错误的时候，给予回退的机会；\n\n- 以银行转账为例，首先创建数据表：\n```sql\ncreate table bank(\n  userID tinyint not null primary key auto_increment,\n  money double(15,2),\n  name varchar(30)\n);\n```\n- 插入部分数据，用于测试：\n```sql\ninsert into bank(money,name) values(66,\"zhangsan\");\ninsert into bank(money,name) values(11,\"lisi\");\n```\n- 开启事务：一共两种方式：开始事务是将这个表加载在内存中进行处理，没有改变原来结构\n  - 方式一：`start transaction;`\n  - 方式二：`set autocommit = 0;`\n```sql\nstart transaction;\n```\n- 然后开始进行操作：\n```sql\nupdate bank set money = money - 55 where userID = 1;\nupdate bank set money = money + 55 where userID = 2;\n```\n- 操作完成之后，两种确认方式：\n  - 回滚，即操作中出现了异常，可以回滚到开始事务之前；命令为：`rollback;`\n  - 提交，即确认操作无误，提交开始事务之后的所有操作；命令为：`commit;`\n\n\n## 四、数据库导入导出\n使用命令行导入导出数据库，必须是没有登录数据库的状态下；\n\n\n### （一）导出数据库：\n导出的是一个.sql 文件，里面包含了所有的数据库操作信息，包括创建数据库和插入数据；\n**在未登录数据库的状态下操作以下语句：**\n`mysqldump -uroot -p hello > hello.sql;` 将 hello 数据库导出保存为 hello.sql 文件；\n**注意：** 导出文件的保存位置为当前操作的命令的文件目录下，可以通过先修改操作命令的目录进行保存位置的修改；\n\n### （二）导入数据库：\n**前提：** 必须在数据库中创建一个数据库用于接收导入的数据库,**然后退出数据库，操作以下语句：**\n`mysql -uroot -p receiveHello < hello.sql;` 将 hello.sql 数据库导入到 receiveHello 数据库中；\n\n\n## 五、Java 连接数据库方式  \nJDBC：Java Database Connectivity 操作数据库的规范；\n\nJDBC 主要通过接口实现，组成 JDBC 中两个包：java.sql 和 javax.sql，以上两个包是 JavaSE 中包含的，但是需要导入 JDBC 的实现类才可以使用，该实现类是由第三方数据库提供商完成；\n\nJDBC 主要的接口和类：\n- Driver 接口：连接数据库的驱动 API；\n- DriverManager 类：驱动管理类，负责驱动的注册（加载），获取数据库连接；\n- Statement 接口：负责 SQL 语句的执行；\n  - PreparedStatement 接口：负责 SQL 语句的预处理；\n- ResultSet 接口：处理查询数据库的结果集；\n\n\n### （一）通过 JDBC 连接 MySQL\n\n- 需要一：确定数据库的 URL；\n  - 例如：`jdbc:mysql://localhost:3306/hello` 协议：子协议：//IP：端口号/数据库名？参数\n    - 协议：JDBC 总协议；\n    - 子协议：目前使用的是连接 MySQL 数据库的协议；\n    - IP：是数据库服务器的 IP 地址，localhost 表示本机的 IP 地址；\n    - 端口号：3306 MySQL 默认的端口号，可以修改；\n    - 数据库名：目前连接的操作的数据库是哪一个；\n    - 参数：通常为：`useUnicode = true ` `characterEncoding = utf-8`;\n\n- 需要二：连接数据库需要用户名和密码：\n\n\n==具体的连接操作方式：==\n- 方式一：直接在代码中写入要操作的数据库以及用户名和密码信息，但是代码不可复用；\n  - 步一：通过 `Class.forName(“com.mysql.jdbc.cj.Driver”);` 注册驱动;\n  - 步二：准备 URL：`jdbc:mysql://数据库IP:3306/数据库名 ? serverTimezone = GMT%2B8`;\n  - 步三：通过 DriverManager 连接对象：即调用：`DriverManager.getConnection(url, 用户名， 密码)`；\n  - 步四：关闭数据库：`连接对象.close()`;\n\n- 方式二：使用.properties 文件\n  - 步一：建立.properties 文件，内容为：\n```\ndriver = com.mysql.jdbc.cj.Driver\nuser = 用户名\npassword = 密码\nurl = jdbc:mysql://IP:3306/数据库名 ? serverTimezone = GMT%2B8\n```\n  - 步二：建立 JdbcUtil.java 类，里面包含数据库连接和关闭的方式\n      -  准备工作：\n        - 步一：读取配置文件，即.properties 文件：`Properties p = new Properties();` 并将其加入到内存之中：`InputStream is = new FileInputStream(文件路径)`\n        - 步二：利用 Properties 里面的 load 方法：`p.load(is)`\n        - 步三：通过 properties 类对象获取想要的数据：`p.getProperty(\"url\");等等`\n        - 步四：加载类文件：`Class.forName(driver)`\n        - 步五：关闭资源：在 finally 里面加入：`is.close();`\n      - 进行连接：\n        - 步一：建立新的连接方法：`getConnection(),返回值为Connection类型`\n        - 步二：建立连接：`DriveManager.getConnection(url, user, password)`\n        - 步三：返回建立的连接：`return connection;`\n      - 关闭连接：\n        - 类一：没有结果集的关闭（针对：增、删、改操作）\n          - 步一：新建的关闭方法中参数为 Connection 和 Statement 类型；\n          - 步二：逐个关闭资源：先关闭 statement，后关闭 Connection；\n        - 类二：含有结果集的关闭（针对：查操作）\n          - 步一：方法中的参数为：Connection、Statement、ResultSet 类型；\n          - 步二：逐个关闭资源：顺序为：Statement、Connection、ResultSet\n\n- 具体实现类：（以创建数据表和查询数据表为例）\n  - 创建表格：同删除、修改操作，仅仅是 SQL 语句不同\n    - 步一：通过已经创建好的工具类创建数据库连接对象：`Connection connection = jdbcUtil.getConnection()`\n    - 步二：获取 Statement（SQL 语句运输者）：`Statement statement = connection.createStatement();`\n    - 步三：准备 SQL 语句，语句的最后不需要分号：`String sql = \"\";`\n    - 步四： 通过 statement 执行 SQL 语句：`statement.executeUpdate(sql);`\n    - 步五：关闭资源：`JdbcUtil.closeConnection(conn.., sta);`\n  - 查询信息：即查操作\n    - 步一：连接数据库，同上；\n    - 步二：获取 Statement；\n    - 步三：准备 SQL 语句；\n    - 步四：通过 statement 执行 SQL 语句：`ResultSet set = statement.executeQuery(sql);`\n    - 步五：关闭资源：`JdbcUtil.closeConnectionWithResult(con.., state.., set)`\n    \n 下面代码中： `Class.forName(\"com.mysql.jdbc.Driver\");`\n  这句话首先会加载com.mysql.jdbc.Driver类文件到内存当中，而在这个类文件中有一下这段代码\n   static {\n        try {\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException(\"Can't register driver!\");\n        }\n    }\n 这个代码块是一个静态代码块，会在类文件加载到内存时，直接运行\n 而在这个静态代码块中，完成了以下这些事情：\n \t1. 创建的MySQL连接的Java程序的JDBC.Driver对象\n \t2. 将这个创建的Driver对象，注册到java.sql.DriverManager里面\n\n 这样做到好处：\n \t简化代码的逻辑，提高效率\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-01-14:14\n */\npublic class JdbcConnection {\n    @Test\n    public void connection()  {\n        // 1.注册驱动 JDBC 连接MySQL\n        try {\n         Class.forName(\"com.mysql.cj.jdbc.Driver\");\n\n        // 2.准备url，是JDBC所要连接MySQL数据库的URL，后面参数为设置时区\n        String url = \"jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8\" ;\n\n        // 3.通过DriverManager连接对象\n        Connection con = null;\n        con = DriverManager.getConnection(url, \"root\", \"GJXAIOU\");\n        System.out.println(con);\n\n        // 4.关闭数据库连接，释放资源\n        con.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n程序运行结果：`com.mysql.cj.jdbc.ConnectionImpl@15761df8`\n\n- 方式二：将数据库的具体信息写入：.properties 文件中，然后使用 Java 代码读取文件中信息，更改数据库信息只要在.properties 文件中修改就行；\ndb.properties\n```properties\ndriver = com.mysql.cj.jdbc.Driver \nurl = jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8 \nuser = root \npassword = GJXAIOU\n```\nJdbcUtil.java  数据库连接自定义工具类\n\n- 自定义JDBC工具类 \n1. 加载驱动\n2. 获取连接对象\n3. 关闭连接 \n \t\n 把连接数据库需要的信息，都保存在一个文件中，这个文件是一个properties文件\n```java\npackage jdbc.connection;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\n/**实现数据库连接和资源关闭操作\n * @author GJXAIOU\n * @create 2019-08-01-15:16\n */\npublic class JdbcUtil {\n   private static String url = null;\n   private static String user = null;\n   private static String password = null;\n   private static String driver = null;\n   private static InputStream inputStream = null;\n\n   // 这里利用静态代码块的特征，在类文件加载到内存的时候，\n   // 就会执行在静态代码块中的代码\n    static {\n       // 1.读取配置文件信息，即读取properties文件\n       Properties properties = new Properties();\n       // 如果一个properties文件加载到内存中，需要借助IO流；\n       try {\n           inputStream = new FileInputStream(\n                   \"E:\\\\Program\\\\Java\\\\Project\\\\VideoClass\\\\JavaEEDay34\" +\n                           \"\\\\src\\\\jdbc\\\\connection\\\\db.properties\");\n       } catch (FileNotFoundException e) {\n           e.printStackTrace();\n       }\n\n       // 2.利用properties里面的load方法\n       try {\n           properties.load(inputStream);\n       } catch (IOException e) {\n           e.printStackTrace();\n       }\n\n       // 3.可以通过properties类对象，获取想要的数据\n       url = properties.getProperty(\"url\");\n       user = properties.getProperty(\"user\");\n       password = properties.getProperty(\"password\");\n       driver = properties.getProperty(\"driver\");\n\n       // 4.加载类文件\n       try {\n           Class.forName(driver);\n       } catch (ClassNotFoundException e) {\n           e.printStackTrace();\n           System.out.println(\"驱动加载失败\");\n       }finally {\n           // 关闭文件连接\n           if (inputStream != null){\n               try {\n                   inputStream.close();\n               } catch (IOException e) {\n                   e.printStackTrace();\n               }\n           }\n       }\n   }\n\n\n    /**\n     * 获取数据库连接对象\n     * @return Connection对象\n     */\n   public static Connection getConnection(){\n       Connection connection = null;\n       try {\n           connection = DriverManager.getConnection(url, user, password);\n       } catch (SQLException e) {\n           e.printStackTrace();\n       }\n\n       return  connection;\n   }\n\n    /**\n     * 关闭数据库连接，释放statement\n     * @param connection 数据库连接对象\n     * @param statement statement对象\n     */\n    public static void closeConnection(Connection connection, Statement statement){\n\n        try {\n            if (statement != null){\n                statement.close();\n            }\n\n            if (connection != null){\n            connection.close();\n            }\n        }catch (SQLException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 关闭带有结果集的查询语句资源\n     * @param connection 数据库连接对象\n     * @param statement statement 对象\n     * @param set 结果集\n     */\n    public static void closeConnectionWithResult(Connection connection, Statement statement, ResultSet set){\n        if (statement != null){\n            try {\n                statement.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (connection != null){\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (set != null){\n            try {\n                set.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n\n}\n\n\n```\n\njdbcRealizationTest.java\n 实现常见的增删改查操作：\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n/**使用JdbcUtil工具类创建并操作数据表\n * @author GJXAIOU\n * @create 2019-08-01-16:07\n */\npublic class JdbcRealizationTest {\n\n    /**\n     * 通过JDBC创建数据表\n     */\n    @Test\n    public void createTable()  {\n        // 1.通过已经封装好的JdbcUtil工具类，获取数据库的连接对象\n        Connection connection = JdbcUtil.getConnection();\n\n        try {\n            // 2.获取Statement，即SQL语句的运输者，作用是将SQL语句运输到MySQL中，让MySQL运行\n            Statement statement = connection.createStatement();\n\n            // 3.准备好SQL语句，语句最后不用分号\n            String sql = \"create table person(\" +\n                    \"  id   tinyint  not null  primary key  auto_increment,\" +\n                    \"  name  char(5) not null,\" +\n                    \"  gender  char(1),\" +\n                    \"  score  decimal(4, 2),\" +\n                    \"  home  enum(\\\"江苏\\\", \\\"上海\\\", \\\"杭州\\\", \\\"苏州\\\"),\" +\n                    \"  hobby  set(\\\"游泳\\\", \\\"打球\\\", \\\"跑步\\\"))\";\n\n            // 4.通过statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.查看创建的结果\n            System.out.println(\"影响的行数\" + count);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 使用statement执行DML语句-- insert into\n     */\n    @Test\n    public void testInsert(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到Statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql1 = \"insert into person(name, gender, score, home, hobby) values(\\\"张三\\\", \\\"男\\\", 98.23, 2, 3)\";\n            String sql2 = \"insert into person(name, gender, score, home, hobby) values(\\\"李四五\\\", \\\"女\\\",99.00,\\\"江苏\\\", \\\"游泳,打球\\\")\";\n\n            // 4.通过statement执行SQL语句\n            int count1 = statement.executeUpdate(sql1);\n            int count2 = statement.executeUpdate(sql2);\n\n            // 5.打印影响的行数\n            System.out.println(\"改变的行数：\" + (count1 + count2));\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源:connection 是连接数据库的资源，statement是引用程序到MySQL之间的SQL语句运输者，都是资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    @Test\n    /**\n     * 使用statement删除数据库中一条数据\n     */\n    public void testDelete() {\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"delete from person where id = 1\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数：\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement修改数据库中一条数据\n     */\n    public void testUpdate(){\n        // 1.建立数据库连接\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"update person set name = '李四' where id = 2\";\n\n            // 4.使用statement执行SQL语句\n            int count = statement.executeUpdate(sql);\n\n            // 5.输出影响的行数\n            System.out.println(\"改变的行数\" + count);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            // 6.关闭所有的资源\n            JdbcUtil.closeConnection(connection, statement);\n        }\n    }\n\n    /**\n     * 使用statement查询数据库中数据并返回结果集set\n     */\n    @Test\n    public void testSelect(){\n        // 1.连接数据库\n        Connection connection = JdbcUtil.getConnection();\n\n        Statement statement = null;\n        // 查询语句返回的结果集对象\n        ResultSet set = null;\n        try {\n            // 2.获取到statement\n            statement = connection.createStatement();\n\n            // 3.准备SQL语句\n            String sql = \"select * from person\";\n\n            // 4.通过statement执行SQL语句, 获得查询结果集\n            set = statement.executeQuery(sql);\n\n            // 5.输出影响的行数\n            while(set.next()){\n                int id = set.getInt(\"id\");\n                String name = set.getString(\"name\");\n                String gender = set.getString(\"gender\");\n                BigDecimal score = set.getBigDecimal(\"score\");\n                String home = set.getString(\"home\");\n                String hobby = set.getString(\"hobby\");\n\n                System.out.println(\"id :\" + id + \" name :\" + name + \" gender :\" + gender +\n                        \" socore :\" + score + \" home :\" + home + \" hobby :\" + hobby);\n\n\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, statement, set);\n        }\n    }\n\n\n}\n\n```\n第一个 Test 结果：`影响的行数0`\n第二个 Test 结果：`改变的行数：2`\n第三个 Test 结果：`改变的行数：1`\n第四个 Test 结果：`id :2 name :李四五 gender :女 socore :99.00 home :江苏 hobby :游泳,打球`\n\n\n**上面的 set.next()方法使用说明：** 该 next()方法属于 RestltSet 中\n```\nboolean next()\n      throws [SQLException](../../java/sql/SQLException.html \"class in java.sql\")\n\n将光标从当前位置向前移动一行。 `ResultSet`光标最初位于第一行之前; 第一次调用方法`next`使第一行成为当前行; 第二个调用使第二行成为当前行，依此类推。\n\n当调用`next`方法返回`false`时，光标位于最后一行之后。 任何调用需要当前行的`ResultSet`方法将导致抛出`SQLException` 。 如果结果集类型为`TYPE_FORWARD_ONLY` ，这是他们指定的JDBC驱动程序实现是否会返回供应商`false`或抛出一个`SQLException`上的后续调用`next` 。\n\n如果当前行的输入流已打开，则对方法`next`的调用将隐式关闭它。 当读取新行时， `ResultSet`对象的警告链将被清除。\n\n结果\n\n`true`如果新的当前行有效; `false`如果没有更多的行\n\n异常\n\n`[SQLException](../../java/sql/SQLException.html \"class in java.sql\")` - 如果发生数据库访问错误，或者在关闭的结果集上调用此方法\n\n\n\n```\n\n### （二）上面总结：JDBC 核心 API\n- Driver接口：\n  - connect(url, propertie);\n      - url: JDBC连接数据库(目前为 MySQL)URL\n            标准格式为：`jdbc:mysql://localhost:3306/javaee1707?useSSL=true`\n       - propertie：\n            连接数据库的属性，主要包含的是数据库的用户名和密码\n            \n- DriverManager类：是驱动管理类，用于管理【加载/注册】过的驱动程序\n    - registerDriver(driver); 注册驱动程序\n    - Connection    getConnection(url, user, password);返回值是获取一个数据库的连接对象，需要的参数是存在JDBC协议的URL， 数据库用户名 和 密码\n\n- Connection接口：\n    -  Statement   createStament(); 创建一个Statement的实现类对象（因为 Statement 是接口）\n    - PreparedStatement   preparedStatement(String sql); 获取到一个PreparedStatement SQL语句预处理对象\n    -  CallableStatmenet    preparedCall(String sql); 了解\n\n- Statement接口：\n   - int    executeUpdate(String sql); 执行给定的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n   - ResultSet    executeQuery(String sql); 执行给定的SQL语句 DQL 查询语句，返回数据结果集\n\n- PreparedStatement接口：\n    - int    executeUpdate(); 执行预处理的SQL语句，通常用来执行DDL，DML，返回影响数据的行数\n    - ResultSet    executeQuery(); 执行预处理的SQL语句 DQL 查询语句，返回数据结果集\n    预处理有利于防止 SQL注入\n\n- ResultSet接口： 查询语句的数据结果集：\n    - boolean    next(); 得到当前数据行，并且光标指向下一个数据行，如果没有数据行，返回false\n    - getXXX(String \"字段名\"); 获取指定数据类型的字段数据\n\n\n使用 PreparedStatement 防止 SQL 注入代码：\n```java\npackage jdbc.connection;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\n\n/**使用preparedStatement防止SQL注入，因为在获取preparedStatement时候，已经对SQL语句进行了预处理\n * @author GJXAIOU\n * @create 2019-08-01-19:19\n */\npublic class PreparedStatementTest {\n    @Test\n    public void loginInTest(){\n        // 1.建立连接\n        Connection connection = null;\n        connection= JdbcUtil.getConnection();\n\n        // 2.准备预处理SQL语句，其中？为占位符，且顺序从1开始\n        String sql = \"select * from person where id = ? and name = ?\";\n\n        // 3.获取preparedStatement对象\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 4.准备参数\n        try {\n            preparedStatement.setInt(1,2);\n            preparedStatement.setString(2,\"李四五\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 5.准备接收查询结果\n        ResultSet set = null;\n        try {\n            set = preparedStatement.executeQuery();\n            System.out.println(set);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n        // 6.判断输入的参数在数据表中有没有\n        try {\n            if (set.next()){\n                System.out.println(\"登录成功\");\n            }else{\n                System.out.println(\"登录失败\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnectionWithResult(connection, preparedStatement, set);\n        }\n    }\n}\n\n```\n程序输出的结果：\n`com.mysql.cj.jdbc.result.ResultSetImpl@23529fee`\n`登录成功`\n此时对应的数据库中数据为：\n```sql\nmysql> select * from person;\n+----+-----------+--------+-------+--------+---------------+\n| id | name      | gender | score | home   | hobby         |\n+----+-----------+--------+-------+--------+---------------+\n|  2 | 李四五    | 女     | 99.00 | 江苏   | 游泳,打球     |\n+----+-----------+--------+-------+--------+---------------+\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1564738522384,["GJX@GJXAIOU",[[1,6143,"\n"]],[6142,6142],[6143,6143]]],[1564738522537,["GJX@GJXAIOU",[[1,6144,"\n"]],[6143,6143],[6144,6144]]],[1564738522656,["GJX@GJXAIOU",[[1,6145,"\n"]],[6144,6144],[6145,6145]]],[1564738522799,["GJX@GJXAIOU",[[1,6146,"\n"]],[6145,6145],[6146,6146]]],[1564738522905,["GJX@GJXAIOU",[[1,6147,"\n"]],[6146,6146],[6147,6147]]],[1564738523120,["GJX@GJXAIOU",[[1,6148,"\n"]],[6147,6147],[6148,6148]]],[1564738523243,["GJX@GJXAIOU",[[1,6149,"\n"]],[6148,6148],[6149,6149]]],[1564738527237,["GJX@GJXAIOU",[[1,6144,"zhlei"]],[6144,6144],[6149,6149]]],[1564738528775,["GJX@GJXAIOU",[[-1,6144,"zhlei"]],[6149,6149],[6144,6144]]],[1564738534030,["GJX@GJXAIOU",[[1,6144,"这里URL"]],[6144,6144],[6149,6149]]],[1564738534092,["GJX@GJXAIOU",[[1,6146," "]],[6149,6149],[6150,6150]]],[1564738535020,["GJX@GJXAIOU",[[1,6150,"后面"]],[6150,6150],[6152,6152]]],[1564738535071,["GJX@GJXAIOU",[[1,6150," "]],[6152,6152],[6153,6153]]],[1564738539937,["GJX@GJXAIOU",[[1,6153,"对应的参数与"]],[6153,6153],[6159,6159]]],[1564738541392,["GJX@GJXAIOU",[[-1,6156,"参数与"]],[6159,6159],[6156,6156]]],[1564738543493,["GJX@GJXAIOU",[[1,6156,"总要"]],[6156,6156],[6158,6158]]],[1564738543968,["GJX@GJXAIOU",[[-1,6156,"总要"]],[6158,6158],[6156,6156]]],[1564738560387,["GJX@GJXAIOU",[[1,6156,"重要参数见下面：不同参数之间用 "]],[6156,6156],[6172,6172]]],[1564738566346,["GJX@GJXAIOU",[[1,6172,"&"]],[6172,6172],[6173,6173]]],[1564738568905,["GJX@GJXAIOU",[[1,6172,"`"]],[6172,6172],[6173,6173]]],[1564738573675,["GJX@GJXAIOU",[[1,6174,"`进行分割"]],[6174,6174],[6179,6179]]],[1564738574026,["GJX@GJXAIOU",[[1,6185,"\n"]],[6179,6179],[6180,6180]]],[1564738583889,["GJX@GJXAIOU",[[1,6180,"| 参数名称 | 参数说明 | 缺省值 | 最低版本要求 |\n| user | 数据库用户名（用于连接数据库） | \n | 所有版本 |\n| password | 用户密码（用于连接数据库） | \n | 所有版本 |\n| useUnicode | 是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true | false | 1.1g |\n| characterEncoding | 当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk | false | 1.1g |\n| autoReconnect | 当数据库连接异常中断时，是否自动重新连接？ | false | 1.1 |\n| autoReconnectForPools | 是否使用针对数据库连接池的重连策略 | false | 3.1.3 |\n| failOverReadOnly | 自动重连成功后，连接是否设置为只读？ | true | 3.0.12 |\n| maxReconnects | autoReconnect设置为true时，重试连接的次数 | 3 | 1.1 |\n| initialTimeout | autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒 | 2 | 1.1 |\n| connectTimeout | 和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本 | 0 | 3.0.1 |\n| socketTimeout | socket操作（读写）超时，单位：毫秒。 0表示永不超时 | 0 | 3.0.1 |"]],[6180,6180],[6921,6921]]],[1564738588190,["GJX@GJXAIOU",[[1,6211,"\n"]],[6210,6210],[6211,6211]]],[1564738592407,["GJX@GJXAIOU",[[1,6211,"|---|----"]],[6211,6211],[6220,6220]]],[1564738593213,["GJX@GJXAIOU",[[-1,6219,"-"]],[6220,6220],[6219,6219]]],[1564738595265,["GJX@GJXAIOU",[[1,6219,"|--|"]],[6219,6219],[6223,6223]]],[1564738597481,["GJX@GJXAIOU",[[1,6222,"-"]],[6222,6222],[6223,6223]]],[1564738601987,["GJX@GJXAIOU",[[1,6224,"---|"]],[6224,6224],[6228,6228]]],[1564738619766,["GJX@GJXAIOU",[[-1,6257," "]],[6258,6258],[6257,6257]]],[1564738620255,["GJX@GJXAIOU",[[-1,6256,"\n"]],[6257,6257],[6256,6256]]],[1564738625602,["GJX@GJXAIOU",[[-1,6295," "]],[6296,6296],[6295,6295]]],[1564738626025,["GJX@GJXAIOU",[[-1,6294,"\n"]],[6295,6295],[6294,6294]]]],null,"GJX@GJXAIOU"]]}