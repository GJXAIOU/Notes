{"compress":true,"commitItems":[["4bf6d3e6-2ac6-4944-863c-674efa287627",1563774891151,"## IO流\n    输入流和输出流\n    \n    字节流和字符流\n    \n    InputStream \n        FileInputStream\n    OutputStream\n        FileOutputStream\n        \n    Reader\n        FileReader\n    Writer\n        FileWriter\n        \n    1. 使用缓冲效率更高，原因是解决了内存访问硬盘的次数过多导致的时间上的浪费\n    通常缓冲流使用的缓冲空间一般都是4KB或者8KB\n    2. FileWriter 不是直接把数据写入到磁盘，而是在内存中建立了一个缓冲区，用于\n    保存用户想要写入到硬盘的数据，有三种情况才会真正的写入数据到硬盘：\n        1> 缓冲区满了\n        2> 调用flush，清空缓冲区\n        3> FileWriter输出管道关闭\n    3. 字节流和字符流选择，\n        字节流基本上可以满足所有的文件内容传输需求\n        字符流，个人建议 只用来处理记事本可以打开的可视化文件",[[1563774864698,["GJX@GJXAIOU",[[1,3,"一 "]],[3,3],[4,4]]],[1563774865111,["GJX@GJXAIOU",[[1,4,"、"]],[4,4],[5,5]]],[1563774874736,["GJX@GJXAIOU",[[1,14,"分为："]],[14,14],[17,17]]],[1563774876983,["GJX@GJXAIOU",[[-1,24,"\n"]],[25,25],[24,24]]],[1563774881694,["GJX@GJXAIOU",[[-1,12,"  "],[-1,31,"  "],[-1,41,"  "],[-1,48,"  "],[-1,63,"  "],[-1,87,"  "],[-1,110,"  "],[-1,135,"  "],[-1,138,"  "],[-1,155,"  "],[-1,170,"  "],[-1,179," "],[-1,186," "],[-1,204,"  "],[-1,207,"  "],[-1,250," "],[-1,253," "],[-1,279,"  "],[-1,330,"  "],[-1,366," "],[-1,373," "],[-1,383,"  "],[-1,414,"  "],[-1,436," "],[-1,439," "],[-1,454,"  "],[-1,484,"  "]],[14,519],[12,473]]],[1563774882296,["GJX@GJXAIOU",[[-1,10,"  "],[-1,27,"  "],[-1,37,"  "],[-1,40,"  "],[-1,55,"  "],[-1,77,"  "],[-1,96,"  "],[-1,119,"  "],[-1,122,"  "],[-1,135,"  "],[-1,148,"  "],[-1,157," "],[-1,162," "],[-1,178,"  "],[-1,181,"  "],[-1,222,"  "],[-1,249,"  "],[-1,296,"  "],[-1,332," "],[-1,337," "],[-1,347,"  "],[-1,374,"  "],[-1,396,"  "],[-1,412,"  "],[-1,440,"  "]],[12,473],[10,427]]],[1563774933152,["GJX@GJXAIOU",[[-1,157," "]],[158,158],[157,157]]],[1563774934224,["GJX@GJXAIOU",[[-1,220," "]],[221,221],[220,220]]],[1563774945887,["GJX@GJXAIOU",[[1,106,"字符流 "]],[106,106],[109,109]]],[1563774946108,["GJX@GJXAIOU",[[1,109,"："]],[109,109],[110,110]]],[1563774946874,["GJX@GJXAIOU",[[1,110,"\n"]],[110,110],[111,111]]],[1563774948727,["GJX@GJXAIOU",[[-1,110,"\n"]],[111,111],[110,110]]],[1563774949943,["GJX@GJXAIOU",[[1,110,"\n"]],[110,110],[111,111]]],[1563774954087,["GJX@GJXAIOU",[[-1,111," "]],[112,112],[111,111]]],[1563774962924,["GJX@GJXAIOU",[[1,33,"字节流："]],[33,33],[37,37]]],[1563775038666,["GJX@GJXAIOU",[[1,226,"，为了迎合硬盘读取的特征，正是一个山区"]],[226,226],[245,245]]],[1563775039328,["GJX@GJXAIOU",[[-1,243,"山区"]],[245,245],[243,243]]],[1563775046256,["GJX@GJXAIOU",[[1,243,"扇区的大小；"]],[243,243],[249,249]]],[1563775060877,["GJX@GJXAIOU",[[-1,159,"    "],[1,163,"\n"]],[162,162],[160,160]]],[1563775064456,["GJX@GJXAIOU",[[1,160,"- 注意："]],[160,160],[165,165]]],[1563775068224,["GJX@GJXAIOU",[[1,166,"  - "]],[166,166],[170,170]]],[1563775071049,["GJX@GJXAIOU",[[1,256,"  "]],[256,256],[258,258]]],[1563775071487,["GJX@GJXAIOU",[[1,258,"- "]],[258,258],[260,260]]],[1563775074174,["GJX@GJXAIOU",[[-1,207,"\n"]],[208,208],[207,207]]],[1563775074632,["GJX@GJXAIOU",[[1,207,"，"]],[207,207],[208,208]]],[1563775078528,["GJX@GJXAIOU",[[1,304,"- "]],[304,304],[306,306]]],[1563775084530,["GJX@GJXAIOU",[[-1,304,"- "]],[306,306],[304,304]]],[1563775084889,["GJX@GJXAIOU",[[-1,303,"\n"]],[304,304],[303,303]]],[1563775089718,["GJX@GJXAIOU",[[-1,397," "]],[398,398],[397,397]]],[1563775091937,["GJX@GJXAIOU",[[1,395,"- "]],[395,395],[397,397]]],[1563775093464,["GJX@GJXAIOU",[[1,395,"  "]],[397,397],[399,399]]],[1563775097218,["GJX@GJXAIOU",[[-1,396," "]],[397,397],[396,396]]],[1563775101705,["GJX@GJXAIOU",[[1,396," "]],[396,396],[397,397]]],[1563775173584,["GJX@GJXAIOU",[[1,469,"\n    "]],[469,469],[474,474]]],[1563775173696,["GJX@GJXAIOU",[[-1,470,"    "],[1,474,"\n\n"]],[474,474],[471,471]]],[1563775173863,["GJX@GJXAIOU",[[1,472,"\n"]],[471,471],[472,472]]],[1563775696106,["GJX@GJXAIOU",[[1,472,"### 复制"]],[472,472],[478,478]]],[1563775696480,["GJX@GJXAIOU",[[1,479,"\n"]],[478,478],[479,479]]],[1563775697314,["GJX@GJXAIOU",[[1,480,"\n"]],[479,479],[480,480]]],[1563775698202,["GJX@GJXAIOU",[[-1,480,"\n"],[1,481,"`"]],[480,480],[481,481]]],[1563775698594,["GJX@GJXAIOU",[[1,481,"``"]],[481,481],[483,483]]],[1563775698619,["GJX@GJXAIOU",[[1,483,"language\n```\n"]],[483,483],[483,491]]],[1563775699250,["GJX@GJXAIOU",[[-1,483,"language"],[1,491,"j"]],[483,491],[484,484]]],[1563775699665,["GJX@GJXAIOU",[[1,484,"ava"]],[484,484],[487,487]]],[1563775699825,["GJX@GJXAIOU",[[1,488,"\n"]],[487,487],[488,488]]],[1563775700815,["GJX@GJXAIOU",[[1,488,"package com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class StreamOutputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\tcopyFile();\n\t\t//WriteTest();\n\t}\n\t\n\tpublic static void copyFile() throws IOException {\n\t\t//1. 找到源文件\n\t\tFile srcFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操.avi\");\n\t\t\n\t\tif (!srcFile.exists() || !srcFile.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 确定目标文件\n\t\tFile dstFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操2.avi\");\n\t\t\n\t\t//3. 建立输入输出管道\n\t\tFileInputStream fis = new FileInputStream(srcFile);\n\t\tFileOutputStream fos = new FileOutputStream(dstFile);\n\t\t\n\t\t//4. 提供对应的缓冲流\n\t\tBufferedInputStream bis = new BufferedInputStream(fis);\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\n\t\t\n\t\t//5. 读取数据拷贝\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[1024 * 8];\n\t\t\n\t\twhile ((length = bis.read(buffer)) != -1) {\n\t\t\tbos.write(buffer, 0, length);\n\t\t}\n\t\t\n\t\t//6. 关闭资源\n\t\tbos.close();\n\t\tbis.close();\n\t\t\n\t}\n\t\n\tpublic static void WriteTest() throws IOException {\n\t\t//1. 确定要操作的文件\n\t\tFile file = new File(\"C:/aaa/5.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileOutputStream对象，提供读写能力\n\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\n\t\t//创建BufferedOutputStream对象，用FileOutputStream作为参数\n\t\tBufferedOutputStream bs = new BufferedOutputStream(fos);\n\t\t\n\t\t//3. 写入数据\n\t\tString str = \"今天JD iPad Pro又便宜了一百~~~\";\n\t\t\n\t\tbs.write(str.getBytes());\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//fos FileOutputStream不用单独关闭，缓冲流对象的close会关闭输出字节流\n\t}\n}\n"]],[488,488],[2151,2151]]],[1563775716426,["GJX@GJXAIOU",[[1,479,"nengyo"]],[479,479],[485,485]]],[1563775717791,["GJX@GJXAIOU",[[-1,479,"nengyo"]],[485,485],[479,479]]],[1563775723411,["GJX@GJXAIOU",[[1,479,"能用"]],[479,479],[481,481]]],[1563775747427,["GJX@GJXAIOU",[[1,476,"字节流"]],[476,476],[479,479]]],[1563775757939,["GJX@GJXAIOU",[[1,484,"缓冲就不用字节流"]],[484,484],[492,492]]],[1563775760128,["GJX@GJXAIOU",[[1,472,"\n"]],[471,471],[472,472]]],[1563775760272,["GJX@GJXAIOU",[[1,473,"\n"]],[472,472],[473,473]]],[1563775760392,["GJX@GJXAIOU",[[1,474,"\n"]],[473,473],[474,474]]],[1563775765807,["GJX@GJXAIOU",[[1,471,"### "]],[471,471],[475,475]]],[1563775768993,["GJX@GJXAIOU",[[1,476,"···"]],[476,476],[479,479]]],[1563775770135,["GJX@GJXAIOU",[[-1,476,"···"]],[479,479],[476,476]]],[1563775773288,["GJX@GJXAIOU",[[1,476,"```java"]],[476,476],[483,483]]],[1563775773561,["GJX@GJXAIOU",[[1,486,"\n"]],[483,483],[484,484]]],[1563775773657,["GJX@GJXAIOU",[[1,487,"\n"]],[484,484],[485,485]]],[1563775773791,["GJX@GJXAIOU",[[1,488,"\n"]],[485,485],[486,486]]],[1563775774770,["GJX@GJXAIOU",[[1,486,"```"]],[486,486],[489,489]]],[1563775798696,["GJX@GJXAIOU",[[1,484,"package com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n/*\n\t昨天学习字符流和字节流的时候，发现如果使用了缓冲，时间效率更高\n  \t\n  \tSun提供了Java自己的缓冲机制：字节缓冲流和字符缓冲流\n  \t\n  \t---| InputStream 输入字节流的基类/超类 抽象类\n  \t------| FileInputStream 文件操作的字节输入流\n  \t------| BufferedInputStream 缓冲输入字节流，在缓冲字符流对象中，底层维护了一个8kb缓冲字节数组\n  \t\n  \t构造方法：\n  \t\tBufferedInputStream(InputStream in);\n  \t\tBufferedInputStream(InputStream in, int size);\n  \t\t\n  \t\t构造方法中都有一个参数是InputStream, 要求传入的是InputStream的子类对象，第二个构造方法中\n  \t\t多了一个参数是int size ，这个size表示设置缓冲区的大小\n  \t\t默认缓冲数组的大小是一个8kb的字节数组\n  \t\t\n  \t\t构造方法中的InputStream是给缓冲流提供读写能力的！！！\n  \t\t\n  \t\t【记住】\n  \t\t\t缓冲流是没有读写能力的！！！需要对应的字节流或者字符流来提供\n  \t\t\t\n  \t使用流程：\n  \t\t1. 找到目标文件\n  \t\t2. 建立管道\n  \t\t\ta) 首先创建当前文件的InputStream的子类对象，FileInputStream\n  \t\t\tb) 使用InputStream的子类对象，作为BufferedInputStream构造方法参数，创建缓冲流对象\n  \t\t3. 读取数据\n  \t\t4. 关闭资源\n  \t\n */\n\npublic class StreamInputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\treadTest1();\n\t}\n\t\n\tpublic static void readTest1() throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:/aaa/1.txt\");\n\t\t\n\t\t//判断他是否是一个普通文件，是否存在\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileInputStream提供读写能力\n\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\n\t\t//利用FileInputStream对象，创建对应的BufferedInputStream\n\t\tBufferedInputStream bs = new BufferedInputStream(fis);\n\t\t\n\t\t//BufferedInputStream bs2 = new BufferedInputStream(\n\t\t//\t\tnew FileInputStream(new File(\"C:/aaa/1.txt\")));\n\t\t\n\t\t//3. 读取数据\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[512];\n\t\t\n\t\twhile ((length = bs.read(buffer)) != -1) {\n\t\t\tSystem.out.println(new String(buffer, 0, length));\n\t\t}\n\t\t\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//在BufferedInputStream的close方法中，该方法会自动关闭创建缓冲流时使用的输入字节流对象\n\t\t//FileInputStream对象\n\t\t//fis.close();\n\t}\n}\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[484,484],[2367,2367]]],[1563775800595,["GJX@GJXAIOU",[[1,475,"shio"]],[475,475],[479,479]]],[1563775801192,["GJX@GJXAIOU",[[-1,475,"shio"]],[479,479],[475,475]]],[1563775807209,["GJX@GJXAIOU",[[1,475,"使用缓冲进行赋值"]],[475,475],[483,483]]],[1563775807751,["GJX@GJXAIOU",[[-1,481,"赋值"]],[483,483],[481,481]]],[1563775814595,["GJX@GJXAIOU",[[1,481,"read"]],[481,481],[485,485]]],[1563775814622,["GJX@GJXAIOU",[[1,481," "]],[485,485],[486,486]]],[1563775819615,["GJX@GJXAIOU",[[-1,482,"read"]],[486,486],[482,482]]],[1563775821192,["GJX@GJXAIOU",[[1,483,"\n"]],[482,482],[483,483]]],[1563775841850,["GJX@GJXAIOU",[[1,483,"StreamInputBuffer额度"]],[483,483],[502,502]]],[1563775842551,["GJX@GJXAIOU",[[-1,500,"额度"]],[502,502],[500,500]]],[1563775845995,["GJX@GJXAIOU",[[1,500,"ed。Java"]],[500,500],[507,507]]],[1563775851056,["GJX@GJXAIOU",[[1,2417,"\n"]],[2416,2416],[2417,2417]]],[1563775869962,["GJX@GJXAIOU",[[1,2417,"StreamOutputBuffered。"]],[2417,2417],[2438,2438]]],[1563775871760,["GJX@GJXAIOU",[[-1,2437,"。"]],[2438,2438],[2437,2437]]],[1563775873090,["GJX@GJXAIOU",[[1,2437,".java"]],[2437,2437],[2442,2442]]],[1563775878690,["GJX@GJXAIOU",[[1,4130,"\n"]],[4129,4129],[4130,4130]]],[1563775878808,["GJX@GJXAIOU",[[1,4131,"\n"]],[4130,4130],[4131,4131]]],[1563775878969,["GJX@GJXAIOU",[[1,4132,"\n"]],[4131,4131],[4132,4132]]],[1563775881441,["GJX@GJXAIOU",[[-1,4132,"\n"],[1,4133,"`"]],[4132,4132],[4133,4133]]],[1563775881817,["GJX@GJXAIOU",[[1,4133,"``"]],[4133,4133],[4135,4135]]],[1563775881844,["GJX@GJXAIOU",[[1,4135,"language\n```\n"]],[4135,4135],[4135,4143]]],[1563775882613,["GJX@GJXAIOU",[[-1,4135,"language"],[1,4143,"j"]],[4135,4143],[4136,4136]]],[1563775883033,["GJX@GJXAIOU",[[1,4136,"ava"]],[4136,4136],[4139,4139]]],[1563775883183,["GJX@GJXAIOU",[[1,4140,"\n"]],[4139,4139],[4140,4140]]],[1563775975946,["GJX@GJXAIOU",[[1,4131,"### zhendui"]],[4131,4131],[4142,4142]]],[1563775977143,["GJX@GJXAIOU",[[-1,4135,"zhendui"]],[4142,4142],[4135,4135]]],[1563775981091,["GJX@GJXAIOU",[[1,4135,"针对字符流"]],[4135,4135],[4140,4140]]],[1563775983160,["GJX@GJXAIOU",[[1,4141,"\n"]],[4140,4140],[4141,4141]]],[1563776082744,["GJX@GJXAIOU",[[1,4150,"package com.qfedu.a_buffer;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n/*\n \tBufferedReader 缓冲区是一个char类型数组，数组元素个数为8192， 占用空间大小是16KB\n */\n\npublic class ReaderBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\稻香.lrc\");\n\t\t\n\t\t//判断文件是否存在，是否是普通文件\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道 \n\t\t//所有的缓冲流都是没有读取能力的，需要提供对应的字符流来提供读写能力\n\t\tFileReader fr = new FileReader(file);\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\t\n\t\t//3. 读取文件内容\n\t\tString str = null;\n\t\t\n\t\twhile ((str = br.readLine()) != null) { //按行读取\n\t\t\tSystem.out.println(str);\n\t\t}\n\t\t\n\t\t//4. 关闭资源\n\t\tbr.close();\n\t\t\n\t}\n}\n"]],[4150,4150],[4959,4959]]],[1563776086480,["GJX@GJXAIOU",[[1,4964,"\n"]],[4963,4963],[4964,4964]]],[1563776086615,["GJX@GJXAIOU",[[1,4965,"\n"]],[4964,4964],[4965,4965]]],[1563776165457,["GJX@GJXAIOU",[[1,4965,"### BufferWrite"]],[4965,4965],[4980,4980]]],[1563776166377,["GJX@GJXAIOU",[[1,4981,"\n"]],[4980,4980],[4981,4981]]],[1563776167739,["GJX@GJXAIOU",[[1,4981,"  `"]],[4981,4981],[4984,4984]]],[1563776168424,["GJX@GJXAIOU",[[-1,4982," `"]],[4984,4984],[4982,4982]]],[1563776169898,["GJX@GJXAIOU",[[1,4982,"```"]],[4982,4982],[4985,4985]]],[1563776172184,["GJX@GJXAIOU",[[-1,4981," ```"]],[4985,4985],[4981,4981]]],[1563776173009,["GJX@GJXAIOU",[[-1,4981,"\n"],[1,4982,"`"]],[4981,4981],[4982,4982]]],[1563776173369,["GJX@GJXAIOU",[[1,4982,"``"]],[4982,4982],[4984,4984]]],[1563776173398,["GJX@GJXAIOU",[[1,4984,"language\n```\n"]],[4984,4984],[4984,4992]]],[1563776174235,["GJX@GJXAIOU",[[-1,4984,"language"],[1,4992,"j"]],[4984,4992],[4985,4985]]],[1563776174600,["GJX@GJXAIOU",[[1,4985,"ava"]],[4985,4985],[4988,4988]]],[1563776174703,["GJX@GJXAIOU",[[1,4989,"\n"]],[4988,4988],[4989,4989]]],[1563776188765,["GJX@GJXAIOU",[[1,4989,"package com.qfedu.a_buffer;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class WriterBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 确定目标文件\n\t\tFile file = new File(\"C:/aaa/6.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\tFileWriter fw = new FileWriter(file);\n\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\n\t\t//3. 写入数据\n\t\tbw.write(\"感谢你给我的光荣\");\n\t\tbw.write(\"&&&&&&&&&&&\");\n\t\tbw.newLine(); //换行！！！\n\t\tbw.write(\"*****************\");\n\t\t\n\t\t//4. 关闭资源\n\t\tbw.close();\n\t}\n}\n"]],[4989,4989],[5529,5529]]],[1563776284455,["GJX@GJXAIOU",[[1,471,"\n"]],[470,470],[471,471]]],[1563776284583,["GJX@GJXAIOU",[[1,472,"\n"]],[471,471],[472,472]]],[1563776289833,["GJX@GJXAIOU",[[1,472,"## h"]],[472,472],[476,476]]],[1563776290659,["GJX@GJXAIOU",[[-1,475,"h"]],[476,476],[475,475]]],[1563776294410,["GJX@GJXAIOU",[[1,475,"缓冲"]],[475,475],[477,477]]],[1563776361842,["GJX@GJXAIOU",[[1,5541,"\n"]],[5540,5540],[5541,5541]]],[1563776361985,["GJX@GJXAIOU",[[1,5542,"\n"]],[5541,5541],[5542,5542]]],[1563776362858,["GJX@GJXAIOU",[[1,5543,"\n"]],[5542,5542],[5543,5543]]],[1563776815428,["GJX@GJXAIOU",[[1,5542,"## JavaAPI"]],[5542,5542],[5552,5552]]],[1563776815776,["GJX@GJXAIOU",[[1,5554,"\n"]],[5552,5552],[5553,5553]]],[1563776815913,["GJX@GJXAIOU",[[1,5555,"\n"]],[5553,5553],[5554,5554]]],[1563776825191,["GJX@GJXAIOU",[[1,5554,"### String类型"]],[5554,5554],[5566,5566]]],[1563776825220,["GJX@GJXAIOU",[[1,5564," "]],[5566,5566],[5567,5567]]],[1563776825448,["GJX@GJXAIOU",[[1,5569,"\n"]],[5567,5567],[5568,5568]]],[1563776836716,["GJX@GJXAIOU",[[1,5568,"==和equals"]],[5568,5568],[5577,5577]]],[1563776836747,["GJX@GJXAIOU",[[1,5571," "]],[5577,5577],[5578,5578]]],[1563776838244,["GJX@GJXAIOU",[[1,5578,"方法"]],[5578,5578],[5580,5580]]],[1563776838272,["GJX@GJXAIOU",[[1,5578," "]],[5580,5580],[5581,5581]]],[1563776838563,["GJX@GJXAIOU",[[1,5583,"\n"]],[5581,5581],[5582,5582]]],[1563776839913,["GJX@GJXAIOU",[[1,5582,"```"]],[5582,5582],[5585,5585]]],[1563776839942,["GJX@GJXAIOU",[[1,5585,"language\n```\n"]],[5585,5585],[5585,5593]]],[1563776840563,["GJX@GJXAIOU",[[-1,5585,"language"],[1,5593,"j"]],[5585,5593],[5586,5586]]],[1563776840961,["GJX@GJXAIOU",[[1,5586,"ava"]],[5586,5586],[5589,5589]]],[1563776841064,["GJX@GJXAIOU",[[1,5590,"\n"]],[5589,5589],[5590,5590]]],[1563776842282,["GJX@GJXAIOU",[[1,5590,"package com.qfedu.b_javaAPI;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"David\";\n\t\tString str5 = \"David\";\n\t\tString str2 = new String(str1);\n\t\tString str3 = new String(str1);\n\t\tString str4 = new String(str2);\n\t\t\n\t\tSystem.out.println(\"str1 == str5 :\" + (str1 == str5)); //true\n\t\tSystem.out.println(\"str1 == str2 :\" + (str1 == str2)); //false\n\t\tSystem.out.println(\"str2 == str3 :\" + (str2 == str3)); //false\n\t\tSystem.out.println(\"str2 == str4 :\" + (str2 == str4)); //false\n\t\tSystem.out.println(\"str3 == str4 :\" + (str3 == str4)); //false\n\t\t\n\t\tSystem.out.println(\"str1.equals(str2):\" + str1.equals(str2));\n\t\tSystem.out.println(\"str1.equals(str3):\" + str1.equals(str3));\n\t\tSystem.out.println(\"str1.equals(str4):\" + str1.equals(str4));\n\t\tSystem.out.println(\"str1.equals(str5):\" + str1.equals(str5));\n\t}\n}"]],[5590,5590],[6425,6425]]],[1563776846962,["GJX@GJXAIOU",[[1,6228," ?/"]],[6228,6228],[6231,6231]]],[1563776847712,["GJX@GJXAIOU",[[-1,6229,"?/"]],[6231,6231],[6229,6229]]],[1563776849530,["GJX@GJXAIOU",[[1,6229,"//true"]],[6229,6229],[6235,6235]]],[1563776853832,["GJX@GJXAIOU",[[1,6299," //true"]],[6299,6299],[6306,6306]]],[1563776855256,["GJX@GJXAIOU",[[1,6370," //true"]],[6370,6370],[6377,6377]]],[1563776856640,["GJX@GJXAIOU",[[1,6441," //true"]],[6441,6441],[6448,6448]]],[1563776859976,["GJX@GJXAIOU",[[1,6460,"\n"]],[6457,6457],[6458,6458]]],[1563776860121,["GJX@GJXAIOU",[[1,6461,"\n"]],[6458,6458],[6459,6459]]],[1563776869862,["GJX@GJXAIOU",[[1,6459,"### String的"]],[6459,6459],[6470,6470]]],[1563776869893,["GJX@GJXAIOU",[[1,6469," "]],[6470,6470],[6471,6471]]],[1563776871173,["GJX@GJXAIOU",[[1,6471,"方法"]],[6471,6471],[6473,6473]]],[1563776871649,["GJX@GJXAIOU",[[1,6476,"\n"]],[6473,6473],[6474,6474]]],[1563776873154,["GJX@GJXAIOU",[[1,6474,"```"]],[6474,6474],[6477,6477]]],[1563776873186,["GJX@GJXAIOU",[[1,6477,"language\n```\n"]],[6477,6477],[6477,6485]]],[1563776873348,["GJX@GJXAIOU",[[-1,6477,"language"],[1,6485,"j"]],[6477,6485],[6478,6478]]],[1563776873866,["GJX@GJXAIOU",[[1,6478,"afa"]],[6478,6478],[6481,6481]]],[1563776874512,["GJX@GJXAIOU",[[-1,6479,"fa"]],[6481,6481],[6479,6479]]],[1563776874755,["GJX@GJXAIOU",[[1,6479,"vca"]],[6479,6479],[6482,6482]]],[1563776875600,["GJX@GJXAIOU",[[-1,6479,"vca"]],[6482,6482],[6479,6479]]],[1563776876522,["GJX@GJXAIOU",[[1,6479,"va"]],[6479,6479],[6481,6481]]],[1563776877088,["GJX@GJXAIOU",[[1,6482,"\n"]],[6481,6481],[6482,6482]]],[1563777535298,["GJX@GJXAIOU",[[1,6482,"package com.qfedu.b_javaAPI;\n\npublic class StringMethods {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// length()  求字符串元素个数，不是占用的空间\n\t\tSystem.out.println(\"123\".length());  //3\n\t\tSystem.out.println(\"雷猴~\".length()); //3\n\t\t\n\t\t// charAt(int index); 获取字符串中的一个字符\n\t\tSystem.out.println(\"123456789\".charAt(5)); //6\n\t\t\n\t\t//indexOf(int ch); (String str); (char c)\n\t\tSystem.out.println(\"2345678987654345\".indexOf('2')); // 0\n\t\tSystem.out.println(\"2345678987654345\".indexOf(\"789\")); //5\n\t\t\n\t\t//lastIndexOf()\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //-1 \n\t\t//这里找的是ASCII码为2的字符，因为前32个ASCII码值不可见\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //13\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(\"345\")); //14\n\t\t\n\t\t//endWith(String str)\n\t\tSystem.out.println(\"1234567.txt\".endsWith(\"tx\")); //false\n\t\t\n\t\t//contains()\n\t\tSystem.out.println(\"321321321\".contains(\"21\")); //true\n\t\t\n\t\t//isEmpty()\n\t\tSystem.out.println(\"1\".isEmpty()); //false\n\t\tSystem.out.println(\"\".isEmpty()); //true\n\t\t\n\t\t//equalsIgnoreCase()\n\t\tSystem.out.println(\"abc\".equals(\"ABC\")); //false\n\t\tSystem.out.println(\"abc\".equalsIgnoreCase(\"ABC\")); //true\n\t\t\n\t\t//static String valueOf(char[] data);\n\t\tchar[] arr = {'a','b','c','d','e','f','g'};\n\t\tSystem.out.println(String.valueOf(arr)); //abcdefg\n\t\t\n\t\t//toCharArray()\n\t\tchar[] arr2 = \"1234567890\".toCharArray();\n\t\t//1\n\t\t//2\n\t\t//......\n\t\t\n\t\tfor (char c : arr2) {\n\t\t\tSystem.out.println(c); //\n\t\t}\n\t\t\n\t\t//replace(char oldChar, char newChar);\n\t\tString str = \"123456282\";\n\t\t\n\t\tstr = str.replace('2', '5');\n\t\tSystem.out.println(str);\n\t\t\n\t\t\n\t\tString lrc = \"[00:00.00]侯高俊杰 - 稻香\\r\\n\" + \n\t\t\t\t\"[00:07.74]\\r\\n\" + \n\t\t\t\t\"[00:10.58]作词：周杰伦  作曲：周杰伦\\r\\n\" + \n\t\t\t\t\"[00:16.05]\\r\\n\" + \n\t\t\t\t\"[00:31.11]对这个世界如果你有太多的抱怨\\r\\n\" + \n\t\t\t\t\"[00:34.65]跌倒了  就不敢继续往前走\\r\\n\" + \n\t\t\t\t\"[00:37.48]为什么  人要这么的脆弱 堕落\\r\\n\" + \n\t\t\t\t\"[00:41.61]请你打开电视看看\\r\\n\" + \n\t\t\t\t\"[00:43.44]多少人为生命在努力勇敢的走下去\\r\\n\" + \n\t\t\t\t\"[00:47.37]我们是不是该知足\\r\\n\" + \n\t\t\t\t\"[00:49.88]珍惜一切 就算没有拥有\";\n\t\t//切割字符串\n\t\tString[] array = lrc.split(\"\\r\\n\");\n\t\t\n\t\tfor (String string : array) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\t//trim() 用户处理前端发送过来数据的多余空格\n\t\tString username = \"    lxl\";\n\t\tSystem.out.println(username);\n\t\tusername = username.trim();\n\t\t\n\t\tSystem.out.println(username);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[6482,6482],[8725,8725]]],[1563777544017,["GJX@GJXAIOU",[[-1,2407,"\n"]],[2407,2407],[2406,2406]]],[1563777544219,["GJX@GJXAIOU",[[-1,2406,"\n"]],[2406,2406],[2405,2405]]],[1563777544718,["GJX@GJXAIOU",[[-1,2405,"\n"]],[2405,2405],[2404,2404]]],[1563777544772,["GJX@GJXAIOU",[[-1,2404,"\n"]],[2404,2404],[2403,2403]]],[1563777544827,["GJX@GJXAIOU",[[-1,2403,"\n"]],[2403,2403],[2402,2402]]],[1563777544882,["GJX@GJXAIOU",[[-1,2402,"\n"]],[2402,2402],[2401,2401]]],[1563777544994,["GJX@GJXAIOU",[[-1,2401,"\n"]],[2401,2401],[2400,2400]]],[1563777545044,["GJX@GJXAIOU",[[-1,2400,"\n"]],[2400,2400],[2399,2399]]],[1563777545093,["GJX@GJXAIOU",[[-1,2399,"\n"]],[2399,2399],[2398,2398]]],[1563777545145,["GJX@GJXAIOU",[[-1,2398,"\n"]],[2398,2398],[2397,2397]]],[1563777545194,["GJX@GJXAIOU",[[-1,2397,"\n"]],[2397,2397],[2396,2396]]],[1563777545264,["GJX@GJXAIOU",[[-1,2396,"\n"]],[2396,2396],[2395,2395]]],[1563777545322,["GJX@GJXAIOU",[[-1,2395,"\n"]],[2395,2395],[2394,2394]]],[1563777545375,["GJX@GJXAIOU",[[-1,2394,"\n"]],[2394,2394],[2393,2393]]],[1563777545426,["GJX@GJXAIOU",[[-1,2393,"\n"]],[2393,2393],[2392,2392]]],[1563777545479,["GJX@GJXAIOU",[[-1,2392,"\n"]],[2392,2392],[2391,2391]]],[1563777545586,["GJX@GJXAIOU",[[-1,2389,"}\t"]],[2391,2391],[2389,2389]]],[1563777545638,["GJX@GJXAIOU",[[-1,2389,"\n"]],[2389,2389],[2388,2388]]],[1563777545862,["GJX@GJXAIOU",[[-1,2386,"\t}"]],[2388,2388],[2386,2386]]],[1563777546203,["GJX@GJXAIOU",[[-1,2386,"\n"]],[2386,2386],[2385,2385]]],[1563777547694,["GJX@GJXAIOU",[[1,2386,"\n"]],[2385,2385],[2386,2386]]],[1563777548284,["GJX@GJXAIOU",[[1,2386,"\t}"]],[2386,2386],[2388,2388]]],[1563777548730,["GJX@GJXAIOU",[[1,2389,"\n"]],[2388,2388],[2389,2389]]],[1563777549236,["GJX@GJXAIOU",[[1,2389,"}\t"]],[2389,2389],[2391,2391]]],[1563777549754,["GJX@GJXAIOU",[[1,2392,"\n"]],[2391,2391],[2392,2392]]],[1563777550586,["GJX@GJXAIOU",[[1,2393,"\n"]],[2392,2392],[2393,2393]]],[1563777730681,["GJX@GJXAIOU",[[-1,712,"昨天学习字符流和字节流的时候，发现如果使用了缓冲，时间效率更高\n  \t\n  \tSun提供了Java自己的缓冲机制：字节缓冲流和字符缓冲流\n  \t\n  \t---| InputStream 输入字节流的基类/超类 抽象类\n  \t------| FileInputStream 文件操作的字节输入流\n  \t------| BufferedInputStream 缓冲输入字节流，在缓冲字符流对象中，底层维护了一个8kb缓冲字节数组\n  \t\n  \t构造方法：\n  \t\tBufferedInputStream(InputStream in);\n  \t\tBufferedInputStream(InputStream in, int size);\n  \t\t\n  \t\t构造方法中都有一个参数是InputStream, 要求传入的是InputStream的子类对象，第二个构造方法中\n  \t\t多了一个参数是int size ，这个size表示设置缓冲区的大小\n  \t\t默认缓冲数组的大小是一个8kb的字节数组\n  \t\t\n  \t\t构造方法中的InputStream是给缓冲流提供读写能力的！！！\n  \t\t\n  \t\t【记住】\n  \t\t\t缓冲流是没有读写能力的！！！需要对应的字节流或者字符流来提供\n  \t\t\t\n  \t使用流程：\n  \t\t1. 找到目标文件\n  \t\t2. 建立管道\n  \t\t\ta) 首先创建当前文件的InputStream的子类对象，FileInputStream\n  \t\t\tb) 使用InputStream的子类对象，作为BufferedInputStream构造方法参数，创建缓冲流对象\n  \t\t3. 读取数据\n  \t\t4. 关闭资源"]],[712,1428],[712,712]]],[1563777734847,["GJX@GJXAIOU",[[1,490,"昨天学习字符流和字节流的时候，发现如果使用了缓冲，时间效率更高\n  \t\n  \tSun提供了Java自己的缓冲机制：字节缓冲流和字符缓冲流\n  \t\n  \t---| Input"],[1,496," 输入字节流的基类/超类 抽象类\n  \t------| File"],[1,501,"Stream 文件操作的字节输入流\n  \t------| "],[-1,509,"。Java"],[1,514,"InputStream 缓冲输入字节流，在缓冲字符流对象中，底层维护了一个8kb缓冲字节数组\n  \t\n  \t构造方法：\n  \t\tBufferedInputStream(InputStream in);\n  \t\tBufferedInputStream(InputStream in, int size);\n  \t\t\n  \t\t构造方法中都有一个参数是InputStream, 要求传入的是InputStream的子类对象，第二个构造方法中\n  \t\t多了一个参数是int size ，这个size表示设置缓冲区的大小\n  \t\t默认缓冲数组的大小是一个8kb的字节数组\n  \t\t\n  \t\t构造方法中的InputStream是给缓冲流提供读写能力的！！！\n  \t\t\n  \t\t【记住】\n  \t\t\t缓冲流是没有读写能力的！！！需要对应的字节流或者字符流来提供\n  \t\t\t\n  \t使用流程：\n  \t\t1. 找到目标文件\n  \t\t2. 建立管道\n  \t\t\ta) 首先创建当前文件的InputStream的子类对象，FileInputStream\n  \t\t\tb) 使用InputStream的子类对象，作为BufferedInputStream构造方法参数，创建缓冲流对象\n  \t\t3. 读取数据\n  \t\t4. 关闭资源"]],[490,514],[1206,1206]]],[1563777738360,["GJX@GJXAIOU",[[-1,1400,"/*\n\t\n  \t\n */"]],[1400,1412],[1400,1400]]],[1563777738730,["GJX@GJXAIOU",[[-1,1401,"\n"]],[1400,1400],[1399,1399]]],[1563777746203,["GJX@GJXAIOU",[[-1,526,"  "],[-1,559,"  "],[-1,563,"  "],[-1,599,"  "],[-1,637,"  "],[-1,703,"  "],[-1,707,"  "],[-1,716,"  "],[-1,757,"  "],[-1,808,"  "],[-1,813,"  "],[-1,874,"  "],[-1,912,"  "],[-1,937,"  "],[-1,942,"  "],[-1,979,"  "],[-1,984,"  "],[-1,993,"  "],[-1,1029,"  "],[-1,1035,"  "],[-1,1044,"  "],[-1,1058,"  "],[-1,1070,"  "],[-1,1120,"  "],[-1,1183,"  "],[-1,1195,"  "]],[529,1206],[527,1154]]],[1563777747515,["GJX@GJXAIOU",[[-1,526,"\t"],[-1,557,"\t"],[-1,559,"\t"],[-1,593,"\t"],[-1,629,"\t"],[-1,693,"\t"],[-1,695,"\t"],[-1,703,"\t"],[-1,741,"\t"],[-1,790,"\t"],[-1,794,"\t"],[-1,853,"\t"],[-1,888,"\t"],[-1,912,"\t"],[-1,914,"\t"],[-1,950,"\t"],[-1,952,"\t"],[-1,961,"\t"],[-1,995,"\t"],[-1,997,"\t"],[-1,1005,"\t"],[-1,1017,"\t"],[-1,1026,"\t"],[-1,1076,"\t"],[-1,1136,"\t"],[-1,1145,"\t"]],[527,1154],[526,1128]]],[1563777756698,["GJX@GJXAIOU",[[-1,841,"\t"]],[842,842],[841,841]]],[1563777757016,["GJX@GJXAIOU",[[-1,840,"\n"]],[841,841],[840,840]]],[1563777770858,["GJX@GJXAIOU",[[-1,874,"\t"]],[875,875],[874,874]]],[1563777771139,["GJX@GJXAIOU",[[-1,873,"\n"]],[874,874],[873,873]]],[1563777771848,["GJX@GJXAIOU",[[-1,872,"小"]],[873,873],[872,872]]],[1563777773411,["GJX@GJXAIOU",[[1,872,"x"]],[872,872],[873,873]]],[1563777773681,["GJX@GJXAIOU",[[1,872," "],[1,873," iao"]],[873,873],[877,877]]],[1563777775240,["GJX@GJXAIOU",[[-1,873,"xiao"]],[877,877],[873,873]]],[1563777776948,["GJX@GJXAIOU",[[1,873,"小，"]],[873,873],[875,875]]],[1563777787500,["GJX@GJXAIOU",[[1,831,"（）"]],[831,831],[833,833]]],[1563777789733,["GJX@GJXAIOU",[[1,832,"多态"]],[832,832],[834,834]]],[1563777793992,["GJX@GJXAIOU",[[-1,939,"\t"]],[939,940],[939,939]]],[1563777797777,["GJX@GJXAIOU",[[-1,783,"\t"]],[784,784],[783,783]]],[1563777799881,["GJX@GJXAIOU",[[1,689,"- "]],[689,689],[691,691]]],[1563777803400,["GJX@GJXAIOU",[[-1,903,"\n"]],[904,904],[903,903]]],[1563777805552,["GJX@GJXAIOU",[[-1,903,"\t"]],[904,904],[903,903]]],[1563777808145,["GJX@GJXAIOU",[[-1,782,"\n"]],[783,783],[782,782]]],[1563777811657,["GJX@GJXAIOU",[[1,937,"- "]],[937,937],[939,939]]],[1563777814291,["GJX@GJXAIOU",[[1,980,"- "]],[980,980],[982,982]]],[1563777827536,["GJX@GJXAIOU",[[-1,478,"### 使用缓冲进行 "]],[478,489],[478,478]]],[1563777829761,["GJX@GJXAIOU",[[1,1122,"\t5. \n"]],[1121,1121],[1126,1126]]],[1563777829897,["GJX@GJXAIOU",[[-1,1122,"\t5. "]],[1126,1126],[1123,1123]]],[1563777891256,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563777891256,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563777832761,["GJX@GJXAIOU",[[1,1122,"### 使用缓冲进行 "]],[1122,1122],[1133,1133]]],[1563777838205,["GJX@GJXAIOU",[[-1,1126,"使用缓冲进行 "],[1,1133,"输入"]],[1126,1126],[1128,1128]]],[1563777839292,["GJX@GJXAIOU",[[1,1128,"字符"]],[1128,1128],[1130,1130]]],[1563777848017,["GJX@GJXAIOU",[[-1,1126,"输入字符"]],[1130,1130],[1126,1126]]],[1563777853507,["GJX@GJXAIOU",[[1,1126,"输入字节缓冲"]],[1126,1126],[1132,1132]]],[1563777859691,["GJX@GJXAIOU",[[-1,2293,"字节流复制"],[1,2298,"输出"]],[2293,2293],[2295,2295]]],[1563777862508,["GJX@GJXAIOU",[[1,2295,"字节缓冲"]],[2295,2295],[2299,2299]]],[1563777868566,["GJX@GJXAIOU",[[-1,4018,"针对字符流"],[1,4023,"输入"]],[4018,4018],[4020,4020]]],[1563777871452,["GJX@GJXAIOU",[[1,4020,"字符缓冲"]],[4020,4020],[4024,4024]]],[1563777877506,["GJX@GJXAIOU",[[-1,4853,"BufferWrite"],[1,4864,"输出"]],[4853,4853],[4855,4855]]],[1563777879787,["GJX@GJXAIOU",[[1,4855,"字符缓冲"]],[4855,4855],[4859,4859]]],[1563777951254,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563777951254,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563777891832,["GJX@GJXAIOU",[[-1,980," "]],[981,981],[980,980]]],[1563777892648,["GJX@GJXAIOU",[[-1,990," "]],[991,991],[990,990]]],[1563777893952,["GJX@GJXAIOU",[[-1,1105," "]],[1106,1106],[1105,1105]]],[1563777894611,["GJX@GJXAIOU",[[-1,1113," "]],[1114,1114],[1113,1113]]],[1563778071262,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563778071262,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563778059450,["GJX@GJXAIOU",[[1,1982,"（）"]],[1982,1982],[1984,1984]]],[1563778062213,["GJX@GJXAIOU",[[1,1983,"转呗"]],[1983,1983],[1985,1985]]],[1563778062816,["GJX@GJXAIOU",[[-1,1983,"转呗"]],[1985,1985],[1983,1983]]],[1563778069755,["GJX@GJXAIOU",[[1,1983,"准备一个缓冲数组"]],[1983,1983],[1991,1991]]],[1563780982768,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563780982768,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563780977042,["GJX@GJXAIOU",[[-1,2242,"\t\t//"]],[2242,2246],[2242,2242]]],[1563780977403,["GJX@GJXAIOU",[[-1,2241,"\n"]],[2242,2242],[2241,2241]]],[1563780978788,["GJX@GJXAIOU",[[1,2241,"："]],[2241,2241],[2242,2242]]],[1563781042769,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781042769,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563780983110,["GJX@GJXAIOU",[[1,2276,"、、"]],[2276,2276],[2278,2278]]],[1563780983682,["GJX@GJXAIOU",[[-1,2276,"、、"]],[2278,2278],[2276,2276]]],[1563780988527,["GJX@GJXAIOU",[[1,2276,"//不需要关闭了"]],[2276,2276],[2284,2284]]],[1563781000020,["GJX@GJXAIOU",[[1,1858,"、、"]],[1858,1858],[1860,1860]]],[1563781000738,["GJX@GJXAIOU",[[-1,1858,"、、"]],[1860,1860],[1858,1858]]],[1563781001645,["GJX@GJXAIOU",[[1,1858,"//"]],[1858,1858],[1860,1860]]],[1563781009042,["GJX@GJXAIOU",[[1,1858,"\n\t\t"]],[1858,1858],[1861,1861]]],[1563781014339,["GJX@GJXAIOU",[[1,1863,"zhe"]],[1863,1863],[1866,1866]]],[1563781015219,["GJX@GJXAIOU",[[-1,1863,"zhe"]],[1866,1866],[1863,1863]]],[1563781041959,["GJX@GJXAIOU",[[1,1863,"这种方式见上面所有语句合成这一句话，前提是文件必须存在；"]],[1863,1863],[1891,1891]]],[1563781342779,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781342779,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563781299977,["GJX@GJXAIOU",[[-1,7738,"\t\t//1\n\t\t//2\n\t\t//......"]],[7738,7760],[7738,7738]]],[1563781301440,["GJX@GJXAIOU",[[-1,7738,"\n"]],[7738,7738],[7737,7737]]],[1563781304706,["GJX@GJXAIOU",[[-1,7791,"//"]],[7793,7793],[7791,7791]]],[1563781306252,["GJX@GJXAIOU",[[1,7801,"\n\t\t"]],[7795,7795],[7798,7798]]],[1563781306666,["GJX@GJXAIOU",[[1,7798,"\t\t//1\n\t\t//2\n\t\t//......"]],[7798,7798],[7820,7820]]],[1563781309468,["GJX@GJXAIOU",[[-1,7798,"\t\t"]],[7798,7800],[7798,7798]]],[1563781462780,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781462780,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563781427924,["GJX@GJXAIOU",[[1,7951,"\"123456282\""]],[7951,7951],[7962,7962]]],[1563781432571,["GJX@GJXAIOU",[[-1,7953,"2"]],[7954,7954],[7953,7953]]],[1563781434085,["GJX@GJXAIOU",[[1,7953,"2"]],[7953,7953],[7954,7954]]],[1563781435075,["GJX@GJXAIOU",[[-1,7953,"2"]],[7954,7954],[7953,7953]]],[1563781435541,["GJX@GJXAIOU",[[1,7953,"5"]],[7953,7953],[7954,7954]]],[1563781438291,["GJX@GJXAIOU",[[-1,7960,"2"]],[7961,7961],[7960,7960]]],[1563781438652,["GJX@GJXAIOU",[[1,7960,"5"]],[7960,7960],[7961,7961]]],[1563781444238,["GJX@GJXAIOU",[[1,7951,"、、"]],[7951,7951],[7953,7953]]],[1563781444914,["GJX@GJXAIOU",[[-1,7951,"、、"]],[7953,7953],[7951,7951]]],[1563781445748,["GJX@GJXAIOU",[[1,7951,"//"]],[7951,7951],[7953,7953]]],[1563781522779,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781522779,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563781466464,["GJX@GJXAIOU",[[1,7953,"ying"]],[7953,7953],[7957,7957]]],[1563781467354,["GJX@GJXAIOU",[[-1,7953,"ying"]],[7957,7957],[7953,7953]]],[1563781481312,["GJX@GJXAIOU",[[1,7964," 因为有个遍历，因此是全部调换"]],[7964,7964],[7979,7979]]],[1563781702834,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781702834,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563781683494,["GJX@GJXAIOU",[[1,8574," 、、"]],[8574,8574],[8577,8577]]],[1563781684066,["GJX@GJXAIOU",[[-1,8575,"、、"]],[8577,8577],[8575,8575]]],[1563781686210,["GJX@GJXAIOU",[[1,8575,"//     lxl"]],[8575,8575],[8585,8585]]],[1563781690362,["GJX@GJXAIOU",[[-1,8615,"\n"]],[8616,8616],[8615,8615]]],[1563781695613,["GJX@GJXAIOU",[[1,8649," //lxl"]],[8649,8649],[8655,8655]]],[1563781701737,["GJX@GJXAIOU",[[-1,8682,"\n"]],[8682,8682],[8681,8681]]],[1563781701850,["GJX@GJXAIOU",[[-1,8681,"\n"]],[8681,8681],[8680,8680]]],[1563781702003,["GJX@GJXAIOU",[[-1,8680,"\n"]],[8680,8680],[8679,8679]]],[1563781702226,["GJX@GJXAIOU",[[-1,8679,"\n"]],[8679,8679],[8678,8678]]],[1563781702371,["GJX@GJXAIOU",[[-1,8678,"\n"]],[8678,8678],[8677,8677]]],[1563781702485,["GJX@GJXAIOU",[[-1,8677,"\n"]],[8677,8677],[8676,8676]]],[1563781702619,["GJX@GJXAIOU",[[-1,8676,"\n"]],[8676,8676],[8675,8675]]],[1563781702754,["GJX@GJXAIOU",[[-1,8675,"\n"]],[8675,8675],[8674,8674]]],[1563781762832,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563781762832,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563781702883,["GJX@GJXAIOU",[[-1,8674,"\n"]],[8674,8674],[8673,8673]]],[1563781703140,["GJX@GJXAIOU",[[-1,8673,"\n"]],[8673,8673],[8672,8672]]],[1563781703290,["GJX@GJXAIOU",[[-1,8672,"\n"]],[8672,8672],[8671,8671]]],[1563781703603,["GJX@GJXAIOU",[[-1,8671,"\n"]],[8671,8671],[8670,8670]]],[1563781703770,["GJX@GJXAIOU",[[-1,8670,"\n"]],[8670,8670],[8669,8669]]],[1563781703938,["GJX@GJXAIOU",[[-1,8669,"\n"]],[8669,8669],[8668,8668]]],[1563781704092,["GJX@GJXAIOU",[[-1,8668,"\n"]],[8668,8668],[8667,8667]]],[1563781704242,["GJX@GJXAIOU",[[-1,8667,"\n"]],[8667,8667],[8666,8666]]],[1563781704378,["GJX@GJXAIOU",[[-1,8666,"\n"]],[8666,8666],[8665,8665]]],[1563781704515,["GJX@GJXAIOU",[[-1,8665,"\n"]],[8665,8665],[8664,8664]]],[1563781704657,["GJX@GJXAIOU",[[-1,8664,"\n"]],[8664,8664],[8663,8663]]],[1563781704844,["GJX@GJXAIOU",[[-1,8663,"\n"]],[8663,8663],[8662,8662]]],[1563781705076,["GJX@GJXAIOU",[[-1,8662,"\n"]],[8662,8662],[8661,8661]]],[1563781705828,["GJX@GJXAIOU",[[-1,8661,"\n"]],[8661,8661],[8660,8660]]],[1563781708093,["GJX@GJXAIOU",[[1,8668,"\n"]],[8664,8664],[8665,8665]]],[1563781708209,["GJX@GJXAIOU",[[1,8669,"\n"]],[8665,8665],[8666,8666]]],[1563781738509,["GJX@GJXAIOU",[[1,8666,"### StringBuffer·"]],[8666,8666],[8683,8683]]],[1563781738871,["GJX@GJXAIOU",[[1,8684,"··"]],[8683,8683],[8686,8686]]],[1563781739701,["GJX@GJXAIOU",[[-1,8684,"··"]],[8686,8686],[8684,8684]]],[1563781741068,["GJX@GJXAIOU",[[1,8684,"```"]],[8684,8684],[8687,8687]]],[1563781741101,["GJX@GJXAIOU",[[1,8687,"language\n```\n"]],[8687,8687],[8687,8695]]],[1563781741299,["GJX@GJXAIOU",[[-1,8687,"language"],[1,8695,"j"]],[8687,8695],[8688,8688]]],[1563781743225,["GJX@GJXAIOU",[[1,8688,"avapackage com.qfedu.b_javaAPI;\n\npublic class TestStringBuffer {\n\tpublic static void main(String[] args) {\n\t\t//调用无参构造方法，创建的一个默认字符个数为16的StringBuffer对象\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\t\n\t\tstringBuffer.append(\"我的家在东北~~~\");\n\t\tstringBuffer.append('松'); // \\40\n\t\t\n\t\tstringBuffer.insert(10, \"花江上啊~~~\");\n\t\t\n\t\tString str = stringBuffer.substring(0, 6);\n\t\t\n\t\tstringBuffer.delete(0, 6);\n\t\tstringBuffer.deleteCharAt(0);\n\t\t\n\t\tstringBuffer.reverse();\n\t\t\n\t\tSystem.out.println(stringBuffer.toString());\n\t\tSystem.out.println(str);\n\t\t\n\t\t//StringBuilder 是线程不安全的， JDK1.5之后的新特征，但是效率\n\t\t//StringBuffer 是线程安全的，效率低\n\t}\n}"]],[8688,8688],[9301,9301]]],[1563781749162,["GJX@GJXAIOU",[[1,8691,"\n"]],[8691,8691],[8692,8692]]],[1563782062840,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782062840,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782013181,["GJX@GJXAIOU",[[1,9307,"### Syt"]],[9307,9307],[9314,9314]]],[1563782013899,["GJX@GJXAIOU",[[-1,9313,"t"]],[9314,9314],[9313,9313]]],[1563782017280,["GJX@GJXAIOU",[[1,9313,"stem里面"]],[9313,9313],[9319,9319]]],[1563782017314,["GJX@GJXAIOU",[[1,9317," "]],[9319,9319],[9320,9320]]],[1563782018376,["GJX@GJXAIOU",[[1,9320,"的方法"]],[9320,9320],[9323,9323]]],[1563782018683,["GJX@GJXAIOU",[[1,9326,"\n"]],[9323,9323],[9324,9324]]],[1563782019189,["GJX@GJXAIOU",[[1,9327,"\n"]],[9324,9324],[9325,9325]]],[1563782020925,["GJX@GJXAIOU",[[1,9325,"```"]],[9325,9325],[9328,9328]]],[1563782020961,["GJX@GJXAIOU",[[1,9328,"language\n```\n"]],[9328,9328],[9328,9336]]],[1563782021471,["GJX@GJXAIOU",[[-1,9328,"language"],[1,9336,"j"]],[9328,9336],[9329,9329]]],[1563782023034,["GJX@GJXAIOU",[[1,9329,"ava"]],[9329,9329],[9332,9332]]],[1563782023146,["GJX@GJXAIOU",[[1,9333,"\n"]],[9332,9332],[9333,9333]]],[1563782023306,["GJX@GJXAIOU",[[1,9334,"\n"]],[9333,9333],[9334,9334]]],[1563782122840,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782122840,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782091470,["GJX@GJXAIOU",[[1,9333,"package com.qfedu.b_javaAPI;\n\nimport java.util.Properties;\n\npublic class TestSystem {\n\tpublic static void main(String[] args) {\n\t\t//属性  获取系统属性\n\t\tProperties ps = System.getProperties(); \n\t\t\n\t\t//属性的展示方式\n\t\tps.list(System.out);\n\t\t\n\t\t//使用属性是获取属性里面的\n\t\tString username = System.getProperty(\"user.name\");\n\t\tSystem.out.println(username);\n\t}\n}"]],[9333,9333],[9666,9666]]],[1563782097112,["GJX@GJXAIOU",[[1,9576,"nei"]],[9576,9576],[9579,9579]]],[1563782098748,["GJX@GJXAIOU",[[-1,9576,"nei"]],[9579,9579],[9576,9576]]],[1563782100824,["GJX@GJXAIOU",[[1,9576,"内容"]],[9576,9576],[9578,9578]]],[1563782362847,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782362847,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782305099,["GJX@GJXAIOU",[[1,9677,"\n"]],[9673,9673],[9674,9674]]],[1563782307141,["GJX@GJXAIOU",[[1,9678,"\n"]],[9674,9674],[9675,9675]]],[1563782311611,["GJX@GJXAIOU",[[1,9675,"### Runtime"]],[9675,9675],[9686,9686]]],[1563782311956,["GJX@GJXAIOU",[[1,9690,"\n"]],[9686,9686],[9687,9687]]],[1563782313327,["GJX@GJXAIOU",[[1,9687,"```"]],[9687,9687],[9690,9690]]],[1563782313364,["GJX@GJXAIOU",[[1,9690,"language\n```\n"]],[9690,9690],[9690,9698]]],[1563782314365,["GJX@GJXAIOU",[[-1,9690,"language"],[1,9698,"j"]],[9690,9698],[9691,9691]]],[1563782314796,["GJX@GJXAIOU",[[1,9691,"ava"]],[9691,9691],[9694,9694]]],[1563782314915,["GJX@GJXAIOU",[[1,9695,"\n"]],[9694,9694],[9695,9695]]],[1563782315851,["GJX@GJXAIOU",[[1,9695,"package com.qfedu.b_javaAPI;\n\nimport java.io.IOException;\n\npublic class TsetRuntime {\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\t//获取软件的运行环境\n\t\tRuntime run = Runtime.getRuntime();\n\t\t\n\t\tSystem.out.println(\"当前空余内存:\" + run.freeMemory());\n\t\tSystem.out.println(\"JVM只能的总内存:\" + run.totalMemory());\n\t\tSystem.out.println(\"JVM能够使用最大内存:\" + run.maxMemory());\n\t\t\n\t\tProcess notepad = run.exec(\"notepad\");\n\t\t//Process myEclipse = run.exec(\"C:/MyEclipse Professional 2014/myeclipse.exe\");\n\t\t\n\t\tThread.sleep(10000);\n\t\t\n\t\tnotepad.destroy();\t\n\t}\n}\n"]],[9695,9695],[10265,10265]]],[1563782330012,["GJX@GJXAIOU",[[1,10126," //打开应用程序"]],[10126,10126],[10135,10135]]],[1563782339830,["GJX@GJXAIOU",[[1,10283,"\n"]],[10278,10278],[10279,10279]]],[1563782339948,["GJX@GJXAIOU",[[1,10284,"\n"]],[10279,10279],[10280,10280]]],[1563782344271,["GJX@GJXAIOU",[[1,10280,"### Date"]],[10280,10280],[10288,10288]]],[1563782345174,["GJX@GJXAIOU",[[1,10293,"\n"]],[10288,10288],[10289,10289]]],[1563782346606,["GJX@GJXAIOU",[[1,10289,"```"]],[10289,10289],[10292,10292]]],[1563782346642,["GJX@GJXAIOU",[[1,10292,"language\n```\n"]],[10292,10292],[10292,10300]]],[1563782346821,["GJX@GJXAIOU",[[-1,10292,"language"],[1,10300,"j"]],[10292,10300],[10293,10293]]],[1563782347474,["GJX@GJXAIOU",[[1,10293,"avca"]],[10293,10293],[10297,10297]]],[1563782348218,["GJX@GJXAIOU",[[-1,10295,"ca"]],[10297,10297],[10295,10295]]],[1563782348637,["GJX@GJXAIOU",[[1,10295,"a"]],[10295,10295],[10296,10296]]],[1563782348899,["GJX@GJXAIOU",[[1,10297,"\n"]],[10296,10296],[10297,10297]]],[1563782422848,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782422848,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782363683,["GJX@GJXAIOU",[[1,10297,"package com.qfedu.b_javaAPI;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class TestDate {\n\tpublic static void main(String[] args) {\n\t\t//Date 封装了系统的当中的时间类\n\t\tDate date = new Date();\n\t\t\n\t\t//Calender 日历类 可以直接获取年月日时分秒\n\t\tCalendar c = Calendar.getInstance();\n\t\t\n\t\tint year = c.get(Calendar.YEAR);\n\t\tint month = c.get(Calendar.MONTH);\n\t\tint day = c.get(Calendar.DAY_OF_MONTH);\n\t\tint dayOfWeek = c.get(Calendar.DAY_OF_WEEK);\n\t\t\n\t\tint hour = c.get(Calendar.HOUR_OF_DAY);\n\t\tint minute = c.get(Calendar.MINUTE);\n\t\tint second = c.get(Calendar.SECOND);\n\t\t\n\t\tSystem.out.println(year + \":\" + (month + 1) + \":\" + day + \" \" + dayOfWeek \n\t\t\t\t+ \" \" + hour + \":\" + minute + \":\" + second );\n\t\t\n\t\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy年MM月dd日 E  HH:mm:ss\");\n\t\tSystem.out.println(sf.format(date));\n\t\t\n\t\t\n\t}\n}\n"]],[10297,10297],[11142,11142]]],[1563782602848,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782602848,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782583577,["GJX@GJXAIOU",[[1,11018,"//格式化显示"]],[11018,11018],[11025,11025]]],[1563782722848,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782722848,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782711059,["GJX@GJXAIOU",[[1,11159,"\n"]],[11154,11154],[11155,11155]]],[1563782715651,["GJX@GJXAIOU",[[-1,11159,"\n"]],[11155,11155],[11154,11154]]],[1563782716443,["GJX@GJXAIOU",[[1,11159,"\n"]],[11154,11154],[11155,11155]]],[1563782720528,["GJX@GJXAIOU",[[1,11155,"### Math"]],[11155,11155],[11163,11163]]],[1563782722147,["GJX@GJXAIOU",[[1,11168,"\n"]],[11163,11163],[11164,11164]]],[1563782782849,[null,[[-1,868,"o"],[1,869," "]],[868,868],[870,870]]],[1563782782849,[null,[[1,868,"o"],[-1,868," "]],[870,870],[868,868]]],[1563782723637,["GJX@GJXAIOU",[[1,11164,"```"]],[11164,11164],[11167,11167]]],[1563782723675,["GJX@GJXAIOU",[[1,11167,"language\n```\n"]],[11167,11167],[11167,11175]]],[1563782724238,["GJX@GJXAIOU",[[-1,11167,"language"],[1,11175,"j"]],[11167,11175],[11168,11168]]],[1563782724665,["GJX@GJXAIOU",[[1,11168,"ava"]],[11168,11168],[11171,11171]]],[1563782724782,["GJX@GJXAIOU",[[1,11172,"\n"]],[11171,11171],[11172,11172]]],[1563782751787,["GJX@GJXAIOU",[[1,11172,"package com.qfedu.b_javaAPI;\n\npublic class TestMath {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Math.PI);\n\t\tSystem.out.println(Math.ceil(3.14)); //向上取整 4\n\t\tSystem.out.println(Math.ceil(-3.14)); //向上取整 -3\n\t\t\n\t\tSystem.out.println(Math.floor(3.14)); //向下取整 3\n\t\tSystem.out.println(Math.floor(-3.14)); //向下取整 -4\n\t\t\n\t\tSystem.out.println(Math.round(15.5));\n\t\tSystem.out.println(Math.round(15.1));\n\t\t\n\t\t//0 ~ 1 之间的随机数\n\t\tSystem.out.println(Math.random());\n\t}\n}"]],[11172,11172],[11644,11644]]]],null,"GJX@GJXAIOU"],["cf94cd43-33a4-4016-96c6-bc951d9fe189",1563843346722,"## 一、 IO流\n分为：输入流和输出流    \n字节流和字符流\n字节流：\nInputStream \n    FileInputStream\nOutputStream\n    FileOutputStream\n    \n字符流：\nReader\n    FileReader\nWriter\n    FileWriter\n\n- 注意：\n  - 1.使用缓冲效率更高，原因是解决了内存访问硬盘的次数过多导致的时间上的浪费，通常缓冲流使用的缓冲空间一般都是4KB或者8KB，为了迎合硬盘读取的特征，正是一个扇区的大小；\n  - 2.FileWriter 不是直接把数据写入到磁盘，而是在内存中建立了一个缓冲区，用于保存用户想要写入到硬盘的数据，有三种情况才会真正的写入数据到硬盘：\n    1> 缓冲区满了\n    2> 调用flush，清空缓冲区\n    3> FileWriter输出管道关闭\n  - 3.字节流和字符流选择，\n    字节流基本上可以满足所有的文件内容传输需求\n    字符流，个人建议 只用来处理记事本可以打开的可视化文件\n\n\n## 缓冲\n\n昨天学习字符流和字节流的时候，发现如果使用了缓冲，时间效率更高\n  \t\nSun提供了Java自己的缓冲机制：字节缓冲流和字符缓冲流\n\n---| InputStream 输入字节流的基类/超类 抽象类\n------| FileInputStream 文件操作的字节输入流\n------| BufferedInputStream 缓冲输入字节流，在缓冲字符流对象中，底层维护了一个8kb缓冲字节数组\n\n- 构造方法：\n\tBufferedInputStream(InputStream in);\n\tBufferedInputStream(InputStream in, int size);\t\n构造方法中都有一个参数是InputStream, 要求传入的是InputStream的子类对象（多态），第二个构造方法中多了一个参数是int size ，这个size表示设置缓冲区的大 小， 默认缓冲数组的大小是一个8kb的字节数组\n\t构造方法中的InputStream是给缓冲流提供读写能力的！！！\n\t\n- 【记住】\n\t\t缓冲流是没有读写能力的！！！需要对应的字节流或者字符流来提供\n\t\t\n- 使用流程：\n\t1.找到目标文件\n\t2.建立管道\n\t\ta) 首先创建当前文件的InputStream的子类对象，FileInputStream\n\t\tb) 使用InputStream的子类对象，作为BufferedInputStream构造方法参数，创建缓冲流对象\n\t3.读取数据\n\t4.关闭资源\n### 输入字节缓冲\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n\npublic class StreamInputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\treadTest1();\n\t}\n\t\n\tpublic static void readTest1() throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:/aaa/1.txt\");\n\t\t\n\t\t//判断他是否是一个普通文件，是否存在\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileInputStream提供读写能力\n\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\n\t\t//利用FileInputStream对象，创建对应的BufferedInputStream\n\t\tBufferedInputStream bs = new BufferedInputStream(fis);\n\t\t\n\t\t//这种方式见上面所有语句合成这一句话，前提是文件必须存在；\n\t\t//BufferedInputStream bs2 = new BufferedInputStream(\n\t\t//\t\tnew FileInputStream(new File(\"C:/aaa/1.txt\")));\n\t\t\n\t\t//3. 读取数据（准备一个缓冲数组）\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[512];\n\t\t\n\t\twhile ((length = bs.read(buffer)) != -1) {\n\t\t\tSystem.out.println(new String(buffer, 0, length));\n\t\t}\n\t\t\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//在BufferedInputStream的close方法中，该方法会自动关闭创建缓冲流时使用的输入字节流对象：FileInputStream对象\n\t\t//fis.close();//不需要关闭了\n\t}\n}\t\n\n\n```\n\n\n### 输出字节缓冲\nStreamOutputBuffered.java\n能用缓冲就不用字节流\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class StreamOutputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\tcopyFile();\n\t\t//WriteTest();\n\t}\n\t\n\tpublic static void copyFile() throws IOException {\n\t\t//1. 找到源文件\n\t\tFile srcFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操.avi\");\n\t\t\n\t\tif (!srcFile.exists() || !srcFile.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 确定目标文件\n\t\tFile dstFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操2.avi\");\n\t\t\n\t\t//3. 建立输入输出管道\n\t\tFileInputStream fis = new FileInputStream(srcFile);\n\t\tFileOutputStream fos = new FileOutputStream(dstFile);\n\t\t\n\t\t//4. 提供对应的缓冲流\n\t\tBufferedInputStream bis = new BufferedInputStream(fis);\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\n\t\t\n\t\t//5. 读取数据拷贝\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[1024 * 8];\n\t\t\n\t\twhile ((length = bis.read(buffer)) != -1) {\n\t\t\tbos.write(buffer, 0, length);\n\t\t}\n\t\t\n\t\t//6. 关闭资源\n\t\tbos.close();\n\t\tbis.close();\n\t\t\n\t}\n\t\n\tpublic static void WriteTest() throws IOException {\n\t\t//1. 确定要操作的文件\n\t\tFile file = new File(\"C:/aaa/5.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileOutputStream对象，提供读写能力\n\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\n\t\t//创建BufferedOutputStream对象，用FileOutputStream作为参数\n\t\tBufferedOutputStream bs = new BufferedOutputStream(fos);\n\t\t\n\t\t//3. 写入数据\n\t\tString str = \"今天JD iPad Pro又便宜了一百~~~\";\n\t\t\n\t\tbs.write(str.getBytes());\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//fos FileOutputStream不用单独关闭，缓冲流对象的close会关闭输出字节流\n\t}\n}\n\n```\n\n### 输入字符缓冲\n\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n/*\n \tBufferedReader 缓冲区是一个char类型数组，数组元素个数为8192， 占用空间大小是16KB\n */\n\npublic class ReaderBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\稻香.lrc\");\n\t\t\n\t\t//判断文件是否存在，是否是普通文件\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道 \n\t\t//所有的缓冲流都是没有读取能力的，需要提供对应的字符流来提供读写能力\n\t\tFileReader fr = new FileReader(file);\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\t\n\t\t//3. 读取文件内容\n\t\tString str = null;\n\t\t\n\t\twhile ((str = br.readLine()) != null) { //按行读取\n\t\t\tSystem.out.println(str);\n\t\t}\n\t\t\n\t\t//4. 关闭资源\n\t\tbr.close();\n\t\t\n\t}\n}\n\n```\n\n### 输出字符缓冲\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class WriterBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 确定目标文件\n\t\tFile file = new File(\"C:/aaa/6.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\tFileWriter fw = new FileWriter(file);\n\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\n\t\t//3. 写入数据\n\t\tbw.write(\"感谢你给我的光荣\");\n\t\tbw.write(\"&&&&&&&&&&&\");\n\t\tbw.newLine(); //换行！！！\n\t\tbw.write(\"*****************\");\n\t\t\n\t\t//4. 关闭资源\n\t\tbw.close();\n\t}\n}\n\n```\n\n## JavaAPI\n\n### String 类型\n==和 equals 方法\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"David\";\n\t\tString str5 = \"David\";\n\t\tString str2 = new String(str1);\n\t\tString str3 = new String(str1);\n\t\tString str4 = new String(str2);\n\t\t\n\t\tSystem.out.println(\"str1 == str5 :\" + (str1 == str5)); //true\n\t\tSystem.out.println(\"str1 == str2 :\" + (str1 == str2)); //false\n\t\tSystem.out.println(\"str2 == str3 :\" + (str2 == str3)); //false\n\t\tSystem.out.println(\"str2 == str4 :\" + (str2 == str4)); //false\n\t\tSystem.out.println(\"str3 == str4 :\" + (str3 == str4)); //false\n\t\t\n\t\tSystem.out.println(\"str1.equals(str2):\" + str1.equals(str2)); //true\n\t\tSystem.out.println(\"str1.equals(str3):\" + str1.equals(str3)); //true\n\t\tSystem.out.println(\"str1.equals(str4):\" + str1.equals(str4)); //true\n\t\tSystem.out.println(\"str1.equals(str5):\" + str1.equals(str5)); //true\n\t}\n}\n```\n\n### String 的方法\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class StringMethods {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// length()  求字符串元素个数，不是占用的空间\n\t\tSystem.out.println(\"123\".length());  //3\n\t\tSystem.out.println(\"雷猴~\".length()); //3\n\t\t\n\t\t// charAt(int index); 获取字符串中的一个字符\n\t\tSystem.out.println(\"123456789\".charAt(5)); //6\n\t\t\n\t\t//indexOf(int ch); (String str); (char c)\n\t\tSystem.out.println(\"2345678987654345\".indexOf('2')); // 0\n\t\tSystem.out.println(\"2345678987654345\".indexOf(\"789\")); //5\n\t\t\n\t\t//lastIndexOf()\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //-1 \n\t\t//这里找的是ASCII码为2的字符，因为前32个ASCII码值不可见\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //13\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(\"345\")); //14\n\t\t\n\t\t//endWith(String str)\n\t\tSystem.out.println(\"1234567.txt\".endsWith(\"tx\")); //false\n\t\t\n\t\t//contains()\n\t\tSystem.out.println(\"321321321\".contains(\"21\")); //true\n\t\t\n\t\t//isEmpty()\n\t\tSystem.out.println(\"1\".isEmpty()); //false\n\t\tSystem.out.println(\"\".isEmpty()); //true\n\t\t\n\t\t//equalsIgnoreCase()\n\t\tSystem.out.println(\"abc\".equals(\"ABC\")); //false\n\t\tSystem.out.println(\"abc\".equalsIgnoreCase(\"ABC\")); //true\n\t\t\n\t\t//static String valueOf(char[] data);\n\t\tchar[] arr = {'a','b','c','d','e','f','g'};\n\t\tSystem.out.println(String.valueOf(arr)); //abcdefg\n\t\t\n\t\t//toCharArray()\n\t\tchar[] arr2 = \"1234567890\".toCharArray();\n\t\t\n\t\tfor (char c : arr2) {\n\t\t\tSystem.out.println(c); \n\t\t}\n\t\t//1\n\t\t//2\n\t\t//......\n\t\t\n\t\t//replace(char oldChar, char newChar);\n\t\tString str = \"123456282\";\n\t\t\n\t\tstr = str.replace('2', '5');\n\t\tSystem.out.println(str);//\"153456285\" 因为有个遍历，因此是全部调换\n\t\t\n\t\t\n\t\tString lrc = \"[00:00.00]侯高俊杰 - 稻香\\r\\n\" + \n\t\t\t\t\"[00:07.74]\\r\\n\" + \n\t\t\t\t\"[00:10.58]作词：周杰伦  作曲：周杰伦\\r\\n\" + \n\t\t\t\t\"[00:16.05]\\r\\n\" + \n\t\t\t\t\"[00:31.11]对这个世界如果你有太多的抱怨\\r\\n\" + \n\t\t\t\t\"[00:34.65]跌倒了  就不敢继续往前走\\r\\n\" + \n\t\t\t\t\"[00:37.48]为什么  人要这么的脆弱 堕落\\r\\n\" + \n\t\t\t\t\"[00:41.61]请你打开电视看看\\r\\n\" + \n\t\t\t\t\"[00:43.44]多少人为生命在努力勇敢的走下去\\r\\n\" + \n\t\t\t\t\"[00:47.37]我们是不是该知足\\r\\n\" + \n\t\t\t\t\"[00:49.88]珍惜一切 就算没有拥有\";\n\t\t//切割字符串\n\t\tString[] array = lrc.split(\"\\r\\n\");\n\t\t\n\t\tfor (String string : array) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\t//trim() 用户处理前端发送过来数据的多余空格\n\t\tString username = \"    lxl\";\n\t\tSystem.out.println(username); //     lxl\n\t\tusername = username.trim();\t\t\n\t\tSystem.out.println(username); //lxl\n\t}\n}\n```\n\n### StringBuffer·\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class TestStringBuffer {\n\tpublic static void main(String[] args) {\n\t\t//调用无参构造方法，创建的一个默认字符个数为16的StringBuffer对象\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\t\n\t\tstringBuffer.append(\"我的家在东北~~~\");\n\t\tstringBuffer.append('松'); // \\40\n\t\t\n\t\tstringBuffer.insert(10, \"花江上啊~~~\");\n\t\t\n\t\tString str = stringBuffer.substring(0, 6);\n\t\t\n\t\tstringBuffer.delete(0, 6);\n\t\tstringBuffer.deleteCharAt(0);\n\t\t\n\t\tstringBuffer.reverse();\n\t\t\n\t\tSystem.out.println(stringBuffer.toString());\n\t\tSystem.out.println(str);\n\t\t\n\t\t//StringBuilder 是线程不安全的， JDK1.5之后的新特征，但是效率\n\t\t//StringBuffer 是线程安全的，效率低\n\t}\n}\n```\n### System 里面的方法\n\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.util.Properties;\n\npublic class TestSystem {\n\tpublic static void main(String[] args) {\n\t\t//属性  获取系统属性\n\t\tProperties ps = System.getProperties(); \n\t\t\n\t\t//属性的展示方式\n\t\tps.list(System.out);\n\t\t\n\t\t//使用属性是获取属性里面的内容\n\t\tString username = System.getProperty(\"user.name\");\n\t\tSystem.out.println(username);\n\t}\n}\n\n```\n\n### Runtime\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.io.IOException;\n\npublic class TsetRuntime {\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\t//获取软件的运行环境\n\t\tRuntime run = Runtime.getRuntime();\n\t\t\n\t\tSystem.out.println(\"当前空余内存:\" + run.freeMemory());\n\t\tSystem.out.println(\"JVM只能的总内存:\" + run.totalMemory());\n\t\tSystem.out.println(\"JVM能够使用最大内存:\" + run.maxMemory());\n\t\t\n\t\tProcess notepad = run.exec(\"notepad\"); //打开应用程序\n\t\t//Process myEclipse = run.exec(\"C:/MyEclipse Professional 2014/myeclipse.exe\");\n\t\t\n\t\tThread.sleep(10000);\n\t\t\n\t\tnotepad.destroy();\t\n\t}\n}\n\n```\n\n### Date\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class TestDate {\n\tpublic static void main(String[] args) {\n\t\t//Date 封装了系统的当中的时间类\n\t\tDate date = new Date();\n\t\t\n\t\t//Calender 日历类 可以直接获取年月日时分秒\n\t\tCalendar c = Calendar.getInstance();\n\t\t\n\t\tint year = c.get(Calendar.YEAR);\n\t\tint month = c.get(Calendar.MONTH);\n\t\tint day = c.get(Calendar.DAY_OF_MONTH);\n\t\tint dayOfWeek = c.get(Calendar.DAY_OF_WEEK);\n\t\t\n\t\tint hour = c.get(Calendar.HOUR_OF_DAY);\n\t\tint minute = c.get(Calendar.MINUTE);\n\t\tint second = c.get(Calendar.SECOND);\n\t\t\n\t\tSystem.out.println(year + \":\" + (month + 1) + \":\" + day + \" \" + dayOfWeek \n\t\t\t\t+ \" \" + hour + \":\" + minute + \":\" + second );\n\t\t//格式化显示\n\t\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy年MM月dd日 E  HH:mm:ss\");\n\t\tSystem.out.println(sf.format(date));\n\t\t\n\t\t\n\t}\n}\n\n```\n\n### Math\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class TestMath {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Math.PI);\n\t\tSystem.out.println(Math.ceil(3.14)); //向上取整 4\n\t\tSystem.out.println(Math.ceil(-3.14)); //向上取整 -3\n\t\t\n\t\tSystem.out.println(Math.floor(3.14)); //向下取整 3\n\t\tSystem.out.println(Math.floor(-3.14)); //向下取整 -4\n\t\t\n\t\tSystem.out.println(Math.round(15.5));\n\t\tSystem.out.println(Math.round(15.1));\n\t\t\n\t\t//0 ~ 1 之间的随机数\n\t\tSystem.out.println(Math.random());\n\t}\n}\n```\n\n\n\n\n\n",[[1563843303750,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1563843306737,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1563843306872,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1563843307022,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1563843307059,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1563843314822,["GJX@GJXAIOU",[[1,4,"tags :"]],[4,4],[10,10]]],[1563843315445,["GJX@GJXAIOU",[[-1,8," :"]],[10,10],[8,8]]],[1563843316871,["GJX@GJXAIOU",[[1,8,": "]],[8,8],[10,10]]],[1563843317806,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1563843322008,["GJX@GJXAIOU",[[1,11,"- IO流"]],[11,11],[16,16]]],[1563843322328,["GJX@GJXAIOU",[[1,17,"\n"]],[16,16],[17,17]]],[1563843329959,["GJX@GJXAIOU",[[1,17,"- JavaAPI"]],[17,17],[26,26]]],[1563843370127,["GJX@GJXAIOU",[[1,65,"- "]],[65,65],[67,67]]],[1563843372462,["GJX@GJXAIOU",[[1,144,"- "]],[144,144],[146,146]]],[1563843387710,["GJX@GJXAIOU",[[1,72,"  - "]],[72,72],[76,76]]],[1563843390686,["GJX@GJXAIOU",[[1,93,"  - "]],[93,93],[97,97]]],[1563843395391,["GJX@GJXAIOU",[[1,113,"  - "]],[113,113],[117,117]]],[1563843398269,["GJX@GJXAIOU",[[1,134,"  - "]],[134,134],[138,138]]],[1563843405414,["GJX@GJXAIOU",[[1,167,"- "]],[167,167],[169,169]]],[1563843408693,["GJX@GJXAIOU",[[1,180,"  - "]],[180,180],[184,184]]],[1563843411782,["GJX@GJXAIOU",[[1,167,"  "]],[173,173],[175,175]]],[1563843416286,["GJX@GJXAIOU",[[1,203,"  - "]],[203,203],[207,207]]],[1563843417445,["GJX@GJXAIOU",[[-1,205,"- "]],[207,207],[205,205]]],[1563843422381,["GJX@GJXAIOU",[[1,197,"- "]],[197,197],[199,199]]],[1563843422756,["GJX@GJXAIOU",[[1,197,"  "]],[199,199],[201,201]]],[1563843425734,["GJX@GJXAIOU",[[1,214,"- "]],[214,214],[216,216]]],[1563843426108,["GJX@GJXAIOU",[[1,214,"  "]],[216,216],[218,218]]],[1563843477431,["GJX@GJXAIOU",[[1,31,"@toc"]],[31,31],[35,35]]],[1563843478230,["GJX@GJXAIOU",[[1,36,"\n"]],[35,35],[36,36]]],[1563843504060,["GJX@GJXAIOU",[[1,550,"e "]],[550,550],[551,551]]],[1563843504158,["GJX@GJXAIOU",[[1,551,"r"]],[551,551],[552,552]]],[1563843508709,["GJX@GJXAIOU",[[-1,550,"er "]],[552,552],[550,550]]],[1563843510432,["GJX@GJXAIOU",[[1,550,"二、"]],[550,550],[552,552]]],[1563843556780,["GJX@GJXAIOU",[[1,1012,"**"],[1,1042,"**"]],[1012,1042],[1012,1046]]],[1563843559422,["GJX@GJXAIOU",[[-1,1025,"！！！"]],[1028,1028],[1025,1025]]],[1563843560802,["GJX@GJXAIOU",[[1,1025,"，"]],[1025,1025],[1026,1026]]],[1563843582792,["GJX@GJXAIOU",[[1,1057,"- "]],[1057,1057],[1059,1059]]],[1563843586146,["GJX@GJXAIOU",[[1,1069,"- "]],[1069,1069],[1071,1071]]],[1563843589230,["GJX@GJXAIOU",[[1,1186,"- "]],[1186,1186],[1188,1188]]],[1563843592974,["GJX@GJXAIOU",[[1,1196,"- "]],[1196,1196],[1198,1198]]],[1563843596615,["GJX@GJXAIOU",[[-1,1056,"\t"],[-1,1068,"\t"],[-1,1078,"\t"],[-1,1126,"\t"],[-1,1185,"\t"],[-1,1195,"\t"]],[1057,1204],[1056,1198]]],[1563843598101,["GJX@GJXAIOU",[[1,1056,"  "],[1,1067,"  "],[1,1076,"  "],[1,1122,"  "],[1,1181,"  "],[1,1190,"  "]],[1056,1198],[1056,1210]]],[1563843601183,["GJX@GJXAIOU",[[1,1083,"- "]],[1083,1083],[1085,1085]]],[1563843603628,["GJX@GJXAIOU",[[1,1133,"-  "]],[1133,1133],[1136,1136]]],[1563843613486,["GJX@GJXAIOU",[[1,1220,"（）"]],[1220,1220],[1222,1222]]],[1563843615487,["GJX@GJXAIOU",[[1,1221,"一"]],[1221,1221],[1222,1222]]],[1563843635428,["GJX@GJXAIOU",[[-1,1968,"见"]],[1969,1969],[1968,1968]]],[1563843637760,["GJX@GJXAIOU",[[1,1968,"将"]],[1968,1968],[1969,1969]]],[1563843643245,["GJX@GJXAIOU",[[-1,2426,"\n"]],[2426,2426],[2425,2425]]],[1563843643460,["GJX@GJXAIOU",[[-1,2425,"\n"]],[2425,2425],[2424,2424]]],[1563843646657,["GJX@GJXAIOU",[[1,2435,"（"]],[2435,2435],[2436,2436]]],[1563843646804,["GJX@GJXAIOU",[[1,2437," "]],[2437,2437],[2437,2437]]],[1563843648132,["GJX@GJXAIOU",[[-1,2435,"（0"]],[2437,2437],[2435,2435]]],[1563843648935,["GJX@GJXAIOU",[[1,2435,"*"]],[2435,2435],[2436,2436]]],[1563843649539,["GJX@GJXAIOU",[[-1,2435,"*"]],[2436,2436],[2435,2435]]],[1563843651005,["GJX@GJXAIOU",[[1,2435,"（）"]],[2435,2435],[2437,2437]]],[1563843652626,["GJX@GJXAIOU",[[1,2436,"二"]],[2436,2436],[2437,2437]]],[1563843659044,["GJX@GJXAIOU",[[1,4164,"（）"]],[4164,4164],[4166,4166]]],[1563843661161,["GJX@GJXAIOU",[[1,4165,"三"]],[4165,4165],[4166,4166]]],[1563843665279,["GJX@GJXAIOU",[[1,5002,"（）"]],[5002,5002],[5004,5004]]],[1563843668218,["GJX@GJXAIOU",[[1,5003,"四"]],[5003,5003],[5004,5004]]],[1563843672998,["GJX@GJXAIOU",[[1,5569,"三 "]],[5569,5569],[5570,5570]]],[1563843673601,["GJX@GJXAIOU",[[1,5570,"、"]],[5570,5570],[5571,5571]]],[1563843677772,["GJX@GJXAIOU",[[-1,5571," "]],[5572,5572],[5571,5571]]],[1563843683815,["GJX@GJXAIOU",[[1,5584,"（）"]],[5584,5584],[5586,5586]]],[1563843686222,["GJX@GJXAIOU",[[1,5585,"一"]],[5585,5585],[5586,5586]]],[1563843693679,["GJX@GJXAIOU",[[1,6492,"（0"]],[6492,6492],[6494,6494]]],[1563843695158,["GJX@GJXAIOU",[[-1,6492,"（0"]],[6494,6494],[6492,6492]]],[1563843696142,["GJX@GJXAIOU",[[1,6492,"（）"]],[6492,6492],[6494,6494]]],[1563843697576,["GJX@GJXAIOU",[[1,6493,"二"]],[6493,6493],[6494,6494]]],[1563843704095,["GJX@GJXAIOU",[[1,8787,"（0"]],[8787,8787],[8789,8789]]],[1563843705260,["GJX@GJXAIOU",[[-1,8788,"0"]],[8789,8789],[8788,8788]]],[1563843705658,["GJX@GJXAIOU",[[1,8788,"）"]],[8788,8788],[8789,8789]]],[1563843766788,[null,[[-1,2439,""],[1,2439,"输"],[-1,4163,"输"],[1,4167,"输"],[-1,5001,"输"],[1,5005,"输"],[-1,5568,"J"],[1,5571,"J"],[-1,5583,"S"],[1,5587,"S"],[-1,6491,"S"],[1,6495,"S"],[-1,8786,"S"],[1,8789,"S"]],[2439,2439],[8790,8790]]],[1563843766788,[null,[[1,2439,""],[-1,2439,"输"],[1,4164,"输"],[-1,4167,"输"],[1,5002,"输"],[-1,5005,"输"],[1,5569,"J"],[-1,5571,"J"],[1,5584,"S"],[-1,5587,"S"],[1,6492,"S"],[-1,6495,"S"],[1,8787,"S"],[-1,8789,"S"]],[8790,8790],[2439,2439]]],[1563843707472,["GJX@GJXAIOU",[[1,8788,"三"]],[8788,8788],[8789,8789]]],[1563843710757,["GJX@GJXAIOU",[[1,9431,"（）"]],[9431,9431],[9433,9433]]],[1563843713601,["GJX@GJXAIOU",[[1,9432,"四"]],[9432,9432],[9433,9433]]],[1563843717251,["GJX@GJXAIOU",[[1,9802,"（）"]],[9802,9802],[9804,9804]]],[1563843718743,["GJX@GJXAIOU",[[1,9803,"五"]],[9803,9803],[9804,9804]]],[1563843723607,["GJX@GJXAIOU",[[1,10410,"（0"]],[10410,10410],[10412,10412]]],[1563843724734,["GJX@GJXAIOU",[[-1,10411,"0"]],[10412,10412],[10411,10411]]],[1563843725208,["GJX@GJXAIOU",[[1,10411,"）"]],[10411,10411],[10412,10412]]],[1563843727215,["GJX@GJXAIOU",[[1,10411,"六"]],[10411,10411],[10412,10412]]],[1563843731559,["GJX@GJXAIOU",[[1,11288,"（）"]],[11288,11288],[11290,11290]]],[1563843732888,["GJX@GJXAIOU",[[1,11289,"其"]],[11289,11289],[11290,11290]]],[1563843734179,["GJX@GJXAIOU",[[-1,11289,"其"]],[11290,11290],[11289,11289]]],[1563843735790,["GJX@GJXAIOU",[[1,11289,"七"]],[11289,11289],[11290,11290]]],[1563843740724,["GJX@GJXAIOU",[[-1,11278,"\n"]],[11278,11278],[11277,11277]]],[1563843745740,["GJX@GJXAIOU",[[-1,10400,"\n"]],[10400,10400],[10399,10399]]],[1563843747850,["GJX@GJXAIOU",[[-1,9792,"\n"]],[9792,9792],[9791,9791]]]],null,"GJX@GJXAIOU"],["2aaff720-6e85-495e-9e43-9c8626760cbd",1568986084910,"---\ntags: \n- IO流\n- JavaAPI\n---\n@toc\n\n## 一、 IO流\n分为：输入流和输出流    \n字节流和字符流\n- 字节流：\n  - InputStream \n      - FileInputStream\n  - OutputStream\n      - FileOutputStream\n    \n- 字符流：\n  - Reader\n      - FileReader\n  - Writer  \n      - FileWriter\n\n- 注意：\n  - 1.使用缓冲效率更高，原因是解决了内存访问硬盘的次数过多导致的时间上的浪费，通常缓冲流使用的缓冲空间一般都是4KB或者8KB，为了迎合硬盘读取的特征，正是一个扇区的大小；\n  - 2.FileWriter 不是直接把数据写入到磁盘，而是在内存中建立了一个缓冲区，用于保存用户想要写入到硬盘的数据，有三种情况才会真正的写入数据到硬盘：\n    1> 缓冲区满了\n    2> 调用flush，清空缓冲区\n    3> FileWriter输出管道关闭\n  - 3.字节流和字符流选择，\n    字节流基本上可以满足所有的文件内容传输需求\n    字符流，个人建议 只用来处理记事本可以打开的可视化文件\n\n\n## 二、缓冲\n\n昨天学习字符流和字节流的时候，发现如果使用了缓冲，时间效率更高\n  \t\nSun提供了Java自己的缓冲机制：字节缓冲流和字符缓冲流\n\n---| InputStream 输入字节流的基类/超类 抽象类\n------| FileInputStream 文件操作的字节输入流\n------| BufferedInputStream 缓冲输入字节流，在缓冲字符流对象中，底层维护了一个8kb缓冲字节数组\n\n- 构造方法：\n\tBufferedInputStream(InputStream in);\n\tBufferedInputStream(InputStream in, int size);\t\n构造方法中都有一个参数是InputStream, 要求传入的是InputStream的子类对象（多态），第二个构造方法中多了一个参数是int size ，这个size表示设置缓冲区的大 小， 默认缓冲数组的大小是一个8kb的字节数组\n\t构造方法中的InputStream是给缓冲流提供读写能力的！！！\n\t\n- 【记住】\n\t\t**缓冲流是没有读写能力的，需要对应的字节流或者字符流来提供**\n\t\t\n- 使用流程：\n  - 1.找到目标文件\n  - 2.建立管道\n  \t- a) 首先创建当前文件的InputStream的子类对象，FileInputStream\n  \t-  b) 使用InputStream的子类对象，作为BufferedInputStream构造方法参数，创建缓冲流对象\n  - 3.读取数据\n  - 4.关闭资源\n### （一）输入字节缓冲\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n\npublic class StreamInputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\treadTest1();\n\t}\n\t\n\tpublic static void readTest1() throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:/aaa/1.txt\");\n\t\t\n\t\t//判断他是否是一个普通文件，是否存在\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileInputStream提供读写能力\n\t\tFileInputStream fis = new FileInputStream(file);\n\t\t\n\t\t//利用FileInputStream对象，创建对应的BufferedInputStream\n\t\tBufferedInputStream bs = new BufferedInputStream(fis);\n\t\t\n\t\t//这种方式将上面所有语句合成这一句话，前提是文件必须存在；\n\t\t//BufferedInputStream bs2 = new BufferedInputStream(\n\t\t//\t\tnew FileInputStream(new File(\"C:/aaa/1.txt\")));\n\t\t\n\t\t//3. 读取数据（准备一个缓冲数组）\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[512];\n\t\t\n\t\twhile ((length = bs.read(buffer)) != -1) {\n\t\t\tSystem.out.println(new String(buffer, 0, length));\n\t\t}\n\t\t\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//在BufferedInputStream的close方法中，该方法会自动关闭创建缓冲流时使用的输入字节流对象：FileInputStream对象\n\t\t//fis.close();//不需要关闭了\n\t}\n}\t\n```\n\n\n### （二） 输出字节缓冲\nStreamOutputBuffered.java\n能用缓冲就不用字节流\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class StreamOutputBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\tcopyFile();\n\t\t//WriteTest();\n\t}\n\t\n\tpublic static void copyFile() throws IOException {\n\t\t//1. 找到源文件\n\t\tFile srcFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操.avi\");\n\t\t\n\t\tif (!srcFile.exists() || !srcFile.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 确定目标文件\n\t\tFile dstFile = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\颈椎操2.avi\");\n\t\t\n\t\t//3. 建立输入输出管道\n\t\tFileInputStream fis = new FileInputStream(srcFile);\n\t\tFileOutputStream fos = new FileOutputStream(dstFile);\n\t\t\n\t\t//4. 提供对应的缓冲流\n\t\tBufferedInputStream bis = new BufferedInputStream(fis);\n\t\tBufferedOutputStream bos = new BufferedOutputStream(fos);\n\t\t\n\t\t//5. 读取数据拷贝\n\t\tint length = -1;\n\t\tbyte[] buffer = new byte[1024 * 8];\n\t\t\n\t\twhile ((length = bis.read(buffer)) != -1) {\n\t\t\tbos.write(buffer, 0, length);\n\t\t}\n\t\t\n\t\t//6. 关闭资源\n\t\tbos.close();\n\t\tbis.close();\n\t\t\n\t}\n\t\n\tpublic static void WriteTest() throws IOException {\n\t\t//1. 确定要操作的文件\n\t\tFile file = new File(\"C:/aaa/5.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\t//创建FileOutputStream对象，提供读写能力\n\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\n\t\t//创建BufferedOutputStream对象，用FileOutputStream作为参数\n\t\tBufferedOutputStream bs = new BufferedOutputStream(fos);\n\t\t\n\t\t//3. 写入数据\n\t\tString str = \"今天JD iPad Pro又便宜了一百~~~\";\n\t\t\n\t\tbs.write(str.getBytes());\n\t\t\n\t\t//4. 关闭资源\n\t\tbs.close();\n\t\t//fos FileOutputStream不用单独关闭，缓冲流对象的close会关闭输出字节流\n\t}\n}\n\n```\n\n### （三）输入字符缓冲\n\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\n/*\n \tBufferedReader 缓冲区是一个char类型数组，数组元素个数为8192， 占用空间大小是16KB\n */\n\npublic class ReaderBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 找到文件\n\t\tFile file = new File(\"C:\\\\Users\\\\刘晓磊\\\\Desktop\\\\稻香.lrc\");\n\t\t\n\t\t//判断文件是否存在，是否是普通文件\n\t\tif (!file.exists() || !file.isFile()) {\n\t\t\tthrow new FileNotFoundException();\n\t\t}\n\t\t\n\t\t//2. 建立管道 \n\t\t//所有的缓冲流都是没有读取能力的，需要提供对应的字符流来提供读写能力\n\t\tFileReader fr = new FileReader(file);\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\t\n\t\t//3. 读取文件内容\n\t\tString str = null;\n\t\t\n\t\twhile ((str = br.readLine()) != null) { //按行读取\n\t\t\tSystem.out.println(str);\n\t\t}\n\t\t\n\t\t//4. 关闭资源\n\t\tbr.close();\n\t\t\n\t}\n}\n\n```\n\n### （四）输出字符缓冲\n```java\npackage com.qfedu.a_buffer;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class WriterBuffered {\n\tpublic static void main(String[] args) throws IOException {\n\t\t//1. 确定目标文件\n\t\tFile file = new File(\"C:/aaa/6.txt\");\n\t\t\n\t\t//2. 建立管道\n\t\tFileWriter fw = new FileWriter(file);\n\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\n\t\t//3. 写入数据\n\t\tbw.write(\"感谢你给我的光荣\");\n\t\tbw.write(\"&&&&&&&&&&&\");\n\t\tbw.newLine(); //换行！！！\n\t\tbw.write(\"*****************\");\n\t\t\n\t\t//4. 关闭资源\n\t\tbw.close();\n\t}\n}\n\n```\n\n## 三、JavaAPI\n\n### （一）String 类型\n==和 equals 方法\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tString str1 = \"David\";\n\t\tString str5 = \"David\";\n\t\tString str2 = new String(str1);\n\t\tString str3 = new String(str1);\n\t\tString str4 = new String(str2);\n\t\t\n\t\tSystem.out.println(\"str1 == str5 :\" + (str1 == str5)); //true\n\t\tSystem.out.println(\"str1 == str2 :\" + (str1 == str2)); //false\n\t\tSystem.out.println(\"str2 == str3 :\" + (str2 == str3)); //false\n\t\tSystem.out.println(\"str2 == str4 :\" + (str2 == str4)); //false\n\t\tSystem.out.println(\"str3 == str4 :\" + (str3 == str4)); //false\n\t\t\n\t\tSystem.out.println(\"str1.equals(str2):\" + str1.equals(str2)); //true\n\t\tSystem.out.println(\"str1.equals(str3):\" + str1.equals(str3)); //true\n\t\tSystem.out.println(\"str1.equals(str4):\" + str1.equals(str4)); //true\n\t\tSystem.out.println(\"str1.equals(str5):\" + str1.equals(str5)); //true\n\t}\n}\n```\n\n### （二）String 的方法\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class StringMethods {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// length()  求字符串元素个数，不是占用的空间\n\t\tSystem.out.println(\"123\".length());  //3\n\t\tSystem.out.println(\"雷猴~\".length()); //3\n\t\t\n\t\t// charAt(int index); 获取字符串中的一个字符\n\t\tSystem.out.println(\"123456789\".charAt(5)); //6\n\t\t\n\t\t//indexOf(int ch); (String str); (char c)\n\t\tSystem.out.println(\"2345678987654345\".indexOf('2')); // 0\n\t\tSystem.out.println(\"2345678987654345\".indexOf(\"789\")); //5\n\t\t\n\t\t//lastIndexOf()\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //-1 \n\t\t//这里找的是ASCII码为2的字符，因为前32个ASCII码值不可见\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(2)); //13\n\t\tSystem.out.println(\"23456789876542345\".lastIndexOf(\"345\")); //14\n\t\t\n\t\t//endWith(String str)\n\t\tSystem.out.println(\"1234567.txt\".endsWith(\"tx\")); //false\n\t\t\n\t\t//contains()\n\t\tSystem.out.println(\"321321321\".contains(\"21\")); //true\n\t\t\n\t\t//isEmpty()\n\t\tSystem.out.println(\"1\".isEmpty()); //false\n\t\tSystem.out.println(\"\".isEmpty()); //true\n\t\t\n\t\t//equalsIgnoreCase()\n\t\tSystem.out.println(\"abc\".equals(\"ABC\")); //false\n\t\tSystem.out.println(\"abc\".equalsIgnoreCase(\"ABC\")); //true\n\t\t\n\t\t//static String valueOf(char[] data);\n\t\tchar[] arr = {'a','b','c','d','e','f','g'};\n\t\tSystem.out.println(String.valueOf(arr)); //abcdefg\n\t\t\n\t\t//toCharArray()\n\t\tchar[] arr2 = \"1234567890\".toCharArray();\n\t\t\n\t\tfor (char c : arr2) {\n\t\t\tSystem.out.println(c); \n\t\t}\n\t\t//1\n\t\t//2\n\t\t//......\n\t\t\n\t\t//replace(char oldChar, char newChar);\n\t\tString str = \"123456282\";\n\t\t\n\t\tstr = str.replace('2', '5');\n\t\tSystem.out.println(str);//\"153456285\" 因为有个遍历，因此是全部调换\n\t\t\n\t\t\n\t\tString lrc = \"[00:00.00]侯高俊杰 - 稻香\\r\\n\" + \n\t\t\t\t\"[00:07.74]\\r\\n\" + \n\t\t\t\t\"[00:10.58]作词：周杰伦  作曲：周杰伦\\r\\n\" + \n\t\t\t\t\"[00:16.05]\\r\\n\" + \n\t\t\t\t\"[00:31.11]对这个世界如果你有太多的抱怨\\r\\n\" + \n\t\t\t\t\"[00:34.65]跌倒了  就不敢继续往前走\\r\\n\" + \n\t\t\t\t\"[00:37.48]为什么  人要这么的脆弱 堕落\\r\\n\" + \n\t\t\t\t\"[00:41.61]请你打开电视看看\\r\\n\" + \n\t\t\t\t\"[00:43.44]多少人为生命在努力勇敢的走下去\\r\\n\" + \n\t\t\t\t\"[00:47.37]我们是不是该知足\\r\\n\" + \n\t\t\t\t\"[00:49.88]珍惜一切 就算没有拥有\";\n\t\t//切割字符串\n\t\tString[] array = lrc.split(\"\\r\\n\");\n\t\t\n\t\tfor (String string : array) {\n\t\t\tSystem.out.println(string);\n\t\t}\n\t\t\n\t\t//trim() 用户处理前端发送过来数据的多余空格\n\t\tString username = \"    lxl\";\n\t\tSystem.out.println(username); //     lxl\n\t\tusername = username.trim();\t\t\n\t\tSystem.out.println(username); //lxl\n\t}\n}\n```\n\n### （三）StringBuffer·\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class TestStringBuffer {\n\tpublic static void main(String[] args) {\n\t\t//调用无参构造方法，创建的一个默认字符个数为16的StringBuffer对象\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\t\n\t\tstringBuffer.append(\"我的家在东北~~~\");\n\t\tstringBuffer.append('松'); // \\40\n\t\t\n\t\tstringBuffer.insert(10, \"花江上啊~~~\");\n\t\t\n\t\tString str = stringBuffer.substring(0, 6);\n\t\t\n\t\tstringBuffer.delete(0, 6);\n\t\tstringBuffer.deleteCharAt(0);\n\t\t\n\t\tstringBuffer.reverse();\n\t\t\n\t\tSystem.out.println(stringBuffer.toString());\n\t\tSystem.out.println(str);\n\t\t\n\t\t//StringBuilder 是线程不安全的， JDK1.5之后的新特征，但是效率\n\t\t//StringBuffer 是线程安全的，效率低\n\t}\n}\n```\n### （四）System 里面的方法\n\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.util.Properties;\n\npublic class TestSystem {\n\tpublic static void main(String[] args) {\n\t\t//属性  获取系统属性\n\t\tProperties ps = System.getProperties(); \n\t\t\n\t\t//属性的展示方式\n\t\tps.list(System.out);\n\t\t\n\t\t//使用属性是获取属性里面的内容\n\t\tString username = System.getProperty(\"user.name\");\n\t\tSystem.out.println(username);\n\t}\n}\n```\n\n### （五）Runtime\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.io.IOException;\n\npublic class TsetRuntime {\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\t\t//获取软件的运行环境\n\t\tRuntime run = Runtime.getRuntime();\n\t\t\n\t\tSystem.out.println(\"当前空余内存:\" + run.freeMemory());\n\t\tSystem.out.println(\"JVM只能的总内存:\" + run.totalMemory());\n\t\tSystem.out.println(\"JVM能够使用最大内存:\" + run.maxMemory());\n\t\t\n\t\tProcess notepad = run.exec(\"notepad\"); //打开应用程序\n\t\t//Process myEclipse = run.exec(\"C:/MyEclipse Professional 2014/myeclipse.exe\");\n\t\t\n\t\tThread.sleep(10000);\n\t\t\n\t\tnotepad.destroy();\t\n\t}\n}\n```\n\n### （六）Date\n```java\npackage com.qfedu.b_javaAPI;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class TestDate {\n\tpublic static void main(String[] args) {\n\t\t//Date 封装了系统的当中的时间类\n\t\tDate date = new Date();\n\t\t\n\t\t//Calender 日历类 可以直接获取年月日时分秒\n\t\tCalendar c = Calendar.getInstance();\n\t\t\n\t\tint year = c.get(Calendar.YEAR);\n\t\tint month = c.get(Calendar.MONTH);\n\t\tint day = c.get(Calendar.DAY_OF_MONTH);\n\t\tint dayOfWeek = c.get(Calendar.DAY_OF_WEEK);\n\t\t\n\t\tint hour = c.get(Calendar.HOUR_OF_DAY);\n\t\tint minute = c.get(Calendar.MINUTE);\n\t\tint second = c.get(Calendar.SECOND);\n\t\t\n\t\tSystem.out.println(year + \":\" + (month + 1) + \":\" + day + \" \" + dayOfWeek \n\t\t\t\t+ \" \" + hour + \":\" + minute + \":\" + second );\n\t\t//格式化显示\n\t\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy年MM月dd日 E  HH:mm:ss\");\n\t\tSystem.out.println(sf.format(date));\n\t\t\n\t\t\n\t}\n}\n```\n\n### （七）Math\n```java\npackage com.qfedu.b_javaAPI;\n\npublic class TestMath {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Math.PI);\n\t\tSystem.out.println(Math.ceil(3.14)); //向上取整 4\n\t\tSystem.out.println(Math.ceil(-3.14)); //向上取整 -3\n\t\t\n\t\tSystem.out.println(Math.floor(3.14)); //向下取整 3\n\t\tSystem.out.println(Math.floor(-3.14)); //向下取整 -4\n\t\t\n\t\tSystem.out.println(Math.round(15.5));\n\t\tSystem.out.println(Math.round(15.1));\n\t\t\n\t\t//0 ~ 1 之间的随机数\n\t\tSystem.out.println(Math.random());\n\t}\n}\n```\n\n\n\n\n\n",[[1568986034403,["GJX@GJXAIOU",[[1,31,"\n"]],[30,30],[31,31]]],[1568986037225,["GJX@GJXAIOU",[[1,31,"# JavaEEDay22-缓冲流和API"]],[31,31],[52,52]]]],null,"GJX@GJXAIOU"]]}