{"compress":true,"commitItems":[["08e391a2-1769-4314-8297-ec99bf37d76b",1563950782195,"",[[1563950731288,["GJX@GJXAIOU",[[1,0,"# JavaDay25网络\n\n\n\n"]],[0,0],[16,16]]],[1563950982400,["GJX@GJXAIOU",[[-1,16,"\n"]],[16,16],[15,15]]],[1563950985687,["GJX@GJXAIOU",[[-1,15,"\n"],[1,16,"网络"]],[15,15],[17,17]]],[1563950999296,["GJX@GJXAIOU",[[1,17,"编程：网络编程是用来解决计算机和计算机直接的"]],[17,17],[39,39]]],[1563951000574,["GJX@GJXAIOU",[[-1,36,"直接的"]],[39,39],[36,36]]],[1563951008424,["GJX@GJXAIOU",[[1,36,"之间的通讯问题；"]],[36,36],[44,44]]],[1563951035839,["GJX@GJXAIOU",[[1,44,"\n\n"]],[44,44],[45,45]]],[1563951037519,["GJX@GJXAIOU",[[-1,45,"\n"],[1,46,"网页"]],[45,45],[47,47]]],[1563951044736,["GJX@GJXAIOU",[[1,47,"编程：基于HDM》"]],[47,47],[56,56]]],[1563951044758,["GJX@GJXAIOU",[[1,52," "]],[56,56],[57,57]]],[1563951046981,["GJX@GJXAIOU",[[-1,56,"》"]],[57,57],[56,56]]],[1563951051506,["GJX@GJXAIOU",[[1,56,"L页面"]],[56,56],[59,59]]],[1563951051529,["GJX@GJXAIOU",[[1,57," "]],[59,59],[60,60]]],[1563951059127,["GJX@GJXAIOU",[[1,60,"的基础上进行数据的交互；"]],[60,60],[72,72]]],[1563951102486,["GJX@GJXAIOU",[[1,72,"\n\n"]],[72,72],[73,73]]],[1563951102934,["GJX@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1563951664358,["GJX@GJXAIOU",[[-1,74,"\n"],[1,75,"IP"]],[74,74],[76,76]]],[1563951665682,["GJX@GJXAIOU",[[1,76,"类"]],[76,76],[77,77]]],[1563951665704,["GJX@GJXAIOU",[[1,76," "]],[77,77],[78,78]]],[1563951667809,["GJX@GJXAIOU",[[1,78,"获取IP"]],[78,78],[82,82]]],[1563951667830,["GJX@GJXAIOU",[[1,80," "]],[82,82],[83,83]]],[1563951668920,["GJX@GJXAIOU",[[1,83,"对象"]],[83,83],[85,85]]],[1563951668941,["GJX@GJXAIOU",[[1,83," "]],[85,85],[86,86]]],[1563951670177,["GJX@GJXAIOU",[[1,86,"的方式"]],[86,86],[89,89]]],[1563951671606,["GJX@GJXAIOU",[[1,89,"\n\n"]],[89,89],[90,90]]],[1563951675305,["GJX@GJXAIOU",[[-1,90,"\n"],[1,91,"使用"]],[90,90],[92,92]]],[1563951676216,["GJX@GJXAIOU",[[1,92,"类："]],[92,92],[94,94]]],[1563951683983,["GJX@GJXAIOU",[[1,94,"InetAddress"]],[94,94],[105,105]]],[1563951684695,["GJX@GJXAIOU",[[1,105,"\n\n"]],[105,105],[106,106]]],[1563951686618,["GJX@GJXAIOU",[[-1,106,"\n"],[1,107,"常用"]],[106,106],[108,108]]],[1563951688088,["GJX@GJXAIOU",[[1,108,"方法："]],[108,108],[111,111]]],[1563951688352,["GJX@GJXAIOU",[[1,111,"\n\n"]],[111,111],[112,112]]],[1563951702934,["GJX@GJXAIOU",[[1,112,"  getLocalHost(); //获取北极"]],[112,112],[136,136]]],[1563951704260,["GJX@GJXAIOU",[[-1,134,"北极"]],[136,136],[134,134]]],[1563951707128,["GJX@GJXAIOU",[[1,134,"本机的IP"]],[134,134],[139,139]]],[1563951707151,["GJX@GJXAIOU",[[1,137," "]],[139,139],[140,140]]],[1563951707889,["GJX@GJXAIOU",[[1,140,"地址"]],[140,140],[142,142]]],[1563951707911,["GJX@GJXAIOU",[[1,140," "]],[142,142],[143,143]]],[1563951708197,["GJX@GJXAIOU",[[1,144,"  \n"]],[143,143],[146,146]]],[1563951711374,["GJX@GJXAIOU",[[1,146,"getBGy"]],[146,146],[152,152]]],[1563951712189,["GJX@GJXAIOU",[[-1,150,"Gy"]],[152,152],[150,150]]],[1563951717245,["GJX@GJXAIOU",[[1,150,"yName();"]],[150,150],[158,158]]],[1563951718894,["GJX@GJXAIOU",[[1,157,"St"]],[157,157],[159,159]]],[1563951719700,["GJX@GJXAIOU",[[-1,157,"St"]],[159,159],[157,157]]],[1563951726541,["GJX@GJXAIOU",[[1,156,"String address"]],[156,156],[170,170]]],[1563951738432,["GJX@GJXAIOU",[[1,172," //可以通过计算机名或者IP"]],[172,172],[187,187]]],[1563951738455,["GJX@GJXAIOU",[[1,185," "]],[187,187],[188,188]]],[1563951739432,["GJX@GJXAIOU",[[1,188,"地址"]],[188,188],[190,190]]],[1563951739455,["GJX@GJXAIOU",[[1,188," "]],[190,190],[191,191]]],[1563951741782,["GJX@GJXAIOU",[[1,191,"，得到"]],[191,191],[194,194]]],[1563951746391,["GJX@GJXAIOU",[[1,194,"对应的IP"]],[194,194],[199,199]]],[1563951746414,["GJX@GJXAIOU",[[1,197," "]],[199,199],[200,200]]],[1563951747792,["GJX@GJXAIOU",[[1,200,"对象"]],[200,200],[202,202]]],[1563951747815,["GJX@GJXAIOU",[[1,200," "]],[202,202],[203,203]]],[1563951748284,["GJX@GJXAIOU",[[1,204,"  \n"]],[203,203],[206,206]]],[1563951752653,["GJX@GJXAIOU",[[1,206,"getHodt"]],[206,206],[213,213]]],[1563951753268,["GJX@GJXAIOU",[[-1,211,"dt"]],[213,213],[211,211]]],[1563951763649,["GJX@GJXAIOU",[[1,211,"stAddress(); //返回一个IP"]],[211,211],[232,232]]],[1563951763673,["GJX@GJXAIOU",[[1,230," "]],[232,232],[233,233]]],[1563951765056,["GJX@GJXAIOU",[[1,233,"地址"]],[233,233],[235,235]]],[1563951765078,["GJX@GJXAIOU",[[1,233," "]],[235,235],[236,236]]],[1563951771127,["GJX@GJXAIOU",[[1,236,"的字符串表示方式"]],[236,236],[244,244]]],[1563951771807,["GJX@GJXAIOU",[[1,245,"  \n"]],[244,244],[247,247]]],[1563951774613,["GJX@GJXAIOU",[[1,247,"getHod"]],[247,247],[253,253]]],[1563951775414,["GJX@GJXAIOU",[[-1,252,"d"]],[253,253],[252,252]]],[1563951785026,["GJX@GJXAIOU",[[1,252,"stName(); //返回主机名"]],[252,252],[269,269]]],[1563951801733,["GJX@GJXAIOU",[[1,270,"  \n"]],[269,269],[272,272]]],[1563951802383,["GJX@GJXAIOU",[[-1,270,"  "],[1,272,"\n"]],[272,272],[271,271]]],[1563952323597,["GJX@GJXAIOU",[[-1,271,"\n"],[1,272,"`"]],[271,271],[272,272]]],[1563952323973,["GJX@GJXAIOU",[[1,272,"``"]],[272,272],[274,274]]],[1563952323996,["GJX@GJXAIOU",[[1,274,"language\n```\n"]],[274,274],[274,282]]],[1563952325237,["GJX@GJXAIOU",[[-1,274,"language"],[1,282,"j"]],[274,282],[275,275]]],[1563952325981,["GJX@GJXAIOU",[[1,275,"ava"]],[275,275],[278,278]]],[1563952326284,["GJX@GJXAIOU",[[1,279,"\n"]],[278,278],[279,279]]],[1563952327255,["GJX@GJXAIOU",[[1,279,"package Demo;   import java.net.InetAddress; import java.net.UnknownHostException;   public class Puzzle4{\n    public static void main(String[] args) throws UnknownHostException {\n        //获取本机的IP地址对象\n  InetAddress address = InetAddress.getLocalHost();\n  System.out.println(address);    InetAddress address1 = InetAddress.getByName(\"GJXAIOU\");\n  System.out.println(address1);    InetAddress address2 = InetAddress.getByName(\"192.168.1.1\");\n  System.out.println(address2);    System.out.println(address.getHostAddress());\n  System.out.println(address.getHostName());    InetAddress[] addresses = InetAddress.getAllByName(\"www.taobao.com\");\n for (InetAddress inetAddress : addresses) {\n            System.out.println(inetAddress);\n  }\n    }\n}"]],[279,279],[1020,1020]]],[1563952329025,["GJX@GJXAIOU",[[-1,279,"package Demo;   import java.net.InetAddress; import java.net.UnknownHostException;   public class Puzzle4{\n    public static void main(String[] args) throws UnknownHostException {\n        //获取本机的IP地址对象\n  InetAddress address = InetAddress.getLocalHost();\n  System.out.println(address);    InetAddress address1 = InetAddress.getByName(\"GJXAIOU\");\n  System.out.println(address1);    InetAddress address2 = InetAddress.getByName(\"192.168.1.1\");\n  System.out.println(address2);    System.out.println(address.getHostAddress());\n  System.out.println(address.getHostName());    InetAddress[] addresses = InetAddress.getAllByName(\"www.taobao.com\");\n for (InetAddress inetAddress : addresses) {\n            System.out.println(inetAddress);\n  }\n    }\n}"]],[1020,1020],[279,279]]],[1563952331487,["GJX@GJXAIOU",[[1,279,"package Demo;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\npublic class Puzzle4{\n    public static void main(String[] args) throws UnknownHostException {\n        //获取本机的IP地址对象\n        InetAddress address = InetAddress.getLocalHost();\n        System.out.println(address);\n\n        InetAddress address1 = InetAddress.getByName(\"GJXAIOU\");\n        System.out.println(address1);\n\n        InetAddress address2 = InetAddress.getByName(\"192.168.1.1\");\n        System.out.println(address2);\n\n        System.out.println(address.getHostAddress());\n        System.out.println(address.getHostName());\n\n        InetAddress[] addresses = InetAddress.getAllByName(\"www.taobao.com\");\n        for (InetAddress inetAddress : addresses) {\n            System.out.println(inetAddress);\n        }\n    }\n}"]],[279,279],[1085,1085]]],[1563952335934,["GJX@GJXAIOU",[[1,270,"fang"]],[270,270],[274,274]]],[1563952336843,["GJX@GJXAIOU",[[-1,270,"fang"]],[274,274],[270,270]]],[1563952341138,["GJX@GJXAIOU",[[1,270,"方法尝试"]],[270,270],[274,274]]],[1563952343254,["GJX@GJXAIOU",[[1,274,"示例："]],[274,274],[277,277]]],[1563952347588,["GJX@GJXAIOU",[[1,1097,"\n"]],[1096,1096],[1097,1097]]],[1563952347779,["GJX@GJXAIOU",[[1,1098,"\n"]],[1097,1097],[1098,1098]]],[1563952353681,["GJX@GJXAIOU",[[1,1098,"## UDP"]],[1098,1098],[1104,1104]]],[1563952354244,["GJX@GJXAIOU",[[1,1105,"\n"]],[1104,1104],[1105,1105]]],[1563952354388,["GJX@GJXAIOU",[[1,1106,"\n"]],[1105,1105],[1106,1106]]],[1563952393550,["GJX@GJXAIOU",[[1,1104,"中"]],[1104,1104],[1105,1105]]],[1563952393574,["GJX@GJXAIOU",[[1,1104," "]],[1105,1105],[1106,1106]]],[1563952395638,["GJX@GJXAIOU",[[1,1106,"sock而"]],[1106,1106],[1111,1111]]],[1563952395662,["GJX@GJXAIOU",[[1,1106," "]],[1111,1111],[1112,1112]]],[1563952396891,["GJX@GJXAIOU",[[-1,1107,"sock而"]],[1112,1112],[1107,1107]]],[1563952400137,["GJX@GJXAIOU",[[1,1107,"socket"]],[1107,1107],[1113,1113]]],[1563952401220,["GJX@GJXAIOU",[[1,1116,"\n"]],[1113,1113],[1114,1114]]],[1563952401604,["GJX@GJXAIOU",[[1,1117,"\n"]],[1114,1114],[1115,1115]]],[1563952518088,["GJX@GJXAIOU",[[1,1115,"在网络编程中所有的数据传递都是依赖于Socket"]],[1115,1115],[1139,1139]]],[1563952518113,["GJX@GJXAIOU",[[1,1133," "]],[1139,1139],[1140,1140]]],[1563952519255,["GJX@GJXAIOU",[[1,1140,"来"]],[1140,1140],[1141,1141]]],[1563952519279,["GJX@GJXAIOU",[[1,1140," "]],[1141,1141],[1142,1142]]],[1563952521431,["GJX@GJXAIOU",[[1,1142,"完成的，"]],[1142,1142],[1146,1146]]],[1563952543497,["GJX@GJXAIOU",[[1,1146,"要求进行通信的两台计算机都要安装有Socket"]],[1146,1146],[1169,1169]]],[1563952543522,["GJX@GJXAIOU",[[1,1163," "]],[1169,1169],[1170,1170]]],[1563952544859,["GJX@GJXAIOU",[[1,1170,"；"]],[1170,1170],[1171,1171]]],[1563952545307,["GJX@GJXAIOU",[[1,1174,"\n"]],[1171,1171],[1172,1172]]],[1563952558680,["GJX@GJXAIOU",[[1,1172,"不同的传输协议有不同的Socket"]],[1172,1172],[1189,1189]]],[1563952558704,["GJX@GJXAIOU",[[1,1183," "]],[1189,1189],[1190,1190]]],[1563952561782,["GJX@GJXAIOU",[[1,1190,"；"]],[1190,1190],[1191,1191]]],[1563952751996,["GJX@GJXAIOU",[[1,1194,"\n"]],[1191,1191],[1192,1192]]],[1563952752139,["GJX@GJXAIOU",[[1,1195,"\n"]],[1192,1192],[1193,1193]]],[1563952757255,["GJX@GJXAIOU",[[1,1193,"UDP下面"]],[1193,1193],[1198,1198]]],[1563952757279,["GJX@GJXAIOU",[[1,1196," "]],[1198,1198],[1199,1199]]],[1563952759653,["GJX@GJXAIOU",[[1,1199,"的socket"]],[1199,1199],[1206,1206]]],[1563952759677,["GJX@GJXAIOU",[[1,1200," "]],[1206,1206],[1207,1207]]],[1563952761382,["GJX@GJXAIOU",[[1,1207,"："]],[1207,1207],[1208,1208]]],[1563952761650,["GJX@GJXAIOU",[[1,1211,"\n"]],[1208,1208],[1209,1209]]],[1563952765045,["GJX@GJXAIOU",[[1,1209,"1. 吧"]],[1209,1209],[1213,1213]]],[1563952765541,["GJX@GJXAIOU",[[-1,1212,"吧"]],[1213,1213],[1212,1212]]],[1563952774478,["GJX@GJXAIOU",[[1,1212,"把数据封装成一个数据报"]],[1212,1212],[1223,1223]]],[1563952775107,["GJX@GJXAIOU",[[-1,1222,"报"]],[1223,1223],[1222,1222]]],[1563952782941,["GJX@GJXAIOU",[[1,1222,"包，面向无连接；"]],[1222,1222],[1230,1230]]],[1563952823387,["GJX@GJXAIOU",[[1,1231,"2. \n"]],[1230,1230],[1234,1234]]],[1563952824381,["GJX@GJXAIOU",[[1,1234,"2."]],[1234,1234],[1236,1236]]],[1563952825076,["GJX@GJXAIOU",[[-1,1234,"2."]],[1236,1236],[1234,1234]]],[1563952832545,["GJX@GJXAIOU",[[1,1234,"UDP数据报"]],[1234,1234],[1240,1240]]],[1563952832573,["GJX@GJXAIOU",[[1,1237," "]],[1240,1240],[1241,1241]]],[1563952833860,["GJX@GJXAIOU",[[1,1241,"大小"]],[1241,1241],[1243,1243]]],[1563952836157,["GJX@GJXAIOU",[[-1,1241,"大小"]],[1243,1243],[1241,1241]]],[1563952841989,["GJX@GJXAIOU",[[1,1241,"大小限制在6"]],[1241,1241],[1247,1247]]],[1563952842015,["GJX@GJXAIOU",[[1,1246," "]],[1247,1247],[1248,1248]]],[1563952848681,["GJX@GJXAIOU",[[1,1248,"4kB 以内；"]],[1248,1248],[1255,1255]]],[1563952849204,["GJX@GJXAIOU",[[1,1256,"3. \n"]],[1255,1255],[1259,1259]]],[1563952880111,["GJX@GJXAIOU",[[1,1259,"无连接传输速度快但是不可靠；"]],[1259,1259],[1273,1273]]],[1563952880355,["GJX@GJXAIOU",[[1,1274,"4. \n"]],[1273,1273],[1277,1277]]],[1563952886750,["GJX@GJXAIOU",[[1,1277,"UPD不区分"]],[1277,1277],[1283,1283]]],[1563952886776,["GJX@GJXAIOU",[[1,1280," "]],[1283,1283],[1284,1284]]],[1563952889248,["GJX@GJXAIOU",[[1,1284,"服务的"]],[1284,1284],[1287,1287]]],[1563952889987,["GJX@GJXAIOU",[[-1,1286,"的"]],[1287,1287],[1286,1286]]],[1563952908878,["GJX@GJXAIOU",[[1,1286,"端和客户端，只有发送端和接收端；"]],[1286,1286],[1302,1302]]],[1563953268974,["GJX@GJXAIOU",[[-1,1304,"\n"],[1,1305,"UDP"]],[1304,1304],[1307,1307]]],[1563953270713,["GJX@GJXAIOU",[[1,1307,"下面"]],[1307,1307],[1309,1309]]],[1563953270739,["GJX@GJXAIOU",[[1,1307," "]],[1309,1309],[1310,1310]]],[1563953273267,["GJX@GJXAIOU",[[-1,1278,"P"]],[1279,1279],[1278,1278]]],[1563953275121,["GJX@GJXAIOU",[[1,1279,"P"]],[1279,1279],[1280,1280]]],[1563953280318,["GJX@GJXAIOU",[[1,1310,"的Socket"]],[1310,1310],[1317,1317]]],[1563953280345,["GJX@GJXAIOU",[[1,1311," "]],[1317,1317],[1318,1318]]],[1563953283438,["GJX@GJXAIOU",[[1,1318,"使用"]],[1318,1318],[1320,1320]]],[1563953283463,["GJX@GJXAIOU",[[1,1318," "]],[1320,1320],[1321,1321]]],[1563953284463,["GJX@GJXAIOU",[[1,1321,"："]],[1321,1321],[1322,1322]]],[1563953284714,["GJX@GJXAIOU",[[1,1322,"\n\n"]],[1322,1322],[1323,1323]]],[1563953292810,["GJX@GJXAIOU",[[-1,1323,"\n"],[1,1324,"Dateg"]],[1323,1323],[1328,1328]]],[1563953293884,["GJX@GJXAIOU",[[-1,1326,"eg"]],[1328,1328],[1326,1326]]],[1563953297260,["GJX@GJXAIOU",[[1,1326,"agramDo"]],[1326,1326],[1333,1333]]],[1563953297789,["GJX@GJXAIOU",[[-1,1331,"Do"]],[1333,1333],[1331,1331]]],[1563953300332,["GJX@GJXAIOU",[[1,1331,"Socket"]],[1331,1331],[1337,1337]]],[1563953311270,["GJX@GJXAIOU",[[1,1337,"(); //获取UDP"]],[1337,1337],[1348,1348]]],[1563953311298,["GJX@GJXAIOU",[[1,1345," "]],[1348,1348],[1349,1349]]],[1563953311646,["GJX@GJXAIOU",[[1,1349,"的"]],[1349,1349],[1350,1350]]],[1563953311673,["GJX@GJXAIOU",[[1,1349," "]],[1350,1350],[1351,1351]]],[1563953314370,["GJX@GJXAIOU",[[1,1351,"Socket"]],[1351,1351],[1357,1357]]],[1563953314395,["GJX@GJXAIOU",[[1,1351," "]],[1357,1357],[1358,1358]]],[1563953315868,["GJX@GJXAIOU",[[1,1358,"\n\n"]],[1358,1358],[1359,1359]]],[1563953326576,["GJX@GJXAIOU",[[-1,1359,"\n"],[1,1360,"Datagram"]],[1359,1359],[1367,1367]]],[1563953335869,["GJX@GJXAIOU",[[1,1367,"Packet();"]],[1367,1367],[1376,1376]]],[1563953341987,["GJX@GJXAIOU",[[1,1374,"byte[] bur"]],[1374,1374],[1384,1384]]],[1563953342498,["GJX@GJXAIOU",[[-1,1383,"r"]],[1384,1384],[1383,1383]]],[1563953349789,["GJX@GJXAIOU",[[1,1383,"f, int length, Iner"]],[1383,1383],[1402,1402]]],[1563953350449,["GJX@GJXAIOU",[[-1,1401,"r"]],[1402,1402],[1401,1401]]],[1563953360435,["GJX@GJXAIOU",[[1,1401,"tAddress address, int port"]],[1401,1401],[1427,1427]]],[1563953364306,["GJX@GJXAIOU",[[1,1429,"\n\n"]],[1429,1429],[1430,1430]]],[1563953365931,["GJX@GJXAIOU",[[1,1431,"\n"]],[1430,1430],[1431,1431]]],[1563953368154,["GJX@GJXAIOU",[[-1,1431,"\n"]],[1431,1431],[1430,1430]]],[1563953368282,["GJX@GJXAIOU",[[-1,1430,"\n"]],[1430,1430],[1429,1429]]],[1563953369331,["GJX@GJXAIOU",[[1,1429,"//"]],[1429,1429],[1431,1431]]],[1563953371036,["GJX@GJXAIOU",[[1,1429," "]],[1429,1429],[1430,1430]]],[1563953373403,["GJX@GJXAIOU",[[1,1432,"UDP "]],[1432,1432],[1436,1436]]],[1563953374745,["GJX@GJXAIOU",[[-1,1435," "]],[1436,1436],[1435,1435]]],[1563953376158,["GJX@GJXAIOU",[[1,1435,"传输"]],[1435,1435],[1437,1437]]],[1563953376183,["GJX@GJXAIOU",[[1,1435," "]],[1437,1437],[1438,1438]]],[1563953378432,["GJX@GJXAIOU",[[1,1438,"的数据报"]],[1438,1438],[1442,1442]]],[1563953378993,["GJX@GJXAIOU",[[-1,1441,"报"]],[1442,1442],[1441,1441]]],[1563953379845,["GJX@GJXAIOU",[[1,1441,"包"]],[1441,1441],[1442,1442]]],[1563953382826,["GJX@GJXAIOU",[[1,1443,"\n"]],[1442,1442],[1443,1443]]],[1563953384876,["GJX@GJXAIOU",[[-1,1443,"\n"],[1,1444,"b"]],[1443,1443],[1444,1444]]],[1563953387484,["GJX@GJXAIOU",[[1,1444,"uf:yoa"]],[1444,1444],[1450,1450]]],[1563953388330,["GJX@GJXAIOU",[[-1,1447,"yoa"]],[1450,1450],[1447,1447]]],[1563953389431,["GJX@GJXAIOU",[[1,1447,"哟啊"]],[1447,1447],[1449,1449]]],[1563953390082,["GJX@GJXAIOU",[[-1,1447,"哟啊"]],[1449,1449],[1447,1447]]],[1563953405278,["GJX@GJXAIOU",[[1,1447,"要打包的数据，要求数据类型是byte"]],[1447,1447],[1465,1465]]],[1563953405303,["GJX@GJXAIOU",[[1,1461," "]],[1465,1465],[1466,1466]]],[1563953407627,["GJX@GJXAIOU",[[1,1466,"类型"]],[1466,1466],[1468,1468]]],[1563953407653,["GJX@GJXAIOU",[[1,1466," "]],[1468,1468],[1469,1469]]],[1563953410636,["GJX@GJXAIOU",[[1,1469,"数组；"]],[1469,1469],[1472,1472]]],[1563953412426,["GJX@GJXAIOU",[[1,1472,"\n\n"]],[1472,1472],[1473,1473]]],[1563953412987,["GJX@GJXAIOU",[[-1,1473,"\n"],[1,1474,"l"]],[1473,1473],[1474,1474]]],[1563953417263,["GJX@GJXAIOU",[[1,1474,"ength:yao"]],[1474,1474],[1483,1483]]],[1563953418009,["GJX@GJXAIOU",[[-1,1480,"yao"]],[1483,1483],[1480,1480]]],[1563953421415,["GJX@GJXAIOU",[[1,1480,"要打包"]],[1480,1480],[1483,1483]]],[1563953428021,["GJX@GJXAIOU",[[1,1483,"数据的字节个数；"]],[1483,1483],[1491,1491]]],[1563953428275,["GJX@GJXAIOU",[[1,1491,"\n\n"]],[1491,1491],[1492,1492]]],[1563953429746,["GJX@GJXAIOU",[[-1,1492,"\n"],[1,1493,"a"]],[1492,1492],[1493,1493]]],[1563953432971,["GJX@GJXAIOU",[[1,1493,"ddress:fa"]],[1493,1493],[1502,1502]]],[1563953433625,["GJX@GJXAIOU",[[-1,1500,"fa"]],[1502,1502],[1500,1500]]],[1563953441888,["GJX@GJXAIOU",[[1,1500,"发送目标地址的IP"]],[1500,1500],[1509,1509]]],[1563953441915,["GJX@GJXAIOU",[[1,1507," "]],[1509,1509],[1510,1510]]],[1563953443468,["GJX@GJXAIOU",[[1,1510,"对象"]],[1510,1510],[1512,1512]]],[1563953443494,["GJX@GJXAIOU",[[1,1510," "]],[1512,1512],[1513,1513]]],[1563953443892,["GJX@GJXAIOU",[[1,1513,"；"]],[1513,1513],[1514,1514]]],[1563953444153,["GJX@GJXAIOU",[[1,1514,"\n\n"]],[1514,1514],[1515,1515]]],[1563953446813,["GJX@GJXAIOU",[[-1,1515,"\n"],[1,1516,"port"]],[1515,1515],[1519,1519]]],[1563953449565,["GJX@GJXAIOU",[[1,1519,"：端口号"]],[1519,1519],[1523,1523]]],[1563953449954,["GJX@GJXAIOU",[[1,1523,"\n\n"]],[1523,1523],[1524,1524]]],[1563953450091,["GJX@GJXAIOU",[[1,1525,"\n"]],[1524,1524],[1525,1525]]],[1563953450826,["GJX@GJXAIOU",[[1,1526,"\n"]],[1525,1525],[1526,1526]]],[1563953452765,["GJX@GJXAIOU",[[-1,1526,"\n"],[1,1527,"端口号"]],[1526,1526],[1529,1529]]],[1563953474709,["GJX@GJXAIOU",[[1,1529,"：是系统中每一个执行的程序唯一的编号，"]],[1529,1529],[1548,1548]]],[1563953486829,["GJX@GJXAIOU",[[1,1548,"接收端"]],[1548,1548],[1551,1551]]],[1563953487498,["GJX@GJXAIOU",[[-1,1550,"端"]],[1551,1551],[1550,1550]]],[1563953514608,["GJX@GJXAIOU",[[1,1550,"到的数据根据不同的端口号将数据发送给对应的程序；"]],[1550,1550],[1574,1574]]],[1563953515740,["GJX@GJXAIOU",[[1,1574,"\n\n"]],[1574,1574],[1575,1575]]],[1563953518249,["GJX@GJXAIOU",[[-1,1575,"\n"],[1,1576,"序号"]],[1575,1575],[1577,1577]]],[1563953520388,["GJX@GJXAIOU",[[1,1577,"从0"]],[1577,1577],[1579,1579]]],[1563953520416,["GJX@GJXAIOU",[[1,1578," "]],[1579,1579],[1580,1580]]],[1563953527253,["GJX@GJXAIOU",[[1,1580,"-65535，其中0"]],[1580,1580],[1590,1590]]],[1563953527280,["GJX@GJXAIOU",[[1,1589," "]],[1590,1590],[1591,1591]]],[1563953535592,["GJX@GJXAIOU",[[1,1591,"-1023是"]],[1591,1591],[1597,1597]]],[1563953535618,["GJX@GJXAIOU",[[1,1596," "]],[1597,1597],[1598,1598]]],[1563953540470,["GJX@GJXAIOU",[[1,1598,"为系统服务的"]],[1598,1598],[1604,1604]]],[1563953547943,["GJX@GJXAIOU",[[1,1604,"端口号，以及"]],[1604,1604],[1610,1610]]],[1563953548916,["GJX@GJXAIOU",[[-1,1608,"以及"]],[1610,1610],[1608,1608]]],[1563953557486,["GJX@GJXAIOU",[[1,1608,"已经绑定；"]],[1608,1608],[1613,1613]]],[1563953558525,["GJX@GJXAIOU",[[1,1613,"\n\n"]],[1613,1613],[1614,1614]]],[1563953598426,["GJX@GJXAIOU",[[1,1615,"\n"]],[1613,1613],[1614,1614]]],[1563953598610,["GJX@GJXAIOU",[[1,1616,"\n"]],[1614,1614],[1615,1615]]],[1563953616282,["GJX@GJXAIOU",[[1,1098,"\n"]],[1096,1096],[1097,1097]]],[1563953623644,["GJX@GJXAIOU",[[1,1097,"程序运行结果："]],[1097,1097],[1104,1104]]],[1563953623858,["GJX@GJXAIOU",[[1,1106,"\n"]],[1104,1104],[1105,1105]]],[1563953625251,["GJX@GJXAIOU",[[1,1105,"```"]],[1105,1105],[1108,1108]]],[1563953625279,["GJX@GJXAIOU",[[1,1108,"language\n```\n"]],[1108,1108],[1108,1116]]],[1563953625443,["GJX@GJXAIOU",[[-1,1108,"language"],[1,1116,"j"]],[1108,1116],[1109,1109]]],[1563953626627,["GJX@GJXAIOU",[[1,1109,"ava"]],[1109,1109],[1112,1112]]],[1563953626842,["GJX@GJXAIOU",[[1,1113,"\n"]],[1112,1112],[1113,1113]]],[1563953627753,["GJX@GJXAIOU",[[1,1113,"GJXAIOU/192.168.137.1\nGJXAIOU/192.168.137.1\n/192.168.1.1\n192.168.137.1\nGJXAIOU\nwww.taobao.com/61.155.222.102\nwww.taobao.com/61.155.222.103"]],[1113,1113],[1251,1251]]],[1563955014089,["GJX@GJXAIOU",[[1,1777,"\n"]],[1774,1774],[1775,1775]]],[1563955014195,["GJX@GJXAIOU",[[1,1778,"\n"]],[1775,1775],[1776,1776]]],[1563955015416,["GJX@GJXAIOU",[[-1,1778,"\n"]],[1776,1776],[1775,1775]]],[1563955016933,["GJX@GJXAIOU",[[1,1775,"daima"]],[1775,1775],[1780,1780]]],[1563955018295,["GJX@GJXAIOU",[[-1,1775,"daima"]],[1780,1780],[1775,1775]]],[1563955020578,["GJX@GJXAIOU",[[1,1775,"代码示例："]],[1775,1775],[1780,1780]]],[1563955020768,["GJX@GJXAIOU",[[1,1783,"\n"]],[1780,1780],[1781,1781]]],[1563955025234,["GJX@GJXAIOU",[[1,1781,"发送端代码“"]],[1781,1781],[1787,1787]]],[1563955025251,["GJX@GJXAIOU",[[1,1790,"\n"]],[1787,1787],[1788,1788]]],[1563955025848,["GJX@GJXAIOU",[[-1,1790,"\n"]],[1788,1788],[1787,1787]]],[1563955025966,["GJX@GJXAIOU",[[-1,1786,"“"]],[1787,1787],[1786,1786]]],[1563955026593,["GJX@GJXAIOU",[[1,1786,"："]],[1786,1786],[1787,1787]]],[1563955026799,["GJX@GJXAIOU",[[1,1790,"\n"]],[1787,1787],[1788,1788]]],[1563955028128,["GJX@GJXAIOU",[[1,1788,"```"]],[1788,1788],[1791,1791]]],[1563955028156,["GJX@GJXAIOU",[[1,1791,"language\n```\n"]],[1791,1791],[1791,1799]]],[1563955028281,["GJX@GJXAIOU",[[-1,1791,"language"],[1,1799,"j"]],[1791,1799],[1792,1792]]],[1563955029312,["GJX@GJXAIOU",[[1,1792,"ava"]],[1792,1792],[1795,1795]]],[1563955029487,["GJX@GJXAIOU",[[1,1796,"\n"]],[1795,1795],[1796,1796]]],[1563955033480,["GJX@GJXAIOU",[[1,1796,"package Demo;\n\n\nimport java.io.IOException;\nimport java.net.*;\n\npublic class Puzzle4{\n    public static void main(String[] args) throws IOException {\n        //1.建立UDP服务，打开UDP协议下的Socket，发送端Socket创建不需要任何参数\n        DatagramSocket socket = new DatagramSocket();\n\n        //2.准备数据\n        String data = \"hello\";\n\n        //3.数据打包\n        DatagramPacket datagramPacket = new DatagramPacket(data.getBytes(), data.getBytes().length, InetAddress.getLocalHost(), 8848);\n\n        //4.通过Socket发送数据\n        socket.send(datagramPacket);\n\n        //5.关闭资源\n        socket.close();\n\n    }\n}"]],[1796,1796],[2370,2370]]],[1563955036800,["GJX@GJXAIOU",[[1,2378,"\n"]],[2375,2375],[2376,2376]]],[1563955037769,["GJX@GJXAIOU",[[1,2376,"jiesh"]],[2376,2376],[2381,2381]]],[1563955038671,["GJX@GJXAIOU",[[-1,2376,"jiesh"]],[2381,2381],[2376,2376]]],[1563955044986,["GJX@GJXAIOU",[[1,2376,"接收端代码："]],[2376,2376],[2382,2382]]],[1563955045200,["GJX@GJXAIOU",[[1,2385,"\n"]],[2382,2382],[2383,2383]]],[1563955046619,["GJX@GJXAIOU",[[1,2383,"```"]],[2383,2383],[2386,2386]]],[1563955046648,["GJX@GJXAIOU",[[1,2386,"language\n```\n"]],[2386,2386],[2386,2394]]],[1563955046769,["GJX@GJXAIOU",[[-1,2386,"language"],[1,2394,"j"]],[2386,2394],[2387,2387]]],[1563955047706,["GJX@GJXAIOU",[[1,2387,"ava"]],[2387,2387],[2390,2390]]],[1563955047898,["GJX@GJXAIOU",[[1,2391,"\n"]],[2390,2390],[2391,2391]]],[1563955063745,["GJX@GJXAIOU",[[1,2391,"package Demo;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n/*\n    接收端\n    1.建立UDP服务，监听端口\n    2.准备空数据包，用于接收数据\n    3.调用UDP服务接收数据\n    4.获取数据\n    5.释放资源\n */\npublic class Puzzle4Receive {\n    public static void main(String[] args) throws IOException {\n        //1.建立UDP服务，监听端口\n        DatagramSocket socket = new DatagramSocket(8848);\n\n        //2.准备空数据包，接收数据\n        byte[] buf = new byte[1024];\n        //利用byte数据创建空数据包\n        DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);\n\n        //3.调用UDP服务，使用Socket接收数据\n        socket.receive(datagramPacket);\n\n        //4.从数据包中获取socket接收到的数据\n        //所有的数据都会被保存在byte数组中，通过调用UDP数据包的getlength方法，获取到接收到的数据字节长度\n        System.out.println(new String(buf, 0, datagramPacket.getLength()));\n\n        //5.关闭资源\n        socket.close();\n    }\n}"]],[2391,2391],[3265,3265]]],[1563962191031,["GJX@GJXAIOU",[[1,3271,"### IPS"]],[3271,3271],[3278,3278]]],[1563962191886,["GJX@GJXAIOU",[[-1,3275,"IPS"]],[3278,3278],[3275,3275]]],[1563962193966,["GJX@GJXAIOU",[[1,3275,"Ip?S"]],[3275,3275],[3279,3279]]],[1563962195077,["GJX@GJXAIOU",[[-1,3277,"?S"]],[3279,3279],[3277,3277]]],[1563962197418,["GJX@GJXAIOU",[[1,3277,"Socket"]],[3277,3277],[3283,3283]]],[1563962198256,["GJX@GJXAIOU",[[1,3285,"\n"]],[3283,3283],[3284,3284]]],[1563962201133,["GJX@GJXAIOU",[[1,3284,"fasong"]],[3284,3284],[3290,3290]]],[1563962202109,["GJX@GJXAIOU",[[-1,3284,"fasong"]],[3290,3290],[3284,3284]]],[1563962205015,["GJX@GJXAIOU",[[1,3284,"发送端："]],[3284,3284],[3288,3288]]],[1563962205273,["GJX@GJXAIOU",[[1,3290,"\n"]],[3288,3288],[3289,3289]]],[1563962206799,["GJX@GJXAIOU",[[1,3289,"```"]],[3289,3289],[3292,3292]]],[1563962206826,["GJX@GJXAIOU",[[1,3292,"language\n```\n"]],[3292,3292],[3292,3300]]],[1563962206982,["GJX@GJXAIOU",[[-1,3292,"language"],[1,3300,"j"]],[3292,3300],[3293,3293]]],[1563962207927,["GJX@GJXAIOU",[[1,3293,"ava"]],[3293,3293],[3296,3296]]],[1563962208009,["GJX@GJXAIOU",[[1,3297,"\n"]],[3296,3296],[3297,3297]]],[1563962223433,["GJX@GJXAIOU",[[1,3297,"package IP;   import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.InetAddress; import java.net.Socket;     /**\n * @author GJXAIOU\n * @create 2019-07-24-17:11\n */ public class IpSocket {\n    public static void main(String[] args) throws IOException {\n        //1.建立客户端Socket，申请连接服务器，需要服务器的IP地址和对应程序的端口号\n  Socket socket = new Socket(InetAddress.getLocalHost(), 8000);    //2.发送数据给服务器，需要获取Socket的输出流对象\n  OutputStream os = socket.getOutputStream();    //使用OutputStream方法发送数据到服务器，也就是输出数据\n  os.write(\"你好，服务器\".getBytes());    //3.获取Socket的InputStream\n  InputStream inputStream = socket.getInputStream();\n byte[] buf = new byte[1024];\n int length = inputStream.read(buf);    System.out.println(\"服务器说:\" + new String(buf, 0, length));    socket.close();\n  }\n}"]],[3297,3297],[4095,4095]]],[1563962225039,["GJX@GJXAIOU",[[-1,3297,"package IP;   import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.InetAddress; import java.net.Socket;     /**\n * @author GJXAIOU\n * @create 2019-07-24-17:11\n */ public class IpSocket {\n    public static void main(String[] args) throws IOException {\n        //1.建立客户端Socket，申请连接服务器，需要服务器的IP地址和对应程序的端口号\n  Socket socket = new Socket(InetAddress.getLocalHost(), 8000);    //2.发送数据给服务器，需要获取Socket的输出流对象\n  OutputStream os = socket.getOutputStream();    //使用OutputStream方法发送数据到服务器，也就是输出数据\n  os.write(\"你好，服务器\".getBytes());    //3.获取Socket的InputStream\n  InputStream inputStream = socket.getInputStream();\n byte[] buf = new byte[1024];\n int length = inputStream.read(buf);    System.out.println(\"服务器说:\" + new String(buf, 0, length));    socket.close();\n  }\n}"]],[4095,4095],[3297,3297]]],[1563962227332,["GJX@GJXAIOU",[[1,3297,"package IP;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\n\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-17:11\n */\npublic class IpSocket {\n    public static void main(String[] args) throws IOException {\n        //1.建立客户端Socket，申请连接服务器，需要服务器的IP地址和对应程序的端口号\n        Socket socket = new Socket(InetAddress.getLocalHost(), 8000);\n\n        //2.发送数据给服务器，需要获取Socket的输出流对象\n        OutputStream os = socket.getOutputStream();\n\n        //使用OutputStream方法发送数据到服务器，也就是输出数据\n        os.write(\"你好，服务器\".getBytes());\n\n        //3.获取Socket的InputStream\n        InputStream inputStream = socket.getInputStream();\n        byte[] buf = new byte[1024];\n        int length = inputStream.read(buf);\n\n        System.out.println(\"服务器说:\" + new String(buf, 0, length));\n\n        socket.close();\n    }\n}\n"]],[3297,3297],[4163,4163]]],[1563962229749,["GJX@GJXAIOU",[[1,4170,"\n"]],[4167,4167],[4168,4168]]],[1563962229870,["GJX@GJXAIOU",[[1,4171,"\n"]],[4168,4168],[4169,4169]]],[1563962231321,["GJX@GJXAIOU",[[1,4169,"jies"]],[4169,4169],[4173,4173]]],[1563962232013,["GJX@GJXAIOU",[[-1,4169,"jies"]],[4173,4173],[4169,4169]]],[1563962236184,["GJX@GJXAIOU",[[1,4169,"服务器接收端："]],[4169,4169],[4176,4176]]],[1563962236384,["GJX@GJXAIOU",[[1,4179,"\n"]],[4176,4176],[4177,4177]]],[1563962237793,["GJX@GJXAIOU",[[1,4177,"```"]],[4177,4177],[4180,4180]]],[1563962237822,["GJX@GJXAIOU",[[1,4180,"language\n```\n"]],[4180,4180],[4180,4188]]],[1563962238464,["GJX@GJXAIOU",[[-1,4180,"language"],[1,4188,"j"]],[4180,4188],[4181,4181]]],[1563962238792,["GJX@GJXAIOU",[[1,4181,"ava"]],[4181,4181],[4184,4184]]],[1563962238846,["GJX@GJXAIOU",[[1,4185,"\n"]],[4184,4184],[4185,4185]]],[1563962251862,["GJX@GJXAIOU",[[1,4185,"package IP;   import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.ServerSocket; import java.net.Socket;   /**\n * @author GJXAIOU\n * @create 2019-07-24-17:23\n */ public class IpService {\n    public static void main(String[] args) throws IOException {\n        //1.使用ServiceSocket开始TCP服务器，监听指定端口，准备捕获从客户端申请Socket连接\n  ServerSocket serverSocket = new ServerSocket(8000);    //2.接受客户端连接，得到客户端Socket对象\n  Socket accept = serverSocket.accept();    //3.获取从客户端得到的Socket对象的输入流\n  InputStream inputStream = accept.getInputStream();   byte[] buf = new byte[1024];\n int length = inputStream.read(buf);\n  System.out.println(\"客户端说：\" + new String(buf, 0, length));    //4.获取Socket的输出流对象，给客户端发送数据\n  OutputStream outputStream = accept.getOutputStream();    outputStream.write(\"你好，客户端：\".getBytes());    //关闭ServerSocket，即关闭TCP协议下的服务器程序\n  serverSocket.close();\n  }\n\n}"]],[4185,4185],[5078,5078]]],[1563962253879,["GJX@GJXAIOU",[[-1,4185,"package IP;   import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.ServerSocket; import java.net.Socket;   /**\n * @author GJXAIOU\n * @create 2019-07-24-17:23\n */ public class IpService {\n    public static void main(String[] args) throws IOException {\n        //1.使用ServiceSocket开始TCP服务器，监听指定端口，准备捕获从客户端申请Socket连接\n  ServerSocket serverSocket = new ServerSocket(8000);    //2.接受客户端连接，得到客户端Socket对象\n  Socket accept = serverSocket.accept();    //3.获取从客户端得到的Socket对象的输入流\n  InputStream inputStream = accept.getInputStream();   byte[] buf = new byte[1024];\n int length = inputStream.read(buf);\n  System.out.println(\"客户端说：\" + new String(buf, 0, length));    //4.获取Socket的输出流对象，给客户端发送数据\n  OutputStream outputStream = accept.getOutputStream();    outputStream.write(\"你好，客户端：\".getBytes());    //关闭ServerSocket，即关闭TCP协议下的服务器程序\n  serverSocket.close();\n  }\n\n}"]],[5078,5078],[4185,4185]]],[1563962256582,["GJX@GJXAIOU",[[1,4185,"package IP;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-17:23\n */\npublic class IpService {\n    public static void main(String[] args) throws IOException {\n        //1.使用ServiceSocket开始TCP服务器，监听指定端口，准备捕获从客户端申请Socket连接\n        ServerSocket serverSocket = new ServerSocket(8000);\n\n        //2.接受客户端连接，得到客户端Socket对象\n        Socket accept = serverSocket.accept();\n\n        //3.获取从客户端得到的Socket对象的输入流\n        InputStream inputStream = accept.getInputStream();\n\n        byte[] buf = new byte[1024];\n        int length = inputStream.read(buf);\n        System.out.println(\"客户端说：\" + new String(buf, 0, length));\n\n        //4.获取Socket的输出流对象，给客户端发送数据\n        OutputStream outputStream = accept.getOutputStream();\n\n        outputStream.write(\"你好，客户端：\".getBytes());\n\n        //关闭ServerSocket，即关闭TCP协议下的服务器程序\n        serverSocket.close();\n    }\n\n}\n"]],[4185,4185],[5159,5159]]],[1563962420782,["GJX@GJXAIOU",[[1,3271,"\n"]],[3270,3270],[3271,3271]]],[1563962420902,["GJX@GJXAIOU",[[1,3272,"\n"]],[3271,3271],[3272,3272]]],[1563962421040,["GJX@GJXAIOU",[[1,3273,"\n"]],[3272,3272],[3273,3273]]],[1563962421321,["GJX@GJXAIOU",[[1,3274,"\n"]],[3273,3273],[3274,3274]]],[1563962425823,["GJX@GJXAIOU",[[1,3271,"### mon"]],[3271,3271],[3278,3278]]],[1563962426336,["GJX@GJXAIOU",[[-1,3275,"mon"]],[3278,3278],[3275,3275]]],[1563962439161,["GJX@GJXAIOU",[[1,3275,"模拟飞秋发送数据"]],[3275,3275],[3283,3283]]],[1563962439465,["GJX@GJXAIOU",[[1,3287,"\n"]],[3283,3283],[3284,3284]]],[1563962441994,["GJX@GJXAIOU",[[1,3284,"```jac"]],[3284,3284],[3290,3290]]],[1563962442479,["GJX@GJXAIOU",[[-1,3289,"c"]],[3290,3290],[3289,3289]]],[1563962443736,["GJX@GJXAIOU",[[1,3289,"va"]],[3289,3289],[3291,3291]]],[1563962443982,["GJX@GJXAIOU",[[1,3295,"\n"]],[3291,3291],[3292,3292]]],[1563962444384,["GJX@GJXAIOU",[[1,3296,"\n"]],[3292,3292],[3293,3293]]],[1563962444535,["GJX@GJXAIOU",[[1,3297,"\n"]],[3293,3293],[3294,3294]]],[1563962445290,["GJX@GJXAIOU",[[1,3294,"```"]],[3294,3294],[3297,3297]]],[1563962455256,["GJX@GJXAIOU",[[1,3292,"package Chat;   import java.io.IOException; import java.net.*;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:45\n */ /*FeiQ的数据格式：  version:time:sender:ip:flag:content  版本号   时间  发送人 IP地址  */ public class FeiQ {\n    public static void main(String[] args) throws IOException {\n        DatagramSocket socket = new DatagramSocket();\n  String data = getData(\"hello\");    DatagramPacket packet = new DatagramPacket(data.getBytes(), data.getBytes().length, InetAddress.getByName(\"192.168.1.1\"), 2425);\n  socket.send(packet);\n  socket.close();\n  }\n\n    private static String getData(String content){\n        StringBuilder data = new StringBuilder();    data.append(\"1.0:\");\n  data.append(System.currentTimeMillis() + \":\");\n  data.append(\"匿名君\");\n  data.append(\"10.1.1.1\");\n  data.append(\"32:\");\n  data.append(content);   return data.toString();\n  }\n\n}"]],[3292,3292],[4137,4137]]],[1563962457147,["GJX@GJXAIOU",[[-1,3292,"package Chat;   import java.io.IOException; import java.net.*;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:45\n */ /*FeiQ的数据格式：  version:time:sender:ip:flag:content  版本号   时间  发送人 IP地址  */ public class FeiQ {\n    public static void main(String[] args) throws IOException {\n        DatagramSocket socket = new DatagramSocket();\n  String data = getData(\"hello\");    DatagramPacket packet = new DatagramPacket(data.getBytes(), data.getBytes().length, InetAddress.getByName(\"192.168.1.1\"), 2425);\n  socket.send(packet);\n  socket.close();\n  }\n\n    private static String getData(String content){\n        StringBuilder data = new StringBuilder();    data.append(\"1.0:\");\n  data.append(System.currentTimeMillis() + \":\");\n  data.append(\"匿名君\");\n  data.append(\"10.1.1.1\");\n  data.append(\"32:\");\n  data.append(content);   return data.toString();\n  }\n\n}"]],[4137,4137],[3292,3292]]],[1563962459590,["GJX@GJXAIOU",[[1,3292,"package Chat;\n\nimport java.io.IOException;\nimport java.net.*;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:45\n */\n/*FeiQ的数据格式：\n  version:time:sender:ip:flag:content\n  版本号   时间  发送人  IP地址\n */\npublic class FeiQ {\n    public static void main(String[] args) throws IOException {\n        DatagramSocket socket = new DatagramSocket();\n        String data = getData(\"hello\");\n\n        DatagramPacket packet = new DatagramPacket(data.getBytes(), data.getBytes().length, InetAddress.getByName(\"192.168.1.1\"), 2425);\n        socket.send(packet);\n        socket.close();\n    }\n\n\n    private static String getData(String content){\n        StringBuilder data = new StringBuilder();\n\n        data.append(\"1.0:\");\n        data.append(System.currentTimeMillis() + \":\");\n        data.append(\"匿名君\");\n        data.append(\"10.1.1.1\");\n        data.append(\"32:\");\n        data.append(content);\n\n        return data.toString();\n    }\n\n}\n"]],[3292,3292],[4211,4211]]],[1563962483437,["GJX@GJXAIOU",[[1,3271,"\n"]],[3270,3270],[3271,3271]]],[1563962483557,["GJX@GJXAIOU",[[1,3272,"\n"]],[3271,3271],[3272,3272]]],[1563962483695,["GJX@GJXAIOU",[[1,3273,"\n"]],[3272,3272],[3273,3273]]],[1563962483791,["GJX@GJXAIOU",[[1,3274,"\n"]],[3273,3273],[3274,3274]]],[1563962483926,["GJX@GJXAIOU",[[1,3275,"\n"]],[3274,3274],[3275,3275]]],[1563962484029,["GJX@GJXAIOU",[[1,3276,"\n"]],[3275,3275],[3276,3276]]],[1563962487894,["GJX@GJXAIOU",[[1,3290,"\n"]],[3289,3289],[3290,3290]]],[1563962488975,["GJX@GJXAIOU",[[1,3290,"zhehis"]],[3290,3290],[3296,3296]]],[1563962489824,["GJX@GJXAIOU",[[-1,3290,"zhehis"]],[3296,3296],[3290,3290]]],[1563962490883,["GJX@GJXAIOU",[[1,3290,"yign"]],[3290,3290],[3294,3294]]],[1563962491765,["GJX@GJXAIOU",[[-1,3290,"yign"]],[3294,3294],[3290,3290]]],[1563962499785,["GJX@GJXAIOU",[[1,3290,"因此这里只有发送端程序"]],[3290,3290],[3301,3301]]],[1563962515295,["GJX@GJXAIOU",[[1,3272,"### 搭建局域网两天"]],[3272,3272],[3283,3283]]],[1563962515997,["GJX@GJXAIOU",[[-1,3281,"两天"]],[3283,3283],[3281,3281]]],[1563962520672,["GJX@GJXAIOU",[[1,3281,"聊天工具"]],[3281,3281],[3285,3285]]],[1563962520941,["GJX@GJXAIOU",[[1,3290,"\n"]],[3285,3285],[3286,3286]]],[1563962521582,["GJX@GJXAIOU",[[1,3291,"\n"]],[3286,3286],[3287,3287]]],[1563962522587,["GJX@GJXAIOU",[[1,3287,"···"]],[3287,3287],[3290,3290]]],[1563962523089,["GJX@GJXAIOU",[[-1,3288,"··"]],[3290,3290],[3288,3288]]],[1563962550309,["GJX@GJXAIOU",[[-1,3287,"·"]],[3288,3288],[3287,3287]]],[1563962555088,["GJX@GJXAIOU",[[1,3287,"```jaf"]],[3287,3287],[3293,3293]]],[1563962556173,["GJX@GJXAIOU",[[-1,3292,"f"]],[3293,3293],[3292,3292]]],[1563962556878,["GJX@GJXAIOU",[[1,3292,"va"]],[3292,3292],[3294,3294]]],[1563962557037,["GJX@GJXAIOU",[[1,3299,"\n"]],[3294,3294],[3295,3295]]],[1563962558071,["GJX@GJXAIOU",[[1,3300,"\n"]],[3295,3295],[3296,3296]]],[1563962558847,["GJX@GJXAIOU",[[1,3296,"```"]],[3296,3296],[3299,3299]]],[1563969169216,["GJX@GJXAIOU",[[1,3286,"chatSe"]],[3286,3286],[3292,3292]]],[1563969172881,["GJX@GJXAIOU",[[1,3292,"nder文件"]],[3292,3292],[3298,3298]]],[1563969172911,["GJX@GJXAIOU",[[1,3296," "]],[3298,3298],[3299,3299]]],[1563969175072,["GJX@GJXAIOU",[[1,3308,"package Chat;   import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; import java.net.SocketException;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */   //这里使用多线程进行操作 public class chatSender extends Thread {\n    @Override\n  public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket();    //system.in是键盘\n  //这里是将一个输入字节流对象做成一个输入字符流对象，提供给缓冲字符流作为读写的能力\n  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));    String line = null;\n  DatagramPacket packet = null;   while ((line = bufferedReader.readLine()) != null){\n                packet = new DatagramPacket(line.getBytes(), line.getBytes().length, InetAddress.getByName(\"218.2.216.255\"),8888); //里面的IP地址为广播地址    socket.send(packet);\n  }\n\n            socket.close();    } catch (SocketException e) {\n            e.printStackTrace();\n  } catch (IOException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[3308,3308],[4366,4366]]],[1563969176685,["GJX@GJXAIOU",[[-1,3308,"package Chat;   import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; import java.net.SocketException;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */   //这里使用多线程进行操作 public class chatSender extends Thread {\n    @Override\n  public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket();    //system.in是键盘\n  //这里是将一个输入字节流对象做成一个输入字符流对象，提供给缓冲字符流作为读写的能力\n  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));    String line = null;\n  DatagramPacket packet = null;   while ((line = bufferedReader.readLine()) != null){\n                packet = new DatagramPacket(line.getBytes(), line.getBytes().length, InetAddress.getByName(\"218.2.216.255\"),8888); //里面的IP地址为广播地址    socket.send(packet);\n  }\n\n            socket.close();    } catch (SocketException e) {\n            e.printStackTrace();\n  } catch (IOException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[4366,4366],[3308,3308]]],[1563969178575,["GJX@GJXAIOU",[[1,3308,"package Chat;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\n\n//这里使用多线程进行操作\npublic class chatSender extends Thread {\n    @Override\n    public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket();\n\n            //system.in是键盘\n            //这里是将一个输入字节流对象做成一个输入字符流对象，提供给缓冲字符流作为读写的能力\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n\n            String line = null;\n            DatagramPacket packet = null;\n\n            while ((line = bufferedReader.readLine()) != null){\n                packet = new DatagramPacket(line.getBytes(), line.getBytes().length, InetAddress.getByName(\"218.2.216.255\"),8888); //里面的IP地址为广播地址\n\n                socket.send(packet);\n            }\n\n            socket.close();\n\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n"]],[3308,3308],[4470,4470]]],[1563969201046,["GJX@GJXAIOU",[[1,4476,"chatReceive文件"]],[4476,4476],[4489,4489]]],[1563969201078,["GJX@GJXAIOU",[[1,4487," "]],[4489,4489],[4490,4490]]],[1563969201432,["GJX@GJXAIOU",[[1,4493,"\n"]],[4490,4490],[4491,4491]]],[1563969204104,["GJX@GJXAIOU",[[1,4491,"```jaca"]],[4491,4491],[4498,4498]]],[1563969204667,["GJX@GJXAIOU",[[-1,4496,"ca"]],[4498,4498],[4496,4496]]],[1563969205190,["GJX@GJXAIOU",[[1,4496,"va"]],[4496,4496],[4498,4498]]],[1563969205339,["GJX@GJXAIOU",[[1,4501,"\n"]],[4498,4498],[4499,4499]]],[1563969205479,["GJX@GJXAIOU",[[1,4502,"\n"]],[4499,4499],[4500,4500]]],[1563969207013,["GJX@GJXAIOU",[[1,4500,"```"]],[4500,4500],[4503,4503]]],[1563969208230,["GJX@GJXAIOU",[[1,4499,"package Chat;   import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.SocketException;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */ public class chatReceive extends Thread{\n    @Override\n  public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket(8888);   byte[] buf = new byte[1024];\n  DatagramPacket packet = new DatagramPacket(buf, buf.length);   boolean flag = true;\n while (flag){\n                socket.receive(packet);\n  System.out.println(packet.getAddress().getHostAddress() + \":\" + new String(buf, 0,packet.getLength()));\n  }\n\n            socket.close();    } catch (SocketException e) {\n            e.printStackTrace();\n  } catch (IOException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[4499,4499],[5299,5299]]],[1563969209276,["GJX@GJXAIOU",[[-1,4499,"package Chat;   import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.SocketException;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */ public class chatReceive extends Thread{\n    @Override\n  public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket(8888);   byte[] buf = new byte[1024];\n  DatagramPacket packet = new DatagramPacket(buf, buf.length);   boolean flag = true;\n while (flag){\n                socket.receive(packet);\n  System.out.println(packet.getAddress().getHostAddress() + \":\" + new String(buf, 0,packet.getLength()));\n  }\n\n            socket.close();    } catch (SocketException e) {\n            e.printStackTrace();\n  } catch (IOException e) {\n            e.printStackTrace();\n  }\n    }\n}"]],[5299,5299],[4499,4499]]],[1563969211574,["GJX@GJXAIOU",[[1,4499,"package Chat;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\npublic class chatReceive extends Thread{\n    @Override\n    public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket(8888);\n\n            byte[] buf = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(buf, buf.length);\n\n            boolean flag = true;\n            while (flag){\n                socket.receive(packet);\n                System.out.println(packet.getAddress().getHostAddress() + \":\" + new String(buf, 0,packet.getLength()));\n            }\n\n            socket.close();\n\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"]],[4499,4499],[5385,5385]]],[1563969216916,["GJX@GJXAIOU",[[1,5392,"\n"]],[5390,5390],[5391,5391]]],[1563969222326,["GJX@GJXAIOU",[[1,5391,"chatMain。"]],[5391,5391],[5400,5400]]],[1563969223020,["GJX@GJXAIOU",[[-1,5399,"。"]],[5400,5400],[5399,5399]]],[1563969226565,["GJX@GJXAIOU",[[1,5399,".javawenj"]],[5399,5399],[5408,5408]]],[1563969227429,["GJX@GJXAIOU",[[-1,5404,"wenj"]],[5408,5408],[5404,5404]]],[1563969229210,["GJX@GJXAIOU",[[1,5404,"文件"]],[5404,5404],[5406,5406]]],[1563969229241,["GJX@GJXAIOU",[[1,5404," "]],[5406,5406],[5407,5407]]],[1563969229526,["GJX@GJXAIOU",[[1,5409,"\n"]],[5407,5407],[5408,5408]]],[1563969232552,["GJX@GJXAIOU",[[1,5408,"```java"]],[5408,5408],[5415,5415]]],[1563969232694,["GJX@GJXAIOU",[[1,5417,"\n"]],[5415,5415],[5416,5416]]],[1563969232836,["GJX@GJXAIOU",[[1,5418,"\n"]],[5416,5416],[5417,5417]]],[1563969233893,["GJX@GJXAIOU",[[1,5417,"```"]],[5417,5417],[5420,5420]]],[1563969239917,["GJX@GJXAIOU",[[1,5416,"package Chat;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */ public class chatMain {\n    public static void main(String[] args) {\n        chatSender chatSender = new chatSender();\n  chatReceive chatReceive = new chatReceive();\n  chatSender.start();\n  chatReceive.start();    }\n}"]],[5416,5416],[5704,5704]]],[1563969241971,["GJX@GJXAIOU",[[-1,5416,"package Chat;   /**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */ public class chatMain {\n    public static void main(String[] args) {\n        chatSender chatSender = new chatSender();\n  chatReceive chatReceive = new chatReceive();\n  chatSender.start();\n  chatReceive.start();    }\n}"]],[5704,5704],[5416,5416]]],[1563969244073,["GJX@GJXAIOU",[[1,5416,"package Chat;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\npublic class chatMain {\n    public static void main(String[] args) {\n        chatSender chatSender = new chatSender();\n        chatReceive chatReceive = new chatReceive();\n        chatSender.start();\n        chatReceive.start();\n\n    }\n}\n"]],[5416,5416],[5724,5724]]],[1563969565845,["GJX@GJXAIOU",[[1,74,"- "]],[74,74],[76,76]]],[1563969573231,["GJX@GJXAIOU",[[1,108,"- "]],[108,108],[110,110]]],[1563969574699,["GJX@GJXAIOU",[[1,108,"  "]],[110,110],[112,112]]],[1563969583102,["GJX@GJXAIOU",[[-1,108,"  - "]],[108,112],[108,108]]],[1563969640891,["GJX@GJXAIOU",[[1,114,"\n"]],[113,113],[114,114]]],[1563969643836,["GJX@GJXAIOU",[[1,114,"fang"]],[114,114],[118,118]]],[1563969645091,["GJX@GJXAIOU",[[-1,114,"fang"]],[118,118],[114,114]]],[1563969649277,["GJX@GJXAIOU",[[1,114,"方法名| "]],[114,114],[119,119]]],[1563969651311,["GJX@GJXAIOU",[[1,119,"含义"]],[119,119],[121,121]]],[1563969652252,["GJX@GJXAIOU",[[1,122,"\n"]],[121,121],[122,122]]],[1563969657776,["GJX@GJXAIOU",[[1,122,"---|----"]],[122,122],[130,130]]],[1563969661916,["GJX@GJXAIOU",[[1,133," |    \n  "]],[130,130],[131,134]]],[1563969665587,["GJX@GJXAIOU",[[-1,132,"  |    "]],[131,138],[131,131]]],[1563969666019,["GJX@GJXAIOU",[[-1,130,"\n"]],[131,131],[130,130]]],[1563969667957,["GJX@GJXAIOU",[[1,150," "]],[149,149],[150,150]]],[1563969668615,["GJX@GJXAIOU",[[1,150,"|"]],[150,150],[151,151]]],[1563969671534,["GJX@GJXAIOU",[[1,195," |"]],[195,195],[197,197]]],[1563969674055,["GJX@GJXAIOU",[[1,248," |"]],[248,248],[250,250]]],[1563969675807,["GJX@GJXAIOU",[[1,288," "]],[287,287],[288,288]]],[1563969676431,["GJX@GJXAIOU",[[1,288,"|"]],[288,288],[289,289]]],[1563969703315,["GJX@GJXAIOU",[[-1,132,"  "]],[132,134],[132,132]]],[1563969704758,["GJX@GJXAIOU",[[-1,164,"  "]],[166,166],[164,164]]],[1563969707067,["GJX@GJXAIOU",[[-1,224,"  "]],[226,226],[224,224]]],[1563969708067,["GJX@GJXAIOU",[[-1,265,"  "]],[267,267],[265,265]]],[1563969711731,["GJX@GJXAIOU",[[1,114,"\n"]],[113,113],[114,114]]],[1563969907837,["GJX@GJXAIOU",[[1,15,"\n"]],[14,14],[15,15]]],[1563969912511,["GJX@GJXAIOU",[[1,14,"@toc"]],[14,14],[18,18]]],[1563969914938,["GJX@GJXAIOU",[[1,14,"\n"]],[14,14],[15,15]]],[1563970101121,["GJX@GJXAIOU",[[1,297,"\n"]],[297,297],[298,298]]],[1563970101919,["GJX@GJXAIOU",[[1,298,"y "]],[298,298],[299,299]]],[1563970101966,["GJX@GJXAIOU",[[1,299,"i"]],[299,299],[300,300]]],[1563970102809,["GJX@GJXAIOU",[[-1,298,"yi"]],[300,300],[298,298]]],[1563970104269,["GJX@GJXAIOU",[[1,298,"以上"]],[298,298],[300,300]]],[1563970105874,["GJX@GJXAIOU",[[-1,300," "]],[301,301],[300,300]]],[1563970107754,["GJX@GJXAIOU",[[-1,302,"尝试"]],[304,304],[302,302]]],[1563970109356,["GJX@GJXAIOU",[[1,302,"使用"]],[302,302],[304,304]]],[1563970147777,["GJX@GJXAIOU",[[-1,157,"//"]],[159,159],[157,157]]],[1563970149394,["GJX@GJXAIOU",[[-1,198,"//"]],[200,200],[198,198]]],[1563970150508,["GJX@GJXAIOU",[[-1,247,"//"]],[249,249],[247,247]]],[1563970153340,["GJX@GJXAIOU",[[-1,282," //"]],[285,285],[282,282]]],[1563970158677,["GJX@GJXAIOU",[[1,155,"            "]],[155,155],[167,167]]],[1563970159942,["GJX@GJXAIOU",[[-1,258,"|"],[1,259," "]],[258,259],[259,259]]],[1563970164116,["GJX@GJXAIOU",[[1,259,"    | "]],[259,259],[265,265]]],[1563970165972,["GJX@GJXAIOU",[[1,263,"     "]],[262,262],[267,267]]],[1563970167323,["GJX@GJXAIOU",[[-1,267," "]],[267,267],[266,266]]],[1563970168957,["GJX@GJXAIOU",[[1,210," "]],[210,210],[211,211]]],[1563970171208,["GJX@GJXAIOU",[[1,304,"           "]],[304,304],[315,315]]],[1563970172475,["GJX@GJXAIOU",[[-1,208," "]],[209,209],[208,208]]],[1563970173508,["GJX@GJXAIOU",[[-1,166," "]],[167,167],[166,166]]],[1563970175070,["GJX@GJXAIOU",[[-1,265," "]],[266,266],[265,265]]],[1563970177173,["GJX@GJXAIOU",[[1,312," "]],[312,312],[313,313]]],[1563970330773,["GJX@GJXAIOU",[[1,634,"        、、"]],[634,634],[644,644]]],[1563970331330,["GJX@GJXAIOU",[[-1,642,"、、"]],[644,644],[642,642]]],[1563970339231,["GJX@GJXAIOU",[[1,642,"//通过主机名获取IP地址"]],[642,642],[655,655]]],[1563970342025,["GJX@GJXAIOU",[[1,642,"\n        "]],[642,642],[651,651]]],[1563970435220,["GJX@GJXAIOU",[[1,173,"主机名和"]],[173,173],[177,177]]],[1563970627345,["GJX@GJXAIOU",[[1,79,"### "]],[79,79],[83,83]]],[1563970629282,["GJX@GJXAIOU",[[-1,81,"#"]],[83,83],[82,82]]],[1563970632549,["GJX@GJXAIOU",[[1,82,"获取IP"]],[82,82],[86,86]]],[1563970632581,["GJX@GJXAIOU",[[1,84," "]],[86,86],[87,87]]],[1563970633366,["GJX@GJXAIOU",[[1,87,"地址"]],[87,87],[89,89]]],[1563970633399,["GJX@GJXAIOU",[[1,87," "]],[89,89],[90,90]]],[1563970634401,["GJX@GJXAIOU",[[1,91,"\n"]],[90,90],[91,91]]],[1563970638013,["GJX@GJXAIOU",[[1,82,"一、"]],[82,82],[84,84]]],[1563970642164,["GJX@GJXAIOU",[[1,79,"\n"]],[79,79],[80,80]]],[1563970676247,["GJX@GJXAIOU",[[1,1363,"二 "]],[1363,1363],[1364,1364]]],[1563970677102,["GJX@GJXAIOU",[[1,1364,"、"]],[1364,1364],[1365,1365]]],[1563970681460,["GJX@GJXAIOU",[[-1,1365," "]],[1366,1366],[1365,1365]]],[1563970691420,["GJX@GJXAIOU",[[1,1457,"- "]],[1457,1457],[1459,1459]]],[1563970750252,["GJX@GJXAIOU",[[1,1570,"- "]],[1570,1570],[1572,1572]]],[1563970892138,["GJX@GJXAIOU",[[1,1591,"  - "]],[1591,1591],[1595,1595]]],[1563970892297,["GJX@GJXAIOU",[[1,1593,"  "]],[1595,1595],[1597,1597]]],[1563970894737,["GJX@GJXAIOU",[[-1,1593,"  "]],[1594,1594],[1592,1592]]],[1563970897842,["GJX@GJXAIOU",[[1,1631,"  - "]],[1631,1631],[1635,1635]]],[1563970908776,["GJX@GJXAIOU",[[1,1719,"  - "],[1,1749,"  - "],[1,1768,"  - "],[1,1791,"  - "]],[1719,1800],[1723,1816]]],[1563970909195,["GJX@GJXAIOU",[[1,1721,"  "],[1,1753,"  "],[1,1778,"  "],[1,1803,"  "]],[1723,1816],[1725,1824]]],[1563971050507,["GJX@GJXAIOU",[[-1,1477," "]],[1478,1478],[1477,1477]]],[1563971052825,["GJX@GJXAIOU",[[-1,1498," "]],[1499,1499],[1498,1498]]],[1563971053921,["GJX@GJXAIOU",[[-1,1522," "]],[1523,1523],[1522,1522]]],[1563971054852,["GJX@GJXAIOU",[[-1,1539," "]],[1540,1540],[1539,1539]]],[1563971131137,["GJX@GJXAIOU",[[1,1917,"- "]],[1917,1917],[1919,1919]]],[1563971181904,["GJX@GJXAIOU",[[-1,1949,"\n"]],[1949,1949],[1948,1948]]],[1563971182032,["GJX@GJXAIOU",[[-1,1948,"\n"]],[1948,1948],[1947,1947]]],[1563971254626,["GJX@GJXAIOU",[[1,2334,"\n        "]],[2334,2334],[2343,2343]]],[1563971257562,["GJX@GJXAIOU",[[1,2367,"\n        "]],[2367,2367],[2376,2376]]],[1563971260033,["GJX@GJXAIOU",[[1,2404,"\n        "]],[2404,2404],[2413,2413]]],[1563971289902,["GJX@GJXAIOU",[[1,2316," "]],[2316,2316],[2317,2317]]],[1563971370521,["GJX@GJXAIOU",[[1,1911,"\n"]],[1910,1910],[1911,1911]]],[1563971374836,["GJX@GJXAIOU",[[1,1911,"- 发送端："]],[1911,1911],[1917,1917]]],[1563971375354,["GJX@GJXAIOU",[[1,1918,"- \n"]],[1917,1917],[1920,1920]]],[1563971377884,["GJX@GJXAIOU",[[1,1918,"  "]],[1920,1920],[1922,1922]]],[1563971385955,["GJX@GJXAIOU",[[1,1922,"1.建立UDP"]],[1922,1922],[1929,1929]]],[1563971385989,["GJX@GJXAIOU",[[1,1926," "]],[1929,1929],[1930,1930]]],[1563971448339,["GJX@GJXAIOU",[[1,1930,"服务"]],[1930,1930],[1932,1932]]],[1563971448373,["GJX@GJXAIOU",[[1,1930," "]],[1932,1932],[1933,1933]]],[1563971449093,["GJX@GJXAIOU",[[1,1933,"，"]],[1933,1933],[1934,1934]]],[1563971456627,["GJX@GJXAIOU",[[1,1934,"打开UDP"]],[1934,1934],[1939,1939]]],[1563971456660,["GJX@GJXAIOU",[[1,1936," "]],[1939,1939],[1940,1940]]],[1563971457806,["GJX@GJXAIOU",[[1,1940,"协议"]],[1940,1940],[1942,1942]]],[1563971457838,["GJX@GJXAIOU",[[1,1940," "]],[1942,1942],[1943,1943]]],[1563971465578,["GJX@GJXAIOU",[[1,1943,"下的Socket"]],[1943,1943],[1951,1951]]],[1563971465611,["GJX@GJXAIOU",[[1,1945," "]],[1951,1951],[1952,1952]]],[1563971466656,["GJX@GJXAIOU",[[1,1953,"  - \n"]],[1952,1952],[1957,1957]]],[1563971474395,["GJX@GJXAIOU",[[1,1957,"2.准备数据；"]],[1957,1957],[1964,1964]]],[1563971477165,["GJX@GJXAIOU",[[1,1952,"；"]],[1952,1952],[1953,1953]]],[1563971488199,["GJX@GJXAIOU",[[1,1966,"  - \n"]],[1965,1965],[1970,1970]]],[1563971497068,["GJX@GJXAIOU",[[1,1970,"3.将数据导包"]],[1970,1970],[1977,1977]]],[1563971497667,["GJX@GJXAIOU",[[-1,1975,"导包"]],[1977,1977],[1975,1975]]],[1563971499388,["GJX@GJXAIOU",[[1,1975,"打包"]],[1975,1975],[1977,1977]]],[1563971499992,["GJX@GJXAIOU",[[1,1978,"  - \n"]],[1977,1977],[1982,1982]]],[1563971504212,["GJX@GJXAIOU",[[1,1977,"；"]],[1977,1977],[1978,1978]]],[1563971508138,["GJX@GJXAIOU",[[1,1916,"流程"]],[1916,1916],[1918,1918]]],[1563971516873,["GJX@GJXAIOU",[[1,1985,"4.发送数据；"]],[1985,1985],[1992,1992]]],[1563971517305,["GJX@GJXAIOU",[[1,1993,"  - \n"]],[1992,1992],[1997,1997]]],[1563971524535,["GJX@GJXAIOU",[[1,1997,"5.关闭"]],[1997,1997],[2001,2001]]],[1563971737955,["GJX@GJXAIOU",[[1,1987,"通过Socket"]],[1987,1987],[1995,1995]]],[1563971737991,["GJX@GJXAIOU",[[1,1989," "],[1,1995," "]],[1995,1995],[1996,1996]]],[1563971741213,["GJX@GJXAIOU",[[1,2011,"资源"]],[2011,2011],[2013,2013]]],[1563971752204,["GJX@GJXAIOU",[[1,2009,"Socket "]],[2009,2009],[2015,2015]]],[1563971754587,["GJX@GJXAIOU",[[1,2021,"\n"]],[2021,2021],[2022,2022]]],[1563971773360,["GJX@GJXAIOU",[[-1,2807,"/*\n    接收端\n    1.建立UDP服务，监听端口\n    2.准备空数据包，用于接收数据\n    3.调用UDP服务接收数据\n    4.获取数据\n    5.释放资源\n */"]],[2807,2900],[2807,2807]]],[1563971775431,["GJX@GJXAIOU",[[1,2651,"\n"]],[2650,2650],[2651,2651]]],[1563971775839,["GJX@GJXAIOU",[[1,2651,"/*\n    接收端\n    1.建立UDP服务，监听端口\n    2.准备空数据包，用于接收数据\n    3.调用UDP服务接收数据\n    4.获取数据\n    5.释放资源\n */"]],[2651,2651],[2744,2744]]],[1563971777736,["GJX@GJXAIOU",[[-1,2651,"/*"]],[2651,2653],[2651,2651]]],[1563971782015,["GJX@GJXAIOU",[[-1,2654,"  "],[-1,2660,"  "],[-1,2679,"  "],[-1,2701,"  "],[-1,2719,"  "],[-1,2728,"  "]],[2656,2738],[2654,2726]]],[1563971784767,["GJX@GJXAIOU",[[-1,2728,"*/"]],[2730,2730],[2728,2728]]],[1563971788066,["GJX@GJXAIOU",[[-1,2652,"  "],[1,2654,"-"]],[2652,2652],[2653,2653]]],[1563971788586,["GJX@GJXAIOU",[[1,2653," "]],[2653,2653],[2654,2654]]],[1563971800107,["GJX@GJXAIOU",[[1,2657,"流程："]],[2657,2657],[2660,2660]]],[1563971931867,["GJX@GJXAIOU",[[1,3539,"（）——"]],[3539,3539],[3543,3543]]],[1563971935560,["GJX@GJXAIOU",[[-1,3541,"——"]],[3543,3543],[3541,3541]]],[1563971937908,["GJX@GJXAIOU",[[1,3540,"一"]],[3540,3540],[3541,3541]]],[1563971976199,["GJX@GJXAIOU",[[-1,3588,"\n"]],[3588,3588],[3587,3587]]],[1563971983163,["GJX@GJXAIOU",[[1,3562,"。"]],[3562,3562],[3563,3563]]],[1563971983791,["GJX@GJXAIOU",[[-1,3562,"。"]],[3563,3563],[3562,3562]]],[1563971985922,["GJX@GJXAIOU",[[1,3562,".java"]],[3562,3562],[3567,3567]]],[1563972014176,["GJX@GJXAIOU",[[1,4440,"\n                "]],[4440,4440],[4457,4457]]],[1563972356424,["GJX@GJXAIOU",[[1,6021,"（）"]],[6021,6021],[6023,6023]]],[1563972358498,["GJX@GJXAIOU",[[1,6022,"二"]],[6022,6022],[6023,6023]]],[1563972365634,["GJX@GJXAIOU",[[-1,6983,"#"]],[6984,6984],[6983,6983]]],[1563972367606,["GJX@GJXAIOU",[[1,6986,"的"]],[6986,6986],[6987,6987]]],[1563972367639,["GJX@GJXAIOU",[[1,6986," "],[1,6987," "]],[6987,6987],[6988,6988]]],[1563972372266,["GJX@GJXAIOU",[[1,6984,"三 "]],[6984,6984],[6985,6985]]],[1563972372851,["GJX@GJXAIOU",[[1,6985,"、"]],[6985,6985],[6986,6986]]],[1563972390088,["GJX@GJXAIOU",[[-1,6988,"p 的 "]],[6992,6992],[6988,6988]]],[1563972392836,["GJX@GJXAIOU",[[1,6988,"P中"]],[6988,6988],[6990,6990]]],[1563972392870,["GJX@GJXAIOU",[[1,6989," "],[1,6990," "]],[6990,6990],[6991,6991]]],[1563972395417,["GJX@GJXAIOU",[[-1,6986," "]],[6987,6987],[6986,6986]]]],null,"GJX@GJXAIOU"],["f4df5ed8-c649-43eb-bd7c-b97a19ff13bd",1563978188604,"# JavaDay25网络\n\n@toc\n\n网络编程：网络编程是用来解决计算机和计算机之间的通讯问题；\n网页编程：基于 HDML 页面的基础上进行数据的交互；\n\n## 一、获取 IP 地址\n\n- IP 类获取 IP 对象的方式\n使用类：InetAddress\n常用方法：\n\n方法名| 含义\n---|---- \ngetLocalHost();            | 获取本机的主机名和 IP 地址\ngetByName(String address); | 可以通过计算机名或者 IP 地址，得到对应的 IP 对象\ngetHostAddress();          | 返回一个 IP 地址的字符串表示方式\ngetHostName();             |返回主机名\n\n以上方法使用示例：\n```java\npackage Demo;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\npublic class Puzzle4{\n    public static void main(String[] args) throws UnknownHostException {\n        //获取本机的IP地址对象\n        InetAddress address = InetAddress.getLocalHost();\n        System.out.println(address);\n        \n        //通过主机名获取IP地址\n        InetAddress address1 = InetAddress.getByName(\"GJXAIOU\");\n        System.out.println(address1);\n\n        InetAddress address2 = InetAddress.getByName(\"192.168.1.1\");\n        System.out.println(address2);\n\n        System.out.println(address.getHostAddress());\n        System.out.println(address.getHostName());\n\n        InetAddress[] addresses = InetAddress.getAllByName(\"www.taobao.com\");\n        for (InetAddress inetAddress : addresses) {\n            System.out.println(inetAddress);\n        }\n    }\n}\n```\n程序运行结果：\n```java\nGJXAIOU/192.168.137.1\nGJXAIOU/192.168.137.1\n/192.168.1.1\n192.168.137.1\nGJXAIOU\nwww.taobao.com/61.155.222.102\nwww.taobao.com/61.155.222.103\n```\n\n\n## 二、UDP 中 socket\n\n在网络编程中所有的数据传递都是依赖于 Socket 来完成的，要求进行通信的两台计算机都要安装有 Socket；\n不同的传输协议有不同的 Socket；\n\n- UDP 下面的 socket：\n1.把数据封装成一个数据包，面向无连接；\n2.UDP 数据报大小限制在 64kB 以内；\n3.无连接传输速度快但是不可靠；\n4.UDP 不区分服务端和客户端，只有发送端和接收端；\n\n- UDP 下面的 Socket 使用：\n  - DatagramSocket(); //获取 UDP 的 Socket\n  - DatagramPacket(byte[] buf, int length, InetAddress address, int port); //UDP 传输的数据包\n    - buf:要打包的数据，要求数据类型是 byte 类型数组；\n    - length:要打包数据的字节个数；\n    - address:发送目标地址的 IP 对象；\n    - port：端口号\n\n\n端口号：是系统中每一个执行的程序唯一的编号，接收到的数据根据不同的端口号将数据发送给对应的程序；\n序号从 0-65535，其中 0-1023 是为系统服务的端口号，已经绑定；\n\n- 发送端流程：\n  - 1.建立 UDP 服务，打开 UDP 协议下的 Socket；\n  - 2.准备数据；\n  - 3.将数据打包；\n  - 4.通过 Socket 发送数据；\n  - 5.Socket 关闭资源\n\n代码示例：\n- 发送端代码：\n```java\npackage Demo;\nimport java.io.IOException;\nimport java.net.*;\n\npublic class Puzzle4{\n    public static void main(String[] args) throws IOException {\n        //1.建立UDP服务，打开UDP协议下的Socket，发送端Socket创建不需要任何参数\n        DatagramSocket socket = new DatagramSocket();\n\n        //2.准备数据\n        String data = \"hello\";\n\n        //3.数据打包\n        DatagramPacket datagramPacket = new DatagramPacket (data.getBytes(), \n        data.getBytes().length, \n        InetAddress.getLocalHost(), \n        8848);\n\n        //4.通过Socket发送数据\n        socket.send(datagramPacket);\n\n        //5.关闭资源\n        socket.close();\n\n    }\n}\n```\n\n\n- 接收端流程：\n  1.建立UDP服务，监听端口\n  2.准备空数据包，用于接收数据\n  3.调用UDP服务接收数据\n  4.获取数据\n  5.释放资源\n \n接收端代码：\n```java\npackage Demo;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n\npublic class Puzzle4Receive {\n    public static void main(String[] args) throws IOException {\n        //1.建立UDP服务，监听端口\n        DatagramSocket socket = new DatagramSocket(8848);\n\n        //2.准备空数据包，接收数据\n        byte[] buf = new byte[1024];\n        //利用byte数据创建空数据包\n        DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);\n\n        //3.调用UDP服务，使用Socket接收数据\n        socket.receive(datagramPacket);\n\n        //4.从数据包中获取socket接收到的数据\n        //所有的数据都会被保存在byte数组中，通过调用UDP数据包的getlength方法，获取到接收到的数据字节长度\n        System.out.println(new String(buf, 0, datagramPacket.getLength()));\n\n        //5.关闭资源\n        socket.close();\n    }\n}\n```\n\n\n### （一）搭建局域网聊天工具\nchatSender.java 文件\n```java\npackage Chat;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\n\n//这里使用多线程进行操作\npublic class chatSender extends Thread {\n    @Override\n    public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket();\n\n            //system.in是键盘\n            //这里是将一个输入字节流对象做成一个输入字符流对象，提供给缓冲字符流作为读写的能力\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n\n            String line = null;\n            DatagramPacket packet = null;\n\n            while ((line = bufferedReader.readLine()) != null){\n                packet = new DatagramPacket(line.getBytes(), line.getBytes().length, \n                InetAddress.getByName(\"218.2.216.255\"),8888); //里面的IP地址为广播地址\n\n                socket.send(packet);\n            }\n\n            socket.close();\n\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\nchatReceive 文件\n```java\npackage Chat;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\npublic class chatReceive extends Thread{\n    @Override\n    public void run() {\n        try {\n            DatagramSocket socket = new DatagramSocket(8888);\n\n            byte[] buf = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(buf, buf.length);\n\n            boolean flag = true;\n            while (flag){\n                socket.receive(packet);\n                System.out.println(packet.getAddress().getHostAddress() + \":\" + new String(buf, 0,packet.getLength()));\n            }\n\n            socket.close();\n\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\nchatMain.java 文件\n```java\npackage Chat;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:02\n */\npublic class chatMain {\n    public static void main(String[] args) {\n        chatSender chatSender = new chatSender();\n        chatReceive chatReceive = new chatReceive();\n        chatSender.start();\n        chatReceive.start();\n\n    }\n}\n\n```\n\n### （二）模拟飞秋发送数据\n因此这里只有发送端程序\n```java\npackage Chat;\n\nimport java.io.IOException;\nimport java.net.*;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-16:45\n */\n/*FeiQ的数据格式：\n  version:time:sender:ip:flag:content\n  版本号   时间  发送人  IP地址\n */\npublic class FeiQ {\n    public static void main(String[] args) throws IOException {\n        DatagramSocket socket = new DatagramSocket();\n        String data = getData(\"hello\");\n\n        DatagramPacket packet = new DatagramPacket(data.getBytes(), data.getBytes().length, InetAddress.getByName(\"192.168.1.1\"), 2425);\n        socket.send(packet);\n        socket.close();\n    }\n\n\n    private static String getData(String content){\n        StringBuilder data = new StringBuilder();\n\n        data.append(\"1.0:\");\n        data.append(System.currentTimeMillis() + \":\");\n        data.append(\"匿名君\");\n        data.append(\"10.1.1.1\");\n        data.append(\"32:\");\n        data.append(content);\n\n        return data.toString();\n    }\n\n}\n\n\n```\n\n\n\n## 三、IP 中 Socket\n发送端：\n```java\npackage IP;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\n\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-17:11\n */\npublic class IpSocket {\n    public static void main(String[] args) throws IOException {\n        //1.建立客户端Socket，申请连接服务器，需要服务器的IP地址和对应程序的端口号\n        Socket socket = new Socket(InetAddress.getLocalHost(), 8000);\n\n        //2.发送数据给服务器，需要获取Socket的输出流对象\n        OutputStream os = socket.getOutputStream();\n\n        //使用OutputStream方法发送数据到服务器，也就是输出数据\n        os.write(\"你好，服务器\".getBytes());\n\n        //3.获取Socket的InputStream\n        InputStream inputStream = socket.getInputStream();\n        byte[] buf = new byte[1024];\n        int length = inputStream.read(buf);\n\n        System.out.println(\"服务器说:\" + new String(buf, 0, length));\n\n        socket.close();\n    }\n}\n\n```\n\n服务器接收端：\n```java\npackage IP;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * @author GJXAIOU\n * @create 2019-07-24-17:23\n */\npublic class IpService {\n    public static void main(String[] args) throws IOException {\n        //1.使用ServiceSocket开始TCP服务器，监听指定端口，准备捕获从客户端申请Socket连接\n        ServerSocket serverSocket = new ServerSocket(8000);\n\n        //2.接受客户端连接，得到客户端Socket对象\n        Socket accept = serverSocket.accept();\n\n        //3.获取从客户端得到的Socket对象的输入流\n        InputStream inputStream = accept.getInputStream();\n\n        byte[] buf = new byte[1024];\n        int length = inputStream.read(buf);\n        System.out.println(\"客户端说：\" + new String(buf, 0, length));\n\n        //4.获取Socket的输出流对象，给客户端发送数据\n        OutputStream outputStream = accept.getOutputStream();\n\n        outputStream.write(\"你好，客户端：\".getBytes());\n\n        //关闭ServerSocket，即关闭TCP协议下的服务器程序\n        serverSocket.close();\n    }\n\n}\n\n```\n\n\n\n",[[1563978185295,["GJX@GJXAIOU",[[-1,6986,"IP"]],[6988,6988],[6986,6986]]],[1563978186763,["GJX@GJXAIOU",[[1,6986,"TCP"]],[6986,6986],[6989,6989]]],[1563978189379,["GJX@GJXAIOU",[[1,6999,"\n"]],[6998,6998],[6999,6999]]],[1563978189519,["GJX@GJXAIOU",[[1,7000,"\n"]],[6999,6999],[7000,7000]]],[1563978196411,["GJX@GJXAIOU",[[1,6999,"- TCP特征"]],[6999,6999],[7006,7006]]],[1563978196448,["GJX@GJXAIOU",[[1,7004," "]],[7006,7006],[7007,7007]]],[1563978197609,["GJX@GJXAIOU",[[1,7007,"："]],[7007,7007],[7008,7008]]],[1563978215545,["GJX@GJXAIOU",[[1,7009,"1.TCP是"]],[7009,7009],[7015,7015]]],[1563978215580,["GJX@GJXAIOU",[[1,7014," "]],[7015,7015],[7016,7016]]],[1563978219164,["GJX@GJXAIOU",[[1,7016,"完全基于IO"]],[7016,7016],[7022,7022]]],[1563978219197,["GJX@GJXAIOU",[[1,7020," "]],[7022,7022],[7023,7023]]],[1563978220966,["GJX@GJXAIOU",[[1,7023,"流"]],[7023,7023],[7024,7024]]],[1563978220999,["GJX@GJXAIOU",[[1,7023," "]],[7024,7024],[7025,7025]]],[1563978231163,["GJX@GJXAIOU",[[1,7025,"进行数据传输的，面向连接；"]],[7025,7025],[7038,7038]]],[1563978231399,["GJX@GJXAIOU",[[1,7039,"\n"]],[7038,7038],[7039,7039]]],[1563978232888,["GJX@GJXAIOU",[[1,7039,"2."]],[7039,7039],[7041,7041]]],[1563978234978,["GJX@GJXAIOU",[[1,7042,"\n"]],[7041,7041],[7042,7042]]],[1563978235112,["GJX@GJXAIOU",[[1,7043,"\n"]],[7042,7042],[7043,7043]]],[1563978242325,["GJX@GJXAIOU",[[1,7041,"TCP进行"]],[7041,7041],[7046,7046]]],[1563978242358,["GJX@GJXAIOU",[[1,7044," "]],[7046,7046],[7047,7047]]],[1563978246823,["GJX@GJXAIOU",[[1,7047,"数据传递时候"]],[7047,7047],[7053,7053]]],[1563978255530,["GJX@GJXAIOU",[[1,7053,"没有显示数据报的大小"]],[7053,7053],[7063,7063]]],[1563978255784,["GJX@GJXAIOU",[[1,7066,"\n"]],[7063,7063],[7064,7064]]],[1563978256359,["GJX@GJXAIOU",[[-1,7066,"\n"]],[7064,7064],[7063,7063]]],[1563978256494,["GJX@GJXAIOU",[[-1,7062,"小"]],[7063,7063],[7062,7062]]],[1563978256889,["GJX@GJXAIOU",[[1,7062,"；"]],[7062,7062],[7063,7063]]],[1563978257096,["GJX@GJXAIOU",[[1,7066,"\n"]],[7063,7063],[7064,7064]]],[1563978263701,["GJX@GJXAIOU",[[1,7064,"3.TCP面向"]],[7064,7064],[7071,7071]]],[1563978263735,["GJX@GJXAIOU",[[1,7069," "]],[7071,7071],[7072,7072]]],[1563978267891,["GJX@GJXAIOU",[[1,7072,"连接，西粗"]],[7072,7072],[7077,7077]]],[1563978268487,["GJX@GJXAIOU",[[-1,7075,"西粗"]],[7077,7077],[7075,7075]]],[1563978295589,["GJX@GJXAIOU",[[1,7075,"必须通过三次握手之后才能保证数据的传输通道是完整的；"]],[7075,7075],[7101,7101]]],[1563978295887,["GJX@GJXAIOU",[[1,7104,"\n"]],[7101,7101],[7102,7102]]],[1563978303770,["GJX@GJXAIOU",[[1,7102,"4.TCP面向"]],[7102,7102],[7109,7109]]],[1563978303805,["GJX@GJXAIOU",[[1,7107," "]],[7109,7109],[7110,7110]]],[1563978306843,["GJX@GJXAIOU",[[1,7110,"连接，"]],[7110,7110],[7113,7113]]],[1563978313577,["GJX@GJXAIOU",[[1,7113,"速度相对较慢；"]],[7113,7113],[7120,7120]]],[1563978313870,["GJX@GJXAIOU",[[1,7123,"\n"]],[7120,7120],[7121,7121]]],[1563978319490,["GJX@GJXAIOU",[[1,7121,"5.TCP是"]],[7121,7121],[7127,7127]]],[1563978319523,["GJX@GJXAIOU",[[1,7126," "]],[7127,7127],[7128,7128]]],[1563978329418,["GJX@GJXAIOU",[[1,7128,"区分客户端和服务区"]],[7128,7128],[7137,7137]]],[1563978330791,["GJX@GJXAIOU",[[-1,7134,"服务区"]],[7137,7137],[7134,7134]]],[1563978333604,["GJX@GJXAIOU",[[1,7134,"服务器；"]],[7134,7134],[7138,7138]]],[1563978335681,["GJX@GJXAIOU",[[1,7141,"\n"]],[7138,7138],[7139,7139]]],[1563978335895,["GJX@GJXAIOU",[[1,7142,"\n"]],[7139,7139],[7140,7140]]],[1563978341563,["GJX@GJXAIOU",[[1,7140,"- TCP xia"]],[7140,7140],[7149,7149]]],[1563978342384,["GJX@GJXAIOU",[[-1,7146,"xia"]],[7149,7149],[7146,7146]]],[1563978347888,["GJX@GJXAIOU",[[1,7146,"协议下的Socket"]],[7146,7146],[7156,7156]]],[1563978347923,["GJX@GJXAIOU",[[1,7150," "]],[7156,7156],[7157,7157]]],[1563978348169,["GJX@GJXAIOU",[[1,7158,"- \n"]],[7157,7157],[7160,7160]]],[1563978350293,["GJX@GJXAIOU",[[-1,7158,"- "]],[7160,7160],[7158,7158]]],[1563978358656,["GJX@GJXAIOU",[[1,7158,"Socket（）"]],[7158,7158],[7166,7166]]],[1563978359632,["GJX@GJXAIOU",[[-1,7164,"（）"]],[7166,7166],[7164,7164]]],[1563978361537,["GJX@GJXAIOU",[[1,7164,"();"]],[7164,7164],[7167,7167]]],[1563978366546,["GJX@GJXAIOU",[[1,7165,"服务器"]],[7165,7165],[7168,7168]]],[1563978367724,["GJX@GJXAIOU",[[1,7168,"IP"]],[7168,7168],[7170,7170]]],[1563978367758,["GJX@GJXAIOU",[[1,7168," "]],[7170,7170],[7171,7171]]],[1563978368609,["GJX@GJXAIOU",[[1,7171,"地址"]],[7171,7171],[7173,7173]]],[1563978368643,["GJX@GJXAIOU",[[1,7171," "]],[7173,7173],[7174,7174]]],[1563978380826,["GJX@GJXAIOU",[[1,7174,"对象， 服务器软件对应的"]],[7174,7174],[7186,7186]]],[1563978383416,["GJX@GJXAIOU",[[-1,7185,"的"]],[7186,7186],[7185,7185]]],[1563978386293,["GJX@GJXAIOU",[[1,7185,"的端口号"]],[7185,7185],[7189,7189]]],[1563978405296,["GJX@GJXAIOU",[[1,7191," 创建TCP"]],[7191,7191],[7197,7197]]],[1563978405329,["GJX@GJXAIOU",[[1,7194," "]],[7197,7197],[7198,7198]]],[1563978406347,["GJX@GJXAIOU",[[1,7198,"协议"]],[7198,7198],[7200,7200]]],[1563978406381,["GJX@GJXAIOU",[[1,7198," "]],[7200,7200],[7201,7201]]],[1563978412050,["GJX@GJXAIOU",[[1,7201,"下的端口号，并且。。。。"]],[7201,7201],[7213,7213]]],[1563978412591,["GJX@GJXAIOU",[[1,7216,"\n"]],[7213,7213],[7214,7214]]],[1563978426044,["GJX@GJXAIOU",[[1,7214,"ServerSocket(); "]],[7214,7214],[7230,7230]]],[1563978435544,["GJX@GJXAIOU",[[1,7230,"服务器的Socket"]],[7230,7230],[7240,7240]]],[1563978435576,["GJX@GJXAIOU",[[1,7234," "]],[7240,7240],[7241,7241]]],[1563978453480,["GJX@GJXAIOU",[[1,7241,"，开始服务器服务，准备捕获Socket"]],[7241,7241],[7260,7260]]],[1563978453514,["GJX@GJXAIOU",[[1,7254," "]],[7260,7260],[7261,7261]]],[1563978455042,["GJX@GJXAIOU",[[1,7264,"\n"]],[7261,7261],[7262,7262]]],[1563978455191,["GJX@GJXAIOU",[[1,7265,"\n"]],[7262,7262],[7263,7263]]],[1563978462034,["GJX@GJXAIOU",[[1,7263,"TCP客户端"]],[7263,7263],[7269,7269]]],[1563978462068,["GJX@GJXAIOU",[[1,7266," "]],[7269,7269],[7270,7270]]],[1563978464275,["GJX@GJXAIOU",[[1,7270,"流程："]],[7270,7270],[7273,7273]]],[1563978464519,["GJX@GJXAIOU",[[1,7276,"\n"]],[7273,7273],[7274,7274]]],[1563978469074,["GJX@GJXAIOU",[[1,7274,"1.建立TCP"]],[7274,7274],[7281,7281]]],[1563978469107,["GJX@GJXAIOU",[[1,7278," "]],[7281,7281],[7282,7282]]],[1563978472530,["GJX@GJXAIOU",[[1,7282,"客户端"]],[7282,7282],[7285,7285]]],[1563978472565,["GJX@GJXAIOU",[[1,7282," "]],[7285,7285],[7286,7286]]],[1563978485425,["GJX@GJXAIOU",[[1,7286,"连接，申请连接服务器，需要服务器IP"]],[7286,7286],[7304,7304]]],[1563978485461,["GJX@GJXAIOU",[[1,7302," "]],[7304,7304],[7305,7305]]],[1563978486212,["GJX@GJXAIOU",[[1,7305,"地址"]],[7305,7305],[7307,7307]]],[1563978486246,["GJX@GJXAIOU",[[1,7305," "]],[7307,7307],[7308,7308]]],[1563978496980,["GJX@GJXAIOU",[[1,7308,"对象和对应的程序端口号；"]],[7308,7308],[7320,7320]]],[1563978497306,["GJX@GJXAIOU",[[1,7323,"\n"]],[7320,7320],[7321,7321]]],[1563978504819,["GJX@GJXAIOU",[[1,7321,"2.获取对应的流对象；"]],[7321,7321],[7332,7332]]],[1563978505063,["GJX@GJXAIOU",[[1,7335,"\n"]],[7332,7332],[7333,7333]]],[1563978512588,["GJX@GJXAIOU",[[1,7333,"3.写入或者读取数据；"]],[7333,7333],[7344,7344]]],[1563978512871,["GJX@GJXAIOU",[[1,7347,"\n"]],[7344,7344],[7345,7345]]],[1563978519012,["GJX@GJXAIOU",[[1,7345,"4.关闭资源；"]],[7345,7345],[7352,7352]]]],null,"GJX@GJXAIOU"]]}