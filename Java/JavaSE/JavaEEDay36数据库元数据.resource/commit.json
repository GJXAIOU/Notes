{"compress":true,"commitItems":[["97649714-27bc-412b-835e-1861c9c4dade",1564454014728,"",[[1564453977123,["GJX@GJXAIOU",[[1,0,"# JavaEEDay36数据库元数据\n\n\n\n"]],[0,0],[22,22]]],[1564453985010,["GJX@GJXAIOU",[[1,21,"```"]],[21,21],[24,24]]],[1564453985032,["GJX@GJXAIOU",[[1,24,"language\n```\n"]],[24,24],[24,32]]],[1564453986161,["GJX@GJXAIOU",[[-1,24,"language"],[1,32,"j"]],[24,32],[25,25]]],[1564453986859,["GJX@GJXAIOU",[[1,25,"ava"]],[25,25],[28,28]]],[1564453986968,["GJX@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1564453989764,["GJX@GJXAIOU",[[1,29,"package a_metadata;\n\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.ParameterMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\n\nimport org.junit.Test;\nimport utils.JDBCUtil;\n\npublic class Demo {\n\t/**\n\t * 获取数据库元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testDB() throws SQLException {\n\t\t//连接数据库\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\t//获取数据库元数据\n\t\tDatabaseMetaData metaData = conn.getMetaData();\n\t\t\n\t\tSystem.out.println(\"Name:\" + metaData.getUserName());\n\t\tSystem.out.println(\"URL:\" + metaData.getURL());\n\t\tSystem.out.println(\"ProductName:\" + metaData.getDatabaseProductName()); //数据库类型\n\t\tSystem.out.println(\"DriverName:\" + metaData.getDriverName());\n\t\tconn.close();\n\t}\n\t\n\t/**\n\t * 参数元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testParams() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tString sql = \"select * from stuInfo where stuId=? and stuName=?\";\n\t\t\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t//Object[] values = {1, \"刘晓磊\"};\n\t\t\n\t\t//参数元数据\n\t\tParameterMetaData pMetaData = statement.getParameterMetaData();\n\t\t\n\t\t//获取元数据个数\n\t\tint count = pMetaData.getParameterCount();\n\t\t\n\t\tSystem.out.println(\"元数据个数\" + count);\n\t}\n\t\n\t/**\n\t * 结果集元数据\n\t */\n\t@Test\n\tpublic void testResultSet() throws SQLException {\n\t\tString sql = \"select * from stuInfo\";\n\t\t\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\t//结果集元数据\n\t\tResultSetMetaData rsMetaData = set.getMetaData();\n\t\t\n\t\t//遍历所有的结果集\n\t\twhile (set.next()) {\n\t\t\t//1. 获取当结果集的列个数\n\t\t\tint count = rsMetaData.getColumnCount();\n\t\t\t\n\t\t\t//2. 遍历拿到每一列的名字\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t//得到列的名字\n\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1); //数据库都是从1开始\n\t\t\t\t//获取每一行的每一列的数据\n\t\t\t\tObject columnValue = set.getObject(columnName);\n\t\t\t\t\n\t\t\t\tSystem.out.print(columnName + \":\" + columnValue + \",\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[29,29],[2118,2118]]],[1564453997434,["GJX@GJXAIOU",[[1,20,"liang"]],[20,20],[25,25]]],[1564453998280,["GJX@GJXAIOU",[[-1,21,"iang"]],[25,25],[21,21]]],[1564453998907,["GJX@GJXAIOU",[[1,21,"Li"]],[21,21],[23,23]]],[1564453999520,["GJX@GJXAIOU",[[-1,20,"lLi"]],[23,23],[20,20]]],[1564454001906,["GJX@GJXAIOU",[[1,20,"### "]],[20,20],[24,24]]],[1564454003563,["GJX@GJXAIOU",[[-1,22,"# "]],[24,24],[22,22]]],[1564454006074,["GJX@GJXAIOU",[[1,22," zhong"]],[22,22],[28,28]]],[1564454006922,["GJX@GJXAIOU",[[-1,23,"zhong"]],[28,28],[23,23]]],[1564454013162,["GJX@GJXAIOU",[[1,23,"重要方法："]],[23,23],[28,28]]],[1564454013384,["GJX@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1564454025971,["GJX@GJXAIOU",[[1,29,"参数元数据和结果元数据"]],[29,29],[40,40]]],[1564454030257,["GJX@GJXAIOU",[[-1,2138,"\n"]],[2137,2137],[2136,2136]]],[1564454030416,["GJX@GJXAIOU",[[-1,2137,"\n"]],[2136,2136],[2135,2135]]],[1564454030713,["GJX@GJXAIOU",[[-1,2136,"\n"]],[2135,2135],[2134,2134]]],[1564454030849,["GJX@GJXAIOU",[[-1,2135,"\n"]],[2134,2134],[2133,2133]]],[1564454030977,["GJX@GJXAIOU",[[-1,2134,"\n"]],[2133,2133],[2132,2132]]],[1564454031111,["GJX@GJXAIOU",[[-1,2133,"\n"]],[2132,2132],[2131,2131]]],[1564454031249,["GJX@GJXAIOU",[[-1,2132,"\n"]],[2131,2131],[2130,2130]]],[1564454031369,["GJX@GJXAIOU",[[-1,2131,"\n"]],[2130,2130],[2129,2129]]],[1564454031515,["GJX@GJXAIOU",[[-1,2130,"\n"]],[2129,2129],[2128,2128]]],[1564454031640,["GJX@GJXAIOU",[[-1,2129,"\n"]],[2128,2128],[2127,2127]]],[1564454031785,["GJX@GJXAIOU",[[-1,2128,"\n"]],[2127,2127],[2126,2126]]],[1564454031912,["GJX@GJXAIOU",[[-1,2127,"\n"]],[2126,2126],[2125,2125]]],[1564454032202,["GJX@GJXAIOU",[[-1,2126,"\n"]],[2125,2125],[2124,2124]]],[1564454032336,["GJX@GJXAIOU",[[-1,2125,"\n"]],[2124,2124],[2123,2123]]],[1564454032488,["GJX@GJXAIOU",[[-1,2124,"\n"]],[2123,2123],[2122,2122]]],[1564454032860,["GJX@GJXAIOU",[[-1,2123,"\n"]],[2122,2122],[2121,2121]]],[1564454033170,["GJX@GJXAIOU",[[-1,2122,"\n"]],[2121,2121],[2120,2120]]],[1564454033520,["GJX@GJXAIOU",[[-1,2121,"\n"]],[2120,2120],[2119,2119]]],[1564454036225,["GJX@GJXAIOU",[[1,2127,"\n"]],[2124,2124],[2125,2125]]],[1564464384718,["GJX@GJXAIOU",[[1,2128,"\n"]],[2125,2125],[2126,2126]]],[1564464385300,["GJX@GJXAIOU",[[1,2126,"通用的DAO层，主要负责数据库的增删改查 * 这个类定义两个方法： *  1. 数据更新(增，删，改) *  2. 数据查询(查)"]],[2126,2126],[2191,2191]]],[1564464393327,["GJX@GJXAIOU",[[1,2126,"### "]],[2126,2126],[2195,2195]]],[1564464396292,["GJX@GJXAIOU",[[1,2198,"\n"]],[2195,2195],[2196,2196]]],[1564464397292,["GJX@GJXAIOU",[[1,2196,"```"]],[2196,2196],[2199,2199]]],[1564464397319,["GJX@GJXAIOU",[[1,2199,"language\n```\n"]],[2199,2199],[2199,2207]]],[1564464398197,["GJX@GJXAIOU",[[-1,2199,"language"],[1,2207,"j"]],[2199,2207],[2200,2200]]],[1564464398613,["GJX@GJXAIOU",[[1,2200,"ava"]],[2200,2200],[2203,2203]]],[1564464398765,["GJX@GJXAIOU",[[1,2204,"\n"]],[2203,2203],[2204,2204]]],[1564464404428,["GJX@GJXAIOU",[[1,2204,"package utils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.lang.model.type.PrimitiveType;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\n\n/**\n * 通用的DAO层，主要负责数据库的增删改查\n * 这个类定义两个方法：\n * \t1. 数据更新(增，删，改)\n *  2. 数据查询(查)\n * @author 刘晓磊\n *\n */\n\npublic class BaseDao {\n\t//初始化参数\n\tprivate Connection conn;\n\tprivate PreparedStatement pstmt;\n\tprivate ResultSet rs;\n\t\n\t/**\n\t * 主要针对增，删，改的通用方法\n\t * @param sql 要执行的SQL语句(insert, delete, updata)\n\t * @param paramsValue 参数数组，用来处理SQL语句中的占位符参数，如果没有参数，请传入null\n\t */\n\tpublic void update(String sql, Object[] paramsValue) {\n\t\ttry {\n\t\t\t//1. 数据库连接\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 获取PreparedStatement\n\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//3. 得到参数元数据个数\n\t\t\tint count = pstmt.getParameterMetaData().getParameterCount();\n\t\t\t//4. 利用参数元数据给SQL语句的占位符需要的参数赋值\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t\t//循环结束，就是可以给SQL语句完整赋值\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//5. 执行\n\t\t\tpstmt.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * 查询的通用方法（带有泛型和反射）\n\t * @param sql 查询需要的SQL语句\n\t * @param paramsValue 查询需要参数，如果没有参数，设置为null\n\t * @param cls List集合中保存的数据类型\n\t * @return List集合，返回一个带有指定数据类型List集合\n\t */\n\tpublic <T> List<T> query(String sql, Object[] paramsValue, Class<T> cls) {\n\t\t\n\t\ttry {\n\t\t\t//1.要返回的数据集合\n\t\t\tList<T> list = new ArrayList<T>();\n\t\t\t\n\t\t\t//2.确定List集合中要保存的对象\n\t\t\tT t = null;\n\t\t\t\n\t\t\t//3. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t\n\t\t\t//4. 给SQL语句的占位符赋值参数\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < pstmt.getParameterMetaData().getParameterCount(); i++) {\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//5. 执行查询操作，返回ResultSet\n\t\t\trs = pstmt.executeQuery();\n\t\t\t\n\t\t\t//6. 获取结果集元数据\n\t\t\tResultSetMetaData rsMetaData = rs.getMetaData();\n\t\t\t//数据库列的数量\n\t\t\tint columnCount = rsMetaData.getColumnCount(); \n\t\t\t\n\t\t\t//7. 遍历ResultSet数据集\n\t\t\twhile (rs.next()) {\n\t\t\t\t//创建要保存的对象\n\t\t\t\tt = cls.newInstance();\n\t\t\t\t\n\t\t\t\t//8. 遍历数据行的每一列，得到每一列的名字，在获取到数据，保存到T对象中\n\t\t\t\tfor (int i = 0; i < columnCount; i++) {\n\t\t\t\t\t//获取每一列的名字\n\t\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1);\n\t\t\t\t\t//获取每一列的数据\n\t\t\t\t\tObject value = rs.getObject(columnName);\n\t\t\t\t\t\n\t\t\t\t\t//利用BeanUtils给T对象赋值\n\t\t\t\t\tBeanUtils.setProperty(t, columnName, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//把创建好的T对象，放入到List集合中\n\t\t\t\tlist.add(t);\n\t\t\t}\n\t\t\treturn list;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InstantiationException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException | InvocationTargetException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt, rs);\n\t\t}\n\t\t\n\t\t\n\t\treturn null;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[2204,2204],[5268,5268]]],[1564464409868,["GJX@GJXAIOU",[[-1,5250,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[5248,5267],[5248,5248]]],[1564464412212,["GJX@GJXAIOU",[[1,5257,"\n"]],[5253,5253],[5254,5254]]],[1564464412358,["GJX@GJXAIOU",[[1,5258,"\n"]],[5254,5254],[5255,5255]]],[1564464429019,["GJX@GJXAIOU",[[1,5259,"\n"]],[5254,5254],[5255,5255]]],[1564464429140,["GJX@GJXAIOU",[[1,5260,"\n"]],[5255,5255],[5256,5256]]],[1564464431644,["GJX@GJXAIOU",[[1,5256,"### zheng"]],[5256,5256],[5265,5265]]],[1564464432733,["GJX@GJXAIOU",[[-1,5260,"zheng"]],[5265,5265],[5260,5260]]],[1564464435511,["GJX@GJXAIOU",[[1,5260,"zhen"]],[5260,5260],[5264,5264]]],[1564464436218,["GJX@GJXAIOU",[[-1,5260,"zhen"]],[5264,5264],[5260,5260]]],[1564464446215,["GJX@GJXAIOU",[[1,5260,"针对BeanUtil"]],[5260,5260],[5270,5270]]],[1564464446242,["GJX@GJXAIOU",[[1,5262," "]],[5270,5270],[5271,5271]]],[1564464447830,["GJX@GJXAIOU",[[1,5271,"包"]],[5271,5271],[5272,5272]]],[1564464447859,["GJX@GJXAIOU",[[1,5271," "]],[5272,5272],[5273,5273]]],[1564464451174,["GJX@GJXAIOU",[[1,5273,"的基本使用"]],[5273,5273],[5278,5278]]],[1564464451612,["GJX@GJXAIOU",[[1,5283,"\n"]],[5278,5278],[5279,5279]]],[1564464467344,["GJX@GJXAIOU",[[1,5280,"#### JavaBean定义"]],[5280,5280],[5295,5295]]],[1564464467372,["GJX@GJXAIOU",[[1,5293," "]],[5295,5295],[5296,5296]]],[1564464467659,["GJX@GJXAIOU",[[1,5300,"\n"]],[5296,5296],[5297,5297]]],[1564464468956,["GJX@GJXAIOU",[[1,5297,"```"]],[5297,5297],[5300,5300]]],[1564464468984,["GJX@GJXAIOU",[[1,5300,"language\n```\n"]],[5300,5300],[5300,5308]]],[1564464469735,["GJX@GJXAIOU",[[-1,5300,"language"],[1,5308,"j"]],[5300,5308],[5301,5301]]],[1564464470172,["GJX@GJXAIOU",[[1,5301,"ava"]],[5301,5301],[5304,5304]]],[1564464470245,["GJX@GJXAIOU",[[1,5305,"\n"]],[5304,5304],[5305,5305]]],[1564464475502,["GJX@GJXAIOU",[[1,5305,"package b_beanutils;\n\n//JavaBean ：所有 成员变量私有化，并且对外提供一个set和get方法，这种类叫做JavaBean\npublic class User {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n"]],[5305,5305],[5740,5740]]],[1564464481804,["GJX@GJXAIOU",[[1,5749,"\n"]],[5744,5744],[5745,5745]]],[1564464482342,["GJX@GJXAIOU",[[1,5750,"\n"]],[5745,5745],[5746,5746]]],[1564464483548,["GJX@GJXAIOU",[[1,5746,"duiy"]],[5746,5746],[5750,5750]]],[1564464484203,["GJX@GJXAIOU",[[-1,5746,"duiy"]],[5750,5750],[5746,5746]]],[1564464484469,["GJX@GJXAIOU",[[-1,5750,"\n"]],[5746,5746],[5745,5745]]],[1564464486164,["GJX@GJXAIOU",[[1,5745,"#### "]],[5745,5745],[5750,5750]]],[1564464494374,["GJX@GJXAIOU",[[1,5745,"\n"]],[5745,5745],[5746,5746]]],[1564464504001,["GJX@GJXAIOU",[[1,5751,"BeanUtils工具类"]],[5751,5751],[5763,5763]]],[1564464504030,["GJX@GJXAIOU",[[1,5760," "]],[5763,5763],[5764,5764]]],[1564464510377,["GJX@GJXAIOU",[[1,5764,"方法是使用Demo"]],[5764,5764],[5773,5773]]],[1564464510404,["GJX@GJXAIOU",[[1,5769," "]],[5773,5773],[5774,5774]]],[1564464510724,["GJX@GJXAIOU",[[1,5779,"\n"]],[5774,5774],[5775,5775]]],[1564464512408,["GJX@GJXAIOU",[[1,5775,"```"]],[5775,5775],[5778,5778]]],[1564464512436,["GJX@GJXAIOU",[[1,5778,"language\n```\n"]],[5778,5778],[5778,5786]]],[1564464512726,["GJX@GJXAIOU",[[-1,5778,"language"],[1,5786,"j"]],[5778,5786],[5779,5779]]],[1564464513821,["GJX@GJXAIOU",[[1,5779,"ava"]],[5779,5779],[5782,5782]]],[1564464513949,["GJX@GJXAIOU",[[1,5783,"\n"]],[5782,5782],[5783,5783]]],[1564464519876,["GJX@GJXAIOU",[[1,5783,"package b_beanutils;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\nimport java.lang.reflect.InvocationTargetException;\n\n\n\n/**\n  BeanUtils \n  \t是一个工具类，里面的方法都是静态修饰的，可以通过类名直接调用\n  \tcommons-beanutils-1.8.3.jar\n  \tcommons-logging-1.1.3.jar 日志支持包，没有这个包无法使用BeanUtils\n\n  \t方法一：setProperty(Object bean, String name, Object value);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要赋值的属性名，这里是借助于反射的思想获取到对应setter方法\n  \t\tObject value 要赋值给属性的数据\n  \t\t\n  \t方法二：getProperty(Object bean, String name);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要获取的属性的名字，这里实际调用大方法是对应的getter方法\n  \t方法三：copyProperties(Object dest, Object orig)\n  \t\tObject dest 是要被赋值的类对象\n  \t\tObject orig 复制的源数据\n */\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\ttest();\n\t}\n\n\tpublic static void test() {\n\t\t//最原始的方法：\n\t\tUser u = new User();\n\t\tu.setName(\"张三\");\n\n\n\t\t//利用BeanUtils里面的方法来给对象属性赋值\n\t\ttry {\n\n\t\t\tClass cls = Class.forName(\"b_beanutils.User\");\n\t\t\tObject obj = cls.newInstance(); //可以直接调用编译器给我们提供的该类的无参构造方法\n\n\t\t\tBeanUtils.setProperty(obj, \"name\", \"李四\");\n\t\t\t\n\t\t\t//这里调用的是User里面的getName方法，这个方法，有可能不存在，所有报异常NoSuchMethodException\n\t\t\tSystem.out.println(BeanUtils.getProperty(obj, \"name\"));\n\t\t\t\n\t\t\t//复制两个对象之间的属性\n\t\t\tBeanUtils.copyProperties(obj, u);\n\t\t\tSystem.out.println(obj);\n\t\t} catch (IllegalAccessException | InvocationTargetException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t} catch (InstantiationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchMethodException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\n\t}\n}\t\n"]],[5783,5783],[7528,7528]]],[1564464525444,["GJX@GJXAIOU",[[-1,5908,"/**\n  BeanUtils \n  \t是一个工具类，里面的方法都是静态修饰的，可以通过类名直接调用\n  \tcommons-beanutils-1.8.3.jar\n  \tcommons-logging-1.1.3.jar 日志支持包，没有这个包无法使用BeanUtils\n\n  \t方法一：setProperty(Object bean, String name, Object value);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要赋值的属性名，这里是借助于反射的思想获取到对应setter方法\n  \t\tObject value 要赋值给属性的数据\n  \t\t\n  \t方法二：getProperty(Object bean, String name);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要获取的属性的名字，这里实际调用大方法是对应的getter方法\n  \t方法三：copyProperties(Object dest, Object orig)\n  \t\tObject dest 是要被赋值的类对象\n  \t\tObject orig 复制的源数据\n */"]],[5908,6542],[5908,5908]]],[1564464527644,["GJX@GJXAIOU",[[1,5775,"\n"]],[5774,5774],[5775,5775]]],[1564464527819,["GJX@GJXAIOU",[[1,5776,"\n"]],[5775,5775],[5776,5776]]],[1564464528244,["GJX@GJXAIOU",[[1,5776,"/**\n  BeanUtils \n  \t是一个工具类，里面的方法都是静态修饰的，可以通过类名直接调用\n  \tcommons-beanutils-1.8.3.jar\n  \tcommons-logging-1.1.3.jar 日志支持包，没有这个包无法使用BeanUtils\n\n  \t方法一：setProperty(Object bean, String name, Object value);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要赋值的属性名，这里是借助于反射的思想获取到对应setter方法\n  \t\tObject value 要赋值给属性的数据\n  \t\t\n  \t方法二：getProperty(Object bean, String name);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要获取的属性的名字，这里实际调用大方法是对应的getter方法\n  \t方法三：copyProperties(Object dest, Object orig)\n  \t\tObject dest 是要被赋值的类对象\n  \t\tObject orig 复制的源数据\n */"]],[5776,5776],[6410,6410]]],[1564464531965,["GJX@GJXAIOU",[[-1,6544,"\n"]],[6544,6544],[6543,6543]]],[1564464532094,["GJX@GJXAIOU",[[-1,6543,"\n"]],[6543,6543],[6542,6542]]],[1564464532218,["GJX@GJXAIOU",[[-1,6542,"\n"]],[6542,6542],[6541,6541]]],[1564464536093,["GJX@GJXAIOU",[[-1,7520,"\n"]],[7520,7520],[7519,7519]]],[1564464538374,["GJX@GJXAIOU",[[1,7536,"\n"]],[7530,7530],[7531,7531]]],[1564464538493,["GJX@GJXAIOU",[[1,7537,"\n"]],[7531,7531],[7532,7532]]],[1564465240686,["GJX@GJXAIOU",[[1,7538,"\n"]],[7532,7532],[7533,7533]]],[1564465240799,["GJX@GJXAIOU",[[1,7539,"\n"]],[7533,7533],[7534,7534]]],[1564465244113,["GJX@GJXAIOU",[[1,7534,"### juti"]],[7534,7534],[7542,7542]]],[1564465245020,["GJX@GJXAIOU",[[-1,7538,"juti"]],[7542,7542],[7538,7538]]],[1564465248727,["GJX@GJXAIOU",[[1,7538,"具体是示例"]],[7538,7538],[7543,7543]]],[1564465249069,["GJX@GJXAIOU",[[1,7549,"\n"]],[7543,7543],[7544,7544]]],[1564465256129,["GJX@GJXAIOU",[[1,7544,"student.java:shi"]],[7544,7544],[7560,7560]]],[1564465257285,["GJX@GJXAIOU",[[-1,7557,"shi"]],[7560,7560],[7557,7557]]],[1564465263383,["GJX@GJXAIOU",[[1,7557,"是JavaBean"]],[7557,7557],[7566,7566]]],[1564465263414,["GJX@GJXAIOU",[[1,7558," "]],[7566,7566],[7567,7567]]],[1564465264432,["GJX@GJXAIOU",[[1,7567,"类"]],[7567,7567],[7568,7568]]],[1564465264461,["GJX@GJXAIOU",[[1,7567," "]],[7568,7568],[7569,7569]]],[1564465265429,["GJX@GJXAIOU",[[1,7575,"\n"]],[7569,7569],[7570,7570]]],[1564465273522,["GJX@GJXAIOU",[[1,7570,"studentD奥"]],[7570,7570],[7579,7579]]],[1564465274220,["GJX@GJXAIOU",[[-1,7578,"奥"]],[7579,7579],[7578,7578]]],[1564465277069,["GJX@GJXAIOU",[[1,7578,"ao.java"]],[7578,7578],[7585,7585]]],[1564465277309,["GJX@GJXAIOU",[[1,7591,"\n"]],[7585,7585],[7586,7586]]],[1564465278046,["GJX@GJXAIOU",[[1,7592,"\n"]],[7586,7586],[7587,7587]]],[1564465282801,["GJX@GJXAIOU",[[1,7587,"student.java"]],[7587,7587],[7599,7599]]],[1564465283580,["GJX@GJXAIOU",[[1,7605,"\n"]],[7599,7599],[7600,7600]]],[1564465284918,["GJX@GJXAIOU",[[1,7600,"```"]],[7600,7600],[7603,7603]]],[1564465284948,["GJX@GJXAIOU",[[1,7603,"language\n```\n"]],[7603,7603],[7603,7611]]],[1564465285744,["GJX@GJXAIOU",[[-1,7603,"language"],[1,7611,"j"]],[7603,7611],[7604,7604]]],[1564465286134,["GJX@GJXAIOU",[[1,7604,"ava"]],[7604,7604],[7607,7607]]],[1564465286284,["GJX@GJXAIOU",[[1,7608,"\n"]],[7607,7607],[7608,7608]]],[1564465298053,["GJX@GJXAIOU",[[1,7608,"package c_jdbc;\n\npublic class Student {\n\tprivate Integer stuId;\n\tprivate String stuName;\n\tprivate String stuSex;\n\tprivate Integer stuAge;\n\tprivate Integer stuScore;\n\tpublic Integer getStuId() {\n\t\treturn stuId;\n\t}\n\tpublic void setStuId(Integer stuId) {\n\t\tthis.stuId = stuId;\n\t}\n\tpublic String getStuName() {\n\t\treturn stuName;\n\t}\n\tpublic void setStuName(String stuName) {\n\t\tthis.stuName = stuName;\n\t}\n\tpublic String getStuSex() {\n\t\treturn stuSex;\n\t}\n\tpublic void setStuSex(String stuSex) {\n\t\tthis.stuSex = stuSex;\n\t}\n\tpublic Integer getStuAge() {\n\t\treturn stuAge;\n\t}\n\tpublic void setStuAge(Integer stuAge) {\n\t\tthis.stuAge = stuAge;\n\t}\n\tpublic Integer getStuScore() {\n\t\treturn stuScore;\n\t}\n\tpublic void setStuScore(Integer stuScore) {\n\t\tthis.stuScore = stuScore;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [stuId=\" + stuId + \", stuName=\" + stuName + \", stuSex=\" + stuSex + \", stuAge=\" + stuAge\n\t\t\t\t+ \", stuScore=\" + stuScore + \"]\";\n\t}\t\n}\n"]],[7608,7608],[8560,8560]]],[1564465302723,["GJX@GJXAIOU",[[1,8571,"\n"]],[8564,8564],[8565,8565]]],[1564465304483,["GJX@GJXAIOU",[[1,8572,"\n"]],[8565,8565],[8566,8566]]],[1564465309392,["GJX@GJXAIOU",[[1,8566,"studengDao.java"]],[8566,8566],[8581,8581]]],[1564465309620,["GJX@GJXAIOU",[[1,8588,"\n"]],[8581,8581],[8582,8582]]],[1564465310936,["GJX@GJXAIOU",[[1,8582,"··"]],[8582,8582],[8584,8584]]],[1564465311358,["GJX@GJXAIOU",[[-1,8582,"··"]],[8584,8584],[8582,8582]]],[1564465312573,["GJX@GJXAIOU",[[1,8582,"```"]],[8582,8582],[8585,8585]]],[1564465312607,["GJX@GJXAIOU",[[1,8585,"language\n```\n"]],[8585,8585],[8585,8593]]],[1564465313047,["GJX@GJXAIOU",[[-1,8585,"language"],[1,8593,"j"]],[8585,8593],[8586,8586]]],[1564465313533,["GJX@GJXAIOU",[[1,8586,"ava"]],[8586,8586],[8589,8589]]],[1564465313675,["GJX@GJXAIOU",[[1,8590,"\n"]],[8589,8589],[8590,8590]]],[1564465322170,["GJX@GJXAIOU",[[1,8590,"package c_jdbc;\n\nimport java.util.List;\n\nimport utils.BaseDao;\n\npublic class StudentDao extends BaseDao {\n\t/**\n\t * 删除\n\t */\n\tpublic void deleteById(int id) {\n\t\tString sql = \"delete from stuInfo where stuId=?\";\n\t\tObject[] paramsValue = {id};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 插入\n\t */\n\tpublic void addStudent(Student stu) {\n\t\tString sql = \"insert into stuInfo(stuId, stuName, stuAge, stuSex, stuScore)\"\n\t\t\t\t+ \" values(?,?,?,?,?)\";\n\t\tObject[] paramsValue = {stu.getStuId(), stu.getStuName(), \n\t\t\t\tstu.getStuAge(), stu.getStuSex(), stu.getStuScore()};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 修改\n\t */\n\tpublic void updateStudent(Student stu) {\n\t\tString sql = \"update stuInfo set stuName=?, stuAge=?, stuSex=?, stuScore=? where stuId=?\";\n\t\tObject[] paramsValue = {stu.getStuName(), \n\t\t\t\tstu.getStuAge(), stu.getStuSex(), stu.getStuScore(), stu.getStuId()};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 查询所有\n\t */\n\tpublic List<Student> getAll() {\n\t\tString sql = \"select * from stuInfo\";\n\t\tList<Student> list = super.query(sql, null, Student.class);\n\t\treturn list;\n\t}\n\t\n\t/**\n\t * 获取指定ID的学生\n\t */\n\tpublic Student findByID(int id) {\n\t\tString sql = \"select * from stuInfo where stuId=?\";\n\t\tObject[] paramsValue = {id};\n\t\tList<Student> list = super.query(sql, paramsValue, Student.class);\n\t\t\n\t\treturn (list != null && list.size() > 0) ? list.get(0) : null;\n\t}\n}\n"]],[8590,8590],[9969,9969]]],[1564465325116,["GJX@GJXAIOU",[[1,9981,"\n"]],[9973,9973],[9974,9974]]],[1564465327310,["GJX@GJXAIOU",[[1,9974,"tast"]],[9974,9974],[9978,9978]]],[1564465328299,["GJX@GJXAIOU",[[-1,9975,"ast"]],[9978,9978],[9975,9975]]],[1564465330429,["GJX@GJXAIOU",[[1,9975,"est.java"]],[9975,9975],[9983,9983]]],[1564465330587,["GJX@GJXAIOU",[[1,9991,"\n"]],[9983,9983],[9984,9984]]],[1564465332158,["GJX@GJXAIOU",[[1,9984,"```"]],[9984,9984],[9987,9987]]],[1564465332198,["GJX@GJXAIOU",[[1,9987,"language\n```\n"]],[9987,9987],[9987,9995]]],[1564465332344,["GJX@GJXAIOU",[[-1,9987,"language"],[1,9995,"j"]],[9987,9995],[9988,9988]]],[1564465333539,["GJX@GJXAIOU",[[1,9988,"ava"]],[9988,9988],[9991,9991]]],[1564465333750,["GJX@GJXAIOU",[[1,9992,"\n"]],[9991,9991],[9992,9992]]],[1564465347251,["GJX@GJXAIOU",[[1,9992,"package c_jdbc;\n\nimport java.util.List;\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tStudentDao dao = new StudentDao();\n\t\t\n\t\tStudent stu = new Student();\n\t\tstu.setStuName(\"测试\");\n\t\tstu.setStuSex(\"男\");\n\t\tstu.setStuAge(10);\n\t\tstu.setStuScore(100);\n\t\tstu.setStuId(16);\n//\t\tdao.addStudent(stu);\n\t\t\n\t\tstu.setStuName(\"天王盖地虎\");\n\t\t//dao.updateStudent(stu);\n\t\t\n\t\t//dao.deleteById(16);\n\t\t\n\t\tList<Student> list = dao.getAll();\n\t\t\n\t\tfor (Student student : list) {\n\t\t\tSystem.out.println(student);\n\t\t}\n\t\t\n\t\tStudent stu1 = dao.findByID(5);\n\t\tSystem.out.println(stu1);\n\t}\n}\n"]],[9992,9992],[10569,10569]]],[1564466865120,["GJX@GJXAIOU",[[1,10576,"## dbUtils使用"]],[10576,10576],[10588,10588]]],[1564466865153,["GJX@GJXAIOU",[[1,10586," "]],[10588,10588],[10589,10589]]],[1564466865486,["GJX@GJXAIOU",[[1,10595,"\n"]],[10589,10589],[10590,10590]]],[1564466870510,["GJX@GJXAIOU",[[1,10590,"girlsl"]],[10590,10590],[10596,10596]]],[1564466871244,["GJX@GJXAIOU",[[-1,10595,"l"]],[10596,10596],[10595,10595]]],[1564466874569,["GJX@GJXAIOU",[[1,10595,".java "]],[10595,10595],[10601,10601]]],[1564466874831,["GJX@GJXAIOU",[[1,10607,"\n"]],[10601,10601],[10602,10602]]],[1564466882111,["GJX@GJXAIOU",[[1,10602,"Demo1.java  :changyo"]],[10602,10602],[10622,10622]]],[1564466883702,["GJX@GJXAIOU",[[-1,10615,"changyo"]],[10622,10622],[10615,10615]]],[1564466886936,["GJX@GJXAIOU",[[1,10615,"常用的方法"]],[10615,10615],[10620,10620]]],[1564466887741,["GJX@GJXAIOU",[[1,10626,"\n"]],[10620,10620],[10621,10621]]],[1564466889590,["GJX@GJXAIOU",[[1,10621,"Demo"]],[10621,10621],[10625,10625]]],[1564466890141,["GJX@GJXAIOU",[[-1,10623,"mo"]],[10625,10625],[10623,10623]]],[1564466894817,["GJX@GJXAIOU",[[1,10623,"mo2.java"]],[10623,10623],[10631,10631]]],[1564466895109,["GJX@GJXAIOU",[[1,10637,"\n"]],[10631,10631],[10632,10632]]],[1564466895245,["GJX@GJXAIOU",[[1,10638,"\n"]],[10632,10632],[10633,10633]]],[1564466896391,["GJX@GJXAIOU",[[1,10639,"\n"]],[10633,10633],[10634,10634]]],[1564466900205,["GJX@GJXAIOU",[[1,10634,"girls.java"]],[10634,10634],[10644,10644]]],[1564466901268,["GJX@GJXAIOU",[[1,10650,"\n"]],[10644,10644],[10645,10645]]],[1564466902232,["GJX@GJXAIOU",[[1,10645,"·"]],[10645,10645],[10646,10646]]],[1564466903343,["GJX@GJXAIOU",[[-1,10645,"·"]],[10646,10646],[10645,10645]]],[1564466903975,["GJX@GJXAIOU",[[1,10645,"```"]],[10645,10645],[10648,10648]]],[1564466904006,["GJX@GJXAIOU",[[1,10648,"language\n```\n"]],[10648,10648],[10648,10656]]],[1564466904573,["GJX@GJXAIOU",[[-1,10648,"language"],[1,10656,"j"]],[10648,10656],[10649,10649]]],[1564466905023,["GJX@GJXAIOU",[[1,10649,"ava"]],[10649,10649],[10652,10652]]],[1564466905228,["GJX@GJXAIOU",[[1,10653,"\n"]],[10652,10652],[10653,10653]]],[1564466919355,["GJX@GJXAIOU",[[-1,10594,"s"]],[10595,10595],[10594,10594]]],[1564466921796,["GJX@GJXAIOU",[[-1,10637,"s"]],[10638,10638],[10637,10637]]],[1564466924787,["GJX@GJXAIOU",[[1,10651,"package d_dbutils;\n\npublic class Girl {\n\tprivate Integer girlID;\n\tprivate String girlName;\n\tprivate Integer girlAge;\n\t\n\tpublic Girl() {}\n\t\n\tpublic Girl(Integer girlID, String girlName, Integer girlAge) {\n\t\tsuper();\n\t\tthis.girlID = girlID;\n\t\tthis.girlName = girlName;\n\t\tthis.girlAge = girlAge;\n\t}\n\n\tpublic String getGirlName() {\n\t\treturn girlName;\n\t}\n\tpublic void setGirlName(String girlName) {\n\t\tthis.girlName = girlName;\n\t}\n\tpublic Integer getGirlAge() {\n\t\treturn girlAge;\n\t}\n\tpublic void setGirlAge(Integer girlAge) {\n\t\tthis.girlAge = girlAge;\n\t}\n\tpublic Integer getGirlID() {\n\t\treturn girlID;\n\t}\n\tpublic void setGirlID(Integer girlID) {\n\t\tthis.girlID = girlID;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Girl [girlID=\" + girlID + \", girlName=\" + girlName + \", girlAge=\" + girlAge + \"]\";\n\t}\n\t\n\t\n}\n"]],[10651,10651],[11459,11459]]],[1564466927699,["GJX@GJXAIOU",[[1,11470,"\n"]],[11463,11463],[11464,11464]]],[1564466931325,["GJX@GJXAIOU",[[1,11464,"Demo1.java"]],[11464,11464],[11474,11474]]],[1564466931612,["GJX@GJXAIOU",[[1,11481,"\n"]],[11474,11474],[11475,11475]]],[1564466934141,["GJX@GJXAIOU",[[1,11464,"\n"]],[11464,11464],[11465,11465]]],[1564466935717,["GJX@GJXAIOU",[[1,11476,"```"]],[11476,11476],[11479,11479]]],[1564466935751,["GJX@GJXAIOU",[[1,11479,"language\n```\n"]],[11479,11479],[11479,11487]]],[1564466936613,["GJX@GJXAIOU",[[-1,11479,"language"],[1,11487,"j"]],[11479,11487],[11480,11480]]],[1564466936973,["GJX@GJXAIOU",[[1,11480,"ava"]],[11480,11480],[11483,11483]]],[1564466937148,["GJX@GJXAIOU",[[1,11484,"\n"]],[11483,11483],[11484,11484]]],[1564467030300,["GJX@GJXAIOU",[[1,11484,"package d_dbutils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.ArrayHandler;\nimport org.apache.commons.dbutils.handlers.ArrayListHandler;\nimport org.apache.commons.dbutils.handlers.BeanHandler;\nimport org.apache.commons.dbutils.handlers.BeanListHandler;\nimport org.apache.commons.dbutils.handlers.MapHandler;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t//query1();\n\t\t//query2();\n\t\t//query3();\n\t\t//query4();\n\t\t//query5();\n\t\t//query6();\n\t\tquery7();\n\t}\n\t\n\t/**\n\t * 获取单个girl对象\n\t * 方法一：使用ResultSetHandler\n\t */\n\tpublic static void query1() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\t//操作数据的核心类\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl where girlID = 2\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new ResultSetHandler<Girl>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Girl handle(ResultSet arg0) throws SQLException {\n\t\t\t\t\tGirl g = null;\n\t\t\t\t\tif (arg0.next()) {\n\t\t\t\t\t\tg = new Girl(arg0.getInt(\"girlID\"), arg0.getString(\"girlName\"), \n\t\t\t\t\t\t\t\targ0.getInt(\"girlAge\"));\n\t\t\t\t\t}\t\n\t\t\t\t\treturn g;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取单个girl对象\n\t * 方法二：BeanHandler  更加简单\n\t */\n\tpublic static void query2() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl where girlID=2\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new BeanHandler<>(Girl.class));\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取List集合Girl数据\n\t * BeanListHandler\n\t */\n\tpublic static void query3() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl\";\n\t\t\n\t\ttry {\n\t\t\tList<Girl> list = qr.query(conn, sql, new BeanListHandler<>(Girl.class));\n\t\t\t\n\t\t\tfor (Girl girl : list) {\n\t\t\t\tSystem.out.println(girl);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * 获取一个Gril对象\n\t * 使用的方法，\n\t * QueryRunner query(Connection conn, String sql, ResultSetHandler rs, Object... params)\n\t */\n\tpublic static void query4() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl where girlID=?\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new BeanHandler<>(Girl.class), 2);\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\t\t\n\t}\n\t\n\t/**\n\t * 将数据库查询到的 数据 保存的到一个Object类型的数组中\n\t */\n\tpublic static void query5() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl where girlID=2\";\n\t\t\n\t\ttry {\n\t\t\tObject[] arr = qr.query(conn, sql, new ArrayHandler());\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * 将数据库查询到的 所有数据 ，每一个数据行做成一个数组，把所有的数组放入到一个List集合中\n\t */\n\tpublic static void query6() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl\";\n\t\t\n\t\ttry {\n\t\t\tList<Object[]> list = qr.query(conn, sql, new ArrayListHandler());\n\t\t\t\n\t\t\tfor (Object[] objects : list) {\n\t\t\t\tSystem.out.println(Arrays.toString(objects));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * 拿到所有数据，同时含有字段名\n\t */\n\tpublic static void query7() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl\";\n\t\ttry {\n\t\t\tList<Map<String, Object>> map = qr.query(conn, sql, new MapListHandler());\n\t\t\tfor (Map<String, Object> map2 : map) {\n\t\t\t\tSet<Entry<String, Object>> entrySet = map2.entrySet();\n\t\t\t\tfor (Entry<String, Object> entry : entrySet) {\n\t\t\t\t\tSystem.out.println(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n"]],[11484,11484],[16124,16124]]],[1564467060012,["GJX@GJXAIOU",[[1,16112,"\t\n"]],[16111,16111],[16113,16113]]],[1564467060148,["GJX@GJXAIOU",[[-1,16112,"\t"],[1,16113,"\n"]],[16113,16113],[16113,16113]]],[1564467060292,["GJX@GJXAIOU",[[1,16114,"\n"]],[16113,16113],[16114,16114]]],[1564467061492,["GJX@GJXAIOU",[[-1,16114,"\n"]],[16114,16114],[16113,16113]]],[1564467063918,["GJX@GJXAIOU",[[1,16113,"  /**\n * 这里可以用到所有的增，删，该方法\n  * @throws SQLException\n */ @Test public void testUpdate() throws SQLException {\n   String sql = \"delete from girl where girlID=2\";\n  Connection conn = JDBCUtil.getConnection();\n  QueryRunner qr = new QueryRunner();\n  qr.update(conn, sql);\n  JDBCUtil.close(conn, null);\n  //可以使用DbUitls里面的方法\n  //DbUtils.close(conn); }\n\n/**\n * 批处理，减少访问数据库的次数，降低数据库的压力\n  */ @Test public void testBatch() {\n   String sql = \"insert into girl(girlName, girlAge) values(?,?)\";\n  Connection conn = JDBCUtil.getConnection();\n  QueryRunner qr = new QueryRunner();\n try {\n      qr.batch(conn, sql, new Object[][] {{\"刘亦菲\", 20}, {\"小龙女\", 18}});\n  } catch (SQLException e) {\n      // TODO Auto-generated catch block\n  e.printStackTrace();\n  }\n}"]],[16113,16113],[16853,16853]]],[1564467066988,["GJX@GJXAIOU",[[-1,16113,"  /**\n * 这里可以用到所有的增，删，该方法\n  * @throws SQLException\n */ @Test public void testUpdate() throws SQLException {\n   String sql = \"delete from girl where girlID=2\";\n  Connection conn = JDBCUtil.getConnection();\n  QueryRunner qr = new QueryRunner();\n  qr.update(conn, sql);\n  JDBCUtil.close(conn, null);\n  //可以使用DbUitls里面的方法\n  //DbUtils.close(conn); }\n\n/**\n * 批处理，减少访问数据库的次数，降低数据库的压力\n  */ @Test public void testBatch() {\n   String sql = \"insert into girl(girlName, girlAge) values(?,?)\";\n  Connection conn = JDBCUtil.getConnection();\n  QueryRunner qr = new QueryRunner();\n try {\n      qr.batch(conn, sql, new Object[][] {{\"刘亦菲\", 20}, {\"小龙女\", 18}});\n  } catch (SQLException e) {\n      // TODO Auto-generated catch block\n  e.printStackTrace();\n  }\n}"]],[16853,16853],[16113,16113]]],[1564467075079,["GJX@GJXAIOU",[[1,16113,"    \t/**\n\t * 这里可以用到所有的增，删，该方法\n\t * @throws SQLException\n\t */\n\t@Test\n\tpublic void testUpdate() throws SQLException {\n\t\tString sql = \"delete from girl where girlID=2\";\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tqr.update(conn, sql);\n\t\t\n\t\tJDBCUtil.close(conn, null);\n\t\t\n\t\t//可以使用DbUitls里面的方法\n\t\t//DbUtils.close(conn);\n\t}\n\t\n\t/**\n\t * 批处理，减少访问数据库的次数，降低数据库的压力\n\t */\n\t@Test\n\tpublic void testBatch() {\n\t\tString sql = \"insert into girl(girlName, girlAge) values(?,?)\";\n\t\t\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\ttry {\n\t\t\tqr.batch(conn, sql, new Object[][] {{\"刘亦菲\", 20}, {\"小龙女\", 18}});\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"]],[16113,16113],[16882,16882]]],[1564467081195,["GJX@GJXAIOU",[[-1,16895,"\n"]],[16895,16895],[16894,16894]]],[1564467081332,["GJX@GJXAIOU",[[-1,16894,"\n"]],[16894,16894],[16893,16893]]],[1564467081469,["GJX@GJXAIOU",[[-1,16893,"\n"]],[16893,16893],[16892,16892]]],[1564467081829,["GJX@GJXAIOU",[[-1,16892,"\n"]],[16892,16892],[16891,16891]]],[1564467082093,["GJX@GJXAIOU",[[-1,16891,"\n"]],[16891,16891],[16890,16890]]],[1564467082243,["GJX@GJXAIOU",[[-1,16890,"\n"]],[16890,16890],[16889,16889]]],[1564467082357,["GJX@GJXAIOU",[[-1,16889,"\n"]],[16889,16889],[16888,16888]]],[1564467082507,["GJX@GJXAIOU",[[-1,16888,"\n"]],[16888,16888],[16887,16887]]],[1564467082691,["GJX@GJXAIOU",[[-1,16887,"\n"]],[16887,16887],[16886,16886]]],[1564467083051,["GJX@GJXAIOU",[[-1,16886,"\n"]],[16886,16886],[16885,16885]]],[1564467090315,["GJX@GJXAIOU",[[-1,10620,"Demo2.java\n"]],[10620,10631],[10620,10620]]],[1564467092292,["GJX@GJXAIOU",[[-1,10621,"\n"]],[10621,10621],[10620,10620]]],[1564467096374,["GJX@GJXAIOU",[[1,10619," chax"]],[10619,10619],[10624,10624]]],[1564467097411,["GJX@GJXAIOU",[[-1,10619," chax"]],[10624,10624],[10619,10619]]],[1564467109801,["GJX@GJXAIOU",[[1,10619," 查询  增加删除修改"]],[10619,10619],[10630,10630]]],[1564467284068,["GJX@GJXAIOU",[[1,16896,"\n"]],[16890,16890],[16891,16891]]],[1564467289785,["GJX@GJXAIOU",[[1,16891,"## 连接池"]],[16891,16891],[16897,16897]]],[1564467290142,["GJX@GJXAIOU",[[1,16903,"\n"]],[16897,16897],[16898,16898]]],[1564467290275,["GJX@GJXAIOU",[[1,16904,"\n"]],[16898,16898],[16899,16899]]],[1564468562133,["GJX@GJXAIOU",[[1,16899,"```"]],[16899,16899],[16902,16902]]],[1564468562170,["GJX@GJXAIOU",[[1,16902,"language\n```\n"]],[16902,16902],[16902,16910]]],[1564468565686,["GJX@GJXAIOU",[[-1,16902,"language"],[1,16910,"j"]],[16902,16910],[16903,16903]]],[1564468566151,["GJX@GJXAIOU",[[1,16903,"ava"]],[16903,16903],[16906,16906]]],[1564468566683,["GJX@GJXAIOU",[[1,16907,"\n"]],[16906,16906],[16907,16907]]],[1564468570015,["GJX@GJXAIOU",[[1,16907,"package e_mypool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n/*\n 发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 \n \n 涉及到数据库的打开，关闭，这里非常影响软件的运行效率\n \n 把数据库连接对象，放到一个池子里\t\n \t功能如下：\n \t\t1. 初始化连接的个数，最大连接数，当前连接数，池子集合来表示 ，一般使用LinkedList 因为增删多，基本上没有查找\n \t\t2. 构造方法：创建初始化连接\n \t\t3. 创建连接的方法\n \t\t4. 获取连接的方法：\n \t\t\t---> 判断：池子中有没有可用的连接\n \t\t\t\t--> 有，直接拿走\n \t\t\t\t--> 没有\t判断是否达到了最大连接数，\n \t\t\t\t\t-->到达抛出异常\n \t\t\t\t\t-->没有达到，创建新的连接\n \t\t5. 释放连接：\n \t\t\t--> 是将正在使用的数据库连接对象，放回池子内\n */\n\n\npublic class MyConnectionPool {\n\tprivate int initCount = 5; //初始化连接数目，默认5个\n\tprivate int maxCount = 10; //最大连接数\n\tprivate int currentCount = 0; //记录当前连接数\n\t\n\t//连接池，用LinkedList集合来操作\n\tprivate LinkedList<Connection> pool = new LinkedList<Connection>();\n\t\n\t//1. 构造方法，按照指定初始化连接个数，创建新的连接\n\tpublic MyConnectionPool() {\n\t\tfor (int i = 0; i <initCount; i++) {\n\t\t\t//类内创建连接的方式\n\t\t\tConnection conn = createConnection();\n\t\t\tpool.addLast(conn);\n\t\t\tcurrentCount++; //记录连接池里面的连接数目\n\t\t}\n\t}\n\t\n\tpublic int getCurrentCount() {\n\t\treturn currentCount;\n\t}\n\t\n\t//2. 创建一个新的连接的方法\n\tprivate Connection createConnection() {\n\t\t//1. 加载驱动\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tString url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\t\t\tString user = \"root\";\n\t\t\tString password = \"123456\";\n\t\t\t//最原始的连接对象\n\t\t\tfinal Connection finalConn = DriverManager.getConnection(url, user, password);\n\t\t\t//代理思想~~\n\t\t\tConnection proxy = (Connection) Proxy.newProxyInstance(\n\t\t\t\t\t\tfinalConn.getClass().getClassLoader(), //类加载器\n\t\t\t\t\t\tnew Class[] {Connection.class}, //目标对象实现的接口\n\t\t\t\t\t\t\n\t\t\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//定义一个返回值\n\t\t\t\t\t\t\t\tObject result = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//获取要执行方法的方法名\n\t\t\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//这里只是限制了close的操作，如果是其他的方法，按照原来的操作进行\n\t\t\t\t\t\t\t\t//修改关闭close执行的任务\n\t\t\t\t\t\t\t\tif (\"close\".equals(methodName)) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"执行close方法\");\n\t\t\t\t\t\t\t\t\t//放回连接池内\n\t\t\t\t\t\t\t\t\tpool.addLast(finalConn);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"数据库连接已经放回到连接池中\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = method.invoke(finalConn, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\treturn proxy;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t//3. 从连接池中获取连接的方法\n\tpublic Connection getConnection() {\n\t\t//1. 判断池子中有没有连接\n\t\tif (pool.size() > 0) {\n\t\t\treturn pool.removeFirst();\n\t\t}\n\t\t\n\t\t//2. 如果没有连接，判断当前连接数是否达到最大值限制\n\t\tif (currentCount < maxCount) {\n\t\t\tcurrentCount++;\n\t\t\treturn createConnection();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"当前连接数已经达到最大值\");\n\t}\n\t\n\t//4. 释放连接\n\tpublic void realeaseConnection(Connection conn) {\n\t\t//如果池子中读取的数目是小于初始化连接的，放入池子\n\t\tif (pool.size() < initCount) {\n\t\t\tpool.addLast(conn);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t//关闭\n\t\t\t\tcurrentCount--;\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) throws SQLException {\n\t\tMyConnectionPool pool = new MyConnectionPool();\n\t\t\n\t\tSystem.out.println(\"当前连接数：\" + pool.getCurrentCount());\n\t\t\n\t\tConnection conn1 = pool.getConnection();\n\t\tConnection conn2 = pool.getConnection();\n\t\tConnection conn3 = pool.getConnection();\n\t\tConnection conn4 = pool.getConnection();\n\t\tConnection conn5 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn1);\n\t\tSystem.out.println(conn2);\n\t\tSystem.out.println(conn3);\n\t\tSystem.out.println(conn4);\n\t\tSystem.out.println(conn5);\n\t\t\n\t\tconn1.close();\n\t\t\n\t\tconn1 = pool.getConnection();\n\t\tSystem.out.println(conn1);\n\t\t\n\t\tConnection conn6 = pool.getConnection();\n\t\tConnection conn7 = pool.getConnection();\n\t\tConnection conn8 = pool.getConnection();\n\t\tConnection conn9 = pool.getConnection();\n\t\tConnection conn10 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn6);\n\t\tSystem.out.println(conn7);\n\t\tSystem.out.println(conn8);\n\t\tSystem.out.println(conn9);\n\t\tSystem.out.println(conn10);\n\t\t\n\t\tConnection conn11 = pool.getConnection();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]],[16907,16907],[21207,21207]]],[1564468575533,["GJX@GJXAIOU",[[-1,21207,"\n"]],[21207,21207],[21206,21206]]],[1564468575681,["GJX@GJXAIOU",[[-1,21206,"\n"]],[21206,21206],[21205,21205]]],[1564468575834,["GJX@GJXAIOU",[[-1,21205,"\n"]],[21205,21205],[21204,21204]]],[1564468575994,["GJX@GJXAIOU",[[-1,21204,"\n"]],[21204,21204],[21203,21203]]],[1564468576127,["GJX@GJXAIOU",[[-1,21203,"\n"]],[21203,21203],[21202,21202]]],[1564468576253,["GJX@GJXAIOU",[[-1,21202,"\n"]],[21202,21202],[21201,21201]]],[1564468576374,["GJX@GJXAIOU",[[-1,21201,"\n"]],[21201,21201],[21200,21200]]],[1564468576512,["GJX@GJXAIOU",[[-1,21200,"\n"]],[21200,21200],[21199,21199]]],[1564468576646,["GJX@GJXAIOU",[[-1,21199,"\n"]],[21199,21199],[21198,21198]]],[1564468576799,["GJX@GJXAIOU",[[-1,21198,"\n"]],[21198,21198],[21197,21197]]],[1564468576919,["GJX@GJXAIOU",[[-1,21197,"\n"]],[21197,21197],[21196,21196]]],[1564468577050,["GJX@GJXAIOU",[[-1,21196,"\n"]],[21196,21196],[21195,21195]]],[1564468577181,["GJX@GJXAIOU",[[-1,21195,"\n"]],[21195,21195],[21194,21194]]],[1564468577331,["GJX@GJXAIOU",[[-1,21194,"\n"]],[21194,21194],[21193,21193]]],[1564468577549,["GJX@GJXAIOU",[[-1,21193,"\n"]],[21193,21193],[21192,21192]]],[1564468577769,["GJX@GJXAIOU",[[-1,21192,"\n"]],[21192,21192],[21191,21191]]],[1564468578081,["GJX@GJXAIOU",[[-1,21191,"\n"]],[21191,21191],[21190,21190]]],[1564474939600,["GJX@GJXAIOU",[[1,21201,"\n"]],[21196,21196],[21197,21197]]],[1564474941554,["GJX@GJXAIOU",[[1,21197,"## shion"]],[21197,21197],[21205,21205]]],[1564474942528,["GJX@GJXAIOU",[[-1,21199," shion"]],[21205,21205],[21199,21199]]],[1564474943894,["GJX@GJXAIOU",[[1,21199,"使用"]],[21199,21199],[21201,21201]]],[1564474945410,["GJX@GJXAIOU",[[1,21199," "]],[21199,21199],[21200,21200]]],[1564474948878,["GJX@GJXAIOU",[[1,21202,"C3P0"]],[21202,21202],[21206,21206]]],[1564474948921,["GJX@GJXAIOU",[[1,21202," "]],[21206,21206],[21207,21207]]],[1564474951085,["GJX@GJXAIOU",[[1,21207,"连接池"]],[21207,21207],[21210,21210]]],[1564474951127,["GJX@GJXAIOU",[[1,21207," "]],[21210,21210],[21211,21211]]],[1564474951399,["GJX@GJXAIOU",[[1,21216,"\n"]],[21211,21211],[21212,21212]]],[1564474953347,["GJX@GJXAIOU",[[1,21212,"```"]],[21212,21212],[21215,21215]]],[1564474953390,["GJX@GJXAIOU",[[1,21215,"language\n```\n"]],[21215,21215],[21215,21223]]],[1564474954403,["GJX@GJXAIOU",[[-1,21215,"language"],[1,21223,"j"]],[21215,21223],[21216,21216]]],[1564474954855,["GJX@GJXAIOU",[[1,21216,"ava"]],[21216,21216],[21219,21219]]],[1564474954974,["GJX@GJXAIOU",[[1,21220,"\n"]],[21219,21219],[21220,21220]]],[1564474964595,["GJX@GJXAIOU",[[1,21220,"package a_c3p0;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\n\n/*\n    ComboPooledDataSource\n\n */\n\npublic class Demo {\n\n\t//第一种方式：硬编码方式\n\t\t@Test\n\t\t//硬编码方式，使用C3P0连接池管理连接数据库对象\n\t\tpublic void test1() throws Exception {\n\t\t\t//创建连接池的核心工具类\n\t\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\n\t\t\t//设置所需参数\n\t\t\t//连接数据库所需参数\n\t\t\tdataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day38?useSSL=true\");//设置URL\n\t\t\tdataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); //加载驱动\n\t\t\tdataSource.setUser(\"root\"); //设置用户名\n\t\t\tdataSource.setPassword(\"123456\"); //设置密码\n\n\t\t\t//C3P0连接池的属性\n\t\t\tdataSource.setInitialPoolSize(3);  //初始化连接数\n\t\t\tdataSource.setMaxPoolSize(6); //最大连接数\n\t\t\tdataSource.setMaxIdleTime(1000); //设置等待时间\n\n\t\t\t//从连接池中获取到数据库连接对象\n\t\t\tConnection conn = dataSource.getConnection();\n\n\t\t\tconn.prepareStatement(\"delete from student where id=3\").executeUpdate();\n\n\t\t\tconn.close();\n\t\t}\n\n\n\t\t//第二种方法：使用XML配置文件\n\n\t@Test\n\t//使用XML配置文件的方式，创建C3P0连接池\n\tpublic void testXML() throws Exception {\n\t\t//创建c3p0核心类\n\t\t//创建当前核心类，就会自动加载在src下的c3p0-config.xml\n\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\t\tPreparedStatement pstmt = null;\n\n\t\tConnection conn = dataSource.getConnection();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tString sql = \"insert into student(name) values(?)\";\n\n\t\t\tpstmt = conn.prepareStatement(sql);\n\n\t\t\tpstmt.setString(1, \"逗比\");\n\n\t\t\tpstmt.executeUpdate();\n\t\t}\n\n\t\tpstmt.close();\n\t\tconn.close();\n\n\n\t}\n}\n\n\n\n\n\n\n"]],[21220,21220],[22792,22792]]],[1564474969985,["GJX@GJXAIOU",[[-1,22792,"\n"]],[22791,22791],[22790,22790]]],[1564474970110,["GJX@GJXAIOU",[[-1,22791,"\n"]],[22790,22790],[22789,22789]]],[1564474970232,["GJX@GJXAIOU",[[-1,22790,"\n"]],[22789,22789],[22788,22788]]],[1564474970390,["GJX@GJXAIOU",[[-1,22789,"\n"]],[22788,22788],[22787,22787]]],[1564474970609,["GJX@GJXAIOU",[[-1,22788,"\n"]],[22787,22787],[22786,22786]]],[1564474974379,["GJX@GJXAIOU",[[1,22797,"\n"]],[22791,22791],[22792,22792]]],[1564474976146,["GJX@GJXAIOU",[[1,22792,"zjem"]],[22792,22792],[22796,22796]]],[1564474977583,["GJX@GJXAIOU",[[-1,22792,"zjem"]],[22796,22796],[22792,22792]]],[1564474987709,["GJX@GJXAIOU",[[1,22792,"针对第二种方式，一般使用XML"]],[22792,22792],[22807,22807]]],[1564474987752,["GJX@GJXAIOU",[[1,22804," "]],[22807,22807],[22808,22808]]],[1564474996615,["GJX@GJXAIOU",[[1,22808,"配置"]],[22808,22808],[22810,22810]]],[1564474996658,["GJX@GJXAIOU",[[1,22808," "]],[22810,22810],[22811,22811]]],[1564474999192,["GJX@GJXAIOU",[[1,22811,"文件，亦可以说"]],[22811,22811],[22818,22818]]],[1564475000234,["GJX@GJXAIOU",[[-1,22814,"亦可以说"]],[22818,22818],[22814,22814]]],[1564475005630,["GJX@GJXAIOU",[[1,22814,"也可以使用.propo"]],[22814,22814],[22825,22825]]],[1564475035169,["GJX@GJXAIOU",[[-1,22824,"o"]],[22825,22825],[22824,22824]]],[1564475041540,["GJX@GJXAIOU",[[1,22824,"erties文件"]],[22824,22824],[22832,22832]]],[1564475041584,["GJX@GJXAIOU",[[1,22830," "]],[22832,22832],[22833,22833]]],[1564475047844,["GJX@GJXAIOU",[[1,22833,"，这里使用x"]],[22833,22833],[22839,22839]]],[1564475047888,["GJX@GJXAIOU",[[1,22838," "]],[22839,22839],[22840,22840]]],[1564475049772,["GJX@GJXAIOU",[[1,22840,"ml文件"]],[22840,22840],[22844,22844]]],[1564475049815,["GJX@GJXAIOU",[[1,22842," "]],[22844,22844],[22845,22845]]],[1564475062632,["GJX@GJXAIOU",[[1,22845,"，将其放置在上面代码统一"]],[22845,22845],[22857,22857]]],[1564475063594,["GJX@GJXAIOU",[[-1,22855,"统一"]],[22857,22857],[22855,22855]]],[1564475069879,["GJX@GJXAIOU",[[1,22855,"同一包下即可；"]],[22855,22855],[22862,22862]]],[1564475092923,["GJX@GJXAIOU",[[1,22868,"\n"]],[22862,22862],[22863,22863]]],[1564475096391,["GJX@GJXAIOU",[[-1,22868,"\n"]],[22863,22863],[22862,22862]]],[1564475109803,["GJX@GJXAIOU",[[1,22862,"命名为：c3p0-config.cm"]],[22862,22862],[22880,22880]]],[1564475110499,["GJX@GJXAIOU",[[-1,22878,"cm"]],[22880,22880],[22878,22878]]],[1564475111413,["GJX@GJXAIOU",[[1,22878,"xml"]],[22878,22878],[22881,22881]]],[1564475112003,["GJX@GJXAIOU",[[1,22887,"\n"]],[22881,22881],[22882,22882]]],[1564475114163,["GJX@GJXAIOU",[[1,22882,"···"]],[22882,22882],[22885,22885]]],[1564475115120,["GJX@GJXAIOU",[[-1,22882,"···"]],[22885,22885],[22882,22882]]],[1564475116452,["GJX@GJXAIOU",[[1,22882,"```"]],[22882,22882],[22885,22885]]],[1564475116496,["GJX@GJXAIOU",[[1,22885,"language\n```\n"]],[22885,22885],[22885,22893]]],[1564475118069,["GJX@GJXAIOU",[[-1,22885,"language"],[1,22893,"s"]],[22885,22893],[22886,22886]]],[1564475118499,["GJX@GJXAIOU",[[1,22886,"ql"]],[22886,22886],[22888,22888]]],[1564475119298,["GJX@GJXAIOU",[[1,22889,"\n"]],[22888,22888],[22889,22889]]],[1564475124286,["GJX@GJXAIOU",[[-1,22885,"sql"]],[22888,22888],[22885,22885]]],[1564475125322,["GJX@GJXAIOU",[[1,22885,"xml"]],[22885,22885],[22888,22888]]],[1564475126112,["GJX@GJXAIOU",[[1,22890,"\n"]],[22888,22888],[22889,22889]]],[1564475133721,["GJX@GJXAIOU",[[1,22889,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<c3p0-config>\n\t<default-config>\n\t\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/day38?useSSL=true</property>\n\t\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"user\">root</property>\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"initialPoolSize\">3</property>\n\t\t<property name=\"maxPoolSize\">6</property>\n\t\t<property name=\"maxIdleTime\">1000</property>\n\t</default-config>\n</c3p0-config>"]],[22889,22889],[23366,23366]]]],null,"GJX@GJXAIOU"],["be7910be-1846-4a18-b368-cf7b5289c260",1564732717901,"# JavaEEDay36数据库元数据\n## 重要方法：\n参数元数据和结果元数据\n```java\npackage a_metadata;\n\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.ParameterMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\n\nimport org.junit.Test;\nimport utils.JDBCUtil;\n\npublic class Demo {\n\t/**\n\t * 获取数据库元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testDB() throws SQLException {\n\t\t//连接数据库\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\t//获取数据库元数据\n\t\tDatabaseMetaData metaData = conn.getMetaData();\n\t\t\n\t\tSystem.out.println(\"Name:\" + metaData.getUserName());\n\t\tSystem.out.println(\"URL:\" + metaData.getURL());\n\t\tSystem.out.println(\"ProductName:\" + metaData.getDatabaseProductName()); //数据库类型\n\t\tSystem.out.println(\"DriverName:\" + metaData.getDriverName());\n\t\tconn.close();\n\t}\n\t\n\t/**\n\t * 参数元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testParams() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tString sql = \"select * from stuInfo where stuId=? and stuName=?\";\n\t\t\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t//Object[] values = {1, \"刘晓磊\"};\n\t\t\n\t\t//参数元数据\n\t\tParameterMetaData pMetaData = statement.getParameterMetaData();\n\t\t\n\t\t//获取元数据个数\n\t\tint count = pMetaData.getParameterCount();\n\t\t\n\t\tSystem.out.println(\"元数据个数\" + count);\n\t}\n\t\n\t/**\n\t * 结果集元数据\n\t */\n\t@Test\n\tpublic void testResultSet() throws SQLException {\n\t\tString sql = \"select * from stuInfo\";\n\t\t\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\t//结果集元数据\n\t\tResultSetMetaData rsMetaData = set.getMetaData();\n\t\t\n\t\t//遍历所有的结果集\n\t\twhile (set.next()) {\n\t\t\t//1. 获取当结果集的列个数\n\t\t\tint count = rsMetaData.getColumnCount();\n\t\t\t\n\t\t\t//2. 遍历拿到每一列的名字\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t//得到列的名字\n\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1); //数据库都是从1开始\n\t\t\t\t//获取每一行的每一列的数据\n\t\t\t\tObject columnValue = set.getObject(columnName);\n\t\t\t\t\n\t\t\t\tSystem.out.print(columnName + \":\" + columnValue + \",\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n}\n\n```\n\n### 通用的DAO层，主要负责数据库的增删改查 * 这个类定义两个方法： *  1. 数据更新(增，删，改) *  2. 数据查询(查)\n```java\npackage utils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.lang.model.type.PrimitiveType;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\n\n/**\n * 通用的DAO层，主要负责数据库的增删改查\n * 这个类定义两个方法：\n * \t1. 数据更新(增，删，改)\n *  2. 数据查询(查)\n * @author 刘晓磊\n *\n */\n\npublic class BaseDao {\n\t//初始化参数\n\tprivate Connection conn;\n\tprivate PreparedStatement pstmt;\n\tprivate ResultSet rs;\n\t\n\t/**\n\t * 主要针对增，删，改的通用方法\n\t * @param sql 要执行的SQL语句(insert, delete, updata)\n\t * @param paramsValue 参数数组，用来处理SQL语句中的占位符参数，如果没有参数，请传入null\n\t */\n\tpublic void update(String sql, Object[] paramsValue) {\n\t\ttry {\n\t\t\t//1. 数据库连接\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 获取PreparedStatement\n\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//3. 得到参数元数据个数\n\t\t\tint count = pstmt.getParameterMetaData().getParameterCount();\n\t\t\t//4. 利用参数元数据给SQL语句的占位符需要的参数赋值\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t\t//循环结束，就是可以给SQL语句完整赋值\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//5. 执行\n\t\t\tpstmt.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * 查询的通用方法（带有泛型和反射）\n\t * @param sql 查询需要的SQL语句\n\t * @param paramsValue 查询需要参数，如果没有参数，设置为null\n\t * @param cls List集合中保存的数据类型\n\t * @return List集合，返回一个带有指定数据类型List集合\n\t */\n\tpublic <T> List<T> query(String sql, Object[] paramsValue, Class<T> cls) {\n\t\t\n\t\ttry {\n\t\t\t//1.要返回的数据集合\n\t\t\tList<T> list = new ArrayList<T>();\n\t\t\t\n\t\t\t//2.确定List集合中要保存的对象\n\t\t\tT t = null;\n\t\t\t\n\t\t\t//3. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t\n\t\t\t//4. 给SQL语句的占位符赋值参数\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < pstmt.getParameterMetaData().getParameterCount(); i++) {\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//5. 执行查询操作，返回ResultSet\n\t\t\trs = pstmt.executeQuery();\n\t\t\t\n\t\t\t//6. 获取结果集元数据\n\t\t\tResultSetMetaData rsMetaData = rs.getMetaData();\n\t\t\t//数据库列的数量\n\t\t\tint columnCount = rsMetaData.getColumnCount(); \n\t\t\t\n\t\t\t//7. 遍历ResultSet数据集\n\t\t\twhile (rs.next()) {\n\t\t\t\t//创建要保存的对象\n\t\t\t\tt = cls.newInstance();\n\t\t\t\t\n\t\t\t\t//8. 遍历数据行的每一列，得到每一列的名字，在获取到数据，保存到T对象中\n\t\t\t\tfor (int i = 0; i < columnCount; i++) {\n\t\t\t\t\t//获取每一列的名字\n\t\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1);\n\t\t\t\t\t//获取每一列的数据\n\t\t\t\t\tObject value = rs.getObject(columnName);\n\t\t\t\t\t\n\t\t\t\t\t//利用BeanUtils给T对象赋值\n\t\t\t\t\tBeanUtils.setProperty(t, columnName, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//把创建好的T对象，放入到List集合中\n\t\t\t\tlist.add(t);\n\t\t\t}\n\t\t\treturn list;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InstantiationException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException | InvocationTargetException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt, rs);\n\t\t}\n\t\t\n\t\t\n\t\treturn null;\n\t}\n}\n\n\n\n```\n\n\n### 针对 BeanUtil 包的基本使用\n\n#### JavaBean 定义\n```java\npackage b_beanutils;\n\n//JavaBean ：所有 成员变量私有化，并且对外提供一个set和get方法，这种类叫做JavaBean\npublic class User {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n\n```\n\n#### BeanUtils 工具类方法是使用 Demo\n\n/**\n  BeanUtils \n  \t是一个工具类，里面的方法都是静态修饰的，可以通过类名直接调用\n  \tcommons-beanutils-1.8.3.jar\n  \tcommons-logging-1.1.3.jar 日志支持包，没有这个包无法使用BeanUtils\n\n  \t方法一：setProperty(Object bean, String name, Object value);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要赋值的属性名，这里是借助于反射的思想获取到对应setter方法\n  \t\tObject value 要赋值给属性的数据\n  \t\t\n  \t方法二：getProperty(Object bean, String name);\n  \t\tObject bean 是按照JavaBean规定定义的类，这个类要求所有的成员变量私有化，并且对外提供对应的\n  \t\t\tsetter和getter方法\n  \t\tString name 要获取的属性的名字，这里实际调用大方法是对应的getter方法\n  \t方法三：copyProperties(Object dest, Object orig)\n  \t\tObject dest 是要被赋值的类对象\n  \t\tObject orig 复制的源数据\n */\n```java\npackage b_beanutils;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\nimport java.lang.reflect.InvocationTargetException;\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\ttest();\n\t}\n\n\tpublic static void test() {\n\t\t//最原始的方法：\n\t\tUser u = new User();\n\t\tu.setName(\"张三\");\n\n\n\t\t//利用BeanUtils里面的方法来给对象属性赋值\n\t\ttry {\n\n\t\t\tClass cls = Class.forName(\"b_beanutils.User\");\n\t\t\tObject obj = cls.newInstance(); //可以直接调用编译器给我们提供的该类的无参构造方法\n\n\t\t\tBeanUtils.setProperty(obj, \"name\", \"李四\");\n\t\t\t\n\t\t\t//这里调用的是User里面的getName方法，这个方法，有可能不存在，所有报异常NoSuchMethodException\n\t\t\tSystem.out.println(BeanUtils.getProperty(obj, \"name\"));\n\t\t\t\n\t\t\t//复制两个对象之间的属性\n\t\t\tBeanUtils.copyProperties(obj, u);\n\t\t\tSystem.out.println(obj);\n\t\t} catch (IllegalAccessException | InvocationTargetException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO: handle exception\n\t\t} catch (InstantiationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchMethodException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n}\t\n\n```\n\n\n\n### 具体是示例\nstudent.java:是 JavaBean 类\nstudentDao.java\n\nstudent.java\n```java\npackage c_jdbc;\n\npublic class Student {\n\tprivate Integer stuId;\n\tprivate String stuName;\n\tprivate String stuSex;\n\tprivate Integer stuAge;\n\tprivate Integer stuScore;\n\tpublic Integer getStuId() {\n\t\treturn stuId;\n\t}\n\tpublic void setStuId(Integer stuId) {\n\t\tthis.stuId = stuId;\n\t}\n\tpublic String getStuName() {\n\t\treturn stuName;\n\t}\n\tpublic void setStuName(String stuName) {\n\t\tthis.stuName = stuName;\n\t}\n\tpublic String getStuSex() {\n\t\treturn stuSex;\n\t}\n\tpublic void setStuSex(String stuSex) {\n\t\tthis.stuSex = stuSex;\n\t}\n\tpublic Integer getStuAge() {\n\t\treturn stuAge;\n\t}\n\tpublic void setStuAge(Integer stuAge) {\n\t\tthis.stuAge = stuAge;\n\t}\n\tpublic Integer getStuScore() {\n\t\treturn stuScore;\n\t}\n\tpublic void setStuScore(Integer stuScore) {\n\t\tthis.stuScore = stuScore;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [stuId=\" + stuId + \", stuName=\" + stuName + \", stuSex=\" + stuSex + \", stuAge=\" + stuAge\n\t\t\t\t+ \", stuScore=\" + stuScore + \"]\";\n\t}\t\n}\n\n```\n\nstudengDao.java\n```java\npackage c_jdbc;\n\nimport java.util.List;\n\nimport utils.BaseDao;\n\npublic class StudentDao extends BaseDao {\n\t/**\n\t * 删除\n\t */\n\tpublic void deleteById(int id) {\n\t\tString sql = \"delete from stuInfo where stuId=?\";\n\t\tObject[] paramsValue = {id};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 插入\n\t */\n\tpublic void addStudent(Student stu) {\n\t\tString sql = \"insert into stuInfo(stuId, stuName, stuAge, stuSex, stuScore)\"\n\t\t\t\t+ \" values(?,?,?,?,?)\";\n\t\tObject[] paramsValue = {stu.getStuId(), stu.getStuName(), \n\t\t\t\tstu.getStuAge(), stu.getStuSex(), stu.getStuScore()};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 修改\n\t */\n\tpublic void updateStudent(Student stu) {\n\t\tString sql = \"update stuInfo set stuName=?, stuAge=?, stuSex=?, stuScore=? where stuId=?\";\n\t\tObject[] paramsValue = {stu.getStuName(), \n\t\t\t\tstu.getStuAge(), stu.getStuSex(), stu.getStuScore(), stu.getStuId()};\n\t\t\n\t\tsuper.update(sql, paramsValue);\n\t}\n\t\n\t/**\n\t * 查询所有\n\t */\n\tpublic List<Student> getAll() {\n\t\tString sql = \"select * from stuInfo\";\n\t\tList<Student> list = super.query(sql, null, Student.class);\n\t\treturn list;\n\t}\n\t\n\t/**\n\t * 获取指定ID的学生\n\t */\n\tpublic Student findByID(int id) {\n\t\tString sql = \"select * from stuInfo where stuId=?\";\n\t\tObject[] paramsValue = {id};\n\t\tList<Student> list = super.query(sql, paramsValue, Student.class);\n\t\t\n\t\treturn (list != null && list.size() > 0) ? list.get(0) : null;\n\t}\n}\n\n```\ntest.java\n```java\npackage c_jdbc;\n\nimport java.util.List;\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tStudentDao dao = new StudentDao();\n\t\t\n\t\tStudent stu = new Student();\n\t\tstu.setStuName(\"测试\");\n\t\tstu.setStuSex(\"男\");\n\t\tstu.setStuAge(10);\n\t\tstu.setStuScore(100);\n\t\tstu.setStuId(16);\n//\t\tdao.addStudent(stu);\n\t\t\n\t\tstu.setStuName(\"天王盖地虎\");\n\t\t//dao.updateStudent(stu);\n\t\t\n\t\t//dao.deleteById(16);\n\t\t\n\t\tList<Student> list = dao.getAll();\n\t\t\n\t\tfor (Student student : list) {\n\t\t\tSystem.out.println(student);\n\t\t}\n\t\t\n\t\tStudent stu1 = dao.findByID(5);\n\t\tSystem.out.println(stu1);\n\t}\n}\n\n```\n\n\n## dbUtils 使用\ngirl.java \nDemo1.java  :常用的方法 查询  增加删除修改\n\ngirl.java\n```java\npackage d_dbutils;\n\npublic class Girl {\n\tprivate Integer girlID;\n\tprivate String girlName;\n\tprivate Integer girlAge;\n\t\n\tpublic Girl() {}\n\t\n\tpublic Girl(Integer girlID, String girlName, Integer girlAge) {\n\t\tsuper();\n\t\tthis.girlID = girlID;\n\t\tthis.girlName = girlName;\n\t\tthis.girlAge = girlAge;\n\t}\n\n\tpublic String getGirlName() {\n\t\treturn girlName;\n\t}\n\tpublic void setGirlName(String girlName) {\n\t\tthis.girlName = girlName;\n\t}\n\tpublic Integer getGirlAge() {\n\t\treturn girlAge;\n\t}\n\tpublic void setGirlAge(Integer girlAge) {\n\t\tthis.girlAge = girlAge;\n\t}\n\tpublic Integer getGirlID() {\n\t\treturn girlID;\n\t}\n\tpublic void setGirlID(Integer girlID) {\n\t\tthis.girlID = girlID;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Girl [girlID=\" + girlID + \", girlName=\" + girlName + \", girlAge=\" + girlAge + \"]\";\n\t}\n\t\n\t\n}\n\n```\n\nDemo1.java\n```java\npackage d_dbutils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.ResultSetHandler;\nimport org.apache.commons.dbutils.handlers.ArrayHandler;\nimport org.apache.commons.dbutils.handlers.ArrayListHandler;\nimport org.apache.commons.dbutils.handlers.BeanHandler;\nimport org.apache.commons.dbutils.handlers.BeanListHandler;\nimport org.apache.commons.dbutils.handlers.MapHandler;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\n\nimport utils.JDBCUtil;\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\t//query1();\n\t\t//query2();\n\t\t//query3();\n\t\t//query4();\n\t\t//query5();\n\t\t//query6();\n\t\tquery7();\n\t}\n\t\n\t/**\n\t * 获取单个girl对象\n\t * 方法一：使用ResultSetHandler\n\t */\n\tpublic static void query1() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\t//操作数据的核心类\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl where girlID = 2\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new ResultSetHandler<Girl>() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Girl handle(ResultSet arg0) throws SQLException {\n\t\t\t\t\tGirl g = null;\n\t\t\t\t\tif (arg0.next()) {\n\t\t\t\t\t\tg = new Girl(arg0.getInt(\"girlID\"), arg0.getString(\"girlName\"), \n\t\t\t\t\t\t\t\targ0.getInt(\"girlAge\"));\n\t\t\t\t\t}\t\n\t\t\t\t\treturn g;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取单个girl对象\n\t * 方法二：BeanHandler  更加简单\n\t */\n\tpublic static void query2() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl where girlID=2\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new BeanHandler<>(Girl.class));\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t}\n\t\n\t/**\n\t * 获取List集合Girl数据\n\t * BeanListHandler\n\t */\n\tpublic static void query3() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\tString sql = \"select * from girl\";\n\t\t\n\t\ttry {\n\t\t\tList<Girl> list = qr.query(conn, sql, new BeanListHandler<>(Girl.class));\n\t\t\t\n\t\t\tfor (Girl girl : list) {\n\t\t\t\tSystem.out.println(girl);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * 获取一个Gril对象\n\t * 使用的方法，\n\t * QueryRunner query(Connection conn, String sql, ResultSetHandler rs, Object... params)\n\t */\n\tpublic static void query4() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl where girlID=?\";\n\t\t\n\t\ttry {\n\t\t\tGirl girl = qr.query(conn, sql, new BeanHandler<>(Girl.class), 2);\n\t\t\tSystem.out.println(girl);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, null);\n\t\t}\t\t\n\t}\n\t\n\t/**\n\t * 将数据库查询到的 数据 保存的到一个Object类型的数组中\n\t */\n\tpublic static void query5() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl where girlID=2\";\n\t\t\n\t\ttry {\n\t\t\tObject[] arr = qr.query(conn, sql, new ArrayHandler());\n\t\t\tSystem.out.println(Arrays.toString(arr));\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t/**\n\t * 将数据库查询到的 所有数据 ，每一个数据行做成一个数组，把所有的数组放入到一个List集合中\n\t */\n\tpublic static void query6() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl\";\n\t\t\n\t\ttry {\n\t\t\tList<Object[]> list = qr.query(conn, sql, new ArrayListHandler());\n\t\t\t\n\t\t\tfor (Object[] objects : list) {\n\t\t\t\tSystem.out.println(Arrays.toString(objects));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * 拿到所有数据，同时含有字段名\n\t */\n\tpublic static void query7() {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tString sql = \"select * from girl\";\n\t\ttry {\n\t\t\tList<Map<String, Object>> map = qr.query(conn, sql, new MapListHandler());\n\t\t\tfor (Map<String, Object> map2 : map) {\n\t\t\t\tSet<Entry<String, Object>> entrySet = map2.entrySet();\n\t\t\t\tfor (Entry<String, Object> entry : entrySet) {\n\t\t\t\t\tSystem.out.println(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n    \t/**\n\t * 这里可以用到所有的增，删，该方法\n\t * @throws SQLException\n\t */\n\t@Test\n\tpublic void testUpdate() throws SQLException {\n\t\tString sql = \"delete from girl where girlID=2\";\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\tqr.update(conn, sql);\n\t\t\n\t\tJDBCUtil.close(conn, null);\n\t\t\n\t\t//可以使用DbUitls里面的方法\n\t\t//DbUtils.close(conn);\n\t}\n\t\n\t/**\n\t * 批处理，减少访问数据库的次数，降低数据库的压力\n\t */\n\t@Test\n\tpublic void testBatch() {\n\t\tString sql = \"insert into girl(girlName, girlAge) values(?,?)\";\n\t\t\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tQueryRunner qr = new QueryRunner();\n\t\t\n\t\ttry {\n\t\t\tqr.batch(conn, sql, new Object[][] {{\"刘亦菲\", 20}, {\"小龙女\", 18}});\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n\n\n## 连接池\n\n```java\npackage e_mypool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n/*\n 发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 \n \n 涉及到数据库的打开，关闭，这里非常影响软件的运行效率\n \n 把数据库连接对象，放到一个池子里\t\n \t功能如下：\n \t\t1. 初始化连接的个数，最大连接数，当前连接数，池子集合来表示 ，一般使用LinkedList 因为增删多，基本上没有查找\n \t\t2. 构造方法：创建初始化连接\n \t\t3. 创建连接的方法\n \t\t4. 获取连接的方法：\n \t\t\t---> 判断：池子中有没有可用的连接\n \t\t\t\t--> 有，直接拿走\n \t\t\t\t--> 没有\t判断是否达到了最大连接数，\n \t\t\t\t\t-->到达抛出异常\n \t\t\t\t\t-->没有达到，创建新的连接\n \t\t5. 释放连接：\n \t\t\t--> 是将正在使用的数据库连接对象，放回池子内\n */\n\n\npublic class MyConnectionPool {\n\tprivate int initCount = 5; //初始化连接数目，默认5个\n\tprivate int maxCount = 10; //最大连接数\n\tprivate int currentCount = 0; //记录当前连接数\n\t\n\t//连接池，用LinkedList集合来操作\n\tprivate LinkedList<Connection> pool = new LinkedList<Connection>();\n\t\n\t//1. 构造方法，按照指定初始化连接个数，创建新的连接\n\tpublic MyConnectionPool() {\n\t\tfor (int i = 0; i <initCount; i++) {\n\t\t\t//类内创建连接的方式\n\t\t\tConnection conn = createConnection();\n\t\t\tpool.addLast(conn);\n\t\t\tcurrentCount++; //记录连接池里面的连接数目\n\t\t}\n\t}\n\t\n\tpublic int getCurrentCount() {\n\t\treturn currentCount;\n\t}\n\t\n\t//2. 创建一个新的连接的方法\n\tprivate Connection createConnection() {\n\t\t//1. 加载驱动\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tString url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\t\t\tString user = \"root\";\n\t\t\tString password = \"123456\";\n\t\t\t//最原始的连接对象\n\t\t\tfinal Connection finalConn = DriverManager.getConnection(url, user, password);\n\t\t\t//代理思想~~\n\t\t\tConnection proxy = (Connection) Proxy.newProxyInstance(\n\t\t\t\t\t\tfinalConn.getClass().getClassLoader(), //类加载器\n\t\t\t\t\t\tnew Class[] {Connection.class}, //目标对象实现的接口\n\t\t\t\t\t\t\n\t\t\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//定义一个返回值\n\t\t\t\t\t\t\t\tObject result = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//获取要执行方法的方法名\n\t\t\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//这里只是限制了close的操作，如果是其他的方法，按照原来的操作进行\n\t\t\t\t\t\t\t\t//修改关闭close执行的任务\n\t\t\t\t\t\t\t\tif (\"close\".equals(methodName)) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"执行close方法\");\n\t\t\t\t\t\t\t\t\t//放回连接池内\n\t\t\t\t\t\t\t\t\tpool.addLast(finalConn);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"数据库连接已经放回到连接池中\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = method.invoke(finalConn, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\treturn proxy;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t//3. 从连接池中获取连接的方法\n\tpublic Connection getConnection() {\n\t\t//1. 判断池子中有没有连接\n\t\tif (pool.size() > 0) {\n\t\t\treturn pool.removeFirst();\n\t\t}\n\t\t\n\t\t//2. 如果没有连接，判断当前连接数是否达到最大值限制\n\t\tif (currentCount < maxCount) {\n\t\t\tcurrentCount++;\n\t\t\treturn createConnection();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"当前连接数已经达到最大值\");\n\t}\n\t\n\t//4. 释放连接\n\tpublic void realeaseConnection(Connection conn) {\n\t\t//如果池子中读取的数目是小于初始化连接的，放入池子\n\t\tif (pool.size() < initCount) {\n\t\t\tpool.addLast(conn);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t//关闭\n\t\t\t\tcurrentCount--;\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) throws SQLException {\n\t\tMyConnectionPool pool = new MyConnectionPool();\n\t\t\n\t\tSystem.out.println(\"当前连接数：\" + pool.getCurrentCount());\n\t\t\n\t\tConnection conn1 = pool.getConnection();\n\t\tConnection conn2 = pool.getConnection();\n\t\tConnection conn3 = pool.getConnection();\n\t\tConnection conn4 = pool.getConnection();\n\t\tConnection conn5 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn1);\n\t\tSystem.out.println(conn2);\n\t\tSystem.out.println(conn3);\n\t\tSystem.out.println(conn4);\n\t\tSystem.out.println(conn5);\n\t\t\n\t\tconn1.close();\n\t\t\n\t\tconn1 = pool.getConnection();\n\t\tSystem.out.println(conn1);\n\t\t\n\t\tConnection conn6 = pool.getConnection();\n\t\tConnection conn7 = pool.getConnection();\n\t\tConnection conn8 = pool.getConnection();\n\t\tConnection conn9 = pool.getConnection();\n\t\tConnection conn10 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn6);\n\t\tSystem.out.println(conn7);\n\t\tSystem.out.println(conn8);\n\t\tSystem.out.println(conn9);\n\t\tSystem.out.println(conn10);\n\t\t\n\t\tConnection conn11 = pool.getConnection();\n\t}\n}\n\n```\n\n\n## 使用 C3P0 连接池\n```java\npackage a_c3p0;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\n\n/*\n    ComboPooledDataSource\n\n */\n\npublic class Demo {\n\n\t//第一种方式：硬编码方式\n\t\t@Test\n\t\t//硬编码方式，使用C3P0连接池管理连接数据库对象\n\t\tpublic void test1() throws Exception {\n\t\t\t//创建连接池的核心工具类\n\t\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\n\t\t\t//设置所需参数\n\t\t\t//连接数据库所需参数\n\t\t\tdataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day38?useSSL=true\");//设置URL\n\t\t\tdataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); //加载驱动\n\t\t\tdataSource.setUser(\"root\"); //设置用户名\n\t\t\tdataSource.setPassword(\"123456\"); //设置密码\n\n\t\t\t//C3P0连接池的属性\n\t\t\tdataSource.setInitialPoolSize(3);  //初始化连接数\n\t\t\tdataSource.setMaxPoolSize(6); //最大连接数\n\t\t\tdataSource.setMaxIdleTime(1000); //设置等待时间\n\n\t\t\t//从连接池中获取到数据库连接对象\n\t\t\tConnection conn = dataSource.getConnection();\n\n\t\t\tconn.prepareStatement(\"delete from student where id=3\").executeUpdate();\n\n\t\t\tconn.close();\n\t\t}\n\n\n\t\t//第二种方法：使用XML配置文件\n\n\t@Test\n\t//使用XML配置文件的方式，创建C3P0连接池\n\tpublic void testXML() throws Exception {\n\t\t//创建c3p0核心类\n\t\t//创建当前核心类，就会自动加载在src下的c3p0-config.xml\n\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\t\tPreparedStatement pstmt = null;\n\n\t\tConnection conn = dataSource.getConnection();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tString sql = \"insert into student(name) values(?)\";\n\n\t\t\tpstmt = conn.prepareStatement(sql);\n\n\t\t\tpstmt.setString(1, \"逗比\");\n\n\t\t\tpstmt.executeUpdate();\n\t\t}\n\n\t\tpstmt.close();\n\t\tconn.close();\n\n\n\t}\n}\n\n\n```\n针对第二种方式，一般使用 XML 配置文件，也可以使用.properties 文件，这里使用 xml 文件，将其放置在上面代码同一包下即可；命名为：c3p0-config.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<c3p0-config>\n\t<default-config>\n\t\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/day38?useSSL=true</property>\n\t\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"user\">root</property>\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"initialPoolSize\">3</property>\n\t\t<property name=\"maxPoolSize\">6</property>\n\t\t<property name=\"maxIdleTime\">1000</property>\n\t</default-config>\n</c3p0-config>\n\n```\n\n\n\n\n\n\n",[[1564732682509,["GJX@GJXAIOU",[[1,2164,"\n"]],[2164,2164],[2165,2165]]],[1564732685619,["GJX@GJXAIOU",[[1,2183,"\n"]],[2183,2183],[2184,2184]]],[1564733200884,["GJX@GJXAIOU",[[1,20,"\n"]],[19,19],[20,20]]],[1564733201353,["GJX@GJXAIOU",[[1,21,"\n"]],[20,20],[21,21]]],[1564733210382,["GJX@GJXAIOU",[[1,21,"yiban"]],[21,21],[26,26]]],[1564733211561,["GJX@GJXAIOU",[[-1,21,"yiban"]],[26,26],[21,21]]],[1564733214373,["GJX@GJXAIOU",[[1,21,"一般处理"]],[21,21],[25,25]]],[1564733217981,["GJX@GJXAIOU",[[-1,23,"处理"]],[25,25],[23,23]]],[1564733221741,["GJX@GJXAIOU",[[1,23,"使用JDBc"]],[23,23],[29,29]]],[1564733221785,["GJX@GJXAIOU",[[1,25," "]],[29,29],[30,30]]],[1564733223009,["GJX@GJXAIOU",[[-1,29,"c"]],[30,30],[29,29]]],[1564733227205,["GJX@GJXAIOU",[[1,29,"C处理"]],[29,29],[32,32]]],[1564733227248,["GJX@GJXAIOU",[[1,30," "]],[32,32],[33,33]]],[1564733241046,["GJX@GJXAIOU",[[1,33,"数据库的接口主要有三个，即：connection"]],[33,33],[57,57]]],[1564733245001,["GJX@GJXAIOU",[[-1,47,"c"]],[48,48],[47,47]]],[1564733246139,["GJX@GJXAIOU",[[1,47,"C"]],[47,47],[48,48]]],[1564733253988,["GJX@GJXAIOU",[[1,57,"、Prepared"]],[57,57],[66,66]]],[1564733270807,["GJX@GJXAIOU",[[1,66,"Statement、ResultSet"]],[66,66],[85,85]]],[1564733309018,["GJX@GJXAIOU",[[1,86,"\n"]],[85,85],[86,86]]],[1564733315277,["GJX@GJXAIOU",[[1,86,"同时，对于"]],[86,86],[91,91]]],[1564733315714,["GJX@GJXAIOU",[[-1,90,"于"]],[91,91],[90,90]]],[1564733325767,["GJX@GJXAIOU",[[1,90,"而对于这三个接口，还可以获取不同类型的元数据，通过这些元数据类获得一些数据库的信息。\n\n　　元数据(MetaData)，即定义数据的数据。打个比方，就好像我们要想搜索一首歌(歌本身是数据)，而我们可以通过歌名，作者，专辑等信息来搜索，那么这些歌名，作者，专辑等等就是这首歌的元数据。因此数据库的元数据就是一些注明数据库信息的数据。\n\n　　① 由Connection对象的getMetaData()方法获取的是DatabaseMetaData对象。\n\n　　② 由PreparedStatement对象的getParameterMetaData ()方法获取的是ParameterMetaData对象。\n\n　　③由ResultSet对象的getMetaData()方法获取的是ResultSetMetaData对象。"]],[90,90],[446,446]]],[1564733328516,["GJX@GJXAIOU",[[-1,90,"而对"]],[91,91],[89,89]]],[1564733350260,["GJX@GJXAIOU",[[1,112,"**"],[1,130,"**"]],[112,130],[112,134]]],[1564733356524,["GJX@GJXAIOU",[[-1,112,"**"]],[112,114],[112,112]]],[1564733358206,["GJX@GJXAIOU",[[1,111,"****"]],[111,111],[113,113]]],[1564733360577,["GJX@GJXAIOU",[[-1,113,"**"]],[113,113],[111,111]]],[1564733373265,["GJX@GJXAIOU",[[-1,259,"　　"]],[259,261],[259,259]]],[1564733375953,["GJX@GJXAIOU",[[-1,315,"　　"]],[315,317],[315,315]]],[1564733385291,["GJX@GJXAIOU",[[-1,314,"\n"]],[314,314],[313,313]]],[1564733386433,["GJX@GJXAIOU",[[-1,387,"\n"]],[387,387],[386,386]]],[1564733388379,["GJX@GJXAIOU",[[1,441,"\n"]],[440,440],[441,441]]],[1564733417731,["GJX@GJXAIOU",[[1,313,"主要封装了是对数据库本身的一些整体综合信息，例如数据库的产品名称，数据库的版本号，数据库的URL，是否支持事务等等，"]],[313,313],[371,371]]],[1564733420265,["GJX@GJXAIOU",[[-1,370,"，"]],[371,371],[370,370]]],[1564733421052,["GJX@GJXAIOU",[[1,370,"。"]],[370,370],[371,371]]],[1564733497912,[null,[[-1,445,"　　"],[-1,499,"\n"],[1,501,"\n"]],[445,445],[502,502]]],[1564733497912,[null,[[1,445,"　　"],[1,497,"\n"],[-1,498,"\n"]],[502,502],[445,445]]],[1564733443165,["GJX@GJXAIOU",[[-1,997,"\n"]],[998,998],[997,997]]],[1564733478946,["GJX@GJXAIOU",[[1,1068,"//获取数据库产品名称\n 5         "],[-1,1069,"ys"],[-1,1072,"em.out.p"],[1,1083,"g produc"],[-1,1084,"ln(\""],[-1,1092,":\" + m"],[1,1098," = dbM"],[-1,1109,"U"],[1,1110,"Databa"],[1,1112,"P"],[1,1113,"oduct"],[-1,1119,")"],[-1,1122,"\t\tSystem.out.println(\"URL:\" + m"],[1,1153," 6         //获取数据库版本号\n 7         String productVersion = dbM"],[-1,1164,"URL());\n\t\tSystem.out.println(\"Product"],[1,1201,"DatabaseProductVersion();\n 8         //获取数据库用户名\n 9         String user"],[-1,1205,":\" + m"],[1,1211," = dbM"],[-1,1222,"Databa"],[1,1228,"U"],[-1,1230,"P"],[-1,1232,"oduct"],[-1,1243,")"],[1,1245,"\n10        "],[1,1248,"获取"],[-1,1251,"类型\n\t\tSystem.out.println(\"D"],[1,1277,"连接URL\n11         String userUrl = dbMetaData.getURL();\n12         //获取数据库驱动\n13         String d"],[-1,1286,":\" + m"],[1,1292," = dbM"],[1,1315,";\n14         //获取数据库驱动版本号\n15         String driverVersion = dbMetaData.getDriverVersion("],[-1,1318,"\t\tconn.close"],[1,1330,"16         //查看数据库是否允许读操作\n17         boolean isReadOnly = dbMetaData.isReadOnly();\n18         //查看数据库是否支持事务操作\n19         boolean supportsTransactions = dbMetaData.supportsTransactions"]],[1068,1333],[1751,1751]]],[1564733482433,["GJX@GJXAIOU",[[-1,1081,"5"]],[1082,1082],[1081,1081]]],[1564733487513,["GJX@GJXAIOU",[[1,1070,"/"],[1,1081,"5"],[-1,1147,"\n"],[-1,1244,"\n"],[-1,1321,"\n"],[1,1322," "],[-1,1394,"\n"],[1,1395," "],[-1,1474,"\n"],[1,1475," "],[-1,1563,"\n"],[1,1564," "],[-1,1646,"\n"],[1,1647," "]],[1069,1750],[1750,1750]]],[1564733491778,["GJX@GJXAIOU",[[-1,1070,"/"],[-1,1082,"5"],[1,1149,"\n"],[1,1245,"\n"],[1,1321,"\n"],[-1,1321," "],[1,1394,"\n"],[-1,1394," "],[1,1474,"\n"],[-1,1474," "],[1,1563,"\n"],[-1,1563," "],[1,1646,"\n"],[-1,1646," "]],[1750,1750],[1069,1750]]],[1564733494776,["GJX@GJXAIOU",[[-1,1149,"6"]],[1150,1150],[1149,1149]]],[1564733496201,["GJX@GJXAIOU",[[-1,1170,"7"]],[1170,1171],[1170,1170]]],[1564733497137,["GJX@GJXAIOU",[[-1,1244,"8 "]],[1243,1245],[1243,1243]]],[1564733557918,[null,[[-1,445,"　　"],[-1,499,"\n"],[1,501,"\n"],[1,997,")"],[-1,998,"\n"],[1,1068,"\t\t"],[-1,1090,"\ty.pr"],[1,1095,"Strin"],[-1,1103,"i(\""],[1,1106,"t"],[1,1108,"me"],[-1,1114," m"],[1,1125,"et"],[-1,1131,"tUPs"],[1,1135,"sePr"],[-1,1140,"er"],[1,1146,"("],[1,1147,";"],[-1,1206," m"],[1,1217,"et"],[-1,1285,"ct"],[1,1289,"me"],[-1,1295," m"],[-1,1306,"Ubaect"],[1,1312,"etUser"],[1,1316,"("],[1,1317,";"],[-1,1328,");"],[1,1331,"//"],[-1,1333,"//"],[1,1336,"据库"],[-1,1431,"\"D"],[1,1440,"me"],[-1,1446," m"],[1,1469,"()"],[-1,1557,"("],[1,1559,";"],[-1,1743,"se"],[1,1745,""]],[445,445],[1745,1745]]],[1564733557918,[null,[[1,445,"　　"],[1,497,"\n"],[-1,498,"\n"],[-1,995,")"],[1,997,"\n"],[-1,1066,"\t\t"],[1,1090,"\ty.pr"],[-1,1090,"Strin"],[1,1103,"i(\""],[-1,1103,"t"],[-1,1106,"me"],[1,1114," m"],[-1,1123,"et"],[1,1131,"tUPs"],[-1,1131,"sePr"],[1,1140,"er"],[-1,1144,"("],[-1,1146,";"],[1,1206," m"],[-1,1215,"et"],[1,1285,"ct"],[-1,1287,"me"],[1,1295," m"],[1,1304,"Ubaect"],[-1,1304,"etUser"],[-1,1314,"("],[-1,1316,";"],[1,1328,");"],[-1,1329,"//"],[1,1333,"//"],[-1,1334,"据库"],[1,1431,"\"D"],[-1,1438,"me"],[1,1446," m"],[-1,1467,"()"],[1,1557,"("],[-1,1558,";"],[1,1743,"se"],[-1,1743,""]],[1745,1745],[445,445]]],[1564733498737,["GJX@GJXAIOU",[[-1,1316,"0"]],[1317,1317],[1316,1316]]],[1564733499689,["GJX@GJXAIOU",[[-1,1338,"11"]],[1338,1340],[1338,1338]]],[1564733500513,["GJX@GJXAIOU",[[-1,1315,"1"]],[1315,1316],[1315,1315]]],[1564733501700,["GJX@GJXAIOU",[[-1,1384,"12"]],[1384,1386],[1384,1384]]],[1564733506826,["GJX@GJXAIOU",[[-1,1661,"19"]],[1663,1663],[1661,1661]]],[1564733508114,["GJX@GJXAIOU",[[-1,1634,"18 "]],[1637,1637],[1634,1634]]],[1564733508985,["GJX@GJXAIOU",[[-1,1577,"17"]],[1579,1579],[1577,1577]]],[1564733509721,["GJX@GJXAIOU",[[-1,1551,"16"]],[1553,1553],[1551,1551]]],[1564733509917,["GJX@GJXAIOU",[[-1,1550,"\n"]],[1551,1551],[1550,1550]]],[1564733511649,["GJX@GJXAIOU",[[-1,1486,"15"]],[1487,1487],[1486,1486]]],[1564733512545,["GJX@GJXAIOU",[[-1,1462,"14"]],[1464,1464],[1462,1462]]],[1564733513706,["GJX@GJXAIOU",[[-1,1403,"13"]],[1405,1405],[1403,1403]]],[1564733515922,["GJX@GJXAIOU",[[1,1553,"\n         "]],[1553,1553],[1563,1563]]],[1564735177952,[null,[[-1,445,"　　"],[-1,499,"\n"],[1,501,"\n"],[1,997,")"],[-1,998,"\n"],[1,1068,"\t\t"],[-1,1090,"\ty.pr"],[1,1095,"Strin"],[-1,1103,"i(\""],[1,1106,"t"],[1,1108,"me"],[-1,1114," m"],[1,1125,"et"],[-1,1131,"tUPs"],[1,1135,"sePr"],[-1,1140,"er"],[1,1146,"("],[1,1147,";"],[-1,1206," m"],[1,1217,"et"],[-1,1264,"9  "],[-1,1285,"ct"],[1,1289,"me"],[-1,1295," m"],[-1,1306,"Ubaect"],[1,1312,"etUser"],[1,1315,"e();"],[-1,1316,"10"],[-1,1326,");"],[1,1329,"//"],[-1,1331,"//"],[1,1334,"据库"],[1,1337,"RL"],[-1,1338,"11"],[1,1384,");"],[-1,1385,"12"],[1,1403,"驱动"],[-1,1404,"13"],[-1,1423,"\"D"],[1,1432,"me"],[-1,1438," m"],[1,1460,"e();"],[-1,1461,"14"],[1,1482,"本号"],[-1,1483,"15"],[-1,1544,"\n16"],[1,1547,"();   "],[-1,1554,"   "],[1,1578,"操作"],[-1,1579,"17"],[-1,1633,"18 "],[1,1636,");\n"],[1,1657,"操作"],[-1,1658,"19"],[-1,1731,"se"]],[445,445],[1731,1731]]],[1564735177952,[null,[[1,445,"　　"],[1,497,"\n"],[-1,498,"\n"],[-1,995,")"],[1,997,"\n"],[-1,1066,"\t\t"],[1,1090,"\ty.pr"],[-1,1090,"Strin"],[1,1103,"i(\""],[-1,1103,"t"],[-1,1106,"me"],[1,1114," m"],[-1,1123,"et"],[1,1131,"tUPs"],[-1,1131,"sePr"],[1,1140,"er"],[-1,1144,"("],[-1,1146,";"],[1,1206," m"],[-1,1215,"et"],[1,1264,"9  "],[1,1282,"ct"],[-1,1284,"me"],[1,1292," m"],[1,1301,"Ubaect"],[-1,1301,"etUser"],[-1,1310,"e();"],[1,1315,"10"],[1,1323,");"],[-1,1324,"//"],[1,1328,"//"],[-1,1329,"据库"],[-1,1334,"RL"],[1,1337,"11"],[-1,1381,");"],[1,1384,"12"],[-1,1400,"驱动"],[1,1403,"13"],[1,1420,"\"D"],[-1,1427,"me"],[1,1435," m"],[-1,1455,"e();"],[1,1460,"14"],[-1,1479,"本号"],[1,1482,"15"],[1,1541,"\n16"],[-1,1541,"();   "],[1,1554,"   "],[-1,1575,"操作"],[1,1578,"17"],[1,1630,"18 "],[-1,1630,");\n"],[-1,1654,"操作"],[1,1657,"19"],[1,1728,"se"]],[1731,1731],[445,445]]],[1564735123012,["GJX@GJXAIOU",[[-1,500,"## 重要方法：\n参数元数据和结果元数据"]],[500,520],[500,500]]],[1564735135462,["GJX@GJXAIOU",[[1,500,"- 由Connection对象的getMetaData()方法获取的是DatabaseMetaData对象；"]],[500,500],[554,554]]],[1564735135721,["GJX@GJXAIOU",[[1,555,"- \n"]],[554,554],[557,557]]],[1564735136691,["GJX@GJXAIOU",[[-1,555,"- "]],[557,557],[555,555]]],[1564735137441,["GJX@GJXAIOU",[[-1,555,"\n"]],[555,555],[554,554]]],[1564735139625,["GJX@GJXAIOU",[[1,555,"- \n"]],[554,554],[557,557]]],[1564735140168,["GJX@GJXAIOU",[[-1,555,"- "]],[557,557],[556,556]]],[1564735141361,["GJX@GJXAIOU",[[1,556,"\n"]],[556,556],[557,557]]],[1564735142424,["GJX@GJXAIOU",[[1,560,"``"]],[557,557],[559,559]]],[1564735144541,["GJX@GJXAIOU",[[-1,560,"``"]],[559,559],[557,557]]],[1564735148987,["GJX@GJXAIOU",[[1,556,"```java"]],[556,556],[563,563]]],[1564735149230,["GJX@GJXAIOU",[[1,564,"\n"]],[563,563],[564,564]]],[1564735149498,["GJX@GJXAIOU",[[1,565,"\n"]],[564,564],[565,565]]],[1564735150880,["GJX@GJXAIOU",[[1,565,"```"]],[565,565],[568,568]]],[1564735154433,["GJX@GJXAIOU",[[1,569,"\n"]],[568,568],[569,569]]],[1564735175265,["GJX@GJXAIOU",[[1,564,"package metadata;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.SQLException;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-16:14\n */\npublic class getMetadata {\n    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n\n    public void getMetadataByPreparedStatement(){\n        // 1. 建立连接\n    }\n}\n"]],[564,564],[2237,2237]]],[1564735237955,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,2243,"据\n"],[1,2719,")"],[-1,2720,"\n"],[1,2790,"\t\t"],[-1,2812,"\ty.pr"],[1,2817,"Strin"],[-1,2825,"i(\""],[1,2828,"t"],[1,2830,"me"],[-1,2836," m"],[1,2847,"et"],[-1,2853,"tUPs"],[1,2857,"sePr"],[-1,2862,"er"],[1,2868,"("],[1,2869,";"],[-1,2928," m"],[1,2939,"et"],[-1,2986,"9  "],[-1,3007,"ct"],[1,3011,"me"],[-1,3017," m"],[-1,3028,"Ubaect"],[1,3034,"etUser"],[1,3037,"e();"],[-1,3038,"10"],[-1,3048,");"],[1,3051,"//"],[-1,3053,"//"],[1,3056,"据库"],[1,3059,"RL"],[-1,3060,"11"],[1,3106,");"],[-1,3107,"12"],[1,3125,"驱动"],[-1,3126,"13"],[-1,3145,"\"D"],[1,3154,"me"],[-1,3160," m"],[1,3182,"e();"],[-1,3183,"14"],[1,3204,"本号"],[-1,3205,"15"],[-1,3266,"\n16"],[1,3269,"();   "],[-1,3276,"   "],[1,3300,"操作"],[-1,3301,"17"],[-1,3355,"18 "],[1,3358,");\n"],[1,3379,"操作"],[-1,3380,"19"],[-1,3453,"se"]],[445,445],[3453,3453]]],[1564735237955,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,2243,"据\n"],[-1,2717,")"],[1,2719,"\n"],[-1,2788,"\t\t"],[1,2812,"\ty.pr"],[-1,2812,"Strin"],[1,2825,"i(\""],[-1,2825,"t"],[-1,2828,"me"],[1,2836," m"],[-1,2845,"et"],[1,2853,"tUPs"],[-1,2853,"sePr"],[1,2862,"er"],[-1,2866,"("],[-1,2868,";"],[1,2928," m"],[-1,2937,"et"],[1,2986,"9  "],[1,3004,"ct"],[-1,3006,"me"],[1,3014," m"],[1,3023,"Ubaect"],[-1,3023,"etUser"],[-1,3032,"e();"],[1,3037,"10"],[1,3045,");"],[-1,3046,"//"],[1,3050,"//"],[-1,3051,"据库"],[-1,3056,"RL"],[1,3059,"11"],[-1,3103,");"],[1,3106,"12"],[-1,3122,"驱动"],[1,3125,"13"],[1,3142,"\"D"],[-1,3149,"me"],[1,3157," m"],[-1,3177,"e();"],[1,3182,"14"],[-1,3201,"本号"],[1,3204,"15"],[1,3263,"\n16"],[-1,3263,"();   "],[1,3276,"   "],[-1,3297,"操作"],[1,3300,"17"],[1,3352,"18 "],[-1,3352,");\n"],[-1,3376,"操作"],[1,3379,"19"],[1,3450,"se"]],[3453,3453],[445,445]]],[1564735194582,["GJX@GJXAIOU",[[-1,2160,"    public void getMetadataByPreparedStatement(){\n        // 1. 建立连接\n    }"]],[2160,2234],[2160,2160]]],[1564735195201,["GJX@GJXAIOU",[[-1,2160,"\n"]],[2160,2160],[2159,2159]]],[1564735195760,["GJX@GJXAIOU",[[-1,2159,"\n"]],[2159,2159],[2158,2158]]],[1564735205592,["GJX@GJXAIOU",[[1,2167,"\n"]],[2165,2165],[2166,2166]]],[1564735207076,["GJX@GJXAIOU",[[1,2166,"cheng"]],[2166,2166],[2171,2171]]],[1564735208634,["GJX@GJXAIOU",[[-1,2166,"cheng"]],[2171,2171],[2166,2166]]],[1564735212235,["GJX@GJXAIOU",[[1,2166,"程序运行结果："]],[2166,2166],[2173,2173]]],[1564735212473,["GJX@GJXAIOU",[[1,2175,"\n"]],[2173,2173],[2174,2174]]],[1564735214116,["GJX@GJXAIOU",[[1,2174,"```"]],[2174,2174],[2177,2177]]],[1564735215572,["GJX@GJXAIOU",[[1,2179,"\n"]],[2177,2177],[2178,2178]]],[1564735215706,["GJX@GJXAIOU",[[1,2180,"\n"]],[2178,2178],[2179,2179]]],[1564735215840,["GJX@GJXAIOU",[[1,2181,"\n"]],[2179,2179],[2180,2180]]],[1564735216103,["GJX@GJXAIOU",[[1,2182,"\n"]],[2180,2180],[2181,2181]]],[1564735216679,["GJX@GJXAIOU",[[1,2181,"```"]],[2181,2181],[2184,2184]]],[1564735225744,["GJX@GJXAIOU",[[1,2178,"productName : MySQL\nproductVersion : 5.7.25-log\nuserName : root@localhost\nuserUrl : jdbc:mysql://localhost:3306/day34jdbc?serverTimezone = GMT%2B8\ndriverName : MySQL Connector/J\ndriverVersion : mysql-connector-java-8.0.14 (Revision: 36534fa273b4d7824a8668ca685465cf8eaeadd9)\nisReadOnly : false\nsupportsTransactions : true"]],[2178,2178],[2499,2499]]],[1564735229112,["GJX@GJXAIOU",[[-1,2501,"\n"]],[2501,2501],[2500,2500]]],[1564735229556,["GJX@GJXAIOU",[[-1,2500,"\n"]],[2500,2500],[2499,2499]]],[1564737181818,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,2505,"据\n"],[1,2981,")"],[-1,2982,"\n"],[1,3052,"\t\t"],[-1,3074,"\ty.pr"],[1,3079,"Strin"],[-1,3087,"i(\""],[1,3090,"t"],[1,3092,"me"],[-1,3098," m"],[1,3109,"et"],[-1,3115,"tUPs"],[1,3119,"sePr"],[-1,3124,"er"],[1,3130,"("],[1,3131,";"],[-1,3190," m"],[1,3201,"et"],[-1,3248,"9  "],[-1,3269,"ct"],[1,3273,"me"],[-1,3279," m"],[-1,3290,"Ubaect"],[1,3296,"etUser"],[1,3299,"e();"],[-1,3300,"10"],[-1,3310,");"],[1,3313,"//"],[-1,3315,"//"],[1,3318,"据库"],[1,3321,"RL"],[-1,3322,"11"],[1,3368,");"],[-1,3369,"12"],[1,3387,"驱动"],[-1,3388,"13"],[-1,3407,"\"D"],[1,3416,"me"],[-1,3422," m"],[1,3444,"e();"],[-1,3445,"14"],[1,3466,"本号"],[-1,3467,"15"],[-1,3528,"\n16"],[1,3531,"();   "],[-1,3538,"   "],[1,3562,"操作"],[-1,3563,"17"],[-1,3617,"18 "],[1,3620,");\n"],[1,3641,"操作"],[-1,3642,"19"],[-1,3715,"se"]],[445,445],[3715,3715]]],[1564737181818,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,2505,"据\n"],[-1,2979,")"],[1,2981,"\n"],[-1,3050,"\t\t"],[1,3074,"\ty.pr"],[-1,3074,"Strin"],[1,3087,"i(\""],[-1,3087,"t"],[-1,3090,"me"],[1,3098," m"],[-1,3107,"et"],[1,3115,"tUPs"],[-1,3115,"sePr"],[1,3124,"er"],[-1,3128,"("],[-1,3130,";"],[1,3190," m"],[-1,3199,"et"],[1,3248,"9  "],[1,3266,"ct"],[-1,3268,"me"],[1,3276," m"],[1,3285,"Ubaect"],[-1,3285,"etUser"],[-1,3294,"e();"],[1,3299,"10"],[1,3307,");"],[-1,3308,"//"],[1,3312,"//"],[-1,3313,"据库"],[-1,3318,"RL"],[1,3321,"11"],[-1,3365,");"],[1,3368,"12"],[-1,3384,"驱动"],[1,3387,"13"],[1,3404,"\"D"],[-1,3411,"me"],[1,3419," m"],[-1,3439,"e();"],[1,3444,"14"],[-1,3463,"本号"],[1,3466,"15"],[1,3525,"\n16"],[-1,3525,"();   "],[1,3538,"   "],[-1,3559,"操作"],[1,3562,"17"],[1,3614,"18 "],[-1,3614,");\n"],[-1,3638,"操作"],[1,3641,"19"],[1,3712,"se"]],[3715,3715],[445,445]]],[1564737151946,["GJX@GJXAIOU",[[1,2505,"\n"]],[2504,2504],[2505,2505]]],[1564737152085,["GJX@GJXAIOU",[[1,2506,"\n"]],[2505,2505],[2506,2506]]],[1564737153099,["GJX@GJXAIOU",[[1,2506,"?"]],[2506,2506],[2507,2507]]],[1564737153896,["GJX@GJXAIOU",[[-1,2506,"?"]],[2507,2507],[2506,2506]]],[1564737154033,["GJX@GJXAIOU",[[-1,2506,"\n"]],[2506,2506],[2505,2505]]],[1564737154764,["GJX@GJXAIOU",[[1,2505,"?"]],[2505,2505],[2506,2506]]],[1564737155848,["GJX@GJXAIOU",[[-1,2505,"?"]],[2506,2506],[2505,2505]]],[1564737159278,["GJX@GJXAIOU",[[1,2505,"```java"]],[2505,2505],[2512,2512]]],[1564737159421,["GJX@GJXAIOU",[[1,2513,"\n"]],[2512,2512],[2513,2513]]],[1564737159658,["GJX@GJXAIOU",[[1,2514,"\n"]],[2513,2513],[2514,2514]]],[1564737161029,["GJX@GJXAIOU",[[1,2514,"```"]],[2514,2514],[2517,2517]]],[1564737162495,["GJX@GJXAIOU",[[1,2518,"\n"]],[2517,2517],[2518,2518]]],[1564737176763,["GJX@GJXAIOU",[[1,2513,"package metadata;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-16:14\n */\npublic class getMetadata {\n    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n\n    /**\n     *  由PreparedStatement对象的getParameterMetaData ()方法获取的是ParameterMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByPreparedStatement() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"delete from  person where id = ?\";\n\n        // 3.建立preparedStatement运输SQL语句\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n        preparedStatement.setInt(1, 2);\n\n        // 4.获取元数据\n        ParameterMetaData parameterMetaData = preparedStatement.getParameterMetaData();\n\n        // 5.常见的方法：\n        //获取参数个数\n        int paramCount = parameterMetaData.getParameterCount();\n        //以字符串形式获取指定参数的SQL类型，这里有问题\n        String paramTypeName = parameterMetaData.getParameterTypeName(1);\n        //返回指定参数的SQL类型，以java.sql.Types类的字段表示，这里有问题\n        int paramType = parameterMetaData.getParameterType(1);\n        //返回指定参数类型的Java完全限定名称，这里有问题\n        String paramClassName = parameterMetaData.getParameterClassName(1);\n        //返回指定参数的模，，这里有问题\n        int paramMode = parameterMetaData.getParameterMode(1);\n        //返回指定参数的列大小，这里有问题\n        int precision = parameterMetaData.getPrecision(1);\n        //返回指定参数的小数点右边的位数，这里有问题\n        int scale = parameterMetaData.getScale(1);\n\n        System.out.println(\"paramCount : \" + paramCount + \"\\n\" + \"paramTypeName : \" + paramTypeName + \"\\n\" +\n                \"paramType : \" + paramType + \"\\n\" + \"paramClassName : \" + paramClassName + \"\\n\" +\n                \"paramMode : \" + paramMode + \"\\n\" + \"precision : \" + precision + \"\\n\" + \"scale : \" + scale);\n    }\n}\n"]],[2513,2513],[5683,5683]]],[1564737241824,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5689,"据\n"],[1,6165,")"],[-1,6166,"\n"],[1,6236,"\t\t"],[-1,6258,"\ty.pr"],[1,6263,"Strin"],[-1,6271,"i(\""],[1,6274,"t"],[1,6276,"me"],[-1,6282," m"],[1,6293,"et"],[-1,6299,"tUPs"],[1,6303,"sePr"],[-1,6308,"er"],[1,6314,"("],[1,6315,";"],[-1,6374," m"],[1,6385,"et"],[-1,6432,"9  "],[-1,6453,"ct"],[1,6457,"me"],[-1,6463," m"],[-1,6474,"Ubaect"],[1,6480,"etUser"],[1,6483,"e();"],[-1,6484,"10"],[-1,6494,");"],[1,6497,"//"],[-1,6499,"//"],[1,6502,"据库"],[1,6505,"RL"],[-1,6506,"11"],[1,6552,");"],[-1,6553,"12"],[1,6571,"驱动"],[-1,6572,"13"],[-1,6591,"\"D"],[1,6600,"me"],[-1,6606," m"],[1,6628,"e();"],[-1,6629,"14"],[1,6650,"本号"],[-1,6651,"15"],[-1,6712,"\n16"],[1,6715,"();   "],[-1,6722,"   "],[1,6746,"操作"],[-1,6747,"17"],[-1,6801,"18 "],[1,6804,");\n"],[1,6825,"操作"],[-1,6826,"19"],[-1,6899,"se"]],[445,445],[6899,6899]]],[1564737241824,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5689,"据\n"],[-1,6163,")"],[1,6165,"\n"],[-1,6234,"\t\t"],[1,6258,"\ty.pr"],[-1,6258,"Strin"],[1,6271,"i(\""],[-1,6271,"t"],[-1,6274,"me"],[1,6282," m"],[-1,6291,"et"],[1,6299,"tUPs"],[-1,6299,"sePr"],[1,6308,"er"],[-1,6312,"("],[-1,6314,";"],[1,6374," m"],[-1,6383,"et"],[1,6432,"9  "],[1,6450,"ct"],[-1,6452,"me"],[1,6460," m"],[1,6469,"Ubaect"],[-1,6469,"etUser"],[-1,6478,"e();"],[1,6483,"10"],[1,6491,");"],[-1,6492,"//"],[1,6496,"//"],[-1,6497,"据库"],[-1,6502,"RL"],[1,6505,"11"],[-1,6549,");"],[1,6552,"12"],[-1,6568,"驱动"],[1,6571,"13"],[1,6588,"\"D"],[-1,6595,"me"],[1,6603," m"],[-1,6623,"e();"],[1,6628,"14"],[-1,6647,"本号"],[1,6650,"15"],[1,6709,"\n16"],[-1,6709,"();   "],[1,6722,"   "],[-1,6743,"操作"],[1,6746,"17"],[1,6798,"18 "],[-1,6798,");\n"],[-1,6822,"操作"],[1,6825,"19"],[1,6896,"se"]],[6899,6899],[445,445]]],[1564737189467,["GJX@GJXAIOU",[[-1,2643,"public class getMetadata {\n    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n"]],[2643,4035],[2643,2643]]],[1564737195274,["GJX@GJXAIOU",[[1,2643,"public class getMetadata {\n    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n"]],[2643,2643],[2643,4035]]],[1564737203511,["GJX@GJXAIOU",[[-1,2673," /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }"]],[2674,4034],[2673,2673]]],[1564737206832,["GJX@GJXAIOU",[[-1,2674,"\n"]],[2674,2674],[2673,2673]]],[1564737208064,["GJX@GJXAIOU",[[-1,2670,"   "]],[2673,2673],[2670,2670]]],[1564737208392,["GJX@GJXAIOU",[[-1,2670,"\n"]],[2670,2670],[2669,2669]]],[1564737231871,["GJX@GJXAIOU",[[1,2505,"\n"]],[2504,2504],[2505,2505]]],[1564737233231,["GJX@GJXAIOU",[[1,2505,"- ****"]],[2505,2505],[2509,2509]]],[1564737236994,["GJX@GJXAIOU",[[-1,2507,"****"]],[2507,2511],[2507,2507]]],[1564737237575,["GJX@GJXAIOU",[[1,2507,"由PreparedStatement对象的getParameterMetaData ()方法获取的是ParameterMetaData对象。"]],[2507,2507],[2577,2577]]],[1564737301824,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,4396,"据\n"],[1,4872,")"],[-1,4873,"\n"],[1,4943,"\t\t"],[-1,4965,"\ty.pr"],[1,4970,"Strin"],[-1,4978,"i(\""],[1,4981,"t"],[1,4983,"me"],[-1,4989," m"],[1,5000,"et"],[-1,5006,"tUPs"],[1,5010,"sePr"],[-1,5015,"er"],[1,5021,"("],[1,5022,";"],[-1,5081," m"],[1,5092,"et"],[-1,5139,"9  "],[-1,5160,"ct"],[1,5164,"me"],[-1,5170," m"],[-1,5181,"Ubaect"],[1,5187,"etUser"],[1,5190,"e();"],[-1,5191,"10"],[-1,5201,");"],[1,5204,"//"],[-1,5206,"//"],[1,5209,"据库"],[1,5212,"RL"],[-1,5213,"11"],[1,5259,");"],[-1,5260,"12"],[1,5278,"驱动"],[-1,5279,"13"],[-1,5298,"\"D"],[1,5307,"me"],[-1,5313," m"],[1,5335,"e();"],[-1,5336,"14"],[1,5357,"本号"],[-1,5358,"15"],[-1,5419,"\n16"],[1,5422,"();   "],[-1,5429,"   "],[1,5453,"操作"],[-1,5454,"17"],[-1,5508,"18 "],[1,5511,");\n"],[1,5532,"操作"],[-1,5533,"19"],[-1,5606,"se"]],[445,445],[5606,5606]]],[1564737301824,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,4396,"据\n"],[-1,4870,")"],[1,4872,"\n"],[-1,4941,"\t\t"],[1,4965,"\ty.pr"],[-1,4965,"Strin"],[1,4978,"i(\""],[-1,4978,"t"],[-1,4981,"me"],[1,4989," m"],[-1,4998,"et"],[1,5006,"tUPs"],[-1,5006,"sePr"],[1,5015,"er"],[-1,5019,"("],[-1,5021,";"],[1,5081," m"],[-1,5090,"et"],[1,5139,"9  "],[1,5157,"ct"],[-1,5159,"me"],[1,5167," m"],[1,5176,"Ubaect"],[-1,5176,"etUser"],[-1,5185,"e();"],[1,5190,"10"],[1,5198,");"],[-1,5199,"//"],[1,5203,"//"],[-1,5204,"据库"],[-1,5209,"RL"],[1,5212,"11"],[-1,5256,");"],[1,5259,"12"],[-1,5275,"驱动"],[1,5278,"13"],[1,5295,"\"D"],[-1,5302,"me"],[1,5310," m"],[-1,5330,"e();"],[1,5335,"14"],[-1,5354,"本号"],[1,5357,"15"],[1,5416,"\n16"],[-1,5416,"();   "],[1,5429,"   "],[-1,5450,"操作"],[1,5453,"17"],[1,5505,"18 "],[-1,5505,");\n"],[-1,5529,"操作"],[1,5532,"19"],[1,5603,"se"]],[5606,5606],[445,445]]],[1564737242370,["GJX@GJXAIOU",[[1,4396,"\n"]],[4394,4394],[4395,4395]]],[1564737276983,["GJX@GJXAIOU",[[1,2578,"- \n"]],[2577,2577],[2580,2580]]],[1564737277855,["GJX@GJXAIOU",[[-1,2578,"- "]],[2580,2580],[2578,2578]]],[1564737278921,["GJX@GJXAIOU",[[1,2578,"　ParameterMetaData是由PreparedStatement对象通过getParameterMetaData方法获取而来，主要是针对PreparedStatement对象和其预编译的SQL命令语句提供一些信息，比如像”insert into account(id,name,money) values(?,?,?)”这样的预编译SQL语句，ParameterMetaData能提供占位符参数的个数，获取指定位置占位符的SQL类型等等，功能也比较多，这里不列举完，详细请看有关ParameterMetaData的API文档。\n\n　　以下有一些关于ParameterMetaData的常用方法：\n\n**　　·**getParameterCount：获取预编译SQL语句中占位符参数的个数\n\n　　在我看来，ParameterMetaData对象能用的只有获取参数个数的getParameterCount()方法。\n\n　　注意：ParameterMetaData许多方法MySQL并不友好支持，比如像获取指定参数的SQL类型的getParameterType方法，如果数据库驱动连接URL只是简单的“jdbc:mysql://localhost:3306/jdbcdemo”那么MyEclipse会抛出SQLException异常，必须要将URL修改为“jdbc:mysql://localhost:3306/jdbcdemo?generateSimpleParameterMetadata=true”才行。但是像getParameterType等等与其他的方法也没多好用，因为如下面的例子，这些方法好像只会将所有的参数认为是字符串(VARCHAR)类型。"]],[2578,2578],[3309,3309]]],[1564737281817,["GJX@GJXAIOU",[[1,3310,"　　\n"]],[3309,3309],[3312,3312]]],[1564737295410,["GJX@GJXAIOU",[[1,7613,"因为我们的SQL语句为\"insert into user(id,name,age) values(?,?,?)\"，而我们所有利用ParameterMetaData查询的信息除了参数个数以外，都是查询第一个参数的信息，也就是“id”列，而这个“id”列我们创建时是int整型的，但是利用ParameterMetaData的查询结果都是显示为字符串类型，因此我对ParameterMetaData的功能产生了怀疑。\n\n　　因此在以后使用参数元数据ParameterMetaData尽量只要使用其getParamterCount()方法获取参数个数，对于该对象其他方法请慎用。"]],[7613,7613],[7898,7898]]],[1564737297528,["GJX@GJXAIOU",[[1,7899,"　　\n"]],[7898,7898],[7901,7901]]],[1564737361829,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5132,"据\n"],[1,5608,")"],[-1,5609,"\n"],[1,5679,"\t\t"],[-1,5701,"\ty.pr"],[1,5706,"Strin"],[-1,5714,"i(\""],[1,5717,"t"],[1,5719,"me"],[-1,5725," m"],[1,5736,"et"],[-1,5742,"tUPs"],[1,5746,"sePr"],[-1,5751,"er"],[1,5757,"("],[1,5758,";"],[-1,5817," m"],[1,5828,"et"],[-1,5875,"9  "],[-1,5896,"ct"],[1,5900,"me"],[-1,5906," m"],[-1,5917,"Ubaect"],[1,5923,"etUser"],[1,5926,"e();"],[-1,5927,"10"],[-1,5937,");"],[1,5940,"//"],[-1,5942,"//"],[1,5945,"据库"],[1,5948,"RL"],[-1,5949,"11"],[1,5995,");"],[-1,5996,"12"],[1,6014,"驱动"],[-1,6015,"13"],[-1,6034,"\"D"],[1,6043,"me"],[-1,6049," m"],[1,6071,"e();"],[-1,6072,"14"],[1,6093,"本号"],[-1,6094,"15"],[-1,6155,"\n16"],[1,6158,"();   "],[-1,6165,"   "],[1,6189,"操作"],[-1,6190,"17"],[-1,6244,"18 "],[1,6247,");\n"],[1,6268,"操作"],[-1,6269,"19"],[-1,6342,"se"],[1,7612,"\n\n```"],[-1,7901,"\n```\n"],[1,7906,""]],[445,445],[7906,7906]]],[1564737361829,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5132,"据\n"],[-1,5606,")"],[1,5608,"\n"],[-1,5677,"\t\t"],[1,5701,"\ty.pr"],[-1,5701,"Strin"],[1,5714,"i(\""],[-1,5714,"t"],[-1,5717,"me"],[1,5725," m"],[-1,5734,"et"],[1,5742,"tUPs"],[-1,5742,"sePr"],[1,5751,"er"],[-1,5755,"("],[-1,5757,";"],[1,5817," m"],[-1,5826,"et"],[1,5875,"9  "],[1,5893,"ct"],[-1,5895,"me"],[1,5903," m"],[1,5912,"Ubaect"],[-1,5912,"etUser"],[-1,5921,"e();"],[1,5926,"10"],[1,5934,");"],[-1,5935,"//"],[1,5939,"//"],[-1,5940,"据库"],[-1,5945,"RL"],[1,5948,"11"],[-1,5992,");"],[1,5995,"12"],[-1,6011,"驱动"],[1,6014,"13"],[1,6031,"\"D"],[-1,6038,"me"],[1,6046," m"],[-1,6066,"e();"],[1,6071,"14"],[-1,6090,"本号"],[1,6093,"15"],[1,6152,"\n16"],[-1,6152,"();   "],[1,6165,"   "],[-1,6186,"操作"],[1,6189,"17"],[1,6241,"18 "],[-1,6241,");\n"],[-1,6265,"操作"],[1,6268,"19"],[1,6339,"se"],[-1,7607,"\n\n```"],[1,7901,"\n```\n"],[-1,7901,""]],[7906,7906],[445,445]]],[1564737345072,["GJX@GJXAIOU",[[-1,2578,"　"]],[2578,2579],[2578,2578]]],[1564737421829,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5131,"据\n"],[1,5607,")"],[-1,5608,"\n"],[1,5678,"\t\t"],[-1,5700,"\ty.pr"],[1,5705,"Strin"],[-1,5713,"i(\""],[1,5716,"t"],[1,5718,"me"],[-1,5724," m"],[1,5735,"et"],[-1,5741,"tUPs"],[1,5745,"sePr"],[-1,5750,"er"],[1,5756,"("],[1,5757,";"],[-1,5816," m"],[1,5827,"et"],[-1,5874,"9  "],[-1,5895,"ct"],[1,5899,"me"],[-1,5905," m"],[-1,5916,"Ubaect"],[1,5922,"etUser"],[1,5925,"e();"],[-1,5926,"10"],[-1,5936,");"],[1,5939,"//"],[-1,5941,"//"],[1,5944,"据库"],[1,5947,"RL"],[-1,5948,"11"],[1,5994,");"],[-1,5995,"12"],[1,6013,"驱动"],[-1,6014,"13"],[-1,6033,"\"D"],[1,6042,"me"],[-1,6048," m"],[1,6070,"e();"],[-1,6071,"14"],[1,6092,"本号"],[-1,6093,"15"],[-1,6154,"\n16"],[1,6157,"();   "],[-1,6164,"   "],[1,6188,"操作"],[-1,6189,"17"],[-1,6243,"18 "],[1,6246,");\n"],[1,6267,"操作"],[-1,6268,"19"],[-1,6341,"se"],[1,7611,"\n\n```"],[-1,7900,"\n```\n"],[1,7905,""]],[445,445],[7905,7905]]],[1564737421829,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5131,"据\n"],[-1,5605,")"],[1,5607,"\n"],[-1,5676,"\t\t"],[1,5700,"\ty.pr"],[-1,5700,"Strin"],[1,5713,"i(\""],[-1,5713,"t"],[-1,5716,"me"],[1,5724," m"],[-1,5733,"et"],[1,5741,"tUPs"],[-1,5741,"sePr"],[1,5750,"er"],[-1,5754,"("],[-1,5756,";"],[1,5816," m"],[-1,5825,"et"],[1,5874,"9  "],[1,5892,"ct"],[-1,5894,"me"],[1,5902," m"],[1,5911,"Ubaect"],[-1,5911,"etUser"],[-1,5920,"e();"],[1,5925,"10"],[1,5933,");"],[-1,5934,"//"],[1,5938,"//"],[-1,5939,"据库"],[-1,5944,"RL"],[1,5947,"11"],[-1,5991,");"],[1,5994,"12"],[-1,6010,"驱动"],[1,6013,"13"],[1,6030,"\"D"],[-1,6037,"me"],[1,6045," m"],[-1,6065,"e();"],[1,6070,"14"],[-1,6089,"本号"],[1,6092,"15"],[1,6151,"\n16"],[-1,6151,"();   "],[1,6164,"   "],[-1,6185,"操作"],[1,6188,"17"],[1,6240,"18 "],[-1,6240,");\n"],[-1,6264,"操作"],[1,6267,"19"],[1,6338,"se"],[-1,7606,"\n\n```"],[1,7900,"\n```\n"],[-1,7900,""]],[7905,7905],[445,445]]],[1564737380751,["GJX@GJXAIOU",[[-1,2578,"ParameterMetaData是由PreparedStatement对象通过getParameterMetaData方法获取而来，"]],[2578,2645],[2578,2578]]],[1564737381293,["GJX@GJXAIOU",[[1,2578,"g "]],[2578,2578],[2579,2579]]],[1564737381585,["GJX@GJXAIOU",[[1,2579,"ai"]],[2579,2579],[2581,2581]]],[1564737382607,["GJX@GJXAIOU",[[-1,2578,"gai"]],[2581,2581],[2578,2578]]],[1564737385213,["GJX@GJXAIOU",[[1,2578,"该对戏"]],[2578,2578],[2581,2581]]],[1564737386010,["GJX@GJXAIOU",[[-1,2579,"对戏"]],[2581,2581],[2579,2579]]],[1564737389509,["GJX@GJXAIOU",[[1,2579,"对象"]],[2579,2579],[2581,2581]]],[1564737390856,["GJX@GJXAIOU",[[-1,2581," "]],[2582,2582],[2581,2581]]],[1564737396848,["GJX@GJXAIOU",[[1,2578,"**"],[1,2624,"**"]],[2578,2624],[2578,2628]]],[1564737414144,["GJX@GJXAIOU",[[-1,2740,"，功能也比较多，这里不列举完，详细请看有关ParameterMetaData的API文档。"]],[2741,2785],[2740,2740]]],[1564737414837,["GJX@GJXAIOU",[[1,2740,"。"]],[2740,2740],[2741,2741]]],[1564737481851,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5027,"据\n"],[1,5503,")"],[-1,5504,"\n"],[1,5574,"\t\t"],[-1,5596,"\ty.pr"],[1,5601,"Strin"],[-1,5609,"i(\""],[1,5612,"t"],[1,5614,"me"],[-1,5620," m"],[1,5631,"et"],[-1,5637,"tUPs"],[1,5641,"sePr"],[-1,5646,"er"],[1,5652,"("],[1,5653,";"],[-1,5712," m"],[1,5723,"et"],[-1,5770,"9  "],[-1,5791,"ct"],[1,5795,"me"],[-1,5801," m"],[-1,5812,"Ubaect"],[1,5818,"etUser"],[1,5821,"e();"],[-1,5822,"10"],[-1,5832,");"],[1,5835,"//"],[-1,5837,"//"],[1,5840,"据库"],[1,5843,"RL"],[-1,5844,"11"],[1,5890,");"],[-1,5891,"12"],[1,5909,"驱动"],[-1,5910,"13"],[-1,5929,"\"D"],[1,5938,"me"],[-1,5944," m"],[1,5966,"e();"],[-1,5967,"14"],[1,5988,"本号"],[-1,5989,"15"],[-1,6050,"\n16"],[1,6053,"();   "],[-1,6060,"   "],[1,6084,"操作"],[-1,6085,"17"],[-1,6139,"18 "],[1,6142,");\n"],[1,6163,"操作"],[-1,6164,"19"],[-1,6237,"se"],[1,7507,"\n\n```"],[-1,7796,"\n```\n"],[1,7801,""]],[445,445],[7801,7801]]],[1564737481851,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5027,"据\n"],[-1,5501,")"],[1,5503,"\n"],[-1,5572,"\t\t"],[1,5596,"\ty.pr"],[-1,5596,"Strin"],[1,5609,"i(\""],[-1,5609,"t"],[-1,5612,"me"],[1,5620," m"],[-1,5629,"et"],[1,5637,"tUPs"],[-1,5637,"sePr"],[1,5646,"er"],[-1,5650,"("],[-1,5652,";"],[1,5712," m"],[-1,5721,"et"],[1,5770,"9  "],[1,5788,"ct"],[-1,5790,"me"],[1,5798," m"],[1,5807,"Ubaect"],[-1,5807,"etUser"],[-1,5816,"e();"],[1,5821,"10"],[1,5829,");"],[-1,5830,"//"],[1,5834,"//"],[-1,5835,"据库"],[-1,5840,"RL"],[1,5843,"11"],[-1,5887,");"],[1,5890,"12"],[-1,5906,"驱动"],[1,5909,"13"],[1,5926,"\"D"],[-1,5933,"me"],[1,5941," m"],[-1,5961,"e();"],[1,5966,"14"],[-1,5985,"本号"],[1,5988,"15"],[1,6047,"\n16"],[-1,6047,"();   "],[1,6060,"   "],[-1,6081,"操作"],[1,6084,"17"],[1,6136,"18 "],[-1,6136,");\n"],[-1,6160,"操作"],[1,6163,"19"],[1,6234,"se"],[-1,7502,"\n\n```"],[1,7796,"\n```\n"],[-1,7796,""]],[7801,7801],[445,445]]],[1564737425799,["GJX@GJXAIOU",[[-1,2777,"**　　·**"]],[2777,2784],[2777,2777]]],[1564737433095,["GJX@GJXAIOU",[[-1,2743,"　　"]],[2745,2745],[2743,2743]]],[1564737434183,["GJX@GJXAIOU",[[-1,2774,"\n"]],[2774,2774],[2773,2773]]],[1564737440088,["GJX@GJXAIOU",[[-1,2813,"　　"]],[2813,2815],[2813,2813]]],[1564737442791,["GJX@GJXAIOU",[[-1,2873,"　　"]],[2873,2875],[2873,2873]]],[1564737474978,["GJX@GJXAIOU",[[1,2818,"**"],[1,2870,"**"]],[2818,2870],[2818,2874]]],[1564738381845,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5017,"据\n"],[1,5493,")"],[-1,5494,"\n"],[1,5564,"\t\t"],[-1,5586,"\ty.pr"],[1,5591,"Strin"],[-1,5599,"i(\""],[1,5602,"t"],[1,5604,"me"],[-1,5610," m"],[1,5621,"et"],[-1,5627,"tUPs"],[1,5631,"sePr"],[-1,5636,"er"],[1,5642,"("],[1,5643,";"],[-1,5702," m"],[1,5713,"et"],[-1,5760,"9  "],[-1,5781,"ct"],[1,5785,"me"],[-1,5791," m"],[-1,5802,"Ubaect"],[1,5808,"etUser"],[1,5811,"e();"],[-1,5812,"10"],[-1,5822,");"],[1,5825,"//"],[-1,5827,"//"],[1,5830,"据库"],[1,5833,"RL"],[-1,5834,"11"],[1,5880,");"],[-1,5881,"12"],[1,5899,"驱动"],[-1,5900,"13"],[-1,5919,"\"D"],[1,5928,"me"],[-1,5934," m"],[1,5956,"e();"],[-1,5957,"14"],[1,5978,"本号"],[-1,5979,"15"],[-1,6040,"\n16"],[1,6043,"();   "],[-1,6050,"   "],[1,6074,"操作"],[-1,6075,"17"],[-1,6129,"18 "],[1,6132,");\n"],[1,6153,"操作"],[-1,6154,"19"],[-1,6227,"se"],[1,7497,"\n\n```"],[-1,7786,"\n```\n"],[1,7791,""]],[445,445],[7791,7791]]],[1564738381845,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5017,"据\n"],[-1,5491,")"],[1,5493,"\n"],[-1,5562,"\t\t"],[1,5586,"\ty.pr"],[-1,5586,"Strin"],[1,5599,"i(\""],[-1,5599,"t"],[-1,5602,"me"],[1,5610," m"],[-1,5619,"et"],[1,5627,"tUPs"],[-1,5627,"sePr"],[1,5636,"er"],[-1,5640,"("],[-1,5642,";"],[1,5702," m"],[-1,5711,"et"],[1,5760,"9  "],[1,5778,"ct"],[-1,5780,"me"],[1,5788," m"],[1,5797,"Ubaect"],[-1,5797,"etUser"],[-1,5806,"e();"],[1,5811,"10"],[1,5819,");"],[-1,5820,"//"],[1,5824,"//"],[-1,5825,"据库"],[-1,5830,"RL"],[1,5833,"11"],[-1,5877,");"],[1,5880,"12"],[-1,5896,"驱动"],[1,5899,"13"],[1,5916,"\"D"],[-1,5923,"me"],[1,5931," m"],[-1,5951,"e();"],[1,5956,"14"],[-1,5975,"本号"],[1,5978,"15"],[1,6037,"\n16"],[-1,6037,"();   "],[1,6050,"   "],[-1,6071,"操作"],[1,6074,"17"],[1,6126,"18 "],[-1,6126,");\n"],[-1,6150,"操作"],[1,6153,"19"],[1,6224,"se"],[-1,7492,"\n\n```"],[1,7786,"\n```\n"],[-1,7786,""]],[7791,7791],[445,445]]],[1564738345232,["GJX@GJXAIOU",[[1,5017,"\n"]],[5014,5014],[5015,5015]]],[1564738350153,["GJX@GJXAIOU",[[1,5015,"程序运行结果："]],[5015,5015],[5022,5022]]],[1564738350600,["GJX@GJXAIOU",[[1,5025,"\n"]],[5022,5022],[5023,5023]]],[1564738351623,["GJX@GJXAIOU",[[1,5026,"\n"]],[5023,5023],[5024,5024]]],[1564738352752,["GJX@GJXAIOU",[[-1,5026,"\n"]],[5024,5024],[5023,5023]]],[1564738356831,["GJX@GJXAIOU",[[1,5023,"```java"]],[5023,5023],[5030,5030]]],[1564738356982,["GJX@GJXAIOU",[[1,5033,"\n"]],[5030,5030],[5031,5031]]],[1564738357464,["GJX@GJXAIOU",[[1,5034,"\n"]],[5031,5031],[5032,5032]]],[1564738359425,["GJX@GJXAIOU",[[1,5032,"```"]],[5032,5032],[5035,5035]]],[1564738361214,["GJX@GJXAIOU",[[1,5031,"paramCount : 1\nparamTypeName : VARCHAR\nparamType : 12\nparamClassName : java.lang.String\nparamMode : 1\nprecision : 0\nscale : 0"]],[5031,5031],[5156,5156]]],[1564738741845,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5163,"据\n"],[1,5639,")"],[-1,5640,"\n"],[1,5710,"\t\t"],[-1,5732,"\ty.pr"],[1,5737,"Strin"],[-1,5745,"i(\""],[1,5748,"t"],[1,5750,"me"],[-1,5756," m"],[1,5767,"et"],[-1,5773,"tUPs"],[1,5777,"sePr"],[-1,5782,"er"],[1,5788,"("],[1,5789,";"],[-1,5848," m"],[1,5859,"et"],[-1,5906,"9  "],[-1,5927,"ct"],[1,5931,"me"],[-1,5937," m"],[-1,5948,"Ubaect"],[1,5954,"etUser"],[1,5957,"e();"],[-1,5958,"10"],[-1,5968,");"],[1,5971,"//"],[-1,5973,"//"],[1,5976,"据库"],[1,5979,"RL"],[-1,5980,"11"],[1,6026,");"],[-1,6027,"12"],[1,6045,"驱动"],[-1,6046,"13"],[-1,6065,"\"D"],[1,6074,"me"],[-1,6080," m"],[1,6102,"e();"],[-1,6103,"14"],[1,6124,"本号"],[-1,6125,"15"],[-1,6186,"\n16"],[1,6189,"();   "],[-1,6196,"   "],[1,6220,"操作"],[-1,6221,"17"],[-1,6275,"18 "],[1,6278,");\n"],[1,6299,"操作"],[-1,6300,"19"],[-1,6373,"se"],[1,7643,"\n\n```"],[-1,7932,"\n```\n"],[1,7937,""]],[445,445],[7937,7937]]],[1564738741845,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5163,"据\n"],[-1,5637,")"],[1,5639,"\n"],[-1,5708,"\t\t"],[1,5732,"\ty.pr"],[-1,5732,"Strin"],[1,5745,"i(\""],[-1,5745,"t"],[-1,5748,"me"],[1,5756," m"],[-1,5765,"et"],[1,5773,"tUPs"],[-1,5773,"sePr"],[1,5782,"er"],[-1,5786,"("],[-1,5788,";"],[1,5848," m"],[-1,5857,"et"],[1,5906,"9  "],[1,5924,"ct"],[-1,5926,"me"],[1,5934," m"],[1,5943,"Ubaect"],[-1,5943,"etUser"],[-1,5952,"e();"],[1,5957,"10"],[1,5965,");"],[-1,5966,"//"],[1,5970,"//"],[-1,5971,"据库"],[-1,5976,"RL"],[1,5979,"11"],[-1,6023,");"],[1,6026,"12"],[-1,6042,"驱动"],[1,6045,"13"],[1,6062,"\"D"],[-1,6069,"me"],[1,6077," m"],[-1,6097,"e();"],[1,6102,"14"],[-1,6121,"本号"],[1,6124,"15"],[1,6183,"\n16"],[-1,6183,"();   "],[1,6196,"   "],[-1,6217,"操作"],[1,6220,"17"],[1,6272,"18 "],[-1,6272,");\n"],[-1,6296,"操作"],[1,6299,"19"],[1,6370,"se"],[-1,7638,"\n\n```"],[1,7932,"\n```\n"],[-1,7932,""]],[7937,7937],[445,445]]],[1564738684063,["GJX@GJXAIOU",[[-1,7644,"因为我们的SQL语句为\"insert into user(id,name,age) values(?,?,?)\"，而我们所有利用ParameterMetaData查询的信息除了参数个数以外，都是查询第一个参数的信息，也就是“id”列，而这个“id”列我们创建时是int整型的，但是利用ParameterMetaData的查询结果都是显示为字符串类型，因此我对ParameterMetaData的功能产生了怀疑。\n\n　　因此在以后使用参数元数据ParameterMetaData尽量只要使用其getParamterCount()方法获取参数个数，对于该对象其他方法请慎用。\n　　"]],[7644,7932],[7644,7644]]],[1564738688208,["GJX@GJXAIOU",[[1,5161,"因为我们的SQL语句为\"insert into user(id,name,age) values(?,?,?)\"，而我们所有利用ParameterMetaData查询的信息除了参数个数以外，都是查询第一个参数的信息，也就是“id”列，而这个“id”列我们创建时是int整型的，但是利用ParameterMetaData的查询结果都是显示为字符串类型，因此我对ParameterMetaData的功能产生了怀疑。\n\n　　因此在以后使用参数元数据ParameterMetaData尽量只要使用其getParamterCount()方法获取参数个数，对于该对象其他方法请慎用。\n　　"]],[5161,5161],[5449,5449]]],[1564738697224,["GJX@GJXAIOU",[[1,5023,"\n"]],[5022,5022],[5023,5023]]],[1564738719411,["GJX@GJXAIOU",[[1,5023,"下面程序中输出结果中只有第一个占位符参数的格式"]],[5023,5023],[5046,5046]]],[1564738721927,["GJX@GJXAIOU",[[-1,5044,"格式"]],[5046,5046],[5044,5044]]],[1564738736789,["GJX@GJXAIOU",[[1,5044,"个数是正确的，其他的都是有问题的；"]],[5044,5044],[5061,5061]]],[1564738801847,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5490,"据\n"],[1,5966,")"],[-1,5967,"\n"],[1,6037,"\t\t"],[-1,6059,"\ty.pr"],[1,6064,"Strin"],[-1,6072,"i(\""],[1,6075,"t"],[1,6077,"me"],[-1,6083," m"],[1,6094,"et"],[-1,6100,"tUPs"],[1,6104,"sePr"],[-1,6109,"er"],[1,6115,"("],[1,6116,";"],[-1,6175," m"],[1,6186,"et"],[-1,6233,"9  "],[-1,6254,"ct"],[1,6258,"me"],[-1,6264," m"],[-1,6275,"Ubaect"],[1,6281,"etUser"],[1,6284,"e();"],[-1,6285,"10"],[-1,6295,");"],[1,6298,"//"],[-1,6300,"//"],[1,6303,"据库"],[1,6306,"RL"],[-1,6307,"11"],[1,6353,");"],[-1,6354,"12"],[1,6372,"驱动"],[-1,6373,"13"],[-1,6392,"\"D"],[1,6401,"me"],[-1,6407," m"],[1,6429,"e();"],[-1,6430,"14"],[1,6451,"本号"],[-1,6452,"15"],[-1,6513,"\n16"],[1,6516,"();   "],[-1,6523,"   "],[1,6547,"操作"],[-1,6548,"17"],[-1,6602,"18 "],[1,6605,");\n"],[1,6626,"操作"],[-1,6627,"19"],[-1,6700,"se"]],[445,445],[6700,6700]]],[1564738801847,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5490,"据\n"],[-1,5964,")"],[1,5966,"\n"],[-1,6035,"\t\t"],[1,6059,"\ty.pr"],[-1,6059,"Strin"],[1,6072,"i(\""],[-1,6072,"t"],[-1,6075,"me"],[1,6083," m"],[-1,6092,"et"],[1,6100,"tUPs"],[-1,6100,"sePr"],[1,6109,"er"],[-1,6113,"("],[-1,6115,";"],[1,6175," m"],[-1,6184,"et"],[1,6233,"9  "],[1,6251,"ct"],[-1,6253,"me"],[1,6261," m"],[1,6270,"Ubaect"],[-1,6270,"etUser"],[-1,6279,"e();"],[1,6284,"10"],[1,6292,");"],[-1,6293,"//"],[1,6297,"//"],[-1,6298,"据库"],[-1,6303,"RL"],[1,6306,"11"],[-1,6350,");"],[1,6353,"12"],[-1,6369,"驱动"],[1,6372,"13"],[1,6389,"\"D"],[-1,6396,"me"],[1,6404," m"],[-1,6424,"e();"],[1,6429,"14"],[-1,6448,"本号"],[1,6451,"15"],[1,6510,"\n16"],[-1,6510,"();   "],[1,6523,"   "],[-1,6544,"操作"],[1,6547,"17"],[1,6599,"18 "],[-1,6599,");\n"],[-1,6623,"操作"],[1,6626,"19"],[1,6697,"se"]],[6700,6700],[445,445]]],[1564738786328,["GJX@GJXAIOU",[[-1,2633,"insert into account(id,name,money) values(?,?,?)"],[1,2681,"delete from  person where id = ?"]],[2633,2681],[2665,2665]]],[1564738861852,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5474,"据\n"],[1,5950,")"],[-1,5951,"\n"],[1,6021,"\t\t"],[-1,6043,"\ty.pr"],[1,6048,"Strin"],[-1,6056,"i(\""],[1,6059,"t"],[1,6061,"me"],[-1,6067," m"],[1,6078,"et"],[-1,6084,"tUPs"],[1,6088,"sePr"],[-1,6093,"er"],[1,6099,"("],[1,6100,";"],[-1,6159," m"],[1,6170,"et"],[-1,6217,"9  "],[-1,6238,"ct"],[1,6242,"me"],[-1,6248," m"],[-1,6259,"Ubaect"],[1,6265,"etUser"],[1,6268,"e();"],[-1,6269,"10"],[-1,6279,");"],[1,6282,"//"],[-1,6284,"//"],[1,6287,"据库"],[1,6290,"RL"],[-1,6291,"11"],[1,6337,");"],[-1,6338,"12"],[1,6356,"驱动"],[-1,6357,"13"],[-1,6376,"\"D"],[1,6385,"me"],[-1,6391," m"],[1,6413,"e();"],[-1,6414,"14"],[1,6435,"本号"],[-1,6436,"15"],[-1,6497,"\n16"],[1,6500,"();   "],[-1,6507,"   "],[1,6531,"操作"],[-1,6532,"17"],[-1,6586,"18 "],[1,6589,");\n"],[1,6610,"操作"],[-1,6611,"19"],[-1,6684,"se"]],[445,445],[6684,6684]]],[1564738861852,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5474,"据\n"],[-1,5948,")"],[1,5950,"\n"],[-1,6019,"\t\t"],[1,6043,"\ty.pr"],[-1,6043,"Strin"],[1,6056,"i(\""],[-1,6056,"t"],[-1,6059,"me"],[1,6067," m"],[-1,6076,"et"],[1,6084,"tUPs"],[-1,6084,"sePr"],[1,6093,"er"],[-1,6097,"("],[-1,6099,";"],[1,6159," m"],[-1,6168,"et"],[1,6217,"9  "],[1,6235,"ct"],[-1,6237,"me"],[1,6245," m"],[1,6254,"Ubaect"],[-1,6254,"etUser"],[-1,6263,"e();"],[1,6268,"10"],[1,6276,");"],[-1,6277,"//"],[1,6281,"//"],[-1,6282,"据库"],[-1,6287,"RL"],[1,6290,"11"],[-1,6334,");"],[1,6337,"12"],[-1,6353,"驱动"],[1,6356,"13"],[1,6373,"\"D"],[-1,6380,"me"],[1,6388," m"],[-1,6408,"e();"],[1,6413,"14"],[-1,6432,"本号"],[1,6435,"15"],[1,6494,"\n16"],[-1,6494,"();   "],[1,6507,"   "],[-1,6528,"操作"],[1,6531,"17"],[1,6583,"18 "],[-1,6583,");\n"],[-1,6607,"操作"],[1,6610,"19"],[1,6681,"se"]],[6684,6684],[445,445]]],[1564738806337,["GJX@GJXAIOU",[[-1,5196,"insert into user(id,name,age) values(?,?,?)"],[1,5239,"delete from  person where id = ?"]],[5196,5239],[5228,5228]]],[1564738817077,["GJX@GJXAIOU",[[1,5196,"insert into user(id,name,age) values(?,?,?)"],[-1,5196,"delete from  person where id = ?"]],[5228,5228],[5196,5239]]],[1564738839439,["GJX@GJXAIOU",[[-1,5196,"insert into user(id,name,age) values(?,?,?)"],[1,5239,"delete from  person where id = ?"]],[5196,5239],[5228,5228]]],[1564738921850,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5463,"据\n"],[1,5939,")"],[-1,5940,"\n"],[1,6010,"\t\t"],[-1,6032,"\ty.pr"],[1,6037,"Strin"],[-1,6045,"i(\""],[1,6048,"t"],[1,6050,"me"],[-1,6056," m"],[1,6067,"et"],[-1,6073,"tUPs"],[1,6077,"sePr"],[-1,6082,"er"],[1,6088,"("],[1,6089,";"],[-1,6148," m"],[1,6159,"et"],[-1,6206,"9  "],[-1,6227,"ct"],[1,6231,"me"],[-1,6237," m"],[-1,6248,"Ubaect"],[1,6254,"etUser"],[1,6257,"e();"],[-1,6258,"10"],[-1,6268,");"],[1,6271,"//"],[-1,6273,"//"],[1,6276,"据库"],[1,6279,"RL"],[-1,6280,"11"],[1,6326,");"],[-1,6327,"12"],[1,6345,"驱动"],[-1,6346,"13"],[-1,6365,"\"D"],[1,6374,"me"],[-1,6380," m"],[1,6402,"e();"],[-1,6403,"14"],[1,6424,"本号"],[-1,6425,"15"],[-1,6486,"\n16"],[1,6489,"();   "],[-1,6496,"   "],[1,6520,"操作"],[-1,6521,"17"],[-1,6575,"18 "],[1,6578,");\n"],[1,6599,"操作"],[-1,6600,"19"],[-1,6673,"se"]],[445,445],[6673,6673]]],[1564738921850,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5463,"据\n"],[-1,5937,")"],[1,5939,"\n"],[-1,6008,"\t\t"],[1,6032,"\ty.pr"],[-1,6032,"Strin"],[1,6045,"i(\""],[-1,6045,"t"],[-1,6048,"me"],[1,6056," m"],[-1,6065,"et"],[1,6073,"tUPs"],[-1,6073,"sePr"],[1,6082,"er"],[-1,6086,"("],[-1,6088,";"],[1,6148," m"],[-1,6157,"et"],[1,6206,"9  "],[1,6224,"ct"],[-1,6226,"me"],[1,6234," m"],[1,6243,"Ubaect"],[-1,6243,"etUser"],[-1,6252,"e();"],[1,6257,"10"],[1,6265,");"],[-1,6266,"//"],[1,6270,"//"],[-1,6271,"据库"],[-1,6276,"RL"],[1,6279,"11"],[-1,6323,");"],[1,6326,"12"],[-1,6342,"驱动"],[1,6345,"13"],[1,6362,"\"D"],[-1,6369,"me"],[1,6377," m"],[-1,6397,"e();"],[1,6402,"14"],[-1,6421,"本号"],[1,6424,"15"],[1,6483,"\n16"],[-1,6483,"();   "],[1,6496,"   "],[-1,6517,"操作"],[1,6520,"17"],[1,6572,"18 "],[-1,6572,");\n"],[-1,6596,"操作"],[1,6599,"19"],[1,6670,"se"]],[6673,6673],[445,445]]],[1564738876135,["GJX@GJXAIOU",[[1,3055,"day34"],[-1,3059,"demo?"],[1,3064,"?serverTimezone = GMT%2B8 & "]],[3027,3100],[3128,3128]]],[1564738895707,["GJX@GJXAIOU",[[1,3131,"，否则idea"]],[3131,3131],[3138,3138]]],[1564738895756,["GJX@GJXAIOU",[[1,3134," "]],[3138,3138],[3139,3139]]],[1564738896492,["GJX@GJXAIOU",[[1,3139,"会"]],[3139,3139],[3140,3140]]],[1564738896541,["GJX@GJXAIOU",[[1,3139," "]],[3140,3140],[3141,3141]]],[1564738903594,["GJX@GJXAIOU",[[1,3141,"抛出SQL"]],[3141,3141],[3146,3146]]],[1564738903643,["GJX@GJXAIOU",[[1,3143," "]],[3146,3146],[3147,3147]]],[1564738906949,["GJX@GJXAIOU",[[1,3147,"Exception"]],[3147,3147],[3156,3156]]],[1564738918686,["GJX@GJXAIOU",[[-1,2932,"如果数据库驱动连接URL只是简单的“jdbc:mysql://localhost:3306/jdbcdemo”那么MyEclipse会抛出SQLException异常，"]],[2932,3016],[2932,2932]]],[1564738981852,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5432,"据\n"],[1,5908,")"],[-1,5909,"\n"],[1,5979,"\t\t"],[-1,6001,"\ty.pr"],[1,6006,"Strin"],[-1,6014,"i(\""],[1,6017,"t"],[1,6019,"me"],[-1,6025," m"],[1,6036,"et"],[-1,6042,"tUPs"],[1,6046,"sePr"],[-1,6051,"er"],[1,6057,"("],[1,6058,";"],[-1,6117," m"],[1,6128,"et"],[-1,6175,"9  "],[-1,6196,"ct"],[1,6200,"me"],[-1,6206," m"],[-1,6217,"Ubaect"],[1,6223,"etUser"],[1,6226,"e();"],[-1,6227,"10"],[-1,6237,");"],[1,6240,"//"],[-1,6242,"//"],[1,6245,"据库"],[1,6248,"RL"],[-1,6249,"11"],[1,6295,");"],[-1,6296,"12"],[1,6314,"驱动"],[-1,6315,"13"],[-1,6334,"\"D"],[1,6343,"me"],[-1,6349," m"],[1,6371,"e();"],[-1,6372,"14"],[1,6393,"本号"],[-1,6394,"15"],[-1,6455,"\n16"],[1,6458,"();   "],[-1,6465,"   "],[1,6489,"操作"],[-1,6490,"17"],[-1,6544,"18 "],[1,6547,");\n"],[1,6568,"操作"],[-1,6569,"19"],[-1,6642,"se"]],[445,445],[6642,6642]]],[1564738981852,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5432,"据\n"],[-1,5906,")"],[1,5908,"\n"],[-1,5977,"\t\t"],[1,6001,"\ty.pr"],[-1,6001,"Strin"],[1,6014,"i(\""],[-1,6014,"t"],[-1,6017,"me"],[1,6025," m"],[-1,6034,"et"],[1,6042,"tUPs"],[-1,6042,"sePr"],[1,6051,"er"],[-1,6055,"("],[-1,6057,";"],[1,6117," m"],[-1,6126,"et"],[1,6175,"9  "],[1,6193,"ct"],[-1,6195,"me"],[1,6203," m"],[1,6212,"Ubaect"],[-1,6212,"etUser"],[-1,6221,"e();"],[1,6226,"10"],[1,6234,");"],[-1,6235,"//"],[1,6239,"//"],[-1,6240,"据库"],[-1,6245,"RL"],[1,6248,"11"],[-1,6292,");"],[1,6295,"12"],[-1,6311,"驱动"],[1,6314,"13"],[1,6331,"\"D"],[-1,6338,"me"],[1,6346," m"],[-1,6366,"e();"],[1,6371,"14"],[-1,6390,"本号"],[1,6393,"15"],[1,6452,"\n16"],[-1,6452,"();   "],[1,6465,"   "],[-1,6486,"操作"],[1,6489,"17"],[1,6541,"18 "],[-1,6541,");\n"],[-1,6565,"操作"],[1,6568,"19"],[1,6639,"se"]],[6642,6642],[445,445]]],[1564738926448,["GJX@GJXAIOU",[[-1,3148,"　　"]],[3150,3150],[3148,3148]]],[1564738926857,["GJX@GJXAIOU",[[-1,3148,"\n"]],[3148,3148],[3147,3147]]],[1564740601880,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5429,"据\n"],[1,5905,")"],[-1,5906,"\n"],[1,5976,"\t\t"],[-1,5998,"\ty.pr"],[1,6003,"Strin"],[-1,6011,"i(\""],[1,6014,"t"],[1,6016,"me"],[-1,6022," m"],[1,6033,"et"],[-1,6039,"tUPs"],[1,6043,"sePr"],[-1,6048,"er"],[1,6054,"("],[1,6055,";"],[-1,6114," m"],[1,6125,"et"],[-1,6172,"9  "],[-1,6193,"ct"],[1,6197,"me"],[-1,6203," m"],[-1,6214,"Ubaect"],[1,6220,"etUser"],[1,6223,"e();"],[-1,6224,"10"],[-1,6234,");"],[1,6237,"//"],[-1,6239,"//"],[1,6242,"据库"],[1,6245,"RL"],[-1,6246,"11"],[1,6292,");"],[-1,6293,"12"],[1,6311,"驱动"],[-1,6312,"13"],[-1,6331,"\"D"],[1,6340,"me"],[-1,6346," m"],[1,6368,"e();"],[-1,6369,"14"],[1,6390,"本号"],[-1,6391,"15"],[-1,6452,"\n16"],[1,6455,"();   "],[-1,6462,"   "],[1,6486,"操作"],[-1,6487,"17"],[-1,6541,"18 "],[1,6544,");\n"],[1,6565,"操作"],[-1,6566,"19"],[-1,6639,"se"]],[445,445],[6639,6639]]],[1564740601880,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5429,"据\n"],[-1,5903,")"],[1,5905,"\n"],[-1,5974,"\t\t"],[1,5998,"\ty.pr"],[-1,5998,"Strin"],[1,6011,"i(\""],[-1,6011,"t"],[-1,6014,"me"],[1,6022," m"],[-1,6031,"et"],[1,6039,"tUPs"],[-1,6039,"sePr"],[1,6048,"er"],[-1,6052,"("],[-1,6054,";"],[1,6114," m"],[-1,6123,"et"],[1,6172,"9  "],[1,6190,"ct"],[-1,6192,"me"],[1,6200," m"],[1,6209,"Ubaect"],[-1,6209,"etUser"],[-1,6218,"e();"],[1,6223,"10"],[1,6231,");"],[-1,6232,"//"],[1,6236,"//"],[-1,6237,"据库"],[-1,6242,"RL"],[1,6245,"11"],[-1,6289,");"],[1,6292,"12"],[-1,6308,"驱动"],[1,6311,"13"],[1,6328,"\"D"],[-1,6335,"me"],[1,6343," m"],[-1,6363,"e();"],[1,6368,"14"],[-1,6387,"本号"],[1,6390,"15"],[1,6449,"\n16"],[-1,6449,"();   "],[1,6462,"   "],[-1,6483,"操作"],[1,6486,"17"],[1,6538,"18 "],[-1,6538,");\n"],[-1,6562,"操作"],[1,6565,"19"],[1,6636,"se"]],[6639,6639],[445,445]]],[1564740543174,["GJX@GJXAIOU",[[-1,5425,"　　"],[1,5427,"\n"]],[5427,5427],[5426,5426]]],[1564740543343,["GJX@GJXAIOU",[[1,5428,"\n"]],[5426,5426],[5427,5427]]],[1564740545606,["GJX@GJXAIOU",[[1,5427,"- 由ResultSet对象的getMetaData()方法获取的是ResultSetMetaData对象。"]],[5427,5427],[5481,5481]]],[1564740555223,["GJX@GJXAIOU",[[1,5483,"\n"]],[5482,5482],[5483,5483]]],[1564740556366,["GJX@GJXAIOU",[[1,5483,"···"]],[5483,5483],[5486,5486]]],[1564740558255,["GJX@GJXAIOU",[[-1,5483,"···"]],[5486,5486],[5483,5483]]],[1564740558679,["GJX@GJXAIOU",[[-1,5483,"\n"]],[5483,5483],[5482,5482]]],[1564740561677,["GJX@GJXAIOU",[[1,5482,"```java"]],[5482,5482],[5489,5489]]],[1564740561828,["GJX@GJXAIOU",[[1,5490,"\n"]],[5489,5489],[5490,5490]]],[1564740562336,["GJX@GJXAIOU",[[1,5491,"\n"]],[5490,5490],[5491,5491]]],[1564740563207,["GJX@GJXAIOU",[[1,5491,"```"]],[5491,5491],[5494,5494]]],[1564740566238,["GJX@GJXAIOU",[[1,5495,"\n"]],[5494,5494],[5495,5495]]],[1564740661964,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,5496,"据\n"],[1,5972,")"],[-1,5973,"\n"],[1,6043,"\t\t"],[-1,6065,"\ty.pr"],[1,6070,"Strin"],[-1,6078,"i(\""],[1,6081,"t"],[1,6083,"me"],[-1,6089," m"],[1,6100,"et"],[-1,6106,"tUPs"],[1,6110,"sePr"],[-1,6115,"er"],[1,6121,"("],[1,6122,";"],[-1,6181," m"],[1,6192,"et"],[-1,6239,"9  "],[-1,6260,"ct"],[1,6264,"me"],[-1,6270," m"],[-1,6281,"Ubaect"],[1,6287,"etUser"],[1,6290,"e();"],[-1,6291,"10"],[-1,6301,");"],[1,6304,"//"],[-1,6306,"//"],[1,6309,"据库"],[1,6312,"RL"],[-1,6313,"11"],[1,6359,");"],[-1,6360,"12"],[1,6378,"驱动"],[-1,6379,"13"],[-1,6398,"\"D"],[1,6407,"me"],[-1,6413," m"],[1,6435,"e();"],[-1,6436,"14"],[1,6457,"本号"],[-1,6458,"15"],[-1,6519,"\n16"],[1,6522,"();   "],[-1,6529,"   "],[1,6553,"操作"],[-1,6554,"17"],[-1,6608,"18 "],[1,6611,");\n"],[1,6632,"操作"],[-1,6633,"19"],[-1,6706,"se"]],[445,445],[6706,6706]]],[1564740661964,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,5496,"据\n"],[-1,5970,")"],[1,5972,"\n"],[-1,6041,"\t\t"],[1,6065,"\ty.pr"],[-1,6065,"Strin"],[1,6078,"i(\""],[-1,6078,"t"],[-1,6081,"me"],[1,6089," m"],[-1,6098,"et"],[1,6106,"tUPs"],[-1,6106,"sePr"],[1,6115,"er"],[-1,6119,"("],[-1,6121,";"],[1,6181," m"],[-1,6190,"et"],[1,6239,"9  "],[1,6257,"ct"],[-1,6259,"me"],[1,6267," m"],[1,6276,"Ubaect"],[-1,6276,"etUser"],[-1,6285,"e();"],[1,6290,"10"],[1,6298,");"],[-1,6299,"//"],[1,6303,"//"],[-1,6304,"据库"],[-1,6309,"RL"],[1,6312,"11"],[-1,6356,");"],[1,6359,"12"],[-1,6375,"驱动"],[1,6378,"13"],[1,6395,"\"D"],[-1,6402,"me"],[1,6410," m"],[-1,6430,"e();"],[1,6435,"14"],[-1,6454,"本号"],[1,6457,"15"],[1,6516,"\n16"],[-1,6516,"();   "],[1,6529,"   "],[-1,6550,"操作"],[1,6553,"17"],[1,6605,"18 "],[-1,6605,");\n"],[-1,6629,"操作"],[1,6632,"19"],[1,6703,"se"]],[6706,6706],[445,445]]],[1564740628021,["GJX@GJXAIOU",[[1,5490,"package metadata;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.sql.*;\n\n/**\n * @author GJXAIOU\n * @create 2019-08-02-16:14\n */\npublic class getMetadata {\n    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n\n    /**\n     *  由PreparedStatement对象的getParameterMetaData ()方法获取的是ParameterMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByPreparedStatement() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"delete from  person where id = ?\";\n\n        // 3.建立preparedStatement运输SQL语句\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n        preparedStatement.setInt(1, 2);\n\n        // 4.获取元数据\n        ParameterMetaData parameterMetaData = preparedStatement.getParameterMetaData();\n\n        // 5.常见的方法：\n        //获取参数个数\n        int paramCount = parameterMetaData.getParameterCount();\n        //以字符串形式获取指定参数的SQL类型，这里有问题\n        String paramTypeName = parameterMetaData.getParameterTypeName(1);\n        //返回指定参数的SQL类型，以java.sql.Types类的字段表示，这里有问题\n        int paramType = parameterMetaData.getParameterType(1);\n        //返回指定参数类型的Java完全限定名称，这里有问题\n        String paramClassName = parameterMetaData.getParameterClassName(1);\n        //返回指定参数的模，，这里有问题\n        int paramMode = parameterMetaData.getParameterMode(1);\n        //返回指定参数的列大小，这里有问题\n        int precision = parameterMetaData.getPrecision(1);\n        //返回指定参数的小数点右边的位数，这里有问题\n        int scale = parameterMetaData.getScale(1);\n\n        System.out.println(\"paramCount : \" + paramCount + \"\\n\" + \"paramTypeName : \" + paramTypeName + \"\\n\" +\n                \"paramType : \" + paramType + \"\\n\" + \"paramClassName : \" + paramClassName + \"\\n\" +\n                \"paramMode : \" + paramMode + \"\\n\" + \"precision : \" + precision + \"\\n\" + \"scale : \" + scale);\n    }\n\n    /**\n     * 由ResultSet对象的getMetaData()方法获取的是ResultSetMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByRestltSet() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"select * from person\";\n\n        // 3.使用preparedStatement运输SQL语句\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n\n        // 4.指向SQL语句，返回结果集\n        ResultSet set = preparedStatement.executeQuery();\n\n        // 5.获取元数据\n        ResultSetMetaData resultMetaData = set.getMetaData();\n\n        //获取结果集的列数\n        int columnCount = resultMetaData.getColumnCount();\n        //获取指定列的名称\n        String columnName = resultMetaData.getColumnName(1);\n        //获取指定列的SQL类型对应于java.sql.Types类的字段\n        int columnType = resultMetaData.getColumnType(1);\n        //获取指定列的SQL类型\n        String columnTypeName = resultMetaData.getColumnTypeName(1);\n        //获取指定列SQL类型对应于Java的类型\n        String className = resultMetaData.getColumnClassName(1);\n        //获取指定列所在的表的名称\n        String tableName = resultMetaData.getTableName(1);\n\n        System.out.println(\"columnCount : \" + columnCount + \"\\n\" + \"columnName : \" + columnName + \"\\n\" +\n                \"columnType : \" + columnType + \"\\n\" + \"columnTypeName :\" + columnTypeName + \"\\n\" +\n                \"className : \" + className + \"\\n\" + \"tableName : \" + tableName);\n\n    }\n}\n"]],[5490,5490],[10091,10091]]],[1564740643197,["GJX@GJXAIOU",[[-1,5647,"    /**\n     * 由Connection对象的getMetaData()方法获取DatabaseMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByConnection() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取数据库元数据\n        DatabaseMetaData metaData = connection.getMetaData();\n\n        // 3.具体的方法\n        //获取数据库产品名称\n        String productName = metaData.getDatabaseProductName();\n        //获取数据库版本号\n        String productVersion = metaData.getDatabaseProductVersion();\n        //获取数据库用户名\n        String userName = metaData.getUserName();\n        //获取数据库连接URL\n        String userUrl = metaData.getURL();\n        //获取数据库驱动\n        String driverName = metaData.getDriverName();\n        //获取数据库驱动版本号\n        String driverVersion = metaData.getDriverVersion();\n        //查看数据库是否允许读操作\n        boolean isReadOnly = metaData.isReadOnly();\n        //查看数据库是否支持事务操作\n        boolean supportsTransactions = metaData.supportsTransactions();\n\n        System.out.println(\"productName : \" + productName + \"\\n\"+ \"productVersion : \" + productVersion + \"\\n\"+\"userName : \" + userName +\"\\n\"+\n                \"userUrl : \" + userUrl +\"\\n\"+ \"driverName : \" + driverName + \"\\n\"+\"driverVersion : \" + driverVersion + \"\\n\"+\n                \"isReadOnly : \" + isReadOnly + \"\\n\"+ \"supportsTransactions : \" + supportsTransactions);\n    }\n\n    /**\n     *  由PreparedStatement对象的getParameterMetaData ()方法获取的是ParameterMetaData对象\n     * @throws SQLException\n     */\n    @Test\n    public void getMetadataByPreparedStatement() throws SQLException {\n        // 1.建立连接\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.准备SQL语句\n        String sql = \"delete from  person where id = ?\";\n\n        // 3.建立preparedStatement运输SQL语句\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\n        preparedStatement.setInt(1, 2);\n\n        // 4.获取元数据\n        ParameterMetaData parameterMetaData = preparedStatement.getParameterMetaData();\n\n        // 5.常见的方法：\n        //获取参数个数\n        int paramCount = parameterMetaData.getParameterCount();\n        //以字符串形式获取指定参数的SQL类型，这里有问题\n        String paramTypeName = parameterMetaData.getParameterTypeName(1);\n        //返回指定参数的SQL类型，以java.sql.Types类的字段表示，这里有问题\n        int paramType = parameterMetaData.getParameterType(1);\n        //返回指定参数类型的Java完全限定名称，这里有问题\n        String paramClassName = parameterMetaData.getParameterClassName(1);\n        //返回指定参数的模，，这里有问题\n        int paramMode = parameterMetaData.getParameterMode(1);\n        //返回指定参数的列大小，这里有问题\n        int precision = parameterMetaData.getPrecision(1);\n        //返回指定参数的小数点右边的位数，这里有问题\n        int scale = parameterMetaData.getScale(1);\n\n        System.out.println(\"paramCount : \" + paramCount + \"\\n\" + \"paramTypeName : \" + paramTypeName + \"\\n\" +\n                \"paramType : \" + paramType + \"\\n\" + \"paramClassName : \" + paramClassName + \"\\n\" +\n                \"paramMode : \" + paramMode + \"\\n\" + \"precision : \" + precision + \"\\n\" + \"scale : \" + scale);\n    }\n"]],[5650,8658],[5647,5647]]],[1564740643663,["GJX@GJXAIOU",[[-1,5647,"\n"]],[5647,5647],[5646,5646]]],[1564740648008,["GJX@GJXAIOU",[[1,7085,"\n"]],[7083,7083],[7084,7084]]],[1564740649315,["GJX@GJXAIOU",[[1,7084,"cheng"]],[7084,7084],[7089,7089]]],[1564740650697,["GJX@GJXAIOU",[[-1,7084,"cheng"]],[7089,7089],[7084,7084]]],[1564740655482,["GJX@GJXAIOU",[[1,7084,"程序运行结果："]],[7084,7084],[7091,7091]]],[1564740655993,["GJX@GJXAIOU",[[1,7093,"\n"]],[7091,7091],[7092,7092]]],[1564740659190,["GJX@GJXAIOU",[[1,7092,"```java"]],[7092,7092],[7099,7099]]],[1564740659348,["GJX@GJXAIOU",[[1,7101,"\n"]],[7099,7099],[7100,7100]]],[1564740659515,["GJX@GJXAIOU",[[1,7102,"\n"]],[7100,7100],[7101,7101]]],[1564740661752,["GJX@GJXAIOU",[[1,7101,"```"]],[7101,7101],[7104,7104]]],[1564740721964,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7106,"据\n"],[1,7582,")"],[-1,7583,"\n"],[1,7653,"\t\t"],[-1,7675,"\ty.pr"],[1,7680,"Strin"],[-1,7688,"i(\""],[1,7691,"t"],[1,7693,"me"],[-1,7699," m"],[1,7710,"et"],[-1,7716,"tUPs"],[1,7720,"sePr"],[-1,7725,"er"],[1,7731,"("],[1,7732,";"],[-1,7791," m"],[1,7802,"et"],[-1,7849,"9  "],[-1,7870,"ct"],[1,7874,"me"],[-1,7880," m"],[-1,7891,"Ubaect"],[1,7897,"etUser"],[1,7900,"e();"],[-1,7901,"10"],[-1,7911,");"],[1,7914,"//"],[-1,7916,"//"],[1,7919,"据库"],[1,7922,"RL"],[-1,7923,"11"],[1,7969,");"],[-1,7970,"12"],[1,7988,"驱动"],[-1,7989,"13"],[-1,8008,"\"D"],[1,8017,"me"],[-1,8023," m"],[1,8045,"e();"],[-1,8046,"14"],[1,8067,"本号"],[-1,8068,"15"],[-1,8129,"\n16"],[1,8132,"();   "],[-1,8139,"   "],[1,8163,"操作"],[-1,8164,"17"],[-1,8218,"18 "],[1,8221,");\n"],[1,8242,"操作"],[-1,8243,"19"],[-1,8316,"se"]],[445,445],[8316,8316]]],[1564740721964,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7106,"据\n"],[-1,7580,")"],[1,7582,"\n"],[-1,7651,"\t\t"],[1,7675,"\ty.pr"],[-1,7675,"Strin"],[1,7688,"i(\""],[-1,7688,"t"],[-1,7691,"me"],[1,7699," m"],[-1,7708,"et"],[1,7716,"tUPs"],[-1,7716,"sePr"],[1,7725,"er"],[-1,7729,"("],[-1,7731,";"],[1,7791," m"],[-1,7800,"et"],[1,7849,"9  "],[1,7867,"ct"],[-1,7869,"me"],[1,7877," m"],[1,7886,"Ubaect"],[-1,7886,"etUser"],[-1,7895,"e();"],[1,7900,"10"],[1,7908,");"],[-1,7909,"//"],[1,7913,"//"],[-1,7914,"据库"],[-1,7919,"RL"],[1,7922,"11"],[-1,7966,");"],[1,7969,"12"],[-1,7985,"驱动"],[1,7988,"13"],[1,8005,"\"D"],[-1,8012,"me"],[1,8020," m"],[-1,8040,"e();"],[1,8045,"14"],[-1,8064,"本号"],[1,8067,"15"],[1,8126,"\n16"],[-1,8126,"();   "],[1,8139,"   "],[-1,8160,"操作"],[1,8163,"17"],[1,8215,"18 "],[-1,8215,");\n"],[-1,8239,"操作"],[1,8242,"19"],[1,8313,"se"]],[8316,8316],[445,445]]],[1564740670511,["GJX@GJXAIOU",[[1,7100,"columnCount : 6\ncolumnName : id\ncolumnType : -6\ncolumnTypeName :TINYINT\nclassName : java.lang.Integer\ntableName : person"]],[7100,7100],[7220,7220]]],[1564740676557,["GJX@GJXAIOU",[[-1,7226,"```java\npackage a_metadata;\n\nimport java.sql.Connection;\nimport java.sql.DatabaseMetaData;\nimport java.sql.ParameterMetaData;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\n\nimport org.junit.Test;\nimport utils.JDBCUtil;\n\npublic class Demo {\n\t/**\n\t * 获取数据库元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testDB() throws SQLException {\n\t\t//连接数据库\n\t\tConnection conn = JDBCUtil.getConnection();\t\t\n\t\t//获取数据库元数据\n\t\tDatabaseMetaData metaData = conn.getMetaData();\n\t\t\n\t\t//获取数据库产品名称\n          String productName = dbMetaData.getDatabaseProductName();\n          //获取数据库版本号\n          String productVersion = dbMetaData.getDatabaseProductVersion();\n         //获取数据库用户名\n        String userName = dbMetaData.getUserName();\n         //获取数据库连接URL\n         String userUrl = dbMetaData.getURL();\n         //获取数据库驱动\n         String driverName = dbMetaData.getDriverName();\n         //获取数据库驱动版本号\n         String driverVersion = dbMetaData.getDriverVersion();         \n         //查看数据库是否允许读操作\n         boolean isReadOnly = dbMetaData.isReadOnly();\n        //查看数据库是否支持事务操作\n         boolean supportsTransactions = dbMetaData.supportsTransactions();\n\t}\n\t\n\t/**\n\t * 参数元数据\n\t * @throws SQLException \n\t */\n\t@Test\n\tpublic void testParams() throws SQLException {\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\t\n\t\tString sql = \"select * from stuInfo where stuId=? and stuName=?\";\n\t\t\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\t//Object[] values = {1, \"刘晓磊\"};\n\t\t\n\t\t//参数元数据\n\t\tParameterMetaData pMetaData = statement.getParameterMetaData();\n\t\t\n\t\t//获取元数据个数\n\t\tint count = pMetaData.getParameterCount();\n\t\t\n\t\tSystem.out.println(\"元数据个数\" + count);\n\t}\n\t\n\t/**\n\t * 结果集元数据\n\t */\n\t@Test\n\tpublic void testResultSet() throws SQLException {\n\t\tString sql = \"select * from stuInfo\";\n\t\t\n\t\tConnection conn = JDBCUtil.getConnection();\n\t\tPreparedStatement statement = conn.prepareStatement(sql);\n\t\tResultSet set = statement.executeQuery();\n\t\t\n\t\t//结果集元数据\n\t\tResultSetMetaData rsMetaData = set.getMetaData();\n\t\t\n\t\t//遍历所有的结果集\n\t\twhile (set.next()) {\n\t\t\t//1. 获取当结果集的列个数\n\t\t\tint count = rsMetaData.getColumnCount();\n\t\t\t\n\t\t\t//2. 遍历拿到每一列的名字\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t//得到列的名字\n\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1); //数据库都是从1开始\n\t\t\t\t//获取每一行的每一列的数据\n\t\t\t\tObject columnValue = set.getObject(columnName);\n\t\t\t\t\n\t\t\t\tSystem.out.print(columnName + \":\" + columnValue + \",\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n}\n\n```"]],[7226,9706],[7226,7226]]],[1564740680294,["GJX@GJXAIOU",[[-1,7227,"\n"]],[7226,7226],[7225,7225]]],[1564740680775,["GJX@GJXAIOU",[[-1,7226,"\n"]],[7225,7225],[7224,7224]]],[1564740961966,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7220,"\n```\n"]],[445,445],[7220,7220]]],[1564740961966,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7220,"\n```\n"]],[7220,7220],[445,445]]],[1564740914040,["GJX@GJXAIOU",[[-1,10360,"#"]],[10361,10361],[10360,10360]]],[1564741321978,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7226,"```\n\n"],[-1,10362,"#"],[1,10363,"\n"]],[445,445],[10364,10364]]],[1564741321978,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7226,"```\n\n"],[1,10357,"#"],[-1,10357,"\n"]],[10364,10364],[445,445]]],[1564741313233,["GJX@GJXAIOU",[[1,7171," 、、"]],[7171,7171],[7174,7174]]],[1564741314153,["GJX@GJXAIOU",[[-1,7172,"、、"]],[7174,7174],[7172,7172]]],[1564741319999,["GJX@GJXAIOU",[[1,7172,"// 第一线"]],[7172,7172],[7178,7178]]],[1564741320697,["GJX@GJXAIOU",[[-1,7177,"线"]],[7178,7178],[7177,7177]]],[1564741381977,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7232,"```\n\n"],[-1,10368,"#"],[1,10369,"\n"]],[445,445],[10370,10370]]],[1564741381977,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7232,"```\n\n"],[1,10363,"#"],[-1,10363,"\n"]],[10370,10370],[445,445]]],[1564741324700,["GJX@GJXAIOU",[[1,7177,"项的数据类型"]],[7177,7177],[7183,7183]]],[1564744502037,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"]],[445,445],[10376,10376]]],[1564744502037,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"]],[10376,10376],[445,445]]],[1564744468302,["GJX@GJXAIOU",[[1,10410,"\n"]],[10409,10409],[10410,10410]]],[1564744487240,["GJX@GJXAIOU",[[1,10410,"也称之为POJO"]],[10410,10410],[10418,10418]]],[1564744487288,["GJX@GJXAIOU",[[1,10414," "]],[10418,10418],[10419,10419]]],[1564744492193,["GJX@GJXAIOU",[[1,10419,"类"]],[10419,10419],[10420,10420]]],[1564744492243,["GJX@GJXAIOU",[[1,10419," "]],[10420,10420],[10421,10421]]],[1564744562038,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[1,10410,"n 定义\n"],[-1,10421,"\nn 定义"]],[445,445],[10421,10421]]],[1564744562038,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[-1,10405,"n 定义\n"],[1,10421,"\nn 定义"]],[10421,10421],[445,445]]],[1564744502087,["GJX@GJXAIOU",[[-1,10452,"//JavaBean ：所有 成员变量私有化，并且对外提供一个set和get方法，这种类叫做JavaBean"]],[10452,10506],[10452,10452]]],[1564744503661,["GJX@GJXAIOU",[[1,10410,"\n"]],[10409,10409],[10410,10410]]],[1564744504076,["GJX@GJXAIOU",[[1,10410,"//JavaBean ：所有 成员变量私有化，并且对外提供一个set和get方法，这种类叫做JavaBean"]],[10410,10410],[10464,10464]]],[1564744518075,["GJX@GJXAIOU",[[1,10476,"：私有化+ setter和"]],[10476,10476],[10489,10489]]],[1564744518126,["GJX@GJXAIOU",[[1,10488," "]],[10489,10489],[10490,10490]]],[1564744522064,["GJX@GJXAIOU",[[1,10490,"getter"]],[10490,10490],[10496,10496]]],[1564744522113,["GJX@GJXAIOU",[[1,10490," "]],[10496,10496],[10497,10497]]],[1564744524763,["GJX@GJXAIOU",[[-1,10496,"r"]],[10497,10497],[10496,10496]]],[1564744529290,["GJX@GJXAIOU",[[1,10496,"r方法"]],[10496,10496],[10499,10499]]],[1564744529347,["GJX@GJXAIOU",[[1,10497," "]],[10499,10499],[10500,10500]]],[1564744533466,["GJX@GJXAIOU",[[1,10500,"以及tostring"]],[10500,10500],[10510,10510]]],[1564744533514,["GJX@GJXAIOU",[[1,10502," "]],[10510,10510],[10511,10511]]],[1564744534266,["GJX@GJXAIOU",[[1,10511,"方法"]],[10511,10511],[10513,10513]]],[1564744534315,["GJX@GJXAIOU",[[1,10511," "]],[10513,10513],[10514,10514]]],[1564744534935,["GJX@GJXAIOU",[[1,10514,"；"]],[10514,10514],[10515,10515]]],[1564744742050,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[1,10410,"n 定义\n"],[-1,10516,"n 定义\n"],[-1,10546,"aBean"],[1,10551,"ls;\n\n"]],[445,445],[10556,10556]]],[1564744742050,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[-1,10405,"n 定义\n"],[1,10516,"n 定义\n"],[1,10541,"aBean"],[-1,10541,"ls;\n\n"]],[10556,10556],[445,445]]],[1564744682597,["GJX@GJXAIOU",[[-1,10931,"是"]],[10932,10932],[10931,10931]]],[1564744715324,["GJX@GJXAIOU",[[-1,10957,"  \t"]],[10957,10960],[10957,10957]]],[1564744715692,["GJX@GJXAIOU",[[-1,10956,"\n"]],[10957,10957],[10956,10956]]],[1564744717982,["GJX@GJXAIOU",[[-1,10940,"/**"]],[10940,10943],[10940,10940]]],[1564744720732,["GJX@GJXAIOU",[[-1,11564," */"]],[11564,11567],[11564,11564]]],[1564744725265,["GJX@GJXAIOU",[[-1,10941,"  "],[-1,10984,"  "],[-1,11015,"  "],[-1,11070,"  "],[-1,11130,"  "],[-1,11190,"  "],[-1,11211,"  "],[-1,11260,"  "],[-1,11287,"  "],[-1,11292,"  "],[-1,11338,"  "],[-1,11398,"  "],[-1,11419,"  "],[-1,11467,"  "],[-1,11515,"  "],[-1,11541,"  "]],[10941,11563],[10941,11531]]],[1564744728228,["GJX@GJXAIOU",[[-1,10940,"\n"]],[10940,10940],[10939,10939]]],[1564744728378,["GJX@GJXAIOU",[[-1,10939,"\n"]],[10939,10939],[10938,10938]]],[1564744802069,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[1,10410,"n 定义\n"],[-1,10516,"n 定义\n"],[-1,10546,"aBean"],[1,10551,"ls;\n\n"],[1,10931,"工"],[-1,10935,"是"],[-1,10939,"**\n  "],[1,10944,"Demo\n"],[1,10949,"tils"],[-1,10950,"\n  \t"],[1,10980,"直接"],[-1,10983,"  "],[1,11009,".j"],[-1,11012,"  "],[1,11062,"il"],[-1,11065,"  "],[1,11120,"ue"],[-1,11123,"  "],[1,11178,"供对"],[-1,11181,"  "],[1,11197,"er"],[-1,11200,"  "],[1,11244,"er"],[-1,11247,"  "],[1,11269,"性的"],[-1,11275,"  "],[1,11316,"me"],[-1,11319,"  "],[1,11374,"供对"],[-1,11377,"  "],[1,11393,"er"],[-1,11396,"  "],[1,11439,"er"],[-1,11442,"  "],[1,11485,"ri"],[-1,11488,"  "],[1,11509,"的类"],[-1,11512,"  "],[1,11530,"的源数"],[-1,11532," */"]],[445,445],[11532,11532]]],[1564744802069,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[-1,10405,"n 定义\n"],[1,10516,"n 定义\n"],[1,10541,"aBean"],[-1,10541,"ls;\n\n"],[-1,10926,"工"],[1,10931,"是"],[1,10934,"**\n  "],[-1,10934,"Demo\n"],[-1,10944,"tils"],[1,10949,"\n  \t"],[-1,10975,"直接"],[1,10980,"  "],[-1,11004,".j"],[1,11009,"  "],[-1,11057,"il"],[1,11062,"  "],[-1,11115,"ue"],[1,11120,"  "],[-1,11173,"供对"],[1,11178,"  "],[-1,11192,"er"],[1,11197,"  "],[-1,11239,"er"],[1,11244,"  "],[-1,11264,"性的"],[1,11272,"  "],[-1,11311,"me"],[1,11316,"  "],[-1,11369,"供对"],[1,11374,"  "],[-1,11388,"er"],[1,11393,"  "],[-1,11434,"er"],[1,11439,"  "],[-1,11480,"ri"],[1,11485,"  "],[-1,11504,"的类"],[1,11509,"  "],[-1,11525,"的源数"],[1,11530," */"]],[11532,11532],[445,445]]],[1564744786204,["GJX@GJXAIOU",[[-1,10980,"\t"]],[10980,10981],[10980,10980]]],[1564744788946,["GJX@GJXAIOU",[[1,10980,"试过 "]],[10980,10980],[10982,10982]]],[1564744789672,["GJX@GJXAIOU",[[-1,10980,"试过"]],[10982,10982],[10980,10980]]],[1564744792042,["GJX@GJXAIOU",[[1,10980,"使用是"]],[10980,10980],[10983,10983]]],[1564744792940,["GJX@GJXAIOU",[[-1,10982,"是"]],[10983,10983],[10982,10982]]],[1564744794647,["GJX@GJXAIOU",[[1,10982,"时候="]],[10982,10982],[10985,10985]]],[1564744795484,["GJX@GJXAIOU",[[-1,10983,"候="]],[10985,10985],[10983,10983]]],[1564744798713,["GJX@GJXAIOU",[[1,10983,"需要导入："]],[10983,10983],[10988,10988]]],[1564744800214,["GJX@GJXAIOU",[[-1,10988," "]],[10989,10989],[10988,10988]]],[1564744862051,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[1,10410,"n 定义\n"],[-1,10516,"n 定义\n"],[-1,10546,"aBean"],[1,10551,"ls;\n\n"],[1,10931,"工"],[-1,10935,"是"],[-1,10939,"**\n  "],[1,10944,"Demo\n"],[-1,10949," \n  \t"],[1,10954,"tils "],[1,10980,"直接调用\n"],[-1,10988,"用\n  \t"],[1,11016,".j"],[-1,11019,"  "],[1,11069,"il"],[-1,11072,"  "],[1,11127,"ue"],[-1,11130,"  "],[1,11185,"供对"],[-1,11188,"  "],[1,11204,"er"],[-1,11207,"  "],[1,11251,"er"],[-1,11254,"  "],[1,11276,"性的"],[-1,11282,"  "],[1,11323,"me"],[-1,11326,"  "],[1,11381,"供对"],[-1,11384,"  "],[1,11400,"er"],[-1,11403,"  "],[1,11446,"er"],[-1,11449,"  "],[1,11492,"ri"],[-1,11495,"  "],[1,11516,"的类"],[-1,11519,"  "],[1,11537,"的源数"],[-1,11539," */"]],[445,445],[11539,11539]]],[1564744862051,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[-1,10405,"n 定义\n"],[1,10516,"n 定义\n"],[1,10541,"aBean"],[-1,10541,"ls;\n\n"],[-1,10926,"工"],[1,10931,"是"],[1,10934,"**\n  "],[-1,10934,"Demo\n"],[1,10944," \n  \t"],[-1,10944,"tils "],[-1,10975,"直接调用\n"],[1,10988,"用\n  \t"],[-1,11011,".j"],[1,11016,"  "],[-1,11064,"il"],[1,11069,"  "],[-1,11122,"ue"],[1,11127,"  "],[-1,11180,"供对"],[1,11185,"  "],[-1,11199,"er"],[1,11204,"  "],[-1,11246,"er"],[1,11251,"  "],[-1,11271,"性的"],[1,11279,"  "],[-1,11318,"me"],[1,11323,"  "],[-1,11376,"供对"],[1,11381,"  "],[-1,11395,"er"],[1,11400,"  "],[-1,11441,"er"],[1,11446,"  "],[-1,11487,"ri"],[1,11492,"  "],[-1,11511,"的类"],[1,11516,"  "],[-1,11532,"的源数"],[1,11537," */"]],[11539,11539],[445,445]]],[1564744802827,["GJX@GJXAIOU",[[-1,11016,"\t"]],[11016,11017],[11016,11016]]],[1564744803322,["GJX@GJXAIOU",[[-1,11015,"\n"]],[11016,11016],[11015,11015]]],[1564744804983,["GJX@GJXAIOU",[[1,11015,"和"]],[11015,11015],[11016,11016]]],[1564744805033,["GJX@GJXAIOU",[[1,11015," "],[1,11016," "]],[11016,11016],[11017,11017]]],[1564744809171,["GJX@GJXAIOU",[[-1,11049,"，没有这个包无法使用BeanUtils"]],[11049,11068],[11049,11049]]],[1564744814155,["GJX@GJXAIOU",[[-1,11051,"\t"],[-1,11109,"\t"],[-1,11169,"\t"],[-1,11186,"\t"],[-1,11234,"\t"],[-1,11259,"\t"],[-1,11261,"\t"],[-1,11306,"\t"],[-1,11365,"\t"],[-1,11382,"\t"],[-1,11428,"\t"],[-1,11475,"\t"],[-1,11498,"\t"]],[11052,11518],[11051,11505]]],[1564744922052,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[1,10410,"n 定义\n"],[-1,10516,"n 定义\n"],[-1,10546,"aBean"],[1,10551,"ls;\n\n"],[1,10931,"工"],[-1,10935,"是"],[-1,10939,"**\n  "],[1,10944,"Demo\n"],[-1,10949," \n  \t"],[1,10954,"tils "],[1,10980,"直接调用\n"],[-1,10988,"用\n  \t"],[-1,11015," 和 r\n  \t"],[1,11023,"3.jar 和 "],[-1,11049,"Ut"],[1,11051,"日志支持包"],[-1,11053,"  \t"],[1,11108,"ue)"],[-1,11110,"  \t"],[1,11165,"供对"],[-1,11167,"  \t"],[1,11170,"\n"],[1,11183,"er方"],[-1,11185,"  \t"],[1,11229,"er"],[1,11230,"法"],[-1,11231,"  \t"],[1,11253,"性的"],[1,11254,"据"],[-1,11257,"  \t"],[1,11298,"me"],[1,11299,";"],[-1,11300,"  \t"],[1,11355,"供对"],[-1,11357,"  \t"],[1,11360,"\n"],[1,11373,"er方"],[-1,11375,"  \t"],[1,11418,"er方"],[-1,11420,"  \t"],[1,11463,"ri"],[1,11464,")"],[-1,11465,"  \t"],[1,11486,"的类对"],[-1,11488,"  \t"],[1,11506,"的源数"],[-1,11508," */"]],[445,445],[11508,11508]]],[1564744922052,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[-1,10405,"n 定义\n"],[1,10516,"n 定义\n"],[1,10541,"aBean"],[-1,10541,"ls;\n\n"],[-1,10926,"工"],[1,10931,"是"],[1,10934,"**\n  "],[-1,10934,"Demo\n"],[1,10944," \n  \t"],[-1,10944,"tils "],[-1,10975,"直接调用\n"],[1,10988,"用\n  \t"],[1,11010," 和 r\n  \t"],[-1,11010,"3.jar 和 "],[1,11044,"Ut"],[-1,11044,"日志支持包"],[1,11051,"  \t"],[-1,11103,"ue)"],[1,11108,"  \t"],[-1,11160,"供对"],[1,11164,"  \t"],[-1,11164,"\n"],[-1,11178,"er方"],[1,11183,"  \t"],[-1,11224,"er"],[-1,11227,"法"],[1,11229,"  \t"],[-1,11248,"性的"],[-1,11251,"据"],[1,11255,"  \t"],[-1,11293,"me"],[-1,11296,";"],[1,11298,"  \t"],[-1,11350,"供对"],[1,11354,"  \t"],[-1,11354,"\n"],[-1,11368,"er方"],[1,11373,"  \t"],[-1,11413,"er方"],[1,11418,"  \t"],[-1,11458,"ri"],[-1,11461,")"],[1,11463,"  \t"],[-1,11481,"的类对"],[1,11486,"  \t"],[-1,11501,"的源数"],[1,11506," */"]],[11508,11508],[445,445]]],[1564744894236,["GJX@GJXAIOU",[[-1,11165,"\t\t"]],[11165,11167],[11165,11165]]],[1564744894700,["GJX@GJXAIOU",[[-1,11164,"\n"]],[11165,11165],[11164,11164]]],[1564744908751,["GJX@GJXAIOU",[[1,11050,"里面的主要方法："]],[11050,11050],[11058,11058]]],[1564744912036,["GJX@GJXAIOU",[[1,10939,"- "]],[10939,10939],[10941,10941]]],[1564744914293,["GJX@GJXAIOU",[[1,11061,"- "]],[11061,11061],[11063,11063]]],[1564744919431,["GJX@GJXAIOU",[[-1,10396,"#"]],[10396,10397],[10396,10396]]],[1564744982051,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[-1,10397,"#"],[1,10398,"\n"],[1,10409,"n 定义\n"],[-1,10515,"n 定义\n"],[-1,10545,"aBean"],[1,10550,"ls;\n\n"],[1,10930,"工"],[-1,10934,"是"],[1,10938,"Demo\n"],[-1,10940,"**\n  "],[1,10950,"tils"],[-1,10951,"\n  \t"],[1,10981,"直接调用\n"],[-1,10989,"用\n  \t"],[1,11016,"3.jar"],[-1,11019,"r\n  \t"],[-1,11050,"U"],[1,11051,"日志支持包\n"],[-1,11059,"t- \n\n  \t"],[1,11067,"\n- "],[1,11119,"ue)"],[-1,11121,"  \t"],[-1,11175,"  \t\t\t"],[1,11180,"提供对应的"],[1,11191,"er方"],[-1,11193,"  \t"],[1,11237,"er"],[1,11238,"法"],[-1,11239,"  \t"],[1,11261,"性的"],[1,11262,"据"],[-1,11265,"  \t"],[1,11306,"me"],[1,11307,";"],[-1,11308,"  \t"],[1,11363,"供对"],[-1,11365,"  \t"],[1,11368,"\n"],[1,11381,"er方"],[-1,11383,"  \t"],[1,11426,"er方"],[-1,11428,"  \t"],[1,11471,"ri"],[1,11472,")"],[-1,11473,"  \t"],[1,11494,"的类对"],[-1,11496,"  \t"],[1,11514,"的源数"],[-1,11516," */"]],[445,445],[11516,11516]]],[1564744982051,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[1,10392,"#"],[-1,10392,"\n"],[-1,10404,"n 定义\n"],[1,10515,"n 定义\n"],[1,10540,"aBean"],[-1,10540,"ls;\n\n"],[-1,10925,"工"],[1,10930,"是"],[-1,10933,"Demo\n"],[1,10940,"**\n  "],[-1,10945,"tils"],[1,10950,"\n  \t"],[-1,10976,"直接调用\n"],[1,10989,"用\n  \t"],[-1,11011,"3.jar"],[1,11019,"r\n  \t"],[1,11045,"U"],[-1,11045,"日志支持包\n"],[1,11059,"t- \n\n  \t"],[-1,11059,"\n- "],[-1,11114,"ue)"],[1,11119,"  \t"],[1,11170,"  \t\t\t"],[-1,11170,"提供对应的"],[-1,11186,"er方"],[1,11191,"  \t"],[-1,11232,"er"],[-1,11235,"法"],[1,11237,"  \t"],[-1,11256,"性的"],[-1,11259,"据"],[1,11263,"  \t"],[-1,11301,"me"],[-1,11304,";"],[1,11306,"  \t"],[-1,11358,"供对"],[1,11362,"  \t"],[-1,11362,"\n"],[-1,11376,"er方"],[1,11381,"  \t"],[-1,11421,"er方"],[1,11426,"  \t"],[-1,11466,"ri"],[-1,11469,")"],[1,11471,"  \t"],[-1,11489,"的类对"],[1,11494,"  \t"],[-1,11509,"的源数"],[1,11514," */"]],[11516,11516],[445,445]]],[1564744924612,["GJX@GJXAIOU",[[-1,10913,"#"]],[10913,10913],[10912,10912]]],[1564744930981,["GJX@GJXAIOU",[[-1,10931," Demo"],[1,10936,"示例"]],[10931,10931],[10933,10933]]],[1564744935715,["GJX@GJXAIOU",[[1,11116,"- "]],[11116,11116],[11118,11118]]],[1564744937268,["GJX@GJXAIOU",[[-1,11115,"\t"]],[11116,11116],[11115,11115]]],[1564744941416,["GJX@GJXAIOU",[[-1,11188,"\t"],[-1,11234,"\t"]],[11189,11257],[11188,11255]]],[1564745042052,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[-1,10397,"#"],[1,10398,"\n"],[1,10409,"n 定义\n"],[-1,10515,"n 定义\n"],[-1,10545,"aBean"],[1,10550,"ls;\n\n"],[-1,10914,"#"],[1,10915,"\n"],[1,10929,"工"],[1,10931,"方法使用"],[-1,10933," - **\n "],[1,10940,"\n-"],[1,10946,"tils"],[-1,10947,"\n  \t"],[1,10977,"直接调用\n"],[-1,10985,"用\n  \t"],[-1,11012," 和 r\n  \t"],[1,11020,"3.jar 和 "],[-1,11046,"U"],[1,11047,"日志支持包\n"],[-1,11055,"t"],[1,11056,"\n"],[-1,11058,"\n\n  \t"],[1,11115,"ue);\n"],[-1,11117,"\n  \t\t"],[-1,11172,"  \t\t\t"],[1,11177,"提供对应的"],[1,11188,"er方法"],[-1,11189,"  \t\t"],[1,11233,"er方法"],[-1,11234,"  \t\t"],[1,11256,"性的"],[1,11257,"据"],[-1,11260,"  \t"],[1,11301,"me"],[1,11302,";"],[-1,11303,"  \t"],[1,11358,"供对"],[-1,11360,"  \t"],[1,11363,"\n"],[1,11376,"er方"],[-1,11378,"  \t"],[1,11421,"er方"],[-1,11423,"  \t"],[1,11466,"ri"],[1,11467,")"],[-1,11468,"  \t"],[1,11489,"的类对"],[-1,11491,"  \t"],[1,11509,"的源数"],[-1,11511," */"]],[445,445],[11511,11511]]],[1564745042052,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[1,10392,"#"],[-1,10392,"\n"],[-1,10404,"n 定义\n"],[1,10515,"n 定义\n"],[1,10540,"aBean"],[-1,10540,"ls;\n\n"],[1,10909,"#"],[-1,10909,"\n"],[-1,10924,"工"],[-1,10927,"方法使用"],[1,10933," - **\n "],[-1,10933,"\n-"],[-1,10941,"tils"],[1,10946,"\n  \t"],[-1,10972,"直接调用\n"],[1,10985,"用\n  \t"],[1,11007," 和 r\n  \t"],[-1,11007,"3.jar 和 "],[1,11041,"U"],[-1,11041,"日志支持包\n"],[1,11055,"t"],[-1,11055,"\n"],[1,11058,"\n\n  \t"],[-1,11110,"ue);\n"],[1,11117,"\n  \t\t"],[1,11167,"  \t\t\t"],[-1,11167,"提供对应的"],[-1,11183,"er方法"],[1,11188,"  \t\t"],[-1,11228,"er方法"],[1,11233,"  \t\t"],[-1,11251,"性的"],[-1,11254,"据"],[1,11258,"  \t"],[-1,11296,"me"],[-1,11299,";"],[1,11301,"  \t"],[-1,11353,"供对"],[1,11357,"  \t"],[-1,11357,"\n"],[-1,11371,"er方"],[1,11376,"  \t"],[-1,11416,"er方"],[1,11421,"  \t"],[-1,11461,"ri"],[-1,11464,")"],[1,11466,"  \t"],[-1,11484,"的类对"],[1,11489,"  \t"],[-1,11504,"的源数"],[1,11509," */"]],[11511,11511],[445,445]]],[1564745027061,["GJX@GJXAIOU",[[1,11258,"- "]],[11258,11258],[11260,11260]]],[1564745034340,["GJX@GJXAIOU",[[-1,11360,"\t\t"]],[11360,11362],[11360,11360]]],[1564745034828,["GJX@GJXAIOU",[[-1,11359,"\n"]],[11360,11360],[11359,11359]]],[1564745039496,["GJX@GJXAIOU",[[-1,11303,"\t"],[-1,11375,"\t"]],[11304,11419],[11303,11417]]],[1564745102051,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[-1,10397,"#"],[1,10398,"\n"],[1,10409,"n 定义\n"],[-1,10515,"n 定义\n"],[-1,10545,"aBean"],[1,10550,"ls;\n\n"],[-1,10914,"#"],[1,10915,"\n"],[1,10929,"工"],[1,10931,"方法使用"],[-1,10933," "],[1,10934,"\n"],[-1,10936,"**\n  "],[-1,10946," \n  \t"],[1,10951,"tils "],[1,10977,"直接调用\n"],[-1,10985,"用\n  \t"],[1,11012,"3.jar"],[-1,11015,"r\n  \t"],[-1,11046,"U"],[1,11047,"日志支持包\n"],[-1,11055,"t"],[1,11056,"\n"],[-1,11058,"\n\n  \t"],[1,11115,"ue);\n"],[-1,11117,"\n  \t\t"],[-1,11172,"  \t\t\t"],[1,11177,"提供对应的"],[1,11188,"er方法"],[-1,11189,"  \t\t"],[1,11233,"er方法"],[-1,11234,"  \t\t"],[1,11256,"性的"],[1,11257,"据"],[-1,11258,"- "],[-1,11262,"  \t"],[1,11265,"- "],[1,11303,"me);"],[-1,11304,"  \t\t"],[-1,11358,"  \t\t\t"],[1,11363,"提供对应的"],[1,11374,"er方法"],[-1,11375,"  \t\t"],[1,11418,"er方"],[-1,11420,"  \t"],[1,11463,"ri"],[1,11464,")"],[-1,11465,"  \t"],[1,11486,"的类对"],[-1,11488,"  \t"],[1,11506,"的源数"],[-1,11508," */"]],[445,445],[11508,11508]]],[1564745102051,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[1,10392,"#"],[-1,10392,"\n"],[-1,10404,"n 定义\n"],[1,10515,"n 定义\n"],[1,10540,"aBean"],[-1,10540,"ls;\n\n"],[1,10909,"#"],[-1,10909,"\n"],[-1,10924,"工"],[-1,10927,"方法使用"],[1,10933," "],[-1,10933,"\n"],[1,10936,"**\n  "],[1,10941," \n  \t"],[-1,10941,"tils "],[-1,10972,"直接调用\n"],[1,10985,"用\n  \t"],[-1,11007,"3.jar"],[1,11015,"r\n  \t"],[1,11041,"U"],[-1,11041,"日志支持包\n"],[1,11055,"t"],[-1,11055,"\n"],[1,11058,"\n\n  \t"],[-1,11110,"ue);\n"],[1,11117,"\n  \t\t"],[1,11167,"  \t\t\t"],[-1,11167,"提供对应的"],[-1,11183,"er方法"],[1,11188,"  \t\t"],[-1,11228,"er方法"],[1,11233,"  \t\t"],[-1,11251,"性的"],[-1,11254,"据"],[1,11256,"- "],[1,11258,"  \t"],[-1,11258,"- "],[-1,11298,"me);"],[1,11303,"  \t\t"],[1,11353,"  \t\t\t"],[-1,11353,"提供对应的"],[-1,11369,"er方法"],[1,11374,"  \t\t"],[-1,11413,"er方"],[1,11418,"  \t"],[-1,11458,"ri"],[-1,11461,")"],[1,11463,"  \t"],[-1,11481,"的类对"],[1,11486,"  \t"],[-1,11501,"的源数"],[1,11506," */"]],[11508,11508],[445,445]]],[1564745052964,["GJX@GJXAIOU",[[-1,11463,"\t"],[-1,11486,"\t"]],[11464,11505],[11463,11503]]],[1564745222056,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[-1,10397,"#"],[1,10398,"\n"],[1,10409,"n 定义\n"],[-1,10515,"n 定义\n"],[-1,10545,"aBean"],[1,10550,"ls;\n\n"],[-1,10914,"#"],[1,10915,"\n"],[1,10929,"工"],[1,10931,"方法使用"],[-1,10933," - **\n "],[1,10940,"\n-"],[-1,10946," \n  \t"],[1,10951,"tils "],[1,10977,"直接调用\n"],[-1,10985,"用\n  \t"],[1,11012,"3.jar"],[-1,11015,"r\n  \t"],[-1,11046,"U"],[1,11047,"日志支持包\n"],[-1,11055,"t"],[1,11056,"\n"],[-1,11058,"\n\n  \t"],[-1,11115,"- \n  \t\t"],[1,11122,"ue);\n- "],[-1,11172,"  \t\t\t"],[1,11177,"提供对应的"],[1,11188,"er方法"],[-1,11189,"  \t\t"],[1,11233,"er方法"],[-1,11234,"  \t\t"],[1,11256,"性的"],[1,11257,"据"],[-1,11258,"- "],[-1,11262,"  \t"],[1,11265,"- "],[1,11303,"me);"],[-1,11304,"  \t\t"],[-1,11358,"  \t\t\t"],[1,11363,"提供对应的"],[1,11374,"er方法"],[-1,11375,"  \t\t"],[1,11418,"er方"],[-1,11420,"  \t"],[1,11463,"rig)"],[-1,11464,"  \t\t"],[1,11485,"的类对象"],[-1,11486,"  \t\t"],[1,11504,"的源数"],[-1,11506," */"]],[445,445],[11506,11506]]],[1564745222056,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[1,10392,"#"],[-1,10392,"\n"],[-1,10404,"n 定义\n"],[1,10515,"n 定义\n"],[1,10540,"aBean"],[-1,10540,"ls;\n\n"],[1,10909,"#"],[-1,10909,"\n"],[-1,10924,"工"],[-1,10927,"方法使用"],[1,10933," - **\n "],[-1,10933,"\n-"],[1,10941," \n  \t"],[-1,10941,"tils "],[-1,10972,"直接调用\n"],[1,10985,"用\n  \t"],[-1,11007,"3.jar"],[1,11015,"r\n  \t"],[1,11041,"U"],[-1,11041,"日志支持包\n"],[1,11055,"t"],[-1,11055,"\n"],[1,11058,"\n\n  \t"],[1,11110,"- \n  \t\t"],[-1,11110,"ue);\n- "],[1,11167,"  \t\t\t"],[-1,11167,"提供对应的"],[-1,11183,"er方法"],[1,11188,"  \t\t"],[-1,11228,"er方法"],[1,11233,"  \t\t"],[-1,11251,"性的"],[-1,11254,"据"],[1,11256,"- "],[1,11258,"  \t"],[-1,11258,"- "],[-1,11298,"me);"],[1,11303,"  \t\t"],[1,11353,"  \t\t\t"],[-1,11353,"提供对应的"],[-1,11369,"er方法"],[1,11374,"  \t\t"],[-1,11413,"er方"],[1,11418,"  \t"],[-1,11458,"rig)"],[1,11463,"  \t\t"],[-1,11480,"的类对象"],[1,11485,"  \t\t"],[-1,11499,"的源数"],[1,11504," */"]],[11506,11506],[445,445]]],[1564745179037,["GJX@GJXAIOU",[[1,11188,"- "],[1,11233,"- "]],[11117,11255],[11117,11259]]],[1564745180828,["GJX@GJXAIOU",[[1,11115,"  "],[1,11188,"  "],[1,11235,"  "]],[11117,11259],[11119,11265]]],[1564745186413,["GJX@GJXAIOU",[[1,11313,"- "],[1,11384,"- "],[1,11428,"- "],[1,11473,"- "],[1,11495,"- "]],[11313,11513],[11315,11523]]],[1564745190532,["GJX@GJXAIOU",[[1,11313,"  "],[1,11386,"  "]],[11313,11424],[11313,11428]]],[1564745192957,["GJX@GJXAIOU",[[1,11483,"  "],[1,11507,"  "]],[11484,11527],[11486,11531]]],[1564745199141,["GJX@GJXAIOU",[[1,11047,"\n"]],[11047,11047],[11048,11048]]],[1564745199735,["GJX@GJXAIOU",[[1,11048,"- "]],[11048,11048],[11050,11050]]],[1564745203220,["GJX@GJXAIOU",[[1,11059,"  "],[1,11118,"  "],[1,11193,"  "],[1,11244,"  "],[1,11269,"  "],[1,11271,"  "],[1,11316,"  "],[1,11393,"  "],[1,11439,"  "],[1,11488,"  "],[1,11512,"  "]],[11061,11534],[11063,11556]]],[1564745213177,["GJX@GJXAIOU",[[1,11050,"工具类中"]],[11050,11050],[11054,11054]]],[1564745218708,["GJX@GJXAIOU",[[-1,11054,"里面的"]],[11057,11057],[11054,11054]]],[1564745462059,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,10374,"#"],[1,10375,"\n"],[-1,10397,"#"],[1,10398,"\n"],[1,10409,"n 定义\n"],[-1,10515,"n 定义\n"],[-1,10545,"aBean"],[1,10550,"ls;\n\n"],[-1,10914,"#"],[1,10915,"\n"],[1,10929,"工"],[1,10931,"方法使用"],[-1,10933," - **\n "],[1,10940,"\n-"],[-1,10946," \n  \t"],[1,10951,"tils "],[1,10977,"直接调用\n"],[-1,10985,"用\n  \t"],[1,11012,"3.jar"],[-1,11015,"r\n  \t"],[-1,11046,"U"],[1,11047,"日志支持包\n"],[-1,11059,"t"],[1,11060,"\n"],[-1,11064,"\n\n  \t"],[1,11121,"ue);\n"],[-1,11127,"\n  \t\t"],[-1,11182,"  \t\t\t"],[1,11187,"提供对应的"],[1,11198,"er方法\n"],[-1,11204,"\n  \t\t"],[1,11249,"er方法\n"],[-1,11255,"\n  \t\t"],[-1,11278,"  数"],[1,11281,"性的数据"],[-1,11284,"- "],[-1,11290,"\t"],[1,11291,"- "],[1,11329,"me);\n"],[-1,11335,"\n  \t\t"],[-1,11390,"  \t\t\t"],[1,11395,"提供对应的"],[1,11406,"er方法\n"],[-1,11412,"\n  \t\t"],[-1,11456,"  - "],[1,11460,"er方"],[-1,11464,"\t"],[1,11465,"- "],[1,11505,"rig)\n"],[-1,11511,"\n  \t\t"],[1,11533,"的类对象\n"],[-1,11539,"\n  \t\t"],[1,11558,"的源数"],[-1,11560," */"]],[445,445],[11560,11560]]],[1564745462059,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,10369,"#"],[-1,10369,"\n"],[1,10392,"#"],[-1,10392,"\n"],[-1,10404,"n 定义\n"],[1,10515,"n 定义\n"],[1,10540,"aBean"],[-1,10540,"ls;\n\n"],[1,10909,"#"],[-1,10909,"\n"],[-1,10924,"工"],[-1,10927,"方法使用"],[1,10933," - **\n "],[-1,10933,"\n-"],[1,10941," \n  \t"],[-1,10941,"tils "],[-1,10972,"直接调用\n"],[1,10985,"用\n  \t"],[-1,11007,"3.jar"],[1,11015,"r\n  \t"],[1,11041,"U"],[-1,11041,"日志支持包\n"],[1,11059,"t"],[-1,11059,"\n"],[1,11064,"\n\n  \t"],[-1,11116,"ue);\n"],[1,11127,"\n  \t\t"],[1,11177,"  \t\t\t"],[-1,11177,"提供对应的"],[-1,11193,"er方法\n"],[1,11204,"\n  \t\t"],[-1,11244,"er方法\n"],[1,11255,"\n  \t\t"],[1,11273,"  数"],[-1,11273,"性的数据"],[1,11280,"- "],[1,11284,"\t"],[-1,11284,"- "],[-1,11324,"me);\n"],[1,11335,"\n  \t\t"],[1,11385,"  \t\t\t"],[-1,11385,"提供对应的"],[-1,11401,"er方法\n"],[1,11412,"\n  \t\t"],[1,11451,"  - "],[-1,11451,"er方"],[1,11458,"\t"],[-1,11458,"- "],[-1,11500,"rig)\n"],[1,11511,"\n  \t\t"],[-1,11528,"的类对象\n"],[1,11539,"\n  \t\t"],[-1,11553,"的源数"],[1,11558," */"]],[11560,11560],[445,445]]],[1564745442549,["GJX@GJXAIOU",[[-1,7764,"* @author 刘晓磊"]],[7766,7777],[7764,7764]]],[1564745445165,["GJX@GJXAIOU",[[-1,7763," \n *"]],[7763,7767],[7763,7763]]],[1564745445715,["GJX@GJXAIOU",[[-1,7763,"\n"]],[7763,7763],[7762,7762]]],[1564746722077,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,7763,"磊\n *"],[1,7767,"询(查)"],[-1,10356,"#"],[1,10357,"\n"],[-1,10379,"#"],[1,10380,"\n"],[1,10391,"n 定义\n"],[-1,10497,"n 定义\n"],[-1,10527,"aBean"],[1,10532,"ls;\n\n"],[-1,10896,"#"],[1,10897,"\n"],[1,10911,"工"],[1,10913,"方法使用"],[-1,10915," - **\n "],[1,10922,"\n-"],[-1,10928," \n  \t"],[1,10933,"tils "],[1,10959,"直接调用\n"],[-1,10967,"用\n  \t"],[1,10994,"3.jar"],[-1,10997,"r\n  \t"],[-1,11028,"U"],[1,11029,"日志支持包\n"],[-1,11041,"t"],[1,11042,"\n"],[-1,11046,"\n\n  \t"],[1,11103,"ue);\n"],[-1,11109,"\n  \t\t"],[-1,11164,"  \t\t\t"],[1,11169,"提供对应的"],[1,11180,"er方法\n"],[-1,11186,"\n  \t\t"],[1,11231,"er方法\n"],[-1,11237,"\n  \t\t"],[-1,11260,"  数"],[1,11263,"性的数据"],[-1,11266,"- "],[-1,11272,"\t"],[1,11273,"- "],[1,11311,"me);\n"],[-1,11317,"\n  \t\t"],[-1,11372,"  \t\t\t"],[1,11377,"提供对应的"],[1,11388,"er方法\n"],[-1,11394,"\n  \t\t"],[-1,11438,"  - "],[1,11442,"er方"],[-1,11446,"\t"],[1,11447,"- "],[1,11487,"rig)\n"],[-1,11493,"\n  \t\t"],[1,11515,"的类对象\n"],[-1,11521,"\n  \t\t"],[1,11540,"的源数"],[-1,11542," */"]],[445,445],[11542,11542]]],[1564746722077,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,7758,"磊\n *"],[-1,7758,"询(查)"],[1,10351,"#"],[-1,10351,"\n"],[1,10374,"#"],[-1,10374,"\n"],[-1,10386,"n 定义\n"],[1,10497,"n 定义\n"],[1,10522,"aBean"],[-1,10522,"ls;\n\n"],[1,10891,"#"],[-1,10891,"\n"],[-1,10906,"工"],[-1,10909,"方法使用"],[1,10915," - **\n "],[-1,10915,"\n-"],[1,10923," \n  \t"],[-1,10923,"tils "],[-1,10954,"直接调用\n"],[1,10967,"用\n  \t"],[-1,10989,"3.jar"],[1,10997,"r\n  \t"],[1,11023,"U"],[-1,11023,"日志支持包\n"],[1,11041,"t"],[-1,11041,"\n"],[1,11046,"\n\n  \t"],[-1,11098,"ue);\n"],[1,11109,"\n  \t\t"],[1,11159,"  \t\t\t"],[-1,11159,"提供对应的"],[-1,11175,"er方法\n"],[1,11186,"\n  \t\t"],[-1,11226,"er方法\n"],[1,11237,"\n  \t\t"],[1,11255,"  数"],[-1,11255,"性的数据"],[1,11262,"- "],[1,11266,"\t"],[-1,11266,"- "],[-1,11306,"me);\n"],[1,11317,"\n  \t\t"],[1,11367,"  \t\t\t"],[-1,11367,"提供对应的"],[-1,11383,"er方法\n"],[1,11394,"\n  \t\t"],[1,11433,"  - "],[-1,11433,"er方"],[1,11440,"\t"],[-1,11440,"- "],[-1,11482,"rig)\n"],[1,11493,"\n  \t\t"],[-1,11510,"的类对象\n"],[1,11521,"\n  \t\t"],[-1,11535,"的源数"],[1,11540," */"]],[11542,11542],[445,445]]],[1564746719525,["GJX@GJXAIOU",[[-1,7263,"* 这个类定义两个方法： "]],[7263,7276],[7263,7263]]],[1564746782081,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,7263,"个方法："],[1,7267,"增删改查"],[-1,7750,"磊\n *"],[1,7754,"询(查)"],[-1,10343,"#"],[1,10344,"\n"],[-1,10366,"#"],[1,10367,"\n"],[1,10378,"n 定义\n"],[-1,10484,"n 定义\n"],[-1,10514,"aBean"],[1,10519,"ls;\n\n"],[-1,10883,"#"],[1,10884,"\n"],[1,10898,"工"],[1,10900,"方法使用"],[-1,10902," - **\n "],[1,10909,"\n-"],[-1,10915," \n  \t"],[1,10920,"tils "],[1,10946,"直接调用\n"],[-1,10954,"用\n  \t"],[1,10981,"3.jar"],[-1,10984,"r\n  \t"],[-1,11015,"U"],[1,11016,"日志支持包\n"],[-1,11028,"t"],[1,11029,"\n"],[-1,11033,"\n\n  \t"],[1,11090,"ue);\n"],[-1,11096,"\n  \t\t"],[-1,11151,"  \t\t\t"],[1,11156,"提供对应的"],[1,11167,"er方法\n"],[-1,11173,"\n  \t\t"],[1,11218,"er方法\n"],[-1,11224,"\n  \t\t"],[-1,11247,"  数"],[1,11250,"性的数据"],[-1,11253,"- "],[-1,11259,"\t"],[1,11260,"- "],[1,11298,"me);\n"],[-1,11304,"\n  \t\t"],[-1,11359,"  \t\t\t"],[1,11364,"提供对应的"],[1,11375,"er方法\n"],[-1,11381,"\n  \t\t"],[-1,11425,"  - "],[1,11429,"er方"],[-1,11433,"\t"],[1,11434,"- "],[1,11474,"rig)\n"],[-1,11480,"\n  \t\t"],[1,11502,"的类对象\n"],[-1,11508,"\n  \t\t"],[1,11527,"的源数"],[-1,11529," */"]],[445,445],[11529,11529]]],[1564746782081,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,7258,"个方法："],[-1,7258,"增删改查"],[1,7745,"磊\n *"],[-1,7745,"询(查)"],[1,10338,"#"],[-1,10338,"\n"],[1,10361,"#"],[-1,10361,"\n"],[-1,10373,"n 定义\n"],[1,10484,"n 定义\n"],[1,10509,"aBean"],[-1,10509,"ls;\n\n"],[1,10878,"#"],[-1,10878,"\n"],[-1,10893,"工"],[-1,10896,"方法使用"],[1,10902," - **\n "],[-1,10902,"\n-"],[1,10910," \n  \t"],[-1,10910,"tils "],[-1,10941,"直接调用\n"],[1,10954,"用\n  \t"],[-1,10976,"3.jar"],[1,10984,"r\n  \t"],[1,11010,"U"],[-1,11010,"日志支持包\n"],[1,11028,"t"],[-1,11028,"\n"],[1,11033,"\n\n  \t"],[-1,11085,"ue);\n"],[1,11096,"\n  \t\t"],[1,11146,"  \t\t\t"],[-1,11146,"提供对应的"],[-1,11162,"er方法\n"],[1,11173,"\n  \t\t"],[-1,11213,"er方法\n"],[1,11224,"\n  \t\t"],[1,11242,"  数"],[-1,11242,"性的数据"],[1,11249,"- "],[1,11253,"\t"],[-1,11253,"- "],[-1,11293,"me);\n"],[1,11304,"\n  \t\t"],[1,11354,"  \t\t\t"],[-1,11354,"提供对应的"],[-1,11370,"er方法\n"],[1,11381,"\n  \t\t"],[1,11420,"  - "],[-1,11420,"er方"],[1,11427,"\t"],[-1,11427,"- "],[-1,11469,"rig)\n"],[1,11480,"\n  \t\t"],[-1,11497,"的类对象\n"],[1,11508,"\n  \t\t"],[-1,11522,"的源数"],[1,11527," */"]],[11529,11529],[445,445]]],[1564746725539,["GJX@GJXAIOU",[[1,7264,"===="]],[7264,7264],[7268,7268]]],[1564746727723,["GJX@GJXAIOU",[[1,7264,"\n"]],[7264,7264],[7265,7265]]],[1564746729766,["GJX@GJXAIOU",[[1,7267,"ji"]],[7267,7267],[7269,7269]]],[1564746730634,["GJX@GJXAIOU",[[-1,7267,"ji"]],[7269,7269],[7267,7267]]],[1564746735937,["GJX@GJXAIOU",[[1,7267,"即将上面的D奥"]],[7267,7267],[7274,7274]]],[1564746735988,["GJX@GJXAIOU",[[1,7272," "]],[7274,7274],[7275,7275]]],[1564746737774,["GJX@GJXAIOU",[[-1,7274,"奥"]],[7275,7275],[7274,7274]]],[1564746739225,["GJX@GJXAIOU",[[1,7274,"dao"]],[7274,7274],[7277,7277]]],[1564746741827,["GJX@GJXAIOU",[[-1,7274,"d"]],[7275,7275],[7274,7274]]],[1564746743694,["GJX@GJXAIOU",[[1,7276,"c"]],[7276,7276],[7277,7277]]],[1564746744244,["GJX@GJXAIOU",[[-1,7276,"c"]],[7277,7277],[7276,7276]]],[1564746745337,["GJX@GJXAIOU",[[1,7276,"层"]],[7276,7276],[7277,7277]]],[1564746745388,["GJX@GJXAIOU",[[1,7276," "]],[7277,7277],[7278,7278]]],[1564746754374,["GJX@GJXAIOU",[[1,7278,"再次的精简，之用"]],[7278,7278],[7286,7286]]],[1564746755364,["GJX@GJXAIOU",[[-1,7284,"之用"]],[7286,7286],[7284,7284]]],[1564746757535,["GJX@GJXAIOU",[[1,7284,"之用"]],[7284,7284],[7286,7286]]],[1564746759659,["GJX@GJXAIOU",[[-1,7284,"之用"]],[7286,7286],[7284,7284]]],[1564746771566,["GJX@GJXAIOU",[[1,7284,"只用两个方法代替原来的四个方法；"]],[7284,7284],[7300,7300]]],[1564748342130,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,7263,"个"],[1,7264,"增删改查 \n"],[-1,7302,"方法： "],[-1,7788,"磊\n *"],[1,7792,"询(查)"],[-1,10381,"#"],[1,10382,"\n"],[-1,10404,"#"],[1,10405,"\n"],[1,10416,"n 定义\n"],[-1,10522,"n 定义\n"],[-1,10552,"aBean"],[1,10557,"ls;\n\n"],[-1,10921,"#"],[1,10922,"\n"],[1,10936,"工"],[1,10938,"方法使用"],[-1,10940," - **\n "],[1,10947,"\n-"],[-1,10953," \n  \t"],[1,10958,"tils "],[1,10984,"直接调用\n"],[-1,10992,"用\n  \t"],[1,11019,"3.jar"],[-1,11022,"r\n  \t"],[-1,11053,"U"],[1,11054,"日志支持包\n"],[-1,11066,"t"],[1,11067,"\n"],[-1,11071,"\n\n  \t"],[1,11128,"ue);\n"],[-1,11134,"\n  \t\t"],[-1,11189,"  \t\t\t"],[1,11194,"提供对应的"],[1,11205,"er方法\n"],[-1,11211,"\n  \t\t"],[1,11256,"er方法\n"],[-1,11262,"\n  \t\t"],[-1,11285,"  数"],[1,11288,"性的数据"],[-1,11291,"- "],[-1,11297,"\t"],[1,11298,"- "],[1,11336,"me);\n"],[-1,11342,"\n  \t\t"],[-1,11397,"  \t\t\t"],[1,11402,"提供对应的"],[1,11413,"er方法\n"],[-1,11419,"\n  \t\t"],[-1,11463,"  - "],[1,11467,"er方"],[-1,11471,"\t"],[1,11472,"- "],[1,11512,"rig)\n"],[-1,11518,"\n  \t\t"],[1,11540,"的类对象\n"],[-1,11546,"\n  \t\t"],[1,11565,"的源数"],[-1,11567," */"]],[445,445],[11567,11567]]],[1564748342130,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,7258,"个"],[-1,7258,"增删改查 \n"],[1,7302,"方法： "],[1,7784,"磊\n *"],[-1,7784,"询(查)"],[1,10377,"#"],[-1,10377,"\n"],[1,10400,"#"],[-1,10400,"\n"],[-1,10412,"n 定义\n"],[1,10523,"n 定义\n"],[1,10548,"aBean"],[-1,10548,"ls;\n\n"],[1,10917,"#"],[-1,10917,"\n"],[-1,10932,"工"],[-1,10935,"方法使用"],[1,10941," - **\n "],[-1,10941,"\n-"],[1,10949," \n  \t"],[-1,10949,"tils "],[-1,10980,"直接调用\n"],[1,10993,"用\n  \t"],[-1,11015,"3.jar"],[1,11023,"r\n  \t"],[1,11049,"U"],[-1,11049,"日志支持包\n"],[1,11067,"t"],[-1,11067,"\n"],[1,11072,"\n\n  \t"],[-1,11124,"ue);\n"],[1,11135,"\n  \t\t"],[1,11185,"  \t\t\t"],[-1,11185,"提供对应的"],[-1,11201,"er方法\n"],[1,11212,"\n  \t\t"],[-1,11252,"er方法\n"],[1,11263,"\n  \t\t"],[1,11281,"  数"],[-1,11281,"性的数据"],[1,11288,"- "],[1,11292,"\t"],[-1,11292,"- "],[-1,11332,"me);\n"],[1,11343,"\n  \t\t"],[1,11393,"  \t\t\t"],[-1,11393,"提供对应的"],[-1,11409,"er方法\n"],[1,11420,"\n  \t\t"],[1,11459,"  - "],[-1,11459,"er方"],[1,11466,"\t"],[-1,11466,"- "],[-1,11508,"rig)\n"],[1,11519,"\n  \t\t"],[-1,11536,"的类对象\n"],[1,11547,"\n  \t\t"],[-1,11561,"的源数"],[1,11566," */"]],[11567,11567],[445,445]]],[1564748335234,["GJX@GJXAIOU",[[-1,7344,"package utils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.lang.model.type.PrimitiveType;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\n\n/**\n * 通用的DAO层，主要负责数据库的增删改查\n * 这个类定义两个方法：\n * \t1. 数据更新(增，删，改)\n *  2. 数据查询(查)\n */\n\npublic class BaseDao {\n\t//初始化参数\n\tprivate Connection conn;\n\tprivate PreparedStatement pstmt;\n\tprivate ResultSet rs;\n\t\n\t/**\n\t * 主要针对增，删，改的通用方法\n\t * @param sql 要执行的SQL语句(insert, delete, updata)\n\t * @param paramsValue 参数数组，用来处理SQL语句中的占位符参数，如果没有参数，请传入null\n\t */\n\tpublic void update(String sql, Object[] paramsValue) {\n\t\ttry {\n\t\t\t//1. 数据库连接\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t//2. 获取PreparedStatement\n\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t//3. 得到参数元数据个数\n\t\t\tint count = pstmt.getParameterMetaData().getParameterCount();\n\t\t\t//4. 利用参数元数据给SQL语句的占位符需要的参数赋值\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\t\t//循环结束，就是可以给SQL语句完整赋值\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//5. 执行\n\t\t\tpstmt.executeUpdate();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt);\n\t\t}\n\t}\n\t\n\n\t/**\n\t * 查询的通用方法（带有泛型和反射）\n\t * @param sql 查询需要的SQL语句\n\t * @param paramsValue 查询需要参数，如果没有参数，设置为null\n\t * @param cls List集合中保存的数据类型\n\t * @return List集合，返回一个带有指定数据类型List集合\n\t */\n\tpublic <T> List<T> query(String sql, Object[] paramsValue, Class<T> cls) {\n\t\t\n\t\ttry {\n\t\t\t//1.要返回的数据集合\n\t\t\tList<T> list = new ArrayList<T>();\n\t\t\t\n\t\t\t//2.确定List集合中要保存的对象\n\t\t\tT t = null;\n\t\t\t\n\t\t\t//3. 连接数据库\n\t\t\tconn = JDBCUtil.getConnection();\n\t\t\t\n\t\t\t\tpstmt = conn.prepareStatement(sql);\n\t\t\t\n\t\t\t\n\t\t\t//4. 给SQL语句的占位符赋值参数\n\t\t\tif (paramsValue != null && paramsValue.length > 0) {\n\t\t\t\tfor (int i = 0; i < pstmt.getParameterMetaData().getParameterCount(); i++) {\n\t\t\t\t\tpstmt.setObject(i + 1, paramsValue[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//5. 执行查询操作，返回ResultSet\n\t\t\trs = pstmt.executeQuery();\n\t\t\t\n\t\t\t//6. 获取结果集元数据\n\t\t\tResultSetMetaData rsMetaData = rs.getMetaData();\n\t\t\t//数据库列的数量\n\t\t\tint columnCount = rsMetaData.getColumnCount(); \n\t\t\t\n\t\t\t//7. 遍历ResultSet数据集\n\t\t\twhile (rs.next()) {\n\t\t\t\t//创建要保存的对象\n\t\t\t\tt = cls.newInstance();\n\t\t\t\t\n\t\t\t\t//8. 遍历数据行的每一列，得到每一列的名字，在获取到数据，保存到T对象中\n\t\t\t\tfor (int i = 0; i < columnCount; i++) {\n\t\t\t\t\t//获取每一列的名字\n\t\t\t\t\tString columnName = rsMetaData.getColumnName(i + 1);\n\t\t\t\t\t//获取每一列的数据\n\t\t\t\t\tObject value = rs.getObject(columnName);\n\t\t\t\t\t\n\t\t\t\t\t//利用BeanUtils给T对象赋值\n\t\t\t\t\tBeanUtils.setProperty(t, columnName, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//把创建好的T对象，放入到List集合中\n\t\t\t\tlist.add(t);\n\t\t\t}\n\t\t\treturn list;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InstantiationException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalAccessException | InvocationTargetException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, pstmt, rs);\n\t\t}\n\t\t\n\t\t\n\t\treturn null;\n\t}\n}\n\n\n"]],[7344,10371],[7344,7344]]],[1564748402134,[null,[[-1,445,"　　"],[1,499,"。\n"],[-1,554,"数"],[1,555,"\n"],[-1,7238,"```\n\n"],[-1,7263,"个"],[1,7264,"增删改查 \n"],[-1,7302,"方法： "],[-1,7344,"}\n\n"],[1,7347,"ava"],[-1,7354,"#"],[1,7355,"\n"],[-1,7377,"#"],[1,7378,"\n"],[1,7389,"n 定义\n"],[-1,7495,"n 定义\n"],[-1,7525,"aBean"],[1,7530,"ls;\n\n"],[-1,7894,"#"],[1,7895,"\n"],[1,7909,"工"],[1,7911,"方法使用"],[-1,7913," - **\n "],[1,7920,"\n-"],[-1,7926," \n  \t"],[1,7931,"tils "],[1,7957,"直接调用\n"],[-1,7965,"用\n  \t"],[1,7992,"3.jar"],[-1,7995,"r\n  \t"],[-1,8026,"U"],[1,8027,"日志支持包\n"],[-1,8039,"t"],[1,8040,"\n"],[-1,8044,"\n\n  \t"],[1,8101,"ue);\n"],[-1,8107,"\n  \t\t"],[-1,8162,"  \t\t\t"],[1,8167,"提供对应的"],[1,8178,"er方法\n"],[-1,8184,"\n  \t\t"],[1,8229,"er方法\n"],[-1,8235,"\n  \t\t"],[-1,8258,"  数"],[1,8261,"性的数据"],[-1,8264,"- "],[-1,8270,"\t"],[1,8271,"- "],[1,8309,"me);\n"],[-1,8315,"\n  \t\t"],[-1,8370,"  \t\t\t"],[1,8375,"提供对应的"],[1,8386,"er方法\n"],[-1,8392,"\n  \t\t"],[-1,8436,"  - "],[1,8440,"er方"],[-1,8444,"\t"],[1,8445,"- "],[1,8485,"rig)\n"],[-1,8491,"\n  \t\t"],[1,8513,"的类对象\n"],[-1,8519,"\n  \t\t"],[1,8538,"的源数"],[-1,8540," */"]],[445,445],[8540,8540]]],[1564748402134,[null,[[1,445,"　　"],[-1,497,"。\n"],[1,554,"数"],[-1,554,"\n"],[1,7238,"```\n\n"],[1,7258,"个"],[-1,7258,"增删改查 \n"],[1,7302,"方法： "],[1,7340,"}\n\n"],[-1,7340,"ava"],[1,7350,"#"],[-1,7350,"\n"],[1,7373,"#"],[-1,7373,"\n"],[-1,7385,"n 定义\n"],[1,7496,"n 定义\n"],[1,7521,"aBean"],[-1,7521,"ls;\n\n"],[1,7890,"#"],[-1,7890,"\n"],[-1,7905,"工"],[-1,7908,"方法使用"],[1,7914," - **\n "],[-1,7914,"\n-"],[1,7922," \n  \t"],[-1,7922,"tils "],[-1,7953,"直接调用\n"],[1,7966,"用\n  \t"],[-1,7988,"3.jar"],[1,7996,"r\n  \t"],[1,8022,"U"],[-1,8022,"日志支持包\n"],[1,8040,"t"],[-1,8040,"\n"],[1,8045,"\n\n  \t"],[-1,8097,"ue);\n"],[1,8108,"\n  \t\t"],[1,8158,"  \t\t\t"],[-1,8158,"提供对应的"],[-1,8174,"er方法\n"],[1,8185,"\n  \t\t"],[-1,8225,"er方法\n"],[1,8236,"\n  \t\t"],[1,8254,"  数"],[-1,8254,"性的数据"],[1,8261,"- "],[1,8265,"\t"],[-1,8265,"- "],[-1,8305,"me);\n"],[1,8316,"\n  \t\t"],[1,8366,"  \t\t\t"],[-1,8366,"提供对应的"],[-1,8382,"er方法\n"],[1,8393,"\n  \t\t"],[1,8432,"  - "],[-1,8432,"er方"],[1,8439,"\t"],[-1,8439,"- "],[-1,8481,"rig)\n"],[1,8492,"\n  \t\t"],[-1,8509,"的类对象\n"],[1,8520,"\n  \t\t"],[-1,8534,"的源数"],[1,8539," */"]],[8540,8540],[445,445]]],[1564748349956,["GJX@GJXAIOU",[[1,7344,"package metadata;\n\nimport org.apache.commons.beanutils.BeanUtils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**提供增删改查数据库的通用Dao层\n * @author GJXAIOU\n * @create 2019-08-02-19:31\n */\npublic class BaseDao {\n\n    /**\n     * 增删改的通用方法\n     * @param sql 要执行的SQL语句，可以是：insert、delete、update\n     * @param paramValue 参数数组，用来填充SQL语句中的占位符参数，若无参数，请传入null\n     */\n    public void updateCurrent(String sql, Object[] paramValue){\n        // 1.连接数据库\n        Connection connection = JdbcUtil.getConnection();\n\n        // 2.获取PreparedStatement\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 3.得到SQL语句中参数元数据个数（即占位符？的个数）\n            int parameterCount = preparedStatement.getParameterMetaData().getParameterCount();\n\n            // 4.利用参数元数据给SQL语句的占位符需要的参数赋值\n            if (paramValue != null && paramValue.length > 0) {\n                // 通过循环给SQL语句完整赋值\n                for (int i = 0; i < parameterCount; i++) {\n                    // 因为参数（占位符）计数是从1开始，因此需要+1\n                    preparedStatement.setObject(i + 1, paramValue[i]);\n                }\n            }\n\n            // 5.执行\n            preparedStatement.executeUpdate();\n            } catch (SQLException e) {\n            e.printStackTrace();\n        }finally {\n            JdbcUtil.closeConnection(connection, preparedStatement);\n        }\n    }\n\n    /**\n     * 查询的通用方法（使用了泛型和反射）\n     * @param sql 查询需要的SQL语句\n     * @param paramValue 查询需要的参数，若没有这设置为null\n     * @param tClass list集合中保存的数据类型\n     * @param <T> list集合，返回一个带有指定数据类型的list集合\n     * @return\n     */\n    public <T> List<T> inquiryCurrent(String sql, Object[] paramValue, Class<T> tClass){\n        // 1.要返回的数据集合\n        List<T> list = new ArrayList<>();\n\n        // 2.确定list集合中要保存的对象\n        T t = null;\n\n        // 3.连接数据库\n        Connection connection = JdbcUtil.getConnection();\n\n        // 4.获取到PreparedStatement\n        PreparedStatement preparedStatement = null;\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n\n            // 5.得到SQL语句中参数元数据个数（即占位符？的个数）\n            int parameterCount = preparedStatement.getParameterMetaData().getParameterCount();\n\n            // 6.利用参数元数据给SQL语句的占位符需要的参数赋值\n            if (paramValue != null && paramValue.length > 0) {\n                for (int i = 0; i < parameterCount; i++) {\n                    preparedStatement.setObject(i + 1, paramValue[i]);\n                }\n            }\n\n            // 7.执行查询操作，返回ResultSet\n            ResultSet set = preparedStatement.executeQuery();\n\n            // 8.获取结果集元数据\n            ResultSetMetaData metaDataResultSet = set.getMetaData();\n            // 获取数据库列的数量\n            int columnCount = metaDataResultSet.getColumnCount();\n\n            // 9.遍历ResultSet数据集\n            while (set.next()){\n                // 创建要保存的对象\n                t = tClass.newInstance();\n\n                    // 10.遍历数据行的每一列，得到每一列的名字，再获取到数据，保存到T对象中\n                    for (int i = 0; i < columnCount; i++) {\n                        // 首先获取每一列的名字\n                        String columnName = metaDataResultSet.getColumnName(i + 1);\n                        // 获取每一列的数据\n                        Object value = set.getObject(columnName);\n                        // 利用Beanutils给T对象赋值\n                        BeanUtils.setProperty(t, columnName, value);\n                    }\n                // 将创建好的T对象，放入list对象中\n                list.add(t);\n                }\n            } catch (IllegalAccessException ex) {\n            ex.printStackTrace();\n        } catch (InstantiationException ex) {\n            ex.printStackTrace();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n        } catch (InvocationTargetException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n}\n"]],[7344,7344],[11224,11224]]],[1564748397714,["GJX@GJXAIOU",[[1,21,"\n"]],[20,20],[21,21]]],[1564748399443,["GJX@GJXAIOU",[[1,21,"## "]],[21,21],[24,24]]],[1564748462134,[null,[[-1,449,"　　"],[1,503,"。\n"],[-1,558,"数"],[1,559,"\n"],[-1,7242,"```\n\n"],[-1,7267,"个"],[1,7268,"增删改查 \n"],[-1,7306,"方法： "],[-1,7348,""],[1,7348,"ava\n"],[-1,11228,"}\n\n\n"],[-1,11238,"#"],[1,11239,"\n"],[1,11260,"\n"],[-1,11264,"#"],[1,11273,"n 定义\n"],[-1,11379,"n 定义\n"],[-1,11409,"aBean"],[1,11414,"ls;\n\n"],[-1,11778,"#"],[1,11779,"\n"],[1,11793,"工"],[1,11795,"方法使用"],[-1,11797," - **\n "],[1,11804,"\n-"],[-1,11810," \n  \t"],[1,11815,"tils "],[1,11841,"直接调用\n"],[-1,11849,"用\n  \t"],[1,11876,"3.jar"],[-1,11879,"r\n  \t"],[-1,11910,"U"],[1,11911,"日志支持包\n"],[-1,11923,"t"],[1,11924,"\n"],[-1,11928,"\n\n  \t"],[1,11985,"ue);\n"],[-1,11991,"\n  \t\t"],[-1,12046,"  \t\t\t"],[1,12051,"提供对应的"],[1,12062,"er方法\n"],[-1,12068,"\n  \t\t"],[1,12113,"er方法\n"],[-1,12119,"\n  \t\t"],[-1,12142,"  数"],[1,12145,"性的数据"],[-1,12148,"- "],[-1,12154,"\t"],[1,12155,"- "],[1,12193,"me);\n"],[-1,12199,"\n  \t\t"],[-1,12254,"  \t\t\t"],[1,12259,"提供对应的"],[1,12270,"er方法\n"],[-1,12276,"\n  \t\t"],[-1,12320,"  - "],[1,12324,"er方"],[-1,12328,"\t"],[1,12329,"- "],[1,12369,"rig)\n"],[-1,12375,"\n  \t\t"],[1,12397,"的类对象\n"],[-1,12403,"\n  \t\t"],[1,12422,"的源数"],[-1,12424," */"]],[449,449],[12424,12424]]],[1564748462134,[null,[[1,449,"　　"],[-1,501,"。\n"],[1,558,"数"],[-1,558,"\n"],[1,7242,"```\n\n"],[1,7262,"个"],[-1,7262,"增删改查 \n"],[1,7306,"方法： "],[1,7344,""],[-1,7344,"ava\n"],[1,11228,"}\n\n\n"],[1,11234,"#"],[-1,11234,"\n"],[-1,11256,"\n"],[1,11261,"#"],[-1,11269,"n 定义\n"],[1,11380,"n 定义\n"],[1,11405,"aBean"],[-1,11405,"ls;\n\n"],[1,11774,"#"],[-1,11774,"\n"],[-1,11789,"工"],[-1,11792,"方法使用"],[1,11798," - **\n "],[-1,11798,"\n-"],[1,11806," \n  \t"],[-1,11806,"tils "],[-1,11837,"直接调用\n"],[1,11850,"用\n  \t"],[-1,11872,"3.jar"],[1,11880,"r\n  \t"],[1,11906,"U"],[-1,11906,"日志支持包\n"],[1,11924,"t"],[-1,11924,"\n"],[1,11929,"\n\n  \t"],[-1,11981,"ue);\n"],[1,11992,"\n  \t\t"],[1,12042,"  \t\t\t"],[-1,12042,"提供对应的"],[-1,12058,"er方法\n"],[1,12069,"\n  \t\t"],[-1,12109,"er方法\n"],[1,12120,"\n  \t\t"],[1,12138,"  数"],[-1,12138,"性的数据"],[1,12145,"- "],[1,12149,"\t"],[-1,12149,"- "],[-1,12189,"me);\n"],[1,12200,"\n  \t\t"],[1,12250,"  \t\t\t"],[-1,12250,"提供对应的"],[-1,12266,"er方法\n"],[1,12277,"\n  \t\t"],[1,12316,"  - "],[-1,12316,"er方"],[1,12323,"\t"],[-1,12323,"- "],[-1,12365,"rig)\n"],[1,12376,"\n  \t\t"],[-1,12393,"的类对象\n"],[1,12404,"\n  \t\t"],[-1,12418,"的源数"],[1,12423," */"]],[12424,12424],[449,449]]],[1564748405056,["GJX@GJXAIOU",[[1,24,"数据可"]],[24,24],[27,27]]],[1564748407690,["GJX@GJXAIOU",[[-1,24,"数据可"]],[27,27],[24,24]]],[1564748412157,["GJX@GJXAIOU",[[1,24,"数据库元数据"]],[24,24],[30,30]]],[1564748422170,["GJX@GJXAIOU",[[-1,7250,"#"]],[7251,7251],[7250,7250]]],[1564748428525,["GJX@GJXAIOU",[[1,7248,"\n"]],[7247,7247],[7248,7248]]],[1564748429561,["GJX@GJXAIOU",[[1,7248,"----"]],[7248,7248],[7252,7252]]],[1564748430508,["GJX@GJXAIOU",[[1,7253,"\n"]],[7252,7252],[7253,7253]]],[1564748439060,["GJX@GJXAIOU",[[1,24,"一、"]],[24,24],[26,26]]],[1564748450666,["GJX@GJXAIOU",[[-1,512,"- "]],[512,514],[512,512]]],[1564748455495,["GJX@GJXAIOU",[[1,512,"### （）"]],[512,512],[518,518]]],[1564748456845,["GJX@GJXAIOU",[[1,517,"一"]],[517,517],[518,518]]],[1564748461013,["GJX@GJXAIOU",[[1,20,"@"]],[20,20],[21,21]]],[1564748522133,[null,[[-1,458,"　　"],[1,512,"。\n"],[-1,572,"数"],[1,573,"\n"],[-1,7262,"``\n\n#"],[-1,7286,"个"],[1,7287,"增删改查 \n"],[-1,7325,"方法： "],[-1,7367,""],[1,7367,"ava\n"],[-1,11247,"}\n\n\n"],[-1,11257,"#"],[1,11258,"\n"],[1,11279,"\n"],[-1,11283,"#"],[1,11292,"n 定义\n"],[-1,11398,"n 定义\n"],[-1,11428,"aBean"],[1,11433,"ls;\n\n"],[-1,11797,"#"],[1,11798,"\n"],[1,11812,"工"],[1,11814,"方法使用"],[-1,11816," - **\n "],[1,11823,"\n-"],[-1,11829," \n  \t"],[1,11834,"tils "],[1,11860,"直接调用\n"],[-1,11868,"用\n  \t"],[1,11895,"3.jar"],[-1,11898,"r\n  \t"],[-1,11929,"U"],[1,11930,"日志支持包\n"],[-1,11942,"t"],[1,11943,"\n"],[-1,11947,"\n\n  \t"],[1,12004,"ue);\n"],[-1,12010,"\n  \t\t"],[-1,12065,"  \t\t\t"],[1,12070,"提供对应的"],[1,12081,"er方法\n"],[-1,12087,"\n  \t\t"],[1,12132,"er方法\n"],[-1,12138,"\n  \t\t"],[-1,12161,"  数"],[1,12164,"性的数据"],[-1,12167,"- "],[-1,12173,"\t"],[1,12174,"- "],[1,12212,"me);\n"],[-1,12218,"\n  \t\t"],[-1,12273,"  \t\t\t"],[1,12278,"提供对应的"],[1,12289,"er方法\n"],[-1,12295,"\n  \t\t"],[-1,12339,"  - "],[1,12343,"er方"],[-1,12347,"\t"],[1,12348,"- "],[1,12388,"rig)\n"],[-1,12394,"\n  \t\t"],[1,12416,"的类对象\n"],[-1,12422,"\n  \t\t"],[1,12441,"的源数"],[-1,12443," */"]],[458,458],[12443,12443]]],[1564748522133,[null,[[1,458,"　　"],[-1,510,"。\n"],[1,572,"数"],[-1,572,"\n"],[1,7262,"``\n\n#"],[1,7281,"个"],[-1,7281,"增删改查 \n"],[1,7325,"方法： "],[1,7363,""],[-1,7363,"ava\n"],[1,11247,"}\n\n\n"],[1,11253,"#"],[-1,11253,"\n"],[-1,11275,"\n"],[1,11280,"#"],[-1,11288,"n 定义\n"],[1,11399,"n 定义\n"],[1,11424,"aBean"],[-1,11424,"ls;\n\n"],[1,11793,"#"],[-1,11793,"\n"],[-1,11808,"工"],[-1,11811,"方法使用"],[1,11817," - **\n "],[-1,11817,"\n-"],[1,11825," \n  \t"],[-1,11825,"tils "],[-1,11856,"直接调用\n"],[1,11869,"用\n  \t"],[-1,11891,"3.jar"],[1,11899,"r\n  \t"],[1,11925,"U"],[-1,11925,"日志支持包\n"],[1,11943,"t"],[-1,11943,"\n"],[1,11948,"\n\n  \t"],[-1,12000,"ue);\n"],[1,12011,"\n  \t\t"],[1,12061,"  \t\t\t"],[-1,12061,"提供对应的"],[-1,12077,"er方法\n"],[1,12088,"\n  \t\t"],[-1,12128,"er方法\n"],[1,12139,"\n  \t\t"],[1,12157,"  数"],[-1,12157,"性的数据"],[1,12164,"- "],[1,12168,"\t"],[-1,12168,"- "],[-1,12208,"me);\n"],[1,12219,"\n  \t\t"],[1,12269,"  \t\t\t"],[-1,12269,"提供对应的"],[-1,12285,"er方法\n"],[1,12296,"\n  \t\t"],[1,12335,"  - "],[-1,12335,"er方"],[1,12342,"\t"],[-1,12342,"- "],[-1,12384,"rig)\n"],[1,12395,"\n  \t\t"],[-1,12412,"的类对象\n"],[1,12423,"\n  \t\t"],[-1,12437,"的源数"],[1,12442," */"]],[12443,12443],[458,458]]],[1564748462976,["GJX@GJXAIOU",[[1,21,"toc"]],[21,21],[24,24]]],[1564748463232,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1564748472466,["GJX@GJXAIOU",[[-1,2527,"-"]],[2527,2528],[2527,2527]]],[1564748473573,["GJX@GJXAIOU",[[1,2527,"### "]],[2527,2527],[2602,2602]]],[1564748484442,["GJX@GJXAIOU",[[1,2532,"()"]],[2532,2532],[2534,2534]]],[1564748485813,["GJX@GJXAIOU",[[1,2533,"er"]],[2533,2533],[2535,2535]]],[1564748487031,["GJX@GJXAIOU",[[-1,2533,"er"]],[2535,2535],[2533,2533]]],[1564748487689,["GJX@GJXAIOU",[[1,2533,"er "]],[2533,2533],[2536,2536]]],[1564748489029,["GJX@GJXAIOU",[[-1,2534,"r "]],[2536,2536],[2534,2534]]],[1564748491749,["GJX@GJXAIOU",[[1,2534,"二"]],[2534,2534],[2535,2535]]],[1564748491799,["GJX@GJXAIOU",[[1,2534," "]],[2535,2535],[2536,2536]]],[1564748494034,["GJX@GJXAIOU",[[-1,2533,"e "]],[2535,2535],[2533,2533]]],[1564748582133,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7272,"``\n\n#"],[-1,7296,"个"],[1,7297,"增删改查 \n"],[-1,7335,"方法： "],[-1,7377,""],[1,7377,"ava\n"],[-1,11257,"}\n\n\n"],[-1,11267,"#"],[1,11268,"\n"],[1,11289,"\n"],[-1,11293,"#"],[1,11302,"n 定义\n"],[-1,11408,"n 定义\n"],[-1,11438,"aBean"],[1,11443,"ls;\n\n"],[-1,11807,"#"],[1,11808,"\n"],[1,11822,"工"],[1,11824,"方法使用"],[-1,11826," - **\n "],[1,11833,"\n-"],[-1,11839," \n  \t"],[1,11844,"tils "],[1,11870,"直接调用\n"],[-1,11878,"用\n  \t"],[1,11905,"3.jar"],[-1,11908,"r\n  \t"],[-1,11939,"U"],[1,11940,"日志支持包\n"],[-1,11952,"t"],[1,11953,"\n"],[-1,11957,"\n\n  \t"],[1,12014,"ue);\n"],[-1,12020,"\n  \t\t"],[-1,12075,"  \t\t\t"],[1,12080,"提供对应的"],[1,12091,"er方法\n"],[-1,12097,"\n  \t\t"],[1,12142,"er方法\n"],[-1,12148,"\n  \t\t"],[-1,12171,"  数"],[1,12174,"性的数据"],[-1,12177,"- "],[-1,12183,"\t"],[1,12184,"- "],[1,12222,"me);\n"],[-1,12228,"\n  \t\t"],[-1,12283,"  \t\t\t"],[1,12288,"提供对应的"],[1,12299,"er方法\n"],[-1,12305,"\n  \t\t"],[-1,12349,"  - "],[1,12353,"er方"],[-1,12357,"\t"],[1,12358,"- "],[1,12398,"rig)\n"],[-1,12404,"\n  \t\t"],[1,12426,"的类对象\n"],[-1,12432,"\n  \t\t"],[1,12451,"的源数"],[-1,12453," */"]],[462,462],[12453,12453]]],[1564748582133,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7272,"``\n\n#"],[1,7291,"个"],[-1,7291,"增删改查 \n"],[1,7335,"方法： "],[1,7373,""],[-1,7373,"ava\n"],[1,11257,"}\n\n\n"],[1,11263,"#"],[-1,11263,"\n"],[-1,11285,"\n"],[1,11290,"#"],[-1,11298,"n 定义\n"],[1,11409,"n 定义\n"],[1,11434,"aBean"],[-1,11434,"ls;\n\n"],[1,11803,"#"],[-1,11803,"\n"],[-1,11818,"工"],[-1,11821,"方法使用"],[1,11827," - **\n "],[-1,11827,"\n-"],[1,11835," \n  \t"],[-1,11835,"tils "],[-1,11866,"直接调用\n"],[1,11879,"用\n  \t"],[-1,11901,"3.jar"],[1,11909,"r\n  \t"],[1,11935,"U"],[-1,11935,"日志支持包\n"],[1,11953,"t"],[-1,11953,"\n"],[1,11958,"\n\n  \t"],[-1,12010,"ue);\n"],[1,12021,"\n  \t\t"],[1,12071,"  \t\t\t"],[-1,12071,"提供对应的"],[-1,12087,"er方法\n"],[1,12098,"\n  \t\t"],[-1,12138,"er方法\n"],[1,12149,"\n  \t\t"],[1,12167,"  数"],[-1,12167,"性的数据"],[1,12174,"- "],[1,12178,"\t"],[-1,12178,"- "],[-1,12218,"me);\n"],[1,12229,"\n  \t\t"],[1,12279,"  \t\t\t"],[-1,12279,"提供对应的"],[-1,12295,"er方法\n"],[1,12306,"\n  \t\t"],[1,12345,"  - "],[-1,12345,"er方"],[1,12352,"\t"],[-1,12352,"- "],[-1,12394,"rig)\n"],[1,12405,"\n  \t\t"],[-1,12422,"的类对象\n"],[1,12433,"\n  \t\t"],[-1,12447,"的源数"],[1,12452," */"]],[12453,12453],[462,462]]],[1564748525858,["GJX@GJXAIOU",[[-1,5455,"- "]],[5455,5457],[5455,5455]]],[1564748527202,["GJX@GJXAIOU",[[1,5455,"### "]],[5455,5455],[5511,5511]]],[1564748530183,["GJX@GJXAIOU",[[1,5511,"（0"]],[5511,5511],[5513,5513]]],[1564748531725,["GJX@GJXAIOU",[[-1,5511,"（0"]],[5513,5513],[5511,5511]]],[1564748536815,["GJX@GJXAIOU",[[1,5459,"()"]],[5459,5459],[5461,5461]]],[1564748539169,["GJX@GJXAIOU",[[1,5460,"三"]],[5460,5460],[5461,5461]]],[1564748549822,["GJX@GJXAIOU",[[1,7280,"二、"]],[7280,7280],[7282,7282]]],[1564748555282,["GJX@GJXAIOU",[[-1,7289,"，主要负责数据库的增删改查 "]],[7289,7303],[7289,7289]]],[1564748557755,["GJX@GJXAIOU",[[-1,7284,"的"]],[7285,7285],[7284,7284]]],[1564748564678,["GJX@GJXAIOU",[[1,11259,"三、"]],[11259,11259],[11261,11261]]],[1564748575198,["GJX@GJXAIOU",[[-1,11433,"\n"]],[11432,11432],[11431,11431]]],[1564748702137,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[1,7369,"ava\n"],[-1,11249,"}\n\n\n"],[1,11257,"\n"],[-1,11259,"三、#"],[1,11265,"三、"],[-1,11284,"#"],[1,11285,"\n"],[1,11296,"n 定义\n"],[-1,11402,"n 定义\n"],[-1,11432,"aean"],[1,11436,"ls;\n"],[-1,11800,"#"],[1,11801,"\n"],[1,11815,"工"],[1,11817,"方法使用"],[-1,11819," - **\n "],[1,11826,"\n-"],[-1,11832," \n  \t"],[1,11837,"tils "],[1,11863,"直接调用\n"],[-1,11871,"用\n  \t"],[1,11898,"3.jar"],[-1,11901,"r\n  \t"],[-1,11932,"U"],[1,11933,"日志支持包\n"],[-1,11945,"t"],[1,11946,"\n"],[-1,11950,"\n\n  \t"],[1,12007,"ue);\n"],[-1,12013,"\n  \t\t"],[-1,12068,"  \t\t\t"],[1,12073,"提供对应的"],[1,12084,"er方法\n"],[-1,12090,"\n  \t\t"],[1,12135,"er方法\n"],[-1,12141,"\n  \t\t"],[-1,12164,"  数"],[1,12167,"性的数据"],[-1,12170,"- "],[-1,12176,"\t"],[1,12177,"- "],[1,12215,"me);\n"],[-1,12221,"\n  \t\t"],[-1,12276,"  \t\t\t"],[1,12281,"提供对应的"],[1,12292,"er方法\n"],[-1,12298,"\n  \t\t"],[-1,12342,"  - "],[1,12346,"er方"],[-1,12350,"\t"],[1,12351,"- "],[1,12391,"rig)\n"],[-1,12397,"\n  \t\t"],[1,12419,"的类对象\n"],[-1,12425,"\n  \t\t"],[1,12444,"的源数"],[-1,12446," */"]],[462,462],[12446,12446]]],[1564748702137,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[-1,7365,"ava\n"],[1,11249,"}\n\n\n"],[-1,11253,"\n"],[1,11256,"三、#"],[-1,11259,"三、"],[1,11280,"#"],[-1,11280,"\n"],[-1,11292,"n 定义\n"],[1,11403,"n 定义\n"],[1,11428,"aean"],[-1,11428,"ls;\n"],[1,11796,"#"],[-1,11796,"\n"],[-1,11811,"工"],[-1,11814,"方法使用"],[1,11820," - **\n "],[-1,11820,"\n-"],[1,11828," \n  \t"],[-1,11828,"tils "],[-1,11859,"直接调用\n"],[1,11872,"用\n  \t"],[-1,11894,"3.jar"],[1,11902,"r\n  \t"],[1,11928,"U"],[-1,11928,"日志支持包\n"],[1,11946,"t"],[-1,11946,"\n"],[1,11951,"\n\n  \t"],[-1,12003,"ue);\n"],[1,12014,"\n  \t\t"],[1,12064,"  \t\t\t"],[-1,12064,"提供对应的"],[-1,12080,"er方法\n"],[1,12091,"\n  \t\t"],[-1,12131,"er方法\n"],[1,12142,"\n  \t\t"],[1,12160,"  数"],[-1,12160,"性的数据"],[1,12167,"- "],[1,12171,"\t"],[-1,12171,"- "],[-1,12211,"me);\n"],[1,12222,"\n  \t\t"],[1,12272,"  \t\t\t"],[-1,12272,"提供对应的"],[-1,12288,"er方法\n"],[1,12299,"\n  \t\t"],[1,12338,"  - "],[-1,12338,"er方"],[1,12345,"\t"],[-1,12345,"- "],[-1,12387,"rig)\n"],[1,12398,"\n  \t\t"],[-1,12415,"的类对象\n"],[1,12426,"\n  \t\t"],[-1,12440,"的源数"],[1,12445," */"]],[12446,12446],[462,462]]],[1564748672418,["GJX@GJXAIOU",[[1,11256,"\n"]],[11255,11255],[11256,11256]]],[1564748676136,["GJX@GJXAIOU",[[1,11256,"TODO："]],[11256,11256],[11261,11261]]],[1564748677468,["GJX@GJXAIOU",[[-1,11256,"TODO："]],[11261,11261],[11256,11256]]],[1564748677813,["GJX@GJXAIOU",[[-1,11256,"\n"]],[11256,11256],[11255,11255]]],[1564748680624,["GJX@GJXAIOU",[[1,11255,"-------"]],[11255,11255],[11262,11262]]],[1564748684074,["GJX@GJXAIOU",[[1,11263,"\n"]],[11262,11262],[11263,11263]]],[1564748684220,["GJX@GJXAIOU",[[1,11264,"\n"]],[11263,11263],[11264,11264]]],[1564748686823,["GJX@GJXAIOU",[[1,11263,"===="]],[11263,11263],[11265,11265]]],[1564748695170,["GJX@GJXAIOU",[[1,11265,"下面没看，不知道讲啥"]],[11265,11265],[11275,11275]]],[1564748762140,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"]],[462,462],[12469,12469]]],[1564748762140,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"]],[12469,12469],[462,462]]],[1564748709190,["GJX@GJXAIOU",[[1,22952,"四、"]],[22952,22952],[22954,22954]]],[1564748725498,["GJX@GJXAIOU",[[-1,23218,"发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 \n \n 涉及到数据库的打开，关闭，这里非常影响软件的运行效率\n \n 把数据库连接对象，放到一个池子里\t\n \t功能如下：\n \t\t1. 初始化连接的个数，最大连接数，当前连接数，池子集合来表示 ，一般使用LinkedList 因为增删多，基本上没有查找\n \t\t2. 构造方法：创建初始化连接\n \t\t3. 创建连接的方法\n \t\t4. 获取连接的方法：\n \t\t\t---> 判断：池子中有没有可用的连接\n \t\t\t\t--> 有，直接拿走\n \t\t\t\t--> 没有\t判断是否达到了最大连接数，\n \t\t\t\t\t-->到达抛出异常\n \t\t\t\t\t-->没有达到，创建新的连接\n \t\t5. 释放连接：\n \t\t\t--> 是将正在使用的数据库连接对象，放回池子内\n */"]],[23218,23585],[23218,23218]]],[1564748728482,["GJX@GJXAIOU",[[-1,23214,"/*\n \n\n"]],[23214,23220],[23214,23214]]],[1564748730860,["GJX@GJXAIOU",[[1,22959,"\n"]],[22958,22958],[22959,22959]]],[1564748731356,["GJX@GJXAIOU",[[1,22959,"发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 \n \n 涉及到数据库的打开，关闭，这里非常影响软件的运行效率\n \n 把数据库连接对象，放到一个池子里\t\n \t功能如下：\n \t\t1. 初始化连接的个数，最大连接数，当前连接数，池子集合来表示 ，一般使用LinkedList 因为增删多，基本上没有查找\n \t\t2. 构造方法：创建初始化连接\n \t\t3. 创建连接的方法\n \t\t4. 获取连接的方法：\n \t\t\t---> 判断：池子中有没有可用的连接\n \t\t\t\t--> 有，直接拿走\n \t\t\t\t--> 没有\t判断是否达到了最大连接数，\n \t\t\t\t\t-->到达抛出异常\n \t\t\t\t\t-->没有达到，创建新的连接\n \t\t5. 释放连接：\n \t\t\t--> 是将正在使用的数据库连接对象，放回池子内\n */"]],[22959,22959],[23326,23326]]],[1564748746675,["GJX@GJXAIOU",[[-1,23009," "]],[23010,23010],[23009,23009]]],[1564748746829,["GJX@GJXAIOU",[[-1,23008,"\n"]],[23009,23009],[23008,23008]]],[1564748747579,["GJX@GJXAIOU",[[-1,23007," "]],[23008,23008],[23007,23007]]],[1564748748498,["GJX@GJXAIOU",[[-1,23006,"\n"]],[23007,23007],[23006,23006]]],[1564748751639,["GJX@GJXAIOU",[[1,23006,"，因为"]],[23006,23006],[23009,23009]]],[1564748755448,["GJX@GJXAIOU",[[1,23035,"。"]],[23035,23035],[23036,23036]]],[1564748822159,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23327,"接池\n\n"],[-1,23582,"*/"],[1,23584,"t;"]],[462,462],[23586,23586]]],[1564748822159,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23327,"接池\n\n"],[1,23578,"*/"],[-1,23578,"t;"]],[23586,23586],[462,462]]],[1564748764132,["GJX@GJXAIOU",[[-1,23039," "]],[23039,23040],[23039,23039]]],[1564748771234,["GJX@GJXAIOU",[[-1,23322," */"]],[23322,23325],[23322,23322]]],[1564748816338,["GJX@GJXAIOU",[[-1,23038,"\n"]],[23039,23039],[23038,23038]]],[1564748821891,["GJX@GJXAIOU",[[1,23038,"解决方案："]],[23038,23038],[23043,23043]]],[1564748882158,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23327,"接池\n\n"],[-1,23582,"*/"],[1,23584,"t;"]],[462,462],[23586,23586]]],[1564748882158,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23327,"接池\n\n"],[1,23578,"*/"],[-1,23578,"t;"]],[23586,23586],[462,462]]],[1564748824410,["GJX@GJXAIOU",[[-1,23037," "]],[23038,23038],[23037,23037]]],[1564748828169,["GJX@GJXAIOU",[[1,22959,"问题："]],[22959,22959],[22962,22962]]],[1564748831897,["GJX@GJXAIOU",[[1,22959,"- "]],[22959,22959],[22961,22961]]],[1564748834638,["GJX@GJXAIOU",[[1,23042,"- "]],[23042,23042],[23044,23044]]],[1564748839948,["GJX@GJXAIOU",[[-1,23067," \t"]],[23067,23069],[23067,23067]]],[1564748843423,["GJX@GJXAIOU",[[1,23067,"- 连接池"]],[23067,23067],[23072,23072]]],[1564748854530,["GJX@GJXAIOU",[[-1,23078," \t\t"],[-1,23143," \t\t"],[-1,23162," \t\t"],[-1,23176," \t\t"],[-1,23191," \t\t\t"],[-1,23215," \t\t\t\t"],[-1,23231," \t\t\t\t"],[-1,23257," \t\t\t\t\t"],[-1,23273," \t\t\t\t\t"],[-1,23294," \t\t"],[-1,23306," \t\t\t"]],[23081,23334],[23081,23334]]],[1564748863527,["GJX@GJXAIOU",[[1,23199,"  "]],[23199,23199],[23201,23201]]],[1564748865013,["GJX@GJXAIOU",[[1,23212,"  "]],[23212,23212],[23214,23214]]],[1564748867055,["GJX@GJXAIOU",[[-1,23212,"  "]],[23214,23214],[23212,23212]]],[1564748867446,["GJX@GJXAIOU",[[-1,23199,"  "]],[23201,23201],[23199,23199]]],[1564748867855,["GJX@GJXAIOU",[[1,23078," \t\t"],[1,23140," \t\t"],[1,23156," \t\t"],[1,23167," \t\t"],[1,23179," \t\t\t"],[1,23199," \t\t\t\t"],[1,23210," \t\t\t\t"],[1,23231," \t\t\t\t\t"],[1,23241," \t\t\t\t\t"],[1,23256," \t\t"],[1,23265," \t\t\t"]],[23081,23334],[23081,23334]]],[1564748875714,["GJX@GJXAIOU",[[-1,23078," \t\t"],[-1,23143," \t\t"],[-1,23162," \t\t"],[-1,23176," \t\t"],[-1,23191," \t\t\t"],[-1,23215," \t\t\t\t"],[-1,23231," \t\t\t\t"],[-1,23257," \t\t\t\t\t"],[-1,23273," \t\t\t\t\t"],[-1,23294," \t\t"],[-1,23306," \t\t\t"]],[23081,23335],[23081,23335]]],[1564748879131,["GJX@GJXAIOU",[[1,23199,"  "],[1,23210,"  "]],[23199,23230],[23199,23234]]],[1564748881018,["GJX@GJXAIOU",[[1,23235,"  "],[1,23245,"  "]],[23235,23259],[23235,23263]]],[1564748881236,["GJX@GJXAIOU",[[1,23237,"  "],[1,23247,"  "]],[23235,23263],[23235,23267]]],[1564748942159,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23303,"接池\n\n"],[-1,23558,"*/"],[1,23560,"t;"]],[462,462],[23562,23562]]],[1564748942159,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23303,"接池\n\n"],[1,23554,"*/"],[-1,23554,"t;"]],[23562,23562],[462,462]]],[1564748889770,["GJX@GJXAIOU",[[-1,23080," "]],[23081,23081],[23080,23080]]],[1564748892594,["GJX@GJXAIOU",[[-1,23141," "]],[23142,23142],[23141,23141]]],[1564748894386,["GJX@GJXAIOU",[[-1,23156," "]],[23157,23157],[23156,23156]]],[1564748896090,["GJX@GJXAIOU",[[-1,23166," "]],[23167,23167],[23166,23166]]],[1564749182169,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23299,"接池\n\n"],[-1,23554,"*/"],[1,23556,"t;"]],[462,462],[23558,23558]]],[1564749182169,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23299,"接池\n\n"],[1,23550,"*/"],[-1,23550,"t;"]],[23558,23558],[462,462]]],[1564749175154,["GJX@GJXAIOU",[[1,23103,"用"]],[23103,23103],[23104,23104]]],[1564749179045,["GJX@GJXAIOU",[[1,23126,"；"]],[23126,23126],[23127,23127]]],[1564749242166,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23301,"接池\n\n"],[-1,23556,"*/"],[1,23558,"t;"]],[462,462],[23560,23560]]],[1564749242166,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23301,"接池\n\n"],[1,23552,"*/"],[-1,23552,"t;"]],[23560,23560],[462,462]]],[1564749194337,["GJX@GJXAIOU",[[1,23242,"则"]],[23242,23242],[23243,23243]]],[1564749223153,["GJX@GJXAIOU",[[-1,23269," "]],[23270,23270],[23269,23269]]],[1564749227770,["GJX@GJXAIOU",[[-1,23275,"-->"]],[23275,23278],[23275,23275]]],[1564749228181,["GJX@GJXAIOU",[[-1,23274,"\n"]],[23275,23275],[23274,23274]]],[1564749602171,[null,[[-1,462,"　　"],[1,516,"。\n"],[-1,576,"数"],[1,577,"\n"],[-1,7277,"``\n二、\n"],[1,7286,"二、"],[-1,7288,"个"],[1,7289,"DAO层\n"],[-1,7327,"方法： "],[-1,7369,""],[1,7369,"ava\n"],[-1,11249,"}\n\n"],[1,11252,"\n```"],[-1,11254,"`"],[-1,11262,"`"],[1,11263,"\n"],[-1,11279,"`\n\n三、#"],[1,11288,"三、"],[-1,11307,"#"],[1,11308,"\n"],[1,11319,"n 定义\n"],[-1,11425,"n 定义\n"],[-1,11455,"aean"],[1,11459,"ls;\n"],[-1,11823,"#"],[1,11824,"\n"],[1,11838,"工"],[1,11840,"方法使用"],[-1,11842," - **\n "],[1,11849,"\n-"],[-1,11855," \n  \t"],[1,11860,"tils "],[1,11886,"直接调用\n"],[-1,11894,"用\n  \t"],[1,11921,"3.jar"],[-1,11924,"r\n  \t"],[-1,11955,"U"],[1,11956,"日志支持包\n"],[-1,11968,"t"],[1,11969,"\n"],[-1,11973,"\n\n  \t"],[1,12030,"ue);\n"],[-1,12036,"\n  \t\t"],[-1,12091,"  \t\t\t"],[1,12096,"提供对应的"],[1,12107,"er方法\n"],[-1,12113,"\n  \t\t"],[1,12158,"er方法\n"],[-1,12164,"\n  \t\t"],[-1,12187,"  数"],[1,12190,"性的数据"],[-1,12193,"- "],[-1,12199,"\t"],[1,12200,"- "],[1,12238,"me);\n"],[-1,12244,"\n  \t\t"],[-1,12299,"  \t\t\t"],[1,12304,"提供对应的"],[1,12315,"er方法\n"],[-1,12321,"\n  \t\t"],[-1,12365,"  - "],[1,12369,"er方"],[-1,12373,"\t"],[1,12374,"- "],[1,12414,"rig)\n"],[-1,12420,"\n  \t\t"],[1,12442,"的类对象\n"],[-1,12448,"\n  \t\t"],[1,12467,"的源数"],[-1,12469," */"],[-1,22952,"四、"],[1,22958,"四、"],[1,22959,"接池\n\n"],[-1,23297,"接池\n\n"],[-1,23552,"*/"],[1,23554,"t;"]],[462,462],[23556,23556]]],[1564749602171,[null,[[1,462,"　　"],[-1,514,"。\n"],[1,576,"数"],[-1,576,"\n"],[1,7277,"``\n二、\n"],[-1,7280,"二、"],[1,7284,"个"],[-1,7284,"DAO层\n"],[1,7327,"方法： "],[1,7365,""],[-1,7365,"ava\n"],[1,11249,"}\n\n"],[-1,11249,"\n```"],[1,11255,"`"],[1,11262,"`"],[-1,11262,"\n"],[1,11279,"`\n\n三、#"],[-1,11282,"三、"],[1,11303,"#"],[-1,11303,"\n"],[-1,11315,"n 定义\n"],[1,11426,"n 定义\n"],[1,11451,"aean"],[-1,11451,"ls;\n"],[1,11819,"#"],[-1,11819,"\n"],[-1,11834,"工"],[-1,11837,"方法使用"],[1,11843," - **\n "],[-1,11843,"\n-"],[1,11851," \n  \t"],[-1,11851,"tils "],[-1,11882,"直接调用\n"],[1,11895,"用\n  \t"],[-1,11917,"3.jar"],[1,11925,"r\n  \t"],[1,11951,"U"],[-1,11951,"日志支持包\n"],[1,11969,"t"],[-1,11969,"\n"],[1,11974,"\n\n  \t"],[-1,12026,"ue);\n"],[1,12037,"\n  \t\t"],[1,12087,"  \t\t\t"],[-1,12087,"提供对应的"],[-1,12103,"er方法\n"],[1,12114,"\n  \t\t"],[-1,12154,"er方法\n"],[1,12165,"\n  \t\t"],[1,12183,"  数"],[-1,12183,"性的数据"],[1,12190,"- "],[1,12194,"\t"],[-1,12194,"- "],[-1,12234,"me);\n"],[1,12245,"\n  \t\t"],[1,12295,"  \t\t\t"],[-1,12295,"提供对应的"],[-1,12311,"er方法\n"],[1,12322,"\n  \t\t"],[1,12361,"  - "],[-1,12361,"er方"],[1,12368,"\t"],[-1,12368,"- "],[-1,12410,"rig)\n"],[1,12421,"\n  \t\t"],[-1,12438,"的类对象\n"],[1,12449,"\n  \t\t"],[-1,12463,"的源数"],[1,12468," */"],[1,22948,"四、"],[-1,22952,"四、"],[-1,22955,"接池\n\n"],[1,23297,"接池\n\n"],[1,23548,"*/"],[-1,23548,"t;"]],[23556,23556],[462,462]]],[1564749543402,["GJX@GJXAIOU",[[-1,22949,"## 四、连接池\n\n- 问题：发现在程序中，不断的有连接数据库的操作，但是也同时存在，每一次连接之后操作结束，立马就会关闭 ，因为涉及到数据库的打开，关闭，这里非常影响软件的运行效率。\n- 解决方案：把数据库连接对象，放到一个池子里\t\n- 连接池功能如下：\n1.初始化连接的个数，最大连接数，当前连接数，池子用集合来表示 ，一般使用LinkedList ；因为增删多，基本上没有查找\n2.构造方法：创建初始化连接\n3.创建连接的方法\n4.获取连接的方法：\n---> 判断：池子中有没有可用的连接\n  --> 有，直接拿走\n  --> 没有\t判断是否达到了最大连接数，\n    -->到达则抛出异常\n    -->没有达到，创建新的连接\n5.释放连接： 是将正在使用的数据库连接对象，放回池子内\n\n```java\npackage e_mypool;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.LinkedList;\n\n\npublic class MyConnectionPool {\n\tprivate int initCount = 5; //初始化连接数目，默认5个\n\tprivate int maxCount = 10; //最大连接数\n\tprivate int currentCount = 0; //记录当前连接数\n\t\n\t//连接池，用LinkedList集合来操作\n\tprivate LinkedList<Connection> pool = new LinkedList<Connection>();\n\t\n\t//1. 构造方法，按照指定初始化连接个数，创建新的连接\n\tpublic MyConnectionPool() {\n\t\tfor (int i = 0; i <initCount; i++) {\n\t\t\t//类内创建连接的方式\n\t\t\tConnection conn = createConnection();\n\t\t\tpool.addLast(conn);\n\t\t\tcurrentCount++; //记录连接池里面的连接数目\n\t\t}\n\t}\n\t\n\tpublic int getCurrentCount() {\n\t\treturn currentCount;\n\t}\n\t\n\t//2. 创建一个新的连接的方法\n\tprivate Connection createConnection() {\n\t\t//1. 加载驱动\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tString url = \"jdbc:mysql://localhost:3306/javaee1707?useSSL=true\";\n\t\t\tString user = \"root\";\n\t\t\tString password = \"123456\";\n\t\t\t//最原始的连接对象\n\t\t\tfinal Connection finalConn = DriverManager.getConnection(url, user, password);\n\t\t\t//代理思想~~\n\t\t\tConnection proxy = (Connection) Proxy.newProxyInstance(\n\t\t\t\t\t\tfinalConn.getClass().getClassLoader(), //类加载器\n\t\t\t\t\t\tnew Class[] {Connection.class}, //目标对象实现的接口\n\t\t\t\t\t\t\n\t\t\t\t\t\tnew InvocationHandler() {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//定义一个返回值\n\t\t\t\t\t\t\t\tObject result = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//获取要执行方法的方法名\n\t\t\t\t\t\t\t\tString methodName = method.getName();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//这里只是限制了close的操作，如果是其他的方法，按照原来的操作进行\n\t\t\t\t\t\t\t\t//修改关闭close执行的任务\n\t\t\t\t\t\t\t\tif (\"close\".equals(methodName)) {\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"执行close方法\");\n\t\t\t\t\t\t\t\t\t//放回连接池内\n\t\t\t\t\t\t\t\t\tpool.addLast(finalConn);\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"数据库连接已经放回到连接池中\");\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult = method.invoke(finalConn, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\treturn proxy;\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t//3. 从连接池中获取连接的方法\n\tpublic Connection getConnection() {\n\t\t//1. 判断池子中有没有连接\n\t\tif (pool.size() > 0) {\n\t\t\treturn pool.removeFirst();\n\t\t}\n\t\t\n\t\t//2. 如果没有连接，判断当前连接数是否达到最大值限制\n\t\tif (currentCount < maxCount) {\n\t\t\tcurrentCount++;\n\t\t\treturn createConnection();\n\t\t}\n\t\t\n\t\tthrow new RuntimeException(\"当前连接数已经达到最大值\");\n\t}\n\t\n\t//4. 释放连接\n\tpublic void realeaseConnection(Connection conn) {\n\t\t//如果池子中读取的数目是小于初始化连接的，放入池子\n\t\tif (pool.size() < initCount) {\n\t\t\tpool.addLast(conn);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t//关闭\n\t\t\t\tcurrentCount--;\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static void main(String[] args) throws SQLException {\n\t\tMyConnectionPool pool = new MyConnectionPool();\n\t\t\n\t\tSystem.out.println(\"当前连接数：\" + pool.getCurrentCount());\n\t\t\n\t\tConnection conn1 = pool.getConnection();\n\t\tConnection conn2 = pool.getConnection();\n\t\tConnection conn3 = pool.getConnection();\n\t\tConnection conn4 = pool.getConnection();\n\t\tConnection conn5 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn1);\n\t\tSystem.out.println(conn2);\n\t\tSystem.out.println(conn3);\n\t\tSystem.out.println(conn4);\n\t\tSystem.out.println(conn5);\n\t\t\n\t\tconn1.close();\n\t\t\n\t\tconn1 = pool.getConnection();\n\t\tSystem.out.println(conn1);\n\t\t\n\t\tConnection conn6 = pool.getConnection();\n\t\tConnection conn7 = pool.getConnection();\n\t\tConnection conn8 = pool.getConnection();\n\t\tConnection conn9 = pool.getConnection();\n\t\tConnection conn10 = pool.getConnection();\n\t\t\n\t\tSystem.out.println(conn6);\n\t\tSystem.out.println(conn7);\n\t\tSystem.out.println(conn8);\n\t\tSystem.out.println(conn9);\n\t\tSystem.out.println(conn10);\n\t\t\n\t\tConnection conn11 = pool.getConnection();\n\t}\n}\n\n```\n\n\n## 使用 C3P0 连接池\n```java\npackage a_c3p0;\n\nimport java.beans.PropertyVetoException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\nimport org.junit.Test;\n\n\n/*\n    ComboPooledDataSource\n\n */\n\npublic class Demo {\n\n\t//第一种方式：硬编码方式\n\t\t@Test\n\t\t//硬编码方式，使用C3P0连接池管理连接数据库对象\n\t\tpublic void test1() throws Exception {\n\t\t\t//创建连接池的核心工具类\n\t\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\n\t\t\t//设置所需参数\n\t\t\t//连接数据库所需参数\n\t\t\tdataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/day38?useSSL=true\");//设置URL\n\t\t\tdataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); //加载驱动\n\t\t\tdataSource.setUser(\"root\"); //设置用户名\n\t\t\tdataSource.setPassword(\"123456\"); //设置密码\n\n\t\t\t//C3P0连接池的属性\n\t\t\tdataSource.setInitialPoolSize(3);  //初始化连接数\n\t\t\tdataSource.setMaxPoolSize(6); //最大连接数\n\t\t\tdataSource.setMaxIdleTime(1000); //设置等待时间\n\n\t\t\t//从连接池中获取到数据库连接对象\n\t\t\tConnection conn = dataSource.getConnection();\n\n\t\t\tconn.prepareStatement(\"delete from student where id=3\").executeUpdate();\n\n\t\t\tconn.close();\n\t\t}\n\n\n\t\t//第二种方法：使用XML配置文件\n\n\t@Test\n\t//使用XML配置文件的方式，创建C3P0连接池\n\tpublic void testXML() throws Exception {\n\t\t//创建c3p0核心类\n\t\t//创建当前核心类，就会自动加载在src下的c3p0-config.xml\n\t\tComboPooledDataSource dataSource = new ComboPooledDataSource();\n\t\tPreparedStatement pstmt = null;\n\n\t\tConnection conn = dataSource.getConnection();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tString sql = \"insert into student(name) values(?)\";\n\n\t\t\tpstmt = conn.prepareStatement(sql);\n\n\t\t\tpstmt.setString(1, \"逗比\");\n\n\t\t\tpstmt.executeUpdate();\n\t\t}\n\n\t\tpstmt.close();\n\t\tconn.close();\n\n\n\t}\n}\n\n\n```\n针对第二种方式，一般使用 XML 配置文件，也可以使用.properties 文件，这里使用 xml 文件，将其放置在上面代码同一包下即可；命名为：c3p0-config.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<c3p0-config>\n\t<default-config>\n\t\t<property name=\"jdbcUrl\">jdbc:mysql://localhost:3306/day38?useSSL=true</property>\n\t\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"user\">root</property>\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"initialPoolSize\">3</property>\n\t\t<property name=\"maxPoolSize\">6</property>\n\t\t<property name=\"maxIdleTime\">1000</property>\n\t</default-config>\n</c3p0-config>\n\n```\n\n\n\n\n\n"]],[22949,29402],[22949,22949]]]],null,"GJX@GJXAIOU"]]}