{"compress":true,"commitItems":[["163129af-8327-4e78-b3f7-ce9f0a39fb68",1572070285122,"",[[1572070240502,["GJX@GJXAIOU",[[1,0,"# Part1：Spring 核心知识\n\n\n\n"]],[0,0],[22,22]]],[1572072500511,["GJX@GJXAIOU",[[1,22,"## 章一：Spring 之旅"]],[22,22],[37,37]]],[1572072500917,["GJX@GJXAIOU",[[1,38,"\n"]],[37,37],[38,38]]],[1572072501317,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1572072501500,["GJX@GJXAIOU",[[1,40,"\n"]],[39,39],[40,40]]],[1572072501645,["GJX@GJXAIOU",[[1,41,"\n"]],[40,40],[41,41]]],[1572072504455,["GJX@GJXAIOU",[[1,41,"## 章"]],[41,41],[45,45]]],[1572072511952,["GJX@GJXAIOU",[[1,45,"二：装配 Bean"]],[45,45],[54,54]]],[1572072512357,["GJX@GJXAIOU",[[1,55,"\n"]],[54,54],[55,55]]],[1572072513278,["GJX@GJXAIOU",[[1,56,"\n"]],[55,55],[56,56]]],[1572072513468,["GJX@GJXAIOU",[[1,57,"\n"]],[56,56],[57,57]]],[1572072513581,["GJX@GJXAIOU",[[1,58,"\n"]],[57,57],[58,58]]],[1572072514726,["GJX@GJXAIOU",[[1,58,"### "]],[58,58],[62,62]]],[1572072515852,["GJX@GJXAIOU",[[-1,60,"# "]],[62,62],[60,60]]],[1572072518094,["GJX@GJXAIOU",[[1,60," 张三"]],[60,60],[63,63]]],[1572072518828,["GJX@GJXAIOU",[[-1,61,"张三"]],[63,63],[61,61]]],[1572072524950,["GJX@GJXAIOU",[[1,61,"章三：高级装配"]],[61,61],[68,68]]],[1572072535526,["GJX@GJXAIOU",[[1,39,"### （）"]],[39,39],[45,45]]],[1572072537727,["GJX@GJXAIOU",[[1,44,"89 "]],[44,44],[47,47]]],[1572072542732,["GJX@GJXAIOU",[[-1,43,"（89 ）"]],[47,47],[43,43]]],[1572072552127,["GJX@GJXAIOU",[[1,43,"一、简化 Java开发"]],[43,43],[54,54]]],[1572072552150,["GJX@GJXAIOU",[[1,52," "]],[54,54],[55,55]]],[1572072552557,["GJX@GJXAIOU",[[1,57,"\n"]],[55,55],[56,56]]],[1572072554157,["GJX@GJXAIOU",[[1,58,"\n"]],[56,56],[57,57]]],[1572072564105,["GJX@GJXAIOU",[[1,57,"### 二、容纳你的 Bean"]],[57,57],[72,72]]],[1572072564495,["GJX@GJXAIOU",[[1,74,"\n"]],[72,72],[73,73]]],[1572072564748,["GJX@GJXAIOU",[[1,75,"\n"]],[73,73],[74,74]]],[1572072565732,["GJX@GJXAIOU",[[1,76,"\n"]],[74,74],[75,75]]],[1572072582927,["GJX@GJXAIOU",[[1,75,"### 俯瞰 Spring 整体"]],[75,75],[91,91]]],[1572072587087,["GJX@GJXAIOU",[[1,79,"三、"]],[79,79],[81,81]]],[1572072589629,["GJX@GJXAIOU",[[1,57,"\n"]],[56,56],[57,57]]],[1572072592172,["GJX@GJXAIOU",[[1,96,"\n"]],[96,96],[97,97]]],[1572072592324,["GJX@GJXAIOU",[[1,97,"\n"]],[97,97],[98,98]]],[1572072592478,["GJX@GJXAIOU",[[1,98,"\n"]],[98,98],[99,99]]],[1572072592613,["GJX@GJXAIOU",[[1,99,"\n"]],[99,99],[100,100]]],[1572072597086,["GJX@GJXAIOU",[[1,97,"### #"]],[97,97],[102,102]]],[1572072597908,["GJX@GJXAIOU",[[-1,101,"#"]],[102,102],[101,101]]],[1572072606464,["GJX@GJXAIOU",[[1,101,"四、Spring 新功能"]],[101,101],[113,113]]],[1572072624358,["GJX@GJXAIOU",[[1,131,"### 一、Spring 配置的可选方案"]],[131,131],[151,151]]],[1572072624759,["GJX@GJXAIOU",[[1,153,"\n"]],[151,151],[152,152]]],[1572072624887,["GJX@GJXAIOU",[[1,154,"\n"]],[152,152],[153,153]]],[1572072635592,["GJX@GJXAIOU",[[1,153,"### 二、自动化装配Bean"]],[153,153],[168,168]]],[1572072635616,["GJX@GJXAIOU",[[1,164," "]],[168,168],[169,169]]],[1572072636205,["GJX@GJXAIOU",[[1,171,"\n"]],[169,169],[170,170]]],[1572072637060,["GJX@GJXAIOU",[[1,172,"\n"]],[170,170],[171,171]]],[1572072663390,["GJX@GJXAIOU",[[1,171,"### 三、通过 Java 代码装配bean"]],[171,171],[193,193]]],[1572072663414,["GJX@GJXAIOU",[[1,189," "]],[193,193],[194,194]]],[1572072665021,["GJX@GJXAIOU",[[-1,190,"bean"]],[194,194],[190,190]]],[1572072666703,["GJX@GJXAIOU",[[1,190,"Bean"]],[190,190],[194,194]]],[1572072667120,["GJX@GJXAIOU",[[1,196,"\n"]],[194,194],[195,195]]],[1572072667270,["GJX@GJXAIOU",[[1,197,"\n"]],[195,195],[196,196]]],[1572072678983,["GJX@GJXAIOU",[[1,196,"### 四、通过 XML 装配 Bean"]],[196,196],[216,216]]],[1572072681608,["GJX@GJXAIOU",[[1,218,"\n"]],[216,216],[217,217]]],[1572072684045,["GJX@GJXAIOU",[[1,219,"\n"]],[217,217],[218,218]]],[1572072684431,["GJX@GJXAIOU",[[1,220,"\n"]],[218,218],[219,219]]],[1572072698734,["GJX@GJXAIOU",[[1,219,"### 五、导入和混合配置"]],[219,219],[232,232]]],[1572072700469,["GJX@GJXAIOU",[[-1,218,"\n"]],[218,218],[217,217]]],[1572072728855,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1572072737359,["GJX@GJXAIOU",[[1,39,"Spring 师兄那简化"]],[39,39],[51,51]]],[1572072738620,["GJX@GJXAIOU",[[-1,46,"师兄那简化"]],[51,51],[46,46]]],[1572072742784,["GJX@GJXAIOU",[[1,46,"实现简化企业就"]],[46,46],[53,53]]],[1572072744510,["GJX@GJXAIOU",[[-1,50,"企业就"]],[53,53],[50,50]]],[1572072754832,["GJX@GJXAIOU",[[1,50,"企业级开发的地城"]],[50,50],[58,58]]],[1572072755486,["GJX@GJXAIOU",[[-1,56,"地城"]],[58,58],[56,56]]],[1572072763270,["GJX@GJXAIOU",[[1,56,"底层功能："]],[56,56],[61,61]]],[1572072764135,["GJX@GJXAIOU",[[-1,60,"："]],[61,61],[60,60]]],[1572072773281,["GJX@GJXAIOU",[[1,60,"依赖于两大和兴"]],[60,60],[67,67]]],[1572072774684,["GJX@GJXAIOU",[[-1,65,"和兴"]],[67,67],[65,65]]],[1572072777766,["GJX@GJXAIOU",[[1,65,"核心特性：“"]],[65,65],[71,71]]],[1572072778421,["GJX@GJXAIOU",[[-1,70,"“"]],[71,71],[70,70]]],[1572072783926,["GJX@GJXAIOU",[[1,70,"依赖注入（）"]],[70,70],[76,76]]],[1572072802168,["GJX@GJXAIOU",[[1,75,"Dependency Injection，DI"]],[75,75],[98,98]]],[1572072805137,["GJX@GJXAIOU",[[1,99,"和"]],[99,99],[100,100]]],[1572072810087,["GJX@GJXAIOU",[[1,100,"面向切面编程（）"]],[100,100],[108,108]]],[1572072830464,["GJX@GJXAIOU",[[1,107,"aspect-oriented programming，AOP"]],[107,107],[138,138]]],[1572072854677,["GJX@GJXAIOU",[[1,55,"（）"]],[55,55],[57,57]]],[1572072858270,["GJX@GJXAIOU",[[1,56,"EJB"]],[56,56],[59,59]]],[1572072898141,["GJX@GJXAIOU",[[1,162,"使用的四种关键策略："]],[162,162],[172,172]]],[1572072898384,["GJX@GJXAIOU",[[1,174,"\n"]],[172,172],[173,173]]],[1572072899749,["GJX@GJXAIOU",[[1,173,"- "]],[173,173],[175,175]]],[1572072902157,["GJX@GJXAIOU",[[1,145,"\n"]],[145,145],[146,146]]],[1572072908615,["GJX@GJXAIOU",[[1,176,"语句"]],[176,176],[178,178]]],[1572072909436,["GJX@GJXAIOU",[[-1,176,"语句"]],[178,178],[176,176]]],[1572072914263,["GJX@GJXAIOU",[[1,176,"基于 POJO的"]],[176,176],[184,184]]],[1572072914289,["GJX@GJXAIOU",[[1,183," "]],[184,184],[185,185]]],[1572072923176,["GJX@GJXAIOU",[[1,185,"轻量级和最小"]],[185,185],[191,191]]],[1572072929550,["GJX@GJXAIOU",[[1,191,"侵入性编程；"]],[191,191],[197,197]]],[1572072930055,["GJX@GJXAIOU",[[1,198,"- \n"]],[197,197],[200,200]]],[1572072947702,["GJX@GJXAIOU",[[1,200,"通过依赖注入和面向接口实现松耦合；"]],[200,200],[217,217]]],[1572072948021,["GJX@GJXAIOU",[[1,218,"- \n"]],[217,217],[220,220]]],[1572072961991,["GJX@GJXAIOU",[[1,220,"基于切面和惯例进行声明式编程；"]],[220,220],[235,235]]],[1572072962550,["GJX@GJXAIOU",[[1,236,"- \n"]],[235,235],[238,238]]],[1572072984366,["GJX@GJXAIOU",[[1,238,"通过切面和模板减少样板式代码；"]],[238,238],[253,253]]],[1572073006384,["GJX@GJXAIOU",[[1,198,"\n"]],[198,198],[199,199]]],[1572073024529,["GJX@GJXAIOU",[[1,198,"spring 不会强迫实验"]],[198,198],[211,211]]],[1572073026157,["GJX@GJXAIOU",[[-1,209,"实验"]],[211,211],[209,209]]],[1572073029321,["GJX@GJXAIOU",[[1,209,"实现Spring"]],[209,209],[217,217]]],[1572073029347,["GJX@GJXAIOU",[[1,211," "]],[217,217],[218,218]]],[1572073034503,["GJX@GJXAIOU",[[1,218," 规范的忌口"]],[218,218],[224,224]]],[1572073035060,["GJX@GJXAIOU",[[-1,222,"忌口"]],[224,224],[222,222]]],[1572073044514,["GJX@GJXAIOU",[[1,222,"接口或者继承S平"]],[222,222],[230,230]]],[1572073044539,["GJX@GJXAIOU",[[1,228," "]],[230,230],[231,231]]],[1572073045124,["GJX@GJXAIOU",[[-1,229,"S平"]],[231,231],[229,229]]],[1572073103890,["GJX@GJXAIOU",[[1,229,"Spring 规范的类，从而避免框架通过强迫应用继承他们的类或者实现他们的接口从而导致应用和"]],[229,229],[275,275]]],[1572073109256,["GJX@GJXAIOU",[[1,275,"框架邦迪"]],[275,275],[279,279]]],[1572073109861,["GJX@GJXAIOU",[[-1,277,"邦迪"]],[279,279],[277,277]]],[1572073112175,["GJX@GJXAIOU",[[1,277,"邦迪"]],[277,277],[279,279]]],[1572073112828,["GJX@GJXAIOU",[[-1,277,"邦迪"]],[279,279],[277,277]]],[1572073124728,["GJX@GJXAIOU",[[1,277,"绑死；"]],[277,277],[280,280]]],[1572073272342,["GJX@GJXAIOU",[[1,280,"非侵入式编程即为"]],[280,280],[288,288]]],[1572073272995,["GJX@GJXAIOU",[[-1,286,"即为"]],[288,288],[286,286]]],[1572073274326,["GJX@GJXAIOU",[[1,286,"以为"]],[286,286],[288,288]]],[1572073275381,["GJX@GJXAIOU",[[-1,286,"以为"]],[288,288],[286,286]]],[1572073283766,["GJX@GJXAIOU",[[1,286,"意味着该类"]],[286,286],[291,291]]],[1572073288336,["GJX@GJXAIOU",[[1,291,"在Spring"]],[291,291],[298,298]]],[1572073288361,["GJX@GJXAIOU",[[1,292," "]],[298,298],[299,299]]],[1572073293968,["GJX@GJXAIOU",[[1,299," 应用中和非Spring"]],[299,299],[311,311]]],[1572073293992,["GJX@GJXAIOU",[[1,305," "]],[311,311],[312,312]]],[1572073300088,["GJX@GJXAIOU",[[1,312," 应用中都可以发给"]],[312,312],[321,321]]],[1572073300724,["GJX@GJXAIOU",[[-1,319,"发给"]],[321,321],[319,319]]],[1572073335894,["GJX@GJXAIOU",[[1,319,"发挥同样的作用，Spring 仅仅通过 DI 来装配 POJO；"]],[319,319],[351,351]]],[1572073343613,["GJX@GJXAIOU",[[1,374,"\n- "]],[371,371],[374,374]]],[1572073345059,["GJX@GJXAIOU",[[-1,373," "]],[374,374],[373,373]]],[1572073345229,["GJX@GJXAIOU",[[-1,372,"-"]],[373,373],[372,372]]],[1572073370517,["GJX@GJXAIOU",[[1,372,"用于实现保持对象直接的松耦合，"]],[372,372],[387,387]]],[1572073417533,["GJX@GJXAIOU",[[1,408,"\n- "]],[405,405],[408,408]]],[1572073419028,["GJX@GJXAIOU",[[-1,406,"- "]],[408,408],[406,406]]],[1572073437189,["GJX@GJXAIOU",[[1,406,"DI 能够让相互协作的软件组件（）"]],[406,406],[423,423]]],[1572073439727,["GJX@GJXAIOU",[[1,422,"Bean"]],[422,422],[426,426]]],[1572073443303,["GJX@GJXAIOU",[[1,427,"报酬已"]],[427,427],[430,430]]],[1572073444259,["GJX@GJXAIOU",[[-1,427,"报酬已"]],[430,430],[427,427]]],[1572073463905,["GJX@GJXAIOU",[[1,427,"保持松散耦合，而面向切面"]],[427,427],[439,439]]],[1572073496325,["GJX@GJXAIOU",[[1,439,"编程允许将遍布应用各处的功能分离出来形成可以从可以"]],[439,439],[464,464]]],[1572073497156,["GJX@GJXAIOU",[[-1,461,"从可以"]],[464,464],[461,461]]],[1572073524567,["GJX@GJXAIOU",[[1,461,"重用的组件。通常"]],[461,461],[469,469]]],[1572073563303,["GJX@GJXAIOU",[[1,469,"针对跨越系统的多个组件，例如日志、事务干礼"]],[469,469],[490,490]]],[1572073563854,["GJX@GJXAIOU",[[-1,488,"干礼"]],[490,490],[488,488]]],[1572073584622,["GJX@GJXAIOU",[[1,488,"管理、安全，不应该融入到系统自身"]],[488,488],[504,504]]],[1572073586824,["GJX@GJXAIOU",[[1,504,"的和兴"]],[504,504],[507,507]]],[1572073587525,["GJX@GJXAIOU",[[-1,505,"和兴"]],[507,507],[505,505]]],[1572073593480,["GJX@GJXAIOU",[[1,505,"核心业务逻辑中。"]],[505,505],[513,513]]],[1572073616938,["GJX@GJXAIOU",[[1,493,"等系统服务"]],[493,493],[498,498]]],[1572073672046,["GJX@GJXAIOU",[[1,518,"原来做法是各个模块需要该功能就"]],[518,518],[533,533]]],[1572073673381,["GJX@GJXAIOU",[[-1,529,"该功能就"]],[533,533],[529,529]]],[1572073683584,["GJX@GJXAIOU",[[1,529,"上述功能就实现对应的反复"]],[529,529],[541,541]]],[1572073684543,["GJX@GJXAIOU",[[-1,539,"反复"]],[541,541],[539,539]]],[1572073700385,["GJX@GJXAIOU",[[1,539,"方法，或者上述方法抽象出来"]],[539,539],[552,552]]],[1572073720535,["GJX@GJXAIOU",[[1,552,"再需要的地方进行调用，都是重复出现。"]],[552,552],[570,570]]],[1572073724153,["GJX@GJXAIOU",[[1,563,"本质"]],[563,563],[565,565]]],[1572073750249,["GJX@GJXAIOU",[[1,572,"应该只关注核心公共"]],[572,572],[581,581]]],[1572073751123,["GJX@GJXAIOU",[[-1,579,"公共"]],[581,581],[579,579]]],[1572073761652,["GJX@GJXAIOU",[[1,579,"功能，不关注上述功能；"]],[579,579],[590,590]]],[1572074783995,["GJX@GJXAIOU",[[1,591,"\n"]],[590,590],[591,591]]],[1572074784316,["GJX@GJXAIOU",[[1,592,"\n"]],[591,591],[592,592]]],[1572074793396,["GJX@GJXAIOU",[[1,591,"![采用AOP功能前后对比]($resource/%E9%87%87%E7%94%A8AOP%E5%8A%9F%E8%83%BD%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png)"]],[591,591],[697,697]]],[1572074929719,["GJX@GJXAIOU",[[1,716,"例如使用 JDBC 来访问数据库查询数据，配置"]],[716,716],[739,739]]],[1572074930807,["GJX@GJXAIOU",[[-1,737,"配置"]],[739,739],[737,737]]],[1572074956586,["GJX@GJXAIOU",[[1,737,"需要进行样板式的配置（）"]],[737,737],[749,749]]],[1572074963389,["GJX@GJXAIOU",[[1,748,"连接、查询、释放。。"]],[748,748],[758,758]]],[1572074993319,["GJX@GJXAIOU",[[1,759,"，"]],[759,759],[760,760]]],[1572074993941,["GJX@GJXAIOU",[[-1,759,"，"]],[760,760],[759,759]]],[1572075001318,["GJX@GJXAIOU",[[1,759,"。Spring 通过 "]],[759,759],[770,770]]],[1572075002184,["GJX@GJXAIOU",[[-1,769," "]],[770,770],[769,769]]],[1572075021143,["GJX@GJXAIOU",[[1,769,"模板封装来消除样板式代码"]],[769,769],[781,781]]],[1572075042063,["GJX@GJXAIOU",[[1,781,"，例如和一"]],[781,781],[786,786]]],[1572075042709,["GJX@GJXAIOU",[[-1,784,"和一"]],[786,786],[784,784]]],[1572075045046,["GJX@GJXAIOU",[[1,784,"可以谁又能给 "]],[784,784],[791,791]]],[1572075046086,["GJX@GJXAIOU",[[-1,786,"谁又能给 "]],[791,791],[786,786]]],[1572075049713,["GJX@GJXAIOU",[[1,786,"使用Spring"]],[786,786],[794,794]]],[1572075049737,["GJX@GJXAIOU",[[1,788," "]],[794,794],[795,795]]],[1572075052688,["GJX@GJXAIOU",[[1,795," 的J"]],[795,795],[798,798]]],[1572075052714,["GJX@GJXAIOU",[[1,797," "]],[798,798],[799,799]]],[1572075056292,["GJX@GJXAIOU",[[1,799,"dbcR"]],[799,799],[803,803]]],[1572075056763,["GJX@GJXAIOU",[[-1,802,"R"]],[803,803],[802,802]]],[1572075073277,["GJX@GJXAIOU",[[1,802,"Template DAI"]],[802,802],[814,814]]],[1572075074036,["GJX@GJXAIOU",[[-1,811,"DAI"]],[814,814],[811,811]]],[1572075082711,["GJX@GJXAIOU",[[1,811,"代替 JDBC "]],[811,811],[819,819]]],[1572075112565,["GJX@GJXAIOU",[[1,819,"API，专注于书写逻辑 SQL ；"]],[819,819],[836,836]]],[1572075141021,["GJX@GJXAIOU",[[1,837,"\n"]],[837,837],[838,838]]],[1572075141155,["GJX@GJXAIOU",[[1,838,"\n"]],[838,838],[839,839]]],[1572075143186,["GJX@GJXAIOU",[[-1,838,"\n"]],[839,839],[838,838]]],[1572075173647,["GJX@GJXAIOU",[[1,855,"在基于 Spring 应用中，应用对象是沈村"]],[855,855],[877,877]]],[1572075174246,["GJX@GJXAIOU",[[-1,875,"沈村"]],[877,877],[875,875]]],[1572075194590,["GJX@GJXAIOU",[[1,875,"生存于 Spring 容器中，Spring 容器负责"]],[875,875],[901,901]]],[1572075259816,["GJX@GJXAIOU",[[1,901,"创建对象，装配它们，配置它们并管理它们的整个生命周期"]],[901,901],[927,927]]],[1572075364566,["GJX@GJXAIOU",[[1,927,"。spring 容器使用 DI 管理构成应用的组件，他会"]],[927,927],[955,955]]],[1572075365468,["GJX@GJXAIOU",[[-1,953,"他会"]],[955,955],[953,953]]],[1572075381888,["GJX@GJXAIOU",[[1,953,"它会创建相互协作的组件之间的"]],[953,953],[967,967]]],[1572075407759,["GJX@GJXAIOU",[[1,967,"关联。"]],[967,967],[970,970]]],[1572075408237,["GJX@GJXAIOU",[[1,971,"\n"]],[970,970],[971,971]]],[1572075434516,["GJX@GJXAIOU",[[1,971,"Spring 自带多个容器实现，主要是两类：Bean 工程"]],[971,971],[1000,1000]]],[1572075440980,["GJX@GJXAIOU",[[1,993,"\n"]],[993,993],[994,994]]],[1572075442278,["GJX@GJXAIOU",[[1,994,"- "]],[994,994],[996,996]]],[1572075448934,["GJX@GJXAIOU",[[1,1003,"：由``"]],[1003,1003],[1007,1007]]],[1572075451190,["GJX@GJXAIOU",[[1,1006,"org.fu"]],[1006,1006],[1012,1012]]],[1572075451791,["GJX@GJXAIOU",[[-1,1011,"u"]],[1012,1012],[1011,1011]]],[1572075454174,["GJX@GJXAIOU",[[1,1011,"ramewod"]],[1011,1011],[1018,1018]]],[1572075454604,["GJX@GJXAIOU",[[-1,1017,"d"]],[1018,1018],[1017,1017]]],[1572075455168,["GJX@GJXAIOU",[[1,1017,"rd"]],[1017,1017],[1019,1019]]],[1572075456012,["GJX@GJXAIOU",[[-1,1018,"d"]],[1019,1019],[1018,1018]]],[1572075456327,["GJX@GJXAIOU",[[1,1018,"k"]],[1018,1018],[1019,1019]]],[1572075463879,["GJX@GJXAIOU",[[1,1010,"spring"]],[1010,1010],[1016,1016]]],[1572075473759,["GJX@GJXAIOU",[[1,1025,".beans.factorry"]],[1025,1025],[1040,1040]]],[1572075474725,["GJX@GJXAIOU",[[-1,1038,"ry"]],[1040,1040],[1038,1038]]],[1572075476814,["GJX@GJXAIOU",[[1,1038,"y."]],[1038,1038],[1040,1040]]],[1572075551255,["GJX@GJXAIOU",[[1,1040,"BeanFactory"]],[1006,1040],[1051,1051]]],[1572075555497,["GJX@GJXAIOU",[[1,1052,"jie"]],[1052,1052],[1055,1055]]],[1572075556462,["GJX@GJXAIOU",[[-1,1052,"jie"]],[1055,1055],[1052,1052]]],[1572075558856,["GJX@GJXAIOU",[[1,1052,"接口定义"]],[1052,1052],[1056,1056]]],[1572075570185,["GJX@GJXAIOU",[[1,1056,"，提供基本的ID"]],[1056,1056],[1064,1064]]],[1572075570211,["GJX@GJXAIOU",[[1,1062," "]],[1064,1064],[1065,1065]]],[1572075570700,["GJX@GJXAIOU",[[-1,1063,"ID"]],[1065,1065],[1063,1063]]],[1572075580103,["GJX@GJXAIOU",[[1,1063,"DI 支持；"]],[1063,1063],[1069,1069]]],[1572075580575,["GJX@GJXAIOU",[[1,1070,"- \n"]],[1069,1069],[1072,1072]]],[1572075596184,["GJX@GJXAIOU",[[1,1072,"应用上下文：由``"]],[1072,1072],[1081,1081]]],[1572075601213,["GJX@GJXAIOU",[[1,1082,"\n"]],[1082,1082],[1083,1083]]],[1572075603771,["GJX@GJXAIOU",[[1,1082,"****"]],[1082,1082],[1084,1084]]],[1572075604725,["GJX@GJXAIOU",[[1,1084,"suoyo"]],[1084,1084],[1089,1089]]],[1572075606053,["GJX@GJXAIOU",[[-1,1084,"suoyo"]],[1089,1089],[1084,1084]]],[1572075618369,["GJX@GJXAIOU",[[1,1084,"所以说应用上下文就是一个 Spring 容器"]],[1084,1084],[1106,1106]]],[1572075623512,["GJX@GJXAIOU",[[1,1080,"org.spq"]],[1080,1080],[1087,1087]]],[1572075624172,["GJX@GJXAIOU",[[-1,1085,"pq"]],[1087,1087],[1085,1085]]],[1572075626574,["GJX@GJXAIOU",[[1,1085,"qring"]],[1085,1085],[1090,1090]]],[1572075627741,["GJX@GJXAIOU",[[-1,1085,"qring"]],[1090,1090],[1085,1085]]],[1572075628953,["GJX@GJXAIOU",[[1,1085,"pqint"]],[1085,1085],[1090,1090]]],[1572075629811,["GJX@GJXAIOU",[[-1,1085,"pqint"]],[1090,1090],[1085,1085]]],[1572075640464,["GJX@GJXAIOU",[[1,1085,"pringframework.context.All"]],[1085,1085],[1111,1111]]],[1572075641044,["GJX@GJXAIOU",[[-1,1109,"ll"]],[1111,1111],[1109,1109]]],[1572075645856,["GJX@GJXAIOU",[[1,1109,"pplicationContext"]],[1109,1109],[1126,1126]]],[1572075681471,["GJX@GJXAIOU",[[1,1127,"接口定义，基于 BeanFactory 构建，提供"]],[1127,1127],[1152,1152]]],[1572075697714,["GJX@GJXAIOU",[[1,1152,"应用框架级别的服务，同样"]],[1152,1152],[1164,1164]]],[1572075698748,["GJX@GJXAIOU",[[-1,1162,"同样"]],[1164,1164],[1162,1162]]],[1572075703416,["GJX@GJXAIOU",[[1,1162,"通常使用这里；"]],[1162,1162],[1169,1169]]],[1572076208781,["GJX@GJXAIOU",[[1,1169,"自带的多种应用上下文见下："]],[1169,1169],[1182,1182]]],[1572076209964,["GJX@GJXAIOU",[[1,1183,"- \n"]],[1182,1182],[1185,1185]]],[1572076212037,["GJX@GJXAIOU",[[-1,1183,"- "]],[1185,1185],[1183,1183]]],[1572076213283,["GJX@GJXAIOU",[[1,1183,"*   AnnotationConfigApplicationContext;\n*   AnnotationConfigWebApplicationContext;\n*   ClassPathXmlApplicationContext;\n*   FileSystemXmlApplicationContext;\n*   XmlWebApplicationContext。\n\nFileSystemXmlApplicationContext和ClassPathXmlApplicationContext的区别在于：FileSystemXmlApplicationContext在指定文件系统路径下查找，而ClassPathXmlApplicationContext在所有的类路径（包括JAR文件）下查找。\n\n如果想从Java配置中加载应用上下文，可以使用AnnotationConfigApplicationContext。"]],[1183,1183],[1593,1593]]],[1572076217188,["GJX@GJXAIOU",[[1,1183,"  "]],[1186,1186],[1188,1188]]],[1572076217980,["GJX@GJXAIOU",[[1,1225,"  "]],[1229,1229],[1231,1231]]],[1572076219197,["GJX@GJXAIOU",[[1,1270,"    "]],[1274,1274],[1275,1275]]],[1572076220989,["GJX@GJXAIOU",[[-1,1272,"  "]],[1275,1275],[1273,1273]]],[1572076221860,["GJX@GJXAIOU",[[1,1308,"  "]],[1312,1312],[1314,1314]]],[1572076222629,["GJX@GJXAIOU",[[1,1347,"  "]],[1353,1353],[1355,1355]]],[1572076293207,["GJX@GJXAIOU",[[1,1224,"：一个或多个基于Java"]],[1224,1224],[1236,1236]]],[1572076293235,["GJX@GJXAIOU",[[1,1232," "]],[1236,1236],[1237,1237]]],[1572076304326,["GJX@GJXAIOU",[[1,1237," 的配置类中加载 Spring应用"]],[1237,1237],[1254,1254]]],[1572076304355,["GJX@GJXAIOU",[[1,1252," "]],[1254,1254],[1255,1255]]],[1572076306916,["GJX@GJXAIOU",[[1,1255,"上下去"]],[1255,1255],[1258,1258]]],[1572076307709,["GJX@GJXAIOU",[[-1,1257,"去"]],[1258,1258],[1257,1257]]],[1572076308921,["GJX@GJXAIOU",[[1,1257,"文；"]],[1257,1257],[1259,1259]]],[1572076320527,["GJX@GJXAIOU",[[1,1304,"一个或多个基于 Java 的配置类中加载 Spring 应用上下文；"]],[1304,1304],[1338,1338]]],[1572076327676,["GJX@GJXAIOU",[[1,1332,"Web "]],[1332,1332],[1335,1335]]],[1572076332151,["GJX@GJXAIOU",[[1,1380," ****"]],[1380,1380],[1383,1383]]],[1572076333838,["GJX@GJXAIOU",[[-1,1383,"**"]],[1383,1383],[1381,1381]]],[1572076335221,["GJX@GJXAIOU",[[-1,1381,"**"]],[1383,1383],[1381,1381]]],[1572076335796,["GJX@GJXAIOU",[[1,1381,"一个或多个基于 Java 的配置类中加载 Spring 应用上下文；"]],[1381,1381],[1415,1415]]],[1572076348494,["GJX@GJXAIOU",[[-1,1389,"Java"]],[1393,1393],[1389,1389]]],[1572076350599,["GJX@GJXAIOU",[[1,1389,"XML"]],[1389,1389],[1392,1392]]],[1572076354224,["GJX@GJXAIOU",[[1,1380,"咋"]],[1380,1380],[1381,1381]]],[1572076356037,["GJX@GJXAIOU",[[-1,1380,"咋"]],[1381,1381],[1380,1380]]],[1572076361896,["GJX@GJXAIOU",[[1,1381,"在类路径下"]],[1381,1381],[1386,1386]]],[1572076379053,["GJX@GJXAIOU",[[1,1382,"**"],[1,1385,"**"]],[1382,1385],[1382,1389]]],[1572076401060,["GJX@GJXAIOU",[[-1,1402,"的配置类中加载 Spring 应用"]],[1419,1419],[1402,1402]]],[1572076403335,["GJX@GJXAIOU",[[1,1402,"配置"]],[1402,1402],[1404,1404]]],[1572076407777,["GJX@GJXAIOU",[[1,1404,"文件中加载"]],[1404,1404],[1409,1409]]],[1572076419470,["GJX@GJXAIOU",[[1,1412,"定义，把应用上下文的定义"]],[1412,1412],[1424,1424]]],[1572076650063,["GJX@GJXAIOU",[[1,1424,"作为类资源"]],[1424,1424],[1429,1429]]],[1572076656423,["GJX@GJXAIOU",[[1,1469,"：在文件系统"]],[1469,1469],[1475,1475]]],[1572076657591,["GJX@GJXAIOU",[[-1,1471,"文件系统"]],[1475,1475],[1471,1471]]],[1572076658628,["GJX@GJXAIOU",[[1,1471,"****"]],[1471,1471],[1473,1473]]],[1572076660449,["GJX@GJXAIOU",[[1,1473,"文件系统"]],[1473,1473],[1477,1477]]],[1572076664998,["GJX@GJXAIOU",[[1,1479,"中一个"]],[1479,1479],[1482,1482]]],[1572076667311,["GJX@GJXAIOU",[[-1,1479,"中一个"]],[1482,1482],[1479,1479]]],[1572076672293,["GJX@GJXAIOU",[[1,1479,"下一个或多个基于 "]],[1479,1479],[1488,1488]]],[1572076675995,["GJX@GJXAIOU",[[-1,1485,"基于 "]],[1488,1488],[1485,1485]]],[1572076679780,["GJX@GJXAIOU",[[-1,1395,"基于 "]],[1398,1398],[1395,1395]]],[1572076681807,["GJX@GJXAIOU",[[1,1395," "]],[1395,1395],[1396,1396]]],[1572076698481,["GJX@GJXAIOU",[[1,1483," XML 配置文件中加载上下文定义"]],[1483,1483],[1500,1500]]],[1572076707238,["GJX@GJXAIOU",[[1,1500,"；"]],[1500,1500],[1501,1501]]],[1572076714875,["GJX@GJXAIOU",[[-1,1532,"。"]],[1533,1533],[1532,1532]]],[1572076727292,["GJX@GJXAIOU",[[1,1532,"；从未被"]],[1532,1532],[1536,1536]]],[1572076728118,["GJX@GJXAIOU",[[-1,1534,"未被"]],[1536,1536],[1534,1534]]],[1572076730575,["GJX@GJXAIOU",[[1,1534,"web"]],[1534,1534],[1537,1537]]],[1572076730607,["GJX@GJXAIOU",[[1,1534," "]],[1537,1537],[1538,1538]]],[1572076731815,["GJX@GJXAIOU",[[1,1538,"应用"]],[1538,1538],[1540,1540]]],[1572076731845,["GJX@GJXAIOU",[[1,1538," "]],[1540,1540],[1541,1541]]],[1572076741681,["GJX@GJXAIOU",[[1,1541,"下的一个或多个 XMl"]],[1541,1541],[1552,1552]]],[1572076742774,["GJX@GJXAIOU",[[-1,1551,"l"]],[1552,1552],[1551,1551]]],[1572076753333,["GJX@GJXAIOU",[[1,1551,"L 配置文件中加载上下文定义；"]],[1551,1551],[1566,1566]]],[1572076785429,["GJX@GJXAIOU",[[1,1668,"**"],[1,1679,"**"]],[1668,1679],[1668,1683]]],[1572076789354,["GJX@GJXAIOU",[[1,1716,"**"],[1,1732,"**"]],[1716,1732],[1716,1736]]],[1572076794414,["GJX@GJXAIOU",[[1,1568,"- "]],[1568,1568],[1570,1570]]],[1572076858564,["GJX@GJXAIOU",[[1,1802,"\n"]],[1801,1801],[1802,1802]]],[1572076858996,["GJX@GJXAIOU",[[1,1803,"\n"]],[1802,1802],[1803,1803]]],[1572076861760,["GJX@GJXAIOU",[[1,1803,"示例："]],[1803,1803],[1806,1806]]],[1572076862167,["GJX@GJXAIOU",[[1,1807,"\n"]],[1806,1806],[1807,1807]]],[1572076863158,["GJX@GJXAIOU",[[1,1807,"如何加载一个FileSystemXmlApplicationContext（从文件路径加载）：\n\n1.  `ApplicationContext context =  new  FileSystemXmlApplicationContext(\"c:/knight.xml\");`\n\n使用ClassPathXmlapplicationContext加载（从类路径加载）：\n\n1.  `ApplicationContext context =  new  ClassPathXmlapplicationContext(\"knight.xml\");`\n\n从java配置类加载应用上下文：\n\n1.  `ApplicationContext context =  new  AnnotationConfigApplicationContext(com.springinaction.knights.config.KnightConfig.class);`"]],[1807,1807],[2229,2229]]],[1572076866484,["GJX@GJXAIOU",[[-1,1856,"1. "]],[1856,1859],[1856,1856]]],[1572076866924,["GJX@GJXAIOU",[[-1,1855,"\n"]],[1856,1856],[1855,1855]]],[1572076870596,["GJX@GJXAIOU",[[-1,1988,"\n1. "]],[1988,1992],[1988,1988]]],[1572076872797,["GJX@GJXAIOU",[[1,1803,"- "]],[1803,1803],[1805,1805]]],[1572076877150,["GJX@GJXAIOU",[[-1,2093,"1. "]],[2093,2096],[2093,2093]]],[1572076877511,["GJX@GJXAIOU",[[-1,2092,"\n"]],[2093,2093],[2092,2092]]],[1572076880021,["GJX@GJXAIOU",[[1,2220," \n"]],[2219,2219],[2221,2221]]],[1572076913803,["GJX@GJXAIOU",[[1,2221,"应用上下文准备就绪后，可以调用上下文的getBean()方法从Spring容器中获取Bean"]],[2221,2221],[2267,2267]]],[1572076915652,["GJX@GJXAIOU",[[1,2221,"\n "]],[2221,2221],[2223,2223]]],[1572076928230,["GJX@GJXAIOU",[[1,2297,"\n"]],[2297,2297],[2298,2298]]],[1572076928349,["GJX@GJXAIOU",[[1,2298,"\n"]],[2298,2298],[2299,2299]]],[1572076950309,["GJX@GJXAIOU",[[1,2299,"\n"]],[2298,2298],[2299,2299]]],[1572076950747,["GJX@GJXAIOU",[[1,2300,"\n"]],[2299,2299],[2300,2300]]],[1572076953735,["GJX@GJXAIOU",[[1,2299,"#### （）"]],[2299,2299],[2306,2306]]],[1572076954902,["GJX@GJXAIOU",[[1,2305,"二 "]],[2305,2305],[2307,2307]]],[1572076956478,["GJX@GJXAIOU",[[-1,2306," "]],[2307,2307],[2306,2306]]],[1572076958125,["GJX@GJXAIOU",[[1,2307,"### bean的生命周期\n\n使用new对bean进行实例化，一旦不再被使用，将由Java自动进行垃圾回收。\n\n![bean的生命周期](https://leanote.com/api/file/getImage?fileId=5c456d43ab6441152a000a38)"]],[2307,2307],[2446,2446]]],[1572076961709,["GJX@GJXAIOU",[[-1,2307,"### "]],[2307,2311],[2307,2307]]],[1572077056155,["GJX@GJXAIOU",[[-1,2359,"![bean的生命周期](https://leanote.com/api/file/getImage?fileId=5c456d43ab6441152a000a38)"]],[2359,2442],[2359,2359]]],[1572077057341,["GJX@GJXAIOU",[[1,2359,"1.  Spring对bean进行实例化；\n2.  Spring将值和bean的引用注入到bean对应的属性中；\n3.  如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBeanName()方法；\n4.  如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory实例传入；\n5.  如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；\n6.  如果bean实现了BeanPostProcessor接口，Spring将调用它的postProcessBeforeInitialization()方法；\n7.  如果bean实现了InitializingBean接口，Spring将调用它的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法或使用了@PostConstruct注解，该方法也会被调用；\n8.  如果bean实现了BeanPostProcessor接口，Spring将调用postProcessAfterInitialization()方法；\n9.  此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到应用上下文被销毁；\n10.  如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroy-method声明了销毁方法或使用@PreDestory，该方法也会被调用。"]],[2359,2359],[3108,3108]]],[1572077065690,["GJX@GJXAIOU",[[1,2358,"![Bean 的生命周期]($resource/Bean%20%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)"]],[2358,2358],[2440,2440]]],[1572077094277,["GJX@GJXAIOU",[[1,3212,"\n"]],[3211,3211],[3212,3212]]],[1572077177860,["GJX@GJXAIOU",[[1,3212,"1.  Spring核心容器\n    是Spring框架中最核心的部分，管理Spring应用中bean的创建、配置和管理。在此模块中包含了Spring bean工厂，为Spring提供了DI功能。\n2.  Spring的AOP模块\n    是Spring应用系统中开发切面的基础。与DI一样，AOP可以帮助应用对象解耦。借助AOP可以将遍布系统的关注点（如事务和安全）从应用对象中解耦出来。\n3.  数据访问与继承\n    使用JDBC编写代码通常导致大量的样板式代码。Spring的JDBC和DAO（Data Access Object）模块抽象了这些样板式代码。还在多种数据库服务的错误信息上构建了一个语义丰富的异常层。\n4.  Web和远程调用：\n    MVC（Model-View-Controller）模式榜知用户将界面逻辑和应用逻辑分离。（SpringMVC）\n5.  Instrumentation模块提供了为JVM添加代理的功能。\n6.  测试\n    Spring为使用JNDI、Servlet和Portlet编写单元测试提供了一系列的mock对象实现。"]],[3212,3212],[3699,3699]]],[1572077181692,["GJX@GJXAIOU",[[1,3212,"\n"]],[3210,3210],[3211,3211]]],[1572077188579,["GJX@GJXAIOU",[[1,3211,"![Spring 模块]($resource/Spring%20%E6%A8%A1%E5%9D%97.png)"]],[3211,3211],[3267,3267]]],[1572077243775,["GJX@GJXAIOU",[[1,3580,"同样 "]],[3580,3580],[3583,3583]]],[1572077250550,["GJX@GJXAIOU",[[1,3583,"Spring 的ORM"]],[3583,3583],[3594,3594]]],[1572077250595,["GJX@GJXAIOU",[[1,3591," "]],[3594,3594],[3595,3595]]],[1572077261270,["GJX@GJXAIOU",[[1,3595," 模块是建立在 DAO的"]],[3595,3595],[3607,3607]]],[1572077261314,["GJX@GJXAIOU",[[1,3606," "]],[3607,3607],[3608,3608]]],[1572077290968,["GJX@GJXAIOU",[[1,3608,"支持之上的，Spring 的事务管理支持所有的 ORM 框架和JDBC"]],[3608,3608],[3643,3643]]],[1572077291012,["GJX@GJXAIOU",[[1,3639," "]],[3643,3643],[3644,3644]]],[1572077291437,["GJX@GJXAIOU",[[1,3644,"。"]],[3644,3644],[3645,3645]]],[1572077332076,["GJX@GJXAIOU",[[1,3821,"\n"]],[3821,3821],[3822,3822]]],[1572077332372,["GJX@GJXAIOU",[[1,3822,"\n"]],[3822,3822],[3823,3823]]],[1572077332532,["GJX@GJXAIOU",[[1,3823,"\n"]],[3823,3823],[3824,3824]]],[1572077333073,["GJX@GJXAIOU",[[1,3824,"\n"]],[3824,3824],[3825,3825]]],[1572077333220,["GJX@GJXAIOU",[[1,3825,"\n"]],[3825,3825],[3826,3826]]],[1572079707796,["GJX@GJXAIOU",[[1,3843,"。。。。"]],[3843,3843],[3847,3847]]],[1572079710075,["GJX@GJXAIOU",[[-1,3825,"\n"]],[3825,3825],[3824,3824]]],[1572079710187,["GJX@GJXAIOU",[[-1,3824,"\n"]],[3824,3824],[3823,3823]]],[1572079795030,["GJX@GJXAIOU",[[1,3862,"\n"]],[3861,3861],[3862,3862]]],[1572079795534,["GJX@GJXAIOU",[[1,3862,"在Spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要相互协作的对象引用赋予各个对象。\n\n创建应用对象之间协作关系的行为通常称为装配（wiring），这也是依赖注入的本质。\n\n# 2.1 Spring配置的可选方案\n\nSpring提供了三种主要的装配机制：\n\n*   在XML中进行显式配置；\n*   在Java中进行显式配置；\n*   隐式的bean发现机制和自动装配。\n\n作者建议尽可能的使用自动装配的机制。显式配置越少越好，当必须要显式配置bean的时候（比如，有些源码不是由你来维护的，而当你需要为这些代码配置bean的时候），推荐使用类型安全并且比XML更加强大的JavaConfig。最后，只有当你想要使用便利的XML命名空间，并且在JavaConfig中没有同样的实现是才应该使用XML。\n\n# 2.2 自动化装配bean\n\nSpring从两个角度实现自动化装配：\n\n*   组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean；\n*   自动装配（autowiring）：Spring自动满足bean之间的依赖。\n\n## 2.2.1 创建可被发现的bean\n\n在类上使用@Component注解，这个注解表明该类会作为组件类，并告知Spring要为这个类创建bean。\n\n组件扫描默认是不启用的，还需要显式配置一下Spring，从而命令它去寻找带有@Component注解的类并为其创建bean。\n\n```\n@Configuation\n@ComponentScan\npublic class CDPlayerConfig {\n}\n\n```\n\n如果没有其他配置，@ComponentScan默认会扫描与配置类相同的包。\n\n如果想使用XML来启用组件扫描，可以使用Spring context命名空间的[context:component-scan](context:component-scan)元素。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:Context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\">\n\n        <context:component-scan base-package=\"soundsystem\"/>\n</beans>\n\n```\n\n测试组件扫描代码：\n\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes=CDPlayerConfig.class)\npublic class CDPlayerText {\n    @Autowired\n    private CompactDisc cd;\n\n    @Test\n    public void cdShouldNotBeNull() {\n        assertNotNull(cd)\n    }\n}\n\n```\n\nCDPlayerTest使用了Spring的SpringJUnit4ClassRunner，以便在测试开始的时候自动创建Spring的应用上下文。注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。\n\n## 2.2.2 为组件扫描的bean命名\n\n在组件扫描中如果没有明确的设置ID，Spring会根据类名为其指定一个ID。这个bean所给定的ID是首字母变为小写的类名。\n\n如果想为这个bean设置不同的ID，需要将其作为值传递给@Component注解。\n\n```\n@Component(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n\n```\n\n另外一种bean命名方式使用Java依赖注入规范中提供的@Named注解：\n\n```\n@Named(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n\n```\n\nSpring支持将@Named作为@Component注解的替代方案。两者之间由一些细微的差异，但在大多数场景中可以互换。\n\n本书的作者更喜欢@Component。\n\n## 2.2.3 设置组件扫描的基础包\n\n如果没有为@ComponentScan设置属性，按照默认规则，它会以配置类所在的包作为基础包来扫描逐渐。\n\n如果想扫描不同的包，在@ComponentScan的value属性中指定包名即可。\n\n```\n@Configuraion\n@ComponentScan(\"soundsystem\")\npublic class CDPlayerConfig{\n}\n\n```\n\n如果想更加清晰的表明所设置的是基础包，可以通过basePackages属性进行配置：\n\n```\n@Configuration\n@ComponentScan(basePackages=\"soundsystem\")\npublic class CDPlayerConfig{}\n\n```\n\nbasePackages属性可以设置多个包，赋值一个数组即可：\n\n```\n@Configuration\n@ComponentScan(basePackages={\"soundsystem\", \"video\"})\npublic class CDPlayerConfig { }\n\n```\n\n除了将包设置为简单的String类型外，@ComponentScan哈提供了另外一种方法，将其指定为包中所包含的类或接口：\n\n```\n@Configuration\n@ComponentScan(basePackageClasses={CDPlayer.class, DVDPlayer.class})\npublic class CDPlayerConfig { }\n\n```\n\n## 2.2.4 通过为bean添加注解实现自动装配\n\n可以在构造器、setter方法、任何方法上使用@Autowired注解，Spring会尝试满足方法参数上所声明的依赖。假如有且只有一个bean匹配依赖需求，那么这个bean将会被装配进来。\n\n如果没有匹配的bean，那么在应用上下文创建的时候会抛出异常。可以将@Autowired的required属性设置为false，此时Spring会尝试自动装配，但是如果没有匹配的bean的话该属性将会为null。\n\n如果有多个bean都满足依赖关系，Spring将会抛出异常。\n\n@Autowired是Spring特有的注解。可以使用@Inject注解替代。\n\n# 2.3 通过Java代码装配Bean\n\n显式的装配方式有两种：Java和XML。\n\n## 2.3.1 创建配置类\n\n@Configuration注解表明这个类是一个配置类，该类应该包含在Spring应用上下文中如何创建bean的细节。\n\n## 2.3.2 声明简单bean\n\n要在JavaConfig中声明bean，需要编写一个方法，这个方法会创建所需类型的实例，然后给这个方法添加@Bean注解。\n\n@Bean注解会告诉Spring这个方法将返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。\n\n默认情况下，bean的ID与方法名一致。如果想为其设置一个不同的名字，可以重命名该方法，也可以通过@Bean的name属性指定。\n\n## 2.3.3 借助JavaConfig实现注入\n\n在JavaConfig中装配bean的最简单方式就是引用创建bean的方法。在方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接返回该方法所创建的bean，而不是每次都对其进行实际的调用。\n\n通过调用方法引用bean的方式有点令人困惑。还有一种理解起来更简单的方式：\n\n```\n@Bean\npublic CDPlayer cdPlayer(CompactDisc compactDisc) {\n    return new CDPlayer(compactDisc);\n}\n\n```\n\ncdPlaye()方法请求一个CompactDisc作为参数，当Spring调用cdPlayer()创建CDPlayer bean的时候，它会自动装配一个CompactDisc到配置方法之中。\n\n通过这种方式引用其他的bean通常是最佳的选择，因为它不会要求将CompactDisc声明到同一个配置类之中。在这里甚至没有要求CompactDisc必须要在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者通过XML来进行配置。可以将配置分散到多个配置类、XML文件以及自动扫面和装配bean之中。\n\n# 2.4 通过XML装配Bean\n\n## 2.4.1 创建XML配置规范\n\n在XML配置中，要创建一个XML文件，并且要以<beans>元素为根。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\">\n\n        <!-- 配置详情 -->\n</beans>\n\n```\n\n## 2.4.2 声明一个简单的<bean>\n\n<bean>元素类似于JavaConfig中的@Bean注解。\n\n如果没有给定ID，所以这个bean将会根据全限定类名来进行命名。例如“soundsystem.SgtPeppers#0“，其中“#0”是一个计数形式，用来区分相同类型的其他bean。\n\n## 2.4.3 借助构造器注入初始化bean\n\n构造器注入有两种基本的配置方案可供选择：\n\n*   <constructon-arg>元素；\n*   使用Spring 3.0 所引入的c-命名空间。\n\n### 构造器注入bean引用\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\">\n    <constructor-arg ref=\"compactDisc\"/>\n</bean>\n\n```\n\nc-命名空间的schema:\n\n```\nxmlns:c=\"http://www.springframework.org/schema/c\"\n\n```\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    c:cd-ref=\"compactDisc\" />\n\n```\n\n属性以c:开头，也就是命名空间的前缀。接下来是要装配的构造器参数名，在此之后是-ref，这是一个命名约定，告诉Spring正在装配的是一个bean应用。\n\n可以使用参数在整个参数列表中的位置来替代参数名：\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    c:_0-ref=\"compactDisc\" />\n\n```\n\n因为在XML中不允许数字作为属性的第一个字符，因此必须要添加一个下划线作为前缀。\n\n如果只有一个参数，不用标示参数：\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\"\n    c:_-ref=\"compactDisc\" />\n\n```\n\n### 将字面量注入到构造器中\n\n```\n<bean id=\"compactDisc\"\n    class=\"soundsystem.BlankDisc\">\n    <constructor-arg value=\"sgt. Pepper\" />\n</bean>\n\n```\n\n依然使用<constructor-arg>元素进行注入，但是使用了value属性。\n\n```\n<bean id=\"compactDisc\"\n    class=\"soundsystem.BlankDisc\"\n    c:_title=\"sgt. Pepper\"/>\n\n```\n\n使用c-命名空间装配字面量与装配引用的区别在于属性名中去掉了-ref后缀。\n\n### 装配集合\n\n<constructor-arg>可以将集合装配到构造器参数重，而c-命名空间不能。\n\n可以使用<null/>元素将null传递给构造器。\n\n可以使用<list>元素声明一个列表：\n\n```\n<constructor-arg>\n    <list>\n        <value>.....</value>\n        <value>......</value>\n    </list>\n</constructor-arg>\n\n```\n\n<list>元素是<constructor-arg>的子元素，这表明一个包含值的列表将会传递到构造器中。其中<value>元素用来指定列表中的每个元素。\n\n与之类似，可以使用<ref>元素代替<value>，实现bean引用列表的装配。\n\n可以用相同的方式使用<set>元素。<set>和<list>元素的区别不大，无论在哪种情况下，<set>或<list>都可以用来装配List、Set甚至是数组。\n\n## 2.4.4 设置属性\n\n<property>元素为属性的setter方法所提供的功能与<constructor-arg>元素为构造器提供的功能是一样的。\n\nSpring提供了p-命名空间作为<property>元素的替代方案。p-命名空间的schema：\n\n```\nxmlns:p=\"http://www.springframework.org/schema/p\"\n\n```\n\nutil-命名空间所提供的功能之一是[util:list](util:list)元素，它会创建一个列表的bean。\n\n```\nxmlns:util=\"http://www.springframework.org/schema/util\"\n\n```\n\n```\n<util:list id=\"trackList\">\n    <value>......</value>\n    <value>.....</value>\n</util:list>\n\n```\n\n下表展示了Spring util-命名空间中的元素\n\n| 元素 | 描述 |\n| --- | --- |\n| [util:constant](util:constant) | 引用某个类型的public static域，并将其暴露为bean |\n| [util:list](util:list) | 创建一个java.util.List类型的bean，其中包含值或引用 |\n| [util:map](util:map) | 创建一个java.util.Map类型的bean，其中包含值或引用 |\n| [util:properties](util:properties) | 创建一个java.util.Propertie类型的bean |\n| [util:property-path](util:property-path) | 引用一个bean的属性（或内嵌属性），并将其暴露为bean |\n| [util:set](util:set) | 创建一个java.util.Set类型的bean，其中包含值或引用 |\n\n# 2.5 导入和混合配置\n\n## 2.5.1 在JavaConfig中引用XML配置\n\n使用@Import注解引用其他JavaConfig配置，使用@ImportResource注解引入XML配置。\n\n```\n@Configuration\n@Import(CDPlayerConfig.class)\n@ImportResource(\"classpath:cd-config.xml\")\npublic class SoundSystemConfig {\n\n}\n\n```\n\n## 2.5.2 在XML配置中引用JavaConfig\n\n在XML中可以使用<import>元素来引用其他XML配置。\n\n将JavaConfig作为bean使用<bean>元素导入XML配置文件。"]],[3862,3862],[11307,11307]]],[1572079842030,["GJX@GJXAIOU",[[1,3862,"原来创建应用对象直接"]],[3862,3862],[3872,3872]]],[1572079842767,["GJX@GJXAIOU",[[-1,3870,"直接"]],[3872,3872],[3870,3870]]],[1572079861856,["GJX@GJXAIOU",[[1,3870,"之间的关联关系通常是还是用"]],[3870,3870],[3883,3883]]],[1572079864701,["GJX@GJXAIOU",[[-1,3877,"通常是还是用"]],[3883,3883],[3877,3877]]],[1572079881765,["GJX@GJXAIOU",[[1,3877,"通常使用构造器或者查找，导致代码结构复杂。"]],[3877,3877],[3898,3898]]],[1572079896789,["GJX@GJXAIOU",[[1,3957,"**"],[1,3978,"**"]],[3957,3978],[3957,3982]]],[1572080170757,["GJX@GJXAIOU",[[-1,4006,"2.1"]],[4009,4009],[4006,4006]]],[1572080173683,["GJX@GJXAIOU",[[1,4005,"##"]],[4006,4006],[4022,4022]]],[1572080177085,["GJX@GJXAIOU",[[1,4009,"（）"]],[4009,4009],[4011,4011]]],[1572080179439,["GJX@GJXAIOU",[[1,4010,"一"]],[4010,4010],[4011,4011]]],[1572080191235,["GJX@GJXAIOU",[[1,4110,"**"],[1,4123,"**"]],[4110,4123],[4110,4127]]],[1572080199444,["GJX@GJXAIOU",[[1,4137,"**"],[1,4152,"**"]],[4137,4152],[4137,4156]]],[1572080202203,["GJX@GJXAIOU",[[1,4194,"**"],[1,4223,"**"]],[4194,4223],[4194,4227]]],[1572080229781,["GJX@GJXAIOU",[[1,4026,"Spring "]],[4026,4026],[4033,4033]]],[1572080233763,["GJX@GJXAIOU",[[-1,4032," "]],[4033,4033],[4032,4032]]],[1572080234638,["GJX@GJXAIOU",[[1,4032,"容器"]],[4032,4032],[4034,4034]]],[1572080234750,["GJX@GJXAIOU",[[1,4032," "]],[4034,4034],[4035,4035]]],[1572080243895,["GJX@GJXAIOU",[[1,4035,"负责创建应用程序"]],[4035,4035],[4043,4043]]],[1572080264687,["GJX@GJXAIOU",[[1,4043,"中的 Bean 并通过 DI 来协调这些对象之间的关系"]],[4043,4043],[4070,4070]]],[1572080461980,["GJX@GJXAIOU",[[1,4070,"，大师"]],[4070,4070],[4073,4073]]],[1572080467110,["GJX@GJXAIOU",[[-1,4071,"大师"]],[4073,4073],[4071,4071]]],[1572080483937,["GJX@GJXAIOU",[[1,4071,"但是得告诉 Spring 要创建"]],[4071,4071],[4087,4087]]],[1572080490878,["GJX@GJXAIOU",[[1,4087,"哪些 Bean并且"]],[4087,4087],[4096,4096]]],[1572080490989,["GJX@GJXAIOU",[[1,4094," "]],[4096,4096],[4097,4097]]],[1572080497998,["GJX@GJXAIOU",[[1,4097,"如何将他们"]],[4097,4097],[4102,4102]]],[1572080498714,["GJX@GJXAIOU",[[-1,4101,"们"]],[4102,4102],[4101,4101]]],[1572080505831,["GJX@GJXAIOU",[[1,4101,"它们装配到一起。"]],[4101,4101],[4109,4109]]],[1572080532716,["GJX@GJXAIOU",[[1,4128,"（）"]],[4128,4128],[4130,4130]]],[1572080538351,["GJX@GJXAIOU",[[1,4129,"可以互相搭配使用"]],[4129,4129],[4137,4137]]],[1572080545933,["GJX@GJXAIOU",[[-1,4378,"2.2"]],[4381,4381],[4378,4378]]],[1572080547299,["GJX@GJXAIOU",[[1,4378,"（）"]],[4378,4378],[4380,4380]]],[1572080548576,["GJX@GJXAIOU",[[1,4379,"二"]],[4379,4379],[4380,4380]]],[1572080550027,["GJX@GJXAIOU",[[1,4377,"##"]],[4380,4380],[4393,4393]]],[1572080556446,["GJX@GJXAIOU",[[-1,4415,"\n"]],[4415,4415],[4414,4414]]],[1572080901371,["GJX@GJXAIOU",[[1,4736,"**"],[1,4763,"**"]],[4736,4763],[4736,4767]]],[1572080905989,["GJX@GJXAIOU",[[1,4719,"、"]],[4719,4719],[4720,4720]]],[1572080906072,["GJX@GJXAIOU",[[1,4720,"\n"]],[4720,4720],[4721,4721]]],[1572080908098,["GJX@GJXAIOU",[[-1,4719,"、"]],[4720,4720],[4719,4719]]],[1572080910427,["GJX@GJXAIOU",[[-1,4722,"\n"]],[4722,4722],[4721,4721]]],[1572080963699,["GJX@GJXAIOU",[[1,4592,"\n"]],[4591,4591],[4592,4592]]],[1572080966760,["GJX@GJXAIOU",[[1,4591,"···"]],[4591,4591],[4594,4594]]],[1572080967657,["GJX@GJXAIOU",[[-1,4591,"···"]],[4594,4594],[4591,4591]]],[1572080972604,["GJX@GJXAIOU",[[1,4591,"```java"]],[4591,4591],[4598,4598]]],[1572080972724,["GJX@GJXAIOU",[[1,4600,"\n"]],[4598,4598],[4599,4599]]],[1572080972925,["GJX@GJXAIOU",[[1,4601,"\n"]],[4599,4599],[4600,4600]]],[1572080973756,["GJX@GJXAIOU",[[1,4600,"```"]],[4600,4600],[4603,4603]]],[1572081003811,["GJX@GJXAIOU",[[-1,4591,"```java\n\n``"],[1,4602,"定义一个CD机的类：\n\n1.  `package soundsystem;`\n2.  `public iterface CompacDisc  {`\n3.  `void play();`\n4.  `}`\n\n*   带有@Component注解的CompactDisc实现类SgtPeppers\n\n1.  `package soundsystem;`\n2.  `import org.springframework.stereotype.Component;"],[1,4604,"\n4.  `@Component`\n5.  `public  class  SgtPeppers  implements  CompactDisc  {`\n6.  `private  String title =  \"Sgt. Pepper's Lonely Heart`"]],[4591,4604],[4957,4957]]],[1572081006240,["GJX@GJXAIOU",[[1,4591,"sh"]],[4591,4591],[4593,4593]]],[1572081006283,["GJX@GJXAIOU",[[-1,4592,"h"],[1,4593," "]],[4593,4593],[4592,4592]]],[1572081006504,["GJX@GJXAIOU",[[1,4592,"i"]],[4592,4592],[4593,4593]]],[1572081006597,["GJX@GJXAIOU",[[-1,4592,"i"],[1,4593,"h"]],[4593,4593],[4593,4593]]],[1572081006957,["GJX@GJXAIOU",[[-1,4591,"sh"]],[4593,4593],[4591,4591]]],[1572081008083,["GJX@GJXAIOU",[[1,4591,"sh"]],[4591,4591],[4593,4593]]],[1572081009293,["GJX@GJXAIOU",[[1,4592,"i"],[-1,4592,"hi"]],[4593,4593],[4592,4592]]],[1572081010360,["GJX@GJXAIOU",[[1,4592,"h"],[-1,4591,"sh "]],[4592,4592],[4591,4591]]],[1572081010879,["GJX@GJXAIOU",[[1,4591,"```java\n\n``"],[-1,4591,"定义一个CD机的类：\n\n1.  `package soundsystem;`\n2.  `public iterface CompacDisc  {`\n3.  `void play();`\n4.  `}`\n\n*   带有@Component注解的CompactDisc实现类SgtPeppers\n\n1.  `package soundsystem;`\n2.  `import org.springframework.stereotype.Component;"],[-1,4821,"\n4.  `@Component`\n5.  `public  class  SgtPeppers  implements  CompactDisc  {`\n6.  `private  String title =  \"Sgt. Pepper's Lonely Heart`"]],[4957,4957],[4591,4604]]],[1572081012482,["GJX@GJXAIOU",[[-1,4591,"```java\n\n```\n"]],[4591,4604],[4591,4591]]],[1572081013651,["GJX@GJXAIOU",[[1,4592,"\n"]],[4591,4591],[4592,4592]]],[1572081015858,["GJX@GJXAIOU",[[1,4591,"shili"]],[4591,4591],[4596,4596]]],[1572081017427,["GJX@GJXAIOU",[[-1,4591,"shili"]],[4596,4596],[4591,4591]]],[1572081019238,["GJX@GJXAIOU",[[1,4591,"示例："]],[4591,4591],[4594,4594]]],[1572081019539,["GJX@GJXAIOU",[[1,4596,"\n"]],[4594,4594],[4595,4595]]],[1572081022324,["GJX@GJXAIOU",[[1,4595,"定义一个CD机的类：\n\npackage soundsystem;\npublic iterface CompacDisc {\n    void play();\n}\n带有@Component注解的CompactDisc实现类SgtPeppers\npackage soundsystem;\nimport org.springframework.stereotype.Component;\n@Component\npublic class SgtPeppers implements CompactDisc {\n    private String title = \"Sgt. Pepper's Lonely Heart"]],[4595,4595],[4900,4900]]],[1572081025888,["GJX@GJXAIOU",[[1,4606,"··"]],[4606,4606],[4608,4608]]],[1572081027371,["GJX@GJXAIOU",[[-1,4606,"··"]],[4608,4608],[4606,4606]]],[1572081030110,["GJX@GJXAIOU",[[1,4606,"```java"]],[4606,4606],[4613,4613]]],[1572081032653,["GJX@GJXAIOU",[[1,4683,"\n"]],[4682,4682],[4683,4683]]],[1572081033541,["GJX@GJXAIOU",[[1,4683,"```"]],[4683,4683],[4686,4686]]],[1572081038515,["GJX@GJXAIOU",[[1,4727,"\n"]],[4727,4727],[4728,4728]]],[1572081041467,["GJX@GJXAIOU",[[1,4727,"```java"]],[4727,4727],[4734,4734]]],[1572081044174,["GJX@GJXAIOU",[[1,4920,"1"]],[4920,4920],[4921,4921]]],[1572081045294,["GJX@GJXAIOU",[[-1,4920,"1"]],[4921,4921],[4920,4920]]],[1572081046044,["GJX@GJXAIOU",[[1,4920,"```"]],[4920,4920],[4923,4923]]],[1572081107020,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4923,"\n"]],[4594,4594],[4923,4923]]],[1572081107020,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4923,"\n"]],[4923,4923],[4594,4594]]],[1572081048467,["GJX@GJXAIOU",[[1,4920,"\n"]],[4920,4920],[4921,4921]]],[1572081051397,["GJX@GJXAIOU",[[1,4920,"}"]],[4920,4920],[4921,4921]]],[1572081062638,["GJX@GJXAIOU",[[1,4994,"\n"]],[4993,4993],[4994,4994]]],[1572081075232,["GJX@GJXAIOU",[[1,4994,"package soundsystem;"]],[4994,4994],[5014,5014]]],[1572081226907,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"]],[4594,4594],[5014,5014]]],[1572081226907,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"]],[5014,5014],[4594,4594]]],[1572081208133,["GJX@GJXAIOU",[[-1,5081,"\n"]],[5082,5082],[5081,5081]]],[1572081212407,["GJX@GJXAIOU",[[1,5081,"zh"]],[5081,5081],[5083,5083]]],[1572081212440,["GJX@GJXAIOU",[[-1,5082,"h"],[1,5083," "]],[5083,5083],[5082,5082]]],[1572081212624,["GJX@GJXAIOU",[[1,5082,"e"]],[5082,5082],[5083,5083]]],[1572081212718,["GJX@GJXAIOU",[[-1,5082,"e"],[1,5083,"h"]],[5083,5083],[5083,5083]]],[1572081213327,["GJX@GJXAIOU",[[-1,5081,"zh"]],[5083,5083],[5081,5081]]],[1572081214118,["GJX@GJXAIOU",[[-1,5080,"\n"]],[5081,5081],[5080,5080]]],[1572081215108,["GJX@GJXAIOU",[[1,5080,"\n"]],[5080,5080],[5081,5081]]],[1572081226112,["GJX@GJXAIOU",[[1,5082,"上面是使用 Java  "]],[5082,5082],[5093,5093]]],[1572081287061,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5078,"`"],[-1,5094,"\n"]],[4594,4594],[5094,5094]]],[1572081287061,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5077,"`"],[1,5094,"\n"]],[5094,5094],[4594,4594]]],[1572081232046,["GJX@GJXAIOU",[[1,5093,"代码定义"]],[5093,5093],[5097,5097]]],[1572081232735,["GJX@GJXAIOU",[[1,5098," "]],[5097,5097],[5098,5098]]],[1572081234584,["GJX@GJXAIOU",[[1,5098,"Spring的"]],[5098,5098],[5105,5105]]],[1572081234697,["GJX@GJXAIOU",[[1,5104," "]],[5105,5105],[5106,5106]]],[1572081238120,["GJX@GJXAIOU",[[1,5106,"装配规则，"]],[5106,5106],[5111,5111]]],[1572081270698,["GJX@GJXAIOU",[[1,5150,"以及该包下所有子包，查找所有代码"]],[5150,5150],[5166,5166]]],[1572081271423,["GJX@GJXAIOU",[[-1,5164,"代码"]],[5166,5166],[5164,5164]]],[1572081286746,["GJX@GJXAIOU",[[1,5164,"带有 @Component 注解的类"]],[5164,5164],[5182,5182]]],[1572081347004,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"]],[4594,4594],[5182,5182]]],[1572081347004,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"]],[5182,5182],[4594,4594]]],[1572081306717,["GJX@GJXAIOU",[[1,5187,"上面对应的，"]],[5187,5187],[5193,5193]]],[1572081316347,["GJX@GJXAIOU",[[-1,5255,"](context:component-scan)"]],[5255,5280],[5255,5255]]],[1572081317302,["GJX@GJXAIOU",[[1,5255,">"]],[5255,5255],[5256,5256]]],[1572081321198,["GJX@GJXAIOU",[[-1,5232,"["]],[5233,5233],[5232,5232]]],[1572081321613,["GJX@GJXAIOU",[[1,5232,"<"]],[5232,5232],[5233,5233]]],[1572081322991,["GJX@GJXAIOU",[[1,5232,"`"]],[5232,5232],[5233,5233]]],[1572081326661,["GJX@GJXAIOU",[[1,5257,"`"]],[5257,5257],[5258,5258]]],[1572081330002,["GJX@GJXAIOU",[[-1,5262,"\n"]],[5262,5262],[5261,5261]]],[1572081407009,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"]],[4594,4594],[5258,5258]]],[1572081407009,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"]],[5258,5258],[4594,4594]]],[1572081377767,["GJX@GJXAIOU",[[1,5851,"()"]],[5851,5851],[5853,5853]]],[1572081379538,["GJX@GJXAIOU",[[-1,5851,"()"]],[5853,5853],[5851,5851]]],[1572081380050,["GJX@GJXAIOU",[[1,5851,"（）"]],[5851,5851],[5853,5853]]],[1572081393717,["GJX@GJXAIOU",[[1,5852,"即看配置是否起作用"]],[5852,5852],[5861,5861]]],[1572081395403,["GJX@GJXAIOU",[[-1,5864,"\n"]],[5864,5864],[5863,5863]]],[1572081406609,["GJX@GJXAIOU",[[1,6142," "]],[6142,6142],[6143,6143]]],[1572081467070,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[-1,6142," "],[1,6144," "]],[4594,4594],[6145,6145]]],[1572081467070,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[1,6141," "],[-1,6142," "]],[6145,6145],[4594,4594]]],[1572081407684,["GJX@GJXAIOU",[[1,6143,"·"]],[6143,6143],[6144,6144]]],[1572081408948,["GJX@GJXAIOU",[[-1,6143,"·"]],[6144,6144],[6143,6143]]],[1572081409447,["GJX@GJXAIOU",[[1,6143,"`"]],[6143,6143],[6144,6144]]],[1572081411501,["GJX@GJXAIOU",[[1,6167,"`"]],[6167,6167],[6168,6168]]],[1572081443971,["GJX@GJXAIOU",[[1,6246,"yinwei"]],[6246,6246],[6252,6252]]],[1572081447228,["GJX@GJXAIOU",[[-1,6246,"yinwei"]],[6252,6252],[6246,6246]]],[1572081466782,["GJX@GJXAIOU",[[1,6246,"因为 CDPlayerConfig 类中包含了"]],[6246,6246],[6269,6269]]],[1572081527024,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6142,"的"],[-1,6144,"的"],[-1,6167,"`"],[1,6169,"`"],[1,6246,"。"],[-1,6269,"。"]],[4594,4594],[6269,6269]]],[1572081527024,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6141,"的"],[1,6144,"的"],[1,6166,"`"],[-1,6167,"`"],[-1,6245,"。"],[1,6269,"。"]],[6269,6269],[4594,4594]]],[1572081511612,["GJX@GJXAIOU",[[1,6269," @ComponentScan，因此最终的应用上下文中应该包含 CompactDisc  Bean；"]],[6269,6269],[6319,6319]]],[1572081587024,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5015,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6142,"的"],[-1,6144,"的"],[-1,6167,"`"],[1,6169,"`"],[1,6246,"。"],[-1,6319,"。"]],[4594,4594],[6319,6319]]],[1572081587024,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5015,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6141,"的"],[1,6144,"的"],[1,6166,"`"],[-1,6167,"`"],[-1,6245,"。"],[1,6319,"。"]],[6319,6319],[4594,4594]]],[1572081529199,["GJX@GJXAIOU",[[1,6084,"\n    "]],[6079,6079],[6084,6084]]],[1572081530225,["GJX@GJXAIOU",[[1,6084,"、、"]],[6084,6084],[6086,6086]]],[1572081530924,["GJX@GJXAIOU",[[-1,6084,"、、"]],[6086,6086],[6084,6084]]],[1572081539790,["GJX@GJXAIOU",[[1,6084,"// 测试断言 长度"]],[6084,6084],[6094,6094]]],[1572081540720,["GJX@GJXAIOU",[[-1,6092,"长度"]],[6094,6094],[6092,6092]]],[1572081565893,["GJX@GJXAIOU",[[1,6092,"cd  属性不为 null，表示 Spring能够"]],[6092,6092],[6117,6117]]],[1572081567031,["GJX@GJXAIOU",[[1,6115," "]],[6115,6115],[6116,6116]]],[1572081584077,["GJX@GJXAIOU",[[1,6118,"发现 CompactDisc 类，自动在 Spring "]],[6118,6118],[6146,6146]]],[1572081647028,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6155," "],[1,6209,"的"],[-1,6211,"的"],[-1,6234,"`"],[1,6236,"`"],[1,6313,"。"],[-1,6386,"。"]],[4594,4594],[6386,6386]]],[1572081647028,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6155," "],[-1,6208,"的"],[1,6211,"的"],[1,6233,"`"],[-1,6234,"`"],[-1,6312,"。"],[1,6386,"。"]],[6386,6386],[4594,4594]]],[1572081606249,["GJX@GJXAIOU",[[1,6146,"上下文中将其配置为 Bean 并将其注入到测试代码中。"]],[6146,6146],[6173,6173]]],[1572081634202,["GJX@GJXAIOU",[[1,6476,"**"],[1,6499,"**"]],[6476,6499],[6476,6503]]],[1572081707032,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"]],[4594,4594],[6503,6503]]],[1572081707032,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"]],[6503,6503],[4594,4594]]],[1572081659248,["GJX@GJXAIOU",[[1,6504,"即下面类中"]],[6504,6504],[6509,6509]]],[1572081660971,["GJX@GJXAIOU",[[-1,6508,"中"]],[6509,6509],[6508,6508]]],[1572081670053,["GJX@GJXAIOU",[[1,6508," SgtPeppers zhogn"]],[6508,6508],[6525,6525]]],[1572081671605,["GJX@GJXAIOU",[[-1,6520,"zhogn"]],[6525,6525],[6520,6520]]],[1572081693167,["GJX@GJXAIOU",[[1,6520,"如果使用 @Component 和使用 @Component（）"]],[6520,6520],[6552,6552]]],[1572081695619,["GJX@GJXAIOU",[[-1,6549,"t（"]],[6551,6551],[6549,6549]]],[1572081697434,["GJX@GJXAIOU",[[1,6549,"t"]],[6549,6549],[6550,6550]]],[1572081698357,["GJX@GJXAIOU",[[-1,6550,"）"]],[6551,6551],[6550,6550]]],[1572081699242,["GJX@GJXAIOU",[[1,6550,"()"]],[6550,6550],[6552,6552]]],[1572081827033,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"],[1,6504,"。"],[-1,6552,"。"]],[4594,4594],[6552,6552]]],[1572081827033,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"],[-1,6503,"。"],[1,6552,"。"]],[6552,6552],[4594,4594]]],[1572081825327,["GJX@GJXAIOU",[[1,6551,"“”"]],[6551,6551],[6553,6553]]],[1572081887038,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"],[1,6504,"。"],[-1,6554,"。"]],[4594,4594],[6554,6554]]],[1572081887038,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"],[-1,6503,"。"],[1,6554,"。"]],[6554,6554],[4594,4594]]],[1572081832963,["GJX@GJXAIOU",[[1,6552,"sgtPeppers"]],[6552,6552],[6562,6562]]],[1572081836447,["GJX@GJXAIOU",[[1,6564,"`"]],[6564,6564],[6565,6565]]],[1572081838861,["GJX@GJXAIOU",[[1,6540,"`"]],[6540,6540],[6541,6541]]],[1572081840893,["GJX@GJXAIOU",[[1,6535,"`"]],[6535,6535],[6536,6536]]],[1572081843857,["GJX@GJXAIOU",[[1,6525,"`"]],[6525,6525],[6526,6526]]],[1572081847375,["GJX@GJXAIOU",[[1,6568," yiya"]],[6568,6568],[6573,6573]]],[1572081848201,["GJX@GJXAIOU",[[-1,6569,"yiya"]],[6573,6573],[6569,6569]]],[1572081850702,["GJX@GJXAIOU",[[1,6569,"一样。"]],[6569,6569],[6572,6572]]],[1572081864698,["GJX@GJXAIOU",[[-1,6830,"\n"]],[6830,6830],[6829,6829]]],[1572081868951,["GJX@GJXAIOU",[[1,6746,"不推荐"]],[6746,6746],[6749,6749]]],[1572081870236,["GJX@GJXAIOU",[[-1,6746,"不推荐"]],[6749,6749],[6746,6746]]],[1572081871260,["GJX@GJXAIOU",[[1,6746,"****"]],[6746,6746],[6748,6748]]],[1572081872911,["GJX@GJXAIOU",[[1,6748,"不推荐"]],[6748,6748],[6751,6751]]],[1572081947035,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"],[1,6504,"。"],[-1,6571,"。"],[1,6746,"："],[-1,6753,"："]],[4594,4594],[6753,6753]]],[1572081947035,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"],[-1,6503,"。"],[1,6571,"。"],[-1,6745,"："],[1,6753,"："]],[6753,6753],[4594,4594]]],[1572081892218,["GJX@GJXAIOU",[[1,7003,"**"],[1,7041,"**"]],[7003,7041],[7003,7045]]],[1572081920070,["GJX@GJXAIOU",[[1,7481,"****"]],[7481,7481],[7483,7483]]],[1572081925039,["GJX@GJXAIOU",[[1,7483,"使用下面这种"]],[7483,7483],[7489,7489]]],[1572081931589,["GJX@GJXAIOU",[[-1,7453,"哈"]],[7454,7454],[7453,7453]]],[1572081934106,["GJX@GJXAIOU",[[1,7453,"还"]],[7453,7453],[7454,7454]]],[1572081934222,["GJX@GJXAIOU",[[1,7453," "]],[7454,7454],[7455,7455]]],[1572082007040,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"],[1,6504,"。"],[-1,6571,"。"],[1,6746,"："],[-1,6753,"："],[1,7003,"果"],[-1,7005,"果"],[1,7043,"可"],[-1,7045,"可"],[1,7453,"n"],[-1,7455,"哈"],[1,7482,"\n"],[-1,7492,"\n"]],[4594,4594],[7492,7492]]],[1572082007040,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"],[-1,6503,"。"],[1,6571,"。"],[-1,6745,"："],[1,6753,"："],[-1,7002,"果"],[1,7005,"果"],[-1,7042,"可"],[1,7045,"可"],[-1,7452,"n"],[1,7455,"哈"],[-1,7481,"\n"],[1,7492,"\n"]],[7492,7492],[4594,4594]]],[1572081994740,["GJX@GJXAIOU",[[1,7921,"（）"]],[7921,7921],[7923,7923]]],[1572081998958,["GJX@GJXAIOU",[[1,7922,"但是不建议使用"]],[7922,7922],[7929,7929]]],[1572082067039,[null,[[-1,4594,"`"],[1,4595,"\n"],[-1,4926,"\n"],[1,4994,"\n"],[-1,5014,"\n"],[1,5080,"`"],[-1,5112,"\n"],[1,5150,"包"],[-1,5182,"包"],[1,5186,"\n"],[-1,5193,"\n"],[1,5232,"的"],[-1,5234,"["],[1,5256,"n"],[-1,5258,")"],[1,5851,"码"],[-1,5862,"码"],[1,6084," "],[-1,6182," "],[1,6236,"的"],[-1,6238,"的"],[-1,6261,"`"],[1,6263,"`"],[1,6340,"。"],[-1,6413,"。"],[1,6476,"。"],[-1,6478,"。"],[1,6501,"名"],[-1,6503,"名"],[1,6504,"。"],[-1,6571,"。"],[1,6746,"："],[-1,6753,"："],[1,7003,"果"],[-1,7005,"果"],[1,7043,"可"],[-1,7045,"可"],[1,7453,"n"],[-1,7455,"哈"],[1,7482,"\n"],[-1,7492,"\n"],[1,7921,"代"],[-1,7930,"代"]],[4594,4594],[7930,7930]]],[1572082067039,[null,[[1,4594,"`"],[-1,4594,"\n"],[1,4926,"\n"],[-1,4993,"\n"],[1,5014,"\n"],[-1,5079,"`"],[1,5112,"\n"],[-1,5149,"包"],[1,5182,"包"],[-1,5185,"\n"],[1,5193,"\n"],[-1,5231,"的"],[1,5234,"["],[-1,5255,"n"],[1,5258,")"],[-1,5850,"码"],[1,5862,"码"],[-1,6083," "],[1,6182," "],[-1,6235,"的"],[1,6238,"的"],[1,6260,"`"],[-1,6261,"`"],[-1,6339,"。"],[1,6413,"。"],[-1,6475,"。"],[1,6478,"。"],[-1,6500,"名"],[1,6503,"名"],[-1,6503,"。"],[1,6571,"。"],[-1,6745,"："],[1,6753,"："],[-1,7002,"果"],[1,7005,"果"],[-1,7042,"可"],[1,7045,"可"],[-1,7452,"n"],[1,7455,"哈"],[-1,7481,"\n"],[1,7492,"\n"],[-1,7920,"代"],[1,7930,"代"]],[7930,7930],[4594,4594]]],[1572082031107,["GJX@GJXAIOU",[[-1,4520,".1"]],[4522,4522],[4520,4520]]],[1572082041130,["GJX@GJXAIOU",[[-1,4008," （一）"]],[4012,4012],[4008,4008]]],[1572082042944,["GJX@GJXAIOU",[[1,4008,"一 "]],[4008,4008],[4009,4009]]],[1572082043278,["GJX@GJXAIOU",[[1,4009,"、"]],[4009,4009],[4010,4010]]],[1572082045264,["GJX@GJXAIOU",[[1,4008," "]],[4007,4007],[4008,4008]]],[1572082049164,["GJX@GJXAIOU",[[-1,4380,"（二）"]],[4383,4383],[4380,4380]]],[1572082050918,["GJX@GJXAIOU",[[1,4380,"二、"]],[4380,4380],[4382,4382]]],[1572082054588,["GJX@GJXAIOU",[[-1,4516,"2.2 "]],[4520,4520],[4516,4516]]],[1572082055856,["GJX@GJXAIOU",[[1,4516,"（）"]],[4516,4516],[4518,4518]]],[1572082057609,["GJX@GJXAIOU",[[1,4517,"一"]],[4517,4517],[4518,4518]]],[1572082059300,["GJX@GJXAIOU",[[1,4515,"##"]],[4518,4518],[4532,4532]]],[1572082127216,[null,[[-1,4592,"`"],[1,4593,"\n"],[-1,4924,"\n"],[1,4992,"\n"],[-1,5012,"\n"],[1,5078,"`"],[-1,5110,"\n"],[1,5148,"包"],[-1,5180,"包"],[1,5184,"\n"],[-1,5191,"\n"],[1,5230,"的"],[-1,5232,"["],[1,5254,"n"],[-1,5256,")"],[1,5849,"码"],[-1,5860,"码"],[1,6082," "],[-1,6180," "],[1,6234,"的"],[-1,6236,"的"],[-1,6259,"`"],[1,6261,"`"],[1,6338,"。"],[-1,6411,"。"],[1,6474,"。"],[-1,6476,"。"],[1,6499,"名"],[-1,6501,"名"],[1,6502,"。"],[-1,6569,"。"],[1,6744,"："],[-1,6751,"："],[1,7001,"果"],[-1,7003,"果"],[1,7041,"可"],[-1,7043,"可"],[1,7451,"n"],[-1,7453,"哈"],[1,7480,"\n"],[-1,7490,"\n"],[1,7919,"代"],[-1,7928,"代"]],[4592,4592],[7928,7928]]],[1572082127216,[null,[[1,4592,"`"],[-1,4592,"\n"],[1,4924,"\n"],[-1,4991,"\n"],[1,5012,"\n"],[-1,5077,"`"],[1,5110,"\n"],[-1,5147,"包"],[1,5180,"包"],[-1,5183,"\n"],[1,5191,"\n"],[-1,5229,"的"],[1,5232,"["],[-1,5253,"n"],[1,5256,")"],[-1,5848,"码"],[1,5860,"码"],[-1,6081," "],[1,6180," "],[-1,6233,"的"],[1,6236,"的"],[1,6258,"`"],[-1,6259,"`"],[-1,6337,"。"],[1,6411,"。"],[-1,6473,"。"],[1,6476,"。"],[-1,6498,"名"],[1,6501,"名"],[-1,6501,"。"],[1,6569,"。"],[-1,6743,"："],[1,6751,"："],[-1,7000,"果"],[1,7003,"果"],[-1,7040,"可"],[1,7043,"可"],[-1,7450,"n"],[1,7453,"哈"],[-1,7479,"\n"],[1,7490,"\n"],[-1,7918,"代"],[1,7928,"代"]],[7928,7928],[4592,4592]]],[1572082067542,["GJX@GJXAIOU",[[-1,6416,"2.2.2"]],[6416,6421],[6416,6416]]],[1572082068345,["GJX@GJXAIOU",[[1,6416,"（）"]],[6416,6416],[6418,6418]]],[1572082069798,["GJX@GJXAIOU",[[1,6417,"二"]],[6417,6417],[6418,6418]]],[1572082071019,["GJX@GJXAIOU",[[1,6415,"##"]],[6418,6418],[6434,6434]]],[1572082080251,["GJX@GJXAIOU",[[-1,6927,"2.2.3"]],[6927,6932],[6927,6927]]],[1572082081003,["GJX@GJXAIOU",[[1,6927,"（）"]],[6927,6927],[6929,6929]]],[1572082082962,["GJX@GJXAIOU",[[1,6928,"三"]],[6928,6928],[6929,6929]]],[1572082085512,["GJX@GJXAIOU",[[1,6926,"##"]],[6929,6929],[6943,6943]]],[1572082092516,["GJX@GJXAIOU",[[1,7619,"##"]],[7623,7623],[7645,7645]]],[1572082095525,["GJX@GJXAIOU",[[-1,7623,".2.4"]],[7627,7627],[7623,7623]]],[1572082096874,["GJX@GJXAIOU",[[1,7623,"（）"]],[7623,7623],[7625,7625]]],[1572082098730,["GJX@GJXAIOU",[[1,7624,"四"]],[7624,7624],[7625,7625]]],[1572082100155,["GJX@GJXAIOU",[[-1,7622,"2"]],[7623,7623],[7622,7622]]],[1572082187213,[null,[[-1,4592,"`"],[1,4593,"\n"],[-1,4924,"\n"],[1,4992,"\n"],[-1,5012,"\n"],[1,5078,"`"],[-1,5110,"\n"],[1,5148,"包"],[-1,5180,"包"],[1,5184,"\n"],[-1,5191,"\n"],[1,5230,"的"],[-1,5232,"["],[1,5254,"n"],[-1,5256,")"],[1,5849,"码"],[-1,5860,"码"],[1,6082," "],[-1,6180," "],[1,6234,"的"],[-1,6236,"的"],[-1,6259,"`"],[1,6261,"`"],[1,6338,"。"],[-1,6411,"。"],[1,6418," "],[-1,6421,"2"],[1,6474,"。"],[-1,6476,"。"],[1,6499,"名"],[-1,6501,"名"],[1,6502,"。"],[-1,6569,"。"],[1,6744,"："],[-1,6751,"："],[1,6929," "],[-1,6932,"3"],[1,7001,"果"],[-1,7003,"果"],[1,7041,"可"],[-1,7043,"可"],[1,7451,"n"],[-1,7453,"哈"],[1,7480,"\n"],[-1,7490,"\n"],[1,7622," "],[-1,7625,"4"],[1,7919,"代"],[-1,7928,"代"]],[4592,4592],[7928,7928]]],[1572082187213,[null,[[1,4592,"`"],[-1,4592,"\n"],[1,4924,"\n"],[-1,4991,"\n"],[1,5012,"\n"],[-1,5077,"`"],[1,5110,"\n"],[-1,5147,"包"],[1,5180,"包"],[-1,5183,"\n"],[1,5191,"\n"],[-1,5229,"的"],[1,5232,"["],[-1,5253,"n"],[1,5256,")"],[-1,5848,"码"],[1,5860,"码"],[-1,6081," "],[1,6180," "],[-1,6233,"的"],[1,6236,"的"],[1,6258,"`"],[-1,6259,"`"],[-1,6337,"。"],[1,6411,"。"],[-1,6417," "],[1,6421,"2"],[-1,6473,"。"],[1,6476,"。"],[-1,6498,"名"],[1,6501,"名"],[-1,6501,"。"],[1,6569,"。"],[-1,6743,"："],[1,6751,"："],[-1,6928," "],[1,6932,"3"],[-1,7000,"果"],[1,7003,"果"],[-1,7040,"可"],[1,7043,"可"],[-1,7450,"n"],[1,7453,"哈"],[-1,7479,"\n"],[1,7490,"\n"],[-1,7621," "],[1,7625,"4"],[-1,7918,"代"],[1,7928,"代"]],[7928,7928],[4592,4592]]],[1572082132435,["GJX@GJXAIOU",[[1,7932,"##"]],[7935,7935],[7953,7953]]],[1572082137139,["GJX@GJXAIOU",[[-1,7935,"2.3"]],[7938,7938],[7935,7935]]],[1572082142533,["GJX@GJXAIOU",[[1,7935,"三、"]],[7935,7935],[7937,7937]]],[1572082185737,["GJX@GJXAIOU",[[1,7974,"一般用于将"]],[7974,7974],[7979,7979]]],[1572082247221,[null,[[-1,4592,"`"],[1,4593,"\n"],[-1,4924,"\n"],[1,4992,"\n"],[-1,5012,"\n"],[1,5078,"`"],[-1,5110,"\n"],[1,5148,"包"],[-1,5180,"包"],[1,5184,"\n"],[-1,5191,"\n"],[1,5230,"的"],[-1,5232,"["],[1,5254,"n"],[-1,5256,")"],[1,5849,"码"],[-1,5860,"码"],[1,6082," "],[-1,6180," "],[1,6234,"的"],[-1,6236,"的"],[-1,6259,"`"],[1,6261,"`"],[1,6338,"。"],[-1,6411,"。"],[1,6418," "],[-1,6421,"2"],[1,6474,"。"],[-1,6476,"。"],[1,6499,"名"],[-1,6501,"名"],[1,6502,"。"],[-1,6569,"。"],[1,6744,"："],[-1,6751,"："],[1,6929," "],[-1,6932,"3"],[1,7001,"果"],[-1,7003,"果"],[1,7041,"可"],[-1,7043,"可"],[1,7451,"n"],[-1,7453,"哈"],[1,7480,"\n"],[-1,7490,"\n"],[1,7622," "],[-1,7625,"4"],[1,7919,"代"],[-1,7928,"代"],[1,7935," "],[-1,7937,"3"],[1,7974,"。"],[-1,7979,"。"]],[4592,4592],[7979,7979]]],[1572082247221,[null,[[1,4592,"`"],[-1,4592,"\n"],[1,4924,"\n"],[-1,4991,"\n"],[1,5012,"\n"],[-1,5077,"`"],[1,5110,"\n"],[-1,5147,"包"],[1,5180,"包"],[-1,5183,"\n"],[1,5191,"\n"],[-1,5229,"的"],[1,5232,"["],[-1,5253,"n"],[1,5256,")"],[-1,5848,"码"],[1,5860,"码"],[-1,6081," "],[1,6180," "],[-1,6233,"的"],[1,6236,"的"],[1,6258,"`"],[-1,6259,"`"],[-1,6337,"。"],[1,6411,"。"],[-1,6417," "],[1,6421,"2"],[-1,6473,"。"],[1,6476,"。"],[-1,6498,"名"],[1,6501,"名"],[-1,6501,"。"],[1,6569,"。"],[-1,6743,"："],[1,6751,"："],[-1,6928," "],[1,6932,"3"],[-1,7000,"果"],[1,7003,"果"],[-1,7040,"可"],[1,7043,"可"],[-1,7450,"n"],[1,7453,"哈"],[-1,7479,"\n"],[1,7490,"\n"],[-1,7621," "],[1,7625,"4"],[-1,7918,"代"],[1,7928,"代"],[-1,7934," "],[1,7937,"3"],[-1,7973,"。"],[1,7979,"。"]],[7979,7979],[4592,4592]]],[1572082202926,["GJX@GJXAIOU",[[1,7979,"第三方库中的组件装配到自己的应用中。"]],[7979,7979],[7997,7997]]],[1572082219107,["GJX@GJXAIOU",[[1,7998,"****"]],[7998,7998],[8000,8000]]],[1572082223392,["GJX@GJXAIOU",[[1,8000,"推荐 Java配置"]],[8000,8000],[8009,8009]]],[1572082223508,["GJX@GJXAIOU",[[1,8007," "]],[8009,8009],[8010,8010]]],[1572082236386,["GJX@GJXAIOU",[[1,8010,"，因为类型安全且对重构友好"]],[8010,8010],[8023,8023]]],[1572086447291,[null,[[-1,4592,"`"],[1,4593,"\n"],[-1,4924,"\n"],[1,4992,"\n"],[-1,5012,"\n"],[1,5078,"`"],[-1,5110,"\n"],[1,5148,"包"],[-1,5180,"包"],[1,5184,"\n"],[-1,5191,"\n"],[1,5230,"的"],[-1,5232,"["],[1,5254,"n"],[-1,5256,")"],[1,5849,"码"],[-1,5860,"码"],[1,6082," "],[-1,6180," "],[1,6234,"的"],[-1,6236,"的"],[-1,6259,"`"],[1,6261,"`"],[1,6338,"。"],[-1,6411,"。"],[1,6418," "],[-1,6421,"2"],[1,6474,"。"],[-1,6476,"。"],[1,6499,"名"],[-1,6501,"名"],[1,6502,"。"],[-1,6569,"。"],[1,6744,"："],[-1,6751,"："],[1,6929," "],[-1,6932,"3"],[1,7001,"果"],[-1,7003,"果"],[1,7041,"可"],[-1,7043,"可"],[1,7451,"n"],[-1,7453,"哈"],[1,7480,"\n"],[-1,7490,"\n"],[1,7622," "],[-1,7625,"4"],[1,7919,"代"],[-1,7928,"代"],[1,7935," "],[-1,7937,"3"],[1,7974,"。"],[-1,7997,"。"],[1,7998,"\n"],[-1,8025,"\n"]],[4592,4592],[8025,8025]]],[1572086447291,[null,[[1,4592,"`"],[-1,4592,"\n"],[1,4924,"\n"],[-1,4991,"\n"],[1,5012,"\n"],[-1,5077,"`"],[1,5110,"\n"],[-1,5147,"包"],[1,5180,"包"],[-1,5183,"\n"],[1,5191,"\n"],[-1,5229,"的"],[1,5232,"["],[-1,5253,"n"],[1,5256,")"],[-1,5848,"码"],[1,5860,"码"],[-1,6081," "],[1,6180," "],[-1,6233,"的"],[1,6236,"的"],[1,6258,"`"],[-1,6259,"`"],[-1,6337,"。"],[1,6411,"。"],[-1,6417," "],[1,6421,"2"],[-1,6473,"。"],[1,6476,"。"],[-1,6498,"名"],[1,6501,"名"],[-1,6501,"。"],[1,6569,"。"],[-1,6743,"："],[1,6751,"："],[-1,6928," "],[1,6932,"3"],[-1,7000,"果"],[1,7003,"果"],[-1,7040,"可"],[1,7043,"可"],[-1,7450,"n"],[1,7453,"哈"],[-1,7479,"\n"],[1,7490,"\n"],[-1,7621," "],[1,7625,"4"],[-1,7918,"代"],[1,7928,"代"],[-1,7934," "],[1,7937,"3"],[-1,7973,"。"],[1,7997,"。"],[-1,7997,"\n"],[1,8025,"\n"]],[8025,8025],[4592,4592]]],[1572086418402,["GJX@GJXAIOU",[[1,8042,"\n"]],[8040,8040],[8041,8041]]]],null,"GJX@GJXAIOU"],["77faf8f9-5b53-4b17-9f3c-bae4fd59520e",1573090766150,"# Part1：Spring 核心知识\n\n\n## 章一：Spring 之旅\n\nSpring 实现简化企业级开发（EJB）的底层功能依赖于两大核心特性：依赖注入（Dependency Injection，DI）和面向切面编程（aspect-oriented programming，AOP）\n\n### 一、简化 Java 开发\n使用的四种关键策略：\n- 基于 POJO 的轻量级和最小侵入性编程；\nspring 不会强迫实现 Spring 规范的接口或者继承 Spring 规范的类，从而避免框架通过强迫应用继承他们的类或者实现他们的接口从而导致应用和框架绑死；非侵入式编程意味着该类在 Spring 应用中和非 Spring 应用中都可以发挥同样的作用，Spring 仅仅通过 DI 来装配 POJO；\n- 通过依赖注入和面向接口实现松耦合；\n用于实现保持对象直接的松耦合，\n- 基于切面和惯例进行声明式编程；\nDI 能够让相互协作的软件组件（Bean）保持松散耦合，而面向切面编程允许将遍布应用各处的功能分离出来形成可以重用的组件。通常针对跨越系统的多个组件，例如日志、事务管理、安全等系统服务，不应该融入到系统自身的核心业务逻辑中。原来做法是各个模块需要上述功能就实现对应的方法，或者上述方法抽象出来再需要的地方进行调用，本质都是重复出现。应该只关注核心功能，不关注上述功能；\n![采用AOP功能前后对比]($resource/%E9%87%87%E7%94%A8AOP%E5%8A%9F%E8%83%BD%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png)\n\n- 通过切面和模板减少样板式代码；\n例如使用 JDBC 来访问数据库查询数据，需要进行样板式的配置（连接、查询、释放。。）。Spring 通过模板封装来消除样板式代码，例如可以使用 Spring 的 JdbcTemplate 代替 JDBC API，专注于书写逻辑 SQL ；\n\n### 二、容纳你的 Bean\n\n在基于 Spring 应用中，应用对象是生存于 Spring 容器中，Spring 容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期。spring 容器使用 DI 管理构成应用的组件，它会创建相互协作的组件之间的关联。\nSpring 自带多个容器实现，主要是两类：\n- Bean 工程：由`org.springframework.beans.factory.BeanFactory`接口定义，提供基本的 DI 支持；\n- 应用上下文：由`org.springframework.context.ApplicationContext`接口定义，基于 BeanFactory 构建，提供应用框架级别的服务，通常使用这里；自带的多种应用上下文见下：\n  *   AnnotationConfigApplicationContext;：一个或多个基于 Java 的配置类中加载 Spring 应用上下文；\n  *   AnnotationConfigWebApplicationContext;一个或多个基于 Java 的配置类中加载 Spring Web 应用上下文；\n  *   ClassPathXmlApplicationContext; 在**类路径**下一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义作为类资源；\n  *   FileSystemXmlApplicationContext;：在**文件系统**下一个或多个 XML 配置文件中加载上下文定义；\n  *   XmlWebApplicationContext；从 web 应用下的一个或多个 XML 配置文件中加载上下文定义；\n\n- FileSystemXmlApplicationContext和ClassPathXmlApplicationContext的区别在于：FileSystemXmlApplicationContext在**指定文件系统路径下查找**，而ClassPathXmlApplicationContext在**所有的类路径（包括JAR文件）下**查找。\n\n如果想从Java配置中加载应用上下文，可以使用AnnotationConfigApplicationContext。\n\n- 示例：\n如何加载一个FileSystemXmlApplicationContext（从文件路径加载）：\n `ApplicationContext context =  new  FileSystemXmlApplicationContext(\"c:/knight.xml\");`\n\n使用ClassPathXmlapplicationContext加载（从类路径加载）：\n `ApplicationContext context =  new  ClassPathXmlapplicationContext(\"knight.xml\");`\n\n从java配置类加载应用上下文：\n `ApplicationContext context =  new  AnnotationConfigApplicationContext(com.springinaction.knights.config.KnightConfig.class);`\n \n 应用上下文准备就绪后，可以调用上下文的getBean()方法从Spring容器中获取Bean\n**所以说应用上下文就是一个 Spring 容器**\n\n\n#### （二）bean的生命周期\n\n使用new对bean进行实例化，一旦不再被使用，将由Java自动进行垃圾回收。\n![Bean 的生命周期]($resource/Bean%20%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n1.  Spring对bean进行实例化；\n2.  Spring将值和bean的引用注入到bean对应的属性中；\n3.  如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBeanName()方法；\n4.  如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory实例传入；\n5.  如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；\n6.  如果bean实现了BeanPostProcessor接口，Spring将调用它的postProcessBeforeInitialization()方法；\n7.  如果bean实现了InitializingBean接口，Spring将调用它的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法或使用了@PostConstruct注解，该方法也会被调用；\n8.  如果bean实现了BeanPostProcessor接口，Spring将调用postProcessAfterInitialization()方法；\n9.  此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到应用上下文被销毁；\n10.  如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean使用destroy-method声明了销毁方法或使用@PreDestory，该方法也会被调用。\n\n### 三、俯瞰 Spring 整体\n\n![Spring 模块]($resource/Spring%20%E6%A8%A1%E5%9D%97.png)\n\n1.  Spring核心容器\n    是Spring框架中最核心的部分，管理Spring应用中bean的创建、配置和管理。在此模块中包含了Spring bean工厂，为Spring提供了DI功能。\n2.  Spring的AOP模块\n    是Spring应用系统中开发切面的基础。与DI一样，AOP可以帮助应用对象解耦。借助AOP可以将遍布系统的关注点（如事务和安全）从应用对象中解耦出来。\n3.  数据访问与继承\n    使用JDBC编写代码通常导致大量的样板式代码。Spring的JDBC和DAO（Data Access Object）模块抽象了这些样板式代码。还在多种数据库服务的错误信息上构建了一个语义丰富的异常层。同样 Spring 的 ORM 模块是建立在 DAO 的支持之上的，Spring 的事务管理支持所有的 ORM 框架和 JDBC。\n4.  Web和远程调用：\n    MVC（Model-View-Controller）模式榜知用户将界面逻辑和应用逻辑分离。（SpringMVC）\n5.  Instrumentation模块提供了为JVM添加代理的功能。\n6.  测试\n    Spring为使用JNDI、Servlet和Portlet编写单元测试提供了一系列的mock对象实现。\n\n\n\n### 四、Spring 新功能\n。。。。\n\n## 章二：装配 Bean\n\n原来创建应用对象之间的关联关系通常使用构造器或者查找，导致代码结构复杂。在Spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要相互协作的对象引用赋予各个对象。\n\n**创建应用对象之间协作关系的行为通常称为装配**（wiring），这也是依赖注入的本质。\n\n###  一、 Spring配置的可选方案\nSpring 容器负责创建应用程序中的 Bean 并通过 DI 来协调这些对象之间的关系，但是得告诉 Spring 要创建哪些 Bean 并且如何将他它们装配到一起。\nSpring提供了三种主要的装配机制（可以互相搭配使用）：\n\n*   在XML中进行显式配置；\n*   在Java中进行显式配置；\n*   隐式的bean发现机制和自动装配。\n\n作者建议**尽可能的使用自动装配的机制**。显式配置越少越好，**当必须要显式配置bean的时候**（比如，有些源码不是由你来维护的，而当你需要为这些代码配置bean的时候），**推荐使用类型安全并且比XML更加强大的JavaConfig**。最后，只有当你想要使用便利的XML命名空间，并且在JavaConfig中没有同样的实现是才应该使用XML。\n\n### 二、 自动化装配bean\n\nSpring从两个角度实现自动化装配：\n*   组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean；\n*   自动装配（autowiring）：Spring自动满足bean之间的依赖。\n\n#### （一）创建可被发现的bean\n\n在类上使用@Component注解，这个注解表明该类会作为组件类，并告知Spring要为这个类创建bean。\n示例：\n定义一个CD机的类：\n```java\npackage soundsystem;\npublic iterface CompacDisc {\n    void play();\n}\n```\n带有@Component注解的CompactDisc实现类SgtPeppers\n```java\npackage soundsystem;\nimport org.springframework.stereotype.Component;\n@Component\npublic class SgtPeppers implements CompactDisc {\n    private String title = \"Sgt. Pepper's Lonely Heart\n}\n```\n组件扫描默认是不启用的，还需要显式配置一下Spring，从而命令它去寻找带有@Component注解的类并为其创建bean。\n\n```\npackage soundsystem;\n@Configuation\n@ComponentScan\npublic class CDPlayerConfig {\n\n}\n```\n 上面是使用 Java 代码定义 Spring 的装配规则， 如果没有其他配置，**@ComponentScan默认会扫描与配置类相同的包以及该包下所有子包，查找所有带有 @Component 注解的类**。\n\n上面对应的，如果想使用XML来启用组件扫描，可以使用Spring context命名空间的`<context:component-scan>`元素。\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:Context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\">\n\n        <context:component-scan base-package=\"soundsystem\"/>\n</beans>\n\n```\n\n测试组件扫描代码（即看配置是否起作用）：\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes=CDPlayerConfig.class)\npublic class CDPlayerText {\n    @Autowired\n    private CompactDisc cd;\n\n    @Test\n    public void cdShouldNotBeNull() {\n    // 测试断言 cd  属性不为 null，表示 Spring 能够发现 CompactDisc 类，自动在 Spring 上下文中将其配置为 Bean 并将其注入到测试代码中。\n        assertNotNull(cd)\n    }\n}\n\n```\n\nCDPlayerTest使用了Spring的 `SpringJUnit4ClassRunner`，以便在测试开始的时候自动创建Spring的应用上下文。注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。因为 CDPlayerConfig 类中包含了 @ComponentScan，因此最终的应用上下文中应该包含 CompactDisc  Bean；\n\n#### （二） 为组件扫描的bean命名\n\n在组件扫描中如果没有明确的设置ID，Spring会根据类名为其指定一个ID。**这个bean所给定的ID是首字母变为小写的类名**。即下面类 SgtPeppers 如果使用 `@Component` 和使用 `@Component(“sgtPeppers”)` 一样。\n\n如果想为这个bean设置不同的ID，需要将其作为值传递给@Component注解。\n\n```\n@Component(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n\n```\n\n另外一种bean命名方式使用Java依赖注入规范中提供的@Named注解：**不推荐**\n\n```\n@Named(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n```\n\nSpring支持将@Named作为@Component注解的替代方案。两者之间由一些细微的差异，但在大多数场景中可以互换。\n\n本书的作者更喜欢@Component。\n\n#### （三） 设置组件扫描的基础包\n\n如果没有为@ComponentScan设置属性，按照默认规则，它会以配置类所在的包作为基础包来扫描逐渐。\n\n如果**想扫描不同的包，在@ComponentScan的value属性中指定包名即可**。\n\n```\n@Configuraion\n@ComponentScan(\"soundsystem\")\npublic class CDPlayerConfig{\n}\n\n```\n\n如果想更加清晰的表明所设置的是基础包，可以通过basePackages属性进行配置：\n\n```\n@Configuration\n@ComponentScan(basePackages=\"soundsystem\")\npublic class CDPlayerConfig{}\n\n```\n\nbasePackages属性可以设置多个包，赋值一个数组即可：\n\n```\n@Configuration\n@ComponentScan(basePackages={\"soundsystem\", \"video\"})\npublic class CDPlayerConfig { }\n\n```\n\n除了将包设置为简单的String类型外，@ComponentScan 还提供了另外一种方法，将其指定为包中所包含的类或接口：\n**使用下面这种**\n```\n@Configuration\n@ComponentScan(basePackageClasses={CDPlayer.class, DVDPlayer.class})\npublic class CDPlayerConfig { }\n\n```\n\n#### （四） 通过为bean添加注解实现自动装配\n\n可以在构造器、setter方法、任何方法上使用@Autowired注解，Spring会尝试满足方法参数上所声明的依赖。假如有且只有一个bean匹配依赖需求，那么这个bean将会被装配进来。\n\n如果没有匹配的bean，那么在应用上下文创建的时候会抛出异常。可以将@Autowired的required属性设置为false，此时Spring会尝试自动装配，但是如果没有匹配的bean的话该属性将会为null。\n\n如果有多个bean都满足依赖关系，Spring将会抛出异常。\n\n@Autowired是Spring特有的注解。可以使用@Inject注解替代（但是不建议使用）。\n\n### 三、 通过Java代码装配Bean\n\n显式的装配方式有两种：Java和XML。一般用于将第三方库中的组件装配到自己的应用中。\n**推荐 Java 配置，因为类型安全且对重构友好**\n## 2.3.1 创建配置类\n\n\n@Configuration注解表明这个类是一个配置类，该类应该包含在Spring应用上下文中如何创建bean的细节。\n\n## 2.3.2 声明简单bean\n\n要在JavaConfig中声明bean，需要编写一个方法，这个方法会创建所需类型的实例，然后给这个方法添加@Bean注解。\n\n@Bean注解会告诉Spring这个方法将返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。\n\n默认情况下，bean的ID与方法名一致。如果想为其设置一个不同的名字，可以重命名该方法，也可以通过@Bean的name属性指定。\n\n## 2.3.3 借助JavaConfig实现注入\n\n在JavaConfig中装配bean的最简单方式就是引用创建bean的方法。在方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接返回该方法所创建的bean，而不是每次都对其进行实际的调用。\n\n通过调用方法引用bean的方式有点令人困惑。还有一种理解起来更简单的方式：\n\n```\n@Bean\npublic CDPlayer cdPlayer(CompactDisc compactDisc) {\n    return new CDPlayer(compactDisc);\n}\n\n```\n\ncdPlaye()方法请求一个CompactDisc作为参数，当Spring调用cdPlayer()创建CDPlayer bean的时候，它会自动装配一个CompactDisc到配置方法之中。\n\n通过这种方式引用其他的bean通常是最佳的选择，因为它不会要求将CompactDisc声明到同一个配置类之中。在这里甚至没有要求CompactDisc必须要在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者通过XML来进行配置。可以将配置分散到多个配置类、XML文件以及自动扫面和装配bean之中。\n\n# 2.4 通过XML装配Bean\n\n## 2.4.1 创建XML配置规范\n\n在XML配置中，要创建一个XML文件，并且要以<beans>元素为根。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\">\n\n        <!-- 配置详情 -->\n</beans>\n\n```\n\n## 2.4.2 声明一个简单的<bean>\n\n<bean>元素类似于JavaConfig中的@Bean注解。\n\n如果没有给定ID，所以这个bean将会根据全限定类名来进行命名。例如“soundsystem.SgtPeppers#0“，其中“#0”是一个计数形式，用来区分相同类型的其他bean。\n\n## 2.4.3 借助构造器注入初始化bean\n\n构造器注入有两种基本的配置方案可供选择：\n\n*   <constructon-arg>元素；\n*   使用Spring 3.0 所引入的c-命名空间。\n\n### 构造器注入bean引用\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\">\n    <constructor-arg ref=\"compactDisc\"/>\n</bean>\n\n```\n\nc-命名空间的schema:\n\n```\nxmlns:c=\"http://www.springframework.org/schema/c\"\n\n```\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    c:cd-ref=\"compactDisc\" />\n\n```\n\n属性以c:开头，也就是命名空间的前缀。接下来是要装配的构造器参数名，在此之后是-ref，这是一个命名约定，告诉Spring正在装配的是一个bean应用。\n\n可以使用参数在整个参数列表中的位置来替代参数名：\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    c:_0-ref=\"compactDisc\" />\n\n```\n\n因为在XML中不允许数字作为属性的第一个字符，因此必须要添加一个下划线作为前缀。\n\n如果只有一个参数，不用标示参数：\n\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\"\n    c:_-ref=\"compactDisc\" />\n\n```\n\n### 将字面量注入到构造器中\n\n```\n<bean id=\"compactDisc\"\n    class=\"soundsystem.BlankDisc\">\n    <constructor-arg value=\"sgt. Pepper\" />\n</bean>\n\n```\n\n依然使用<constructor-arg>元素进行注入，但是使用了value属性。\n\n```\n<bean id=\"compactDisc\"\n    class=\"soundsystem.BlankDisc\"\n    c:_title=\"sgt. Pepper\"/>\n\n```\n\n使用c-命名空间装配字面量与装配引用的区别在于属性名中去掉了-ref后缀。\n\n### 装配集合\n\n<constructor-arg>可以将集合装配到构造器参数重，而c-命名空间不能。\n\n可以使用<null/>元素将null传递给构造器。\n\n可以使用<list>元素声明一个列表：\n\n```\n<constructor-arg>\n    <list>\n        <value>.....</value>\n        <value>......</value>\n    </list>\n</constructor-arg>\n\n```\n\n<list>元素是<constructor-arg>的子元素，这表明一个包含值的列表将会传递到构造器中。其中<value>元素用来指定列表中的每个元素。\n\n与之类似，可以使用<ref>元素代替<value>，实现bean引用列表的装配。\n\n可以用相同的方式使用<set>元素。<set>和<list>元素的区别不大，无论在哪种情况下，<set>或<list>都可以用来装配List、Set甚至是数组。\n\n## 2.4.4 设置属性\n\n<property>元素为属性的setter方法所提供的功能与<constructor-arg>元素为构造器提供的功能是一样的。\n\nSpring提供了p-命名空间作为<property>元素的替代方案。p-命名空间的schema：\n\n```\nxmlns:p=\"http://www.springframework.org/schema/p\"\n\n```\n\nutil-命名空间所提供的功能之一是[util:list](util:list)元素，它会创建一个列表的bean。\n\n```\nxmlns:util=\"http://www.springframework.org/schema/util\"\n\n```\n\n```\n<util:list id=\"trackList\">\n    <value>......</value>\n    <value>.....</value>\n</util:list>\n\n```\n\n下表展示了Spring util-命名空间中的元素\n\n| 元素 | 描述 |\n| --- | --- |\n| [util:constant](util:constant) | 引用某个类型的public static域，并将其暴露为bean |\n| [util:list](util:list) | 创建一个java.util.List类型的bean，其中包含值或引用 |\n| [util:map](util:map) | 创建一个java.util.Map类型的bean，其中包含值或引用 |\n| [util:properties](util:properties) | 创建一个java.util.Propertie类型的bean |\n| [util:property-path](util:property-path) | 引用一个bean的属性（或内嵌属性），并将其暴露为bean |\n| [util:set](util:set) | 创建一个java.util.Set类型的bean，其中包含值或引用 |\n\n# 2.5 导入和混合配置\n\n## 2.5.1 在JavaConfig中引用XML配置\n\n使用@Import注解引用其他JavaConfig配置，使用@ImportResource注解引入XML配置。\n\n```\n@Configuration\n@Import(CDPlayerConfig.class)\n@ImportResource(\"classpath:cd-config.xml\")\npublic class SoundSystemConfig {\n\n}\n\n```\n\n## 2.5.2 在XML配置中引用JavaConfig\n\n在XML中可以使用<import>元素来引用其他XML配置。\n\n将JavaConfig作为bean使用<bean>元素导入XML配置文件。\n### 一、Spring 配置的可选方案\n\n### 二、自动化装配 Bean\n\n### 三、通过 Java 代码装配 Bean\n\n### 四、通过 XML 装配 Bean\n\n### 五、导入和混合配置\n\n## 章三：高级装配\n",[[1573090724364,["GJX@GJXAIOU",[[1,7931,"\n"]],[7931,7931],[7932,7932]]],[1573090733012,["GJX@GJXAIOU",[[1,8027,"\n"]],[8027,8027],[8028,8028]]],[1573090736901,["GJX@GJXAIOU",[[1,7955,"\n"]],[7954,7954],[7955,7955]]],[1573090738097,["GJX@GJXAIOU",[[1,7955,"****"]],[7955,7955],[7957,7957]]],[1573090739087,["GJX@GJXAIOU",[[1,7957,"we4is"]],[7957,7957],[7962,7962]]],[1573090740754,["GJX@GJXAIOU",[[-1,7957,"we4is"]],[7962,7962],[7957,7957]]],[1573090751694,["GJX@GJXAIOU",[[1,7957,"为什么进行相识装配"]],[7957,7957],[7966,7966]]],[1573090753394,["GJX@GJXAIOU",[[-1,7962,"相识装配"]],[7966,7966],[7962,7962]]],[1573090754897,["GJX@GJXAIOU",[[1,7962,"显示"]],[7962,7962],[7964,7964]]],[1573090758469,["GJX@GJXAIOU",[[-1,7962,"显示"]],[7964,7964],[7962,7962]]],[1573090768511,["GJX@GJXAIOU",[[1,7962,"显式装配"]],[7962,7962],[7966,7966]]],[1573090782964,["GJX@GJXAIOU",[[1,7969,"\n"]],[7968,7968],[7969,7969]]],[1573090783287,["GJX@GJXAIOU",[[1,7970,"\n"]],[7969,7969],[7970,7970]]],[1573090800448,["GJX@GJXAIOU",[[1,7969,"主要针对将第三方库找那个"]],[7969,7969],[7981,7981]]],[1573090802199,["GJX@GJXAIOU",[[-1,7977,"库找那个"]],[7981,7981],[7977,7977]]],[1573090823802,["GJX@GJXAIOU",[[1,7977,"库中的组件装配到自己的应用中，"]],[7977,7977],[7992,7992]]],[1573090846770,["GJX@GJXAIOU",[[1,7992,"是没有办法在他们的类中加上 @Component 和 A"]],[7992,7992],[8020,8020]]],[1573090848908,["GJX@GJXAIOU",[[-1,8019,"A"]],[8020,8020],[8019,8019]]],[1573090850271,["GJX@GJXAIOU",[[1,8019,"！"]],[8019,8019],[8020,8020]]],[1573090851034,["GJX@GJXAIOU",[[-1,8019,"！"]],[8020,8020],[8019,8019]]],[1573090865400,["GJX@GJXAIOU",[[1,8019,"@Autowired 方法"]],[8019,8019],[8032,8032]]],[1573090866225,["GJX@GJXAIOU",[[-1,8030,"方法"]],[8032,8032],[8030,8030]]],[1573090878559,["GJX@GJXAIOU",[[1,8030,"注解的，就不能使用自动化装配 "]],[8030,8030],[8045,8045]]],[1573090879422,["GJX@GJXAIOU",[[-1,8044," "]],[8045,8045],[8044,8044]]],[1573090880473,["GJX@GJXAIOU",[[1,8044,"了。"]],[8044,8044],[8046,8046]]],[1573090891029,["GJX@GJXAIOU",[[1,8092,"\n"]],[8092,8092],[8093,8093]]],[1573090953755,["GJX@GJXAIOU",[[1,8122,"\n"]],[8121,8121],[8122,8122]]],[1573090954033,["GJX@GJXAIOU",[[1,8123,"\n"]],[8122,8122],[8123,8123]]],[1573090954164,["GJX@GJXAIOU",[[1,8124,"\n"]],[8123,8123],[8124,8124]]],[1573090954243,["GJX@GJXAIOU",[[1,8125,"\n"]],[8124,8124],[8125,8125]]],[1573090954486,["GJX@GJXAIOU",[[1,8126,"\n"]],[8125,8125],[8126,8126]]],[1573090960690,["GJX@GJXAIOU",[[1,8121,"同时 Java Config"]],[8121,8121],[8135,8135]]],[1573090963674,["GJX@GJXAIOU",[[-1,8128," "]],[8129,8129],[8128,8128]]],[1573090995289,["GJX@GJXAIOU",[[1,8134," 是配置代码，因此不能有任何的业务逻辑，不能侵入业务逻辑代码宏"]],[8134,8134],[8165,8165]]],[1573090995947,["GJX@GJXAIOU",[[-1,8164,"宏"]],[8165,8165],[8164,8164]]],[1573091004500,["GJX@GJXAIOU",[[1,8164,"中，一般放在"]],[8164,8164],[8170,8170]]],[1573091020967,["GJX@GJXAIOU",[[1,8170,"单独的包中，使得和应用程序逻辑相分离。"]],[8170,8170],[8189,8189]]],[1573091030863,["GJX@GJXAIOU",[[1,8192,"****"]],[8192,8192],[8194,8194]]],[1573091035954,["GJX@GJXAIOU",[[1,8194,"配置过程乳腺"]],[8194,8194],[8200,8200]]],[1573091036783,["GJX@GJXAIOU",[[-1,8198,"乳腺"]],[8200,8200],[8198,8198]]],[1573091038779,["GJX@GJXAIOU",[[1,8198,"如下："]],[8198,8198],[8201,8201]]],[1573091040587,["GJX@GJXAIOU",[[-1,8205,"\n"]],[8205,8205],[8204,8204]]],[1573091040857,["GJX@GJXAIOU",[[-1,8204,"\n"]],[8204,8204],[8203,8203]]],[1573091043750,["GJX@GJXAIOU",[[-1,8220,"\n"]],[8220,8220],[8219,8219]]],[1573091067739,["GJX@GJXAIOU",[[1,8281,"\n"]],[8279,8279],[8280,8280]]],[1573091072383,["GJX@GJXAIOU",[[1,8280,"```java"]],[8280,8280],[8287,8287]]],[1573091072878,["GJX@GJXAIOU",[[1,8289,"\n"]],[8287,8287],[8288,8288]]],[1573091073206,["GJX@GJXAIOU",[[1,8290,"\n"]],[8288,8288],[8289,8289]]],[1573091074025,["GJX@GJXAIOU",[[1,8289,"```"]],[8289,8289],[8292,8292]]],[1573091077259,["GJX@GJXAIOU",[[1,8288,"page"]],[8288,8288],[8292,8292]]],[1573091079180,["GJX@GJXAIOU",[[-1,8290,"ge"]],[8292,8292],[8290,8290]]],[1573091085793,["GJX@GJXAIOU",[[1,8290,"ckage souun"]],[8290,8290],[8301,8301]]],[1573091088243,["GJX@GJXAIOU",[[-1,8299,"un"]],[8301,8301],[8299,8299]]],[1573091092378,["GJX@GJXAIOU",[[1,8299,"ndste"]],[8299,8299],[8304,8304]]],[1573091093950,["GJX@GJXAIOU",[[-1,8302,"te"]],[8304,8304],[8302,8302]]],[1573091096294,["GJX@GJXAIOU",[[1,8302,"ystem"]],[8302,8302],[8307,8307]]],[1573091096900,["GJX@GJXAIOU",[[1,8308,"\n"]],[8307,8307],[8308,8308]]],[1573091098736,["GJX@GJXAIOU",[[1,8308,"imtpo"]],[8308,8308],[8313,8313]]],[1573091100426,["GJX@GJXAIOU",[[-1,8310,"tpo"]],[8313,8313],[8310,8310]]],[1573091108804,["GJX@GJXAIOU",[[1,8310,"port org.springframn"]],[8310,8310],[8330,8330]]],[1573091109722,["GJX@GJXAIOU",[[-1,8329,"n"]],[8330,8330],[8329,8329]]],[1573091110739,["GJX@GJXAIOU",[[1,8329,"ewoe"]],[8329,8329],[8333,8333]]],[1573091111443,["GJX@GJXAIOU",[[-1,8332,"e"]],[8333,8333],[8332,8332]]],[1573091122299,["GJX@GJXAIOU",[[1,8332,"rk.context.annotation."]],[8332,8332],[8354,8354]]],[1573091132102,["GJX@GJXAIOU",[[1,8354,"Configuration;"]],[8354,8354],[8368,8368]]],[1573091133020,["GJX@GJXAIOU",[[1,8369,"\n"]],[8368,8368],[8369,8369]]],[1573091133592,["GJX@GJXAIOU",[[1,8370,"\n"]],[8369,8369],[8370,8370]]],[1573091136947,["GJX@GJXAIOU",[[1,8370,"class"]],[8370,8370],[8375,8375]]],[1573091138322,["GJX@GJXAIOU",[[-1,8370,"class"]],[8375,8375],[8370,8370]]],[1573091142060,["GJX@GJXAIOU",[[1,8370,"public call"]],[8370,8370],[8381,8381]]],[1573091143963,["GJX@GJXAIOU",[[-1,8378,"all"]],[8381,8381],[8378,8378]]],[1573091146103,["GJX@GJXAIOU",[[1,8378,"lass con"]],[8378,8378],[8386,8386]]],[1573091147310,["GJX@GJXAIOU",[[-1,8383,"con"]],[8386,8386],[8383,8383]]],[1573091155680,["GJX@GJXAIOU",[[1,8383,"CDPlayerCod"]],[8383,8383],[8394,8394]]],[1573091156596,["GJX@GJXAIOU",[[-1,8393,"d"]],[8394,8394],[8393,8393]]],[1573091157428,["GJX@GJXAIOU",[[1,8393,"ndif"]],[8393,8393],[8397,8397]]],[1573091159236,["GJX@GJXAIOU",[[-1,8394,"dif"]],[8397,8397],[8394,8394]]],[1573091163774,["GJX@GJXAIOU",[[1,8394,"fig{}"]],[8394,8394],[8399,8399]]],[1573091164885,["GJX@GJXAIOU",[[1,8398,"\n"]],[8398,8398],[8399,8399]]],[1573091167621,["GJX@GJXAIOU",[[1,8370,"\n"]],[8369,8369],[8370,8370]]],[1573091172896,["GJX@GJXAIOU",[[1,8370,"@Configuration"]],[8370,8370],[8384,8384]]],[1573091349189,["GJX@GJXAIOU",[[1,8421,"\n"]],[8420,8420],[8421,8421]]],[1573091351732,["GJX@GJXAIOU",[[1,8421,"zhi"]],[8421,8421],[8424,8424]]],[1573091352866,["GJX@GJXAIOU",[[-1,8421,"zhi"]],[8424,8424],[8421,8421]]],[1573091354833,["GJX@GJXAIOU",[[1,8421,"起那么"]],[8421,8421],[8424,8424]]],[1573091355865,["GJX@GJXAIOU",[[-1,8421,"起那么"]],[8424,8424],[8421,8421]]],[1573091363070,["GJX@GJXAIOU",[[1,8421,"前面都是使用"]],[8421,8421],[8427,8427]]],[1573091383327,["GJX@GJXAIOU",[[1,8427,"组件扫描来发现 Spring 应该创建的 Bean"]],[8427,8427],[8452,8452]]],[1573091395195,["GJX@GJXAIOU",[[1,8431,"（）"]],[8431,8431],[8433,8433]]],[1573091400286,["GJX@GJXAIOU",[[1,8432,"即在 "]],[8432,8432],[8435,8435]]],[1573091404898,["GJX@GJXAIOU",[[-1,8434," "]],[8435,8435],[8434,8434]]],[1573091422936,["GJX@GJXAIOU",[[1,8434,"上面类上加上 @ComponentScan 注解"]],[8434,8434],[8458,8458]]],[1573091426006,["GJX@GJXAIOU",[[1,8480,"，"]],[8480,8480],[8481,8481]]],[1573091435381,["GJX@GJXAIOU",[[1,8481,"下面使用显示配置方式；"]],[8481,8481],[8492,8492]]],[1573091469830,["GJX@GJXAIOU",[[1,8574,"```java"]],[8574,8574],[8581,8581]]],[1573091470087,["GJX@GJXAIOU",[[1,8582,"\n"]],[8581,8581],[8582,8582]]],[1573091470405,["GJX@GJXAIOU",[[1,8583,"\n"]],[8582,8582],[8583,8583]]],[1573091470519,["GJX@GJXAIOU",[[1,8584,"\n"]],[8583,8583],[8584,8584]]],[1573091471562,["GJX@GJXAIOU",[[1,8584,"````"]],[8584,8584],[8588,8588]]],[1573091472924,["GJX@GJXAIOU",[[-1,8587,"`"]],[8588,8588],[8587,8587]]],[1573091485864,["GJX@GJXAIOU",[[1,8582,"public Compact"]],[8582,8582],[8596,8596]]],[1573091489342,["GJX@GJXAIOU",[[1,8596,"Di"]],[8596,8596],[8598,8598]]],[1573091489781,["GJX@GJXAIOU",[[-1,8597,"i"]],[8598,8598],[8597,8597]]],[1573091490043,["GJX@GJXAIOU",[[1,8597,"e"]],[8597,8597],[8598,8598]]],[1573091490892,["GJX@GJXAIOU",[[-1,8597,"e"]],[8598,8598],[8597,8597]]],[1573091500457,["GJX@GJXAIOU",[[1,8597,"isc sgtPeppers(){"]],[8597,8597],[8614,8614]]],[1573091500796,["GJX@GJXAIOU",[[1,8616,"\n"]],[8614,8614],[8615,8615]]],[1573091502255,["GJX@GJXAIOU",[[1,8617,"\n"]],[8615,8615],[8616,8616]]],[1573091502678,["GJX@GJXAIOU",[[1,8616,"}"]],[8616,8616],[8617,8617]]],[1573091512693,["GJX@GJXAIOU",[[1,8615,"    return new Sge"]],[8615,8615],[8633,8633]]],[1573091513313,["GJX@GJXAIOU",[[-1,8632,"e"]],[8633,8633],[8632,8632]]],[1573091516579,["GJX@GJXAIOU",[[1,8632,"tPerpp"]],[8632,8632],[8638,8638]]],[1573091517774,["GJX@GJXAIOU",[[-1,8635,"rpp"]],[8638,8638],[8635,8635]]],[1573091521300,["GJX@GJXAIOU",[[1,8635,"ppers();"]],[8635,8635],[8643,8643]]],[1573091524556,["GJX@GJXAIOU",[[1,8582,"\n"]],[8581,8581],[8582,8582]]],[1573091526909,["GJX@GJXAIOU",[[1,8582,"@bean"]],[8582,8582],[8587,8587]]],[1573091530877,["GJX@GJXAIOU",[[-1,8583,"b"]],[8584,8584],[8583,8583]]],[1573091532294,["GJX@GJXAIOU",[[1,8583,"B "]],[8583,8583],[8585,8585]]],[1573091533421,["GJX@GJXAIOU",[[-1,8584," "]],[8585,8585],[8584,8584]]],[1573091563870,["GJX@GJXAIOU",[[1,8587,"()"]],[8587,8587],[8589,8589]]],[1573091569880,["GJX@GJXAIOU",[[1,8588,"name=\"\""]],[8588,8588],[8595,8595]]],[1573091572912,["GJX@GJXAIOU",[[1,8594,"sh"]],[8594,8594],[8596,8596]]],[1573091574172,["GJX@GJXAIOU",[[-1,8594,"sh"]],[8596,8596],[8594,8594]]],[1573091578725,["GJX@GJXAIOU",[[1,8594,"设置另一个名字"]],[8594,8594],[8601,8601]]],[1573091614782,["GJX@GJXAIOU",[[1,8637,"\n"]],[8636,8636],[8637,8637]]],[1573091615942,["GJX@GJXAIOU",[[1,8637,"、、"]],[8637,8637],[8639,8639]]],[1573091616826,["GJX@GJXAIOU",[[-1,8637,"、、"]],[8639,8639],[8637,8637]]],[1573091646502,["GJX@GJXAIOU",[[1,8637,"// 这里只要确认该方法体返回一个新的 SgtPerppers90"]],[8637,8637],[8670,8670]]],[1573091647371,["GJX@GJXAIOU",[[-1,8668,"90"]],[8670,8670],[8668,8668]]],[1573091648277,["GJX@GJXAIOU",[[1,8668,"（）"]],[8668,8668],[8670,8670]]],[1573091649103,["GJX@GJXAIOU",[[-1,8668,"（）"]],[8670,8670],[8668,8668]]],[1573091658769,["GJX@GJXAIOU",[[1,8668,"() 实例结课，可以添加自己"]],[8668,8668],[8682,8682]]],[1573091659720,["GJX@GJXAIOU",[[-1,8680,"自己"]],[8682,8682],[8680,8680]]],[1573091663134,["GJX@GJXAIOU",[[1,8680,"其他的逻辑"]],[8680,8680],[8685,8685]]],[1573091759508,["GJX@GJXAIOU",[[1,8891,"\n"]],[8890,8890],[8891,8891]]],[1573091761831,["GJX@GJXAIOU",[[1,8890,"****"]],[8890,8890],[8892,8892]]],[1573091762967,["GJX@GJXAIOU",[[1,8892,"种类"]],[8892,8892],[8894,8894]]],[1573091763698,["GJX@GJXAIOU",[[-1,8892,"种类"]],[8894,8894],[8892,8892]]],[1573091784695,["GJX@GJXAIOU",[[1,8892,"这里就是将 CompactDisc 注入到 CDPlayer 中"]],[8892,8892],[8924,8924]]],[1573091837772,["GJX@GJXAIOU",[[1,8926,"，因为这里的 CDPlayer bean 依赖于 CompactDisc。"]],[8926,8926],[8963,8963]]],[1573093234317,["GJX@GJXAIOU",[[-1,9214,"\n"]],[9214,9214],[9213,9213]]],[1573093805100,["GJX@GJXAIOU",[[1,10010,"<"]],[10010,10010],[10011,10011]]],[1573093807093,["GJX@GJXAIOU",[[1,10010,"`"]],[10010,10010],[10011,10011]]],[1573093808725,["GJX@GJXAIOU",[[1,10012,"`"]],[10012,10012],[10013,10013]]],[1573093812422,["GJX@GJXAIOU",[[1,10012,"bean>"]],[10012,10012],[10017,10017]]],[1573093817882,["GJX@GJXAIOU",[[1,10016," class=\"doun"]],[10016,10016],[10028,10028]]],[1573093819155,["GJX@GJXAIOU",[[-1,10023,"\"doun"]],[10028,10028],[10023,10023]]],[1573093826187,["GJX@GJXAIOU",[[1,10023,"\"soundsystem"]],[10023,10023],[10035,10035]]],[1573093837976,["GJX@GJXAIOU",[[1,10035,".SgtPeppers\""]],[10035,10035],[10047,10047]]],[1573093850192,["GJX@GJXAIOU",[[1,10084,"上面的Bean"]],[10084,10084],[10091,10091]]],[1573093850342,["GJX@GJXAIOU",[[1,10087," "]],[10091,10091],[10092,10092]]],[1573093855047,["GJX@GJXAIOU",[[1,10092," Id 就是："]],[10092,10092],[10099,10099]]],[1573093860753,["GJX@GJXAIOU",[[-1,10099,"“"]],[10100,10100],[10099,10099]]],[1573093861396,["GJX@GJXAIOU",[[1,10099,"·"]],[10099,10099],[10100,10100]]],[1573093862753,["GJX@GJXAIOU",[[-1,10099,"·"]],[10100,10100],[10099,10099]]],[1573093863272,["GJX@GJXAIOU",[[1,10099,"`"]],[10099,10099],[10100,10100]]],[1573093867097,["GJX@GJXAIOU",[[-1,10124,"“"]],[10125,10125],[10124,10124]]],[1573093867558,["GJX@GJXAIOU",[[1,10124,"`"]],[10124,10124],[10125,10125]]],[1573093872377,["GJX@GJXAIOU",[[-1,10128,"“"]],[10129,10129],[10128,10128]]],[1573093872738,["GJX@GJXAIOU",[[1,10128,"`"]],[10128,10128],[10129,10129]]],[1573093874563,["GJX@GJXAIOU",[[-1,10131,"”"]],[10132,10132],[10131,10131]]],[1573093874902,["GJX@GJXAIOU",[[1,10131,"`"]],[10131,10131],[10132,10132]]],[1573093897730,["GJX@GJXAIOU",[[1,10155,",liru"]],[10155,10155],[10160,10160]]],[1573093899633,["GJX@GJXAIOU",[[-1,10155,",liru"]],[10160,10160],[10155,10155]]],[1573093914960,["GJX@GJXAIOU",[[1,10155,"，例如声明了另一个 SgtPeppers "]],[10155,10155],[10176,10176]]],[1573093916058,["GJX@GJXAIOU",[[-1,10175," "]],[10176,10176],[10175,10175]]],[1573093945929,["GJX@GJXAIOU",[[1,10175,"，且没有设置 Id 属性，则模人物"]],[10175,10175],[10192,10192]]],[1573093947683,["GJX@GJXAIOU",[[-1,10188,"则模人物"]],[10192,10192],[10188,10188]]],[1573093955837,["GJX@GJXAIOU",[[1,10188,"则会自动试着 "]],[10188,10188],[10195,10195]]],[1573093958859,["GJX@GJXAIOU",[[-1,10192,"试着 "]],[10195,10195],[10192,10192]]],[1573093966708,["GJX@GJXAIOU",[[1,10192,"设置 Id 为：``"]],[10192,10192],[10202,10202]]],[1573093972632,["GJX@GJXAIOU",[[1,10201,"soundst"]],[10201,10201],[10208,10208]]],[1573093973051,["GJX@GJXAIOU",[[-1,10207,"t"]],[10208,10208],[10207,10207]]],[1573093987293,["GJX@GJXAIOU",[[1,10207,"ystem.SgtPeppers#1"]],[10207,10207],[10225,10225]]],[1573094038697,["GJX@GJXAIOU",[[1,10050,"\n"]],[10050,10050],[10051,10051]]],[1573094039193,["GJX@GJXAIOU",[[1,10051,"- "]],[10051,10051],[10053,10053]]],[1573094098714,["GJX@GJXAIOU",[[1,10232,"\n"]],[10231,10231],[10232,10232]]],[1573094099043,["GJX@GJXAIOU",[[1,10233,"\n"]],[10232,10232],[10233,10233]]],[1573094106718,["GJX@GJXAIOU",[[1,10232,"- zheli "]],[10232,10232],[10240,10240]]],[1573094108658,["GJX@GJXAIOU",[[-1,10234,"zheli "]],[10240,10240],[10234,10234]]],[1573094124486,["GJX@GJXAIOU",[[1,10234,"这里不再需要直接负责创建 "]],[10234,10234],[10247,10247]]],[1573094131911,["GJX@GJXAIOU",[[1,10247,"SgtPeppers 得到"]],[10247,10247],[10260,10260]]],[1573094133132,["GJX@GJXAIOU",[[-1,10258,"得到"]],[10260,10260],[10258,10258]]],[1573094142115,["GJX@GJXAIOU",[[1,10258,"的实例（）"]],[10258,10258],[10263,10263]]],[1573094151680,["GJX@GJXAIOU",[[1,10262,"基本的 JavaConfig 中需要"]],[10262,10262],[10280,10280]]],[1573094164158,["GJX@GJXAIOU",[[1,10281,"，这里 Spring 发现 ,"]],[10281,10281],[10296,10296]]],[1573094165224,["GJX@GJXAIOU",[[-1,10295,","]],[10296,10296],[10295,10295]]],[1573094165676,["GJX@GJXAIOU",[[1,10295,"《"]],[10295,10295],[10296,10296]]],[1573094166369,["GJX@GJXAIOU",[[-1,10295,"《"]],[10296,10296],[10295,10295]]],[1573094167285,["GJX@GJXAIOU",[[1,10295,"·"]],[10295,10295],[10296,10296]]],[1573094167900,["GJX@GJXAIOU",[[-1,10295,"·"]],[10296,10296],[10295,10295]]],[1573094168900,["GJX@GJXAIOU",[[1,10295,"``"]],[10295,10295],[10297,10297]]],[1573094173255,["GJX@GJXAIOU",[[1,10296,"，bean"]],[10296,10296],[10301,10301]]],[1573094175626,["GJX@GJXAIOU",[[-1,10296,"，"]],[10297,10297],[10296,10296]]],[1573094176285,["GJX@GJXAIOU",[[1,10296,"<"]],[10296,10296],[10297,10297]]],[1573094178582,["GJX@GJXAIOU",[[1,10301,">"]],[10301,10301],[10302,10302]]],[1573094182784,["GJX@GJXAIOU",[[1,10303,"这个元素怒时候"]],[10303,10303],[10310,10310]]],[1573094183526,["GJX@GJXAIOU",[[-1,10307,"怒时候"]],[10310,10310],[10307,10307]]],[1573094185661,["GJX@GJXAIOU",[[1,10307,"时候，"]],[10307,10307],[10310,10310]]],[1573094226637,["GJX@GJXAIOU",[[1,10310,"会调用 SgtPeppers 的默认构造器来创建 bean，虽然更加被动但是没有"]],[10310,10310],[10350,10350]]],[1573094232352,["GJX@GJXAIOU",[[-1,10348,"没有"]],[10350,10350],[10348,10348]]],[1573094233804,["GJX@GJXAIOU",[[1,10348,"不嫩"]],[10348,10348],[10350,10350]]],[1573094234787,["GJX@GJXAIOU",[[-1,10348,"不嫩"]],[10350,10350],[10348,10348]]],[1573094245029,["GJX@GJXAIOU",[[1,10348,"不能像 Java"]],[10348,10348],[10356,10356]]],[1573094263159,["GJX@GJXAIOU",[[1,10356,"Config 中一样以自己的方式创建 Bean实例"]],[10356,10356],[10381,10381]]],[1573094263308,["GJX@GJXAIOU",[[1,10379," "]],[10381,10381],[10382,10382]]],[1573094389469,["GJX@GJXAIOU",[[1,10382,"。"]],[10382,10382],[10383,10383]]],[1573094424467,["GJX@GJXAIOU",[[1,9977,"****"]],[9977,9977],[9979,9979]]],[1573094425446,["GJX@GJXAIOU",[[1,9979," "]],[9979,9979],[9980,9980]]],[1573094431789,["GJX@GJXAIOU",[[1,9980,"Spring XML "]],[9980,9980],[9991,9991]]],[1573094436369,["GJX@GJXAIOU",[[-1,9979," "]],[9980,9980],[9979,9979]]],[1573094444718,["GJX@GJXAIOU",[[1,9990,"配置中只有一个"]],[9990,9990],[9997,9997]]],[1573094446481,["GJX@GJXAIOU",[[-1,9995,"一个"]],[9997,9997],[9995,9995]]],[1573094484510,["GJX@GJXAIOU",[[1,9995,"一种声明 bean 的方式，使用 <bean> "]],[9995,9995],[10019,10019]]],[1573094498572,["GJX@GJXAIOU",[[1,10019,"元素并指定 class 属性；"]],[10019,10019],[10034,10034]]],[1573094574705,["GJX@GJXAIOU",[[1,10495,"·"]],[10495,10495],[10496,10496]]],[1573094576347,["GJX@GJXAIOU",[[-1,10495,"·"]],[10496,10496],[10495,10495]]],[1573094576975,["GJX@GJXAIOU",[[1,10495,"`"]],[10495,10495],[10496,10496]]],[1573094579944,["GJX@GJXAIOU",[[1,10513,"` "]],[10513,10513],[10515,10515]]],[1573094814476,["GJX@GJXAIOU",[[1,10076," "]],[10075,10075],[10076,10076]]],[1573094820848,["GJX@GJXAIOU",[[1,10076,"id=\"compacrt"]],[10076,10076],[10088,10088]]],[1573094823103,["GJX@GJXAIOU",[[-1,10086,"rt"]],[10088,10088],[10086,10086]]],[1573094827763,["GJX@GJXAIOU",[[1,10086,"tDisc\""]],[10086,10086],[10092,10092]]],[1573095872817,["GJX@GJXAIOU",[[1,20,"@toc"]],[20,20],[24,24]]],[1573095877612,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1573095888818,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1573095889101,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1573095889194,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1573095889380,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1573095890299,["GJX@GJXAIOU",[[1,5,"\n"]],[4,4],[5,5]]],[1573095890944,["GJX@GJXAIOU",[[-1,5,"\n"]],[5,5],[4,4]]],[1573095892704,["GJX@GJXAIOU",[[1,4,"styrl"]],[4,4],[9,9]]],[1573095893741,["GJX@GJXAIOU",[[-1,7,"rl"]],[9,9],[7,7]]],[1573095896707,["GJX@GJXAIOU",[[1,7,"le: summer"]],[7,7],[17,17]]],[1573095897192,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1573095908661,["GJX@GJXAIOU",[[1,18,"flag: red"]],[18,18],[27,27]]],[1573095945976,["GJX@GJXAIOU",[[1,13311,"\n"]],[13310,13310],[13311,13311]]],[1573095946279,["GJX@GJXAIOU",[[1,13312,"\n"]],[13311,13311],[13312,13312]]],[1573095947331,["GJX@GJXAIOU",[[1,13313,"\n"]],[13312,13312],[13313,13313]]],[1573095949507,["GJX@GJXAIOU",[[1,13313,"## zhang"]],[13313,13313],[13321,13321]]],[1573095951040,["GJX@GJXAIOU",[[-1,13316,"zhang"]],[13321,13321],[13316,13316]]],[1573095961524,["GJX@GJXAIOU",[[1,13316,"章四：面向切面的 Spring"]],[13316,13316],[13331,13331]]],[1573096043737,["GJX@GJXAIOU",[[1,9516,"##"]],[9515,9515],[9534,9534]]],[1573096046209,["GJX@GJXAIOU",[[-1,9520,".4"]],[9522,9522],[9520,9520]]],[1573096048126,["GJX@GJXAIOU",[[-1,9519,"2 "]],[9520,9520],[9519,9519]]],[1573096049719,["GJX@GJXAIOU",[[1,9519,"四、"]],[9519,9519],[9521,9521]]],[1573096062728,["GJX@GJXAIOU",[[1,12863,"##"]],[12863,12863],[12877,12877]]],[1573096065222,["GJX@GJXAIOU",[[-1,12866,"2.5"]],[12866,12869],[12866,12866]]],[1573096066946,["GJX@GJXAIOU",[[1,12866,"五、"]],[12866,12866],[12868,12868]]],[1573096068463,["GJX@GJXAIOU",[[-1,12868," "]],[12869,12869],[12868,12868]]],[1573096073335,["GJX@GJXAIOU",[[-1,12880,"2.5.1 "]],[12880,12886],[12880,12880]]],[1573096073865,["GJX@GJXAIOU",[[1,12880,"（）"]],[12880,12880],[12882,12882]]],[1573096075523,["GJX@GJXAIOU",[[1,12881,"一"]],[12881,12881],[12882,12882]]],[1573096077096,["GJX@GJXAIOU",[[1,12879,"##"]],[12882,12882],[12904,12904]]],[1573096117416,["GJX@GJXAIOU",[[-1,13197,"### 一、Spring 配置的可选方案\n\n### 二、自动化装配 Bean\n\n### 三、通过 Java 代码装配 Bean\n\n### 四、通过 XML 装配 Bean\n\n### 五、导入和混合配置\n"]],[13197,13298],[13197,13197]]],[1573096127768,["GJX@GJXAIOU",[[1,8243,"##"]],[8243,8243],[8257,8257]]],[1573096130923,["GJX@GJXAIOU",[[-1,8246,"2.3.1 "]],[8246,8252],[8246,8246]]],[1573096131521,["GJX@GJXAIOU",[[1,8246,"（）"]],[8246,8246],[8248,8248]]],[1573096133007,["GJX@GJXAIOU",[[1,8247,"一"]],[8247,8247],[8248,8248]]],[1573096136097,["GJX@GJXAIOU",[[1,8531,"##"]],[8536,8536],[8548,8548]]],[1573096138840,["GJX@GJXAIOU",[[-1,8533," 2.3.2 "]],[8533,8540],[8533,8533]]],[1573096140400,["GJX@GJXAIOU",[[1,8533," （）"]],[8533,8533],[8536,8536]]],[1573096141976,["GJX@GJXAIOU",[[1,8535,"二"]],[8535,8535],[8536,8536]]],[1573096151137,["GJX@GJXAIOU",[[1,8901,"##"]],[8906,8906],[8926,8926]]],[1573096154739,["GJX@GJXAIOU",[[-1,8904,"2.3.3"]],[8904,8909],[8904,8904]]],[1573096155280,["GJX@GJXAIOU",[[1,8904,"（）"]],[8904,8904],[8906,8906]]],[1573096157423,["GJX@GJXAIOU",[[1,8905,"三"]],[8905,8905],[8906,8906]]],[1573096161578,["GJX@GJXAIOU",[[1,9534,"##"]],[9540,9540],[9552,9552]]],[1573096164048,["GJX@GJXAIOU",[[-1,9537,"2.4.1 "]],[9537,9543],[9537,9537]]],[1573096164522,["GJX@GJXAIOU",[[1,9537,"（）"]],[9537,9537],[9539,9539]]],[1573096170894,["GJX@GJXAIOU",[[1,9538,"一"]],[9538,9538],[9539,9539]]],[1573096180856,["GJX@GJXAIOU",[[1,9990,"##"]],[9990,9990],[10012,10012]]],[1573096183360,["GJX@GJXAIOU",[[-1,9993,"2.4.2 "]],[9993,9999],[9993,9993]]],[1573096183855,["GJX@GJXAIOU",[[1,9993,"（）"]],[9993,9993],[9995,9995]]],[1573096187210,["GJX@GJXAIOU",[[1,9994,"额二"]],[9994,9994],[9996,9996]]],[1573096188991,["GJX@GJXAIOU",[[-1,9994,"额"]],[9995,9995],[9994,9994]]],[1573096191986,["GJX@GJXAIOU",[[1,10496,"##"]],[10501,10501],[10519,10519]]],[1573096194566,["GJX@GJXAIOU",[[-1,10499,"2.4.3 "]],[10499,10505],[10499,10499]]],[1573096195059,["GJX@GJXAIOU",[[1,10499,"（）"]],[10499,10499],[10501,10501]]],[1573096196599,["GJX@GJXAIOU",[[1,10500,"三"]],[10500,10500],[10501,10501]]],[1573096269448,["GJX@GJXAIOU",[[1,11982,"##"]],[11984,11984],[11995,11995]]],[1573096271910,["GJX@GJXAIOU",[[-1,11985,"2.4.4"]],[11985,11990],[11985,11985]]],[1573096272408,["GJX@GJXAIOU",[[1,11985,"（0"]],[11985,11985],[11987,11987]]],[1573096274016,["GJX@GJXAIOU",[[-1,11986,"0"]],[11987,11987],[11986,11986]]],[1573096274395,["GJX@GJXAIOU",[[1,11986,"）"]],[11986,11986],[11987,11987]]],[1573096276716,["GJX@GJXAIOU",[[1,11986,"四"]],[11986,11986],[11987,11987]]],[1573096281239,["GJX@GJXAIOU",[[-1,11988," "]],[11989,11989],[11988,11988]]],[1573096285087,["GJX@GJXAIOU",[[-1,11547,"### "]],[11547,11551],[11547,11547]]],[1573096285489,["GJX@GJXAIOU",[[1,11547,"-"]],[11547,11547],[11548,11548]]],[1573096289144,["GJX@GJXAIOU",[[-1,11232,"### "]],[11232,11236],[11232,11232]]],[1573096289805,["GJX@GJXAIOU",[[1,11232,"- "]],[11232,11232],[11234,11234]]],[1573096294518,["GJX@GJXAIOU",[[-1,10598,"###"]],[10598,10601],[10598,10598]]],[1573096295005,["GJX@GJXAIOU",[[1,10598,"-"]],[10598,10598],[10599,10599]]],[1573096295234,["GJX@GJXAIOU",[[1,10600," "]],[10599,10599],[10600,10600]]],[1573096306425,["GJX@GJXAIOU",[[1,13088,"##"]],[13090,13090],[13116,13116]]],[1573096308871,["GJX@GJXAIOU",[[-1,13091,"2.5.2 "]],[13091,13097],[13091,13091]]],[1573096309526,["GJX@GJXAIOU",[[1,13091,"（）"]],[13091,13091],[13093,13093]]],[1573096310958,["GJX@GJXAIOU",[[1,13092,"二"]],[13092,13092],[13093,13093]]],[1573110017194,[null,[[1,11545," "],[-1,13087," "],[-1,13090,"2"],[1,13091," "],[1,13094,"在"]],[11545,11545],[13095,13095]]],[1573110017194,[null,[[-1,11545," "],[1,13088," "],[1,13090,"2"],[-1,13090," "],[-1,13094,"在"]],[13095,13095],[11545,11545]]],[1573110012040,["GJX@GJXAIOU",[[1,907,"**"],[1,926,"**"]],[907,926],[907,930]]],[1573110197275,[null,[[1,11549," "],[-1,13091," "],[-1,13094,"2"],[1,13095," "],[1,13098,"在"]],[11549,11549],[13099,13099]]],[1573110197275,[null,[[-1,11549," "],[1,13092," "],[1,13094,"2"],[-1,13094," "],[-1,13098,"在"]],[13099,13099],[11549,11549]]],[1573110146864,["GJX@GJXAIOU",[[1,1012,"**"],[1,1027,"**"]],[1012,1027],[1012,1031]]],[1573110196924,["GJX@GJXAIOU",[[1,2485,"\n"]],[2485,2485],[2486,2486]]],[1573110257218,[null,[[1,11554," "],[-1,13096," "],[-1,13099,"2"],[1,13100," "],[1,13103,"在"]],[11554,11554],[13104,13104]]],[1573110257218,[null,[[-1,11554," "],[1,13097," "],[1,13099,"2"],[-1,13099," "],[-1,13103,"在"]],[13104,13104],[11554,11554]]],[1573110208744,["GJX@GJXAIOU",[[1,2352,"**"],[1,2361,"**"]],[2352,2361],[2352,2365]]],[1573110240955,["GJX@GJXAIOU",[[-1,2501,"b"],[1,2502,"B"],[-1,2525,"b"],[1,2526,"B"],[-1,2534,"到b"],[1,2536,"进B"],[-1,2553,"b"],[1,2554,"B"],[1,2560,"`"],[1,2573,"`"],[-1,2583,"b"],[1,2584,"B"],[1,2593,"`"],[1,2606,"`接口"],[-1,2616,"b"],[1,2617,"B"],[1,2623,"`"],[1,2639,"`"],[-1,2650,"用"],[1,2651,"`"],[1,2667,"`接口"],[1,2682,"容器"],[-1,2694,"b"],[1,2695,"B"],[1,2701,"`"],[1,2724,"`"],[1,2736,"`"],[1,2759,"`接口"],[-1,2763,"bean所在的"],[-1,2780,"进来"],[-1,2790,"b"],[1,2791,"B"],[1,2797,"`"],[1,2814,"`"],[-1,2826,"它的"],[1,2828,"`"],[1,2861,"`接口"],[-1,2871,"b"],[1,2872,"B"],[1,2878,"`"],[1,2887,"at"],[1,2888,"o"],[-1,2889,"g"],[1,2894,"`"],[-1,2906,"它的"],[1,2908,"`"],[1,2928,"`"],[-1,2934,"，"],[-1,2937,"b"],[1,2938,"B"],[1,2943,"了`"],[1,2954,"`"],[-1,2962,"或使用了@PostConstruct注解"],[-1,2999,"b"],[1,3000,"B"],[1,3006,"`"],[1,3023,"`"],[-1,3035,"post"],[1,3039,"`"],[1,3067,"`"],[-1,3077,"，b"],[1,3079,"此刻，B"],[1,3105,"`"],[1,3114,"`"],[1,3117,"该"],[-1,3134,"b"],[1,3135,"B"],[1,3141,"`"],[1,3155,"`"],[-1,3167,"它的"],[1,3169,"`"],[-1,3173,"r"],[1,3175,"r"],[-1,3178,"接口方法。"],[1,3183,"`方法，"],[1,3185,"的"],[-1,3188,"b"],[1,3189,"B"],[1,3192,"中"],[1,3194,"了`"],[1,3208,"`"],[-1,3215,"或使用@PreDestory"],[-1,3230,"该方法"],[-1,3235,"被"],[-1,3238,"。"],[1,3239,"该方法；"]],[2490,3239],[3234,3234]]],[1573110317219,[null,[[1,11553," "],[-1,13095," "],[-1,13098,"2"],[1,13099," "],[1,13102,"在"]],[11553,11553],[13103,13103]]],[1573110317219,[null,[[-1,11553," "],[1,13096," "],[1,13098,"2"],[-1,13098," "],[-1,13102,"在"]],[13103,13103],[11553,11553]]],[1573110307552,["GJX@GJXAIOU",[[1,3892,"\n"]],[3892,3892],[3893,3893]]],[1573110307732,["GJX@GJXAIOU",[[1,3893,"\n"]],[3893,3893],[3894,3894]]],[1573110308026,["GJX@GJXAIOU",[[1,3894,"\n"]],[3894,3894],[3895,3895]]],[1573110310314,["GJX@GJXAIOU",[[-1,3868,"\n"]],[3868,3868],[3867,3867]]],[1573110377219,[null,[[1,11555," "],[-1,13097," "],[-1,13100,"2"],[1,13101," "],[1,13104,"在"]],[11555,11555],[13105,13105]]],[1573110377219,[null,[[-1,11555," "],[1,13098," "],[1,13100,"2"],[-1,13100," "],[-1,13104,"在"]],[13105,13105],[11555,11555]]],[1573110335250,["GJX@GJXAIOU",[[1,3945,"**"],[1,4002,"**"]],[3945,4002],[3945,4006]]],[1573110437219,[null,[[1,11559," "],[-1,13101," "],[-1,13104,"2"],[1,13105," "],[1,13108,"在"]],[11559,11559],[13109,13109]]],[1573110437219,[null,[[-1,11559," "],[1,13102," "],[1,13104,"2"],[-1,13104," "],[-1,13108,"在"]],[13109,13109],[11559,11559]]],[1573110378799,["GJX@GJXAIOU",[[1,4135,"**"],[1,4159,"**"]],[4135,4159],[4135,4163]]],[1573110390087,["GJX@GJXAIOU",[[-1,4254,"作者"]],[4256,4256],[4254,4254]]],[1573112177256,[null,[[1,11561," "],[-1,13103," "],[-1,13106,"2"],[1,13107," "],[1,13110,"在"]],[11561,11561],[13111,13111]]],[1573112177256,[null,[[-1,11561," "],[1,13104," "],[1,13106,"2"],[-1,13106," "],[-1,13110,"在"]],[13111,13111],[11561,11561]]],[1573112131129,["GJX@GJXAIOU",[[-1,4665,"package soundsystem;\n"],[1,4686,"/**\n * CD 接口，定义 CD 播放器对一盘 CD 能做的操作，降低 CD播放器的任意实现对 CD 本身的耦合\n  */ "],[1,4694,"n"],[1,4708,"t"],[-1,4711,"c"],[1,4712,"k"],[-1,4731,"\n"],[1,4732," "]],[4665,4733],[4778,4778]]],[1573112134617,["GJX@GJXAIOU",[[1,4665,"package soundsystem;\n"],[-1,4665,"/**\n * CD 接口，定义 CD 播放器对一盘 CD 能做的操作，降低 CD播放器的任意实现对 CD 本身的耦合\n  */ "],[-1,4737,"n"],[-1,4752,"t"],[1,4756,"c"],[-1,4756,"k"],[1,4776,"\n"],[-1,4776," "]],[4778,4778],[4665,4733]]],[1573112143675,["GJX@GJXAIOU",[[-1,4673,"soundsystem"],[1,4684,"a_autoConfig"],[1,4686,"\n/**\n * CD 接口，定义 CD 播放器对一盘 CD 能做的操作，降低 CD播放器的任意实现对 CD 本身的耦合\n */\n"],[1,4694,"n"],[1,4708,"t"],[-1,4711,"c"],[1,4712,"k"]],[4665,4733],[4800,4800]]],[1573112477260,[null,[[1,11628," "],[-1,13170," "],[-1,13173,"2"],[1,13174," "],[1,13177,"在"]],[11628,11628],[13178,13178]]],[1573112477260,[null,[[-1,11628," "],[1,13171," "],[1,13173,"2"],[-1,13173," "],[-1,13177,"在"]],[13178,13178],[11628,11628]]],[1573112460758,["GJX@GJXAIOU",[[-1,4861,"soundsystem;"],[1,4873,"a_autoConfig;\n"],[1,4923,"\n/**\n *  @Component 注解告诉 Spring 该类会作为组件类，同时要为该类创建 Bean\n */\n"],[1,4957,"Disk"],[-1,4979,"c"],[1,4980,"k"],[1,4982,"\n"],[-1,5025,"Lonely He"],[1,5034," Club Band\";\n    private String artist = \"The Beatles\";\n\n    @Override\n    public void play() {\n        System.out.println(\"通过a_autoConfig显示：Playing \" + title + \" by \" + "],[1,5037,"ist);\n    }"]],[4853,5039],[5277,5277]]],[1573112597265,[null,[[1,11866," "],[-1,13408," "],[-1,13411,"2"],[1,13412," "],[1,13415,"在"]],[11866,11866],[13416,13416]]],[1573112597265,[null,[[-1,11866," "],[1,13409," "],[1,13411,"2"],[-1,13411," "],[-1,13415,"在"]],[13416,13416],[11866,11866]]],[1573112547972,["GJX@GJXAIOU",[[1,5358,"a_autoConfig;\n\nimport org."],[1,5359,"pringframework.c"],[-1,5360,"u"],[-1,5362,"dsys"],[1,5368,"xt.annotation.Co"],[1,5369,"ponentScan"],[1,5371,"import org.springframework.context.annotation.Configuration;\n\n/**\n * 因为默认组件扫描不启用，需要显式配置 Spring 命令其需要带有 @Component 注解的类，并且为其创建 Bean\n * 这里 CDPlayerConfig 类没有显式的声明任何 Bean，仅仅使用 @ComponentScan 注解来在 Spring 中启动组件扫描，\n *      这里扫描注解中是有参数的，如果没有配置则默认扫描：与配置类相同的包以及该包下所有的子包中带 @Component 的类\n */\n"],[1,5379,"r"],[1,5399,"(\"a_autoConfig\")"],[-1,5429,"\n"]],[5350,5432],[5792,5792]]],[1573114577416,[null,[[1,12226," "],[-1,13768," "],[-1,13771,"2"],[1,13772," "],[1,13775,"在"]],[12226,12226],[13776,13776]]],[1573114577416,[null,[[-1,12226," "],[1,13769," "],[1,13771,"2"],[-1,13771," "],[-1,13775,"在"]],[13776,13776],[12226,12226]]],[1573114551483,["GJX@GJXAIOU",[[1,6584,"package a_autoConfig;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * CDPlayerTest 使用了 Spring 的 `SpringJUnit4ClassRunner`，以便在测试开始的时候自动创建Spring的应用上下文。\n * 注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。\n * 因为 CDPlayerConfig 类中包含了 @ComponentScan，因此最终的应用上下文中应该包含 CompactDisc  Bean；\n */\n"],[1,6653," "],[1,6654," "],[1,6689,"A_"],[-1,6699,"x"],[1,6700,"s"],[1,6704,"\n    // MediaPlay 的实现类中包含 CompactDisc 的一个属性\n    // @Autowired 会将 CompactDisc bean 注入到该测试代码中\n"],[-1,6731,"CompactDisc cd"],[1,6745,"MediaPlayer mediaPlayer"],[-1,6774,"cdShouldNotBeNull() {"],[1,6795,"playCD(){\n        mediaPlayer.play();\n    }\n"],[-1,6805,"断言 cd  属性不为 null，表示 Spring 能够发现"],[1,6836,"方法二：直接看 CompactDisc 对象有没有被注入\n    @Autowired\n    private"],[-1,6847,"c 类，自动在 Spring 上下文中将其配置为 Bean 并将其注入到测试代码中。"],[1,6889,"k compactDisk;\n    @Test\n    public void compactDiskShouldNotBeNull(){"],[-1,6913,"d)"],[1,6915,"ompactDisk);"]],[6584,6924],[7660,7660]]],[1573114569278,["GJX@GJXAIOU",[[1,6559,"\n"]],[6557,6557],[6558,6558]]],[1573114569426,["GJX@GJXAIOU",[[1,6560,"\n"]],[6558,6558],[6559,6559]]],[1573114577025,["GJX@GJXAIOU",[[1,6559,"为了配合测试的一些类"]],[6559,6559],[6569,6569]]],[1573114637345,[null,[[1,12974," "],[-1,14516," "],[-1,14519,"2"],[1,14520," "],[1,14523,"在"]],[12974,12974],[14524,14524]]],[1573114637345,[null,[[-1,12974," "],[1,14517," "],[1,14519,"2"],[-1,14519," "],[-1,14523,"在"]],[14524,14524],[12974,12974]]],[1573114578442,["GJX@GJXAIOU",[[1,6571,"\n"]],[6569,6569],[6570,6570]]],[1573114594803,["GJX@GJXAIOU",[[1,6570,"··"]],[6570,6570],[6572,6572]]],[1573114595992,["GJX@GJXAIOU",[[-1,6570,"··"]],[6572,6572],[6570,6570]]],[1573114598608,["GJX@GJXAIOU",[[1,6570,"```java"]],[6570,6570],[6577,6577]]],[1573114598917,["GJX@GJXAIOU",[[1,6579,"\n"]],[6577,6577],[6578,6578]]],[1573114599020,["GJX@GJXAIOU",[[1,6580,"\n"]],[6578,6578],[6579,6579]]],[1573114600088,["GJX@GJXAIOU",[[1,6579,"```"]],[6579,6579],[6582,6582]]],[1573114601943,["GJX@GJXAIOU",[[1,6578,"package a_autoConfig;   public interface MediaPlayer {\n    void play(); }"]],[6578,6578],[6651,6651]]],[1573114603228,["GJX@GJXAIOU",[[-1,6578,"package a_autoConfig;   public interface MediaPlayer {\n    void play(); }"]],[6651,6651],[6578,6578]]],[1573114605479,["GJX@GJXAIOU",[[1,6578,"package a_autoConfig;\n\npublic interface MediaPlayer {\n    void play();\n}"]],[6578,6578],[6650,6650]]],[1573114618577,["GJX@GJXAIOU",[[1,6573,"MediaPlay_"]],[6573,6573],[6583,6583]]],[1573114630855,["GJX@GJXAIOU",[[1,6666,"\n"]],[6664,6664],[6665,6665]]],[1573114632038,["GJX@GJXAIOU",[[1,6667,"\n"]],[6665,6665],[6666,6666]]],[1573114697349,[null,[[1,13071," "],[-1,14613," "],[-1,14616,"2"],[1,14617," "],[1,14620,"在"]],[13071,13071],[14621,14621]]],[1573114697350,[null,[[-1,13071," "],[1,14614," "],[1,14616,"2"],[-1,14616," "],[-1,14620,"在"]],[14621,14621],[13071,13071]]],[1573114646029,["GJX@GJXAIOU",[[1,6666,"```java"]],[6666,6666],[6673,6673]]],[1573114646282,["GJX@GJXAIOU",[[1,6675,"\n"]],[6673,6673],[6674,6674]]],[1573114646598,["GJX@GJXAIOU",[[1,6676,"\n"]],[6674,6674],[6675,6675]]],[1573114647601,["GJX@GJXAIOU",[[1,6675,"```"]],[6675,6675],[6678,6678]]],[1573114651540,["GJX@GJXAIOU",[[1,6674,"package a_autoConfig;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CDPlayer implements MediaPlayer {\n\n    @Autowired\n    private CompactDisk cd;\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n}"]],[6674,6674],[6978,6978]]],[1573114654109,["GJX@GJXAIOU",[[1,6665,"sahgnm"]],[6665,6665],[6671,6671]]],[1573114656003,["GJX@GJXAIOU",[[-1,6665,"sahgnm"]],[6671,6671],[6665,6665]]],[1573114658632,["GJX@GJXAIOU",[[1,6665,"上面井口的"]],[6665,6665],[6670,6670]]],[1573114659629,["GJX@GJXAIOU",[[-1,6667,"井口的"]],[6670,6670],[6667,6667]]],[1573114662521,["GJX@GJXAIOU",[[1,6667,"接口的实现类"]],[6667,6667],[6673,6673]]],[1573114757350,[null,[[1,13395," "],[-1,14937," "],[-1,14940,"2"],[1,14941," "],[1,14944,"在"]],[13395,13395],[14945,14945]]],[1573114757350,[null,[[-1,13395," "],[1,14938," "],[1,14940,"2"],[-1,14940," "],[-1,14944,"在"]],[14945,14945],[13395,13395]]],[1573114732859,["GJX@GJXAIOU",[[1,8638,"，就是将上面的 @Component 换成 @Named 接口"]],[8638,8638],[8669,8669]]],[1573114733646,["GJX@GJXAIOU",[[-1,8667,"接口"]],[8669,8669],[8667,8667]]],[1573114737630,["GJX@GJXAIOU",[[1,8667,"即可；"]],[8667,8667],[8670,8670]]],[1573114741566,["GJX@GJXAIOU",[[-1,8672,"```\n@Named(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n```\n"]],[8672,8758],[8672,8672]]],[1573114741989,["GJX@GJXAIOU",[[-1,8672,"\n"]],[8672,8672],[8671,8671]]],[1573114750688,["GJX@GJXAIOU",[[-1,8735,"本书的作者更喜欢@Component。"]],[8735,8754],[8735,8735]]],[1573114751989,["GJX@GJXAIOU",[[-1,8736,"\n"]],[8735,8735],[8734,8734]]],[1573114877720,[null,[[1,13320," "],[-1,14862," "],[-1,14865,"2"],[1,14866," "],[1,14869,"在"]],[13320,13320],[14870,14870]]],[1573114877720,[null,[[-1,13320," "],[1,14863," "],[1,14865,"2"],[-1,14865," "],[-1,14869,"在"]],[14870,14870],[13320,13320]]],[1573114848197,["GJX@GJXAIOU",[[1,9116,"例如："]],[9116,9116],[9119,9119]]],[1573114852360,["GJX@GJXAIOU",[[-1,9140,"@ComponentScan(basePackages={\"soundsystem\", \"video\"})"]],[9140,9193],[9140,9140]]],[1573114854233,["GJX@GJXAIOU",[[1,9119,"·"]],[9119,9119],[9120,9120]]],[1573114855297,["GJX@GJXAIOU",[[-1,9119,"·"]],[9120,9120],[9119,9119]]],[1573114856102,["GJX@GJXAIOU",[[1,9119,"``"]],[9119,9119],[9121,9121]]],[1573114857456,["GJX@GJXAIOU",[[1,9120,"@ComponentScan(basePackages={\"soundsystem\", \"video\"})"]],[9120,9120],[9173,9173]]],[1573114860751,["GJX@GJXAIOU",[[-1,9176,"```\n@Configuration\n\npublic class CDPlayerConfig { }\n\n```\n"]],[9175,9232],[9175,9175]]],[1573114861424,["GJX@GJXAIOU",[[-1,9176,"\n"]],[9175,9175],[9174,9174]]],[1573114937353,[null,[[1,13267," "],[-1,14809," "],[-1,14812,"2"],[1,14813," "],[1,14816,"在"]],[13267,13267],[14817,14817]]],[1573114937353,[null,[[-1,13267," "],[1,14810," "],[1,14812,"2"],[-1,14812," "],[-1,14816,"在"]],[14817,14817],[13267,13267]]],[1573114882294,["GJX@GJXAIOU",[[1,9223,"**"],[1,9237,"**"]],[9223,9237],[9223,9241]]],[1573114997354,[null,[[1,13271," "],[-1,14813," "],[-1,14816,"2"],[1,14817," "],[1,14820,"在"]],[13271,13271],[14821,14821]]],[1573114997354,[null,[[-1,13271," "],[1,14814," "],[1,14816,"2"],[-1,14816," "],[-1,14820,"在"]],[14821,14821],[13271,13271]]],[1573114963895,["GJX@GJXAIOU",[[1,9242,"zhe"]],[9242,9242],[9245,9245]]],[1573114965231,["GJX@GJXAIOU",[[-1,9242,"zhe"]],[9245,9245],[9242,9242]]],[1573114966592,["GJX@GJXAIOU",[[1,9242,"****"]],[9242,9242],[9244,9244]]],[1573114976829,["GJX@GJXAIOU",[[1,9244,"这样也会扫描该类（）"]],[9244,9244],[9254,9254]]],[1573114978930,["GJX@GJXAIOU",[[1,9253,"接口"]],[9253,9253],[9255,9255]]],[1573114984481,["GJX@GJXAIOU",[[1,9256,"所在包"]],[9256,9256],[9259,9259]]],[1573115057358,[null,[[1,13290," "],[-1,14832," "],[-1,14835,"2"],[1,14836," "],[1,14839,"在"]],[13290,13290],[14840,14840]]],[1573115057358,[null,[[-1,13290," "],[1,14833," "],[1,14835,"2"],[-1,14835," "],[-1,14839,"在"]],[14840,14840],[13290,13290]]],[1573115034088,["GJX@GJXAIOU",[[1,9261,"，即该类所在的包将成为组件扫描的基础包。"]],[9261,9261],[9281,9281]]],[1573115117357,[null,[[1,13310," "],[-1,14852," "],[-1,14855,"2"],[1,14856," "],[1,14859,"在"]],[13310,13310],[14860,14860]]],[1573115117357,[null,[[-1,13310," "],[1,14853," "],[1,14855,"2"],[-1,14855," "],[-1,14859,"在"]],[14860,14860],[13310,13310]]],[1573115116680,["GJX@GJXAIOU",[[1,9281,"推荐"]],[9281,9281],[9283,9283]]],[1573115177363,[null,[[1,13312," "],[-1,14854," "],[-1,14857,"2"],[1,14858," "],[1,14861,"在"]],[13312,13312],[14862,14862]]],[1573115177363,[null,[[-1,13312," "],[1,14855," "],[1,14857,"2"],[-1,14857," "],[-1,14861,"在"]],[14862,14862],[13312,13312]]],[1573115117740,["GJX@GJXAIOU",[[1,9283,"使用"]],[9283,9283],[9285,9285]]],[1573115118632,["GJX@GJXAIOU",[[-1,9283,"使用"]],[9285,9285],[9283,9283]]],[1573115122040,["GJX@GJXAIOU",[[1,9283,"在扫描的boast"]],[9283,9283],[9292,9292]]],[1573115122194,["GJX@GJXAIOU",[[1,9287," "]],[9292,9292],[9293,9293]]],[1573115123999,["GJX@GJXAIOU",[[-1,9287," boast"]],[9293,9293],[9287,9287]]],[1573115138551,["GJX@GJXAIOU",[[1,9287,"包中新建一个空的接口，用于被扫描；"]],[9287,9287],[9304,9304]]],[1573115297532,[null,[[1,13333," "],[-1,14875," "],[-1,14878,"2"],[1,14879," "],[1,14882,"在"]],[13333,13333],[14883,14883]]],[1573115297532,[null,[[-1,13333," "],[1,14876," "],[1,14878,"2"],[-1,14878," "],[-1,14882,"在"]],[14883,14883],[13333,13333]]],[1573115264037,["GJX@GJXAIOU",[[1,9470,"\n"]],[9469,9469],[9470,9470]]],[1573115264982,["GJX@GJXAIOU",[[1,9471,"\n"]],[9470,9470],[9471,9471]]],[1573115297169,["GJX@GJXAIOU",[[1,9470,"自动装配：让 Spring 自动满足 Bean 依赖的一种方法，在满足依赖的过程中，会在 "]],[9470,9470],[9515,9515]]],[1573115357610,[null,[[1,13380," "],[-1,14922," "],[-1,14925,"2"],[1,14926," "],[1,14929,"在"]],[13380,13380],[14930,14930]]],[1573115357610,[null,[[-1,13380," "],[1,14923," "],[1,14925,"2"],[-1,14925," "],[-1,14929,"在"]],[14930,14930],[13380,13380]]],[1573115308056,["GJX@GJXAIOU",[[1,9515,"Spring 应用上下文中寻找匹配"]],[9515,9515],[9532,9532]]],[1573115311348,["GJX@GJXAIOU",[[-1,9528,"寻找匹配"]],[9532,9532],[9528,9528]]],[1573115348228,["GJX@GJXAIOU",[[1,9528,"寻找匹配某个 Bean 需求的其他 Bean；使用 @Autowire的"]],[9528,9528],[9564,9564]]],[1573115348852,["GJX@GJXAIOU",[[-1,9563,"的"]],[9564,9564],[9563,9563]]],[1573115349966,["GJX@GJXAIOU",[[1,9563,"dd"]],[9563,9563],[9565,9565]]],[1573115350552,["GJX@GJXAIOU",[[-1,9564,"d"]],[9565,9565],[9564,9564]]],[1573115357232,["GJX@GJXAIOU",[[1,9564," 来声明要进行"]],[9564,9564],[9571,9571]]],[1573115417524,[null,[[1,13436," "],[-1,14978," "],[-1,14981,"2"],[1,14982," "],[1,14985,"在"]],[13436,13436],[14986,14986]]],[1573115417524,[null,[[-1,13436," "],[1,14979," "],[1,14981,"2"],[-1,14981," "],[-1,14985,"在"]],[14986,14986],[13436,13436]]],[1573115361792,["GJX@GJXAIOU",[[1,9571,"自动转配"]],[9571,9571],[9575,9575]]],[1573115362558,["GJX@GJXAIOU",[[-1,9573,"转配"]],[9575,9575],[9573,9573]]],[1573115364679,["GJX@GJXAIOU",[[1,9573,"装配；"]],[9573,9573],[9576,9576]]],[1573115537529,[null,[[1,13441," "],[-1,14983," "],[-1,14986,"2"],[1,14987," "],[1,14990,"在"]],[13441,13441],[14991,14991]]],[1573115537529,[null,[[-1,13441," "],[1,14984," "],[1,14986,"2"],[-1,14986," "],[-1,14990,"在"]],[14991,14991],[13441,13441]]],[1573115506489,["GJX@GJXAIOU",[[1,9578,"\n"]],[9577,9577],[9578,9578]]],[1573115507950,["GJX@GJXAIOU",[[1,9579,"\n"]],[9577,9577],[9578,9578]]],[1573115508909,["GJX@GJXAIOU",[[1,9578,"···"]],[9578,9578],[9581,9581]]],[1573115510225,["GJX@GJXAIOU",[[-1,9578,"···"]],[9581,9581],[9578,9578]]],[1573115510590,["GJX@GJXAIOU",[[1,9578,"```java\npackage a_autoConfig;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CDPlayer implements MediaPlayer {\n\n    @Autowired\n    private CompactDisk cd;\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n}\n```"]],[9578,9578],[9894,9894]]],[1573115519804,["GJX@GJXAIOU",[[-1,9800,"private CompactDisk cd;"]],[9800,9823],[9800,9800]]],[1573115530696,["GJX@GJXAIOU",[[1,9800,"public CDPlayer(){"]],[9800,9800],[9818,9818]]],[1573115597529,[null,[[1,13754," "],[-1,15296," "],[-1,15299,"2"],[1,15300," "],[1,15303,"在"]],[13754,13754],[15304,15304]]],[1573115597529,[null,[[-1,13754," "],[1,15297," "],[1,15299,"2"],[-1,15299," "],[-1,15303,"在"]],[15304,15304],[13754,13754]]],[1573115548089,["GJX@GJXAIOU",[[1,9818,"}"]],[9818,9818],[9819,9819]]],[1573115552429,["GJX@GJXAIOU",[[1,9818,"\n    \n    "]],[9818,9818],[9828,9828]]],[1573115559718,["GJX@GJXAIOU",[[1,9780,"    pricate COm"]],[9780,9780],[9795,9795]]],[1573115560975,["GJX@GJXAIOU",[[-1,9793,"Om"]],[9795,9795],[9793,9793]]],[1573115565949,["GJX@GJXAIOU",[[1,9793,"ompactDise"]],[9793,9793],[9803,9803]]],[1573115566740,["GJX@GJXAIOU",[[-1,9802,"e"]],[9803,9803],[9802,9802]]],[1573115568882,["GJX@GJXAIOU",[[1,9802,"c cd;"]],[9802,9802],[9807,9807]]],[1573115570542,["GJX@GJXAIOU",[[1,9812,"\n    "]],[9807,9807],[9812,9812]]],[1573115577641,["GJX@GJXAIOU",[[1,9855,"  this.cd = cd;"]],[9855,9855],[9870,9870]]],[1573115582361,["GJX@GJXAIOU",[[1,9848,"COmpac"]],[9848,9848],[9854,9854]]],[1573115583759,["GJX@GJXAIOU",[[-1,9848,"COmpac"]],[9854,9854],[9848,9848]]],[1573115589981,["GJX@GJXAIOU",[[1,9848,"CompactDisc cd"]],[9848,9848],[9862,9862]]],[1573115592084,["GJX@GJXAIOU",[[-1,9808,"    "],[1,9812,"\n"]],[9812,9812],[9809,9809]]],[1573115593020,["GJX@GJXAIOU",[[1,9809,"//"]],[9809,9809],[9811,9811]]],[1573115593959,["GJX@GJXAIOU",[[-1,9809,"//"]],[9811,9811],[9809,9809]]],[1573115596448,["GJX@GJXAIOU",[[1,9809,"    // "]],[9809,9809],[9816,9816]]],[1573115657530,[null,[[1,13830," "],[-1,15372," "],[-1,15375,"2"],[1,15376," "],[1,15379,"在"]],[13830,13830],[15380,15380]]],[1573115657530,[null,[[-1,13830," "],[1,15373," "],[1,15375,"2"],[-1,15375," "],[-1,15379,"在"]],[15380,15380],[13830,13830]]],[1573115598955,["GJX@GJXAIOU",[[1,9816,"gai"]],[9816,9816],[9819,9819]]],[1573115600475,["GJX@GJXAIOU",[[-1,9816,"gai"]],[9819,9819],[9816,9816]]],[1573115605232,["GJX@GJXAIOU",[[1,9816,"该注解表名："]],[9816,9816],[9822,9822]]],[1573115608406,["GJX@GJXAIOU",[[-1,9817,"注解表名："]],[9822,9822],[9817,9817]]],[1573115654121,["GJX@GJXAIOU",[[1,9817,"注解表明：当 Spring 创建 CDPlayer 时候，会通过该构造器进行实例化并且传入一个可以设置的"]],[9817,9817],[9869,9869]]],[1573115717531,[null,[[1,13883," "],[-1,15425," "],[-1,15428,"2"],[1,15429," "],[1,15432,"在"]],[13883,13883],[15433,15433]]],[1573115717531,[null,[[-1,13883," "],[1,15426," "],[1,15428,"2"],[-1,15428," "],[-1,15432,"在"]],[15433,15433],[13883,13883]]],[1573115662020,["GJX@GJXAIOU",[[-1,9868,"的"]],[9869,9869],[9868,9868]]],[1573115671757,["GJX@GJXAIOU",[[1,9868,"给 CompactDisc 累成"]],[9868,9868],[9884,9884]]],[1573115673444,["GJX@GJXAIOU",[[-1,9882,"累成"]],[9884,9884],[9882,9882]]],[1573115676804,["GJX@GJXAIOU",[[1,9882,"类型的 Bean"]],[9882,9882],[9890,9890]]],[1573115688901,["GJX@GJXAIOU",[[1,10041,"**"],[1,10076,"**"]],[10041,10076],[10041,10080]]],[1573115777536,[null,[[1,13908," "],[-1,15450," "],[-1,15453,"2"],[1,15454," "],[1,15457,"在"]],[13908,13908],[15458,15458]]],[1573115777536,[null,[[-1,13908," "],[1,15451," "],[1,15453,"2"],[-1,15453," "],[-1,15457,"在"]],[15458,15458],[13908,13908]]],[1573115732942,["GJX@GJXAIOU",[[1,10204,"（）"]],[10204,10204],[10206,10206]]],[1573115735581,["GJX@GJXAIOU",[[-1,10204,"（）"]],[10206,10206],[10204,10204]]],[1573115737211,["GJX@GJXAIOU",[[1,10204,"``"]],[10204,10204],[10206,10206]]],[1573115742278,["GJX@GJXAIOU",[[1,10205,"@Autowird"]],[10205,10205],[10214,10214]]],[1573115742917,["GJX@GJXAIOU",[[-1,10213,"d"]],[10214,10214],[10213,10213]]],[1573115745087,["GJX@GJXAIOU",[[1,10213,"ed()"]],[10213,10213],[10217,10217]]],[1573115751489,["GJX@GJXAIOU",[[1,10216,"required=false"]],[10216,10216],[10230,10230]]],[1573115807010,[null,[[1,13936," "],[-1,15478," "],[-1,15481,"2"],[1,15482," "],[1,15485,"在"]],[13936,13936],[15486,15486]]],[1573115807010,[null,[[-1,13936," "],[1,15479," "],[1,15481,"2"],[-1,15481," "],[-1,15485,"在"]],[15486,15486],[13936,13936]]],[1573115779523,["GJX@GJXAIOU",[[1,10275,"dabh"]],[10275,10275],[10279,10279]]],[1573115781047,["GJX@GJXAIOU",[[-1,10275,"dabh"]],[10279,10279],[10275,10275]]],[1573115782252,["GJX@GJXAIOU",[[1,10275,"但是"]],[10275,10275],[10277,10277]]],[1573115785140,["GJX@GJXAIOU",[[-1,10275,"但是"]],[10277,10277],[10275,10275]]],[1573115804661,["GJX@GJXAIOU",[[1,10275,"就是不装配也不会报异常，这样使用时候可能出错 NPE问题"]],[10275,10275],[10303,10303]]],[1573115804812,["GJX@GJXAIOU",[[1,10301," "]],[10303,10303],[10304,10304]]],[1573115805833,["GJX@GJXAIOU",[[1,10304,"。"]],[10304,10304],[10305,10305]]],[1573115867023,[null,[[1,13966," "],[-1,15508," "],[-1,15511,"2"],[1,15512," "],[1,15515,"在"]],[13966,13966],[15516,15516]]],[1573115867023,[null,[[-1,13966," "],[1,15509," "],[1,15511,"2"],[-1,15511," "],[-1,15515,"在"]],[15516,15516],[13966,13966]]],[1573115828750,["GJX@GJXAIOU",[[1,10336,"，因为没有指定那个 ben "]],[10336,10336],[10350,10350]]],[1573115831395,["GJX@GJXAIOU",[[-1,10348,"n "]],[10350,10350],[10348,10348]]],[1573115833272,["GJX@GJXAIOU",[[1,10348,"an jixn"]],[10348,10348],[10355,10355]]],[1573115834650,["GJX@GJXAIOU",[[-1,10351,"jixn"]],[10355,10355],[10351,10351]]],[1573115838234,["GJX@GJXAIOU",[[1,10351,"进行自动装配"]],[10351,10351],[10357,10357]]],[1573115853305,["GJX@GJXAIOU",[[-1,10351,"进行自动装配"]],[10357,10357],[10351,10351]]],[1573115927025,[null,[[1,13981," "],[-1,15523," "],[-1,15526,"2"],[1,15527," "],[1,15530,"在"]],[13981,13981],[15531,15531]]],[1573115927025,[null,[[-1,13981," "],[1,15524," "],[1,15526,"2"],[-1,15526," "],[-1,15530,"在"]],[15531,15531],[13981,13981]]],[1573115874626,["GJX@GJXAIOU",[[1,10042," *"],[1,10140,"* "],[1,10141,"* "],[1,10306,"* "],[1,10307,"* "],[1,10353,"* "],[1,10354,"* "]],[10041,10402],[10043,10416]]],[1573115877916,["GJX@GJXAIOU",[[-1,10142,"* "]],[10142,10144],[10142,10142]]],[1573115879211,["GJX@GJXAIOU",[[-1,10310,"* "]],[10310,10312],[10310,10310]]],[1573115880218,["GJX@GJXAIOU",[[-1,10359,"* "]],[10359,10361],[10359,10359]]],[1573117007047,[null,[[1,13989," "],[-1,15531," "],[-1,15534,"2"],[1,15535," "],[1,15538,"在"]],[13989,13989],[15539,15539]]],[1573117007047,[null,[[-1,13989," "],[1,15532," "],[1,15534,"2"],[-1,15534," "],[-1,15538,"在"]],[15539,15539],[13989,13989]]],[1573116988707,["GJX@GJXAIOU",[[1,10973,"\n"]],[10973,10973],[10974,10974]]],[1573117307049,[null,[[1,13990," "],[-1,15532," "],[-1,15535,"2"],[1,15536," "],[1,15539,"在"]],[13990,13990],[15540,15540]]],[1573117307049,[null,[[-1,13990," "],[1,15533," "],[1,15535,"2"],[-1,15535," "],[-1,15539,"在"]],[15540,15540],[13990,13990]]],[1573117252852,["GJX@GJXAIOU",[[-1,11277,"\n"]],[11277,11277],[11276,11276]]],[1573117261987,["GJX@GJXAIOU",[[-1,11202,"@Bean注解会告诉Spring这个方法将返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。\n默认情况下，bean的ID与方法名一致。如果想为其设置一个不同的名字，可以重命名该方法，也可以通过@Bean的name属性指定。"]],[11202,11341],[11202,11202]]],[1573125827210,[null,[[1,13850," "],[-1,15392," "],[-1,15395,"2"],[1,15396," "],[1,15399,"在"]],[13850,13850],[15400,15400]]],[1573125827210,[null,[[-1,13850," "],[1,15393," "],[1,15395,"2"],[-1,15395," "],[-1,15399,"在"]],[15400,15400],[13850,13850]]],[1573125798872,["GJX@GJXAIOU",[[-1,11197,"\n"]],[11197,11197],[11196,11196]]],[1573125805497,["GJX@GJXAIOU",[[1,11117,"    "]],[11117,11117],[11121,11121]]],[1573125887210,[null,[[1,13853," "],[-1,15395," "],[-1,15398,"2"],[1,15399," "],[1,15402,"在"]],[13853,13853],[15403,15403]]],[1573125887211,[null,[[-1,13853," "],[1,15396," "],[1,15398,"2"],[-1,15398," "],[-1,15402,"在"]],[15403,15403],[13853,13853]]],[1573125862151,["GJX@GJXAIOU",[[1,11821,"\n"]],[11819,11819],[11820,11820]]],[1573125862498,["GJX@GJXAIOU",[[1,11822,"\n"]],[11820,11820],[11821,11821]]],[1573125866259,["GJX@GJXAIOU",[[1,11821,"代码示例："]],[11821,11821],[11826,11826]]],[1573125866504,["GJX@GJXAIOU",[[1,11828,"\n"]],[11826,11826],[11827,11827]]],[1573125869803,["GJX@GJXAIOU",[[1,11827,"```j"]],[11827,11827],[11831,11831]]],[1573125870471,["GJX@GJXAIOU",[[-1,11830,"j"]],[11831,11831],[11830,11830]]],[1573125880412,["GJX@GJXAIOU",[[1,11830,"COm"]],[11830,11830],[11833,11833]]],[1573125881560,["GJX@GJXAIOU",[[-1,11831,"Om"]],[11833,11833],[11831,11831]]],[1573125884203,["GJX@GJXAIOU",[[1,11831,"ompact"]],[11831,11831],[11837,11837]]],[1573125947219,[null,[[1,13871," "],[-1,15413," "],[-1,15416,"2"],[1,15417," "],[1,15420,"在"]],[13871,13871],[15421,15421]]],[1573125947219,[null,[[-1,13871," "],[1,15414," "],[1,15416,"2"],[-1,15416," "],[-1,15420,"在"]],[15421,15421],[13871,13871]]],[1573125901308,["GJX@GJXAIOU",[[1,11837,"Disk_java"]],[11837,11837],[11846,11846]]],[1573125901652,["GJX@GJXAIOU",[[1,11848,"\n"]],[11846,11846],[11847,11847]]],[1573125902108,["GJX@GJXAIOU",[[1,11849,"\n"]],[11847,11847],[11848,11848]]],[1573125903202,["GJX@GJXAIOU",[[1,11848,"```"]],[11848,11848],[11851,11851]]],[1573125917222,["GJX@GJXAIOU",[[1,11847,"package b_javaConfig;\n\npublic interface CompactDisk {\n    void play();\n}"]],[11847,11847],[11919,11919]]],[1573125923394,["GJX@GJXAIOU",[[1,11925,"\n"]],[11923,11923],[11924,11924]]],[1573125923725,["GJX@GJXAIOU",[[1,11926,"\n"]],[11924,11924],[11925,11925]]],[1573125943445,["GJX@GJXAIOU",[[1,11925,"Sg"]],[11925,11925],[11927,11927]]],[1573125945006,["GJX@GJXAIOU",[[-1,11925,"Sg"]],[11927,11927],[11925,11925]]],[1573125946807,["GJX@GJXAIOU",[[1,11925,"```"]],[11925,11925],[11928,11928]]],[1573126007292,[null,[[1,13962," "],[-1,15504," "],[-1,15507,"2"],[1,15508," "],[1,15511,"在"]],[13962,13962],[15512,15512]]],[1573126007292,[null,[[-1,13962," "],[1,15505," "],[1,15507,"2"],[-1,15507," "],[-1,15511,"在"]],[15512,15512],[13962,13962]]],[1573125948851,["GJX@GJXAIOU",[[1,11928,"Sgt"]],[11928,11928],[11931,11931]]],[1573125952239,["GJX@GJXAIOU",[[1,11933,"\n"]],[11931,11931],[11932,11932]]],[1573125952883,["GJX@GJXAIOU",[[1,11934,"\n"]],[11932,11932],[11933,11933]]],[1573125953874,["GJX@GJXAIOU",[[1,11933,"```"]],[11933,11933],[11936,11936]]],[1573125957601,["GJX@GJXAIOU",[[1,11932,"package b_javaConfig;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\npublic class SgtPeppersDisk implements CompactDisk {\n\n    private String title = \"Sgt. Pepper's Lonely Hearts Club Band\";\n    private String artist = \"The Beatles\";\n\n    @Override\n    public void play() {\n        System.out.println(\"通过b_javaConfig显示：Playing \" + title + \" by \" + artist);\n    }\n}"]],[11932,11932],[12371,12371]]],[1573125971238,["GJX@GJXAIOU",[[1,11931,"PeppersDisk_java"]],[11931,11931],[11947,11947]]],[1573125978647,["GJX@GJXAIOU",[[1,12393,"\n"]],[12391,12391],[12392,12392]]],[1573125978971,["GJX@GJXAIOU",[[1,12394,"\n"]],[12392,12392],[12393,12393]]],[1573125994210,["GJX@GJXAIOU",[[1,12393,"```Mesia"]],[12393,12393],[12401,12401]]],[1573125995321,["GJX@GJXAIOU",[[-1,12398,"sia"]],[12401,12401],[12398,12398]]],[1573125997956,["GJX@GJXAIOU",[[1,12398,"sia"]],[12398,12398],[12401,12401]]],[1573125999406,["GJX@GJXAIOU",[[-1,12398,"sia"]],[12401,12401],[12398,12398]]],[1573126002050,["GJX@GJXAIOU",[[1,12398,"dia_java"]],[12398,12398],[12406,12406]]],[1573126002206,["GJX@GJXAIOU",[[1,12408,"\n"]],[12406,12406],[12407,12407]]],[1573126003047,["GJX@GJXAIOU",[[1,12409,"\n"]],[12407,12407],[12408,12408]]],[1573126003961,["GJX@GJXAIOU",[[1,12408,"```"]],[12408,12408],[12411,12411]]],[1573126006846,["GJX@GJXAIOU",[[1,12407,"package b_javaConfig;\n\npublic interface MediaPlayer {\n    void play();\n}"]],[12407,12407],[12479,12479]]],[1573126067323,[null,[[1,14517," "],[-1,16059," "],[-1,16062,"2"],[1,16063," "],[1,16066,"在"]],[14517,14517],[16067,16067]]],[1573126067323,[null,[[-1,14517," "],[1,16060," "],[1,16062,"2"],[-1,16062," "],[-1,16066,"在"]],[16067,16067],[14517,14517]]],[1573126009527,["GJX@GJXAIOU",[[1,12485,"\n"]],[12483,12483],[12484,12484]]],[1573126010186,["GJX@GJXAIOU",[[1,12486,"\n"]],[12484,12484],[12485,12485]]],[1573126038693,["GJX@GJXAIOU",[[1,12485,"```CDPlat"]],[12485,12485],[12494,12494]]],[1573126039151,["GJX@GJXAIOU",[[-1,12493,"t"]],[12494,12494],[12493,12493]]],[1573126042835,["GJX@GJXAIOU",[[1,12493,"yer_java"]],[12493,12493],[12501,12501]]],[1573126043152,["GJX@GJXAIOU",[[1,12503,"\n"]],[12501,12501],[12502,12502]]],[1573126043604,["GJX@GJXAIOU",[[1,12504,"\n"]],[12502,12502],[12503,12503]]],[1573126044952,["GJX@GJXAIOU",[[1,12503,"```"]],[12503,12503],[12506,12506]]],[1573126048679,["GJX@GJXAIOU",[[1,12502,"package b_javaConfig;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter\n@Getter\npublic class CDPlayer implements MediaPlayer {\n\n    private CompactDisk cd;\n\n    public CDPlayer(CompactDisk cd) {\n        this.cd = cd;\n    }\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n\n    public void setCompactDisc(CompactDisk compactDisk) {\n    }\n}"]],[12502,12502],[12860,12860]]],[1573126052119,["GJX@GJXAIOU",[[1,12866,"\n"]],[12864,12864],[12865,12865]]],[1573126052249,["GJX@GJXAIOU",[[1,12867,"\n"]],[12865,12865],[12866,12866]]],[1573126054546,["GJX@GJXAIOU",[[1,12866,"```"]],[12866,12866],[12869,12869]]],[1573126127319,[null,[[1,14903," "],[-1,16445," "],[-1,16448,"2"],[1,16449," "],[1,16452,"在"]],[14903,14903],[16453,16453]]],[1573126127319,[null,[[-1,14903," "],[1,16446," "],[1,16448,"2"],[-1,16448," "],[-1,16452,"在"]],[16453,16453],[14903,14903]]],[1573126069925,["GJX@GJXAIOU",[[1,12869,"D"]],[12869,12869],[12870,12870]]],[1573126070349,["GJX@GJXAIOU",[[-1,12869,"D"]],[12870,12870],[12869,12869]]],[1573126079488,["GJX@GJXAIOU",[[1,12869,"CDPlayerConfig_java"]],[12869,12869],[12888,12888]]],[1573126079840,["GJX@GJXAIOU",[[1,12890,"\n"]],[12888,12888],[12889,12889]]],[1573126079967,["GJX@GJXAIOU",[[1,12891,"\n"]],[12889,12889],[12890,12890]]],[1573126080435,["GJX@GJXAIOU",[[1,12892,"\n"]],[12890,12890],[12891,12891]]],[1573126081264,["GJX@GJXAIOU",[[1,12891,"```"]],[12891,12891],[12894,12894]]],[1573126085521,["GJX@GJXAIOU",[[1,12889,"package b_javaConfig;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by yangjing on 2018/1/2\n */\n@Configuration\npublic class CDPlayerConfig {\n\n    /**\n     * @Bean 注解会告诉Spring这个方法将返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。\n     * 默认情况下，bean的ID与方法名一致。如果想为其设置一个不同的名字，可以重命名该方法，也可以通过@Bean的name属性指定。\n     * @return\n     */\n    @Bean(name = \"hello\")\n    public CompactDisk sgtPerppersDisk(){\n        return new SgtPeppersDisk();\n    }\n\n    /**\n     * 方案一：将 CompactDisk 装配到 CDPlayer 中最简单方式就是 引用创建 Bean 的方法;\n     * 该方法也使用 @Bean 表示该方法会创建一个 Bean 实例并将其注册到 Spring 上下文中，其 BeanID 即为类名；\n     * 这里调用了需要传入 CompactDisk 对象（sgtPerppersDisk 是 CompactDisc 的实现类）的构造器 来创建 CDPlayer 实例，\n     *      但是这里的 CompactDisc 对象不是通过 SgtPeppersDisk() 得到的，因为 SgtPeppersDisk() 方法上也有 @Bean，\n     *      因此 Spring 会拦截所有对他的调用，并确保直接返回该方法创建的 bean，而不是每次都对其进行实际的调用。\n     * @return\n     */\n    @Bean\n    public MediaPlayer mediaPlayer(){\n        return new CDPlayer(sgtPerppersDisk());\n    }\n\n    /**\n     * 默认 Spring 中的 bean 都是单例的，\n     * 接上面：这里不会每次都调用 sgtPerppersDisk()，Spring 会拦截对 sgtPerppersDisk() 的调用，并确保返回的是 Spring 所创建的 Bean，\n     *   即 Spring 本身在调用 sgtPerppersDisk() 时所创建的 CompactDisc bean，因此两个 MediaPlayer bean 会得到相同的\n     *   SgtPeppersDisk 实例。\n     * @return\n     */\n    @Bean\n    public MediaPlayer anotherMediaPlayer(){\n        return new CDPlayer(sgtPerppersDisk());\n    }\n\n    /**\n     * 方式二：当 Spring 调用 cdPlayer() 创建 CDPlayer bean 的时候，会自动装配一个 CompactDisc\n     * 到配置方法中，然后方法体就可以按照合适的方法使用它；\n     *  这样 cdPlayer() 方法也能将 CompactDisc 注入到 CDPlayer 的构造器中，不用明确引用 CompactDisc 的 @Bean 方法；\n     *  优势：ComponentDisc 不要求将其声明到同一个配置类，甚至不一定要求使用 JavaConfig 声明，可以采用组件扫描自动发现或者xml配置都行。\n     * @param compactDisk\n     * @return\n     */\n    @Bean\n    public MediaPlayer mediaPlayer(CompactDisk compactDisk) {\n        return new CDPlayer(compactDisk);\n    }\n\n    /**\n     * 方式二的另一种 DI方式，上面通过构造器实现 DI 功能，下面通过 Setter 方法实现注入 CompactDisc\n     * 重点：带有 @Bean 注解的方法可以采用任何必要的 Java 功能产生 bean 实例即可，不一定仅仅使用构造器和 setter 方法；\n     * @param compactDisk\n     * @return\n     */\n//    @Bean\n//    public MediaPlayer mediaPlayer(CompactDisk compactDisk){\n//        CDPlayer cdPlayer = new CDPlayer(compactDisk);\n//        cdPlayer.setCompactDisc(compactDisk);\n//        return cdPlayer;\n//    }\n}\n"]],[12889,12889],[15206,15206]]],[1573127027339,[null,[[1,17245," "],[-1,18787," "],[-1,18790,"2"],[1,18791," "],[1,18794,"在"]],[17245,17245],[18795,18795]]],[1573127027339,[null,[[-1,17245," "],[1,18788," "],[1,18790,"2"],[-1,18790," "],[-1,18794,"在"]],[18795,18795],[17245,17245]]],[1573126989622,["GJX@GJXAIOU",[[-1,14989,"//"]],[14989,14991],[14989,14989]]],[1573126991166,["GJX@GJXAIOU",[[-1,14999,"//"]],[14999,15001],[14999,14999]]],[1573126992213,["GJX@GJXAIOU",[[-1,15060,"//"]],[15060,15062],[15060,15060]]],[1573126993377,["GJX@GJXAIOU",[[-1,15115,"//"]],[15115,15117],[15115,15115]]],[1573126994605,["GJX@GJXAIOU",[[-1,15161,"//"]],[15161,15163],[15161,15161]]],[1573126995555,["GJX@GJXAIOU",[[-1,15186,"//"]],[15186,15188],[15186,15186]]],[1573127147341,[null,[[1,17233," "],[-1,18775," "],[-1,18778,"2"],[1,18779," "],[1,18782,"在"]],[17233,17233],[18783,18783]]],[1573127147341,[null,[[-1,17233," "],[1,18776," "],[1,18778,"2"],[-1,18778," "],[-1,18782,"在"]],[18783,18783],[17233,17233]]],[1573127126573,["GJX@GJXAIOU",[[-1,16301,"\n"]],[16301,16301],[16300,16300]]],[1573127207343,[null,[[1,17232," "],[-1,18774," "],[-1,18777,"2"],[1,18778," "],[1,18781,"在"]],[17232,17232],[18782,18782]]],[1573127207343,[null,[[-1,17232," "],[1,18775," "],[1,18777,"2"],[-1,18777," "],[-1,18781,"在"]],[18782,18782],[17232,17232]]],[1573127165172,["GJX@GJXAIOU",[[1,15718,"===="]],[15718,15718],[15720,15720]]],[1573127167371,["GJX@GJXAIOU",[[-1,15720,"=="]],[15722,15722],[15720,15720]]],[1573127169561,["GJX@GJXAIOU",[[1,15722,"===="]],[15722,15722],[15724,15724]]],[1573127174386,["GJX@GJXAIOU",[[-1,15724,"=="]],[15724,15724],[15722,15722]]],[1573127176022,["GJX@GJXAIOU",[[1,15718," "]],[15718,15718],[15719,15719]]],[1573127179498,["GJX@GJXAIOU",[[1,15726," "]],[15726,15726],[15727,15727]]],[1573127447569,[null,[[1,17238," "],[-1,18780," "],[-1,18783,"2"],[1,18784," "],[1,18787,"在"]],[17238,17238],[18788,18788]]],[1573127447569,[null,[[-1,17238," "],[1,18781," "],[1,18783,"2"],[-1,18783," "],[-1,18787,"在"]],[18788,18788],[17238,17238]]],[1573127423863,["GJX@GJXAIOU",[[1,16307,"- \n"]],[16306,16306],[16309,16309]]],[1573127425090,["GJX@GJXAIOU",[[-1,16307,"- "]],[16309,16309],[16307,16307]]],[1573127427069,["GJX@GJXAIOU",[[1,16307,"sahgn"]],[16307,16307],[16312,16312]]],[1573127428842,["GJX@GJXAIOU",[[-1,16307,"sahgn"]],[16312,16312],[16307,16307]]],[1573127440931,["GJX@GJXAIOU",[[1,16307,"上面通过``"]],[16307,16307],[16313,16313]]],[1573127443587,["GJX@GJXAIOU",[[1,16312,"《。"]],[16312,16312],[16314,16314]]],[1573127445982,["GJX@GJXAIOU",[[-1,16312,"《。"]],[16314,16314],[16312,16312]]],[1573127447422,["GJX@GJXAIOU",[[1,16312,"<>"]],[16312,16312],[16314,16314]]],[1573127507565,[null,[[1,17247," "],[-1,18789," "],[-1,18792,"2"],[1,18793," "],[1,18796,"在"]],[17247,17247],[18797,18797]]],[1573127507565,[null,[[-1,17247," "],[1,18790," "],[1,18792,"2"],[-1,18792," "],[-1,18796,"在"]],[18797,18797],[17247,17247]]],[1573127449788,["GJX@GJXAIOU",[[1,16313,"bean "]],[16313,16313],[16318,16318]]],[1573127450509,["GJX@GJXAIOU",[[-1,16317," "]],[16318,16318],[16317,16317]]],[1573127465709,["GJX@GJXAIOU",[[1,16318," 标签声明了 CompactDisc 类"]],[16318,16318],[16338,16338]]],[1573127473719,["GJX@GJXAIOU",[[-1,16337,"类"]],[16338,16338],[16337,16337]]],[1573127477929,["GJX@GJXAIOU",[[1,16337,"接口的实现了"]],[16337,16337],[16343,16343]]],[1573127478863,["GJX@GJXAIOU",[[-1,16342,"了"]],[16343,16343],[16342,16342]]],[1573127490437,["GJX@GJXAIOU",[[1,16342,"类 SgtPeppersDisc"]],[16342,16342],[16358,16358]]],[1573127500541,["GJX@GJXAIOU",[[-1,16357,"c"]],[16358,16358],[16357,16357]]],[1573127500922,["GJX@GJXAIOU",[[1,16357,"k"]],[16357,16357],[16358,16358]]],[1573127567565,[null,[[1,17291," "],[-1,18833," "],[-1,18836,"2"],[1,18837," "],[1,18840,"在"]],[17291,17291],[18841,18841]]],[1573127567565,[null,[[-1,17291," "],[1,18834," "],[1,18836,"2"],[-1,18836," "],[-1,18840,"在"]],[18841,18841],[17291,17291]]],[1573127510597,["GJX@GJXAIOU",[[1,15839,"**"],[1,15849,"**"]],[15839,15849],[15839,15853]]],[1573127514176,["GJX@GJXAIOU",[[-1,15839,"**"]],[15841,15841],[15839,15839]]],[1573127515685,["GJX@GJXAIOU",[[-1,15849,"**"]],[15851,15851],[15849,15849]]],[1573127747567,[null,[[1,17291," "],[-1,18833," "],[-1,18836,"2"],[1,18837," "],[1,18840,"在"]],[17291,17291],[18841,18841]]],[1573127747567,[null,[[-1,17291," "],[1,18834," "],[1,18836,"2"],[-1,18836," "],[-1,18840,"在"]],[18841,18841],[17291,17291]]],[1573127708698,["GJX@GJXAIOU",[[1,16318,"`"]],[16318,16318],[16319,16319]]],[1573127710806,["GJX@GJXAIOU",[[-1,16359,"`"]],[16360,16360],[16359,16359]]],[1573127711451,["GJX@GJXAIOU",[[1,16359,","]],[16359,16359],[16360,16360]]],[1573127712344,["GJX@GJXAIOU",[[-1,16359,","]],[16360,16360],[16359,16359]]],[1573127723833,["GJX@GJXAIOU",[[1,16359,"，下面将 Compace"]],[16359,16359],[16371,16371]]],[1573127725597,["GJX@GJXAIOU",[[-1,16370,"e"]],[16371,16371],[16370,16370]]],[1573127734715,["GJX@GJXAIOU",[[1,16370,"tDisc 依赖注入到 CDPlayer 中"]],[16370,16370],[16392,16392]]],[1573127927571,[null,[[1,17324," "],[-1,18866," "],[-1,18869,"2"],[1,18870," "],[1,18873,"在"]],[17324,17324],[18874,18874]]],[1573127927571,[null,[[-1,17324," "],[1,18867," "],[1,18869,"2"],[-1,18869," "],[-1,18873,"在"]],[18874,18874],[17324,17324]]],[1573127886957,["GJX@GJXAIOU",[[1,16393,"\n"]],[16392,16392],[16393,16393]]],[1573127896999,["GJX@GJXAIOU",[[1,16393,"当 Spring 遇到 <bi"]],[16393,16393],[16408,16408]]],[1573127897598,["GJX@GJXAIOU",[[-1,16407,"i"]],[16408,16408],[16407,16407]]],[1573127899061,["GJX@GJXAIOU",[[1,16407,"ean >"]],[16407,16407],[16412,16412]]],[1573127900626,["GJX@GJXAIOU",[[-1,16410," >"]],[16412,16412],[16410,16410]]],[1573127901226,["GJX@GJXAIOU",[[1,16410,"."]],[16410,16410],[16411,16411]]],[1573127901870,["GJX@GJXAIOU",[[-1,16410,"."]],[16411,16411],[16410,16410]]],[1573127902514,["GJX@GJXAIOU",[[1,16410,"》"]],[16410,16410],[16411,16411]]],[1573127903068,["GJX@GJXAIOU",[[-1,16410,"》"]],[16411,16411],[16410,16410]]],[1573127918321,["GJX@GJXAIOU",[[1,16410,"> 元素之后，会创建一个 CDPlayer 实例，"]],[16410,16410],[16435,16435]]],[1573127987572,[null,[[1,17367," "],[-1,18909," "],[-1,18912,"2"],[1,18913," "],[1,18916,"在"]],[17367,17367],[18917,18917]]],[1573127987572,[null,[[-1,17367," "],[1,18910," "],[1,18912,"2"],[-1,18912," "],[-1,18916,"在"]],[18917,18917],[17367,17367]]],[1573127945941,["GJX@GJXAIOU",[[1,16435,"<constructor-arg> 元素会告知 Spring 要将一个"]],[16435,16435],[16470,16470]]],[1573128287650,[null,[[1,17402," "],[-1,18944," "],[-1,18947,"2"],[1,18948," "],[1,18951,"在"]],[17402,17402],[18952,18952]]],[1573128287650,[null,[[-1,17402," "],[1,18945," "],[1,18947,"2"],[-1,18947," "],[-1,18951,"在"]],[18952,18952],[17402,17402]]],[1573128275147,["GJX@GJXAIOU",[[1,16470," Id 为 cdp"]],[16470,16470],[16479,16479]]],[1573128280316,["GJX@GJXAIOU",[[-1,16476,"cdp"]],[16479,16479],[16476,16476]]],[1573128282706,["GJX@GJXAIOU",[[1,16476,"compact"]],[16476,16476],[16483,16483]]],[1573128283206,["GJX@GJXAIOU",[[-1,16482,"t"]],[16483,16483],[16482,16482]]],[1573128287449,["GJX@GJXAIOU",[[1,16482,"tDisc "]],[16482,16482],[16488,16488]]],[1573128309906,[null,[[1,17420," "],[-1,18962," "],[-1,18965,"2"],[1,18966," "],[1,18969,"在"]],[17420,17420],[18970,18970]]],[1573128309906,[null,[[-1,17420," "],[1,18963," "],[1,18965,"2"],[-1,18965," "],[-1,18969,"在"]],[18970,18970],[17420,17420]]],[1573128308788,["GJX@GJXAIOU",[[1,16488,"的 bean 引用传递到 CDPlayer 的构造器中。"]],[16488,16488],[16516,16516]]],[1573128369916,[null,[[1,17448," "],[-1,18990," "],[-1,18993,"2"],[1,18994," "],[1,18997,"在"]],[17448,17448],[18998,18998]]],[1573128369916,[null,[[-1,17448," "],[1,18991," "],[1,18993,"2"],[-1,18993," "],[-1,18997,"在"]],[18998,18998],[17448,17448]]],[1573128356742,["GJX@GJXAIOU",[[1,16640,"加上下面这个："]],[16640,16640],[16647,16647]]],[1573128359621,["GJX@GJXAIOU",[[-1,16704,"```\n"]],[16703,16707],[16703,16703]]],[1573128362381,["GJX@GJXAIOU",[[-1,16649,"```"]],[16649,16652],[16649,16649]]],[1573128364821,["GJX@GJXAIOU",[[-1,16649,"\n"]],[16650,16650],[16649,16649]]],[1573128365309,["GJX@GJXAIOU",[[-1,16648,"\n"]],[16649,16649],[16648,16648]]],[1573128365981,["GJX@GJXAIOU",[[-1,16647,"\n"]],[16648,16648],[16647,16647]]],[1573128367169,["GJX@GJXAIOU",[[1,16647,"·"]],[16647,16647],[16648,16648]]],[1573128368228,["GJX@GJXAIOU",[[-1,16647,"·"]],[16648,16648],[16647,16647]]],[1573128368683,["GJX@GJXAIOU",[[1,16647,"`"]],[16647,16647],[16648,16648]]],[1573128429916,[null,[[1,17446," "],[-1,18988," "],[-1,18991,"2"],[1,18992," "],[1,18995,"在"]],[17446,17446],[18996,18996]]],[1573128429916,[null,[[-1,17446," "],[1,18989," "],[1,18991,"2"],[-1,18991," "],[-1,18995,"在"]],[18996,18996],[17446,17446]]],[1573128371115,["GJX@GJXAIOU",[[1,16697,"`"]],[16697,16697],[16698,16698]]],[1573128406175,["GJX@GJXAIOU",[[-1,16700,"\n"]],[16700,16700],[16699,16699]]],[1573128407775,["GJX@GJXAIOU",[[1,16699,"ran"]],[16699,16699],[16702,16702]]],[1573128409343,["GJX@GJXAIOU",[[-1,16699,"ran"]],[16702,16702],[16699,16699]]],[1573128412897,["GJX@GJXAIOU",[[1,16699,"然后在 心目里"]],[16699,16699],[16706,16706]]],[1573128414005,["GJX@GJXAIOU",[[-1,16703,"心目里"]],[16706,16706],[16703,16703]]],[1573128419444,["GJX@GJXAIOU",[[1,16703,"xml 文件中配置："]],[16703,16703],[16713,16713]]],[1573128489918,[null,[[1,17460," "],[-1,19002," "],[-1,19005,"2"],[1,19006," "],[1,19009,"在"]],[17460,17460],[19010,19010]]],[1573128489918,[null,[[-1,17460," "],[1,19003," "],[1,19005,"2"],[-1,19005," "],[-1,19009,"在"]],[19010,19010],[17460,17460]]],[1573128462173,["GJX@GJXAIOU",[[1,16798,"、、"]],[16798,16798],[16800,16800]]],[1573128462942,["GJX@GJXAIOU",[[-1,16798,"、、"]],[16800,16800],[16798,16798]]],[1573128466459,["GJX@GJXAIOU",[[1,16798,"// 含义："]],[16798,16798],[16804,16804]]],[1573128467339,["GJX@GJXAIOU",[[-1,16803,"："]],[16804,16804],[16803,16803]]],[1573128483148,["GJX@GJXAIOU",[[1,16803,"： c-命名空间的前缀:转配的"]],[16803,16803],[16818,16818]]],[1573128484872,["GJX@GJXAIOU",[[-1,16815,"转配的"]],[16818,16818],[16815,16815]]],[1573128488886,["GJX@GJXAIOU",[[1,16815,"装配的构造器的"]],[16815,16815],[16822,16822]]],[1573128549928,[null,[[1,17484," "],[-1,19026," "],[-1,19029,"2"],[1,19030," "],[1,19033,"在"]],[17484,17484],[19034,19034]]],[1573128549928,[null,[[-1,17484," "],[1,19027," "],[1,19029,"2"],[-1,19029," "],[-1,19033,"在"]],[19034,19034],[17484,17484]]],[1573128523116,["GJX@GJXAIOU",[[1,16822,"参数名-zhuan"]],[16822,16822],[16831,16831]]],[1573128525266,["GJX@GJXAIOU",[[-1,16826,"zhuan"]],[16831,16831],[16826,16826]]],[1573128532819,["GJX@GJXAIOU",[[1,16826,"表示装配一个bean 引用"]],[16826,16826],[16839,16839]]],[1573128535651,["GJX@GJXAIOU",[[1,16832," "]],[16832,16832],[16833,16833]]],[1573128546514,["GJX@GJXAIOU",[[1,16840,"=\"\""]],[16840,16840],[16843,16843]]],[1573128548599,["GJX@GJXAIOU",[[1,16842,"要"]],[16842,16842],[16843,16843]]],[1573128609920,[null,[[1,17506," "],[-1,19048," "],[-1,19051,"2"],[1,19052," "],[1,19055,"在"]],[17506,17506],[19056,19056]]],[1573128609920,[null,[[-1,17506," "],[1,19049," "],[1,19051,"2"],[-1,19051," "],[-1,19055,"在"]],[19056,19056],[17506,17506]]],[1573128560090,["GJX@GJXAIOU",[[1,16843,"注入的 bean的"]],[16843,16843],[16852,16852]]],[1573128560862,["GJX@GJXAIOU",[[-1,16851,"的"]],[16852,16852],[16851,16851]]],[1573128563742,["GJX@GJXAIOU",[[1,16851," 的 ID"]],[16851,16851],[16856,16856]]],[1573128669925,[null,[[1,17519," "],[-1,19061," "],[-1,19064,"2"],[1,19065," "],[1,19068,"在"]],[17519,17519],[19069,19069]]],[1573128669925,[null,[[-1,17519," "],[1,19062," "],[1,19064,"2"],[-1,19064," "],[-1,19068,"在"]],[19069,19069],[17519,17519]]],[1573128659143,["GJX@GJXAIOU",[[-1,16863,"属性以c:开头，也就是命名空间的前缀。接下来是要装配的构造器参数名，在此之后是-ref，这是一个命名约定，告诉Spring正在装配的是一个bean应用。"]],[16863,16939],[16863,16863]]],[1573128659660,["GJX@GJXAIOU",[[-1,16864,"\n"]],[16863,16863],[16862,16862]]],[1573128660408,["GJX@GJXAIOU",[[-1,16863,"\n"]],[16862,16862],[16861,16861]]],[1573128664408,["GJX@GJXAIOU",[[-1,16888,"\n"]],[16888,16888],[16887,16887]]],[1573128668932,["GJX@GJXAIOU",[[1,16869,"（）"]],[16869,16869],[16871,16871]]],[1573128729926,[null,[[1,17442," "],[-1,18984," "],[-1,18987,"2"],[1,18988," "],[1,18991,"在"]],[17442,17442],[18992,18992]]],[1573128729926,[null,[[-1,17442," "],[1,18985," "],[1,18987,"2"],[-1,18987," "],[-1,18991,"在"]],[18992,18992],[17442,17442]]],[1573128682229,["GJX@GJXAIOU",[[1,16870,"针对构造器的参数名"]],[16870,16870],[16879,16879]]],[1573128693518,["GJX@GJXAIOU",[[-1,16989,"因为在XML中不允许数字作为属性的第一个字符，因此必须要添加一个下划线作为前缀。"]],[16989,17029],[16989,16989]]],[1573128695332,["GJX@GJXAIOU",[[1,16898,"因为在XML中不允许数字作为属性的第一个字符，因此必须要添加一个下划线作为前缀。"]],[16898,16898],[16938,16938]]],[1573128697719,["GJX@GJXAIOU",[[-1,17023,"\n"]],[17023,17023],[17022,17022]]],[1573128705347,["GJX@GJXAIOU",[[1,16897,"，这里使用 )"]],[16897,16897],[16904,16904]]],[1573128706277,["GJX@GJXAIOU",[[-1,16903,")"]],[16904,16904],[16903,16903]]],[1573128707638,["GJX@GJXAIOU",[[1,16903,"''"]],[16903,16903],[16905,16905]]],[1573128707679,["GJX@GJXAIOU",[[-1,16903,"''"],[1,16905,"‘"]],[16905,16905],[16904,16904]]],[1573128707952,["GJX@GJXAIOU",[[1,16903,"'"]],[16904,16904],[16905,16905]]],[1573128711119,["GJX@GJXAIOU",[[-1,16903,"'‘"]],[16905,16905],[16903,16903]]],[1573128712091,["GJX@GJXAIOU",[[1,16903,"‘’"]],[16903,16903],[16905,16905]]],[1573128713674,["GJX@GJXAIOU",[[1,16904,"0"]],[16904,16904],[16905,16905]]],[1573128716933,["GJX@GJXAIOU",[[-1,16903,"‘0’"]],[16906,16906],[16903,16903]]],[1573128717732,["GJX@GJXAIOU",[[1,16903,"··"]],[16903,16903],[16905,16905]]],[1573128719221,["GJX@GJXAIOU",[[-1,16903,"··"]],[16905,16905],[16903,16903]]],[1573128719875,["GJX@GJXAIOU",[[1,16903,"``"]],[16903,16903],[16905,16905]]],[1573128721131,["GJX@GJXAIOU",[[1,16904,"0"]],[16904,16904],[16905,16905]]],[1573128725859,["GJX@GJXAIOU",[[1,16906,"表示第一个参数"]],[16906,16906],[16913,16913]]],[1573128789928,[null,[[1,17466," "],[-1,19008," "],[-1,19011,"2"],[1,19012," "],[1,19015,"在"]],[17466,17466],[19016,19016]]],[1573128789928,[null,[[-1,17466," "],[1,19009," "],[1,19011,"2"],[-1,19011," "],[-1,19015,"在"]],[19016,19016],[17466,17466]]],[1573128766252,["GJX@GJXAIOU",[[-1,17045,"\n"]],[17045,17045],[17044,17044]]],[1573128766715,["GJX@GJXAIOU",[[-1,17044,"\n"]],[17044,17044],[17043,17043]]],[1573128769176,["GJX@GJXAIOU",[[-1,17061,"\n"]],[17061,17061],[17060,17060]]],[1573128773712,["GJX@GJXAIOU",[[1,17060,"``"]],[17060,17060],[17062,17062]]],[1573128779687,["GJX@GJXAIOU",[[1,17061,"c:_-ref=\"compactDisc\" "]],[17061,17061],[17083,17083]]],[1573128786101,["GJX@GJXAIOU",[[-1,17013,"c:_0-ref=\"compactDisc\""]],[17013,17035],[17013,17013]]],[1573128789382,["GJX@GJXAIOU",[[1,16954,"``"]],[16954,16954],[16956,16956]]],[1573128803515,[null,[[1,17467," "],[-1,19009," "],[-1,19012,"2"],[1,19013," "],[1,19016,"在"]],[17467,17467],[19017,19017]]],[1573128803516,[null,[[-1,17467," "],[1,19010," "],[1,19012,"2"],[-1,19012," "],[-1,19016,"在"]],[19017,19017],[17467,17467]]],[1573128790724,["GJX@GJXAIOU",[[1,16955,"c:_0-ref=\"compactDisc\""]],[16955,16955],[16977,16977]]],[1573128794095,["GJX@GJXAIOU",[[-1,16979,"```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n     />\n```"]],[16979,17044],[16979,16979]]],[1573128794838,["GJX@GJXAIOU",[[-1,16980,"\n"]],[16979,16979],[16978,16978]]],[1573128796987,["GJX@GJXAIOU",[[-1,17021,"```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\"\n    c:_-ref=\"compactDisc\" />\n\n```"]],[17021,17107],[17021,17021]]],[1573128863518,[null,[[1,17337," "],[-1,18879," "],[-1,18882,"2"],[1,18883," "],[1,18886,"在"]],[17337,17337],[18887,18887]]],[1573128863518,[null,[[-1,17337," "],[1,18880," "],[1,18882,"2"],[-1,18882," "],[-1,18886,"在"]],[18887,18887],[17337,17337]]],[1573128819570,["GJX@GJXAIOU",[[1,16307,"- \n"]],[16306,16306],[16309,16309]]],[1573128821071,["GJX@GJXAIOU",[[-1,16307,"- "]],[16309,16309],[16307,16307]]],[1573128822570,["GJX@GJXAIOU",[[1,16307,"(("]],[16307,16307],[16309,16309]]],[1573128823367,["GJX@GJXAIOU",[[-1,16307,"(("]],[16309,16309],[16307,16307]]],[1573128824876,["GJX@GJXAIOU",[[1,16307,"****"]],[16307,16307],[16309,16309]]],[1573128827650,["GJX@GJXAIOU",[[1,16309,"这里神队"]],[16309,16309],[16313,16313]]],[1573128828525,["GJX@GJXAIOU",[[-1,16311,"神队"]],[16313,16313],[16311,16311]]],[1573128833515,["GJX@GJXAIOU",[[1,16311,"针对的是将累成"]],[16311,16311],[16318,16318]]],[1573128834729,["GJX@GJXAIOU",[[-1,16315,"将累成"]],[16318,16318],[16315,16315]]],[1573128837106,["GJX@GJXAIOU",[[1,16315,"类型的装配"]],[16315,16315],[16320,16320]]],[1573128860763,["GJX@GJXAIOU",[[1,16322,"，即将对象的引用装配到"]],[16322,16322],[16333,16333]]],[1573128923520,[null,[[1,17364," "],[-1,18906," "],[-1,18909,"2"],[1,18910," "],[1,18913,"在"]],[17364,17364],[18914,18914]]],[1573128923520,[null,[[-1,17364," "],[1,18907," "],[1,18909,"2"],[-1,18909," "],[-1,18913,"在"]],[18914,18914],[17364,17364]]],[1573128870665,["GJX@GJXAIOU",[[1,16333,"依赖于他们的对象中；"]],[16333,16333],[16343,16343]]],[1573128983524,[null,[[1,17374," "],[-1,18916," "],[-1,18919,"2"],[1,18920," "],[1,18923,"在"]],[17374,17374],[18924,18924]]],[1573128983524,[null,[[-1,17374," "],[1,18917," "],[1,18919,"2"],[-1,18919," "],[-1,18923,"在"]],[18924,18924],[17374,17374]]],[1573128933126,["GJX@GJXAIOU",[[-1,17102,"    "]],[17102,17106],[17102,17102]]],[1573128933595,["GJX@GJXAIOU",[[-1,17101,"\n"]],[17102,17102],[17101,17101]]],[1573128934928,["GJX@GJXAIOU",[[1,17101," "]],[17101,17101],[17102,17102]]],[1573129103522,[null,[[1,17370," "],[-1,18912," "],[-1,18915,"2"],[1,18916," "],[1,18919,"在"]],[17370,17370],[18920,18920]]],[1573129103522,[null,[[-1,17370," "],[1,18913," "],[1,18915,"2"],[-1,18915," "],[-1,18919,"在"]],[18920,18920],[17370,17370]]],[1573129102192,["GJX@GJXAIOU",[[1,17075,"\n"]],[17074,17074],[17075,17075]]],[1573129102682,["GJX@GJXAIOU",[[1,17076,"\n"]],[17075,17075],[17076,17076]]],[1573129163525,[null,[[1,17372," "],[-1,18914," "],[-1,18917,"2"],[1,18918," "],[1,18921,"在"]],[17372,17372],[18922,18922]]],[1573129163525,[null,[[-1,17372," "],[1,18915," "],[1,18917,"2"],[-1,18917," "],[-1,18921,"在"]],[18922,18922],[17372,17372]]],[1573129119603,["GJX@GJXAIOU",[[1,17075,"这是"]],[17075,17075],[17077,17077]]],[1573129121829,["GJX@GJXAIOU",[[-1,17075,"这是"]],[17077,17077],[17075,17075]]],[1573129123956,["GJX@GJXAIOU",[[1,17075,"这里的实例"]],[17075,17075],[17080,17080]]],[1573129125940,["GJX@GJXAIOU",[[-1,17077,"的实例"]],[17080,17080],[17077,17077]]],[1573129161336,["GJX@GJXAIOU",[[1,17077,"示例是 CompactDisc 的新的实现类，里面的参数不是直接附字符串的，因此需要"]],[17077,17077],[17119,17119]]],[1573129223526,[null,[[1,17416," "],[-1,18958," "],[-1,18961,"2"],[1,18962," "],[1,18965,"在"]],[17416,17416],[18966,18966]]],[1573129223526,[null,[[-1,17416," "],[1,18959," "],[1,18961,"2"],[-1,18961," "],[-1,18965,"在"]],[18966,18966],[17416,17416]]],[1573129169629,["GJX@GJXAIOU",[[1,17119,"将值注入"]],[17119,17119],[17123,17123]]],[1573129170191,["GJX@GJXAIOU",[[1,17125,"\n"]],[17123,17123],[17124,17124]]],[1573129171558,["GJX@GJXAIOU",[[1,17126,"\n"]],[17124,17124],[17125,17125]]],[1573129173514,["GJX@GJXAIOU",[[1,17125,"```"]],[17125,17125],[17128,17128]]],[1573129175269,["GJX@GJXAIOU",[[1,17130,"\n"]],[17128,17128],[17129,17129]]],[1573129178418,["GJX@GJXAIOU",[[1,17129,"package c_xmlConfig;\n\nimport java.util.List;\n\npublic class BlankDisk implements CompactDisk {\n\n    private String title;\n    private String artist;\n    private List<String> tracks;\n\n    public BlankDisk(String title, String artist, List<String> tracks) {\n        this.title = title;\n        this.artist = artist;\n        this.tracks = tracks;\n    }\n\n    @Override\n    public void play() {\n        System.out.println(\"通过c_xmlConfig显示：\");\n        System.out.println(\"Playing \" + title + \" by \" + artist);\n        for (String track : tracks) {\n            System.out.println(\"-Track：\" + track);\n        }\n    }\n}\n"]],[17129,17129],[17739,17739]]],[1573129185489,["GJX@GJXAIOU",[[1,17128,"Blac"]],[17128,17128],[17132,17132]]],[1573129186375,["GJX@GJXAIOU",[[-1,17131,"c"]],[17132,17132],[17131,17131]]],[1573129191052,["GJX@GJXAIOU",[[1,17131,"nkDisk_java"]],[17131,17131],[17142,17142]]],[1573129199765,["GJX@GJXAIOU",[[1,17754,"```"]],[17754,17754],[17757,17757]]],[1573129202240,["GJX@GJXAIOU",[[1,17758,"\n"]],[17757,17757],[17758,17758]]],[1573129283634,[null,[[1,18054," "],[-1,19596," "],[-1,19599,"2"],[1,19600," "],[1,19603,"在"]],[18054,18054],[19604,19604]]],[1573129283634,[null,[[-1,18054," "],[1,19597," "],[1,19599,"2"],[-1,19599," "],[-1,19603,"在"]],[19604,19604],[18054,18054]]],[1573129280654,["GJX@GJXAIOU",[[1,17759,"\n"]],[17758,17758],[17759,17759]]],[1573129281683,["GJX@GJXAIOU",[[1,17759,"sehgn"]],[17759,17759],[17764,17764]]],[1573129283178,["GJX@GJXAIOU",[[-1,17760,"ehgn"]],[17764,17764],[17760,17760]]],[1573129343589,[null,[[1,18056," "],[-1,19598," "],[-1,19601,"2"],[1,19602," "],[1,19605,"在"]],[18056,18056],[19606,19606]]],[1573129343589,[null,[[-1,18056," "],[1,19599," "],[1,19601,"2"],[-1,19601," "],[-1,19605,"在"]],[19606,19606],[18056,18056]]],[1573129285500,["GJX@GJXAIOU",[[1,17759,"首先奥豪斯hi"]],[17759,17759],[17766,17766]]],[1573129287469,["GJX@GJXAIOU",[[-1,17761,"奥豪斯hi"]],[17766,17766],[17761,17761]]],[1573129293739,["GJX@GJXAIOU",[[1,17761,"还是声明 Bean："]],[17761,17761],[17771,17771]]],[1573129326956,["GJX@GJXAIOU",[[-1,17862," "]],[17863,17863],[17862,17862]]],[1573129331166,["GJX@GJXAIOU",[[1,17830,"\n"]],[17829,17829],[17830,17830]]],[1573129333292,["GJX@GJXAIOU",[[1,17830,"<"]],[17830,17830],[17831,17831]]],[1573129337072,["GJX@GJXAIOU",[[1,17830,"    "]],[17830,17830],[17834,17834]]],[1573129341615,["GJX@GJXAIOU",[[1,17835,"!---->"]],[17835,17835],[17841,17841]]],[1573129403588,[null,[[-1,17771,"s"],[1,17830,"\n"],[-1,17841,"\n"],[-1,17874," "],[1,17875,"."],[1,18079," "],[-1,19621," "],[-1,19624,"2"],[1,19625," "],[1,19628,"在"]],[17771,17771],[19629,19629]]],[1573129403588,[null,[[1,17771,"s"],[-1,17829,"\n"],[1,17841,"\n"],[1,17873," "],[-1,17873,"."],[-1,18078," "],[1,19621," "],[1,19623,"2"],[-1,19623," "],[-1,19627,"在"]],[19629,19629],[17771,17771]]],[1573129380836,["GJX@GJXAIOU",[[1,17840,"lue 属性表示给定的 value值"]],[17840,17840],[17858,17858]]],[1573129382383,["GJX@GJXAIOU",[[1,17857," "]],[17857,17857],[17858,17858]]],[1573129394163,["GJX@GJXAIOU",[[1,17859,"将以字面量的形式注入到构造器中"]],[17859,17859],[17874,17874]]],[1573129463588,[null,[[-1,17771,"s"],[1,17830,"\n"],[-1,17838,"--"],[1,17840,"va"],[1,17874,"--"],[-1,17875,"\n"],[-1,17908," "],[1,17909,"."],[1,18113," "],[-1,19655," "],[-1,19658,"2"],[1,19659," "],[1,19662,"在"]],[17771,17771],[19663,19663]]],[1573129463588,[null,[[1,17771,"s"],[-1,17829,"\n"],[1,17838,"--"],[-1,17838,"va"],[-1,17874,"--"],[1,17877,"\n"],[1,17909," "],[-1,17909,"."],[-1,18114," "],[1,19657," "],[1,19659,"2"],[-1,19659," "],[-1,19663,"在"]],[19663,19663],[17771,17771]]],[1573129422094,["GJX@GJXAIOU",[[-1,17759,"首先还是声明 Bean"]],[17759,17770],[17759,17759]]],[1573129424549,["GJX@GJXAIOU",[[1,17759,"使用 "]],[17759,17759],[17762,17762]]],[1573129428330,["GJX@GJXAIOU",[[-1,17761," "]],[17762,17762],[17761,17761]]],[1573129431659,["GJX@GJXAIOU",[[1,17761,"构造器进行注入"]],[17761,17761],[17768,17768]]],[1573129438691,["GJX@GJXAIOU",[[-1,18072,"使用c-命名空间装配字面量与装配引用的区别在于属性名中去掉了-ref后缀。"]],[18072,18109],[18072,18072]]],[1573129440148,["GJX@GJXAIOU",[[1,17975,"使用c-命名空间装配字面量与装配引用的区别在于属性名中去掉了-ref后缀。"]],[17975,17975],[18012,18012]]],[1573129443003,["GJX@GJXAIOU",[[-1,17933,"依然使用<constructor-arg>元素进行注入，但是使用了value属性。\n"]],[17932,17974],[17932,17932]]],[1573129449099,["GJX@GJXAIOU",[[-1,17998,"    "]],[18002,18002],[17998,17998]]],[1573129449639,["GJX@GJXAIOU",[[-1,17997,"\n"]],[17998,17998],[17997,17997]]],[1573129450299,["GJX@GJXAIOU",[[1,17997," "]],[17997,17997],[17998,17998]]],[1573129453628,["GJX@GJXAIOU",[[-1,18057,"\n"]],[18057,18057],[18056,18056]]],[1573129456722,["GJX@GJXAIOU",[[-1,17927,"\n"]],[17927,17927],[17926,17926]]],[1573129523590,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17926,"\n"],[1,17927,"`"],[-1,17931,"依"],[1,17969,"\n"],[-1,17995,"\n"],[1,17997,"c"],[-1,18055,"\n"],[1,18056,"`"],[1,18058,"\n"],[-1,18060,"使"],[1,18063," "],[-1,19605," "],[-1,19608,"2"],[1,19609," "],[1,19612,"在"]],[17769,17769],[19613,19613]]],[1573129523590,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17927,"\n"],[-1,17927,"`"],[1,17932,"依"],[-1,17969,"\n"],[1,17996,"\n"],[-1,17997,"c"],[1,18056,"\n"],[-1,18056,"`"],[-1,18059,"\n"],[1,18062,"使"],[-1,18064," "],[1,19607," "],[1,19609,"2"],[-1,19609," "],[-1,19613,"在"]],[19613,19613],[17769,17769]]],[1573129495896,["GJX@GJXAIOU",[[1,17919,"    \n"]],[17918,17918],[17923,17923]]],[1573129496387,["GJX@GJXAIOU",[[1,17923,"<constructor-arg value=\"sgt.Pepper\" />"]],[17923,17923],[17961,17961]]],[1573129504133,["GJX@GJXAIOU",[[-1,17951,"Pepper"]],[17956,17956],[17951,17951]]],[1573129506698,["GJX@GJXAIOU",[[1,17951,"bags"]],[17951,17951],[17955,17955]]],[1573129508767,["GJX@GJXAIOU",[[-1,17950,"."]],[17951,17951],[17950,17950]]],[1573129583647,[null,[[-1,17769,"s"],[1,17770,""],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[1,18009,"\n"],[-1,18035,"\n"],[1,18037,"c"],[-1,18095,"\n"],[1,18096,"`"],[1,18098,"\n"],[-1,18100,"使"],[1,18103," "],[-1,19645," "],[-1,19648,"2"],[1,19649," "],[1,19652,"在"]],[17769,17769],[19653,19653]]],[1573129583647,[null,[[1,17769,"s"],[-1,17769,""],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[-1,18009,"\n"],[1,18036,"\n"],[-1,18037,"c"],[1,18096,"\n"],[-1,18096,"`"],[-1,18099,"\n"],[1,18102,"使"],[-1,18104," "],[1,19647," "],[1,19649,"2"],[-1,19649," "],[-1,19653,"在"]],[19653,19653],[17769,17769]]],[1573129532982,["GJX@GJXAIOU",[[1,18093,"\n    c:_title=\"sgt. Pepper\""]],[18093,18093],[18120,18120]]],[1573129542008,["GJX@GJXAIOU",[[-1,18101,"title"]],[18106,18106],[18101,18101]]],[1573129544824,["GJX@GJXAIOU",[[1,18101,"artist"]],[18101,18101],[18107,18107]]],[1573129551431,["GJX@GJXAIOU",[[-1,18112,". Pepper"]],[18120,18120],[18112,18112]]],[1573129553666,["GJX@GJXAIOU",[[1,18112,"bags"]],[18112,18112],[18116,18116]]],[1573129580605,["GJX@GJXAIOU",[[1,18010,"\n"]],[18009,18009],[18010,18010]]],[1573129581874,["GJX@GJXAIOU",[[1,18010,"fang"]],[18010,18010],[18014,18014]]],[1573129583475,["GJX@GJXAIOU",[[-1,18010,"fang"]],[18014,18014],[18010,18010]]],[1573129643650,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17965,"\n"],[1,17969,"`"],[-1,17971,"依"],[1,18009,"\n\n"],[-1,18010,"\n"],[-1,18036,"\n"],[1,18038,"c"],[-1,18093,"/"],[1,18118,"/"],[-1,18120,"\n"],[1,18121,"`"],[-1,18125,"使"],[1,18126,"\n"],[1,18128," "],[-1,19670," "],[-1,19673,"2"],[1,19674," "],[1,19677,"在"]],[17769,17769],[19678,19678]]],[1573129643650,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17966,"\n"],[-1,17969,"`"],[1,17972,"依"],[-1,18009,"\n\n"],[1,18012,"\n"],[1,18037,"\n"],[-1,18038,"c"],[1,18094,"/"],[-1,18118,"/"],[1,18121,"\n"],[-1,18121,"`"],[1,18126,"使"],[-1,18126,"\n"],[-1,18129," "],[1,19672," "],[1,19674,"2"],[-1,19674," "],[-1,19678,"在"]],[19678,19678],[17769,17769]]],[1573129596067,["GJX@GJXAIOU",[[1,18010,"方案一：引用构造器参数名称"]],[18010,18010],[18023,18023]]],[1573129599217,["GJX@GJXAIOU",[[-1,18021,"名称"]],[18023,18023],[18021,18021]]],[1573129601256,["GJX@GJXAIOU",[[1,18021,"名字"]],[18021,18021],[18023,18023]]],[1573129621830,["GJX@GJXAIOU",[[1,18024,"\n"]],[18023,18023],[18024,18024]]],[1573129639455,["GJX@GJXAIOU",[[1,18024,"方案二：将参数名换成数字 0/1....."]],[18024,18024],[18045,18045]]],[1573129703650,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17965,"\n"],[1,17969,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18048,"`"],[-1,18071,"\n"],[1,18073,"c"],[-1,18128,"/"],[1,18153,"/"],[-1,18155,"\n"],[1,18156,"`"],[-1,18160,"使"],[1,18161,"\n"],[1,18163," "],[-1,19705," "],[-1,19708,"2"],[1,19709," "],[1,19712,"在"]],[17769,17769],[19713,19713]]],[1573129703650,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17966,"\n"],[-1,17969,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18048,"`"],[1,18072,"\n"],[-1,18073,"c"],[1,18129,"/"],[-1,18153,"/"],[1,18156,"\n"],[-1,18156,"`"],[1,18161,"使"],[-1,18161,"\n"],[-1,18164," "],[1,19707," "],[1,19709,"2"],[-1,19709," "],[-1,19713,"在"]],[19713,19713],[17769,17769]]],[1573129645015,["GJX@GJXAIOU",[[1,18045,"()"]],[18045,18045],[18047,18047]]],[1573129647636,["GJX@GJXAIOU",[[1,18046,"liyo"]],[18046,18046],[18050,18050]]],[1573129651297,["GJX@GJXAIOU",[[-1,18046,"liyo"]],[18050,18050],[18046,18046]]],[1573129653277,["GJX@GJXAIOU",[[1,18046,"利用位置"]],[18046,18046],[18050,18050]]],[1573129672750,["GJX@GJXAIOU",[[1,18177,"**"],[1,18218,"**"]],[18177,18218],[18177,18222]]],[1573129686924,["GJX@GJXAIOU",[[-1,18168,"\n"]],[18167,18167],[18166,18166]]],[1573129687924,["GJX@GJXAIOU",[[-1,18167,"\n"]],[18167,18167],[18166,18166]]],[1573129763651,[null,[[-1,17769,"s"],[1,17770,""],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18052,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[1,18173,"**"],[-1,18175,"**"],[1,18216,"**"],[-1,18218,"**"],[-1,19713," "],[-1,19716,"2"],[1,19717," "],[1,19720,"在"]],[17769,17769],[19721,19721]]],[1573129763651,[null,[[1,17769,"s"],[-1,17769,""],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18052,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[-1,18175,"**"],[1,18179,"**"],[-1,18218,"**"],[1,18222,"**"],[1,19715," "],[1,19717,"2"],[-1,19717," "],[-1,19721,"在"]],[19721,19721],[17769,17769]]],[1573129731476,["GJX@GJXAIOU",[[1,18247,"，方式是：``"]],[18247,18247],[18254,18254]]],[1573129734228,["GJX@GJXAIOU",[[1,18253,"<comfi"]],[18253,18253],[18259,18259]]],[1573129735555,["GJX@GJXAIOU",[[-1,18256,"mfi"]],[18259,18259],[18256,18256]]],[1573129737147,["GJX@GJXAIOU",[[1,18256,"sta"]],[18256,18256],[18259,18259]]],[1573129738295,["GJX@GJXAIOU",[[-1,18255,"osta"]],[18259,18259],[18255,18255]]],[1573129738908,["GJX@GJXAIOU",[[1,18255,"n"]],[18255,18255],[18256,18256]]],[1573129739338,["GJX@GJXAIOU",[[-1,18255,"n"]],[18256,18256],[18255,18255]]],[1573129740486,["GJX@GJXAIOU",[[1,18255,"onsta"]],[18255,18255],[18260,18260]]],[1573129742275,["GJX@GJXAIOU",[[-1,18259,"a"]],[18260,18260],[18259,18259]]],[1573129752929,["GJX@GJXAIOU",[[1,18259,"ructor-arg><nu.l"]],[18259,18259],[18275,18275]]],[1573129753792,["GJX@GJXAIOU",[[-1,18273,".l"]],[18275,18275],[18273,18273]]],[1573129758708,["GJX@GJXAIOU",[[1,18273,"ll/></conm"]],[18273,18273],[18283,18283]]],[1573129759955,["GJX@GJXAIOU",[[-1,18282,"m"]],[18283,18283],[18282,18282]]],[1573129762924,["GJX@GJXAIOU",[[1,18282,"stru"]],[18282,18282],[18286,18286]]],[1573129823652,[null,[[-1,17769,"s"],[1,17770,""],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17873,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[1,18173,"**"],[-1,18175,"**"],[1,18216,"**"],[-1,18218,"**"],[-1,18245,"。\n"],[1,18287,"。\n"],[-1,19753," "],[-1,19756,"2"],[1,19757," "],[1,19760,"在"]],[17769,17769],[19761,19761]]],[1573129823652,[null,[[1,17769,"s"],[-1,17769,""],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17875,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[-1,18175,"**"],[1,18179,"**"],[-1,18218,"**"],[1,18222,"**"],[1,18247,"。\n"],[-1,18287,"。\n"],[1,19755," "],[1,19757,"2"],[-1,19757," "],[-1,19761,"在"]],[19761,19761],[17769,17769]]],[1573129770172,["GJX@GJXAIOU",[[1,18286,"ctor-a"]],[18286,18286],[18292,18292]]],[1573129770619,["GJX@GJXAIOU",[[-1,18291,"a"]],[18292,18292],[18291,18291]]],[1573129771743,["GJX@GJXAIOU",[[1,18291,"org>"]],[18291,18291],[18295,18295]]],[1573129782754,["GJX@GJXAIOU",[[-1,18319,"\n"]],[18319,18319],[18318,18318]]],[1573129789900,["GJX@GJXAIOU",[[-1,18367,"....."]],[18367,18372],[18367,18367]]],[1573129792177,["GJX@GJXAIOU",[[1,18367,"\"\""]],[18367,18367],[18369,18369]]],[1573129794739,["GJX@GJXAIOU",[[1,18368,"CCCC"]],[18368,18368],[18372,18372]]],[1573129798555,["GJX@GJXAIOU",[[-1,18397,"......"]],[18403,18403],[18397,18397]]],[1573129801066,["GJX@GJXAIOU",[[1,18397,"\"“"]],[18397,18397],[18399,18399]]],[1573129802242,["GJX@GJXAIOU",[[-1,18398,"“"]],[18399,18399],[18398,18398]]],[1573129802743,["GJX@GJXAIOU",[[1,18398,"\""]],[18398,18398],[18399,18399]]],[1573129805348,["GJX@GJXAIOU",[[1,18398,"张三"]],[18398,18398],[18400,18400]]],[1573129808837,["GJX@GJXAIOU",[[1,18414,"    \n    "]],[18409,18409],[18418,18418]]],[1573129810705,["GJX@GJXAIOU",[[1,18418,"...."]],[18418,18418],[18422,18422]]],[1573129883877,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17874,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[-1,18173,"<c"],[1,18177,"<c"],[-1,18216,"。\n"],[1,18220,"。\n"],[-1,18245,"。\n"],[1,18296,"。\n"],[-1,18317,"\n"],[1,18318,"`"],[-1,18365,".."],[1,18373,"</"],[-1,18395,".."],[1,18401,"</"],[-1,18412,"</"],[1,18427,"</"],[-1,19773," "],[-1,19776,"2"],[1,19777," "],[1,19780,"在"]],[17769,17769],[19781,19781]]],[1573129883877,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17876,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[1,18175,"<c"],[-1,18177,"<c"],[1,18218,"。\n"],[-1,18220,"。\n"],[1,18247,"。\n"],[-1,18296,"。\n"],[1,18319,"\n"],[-1,18319,"`"],[1,18367,".."],[-1,18373,"</"],[1,18397,".."],[-1,18401,"</"],[1,18414,"</"],[-1,18427,"</"],[1,19775," "],[1,19777,"2"],[-1,19777," "],[-1,19781,"在"]],[19781,19781],[17769,17769]]],[1573129847799,["GJX@GJXAIOU",[[-1,18454,"\n"]],[18454,18454],[18453,18453]]],[1573129855723,["GJX@GJXAIOU",[[1,18563,"**"],[1,18576,"**"]],[18563,18576],[18563,18580]]],[1573129882937,["GJX@GJXAIOU",[[1,18581,"lir"]],[18581,18581],[18584,18584]]],[1573129883667,["GJX@GJXAIOU",[[-1,18582,"ir"]],[18584,18584],[18582,18582]]],[1573129943876,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17874,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[-1,18173,"<c"],[1,18177,"<c"],[-1,18216,"。\n"],[1,18220,"。\n"],[-1,18245,"。\n"],[1,18296,"。\n"],[-1,18317,"\n"],[1,18318,"`"],[-1,18365,".."],[1,18373,"</"],[-1,18395,".."],[1,18401,"</"],[-1,18412,"</"],[1,18427,"</"],[-1,18452,"\n"],[1,18453,"`"],[1,18561,"**"],[-1,18563,"**"],[-1,18576,"。\n"],[-1,18580,"\nl"],[1,18582,"。l\n\n"],[-1,19777," "],[-1,19780,"2"],[1,19781," "],[1,19784,"在"]],[17769,17769],[19785,19785]]],[1573129943876,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17876,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[1,18175,"<c"],[-1,18177,"<c"],[1,18218,"。\n"],[-1,18220,"。\n"],[1,18247,"。\n"],[-1,18296,"。\n"],[1,18319,"\n"],[-1,18319,"`"],[1,18367,".."],[-1,18373,"</"],[1,18397,".."],[-1,18401,"</"],[1,18414,"</"],[-1,18427,"</"],[1,18454,"\n"],[-1,18454,"`"],[-1,18563,"**"],[1,18567,"**"],[1,18578,"。\n"],[1,18580,"\nl"],[-1,18580,"。l\n\n"],[1,19779," "],[1,19781,"2"],[-1,19781," "],[-1,19785,"在"]],[19785,19785],[17769,17769]]],[1573129884276,["GJX@GJXAIOU",[[-1,18581,"l"]],[18582,18582],[18581,18581]]],[1573129894391,["GJX@GJXAIOU",[[1,18581,"例如 参数是``"]],[18581,18581],[18589,18589]]],[1573129899384,["GJX@GJXAIOU",[[1,18588,"List<X"]],[18588,18588],[18594,18594]]],[1573129899852,["GJX@GJXAIOU",[[-1,18593,"X"]],[18594,18594],[18593,18593]]],[1573129904708,["GJX@GJXAIOU",[[1,18593,"CompactDisxc"]],[18593,18593],[18605,18605]]],[1573129906241,["GJX@GJXAIOU",[[-1,18603,"xc"]],[18605,18605],[18603,18603]]],[1573129910341,["GJX@GJXAIOU",[[1,18603,"c> cd"]],[18603,18603],[18608,18608]]],[1573129919254,["GJX@GJXAIOU",[[1,18609,",ze"]],[18609,18609],[18612,18612]]],[1573129920548,["GJX@GJXAIOU",[[-1,18609,",ze"]],[18612,18612],[18609,18609]]],[1573129923100,["GJX@GJXAIOU",[[1,18609,"，则应用"]],[18609,18609],[18613,18613]]],[1573129923893,["GJX@GJXAIOU",[[-1,18611,"应用"]],[18613,18613],[18611,18611]]],[1573129927306,["GJX@GJXAIOU",[[1,18611,"引用是"]],[18611,18611],[18614,18614]]],[1573129928052,["GJX@GJXAIOU",[[1,18616,"\n"]],[18614,18614],[18615,18615]]],[1573129933393,["GJX@GJXAIOU",[[1,18615,"```jaa"]],[18615,18615],[18621,18621]]],[1573129934151,["GJX@GJXAIOU",[[-1,18618,"jaa"]],[18621,18621],[18618,18618]]],[1573129935235,["GJX@GJXAIOU",[[1,18618,"xml"]],[18618,18618],[18621,18621]]],[1573129935687,["GJX@GJXAIOU",[[1,18623,"\n"]],[18621,18621],[18622,18622]]],[1573129935808,["GJX@GJXAIOU",[[1,18624,"\n"]],[18622,18622],[18623,18623]]],[1573129937369,["GJX@GJXAIOU",[[1,18623,"````"]],[18623,18623],[18627,18627]]],[1573129941035,["GJX@GJXAIOU",[[-1,18626,"`"]],[18627,18627],[18626,18626]]],[1573129943257,["GJX@GJXAIOU",[[1,18622,"<"]],[18622,18622],[18623,18623]]],[1573130003878,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17874,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[-1,18173,"<c"],[1,18177,"<c"],[-1,18216,"。\n"],[1,18220,"。\n"],[-1,18245,"。\n"],[1,18296,"。\n"],[-1,18317,"\n"],[1,18318,"`"],[-1,18365,".."],[1,18373,"</"],[-1,18395,".."],[1,18401,"</"],[-1,18412,"</"],[1,18427,"</"],[-1,18452,"\n"],[1,18453,"`"],[1,18561,"**"],[-1,18563,"**"],[-1,18576,"。\n"],[-1,18580,"\n"],[1,18581,"。"],[-1,18614,"可"],[1,18615,"\n"],[-1,18621,"以"],[1,18622,"\n"],[1,18629,"可以"],[-1,19822," "],[-1,19825,"2"],[1,19826," "],[1,19829,"在"]],[17769,17769],[19830,19830]]],[1573130003878,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17876,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[1,18175,"<c"],[-1,18177,"<c"],[1,18218,"。\n"],[-1,18220,"。\n"],[1,18247,"。\n"],[-1,18296,"。\n"],[1,18319,"\n"],[-1,18319,"`"],[1,18367,".."],[-1,18373,"</"],[1,18397,".."],[-1,18401,"</"],[1,18414,"</"],[-1,18427,"</"],[1,18454,"\n"],[-1,18454,"`"],[-1,18563,"**"],[1,18567,"**"],[1,18578,"。\n"],[1,18580,"\n"],[-1,18580,"。"],[1,18614,"可"],[-1,18614,"\n"],[1,18621,"以"],[-1,18621,"\n"],[-1,18629,"可以"],[1,19824," "],[1,19826,"2"],[-1,19826," "],[-1,19830,"在"]],[19830,19830],[17769,17769]]],[1573129945489,["GJX@GJXAIOU",[[1,18622,"!----"]],[18622,18622],[18627,18627]]],[1573129946722,["GJX@GJXAIOU",[[-1,18622,"!----"]],[18627,18627],[18622,18622]]],[1573129946836,["GJX@GJXAIOU",[[-1,18621,"\n"]],[18622,18622],[18621,18621]]],[1573129947058,["GJX@GJXAIOU",[[-1,18619,"ml"]],[18621,18621],[18619,18619]]],[1573129949759,["GJX@GJXAIOU",[[1,18619,"xm"]],[18619,18619],[18621,18621]]],[1573129950786,["GJX@GJXAIOU",[[-1,18618,"xxm"]],[18621,18621],[18618,18618]]],[1573129951589,["GJX@GJXAIOU",[[1,18618,"ml"]],[18618,18618],[18620,18620]]],[1573129952404,["GJX@GJXAIOU",[[-1,18618,"ml"]],[18620,18620],[18618,18618]]],[1573129953367,["GJX@GJXAIOU",[[1,18618,"xml"]],[18618,18618],[18621,18621]]],[1573129955298,["GJX@GJXAIOU",[[-1,18621,"<"]],[18622,18622],[18621,18621]]],[1573129955657,["GJX@GJXAIOU",[[1,18622,"\n"]],[18621,18621],[18622,18622]]],[1573129959371,["GJX@GJXAIOU",[[1,18622,"<cons"]],[18622,18622],[18627,18627]]],[1573129961299,["GJX@GJXAIOU",[[-1,18623,"cons"]],[18627,18627],[18623,18623]]],[1573129964527,["GJX@GJXAIOU",[[1,18623,"!----->"]],[18623,18623],[18630,18630]]],[1573129966221,["GJX@GJXAIOU",[[-1,18628,"-"]],[18628,18628],[18627,18627]]],[1573129972048,["GJX@GJXAIOU",[[1,18626," qian"]],[18626,18626],[18631,18631]]],[1573129973692,["GJX@GJXAIOU",[[-1,18626," qian"]],[18631,18631],[18626,18626]]],[1573129977685,["GJX@GJXAIOU",[[1,18626,"前面配置省略"]],[18626,18626],[18632,18632]]],[1573129979364,["GJX@GJXAIOU",[[1,18636,"\n"]],[18635,18635],[18636,18636]]],[1573129982453,["GJX@GJXAIOU",[[1,18636,"<cong"]],[18636,18636],[18641,18641]]],[1573129983490,["GJX@GJXAIOU",[[-1,18640,"g"]],[18641,18641],[18640,18640]]],[1573129983900,["GJX@GJXAIOU",[[1,18640,"f"]],[18640,18640],[18641,18641]]],[1573129984246,["GJX@GJXAIOU",[[-1,18640,"f"]],[18641,18641],[18640,18640]]],[1573129989334,["GJX@GJXAIOU",[[1,18640,"strucor"]],[18640,18640],[18647,18647]]],[1573129991082,["GJX@GJXAIOU",[[-1,18645,"or"]],[18647,18647],[18645,18645]]],[1573129997512,["GJX@GJXAIOU",[[1,18645,"tor-arg>"]],[18645,18645],[18653,18653]]],[1573129998031,["GJX@GJXAIOU",[[1,18654,"\n"]],[18653,18653],[18654,18654]]],[1573130003289,["GJX@GJXAIOU",[[1,18654,"</constru"]],[18654,18654],[18663,18663]]],[1573130064111,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17874,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[-1,18173,"<c"],[1,18177,"<c"],[-1,18216,"。\n"],[1,18220,"。\n"],[-1,18245,"。\n"],[1,18296,"。\n"],[-1,18317,"\n"],[1,18318,"`"],[-1,18365,".."],[1,18373,"</"],[-1,18395,".."],[1,18401,"</"],[-1,18412,"</"],[1,18427,"</"],[-1,18452,"\n"],[1,18453,"`"],[1,18561,"**"],[-1,18563,"**"],[-1,18576,"。\n"],[-1,18580,"\n"],[1,18581,"。"],[-1,18614,"可"],[1,18615,"\n"],[1,18669,"可以"],[-1,19862," "],[-1,19865,"2"],[1,19866," "],[1,19869,"在"]],[17769,17769],[19870,19870]]],[1573130064111,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17876,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[1,18175,"<c"],[-1,18177,"<c"],[1,18218,"。\n"],[-1,18220,"。\n"],[1,18247,"。\n"],[-1,18296,"。\n"],[1,18319,"\n"],[-1,18319,"`"],[1,18367,".."],[-1,18373,"</"],[1,18397,".."],[-1,18401,"</"],[1,18414,"</"],[-1,18427,"</"],[1,18454,"\n"],[-1,18454,"`"],[-1,18563,"**"],[1,18567,"**"],[1,18578,"。\n"],[1,18580,"\n"],[-1,18580,"。"],[1,18614,"可"],[-1,18614,"\n"],[-1,18669,"可以"],[1,19864," "],[1,19866,"2"],[-1,19866," "],[-1,19870,"在"]],[19870,19870],[17769,17769]]],[1573130010447,["GJX@GJXAIOU",[[1,18663,"ctor-arg>"]],[18663,18663],[18672,18672]]],[1573130011771,["GJX@GJXAIOU",[[1,18654,"\n"]],[18653,18653],[18654,18654]]],[1573130013846,["GJX@GJXAIOU",[[1,18654,"<  "]],[18654,18654],[18657,18657]]],[1573130014796,["GJX@GJXAIOU",[[-1,18654,"<  "]],[18657,18657],[18654,18654]]],[1573130019543,["GJX@GJXAIOU",[[1,18654,"    <List"]],[18654,18654],[18663,18663]]],[1573130020716,["GJX@GJXAIOU",[[-1,18659,"List"]],[18663,18663],[18659,18659]]],[1573130022454,["GJX@GJXAIOU",[[1,18659,"llist<"]],[18659,18659],[18665,18665]]],[1573130023982,["GJX@GJXAIOU",[[-1,18660,"list<"]],[18665,18665],[18660,18660]]],[1573130026344,["GJX@GJXAIOU",[[1,18660,"ist>"]],[18660,18660],[18664,18664]]],[1573130027580,["GJX@GJXAIOU",[[1,18665,"    \n"]],[18664,18664],[18669,18669]]],[1573130028058,["GJX@GJXAIOU",[[-1,18665,"    "],[1,18669,"\n"]],[18669,18669],[18666,18666]]],[1573130033119,["GJX@GJXAIOU",[[1,18666,"    </list>"]],[18666,18666],[18677,18677]]],[1573130056082,["GJX@GJXAIOU",[[1,18665,"      <ref-bean=\"sgtPeppersDisk\">"]],[18665,18665],[18698,18698]]],[1573130058131,["GJX@GJXAIOU",[[1,18697,"/"]],[18697,18697],[18698,18698]]],[1573130061293,["GJX@GJXAIOU",[[1,18704,"  \n    "]],[18699,18699],[18706,18706]]],[1573130063935,["GJX@GJXAIOU",[[1,18706,"<ref"]],[18706,18706],[18710,18710]]],[1573130085958,[null,[[-1,17769,"s"],[1,17828,"\n"],[-1,17836,"--"],[1,17838,"va"],[1,17872,"--"],[-1,17874,"\n"],[-1,17906," "],[1,17907,"."],[-1,17918,"<"],[1,17959,"<"],[-1,17966,"\n"],[1,17967,"`"],[-1,17971,"依"],[-1,18009,"`"],[1,18010,"\n"],[1,18054,"`"],[-1,18077,"\n"],[1,18079,"c"],[-1,18134,"/"],[1,18159,"/"],[-1,18161,"\n"],[1,18162,"`"],[-1,18166,"使"],[1,18167,"- "],[-1,18173,"<c"],[1,18177,"<c"],[-1,18216,"。\n"],[1,18220,"。\n"],[-1,18245,"。\n"],[1,18296,"。\n"],[-1,18317,"\n"],[1,18318,"`"],[-1,18365,".."],[1,18373,"</"],[-1,18395,".."],[1,18401,"</"],[-1,18412,"</"],[1,18427,"</"],[-1,18452,"\n"],[1,18453,"`"],[1,18561,"**"],[-1,18563,"**"],[-1,18576,"。\n"],[-1,18580,"\n"],[1,18581,"。"],[-1,18614,"可"],[1,18615,"\n"],[1,18747,"可以"],[-1,19940," "],[-1,19943,"2"],[1,19944," "],[1,19947,"在"]],[17769,17769],[19948,19948]]],[1573130085958,[null,[[1,17769,"s"],[-1,17827,"\n"],[1,17836,"--"],[-1,17836,"va"],[-1,17872,"--"],[1,17876,"\n"],[1,17907," "],[-1,17907,"."],[1,17919,"<"],[-1,17959,"<"],[1,17967,"\n"],[-1,17967,"`"],[1,17972,"依"],[1,18009,"`"],[-1,18009,"\n"],[-1,18054,"`"],[1,18078,"\n"],[-1,18079,"c"],[1,18135,"/"],[-1,18159,"/"],[1,18162,"\n"],[-1,18162,"`"],[1,18167,"使"],[-1,18167,"- "],[1,18175,"<c"],[-1,18177,"<c"],[1,18218,"。\n"],[-1,18220,"。\n"],[1,18247,"。\n"],[-1,18296,"。\n"],[1,18319,"\n"],[-1,18319,"`"],[1,18367,".."],[-1,18373,"</"],[1,18397,".."],[-1,18401,"</"],[1,18414,"</"],[-1,18427,"</"],[1,18454,"\n"],[-1,18454,"`"],[-1,18563,"**"],[1,18567,"**"],[1,18578,"。\n"],[1,18580,"\n"],[-1,18580,"。"],[1,18614,"可"],[-1,18614,"\n"],[-1,18747,"可以"],[1,19942," "],[1,19944,"2"],[-1,19944," "],[-1,19948,"在"]],[19948,19948],[17769,17769]]],[1573130082280,["GJX@GJXAIOU",[[1,18710,"-bean=\"blackDisk\"/>"]],[18710,18710],[18729,18729]]],[1573130083277,["GJX@GJXAIOU",[[1,18734,"  \n    "]],[18729,18729],[18736,18736]]],[1573130084579,["GJX@GJXAIOU",[[1,18736,"...."]],[18736,18736],[18740,18740]]]],null,"GJX@GJXAIOU"],["43a764df-5c27-40a5-810d-602b9623d2ee",1573131952803,"---\nstyle: summer\nflag: red\n---\n\n# Part1：Spring 核心知识\n@toc\n\n## 章一：Spring 之旅\n\nSpring 实现简化企业级开发（EJB）的底层功能依赖于两大核心特性：依赖注入（Dependency Injection，DI）和面向切面编程（aspect-oriented programming，AOP）\n\n### 一、简化 Java 开发\n使用的四种关键策略：\n- 基于 POJO 的轻量级和最小侵入性编程；\nspring 不会强迫实现 Spring 规范的接口或者继承 Spring 规范的类，从而避免框架通过强迫应用继承他们的类或者实现他们的接口从而导致应用和框架绑死；非侵入式编程意味着该类在 Spring 应用中和非 Spring 应用中都可以发挥同样的作用，Spring 仅仅通过 DI 来装配 POJO；\n- 通过依赖注入和面向接口实现松耦合；\n用于实现保持对象直接的松耦合，\n- 基于切面和惯例进行声明式编程；\nDI 能够让相互协作的软件组件（Bean）保持松散耦合，而面向切面编程允许将遍布应用各处的功能分离出来形成可以重用的组件。通常针对跨越系统的多个组件，例如日志、事务管理、安全等系统服务，不应该融入到系统自身的核心业务逻辑中。原来做法是各个模块需要上述功能就实现对应的方法，或者上述方法抽象出来再需要的地方进行调用，本质都是重复出现。应该只关注核心功能，不关注上述功能；\n![采用AOP功能前后对比]($resource/%E9%87%87%E7%94%A8AOP%E5%8A%9F%E8%83%BD%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94.png)\n\n- 通过切面和模板减少样板式代码；\n例如使用 JDBC 来访问数据库查询数据，需要进行样板式的配置（连接、查询、释放。。）。Spring 通过模板封装来消除样板式代码，例如可以使用 Spring 的 JdbcTemplate 代替 JDBC API，专注于书写逻辑 SQL ；\n\n### 二、容纳你的 Bean\n\n在基于 Spring 应用中，**应用对象是生存于 Spring 容器中**，Spring 容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期。spring 容器使用 DI 管理构成应用的组件，它会创建相互协作的组件之间的关联。\n**Spring 自带多个容器实现**，主要是两类：\n- Bean 工程：由`org.springframework.beans.factory.BeanFactory`接口定义，提供基本的 DI 支持；\n- 应用上下文：由`org.springframework.context.ApplicationContext`接口定义，基于 BeanFactory 构建，提供应用框架级别的服务，通常使用这里；自带的多种应用上下文见下：\n  *   AnnotationConfigApplicationContext;：一个或多个基于 Java 的配置类中加载 Spring 应用上下文；\n  *   AnnotationConfigWebApplicationContext;一个或多个基于 Java 的配置类中加载 Spring Web 应用上下文；\n  *   ClassPathXmlApplicationContext; 在**类路径**下一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义作为类资源；\n  *   FileSystemXmlApplicationContext;：在**文件系统**下一个或多个 XML 配置文件中加载上下文定义；\n  *   XmlWebApplicationContext；从 web 应用下的一个或多个 XML 配置文件中加载上下文定义；\n\n- FileSystemXmlApplicationContext和ClassPathXmlApplicationContext的区别在于：FileSystemXmlApplicationContext在**指定文件系统路径下查找**，而ClassPathXmlApplicationContext在**所有的类路径（包括JAR文件）下**查找。\n\n如果想从Java配置中加载应用上下文，可以使用AnnotationConfigApplicationContext。\n\n- 示例：\n如何加载一个FileSystemXmlApplicationContext（从文件路径加载）：\n `ApplicationContext context =  new  FileSystemXmlApplicationContext(\"c:/knight.xml\");`\n\n使用ClassPathXmlapplicationContext加载（从类路径加载）：\n `ApplicationContext context =  new  ClassPathXmlapplicationContext(\"knight.xml\");`\n\n从java配置类加载应用上下文：\n `ApplicationContext context =  new  AnnotationConfigApplicationContext(com.springinaction.knights.config.KnightConfig.class);`\n\n 应用上下文准备就绪后，可以调用上下文的getBean()方法从Spring容器中获取Bean\n**所以说应用上下文就是一个 Spring 容器**\n\n\n#### （二）**bean的生命周期**\n\n使用new对bean进行实例化，一旦不再被使用，将由Java自动进行垃圾回收。\n![Bean 的生命周期]($resource/Bean%20%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n\n1.  Spring对Bean进行实例化；\n2.  Spring将值和Bean的引用注入进Bean对应的属性中；\n3.  如果Bean实现了`BeanNameAware`接口，Spring将Bean的ID传递给`setBeanName()`接口方法；\n4.  如果Bean实现了`BeanFactoryAware`接口，Spring将调`setBeanFactory()`接口方法，将BeanFactory容器实例传入；\n5.  如果Bean实现了`ApplicationContextAware`接口，Spring将调用`setApplicationContext()`接口方法，将应用上下文的引用传入；\n6.  如果Bean实现了`BeanPostProcessor`接口，Spring将调用`postProcessBeforeInitialization()`接口方法；\n7.  如果Bean实现了`InitializationBean`接口，Spring将调用`afterPropertiesSet()`方法。类似的如果Bean使用了`init-method`声明了初始化方法，该方法也会被调用；\n8.  如果Bean实现了`BeanPostProcessor`接口，Spring将调用`ProcessAfterInitialization()`方法；\n9.  此时此刻，Bean已经准备就绪，可以被应用程序使用了，它们将一直`驻留在应用上下文中`，直到该应用上下文被销毁；\n10.  如果Bean实现了`DisposableBean`接口，Spring将调用`destory()`方法，同样的，如果Bean中使用了`destroy-method`声明了销毁方法，也会调用该方法；\n\n### 三、俯瞰 Spring 整体\n\n![Spring 模块]($resource/Spring%20%E6%A8%A1%E5%9D%97.png)\n\n1.  Spring核心容器\n    是Spring框架中最核心的部分，管理Spring应用中bean的创建、配置和管理。在此模块中包含了Spring bean工厂，为Spring提供了DI功能。\n2.  Spring的AOP模块\n    是Spring应用系统中开发切面的基础。与DI一样，AOP可以帮助应用对象解耦。借助AOP可以将遍布系统的关注点（如事务和安全）从应用对象中解耦出来。\n3.  数据访问与继承\n    使用JDBC编写代码通常导致大量的样板式代码。Spring的JDBC和DAO（Data Access Object）模块抽象了这些样板式代码。还在多种数据库服务的错误信息上构建了一个语义丰富的异常层。同样 Spring 的 ORM 模块是建立在 DAO 的支持之上的，Spring 的事务管理支持所有的 ORM 框架和 JDBC。\n4.  Web和远程调用：\n    MVC（Model-View-Controller）模式榜知用户将界面逻辑和应用逻辑分离。（SpringMVC）\n5.  Instrumentation模块提供了为JVM添加代理的功能。\n6.  测试\n    Spring为使用JNDI、Servlet和Portlet编写单元测试提供了一系列的mock对象实现。\n\n\n### 四、Spring 新功能\n。。。。\n\n\n\n\n## 章二：装配 Bean\n\n原来创建应用对象之间的关联关系通常使用构造器或者查找，导致代码结构复杂。**在Spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要相互协作的对象引用赋予各个对象。**\n\n**创建应用对象之间协作关系的行为通常称为装配**（wiring），这也是依赖注入的本质。\n\n###  一、 Spring配置的可选方案\nSpring 容器负责创建应用程序中的 Bean 并通过 DI 来协调这些对象之间的关系，但是得告诉 Spring **要创建哪些 Bean 并且如何将他它们装配到一起**。\nSpring提供了三种主要的装配机制（可以互相搭配使用）：\n\n*   在XML中进行显式配置；\n*   在Java中进行显式配置；\n*   隐式的bean发现机制和自动装配。\n\n建议**尽可能的使用自动装配的机制**。显式配置越少越好，**当必须要显式配置bean的时候**（比如，有些源码不是由你来维护的，而当你需要为这些代码配置bean的时候），**推荐使用类型安全并且比XML更加强大的JavaConfig**。最后，只有当你想要使用便利的XML命名空间，并且在JavaConfig中没有同样的实现是才应该使用XML。\n\n### 二、 自动化装配bean\n\nSpring从两个角度实现自动化装配：\n*   组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean；\n*   自动装配（autowiring）：Spring自动满足bean之间的依赖。\n\n#### （一）创建可被发现的bean\n\n在类上使用@Component注解，这个注解表明该类会作为组件类，并告知Spring要为这个类创建bean。\n示例：\n定义一个CD机的类：\n```java\npackage a_autoConfig;\n\n/**\n * CD 接口，定义 CD 播放器对一盘 CD 能做的操作，降低 CD播放器的任意实现对 CD 本身的耦合\n */\npublic interface CompactDisk {\n    void play();\n}\n```\n带有@Component注解的CompactDisc实现类SgtPeppers\n```java\npackage a_autoConfig;\n\nimport org.springframework.stereotype.Component;\n\n/**\n *  @Component 注解告诉 Spring 该类会作为组件类，同时要为该类创建 Bean\n */\n@Component\npublic class SgtPeppersDisk implements CompactDisk {\n\n    private String title = \"Sgt. Pepper's  Club Band\";\n    private String artist = \"The Beatles\";\n\n    @Override\n    public void play() {\n        System.out.println(\"通过a_autoConfig显示：Playing \" + title + \" by \" + artist);\n    }\n}\n```\n组件扫描默认是不启用的，还需要显式配置一下Spring，从而命令它去寻找带有@Component注解的类并为其创建bean。\n\n```\npackage a_autoConfig;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * 因为默认组件扫描不启用，需要显式配置 Spring 命令其需要带有 @Component 注解的类，并且为其创建 Bean\n * 这里 CDPlayerConfig 类没有显式的声明任何 Bean，仅仅使用 @ComponentScan 注解来在 Spring 中启动组件扫描，\n *      这里扫描注解中是有参数的，如果没有配置则默认扫描：与配置类相同的包以及该包下所有的子包中带 @Component 的类\n */\n@Configuration\n@ComponentScan(\"a_autoConfig\")\npublic class CDPlayerConfig {\n}\n```\n 上面是使用 Java 代码定义 Spring 的装配规则， 如果没有其他配置，**@ComponentScan默认会扫描与配置类相同的包以及该包下所有子包，查找所有带有 @Component 注解的类**。\n\n上面对应的，如果想使用XML来启用组件扫描，可以使用Spring context命名空间的`<context:component-scan>`元素。\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:Context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\">\n\n        <context:component-scan base-package=\"soundsystem\"/>\n</beans>\n\n```\n\n为了配合测试的一些类\n```MediaPlay_java\npackage a_autoConfig;\n\npublic interface MediaPlayer {\n    void play();\n}\n```\n上面接口的实现类\n```java\npackage a_autoConfig;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CDPlayer implements MediaPlayer {\n\n    @Autowired\n    private CompactDisk cd;\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n}\n```\n\n测试组件扫描代码（即看配置是否起作用）：\n```\npackage a_autoConfig;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * CDPlayerTest 使用了 Spring 的 `SpringJUnit4ClassRunner`，以便在测试开始的时候自动创建Spring的应用上下文。\n * 注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。\n * 因为 CDPlayerConfig 类中包含了 @ComponentScan，因此最终的应用上下文中应该包含 CompactDisc  Bean；\n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = CDPlayerConfig.class)\npublic class A_CDPlayerTest {\n\n    // MediaPlay 的实现类中包含 CompactDisc 的一个属性\n    // @Autowired 会将 CompactDisc bean 注入到该测试代码中\n    @Autowired\n    private MediaPlayer mediaPlayer;\n\n    @Test\n    public void playCD(){\n        mediaPlayer.play();\n    }\n\n    // 测试方法二：直接看 CompactDisc 对象有没有被注入\n    @Autowired\n    private CompactDisk compactDisk;\n    @Test\n    public void compactDiskShouldNotBeNull(){\n        assertNotNull(compactDisk);\n    }\n}\n\n```\n\nCDPlayerTest使用了Spring的 `SpringJUnit4ClassRunner`，以便在测试开始的时候自动创建Spring的应用上下文。注解@ContextConfiguration会告诉它需要在CDPlayerConfig中加载配置。因为 CDPlayerConfig 类中包含了 @ComponentScan，因此最终的应用上下文中应该包含 CompactDisc  Bean；\n\n#### （二） 为组件扫描的bean命名\n\n在组件扫描中如果没有明确的设置ID，Spring会根据类名为其指定一个ID。**这个bean所给定的ID是首字母变为小写的类名**。即下面类 SgtPeppers 如果使用 `@Component` 和使用 `@Component(“sgtPeppers”)` 一样。\n\n如果想为这个bean设置不同的ID，需要将其作为值传递给@Component注解。\n\n```\n@Component(\"lonelyHeartsClub\")\npublic class SgtPeppers implements CompactDisc {\n}\n\n```\n\n另外一种bean命名方式使用Java依赖注入规范中提供的@Named注解：**不推荐**，就是将上面的 @Component 换成 @Named 即可；\n\nSpring支持将@Named作为@Component注解的替代方案。两者之间由一些细微的差异，但在大多数场景中可以互换。\n\n\n#### （三） 设置组件扫描的基础包\n\n如果没有为@ComponentScan设置属性，按照默认规则，它会以配置类所在的包作为基础包来扫描逐渐。\n\n如果**想扫描不同的包，在@ComponentScan的value属性中指定包名即可**。\n\n```\n@Configuraion\n@ComponentScan(\"soundsystem\")\npublic class CDPlayerConfig{\n}\n\n```\n\n如果想更加清晰的表明所设置的是基础包，可以通过basePackages属性进行配置：\n\n```\n@Configuration\n@ComponentScan(basePackages=\"soundsystem\")\npublic class CDPlayerConfig{}\n\n```\n\nbasePackages属性可以设置多个包，赋值一个数组即可：例如：`@ComponentScan(basePackages={\"soundsystem\", \"video\"})`\n\n除了将包设置为简单的String类型外，@ComponentScan 还提供了另外一种方法，将**其指定为包中所包含的类或接口**：**这样也会扫描该类（接口）所在包**，即该类所在的包将成为组件扫描的基础包。推荐在扫描的包中新建一个空的接口，用于被扫描；\n**使用下面这种**\n```\n@Configuration\n@ComponentScan(basePackageClasses={CDPlayer.class, DVDPlayer.class})\npublic class CDPlayerConfig { }\n\n```\n\n#### （四） 通过为bean添加注解实现自动装配\n\n自动装配：让 Spring 自动满足 Bean 依赖的一种方法，在满足依赖的过程中，会在 Spring 应用上下文中寻找匹配某个 Bean 需求的其他 Bean；使用 @Autowired 来声明要进行自动装配；\n\n```java\npackage a_autoConfig;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CDPlayer implements MediaPlayer {\n    pricate CompactDisc cd;\n\n    // 该注解表明：当 Spring 创建 CDPlayer 时候，会通过该构造器进行实例化并且传入一个可以设置给 CompactDisc 类型的 Bean\n    @Autowired\n    public CDPlayer(CompactDisc cd){\n      this.cd = cd;\n    }\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n}\n```\n\n* **可以在构造器、setter方法、任何方法上使用@Autowired注解**，Spring会尝试满足方法参数上所声明的依赖。假如有且只有一个bean匹配依赖需求，那么这个bean将会被装配进来。\n\n* 如果没有匹配的bean，那么在应用上下文创建的时候会抛出异常。可以将@Autowired的required属性设置为false`@Autowired(required=false)`，此时Spring会尝试自动装配，但是如果没有匹配的bean的话该属性将会为null。就是不装配也不会报异常，这样使用时候可能出错 NPE 问题。\n\n* 如果有多个bean都满足依赖关系，Spring将会抛出异常，因为没有指定那个 bean 。\n\n* @Autowired是Spring特有的注解。可以使用@Inject注解替代（但是不建议使用）。\n\n\n### 三、 通过Java代码装配Bean\n\n**为什么进行显式装配**\n主要针对将第三方库中的组件装配到自己的应用中，是没有办法在他们的类中加上 @Component 和 @Autowired 注解的，就不能使用自动化装配了。\n\n显式的装配方式有两种：Java和XML。一般用于将第三方库中的组件装配到自己的应用中。\n\n**推荐 Java 配置，因为类型安全且对重构友好**\n同时 JavaConfig 是配置代码，因此不能有任何的业务逻辑，不能侵入业务逻辑代码中，一般放在单独的包中，使得和应用程序逻辑相分离。\n\n\n**配置过程如下：**\n#### （一）创建配置类\n\n@Configuration注解表明这个类是一个配置类，该类应该包含在Spring应用上下文中如何创建bean的细节。\n```java\npackage soundsystem\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class CDPlayerConfig{\n}\n```\n\n前面都是使用组件扫描（即在上面类上加上 @ComponentScan 注解）来发现 Spring 应该创建的 Bean，下面使用显示配置方式；\n\n#### （二）声明简单bean\n\n要在JavaConfig中声明bean，需要编写一个方法，这个方法会创建所需类型的实例，然后给这个方法添加@Bean注解。\n```java\n@Bean(name=\"设置另一个名字\")\npublic CompactDisc sgtPeppers(){\n    // 这里只要确认该方法体返回一个新的 SgtPerppers() 实例结课，可以添加其他的逻辑\n    return new SgtPeppers();\n}\n```\n\n\n#### （三） 借助JavaConfig实现注入\n**这里就是将 CompactDisc 注入到 CDPlayer 中**，因为这里的 CDPlayer bean 依赖于 CompactDisc。\n\n在JavaConfig中装配bean的最简单方式就是引用创建bean的方法。在方法上添加了@Bean注解，Spring将会拦截所有对它的调用，并确保直接返回该方法所创建的bean，而不是每次都对其进行实际的调用。\n\n通过调用方法引用bean的方式有点令人困惑。还有一种理解起来更简单的方式：\n\n```\n@Bean\npublic CDPlayer cdPlayer(CompactDisc compactDisc) {\n    return new CDPlayer(compactDisc);\n}\n```\n\ncdPlaye()方法请求一个CompactDisc作为参数，当Spring调用cdPlayer()创建CDPlayer bean的时候，它会自动装配一个CompactDisc到配置方法之中。\n\n通过这种方式引用其他的bean通常是最佳的选择，因为它不会要求将CompactDisc声明到同一个配置类之中。在这里甚至没有要求CompactDisc必须要在JavaConfig中声明，实际上它可以通过组件扫描功能自动发现或者通过XML来进行配置。可以将配置分散到多个配置类、XML文件以及自动扫面和装配bean之中。\n\n代码示例：\n```CompactDisk_java\npackage b_javaConfig;\n\npublic interface CompactDisk {\n    void play();\n}\n```\n\n```SgtPeppersDisk_java\npackage b_javaConfig;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.stereotype.Component;\n\n@Getter\n@Setter\n@Component\npublic class SgtPeppersDisk implements CompactDisk {\n\n    private String title = \"Sgt. Pepper's Lonely Hearts Club Band\";\n    private String artist = \"The Beatles\";\n\n    @Override\n    public void play() {\n        System.out.println(\"通过b_javaConfig显示：Playing \" + title + \" by \" + artist);\n    }\n}\n```\n\n```Media_java\npackage b_javaConfig;\n\npublic interface MediaPlayer {\n    void play();\n}\n```\n\n```CDPlayer_java\npackage b_javaConfig;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter\n@Getter\npublic class CDPlayer implements MediaPlayer {\n\n    private CompactDisk cd;\n\n    public CDPlayer(CompactDisk cd) {\n        this.cd = cd;\n    }\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n\n    public void setCompactDisc(CompactDisk compactDisk) {\n    }\n}\n```\n\n```CDPlayerConfig_java\npackage b_javaConfig;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by yangjing on 2018/1/2\n */\n@Configuration\npublic class CDPlayerConfig {\n\n    /**\n     * @Bean 注解会告诉Spring这个方法将返回一个对象，该对象要注册为Spring应用上下文中的bean。方法体中包含了最终产生bean实例的逻辑。\n     * 默认情况下，bean的ID与方法名一致。如果想为其设置一个不同的名字，可以重命名该方法，也可以通过@Bean的name属性指定。\n     * @return\n     */\n    @Bean(name = \"hello\")\n    public CompactDisk sgtPerppersDisk(){\n        return new SgtPeppersDisk();\n    }\n\n    /**\n     * 方案一：将 CompactDisk 装配到 CDPlayer 中最简单方式就是 引用创建 Bean 的方法;\n     * 该方法也使用 @Bean 表示该方法会创建一个 Bean 实例并将其注册到 Spring 上下文中，其 BeanID 即为类名；\n     * 这里调用了需要传入 CompactDisk 对象（sgtPerppersDisk 是 CompactDisc 的实现类）的构造器 来创建 CDPlayer 实例，\n     *      但是这里的 CompactDisc 对象不是通过 SgtPeppersDisk() 得到的，因为 SgtPeppersDisk() 方法上也有 @Bean，\n     *      因此 Spring 会拦截所有对他的调用，并确保直接返回该方法创建的 bean，而不是每次都对其进行实际的调用。\n     * @return\n     */\n    @Bean\n    public MediaPlayer mediaPlayer(){\n        return new CDPlayer(sgtPerppersDisk());\n    }\n\n    /**\n     * 默认 Spring 中的 bean 都是单例的，\n     * 接上面：这里不会每次都调用 sgtPerppersDisk()，Spring 会拦截对 sgtPerppersDisk() 的调用，并确保返回的是 Spring 所创建的 Bean，\n     *   即 Spring 本身在调用 sgtPerppersDisk() 时所创建的 CompactDisc bean，因此两个 MediaPlayer bean 会得到相同的\n     *   SgtPeppersDisk 实例。\n     * @return\n     */\n    @Bean\n    public MediaPlayer anotherMediaPlayer(){\n        return new CDPlayer(sgtPerppersDisk());\n    }\n\n    /**\n     * 方式二：当 Spring 调用 cdPlayer() 创建 CDPlayer bean 的时候，会自动装配一个 CompactDisc\n     * 到配置方法中，然后方法体就可以按照合适的方法使用它；\n     *  这样 cdPlayer() 方法也能将 CompactDisc 注入到 CDPlayer 的构造器中，不用明确引用 CompactDisc 的 @Bean 方法；\n     *  优势：ComponentDisc 不要求将其声明到同一个配置类，甚至不一定要求使用 JavaConfig 声明，可以采用组件扫描自动发现或者xml配置都行。\n     * @param compactDisk\n     * @return\n     */\n    @Bean\n    public MediaPlayer mediaPlayer(CompactDisk compactDisk) {\n        return new CDPlayer(compactDisk);\n    }\n\n    /**\n     * 方式二的另一种 DI方式，上面通过构造器实现 DI 功能，下面通过 Setter 方法实现注入 CompactDisc\n     * 重点：带有 @Bean 注解的方法可以采用任何必要的 Java 功能产生 bean 实例即可，不一定仅仅使用构造器和 setter 方法；\n     * @param compactDisk\n     * @return\n     */\n    @Bean\n    public MediaPlayer mediaPlayer(CompactDisk compactDisk){\n        CDPlayer cdPlayer = new CDPlayer(compactDisk);\n        cdPlayer.setCompactDisc(compactDisk);\n        return cdPlayer;\n    }\n}\n\n\n```\n\n### 四、通过XML装配Bean\n\n#### （一）创建XML配置规范\n\n在XML配置中，要创建一个XML文件，并且要以<beans>元素为根。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframeword.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\">\n\n        <!-- 配置详情 -->\n</beans>\n\n```\n\n#### （二）声明一个简单的<bean>\n**Spring XML 配置中只有一种 ==声明==  bean 的方式，使用 <bean> 元素并指定 class 属性；**\n<bean>元素类似于JavaConfig中的@Bean注解。\n`<bean id=\"compactDisc\" class=\"soundsystem.SgtPeppers\">`\n\n- 如果没有给定ID，所以这个bean将会根据全限定类名来进行命名。例如上面的 Bean Id 就是：`soundsystem.SgtPeppers#0`，其中`#0`是一个计数形式，用来区分相同类型的其他bean，例如声明了另一个 SgtPeppers，且没有设置 Id 属性，则会自动设置 Id 为：`soundsystem.SgtPeppers#1`。\n\n- 这里不再需要直接负责创建 SgtPeppers 的实例（基本的 JavaConfig 中需要），这里 Spring 发现 `<bean>`这个元素时候，会调用 SgtPeppers 的默认构造器来创建 bean，虽然更加被动但是不能像 JavaConfig 中一样以自己的方式创建 Bean 实例。\n\n#### （三）借助构造器注入初始化bean\n\n构造器注入有两种基本的配置方案可供选择：\n\n*   `<constructon-arg>` 元素；\n*   使用Spring 3.0 所引入的c-命名空间。\n\n-  构造器注入bean引用\n**这里针对的是类型的装配**，即将对象的引用装配到依赖于他们的对象中；\n上面通过`<bean>` 标签声明了 CompactDisc 接口的实现类 SgtPeppersDisk，下面将 CompactDisc 依赖注入到 CDPlayer 中\n当 Spring 遇到 <bean> 元素之后，会创建一个 CDPlayer 实例，<constructor-arg> 元素会告知 Spring 要将一个 Id 为 compactDisc 的 bean 引用传递到 CDPlayer 的构造器中。\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\">\n    <constructor-arg ref=\"compactDisc\"/>\n</bean>\n\n```\n\nc-命名空间的schema:加上下面这个：`xmlns:c=\"http://www.springframework.org/schema/c\"`\n然后在 xml 文件中配置：\n```\n<bean id=\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    c:cd-ref=\"compactDisc\" />\n// 含义： c-命名空间的前缀:装配的构造器的参数名-表示装配一个 bean 引用=\"要注入的 bean 的 ID\"\n```\n\n可以使用参数（针对构造器的参数名）在整个参数列表中的位置来替代参数名，这里使用 `0`表示第一个参数：因为在XML中不允许数字作为属性的第一个字符，因此必须要添加一个下划线作为前缀。`c:_0-ref=\"compactDisc\"`\n\n如果只有一个参数，不用标示参数：`c:_-ref=\"compactDisc\" `\n\n\n- 将字面量注入到构造器中\n\n这里示例是 CompactDisc 的新的实现类，里面的参数不是直接附字符串的，因此需要将值注入\n\n```BlankDisk_java\npackage c_xmlConfig;\n\nimport java.util.List;\n\npublic class BlankDisk implements CompactDisk {\n\n    private String title;\n    private String artist;\n    private List<String> tracks;\n\n    public BlankDisk(String title, String artist, List<String> tracks) {\n        this.title = title;\n        this.artist = artist;\n        this.tracks = tracks;\n    }\n\n    @Override\n    public void play() {\n        System.out.println(\"通过c_xmlConfig显示：\");\n        System.out.println(\"Playing \" + title + \" by \" + artist);\n        for (String track : tracks) {\n            System.out.println(\"-Track：\" + track);\n        }\n    }\n}\n\n```\n\n使用构造器进行注入：\n```\n<bean id=\"compactDisc\" class=\"soundsystem.BlankDisc\">\n    <!--value 属性表示给定的 value 值将以字面量的形式注入到构造器中-->\n    <constructor-arg value=\"sgt.Pepper\" />\n    <constructor-arg value=\"sgtbags\" />\n</bean>\n```\n\n使用c-命名空间装配字面量与装配引用的区别在于属性名中去掉了-ref后缀。\n方案一：引用构造器参数名字\n方案二：将参数名换成数字 0/1.....(利用位置)\n```\n<bean id=\"compactDisc\" class=\"soundsystem.BlankDisc\"\n    c:_title=\"sgt. Pepper\"\n    c:_artist=\"sgtbags\"/>\n```\n\n- 装配集合\n\n**<constructor-arg>可以将集合装配到构造器参数重，而c-命名空间不能**。\n\n可以使用<null/>元素将null传递给构造器，方式是：`<constructor-arg><null/></constructor-org>`。\n\n可以使用<list>元素声明一个列表：\n```\n<constructor-arg>\n    <list>\n        <value>\"CCCC\"</value>\n        <value>\"张三\"</value>\n        ....\n    </list>\n</constructor-arg>\n```\n\n<list>元素是<constructor-arg>的子元素，这表明一个包含值的列表将会传递到构造器中。其中<value>元素用来指定列表中的每个元素。\n\n与之类似，可以使用<ref>元素代替<value>，**实现bean引用列表的装配**。例如 参数是`List<CompactDisc> cd`，则引用是\n```xml\n<!--前面配置省略-->\n<constructor-arg>\n    <list>\n      <ref-bean=\"sgtPeppersDisk\"/>\n      <ref-bean=\"blackDisk\"/>\n      ....\n    </list>\n</constructor-arg>\n```\n\n可以用相同的方式使用<set>元素。<set>和<list>元素的区别不大，无论在哪种情况下，<set>或<list>都可以用来装配List、Set甚至是数组。只是 set 会忽略重复的值，同时保证存放顺序。\n\n#### （四）设置属性\n\n新的代码示例：\n\n```java\npackage c_xmlConfig;\n\npublic class CDPlayer implements MediaPlayer {\n\n    private CompactDisk cd;\n\n    public CDPlayer(CompactDisk cd) {\n        this.cd = cd;\n    }\n\n    @Override\n    public void play() {\n        cd.play();\n    }\n}\n```\n\n**使用构造器注入还是使用属性注入**\n\n- 强依赖，例如 BlankDisc 中都是强依赖，使用构造器注入；\n- 弱依赖：移入 CompactDisc 属于弱依赖，因为即使没有该依赖注入，CDPlayer 类仍具备一定的功能；\n\n注入方式：\n\n```xml\n<bean id =\"cdPlayer\" class=\"soundsystem.CDPlayer\">\n\t<property name = \"cd\" ref=\"compactDisc\"/>\n</bean>\n```\n\n<property>元素为属性的setter方法所提供的功能与<constructor-arg>元素为构造器提供的功能是一样的，本例子中通过引用 id 为 compactDisc 的 bean 来注入到 cd 属性中。**通过 setCompactDisc() 方法**\n\nSpring提供了p-命名空间作为<property>元素的替代方案。p-命名空间的schema：\n\n```xml-dtd\nxmlns:p=\"http://www.springframework.org/schema/p\"\n```\n\n对应的装配方式：\n\n```xml\n<bean id =\"cdPlayer\" class=\"soundsystem.CDPlayer\" \n    p:cd-ref=\"compactDisc\"/>\n\n```\n\n#### (五)将字面量注入属性中\n\n新的代码示例为：\n\n```java\npackage c_xmlConfig;\n\nimport java.util.List;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class BlankDisk implements CompactDisk {\n\n    private String title;\n    private String artist;\n    private List<String> tracks;\n   \n    @Override\n    public void play() {\n        System.out.println(\"通过c_xmlConfig显示：\");\n        System.out.println(\"Playing \" + title + \" by \" + artist);\n        for (String track : tracks) {\n            System.out.println(\"-Track：\" + track);\n        }\n    }\n}\n```\n\n注入方式：\n\n```xml\n<bean id=\"compactDisc\" class=\"soundsystem.BlankDisc\">\n\t<property name=\"title\" value=\"sdfjkla\"></property>\n    <property name=\"artist\" value=\"sdfjkla\"></property>\n    <property name=\"tracks\">\n    \t<list>\n        \t<value>slkgdjlksd</value>\n            <value>jfldskjga</value>\n        </list>\n    </property>\n</bean>\n```\n\n如果使用 P 标签的：\n\n```xml\n<bean id=\"compactDisc\" class=\"soundsystem.BlankDisc\"\n      p:title=\"dfjdsljgf\"\n      p:artist=\"kdjgfdsjg\">\n    <property name=\"tracks\">\n    \t<value>djfjdsfj</value>\n        <value>djgfgjkdajg</value>\n    </property>\n</bean>\n```\n\nutil-命名空间所提供的功能之一是[util:list](util:list)元素，它会创建一个列表的bean。\n\n```xml-dtd\nxmlns:util=\"http://www.springframework.org/schema/util\"\n```\n\n```\n<util:list id=\"trackList\">\n    <value>......</value>\n    <value>.....</value>\n</util:list>\n```\n\n下表展示了Spring util-命名空间中的元素\n\n| 元素 | 描述 |\n| --- | --- |\n| [util:constant](util:constant) | 引用某个类型的public static域，并将其暴露为bean |\n| [util:list](util:list) | 创建一个java.util.List类型的bean，其中包含值或引用 |\n| [util:map](util:map) | 创建一个java.util.Map类型的bean，其中包含值或引用 |\n| [util:properties](util:properties) | 创建一个java.util.Propertie类型的bean |\n| [util:property-path](util:property-path) | 引用一个bean的属性（或内嵌属性），并将其暴露为bean |\n| [util:set](util:set) | 创建一个java.util.Set类型的bean，其中包含值或引用 |\n\n### 五、导入和混合配置\n\n#### （一）在JavaConfig中引用XML配置\n\n使用@Import注解引用其他JavaConfig配置，使用@ImportResource注解引入XML配置。\n\n```\n@Configuration\n@Import(CDPlayerConfig.class)\n@ImportResource(\"classpath:cd-config.xml\")\npublic class SoundSystemConfig {\n\n}\n\n```\n\n#### （二）在XML配置中引用JavaConfig\n\n在XML中可以使用<import>元素来引用其他XML配置。\n\n将JavaConfig作为bean使用<bean>元素导入XML配置文件。\n\n## 章三：高级装配\n\n\n## 章四：面向切面的 Spring\n",[[1573131952226,["GJX@GJXAIOU",[[-1,21899,"## 章三：高级装配\n\n\n## 章四：面向切面的 Spring"]],[21899,21930],[21899,21899]]],[1573131963531,["GJX@GJXAIOU",[[-1,21899,"\n"]],[21898,21930],[21898,21898]]],[1573131964174,["GJX@GJXAIOU",[[-1,21898,"\n"]],[21898,21898],[21897,21897]]],[1573131965130,["GJX@GJXAIOU",[[-1,21895,"件。"]],[21897,21897],[21895,21895]]]],null,"GJX@GJXAIOU"]]}