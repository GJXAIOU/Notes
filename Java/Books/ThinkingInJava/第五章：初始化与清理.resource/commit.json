{"compress":true,"commitItems":[["4c5fe371-453f-4605-af22-611bc82eb830",1562593247467,"",[[1562593196711,["GJX@GJXAIOU",[[1,0,"# 第五章：初始化与清理\n\n\n\n"]],[0,0],[15,15]]],[1562593198878,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562593200270,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-8'\n---"]],[0,0],[75,75]]],[1562593221033,["GJX@GJXAIOU",[[1,90,"## 5.1 用构造器确保初始化"]],[90,90],[106,106]]],[1562593221375,["GJX@GJXAIOU",[[1,108,"\n"]],[106,106],[107,107]]],[1562593224555,["GJX@GJXAIOU",[[1,109,"\n"]],[107,107],[108,108]]],[1562593227066,["GJX@GJXAIOU",[[1,108,"- 通过使用"]],[108,108],[114,114]]],[1562593246095,["GJX@GJXAIOU",[[1,115,"- \n"]],[114,114],[117,117]]],[1562593246221,["GJX@GJXAIOU",[[-1,115,"- "]],[117,117],[116,116]]],[1562593246347,["GJX@GJXAIOU",[[1,117,"\n"]],[116,116],[117,117]]],[1562593246439,["GJX@GJXAIOU",[[1,118,"\n"]],[117,117],[118,118]]],[1562593246572,["GJX@GJXAIOU",[[1,119,"\n"]],[118,118],[119,119]]],[1562593247390,["GJX@GJXAIOU",[[1,119,"5.1 方法重载（method overloading）\n  重载方法，方法名相同，形式参数列表不同（参数列表又叫参数签名，包括参数的类型、参数的个数和参数的顺序，只要有一个不同就叫做参数列表不同）。重载是面向对象的一个基本特性。\n\n声明为final的方法不能被重载\n声明为static的方法不能重载，但是能够被再次声明。\n重载方法的返回类型可以相同也可以不同，但仅返回类型不同不足以成为方法的重载。\n编译器根据调用方法的签名逐个匹配，以选择对应方法的过程叫做重载分辨（Overload Resolution，或叫重载决议）。 \n1. 《深入理解Java虚拟机》：虚拟机（准确地说是编译器）在重载时是通过参数的静态类型（Static Type ）或叫外观类型（Apparent Type）而不是实际类型（Actual Type）作为判定依据的。 \n2. 《深入理解Java虚拟机》：编译期间选择静态分派目标的过程是Java语言实现方法重载的本质。\n5.2 this 关键字\n  `this` 关键字只能在方法内部使用，表示对“**调用方法的那个对象**”的引用。\n5.3 清理：终结处理和垃圾回收\n5.3.1 finalize()\nJava中的finalize()不等于C++中的析构函数\n当发生“垃圾回收”时，finalize()才得到调用\nJava里的对象并非总是被垃圾回收（因为Java的“垃圾回收”并不能保证一定会发生） \n对象可能不被垃圾回收\n垃圾回收并不等于“析构”\nJava并未提供“析构函数”或相似的概念，Java的“垃圾回收”不保证一定会发生，所以要做类似的清理工作，必须自己动手创建一个执行清理工作的普通方法。\n只要程序没有濒临存储空间用完的那一刻，垃圾回收可能就会一直没有发生。这个策略是恰当的，因为垃圾回收本身也有开销，要是不使用它，那就不用支付这部分开销了。\n5.3.2 finalize()用途何在\n  由于垃圾回收器会负责释放对象占据的所有内存，这就将finalize()的需求限制到一种特殊情况，即通过某种创建对象方式以外的方式为对象分配了存储空间。由于Java中一切皆为对象，所以那种特殊情况主要发生在使用“本地方法”的情况下，本地方法是一种在Java中调用非Java代码的方式。 \n  不要过多地使用finalize()，它不是进行普通的清理工作的合适场所。\n\nJoshua Bloch在题为“避免使用终结函数”一节中走得更远，他提到：“终结无法预料，常常是危险的，总之是多余的。”《Effective Java》，第20页，（Addison-Wesley 2001）\n\n5.4 成员初始化\n  Java尽力保证：所有变量在使用前都能得到恰当的初始化。\n\n对于方法的局部变量，如果使用前没有初始化，Java以编译时错误（注意，如果方法内的局部变量未被使用，将不会编译错误）的形式来贯彻这种保证。\n对于类的成员变量：\n\n成员变量是基本类型，Java会自动初始化初值0；\n成员变量是引用类型，Java会自动初始化初值null;\n// InitialValues.java\npublic class InitialValues{\n    int j;\n    char c;\n    MyClass mc;\n    public static void main(String[] args){\n        int i;\n        //i++; // Error -- i not initialized\n        InitialValues obj = new InitialValues();\n        System.out.println(obj.c);\n        System.out.println(obj.j);\n        System.out.println(obj.mc);\n    }\n}\nclass MyClass{}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n无法阻止自动初始化的进行，它将在构造器被调用之前发生,如下，i首先会被置0，然后变成7。\n// Counter.java\npublic class Counter{\n    int i;\n    Counter(){\n        i = 7;\n    }\n}\n1\n2\n3\n4\n5\n6\n7\n5.5 对象的创建过程\n  假设有个名为Dog的类：\n\n静态方法或域。当首次创建类对象时（构造器可以看成静态方法，但不是）或类的静态方法/静态域首次被访问时，Java解释器必须查找类路径，以定位Dog.class文件；\n载入Dog.class，执行静态初始化的所有动作，且只执行这一次；\n当调用new Dog()时，首先将在堆上分配存储空间；\n存储空间清零。所以成员变量会置成0或null；\n执行所有出现于字段定义处的初始化动作。\n执行构造器。\n5.6 数组初始化\n  可以将Java中的数组作为一种数组类型来理解。\n\n如 int[] a; 可以认为是 a 是一个数组引用，初始值为null\n初始化： \nint[] a = new int[3]; 初始化各元素值为0，对于boolean，初始值为false;\nint[] a = {1, 2, 3}; 初始化元素分别为1, 2, 3;"]],[119,119],[2345,2345]]],[1562593249893,["GJX@GJXAIOU",[[-1,121,"1"]],[122,122],[121,121]]],[1562593250196,["GJX@GJXAIOU",[[1,121,"2"]],[121,121],[122,122]]],[1562593252254,["GJX@GJXAIOU",[[1,119,"## "]],[119,119],[150,150]]],[1562593295203,["GJX@GJXAIOU",[[-1,112,"使用"]],[114,114],[112,112]]],[1562593296645,["GJX@GJXAIOU",[[1,112,"提供"]],[112,112],[114,114]]],[1562593342021,["GJX@GJXAIOU",[[1,114,"构造器，类的设计者可以确保每个对象都会得到初始化；，"]],[114,114],[140,140]]],[1562593342486,["GJX@GJXAIOU",[[-1,139,"，"]],[140,140],[139,139]]],[1562593349263,["GJX@GJXAIOU",[[1,139,"因为构造器会自动调研的"]],[139,139],[150,150]]],[1562593350499,["GJX@GJXAIOU",[[-1,147,"调研的"]],[150,150],[147,147]]],[1562593355022,["GJX@GJXAIOU",[[1,147,"调用的；"]],[147,147],[151,151]]],[1562593394285,["GJX@GJXAIOU",[[1,152,"- Java总"]],[152,152],[159,159]]],[1562593394312,["GJX@GJXAIOU",[[1,158," "]],[159,159],[160,160]]],[1562593394987,["GJX@GJXAIOU",[[-1,159,"总"]],[160,160],[159,159]]],[1562593401062,["GJX@GJXAIOU",[[1,159,"中“初始化”he "]],[159,159],[168,168]]],[1562593401852,["GJX@GJXAIOU",[[-1,165,"he "]],[168,168],[165,165]]],[1562593408720,["GJX@GJXAIOU",[[1,165,"和“创建”k"]],[165,165],[171,171]]],[1562593409507,["GJX@GJXAIOU",[[-1,170,"k"]],[171,171],[170,170]]],[1562593410293,["GJX@GJXAIOU",[[1,170,"Kun"]],[170,170],[173,173]]],[1562593410876,["GJX@GJXAIOU",[[-1,170,"Kun"]],[173,173],[170,170]]],[1562593419705,["GJX@GJXAIOU",[[1,170,"捆绑在一起，不可分离；"]],[170,170],[181,181]]],[1562593429094,["GJX@GJXAIOU",[[1,182,"- \n"]],[181,181],[184,184]]],[1562593442382,["GJX@GJXAIOU",[[1,184,"构造器没有返回值，不是返回值为空9"]],[184,184],[201,201]]],[1562593442409,["GJX@GJXAIOU",[[1,200," "]],[201,201],[202,202]]],[1562593442428,["GJX@GJXAIOU",[[1,202,"0"]],[202,202],[203,203]]],[1562593443565,["GJX@GJXAIOU",[[-1,201,"90"]],[203,203],[201,201]]],[1562593444567,["GJX@GJXAIOU",[[1,201,"()"]],[201,201],[203,203]]],[1562593446509,["GJX@GJXAIOU",[[1,202,"vois"]],[202,202],[206,206]]],[1562593447147,["GJX@GJXAIOU",[[-1,205,"s"]],[206,206],[205,205]]],[1562593447293,["GJX@GJXAIOU",[[1,205,"d"]],[205,205],[206,206]]],[1562593470265,["GJX@GJXAIOU",[[1,207,",new表达式"]],[207,207],[214,214]]],[1562593470293,["GJX@GJXAIOU",[[1,211," "]],[214,214],[215,215]]],[1562593478774,["GJX@GJXAIOU",[[1,215,"确实返回类随"]],[215,215],[221,221]]],[1562593480788,["GJX@GJXAIOU",[[-1,219,"类随"]],[221,221],[219,219]]],[1562593487189,["GJX@GJXAIOU",[[1,219,"了对新建对象"]],[219,219],[225,225]]],[1562593499661,["GJX@GJXAIOU",[[1,225,"的引用，但是构造器本身没有返回任何职"]],[225,225],[243,243]]],[1562593500237,["GJX@GJXAIOU",[[-1,242,"职"]],[243,243],[242,242]]],[1562593501528,["GJX@GJXAIOU",[[1,242,"值；"]],[242,242],[244,244]]],[1562593561148,["GJX@GJXAIOU",[[1,368,"* "],[1,385,"* "],[1,413,"* "],[1,452,"* "]],[368,485],[370,493]]],[1562593582333,["GJX@GJXAIOU",[[1,524,"* \n"]],[523,523],[526,526]]],[1562593583110,["GJX@GJXAIOU",[[-1,524,"* "]],[526,526],[524,524]]],[1562593584605,["GJX@GJXAIOU",[[1,524,"```"]],[524,524],[527,527]]],[1562593584633,["GJX@GJXAIOU",[[1,527,"language\n```\n"]],[527,527],[527,535]]],[1562593585863,["GJX@GJXAIOU",[[-1,527,"language"],[1,535,"j"]],[527,535],[528,528]]],[1562593586284,["GJX@GJXAIOU",[[1,528,"ava"]],[528,528],[531,531]]],[1562593586395,["GJX@GJXAIOU",[[1,532,"\n"]],[531,531],[532,532]]],[1562593589390,["GJX@GJXAIOU",[[-1,533,"```"]],[533,536],[533,533]]],[1562593592502,["GJX@GJXAIOU",[[1,694,"3. \n"]],[693,693],[697,697]]],[1562593592895,["GJX@GJXAIOU",[[1,697,"```"]],[697,697],[700,700]]],[1562593596620,["GJX@GJXAIOU",[[-1,694,"3. "]],[694,696],[694,694]]],[1562593599588,["GJX@GJXAIOU",[[-1,534,"\n"]],[534,534],[533,533]]],[1562593599708,["GJX@GJXAIOU",[[-1,533,"\n"]],[533,533],[532,532]]],[1562593599862,["GJX@GJXAIOU",[[-1,532,"\n"]],[532,532],[531,531]]],[1562593624204,["GJX@GJXAIOU",[[1,366,"danshi "]],[366,366],[373,373]]],[1562593625486,["GJX@GJXAIOU",[[-1,366,"danshi "]],[373,373],[366,366]]],[1562593641128,["GJX@GJXAIOU",[[1,366,"但是一般不使用参数的顺序不同来区分；"]],[366,366],[384,384]]],[1562593667939,["GJX@GJXAIOU",[[1,713,"\n"]],[712,712],[713,713]]],[1562593668067,["GJX@GJXAIOU",[[1,714,"\n"]],[713,713],[714,714]]],[1562593668220,["GJX@GJXAIOU",[[1,715,"\n"]],[714,714],[715,715]]],[1562593668307,["GJX@GJXAIOU",[[1,716,"\n"]],[715,715],[716,716]]],[1562593668437,["GJX@GJXAIOU",[[1,717,"\n"]],[716,716],[717,717]]],[1562593668550,["GJX@GJXAIOU",[[1,718,"\n"]],[717,717],[718,718]]],[1562593668678,["GJX@GJXAIOU",[[1,719,"\n"]],[718,718],[719,719]]],[1562593682494,["GJX@GJXAIOU",[[1,714,"### 5.2.2 涉及基本类型的重载"]],[714,714],[733,733]]],[1562593684212,["GJX@GJXAIOU",[[1,739,"\n"]],[733,733],[734,734]]],[1562593748510,["GJX@GJXAIOU",[[1,734,"基本数据类型会从一个较小的类型，在佛那个"]],[734,734],[754,754]]],[1562593749915,["GJX@GJXAIOU",[[-1,750,"在佛那个"]],[754,754],[750,750]]],[1562593758678,["GJX@GJXAIOU",[[1,750,"自动的提升到较大的类型；"]],[750,750],[762,762]]],[1562593765719,["GJX@GJXAIOU",[[1,768,"\n"]],[762,762],[763,763]]],[1562593768144,["GJX@GJXAIOU",[[1,763,"原则："]],[763,763],[766,766]]],[1562593768456,["GJX@GJXAIOU",[[1,772,"\n"]],[766,766],[767,767]]],[1562593774600,["GJX@GJXAIOU",[[1,767,"- 统一"]],[767,767],[771,771]]],[1562593775342,["GJX@GJXAIOU",[[-1,769,"统一"]],[771,771],[769,769]]],[1562593781712,["GJX@GJXAIOU",[[1,769,"同一类型的邮箱"]],[769,769],[776,776]]],[1562593782771,["GJX@GJXAIOU",[[-1,774,"邮箱"]],[776,776],[774,774]]],[1562593787120,["GJX@GJXAIOU",[[1,774,"优先"]],[774,774],[776,776]]],[1562593825351,["GJX@GJXAIOU",[[1,776,"匹配，没有同一类型，按照执行顺序向上提升；"]],[776,776],[797,797]]],[1562594020468,["GJX@GJXAIOU",[[-1,788,"执行"]],[788,790],[788,788]]],[1562594022517,["GJX@GJXAIOU",[[1,788,"****"]],[788,788],[790,790]]],[1562594024983,["GJX@GJXAIOU",[[1,790,"一级一级"]],[790,790],[794,794]]],[1562594033251,["GJX@GJXAIOU",[[1,803,"char - ><"]],[803,803],[812,812]]],[1562594036067,["GJX@GJXAIOU",[[-1,803,"char - ><"]],[812,812],[803,803]]],[1562594038196,["GJX@GJXAIOU",[[1,803,"chae"]],[803,803],[807,807]]],[1562594038900,["GJX@GJXAIOU",[[-1,806,"e"]],[807,807],[806,806]]],[1562594040031,["GJX@GJXAIOU",[[1,806,"a"]],[806,806],[807,807]]],[1562594040604,["GJX@GJXAIOU",[[-1,806,"a"]],[807,807],[806,806]]],[1562594041828,["GJX@GJXAIOU",[[1,806,"r/int"]],[806,806],[811,811]]],[1562594043235,["GJX@GJXAIOU",[[-1,807,"/int"]],[811,811],[807,807]]],[1562594045292,["GJX@GJXAIOU",[[1,807,"、int/"]],[807,807],[812,812]]],[1562594045955,["GJX@GJXAIOU",[[-1,811,"/"]],[812,812],[811,811]]],[1562594046392,["GJX@GJXAIOU",[[1,811,"、"]],[811,811],[812,812]]],[1562594047555,["GJX@GJXAIOU",[[-1,811,"、"]],[812,812],[811,811]]],[1562594048444,["GJX@GJXAIOU",[[1,811,"/"]],[811,811],[812,812]]],[1562594049203,["GJX@GJXAIOU",[[-1,811,"/"]],[812,812],[811,811]]],[1562594056596,["GJX@GJXAIOU",[[1,811,"、fol"]],[811,811],[815,815]]],[1562594057669,["GJX@GJXAIOU",[[-1,813,"ol"]],[815,815],[813,813]]],[1562594058095,["GJX@GJXAIOU",[[1,813,"la"]],[813,813],[815,815]]],[1562594058851,["GJX@GJXAIOU",[[-1,814,"a"]],[815,815],[814,814]]],[1562594059885,["GJX@GJXAIOU",[[1,814,"aot"]],[814,814],[817,817]]],[1562594060603,["GJX@GJXAIOU",[[-1,814,"aot"]],[817,817],[814,814]]],[1562594062048,["GJX@GJXAIOU",[[1,814,"oat/"]],[814,814],[818,818]]],[1562594062718,["GJX@GJXAIOU",[[-1,817,"/"]],[818,818],[817,817]]],[1562594064284,["GJX@GJXAIOU",[[1,817,"、f"]],[817,817],[819,819]]],[1562594064670,["GJX@GJXAIOU",[[-1,818,"f"]],[819,819],[818,818]]],[1562594066148,["GJX@GJXAIOU",[[1,818,"doubel"]],[818,818],[824,824]]],[1562594066892,["GJX@GJXAIOU",[[-1,822,"el"]],[824,824],[822,822]]],[1562594073985,["GJX@GJXAIOU",[[1,822,"le；逐级上升；"]],[822,822],[830,830]]],[1562594075099,["GJX@GJXAIOU",[[1,831,"- \n"]],[830,830],[833,833]]],[1562594126333,["GJX@GJXAIOU",[[1,833,"如果传入的实际参数过大，必须先进行类型转换来窄化转换；"]],[833,833],[860,860]]],[1562594146739,["GJX@GJXAIOU",[[-1,865,"\n"]],[863,863],[862,862]]],[1562594146884,["GJX@GJXAIOU",[[-1,864,"\n"]],[862,862],[861,861]]],[1562594147029,["GJX@GJXAIOU",[[-1,863,"\n"]],[861,861],[860,860]]],[1562594228396,["GJX@GJXAIOU",[[1,863,"## "]],[863,863],[878,878]]],[1562594231454,["GJX@GJXAIOU",[[-1,868,"2"]],[869,869],[868,868]]],[1562594232004,["GJX@GJXAIOU",[[1,868,"4"]],[868,868],[869,869]]],[1562594234659,["GJX@GJXAIOU",[[1,924,"\n"]],[924,924],[925,925]]],[1562594236588,["GJX@GJXAIOU",[[1,925,"## "]],[925,925],[944,944]]],[1562594243291,["GJX@GJXAIOU",[[-1,930,"3"]],[931,931],[930,930]]],[1562594243820,["GJX@GJXAIOU",[[1,930,"5"]],[930,930],[931,931]]],[1562594246861,["GJX@GJXAIOU",[[-1,947,"3"]],[948,948],[947,947]]],[1562594247316,["GJX@GJXAIOU",[[1,947,"5"]],[947,947],[948,948]]],[1562594249333,["GJX@GJXAIOU",[[1,945,"### "]],[945,945],[965,965]]],[1562594260709,["GJX@GJXAIOU",[[1,966,"* "],[1,995,"* "],[1,1022,"* "],[1,1066,"* "],[1,1077,"* "],[1,1090,"* "],[1,1166,"* "]],[966,1242],[968,1256]]],[1562594269515,["GJX@GJXAIOU",[[1,1072,"  "],[1,1085,"  "]],[1073,1098],[1075,1102]]],[1562594273956,["GJX@GJXAIOU",[[1,1261,"### "]],[1261,1261],[1285,1285]]],[1562594277342,["GJX@GJXAIOU",[[-1,1267,"3"]],[1268,1268],[1267,1267]]],[1562594277784,["GJX@GJXAIOU",[[1,1267,"5"]],[1267,1267],[1268,1268]]],[1562594282141,["GJX@GJXAIOU",[[1,1261,"* \n"]],[1260,1260],[1263,1263]]],[1562594283179,["GJX@GJXAIOU",[[-1,1262," "]],[1263,1263],[1262,1262]]],[1562594292900,["GJX@GJXAIOU",[[1,1472,"      "]],[1472,1472],[1478,1478]]],[1562594296415,["GJX@GJXAIOU",[[1,1472,"···"]],[1472,1472],[1475,1475]]],[1562594297883,["GJX@GJXAIOU",[[-1,1472,"···"]],[1475,1475],[1472,1472]]],[1562594298988,["GJX@GJXAIOU",[[1,1472,"```"]],[1472,1472],[1475,1475]]],[1562594299016,["GJX@GJXAIOU",[[1,1475,"language\n```\n"]],[1475,1475],[1475,1483]]],[1562594300064,["GJX@GJXAIOU",[[-1,1475,"language"],[1,1483,"j"]],[1475,1483],[1476,1476]]],[1562594300460,["GJX@GJXAIOU",[[1,1476,"ava"]],[1476,1476],[1479,1479]]],[1562594300536,["GJX@GJXAIOU",[[1,1480,"\n"]],[1479,1479],[1480,1480]]],[1562594303254,["GJX@GJXAIOU",[[-1,1481,"```\n"]],[1480,1484],[1480,1480]]],[1562594304876,["GJX@GJXAIOU",[[1,1593,"```\n"]],[1592,1592],[1596,1596]]],[1562594306659,["GJX@GJXAIOU",[[-1,1485,"  "]],[1483,1483],[1481,1481]]],[1562594307045,["GJX@GJXAIOU",[[-1,1480,"\n"]],[1481,1481],[1480,1480]]],[1562594307411,["GJX@GJXAIOU",[[-1,1479,"\n"]],[1480,1480],[1479,1479]]],[1562594308299,["GJX@GJXAIOU",[[-1,1588,"\n"]],[1588,1588],[1587,1587]]],[1562594310540,["GJX@GJXAIOU",[[1,1482,"\n"]],[1482,1482],[1483,1483]]],[1562594312015,["GJX@GJXAIOU",[[-1,1483," "]],[1484,1484],[1483,1483]]],[1562594312580,["GJX@GJXAIOU",[[-1,1483,"\n"]],[1483,1483],[1482,1482]]],[1562594313733,["GJX@GJXAIOU",[[-1,1586,"\n"]],[1587,1587],[1586,1586]]],[1562594314803,["GJX@GJXAIOU",[[1,1586,"\n"]],[1586,1586],[1587,1587]]],[1562594316686,["GJX@GJXAIOU",[[-1,1471,"\n"]],[1472,1472],[1471,1471]]],[1562594317923,["GJX@GJXAIOU",[[1,1471,"\n  "]],[1471,1471],[1474,1474]]],[1562594319299,["GJX@GJXAIOU",[[-1,1472,"  "]],[1474,1474],[1472,1472]]],[1562594322300,["GJX@GJXAIOU",[[1,1472,"  \n"]],[1471,1471],[1474,1474]]],[1562594333980,["GJX@GJXAIOU",[[1,1594,"## "]],[1594,1594],[1606,1606]]],[1562594370806,["GJX@GJXAIOU",[[1,923,"diaoyo"]],[923,923],[929,929]]],[1562594372174,["GJX@GJXAIOU",[[-1,923,"diaoyo"]],[929,929],[923,923]]],[1562594386647,["GJX@GJXAIOU",[[1,923,"在方法内部调用同一个类的另一个方法，"]],[923,923],[941,941]]],[1562594390801,["GJX@GJXAIOU",[[1,941,"不必使用this"]],[941,941],[949,949]]],[1562594390836,["GJX@GJXAIOU",[[1,945," "]],[949,949],[950,950]]],[1562594391112,["GJX@GJXAIOU",[[1,950,"；"]],[950,950],[951,951]]],[1562594459276,["GJX@GJXAIOU",[[1,952,"  \n"]],[951,951],[954,954]]],[1562594462031,["GJX@GJXAIOU",[[1,954,"示例："]],[954,954],[957,957]]],[1562594462390,["GJX@GJXAIOU",[[1,958,"  \n"]],[957,957],[960,960]]],[1562594463259,["GJX@GJXAIOU",[[-1,958,"  "]],[960,960],[958,958]]],[1562594463373,["GJX@GJXAIOU",[[-1,959,"\n"]],[958,958],[957,957]]],[1562594466030,["GJX@GJXAIOU",[[-1,952,"  "]],[954,954],[952,952]]],[1562594468915,["GJX@GJXAIOU",[[1,952,"\n"]],[952,952],[953,953]]],[1562594472048,["GJX@GJXAIOU",[[1,957,"···"]],[957,957],[960,960]]],[1562594473078,["GJX@GJXAIOU",[[-1,957,"···"]],[960,960],[957,957]]],[1562594475532,["GJX@GJXAIOU",[[1,957,"```java"]],[957,957],[964,964]]],[1562594475588,["GJX@GJXAIOU",[[1,965,"\n"]],[964,964],[965,965]]],[1562594476364,["GJX@GJXAIOU",[[1,966,"\n"]],[965,965],[966,966]]],[1562594477246,["GJX@GJXAIOU",[[1,966,"```"]],[966,966],[969,969]]],[1562594745771,["GJX@GJXAIOU",[[1,965,"public class Leaf{\n    int i = 0 ;\n    Leaf increment(){\n        i++;\n        return this;  //返回当前对象的引用\n    }\n\n    void print(){\n        System.out.println( \" i \" + i);\n    }\n\n    public static void main(String[] args) {\n        Leaf leaf = new Leaf();\n        x.increment().increment().increment().print();\n    }\n}\n//Output :  i = 3"]],[965,965],[1298,1298]]],[1562594751427,["GJX@GJXAIOU",[[1,1303,"\n"]],[1302,1302],[1303,1303]]],[1562594815845,["GJX@GJXAIOU",[[1,1304,"\n"]],[1303,1303],[1304,1304]]],[1562594815981,["GJX@GJXAIOU",[[1,1305,"\n"]],[1304,1304],[1305,1305]]],[1562594816111,["GJX@GJXAIOU",[[1,1306,"\n"]],[1305,1305],[1306,1306]]],[1562594816228,["GJX@GJXAIOU",[[1,1307,"\n"]],[1306,1306],[1307,1307]]],[1562594816381,["GJX@GJXAIOU",[[1,1308,"\n"]],[1307,1307],[1308,1308]]],[1562594816487,["GJX@GJXAIOU",[[1,1309,"\n"]],[1308,1308],[1309,1309]]],[1562594824850,["GJX@GJXAIOU",[[1,1304,"### 5.4.1 在"]],[1304,1304],[1315,1315]]],[1562594825520,["GJX@GJXAIOU",[[-1,1314,"在"]],[1315,1315],[1314,1314]]],[1562594826852,["GJX@GJXAIOU",[[1,1314,"**在构造器中调用构造器**\n\nthis是指“这个对象”或者“当前对象”，而且它本身表示对当前对象的引用；在构造器中，如果为this添加了参数列表，那么就有了不同的含义，这将产生**对符合此参数列表的某个构造器的调用**\n\n```java\npublic class Flower {\n    int petalCount = 0;\n    String s = \"initial value\";\n    Flower(int petals) {\n        petalCount = petals;\n        System.out.println(\"Constructor with int arg only\");\n    }\n    Flower(String s, int petals) {\n        this(petals);//call constructor <Flower(int petals)>\n        //! this(s);//can't call two\n        this.s = s;\n        System.out.println(\"Constructor with int & String args\");\n    }\n    Flower() {\n        this(\"hi\", 47);\n        System.out.println(\"Default constructor with no arg\");\n    }\n}\n```\n\n可以用this调用一个构造器，但是不能同时调用两个，而且必须**将构造器调用放在最开始位置**"]],[1314,1314],[2020,2020]]],[1562594829940,["GJX@GJXAIOU",[[-1,1314,"**"]],[1316,1316],[1314,1314]]],[1562594832933,["GJX@GJXAIOU",[[-1,1324,"**"]],[1326,1326],[1324,1324]]],[1562594877095,["GJX@GJXAIOU",[[1,2022,"\n"]],[2016,2016],[2017,2017]]],[1562594879900,["GJX@GJXAIOU",[[1,2017,"****"]],[2017,2017],[2019,2019]]],[1562594895839,["GJX@GJXAIOU",[[1,2019,"除了构造器之外，编译器禁止在其他任何"]],[2019,2019],[2037,2037]]],[1562594900219,["GJX@GJXAIOU",[[-1,2032,"在其他任何"]],[2037,2037],[2032,2032]]],[1562594911478,["GJX@GJXAIOU",[[1,2032,"其他任何方法中调用构造器；"]],[2032,2032],[2045,2045]]],[1562594942667,["GJX@GJXAIOU",[[1,2073,"\n"]],[2072,2072],[2073,2073]]],[1562594943003,["GJX@GJXAIOU",[[1,2074,"\n"]],[2073,2073],[2074,2074]]],[1562594943228,["GJX@GJXAIOU",[[1,2075,"\n"]],[2074,2074],[2075,2075]]],[1562594943363,["GJX@GJXAIOU",[[1,2076,"\n"]],[2075,2075],[2076,2076]]],[1562594974097,["GJX@GJXAIOU",[[1,2074,"垃圾回收器只知道释放经由new"]],[2074,2074],[2089,2089]]],[1562594974128,["GJX@GJXAIOU",[[1,2086," "]],[2089,2089],[2090,2090]]],[1562594976065,["GJX@GJXAIOU",[[1,2090,"分配"]],[2090,2090],[2092,2092]]],[1562594976096,["GJX@GJXAIOU",[[1,2090," "]],[2092,2092],[2093,2093]]],[1562594977792,["GJX@GJXAIOU",[[1,2093,"的内存；"]],[2093,2093],[2097,2097]]],[1562595001406,["GJX@GJXAIOU",[[1,2259,"  * \n"]],[2258,2258],[2263,2263]]],[1562595018134,["GJX@GJXAIOU",[[1,2263,"垃圾回收只与内存有关；"]],[2263,2263],[2274,2274]]],[1562595018916,["GJX@GJXAIOU",[[-1,2274,"\n"]],[2274,2274],[2274,2274]]],[1562595020095,["GJX@GJXAIOU",[[1,2274,"\n  "]],[2274,2274],[2277,2277]]],[1562595022323,["GJX@GJXAIOU",[[-1,2275,"  "]],[2277,2277],[2275,2275]]],[1562595046807,["GJX@GJXAIOU",[[1,2274,"使用垃圾回收器的唯一原因是为了"]],[2274,2274],[2289,2289]]],[1562595057770,["GJX@GJXAIOU",[[1,2289,"回收程序不在使用的内存；"]],[2289,2289],[2301,2301]]],[1562595086580,["GJX@GJXAIOU",[[1,2673,"  \n"]],[2669,2669],[2672,2672]]],[1562595089549,["GJX@GJXAIOU",[[-1,2486,"  "]],[2488,2488],[2486,2486]]],[1562595089660,["GJX@GJXAIOU",[[-1,2485,"\n"]],[2486,2486],[2485,2485]]],[1562595091047,["GJX@GJXAIOU",[[1,2485,"\n"]],[2485,2485],[2486,2486]]],[1562595096406,["GJX@GJXAIOU",[[-1,2629,"  "]],[2631,2631],[2629,2629]]],[1562595096534,["GJX@GJXAIOU",[[-1,2628,"\n"]],[2629,2629],[2628,2628]]],[1562595097767,["GJX@GJXAIOU",[[1,2628,"\n"]],[2628,2628],[2629,2629]]],[1562595101491,["GJX@GJXAIOU",[[1,2486,"* "],[1,2629,"* "]],[2486,2665],[2488,2669]]],[1562595104051,["GJX@GJXAIOU",[[1,2633,"\n* "]],[2630,2630],[2633,2633]]],[1562595116366,["GJX@GJXAIOU",[[1,2633,"JVM未"]],[2633,2633],[2637,2637]]],[1562595116398,["GJX@GJXAIOU",[[1,2636," "]],[2637,2637],[2638,2638]]],[1562595157473,["GJX@GJXAIOU",[[1,2638,"面临内存耗尽的情况下，不会浪费时间去执行垃圾回收以回复内存的；"]],[2638,2638],[2669,2669]]],[1562595162087,["GJX@GJXAIOU",[[-1,2663,"回复"]],[2665,2665],[2663,2663]]],[1562595164478,["GJX@GJXAIOU",[[1,2663,"恢复"]],[2663,2663],[2665,2665]]]],null,"GJX@GJXAIOU"],["fe66c665-92eb-4ab5-b58a-41bc6d708981",1562646643826,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-8'\n---\n# 第五章：初始化与清理\n\n## 5.1 用构造器确保初始化\n\n- 通过提供构造器，类的设计者可以确保每个对象都会得到初始化；因为构造器会自动调用的；\n- Java 中“初始化”和“创建”捆绑在一起，不可分离；\n- 构造器没有返回值，不是返回值为空 (void),new 表达式确实返回了对新建对象的引用，但是构造器本身没有返回任何值；\n\n\n\n## 5.2 方法重载（method overloading）\n  重载方法，方法名相同，形式参数列表不同（参数列表又叫参数签名，包括参数的类型、参数的个数和参数的顺序，只要有一个不同就叫做参数列表不同）。重载是面向对象的一个基本特性。但是一般不使用参数的顺序不同来区分；\n\n* 声明为final的方法不能被重载\n* 声明为static的方法不能重载，但是能够被再次声明。\n* 重载方法的返回类型可以相同也可以不同，但仅返回类型不同不足以成为方法的重载。\n* 编译器根据调用方法的签名逐个匹配，以选择对应方法的过程叫做重载分辨（Overload Resolution，或叫重载决议）。 \n```java\n1. 《深入理解Java虚拟机》：虚拟机（准确地说是编译器）在重载时是通过参数的静态类型（Static Type ）或叫外观类型（Apparent Type）而不是实际类型（Actual Type）作为判定依据的。 \n2. 《深入理解Java虚拟机》：编译期间选择静态分派目标的过程是Java语言实现方法重载的本质。\n```\n\n### 5.2.2 涉及基本类型的重载\n基本数据类型会从一个较小的类型，自动的提升到较大的类型；\n原则：\n- 同一类型的优先匹配，没有同一类型，按照**一级一级**顺序向上提升；char、int、float、double；逐级上升；\n- 如果传入的实际参数过大，必须先进行类型转换来窄化转换；\n\n\n## 5.4 this 关键字\n  `this` 关键字只能在方法内部使用，表示对“**调用方法的那个对象**”的引用。在方法内部调用同一个类的另一个方法，不必使用 this；\n\n示例：\n```java\npublic class Leaf{\n    int i = 0 ;\n    Leaf increment(){\n        i++;\n        return this;  //返回当前对象的引用\n    }\n\n    void print(){\n        System.out.println( \" i \" + i);\n    }\n\n    public static void main(String[] args) {\n        Leaf leaf = new Leaf();\n        x.increment().increment().increment().print();\n    }\n}\n//Output :  i = 3\n```\n\n### 5.4.1 在构造器中调用构造器\n\nthis是指“这个对象”或者“当前对象”，而且它本身表示对当前对象的引用；在构造器中，如果为this添加了参数列表，那么就有了不同的含义，这将产生**对符合此参数列表的某个构造器的调用**\n\n```java\npublic class Flower {\n    int petalCount = 0;\n    String s = \"initial value\";\n    Flower(int petals) {\n        petalCount = petals;\n        System.out.println(\"Constructor with int arg only\");\n    }\n    Flower(String s, int petals) {\n        this(petals);//call constructor <Flower(int petals)>\n        //! this(s);//can't call two\n        this.s = s;\n        System.out.println(\"Constructor with int & String args\");\n    }\n    Flower() {\n        this(\"hi\", 47);\n        System.out.println(\"Default constructor with no arg\");\n    }\n}\n```\n\n可以用this调用一个构造器，但是不能同时调用两个，而且必须**将构造器调用放在最开始位置**\n**除了构造器之外，编译器禁止其他任何方法中调用构造器；**\n\n\n\n\n\n## 5.5 清理：终结处理和垃圾回收\n\n垃圾回收器只知道释放经由 new 分配的内存；\n\n\n### 5.5.1 finalize()\n* Java中的finalize()不等于C++中的析构函数\n* 当发生“垃圾回收”时，finalize()才得到调用\n* Java里的对象并非总是被垃圾回收（因为Java的“垃圾回收”并不能保证一定会发生） \n  * 对象可能不被垃圾回收\n  * 垃圾回收并不等于“析构”\n  * 垃圾回收只与内存有关；使用垃圾回收器的唯一原因是为了回收程序不在使用的内存；\n* Java并未提供“析构函数”或相似的概念，Java的“垃圾回收”不保证一定会发生，所以要做类似的清理工作，必须自己动手创建一个执行清理工作的普通方法。\n* 只要程序没有濒临存储空间用完的那一刻，垃圾回收可能就会一直没有发生。这个策略是恰当的，因为垃圾回收本身也有开销，要是不使用它，那就不用支付这部分开销了。\n*\n### 5.5.2 finalize()用途何在\n* 由于垃圾回收器会负责释放对象占据的所有内存，这就将finalize()的需求限制到一种特殊情况，即通过某种创建对象方式以外的方式为对象分配了存储空间。由于Java中一切皆为对象，所以那种特殊情况主要发生在使用“本地方法”的情况下，本地方法是一种在Java中调用非Java代码的方式。 \n* JVM 未面临内存耗尽的情况下，不会浪费时间去执行垃圾回收以恢复内存的；\n* 不要过多地使用finalize()，它不是进行普通的清理工作的合适场所。\n  \n  \n```java   \nJoshua Bloch在题为“避免使用终结函数”一节中走得更远，他提到：“终结无法预料，常常是危险的，总之是多余的。”《Effective Java》，第20页，（Addison-Wesley 2001）\n```\n## 5.4 成员初始化\n  Java尽力保证：所有变量在使用前都能得到恰当的初始化。\n\n对于方法的局部变量，如果使用前没有初始化，Java以编译时错误（注意，如果方法内的局部变量未被使用，将不会编译错误）的形式来贯彻这种保证。\n对于类的成员变量：\n\n成员变量是基本类型，Java会自动初始化初值0；\n成员变量是引用类型，Java会自动初始化初值null;\n// InitialValues.java\npublic class InitialValues{\n    int j;\n    char c;\n    MyClass mc;\n    public static void main(String[] args){\n        int i;\n        //i++; // Error -- i not initialized\n        InitialValues obj = new InitialValues();\n        System.out.println(obj.c);\n        System.out.println(obj.j);\n        System.out.println(obj.mc);\n    }\n}\nclass MyClass{}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n无法阻止自动初始化的进行，它将在构造器被调用之前发生,如下，i首先会被置0，然后变成7。\n// Counter.java\npublic class Counter{\n    int i;\n    Counter(){\n        i = 7;\n    }\n}\n1\n2\n3\n4\n5\n6\n7\n5.5 对象的创建过程\n  假设有个名为Dog的类：\n\n静态方法或域。当首次创建类对象时（构造器可以看成静态方法，但不是）或类的静态方法/静态域首次被访问时，Java解释器必须查找类路径，以定位Dog.class文件；\n载入Dog.class，执行静态初始化的所有动作，且只执行这一次；\n当调用new Dog()时，首先将在堆上分配存储空间；\n存储空间清零。所以成员变量会置成0或null；\n执行所有出现于字段定义处的初始化动作。\n执行构造器。\n5.6 数组初始化\n  可以将Java中的数组作为一种数组类型来理解。\n\n如 int[] a; 可以认为是 a 是一个数组引用，初始值为null\n初始化： \nint[] a = new int[3]; 初始化各元素值为0，对于boolean，初始值为false;\nint[] a = {1, 2, 3}; 初始化元素分别为1, 2, 3;\n",[[1562646599541,["GJX@GJXAIOU",[[-1,2839,"4"]],[2840,2840],[2839,2839]]],[1562646600629,["GJX@GJXAIOU",[[1,2839,"6"]],[2839,2839],[2840,2840]]],[1562646608883,["GJX@GJXAIOU",[[-1,2711,"\n"]],[2712,2712],[2711,2711]]],[1562646609803,["GJX@GJXAIOU",[[-1,2711,"  "]],[2711,2711],[2709,2709]]],[1562646610180,["GJX@GJXAIOU",[[-1,2708,"\n"]],[2709,2709],[2708,2708]]],[1562646612675,["GJX@GJXAIOU",[[-1,2710,"\n"]],[2711,2711],[2710,2710]]],[1562646616788,["GJX@GJXAIOU",[[-1,2824,"\n"]],[2825,2825],[2824,2824]]],[1562646617956,["GJX@GJXAIOU",[[1,2824,"\n"]],[2824,2824],[2825,2825]]],[1562646620835,["GJX@GJXAIOU",[[1,2710,"\n"]],[2710,2710],[2711,2711]]],[1562646626253,["GJX@GJXAIOU",[[-1,2711,"```java   "],[1,2721,"·"]],[2711,2711],[2712,2712]]],[1562646626608,["GJX@GJXAIOU",[[1,2712,"··"]],[2712,2712],[2714,2714]]],[1562646627491,["GJX@GJXAIOU",[[-1,2711,"···"]],[2714,2714],[2711,2711]]],[1562646630091,["GJX@GJXAIOU",[[1,2711,"```jas"]],[2711,2711],[2717,2717]]],[1562646630782,["GJX@GJXAIOU",[[-1,2716,"s"]],[2717,2717],[2716,2716]]],[1562646631285,["GJX@GJXAIOU",[[1,2716,"va"]],[2716,2716],[2718,2718]]],[1562646634324,["GJX@GJXAIOU",[[1,2827,"\n"]],[2826,2826],[2827,2827]]],[1562646634460,["GJX@GJXAIOU",[[1,2828,"\n"]],[2827,2827],[2828,2828]]],[1562646634611,["GJX@GJXAIOU",[[1,2829,"\n"]],[2828,2828],[2829,2829]]],[1562646635782,["GJX@GJXAIOU",[[1,2830,"\n"]],[2829,2829],[2830,2830]]],[1562646635884,["GJX@GJXAIOU",[[1,2831,"\n"]],[2830,2830],[2831,2831]]],[1562646641958,["GJX@GJXAIOU",[[1,2829,"### 5.5.4 "]],[2829,2829],[2839,2839]]],[1562646644181,["GJX@GJXAIOU",[[1,2841,"ji"]],[2841,2841],[2843,2843]]],[1562646644907,["GJX@GJXAIOU",[[-1,2839,"laji"]],[2843,2843],[2839,2839]]],[1562646651690,["GJX@GJXAIOU",[[1,2839,"垃圾回收器如何工作"]],[2839,2839],[2848,2848]]],[1562646652267,["GJX@GJXAIOU",[[1,2851,"\n"]],[2848,2848],[2849,2849]]],[1562646667817,["GJX@GJXAIOU",[[1,2849,"- Java从"]],[2849,2849],[2856,2856]]],[1562646667846,["GJX@GJXAIOU",[[1,2855," "]],[2856,2856],[2857,2857]]],[1562646692238,["GJX@GJXAIOU",[[1,2857,"堆中分配空间的速度可以和其他语言从堆栈上分配空间的速度相媲美；"]],[2857,2857],[2888,2888]]],[1562646692599,["GJX@GJXAIOU",[[1,2889,"- \n"]],[2888,2888],[2891,2891]]],[1562646762777,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2892,"#"],[1,2894,"\n##"]],[2888,2888],[2897,2897]]],[1562646762777,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2892,"#"],[-1,2893,"\n##"]],[2897,2897],[2888,2888]]],[1562646704995,["GJX@GJXAIOU",[[-1,2889,"- "]],[2891,2891],[2890,2890]]],[1562646707163,["GJX@GJXAIOU",[[1,2890,"****"]],[2890,2890],[2892,2892]]],[1562646710456,["GJX@GJXAIOU",[[1,2892,"垃圾会说"]],[2892,2892],[2896,2896]]],[1562646711524,["GJX@GJXAIOU",[[-1,2894,"会说"]],[2896,2896],[2894,2894]]],[1562646714311,["GJX@GJXAIOU",[[1,2894,"回收技术："]],[2894,2894],[2899,2899]]],[1562646716407,["GJX@GJXAIOU",[[1,2903,"\n"]],[2901,2901],[2902,2902]]],[1562646734887,["GJX@GJXAIOU",[[1,2902,"- 计数：简单但是速度很慢，"]],[2902,2902],[2916,2916]]],[1562646744836,["GJX@GJXAIOU",[[-1,2915,"，"]],[2916,2916],[2915,2915]]],[1562646760914,["GJX@GJXAIOU",[[1,2915,"；每个对象都含有一个引用"]],[2915,2915],[2927,2927]]],[1562646822784,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,2929,"##"]],[2888,2888],[2931,2931]]],[1562646822784,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,2929,"##"]],[2931,2931],[2888,2888]]],[1562646802377,["GJX@GJXAIOU",[[1,2927,"计数器，当有引用连接至对象的时候，技术"]],[2927,2927],[2946,2946]]],[1562646802995,["GJX@GJXAIOU",[[-1,2944,"技术"]],[2946,2946],[2944,2944]]],[1562646808848,["GJX@GJXAIOU",[[1,2944,"计数+1."]],[2944,2944],[2949,2949]]],[1562646809427,["GJX@GJXAIOU",[[-1,2948,"."]],[2949,2949],[2948,2948]]],[1562646811066,["GJX@GJXAIOU",[[1,2948,"。方"]],[2948,2948],[2950,2950]]],[1562646811675,["GJX@GJXAIOU",[[-1,2948,"。方"]],[2950,2950],[2948,2948]]],[1562646822280,["GJX@GJXAIOU",[[1,2948,"。当引用离开作用域或者"]],[2948,2948],[2959,2959]]],[1562646882776,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,2961,"##"]],[2888,2888],[2963,2963]]],[1562646882776,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,2961,"##"]],[2963,2963],[2888,2888]]],[1562646829289,["GJX@GJXAIOU",[[1,2959,"被置为null"]],[2959,2959],[2966,2966]]],[1562646829318,["GJX@GJXAIOU",[[1,2962," "]],[2966,2966],[2967,2967]]],[1562646833537,["GJX@GJXAIOU",[[1,2967,"时"]],[2967,2967],[2968,2968]]],[1562646833566,["GJX@GJXAIOU",[[1,2967," "]],[2968,2968],[2969,2969]]],[1562646840302,["GJX@GJXAIOU",[[1,2969,"，引用计数——"]],[2969,2969],[2976,2976]]],[1562646841099,["GJX@GJXAIOU",[[-1,2974,"——"]],[2976,2976],[2974,2974]]],[1562646877225,["GJX@GJXAIOU",[[1,2974,"-1.对于对象之间的循环引用开销较大；"]],[2974,2974],[2993,2993]]],[1562646942778,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,2995,"##"]],[2888,2888],[2997,2997]]],[1562646942778,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,2995,"##"]],[2997,2997],[2888,2888]]],[1562646888587,["GJX@GJXAIOU",[[1,2994,"- \n"]],[2993,2993],[2996,2996]]],[1562646900614,["GJX@GJXAIOU",[[1,2996,"自适应："]],[2996,2996],[3000,3000]]],[1562646904916,["GJX@GJXAIOU",[[1,2996,"**"],[1,2999,"**"]],[2996,2999],[2996,3003]]],[1562646907651,["GJX@GJXAIOU",[[1,2904,"**"],[1,2906,"**"]],[2904,2906],[2904,2910]]],[1562646920855,["GJX@GJXAIOU",[[1,3008,"首先先"]],[3008,3008],[3011,3011]]],[1562646924291,["GJX@GJXAIOU",[[-1,3010,"先"]],[3011,3011],[3010,3010]]],[1562646940629,["GJX@GJXAIOU",[[1,3010,"暂停程序的运行（）"]],[3010,3010],[3019,3019]]],[1562647002780,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3021,"##"]],[2888,2888],[3023,3023]]],[1562647002780,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3021,"##"]],[3023,3023],[2888,2888]]],[1562646946151,["GJX@GJXAIOU",[[1,3018,"因此他"]],[3018,3018],[3021,3021]]],[1562646946666,["GJX@GJXAIOU",[[-1,3020,"他"]],[3021,3021],[3020,3020]]],[1562646953393,["GJX@GJXAIOU",[[1,3020,"它不属于后台回收模式"]],[3020,3020],[3030,3030]]],[1562646978583,["GJX@GJXAIOU",[[1,3031,"，然后将所有存活的对象从当前堆度知道"]],[3031,3031],[3049,3049]]],[1562646981266,["GJX@GJXAIOU",[[-1,3047,"知道"]],[3049,3049],[3047,3047]]],[1562646982408,["GJX@GJXAIOU",[[1,3047,"赋值"]],[3047,3047],[3049,3049]]],[1562646983194,["GJX@GJXAIOU",[[-1,3047,"赋值"]],[3049,3049],[3047,3047]]],[1562646985776,["GJX@GJXAIOU",[[1,3047,"复制扫"]],[3047,3047],[3050,3050]]],[1562646986503,["GJX@GJXAIOU",[[-1,3049,"扫"]],[3050,3050],[3049,3049]]],[1562646987630,["GJX@GJXAIOU",[[1,3049,"大"]],[3049,3049],[3050,3050]]],[1562646988366,["GJX@GJXAIOU",[[-1,3049,"大"]],[3050,3050],[3049,3049]]],[1562647000973,["GJX@GJXAIOU",[[1,3049,"到另一个堆，没有复制的"]],[3049,3049],[3060,3060]]],[1562647062782,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3062,"##"]],[2888,2888],[3064,3064]]],[1562647062782,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3062,"##"]],[3064,3064],[2888,2888]]],[1562647012888,["GJX@GJXAIOU",[[1,3060,"全是垃圾。因为赋值"]],[3060,3060],[3069,3069]]],[1562647013643,["GJX@GJXAIOU",[[-1,3067,"赋值"]],[3069,3069],[3067,3067]]],[1562647017800,["GJX@GJXAIOU",[[1,3067,"复制之后的对西南"]],[3067,3067],[3075,3075]]],[1562647019110,["GJX@GJXAIOU",[[-1,3072,"对西南"]],[3075,3075],[3072,3072]]],[1562647053805,["GJX@GJXAIOU",[[1,3072,"对象是一个挨着一个，所以新堆保持紧凑排列；"]],[3072,3072],[3093,3093]]],[1562647122785,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3095,"##"]],[2888,2888],[3097,3097]]],[1562647122785,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3095,"##"]],[3097,3097],[2888,2888]]],[1562647071853,["GJX@GJXAIOU",[[1,3008,"\n"]],[3008,3008],[3009,3009]]],[1562647077415,["GJX@GJXAIOU",[[1,3009,"  - 停止="]],[3009,3009],[3016,3016]]],[1562647077995,["GJX@GJXAIOU",[[-1,3015,"="]],[3016,3016],[3015,3015]]],[1562647079814,["GJX@GJXAIOU",[[1,3015,"- 赋值"]],[3015,3015],[3019,3019]]],[1562647080396,["GJX@GJXAIOU",[[-1,3017,"赋值"]],[3019,3019],[3017,3017]]],[1562647082351,["GJX@GJXAIOU",[[1,3017,"复制："]],[3017,3017],[3020,3020]]],[1562647085324,["GJX@GJXAIOU",[[1,3106,"  - \n"]],[3105,3105],[3110,3110]]],[1562647121232,["GJX@GJXAIOU",[[1,3110,"标记- 清扫：从堆栈和静态存储区"]],[3110,3110],[3126,3126]]],[1562647182784,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3128,"##"]],[2888,2888],[3130,3130]]],[1562647182784,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3128,"##"]],[3130,3130],[2888,2888]]],[1562647163000,["GJX@GJXAIOU",[[1,3126,"出发，遍历所有的引用，进而找出所有的存活对象，，"]],[3126,3126],[3150,3150]]],[1562647163899,["GJX@GJXAIOU",[[-1,3149,"，"]],[3150,3150],[3149,3149]]],[1562647182489,["GJX@GJXAIOU",[[1,3149,"每找到一个"]],[3149,3149],[3154,3154]]],[1562647242784,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3156,"##"]],[2888,2888],[3158,3158]]],[1562647242784,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3156,"##"]],[3158,3158],[2888,2888]]],[1562647188432,["GJX@GJXAIOU",[[1,3154,"对象就怼"]],[3154,3154],[3158,3158]]],[1562647189084,["GJX@GJXAIOU",[[-1,3157,"怼"]],[3158,3158],[3157,3157]]],[1562647219801,["GJX@GJXAIOU",[[1,3157,"对对象设一个标记，这时候不会回收任何对象，只有标记"]],[3157,3157],[3182,3182]]],[1562647221531,["GJX@GJXAIOU",[[-1,3180,"标记"]],[3182,3182],[3180,3180]]],[1562647238081,["GJX@GJXAIOU",[[1,3180,"全部标记工作完成的时候，清理工作才开始；"]],[3180,3180],[3200,3200]]],[1562647302785,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3202,"##"]],[2888,2888],[3204,3204]]],[1562647302785,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3202,"##"]],[3204,3204],[2888,2888]]],[1562647274023,["GJX@GJXAIOU",[[1,3200,"清理过程是释放没有标记的对象，剩下的空间的"]],[3200,3200],[3221,3221]]],[1562647274719,["GJX@GJXAIOU",[[-1,3220,"的"]],[3221,3221],[3220,3220]]],[1562647297568,["GJX@GJXAIOU",[[1,3220,"是不连续的，如果想得到连续的，需要重新整理剩下的对象；"]],[3220,3220],[3247,3247]]],[1562647362787,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3249,"##"]],[2888,2888],[3251,3251]]],[1562647362787,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3249,"##"]],[3251,3251],[2888,2888]]],[1562647316980,["GJX@GJXAIOU",[[1,3248,"  - \n"]],[3247,3247],[3252,3252]]],[1562647330109,["GJX@GJXAIOU",[[-1,3248,"-   "]],[3252,3252],[3248,3248]]],[1562647330683,["GJX@GJXAIOU",[[1,3250,"\n"]],[3248,3248],[3249,3249]]],[1562647333734,["GJX@GJXAIOU",[[1,3249,"****"]],[3249,3249],[3251,3251]]],[1562647339070,["GJX@GJXAIOU",[[1,3251,"JVM中"]],[3251,3251],[3255,3255]]],[1562647339100,["GJX@GJXAIOU",[[1,3254," "]],[3255,3255],[3256,3256]]],[1562647346575,["GJX@GJXAIOU",[[1,3256,"提升速度方式："]],[3256,3256],[3263,3263]]],[1562647348422,["GJX@GJXAIOU",[[1,3267,"\n"]],[3265,3265],[3266,3266]]],[1562647357662,["GJX@GJXAIOU",[[1,3266,"- 使用JIT"]],[3266,3266],[3273,3273]]],[1562647357693,["GJX@GJXAIOU",[[1,3270," "]],[3273,3273],[3274,3274]]],[1562647358609,["GJX@GJXAIOU",[[1,3274,"（）"]],[3274,3274],[3276,3276]]],[1562647422790,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3278,"##"]],[2888,2888],[3280,3280]]],[1562647422790,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3278,"##"]],[3280,3280],[2888,2888]]],[1562647366424,["GJX@GJXAIOU",[[1,3275,"Just -"]],[3275,3275],[3281,3281]]],[1562647366847,["GJX@GJXAIOU",[[-1,3280,"-"]],[3281,3281],[3280,3280]]],[1562647372492,["GJX@GJXAIOU",[[1,3280,"in time jis"]],[3280,3280],[3291,3291]]],[1562647373222,["GJX@GJXAIOU",[[-1,3288,"jis"]],[3291,3291],[3288,3288]]],[1562647373767,["GJX@GJXAIOU",[[1,3288,"j"]],[3288,3288],[3289,3289]]],[1562647374142,["GJX@GJXAIOU",[[-1,3288,"j"]],[3289,3289],[3288,3288]]],[1562647374744,["GJX@GJXAIOU",[[1,3288,"Jis"]],[3288,3288],[3291,3291]]],[1562647375477,["GJX@GJXAIOU",[[-1,3288,"Jis"]],[3291,3291],[3288,3288]]],[1562647385729,["GJX@GJXAIOU",[[1,3288,"即时编译器"]],[3288,3288],[3293,3293]]],[1562647402754,["GJX@GJXAIOU",[[1,3294,"：想法"]],[3294,3294],[3297,3297]]],[1562647403781,["GJX@GJXAIOU",[[-1,3295,"想法"]],[3297,3297],[3295,3295]]],[1562647420631,["GJX@GJXAIOU",[[1,3295,"先把程序全部或者部分翻译成本地机器码"]],[3295,3295],[3313,3313]]],[1562647482793,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3315,"##"]],[2888,2888],[3317,3317]]],[1562647482793,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3315,"##"]],[3317,3317],[2888,2888]]],[1562647458128,["GJX@GJXAIOU",[[1,3313,"，当需要装在"]],[3313,3313],[3319,3319]]],[1562647460460,["GJX@GJXAIOU",[[-1,3317,"装在"]],[3319,3319],[3317,3317]]],[1562647467270,["GJX@GJXAIOU",[[1,3317,"装载某个类的时候（）"]],[3317,3317],[3327,3327]]],[1562647482375,["GJX@GJXAIOU",[[1,3326,"通常是在 "]],[3326,3326],[3331,3331]]],[1562647542795,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3334,"##"]],[2888,2888],[3336,3336]]],[1562647542795,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3334,"##"]],[3336,3336],[2888,2888]]],[1562647483228,["GJX@GJXAIOU",[[-1,3330," "]],[3331,3331],[3330,3330]]],[1562647496768,["GJX@GJXAIOU",[[1,3330,"为该类创建第一个对象的时候"]],[3330,3330],[3343,3343]]],[1562647504799,["GJX@GJXAIOU",[[1,3344,"，编译器先找到。"]],[3344,3344],[3352,3352]]],[1562647506099,["GJX@GJXAIOU",[[-1,3351,"。"]],[3352,3352],[3351,3351]]],[1562647508142,["GJX@GJXAIOU",[[1,3351,".claa"]],[3351,3351],[3356,3356]]],[1562647508686,["GJX@GJXAIOU",[[-1,3355,"a"]],[3356,3356],[3355,3355]]],[1562647510607,["GJX@GJXAIOU",[[1,3355,"ss文件"]],[3355,3355],[3359,3359]]],[1562647510639,["GJX@GJXAIOU",[[1,3357," "]],[3359,3359],[3360,3360]]],[1562647532098,["GJX@GJXAIOU",[[1,3360,"，然后将该类的字节码文件装入内存"]],[3360,3360],[3376,3376]]],[1562647602799,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3378,"##"]],[2888,2888],[3380,3380]]],[1562647602799,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3378,"##"]],[3380,3380],[2888,2888]]],[1562647577912,["GJX@GJXAIOU",[[1,3376,"；接下来有两种方案："]],[3376,3376],[3386,3386]]],[1562647578267,["GJX@GJXAIOU",[[1,3387,"- \n"]],[3386,3386],[3389,3389]]],[1562647579276,["GJX@GJXAIOU",[[1,3387,"  "]],[3389,3389],[3391,3391]]],[1562647593591,["GJX@GJXAIOU",[[1,3391,"让即时编译器编译所有代码："]],[3391,3391],[3404,3404]]],[1562670421619,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3406,"##"]],[2888,2888],[3408,3408]]],[1562670421619,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3406,"##"]],[3408,3408],[2888,2888]]],[1562670409428,["GJX@GJXAIOU",[[-1,3403,"："]],[3404,3404],[3403,3403]]],[1562670410104,["GJX@GJXAIOU",[[1,3403,"；"]],[3403,3403],[3404,3404]]],[1562670410789,["GJX@GJXAIOU",[[1,3405,"  - \n"]],[3404,3404],[3409,3409]]],[1562670417921,["GJX@GJXAIOU",[[1,3409,"惰性评估："]],[3409,3409],[3414,3414]]],[1562670481620,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3416,"##"]],[2888,2888],[3418,3418]]],[1562670481620,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3416,"##"]],[3418,3418],[2888,2888]]],[1562670437824,["GJX@GJXAIOU",[[1,3414,"即时编译器只有在必要的时候才编译代码；"]],[3414,3414],[3433,3433]]],[1562670455301,["GJX@GJXAIOU",[[-1,3448,"  "]],[3450,3450],[3448,3448]]],[1562670462389,["GJX@GJXAIOU",[[1,3548,"\n"]],[3548,3548],[3549,3549]]],[1562670466879,["GJX@GJXAIOU",[[1,3478,"- "]],[3478,3478],[3480,3480]]],[1562670470146,["GJX@GJXAIOU",[[1,3551,"= "]],[3551,3551],[3553,3553]]],[1562670473948,["GJX@GJXAIOU",[[-1,3551,"="]],[3551,3552],[3551,3551]]],[1562670474199,["GJX@GJXAIOU",[[1,3551,"-"]],[3551,3551],[3552,3552]]],[1562670476332,["GJX@GJXAIOU",[[-1,3563,"\n"]],[3563,3563],[3562,3562]]],[1562670479109,["GJX@GJXAIOU",[[1,3563,"  "],[1,3588,"  "]],[3563,3615],[3563,3619]]],[1562670480245,["GJX@GJXAIOU",[[-1,3563," "],[1,3564,"-"],[-1,3590," "],[1,3591,"-"]],[3563,3619],[3563,3619]]],[1562670541623,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3435,"##"],[-1,3446,"  "],[1,3448,"Ja"],[1,3476,"- "],[-1,3478,"- "],[-1,3548,"对于"],[1,3553,"对于"],[-1,3561,"\n成"],[1,3565,"成员"],[1,3588,"- "],[-1,3590,"- "]],[2888,2888],[3590,3590]]],[1562670541623,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3435,"##"],[1,3448,"  "],[-1,3448,"Ja"],[-1,3478,"- "],[1,3482,"- "],[1,3550,"对于"],[-1,3553,"对于"],[1,3563,"\n成"],[-1,3565,"成员"],[-1,3590,"- "],[1,3594,"- "]],[3590,3590],[2888,2888]]],[1562670481679,["GJX@GJXAIOU",[[1,3563,"  "],[1,3590,"  "]],[3563,3619],[3563,3623]]],[1562670487391,["GJX@GJXAIOU",[[1,3624,"\n"]],[3624,3624],[3625,3625]]],[1562670489496,["GJX@GJXAIOU",[[1,3624,"···"]],[3624,3624],[3627,3627]]],[1562670490148,["GJX@GJXAIOU",[[-1,3624,"···"]],[3627,3627],[3624,3624]]],[1562670491622,["GJX@GJXAIOU",[[1,3624,"```"]],[3624,3624],[3627,3627]]],[1562670491655,["GJX@GJXAIOU",[[1,3627,"language\n```\n"]],[3627,3627],[3627,3635]]],[1562670491927,["GJX@GJXAIOU",[[-1,3627,"language"],[1,3635,"j"]],[3627,3635],[3628,3628]]],[1562670493078,["GJX@GJXAIOU",[[1,3628,"ava"]],[3628,3628],[3631,3631]]],[1562670495788,["GJX@GJXAIOU",[[-1,3632,"```"]],[3632,3635],[3632,3632]]],[1562670497348,["GJX@GJXAIOU",[[-1,3633,"\n"]],[3633,3633],[3632,3632]]],[1562670497644,["GJX@GJXAIOU",[[-1,3632,"\n"]],[3632,3632],[3631,3631]]],[1562670523541,["GJX@GJXAIOU",[[1,3988,"\n"]],[3987,3987],[3988,3988]]],[1562670524165,["GJX@GJXAIOU",[[1,3988,"```"]],[3988,3988],[3991,3991]]],[1562670601620,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3435,"##"],[-1,3446,"  "],[1,3448,"Ja"],[1,3476,"- "],[-1,3478,"- "],[-1,3548,"对于"],[1,3553,"对于"],[-1,3561,"\n成"],[1,3567,"成员"],[-1,3590,"成员"],[1,3596,"成员"],[-1,3622,"//"],[1,3632,"//"],[-1,3986,"cl"],[1,3992,"cl"]],[2888,2888],[3994,3994]]],[1562670601620,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3435,"##"],[1,3448,"  "],[-1,3448,"Ja"],[-1,3478,"- "],[1,3482,"- "],[1,3550,"对于"],[-1,3553,"对于"],[1,3563,"\n成"],[-1,3567,"成员"],[1,3592,"成员"],[-1,3596,"成员"],[1,3624,"//"],[-1,3632,"//"],[1,3988,"cl"],[-1,3992,"cl"]],[3994,3994],[2888,2888]]],[1562670566580,["GJX@GJXAIOU",[[-1,3988,"```"]],[3988,3991],[3988,3988]]],[1562670567652,["GJX@GJXAIOU",[[-1,3988,"\n"]],[3988,3988],[3987,3987]]],[1562670569310,["GJX@GJXAIOU",[[1,4004,"\n"]],[4003,4003],[4004,4004]]],[1562670569751,["GJX@GJXAIOU",[[1,4004,"```"]],[4004,4004],[4007,4007]]],[1562670573804,["GJX@GJXAIOU",[[-1,4008,"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15"]],[4008,4043],[4008,4008]]],[1562670576457,["GJX@GJXAIOU",[[1,4009,"- "]],[4009,4009],[4011,4011]]],[1562670582501,["GJX@GJXAIOU",[[1,4056,"- \n"]],[4055,4055],[4058,4058]]],[1562670584180,["GJX@GJXAIOU",[[-1,4056,"- "]],[4058,4058],[4056,4056]]],[1562670585503,["GJX@GJXAIOU",[[1,4056,"···"]],[4056,4056],[4059,4059]]],[1562670586221,["GJX@GJXAIOU",[[-1,4056,"···"]],[4059,4059],[4056,4056]]],[1562670586895,["GJX@GJXAIOU",[[1,4057,"\n"]],[4056,4056],[4057,4057]]],[1562670587990,["GJX@GJXAIOU",[[1,4057,"```"]],[4057,4057],[4060,4060]]],[1562670588021,["GJX@GJXAIOU",[[1,4060,"language\n```\n"]],[4060,4060],[4060,4068]]],[1562670588478,["GJX@GJXAIOU",[[-1,4060,"language"],[1,4068,"j"]],[4060,4068],[4061,4061]]],[1562670589845,["GJX@GJXAIOU",[[1,4061,"ava"]],[4061,4061],[4064,4064]]],[1562670592556,["GJX@GJXAIOU",[[-1,4065,"```"]],[4065,4068],[4065,4065]]],[1562670594036,["GJX@GJXAIOU",[[-1,4066,"\n"]],[4066,4066],[4065,4065]]],[1562670594316,["GJX@GJXAIOU",[[-1,4065,"\n"]],[4065,4065],[4064,4064]]],[1562670596750,["GJX@GJXAIOU",[[1,4152,"\n"]],[4151,4151],[4152,4152]]],[1562670597204,["GJX@GJXAIOU",[[1,4152,"```"]],[4152,4152],[4155,4155]]],[1562670599486,["GJX@GJXAIOU",[[-1,4156,"1\n2\n3\n4\n5\n6\n7"]],[4156,4169],[4156,4156]]],[1562670721624,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3435,"##"],[-1,3446,"  "],[1,3448,"Ja"],[1,3476,"- "],[-1,3478,"- "],[-1,3548,"对于"],[1,3553,"对于"],[-1,3561,"\n成"],[1,3567,"成员"],[-1,3590,"成员"],[1,3596,"成员"],[-1,3622,"//"],[1,3632,"//"],[-1,4002,"1\n"],[-1,4008,"法"],[1,4009,"\n"],[1,4011,"无法"],[-1,4054,"//"],[1,4065,"//"],[-1,4150,"1\n"],[1,4156,"\n5"]],[2888,2888],[4158,4158]]],[1562670721624,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3435,"##"],[1,3448,"  "],[-1,3448,"Ja"],[-1,3478,"- "],[1,3482,"- "],[1,3550,"对于"],[-1,3553,"对于"],[1,3563,"\n成"],[-1,3567,"成员"],[1,3592,"成员"],[-1,3596,"成员"],[1,3624,"//"],[-1,3632,"//"],[1,4004,"1\n"],[1,4008,"法"],[-1,4008,"\n"],[-1,4011,"无法"],[1,4056,"//"],[-1,4065,"//"],[1,4152,"1\n"],[-1,4156,"\n5"]],[4158,4158],[2888,2888]]],[1562670701686,["GJX@GJXAIOU",[[-1,4159,"5"]],[4160,4160],[4159,4159]]],[1562670702222,["GJX@GJXAIOU",[[1,4159,"7"]],[4159,4159],[4160,4160]]],[1562670704439,["GJX@GJXAIOU",[[1,4157,"## "]],[4160,4160],[4171,4171]]],[1562670706244,["GJX@GJXAIOU",[[1,4157,"\n"]],[4156,4156],[4157,4157]]],[1562670709286,["GJX@GJXAIOU",[[1,4157,"------xai"]],[4157,4157],[4166,4166]]],[1562670710550,["GJX@GJXAIOU",[[-1,4163,"xai"]],[4166,4166],[4163,4163]]],[1562670711015,["GJX@GJXAIOU",[[1,4164,"\n"]],[4163,4163],[4164,4164]]],[1562670719754,["GJX@GJXAIOU",[[1,4164,"下面没核对，书本上从"]],[4164,4164],[4174,4174]]],[1562670781626,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3435,"##"],[-1,3446,"  "],[1,3448,"Ja"],[1,3476,"- "],[-1,3478,"- "],[-1,3548,"对于"],[1,3553,"对于"],[-1,3561,"\n成"],[1,3567,"成员"],[-1,3590,"成员"],[1,3596,"成员"],[-1,3622,"//"],[1,3632,"//"],[-1,4002,"1\n"],[-1,4008,"法"],[1,4009,"\n"],[1,4011,"无法"],[-1,4054,"//"],[1,4065,"//"],[-1,4150,"1\n"],[-1,4156,"."],[1,4157,"\n"],[-1,4179," 7"],[1,4181,".7 对"]],[2888,2888],[4185,4185]]],[1562670781626,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3435,"##"],[1,3448,"  "],[-1,3448,"Ja"],[-1,3478,"- "],[1,3482,"- "],[1,3550,"对于"],[-1,3553,"对于"],[1,3563,"\n成"],[-1,3567,"成员"],[1,3592,"成员"],[-1,3596,"成员"],[1,3624,"//"],[-1,3632,"//"],[1,4004,"1\n"],[1,4008,"法"],[-1,4008,"\n"],[-1,4011,"无法"],[1,4056,"//"],[-1,4065,"//"],[1,4152,"1\n"],[1,4156,"."],[-1,4156,"\n"],[1,4179," 7"],[-1,4179,".7 对"]],[4185,4185],[2888,2888]]],[1562670724347,["GJX@GJXAIOU",[[1,4174,"P93ye"]],[4174,4174],[4179,4179]]],[1562670724378,["GJX@GJXAIOU",[[1,4174," "]],[4179,4179],[4180,4180]]],[1562670725363,["GJX@GJXAIOU",[[-1,4178,"ye"]],[4180,4180],[4178,4178]]],[1562670727336,["GJX@GJXAIOU",[[1,4178,"页"]],[4178,4178],[4179,4179]]],[1562670727368,["GJX@GJXAIOU",[[1,4178," "]],[4179,4179],[4180,4180]]],[1562670732266,["GJX@GJXAIOU",[[1,4180,"开始做笔记"]],[4180,4180],[4185,4185]]],[1562670736310,["GJX@GJXAIOU",[[-1,4201,"  "]],[4203,4203],[4201,4201]]],[1562670737101,["GJX@GJXAIOU",[[1,4201,"\n"]],[4201,4201],[4202,4202]]],[1562670745445,["GJX@GJXAIOU",[[1,4216,"* "],[1,4298,"* "],[1,4332,"* "],[1,4360,"* "],[1,4384,"* "],[1,4404,"* "]],[4216,4410],[4218,4422]]],[1562670752095,["GJX@GJXAIOU",[[1,4341,"·"]],[4341,4341],[4342,4342]]],[1562670754389,["GJX@GJXAIOU",[[-1,4341,"·"]],[4342,4342],[4341,4341]]],[1562670754958,["GJX@GJXAIOU",[[1,4341,"`"]],[4341,4341],[4342,4342]]],[1562670756879,["GJX@GJXAIOU",[[1,4351,"`"]],[4351,4351],[4352,4352]]],[1562670759558,["GJX@GJXAIOU",[[1,4313,"`"]],[4313,4313],[4314,4314]]],[1562670761078,["GJX@GJXAIOU",[[-1,4313,"`"]],[4314,4314],[4313,4313]]],[1562670767676,["GJX@GJXAIOU",[[1,4405,"**"],[1,4412,"**"]],[4405,4412],[4405,4416]]],[1562670771380,["GJX@GJXAIOU",[[1,4429,"\n"]],[4429,4429],[4430,4430]]],[1562670775710,["GJX@GJXAIOU",[[1,4430,"## "]],[4430,4430],[4442,4442]]],[1562670778757,["GJX@GJXAIOU",[[-1,4435,"6"]],[4436,4436],[4435,4435]]],[1562670779704,["GJX@GJXAIOU",[[1,4435,"8"]],[4435,4435],[4436,4436]]],[1562670841633,[null,[[-1,2888,"#"],[1,2889,"\n"],[-1,2901,"#"],[1,2902,"\n"],[1,3435,"##"],[-1,3446,"  "],[1,3448,"Ja"],[1,3476,"- "],[-1,3478,"- "],[-1,3548,"对于"],[1,3553,"对于"],[-1,3561,"\n成"],[1,3567,"成员"],[-1,3590,"成员"],[1,3596,"成员"],[-1,3622,"//"],[1,3632,"//"],[-1,4002,"1\n"],[-1,4008,"法"],[1,4009,"\n"],[1,4011,"无法"],[-1,4054,"//"],[1,4065,"//"],[-1,4150,"1\n"],[-1,4156,"."],[1,4157,"\n"],[-1,4190," 7"],[1,4192,".7 对"],[-1,4199,"  "],[1,4202,"假设"],[1,4214,"* "],[-1,4216,"* "],[-1,4298,"载入"],[1,4302,"载入"],[1,4334,"* "],[-1,4336,"* "],[1,4339,"`"],[-1,4341,"`"],[1,4349,"`"],[-1,4351,"`"],[-1,4366,"存储"],[1,4370,"存储"],[1,4392,"* "],[-1,4394,"* "],[1,4403,"**"],[-1,4405,"**"],[-1,4412,"动作"],[1,4416,"动作"],[1,4418,"* "],[-1,4420,"* "],[-1,4427,"5."],[-1,4433,"6 8"],[1,4436,"5.8 数"]],[2888,2888],[4441,4441]]],[1562670841633,[null,[[1,2888,"#"],[-1,2888,"\n"],[1,2901,"#"],[-1,2901,"\n"],[-1,3435,"##"],[1,3448,"  "],[-1,3448,"Ja"],[-1,3478,"- "],[1,3482,"- "],[1,3550,"对于"],[-1,3553,"对于"],[1,3563,"\n成"],[-1,3567,"成员"],[1,3592,"成员"],[-1,3596,"成员"],[1,3624,"//"],[-1,3632,"//"],[1,4004,"1\n"],[1,4008,"法"],[-1,4008,"\n"],[-1,4011,"无法"],[1,4056,"//"],[-1,4065,"//"],[1,4152,"1\n"],[1,4156,"."],[-1,4156,"\n"],[1,4190," 7"],[-1,4190,".7 对"],[1,4201,"  "],[-1,4202,"假设"],[-1,4216,"* "],[1,4220,"* "],[1,4300,"载入"],[-1,4302,"载入"],[-1,4336,"* "],[1,4340,"* "],[-1,4341,"`"],[1,4344,"`"],[-1,4351,"`"],[1,4354,"`"],[1,4368,"存储"],[-1,4370,"存储"],[-1,4394,"* "],[1,4398,"* "],[-1,4405,"**"],[1,4409,"**"],[1,4414,"动作"],[-1,4416,"动作"],[-1,4420,"* "],[1,4424,"* "],[1,4429,"5."],[1,4433,"6 8"],[-1,4433,"5.8 数"]],[4441,4441],[2888,2888]]],[1562670786861,["GJX@GJXAIOU",[[1,4470,"* "],[1,4506,"* "],[1,4512,"* "],[1,4565,"* "]],[4470,4602],[4472,4610]]],[1562670792063,["GJX@GJXAIOU",[[1,4516,"  "]],[4518,4518],[4520,4520]]],[1562670792992,["GJX@GJXAIOU",[[1,4573,"  "]],[4575,4575],[4577,4577]]],[1562670794310,["GJX@GJXAIOU",[[-1,4469,"\n"]],[4469,4469],[4468,4468]]],[1562670797604,["GJX@GJXAIOU",[[-1,4443,"  "]],[4445,4445],[4443,4443]]],[1562670798365,["GJX@GJXAIOU",[[1,4443,"\n"]],[4443,4443],[4444,4444]]],[1562670810212,["GJX@GJXAIOU",[[-1,35,"green"]],[40,40],[35,35]]],[1562670812407,["GJX@GJXAIOU",[[1,35,"yellow"]],[35,35],[41,41]]]],null,"GJX@GJXAIOU"]]}