{"compress":true,"commitItems":[["c3d368f0-8912-4e94-829b-10f48e32bd46",1562421762007,"",[[1562421727604,["GJX@GJXAIOU",[[1,0,"# 第一章：对象导论\n\n\n\n"]],[0,0],[13,13]]],[1562421755087,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562421756897,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1562421757064,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1562421757224,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1562421757247,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1562421766992,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1562421767647,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1562421769563,["GJX@GJXAIOU",[[1,11,"- j"]],[11,11],[14,14]]],[1562421770063,["GJX@GJXAIOU",[[-1,13,"j"]],[14,14],[13,13]]],[1562421771783,["GJX@GJXAIOU",[[1,13,"Java"]],[13,13],[17,17]]],[1562421772800,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1562421776705,["GJX@GJXAIOU",[[1,18,"- Javabi"]],[18,18],[26,26]]],[1562421777368,["GJX@GJXAIOU",[[-1,24,"bi"]],[26,26],[24,24]]],[1562421780769,["GJX@GJXAIOU",[[1,24,"编程私信"]],[24,24],[28,28]]],[1562421781599,["GJX@GJXAIOU",[[-1,26,"私信"]],[28,28],[26,26]]],[1562421783290,["GJX@GJXAIOU",[[1,26,"思想"]],[26,26],[28,28]]],[1562421784207,["GJX@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1562421792000,["GJX@GJXAIOU",[[1,29,"flags: green"]],[29,29],[41,41]]],[1562421792545,["GJX@GJXAIOU",[[1,42,"\n"]],[41,41],[42,42]]],[1562421797328,["GJX@GJXAIOU",[[-1,34,": "]],[36,36],[34,34]]],[1562421799144,["GJX@GJXAIOU",[[1,34,": "]],[34,34],[36,36]]],[1562421811887,["GJX@GJXAIOU",[[-1,33,"s"]],[34,34],[33,33]]],[1562421819250,["GJX@GJXAIOU",[[1,41,"style:su"]],[41,41],[49,49]]],[1562421819968,["GJX@GJXAIOU",[[-1,47,"su"]],[49,49],[47,47]]],[1562421821432,["GJX@GJXAIOU",[[1,47," summer"]],[47,47],[54,54]]],[1562421821953,["GJX@GJXAIOU",[[1,55,"\n"]],[54,54],[55,55]]],[1562421831363,["GJX@GJXAIOU",[[1,55,"date: '2019-7-6'"]],[55,55],[71,71]]],[1562421882864,["GJX@GJXAIOU",[[-1,90,"\n"],[1,91,"c"]],[90,90],[91,91]]],[1562421883080,["GJX@GJXAIOU",[[1,91,"ho"]],[91,91],[93,93]]],[1562421883912,["GJX@GJXAIOU",[[-1,91,"ho"]],[93,93],[91,91]]],[1562421884064,["GJX@GJXAIOU",[[-1,90,"c"],[1,91,"\n"]],[91,91],[90,90]]],[1562421892291,["GJX@GJXAIOU",[[1,90,"## 1.1 抽象过程"]],[90,90],[101,101]]],[1562421892562,["GJX@GJXAIOU",[[1,102,"\n"]],[101,101],[102,102]]],[1562421895075,["GJX@GJXAIOU",[[-1,102,"\n"],[1,103,"非"]],[102,102],[103,103]]],[1562421897019,["GJX@GJXAIOU",[[1,103,"OOP"]],[103,103],[106,106]]],[1562421897041,["GJX@GJXAIOU",[[1,103," "]],[106,106],[107,107]]],[1562421899955,["GJX@GJXAIOU",[[1,107,"（）"]],[107,107],[109,109]]],[1562421921082,["GJX@GJXAIOU",[[1,108,"Object-oriented Programming"]],[108,108],[135,135]]],[1562421924626,["GJX@GJXAIOU",[[1,136,"程序"]],[136,136],[138,138]]],[1562421927431,["GJX@GJXAIOU",[[-1,136,"程序"]],[138,138],[136,136]]],[1562421931985,["GJX@GJXAIOU",[[1,136,"程序"]],[136,136],[138,138]]],[1562421933695,["GJX@GJXAIOU",[[-1,136,"程序"]],[138,138],[136,136]]],[1562421938211,["GJX@GJXAIOU",[[1,136,"编程语言都是"]],[136,136],[142,142]]],[1562421941487,["GJX@GJXAIOU",[[-1,140,"都是"]],[142,142],[140,140]]],[1562421984155,["GJX@GJXAIOU",[[1,140,"的抽象都是要求在解决问题的时候基于计算机的机构，而不是基于要解决的问题的结构进行思考。"]],[140,140],[183,183]]],[1562422012792,["GJX@GJXAIOU",[[1,183,"\n\n"]],[183,183],[184,184]]],[1562422013767,["GJX@GJXAIOU",[[1,185,"\n"]],[184,184],[185,185]]],[1562422014833,["GJX@GJXAIOU",[[-1,185,"\n"],[1,186,"在"]],[185,185],[186,186]]],[1562422016337,["GJX@GJXAIOU",[[1,186,"OOP"]],[186,186],[189,189]]],[1562422016360,["GJX@GJXAIOU",[[1,186," "]],[189,189],[190,190]]],[1562422018275,["GJX@GJXAIOU",[[1,190,"中"]],[190,190],[191,191]]],[1562422018298,["GJX@GJXAIOU",[[1,190," "]],[191,191],[192,192]]],[1562422043851,["GJX@GJXAIOU",[[1,192,"，将问题空间中的元素及其在解空间中的表示称为“对象；"]],[192,192],[218,218]]],[1562422044384,["GJX@GJXAIOU",[[-1,217,"；"]],[218,218],[217,217]]],[1562422061061,["GJX@GJXAIOU",[[1,217,"”；程序可以通过添加新类型的对象是"]],[217,217],[234,234]]],[1562422061705,["GJX@GJXAIOU",[[-1,233,"是"]],[234,234],[233,233]]],[1562422063969,["GJX@GJXAIOU",[[1,233,"是的"]],[233,233],[235,235]]],[1562422064729,["GJX@GJXAIOU",[[-1,233,"是的"]],[235,235],[233,233]]],[1562422089549,["GJX@GJXAIOU",[[1,233,"使得自身适用于某个特定的问题；"]],[233,233],[248,248]]],[1562422089800,["GJX@GJXAIOU",[[1,248,"\n\n"]],[248,248],[249,249]]],[1562422091155,["GJX@GJXAIOU",[[1,250,"\n"]],[249,249],[250,250]]],[1562422091892,["GJX@GJXAIOU",[[-1,250,"\n"],[1,251,"-"]],[250,250],[251,251]]],[1562422095931,["GJX@GJXAIOU",[[1,251," Java作为"]],[251,251],[258,258]]],[1562422095953,["GJX@GJXAIOU",[[1,256," "]],[258,258],[259,259]]],[1562422098001,["GJX@GJXAIOU",[[1,259,"OOP"]],[259,259],[262,262]]],[1562422098023,["GJX@GJXAIOU",[[1,259," "]],[262,262],[263,263]]],[1562422099251,["GJX@GJXAIOU",[[1,263,"的"]],[263,263],[264,264]]],[1562422099275,["GJX@GJXAIOU",[[1,263," "]],[264,264],[265,265]]],[1562422103889,["GJX@GJXAIOU",[[1,265,"无法特性：\n- "]],[265,265],[273,273]]],[1562422104735,["GJX@GJXAIOU",[[1,271,"  "]],[273,273],[275,275]]],[1562422120883,["GJX@GJXAIOU",[[1,275,"万物皆对象\n  - 程序是对象的集合，他们可以"]],[275,275],[298,298]]],[1562422135251,["GJX@GJXAIOU",[[1,298,"通过发送消息来告知彼此所要做的；"]],[298,298],[314,314]]],[1562422137097,["GJX@GJXAIOU",[[1,280,"；"]],[280,280],[281,281]]],[1562422137328,["GJX@GJXAIOU",[[1,286,"\n  - "]],[281,281],[286,286]]],[1562422139375,["GJX@GJXAIOU",[[-1,282,"  - "]],[286,286],[282,282]]],[1562422139720,["GJX@GJXAIOU",[[-1,282,"\n"]],[282,282],[281,281]]],[1562422181689,["GJX@GJXAIOU",[[1,315,"\n  - 每个对象都有自己的由其他对象所构成的存储；\n  - 每个对象都拥有其类型："]],[315,315],[357,357]]],[1562422235698,["GJX@GJXAIOU",[[1,357,"即每个对象都是某个类的一个实例，每个类最重要的区别于其他类的特性就是“什么"]],[357,357],[394,394]]],[1562422237562,["GJX@GJXAIOU",[[-1,392,"什么"]],[394,394],[392,392]]],[1562422241939,["GJX@GJXAIOU",[[1,392,"可以发送什么样"]],[392,392],[399,399]]],[1562422249827,["GJX@GJXAIOU",[[1,399,"的消息给它”、"]],[399,399],[406,406]]],[1562422250503,["GJX@GJXAIOU",[[-1,405,"、"]],[406,406],[405,405]]],[1562422276876,["GJX@GJXAIOU",[[1,405,"；\n  - 某一特定类型的所有对象都可以结构同样的消息"]],[405,405],[432,432]]],[1562422279641,["GJX@GJXAIOU",[[-1,425,"结构"]],[427,427],[425,425]]],[1562422283314,["GJX@GJXAIOU",[[1,425,"接收"]],[425,425],[427,427]]],[1562422285732,["GJX@GJXAIOU",[[1,432,"；"]],[432,432],[433,433]]],[1562422311016,["GJX@GJXAIOU",[[1,433,"\n  - "]],[433,433],[438,438]]],[1562422311170,["GJX@GJXAIOU",[[-1,434,"  - "],[1,438,"\n\n"]],[438,438],[435,435]]],[1562422315938,["GJX@GJXAIOU",[[1,435,"## 1.2 "]],[435,435],[442,442]]],[1562422509043,["GJX@GJXAIOU",[[1,442,"每个队形"]],[442,442],[446,446]]],[1562422509815,["GJX@GJXAIOU",[[-1,444,"队形"]],[446,446],[444,444]]],[1562422515251,["GJX@GJXAIOU",[[1,444,"对象都有一个接口"]],[444,444],[452,452]]],[1562422515808,["GJX@GJXAIOU",[[1,453,"\n"]],[452,452],[453,453]]],[1562422519562,["GJX@GJXAIOU",[[1,454,"\n"]],[453,453],[454,454]]],[1562422520506,["GJX@GJXAIOU",[[-1,454,"\n"],[1,455,"-"]],[454,454],[455,455]]],[1562422527987,["GJX@GJXAIOU",[[1,455," 创建抽象数据类型（）"]],[455,455],[466,466]]],[1562422530042,["GJX@GJXAIOU",[[1,465,"类"]],[465,465],[466,466]]],[1562422540729,["GJX@GJXAIOU",[[1,467,"是面向对象程序设计的基本"]],[467,467],[479,479]]],[1562422544287,["GJX@GJXAIOU",[[1,479,"概念之一；\n- "]],[479,479],[487,487]]],[1562422647172,["GJX@GJXAIOU",[[1,487,"类"]],[487,487],[488,488]]],[1562422648256,["GJX@GJXAIOU",[[-1,487,"类"]],[488,488],[487,487]]],[1562422661652,["GJX@GJXAIOU",[[1,487,"类描述了具有相同特性"]],[487,487],[497,497]]],[1562422662779,["GJX@GJXAIOU",[[1,497,"（）"]],[497,497],[499,499]]],[1562422666986,["GJX@GJXAIOU",[[1,498,"数据元素"]],[498,498],[502,502]]],[1562422671811,["GJX@GJXAIOU",[[1,503,"和行为（）"]],[503,503],[508,508]]],[1562422673642,["GJX@GJXAIOU",[[1,507,"公安"]],[507,507],[509,509]]],[1562422674350,["GJX@GJXAIOU",[[-1,507,"公安"]],[509,509],[507,507]]],[1562422675754,["GJX@GJXAIOU",[[1,507,"功能"]],[507,507],[509,509]]],[1562422719225,["GJX@GJXAIOU",[[1,510,"的对象的集合，因此实际上是一个数据类型；\n- 每个对象只能满足某些请求，"]],[510,510],[546,546]]],[1562422764378,["GJX@GJXAIOU",[[1,546,"这些请求是由对象的接口所定义的，决定接口的是类型；\n- "]],[546,546],[574,574]]],[1562422765680,["GJX@GJXAIOU",[[-1,572,"- "],[1,574,"\n\n"]],[574,574],[573,573]]],[1562422767658,["GJX@GJXAIOU",[[1,573,"### "]],[573,573],[577,577]]],[1562422769272,["GJX@GJXAIOU",[[-1,575,"# "]],[577,577],[575,575]]],[1562422770473,["GJX@GJXAIOU",[[1,575,"1.3"]],[575,575],[578,578]]],[1562422772091,["GJX@GJXAIOU",[[1,575," "]],[575,575],[576,576]]],[1562422781485,["GJX@GJXAIOU",[[1,579," 每个对象都"]],[579,579],[585,585]]],[1562422785835,["GJX@GJXAIOU",[[1,585,"提供服务"]],[585,585],[589,589]]],[1562422786219,["GJX@GJXAIOU",[[1,590,"\n"]],[589,589],[590,590]]],[1562422809856,["GJX@GJXAIOU",[[-1,590,"\n"],[1,591,"内聚"]],[590,590],[592,592]]],[1562422818163,["GJX@GJXAIOU",[[1,592,"：每个对象都可以万恒"]],[592,592],[602,602]]],[1562422819472,["GJX@GJXAIOU",[[-1,600,"万恒"]],[602,602],[600,600]]],[1562422834409,["GJX@GJXAIOU",[[1,600,"完成某一项任务，但是不要试图做跟对的"]],[600,600],[618,618]]],[1562422835017,["GJX@GJXAIOU",[[-1,615,"跟对的"]],[618,618],[615,615]]],[1562422839408,["GJX@GJXAIOU",[[1,615,"更多的事情；"]],[615,615],[621,621]]],[1562422839775,["GJX@GJXAIOU",[[1,621,"\n\n"]],[621,621],[622,622]]],[1562422841256,["GJX@GJXAIOU",[[1,623,"\n"]],[622,622],[623,623]]],[1562422854275,["GJX@GJXAIOU",[[1,623,"## 1.4 被隐藏的具体实现"]],[623,623],[638,638]]],[1562422854783,["GJX@GJXAIOU",[[1,639,"\n"]],[638,638],[639,639]]],[1562422862915,["GJX@GJXAIOU",[[-1,639,"\n"],[1,640,"Java"]],[639,639],[643,643]]],[1562422865580,["GJX@GJXAIOU",[[1,643,"使用"]],[643,643],[645,645]]],[1562422865604,["GJX@GJXAIOU",[[1,643," "]],[645,645],[646,646]]],[1562422879787,["GJX@GJXAIOU",[[1,646,"三个关键字在类的内部设定编辑"]],[646,646],[660,660]]],[1562422880671,["GJX@GJXAIOU",[[-1,658,"编辑"]],[660,660],[658,658]]],[1562422882434,["GJX@GJXAIOU",[[1,658,"边界："]],[658,658],[661,661]]],[1562422882815,["GJX@GJXAIOU",[[1,661,"\n\n"]],[661,661],[662,662]]],[1562422883833,["GJX@GJXAIOU",[[-1,662,"\n"],[1,663,"-"]],[662,662],[663,663]]],[1562422884032,["GJX@GJXAIOU",[[1,663," "]],[663,663],[664,664]]],[1562422886415,["GJX@GJXAIOU",[[1,639,"\n"]],[639,639],[640,640]]],[1562422888336,["GJX@GJXAIOU",[[1,665," "]],[664,664],[665,665]]],[1562422890581,["GJX@GJXAIOU",[[1,665,"public"]],[665,665],[671,671]]],[1562422891218,["GJX@GJXAIOU",[[1,671,"\n"]],[671,671],[672,672]]],[1562422899337,["GJX@GJXAIOU",[[1,672,"private"]],[672,672],[679,679]]],[1562422902913,["GJX@GJXAIOU",[[1,672,"- "]],[672,672],[674,674]]],[1562422905040,["GJX@GJXAIOU",[[1,681,"\n"]],[681,681],[682,682]]],[1562422906066,["GJX@GJXAIOU",[[1,682,"-"]],[682,682],[683,683]]],[1562422906281,["GJX@GJXAIOU",[[1,684," "]],[683,683],[684,684]]],[1562422907992,["GJX@GJXAIOU",[[1,684,"ptro"]],[684,684],[688,688]]],[1562422910002,["GJX@GJXAIOU",[[-1,685,"tro"]],[688,688],[685,685]]],[1562422912498,["GJX@GJXAIOU",[[1,685,"rotected"]],[685,685],[693,693]]],[1562422946812,["GJX@GJXAIOU",[[1,671," :其紧随其后的元素对任何人都是可以使用的；"]],[671,671],[693,693]]],[1562422948833,["GJX@GJXAIOU",[[1,703," ："]],[703,703],[705,705]]],[1562422949775,["GJX@GJXAIOU",[[-1,704,"："]],[705,705],[704,704]]],[1562422950304,["GJX@GJXAIOU",[[1,704,";"]],[704,704],[705,705]]],[1562422951095,["GJX@GJXAIOU",[[-1,704,";"]],[705,705],[704,704]]],[1562422951673,["GJX@GJXAIOU",[[1,704,";"]],[704,704],[705,705]]],[1562422952335,["GJX@GJXAIOU",[[-1,704,";"]],[705,705],[704,704]]],[1562422954297,["GJX@GJXAIOU",[[1,704,": s"]],[704,704],[707,707]]],[1562422954712,["GJX@GJXAIOU",[[-1,706,"s"]],[707,707],[706,706]]],[1562422966282,["GJX@GJXAIOU",[[1,706,"除了类型的创兼职"]],[706,706],[714,714]]],[1562422968960,["GJX@GJXAIOU",[[-1,711,"创兼职"]],[714,714],[711,711]]],[1562422988500,["GJX@GJXAIOU",[[1,711,"创建者和类型的内部方法之外任何人不能调用；"]],[711,711],[732,732]]],[1562422995858,["GJX@GJXAIOU",[[-1,729,"调用；"]],[732,732],[729,729]]],[1562422999354,["GJX@GJXAIOU",[[1,729,"访问；"]],[729,729],[732,732]]],[1562423016237,["GJX@GJXAIOU",[[1,745,"：集合"]],[745,745],[748,748]]],[1562423018481,["GJX@GJXAIOU",[[-1,746,"集合"]],[748,748],[746,746]]],[1562423021564,["GJX@GJXAIOU",[[1,746,"集合"]],[746,746],[748,748]]],[1562423022312,["GJX@GJXAIOU",[[-1,746,"集合"]],[748,748],[746,746]]],[1562423031426,["GJX@GJXAIOU",[[1,746,"几乎同上，只是进程"]],[746,746],[755,755]]],[1562423032969,["GJX@GJXAIOU",[[-1,753,"进程"]],[755,755],[753,753]]],[1562423046795,["GJX@GJXAIOU",[[1,753,"继承的类是可以访问protected"]],[753,753],[771,771]]],[1562423046819,["GJX@GJXAIOU",[[1,762," "]],[771,771],[772,772]]],[1562423050409,["GJX@GJXAIOU",[[1,772,"成员"]],[772,772],[774,774]]],[1562423050435,["GJX@GJXAIOU",[[1,772," "]],[774,774],[775,775]]],[1562423056439,["GJX@GJXAIOU",[[1,775,"；\n- "]],[775,775],[779,779]]],[1562423056577,["GJX@GJXAIOU",[[-1,777,"- "],[1,779,"\n\n"]],[779,779],[778,778]]],[1562423063092,["GJX@GJXAIOU",[[-1,778,"\n"],[1,779,"Java"]],[778,778],[782,782]]],[1562423065987,["GJX@GJXAIOU",[[1,782,"某人"]],[782,782],[784,784]]],[1562423066012,["GJX@GJXAIOU",[[1,782," "]],[784,784],[785,785]]],[1562423067185,["GJX@GJXAIOU",[[-1,783,"某人"]],[785,785],[783,783]]],[1562423079467,["GJX@GJXAIOU",[[1,783,"默认的访问权限是：包访问权限，"]],[783,783],[798,798]]],[1562423091242,["GJX@GJXAIOU",[[1,798,"即类可以访问同一个包（）"]],[798,798],[810,810]]],[1562423095746,["GJX@GJXAIOU",[[1,809,"库构建"]],[809,809],[812,812]]],[1562423097831,["GJX@GJXAIOU",[[-1,810,"构建"]],[812,812],[810,810]]],[1562423100546,["GJX@GJXAIOU",[[1,810,"构件"]],[810,810],[812,812]]],[1562423121290,["GJX@GJXAIOU",[[1,813,"中的其他类成员，但是在包之外不能访问；"]],[813,813],[832,832]]],[1562423124047,["GJX@GJXAIOU",[[1,832,"\n\n"]],[832,832],[833,833]]],[1562423124170,["GJX@GJXAIOU",[[1,834,"\n"]],[833,833],[834,834]]],[1562423124280,["GJX@GJXAIOU",[[1,835,"\n"]],[834,834],[835,835]]],[1562423124391,["GJX@GJXAIOU",[[1,836,"\n"]],[835,835],[836,836]]],[1562423125767,["GJX@GJXAIOU",[[-1,836,"\n"]],[836,836],[835,835]]],[1562423136721,["GJX@GJXAIOU",[[1,835,"## 1.5 复用具体题"]],[835,835],[847,847]]],[1562423138535,["GJX@GJXAIOU",[[-1,846,"题"]],[847,847],[846,846]]],[1562423139969,["GJX@GJXAIOU",[[1,846,"体现"]],[846,846],[848,848]]],[1562423140615,["GJX@GJXAIOU",[[1,849,"\n"]],[848,848],[849,849]]],[1562423152610,["GJX@GJXAIOU",[[-1,849,"\n"],[1,850,"*"]],[849,849],[850,850]]],[1562423152764,["GJX@GJXAIOU",[[1,850,"***"]],[850,850],[851,851]]],[1562423154259,["GJX@GJXAIOU",[[1,851,"组合"]],[851,851],[853,853]]],[1562423156407,["GJX@GJXAIOU",[[1,849,"\n"]],[849,849],[850,850]]],[1562423158812,["GJX@GJXAIOU",[[1,854,"："]],[854,854],[855,855]]],[1562423172634,["GJX@GJXAIOU",[[1,857," 使用现有类合成新的类；"]],[857,857],[869,869]]],[1562423172895,["GJX@GJXAIOU",[[1,869,"\n\n"]],[869,869],[870,870]]],[1562423172906,["GJX@GJXAIOU",[[-1,870,"\n"],[1,871,"、"]],[870,870],[871,871]]],[1562423173776,["GJX@GJXAIOU",[[-1,870,"、"],[1,871,"\n"]],[871,871],[870,870]]],[1562423174170,["GJX@GJXAIOU",[[-1,870,"\n"]],[870,870],[869,869]]],[1562423175281,["GJX@GJXAIOU",[[1,870,"\n"]],[869,869],[870,870]]],[1562423176435,["GJX@GJXAIOU",[[-1,870,"\n"],[1,871,"*"]],[870,870],[871,871]]],[1562423176578,["GJX@GJXAIOU",[[1,871,"***"]],[871,871],[872,872]]],[1562423178436,["GJX@GJXAIOU",[[1,872,"聚合："]],[872,872],[875,875]]],[1562423198241,["GJX@GJXAIOU",[[1,877," 如果组合是动态翻身的，称之为聚合"]],[877,877],[894,894]]],[1562423201265,["GJX@GJXAIOU",[[-1,885,"翻身"]],[887,887],[885,885]]],[1562423202668,["GJX@GJXAIOU",[[1,885,"发生"]],[885,885],[887,887]]],[1562423213792,["GJX@GJXAIOU",[[1,894,"\n\n"]],[894,894],[895,895]]],[1562423213991,["GJX@GJXAIOU",[[1,896,"\n"]],[895,895],[896,896]]],[1562423220947,["GJX@GJXAIOU",[[1,895,"*"]],[895,895],[896,896]]],[1562423221609,["GJX@GJXAIOU",[[-1,895,"*"]],[896,896],[895,895]]],[1562423222330,["GJX@GJXAIOU",[[1,897,"\n"]],[895,895],[896,896]]],[1562423222922,["GJX@GJXAIOU",[[1,896,"===="]],[896,896],[898,898]]],[1562423225315,["GJX@GJXAIOU",[[1,898,"在构件"]],[898,898],[901,901]]],[1562423226858,["GJX@GJXAIOU",[[-1,899,"构件"]],[901,901],[899,899]]],[1562423235094,["GJX@GJXAIOU",[[1,899,"构建新类时候，邮箱"]],[899,899],[908,908]]],[1562423237248,["GJX@GJXAIOU",[[-1,906,"邮箱"]],[908,908],[906,906]]],[1562423250017,["GJX@GJXAIOU",[[1,906,"优先考虑组合，然后才是继承"]],[906,906],[919,919]]],[1562423252767,["GJX@GJXAIOU",[[1,923,"\n"]],[921,921],[922,922]]],[1562423252896,["GJX@GJXAIOU",[[1,924,"\n"]],[922,922],[923,923]]],[1562423261394,["GJX@GJXAIOU",[[1,923,"## 1.6 继承"]],[923,923],[932,932]]],[1562423262186,["GJX@GJXAIOU",[[1,934,"\n"]],[932,932],[933,933]]],[1562423301139,["GJX@GJXAIOU",[[1,933,"继承针对：基类 和 继承类"]],[933,933],[946,946]]],[1562423302123,["GJX@GJXAIOU",[[1,948,"\n"]],[946,946],[947,947]]],[1562423308393,["GJX@GJXAIOU",[[1,947,"体现了"]],[947,947],[950,950]]],[1562423309185,["GJX@GJXAIOU",[[-1,947,"体现了"]],[950,950],[947,947]]],[1562423309282,["GJX@GJXAIOU",[[-1,948,"\n"]],[947,947],[946,946]]],[1562423310833,["GJX@GJXAIOU",[[1,946,"；"]],[946,946],[947,947]]],[1562423311655,["GJX@GJXAIOU",[[-1,946,"；"]],[947,947],[946,946]]],[1562423321972,["GJX@GJXAIOU",[[1,946,"，体现了相似性和差异性；"]],[946,946],[958,958]]]],null,"GJX@GJXAIOU"],["86ed4495-afba-4e90-9b0f-43f769f89061",1562457625746,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-6'\n---\n\n# 第一章：对象导论\n\n\n## 1.1 抽象过程\n非 OOP（Object-oriented Programming）编程语言的抽象都是要求在解决问题的时候基于计算机的机构，而不是基于要解决的问题的结构进行思考。\n\n在 OOP 中，将问题空间中的元素及其在解空间中的表示称为“对象”；程序可以通过添加新类型的对象使得自身适用于某个特定的问题；\n\n- Java 作为 OOP 的无法特性：\n  - 万物皆对象；\n  - 程序是对象的集合，他们可以通过发送消息来告知彼此所要做的；\n  - 每个对象都有自己的由其他对象所构成的存储；\n  - 每个对象都拥有其类型：即每个对象都是某个类的一个实例，每个类最重要的区别于其他类的特性就是“可以发送什么样的消息给它”；\n  - 某一特定类型的所有对象都可以接收同样的消息；\n\n## 1.2 每个对象都有一个接口\n\n- 创建抽象数据类型（类）是面向对象程序设计的基本概念之一；\n- 类描述了具有相同特性（数据元素）和行为（功能）的对象的集合，因此实际上是一个数据类型；\n- 每个对象只能满足某些请求，这些请求是由对象的接口所定义的，决定接口的是类型；\n\n## 1.3 每个对象都提供服务\n内聚：每个对象都可以完成某一项任务，但是不要试图做更多的事情；\n\n## 1.4 被隐藏的具体实现\n\nJava 使用三个关键字在类的内部设定边界：\n- public :其紧随其后的元素对任何人都是可以使用的；\n- private : 除了类型的创建者和类型的内部方法之外任何人不能访问；\n- protected ：几乎同上，只是继承的类是可以访问 protected 成员；\n\nJava 默认的访问权限是：包访问权限，即类可以访问同一个包（库构件）中的其他类成员，但是在包之外不能访问；\n\n\n## 1.5 复用具体体现\n\n**组合：** 使用现有类合成新的类；\n**聚合：** 如果组合是动态发生的，称之为聚合\n\n==在构建新类时候，优先考虑组合，然后才是继承==\n\n## 1.6 继承\n继承针对：基类 和 继承类，体现了相似性和差异性；\n\n",[[1562457602003,["GJX@GJXAIOU",[[1,940,"（）"]],[940,940],[942,942]]],[1562457608237,["GJX@GJXAIOU",[[1,941,"超类、父类"]],[941,941],[946,946]]],[1562457631132,["GJX@GJXAIOU",[[1,967,"\n"]],[965,965],[966,966]]],[1562457634355,["GJX@GJXAIOU",[[1,966,"继承"]],[966,966],[968,968]]],[1562457636132,["GJX@GJXAIOU",[[-1,966,"继承"]],[968,968],[966,966]]],[1562457636753,["GJX@GJXAIOU",[[1,968,"\n"]],[966,966],[967,967]]],[1562457637316,["GJX@GJXAIOU",[[1,967," "]],[967,967],[968,968]]],[1562457638211,["GJX@GJXAIOU",[[-1,967," "]],[968,968],[967,967]]],[1562457665389,["GJX@GJXAIOU",[[1,967,"- 继承现有类型的时候，也就创造了新的类型，"]],[967,967],[989,989]]],[1562457703796,["GJX@GJXAIOU",[[1,989,"新的类型不仅仅包括现有类型的所有成员，中的"]],[989,989],[1010,1010]]],[1562457704351,["GJX@GJXAIOU",[[-1,1008,"中的"]],[1010,1010],[1008,1008]]],[1562457710261,["GJX@GJXAIOU",[[1,1008,"重要的是：===="]],[1008,1008],[1015,1015]]],[1562457711442,["GJX@GJXAIOU",[[-1,1016,"="]],[1015,1015],[1014,1014]]],[1562457714314,["GJX@GJXAIOU",[[-1,1012,"：==="]],[1015,1015],[1012,1012]]],[1562457717699,["GJX@GJXAIOU",[[1,1012,"：****"]],[1012,1012],[1015,1015]]],[1562457725037,["GJX@GJXAIOU",[[1,1015,"它复制了基类的忌口"]],[1015,1015],[1024,1024]]],[1562457726632,["GJX@GJXAIOU",[[-1,1022,"忌口"]],[1024,1024],[1022,1022]]],[1562457727883,["GJX@GJXAIOU",[[1,1022,"接口"]],[1022,1022],[1024,1024]]],[1562457738065,["GJX@GJXAIOU",[[1,1026,"，即****"]],[1026,1026],[1030,1030]]],[1562457744605,["GJX@GJXAIOU",[[1,1030,"所有可以放松给"]],[1030,1030],[1037,1037]]],[1562457766365,["GJX@GJXAIOU",[[1,1037,"基类对象的消息同时发送给导出类对象；"]],[1037,1037],[1055,1055]]],[1562457767463,["GJX@GJXAIOU",[[-1,1054,"；"]],[1055,1055],[1054,1054]]],[1562457771205,["GJX@GJXAIOU",[[1,1056,"；"]],[1056,1056],[1057,1057]]],[1562457776041,["GJX@GJXAIOU",[[1,1058,"- \n"]],[1057,1057],[1060,1060]]],[1562457795340,["GJX@GJXAIOU",[[1,1060,"使基类和导出类产生差异的两种方式："]],[1060,1060],[1077,1077]]],[1562457795783,["GJX@GJXAIOU",[[1,1078,"- \n"]],[1077,1077],[1080,1080]]],[1562457796654,["GJX@GJXAIOU",[[1,1078,"  "]],[1080,1080],[1082,1082]]],[1562457804244,["GJX@GJXAIOU",[[1,1082,"继承类中增加"]],[1082,1082],[1088,1088]]],[1562457809019,["GJX@GJXAIOU",[[1,1088,"新的方法；"]],[1088,1088],[1093,1093]]],[1562457809314,["GJX@GJXAIOU",[[1,1094,"  - \n"]],[1093,1093],[1098,1098]]],[1562457817965,["GJX@GJXAIOU",[[1,1098,"改变"]],[1098,1098],[1100,1100]]],[1562457818789,["GJX@GJXAIOU",[[-1,1097," 改变"]],[1100,1100],[1097,1097]]],[1562457843619,["GJX@GJXAIOU",[[1,1097," 继承类中改变现有基类的方法（）"]],[1097,1097],[1113,1113]]],[1562457849915,["GJX@GJXAIOU",[[-1,1111,"（）"]],[1113,1113],[1111,1111]]],[1562457863227,["GJX@GJXAIOU",[[1,1111,"，相当于重写父类的方法，"]],[1111,1111],[1123,1123]]],[1562457874083,["GJX@GJXAIOU",[[1,1123,"称之为：覆盖"]],[1123,1123],[1129,1129]]],[1562457874824,["GJX@GJXAIOU",[[1,1130,"  - \n"]],[1129,1129],[1134,1134]]],[1562457892213,["GJX@GJXAIOU",[[-1,1131," - "]],[1134,1134],[1131,1131]]],[1562457893223,["GJX@GJXAIOU",[[-1,1130," "],[1,1131,"\n"]],[1131,1131],[1131,1131]]],[1562457912060,["GJX@GJXAIOU",[[1,1131,"### 1.6.1 “是一个”和“像是一个”关系"]],[1131,1131],[1155,1155]]],[1562457912484,["GJX@GJXAIOU",[[1,1157,"\n"]],[1155,1155],[1156,1156]]],[1562457923119,["GJX@GJXAIOU",[[1,1156,"替代元组"]],[1156,1156],[1160,1160]]],[1562457923703,["GJX@GJXAIOU",[[-1,1158,"元组"]],[1160,1160],[1158,1158]]],[1562457980845,["GJX@GJXAIOU",[[1,1158,"原则：继承类只是覆盖了基类的方法，不添加弗雷真没有的新方法；"]],[1158,1158],[1188,1188]]],[1562457987579,["GJX@GJXAIOU",[[-1,1178,"弗雷真"]],[1180,1180],[1178,1178]]],[1562457991268,["GJX@GJXAIOU",[[1,1178,"基类中"]],[1178,1178],[1181,1181]]],[1562457996794,["GJX@GJXAIOU",[[1,1190,"\n"]],[1188,1188],[1189,1189]]],[1562458019235,["GJX@GJXAIOU",[[1,1160,"（）"]],[1160,1160],[1162,1162]]],[1562458021549,["GJX@GJXAIOU",[[1,1161,"村崔"]],[1161,1161],[1163,1163]]],[1562458022173,["GJX@GJXAIOU",[[-1,1161,"村崔"]],[1163,1163],[1161,1161]]],[1562458025669,["GJX@GJXAIOU",[[1,1161,"纯粹替代"]],[1161,1161],[1165,1165]]],[1562458032504,["GJX@GJXAIOU",[[1,1197,"\n"]],[1194,1194],[1195,1195]]],[1562458066253,["GJX@GJXAIOU",[[1,1195,"像是一个：继承类中增加了基类中没有的新方法；"]],[1195,1195],[1217,1217]]],[1562458071363,["GJX@GJXAIOU",[[1,1220,"\n"]],[1217,1217],[1218,1218]]],[1562458071533,["GJX@GJXAIOU",[[1,1221,"\n"]],[1218,1218],[1219,1219]]],[1562458071702,["GJX@GJXAIOU",[[1,1222,"\n"]],[1219,1219],[1220,1220]]],[1562458092766,["GJX@GJXAIOU",[[1,1220,"## 1.7 伴随多态的可互换对象"]],[1220,1220],[1237,1237]]],[1562458093234,["GJX@GJXAIOU",[[1,1240,"\n"]],[1237,1237],[1238,1238]]],[1562458099310,["GJX@GJXAIOU",[[1,1237,"（）"]],[1237,1237],[1239,1239]]],[1562458103669,["GJX@GJXAIOU",[[1,1238,"没怎么看懂"]],[1238,1238],[1243,1243]]],[1562458105023,["GJX@GJXAIOU",[[1,1248,"\n"]],[1244,1244],[1245,1245]]],[1562458131561,["GJX@GJXAIOU",[[1,1249,"\n"]],[1245,1245],[1246,1246]]],[1562458136197,["GJX@GJXAIOU",[[1,1246,"后期绑定："]],[1246,1246],[1251,1251]]],[1562458141964,["GJX@GJXAIOU",[[1,1246,"**"],[1,1250,"**"]],[1246,1250],[1246,1254]]],[1562458146294,["GJX@GJXAIOU",[[1,1156,"**"],[1,1166,"**"]],[1156,1166],[1156,1170]]],[1562458251034,["GJX@GJXAIOU",[[1,1250,"\n"]],[1250,1250],[1251,1251]]],[1562458252973,["GJX@GJXAIOU",[[1,1250,"****"]],[1250,1250],[1252,1252]]],[1562458257653,["GJX@GJXAIOU",[[1,1252,"前期绑定"]],[1252,1252],[1256,1256]]],[1562458273036,["GJX@GJXAIOU",[[1,1258,"：编译器将产生一个"]],[1258,1258],[1267,1267]]],[1562458274087,["GJX@GJXAIOU",[[-1,1265,"一个"]],[1267,1267],[1265,1265]]],[1562458284213,["GJX@GJXAIOU",[[1,1265,"对一个具体"]],[1265,1265],[1270,1270]]],[1562458285166,["GJX@GJXAIOU",[[1,1270,"哈舒"]],[1270,1270],[1272,1272]]],[1562458285827,["GJX@GJXAIOU",[[-1,1270,"哈舒"]],[1272,1272],[1270,1270]]],[1562458299909,["GJX@GJXAIOU",[[1,1270,"函数名字的调研就那个"]],[1270,1270],[1280,1280]]],[1562458301290,["GJX@GJXAIOU",[[-1,1275,"调研就那个"]],[1280,1280],[1275,1275]]],[1562458319575,["GJX@GJXAIOU",[[1,1275,"调用，而运行时候"]],[1275,1275],[1283,1283]]],[1562458319930,["GJX@GJXAIOU",[[-1,1282,"候"]],[1283,1283],[1282,1282]]],[1562458320836,["GJX@GJXAIOU",[[1,1282,"间"]],[1282,1282],[1283,1283]]],[1562458330841,["GJX@GJXAIOU",[[-1,1282,"间"]],[1283,1283],[1282,1282]]],[1562458335549,["GJX@GJXAIOU",[[1,1282,"将这个调研"]],[1282,1282],[1287,1287]]],[1562458337214,["GJX@GJXAIOU",[[-1,1285,"调研"]],[1287,1287],[1285,1285]]],[1562458341728,["GJX@GJXAIOU",[[1,1285,"调用解析到"]],[1285,1285],[1290,1290]]],[1562458360621,["GJX@GJXAIOU",[[1,1290,"将要被执行的代码的绝对地址；"]],[1290,1290],[1304,1304]]],[1562458398860,["GJX@GJXAIOU",[[1,1314,"程序直到运行时候才能确定代码的位置；"]],[1314,1314],[1332,1332]]]],null,"GJX@GJXAIOU"],["be47b1f1-06aa-497c-b9f7-752be8051135",1562460758429,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-6'\n---\n\n# 第一章：对象导论\n\n\n## 1.1 抽象过程\n非 OOP（Object-oriented Programming）编程语言的抽象都是要求在解决问题的时候基于计算机的机构，而不是基于要解决的问题的结构进行思考。\n\n在 OOP 中，将问题空间中的元素及其在解空间中的表示称为“对象”；程序可以通过添加新类型的对象使得自身适用于某个特定的问题；\n\n- Java 作为 OOP 的无法特性：\n  - 万物皆对象；\n  - 程序是对象的集合，他们可以通过发送消息来告知彼此所要做的；\n  - 每个对象都有自己的由其他对象所构成的存储；\n  - 每个对象都拥有其类型：即每个对象都是某个类的一个实例，每个类最重要的区别于其他类的特性就是“可以发送什么样的消息给它”；\n  - 某一特定类型的所有对象都可以接收同样的消息；\n\n## 1.2 每个对象都有一个接口\n\n- 创建抽象数据类型（类）是面向对象程序设计的基本概念之一；\n- 类描述了具有相同特性（数据元素）和行为（功能）的对象的集合，因此实际上是一个数据类型；\n- 每个对象只能满足某些请求，这些请求是由对象的接口所定义的，决定接口的是类型；\n\n## 1.3 每个对象都提供服务\n内聚：每个对象都可以完成某一项任务，但是不要试图做更多的事情；\n\n## 1.4 被隐藏的具体实现\n\nJava 使用三个关键字在类的内部设定边界：\n- public :其紧随其后的元素对任何人都是可以使用的；\n- private : 除了类型的创建者和类型的内部方法之外任何人不能访问；\n- protected ：几乎同上，只是继承的类是可以访问 protected 成员；\n\nJava 默认的访问权限是：包访问权限，即类可以访问同一个包（库构件）中的其他类成员，但是在包之外不能访问；\n\n\n## 1.5 复用具体体现\n\n**组合：** 使用现有类合成新的类；\n**聚合：** 如果组合是动态发生的，称之为聚合\n\n==在构建新类时候，优先考虑组合，然后才是继承==\n\n## 1.6 继承\n继承针对：基类（超类、父类） 和 继承类，体现了相似性和差异性；\n\n- 继承现有类型的时候，也就创造了新的类型，新的类型不仅仅包括现有类型的所有成员，重要的是：**它复制了基类的接口**，即**所有可以放松给基类对象的消息同时发送给导出类对象**；\n- 使基类和导出类产生差异的两种方式：\n  - 继承类中增加新的方法；\n  - 继承类中改变现有基类的方法，相当于重写父类的方法，称之为：覆盖\n\n### 1.6.1 “是一个”和“像是一个”关系\n**替代原则（纯粹替代）**：继承类只是覆盖了基类的方法，不添加基类中没有的新方法；\n像是一个：继承类中增加了基类中没有的新方法；\n\n\n## 1.7 伴随多态的可互换对象（没怎么看懂）\n\n**前期绑定**：编译器将产生对一个具体函数名字的调用，而运行时将这个调用解析到将要被执行的代码的绝对地址；\n**后期绑定**：程序直到运行时候才能确定代码的位置；\n\n\n\n",[[1562460727114,["GJX@GJXAIOU",[[1,1336,"\n"]],[1332,1332],[1333,1333]]],[1562460728912,["GJX@GJXAIOU",[[1,1333,"java"]],[1333,1333],[1337,1337]]],[1562460730143,["GJX@GJXAIOU",[[-1,1333,"java"]],[1337,1337],[1333,1333]]],[1562460742525,["GJX@GJXAIOU",[[1,1333,"Java 中动态绑定是某人"]],[1333,1333],[1346,1346]]],[1562460743170,["GJX@GJXAIOU",[[-1,1344,"某人"]],[1346,1346],[1344,1344]]],[1562460751123,["GJX@GJXAIOU",[[1,1344,"默认行为，同时，只有"]],[1344,1344],[1354,1354]]],[1562460771515,["GJX@GJXAIOU",[[1,1354,"除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定；"]],[1354,1354],[1401,1401]]],[1562460793514,["GJX@GJXAIOU",[[1,1405,"\n"]],[1401,1401],[1402,1402]]],[1562460794120,["GJX@GJXAIOU",[[1,1406,"\n"]],[1402,1402],[1403,1403]]],[1562460795637,["GJX@GJXAIOU",[[1,1403,"****"]],[1403,1403],[1405,1405]]],[1562460799219,["GJX@GJXAIOU",[[1,1405,"向上转型"]],[1405,1405],[1409,1409]]],[1562460817549,["GJX@GJXAIOU",[[1,1411,"：将导出类看成是它的"]],[1411,1411],[1421,1421]]],[1562460823697,["GJX@GJXAIOU",[[1,1421,"基类的过程"]],[1421,1421],[1426,1426]]],[1562460844959,["GJX@GJXAIOU",[[1,1430,"\n"]],[1426,1426],[1427,1427]]],[1562460845095,["GJX@GJXAIOU",[[1,1431,"\n"]],[1427,1427],[1428,1428]]],[1562460845265,["GJX@GJXAIOU",[[1,1432,"\n"]],[1428,1428],[1429,1429]]],[1562460846119,["GJX@GJXAIOU",[[1,1433,"\n"]],[1429,1429],[1430,1430]]],[1562460857715,["GJX@GJXAIOU",[[1,1430,"## 1.8 单根继承结构"]],[1430,1430],[1443,1443]]],[1562460858040,["GJX@GJXAIOU",[[1,1447,"\n"]],[1443,1443],[1444,1444]]],[1562460858176,["GJX@GJXAIOU",[[1,1448,"\n"]],[1444,1444],[1445,1445]]],[1562460877860,["GJX@GJXAIOU",[[1,1445,"Java所有"]],[1445,1445],[1451,1451]]],[1562460877889,["GJX@GJXAIOU",[[1,1449," "]],[1451,1451],[1452,1452]]],[1562460878259,["GJX@GJXAIOU",[[1,1452,"的"]],[1452,1452],[1453,1453]]],[1562460900348,["GJX@GJXAIOU",[[1,1453,"类最终都继承自单一的基类：Object"]],[1453,1453],[1472,1472]]],[1562460943522,["GJX@GJXAIOU",[[1,1472,"；"]],[1472,1472],[1473,1473]]],[1562460944233,["GJX@GJXAIOU",[[1,1477,"\n"]],[1473,1473],[1474,1474]]],[1562460949883,["GJX@GJXAIOU",[[1,1474,"优势："]],[1474,1474],[1477,1477]]],[1562460950152,["GJX@GJXAIOU",[[1,1481,"\n"]],[1477,1477],[1478,1478]]],[1562460964206,["GJX@GJXAIOU",[[1,1478,"- 单根继承结构找那个多有点额"]],[1478,1478],[1493,1493]]],[1562460965329,["GJX@GJXAIOU",[[-1,1489,"多有点额"]],[1493,1493],[1489,1489]]],[1562460979180,["GJX@GJXAIOU",[[1,1489,"所有的对象都具有一个公用接口"]],[1489,1489],[1503,1503]]],[1562460984688,["GJX@GJXAIOU",[[-1,1499,"公用接口"]],[1503,1503],[1499,1499]]],[1562460995300,["GJX@GJXAIOU",[[1,1499,"共用接口，因此它们"]],[1499,1499],[1508,1508]]],[1562461007033,["GJX@GJXAIOU",[[1,1508,"归根到底都是相同的基本类型；"]],[1508,1508],[1522,1522]]],[1562461009103,["GJX@GJXAIOU",[[1,1523,"- \n"]],[1522,1522],[1525,1525]]],[1562461031706,["GJX@GJXAIOU",[[1,1525,"单根继承结构保证多有"]],[1525,1525],[1535,1535]]],[1562461032782,["GJX@GJXAIOU",[[-1,1533,"多有"]],[1535,1535],[1533,1533]]],[1562461045107,["GJX@GJXAIOU",[[1,1533,"所有的对象都具有某些功能"]],[1533,1533],[1545,1545]]],[1562461053910,["GJX@GJXAIOU",[[1,1546,"- \n"]],[1545,1545],[1548,1548]]],[1562461060737,["GJX@GJXAIOU",[[1,1545,"；"]],[1545,1545],[1546,1546]]],[1562461085843,["GJX@GJXAIOU",[[1,1549,"单根继承结构使垃圾回收器的实现变得容易；"]],[1549,1549],[1569,1569]]],[1562461159503,["GJX@GJXAIOU",[[1,1573,"\n"]],[1570,1570],[1571,1571]]],[1562461176720,["GJX@GJXAIOU",[[1,1571,"## 1.9 容器"]],[1571,1571],[1580,1580]]],[1562461177297,["GJX@GJXAIOU",[[1,1583,"\n"]],[1580,1580],[1581,1581]]],[1562461178422,["GJX@GJXAIOU",[[1,1584,"\n"]],[1581,1581],[1582,1582]]],[1562461216629,["GJX@GJXAIOU",[[1,1582,"解决目标：当不知道在解决某个特定额"]],[1582,1582],[1599,1599]]],[1562461217217,["GJX@GJXAIOU",[[-1,1598,"额"]],[1599,1599],[1598,1598]]],[1562461236745,["GJX@GJXAIOU",[[1,1598,"的问题需要多少的对象，或者它们将"]],[1598,1598],[1614,1614]]],[1562461241176,["GJX@GJXAIOU",[[1,1614,"存货"]],[1614,1614],[1616,1616]]],[1562461241767,["GJX@GJXAIOU",[[-1,1614,"存货"]],[1616,1616],[1614,1614]]],[1562461253130,["GJX@GJXAIOU",[[1,1614,"存活多久的时候，不要"]],[1614,1614],[1624,1624]]],[1562461253943,["GJX@GJXAIOU",[[-1,1622,"不要"]],[1624,1624],[1622,1622]]],[1562461278675,["GJX@GJXAIOU",[[1,1622,"需要知道需要多少空间来穿件"]],[1622,1622],[1635,1635]]],[1562461279254,["GJX@GJXAIOU",[[-1,1633,"穿件"]],[1635,1635],[1633,1633]]],[1562461285498,["GJX@GJXAIOU",[[1,1633,"创建这些对象；"]],[1633,1633],[1640,1640]]],[1562461285969,["GJX@GJXAIOU",[[1,1643,"\n"]],[1640,1640],[1641,1641]]],[1562461296767,["GJX@GJXAIOU",[[1,1644,"\n"]],[1641,1641],[1642,1642]]],[1562461298425,["GJX@GJXAIOU",[[1,1642,"解决"]],[1642,1642],[1644,1644]]],[1562461310410,["GJX@GJXAIOU",[[1,1644,"方法：创建另一种对象类型，这种的"]],[1644,1644],[1660,1660]]],[1562461311312,["GJX@GJXAIOU",[[-1,1659,"的"]],[1660,1660],[1659,1659]]],[1562461328241,["GJX@GJXAIOU",[[1,1659,"新的对象类型持有对其它对象的应用"]],[1659,1659],[1675,1675]]],[1562461329039,["GJX@GJXAIOU",[[-1,1673,"应用"]],[1675,1675],[1673,1673]]],[1562461351596,["GJX@GJXAIOU",[[1,1673,"引用；称之为：容器；"]],[1673,1673],[1683,1683]]],[1562461406041,["GJX@GJXAIOU",[[1,1683,"例如：list、map、set都是"]],[1683,1683],[1700,1700]]],[1562461406067,["GJX@GJXAIOU",[[1,1698," "]],[1700,1700],[1701,1701]]],[1562461409385,["GJX@GJXAIOU",[[1,1701,"一种容器；"]],[1701,1701],[1706,1706]]],[1562461411598,["GJX@GJXAIOU",[[1,1709,"\n"]],[1706,1706],[1707,1707]]],[1562461411728,["GJX@GJXAIOU",[[1,1710,"\n"]],[1707,1707],[1708,1708]]],[1562461415040,["GJX@GJXAIOU",[[1,1708,"### 1.8"]],[1708,1708],[1715,1715]]],[1562461415640,["GJX@GJXAIOU",[[-1,1714,"8"]],[1715,1715],[1714,1714]]],[1562461417545,["GJX@GJXAIOU",[[1,1714,"9.1 "]],[1714,1714],[1718,1718]]],[1562461423314,["GJX@GJXAIOU",[[1,1718,"参数化类型（）"]],[1718,1718],[1725,1725]]],[1562461426194,["GJX@GJXAIOU",[[1,1724,"泛型"]],[1724,1724],[1726,1726]]],[1562461427734,["GJX@GJXAIOU",[[1,1730,"\n"]],[1727,1727],[1728,1728]]],[1562461447637,["GJX@GJXAIOU",[[1,1728,"****"]],[1728,1728],[1730,1730]]],[1562461452515,["GJX@GJXAIOU",[[1,1730,"向下转型"]],[1730,1730],[1734,1734]]],[1562461476362,["GJX@GJXAIOU",[[1,1736,"：将一个泛化的类型"]],[1736,1736],[1745,1745]]],[1562461486696,["GJX@GJXAIOU",[[1,1745,"转换为一个更加具体的类型；"]],[1745,1745],[1758,1758]]],[1562461515286,["GJX@GJXAIOU",[[1,1761,"\n"]],[1758,1758],[1759,1759]]],[1562461534035,["GJX@GJXAIOU",[[1,1759,"使用泛型可以减少向下转型带来的"]],[1759,1759],[1774,1774]]],[1562461545057,["GJX@GJXAIOU",[[1,1774,"强制类型转换"]],[1774,1774],[1780,1780]]],[1562461576422,["GJX@GJXAIOU",[[1,1783,"\n"]],[1780,1780],[1781,1781]]],[1562461576550,["GJX@GJXAIOU",[[1,1784,"\n"]],[1781,1781],[1782,1782]]],[1562461576678,["GJX@GJXAIOU",[[1,1785,"\n"]],[1782,1782],[1783,1783]]],[1562461578376,["GJX@GJXAIOU",[[1,1783,"2"]],[1783,1783],[1784,1784]]],[1562461579334,["GJX@GJXAIOU",[[-1,1783,"2"]],[1784,1784],[1783,1783]]],[1562461587394,["GJX@GJXAIOU",[[1,1783,"## 1.10 对象的穿件"]],[1783,1783],[1796,1796]]],[1562461587958,["GJX@GJXAIOU",[[-1,1794,"穿件"]],[1796,1796],[1794,1794]]],[1562461589985,["GJX@GJXAIOU",[[1,1794,"穿件"]],[1794,1794],[1796,1796]]],[1562461590597,["GJX@GJXAIOU",[[-1,1794,"穿件"]],[1796,1796],[1794,1794]]],[1562461593674,["GJX@GJXAIOU",[[1,1794,"创建和"]],[1794,1794],[1797,1797]]],[1562461599766,["GJX@GJXAIOU",[[1,1797,"生命期"]],[1797,1797],[1800,1800]]],[1562461600223,["GJX@GJXAIOU",[[1,1803,"\n"]],[1800,1800],[1801,1801]]],[1562461600583,["GJX@GJXAIOU",[[1,1804,"\n"]],[1801,1801],[1802,1802]]],[1562461655004,["GJX@GJXAIOU",[[1,1802,"- 对象防止"]],[1802,1802],[1808,1808]]],[1562461655999,["GJX@GJXAIOU",[[-1,1806,"防止"]],[1808,1808],[1806,1806]]],[1562461665219,["GJX@GJXAIOU",[[1,1806,"放置在堆栈去"]],[1806,1806],[1812,1812]]],[1562461667415,["GJX@GJXAIOU",[[-1,1809,"堆栈去"]],[1812,1812],[1809,1809]]],[1562461667970,["GJX@GJXAIOU",[[1,1809,"d"]],[1809,1809],[1810,1810]]],[1562461667997,["GJX@GJXAIOU",[[1,1809," "]],[1810,1810],[1811,1811]]],[1562461668664,["GJX@GJXAIOU",[[1,1811,"uizha"]],[1811,1811],[1816,1816]]],[1562461669791,["GJX@GJXAIOU",[[-1,1810,"duizha"]],[1816,1816],[1810,1810]]],[1562461673203,["GJX@GJXAIOU",[[1,1810,"堆栈去"]],[1810,1810],[1813,1813]]],[1562461673711,["GJX@GJXAIOU",[[-1,1812,"去"]],[1813,1813],[1812,1812]]],[1562461676258,["GJX@GJXAIOU",[[1,1812,"区（）"]],[1812,1812],[1815,1815]]],[1562461717722,["GJX@GJXAIOU",[[1,1814,"自动变量、限域变量"]],[1814,1814],[1823,1823]]],[1562461723107,["GJX@GJXAIOU",[[1,1823,"、"]],[1823,1823],[1824,1824]]],[1562461724895,["GJX@GJXAIOU",[[-1,1823,"、"]],[1824,1824],[1823,1823]]],[1562461731635,["GJX@GJXAIOU",[[1,1823,"或静态存储区域"]],[1823,1823],[1830,1830]]],[1562461765474,["GJX@GJXAIOU",[[1,1831,"，"]],[1831,1831],[1832,1832]]],[1562461796924,["GJX@GJXAIOU",[[1,1832,"优先考虑存储空间的分配以及生命"]],[1832,1832],[1847,1847]]],[1562461798862,["GJX@GJXAIOU",[[-1,1845,"生命"]],[1847,1847],[1845,1845]]],[1562461823834,["GJX@GJXAIOU",[[1,1845,"释放，但是牺牲灵活性，编程时候需要"]],[1845,1845],[1862,1862]]],[1562461832945,["GJX@GJXAIOU",[[1,1856,"要求"]],[1856,1856],[1858,1858]]],[1562461834558,["GJX@GJXAIOU",[[-1,1861,"候"]],[1862,1862],[1861,1861]]],[1562461851863,["GJX@GJXAIOU",[[1,1863,"知道对象的确切数量、生命周期与类型；"]],[1863,1863],[1881,1881]]],[1562461854630,["GJX@GJXAIOU",[[1,1882,"- \n"]],[1881,1881],[1884,1884]]],[1562461866777,["GJX@GJXAIOU",[[1,1884,"对象防止在 堆（）"]],[1884,1884],[1893,1893]]],[1562461869410,["GJX@GJXAIOU",[[1,1892,"heap"]],[1892,1892],[1896,1896]]],[1562461874314,["GJX@GJXAIOU",[[1,1897,"的内存中"]],[1897,1897],[1901,1901]]],[1562461874805,["GJX@GJXAIOU",[[-1,1900,"中"]],[1901,1901],[1900,1900]]],[1562461886857,["GJX@GJXAIOU",[[1,1900,"池中动态的创建对象；"]],[1900,1900],[1910,1910]]],[1562461940583,["GJX@GJXAIOU",[[1,1911,"- \n"]],[1910,1910],[1913,1913]]],[1562461941265,["GJX@GJXAIOU",[[1,1911,"  "]],[1913,1913],[1915,1915]]],[1562461953370,["GJX@GJXAIOU",[[1,1915,"1.知道运行时候才知道"]],[1915,1915],[1926,1926]]],[1562461956087,["GJX@GJXAIOU",[[-1,1917,"知道"]],[1919,1919],[1917,1917]]],[1562461958737,["GJX@GJXAIOU",[[1,1917,"直到"]],[1917,1917],[1919,1919]]],[1562461969252,["GJX@GJXAIOU",[[1,1926,"需要多少对象、生命"]],[1926,1926],[1935,1935]]],[1562461970281,["GJX@GJXAIOU",[[-1,1933,"生命"]],[1935,1935],[1933,1933]]],[1562461974969,["GJX@GJXAIOU",[[1,1933,"他们的生命周期、"]],[1933,1933],[1941,1941]]],[1562461976823,["GJX@GJXAIOU",[[-1,1940,"、"]],[1941,1941],[1940,1940]]],[1562461981939,["GJX@GJXAIOU",[[1,1940,"以及具体类型；"]],[1940,1940],[1947,1947]]],[1562462002784,["GJX@GJXAIOU",[[1,1948,"  - \n"]],[1947,1947],[1952,1952]]],[1562462011986,["GJX@GJXAIOU",[[1,1952,"因为存储空间实在"]],[1952,1952],[1960,1960]]],[1562462013070,["GJX@GJXAIOU",[[-1,1958,"实在"]],[1960,1960],[1958,1958]]],[1562462018424,["GJX@GJXAIOU",[[1,1958,"是在运行的时候"]],[1958,1958],[1965,1965]]],[1562462062717,["GJX@GJXAIOU",[[1,1965,"进行动态分配的，所以需要大量的时间在堆中分配存储空间，这可能要远远大于在堆栈中穿件存储空间啊"]],[1965,1965],[2011,2011]]],[1562462063134,["GJX@GJXAIOU",[[-1,2010,"啊"]],[2011,2011],[2010,2010]]],[1562462065608,["GJX@GJXAIOU",[[-1,2004,"穿件"]],[2006,2006],[2004,2004]]],[1562462070907,["GJX@GJXAIOU",[[1,2004,"创建"]],[2004,2004],[2006,2006]]],[1562462077800,["GJX@GJXAIOU",[[1,2010,"的时间。在"]],[2010,2010],[2015,2015]]],[1562462084586,["GJX@GJXAIOU",[[1,2015,"堆栈中穿件"]],[2015,2015],[2020,2020]]],[1562462087725,["GJX@GJXAIOU",[[-1,2018,"穿件"]],[2020,2020],[2018,2018]]],[1562462132971,["GJX@GJXAIOU",[[1,2018,"存储空间和释放存储空间通常各需要一条汇编指令即可，分别对应将栈顶指针"]],[2018,2018],[2052,2052]]],[1562462172964,["GJX@GJXAIOU",[[1,2052,"向下移动和栈顶指针向上移动。创建对"]],[2052,2052],[2069,2069]]],[1562462173494,["GJX@GJXAIOU",[[-1,2068,"对"]],[2069,2069],[2068,2068]]],[1562462185579,["GJX@GJXAIOU",[[1,2068,"堆存储空间的时间需要"]],[2068,2068],[2078,2078]]],[1562462188151,["GJX@GJXAIOU",[[-1,2076,"需要"]],[2078,2078],[2076,2076]]],[1562462195459,["GJX@GJXAIOU",[[1,2076,"依赖于存储机制的设计；"]],[2076,2076],[2087,2087]]],[1562462201953,["GJX@GJXAIOU",[[1,2088,"  - \n"]],[2087,2087],[2092,2092]]],[1562462225086,["GJX@GJXAIOU",[[-1,2088,"  - "]],[2092,2092],[2088,2088]]],[1562462227588,["GJX@GJXAIOU",[[1,2088,"- 笔记"]],[2088,2088],[2092,2092]]],[1562462228959,["GJX@GJXAIOU",[[-1,2088,"- 笔记"]],[2092,2092],[2088,2088]]],[1562462229887,["GJX@GJXAIOU",[[1,2091,"\n"]],[2088,2088],[2089,2089]]],[1562462230837,["GJX@GJXAIOU",[[1,2089,"****"]],[2089,2089],[2091,2091]]],[1562462234147,["GJX@GJXAIOU",[[1,2091,"比较："]],[2091,2091],[2094,2094]]],[1562462236720,["GJX@GJXAIOU",[[1,2096," "]],[2096,2096],[2097,2097]]],[1562462239791,["GJX@GJXAIOU",[[1,2100,"\n"]],[2097,2097],[2098,2098]]],[1562462242113,["GJX@GJXAIOU",[[1,2098,"Java"]],[2098,2098],[2102,2102]]],[1562462322033,["GJX@GJXAIOU",[[1,2102,"完全"]],[2102,2102],[2104,2104]]],[1562462322062,["GJX@GJXAIOU",[[1,2102," "]],[2104,2104],[2105,2105]]],[1562462335922,["GJX@GJXAIOU",[[1,2105,"采用动态内存分配方式；"]],[2105,2105],[2116,2116]]],[1562462339527,["GJX@GJXAIOU",[[1,2119,"\n"]],[2116,2116],[2117,2117]]],[1562462345565,["GJX@GJXAIOU",[[1,2117,"- 在堆栈上穿件"]],[2117,2117],[2125,2125]]],[1562462347103,["GJX@GJXAIOU",[[-1,2123,"穿件"]],[2125,2125],[2123,2123]]],[1562462375347,["GJX@GJXAIOU",[[1,2123,"创建对象，编译器可以确定对象的存活时间，并可以自动销毁；"]],[2123,2123],[2151,2151]]],[1562462375625,["GJX@GJXAIOU",[[1,2152,"- \n"]],[2151,2151],[2154,2154]]],[1562462382421,["GJX@GJXAIOU",[[1,2154,"在堆上穿件"]],[2154,2154],[2159,2159]]],[1562462383045,["GJX@GJXAIOU",[[-1,2157,"穿件"]],[2159,2159],[2157,2157]]],[1562462400674,["GJX@GJXAIOU",[[1,2157,"创建对象，编译器对对西南的"]],[2157,2157],[2170,2170]]],[1562462401517,["GJX@GJXAIOU",[[-1,2166,"对西南的"]],[2170,2170],[2166,2166]]],[1562462416937,["GJX@GJXAIOU",[[1,2166,"对象的生命周期一无所知，只能使用Java"]],[2166,2166],[2186,2186]]],[1562462416970,["GJX@GJXAIOU",[[1,2182," "]],[2186,2186],[2187,2187]]],[1562462417345,["GJX@GJXAIOU",[[1,2187,"的"]],[2187,2187],[2188,2188]]],[1562462417374,["GJX@GJXAIOU",[[1,2187," "]],[2188,2188],[2189,2189]]],[1562462422610,["GJX@GJXAIOU",[[1,2189,"垃圾回收机制"]],[2189,2189],[2195,2195]]],[1562462425407,["GJX@GJXAIOU",[[-1,2193,"机制"]],[2195,2195],[2193,2193]]],[1562462428679,["GJX@GJXAIOU",[[1,2193,"器；"]],[2193,2193],[2195,2195]]]],null,"GJX@GJXAIOU"],["6748624b-dde4-49ca-8aaa-cb0be3dcc500",1563154566076,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-6'\n---\n\n# 第一章：对象导论\n\n\n## 1.1 抽象过程\n非 OOP（Object-oriented Programming）编程语言的抽象都是要求在解决问题的时候基于计算机的机构，而不是基于要解决的问题的结构进行思考。\n\n在 OOP 中，将问题空间中的元素及其在解空间中的表示称为“对象”；程序可以通过添加新类型的对象使得自身适用于某个特定的问题；\n\n- Java 作为 OOP 的无法特性：\n  - 万物皆对象；\n  - 程序是对象的集合，他们可以通过发送消息来告知彼此所要做的；\n  - 每个对象都有自己的由其他对象所构成的存储；\n  - 每个对象都拥有其类型：即每个对象都是某个类的一个实例，每个类最重要的区别于其他类的特性就是“可以发送什么样的消息给它”；\n  - 某一特定类型的所有对象都可以接收同样的消息；\n\n## 1.2 每个对象都有一个接口\n\n- 创建抽象数据类型（类）是面向对象程序设计的基本概念之一；\n- 类描述了具有相同特性（数据元素）和行为（功能）的对象的集合，因此实际上是一个数据类型；\n- 每个对象只能满足某些请求，这些请求是由对象的接口所定义的，决定接口的是类型；\n\n## 1.3 每个对象都提供服务\n内聚：每个对象都可以完成某一项任务，但是不要试图做更多的事情；\n\n## 1.4 被隐藏的具体实现\n\nJava 使用三个关键字在类的内部设定边界：\n- public :其紧随其后的元素对任何人都是可以使用的；\n- private : 除了类型的创建者和类型的内部方法之外任何人不能访问；\n- protected ：几乎同上，只是继承的类是可以访问 protected 成员；\n\nJava 默认的访问权限是：包访问权限，即类可以访问同一个包（库构件）中的其他类成员，但是在包之外不能访问；\n\n\n## 1.5 复用具体体现\n\n**组合：** 使用现有类合成新的类；\n**聚合：** 如果组合是动态发生的，称之为聚合\n\n==在构建新类时候，优先考虑组合，然后才是继承==\n\n## 1.6 继承\n继承针对：基类（超类、父类） 和 继承类，体现了相似性和差异性；\n\n- 继承现有类型的时候，也就创造了新的类型，新的类型不仅仅包括现有类型的所有成员，重要的是：**它复制了基类的接口**，即**所有可以放松给基类对象的消息同时发送给导出类对象**；\n- 使基类和导出类产生差异的两种方式：\n  - 继承类中增加新的方法；\n  - 继承类中改变现有基类的方法，相当于重写父类的方法，称之为：覆盖\n\n### 1.6.1 “是一个”和“像是一个”关系\n**替代原则（纯粹替代）**：继承类只是覆盖了基类的方法，不添加基类中没有的新方法；\n像是一个：继承类中增加了基类中没有的新方法；\n\n\n## 1.7 伴随多态的可互换对象（没怎么看懂）\n\n**前期绑定**：编译器将产生对一个具体函数名字的调用，而运行时将这个调用解析到将要被执行的代码的绝对地址；\n**后期绑定**：程序直到运行时候才能确定代码的位置；\nJava 中动态绑定是默认行为，同时，只有除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定；\n\n**向上转型**：将导出类看成是它的基类的过程\n\n\n\n## 1.8 单根继承结构\n\nJava 所有的类最终都继承自单一的基类：Object；\n优势：\n- 单根继承结构找那个所有的对象都具有一个共用接口，因此它们归根到底都是相同的基本类型；\n- 单根继承结构保证所有的对象都具有某些功能；\n- 单根继承结构使垃圾回收器的实现变得容易；\n\n## 1.9 容器\n\n解决目标：当不知道在解决某个特定的问题需要多少的对象，或者它们将存活多久的时候，需要知道需要多少空间来创建这些对象；\n\n解决方法：创建另一种对象类型，这种新的对象类型持有对其它对象的引用；称之为：容器；例如：list、map、set 都是一种容器；\n\n### 1.9.1 参数化类型（泛型）\n**向下转型**：将一个泛化的类型转换为一个更加具体的类型；\n使用泛型可以减少向下转型带来的强制类型转换\n\n\n## 1.10 对象的创建和生命期\n\n- 对象放置在 堆栈区（自动变量、限域变量或静态存储区域），优先考虑存储空间的分配以及释放，但是牺牲灵活性，要求编程时需要知道对象的确切数量、生命周期与类型；\n- 对象防止在 堆（heap）的内存池中动态的创建对象；\n  - 1.直到运行时候才知道需要多少对象、他们的生命周期以及具体类型；\n  - 因为存储空间是在运行的时候进行动态分配的，所以需要大量的时间在堆中分配存储空间，这可能要远远大于在堆栈中创建存储空间的时间。在堆栈中存储空间和释放存储空间通常各需要一条汇编指令即可，分别对应将栈顶指针向下移动和栈顶指针向上移动。创建堆存储空间的时间依赖于存储机制的设计；\n\n**比较：** \nJava 完全采用动态内存分配方式；\n- 在堆栈上创建对象，编译器可以确定对象的存活时间，并可以自动销毁；\n- 在堆上创建对象，编译器对对象的生命周期一无所知，只能使用 Java 的垃圾回收器；\n\n\n",[[1563154552420,["GJX@GJXAIOU",[[-1,265,"无法"]],[267,267],[265,265]]],[1563154562473,["GJX@GJXAIOU",[[1,265,"五种"]],[265,265],[267,267]]],[1563154762018,["GJX@GJXAIOU",[[-1,1034,"放松"]],[1036,1036],[1034,1034]]],[1563154764156,["GJX@GJXAIOU",[[1,1034,"发送"]],[1034,1034],[1036,1036]]],[1563156754591,["GJX@GJXAIOU",[[1,1403,"=="],[1,1411,"=="]],[1403,1411],[1403,1415]]],[1563156763252,["GJX@GJXAIOU",[[1,1405,"=="],[1,1413,"=="]],[1403,1415],[1403,1419]]],[1563156769203,["GJX@GJXAIOU",[[-1,1417,"=="]],[1417,1417],[1415,1415]]],[1563156770967,["GJX@GJXAIOU",[[-1,1405,"=="]],[1406,1406],[1404,1404]]],[1563156778452,["GJX@GJXAIOU",[[1,1249,"jian"]],[1249,1249],[1253,1253]]],[1563156779396,["GJX@GJXAIOU",[[-1,1249,"jian"]],[1253,1253],[1249,1249]]],[1563156785252,["GJX@GJXAIOU",[[1,1249,"见"]],[1249,1249],[1250,1250]]],[1563156792855,["GJX@GJXAIOU",[[1,1250," Java-"]],[1250,1250],[1256,1256]]],[1563156795202,["GJX@GJXAIOU",[[-1,1255,"-"]],[1256,1256],[1255,1255]]],[1563156797181,["GJX@GJXAIOU",[[1,1255," - 》"]],[1255,1255],[1259,1259]]],[1563156797996,["GJX@GJXAIOU",[[-1,1257," 》"]],[1259,1259],[1257,1257]]],[1563156801251,["GJX@GJXAIOU",[[1,1257,"> Blos"]],[1257,1257],[1263,1263]]],[1563156801796,["GJX@GJXAIOU",[[-1,1262,"s"]],[1263,1263],[1262,1262]]],[1563156809694,["GJX@GJXAIOU",[[1,1262,"g ->Java中"]],[1262,1262],[1271,1271]]],[1563156809730,["GJX@GJXAIOU",[[1,1270," "]],[1271,1271],[1272,1272]]],[1563156815920,["GJX@GJXAIOU",[[1,1272,"的绑定、前期"]],[1272,1272],[1278,1278]]],[1563156819372,["GJX@GJXAIOU",[[-1,1276,"前期"]],[1278,1278],[1276,1276]]],[1563156828221,["GJX@GJXAIOU",[[1,1276,"前期绑定、后期绑定"]],[1276,1276],[1285,1285]]],[1563156830802,["GJX@GJXAIOU",[[1,1286,"\n"]],[1285,1285],[1286,1286]]],[1563157143387,["GJX@GJXAIOU",[[-1,1927,"防止"]],[1929,1929],[1927,1927]]],[1563157145102,["GJX@GJXAIOU",[[1,1927,"防止"]],[1927,1927],[1929,1929]]],[1563157145676,["GJX@GJXAIOU",[[-1,1927,"防止"]],[1929,1929],[1927,1927]]],[1563157147663,["GJX@GJXAIOU",[[1,1927,"放置"]],[1927,1927],[1929,1929]]],[1563157313967,["GJX@GJXAIOU",[[1,2058," "]],[2058,2058],[2059,2059]]]],null,"GJX@GJXAIOU"]]}