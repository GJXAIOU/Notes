{"compress":true,"commitItems":[["aa877cde-2206-4910-8a0e-b45ec7e01823",1562506676068,"",[[1562506628172,["GJX@GJXAIOU",[[1,0,"# 第三章：操作符\n\n\n\n"]],[0,0],[12,12]]],[1562506789587,["GJX@GJXAIOU",[[1,11,"## 3.3 优先级"]],[11,11],[21,21]]],[1562506789911,["GJX@GJXAIOU",[[1,23,"\n"]],[21,21],[22,22]]],[1562506830284,["GJX@GJXAIOU",[[1,22,"当编译器观察到一个String"]],[22,22],[37,37]]],[1562506830306,["GJX@GJXAIOU",[[1,31," "]],[37,37],[38,38]]],[1562506833634,["GJX@GJXAIOU",[[1,38,"后面"]],[38,38],[40,40]]],[1562506833657,["GJX@GJXAIOU",[[1,38," "]],[40,40],[41,41]]],[1562506840072,["GJX@GJXAIOU",[[1,41,"加上一个“+\""]],[41,41],[48,48]]],[1562506840094,["GJX@GJXAIOU",[[-1,47,"\""],[1,48,"”"]],[48,48],[48,48]]],[1562506846225,["GJX@GJXAIOU",[[1,48,"，和后面"]],[48,48],[52,52]]],[1562506847233,["GJX@GJXAIOU",[[-1,49,"和后面"]],[52,52],[49,49]]],[1562506854329,["GJX@GJXAIOU",[[1,49,"后面加上一个非D他ring"]],[49,49],[62,62]]],[1562506854351,["GJX@GJXAIOU",[[1,56," "]],[62,62],[63,63]]],[1562506855920,["GJX@GJXAIOU",[[-1,57,"D他ring"]],[63,63],[57,57]]],[1562506859129,["GJX@GJXAIOU",[[1,57,"String类型"]],[57,57],[65,65]]],[1562506859150,["GJX@GJXAIOU",[[1,63," "]],[65,65],[66,66]]],[1562506875345,["GJX@GJXAIOU",[[1,66,"的元素，会将这个非String"]],[66,66],[81,81]]],[1562506875367,["GJX@GJXAIOU",[[1,75," "]],[81,81],[82,82]]],[1562506877331,["GJX@GJXAIOU",[[1,82,"元素"]],[82,82],[84,84]]],[1562506877353,["GJX@GJXAIOU",[[1,82," "]],[84,84],[85,85]]],[1562506882586,["GJX@GJXAIOU",[[1,85,"转换为String"]],[85,85],[94,94]]],[1562506882607,["GJX@GJXAIOU",[[1,88," "]],[94,94],[95,95]]],[1562506883739,["GJX@GJXAIOU",[[1,95,"元素"]],[95,95],[97,97]]],[1562506883761,["GJX@GJXAIOU",[[1,95," "]],[97,97],[98,98]]],[1562506937823,["GJX@GJXAIOU",[[1,100,"\n"]],[99,99],[100,100]]],[1562506943978,["GJX@GJXAIOU",[[1,100,"## 3.4 赋值"]],[100,100],[109,109]]],[1562506944335,["GJX@GJXAIOU",[[1,110,"\n"]],[109,109],[110,110]]],[1562506948985,["GJX@GJXAIOU",[[1,111,"\n"]],[110,110],[111,111]]],[1562506949394,["GJX@GJXAIOU",[[-1,111,"\n"],[1,112,"-"]],[111,111],[112,112]]],[1562506951455,["GJX@GJXAIOU",[[1,112," “-"]],[112,112],[115,115]]],[1562506951985,["GJX@GJXAIOU",[[-1,114,"-"]],[115,115],[114,114]]],[1562506954487,["GJX@GJXAIOU",[[1,114,"=”h"]],[114,114],[117,117]]],[1562506955408,["GJX@GJXAIOU",[[-1,115,"”h"]],[117,117],[115,115]]],[1562506956399,["GJX@GJXAIOU",[[1,115,"'"]],[115,115],[116,116]]],[1562506956421,["GJX@GJXAIOU",[[-1,115,"'"],[1,116,"‘"]],[116,116],[116,116]]],[1562506957039,["GJX@GJXAIOU",[[-1,115,"‘"]],[116,116],[115,115]]],[1562506957407,["GJX@GJXAIOU",[[1,115,":"]],[115,115],[116,116]]],[1562506958001,["GJX@GJXAIOU",[[-1,115,":"]],[116,116],[115,115]]],[1562506958671,["GJX@GJXAIOU",[[1,115,"\""]],[115,115],[116,116]]],[1562506958693,["GJX@GJXAIOU",[[-1,115,"\""],[1,116,"”"]],[116,116],[116,116]]],[1562506963585,["GJX@GJXAIOU",[[1,116,"含义："]],[116,116],[119,119]]],[1562506982041,["GJX@GJXAIOU",[[1,119,"将坐标"]],[119,119],[122,122]]],[1562506982647,["GJX@GJXAIOU",[[-1,120,"坐标"]],[122,122],[120,120]]],[1562506989840,["GJX@GJXAIOU",[[1,120,"左边的值 ****"]],[120,120],[127,127]]],[1562506991644,["GJX@GJXAIOU",[[1,127,"赋值"]],[127,127],[129,129]]],[1562506992233,["GJX@GJXAIOU",[[-1,127,"赋值"]],[129,129],[127,127]]],[1562506994001,["GJX@GJXAIOU",[[1,127,"复制"]],[127,127],[129,129]]],[1562506999467,["GJX@GJXAIOU",[[1,131," 给右边的"]],[131,131],[136,136]]],[1562507003835,["GJX@GJXAIOU",[[-1,133,"右"]],[134,134],[133,133]]],[1562507004938,["GJX@GJXAIOU",[[1,133,"做"]],[133,133],[134,134]]],[1562507005799,["GJX@GJXAIOU",[[-1,133,"做"]],[134,134],[133,133]]],[1562507007515,["GJX@GJXAIOU",[[1,133,"左"]],[133,133],[134,134]]],[1562507010566,["GJX@GJXAIOU",[[-1,120,"左"]],[121,121],[120,120]]],[1562507015598,["GJX@GJXAIOU",[[1,120,"右"]],[120,120],[121,121]]],[1562507018953,["GJX@GJXAIOU",[[-1,135,"的"]],[136,136],[135,135]]],[1562507025609,["GJX@GJXAIOU",[[1,135,"；\n- "]],[135,135],[139,139]]],[1562507073612,["GJX@GJXAIOU",[[1,139,"基本数据类型的赋值：基本数据类型存储的是实际的数值，非指向对象的应用"]],[139,139],[173,173]]],[1562507075223,["GJX@GJXAIOU",[[-1,171,"应用"]],[173,173],[171,171]]],[1562507081483,["GJX@GJXAIOU",[[1,171,"引用"]],[171,171],[173,173]]],[1562507155535,["GJX@GJXAIOU",[[1,173,"，因此在赋值的时候，就是直接将一个地方的内容复制到了另一个地方；\n- "]],[173,173],[208,208]]],[1562507177938,["GJX@GJXAIOU",[[1,208,"对象的赋值：例如A"]],[208,208],[217,217]]],[1562507177961,["GJX@GJXAIOU",[[1,216," "]],[217,217],[218,218]]],[1562507181713,["GJX@GJXAIOU",[[1,218,"、Bjun"]],[218,218],[223,223]]],[1562507182376,["GJX@GJXAIOU",[[-1,220,"jun"]],[223,223],[220,220]]],[1562507183908,["GJX@GJXAIOU",[[1,220,"均为"]],[220,220],[222,222]]],[1562507183931,["GJX@GJXAIOU",[[1,220," "]],[222,222],[223,223]]],[1562507192738,["GJX@GJXAIOU",[[1,223,"一个对象，A= B·"]],[223,223],[233,233]]],[1562507193584,["GJX@GJXAIOU",[[-1,232,"·"]],[233,233],[232,232]]],[1562507194002,["GJX@GJXAIOU",[[1,232,"`"]],[232,232],[233,233]]],[1562507195408,["GJX@GJXAIOU",[[1,228,"`"]],[228,228],[229,229]]],[1562507196273,["GJX@GJXAIOU",[[1,230," "]],[230,230],[231,231]]],[1562507201388,["GJX@GJXAIOU",[[1,235,"实现"]],[235,235],[237,237]]],[1562507202343,["GJX@GJXAIOU",[[-1,235,"实现"]],[237,237],[235,235]]],[1562507205931,["GJX@GJXAIOU",[[1,235,"相当于A"]],[235,235],[239,239]]],[1562507205954,["GJX@GJXAIOU",[[1,238," "]],[239,239],[240,240]]],[1562507206596,["GJX@GJXAIOU",[[1,240,"和"]],[240,240],[241,241]]],[1562507206620,["GJX@GJXAIOU",[[1,240," "]],[241,241],[242,242]]],[1562507207739,["GJX@GJXAIOU",[[1,242,"B"]],[242,242],[243,243]]],[1562507207762,["GJX@GJXAIOU",[[1,242," "]],[243,243],[244,244]]],[1562507208722,["GJX@GJXAIOU",[[1,244,"都"]],[244,244],[245,245]]],[1562507208745,["GJX@GJXAIOU",[[1,244," "]],[245,245],[246,246]]],[1562507213979,["GJX@GJXAIOU",[[1,246,"指向了B"]],[246,246],[250,250]]],[1562507214002,["GJX@GJXAIOU",[[1,249," "]],[250,250],[251,251]]],[1562507217425,["GJX@GJXAIOU",[[1,251,"指向"]],[251,251],[253,253]]],[1562507217448,["GJX@GJXAIOU",[[1,251," "]],[253,253],[254,254]]],[1562507262418,["GJX@GJXAIOU",[[1,254,"的那个对象；即两个引用指向同一个对象，称为“"]],[254,254],[276,276]]],[1562507263513,["GJX@GJXAIOU",[[-1,275,"“"]],[276,276],[275,275]]],[1562507264432,["GJX@GJXAIOU",[[1,275,"****"]],[275,275],[277,277]]],[1562507272618,["GJX@GJXAIOU",[[1,277,"”别名想想"]],[277,277],[282,282]]],[1562507273233,["GJX@GJXAIOU",[[-1,280,"想想"]],[282,282],[280,280]]],[1562507283250,["GJX@GJXAIOU",[[1,280,"现象“"]],[280,280],[283,283]]],[1562507287407,["GJX@GJXAIOU",[[1,277," "]],[277,277],[278,278]]],[1562507290095,["GJX@GJXAIOU",[[-1,277," ”"]],[279,279],[277,277]]],[1562507292928,["GJX@GJXAIOU",[[-1,281,"“"]],[282,282],[281,281]]],[1562507295177,["GJX@GJXAIOU",[[1,283,"；"]],[283,283],[284,284]]],[1562507349985,["GJX@GJXAIOU",[[1,284,"\n- "]],[284,284],[287,287]]],[1562507366848,["GJX@GJXAIOU",[[-1,286," "]],[287,287],[286,286]]],[1562507367344,["GJX@GJXAIOU",[[-1,285,"-"],[1,286,"\n"]],[286,286],[285,285]]],[1562507368120,["GJX@GJXAIOU",[[1,286,"\n"]],[285,285],[286,286]]],[1562507368809,["GJX@GJXAIOU",[[1,287,"\n"]],[286,286],[287,287]]],[1562507379516,["GJX@GJXAIOU",[[1,287,"## 3.7 关系操作符"]],[287,287],[299,299]]],[1562507379850,["GJX@GJXAIOU",[[1,300,"\n"]],[299,299],[300,300]]],[1562507388080,["GJX@GJXAIOU",[[1,301,"\n"]],[300,300],[301,301]]],[1562507388490,["GJX@GJXAIOU",[[1,301,"#### 3.1 测试对象的等价性\n\n*   **`==` 和 `!=` 比较的是对象的引用**\n*   **特殊方法`equals()` 的默认行为也是比较引用**"]],[301,301],[384,384]]],[1562507395145,["GJX@GJXAIOU",[[1,308,"7"],[-1,330," 和 "],[1,333," 和 "],[-1,337," "],[1,338," "],[-1,370," "],[1,371," "]],[308,308],[309,309]]],[1562507395810,["GJX@GJXAIOU",[[1,309,"."]],[309,309],[310,310]]],[1562507397752,["GJX@GJXAIOU",[[-1,304,"#"]],[304,304],[303,303]]],[1562507417338,["GJX@GJXAIOU",[[1,385,"，但是不能用于基本类型；"]],[385,385],[397,397]]],[1562507433646,["GJX@GJXAIOU",[[1,350,"，可以用于基本类型；"]],[350,350],[360,360]]],[1562507534760,["GJX@GJXAIOU",[[1,408,"* \n"]],[407,407],[410,410]]],[1562507536241,["GJX@GJXAIOU",[[-1,408,"* "]],[410,410],[408,408]]],[1562507537305,["GJX@GJXAIOU",[[1,408,"// Equivalence.java\npublic class Equivalence{\n    public static void main(String[] args){\n        Integer n1 = new Integer(47);\n        Integer n2 = new Integer(47);\n        System.out.println(n1 == n2);\n        System.out.println(n1 != n2);\n        System.out.println(n1.equals(n2));\n\n        Value v1 = new Value();\n        Value v2 = new Value();\n        v1.i = v2.i = 47;\n        System.out.println(v1.equals(v2));\n    }\n\n}\nclass Value{\n    int i;\n}\n/* Output:\n* false\n* true\n* true\n* false\n*/"]],[408,408],[905,905]]],[1562507539286,["GJX@GJXAIOU",[[-1,408,"// Equivalence.java\npublic class Equivalence{\n    public static void main(String[] args){\n        Integer n1 = new Integer(47);\n        Integer n2 = new Integer(47);\n        System.out.println(n1 == n2);\n        System.out.println(n1 != n2);\n        System.out.println(n1.equals(n2));\n\n        Value v1 = new Value();\n        Value v2 = new Value();\n        v1.i = v2.i = 47;\n        System.out.println(v1.equals(v2));\n    }\n\n}\nclass Value{\n    int i;\n}\n/* Output:\n* false\n* true\n* true\n* false\n*/"]],[905,905],[408,408]]],[1562507540898,["GJX@GJXAIOU",[[-1,408,"\n"],[1,409,"·"]],[408,408],[409,409]]],[1562507541274,["GJX@GJXAIOU",[[1,409,"··"]],[409,409],[411,411]]],[1562507541760,["GJX@GJXAIOU",[[-1,409,"··"]],[411,411],[409,409]]],[1562507542073,["GJX@GJXAIOU",[[-1,408,"·"],[1,409,"\n"]],[409,409],[408,408]]],[1562507542923,["GJX@GJXAIOU",[[-1,408,"\n"],[1,409,"`"]],[408,408],[409,409]]],[1562507543274,["GJX@GJXAIOU",[[1,409,"``"]],[409,409],[411,411]]],[1562507543297,["GJX@GJXAIOU",[[1,411,"language\n```\n"]],[411,411],[411,419]]],[1562507543985,["GJX@GJXAIOU",[[-1,411,"language"],[1,419,"j"]],[411,419],[412,412]]],[1562507544553,["GJX@GJXAIOU",[[1,412,"ava"]],[412,412],[415,415]]],[1562507544744,["GJX@GJXAIOU",[[1,416,"\n"]],[415,415],[416,416]]],[1562507545880,["GJX@GJXAIOU",[[1,416,"// Equivalence.java\npublic class Equivalence{\n    public static void main(String[] args){\n        Integer n1 = new Integer(47);\n        Integer n2 = new Integer(47);\n        System.out.println(n1 == n2);\n        System.out.println(n1 != n2);\n        System.out.println(n1.equals(n2));\n\n        Value v1 = new Value();\n        Value v2 = new Value();\n        v1.i = v2.i = 47;\n        System.out.println(v1.equals(v2));\n    }\n\n}\nclass Value{\n    int i;\n}\n/* Output:\n* false\n* true\n* true\n* false\n*/"]],[416,416],[913,913]]],[1562507549329,["GJX@GJXAIOU",[[1,918,"\n"]],[917,917],[918,918]]],[1562507557096,["GJX@GJXAIOU",[[1,918,"  以上， \n1. n1 和 n2 是两个不同的引用（明显是两个不同的存储区域），所以二者 !=。 \n2. equals() 方法是所有对象的特殊方法（继承自Object类），Integer重定义了equals()方法以比较其内容是否相等，所以这里n1.equals(n2) 为 true。equals()不适用于“基本类型”，基本类型直接使用==和!=即可。 \n3. v1.equals(v2)为 false 验证了 equals()方法默认行为是比较引用，除非在自定义类Value中重定义 equals()方法。"]],[918,918],[1176,1176]]],[1562507574039,["GJX@GJXAIOU",[[1,925,"  以上， \n"]],[925,1176],[1183,1183]]],[1562507576601,["GJX@GJXAIOU",[[-1,925,"  以上， "]],[925,931],[925,925]]],[1562507577016,["GJX@GJXAIOU",[[-1,925,"\n"]],[925,925],[924,924]]],[1562507613680,["GJX@GJXAIOU",[[1,1177,"4. \n"]],[1176,1176],[1180,1180]]],[1562507613808,["GJX@GJXAIOU",[[-1,1177,"4. "]],[1180,1180],[1178,1178]]],[1562507619594,["GJX@GJXAIOU",[[1,1178,"\n"]],[1178,1178],[1179,1179]]],[1562507620344,["GJX@GJXAIOU",[[-1,1178,"\n"],[1,1179,"-"]],[1179,1179],[1179,1179]]],[1562507623160,["GJX@GJXAIOU",[[1,1179," buk"]],[1179,1179],[1183,1183]]],[1562507623959,["GJX@GJXAIOU",[[-1,1180,"buk"]],[1183,1183],[1180,1180]]],[1562507625273,["GJX@GJXAIOU",[[1,1180,"buke"]],[1180,1180],[1184,1184]]],[1562507626024,["GJX@GJXAIOU",[[-1,1180,"buke"]],[1184,1184],[1180,1180]]],[1562507627361,["GJX@GJXAIOU",[[1,1180,"不可"]],[1180,1180],[1182,1182]]],[1562507680060,["GJX@GJXAIOU",[[1,1182,"见"]],[1182,1182],[1183,1183]]],[1562507680687,["GJX@GJXAIOU",[[-1,1182,"见"]],[1183,1183],[1182,1182]]],[1562507694548,["GJX@GJXAIOU",[[1,1182,"将一个非布尔值当做布尔值在"]],[1182,1182],[1195,1195]]],[1562507703522,["GJX@GJXAIOU",[[1,1197,"表达式中使用："]],[1197,1197],[1204,1204]]],[1562507707583,["GJX@GJXAIOU",[[-1,1203,"："]],[1204,1204],[1203,1203]]],[1562507708811,["GJX@GJXAIOU",[[1,1203,"；"]],[1203,1203],[1204,1204]]],[1562507816098,[null,[[1,1195,"逻辑"],[-1,1201,"："]],[1195,1195],[1201,1201]]],[1562507816098,[null,[[-1,1195,"逻辑"],[1,1203,"："]],[1201,1201],[1195,1195]]],[1562507776082,["GJX@GJXAIOU",[[1,1204,"\n- 如果应该使用String"]],[1204,1204],[1219,1219]]],[1562507776106,["GJX@GJXAIOU",[[1,1213," "]],[1219,1219],[1220,1220]]],[1562507777900,["GJX@GJXAIOU",[[1,1220,"值"]],[1220,1220],[1221,1221]]],[1562507777926,["GJX@GJXAIOU",[[1,1220," "]],[1221,1221],[1222,1222]]],[1562507813075,["GJX@GJXAIOU",[[1,1222,"的地方使用了布尔值，布尔值会自动转换为适当的文本格式：例如："]],[1222,1222],[1252,1252]]],[1562507876101,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"]],[1195,1195],[1222,1222]]],[1562507876101,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"]],[1222,1222],[1195,1195]]],[1562507825955,["GJX@GJXAIOU",[[1,1252,"··"]],[1252,1252],[1254,1254]]],[1562507827895,["GJX@GJXAIOU",[[-1,1252,"··"]],[1254,1254],[1252,1252]]],[1562507828584,["GJX@GJXAIOU",[[1,1252,"``"]],[1252,1252],[1254,1254]]],[1562507831956,["GJX@GJXAIOU",[[1,1253,"orubt"]],[1253,1253],[1258,1258]]],[1562507833017,["GJX@GJXAIOU",[[-1,1253,"orubt"]],[1258,1258],[1253,1253]]],[1562507837456,["GJX@GJXAIOU",[[1,1253,"print();"]],[1253,1253],[1261,1261]]],[1562507847483,["GJX@GJXAIOU",[[1,1259,"\"hello\" + i"]],[1259,1259],[1270,1270]]],[1562507849434,["GJX@GJXAIOU",[[-1,1269,"i"]],[1270,1270],[1269,1269]]],[1562507850370,["GJX@GJXAIOU",[[1,1269,"("]],[1269,1269],[1270,1270]]],[1562507850408,["GJX@GJXAIOU",[[1,1271,")"]],[1270,1270],[1271,1271]]],[1562507852369,["GJX@GJXAIOU",[[1,1270,"("]],[1270,1270],[1271,1271]]],[1562507852425,["GJX@GJXAIOU",[[1,1273,")"]],[1271,1271],[1272,1272]]],[1562507876057,["GJX@GJXAIOU",[[1,1271,"i < 10"]],[1271,1271],[1277,1277]]],[1562507936100,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562507936100,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562507883977,["GJX@GJXAIOU",[[1,1278," && ("]],[1278,1278],[1283,1283]]],[1562507884026,["GJX@GJXAIOU",[[1,1285,")"]],[1283,1283],[1284,1284]]],[1562507891313,["GJX@GJXAIOU",[[1,1283,"j < 10"]],[1283,1283],[1289,1289]]],[1562507930601,["GJX@GJXAIOU",[[1,1294,"jieguo"]],[1294,1294],[1300,1300]]],[1562507931655,["GJX@GJXAIOU",[[-1,1294,"jieguo"]],[1300,1300],[1294,1294]]],[1562507934835,["GJX@GJXAIOU",[[1,1294,"结果为："]],[1294,1294],[1298,1298]]],[1562507996106,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562507996106,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562507936505,["GJX@GJXAIOU",[[1,1298,"``"]],[1298,1298],[1300,1300]]],[1562507943107,["GJX@GJXAIOU",[[1,1299,"hello false"]],[1299,1299],[1310,1310]]],[1562507947436,["GJX@GJXAIOU",[[1,1265," "]],[1265,1265],[1266,1266]]],[1562507985088,["GJX@GJXAIOU",[[1,1312,"\n- "]],[1312,1312],[1315,1315]]],[1562507985224,["GJX@GJXAIOU",[[-1,1313,"- "],[1,1315,"\n\n"]],[1315,1315],[1314,1314]]],[1562507985360,["GJX@GJXAIOU",[[1,1315,"\n"]],[1314,1314],[1315,1315]]],[1562507986514,["GJX@GJXAIOU",[[1,1315,"3.2 直接常量\n有时直接常量的类型是模棱两可的，这就需要与直接常量相关的某些字符来额外增加一些信息以“指导”编译器，使其能够准确地知道要生成什么样的类型。如果编译器能够正确地识别类型，就不必在数值后增加字符。\n在C、C++或者Java中，二进制数没有直接常量表示方法。但是，在使用十六进制和进制的记数法时，以二进制形式显示结果将非常有用。通过使用Integer和Long类的静态方法toBinaryString()可以很容易地实现这一点。注意，如果将比较小的类型传递给Integer.toBinaryString()方法，则该类型将自动转换为int。\n// Literals.java\npublic class Literals{\n    public static void main(String[] args){\n        int i1 = 0x2f;  // Hexadecimal (lowercase)\n        System.out.println(\"i1: \" + Integer.toBinaryString(i1));\n        int i2 = 0X2F;  // Hexadecimal (uppercase)\n        System.out.println(\"i2: \" + Integer.toBinaryString(i2));\n        int i3 = 0177;  // Octal (leading zero)\n        System.out.println(\"i3: \" + Integer.toBinaryString(i3));\n        char c = 0xffff;    // max char hex value\n        System.out.println(\"c: \" + Integer.toBinaryString(c));\n        byte b = 0x7f;  // max short hex value\n        System.out.println(\"b: \" + Integer.toBinaryString(b));\n        short s = 0x7fff;   // max short hex value\n        System.out.println(\"s: \" + Integer.toBinaryString(s));\n        long n1 = 200L; // long suffix\n        long n2 = 200l; // long suffix (but can be confusing)\n        long n3 = 200;\n        float f1 = 1;\n        float f2 = 1F;  // float suffix\n        float f3 = 1f;  // float suffix\n        double d1 = 1d; // double suffix\n        double d2 = 1D; // dobule suffix\n        // (Hex and Octal also work with long)\n    }\n    /* OUtput:\n    * i1: 101111\n    * i2: 101111\n    * i3: 1111111\n    * c: 1111111111111111\n    * b: 1111111\n    * s: 111111111111111\n    * */\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n指数计数法。在C、C++以及Java中，e 代表“10的幂次”，与科学与工程领域中“e”代表自然对数的基数（约等于2.718，Java中的Math.E给出了更精确的double型的值）不同。 "]],[1315,1315],[3054,3054]]],[1562508056109,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508056109,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508000672,["GJX@GJXAIOU",[[-1,1317,"2"]],[1318,1318],[1317,1317]]],[1562508000994,["GJX@GJXAIOU",[[1,1317,"9"]],[1317,1317],[1318,1318]]],[1562508003384,["GJX@GJXAIOU",[[1,1315,"## "]],[1315,1315],[1326,1326]]],[1562508007832,["GJX@GJXAIOU",[[1,1595,"\n"]],[1595,1595],[1596,1596]]],[1562508010249,["GJX@GJXAIOU",[[1,1595,"```"]],[1595,1595],[1598,1598]]],[1562508010278,["GJX@GJXAIOU",[[1,1598,"language\n```\n"]],[1598,1598],[1598,1606]]],[1562508011241,["GJX@GJXAIOU",[[-1,1598,"language"],[1,1606,"j"]],[1598,1606],[1599,1599]]],[1562508011625,["GJX@GJXAIOU",[[1,1599,"ava"]],[1599,1599],[1602,1602]]],[1562508012001,["GJX@GJXAIOU",[[1,1603,"\n"]],[1602,1602],[1603,1603]]],[1562508015753,["GJX@GJXAIOU",[[-1,1604,"```\n"]],[1603,1607],[1603,1603]]],[1562508017249,["GJX@GJXAIOU",[[-1,1604,"\n"]],[1604,1604],[1603,1603]]],[1562508017384,["GJX@GJXAIOU",[[-1,1603,"\n"]],[1603,1603],[1602,1602]]],[1562508021241,["GJX@GJXAIOU",[[1,2876,"\n"]],[2875,2875],[2876,2876]]],[1562508021752,["GJX@GJXAIOU",[[1,2877,"```\n"]],[2876,2876],[2880,2880]]],[1562508026352,["GJX@GJXAIOU",[[-1,2881,"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34"]],[2881,2973],[2881,2881]]],[1562508034434,["GJX@GJXAIOU",[[1,1438,"**"],[1,1452,"**"]],[1438,1452],[1438,1456]]],[1562508038618,["GJX@GJXAIOU",[[1,1327,"- "]],[1327,1327],[1329,1329]]],[1562508040860,["GJX@GJXAIOU",[[1,1426,"- "]],[1426,1426],[1428,1428]]],[1562508116106,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508116106,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508081978,["GJX@GJXAIOU",[[1,2890,"- "]],[2890,2890],[2892,2892]]],[1562508101306,["GJX@GJXAIOU",[[1,2988,"java"]],[2988,2988],[2992,2992]]],[1562508102580,["GJX@GJXAIOU",[[-1,2988,"java"]],[2992,2992],[2988,2988]]],[1562508113595,["GJX@GJXAIOU",[[1,2988,"Java 编译器将指数作为"]],[2988,2988],[3001,3001]]],[1562508176111,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508176111,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508125925,["GJX@GJXAIOU",[[1,3001,"双精度数（）"]],[3001,3001],[3007,3007]]],[1562508129066,["GJX@GJXAIOU",[[1,3006,"double"]],[3006,3006],[3012,3012]]],[1562508131755,["GJX@GJXAIOU",[[1,3013,"chuli"]],[3013,3013],[3018,3018]]],[1562508132866,["GJX@GJXAIOU",[[-1,3013,"chuli"]],[3018,3018],[3013,3013]]],[1562508135636,["GJX@GJXAIOU",[[1,3013,"处理；"]],[3013,3013],[3016,3016]]],[1562508140235,["GJX@GJXAIOU",[[1,2988,"**"],[1,3015,"**"]],[2988,3015],[2988,3019]]],[1562508296112,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508296112,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508270985,["GJX@GJXAIOU",[[1,3021,"- \n"]],[3020,3020],[3023,3023]]],[1562508271108,["GJX@GJXAIOU",[[-1,3021,"- "]],[3023,3023],[3022,3022]]],[1562508271219,["GJX@GJXAIOU",[[1,3022,"\n"]],[3022,3022],[3023,3023]]],[1562508271337,["GJX@GJXAIOU",[[1,3023,"\n"]],[3023,3023],[3024,3024]]],[1562508274812,["GJX@GJXAIOU",[[1,3024,"##  "]],[3024,3024],[3027,3027]]],[1562508276097,["GJX@GJXAIOU",[[1,3027,"3.10"]],[3027,3027],[3031,3031]]],[1562508276962,["GJX@GJXAIOU",[[1,3032," "]],[3031,3031],[3032,3032]]],[1562508288964,["GJX@GJXAIOU",[[1,3032,"按位操作符"]],[3032,3032],[3037,3037]]],[1562508356114,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508356114,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508298483,["GJX@GJXAIOU",[[1,3037,"\n"]],[3037,3037],[3038,3038]]],[1562508299782,["GJX@GJXAIOU",[[1,3038,"-0"]],[3038,3038],[3040,3040]]],[1562508300536,["GJX@GJXAIOU",[[-1,3039,"0"]],[3040,3040],[3039,3039]]],[1562508301673,["GJX@GJXAIOU",[[1,3040," "]],[3039,3039],[3040,3040]]],[1562508307706,["GJX@GJXAIOU",[[1,3040,"操作的是单个b"]],[3040,3040],[3047,3047]]],[1562508307734,["GJX@GJXAIOU",[[1,3046," "]],[3047,3047],[3048,3048]]],[1562508315955,["GJX@GJXAIOU",[[1,3048,"it，即二进制位；"]],[3048,3048],[3057,3057]]],[1562508416117,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508416117,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508391675,["GJX@GJXAIOU",[[1,3058,"\n- 按位操作符可以和“=”lian"]],[3058,3058],[3076,3076]]],[1562508392882,["GJX@GJXAIOU",[[-1,3072,"lian"]],[3076,3076],[3072,3072]]],[1562508404781,["GJX@GJXAIOU",[[1,3072,"连用，即：``"]],[3072,3072],[3079,3079]]],[1562508415579,["GJX@GJXAIOU",[[1,3078,"&= |= "]],[3078,3078],[3084,3084]]],[1562508476120,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508476120,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508418835,["GJX@GJXAIOU",[[1,3084,"^="]],[3084,3084],[3086,3086]]],[1562508422867,["GJX@GJXAIOU",[[1,3081," "]],[3080,3080],[3081,3081]]],[1562508424242,["GJX@GJXAIOU",[[1,3085," "]],[3084,3084],[3085,3085]]],[1562508431538,["GJX@GJXAIOU",[[1,3089,"都可以使用；\n- "]],[3089,3089],[3098,3098]]],[1562508536119,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508536120,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508499003,["GJX@GJXAIOU",[[1,3098,"布尔类型不能使用按位非，"]],[3098,3098],[3110,3110]]],[1562508596120,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508596120,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508544457,["GJX@GJXAIOU",[[-1,3109,"，"]],[3110,3110],[3109,3109]]],[1562508553255,["GJX@GJXAIOU",[[1,3109,"；\n- 按位运算和"]],[3109,3109],[3118,3118]]],[1562508555634,["GJX@GJXAIOU",[[-1,3115,"运算和"]],[3118,3118],[3115,3115]]],[1562508587596,["GJX@GJXAIOU",[[1,3115,"操作符具有与逻辑操作符相同的效果，但是不会中途“短路”；\n- "]],[3115,3115],[3146,3146]]],[1562508587714,["GJX@GJXAIOU",[[-1,3144,"- "],[1,3146,"\n\n"]],[3146,3146],[3145,3145]]],[1562508589210,["GJX@GJXAIOU",[[1,3146,"\n"]],[3145,3145],[3146,3146]]],[1562508593861,["GJX@GJXAIOU",[[1,3146,"## 3.11 "]],[3146,3146],[3154,3154]]],[1562508656122,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562508656122,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562508599133,["GJX@GJXAIOU",[[1,3154,"移位操作符"]],[3154,3154],[3159,3159]]],[1562509020798,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509020798,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509010818,["GJX@GJXAIOU",[[1,3160,"\n"]],[3159,3159],[3160,3160]]],[1562509011265,["GJX@GJXAIOU",[[1,3161,"\n"]],[3160,3160],[3161,3161]]],[1562509012062,["GJX@GJXAIOU",[[-1,3161,"\n"],[1,3162,"-"]],[3161,3161],[3162,3162]]],[1562509018932,["GJX@GJXAIOU",[[1,3162," 《《"]],[3162,3162],[3165,3165]]],[1562509019673,["GJX@GJXAIOU",[[-1,3163,"《《"]],[3165,3165],[3163,3163]]],[1562509020522,["GJX@GJXAIOU",[[1,3163,"<<"]],[3163,3163],[3165,3165]]],[1562509080799,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509080799,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509025405,["GJX@GJXAIOU",[[1,3165,"    liru"]],[3165,3165],[3173,3173]]],[1562509026241,["GJX@GJXAIOU",[[-1,3168," liru"]],[3173,3173],[3168,3168]]],[1562509045523,["GJX@GJXAIOU",[[1,3168,"例如： num << 1   相当于乘2"]],[3168,3168],[3188,3188]]],[1562509045552,["GJX@GJXAIOU",[[1,3187," "]],[3188,3188],[3189,3189]]],[1562509056783,["GJX@GJXAIOU",[[1,3189,"\n- >>   例如：  num >> 1   xiang"]],[3189,3189],[3218,3218]]],[1562509057593,["GJX@GJXAIOU",[[-1,3213,"xiang"]],[3218,3218],[3213,3213]]],[1562509066691,["GJX@GJXAIOU",[[1,3213,"相当于除2"]],[3213,3213],[3218,3218]]],[1562509066718,["GJX@GJXAIOU",[[1,3217," "]],[3218,3218],[3219,3219]]],[1562509070954,["GJX@GJXAIOU",[[-1,3201," "]],[3202,3202],[3201,3201]]],[1562509140798,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509140798,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509110470,["GJX@GJXAIOU",[[1,3218,"\n- 》》"]],[3218,3218],[3223,3223]]],[1562509111098,["GJX@GJXAIOU",[[-1,3221,"》》"]],[3223,3223],[3221,3221]]],[1562509118222,["GJX@GJXAIOU",[[1,3221,">>>  例如： "]],[3221,3221],[3230,3230]]],[1562509119026,["GJX@GJXAIOU",[[-1,3229," "]],[3230,3230],[3229,3229]]],[1562509124614,["GJX@GJXAIOU",[[1,3229,"num >>>1"]],[3229,3229],[3237,3237]]],[1562509200800,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509200800,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509151521,["GJX@GJXAIOU",[[1,3160,"****"]],[3160,3160],[3162,3162]]],[1562509152374,["GJX@GJXAIOU",[[1,3162,"zhi"]],[3162,3162],[3165,3165]]],[1562509153781,["GJX@GJXAIOU",[[-1,3162,"zhi"]],[3165,3165],[3162,3162]]],[1562509162095,["GJX@GJXAIOU",[[1,3162,"只能处理整数类型"]],[3162,3162],[3170,3170]]],[1562509180084,["GJX@GJXAIOU",[[1,3204,"·"]],[3204,3204],[3205,3205]]],[1562509182363,["GJX@GJXAIOU",[[-1,3204,"·"]],[3205,3205],[3204,3204]]],[1562509182845,["GJX@GJXAIOU",[[1,3204,"`"]],[3204,3204],[3205,3205]]],[1562509183846,["GJX@GJXAIOU",[[1,3207,"`"]],[3207,3207],[3208,3208]]],[1562509185718,["GJX@GJXAIOU",[[1,3177,"`"]],[3177,3177],[3178,3178]]],[1562509186628,["GJX@GJXAIOU",[[1,3175,"`"]],[3175,3175],[3176,3176]]],[1562509188077,["GJX@GJXAIOU",[[1,3237,"`"]],[3237,3237],[3238,3238]]],[1562509188940,["GJX@GJXAIOU",[[1,3241,"`"]],[3241,3241],[3242,3242]]],[1562509500804,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509500804,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509465619,["GJX@GJXAIOU",[[1,3255,"\n- "]],[3255,3255],[3258,3258]]],[1562509465748,["GJX@GJXAIOU",[[-1,3256,"- "],[1,3258,"\n\n"]],[3258,3258],[3257,3257]]],[1562509466892,["GJX@GJXAIOU",[[1,3257,"移位操作符操作的运算对象也是二进制的“位”。(移位操作符只可用来处理整数类型(基本\n这个\n类型的一种)。左移位操作符(《<)能按照操作符右侧指定的位数将操作符左边的操作数向左移\n,有\n动(在低位补0)。“有符号”右移位操作符(>》)则按照操作符右侧指定的位数将操作符左边的"]],[3257,3257],[3393,3393]]],[1562509475146,["GJX@GJXAIOU",[[-1,3295,"(基本\n这个\n类型的一种)"]],[3295,3308],[3295,3295]]],[1562509483346,["GJX@GJXAIOU",[[-1,3257,"移位操作符操作的运算对象也是二进制的“位”。(移位操作符只可用来处理整数类型。"]],[3257,3296],[3257,3257]]],[1562509486275,["GJX@GJXAIOU",[[-1,3264,"《"]],[3265,3265],[3264,3264]]],[1562509486971,["GJX@GJXAIOU",[[1,3265,"<"]],[3264,3264],[3265,3265]]],[1562509498178,["GJX@GJXAIOU",[[-1,3296,"\n"]],[3297,3297],[3296,3296]]],[1562509499156,["GJX@GJXAIOU",[[-1,3294,",有"]],[3296,3296],[3294,3294]]],[1562509560806,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509560806,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509503770,["GJX@GJXAIOU",[[1,3303,"\n"]],[3303,3303],[3304,3304]]],[1562509506076,["GJX@GJXAIOU",[[-1,3317,"》"]],[3318,3318],[3317,3317]]],[1562509506668,["GJX@GJXAIOU",[[1,3317,">"]],[3317,3317],[3318,3318]]],[1562509620808,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509620808,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509575859,["GJX@GJXAIOU",[[1,3339,"操作数向右移动。“有符号”右移位操作符使用“符号扩展”:若符号为正,则在高位插入0,\n符号为负,则在高位插入12Java中增加了一种 “无符号”右移位操作符(>>》),它使用“零扑\n展”:无论正负,都在高位插入0。这一操作符是C或C++中所没有的。 \n如果对char byte或者short类型的数值进行移位处理,那么在移位进行之前,它们会被转\n换为int类型,并且得到的结果也是一个int类型的值。只有数值右端的低5位才有用。 这样可防 \n止我们移位超过int型值所具有的位数。(译注:因为2的5次方为32,而int型值只有32位。)若对\n一个long类型的数值进行处理,最后得到的结果也是long。此时只会用到数值右端的低6位,以 \n防止移位超过long型数值具有的位数。\n“移位”可与“等号”(<<=或>>=或>>》=)组合使用。此时,操作符左边的值会移动由右边\n的值指定的位数 ,再将得到的结果赋给左边的变量。但在进行“无符号”右移位结合赋值操作 \n时、可能会遇到一个问题:如果对byte或short值进行这样的移位运算,得到的可能不是正确的"]],[3339,3339],[3814,3814]]],[1562509579491,["GJX@GJXAIOU",[[1,3347,"\n"]],[3347,3347],[3348,3348]]],[1562509590627,["GJX@GJXAIOU",[[-1,3382,"\n"]],[3383,3383],[3382,3382]]],[1562509591937,["GJX@GJXAIOU",[[1,3382,"r "]],[3382,3382],[3383,3383]]],[1562509592180,["GJX@GJXAIOU",[[1,3383,"uo"]],[3383,3383],[3385,3385]]],[1562509593578,["GJX@GJXAIOU",[[-1,3382,"ruo"]],[3385,3385],[3382,3382]]],[1562509594969,["GJX@GJXAIOU",[[1,3382,"若"]],[3382,3382],[3383,3383]]],[1562509600165,["GJX@GJXAIOU",[[1,3396,"。"]],[3396,3396],[3397,3397]]],[1562509601522,["GJX@GJXAIOU",[[-1,3397,"2"]],[3398,3398],[3397,3397]]],[1562509620099,["GJX@GJXAIOU",[[1,3397,"\n"]],[3397,3397],[3398,3398]]],[1562509680812,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509680812,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509623114,["GJX@GJXAIOU",[[-1,3423,"》"]],[3424,3424],[3423,3423]]],[1562509623734,["GJX@GJXAIOU",[[1,3423,">"]],[3423,3423],[3424,3424]]],[1562509626346,["GJX@GJXAIOU",[[-1,3432,"\n"]],[3433,3433],[3432,3432]]],[1562509633683,["GJX@GJXAIOU",[[-1,3431,"扑"]],[3432,3432],[3431,3431]]],[1562509634125,["GJX@GJXAIOU",[[1,3431,"k"]],[3431,3431],[3432,3432]]],[1562509634588,["GJX@GJXAIOU",[[1,3431," "],[1,3432," uo"]],[3432,3432],[3435,3435]]],[1562509635468,["GJX@GJXAIOU",[[-1,3432,"kuo"]],[3435,3435],[3432,3432]]],[1562509637222,["GJX@GJXAIOU",[[1,3432,"扩展"]],[3432,3432],[3434,3434]]],[1562509639077,["GJX@GJXAIOU",[[-1,3433,"展 "]],[3434,3434],[3433,3433]]],[1562509640227,["GJX@GJXAIOU",[[-1,3431," "]],[3432,3432],[3431,3431]]],[1562509658970,["GJX@GJXAIOU",[[-1,3448,"这一操作符是C或C++中所没有的。 "]],[3448,3466],[3448,3448]]],[1562509665031,["GJX@GJXAIOU",[[1,3456,"、"]],[3456,3456],[3457,3457]]],[1562509668866,["GJX@GJXAIOU",[[-1,3496,"\n"]],[3497,3497],[3496,3496]]],[1562509675468,["GJX@GJXAIOU",[[1,3449,"**"],[1,3522,"**"]],[3449,3522],[3449,3526]]],[1562509678130,["GJX@GJXAIOU",[[-1,3547,"\n"]],[3548,3548],[3547,3547]]],[1562509680458,["GJX@GJXAIOU",[[-1,3546," "]],[3547,3547],[3546,3546]]],[1562509727557,[null,[[1,1195,"逻辑"],[-1,1201,"："],[1,1212," "],[-1,1213," "],[-1,1219,"值"],[1,1221,"值"],[-1,1251,"·"]],[1195,1195],[1251,1251]]],[1562509727557,[null,[[-1,1195,"逻辑"],[1,1203,"："],[-1,1213," "],[1,1215," "],[1,1220,"值"],[-1,1221,"值"],[1,1252,"·"]],[1251,1251],[1195,1195]]],[1562509702045,["GJX@GJXAIOU",[[-1,3595,"\n"]],[3596,3596],[3595,3595]]],[1562509704732,["GJX@GJXAIOU",[[-1,3642,"\n"]],[3643,3643],[3642,3642]]],[1562509708306,["GJX@GJXAIOU",[[-1,3683,"》"]],[3684,3684],[3683,3683]]],[1562509708831,["GJX@GJXAIOU",[[1,3683,"》"]],[3683,3683],[3684,3684]]],[1562509709867,["GJX@GJXAIOU",[[-1,3683,"》"]],[3684,3684],[3683,3683]]],[1562509710373,["GJX@GJXAIOU",[[1,3683,">"]],[3683,3683],[3684,3684]]],[1562509720842,["GJX@GJXAIOU",[[-1,3707,"\n"]],[3708,3708],[3707,3707]]],[1562509723476,["GJX@GJXAIOU",[[-1,3750,"\n"]],[3751,3751],[3750,3750]]]],null,"GJX@GJXAIOU"],["f919fa8b-54f2-4fa3-b4ed-dfe13f648659",1562545017685,"# 第三章：操作符\n\n## 3.3 优先级\n当编译器观察到一个 String 后面加上一个“+”，后面加上一个非 String 类型的元素，会将这个非 String 元素转换为 String 元素\n\n## 3.4 赋值\n\n- “=”含义：将右边的值 **复制** 给左边；\n- 基本数据类型的赋值：基本数据类型存储的是实际的数值，非指向对象的引用，因此在赋值的时候，就是直接将一个地方的内容复制到了另一个地方；\n- 对象的赋值：例如 A、B 均为一个对象，`A = B`相当于 A 和 B 都指向了 B 指向的那个对象；即两个引用指向同一个对象，称为**别名现象**；\n\n\n## 3.7 关系操作符\n\n### 3.7.1 测试对象的等价性\n\n*   **`==` 和 `!=` 比较的是对象的引用**，可以用于基本类型；\n*   **特殊方法`equals()` 的默认行为也是比较引用**，但是不能用于基本类型；\n```java\n// Equivalence.java\npublic class Equivalence{\n    public static void main(String[] args){\n        Integer n1 = new Integer(47);\n        Integer n2 = new Integer(47);\n        System.out.println(n1 == n2);\n        System.out.println(n1 != n2);\n        System.out.println(n1.equals(n2));\n\n        Value v1 = new Value();\n        Value v2 = new Value();\n        v1.i = v2.i = 47;\n        System.out.println(v1.equals(v2));\n    }\n\n}\nclass Value{\n    int i;\n}\n/* Output:\n* false\n* true\n* true\n* false\n*/\n```\n  以上， \n1. n1 和 n2 是两个不同的引用（明显是两个不同的存储区域），所以二者 !=。 \n2. equals() 方法是所有对象的特殊方法（继承自Object类），Integer重定义了equals()方法以比较其内容是否相等，所以这里n1.equals(n2) 为 true。equals()不适用于“基本类型”，基本类型直接使用==和!=即可。 \n3. v1.equals(v2)为 false 验证了 equals()方法默认行为是比较引用，除非在自定义类Value中重定义 equals()方法。\n\n- 不可将一个非布尔值当做布尔值在逻辑表达式中使用；\n- 如果应该使用 String 值的地方使用了布尔值，布尔值会自动转换为适当的文本格式：例如：`print(\"hello \" + ((i < 10) && (j < 10)));`结果为：`hello false`\n\n\n## 3.9 直接常量\n- 有时直接常量的类型是模棱两可的，这就需要与直接常量相关的某些字符来额外增加一些信息以“指导”编译器，使其能够准确地知道要生成什么样的类型。如果编译器能够正确地识别类型，就不必在数值后增加字符。\n- 在C、C++或者Java中，**二进制数没有直接常量表示方法**。但是，在使用十六进制和进制的记数法时，以二进制形式显示结果将非常有用。通过使用Integer和Long类的静态方法toBinaryString()可以很容易地实现这一点。注意，如果将比较小的类型传递给Integer.toBinaryString()方法，则该类型将自动转换为int。\n```java\n// Literals.java\npublic class Literals{\n    public static void main(String[] args){\n        int i1 = 0x2f;  // Hexadecimal (lowercase)\n        System.out.println(\"i1: \" + Integer.toBinaryString(i1));\n        int i2 = 0X2F;  // Hexadecimal (uppercase)\n        System.out.println(\"i2: \" + Integer.toBinaryString(i2));\n        int i3 = 0177;  // Octal (leading zero)\n        System.out.println(\"i3: \" + Integer.toBinaryString(i3));\n        char c = 0xffff;    // max char hex value\n        System.out.println(\"c: \" + Integer.toBinaryString(c));\n        byte b = 0x7f;  // max short hex value\n        System.out.println(\"b: \" + Integer.toBinaryString(b));\n        short s = 0x7fff;   // max short hex value\n        System.out.println(\"s: \" + Integer.toBinaryString(s));\n        long n1 = 200L; // long suffix\n        long n2 = 200l; // long suffix (but can be confusing)\n        long n3 = 200;\n        float f1 = 1;\n        float f2 = 1F;  // float suffix\n        float f3 = 1f;  // float suffix\n        double d1 = 1d; // double suffix\n        double d2 = 1D; // dobule suffix\n        // (Hex and Octal also work with long)\n    }\n    /* OUtput:\n    * i1: 101111\n    * i2: 101111\n    * i3: 1111111\n    * c: 1111111111111111\n    * b: 1111111\n    * s: 111111111111111\n    * */\n}\n\n```\n\n- 指数计数法。在C、C++以及Java中，e 代表“10的幂次”，与科学与工程领域中“e”代表自然对数的基数（约等于2.718，Java中的Math.E给出了更精确的double型的值）不同。 **Java 编译器将指数作为双精度数（double）处理**；\n\n\n\n## 3.10 按位操作符\n- 操作的是单个 bit，即二进制位； \n- 按位操作符可以和“=”连用，即：`&=  |=  ^=`都可以使用；\n- 布尔类型不能使用按位非；\n- 按位操作符具有与逻辑操作符相同的效果，但是不会中途“短路”；\n\n\n## 3.11 移位操作符\n**只能处理整数类型**\n- `<<`   例如： num << 1   相当于乘 2\n- `>>`   例如： num >> 1   相当于除 2\n- `>>>`  例如：num >>>1\n\n左移位操作符(<<)能按照操作符右侧指定的位数将操作符左边的操作数向左移\n动(在低位补0)。\n“有符号”右移位操作符(>>)则按照操作符右侧指定的位数将操作符左边的操作数向右移动。\n“有符号”右移位操作符使用“符号扩展”:若符号为正,则在高位插入0,若 符号为负,则在高位插入1。\nJava中增加了一种 “无符号”右移位操作符(>>>),它使用“零扩展”:无论正负,都在高位插入0。\n**如果对char、 byte或者short类型的数值进行移位处理,那么在移位进行之前,它们会被转换为int类型,并且得到的结果也是一个int类型的值**。只有数值右端的低5位才有用。 这样可防止我们移位超过int型值所具有的位数。(译注:因为2的5次方为32,而int型值只有32位。)若对一个long类型的数值进行处理,最后得到的结果也是long。此时只会用到数值右端的低6位,以 防止移位超过long型数值具有的位数。\n“移位”可与“等号”(<<=或>>=或>>>=)组合使用。此时,操作符左边的值会移动由右边的值指定的位数 ,再将得到的结果赋给左边的变量。但在进行“无符号”右移位结合赋值操作 时、可能会遇到一个问题:如果对byte或short值进行这样的移位运算,得到的可能不是正确的\n",[[1562545008408,["GJX@GJXAIOU",[[1,3796,"。"]],[3796,3796],[3797,3797]]],[1562545028966,["GJX@GJXAIOU",[[1,3797,"它们会先被转换为Int"]],[3797,3797],[3808,3808]]],[1562545028995,["GJX@GJXAIOU",[[1,3805," "]],[3808,3808],[3809,3809]]],[1562545029393,["GJX@GJXAIOU",[[1,3809,"lei"]],[3809,3809],[3812,3812]]],[1562545030881,["GJX@GJXAIOU",[[-1,3806,"Intlei"]],[3812,3812],[3806,3806]]],[1562545034092,["GJX@GJXAIOU",[[1,3806,"int类型"]],[3806,3806],[3811,3811]]],[1562545034120,["GJX@GJXAIOU",[[1,3809," "]],[3811,3811],[3812,3812]]],[1562545061486,["GJX@GJXAIOU",[[1,3812,"，然后进行右移操作，然后被截断，赋值给原来的类型；"]],[3812,3812],[3837,3837]]],[1562545071818,["GJX@GJXAIOU",[[1,3838,"\n"]],[3837,3837],[3838,3838]]],[1562545071954,["GJX@GJXAIOU",[[1,3839,"\n"]],[3838,3838],[3839,3839]]],[1562545076257,["GJX@GJXAIOU",[[1,3840,"\n"]],[3839,3839],[3840,3840]]],[1562545079068,["GJX@GJXAIOU",[[1,3840,"### 3.12"]],[3840,3840],[3848,3848]]],[1562545081539,["GJX@GJXAIOU",[[-1,3842,"#"]],[3843,3843],[3842,3842]]],[1562545087693,["GJX@GJXAIOU",[[1,3847," 三元操作符"]],[3847,3847],[3853,3853]]],[1562545088034,["GJX@GJXAIOU",[[1,3854,"\n"]],[3853,3853],[3854,3854]]],[1562545089913,["GJX@GJXAIOU",[[-1,3854,"\n"]],[3854,3854],[3853,3853]]],[1562545090634,["GJX@GJXAIOU",[[1,3853,"i"]],[3853,3853],[3854,3854]]],[1562545090662,["GJX@GJXAIOU",[[1,3853," "]],[3854,3854],[3855,3855]]],[1562545090845,["GJX@GJXAIOU",[[1,3855,"d"]],[3855,3855],[3856,3856]]],[1562545091487,["GJX@GJXAIOU",[[-1,3855,"d"]],[3856,3856],[3855,3855]]],[1562545093786,["GJX@GJXAIOU",[[1,3855,"f-else"]],[3855,3855],[3861,3861]]],[1562545094374,["GJX@GJXAIOU",[[1,3862,"\n"]],[3861,3861],[3862,3862]]],[1562545094745,["GJX@GJXAIOU",[[1,3863,"\n"]],[3862,3862],[3863,3863]]],[1562545100734,["GJX@GJXAIOU",[[-1,3863,"\n"],[1,3864,"boolean"]],[3863,3863],[3870,3870]]],[1562545102387,["GJX@GJXAIOU",[[1,3870,"-w"]],[3870,3870],[3872,3872]]],[1562545102818,["GJX@GJXAIOU",[[-1,3871,"w"]],[3872,3872],[3871,3871]]],[1562545109004,["GJX@GJXAIOU",[[1,3871,"exp ? valuse"]],[3871,3871],[3883,3883]]],[1562545109611,["GJX@GJXAIOU",[[-1,3881,"se"]],[3883,3883],[3881,3881]]],[1562545110442,["GJX@GJXAIOU",[[1,3881,"es"]],[3881,3881],[3883,3883]]],[1562545111880,["GJX@GJXAIOU",[[-1,3882,"s"]],[3883,3883],[3882,3882]]],[1562545115772,["GJX@GJXAIOU",[[1,3882,"0 : valuse"]],[3882,3882],[3892,3892]]],[1562545116521,["GJX@GJXAIOU",[[-1,3890,"se"]],[3892,3892],[3890,3890]]],[1562545118876,["GJX@GJXAIOU",[[1,3890,"e1;"]],[3890,3890],[3893,3893]]],[1562545127985,["GJX@GJXAIOU",[[1,3893,"\n\n"]],[3893,3893],[3894,3894]]],[1562545131053,["GJX@GJXAIOU",[[1,3863,"·"]],[3863,3863],[3864,3864]]],[1562545132033,["GJX@GJXAIOU",[[-1,3863,"·"]],[3864,3864],[3863,3863]]],[1562545132497,["GJX@GJXAIOU",[[1,3863,"`"]],[3863,3863],[3864,3864]]],[1562545135026,["GJX@GJXAIOU",[[1,3894,"`"]],[3894,3894],[3895,3895]]],[1562545137434,["GJX@GJXAIOU",[[1,3895," li"]],[3895,3895],[3898,3898]]],[1562545137968,["GJX@GJXAIOU",[[-1,3896,"li"]],[3898,3898],[3896,3896]]],[1562545138715,["GJX@GJXAIOU",[[1,3896,"Liru"]],[3896,3896],[3900,3900]]],[1562545139827,["GJX@GJXAIOU",[[-1,3896,"Liru"]],[3900,3900],[3896,3896]]],[1562545164829,["GJX@GJXAIOU",[[1,3896,"例如：··"]],[3896,3896],[3901,3901]]],[1562545166741,["GJX@GJXAIOU",[[-1,3900,"·"]],[3901,3901],[3900,3900]]],[1562545167466,["GJX@GJXAIOU",[[1,3900,"``"]],[3900,3900],[3902,3902]]],[1562545169233,["GJX@GJXAIOU",[[-1,3899,"·"]],[3900,3900],[3899,3899]]],[1562545179017,["GJX@GJXAIOU",[[1,3900," i  > j ? i __"]],[3900,3900],[3913,3913]]],[1562545179699,["GJX@GJXAIOU",[[-1,3913,"_"]],[3913,3913],[3912,3912]]],[1562545180913,["GJX@GJXAIOU",[[-1,3912,"_"]],[3913,3913],[3912,3912]]],[1562545183554,["GJX@GJXAIOU",[[1,3912,"*19"]],[3912,3912],[3915,3915]]],[1562545184359,["GJX@GJXAIOU",[[-1,3914,"9"]],[3915,3915],[3914,3914]]],[1562545194026,["GJX@GJXAIOU",[[1,3914,"0 : j * 10;"]],[3914,3914],[3925,3925]]],[1562545199378,["GJX@GJXAIOU",[[1,3920," "]],[3920,3920],[3921,3921]]],[1562545201395,["GJX@GJXAIOU",[[1,3913," "]],[3913,3913],[3914,3914]]],[1562545206703,["GJX@GJXAIOU",[[1,3930,"\n"]],[3928,3928],[3929,3929]]],[1562545206833,["GJX@GJXAIOU",[[1,3931,"\n"]],[3929,3929],[3930,3930]]],[1562545212323,["GJX@GJXAIOU",[[1,3930,"## 3.2"]],[3930,3930],[3936,3936]]],[1562545212749,["GJX@GJXAIOU",[[-1,3935,"2"]],[3936,3936],[3935,3935]]],[1562545214810,["GJX@GJXAIOU",[[1,3935,"13 zifu"]],[3935,3935],[3942,3942]]],[1562545215728,["GJX@GJXAIOU",[[-1,3938,"zifu"]],[3942,3942],[3938,3938]]],[1562545228612,["GJX@GJXAIOU",[[1,3938,"字符串操作符+ 和+="]],[3938,3938],[3949,3949]]],[1562545238065,["GJX@GJXAIOU",[[1,3951,"\n"]],[3949,3949],[3950,3950]]],[1562545238860,["GJX@GJXAIOU",[[1,3952,"\n"]],[3950,3950],[3951,3951]]],[1562545239962,["GJX@GJXAIOU",[[1,3951,"****"]],[3951,3951],[3953,3953]]],[1562545255551,["GJX@GJXAIOU",[[1,3953,"如果一个操作是以字符串开头，后续"]],[3953,3953],[3969,3969]]],[1562545272987,["GJX@GJXAIOU",[[1,3969,"所有的操作数都必须是字符串类型，"]],[3969,3969],[3985,3985]]],[1562545282945,["GJX@GJXAIOU",[[-1,3984,"，"]],[3985,3985],[3984,3984]]],[1562545314459,["GJX@GJXAIOU",[[1,3986,"； 编译器会把双引号内的字符序列自动转换为字符串；"]],[3986,3986],[4011,4011]]],[1562545343367,["GJX@GJXAIOU",[[1,4013,"\n"]],[4011,4011],[4012,4012]]],[1562545343649,["GJX@GJXAIOU",[[1,4014,"\n"]],[4012,4012],[4013,4013]]],[1562545360028,["GJX@GJXAIOU",[[1,4013,"## 3.14 使用字符串时常犯的错误"]],[4013,4013],[4032,4032]]],[1562545360355,["GJX@GJXAIOU",[[1,4034,"\n"]],[4032,4032],[4033,4033]]],[1562545360691,["GJX@GJXAIOU",[[1,4035,"\n"]],[4033,4033],[4034,4034]]],[1562545364042,["GJX@GJXAIOU",[[1,4034,"= "]],[4034,4034],[4036,4036]]],[1562545364801,["GJX@GJXAIOU",[[-1,4034,"= "]],[4036,4036],[4034,4034]]],[1562545368845,["GJX@GJXAIOU",[[1,4034,"‘=’"]],[4034,4034],[4037,4037]]],[1562545370545,["GJX@GJXAIOU",[[-1,4034,"‘=’"]],[4037,4037],[4034,4034]]],[1562545371988,["GJX@GJXAIOU",[[1,4034,"·=·"]],[4034,4034],[4037,4037]]],[1562545373064,["GJX@GJXAIOU",[[-1,4034,"·=·"]],[4037,4037],[4034,4034]]],[1562545374269,["GJX@GJXAIOU",[[1,4034,"``"]],[4034,4034],[4036,4036]]],[1562545375721,["GJX@GJXAIOU",[[1,4035,"="]],[4035,4035],[4036,4036]]],[1562545384699,["GJX@GJXAIOU",[[1,4037,"表示赋值，··"]],[4037,4037],[4044,4044]]],[1562545385463,["GJX@GJXAIOU",[[-1,4042,"··"]],[4044,4044],[4042,4042]]],[1562545386275,["GJX@GJXAIOU",[[1,4041,"··"]],[4041,4041],[4043,4043]]],[1562545387377,["GJX@GJXAIOU",[[-1,4041,"··"]],[4043,4043],[4041,4041]]],[1562545388555,["GJX@GJXAIOU",[[1,4042,"··"]],[4042,4042],[4044,4044]]],[1562545389858,["GJX@GJXAIOU",[[-1,4042,"··"]],[4044,4044],[4042,4042]]],[1562545390554,["GJX@GJXAIOU",[[1,4042,"``"]],[4042,4042],[4044,4044]]],[1562545391914,["GJX@GJXAIOU",[[1,4043,"=="]],[4043,4043],[4045,4045]]],[1562545403867,["GJX@GJXAIOU",[[1,4046,"表示判断两个是否相等，"]],[4046,4046],[4057,4057]]],[1562545416882,["GJX@GJXAIOU",[[-1,4056,"，"]],[4057,4057],[4056,4056]]],[1562545424261,["GJX@GJXAIOU",[[1,4056,"；但是当="]],[4056,4056],[4061,4061]]],[1562545427941,["GJX@GJXAIOU",[[1,4060,"`"]],[4060,4060],[4061,4061]]],[1562545436382,["GJX@GJXAIOU",[[1,4062,"`两边都是"]],[4062,4062],[4067,4067]]],[1562545447107,["GJX@GJXAIOU",[[1,4067,"布尔值的时候，``"]],[4067,4067],[4076,4076]]],[1562545449538,["GJX@GJXAIOU",[[1,4075,"whle"]],[4075,4075],[4079,4079]]],[1562545450361,["GJX@GJXAIOU",[[-1,4077,"le"]],[4079,4079],[4077,4077]]],[1562545451850,["GJX@GJXAIOU",[[1,4077,"ile()"]],[4077,4077],[4082,4082]]],[1562545455444,["GJX@GJXAIOU",[[1,4081,"x = y"]],[4081,4081],[4086,4086]]],[1562545457532,["GJX@GJXAIOU",[[1,4087,"{}"]],[4087,4087],[4089,4089]]],[1562545472845,["GJX@GJXAIOU",[[1,4090,"不会报错，``"]],[4090,4090],[4097,4097]]],[1562545474651,["GJX@GJXAIOU",[[1,4096,"x= "]],[4096,4096],[4099,4099]]],[1562545476114,["GJX@GJXAIOU",[[1,4097," "]],[4097,4097],[4098,4098]]],[1562545476972,["GJX@GJXAIOU",[[1,4100," "]],[4099,4099],[4100,4100]]],[1562545477603,["GJX@GJXAIOU",[[1,4100,"u"]],[4100,4100],[4101,4101]]],[1562545478344,["GJX@GJXAIOU",[[-1,4100,"u"]],[4101,4101],[4100,4100]]],[1562545478732,["GJX@GJXAIOU",[[1,4100,"y"]],[4100,4100],[4101,4101]]],[1562545485315,["GJX@GJXAIOU",[[1,4103,"属于合法表达式"]],[4103,4103],[4110,4110]]],[1562545499781,["GJX@GJXAIOU",[[1,4112,"\n"]],[4110,4110],[4111,4111]]],[1562545499945,["GJX@GJXAIOU",[[1,4113,"\n"]],[4111,4111],[4112,4112]]],[1562545500200,["GJX@GJXAIOU",[[1,4114,"\n"]],[4112,4112],[4113,4113]]],[1562545500421,["GJX@GJXAIOU",[[1,4115,"\n"]],[4113,4113],[4114,4114]]],[1562545511086,["GJX@GJXAIOU",[[1,4114,"## 3.15 类型转换操作符"]],[4114,4114],[4129,4129]]],[1562545511568,["GJX@GJXAIOU",[[1,4131,"\n"]],[4129,4129],[4130,4130]]],[1562545537454,["GJX@GJXAIOU",[[1,4130,"- 可以对数值和比那辆"]],[4130,4130],[4141,4141]]],[1562545538267,["GJX@GJXAIOU",[[-1,4138,"比那辆"]],[4141,4141],[4138,4138]]],[1562545546078,["GJX@GJXAIOU",[[1,4138,"变量进行类型转换；"]],[4138,4138],[4147,4147]]],[1562545546497,["GJX@GJXAIOU",[[1,4148,"- \n"]],[4147,4147],[4150,4150]]],[1562545554933,["GJX@GJXAIOU",[[1,4150,"布尔类型不可以进行任何"]],[4150,4150],[4161,4161]]],[1562545565924,["GJX@GJXAIOU",[[1,4161,"类型的转换处理；"]],[4161,4161],[4169,4169]]],[1562545566259,["GJX@GJXAIOU",[[1,4170,"- \n"]],[4169,4169],[4172,4172]]],[1562545576616,["GJX@GJXAIOU",[[1,4172,"“类”数据不行"]],[4172,4172],[4179,4179]]],[1562545578057,["GJX@GJXAIOU",[[-1,4177,"不行"]],[4179,4179],[4177,4177]]],[1562545584468,["GJX@GJXAIOU",[[1,4177,"类型不允许仅限"]],[4177,4177],[4184,4184]]],[1562545585409,["GJX@GJXAIOU",[[-1,4182,"仅限"]],[4184,4184],[4182,4182]]],[1562545615884,["GJX@GJXAIOU",[[1,4182,"进行类型转换，一个类转换为另一个类得采取"]],[4182,4182],[4202,4202]]],[1562545620685,["GJX@GJXAIOU",[[1,4202,"其他方法；"]],[4202,4202],[4207,4207]]],[1562545622409,["GJX@GJXAIOU",[[1,4208,"- \n"]],[4207,4207],[4210,4210]]],[1562545627964,["GJX@GJXAIOU",[[1,4210,"对象可以自"]],[4210,4210],[4215,4215]]],[1562545629651,["GJX@GJXAIOU",[[-1,4214,"自"]],[4215,4215],[4214,4214]]],[1562545652525,["GJX@GJXAIOU",[[1,4214,"在其所属类型的类族之间可以进行类型转换；"]],[4214,4214],[4234,4234]]],[1562545658638,["GJX@GJXAIOU",[[1,4235,"- \n"]],[4234,4234],[4237,4237]]],[1562545663484,["GJX@GJXAIOU",[[1,4237,"````"]],[4237,4237],[4241,4241]]],[1562545668043,["GJX@GJXAIOU",[[1,4238,"float"]],[4238,4238],[4243,4243]]],[1562545678982,["GJX@GJXAIOU",[[1,4245,"double"]],[4245,4245],[4251,4251]]],[1562545683189,["GJX@GJXAIOU",[[1,4244,"he"]],[4244,4244],[4246,4246]]],[1562545684194,["GJX@GJXAIOU",[[-1,4244,"he"]],[4246,4246],[4244,4244]]],[1562545685807,["GJX@GJXAIOU",[[1,4244,"和"]],[4244,4244],[4245,4245]]],[1562545693701,["GJX@GJXAIOU",[[1,4253,"转换为整数"]],[4253,4253],[4258,4258]]],[1562545695986,["GJX@GJXAIOU",[[-1,4256,"整数"]],[4258,4258],[4256,4256]]],[1562545699963,["GJX@GJXAIOU",[[1,4256,"整型"]],[4256,4256],[4258,4258]]],[1562545774923,["GJX@GJXAIOU",[[1,4258,"数据，直接对该数字进行截尾"]],[4258,4258],[4271,4271]]],[1562545853645,["GJX@GJXAIOU",[[1,4271,"；使用j"]],[4271,4271],[4275,4275]]],[1562545853676,["GJX@GJXAIOU",[[1,4274," "]],[4275,4275],[4276,4276]]],[1562545856164,["GJX@GJXAIOU",[[1,4276,"ava.lang"]],[4276,4276],[4284,4284]]],[1562545860783,["GJX@GJXAIOU",[[1,4284,".Math中"]],[4284,4284],[4290,4290]]],[1562545860813,["GJX@GJXAIOU",[[1,4289," "]],[4290,4290],[4291,4291]]],[1562545862123,["GJX@GJXAIOU",[[1,4291,"的r"]],[4291,4291],[4293,4293]]],[1562545862154,["GJX@GJXAIOU",[[1,4292," "]],[4293,4293],[4294,4294]]],[1562545864653,["GJX@GJXAIOU",[[1,4294,"ound（）"]],[4294,4294],[4300,4300]]],[1562545865237,["GJX@GJXAIOU",[[-1,4298,"（）"]],[4300,4300],[4298,4298]]],[1562545875471,["GJX@GJXAIOU",[[1,4298,"()方法可以进行摄入"]],[4298,4298],[4308,4308]]],[1562545876178,["GJX@GJXAIOU",[[-1,4306,"摄入"]],[4308,4308],[4306,4306]]],[1562545908707,["GJX@GJXAIOU",[[1,4306,"舍入：例如：``"]],[4306,4306],[4314,4314]]],[1562545914010,["GJX@GJXAIOU",[[1,4313,"Math.rounf"]],[4313,4313],[4323,4323]]],[1562545914489,["GJX@GJXAIOU",[[-1,4322,"f"]],[4323,4323],[4322,4322]]],[1562545915486,["GJX@GJXAIOU",[[1,4322,"d()"]],[4322,4322],[4325,4325]]],[1562545918698,["GJX@GJXAIOU",[[1,4324,"0.7"]],[4324,4324],[4327,4327]]],[1562545923435,["GJX@GJXAIOU",[[1,4329," = 1"]],[4329,4329],[4333,4333]]],[1562546037723,["GJX@GJXAIOU",[[1,4334,"- \n"]],[4333,4333],[4336,4336]]],[1562546050470,["GJX@GJXAIOU",[[1,4336,"执行算数"]],[4336,4336],[4340,4340]]],[1562546051235,["GJX@GJXAIOU",[[-1,4338,"算数"]],[4340,4340],[4338,4338]]],[1562546070805,["GJX@GJXAIOU",[[1,4338,"算术运算和按位计算时，只要类型比Int"]],[4338,4338],[4357,4357]]],[1562546070836,["GJX@GJXAIOU",[[1,4354," "]],[4357,4357],[4358,4358]]],[1562546072031,["GJX@GJXAIOU",[[-1,4355,"Int"]],[4358,4358],[4355,4355]]],[1562546074114,["GJX@GJXAIOU",[[1,4355,"intxiao"]],[4355,4355],[4362,4362]]],[1562546075309,["GJX@GJXAIOU",[[-1,4358,"xiao"]],[4362,4362],[4358,4358]]],[1562546077148,["GJX@GJXAIOU",[[1,4358,"小"]],[4358,4358],[4359,4359]]],[1562546077179,["GJX@GJXAIOU",[[1,4358," "]],[4359,4359],[4360,4360]]],[1562546078438,["GJX@GJXAIOU",[[1,4360,"（）"]],[4360,4360],[4362,4362]]],[1562546091994,["GJX@GJXAIOU",[[1,4361,"例如：char/byte/short"]],[4361,4361],[4379,4379]]],[1562546109211,["GJX@GJXAIOU",[[1,4380,"，在运算之前值会自动转为i"]],[4380,4380],[4393,4393]]],[1562546109241,["GJX@GJXAIOU",[[1,4392," "]],[4393,4393],[4394,4394]]],[1562546126931,["GJX@GJXAIOU",[[1,4394,"nt，最终生成的结果值也是i"]],[4394,4394],[4408,4408]]],[1562546126962,["GJX@GJXAIOU",[[1,4407," "]],[4408,4408],[4409,4409]]],[1562546129371,["GJX@GJXAIOU",[[1,4409,"nt."]],[4409,4409],[4412,4412]]],[1562591195694,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562591195797,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1562591197204,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- Java\n- Java编程思想\nflag: green\nstyle: summer\ndate: '2019-7-6'\n---"]],[0,0],[75,75]]],[1562591199614,["GJX@GJXAIOU",[[-1,69,"6"]],[70,70],[69,69]]],[1562591200472,["GJX@GJXAIOU",[[1,69,"7"]],[69,69],[70,70]]]],null,"GJX@GJXAIOU"]]}