{"compress":true,"commitItems":[["74ff7fe1-e73f-48dd-9b79-702b2dc45530",1565745322219,"",[[1565745267369,["GJX@GJXAIOU",[[1,0,"# 课后习题\n\n\n\n"]],[0,0],[9,9]]],[1565745289867,["GJX@GJXAIOU",[[1,9,"# [Java核心技术及面试指南面试题，基本数据类型、封装类和运算操作的面试题](https://www.cnblogs.com/JavaArchitect/p/8495788.html)\n\n2.1.5.1说说&和&&的区别，以及|与||的区别。\n\n    &和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果？\n\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 s1 short型 通过 + 运算后s1 自动转为int 型 所以报错。\n\n运行short s1 = 1; s1 += 1;又会出现什么结果？\n\n    这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n\n    用移位运算符：int i = 2 << 3;\n\n  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n\n    ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n  2.1.5.5 Integer与int的区别。\n\n    Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n  2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n\n    将括号内的数+0.5之后，向下取值，所以前者是13，后者是-13。\n\n2.1.5.7 float 型float f=3.6是否正确?\n\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f"]],[9,9],[869,869]]],[1565745294538,["GJX@GJXAIOU",[[1,10,"#"]],[10,10],[104,104]]],[1565745297705,["GJX@GJXAIOU",[[-1,49,"](https://www.cnblogs.com/JavaArchitect/p/8495788.html)\n"]],[49,105],[49,49]]],[1565745299353,["GJX@GJXAIOU",[[-1,12,"["]],[13,13],[12,12]]],[1565745300783,["GJX@GJXAIOU",[[1,49,"\n"]],[48,48],[49,49]]],[1565751721310,["GJX@GJXAIOU",[[1,815,"    \n"]],[814,814],[819,819]]],[1565751721428,["GJX@GJXAIOU",[[-1,815,"    "],[1,819,"\n"]],[819,819],[816,816]]],[1565751721579,["GJX@GJXAIOU",[[1,817,"\n"]],[816,816],[817,817]]],[1565751721686,["GJX@GJXAIOU",[[1,818,"\n"]],[817,817],[818,818]]],[1565751722085,["GJX@GJXAIOU",[[1,818,"# [Java核心技术及面试指南 流程控制方面的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495809.html)\n\n2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n\n    1 switch里可以用char，byte，short，int这些基本类型，以及它们的封装类。\n    2 在switch里不能用long，double，float，boolean，包括他们的封装类。\n    3 jdk1.7和以上的版本里，可以是用字符串类型。\n    4 switch中可以用枚举类型。\n\n2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n2.2.5.3while和do while有什么差别？\n\n    while是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n\n    不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。"]],[818,818],[1374,1374]]],[1565751725020,["GJX@GJXAIOU",[[1,1375,"    \n"]],[1374,1374],[1379,1379]]],[1565751725156,["GJX@GJXAIOU",[[-1,1375,"    "],[1,1379,"\n"]],[1379,1379],[1376,1376]]],[1565751725300,["GJX@GJXAIOU",[[1,1377,"\n"]],[1376,1376],[1377,1377]]],[1565769223688,["GJX@GJXAIOU",[[1,1378,"\n"]],[1376,1376],[1377,1377]]],[1565769242815,["GJX@GJXAIOU",[[1,1379,"\n"]],[1376,1376],[1377,1377]]],[1565769242960,["GJX@GJXAIOU",[[1,1380,"\n"]],[1377,1377],[1378,1378]]],[1565769243377,["GJX@GJXAIOU",[[1,1378,"# [Java核心技术及面试指南 2.3.6 String相关的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495816.html)\n\n2.3.6.1 String是最基本的数据类型吗?能不能被继承？\n\n    String不能被继承，它是一个对象\n\n2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n\n    创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n2.3.6.3 String 和StringBuffer的区别？\n\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n2.3.6.4 StringBuffer和StringBuilder 的区别。\n\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n\n    参见本书的对应章节\n\n2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n\n   a还是12345，参见本书的对应章节\n\n2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。"]],[1378,1378],[2087,2087]]],[1565772916236,["GJX@GJXAIOU",[[1,2090,"\n"]],[2088,2088],[2089,2089]]],[1565772916371,["GJX@GJXAIOU",[[1,2091,"\n"]],[2089,2089],[2090,2090]]],[1565772916499,["GJX@GJXAIOU",[[1,2092,"\n"]],[2090,2090],[2091,2091]]],[1565772916618,["GJX@GJXAIOU",[[1,2093,"\n"]],[2091,2091],[2092,2092]]],[1565772953772,["GJX@GJXAIOU",[[1,2090,"# [Java核心技术及面试指南 面向对象部分的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495825.html)\n\n问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n问题2.7.2，接口和抽象类有什么差别？\n\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n问题2.7.5，finalize方法有什么作用？\n\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n问题2.7.6，final关键的含义。\n\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n问题2.7.7，构造函数能否被覆盖，能否被重载？\n\n构造函数能重载，但不能覆盖，原因已经讲过。\n\n接下来的问题只给出的题目，答案请到附录里去找。\n\n问题2.7.8静态变量和实例变量的区别？\n\n问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n问题2.7.10请说出作用域public，private，protected，以及不写时的区别。"]],[2090,2090],[3280,3280]]]],null,"GJX@GJXAIOU"],["6894133c-cf25-4994-8d87-e69d9caabb8b",1566031234953,"# 课后习题\n\n\n## Java核心技术及面试指南面试题，基本数据类型、封装类和运算操作的面试题\n\n2.1.5.1说说&和&&的区别，以及|与||的区别。\n\n    &和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果？\n\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 s1 short型 通过 + 运算后s1 自动转为int 型 所以报错。\n\n运行short s1 = 1; s1 += 1;又会出现什么结果？\n\n    这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n\n    用移位运算符：int i = 2 << 3;\n\n  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n\n    ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n  2.1.5.5 Integer与int的区别。\n\n    Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n  2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n\n    将括号内的数+0.5之后，向下取值，所以前者是13，后者是-13。\n\n2.1.5.7 float 型float f=3.6是否正确?\n\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f\n\n\n\n# [Java核心技术及面试指南 流程控制方面的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495809.html)\n\n2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n\n    1 switch里可以用char，byte，short，int这些基本类型，以及它们的封装类。\n    2 在switch里不能用long，double，float，boolean，包括他们的封装类。\n    3 jdk1.7和以上的版本里，可以是用字符串类型。\n    4 switch中可以用枚举类型。\n\n2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n2.2.5.3while和do while有什么差别？\n\n    while是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n\n    不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。\n\n\n\n# [Java核心技术及面试指南 2.3.6 String相关的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495816.html)\n\n2.3.6.1 String是最基本的数据类型吗?能不能被继承？\n\n    String不能被继承，它是一个对象\n\n2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n\n    创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n2.3.6.3 String 和StringBuffer的区别？\n\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n2.3.6.4 StringBuffer和StringBuilder 的区别。\n\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n\n    参见本书的对应章节\n\n2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n\n   a还是12345，参见本书的对应章节\n\n2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。\n\n\n# [Java核心技术及面试指南 面向对象部分的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495825.html)\n\n问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n问题2.7.2，接口和抽象类有什么差别？\n\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n问题2.7.5，finalize方法有什么作用？\n\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n问题2.7.6，final关键的含义。\n\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n问题2.7.7，构造函数能否被覆盖，能否被重载？\n\n构造函数能重载，但不能覆盖，原因已经讲过。\n\n接下来的问题只给出的题目，答案请到附录里去找。\n\n问题2.7.8静态变量和实例变量的区别？\n\n问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n问题2.7.10请说出作用域public，private，protected，以及不写时的区别。\n\n\n\n",[[1566031178414,["GJX@GJXAIOU",[[1,3284,"\n"]],[3280,3280],[3281,3281]]],[1566031178527,["GJX@GJXAIOU",[[1,3285,"\n"]],[3281,3281],[3282,3282]]],[1566031178656,["GJX@GJXAIOU",[[1,3286,"\n"]],[3282,3282],[3283,3283]]],[1566031214174,["GJX@GJXAIOU",[[1,3287,"\n"]],[3282,3282],[3283,3283]]],[1566031214302,["GJX@GJXAIOU",[[1,3288,"\n"]],[3283,3283],[3284,3284]]],[1566031214825,["GJX@GJXAIOU",[[1,3284,"# [Java核心技术及面试指南 线性表方面的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495834.html)\n\n3.2.7.1 请用ArrayList实现Stack以及Queue的功能。\n\npublic class ArrayListStack extends ArrayList implements Stack {\n    ArrayList arrayList =new ArrayList<>() ;\n    public void push(T obj) {\n       arrayList.add(obj);\n    }\n    public T pop() {\n        return arrayList.remove(arrayList.size()-1);\n    }\n\n    public int size(){\n\n        return arrayList.size(); \n\n    }\n}\n\n3.2.7.2 如果让你实现Java的ArrayList，你需要考虑哪些要素？\n\n    ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。 \n\n    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。\n\n   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 \n   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。\n\n     ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。\n\n    ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。\n\n    每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。\n\n    数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。 \n\n    Fail-Fast机制： \nArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。\n\n3.2.7.3 请通过Iterator对象访问LinkedList对象，并说明这种访问方式的好处。\n\n  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n\n  好处是，能用统一的方式来访问集合对象，这也是迭代器模式的好处。\n\n3.2.7.4 你有没有读过ArrayList部分的底层实现源代码？如果有，请说明下其中的add方法是如何实现的？尤其请考虑动态扩展的情况。\n\n如下是扩容的底层方法\n\n/**\n* 增加ArrayList容量。\n* \n* @param minCapacity 想要的最小容量\n*/\npublic void ensureCapacity(int minCapacity) {\n    // 如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，最小扩容量为DEFAULT_CAPACITY，否则为0\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)? 0: DEFAULT_CAPACITY;\n    //如果想要的最小容量大于最小扩容量，则使用想要的最小容量。\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureCapacityInternal(int minCapacity) {\n    // 若elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，则取minCapacity为DEFAULT_CAPACITY和参数minCapacity    之间的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 确保指定的最小容量 > 数组缓冲区当前的长度 \n    if (minCapacity - elementData.length > 0)\n    //扩容\n    grow(minCapacity);\n}\n\n/**\n* 分派给arrays的最大容量\n* 为什么要减去8呢？\n* 因为某些VM会在数组中保留一些头字，尝试分配这个最大存储容量，可能会导致array容量大于VM的limit，最终导致OutOfMemoryError。\n*/\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n* 扩容，保证ArrayList至少能存储minCapacity个元素\n* 第一次扩容，逻辑为newCapacity = oldCapacity + (oldCapacity >> 1);即在原有的容量基础上增加一半。第一次扩容后，如果容量还是小于minCapacity，就将容量扩充为minCapacity。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void grow(int minCapacity) {\n    // 获取当前数组的容量\n    int oldCapacity = elementData.length;\n    // 扩容。新的容量=当前容量+当前容量/2.即将当前容量增加一半。\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //如果扩容后的容量还是小于想要的最小容量\n    if (newCapacity - minCapacity < 0)\n        //将扩容后的容量再次扩容为想要的最小容量\n        newCapacity = minCapacity;\n    //如果扩容后的容量大于临界值，则进行大容量分配\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n     // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData,newCapacity);\n}\n/**\n* 进行大容量分配\n*/\nprivate static int hugeCapacity(int minCapacity) {\n    //如果minCapacity<0，抛出异常\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    //如果想要的容量大于MAX_ARRAY_SIZE，则分配Integer.MAX_VALUE，否则分配MAX_ARRAY_SIZE\n    return (minCapacity > MAX_ARRAY_SIZE) ?Integer.MAX_VALUE :MAX_ARRAY_SIZE;\n}\n\n3.2.7.5 请说下Collection和Collections的差别以及各自的用途。\n\n    Collections 是一个集合的一个类，其中包含有一些和集合操作相关的静态多态方法。Jave集合里则有另外一个和它非常相似的接口    \n\n    Collection（不带s），它是线性表类集合的父接口，List和Set等接口都是通过实现这个接口来实现的。\n\n3.2.7.6 我们知道Set对象里不能有重复的元素，请说下是用什么方法来判断是否重复？是通过equals方法吗？\n\n    请参与本书3.2.3 Set集合是如何判断重复，里面有详细的描述"]],[3284,3284],[7950,7950]]]],null,"GJX@GJXAIOU"],["4f9daa3d-676b-48e8-9b85-95e0e040fd32",1566107186798,"# 课后习题\n\n\n## Java核心技术及面试指南面试题，基本数据类型、封装类和运算操作的面试题\n\n2.1.5.1说说&和&&的区别，以及|与||的区别。\n\n    &和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果？\n\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 s1 short型 通过 + 运算后s1 自动转为int 型 所以报错。\n\n运行short s1 = 1; s1 += 1;又会出现什么结果？\n\n    这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n\n    用移位运算符：int i = 2 << 3;\n\n  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n\n    ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n  2.1.5.5 Integer与int的区别。\n\n    Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n  2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n\n    将括号内的数+0.5之后，向下取值，所以前者是13，后者是-13。\n\n2.1.5.7 float 型float f=3.6是否正确?\n\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f\n\n\n\n# [Java核心技术及面试指南 流程控制方面的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495809.html)\n\n2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n\n    1 switch里可以用char，byte，short，int这些基本类型，以及它们的封装类。\n    2 在switch里不能用long，double，float，boolean，包括他们的封装类。\n    3 jdk1.7和以上的版本里，可以是用字符串类型。\n    4 switch中可以用枚举类型。\n\n2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n2.2.5.3while和do while有什么差别？\n\n    while是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n\n    不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。\n\n\n\n# [Java核心技术及面试指南 2.3.6 String相关的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495816.html)\n\n2.3.6.1 String是最基本的数据类型吗?能不能被继承？\n\n    String不能被继承，它是一个对象\n\n2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n\n    创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n2.3.6.3 String 和StringBuffer的区别？\n\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n2.3.6.4 StringBuffer和StringBuilder 的区别。\n\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n\n    参见本书的对应章节\n\n2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n\n   a还是12345，参见本书的对应章节\n\n2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。\n\n\n# [Java核心技术及面试指南 面向对象部分的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495825.html)\n\n问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n问题2.7.2，接口和抽象类有什么差别？\n\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n问题2.7.5，finalize方法有什么作用？\n\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n问题2.7.6，final关键的含义。\n\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n问题2.7.7，构造函数能否被覆盖，能否被重载？\n\n构造函数能重载，但不能覆盖，原因已经讲过。\n\n接下来的问题只给出的题目，答案请到附录里去找。\n\n问题2.7.8静态变量和实例变量的区别？\n\n问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n问题2.7.10请说出作用域public，private，protected，以及不写时的区别。\n\n\n\n# [Java核心技术及面试指南 线性表方面的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495834.html)\n\n3.2.7.1 请用ArrayList实现Stack以及Queue的功能。\n\npublic class ArrayListStack extends ArrayList implements Stack {\n    ArrayList arrayList =new ArrayList<>() ;\n    public void push(T obj) {\n       arrayList.add(obj);\n    }\n    public T pop() {\n        return arrayList.remove(arrayList.size()-1);\n    }\n\n    public int size(){\n\n        return arrayList.size(); \n\n    }\n}\n\n3.2.7.2 如果让你实现Java的ArrayList，你需要考虑哪些要素？\n\n    ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。 \n\n    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。\n\n   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 \n   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。\n\n     ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。\n\n    ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。\n\n    每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。\n\n    数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。 \n\n    Fail-Fast机制： \nArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。\n\n3.2.7.3 请通过Iterator对象访问LinkedList对象，并说明这种访问方式的好处。\n\n  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n\n  好处是，能用统一的方式来访问集合对象，这也是迭代器模式的好处。\n\n3.2.7.4 你有没有读过ArrayList部分的底层实现源代码？如果有，请说明下其中的add方法是如何实现的？尤其请考虑动态扩展的情况。\n\n如下是扩容的底层方法\n\n/**\n* 增加ArrayList容量。\n* \n* @param minCapacity 想要的最小容量\n*/\npublic void ensureCapacity(int minCapacity) {\n    // 如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，最小扩容量为DEFAULT_CAPACITY，否则为0\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)? 0: DEFAULT_CAPACITY;\n    //如果想要的最小容量大于最小扩容量，则使用想要的最小容量。\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureCapacityInternal(int minCapacity) {\n    // 若elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，则取minCapacity为DEFAULT_CAPACITY和参数minCapacity    之间的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 确保指定的最小容量 > 数组缓冲区当前的长度 \n    if (minCapacity - elementData.length > 0)\n    //扩容\n    grow(minCapacity);\n}\n\n/**\n* 分派给arrays的最大容量\n* 为什么要减去8呢？\n* 因为某些VM会在数组中保留一些头字，尝试分配这个最大存储容量，可能会导致array容量大于VM的limit，最终导致OutOfMemoryError。\n*/\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n* 扩容，保证ArrayList至少能存储minCapacity个元素\n* 第一次扩容，逻辑为newCapacity = oldCapacity + (oldCapacity >> 1);即在原有的容量基础上增加一半。第一次扩容后，如果容量还是小于minCapacity，就将容量扩充为minCapacity。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void grow(int minCapacity) {\n    // 获取当前数组的容量\n    int oldCapacity = elementData.length;\n    // 扩容。新的容量=当前容量+当前容量/2.即将当前容量增加一半。\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //如果扩容后的容量还是小于想要的最小容量\n    if (newCapacity - minCapacity < 0)\n        //将扩容后的容量再次扩容为想要的最小容量\n        newCapacity = minCapacity;\n    //如果扩容后的容量大于临界值，则进行大容量分配\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n     // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData,newCapacity);\n}\n/**\n* 进行大容量分配\n*/\nprivate static int hugeCapacity(int minCapacity) {\n    //如果minCapacity<0，抛出异常\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    //如果想要的容量大于MAX_ARRAY_SIZE，则分配Integer.MAX_VALUE，否则分配MAX_ARRAY_SIZE\n    return (minCapacity > MAX_ARRAY_SIZE) ?Integer.MAX_VALUE :MAX_ARRAY_SIZE;\n}\n\n3.2.7.5 请说下Collection和Collections的差别以及各自的用途。\n\n    Collections 是一个集合的一个类，其中包含有一些和集合操作相关的静态多态方法。Jave集合里则有另外一个和它非常相似的接口    \n\n    Collection（不带s），它是线性表类集合的父接口，List和Set等接口都是通过实现这个接口来实现的。\n\n3.2.7.6 我们知道Set对象里不能有重复的元素，请说下是用什么方法来判断是否重复？是通过equals方法吗？\n\n    请参与本书3.2.3 Set集合是如何判断重复，里面有详细的描述\n\n\n\n\n",[[1566107144307,["GJX@GJXAIOU",[[-1,79,"    "]],[79,83],[79,79]]],[1566107149201,["GJX@GJXAIOU",[[-1,50,""],[1,50,"-"],[-1,177,"   "],[1,180,"   "],[-1,291,"   "],[1,294,"   "],[-1,348," "],[1,349," "],[-1,378,"   "],[1,381,"   "],[-1,396," "],[1,397," "],[-1,401," "],[1,402," "],[-1,406," "],[1,407," "],[-1,439,"   "],[1,442,"   "],[-1,535," "],[1,536," "],[-1,562,"   "],[1,565,"   "],[-1,618," "],[1,619," "],[-1,674,"   "],[1,677,"   "],[-1,746,"   "],[1,749,"   "],[-1,754," "],[1,755," "],[-1,953,"    1 "],[1,959,"    1 "],[-1,1005,"   "],[1,1008,"   "],[-1,1058,"   "],[1,1061,"   "],[-1,1089,"   "],[1,1092,"   "],[-1,1143,"   "],[1,1146,"   "],[-1,1225,"   "],[1,1228,"   "],[-1,1327,"   "],[1,1330,"   "],[-1,1502,"   "],[1,1505,"   "],[-1,1591,"   "],[1,1594,"   "],[-1,1662," "],[1,1663," "],[-1,1768,"   "],[1,1771,"   "],[-1,1880,"   "],[1,1883,"   "],[-1,1953,"   "],[1,1956,"   "],[-1,2043,"   "],[1,2046,"   "],[-1,3473,"   "],[1,3476,"   "],[-1,3518,"   "],[1,3521,"   "],[-1,3548,"       "],[1,3555,"       "],[-1,3575,"    }\n    "],[1,3585,"    }\n    "],[-1,3602,"       "],[1,3609,"       "],[-1,3655,"   "],[1,3658,"   "],[-1,3662,"   "],[1,3665,"   "],[-1,3686,"       "],[1,3693,"       "],[-1,3700," "],[1,3701," "],[-1,3718," \n\n   "],[1,3724," \n\n   "],[-1,3771,"   "],[1,3774,"   "],[-1,3832," \n\n   "],[1,3838," \n\n   "],[-1,3952,"   "],[1,3955,"   "],[-1,4158," \n   "],[1,4163," \n   "],[-1,4232,"     "],[1,4237,"     "],[-1,4353,"    "],[1,4357,"    "],[-1,4376," "],[1,4377," "],[-1,4383," E "],[1,4386," E "],[-1,4400," "],[1,4401," "],[-1,4411," "],[1,4412," "],[-1,4418," E "],[1,4421," E "],[-1,4449," "],[1,4450," "],[-1,4457," E> "],[1,4461," E> "],[-1,4474," "],[1,4475," "],[-1,4481," "],[1,4482," "],[-1,4494," "],[1,4495," "],[-1,4502," E> "],[1,4506," E> "],[-1,4520,"   "],[1,4523,"   "],[-1,4618," "],[1,4619," "],[-1,4701,"   "],[1,4704,"   "],[-1,4895," \n\n    "],[1,4902," \n\n    "],[-1,4914," "],[1,4915," "],[-1,5058," "],[1,5059," "],[-1,5071," "],[1,5072," "],[-1,5078,"  new "],[1,5084,"  new "],[-1,5099," "],[1,5100," "],[-1,5108,"  "],[1,5110,"  "],[-1,5125," = "],[1,5128," = "],[-1,5149,"  "],[1,5151,"  "],[-1,5170," { \n   "],[1,5177," { \n   "],[-1,5218," "],[1,5219," "],[-1,5223,"  \n  }\n\n "],[1,5232,"  \n  }\n\n "],[-1,5372," "],[1,5373," "],[-1,5452,"   "],[1,5455,"   "],[-1,5536,"   "],[1,5539,"   "],[-1,5629,"   "],[1,5632,"   "],[-1,5664,"   "],[1,5667,"   "],[-1,5699,"       "],[1,5706,"       "],[-1,5744,"   "],[1,5747,"   "],[-1,5784," "],[1,5785," "],[-1,5873,"   "],[1,5876,"   "],[-1,5975,"   "],[1,5978,"   "],[-1,5985,"   "],[1,5988,"   "],[-1,6045,"       "],[1,6052,"       "],[-1,6108,"   "],[1,6111,"   "],[-1,6115,"   "],[1,6118,"   "],[-1,6189," "],[1,6190," "],[-1,6278,"   "],[1,6281,"   "],[-1,6295,"   "],[1,6298,"   "],[-1,6324," \n   "],[1,6329," \n   "],[-1,6372,"   "],[1,6375,"   "],[-1,6381,"   "],[1,6384,"   "],[-1,6748," "],[1,6749," "],[-1,6819,"   "],[1,6822,"   "],[-1,6836,"   "],[1,6839,"   "],[-1,6878,"   "],[1,6881,"   "],[-1,6917,"   "],[1,6920,"   "],[-1,6973,"   "],[1,6976,"   "],[-1,6999,"   "],[1,7002,"   "],[-1,7038,"       "],[1,7045,"       "],[-1,7068,"       "],[1,7075,"       "],[-1,7103,"   "],[1,7106,"   "],[-1,7132,"   "],[1,7135,"   "],[-1,7174,"       "],[1,7181,"       "],[-1,7223,"     "],[1,7228,"     "],[-1,7287,"   "],[1,7290,"   "],[-1,7415,"   "],[1,7418,"   "],[-1,7442,"   "],[1,7445,"   "],[-1,7479,"       "],[1,7486,"       "],[-1,7517,"   "],[1,7520,"   "],[-1,7587,"   "],[1,7590,"   "],[-1,7714,"    "],[1,7718,"    "],[-1,7785,"   \n\n   "],[1,7793,"   \n\n   "],[-1,7910,"   "],[1,7913,"   "]],[50,50],[51,51]]],[1566107149304,["GJX@GJXAIOU",[[1,51," "]],[51,51],[52,52]]],[1566107152476,["GJX@GJXAIOU",[[1,133,"- "]],[133,133],[135,135]]],[1566107154979,["GJX@GJXAIOU",[[-1,80,"\n"]],[80,80],[79,79]]],[1566107158066,["GJX@GJXAIOU",[[-1,179,"\n"]],[179,179],[178,178]]],[1566107188866,["GJX@GJXAIOU",[[-1,296," "]],[297,297],[296,296]]],[1566107190179,["GJX@GJXAIOU",[[-1,292,"\n"]],[292,292],[291,291]]],[1566107207425,["GJX@GJXAIOU",[[1,134,"**"],[1,177,"**"]],[134,177],[134,181]]],[1566107214968,["GJX@GJXAIOU",[[1,224,"，"]],[224,224],[225,225]]],[1566107217332,["GJX@GJXAIOU",[[1,227,"是"]],[227,227],[228,228]]],[1566107217366,["GJX@GJXAIOU",[[1,227," "]],[228,228],[229,229]]],[1566107220343,["GJX@GJXAIOU",[[1,236,"，"]],[236,236],[237,237]]],[1566107237463,["GJX@GJXAIOU",[[1,259,"，int "]],[259,259],[263,263]]],[1566107239486,["GJX@GJXAIOU",[[1,263,"性"]],[263,263],[264,264]]],[1566107239520,["GJX@GJXAIOU",[[1,263," "]],[264,264],[265,265]]],[1566107239994,["GJX@GJXAIOU",[[-1,264,"性"]],[265,265],[264,264]]],[1566107240208,["GJX@GJXAIOU",[[1,264,"2"]],[264,264],[265,265]]],[1566107240979,["GJX@GJXAIOU",[[-1,264,"2"]],[265,265],[264,264]]],[1566107245101,["GJX@GJXAIOU",[[1,264,"型赋值非"]],[264,264],[268,268]]],[1566107246163,["GJX@GJXAIOU",[[-1,267,"非"]],[268,268],[267,267]]],[1566107251380,["GJX@GJXAIOU",[[1,267,"给short"]],[267,267],[273,273]]],[1566107251413,["GJX@GJXAIOU",[[1,268," "]],[273,273],[274,274]]],[1566107252391,["GJX@GJXAIOU",[[1,274,"型"]],[274,274],[275,275]]],[1566107252426,["GJX@GJXAIOU",[[1,274," "]],[275,275],[276,276]]],[1566107256109,["GJX@GJXAIOU",[[-1,283,"\n"]],[284,284],[283,283]]],[1566107260783,["GJX@GJXAIOU",[[1,283,"    "]],[283,283],[287,287]]],[1566107264546,["GJX@GJXAIOU",[[1,287,"**"],[1,319,"**"]],[287,319],[287,323]]],[1566107283410,["GJX@GJXAIOU",[[-1,411,"    "]],[411,415],[411,411]]],[1566107283786,["GJX@GJXAIOU",[[-1,410,"\n"]],[411,411],[410,410]]],[1566107284534,["GJX@GJXAIOU",[[1,410," "]],[410,410],[411,411]]],[1566108026100,["GJX@GJXAIOU",[[-1,381," "],[1,382,"- "]],[381,381],[383,383]]],[1566108035307,["GJX@GJXAIOU",[[-1,472," "]],[473,473],[472,472]]],[1566108038110,["GJX@GJXAIOU",[[1,437,"-"]],[437,437],[438,438]]],[1566108038276,["GJX@GJXAIOU",[[1,439," "]],[438,438],[439,439]]],[1566108040914,["GJX@GJXAIOU",[[-1,436," "]],[437,437],[436,436]]],[1566108043786,["GJX@GJXAIOU",[[-1,469,"\n"]],[469,469],[468,468]]],[1566108049334,["GJX@GJXAIOU",[[-1,564,"  "],[1,566,"-"]],[564,564],[565,565]]],[1566108049492,["GJX@GJXAIOU",[[1,565," "]],[565,565],[566,566]]],[1566108055942,["GJX@GJXAIOU",[[-1,590,"\n   "]],[590,594],[590,590]]],[1566108056268,["GJX@GJXAIOU",[[-1,589,"\n"]],[590,590],[589,589]]],[1566108057453,["GJX@GJXAIOU",[[1,589,"\n"]],[589,589],[590,590]]],[1566108062109,["GJX@GJXAIOU",[[-1,698,"\n"]],[698,698],[697,697]]],[1566108064981,["GJX@GJXAIOU",[[-1,643,"  "],[1,645,"-"]],[643,643],[644,644]]],[1566108065191,["GJX@GJXAIOU",[[1,644," "]],[644,644],[645,645]]],[1566108597258,["GJX@GJXAIOU",[[1,702,"**"],[1,719,"**"]],[702,719],[702,723]]],[1566108608282,["GJX@GJXAIOU",[[-1,773,"\n"]],[773,773],[772,772]]],[1566108612369,["GJX@GJXAIOU",[[-1,870,"](https://www.cnblogs.com/JavaArchitect/p/8495809.html)"]],[870,925],[870,870]]],[1566108617905,["GJX@GJXAIOU",[[-1,12,"Java核心技术及面试指南面试题，"]],[12,29],[12,12]]],[1566108621657,["GJX@GJXAIOU",[[-1,826,"[Java核心技术及面试指南 "]],[826,841],[826,826]]],[1566108624719,["GJX@GJXAIOU",[[-1,832,"的面试题答案"]],[832,838],[832,832]]],[1566108627776,["GJX@GJXAIOU",[[-1,27,"的面试题"]],[27,31],[27,27]]],[1566108631956,["GJX@GJXAIOU",[[1,720,"- "]],[720,720],[722,722]]],[1566108637736,["GJX@GJXAIOU",[[-1,884,"\n"]],[884,884],[883,883]]],[1566108650048,["GJX@GJXAIOU",[[1,889,"**"],[1,934,"**"]],[889,934],[889,938]]],[1566108654962,["GJX@GJXAIOU",[[1,999,"**"],[1,1022,"**"]],[999,1022],[999,1026]]],[1566108658193,["GJX@GJXAIOU",[[-1,1034,"switch中可以用枚举类型"],[1,1048,"/**\n * 十进制：10 二进制：1010\n * 十进制：20 二进制：10100\n * 十进制：10 二进制：1010\n */"]],[1034,1048],[1099,1099]]],[1566108660511,["GJX@GJXAIOU",[[1,1034,"switch中可以用枚举类型"],[-1,1034,"/**\n * 十进制：10 二进制：1010\n * 十进制：20 二进制：10100\n * 十进制：10 二进制：1010\n */"]],[1099,1099],[1034,1048]]],[1566108661160,["GJX@GJXAIOU",[[1,1034,"**"],[1,1048,"**"]],[1034,1048],[1034,1052]]],[1566108665410,["GJX@GJXAIOU",[[1,832,"- "]],[832,832],[834,834]]],[1566108671353,["GJX@GJXAIOU",[[-1,893," "]],[894,894],[893,893]]],[1566108675191,["GJX@GJXAIOU",[[-1,886,"    1"]],[886,891],[886,886]]],[1566108676483,["GJX@GJXAIOU",[[-1,937,"   2 "]],[936,941],[936,936]]],[1566108677672,["GJX@GJXAIOU",[[-1,984,"    3 "]],[984,990],[984,984]]],[1566108678938,["GJX@GJXAIOU",[[-1,1014,"   4 "]],[1013,1018],[1013,1013]]],[1566108681858,["GJX@GJXAIOU",[[-1,1013," "]],[1014,1014],[1013,1013]]],[1566108684484,["GJX@GJXAIOU",[[1,1034,"- "]],[1034,1034],[1036,1036]]],[1566108689466,["GJX@GJXAIOU",[[-1,1066,"\n"]],[1066,1066],[1065,1065]]],[1566108692867,["GJX@GJXAIOU",[[1,1119,"- "]],[1119,1119],[1121,1121]]],[1566108695530,["GJX@GJXAIOU",[[-1,1149,"\n    "]],[1149,1154],[1149,1149]]],[1566108700328,["GJX@GJXAIOU",[[-1,1247,"    "]],[1247,1251],[1247,1247]]],[1566108700977,["GJX@GJXAIOU",[[-1,1246,"\n"]],[1247,1247],[1246,1246]]],[1566108703914,["GJX@GJXAIOU",[[1,1212,"- "]],[1212,1212],[1214,1214]]],[1566108711175,["GJX@GJXAIOU",[[-1,1293,"[Java核心技术及面试指南 2.3.6 "]],[1293,1314],[1293,1293]]],[1566108716081,["GJX@GJXAIOU",[[-1,1301,"的面试题答案](https://www.cnblogs.com/JavaArchitect/p/8495816.html)"]],[1301,1362],[1301,1301]]],[1566108721924,["GJX@GJXAIOU",[[-1,1336,"\n    "]],[1336,1341],[1336,1336]]],[1566108724124,["GJX@GJXAIOU",[[1,1303,"- "]],[1303,1303],[1305,1305]]],[1566108728587,["GJX@GJXAIOU",[[1,1358,"- "]],[1358,1358],[1360,1360]]],[1566108739665,["GJX@GJXAIOU",[[-1,1425,"    "]],[1429,1429],[1425,1425]]],[1566108740176,["GJX@GJXAIOU",[[-1,1424,"\n"]],[1425,1425],[1424,1424]]],[1566108746700,["GJX@GJXAIOU",[[1,1457,"- "]],[1457,1457],[1459,1459]]],[1566108748548,["GJX@GJXAIOU",[[-1,1492,"\n"]],[1492,1492],[1491,1491]]],[1566108752517,["GJX@GJXAIOU",[[1,1557,"- "]],[1557,1557],[1559,1559]]],[1566108755112,["GJX@GJXAIOU",[[-1,1599,"\n"]],[1599,1599],[1598,1598]]],[1566108770160,["GJX@GJXAIOU",[[-1,1710,"\n"]],[1710,1710],[1709,1709]]],[1566108772684,["GJX@GJXAIOU",[[1,1669,"- "]],[1669,1669],[1671,1671]]],[1566108873434,["GJX@GJXAIOU",[[1,1727,"- "]],[1727,1727],[1729,1729]]],[1566108886584,["GJX@GJXAIOU",[[-1,1786,"\n"]],[1786,1786],[1785,1785]]],[1566108889442,["GJX@GJXAIOU",[[1,1809,"- "]],[1809,1809],[1811,1811]]],[1566108896186,["GJX@GJXAIOU",[[-1,1877,"\n"]],[1877,1877],[1876,1876]]],[1566108902186,["GJX@GJXAIOU",[[-1,1922,"[Java核心技术及面试指南 "]],[1923,1923],[1922,1922]]],[1566108904441,["GJX@GJXAIOU",[[-1,1928,"的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495825.html)"]],[1928,1993],[1928,1928]]],[1566108911282,["GJX@GJXAIOU",[[1,1930,"- "]],[1930,1930],[1932,1932]]],[1566108912912,["GJX@GJXAIOU",[[-1,1962,"\n"]],[1962,1962],[1961,1961]]],[1566108916451,["GJX@GJXAIOU",[[-1,2034,"\n"]],[2034,2034],[2033,2033]]],[1566108937178,["GJX@GJXAIOU",[[1,2175,"- "]],[2175,2175],[2177,2177]]],[1566108942761,["GJX@GJXAIOU",[[-1,2198,"\n"]],[2198,2198],[2197,2197]]],[1566108957503,["GJX@GJXAIOU",[[-1,2284,"\n"]],[2284,2284],[2283,2283]]],[1566108960715,["GJX@GJXAIOU",[[1,2398,"- "]],[2398,2398],[2400,2400]]],[1566108962610,["GJX@GJXAIOU",[[-1,2440,"\n"]],[2440,2440],[2439,2439]]],[1566108963999,["GJX@GJXAIOU",[[-1,2491,"\n"]],[2491,2491],[2490,2490]]],[1566108967178,["GJX@GJXAIOU",[[1,2566,"- "]],[2566,2566],[2568,2568]]],[1566108970692,["GJX@GJXAIOU",[[1,2606,"- "]],[2606,2606],[2608,2608]]],[1566108972111,["GJX@GJXAIOU",[[-1,2633,"\n"]],[2633,2633],[2632,2632]]],[1566108975113,["GJX@GJXAIOU",[[1,2750,"- "]],[2750,2750],[2752,2752]]],[1566108977568,["GJX@GJXAIOU",[[-1,2772,"\n"]],[2772,2772],[2771,2771]]],[1566108980898,["GJX@GJXAIOU",[[1,2848,"- "]],[2848,2848],[2850,2850]]],[1566108982282,["GJX@GJXAIOU",[[-1,2875,"\n"]],[2875,2875],[2874,2874]]],[1566108988643,["GJX@GJXAIOU",[[-1,2897,"\n"]],[2898,2898],[2897,2897]]],[1566108991306,["GJX@GJXAIOU",[[1,2922,"- "]],[2922,2922],[2924,2924]]],[1566108993363,["GJX@GJXAIOU",[[1,2946,"- "]],[2946,2946],[2948,2948]]],[1566108994914,["GJX@GJXAIOU",[[1,2990,"- "]],[2990,2990],[2992,2992]]],[1566108996744,["GJX@GJXAIOU",[[-1,3043,"\n"]],[3042,3042],[3041,3041]]],[1566109001832,["GJX@GJXAIOU",[[-1,3045,"[Java核心技术及面试指南 "]],[3046,3046],[3045,3045]]],[1566109004968,["GJX@GJXAIOU",[[-1,3050,"的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495834.html)"]],[3050,3115],[3050,3050]]],[1566109008779,["GJX@GJXAIOU",[[1,3052,"- "]],[3052,3052],[3054,3054]]],[1566109012186,["GJX@GJXAIOU",[[-1,3346,"\n"]],[3346,3346],[3345,3345]]],[1566109013297,["GJX@GJXAIOU",[[-1,3369,"\n"]],[3369,3369],[3368,3368]]],[1566109014578,["GJX@GJXAIOU",[[-1,3403,"\n"]],[3403,3403],[3402,3402]]],[1566109018236,["GJX@GJXAIOU",[[1,3092,"```"]],[3092,3092],[3095,3095]]],[1566109018272,["GJX@GJXAIOU",[[1,3095,"language\n```\n"]],[3095,3095],[3095,3103]]],[1566109019468,["GJX@GJXAIOU",[[-1,3095,"language"],[1,3103,"j"]],[3095,3103],[3096,3096]]],[1566109019907,["GJX@GJXAIOU",[[1,3096,"ava"]],[3096,3096],[3099,3099]]],[1566109022618,["GJX@GJXAIOU",[[-1,3100,"```"]],[3100,3103],[3100,3100]]],[1566109024384,["GJX@GJXAIOU",[[1,3420,"```"]],[3420,3420],[3423,3423]]],[1566109025892,["GJX@GJXAIOU",[[-1,3101,"\n"]],[3101,3101],[3100,3100]]],[1566109026280,["GJX@GJXAIOU",[[-1,3100,"\n"]],[3100,3100],[3099,3099]]],[1566109029648,["GJX@GJXAIOU",[[-1,3462,"\n    "]],[3462,3467],[3462,3462]]],[1566109034545,["GJX@GJXAIOU",[[-1,3521,"\n"]],[3521,3521],[3520,3520]]],[1566109036600,["GJX@GJXAIOU",[[-1,3637,"\n"]],[3637,3637],[3636,3636]]],[1566109039063,["GJX@GJXAIOU",[[-1,3916,"\n"]],[3916,3916],[3915,3915]]],[1566109040176,["GJX@GJXAIOU",[[-1,4036,"\n"]],[4036,4036],[4035,4035]]],[1566109041530,["GJX@GJXAIOU",[[-1,4202,"\n"]],[4202,4202],[4201,4201]]],[1566109042992,["GJX@GJXAIOU",[[-1,4382,"\n"]],[4382,4382],[4381,4381]]],[1566109044696,["GJX@GJXAIOU",[[-1,4578,"\n"]],[4578,4578],[4577,4577]]],[1566109051484,["GJX@GJXAIOU",[[1,4687,"- "]],[4687,4687],[4689,4689]]],[1566109055978,["GJX@GJXAIOU",[[1,4739,"```"]],[4739,4739],[4742,4742]]],[1566109056013,["GJX@GJXAIOU",[[1,4742,"language\n```\n"]],[4742,4742],[4742,4750]]],[1566109057410,["GJX@GJXAIOU",[[-1,4742,"language"],[1,4750,"j"]],[4742,4750],[4743,4743]]],[1566109057899,["GJX@GJXAIOU",[[1,4743,"ava"]],[4743,4743],[4746,4746]]],[1566109058298,["GJX@GJXAIOU",[[1,4747,"\n"]],[4746,4746],[4747,4747]]],[1566109066487,["GJX@GJXAIOU",[[-1,4753,"  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n"]],[4752,4924],[4752,4752]]],[1566109068859,["GJX@GJXAIOU",[[1,4748,"  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n"]],[4747,4747],[4919,4919]]],[1566109071031,["GJX@GJXAIOU",[[-1,4747,"\n"]],[4747,4747],[4746,4746]]],[1566109072455,["GJX@GJXAIOU",[[-1,4924,"\n"]],[4924,4924],[4923,4923]]],[1566109072906,["GJX@GJXAIOU",[[-1,4923,"\n"]],[4923,4923],[4922,4922]]],[1566109078817,["GJX@GJXAIOU",[[1,4958,"- "]],[4958,4958],[4960,4960]]],[1566109096659,["GJX@GJXAIOU",[[1,5043,"```"]],[5043,5043],[5046,5046]]],[1566109096697,["GJX@GJXAIOU",[[1,5046,"language\n```\n"]],[5046,5046],[5046,5054]]],[1566109097721,["GJX@GJXAIOU",[[-1,5046,"language"],[1,5054,"j"]],[5046,5054],[5047,5047]]],[1566109098080,["GJX@GJXAIOU",[[1,5047,"ava"]],[5047,5047],[5050,5050]]],[1566109098330,["GJX@GJXAIOU",[[1,5051,"\n"]],[5050,5050],[5051,5051]]],[1566109101032,["GJX@GJXAIOU",[[-1,5052,"```\n"]],[5051,5055],[5051,5051]]],[1566109102735,["GJX@GJXAIOU",[[-1,5052,"\n"]],[5052,5052],[5051,5051]]],[1566109103384,["GJX@GJXAIOU",[[-1,5051,"\n"]],[5051,5051],[5050,5050]]],[1566109109767,["GJX@GJXAIOU",[[1,7369,"```\n"]],[7368,7368],[7372,7372]]],[1566109114176,["GJX@GJXAIOU",[[-1,7418,"\n"]],[7418,7418],[7417,7417]]],[1566109116387,["GJX@GJXAIOU",[[1,7373,"- "]],[7373,7373],[7375,7375]]],[1566109128032,["GJX@GJXAIOU",[[-1,7471,"e"]],[7472,7472],[7471,7471]]],[1566109128324,["GJX@GJXAIOU",[[1,7471,"a "]],[7471,7471],[7472,7472]]],[1566109131913,["GJX@GJXAIOU",[[-1,7496,"\n"]],[7496,7496],[7495,7495]]],[1566109145571,["GJX@GJXAIOU",[[1,7557,"- "]],[7557,7557],[7559,7559]]],[1566109147850,["GJX@GJXAIOU",[[-1,7617,"\n"]],[7617,7617],[7616,7616]]],[1566110344455,["GJX@GJXAIOU",[[1,7655,"# [Java核心技术及面试指南 键值对方面的面试题总结以及答案](https://www.cnblogs.com/JavaArchitect/p/8495842.html)\n\n3.3.5.1如何遍历HashMap对象？尤其请说明通过Iterator遍历HashMap对象的方法。\n\n    建议用这种方式：\n\n    Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }\n\n3.3.5.2HashMap是线程安全的还是线程不安全的？HashTable呢？\n\n    HashMap是线程不安全的，HashTable是线程安全的。\n\n3.3.5.3 ConcurrentHashMap是线程安全的还是不安全的？请说下该对象底层实现get和put方法的流程。\n\n    ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。\n\n    整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个 segment。\n\n    简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。    \n\n     get 过程中是没有加锁的，那自然我们就需要去考虑并发问题。\n\n     put 操作的线程安全性。添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。"]],[7655,7655],[8635,8635]]],[1566110348167,["GJX@GJXAIOU",[[-1,7687,"](https://www.cnblogs.com/JavaArchitect/p/8495842.html)"]],[7687,7742],[7687,7687]]],[1566110352270,["GJX@GJXAIOU",[[-1,7657,"[Java核心技术及面试指南 "]],[7657,7672],[7657,7657]]],[1566110355086,["GJX@GJXAIOU",[[-1,7662,"的面试题总结以及答案"]],[7662,7672],[7662,7662]]],[1566110358892,["GJX@GJXAIOU",[[-1,7717,"   "],[1,7720,"   "],[-1,7730,"\n   "],[1,7734,"·\n   "],[-1,7786,"   "],[1,7789,"   "],[-1,7832,"     "],[1,7837,"     "],[-1,7855,"     "],[1,7860,"     "],[-1,7880,"   "],[1,7883,"   "],[-1,7929,"   "],[1,7932,"   "],[-1,8029,"   "],[1,8032,"   "],[-1,8091,"   "],[1,8094,"   "],[-1,8205,"   "],[1,8208,"   "],[-1,8345,"    \n\n     "],[1,8356,"    \n\n     "],[-1,8388,"     "],[1,8393,"     "]],[7730,7730],[7731,7731]]],[1566110359520,["GJX@GJXAIOU",[[1,7731,"··"]],[7731,7731],[7733,7733]]],[1566110361374,["GJX@GJXAIOU",[[-1,7730,"···"]],[7733,7733],[7730,7730]]],[1566110362432,["GJX@GJXAIOU",[[1,7730,"```"]],[7730,7730],[7733,7733]]],[1566110362466,["GJX@GJXAIOU",[[1,7733,"language\n```\n"]],[7733,7733],[7733,7741]]],[1566110363433,["GJX@GJXAIOU",[[-1,7733,"language"],[1,7741,"j"]],[7733,7741],[7734,7734]]],[1566110363810,["GJX@GJXAIOU",[[1,7734,"ava"]],[7734,7734],[7737,7737]]],[1566110364135,["GJX@GJXAIOU",[[1,7738,"\n"]],[7737,7737],[7738,7738]]],[1566110371712,["GJX@GJXAIOU",[[1,7738," Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }"]],[7738,7738],[7889,7889]]],[1566110375695,["GJX@GJXAIOU",[[-1,7894,"\n"]],[7894,7894],[7893,7893]]],[1566110381926,["GJX@GJXAIOU",[[-1,7896,"  Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }"]],[7897,8048],[7896,7896]]],[1566110383446,["GJX@GJXAIOU",[[-1,7897,"\n"]],[7897,7897],[7896,7896]]],[1566110386360,["GJX@GJXAIOU",[[-1,7717,"    "]],[7717,7721],[7717,7717]]],[1566110388302,["GJX@GJXAIOU",[[-1,7716,"\n"]],[7716,7716],[7715,7715]]],[1566110390465,["GJX@GJXAIOU",[[1,7664,"-"],[-1,7733," "],[1,7734," "],[-1,7785,"   "],[1,7788,"   "],[-1,7831,"     "],[1,7836,"     "],[-1,7854,"     "],[1,7859,"     "],[-1,7879,"   "],[1,7882,"   "]],[7664,7664],[7665,7665]]],[1566110390912,["GJX@GJXAIOU",[[1,7665," "]],[7665,7665],[7666,7666]]],[1566110396062,["GJX@GJXAIOU",[[-1,7935,"\n"]],[7935,7935],[7934,7934]]],[1566110397769,["GJX@GJXAIOU",[[1,7894,"- "]],[7894,7894],[7896,7896]]],[1566110399563,["GJX@GJXAIOU",[[1,7974,"- "]],[7974,7974],[7976,7976]]],[1566110402430,["GJX@GJXAIOU",[[-1,8038,"\n"]],[8038,8038],[8037,8037]]],[1566110404446,["GJX@GJXAIOU",[[-1,8099,"\n"]],[8099,8099],[8098,8098]]],[1566110406046,["GJX@GJXAIOU",[[-1,8212,"\n"]],[8212,8212],[8211,8211]]],[1566110407085,["GJX@GJXAIOU",[[-1,8357,"\n"]],[8357,8357],[8356,8356]]],[1566110407909,["GJX@GJXAIOU",[[-1,8393,"\n"]],[8393,8393],[8392,8392]]]],null,"GJX@GJXAIOU"],["2e60e1b0-728c-49c3-b470-ba83ade6e9b6",1566129443708,"# 课后习题\n\n\n## 基本数据类型、封装类和运算操作\n\n- 2.1.5.1说说&和&&的区别，以及|与||的区别。\n&和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n- **2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果**？\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 ，s1 是 short型， 通过 + 运算后s1 自动转为int 型 ，int 型赋值给 short 型 所以报错。\n    **运行short s1 = 1; s1 += 1;又会出现什么结果**？\n   这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n-  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n 用移位运算符：int i = 2 << 3;\n\n-  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n   ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n- 2.1.5.5 Integer与int的区别。\n Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n- 2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n    **将括号内的数+0.5之后，向下取值**，所以前者是13，后者是-13。\n\n- 2.1.5.7 float 型float f=3.6是否正确?\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f\n\n\n\n# 流程控制方面\n\n- 2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n**switch里可以用char，byte，short，int这些基本类型，以及它们的封装类**。\n 在switch里不能用long，double，float，boolean，包括他们的封装类。\n**jdk1.7和以上的版本里，可以是用字符串类型**。\n**switch中可以用枚举类型**。\n\n- 2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n- 2.2.5.3while和do while有什么差别？\nwhile是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n- 2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。\n\n\n\n# String相关\n\n- 2.3.6.1 String是最基本的数据类型吗?能不能被继承？\nString不能被继承，它是一个对象\n\n- 2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n- 2.3.6.3 String 和StringBuffer的区别？\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n- 2.3.6.4 StringBuffer和StringBuilder 的区别。\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n- 2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n    参见本书的对应章节\n\n- 2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n   a还是12345，参见本书的对应章节\n\n- 2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。\n\n\n# 面向对象部分\n\n- 问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n- 问题2.7.2，接口和抽象类有什么差别？\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n- 问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n- 问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n- 问题2.7.5，finalize方法有什么作用？\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n- 问题2.7.6，final关键的含义。\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n- 问题2.7.7，构造函数能否被覆盖，能否被重载？\n构造函数能重载，但不能覆盖，原因已经讲过。\n接下来的问题只给出的题目，答案请到附录里去找。\n\n- 问题2.7.8静态变量和实例变量的区别？\n\n- 问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n- 问题2.7.10请说出作用域public，private，protected，以及不写时的区别。\n\n\n# 线性表方面\n\n- 3.2.7.1 请用ArrayList实现Stack以及Queue的功能。\n```java\npublic class ArrayListStack extends ArrayList implements Stack {\n    ArrayList arrayList =new ArrayList<>() ;\n    public void push(T obj) {\n       arrayList.add(obj);\n    }\n    public T pop() {\n        return arrayList.remove(arrayList.size()-1);\n    }\n    public int size(){\n        return arrayList.size(); \n    }\n}\n```\n3.2.7.2 如果让你实现Java的ArrayList，你需要考虑哪些要素？\nArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。 \n    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。\n   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 \n   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。\n     ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。\n    ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。\n    每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。\n    数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。 \n    Fail-Fast机制： \nArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。\n\n- 3.2.7.3 请通过Iterator对象访问LinkedList对象，并说明这种访问方式的好处。\n```java\n  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n```\n  好处是，能用统一的方式来访问集合对象，这也是迭代器模式的好处。\n\n- 3.2.7.4 你有没有读过ArrayList部分的底层实现源代码？如果有，请说明下其中的add方法是如何实现的？尤其请考虑动态扩展的情况。\n\n如下是扩容的底层方法\n```java\n/**\n* 增加ArrayList容量。\n* \n* @param minCapacity 想要的最小容量\n*/\npublic void ensureCapacity(int minCapacity) {\n    // 如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，最小扩容量为DEFAULT_CAPACITY，否则为0\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)? 0: DEFAULT_CAPACITY;\n    //如果想要的最小容量大于最小扩容量，则使用想要的最小容量。\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureCapacityInternal(int minCapacity) {\n    // 若elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，则取minCapacity为DEFAULT_CAPACITY和参数minCapacity    之间的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 确保指定的最小容量 > 数组缓冲区当前的长度 \n    if (minCapacity - elementData.length > 0)\n    //扩容\n    grow(minCapacity);\n}\n\n/**\n* 分派给arrays的最大容量\n* 为什么要减去8呢？\n* 因为某些VM会在数组中保留一些头字，尝试分配这个最大存储容量，可能会导致array容量大于VM的limit，最终导致OutOfMemoryError。\n*/\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n* 扩容，保证ArrayList至少能存储minCapacity个元素\n* 第一次扩容，逻辑为newCapacity = oldCapacity + (oldCapacity >> 1);即在原有的容量基础上增加一半。第一次扩容后，如果容量还是小于minCapacity，就将容量扩充为minCapacity。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void grow(int minCapacity) {\n    // 获取当前数组的容量\n    int oldCapacity = elementData.length;\n    // 扩容。新的容量=当前容量+当前容量/2.即将当前容量增加一半。\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //如果扩容后的容量还是小于想要的最小容量\n    if (newCapacity - minCapacity < 0)\n        //将扩容后的容量再次扩容为想要的最小容量\n        newCapacity = minCapacity;\n    //如果扩容后的容量大于临界值，则进行大容量分配\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n     // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData,newCapacity);\n}\n/**\n* 进行大容量分配\n*/\nprivate static int hugeCapacity(int minCapacity) {\n    //如果minCapacity<0，抛出异常\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    //如果想要的容量大于MAX_ARRAY_SIZE，则分配Integer.MAX_VALUE，否则分配MAX_ARRAY_SIZE\n    return (minCapacity > MAX_ARRAY_SIZE) ?Integer.MAX_VALUE :MAX_ARRAY_SIZE;\n}\n\n```\n- 3.2.7.5 请说下Collection和Collections的差别以及各自的用途。\n    Collections 是一个集合的一个类，其中包含有一些和集合操作相关的静态多态方法。Java 集合里则有另外一个和它非常相似的接口    \n    Collection（不带s），它是线性表类集合的父接口，List和Set等接口都是通过实现这个接口来实现的。\n\n- 3.2.7.6 我们知道Set对象里不能有重复的元素，请说下是用什么方法来判断是否重复？是通过equals方法吗？\n    请参与本书3.2.3 Set集合是如何判断重复，里面有详细的描述\n\n# 键值对方面\n\n- 3.3.5.1如何遍历HashMap对象？尤其请说明通过Iterator遍历HashMap对象的方法。\n建议用这种方式：\n```java\n Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }\n```\n  \n- 3.3.5.2HashMap是线程安全的还是线程不安全的？HashTable呢？\n    HashMap是线程不安全的，HashTable是线程安全的。\n\n- 3.3.5.3 ConcurrentHashMap是线程安全的还是不安全的？请说下该对象底层实现get和put方法的流程。\n    ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。\n    整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个 segment。\n    简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。    \n     get 过程中是没有加锁的，那自然我们就需要去考虑并发问题。\n     put 操作的线程安全性。添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。\n\n\n",[[1566129385927,["GJX@GJXAIOU",[[1,8562,"# [Java核心技术及面试指南 异常部分的面试题归纳以及答案](https://www.cnblogs.com/JavaArchitect/p/8495854.html)\n\n4.2.4.1 throw和throws有什么差别？异常（Exception）和错误（Error）有什么差别？\n\n   throw语句表示抛出异常，由方法体内的语句处理。throws语句用在方法声明后面，表示如果抛出异常，由该方法的调用者来处理。\n   throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常。throw是具体向外抛异常的动作，所以它是抛出一个异常实例。\n\n4.2.4.2 final、finalize和finally这三个相似的关键字有什么差别？\n\n  final可以定义常量，如果作用在类上，这个类就不能被继承。\n\n  finalize方法里可以放回收对象时需要指定的动作，但一般不重写。\n\n  finally是try...catch...finally里的，不管是否发生异常，以及发生了何种异常，finally都会被执行。 \n\n4.2.4.3 如果我们采用try…catch…finally的形式来处理异常，如果在try部分有return语句，那么finally部分的代码会不会执行？\n\n    会执行，所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.4 运行期异常（RuntimeException）和其它异常（比如SQLException）有什么差别？你在平时开发中用过哪些运行期异常？\n\n     运行期异常可以不用try..catch包含起来，运行期异常一般有除零异常，空指针异常以及数组越界异常。\n\n4.2.4.5 你一般在finally从句里放哪些代码？\n\n    所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.6 如果父类的某个方法抛出了一个异常，那么子类在覆盖父类的这个方法时，有什么限制？为什么要规定这个限制？\n\n    请参与本书异常部分的描述。\n\n4.2.4.7 你有没有自己定义过异常对象？如何自定义异常对象？\n\n    自定义异常可以通过throw抛出。"]],[8562,8562],[9486,9486]]]],null,"GJX@GJXAIOU"],["9a0892cf-d264-4260-820a-49464a881082",1566634253568,"# 课后习题\n\n\n## 基本数据类型、封装类和运算操作\n\n- 2.1.5.1说说&和&&的区别，以及|与||的区别。\n&和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n- **2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果**？\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 ，s1 是 short型， 通过 + 运算后s1 自动转为int 型 ，int 型赋值给 short 型 所以报错。\n    **运行short s1 = 1; s1 += 1;又会出现什么结果**？\n   这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n-  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n 用移位运算符：int i = 2 << 3;\n\n-  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n   ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n- 2.1.5.5 Integer与int的区别。\n Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n- 2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n    **将括号内的数+0.5之后，向下取值**，所以前者是13，后者是-13。\n\n- 2.1.5.7 float 型float f=3.6是否正确?\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f\n\n\n\n# 流程控制方面\n\n- 2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n**switch里可以用char，byte，short，int这些基本类型，以及它们的封装类**。\n 在switch里不能用long，double，float，boolean，包括他们的封装类。\n**jdk1.7和以上的版本里，可以是用字符串类型**。\n**switch中可以用枚举类型**。\n\n- 2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n- 2.2.5.3while和do while有什么差别？\nwhile是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n- 2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。\n\n\n\n# String相关\n\n- 2.3.6.1 String是最基本的数据类型吗?能不能被继承？\nString不能被继承，它是一个对象\n\n- 2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n- 2.3.6.3 String 和StringBuffer的区别？\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n- 2.3.6.4 StringBuffer和StringBuilder 的区别。\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n- 2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n    参见本书的对应章节\n\n- 2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n   a还是12345，参见本书的对应章节\n\n- 2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。\n\n\n# 面向对象部分\n\n- 问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n- 问题2.7.2，接口和抽象类有什么差别？\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n- 问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n- 问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n- 问题2.7.5，finalize方法有什么作用？\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n- 问题2.7.6，final关键的含义。\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n- 问题2.7.7，构造函数能否被覆盖，能否被重载？\n构造函数能重载，但不能覆盖，原因已经讲过。\n接下来的问题只给出的题目，答案请到附录里去找。\n\n- 问题2.7.8静态变量和实例变量的区别？\n\n- 问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n- 问题2.7.10请说出作用域public，private，protected，以及不写时的区别。\n\n\n# 线性表方面\n\n- 3.2.7.1 请用ArrayList实现Stack以及Queue的功能。\n```java\npublic class ArrayListStack extends ArrayList implements Stack {\n    ArrayList arrayList =new ArrayList<>() ;\n    public void push(T obj) {\n       arrayList.add(obj);\n    }\n    public T pop() {\n        return arrayList.remove(arrayList.size()-1);\n    }\n    public int size(){\n        return arrayList.size(); \n    }\n}\n```\n3.2.7.2 如果让你实现Java的ArrayList，你需要考虑哪些要素？\nArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。 \n    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。\n   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 \n   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。\n     ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。\n    ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。\n    每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。\n    数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。 \n    Fail-Fast机制： \nArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。\n\n- 3.2.7.3 请通过Iterator对象访问LinkedList对象，并说明这种访问方式的好处。\n```java\n  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n```\n  好处是，能用统一的方式来访问集合对象，这也是迭代器模式的好处。\n\n- 3.2.7.4 你有没有读过ArrayList部分的底层实现源代码？如果有，请说明下其中的add方法是如何实现的？尤其请考虑动态扩展的情况。\n\n如下是扩容的底层方法\n```java\n/**\n* 增加ArrayList容量。\n* \n* @param minCapacity 想要的最小容量\n*/\npublic void ensureCapacity(int minCapacity) {\n    // 如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，最小扩容量为DEFAULT_CAPACITY，否则为0\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)? 0: DEFAULT_CAPACITY;\n    //如果想要的最小容量大于最小扩容量，则使用想要的最小容量。\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureCapacityInternal(int minCapacity) {\n    // 若elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，则取minCapacity为DEFAULT_CAPACITY和参数minCapacity    之间的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 确保指定的最小容量 > 数组缓冲区当前的长度 \n    if (minCapacity - elementData.length > 0)\n    //扩容\n    grow(minCapacity);\n}\n\n/**\n* 分派给arrays的最大容量\n* 为什么要减去8呢？\n* 因为某些VM会在数组中保留一些头字，尝试分配这个最大存储容量，可能会导致array容量大于VM的limit，最终导致OutOfMemoryError。\n*/\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n* 扩容，保证ArrayList至少能存储minCapacity个元素\n* 第一次扩容，逻辑为newCapacity = oldCapacity + (oldCapacity >> 1);即在原有的容量基础上增加一半。第一次扩容后，如果容量还是小于minCapacity，就将容量扩充为minCapacity。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void grow(int minCapacity) {\n    // 获取当前数组的容量\n    int oldCapacity = elementData.length;\n    // 扩容。新的容量=当前容量+当前容量/2.即将当前容量增加一半。\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //如果扩容后的容量还是小于想要的最小容量\n    if (newCapacity - minCapacity < 0)\n        //将扩容后的容量再次扩容为想要的最小容量\n        newCapacity = minCapacity;\n    //如果扩容后的容量大于临界值，则进行大容量分配\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n     // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData,newCapacity);\n}\n/**\n* 进行大容量分配\n*/\nprivate static int hugeCapacity(int minCapacity) {\n    //如果minCapacity<0，抛出异常\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    //如果想要的容量大于MAX_ARRAY_SIZE，则分配Integer.MAX_VALUE，否则分配MAX_ARRAY_SIZE\n    return (minCapacity > MAX_ARRAY_SIZE) ?Integer.MAX_VALUE :MAX_ARRAY_SIZE;\n}\n\n```\n- 3.2.7.5 请说下Collection和Collections的差别以及各自的用途。\n    Collections 是一个集合的一个类，其中包含有一些和集合操作相关的静态多态方法。Java 集合里则有另外一个和它非常相似的接口    \n    Collection（不带s），它是线性表类集合的父接口，List和Set等接口都是通过实现这个接口来实现的。\n\n- 3.2.7.6 我们知道Set对象里不能有重复的元素，请说下是用什么方法来判断是否重复？是通过equals方法吗？\n    请参与本书3.2.3 Set集合是如何判断重复，里面有详细的描述\n\n# 键值对方面\n\n- 3.3.5.1如何遍历HashMap对象？尤其请说明通过Iterator遍历HashMap对象的方法。\n建议用这种方式：\n```java\n Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }\n```\n  \n- 3.3.5.2HashMap是线程安全的还是线程不安全的？HashTable呢？\n    HashMap是线程不安全的，HashTable是线程安全的。\n\n- 3.3.5.3 ConcurrentHashMap是线程安全的还是不安全的？请说下该对象底层实现get和put方法的流程。\n    ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。\n    整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个 segment。\n    简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。    \n     get 过程中是没有加锁的，那自然我们就需要去考虑并发问题。\n     put 操作的线程安全性。添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。\n\n# [Java核心技术及面试指南 异常部分的面试题归纳以及答案](https://www.cnblogs.com/JavaArchitect/p/8495854.html)\n\n4.2.4.1 throw和throws有什么差别？异常（Exception）和错误（Error）有什么差别？\n\n   throw语句表示抛出异常，由方法体内的语句处理。throws语句用在方法声明后面，表示如果抛出异常，由该方法的调用者来处理。\n   throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常。throw是具体向外抛异常的动作，所以它是抛出一个异常实例。\n\n4.2.4.2 final、finalize和finally这三个相似的关键字有什么差别？\n\n  final可以定义常量，如果作用在类上，这个类就不能被继承。\n\n  finalize方法里可以放回收对象时需要指定的动作，但一般不重写。\n\n  finally是try...catch...finally里的，不管是否发生异常，以及发生了何种异常，finally都会被执行。 \n\n4.2.4.3 如果我们采用try…catch…finally的形式来处理异常，如果在try部分有return语句，那么finally部分的代码会不会执行？\n\n    会执行，所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.4 运行期异常（RuntimeException）和其它异常（比如SQLException）有什么差别？你在平时开发中用过哪些运行期异常？\n\n     运行期异常可以不用try..catch包含起来，运行期异常一般有除零异常，空指针异常以及数组越界异常。\n\n4.2.4.5 你一般在finally从句里放哪些代码？\n\n    所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.6 如果父类的某个方法抛出了一个异常，那么子类在覆盖父类的这个方法时，有什么限制？为什么要规定这个限制？\n\n    请参与本书异常部分的描述。\n\n4.2.4.7 你有没有自己定义过异常对象？如何自定义异常对象？\n\n    自定义异常可以通过throw抛出。\n",[[1566634201400,["GJX@GJXAIOU",[[1,9487,"    \n"]],[9486,9486],[9491,9491]]],[1566634201537,["GJX@GJXAIOU",[[-1,9487,"    "],[1,9491,"\n"]],[9491,9491],[9488,9488]]],[1566634201681,["GJX@GJXAIOU",[[1,9489,"\n"]],[9488,9488],[9489,9489]]],[1566634201816,["GJX@GJXAIOU",[[1,9490,"\n"]],[9489,9489],[9490,9490]]],[1566634202080,["GJX@GJXAIOU",[[1,9491,"\n"]],[9490,9490],[9491,9491]]],[1566634202384,["GJX@GJXAIOU",[[1,9492,"\n"]],[9491,9491],[9492,9492]]],[1566634245145,["GJX@GJXAIOU",[[1,9492,"# [Java核心技术及面试指南 数据库方面的面试题归纳以及总结](https://www.cnblogs.com/JavaArchitect/p/8495866.html)\n\n5.1.7.1 事务的四大特性是什么？\n\n    ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。\n\n    ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n    ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n    ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n5.1.7.2 共享锁和排斥锁的含义以及用途？\n\n    共享锁又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。\n\n    排他锁又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。排他锁很好理解，是自己独占资源。\n\n5.1.7.3 乐观锁和悲观锁的含义以及用途？\n\n    乐观锁总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。\n\n   悲观锁总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁。\n\n5.1.7.4 内连接、外连接、全连接和左连接的语法以及用途。\n\n    1、内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。   \n\n    2、外联接。外联接可以是左向外联接、右向外联接或完整外部联接。在 FROM子句中指定外联接时，可以由下列几组关键字中的一组指定：     \n\n    3左连接和左外连接\n\n    左向外联接的结果集包括  LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。       \n\n   FULL  JOIN 或 FULL OUTER JOIN,完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。   \n    4 交叉联接   交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。\n\n5.1.7.5 第一、第二和第三范式的含义以及反范式的含义。你在建表时，用到的是哪种范式？\n\n    “设计过表”标志着一个初级程序员开始成熟，这里我姑且不论数据表的业务逻辑，一般的公司是怎么“合理地设计数据表”？其实在设计一个商业项目的数据表时，离不开“业务需求”。\n\n    第一，如果在设计的时候，已经明确地知道这个系统的数据量不会太大，比如一个中学的图书管理系统，最多有10万条书本的数据，过去一个月里借阅记录不会超过1万条，也就是说表之间的关联代价不会太高，那么用“三范式”的原则是必须的。毕竟三范式能避免数据冗余带来的更新插入上“需要同时多表里相同字段”的麻烦。\n\n    第二，如果表的数据量很大，比如我刚才举的在线购物网站的例子，我们可能就需要冗余数据。在订单流水表里，同时放入用户邮件地址和商品名的字段。\n\n    在得到“免去连接操作”的好处同时，这样做也是有代价的，比如用户一旦更新了邮件地址，那么我们就需要同时在会员表和订单流水表里修改该字段，这就是冗余带来的后果。\n\n    除去一些技术点的描述，本篇更想告诉大家的是，你不仅需要掌握诸如“连接”和“范式”之类的技术，你更该从业务角度，从权衡各种“建表代价”，从而挑选一种最符合本项目的解决方案。\n\n    我在以往的面试官的经验里，有过两个案例，第一位他简历上项目很多，也具有1年相关经验，但他说建数据表要符合“三范式”，同时不清楚左连接，内连接等的具体做法，经过我细问，原来他在简历上的项目是自己在学习中搭建的，并非商业项目。\n\n    第二位，他虽然工作经验只有半年，但把“建表需要权衡数据冗余和连接代价”的意思描述了一下。这样至少在数据库层面，第二位的得分就要比第一位要高。\n\n5.1.7.6 什么是SQL注入？它有什么后果？一般怎么预防？\n\n    ![](https://images2018.cnblogs.com/blog/1226172/201808/1226172-20180812175942853-61705531.png)\n\n我们一般用如下的SQL来验证身份：\n\nSelect userName from users where username = ‘输入的用户名’ and pwd = ‘输入的密码’\n\n一般来说，如果用户名和密码不匹配，就无法通过验证，但有人可以在User Name里输入1，在User Passwor部分输入\n\n1’ and pwd = ‘1’ or ‘1’=’1\n\n那么整个SQL语句就会变成\n\nSelect userName from users where username = ‘1’ and pwd = ‘1’ or ‘1’=’1’\n\n这样就能绕过验证。\n\n而处理对象PreparedStatement能有效防止这个现象，因为一个?就是一个占位符，无法扩展。以此能防止SQL注入。"]],[9492,9492],[12095,12095]]]],null,"GJX@GJXAIOU"],["f0149629-496b-48d5-ae64-9ccefbc89357",1566870738360,"# 课后习题\n\n\n## 基本数据类型、封装类和运算操作\n\n- 2.1.5.1说说&和&&的区别，以及|与||的区别。\n&和|是位运算符，不怎么用，而&&和||是逻辑运算符，一般用在if,while,for等条件判断里。\n\n- **2.1.5.2 运行short s1 = 1; s1 = s1 + 1;会出现什么结果**？\n    short s1 = 1; s1 = s1 + 1;中，1 是int 型 ，s1 是 short型， 通过 + 运算后s1 自动转为int 型 ，int 型赋值给 short 型 所以报错。\n    **运行short s1 = 1; s1 += 1;又会出现什么结果**？\n   这个是正确的，会返回2，但在实际项目中，+1是针对int类型的操作，如果可以，把short改成int。\n\n-  2.1.5.3用最有效率的方法算出2乘以8等于多少?\n 用移位运算符：int i = 2 << 3;\n\n-  2.1.5.4 \"==\"和equals方法究竟有什么区别？\n   ==是比较地址，而在Object里的equals方法，也是判断地址是否一样，但在子类里，我们一般会重写equals方法，比如在String类里，equals方法则是判断值是否一致。\n\n- 2.1.5.5 Integer与int的区别。\n Integer是封装类，其中包含了int基本数据类型和针对int的一些操作。而int是基本数据类型。\n\n- 2.1.5.6 Math.round(12.5)等于多少? Math.round(-13.5)等于多少?\n    **将括号内的数+0.5之后，向下取值**，所以前者是13，后者是-13。\n\n- 2.1.5.7 float 型float f=3.6是否正确?\n    不正确。 精度不准确,应该用强制类型转换，如下所示：float f=(float)3.6 或float f = 3.6f\n\n\n\n# 流程控制方面\n\n- 2.2.5.1 switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n**switch里可以用char，byte，short，int这些基本类型，以及它们的封装类**。\n 在switch里不能用long，double，float，boolean，包括他们的封装类。\n**jdk1.7和以上的版本里，可以是用字符串类型**。\n**switch中可以用枚举类型**。\n\n- 2.2.5.2在JAVA 中，如何跳出当前的多重嵌套循环？\n   用break或continue，其中，break是跳出整个循环，continue是跳出当次循环。\n\n- 2.2.5.3while和do while有什么差别？\nwhile是先判断条件再执行，do...while是先执行后判断条件，所以在同等条件下，do...while会多执行一次。\n\n- 2.2.5.4你有没有用过goto关键字？说下对这个关键字的看法。\n不建议使用goto关键字，因为它会破坏程序的结构，尤其会让代码一团糟，不能读。\n\n\n\n# String相关\n\n- 2.3.6.1 String是最基本的数据类型吗?能不能被继承？\nString不能被继承，它是一个对象\n\n- 2.3.6.2 String s = new String(\"xyz\");创建了几个String 对象? 二者之间有什么区别？\n创建了2个对象，一个是内存中的xyz，另一个是s，它指向xyz\n\n- 2.3.6.3 String 和StringBuffer的区别？\n  String是不可变类，如果遇到频繁操作String的场景，建议使用 StringBuffer或StringBuilder\n\n- 2.3.6.4 StringBuffer和StringBuilder 的区别。\n    StringBuffer是线程安全的,StringBuilder是线程不安全的，单线程情况下，建议使用StringBuilder\n\n- 2.3.6.5 String类是不可变类，以String为例说下什么是不可变类？\n    参见本书的对应章节\n\n- 2.3.6.6 String a = “12345”; a.substring(0,2);，此时的a的值是什么？\n   a还是12345，参见本书的对应章节\n\n- 2.3.6.7 String a = “1”;String b = “1”,那么a==b的值是true还是false，请说明理由。\n    是true，因为a是常量，具体内容请参见本书关于String描述的章节。\n\n\n# 面向对象部分\n\n- 问题2.7.1，开放性问题，说一下你对面向对象思想的了解。\n要点1，先说基础概念，比如面向对象思想包括封装、继承、多态，然后说些语法，比如可以通过extends继承类、通过implement来实现接口。\n要点2，得结合具体的实际，说一下在你做过的项目里，面向对象思想带来的具体好处，比如结合一个具体的例子（比如电信系统），说一下把方法都定义到父类里，然后通过继承子类来扩展，从而能改善代码结构，通过多态来减少代码修改后的维护量。这个切记别只说理论，说的时候一定得举些你项目里的例子。\n\n- 问题2.7.2，接口和抽象类有什么差别？\n这个基本都会问到，首先从语法角度分析，这时可以解释一下为什么接口和抽象方法Java编译器不让定义方法体，以及接口的属性为什么默认是public static final。\n随后一定得说，抽象类是对逻辑的归纳，比如人类是中国人和美国人类的抽象类，而接口是对功能的抽象，比如把能发光的功能归纳到一个接口里。随后可以举些你项目里用到过的例子来说你定义过哪些接口和抽象类，由此通过案例来说明这两者的差别。\n\n- 问题2.7.3，说下重载(overload)和覆盖(override)的差别。\n这个也会经常问，重载是多态的一种体现，表现形式是方法同名但参数不同，而覆盖是子类方法覆盖掉父类方法。\n随后请大家说出子类覆盖父类方法的两大局限，子类方法不能缩小父类方法的访问权限，而且，子类方法不能抛出比父类方法更多的异常。同时解释一下具体的原因。\n\n- 问题2.7.4，this和super的含义。这个是语法问题，就不展开了。\n\n- 问题2.7.5，finalize方法有什么作用？\n第一，可以说出这个方法在类被回收时被调用；第二可以说，一般我们在项目里不会重写这个方法，因为会引发内存无法回收的问题。后面我们会详细提到 java的垃圾回收机制（GC），如果大家感觉可以，可以由这个问题展开回答一下你对GC的认识。\n\n- 问题2.7.6，final关键的含义。\n这时请分别说出final作用到类、方法和属性上分别有什么作用。随后最好结合你的实际项目，说下final类、final方法和final属性的应用场景。\n\n- 问题2.7.7，构造函数能否被覆盖，能否被重载？\n构造函数能重载，但不能覆盖，原因已经讲过。\n接下来的问题只给出的题目，答案请到附录里去找。\n\n- 问题2.7.8静态变量和实例变量的区别？\n\n- 问题2.7.9是否可以从一个static方法内部发出对非static方法的调用？\n\n- 问题2.7.10请说出作用域public，private，protected，以及不写时的区别。\n\n\n# 线性表方面\n\n- 3.2.7.1 请用ArrayList实现Stack以及Queue的功能。\n```java\npublic class ArrayListStack extends ArrayList implements Stack {\n    ArrayList arrayList =new ArrayList<>() ;\n    public void push(T obj) {\n       arrayList.add(obj);\n    }\n    public T pop() {\n        return arrayList.remove(arrayList.size()-1);\n    }\n    public int size(){\n        return arrayList.size(); \n    }\n}\n```\n3.2.7.2 如果让你实现Java的ArrayList，你需要考虑哪些要素？\nArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。 \n    ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。\n   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 \n   注意，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。\n     ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。\n    ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection<? extends E> c)、addAll(int index, Collection<? extends E> c)这些添加元素的方法。\n    每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。\n    数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。 \n    Fail-Fast机制： \nArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。\n\n- 3.2.7.3 请通过Iterator对象访问LinkedList对象，并说明这种访问方式的好处。\n```java\n  LinkedList  list =  new LinkedList();\n\n  //省略赋值\n  ListIterator it = list.listIterator();\n  while(it.hasNext()) { \n   System.out.println(it.next().toString()); //使用  \n  }\n```\n  好处是，能用统一的方式来访问集合对象，这也是迭代器模式的好处。\n\n- 3.2.7.4 你有没有读过ArrayList部分的底层实现源代码？如果有，请说明下其中的add方法是如何实现的？尤其请考虑动态扩展的情况。\n\n如下是扩容的底层方法\n```java\n/**\n* 增加ArrayList容量。\n* \n* @param minCapacity 想要的最小容量\n*/\npublic void ensureCapacity(int minCapacity) {\n    // 如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，最小扩容量为DEFAULT_CAPACITY，否则为0\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)? 0: DEFAULT_CAPACITY;\n    //如果想要的最小容量大于最小扩容量，则使用想要的最小容量。\n    if (minCapacity > minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureCapacityInternal(int minCapacity) {\n    // 若elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，则取minCapacity为DEFAULT_CAPACITY和参数minCapacity    之间的最大值\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n/**\n* 数组容量检查，不够时则进行扩容，只供类内部使用\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // 确保指定的最小容量 > 数组缓冲区当前的长度 \n    if (minCapacity - elementData.length > 0)\n    //扩容\n    grow(minCapacity);\n}\n\n/**\n* 分派给arrays的最大容量\n* 为什么要减去8呢？\n* 因为某些VM会在数组中保留一些头字，尝试分配这个最大存储容量，可能会导致array容量大于VM的limit，最终导致OutOfMemoryError。\n*/\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n* 扩容，保证ArrayList至少能存储minCapacity个元素\n* 第一次扩容，逻辑为newCapacity = oldCapacity + (oldCapacity >> 1);即在原有的容量基础上增加一半。第一次扩容后，如果容量还是小于minCapacity，就将容量扩充为minCapacity。\n* \n* @param minCapacity 想要的最小容量\n*/\nprivate void grow(int minCapacity) {\n    // 获取当前数组的容量\n    int oldCapacity = elementData.length;\n    // 扩容。新的容量=当前容量+当前容量/2.即将当前容量增加一半。\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //如果扩容后的容量还是小于想要的最小容量\n    if (newCapacity - minCapacity < 0)\n        //将扩容后的容量再次扩容为想要的最小容量\n        newCapacity = minCapacity;\n    //如果扩容后的容量大于临界值，则进行大容量分配\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n     // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData,newCapacity);\n}\n/**\n* 进行大容量分配\n*/\nprivate static int hugeCapacity(int minCapacity) {\n    //如果minCapacity<0，抛出异常\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    //如果想要的容量大于MAX_ARRAY_SIZE，则分配Integer.MAX_VALUE，否则分配MAX_ARRAY_SIZE\n    return (minCapacity > MAX_ARRAY_SIZE) ?Integer.MAX_VALUE :MAX_ARRAY_SIZE;\n}\n\n```\n- 3.2.7.5 请说下Collection和Collections的差别以及各自的用途。\n    Collections 是一个集合的一个类，其中包含有一些和集合操作相关的静态多态方法。Java 集合里则有另外一个和它非常相似的接口    \n    Collection（不带s），它是线性表类集合的父接口，List和Set等接口都是通过实现这个接口来实现的。\n\n- 3.2.7.6 我们知道Set对象里不能有重复的元素，请说下是用什么方法来判断是否重复？是通过equals方法吗？\n    请参与本书3.2.3 Set集合是如何判断重复，里面有详细的描述\n\n# 键值对方面\n\n- 3.3.5.1如何遍历HashMap对象？尤其请说明通过Iterator遍历HashMap对象的方法。\n建议用这种方式：\n```java\n Set<Entry<String,String>>entrySet=map.entrySet();\n\n    for(Entry<String,String>entry:entrySet){\n\n      entry.getKey();\n\n      entry.getValue();\n\n    }\n```\n  \n- 3.3.5.2HashMap是线程安全的还是线程不安全的？HashTable呢？\n    HashMap是线程不安全的，HashTable是线程安全的。\n\n- 3.3.5.3 ConcurrentHashMap是线程安全的还是不安全的？请说下该对象底层实现get和put方法的流程。\n    ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。\n    整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个 segment。\n    简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。    \n     get 过程中是没有加锁的，那自然我们就需要去考虑并发问题。\n     put 操作的线程安全性。添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。\n\n# [Java核心技术及面试指南 异常部分的面试题归纳以及答案](https://www.cnblogs.com/JavaArchitect/p/8495854.html)\n\n4.2.4.1 throw和throws有什么差别？异常（Exception）和错误（Error）有什么差别？\n\n   throw语句表示抛出异常，由方法体内的语句处理。throws语句用在方法声明后面，表示如果抛出异常，由该方法的调用者来处理。\n   throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常。throw是具体向外抛异常的动作，所以它是抛出一个异常实例。\n\n4.2.4.2 final、finalize和finally这三个相似的关键字有什么差别？\n\n  final可以定义常量，如果作用在类上，这个类就不能被继承。\n\n  finalize方法里可以放回收对象时需要指定的动作，但一般不重写。\n\n  finally是try...catch...finally里的，不管是否发生异常，以及发生了何种异常，finally都会被执行。 \n\n4.2.4.3 如果我们采用try…catch…finally的形式来处理异常，如果在try部分有return语句，那么finally部分的代码会不会执行？\n\n    会执行，所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.4 运行期异常（RuntimeException）和其它异常（比如SQLException）有什么差别？你在平时开发中用过哪些运行期异常？\n\n     运行期异常可以不用try..catch包含起来，运行期异常一般有除零异常，空指针异常以及数组越界异常。\n\n4.2.4.5 你一般在finally从句里放哪些代码？\n\n    所以在finally从句里，一般会放回收资源的动作。\n\n4.2.4.6 如果父类的某个方法抛出了一个异常，那么子类在覆盖父类的这个方法时，有什么限制？为什么要规定这个限制？\n\n    请参与本书异常部分的描述。\n\n4.2.4.7 你有没有自己定义过异常对象？如何自定义异常对象？\n\n    自定义异常可以通过throw抛出。\n\n\n\n\n\n# [Java核心技术及面试指南 数据库方面的面试题归纳以及总结](https://www.cnblogs.com/JavaArchitect/p/8495866.html)\n\n5.1.7.1 事务的四大特性是什么？\n\n    ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。\n\n    ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n    ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n    ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n5.1.7.2 共享锁和排斥锁的含义以及用途？\n\n    共享锁又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。\n\n    排他锁又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。排他锁很好理解，是自己独占资源。\n\n5.1.7.3 乐观锁和悲观锁的含义以及用途？\n\n    乐观锁总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。\n\n   悲观锁总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁。\n\n5.1.7.4 内连接、外连接、全连接和左连接的语法以及用途。\n\n    1、内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。   \n\n    2、外联接。外联接可以是左向外联接、右向外联接或完整外部联接。在 FROM子句中指定外联接时，可以由下列几组关键字中的一组指定：     \n\n    3左连接和左外连接\n\n    左向外联接的结果集包括  LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。       \n\n   FULL  JOIN 或 FULL OUTER JOIN,完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。   \n    4 交叉联接   交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。\n\n5.1.7.5 第一、第二和第三范式的含义以及反范式的含义。你在建表时，用到的是哪种范式？\n\n    “设计过表”标志着一个初级程序员开始成熟，这里我姑且不论数据表的业务逻辑，一般的公司是怎么“合理地设计数据表”？其实在设计一个商业项目的数据表时，离不开“业务需求”。\n\n    第一，如果在设计的时候，已经明确地知道这个系统的数据量不会太大，比如一个中学的图书管理系统，最多有10万条书本的数据，过去一个月里借阅记录不会超过1万条，也就是说表之间的关联代价不会太高，那么用“三范式”的原则是必须的。毕竟三范式能避免数据冗余带来的更新插入上“需要同时多表里相同字段”的麻烦。\n\n    第二，如果表的数据量很大，比如我刚才举的在线购物网站的例子，我们可能就需要冗余数据。在订单流水表里，同时放入用户邮件地址和商品名的字段。\n\n    在得到“免去连接操作”的好处同时，这样做也是有代价的，比如用户一旦更新了邮件地址，那么我们就需要同时在会员表和订单流水表里修改该字段，这就是冗余带来的后果。\n\n    除去一些技术点的描述，本篇更想告诉大家的是，你不仅需要掌握诸如“连接”和“范式”之类的技术，你更该从业务角度，从权衡各种“建表代价”，从而挑选一种最符合本项目的解决方案。\n\n    我在以往的面试官的经验里，有过两个案例，第一位他简历上项目很多，也具有1年相关经验，但他说建数据表要符合“三范式”，同时不清楚左连接，内连接等的具体做法，经过我细问，原来他在简历上的项目是自己在学习中搭建的，并非商业项目。\n\n    第二位，他虽然工作经验只有半年，但把“建表需要权衡数据冗余和连接代价”的意思描述了一下。这样至少在数据库层面，第二位的得分就要比第一位要高。\n\n5.1.7.6 什么是SQL注入？它有什么后果？一般怎么预防？\n\n    ![](https://images2018.cnblogs.com/blog/1226172/201808/1226172-20180812175942853-61705531.png)\n\n我们一般用如下的SQL来验证身份：\n\nSelect userName from users where username = ‘输入的用户名’ and pwd = ‘输入的密码’\n\n一般来说，如果用户名和密码不匹配，就无法通过验证，但有人可以在User Name里输入1，在User Passwor部分输入\n\n1’ and pwd = ‘1’ or ‘1’=’1\n\n那么整个SQL语句就会变成\n\nSelect userName from users where username = ‘1’ and pwd = ‘1’ or ‘1’=’1’\n\n这样就能绕过验证。\n\n而处理对象PreparedStatement能有效防止这个现象，因为一个?就是一个占位符，无法扩展。以此能防止SQL注入。\n",[[1566870683288,["GJX@GJXAIOU",[[1,12096,"\n"]],[12095,12095],[12096,12096]]],[1566870683431,["GJX@GJXAIOU",[[1,12097,"\n"]],[12096,12096],[12097,12097]]]],null,"GJX@GJXAIOU"]]}