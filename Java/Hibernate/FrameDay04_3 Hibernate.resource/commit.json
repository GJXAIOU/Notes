{"compress":true,"commitItems":[["b04358f6-2bb4-464b-bd6b-a78f958dd555",1569548972346,"",[[1569548929656,["GJX@GJXAIOU",[[1,0,"# FrameDay04_3 Hibernate\n\n\n\n"]],[0,0],[27,27]]],[1569548943275,["GJX@GJXAIOU",[[1,27,"# Hibernate_day03\n\n## 上节内容\n\n| \n\n**1** **实体类编写规则**\n\n**2 hibernate****主键生成策略**\n\n**3** **实体类操作**\n\n**（1****）crud****操作**\n\n**（2****）实体类对象状态**\n\n**4 hibernate****的一级缓存**\n\n**5 hibernate****的事务操作**\n\n**（1****）事务代码规则写法**\n\n**6 hibernate****其他的api****（查询）**\n\n |\n\n## 今天内容\n\n| \n\n**0** **列表功能实现**\n\n**1** **表与表之间关系回顾**\n\n**（1****）一对多（客户和联系人）**\n\n**（2****）多对多（用户和角色）**\n\n**2 hibernate****一对多操作**\n\n**（1****）一对多映射配置**\n\n**（2****）一对多级联保存**\n\n**（3****）一对多级联删除**\n\n**（4****）inverse****属性**\n\n**3 hibernate****多对多操作**\n\n**（1****）多对多映射配置**\n\n**（2****）多对多级联保存（重点）**\n\n**（3****）多对多级联删除**\n\n**（4****）维护第三张表**\n\n |\n\n## 客户列表功能\n\n| \n\n**1 sessionFactory****已经关闭了，不需要关闭**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\n\n**2 dao****里面代码**\n\n**//****使用****hibernate****实现查询列表**\n\npublic **List<Customer> findAll() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****查询所有记录**\n\n **Criteria** **criteria** **=** **session****.createCriteria(Customer.**class**);**\n\n **List<Customer>** **list** **=** **criteria****.list()****;**\n\n**//****提交事务**\n\n**tx****.commit();**\n\nreturn**list****;**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**// sessionFactory.close();**\n\n **}**\n\nreturnnull**;**\n\n **}**\n\n |\n\n## 表与表之间关系回顾（重点）\n\n| \n\n**1** **一对多**\n\n**（1****）例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类**\n\n**（2****）客户和联系人是一对多关系**\n\n**-** **客户：与公司有业务往来，例如百度、新浪、360**\n\n**-** **联系人：公司里面的员工，百度里面有很多员工，联系员工**\n\n****** **公司和公司员工的关系**\n\n**-** **客户是一，联系人是多**\n\n**-** **一个客户里面有多个联系人，一个联系人只能属于一个客户**\n\n**（3****）一对多建表：通过外键建立关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)\n\n**2** **多对多**\n\n**（1****）例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单**\n\n**（2****）用户和角色多对多关系**\n\n**-** **用户：** **小王、小马、小宋**\n\n**-** **角色：总经理、秘书、司机、保安**\n\n****** **比如小王** **可以** **是总经理，可以是司机**\n\n****** **比如小宋** **可以是司机，可以是秘书，可以保安**\n\n****** **比如小马** **可以是** **秘书，可以是总经理**\n\n- **一个用户里面可以有多个角色，一个角色里面可以有多个用户**\n\n**（3****）多对多建表：创建第三张表维护关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)\n\n**3** **一对一**\n\n**（1****）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫**\n\n |\n\n## Hibernate的一对多操作（重点）\n\n### 一对多映射配置（重点）\n\n| \n\n**以客户和联系人为例：客户是一，联系人是多**\n\n**第一步** **创建两个实体类，客户和联系人**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）在客户实体类里面表示多个联系人**\n\n**-** **一个客户里面有多个联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)\n\n**（2****）在联系人实体类里面表示所属客户**\n\n**-** **一个联系人只能属于一个客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）一般一个实体类对应一个映射文件**\n\n**（2****）把映射最基本配置完成**\n\n**（3****）在映射文件中，配置一对多关系**\n\n**-** **在客户映射文件中，表示所有联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)\n\n**-** **在联系人映射文件中，表示所属客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)\n\n**第四步** **创建核心配置文件，把映射文件引入到核心配置文件中**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n\n |\n\n### 一对多级联操作\n\n| \n\n**级联操作**\n\n**1** **级联保存**\n\n**（1****）添加一个客户，为这个客户添加多个联系人**\n\n**2** **级联删除**\n\n**（1****）删除某一个客户，这个客户里面的所有的联系人也删除**\n\n |\n\n### 一对多级联保存\n\n| \n\n**1** **需求：添加客户，为这个客户添加一个联系人**\n\n**（****1****）复杂写法：**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo1() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****传智播客****\"****);**\n\n**customer****.setCustLevel(****\"vip\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"lucy\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **需要在客户表示所有联系人，在联系人表示客户**\n\n**//** **即建立客户对象和联系人对象关系**\n\n**//2.1** **把联系人对象****放到客户对象的****set****集合里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//2.2** **把客户对象放到联系人里面**\n\n**linkman****.setCustomer(****customer****);**\n\n**//3** **保存到数据库**\n\n**session****.save(****customer****);**\n\n**session****.save(****linkman****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)\n\n**（****2****）简化写法**\n\n**-** **一般根据客户添加联系人**\n\n**第一步****在客户映射文件中进行配置**\n\n**-** **在客户映射文件里面****set****标签进行配置**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n**第二步****创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo2() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****百度****\"****);**\n\n**customer****.setCustLevel(****\"****普通客户****\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"****小宏****\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **把联系人放到客户里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//3** **保存客户**\n\n**session****.save(****customer****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n |\n\n### 一对多级联删除\n\n|  |\n| \n\n**1** **需求：删除某个客户，把客户里面所有的联系人删除**\n\n**2** **具体实现**\n\n**第一步** **在客户映射文件set****标签，进行配置**\n\n**（1****）使用属性cascade****属性值 delete**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**第二步** **在代码中直接删除客户（下面这段代码替换前面的自定义代码）**\n\n**（1****）根据id****查询对象，调用session****里面delete****方法删除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n**3** **执行过程：**\n\n**（1****）根据id****查询客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n**（2****）根据外键id****值查询联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n**（3****）把联系人外键设置为null**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n**（4****）删除联系人和客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n |\n\n### 一对多修改操作（inverse属性）\n\n| \n\n**1** **让lucy****联系人所属客户不是传智播客，而是百度**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n**2 inverse****属性**\n\n**（1****）因为hibernate****双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n**（2****）解决方式：让其中的“一”方不维护外键**\n\n**-** **一对多里面，让其中“一”方放弃外键维护**\n\n**-** **一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统**\n\n**（3****）具体实现：**\n\n**在放弃关系维护映射文件中（这里在 Custumer.hbn.xml****中），进行配置，在set****标签上使用inverse****属性**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n |\n\n## Hibernate多对多操作\n\n### 多对多映射配置\n\n| \n\n**以用户和角色为例演示**\n\n**第一步** **创建实体类，用户和角色**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）一个用户里面表示所有角色，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n**（2****）一个角色有多个用户，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）基本配置**\n\n**（2****）配置多对多关系**\n\n**-** **在用户里面表示所有角色，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n**-** **在角色里面表示所有用户，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n\n**第四步** **在核心配置文件中引入映射文件**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image056.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image058.jpg)\n\n |\n\n### 多对多级联保存\n\n| \n\n**根据用户保存角色**\n\n**第一步****在用户配置文件中****set****标签进行配置，****cascade****值****save-update****（****User****中）**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg)\n\n**第二步****写代码实现**\n\n**（****1****）创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了**\n\n**//****演示多对多修级联保存**\n\n**@Test**\n\npublicvoid **testSave() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****添加两个用户，为每个用户添加两个角色**\n\n**//1** **创建对象**\n\n **User** **user1** **=** new **User();**\n\n**user1****.setUser_name(****\"lucy\"****);**\n\n**user1****.setUser_password(****\"123\"****);**\n\n **User** **user2** **=** new **User();**\n\n**user2****.setUser_name(****\"mary\"****);**\n\n**user2****.setUser_password(****\"456\"****);**\n\n **Role** **r1** **=** new **Role();**\n\n**r1****.setRole_name(****\"****总经理****\"****);**\n\n**r1****.setRole_memo(****\"****总经理****\"****);**\n\n **Role** **r2** **=** new **Role();**\n\n**r2****.setRole_name(****\"****秘书****\"****);**\n\n**r2****.setRole_memo(****\"****秘书****\"****);**\n\n **Role** **r3** **=** new **Role();**\n\n**r3****.setRole_name(****\"****保安****\"****);**\n\n**r3****.setRole_memo(****\"****保安****\"****);**\n\n**//2** **建立关系****，****把角色放到用户里面**\n\n**// user1 -- r1/r2**\n\n**user1****.getSetRole().add(****r1****);**\n\n**user1****.getSetRole().add(****r2****);**\n\n**// user2 -- r2/r3**\n\n**user2****.getSetRole().add(****r2****);**\n\n**user2****.getSetRole().add(****r3****);**\n\n**//3** **保存用户**\n\n**session****.save(****user1****);**\n\n**session****.save(****user2****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image062.jpg)\n\n |\n\n### 多对多级联删除（了解）\n\n| \n\n**第一步** **在set****标签进行配置，cascade****值delete**\n\n**第二步** **删除用户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg)\n\n |\n\n### 维护第三张表关系\n\n| \n\n**1** **用户和角色多对多关系，维护关系通过第三张表维护**\n\n**2** **让某个用户有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n**第二步** **把角色放到用户里面**\n\n**（1****）把角色对象放到用户使用set****集合**\n\n**3** **让某个用户没有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image068.jpg)\n\n**第二步** **从用户里面把角色去掉**\n\n**（1****）从set****集合里面把角色移除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg)\n\n |"]],[27,27],[12320,12320]]],[1569548946775,["GJX@GJXAIOU",[[-1,27,"# Hibernate_day03\n\n## 上节内容\n\n| \n\n**1** **实体类编写规则**\n\n**2 hibernate****主键生成策略**\n\n**3** **实体类操作**\n\n**（1****）crud****操作**\n\n**（2****）实体类对象状态**\n\n**4 hibernate****的一级缓存**\n\n**5 hibernate****的事务操作**\n\n**（1****）事务代码规则写法**\n\n**6 hibernate****其他的api****（查询）**\n\n |\n\n## 今天内容\n\n| \n\n**0** **列表功能实现**\n\n**1** **表与表之间关系回顾**\n\n**（1****）一对多（客户和联系人）**\n\n**（2****）多对多（用户和角色）**\n\n**2 hibernate****一对多操作**\n\n**（1****）一对多映射配置**\n\n**（2****）一对多级联保存**\n\n**（3****）一对多级联删除**\n\n**（4****）inverse****属性**\n\n**3 hibernate****多对多操作**\n\n**（1****）多对多映射配置**\n\n**（2****）多对多级联保存（重点）**\n\n**（3****）多对多级联删除**\n\n**（4****）维护第三张表**\n\n |\n\n## 客户列表功能\n\n| \n\n**1 sessionFactory****已经关闭了，不需要关闭**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\n\n**2 dao****里面代码**\n\n**//****使用****hibernate****实现查询列表**\n\npublic **List<Customer> findAll() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****查询所有记录**\n\n **Criteria** **criteria** **=** **session****.createCriteria(Customer.**class**);**\n\n **List<Customer>** **list** **=** **criteria****.list()****;**\n\n**//****提交事务**\n\n**tx****.commit();**\n\nreturn**list****;**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**// sessionFactory.close();**\n\n **}**\n\nreturnnull**;**\n\n **}**\n\n |\n\n## 表与表之间关系回顾（重点）\n\n| \n\n**1** **一对多**\n\n**（1****）例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类**\n\n**（2****）客户和联系人是一对多关系**\n\n**-** **客户：与公司有业务往来，例如百度、新浪、360**\n\n**-** **联系人：公司里面的员工，百度里面有很多员工，联系员工**\n\n****** **公司和公司员工的关系**\n\n**-** **客户是一，联系人是多**\n\n**-** **一个客户里面有多个联系人，一个联系人只能属于一个客户**\n\n**（3****）一对多建表：通过外键建立关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)\n\n**2** **多对多**\n\n**（1****）例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单**\n\n**（2****）用户和角色多对多关系**\n\n**-** **用户：** **小王、小马、小宋**\n\n**-** **角色：总经理、秘书、司机、保安**\n\n****** **比如小王** **可以** **是总经理，可以是司机**\n\n****** **比如小宋** **可以是司机，可以是秘书，可以保安**\n\n****** **比如小马** **可以是** **秘书，可以是总经理**\n\n- **一个用户里面可以有多个角色，一个角色里面可以有多个用户**\n\n**（3****）多对多建表：创建第三张表维护关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)\n\n**3** **一对一**\n\n**（1****）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫**\n\n |\n\n## Hibernate的一对多操作（重点）\n\n### 一对多映射配置（重点）\n\n| \n\n**以客户和联系人为例：客户是一，联系人是多**\n\n**第一步** **创建两个实体类，客户和联系人**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）在客户实体类里面表示多个联系人**\n\n**-** **一个客户里面有多个联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)\n\n**（2****）在联系人实体类里面表示所属客户**\n\n**-** **一个联系人只能属于一个客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）一般一个实体类对应一个映射文件**\n\n**（2****）把映射最基本配置完成**\n\n**（3****）在映射文件中，配置一对多关系**\n\n**-** **在客户映射文件中，表示所有联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)\n\n**-** **在联系人映射文件中，表示所属客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)\n\n**第四步** **创建核心配置文件，把映射文件引入到核心配置文件中**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n\n |\n\n### 一对多级联操作\n\n| \n\n**级联操作**\n\n**1** **级联保存**\n\n**（1****）添加一个客户，为这个客户添加多个联系人**\n\n**2** **级联删除**\n\n**（1****）删除某一个客户，这个客户里面的所有的联系人也删除**\n\n |\n\n### 一对多级联保存\n\n| \n\n**1** **需求：添加客户，为这个客户添加一个联系人**\n\n**（****1****）复杂写法：**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo1() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****传智播客****\"****);**\n\n**customer****.setCustLevel(****\"vip\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"lucy\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **需要在客户表示所有联系人，在联系人表示客户**\n\n**//** **即建立客户对象和联系人对象关系**\n\n**//2.1** **把联系人对象****放到客户对象的****set****集合里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//2.2** **把客户对象放到联系人里面**\n\n**linkman****.setCustomer(****customer****);**\n\n**//3** **保存到数据库**\n\n**session****.save(****customer****);**\n\n**session****.save(****linkman****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)\n\n**（****2****）简化写法**\n\n**-** **一般根据客户添加联系人**\n\n**第一步****在客户映射文件中进行配置**\n\n**-** **在客户映射文件里面****set****标签进行配置**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n**第二步****创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo2() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****百度****\"****);**\n\n**customer****.setCustLevel(****\"****普通客户****\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"****小宏****\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **把联系人放到客户里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//3** **保存客户**\n\n**session****.save(****customer****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n |\n\n### 一对多级联删除\n\n|  |\n| \n\n**1** **需求：删除某个客户，把客户里面所有的联系人删除**\n\n**2** **具体实现**\n\n**第一步** **在客户映射文件set****标签，进行配置**\n\n**（1****）使用属性cascade****属性值 delete**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**第二步** **在代码中直接删除客户（下面这段代码替换前面的自定义代码）**\n\n**（1****）根据id****查询对象，调用session****里面delete****方法删除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n**3** **执行过程：**\n\n**（1****）根据id****查询客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n**（2****）根据外键id****值查询联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n**（3****）把联系人外键设置为null**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n**（4****）删除联系人和客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n |\n\n### 一对多修改操作（inverse属性）\n\n| \n\n**1** **让lucy****联系人所属客户不是传智播客，而是百度**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n**2 inverse****属性**\n\n**（1****）因为hibernate****双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n**（2****）解决方式：让其中的“一”方不维护外键**\n\n**-** **一对多里面，让其中“一”方放弃外键维护**\n\n**-** **一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统**\n\n**（3****）具体实现：**\n\n**在放弃关系维护映射文件中（这里在 Custumer.hbn.xml****中），进行配置，在set****标签上使用inverse****属性**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n |\n\n## Hibernate多对多操作\n\n### 多对多映射配置\n\n| \n\n**以用户和角色为例演示**\n\n**第一步** **创建实体类，用户和角色**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）一个用户里面表示所有角色，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n**（2****）一个角色有多个用户，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）基本配置**\n\n**（2****）配置多对多关系**\n\n**-** **在用户里面表示所有角色，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n**-** **在角色里面表示所有用户，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n\n**第四步** **在核心配置文件中引入映射文件**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image056.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image058.jpg)\n\n |\n\n### 多对多级联保存\n\n| \n\n**根据用户保存角色**\n\n**第一步****在用户配置文件中****set****标签进行配置，****cascade****值****save-update****（****User****中）**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg)\n\n**第二步****写代码实现**\n\n**（****1****）创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了**\n\n**//****演示多对多修级联保存**\n\n**@Test**\n\npublicvoid **testSave() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****添加两个用户，为每个用户添加两个角色**\n\n**//1** **创建对象**\n\n **User** **user1** **=** new **User();**\n\n**user1****.setUser_name(****\"lucy\"****);**\n\n**user1****.setUser_password(****\"123\"****);**\n\n **User** **user2** **=** new **User();**\n\n**user2****.setUser_name(****\"mary\"****);**\n\n**user2****.setUser_password(****\"456\"****);**\n\n **Role** **r1** **=** new **Role();**\n\n**r1****.setRole_name(****\"****总经理****\"****);**\n\n**r1****.setRole_memo(****\"****总经理****\"****);**\n\n **Role** **r2** **=** new **Role();**\n\n**r2****.setRole_name(****\"****秘书****\"****);**\n\n**r2****.setRole_memo(****\"****秘书****\"****);**\n\n **Role** **r3** **=** new **Role();**\n\n**r3****.setRole_name(****\"****保安****\"****);**\n\n**r3****.setRole_memo(****\"****保安****\"****);**\n\n**//2** **建立关系****，****把角色放到用户里面**\n\n**// user1 -- r1/r2**\n\n**user1****.getSetRole().add(****r1****);**\n\n**user1****.getSetRole().add(****r2****);**\n\n**// user2 -- r2/r3**\n\n**user2****.getSetRole().add(****r2****);**\n\n**user2****.getSetRole().add(****r3****);**\n\n**//3** **保存用户**\n\n**session****.save(****user1****);**\n\n**session****.save(****user2****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image062.jpg)\n\n |\n\n### 多对多级联删除（了解）\n\n| \n\n**第一步** **在set****标签进行配置，cascade****值delete**\n\n**第二步** **删除用户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg)\n\n |\n\n### 维护第三张表关系\n\n| \n\n**1** **用户和角色多对多关系，维护关系通过第三张表维护**\n\n**2** **让某个用户有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n**第二步** **把角色放到用户里面**\n\n**（1****）把角色对象放到用户使用set****集合**\n\n**3** **让某个用户没有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image068.jpg)\n\n**第二步** **从用户里面把角色去掉**\n\n**（1****）从set****集合里面把角色移除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg)\n\n |"]],[12320,12320],[27,27]]],[1569548948577,["GJX@GJXAIOU",[[1,27,"Hibernate_day03\n上节内容\n1 实体类编写规则\n\n2 hibernate主键生成策略\n\n3 实体类操作\n（1）crud操作\n（2）实体类对象状态\n\n4 hibernate的一级缓存\n\n5 hibernate的事务操作\n（1）事务代码规则写法\n\n6 hibernate其他的api（查询）\n今天内容\n0 列表功能实现\n\n1 表与表之间关系回顾\n（1）一对多（客户和联系人）\n（2）多对多（用户和角色）\n\n2 hibernate一对多操作\n（1）一对多映射配置\n（2）一对多级联保存\n（3）一对多级联删除\n（4）inverse属性\n\n3 hibernate多对多操作\n（1）多对多映射配置\n（2）多对多级联保存（重点）\n（3）多对多级联删除\n（4）维护第三张表\n\n客户列表功能\n1 sessionFactory已经关闭了，不需要关闭\n \n \n\n2 dao里面代码\n\t//使用hibernate实现查询列表\n\tpublic List<Customer> findAll() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//查询所有记录\n\t\t\tCriteria criteria = session.createCriteria(Customer.class);\n\t\t\tList<Customer> list = criteria.list();\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t\treturn list;\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n//\t\t\tsessionFactory.close();\n\t\t}\n\t\treturn null;\n\t}\n\n表与表之间关系回顾（重点）\n1 一对多\n（1）例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类\n\n（2）客户和联系人是一对多关系\n- 客户：与公司有业务往来，例如百度、新浪、360\n- 联系人：公司里面的员工，百度里面有很多员工，联系员工\n** 公司和公司员工的关系\n\n- 客户是一，联系人是多\n- 一个客户里面有多个联系人，一个联系人只能属于一个客户\n\n（3）一对多建表：通过外键建立关系\n \n\n2 多对多\n（1）例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单\n\n（2）用户和角色多对多关系\n- 用户： 小王、小马、小宋\n- 角色：总经理、秘书、司机、保安\n** 比如小王 可以 是总经理，可以是司机\n** 比如小宋 可以是司机，可以是秘书，可以保安\n** 比如小马 可以是 秘书，可以是总经理\n-\t一个用户里面可以有多个角色，一个角色里面可以有多个用户\n\n（3）多对多建表：创建第三张表维护关系\n \n\n3 一对一\n（1）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫\n\nHibernate的一对多操作（重点）\n一对多映射配置（重点）\n以客户和联系人为例：客户是一，联系人是多\n\n第一步 创建两个实体类，客户和联系人\n\n第二步 让两个实体类之间互相表示\n（1）在客户实体类里面表示多个联系人\n- 一个客户里面有多个联系人\n \n\n（2）在联系人实体类里面表示所属客户\n- 一个联系人只能属于一个客户\n \n\n第三步 配置映射关系\n（1）一般一个实体类对应一个映射文件\n（2）把映射最基本配置完成\n\n（3）在映射文件中，配置一对多关系\n- 在客户映射文件中，表示所有联系人\n \n\n- 在联系人映射文件中，表示所属客户\n \n\n第四步 创建核心配置文件，把映射文件引入到核心配置文件中\n \n\n测试：\n \n\n一对多级联操作\n级联操作\n1 级联保存\n（1）添加一个客户，为这个客户添加多个联系人\n\n2 级联删除\n（1）删除某一个客户，这个客户里面的所有的联系人也删除\n\n一对多级联保存\n1 需求：添加客户，为这个客户添加一个联系人\n（1）复杂写法：\n\t//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"传智播客\");\n\t\t\tcustomer.setCustLevel(\"vip\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"lucy\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t\n\t\t\t//2 需要在客户表示所有联系人，在联系人表示客户\t\t\n\t\t\t// 即建立客户对象和联系人对象关系\n\t\t\t//2.1 把联系人对象 放到客户对象的set集合里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//2.2 把客户对象放到联系人里面\n\t\t\tlinkman.setCustomer(customer);\n\t\t\t\n\t\t\t//3 保存到数据库\n\t\t\tsession.save(customer);\n\t\t\tsession.save(linkman);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n \n \n\n（2）简化写法\n- 一般根据客户添加联系人\n第一步 在客户映射文件中进行配置\n- 在客户映射文件里面set标签进行配置\n \n\n第二步 创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了\n\t//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"普通客户\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"小宏\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t//2 把联系人放到客户里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//3 保存客户\n\t\t\tsession.save(customer);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\n\n一对多级联删除\n\n1 需求：删除某个客户，把客户里面所有的联系人删除\n\n2 具体实现\n第一步 在客户映射文件set标签，进行配置\n（1）使用属性cascade属性值 delete\n \n第二步 在代码中直接删除客户（下面这段代码替换前面的自定义代码）\n（1）根据id查询对象，调用session里面delete方法删除\n \n\n3 执行过程：\n（1）根据id查询客户\n \n（2）根据外键id值查询联系人\n \n（3）把联系人外键设置为null\n \n（4）删除联系人和客户\n \n\n一对多修改操作（inverse属性）\n1 让lucy联系人所属客户不是传智播客，而是百度\n\n \n\n2 inverse属性\n（1）因为hibernate双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题\n \n（2）解决方式：让其中的“一”方不维护外键\n- 一对多里面，让其中“一”方放弃外键维护\n- 一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统\n\n（3）具体实现：\n在放弃关系维护映射文件中（这里在 Custumer.hbn.xml中），进行配置，在set标签上使用inverse属性\n \n\nHibernate多对多操作\n多对多映射配置\n以用户和角色为例演示\n\n第一步 创建实体类，用户和角色\n\n第二步 让两个实体类之间互相表示\n（1）一个用户里面表示所有角色，使用set集合\n \n（2）一个角色有多个用户，使用set集合\n \n\n第三步 配置映射关系\n（1）基本配置\n（2）配置多对多关系\n- 在用户里面表示所有角色，使用set标签\n \n\n- 在角色里面表示所有用户，使用set标签\n \n \n\n第四步 在核心配置文件中引入映射文件\n \n\n测试：\n \n\n多对多级联保存\n根据用户保存角色\n\n第一步 在用户配置文件中set标签进行配置，cascade值save-update（User中）\n \n\n第二步 写代码实现\n（1）创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testSave() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//添加两个用户，为每个用户添加两个角色\n\t\t\t//1 创建对象\n\t\t\tUser user1 = new User();\n\t\t\tuser1.setUser_name(\"lucy\");\n\t\t\tuser1.setUser_password(\"123\");\n\t\t\t\n\t\t\tUser user2 = new User();\n\t\t\tuser2.setUser_name(\"mary\");\n\t\t\tuser2.setUser_password(\"456\");\n\t\t\t\n\t\t\tRole r1 = new Role();\n\t\t\tr1.setRole_name(\"总经理\");\n\t\t\tr1.setRole_memo(\"总经理\");\n\t\t\t\n\t\t\tRole r2 = new Role();\n\t\t\tr2.setRole_name(\"秘书\");\n\t\t\tr2.setRole_memo(\"秘书\");\n\t\t\t\n\t\t\tRole r3 = new Role();\n\t\t\tr3.setRole_name(\"保安\");\n\t\t\tr3.setRole_memo(\"保安\");\n\t\t\t\n\t\t\t//2 建立关系，把角色放到用户里面\n\t\t\t// user1 -- r1/r2\n\t\t\tuser1.getSetRole().add(r1);\n\t\t\tuser1.getSetRole().add(r2);\n\t\t\t\n\t\t\t// user2 -- r2/r3\n\t\t\tuser2.getSetRole().add(r2);\n\t\t\tuser2.getSetRole().add(r3);\n\t\t\t\n\t\t\t//3 保存用户\n\t\t\tsession.save(user1);\n\t\t\tsession.save(user2);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n \n\n\n多对多级联删除（了解）\n第一步 在set标签进行配置，cascade值delete\n第二步 删除用户\n \n \n\n维护第三张表关系\n1 用户和角色多对多关系，维护关系通过第三张表维护\n\n2 让某个用户有某个角色\n第一步 根据id查询用户和角色\n\n第二步 把角色放到用户里面\n（1）把角色对象放到用户使用set集合\n\n\n3 让某个用户没有某个角色\n第一步 根据id查询用户和角色\n \n\n第二步 从用户里面把角色去掉\n（1）从set集合里面把角色移除\n \n\n"]],[27,27],[6526,6526]]],[1569548958215,["GJX@GJXAIOU",[[1,6527,"\n"]],[6526,6526],[6527,6527]]],[1569548958331,["GJX@GJXAIOU",[[1,6528,"\n"]],[6527,6527],[6528,6528]]],[1569548958483,["GJX@GJXAIOU",[[1,6529,"\n"]],[6528,6528],[6529,6529]]],[1569548959379,["GJX@GJXAIOU",[[1,6529,"# Hibernate_day03\n\n## 上节内容\n\n| \n\n**1** **实体类编写规则**\n\n**2 hibernate****主键生成策略**\n\n**3** **实体类操作**\n\n**（1****）crud****操作**\n\n**（2****）实体类对象状态**\n\n**4 hibernate****的一级缓存**\n\n**5 hibernate****的事务操作**\n\n**（1****）事务代码规则写法**\n\n**6 hibernate****其他的api****（查询）**\n\n |\n\n## 今天内容\n\n| \n\n**0** **列表功能实现**\n\n**1** **表与表之间关系回顾**\n\n**（1****）一对多（客户和联系人）**\n\n**（2****）多对多（用户和角色）**\n\n**2 hibernate****一对多操作**\n\n**（1****）一对多映射配置**\n\n**（2****）一对多级联保存**\n\n**（3****）一对多级联删除**\n\n**（4****）inverse****属性**\n\n**3 hibernate****多对多操作**\n\n**（1****）多对多映射配置**\n\n**（2****）多对多级联保存（重点）**\n\n**（3****）多对多级联删除**\n\n**（4****）维护第三张表**\n\n |\n\n## 客户列表功能\n\n| \n\n**1 sessionFactory****已经关闭了，不需要关闭**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\n\n**2 dao****里面代码**\n\n**//****使用****hibernate****实现查询列表**\n\npublic **List<Customer> findAll() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****查询所有记录**\n\n **Criteria** **criteria** **=** **session****.createCriteria(Customer.**class**);**\n\n **List<Customer>** **list** **=** **criteria****.list()****;**\n\n**//****提交事务**\n\n**tx****.commit();**\n\nreturn**list****;**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**// sessionFactory.close();**\n\n **}**\n\nreturnnull**;**\n\n **}**\n\n |\n\n## 表与表之间关系回顾（重点）\n\n| \n\n**1** **一对多**\n\n**（1****）例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类**\n\n**（2****）客户和联系人是一对多关系**\n\n**-** **客户：与公司有业务往来，例如百度、新浪、360**\n\n**-** **联系人：公司里面的员工，百度里面有很多员工，联系员工**\n\n****** **公司和公司员工的关系**\n\n**-** **客户是一，联系人是多**\n\n**-** **一个客户里面有多个联系人，一个联系人只能属于一个客户**\n\n**（3****）一对多建表：通过外键建立关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)\n\n**2** **多对多**\n\n**（1****）例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单**\n\n**（2****）用户和角色多对多关系**\n\n**-** **用户：** **小王、小马、小宋**\n\n**-** **角色：总经理、秘书、司机、保安**\n\n****** **比如小王** **可以** **是总经理，可以是司机**\n\n****** **比如小宋** **可以是司机，可以是秘书，可以保安**\n\n****** **比如小马** **可以是** **秘书，可以是总经理**\n\n- **一个用户里面可以有多个角色，一个角色里面可以有多个用户**\n\n**（3****）多对多建表：创建第三张表维护关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)\n\n**3** **一对一**\n\n**（1****）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫**\n\n |\n\n## Hibernate的一对多操作（重点）\n\n### 一对多映射配置（重点）\n\n| \n\n**以客户和联系人为例：客户是一，联系人是多**\n\n**第一步** **创建两个实体类，客户和联系人**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）在客户实体类里面表示多个联系人**\n\n**-** **一个客户里面有多个联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)\n\n**（2****）在联系人实体类里面表示所属客户**\n\n**-** **一个联系人只能属于一个客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）一般一个实体类对应一个映射文件**\n\n**（2****）把映射最基本配置完成**\n\n**（3****）在映射文件中，配置一对多关系**\n\n**-** **在客户映射文件中，表示所有联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)\n\n**-** **在联系人映射文件中，表示所属客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)\n\n**第四步** **创建核心配置文件，把映射文件引入到核心配置文件中**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n\n |\n\n### 一对多级联操作\n\n| \n\n**级联操作**\n\n**1** **级联保存**\n\n**（1****）添加一个客户，为这个客户添加多个联系人**\n\n**2** **级联删除**\n\n**（1****）删除某一个客户，这个客户里面的所有的联系人也删除**\n\n |\n\n### 一对多级联保存\n\n| \n\n**1** **需求：添加客户，为这个客户添加一个联系人**\n\n**（****1****）复杂写法：**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo1() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****传智播客****\"****);**\n\n**customer****.setCustLevel(****\"vip\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"lucy\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **需要在客户表示所有联系人，在联系人表示客户**\n\n**//** **即建立客户对象和联系人对象关系**\n\n**//2.1** **把联系人对象****放到客户对象的****set****集合里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//2.2** **把客户对象放到联系人里面**\n\n**linkman****.setCustomer(****customer****);**\n\n**//3** **保存到数据库**\n\n**session****.save(****customer****);**\n\n**session****.save(****linkman****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)\n\n**（****2****）简化写法**\n\n**-** **一般根据客户添加联系人**\n\n**第一步****在客户映射文件中进行配置**\n\n**-** **在客户映射文件里面****set****标签进行配置**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n**第二步****创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo2() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****百度****\"****);**\n\n**customer****.setCustLevel(****\"****普通客户****\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"****小宏****\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **把联系人放到客户里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//3** **保存客户**\n\n**session****.save(****customer****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n |\n\n### 一对多级联删除\n\n|  |\n| \n\n**1** **需求：删除某个客户，把客户里面所有的联系人删除**\n\n**2** **具体实现**\n\n**第一步** **在客户映射文件set****标签，进行配置**\n\n**（1****）使用属性cascade****属性值 delete**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**第二步** **在代码中直接删除客户（下面这段代码替换前面的自定义代码）**\n\n**（1****）根据id****查询对象，调用session****里面delete****方法删除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n**3** **执行过程：**\n\n**（1****）根据id****查询客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n**（2****）根据外键id****值查询联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n**（3****）把联系人外键设置为null**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n**（4****）删除联系人和客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n |\n\n### 一对多修改操作（inverse属性）\n\n| \n\n**1** **让lucy****联系人所属客户不是传智播客，而是百度**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n**2 inverse****属性**\n\n**（1****）因为hibernate****双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n**（2****）解决方式：让其中的“一”方不维护外键**\n\n**-** **一对多里面，让其中“一”方放弃外键维护**\n\n**-** **一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统**\n\n**（3****）具体实现：**\n\n**在放弃关系维护映射文件中（这里在 Custumer.hbn.xml****中），进行配置，在set****标签上使用inverse****属性**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n |\n\n## Hibernate多对多操作\n\n### 多对多映射配置\n\n| \n\n**以用户和角色为例演示**\n\n**第一步** **创建实体类，用户和角色**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）一个用户里面表示所有角色，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n**（2****）一个角色有多个用户，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）基本配置**\n\n**（2****）配置多对多关系**\n\n**-** **在用户里面表示所有角色，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n**-** **在角色里面表示所有用户，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n\n**第四步** **在核心配置文件中引入映射文件**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image056.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image058.jpg)\n\n |\n\n### 多对多级联保存\n\n| \n\n**根据用户保存角色**\n\n**第一步****在用户配置文件中****set****标签进行配置，****cascade****值****save-update****（****User****中）**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg)\n\n**第二步****写代码实现**\n\n**（****1****）创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了**\n\n**//****演示多对多修级联保存**\n\n**@Test**\n\npublicvoid **testSave() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****添加两个用户，为每个用户添加两个角色**\n\n**//1** **创建对象**\n\n **User** **user1** **=** new **User();**\n\n**user1****.setUser_name(****\"lucy\"****);**\n\n**user1****.setUser_password(****\"123\"****);**\n\n **User** **user2** **=** new **User();**\n\n**user2****.setUser_name(****\"mary\"****);**\n\n**user2****.setUser_password(****\"456\"****);**\n\n **Role** **r1** **=** new **Role();**\n\n**r1****.setRole_name(****\"****总经理****\"****);**\n\n**r1****.setRole_memo(****\"****总经理****\"****);**\n\n **Role** **r2** **=** new **Role();**\n\n**r2****.setRole_name(****\"****秘书****\"****);**\n\n**r2****.setRole_memo(****\"****秘书****\"****);**\n\n **Role** **r3** **=** new **Role();**\n\n**r3****.setRole_name(****\"****保安****\"****);**\n\n**r3****.setRole_memo(****\"****保安****\"****);**\n\n**//2** **建立关系****，****把角色放到用户里面**\n\n**// user1 -- r1/r2**\n\n**user1****.getSetRole().add(****r1****);**\n\n**user1****.getSetRole().add(****r2****);**\n\n**// user2 -- r2/r3**\n\n**user2****.getSetRole().add(****r2****);**\n\n**user2****.getSetRole().add(****r3****);**\n\n**//3** **保存用户**\n\n**session****.save(****user1****);**\n\n**session****.save(****user2****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image062.jpg)\n\n |\n\n### 多对多级联删除（了解）\n\n| \n\n**第一步** **在set****标签进行配置，cascade****值delete**\n\n**第二步** **删除用户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg)\n\n |\n\n### 维护第三张表关系\n\n| \n\n**1** **用户和角色多对多关系，维护关系通过第三张表维护**\n\n**2** **让某个用户有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n**第二步** **把角色放到用户里面**\n\n**（1****）把角色对象放到用户使用set****集合**\n\n**3** **让某个用户没有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image068.jpg)\n\n**第二步** **从用户里面把角色去掉**\n\n**（1****）从set****集合里面把角色移除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg)\n\n |"]],[6529,6529],[18822,18822]]],[1569548964046,["GJX@GJXAIOU",[[-1,6557,"| \n\n**1** **实体类编写规则**\n\n**2 hibernate****主键生成策略**\n\n**3** **实体类操作**\n\n**（1****）crud****操作**\n\n**（2****）实体类对象状态**\n\n**4 hibernate****的一级缓存**\n\n**5 hibernate****的事务操作**\n\n**（1****）事务代码规则写法**\n\n**6 hibernate****其他的api****（查询）**\n\n |"]],[6557,6777],[6557,6557]]],[1569548966987,["GJX@GJXAIOU",[[-1,6568,"| \n\n**0** **列表功能实现**\n\n**1** **表与表之间关系回顾**\n\n**（1****）一对多（客户和联系人）**\n\n**（2****）多对多（用户和角色）**\n\n**2 hibernate****一对多操作**\n\n**（1****）一对多映射配置**\n\n**（2****）一对多级联保存**\n\n**（3****）一对多级联删除**\n\n**（4****）inverse****属性**\n\n**3 hibernate****多对多操作**\n\n**（1****）多对多映射配置**\n\n**（2****）多对多级联保存（重点）**\n\n**（3****）多对多级联删除**\n\n**（4****）维护第三张表**\n\n |"]],[6568,6881],[6568,6568]]],[1569548970918,["GJX@GJXAIOU",[[-1,6581,"| \n\n**1 sessionFactory****已经关闭了，不需要关闭**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\n\n**2 dao****里面代码**\n\n**//****使用****hibernate****实现查询列表**\n\npublic **List<Customer> findAll() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****查询所有记录**\n\n **Criteria** **criteria** **=** **session****.createCriteria(Customer.**class**);**\n\n **List<Customer>** **list** **=** **criteria****.list()****;**\n\n**//****提交事务**\n\n**tx****.commit();**\n\nreturn**list****;**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**// sessionFactory.close();**\n\n **}**\n\nreturnnull**;**\n\n **}**\n"]],[6581,7709],[6581,6581]]],[1569548974675,["GJX@GJXAIOU",[[-1,6604,"| \n\n**1** **一对多**\n\n**（1****）例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类**\n\n**（2****）客户和联系人是一对多关系**\n\n**-** **客户：与公司有业务往来，例如百度、新浪、360**\n\n**-** **联系人：公司里面的员工，百度里面有很多员工，联系员工**\n\n****** **公司和公司员工的关系**\n\n**-** **客户是一，联系人是多**\n\n**-** **一个客户里面有多个联系人，一个联系人只能属于一个客户**\n\n**（3****）一对多建表：通过外键建立关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)\n\n**2** **多对多**\n\n**（1****）例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单**\n\n**（2****）用户和角色多对多关系**\n\n**-** **用户：** **小王、小马、小宋**\n\n**-** **角色：总经理、秘书、司机、保安**\n\n****** **比如小王** **可以** **是总经理，可以是司机**\n\n****** **比如小宋** **可以是司机，可以是秘书，可以保安**\n\n****** **比如小马** **可以是** **秘书，可以是总经理**\n\n- **一个用户里面可以有多个角色，一个角色里面可以有多个用户**\n\n**（3****）多对多建表：创建第三张表维护关系**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)\n\n**3** **一对一**\n\n**（1****）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫**\n\n |"]],[6604,7417],[6604,6604]]],[1569548978510,["GJX@GJXAIOU",[[-1,6647,"| \n\n**以客户和联系人为例：客户是一，联系人是多**\n\n**第一步** **创建两个实体类，客户和联系人**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）在客户实体类里面表示多个联系人**\n\n**-** **一个客户里面有多个联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)\n\n**（2****）在联系人实体类里面表示所属客户**\n\n**-** **一个联系人只能属于一个客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）一般一个实体类对应一个映射文件**\n\n**（2****）把映射最基本配置完成**\n\n**（3****）在映射文件中，配置一对多关系**\n\n**-** **在客户映射文件中，表示所有联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)\n\n**-** **在联系人映射文件中，表示所属客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)\n\n**第四步** **创建核心配置文件，把映射文件引入到核心配置文件中**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n\n |\n"]],[6647,7532],[6647,6647]]],[1569548981427,["GJX@GJXAIOU",[[-1,6581,"\n"]],[6581,6581],[6580,6580]]],[1569548982826,["GJX@GJXAIOU",[[-1,6569,"\n"]],[6568,6569],[6568,6568]]],[1569548983500,["GJX@GJXAIOU",[[-1,6558,"\n"]],[6557,6557],[6556,6556]]],[1569548983965,["GJX@GJXAIOU",[[-1,6557,"\n"]],[6556,6556],[6555,6555]]],[1569548984707,["GJX@GJXAIOU",[[-1,6566,"\n"]],[6566,6566],[6565,6565]]],[1569548985810,["GJX@GJXAIOU",[[-1,6577," |"]],[6579,6579],[6577,6577]]],[1569548986403,["GJX@GJXAIOU",[[-1,6578,"\n"]],[6577,6577],[6576,6576]]],[1569548987108,["GJX@GJXAIOU",[[-1,6597,"\n"]],[6596,6596],[6595,6595]]],[1569548987315,["GJX@GJXAIOU",[[-1,6596,"\n"]],[6595,6595],[6594,6594]]],[1569548988498,["GJX@GJXAIOU",[[-1,6637,"\n"]],[6636,6636],[6635,6635]]],[1569548990922,["GJX@GJXAIOU",[[-1,6650,"| \n\n**级联操作**\n\n**1** **级联保存**\n\n**（1****）添加一个客户，为这个客户添加多个联系人**\n\n**2** **级联删除**\n\n**（1****）删除某一个客户，这个客户里面的所有的联系人也删除**\n\n |"]],[6650,6767],[6650,6650]]],[1569548992787,["GJX@GJXAIOU",[[-1,6665,"| \n\n**1** **需求：添加客户，为这个客户添加一个联系人**\n\n**（****1****）复杂写法：**\n\n**//****演示一对多级联保存**\n\n**@Test**\n"]],[6665,6754],[6665,6665]]],[1569549000965,["GJX@GJXAIOU",[[-1,6666,"publicvoid **testAddDemo1() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****传智播客****\"****);**\n\n**customer****.setCustLevel(****\"vip\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"lucy\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **需要在客户表示所有联系人，在联系人表示客户**\n\n**//** **即建立客户对象和联系人对象关系**\n\n**//2.1** **把联系人对象****放到客户对象的****set****集合里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//2.2** **把客户对象放到联系人里面**\n\n**linkman****.setCustomer(****customer****);**\n\n**//3** **保存到数据库**\n\n**session****.save(****customer****);**\n\n**session****.save(****linkman****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)\n\n**（****2****）简化写法**\n\n**-** **一般根据客户添加联系人**\n\n**第一步****在客户映射文件中进行配置**\n\n**-** **在客户映射文件里面****set****标签进行配置**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n**第二步****创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了**\n\n**//****演示一对多级联保存**\n\n**@Test**\n\npublicvoid **testAddDemo2() {**\n\n**SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//** **添加一个客户，为这个客户添加一个联系人**\n\n**//1** **创建客户和联系人对象**\n\n **Customer** **customer** **=** new **Customer();**\n\n**customer****.setCustName(****\"****百度****\"****);**\n\n**customer****.setCustLevel(****\"****普通客户****\"****);**\n\n**customer****.setCustSource(****\"****网络****\"****);**\n\n**customer****.setCustPhone(****\"110\"****);**\n\n**customer****.setCustMobile(****\"999\"****);**\n\n **LinkMan** **linkman** **=** new **LinkMan();**\n\n**linkman****.setLkm_name(****\"****小宏****\"****);**\n\n**linkman****.setLkm_gender(****\"****男****\"****);**\n\n**linkman****.setLkm_phone(****\"911\"****);**\n\n**//2** **把联系人放到客户里面**\n\n**customer****.getSetLinkMan().add(****linkman****);**\n\n**//3** **保存客户**\n\n**session****.save(****customer****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n |"]],[6666,10030],[6666,6666]]],[1569549002763,["GJX@GJXAIOU",[[-1,6667,"\n"]],[6666,6666],[6665,6665]]],[1569549003050,["GJX@GJXAIOU",[[-1,6666,"\n"]],[6665,6665],[6664,6664]]],[1569549003707,["GJX@GJXAIOU",[[-1,6651,"\n"]],[6650,6650],[6649,6649]]],[1569549003916,["GJX@GJXAIOU",[[-1,6650,"\n"]],[6649,6649],[6648,6648]]],[1569549007514,["GJX@GJXAIOU",[[-1,6677,"|  |\n| \n\n**1** **需求：删除某个客户，把客户里面所有的联系人删除**\n\n**2** **具体实现**\n\n**第一步** **在客户映射文件set****标签，进行配置**\n\n**（1****）使用属性cascade****属性值 delete**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**第二步** **在代码中直接删除客户（下面这段代码替换前面的自定义代码）**\n\n**（1****）根据id****查询对象，调用session****里面delete****方法删除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n**3** **执行过程：**\n\n**（1****）根据id****查询客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n**（2****）根据外键id****值查询联系人**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n**（3****）把联系人外键设置为null**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n**（4****）删除联系人和客户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n |\n"]],[6677,7520],[6677,6677]]],[1569549008277,["GJX@GJXAIOU",[[-1,6677,"\n"]],[6677,6677],[6676,6676]]],[1569549011123,["GJX@GJXAIOU",[[-1,6701,"| \n\n**1** **让lucy****联系人所属客户不是传智播客，而是百度**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n**2 inverse****属性**\n\n**（1****）因为hibernate****双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n**（2****）解决方式：让其中的“一”方不维护外键**\n\n**-** **一对多里面，让其中“一”方放弃外键维护**\n\n**-** **一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统**\n\n**（3****）具体实现：**\n\n**在放弃关系维护映射文件中（这里在 Custumer.hbn.xml****中），进行配置，在set****标签上使用inverse****属性**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n |"]],[6701,7306],[6701,6701]]],[1569549011800,["GJX@GJXAIOU",[[-1,6702,"\n"]],[6701,6701],[6700,6700]]],[1569549015090,["GJX@GJXAIOU",[[-1,6734,"| \n\n**以用户和角色为例演示**\n\n**第一步** **创建实体类，用户和角色**\n\n**第二步** **让两个实体类之间互相表示**\n\n**（1****）一个用户里面表示所有角色，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n**（2****）一个角色有多个用户，使用set****集合**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n**第三步** **配置映射关系**\n\n**（1****）基本配置**\n\n**（2****）配置多对多关系**\n\n**-** **在用户里面表示所有角色，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n**-** **在角色里面表示所有用户，使用set****标签**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n\n**第四步** **在核心配置文件中引入映射文件**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image056.jpg)\n\n**测试：**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image058.jpg)\n\n |"]],[6734,7616],[6734,6734]]],[1569549016051,["GJX@GJXAIOU",[[-1,6735,"\n"]],[6734,6734],[6733,6733]]],[1569549022562,["GJX@GJXAIOU",[[-1,6748,"| \n\n**根据用户保存角色**\n\n**第一步****在用户配置文件中****set****标签进行配置，****cascade****值****save-update****（****User****中）**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg)\n\n**第二步****写代码实现**\n\n**（****1****）创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了**\n\n**//****演示多对多修级联保存**\n\n**@Test**\n\npublicvoid **testSave() {**\n\n **SessionFactory** **sessionFactory** **=** null**;**\n\n **Session** **session** **=** null**;**\n\n **Transaction** **tx** **=** null**;**\n\ntry **{**\n\n**//****得到****sessionFactory**\n\n**sessionFactory** **= HibernateUtils._getSessionFactory_();**\n\n**//****得到****session**\n\n**session** **=** **sessionFactory****.openSession();**\n\n**//****开启事务**\n\n**tx** **=** **session****.beginTransaction();**\n\n**//****添加两个用户，为每个用户添加两个角色**\n\n**//1** **创建对象**\n\n **User** **user1** **=** new **User();**\n\n**user1****.setUser_name(****\"lucy\"****);**\n\n**user1****.setUser_password(****\"123\"****);**\n\n **User** **user2** **=** new **User();**\n\n**user2****.setUser_name(****\"mary\"****);**\n\n**user2****.setUser_password(****\"456\"****);**\n\n **Role** **r1** **=** new **Role();**\n\n**r1****.setRole_name(****\"****总经理****\"****);**\n\n**r1****.setRole_memo(****\"****总经理****\"****);**\n\n **Role** **r2** **=** new **Role();**\n\n**r2****.setRole_name(****\"****秘书****\"****);**\n\n**r2****.setRole_memo(****\"****秘书****\"****);**\n\n **Role** **r3** **=** new **Role();**\n\n**r3****.setRole_name(****\"****保安****\"****);**\n\n**r3****.setRole_memo(****\"****保安****\"****);**\n\n**//2** **建立关系****，****把角色放到用户里面**\n\n**// user1 -- r1/r2**\n\n**user1****.getSetRole().add(****r1****);**\n\n**user1****.getSetRole().add(****r2****);**\n\n**// user2 -- r2/r3**\n\n**user2****.getSetRole().add(****r2****);**\n\n**user2****.getSetRole().add(****r3****);**\n\n**//3** **保存用户**\n\n**session****.save(****user1****);**\n\n**session****.save(****user2****);**\n\n**//****提交事务**\n\n**tx****.commit();**\n\n **}**catch**(Exception** **e****) {**\n\n**tx****.rollback();**\n\n **}**finally **{**\n\n**session****.close();**\n\n**//sessionFactory****不需要关闭**\n\n**sessionFactory****.close();**\n\n **}**\n\n **}**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image062.jpg)\n\n |"]],[6748,8857],[6748,6748]]],[1569549023627,["GJX@GJXAIOU",[[-1,6749,"\n"]],[6748,6748],[6747,6747]]],[1569549026027,["GJX@GJXAIOU",[[-1,6766,"| \n\n**第一步** **在set****标签进行配置，cascade****值delete**\n\n**第二步** **删除用户**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg)\n\n |"]],[6766,7001],[6766,6766]]],[1569549026579,["GJX@GJXAIOU",[[-1,6767,"\n"]],[6766,6766],[6765,6765]]],[1569549031202,["GJX@GJXAIOU",[[-1,6781,"| \n\n**1** **用户和角色多对多关系，维护关系通过第三张表维护**\n\n**2** **让某个用户有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n**第二步** **把角色放到用户里面**\n\n**（1****）把角色对象放到用户使用set****集合**\n\n**3** **让某个用户没有某个角色**\n\n**第一步** **根据id****查询用户和角色**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image068.jpg)\n\n**第二步** **从用户里面把角色去掉**\n\n**（1****）从set****集合里面把角色移除**\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg)\n\n |"]],[6781,7199],[6781,6781]]],[1569549037083,["GJX@GJXAIOU",[[-1,6529,"# Hibernate_day03\n\n## 上节内容\n\n## 今天内容\n\n## 客户列表功能\n\n\n## 表与表之间关系回顾（重点）\n\n## Hibernate的一对多操作（重点）\n\n### 一对多映射配置（重点）\n\n### 一对多级联操作\n\n### 一对多级联保存\n\n\n### 一对多级联删除\n\n### 一对多修改操作（inverse属性）\n\n\n## Hibernate多对多操作\n\n### 多对多映射配置\n\n\n### 多对多级联保存\n\n\n### 多对多级联删除（了解）\n\n\n### 维护第三张表关系\n"]],[6529,6780],[6529,6529]]],[1569549056948,["GJX@GJXAIOU",[[-1,27,"Hibernate_day03"]],[27,42],[27,27]]],[1569549059491,["GJX@GJXAIOU",[[1,28,"**"],[1,32,"**"]],[28,32],[28,36]]],[1569549066902,["GJX@GJXAIOU",[[1,167,"**"],[1,171,"**"]],[167,171],[167,175]]],[1569549072292,["GJX@GJXAIOU",[[1,357,"## "]],[357,357],[366,366]]],[1569549078078,["GJX@GJXAIOU",[[1,1066,"## "]],[1066,1066],[1082,1082]]],[1569549082372,["GJX@GJXAIOU",[[1,1083,"### "]],[1083,1083],[1092,1092]]],[1569549093357,["GJX@GJXAIOU",[[-1,1083,"### "]],[1083,1087],[1083,1083]]],[1569549105691,["GJX@GJXAIOU",[[1,1529,"## "]],[1529,1529],[1551,1551]]],[1569549108404,["GJX@GJXAIOU",[[1,1552,"### "]],[1552,1552],[1567,1567]]],[1569549117987,["GJX@GJXAIOU",[[1,1848,"### "]],[1848,1848],[1859,1859]]],[1569549122340,["GJX@GJXAIOU",[[1,1932,"### "]],[1932,1932],[1943,1943]]],[1569549140851,["GJX@GJXAIOU",[[1,4208,"### "]],[4208,4208],[4219,4219]]],[1569549148491,["GJX@GJXAIOU",[[1,4448,"### "]],[4448,4448],[4470,4470]]],[1569549156871,["GJX@GJXAIOU",[[1,4746,"## "]],[4746,4746],[4763,4763]]],[1569549181187,["GJX@GJXAIOU",[[1,4764,"### "]],[4764,4764],[4775,4775]]],[1569549186636,["GJX@GJXAIOU",[[1,4983,"### "]],[4983,4983],[4994,4994]]],[1569549193811,["GJX@GJXAIOU",[[1,6333,"### "]],[6333,6333],[6348,6348]]],[1569549201939,["GJX@GJXAIOU",[[1,6393,"### "]],[6393,6393],[6405,6405]]],[1569549225490,["GJX@GJXAIOU",[[-1,37,"1 "]],[37,39],[37,37]]],[1569549225918,["GJX@GJXAIOU",[[1,37,"\n"]],[37,37],[38,38]]],[1569549227594,["GJX@GJXAIOU",[[-1,47,"2"]],[47,48],[47,47]]],[1569549227955,["GJX@GJXAIOU",[[-1,46,"\n"]],[47,47],[46,46]]],[1569549230083,["GJX@GJXAIOU",[[-1,46," "]],[47,47],[46,46]]],[1569549231890,["GJX@GJXAIOU",[[-1,63,"3"]],[63,64],[63,63]]],[1569549232330,["GJX@GJXAIOU",[[-1,62,"\n"]],[63,63],[62,62]]],[1569549234466,["GJX@GJXAIOU",[[-1,69,"（1）"]],[69,72],[69,69]]],[1569549236573,["GJX@GJXAIOU",[[-1,76,"（2）"]],[76,79],[76,76]]],[1569549237638,["GJX@GJXAIOU",[[-1,62," "]],[63,63],[62,62]]],[1569549241310,["GJX@GJXAIOU",[[-1,83,"\n4 "]],[83,85],[83,83]]],[1569549244691,["GJX@GJXAIOU",[[-1,98,"\n5 "]],[98,100],[98,98]]],[1569549246498,["GJX@GJXAIOU",[[-1,113,"（1）"]],[113,116],[113,113]]],[1569549248546,["GJX@GJXAIOU",[[-1,122,"\n6 "]],[122,125],[122,122]]],[1569549253276,["GJX@GJXAIOU",[[-1,37,"\n"]],[37,37],[36,36]]],[1569549256691,["GJX@GJXAIOU",[[1,37,"* "],[1,45,"* "],[1,61,"* "],[1,67,"* "],[1,74,"* "],[1,82,"* "],[1,97,"* "],[1,112,"* "],[1,121,"* "]],[37,140],[39,158]]],[1569549265154,["GJX@GJXAIOU",[[1,73,"  "]],[74,74],[76,76]]],[1569549275131,["GJX@GJXAIOU",[[1,84,"  "]],[86,86],[88,88]]],[1569549278670,["GJX@GJXAIOU",[[1,130,"  "]],[132,132],[134,134]]],[1569549290277,["GJX@GJXAIOU",[[-1,27,"\n"]],[27,27],[26,26]]],[1569549290411,["GJX@GJXAIOU",[[-1,26,"\n"]],[26,26],[25,25]]],[1569549293218,["GJX@GJXAIOU",[[1,163,"\n"]],[163,163],[164,164]]],[1569549301139,["GJX@GJXAIOU",[[-1,173,"0 "]],[173,175],[173,173]]],[1569549301379,["GJX@GJXAIOU",[[1,173,"\n"]],[173,173],[174,174]]],[1569549301906,["GJX@GJXAIOU",[[1,174,"- "]],[174,174],[176,176]]],[1569549304854,["GJX@GJXAIOU",[[-1,184,"1 "]],[184,186],[184,184]]],[1569549305421,["GJX@GJXAIOU",[[-1,183,"\n"]],[184,184],[183,183]]],[1569549307157,["GJX@GJXAIOU",[[1,183,"- "]],[183,183],[185,185]]],[1569549311590,["GJX@GJXAIOU",[[-1,195,"（1）"]],[195,197],[195,195]]],[1569549313280,["GJX@GJXAIOU",[[1,195,"  - "]],[195,195],[199,199]]],[1569549315654,["GJX@GJXAIOU",[[-1,211,"（2）"]],[214,214],[211,211]]],[1569549316957,["GJX@GJXAIOU",[[1,211,"- "]],[211,211],[213,213]]],[1569549317762,["GJX@GJXAIOU",[[1,211,"  "]],[213,213],[215,215]]],[1569549443218,["GJX@GJXAIOU",[[-1,227,"2"]],[227,228],[227,227]]],[1569549443654,["GJX@GJXAIOU",[[-1,226,"\n"]],[227,227],[226,226]]],[1569549444669,["GJX@GJXAIOU",[[1,226,"-"]],[226,226],[227,227]]],[1569549609610,["GJX@GJXAIOU",[[-1,289,"\n3 "]],[289,292],[289,289]]],[1569549610344,["GJX@GJXAIOU",[[1,289,"- "]],[289,289],[291,291]]],[1569549621917,["GJX@GJXAIOU",[[1,243,"- "],[1,254,"- "],[1,265,"- "],[1,276,"- "]],[243,288],[245,296]]],[1569549624482,["GJX@GJXAIOU",[[1,243,"  "],[1,256,"  "],[1,269,"  "],[1,282,"  "]],[245,296],[247,304]]],[1569549631466,["GJX@GJXAIOU",[[-1,247,"（1）"]],[247,250],[247,247]]],[1569549633690,["GJX@GJXAIOU",[[-1,259,"（2）"]],[259,262],[259,259]]],[1569549635546,["GJX@GJXAIOU",[[-1,271,"（3）"]],[271,274],[271,271]]],[1569549638906,["GJX@GJXAIOU",[[-1,283,"（4）"]],[283,286],[283,283]]],[1569549645250,["GJX@GJXAIOU",[[1,310,"- "],[1,321,"- "],[1,336,"- "],[1,347,"- "]],[310,356],[312,364]]],[1569549646626,["GJX@GJXAIOU",[[1,310,"  "],[1,323,"  "],[1,340,"  "],[1,353,"  "]],[312,364],[314,372]]],[1569549650153,["GJX@GJXAIOU",[[-1,314,"（1）"]],[315,317],[314,314]]],[1569549652035,["GJX@GJXAIOU",[[-1,326,"（2）"]],[326,329],[326,326]]],[1569549653716,["GJX@GJXAIOU",[[-1,342,"（3）"]],[342,345],[342,342]]],[1569549655267,["GJX@GJXAIOU",[[-1,354,"（4）"]],[354,357],[354,354]]],[1569549666295,["GJX@GJXAIOU",[[-1,372,"1 "]],[372,374],[372,372]]],[1569549666466,["GJX@GJXAIOU",[[1,372,"\n"]],[372,372],[373,373]]],[1569549670398,["GJX@GJXAIOU",[[1,373,"- "]],[373,373],[375,375]]],[1569549701143,["GJX@GJXAIOU",[[1,1075,"一、"]],[1075,1075],[1077,1077]]],[1569549713099,["GJX@GJXAIOU",[[-1,1091,"1 "],[1,1093,"\n"]],[1091,1093],[1092,1092]]],[1569549713661,["GJX@GJXAIOU",[[1,1092,"- "]],[1092,1092],[1094,1094]]],[1569551234216,["GJX@GJXAIOU",[[-1,1153,"- "]],[1153,1155],[1153,1153]]],[1569551235606,["GJX@GJXAIOU",[[-1,1177,"- "]],[1177,1179],[1177,1177]]],[1569551245588,["GJX@GJXAIOU",[[-1,1204,"** 公司和公司员工的关系"]],[1204,1217],[1204,1204]]],[1569551252244,["GJX@GJXAIOU",[[-1,1205,"\n"]],[1206,1206],[1205,1205]]],[1569551252641,["GJX@GJXAIOU",[[-1,1204,"\n"]],[1205,1205],[1204,1204]]],[1569551258292,["GJX@GJXAIOU",[[-1,1137,"（2）"]],[1137,1140],[1137,1137]]],[1569551259265,["GJX@GJXAIOU",[[1,1137,"  - "]],[1137,1137],[1141,1141]]],[1569551261984,["GJX@GJXAIOU",[[-1,1098,"（1）"]],[1098,1101],[1098,1098]]],[1569551262563,["GJX@GJXAIOU",[[1,1098,"- "]],[1098,1098],[1100,1100]]],[1569551263981,["GJX@GJXAIOU",[[1,1098,"  "]],[1098,1098],[1100,1100]]],[1569551265689,["GJX@GJXAIOU",[[-1,1137,"\n"]],[1137,1137],[1136,1136]]],[1569551291260,["GJX@GJXAIOU",[[-1,1248,"（3）"]],[1248,1251],[1248,1248]]],[1569551292062,["GJX@GJXAIOU",[[1,1248,"- "]],[1248,1248],[1250,1250]]],[1569551297345,["GJX@GJXAIOU",[[1,1248,"  "]],[1248,1248],[1250,1250]]],[1569551299964,["GJX@GJXAIOU",[[-1,1247,"\n"]],[1247,1247],[1246,1246]]],[1569551302203,["GJX@GJXAIOU",[[1,1205,"    "]],[1205,1205],[1209,1209]]],[1569551303528,["GJX@GJXAIOU",[[1,1222,"    "]],[1222,1222],[1226,1226]]],[1569551313964,["GJX@GJXAIOU",[[1,1259,"**"],[1,1273,"**"]],[1259,1273],[1259,1277]]],[1569551319137,["GJX@GJXAIOU",[[-1,1170,"、新浪、360"]],[1177,1177],[1170,1170]]],[1569551322919,["GJX@GJXAIOU",[[1,1170,"、新浪；"]],[1170,1170],[1174,1174]]],[1569551326019,["GJX@GJXAIOU",[[1,1201,"；"]],[1201,1201],[1202,1202]]],[1569551405481,["GJX@GJXAIOU",[[-1,1279,"2"]],[1279,1280],[1279,1279]]],[1569551405717,["GJX@GJXAIOU",[[1,1279,"-"]],[1279,1279],[1280,1280]]],[1569551407737,["GJX@GJXAIOU",[[-1,1278,"\n"]],[1278,1278],[1277,1277]]],[1569551413177,["GJX@GJXAIOU",[[-1,1284,"（1）"]],[1284,1287],[1284,1284]]],[1569551414405,["GJX@GJXAIOU",[[1,1284,"- "]],[1284,1284],[1286,1286]]],[1569551414802,["GJX@GJXAIOU",[[1,1284,"  "]],[1286,1286],[1288,1288]]],[1569551418292,["GJX@GJXAIOU",[[-1,1322,"（2）"]],[1322,1325],[1322,1322]]],[1569551418817,["GJX@GJXAIOU",[[-1,1321,"\n"]],[1322,1322],[1321,1321]]],[1569551420486,["GJX@GJXAIOU",[[1,1321,"  - "]],[1321,1321],[1325,1325]]],[1569551422489,["GJX@GJXAIOU",[[1,1336,"    "]],[1338,1338],[1342,1342]]],[1569551423626,["GJX@GJXAIOU",[[1,1355,"    "]],[1357,1357],[1361,1361]]],[1569551426232,["GJX@GJXAIOU",[[-1,1377,"**"],[1,1379,"  "]],[1377,1379],[1379,1379]]],[1569551427393,["GJX@GJXAIOU",[[1,1402,"  "]],[1402,1402],[1404,1404]]],[1569551428897,["GJX@GJXAIOU",[[-1,1399,"**"]],[1399,1403],[1401,1401]]],[1569551430043,["GJX@GJXAIOU",[[-1,1424,"**"],[1,1426," "]],[1424,1427],[1426,1426]]],[1569551433560,["GJX@GJXAIOU",[[-1,1401," "]],[1402,1402],[1401,1401]]],[1569551436276,["GJX@GJXAIOU",[[-1,1379," "]],[1379,1380],[1379,1379]]],[1569551440641,["GJX@GJXAIOU",[[-1,1443,"-"]],[1443,1444],[1443,1443]]],[1569551440919,["GJX@GJXAIOU",[[1,1443,"-"]],[1443,1443],[1444,1444]]],[1569551447624,["GJX@GJXAIOU",[[-1,1443,"-\t"]],[1445,1445],[1443,1443]]],[1569551453692,["GJX@GJXAIOU",[[1,1443,"  - "]],[1443,1443],[1447,1447]]],[1569551455690,["GJX@GJXAIOU",[[1,1445,"  "]],[1447,1447],[1449,1449]]],[1569551461778,["GJX@GJXAIOU",[[-1,1477,"\n（3）"]],[1477,1481],[1477,1477]]],[1569551462517,["GJX@GJXAIOU",[[1,1477,"- "]],[1477,1477],[1479,1479]]],[1569551466426,["GJX@GJXAIOU",[[1,1479,"**"],[1,1495,"**"]],[1479,1495],[1479,1499]]],[1569551483108,["GJX@GJXAIOU",[[-1,1503,"3 "]],[1503,1505],[1503,1503]]],[1569551483499,["GJX@GJXAIOU",[[1,1503,"- "]],[1503,1503],[1505,1505]]],[1569551484516,["GJX@GJXAIOU",[[-1,1502,"\n"]],[1502,1502],[1501,1501]]],[1569551490641,["GJX@GJXAIOU",[[1,1477,"  "]],[1478,1478],[1480,1480]]],[1569551538312,["GJX@GJXAIOU",[[-1,1510,"（1）在中国，一个男人只能有一个妻子，一个女人只能有一个丈夫"]],[1513,1540],[1510,1510]]],[1569551541204,["GJX@GJXAIOU",[[1,1510,"  - 学生"]],[1510,1510],[1516,1516]]],[1569551541802,["GJX@GJXAIOU",[[-1,1514,"学生"]],[1516,1516],[1514,1514]]],[1569551552204,["GJX@GJXAIOU",[[1,1514,"例如学生与班级关系，学生"]],[1514,1514],[1526,1526]]],[1569551560841,["GJX@GJXAIOU",[[1,1526,"只能鼠疫"]],[1526,1526],[1530,1530]]],[1569551584560,["GJX@GJXAIOU",[[-1,1519,"班级"]],[1521,1521],[1519,1519]]],[1569551586140,["GJX@GJXAIOU",[[1,1519,"班长"]],[1519,1519],[1521,1521]]],[1569551598932,["GJX@GJXAIOU",[[-1,1516,"学生与班长关系，学生只能鼠疫"]],[1516,1530],[1516,1516]]],[1569551611053,["GJX@GJXAIOU",[[1,1516,"班级与班长之间的关系，一个班级只能有一个"]],[1516,1516],[1536,1536]]],[1569551628836,["GJX@GJXAIOU",[[1,1536,"班长，一个班长只能在一个班级任职；"]],[1536,1536],[1553,1553]]],[1569551640369,["GJX@GJXAIOU",[[1,1558,"二 "]],[1558,1558],[1559,1559]]],[1569551640819,["GJX@GJXAIOU",[[1,1559,"、"]],[1559,1559],[1560,1560]]],[1569551641802,["GJX@GJXAIOU",[[-1,1559,"、"]],[1560,1560],[1559,1559]]],[1569551643263,["GJX@GJXAIOU",[[-1,1559," "],[1,1560,"、"]],[1559,1559],[1560,1560]]],[1569551649216,["GJX@GJXAIOU",[[1,1580,"\n"]],[1580,1580],[1581,1581]]],[1569551651670,["GJX@GJXAIOU",[[1,1585,"（）"]],[1585,1585],[1587,1587]]],[1569551653117,["GJX@GJXAIOU",[[1,1586,"一"]],[1586,1586],[1587,1587]]],[1569551658515,["GJX@GJXAIOU",[[1,1600,"\n"]],[1600,1600],[1601,1601]]],[1569551662797,["GJX@GJXAIOU",[[1,1623,"- "]],[1623,1623],[1625,1625]]],[1569551664889,["GJX@GJXAIOU",[[-1,1628," "]],[1629,1629],[1628,1628]]],[1569551665499,["GJX@GJXAIOU",[[1,1628,"："]],[1628,1628],[1629,1629]]],[1569551701604,["GJX@GJXAIOU",[[-1,1276," "],[1,1277,"\n"]],[1277,1277],[1277,1277]]],[1569551708809,["GJX@GJXAIOU",[[1,1276,"![一对多建表示例]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)"]],[1276,1276],[1366,1366]]],[1569551726442,["GJX@GJXAIOU",[[-1,1591," "],[1,1592,"\n"]],[1592,1592],[1592,1592]]],[1569551735185,["GJX@GJXAIOU",[[1,1592,"![多对多建表示例]($resource/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)"]],[1592,1592],[1682,1682]]],[1569551737574,["GJX@GJXAIOU",[[1,1682,"\n"]],[1681,1681],[1682,1682]]],[1569552655874,["GJX@GJXAIOU",[[1,1823,"```"]],[1823,1823],[1826,1826]]],[1569552655914,["GJX@GJXAIOU",[[1,1826,"language\n```\n"]],[1826,1826],[1826,1834]]],[1569552657116,["GJX@GJXAIOU",[[-1,1826,"language"],[1,1834,"j"]],[1826,1834],[1827,1827]]],[1569552657423,["GJX@GJXAIOU",[[1,1827,"a"]],[1827,1827],[1828,1828]]],[1569552658112,["GJX@GJXAIOU",[[-1,1826,"ja"]],[1828,1828],[1826,1826]]],[1569552662427,["GJX@GJXAIOU",[[1,1826,"custom"]],[1826,1826],[1832,1832]]],[1569552893836,["GJX@GJXAIOU",[[-1,1826,"custom"],[1,1832,"C"]],[1826,1832],[1827,1827]]],[1569552898677,["GJX@GJXAIOU",[[1,1827,"ustomer_java"]],[1827,1827],[1839,1839]]],[1569552898872,["GJX@GJXAIOU",[[1,1840,"\n"]],[1839,1839],[1840,1840]]],[1569552901982,["GJX@GJXAIOU",[[1,1840,"@Setter\n@Getter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Customer {\n\tprivate Integer cid;\n\tprivate String custName;\n\tprivate String custLevel;\n\tprivate String custSource;\n\tprivate String custPhone;\n\tprivate String custMobile;\n\t/**\n\t * 在客户实体类里面表示多个联系人，一个客户有多个联系人\n\t * hibernate要求使用集合表示多的数据，使用set集合\n\t */\n\tprivate Set<LinkMan> setLinkMan = new HashSet<LinkMan>();\n}"]],[1840,1840],[2222,2222]]],[1569552908841,["GJX@GJXAIOU",[[1,2228,"\n"]],[2226,2226],[2227,2227]]],[1569552915817,["GJX@GJXAIOU",[[1,2229,"\n"]],[2227,2227],[2228,2228]]],[1569552916797,["GJX@GJXAIOU",[[1,2228,"···"]],[2228,2228],[2231,2231]]],[1569552918026,["GJX@GJXAIOU",[[-1,2228,"···"]],[2231,2231],[2228,2228]]],[1569552919018,["GJX@GJXAIOU",[[1,2228,"```"]],[2228,2228],[2231,2231]]],[1569552919055,["GJX@GJXAIOU",[[1,2231,"language\n```\n"]],[2231,2231],[2231,2239]]],[1569552920626,["GJX@GJXAIOU",[[-1,2231,"language"],[1,2239,"L"]],[2231,2239],[2232,2232]]],[1569552924233,["GJX@GJXAIOU",[[1,2232,"inkMan_java"]],[2232,2232],[2243,2243]]],[1569552924906,["GJX@GJXAIOU",[[1,2244,"\n"]],[2243,2243],[2244,2244]]],[1569552937577,["GJX@GJXAIOU",[[1,2244,"@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class LinkMan {\n\tprivate Integer lkm_id;\n\tprivate String lkm_name;\n\tprivate String lkm_gender;\n\tprivate String lkm_phone;\n\t/**\n\t *  在联系人实体类里面表示所属客户,一个联系人只能属于一个客户\n\t */\n\tprivate Customer customer;\n}"]],[2244,2244],[2512,2512]]],[1569552974176,["GJX@GJXAIOU",[[-1,2518,"\n"]],[2518,2518],[2517,2517]]],[1569552979114,["GJX@GJXAIOU",[[1,2570,"··"]],[2570,2570],[2572,2572]]],[1569552980600,["GJX@GJXAIOU",[[-1,2570,"··"]],[2572,2572],[2570,2570]]],[1569552981422,["GJX@GJXAIOU",[[1,2570,"``"]],[2570,2570],[2572,2572]]],[1569552983463,["GJX@GJXAIOU",[[1,2571,"<>"]],[2571,2571],[2573,2573]]],[1569552984106,["GJX@GJXAIOU",[[-1,2571,"<>"]],[2573,2573],[2571,2571]]],[1569552991832,["GJX@GJXAIOU",[[1,2571,"private Set<LinkMan> setLinkMan = new HashSet<LinkMan>();"]],[2571,2571],[2628,2628]]],[1569552995797,["GJX@GJXAIOU",[[1,2570,"xu"]],[2570,2570],[2572,2572]]],[1569552996456,["GJX@GJXAIOU",[[-1,2569," xu"]],[2572,2572],[2569,2569]]],[1569553003944,["GJX@GJXAIOU",[[1,2569,"需要在 Customershi"]],[2569,2569],[2584,2584]]],[1569553005065,["GJX@GJXAIOU",[[-1,2581,"shi"]],[2584,2584],[2581,2581]]],[1569553009084,["GJX@GJXAIOU",[[1,2581," 实体类中添加"]],[2581,2581],[2588,2588]]],[1569553016675,["GJX@GJXAIOU",[[1,2647," 以及队形"]],[2647,2647],[2652,2652]]],[1569553017391,["GJX@GJXAIOU",[[-1,2650,"队形"]],[2652,2652],[2650,2650]]],[1569553037766,["GJX@GJXAIOU",[[1,2650,"对应的 get、set 方法，完整的代码见上面；"]],[2650,2650],[2674,2674]]],[1569553053826,["GJX@GJXAIOU",[[1,2712,"``"]],[2712,2712],[2714,2714]]],[1569553055170,["GJX@GJXAIOU",[[1,2713,"private Customer customer;"]],[2713,2713],[2739,2739]]],[1569553061837,["GJX@GJXAIOU",[[1,2711,"在LinkMan"]],[2711,2711],[2719,2719]]],[1569553061875,["GJX@GJXAIOU",[[1,2712," "]],[2719,2719],[2720,2720]]],[1569553064868,["GJX@GJXAIOU",[[1,2720,"实体类"]],[2720,2720],[2723,2723]]],[1569553064907,["GJX@GJXAIOU",[[1,2720," "]],[2723,2723],[2724,2724]]],[1569553066328,["GJX@GJXAIOU",[[1,2724,"中添加"]],[2724,2724],[2727,2727]]],[1569553073623,["GJX@GJXAIOU",[[1,2756,"以及对应的 get、set 方法，完整的代码见上面；"]],[2756,2756],[2782,2782]]],[1569553074768,["GJX@GJXAIOU",[[1,2755," "]],[2755,2755],[2756,2756]]],[1569553076338,["GJX@GJXAIOU",[[-1,2755," "]],[2756,2756],[2755,2755]]],[1569553077276,["GJX@GJXAIOU",[[1,2756," "]],[2756,2756],[2757,2757]]],[1569553083030,["GJX@GJXAIOU",[[1,2518,"- "]],[2518,2518],[2520,2520]]],[1569553087015,["GJX@GJXAIOU",[[-1,2537,"（1）"]],[2537,2540],[2537,2537]]],[1569553088050,["GJX@GJXAIOU",[[1,2537,"  - "]],[2537,2537],[2541,2541]]],[1569553090952,["GJX@GJXAIOU",[[1,2557,"    "]],[2559,2559],[2563,2563]]],[1569553098857,["GJX@GJXAIOU",[[-1,2683,"（2）"]],[2683,2686],[2683,2683]]],[1569553099282,["GJX@GJXAIOU",[[1,2683,"- "]],[2683,2683],[2685,2685]]],[1569553102448,["GJX@GJXAIOU",[[-1,2701,"- "]],[2701,2703],[2701,2701]]],[1569553102887,["GJX@GJXAIOU",[[-1,2700,"\n"]],[2701,2701],[2700,2700]]],[1569553104047,["GJX@GJXAIOU",[[1,2700,"："]],[2700,2700],[2701,2701]]],[1569553107936,["GJX@GJXAIOU",[[-1,2557,"    - "]],[2557,2563],[2557,2557]]],[1569553108247,["GJX@GJXAIOU",[[-1,2556,"\n"]],[2557,2557],[2556,2556]]],[1569553109390,["GJX@GJXAIOU",[[1,2556,"："]],[2556,2556],[2557,2557]]],[1569553111521,["GJX@GJXAIOU",[[1,2677,"  "]],[2677,2677],[2679,2679]]],[1569553155243,["GJX@GJXAIOU",[[1,2785,"- "]],[2785,2785],[2787,2787]]],[1569553162371,["GJX@GJXAIOU",[[-1,2798,"（1）"]],[2798,2801],[2798,2798]]],[1569553162657,["GJX@GJXAIOU",[[1,2798,"-"]],[2798,2798],[2799,2799]]],[1569553163275,["GJX@GJXAIOU",[[-1,2798,"-"]],[2799,2799],[2798,2798]]],[1569553166584,["GJX@GJXAIOU",[[-1,2790," "]],[2791,2791],[2790,2790]]],[1569553167134,["GJX@GJXAIOU",[[1,2790,"："]],[2790,2790],[2791,2791]]],[1569553170608,["GJX@GJXAIOU",[[-1,2814,"（2）"]],[2814,2817],[2814,2814]]],[1569553171920,["GJX@GJXAIOU",[[1,2814,"首先"]],[2814,2814],[2816,2816]]],[1569553175472,["GJX@GJXAIOU",[[-1,2827,"\n（3）"]],[2827,2831],[2827,2827]]],[1569553175816,["GJX@GJXAIOU",[[-1,2826,"\n"]],[2827,2827],[2826,2826]]],[1569553179003,["GJX@GJXAIOU",[[1,2826,"，然后"]],[2826,2826],[2829,2829]]],[1569553183456,["GJX@GJXAIOU",[[1,2814,"**"],[1,2843,"**"]],[2814,2843],[2814,2847]]],[1569553318293,["GJX@GJXAIOU",[[1,2867,"```"]],[2867,2867],[2870,2870]]],[1569553318333,["GJX@GJXAIOU",[[1,2870,"language\n```\n"]],[2870,2870],[2870,2878]]],[1569553324083,["GJX@GJXAIOU",[[-1,2870,"language"],[1,2878,"C"]],[2870,2878],[2871,2871]]],[1569553332410,["GJX@GJXAIOU",[[1,2871,"ustomer_hbm_xml"]],[2871,2871],[2886,2886]]],[1569553332864,["GJX@GJXAIOU",[[1,2887,"\n"]],[2886,2886],[2887,2887]]],[1569553336533,["GJX@GJXAIOU",[[1,2887,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC \n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping>\n\t<class name=\"cn.itcast.entity.Customer\" table=\"t_customer\">\n\t\t<id name=\"cid\" column=\"cid\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"custName\" column=\"custName\"></property>\n\t\t<property name=\"custLevel\" column=\"custLevel\"></property>\n\t\t<property name=\"custSource\" column=\"custSource\"></property>\n\t\t<property name=\"custPhone\" column=\"custPhone\"></property>\n\t\t<property name=\"custMobile\" column=\"custMobile\"></property>\n\t\t\n\t\t<!-- 在客户映射文件中，使用 set 标签表示所有联系人 \n\t\t\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称\t\t\t     \n\t\t\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n\t\t-->\n\t\t<set name=\"setLinkMan\" inverse=\"true\">\n\t\t\t<!-- 一对多建表，需要外键建立关系\n\t\t\t\thibernate机制：双向维护外键，在一和多那一方都配置外键\t\n\t\t\t\tcolumn属性值：外键名称\n\t\t\t -->\n\t\t\t<key column=\"clid\"></key>\n\t\t\t<!-- 客户所有的联系人，class里面写联系人实体类全路径 -->\n\t\t\t<one-to-many class=\"cn.itcast.entity.LinkMan\"/>\n\t\t</set>\n\t</class>\n</hibernate-mapping>"]],[2887,2887],[3960,3960]]],[1569553350497,["GJX@GJXAIOU",[[-1,3107,"cnitcast."]],[3116,3116],[3107,3107]]],[1569553351608,["GJX@GJXAIOU",[[1,3107,"com"]],[3107,3107],[3110,3110]]],[1569553353115,["GJX@GJXAIOU",[[1,3111,"."]],[3110,3110],[3111,3111]]],[1569553354425,["GJX@GJXAIOU",[[1,3111,"gjxaiou"]],[3111,3111],[3118,3118]]],[1569553364295,["GJX@GJXAIOU",[[-1,3895,"cnitcast."]],[3904,3904],[3895,3895]]],[1569553365250,["GJX@GJXAIOU",[[1,3895,"com"]],[3895,3895],[3898,3898]]],[1569553365852,["GJX@GJXAIOU",[[1,3899,"."]],[3898,3898],[3899,3899]]],[1569553367389,["GJX@GJXAIOU",[[1,3899,"gjxaiou"]],[3899,3899],[3906,3906]]],[1569553372767,["GJX@GJXAIOU",[[-1,3971,"\n"]],[3971,3971],[3970,3970]]],[1569553400770,["GJX@GJXAIOU",[[1,3991,"··"]],[3991,3991],[3993,3993]]],[1569553401849,["GJX@GJXAIOU",[[-1,3991,"··"]],[3993,3993],[3991,3991]]],[1569553403781,["GJX@GJXAIOU",[[1,3991,"```j"]],[3991,3991],[3995,3995]]],[1569553405542,["GJX@GJXAIOU",[[-1,3990," ```j"]],[3995,3995],[3990,3990]]],[1569553406500,["GJX@GJXAIOU",[[1,3990,"```"]],[3990,3990],[3993,3993]]],[1569553406540,["GJX@GJXAIOU",[[1,3993,"language\n```\n"]],[3993,3993],[3993,4001]]],[1569553437154,["GJX@GJXAIOU",[[-1,3993,"language"]],[3993,4001],[3993,3993]]],[1569553440981,["GJX@GJXAIOU",[[1,3993,"LinkMan_j"]],[3993,3993],[4002,4002]]],[1569553441943,["GJX@GJXAIOU",[[-1,4001,"j"]],[4002,4002],[4001,4001]]],[1569553445113,["GJX@GJXAIOU",[[1,4001,"hbm_java"]],[4001,4001],[4009,4009]]],[1569553445515,["GJX@GJXAIOU",[[1,4010,"\n"]],[4009,4009],[4010,4010]]],[1569553448362,["GJX@GJXAIOU",[[1,4010,"<!-- 表示联系人所属客户 \n\t\t\tname属性：因为在联系人实体类使用customer对象表示，写customer名称\n\t\t\tclass属性：customer全路径\n\t\t\tcolumn属性：外键名称\n\t\t-->\n\t\t<many-to-one name=\"customer\" class=\"cn.itcast.entity.Customer\" column=\"clid\"></many-to-one>"]],[4010,4010],[4211,4211]]],[1569553453961,["GJX@GJXAIOU",[[1,4010,"        "]],[4010,4010],[4018,4018]]],[1569553461535,["GJX@GJXAIOU",[[-1,4016,"  "],[-1,4034,"\t"],[-1,4080,"\t"],[-1,4105,"\t"],[-1,4121,"\t"],[-1,4126,"\t"]],[4013,4219],[4011,4212]]],[1569553462015,["GJX@GJXAIOU",[[-1,4014,"  "],[-1,4032,"\t"],[-1,4077,"\t"],[-1,4100,"\t"],[-1,4115,"\t"],[-1,4120,"\t"]],[4011,4212],[4010,4205]]],[1569553471504,["GJX@GJXAIOU",[[-1,4156,"ast"]],[4159,4159],[4156,4156]]],[1569553474311,["GJX@GJXAIOU",[[-1,4151,"nitc."]],[4156,4156],[4151,4151]]],[1569553475653,["GJX@GJXAIOU",[[1,4151,"om"]],[4151,4151],[4153,4153]]],[1569553476109,["GJX@GJXAIOU",[[1,4154,"."]],[4153,4153],[4154,4154]]],[1569553477049,["GJX@GJXAIOU",[[1,4154,"gjs"]],[4154,4154],[4157,4157]]],[1569553477544,["GJX@GJXAIOU",[[-1,4156,"s"]],[4157,4157],[4156,4156]]],[1569553478221,["GJX@GJXAIOU",[[1,4156,"xaiou"]],[4156,4156],[4161,4161]]],[1569553484311,["GJX@GJXAIOU",[[-1,4010,"    "]],[4010,4014],[4010,4010]]],[1569553486700,["GJX@GJXAIOU",[[1,4010,"\n"]],[4009,4009],[4010,4010]]],[1569553487722,["GJX@GJXAIOU",[[1,4010,"<>"]],[4010,4010],[4012,4012]]],[1569553492002,["GJX@GJXAIOU",[[1,4011,"!----"]],[4011,4011],[4016,4016]]],[1569553502004,["GJX@GJXAIOU",[[1,4014,"前面的基础配置同上，省略"]],[4014,4014],[4026,4026]]],[1569553518392,["GJX@GJXAIOU",[[1,4230,"- "]],[4230,4230],[4232,4232]]],[1569553519423,["GJX@GJXAIOU",[[-1,4229,"\n"]],[4229,4229],[4228,4228]]],[1569553524295,["GJX@GJXAIOU",[[1,2848,"  "]],[2848,2848],[2850,2850]]],[1569553529938,["GJX@GJXAIOU",[[1,3973,"  "]],[3973,3973],[3975,3975]]],[1569553693810,["GJX@GJXAIOU",[[1,4265,"    "]],[4265,4265],[4269,4269]]],[1569553697466,["GJX@GJXAIOU",[[1,4264,"`"],[1,4269,"`"]],[4264,4269],[4264,4271]]],[1569553697848,["GJX@GJXAIOU",[[1,4265,"`"],[1,4270,"`"]],[4264,4271],[4264,4273]]],[1569553699075,["GJX@GJXAIOU",[[1,4266,"`"],[1,4271,"`"]],[4264,4273],[4264,4275]]],[1569553703902,["GJX@GJXAIOU",[[-1,4266,"`"]],[4267,4267],[4266,4266]]],[1569553707031,["GJX@GJXAIOU",[[-1,4264,"``     ```"]],[4264,4274],[4264,4264]]],[1569553707947,["GJX@GJXAIOU",[[1,4264,"```"]],[4264,4264],[4267,4267]]],[1569553707989,["GJX@GJXAIOU",[[1,4267,"language\n```\n"]],[4267,4267],[4267,4275]]],[1569553709578,["GJX@GJXAIOU",[[-1,4267,"language"],[1,4275,"x"]],[4267,4275],[4268,4268]]],[1569553717978,["GJX@GJXAIOU",[[-1,4267,"x"]],[4268,4268],[4267,4267]]],[1569553724438,["GJX@GJXAIOU",[[1,4267,"hibernate_cfg+"]],[4267,4267],[4281,4281]]],[1569553725175,["GJX@GJXAIOU",[[-1,4280,"+"]],[4281,4281],[4280,4280]]],[1569553726914,["GJX@GJXAIOU",[[1,4280,"_xml"]],[4280,4280],[4284,4284]]],[1569553727207,["GJX@GJXAIOU",[[1,4285,"\n"]],[4284,4284],[4285,4285]]],[1569553730452,["GJX@GJXAIOU",[[1,4285,"<!-- 第三部分： 把映射文件放到核心配置文件中 必须的-->\n\t\t<mapping resource=\"cn/itcast/entity/Customer.hbm.xml\"/>\n\t\t<mapping resource=\"cn/itcast/entity/LinkMan.hbm.xml\"/>"]],[4285,4285],[4432,4432]]],[1569553735800,["GJX@GJXAIOU",[[-1,4319,"\t"],[-1,4376,"\t"]],[4319,4432],[4318,4430]]],[1569553736183,["GJX@GJXAIOU",[[-1,4318,"\t"],[-1,4375,"\t"]],[4318,4430],[4318,4428]]],[1569553740282,["GJX@GJXAIOU",[[-1,4340,"itcast"]],[4346,4346],[4340,4340]]],[1569553743458,["GJX@GJXAIOU",[[1,4340,"gjxaiou"]],[4340,4340],[4347,4347]]],[1569553746590,["GJX@GJXAIOU",[[-1,4397,"itcast"]],[4403,4403],[4397,4397]]],[1569553748546,["GJX@GJXAIOU",[[1,4397,"gjxaiou"]],[4397,4397],[4404,4404]]],[1569553750994,["GJX@GJXAIOU",[[-1,4394,"cn"]],[4396,4396],[4394,4394]]],[1569553751721,["GJX@GJXAIOU",[[1,4394,"com"]],[4394,4394],[4397,4397]]],[1569553753466,["GJX@GJXAIOU",[[-1,4337,"cn"]],[4339,4339],[4337,4337]]],[1569553754490,["GJX@GJXAIOU",[[1,4337,"com"]],[4337,4337],[4340,4340]]],[1569554225839,["GJX@GJXAIOU",[[-1,4438,"\n"]],[4438,4438],[4437,4437]]],[1569554255467,["GJX@GJXAIOU",[[1,4444,"![一对多配置测试结果]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)"]],[4442,4442],[4554,4554]]],[1569554257735,["GJX@GJXAIOU",[[1,4554,"\n"]],[4553,4553],[4554,4554]]],[1569554258112,["GJX@GJXAIOU",[[1,4555,"\n"]],[4554,4554],[4555,4555]]],[1569554259982,["GJX@GJXAIOU",[[-1,4441,"\n"]],[4442,4442],[4441,4441]]],[1569554305204,["GJX@GJXAIOU",[[1,4559,"()"]],[4559,4559],[4561,4561]]],[1569554306141,["GJX@GJXAIOU",[[1,4560,"er "]],[4560,4560],[4563,4563]]],[1569554309544,["GJX@GJXAIOU",[[-1,4559,"(er )"]],[4563,4563],[4559,4559]]],[1569554310230,["GJX@GJXAIOU",[[1,4559,"（）"]],[4559,4559],[4561,4561]]],[1569554311132,["GJX@GJXAIOU",[[1,4560,"二"]],[4560,4560],[4561,4561]]],[1569554320191,["GJX@GJXAIOU",[[1,4570,"\n"]],[4570,4570],[4571,4571]]],[1569554320554,["GJX@GJXAIOU",[[1,4571,"- "]],[4571,4571],[4573,4573]]],[1569554322858,["GJX@GJXAIOU",[[-1,4578,"1 "]],[4578,4580],[4578,4578]]],[1569554323422,["GJX@GJXAIOU",[[1,4578,"  - "]],[4578,4578],[4582,4582]]],[1569554326287,["GJX@GJXAIOU",[[-1,4587,"（1）"]],[4587,4590],[4587,4587]]],[1569554326873,["GJX@GJXAIOU",[[1,4587,"  "]],[4587,4587],[4589,4589]]],[1569554330810,["GJX@GJXAIOU",[[-1,4610,"2"]],[4610,4611],[4610,4610]]],[1569554331066,["GJX@GJXAIOU",[[1,4610,"-"]],[4610,4610],[4611,4611]]],[1569554332809,["GJX@GJXAIOU",[[1,4610,"  "]],[4611,4611],[4613,4613]]],[1569554334407,["GJX@GJXAIOU",[[-1,4609,"\n"]],[4609,4609],[4608,4608]]],[1569554336730,["GJX@GJXAIOU",[[-1,4618,"（1）"]],[4618,4621],[4618,4618]]],[1569554340815,["GJX@GJXAIOU",[[-1,4587,"  "]],[4587,4589],[4587,4587]]],[1569554345288,["GJX@GJXAIOU",[[1,4587,"      "]],[4587,4587],[4593,4593]]],[1569554347402,["GJX@GJXAIOU",[[1,4622,"      "]],[4622,4622],[4628,4628]]],[1569554364207,["GJX@GJXAIOU",[[1,4657,"#"]],[4658,4658],[4666,4666]]],[1569554367560,["GJX@GJXAIOU",[[1,4659,"1 "]],[4659,4659],[4660,4660]]],[1569554367705,["GJX@GJXAIOU",[[1,4660,"."]],[4660,4660],[4661,4661]]],[1569554386027,["GJX@GJXAIOU",[[-1,4670,"1"]],[4670,4671],[4670,4670]]],[1569554391670,["GJX@GJXAIOU",[[-1,4702,"//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"传智播客\");\n\t\t\tcustomer.setCustLevel(\"vip\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"lucy\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t\n\t\t\t//2 需要在客户表示所有联系人，在联系人表示客户\t\t\n\t\t\t// 即建立客户对象和联系人对象关系\n\t\t\t//2.1 把联系人对象 放到客户对象的set集合里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//2.2 把客户对象放到联系人里面\n\t\t\tlinkman.setCustomer(customer);\n\t\t\t\n\t\t\t//3 保存到数据库\n\t\t\tsession.save(customer);\n\t\t\tsession.save(linkman);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n "]],[4702,5843],[4702,4702]]],[1569554396295,["GJX@GJXAIOU",[[-1,4692,"（1）"]],[4692,4695],[4692,4692]]],[1569554397808,["GJX@GJXAIOU",[[1,4692,"\n"]],[4692,4692],[4693,4693]]],[1569554398346,["GJX@GJXAIOU",[[1,4693,"- "]],[4693,4693],[4695,4695]]],[1569554401517,["GJX@GJXAIOU",[[1,4701,"·"]],[4701,4701],[4702,4702]]],[1569554402567,["GJX@GJXAIOU",[[-1,4701,"·"]],[4702,4702],[4701,4701]]],[1569554403555,["GJX@GJXAIOU",[[1,4701,"```"]],[4701,4701],[4704,4704]]],[1569554403596,["GJX@GJXAIOU",[[1,4704,"language\n```\n"]],[4704,4704],[4704,4712]]],[1569554405405,["GJX@GJXAIOU",[[-1,4704,"language"],[1,4712,"j"]],[4704,4712],[4705,4705]]],[1569554405811,["GJX@GJXAIOU",[[1,4705,"ava"]],[4705,4705],[4708,4708]]],[1569554406022,["GJX@GJXAIOU",[[1,4709,"\n"]],[4708,4708],[4709,4709]]],[1569554505153,["GJX@GJXAIOU",[[1,4701,"- \n"]],[4700,4700],[4703,4703]]],[1569554505338,["GJX@GJXAIOU",[[-1,4701,"- "]],[4703,4703],[4702,4702]]],[1569554508733,["GJX@GJXAIOU",[[1,4701,"shou"]],[4701,4701],[4705,4705]]],[1569554509454,["GJX@GJXAIOU",[[-1,4701,"shou"]],[4705,4705],[4701,4701]]],[1569554518883,["GJX@GJXAIOU",[[1,4701,"首先这里以及下面都会使用昨天配置 "]],[4701,4701],[4718,4718]]],[1569554519854,["GJX@GJXAIOU",[[-1,4717," "]],[4718,4718],[4717,4717]]],[1569554528907,["GJX@GJXAIOU",[[1,4717,"的 HibernateUtils 类"]],[4717,4717],[4735,4735]]],[1569554533708,["GJX@GJXAIOU",[[1,4744,"public class HibernateUtils {\n\n\tstatic Configuration cfg = null;\n\tstatic SessionFactory sessionFactory = null;\n\t//静态代码块实现\n\tstatic {\n\t\t//加载核心配置文件\n\t\tcfg = new Configuration();\n\t\tcfg.configure();\n\t\tsessionFactory = cfg.buildSessionFactory();\n\t}\n\t\n\t//提供返回与本地线程帮的session的方法\n\tpublic static Session getSessionobject() {\n\t\treturn sessionFactory.getCurrentSession();\n\t}\n\t\n\t//提供方法返回sessionFactory\n\tpublic static SessionFactory getSessionFactory() {\n\t\treturn sessionFactory;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n}\n"]],[4744,4744],[5263,5263]]],[1569554537449,["GJX@GJXAIOU",[[-1,5268,"\t"]],[5269,5269],[5268,5268]]],[1569554538764,["GJX@GJXAIOU",[[1,5269,"\n"]],[5268,5268],[5269,5269]]],[1569554541739,["GJX@GJXAIOU",[[1,5269,"使用方法"]],[5269,5269],[5273,5273]]],[1569554542200,["GJX@GJXAIOU",[[1,5274,"\n"]],[5273,5273],[5274,5274]]],[1569554543700,["GJX@GJXAIOU",[[1,5274,"```"]],[5274,5274],[5277,5277]]],[1569554543741,["GJX@GJXAIOU",[[1,5277,"language\n```\n"]],[5277,5277],[5277,5285]]],[1569554544634,["GJX@GJXAIOU",[[-1,5277,"language"],[1,5285,"j"]],[5277,5285],[5278,5278]]],[1569554545167,["GJX@GJXAIOU",[[-1,5277,"j"]],[5278,5278],[5277,5277]]],[1569554546618,["GJX@GJXAIOU",[[1,5277,"on"]],[5277,5277],[5279,5279]]],[1569554547111,["GJX@GJXAIOU",[[-1,5277,"on"]],[5279,5279],[5277,5277]]],[1569554548203,["GJX@GJXAIOU",[[1,5277,"java"]],[5277,5277],[5281,5281]]],[1569554548407,["GJX@GJXAIOU",[[1,5282,"\n"]],[5281,5281],[5282,5282]]],[1569554563297,["GJX@GJXAIOU",[[1,5277,"Hibernateon"]],[5277,5277],[5288,5288]]],[1569554564293,["GJX@GJXAIOU",[[-1,5286,"on"]],[5288,5288],[5286,5286]]],[1569554570640,["GJX@GJXAIOU",[[1,5286,"OneToMant"]],[5286,5286],[5295,5295]]],[1569554571246,["GJX@GJXAIOU",[[-1,5294,"t"]],[5295,5295],[5294,5294]]],[1569554575202,["GJX@GJXAIOU",[[1,5294,"y_"]],[5294,5294],[5296,5296]]],[1569554631473,["GJX@GJXAIOU",[[1,5301,"public class HibernateOnte"]],[5301,5301],[5327,5327]]],[1569554632199,["GJX@GJXAIOU",[[-1,5325,"te"]],[5327,5327],[5325,5325]]],[1569554638216,["GJX@GJXAIOU",[[1,5325,"eTomany"]],[5325,5325],[5332,5332]]],[1569554639216,["GJX@GJXAIOU",[[-1,5328,"many"]],[5332,5332],[5328,5328]]],[1569554644736,["GJX@GJXAIOU",[[1,5328,"Many {}"]],[5328,5328],[5335,5335]]],[1569554646512,["GJX@GJXAIOU",[[1,5334,"\n"]],[5334,5334],[5335,5335]]],[1569554646668,["GJX@GJXAIOU",[[1,5335,"\n"]],[5335,5335],[5336,5336]]],[1569554646817,["GJX@GJXAIOU",[[1,5336,"\n"]],[5336,5336],[5337,5337]]],[1569554647294,["GJX@GJXAIOU",[[1,5337,"\n"]],[5337,5337],[5338,5338]]],[1569554647504,["GJX@GJXAIOU",[[1,5338,"\n"]],[5338,5338],[5339,5339]]],[1569554650231,["GJX@GJXAIOU",[[-1,5339,"}"]],[5340,5340],[5339,5339]]],[1569554653575,["GJX@GJXAIOU",[[-1,5332," "]],[5333,5333],[5332,5332]]],[1569554659607,["GJX@GJXAIOU",[[1,5334,"    //演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"传智播客\");\n\t\t\tcustomer.setCustLevel(\"vip\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"lucy\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t\n\t\t\t//2 在客户表示所有联系人，在联系人表示客户\t\t\n\t\t\t// 建立客户对象和联系人对象关系\n\t\t\t//2.1 把联系人对象 放到客户对象的set集合里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//2.2 把客户对象放到联系人里面\n\t\t\tlinkman.setCustomer(customer);\n\t\t\t\n\t\t\t//3 保存到数据库\n\t\t\tsession.save(customer);\n\t\t\tsession.save(linkman);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n}"]],[5334,5334],[6476,6476]]],[1569554668374,["GJX@GJXAIOU",[[-1,6480,"\n"]],[6480,6480],[6479,6479]]],[1569554668534,["GJX@GJXAIOU",[[-1,6479,"\n"]],[6479,6479],[6478,6478]]],[1569554668982,["GJX@GJXAIOU",[[-1,6478,"\n"]],[6478,6478],[6477,6477]]],[1569554669334,["GJX@GJXAIOU",[[-1,6477,"\n"]],[6477,6477],[6476,6476]]],[1569554694933,["GJX@GJXAIOU",[[-1,5780,"传智播客"]],[5784,5784],[5780,5780]]],[1569554696286,["GJX@GJXAIOU",[[1,5780,"bais"]],[5780,5780],[5784,5784]]],[1569554697191,["GJX@GJXAIOU",[[-1,5780,"bais"]],[5784,5784],[5780,5780]]],[1569554699379,["GJX@GJXAIOU",[[1,5780,"百度"]],[5780,5780],[5782,5782]]],[1569554746001,["GJX@GJXAIOU",[[1,6479,"运行结果："]],[6479,6479],[6484,6484]]],[1569554749111,["GJX@GJXAIOU",[[1,6485,"\n"]],[6484,6484],[6485,6485]]],[1569554764329,["GJX@GJXAIOU",[[1,6485,"|cid |xu"]],[6485,6485],[6493,6493]]],[1569554765042,["GJX@GJXAIOU",[[-1,6491,"xu"]],[6493,6493],[6491,6491]]],[1569554772336,["GJX@GJXAIOU",[[1,6491," custName | suxe"]],[6491,6491],[6507,6507]]],[1569554773198,["GJX@GJXAIOU",[[-1,6503,"suxe"]],[6507,6507],[6503,6503]]],[1569554774409,["GJX@GJXAIOU",[[1,6503,"cuse"]],[6503,6503],[6507,6507]]],[1569554774829,["GJX@GJXAIOU",[[-1,6506,"e"]],[6507,6507],[6506,6506]]],[1569554791833,["GJX@GJXAIOU",[[1,6506,"tLevel | custSource | cu"]],[6506,6506],[6530,6530]]],[1569554792763,["GJX@GJXAIOU",[[1,6530,"se"]],[6530,6530],[6532,6532]]],[1569554793231,["GJX@GJXAIOU",[[-1,6531,"e"]],[6532,6532],[6531,6531]]],[1569554799123,["GJX@GJXAIOU",[[1,6531,"tPhone | s"]],[6531,6531],[6541,6541]]],[1569554799550,["GJX@GJXAIOU",[[-1,6540,"s"]],[6541,6541],[6540,6540]]],[1569554805600,["GJX@GJXAIOU",[[1,6540,"custMobie | "]],[6540,6540],[6552,6552]]],[1569554805958,["GJX@GJXAIOU",[[1,6553,"\n"]],[6552,6552],[6553,6553]]],[1569554816155,["GJX@GJXAIOU",[[1,6553,"|---|---|---|---|---、"]],[6553,6553],[6574,6574]]],[1569554817089,["GJX@GJXAIOU",[[-1,6573,"、"]],[6574,6574],[6573,6573]]],[1569554825376,["GJX@GJXAIOU",[[1,6573,"|---|"]],[6573,6573],[6578,6578]]],[1569554826032,["GJX@GJXAIOU",[[1,6579,"|   |   |   |   |   |   |\n"]],[6578,6578],[6580,6583]]],[1569554829344,["GJX@GJXAIOU",[[-1,6580,"   "],[1,6583,"1"]],[6580,6583],[6581,6581]]],[1569554834309,["GJX@GJXAIOU",[[-1,6582,"   "],[1,6585,"百度"]],[6582,6582],[6584,6584]]],[1569554838516,["GJX@GJXAIOU",[[-1,6585,"   "],[1,6588,"VIP"]],[6585,6585],[6588,6588]]],[1569554840263,["GJX@GJXAIOU",[[-1,6585,"VIP"]],[6588,6588],[6585,6585]]],[1569554840980,["GJX@GJXAIOU",[[1,6585,"vip"]],[6585,6585],[6588,6588]]],[1569554844283,["GJX@GJXAIOU",[[-1,6589,"   "],[1,6592,"网络"]],[6589,6589],[6591,6591]]],[1569554846141,["GJX@GJXAIOU",[[-1,6592,"   "],[1,6595,"2"]],[6592,6595],[6593,6593]]],[1569554846576,["GJX@GJXAIOU",[[-1,6592,"2"]],[6593,6593],[6592,6592]]],[1569554847141,["GJX@GJXAIOU",[[1,6592,"110"]],[6592,6592],[6595,6595]]],[1569554850378,["GJX@GJXAIOU",[[-1,6596,"   "],[1,6599,"S"]],[6596,6599],[6597,6597]]],[1569554851058,["GJX@GJXAIOU",[[-1,6596,"S"]],[6597,6597],[6596,6596]]],[1569554853842,["GJX@GJXAIOU",[[1,6596,"999"]],[6596,6596],[6599,6599]]],[1569554866076,["GJX@GJXAIOU",[[-1,6601," "],[1,6602,"\n"]],[6602,6602],[6602,6602]]],[1569554866567,["GJX@GJXAIOU",[[1,6602,"|cid | custName | custLevel | custSource | custPhone | custMobie | \n|---|---|---|---|---|---|"]],[6602,6602],[6695,6695]]],[1569554874686,["GJX@GJXAIOU",[[-1,6603,"c"]],[6604,6604],[6603,6603]]],[1569554878393,["GJX@GJXAIOU",[[1,6603,"lkm"]],[6603,6603],[6606,6606]]],[1569554888202,["GJX@GJXAIOU",[[-1,6611,"custName"]],[6611,6619],[6611,6611]]],[1569554890640,["GJX@GJXAIOU",[[1,6611,"ll"]],[6611,6611],[6613,6613]]],[1569554891466,["GJX@GJXAIOU",[[-1,6612,"l"]],[6613,6613],[6612,6612]]],[1569554895428,["GJX@GJXAIOU",[[1,6612,"km_name"]],[6612,6612],[6619,6619]]],[1569554897191,["GJX@GJXAIOU",[[-1,6621," custLevel "]],[6621,6632],[6621,6621]]],[1569554897986,["GJX@GJXAIOU",[[1,6621,"lik"]],[6621,6621],[6624,6624]]],[1569554898734,["GJX@GJXAIOU",[[-1,6622,"ik"]],[6624,6624],[6622,6622]]],[1569554902110,["GJX@GJXAIOU",[[1,6622,"km_geng"]],[6622,6622],[6629,6629]]],[1569554902918,["GJX@GJXAIOU",[[-1,6628,"g"]],[6629,6629],[6628,6628]]],[1569554903638,["GJX@GJXAIOU",[[1,6628,"der"]],[6628,6628],[6631,6631]]],[1569554905345,["GJX@GJXAIOU",[[-1,6632," custSource "],[1,6644,"l"]],[6632,6644],[6633,6633]]],[1569554908354,["GJX@GJXAIOU",[[1,6633,"km_pu"]],[6633,6633],[6638,6638]]],[1569554908990,["GJX@GJXAIOU",[[-1,6637,"u"]],[6638,6638],[6637,6637]]],[1569554910081,["GJX@GJXAIOU",[[1,6637,"hone"]],[6637,6637],[6641,6641]]],[1569554920998,["GJX@GJXAIOU",[[-1,6642," Phone | custcustMobie"]],[6643,6655],[6642,6642]]],[1569554923146,["GJX@GJXAIOU",[[1,6642,"clid"]],[6642,6642],[6646,6646]]],[1569554926319,["GJX@GJXAIOU",[[-1,6671,"---|"]],[6675,6675],[6671,6671]]],[1569554927201,["GJX@GJXAIOU",[[1,6672,"|   |   |   |   |   |\n"]],[6671,6671],[6673,6676]]],[1569554929716,["GJX@GJXAIOU",[[-1,6673,"   "],[1,6676,"1"]],[6673,6676],[6674,6674]]],[1569554932157,["GJX@GJXAIOU",[[-1,6673,"1"]],[6674,6674],[6673,6673]]],[1569554933081,["GJX@GJXAIOU",[[1,6673,"2"]],[6673,6673],[6674,6674]]],[1569554936045,["GJX@GJXAIOU",[[-1,6675,"   "],[1,6678,"l"]],[6675,6678],[6676,6676]]],[1569554937641,["GJX@GJXAIOU",[[1,6676,"ucy"]],[6676,6676],[6679,6679]]],[1569554939321,["GJX@GJXAIOU",[[-1,6680,"   "],[1,6683,"n"]],[6680,6683],[6681,6681]]],[1569554939513,["GJX@GJXAIOU",[[1,6681,"an"]],[6681,6681],[6683,6683]]],[1569554940591,["GJX@GJXAIOU",[[-1,6680,"nan"]],[6683,6683],[6680,6680]]],[1569554941549,["GJX@GJXAIOU",[[1,6680,"男"]],[6680,6680],[6681,6681]]],[1569554944486,["GJX@GJXAIOU",[[-1,6682,"   "],[1,6685,"9"]],[6682,6685],[6683,6683]]],[1569554945307,["GJX@GJXAIOU",[[1,6683,"11"]],[6683,6683],[6685,6685]]],[1569554948547,["GJX@GJXAIOU",[[-1,6686,"   "],[1,6689,"1"]],[6686,6689],[6687,6687]]],[1569554991975,["GJX@GJXAIOU",[[1,6690,"\n"]],[6689,6689],[6690,6690]]],[1569554993157,["GJX@GJXAIOU",[[1,6690,"biao"]],[6690,6690],[6694,6694]]],[1569554994431,["GJX@GJXAIOU",[[-1,6690,"biao"]],[6694,6694],[6690,6690]]],[1569554997794,["GJX@GJXAIOU",[[1,6485,"\n"]],[6484,6484],[6485,6485]]],[1569555002984,["GJX@GJXAIOU",[[1,6485,"表一中的 cl"]],[6485,6485],[6492,6492]]],[1569555003465,["GJX@GJXAIOU",[[-1,6491,"l"]],[6492,6492],[6491,6491]]],[1569555006766,["GJX@GJXAIOU",[[1,6491,"id 和表耳"]],[6491,6491],[6497,6497]]],[1569555007317,["GJX@GJXAIOU",[[-1,6496,"耳"]],[6497,6497],[6496,6496]]],[1569555013902,["GJX@GJXAIOU",[[1,6496,"二中的 clid 相对于"]],[6496,6496],[6508,6508]]],[1569555014343,["GJX@GJXAIOU",[[-1,6507,"于"]],[6508,6508],[6507,6507]]],[1569555016250,["GJX@GJXAIOU",[[1,6507,"应；"]],[6507,6507],[6509,6509]]],[1569555028590,["GJX@GJXAIOU",[[1,4695,"**"],[1,4699,"**"]],[4695,4699],[4695,4703]]],[1569555034438,["GJX@GJXAIOU",[[-1,6720,"（2）"]],[6720,6723],[6720,6720]]],[1569555035082,["GJX@GJXAIOU",[[1,6720,"- "]],[6720,6720],[6722,6722]]],[1569555037856,["GJX@GJXAIOU",[[1,6722,"**"],[1,6726,"**"]],[6722,6726],[6722,6730]]],[1569555039702,["GJX@GJXAIOU",[[-1,6719,"\n"]],[6719,6719],[6718,6718]]],[1569555061138,["GJX@GJXAIOU",[[1,6730,"  "]],[6732,6732],[6734,6734]]],[1569555063128,["GJX@GJXAIOU",[[1,6763,"\n"]],[6762,6762],[6763,6763]]],[1569555065152,["GJX@GJXAIOU",[[1,6763,"《》"]],[6763,6763],[6765,6765]]],[1569555065840,["GJX@GJXAIOU",[[-1,6763,"《》"]],[6765,6765],[6763,6763]]],[1569555067033,["GJX@GJXAIOU",[[1,6763,"<."]],[6763,6763],[6765,6765]]],[1569555071534,["GJX@GJXAIOU",[[-1,6763,"<."]],[6765,6765],[6763,6763]]],[1569555072833,["GJX@GJXAIOU",[[1,6763,"``"]],[6763,6763],[6765,6765]]],[1569555074893,["GJX@GJXAIOU",[[1,6764,"<>"]],[6764,6764],[6766,6766]]],[1569555085459,["GJX@GJXAIOU",[[1,6765,"set name=“set"]],[6765,6765],[6778,6778]]],[1569555086778,["GJX@GJXAIOU",[[-1,6774,"“set"]],[6778,6778],[6774,6774]]],[1569555091748,["GJX@GJXAIOU",[[1,6774,"\"setLinkMan"]],[6774,6774],[6785,6785]]],[1569555093225,["GJX@GJXAIOU",[[1,6785,"'"]],[6785,6785],[6786,6786]]],[1569555094271,["GJX@GJXAIOU",[[-1,6785,"'"]],[6786,6786],[6785,6785]]],[1569555098016,["GJX@GJXAIOU",[[1,6785,"\" case"]],[6785,6785],[6791,6791]]],[1569555099966,["GJX@GJXAIOU",[[-1,6790,"e"]],[6791,6791],[6790,6790]]],[1569555115265,["GJX@GJXAIOU",[[1,6790,"cade=\"save-update\""]],[6790,6790],[6808,6808]]],[1569555178747,["GJX@GJXAIOU",[[1,6811,"  "]],[6811,6811],[6813,6813]]],[1569555220615,["GJX@GJXAIOU",[[1,6884,"\n"]],[6883,6883],[6884,6884]]],[1569555223499,["GJX@GJXAIOU",[[1,6884,"```"]],[6884,6884],[6887,6887]]],[1569555223543,["GJX@GJXAIOU",[[1,6887,"language\n```\n"]],[6887,6887],[6887,6895]]],[1569555224633,["GJX@GJXAIOU",[[-1,6887,"language"],[1,6895,"j"]],[6887,6895],[6888,6888]]],[1569555224989,["GJX@GJXAIOU",[[1,6888,"ava"]],[6888,6888],[6891,6891]]],[1569555226058,["GJX@GJXAIOU",[[1,6892,"\n"]],[6891,6891],[6892,6892]]],[1569555230797,["GJX@GJXAIOU",[[-1,6899,"//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"普通客户\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"小宏\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t//2 把联系人放到客户里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//3 保存客户\n\t\t\tsession.save(customer);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}"]],[6899,7871],[6899,6899]]],[1569555235667,["GJX@GJXAIOU",[[1,6892,"//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"普通客户\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"小宏\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t//2 把联系人放到客户里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//3 保存客户\n\t\t\tsession.save(customer);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}"]],[6892,6892],[7864,7864]]],[1569555239074,["GJX@GJXAIOU",[[-1,7873,"\n"]],[7872,7872],[7871,7871]]],[1569555239230,["GJX@GJXAIOU",[[-1,7870,"\t"]],[7871,7871],[7870,7870]]],[1569562155927,["GJX@GJXAIOU",[[1,7875,"#"]],[7875,7875],[7884,7884]]],[1569562157861,["GJX@GJXAIOU",[[1,7877,"2 "]],[7877,7877],[7878,7878]]],[1569562157969,["GJX@GJXAIOU",[[1,7878,"."]],[7878,7878],[7879,7879]]],[1569562162386,["GJX@GJXAIOU",[[-1,7889,"1"]],[7889,7890],[7889,7889]]],[1569562162911,["GJX@GJXAIOU",[[-1,7888,"\n"]],[7889,7889],[7888,7888]]],[1569562170354,["GJX@GJXAIOU",[[-1,7914,"2 "]],[7914,7915],[7914,7914]]],[1569562173449,["GJX@GJXAIOU",[[1,7914,"**"],[1,7918,"**"]],[7914,7918],[7914,7922]]],[1569562386536,["GJX@GJXAIOU",[[1,7923,"- "]],[7923,7923],[7925,7925]]],[1569562390171,["GJX@GJXAIOU",[[1,7928,":"]],[7928,7928],[7929,7929]]],[1569562391326,["GJX@GJXAIOU",[[-1,7928,":"]],[7929,7929],[7928,7928]]],[1569562391877,["GJX@GJXAIOU",[[1,7928,"："]],[7928,7928],[7929,7929]]],[1569562396163,["GJX@GJXAIOU",[[1,7955," "]],[7955,7955],[7956,7956]]],[1569562397282,["GJX@GJXAIOU",[[1,7963," "]],[7963,7963],[7964,7964]]],[1569562405538,["GJX@GJXAIOU",[[1,7976,"``"]],[7976,7976],[7978,7978]]],[1569562407095,["GJX@GJXAIOU",[[1,7977,"<>"]],[7977,7977],[7979,7979]]],[1569562419859,["GJX@GJXAIOU",[[1,7978,"set name = \"serLinkMan"]],[7978,7978],[8000,8000]]],[1569562422295,["GJX@GJXAIOU",[[-1,7992,"r"]],[7993,7993],[7992,7992]]],[1569562422634,["GJX@GJXAIOU",[[1,7992,"t"]],[7992,7992],[7993,7993]]],[1569562426146,["GJX@GJXAIOU",[[1,8000," "]],[8000,8000],[8001,8001]]],[1569562427374,["GJX@GJXAIOU",[[-1,8000," "]],[8001,8001],[8000,8000]]],[1569562438569,["GJX@GJXAIOU",[[1,8000,"\" cascade = \"a"]],[8000,8000],[8014,8014]]],[1569562439128,["GJX@GJXAIOU",[[-1,8013,"a"]],[8014,8014],[8013,8013]]],[1569562439358,["GJX@GJXAIOU",[[1,8013,"da"]],[8013,8013],[8015,8015]]],[1569562440335,["GJX@GJXAIOU",[[-1,8013,"da"]],[8015,8015],[8013,8013]]],[1569562446404,["GJX@GJXAIOU",[[1,8013,"save-update,delo"]],[8013,8013],[8029,8029]]],[1569562447262,["GJX@GJXAIOU",[[-1,8028,"o"]],[8029,8029],[8028,8028]]],[1569562449905,["GJX@GJXAIOU",[[1,8028,"ete“"]],[8028,8028],[8032,8032]]],[1569562450449,["GJX@GJXAIOU",[[-1,8031,"“"]],[8032,8032],[8031,8031]]],[1569562450963,["GJX@GJXAIOU",[[1,8031,"\""]],[8031,8031],[8032,8032]]],[1569562453455,["GJX@GJXAIOU",[[1,7974,"()"]],[7974,7974],[7976,7976]]],[1569562454824,["GJX@GJXAIOU",[[-1,7974,"()"]],[7976,7976],[7974,7974]]],[1569562455485,["GJX@GJXAIOU",[[1,7974,"（）"]],[7974,7974],[7976,7976]]],[1569562465423,["GJX@GJXAIOU",[[1,7975,"下面因为是在上面的基础上记性"]],[7975,7975],[7989,7989]]],[1569562466045,["GJX@GJXAIOU",[[-1,7987,"记性"]],[7989,7989],[7987,7987]]],[1569562471411,["GJX@GJXAIOU",[[1,7987,"进行的配置，总结"]],[7987,7987],[7995,7995]]],[1569562472371,["GJX@GJXAIOU",[[-1,7993,"总结"]],[7995,7995],[7993,7993]]],[1569562475145,["GJX@GJXAIOU",[[1,7993,"中间使用 ,"]],[7993,7993],[7999,7999]]],[1569562476295,["GJX@GJXAIOU",[[-1,7997," ,"]],[7999,7999],[7997,7997]]],[1569562478614,["GJX@GJXAIOU",[[1,7997,"，gekke"]],[7997,7997],[8003,8003]]],[1569562480370,["GJX@GJXAIOU",[[-1,7998,"gekke"]],[8003,8003],[7998,7998]]],[1569562484231,["GJX@GJXAIOU",[[1,7998,"隔开就行"]],[7998,7998],[8002,8002]]],[1569562490804,["GJX@GJXAIOU",[[1,8064,"- "]],[8064,8064],[8066,8066]]],[1569562501177,["GJX@GJXAIOU",[[1,8133,"```"]],[8133,8133],[8136,8136]]],[1569562501219,["GJX@GJXAIOU",[[1,8136,"language\n```\n"]],[8136,8136],[8136,8144]]],[1569562502993,["GJX@GJXAIOU",[[-1,8136,"language"],[1,8144,"j"]],[8136,8144],[8137,8137]]],[1569562503546,["GJX@GJXAIOU",[[1,8137,"ava"]],[8137,8137],[8140,8140]]],[1569562503709,["GJX@GJXAIOU",[[1,8141,"\n"]],[8140,8140],[8141,8141]]],[1569562509935,["GJX@GJXAIOU",[[1,8141,"// gengju"]],[8141,8141],[8150,8150]]],[1569562513406,["GJX@GJXAIOU",[[-1,8141,"// gengju"]],[8150,8150],[8141,8141]]],[1569562524393,["GJX@GJXAIOU",[[1,8141,"Customer customer = sesi"]],[8141,8141],[8165,8165]]],[1569562524990,["GJX@GJXAIOU",[[-1,8164,"i"]],[8165,8165],[8164,8164]]],[1569562527963,["GJX@GJXAIOU",[[1,8164,"sion.get();"]],[8164,8164],[8175,8175]]],[1569562530670,["GJX@GJXAIOU",[[-1,8172,"("]],[8173,8173],[8172,8172]]],[1569562542722,["GJX@GJXAIOU",[[1,8172,"(Customer.class,3"]],[8172,8172],[8189,8189]]],[1569562544748,["GJX@GJXAIOU",[[1,8192,"\n"]],[8191,8191],[8192,8192]]],[1569562551875,["GJX@GJXAIOU",[[1,8192,"session.delete();"]],[8192,8192],[8209,8209]]],[1569562553673,["GJX@GJXAIOU",[[1,8207,"su"]],[8207,8207],[8209,8209]]],[1569562555030,["GJX@GJXAIOU",[[-1,8207,"su"]],[8209,8209],[8207,8207]]],[1569562557273,["GJX@GJXAIOU",[[1,8207,"customer"]],[8207,8207],[8215,8215]]],[1569563016982,["GJX@GJXAIOU",[[-1,8225,"3"]],[8225,8226],[8225,8225]]],[1569563019470,["GJX@GJXAIOU",[[1,8225,"**"],[1,8231,"**"]],[8225,8231],[8225,8235]]],[1569563021168,["GJX@GJXAIOU",[[-1,8224,"\n"]],[8224,8224],[8223,8223]]],[1569563023127,["GJX@GJXAIOU",[[-1,8226," "]],[8227,8227],[8226,8226]]],[1569563066060,["GJX@GJXAIOU",[[1,8248,"![根据 id 查询客户]($resource/%E6%A0%B9%E6%8D%AE%20id%20%E6%9F%A5%E8%AF%A2%E5%AE%A2%E6%88%B7.png)\n"]],[8246,8246],[8340,8340]]],[1569563107631,["GJX@GJXAIOU",[[1,8358,"![根据外键id 查询联系人]($resource/%E6%A0%B9%E6%8D%AE%E5%A4%96%E9%94%AEid%20%E6%9F%A5%E8%AF%A2%E8%81%94%E7%B3%BB%E4%BA%BA.png)\n"]],[8356,8357],[8476,8476]]],[1569563151111,["GJX@GJXAIOU",[[1,8495,"![设置联系人外键为null]($resource/%E8%AE%BE%E7%BD%AE%E8%81%94%E7%B3%BB%E4%BA%BA%E5%A4%96%E9%94%AE%E4%B8%BAnull.png)\n"]],[8493,8493],[8603,8603]]],[1569563179791,["GJX@GJXAIOU",[[1,8617,"![删除联系人和客户]($resource/%E5%88%A0%E9%99%A4%E8%81%94%E7%B3%BB%E4%BA%BA%E5%92%8C%E5%AE%A2%E6%88%B7.png)"]],[8616,8616],[8717,8717]]],[1569563185175,["GJX@GJXAIOU",[[1,8717,"\n"]],[8717,8717],[8718,8718]]],[1569563185312,["GJX@GJXAIOU",[[1,8718,"\n"]],[8718,8718],[8719,8719]]],[1569563229693,["GJX@GJXAIOU",[[1,8723,"()"]],[8723,8723],[8725,8725]]],[1569563231311,["GJX@GJXAIOU",[[-1,8723,"()"]],[8725,8725],[8723,8723]]],[1569563232058,["GJX@GJXAIOU",[[1,8723,"（）"]],[8723,8723],[8725,8725]]],[1569563233798,["GJX@GJXAIOU",[[1,8724,"三"]],[8724,8724],[8725,8725]]],[1569563236370,["GJX@GJXAIOU",[[1,8745,"\n"]],[8745,8745],[8746,8746]]],[1569563241334,["GJX@GJXAIOU",[[-1,8762,"传智播客"]],[8766,8766],[8762,8762]]],[1569563244205,["GJX@GJXAIOU",[[1,8762,"百度"]],[8762,8762],[8764,8764]]],[1569563246616,["GJX@GJXAIOU",[[-1,8767,"百度"]],[8769,8769],[8767,8767]]],[1569563247586,["GJX@GJXAIOU",[[1,8767,"阿里"]],[8767,8767],[8769,8769]]],[1569563250814,["GJX@GJXAIOU",[[-1,8746,"1 "]],[8746,8748],[8746,8746]]],[1569563253259,["GJX@GJXAIOU",[[1,8746,"目标："]],[8746,8746],[8749,8749]]],[1569563271833,["GJX@GJXAIOU",[[1,8771,"```"]],[8771,8771],[8774,8774]]],[1569563271879,["GJX@GJXAIOU",[[1,8774,"language\n```\n"]],[8774,8774],[8774,8782]]],[1569563273337,["GJX@GJXAIOU",[[-1,8774,"lan"],[-1,8778,"uage"]],[8774,8782],[8775,8775]]],[1569563274579,["GJX@GJXAIOU",[[1,8775,"engju "]],[8775,8775],[8781,8781]]],[1569563277153,["GJX@GJXAIOU",[[-1,8774,"gengju "]],[8781,8781],[8774,8774]]],[1569563278487,["GJX@GJXAIOU",[[1,8774,"java"]],[8774,8774],[8778,8778]]],[1569563279419,["GJX@GJXAIOU",[[1,8779,"\n"]],[8778,8778],[8779,8779]]],[1569563306436,["GJX@GJXAIOU",[[1,8779,"//1 根据id查询lucy联系人，根据id查询百度的客户\n\t\t\tCustomer baidu = session.get(Customer.class, 1);\n\t\t\tLinkMan lucy = session.get(LinkMan.class, 2);\n\t\t\t//2 设置持久态对象值\n\t\t\t//把联系人放到客户里面\n\t\t\tbaidu.getSetLinkMan().add(lucy);\n\t\t\t//把客户放到联系人里面\n\t\t\tlucy.setCustomer(baidu);"]],[8779,8779],[9021,9021]]],[1569563310302,["GJX@GJXAIOU",[[-1,8811,"\t"],[-1,8861,"\t"],[-1,8912,"\t"],[-1,8926,"\t"],[-1,8944,"\t"],[-1,8980,"\t"],[-1,8994,"\t"]],[8812,9021],[8811,9014]]],[1569563310496,["GJX@GJXAIOU",[[-1,8810,"\t"],[-1,8860,"\t"],[-1,8909,"\t"],[-1,8923,"\t"],[-1,8939,"\t"],[-1,8974,"\t"],[-1,8988,"\t"]],[8811,9014],[8810,9007]]],[1569563310760,["GJX@GJXAIOU",[[-1,8809,"\t"],[-1,8859,"\t"],[-1,8906,"\t"],[-1,8920,"\t"],[-1,8934,"\t"],[-1,8968,"\t"],[-1,8982,"\t"]],[8810,9007],[8809,9000]]],[1569563318153,["GJX@GJXAIOU",[[-1,9008,"\n2"]],[9008,9010],[9008,9008]]],[1569563318409,["GJX@GJXAIOU",[[1,9008,"-"]],[9008,9008],[9009,9009]]],[1569563318766,["GJX@GJXAIOU",[[1,9010," "]],[9009,9009],[9010,9010]]],[1569563325496,["GJX@GJXAIOU",[[-1,9021,"（1）"]],[9021,9024],[9021,9021]]],[1569563326226,["GJX@GJXAIOU",[[1,9021,"  - "]],[9021,9021],[9025,9025]]],[1569563329023,["GJX@GJXAIOU",[[-1,9095," \n（2）"]],[9095,9100],[9095,9095]]],[1569563330550,["GJX@GJXAIOU",[[1,9095,"  - "]],[9095,9095],[9099,9099]]],[1569563332240,["GJX@GJXAIOU",[[1,9118,"    "]],[9118,9118],[9122,9122]]],[1569563333593,["GJX@GJXAIOU",[[1,9144,"    "]],[9145,9145],[9149,9149]]],[1569563337104,["GJX@GJXAIOU",[[-1,9190,"（3）"]],[9190,9193],[9190,9190]]],[1569563337470,["GJX@GJXAIOU",[[-1,9189,"\n"]],[9190,9190],[9189,9189]]],[1569563338505,["GJX@GJXAIOU",[[1,9189,"  - "]],[9189,9189],[9193,9193]]],[1569563365438,["GJX@GJXAIOU",[[1,9096,"\n  "]],[9096,9096],[9099,9099]]],[1569563493561,["GJX@GJXAIOU",[[1,9097,"![inverse 属性]($resource/inverse%20%E5%B1%9E%E6%80%A7.png)\n"]],[9095,9095],[9155,9155]]],[1569563542457,["GJX@GJXAIOU",[[1,9320,"```"]],[9320,9320],[9323,9323]]],[1569563542504,["GJX@GJXAIOU",[[1,9323,"language\n```\n"]],[9323,9323],[9323,9331]]],[1569563543537,["GJX@GJXAIOU",[[-1,9323,"language"],[1,9331,"j"]],[9323,9331],[9324,9324]]],[1569563543684,["GJX@GJXAIOU",[[1,9324,"a"]],[9324,9324],[9325,9325]]],[1569563544293,["GJX@GJXAIOU",[[-1,9323,"ja"]],[9325,9325],[9323,9323]]],[1569563547178,["GJX@GJXAIOU",[[1,9323,"Custe"]],[9323,9323],[9328,9328]]],[1569563550718,["GJX@GJXAIOU",[[-1,9327,"e"]],[9328,9328],[9327,9327]]],[1569563558297,["GJX@GJXAIOU",[[1,9327,"umer_hbm_xml"]],[9327,9327],[9339,9339]]],[1569563558799,["GJX@GJXAIOU",[[1,9340,"\n"]],[9339,9339],[9340,9340]]],[1569563561611,["GJX@GJXAIOU",[[1,9340,"<!-- 在客户映射文件中，使用 set 标签表示所有联系人\n\t\t\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称\n\t\t\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n\t\t-->\n\t\t<set name=\"setLinkMan\" inverse=\"true\">"]],[9340,9340],[9503,9503]]],[1569563565105,["GJX@GJXAIOU",[[-1,9373,"\t"],[-1,9415,"\t"],[-1,9458,"\t"],[-1,9463,"\t"]],[9373,9503],[9372,9499]]],[1569563565545,["GJX@GJXAIOU",[[-1,9372,"\t"],[-1,9414,"\t"],[-1,9455,"\t"],[-1,9460,"\t"]],[9372,9499],[9371,9495]]],[1569563590764,["GJX@GJXAIOU",[[1,9506,"sam"]],[9506,9506],[9509,9509]]],[1569563591458,["GJX@GJXAIOU",[[-1,9506,"sam"]],[9509,9509],[9506,9506]]],[1569563593516,["GJX@GJXAIOU",[[1,9506,"三 "]],[9506,9506],[9507,9507]]],[1569563594065,["GJX@GJXAIOU",[[1,9507,"、"]],[9507,9507],[9508,9508]]],[1569563595386,["GJX@GJXAIOU",[[-1,9508," "]],[9509,9509],[9508,9508]]],[1569563597351,["GJX@GJXAIOU",[[1,9523,"\n"]],[9523,9523],[9524,9524]]],[1569563599659,["GJX@GJXAIOU",[[1,9528,"（）"]],[9528,9528],[9530,9530]]],[1569563601204,["GJX@GJXAIOU",[[1,9529,"一"]],[9529,9529],[9530,9530]]],[1569563620329,["GJX@GJXAIOU",[[1,9551,"- "]],[9551,9551],[9553,9553]]],[1569563622710,["GJX@GJXAIOU",[[1,9570,"- "]],[9570,9570],[9572,9572]]],[1569563643945,["GJX@GJXAIOU",[[1,9569,"···"]],[9569,9569],[9572,9572]]],[1569563644589,["GJX@GJXAIOU",[[-1,9569,"···"]],[9572,9572],[9569,9569]]],[1569563645891,["GJX@GJXAIOU",[[1,9569,"~··"]],[9569,9569],[9572,9572]]],[1569563646681,["GJX@GJXAIOU",[[-1,9569,"~··"]],[9572,9572],[9569,9569]]],[1569563647144,["GJX@GJXAIOU",[[1,9569,"·"]],[9569,9569],[9570,9570]]],[1569563647669,["GJX@GJXAIOU",[[-1,9569,"·"]],[9570,9570],[9569,9569]]],[1569563648749,["GJX@GJXAIOU",[[1,9569,"~··"]],[9569,9569],[9572,9572]]],[1569563649434,["GJX@GJXAIOU",[[-1,9569,"~··"]],[9572,9572],[9569,9569]]],[1569563650906,["GJX@GJXAIOU",[[1,9569,"```"]],[9569,9569],[9572,9572]]],[1569563650950,["GJX@GJXAIOU",[[1,9572,"language\n```\n"]],[9572,9572],[9572,9580]]],[1569563654484,["GJX@GJXAIOU",[[-1,9572,"language"],[1,9580,"C"]],[9572,9580],[9573,9573]]],[1569563655736,["GJX@GJXAIOU",[[1,9573,"ustom"]],[9573,9573],[9578,9578]]],[1569563668865,["GJX@GJXAIOU",[[1,9578,"_hbm_xml"]],[9578,9578],[9586,9586]]],[1569563669154,["GJX@GJXAIOU",[[1,9587,"\n"]],[9586,9586],[9587,9587]]],[1569563671904,["GJX@GJXAIOU",[[1,9587,"@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Role {\n  \tprivate Integer role_id;\n  \tprivate String role_name;\n  \tprivate String role_memo;\n\t/**\n\t *  一个用户拥有多个角色\n\t */\n\tprivate Set<User> setUser = new HashSet<User>();\n}"]],[9587,9587],[9835,9835]]],[1569563674418,["GJX@GJXAIOU",[[1,9841,"\n"]],[9839,9839],[9840,9840]]],[1569563674798,["GJX@GJXAIOU",[[1,9842,"\n"]],[9840,9840],[9841,9841]]],[1569563676404,["GJX@GJXAIOU",[[1,9841,"```"]],[9841,9841],[9844,9844]]],[1569563676450,["GJX@GJXAIOU",[[1,9844,"language\n```\n"]],[9844,9844],[9844,9852]]],[1569563686469,["GJX@GJXAIOU",[[-1,9572,"Custom"]],[9578,9578],[9572,9572]]],[1569563687750,["GJX@GJXAIOU",[[1,9572,"Role"]],[9572,9572],[9576,9576]]],[1569563690990,["GJX@GJXAIOU",[[-1,9842,"language"]],[9842,9850],[9842,9842]]],[1569563695887,["GJX@GJXAIOU",[[1,9842,"User_hbm_xml"]],[9842,9842],[9854,9854]]],[1569563696154,["GJX@GJXAIOU",[[1,9855,"\n"]],[9854,9854],[9855,9855]]],[1569563763106,["GJX@GJXAIOU",[[1,9855,"@Getter\n@Setter\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n  \tprivate Integer user_id;\n  \tprivate String user_name;\n  \tprivate String user_password;\n\t/**\n\t * 一个用户可以有多个角色\n\t */\n  \tprivate Set<Role> setRole = new HashSet<Role>();\n}"]],[9855,9855],[10109,10109]]],[1569563766885,["GJX@GJXAIOU",[[-1,9846,"_hb_xm"]],[9852,9852],[9846,9846]]],[1569563768249,["GJX@GJXAIOU",[[-1,9846,"ml"]],[9848,9848],[9846,9846]]],[1569563770276,["GJX@GJXAIOU",[[1,9846,"_java"]],[9846,9846],[9851,9851]]],[1569563774349,["GJX@GJXAIOU",[[-1,9577,"hbm_xml"]],[9584,9584],[9577,9577]]],[1569563775543,["GJX@GJXAIOU",[[1,9577,"java"]],[9577,9577],[9581,9581]]],[1569563778668,["GJX@GJXAIOU",[[-1,10109,"\n"]],[10109,10109],[10108,10108]]],[1569563809656,["GJX@GJXAIOU",[[1,10230,"```"]],[10230,10230],[10233,10233]]],[1569563809704,["GJX@GJXAIOU",[[1,10233,"language\n```\n"]],[10233,10233],[10233,10241]]],[1569563812600,["GJX@GJXAIOU",[[-1,10233,"language"],[1,10241,"U"]],[10233,10241],[10234,10234]]],[1569563813257,["GJX@GJXAIOU",[[1,10234,"ser"]],[10234,10234],[10237,10237]]],[1569563841045,["GJX@GJXAIOU",[[1,10238,"\n"]],[10237,10237],[10238,10238]]],[1569563843483,["GJX@GJXAIOU",[[1,10238,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC \n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.User\" table=\"t_user\">\n\t\t<id name=\"user_id\" column=\"user_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"user_name\" column=\"user_name\"></property>\n\t\t<property name=\"user_password\" column=\"user_password\"></property>\n\t\t<!-- 在用户里面表示所有角色，使用set标签 \n\t\t\tname属性：角色set集合名称\n\t\t\ttable属性：第三张表名称\n\t\t-->\n\t\t<set name=\"setRole\" table=\"user_role\" cascade=\"save-update,delete\">\n\t\t\t<!-- key标签里面配置\n\t\t\t\t配置当前映射文件在第三张表外键名称\n\t\t\t -->\n\t\t\t<key column=\"userid\"></key>\n\t\t\t<!-- class：角色实体类全路径\n\t\t\t     column：角色在第三张表外键名称\n\t\t\t -->\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.Role\" column=\"roleid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>"]],[10238,10238],[11119,11119]]],[1569563857665,["GJX@GJXAIOU",[[1,11149,"```"]],[11149,11149],[11152,11152]]],[1569563857712,["GJX@GJXAIOU",[[1,11152,"language\n```\n"]],[11152,11152],[11152,11160]]],[1569563860584,["GJX@GJXAIOU",[[-1,11152,"language"],[1,11160,"R"]],[11152,11160],[11153,11153]]],[1569563862794,["GJX@GJXAIOU",[[1,11153,"ole_java"]],[11153,11153],[11161,11161]]],[1569563867350,["GJX@GJXAIOU",[[-1,11157,"java"]],[11161,11161],[11157,11157]]],[1569563870586,["GJX@GJXAIOU",[[1,11157,"hbm_xml"]],[11157,11157],[11164,11164]]],[1569563870842,["GJX@GJXAIOU",[[1,11165,"\n"]],[11164,11164],[11165,11165]]],[1569563881397,["GJX@GJXAIOU",[[1,11165,"<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.Role\" table=\"t_role\">\n\t\t<id name=\"role_id\" column=\"role_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"role_name\" column=\"role_name\"></property>\n\t\t<property name=\"role_memo\" column=\"role_memo\"></property>\n\t\t\n\t\t<!-- 在角色里面表示所有用户，使用set标签 -->\n\t\t<set name=\"setUser\" table=\"user_role\">\n\t\t\t<!-- 角色在第三张表外键 -->\n\t\t\t<key column=\"roleid\"></key>\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.User\" column=\"userid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>"]],[11165,11165],[11701,11701]]],[1569563895920,["GJX@GJXAIOU",[[1,10152,"``"]],[10152,10152],[10154,10154]]],[1569563897357,["GJX@GJXAIOU",[[1,10153,"private Set<Role> setRole = new HashSet<Role>();"]],[10153,10153],[10201,10201]]],[1569563917472,["GJX@GJXAIOU",[[1,10225,"``"]],[10225,10225],[10227,10227]]],[1569563918809,["GJX@GJXAIOU",[[1,10226,"private Set<User> setUser = new HashSet<User>();"]],[10226,10226],[10274,10274]]],[1569563925613,["GJX@GJXAIOU",[[-1,9765,"用户"]],[9767,9767],[9765,9765]]],[1569563926272,["GJX@GJXAIOU",[[1,9765,"jeu"]],[9765,9765],[9768,9768]]],[1569563926975,["GJX@GJXAIOU",[[-1,9765,"jeu"]],[9768,9768],[9765,9765]]],[1569563929565,["GJX@GJXAIOU",[[1,9765,"角色"]],[9765,9765],[9767,9767]]],[1569563931536,["GJX@GJXAIOU",[[-1,9771,"角色"]],[9773,9773],[9771,9771]]],[1569563933643,["GJX@GJXAIOU",[[1,9771,"用户"]],[9771,9771],[9773,9773]]],[1569563947469,["GJX@GJXAIOU",[[-1,11808," "]],[11809,11809],[11808,11808]]],[1569563947627,["GJX@GJXAIOU",[[-1,11809,"\n"]],[11808,11808],[11807,11807]]],[1569563950081,["GJX@GJXAIOU",[[1,11809,"- "]],[11809,11809],[11811,11811]]],[1569564106266,["GJX@GJXAIOU",[[1,11808,"上面配置中，连个"]],[11808,11808],[11816,11816]]],[1569564107365,["GJX@GJXAIOU",[[-1,11814,"连个"]],[11816,11816],[11814,11814]]],[1569564321376,["GJX@GJXAIOU",[[1,11814,"两 table"]],[11814,11814],[11821,11821]]],[1569564323078,["GJX@GJXAIOU",[[-1,11819,"le"]],[11821,11821],[11819,11819]]],[1569564324630,["GJX@GJXAIOU",[[-1,11814,"两 tab"]],[11819,11819],[11814,11814]]],[1569564331108,["GJX@GJXAIOU",[[1,11814,"两个 talbe"]],[11814,11814],[11822,11822]]],[1569564332114,["GJX@GJXAIOU",[[-1,11819,"lbe"]],[11822,11822],[11819,11819]]],[1569564335540,["GJX@GJXAIOU",[[1,11819,"ble的"]],[11819,11819],[11823,11823]]],[1569564335586,["GJX@GJXAIOU",[[1,11822," "]],[11823,11823],[11824,11824]]],[1569564356077,["GJX@GJXAIOU",[[1,11824,"值相同，用户配置中"]],[11824,11824],[11833,11833]]],[1569564393241,["GJX@GJXAIOU",[[1,11833,"的 <》"]],[11833,11833],[11837,11837]]],[1569564394253,["GJX@GJXAIOU",[[-1,11836,"》"]],[11837,11837],[11836,11836]]],[1569564394683,["GJX@GJXAIOU",[[1,11836,"》"]],[11836,11836],[11837,11837]]],[1569564395793,["GJX@GJXAIOU",[[-1,11836,"》"]],[11837,11837],[11836,11836]]],[1569564396451,["GJX@GJXAIOU",[[1,11836,">"]],[11836,11836],[11837,11837]]],[1569564398720,["GJX@GJXAIOU",[[1,11835,"`"]],[11835,11835],[11836,11836]]],[1569564400209,["GJX@GJXAIOU",[[1,11838,"`"]],[11838,11838],[11839,11839]]],[1569564410961,["GJX@GJXAIOU",[[1,11837,"key column'"]],[11837,11837],[11848,11848]]],[1569564412093,["GJX@GJXAIOU",[[-1,11847,"'"]],[11848,11848],[11847,11847]]],[1569564414080,["GJX@GJXAIOU",[[1,11847,"=\"\""]],[11847,11847],[11850,11850]]],[1569564416771,["GJX@GJXAIOU",[[1,11849,"userid"]],[11849,11849],[11855,11855]]],[1569564433686,["GJX@GJXAIOU",[[1,11858,"和角色中的"]],[11858,11858],[11863,11863]]],[1569564445041,["GJX@GJXAIOU",[[1,11863,"``"]],[11863,11863],[11865,11865]]],[1569564448941,["GJX@GJXAIOU",[[1,11864,"<>"]],[11864,11864],[11866,11866]]],[1569564461737,["GJX@GJXAIOU",[[1,11865,"many-to-may"]],[11865,11865],[11876,11876]]],[1569564462560,["GJX@GJXAIOU",[[-1,11875,"y"]],[11876,11876],[11875,11875]]],[1569564468210,["GJX@GJXAIOU",[[1,11875,"ny column'"]],[11875,11875],[11885,11885]]],[1569564469124,["GJX@GJXAIOU",[[-1,11884,"'"]],[11885,11885],[11884,11884]]],[1569564473547,["GJX@GJXAIOU",[[1,11884,"=\"useid\""]],[11884,11884],[11892,11892]]],[1569564491235,["GJX@GJXAIOU",[[1,11894,"，反之角色配置中的：``"]],[11894,11894],[11906,11906]]],[1569564493207,["GJX@GJXAIOU",[[1,11905,"<>"]],[11905,11905],[11907,11907]]],[1569564498093,["GJX@GJXAIOU",[[1,11906,"key column "]],[11906,11906],[11917,11917]]],[1569564499093,["GJX@GJXAIOU",[[-1,11916," "]],[11917,11917],[11916,11916]]],[1569564501399,["GJX@GJXAIOU",[[1,11916,"=\"\""]],[11916,11916],[11919,11919]]],[1569564512664,["GJX@GJXAIOU",[[1,11918,"user_role"]],[11918,11918],[11927,11927]]],[1569564524533,["GJX@GJXAIOU",[[-1,11918,"user_role"]],[11927,11927],[11918,11918]]],[1569564527814,["GJX@GJXAIOU",[[1,11918,"roleid"]],[11918,11918],[11924,11924]]],[1569564541681,["GJX@GJXAIOU",[[1,11927,"和用户中的``"]],[11927,11927],[11934,11934]]],[1569564542658,["GJX@GJXAIOU",[[1,11932," "]],[11932,11932],[11933,11933]]],[1569564544359,["GJX@GJXAIOU",[[1,11934,"<>"]],[11934,11934],[11936,11936]]],[1569564560172,["GJX@GJXAIOU",[[1,11935,"many-to-many column'"]],[11935,11935],[11955,11955]]],[1569564561366,["GJX@GJXAIOU",[[-1,11954,"'"]],[11955,11955],[11954,11954]]],[1569564562552,["GJX@GJXAIOU",[[1,11954,"="]],[11954,11954],[11955,11955]]],[1569564563705,["GJX@GJXAIOU",[[1,11955,"“”"]],[11955,11955],[11957,11957]]],[1569564565225,["GJX@GJXAIOU",[[-1,11955,"“”"]],[11957,11957],[11955,11955]]],[1569564566485,["GJX@GJXAIOU",[[1,11955,"\"\""]],[11955,11955],[11957,11957]]],[1569564571773,["GJX@GJXAIOU",[[1,11956,"userid"]],[11956,11956],[11962,11962]]],[1569564583140,["GJX@GJXAIOU",[[-1,11886,"useid"]],[11891,11891],[11886,11886]]],[1569564584853,["GJX@GJXAIOU",[[1,11886,"roleid"]],[11886,11886],[11892,11892]]],[1569564590841,["GJX@GJXAIOU",[[1,11967,"\n"]],[11967,11967],[11968,11968]]],[1569564667504,["GJX@GJXAIOU",[[1,11990,"```"]],[11990,11990],[11993,11993]]],[1569564669108,["GJX@GJXAIOU",[[-1,11990,"```"]],[11993,11993],[11990,11990]]],[1569564674748,["GJX@GJXAIOU",[[1,11989,"```"]],[11989,11989],[11992,11992]]],[1569564674796,["GJX@GJXAIOU",[[1,11992,"language\n```\n"]],[11992,11992],[11992,12000]]],[1569564684780,["GJX@GJXAIOU",[[-1,11992,"language"],[1,12000,"h"]],[11992,12000],[11993,11993]]],[1569564695968,["GJX@GJXAIOU",[[1,11993,"ibernate_cfg_xml"]],[11993,11993],[12009,12009]]],[1569564696351,["GJX@GJXAIOU",[[1,12010,"\n"]],[12009,12009],[12010,12010]]],[1569564699546,["GJX@GJXAIOU",[[1,12010,"<>"]],[12010,12010],[12012,12012]]],[1569564706155,["GJX@GJXAIOU",[[1,12011,"mapping resout"]],[12011,12011],[12025,12025]]],[1569564706797,["GJX@GJXAIOU",[[-1,12024,"t"]],[12025,12025],[12024,12024]]],[1569564713633,["GJX@GJXAIOU",[[1,12024,"rce=\"\"/"]],[12024,12024],[12031,12031]]],[1569564717609,["GJX@GJXAIOU",[[1,12029,"c."]],[12029,12029],[12031,12031]]],[1569564718420,["GJX@GJXAIOU",[[-1,12030,"."]],[12031,12031],[12030,12030]]],[1569564729099,["GJX@GJXAIOU",[[1,12030,"om/gjxaiou/manytomant"]],[12030,12030],[12051,12051]]],[1569564730030,["GJX@GJXAIOU",[[-1,12050,"t"]],[12051,12051],[12050,12050]]],[1569564739534,["GJX@GJXAIOU",[[1,12050,"y/User.hbm.xml"]],[12050,12050],[12064,12064]]],[1569564746054,["GJX@GJXAIOU",[[1,12068,"\n"]],[12067,12067],[12068,12068]]],[1569564746662,["GJX@GJXAIOU",[[1,12068,"<mapping resource=\"com/gjxaiou/manytomany/User.hbm.xml\"/>"]],[12068,12068],[12125,12125]]],[1569564751037,["GJX@GJXAIOU",[[-1,12110,"User"]],[12114,12114],[12110,12110]]],[1569564752969,["GJX@GJXAIOU",[[1,12110,"Role"]],[12110,12110],[12114,12114]]],[1569564759829,["GJX@GJXAIOU",[[-1,12132,"\n"]],[12132,12132],[12131,12131]]],[1569564790179,["GJX@GJXAIOU",[[1,12138,"![测试结果]($resource/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)"]],[12137,12137],[12198,12198]]],[1569564792613,["GJX@GJXAIOU",[[-1,12136," "]],[12137,12137],[12136,12136]]],[1569564793808,["GJX@GJXAIOU",[[-1,12136,"\n"]],[12136,12136],[12135,12135]]],[1569564796174,["GJX@GJXAIOU",[[1,12196,"\n"]],[12195,12195],[12196,12196]]],[1569564815002,["GJX@GJXAIOU",[[1,12200,"()"]],[12200,12200],[12202,12202]]],[1569564816381,["GJX@GJXAIOU",[[-1,12200,"()"]],[12202,12202],[12200,12200]]],[1569564816915,["GJX@GJXAIOU",[[1,12201," "]],[12200,12200],[12201,12201]]],[1569564818220,["GJX@GJXAIOU",[[1,12201,"（）"]],[12201,12201],[12203,12203]]],[1569564819506,["GJX@GJXAIOU",[[1,12202,"二"]],[12202,12202],[12203,12203]]],[1569564820814,["GJX@GJXAIOU",[[1,12197,"\n"]],[12196,12196],[12197,12197]]],[1569564827375,["GJX@GJXAIOU",[[1,12224,"- "]],[12224,12224],[12226,12226]]],[1569564834392,["GJX@GJXAIOU",[[1,12238," "]],[12238,12238],[12239,12239]]],[1569564835569,["GJX@GJXAIOU",[[1,12242," "]],[12242,12242],[12243,12243]]],[1569564838157,["GJX@GJXAIOU",[[1,12258," "]],[12258,12258],[12259,12259]]],[1569564840124,["GJX@GJXAIOU",[[1,12257," "]],[12257,12257],[12258,12258]]],[1569564849611,["GJX@GJXAIOU",[[1,12279,"``"]],[12279,12279],[12281,12281]]],[1569564851764,["GJX@GJXAIOU",[[1,12280,"<>"]],[12280,12280],[12282,12282]]],[1569564856887,["GJX@GJXAIOU",[[1,12281,"set name"]],[12281,12281],[12289,12289]]],[1569564865072,["GJX@GJXAIOU",[[1,12289,"=\"\""]],[12289,12289],[12292,12292]]],[1569564869563,["GJX@GJXAIOU",[[1,12291,"setRole"]],[12291,12291],[12298,12298]]],[1569564877573,["GJX@GJXAIOU",[[1,12299," table=\"\""]],[12299,12299],[12308,12308]]],[1569564883400,["GJX@GJXAIOU",[[1,12307,"user_role"]],[12307,12307],[12316,12316]]],[1569564894817,["GJX@GJXAIOU",[[1,12317," cascade=\"\""]],[12317,12317],[12328,12328]]],[1569564901774,["GJX@GJXAIOU",[[1,12327,"save-update"]],[12327,12327],[12338,12338]]],[1569564914024,["GJX@GJXAIOU",[[1,12344,"- "]],[12344,12344],[12346,12346]]],[1569564919182,["GJX@GJXAIOU",[[-1,12356,"（1）"]],[12356,12359],[12356,12356]]],[1569564921748,["GJX@GJXAIOU",[[1,12388,"\n\t"]],[12388,12388],[12390,12390]]],[1569564975431,["GJX@GJXAIOU",[[-1,12387,"\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testSave() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//添加两个用户，为每个用户添加两个角色\n\t\t\t//1 创建对象\n\t\t\tUser user1 = new User();\n\t\t\tuser1.setUser_name(\"lucy\");\n\t\t\tuser1.setUser_password(\"123\");\n\t\t\t\n\t\t\tUser user2 = new User();\n\t\t\tuser2.setUser_name(\"mary\");\n\t\t\tuser2.setUser_password(\"456\");\n\t\t\t\n\t\t\tRole r1 = new Role();\n\t\t\tr1.setRole_name(\"总经理\");\n\t\t\tr1.setRole_memo(\"总经理\");\n\t\t\t\n\t\t\tRole r2 = new Role();\n\t\t\tr2.setRole_name(\"秘书\");\n\t\t\tr2.setRole_memo(\"秘书\");\n\t\t\t\n\t\t\tRole r3 = new Role();\n\t\t\tr3.setRole_name(\"保安\");\n\t\t\tr3.setRole_memo(\"保安\");\n\t\t\t\n\t\t\t//2 建立关系，把角色放到用户里面\n\t\t\t// user1 -- r1/r2\n\t\t\tuser1.getSetRole().add(r1);\n\t\t\tuser1.getSetRole().add(r2);\n\t\t\t\n\t\t\t// user2 -- r2/r3\n\t\t\tuser2.getSetRole().add(r2);\n\t\t\tuser2.getSetRole().add(r3);\n\t\t\t\n\t\t\t//3 保存用户\n\t\t\tsession.save(user1);\n\t\t\tsession.save(user2);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n \n"]],[12387,13619],[12387,12387]]],[1569564977362,["GJX@GJXAIOU",[[1,12387,"·"]],[12387,12387],[12388,12388]]],[1569564978759,["GJX@GJXAIOU",[[-1,12387,"·"]],[12388,12388],[12387,12387]]],[1569564980176,["GJX@GJXAIOU",[[1,12387,"```"]],[12387,12387],[12390,12390]]],[1569564980223,["GJX@GJXAIOU",[[1,12390,"language\n```\n"]],[12390,12390],[12390,12398]]],[1569564982832,["GJX@GJXAIOU",[[-1,12390,"language"],[1,12398,"j"]],[12390,12398],[12391,12391]]],[1569564982986,["GJX@GJXAIOU",[[1,12391,"a"]],[12391,12391],[12392,12392]]],[1569564986398,["GJX@GJXAIOU",[[-1,12390,"ja"]],[12392,12392],[12390,12390]]],[1569564996384,["GJX@GJXAIOU",[[1,12390,"Hibernatem"]],[12390,12390],[12400,12400]]],[1569564997069,["GJX@GJXAIOU",[[-1,12399,"m"]],[12400,12400],[12399,12399]]],[1569565002666,["GJX@GJXAIOU",[[1,12399,"ManyToMant"]],[12399,12399],[12409,12409]]],[1569565003543,["GJX@GJXAIOU",[[-1,12408,"t"]],[12409,12409],[12408,12408]]],[1569565005249,["GJX@GJXAIOU",[[1,12408,"y_xm"]],[12408,12408],[12412,12412]]],[1569565005889,["GJX@GJXAIOU",[[-1,12409,"_xm"]],[12412,12412],[12409,12409]]],[1569565007609,["GJX@GJXAIOU",[[1,12409,"-"]],[12409,12409],[12410,12410]]],[1569565008388,["GJX@GJXAIOU",[[-1,12409,"-"]],[12410,12410],[12409,12409]]],[1569565008713,["GJX@GJXAIOU",[[1,12409,")"]],[12409,12409],[12410,12410]]],[1569565009431,["GJX@GJXAIOU",[[-1,12409,")"]],[12410,12410],[12409,12409]]],[1569565011011,["GJX@GJXAIOU",[[1,12409,"_java"]],[12409,12409],[12414,12414]]],[1569565011173,["GJX@GJXAIOU",[[1,12415,"\n"]],[12414,12414],[12415,12415]]],[1569565015076,["GJX@GJXAIOU",[[1,12415,"public class HibernateManytoMany {\n\t\n\t//演示维护第三张表\n\t@Test\n\tpublic void testTable2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 让某个用户没有有某个角色\n\t\t\tUser user = session.get(User.class, 2);\n\t\t\tRole role = session.get(Role.class, 3);\n\t\t\t\n\t\t\t//2 从用户里面把角色去掉\n\t\t\tuser.getSetRole().remove(role);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示维护第三张表\n\t@Test\n\tpublic void testTable1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 让某个用户有某个角色\n\t\t\t//让lucy有经纪人角色\n\t\t\t//1 查询lucy和经纪人\n\t\t\tUser lucy = session.get(User.class, 1);\n\t\t\tRole role = session.get(Role.class, 1);\n\t\t\t\n\t\t\t//2 把角色放到用户的set集合里面\n\t\t\tlucy.getSetRole().add(role);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testDelete() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\tUser user = session.get(User.class, 1);\n\t\t\tsession.delete(user);\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testSave() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//添加两个用户，为每个用户添加两个角色\n\t\t\t//1 创建对象\n\t\t\tUser user1 = new User();\n\t\t\tuser1.setUser_name(\"lucy\");\n\t\t\tuser1.setUser_password(\"123\");\n\t\t\t\n\t\t\tUser user2 = new User();\n\t\t\tuser2.setUser_name(\"mary\");\n\t\t\tuser2.setUser_password(\"456\");\n\t\t\t\n\t\t\tRole r1 = new Role();\n\t\t\tr1.setRole_name(\"总经理\");\n\t\t\tr1.setRole_memo(\"总经理\");\n\t\t\t\n\t\t\tRole r2 = new Role();\n\t\t\tr2.setRole_name(\"秘书\");\n\t\t\tr2.setRole_memo(\"秘书\");\n\t\t\t\n\t\t\tRole r3 = new Role();\n\t\t\tr3.setRole_name(\"保安\");\n\t\t\tr3.setRole_memo(\"保安\");\n\t\t\t\n\t\t\t//2 建立关系，把角色放到用户里面\n\t\t\t// user1 -- r1/r2\n\t\t\tuser1.getSetRole().add(r1);\n\t\t\tuser1.getSetRole().add(r2);\n\t\t\t\n\t\t\t// user2 -- r2/r3\n\t\t\tuser2.getSetRole().add(r2);\n\t\t\tuser2.getSetRole().add(r3);\n\t\t\t\n\t\t\t//3 保存用户\n\t\t\tsession.save(user1);\n\t\t\tsession.save(user2);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n}"]],[12415,12415],[15603,15603]]],[1569565024839,["GJX@GJXAIOU",[[-1,12457,"维护第三张表\n\t@Test\n\tpublic void testTable2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 让某个用户没有有某个角色\n\t\t\tUser user = session.get(User.class, 2);\n\t\t\tRole role = session.get(Role.class, 3);\n\t\t\t\n\t\t\t//2 从用户里面把角色去掉\n\t\t\tuser.getSetRole().remove(role);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示维护第三张表\n\t@Test\n\tpublic void testTable1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 让某个用户有某个角色\n\t\t\t//让lucy有经纪人角色\n\t\t\t//1 查询lucy和经纪人\n\t\t\tUser lucy = session.get(User.class, 1);\n\t\t\tRole role = session.get(Role.class, 1);\n\t\t\t\n\t\t\t//2 把角色放到用户的set集合里面\n\t\t\tlucy.getSetRole().add(role);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testDelete() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\tUser user = session.get(User.class, 1);\n\t\t\tsession.delete(user);\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n\t\n\t//演示"]],[12451,14373],[12451,12451]]],[1569565027951,["GJX@GJXAIOU",[[-1,12449,"\n"]],[12450,12450],[12449,12449]]],[1569565042054,["GJX@GJXAIOU",[[1,13687,"\n"]],[13684,13684],[13685,13685]]],[1569565044230,["GJX@GJXAIOU",[[1,13685,"ceshi"]],[13685,13685],[13690,13690]]],[1569565045389,["GJX@GJXAIOU",[[-1,13685,"ceshi"]],[13690,13690],[13685,13685]]],[1569565048532,["GJX@GJXAIOU",[[1,13685,"测试结果："]],[13685,13685],[13690,13690]]],[1569565048792,["GJX@GJXAIOU",[[1,13693,"\n"]],[13690,13690],[13691,13691]]],[1569565063536,["GJX@GJXAIOU",[[1,13691,"| userid | roleid|"]],[13691,13691],[13709,13709]]],[1569565064413,["GJX@GJXAIOU",[[1,13712,"\n"]],[13709,13709],[13710,13710]]],[1569565070156,["GJX@GJXAIOU",[[1,13710,"|---|---|"]],[13710,13710],[13719,13719]]],[1569565070592,["GJX@GJXAIOU",[[1,13720,"|   |   |\n"]],[13719,13719],[13721,13724]]],[1569565072795,["GJX@GJXAIOU",[[-1,13721,"   "],[1,13724,"1"]],[13721,13724],[13722,13722]]],[1569565073969,["GJX@GJXAIOU",[[-1,13723,"   "],[1,13726,"1"]],[13723,13726],[13724,13724]]],[1569565076577,["GJX@GJXAIOU",[[1,13724,"\n"]],[13724,13724],[13725,13725]]],[1569565077517,["GJX@GJXAIOU",[[-1,13724,"\n"]],[13725,13725],[13724,13724]]],[1569565080022,["GJX@GJXAIOU",[[-1,13724,"|"]],[13725,13725],[13724,13724]]],[1569565082189,["GJX@GJXAIOU",[[-1,13718,"|"]],[13719,13719],[13718,13718]]],[1569565082885,["GJX@GJXAIOU",[[-1,13708,"|"]],[13709,13709],[13708,13708]]],[1569565085814,["GJX@GJXAIOU",[[1,13723,"|   |   \n"]],[13722,13722],[13724,13727]]],[1569565088257,["GJX@GJXAIOU",[[-1,13724,"   "],[1,13727,"1"]],[13724,13727],[13725,13725]]],[1569565089799,["GJX@GJXAIOU",[[-1,13726,"   "],[1,13729,"2"]],[13726,13729],[13727,13727]]],[1569565090121,["GJX@GJXAIOU",[[1,13728,"|   |   \n"]],[13727,13727],[13729,13732]]],[1569565092472,["GJX@GJXAIOU",[[-1,13729,"   "],[1,13732,"2"]],[13729,13732],[13730,13730]]],[1569565094224,["GJX@GJXAIOU",[[-1,13731,"   "],[1,13734,"2"]],[13731,13734],[13732,13732]]],[1569565094720,["GJX@GJXAIOU",[[1,13733,"|   |   \n"]],[13732,13732],[13734,13737]]],[1569565096611,["GJX@GJXAIOU",[[-1,13734,"   "],[1,13737,"2"]],[13734,13737],[13735,13735]]],[1569565098516,["GJX@GJXAIOU",[[-1,13736,"   "],[1,13739,"3"]],[13736,13739],[13737,13737]]],[1569565099702,["GJX@GJXAIOU",[[1,13738,"|   |   \n"]],[13737,13737],[13739,13742]]],[1569565100628,["GJX@GJXAIOU",[[-1,13739,"   |"]],[13739,13742],[13738,13738]]],[1569565103933,["GJX@GJXAIOU",[[-1,13738,"|   "]],[13738,13742],[13738,13738]]],[1569565136811,["GJX@GJXAIOU",[[1,13745,"()"]],[13745,13745],[13747,13747]]],[1569565138124,["GJX@GJXAIOU",[[-1,13745,"()"]],[13747,13747],[13745,13745]]],[1569565138866,["GJX@GJXAIOU",[[1,13745,"（）"]],[13745,13745],[13747,13747]]],[1569565140506,["GJX@GJXAIOU",[[1,13746,"三"]],[13746,13746],[13747,13747]]],[1569565149152,["GJX@GJXAIOU",[[1,13790,"\n"]],[13789,13789],[13790,13790]]],[1569565150865,["GJX@GJXAIOU",[[1,13790,"··"]],[13790,13790],[13792,13792]]],[1569565151941,["GJX@GJXAIOU",[[-1,13790,"··"]],[13792,13792],[13790,13790]]],[1569565152704,["GJX@GJXAIOU",[[1,13790,"``"]],[13790,13790],[13792,13792]]],[1569565154825,["GJX@GJXAIOU",[[1,13791,"<>"]],[13791,13791],[13793,13793]]],[1569565163073,["GJX@GJXAIOU",[[1,13792,"set casca"]],[13792,13792],[13801,13801]]],[1569565168835,["GJX@GJXAIOU",[[1,13801,"de=\"\""]],[13801,13801],[13806,13806]]],[1569565178916,["GJX@GJXAIOU",[[1,13805,"save-update,delete"]],[13805,13805],[13823,13823]]],[1569565201828,["GJX@GJXAIOU",[[1,13836,"```"]],[13836,13836],[13839,13839]]],[1569565201878,["GJX@GJXAIOU",[[1,13839,"language\n```\n"]],[13839,13839],[13839,13847]]],[1569565203945,["GJX@GJXAIOU",[[-1,13839,"language"],[1,13847,"j"]],[13839,13847],[13840,13840]]],[1569565204465,["GJX@GJXAIOU",[[1,13840,"ava"]],[13840,13840],[13843,13843]]],[1569565204651,["GJX@GJXAIOU",[[1,13844,"\n"]],[13843,13843],[13844,13844]]],[1569565214520,["GJX@GJXAIOU",[[1,13844,"User user = session.get();"]],[13844,13844],[13870,13870]]],[1569565221385,["GJX@GJXAIOU",[[1,13868,"User.class,1"]],[13868,13868],[13880,13880]]],[1569565222140,["GJX@GJXAIOU",[[-1,13879,"1"]],[13880,13880],[13879,13879]]],[1569565222672,["GJX@GJXAIOU",[[1,13879," 1"]],[13879,13879],[13881,13881]]],[1569565224381,["GJX@GJXAIOU",[[1,13884,"\n"]],[13883,13883],[13884,13884]]],[1569565231833,["GJX@GJXAIOU",[[1,13884,"session.delete();"]],[13884,13884],[13901,13901]]],[1569565234223,["GJX@GJXAIOU",[[1,13899,"user"]],[13899,13899],[13903,13903]]],[1569565241054,["GJX@GJXAIOU",[[1,13919,"()"]],[13919,13919],[13921,13921]]],[1569565242220,["GJX@GJXAIOU",[[-1,13919,"()"]],[13921,13921],[13919,13919]]],[1569565243129,["GJX@GJXAIOU",[[1,13919,"（）"]],[13919,13919],[13921,13921]]],[1569565245130,["GJX@GJXAIOU",[[1,13920,"四"]],[13920,13920],[13921,13921]]],[1569565254484,["GJX@GJXAIOU",[[-1,13931,"1"],[1,13932,"\n"]],[13931,13932],[13932,13932]]],[1569565255697,["GJX@GJXAIOU",[[1,13932,"-"]],[13932,13932],[13933,13933]]],[1569565261597,["GJX@GJXAIOU",[[-1,13959,"2 "]],[13959,13961],[13959,13959]]],[1569565268385,["GJX@GJXAIOU",[[1,13959,"- "]],[13959,13959],[13961,13961]]],[1569565274277,["GJX@GJXAIOU",[[1,13972,"  - "]],[13972,13972],[13976,13976]]],[1569565276463,["GJX@GJXAIOU",[[-1,13992,"\n"]],[13993,13993],[13992,13992]]],[1569565277801,["GJX@GJXAIOU",[[1,13992,"  - "]],[13992,13992],[13996,13996]]],[1569565280576,["GJX@GJXAIOU",[[-1,14010,"（1）"]],[14010,14013],[14010,14010]]],[1569565282923,["GJX@GJXAIOU",[[1,14010,"    - "]],[14010,14010],[14016,14016]]],[1569565288264,["GJX@GJXAIOU",[[-1,14035,"3"]],[14035,14036],[14035,14035]]],[1569565288725,["GJX@GJXAIOU",[[-1,14034,"\n"]],[14035,14035],[14034,14034]]],[1569565289671,["GJX@GJXAIOU",[[1,14034,"-"]],[14034,14034],[14035,14035]]],[1569565336140,["GJX@GJXAIOU",[[1,14064,"·"]],[14064,14064],[14065,14065]]],[1569565337316,["GJX@GJXAIOU",[[-1,14064,"·"]],[14065,14065],[14064,14064]]],[1569565338265,["GJX@GJXAIOU",[[1,14064,"```"]],[14064,14064],[14067,14067]]],[1569565338316,["GJX@GJXAIOU",[[1,14067,"language\n```\n"]],[14067,14067],[14067,14075]]],[1569565339945,["GJX@GJXAIOU",[[-1,14067,"language"],[1,14075,"j"]],[14067,14075],[14068,14068]]],[1569565340412,["GJX@GJXAIOU",[[1,14068,"ava"]],[14068,14068],[14071,14071]]],[1569565342575,["GJX@GJXAIOU",[[-1,14067,"java"]],[14071,14071],[14067,14067]]],[1569565365814,["GJX@GJXAIOU",[[1,14067,"HibernateManyToMany_java"]],[14067,14067],[14091,14091]]],[1569565366110,["GJX@GJXAIOU",[[1,14092,"\n"]],[14091,14091],[14092,14092]]],[1569565369953,["GJX@GJXAIOU",[[1,14092,"\t\t\t// 让某个用户有某个角色\n\t\t\t//让lucy有经纪人角色\n\t\t\t//1 查询lucy和经纪人\n\t\t\tUser lucy = session.get(User.class, 1);\n\t\t\tRole role = session.get(Role.class, 1);\n\t\t\t\n\t\t\t//2 把角色放到用户的set集合里面\n\t\t\tlucy.getSetRole().add(role);"]],[14092,14092],[14288,14288]]],[1569565374544,["GJX@GJXAIOU",[[-1,14094,"\t"],[-1,14109,"\t"],[-1,14128,"\t"],[-1,14144,"\t"],[-1,14189,"\t"],[-1,14232,"\t"],[-1,14234,"\t"],[-1,14257,"\t"]],[14095,14288],[14094,14280]]],[1569565375029,["GJX@GJXAIOU",[[-1,14093,"\t"],[-1,14108,"\t"],[-1,14125,"\t"],[-1,14141,"\t"],[-1,14184,"\t"],[-1,14226,"\t"],[-1,14228,"\t"],[-1,14250,"\t"]],[14094,14280],[14093,14272]]],[1569565375636,["GJX@GJXAIOU",[[-1,14092,"\t"],[-1,14107,"\t"],[-1,14122,"\t"],[-1,14138,"\t"],[-1,14179,"\t"],[-1,14220,"\t"],[-1,14222,"\t"],[-1,14243,"\t"]],[14093,14272],[14092,14264]]],[1569565416633,["GJX@GJXAIOU",[[1,14304,"···"]],[14304,14304],[14307,14307]]],[1569565418463,["GJX@GJXAIOU",[[-1,14304,"···"]],[14307,14307],[14304,14304]]],[1569565419769,["GJX@GJXAIOU",[[1,14304,"```"]],[14304,14304],[14307,14307]]],[1569565419842,["GJX@GJXAIOU",[[1,14307,"language\n```\n"]],[14307,14307],[14307,14315]]],[1569565422616,["GJX@GJXAIOU",[[-1,14307,"language"],[1,14315,"H"]],[14307,14315],[14308,14308]]],[1569565423745,["GJX@GJXAIOU",[[1,14308,"Ib"]],[14308,14308],[14310,14310]]],[1569565424560,["GJX@GJXAIOU",[[-1,14308,"Ib"]],[14310,14310],[14308,14308]]],[1569565436917,["GJX@GJXAIOU",[[1,14308,"ibernateManyToMany_java"]],[14308,14308],[14331,14331]]],[1569565437357,["GJX@GJXAIOU",[[1,14332,"\n"]],[14331,14331],[14332,14332]]],[1569565440966,["GJX@GJXAIOU",[[1,14332,"\t\t\t// 让某个用户没有有某个角色\n\t\t\tUser user = session.get(User.class, 2);\n\t\t\tRole role = session.get(Role.class, 3);\n\t\t\t\n\t\t\t//2 从用户里面把角色去掉\n\t\t\tuser.getSetRole().remove(role);"]],[14332,14332],[14493,14493]]],[1569565445316,["GJX@GJXAIOU",[[-1,14334,"\t"],[-1,14351,"\t"],[-1,14394,"\t"],[-1,14439,"\t"],[-1,14441,"\t"],[-1,14459,"\t"]],[14335,14493],[14334,14487]]],[1569565445808,["GJX@GJXAIOU",[[-1,14333,"\t"],[-1,14350,"\t"],[-1,14392,"\t"],[-1,14435,"\t"],[-1,14437,"\t"],[-1,14454,"\t"]],[14334,14487],[14333,14481]]],[1569565446284,["GJX@GJXAIOU",[[-1,14332,"\t"],[-1,14349,"\t"],[-1,14390,"\t"],[-1,14431,"\t"],[-1,14433,"\t"],[-1,14449,"\t"]],[14333,14481],[14332,14475]]],[1569565456167,["GJX@GJXAIOU",[[-1,14487,"\n"]],[14487,14487],[14486,14486]]],[1569565456358,["GJX@GJXAIOU",[[-1,14486,"\n"]],[14486,14486],[14485,14485]]],[1569565456638,["GJX@GJXAIOU",[[-1,14485,"\n"]],[14485,14485],[14484,14484]]],[1569565456871,["GJX@GJXAIOU",[[-1,14484,"\n"]],[14484,14484],[14483,14483]]],[1569565457107,["GJX@GJXAIOU",[[-1,14483,"\n"]],[14483,14483],[14482,14482]]],[1569565457483,["GJX@GJXAIOU",[[-1,14482,"\n"]],[14482,14482],[14481,14481]]]],null,"GJX@GJXAIOU"],["0c036f6e-c2bb-458e-9ce3-77d2557ccbef",1569670873393,"# FrameDay04_3 Hibernate\n\n**上节内容**\n* 实体类编写规则\n* hibernate主键生成策略\n* 实体类操作\n  * crud操作\n  * 实体类对象状态\n* hibernate的一级缓存\n* hibernate的事务操作\n  * 事务代码规则写法\n* hibernate其他的api（查询）\n\n**今天内容**\n\n- 列表功能实现\n- 表与表之间关系回顾\n  - 一对多（客户和联系人）\n  - 多对多（用户和角色）\n- hibernate一对多操作\n  - 一对多映射配置\n  - 一对多级联保存\n  - 一对多级联删除\n  - inverse属性\n- hibernate多对多操作\n  - 多对多映射配置\n  - 多对多级联保存（重点）\n  - 多对多级联删除\n  - 维护第三张表\n\n## 客户列表功能\n\n- sessionFactory已经关闭了，不需要关闭\n \n \n\n2 dao里面代码\n\t//使用hibernate实现查询列表\n\tpublic List<Customer> findAll() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//查询所有记录\n\t\t\tCriteria criteria = session.createCriteria(Customer.class);\n\t\t\tList<Customer> list = criteria.list();\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t\treturn list;\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n//\t\t\tsessionFactory.close();\n\t\t}\n\t\treturn null;\n\t}\n\n## 一、表与表之间关系回顾（重点）\n\n- 一对多\n  - 例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类\n  - 客户和联系人是一对多关系\n客户：与公司有业务往来，例如百度、新浪；\n联系人：公司里面的员工，百度里面有很多员工，联系员工；\n    - 客户是一，联系人是多\n    - 一个客户里面有多个联系人，一个联系人只能属于一个客户\n  - **一对多建表：通过外键建立关系**\n![一对多建表示例]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)\n\n- 多对多\n  - 例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单\n  - 用户和角色多对多关系\n    - 用户： 小王、小马、小宋\n    - 角色：总经理、秘书、司机、保安\n  比如小王 可以 是总经理，可以是司机\n  比如小宋 可以是司机，可以是秘书，可以保安\n  比如小马 可以是 秘书，可以是总经理\n    - 一个用户里面可以有多个角色，一个角色里面可以有多个用户\n  - **多对多建表：创建第三张表维护关系**\n\n![多对多建表示例]($resource/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)\n\n- 一对一\n  - 例如班级与班长之间的关系，一个班级只能有一个班长，一个班长只能在一个班级任职；\n\n## 二、Hibernate的一对多操作（重点）\n\n### （一）一对多映射配置（重点）\n\n以客户和联系人为例：客户是一，联系人是多\n\n- 第一步：创建两个实体类，客户和联系人\n```Customer_java\n@Setter\n@Getter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Customer {\n\tprivate Integer cid;\n\tprivate String custName;\n\tprivate String custLevel;\n\tprivate String custSource;\n\tprivate String custPhone;\n\tprivate String custMobile;\n\t/**\n\t * 在客户实体类里面表示多个联系人，一个客户有多个联系人\n\t * hibernate要求使用集合表示多的数据，使用set集合\n\t */\n\tprivate Set<LinkMan> setLinkMan = new HashSet<LinkMan>();\n}\n```\n\n```LinkMan_java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class LinkMan {\n\tprivate Integer lkm_id;\n\tprivate String lkm_name;\n\tprivate String lkm_gender;\n\tprivate String lkm_phone;\n\t/**\n\t *  在联系人实体类里面表示所属客户,一个联系人只能属于一个客户\n\t */\n\tprivate Customer customer;\n}\n```\n\n- 第二步 让两个实体类之间互相表示\n  - 在客户实体类里面表示多个联系人：一个客户里面有多个联系人\n需要在 Customer 实体类中添加`private Set<LinkMan> setLinkMan = new HashSet<LinkMan>();` 以及对应的 get、set 方法，完整的代码见上面；\n\n  - 在联系人实体类里面表示所属客户：一个联系人只能属于一个客户\n在 LinkMan 实体类中添加 `private Customer customer;` 以及对应的 get、set 方法，完整的代码见上面；\n\n- 第三步：配置映射关系\n一般一个实体类对应一个映射文件\n**首先把映射最基本配置完成，然后在映射文件中，配置一对多关系**\n  - 在客户映射文件中，表示所有联系人\n```Customer_hbm_xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC \n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping>\n\t<class name=\"com.gjxaiou.entity.Customer\" table=\"t_customer\">\n\t\t<id name=\"cid\" column=\"cid\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"custName\" column=\"custName\"></property>\n\t\t<property name=\"custLevel\" column=\"custLevel\"></property>\n\t\t<property name=\"custSource\" column=\"custSource\"></property>\n\t\t<property name=\"custPhone\" column=\"custPhone\"></property>\n\t\t<property name=\"custMobile\" column=\"custMobile\"></property>\n\t\t\n\t\t<!-- 在客户映射文件中，使用 set 标签表示所有联系人 \n\t\t\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称\t\t\t     \n\t\t\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n\t\t-->\n\t\t<set name=\"setLinkMan\" inverse=\"true\">\n\t\t\t<!-- 一对多建表，需要外键建立关系\n\t\t\t\thibernate机制：双向维护外键，在一和多那一方都配置外键\t\n\t\t\t\tcolumn属性值：外键名称\n\t\t\t -->\n\t\t\t<key column=\"clid\"></key>\n\t\t\t<!-- 客户所有的联系人，class里面写联系人实体类全路径 -->\n\t\t\t<one-to-many class=\"com.gjxaiou.entity.LinkMan\"/>\n\t\t</set>\n\t</class>\n</hibernate-mapping>\n```\n \n  - 在联系人映射文件中，表示所属客户\n```LinkMan_hbm_java\n<!--前面的基础配置同上，省略-->\n<!-- 表示联系人所属客户 \n\tname属性：因为在联系人实体类使用customer对象表示，写customer名称\n\tclass属性：customer全路径\n\tcolumn属性：外键名称\n-->\n<many-to-one name=\"customer\" class=\"com.gjxaiou.entity.Customer\" column=\"clid\"></many-to-one>\n```\n\n- 第四步 创建核心配置文件，把映射文件引入到核心配置文件中\n```hibernate_cfg_xml\n<!-- 第三部分： 把映射文件放到核心配置文件中 必须的-->\n<mapping resource=\"com/gjxaiou/entity/Customer.hbm.xml\"/>\n<mapping resource=\"com/gjxaiou/entity/LinkMan.hbm.xml\"/>\n```\n\n测试： \n![一对多配置测试结果]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)\n\n\n### （二）一对多级联操作\n\n- 级联操作\n  - 级联保存\n      添加一个客户，为这个客户添加多个联系人\n  - 级联删除\n      删除某一个客户，这个客户里面的所有的联系人也删除\n\n#### 1. 一对多级联保存\n 需求：添加客户，为这个客户添加一个联系人\n\n- **复杂写法**：\n首先这里以及下面都会使用昨天配置的 HibernateUtils 类\n```java\npublic class HibernateUtils {\n\n\tstatic Configuration cfg = null;\n\tstatic SessionFactory sessionFactory = null;\n\t//静态代码块实现\n\tstatic {\n\t\t//加载核心配置文件\n\t\tcfg = new Configuration();\n\t\tcfg.configure();\n\t\tsessionFactory = cfg.buildSessionFactory();\n\t}\n\t\n\t//提供返回与本地线程帮的session的方法\n\tpublic static Session getSessionobject() {\n\t\treturn sessionFactory.getCurrentSession();\n\t}\n\t\n\t//提供方法返回sessionFactory\n\tpublic static SessionFactory getSessionFactory() {\n\t\treturn sessionFactory;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n}\n\n```\n\n使用方法\n```HibernateOneToMany_java\npublic class HibernateOneToMany{\n    //演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo1() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"vip\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"lucy\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t\n\t\t\t//2 在客户表示所有联系人，在联系人表示客户\t\t\n\t\t\t// 建立客户对象和联系人对象关系\n\t\t\t//2.1 把联系人对象 放到客户对象的set集合里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//2.2 把客户对象放到联系人里面\n\t\t\tlinkman.setCustomer(customer);\n\t\t\t\n\t\t\t//3 保存到数据库\n\t\t\tsession.save(customer);\n\t\t\tsession.save(linkman);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n}\n```\n运行结果：\n表一中的 cid 和表二中的 clid 相对应；\n|cid | custName | custLevel | custSource | custPhone | custMobie | \n|---|---|---|---|---|---|\n|1|百度|vip|网络|110|999|\n\n|lkmid | lkm_name |lkm_gender|lkm_phone|clid | \n|---|---|---|---|---|\n|2|lucy|男|911|1|\n\n- **简化写法**\n  - 一般根据客户添加联系人\n第一步 在客户映射文件中进行配置\n`<set name=\"setLinkMan\" cascade=\"save-update\">`\n  - 在客户映射文件里面set标签进行配置\n \n\n第二步 创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了\n```java\n//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"普通客户\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"小宏\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t//2 把联系人放到客户里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//3 保存客户\n\t\t\tsession.save(customer);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n```\n\n\n\n#### 2. 一对多级联删除\n 需求：删除某个客户，把客户里面所有的联系人删除\n\n**具体实现**\n- 第一步： 在客户映射文件set标签，进行配置\n（1）使用属性 cascade 属性值 delete（下面因为是在上面的基础上进行的配置，中间使用，隔开就行）\n `<set name = \"setLinkMan\" cascade = \"save-update,delete\">`\n- 第二步 在代码中直接删除客户（下面这段代码替换前面的自定义代码）\n（1）根据id查询对象，调用session里面delete方法删除\n```java\nCustomer customer = session.get(Customer.class,3);\nsession.delete(customer);\n```\n \n**执行过程：**\n（1）根据id查询客户\n \n![根据 id 查询客户]($resource/%E6%A0%B9%E6%8D%AE%20id%20%E6%9F%A5%E8%AF%A2%E5%AE%A2%E6%88%B7.png)\n（2）根据外键id值查询联系人\n \n![根据外键id 查询联系人]($resource/%E6%A0%B9%E6%8D%AE%E5%A4%96%E9%94%AEid%20%E6%9F%A5%E8%AF%A2%E8%81%94%E7%B3%BB%E4%BA%BA.png)\n（3）把联系人外键设置为null\n \n![设置联系人外键为null]($resource/%E8%AE%BE%E7%BD%AE%E8%81%94%E7%B3%BB%E4%BA%BA%E5%A4%96%E9%94%AE%E4%B8%BAnull.png)\n（4）删除联系人和客户\n \n![删除联系人和客户]($resource/%E5%88%A0%E9%99%A4%E8%81%94%E7%B3%BB%E4%BA%BA%E5%92%8C%E5%AE%A2%E6%88%B7.png)\n\n\n### （三）一对多修改操作（inverse属性）\n\n目标：让lucy联系人所属客户不是百度，而是阿里\n```java\n//1 根据id查询lucy联系人，根据id查询百度的客户\nCustomer baidu = session.get(Customer.class, 1);\nLinkMan lucy = session.get(LinkMan.class, 2);\n//2 设置持久态对象值\n//把联系人放到客户里面\nbaidu.getSetLinkMan().add(lucy);\n//把客户放到联系人里面\nlucy.setCustomer(baidu);\n```\n\n \n-  inverse属性\n  - 因为hibernate双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题\n \n![inverse 属性]($resource/inverse%20%E5%B1%9E%E6%80%A7.png)\n   - 解决方式：让其中的“一”方不维护外键\n    - 一对多里面，让其中“一”方放弃外键维护\n    - 一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统\n  - 具体实现：\n在放弃关系维护映射文件中（这里在 Custumer.hbn.xml中），进行配置，在set标签上使用inverse属性\n```Custumer_hbm_xml\n<!-- 在客户映射文件中，使用 set 标签表示所有联系人\n\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称\n\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n-->\n<set name=\"setLinkMan\" inverse=\"true\">\n```\n \n\n## 三、Hibernate多对多操作\n\n### （一）多对多映射配置\n以用户和角色为例演示\n\n- 第一步 创建实体类，用户和角色\n```Role_java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Role {\n  \tprivate Integer role_id;\n  \tprivate String role_name;\n  \tprivate String role_memo;\n\t/**\n\t *  一个角色拥有多个用户\n\t */\n\tprivate Set<User> setUser = new HashSet<User>();\n}\n```\n\n```User_java\n@Getter\n@Setter\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n  \tprivate Integer user_id;\n  \tprivate String user_name;\n  \tprivate String user_password;\n\t/**\n\t * 一个用户可以有多个角色\n\t */\n  \tprivate Set<Role> setRole = new HashSet<Role>();\n}\n```\n\n- 第二步 让两个实体类之间互相表示\n（1）一个用户里面表示所有角色，使用set集合\n`private Set<Role> setRole = new HashSet<Role>();` \n（2）一个角色有多个用户，使用set集合\n`private Set<User> setUser = new HashSet<User>();` \n\n第三步 配置映射关系\n（1）基本配置\n（2）配置多对多关系\n- 在用户里面表示所有角色，使用set标签\n```User\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC \n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.User\" table=\"t_user\">\n\t\t<id name=\"user_id\" column=\"user_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"user_name\" column=\"user_name\"></property>\n\t\t<property name=\"user_password\" column=\"user_password\"></property>\n\t\t<!-- 在用户里面表示所有角色，使用set标签 \n\t\t\tname属性：角色set集合名称\n\t\t\ttable属性：第三张表名称\n\t\t-->\n\t\t<set name=\"setRole\" table=\"user_role\" cascade=\"save-update,delete\">\n\t\t\t<!-- key标签里面配置\n\t\t\t\t配置当前映射文件在第三张表外键名称\n\t\t\t -->\n\t\t\t<key column=\"userid\"></key>\n\t\t\t<!-- class：角色实体类全路径\n\t\t\t     column：角色在第三张表外键名称\n\t\t\t -->\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.Role\" column=\"roleid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>\n```\n \n\n- 在角色里面表示所有用户，使用set标签\n```Role_hbm_xml\n<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.Role\" table=\"t_role\">\n\t\t<id name=\"role_id\" column=\"role_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"role_name\" column=\"role_name\"></property>\n\t\t<property name=\"role_memo\" column=\"role_memo\"></property>\n\t\t\n\t\t<!-- 在角色里面表示所有用户，使用set标签 -->\n\t\t<set name=\"setUser\" table=\"user_role\">\n\t\t\t<!-- 角色在第三张表外键 -->\n\t\t\t<key column=\"roleid\"></key>\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.User\" column=\"userid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>\n```\n \n上面配置中，两个 table 的值相同，用户配置中的 `<key column=\"userid\">`和角色中的`<many-to-many column=\"roleid\">`，反之角色配置中的：`<key column=\"roleid\">`和用户中的 `<many-to-many column=\"userid\">`\n\n- 第四步 在核心配置文件中引入映射文件\n```hibernate_cfg_xml\n<mapping resource=\"com/gjxaiou/manytomany/User.hbm.xml\"/>\n<mapping resource=\"com/gjxaiou/manytomany/Role.hbm.xml\"/>\n```\n \n测试：\n![测试结果]($resource/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)\n\n\n### （二） 多对多级联保存\n根据用户保存角色\n\n- 第一步 在用户配置文件中 set 标签进行配置，cascade 值 save-update（User中）\n`<set name=\"setRole\" table=\"user_role\" cascade=\"save-update\">` \n\n- 第二步 写代码实现\n创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了\n```HibernateManyToMany_java\npublic class HibernateManytoMany {\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testSave() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//添加两个用户，为每个用户添加两个角色\n\t\t\t//1 创建对象\n\t\t\tUser user1 = new User();\n\t\t\tuser1.setUser_name(\"lucy\");\n\t\t\tuser1.setUser_password(\"123\");\n\t\t\t\n\t\t\tUser user2 = new User();\n\t\t\tuser2.setUser_name(\"mary\");\n\t\t\tuser2.setUser_password(\"456\");\n\t\t\t\n\t\t\tRole r1 = new Role();\n\t\t\tr1.setRole_name(\"总经理\");\n\t\t\tr1.setRole_memo(\"总经理\");\n\t\t\t\n\t\t\tRole r2 = new Role();\n\t\t\tr2.setRole_name(\"秘书\");\n\t\t\tr2.setRole_memo(\"秘书\");\n\t\t\t\n\t\t\tRole r3 = new Role();\n\t\t\tr3.setRole_name(\"保安\");\n\t\t\tr3.setRole_memo(\"保安\");\n\t\t\t\n\t\t\t//2 建立关系，把角色放到用户里面\n\t\t\t// user1 -- r1/r2\n\t\t\tuser1.getSetRole().add(r1);\n\t\t\tuser1.getSetRole().add(r2);\n\t\t\t\n\t\t\t// user2 -- r2/r3\n\t\t\tuser2.getSetRole().add(r2);\n\t\t\tuser2.getSetRole().add(r3);\n\t\t\t\n\t\t\t//3 保存用户\n\t\t\tsession.save(user1);\n\t\t\tsession.save(user2);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n}\n```\n测试结果：\n| userid | roleid\n|---|---\n|1|1\n|1|2\n|2|2\n|2|3\n\n\n\n### （三）多对多级联删除（了解）\n第一步 在set标签进行配置，cascade值delete\n`<set cascade=\"save-update,delete\">`\n第二步 删除用户\n```java\nUser user = session.get(User.class, 1);\nsession.delete(user);\n```\n \n \n\n### （四）维护第三张表关系\n\n- 用户和角色多对多关系，维护关系通过第三张表维护\n\n- 让某个用户有某个角色\n  - 第一步 根据id查询用户和角色\n  - 第二步 把角色放到用户里面\n    - 把角色对象放到用户使用set集合\n\n- 让某个用户没有某个角色\n第一步 根据id查询用户和角色\n```HibernateManyToMany_java\n// 让某个用户有某个角色\n//让lucy有经纪人角色\n//1 查询lucy和经纪人\nUser lucy = session.get(User.class, 1);\nRole role = session.get(Role.class, 1);\n\n//2 把角色放到用户的set集合里面\nlucy.getSetRole().add(role);\n```\n \n\n第二步 从用户里面把角色去掉\n（1）从set集合里面把角色移除\n```HibernateManyToMany_java\n// 让某个用户没有有某个角色\nUser user = session.get(User.class, 2);\nRole role = session.get(Role.class, 3);\n\n//2 从用户里面把角色去掉\nuser.getSetRole().remove(role);\n```\n \n",[[1569670820815,["GJX@GJXAIOU",[[-1,362,"## 客户列表功能\n\n- sessionFactory已经关闭了，不需要关闭\n \n \n\n2 dao里面代码\n\t//使用hibernate实现查询列表\n\tpublic List<Customer> findAll() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//查询所有记录\n\t\t\tCriteria criteria = session.createCriteria(Customer.class);\n\t\t\tList<Customer> list = criteria.list();\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t\treturn list;\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n//\t\t\tsessionFactory.close();\n\t\t}\n\t\treturn null;\n\t}"]],[362,1070],[362,362]]],[1569670821289,["GJX@GJXAIOU",[[-1,363,"\n"]],[362,362],[361,361]]],[1569670925057,["GJX@GJXAIOU",[[1,383,"\n"]],[382,382],[383,383]]],[1569670955952,["GJX@GJXAIOU",[[1,382,"印bernate 框架实现了 ORM 的思想， 将关系数据库中表的数据映射成对象， 使开发人员把对数据库的操作转化为对对象的操作， Hibernate 的关联关系映射主要包括多表的映射配置、数据的增加、删除等。"]],[382,382],[487,487]]],[1569670958671,["GJX@GJXAIOU",[[-1,382,"印"]],[383,383],[382,382]]],[1569670960499,["GJX@GJXAIOU",[[1,382,"Hi"]],[382,382],[384,384]]],[1569670971606,["GJX@GJXAIOU",[[-1,434,"库"]],[434,434],[434,434]]],[1569670976888,["GJX@GJXAIOU",[[-1,483,"删"]],[483,483],[483,483]]],[1569670981754,["GJX@GJXAIOU",[[1,483,"a "]],[483,483],[484,484]]],[1569670982097,["GJX@GJXAIOU",[[1,484,"hN"]],[484,484],[486,486]]],[1569670984105,["GJX@GJXAIOU",[[-1,483,"ahN "]],[486,486],[483,483]]],[1569670990458,["GJX@GJXAIOU",[[1,483,"删"]],[483,483],[484,484]]],[1569671051879,["GJX@GJXAIOU",[[1,672,"：在多的一方创建"]],[672,672],[680,680]]],[1569671071260,["GJX@GJXAIOU",[[1,680,"外键指向医德"]],[680,680],[686,686]]],[1569671071982,["GJX@GJXAIOU",[[-1,684,"医德"]],[686,686],[684,684]]],[1569671077969,["GJX@GJXAIOU",[[1,684,"一的一方的主键；"]],[684,684],[692,692]]],[1569671105988,["GJX@GJXAIOU",[[1,1007,"：中间表中至少两个字段左外"]],[1007,1007],[1020,1020]]],[1569671107809,["GJX@GJXAIOU",[[-1,1018,"左外"]],[1020,1020],[1018,1018]]],[1569671112732,["GJX@GJXAIOU",[[1,1018,"作为外键"]],[1018,1018],[1022,1022]]],[1569671125216,["GJX@GJXAIOU",[[1,1022,"分别指向多对多双方的主键；"]],[1022,1022],[1035,1035]]],[1569671159841,["GJX@GJXAIOU",[[1,1178,"  - （（"]],[1178,1178],[1184,1184]]],[1569671160847,["GJX@GJXAIOU",[[-1,1182,"（（"]],[1184,1184],[1182,1182]]],[1569671162237,["GJX@GJXAIOU",[[1,1182,"****"]],[1182,1182],[1184,1184]]],[1569671167657,["GJX@GJXAIOU",[[1,1184,"一对一建表："]],[1184,1184],[1190,1190]]],[1569671178995,["GJX@GJXAIOU",[[1,1192,"两种方式："]],[1192,1192],[1197,1197]]],[1569671179503,["GJX@GJXAIOU",[[1,1198,"  - \n"]],[1197,1197],[1202,1202]]],[1569671180624,["GJX@GJXAIOU",[[1,1200,"  "]],[1202,1202],[1204,1204]]],[1569671183439,["GJX@GJXAIOU",[[1,1205,"\n"]],[1205,1205],[1206,1206]]],[1569671183583,["GJX@GJXAIOU",[[1,1206,"\n"]],[1206,1206],[1207,1207]]],[1569671183718,["GJX@GJXAIOU",[[1,1207,"\n"]],[1207,1207],[1208,1208]]],[1569671230436,["GJX@GJXAIOU",[[1,1204,"唯一的外键对应：即假设一对一是任意一方为多，然后在多的"]],[1204,1204],[1231,1231]]],[1569671261032,["GJX@GJXAIOU",[[1,1231,"一方创建外键指向一的一方的主键，然后将外键设置为唯一；"]],[1231,1231],[1258,1258]]],[1569671271983,["GJX@GJXAIOU",[[1,1259,"    - \n"]],[1258,1258],[1265,1265]]],[1569671277731,["GJX@GJXAIOU",[[1,1265,"主键对应："]],[1265,1265],[1270,1270]]],[1569671281060,["GJX@GJXAIOU",[[-1,1265,"主键对应："]],[1270,1270],[1265,1265]]],[1569671309217,["GJX@GJXAIOU",[[1,1265,"主键对应：一方的主键作为另一方的主键；"]],[1265,1265],[1284,1284]]],[1569671578656,["GJX@GJXAIOU",[[1,1286,"****"]],[1286,1286],[1288,1288]]],[1569671586210,["GJX@GJXAIOU",[[1,1288,"对应于 Hibernate中"]],[1288,1288],[1302,1302]]],[1569671586258,["GJX@GJXAIOU",[[1,1301," "]],[1302,1302],[1303,1303]]],[1569671591754,["GJX@GJXAIOU",[[1,1303,"就是"]],[1303,1303],[1305,1305]]],[1569671607060,["GJX@GJXAIOU",[[1,1305,"使用 Java对象"]],[1305,1305],[1314,1314]]],[1569671607107,["GJX@GJXAIOU",[[1,1312," "]],[1314,1314],[1315,1315]]],[1569671616049,["GJX@GJXAIOU",[[1,1315,"关系进行描述："]],[1315,1315],[1322,1322]]],[1569671617687,["GJX@GJXAIOU",[[1,1326,"\n"]],[1324,1324],[1325,1325]]],[1569671939935,["GJX@GJXAIOU",[[1,1326,"![Hibernate中表之间关系]($resource/Hibernate%E4%B8%AD%E8%A1%A8%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB.png)"]],[1326,1326],[1424,1424]]],[1569672112199,["GJX@GJXAIOU",[[-1,2835,"t_"]],[2837,2837],[2835,2835]]],[1569673476852,["GJX@GJXAIOU",[[1,3309,"（）"]],[3309,3309],[3311,3311]]],[1569673489411,["GJX@GJXAIOU",[[1,3310,"多的一方集合的属性名称"]],[3310,3310],[3321,3321]]],[1569673507981,["GJX@GJXAIOU",[[1,3498,"（）"]],[3498,3498],[3500,3500]]],[1569673512955,["GJX@GJXAIOU",[[1,3499,"多的一方"]],[3499,3499],[3503,3503]]],[1569673515235,["GJX@GJXAIOU",[[1,3503,"外键名称"]],[3503,3503],[3507,3507]]],[1569673532356,["GJX@GJXAIOU",[[1,3580,"："]],[3580,3580],[3581,3581]]],[1569673533425,["GJX@GJXAIOU",[[-1,3580,"："]],[3581,3581],[3580,3580]]],[1569673534399,["GJX@GJXAIOU",[[1,3580,"（）"]],[3580,3580],[3582,3582]]],[1569673546343,["GJX@GJXAIOU",[[1,3581,"多的一方的类全路径"]],[3581,3581],[3590,3590]]],[1569675339410,["GJX@GJXAIOU",[[-1,4165,"![一对多配置测试结果]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)"]],[4165,4274],[4165,4165]]],[1569675348148,["GJX@GJXAIOU",[[1,4164,"只要写一个 test，"]],[4164,4164],[4175,4175]]],[1569675350801,["GJX@GJXAIOU",[[-1,4174,"，"]],[4175,4175],[4174,4174]]],[1569675353638,["GJX@GJXAIOU",[[1,4174,"开启"]],[4174,4174],[4176,4176]]],[1569675353686,["GJX@GJXAIOU",[[1,4174," "]],[4176,4176],[4177,4177]]],[1569675355837,["GJX@GJXAIOU",[[1,4177,"事务即可"]],[4177,4177],[4181,4181]]],[1569675357154,["GJX@GJXAIOU",[[1,4185,"\n"]],[4181,4181],[4182,4182]]],[1569675360181,["GJX@GJXAIOU",[[1,4182,"```java"]],[4182,4182],[4189,4189]]],[1569675360342,["GJX@GJXAIOU",[[1,4193,"\n"]],[4189,4189],[4190,4190]]],[1569675360492,["GJX@GJXAIOU",[[1,4194,"\n"]],[4190,4190],[4191,4191]]],[1569675360653,["GJX@GJXAIOU",[[1,4195,"\n"]],[4191,4191],[4192,4192]]],[1569675361422,["GJX@GJXAIOU",[[1,4192,"```"]],[4192,4192],[4195,4195]]],[1569675379681,["GJX@GJXAIOU",[[1,4190,"Hibernate: \n    \n    create table customer (\n       cid integer not null auto_increment,\n        custname varchar(255),\n        custlevel varchar(255),\n        custsource varchar(255),\n        custphone varchar(255),\n        custmobile varchar(255),\n        primary key (cid)\n    ) engine=MyISAM\nHibernate: \n    \n    create table linkman (\n       lkmid integer not null auto_increment,\n        custname varchar(255),\n        custlevel varchar(255),\n        custsource varchar(255),\n        customer integer,\n        clid integer,\n        primary key (lkmid)\n    ) engine=MyISAM\nHibernate: \n    \n    alter table linkman \n       add constraint FKjyu2v2fsw52yp276bhmm47jtk \n       foreign key (customer) \n       references customer (cid)\nHibernate: \n    \n    alter table linkman \n       add constraint FKa41307x5ixhiogw7flgf68uag \n       foreign key (clid) \n       references customer (cid)"]],[4190,4190],[5077,5077]]],[1569675383378,["GJX@GJXAIOU",[[-1,5078,"\n"]],[5078,5078],[5077,5077]]],[1569675483989,["GJX@GJXAIOU",[[-1,2652," \n"],[1,2654,"\n    "],[1,2703,"   "],[1,2707," "],[1,2765,"\n"],[1,2783," "],[-1,2785,"\t"],[1,2786,"    "],[-1,2811,"entity"],[1,2817,"pojo"],[-1,2846,"\t\t"],[1,2848,"        "],[-1,2877,"\t\t\t"],[1,2880,"            "],[-1,2919,"\t\t"],[1,2921,"        "],[-1,2927,"\t\t"],[1,2929,"\n        "],[-1,2967,"N"],[1,2968,"n"],[-1,2985,"\t\t"],[1,2987,"        "],[-1,3026,"L"],[1,3027,"l"],[-1,3045,"\t\t"],[1,3047,"        "],[-1,3087,"S"],[1,3088,"s"],[-1,3107,"\t\t"],[1,3109,"        "],[-1,3148,"P"],[1,3149,"p"],[-1,3167,"\t\t"],[1,3169,"        "],[-1,3209,"M"],[1,3210,"m"],[-1,3229,"\t\t\n\t\t"],[1,3234,"\n        "],[-1,3264," "],[-1,3322,"\t\t\t     "],[-1,3379,"\t\t"],[1,3381,"        "],[-1,3420,"\t\t\t"],[1,3423,"            "],[-1,3478,"\t"],[-1,3517,"\t\t\t"],[1,3520,"            "],[-1,3546,"\t\t\t"],[1,3549,"            "],[-1,3596,"\t\t\t"],[1,3599,"            "],[-1,3631,"entity"],[1,3637,"pojo"],[1,3646,"><"],[1,3647,"one-to-many"],[-1,3649,"\t\t"],[1,3651,"        "],[-1,3658,"\t"],[1,3659,"    "]],[2579,3688],[3806,3806]]],[1569675535341,["GJX@GJXAIOU",[[-1,3855,"!--前面的基础配置同上，省略--"],[1,3872,"?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC\n        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\""],[1,3874,"\n<hibernate-mapping >\n    <class name=\"com.gjxaiou.pojo.LinkMan\" table=\"linkman\">\n        <id name=\"lkmId\" column=\"lkmid\">\n            <generator class=\"native\"></generator>\n        </id>\n\n        <property name=\"lkmName\" column=\"custname\"></property>\n        <property name=\"lkmGender\" column=\"custlevel\"></property>\n        <property name=\"lkmPhone\" column=\"custsource\"></property>\n\n        "],[1,3891,"        "],[1,3935,"        "],[1,3956,"        "],[1,3970,"        "],[1,3974,"        "],[-1,4022,"entity"],[1,4028,"pojo"],[-1,4038," column=\"clid\""],[1,4066,">\n    </class>\n</hibernate-mapping"]],[3854,4067],[4691,4691]]],[1569675924858,["GJX@GJXAIOU",[[-1,4801,"com/gjxaiou/entity/"],[-1,4839,"\n"],[1,4840," "],[-1,4859,"com/gjxaiou/entity/"]],[4782,4896],[4858,4858]]],[1569675927395,["GJX@GJXAIOU",[[1,4821,"\n"]],[4821,4821],[4822,4822]]],[1569675975362,["GJX@GJXAIOU",[[1,4507,"()"]],[4507,4507],[4509,4509]]],[1569675976921,["GJX@GJXAIOU",[[-1,4507,"()"]],[4509,4509],[4507,4507]]],[1569675977511,["GJX@GJXAIOU",[[1,4507,"()"]],[4507,4507],[4509,4509]]],[1569675979006,["GJX@GJXAIOU",[[1,4508,"yi"]],[4508,4508],[4510,4510]]],[1569675981061,["GJX@GJXAIOU",[[-1,4507,"(yi)"]],[4510,4510],[4507,4507]]],[1569675981716,["GJX@GJXAIOU",[[1,4507,"（）"]],[4507,4507],[4509,4509]]],[1569675989430,["GJX@GJXAIOU",[[1,4508,"一的一方的对象的名称"]],[4508,4508],[4518,4518]]],[1569675994293,["GJX@GJXAIOU",[[1,4548,"（）"]],[4548,4548],[4550,4550]]],[1569676002376,["GJX@GJXAIOU",[[1,4549,"一的一方的类的全路径"]],[4549,4549],[4559,4559]]],[1569676006798,["GJX@GJXAIOU",[[1,4583,"（）"]],[4583,4583],[4585,4585]]],[1569676015799,["GJX@GJXAIOU",[[1,4584,"表中的外键的名称"]],[4584,4584],[4592,4592]]],[1569676528002,["GJX@GJXAIOU",[[1,1424,"\n"]],[1423,1423],[1424,1424]]],[1569676528160,["GJX@GJXAIOU",[[1,1425,"\n"]],[1424,1424],[1425,1425]]],[1569676528267,["GJX@GJXAIOU",[[1,1426,"\n"]],[1425,1425],[1426,1426]]],[1569676528404,["GJX@GJXAIOU",[[1,1427,"\n"]],[1426,1426],[1427,1427]]],[1569676528524,["GJX@GJXAIOU",[[1,1428,"\n"]],[1427,1427],[1428,1428]]],[1569676530440,["GJX@GJXAIOU",[[1,1427,"****"]],[1427,1427],[1429,1429]]],[1569676544068,["GJX@GJXAIOU",[[1,1429,"下面用到的一个文件：HibernateUtil。"]],[1429,1429],[1453,1453]]],[1569676544842,["GJX@GJXAIOU",[[-1,1452,"。"]],[1453,1453],[1452,1452]]],[1569676546092,["GJX@GJXAIOU",[[1,1452,".java"]],[1452,1452],[1457,1457]]],[1569676547852,["GJX@GJXAIOU",[[1,1461,"\n"]],[1459,1459],[1460,1460]]],[1569676549717,["GJX@GJXAIOU",[[1,1460,"···"]],[1460,1460],[1463,1463]]],[1569676550948,["GJX@GJXAIOU",[[-1,1460,"···"]],[1463,1463],[1460,1460]]],[1569676553898,["GJX@GJXAIOU",[[1,1460,"```java"]],[1460,1460],[1467,1467]]],[1569676554098,["GJX@GJXAIOU",[[1,1469,"\n"]],[1467,1467],[1468,1468]]],[1569676554245,["GJX@GJXAIOU",[[1,1470,"\n"]],[1468,1468],[1469,1469]]],[1569676554396,["GJX@GJXAIOU",[[1,1471,"\n"]],[1469,1469],[1470,1470]]],[1569676555245,["GJX@GJXAIOU",[[1,1470,"```"]],[1470,1470],[1473,1473]]],[1569676660546,["GJX@GJXAIOU",[[-1,6325,"的"]],[6326,6326],[6325,6325]]],[1569676661375,["GJX@GJXAIOU",[[1,6325,"b"]],[6325,6325],[6326,6326]]],[1569676662362,["GJX@GJXAIOU",[[-1,6324,"帮b"]],[6326,6326],[6324,6324]]],[1569676664774,["GJX@GJXAIOU",[[1,6324,"绑定"]],[6324,6324],[6326,6326]]],[1569676883215,["GJX@GJXAIOU",[[1,1468,"package com.gjxaiou.util;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\n/**\n * @author GJXAIOU\n * @create 2019-09-28-19:23\n */\npublic class HibernateUtil {\n    static Configuration configuration = null;\n    static SessionFactory sessionFactory = null;\n\n    static {\n        // 加载核心配置文件\n        configuration = new Configuration();\n        configuration.configure();\n        sessionFactory = configuration.buildSessionFactory();\n\n    }\n\n    /**\n     * 提供 session 与本地线程绑定的方法\n     * @return 与本地线程绑定之后的 Session\n     */\n    public static Session getSessionObject() {\n        return sessionFactory.getCurrentSession();\n    }\n\n    /**\n     * 提供返回 sessionFactory 方法\n     * @return sessionFactory 对象\n     */\n    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n}\n"]],[1468,1468],[2324,2324]]],[1569676887882,["GJX@GJXAIOU",[[-1,1468,"package com.gjxaiou.util;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\n/**\n * @author GJXAIOU\n * @create 2019-09-28-19:23\n */"]],[1468,1657],[1468,1468]]],[1569676888659,["GJX@GJXAIOU",[[-1,1468,"\n"]],[1468,1468],[1467,1467]]],[1569676895874,["GJX@GJXAIOU",[[-1,2135,"\n"]],[2135,2135],[2134,2134]]],[1569676896442,["GJX@GJXAIOU",[[-1,2134,"\n"]],[2134,2134],[2133,2133]]],[1569676904731,["GJX@GJXAIOU",[[-1,6689,"首先这里以及下面都会使用昨天配置的 HibernateUtils 类\n```java\npublic class HibernateUtils {\n\n\tstatic Configuration cfg = null;\n\tstatic SessionFactory sessionFactory = null;\n\t//静态代码块实现\n\tstatic {\n\t\t//加载核心配置文件\n\t\tcfg = new Configuration();\n\t\tcfg.configure();\n\t\tsessionFactory = cfg.buildSessionFactory();\n\t}\n\t\n\t//提供返回与本地线程绑定session的方法\n\tpublic static Session getSessionobject() {\n\t\treturn sessionFactory.getCurrentSession();\n\t}\n\t\n\t//提供方法返回sessionFactory\n\tpublic static SessionFactory getSessionFactory() {\n\t\treturn sessionFactory;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n}\n\n```\n"]],[6689,7256],[6689,6689]]],[1569676907347,["GJX@GJXAIOU",[[-1,6689,"\n"]],[6689,6689],[6688,6688]]],[1569676978179,["GJX@GJXAIOU",[[-1,6906,"\t\t\t//得到sessionFactory"]],[6906,6927],[6906,6906]]],[1569676978691,["GJX@GJXAIOU",[[-1,6906,"\n"]],[6906,6906],[6905,6905]]],[1569676980154,["GJX@GJXAIOU",[[-1,6962,"\t\t\t//得到session"]],[6962,6976],[6962,6962]]],[1569676980474,["GJX@GJXAIOU",[[-1,6962,"\n"]],[6962,6962],[6961,6961]]],[1569676981706,["GJX@GJXAIOU",[[-1,7005,"\t\t\t//开启事务"]],[7005,7014],[7005,7005]]],[1569676981956,["GJX@GJXAIOU",[[-1,7005,"\n"]],[7005,7005],[7004,7004]]],[1569678430562,["GJX@GJXAIOU",[[-1,6670,"一"]],[6671,6671],[6670,6670]]],[1569678432110,["GJX@GJXAIOU",[[1,6670,"两"]],[6670,6670],[6671,6671]]],[1569678550866,["GJX@GJXAIOU",[[-1,6758,"//演示一对多级联保存\n\t"],[-1,6777,"\t"],[1,6778,"    "],[-1,6790,"testAddDemo1"],[1,6802,"createTable"],[-1,6804," "],[-1,6807,"\t\tSessionFactory sessionFactory = null;\n\t\t"],[1,6849,"        "],[-1,6867,"null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\tsessionFactory = "],[-1,6939,"s"],[-1,6951,"Fa"],[1,6953,"Obje"],[-1,6955,"ory"],[-1,6962,"\t\t\tsession = sessionFactory.openSess"],[1,6998,"        Transaction transact"],[-1,7001,"();\n\t\t\ttx"],[-1,7041,"\t\t\t\n\t\t\t// 添加"],[1,7053,"\n        // 创建"],[-1,7057,"，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\t"],[1,7092,"\n        "],[-1,7128,"\t\t\t"],[1,7131,"        "],[-1,7153,"百度"],[1,7155,"Alibaba"],[-1,7159,"\t\t\t"],[1,7162,"        "],[-1,7185,"vip\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"1"],[1,7254,"0"],[-1,7258,"\t\t\t"],[1,7261,"        "],[-1,7285,"999"],[1,7288,"110"],[-1,7292,"\t\t\t\n\t\t\t"],[1,7299,"\n        // 创建两个联系人\n        "],[-1,7311,"m"],[1,7312,"M"],[1,7314,"1"],[-1,7332,"\t\t\t"],[1,7335,"        "],[-1,7339,"m"],[1,7340,"M"],[1,7342,"1"],[-1,7349,"_n"],[1,7351,"N"],[-1,7356,"lucy\");\n\t\t\t"],[1,7367,"GJXAIOU\");\n        LinkMan linkMan2 = new LinkMan();\n        "],[-1,7371,"m"],[1,7372,"M"],[1,7374,"2"],[-1,7381,"_gender(\"男"],[1,7391,"Name(\"gjxaiou"],[-1,7395,"\t\t\t"],[1,7398,"        "],[-1,7402,"m"],[1,7403,"M"],[1,7405,"2"],[-1,7412,"_phone(\"911"],[1,7423,"Gender(\"man"],[-1,7427,"\t\t\t\n\t\t\t//2 在客户表示所有联系人，在联系人表示客户\t\t\n\t\t\t"],[1,7463,"\n        "],[-1,7468,"客户对象和联系人对象"],[-1,7481,"\t\t\t//2.1 把联系人对象 放到客户对象的set集合里面\n\t\t\t"],[1,7515,"        customer.getSetLinkMan().add(linkMan1);\n        "],[-1,7548,"m"],[1,7549,"M"],[1,7551,"2"],[-1,7554,"\t\t\t//2.2 把客户对象放到联系人里面\n\t\t\t"],[1,7579,"        "],[1,7583,"Man1.setCusto"],[1,7584,"er(customer);\n        linkM"],[1,7586,"2"],[-1,7610,"\t\t\t\n\t\t\t//3 保存到数据库\n\t\t\t"],[1,7631,"\n        "],[-1,7655,"\t\t\t"],[1,7658,"        "],[-1,7675,"m"],[1,7676,"M"],[1,7678,"1"],[-1,7681,"\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\t"],[1,7770,"        "],[-1,7778,"clo"],[1,7782,"av"],[1,7784,"linkMan2"],[-1,7787,"\t\t\t//sessionF"],[1,7800,"\n        trans"],[-1,7803,"ory不需要关闭\n\t\t\tsess"],[-1,7822,"Factory"],[-1,7831,"lose"],[1,7835,"ommit"],[-1,7839,"\t\t}\n\t"],[1,7844,"    "]],[6757,7845],[7646,7646]]],[1569678822733,["GJX@GJXAIOU",[[1,7800,"|   |   |   |   |   |   |\n"]],[7799,7799],[7801,7804]]],[1569678822887,["GJX@GJXAIOU",[[-1,7801,"   "],[1,7804,"\n"]],[7801,7804],[7802,7802]]],[1569678826903,["GJX@GJXAIOU",[[-1,7800,"|\n|   |   |   |   |   |"]],[7800,7823],[7800,7800]]],[1569678827221,["GJX@GJXAIOU",[[1,7802,"\n"]],[7800,7800],[7801,7801]]],[1569678828372,["GJX@GJXAIOU",[[1,7801,"1\tAlibaba\t100\t\t\t110"]],[7801,7801],[7820,7820]]],[1569678835591,["GJX@GJXAIOU",[[-1,7801,"1\tAlibaba\t100\t\t\t110\n"]],[7800,7820],[7800,7800]]],[1569678839428,["GJX@GJXAIOU",[[-1,7695,"N"]],[7696,7696],[7695,7695]]],[1569678841033,["GJX@GJXAIOU",[[1,7695,"n"]],[7695,7695],[7696,7696]]],[1569678843164,["GJX@GJXAIOU",[[-1,7706,"L"]],[7707,7707],[7706,7706]]],[1569678843793,["GJX@GJXAIOU",[[1,7706,"l"]],[7706,7706],[7707,7707]]],[1569678847613,["GJX@GJXAIOU",[[-1,7718,"S"]],[7719,7719],[7718,7718]]],[1569678848094,["GJX@GJXAIOU",[[1,7718,"s"]],[7718,7718],[7719,7719]]],[1569678866699,["GJX@GJXAIOU",[[-1,7731,"P"]],[7732,7732],[7731,7731]]],[1569678867207,["GJX@GJXAIOU",[[1,7731,"p"]],[7731,7731],[7732,7732]]],[1569678869829,["GJX@GJXAIOU",[[-1,7743,"M"]],[7744,7744],[7743,7743]]],[1569678870415,["GJX@GJXAIOU",[[1,7743,"m"]],[7743,7743],[7744,7744]]],[1569678877918,["GJX@GJXAIOU",[[-1,7781,"百度"]],[7783,7783],[7781,7781]]],[1569678880519,["GJX@GJXAIOU",[[1,7781,"Alibaba"]],[7781,7781],[7788,7788]]],[1569678884020,["GJX@GJXAIOU",[[-1,7789,"vip"]],[7792,7792],[7789,7789]]],[1569678885444,["GJX@GJXAIOU",[[1,7789,"100"]],[7789,7789],[7792,7792]]],[1569678887304,["GJX@GJXAIOU",[[-1,7793,"网络"]],[7795,7795],[7793,7793]]],[1569678888207,["GJX@GJXAIOU",[[1,7793," "]],[7793,7793],[7794,7794]]],[1569678890282,["GJX@GJXAIOU",[[-1,7795,"110"]],[7798,7798],[7795,7795]]],[1569678891137,["GJX@GJXAIOU",[[1,7795,"  "]],[7795,7795],[7797,7797]]],[1569678896724,["GJX@GJXAIOU",[[-1,7798,"999"]],[7801,7801],[7798,7798]]],[1569678896983,["GJX@GJXAIOU",[[1,7798," "]],[7798,7798],[7799,7799]]],[1569678903982,["GJX@GJXAIOU",[[1,7661,"x"]],[7661,7661],[7662,7662]]],[1569678904806,["GJX@GJXAIOU",[[1,7661," "],[1,7662," ustom"]],[7662,7662],[7668,7668]]],[1569678906451,["GJX@GJXAIOU",[[-1,7662,"xustom"]],[7668,7668],[7662,7662]]],[1569678910541,["GJX@GJXAIOU",[[1,7662,"customer"]],[7662,7662],[7670,7670]]],[1569678914825,["GJX@GJXAIOU",[[1,7681," l "]],[7681,7681],[7683,7683]]],[1569678916025,["GJX@GJXAIOU",[[1,7683,"inkman"]],[7683,7683],[7689,7689]]],[1569678980825,[null,[[-1,7670,"m"],[1,7671," "]],[7670,7670],[7672,7672]]],[1569678980825,[null,[[1,7670,"m"],[-1,7670," "]],[7672,7672],[7670,7670]]],[1569678929124,["GJX@GJXAIOU",[[-1,7834,"_"]],[7835,7835],[7834,7834]]],[1569678940380,["GJX@GJXAIOU",[[-1,7843,"_"]],[7844,7844],[7843,7843]]],[1569678942659,["GJX@GJXAIOU",[[-1,7853,"_"]],[7854,7854],[7853,7853]]],[1569679040832,[null,[[-1,7670,"m"],[1,7671," "]],[7670,7670],[7672,7672]]],[1569679040832,[null,[[1,7670,"m"],[-1,7670," "]],[7672,7672],[7670,7670]]],[1569678983757,["GJX@GJXAIOU",[[-1,2656,"\n"],[1,2657," "],[-1,2664,"\n"],[1,2665," "],[-1,2683,"\n"],[1,2684," "],[-1,2703,"\n"],[1,2704," "],[-1,2713,"\n"],[1,2714," "],[-1,2737,"\t"],[1,2738,"    "],[-1,2757,"_id;\n\t"],[1,2763,"Id;\n "],[-1,2781,"_n"],[1,2783,"N"],[-1,2788,"\t"],[1,2789," "],[-1,2807,"_g"],[1,2809,"G"],[-1,2816,"\t"],[1,2817," "],[-1,2835,"_p"],[1,2837,"P"],[-1,2843,"\t"],[1,2844,"  "],[-1,2848,"\t"],[-1,2851," "],[-1,2883,"\t"],[1,2884," "],[-1,2888,"\t"],[1,2889,"  "],[-1,2915,"\n"],[1,2916," "]],[2649,2917],[2916,2916]]],[1569678985339,["GJX@GJXAIOU",[[1,2656,"\n"],[-1,2656," "],[1,2664,"\n"],[-1,2664," "],[1,2683,"\n"],[-1,2683," "],[1,2703,"\n"],[-1,2703," "],[1,2713,"\n"],[-1,2713," "],[1,2737,"\t"],[-1,2737,"    "],[1,2760,"_id;\n\t"],[-1,2760,"Id;\n "],[1,2783,"_n"],[-1,2783,"N"],[1,2789,"\t"],[-1,2789," "],[1,2808,"_g"],[-1,2808,"G"],[1,2816,"\t"],[-1,2816," "],[1,2835,"_p"],[-1,2835,"P"],[1,2842,"\t"],[-1,2842,"  "],[1,2848,"\t"],[1,2850," "],[1,2881,"\t"],[-1,2881," "],[1,2886,"\t"],[-1,2886,"  "],[1,2914,"\n"],[-1,2914," "]],[2916,2916],[2649,2917]]],[1569678987242,["GJX@GJXAIOU",[[-1,2737,"\t"],[1,2738,"    "],[-1,2757,"_id;\n\t"],[1,2763,"Id;\n    "],[-1,2781,"_n"],[1,2783,"N"],[-1,2788,"\t"],[1,2789,"    "],[-1,2807,"_g"],[1,2809,"G"],[-1,2816,"\t"],[1,2817,"    "],[-1,2835,"_p"],[1,2837,"P"],[-1,2843,"\t"],[1,2844,"    "],[-1,2848,"\t"],[1,2849,"    "],[-1,2883,"\t"],[1,2884,"    "],[-1,2888,"\t"],[1,2889,"    "]],[2649,2917],[2937,2937]]],[1569679160829,[null,[[-1,7690,"m"],[1,7691," "]],[7690,7690],[7692,7692]]],[1569679160829,[null,[[1,7690,"m"],[-1,7690," "]],[7692,7692],[7690,7690]]],[1569679114732,["GJX@GJXAIOU",[[-1,5012,"cust"],[1,5016,"lkm"],[-1,5077,"custlevel"],[1,5086,"lkmgender"],[-1,5142,"custsourc"],[1,5151,"lkmphon"],[-1,5189," "],[-1,5242,"（一的一方的对象的名称）"],[-1,5283,"（一的一方的类的全路径）"],[-1,5318,"（表中的外键的名称）"]],[4589,5460],[5422,5422]]],[1569679220832,[null,[[-1,7652,"m"],[1,7653," "]],[7652,7652],[7654,7654]]],[1569679220832,[null,[[1,7652,"m"],[-1,7652," "]],[7654,7654],[7652,7652]]],[1569679213453,["GJX@GJXAIOU",[[-1,6020,"cust"],[1,6024,"lkm"],[-1,6051,"custlevel"],[1,6060,"lkmgender"],[-1,6083,"custsourc"],[1,6092,"lkmphon"]],[5626,6513],[6510,6510]]],[1569679340838,[null,[[-1,7649,"m"],[1,7650," "]],[7649,7649],[7651,7651]]],[1569679340838,[null,[[1,7649,"m"],[-1,7649," "]],[7651,7651],[7649,7649]]],[1569679304066,["GJX@GJXAIOU",[[-1,6713,"HibernateOneToMany"],[1,6731,"TableTest "],[-1,6765,"Table"],[1,6770,"OneToMany"],[-1,7624,"}\n"]],[6700,7627],[7621,7621]]],[1569679338974,["GJX@GJXAIOU",[[1,7790,"110"]],[7790,7790],[7793,7793]]],[1569679400840,[null,[[-1,7643,"m"],[1,7644," "]],[7643,7643],[7645,7645]]],[1569679400840,[null,[[1,7643,"m"],[-1,7643," "]],[7645,7645],[7643,7643]]],[1569679355075,["GJX@GJXAIOU",[[-1,7835,"clid"]],[7839,7839],[7835,7835]]],[1569679359070,["GJX@GJXAIOU",[[1,7835,"customer"]],[7835,7835],[7843,7843]]],[1569679363343,["GJX@GJXAIOU",[[1,7845,"clid"]],[7845,7845],[7849,7849]]],[1569679364831,["GJX@GJXAIOU",[[1,7850," "]],[7849,7849],[7850,7850]]],[1569679365711,["GJX@GJXAIOU",[[1,7850,"|"]],[7850,7850],[7851,7851]]],[1569679369367,["GJX@GJXAIOU",[[1,7874,"---|"]],[7874,7874],[7878,7878]]],[1569679374747,["GJX@GJXAIOU",[[-1,7880,"2"]],[7881,7881],[7880,7880]]],[1569679375142,["GJX@GJXAIOU",[[1,7880,"1"]],[7880,7880],[7881,7881]]],[1569679378396,["GJX@GJXAIOU",[[-1,7882,"lucy"]],[7886,7886],[7882,7882]]],[1569679380533,["GJX@GJXAIOU",[[1,7882,"GJXAIOU"]],[7882,7882],[7889,7889]]],[1569679388451,["GJX@GJXAIOU",[[-1,7890,"男"]],[7891,7891],[7890,7890]]],[1569679388735,["GJX@GJXAIOU",[[1,7890," "]],[7890,7890],[7891,7891]]],[1569679391908,["GJX@GJXAIOU",[[-1,7892,"911"]],[7895,7895],[7892,7892]]],[1569679392599,["GJX@GJXAIOU",[[1,7892," "]],[7892,7892],[7893,7893]]],[1569679398104,["GJX@GJXAIOU",[[1,7896,"|"]],[7896,7896],[7897,7897]]],[1569679399120,["GJX@GJXAIOU",[[1,7896," "]],[7896,7896],[7897,7897]]],[1569679460838,[null,[[-1,7643,"m"],[1,7644," "]],[7643,7643],[7645,7645]]],[1569679460838,[null,[[1,7643,"m"],[-1,7643," "]],[7645,7645],[7643,7643]]],[1569679407889,["GJX@GJXAIOU",[[1,7899,"|2 | "]],[7899,7899],[7904,7904]]],[1569679428019,["GJX@GJXAIOU",[[1,7903,"gjxaiou"]],[7903,7903],[7910,7910]]],[1569679429159,["GJX@GJXAIOU",[[1,7911," "]],[7910,7910],[7911,7911]]],[1569679429880,["GJX@GJXAIOU",[[1,7911,"|"]],[7911,7911],[7912,7912]]],[1569679430135,["GJX@GJXAIOU",[[1,7913," "]],[7912,7912],[7913,7913]]],[1569679431925,["GJX@GJXAIOU",[[1,7913,"man"]],[7913,7913],[7916,7916]]],[1569679433592,["GJX@GJXAIOU",[[1,7917," "]],[7916,7916],[7917,7917]]],[1569679434391,["GJX@GJXAIOU",[[1,7917,"|"]],[7917,7917],[7918,7918]]],[1569679436624,["GJX@GJXAIOU",[[1,7919,"  "]],[7918,7918],[7920,7920]]],[1569679436927,["GJX@GJXAIOU",[[1,7920,"|"]],[7920,7920],[7921,7921]]],[1569679437191,["GJX@GJXAIOU",[[1,7922," "]],[7921,7921],[7922,7922]]],[1569679438071,["GJX@GJXAIOU",[[1,7922,"1"]],[7922,7922],[7923,7923]]],[1569679438390,["GJX@GJXAIOU",[[1,7924," "]],[7923,7923],[7924,7924]]],[1569679439063,["GJX@GJXAIOU",[[1,7924,"|"]],[7924,7924],[7925,7925]]],[1569679439250,["GJX@GJXAIOU",[[1,7926," "]],[7925,7925],[7926,7926]]],[1569679442639,["GJX@GJXAIOU",[[1,7926,"|"]],[7926,7926],[7927,7927]]],[1569679447558,["GJX@GJXAIOU",[[1,7929,"\n"]],[7929,7929],[7930,7930]]],[1569679580841,[null,[[-1,7643,"m"],[1,7644," "]],[7643,7643],[7645,7645]]],[1569679580841,[null,[[1,7643,"m"],[-1,7643," "]],[7645,7645],[7643,7643]]],[1569679544982,["GJX@GJXAIOU",[[1,7626,"\n"]],[7625,7625],[7626,7626]]],[1569679546297,["GJX@GJXAIOU",[[1,7626,"****"]],[7626,7626],[7628,7628]]],[1569679547177,["GJX@GJXAIOU",[[1,7628,"cong"]],[7628,7628],[7632,7632]]],[1569679548036,["GJX@GJXAIOU",[[-1,7628,"cong"]],[7632,7632],[7628,7628]]],[1569679559225,["GJX@GJXAIOU",[[1,7628,"从上面代码可以看出是双向维护关系"]],[7628,7628],[7644,7644]]],[1569679640842,[null,[[-1,7664,"m"],[1,7665," "]],[7664,7664],[7666,7666]]],[1569679640842,[null,[[1,7664,"m"],[-1,7664," "]],[7666,7666],[7664,7664]]],[1569679605890,["GJX@GJXAIOU",[[1,8068,"****"]],[8068,8068],[8070,8070]]],[1569679609111,["GJX@GJXAIOU",[[1,8070,"注：不能"]],[8070,8070],[8074,8074]]],[1569679612068,["GJX@GJXAIOU",[[-1,8070,"**注：不能"]],[8074,8074],[8068,8068]]],[1569679613612,["GJX@GJXAIOU",[[-1,8068,"**"]],[8070,8070],[8068,8068]]],[1569679616404,["GJX@GJXAIOU",[[1,7647,"\n"]],[7646,7646],[7647,7647]]],[1569679626680,["GJX@GJXAIOU",[[1,7647,"不能仅仅配置一个，如果值配置"]],[7647,7647],[7661,7661]]],[1569679628092,["GJX@GJXAIOU",[[-1,7658,"值配置"]],[7661,7661],[7658,7658]]],[1569679629240,["GJX@GJXAIOU",[[1,7658,"值"]],[7658,7658],[7659,7659]]],[1569679629812,["GJX@GJXAIOU",[[-1,7658,"值"]],[7659,7659],[7658,7658]]],[1569679638138,["GJX@GJXAIOU",[[1,7658,"只配置了一方，就是"]],[7658,7658],[7667,7667]]],[1569679700848,[null,[[-1,7685,"m"],[1,7686," "]],[7685,7685],[7687,7687]]],[1569679700848,[null,[[1,7685,"m"],[-1,7685," "]],[7687,7687],[7685,7685]]],[1569679642703,["GJX@GJXAIOU",[[1,7667,"吃鸡太"]],[7667,7667],[7670,7670]]],[1569679644252,["GJX@GJXAIOU",[[-1,7667,"吃鸡太"]],[7670,7670],[7667,7667]]],[1569679657686,["GJX@GJXAIOU",[[1,7667,"持久态对象关联了一个瞬时态对象；"]],[7667,7667],[7683,7683]]],[1569679658581,["GJX@GJXAIOU",[[-1,7682,"；"]],[7683,7683],[7682,7682]]],[1569679672497,["GJX@GJXAIOU",[[1,7682,"，瞬时对象异常；"]],[7682,7682],[7690,7690]]],[1569679674325,["GJX@GJXAIOU",[[1,7691,"\n"]],[7690,7690],[7691,7691]]],[1569679687742,["GJX@GJXAIOU",[[1,7655,"（）"]],[7655,7655],[7657,7657]]],[1569679700170,["GJX@GJXAIOU",[[1,7656,"就是 save 只配置"]],[7656,7656],[7667,7667]]],[1569679760848,[null,[[-1,7722,"m"],[1,7723," "]],[7722,7722],[7724,7724]]],[1569679760848,[null,[[1,7722,"m"],[-1,7722," "]],[7724,7724],[7722,7722]]],[1569679700912,["GJX@GJXAIOU",[[1,7667,"一个"]],[7667,7667],[7669,7669]]],[1569679820848,[null,[[-1,7724,"m"],[1,7725," "]],[7724,7724],[7726,7726]]],[1569679820848,[null,[[1,7724,"m"],[-1,7724," "]],[7726,7726],[7724,7724]]],[1569679763693,["GJX@GJXAIOU",[[-1,7626,"**从上面代码可以看出是双向维护关系**\n不能仅仅配置一个（就是 save 只配置一个），如果只配置了一方，就是持久态对象关联了一个瞬时态对象，瞬时对象异常；"]],[7626,7705],[7626,7626]]],[1569679765420,["GJX@GJXAIOU",[[-1,7627,"\n"]],[7627,7627],[7626,7626]]],[1569679765789,["GJX@GJXAIOU",[[-1,7626,"\n"]],[7626,7626],[7625,7625]]],[1569679768045,["GJX@GJXAIOU",[[1,7930,"\n"]],[7929,7929],[7930,7930]]],[1569679769453,["GJX@GJXAIOU",[[1,7931,"\n"]],[7930,7930],[7931,7931]]],[1569679770419,["GJX@GJXAIOU",[[1,7930,"**从上面代码可以看出是双向维护关系**\n不能仅仅配置一个（就是 save 只配置一个），如果只配置了一方，就是持久态对象关联了一个瞬时态对象，瞬时对象异常；"]],[7930,7930],[8009,8009]]],[1569679772655,["GJX@GJXAIOU",[[1,8011,"\n"]],[8009,8009],[8010,8010]]],[1569679807743,["GJX@GJXAIOU",[[1,8010,"如果真的仅仅想保留一方，就使用下面 Hibernate 提供的级联操作；"]],[8010,8010],[8046,8046]]],[1569679880850,[null,[[-1,7643,"m"],[1,7644," "]],[7643,7643],[7645,7645]]],[1569679880850,[null,[[1,7643,"m"],[-1,7643," "]],[7645,7645],[7643,7643]]],[1569679858545,["GJX@GJXAIOU",[[1,8052,"上面对应的"]],[8052,8052],[8057,8057]]],[1569679860136,["GJX@GJXAIOU",[[1,8048,"\n"]],[8047,8047],[8048,8048]]],[1569679860290,["GJX@GJXAIOU",[[1,8049,"\n"]],[8048,8048],[8049,8049]]],[1569679860426,["GJX@GJXAIOU",[[1,8050,"\n"]],[8049,8049],[8050,8050]]],[1569679862861,["GJX@GJXAIOU",[[1,8047,"****"]],[8047,8047],[8049,8049]]],[1569679865751,["GJX@GJXAIOU",[[1,8049,"级联操作"]],[8049,8049],[8053,8053]]],[1569679879728,["GJX@GJXAIOU",[[1,8055,"： 当主控发执行保存、更新或者删除"]],[8055,8055],[8072,8072]]],[1569679940847,[null,[[-1,7643,"m"],[1,7644," "]],[7643,7643],[7645,7645]]],[1569679940847,[null,[[1,7643,"m"],[-1,7643," "]],[7645,7645],[7643,7643]]],[1569679887890,["GJX@GJXAIOU",[[1,8072,"操作时，其关联对象（）"]],[8072,8072],[8083,8083]]],[1569679894040,["GJX@GJXAIOU",[[1,8082,"被控方"]],[8082,8082],[8085,8085]]],[1569679903254,["GJX@GJXAIOU",[[1,8086,"也执行相同的操作；"]],[8086,8086],[8095,8095]]]],null,"GJX@GJXAIOU"],["60942b3b-5154-42e8-8c6c-1302d50e4e26",1570000028599,"# FrameDay04_3 Hibernate\n\n**上节内容**\n* 实体类编写规则\n* hibernate主键生成策略\n* 实体类操作\n  * crud操作\n  * 实体类对象状态\n* hibernate的一级缓存\n* hibernate的事务操作\n  * 事务代码规则写法\n* hibernate其他的api（查询）\n\n**今天内容**\n\n- 列表功能实现\n- 表与表之间关系回顾\n  - 一对多（客户和联系人）\n  - 多对多（用户和角色）\n- hibernate一对多操作\n  - 一对多映射配置\n  - 一对多级联保存\n  - 一对多级联删除\n  - inverse属性\n- hibernate多对多操作\n  - 多对多映射配置\n  - 多对多级联保存（重点）\n  - 多对多级联删除\n  - 维护第三张表\n\n\n## 一、表与表之间关系回顾（重点）\nHibernate 框架实现了 ORM 的思想， 将关系数据库中表的数据映射成对象， 使开发人员把对数据的操作转化为对对象的操作， Hibernate 的关联关系映射主要包括多表的映射配置、数据的增加、删除等。\n\n- 一对多\n  - 例如分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类\n  - 客户和联系人是一对多关系\n客户：与公司有业务往来，例如百度、新浪；\n联系人：公司里面的员工，百度里面有很多员工，联系员工；\n    - 客户是一，联系人是多\n    - 一个客户里面有多个联系人，一个联系人只能属于一个客户\n  - **一对多建表：通过外键建立关系**：在多的一方创建外键指向一的一方的主键；\n![一对多建表示例]($resource/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)\n\n- 多对多\n  - 例如订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单\n  - 用户和角色多对多关系\n    - 用户： 小王、小马、小宋\n    - 角色：总经理、秘书、司机、保安\n  比如小王 可以 是总经理，可以是司机\n  比如小宋 可以是司机，可以是秘书，可以保安\n  比如小马 可以是 秘书，可以是总经理\n    - 一个用户里面可以有多个角色，一个角色里面可以有多个用户\n  - **多对多建表：创建第三张表维护关系**：中间表中至少两个字段作为外键分别指向多对多双方的主键；\n\n![多对多建表示例]($resource/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%BB%BA%E8%A1%A8%E7%A4%BA%E4%BE%8B.png)\n\n- 一对一\n  - 例如班级与班长之间的关系，一个班级只能有一个班长，一个班长只能在一个班级任职；\n  - **一对一建表：**两种方式：\n    - 唯一的外键对应：即假设一对一是任意一方为多，然后在多的一方创建外键指向一的一方的主键，然后将外键设置为唯一；\n    - 主键对应：一方的主键作为另一方的主键；\n\n**对应于 Hibernate 中就是使用 Java 对象关系进行描述：**\n\n![Hibernate中表之间关系]($resource/Hibernate%E4%B8%AD%E8%A1%A8%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB.png)\n\n\n\n**下面用到的一个文件：HibernateUtil.java**\n```java\npublic class HibernateUtil {\n    static Configuration configuration = null;\n    static SessionFactory sessionFactory = null;\n\n    static {\n        // 加载核心配置文件\n        configuration = new Configuration();\n        configuration.configure();\n        sessionFactory = configuration.buildSessionFactory();\n\n    }\n\n    /**\n     * 提供 session 与本地线程绑定的方法\n     * @return 与本地线程绑定之后的 Session\n     */\n    public static Session getSessionObject() {\n        return sessionFactory.getCurrentSession();\n    }\n\n    /**\n     * 提供返回 sessionFactory 方法\n     * @return sessionFactory 对象\n     */\n    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n}\n```\n\n## 二、Hibernate的一对多操作（重点）\n\n### （一）一对多映射配置（重点）\n\n以客户和联系人为例：客户是一，联系人是多\n\n- 第一步：创建两个实体类，客户和联系人\n```Customer_java\n@Setter\n@Getter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Customer {\n\tprivate Integer cid;\n\tprivate String custName;\n\tprivate String custLevel;\n\tprivate String custSource;\n\tprivate String custPhone;\n\tprivate String custMobile;\n\t/**\n\t * 在客户实体类里面表示多个联系人，一个客户有多个联系人\n\t * hibernate要求使用集合表示多的数据，使用set集合\n\t */\n\tprivate Set<LinkMan> setLinkMan = new HashSet<LinkMan>();\n}\n```\n\n```LinkMan_java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class LinkMan {\n    private Integer lkmId;\n    private String lkmName;\n    private String lkmGender;\n    private String lkmPhone;\n    /**\n     *  在联系人实体类里面表示所属客户,一个联系人只能属于一个客户\n     */\n    private Customer customer;\n}\n```\n\n- 第二步 让两个实体类之间互相表示\n  - 在客户实体类里面表示多个联系人：一个客户里面有多个联系人\n需要在 Customer 实体类中添加`private Set<LinkMan> setLinkMan = new HashSet<LinkMan>();` 以及对应的 get、set 方法，完整的代码见上面；\n\n  - 在联系人实体类里面表示所属客户：一个联系人只能属于一个客户\n在 LinkMan 实体类中添加 `private Customer customer;` 以及对应的 get、set 方法，完整的代码见上面；\n\n- 第三步：配置映射关系\n一般一个实体类对应一个映射文件\n**首先把映射最基本配置完成，然后在映射文件中，配置一对多关系**\n  - 在客户映射文件中，表示所有联系人\n```Customer_hbm_xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC\n        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n\n<hibernate-mapping >\n    <class name=\"com.gjxaiou.pojo.Customer\" table=\"customer\">\n        <id name=\"cid\" column=\"cid\">\n            <generator class=\"native\"></generator>\n        </id>\n\n        <property name=\"custName\" column=\"custname\"></property>\n        <property name=\"custLevel\" column=\"custlevel\"></property>\n        <property name=\"custSource\" column=\"custsource\"></property>\n        <property name=\"custPhone\" column=\"custphone\"></property>\n        <property name=\"custMobile\" column=\"custmobile\"></property>\n\n        <!-- 在客户映射文件中，使用 set 标签表示所有联系人\n\t\t\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称（多的一方集合的属性名称）\n\t\t\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n\t\t-->\n        <set name=\"setLinkMan\" inverse=\"true\">\n            <!-- 一对多建表，需要外键建立关系\n\t\t\t\thibernate机制：双向维护外键，在一和多那一方都配置外键\n\t\t\t\tcolumn属性值：外键名称（多的一方外键名称）\n\t\t\t -->\n            <key column=\"clid\"></key>\n            <!-- 客户所有的联系人，class里面写联系人实体类全路径（多的一方的类全路径） -->\n            <one-to-many class=\"com.gjxaiou.pojo.LinkMan\"></one-to-many>\n        </set>\n    </class>\n</hibernate-mapping>\n```\n \n  - 在联系人映射文件中，表示所属客户\n```LinkMan_hbm_java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC\n        \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n\n<hibernate-mapping >\n    <class name=\"com.gjxaiou.pojo.LinkMan\" table=\"linkman\">\n        <id name=\"lkmId\" column=\"lkmid\">\n            <generator class=\"native\"></generator>\n        </id>\n\n        <property name=\"lkmName\" column=\"lkmname\"></property>\n        <property name=\"lkmGender\" column=\"lkmgender\"></property>\n        <property name=\"lkmPhone\" column=\"lkmphone\"></property>\n\n        <!-- 表示联系人所属客户\n\t        name属性：因为在联系人实体类使用customer对象表示，写customer名称\n\t        class属性：customer全路径\n\t        column属性：外键名称\n        -->\n        <many-to-one name=\"customer\" class=\"com.gjxaiou.pojo.Customer\"></many-to-one>\n    </class>\n</hibernate-mapping>\n```\n\n- 第四步 创建核心配置文件，把映射文件引入到核心配置文件中\n```hibernate_cfg_xml\n<!-- 第三部分： 把映射文件放到核心配置文件中 必须的-->\n<mapping resource=\"Customer.hbm.xml\"/> \n<mapping resource=\"LinkMan.hbm.xml\"/>\n```\n\n测试： 只要写一个 test 开启事务即可\n```java\nHibernate: \n    \n    create table customer (\n       cid integer not null auto_increment,\n        custname varchar(255),\n        custlevel varchar(255),\n        custsource varchar(255),\n        custphone varchar(255),\n        custmobile varchar(255),\n        primary key (cid)\n    ) engine=MyISAM\nHibernate: \n    \n    create table linkman (\n       lkmid integer not null auto_increment,\n        lkmname varchar(255),\n        lkmgender varchar(255),\n        lkmphone varchar(255),\n        customer integer,\n        clid integer,\n        primary key (lkmid)\n    ) engine=MyISAM\nHibernate: \n    \n    alter table linkman \n       add constraint FKjyu2v2fsw52yp276bhmm47jtk \n       foreign key (customer) \n       references customer (cid)\nHibernate: \n    \n    alter table linkman \n       add constraint FKa41307x5ixhiogw7flgf68uag \n       foreign key (clid) \n       references customer (cid)\n```\n\n\n\n### （二）一对多级联操作\n\n- 级联操作\n  - 级联保存\n      添加一个客户，为这个客户添加多个联系人\n  - 级联删除\n      删除某一个客户，这个客户里面的所有的联系人也删除\n\n#### 1. 一对多级联保存\n 需求：添加客户，为这个客户添加两个联系人\n\n- **复杂写法**：\n使用方法\n```HibernateOneToMany_java\npublic class TableTest {\n    @Test\n    public void createOneToMany(){\n        Session session = HibernateUtil.getSessionObject();\n        Transaction transaction = session.beginTransaction();\n\n        // 创建一个客户\n        Customer customer = new Customer();\n        customer.setCustName(\"Alibaba\");\n        customer.setCustLevel(\"100\");\n        customer.setCustMobile(\"110\");\n\n        // 创建两个联系人\n        LinkMan linkMan1 = new LinkMan();\n        linkMan1.setLkmName(\"GJXAIOU\");\n        LinkMan linkMan2 = new LinkMan();\n        linkMan2.setLkmName(\"gjxaiou\");\n        linkMan2.setLkmGender(\"man\");\n\n        // 建立关系\n        customer.getSetLinkMan().add(linkMan1);\n        customer.getSetLinkMan().add(linkMan2);\n        linkMan1.setCustomer(customer);\n        linkMan2.setCustomer(customer);\n\n        session.save(customer);\n        session.save(linkMan1);\n        session.save(linkMan2);\n\n        transaction.commit();\n    }\n```\n运行结果：\n表一 customer 中的 cid 和表二 linkman 中的 clid 相对应；\n|cid | custname | custlevel | custsource | custphone | custmobie | \n|---|---|---|---|---|---|\n|1|Alibaba|100| |  |110 |\n\n\n|lkmid | lkmname |lkmgender|lkmphone|customer |clid | \n|---|---|---|---|---|---|\n|1|GJXAIOU| | |1| |\n|2 |gjxaiou | man |  | 1 | | \n\n**从上面代码可以看出是双向维护关系**\n不能仅仅配置一个（就是 save 只配置一个），如果只配置了一方，就是持久态对象关联了一个瞬时态对象，瞬时对象异常；\n如果真的仅仅想保留一方，就使用下面 Hibernate 提供的级联操作；\n**级联操作**： 当主控发执行保存、更新或者删除操作时，其关联对象（被控方）也执行相同的操作；\n\n\n\n- **上面对应的简化写法**\n  - 一般根据客户添加联系人\n第一步 在客户映射文件中进行配置\n`<set name=\"setLinkMan\" cascade=\"save-update\">`\n  - 在客户映射文件里面set标签进行配置\n \n\n第二步 创建客户和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了\n```java\n//演示一对多级联保存\n\t@Test\n\tpublic void testAddDemo2() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t// 添加一个客户，为这个客户添加一个联系人\n\t\t\t//1 创建客户和联系人对象\n\t\t\tCustomer customer = new Customer();\n\t\t\tcustomer.setCustName(\"百度\");\n\t\t\tcustomer.setCustLevel(\"普通客户\");\n\t\t\tcustomer.setCustSource(\"网络\");\n\t\t\tcustomer.setCustPhone(\"110\");\n\t\t\tcustomer.setCustMobile(\"999\");\n\t\t\n\t\t\tLinkMan linkman = new LinkMan();\n\t\t\tlinkman.setLkm_name(\"小宏\");\n\t\t\tlinkman.setLkm_gender(\"男\");\n\t\t\tlinkman.setLkm_phone(\"911\");\n\t\t\t//2 把联系人放到客户里面\n\t\t\tcustomer.getSetLinkMan().add(linkman);\n\t\t\t//3 保存客户\n\t\t\tsession.save(customer);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n```\n\n\n\n#### 2. 一对多级联删除\n 需求：删除某个客户，把客户里面所有的联系人删除\n\n**具体实现**\n- 第一步： 在客户映射文件set标签，进行配置\n（1）使用属性 cascade 属性值 delete（下面因为是在上面的基础上进行的配置，中间使用，隔开就行）\n `<set name = \"setLinkMan\" cascade = \"save-update,delete\">`\n- 第二步 在代码中直接删除客户（下面这段代码替换前面的自定义代码）\n（1）根据id查询对象，调用session里面delete方法删除\n```java\nCustomer customer = session.get(Customer.class,3);\nsession.delete(customer);\n```\n \n**执行过程：**\n（1）根据id查询客户\n \n![根据 id 查询客户]($resource/%E6%A0%B9%E6%8D%AE%20id%20%E6%9F%A5%E8%AF%A2%E5%AE%A2%E6%88%B7.png)\n（2）根据外键id值查询联系人\n \n![根据外键id 查询联系人]($resource/%E6%A0%B9%E6%8D%AE%E5%A4%96%E9%94%AEid%20%E6%9F%A5%E8%AF%A2%E8%81%94%E7%B3%BB%E4%BA%BA.png)\n（3）把联系人外键设置为null\n \n![设置联系人外键为null]($resource/%E8%AE%BE%E7%BD%AE%E8%81%94%E7%B3%BB%E4%BA%BA%E5%A4%96%E9%94%AE%E4%B8%BAnull.png)\n（4）删除联系人和客户\n \n![删除联系人和客户]($resource/%E5%88%A0%E9%99%A4%E8%81%94%E7%B3%BB%E4%BA%BA%E5%92%8C%E5%AE%A2%E6%88%B7.png)\n\n\n### （三）一对多修改操作（inverse属性）\n\n目标：让lucy联系人所属客户不是百度，而是阿里\n```java\n//1 根据id查询lucy联系人，根据id查询百度的客户\nCustomer baidu = session.get(Customer.class, 1);\nLinkMan lucy = session.get(LinkMan.class, 2);\n//2 设置持久态对象值\n//把联系人放到客户里面\nbaidu.getSetLinkMan().add(lucy);\n//把客户放到联系人里面\nlucy.setCustomer(baidu);\n```\n\n \n-  inverse属性\n  - 因为hibernate双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键，修改联系人时候也修改一次外键，造成效率问题\n \n![inverse 属性]($resource/inverse%20%E5%B1%9E%E6%80%A7.png)\n   - 解决方式：让其中的“一”方不维护外键\n    - 一对多里面，让其中“一”方放弃外键维护\n    - 一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统\n  - 具体实现：\n在放弃关系维护映射文件中（这里在 Custumer.hbn.xml中），进行配置，在set标签上使用inverse属性\n```Custumer_hbm_xml\n<!-- 在客户映射文件中，使用 set 标签表示所有联系人\n\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称\n\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n-->\n<set name=\"setLinkMan\" inverse=\"true\">\n```\n \n\n## 三、Hibernate多对多操作\n\n### （一）多对多映射配置\n以用户和角色为例演示\n\n- 第一步 创建实体类，用户和角色\n```Role_java\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@ToString\npublic class Role {\n  \tprivate Integer role_id;\n  \tprivate String role_name;\n  \tprivate String role_memo;\n\t/**\n\t *  一个角色拥有多个用户\n\t */\n\tprivate Set<User> setUser = new HashSet<User>();\n}\n```\n\n```User_java\n@Getter\n@Setter\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n  \tprivate Integer user_id;\n  \tprivate String user_name;\n  \tprivate String user_password;\n\t/**\n\t * 一个用户可以有多个角色\n\t */\n  \tprivate Set<Role> setRole = new HashSet<Role>();\n}\n```\n\n- 第二步 让两个实体类之间互相表示\n（1）一个用户里面表示所有角色，使用set集合\n`private Set<Role> setRole = new HashSet<Role>();` \n（2）一个角色有多个用户，使用set集合\n`private Set<User> setUser = new HashSet<User>();` \n\n第三步 配置映射关系\n（1）基本配置\n（2）配置多对多关系\n- 在用户里面表示所有角色，使用set标签\n```User\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE hibernate-mapping PUBLIC \n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.User\" table=\"t_user\">\n\t\t<id name=\"user_id\" column=\"user_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"user_name\" column=\"user_name\"></property>\n\t\t<property name=\"user_password\" column=\"user_password\"></property>\n\t\t<!-- 在用户里面表示所有角色，使用set标签 \n\t\t\tname属性：角色set集合名称\n\t\t\ttable属性：第三张表名称\n\t\t-->\n\t\t<set name=\"setRole\" table=\"user_role\" cascade=\"save-update,delete\">\n\t\t\t<!-- key标签里面配置\n\t\t\t\t配置当前映射文件在第三张表外键名称\n\t\t\t -->\n\t\t\t<key column=\"userid\"></key>\n\t\t\t<!-- class：角色实体类全路径\n\t\t\t     column：角色在第三张表外键名称\n\t\t\t -->\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.Role\" column=\"roleid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>\n```\n \n\n- 在角色里面表示所有用户，使用set标签\n```Role_hbm_xml\n<hibernate-mapping>\n\t<class name=\"cn.itcast.manytomany.Role\" table=\"t_role\">\n\t\t<id name=\"role_id\" column=\"role_id\">\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<property name=\"role_name\" column=\"role_name\"></property>\n\t\t<property name=\"role_memo\" column=\"role_memo\"></property>\n\t\t\n\t\t<!-- 在角色里面表示所有用户，使用set标签 -->\n\t\t<set name=\"setUser\" table=\"user_role\">\n\t\t\t<!-- 角色在第三张表外键 -->\n\t\t\t<key column=\"roleid\"></key>\n\t\t\t<many-to-many class=\"cn.itcast.manytomany.User\" column=\"userid\"></many-to-many>\n\t\t</set>\n\t</class>\n</hibernate-mapping>\n```\n \n上面配置中，两个 table 的值相同，用户配置中的 `<key column=\"userid\">`和角色中的`<many-to-many column=\"roleid\">`，反之角色配置中的：`<key column=\"roleid\">`和用户中的 `<many-to-many column=\"userid\">`\n\n- 第四步 在核心配置文件中引入映射文件\n```hibernate_cfg_xml\n<mapping resource=\"com/gjxaiou/manytomany/User.hbm.xml\"/>\n<mapping resource=\"com/gjxaiou/manytomany/Role.hbm.xml\"/>\n```\n \n测试：\n![测试结果]($resource/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png)\n\n\n### （二） 多对多级联保存\n根据用户保存角色\n\n- 第一步 在用户配置文件中 set 标签进行配置，cascade 值 save-update（User中）\n`<set name=\"setRole\" table=\"user_role\" cascade=\"save-update\">` \n\n- 第二步 写代码实现\n创建用户和角色对象，把角色放到用户里面，最终保存用户就可以了\n```HibernateManyToMany_java\npublic class HibernateManytoMany {\t\n\t//演示多对多修级联保存\n\t@Test\n\tpublic void testSave() {\n\t\tSessionFactory sessionFactory = null;\n\t\tSession session = null;\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t//得到sessionFactory\n\t\t\tsessionFactory = HibernateUtils.getSessionFactory();\n\t\t\t//得到session\n\t\t\tsession = sessionFactory.openSession();\n\t\t\t//开启事务\n\t\t\ttx = session.beginTransaction();\n\t\t\t\n\t\t\t//添加两个用户，为每个用户添加两个角色\n\t\t\t//1 创建对象\n\t\t\tUser user1 = new User();\n\t\t\tuser1.setUser_name(\"lucy\");\n\t\t\tuser1.setUser_password(\"123\");\n\t\t\t\n\t\t\tUser user2 = new User();\n\t\t\tuser2.setUser_name(\"mary\");\n\t\t\tuser2.setUser_password(\"456\");\n\t\t\t\n\t\t\tRole r1 = new Role();\n\t\t\tr1.setRole_name(\"总经理\");\n\t\t\tr1.setRole_memo(\"总经理\");\n\t\t\t\n\t\t\tRole r2 = new Role();\n\t\t\tr2.setRole_name(\"秘书\");\n\t\t\tr2.setRole_memo(\"秘书\");\n\t\t\t\n\t\t\tRole r3 = new Role();\n\t\t\tr3.setRole_name(\"保安\");\n\t\t\tr3.setRole_memo(\"保安\");\n\t\t\t\n\t\t\t//2 建立关系，把角色放到用户里面\n\t\t\t// user1 -- r1/r2\n\t\t\tuser1.getSetRole().add(r1);\n\t\t\tuser1.getSetRole().add(r2);\n\t\t\t\n\t\t\t// user2 -- r2/r3\n\t\t\tuser2.getSetRole().add(r2);\n\t\t\tuser2.getSetRole().add(r3);\n\t\t\t\n\t\t\t//3 保存用户\n\t\t\tsession.save(user1);\n\t\t\tsession.save(user2);\n\t\t\t\n\t\t\t//提交事务\n\t\t\ttx.commit();\n\n\t\t}catch(Exception e) {\n\t\t\ttx.rollback();\n\t\t}finally {\n\t\t\tsession.close();\n\t\t\t//sessionFactory不需要关闭\n\t\t\tsessionFactory.close();\n\t\t}\n\t}\n}\n```\n测试结果：\n| userid | roleid\n|---|---\n|1|1\n|1|2\n|2|2\n|2|3\n\n\n\n### （三）多对多级联删除（了解）\n第一步 在set标签进行配置，cascade值delete\n`<set cascade=\"save-update,delete\">`\n第二步 删除用户\n```java\nUser user = session.get(User.class, 1);\nsession.delete(user);\n```\n \n \n\n### （四）维护第三张表关系\n\n- 用户和角色多对多关系，维护关系通过第三张表维护\n\n- 让某个用户有某个角色\n  - 第一步 根据id查询用户和角色\n  - 第二步 把角色放到用户里面\n    - 把角色对象放到用户使用set集合\n\n- 让某个用户没有某个角色\n第一步 根据id查询用户和角色\n```HibernateManyToMany_java\n// 让某个用户有某个角色\n//让lucy有经纪人角色\n//1 查询lucy和经纪人\nUser lucy = session.get(User.class, 1);\nRole role = session.get(Role.class, 1);\n\n//2 把角色放到用户的set集合里面\nlucy.getSetRole().add(role);\n```\n \n\n第二步 从用户里面把角色去掉\n（1）从set集合里面把角色移除\n```HibernateManyToMany_java\n// 让某个用户没有有某个角色\nUser user = session.get(User.class, 2);\nRole role = session.get(Role.class, 3);\n\n//2 从用户里面把角色去掉\nuser.getSetRole().remove(role);\n```\n \n",[[1570000018921,["GJX@GJXAIOU",[[1,6533,"级联操作是指：当主控方执行保存、更新或者删除操作时候，其关联对象（）"]],[6533,6533],[6567,6567]]],[1570000024289,["GJX@GJXAIOU",[[1,6566,"被控方"]],[6566,6566],[6569,6569]]],[1570000028108,["GJX@GJXAIOU",[[1,6570,"也执行"]],[6570,6570],[6573,6573]]],[1570000033136,["GJX@GJXAIOU",[[1,6573,"相同的操作。"]],[6573,6573],[6579,6579]]],[1570000083904,["GJX@GJXAIOU",[[1,6580,"\n"]],[6579,6579],[6580,6580]]],[1570000109595,["GJX@GJXAIOU",[[1,6580,"级联的方向性：在"]],[6580,6580],[6588,6588]]],[1570000113295,["GJX@GJXAIOU",[[-1,6587,"在"]],[6588,6588],[6587,6587]]],[1570000134562,["GJX@GJXAIOU",[[1,6587,"在保存一的一方级联多的一方和在保存多的一方级联一的一方；"]],[6587,6587],[6615,6615]]],[1570000628553,["GJX@GJXAIOU",[[1,6737,"因为"]],[6737,6737],[6739,6739]]],[1570000655679,["GJX@GJXAIOU",[[1,6739,"需要保存客户，因此客户是主控方，则在客户的配置文件中配置；"]],[6739,6739],[6768,6768]]],[1570000656516,["GJX@GJXAIOU",[[1,6769,"\n"]],[6768,6768],[6769,6769]]],[1570000657301,["GJX@GJXAIOU",[[1,6770,"\n"]],[6769,6769],[6770,6770]]],[1570000658968,["GJX@GJXAIOU",[[1,6770,"···"]],[6770,6770],[6773,6773]]],[1570000660059,["GJX@GJXAIOU",[[-1,6770,"···"]],[6773,6773],[6770,6770]]],[1570000660396,["GJX@GJXAIOU",[[-1,6770,"\n"]],[6770,6770],[6769,6769]]],[1570000670631,["GJX@GJXAIOU",[[1,6769,"```Customer."]],[6769,6769],[6781,6781]]],[1570000671435,["GJX@GJXAIOU",[[-1,6780,"."]],[6781,6781],[6780,6780]]],[1570000672017,["GJX@GJXAIOU",[[1,6780,"-"]],[6780,6780],[6781,6781]]],[1570000673284,["GJX@GJXAIOU",[[-1,6780,"-"]],[6781,6781],[6780,6780]]],[1570000674040,["GJX@GJXAIOU",[[1,6780,"——"]],[6780,6780],[6782,6782]]],[1570000674857,["GJX@GJXAIOU",[[-1,6780,"——"]],[6782,6782],[6780,6780]]],[1570000679255,["GJX@GJXAIOU",[[1,6780,"_hbm_xml"]],[6780,6780],[6788,6788]]],[1570000679548,["GJX@GJXAIOU",[[1,6789,"\n"]],[6788,6788],[6789,6789]]],[1570000679684,["GJX@GJXAIOU",[[1,6790,"\n"]],[6789,6789],[6790,6790]]],[1570000680922,["GJX@GJXAIOU",[[1,6790,"```"]],[6790,6790],[6793,6793]]],[1570000682125,["GJX@GJXAIOU",[[1,6794,"\n"]],[6793,6793],[6794,6794]]],[1570000708704,["GJX@GJXAIOU",[[1,6767,"g"]],[6767,6767],[6768,6768]]],[1570000708753,["GJX@GJXAIOU",[[1,6767," "]],[6768,6768],[6769,6769]]],[1570000709366,["GJX@GJXAIOU",[[1,6769,"uanxi"]],[6769,6769],[6774,6774]]],[1570000711037,["GJX@GJXAIOU",[[-1,6766,"置 guanxi"]],[6774,6774],[6766,6766]]],[1570000712007,["GJX@GJXAIOU",[[1,6766,"、"]],[6766,6766],[6767,6767]]],[1570000713130,["GJX@GJXAIOU",[[-1,6765,"配、"]],[6767,6767],[6765,6765]]],[1570000716927,["GJX@GJXAIOU",[[1,6765,"配置关系映射"]],[6765,6765],[6771,6771]]],[1570000736264,["GJX@GJXAIOU",[[1,6793,"<!-- 在客户映射文件中，使用 set 标签表示所有联系人\n\t\t\tset标签里面有name属性：属性值写在客户实体类里面表示联系人的set集合名称（多的一方集合的属性名称）\n\t\t\tinverse属性默认值：false不放弃关系维护，true表示放弃关系维护\n\t\t-->\n        <set name=\"setLinkMan\" inverse=\"true\">\n            <!-- 一对多建表，需要外键建立关系\n\t\t\t\thibernate机制：双向维护外键，在一和多那一方都配置外键\n\t\t\t\tcolumn属性值：外键名称（多的一方外键名称）\n\t\t\t -->\n            <key column=\"clid\"></key>\n            <!-- 客户所有的联系人，class里面写联系人实体类全路径（多的一方的类全路径） -->\n            <one-to-many class=\"com.gjxaiou.pojo.LinkMan\"></one-to-many>\n        </set>"]],[6793,6793],[7265,7265]]],[1570000740580,["GJX@GJXAIOU",[[-1,6826,"\t"],[-1,6883,"\t"],[-1,6924,"\t"],[-1,6929,"  "],[-1,6986,"  "],[-1,7008,"\t"],[-1,7044,"\t"],[-1,7075,"\t"],[-1,7081,"  "],[-1,7119,"  "],[-1,7188,"  "],[-1,7251,"  "]],[6793,7265],[6793,7247]]],[1570000741148,["GJX@GJXAIOU",[[-1,6825,"\t"],[-1,6881,"\t"],[-1,6921,"\t"],[-1,6926,"  "],[-1,6979,"  "],[-1,7001,"\t"],[-1,7036,"\t"],[-1,7065,"\t"],[-1,7071,"  "],[-1,7107,"  "],[-1,7172,"  "],[-1,7235,"  "]],[6793,7247],[6793,7229]]],[1570000745969,["GJX@GJXAIOU",[[1,6825,"\t\t"],[1,6880,"\t\t"],[1,6919,"\t\t"],[1,6923,"   "],[1,6927," "],[1,6966,"    "],[1,6996,"\t\t"],[1,7028,"\t\t"],[1,7056,"\t\t"],[1,7061,"    "],[1,7095,"   "],[1,7103," "],[1,7150,"    "],[1,7219,"    "]],[6793,7229],[7265,7265]]],[1570000752963,["GJX@GJXAIOU",[[-1,6823,"\n\t\t\t"],[1,6827,"  "],[-1,6880,"\n\t\t\t"],[1,6884,"  "],[-1,6922,"\n\t\t"],[1,6925," "],[-1,6929,"      "],[-1,6978,"          "],[-1,7007,"\n\t\t\t\t"],[1,7012,"  "],[-1,7043,"\n\t\t\t\t"],[1,7048,"  "],[-1,7073,"\t\t\t"],[1,7076," "],[-1,7083,"          "],[-1,7121,"          "],[-1,7180,"          "],[-1,7251,"       "]],[6793,7265],[7198,7198]]],[1570000787998,["GJX@GJXAIOU",[[1,7221,"\n"]],[7220,7220],[7221,7221]]],[1570000803537,["GJX@GJXAIOU",[[1,7221,"级联方向性：保存用户同时级联用户的联系人"]],[7221,7221],[7241,7241]]],[1570001180215,["GJX@GJXAIOU",[[1,10018," \n"]],[10017,10017],[10019,10019]]],[1570001181626,["GJX@GJXAIOU",[[1,10019,"****"]],[10019,10019],[10021,10021]]],[1570001195815,["GJX@GJXAIOU",[[1,10021,"如果不配置 cascade = \""]],[10021,10021],[10038,10038]]],[1570001195866,["GJX@GJXAIOU",[[-1,10037,"\""],[1,10038,"“"]],[10038,10038],[10038,10038]]],[1570001196663,["GJX@GJXAIOU",[[1,10038,"delo"]],[10038,10038],[10042,10042]]],[1570001197476,["GJX@GJXAIOU",[[-1,10041,"o"]],[10042,10042],[10041,10041]]],[1570001198814,["GJX@GJXAIOU",[[1,10041,"ete\""]],[10041,10041],[10045,10045]]],[1570001198867,["GJX@GJXAIOU",[[-1,10044,"\""],[1,10045,"”"]],[10045,10045],[10045,10045]]],[1570001201016,["GJX@GJXAIOU",[[1,10045,","]],[10045,10045],[10046,10046]]],[1570001201476,["GJX@GJXAIOU",[[-1,10045,","]],[10046,10046],[10045,10045]]],[1570001223121,["GJX@GJXAIOU",[[1,10045,"，则会先将联系人的外键置为  null，然后删除客户；"]],[10045,10045],[10072,10072]]],[1570001325349,["GJX@GJXAIOU",[[-1,11511," "],[1,11512,"\n"]],[11512,11512],[11512,11512]]],[1570001330969,["GJX@GJXAIOU",[[1,11512,"****"]],[11512,11512],[11514,11514]]],[1570001343714,["GJX@GJXAIOU",[[1,11514,"区分 cascade 和 inverse"]],[11514,11514],[11534,11534]]],[1570001345478,["GJX@GJXAIOU",[[1,11538,"\n"]],[11536,11536],[11537,11537]]],[1570001346145,["GJX@GJXAIOU",[[1,11537,"- "]],[11537,11537],[11539,11539]]],[1570001370897,["GJX@GJXAIOU",[[1,11539,"cascade 强调是操作一个对象的时候，是否操作器"]],[11539,11539],[11565,11565]]],[1570001371358,["GJX@GJXAIOU",[[-1,11564,"器"]],[11565,11565],[11564,11564]]],[1570001378439,["GJX@GJXAIOU",[[1,11564,"其关联对象；"]],[11564,11564],[11570,11570]]],[1570001378790,["GJX@GJXAIOU",[[1,11571,"- \n"]],[11570,11570],[11573,11573]]],[1570001386418,["GJX@GJXAIOU",[[1,11573,"inverse 情调是"]],[11573,11573],[11584,11584]]],[1570001388220,["GJX@GJXAIOU",[[-1,11581,"情调是"]],[11584,11584],[11581,11581]]],[1570001400783,["GJX@GJXAIOU",[[1,11581,"强调的是外键的维护权；"]],[11581,11581],[11592,11592]]]],null,"GJX@GJXAIOU"]]}