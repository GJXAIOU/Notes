{"compress":true,"commitItems":[["9a1623d7-295e-4d57-a31a-2c5ac0055f59",1564056201366,"",[[1564056148638,["GJX@GJXAIOU",[[1,0,"# 反射详解\n\n\n\n"]],[0,0],[9,9]]],[1564056198876,["GJX@GJXAIOU",[[1,8,"# java反射（特别通俗易懂）\n\n2018年05月02日 11:08:15 [java知识社](https://me.csdn.net/lwl20140904) 阅读数 52712\n\n# 反射是框架设计的灵魂\n\n**（使用的前提条件：必须先得到代表的字节码的Class，Class类用于表示.class文件（字节码））**\n\n# 一、反射的概述\n\nJAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。\n\n要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象. \n\n**以上的总结就是什么是反射**\n\n反射就是把java类中的各种成分映射成一个个的Java对象\n\n例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。\n\n     （其实：一个类中这些成员方法、构造方法、在加入类中都有一个类来描述）\n\n如图是类的正常加载过程：反射的原理在与class对象。\n\n熟悉一下加载的时候：Class对象的由来是将class文件读入内存，并为之创建一个Class对象。\n\n![](https://img-blog.csdn.net/20170513133210763) \n\n其中这个Class对象很特殊。我们先了解一下这个Class类\n\n# 二、查看Class类在java中的api详解（1.7的API）\n\n如何阅读java中的api详见java基础之——String字符串处理\n\n![](https://img-blog.csdn.net/20170513135521667) \n\n`Class` 类的实例表示正在运行的 Java 应用程序中的类和接口。也就是jvm中有N多的实例每个类都有该Class对象。（包括基本数据类型）\n\n`Class` 没有公共构造方法。`Class` 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的`defineClass` 方法自动构造的。也就是这不需要我们自己去处理创建，JVM已经帮我们创建好了。 \n\n没有公共的构造方法，方法共有64个太多了。下面用到哪个就详解哪个吧\n\n![](https://img-blog.csdn.net/20170513144141409) \n\n# 三、反射的使用（这里使用Student类做演示）\n\n先写一个Student类。\n\n## 1、获取Class对象的三种方式\n\n### 1.1 Object ——> getClass(); 1.2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性 1.3 通过Class类的静态方法：forName（String  className）(常用)\n\n其中1.1是因为Object类中的getClass方法、因为所有类都继承Object类。从而调用Object类来获取\n\n![](https://img-blog.csdn.net/20170513145317647)\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:18px;”>package fanshe;  \n2.  /** \n3.  * 获取Class对象的三种方式 \n4.  * 1 Object ——> getClass(); \n5.  * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性 \n6.  * 3 通过Class类的静态方法：forName（String  className）(常用) \n7.  * \n8.  */  \n9.  public class Fanshe {  \n10.  public static void main(String[] args) {  \n11.  //第一种方式获取Class对象    \n12.  Student stu1 = new Student();//这一new 产生一个Student对象，一个Class对象。  \n13.  Class stuClass = stu1.getClass();//获取Class对象  \n14.  System.out.println(stuClass.getName());  \n\n16.  //第二种方式获取Class对象  \n17.  Class stuClass2 = Student.class;  \n18.  System.out.println(stuClass == stuClass2);//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个  \n\n20.  //第三种方式获取Class对象  \n21.  try {  \n22.  Class stuClass3 = Class.forName(”fanshe.Student”);//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名  \n23.  System.out.println(stuClass3 == stuClass2);//判断三种方式是否获取的是同一个Class对象  \n24.  } catch (ClassNotFoundException e) {  \n25.  e.printStackTrace();  \n26.  }  \n\n28.  }  \n29.  }</span>  \n\n```java\npackage fanshe;\n/**\n * 获取Class对象的三种方式\n * 1 Object ——> getClass();\n * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性\n * 3 通过Class类的静态方法：forName（String  className）(常用)\n *\n */\npublic class Fanshe {\n    public static void main(String[] args) {\n        //第一种方式获取Class对象  \n        Student stu1 = new Student();//这一new 产生一个Student对象，一个Class对象。\n        Class stuClass = stu1.getClass();//获取Class对象\n        System.out.println(stuClass.getName());\n\n        //第二种方式获取Class对象\n        Class stuClass2 = Student.class;\n        System.out.println(stuClass == stuClass2);//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个\n\n        //第三种方式获取Class对象\n        try {\n            Class stuClass3 = Class.forName(\"fanshe.Student\");//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名\n            System.out.println(stuClass3 == stuClass2);//判断三种方式是否获取的是同一个Class对象\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}12345678910111213141516171819202122232425262728\n```\n\n## 注意：在运行期间，一个类，只有一个Class对象产生。 \n\n三种方式常用第三种，第一种对象都有了还要反射干什么。第二种需要导入类的包，依赖太强，不导包就抛编译错误。一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。\n\n## 2、通过反射获取构造方法并使用：\n\nstudent类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  package fanshe;  \n\n3.  public class Student {  \n\n5.  //—————构造方法——————-  \n6.  //（默认的构造方法）  \n7.  Student(String str){  \n8.  System.out.println(”(默认)的构造方法 s = ” + str);  \n9.  }  \n\n11.  //无参构造方法  \n12.  public Student(){  \n13.  System.out.println(”调用了公有、无参构造方法执行了。。。”);  \n14.  }  \n\n16.  //有一个参数的构造方法  \n17.  public Student(char name){  \n18.  System.out.println(”姓名：” + name);  \n19.  }  \n\n21.  //有多个参数的构造方法  \n22.  public Student(String name ,int age){  \n23.  System.out.println(”姓名：”+name+“年龄：”+ age);//这的执行效率有问题，以后解决。  \n24.  }  \n\n26.  //受保护的构造方法  \n27.  protected Student(boolean n){  \n28.  System.out.println(”受保护的构造方法 n = ” + n);  \n29.  }  \n\n31.  //私有构造方法  \n32.  private Student(int age){  \n33.  System.out.println(”私有的构造方法   年龄：”+ age);  \n34.  }  \n\n36.  }  \n\n```java\npackage fanshe;\n\npublic class Student {\n\n    //---------------构造方法-------------------\n    //（默认的构造方法）\n    Student(String str){\n        System.out.println(\"(默认)的构造方法 s = \" + str);\n    }\n\n    //无参构造方法\n    public Student(){\n        System.out.println(\"调用了公有、无参构造方法执行了。。。\");\n    }\n\n    //有一个参数的构造方法\n    public Student(char name){\n        System.out.println(\"姓名：\" + name);\n    }\n\n    //有多个参数的构造方法\n    public Student(String name ,int age){\n        System.out.println(\"姓名：\"+name+\"年龄：\"+ age);//这的执行效率有问题，以后解决。\n    }\n\n    //受保护的构造方法\n    protected Student(boolean n){\n        System.out.println(\"受保护的构造方法 n = \" + n);\n    }\n\n    //私有构造方法\n    private Student(int age){\n        System.out.println(\"私有的构造方法   年龄：\"+ age);\n    }\n\n}\n123456789101112131415161718192021222324252627282930313233343536\n```\n\n共有6个构造方法；\n\n测试类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  package fanshe;  \n\n3.  import java.lang.reflect.Constructor;  \n\n6.  /* \n7.  * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员； \n8.  *  \n9.  * 1.获取构造方法： \n10.  *      1).批量的方法： \n11.  *          public Constructor[] getConstructors()：所有”公有的”构造方法 \n12.  public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有) \n\n14.  *      2).获取单个的方法，并调用： \n15.  *          public Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法： \n16.  *          public Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有； \n17.  *       \n18.  *          调用构造方法： \n19.  *          Constructor–>newInstance(Object… initargs) \n20.  */  \n21.  public class Constructors {  \n\n23.  public static void main(String[] args) throws Exception {  \n24.  //1.加载Class对象  \n25.  Class clazz = Class.forName(”fanshe.Student”);  \n\n28.  //2.获取所有公有构造方法  \n29.  System.out.println(”**********************所有公有构造方法*********************************”);  \n30.  Constructor[] conArray = clazz.getConstructors();  \n31.  for(Constructor c : conArray){  \n32.  System.out.println(c);  \n33.  }  \n\n36.  System.out.println(”************所有的构造方法(包括：私有、受保护、默认、公有)***************”);  \n37.  conArray = clazz.getDeclaredConstructors();  \n38.  for(Constructor c : conArray){  \n39.  System.out.println(c);  \n40.  }  \n\n42.  System.out.println(”*****************获取公有、无参的构造方法*******************************”);  \n43.  Constructor con = clazz.getConstructor(null);  \n44.  //1>、因为是无参的构造方法所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型  \n45.  //2>、返回的是描述这个无参构造函数的类对象。  \n\n47.  System.out.println(”con = ” + con);  \n48.  //调用构造方法  \n49.  Object obj = con.newInstance();  \n50.  //  System.out.println(“obj = ” + obj);  \n51.  //  Student stu = (Student)obj;  \n\n53.  System.out.println(”******************获取私有构造方法，并调用*******************************”);  \n54.  con = clazz.getDeclaredConstructor(char.class);  \n55.  System.out.println(con);  \n56.  //调用构造方法  \n57.  con.setAccessible(true);//暴力访问(忽略掉访问修饰符)  \n58.  obj = con.newInstance(’男’);  \n59.  }  \n\n61.  }  \n\n```java\npackage fanshe;\n\nimport java.lang.reflect.Constructor;\n\n/*\n * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；\n * \n * 1.获取构造方法：\n *      1).批量的方法：\n *          public Constructor[] getConstructors()：所有\"公有的\"构造方法\n            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n *      2).获取单个的方法，并调用：\n *          public Constructor getConstructor(Class... parameterTypes):获取单个的\"公有的\"构造方法：\n *          public Constructor getDeclaredConstructor(Class... parameterTypes):获取\"某个构造方法\"可以是私有的，或受保护、默认、公有；\n *      \n *          调用构造方法：\n *          Constructor-->newInstance(Object... initargs)\n */\npublic class Constructors {\n\n    public static void main(String[] args) throws Exception {\n        //1.加载Class对象\n        Class clazz = Class.forName(\"fanshe.Student\");\n\n        //2.获取所有公有构造方法\n        System.out.println(\"**********************所有公有构造方法*********************************\");\n        Constructor[] conArray = clazz.getConstructors();\n        for(Constructor c : conArray){\n            System.out.println(c);\n        }\n\n        System.out.println(\"************所有的构造方法(包括：私有、受保护、默认、公有)***************\");\n        conArray = clazz.getDeclaredConstructors();\n        for(Constructor c : conArray){\n            System.out.println(c);\n        }\n\n        System.out.println(\"*****************获取公有、无参的构造方法*******************************\");\n        Constructor con = clazz.getConstructor(null);\n        //1>、因为是无参的构造方法所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型\n        //2>、返回的是描述这个无参构造函数的类对象。\n\n        System.out.println(\"con = \" + con);\n        //调用构造方法\n        Object obj = con.newInstance();\n    //  System.out.println(\"obj = \" + obj);\n    //  Student stu = (Student)obj;\n\n        System.out.println(\"******************获取私有构造方法，并调用*******************************\");\n        con = clazz.getDeclaredConstructor(char.class);\n        System.out.println(con);\n        //调用构造方法\n        con.setAccessible(true);//暴力访问(忽略掉访问修饰符)\n        obj = con.newInstance('男');\n    }\n\n}\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061\n```\n\n后台输出：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  **********************所有公有构造方法*********************************  \n2.  public fanshe.Student(java.lang.String,int)  \n3.  public fanshe.Student(char)  \n4.  public fanshe.Student()  \n5.  ************所有的构造方法(包括：私有、受保护、默认、公有)***************  \n6.  private fanshe.Student(int)  \n7.  protected fanshe.Student(boolean)  \n8.  public fanshe.Student(java.lang.String,int)  \n9.  public fanshe.Student(char)  \n10.  public fanshe.Student()  \n11.  fanshe.Student(java.lang.String)  \n12.  *****************获取公有、无参的构造方法*******************************  \n13.  con = public fanshe.Student()  \n14.  调用了公有、无参构造方法执行了。。。  \n15.  ******************获取私有构造方法，并调用*******************************  \n16.  public fanshe.Student(char)  \n17.  姓名：男  \n\n```java\n**********************所有公有构造方法*********************************\npublic fanshe.Student(java.lang.String,int)\npublic fanshe.Student(char)\npublic fanshe.Student()\n************所有的构造方法(包括：私有、受保护、默认、公有)***************\nprivate fanshe.Student(int)\nprotected fanshe.Student(boolean)\npublic fanshe.Student(java.lang.String,int)\npublic fanshe.Student(char)\npublic fanshe.Student()\nfanshe.Student(java.lang.String)\n*****************获取公有、无参的构造方法*******************************\ncon = public fanshe.Student()\n调用了公有、无参构造方法执行了。。。\n******************获取私有构造方法，并调用*******************************\npublic fanshe.Student(char)\n姓名：男12345678910111213141516\n```\n\n**调用方法：**\n\n1.获取构造方法：\n\n  1).批量的方法：\npublic Constructor[] getConstructors()：所有”公有的”构造方法\n            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n  2).获取单个的方法，并调用：\npublic Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法：\npublic Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有；\n\n  调用构造方法：\n\nConstructor–>newInstance(Object… initargs) \n\n2、newInstance是 Constructor类的方法（管理构造函数的类）\n\napi的解释为：\n\n`**[](https://blog.csdn.net/lwl20140904/article/details/80163880)**`newInstance(Object… initargs)\n           使用此 `Constructor` 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。\n\n它的返回值是T类型，所以newInstance是创建了一个构造方法的声明类的新实例对象。并为之调用\n\n## 3、获取成员变量并调用\n\nstudent类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.field;  \n\n3.  public class Student {  \n4.  public Student(){  \n\n6.  }  \n7.  //**********字段*************//  \n8.  public String name;  \n9.  protected int age;  \n10.  char sex;  \n11.  private String phoneNum;  \n\n13.  @Override  \n14.  public String toString() {  \n15.  return “Student [name=” + name + “, age=” + age + “, sex=” + sex  \n16.  + ”, phoneNum=” + phoneNum + “]”;  \n17.  }  \n\n20.  }</span>  \n\n```java\npackage fanshe.field;\n\npublic class Student {\n    public Student(){\n\n    }\n    //**********字段*************//\n    public String name;\n    protected int age;\n    char sex;\n    private String phoneNum;\n\n    @Override\n    public String toString() {\n        return \"Student [name=\" + name + \", age=\" + age + \", sex=\" + sex\n                + \", phoneNum=\" + phoneNum + \"]\";\n    }\n\n}12345678910111213141516171819\n```\n\n测试类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.field;  \n2.  import java.lang.reflect.Field;  \n3.  /* \n4.  * 获取成员变量并调用： \n5.  *  \n6.  * 1.批量的 \n7.  *      1).Field[] getFields():获取所有的”公有字段” \n8.  *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有； \n9.  * 2.获取单个的： \n10.  *      1).public Field getField(String fieldName):获取某个”公有的”字段； \n11.  *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的) \n12.  *  \n13.  *   设置字段的值： \n14.  *      Field –> public void set(Object obj,Object value): \n15.  *                  参数说明： \n16.  *                  1.obj:要设置的字段所在的对象； \n17.  *                  2.value:要为字段设置的值； \n18.  *  \n19.  */  \n20.  public class Fields {  \n\n22.  public static void main(String[] args) throws Exception {  \n23.  //1.获取Class对象  \n24.  Class stuClass = Class.forName(”fanshe.field.Student”);  \n25.  //2.获取字段  \n26.  System.out.println(”************获取所有公有的字段********************”);  \n27.  Field[] fieldArray = stuClass.getFields();  \n28.  for(Field f : fieldArray){  \n29.  System.out.println(f);  \n30.  }  \n31.  System.out.println(”************获取所有的字段(包括私有、受保护、默认的)********************”);  \n32.  fieldArray = stuClass.getDeclaredFields();  \n33.  for(Field f : fieldArray){  \n34.  System.out.println(f);  \n35.  }  \n36.  System.out.println(”*************获取公有字段**并调用***********************************”);  \n37.  Field f = stuClass.getField(”name”);  \n38.  System.out.println(f);  \n39.  //获取一个对象  \n40.  Object obj = stuClass.getConstructor().newInstance();//产生Student对象–》Student stu = new Student();  \n41.  //为字段设置值  \n42.  f.set(obj, ”刘德华”);//为Student对象中的name属性赋值–》stu.name = ”刘德华”  \n43.  //验证  \n44.  Student stu = (Student)obj;  \n45.  System.out.println(”验证姓名：” + stu.name);  \n\n48.  System.out.println(”**************获取私有字段****并调用********************************”);  \n49.  f = stuClass.getDeclaredField(”phoneNum”);  \n50.  System.out.println(f);  \n51.  f.setAccessible(true);//暴力反射，解除私有限定  \n52.  f.set(obj, ”18888889999”);  \n53.  System.out.println(”验证电话：” + stu);  \n\n55.  }  \n56.  }</span><span style=”font-size:18px;”>  \n57.  </span>  \n\n```java\npackage fanshe.field;\nimport java.lang.reflect.Field;\n/*\n * 获取成员变量并调用：\n * \n * 1.批量的\n *      1).Field[] getFields():获取所有的\"公有字段\"\n *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；\n * 2.获取单个的：\n *      1).public Field getField(String fieldName):获取某个\"公有的\"字段；\n *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n * \n *   设置字段的值：\n *      Field --> public void set(Object obj,Object value):\n *                  参数说明：\n *                  1.obj:要设置的字段所在的对象；\n *                  2.value:要为字段设置的值；\n * \n */\npublic class Fields {\n\n        public static void main(String[] args) throws Exception {\n            //1.获取Class对象\n            Class stuClass = Class.forName(\"fanshe.field.Student\");\n            //2.获取字段\n            System.out.println(\"************获取所有公有的字段********************\");\n            Field[] fieldArray = stuClass.getFields();\n            for(Field f : fieldArray){\n                System.out.println(f);\n            }\n            System.out.println(\"************获取所有的字段(包括私有、受保护、默认的)********************\");\n            fieldArray = stuClass.getDeclaredFields();\n            for(Field f : fieldArray){\n                System.out.println(f);\n            }\n            System.out.println(\"*************获取公有字段**并调用***********************************\");\n            Field f = stuClass.getField(\"name\");\n            System.out.println(f);\n            //获取一个对象\n            Object obj = stuClass.getConstructor().newInstance();//产生Student对象--》Student stu = new Student();\n            //为字段设置值\n            f.set(obj, \"刘德华\");//为Student对象中的name属性赋值--》stu.name = \"刘德华\"\n            //验证\n            Student stu = (Student)obj;\n            System.out.println(\"验证姓名：\" + stu.name);\n\n            System.out.println(\"**************获取私有字段****并调用********************************\");\n            f = stuClass.getDeclaredField(\"phoneNum\");\n            System.out.println(f);\n            f.setAccessible(true);//暴力反射，解除私有限定\n            f.set(obj, \"18888889999\");\n            System.out.println(\"验证电话：\" + stu);\n\n        }\n    }\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556\n```\n\n后台输出：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ************获取所有公有的字段********************  \n2.  public java.lang.String fanshe.field.Student.name  \n3.  ************获取所有的字段(包括私有、受保护、默认的)********************  \n4.  public java.lang.String fanshe.field.Student.name  \n5.  protected int fanshe.field.Student.age  \n6.  char fanshe.field.Student.sex  \n7.  private java.lang.String fanshe.field.Student.phoneNum  \n8.  *************获取公有字段**并调用***********************************  \n9.  public java.lang.String fanshe.field.Student.name  \n10.  验证姓名：刘德华  \n11.  **************获取私有字段****并调用********************************  \n12.  private java.lang.String fanshe.field.Student.phoneNum  \n13.  验证电话：Student [name=刘德华, age=0, sex=  \n\n```java\n************获取所有公有的字段********************\npublic java.lang.String fanshe.field.Student.name\n************获取所有的字段(包括私有、受保护、默认的)********************\npublic java.lang.String fanshe.field.Student.name\nprotected int fanshe.field.Student.age\nchar fanshe.field.Student.sex\nprivate java.lang.String fanshe.field.Student.phoneNum\n*************获取公有字段**并调用***********************************\npublic java.lang.String fanshe.field.Student.name\n验证姓名：刘德华\n**************获取私有字段****并调用********************************\nprivate java.lang.String fanshe.field.Student.phoneNum\n验证电话：Student [name=刘德华, age=0, sex=123456789101112\n```\n\n由此可见\n\n调用字段时：需要传递两个参数：\n\nObject obj = stuClass.getConstructor().newInstance();//产生Student对象–》Student stu = new Student();\n//为字段设置值\nf.set(obj, “刘德华”);//为Student对象中的name属性赋值–》stu.name = “刘德华” \n\n第一个参数：要传入设置的对象，第二个参数：要传入实参\n\n## 4、获取成员方法并调用\n\nstudent类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.method;  \n\n3.  public class Student {  \n4.  //**************成员方法***************//  \n5.  public void show1(String s){  \n6.  System.out.println(”调用了：公有的，String参数的show1(): s = ” + s);  \n7.  }  \n8.  protected void show2(){  \n9.  System.out.println(”调用了：受保护的，无参的show2()”);  \n10.  }  \n11.  void show3(){  \n12.  System.out.println(”调用了：默认的，无参的show3()”);  \n13.  }  \n14.  private String show4(int age){  \n15.  System.out.println(”调用了，私有的，并且有返回值的，int参数的show4(): age = ” + age);  \n16.  return “abcd”;  \n17.  }  \n18.  }  \n19.  </span>  \n\n```java\npackage fanshe.method;\n\npublic class Student {\n    //**************成员方法***************//\n    public void show1(String s){\n        System.out.println(\"调用了：公有的，String参数的show1(): s = \" + s);\n    }\n    protected void show2(){\n        System.out.println(\"调用了：受保护的，无参的show2()\");\n    }\n    void show3(){\n        System.out.println(\"调用了：默认的，无参的show3()\");\n    }\n    private String show4(int age){\n        System.out.println(\"调用了，私有的，并且有返回值的，int参数的show4(): age = \" + age);\n        return \"abcd\";\n    }\n}\n123456789101112131415161718\n```\n\n测试类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.method;  \n\n3.  import java.lang.reflect.Method;  \n\n5.  /* \n6.  * 获取成员方法并调用： \n7.  *  \n8.  * 1.批量的： \n9.  *      public Method[] getMethods():获取所有”公有方法”；（包含了父类的方法也包含Object类） \n10.  *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的) \n11.  * 2.获取单个的： \n12.  *      public Method getMethod(String name,Class<?>… parameterTypes): \n13.  *                  参数： \n14.  *                      name : 方法名； \n15.  *                      Class … : 形参的Class类型对象 \n16.  *      public Method getDeclaredMethod(String name,Class<?>… parameterTypes) \n17.  *  \n18.  *   调用方法： \n19.  *      Method –> public Object invoke(Object obj,Object… args): \n20.  *                  参数说明： \n21.  *                  obj : 要调用方法的对象； \n22.  *                  args:调用方式时所传递的实参； \n\n24.  ): \n25.  */  \n26.  public class MethodClass {  \n\n28.  public static void main(String[] args) throws Exception {  \n29.  //1.获取Class对象  \n30.  Class stuClass = Class.forName(”fanshe.method.Student”);  \n31.  //2.获取所有公有方法  \n32.  System.out.println(”***************获取所有的”公有“方法*******************”);  \n33.  stuClass.getMethods();  \n34.  Method[] methodArray = stuClass.getMethods();  \n35.  for(Method m : methodArray){  \n36.  System.out.println(m);  \n37.  }  \n38.  System.out.println(”***************获取所有的方法，包括私有的*******************”);  \n39.  methodArray = stuClass.getDeclaredMethods();  \n40.  for(Method m : methodArray){  \n41.  System.out.println(m);  \n42.  }  \n43.  System.out.println(”***************获取公有的show1()方法*******************”);  \n44.  Method m = stuClass.getMethod(”show1”, String.class);  \n45.  System.out.println(m);  \n46.  //实例化一个Student对象  \n47.  Object obj = stuClass.getConstructor().newInstance();  \n48.  m.invoke(obj, ”刘德华”);  \n\n50.  System.out.println(”***************获取私有的show4()方法******************”);  \n51.  m = stuClass.getDeclaredMethod(”show4”, int.class);  \n52.  System.out.println(m);  \n53.  m.setAccessible(true);//解除私有限定  \n54.  Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参  \n55.  System.out.println(”返回值：” + result);  \n\n58.  }  \n59.  }  \n60.  </span>  \n\n```java\npackage fanshe.method;\n\nimport java.lang.reflect.Method;\n\n/*\n * 获取成员方法并调用：\n * \n * 1.批量的：\n *      public Method[] getMethods():获取所有\"公有方法\"；（包含了父类的方法也包含Object类）\n *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)\n * 2.获取单个的：\n *      public Method getMethod(String name,Class<?>... parameterTypes):\n *                  参数：\n *                      name : 方法名；\n *                      Class ... : 形参的Class类型对象\n *      public Method getDeclaredMethod(String name,Class<?>... parameterTypes)\n * \n *   调用方法：\n *      Method --> public Object invoke(Object obj,Object... args):\n *                  参数说明：\n *                  obj : 要调用方法的对象；\n *                  args:调用方式时所传递的实参；\n\n):\n */\npublic class MethodClass {\n\n    public static void main(String[] args) throws Exception {\n        //1.获取Class对象\n        Class stuClass = Class.forName(\"fanshe.method.Student\");\n        //2.获取所有公有方法\n        System.out.println(\"***************获取所有的”公有“方法*******************\");\n        stuClass.getMethods();\n        Method[] methodArray = stuClass.getMethods();\n        for(Method m : methodArray){\n            System.out.println(m);\n        }\n        System.out.println(\"***************获取所有的方法，包括私有的*******************\");\n        methodArray = stuClass.getDeclaredMethods();\n        for(Method m : methodArray){\n            System.out.println(m);\n        }\n        System.out.println(\"***************获取公有的show1()方法*******************\");\n        Method m = stuClass.getMethod(\"show1\", String.class);\n        System.out.println(m);\n        //实例化一个Student对象\n        Object obj = stuClass.getConstructor().newInstance();\n        m.invoke(obj, \"刘德华\");\n\n        System.out.println(\"***************获取私有的show4()方法******************\");\n        m = stuClass.getDeclaredMethod(\"show4\", int.class);\n        System.out.println(m);\n        m.setAccessible(true);//解除私有限定\n        Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参\n        System.out.println(\"返回值：\" + result);\n\n    }\n}\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859\n```\n\n控制台输出：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ***************获取所有的”公有“方法*******************  \n2.  public void fanshe.method.Student.show1(java.lang.String)  \n3.  public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException  \n4.  public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException  \n5.  public final void java.lang.Object.wait() throws java.lang.InterruptedException  \n6.  public boolean java.lang.Object.equals(java.lang.Object)  \n7.  public java.lang.String java.lang.Object.toString()  \n8.  public native int java.lang.Object.hashCode()  \n9.  public final native java.lang.Class java.lang.Object.getClass()  \n10.  public final native void java.lang.Object.notify()  \n11.  public final native void java.lang.Object.notifyAll()  \n12.  ***************获取所有的方法，包括私有的*******************  \n13.  public void fanshe.method.Student.show1(java.lang.String)  \n14.  private java.lang.String fanshe.method.Student.show4(int)  \n15.  protected void fanshe.method.Student.show2()  \n16.  void fanshe.method.Student.show3()  \n17.  ***************获取公有的show1()方法*******************  \n18.  public void fanshe.method.Student.show1(java.lang.String)  \n19.  调用了：公有的，String参数的show1(): s = 刘德华  \n20.  ***************获取私有的show4()方法******************  \n21.  private java.lang.String fanshe.method.Student.show4(int)  \n22.  调用了，私有的，并且有返回值的，int参数的show4(): age = 20  \n23.  返回值：abcd  \n\n```java\n***************获取所有的”公有“方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n***************获取所有的方法，包括私有的*******************\npublic void fanshe.method.Student.show1(java.lang.String)\nprivate java.lang.String fanshe.method.Student.show4(int)\nprotected void fanshe.method.Student.show2()\nvoid fanshe.method.Student.show3()\n***************获取公有的show1()方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\n调用了：公有的，String参数的show1(): s = 刘德华\n***************获取私有的show4()方法******************\nprivate java.lang.String fanshe.method.Student.show4(int)\n调用了，私有的，并且有返回值的，int参数的show4(): age = 20\n返回值：abcd12345678910111213141516171819202122\n```\n\n由此可见：\n\nm = stuClass.getDeclaredMethod(“show4”, int.class);//调用制定方法（所有包括私有的），需要传入两个参数，第一个是调用的方法名称，第二个是方法的形参类型，切记是类型。 System.out.println(m);\nm.setAccessible(true);//解除私有限定\nObject result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参\nSystem.out.println(“返回值：” + result);//\n\n控制台输出：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ***************获取所有的”公有“方法*******************  \n2.  public void fanshe.method.Student.show1(java.lang.String)  \n3.  public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException  \n4.  public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException  \n5.  public final void java.lang.Object.wait() throws java.lang.InterruptedException  \n6.  public boolean java.lang.Object.equals(java.lang.Object)  \n7.  public java.lang.String java.lang.Object.toString()  \n8.  public native int java.lang.Object.hashCode()  \n9.  public final native java.lang.Class java.lang.Object.getClass()  \n10.  public final native void java.lang.Object.notify()  \n11.  public final native void java.lang.Object.notifyAll()  \n12.  ***************获取所有的方法，包括私有的*******************  \n13.  public void fanshe.method.Student.show1(java.lang.String)  \n14.  private java.lang.String fanshe.method.Student.show4(int)  \n15.  protected void fanshe.method.Student.show2()  \n16.  void fanshe.method.Student.show3()  \n17.  ***************获取公有的show1()方法*******************  \n18.  public void fanshe.method.Student.show1(java.lang.String)  \n19.  调用了：公有的，String参数的show1(): s = 刘德华  \n20.  ***************获取私有的show4()方法******************  \n21.  private java.lang.String fanshe.method.Student.show4(int)  \n22.  调用了，私有的，并且有返回值的，int参数的show4(): age = 20  \n23.  返回值：abcd  \n\n```java\n***************获取所有的”公有“方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n***************获取所有的方法，包括私有的*******************\npublic void fanshe.method.Student.show1(java.lang.String)\nprivate java.lang.String fanshe.method.Student.show4(int)\nprotected void fanshe.method.Student.show2()\nvoid fanshe.method.Student.show3()\n***************获取公有的show1()方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\n调用了：公有的，String参数的show1(): s = 刘德华\n***************获取私有的show4()方法******************\nprivate java.lang.String fanshe.method.Student.show4(int)\n调用了，私有的，并且有返回值的，int参数的show4(): age = 20\n返回值：abcd12345678910111213141516171819202122\n```\n\n其实这里的成员方法：在模型中有属性一词，就是那些setter（）方法和getter()方法。还有字段组成，这些内容在内省中详解\n\n## 5、反射main方法\n\nstudent类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.main;  \n\n3.  public class Student {  \n\n5.  public static void main(String[] args) {  \n6.  System.out.println(”main方法执行了。。。”);  \n7.  }  \n8.  }  \n9.  </span>  \n\n```java\npackage fanshe.main;\n\npublic class Student {\n\n    public static void main(String[] args) {\n        System.out.println(\"main方法执行了。。。\");\n    }\n}\n12345678\n```\n\n测试类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.main;  \n\n3.  import java.lang.reflect.Method;  \n\n5.  /** \n6.  * 获取Student类的main方法、不要与当前的main方法搞混了 \n7.  */  \n8.  public class Main {  \n\n10.  public static void main(String[] args) {  \n11.  try {  \n12.  //1、获取Student对象的字节码  \n13.  Class clazz = Class.forName(”fanshe.main.Student”);  \n\n15.  //2、获取main方法  \n16.  Method methodMain = clazz.getMethod(”main”, String[].class);//第一个参数：方法名称，第二个参数：方法形参的类型，  \n17.  //3、调用main方法  \n18.  // methodMain.invoke(null, new String[]{“a”,”b”,”c”});  \n19.  //第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数  \n20.  //这里拆的时候将  new String[]{“a”,”b”,”c”} 拆成3个对象。。。所以需要将它强转。  \n21.  methodMain.invoke(null, (Object)new String[]{“a”,“b”,“c”});//方式一  \n22.  // methodMain.invoke(null, new Object[]{new String[]{“a”,”b”,”c”}});//方式二  \n\n24.  } catch (Exception e) {  \n25.  e.printStackTrace();  \n26.  }  \n\n29.  }  \n30.  }</span><span style=”font-size:18px;”>  \n31.  </span>  \n\n```java\npackage fanshe.main;\n\nimport java.lang.reflect.Method;\n\n/**\n * 获取Student类的main方法、不要与当前的main方法搞混了\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        try {\n            //1、获取Student对象的字节码\n            Class clazz = Class.forName(\"fanshe.main.Student\");\n\n            //2、获取main方法\n             Method methodMain = clazz.getMethod(\"main\", String[].class);//第一个参数：方法名称，第二个参数：方法形参的类型，\n            //3、调用main方法\n            // methodMain.invoke(null, new String[]{\"a\",\"b\",\"c\"});\n             //第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数\n             //这里拆的时候将  new String[]{\"a\",\"b\",\"c\"} 拆成3个对象。。。所以需要将它强转。\n             methodMain.invoke(null, (Object)new String[]{\"a\",\"b\",\"c\"});//方式一\n            // methodMain.invoke(null, new Object[]{new String[]{\"a\",\"b\",\"c\"}});//方式二\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n123456789101112131415161718192021222324252627282930\n```\n\n控制台输出：\n\nmain方法执行了。。。\n\n## 6、反射方法的其它使用之—通过反射运行配置文件内容\n\nstudent类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  public class Student {  \n2.  public void show(){  \n3.  System.out.println(”is show()”);  \n4.  }  \n5.  }  \n\n```java\npublic class Student {\n    public void show(){\n        System.out.println(\"is show()\");\n    }\n}1234\n```\n\n配置文件以txt文件为例子（pro.txt）：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  className = cn.fanshe.Student  \n2.  methodName = show  \n\n```java\nclassName = cn.fanshe.Student\nmethodName = show1\n```\n\n测试类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  import java.io.FileNotFoundException;  \n2.  import java.io.FileReader;  \n3.  import java.io.IOException;  \n4.  import java.lang.reflect.Method;  \n5.  import java.util.Properties;  \n\n7.  /* \n8.  * 我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改 \n9.  * 我们只需要将新类发送给客户端，并修改配置文件即可 \n10.  */  \n11.  public class Demo {  \n12.  public static void main(String[] args) throws Exception {  \n13.  //通过反射获取Class对象  \n14.  Class stuClass = Class.forName(getValue(”className”));//”cn.fanshe.Student”  \n15.  //2获取show()方法  \n16.  Method m = stuClass.getMethod(getValue(”methodName”));//show  \n17.  //3.调用show()方法  \n18.  m.invoke(stuClass.getConstructor().newInstance());  \n\n20.  }  \n\n22.  //此方法接收一个key，在配置文件中获取相应的value  \n23.  public static String getValue(String key) throws IOException{  \n24.  Properties pro = new Properties();//获取配置文件的对象  \n25.  FileReader in = new FileReader(“pro.txt”);//获取输入流  \n26.  pro.load(in);//将流加载到配置文件对象中  \n27.  in.close();  \n28.  return pro.getProperty(key);//返回根据key获取的value值  \n29.  }  \n30.  }  \n\n```java\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.Properties;\n\n/*\n * 我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改\n * 我们只需要将新类发送给客户端，并修改配置文件即可\n */\npublic class Demo {\n    public static void main(String[] args) throws Exception {\n        //通过反射获取Class对象\n        Class stuClass = Class.forName(getValue(\"className\"));//\"cn.fanshe.Student\"\n        //2获取show()方法\n        Method m = stuClass.getMethod(getValue(\"methodName\"));//show\n        //3.调用show()方法\n        m.invoke(stuClass.getConstructor().newInstance());\n\n    }\n\n    //此方法接收一个key，在配置文件中获取相应的value\n    public static String getValue(String key) throws IOException{\n        Properties pro = new Properties();//获取配置文件的对象\n        FileReader in = new FileReader(\"pro.txt\");//获取输入流\n        pro.load(in);//将流加载到配置文件对象中\n        in.close();\n        return pro.getProperty(key);//返回根据key获取的value值\n    }\n}\n123456789101112131415161718192021222324252627282930\n```\n\n控制台输出：\n\nis show()\n\n**需求：**\n当我们升级这个系统时，不要Student类，而需要新写一个Student2的类时，这时只需要更改pro.txt的文件内容就可以了。代码就一点不用改动\n\n要替换的student2类：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  public class Student2 {  \n2.  public void show2(){  \n3.  System.out.println(”is show2()”);  \n4.  }  \n5.  }  \n\n```java\npublic class Student2 {\n    public void show2(){\n        System.out.println(\"is show2()\");\n    }\n}1234\n```\n\n配置文件更改为：\n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  className = cn.fanshe.Student2  \n2.  methodName = show2  \n\n```java\nclassName = cn.fanshe.Student2\nmethodName = show21\n```\n\n控制台输出：\n\nis show2();\n\n## 7、反射方法的其它使用之—通过反射越过泛型检查\n\n泛型用在编译期，编译过后泛型擦除（消失掉）。所以是可以通过反射越过泛型检查的\n\n测试类： \n\n**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  import java.lang.reflect.Method;  \n2.  import java.util.ArrayList;  \n\n4.  /* \n5.  * 通过反射越过泛型检查 \n6.  *  \n7.  * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？ \n8.  */  \n9.  public class Demo {  \n10.  public static void main(String[] args) throws Exception{  \n11.  ArrayList<String> strList = new ArrayList<>();  \n12.  strList.add(”aaa”);  \n13.  strList.add(”bbb”);  \n\n15.  //  strList.add(100);  \n16.  //获取ArrayList的Class对象，反向的调用add()方法，添加数据  \n17.  Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象  \n18.  //获取add()方法  \n19.  Method m = listClass.getMethod(”add”, Object.class);  \n20.  //调用add()方法  \n21.  m.invoke(strList, 100);  \n\n23.  //遍历集合  \n24.  for(Object obj : strList){  \n25.  System.out.println(obj);  \n26.  }  \n27.  }  \n28.  }  \n\n```java\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\n\n/*\n * 通过反射越过泛型检查\n * \n * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？\n */\npublic class Demo {\n    public static void main(String[] args) throws Exception{\n        ArrayList<String> strList = new ArrayList<>();\n        strList.add(\"aaa\");\n        strList.add(\"bbb\");\n\n    //  strList.add(100);\n        //获取ArrayList的Class对象，反向的调用add()方法，添加数据\n        Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象\n        //获取add()方法\n        Method m = listClass.getMethod(\"add\", Object.class);\n        //调用add()方法\n        m.invoke(strList, 100);\n\n        //遍历集合\n        for(Object obj : strList){\n            System.out.println(obj);\n        }\n    }\n}123456789101112131415161718192021222324252627\n```\n\n控制台输出：\n\naaa\nbbb\n100"]],[8,8],[39038,39038]]],[1564056202525,["GJX@GJXAIOU",[[-1,8,"# java反射（特别通俗易懂）"]],[8,24],[8,8]]],[1564056207184,["GJX@GJXAIOU",[[1,2,"Java"],[-1,30," "],[1,31," "],[-1,73," "],[1,74," "],[-1,461,"     "],[1,466,"     "],[-1,795," "],[1,796," "],[-1,870," "],[1,871," "],[-1,887," "],[1,888," "],[-1,931," "],[1,932," "],[-1,1224," "],[1,1225," "],[-1,1361," "],[1,1362," "],[-1,1448," "],[1,1449," "],[-1,1534," "],[1,1535," "],[-1,1566," "],[1,1567," "],[-1,1574,"  "],[1,1576,"  "],[-1,1584," "],[1,1585," "],[-1,1591," "],[1,1592," "],[-1,1606," "],[1,1607," "],[-1,1613," 1 "],[1,1616," 1 "],[-1,1622," ——> "],[1,1627," ——> "],[-1,1638," "],[1,1639," "],[-1,1645," 2 "],[1,1648," 2 "],[-1,1680," "],[1,1681," "],[-1,1687," 3 "],[1,1690," 3 "],[-1,1718,"  "],[1,1720,"  "],[-1,1734," "],[1,1735," "],[-1,1741," "],[1,1742," "],[-1,1749,"  "],[1,1751,"  "],[-1,1762," "],[1,1763," "],[-1,1768," "],[1,1769," "],[-1,1775," {  "],[1,1779," {  "],[-1,1791," "],[1,1792," "],[-1,1798," "],[1,1799," "],[-1,1803," "],[1,1804," "],[-1,1817," "],[1,1818," "],[-1,1823," {  "],[1,1827," {  "],[-1,1849,"    "],[1,1853,"    "],[-1,1866," "],[1,1867," "],[-1,1871," = new "],[1,1878," = new "],[-1,1895," "],[1,1896," "],[-1,1920,"  "],[1,1922,"  "],[-1,1933," "],[1,1934," "],[-1,1942," = "],[1,1945," = "],[-1,1972,"  "],[1,1974,"  "],[-1,2019,"  "],[1,2021,"  "],[-1,2044,"  "],[1,2046,"  "],[-1,2057," "],[1,2058," "],[-1,2067," = "],[1,2070," = "],[-1,2084,"  "],[1,2086,"  "],[-1,2119," == "],[1,2123," == "],[-1,2168,"  "],[1,2170,"  "],[-1,2193,"  "],[1,2195,"  "],[-1,2204," {  "],[1,2208," {  "],[-1,2219," "],[1,2220," "],[-1,2229," = "],[1,2232," = "],[-1,2295,"  "],[1,2297,"  "],[-1,2331," == "],[1,2335," == "],[-1,2370,"  "],[1,2372,"  "],[-1,2379," "],[1,2380," "],[-1,2385," "],[1,2386," "],[-1,2409," e) {  "],[1,2416," e) {  "],[-1,2442,"  "],[1,2444,"  "],[-1,2451,"  "],[1,2453,"  "],[-1,2461,"  "],[1,2463,"  "],[-1,2477,"  "],[1,2479,"  "],[-1,3590," "],[1,3591," "],[-1,3677," "],[1,3678," "],[-1,3765," "],[1,3766," "],[-1,3773,"  "],[1,3775,"  "],[-1,3787," "],[1,3788," "],[-1,3793," "],[1,3794," "],[-1,3801," {  "],[1,3805," {  "],[-1,3829,"  "],[1,3831,"  "],[-1,3847,"  "],[1,3849,"  "],[-1,3868," "],[1,3869," "],[-1,3874,"  "],[1,3876,"  "],[-1,3910," s = ” + "],[1,3919," s = ” + "],[-1,3924,"  "],[1,3926,"  "],[-1,3932,"  "],[1,3934,"  "],[-1,3949,"  "],[1,3951,"  "],[-1,3963," "],[1,3964," "],[-1,3974,"  "],[1,3976,"  "],[-1,4023,"  "],[1,4025,"  "],[-1,4032,"  "],[1,4034,"  "],[-1,4053,"  "],[1,4055,"  "],[-1,4067," "],[1,4068," "],[-1,4080," "],[1,4081," "],[-1,4087,"  "],[1,4089,"  "],[-1,4119," + "],[1,4122," + "],[-1,4128,"  "],[1,4130,"  "],[-1,4137,"  "],[1,4139,"  "],[-1,4158,"  "],[1,4160,"  "],[-1,4172," "],[1,4173," "],[-1,4187," "],[1,4188," "],[-1,4192," "],[1,4193," "],[-1,4197," "],[1,4198," "],[-1,4203,"  "],[1,4205,"  "],[-1,4247," "],[1,4248," "],[-1,4270,"  "],[1,4272,"  "],[-1,4279,"  "],[1,4281,"  "],[-1,4298,"  "],[1,4300,"  "],[-1,4315," "],[1,4316," "],[-1,4331," n){  "],[1,4337," n){  "],[-1,4371," n = ” + n);  "],[1,4385," n = ” + n);  "],[-1,4392,"  "],[1,4394,"  "],[-1,4409,"  "],[1,4411,"  "],[-1,4424," "],[1,4425," "],[-1,4436," "],[1,4437," "],[-1,4442,"  "],[1,4444,"  "],[-1,4477,"   "],[1,4480,"   "],[-1,4485," "],[1,4486," "],[-1,4491,"  "],[1,4493,"  "],[-1,4500,"  "],[1,4502,"  "],[-1,4510,"  "],[1,4512,"  "],[-1,5334," "],[1,5335," "],[-1,5421," "],[1,5422," "],[-1,5509," "],[1,5510," "],[-1,5517,"  "],[1,5519,"  "],[-1,5531," "],[1,5532," "],[-1,5562,"  "],[1,5564,"  "],[-1,5572," "],[1,5573," "],[-1,5579," "],[1,5580," "],[-1,5620," "],[1,5621," "],[-1,5627,"  "],[1,5629,"  "],[-1,5635," "],[1,5636," "],[-1,5645," "],[1,5646," "],[-1,5653,"      "],[1,5659,"      "],[-1,5668," "],[1,5669," "],[-1,5676,"          "],[1,5686,"          "],[-1,5692," "],[1,5693," "],[-1,5706," "],[1,5707," "],[-1,5736," "],[1,5737," "],[-1,5749," "],[1,5750," "],[-1,5763," "],[1,5764," "],[-1,5815," "],[1,5816," "],[-1,5824,"      "],[1,5830,"      "],[-1,5845," "],[1,5846," "],[-1,5853,"          "],[1,5863,"          "],[-1,5869," "],[1,5870," "],[-1,5881," "],[1,5882," "],[-1,5903," "],[1,5904," "],[-1,5935," "],[1,5936," "],[-1,5943,"          "],[1,5953,"          "],[-1,5959," "],[1,5960," "],[-1,5971," "],[1,5972," "],[-1,6001," "],[1,6002," "],[-1,6046," "],[1,6047," "],[-1,6054,"       "],[1,6061,"       "],[-1,6068,"          "],[1,6078,"          "],[-1,6085," "],[1,6086," "],[-1,6093,"          "],[1,6103,"          "],[-1,6135," "],[1,6136," "],[-1,6145," "],[1,6146," "],[-1,6154,"  "],[1,6156,"  "],[-1,6168," "],[1,6169," "],[-1,6174," "],[1,6175," "],[-1,6187," {  "],[1,6191," {  "],[-1,6204," "],[1,6205," "],[-1,6211," "],[1,6212," "],[-1,6216," "],[1,6217," "],[-1,6230," "],[1,6231," "],[-1,6236," "],[1,6237," "],[-1,6243," "],[1,6244," "],[-1,6253," {  "],[1,6257," {  "],[-1,6276,"  "],[1,6278,"  "],[-1,6289," "],[1,6290," "],[-1,6295," = "],[1,6298," = "],[-1,6330,"  "],[1,6332,"  "],[-1,6353,"  "],[1,6355,"  "],[-1,6447,"  "],[1,6449,"  "],[-1,6468," "],[1,6469," "],[-1,6477," = "],[1,6480," = "],[-1,6504,"  "],[1,6506,"  "],[-1,6527," c : "],[1,6532," c : "],[-1,6542,"  "],[1,6544,"  "],[-1,6572,"  "],[1,6574,"  "],[-1,6581,"  "],[1,6583,"  "],[-1,6664,"  "],[1,6666,"  "],[-1,6680," = "],[1,6683," = "],[-1,6715,"  "],[1,6717,"  "],[-1,6738," c : "],[1,6743," c : "],[-1,6753,"  "],[1,6755,"  "],[-1,6783,"  "],[1,6785,"  "],[-1,6792,"  "],[1,6794,"  "],[-1,6884,"  "],[1,6886,"  "],[-1,6903," con = "],[1,6910," con = "],[-1,6937,"  "],[1,6939,"  "],[-1,6997,"  "],[1,6999,"  "],[-1,7029,"  "],[1,7031,"  "],[-1,7061," = ” + "],[1,7068," = ” + "],[-1,7073,"  "],[1,7075,"  "],[-1,7089,"  "],[1,7091,"  "],[-1,7103," obj = "],[1,7110," obj = "],[-1,7128,"  "],[1,7130,"  "],[-1,7138,"  "],[1,7140,"  "],[-1,7163," = ” + "],[1,7170," = ” + "],[-1,7175,"  "],[1,7177,"  "],[-1,7185,"  "],[1,7187,"  "],[-1,7194," stu = "],[1,7201," stu = "],[-1,7214,"  "],[1,7216,"  "],[-1,7307,"  "],[1,7309,"  "],[-1,7318," = "],[1,7321," = "],[-1,7362,"  "],[1,7364,"  "],[-1,7394,"  "],[1,7396,"  "],[-1,7410,"  "],[1,7412,"  "],[-1,7458,"  "],[1,7460,"  "],[-1,7469," = "],[1,7472," = "],[-1,7493,"  "],[1,7495,"  "],[-1,7502,"  "],[1,7504,"  "],[-1,7512,"  "],[1,7514,"  "],[-1,9623," "],[1,9624," "],[-1,9710," "],[1,9711," "],[-1,9854,"  "],[1,9856,"  "],[-1,9867," "],[1,9868," "],[-1,9904,"  "],[1,9906,"  "],[-1,9917," "],[1,9918," "],[-1,9938,"  "],[1,9940,"  "],[-1,9951," "],[1,9952," "],[-1,9968,"  "],[1,9970,"  "],[-1,10026,"  "],[1,10028,"  "],[-1,10040," "],[1,10041," "],[-1,10060,"  "],[1,10062,"  "],[-1,10076," "],[1,10077," "],[-1,10100,"  "],[1,10102,"  "],[-1,10113," "],[1,10114," "],[-1,10150,"  "],[1,10152,"  "],[-1,10163," "],[1,10164," "],[-1,10184,"  "],[1,10186,"  "],[-1,10198," "],[1,10199," "],[-1,10215,"  "],[1,10217,"  "],[-1,10255,"  "],[1,10257,"  "],[-1,10323,"  "],[1,10325,"  "],[-1,10334," = "],[1,10337," = "],[-1,10343," "],[1,10344," "],[-1,10360,"  "],[1,10362,"  "],[-1,10386,"  "],[1,10388,"  "],[-1,10455,"  "],[1,10457,"  "],[-1,10469," "],[1,10470," "],[-1,10490,"  "],[1,10492,"  "],[-1,10502,"  "],[1,10504,"  "],[-1,11172,"  "],[1,11174,"  "],[-1,11235,"            "],[1,11247,"            "],[-1,11321,"  "],[1,11323,"  "],[-1,11507,"  "],[1,11509,"  "],[-1,11577," "],[1,11578," "],[-1,11713,"           使用此 "],[1,11728,"           使用此 "],[-1,11741," "],[1,11742," "],[-1,11875," "],[1,11876," "],[-1,11962," "],[1,11963," "],[-1,12048," "],[1,12049," "],[-1,12080," "],[1,12081," "],[-1,12094,"  "],[1,12096,"  "],[-1,12108," "],[1,12109," "],[-1,12114," "],[1,12115," "],[-1,12122," {  "],[1,12126," {  "],[-1,12137," "],[1,12138," "],[-1,12148,"  "],[1,12150,"  "],[-1,12157,"  "],[1,12159,"  "],[-1,12193,"  "],[1,12195,"  "],[-1,12206," "],[1,12207," "],[-1,12213," "],[1,12214," "],[-1,12219,"  "],[1,12221,"  "],[-1,12235," int "],[1,12240," int "],[-1,12244,"  "],[1,12246,"  "],[-1,12256," "],[1,12257," "],[-1,12261,"  "],[1,12263,"  "],[-1,12276," "],[1,12277," "],[-1,12283," "],[1,12284," "],[-1,12293,"  "],[1,12295,"  "],[-1,12311,"  "],[1,12313,"  "],[-1,12325," "],[1,12326," "],[-1,12332," "],[1,12333," "],[-1,12343," {  "],[1,12347," {  "],[-1,12359," "],[1,12360," "],[-1,12368," "],[1,12369," "],[-1,12376," + "],[1,12379," + "],[-1,12383," + “, "],[1,12389," + “, "],[-1,12394," + age + “, "],[1,12406," + age + “, "],[-1,12411," + sex  "],[1,12419," + sex  "],[-1,12426," ”, "],[1,12430," ”, "],[-1,12440," + "],[1,12443," + "],[-1,12451," + "],[1,12454," + "],[-1,12458,"  "],[1,12460,"  "],[-1,12467,"  "],[1,12469,"  "],[-1,12484,"  "],[1,12486,"  "],[-1,12923," "],[1,12924," "],[-1,13010," "],[1,13011," "],[-1,13096," "],[1,13097," "],[-1,13128," "],[1,13129," "],[-1,13142,"  "],[1,13144,"  "],[-1,13155," "],[1,13156," "],[-1,13180,"  "],[1,13182,"  "],[-1,13189," "],[1,13190," "],[-1,13196," "],[1,13197," "],[-1,13207," "],[1,13208," "],[-1,13214,"  "],[1,13216,"  "],[-1,13222," "],[1,13223," "],[-1,13228," "],[1,13229," "],[-1,13235,"      "],[1,13241,"      "],[-1,13251," "],[1,13252," "],[-1,13275," "],[1,13276," "],[-1,13282,"      "],[1,13288,"      "],[-1,13298," "],[1,13299," "],[-1,13342," "],[1,13343," "],[-1,13349," "],[1,13350," "],[-1,13358," "],[1,13359," "],[-1,13366,"      "],[1,13372,"      "],[-1,13381," "],[1,13382," "],[-1,13387," "],[1,13388," "],[-1,13403," "],[1,13404," "],[-1,13427," "],[1,13428," "],[-1,13435,"      "],[1,13441,"      "],[-1,13450," "],[1,13451," "],[-1,13456," "],[1,13457," "],[-1,13480," "],[1,13481," "],[-1,13506," "],[1,13507," "],[-1,13514,"  "],[1,13516,"  "],[-1,13523,"   "],[1,13526,"   "],[-1,13533," "],[1,13534," "],[-1,13541,"      "],[1,13547,"      "],[-1,13552," –> "],[1,13556," –> "],[-1,13562," "],[1,13563," "],[-1,13567," "],[1,13568," "],[-1,13578," "],[1,13579," "],[-1,13589," "],[1,13590," "],[-1,13597," "],[1,13598," "],[-1,13605,"                  "],[1,13623,"                  "],[-1,13628," "],[1,13629," "],[-1,13636,"                  "],[1,13654,"                  "],[-1,13672," "],[1,13673," "],[-1,13680,"                  "],[1,13698,"                  "],[-1,13715," "],[1,13716," "],[-1,13723,"  "],[1,13725,"  "],[-1,13733,"  "],[1,13735,"  "],[-1,13747," "],[1,13748," "],[-1,13753," "],[1,13754," "],[-1,13760," {  "],[1,13764," {  "],[-1,13777," "],[1,13778," "],[-1,13784," "],[1,13785," "],[-1,13789," "],[1,13790," "],[-1,13803," "],[1,13804," "],[-1,13809," "],[1,13810," "],[-1,13816," "],[1,13817," "],[-1,13826," {  "],[1,13830," {  "],[-1,13849,"  "],[1,13851,"  "],[-1,13862," "],[1,13863," "],[-1,13871," = "],[1,13874," = "],[-1,13912,"  "],[1,13914,"  "],[-1,13928,"  "],[1,13930,"  "],[-1,14000,"  "],[1,14002,"  "],[-1,14015," "],[1,14016," "],[-1,14026," = "],[1,14029," = "],[-1,14050,"  "],[1,14052,"  "],[-1,14067," f : "],[1,14072," f : "],[-1,14084,"  "],[1,14086,"  "],[-1,14114,"  "],[1,14116,"  "],[-1,14123,"  "],[1,14125,"  "],[-1,14207,"  "],[1,14209,"  "],[-1,14225," = "],[1,14228," = "],[-1,14257,"  "],[1,14259,"  "],[-1,14274," f : "],[1,14279," f : "],[-1,14291,"  "],[1,14293,"  "],[-1,14321,"  "],[1,14323,"  "],[-1,14330,"  "],[1,14332,"  "],[-1,14420,"  "],[1,14422,"  "],[-1,14433," f = "],[1,14438," f = "],[-1,14464,"  "],[1,14466,"  "],[-1,14494,"  "],[1,14496,"  "],[-1,14510,"  "],[1,14512,"  "],[-1,14524," obj = "],[1,14531," obj = "],[-1,14593," stu = new "],[1,14604," stu = new "],[-1,14614,"  "],[1,14616,"  "],[-1,14630,"  "],[1,14632,"  "],[-1,14648," "],[1,14649," "],[-1,14688," = "],[1,14691," = "],[-1,14696,"  "],[1,14698,"  "],[-1,14708,"  "],[1,14710,"  "],[-1,14723," stu = "],[1,14730," stu = "],[-1,14743,"  "],[1,14745,"  "],[-1,14777," + "],[1,14780," + "],[-1,14790,"  "],[1,14792,"  "],[-1,14881,"  "],[1,14883,"  "],[-1,14890," = "],[1,14893," = "],[-1,14931,"  "],[1,14933,"  "],[-1,14961,"  "],[1,14963,"  "],[-1,15004,"  "],[1,15006,"  "],[-1,15022," "],[1,15023," "],[-1,15038,"  "],[1,15040,"  "],[-1,15072," + "],[1,15075," + "],[-1,15080,"  "],[1,15082,"  "],[-1,15090,"  "],[1,15092,"  "],[-1,15111," "],[1,15112," "],[-1,15136,"  "],[1,15138,"  "],[-1,15151,"  "],[1,15153,"  "],[-1,17330," "],[1,17331," "],[-1,17417," "],[1,17418," "],[-1,17539,"  "],[1,17541,"  "],[-1,17552," "],[1,17553," "],[-1,17569," "],[1,17570," "],[-1,17595,"  "],[1,17597,"  "],[-1,17655,"  "],[1,17657,"  "],[-1,17668," "],[1,17669," "],[-1,17685," "],[1,17686," "],[-1,17711,"  "],[1,17713,"  "],[-1,17727," int "],[1,17732," int "],[-1,17756,"  "],[1,17758,"  "],[-1,17767," "],[1,17768," "],[-1,17792,"  "],[1,17794,"  "],[-1,17806," "],[1,17807," "],[-1,17823," "],[1,17824," "],[-1,17853,"  "],[1,17855,"  "],[-1,17919,"  "],[1,17921,"  "],[-1,17932," "],[1,17933," "],[-1,17949," "],[1,17950," "],[-1,17975,"  "],[1,17977,"  "],[-1,17991,"  "],[1,17993,"  "],[-1,18058,"  "],[1,18060,"  "],[-1,18073," "],[1,18074," "],[-1,18090," "],[1,18091," "],[-1,18120,"  "],[1,18122,"  "],[-1,18140," "],[1,18141," "],[-1,18151," "],[1,18152," "],[-1,18158," "],[1,18159," "],[-1,18163,"  "],[1,18165,"  "],[-1,19040," "],[1,19041," "],[-1,19127," "],[1,19128," "],[-1,19213," "],[1,19214," "],[-1,19245," "],[1,19246," "],[-1,19260,"  "],[1,19262,"  "],[-1,19274," "],[1,19275," "],[-1,19280," "],[1,19281," "],[-1,19288," {  "],[1,19292," {  "],[-1,19334,"  "],[1,19336,"  "],[-1,19347," "],[1,19348," "],[-1,19352," "],[1,19353," "],[-1,19365," s){  "],[1,19371," s){  "],[-1,19421," s = ” + s);  "],[1,19435," s = ” + s);  "],[-1,19441,"  "],[1,19443,"  "],[-1,19457," "],[1,19458," "],[-1,19462," "],[1,19463," "],[-1,19471,"  "],[1,19473,"  "],[-1,19520,"  "],[1,19522,"  "],[-1,19529,"  "],[1,19531,"  "],[-1,19541," "],[1,19542," "],[-1,19550,"  "],[1,19552,"  "],[-1,19599,"  "],[1,19601,"  "],[-1,19608,"  "],[1,19610,"  "],[-1,19623," "],[1,19624," "],[-1,19630," "],[1,19631," "],[-1,19640," "],[1,19641," "],[-1,19646,"  "],[1,19648,"  "],[-1,19704," age = ” + "],[1,19715," age = ” + "],[-1,19720,"  "],[1,19722,"  "],[-1,19734," "],[1,19735," "],[-1,19742,"  "],[1,19744,"  "],[-1,19751,"  "],[1,19753,"  "],[-1,19760,"  "],[1,19762,"  "],[-1,19775,"  "],[1,19777,"  "],[-1,20330," "],[1,20331," "],[-1,20417," "],[1,20418," "],[-1,20503," "],[1,20504," "],[-1,20535," "],[1,20536," "],[-1,20550,"  "],[1,20552,"  "],[-1,20564," "],[1,20565," "],[-1,20590,"  "],[1,20592,"  "],[-1,20600," "],[1,20601," "],[-1,20607," "],[1,20608," "],[-1,20618," "],[1,20619," "],[-1,20625,"  "],[1,20627,"  "],[-1,20633," "],[1,20634," "],[-1,20640," "],[1,20641," "],[-1,20647,"      "],[1,20653,"      "],[-1,20659," "],[1,20660," "],[-1,20668," "],[1,20669," "],[-1,20713," "],[1,20714," "],[-1,20721,"      "],[1,20727,"      "],[-1,20733," "],[1,20734," "],[-1,20742," "],[1,20743," "],[-1,20787," "],[1,20788," "],[-1,20795," "],[1,20796," "],[-1,20804," "],[1,20805," "],[-1,20812,"      "],[1,20818,"      "],[-1,20824," "],[1,20825," "],[-1,20831," "],[1,20832," "],[-1,20848," "],[1,20849," "],[-1,20863," "],[1,20864," "],[-1,20880," "],[1,20881," "],[-1,20888,"                  参数： "],[1,20910,"                  参数： "],[-1,20917,"                      "],[1,20939,"                      "],[-1,20943," : "],[1,20946," : "],[-1,20950," "],[1,20951," "],[-1,20958,"                      "],[1,20980,"                      "],[-1,20985," … : "],[1,20990," … : "],[-1,21002," "],[1,21003," "],[-1,21010,"      "],[1,21016,"      "],[-1,21022," "],[1,21023," "],[-1,21029," "],[1,21030," "],[-1,21054," "],[1,21055," "],[-1,21069," "],[1,21070," "],[-1,21085," "],[1,21086," "],[-1,21093,"  "],[1,21095,"  "],[-1,21102,"   "],[1,21105,"   "],[-1,21110," "],[1,21111," "],[-1,21118,"      "],[1,21124,"      "],[-1,21130," –> "],[1,21134," –> "],[-1,21140," "],[1,21141," "],[-1,21147," "],[1,21148," "],[-1,21161," "],[1,21162," "],[-1,21173," "],[1,21174," "],[-1,21180," "],[1,21181," "],[-1,21188,"                  "],[1,21206,"                  "],[-1,21211," "],[1,21212," "],[-1,21219,"                  obj : "],[1,21243,"                  obj : "],[-1,21252," "],[1,21253," "],[-1,21260,"                  "],[1,21278,"                  "],[-1,21295," "],[1,21296," "],[-1,21305," "],[1,21306," "],[-1,21314,"  "],[1,21316,"  "],[-1,21328," "],[1,21329," "],[-1,21334," "],[1,21335," "],[-1,21346," {  "],[1,21350," {  "],[-1,21363," "],[1,21364," "],[-1,21370," "],[1,21371," "],[-1,21375," "],[1,21376," "],[-1,21389," "],[1,21390," "],[-1,21395," "],[1,21396," "],[-1,21402," "],[1,21403," "],[-1,21412," {  "],[1,21416," {  "],[-1,21435,"  "],[1,21437,"  "],[-1,21448," "],[1,21449," "],[-1,21457," = "],[1,21460," = "],[-1,21499,"  "],[1,21501,"  "],[-1,21519,"  "],[1,21521,"  "],[-1,21595,"  "],[1,21597,"  "],[-1,21625,"  "],[1,21627,"  "],[-1,21641," "],[1,21642," "],[-1,21653," = "],[1,21656," = "],[-1,21678,"  "],[1,21680,"  "],[-1,21696," m : "],[1,21701," m : "],[-1,21714,"  "],[1,21716,"  "],[-1,21744,"  "],[1,21746,"  "],[-1,21753,"  "],[1,21755,"  "],[-1,21831,"  "],[1,21833,"  "],[-1,21850," = "],[1,21853," = "],[-1,21883,"  "],[1,21885,"  "],[-1,21901," m : "],[1,21906," m : "],[-1,21919,"  "],[1,21921,"  "],[-1,21949,"  "],[1,21951,"  "],[-1,21958,"  "],[1,21960,"  "],[-1,22037,"  "],[1,22039,"  "],[-1,22051," m = "],[1,22056," m = "],[-1,22083," "],[1,22084," "],[-1,22098,"  "],[1,22100,"  "],[-1,22128,"  "],[1,22130,"  "],[-1,22152,"  "],[1,22154,"  "],[-1,22166," obj = "],[1,22173," obj = "],[-1,22213,"  "],[1,22215,"  "],[-1,22234," "],[1,22235," "],[-1,22242,"  "],[1,22244,"  "],[-1,22321,"  "],[1,22323,"  "],[-1,22330," = "],[1,22333," = "],[-1,22368," "],[1,22369," "],[-1,22380,"  "],[1,22382,"  "],[-1,22410,"  "],[1,22412,"  "],[-1,22448,"  "],[1,22450,"  "],[-1,22462," "],[1,22463," "],[-1,22469," = "],[1,22472," = "],[-1,22485," "],[1,22486," "],[-1,22521,"  "],[1,22523,"  "],[-1,22554," + "],[1,22557," + "],[-1,22565,"  "],[1,22567,"  "],[-1,22575,"  "],[1,22577,"  "],[-1,22584,"  "],[1,22586,"  "],[-1,22599,"  "],[1,22601,"  "],[-1,24720," "],[1,24721," "],[-1,24807," "],[1,24808," "],[-1,24933,"  "],[1,24935,"  "],[-1,24946," "],[1,24947," "],[-1,24951," "],[1,24952," "],[-1,24997,"  "],[1,24999,"  "],[-1,25010," "],[1,25011," "],[-1,25016," "],[1,25017," "],[-1,25021," "],[1,25022," "],[-1,25053," "],[1,25054," "],[-1,25060," "],[1,25061," "],[-1,25091,"  "],[1,25093,"  "],[-1,25104," "],[1,25105," "],[-1,25110," "],[1,25111," "],[-1,25117," "],[1,25118," "],[-1,25122," "],[1,25123," "],[-1,25150," "],[1,25151," "],[-1,25157," "],[1,25158," "],[-1,25188,"  "],[1,25190,"  "],[-1,25201," "],[1,25202," "],[-1,25207," "],[1,25208," "],[-1,25212," "],[1,25213," "],[-1,25236," "],[1,25237," "],[-1,25243," "],[1,25244," "],[-1,25274,"  "],[1,25276,"  "],[-1,25287," "],[1,25288," "],[-1,25295," "],[1,25296," "],[-1,25337,"  "],[1,25339,"  "],[-1,25350," "],[1,25351," "],[-1,25367," "],[1,25368," "],[-1,25395,"  "],[1,25397,"  "],[-1,25408," "],[1,25409," "],[-1,25415," int "],[1,25420," int "],[-1,25447,"  "],[1,25449,"  "],[-1,25460," "],[1,25461," "],[-1,25466," "],[1,25467," "],[-1,25473," "],[1,25474," "],[-1,25489," "],[1,25490," "],[-1,25517,"  "],[1,25519,"  "],[-1,25531," "],[1,25532," "],[-1,25537," "],[1,25538," "],[-1,25544," "],[1,25545," "],[-1,25549," "],[1,25550," "],[-1,25575,"  "],[1,25577,"  "],[-1,25589," "],[1,25590," "],[-1,25595," "],[1,25596," "],[-1,25602," "],[1,25603," "],[-1,25607," "],[1,25608," "],[-1,25636,"  "],[1,25638,"  "],[-1,25691,"  "],[1,25693,"  "],[-1,25705," "],[1,25706," "],[-1,25710," "],[1,25711," "],[-1,25756,"  "],[1,25758,"  "],[-1,25771," "],[1,25772," "],[-1,25788," "],[1,25789," "],[-1,25821,"  "],[1,25823,"  "],[-1,25838," "],[1,25839," "],[-1,25843," "],[1,25844," "],[-1,25873,"  "],[1,25875,"  "],[-1,25885," "],[1,25886," "],[-1,25915,"  "],[1,25917,"  "],[-1,25971,"  "],[1,25973,"  "],[-1,25985," "],[1,25986," "],[-1,25990," "],[1,25991," "],[-1,26036,"  "],[1,26038,"  "],[-1,26069," s = 刘德华  "],[1,26079," s = 刘德华  "],[-1,26132,"  "],[1,26134,"  "],[-1,26147," "],[1,26148," "],[-1,26164," "],[1,26165," "],[-1,26197,"  "],[1,26199,"  "],[-1,26235," age = 20  "],[1,26246," age = 20  "],[-1,26260,"  "],[1,26262,"  "],[-1,27833," "],[1,27834," "],[-1,27920," "],[1,27921," "],[-1,28046,"  "],[1,28048,"  "],[-1,28059," "],[1,28060," "],[-1,28064," "],[1,28065," "],[-1,28110,"  "],[1,28112,"  "],[-1,28123," "],[1,28124," "],[-1,28129," "],[1,28130," "],[-1,28134," "],[1,28135," "],[-1,28166," "],[1,28167," "],[-1,28173," "],[1,28174," "],[-1,28204,"  "],[1,28206,"  "],[-1,28217," "],[1,28218," "],[-1,28223," "],[1,28224," "],[-1,28230," "],[1,28231," "],[-1,28235," "],[1,28236," "],[-1,28263," "],[1,28264," "],[-1,28270," "],[1,28271," "],[-1,28301,"  "],[1,28303,"  "],[-1,28314," "],[1,28315," "],[-1,28320," "],[1,28321," "],[-1,28325," "],[1,28326," "],[-1,28349," "],[1,28350," "],[-1,28356," "],[1,28357," "],[-1,28387,"  "],[1,28389,"  "],[-1,28400," "],[1,28401," "],[-1,28408," "],[1,28409," "],[-1,28450,"  "],[1,28452,"  "],[-1,28463," "],[1,28464," "],[-1,28480," "],[1,28481," "],[-1,28508,"  "],[1,28510,"  "],[-1,28521," "],[1,28522," "],[-1,28528," int "],[1,28533," int "],[-1,28560,"  "],[1,28562,"  "],[-1,28573," "],[1,28574," "],[-1,28579," "],[1,28580," "],[-1,28586," "],[1,28587," "],[-1,28602," "],[1,28603," "],[-1,28630,"  "],[1,28632,"  "],[-1,28644," "],[1,28645," "],[-1,28650," "],[1,28651," "],[-1,28657," "],[1,28658," "],[-1,28662," "],[1,28663," "],[-1,28688,"  "],[1,28690,"  "],[-1,28702," "],[1,28703," "],[-1,28708," "],[1,28709," "],[-1,28715," "],[1,28716," "],[-1,28720," "],[1,28721," "],[-1,28749,"  "],[1,28751,"  "],[-1,28804,"  "],[1,28806,"  "],[-1,28818," "],[1,28819," "],[-1,28823," "],[1,28824," "],[-1,28869,"  "],[1,28871,"  "],[-1,28884," "],[1,28885," "],[-1,28901," "],[1,28902," "],[-1,28934,"  "],[1,28936,"  "],[-1,28951," "],[1,28952," "],[-1,28956," "],[1,28957," "],[-1,28986,"  "],[1,28988,"  "],[-1,28998," "],[1,28999," "],[-1,29028,"  "],[1,29030,"  "],[-1,29084,"  "],[1,29086,"  "],[-1,29098," "],[1,29099," "],[-1,29103," "],[1,29104," "],[-1,29149,"  "],[1,29151,"  "],[-1,29182," s = 刘德华  "],[1,29192," s = 刘德华  "],[-1,29245,"  "],[1,29247,"  "],[-1,29260," "],[1,29261," "],[-1,29277," "],[1,29278," "],[-1,29310,"  "],[1,29312,"  "],[-1,29348," age = 20  "],[1,29359," age = 20  "],[-1,29373,"  "],[1,29375,"  "],[-1,30753," "],[1,30754," "],[-1,30840," "],[1,30841," "],[-1,30926," "],[1,30927," "],[-1,30958," "],[1,30959," "],[-1,30971,"  "],[1,30973,"  "],[-1,30985," "],[1,30986," "],[-1,30991," "],[1,30992," "],[-1,30999," {  "],[1,31003," {  "],[-1,31015," "],[1,31016," "],[-1,31022," "],[1,31023," "],[-1,31027," "],[1,31028," "],[-1,31041," "],[1,31042," "],[-1,31047," {  "],[1,31051," {  "],[-1,31091,"  "],[1,31093,"  "],[-1,31099,"  "],[1,31101,"  "],[-1,31107,"  "],[1,31109,"  "],[-1,31121,"  "],[1,31123,"  "],[-1,31306," "],[1,31307," "],[-1,31393," "],[1,31394," "],[-1,31479," "],[1,31480," "],[-1,31511," "],[1,31512," "],[-1,31524,"  "],[1,31526,"  "],[-1,31538," "],[1,31539," "],[-1,31564,"  "],[1,31566,"  "],[-1,31575," "],[1,31576," "],[-1,31582," "],[1,31583," "],[-1,31616," "],[1,31617," "],[-1,31624,"  "],[1,31626,"  "],[-1,31637," "],[1,31638," "],[-1,31643," "],[1,31644," "],[-1,31648," {  "],[1,31652," {  "],[-1,31665," "],[1,31666," "],[-1,31672," "],[1,31673," "],[-1,31677," "],[1,31678," "],[-1,31691," "],[1,31692," "],[-1,31697," {  "],[1,31701," {  "],[-1,31710," {  "],[1,31714," {  "],[-1,31739,"  "],[1,31741,"  "],[-1,31752," "],[1,31753," "],[-1,31758," = "],[1,31761," = "],[-1,31798,"  "],[1,31800,"  "],[-1,31819,"  "],[1,31821,"  "],[-1,31833," "],[1,31834," "],[-1,31844," = "],[1,31847," = "],[-1,31870," "],[1,31871," "],[-1,31914,"  "],[1,31916,"  "],[-1,31934,"  "],[1,31936,"  "],[-1,31944," "],[1,31945," "],[-1,31968," new "],[1,31973," new "],[-1,31996,"  "],[1,31998,"  "],[-1,32087,"  "],[1,32089,"  "],[-1,32104,"  new "],[1,32110,"  new "],[-1,32131," "],[1,32132," "],[-1,32150,"  "],[1,32152,"  "],[-1,32181," "],[1,32182," "],[-1,32193," "],[1,32194," "],[-1,32222,"  "],[1,32224,"  "],[-1,32232," "],[1,32233," "],[-1,32256," new "],[1,32261," new "],[-1,32273," "],[1,32274," "],[-1,32303,"  "],[1,32305,"  "],[-1,32313," "],[1,32314," "],[-1,32319," "],[1,32320," "],[-1,32330," e) {  "],[1,32337," e) {  "],[-1,32363,"  "],[1,32365,"  "],[-1,32372,"  "],[1,32374,"  "],[-1,32382,"  "],[1,32384,"  "],[-1,32403," "],[1,32404," "],[-1,32428,"  "],[1,32430,"  "],[-1,32443,"  "],[1,32445,"  "],[-1,33496," "],[1,33497," "],[-1,33583," "],[1,33584," "],[-1,33670," "],[1,33671," "],[-1,33676," "],[1,33677," "],[-1,33684," {  "],[1,33688," {  "],[-1,33699," "],[1,33700," "],[-1,33704," "],[1,33705," "],[-1,33712,"  "],[1,33714,"  "],[-1,33741," "],[1,33742," "],[-1,33751,"  "],[1,33753,"  "],[-1,33759,"  "],[1,33761,"  "],[-1,33767,"  "],[1,33769,"  "],[-1,33919," "],[1,33920," "],[-1,34006," "],[1,34007," "],[-1,34096," = "],[1,34099," = "],[-1,34116,"  "],[1,34118,"  "],[-1,34133," = "],[1,34136," = "],[-1,34140,"  "],[1,34142,"  "],[-1,34222," "],[1,34223," "],[-1,34309," "],[1,34310," "],[-1,34396," "],[1,34397," "],[-1,34427,"  "],[1,34429,"  "],[-1,34440," "],[1,34441," "],[-1,34460,"  "],[1,34462,"  "],[-1,34473," "],[1,34474," "],[-1,34494,"  "],[1,34496,"  "],[-1,34507," "],[1,34508," "],[-1,34533,"  "],[1,34535,"  "],[-1,34546," "],[1,34547," "],[-1,34568,"  "],[1,34570,"  "],[-1,34578," "],[1,34579," "],[-1,34585," "],[1,34586," "],[-1,34621," "],[1,34622," "],[-1,34628," "],[1,34629," "],[-1,34653," "],[1,34654," "],[-1,34662,"  "],[1,34664,"  "],[-1,34676," "],[1,34677," "],[-1,34682," "],[1,34683," "],[-1,34687," {  "],[1,34691," {  "],[-1,34703," "],[1,34704," "],[-1,34710," "],[1,34711," "],[-1,34715," "],[1,34716," "],[-1,34729," "],[1,34730," "],[-1,34735," "],[1,34736," "],[-1,34742," "],[1,34743," "],[-1,34752," {  "],[1,34756," {  "],[-1,34777,"  "],[1,34779,"  "],[-1,34790," "],[1,34791," "],[-1,34799," = "],[1,34802," = "],[-1,34860,"  "],[1,34862,"  "],[-1,34881,"  "],[1,34883,"  "],[-1,34895," m = "],[1,34900," m = "],[-1,34949,"  "],[1,34951,"  "],[-1,34971,"  "],[1,34973,"  "],[-1,35029,"  "],[1,35031,"  "],[-1,35039,"  "],[1,35041,"  "],[-1,35077,"  "],[1,35079,"  "],[-1,35091," "],[1,35092," "],[-1,35098," "],[1,35099," "],[-1,35105," "],[1,35106," "],[-1,35121," "],[1,35122," "],[-1,35126," "],[1,35127," "],[-1,35133," "],[1,35134," "],[-1,35146,"  "],[1,35148,"  "],[-1,35164," pro = new "],[1,35175," pro = new "],[-1,35199,"  "],[1,35201,"  "],[-1,35217," in = new "],[1,35227," in = new "],[-1,35256,"  "],[1,35258,"  "],[-1,35291,"  "],[1,35293,"  "],[-1,35310,"  "],[1,35312,"  "],[-1,35324," "],[1,35325," "],[-1,35364,"  "],[1,35366,"  "],[-1,35373,"  "],[1,35375,"  "],[-1,35382,"  "],[1,35384,"  "],[-1,36512," "],[1,36513," "],[-1,36599," "],[1,36600," "],[-1,36686," "],[1,36687," "],[-1,36692," "],[1,36693," "],[-1,36701," {  "],[1,36705," {  "],[-1,36716," "],[1,36717," "],[-1,36721," "],[1,36722," "],[-1,36730,"  "],[1,36732,"  "],[-1,36759," "],[1,36760," "],[-1,36770,"  "],[1,36772,"  "],[-1,36778,"  "],[1,36780,"  "],[-1,36786,"  "],[1,36788,"  "],[-1,36926," "],[1,36927," "],[-1,37013," "],[1,37014," "],[-1,37103," = "],[1,37106," = "],[-1,37124,"  "],[1,37126,"  "],[-1,37141," = "],[1,37144," = "],[-1,37149,"  "],[1,37151,"  "],[-1,37323," "],[1,37324," "],[-1,37410," "],[1,37411," "],[-1,37497," "],[1,37498," "],[-1,37523,"  "],[1,37525,"  "],[-1,37536," "],[1,37537," "],[-1,37557,"  "],[1,37559,"  "],[-1,37567," "],[1,37568," "],[-1,37574," "],[1,37575," "],[-1,37585," "],[1,37586," "],[-1,37592,"  "],[1,37594,"  "],[-1,37600," "],[1,37601," "],[-1,37644," "],[1,37645," "],[-1,37652,"  "],[1,37654,"  "],[-1,37665," "],[1,37666," "],[-1,37671," "],[1,37672," "],[-1,37676," {  "],[1,37680," {  "],[-1,37692," "],[1,37693," "],[-1,37699," "],[1,37700," "],[-1,37704," "],[1,37705," "],[-1,37718," "],[1,37719," "],[-1,37724," "],[1,37725," "],[-1,37731," "],[1,37732," "],[-1,37742,"  "],[1,37744,"  "],[-1,37767," "],[1,37768," "],[-1,37775," = new "],[1,37782," = new "],[-1,37796,"  "],[1,37798,"  "],[-1,37823,"  "],[1,37825,"  "],[-1,37850,"  "],[1,37852,"  "],[-1,37861,"  "],[1,37863,"  "],[-1,37880,"  "],[1,37882,"  "],[-1,37927,"  "],[1,37929,"  "],[-1,37940," "],[1,37941," "],[-1,37950," = "],[1,37953," = "],[-1,37972," "],[1,37973," "],[-1,37977," "],[1,37978," "],[-1,37985," "],[1,37986," "],[-1,37992," 对象  "],[1,37997," 对象  "],[-1,38014,"  "],[1,38016,"  "],[-1,38028," m = "],[1,38033," m = "],[-1,38059," "],[1,38060," "],[-1,38074,"  "],[1,38076,"  "],[-1,38093,"  "],[1,38095,"  "],[-1,38118," "],[1,38119," "],[-1,38124,"  "],[1,38126,"  "],[-1,38139,"  "],[1,38141,"  "],[-1,38157," obj : "],[1,38164," obj : "],[-1,38173,"  "],[1,38175,"  "],[-1,38205,"  "],[1,38207,"  "],[-1,38214,"  "],[1,38216,"  "],[-1,38223,"  "],[1,38225,"  "],[-1,38232,"  "],[1,38234,"  "]],[2,2],[6,6]]],[1564056253334,["GJX@GJXAIOU",[[-1,14,"2018年05月02日 11:08:15 [java知识社](https://me.csdn.net/lwl20140904) 阅读数 52712\n"]],[13,87],[13,13]]],[1564056253725,["GJX@GJXAIOU",[[-1,14,"\n"]],[13,13],[12,12]]],[1564056254133,["GJX@GJXAIOU",[[-1,13,"\n"]],[12,12],[11,11]]],[1564056255445,["GJX@GJXAIOU",[[1,13,"\n"]],[11,11],[12,12]]],[1564056256612,["GJX@GJXAIOU",[[-1,13,"\n"]],[12,12],[11,11]]],[1564056259746,["GJX@GJXAIOU",[[1,11,"[]()"]],[11,11],[15,15]]],[1564056259957,["GJX@GJXAIOU",[[1,14,"https://"]],[15,15],[14,22]]],[1564056261800,["GJX@GJXAIOU",[[1,14,"["],[1,22,"blog.csdn.net/lwl20140904/article/details/80163880](https://blog.csdn.net/lwl20140904/article/details/80163880)"]],[14,22],[134,134]]],[1564056270305,["GJX@GJXAIOU",[[1,12,"原文地址链接"]],[12,12],[18,18]]],[1564056286449,["GJX@GJXAIOU",[[1,11,"！"]],[11,11],[12,12]]],[1564056288069,["GJX@GJXAIOU",[[-1,11,"！"]],[12,12],[11,11]]],[1564056289002,["GJX@GJXAIOU",[[1,11,"!"]],[11,11],[12,12]]],[1564056293901,["GJX@GJXAIOU",[[-1,11,"!"]],[12,12],[11,11]]],[1564056301589,["GJX@GJXAIOU",[[-1,140,")"]],[141,141],[140,140]]],[1564056313894,["GJX@GJXAIOU",[[-1,20,"[https://blog.csdn.net/lwl20140904/article/details/80163880]("]],[20,80],[19,19]]],[1564056329542,["GJX@GJXAIOU",[[-1,111,"代表"]],[113,113],[111,111]]],[1564056330004,["GJX@GJXAIOU",[[1,111,"da"]],[111,111],[113,113]]],[1564056330116,["GJX@GJXAIOU",[[-1,111,"da"],[1,113," d "]],[113,113],[113,113]]],[1564056330823,["GJX@GJXAIOU",[[1,113,"ima"]],[113,113],[116,116]]],[1564056331628,["GJX@GJXAIOU",[[-1,111," "],[-1,111,"daim"]],[116,116],[111,111]]],[1564056333857,["GJX@GJXAIOU",[[1,111,"d"]],[111,111],[112,112]]],[1564056333954,["GJX@GJXAIOU",[[1,111," "]],[112,112],[113,113]]],[1564056335325,["GJX@GJXAIOU",[[-1,112,"d "]],[113,113],[111,111]]],[1564056336777,["GJX@GJXAIOU",[[1,111,"代码"]],[111,111],[113,113]]],[1564056339365,["GJX@GJXAIOU",[[-1,113," "]],[114,114],[113,113]]],[1564056352182,["GJX@GJXAIOU",[[-1,81,"# "]],[81,83],[81,81]]],[1564056356741,["GJX@GJXAIOU",[[1,81,"=="],[1,91,"=="]],[81,91],[81,95]]],[1564056363660,["GJX@GJXAIOU",[[1,80,"@toc"]],[80,80],[84,84]]],[1564056366358,["GJX@GJXAIOU",[[1,85,"\n"]],[84,84],[85,85]]],[1564056441415,[null,[[-1,120," "]],[120,120],[120,120]]],[1564056441415,[null,[[1,120," "]],[120,120],[120,120]]],[1564056396413,["GJX@GJXAIOU",[[1,180,"**"],[1,184,"**"]],[180,184],[180,188]]],[1564056424332,["GJX@GJXAIOU",[[-1,357,"**以上的总结就是什么是反射**"]],[357,373],[357,357]]],[1564056425676,["GJX@GJXAIOU",[[-1,358,"\n"]],[358,358],[357,357]]],[1564056426190,["GJX@GJXAIOU",[[-1,357,"\n"]],[357,357],[356,356]]],[1564056429101,["GJX@GJXAIOU",[[1,357,"**"],[1,386,"**"]],[357,386],[357,390]]],[1564056501416,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"]],[120,120],[390,390]]],[1564056501416,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"]],[390,390],[120,120]]],[1564056451213,["GJX@GJXAIOU",[[-1,454,"     "]],[459,459],[454,454]]],[1564056451815,["GJX@GJXAIOU",[[-1,453,"\n"]],[454,454],[453,453]]],[1564056487902,["GJX@GJXAIOU",[[-1,569,"![](https://img-blog.csdn.net/20170513133210763) "]],[569,618],[569,569]]],[1564056495017,["GJX@GJXAIOU",[[1,569,"![20170513133210763 ]($resource/20170513133210763%20.jpg)"]],[569,569],[627,627]]],[1564056561440,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,626," "]],[120,120],[626,626]]],[1564056561440,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,626," "]],[626,626],[120,120]]],[1564056551038,["GJX@GJXAIOU",[[1,661,"#"]],[661,661],[694,694]]],[1564056622365,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,626," "]],[120,120],[626,626]]],[1564056622365,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,626," "]],[626,626],[120,120]]],[1564056563309,["GJX@GJXAIOU",[[-1,661,"#"]],[662,662],[661,661]]],[1564056573463,["GJX@GJXAIOU",[[1,661,"[link](https://img-blog.csdn.net/20170513133210763)"]],[661,661],[712,712]]],[1564056743367,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,568,"\n"],[-1,626," "],[1,661,"#"],[-1,712,"#"]],[120,120],[712,712]]],[1564056743367,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,567,"\n"],[1,626," "],[-1,660,"#"],[1,712,"#"]],[712,712],[120,120]]],[1564056706890,["GJX@GJXAIOU",[[-1,571,"20170513133210763"],[1,588,"j"]],[571,588],[572,572]]],[1564056708069,["GJX@GJXAIOU",[[1,572,"aizai"]],[572,572],[577,577]]],[1564056708684,["GJX@GJXAIOU",[[1,578," "]],[577,577],[578,578]]],[1564056709112,["GJX@GJXAIOU",[[1,578,"de"]],[578,578],[580,580]]],[1564056709315,["GJX@GJXAIOU",[[1,581," "]],[580,580],[581,581]]],[1564056711097,["GJX@GJXAIOU",[[1,581,"guocheng"]],[581,581],[589,589]]],[1564056717456,["GJX@GJXAIOU",[[-1,571,"jaizai de guocheng"]],[589,589],[571,571]]],[1564056722572,["GJX@GJXAIOU",[[1,571,"加载的过程"]],[571,571],[576,576]]],[1564056803369,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,568,"\n"],[-1,614," "],[1,649,"#"],[-1,700,"#"]],[120,120],[700,700]]],[1564056803369,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,567,"\n"],[1,614," "],[-1,648,"#"],[1,700,"#"]],[700,700],[120,120]]],[1564056746096,["GJX@GJXAIOU",[[-1,649,"[link](https://img-blog.csdn.net/20170513133210763) "]],[649,701],[649,649]]],[1564056751822,["GJX@GJXAIOU",[[1,649," #"]],[649,649],[682,682]]],[1564056754551,["GJX@GJXAIOU",[[-1,650,"#"]],[651,651],[650,650]]],[1564056758925,["GJX@GJXAIOU",[[-1,676,"的"]],[677,677],[676,676]]],[1564056762556,["GJX@GJXAIOU",[[1,676,"的"]],[676,676],[677,677]]],[1564056762649,["GJX@GJXAIOU",[[1,676," "],[1,677," "]],[677,677],[678,678]]],[1564056771284,["GJX@GJXAIOU",[[1,670,"（）"]],[670,670],[672,672]]],[1564056773358,["GJX@GJXAIOU",[[-1,670,"（）"]],[672,672],[670,670]]],[1564056774934,["GJX@GJXAIOU",[[1,670,"()"]],[670,670],[672,672]]],[1564056776973,["GJX@GJXAIOU",[[1,671,"1.7"]],[671,671],[674,674]]],[1564056780693,["GJX@GJXAIOU",[[-1,677,"（1.7 的 API）"]],[678,688],[677,677]]],[1564056847151,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"]],[120,120],[680,680]]],[1564056847151,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"]],[680,680],[120,120]]],[1564056844645,["GJX@GJXAIOU",[[-1,716,"![](https://img-blog.csdn.net/20170513135521667) \n"]],[715,765],[715,715]]],[1564056907175,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"]],[120,120],[680,680]]],[1564056907175,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"]],[680,680],[120,120]]],[1564056856219,["GJX@GJXAIOU",[[1,716,"![20170513135521667]($resource/20170513135521667.jpg)"]],[716,716],[770,770]]],[1564056906476,["GJX@GJXAIOU",[[-1,851,"`"]],[852,852],[851,851]]],[1564056967182,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,770,"\n"],[-1,851,"`"],[1,852,"s"]],[120,120],[853,853]]],[1564056967182,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,770,"\n"],[1,850,"`"],[-1,850,"s"]],[853,853],[120,120]]],[1564056907461,["GJX@GJXAIOU",[[-1,776,"`"]],[777,777],[776,776]]],[1564056908773,["GJX@GJXAIOU",[[-1,860,"`"]],[861,861],[860,860]]],[1564056910150,["GJX@GJXAIOU",[[-1,865,"`"]],[866,866],[865,865]]],[1564056911341,["GJX@GJXAIOU",[[-1,844,"`"]],[845,845],[844,844]]],[1564056912911,["GJX@GJXAIOU",[[-1,770,"`"]],[771,771],[770,770]]],[1564056914341,["GJX@GJXAIOU",[[-1,907," "]],[907,908],[907,907]]],[1564056916133,["GJX@GJXAIOU",[[-1,894,"`"]],[895,895],[894,894]]],[1564056918069,["GJX@GJXAIOU",[[-1,905,"`"]],[906,906],[905,905]]],[1564057027374,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,770,"`"],[-1,775,"`"],[1,776,"s"],[-1,843,"`"],[1,844,"\n"],[-1,848,"`"],[1,849,"s"],[-1,858,"`"],[1,859,"。"],[-1,863,"`"],[1,864,"s"],[-1,894,"`"],[1,895,"的"],[-1,905," "],[1,906,"s"]],[120,120],[907,907]]],[1564057027374,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,770,"`"],[1,774,"`"],[-1,774,"s"],[1,842,"`"],[-1,842,"\n"],[1,847,"`"],[-1,847,"s"],[1,857,"`"],[-1,857,"。"],[1,862,"`"],[-1,862,"s"],[1,893,"`"],[-1,893,"的"],[1,904," "],[-1,904,"s"]],[907,907],[120,120]]],[1564056983885,["GJX@GJXAIOU",[[-1,981,"![](https://img-blog.csdn.net/20170513144141409) \n"]],[980,1030],[980,980]]],[1564057002716,["GJX@GJXAIOU",[[1,980,"![Class方法]($resource/Class%E6%96%B9%E6%B3%95.jpg)"]],[980,980],[1030,1030]]],[1564057008357,["GJX@GJXAIOU",[[1,1031,"\n"]],[1030,1030],[1031,1031]]],[1564057012342,["GJX@GJXAIOU",[[1,980,"\n"]],[979,979],[980,980]]],[1564057027089,["GJX@GJXAIOU",[[-1,718,"20170513135521667"],[1,735,"C"]],[718,735],[719,719]]],[1564057087398,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,754,"`"],[-1,759,"`"],[1,760,"s"],[-1,827,"`"],[1,828,"\n"],[-1,832,"`"],[1,833,"s"],[-1,842,"`"],[1,843,"。"],[-1,847,"`"],[1,848,"s"],[-1,878,"`"],[1,879,"的"],[-1,889," "],[1,890,"s"],[1,965,"\n"],[-1,1014,"\n"]],[120,120],[1014,1014]]],[1564057087398,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,754,"`"],[1,758,"`"],[-1,758,"s"],[1,826,"`"],[-1,826,"\n"],[1,831,"`"],[-1,831,"s"],[1,841,"`"],[-1,841,"。"],[1,846,"`"],[-1,846,"s"],[1,877,"`"],[-1,877,"的"],[1,888," "],[-1,888,"s"],[-1,964,"\n"],[1,1014,"\n"]],[1014,1014],[120,120]]],[1564057031823,["GJX@GJXAIOU",[[1,720,"assde "]],[720,720],[726,726]]],[1564057033390,["GJX@GJXAIOU",[[-1,722,"sde "]],[726,726],[722,722]]],[1564057035666,["GJX@GJXAIOU",[[1,722,"s的"]],[722,722],[724,724]]],[1564057035757,["GJX@GJXAIOU",[[1,723," "]],[724,724],[725,725]]],[1564057037745,["GJX@GJXAIOU",[[1,725,"API"]],[725,725],[728,728]]],[1564057037836,["GJX@GJXAIOU",[[1,725," "]],[728,728],[729,729]]],[1564057045270,["GJX@GJXAIOU",[[1,764,"\n"]],[763,763],[764,764]]],[1564057081726,["GJX@GJXAIOU",[[1,1123,"\n"]],[1123,1123],[1124,1124]]],[1564057084790,["GJX@GJXAIOU",[[1,1161,"\n"]],[1161,1161],[1162,1162]]],[1564057147376,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057147376,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057088800,["GJX@GJXAIOU",[[-1,1092,"### "]],[1092,1096],[1092,1092]]],[1564057097178,["GJX@GJXAIOU",[[-1,1071,"## 1、"],[1,1076,"-"]],[1071,1076],[1072,1072]]],[1564057098018,["GJX@GJXAIOU",[[1,1072," "]],[1072,1072],[1073,1073]]],[1564057108596,["GJX@GJXAIOU",[[-1,1155,"1.3"]],[1158,1158],[1155,1155]]],[1564057109589,["GJX@GJXAIOU",[[-1,1119,"2"]],[1120,1120],[1119,1119]]],[1564057110821,["GJX@GJXAIOU",[[-1,1091,"1"]],[1092,1092],[1091,1091]]],[1564057111924,["GJX@GJXAIOU",[[-1,1117,"."]],[1118,1118],[1117,1117]]],[1564057113620,["GJX@GJXAIOU",[[-1,1089,"1."]],[1091,1091],[1089,1089]]],[1564057114425,["GJX@GJXAIOU",[[-1,1114,"1"]],[1115,1115],[1114,1114]]],[1564057120246,["GJX@GJXAIOU",[[1,1090,"* "],[1,1114," *"],[1,1149," *"]],[1090,1194],[1092,1200]]],[1564057121457,["GJX@GJXAIOU",[[1,1090,"  "],[1,1116,"  "],[1,1153,"  "]],[1092,1200],[1094,1206]]],[1564057123709,["GJX@GJXAIOU",[[-1,1088,"\n"]],[1088,1088],[1087,1087]]],[1564057207378,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057207378,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057157681,["GJX@GJXAIOU",[[-1,1209,"1.1"],[1,1212,"d"]],[1209,1212],[1210,1210]]],[1564057158002,["GJX@GJXAIOU",[[1,1210,"iy"]],[1210,1210],[1212,1212]]],[1564057158234,["GJX@GJXAIOU",[[-1,1211,"y"],[1,1212," "]],[1212,1212],[1211,1211]]],[1564057158437,["GJX@GJXAIOU",[[1,1211,"i"]],[1211,1211],[1212,1212]]],[1564057158669,["GJX@GJXAIOU",[[-1,1211,"i"],[1,1212,"y"]],[1212,1212],[1212,1212]]],[1564057159992,["GJX@GJXAIOU",[[-1,1209,"diy"]],[1212,1212],[1209,1209]]],[1564057163147,["GJX@GJXAIOU",[[1,1209,"第一章"]],[1209,1209],[1212,1212]]],[1564057163885,["GJX@GJXAIOU",[[-1,1211,"章"]],[1212,1212],[1211,1211]]],[1564057164666,["GJX@GJXAIOU",[[1,1211,"种"]],[1211,1211],[1212,1212]]],[1564057201079,["GJX@GJXAIOU",[[-1,1268,"![](https://img-blog.csdn.net/20170513145317647)"]],[1268,1316],[1268,1268]]],[1564057267380,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057267380,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057208024,["GJX@GJXAIOU",[[1,1268,"![Object中的getClass方法]($resource/Object%E4%B8%AD%E7%9A%84getClass%E6%96%B9%E6%B3%95.jpg)"]],[1268,1268],[1356,1356]]],[1564057235504,["GJX@GJXAIOU",[[-1,1357,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")"]],[1357,1529],[1357,1357]]],[1564057237941,["GJX@GJXAIOU",[[1,1358,"··"]],[1358,1358],[1360,1360]]],[1564057239178,["GJX@GJXAIOU",[[-1,1358,"··"]],[1360,1360],[1358,1358]]],[1564057242863,["GJX@GJXAIOU",[[1,1358,"```java"]],[1358,1358],[1365,1365]]],[1564057327384,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057327384,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057268620,["GJX@GJXAIOU",[[1,2321,"```"]],[2321,2321],[2324,2324]]],[1564057272080,["GJX@GJXAIOU",[[1,2325,"\n"]],[2324,2324],[2325,2325]]],[1564057276064,["GJX@GJXAIOU",[[-1,2311,"</span>  "]],[2311,2320],[2311,2311]]],[1564057283166,["GJX@GJXAIOU",[[-1,2307,"."]],[2308,2308],[2307,2307]]],[1564057284590,["GJX@GJXAIOU",[[-1,2296,"28."]],[2296,2299],[2296,2296]]],[1564057284909,["GJX@GJXAIOU",[[-1,2295,"\n"]],[2296,2296],[2295,2295]]],[1564057286533,["GJX@GJXAIOU",[[-1,2301,"29"]],[2301,2303],[2301,2301]]],[1564057288069,["GJX@GJXAIOU",[[-1,2286,"26."]],[2286,2289],[2286,2286]]],[1564057289179,["GJX@GJXAIOU",[[-1,2258,"25."]],[2258,2261],[2258,2258]]],[1564057290366,["GJX@GJXAIOU",[[-1,2214,"24."]],[2214,2217],[2214,2214]]],[1564057294167,["GJX@GJXAIOU",[[-1,2139,"23."]],[2142,2142],[2139,2139]]],[1564057295229,["GJX@GJXAIOU",[[-1,2050,"22."]],[2050,2053],[2050,2050]]],[1564057296678,["GJX@GJXAIOU",[[-1,2037,"21."]],[2037,2040],[2037,2037]]],[1564057297958,["GJX@GJXAIOU",[[-1,2013,"20."]],[2013,2016],[2013,2013]]],[1564057301630,["GJX@GJXAIOU",[[-1,1928,"18."]],[1928,1930],[1928,1928]]],[1564057304246,["GJX@GJXAIOU",[[-1,1888,"17."]],[1888,1890],[1888,1888]]],[1564057305822,["GJX@GJXAIOU",[[-1,1864,"16."]],[1864,1867],[1864,1864]]],[1564057307350,["GJX@GJXAIOU",[[-1,1816,"14."]],[1816,1819],[1816,1816]]],[1564057308670,["GJX@GJXAIOU",[[-1,1764,"13."]],[1764,1767],[1764,1764]]],[1564057311111,["GJX@GJXAIOU",[[-1,1695,"12."]],[1695,1698],[1695,1695]]],[1564057312685,["GJX@GJXAIOU",[[-1,1669,"11."]],[1669,1672],[1669,1669]]],[1564057314191,["GJX@GJXAIOU",[[-1,1621,"10."]],[1621,1624],[1621,1621]]],[1564057316949,["GJX@GJXAIOU",[[-1,1593,"9."]],[1593,1594],[1593,1593]]],[1564057319326,["GJX@GJXAIOU",[[-1,1584,"8."]],[1586,1586],[1584,1584]]],[1564057320351,["GJX@GJXAIOU",[[-1,1578,"."]],[1579,1579],[1578,1578]]],[1564057321630,["GJX@GJXAIOU",[[-1,1523,"6."]],[1523,1525],[1523,1523]]],[1564057322590,["GJX@GJXAIOU",[[-1,1575,"7"]],[1576,1576],[1575,1575]]],[1564057323606,["GJX@GJXAIOU",[[-1,1481,"5."]],[1481,1483],[1481,1481]]],[1564057324677,["GJX@GJXAIOU",[[-1,1449,"4."]],[1449,1451],[1449,1449]]],[1564057325790,["GJX@GJXAIOU",[[-1,1427,"3."]],[1427,1429],[1427,1427]]],[1564057326710,["GJX@GJXAIOU",[[-1,1418,"2."]],[1418,1420],[1418,1418]]],[1564057387385,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057387385,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057327686,["GJX@GJXAIOU",[[-1,1367,"."]],[1368,1368],[1367,1367]]],[1564057331397,["GJX@GJXAIOU",[[-1,1366,"1  <span style=“font-size:18px;”>"]],[1366,1399],[1366,1366]]],[1564057351899,["GJX@GJXAIOU",[[1,1357,"huoqu"]],[1357,1357],[1362,1362]]],[1564057353957,["GJX@GJXAIOU",[[-1,1357,"huoqu"]],[1362,1362],[1357,1357]]],[1564057364601,["GJX@GJXAIOU",[[1,1357,"获取反射的三种方法的代码示例："]],[1357,1357],[1372,1372]]],[1564057447387,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057447387,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057397445,["GJX@GJXAIOU",[[-1,1373,"```java\npackage fanshe;  \n  /** \n  * 获取Class对象的三种方式 \n  * 1 Object ——> getClass(); \n  * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性 \n  * 3 通过Class类的静态方法：forName（String  className）(常用) \n  * \n  */  \n  public class Fanshe {  \n  public static void main(String[] args) {  \n  //第一种方式获取Class对象    \n  Student stu1 = new Student();//这一new 产生一个Student对象，一个Class对象。  \n  Class stuClass = stu1.getClass();//获取Class对象  \n  System.out.println(stuClass.getName());  \n\n  //第二种方式获取Class对象  \n  Class stuClass2 = Student.class;  \n  System.out.println(stuClass == stuClass2);//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个  \n\n  //第三种方式获取Class对象  \n  try {  \n  Class stuClass3 = Class.forName(”fanshe.Student”);//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名  \n  System.out.println(stuClass3 == stuClass2);//判断三种方式是否获取的是同一个Class对象  \n  } catch (ClassNotFoundException e) {  \n  e.printStackTrace();  \n  }  \n  }  \n  }\n```"]],[1373,2228],[1373,1373]]],[1564057399886,["GJX@GJXAIOU",[[-1,1374,"\n"]],[1374,1374],[1373,1373]]],[1564057400444,["GJX@GJXAIOU",[[-1,1373,"\n"]],[1373,1373],[1372,1372]]],[1564057403973,["GJX@GJXAIOU",[[-1,2269,"12345678910111213141516171819202122232425262728"]],[2269,2316],[2269,2269]]],[1564057507385,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057507385,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057468973,["GJX@GJXAIOU",[[1,1924,"\n        "]],[1924,1924],[1933,1933]]],[1564057474582,["GJX@GJXAIOU",[[1,2070,"\n            "]],[2070,2070],[2083,2083]]],[1564057479776,["GJX@GJXAIOU",[[-1,2099,"就是"]],[2101,2101],[2099,2099]]],[1564057481651,["GJX@GJXAIOU",[[1,2099,"即"]],[2099,2099],[2100,2100]]],[1564057491934,["GJX@GJXAIOU",[[1,2169,"\n            "]],[2169,2169],[2182,2182]]],[1564057567387,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057567387,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057510472,["GJX@GJXAIOU",[[-1,2309,"##"]],[2309,2311],[2309,2309]]],[1564057514935,["GJX@GJXAIOU",[[1,2310,"**"],[1,2336,"**"]],[2310,2336],[2310,2340]]],[1564057535917,["GJX@GJXAIOU",[[-1,2461,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  package fanshe;  \n\n3.  public class Student {  \n\n5.  //—————构造方法——————-  \n6.  //（默认的构造方法）  \n7.  Student(String str){  \n8.  System.out.println(”(默认)的构造方法 s = ” + str);  \n9.  }  \n\n11.  //无参构造方法  \n12.  public Student(){  \n13.  System.out.println(”调用了公有、无参构造方法执行了。。。”);  \n14.  }  \n\n16.  //有一个参数的构造方法  \n17.  public Student(char name){  \n18.  System.out.println(”姓名：” + name);  \n19.  }  \n\n21.  //有多个参数的构造方法  \n22.  public Student(String name ,int age){  \n23.  System.out.println(”姓名：”+name+“年龄：”+ age);//这的执行效率有问题，以后解决。  \n24.  }  \n\n26.  //受保护的构造方法  \n27.  protected Student(boolean n){  \n28.  System.out.println(”受保护的构造方法 n = ” + n);  \n29.  }  \n\n31.  //私有构造方法  \n32.  private Student(int age){  \n33.  System.out.println(”私有的构造方法   年龄：”+ age);  \n34.  }  \n\n36.  }  "]],[2461,3393],[2461,2461]]],[1564057537133,["GJX@GJXAIOU",[[-1,2462,"\n"]],[2461,2461],[2460,2460]]],[1564057537501,["GJX@GJXAIOU",[[-1,2461,"\n"]],[2460,2460],[2459,2459]]],[1564057540245,["GJX@GJXAIOU",[[-1,2460,"\n"]],[2460,2460],[2459,2459]]],[1564057627388,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564057627388,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564057570557,["GJX@GJXAIOU",[[-1,3184,"123456789101112131415161718192021222324252627282930313233343536"]],[3184,3247],[3184,3184]]],[1564057585373,["GJX@GJXAIOU",[[-1,3207,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  package fanshe;  \n\n3.  import java.lang.reflect.Constructor;  \n\n6.  /* \n7.  * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员； \n8.  *  \n9.  * 1.获取构造方法： \n10.  *      1).批量的方法： \n11.  *          public Constructor[] getConstructors()：所有”公有的”构造方法 \n12.  public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有) \n\n14.  *      2).获取单个的方法，并调用： \n15.  *          public Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法： \n16.  *          public Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有； \n17.  *       \n18.  *          调用构造方法： \n19.  *          Constructor–>newInstance(Object… initargs) \n20.  */  \n21.  public class Constructors {  \n\n23.  public static void main(String[] args) throws Exception {  \n24.  //1.加载Class对象  \n25.  Class clazz = Class.forName(”fanshe.Student”);  \n\n28.  //2.获取所有公有构造方法  \n29.  System.out.println(”**********************所有公有构造方法*********************************”);  \n30.  Constructor[] conArray = clazz.getConstructors();  \n31.  for(Constructor c : conArray){  \n32.  System.out.println(c);  \n33.  }  \n\n36.  System.out.println(”************所有的构造方法(包括：私有、受保护、默认、公有)***************”);  \n37.  conArray = clazz.getDeclaredConstructors();  \n38.  for(Constructor c : conArray){  \n39.  System.out.println(c);  \n40.  }  \n\n42.  System.out.println(”*****************获取公有、无参的构造方法*******************************”);  \n43.  Constructor con = clazz.getConstructor(null);  \n44.  //1>、因为是无参的构造方法所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型  \n45.  //2>、返回的是描述这个无参构造函数的类对象。  \n\n47.  System.out.println(”con = ” + con);  \n48.  //调用构造方法  \n49.  Object obj = con.newInstance();  \n50.  //  System.out.println(“obj = ” + obj);  \n51.  //  Student stu = (Student)obj;  \n\n53.  System.out.println(”******************获取私有构造方法，并调用*******************************”);  \n54.  con = clazz.getDeclaredConstructor(char.class);  \n55.  System.out.println(con);  \n56.  //调用构造方法  \n57.  con.setAccessible(true);//暴力访问(忽略掉访问修饰符)  \n58.  obj = con.newInstance(’男’);  \n59.  }  \n\n61.  }  \n"]],[3207,5398],[3207,3207]]],[1564057588503,["GJX@GJXAIOU",[[-1,3207,"\n"]],[3206,3206],[3206,3206]]],[1564057589030,["GJX@GJXAIOU",[[-1,3206,"\n"]],[3206,3206],[3206,3206]]],[1564059427421,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059427421,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059373702,["GJX@GJXAIOU",[[-1,4035,"******************"]],[4035,4053],[4035,4035]]],[1564059376733,["GJX@GJXAIOU",[[-1,4051,"*************************"]],[4043,4068],[4043,4043]]],[1564059382532,["GJX@GJXAIOU",[[-1,4230,"********"]],[4230,4238],[4230,4230]]],[1564059387573,["GJX@GJXAIOU",[[-1,4260,"*********"]],[4259,4267],[4258,4258]]],[1564059395446,["GJX@GJXAIOU",[[-1,4433,"*************"]],[4433,4446],[4433,4433]]],[1564059397486,["GJX@GJXAIOU",[[-1,4454,"**********************"]],[4453,4475],[4453,4453]]],[1564059399261,["GJX@GJXAIOU",[[-1,4453,"*"]],[4452,4452],[4451,4451]]],[1564059401966,["GJX@GJXAIOU",[[-1,4444,"法"]],[4445,4445],[4444,4444]]],[1564059405379,["GJX@GJXAIOU",[[1,4444,"法"]],[4444,4444],[4445,4445]]],[1564059408832,["GJX@GJXAIOU",[[-1,4451,"**"]],[4447,4447],[4445,4445]]],[1564059413525,["GJX@GJXAIOU",[[-1,4819,"*************"]],[4819,4832],[4819,4819]]],[1564059416637,["GJX@GJXAIOU",[[-1,4837,"*************************"]],[4837,4861],[4836,4836]]],[1564059420997,["GJX@GJXAIOU",[[-1,5041,"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061"]],[5041,5154],[5041,5041]]],[1564059487422,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059487422,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059429773,["GJX@GJXAIOU",[[-1,5053,"\n"]],[5054,5054],[5053,5053]]],[1564059439853,["GJX@GJXAIOU",[[-1,5053,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  **********************所有公有构造方法*********************************  \n2.  public fanshe.Student(java.lang.String,int)  \n3.  public fanshe.Student(char)  \n4.  public fanshe.Student()  \n5.  ************所有的构造方法(包括：私有、受保护、默认、公有)***************  \n6.  private fanshe.Student(int)  \n7.  protected fanshe.Student(boolean)  \n8.  public fanshe.Student(java.lang.String,int)  \n9.  public fanshe.Student(char)  \n10.  public fanshe.Student()  \n11.  fanshe.Student(java.lang.String)  \n12.  *****************获取公有、无参的构造方法*******************************  \n13.  con = public fanshe.Student()  \n14.  调用了公有、无参构造方法执行了。。。  \n15.  ******************获取私有构造方法，并调用*******************************  \n16.  public fanshe.Student(char)  \n17.  姓名：男  "]],[5053,5944],[5053,5053]]],[1564059442661,["GJX@GJXAIOU",[[-1,5054,"\n"]],[5054,5054],[5053,5053]]],[1564059443503,["GJX@GJXAIOU",[[-1,5053,"\n"]],[5053,5053],[5052,5052]]],[1564059445615,["GJX@GJXAIOU",[[-1,5071,"************"]],[5066,5078],[5066,5066]]],[1564059447493,["GJX@GJXAIOU",[[-1,5091,"*********************"]],[5083,5104],[5083,5083]]],[1564059450006,["GJX@GJXAIOU",[[-1,5194,"******"]],[5192,5198],[5192,5192]]],[1564059451964,["GJX@GJXAIOU",[[-1,5228,"*****"]],[5225,5230],[5225,5225]]],[1564059454525,["GJX@GJXAIOU",[[-1,5429,"********"]],[5425,5433],[5425,5425]]],[1564059456238,["GJX@GJXAIOU",[[-1,5457,"***************"]],[5449,5464],[5449,5449]]],[1564059458036,["GJX@GJXAIOU",[[-1,5516,"*********"]],[5512,5521],[5512,5512]]],[1564059459980,["GJX@GJXAIOU",[[-1,5544,"***************"]],[5539,5554],[5539,5539]]],[1564059547424,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059547424,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059494515,["GJX@GJXAIOU",[[-1,1359,"反射"],[1,1361,"Class"]],[1359,1359],[1364,1364]]],[1564059495492,["GJX@GJXAIOU",[[1,1364,"类"]],[1364,1364],[1365,1365]]],[1564059495574,["GJX@GJXAIOU",[[1,1364," "]],[1365,1365],[1366,1366]]],[1564059496363,["GJX@GJXAIOU",[[1,1366,"对象"]],[1366,1366],[1368,1368]]],[1564059607425,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059607425,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059584170,["GJX@GJXAIOU",[[1,4539,"，"]],[4539,4539],[4540,4540]]],[1564059667426,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059667426,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059661144,["GJX@GJXAIOU",[[1,4664,"\n        "]],[4664,4664],[4673,4673]]],[1564059727430,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059727430,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059701772,["GJX@GJXAIOU",[[-1,5980,"  "],[1,5982,"-"]],[5980,5980],[5981,5981]]],[1564059702773,["GJX@GJXAIOU",[[1,5981," "]],[5981,5981],[5982,5982]]],[1564059787433,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059787433,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059730305,["GJX@GJXAIOU",[[-1,5634,"1."],[1,5636,"-"]],[5634,5634],[5635,5635]]],[1564059730500,["GJX@GJXAIOU",[[1,5635,"="]],[5635,5635],[5636,5636]]],[1564059731652,["GJX@GJXAIOU",[[-1,5635,"="]],[5636,5636],[5635,5635]]],[1564059731833,["GJX@GJXAIOU",[[1,5635," "]],[5635,5635],[5636,5636]]],[1564059746471,["GJX@GJXAIOU",[[-1,6089,"**[](https://blog.csdn.net/lwl20140904/article/details/80163880)**`"]],[6088,6155],[6088,6088]]],[1564059748506,["GJX@GJXAIOU",[[1,6118,"·"]],[6118,6118],[6119,6119]]],[1564059749598,["GJX@GJXAIOU",[[-1,6118,"·"]],[6119,6119],[6118,6118]]],[1564059749797,["GJX@GJXAIOU",[[1,6118,"·"]],[6118,6118],[6119,6119]]],[1564059751869,["GJX@GJXAIOU",[[-1,6118,"·"]],[6119,6119],[6118,6118]]],[1564059752072,["GJX@GJXAIOU",[[1,6118,"·"]],[6118,6118],[6119,6119]]],[1564059753134,["GJX@GJXAIOU",[[-1,6118,"·"]],[6119,6119],[6118,6118]]],[1564059755148,["GJX@GJXAIOU",[[1,6118,"`"]],[6118,6118],[6119,6119]]],[1564059757261,["GJX@GJXAIOU",[[-1,6087,"\n"]],[6087,6087],[6086,6086]]],[1564059757920,["GJX@GJXAIOU",[[-1,6085,"："]],[6086,6086],[6085,6085]]],[1564059759873,["GJX@GJXAIOU",[[1,6085,":"]],[6085,6085],[6086,6086]]],[1564059762519,["GJX@GJXAIOU",[[-1,6086,"\n"]],[6087,6087],[6086,6086]]],[1564059763917,["GJX@GJXAIOU",[[-1,6077,"\n"]],[6077,6077],[6076,6076]]],[1564059768552,["GJX@GJXAIOU",[[-1,6123,"     "]],[6123,6128],[6123,6123]]],[1564059770741,["GJX@GJXAIOU",[[-1,6185,"\n"]],[6185,6185],[6184,6184]]],[1564059847523,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059847523,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059790439,["GJX@GJXAIOU",[[-1,6263,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.field;  \n\n3.  public class Student {  \n4.  public Student(){  \n\n6.  }  \n7.  //**********字段*************//  \n8.  public String name;  \n9.  protected int age;  \n10.  char sex;  \n11.  private String phoneNum;  \n\n13.  @Override  \n14.  public String toString() {  \n15.  return “Student [name=” + name + “, age=” + age + “, sex=” + sex  \n16.  + ”, phoneNum=” + phoneNum + “]”;  \n17.  }  \n\n20.  }</span>  \n\n"]],[6262,6885],[6262,6262]]],[1564059791111,["GJX@GJXAIOU",[[-1,6262,"\n"]],[6262,6262],[6261,6261]]],[1564059803959,["GJX@GJXAIOU",[[-1,6687,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.field;  \n2.  import java.lang.reflect.Field;  \n3.  /* \n4.  * 获取成员变量并调用： \n5.  *  \n6.  * 1.批量的 \n7.  *      1).Field[] getFields():获取所有的”公有字段” \n8.  *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有； \n9.  * 2.获取单个的： \n10.  *      1).public Field getField(String fieldName):获取某个”公有的”字段； \n11.  *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的) \n12.  *  \n13.  *   设置字段的值： \n14.  *      Field –> public void set(Object obj,Object value): \n15.  *                  参数说明： \n16.  *                  1.obj:要设置的字段所在的对象； \n17.  *                  2.value:要为字段设置的值； \n18.  *  \n19.  */  \n20.  public class Fields {  \n\n22.  public static void main(String[] args) throws Exception {  \n23.  //1.获取Class对象  \n24.  Class stuClass = Class.forName(”fanshe.field.Student”);  \n25.  //2.获取字段  \n26.  System.out.println(”************获取所有公有的字段********************”);  \n27.  Field[] fieldArray = stuClass.getFields();  \n28.  for(Field f : fieldArray){  \n29.  System.out.println(f);  \n30.  }  \n31.  System.out.println(”************获取所有的字段(包括私有、受保护、默认的)********************”);  \n32.  fieldArray = stuClass.getDeclaredFields();  \n33.  for(Field f : fieldArray){  \n34.  System.out.println(f);  \n35.  }  \n36.  System.out.println(”*************获取公有字段**并调用***********************************”);  \n37.  Field f = stuClass.getField(”name”);  \n38.  System.out.println(f);  \n39.  //获取一个对象  \n40.  Object obj = stuClass.getConstructor().newInstance();//产生Student对象–》Student stu = new Student();  \n41.  //为字段设置值  \n42.  f.set(obj, ”刘德华”);//为Student对象中的name属性赋值–》stu.name = ”刘德华”  \n43.  //验证  \n44.  Student stu = (Student)obj;  \n45.  System.out.println(”验证姓名：” + stu.name);  \n\n48.  System.out.println(”**************获取私有字段****并调用********************************”);  \n49.  f = stuClass.getDeclaredField(”phoneNum”);  \n50.  System.out.println(f);  \n51.  f.setAccessible(true);//暴力反射，解除私有限定  \n52.  f.set(obj, ”18888889999”);  \n53.  System.out.println(”验证电话：” + stu);  \n\n55.  }  \n56.  }</span><span style=”font-size:18px;”>  \n57.  </span>  \n"]],[6687,8928],[6687,6687]]],[1564059804814,["GJX@GJXAIOU",[[-1,6687,"\n"]],[6687,6687],[6686,6686]]],[1564059814797,["GJX@GJXAIOU",[[-1,8852,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ************获取所有公有的字段********************  \n2.  public java.lang.String fanshe.field.Student.name  \n3.  ************获取所有的字段(包括私有、受保护、默认的)********************  \n4.  public java.lang.String fanshe.field.Student.name  \n5.  protected int fanshe.field.Student.age  \n6.  char fanshe.field.Student.sex  \n7.  private java.lang.String fanshe.field.Student.phoneNum  \n8.  *************获取公有字段**并调用***********************************  \n9.  public java.lang.String fanshe.field.Student.name  \n10.  验证姓名：刘德华  \n11.  **************获取私有字段****并调用********************************  \n12.  private java.lang.String fanshe.field.Student.phoneNum  \n13.  验证电话：Student [name=刘德华, age=0, sex=  \n"]],[8852,9698],[8852,8852]]],[1564059846685,["GJX@GJXAIOU",[[-1,8852,"\n"]],[8852,8852],[8851,8851]]],[1564059847236,["GJX@GJXAIOU",[[-1,8851,"\n"]],[8851,8851],[8850,8850]]],[1564059907518,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059907518,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059866111,["GJX@GJXAIOU",[[-1,9714,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.method;  \n\n3.  public class Student {  \n4.  //**************成员方法***************//  \n5.  public void show1(String s){  \n6.  System.out.println(”调用了：公有的，String参数的show1(): s = ” + s);  \n7.  }  \n8.  protected void show2(){  \n9.  System.out.println(”调用了：受保护的，无参的show2()”);  \n10.  }  \n11.  void show3(){  \n12.  System.out.println(”调用了：默认的，无参的show3()”);  \n13.  }  \n14.  private String show4(int age){  \n15.  System.out.println(”调用了，私有的，并且有返回值的，int参数的show4(): age = ” + age);  \n16.  return “abcd”;  \n17.  }  \n18.  }  \n19.  </span>  \n\n"]],[9713,10462],[9713,9713]]],[1564059868445,["GJX@GJXAIOU",[[-1,9713,"\n"]],[9713,9713],[9712,9712]]],[1564059880294,["GJX@GJXAIOU",[[-1,10254,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.method;  \n\n3.  import java.lang.reflect.Method;  \n\n5.  /* \n6.  * 获取成员方法并调用： \n7.  *  \n8.  * 1.批量的： \n9.  *      public Method[] getMethods():获取所有”公有方法”；（包含了父类的方法也包含Object类） \n10.  *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的) \n11.  * 2.获取单个的： \n12.  *      public Method getMethod(String name,Class<?>… parameterTypes): \n13.  *                  参数： \n14.  *                      name : 方法名； \n15.  *                      Class … : 形参的Class类型对象 \n16.  *      public Method getDeclaredMethod(String name,Class<?>… parameterTypes) \n17.  *  \n18.  *   调用方法： \n19.  *      Method –> public Object invoke(Object obj,Object… args): \n20.  *                  参数说明： \n21.  *                  obj : 要调用方法的对象； \n22.  *                  args:调用方式时所传递的实参； \n\n24.  ): \n25.  */  \n26.  public class MethodClass {  \n\n28.  public static void main(String[] args) throws Exception {  \n29.  //1.获取Class对象  \n30.  Class stuClass = Class.forName(”fanshe.method.Student”);  \n31.  //2.获取所有公有方法  \n32.  System.out.println(”***************获取所有的”公有“方法*******************”);  \n33.  stuClass.getMethods();  \n34.  Method[] methodArray = stuClass.getMethods();  \n35.  for(Method m : methodArray){  \n36.  System.out.println(m);  \n37.  }  \n38.  System.out.println(”***************获取所有的方法，包括私有的*******************”);  \n39.  methodArray = stuClass.getDeclaredMethods();  \n40.  for(Method m : methodArray){  \n41.  System.out.println(m);  \n42.  }  \n43.  System.out.println(”***************获取公有的show1()方法*******************”);  \n44.  Method m = stuClass.getMethod(”show1”, String.class);  \n45.  System.out.println(m);  \n46.  //实例化一个Student对象  \n47.  Object obj = stuClass.getConstructor().newInstance();  \n48.  m.invoke(obj, ”刘德华”);  \n\n50.  System.out.println(”***************获取私有的show4()方法******************”);  \n51.  m = stuClass.getDeclaredMethod(”show4”, int.class);  \n52.  System.out.println(m);  \n53.  m.setAccessible(true);//解除私有限定  \n54.  Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参  \n55.  System.out.println(”返回值：” + result);  \n\n58.  }  \n59.  }  \n60.  </span>  "]],[10254,12535],[10254,10254]]],[1564059881101,["GJX@GJXAIOU",[[-1,10255,"\n"]],[10254,10254],[10253,10253]]],[1564059881879,["GJX@GJXAIOU",[[-1,10254,"\n"]],[10253,10253],[10252,10252]]],[1564059883688,["GJX@GJXAIOU",[[-1,10253,"\n"]],[10253,10253],[10252,10252]]],[1564059895973,["GJX@GJXAIOU",[[-1,12237,"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859"]],[12237,12346],[12237,12237]]],[1564059900292,["GJX@GJXAIOU",[[-1,12251,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ***************获取所有的”公有“方法*******************  \n2.  public void fanshe.method.Student.show1(java.lang.String)  \n3.  public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException  \n4.  public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException  \n5.  public final void java.lang.Object.wait() throws java.lang.InterruptedException  \n6.  public boolean java.lang.Object.equals(java.lang.Object)  \n7.  public java.lang.String java.lang.Object.toString()  \n8.  public native int java.lang.Object.hashCode()  \n9.  public final native java.lang.Class java.lang.Object.getClass()  \n10.  public final native void java.lang.Object.notify()  \n11.  public final native void java.lang.Object.notifyAll()  \n12.  ***************获取所有的方法，包括私有的*******************  \n13.  public void fanshe.method.Student.show1(java.lang.String)  \n14.  private java.lang.String fanshe.method.Student.show4(int)  \n15.  protected void fanshe.method.Student.show2()  \n16.  void fanshe.method.Student.show3()  \n17.  ***************获取公有的show1()方法*******************  \n18.  public void fanshe.method.Student.show1(java.lang.String)  \n19.  调用了：公有的，String参数的show1(): s = 刘德华  \n20.  ***************获取私有的show4()方法******************  \n21.  private java.lang.String fanshe.method.Student.show4(int)  \n22.  调用了，私有的，并且有返回值的，int参数的show4(): age = 20  \n23.  返回值：abcd  \n"]],[12251,13804],[12251,12251]]],[1564059901438,["GJX@GJXAIOU",[[-1,12251,"\n"]],[12251,12251],[12250,12250]]],[1564059901885,["GJX@GJXAIOU",[[-1,12250,"\n"]],[12250,12250],[12249,12249]]],[1564059904750,["GJX@GJXAIOU",[[-1,11185,"*********"]],[11183,11192],[11183,11183]]],[1564059905855,["GJX@GJXAIOU",[[-1,11422,"*******"]],[11418,11425],[11418,11418]]],[1564059906957,["GJX@GJXAIOU",[[-1,11206,"*********"]],[11201,11210],[11201,11201]]],[1564059967520,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564059967520,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059908325,["GJX@GJXAIOU",[[-1,11437,"********"]],[11431,11439],[11431,11431]]],[1564059909300,["GJX@GJXAIOU",[[-1,11202,"****"]],[11199,11203],[11199,11199]]],[1564059910589,["GJX@GJXAIOU",[[-1,11428,"*****"]],[11424,11429],[11424,11424]]],[1564059913197,["GJX@GJXAIOU",[[-1,11407,"**"]],[11405,11405],[11403,11403]]],[1564059915519,["GJX@GJXAIOU",[[-1,11424,"**"]],[11423,11423],[11421,11421]]],[1564059916837,["GJX@GJXAIOU",[[-1,11406,"*"]],[11405,11405],[11404,11404]]],[1564059919208,["GJX@GJXAIOU",[[-1,11597,"********"]],[11593,11601],[11593,11593]]],[1564059920461,["GJX@GJXAIOU",[[-1,11621,"*********"]],[11616,11625],[11616,11616]]],[1564059922445,["GJX@GJXAIOU",[[-1,11615,"******"]],[11612,11618],[11612,11612]]],[1564059925084,["GJX@GJXAIOU",[[-1,11864,"*********"]],[11861,11870],[11861,11861]]],[1564059926784,["GJX@GJXAIOU",[[-1,11883,"*************"]],[11880,11893],[11880,11880]]],[1564059964196,["GJX@GJXAIOU",[[-1,13717,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  ***************获取所有的”公有“方法*******************  \n2.  public void fanshe.method.Student.show1(java.lang.String)  \n3.  public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException  \n4.  public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException  \n5.  public final void java.lang.Object.wait() throws java.lang.InterruptedException  \n6.  public boolean java.lang.Object.equals(java.lang.Object)  \n7.  public java.lang.String java.lang.Object.toString()  \n8.  public native int java.lang.Object.hashCode()  \n9.  public final native java.lang.Class java.lang.Object.getClass()  \n10.  public final native void java.lang.Object.notify()  \n11.  public final native void java.lang.Object.notifyAll()  \n12.  ***************获取所有的方法，包括私有的*******************  \n13.  public void fanshe.method.Student.show1(java.lang.String)  \n14.  private java.lang.String fanshe.method.Student.show4(int)  \n15.  protected void fanshe.method.Student.show2()  \n16.  void fanshe.method.Student.show3()  \n17.  ***************获取公有的show1()方法*******************  \n18.  public void fanshe.method.Student.show1(java.lang.String)  \n19.  调用了：公有的，String参数的show1(): s = 刘德华  \n20.  ***************获取私有的show4()方法******************  \n21.  private java.lang.String fanshe.method.Student.show4(int)  \n22.  调用了，私有的，并且有返回值的，int参数的show4(): age = 20  \n23.  返回值：abcd  \n"]],[13716,15269],[13716,13716]]],[1564059965047,["GJX@GJXAIOU",[[-1,13717,"\n"]],[13716,13716],[13715,13715]]],[1564060027518,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060027518,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564059973100,["GJX@GJXAIOU",[[-1,15083,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.main;  \n\n3.  public class Student {  \n\n5.  public static void main(String[] args) {  \n6.  System.out.println(”main方法执行了。。。”);  \n7.  }  \n8.  }  \n9.  </span>  \n\n"]],[15082,15464],[15082,15082]]],[1564059973933,["GJX@GJXAIOU",[[-1,15082,"\n"]],[15082,15082],[15081,15081]]],[1564059979981,["GJX@GJXAIOU",[[-1,15253,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  <span style=“font-size:14px;”>package fanshe.main;  \n\n3.  import java.lang.reflect.Method;  \n\n5.  /** \n6.  * 获取Student类的main方法、不要与当前的main方法搞混了 \n7.  */  \n8.  public class Main {  \n\n10.  public static void main(String[] args) {  \n11.  try {  \n12.  //1、获取Student对象的字节码  \n13.  Class clazz = Class.forName(”fanshe.main.Student”);  \n\n15.  //2、获取main方法  \n16.  Method methodMain = clazz.getMethod(”main”, String[].class);//第一个参数：方法名称，第二个参数：方法形参的类型，  \n17.  //3、调用main方法  \n18.  // methodMain.invoke(null, new String[]{“a”,”b”,”c”});  \n19.  //第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数  \n20.  //这里拆的时候将  new String[]{“a”,”b”,”c”} 拆成3个对象。。。所以需要将它强转。  \n21.  methodMain.invoke(null, (Object)new String[]{“a”,“b”,“c”});//方式一  \n22.  // methodMain.invoke(null, new Object[]{new String[]{“a”,”b”,”c”}});//方式二  \n\n24.  } catch (Exception e) {  \n25.  e.printStackTrace();  \n26.  }  \n\n29.  }  \n30.  }</span><span style=”font-size:18px;”>  \n31.  </span>  \n"]],[15253,16403],[15253,15253]]],[1564059982341,["GJX@GJXAIOU",[[-1,15233,"12345678"]],[15233,15241],[15233,15233]]],[1564059987110,["GJX@GJXAIOU",[[-1,16165,"123456789101112131415161718192021222324252627282930"]],[16165,16216],[16165,16165]]],[1564059997068,["GJX@GJXAIOU",[[-1,16234,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  public class Student {  \n2.  public void show(){  \n3.  System.out.println(”is show()”);  \n4.  }  \n5.  }  "]],[16234,16517],[16234,16234]]],[1564059998084,["GJX@GJXAIOU",[[-1,16235,"\n"]],[16235,16235],[16234,16234]]],[1564059998503,["GJX@GJXAIOU",[[-1,16234,"\n"]],[16234,16234],[16233,16233]]],[1564059998917,["GJX@GJXAIOU",[[-1,16233,"\n"]],[16233,16233],[16232,16232]]],[1564060014644,["GJX@GJXAIOU",[[-1,16336,"1234"]],[16340,16340],[16336,16336]]],[1564060018741,["GJX@GJXAIOU",[[-1,16367,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  className = cn.fanshe.Student  \n2.  methodName = show  "]],[16367,16600],[16367,16367]]],[1564060019214,["GJX@GJXAIOU",[[-1,16368,"\n"]],[16367,16367],[16366,16366]]],[1564060019784,["GJX@GJXAIOU",[[-1,16367,"\n"]],[16366,16366],[16365,16365]]],[1564060087519,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060087519,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564060029356,["GJX@GJXAIOU",[[-1,16435,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  import java.io.FileNotFoundException;  \n2.  import java.io.FileReader;  \n3.  import java.io.IOException;  \n4.  import java.lang.reflect.Method;  \n5.  import java.util.Properties;  \n\n7.  /* \n8.  * 我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改 \n9.  * 我们只需要将新类发送给客户端，并修改配置文件即可 \n10.  */  \n11.  public class Demo {  \n12.  public static void main(String[] args) throws Exception {  \n13.  //通过反射获取Class对象  \n14.  Class stuClass = Class.forName(getValue(”className”));//”cn.fanshe.Student”  \n15.  //2获取show()方法  \n16.  Method m = stuClass.getMethod(getValue(”methodName”));//show  \n17.  //3.调用show()方法  \n18.  m.invoke(stuClass.getConstructor().newInstance());  \n\n20.  }  \n\n22.  //此方法接收一个key，在配置文件中获取相应的value  \n23.  public static String getValue(String key) throws IOException{  \n24.  Properties pro = new Properties();//获取配置文件的对象  \n25.  FileReader in = new FileReader(“pro.txt”);//获取输入流  \n26.  pro.load(in);//将流加载到配置文件对象中  \n27.  in.close();  \n28.  return pro.getProperty(key);//返回根据key获取的value值  \n29.  }  \n30.  }  \n\n"]],[16434,17608],[16434,16434]]],[1564060030095,["GJX@GJXAIOU",[[-1,16434,"\n"]],[16434,16434],[16433,16433]]],[1564060037188,["GJX@GJXAIOU",[[-1,17549,"\n"]],[17550,17550],[17549,17549]]],[1564060037805,["GJX@GJXAIOU",[[-1,17548,"\n"]],[17549,17549],[17548,17548]]],[1564060039679,["GJX@GJXAIOU",[[1,17548,"\n"]],[17548,17548],[17549,17549]]],[1564060040303,["GJX@GJXAIOU",[[1,17549,"\n"]],[17549,17549],[17550,17550]]],[1564060042805,["GJX@GJXAIOU",[[-1,17550,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  public class Student2 {  \n2.  public void show2(){  \n3.  System.out.println(”is show2()”);  \n4.  }  \n5.  }  "]],[17550,17836],[17550,17550]]],[1564060044293,["GJX@GJXAIOU",[[-1,17551,"\n"]],[17551,17551],[17550,17550]]],[1564060044767,["GJX@GJXAIOU",[[-1,17550,"\n"]],[17550,17550],[17549,17549]]],[1564060045574,["GJX@GJXAIOU",[[-1,17549,"\n"]],[17549,17549],[17548,17548]]],[1564060049158,["GJX@GJXAIOU",[[-1,17655,"1234"]],[17655,17659],[17655,17655]]],[1564060051558,["GJX@GJXAIOU",[[-1,17374,"123456789101112131415161718192021222324252627282930"]],[17374,17425],[17374,17374]]],[1564060056262,["GJX@GJXAIOU",[[-1,17620,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  className = cn.fanshe.Student2  \n2.  methodName = show2  "]],[17620,17855],[17620,17620]]],[1564060057279,["GJX@GJXAIOU",[[-1,17621,"\n"]],[17621,17621],[17620,17620]]],[1564060057622,["GJX@GJXAIOU",[[-1,17620,"\n"]],[17620,17620],[17619,17619]]],[1564060058127,["GJX@GJXAIOU",[[-1,17619,"\n"]],[17619,17619],[17618,17618]]],[1564060066175,["GJX@GJXAIOU",[[-1,17779,"**[java]** [view plain](https://blog.csdn.net/lwl20140904/article/details/80163880# \"view plain\") [copy](https://blog.csdn.net/lwl20140904/article/details/80163880# \"copy\")\n\n1.  import java.lang.reflect.Method;  \n2.  import java.util.ArrayList;  \n\n4.  /* \n5.  * 通过反射越过泛型检查 \n6.  *  \n7.  * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？ \n8.  */  \n9.  public class Demo {  \n10.  public static void main(String[] args) throws Exception{  \n11.  ArrayList<String> strList = new ArrayList<>();  \n12.  strList.add(”aaa”);  \n13.  strList.add(”bbb”);  \n\n15.  //  strList.add(100);  \n16.  //获取ArrayList的Class对象，反向的调用add()方法，添加数据  \n17.  Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象  \n18.  //获取add()方法  \n19.  Method m = listClass.getMethod(”add”, Object.class);  \n20.  //调用add()方法  \n21.  m.invoke(strList, 100);  \n\n23.  //遍历集合  \n24.  for(Object obj : strList){  \n25.  System.out.println(obj);  \n26.  }  \n27.  }  \n28.  }  \n\n"]],[17778,18701],[17778,17778]]],[1564060067375,["GJX@GJXAIOU",[[-1,17778,"\n"]],[17778,17778],[17777,17777]]],[1564060071582,["GJX@GJXAIOU",[[-1,18494,"123456789101112131415161718192021222324252627"]],[18494,18539],[18494,18494]]],[1564060267522,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060267522,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564060223271,["GJX@GJXAIOU",[[1,18521,"\n"]],[18519,18519],[18520,18520]]],[1564060223414,["GJX@GJXAIOU",[[1,18522,"\n"]],[18520,18520],[18521,18521]]],[1564060223551,["GJX@GJXAIOU",[[1,18523,"\n"]],[18521,18521],[18522,18522]]],[1564060226092,["GJX@GJXAIOU",[[1,18522,"## dans"]],[18522,18522],[18529,18529]]],[1564060227805,["GJX@GJXAIOU",[[-1,18525,"dans"]],[18529,18529],[18525,18525]]],[1564060234290,["GJX@GJXAIOU",[[1,18525,"反射的基本用途"]],[18525,18525],[18532,18532]]],[1564060234552,["GJX@GJXAIOU",[[1,18534,"\n"]],[18532,18532],[18533,18533]]],[1564060248732,["GJX@GJXAIOU",[[1,18534,"# 一、回顾：什么是反射？\n\n反射 (Reflection) 是 Java 的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。\n\nOracle 官方对反射的解释是：\n\n> Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\n> The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.\n\n简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。\n\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。\n\nJava 反射主要提供以下功能：\n\n*   在运行时判断任意一个对象所属的类；\n*   在运行时构造任意一个类的对象；\n*   在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n*   在运行时调用任意一个对象的方法\n\n重点：**是运行时而不是编译时**\n\n# 二、反射的主要用途\n\n很多人都认为反射在实际的 Java 开发应用中并不广泛，其实不然。当我们在使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射。\n\n**反射最重要的用途就是开发各种通用框架。**很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 Bean），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射，运行时动态加载需要加载的对象。\n\n举一个例子，在运用 Struts 2 框架的开发中我们一般会在 `struts.xml` 里去配置 `Action`，比如：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n | \n\n<action name=\"login\"\n\n               class=\"org.ScZyhSoft.test.action.SimpleLoginAction\"\n\n               method=\"execute\">\n\n           <result>/shop/shop-index.jsp</result>\n\n           <result name=\"error\">login.jsp</result>\n\n       </action>\n\n |\n\n配置文件与 `Action` 建立了一种映射关系，当 View 层发出请求时，请求会被 `StrutsPrepareAndExecuteFilter` 拦截，然后 `StrutsPrepareAndExecuteFilter` 会去动态地创建 Action 实例。比如我们请求 `login.action`，那么 `StrutsPrepareAndExecuteFilter`就会去解析struts.xml文件，检索action中name为login的Action，并根据class属性创建SimpleLoginAction实例，并用invoke方法来调用execute方法，这个过程离不开反射。\n\n对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。而对于一般的开发者来说，不深入框架开发则用反射用的就会少一点，不过了解一下框架的底层机制有助于丰富自己的编程思想，也是很有益的。\n\n# 三、反射的基本运用\n\n上面我们提到了反射可以用于判断任意对象所属的类，获得 Class 对象，构造任意一个对象以及调用一个对象。这里我们介绍一下基本反射功能的使用和实现(反射相关的类一般都在 java.lang.relfect 包里)。\n\n## 1、获得 Class 对象\n\n方法有三种：\n\n(1) 使用 Class 类的 `forName` 静态方法:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n | \n\n public static Class<?> forName(String className)\n\n``` \n\n比如在 JDBC 开发中常用此方法加载数据库驱动:\n\n```java\n\n Class.forName(driver);\n\n |\n\n(2)直接获取某一个对象的 class，比如:\n\n| \n\n1\n\n2\n\n | \n\nClass<?> klass = int.class;\n\nClass<?> classInt = Integer.TYPE;\n\n |\n\n(3)调用某个对象的 `getClass()` 方法，比如:\n\n| \n\n1\n\n2\n\n | \n\nStringBuilder str = new StringBuilder(\"123\");\n\nClass<?> klass = str.getClass();\n\n |\n\n## 2、判断是否为某个类的实例\n\n一般地，我们用 `instanceof` 关键字来判断是否为某个类的实例。同时我们也可以借助反射中 Class 对象的 `isInstance()` 方法来判断是否为某个类的实例，它是一个 native 方法：\n\n| \n\n1\n\n | \n\npublic native boolean isInstance(Object obj);\n\n |\n\n## 3、创建实例\n\n通过反射来生成对象主要有两种方式。\n\n*   使用Class对象的newInstance()方法来创建Class对象对应类的实例。\n\n| \n\n1\n\n2\n\n | \n\nClass<?> c = String.class;\n\nObject str = c.newInstance();\n\n |\n\n*   先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这种方法可以用指定的构造器构造类的实例。\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n | \n\n//获取String所对应的Class对象\n\nClass<?> c = String.class;\n\n//获取String类带一个String参数的构造器\n\nConstructor constructor = c.getConstructor(String.class);\n\n//根据构造器创建实例\n\nObject obj = constructor.newInstance(\"23333\");\n\nSystem.out.println(obj);\n\n |\n\n## 4、获取方法\n\n获取某个Class对象的方法集合，主要有以下几个方法：\n\n*   `getDeclaredMethods` 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\n\n| \n\n1\n\n | \n\npublic Method[] getDeclaredMethods() throws SecurityException\n\n |\n\n*   `getMethods` 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。\n\n| \n\n1\n\n | \n\npublic Method[] getMethods() throws SecurityException\n\n |\n\n*   `getMethod` 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。\n\n| \n\n1\n\n | \n\npublic Method getMethod(String name, Class<?>... parameterTypes)\n\n |\n\n只是这样描述的话可能难以理解，我们用例子来理解这三个方法：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n | \n\npackage org.ScZyhSoft.common;\n\nimport java.lang.reflect.InvocationTargetException;\n\nimport java.lang.reflect.Method;\n\npublic class test1 {\n\n\tpublic static void test() throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n\t        Class<?> c = methodClass.class;\n\n\t        Object object = c.newInstance();\n\n\t        Method[] methods = c.getMethods();\n\n\t        Method[] declaredMethods = c.getDeclaredMethods();\n\n\t        //获取methodClass类的add方法\n\n\t        Method method = c.getMethod(\"add\", int.class, int.class);\n\n\t        //getMethods()方法获取的所有方法\n\n\t        System.out.println(\"getMethods获取的方法：\");\n\n\t        for(Method m:methods)\n\n\t            System.out.println(m);\n\n\t        //getDeclaredMethods()方法获取的所有方法\n\n\t        System.out.println(\"getDeclaredMethods获取的方法：\");\n\n\t        for(Method m:declaredMethods)\n\n\t            System.out.println(m);\n\n\t    }\n\n    }\n\nclass methodClass {\n\n    public final int fuck = 3;\n\n    public int add(int a,int b) {\n\n        return a+b;\n\n    }\n\n    public int sub(int a,int b) {\n\n        return a+b;\n\n    }\n\n}\n\n |\n\n程序运行的结果如下:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n | \n\ngetMethods获取的方法：\n\npublic int org.ScZyhSoft.common.methodClass.add(int,int)\n\npublic int org.ScZyhSoft.common.methodClass.sub(int,int)\n\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\n\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\n\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\n\npublic boolean java.lang.Object.equals(java.lang.Object)\n\npublic java.lang.String java.lang.Object.toString()\n\npublic native int java.lang.Object.hashCode()\n\npublic final native java.lang.Class java.lang.Object.getClass()\n\npublic final native void java.lang.Object.notify()\n\npublic final native void java.lang.Object.notifyAll()\n\ngetDeclaredMethods获取的方法：\n\npublic int org.ScZyhSoft.common.methodClass.add(int,int)\n\npublic int org.ScZyhSoft.common.methodClass.sub(int,int)\n\n |\n\n可以看到，通过 `getMethods()` 获取的方法可以获取到父类的方法,比如 java.lang.Object 下定义的各个方法。\n\n## 5、获取构造器信息\n\n获取类构造器的用法与上述获取方法的用法类似。主要是通过Class类的getConstructor方法得到Constructor类的一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:\n\n| \n\n1\n\n | \n\npublic T newInstance(Object ... initargs)\n\n |\n\n此方法可以根据传入的参数来调用对应的Constructor创建对象实例。\n\n## 6、获取类的成员变量（字段）信息\n\n主要是这几个方法，在此不再赘述：\n\n*   `getFiled`：访问公有的成员变量\n*   `getDeclaredField`：所有已声明的成员变量，但不能得到其父类的成员变量\n\n`getFileds` 和 `getDeclaredFields` 方法用法同上（参照 Method）。\n\n## 7、调用方法\n\n当我们从类中获取了一个方法后，我们就可以用 `invoke()` 方法来调用这个方法。`invoke` 方法的原型为:\n\n| \n\n1\n\n2\n\n3\n\n | \n\npublic Object invoke(Object obj, Object... args)\n\n        throws IllegalAccessException, IllegalArgumentException,\n\n           InvocationTargetException\n\n |\n\n下面是一个实例：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n | \n\npublic class test1 {\n\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n        Class<?> klass = methodClass.class;\n\n        //创建methodClass的实例\n\n        Object obj = klass.newInstance();\n\n        //获取methodClass类的add方法\n\n        Method method = klass.getMethod(\"add\",int.class,int.class);\n\n        //调用method对应的方法 => add(1,4)\n\n        Object result = method.invoke(obj,1,4);\n\n        System.out.println(result);\n\n    }\n\n}\n\nclass methodClass {\n\n    public final int fuck = 3;\n\n    public int add(int a,int b) {\n\n        return a+b;\n\n    }\n\n    public int sub(int a,int b) {\n\n        return a+b;\n\n    }\n\n}\n\n |\n\n关于 `invoke` 方法的详解，后面我会专门写一篇文章来深入解析 invoke 的过程。\n\n## 8、利用反射创建数组\n\n数组在Java里是比较特殊的一种类型，它可以赋值给一个Object Reference。下面我们看一看利用反射创建数组的例子：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n | \n\npublic static void testArray() throws ClassNotFoundException {\n\n        Class<?> cls = Class.forName(\"java.lang.String\");\n\n        Object array = Array.newInstance(cls,25);\n\n        //往数组里添加内容\n\n        Array.set(array,0,\"hello\");\n\n        Array.set(array,1,\"Java\");\n\n        Array.set(array,2,\"fuck\");\n\n        Array.set(array,3,\"Scala\");\n\n        Array.set(array,4,\"Clojure\");\n\n        //获取某一项的内容\n\n        System.out.println(Array.get(array,3));\n\n    }\n\n |\n\n其中的Array类为java.lang.reflect.Array类。我们通过Array.newInstance()创建数组对象，它的原型是:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n | \n\npublic static Object newInstance(Class<?> componentType, int length)\n\n        throws NegativeArraySizeException {\n\n        return newArray(componentType, length);\n\n    }\n\n |\n\n而 `newArray` 方法是一个 native 方法，它在 HotSpot JVM 里的具体实现我们后边再研究，这里先把源码贴出来：\n\n| \n\n1\n\n2\n\n | \n\nprivate static native Object newArray(Class<?> componentType, int length)\n\n        throws NegativeArraySizeException;\n\n |\n\n源码目录：`openjdk\\hotspot\\src\\share\\vm\\runtime\\reflection.cpp`\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n | \n\narrayOop Reflection::reflect_new_array(oop element_mirror, jint length, TRAPS) {\n\n  if (element_mirror == NULL) {\n\n    THROW_0(vmSymbols::java_lang_NullPointerException());\n\n  }\n\n  if (length < 0) {\n\n    THROW_0(vmSymbols::java_lang_NegativeArraySizeException());\n\n  }\n\n  if (java_lang_Class::is_primitive(element_mirror)) {\n\n    Klass* tak = basic_type_mirror_to_arrayklass(element_mirror, CHECK_NULL);\n\n    return TypeArrayKlass::cast(tak)->allocate(length, THREAD);\n\n  } else {\n\n    Klass* k = java_lang_Class::as_Klass(element_mirror);\n\n    if (k->oop_is_array() && ArrayKlass::cast(k)->dimension() >= MAX_DIM) {\n\n      THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n\n    }\n\n    return oopFactory::new_objArray(k, length, THREAD);\n\n  }\n\n}\n\n |\n\n另外，Array 类的 `set` 和 `get` 方法都为 native 方法，在 HotSpot JVM 里分别对应 `Reflection::array_set` 和 `Reflection::array_get` 方法，这里就不详细解析了。\n\n# 四、反射的一些注意事项\n\n由于反射会额外消耗一定的系统资源，因此如果不需要动态地创建一个对象，那么就不需要用反射。\n\n另外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。"]],[18534,18534],[28184,28184]]],[1564060327527,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060327527,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564060269118,["GJX@GJXAIOU",[[-1,19818,"| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n | "]],[19818,19843],[19818,19818]]],[1564060301326,["GJX@GJXAIOU",[[-1,18534,"# 一、回顾：什么是反射？\n\n反射 (Reflection) 是 Java 的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。\n\nOracle 官方对反射的解释是：\n\n> Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\n> The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.\n\n简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。\n\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。\n\nJava 反射主要提供以下功能：\n\n*   在运行时判断任意一个对象所属的类；\n*   在运行时构造任意一个类的对象；\n*   在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n*   在运行时调用任意一个对象的方法\n\n重点：**是运行时而不是编译时**\n\n# 二、反射的主要用途\n\n很多人都认为反射在实际的 Java 开发应用中并不广泛，其实不然。当我们在使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射。\n\n**反射最重要的用途就是开发各种通用框架。**很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 Bean），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射，运行时动态加载需要加载的对象。\n\n举一个例子，在运用 Struts 2 框架的开发中我们一般会在 `struts.xml` 里去配置 `Action`，比如：\n\n\n\n<action name=\"login\"\n\n               class=\"org.ScZyhSoft.test.action.SimpleLoginAction\"\n\n               method=\"execute\">\n\n           <result>/shop/shop-index.jsp</result>\n\n           <result name=\"error\">login.jsp</result>\n\n       </action>\n\n |\n\n配置文件与 `Action` 建立了一种映射关系，当 View 层发出请求时，请求会被 `StrutsPrepareAndExecuteFilter` 拦截，然后 `StrutsPrepareAndExecuteFilter` 会去动态地创建 Action 实例。比如我们请求 `login.action`，那么 `StrutsPrepareAndExecuteFilter`就会去解析struts.xml文件，检索action中name为login的Action，并根据class属性创建SimpleLoginAction实例，并用invoke方法来调用execute方法，这个过程离不开反射。\n\n对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。而对于一般的开发者来说，不深入框架开发则用反射用的就会少一点，不过了解一下框架的底层机制有助于丰富自己的编程思想，也是很有益的。\n\n# 三、反射的基本运用\n\n上面我们提到了反射可以用于判断任意对象所属的类，获得 Class 对象，构造任意一个对象以及调用一个对象。这里我们介绍一下基本反射功能的使用和实现(反射相关的类一般都在 java.lang.relfect 包里)。\n\n## 1、获得 Class 对象\n\n方法有三种：\n\n(1) 使用 Class 类的 `forName` 静态方法:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n | \n\n public static Class<?> forName(String className)\n\n``` \n\n比如在 JDBC 开发中常用此方法加载数据库驱动:\n\n```java\n\n Class.forName(driver);\n\n |\n\n(2)直接获取某一个对象的 class，比如:\n\n| \n\n1\n\n2\n\n | \n\nClass<?> klass = int.class;\n\nClass<?> classInt = Integer.TYPE;\n\n |\n\n(3)调用某个对象的 `getClass()` 方法，比如:\n\n| \n\n1\n\n2\n\n | \n\nStringBuilder str = new StringBuilder(\"123\");\n\nClass<?> klass = str.getClass();\n\n |\n\n## 2、判断是否为某个类的实例\n\n一般地，我们用 `instanceof` 关键字来判断是否为某个类的实例。同时我们也可以借助反射中 Class 对象的 `isInstance()` 方法来判断是否为某个类的实例，它是一个 native 方法：\n\n| \n\n1\n\n | \n\npublic native boolean isInstance(Object obj);\n\n |\n\n## 3、创建实例\n\n通过反射来生成对象主要有两种方式。\n\n*   使用Class对象的newInstance()方法来创建Class对象对应类的实例。\n\n| \n\n1\n\n2\n\n | \n\nClass<?> c = String.class;\n\nObject str = c.newInstance();\n\n |\n\n*   先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这种方法可以用指定的构造器构造类的实例。\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n | \n\n//获取String所对应的Class对象\n\nClass<?> c = String.class;\n\n//获取String类带一个String参数的构造器\n\nConstructor constructor = c.getConstructor(String.class);\n\n//根据构造器创建实例\n\nObject obj = constructor.newInstance(\"23333\");\n\nSystem.out.println(obj);\n\n |\n\n## 4、获取方法\n\n获取某个Class对象的方法集合，主要有以下几个方法：\n\n*   `getDeclaredMethods` 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\n\n| \n\n1\n\n | \n\npublic Method[] getDeclaredMethods() throws SecurityException\n\n |\n\n*   `getMethods` 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。\n\n| \n\n1\n\n | \n\npublic Method[] getMethods() throws SecurityException\n\n |\n\n*   `getMethod` 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。\n\n| \n\n1\n\n | \n\npublic Method getMethod(String name, Class<?>... parameterTypes)\n\n |\n\n只是这样描述的话可能难以理解，我们用例子来理解这三个方法：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n | \n\npackage org.ScZyhSoft.common;\n\nimport java.lang.reflect.InvocationTargetException;\n\nimport java.lang.reflect.Method;\n\npublic class test1 {\n\n\tpublic static void test() throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n\t        Class<?> c = methodClass.class;\n\n\t        Object object = c.newInstance();\n\n\t        Method[] methods = c.getMethods();\n\n\t        Method[] declaredMethods = c.getDeclaredMethods();\n\n\t        //获取methodClass类的add方法\n\n\t        Method method = c.getMethod(\"add\", int.class, int.class);\n\n\t        //getMethods()方法获取的所有方法\n\n\t        System.out.println(\"getMethods获取的方法：\");\n\n\t        for(Method m:methods)\n\n\t            System.out.println(m);\n\n\t        //getDeclaredMethods()方法获取的所有方法\n\n\t        System.out.println(\"getDeclaredMethods获取的方法：\");\n\n\t        for(Method m:declaredMethods)\n\n\t            System.out.println(m);\n\n\t    }\n\n    }\n\nclass methodClass {\n\n    public final int fuck = 3;\n\n    public int add(int a,int b) {\n\n        return a+b;\n\n    }\n\n    public int sub(int a,int b) {\n\n        return a+b;\n\n    }\n\n}\n\n |\n\n程序运行的结果如下:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n | \n\ngetMethods获取的方法：\n\npublic int org.ScZyhSoft.common.methodClass.add(int,int)\n\npublic int org.ScZyhSoft.common.methodClass.sub(int,int)\n\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\n\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\n\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\n\npublic boolean java.lang.Object.equals(java.lang.Object)\n\npublic java.lang.String java.lang.Object.toString()\n\npublic native int java.lang.Object.hashCode()\n\npublic final native java.lang.Class java.lang.Object.getClass()\n\npublic final native void java.lang.Object.notify()\n\npublic final native void java.lang.Object.notifyAll()\n\ngetDeclaredMethods获取的方法：\n\npublic int org.ScZyhSoft.common.methodClass.add(int,int)\n\npublic int org.ScZyhSoft.common.methodClass.sub(int,int)\n\n |\n\n可以看到，通过 `getMethods()` 获取的方法可以获取到父类的方法,比如 java.lang.Object 下定义的各个方法。\n\n## 5、获取构造器信息\n\n获取类构造器的用法与上述获取方法的用法类似。主要是通过Class类的getConstructor方法得到Constructor类的一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:\n\n| \n\n1\n\n | \n\npublic T newInstance(Object ... initargs)\n\n |\n\n此方法可以根据传入的参数来调用对应的Constructor创建对象实例。\n\n## 6、获取类的成员变量（字段）信息\n\n主要是这几个方法，在此不再赘述：\n\n*   `getFiled`：访问公有的成员变量\n*   `getDeclaredField`：所有已声明的成员变量，但不能得到其父类的成员变量\n\n`getFileds` 和 `getDeclaredFields` 方法用法同上（参照 Method）。\n\n## 7、调用方法\n\n当我们从类中获取了一个方法后，我们就可以用 `invoke()` 方法来调用这个方法。`invoke` 方法的原型为:\n\n| \n\n1\n\n2\n\n3\n\n | \n\npublic Object invoke(Object obj, Object... args)\n\n        throws IllegalAccessException, IllegalArgumentException,\n\n           InvocationTargetException\n\n |\n\n下面是一个实例：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n | \n\npublic class test1 {\n\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n        Class<?> klass = methodClass.class;\n\n        //创建methodClass的实例\n\n        Object obj = klass.newInstance();\n\n        //获取methodClass类的add方法\n\n        Method method = klass.getMethod(\"add\",int.class,int.class);\n\n        //调用method对应的方法 => add(1,4)\n\n        Object result = method.invoke(obj,1,4);\n\n        System.out.println(result);\n\n    }\n\n}\n\nclass methodClass {\n\n    public final int fuck = 3;\n\n    public int add(int a,int b) {\n\n        return a+b;\n\n    }\n\n    public int sub(int a,int b) {\n\n        return a+b;\n\n    }\n\n}\n\n |\n\n关于 `invoke` 方法的详解，后面我会专门写一篇文章来深入解析 invoke 的过程。\n\n## 8、利用反射创建数组\n\n数组在Java里是比较特殊的一种类型，它可以赋值给一个Object Reference。下面我们看一看利用反射创建数组的例子：\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n | \n\npublic static void testArray() throws ClassNotFoundException {\n\n        Class<?> cls = Class.forName(\"java.lang.String\");\n\n        Object array = Array.newInstance(cls,25);\n\n        //往数组里添加内容\n\n        Array.set(array,0,\"hello\");\n\n        Array.set(array,1,\"Java\");\n\n        Array.set(array,2,\"fuck\");\n\n        Array.set(array,3,\"Scala\");\n\n        Array.set(array,4,\"Clojure\");\n\n        //获取某一项的内容\n\n        System.out.println(Array.get(array,3));\n\n    }\n\n |\n\n其中的Array类为java.lang.reflect.Array类。我们通过Array.newInstance()创建数组对象，它的原型是:\n\n| \n\n1\n\n2\n\n3\n\n4\n\n | \n\npublic static Object newInstance(Class<?> componentType, int length)\n\n        throws NegativeArraySizeException {\n\n        return newArray(componentType, length);\n\n    }\n\n |\n\n而 `newArray` 方法是一个 native 方法，它在 HotSpot JVM 里的具体实现我们后边再研究，这里先把源码贴出来：\n\n| \n\n1\n\n2\n\n | \n\nprivate static native Object newArray(Class<?> componentType, int length)\n\n        throws NegativeArraySizeException;\n\n |\n\n源码目录：`openjdk\\hotspot\\src\\share\\vm\\runtime\\reflection.cpp`\n\n| \n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n | \n\narrayOop Reflection::reflect_new_array(oop element_mirror, jint length, TRAPS) {\n\n  if (element_mirror == NULL) {\n\n    THROW_0(vmSymbols::java_lang_NullPointerException());\n\n  }\n\n  if (length < 0) {\n\n    THROW_0(vmSymbols::java_lang_NegativeArraySizeException());\n\n  }\n\n  if (java_lang_Class::is_primitive(element_mirror)) {\n\n    Klass* tak = basic_type_mirror_to_arrayklass(element_mirror, CHECK_NULL);\n\n    return TypeArrayKlass::cast(tak)->allocate(length, THREAD);\n\n  } else {\n\n    Klass* k = java_lang_Class::as_Klass(element_mirror);\n\n    if (k->oop_is_array() && ArrayKlass::cast(k)->dimension() >= MAX_DIM) {\n\n      THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n\n    }\n\n    return oopFactory::new_objArray(k, length, THREAD);\n\n  }\n\n}\n\n |\n\n另外，Array 类的 `set` 和 `get` 方法都为 native 方法，在 HotSpot JVM 里分别对应 `Reflection::array_set` 和 `Reflection::array_get` 方法，这里就不详细解析了。\n\n# 四、反射的一些注意事项\n\n由于反射会额外消耗一定的系统资源，因此如果不需要动态地创建一个对象，那么就不需要用反射。\n\n另外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。"]],[18534,28159],[18534,18534]]],[1564060627529,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060627529,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564060567628,["GJX@GJXAIOU",[[-1,18522,"## 反射的基本用途"]],[18522,18532],[18522,18522]]],[1564060987530,[null,[[-1,120," "],[1,180,"在"],[-1,182,"在"],[1,186,"态"],[-1,188,"态"],[1,357,"\n"],[-1,359,"\n"],[1,388,"象"],[-1,390,"象"],[-1,453," "],[1,454,"\n"],[1,569,"\n"],[-1,614," "],[-1,649," "],[1,650,"#"],[1,670,"i"],[-1,675,"i详）"],[1,678,"详解"],[1,716,"\n"],[-1,719,"]"],[1,720,"l"],[1,729,"]"],[-1,763,"`"],[-1,769,"`"],[1,770,"s"],[-1,837,"`"],[1,838,"\n"],[-1,842,"`"],[1,843,"s"],[-1,852,"`"],[1,853,"。"],[-1,857,"`"],[1,858,"s"],[-1,888,"`"],[1,889,"的"],[-1,899," "],[1,900,"s"],[1,975,"\n"],[-1,1024,"\n"]],[120,120],[1024,1024]]],[1564060987530,[null,[[1,120," "],[-1,179,"在"],[1,182,"在"],[-1,185,"态"],[1,188,"态"],[-1,356,"\n"],[1,359,"\n"],[-1,387,"象"],[1,390,"象"],[1,452," "],[-1,452,"\n"],[-1,568,"\n"],[1,614," "],[1,648," "],[-1,648,"#"],[-1,669,"i"],[1,675,"i详）"],[-1,675,"详解"],[-1,715,"\n"],[1,719,"]"],[-1,719,"l"],[-1,729,"]"],[1,764,"`"],[1,769,"`"],[-1,769,"s"],[1,837,"`"],[-1,837,"\n"],[1,842,"`"],[-1,842,"s"],[1,852,"`"],[-1,852,"。"],[1,857,"`"],[-1,857,"s"],[1,888,"`"],[-1,888,"的"],[1,899," "],[-1,899,"s"],[-1,975,"\n"],[1,1025,"\n"]],[1024,1024],[120,120]]],[1564060950757,["GJX@GJXAIOU",[[1,177,"!["],[1,178,"]($resource/)"]],[177,178],[182,192]]],[1564060956288,["GJX@GJXAIOU",[[-1,177,"![制]($resource/)"]],[177,193],[177,177]]],[1564061107637,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,768,"`"],[1,769,"s"],[-1,836,"`"],[1,837,"\n"],[-1,841,"`"],[1,842,"s"],[-1,851,"`"],[1,852,"。"],[-1,856,"`"],[1,857,"s"],[-1,887,"`"],[1,888,"的"],[-1,898," "],[1,899,"s"],[1,974,"\n"],[-1,1023,"\n"]],[120,120],[1023,1023]]],[1564061107637,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,768,"`"],[-1,768,"s"],[1,836,"`"],[-1,836,"\n"],[1,841,"`"],[-1,841,"s"],[1,851,"`"],[-1,851,"。"],[1,856,"`"],[-1,856,"s"],[1,887,"`"],[-1,887,"的"],[1,898," "],[-1,898,"s"],[-1,974,"\n"],[1,1024,"\n"]],[1023,1023],[120,120]]],[1564061086894,["GJX@GJXAIOU",[[-1,179,"**"],[-1,185,"**"]],[181,185],[179,183]]],[1564061088962,["GJX@GJXAIOU",[[1,179,"=="],[1,183,"=="]],[179,183],[179,187]]],[1564061227633,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,768,"`"],[1,769,"s"],[-1,836,"`"],[1,837,"\n"],[-1,841,"`"],[1,842,"s"],[-1,851,"`"],[1,852,"。"],[-1,856,"`"],[1,857,"s"],[-1,887,"`"],[1,888,"的"],[-1,898," "],[1,899,"s"],[1,974,"\n"],[-1,1023,"\n"]],[120,120],[1023,1023]]],[1564061227633,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,768,"`"],[-1,768,"s"],[1,836,"`"],[-1,836,"\n"],[1,841,"`"],[-1,841,"s"],[1,851,"`"],[-1,851,"。"],[1,856,"`"],[-1,856,"s"],[1,887,"`"],[-1,887,"的"],[1,898," "],[-1,898,"s"],[-1,974,"\n"],[1,1024,"\n"]],[1023,1023],[120,120]]],[1564061225565,["GJX@GJXAIOU",[[1,764,"**"],[1,797,"**"]],[764,797],[764,801]]],[1564061287638,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,840,"`"],[1,841,"\n"],[-1,845,"`"],[1,846,"s"],[-1,855,"`"],[1,856,"。"],[-1,860,"`"],[1,861,"s"],[-1,891,"`"],[1,892,"的"],[-1,902," "],[1,903,"s"],[1,978,"\n"],[-1,1027,"\n"]],[120,120],[1027,1027]]],[1564061287638,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,840,"`"],[-1,840,"\n"],[1,845,"`"],[-1,845,"s"],[1,855,"`"],[-1,855,"。"],[1,860,"`"],[-1,860,"s"],[1,891,"`"],[-1,891,"的"],[1,902," "],[-1,902,"s"],[-1,978,"\n"],[1,1028,"\n"]],[1027,1027],[120,120]]],[1564061255335,["GJX@GJXAIOU",[[1,815,"，"]],[815,815],[816,816]]],[1564061271461,["GJX@GJXAIOU",[[1,842,"**"],[1,856,"**"]],[842,856],[842,860]]],[1564061347634,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061347634,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061341290,["GJX@GJXAIOU",[[1,1081,"=="],[1,1095,"=="]],[1081,1095],[1081,1099]]],[1564061467639,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061467639,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061413291,["GJX@GJXAIOU",[[1,1128," 、、"]],[1128,1128],[1131,1131]]],[1564061413908,["GJX@GJXAIOU",[[-1,1129,"、、"]],[1131,1131],[1129,1129]]],[1564061414513,["GJX@GJXAIOU",[[1,1129,"、、"]],[1129,1129],[1131,1131]]],[1564061415356,["GJX@GJXAIOU",[[-1,1129,"、、"]],[1131,1131],[1129,1129]]],[1564061455659,["GJX@GJXAIOU",[[1,1129,"//返回一个对象的运行时类"]],[1129,1129],[1142,1142]]],[1564061527638,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061527638,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061470396,["GJX@GJXAIOU",[[-1,1294,"![Object中的getClass方法]($resource/Object%E4%B8%AD%E7%9A%84getClass%E6%96%B9%E6%B3%95.jpg)"]],[1294,1381],[1294,1294]]],[1564061471004,["GJX@GJXAIOU",[[-1,1295,"\n"]],[1294,1294],[1293,1293]]],[1564061471471,["GJX@GJXAIOU",[[-1,1294,"\n"]],[1293,1293],[1292,1292]]],[1564061473631,["GJX@GJXAIOU",[[1,1294,"- "]],[1294,1294],[1296,1296]]],[1564061492927,["GJX@GJXAIOU",[[-1,1343,"/**\n * 获取Class对象的三种方式\n * 1 Object ——> getClass();\n * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性\n * 3 通过Class类的静态方法：forName（String  className）(常用)\n *\n */"]],[1343,1487],[1343,1343]]],[1564061493357,["GJX@GJXAIOU",[[-1,1343,"\n"]],[1343,1343],[1342,1342]]],[1564061494877,["GJX@GJXAIOU",[[1,1343,"\n"]],[1342,1342],[1343,1343]]],[1564061587643,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061587643,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061530566,["GJX@GJXAIOU",[[1,1516,"**"],[1,1560,"**"]],[1516,1560],[1516,1564]]],[1564061540444,["GJX@GJXAIOU",[[-1,1562,"**"]],[1564,1564],[1562,1562]]],[1564061542423,["GJX@GJXAIOU",[[-1,1516,"**"]],[1516,1518],[1516,1516]]],[1564061543757,["GJX@GJXAIOU",[[1,1475,"\n        "]],[1475,1475],[1484,1484]]],[1564061545799,["GJX@GJXAIOU",[[1,1525,"\n        "]],[1516,1516],[1525,1525]]],[1564061547374,["GJX@GJXAIOU",[[1,1628,"\n"]],[1627,1627],[1628,1628]]],[1564061581443,["GJX@GJXAIOU",[[1,1800,"☆☆"]],[1800,1800],[1802,1802]]],[1564061647657,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061647657,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061593185,["GJX@GJXAIOU",[[1,1802,"☆"]],[1802,1802],[1803,1803]]],[1564061598084,["GJX@GJXAIOU",[[1,1639,"☆☆☆"]],[1639,1639],[1642,1642]]],[1564061601085,["GJX@GJXAIOU",[[1,1421,"☆☆☆"]],[1421,1421],[1424,1424]]],[1564061634692,["GJX@GJXAIOU",[[-1,1526,"  "]],[1522,1522],[1520,1520]]],[1564061635205,["GJX@GJXAIOU",[[-1,1519,"\n"]],[1520,1520],[1519,1519]]],[1564061827649,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061827649,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061787723,["GJX@GJXAIOU",[[1,2286,"共有六个构造方法用于测试"]],[2286,2286],[2298,2298]]],[1564061793424,["GJX@GJXAIOU",[[-1,3029,"共有6个构造方法；\n"]],[3028,3038],[3028,3028]]],[1564061793878,["GJX@GJXAIOU",[[-1,3029,"\n"]],[3028,3028],[3027,3027]]],[1564061796011,["GJX@GJXAIOU",[[1,3029,"- "]],[3029,3029],[3031,3031]]],[1564061800000,["GJX@GJXAIOU",[[1,2277,"- "]],[2277,2277],[2279,2279]]],[1564061825886,["GJX@GJXAIOU",[[-1,5448,"**调用方法：**\n\n- 获取构造方法：\n\n  1).批量的方法：\npublic Constructor[] getConstructors()：所有”公有的”构造方法\n            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n  2).获取单个的方法，并调用：\npublic Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法：\npublic Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有；\n\n- 调用构造方法：\n\nConstructor–>newInstance(Object… initargs) \n\n2、newInstance是 Constructor类的方法（管理构造函数的类）\napi的解释为:`newInstance(Object… initargs)`\n      使用此 `Constructor` 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。\n它的返回值是T类型，所以newInstance是创建了一个构造方法的声明类的新实例对象。并为之调用"]],[5448,6059],[5448,5448]]],[1564061887650,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061887650,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061831526,["GJX@GJXAIOU",[[1,2277,"\n"]],[2276,2276],[2277,2277]]],[1564061831774,["GJX@GJXAIOU",[[1,2278,"\n"]],[2277,2277],[2278,2278]]],[1564061831922,["GJX@GJXAIOU",[[1,2279,"\n"]],[2278,2278],[2279,2279]]],[1564061833462,["GJX@GJXAIOU",[[1,2277,"**调用方法：**\n\n- 获取构造方法：\n\n  1).批量的方法：\npublic Constructor[] getConstructors()：所有”公有的”构造方法\n            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n  2).获取单个的方法，并调用：\npublic Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法：\npublic Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有；\n\n- 调用构造方法：\n\nConstructor–>newInstance(Object… initargs) \n\n2、newInstance是 Constructor类的方法（管理构造函数的类）\napi的解释为:`newInstance(Object… initargs)`\n      使用此 `Constructor` 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。\n它的返回值是T类型，所以newInstance是创建了一个构造方法的声明类的新实例对象。并为之调用"]],[2277,2277],[2888,2888]]],[1564061837736,["GJX@GJXAIOU",[[-1,2277,"**调用方法：**"]],[2277,2286],[2277,2277]]],[1564061838829,["GJX@GJXAIOU",[[-1,2278,"\n"]],[2278,2278],[2277,2277]]],[1564061839702,["GJX@GJXAIOU",[[-1,2277,"\n"]],[2277,2277],[2276,2276]]],[1564061843326,["GJX@GJXAIOU",[[1,2277,"### "]],[2277,2279],[2290,2290]]],[1564061846886,["GJX@GJXAIOU",[[-1,2281,"- "]],[2283,2283],[2281,2281]]],[1564061863048,["GJX@GJXAIOU",[[-1,2259,"2"]],[2260,2260],[2259,2259]]],[1564061865920,["GJX@GJXAIOU",[[1,2259,"1."]],[2259,2259],[2261,2261]]],[1564061867037,["GJX@GJXAIOU",[[-1,2260,"."]],[2261,2261],[2260,2260]]],[1564061870279,["GJX@GJXAIOU",[[1,2281,"1 "]],[2281,2281],[2282,2282]]],[1564061870443,["GJX@GJXAIOU",[[1,2282,"."]],[2282,2282],[2283,2283]]],[1564061874283,["GJX@GJXAIOU",[[-1,2259,"1、"],[1,2261,"（"]],[2259,2259],[2260,2260]]],[1564061874376,["GJX@GJXAIOU",[[1,2260,"）"]],[2260,2260],[2261,2261]]],[1564061876073,["GJX@GJXAIOU",[[1,2260,"一"]],[2260,2260],[2261,2261]]],[1564061884520,["GJX@GJXAIOU",[[-1,2357,"            "]],[2357,2369],[2357,2357]]],[1564061947656,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564061947656,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564061890449,["GJX@GJXAIOU",[[-1,2294,"  "],[1,2296,"-"]],[2294,2294],[2295,2295]]],[1564061891168,["GJX@GJXAIOU",[[1,2295," "]],[2295,2295],[2296,2296]]],[1564061893444,["GJX@GJXAIOU",[[1,2431,"-"]],[2431,2431],[2432,2432]]],[1564061895294,["GJX@GJXAIOU",[[-1,2433," "]],[2434,2434],[2433,2433]]],[1564061901832,["GJX@GJXAIOU",[[1,2617,"### "]],[2617,2619],[2630,2630]]],[1564061906200,["GJX@GJXAIOU",[[-1,2621,"-"],[1,2622,"2"]],[2621,2622],[2622,2622]]],[1564061906384,["GJX@GJXAIOU",[[1,2622,"."]],[2622,2622],[2623,2623]]],[1564061910973,["GJX@GJXAIOU",[[-1,2632,"\n"]],[2632,2632],[2631,2631]]],[1564061942573,["GJX@GJXAIOU",[[-1,3703,"/*\n * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；\n * \n * 1.获取构造方法：\n *      1).批量的方法：\n *          public Constructor[] getConstructors()：所有\"公有的\"构造方法\n            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n *      2).获取单个的方法，并调用：\n *          public Constructor getConstructor(Class... parameterTypes):获取单个的\"公有的\"构造方法：\n *          public Constructor getDeclaredConstructor(Class... parameterTypes):获取\"某个构造方法\"可以是私有的，或受保护、默认、公有；\n *      \n *          调用构造方法：\n *          Constructor-->newInstance(Object... initargs)\n */"]],[3703,4243],[3703,3703]]],[1564061945422,["GJX@GJXAIOU",[[-1,3663,"\n"]],[3663,3663],[3662,3662]]],[1564061947396,["GJX@GJXAIOU",[[-1,3702,"\n"]],[3702,3702],[3701,3701]]],[1564062127654,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062127654,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062076279,["GJX@GJXAIOU",[[1,2327,"  "]],[2326,2326],[2328,2328]]],[1564062077114,["GJX@GJXAIOU",[[1,2380,"  "]],[2380,2380],[2382,2382]]],[1564062187655,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062187655,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062143962,["GJX@GJXAIOU",[[1,4167,"Constructor【】"]],[4167,4167],[4180,4180]]],[1564062144806,["GJX@GJXAIOU",[[-1,4178,"【】"]],[4180,4180],[4178,4178]]],[1564062146786,["GJX@GJXAIOU",[[1,4178,"[] "]],[4178,4178],[4181,4181]]],[1564062150184,["GJX@GJXAIOU",[[1,4189,"2"]],[4189,4189],[4190,4190]]],[1564062152587,["GJX@GJXAIOU",[[1,4262,"2"]],[4262,4262],[4263,4263]]],[1564062159966,["GJX@GJXAIOU",[[-1,4166," "]],[4167,4167],[4166,4166]]],[1564062163638,["GJX@GJXAIOU",[[-1,4189," "]],[4190,4190],[4189,4189]]],[1564062166081,["GJX@GJXAIOU",[[-1,4190," "]],[4191,4191],[4190,4190]]],[1564062307659,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062307659,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062276408,["GJX@GJXAIOU",[[-1,2526,"public Constructor "]],[2526,2545],[2526,2526]]],[1564062278614,["GJX@GJXAIOU",[[-1,2470,"r"]],[2471,2471],[2470,2470]]],[1564062281256,["GJX@GJXAIOU",[[-1,2453,"public Constructo "]],[2454,2471],[2453,2453]]],[1564062283854,["GJX@GJXAIOU",[[-1,2598,"Constructor–>"]],[2598,2611],[2598,2598]]],[1564062290806,["GJX@GJXAIOU",[[-1,2630,"2、"]],[2630,2632],[2630,2630]]],[1564062291295,["GJX@GJXAIOU",[[-1,2629,"\n"]],[2630,2630],[2629,2629]]],[1564062294359,["GJX@GJXAIOU",[[1,2453,"`"]],[2453,2453],[2454,2454]]],[1564062296080,["GJX@GJXAIOU",[[1,2491,"`"]],[2491,2491],[2492,2492]]],[1564062298850,["GJX@GJXAIOU",[[1,2491,";"]],[2491,2491],[2492,2492]]],[1564062302483,["GJX@GJXAIOU",[[1,2555,";`"]],[2555,2555],[2557,2557]]],[1564062305192,["GJX@GJXAIOU",[[1,2510,"`"]],[2510,2510],[2511,2511]]],[1564062367657,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062367657,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062307944,["GJX@GJXAIOU",[[1,2604,"`"]],[2604,2604],[2605,2605]]],[1564062310130,["GJX@GJXAIOU",[[1,2635,";`"]],[2635,2635],[2637,2637]]],[1564062314790,["GJX@GJXAIOU",[[-1,2634," "]],[2635,2635],[2634,2634]]],[1564062326393,["GJX@GJXAIOU",[[-1,2716,"      "]],[2716,2722],[2716,2716]]],[1564062326742,["GJX@GJXAIOU",[[-1,2715,"\n"]],[2716,2716],[2715,2715]]],[1564062328368,["GJX@GJXAIOU",[[1,2715,"."]],[2715,2715],[2716,2716]]],[1564062329902,["GJX@GJXAIOU",[[-1,2715,"."]],[2716,2716],[2715,2715]]],[1564062330680,["GJX@GJXAIOU",[[1,2715,"。"]],[2715,2715],[2716,2716]]],[1564062359646,["GJX@GJXAIOU",[[-1,5884,"12345678910111213141516171819"]],[5884,5913],[5884,5884]]],[1564062364965,["GJX@GJXAIOU",[[-1,5443,"12345678910111213141516"]],[5443,5466],[5443,5443]]],[1564062547663,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062547664,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062528791,["GJX@GJXAIOU",[[-1,4806,"调用"]],[4808,4808],[4806,4806]]],[1564062530770,["GJX@GJXAIOU",[[1,4806,"私有化"]],[4806,4806],[4809,4809]]],[1564062539666,["GJX@GJXAIOU",[[1,4813,"调用前要先设置权限"]],[4813,4813],[4822,4822]]],[1564062607663,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062607663,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062548551,["GJX@GJXAIOU",[[-1,4684,"*"]],[4683,4683],[4682,4682]]],[1564062554846,["GJX@GJXAIOU",[[-1,4916,"\n"]],[4916,4916],[4915,4915]]],[1564062556654,["GJX@GJXAIOU",[[-1,4913,"\n"]],[4913,4913],[4912,4912]]],[1564062582833,["GJX@GJXAIOU",[[-1,5461,"3、"]],[5461,5462],[5461,5461]]],[1564062583795,["GJX@GJXAIOU",[[1,5461,"（）"]],[5461,5461],[5463,5463]]],[1564062585181,["GJX@GJXAIOU",[[1,5462,"二"]],[5462,5462],[5463,5463]]],[1564062667667,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062667667,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062623477,["GJX@GJXAIOU",[[-1,5943,"/*\n * 获取成员变量并调用：\n * \n * 1.批量的\n *      1).Field[] getFields():获取所有的\"公有字段\"\n *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；\n * 2.获取单个的：\n *      1).public Field getField(String fieldName):获取某个\"公有的\"字段；\n *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n * \n *   设置字段的值：\n *      Field --> public void set(Object obj,Object value):\n *                  参数说明：\n *                  1.obj:要设置的字段所在的对象；\n *                  2.value:要为字段设置的值；\n * \n */"]],[5943,6416],[5943,5943]]],[1564062787670,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062787670,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062737846,["GJX@GJXAIOU",[[1,5475,"\n"]],[5473,5473],[5474,5474]]],[1564062738128,["GJX@GJXAIOU",[[1,5476,"\n"]],[5474,5474],[5475,5475]]],[1564062739358,["GJX@GJXAIOU",[[1,5475,"* 获取成员变量并调用： *\n* 1.批量的 *      1).Field[] getFields():获取所有的\"公有字段\" *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有； * 2.获取单个的： *      1).public Field getField(String fieldName):获取某个\"公有的\"字段； *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n*\n*   设置字段的值： *      Field --> public void set(Object obj,Object value):\n*                  参数说明： *                  1.obj:要设置的字段所在的对象； *                  2.value:要为字段设置的值； *"]],[5475,5475],[5923,5923]]],[1564062742099,["GJX@GJXAIOU",[[-1,5475,"* 获取成员变量并调用： *\n* 1.批量的 *      1).Field[] getFields():获取所有的\"公有字段\" *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有； * 2.获取单个的： *      1).public Field getField(String fieldName):获取某个\"公有的\"字段； *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n*\n*   设置字段的值： *      Field --> public void set(Object obj,Object value):\n*                  参数说明： *                  1.obj:要设置的字段所在的对象； *                  2.value:要为字段设置的值； *"]],[5923,5923],[5475,5475]]],[1564062744805,["GJX@GJXAIOU",[[1,5476," * 获取成员变量并调用：\n *\n * 1.批量的\n *      1).Field[] getFields():获取所有的\"公有字段\"\n *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；\n * 2.获取单个的：\n *      1).public Field getField(String fieldName):获取某个\"公有的\"字段；\n *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n *\n *   设置字段的值：\n *      Field --> public void set(Object obj,Object value):\n *                  参数说明：\n *                  1.obj:要设置的字段所在的对象；\n *                  2.value:要为字段设置的值；\n *\n"]],[5475,5475],[5939,5939]]],[1564062751439,["GJX@GJXAIOU",[[-1,5479,"获取成员变量并调用：\n *\n * "]],[5475,5492],[5475,5475]]],[1564062753309,["GJX@GJXAIOU",[[-1,5486,"*"]],[5486,5487],[5486,5486]]],[1564062754175,["GJX@GJXAIOU",[[-1,5528,"*"]],[5529,5529],[5528,5528]]],[1564062755239,["GJX@GJXAIOU",[[-1,5590,"*"]],[5590,5591],[5590,5590]]],[1564062755815,["GJX@GJXAIOU",[[-1,5601,"*"]],[5602,5602],[5601,5601]]],[1564062756333,["GJX@GJXAIOU",[[-1,5664,"*"]],[5665,5665],[5664,5664]]],[1564062758004,["GJX@GJXAIOU",[[-1,5736," *"]],[5736,5738],[5736,5736]]],[1564062758637,["GJX@GJXAIOU",[[-1,5741," "]],[5741,5741],[5740,5740]]],[1564062759525,["GJX@GJXAIOU",[[-1,5750,"*  "]],[5749,5752],[5749,5749]]],[1564062760332,["GJX@GJXAIOU",[[-1,5738,"*"]],[5738,5739],[5738,5738]]],[1564062761438,["GJX@GJXAIOU",[[-1,5806,"* "]],[5808,5808],[5806,5806]]],[1564062762660,["GJX@GJXAIOU",[[-1,5830,"* "]],[5832,5832],[5830,5830]]],[1564062763742,["GJX@GJXAIOU",[[-1,5867,"* "]],[5869,5869],[5867,5867]]],[1564062764284,["GJX@GJXAIOU",[[-1,5903,"*"]],[5904,5904],[5903,5903]]],[1564062766252,["GJX@GJXAIOU",[[-1,5476," * "]],[5476,5479],[5476,5476]]],[1564062767671,["GJX@GJXAIOU",[[1,5476,"- "]],[5476,5476],[5478,5478]]],[1564062770394,["GJX@GJXAIOU",[[-1,5588,"  "],[1,5590,"-"]],[5588,5588],[5589,5589]]],[1564062770521,["GJX@GJXAIOU",[[1,5589," "]],[5589,5589],[5590,5590]]],[1564062780351,["GJX@GJXAIOU",[[-1,5736,"   "],[1,5739,"-"]],[5736,5736],[5737,5737]]],[1564062780520,["GJX@GJXAIOU",[[1,5737," "]],[5737,5737],[5738,5738]]],[1564062785885,["GJX@GJXAIOU",[[-1,5475,"\n"]],[5475,5475],[5474,5474]]],[1564062907672,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062907672,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062875519,["GJX@GJXAIOU",[[-1,8141,"***********"]],[8141,8152],[8141,8141]]],[1564062879670,["GJX@GJXAIOU",[[-1,8354,"*********************"]],[8352,8373],[8352,8352]]],[1564062881425,["GJX@GJXAIOU",[[-1,8461,"************"]],[8458,8470],[8458,8458]]],[1564062885510,["GJX@GJXAIOU",[[-1,7589,"*****"]],[7585,7590],[7585,7585]]],[1564062887910,["GJX@GJXAIOU",[[-1,7606,"****************************"]],[7604,7632],[7604,7604]]],[1564062890863,["GJX@GJXAIOU",[[-1,7585,"****"]],[7587,7587],[7583,7583]]],[1564062892101,["GJX@GJXAIOU",[[-1,7600,"**"]],[7600,7600],[7598,7598]]],[1564062895343,["GJX@GJXAIOU",[[-1,7845,"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556"]],[7845,7948],[7845,7845]]],[1564062895951,["GJX@GJXAIOU",[[-1,7845,"\n"]],[7845,7845],[7844,7844]]],[1564062899446,["GJX@GJXAIOU",[[-1,7073,"*******"]],[7069,7076],[7069,7069]]],[1564062903285,["GJX@GJXAIOU",[[-1,7087,"********************************"]],[7086,7117],[7085,7085]]],[1564062906446,["GJX@GJXAIOU",[[-1,6836,"*******"]],[6833,6840],[6833,6833]]],[1564062967672,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564062967672,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062908198,["GJX@GJXAIOU",[[-1,6863,"**************"]],[6862,6876],[6862,6862]]],[1564062910902,["GJX@GJXAIOU",[[-1,6612,"*******"]],[6608,6615],[6608,6608]]],[1564062912982,["GJX@GJXAIOU",[[-1,6623,"******************"]],[6621,6639],[6621,6621]]],[1564062923615,["GJX@GJXAIOU",[[-1,6238,"                "]],[6238,6254],[6238,6238]]],[1564062924134,["GJX@GJXAIOU",[[-1,6237,"\n"]],[6238,6238],[6237,6237]]],[1564062925808,["GJX@GJXAIOU",[[1,6237," "]],[6237,6237],[6238,6238]]],[1564062946198,["GJX@GJXAIOU",[[-1,6198," "]],[6199,6199],[6198,6198]]],[1564062947606,["GJX@GJXAIOU",[[-1,6202," "]],[6203,6203],[6202,6202]]],[1564062949816,["GJX@GJXAIOU",[[-1,6262," "]],[6263,6263],[6262,6262]]],[1564062952856,["GJX@GJXAIOU",[[1,6262," "]],[6262,6262],[6263,6263]]],[1564062956053,["GJX@GJXAIOU",[[-1,6235," "]],[6236,6236],[6235,6235]]],[1564062957429,["GJX@GJXAIOU",[[-1,6231," "]],[6232,6232],[6231,6231]]],[1564062958949,["GJX@GJXAIOU",[[-1,6214," "]],[6215,6215],[6214,6214]]],[1564062960438,["GJX@GJXAIOU",[[-1,6217," "]],[6218,6218],[6217,6217]]],[1564063027670,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063027670,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564062969422,["GJX@GJXAIOU",[[-1,6258," "]],[6259,6259],[6258,6258]]],[1564062970893,["GJX@GJXAIOU",[[-1,6249," "]],[6250,6250],[6249,6249]]],[1564062982158,["GJX@GJXAIOU",[[-1,6188," "]],[6189,6189],[6188,6188]]],[1564062994598,["GJX@GJXAIOU",[[-1,6220," "]],[6221,6221],[6220,6220]]],[1564063025606,["GJX@GJXAIOU",[[1,7285,"\n            "]],[7285,7285],[7298,7298]]],[1564063087672,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063087672,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063033113,["GJX@GJXAIOU",[[-1,7297," "]],[7298,7298],[7297,7297]]],[1564063042501,["GJX@GJXAIOU",[[1,7189,"\n            】"]],[7189,7189],[7203,7203]]],[1564063043566,["GJX@GJXAIOU",[[-1,7201," 】"]],[7203,7203],[7201,7201]]],[1564063049342,["GJX@GJXAIOU",[[-1,7148," "]],[7149,7149],[7148,7148]]],[1564063054414,["GJX@GJXAIOU",[[-1,7146," "]],[7147,7147],[7146,7146]]],[1564063327683,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063327683,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063294101,["GJX@GJXAIOU",[[-1,9087,"123456789101112131415161718"]],[9087,9114],[9087,9087]]],[1564063387680,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063387680,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063353573,["GJX@GJXAIOU",[[-1,8320,"123456789101112"]],[8320,8335],[8320,8320]]],[1564063364504,["GJX@GJXAIOU",[[-1,8331,"\n"]],[8331,8331],[8330,8330]]],[1564063366095,["GJX@GJXAIOU",[[-1,8330,"\n"]],[8330,8330],[8330,8330]]],[1564063368170,["GJX@GJXAIOU",[[1,8330,"，"]],[8330,8330],[8331,8331]]],[1564063447684,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063447684,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063397149,["GJX@GJXAIOU",[[-1,8546,"4、"]],[8546,8547],[8546,8546]]],[1564063398156,["GJX@GJXAIOU",[[1,8546,"（）"]],[8546,8546],[8548,8548]]],[1564063400433,["GJX@GJXAIOU",[[1,8547,"三"]],[8547,8547],[8548,8548]]],[1564063410309,["GJX@GJXAIOU",[[-1,9149,"/*\n * 获取成员方法并调用：\n * \n * 1.批量的：\n *      public Method[] getMethods():获取所有\"公有方法\"；（包含了父类的方法也包含Object类）\n *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)\n * 2.获取单个的：\n *      public Method getMethod(String name,Class<?>... parameterTypes):\n *                  参数：\n *                      name : 方法名；\n *                      Class ... : 形参的Class类型对象\n *      public Method getDeclaredMethod(String name,Class<?>... parameterTypes)\n * \n *   调用方法：\n *      Method --> public Object invoke(Object obj,Object... args):\n *                  参数说明：\n *                  obj : 要调用方法的对象；\n *                  args:调用方式时所传递的实参；\n\n):\n */"]],[9149,9782],[9149,9149]]],[1564063413774,["GJX@GJXAIOU",[[1,8560,"\n"]],[8559,8559],[8560,8560]]],[1564063413903,["GJX@GJXAIOU",[[1,8561,"\n"]],[8560,8560],[8561,8561]]],[1564063415476,["GJX@GJXAIOU",[[1,8560,"/*\n * 获取成员方法并调用：\n * \n * 1.批量的：\n *      public Method[] getMethods():获取所有\"公有方法\"；（包含了父类的方法也包含Object类）\n *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)\n * 2.获取单个的：\n *      public Method getMethod(String name,Class<?>... parameterTypes):\n *                  参数：\n *                      name : 方法名；\n *                      Class ... : 形参的Class类型对象\n *      public Method getDeclaredMethod(String name,Class<?>... parameterTypes)\n * \n *   调用方法：\n *      Method --> public Object invoke(Object obj,Object... args):\n *                  参数说明：\n *                  obj : 要调用方法的对象；\n *                  args:调用方式时所传递的实参；\n\n):\n */"]],[8560,8560],[9193,9193]]],[1564063420253,["GJX@GJXAIOU",[[-1,8560,"/*\n *"]],[8560,8565],[8560,8560]]],[1564063423701,["GJX@GJXAIOU",[[-1,8561,"获取成员方法并调用："]],[8571,8571],[8561,8561]]],[1564063424519,["GJX@GJXAIOU",[[-1,8564," "]],[8565,8565],[8564,8564]]],[1564063425565,["GJX@GJXAIOU",[[-1,8566,"* "]],[8565,8567],[8565,8565]]],[1564063426205,["GJX@GJXAIOU",[[-1,8563,"*"]],[8564,8564],[8563,8563]]],[1564063427254,["GJX@GJXAIOU",[[-1,8573,"* "]],[8572,8574],[8572,8572]]],[1564063428316,["GJX@GJXAIOU",[[-1,8640,"* "]],[8639,8641],[8639,8639]]],[1564063429356,["GJX@GJXAIOU",[[-1,8707,"* "]],[8706,8708],[8706,8706]]],[1564063431174,["GJX@GJXAIOU",[[-1,8717,"* "]],[8717,8719],[8717,8717]]],[1564063431893,["GJX@GJXAIOU",[[-1,8788,"*"]],[8789,8789],[8788,8788]]],[1564063432364,["GJX@GJXAIOU",[[-1,8805," "]],[8790,8790],[8789,8789]]],[1564063433159,["GJX@GJXAIOU",[[-1,8810,"*"]],[8811,8811],[8810,8810]]],[1564063433917,["GJX@GJXAIOU",[[-1,8845,"*"]],[8846,8846],[8845,8845]]],[1564063434481,["GJX@GJXAIOU",[[-1,8893,"*"]],[8894,8894],[8893,8893]]],[1564063435574,["GJX@GJXAIOU",[[-1,8972,"*"]],[8973,8973],[8972,8972]]],[1564063436078,["GJX@GJXAIOU",[[-1,8975,"*"]],[8976,8976],[8975,8975]]],[1564063436589,["GJX@GJXAIOU",[[-1,8985,"*"]],[8986,8986],[8985,8985]]],[1564063437439,["GJX@GJXAIOU",[[-1,9052,"*"]],[9053,9053],[9052,9052]]],[1564063437932,["GJX@GJXAIOU",[[-1,9077,"*"]],[9078,9078],[9077,9077]]],[1564063439181,["GJX@GJXAIOU",[[-1,9112,"* "]],[9114,9114],[9112,9112]]],[1564063507688,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063507688,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063450197,["GJX@GJXAIOU",[[-1,9148,"):"]],[9148,9150],[9148,9148]]],[1564063451278,["GJX@GJXAIOU",[[-1,9149," */\n"]],[9148,9152],[9148,9148]]],[1564063451861,["GJX@GJXAIOU",[[-1,9149,"\n"]],[9148,9148],[9147,9147]]],[1564063455861,["GJX@GJXAIOU",[[-1,8564," "],[-1,8572,"  "],[-1,8639," "],[-1,8644," "],[-1,8706," "],[-1,8716," "],[-1,8721," "],[-1,8803,"  "],[-1,8809,"  "],[-1,8844,"  "],[-1,8897,"  "],[-1,8971,"  "],[-1,8974,"  "],[-1,8984," "],[-1,8990," "],[-1,9068,"  "],[-1,9076,"  "],[-1,9111,"  "]],[8565,9146],[8564,9120]]],[1564063456661,["GJX@GJXAIOU",[[-1,8573,"  "],[-1,8636,"  "],[-1,8710,"  "],[-1,8793,"  "],[-1,8799,"  "],[-1,8832,"  "],[-1,8881,"  "],[-1,8956,"  "],[-1,8964,"  "],[-1,9044,"  "],[-1,9052,"  "],[-1,9085,"  "]],[8564,9120],[8564,9096]]],[1564063459556,["GJX@GJXAIOU",[[-1,8562," "]],[8563,8563],[8562,8562]]],[1564063459894,["GJX@GJXAIOU",[[-1,8562,"\n"]],[8562,8562],[8561,8561]]],[1564063460214,["GJX@GJXAIOU",[[-1,8560," "]],[8561,8561],[8560,8560]]],[1564063460638,["GJX@GJXAIOU",[[-1,8560,"\n"]],[8560,8560],[8559,8559]]],[1564063461214,["GJX@GJXAIOU",[[-1,8559,"\n"]],[8559,8559],[8558,8558]]],[1564063462503,["GJX@GJXAIOU",[[1,8559,"\n"]],[8558,8558],[8559,8559]]],[1564063464997,["GJX@GJXAIOU",[[1,8560,"- "]],[8560,8560],[8562,8562]]],[1564063467534,["GJX@GJXAIOU",[[1,8695,"- "]],[8695,8695],[8697,8697]]],[1564063470047,["GJX@GJXAIOU",[[1,8942,"- "]],[8942,8942],[8944,8944]]],[1564063488381,["GJX@GJXAIOU",[[-1,8791,"                   "]],[8791,8810],[8791,8791]]],[1564063488911,["GJX@GJXAIOU",[[-1,8790,"\n"]],[8791,8791],[8790,8790]]],[1564063493519,["GJX@GJXAIOU",[[-1,9078,"\n"]],[9077,9077],[9076,9076]]],[1564063567686,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063567686,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063561584,["GJX@GJXAIOU",[[-1,9632,"\n"]],[9632,9632],[9631,9631]]],[1564063563998,["GJX@GJXAIOU",[[-1,9666,"\n"]],[9666,9666],[9665,9665]]],[1564063564606,["GJX@GJXAIOU",[[-1,9665,"\n"]],[9665,9665],[9664,9664]]],[1564063565758,["GJX@GJXAIOU",[[1,9665,"\n"]],[9664,9664],[9665,9665]]],[1564063627686,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063627686,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063567989,["GJX@GJXAIOU",[[-1,9693,"\n"]],[9693,9693],[9692,9692]]],[1564063927700,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063927701,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063878573,["GJX@GJXAIOU",[[-1,9918,"        stuClass.getMethods();"]],[9918,9948],[9918,9918]]],[1564063879551,["GJX@GJXAIOU",[[-1,9918,"\n"]],[9918,9918],[9917,9917]]],[1564063888981,["GJX@GJXAIOU",[[1,10062,"\n        "]],[10053,10053],[10062,10062]]],[1564063896670,["GJX@GJXAIOU",[[-1,10095,"*"]],[10094,10094],[10093,10093]]],[1564063903381,["GJX@GJXAIOU",[[-1,9801," "]],[9802,9802],[9801,9801]]],[1564063987703,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564063987703,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063969509,["GJX@GJXAIOU",[[1,10258,"\n        "]],[10249,10249],[10258,10258]]],[1564063975223,["GJX@GJXAIOU",[[-1,10842,"\n"]],[10842,10842],[10841,10841]]],[1564063977518,["GJX@GJXAIOU",[[-1,10833,"\n"]],[10833,10833],[10832,10832]]],[1564064047701,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064047702,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564063998851,["GJX@GJXAIOU",[[1,12135,"- "]],[12135,12135],[12137,12137]]],[1564064001987,["GJX@GJXAIOU",[[1,12269,"- "]],[12269,12269],[12271,12271]]],[1564064005696,["GJX@GJXAIOU",[[1,12302,"- "]],[12302,12302],[12304,12304]]],[1564064028029,["GJX@GJXAIOU",[[-1,12410,"控制台输出：\n\n```java\n***************获取所有的”公有“方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n***************获取所有的方法，包括私有的*******************\npublic void fanshe.method.Student.show1(java.lang.String)\nprivate java.lang.String fanshe.method.Student.show4(int)\nprotected void fanshe.method.Student.show2()\nvoid fanshe.method.Student.show3()\n***************获取公有的show1()方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\n调用了：公有的，String参数的show1(): s = 刘德华\n***************获取私有的show4()方法******************\nprivate java.lang.String fanshe.method.Student.show4(int)\n调用了，私有的，并且有返回值的，int参数的show4(): age = 20\n返回值：abcd12345678910111213141516171819202122\n```"]],[12410,13691],[12410,12410]]],[1564064029428,["GJX@GJXAIOU",[[-1,12411,"\n"]],[12410,12410],[12409,12409]]],[1564064031293,["GJX@GJXAIOU",[[-1,12410,"\n"]],[12410,12410],[12409,12409]]],[1564064038558,["GJX@GJXAIOU",[[-1,12087,"12345678910111213141516171819202122"]],[12087,12122],[12087,12087]]],[1564064107702,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064107702,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564064056413,["GJX@GJXAIOU",[[-1,12628,"\n"]],[12628,12628],[12627,12627]]],[1564064057325,["GJX@GJXAIOU",[[-1,12627,"\n"]],[12627,12627],[12626,12626]]],[1564064068969,["GJX@GJXAIOU",[[-1,12443,"5、"]],[12444,12445],[12443,12443]]],[1564064070878,["GJX@GJXAIOU",[[1,12443,"（）"]],[12443,12443],[12445,12445]]],[1564064072385,["GJX@GJXAIOU",[[1,12444,"四"]],[12444,12444],[12445,12445]]],[1564064077501,["GJX@GJXAIOU",[[-1,12617,"\n"]],[12617,12617],[12616,12616]]],[1564064081589,["GJX@GJXAIOU",[[-1,13546,"\n"]],[13546,13546],[13545,13545]]],[1564064086509,["GJX@GJXAIOU",[[-1,13575," 6、"]],[13575,13577],[13575,13575]]],[1564064088385,["GJX@GJXAIOU",[[1,13575,"（）"]],[13575,13575],[13577,13577]]],[1564064090337,["GJX@GJXAIOU",[[1,13576,"五"]],[13576,13576],[13577,13577]]],[1564064091088,["GJX@GJXAIOU",[[1,13576," "]],[13576,13576],[13577,13577]]],[1564064092518,["GJX@GJXAIOU",[[-1,13576," "]],[13577,13577],[13576,13576]]],[1564064093832,["GJX@GJXAIOU",[[1,13575," "]],[13575,13575],[13576,13576]]],[1564064167703,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064167703,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564064148160,["GJX@GJXAIOU",[[1,13011,"\n             "]],[13011,13011],[13025,13025]]],[1564064154391,["GJX@GJXAIOU",[[1,13065,"\n            "]],[13065,13065],[13078,13078]]],[1564064227701,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064227701,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564064167785,["GJX@GJXAIOU",[[1,13337,"\n             "]],[13337,13337],[13351,13351]]],[1564064287706,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064287707,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564064236751,["GJX@GJXAIOU",[[-1,13599,"\n"]],[13599,13599],[13598,13598]]],[1564064240899,["GJX@GJXAIOU",[[1,13599,"·"]],[13599,13599],[13600,13600]]],[1564064242159,["GJX@GJXAIOU",[[-1,13599,"·"]],[13600,13600],[13599,13599]]],[1564064242589,["GJX@GJXAIOU",[[1,13599,"\n"]],[13599,13599],[13600,13600]]],[1564064242787,["GJX@GJXAIOU",[[1,13600,"·"]],[13600,13600],[13601,13601]]],[1564064243751,["GJX@GJXAIOU",[[-1,13600,"·"]],[13601,13601],[13600,13600]]],[1564064244212,["GJX@GJXAIOU",[[-1,13599,"\n"]],[13600,13600],[13599,13599]]],[1564064245584,["GJX@GJXAIOU",[[1,13599,"`"]],[13599,13599],[13600,13600]]],[1564064247152,["GJX@GJXAIOU",[[1,13612,"`"]],[13612,13612],[13613,13613]]],[1564064259413,["GJX@GJXAIOU",[[1,13209,"\n             "]],[13209,13209],[13223,13223]]],[1564064276677,["GJX@GJXAIOU",[[-1,13104,"/"]],[13105,13105],[13104,13104]]],[1564064278216,["GJX@GJXAIOU",[[1,13104,"*"]],[13104,13104],[13105,13105]]],[1564064281348,["GJX@GJXAIOU",[[-1,13170," //"]],[13170,13173],[13170,13170]]],[1564064347702,[null,[[-1,120," "],[-1,177,"制是"],[1,179,"机是在"],[-1,181,"在"],[1,185,"态"],[-1,187,"态"],[1,356,"\n"],[-1,358,"\n"],[1,387,"象"],[-1,389,"象"],[-1,452," "],[1,453,"\n"],[1,568,"\n"],[-1,613," "],[-1,648," "],[1,649,"#"],[1,669,"i"],[-1,674,"i详）"],[1,677,"详解"],[1,715,"\n"],[-1,718,"]"],[1,719,"l"],[1,728,"]"],[-1,762,"`"],[-1,770,"`"],[1,771,"s"],[-1,841,"`"],[1,842,"\n"],[-1,848,"`"],[1,849,"s"],[-1,860,"`"],[1,861,"。"],[-1,865,"`"],[1,866,"s"],[-1,896,"`"],[1,897,"的"],[-1,907," "],[1,908,"s"],[1,983,"\n"],[-1,1032,"\n"]],[120,120],[1032,1032]]],[1564064347702,[null,[[1,120," "],[1,176,"制是"],[-1,176,"机是在"],[1,181,"在"],[-1,184,"态"],[1,187,"态"],[-1,355,"\n"],[1,358,"\n"],[-1,386,"象"],[1,389,"象"],[1,451," "],[-1,451,"\n"],[-1,567,"\n"],[1,613," "],[1,647," "],[-1,647,"#"],[-1,668,"i"],[1,674,"i详）"],[-1,674,"详解"],[-1,714,"\n"],[1,718,"]"],[-1,718,"l"],[-1,728,"]"],[1,763,"`"],[1,770,"`"],[-1,770,"s"],[1,841,"`"],[-1,841,"\n"],[1,848,"`"],[-1,848,"s"],[1,860,"`"],[-1,860,"。"],[1,865,"`"],[-1,865,"s"],[1,896,"`"],[-1,896,"的"],[1,907," "],[-1,907,"s"],[-1,983,"\n"],[1,1033,"\n"]],[1032,1032],[120,120]]],[1564064288029,["GJX@GJXAIOU",[[1,13278,"**"],[1,13281,"**"]],[13278,13281],[13278,13285]]],[1564064289069,["GJX@GJXAIOU",[[-1,13278,"** //**"]],[13278,13285],[13278,13278]]],[1564064299032,["GJX@GJXAIOU",[[1,13345,"*/"]],[13345,13345],[13347,13347]]],[1564064307197,["GJX@GJXAIOU",[[-1,13219," "]],[13220,13220],[13219,13219]]]],null,"GJX@GJXAIOU"],["482fd8ac-1add-4045-a595-d2d070d5418d",1564101071905,"# Java反射详解\n[原文地址链接](https://blog.csdn.net/lwl20140904/article/details/80163880)\n@toc\n\n==反射是框架设计的灵魂==\n\n**（使用的前提条件：必须先得到代码的字节码的Class，Class类用于表示.class文件（字节码））**\n\n# 一、反射的概述\n\nJAVA反射机是在==运行状态==中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。\n\n要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象. \n\n**反射就是把java类中的各种成分映射成一个个的Java对象**\n\n例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。\n（其实：一个类中这些成员方法、构造方法、在加入类中都有一个类来描述）\n\n如图是类的正常加载过程：反射的原理在与class对象。\n\n熟悉一下加载的时候：Class对象的由来是将class文件读入内存，并为之创建一个Class对象。\n\n![加载的过程 ]($resource/20170513133210763%20.jpg)\n\n其中这个Class对象很特殊。我们先了解一下这个Class类\n\n# 二、查看Class类在java中的api(1.7)详解\n\n如何阅读java中的api详见java基础之——String字符串处理\n\n![Class 的 API]($resource/20170513135521667.jpg)\n\n**Class 类的实例表示正在运行的 Java 应用程序中的类和接口**。也就是jvm中有N多的实例，每个类都有该Class对象。（包括基本数据类型）\n\n**Class 没有公共构造方法**。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的defineClass方法自动构造的。也就是这不需要我们自己去处理创建，JVM已经帮我们创建好了。 \n\n没有公共的构造方法，方法共有64个太多了。下面用到哪个就详解哪个吧\n\n![Class方法]($resource/Class%E6%96%B9%E6%B3%95.jpg)\n\n\n# 三、反射的使用（这里使用Student类做演示）\n\n先写一个Student类。\n\n- ==获取Class对象的三种方式==\n   * Object ——> getClass();  //返回一个对象的运行时类\n   * 任何数据类型（包括基本数据类型）都有一个“静态”的class属性 \n   * 通过Class类的静态方法：forName（String  className）(常用)\n\n其中第一种 是因为Object类中的getClass方法、因为所有类都继承Object类。从而调用Object类来获取\n\n- 获取Class 类对象的三种方法的代码示例：\n```java\npackage fanshe;\n\npublic class Fanshe {\n    public static void main(String[] args) {\n        //☆☆☆第一种方式获取Class对象  \n        Student stu1 = new Student();\n        //这一new 产生一个Student对象，一个Class对象。      \n        Class stuClass = stu1.getClass();//获取Class对象\n        System.out.println(stuClass.getName());\n\n\n        //☆☆☆第二种方式获取Class对象\n        Class stuClass2 = Student.class;\n        System.out.println(stuClass == stuClass2);\n        //判断第一种方式获取的Class对象和第二种方式获取的是否是同一个\n\n        //☆☆☆第三种方式获取Class对象\n        try {\n            Class stuClass3 = Class.forName(\"fanshe.Student\");\n            //注意此字符串必须是真实路径，即带包名的类路径，包名.类名\n            System.out.println(stuClass3 == stuClass2);\n            //判断三种方式是否获取的是同一个Class对象\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n **注意：在运行期间，一个类，只有一个Class对象产生**。 \n\n三种方式常用第三种，第一种对象都有了还要反射干什么。第二种需要导入类的包，依赖太强，不导包就抛编译错误。一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。\n\n## （一）通过反射获取构造方法并使用：\n\n### 1. 获取构造方法：\n\n- 1).批量的方法：\npublic Constructor[]   getConstructors()：所有”公有的”构造方法\npublic Constructor[]   getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)\n\n- 2).获取单个的方法，并调用：\n`getConstructor(Class… parameterTypes);`:获取单个的”公有的”构造方法：\n`getDeclaredConstructor(Class… parameterTypes);`:获取”某个构造方法”可以是私有的，或受保护、默认、公有；\n\n### 2. 调用构造方法：\n`newInstance(Object… initargs);`\nnewInstance是 Constructor类的方法（管理构造函数的类）\napi的解释为:`newInstance(Object… initargs)`。使用此 `Constructor` 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。\n它的返回值是T类型，所以newInstance是创建了一个构造方法的声明类的新实例对象。并为之调用\n\n\n- student类：共有六个构造方法用于测试\n```java\npackage fanshe;\n\npublic class Student {\n\n    //---------------构造方法-------------------\n    //（默认的构造方法）\n    Student(String str){\n        System.out.println(\"(默认)的构造方法 s = \" + str);\n    }\n\n    //无参构造方法\n    public Student(){\n        System.out.println(\"调用了公有、无参构造方法执行了。。。\");\n    }\n\n    //有一个参数的构造方法\n    public Student(char name){\n        System.out.println(\"姓名：\" + name);\n    }\n\n    //有多个参数的构造方法\n    public Student(String name ,int age){\n        System.out.println(\"姓名：\"+name+\"年龄：\"+ age);//这的执行效率有问题，以后解决。\n    }\n\n    //受保护的构造方法\n    protected Student(boolean n){\n        System.out.println(\"受保护的构造方法 n = \" + n);\n    }\n\n    //私有构造方法\n    private Student(int age){\n        System.out.println(\"私有的构造方法   年龄：\"+ age);\n    }\n\n}\n\n```\n\n- 测试类：\n```java\npackage fanshe;\nimport java.lang.reflect.Constructor;\n\npublic class Constructors {\n\n    public static void main(String[] args) throws Exception {\n        //1.加载Class对象\n        Class clazz = Class.forName(\"fanshe.Student\");\n\n        //2.获取所有公有构造方法\n        System.out.println(\"****所有公有构造方法********\");\n        Constructor[] conArray = clazz.getConstructors();\n        for(Constructor c : conArray){\n            System.out.println(c);\n        }\n\n        System.out.println(\"****所有的构造方法(包括：私有、受保护、默认、公有)******\");\n       Constructor[] conArray2=clazz.getDeclaredConstructors();\n        for(Constructor c : conArray2){\n            System.out.println(c);\n        }\n\n        System.out.println(\"****获取公有、无参的构造方法******\");\n        Constructor con = clazz.getConstructor(null);\n        //1>、因为是无参的构造方法，所以类型是一个null,不写也可以：这里需要的是一个参数的类型，切记是类型\n        //2>、返回的是描述这个无参构造函数的类对象。\n\n        System.out.println(\"con = \" + con);\n        \n        //调用构造方法\n        Object obj = con.newInstance();\n    //  System.out.println(\"obj = \" + obj);\n    //  Student stu = (Student)obj;\n\n        System.out.println(\"****获取私有构造方法，并调用******\");\n        con = clazz.getDeclaredConstructor(char.class);\n        System.out.println(con);\n        //私有化构造方法调用前要先设置权限\n        con.setAccessible(true);//暴力访问(忽略掉访问修饰符)\n        obj = con.newInstance('男');\n    }\n}\n```\n\n后台输出：\n```java\n**********所有公有构造方法************\npublic fanshe.Student(java.lang.String,int)\npublic fanshe.Student(char)\npublic fanshe.Student()\n******所有的构造方法(包括：私有、受保护、默认、公有)**********\nprivate fanshe.Student(int)\nprotected fanshe.Student(boolean)\npublic fanshe.Student(java.lang.String,int)\npublic fanshe.Student(char)\npublic fanshe.Student()\nfanshe.Student(java.lang.String)\n*********获取公有、无参的构造方法****************\ncon = public fanshe.Student()\n调用了公有、无参构造方法执行了。。。\n*********获取私有构造方法，并调用****************\npublic fanshe.Student(char)\n姓名：男\n```\n\n\n\n## （二）获取成员变量并调用\n\n- 1.批量的\n       1).Field[] getFields():获取所有的\"公有字段\"\n       2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；\n- 2.获取单个的：\n       1).public Field getField(String fieldName):获取某个\"公有的\"字段；\n       2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)\n\n- 设置字段的值：\n     Field --> public void set(Object obj,Object value):\n                  参数说明：\n                  1.obj:要设置的字段所在的对象；\n                  2.value:要为字段设置的值；\n \n\nstudent类：\n```java\npackage fanshe.field;\n\npublic class Student {\n    public Student(){\n\n    }\n    //**********字段*************//\n    public String name;\n    protected int age;\n    char sex;\n    private String phoneNum;\n\n    @Override\n    public String toString() {\n        return \"Student[name=\" +name+ \", age=\" +age+ \",sex=\" +sex+ \", phoneNum=\" +phoneNum+ \"]\";\n    }\n\n}\n```\n\n测试类：\n\n```java\npackage fanshe.field;\nimport java.lang.reflect.Field;\n\npublic class Fields {\n\n        public static void main(String[] args) throws Exception {\n            //1.获取Class对象\n            Class stuClass = Class.forName(\"fanshe.field.Student\");\n            //2.获取字段\n            System.out.println(\"*****获取所有公有的字段**\");\n            Field[] fieldArray = stuClass.getFields();\n            for(Field f : fieldArray){\n                System.out.println(f);\n            }\n            System.out.println(\"*****获取所有的字段(包括私有、受保护、默认的)******\");\n            fieldArray = stuClass.getDeclaredFields();\n            for(Field f : fieldArray){\n                System.out.println(f);\n            }\n            System.out.println(\"******获取公有字段**并调用***\");\n            Field f = stuClass.getField(\"name\");\n            System.out.println(f);\n            //获取一个对象\n            Object obj=stuClass.getConstructor().newInstance();\n           //产生Student对象--》Student stu = new Student();\n            //为字段设置值\n            f.set(obj, \"刘德华\");\n           //为Student对象中的name属性赋值--》stu.name = \"刘德华\"\n            //验证\n            Student stu = (Student)obj;\n            System.out.println(\"验证姓名：\" + stu.name);\n\n            System.out.println(\"*****获取私有字段****并调用**\");\n            f = stuClass.getDeclaredField(\"phoneNum\");\n            System.out.println(f);\n            f.setAccessible(true);//暴力反射，解除私有限定\n            f.set(obj, \"18888889999\");\n            System.out.println(\"验证电话：\" + stu);\n\n        }\n    }\n```\n\n后台输出：\n```java\n************获取所有公有的字段********************\npublic java.lang.String fanshe.field.Student.name\n************获取所有的字段(包括私有、受保护、默认的)*********\npublic java.lang.String fanshe.field.Student.name\nprotected int fanshe.field.Student.age\nchar fanshe.field.Student.sex\nprivate java.lang.String fanshe.field.Student.phoneNum\n*************获取公有字段**并调用**************\npublic java.lang.String fanshe.field.Student.name\n验证姓名：刘德华\n**************获取私有字段****并调用********************\nprivate java.lang.String fanshe.field.Student.phoneNum\n验证电话：Student [name=刘德华, age=0, sex=\n```\n\n由此可见，调用字段时：需要传递两个参数：\n\nObject obj = stuClass.getConstructor().newInstance();//产生Student对象–》Student stu = new Student();\n//为字段设置值\nf.set(obj, “刘德华”);//为Student对象中的name属性赋值–》stu.name = “刘德华” \n\n第一个参数：要传入设置的对象，第二个参数：要传入实参\n\n## （三）获取成员方法并调用\n\n- 1.批量的：\n  public Method[] getMethods():获取所有\"公有方法\"；（包含了父类的方法也包含Object类）\n  public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)\n- 2.获取单个的：\n  public Method getMethod(String name,Class<?>... parameterTypes):\n              参数：name : 方法名；\n                   Class ... : 形参的Class类型对象\n   public Method getDeclaredMethod(String name,Class<?>... parameterTypes)\n\n- 调用方法：\n   Method --> public Object invoke(Object obj,Object... args):\n               参数说明：\n               obj : 要调用方法的对象；\n              args:调用方式时所传递的实参；\n\nstudent类：\n```java\npackage fanshe.method;\n\npublic class Student {\n    //**************成员方法***************//\n    public void show1(String s){\n        System.out.println(\"调用了：公有的，String参数的show1(): s = \" + s);\n    }\n    protected void show2(){\n        System.out.println(\"调用了：受保护的，无参的show2()\");\n    }\n    void show3(){\n        System.out.println(\"调用了：默认的，无参的show3()\");\n    }\n    private String show4(int age){\n        System.out.println(\"调用了，私有的，并且有返回值的，int参数的show4(): age = \" + age);\n        return \"abcd\";\n    }\n}\n\n```\n\n测试类：\n```java\npackage fanshe.method;\nimport java.lang.reflect.Method;\n\npublic class MethodClass {\n    public static void main(String[] args) throws Exception {\n        //1.获取Class对象\n        Class stuClass =Class.forName(\"fanshe.method.Student\");\n        //2.获取所有公有方法\n        System.out.println(\"******获取所有的”公有“方法******\");\n        Method[] methodArray = stuClass.getMethods();\n        for(Method m : methodArray){\n            System.out.println(m);\n        }\n        \n        System.out.println(\"****获取所有的方法，包括私有的****\");\n        methodArray = stuClass.getDeclaredMethods();\n        for(Method m : methodArray){\n            System.out.println(m);\n        }\n        \n        System.out.println(\"*******获取公有的show1()方法****\");\n        Method m = stuClass.getMethod(\"show1\", String.class);\n        System.out.println(m);\n        //实例化一个Student对象\n        Object obj = stuClass.getConstructor().newInstance();\n        m.invoke(obj, \"刘德华\");\n\n        System.out.println(\"******获取私有的show4()方法*****\");\n        m = stuClass.getDeclaredMethod(\"show4\", int.class);\n        System.out.println(m);\n        m.setAccessible(true);//解除私有限定\n        Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参\n        System.out.println(\"返回值：\" + result);\n    }\n}\n```\n\n控制台输出：\n```java\n***************获取所有的”公有“方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\npublic final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException\npublic final native void java.lang.Object.wait(long) throws java.lang.InterruptedException\npublic final void java.lang.Object.wait() throws java.lang.InterruptedException\npublic boolean java.lang.Object.equals(java.lang.Object)\npublic java.lang.String java.lang.Object.toString()\npublic native int java.lang.Object.hashCode()\npublic final native java.lang.Class java.lang.Object.getClass()\npublic final native void java.lang.Object.notify()\npublic final native void java.lang.Object.notifyAll()\n***************获取所有的方法，包括私有的*******************\npublic void fanshe.method.Student.show1(java.lang.String)\nprivate java.lang.String fanshe.method.Student.show4(int)\nprotected void fanshe.method.Student.show2()\nvoid fanshe.method.Student.show3()\n***************获取公有的show1()方法*******************\npublic void fanshe.method.Student.show1(java.lang.String)\n调用了：公有的，String参数的show1(): s = 刘德华\n***************获取私有的show4()方法******************\nprivate java.lang.String fanshe.method.Student.show4(int)\n调用了，私有的，并且有返回值的，int参数的show4(): age = 20\n返回值：abcd\n```\n\n由此可见：\n\n- m = stuClass.getDeclaredMethod(“show4”, int.class);//调用制定方法（所有包括私有的），需要传入两个参数，第一个是调用的方法名称，第二个是方法的形参类型，切记是类型。 System.out.println(m);\n- m.setAccessible(true);//解除私有限定\n- Object result = m.invoke(obj, 20);//需要两个参数，一个是要调用的对象（获取有反射），一个是实参\nSystem.out.println(“返回值：” + result);//\n\n其实这里的成员方法：在模型中有属性一词，就是那些setter（）方法和getter()方法。还有字段组成，这些内容在内省中详解\n\n## （四）反射main方法\n\nstudent类：\n```java\npackage fanshe.main;\n\npublic class Student {\n\n    public static void main(String[] args) {\n        System.out.println(\"main方法执行了。。。\");\n    }\n}\n```\n\n测试类：\n```java\npackage fanshe.main;\n\nimport java.lang.reflect.Method;\n\n/**\n * 获取Student类的main方法、不要与当前的main方法搞混了\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        try {\n            //1、获取Student对象的字节码\n            Class clazz = Class.forName(\"fanshe.main.Student\");\n\n            //2、获取main方法\n             Method methodMain = clazz.getMethod(\"main\", String[].class);\n             //第一个参数：方法名称，第二个参数：方法形参的类型，\n            \n            //3、调用main方法\n            /* methodMain.invoke(null, new String[]{\"a\",\"b\",\"c\"});\n            第一个参数，对象类型，因为方法是static静态的，所以为null可以，\n            第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数\n            这里拆的时候将  new String[]{\"a\",\"b\",\"c\"} 拆成3个对象。。。所以需要将它强转。\n             */\n             methodMain.invoke(null, (Object)new String[]{\"a\",\"b\",\"c\"});//方式一\n            // methodMain.invoke(null, new Object[]{new String[]{\"a\",\"b\",\"c\"}});//方式二\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n控制台输出：\n`main方法执行了。。。`\n\n## （五）反射方法的其它使用之—通过反射运行配置文件内容\n\nstudent类：\n```java\npublic class Student {\n    public void show(){\n        System.out.println(\"is show()\");\n    }\n}\n```\n\n配置文件以txt文件为例子（pro.txt）：\n\n```java\nclassName = cn.fanshe.Student\nmethodName = show1\n```\n\n测试类：\n```java\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.Properties;\n\n/*\n * 我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改\n * 我们只需要将新类发送给客户端，并修改配置文件即可\n */\npublic class Demo {\n    public static void main(String[] args) throws Exception {\n        //通过反射获取Class对象\n        Class stuClass = Class.forName(getValue(\"className\"));//\"cn.fanshe.Student\"\n        //2获取show()方法\n        Method m = stuClass.getMethod(getValue(\"methodName\"));//show\n        //3.调用show()方法\n        m.invoke(stuClass.getConstructor().newInstance());\n\n    }\n\n    //此方法接收一个key，在配置文件中获取相应的value\n    public static String getValue(String key) throws IOException{\n        Properties pro = new Properties();//获取配置文件的对象\n        FileReader in = new FileReader(\"pro.txt\");//获取输入流\n        pro.load(in);//将流加载到配置文件对象中\n        in.close();\n        return pro.getProperty(key);//返回根据key获取的value值\n    }\n}\n\n```\n\n控制台输出：\n\nis show()\n\n**需求：**\n当我们升级这个系统时，不要Student类，而需要新写一个Student2的类时，这时只需要更改pro.txt的文件内容就可以了。代码就一点不用改动\n\n要替换的student2类：\n```java\npublic class Student2 {\n    public void show2(){\n        System.out.println(\"is show2()\");\n    }\n}\n```\n\n配置文件更改为：\n```java\nclassName = cn.fanshe.Student2\nmethodName = show21\n```\n\n控制台输出：\n\nis show2();\n\n## 7、反射方法的其它使用之—通过反射越过泛型检查\n\n泛型用在编译期，编译过后泛型擦除（消失掉）。所以是可以通过反射越过泛型检查的\n\n测试类： \n```java\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\n\n/*\n * 通过反射越过泛型检查\n * \n * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？\n */\npublic class Demo {\n    public static void main(String[] args) throws Exception{\n        ArrayList<String> strList = new ArrayList<>();\n        strList.add(\"aaa\");\n        strList.add(\"bbb\");\n\n    //  strList.add(100);\n        //获取ArrayList的Class对象，反向的调用add()方法，添加数据\n        Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象\n        //获取add()方法\n        Method m = listClass.getMethod(\"add\", Object.class);\n        //调用add()方法\n        m.invoke(strList, 100);\n\n        //遍历集合\n        for(Object obj : strList){\n            System.out.println(obj);\n        }\n    }\n}\n```\n\n控制台输出：\n\naaa\nbbb\n100\n\n\n\n\n\n",[[1564101065699,["GJX@GJXAIOU",[[1,1187,"**"],[1,1231,"**"]],[1187,1231],[1187,1235]]],[1564101267864,["GJX@GJXAIOU",[[-1,2310,"public Constructor[] "]],[2310,2331],[2310,2310]]],[1564101268251,["GJX@GJXAIOU",[[1,2310,"·"]],[2310,2310],[2311,2311]]],[1564101269967,["GJX@GJXAIOU",[[-1,2310,"·"]],[2311,2311],[2310,2310]]],[1564101272272,["GJX@GJXAIOU",[[-1,2311," "]],[2312,2312],[2311,2311]]],[1564101272972,["GJX@GJXAIOU",[[1,2311,"·"]],[2311,2311],[2312,2312]]],[1564101274296,["GJX@GJXAIOU",[[-1,2311,"·"]],[2312,2312],[2311,2311]]],[1564101275484,["GJX@GJXAIOU",[[1,2311,"`"]],[2311,2311],[2312,2312]]],[1564101278198,["GJX@GJXAIOU",[[1,2329,"`"]],[2329,2329],[2330,2330]]],[1564101281321,["GJX@GJXAIOU",[[-1,2343,"public Constructor[]"]],[2343,2363],[2343,2343]]],[1564101283608,["GJX@GJXAIOU",[[-1,2344,"  "]],[2346,2346],[2344,2344]]],[1564101284172,["GJX@GJXAIOU",[[1,2344,"`"]],[2344,2344],[2345,2345]]],[1564101286297,["GJX@GJXAIOU",[[1,2370,"`"]],[2370,2370],[2371,2371]]],[1564101288242,["GJX@GJXAIOU",[[1,2329,";"]],[2329,2329],[2330,2330]]],[1564101291324,["GJX@GJXAIOU",[[1,2371,";"]],[2371,2371],[2372,2372]]],[1564101291864,["GJX@GJXAIOU",[[-1,2371,";"]],[2372,2372],[2371,2371]]],[1564101292676,["GJX@GJXAIOU",[[1,2371,";"]],[2371,2371],[2372,2372]]],[1564101513443,["GJX@GJXAIOU",[[1,4373,"\n        、、"]],[4373,4373],[4384,4384]]],[1564101514207,["GJX@GJXAIOU",[[-1,4382,"、、"]],[4384,4384],[4382,4382]]],[1564101515126,["GJX@GJXAIOU",[[1,4382,"//"]],[4382,4382],[4384,4384]]],[1564101685600,["GJX@GJXAIOU",[[1,4747,"\n        "]],[4738,4738],[4747,4747]]],[1564101687661,["GJX@GJXAIOU",[[1,4747,"、、"]],[4747,4747],[4749,4749]]],[1564101688335,["GJX@GJXAIOU",[[-1,4747,"、、"]],[4749,4749],[4747,4747]]],[1564101690391,["GJX@GJXAIOU",[[1,4747,"//cans"]],[4747,4747],[4753,4753]]],[1564101691872,["GJX@GJXAIOU",[[-1,4749,"cans"]],[4753,4753],[4749,4749]]],[1564101693536,["GJX@GJXAIOU",[[1,4749,"擦书"]],[4749,4749],[4751,4751]]],[1564101695184,["GJX@GJXAIOU",[[-1,4749,"擦书"]],[4751,4751],[4749,4749]]],[1564101699490,["GJX@GJXAIOU",[[1,4749,"参数是类型。之而立"]],[4749,4749],[4758,4758]]],[1564101708167,["GJX@GJXAIOU",[[-1,4755,"之而立"]],[4758,4758],[4755,4755]]],[1564101712844,["GJX@GJXAIOU",[[1,4755,"这里的char.cha"]],[4755,4755],[4766,4766]]],[1564101713813,["GJX@GJXAIOU",[[-1,4764,"ha"]],[4766,4766],[4764,4764]]],[1564101714154,["GJX@GJXAIOU",[[1,4764,"ls"]],[4764,4764],[4766,4766]]],[1564101714919,["GJX@GJXAIOU",[[-1,4765,"s"]],[4766,4766],[4765,4765]]],[1564101715755,["GJX@GJXAIOU",[[1,4765,"add"]],[4765,4765],[4768,4768]]],[1564101716573,["GJX@GJXAIOU",[[-1,4766,"dd"]],[4768,4768],[4766,4766]]],[1564101717360,["GJX@GJXAIOU",[[1,4766,"ds"]],[4766,4766],[4768,4768]]],[1564101718686,["GJX@GJXAIOU",[[-1,4766,"ds"]],[4768,4768],[4766,4766]]],[1564101726472,["GJX@GJXAIOU",[[1,4766,"ss会被自动包装成天"]],[4766,4766],[4776,4776]]],[1564101727095,["GJX@GJXAIOU",[[-1,4775,"天"]],[4776,4776],[4775,4775]]],[1564101730563,["GJX@GJXAIOU",[[1,4775,"Char"]],[4775,4775],[4779,4779]]],[1564101732603,["GJX@GJXAIOU",[[1,4779,".clsdd"]],[4779,4779],[4785,4785]]],[1564101733256,["GJX@GJXAIOU",[[-1,4782,"sdd"]],[4785,4785],[4782,4782]]],[1564101733945,["GJX@GJXAIOU",[[1,4782,"ass"]],[4782,4782],[4785,4785]]],[1564119927783,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1564119928908,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1564119929049,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1564119929202,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1564119929249,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1564119931175,["GJX@GJXAIOU",[[1,4,"flag: red"]],[4,4],[13,13]]],[1564119932383,["GJX@GJXAIOU",[[1,14,"\n"]],[13,13],[14,14]]],[1564119932762,["GJX@GJXAIOU",[[1,14,"-"]],[14,14],[15,15]]],[1564119933447,["GJX@GJXAIOU",[[-1,14,"-"]],[15,15],[14,14]]],[1564119936827,["GJX@GJXAIOU",[[1,14,"tags: "]],[14,14],[20,20]]],[1564119937224,["GJX@GJXAIOU",[[1,21,"\n"]],[20,20],[21,21]]],[1564119939398,["GJX@GJXAIOU",[[1,21,"- dan"]],[21,21],[26,26]]],[1564119940110,["GJX@GJXAIOU",[[-1,23,"dan"]],[26,26],[23,23]]],[1564119943018,["GJX@GJXAIOU",[[1,23,"反射"]],[23,23],[25,25]]]],null,"GJX@GJXAIOU"]]}