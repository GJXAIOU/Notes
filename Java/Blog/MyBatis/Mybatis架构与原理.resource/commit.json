{"compress":true,"commitItems":[["82cb4b54-8928-4880-b5ba-b92127f71614",1568196431549,"## Mybatis架构与原理\n\nJava知音 [Java技术前线](javascript:void(0);) _今天_\n\n点击上方“Java技术前线”，选择“置顶或者星标”\n\n# 与你一起成长～\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/H9PJZVVHIW83OKfn4VyDz4Oox84cGKjEoPoCNBjj39nKeIHk7SiaHqOoNA9vuicKUSLNYvURm33DByvAmjc2cbOg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n> 作者：消失er\n> \n> www.jianshu.com/p/15781ec742f2\n\n### MyBatis功能架构设计\n\n![](https://mmbiz.qpic.cn/mmbiz/eQPyBffYbueR2DuLeqaeaJE6qIDcYN5TOuFfBibjs1JNBnPQbLiaz3V9hsgEaaYvcV2mjhZVTWJSDFBhHvKZ9wFw/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**功能架构讲解：**\n\n我们把Mybatis的功能架构分为三层：\n\n*   API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。\n\n*   数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。\n\n*   基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。\n\n### 框架架构\n\n![](https://mmbiz.qpic.cn/mmbiz/eQPyBffYbueR2DuLeqaeaJE6qIDcYN5TcsAp6rKT4zsiadrvrPX2Micu4SNXZEw26uZUoSe2G1eaV20Q1XSTvMXg/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**框架架构讲解：**\n\n这张图从上往下看。MyBatis的初始化，会从mybatis-config.xml配置文件，解析构造成Configuration这个类，就是图中的红框。\n\n1.  加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。\n\n2.  SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是Map、JavaBean或者基本数据类型），Mybatis会根据SQL的ID找到对应的MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。\n\n3.  SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。\n\n4.  结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者基本数据类型，并将最终结果返回。\n\n### MyBatis核心类\n\n**1、SqlSessionFactoryBuilder**\n\n每一个MyBatis的应用程序的入口是SqlSessionFactoryBuilder。\n\n它的作用是通过XML配置文件创建Configuration对象（当然也可以在程序中自行创建），然后通过build方法创建SqlSessionFactory对象。没有必要每次访问Mybatis就创建一次SqlSessionFactoryBuilder，通常的做法是创建一个全局的对象就可以了。\n\n示例程序如下：\n\n```\nprivate static SqlSessionFactoryBuilder sqlSessionFactoryBuilder;private static SqlSessionFactory sqlSessionFactory;private static void init() throws IOException {    String resource = \"mybatis-config.xml\";    Reader reader = Resources.getResourceAsReader(resource);    sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();    sqlSessionFactory = sqlSessionFactoryBuilder.build(reader);}\n```\n\norg.apache.ibatis.session.Configuration 是mybatis初始化的核心。\n\nmybatis-config.xml中的配置，最后会解析xml成Configuration这个类。\n\nSqlSessionFactoryBuilder根据传入的数据流(XML)生成Configuration对象，然后根据Configuration对象创建默认的SqlSessionFactory实例。\n\n**2、SqlSessionFactory对象由SqlSessionFactoryBuilder创建：**\n\n它的主要功能是创建SqlSession对象，和SqlSessionFactoryBuilder对象一样，没有必要每次访问Mybatis就创建一次SqlSessionFactory，通常的做法是创建一个全局的对象就可以了。SqlSessionFactory对象一个必要的属性是Configuration对象，它是保存Mybatis全局配置的一个配置对象，通常由SqlSessionFactoryBuilder从XML配置文件创建。\n\n这里给出一个简单的示例：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?><!DOCTYPE configuration PUBLIC    \"-//mybatis.org//DTD Config 3.0//EN\"   \"http://mybatis.org/dtd/mybatis-3-config.dtd\"><configuration>   <!-- 配置别名 -->   <typeAliases>       <typeAlias type=\"org.iMybatis.abc.dao.UserDao\" alias=\"UserDao\" />       <typeAlias type=\"org.iMybatis.abc.dto.UserDto\" alias=\"UserDto\" />   </typeAliases>   <!-- 配置环境变量 -->   <environments default=\"development\">       <environment id=\"development\">           <transactionManager type=\"JDBC\" />           <dataSource type=\"POOLED\">               <property name=\"driver\" value=\"com.mysql.jdbc.Driver\" />               <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/iMybatis?characterEncoding=GBK\" />               <property name=\"username\" value=\"iMybatis\" />               <property name=\"password\" value=\"iMybatis\" />           </dataSource>       </environment>   </environments>   <!-- 配置mappers -->   <mappers>       <mapper resource=\"org/iMybatis/abc/dao/UserDao.xml\" />   </mappers></configuration>\n```\n\n**3、SqlSession**\n\nSqlSession对象的主要功能是完成一次数据库的访问和结果的映射，它类似于数据库的session概念，由于不是线程安全的，所以SqlSession对象的作用域需限制方法内。\n\nSqlSession的默认实现类是DefaultSqlSession，它有两个必须配置的属性：Configuration和Executor。Configuration前文已经描述这里不再多说。SqlSession对数据库的操作都是通过Executor来完成的。\n\nSqlSession ：默认创建DefaultSqlSession 并且开启一级缓存，创建执行器 、赋值。\nSqlSession有一个重要的方法getMapper，顾名思义，这个方式是用来获取Mapper对象的。什么是Mapper对象？\n\n根据Mybatis的官方手册，应用程序除了要初始并启动Mybatis之外，还需要定义一些接口，接口里定义访问数据库的方法，存放接口的包路径下需要放置同名的XML配置文件。\n\nSqlSession的getMapper方法是联系应用程序和Mybatis纽带，应用程序访问getMapper时，Mybatis会根据传入的接口类型和对应的XML配置文件生成一个代理对象，这个代理对象就叫Mapper对象。应用程序获得Mapper对象后，就应该通过这个Mapper对象来访问Mybatis的SqlSession对象，这样就达到里插入到Mybatis流程的目的。\n\n```\nSqlSession session= sqlSessionFactory.openSession();  UserDao userDao = session.getMapper(UserDao.class);  UserDto user = new UserDto();  user.setUsername(\"iMybatis\");  List<UserDto> users = userDao.queryUsers(user);  public interface UserDao {    public List<UserDto> queryUsers(UserDto user) throws Exception;}<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">  <mapper namespace=\"org.iMybatis.abc.dao.UserDao\">      <select id=\"queryUsers\" parameterType=\"UserDto\" resultType=\"UserDto\"          useCache=\"false\">          <![CDATA[         select * from t_user t where t.username = #{username}         ]]>      </select>  </mapper>\n```\n\n**4、Executor**\n\nExecutor对象在创建Configuration对象的时候创建，并且缓存在Configuration对象里。Executor对象的主要功能是调用StatementHandler访问数据库，并将查询结果存入缓存中（如果配置了缓存的话）。\n\n**5、StatementHandler**\n\nStatementHandler是真正访问数据库的地方，并调用ResultSetHandler处理查询结果。\n\n**6、ResultSetHandler**\n\n处理查询结果。\n\n### MyBatis成员层次&职责\n\n![](https://mmbiz.qpic.cn/mmbiz/eQPyBffYbueR2DuLeqaeaJE6qIDcYN5TpvjaWCJsHGlrR1Ca74YxB2iasrEPibBpBLyBhJb4Omyod5P4ibCcNceqA/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n1.  SqlSession 作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能\n\n2.  Executor MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护\n\n3.  StatementHandler 封装了JDBC Statement操作，负责对JDBCstatement的操作，如设置参数、将Statement结果集转换成List集合。\n\n4.  ParameterHandler 负责对用户传递的参数转换成JDBC Statement 所需要的参数\n\n5.  ResultSetHandler *负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；\n\n6.  TypeHandler 负责java数据类型和jdbc数据类型之间的映射和转换\n\n7.  MappedStatement MappedStatement维护了一条\n\n    节点的封\n8.  SqlSource 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回\n\n9.  BoundSql 表示动态生成的SQL语句以及相应的参数信息\n\n10.  Configuration MyBatis所有的配置信息都维持在Configuration对象之中",[[1568196377047,["GJX@GJXAIOU",[[-1,17,"Java知音 [Java技术前线](javascript:void(0);) _今天_\n\n点击上方“Java技术前线”，选择“置顶或者星标”\n\n# 与你一起成长～\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/H9PJZVVHIW83OKfn4VyDz4Oox84cGKjEoPoCNBjj39nKeIHk7SiaHqOoNA9vuicKUSLNYvURm33DByvAmjc2cbOg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n> 作者：消失er\n> \n> www.jianshu.com/p/15781ec742f2"]],[17,311],[17,17]]],[1568196378973,["GJX@GJXAIOU",[[-1,18,"\n"]],[17,17],[16,16]]]],null,"GJX@GJXAIOU"]]}