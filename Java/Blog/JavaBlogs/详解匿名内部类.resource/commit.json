{"compress":true,"commitItems":[["23712469-a13c-463c-aca5-2cf2d51a64d6",1563881044280,"# [java提高篇(十)-----详解匿名内部类](https://www.cnblogs.com/chenssy/p/3390871.html)\n\n      在java提高篇-----详解内部类中对匿名内部类做了一个简单的介绍，但是内部类还存在很多其他细节问题，所以就衍生出这篇博客。在这篇博客中你可以了解到匿名内部类的使用、匿名内部类要注意的事项、如何初始化匿名内部类、匿名内部类使用的形参为何要为final。\n\n## 一、使用匿名内部类内部类\n\n      匿名内部类由于没有名字，所以它的创建方式有点儿奇怪。创建格式如下：\n\nnew 父类构造器（参数列表）|实现接口（）  \n    { //匿名内部类的类体部分 \n    }\n\n      在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic abstract class Bird { private String name; public String getName() { return name;\n    } public void setName(String name) { this.name = name;\n    } public abstract int fly();\n} public class Test { public void test(Bird bird){\n        System.out.println(bird.getName() + \"能够飞 \" + bird.fly() + \"米\");\n    } public static void main(String[] args) {\n        Test test = new Test();\n        test.test(new Bird() { public int fly() { return 10000;\n            } public String getName() { return \"大雁\";\n            }\n        });\n    }\n} ------------------ Output：\n大雁能够飞 10000米\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n      在Test类中，test()方法接受一个Bird类型的参数，同时我们知道一个抽象类是没有办法直接new的，我们必须要先有实现类才能new出来它的实现类实例。所以在mian方法中直接使用匿名内部类来创建一个Bird实例。\n\n     由于匿名内部类不能是抽象类，所以它必须要实现它的抽象父类或者接口里面所有的抽象方法。\n\n      对于这段匿名内部类代码其实是可以拆分为如下形式：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class WildGoose extends Bird{ public int fly() { return 10000;\n    } public String getName() { return \"大雁\";\n    }\n}\n\nWildGoose wildGoose = new WildGoose();\ntest.test(wildGoose);\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n       在这里系统会创建一个继承自Bird类的匿名类的对象，该对象转型为对Bird类型的引用。\n\n      对于匿名内部类的使用它是存在一个缺陷的，就是它仅能被使用一次，创建匿名内部类时它会立即创建一个该类的实例，该类的定义会立即消失，所以匿名内部类是不能够被重复使用。对于上面的实例，如果我们需要对test()方法里面内部类进行多次使用，建议重新定义类，而不是使用匿名内部类。\n\n## 二、注意事项\n\n      在使用匿名内部类的过程中，我们需要注意如下几点：\n\n    **  1、**使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。\n\n     **2、**匿名内部类中是不能定义构造函数的。\n\n     **3、**匿名内部类中不能存在任何的静态成员变量和静态方法。\n\n      **4、**匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。\n\n     **5、**匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。\n\n## 三、使用的形参为何要为final\n\n      参考文件：[http://android.blog.51cto.com/268543/384844](http://android.blog.51cto.com/268543/384844 \"http://android.blog.51cto.com/268543/384844\")\n\n       我们给匿名内部类传递参数的时候，若该形参在内部类中需要被使用，那么该形参必须要为final。也就是说：**当所在的方法的形参需要被内部类里面使用时，该形参必须为final。**\n\n为什么必须要为final呢？\n\n      首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class OuterClass { public void display(final String name,String age){ class InnerClass{ void display(){\n                System.out.println(name);\n            }\n        }\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n      从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class OuterClass$InnerClass { public InnerClass(String name,String age){ this.InnerClass$name = name; this.InnerClass$age = age;\n    } public void display(){\n        System.out.println(this.InnerClass$name + \"----\" + this.InnerClass$age );\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n      所以从上面代码来看，内部类并不是直接调用方法传递的参数，而是利用自身的构造器对传入的参数进行备份，自己内部方法调用的实际上时自己的属性而不是外部方法传递进来的参数。\n\n      直到这里还没有解释为什么是final？在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，而然这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用final来避免形参的不改变。\n\n**      简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用final来让该引用不可改变。**\n\n**      故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是final的。**\n\n## 四、匿名内部类初始化\n\n我们一般都是利用构造器来完成某个实例的初始化工作的，但是匿名内部类是没有构造器的！那怎么来初始化匿名内部类呢？使用构造代码块！利用构造代码块能够达到为匿名内部类创建一个构造器的效果。\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class OutClass { public InnerClass getInnerClass(final int age,final String name){ return new InnerClass() { int age_ ;\n            String name_; //构造代码块完成初始化工作\n { if(0 < age && age < 200){\n                    age_ = age;\n                    name_ = name;\n                }\n            } public String getName() { return name_;\n            } public int getAge() { return age_;\n            }\n        };\n    } public static void main(String[] args) {\n        OutClass out = new OutClass();\n\n        InnerClass inner_1 = out.getInnerClass(201, \"chenssy\");\n        System.out.println(inner_1.getName());\n\n        InnerClass inner_2 = out.getInnerClass(23, \"chenssy\");\n        System.out.println(inner_2.getName());\n    }\n}",[[1563881031837,["GJX@GJXAIOU",[[-1,27,"https://www.cnblogs.com/chenssy/p/3390871.html"]],[27,73],[27,27]]],[1563881034001,["GJX@GJXAIOU",[[-1,26,"()"]],[26,28],[26,26]]],[1563881036066,["GJX@GJXAIOU",[[-1,1," [java提高篇(十)-----"]],[1,18],[1,1]]],[1563881037282,["GJX@GJXAIOU",[[-1,8,"]"]],[9,9],[8,8]]],[1563881038580,["GJX@GJXAIOU",[[1,1," "],[-1,10,"     "],[1,15,"     "],[-1,162,"      "],[1,168,"      "],[-1,255,"      "],[1,261,"      "],[-1,1122,"      "],[1,1128,"      "],[-1,1239,"    "],[1,1243,"    "],[-1,1288,"     "],[1,1293,"     "],[-1,1680,"       "],[1,1687,"       "],[-1,1732,"     "],[1,1737,"     "],[-1,1886,"     "],[1,1891,"     "],[-1,1918,"    ** "],[1,1925,"    ** "],[-1,1988,"     "],[1,1993,"     "],[-1,2018,"     "],[1,2023,"     "],[-1,2056,"      "],[1,2062,"      "],[-1,2105,"     "],[1,2110,"     "],[-1,2176,"     "],[1,2181,"     "],[-1,2325,"      "],[1,2331,"      "],[-1,2438,"     "],[1,2443,"     "],[-1,2912,"     "],[1,2917,"     "],[-1,3399,"     "],[1,3404,"     "],[-1,3489,"     "],[1,3494,"     "],[-1,3708,"      "],[1,3714,"      "],[-1,3789,"     "],[1,3794,"     "]],[1,1],[2,2]]],[1563881053982,["GJX@GJXAIOU",[[1,10,"[原文地址](https://www.cnblogs.com/chenssy/p/3390871.html)"]],[10,10],[64,64]]],[1563881061169,["GJX@GJXAIOU",[[-1,220,"   "]],[223,223],[220,220]]],[1563881063099,["GJX@GJXAIOU",[[1,254,"··"]],[254,254],[256,256]]],[1563881065161,["GJX@GJXAIOU",[[-1,254,"··"]],[256,256],[254,254]]],[1563881066938,["GJX@GJXAIOU",[[1,254,"```"]],[254,254],[257,257]]],[1563881066968,["GJX@GJXAIOU",[[1,257,"language\n```\n"]],[257,257],[257,265]]],[1563881068099,["GJX@GJXAIOU",[[-1,257,"language"],[1,265,"j"]],[257,265],[258,258]]],[1563881068490,["GJX@GJXAIOU",[[1,258,"ava"]],[258,258],[261,261]]],[1563881071081,["GJX@GJXAIOU",[[-1,262,"```"]],[262,265],[262,262]]],[1563881072995,["GJX@GJXAIOU",[[1,315,"```"]],[315,315],[318,318]]],[1563881074769,["GJX@GJXAIOU",[[-1,263,"\n"]],[263,263],[262,262]]],[1563881075114,["GJX@GJXAIOU",[[-1,262,"\n"]],[262,262],[261,261]]],[1563881083608,["GJX@GJXAIOU",[[-1,287,"    "]],[291,291],[287,287]]],[1563881084041,["GJX@GJXAIOU",[[-1,286,"\n"]],[287,287],[286,286]]],[1563881085361,["GJX@GJXAIOU",[[-1,284,"  "]],[286,286],[284,284]]],[1563881096051,["GJX@GJXAIOU",[[1,286,"              "]],[286,286],[300,300]]],[1563881097824,["GJX@GJXAIOU",[[-1,317," "]],[318,318],[317,317]]],[1563881100082,["GJX@GJXAIOU",[[1,300,"  "]],[300,300],[302,302]]],[1563881104793,["GJX@GJXAIOU",[[1,302,"\n"]],[302,302],[303,303]]],[1563881105355,["GJX@GJXAIOU",[[1,303,"\n"]],[303,303],[304,304]]],[1563881107329,["GJX@GJXAIOU",[[1,304,"    "]],[304,304],[308,308]]],[1563881109162,["GJX@GJXAIOU",[[-1,303,"\n"]],[303,303],[302,302]]],[1563881112265,["GJX@GJXAIOU",[[-1,333,"   "]],[336,336],[333,333]]],[1563881117705,["GJX@GJXAIOU",[[-1,445,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[445,530],[445,445]]],[1563881144728,["GJX@GJXAIOU",[[-1,447,"public abstract class Bird { private String name; public String getName() { return name;\n    } public void setName(String name) { this.name = name;\n    } public abstract int fly();\n} public class Test { public void test(Bird bird){\n        System.out.println(bird.getName() + \"能够飞 \" + bird.fly() + \"米\");\n    } public static void main(String[] args) {\n        Test test = new Test();\n        test.test(new Bird() { public int fly() { return 10000;\n            } public String getName() { return \"大雁\";\n            }\n        });\n    }\n} ------------------ Output：\n大雁能够飞 10000米\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n"]],[446,1107],[446,446]]],[1563881144848,["GJX@GJXAIOU",[[-1,447,"\n"]],[446,446],[445,445]]],[1563881145290,["GJX@GJXAIOU",[[-1,446,"\n"]],[445,445],[444,444]]],[1563881147625,["GJX@GJXAIOU",[[1,444,"```"]],[444,444],[447,447]]],[1563881147655,["GJX@GJXAIOU",[[1,447,"language\n```\n"]],[447,447],[447,455]]],[1563881148017,["GJX@GJXAIOU",[[-1,447,"language"],[1,455,"j"]],[447,455],[448,448]]],[1563881148571,["GJX@GJXAIOU",[[1,448,"afv"]],[448,448],[451,451]]],[1563881149296,["GJX@GJXAIOU",[[-1,450,"v"]],[451,451],[450,450]]],[1563881149513,["GJX@GJXAIOU",[[1,450,"v"]],[450,450],[451,451]]],[1563881149836,["GJX@GJXAIOU",[[-1,450,"v"]],[451,451],[450,450]]],[1563881150065,["GJX@GJXAIOU",[[1,450,"va"]],[450,450],[452,452]]],[1563881150856,["GJX@GJXAIOU",[[-1,449,"fva"]],[452,452],[449,449]]],[1563881151120,["GJX@GJXAIOU",[[1,449,"va"]],[449,449],[451,451]]],[1563881151504,["GJX@GJXAIOU",[[1,452,"\n"]],[451,451],[452,452]]],[1563881154986,["GJX@GJXAIOU",[[1,452,"public abstract class Bird {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public abstract int fly();\n}\n\npublic class Test {\n    \n    public void test(Bird bird){\n        System.out.println(bird.getName() + \"能够飞 \" + bird.fly() + \"米\");\n    }\n    \n    public static void main(String[] args) {\n        Test test = new Test();\n        test.test(new Bird() {\n            \n            public int fly() {\n                return 10000;\n            }\n            \n            public String getName() {\n                return \"大雁\";\n            }\n        });\n    }\n}\n------------------\nOutput：\n大雁能够飞 10000米"]],[452,452],[1165,1165]]],[1563881159722,["GJX@GJXAIOU",[[-1,1175,"   "]],[1178,1178],[1175,1175]]],[1563881161399,["GJX@GJXAIOU",[[-1,1288,"   "]],[1288,1291],[1288,1288]]],[1563881163313,["GJX@GJXAIOU",[[-1,1334,"    "]],[1334,1338],[1334,1334]]],[1563881176920,["GJX@GJXAIOU",[[-1,1360,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class WildGoose extends Bird{ public int fly() { return 10000;\n    } public String getName() { return \"大雁\";\n    }\n}\n\nWildGoose wildGoose = new WildGoose();\ntest.test(wildGoose);\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[1360,1718],[1360,1360]]],[1563881177720,["GJX@GJXAIOU",[[1,1360,"```"]],[1360,1360],[1363,1363]]],[1563881177748,["GJX@GJXAIOU",[[1,1363,"language\n```\n"]],[1363,1363],[1363,1371]]],[1563881178689,["GJX@GJXAIOU",[[-1,1363,"language"],[1,1371,"j"]],[1363,1371],[1364,1364]]],[1563881179097,["GJX@GJXAIOU",[[1,1364,"ava"]],[1364,1364],[1367,1367]]],[1563881179231,["GJX@GJXAIOU",[[1,1368,"\n"]],[1367,1367],[1368,1368]]],[1563881180635,["GJX@GJXAIOU",[[1,1368,"public class WildGoose extends Bird{\n    public int fly() {\n        return 10000;\n    }\n    \n    public String getName() {\n        return \"大雁\";\n    }\n}\n\nWildGoose wildGoose = new WildGoose();\ntest.test(wildGoose);"]],[1368,1368],[1581,1581]]],[1563881183544,["GJX@GJXAIOU",[[-1,1591,"    "]],[1591,1595],[1591,1591]]],[1563881185947,["GJX@GJXAIOU",[[-1,1637,"     "]],[1637,1642],[1637,1637]]],[1563881187953,["GJX@GJXAIOU",[[-1,1587,"\n"]],[1587,1587],[1586,1586]]],[1563881188416,["GJX@GJXAIOU",[[-1,1586,"\n"]],[1586,1586],[1585,1585]]],[1563881193160,["GJX@GJXAIOU",[[-1,1786,"   "]],[1789,1789],[1786,1786]]],[1563881194648,["GJX@GJXAIOU",[[-1,1815," "]],[1816,1816],[1815,1815]]],[1563881195932,["GJX@GJXAIOU",[[-1,1885," "]],[1886,1886],[1885,1885]]],[1563881199211,["GJX@GJXAIOU",[[-1,1813,"  "],[-1,1883,"  "],[-1,1910," "],[-1,1914," "],[-1,1948,"  "],[-1,1997,"  "]],[1815,2045],[1813,2035]]],[1563881200216,["GJX@GJXAIOU",[[-1,1812," "],[-1,1879,"  "],[-1,1906,"  "],[-1,1944,"  "],[-1,1989,"  "]],[1813,2035],[1812,2027]]],[1563881207480,["GJX@GJXAIOU",[[-1,1983,"**"],[-1,1987,"**"]],[1985,1985],[1983,1985]]],[1563881209113,["GJX@GJXAIOU",[[-1,1939,"**"],[-1,1943,"**"]],[1942,1942],[1939,1941]]],[1563881210178,["GJX@GJXAIOU",[[-1,1904,"**"],[-1,1908,"**"]],[1908,1908],[1904,1906]]],[1563881211389,["GJX@GJXAIOU",[[1,1902,"****"]],[1902,1902],[1904,1904]]],[1563881214103,["GJX@GJXAIOU",[[-1,1818,"**"]],[1818,1820],[1818,1818]]],[1563881216258,["GJX@GJXAIOU",[[-1,1812,"**  "]],[1813,1816],[1812,1812]]],[1563881217983,["GJX@GJXAIOU",[[-1,1872,"**"],[-1,1876,"**"]],[1876,1876],[1872,1874]]],[1563881220457,["GJX@GJXAIOU",[[-1,1928," "]],[1929,1929],[1928,1928]]],[1563881223555,["GJX@GJXAIOU",[[-1,1892,"****"]],[1892,1896],[1892,1892]]],[1563881224760,["GJX@GJXAIOU",[[-1,1871,"\n"]],[1871,1871],[1870,1870]]],[1563881225488,["GJX@GJXAIOU",[[-1,1891,"\n"]],[1891,1891],[1890,1890]]],[1563881226161,["GJX@GJXAIOU",[[-1,1920,"\n"]],[1920,1920],[1919,1919]]],[1563881227087,["GJX@GJXAIOU",[[-1,1959,"\n"]],[1959,1959],[1958,1958]]],[1563881230447,["GJX@GJXAIOU",[[-1,2025,"   "]],[2027,2027],[2024,2024]]],[1563881237306,["GJX@GJXAIOU",[[-1,2171,"    "]],[2175,2175],[2171,2171]]],[1563881241538,["GJX@GJXAIOU",[[-1,2280,"   "]],[2283,2283],[2280,2280]]],[1563881252601,["GJX@GJXAIOU",[[-1,2388,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class OuterClass { public void display(final String name,String age){ class InnerClass{ void display(){\n                System.out.println(name);\n            }\n        }\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n"]],[2388,2747],[2388,2388]]],[1563881253201,["GJX@GJXAIOU",[[1,2388,"```"]],[2388,2388],[2391,2391]]],[1563881253228,["GJX@GJXAIOU",[[1,2391,"language\n```\n"]],[2391,2391],[2391,2399]]],[1563881254017,["GJX@GJXAIOU",[[-1,2391,"language"],[1,2399,"j"]],[2391,2399],[2392,2392]]],[1563881255249,["GJX@GJXAIOU",[[1,2392,"ava"]],[2392,2392],[2395,2395]]],[1563881255416,["GJX@GJXAIOU",[[1,2396,"\n"]],[2395,2395],[2396,2396]]],[1563881256248,["GJX@GJXAIOU",[[1,2396,"public class OuterClass {\n    public void display(final String name,String age){\n        class InnerClass{\n            void display(){\n                System.out.println(name);\n            }\n        }\n    }\n}"]],[2396,2396],[2604,2604]]],[1563881259417,["GJX@GJXAIOU",[[-1,2613,"   "]],[2616,2616],[2613,2613]]],[1563881266260,["GJX@GJXAIOU",[[-1,2664,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class OuterClass$InnerClass { public InnerClass(String name,String age){ this.InnerClass$name = name; this.InnerClass$age = age;\n    } public void display(){\n        System.out.println(this.InnerClass$name + \"----\" + this.InnerClass$age );\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[2664,3092],[2664,2664]]],[1563881266868,["GJX@GJXAIOU",[[1,2664,"```"]],[2664,2664],[2667,2667]]],[1563881266894,["GJX@GJXAIOU",[[1,2667,"language\n```\n"]],[2667,2667],[2667,2675]]],[1563881267611,["GJX@GJXAIOU",[[-1,2667,"language"],[1,2675,"j"]],[2667,2675],[2668,2668]]],[1563881267729,["GJX@GJXAIOU",[[1,2668,"s"]],[2668,2668],[2669,2669]]],[1563881268489,["GJX@GJXAIOU",[[-1,2668,"s"]],[2669,2669],[2668,2668]]],[1563881269436,["GJX@GJXAIOU",[[1,2668,"ava"]],[2668,2668],[2671,2671]]],[1563881269640,["GJX@GJXAIOU",[[1,2672,"\n"]],[2671,2671],[2672,2672]]],[1563881270561,["GJX@GJXAIOU",[[1,2672,"public class OuterClass$InnerClass {\n    public InnerClass(String name,String age){\n        this.InnerClass$name = name;\n        this.InnerClass$age = age;\n    }\n    \n    \n    public void display(){\n        System.out.println(this.InnerClass$name + \"----\" + this.InnerClass$age );\n    }\n}"]],[2672,2672],[2960,2960]]],[1563881272587,["GJX@GJXAIOU",[[-1,2663,"\n"]],[2663,2663],[2662,2662]]],[1563881276865,["GJX@GJXAIOU",[[-1,2969,"   "]],[2972,2972],[2969,2969]]],[1563881278153,["GJX@GJXAIOU",[[-1,3056,"   "]],[3059,3059],[3056,3056]]],[1563881284012,["GJX@GJXAIOU",[[-1,3273,"  "]],[3275,3275],[3273,3273]]],[1563881285386,["GJX@GJXAIOU",[[-1,3269,"    "]],[3273,3273],[3269,3269]]],[1563881290336,["GJX@GJXAIOU",[[-1,3344,"      "]],[3350,3350],[3344,3344]]],[1563881301857,["GJX@GJXAIOU",[[-1,3509,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"],[-1,3595,"\npublic class OutClass { public InnerClass getInnerClass(final int age,final String name){ return new InnerClass() { int age_ ;\n            String name_; //构造代码块完成初始化工作\n { if(0 < age && age < 200){\n                    age_ = age;\n                    name_ = name;\n                }\n            } public String getName() { return name_;\n            } public int getAge() { return age_;\n            }\n        };\n    } public static void main(String[] args) {\n        OutClass out = new OutClass();\n\n        InnerClass inner_1 = out.getInnerClass(201, \"chenssy\");\n        System.out.println(inner_1.getName());\n\n        InnerClass inner_2 = out.getInnerClass(23, \"chenssy\");\n        System.out.println(inner_2.getName());\n    }\n}"]],[3509,4321],[3509,3509]]],[1563881302610,["GJX@GJXAIOU",[[-1,3509,"\n"],[1,3510,"`"]],[3509,3509],[3510,3510]]],[1563881302998,["GJX@GJXAIOU",[[1,3510,"``"]],[3510,3510],[3512,3512]]],[1563881303024,["GJX@GJXAIOU",[[1,3512,"language\n```\n"]],[3512,3512],[3512,3520]]],[1563881303651,["GJX@GJXAIOU",[[-1,3512,"language"],[1,3520,"j"]],[3512,3520],[3513,3513]]],[1563881304620,["GJX@GJXAIOU",[[1,3513,"ac"]],[3513,3513],[3515,3515]]],[1563881305121,["GJX@GJXAIOU",[[-1,3514,"c"]],[3515,3515],[3514,3514]]],[1563881305314,["GJX@GJXAIOU",[[1,3514,"va"]],[3514,3514],[3516,3516]]],[1563881305937,["GJX@GJXAIOU",[[1,3517,"\n"]],[3516,3516],[3517,3517]]],[1563881306933,["GJX@GJXAIOU",[[1,3517,"public class OutClass {\n    public InnerClass getInnerClass(final int age,final String name){\n        return new InnerClass() {\n            int age_ ;\n            String name_;\n            //构造代码块完成初始化工作\n            {\n                if(0 < age && age < 200){\n                    age_ = age;\n                    name_ = name;\n                }\n            }\n            public String getName() {\n                return name_;\n            }\n            \n            public int getAge() {\n                return age_;\n            }\n        };\n    }\n    \n    public static void main(String[] args) {\n        OutClass out = new OutClass();\n        \n        InnerClass inner_1 = out.getInnerClass(201, \"chenssy\");\n        System.out.println(inner_1.getName());\n        \n        InnerClass inner_2 = out.getInnerClass(23, \"chenssy\");\n        System.out.println(inner_2.getName());\n    }\n}"]],[3517,3517],[4399,4399]]],[1563881338505,["GJX@GJXAIOU",[[1,199,"      \n"]],[198,198],[205,205]]],[1563881339507,["GJX@GJXAIOU",[[1,205,"===="]],[205,205],[207,207]]],[1563881341593,["GJX@GJXAIOU",[[1,207,"zhuozhon"]],[207,207],[215,215]]],[1563881343104,["GJX@GJXAIOU",[[-1,207,"zhuozhon"]],[215,215],[207,207]]],[1563881361466,["GJX@GJXAIOU",[[1,207,"着重看匿名内部类和分拆之后的代码对比"]],[207,207],[225,225]]]],null,"GJX@GJXAIOU"]]}