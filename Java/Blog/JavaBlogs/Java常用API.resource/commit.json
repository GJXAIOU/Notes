{"compress":true,"commitItems":[["98b8f0d7-e44d-4d1d-a5f3-4b091085e28b",1561879882168,"",[[1561879831745,["GJX@GJXAIOU",[[1,0,"# Java常用API\n\n\n\n"]],[0,0],[14,14]]],[1561879838228,["GJX@GJXAIOU",[[1,14,"# 1 Object对象\n\n面向对象的核心思想:“找合适的对象，做适合的事情”。\n\n合适的对象：\n\n1. 自己描述类，自己创建对象。\n\n2. sun已经描述了好多常用的类，可以使用这些类创建对象。\n\nAPI（Application Program Interface）\n\n sun定义的那么多类的终极父类是Object。Object描述的是所有类的通用属性与方法。\n\n## 1.1 toString方法\n\n ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)\n\ntoString() 返回对象的描述信息 java.lang.Object@de6ced 类名@哈希码值的十六进制形式。\n\n直接输入一个对象的时候，会调用对象的toString方法。\n\n练习：自定义一个Person类，打印该对象的描述信息，要求描述信息为：姓名 — 年龄\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\n\n问题：调用p的toString方法时，打印出来的信息是类名+内存地址值。不符合要求。根据我们之前学的继承，假如父类的指定的功能不能满足要求，那么子类可以复写父类的功能函数。那么该对象再调用toString()方法时，则会调用子类复写的toString方法。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)\n\n**编程习惯：**开发者要对自定义的类重写toString()，对对象做详细的说明\n\n## 1.2 equals方法\n\n**equals()** 返回的是比较的结果  如果相等返回true，否则false，比较的是对象的内存地址值。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)\n\n问题：比较两个人是否是同一个人，根据两个人的名字判断。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)\n\n**问题：**如果根据名字去作为判断两个人是否是同一个时，明显p与p1是同一个人，但是程序输入却不是同一个人。不符合我们现实生活的要求。\n\n**解决： **根据我们学的继承中的函数复写，如果父类的函数不能满足我们目前的要求，那么就可以在子类把该功能复写，达到复合我们的要求。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)\n\n**编程习惯：**开发者要对自定义的类重写equals()，使得比较两个对象的时候比较对象的属性是否相等，而不是内存地址。\n\n## 1.3 hashCode方法\n\n**hashCode()** 返回该对象的哈希码值： 采用操作系统底层实现的哈希算法。 同一个对象的哈希码值是唯一的。\n\njava规定如果两个对象equals返回true，那么这两个对象的hashCode码必须一致。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)\n\n# 2 String类\n\nString类描述的是文本字符串序列。  留言 QQ 写日志。\n\n**创建String****类的对象的两种方式：**\n\n1. \"\"直接赋值法\n\n2. new关键字法\n\n## 2.1 字符串对象的比较\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)\n\nString Str = “jack”这个语句会先检查字符串常量池是否存放这个”jack1”这个字符串对象，如果没有存在，那么就会在字符串常量池中创建这个字符串对象，如果存在直接返回该字符串的内存地址值。\n\nString str3 = new String(“jack”) 该语句会创建两个对象,首先会先检查字符串常量池中存不存在jack这个字符串对象，如果不存在就会创建，如果存在就返回内存地址值。创建了出来之后，new String这个语句就会在堆内存中开辟一个字符串对象。总共两个对象。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n\n## 2.2 获取方法\n\n| \n\nint length() 获取字符串的长度\n\nchar charAt(int index) 获取特定位置的字符 (角标越界)\n\nint indexOf(String str) 获取特定字符的位置(overload)\n\nint lastIndexOf(int ch) 获取最后一个字符的位置\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)\n\n## 2.3 判断方法\n\n| \n\nboolean endsWith(String str) 是否以指定字符结束\n\nboolean isEmpty()是否长度为0 如：“” null V1.6\n\nboolean contains(CharSequences) 是否包含指定序列 应用：搜索\n\nboolean equals(Object anObject) 是否相等\n\nboolean equalsIgnoreCase(String anotherString) 忽略大小写是否相等\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)\n\n## 2.4 转换方法\n\n| \n\nString(char[] value) 将字符数组转换为字符串\n\nString(char[] value, int offset, int count)\n\nStatic String valueOf(char[] data)\n\nstatic String valueOf(char[] data, int offset, int count)\n\nchar[] toCharArray() 将字符串转换为字符数组\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n## 2.5 其他方法\n\n| \n\nString replace(char oldChar, char newChar) 替换\n\nString[] split(String regex) 切割\n\nString substring(int beginIndex)\n\nString substring(int beginIndex, int endIndex)截取字串\n\nString toUpperCase() 转大写\n\nString toLowerCase() 转小写\n\nString trim() 去除空格\n\n |\n\n## 2.6 练习\n\n1. 去除字符串两边空格的函数。\n\n| \n\n**public**  **class** Demo1 {\n\n// 定义一个祛除字符串两边空格的函数\n\n**public**  **static** String trim( String str ){\n\n  // 0、定义求字串需要的起始索引变量\n\n  **int** start = 0;\n\n  **int** end = str.length()-1;\n\n  // 1. for循环遍历字符串对象的每一个字符\n\n  **for** (**int** i = 0; i<str.length() ; i++ )\n\n {\n\n  **if** ( str.charAt(i) == ' ' )\n\n {\n\n start++;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( start );\n\n  **for** (; end<str.length() && end >= 0; )\n\n {\n\n  **if** ( str.charAt(end) == ' ' )\n\n {\n\n end--;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( end );\n\n  // 2\\. 求子串\n\n  **if**( start < end ){\n\n **return** str.substring( start , (end+1) );\n\n }**else**{\n\n **return**  \"_\";\n\n }\n\n |\n\n2. 获取上传文件名 \"D:\\\\20120512\\\\day12\\\\Demo1.java\"。\n\n| \n\n**public**  **static** String getFileName2( String path ){\n\n**return** path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n\n }\n\n}\n\n |\n\n3. 将字符串对象中存储的字符反序。\n\n| \n\n// 将字符串对象中存储的字符反序\n\n  **public**  **static** String reaverseString( String src ){\n\n  // 1\\. 将字符串转换为字符数组\n\n  **char** chs[] = src.toCharArray();\n\n  // 2\\. 循环交换\n\n  **for** ( **int** start = 0 , end = chs.length - 1; start < end ; start++,end-- )\n\n {\n\n  // 3\\. 数据交换\n\n  **char** temp = chs[end];\n\n chs[end] = chs[start];\n\n chs[start] = temp;\n\n }\n\n  // 4\\. 将字符数组转换为字符串\n\n  **return**  **new** String( chs );\n\n }\n\n |\n\n4\\. 求一个子串在整串中出现的次数\n\n| \n\n** public**  **static**  **int** getCount( String src , String tag ){\n\n  // 0\\. 定义索引变量和统计个数的变量\n\n  **int** index = 0;\n\n  **int** count = 0;\n\n  // 1\\. 写循环判断\n\n  **while** ( ( index = src.indexOf(tag) ) != -1 ) // jackjava\n\n {\n\n  // 2\\. 求字串\n\n System._out_.println( src );\n\n src = src.substring( index + tag.length() ); // index 4 + 4 = 8\n\n System._out_.print( src.length() + \" : \" + index + \" : \" + tag.length() );\n\n  // 3\\. 累加\n\n count++;\n\n }\n\n  **return** count;\n\n }\n\n |\n\n# 3 StringBuffer\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n特点：\n\n1. 默认缓冲区的容量是16。\n\n2. StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。\n\n## 3.1 添加方法\n\n| \n\nStringBuffer(\"jack\")     在创建对象的时候赋值\n\nappend()              在缓冲区的尾部添加新的文本对象\n\ninsert()                在指定的下标位置添加新的文本对象\n\n |\n\n| \n\nStringBuffer sb = **new** StringBuffer(\"jack\");\n\nsb.append(**true**);\n\nsb.append('a');\n\nsb.append(97).append(34.0).append(**new**  **char**[]{'o','o'}); // 链式编程\n\nSystem._out_.println( sb.toString() ); // 输出缓冲区的中文本数据\n\nsb = **new** StringBuffer(\"jack\");\n\nsb.insert( 2, \"java\" ); // jajavack\n\nSystem._out_.println( sb.toString() ); \n\n |\n\n## 3.2 查看\n\n| \n\ntoString() 返回这个容器的字符串\n\nindexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。\n\nsubstring(int start) 从开始的位置开始截取字符串\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n## 3.3 修改(U)\n\n| \n\nreplace(int start int endString str)  使用给定 `String`  中的字符替换此序列的子字符串中的字符。该子字符串从指定的 `start`  处开始，一直到索引 `end - 1`  处的字符\n\nsetCharAt(int index char ch) 指定索引位置替换一个字符\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n## 3.4 删除(D)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n## 3.5 反序\n\nreverse() 把字符串反序输出。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n# 4 StringBuilder\n\nStringBuilder 是JDK1.5之后提出的，线程不安全，但是效率要高。用法与StringBuffer类似。\n\n# 5 System\n\nSystem 可以获取系统的属性。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n# 6 Runtime\n\nRuntime 类主要描述的是应用程序运行的环境。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n# 7 Date\n\nDate 类封装的是系统的当前时间.。但是Date已经过时了，sun推荐使用Calendar类。\n\nCalendar: 该类是一个日历的类，封装了年月日时分秒时区。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n日期格式化类：SimpleDateFormat\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n# 8 Math\n\nMath：类封装了很多数学的功能。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n练习：生成一个随机码\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)"]],[14,14],[7554,7554]]],[1561879899130,["GJX@GJXAIOU",[[1,15,"#"]],[16,16],[27,27]]],[1561879904539,["GJX@GJXAIOU",[[1,18,"。"],[-1,1200," "],[1,1201," "],[-1,4635," "],[1,4636," "],[-1,5388,"    "],[1,5392,"    "],[-1,5413,"             "],[1,5426,"             "],[-1,5452,"               "],[1,5467,"               "],[-1,5821," "],[1,5822," "],[-1,6089," "],[1,6090," "]],[18,18],[19,19]]],[1561879906057,["GJX@GJXAIOU",[[-1,18,"。"]],[19,19],[18,18]]],[1561879907393,["GJX@GJXAIOU",[[1,18,"."]],[18,18],[19,19]]],[1561879916368,["GJX@GJXAIOU",[[1,116,"    "]],[116,116],[120,120]]],[1561879925777,["GJX@GJXAIOU",[[-1,65,"\n"]],[65,65],[64,64]]],[1561879926526,["GJX@GJXAIOU",[[-1,82,"\n"]],[82,82],[81,81]]],[1561879927313,["GJX@GJXAIOU",[[-1,113,"\n"]],[113,113],[112,112]]],[1561879936617,["GJX@GJXAIOU",[[-1,15,"#"]],[16,16],[15,15]]],[1561879943500,["GJX@GJXAIOU",[[-1,219," ![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg)"]],[219,300],[219,219]]],[1561879946226,["GJX@GJXAIOU",[[1,219,"```"]],[219,219],[222,222]]],[1561879946263,["GJX@GJXAIOU",[[1,222,"language\n```\n"]],[222,222],[222,230]]],[1561879948101,["GJX@GJXAIOU",[[-1,222,"language"],[1,230,"j"]],[222,230],[223,223]]],[1561879948775,["GJX@GJXAIOU",[[1,223,"ava"]],[223,223],[226,226]]],[1561879948957,["GJX@GJXAIOU",[[1,227,"\n"]],[226,226],[227,227]]],[1561879956605,["GJX@GJXAIOU",[[1,227,"public static vois "]],[227,227],[246,246]]],[1561879957259,["GJX@GJXAIOU",[[-1,244,"s "]],[246,246],[244,244]]],[1561879958533,["GJX@GJXAIOU",[[1,244,"d man"]],[244,244],[249,249]]],[1561879959238,["GJX@GJXAIOU",[[-1,248,"n"]],[249,249],[248,248]]],[1561879963778,["GJX@GJXAIOU",[[1,248,"in()"]],[248,248],[252,252]]],[1561879965527,["GJX@GJXAIOU",[[1,251,"[]"]],[251,251],[253,253]]],[1561879971215,["GJX@GJXAIOU",[[1,251,"S听"]],[251,251],[253,253]]],[1561879971886,["GJX@GJXAIOU",[[-1,252,"听"]],[253,253],[252,252]]],[1561879973653,["GJX@GJXAIOU",[[1,252,"tring"]],[252,252],[257,257]]],[1561879977650,["GJX@GJXAIOU",[[1,259," args"]],[259,259],[264,264]]],[1561879989303,["GJX@GJXAIOU",[[1,265,"{"]],[265,265],[266,266]]],[1561879989578,["GJX@GJXAIOU",[[1,267,"\n"]],[266,266],[267,267]]],[1561879991298,["GJX@GJXAIOU",[[1,268,"\n"]],[267,267],[268,268]]],[1561879991973,["GJX@GJXAIOU",[[1,268,"}"]],[268,268],[269,269]]],[1561879999528,["GJX@GJXAIOU",[[1,267,"  Object 0"]],[267,267],[277,277]]],[1561880000028,["GJX@GJXAIOU",[[-1,276,"0"]],[277,277],[276,276]]],[1561880001522,["GJX@GJXAIOU",[[1,276,"o ="]],[276,276],[279,279]]],[1561880008887,["GJX@GJXAIOU",[[1,279," new Object();"]],[279,279],[293,293]]],[1561880010858,["GJX@GJXAIOU",[[1,294,"  \n"]],[293,293],[296,296]]],[1561880013263,["GJX@GJXAIOU",[[1,296,"syte"]],[296,296],[300,300]]],[1561880014419,["GJX@GJXAIOU",[[-1,295," syte"]],[300,300],[295,295]]],[1561880019677,["GJX@GJXAIOU",[[1,295," Syts"]],[295,295],[300,300]]],[1561880020346,["GJX@GJXAIOU",[[-1,298,"ts"]],[300,300],[298,298]]],[1561880028824,["GJX@GJXAIOU",[[1,298,"stem.out.printlv();"]],[298,298],[317,317]]],[1561880030997,["GJX@GJXAIOU",[[-1,313,"v"]],[314,314],[313,313]]],[1561880031698,["GJX@GJXAIOU",[[1,313,"n"]],[313,313],[314,314]]],[1561880034055,["GJX@GJXAIOU",[[1,315,"o"]],[315,315],[316,316]]],[1561880040513,["GJX@GJXAIOU",[[1,318," //jaa"]],[318,318],[324,324]]],[1561880041011,["GJX@GJXAIOU",[[-1,323,"a"]],[324,324],[323,323]]],[1561880041294,["GJX@GJXAIOU",[[1,323,"a"]],[323,323],[324,324]]],[1561880041988,["GJX@GJXAIOU",[[-1,323,"a"]],[324,324],[323,323]]],[1561880042732,["GJX@GJXAIOU",[[1,323,"ba."]],[323,323],[326,326]]],[1561880043437,["GJX@GJXAIOU",[[-1,323,"ba."]],[326,326],[323,323]]],[1561880060474,["GJX@GJXAIOU",[[1,323,"va.lang.Object@de6ced"]],[323,323],[344,344]]],[1561880065668,["GJX@GJXAIOU",[[-1,352,"\n"]],[352,352],[351,351]]],[1561880066417,["GJX@GJXAIOU",[[-1,351,"\n"]],[351,351],[350,350]]],[1561880073197,["GJX@GJXAIOU",[[-1,412,"\n"]],[412,412],[411,411]]],[1561881924870,["GJX@GJXAIOU",[[-1,487,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)"]],[487,567],[487,487]]],[1561881927126,["GJX@GJXAIOU",[[1,487,"```"]],[487,487],[490,490]]],[1561881927164,["GJX@GJXAIOU",[[1,490,"language\n```\n"]],[490,490],[490,498]]],[1561881928233,["GJX@GJXAIOU",[[-1,490,"language"],[1,498,"j"]],[490,498],[491,491]]],[1561881928616,["GJX@GJXAIOU",[[1,491,"ava"]],[491,491],[494,494]]],[1561881928671,["GJX@GJXAIOU",[[1,495,"\n"]],[494,494],[495,495]]],[1561882435319,["GJX@GJXAIOU",[[1,495,"class Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person);\n\t}\n}"]],[495,495],[770,770]]],[1561882438125,["GJX@GJXAIOU",[[1,777,"\n"]],[774,774],[775,775]]],[1561882438549,["GJX@GJXAIOU",[[1,775,"class Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person);\n\t}\n}"]],[775,775],[1050,1050]]],[1561882439962,["GJX@GJXAIOU",[[-1,775,"class Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person);\n\t}\n}"]],[1050,1050],[775,775]]],[1561882442314,["GJX@GJXAIOU",[[1,775,"study.Person@311d617d"]],[775,775],[796,796]]],[1561882447026,["GJX@GJXAIOU",[[1,775,"//dui"]],[775,775],[780,780]]],[1561882447645,["GJX@GJXAIOU",[[-1,777,"dui"]],[780,780],[777,777]]],[1561882449364,["GJX@GJXAIOU",[[1,777,"对象 "]],[777,777],[779,779]]],[1561882457027,["GJX@GJXAIOU",[[1,779,"的描述信息"]],[779,779],[784,784]]],[1561882465726,["GJX@GJXAIOU",[[-1,775,"//对象的描述信息 study.Person@311d617d"]],[775,806],[775,775]]],[1561882467644,["GJX@GJXAIOU",[[1,765,"//对象的描述信息 study.Person@311d617d"]],[765,765],[796,796]]],[1561882469073,["GJX@GJXAIOU",[[1,765," "]],[765,765],[766,766]]],[1561882489113,["GJX@GJXAIOU",[[1,816,"erson "]],[816,816],[821,821]]],[1561882493609,["GJX@GJXAIOU",[[1,843,"`"]],[843,843],[844,844]]],[1561882494766,["GJX@GJXAIOU",[[1,852,"`"]],[852,852],[853,853]]],[1561882505893,["GJX@GJXAIOU",[[-1,809,"\n"]],[809,809],[808,808]]],[1561882506012,["GJX@GJXAIOU",[[-1,808,"\n"]],[808,808],[807,807]]],[1561882930425,["GJX@GJXAIOU",[[-1,946,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg)"],[1,1026,"·"]],[946,946],[947,947]]],[1561882931032,["GJX@GJXAIOU",[[1,947,"··"]],[947,947],[949,949]]],[1561882932404,["GJX@GJXAIOU",[[-1,946,"···"]],[949,949],[946,946]]],[1561882933353,["GJX@GJXAIOU",[[1,946,"```"]],[946,946],[949,949]]],[1561882933390,["GJX@GJXAIOU",[[1,949,"language\n```\n"]],[949,949],[949,957]]],[1561882934190,["GJX@GJXAIOU",[[-1,949,"language"],[1,957,"j"]],[949,957],[950,950]]],[1561882934620,["GJX@GJXAIOU",[[1,950,"ava"]],[950,950],[953,953]]],[1561882934681,["GJX@GJXAIOU",[[1,954,"\n"]],[953,953],[954,954]]],[1561882935744,["GJX@GJXAIOU",[[1,954,"class Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [age=\" + this.age + \", name=\" + this.name + \"]\";\n\t}\n\t\n}"]],[954,954],[1210,1210]]],[1561882941908,["GJX@GJXAIOU",[[1,1098,"  "]],[1098,1098],[1100,1100]]],[1561882950046,["GJX@GJXAIOU",[[1,1100,"//可以使用Alt+ "]],[1100,1100],[1111,1111]]],[1561882951910,["GJX@GJXAIOU",[[1,1109," "]],[1109,1109],[1110,1110]]],[1561882952582,["GJX@GJXAIOU",[[1,1112," "]],[1111,1111],[1112,1112]]],[1561882956667,["GJX@GJXAIOU",[[1,1112,"shift"]],[1112,1112],[1117,1117]]],[1561882957433,["GJX@GJXAIOU",[[1,1118," "]],[1117,1117],[1118,1118]]],[1561882957959,["GJX@GJXAIOU",[[1,1118,"+"]],[1118,1118],[1119,1119]]],[1561882958145,["GJX@GJXAIOU",[[1,1120," "]],[1119,1119],[1120,1120]]],[1561882959338,["GJX@GJXAIOU",[[1,1120,"s"]],[1120,1120],[1121,1121]]],[1561882960197,["GJX@GJXAIOU",[[1,1122," "]],[1121,1121],[1122,1122]]],[1561882965702,["GJX@GJXAIOU",[[1,1122,"然后generate"]],[1122,1122],[1132,1132]]],[1561882967606,["GJX@GJXAIOU",[[1,1133," "]],[1132,1132],[1133,1133]]],[1561882971828,["GJX@GJXAIOU",[[1,1133,"toString"]],[1133,1133],[1141,1141]]],[1561882978119,["GJX@GJXAIOU",[[1,1304,"\n"]],[1303,1303],[1304,1304]]],[1561882978263,["GJX@GJXAIOU",[[1,1305,"\n"]],[1304,1304],[1305,1305]]],[1561882982972,["GJX@GJXAIOU",[[-1,1267,"："]],[1268,1268],[1267,1267]]],[1561882984458,["GJX@GJXAIOU",[[1,1267,":"]],[1267,1267],[1268,1268]]],[1561882985983,["GJX@GJXAIOU",[[1,1270," "]],[1270,1270],[1271,1271]]],[1561882994943,["GJX@GJXAIOU",[[1,217,"y"]],[217,217],[218,218]]],[1561882994979,["GJX@GJXAIOU",[[1,217," "]],[218,218],[219,219]]],[1561882995060,["GJX@GJXAIOU",[[1,219,"i"]],[219,219],[220,220]]],[1561882995909,["GJX@GJXAIOU",[[-1,218,"yi"]],[220,220],[218,218]]],[1561882998687,["GJX@GJXAIOU",[[1,218,"以及重写"]],[218,218],[222,222]]],[1561883001668,["GJX@GJXAIOU",[[-1,217," "]],[218,218],[217,217]]],[1561883007700,["GJX@GJXAIOU",[[1,958,"\n"]],[957,957],[958,958]]],[1561883018089,["GJX@GJXAIOU",[[1,958,"//tostring方法重写"]],[958,958],[972,972]]],[1561883072549,["GJX@GJXAIOU",[[1,1401,"`"],[1,1481,"`"]],[1401,1481],[1401,1483]]],[1561883072727,["GJX@GJXAIOU",[[-1,1401,"`"],[-1,1482,"`"]],[1401,1483],[1401,1481]]],[1561883072893,["GJX@GJXAIOU",[[1,1401,"`"],[1,1481,"`"]],[1401,1481],[1401,1483]]],[1561883074172,["GJX@GJXAIOU",[[-1,1401,"`![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg)`"]],[1401,1483],[1401,1401]]],[1561883074698,["GJX@GJXAIOU",[[1,1401,"```"]],[1401,1401],[1404,1404]]],[1561883074735,["GJX@GJXAIOU",[[1,1404,"language\n```\n"]],[1404,1404],[1404,1412]]],[1561883075705,["GJX@GJXAIOU",[[-1,1404,"language"],[1,1412,"j"]],[1404,1412],[1405,1405]]],[1561883077105,["GJX@GJXAIOU",[[1,1405,"ava"]],[1405,1405],[1408,1408]]],[1561883077252,["GJX@GJXAIOU",[[1,1409,"\n"]],[1408,1408],[1409,1409]]],[1561883078204,["GJX@GJXAIOU",[[1,1409,"public static void main(String[] args){\n  Object o = new Object();\n  System.out.println(o); //java.lang.Object@de6ced\n}"]],[1409,1409],[1528,1528]]],[1561883082606,["GJX@GJXAIOU",[[1,1459,"1"]],[1459,1459],[1460,1460]]],[1561883088004,["GJX@GJXAIOU",[[1,1479,"\n  "]],[1476,1476],[1479,1479]]],[1561883088492,["GJX@GJXAIOU",[[1,1479,"Object o1 = new Object();"]],[1479,1479],[1504,1504]]],[1561883090644,["GJX@GJXAIOU",[[-1,1487,"1"]],[1488,1488],[1487,1487]]],[1561883090895,["GJX@GJXAIOU",[[1,1487,"2"]],[1487,1487],[1488,1488]]],[1561883093805,["GJX@GJXAIOU",[[-1,1526,"o"]],[1527,1527],[1526,1526]]],[1561883097559,["GJX@GJXAIOU",[[1,1526,"o1.que"]],[1526,1526],[1532,1532]]],[1561883098413,["GJX@GJXAIOU",[[-1,1529,"que"]],[1532,1532],[1529,1529]]],[1561883099022,["GJX@GJXAIOU",[[1,1529,"eu"]],[1529,1529],[1531,1531]]],[1561883099903,["GJX@GJXAIOU",[[-1,1530,"u"]],[1531,1531],[1530,1530]]],[1561883102432,["GJX@GJXAIOU",[[1,1530,"quals("]],[1530,1530],[1536,1536]]],[1561883102520,["GJX@GJXAIOU",[[1,1537,")"]],[1536,1536],[1537,1537]]],[1561883104766,["GJX@GJXAIOU",[[1,1536,"o2"]],[1536,1536],[1538,1538]]],[1561883107662,["GJX@GJXAIOU",[[-1,1544,"java.lang.Object@de6ced"],[1,1567,"f"]],[1544,1567],[1545,1545]]],[1561883108408,["GJX@GJXAIOU",[[1,1545,"alse"]],[1545,1545],[1549,1549]]],[1561883132463,["GJX@GJXAIOU",[[1,1552,"\n"]],[1551,1551],[1552,1552]]],[1561883132581,["GJX@GJXAIOU",[[1,1553,"\n"]],[1552,1552],[1553,1553]]],[1561883133807,["GJX@GJXAIOU",[[1,1554,"\n"]],[1553,1553],[1554,1554]]],[1561883139480,["GJX@GJXAIOU",[[1,1555,"\n"]],[1552,1552],[1553,1553]]],[1561883139919,["GJX@GJXAIOU",[[1,1553,"public static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = new Object();\n  System.out.println(o1.equals(o2)); //false\n}"]],[1553,1553],[1695,1695]]],[1561883146664,["GJX@GJXAIOU",[[-1,1635,"new Object()"],[1,1647,"o"]],[1635,1647],[1636,1636]]],[1561883146959,["GJX@GJXAIOU",[[1,1636,"1"]],[1636,1636],[1637,1637]]],[1561883155191,["GJX@GJXAIOU",[[-1,1678,"false"],[1,1683,"t"]],[1678,1683],[1679,1679]]],[1561883155694,["GJX@GJXAIOU",[[1,1679,"rue"]],[1679,1679],[1682,1682]]],[1561883161485,["GJX@GJXAIOU",[[-1,1693,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg)"]],[1693,1773],[1693,1693]]],[1561883161949,["GJX@GJXAIOU",[[-1,1694,"\n"]],[1693,1693],[1692,1692]]],[1561883162342,["GJX@GJXAIOU",[[-1,1693,"\n"]],[1692,1692],[1691,1691]]],[1561883162733,["GJX@GJXAIOU",[[-1,1692,"\n"]],[1691,1691],[1690,1690]]],[1561883164597,["GJX@GJXAIOU",[[-1,1686,"\n"]],[1686,1686],[1685,1685]]],[1561883165182,["GJX@GJXAIOU",[[-1,1685,"\n"]],[1685,1685],[1684,1684]]],[1561883168636,["GJX@GJXAIOU",[[-1,1400,"\n"]],[1400,1400],[1399,1399]]],[1561883205653,["GJX@GJXAIOU",[[-1,1718,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg)"]],[1718,1798],[1718,1718]]],[1561883206056,["GJX@GJXAIOU",[[-1,1719,"\n"]],[1718,1718],[1717,1717]]],[1561883206964,["GJX@GJXAIOU",[[-1,1718,"\n"]],[1717,1717],[1716,1716]]],[1561883694438,["GJX@GJXAIOU",[[-1,1857,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg)"]],[1857,1937],[1857,1857]]],[1561883697560,["GJX@GJXAIOU",[[1,1857,"\t@Override\n\tpublic boolean equals(Object arg0) {\n\t\tPerson person = (Person)arg0; //强制类型转换\n\t\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n\t}"]],[1857,1857],[2020,2020]]],[1561883705158,["GJX@GJXAIOU",[[1,1856,"```"]],[1856,1856],[1859,1859]]],[1561883705198,["GJX@GJXAIOU",[[1,1859,"language\n```\n"]],[1859,1859],[1859,1867]]],[1561883707398,["GJX@GJXAIOU",[[-1,1859,"language"],[1,1867,"j"]],[1859,1867],[1860,1860]]],[1561883707803,["GJX@GJXAIOU",[[1,1860,"ava"]],[1860,1860],[1863,1863]]],[1561883707957,["GJX@GJXAIOU",[[1,1864,"\n"]],[1863,1863],[1864,1864]]],[1561883710317,["GJX@GJXAIOU",[[-1,1865,"```\n"]],[1864,1868],[1864,1864]]],[1561883712548,["GJX@GJXAIOU",[[1,2031,"```\n"]],[2030,2030],[2034,2034]]],[1561883714340,["GJX@GJXAIOU",[[-1,1865,"\n"]],[1865,1865],[1864,1864]]],[1561883714496,["GJX@GJXAIOU",[[-1,1864,"\n"]],[1864,1864],[1863,1863]]],[1561883721445,["GJX@GJXAIOU",[[-1,1864,"\t"],[-1,1875,"\t"],[-1,1913,"\t"],[-1,1955,"\t"],[-1,2025,"\t"]],[1864,2027],[1864,2022]]],[1561883729495,["GJX@GJXAIOU",[[1,2091,"\n"]],[2091,2091],[2092,2092]]],[1561883729628,["GJX@GJXAIOU",[[1,2092,"\n"]],[2092,2092],[2093,2093]]],[1561884026654,["GJX@GJXAIOU",[[1,2091,"![分割线]($resource/%E5%88%86%E5%89%B2%E7%BA%BF.png)"]],[2091,2091],[2141,2141]]],[1561884033112,["GJX@GJXAIOU",[[-1,2091,"![分割线]($resource/%E5%88%86%E5%89%B2%E7%BA%BF.png)"]],[2091,2140],[2091,2091]]],[1561884097234,["GJX@GJXAIOU",[[1,2220,"()"]],[2220,2220],[2222,2222]]],[1561884100170,["GJX@GJXAIOU",[[1,2221,"shiy"]],[2221,2221],[2225,2225]]],[1561884101300,["GJX@GJXAIOU",[[-1,2220,"(shiy"]],[2225,2225],[2220,2220]]],[1561884103342,["GJX@GJXAIOU",[[1,2220,"(s"]],[2220,2220],[2222,2222]]],[1561884103723,["GJX@GJXAIOU",[[-1,2221,"s"]],[2222,2222],[2221,2221]]],[1561884108450,["GJX@GJXAIOU",[[1,2221,"使用默认的q"]],[2221,2221],[2227,2227]]],[1561884108487,["GJX@GJXAIOU",[[1,2226," "]],[2227,2227],[2228,2228]]],[1561884109412,["GJX@GJXAIOU",[[-1,2227,"q"]],[2228,2228],[2227,2227]]],[1561884110347,["GJX@GJXAIOU",[[1,2227,"eqyu"]],[2227,2227],[2231,2231]]],[1561884111479,["GJX@GJXAIOU",[[-1,2229,"yu"]],[2231,2231],[2229,2229]]],[1561884115160,["GJX@GJXAIOU",[[1,2229,"uals方法"]],[2229,2229],[2235,2235]]],[1561884115197,["GJX@GJXAIOU",[[1,2233," "]],[2235,2235],[2236,2236]]],[1561884116750,["GJX@GJXAIOU",[[1,2236,"的时候"]],[2236,2236],[2239,2239]]],[1561884120188,["GJX@GJXAIOU",[[-1,2242,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg)"]],[2242,2322],[2242,2242]]],[1561884218749,["GJX@GJXAIOU",[[1,2242,"```"]],[2242,2242],[2245,2245]]],[1561884218789,["GJX@GJXAIOU",[[1,2245,"language\n```\n"]],[2245,2245],[2245,2253]]],[1561884219725,["GJX@GJXAIOU",[[-1,2245,"language"],[1,2253,"j"]],[2245,2253],[2246,2246]]],[1561884220120,["GJX@GJXAIOU",[[1,2246,"ava"]],[2246,2246],[2249,2249]]],[1561884220206,["GJX@GJXAIOU",[[1,2250,"\n"]],[2249,2249],[2250,2250]]],[1561884221498,["GJX@GJXAIOU",[[1,2250,"@Override\n\tpublic boolean equals(Object arg0) {\n\t\tPerson person = (Person)arg0; //强制类型转换\n\t\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n\t}\n\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn this.name.hashCode();\n\t}"]],[2250,2250],[2484,2484]]],[1561884229476,["GJX@GJXAIOU",[[-1,2260,"\t"],[-1,2298,"\t"],[-1,2340,"\t"],[-1,2410,"\t"]],[2261,2412],[2260,2408]]],[1561884232246,["GJX@GJXAIOU",[[-1,2411,"\t"],[-1,2422,"\t"],[-1,2448,"\t"],[-1,2478,"\t"]],[2412,2480],[2411,2476]]],[1561884234650,["GJX@GJXAIOU",[[-1,2410,"\n"]],[2410,2410],[2409,2409]]],[1561884239387,["GJX@GJXAIOU",[[1,2241,"****"]],[2241,2241],[2243,2243]]],[1561884240023,["GJX@GJXAIOU",[[1,2243,"yi"]],[2243,2243],[2245,2245]]],[1561884240730,["GJX@GJXAIOU",[[-1,2243,"yi"]],[2245,2245],[2243,2243]]],[1561884247749,["GJX@GJXAIOU",[[1,2243,"一般情况下：重写了q"]],[2243,2243],[2253,2253]]],[1561884247786,["GJX@GJXAIOU",[[1,2252," "]],[2253,2253],[2254,2254]]],[1561884247984,["GJX@GJXAIOU",[[1,2254,"u"]],[2254,2254],[2255,2255]]],[1561884248539,["GJX@GJXAIOU",[[-1,2253,"qu"]],[2255,2255],[2253,2253]]],[1561884253825,["GJX@GJXAIOU",[[1,2253,"equals方法"]],[2253,2253],[2261,2261]]],[1561884253862,["GJX@GJXAIOU",[[1,2259," "]],[2261,2261],[2262,2262]]],[1561884257645,["GJX@GJXAIOU",[[1,2262,"就得重写h"]],[2262,2262],[2267,2267]]],[1561884257683,["GJX@GJXAIOU",[[1,2266," "]],[2267,2267],[2268,2268]]],[1561884261562,["GJX@GJXAIOU",[[1,2268,"ashCode方法"]],[2268,2268],[2277,2277]]],[1561884261599,["GJX@GJXAIOU",[[1,2275," "]],[2277,2277],[2278,2278]]],[1561884280961,["GJX@GJXAIOU",[[1,12,"@toc"]],[12,12],[16,16]]],[1561884285612,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561884285758,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561884288173,["GJX@GJXAIOU",[[1,0,"`"]],[0,0],[1,1]]],[1561884289204,["GJX@GJXAIOU",[[-1,0,"`"]],[1,1],[0,0]]],[1561884289470,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1561884289630,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1561884290136,["GJX@GJXAIOU",[[1,2,"="]],[2,2],[3,3]]],[1561884290979,["GJX@GJXAIOU",[[-1,2,"="]],[3,3],[2,2]]],[1561884291358,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1561884291396,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1561884296027,["GJX@GJXAIOU",[[1,4,"date: ';"]],[4,4],[12,12]]],[1561884296876,["GJX@GJXAIOU",[[-1,11,";"]],[12,12],[11,11]]],[1561884303646,["GJX@GJXAIOU",[[1,11,"2019-6-30'"]],[11,11],[21,21]]],[1561884306220,["GJX@GJXAIOU",[[1,22,"\n"]],[21,21],[22,22]]],[1561884310533,["GJX@GJXAIOU",[[1,22,"tags: "]],[22,22],[28,28]]],[1561884311811,["GJX@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1561884314184,["GJX@GJXAIOU",[[1,29,"- APi"]],[29,29],[34,34]]],[1561884315088,["GJX@GJXAIOU",[[-1,33,"i"]],[34,34],[33,33]]],[1561884315694,["GJX@GJXAIOU",[[1,33,"I"]],[33,33],[34,34]]],[1561884325790,["GJX@GJXAIOU",[[-1,22,"tags: \n- API"]],[22,34],[22,22]]],[1561884327235,["GJX@GJXAIOU",[[1,4,"\n"]],[4,4],[5,5]]],[1561884328301,["GJX@GJXAIOU",[[1,4,"tags: \n- API"]],[4,4],[16,16]]],[1561884330660,["GJX@GJXAIOU",[[-1,35,"\n"]],[35,35],[34,34]]],[1561884335431,["GJX@GJXAIOU",[[1,17,"\n"]],[17,17],[18,18]]],[1561884370455,["GJX@GJXAIOU",[[-1,2599,"  "]],[2601,2601],[2599,2599]]],[1561884371557,["GJX@GJXAIOU",[[1,2599,"l "]],[2599,2599],[2600,2600]]],[1561884371979,["GJX@GJXAIOU",[[1,2600,"iru"]],[2600,2600],[2603,2603]]],[1561884373014,["GJX@GJXAIOU",[[-1,2599,"liru"]],[2603,2603],[2599,2599]]],[1561884373840,["GJX@GJXAIOU",[[1,2599,"Litru"]],[2599,2599],[2604,2604]]],[1561884375139,["GJX@GJXAIOU",[[-1,2599,"Litru"]],[2604,2604],[2599,2599]]],[1561884377047,["GJX@GJXAIOU",[[1,2599,"例如："]],[2599,2599],[2602,2602]]],[1561884379745,["GJX@GJXAIOU",[[1,2606,"、"]],[2606,2606],[2607,2607]]],[1561884381417,["GJX@GJXAIOU",[[1,2609,"、"]],[2609,2609],[2610,2610]]],[1561884385606,["GJX@GJXAIOU",[[-1,2628,"***"]],[2627,2630],[2627,2627]]],[1561884386707,["GJX@GJXAIOU",[[-1,2627,"*"]],[2628,2628],[2627,2627]]],[1561884390387,["GJX@GJXAIOU",[[-1,2644,"\"\""]],[2646,2646],[2644,2644]]],[1561884398918,["GJX@GJXAIOU",[[1,2644,"使用\""]],[2644,2644],[2647,2647]]],[1561884398956,["GJX@GJXAIOU",[[-1,2646,"\""],[1,2647,"“"]],[2647,2647],[2647,2647]]],[1561884400513,["GJX@GJXAIOU",[[1,2647," \""]],[2647,2647],[2649,2649]]],[1561884400550,["GJX@GJXAIOU",[[-1,2648,"\""],[1,2649,"”"]],[2649,2649],[2649,2649]]],[1561884406428,["GJX@GJXAIOU",[[-1,2655,"\n"]],[2655,2655],[2654,2654]]],[1561884407934,["GJX@GJXAIOU",[[-1,2640,"\n"]],[2640,2640],[2639,2639]]],[1561884417086,["GJX@GJXAIOU",[[1,2083," "]],[2083,2083],[2084,2084]]],[1561884420105,["GJX@GJXAIOU",[[1,1842," "]],[1842,1842],[1843,1843]]],[1561884422004,["GJX@GJXAIOU",[[1,1771," "]],[1771,1771],[1772,1772]]],[1561884433402,["GJX@GJXAIOU",[[-1,1839,"： "]],[1841,1841],[1839,1839]]],[1561884434716,["GJX@GJXAIOU",[[1,1839,":"]],[1839,1839],[1840,1840]]],[1561884447467,["GJX@GJXAIOU",[[1,2668,"\n"]],[2667,2667],[2668,2668]]],[1561884447605,["GJX@GJXAIOU",[[1,2669,"\n"]],[2668,2668],[2669,2669]]],[1561884488437,["GJX@GJXAIOU",[[-1,2687,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg)"]],[2687,2767],[2687,2687]]],[1561885023765,["GJX@GJXAIOU",[[1,2687,"···"]],[2687,2687],[2690,2690]]],[1561885026260,["GJX@GJXAIOU",[[-1,2687,"···"]],[2690,2690],[2687,2687]]],[1561885027420,["GJX@GJXAIOU",[[1,2687,"```"]],[2687,2687],[2690,2690]]],[1561885027468,["GJX@GJXAIOU",[[1,2690,"language\n```\n"]],[2690,2690],[2690,2698]]],[1561885028544,["GJX@GJXAIOU",[[-1,2690,"language"],[1,2698,"j"]],[2690,2698],[2691,2691]]],[1561885029014,["GJX@GJXAIOU",[[1,2691,"ava"]],[2691,2691],[2694,2694]]],[1561885034434,["GJX@GJXAIOU",[[1,2695,"\n"]],[2694,2694],[2695,2695]]],[1561885036155,["GJX@GJXAIOU",[[1,2695,"public class Demo {\n\tpublic static void main(String[] args) {\n\t\tString string1 = \"hello\";\n\t\tString string2 = \"hello\";\n\t\tString string3 = new String(\"hello\");\n\t\tString string4 = new String(\"hello\");\n\t\t\n\t\tSystem.out.println(string1 == string2); //true\n\t\tSystem.out.println(string1 == string3); //false\n\t\tSystem.out.println(string3 == string4); //false"]],[2695,2695],[3044,3044]]],[1561885038835,["GJX@GJXAIOU",[[1,3045,"\t\t\n"]],[3044,3044],[3047,3047]]],[1561885041805,["GJX@GJXAIOU",[[-1,3045,"\t\t"]],[3047,3047],[3045,3045]]],[1561885043182,["GJX@GJXAIOU",[[1,3045,"}"]],[3045,3045],[3046,3046]]],[1561885054202,["GJX@GJXAIOU",[[-1,3067,"jack"]],[3071,3071],[3067,3067]]],[1561885056028,["GJX@GJXAIOU",[[1,3067,"hello"]],[3067,3067],[3072,3072]]],[1561885067661,["GJX@GJXAIOU",[[1,3063,"ing"]],[3063,3063],[3066,3066]]],[1561885071609,["GJX@GJXAIOU",[[-1,3060,"S"]],[3061,3061],[3060,3060]]],[1561885074807,["GJX@GJXAIOU",[[1,3060,"sd"]],[3060,3060],[3062,3062]]],[1561885075842,["GJX@GJXAIOU",[[-1,3061,"d"]],[3062,3062],[3061,3061]]],[1561885083637,["GJX@GJXAIOU",[[1,3076," "]],[3076,3076],[3077,3077]]],[1561885119729,["GJX@GJXAIOU",[[-1,3098,"jack1"]],[3103,3103],[3098,3098]]],[1561885122965,["GJX@GJXAIOU",[[1,3098,"string1"]],[3098,3098],[3105,3105]]],[1561885137401,["GJX@GJXAIOU",[[-1,3174,"3"]],[3175,3175],[3174,3174]]],[1561885142189,["GJX@GJXAIOU",[[1,3174,"ing3"]],[3174,3174],[3178,3178]]],[1561885147363,["GJX@GJXAIOU",[[-1,3193,"jack"]],[3197,3197],[3193,3193]]],[1561885148514,["GJX@GJXAIOU",[[1,3193,"hello"]],[3193,3193],[3198,3198]]],[1561885195542,["GJX@GJXAIOU",[[-1,3229,"jack"]],[3233,3233],[3229,3229]]],[1561885196206,["GJX@GJXAIOU",[[1,3229,"h"]],[3229,3229],[3230,3230]]],[1561885198265,["GJX@GJXAIOU",[[1,3229," "],[1,3230," ello`"]],[3230,3230],[3236,3236]]],[1561885200829,["GJX@GJXAIOU",[[1,3230,"`"]],[3230,3230],[3231,3231]]],[1561885466390,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561885466390,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561885456275,["GJX@GJXAIOU",[[-1,3317,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg)\n"]],[3316,3397],[3316,3316]]],[1561885526388,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561885526388,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561885473645,["GJX@GJXAIOU",[[1,3316,"[string数组]($resource/string%E6%95%B0%E7%BB%84.bmp)"]],[3316,3316],[3367,3367]]],[1561885479139,["GJX@GJXAIOU",[[-1,3316,"[string数组]($resource/string%E6%95%B0%E7%BB%84.bmp)"]],[3316,3366],[3316,3316]]],[1561885505987,["GJX@GJXAIOU",[[1,3318,"\n"]],[3316,3316],[3317,3317]]],[1561885513139,["GJX@GJXAIOU",[[1,3317,"![string数组]($resource/string%E6%95%B0%E7%BB%84.png)"]],[3317,3317],[3369,3369]]],[1561885518466,["GJX@GJXAIOU",[[1,3370,"\n"]],[3370,3370],[3371,3371]]],[1561885518594,["GJX@GJXAIOU",[[1,3371,"\n"]],[3371,3371],[3372,3372]]],[1561885523825,["GJX@GJXAIOU",[[-1,3385,"| \n"]],[3385,3388],[3385,3385]]],[1561885586390,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561885586390,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561885527296,["GJX@GJXAIOU",[[1,3385,"mingl"]],[3385,3385],[3390,3390]]],[1561885528130,["GJX@GJXAIOU",[[-1,3385,"mingl"]],[3390,3390],[3385,3385]]],[1561885530652,["GJX@GJXAIOU",[[1,3385,"命令 "]],[3385,3385],[3388,3388]]],[1561885531089,["GJX@GJXAIOU",[[1,3389,"\n"]],[3388,3388],[3389,3389]]],[1561885531620,["GJX@GJXAIOU",[[-1,3389,"\n"]],[3389,3389],[3388,3388]]],[1561885531869,["GJX@GJXAIOU",[[-1,3387," "]],[3388,3388],[3387,3387]]],[1561885534253,["GJX@GJXAIOU",[[1,3387," | 含义"]],[3387,3387],[3392,3392]]],[1561885535196,["GJX@GJXAIOU",[[1,3393,"\n"]],[3392,3392],[3393,3393]]],[1561885538557,["GJX@GJXAIOU",[[1,3393,"---|---"]],[3393,3393],[3400,3400]]],[1561885541949,["GJX@GJXAIOU",[[1,3414," "]],[3413,3413],[3414,3414]]],[1561885542501,["GJX@GJXAIOU",[[1,3414,"|"]],[3414,3414],[3415,3415]]],[1561885546199,["GJX@GJXAIOU",[[1,3449," "]],[3448,3448],[3449,3449]]],[1561885546839,["GJX@GJXAIOU",[[1,3449,"|"]],[3449,3449],[3450,3450]]],[1561885553470,["GJX@GJXAIOU",[[1,3385,"返回值 |"]],[3385,3385],[3390,3390]]],[1561885556151,["GJX@GJXAIOU",[[1,3405,"| "]],[3405,3405],[3407,3407]]],[1561885556954,["GJX@GJXAIOU",[[-1,3406," "]],[3407,3407],[3406,3406]]],[1561885558669,["GJX@GJXAIOU",[[1,3406,"---"]],[3406,3406],[3409,3409]]],[1561885561876,["GJX@GJXAIOU",[[1,3414,"|  "]],[3414,3414],[3417,3417]]],[1561885565016,["GJX@GJXAIOU",[[1,3443,"| "]],[3443,3443],[3445,3445]]],[1561885571823,["GJX@GJXAIOU",[[1,3487," |  "]],[3487,3487],[3491,3491]]],[1561885575623,["GJX@GJXAIOU",[[1,3511," "]],[3510,3510],[3511,3511]]],[1561885576557,["GJX@GJXAIOU",[[1,3511,"|"]],[3511,3511],[3512,3512]]],[1561885582080,["GJX@GJXAIOU",[[1,3538," |  "]],[3538,3538],[3542,3542]]],[1561885584591,["GJX@GJXAIOU",[[1,3562,"  "]],[3561,3561],[3563,3563]]],[1561885585389,["GJX@GJXAIOU",[[1,3563,"|"]],[3563,3563],[3564,3564]]],[1561885585871,["GJX@GJXAIOU",[[1,3565,"  "]],[3564,3564],[3566,3566]]],[1561885646393,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561885646393,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561885588442,["GJX@GJXAIOU",[[-1,3580," |"]],[3582,3582],[3580,3580]]],[1561885589002,["GJX@GJXAIOU",[[-1,3581,"\n"]],[3580,3580],[3579,3579]]],[1561885591346,["GJX@GJXAIOU",[[-1,3437,"\n"]],[3437,3437],[3436,3436]]],[1561885592347,["GJX@GJXAIOU",[[-1,3481,"\n"]],[3481,3481],[3480,3480]]],[1561885593213,["GJX@GJXAIOU",[[-1,3531,"\n"]],[3531,3531],[3530,3530]]],[1561885613683,["GJX@GJXAIOU",[[-1,3578,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg)"]],[3578,3658],[3578,3578]]],[1561886246406,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561886246406,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561886245889,["GJX@GJXAIOU",[[-1,3579,"\n"]],[3578,3578],[3577,3577]]],[1561886246041,["GJX@GJXAIOU",[[-1,3578,"\n"]],[3577,3577],[3576,3576]]],[1561886306406,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561886306406,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561886247924,["GJX@GJXAIOU",[[1,3576,"```"]],[3576,3576],[3579,3579]]],[1561886247964,["GJX@GJXAIOU",[[1,3579,"language\n```\n"]],[3579,3579],[3579,3587]]],[1561886249232,["GJX@GJXAIOU",[[-1,3579,"language"],[1,3587,"j"]],[3579,3587],[3580,3580]]],[1561886249692,["GJX@GJXAIOU",[[1,3580,"ava"]],[3580,3580],[3583,3583]]],[1561886249797,["GJX@GJXAIOU",[[1,3584,"\n"]],[3583,3583],[3584,3584]]],[1561886250754,["GJX@GJXAIOU",[[1,3584,"String string = \"hello world\";\n\t\tSystem.out.println(\"length : \" + string.length());       \t\t\t\t     //11\n\t\tSystem.out.println(\"I 的位置 ：\" + string.indexOf(\"o\")); \t\t\t\t //4\n\t\tSystem.out.println(\"I的最后位置  ：\"  + string.lastIndexOf(\"o\"));    // 7\n\t\tSystem.out.println(\"P的位置 ： \" + string.indexOf(\"P\"));\t\t\t\t //-1 不存在下标就是-1\n\t\tSystem.out.println(\"获取下标为1的元素：\" + string.charAt(1));      //e\n\t\tSystem.out.println(\"获取下表为12的元素：\" + string.charAt(12));  // 数组越界java.lang.StringIndexOutOfBoundsException"]],[3584,3584],[4066,4066]]],[1561886265658,["GJX@GJXAIOU",[[-1,3616,"\t"],[-1,3689,"\t"],[-1,3752,"\t"],[-1,3823,"\t"],[-1,3897,"\t"],[-1,3960,"\t"]],[3617,4066],[3616,4060]]],[1561886266868,["GJX@GJXAIOU",[[-1,3615,"\t"],[-1,3687,"\t"],[-1,3750,"\t"],[-1,3819,"\t"],[-1,3892,"\t"],[-1,3955,"\t"]],[3616,4060],[3615,4054]]],[1561886270138,["GJX@GJXAIOU",[[1,3615,"  "],[1,3686,"  "],[1,3748,"  "],[1,3816,"  "],[1,3888,"  "],[1,3950,"  "]],[3615,4054],[3615,4066]]],[1561886271043,["GJX@GJXAIOU",[[1,3617,"  "],[1,3690,"  "],[1,3752,"  "],[1,3824,"  "],[1,3898,"  "],[1,3960,"  "]],[3615,4066],[3615,4078]]],[1561886271653,["GJX@GJXAIOU",[[1,3619,"  "],[1,3694,"  "],[1,3756,"  "],[1,3832,"  "],[1,3908,"  "],[1,3970,"  "]],[3615,4078],[3615,4090]]],[1561886290151,["GJX@GJXAIOU",[[-1,3684,"   "]],[3687,3687],[3684,3684]]],[1561886300169,["GJX@GJXAIOU",[[-1,4107,"| "]],[4107,4109],[4107,4107]]],[1561886300682,["GJX@GJXAIOU",[[-1,4108,"\n"]],[4107,4107],[4106,4106]]],[1561886366406,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561886366406,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561886311453,["GJX@GJXAIOU",[[1,4107,"返回值 |命令 | 含义\n---|---|---"]],[4107,4107],[4131,4131]]],[1561886314676,["GJX@GJXAIOU",[[1,4140," | "]],[4140,4140],[4143,4143]]],[1561886319707,["GJX@GJXAIOU",[[1,4164," | "]],[4164,4164],[4167,4167]]],[1561886322499,["GJX@GJXAIOU",[[1,4186," "]],[4185,4185],[4186,4186]]],[1561886322982,["GJX@GJXAIOU",[[1,4186,"|"]],[4186,4186],[4187,4187]]],[1561886323172,["GJX@GJXAIOU",[[1,4188," "]],[4187,4187],[4188,4188]]],[1561886329317,["GJX@GJXAIOU",[[1,4195," "]],[4195,4195],[4196,4196]]],[1561886330665,["GJX@GJXAIOU",[[-1,4195," "]],[4196,4196],[4195,4195]]],[1561886333476,["GJX@GJXAIOU",[[1,4198,"  | "]],[4198,4198],[4202,4202]]],[1561886335281,["GJX@GJXAIOU",[[-1,4177,"\n"]],[4177,4177],[4176,4176]]],[1561886337090,["GJX@GJXAIOU",[[-1,4223,"\n"]],[4223,4223],[4222,4222]]],[1561886338507,["GJX@GJXAIOU",[[-1,4270,"\n"]],[4270,4270],[4269,4269]]],[1561886339884,["GJX@GJXAIOU",[[-1,4307,"\n"]],[4307,4307],[4306,4306]]],[1561886341801,["GJX@GJXAIOU",[[-1,4365," |"]],[4367,4367],[4365,4365]]],[1561886342281,["GJX@GJXAIOU",[[-1,4366,"\n"]],[4365,4365],[4364,4364]]],[1561886347559,["GJX@GJXAIOU",[[1,4231," | "]],[4231,4231],[4234,4234]]],[1561886352687,["GJX@GJXAIOU",[[1,4258,"| "]],[4258,4258],[4260,4260]]],[1561886355612,["GJX@GJXAIOU",[[1,4283,"| "]],[4283,4283],[4285,4285]]],[1561886362214,["GJX@GJXAIOU",[[1,4309,"| "]],[4309,4309],[4311,4311]]],[1561886426405,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561886426405,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561886366656,["GJX@GJXAIOU",[[1,4324,"}"]],[4324,4324],[4325,4325]]],[1561886367290,["GJX@GJXAIOU",[[-1,4324,"}"]],[4325,4325],[4324,4324]]],[1561886367875,["GJX@GJXAIOU",[[1,4324,"|"]],[4324,4324],[4325,4325]]],[1561886373447,["GJX@GJXAIOU",[[1,4364,"|"]],[4364,4364],[4365,4365]]],[1561886422634,["GJX@GJXAIOU",[[-1,4377,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg)"]],[4377,4457],[4377,4377]]],[1561886422801,["GJX@GJXAIOU",[[-1,4378,"\n"]],[4377,4377],[4376,4376]]],[1561886423105,["GJX@GJXAIOU",[[-1,4377,"\n"]],[4376,4376],[4375,4375]]],[1561892265398,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561892265398,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561892215870,["GJX@GJXAIOU",[[-1,4390,"| \n"]],[4390,4393],[4390,4390]]],[1561892217211,["GJX@GJXAIOU",[[1,4390,"fang"]],[4390,4390],[4394,4394]]],[1561892218708,["GJX@GJXAIOU",[[-1,4390,"fang"]],[4394,4394],[4390,4390]]],[1561892227591,["GJX@GJXAIOU",[[1,4390,"方法| 含义"]],[4390,4390],[4396,4396]]],[1561892228188,["GJX@GJXAIOU",[[1,4397,"\n"]],[4396,4396],[4397,4397]]],[1561892232174,["GJX@GJXAIOU",[[1,4397,"---|---"]],[4397,4397],[4404,4404]]],[1561892236120,["GJX@GJXAIOU",[[1,4426," "]],[4425,4425],[4426,4426]]],[1561892236702,["GJX@GJXAIOU",[[1,4426,"|"]],[4426,4426],[4427,4427]]],[1561892244615,["GJX@GJXAIOU",[[1,4484," |"]],[4484,4484],[4486,4486]]],[1561892252431,["GJX@GJXAIOU",[[1,4522,"|"]],[4522,4522],[4523,4523]]],[1561892255396,["GJX@GJXAIOU",[[-1,4440,"\n"]],[4440,4440],[4439,4439]]],[1561892260996,["GJX@GJXAIOU",[[-1,4486,"\n"]],[4486,4486],[4485,4485]]],[1561892262797,["GJX@GJXAIOU",[[-1,4522,"\n"]],[4522,4522],[4521,4521]]],[1561892264388,["GJX@GJXAIOU",[[-1,4580,"\n"]],[4580,4580],[4579,4579]]],[1561892325403,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561892325403,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561892267692,["GJX@GJXAIOU",[[-1,4614," |"]],[4616,4616],[4614,4614]]],[1561892268012,["GJX@GJXAIOU",[[-1,4615,"\n"]],[4614,4614],[4613,4613]]],[1561892268493,["GJX@GJXAIOU",[[-1,4614,"\n"]],[4613,4613],[4612,4612]]],[1561892271142,["GJX@GJXAIOU",[[1,4601," "]],[4600,4600],[4601,4601]]],[1561892272203,["GJX@GJXAIOU",[[1,4601,"|"]],[4601,4601],[4602,4602]]],[1561892279176,["GJX@GJXAIOU",[[1,4579," |"]],[4579,4579],[4581,4581]]],[1561893045422,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561893045422,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561892989183,["GJX@GJXAIOU",[[1,4377,"\n"]],[4375,4375],[4376,4376]]],[1561892989940,["GJX@GJXAIOU",[[-1,4377,"\n"]],[4376,4376],[4375,4375]]],[1561892991326,["GJX@GJXAIOU",[[1,4375,"```"]],[4375,4375],[4378,4378]]],[1561892991366,["GJX@GJXAIOU",[[1,4378,"language\n```\n"]],[4378,4378],[4378,4386]]],[1561892992263,["GJX@GJXAIOU",[[-1,4378,"language"],[1,4386,"j"]],[4378,4386],[4379,4379]]],[1561892992753,["GJX@GJXAIOU",[[1,4379,"ava"]],[4379,4379],[4382,4382]]],[1561892992876,["GJX@GJXAIOU",[[1,4383,"\n"]],[4382,4382],[4383,4383]]],[1561892993933,["GJX@GJXAIOU",[[1,4383,"String string1 = \" \";\n\t\tString string2 = \"\";\n\t\tSystem.out.println(\"string1的长度：\" + string1.length()); //string1的长度：1\n\t\tSystem.out.println(\"string2的长度：\" + string2.length()); //string2的长度：0\n\t\tSystem.out.println(\"string1是否为空：\" + string1.isEmpty()); //false\n\t\tSystem.out.println(\"string2是否为空：\" + string2.isEmpty()); //true\n\t\t\n\t\tstring1 = \"hello java world\";\n\t\tSystem.out.println(\"是否包含 java 字符串：\" + string1.contains(\"java\")); //true\n\t\tSystem.out.println(\"abc\".equals(\"abc\")); //true\n\t\t\n\t\tSystem.out.println(new String(\"abc\") .equals(new String(\"abc\"))); //true\n\t\tSystem.out.println(new String(\"abc\") .equals(new String(\"ABC\"))); //false\n\t\tSystem.out.println(new String(\"abc\") .equalsIgnoreCase(new String(\"ABC\"))); //true\n\t\t\n\t\tstring1 = \"Demo.java\";\n\t\tSystem.out.println(\"是不是以 .java 结尾 \" + string1.endsWith(\".java\")); //是不是以 .java 结尾 true"]],[4383,4383],[5215,5215]]],[1561893006822,["GJX@GJXAIOU",[[-1,4406,"\t"],[-1,4428,"\t"],[-1,4500,"\t"],[-1,4570,"\t"],[-1,4637,"\t"],[-1,4702,"\t"],[-1,4704,"\t"],[-1,4736,"\t"],[-1,4811,"\t"],[-1,4861,"\t"],[-1,4863,"\t"],[-1,4938,"\t"],[-1,5015,"\t"],[-1,5100,"\t"],[-1,5102,"\t"],[-1,5127,"\t"]],[4383,5215],[4383,5199]]],[1561893007468,["GJX@GJXAIOU",[[-1,4405,"\t"],[-1,4427,"\t"],[-1,4497,"\t"],[-1,4567,"\t"],[-1,4632,"\t"],[-1,4696,"\t"],[-1,4698,"\t"],[-1,4729,"\t"],[-1,4802,"\t"],[-1,4851,"\t"],[-1,4853,"\t"],[-1,4927,"\t"],[-1,5002,"\t"],[-1,5086,"\t"],[-1,5088,"\t"],[-1,5112,"\t"]],[4383,5199],[4383,5183]]],[1561893014075,["GJX@GJXAIOU",[[-1,4453,"的"]],[4454,4454],[4453,4453]]],[1561893015532,["GJX@GJXAIOU",[[-1,4521,"的"]],[4522,4522],[4521,4521]]],[1561893017117,["GJX@GJXAIOU",[[-1,4489,"长"]],[4490,4490],[4489,4489]]],[1561893020300,["GJX@GJXAIOU",[[1,4489,"长"]],[4489,4489],[4490,4490]]],[1561893034204,["GJX@GJXAIOU",[[-1,4757," "]],[4758,4758],[4757,4757]]],[1561893036394,["GJX@GJXAIOU",[[1,4757," "]],[4757,4757],[4758,4758]]],[1561893038100,["GJX@GJXAIOU",[[-1,4757," "]],[4758,4758],[4757,4757]]],[1561893069457,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561893069457,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561893065472,["GJX@GJXAIOU",[[1,5187,"\n"]],[5186,5186],[5187,5187]]],[1561893065627,["GJX@GJXAIOU",[[1,5188,"\n"]],[5187,5187],[5188,5188]]],[1561893065790,["GJX@GJXAIOU",[[1,5189,"\n"]],[5188,5188],[5189,5189]]],[1561893129470,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561893129470,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561893075421,["GJX@GJXAIOU",[[1,5187,"* * *"]],[5187,5187],[5194,5194]]],[1561893077858,["GJX@GJXAIOU",[[-1,5187,"* * *"]],[5187,5192],[5187,5187]]],[1561893083938,["GJX@GJXAIOU",[[1,5187,"> "]],[5187,5187],[5189,5189]]],[1561893086588,["GJX@GJXAIOU",[[-1,5187,"> "]],[5189,5189],[5187,5187]]],[1561893101971,["GJX@GJXAIOU",[[1,5187,"```java\ndffdfd\n\n```"]],[5187,5187],[5208,5208]]],[1561893105822,["GJX@GJXAIOU",[[-1,5187,"```java\ndffdfd\n\n```"]],[5187,5206],[5187,5187]]],[1561893189470,[null,[[-1,3232," "],[1,3238," "]],[3232,3232],[3239,3239]]],[1561893189470,[null,[[1,3232," "],[-1,3237," "]],[3239,3239],[3232,3232]]],[1561893136258,["GJX@GJXAIOU",[[1,42,"\n"]],[40,40],[41,41]]],[1561893137557,["GJX@GJXAIOU",[[1,41,"++++"]],[41,41],[43,43]]],[1561893139108,["GJX@GJXAIOU",[[1,43,"zhun"]],[43,43],[47,47]]],[1561893140483,["GJX@GJXAIOU",[[-1,43,"++zhun"]],[47,47],[41,41]]],[1561893141610,["GJX@GJXAIOU",[[-1,42,"+"]],[42,42],[41,41]]],[1561893141778,["GJX@GJXAIOU",[[-1,40,"\n"]],[41,41],[40,40]]],[1561893143405,["GJX@GJXAIOU",[[-1,40,"+"]],[41,41],[40,40]]],[1561893144602,["GJX@GJXAIOU",[[1,42,"\n"]],[40,40],[41,41]]],[1561893145750,["GJX@GJXAIOU",[[1,41,"++++"]],[41,41],[43,43]]],[1561893147118,["GJX@GJXAIOU",[[-1,43,"++"]],[43,43],[41,41]]],[1561893147683,["GJX@GJXAIOU",[[-1,42,"+"]],[41,41],[41,41]]],[1561893147842,["GJX@GJXAIOU",[[-1,41,"+"]],[41,41],[41,41]]],[1561893148932,["GJX@GJXAIOU",[[1,41,"===="]],[41,41],[43,43]]],[1561893152623,["GJX@GJXAIOU",[[1,43,"转呗"]],[43,43],[45,45]]],[1561893153404,["GJX@GJXAIOU",[[-1,43,"转呗"]],[45,45],[43,43]]],[1561893157636,["GJX@GJXAIOU",[[1,43,"准备看2"]],[43,43],[47,47]]],[1561893157676,["GJX@GJXAIOU",[[1,46," "]],[47,47],[48,48]]],[1561893158117,["GJX@GJXAIOU",[[1,48,".4"]],[48,48],[50,50]]]],null,"GJX@GJXAIOU"],["c8a897d1-5681-47aa-98a7-50c930694db1",1561942083766,"---\ntags: \n- API\n\ndate: '2019-6-30'\n---\n\n==准备看 2.4==\n\n# Java常用API\n@toc\n\n# 1. Object对象\n\n面向对象的核心思想:“找合适的对象，做适合的事情”。\n\n合适的对象：\n1. 自己描述类，自己创建对象。\n2. sun已经描述了好多常用的类，可以使用这些类创建对象。\n    API（Application Program Interface）\n\n sun定义的那么多类的终极父类是Object。Object描述的是所有类的通用属性与方法。\n\n## 1.1 toString方法以及重写\n\n```java\npublic static void main(String[] args){\n  Object o = new Object();\n  System.out.println(o); //java.lang.Object@de6ced\n}\n```\ntoString() 返回对象的描述信息 java.lang.Object@de6ced 类名@哈希码值的十六进制形式。\n直接输入一个对象的时候，会调用对象的toString方法。\n\n练习：自定义一个Person类，打印该对象的描述信息，要求描述信息为：姓名 — 年龄\n\n```java\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person); //对象的描述信息 study.Person@311d617d\n\t}\n}\n```\n\n问题：调用person 的toString方法时，打印出来的信息是`类名+内存地址值`。不符合要求。根据我们之前学的继承，假如父类的指定的功能不能满足要求，那么子类可以复写父类的功能函数。那么该对象再调用toString()方法时，则会调用子类复写的toString方法。\n\n```java\n//tostring方法重写\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n  //可以使用Alt + shift + s 然后generate toString \n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [age=\" + this.age + \", name=\" + this.name + \"]\";\n\t}\n\t\n}\n```\n\n\n**编程习惯:** 开发者要对自定义的类重写toString()，对对象做详细的说明\n\n\n\n## 1.2 equals方法\n\n**equals()** 返回的是比较的结果  如果相等返回true，否则false，比较的是对象的内存地址值。\n```java\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = new Object();\n  System.out.println(o1.equals(o2)); //false\n}\n\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = o1;\n  System.out.println(o1.equals(o2)); //true\n}\n```\n\n问题：比较两个人是否是同一个人，根据两个人的名字判断。\n\n**问题：** 如果根据名字去作为判断两个人是否是同一个时，明显p与p1是同一个人，但是程序输入却不是同一个人。不符合我们现实生活的要求。\n\n**解决:** 根据我们学的继承中的函数复写，如果父类的函数不能满足我们目前的要求，那么就可以在子类把该功能复写，达到复合我们的要求。\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n```\n**编程习惯：** 开发者要对自定义的类重写equals()，使得比较两个对象的时候比较对象的属性是否相等，而不是内存地址。\n\n\n\n## 1.3 hashCode方法\n\n**hashCode()** 返回该对象的哈希码值： 采用操作系统底层实现的哈希算法。 同一个对象的哈希码值是唯一的。\n\njava规定如果两个对象equals返回true，那么这两个对象的hashCode码必须一致。(使用默认的 equals 方法的时候)\n**一般情况下：重写了 equals 方法就得重写 hashCode 方法**\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n@Override\npublic int hashCode() {\n\treturn this.name.hashCode();\n}\n```\n\n\n# 2 String类\n\nString类描述的是文本字符串序列。例如： 留言 、QQ、 写日志。\n\n**创建String类的对象的两种方式：**\n1. 使用“ ”直接赋值法\n2. new关键字法\n\n\n\n## 2.1 字符串对象的比较\n\n```java\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tString string1 = \"hello\";\n\t\tString string2 = \"hello\";\n\t\tString string3 = new String(\"hello\");\n\t\tString string4 = new String(\"hello\");\n\t\t\n\t\tSystem.out.println(string1 == string2); //true\n\t\tSystem.out.println(string1 == string3); //false\n\t\tSystem.out.println(string3 == string4); //false\n}\n```\n\n\nString string = “hello” 这个语句会先检查字符串常量池是否存放这个”string1”这个字符串对象，如果没有存在，那么就会在字符串常量池中创建这个字符串对象，如果存在直接返回该字符串的内存地址值。\n\nString string3 = new String(“hello”) 该语句会创建两个对象,首先会先检查字符串常量池中存不存在 `hello` 这个字符串对象，如果不存在就会创建，如果存在就返回内存地址值。创建了出来之后，new String这个语句就会在堆内存中开辟一个字符串对象。总共两个对象。\n\n![string数组]($resource/string%E6%95%B0%E7%BB%84.png)\n\n\n\n## 2.2 获取方法\n\n返回值 |命令 | 含义\n---|---|---\nint |  length() | 获取字符串的长度\nchar | charAt(int index) | 获取特定位置的字符 (角标越界)\nint  |  indexOf(String str) | 获取特定字符的位置(overload)\nint  |  lastIndexOf(int ch)  |   获取最后一个字符的位置\n```java\nString string = \"hello world\";\n      System.out.println(\"length : \" + string.length());       \t\t\t\t  //11\n      System.out.println(\"I 的位置 ：\" + string.indexOf(\"o\")); \t\t\t\t //4\n      System.out.println(\"I的最后位置  ：\"  + string.lastIndexOf(\"o\"));    // 7\n      System.out.println(\"P的位置 ： \" + string.indexOf(\"P\"));\t\t\t\t //-1 不存在下标就是-1\n      System.out.println(\"获取下标为1的元素：\" + string.charAt(1));      //e\n      System.out.println(\"获取下表为12的元素：\" + string.charAt(12));  // 数组越界java.lang.StringIndexOutOfBoundsException\n```\n\n\n## 2.3 判断方法\n\n返回值 |命令 | 含义\n---|---|---\nboolean  | endsWith(String str)  | 是否以指定字符结束\nboolean |  isEmpty()  | 是否长度为0 如：“” null V1.6\nboolean  | contains(CharSequences) | 是否包含指定序列 应用：搜索\nboolean | equals(Object anObject) | 是否相等\nboolean |equalsIgnoreCase(String anotherString) |忽略大小写是否相等\n```java\nString string1 = \" \";\nString string2 = \"\";\nSystem.out.println(\"string1长度：\" + string1.length()); //string1的长度：1\nSystem.out.println(\"string2长度：\" + string2.length()); //string2的长度：0\nSystem.out.println(\"string1是否为空：\" + string1.isEmpty()); //false\nSystem.out.println(\"string2是否为空：\" + string2.isEmpty()); //true\n\nstring1 = \"hello java world\";\nSystem.out.println(\"是否包含 java 字符串：\" +string1.contains(\"java\")); //true\nSystem.out.println(\"abc\".equals(\"abc\")); //true\n\nSystem.out.println(new String(\"abc\") .equals(new String(\"abc\"))); //true\nSystem.out.println(new String(\"abc\") .equals(new String(\"ABC\"))); //false\nSystem.out.println(new String(\"abc\") .equalsIgnoreCase(new String(\"ABC\"))); //true\n\nstring1 = \"Demo.java\";\nSystem.out.println(\"是不是以 .java 结尾 \" + string1.endsWith(\".java\")); //是不是以 .java 结尾 true\n```\n\n\n\n\n\n## 2.4 转换方法\n\n方法| 含义\n---|---\nString(char[] value) | 将字符数组转换为字符串\nString(char[] value, int offset, int count) |\nStatic String valueOf(char[] data)|\nstatic String valueOf(char[] data, int offset, int count) |\nchar[] toCharArray() | 将字符串转换为字符数组\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n## 2.5 其他方法\n\n| \n\nString replace(char oldChar, char newChar) 替换\n\nString[] split(String regex) 切割\n\nString substring(int beginIndex)\n\nString substring(int beginIndex, int endIndex)截取字串\n\nString toUpperCase() 转大写\n\nString toLowerCase() 转小写\n\nString trim() 去除空格\n\n |\n\n## 2.6 练习\n\n1. 去除字符串两边空格的函数。\n\n| \n\n**public**  **class** Demo1 {\n\n// 定义一个祛除字符串两边空格的函数\n\n**public**  **static** String trim( String str ){\n\n  // 0、定义求字串需要的起始索引变量\n\n  **int** start = 0;\n\n  **int** end = str.length()-1;\n\n  // 1. for循环遍历字符串对象的每一个字符\n\n  **for** (**int** i = 0; i<str.length() ; i++ )\n\n {\n\n  **if** ( str.charAt(i) == ' ' )\n\n {\n\n start++;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( start );\n\n  **for** (; end<str.length() && end >= 0; )\n\n {\n\n  **if** ( str.charAt(end) == ' ' )\n\n {\n\n end--;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( end );\n\n  // 2\\. 求子串\n\n  **if**( start < end ){\n\n **return** str.substring( start , (end+1) );\n\n }**else**{\n\n **return**  \"_\";\n\n }\n\n |\n\n2. 获取上传文件名 \"D:\\\\20120512\\\\day12\\\\Demo1.java\"。\n\n| \n\n**public**  **static** String getFileName2( String path ){\n\n**return** path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n\n }\n\n}\n\n |\n\n3. 将字符串对象中存储的字符反序。\n\n| \n\n// 将字符串对象中存储的字符反序\n\n  **public**  **static** String reaverseString( String src ){\n\n  // 1\\. 将字符串转换为字符数组\n\n  **char** chs[] = src.toCharArray();\n\n  // 2\\. 循环交换\n\n  **for** ( **int** start = 0 , end = chs.length - 1; start < end ; start++,end-- )\n\n {\n\n  // 3\\. 数据交换\n\n  **char** temp = chs[end];\n\n chs[end] = chs[start];\n\n chs[start] = temp;\n\n }\n\n  // 4\\. 将字符数组转换为字符串\n\n  **return**  **new** String( chs );\n\n }\n\n |\n\n4\\. 求一个子串在整串中出现的次数\n\n| \n\n** public**  **static**  **int** getCount( String src , String tag ){\n\n  // 0\\. 定义索引变量和统计个数的变量\n\n  **int** index = 0;\n\n  **int** count = 0;\n\n  // 1\\. 写循环判断\n\n  **while** ( ( index = src.indexOf(tag) ) != -1 ) // jackjava\n\n {\n\n  // 2\\. 求字串\n\n System._out_.println( src );\n\n src = src.substring( index + tag.length() ); // index 4 + 4 = 8\n\n System._out_.print( src.length() + \" : \" + index + \" : \" + tag.length() );\n\n  // 3\\. 累加\n\n count++;\n\n }\n\n  **return** count;\n\n }\n\n |\n\n# 3 StringBuffer\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n特点：\n\n1. 默认缓冲区的容量是16。\n\n2. StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。\n\n## 3.1 添加方法\n\n| \n\nStringBuffer(\"jack\")     在创建对象的时候赋值\n\nappend()              在缓冲区的尾部添加新的文本对象\n\ninsert()                在指定的下标位置添加新的文本对象\n\n |\n\n| \n\nStringBuffer sb = **new** StringBuffer(\"jack\");\n\nsb.append(**true**);\n\nsb.append('a');\n\nsb.append(97).append(34.0).append(**new**  **char**[]{'o','o'}); // 链式编程\n\nSystem._out_.println( sb.toString() ); // 输出缓冲区的中文本数据\n\nsb = **new** StringBuffer(\"jack\");\n\nsb.insert( 2, \"java\" ); // jajavack\n\nSystem._out_.println( sb.toString() ); \n\n |\n\n## 3.2 查看\n\n| \n\ntoString() 返回这个容器的字符串\n\nindexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。\n\nsubstring(int start) 从开始的位置开始截取字符串\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n## 3.3 修改(U)\n\n| \n\nreplace(int start int endString str)  使用给定 `String`  中的字符替换此序列的子字符串中的字符。该子字符串从指定的 `start`  处开始，一直到索引 `end - 1`  处的字符\n\nsetCharAt(int index char ch) 指定索引位置替换一个字符\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n## 3.4 删除(D)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n## 3.5 反序\n\nreverse() 把字符串反序输出。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n# 4 StringBuilder\n\nStringBuilder 是JDK1.5之后提出的，线程不安全，但是效率要高。用法与StringBuffer类似。\n\n# 5 System\n\nSystem 可以获取系统的属性。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n# 6 Runtime\n\nRuntime 类主要描述的是应用程序运行的环境。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n# 7 Date\n\nDate 类封装的是系统的当前时间.。但是Date已经过时了，sun推荐使用Calendar类。\n\nCalendar: 该类是一个日历的类，封装了年月日时分秒时区。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n日期格式化类：SimpleDateFormat\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n# 8 Math\n\nMath：类封装了很多数学的功能。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n练习：生成一个随机码\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n",[[1561942029015,["GJX@GJXAIOU",[[1,873,"=="],[1,913,"=="]],[873,913],[873,917]]]],null,"GJX@GJXAIOU"],["0a1394a8-caf1-4e43-8239-51dd5afe37d1",1565230682378,"---\ntags: \n- API\n\ndate: '2019-6-30'\n---\n\n==准备看 2.4==\n\n# Java常用API\n@toc\n\n# 1. Object对象\n\n面向对象的核心思想:“找合适的对象，做适合的事情”。\n\n合适的对象：\n1. 自己描述类，自己创建对象。\n2. sun已经描述了好多常用的类，可以使用这些类创建对象。\n    API（Application Program Interface）\n\n sun定义的那么多类的终极父类是Object。Object描述的是所有类的通用属性与方法。\n\n## 1.1 toString方法以及重写\n\n```java\npublic static void main(String[] args){\n  Object o = new Object();\n  System.out.println(o); //java.lang.Object@de6ced\n}\n```\ntoString() 返回对象的描述信息 java.lang.Object@de6ced 类名@哈希码值的十六进制形式。\n直接输入一个对象的时候，会调用对象的toString方法。\n\n练习：自定义一个Person类，打印该对象的描述信息，要求描述信息为：姓名 — 年龄\n\n```java\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person); //对象的描述信息 study.Person@311d617d\n\t}\n}\n```\n\n问题：==调用person 的toString方法时，打印出来的信息是`类名+内存地址值`==。不符合要求。根据我们之前学的继承，假如父类的指定的功能不能满足要求，那么子类可以复写父类的功能函数。那么该对象再调用toString()方法时，则会调用子类复写的toString方法。\n\n```java\n//tostring方法重写\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n  //可以使用Alt + shift + s 然后generate toString \n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [age=\" + this.age + \", name=\" + this.name + \"]\";\n\t}\n\t\n}\n```\n\n\n**编程习惯:** 开发者要对自定义的类重写toString()，对对象做详细的说明\n\n\n\n## 1.2 equals方法\n\n**equals()** 返回的是比较的结果  如果相等返回true，否则false，比较的是对象的内存地址值。\n```java\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = new Object();\n  System.out.println(o1.equals(o2)); //false\n}\n\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = o1;\n  System.out.println(o1.equals(o2)); //true\n}\n```\n\n问题：比较两个人是否是同一个人，根据两个人的名字判断。\n\n**问题：** 如果根据名字去作为判断两个人是否是同一个时，明显p与p1是同一个人，但是程序输入却不是同一个人。不符合我们现实生活的要求。\n\n**解决:** 根据我们学的继承中的函数复写，如果父类的函数不能满足我们目前的要求，那么就可以在子类把该功能复写，达到复合我们的要求。\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n```\n**编程习惯：** 开发者要对自定义的类重写equals()，使得比较两个对象的时候比较对象的属性是否相等，而不是内存地址。\n\n\n\n## 1.3 hashCode方法\n\n**hashCode()** 返回该对象的哈希码值： 采用操作系统底层实现的哈希算法。 同一个对象的哈希码值是唯一的。\n\njava规定如果两个对象equals返回true，那么这两个对象的hashCode码必须一致。(使用默认的 equals 方法的时候)\n**一般情况下：重写了 equals 方法就得重写 hashCode 方法**\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n@Override\npublic int hashCode() {\n\treturn this.name.hashCode();\n}\n```\n\n\n# 2 String类\n\nString类描述的是文本字符串序列。例如： 留言 、QQ、 写日志。\n\n**创建String类的对象的两种方式：**\n1. 使用“ ”直接赋值法\n2. new关键字法\n\n\n\n## 2.1 字符串对象的比较\n\n```java\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tString string1 = \"hello\";\n\t\tString string2 = \"hello\";\n\t\tString string3 = new String(\"hello\");\n\t\tString string4 = new String(\"hello\");\n\t\t\n\t\tSystem.out.println(string1 == string2); //true\n\t\tSystem.out.println(string1 == string3); //false\n\t\tSystem.out.println(string3 == string4); //false\n}\n```\n\n\nString string = “hello” 这个语句会先检查字符串常量池是否存放这个”string1”这个字符串对象，如果没有存在，那么就会在字符串常量池中创建这个字符串对象，如果存在直接返回该字符串的内存地址值。\n\nString string3 = new String(“hello”) 该语句会创建两个对象,首先会先检查字符串常量池中存不存在 `hello` 这个字符串对象，如果不存在就会创建，如果存在就返回内存地址值。创建了出来之后，new String这个语句就会在堆内存中开辟一个字符串对象。总共两个对象。\n\n![string数组]($resource/string%E6%95%B0%E7%BB%84.png)\n\n\n\n## 2.2 获取方法\n\n返回值 |命令 | 含义\n---|---|---\nint |  length() | 获取字符串的长度\nchar | charAt(int index) | 获取特定位置的字符 (角标越界)\nint  |  indexOf(String str) | 获取特定字符的位置(overload)\nint  |  lastIndexOf(int ch)  |   获取最后一个字符的位置\n```java\nString string = \"hello world\";\n      System.out.println(\"length : \" + string.length());       \t\t\t\t  //11\n      System.out.println(\"I 的位置 ：\" + string.indexOf(\"o\")); \t\t\t\t //4\n      System.out.println(\"I的最后位置  ：\"  + string.lastIndexOf(\"o\"));    // 7\n      System.out.println(\"P的位置 ： \" + string.indexOf(\"P\"));\t\t\t\t //-1 不存在下标就是-1\n      System.out.println(\"获取下标为1的元素：\" + string.charAt(1));      //e\n      System.out.println(\"获取下表为12的元素：\" + string.charAt(12));  // 数组越界java.lang.StringIndexOutOfBoundsException\n```\n\n\n## 2.3 判断方法\n\n返回值 |命令 | 含义\n---|---|---\nboolean  | endsWith(String str)  | 是否以指定字符结束\nboolean |  isEmpty()  | 是否长度为0 如：“” null V1.6\nboolean  | contains(CharSequences) | 是否包含指定序列 应用：搜索\nboolean | equals(Object anObject) | 是否相等\nboolean |equalsIgnoreCase(String anotherString) |忽略大小写是否相等\n```java\nString string1 = \" \";\nString string2 = \"\";\nSystem.out.println(\"string1长度：\" + string1.length()); //string1的长度：1\nSystem.out.println(\"string2长度：\" + string2.length()); //string2的长度：0\nSystem.out.println(\"string1是否为空：\" + string1.isEmpty()); //false\nSystem.out.println(\"string2是否为空：\" + string2.isEmpty()); //true\n\nstring1 = \"hello java world\";\nSystem.out.println(\"是否包含 java 字符串：\" +string1.contains(\"java\")); //true\nSystem.out.println(\"abc\".equals(\"abc\")); //true\n\nSystem.out.println(new String(\"abc\") .equals(new String(\"abc\"))); //true\nSystem.out.println(new String(\"abc\") .equals(new String(\"ABC\"))); //false\nSystem.out.println(new String(\"abc\") .equalsIgnoreCase(new String(\"ABC\"))); //true\n\nstring1 = \"Demo.java\";\nSystem.out.println(\"是不是以 .java 结尾 \" + string1.endsWith(\".java\")); //是不是以 .java 结尾 true\n```\n\n\n\n\n\n## 2.4 转换方法\n\n方法| 含义\n---|---\nString(char[] value) | 将字符数组转换为字符串\nString(char[] value, int offset, int count) |\nStatic String valueOf(char[] data)|\nstatic String valueOf(char[] data, int offset, int count) |\nchar[] toCharArray() | 将字符串转换为字符数组\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)\n\n## 2.5 其他方法\n\n| \n\nString replace(char oldChar, char newChar) 替换\n\nString[] split(String regex) 切割\n\nString substring(int beginIndex)\n\nString substring(int beginIndex, int endIndex)截取字串\n\nString toUpperCase() 转大写\n\nString toLowerCase() 转小写\n\nString trim() 去除空格\n\n |\n\n## 2.6 练习\n\n1. 去除字符串两边空格的函数。\n\n| \n\n**public**  **class** Demo1 {\n\n// 定义一个祛除字符串两边空格的函数\n\n**public**  **static** String trim( String str ){\n\n  // 0、定义求字串需要的起始索引变量\n\n  **int** start = 0;\n\n  **int** end = str.length()-1;\n\n  // 1. for循环遍历字符串对象的每一个字符\n\n  **for** (**int** i = 0; i<str.length() ; i++ )\n\n {\n\n  **if** ( str.charAt(i) == ' ' )\n\n {\n\n start++;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( start );\n\n  **for** (; end<str.length() && end >= 0; )\n\n {\n\n  **if** ( str.charAt(end) == ' ' )\n\n {\n\n end--;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( end );\n\n  // 2\\. 求子串\n\n  **if**( start < end ){\n\n **return** str.substring( start , (end+1) );\n\n }**else**{\n\n **return**  \"_\";\n\n }\n\n |\n\n2. 获取上传文件名 \"D:\\\\20120512\\\\day12\\\\Demo1.java\"。\n\n| \n\n**public**  **static** String getFileName2( String path ){\n\n**return** path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n\n }\n\n}\n\n |\n\n3. 将字符串对象中存储的字符反序。\n\n| \n\n// 将字符串对象中存储的字符反序\n\n  **public**  **static** String reaverseString( String src ){\n\n  // 1\\. 将字符串转换为字符数组\n\n  **char** chs[] = src.toCharArray();\n\n  // 2\\. 循环交换\n\n  **for** ( **int** start = 0 , end = chs.length - 1; start < end ; start++,end-- )\n\n {\n\n  // 3\\. 数据交换\n\n  **char** temp = chs[end];\n\n chs[end] = chs[start];\n\n chs[start] = temp;\n\n }\n\n  // 4\\. 将字符数组转换为字符串\n\n  **return**  **new** String( chs );\n\n }\n\n |\n\n4\\. 求一个子串在整串中出现的次数\n\n| \n\n** public**  **static**  **int** getCount( String src , String tag ){\n\n  // 0\\. 定义索引变量和统计个数的变量\n\n  **int** index = 0;\n\n  **int** count = 0;\n\n  // 1\\. 写循环判断\n\n  **while** ( ( index = src.indexOf(tag) ) != -1 ) // jackjava\n\n {\n\n  // 2\\. 求字串\n\n System._out_.println( src );\n\n src = src.substring( index + tag.length() ); // index 4 + 4 = 8\n\n System._out_.print( src.length() + \" : \" + index + \" : \" + tag.length() );\n\n  // 3\\. 累加\n\n count++;\n\n }\n\n  **return** count;\n\n }\n\n |\n\n# 3 StringBuffer\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)\n\n**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n特点：\n\n1. 默认缓冲区的容量是16。\n\n2. StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。\n\n## 3.1 添加方法\n\n| \n\nStringBuffer(\"jack\")     在创建对象的时候赋值\n\nappend()              在缓冲区的尾部添加新的文本对象\n\ninsert()                在指定的下标位置添加新的文本对象\n\n |\n\n| \n\nStringBuffer sb = **new** StringBuffer(\"jack\");\n\nsb.append(**true**);\n\nsb.append('a');\n\nsb.append(97).append(34.0).append(**new**  **char**[]{'o','o'}); // 链式编程\n\nSystem._out_.println( sb.toString() ); // 输出缓冲区的中文本数据\n\nsb = **new** StringBuffer(\"jack\");\n\nsb.insert( 2, \"java\" ); // jajavack\n\nSystem._out_.println( sb.toString() ); \n\n |\n\n## 3.2 查看\n\n| \n\ntoString() 返回这个容器的字符串\n\nindexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。\n\nsubstring(int start) 从开始的位置开始截取字符串\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n\n## 3.3 修改(U)\n\n| \n\nreplace(int start int endString str)  使用给定 `String`  中的字符替换此序列的子字符串中的字符。该子字符串从指定的 `start`  处开始，一直到索引 `end - 1`  处的字符\n\nsetCharAt(int index char ch) 指定索引位置替换一个字符\n\n |\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)\n\n## 3.4 删除(D)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n\n## 3.5 反序\n\nreverse() 把字符串反序输出。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)\n\n# 4 StringBuilder\n\nStringBuilder 是JDK1.5之后提出的，线程不安全，但是效率要高。用法与StringBuffer类似。\n\n# 5 System\n\nSystem 可以获取系统的属性。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n\n# 6 Runtime\n\nRuntime 类主要描述的是应用程序运行的环境。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)\n\n# 7 Date\n\nDate 类封装的是系统的当前时间.。但是Date已经过时了，sun推荐使用Calendar类。\n\nCalendar: 该类是一个日历的类，封装了年月日时分秒时区。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)\n\n日期格式化类：SimpleDateFormat\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)\n\n# 8 Math\n\nMath：类封装了很多数学的功能。\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)\n\n练习：生成一个随机码\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)\n",[[1565230653113,["GJX@GJXAIOU",[[-1,5447,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg)"]],[5447,5527],[5447,5447]]],[1565231127033,["GJX@GJXAIOU",[[1,5449,"\n"]],[5446,5446],[5447,5447]]],[1565231127877,["GJX@GJXAIOU",[[1,5447,"···"]],[5447,5447],[5450,5450]]],[1565231129108,["GJX@GJXAIOU",[[-1,5447,"···"]],[5450,5450],[5447,5447]]],[1565231130300,["GJX@GJXAIOU",[[1,5447,"```"]],[5447,5447],[5450,5450]]],[1565231130341,["GJX@GJXAIOU",[[1,5450,"language\n```\n"]],[5450,5450],[5450,5458]]],[1565231132539,["GJX@GJXAIOU",[[-1,5450,"language"],[1,5458,"j"]],[5450,5458],[5451,5451]]],[1565231132957,["GJX@GJXAIOU",[[1,5451,"ava"]],[5451,5451],[5454,5454]]],[1565231133091,["GJX@GJXAIOU",[[1,5455,"\n"]],[5454,5454],[5455,5455]]],[1565231134274,["GJX@GJXAIOU",[[1,5455,"String str = new String(new char[]{'h', 'e', 'l', 'l', '0'}); System.out.println(str);   char[] chars = str.toCharArray(); for (int i = 0; i < chars.length; i++) {\n    System.out.println(chars[i]); }\n\nbyte[] bytes = {97, 98, 99}; String s = new String(bytes); System.out.println(s);   byte[] strBytes = str.getBytes(); for (int i = 0; i < strBytes.length; i++) {\n    System.out.println(strBytes[i]); }"]],[5455,5455],[5856,5856]]],[1565231136000,["GJX@GJXAIOU",[[-1,5455,"String str = new String(new char[]{'h', 'e', 'l', 'l', '0'}); System.out.println(str);   char[] chars = str.toCharArray(); for (int i = 0; i < chars.length; i++) {\n    System.out.println(chars[i]); }\n\nbyte[] bytes = {97, 98, 99}; String s = new String(bytes); System.out.println(s);   byte[] strBytes = str.getBytes(); for (int i = 0; i < strBytes.length; i++) {\n    System.out.println(strBytes[i]); }"]],[5856,5856],[5455,5455]]],[1565231137868,["GJX@GJXAIOU",[[1,5455,"String str = new String(new char[]{'h', 'e', 'l', 'l', '0'});\n        System.out.println(str);\n\n        char[] chars = str.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            System.out.println(chars[i]);\n        }\n\n        byte[] bytes = {97, 98, 99};\n        String s = new String(bytes);\n        System.out.println(s);\n\n        byte[] strBytes = str.getBytes();\n        for (int i = 0; i < strBytes.length; i++) {\n            System.out.println(strBytes[i]);\n        }"]],[5455,5455],[5950,5950]]],[1565231153771,["GJX@GJXAIOU",[[-1,5523,"  "],[-1,5551,"  "],[-1,5593,"  "],[-1,5652,"  "],[-1,5690,"  "],[-1,5695,"  "],[-1,5738,"  "],[-1,5776,"  "],[-1,5802,"  "],[-1,5850,"  "],[-1,5906,"  "],[-1,5941,"  "]],[5525,5950],[5523,5926]]],[1565231154226,["GJX@GJXAIOU",[[-1,5521,"  "],[-1,5549,"  "],[-1,5589,"  "],[-1,5644,"  "],[-1,5680,"  "],[-1,5685,"  "],[-1,5724,"  "],[-1,5760,"  "],[-1,5786,"  "],[-1,5830,"  "],[-1,5884,"  "],[-1,5919,"  "]],[5523,5926],[5521,5902]]],[1565231154553,["GJX@GJXAIOU",[[-1,5519,"  "],[-1,5547,"  "],[-1,5585,"  "],[-1,5636,"  "],[-1,5670,"  "],[-1,5675,"  "],[-1,5710,"  "],[-1,5744,"  "],[-1,5770,"  "],[-1,5810,"  "],[-1,5862,"  "],[-1,5897,"  "]],[5521,5902],[5519,5878]]],[1565231155027,["GJX@GJXAIOU",[[-1,5517,"  "],[-1,5545,"  "],[-1,5581,"  "],[-1,5628,"  "],[-1,5660,"  "],[-1,5665,"  "],[-1,5696,"  "],[-1,5728,"  "],[-1,5754,"  "],[-1,5790,"  "],[-1,5840,"  "],[-1,5875,"  "]],[5519,5878],[5517,5854]]],[1565231159853,["GJX@GJXAIOU",[[1,5853," "]],[5853,5853],[5854,5854]]],[1565231161601,["GJX@GJXAIOU",[[1,5863,"\n"]],[5859,5859],[5860,5860]]],[1565231162631,["GJX@GJXAIOU",[[1,5860,"cheng"]],[5860,5860],[5865,5865]]],[1565231163872,["GJX@GJXAIOU",[[-1,5860,"cheng"]],[5865,5865],[5860,5860]]],[1565231166800,["GJX@GJXAIOU",[[1,5860,"程序"]],[5860,5860],[5862,5862]]],[1565231168957,["GJX@GJXAIOU",[[1,5862,"运行结果："]],[5862,5862],[5867,5867]]],[1565231169340,["GJX@GJXAIOU",[[1,5871,"\n"]],[5867,5867],[5868,5868]]],[1565231170971,["GJX@GJXAIOU",[[1,5868,"```"]],[5868,5868],[5871,5871]]],[1565231171013,["GJX@GJXAIOU",[[1,5871,"language\n```\n"]],[5871,5871],[5871,5879]]],[1565231172083,["GJX@GJXAIOU",[[-1,5871,"language"],[1,5879,"j"]],[5871,5879],[5872,5872]]],[1565231172503,["GJX@GJXAIOU",[[1,5872,"ava"]],[5872,5872],[5875,5875]]],[1565231172573,["GJX@GJXAIOU",[[1,5876,"\n"]],[5875,5875],[5876,5876]]],[1565231184218,["GJX@GJXAIOU",[[1,5876,"hell0\nh\ne\nl\nl\n0\nabc\n104\n101\n108\n108\n48"]],[5876,5876],[5914,5914]]],[1565231193097,["GJX@GJXAIOU",[[-1,5936,"| "]],[5938,5938],[5936,5936]]],[1565231193456,["GJX@GJXAIOU",[[-1,5937,"\n"]],[5936,5936],[5935,5935]]],[1565231193961,["GJX@GJXAIOU",[[-1,5936,"\n"]],[5935,5935],[5934,5934]]],[1565231198774,["GJX@GJXAIOU",[[1,5935," fanhui"]],[5935,5935],[5942,5942]]],[1565231199978,["GJX@GJXAIOU",[[-1,5936,"fanhui"]],[5942,5942],[5936,5936]]],[1565231207661,["GJX@GJXAIOU",[[1,5936,"返回值  | 方法| 说明"]],[5936,5936],[5949,5949]]],[1565231207979,["GJX@GJXAIOU",[[1,5950," \n"]],[5949,5949],[5951,5951]]],[1565231213885,["GJX@GJXAIOU",[[1,5951,"---|---|---"]],[5951,5951],[5962,5962]]],[1565231217349,["GJX@GJXAIOU",[[1,5970,"|"]],[5970,5970],[5971,5971]]],[1565231221653,["GJX@GJXAIOU",[[1,6020,"| "]],[6020,6020],[6022,6022]]],[1565231223144,["GJX@GJXAIOU",[[-1,6010,"\n"]],[6010,6010],[6009,6009]]],[1565231223865,["GJX@GJXAIOU",[[-1,6044,"\n"]],[6044,6044],[6043,6043]]],[1565231224488,["GJX@GJXAIOU",[[-1,6077,"\n"]],[6077,6077],[6076,6076]]],[1565231225155,["GJX@GJXAIOU",[[-1,6128,"\n"]],[6128,6128],[6127,6127]]],[1565231225825,["GJX@GJXAIOU",[[-1,6153,"\n"]],[6153,6153],[6152,6152]]],[1565231226465,["GJX@GJXAIOU",[[-1,6178,"\n"]],[6178,6178],[6177,6177]]],[1565231227624,["GJX@GJXAIOU",[[-1,6198," |"]],[6198,6200],[6198,6198]]],[1565231231063,["GJX@GJXAIOU",[[1,6006,"|"]],[6006,6006],[6007,6007]]],[1565231233460,["GJX@GJXAIOU",[[1,6042," "]],[6041,6041],[6042,6042]]],[1565231234052,["GJX@GJXAIOU",[[1,6042,"|"]],[6042,6042],[6043,6043]]],[1565231236691,["GJX@GJXAIOU",[[1,6053,"|"]],[6053,6053],[6054,6054]]],[1565231238836,["GJX@GJXAIOU",[[1,6087,"|"]],[6087,6087],[6088,6088]]],[1565231240796,["GJX@GJXAIOU",[[1,6140,"|"]],[6140,6140],[6141,6141]]],[1565231243411,["GJX@GJXAIOU",[[1,6166," | "]],[6166,6166],[6169,6169]]],[1565231244843,["GJX@GJXAIOU",[[1,6141," "]],[6141,6141],[6142,6142]]],[1565231246876,["GJX@GJXAIOU",[[1,6194,"|"]],[6194,6194],[6195,6195]]],[1565231247159,["GJX@GJXAIOU",[[1,6196," "]],[6195,6195],[6196,6196]]],[1565231249100,["GJX@GJXAIOU",[[1,6194," "]],[6194,6194],[6195,6195]]],[1565231250703,["GJX@GJXAIOU",[[1,6205,"|"]],[6205,6205],[6206,6206]]],[1565231252781,["GJX@GJXAIOU",[[1,6184,"|"]],[6184,6184],[6185,6185]]],[1565231254799,["GJX@GJXAIOU",[[1,6156,"|"]],[6156,6156],[6157,6157]]],[1565231257363,["GJX@GJXAIOU",[[1,6128," |"]],[6128,6128],[6130,6130]]],[1565231300601,["GJX@GJXAIOU",[[1,6247,"\n"]],[6246,6246],[6247,6247]]],[1565231302228,["GJX@GJXAIOU",[[1,6247,"```"]],[6247,6247],[6250,6250]]],[1565231302272,["GJX@GJXAIOU",[[1,6250,"language\n```\n"]],[6250,6250],[6250,6258]]],[1565231303260,["GJX@GJXAIOU",[[-1,6250,"language"],[1,6258,"j"]],[6250,6258],[6251,6251]]],[1565231303627,["GJX@GJXAIOU",[[1,6251,"ava"]],[6251,6251],[6254,6254]]],[1565231303748,["GJX@GJXAIOU",[[1,6255,"\n"]],[6254,6254],[6255,6255]]],[1565231316346,["GJX@GJXAIOU",[[1,6255,"public class Demo1 {\n// 定义一个祛除字符串两边空格的函数\npublic static String trim( String str ){\n   \n   // 0、定义求字串需要的起始索引变量\n   int start = 0;\n   int end = str.length()-1;\n   // 1. for循环遍历字符串对象的每一个字符\n   for (int i = 0; i<str.length() ; i++ )\n   {\n        if ( str.charAt(i) == ' ' )\n        {\n             start++;\n        }else{\n\t\t\n\t\t     break;\n\t\t}\n   }\n   System.out.println( start );\n   for (; end<str.length() && end >= 0;  )\n   {\n        if ( str.charAt(end) == ' ' )\n        {\n             end--;\n        }else{\n\t\t     break;\n\t\t}\n   }\n   System.out.println( end );\n   // 2. 求子串\n   if( start < end ){\n     \n\t return str.substring( start , (end+1) ); \n   }else{\n     \n\t return \"_\";\n   }\n"]],[6255,6255],[6931,6931]]],[1565231730585,["GJX@GJXAIOU",[[-1,6272,"1"],[1,6276,"\n    "],[1,6296,"    "],[1,6310,"void main("],[1,6316,"[]"],[1,6317,"args) {\n        String string = Demo."],[1,6322,"\"  hell  0  \");\n       "],[1,6324,"ystem.out.println(s"],[1,6329,".toCharArray());\n    }\n    public"],[1,6332,"atic St"],[1,6333,"ing"],[1,6334,"trim(String str"],[1,6335," "],[1,6337,"\n  "],[-1,6340,"\n"],[1,6367,"     "],[1,6385,"     "],[1,6407," "],[1,6408," "],[1,6414,"     "],[1,6442,"     "],[1,6459," "],[1,6460," "],[-1,6472," "],[-1,6478," "],[1,6480," {"],[-1,6484,"{\n"],[1,6486," "],[-1,6498," "],[-1,6519," "],[-1,6521,"\n    "],[1,6527,"{\n"],[-1,6530,"{\n"],[1,6562,"    "],[1,6563," "],[1,6567," "],[-1,6569,"\t\t\n\t\t"],[1,6574,"         "],[1,6579,"  "],[-1,6586,"\t\t"],[1,6588,"            "],[1,6590,"     "],[1,6598,"     "],[-1,6617," "],[-1,6623," "],[1,6627,"\n     "],[1,6640," "],[1,6641," "],[-1,6667," )"],[1,6669,") {"],[-1,6673,"{\n"],[1,6675," "],[-1,6687," "],[-1,6710," )"],[1,6712,") {"],[-1,6721,"{\n"],[-1,6731,"     "],[1,6751,"    "],[1,6752," "],[1,6756," "],[-1,6758,"\t\t"],[1,6760,"          "],[1,6765," "],[-1,6772,"\t\t"],[1,6774,"            "],[1,6779,"     "],[1,6784,"     "],[-1,6803," "],[-1,6807," "],[1,6814,"     "],[1,6827,"     "],[1,6829," "],[-1,6830," "],[-1,6842," "],[1,6844," "],[-1,6851,"\n\t"],[1,6853,"      "],[-1,6875," "],[-1,6881," "],[1,6888," "],[1,6889," "],[-1,6891," "],[-1,6894," \n"],[1,6896,"\n     "],[1,6900," "],[1,6904," "],[-1,6911,"\n\t"],[1,6913,"      "],[1,6926,"  "],[1,6929,"   }\n    }\n"]],[6255,6930],[7206,7206]]],[1565231734282,["GJX@GJXAIOU",[[1,7213,"\n"]],[7211,7211],[7212,7212]]],[1565231745313,["GJX@GJXAIOU",[[1,7212,"chengxu"]],[7212,7212],[7219,7219]]],[1565231746633,["GJX@GJXAIOU",[[-1,7212,"chengxu"]],[7219,7219],[7212,7212]]],[1565231750591,["GJX@GJXAIOU",[[1,7212,"程序执行结果："]],[7212,7212],[7219,7219]]],[1565231750882,["GJX@GJXAIOU",[[1,7221,"\n"]],[7219,7219],[7220,7220]]],[1565231752360,["GJX@GJXAIOU",[[1,7220,"```"]],[7220,7220],[7223,7223]]],[1565231752403,["GJX@GJXAIOU",[[1,7223,"language\n```\n"]],[7223,7223],[7223,7231]]],[1565231753283,["GJX@GJXAIOU",[[-1,7223,"language"],[1,7231,"j"]],[7223,7231],[7224,7224]]],[1565231753691,["GJX@GJXAIOU",[[1,7224,"ava"]],[7224,7224],[7227,7227]]],[1565231753816,["GJX@GJXAIOU",[[1,7228,"\n"]],[7227,7227],[7228,7228]]],[1565231754921,["GJX@GJXAIOU",[[1,7228,"2\n8\nhell  0"]],[7228,7228],[7239,7239]]],[1565231769897,["GJX@GJXAIOU",[[-1,7246,"| \n\n**public**  **class** Demo1 {\n\n// 定义一个祛除字符串两边空格的函数\n\n**public**  **static** String trim( String str ){\n\n  // 0、定义求字串需要的起始索引变量\n\n  **int** start = 0;\n\n  **int** end = str.length()-1;\n\n  // 1. for循环遍历字符串对象的每一个字符\n\n  **for** (**int** i = 0; i<str.length() ; i++ )\n\n {\n\n  **if** ( str.charAt(i) == ' ' )\n\n {\n\n start++;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( start );\n\n  **for** (; end<str.length() && end >= 0; )\n\n {\n\n  **if** ( str.charAt(end) == ' ' )\n\n {\n\n end--;\n\n }**else**{\n\n  **break**;\n\n }\n\n }\n\n System.out.println( end );\n\n  // 2\\. 求子串\n\n  **if**( start < end ){\n\n **return** str.substring( start , (end+1) );\n\n }**else**{\n\n **return**  \"_\";\n\n }\n\n |\n\n"]],[7245,7919],[7245,7245]]],[1565231790795,["GJX@GJXAIOU",[[-1,7422," |"]],[7422,7424],[7422,7422]]],[1565231792016,["GJX@GJXAIOU",[[-1,7293,"| "]],[7293,7295],[7293,7293]]],[1565231793027,["GJX@GJXAIOU",[[-1,7294,"\n"]],[7293,7293],[7292,7292]]],[1565231794048,["GJX@GJXAIOU",[[-1,7293,"\n"]],[7293,7293],[7292,7292]]],[1565231795822,["GJX@GJXAIOU",[[1,7292,"··"]],[7292,7292],[7294,7294]]],[1565231796952,["GJX@GJXAIOU",[[-1,7292,"··"]],[7294,7294],[7292,7292]]],[1565231797756,["GJX@GJXAIOU",[[1,7292,"```"]],[7292,7292],[7295,7295]]],[1565231797798,["GJX@GJXAIOU",[[1,7295,"language\n```\n"]],[7295,7295],[7295,7303]]],[1565231798948,["GJX@GJXAIOU",[[-1,7295,"language"],[1,7303,"j"]],[7295,7303],[7296,7296]]],[1565231799310,["GJX@GJXAIOU",[[1,7296,"ava"]],[7296,7296],[7299,7299]]],[1565231800569,["GJX@GJXAIOU",[[1,7300,"\n"]],[7299,7299],[7300,7300]]],[1565231806392,["GJX@GJXAIOU",[[-1,6229,"1. "]],[6229,6232],[6229,6229]]],[1565231806803,["GJX@GJXAIOU",[[1,6229,"- "]],[6229,6229],[6231,6231]]],[1565231815208,["GJX@GJXAIOU",[[-1,7245,"2. "]],[7245,7248],[7245,7245]]],[1565231815557,["GJX@GJXAIOU",[[1,7245,"- "]],[7245,7245],[7247,7247]]],[1565231819178,["GJX@GJXAIOU",[[-1,7304,"**public**  **static** String getFileName2( String path ){\n\n**return** path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n\n }\n\n}"]],[7304,7427],[7304,7304]]],[1565231822127,["GJX@GJXAIOU",[[1,7298,"**public**  **static** String getFileName2( String path ){\n\n**return** path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n\n }\n\n}"]],[7298,7298],[7421,7421]]],[1565231825409,["GJX@GJXAIOU",[[-1,7306,"**  **"]],[7306,7312],[7306,7306]]],[1565231826977,["GJX@GJXAIOU",[[-1,7313,"*"]],[7314,7314],[7313,7313]]],[1565231828046,["GJX@GJXAIOU",[[1,7306," "]],[7306,7306],[7307,7307]]],[1565231829473,["GJX@GJXAIOU",[[-1,7313,"*"]],[7314,7314],[7313,7313]]],[1565231829884,["GJX@GJXAIOU",[[1,7314," "]],[7313,7313],[7314,7314]]],[1565231831849,["GJX@GJXAIOU",[[-1,7298,"**"]],[7298,7300],[7298,7298]]],[1565231833273,["GJX@GJXAIOU",[[-1,7350,"**"]],[7350,7352],[7350,7350]]],[1565231834872,["GJX@GJXAIOU",[[-1,7357,"*"]],[7356,7357],[7356,7356]]],[1565231835656,["GJX@GJXAIOU",[[-1,7356,"*"]],[7357,7357],[7356,7356]]],[1565231838343,["GJX@GJXAIOU",[[-1,7349,"\n"]],[7350,7350],[7349,7349]]],[1565231839441,["GJX@GJXAIOU",[[1,7349,"    "]],[7349,7349],[7353,7353]]],[1565231841715,["GJX@GJXAIOU",[[-1,7406,"\n"]],[7406,7406],[7405,7405]]],[1565231843345,["GJX@GJXAIOU",[[1,7407,"      "]],[7407,7407],[7413,7413]]],[1565231844891,["GJX@GJXAIOU",[[-1,7415,"\n"]],[7415,7415],[7414,7414]]],[1565231847761,["GJX@GJXAIOU",[[-1,7411,"  "]],[7412,7413],[7411,7411]]],[1565231859032,["GJX@GJXAIOU",[[-1,7424,"3. "]],[7424,7427],[7424,7424]]],[1565231860084,["GJX@GJXAIOU",[[1,7424,"- "]],[7424,7424],[7426,7426]]],[1565231861794,["GJX@GJXAIOU",[[-1,7423,"\n"]],[7423,7423],[7422,7422]]],[1565231861923,["GJX@GJXAIOU",[[-1,7422,"\n"]],[7422,7422],[7421,7421]]],[1565231862065,["GJX@GJXAIOU",[[-1,7421,"\n"]],[7421,7421],[7420,7420]]],[1565231862184,["GJX@GJXAIOU",[[-1,7420,"\n"]],[7420,7420],[7419,7419]]],[1565231865296,["GJX@GJXAIOU",[[-1,7244,"\n"]],[7244,7244],[7243,7243]]],[1565231915837,["GJX@GJXAIOU",[[1,7437,"···"]],[7437,7437],[7440,7440]]],[1565231916992,["GJX@GJXAIOU",[[-1,7437,"···"]],[7440,7440],[7437,7437]]],[1565231918308,["GJX@GJXAIOU",[[1,7437,"```"]],[7437,7437],[7440,7440]]],[1565231918349,["GJX@GJXAIOU",[[1,7440,"language\n```\n"]],[7440,7440],[7440,7448]]],[1565231919204,["GJX@GJXAIOU",[[-1,7440,"language"],[1,7448,"j"]],[7440,7448],[7441,7441]]],[1565231919622,["GJX@GJXAIOU",[[1,7441,"ava"]],[7441,7441],[7444,7444]]],[1565231919732,["GJX@GJXAIOU",[[1,7445,"\n"]],[7444,7444],[7445,7445]]],[1565231920801,["GJX@GJXAIOU",[[1,7445,"// 将字符串对象中存储的字符反序 public static String reaverseString(String src) {\n\n    // 1. 将字符串转换为字符数组\n  char chs[] = src.toCharArray();\n  // 2. 循环交换\n  for (int start = 0, end = chs.length - 1; start < end; start++, end--) {\n        // 3. 数据交换\n  char temp = chs[end];\n  chs[end] = chs[start];\n  chs[start] = temp;\n  }\n    // 4. 将字符数组转换为字符串\n  return new String(chs); }"]],[7445,7445],[7800,7800]]],[1565231923552,["GJX@GJXAIOU",[[-1,7445,"// 将字符串对象中存储的字符反序 public static String reaverseString(String src) {\n\n    // 1. 将字符串转换为字符数组\n  char chs[] = src.toCharArray();\n  // 2. 循环交换\n  for (int start = 0, end = chs.length - 1; start < end; start++, end--) {\n        // 3. 数据交换\n  char temp = chs[end];\n  chs[end] = chs[start];\n  chs[start] = temp;\n  }\n    // 4. 将字符数组转换为字符串\n  return new String(chs); }"]],[7800,7800],[7445,7445]]],[1565231925737,["GJX@GJXAIOU",[[1,7445,"// 将字符串对象中存储的字符反序\n    public static String reaverseString(String src) {\n\n        // 1. 将字符串转换为字符数组\n        char chs[] = src.toCharArray();\n        // 2. 循环交换\n        for (int start = 0, end = chs.length - 1; start < end; start++, end--) {\n            // 3. 数据交换\n            char temp = chs[end];\n            chs[end] = chs[start];\n            chs[start] = temp;\n        }\n        // 4. 将字符数组转换为字符串\n        return new String(chs);\n    }"]],[7445,7445],[7880,7880]]],[1565231934984,["GJX@GJXAIOU",[[-1,7886,"| \n\n// 将字符串对象中存储的字符反序\n\n  **public**  **static** String reaverseString( String src ){\n\n  // 1\\. 将字符串转换为字符数组\n\n  **char** chs[] = src.toCharArray();\n\n  // 2\\. 循环交换\n\n  **for** ( **int** start = 0 , end = chs.length - 1; start < end ; start++,end-- )\n\n {\n\n  // 3\\. 数据交换\n\n  **char** temp = chs[end];\n\n chs[end] = chs[start];\n\n chs[start] = temp;\n\n }\n\n  // 4\\. 将字符数组转换为字符串\n\n  **return**  **new** String( chs );\n\n }\n\n |\n"]],[7886,8298],[7886,7886]]],[1565231937913,["GJX@GJXAIOU",[[-1,7887,"4\\. "]],[7887,7891],[7887,7887]]],[1565231938292,["GJX@GJXAIOU",[[1,7887,"- "]],[7887,7887],[7889,7889]]],[1565231940504,["GJX@GJXAIOU",[[-1,7886,"\n"]],[7886,7886],[7885,7885]]],[1565231955600,["GJX@GJXAIOU",[[-1,7904,"| \n\n** public**  **static**  **int** getCount( String src , String tag ){\n\n  // 0\\. 定义索引变量和统计个数的变量\n\n  **int** index = 0;\n\n  **int** count = 0;\n\n  // 1\\. 写循环判断\n\n  **while** ( ( index = src.indexOf(tag) ) != -1 ) // jackjava\n\n {\n\n  // 2\\. 求字串\n\n System._out_.println( src );\n\n src = src.substring( index + tag.length() ); // index 4 + 4 = 8\n\n System._out_.print( src.length() + \" : \" + index + \" : \" + tag.length() );\n\n  // 3\\. 累加\n\n count++;\n\n }\n\n  **return** count;\n\n }\n\n |\n"]],[7904,8376],[7904,7904]]],[1565231960636,["GJX@GJXAIOU",[[1,7904,"```"]],[7904,7904],[7907,7907]]],[1565231960674,["GJX@GJXAIOU",[[1,7907,"language\n```\n"]],[7907,7907],[7907,7915]]],[1565231961484,["GJX@GJXAIOU",[[-1,7907,"language"],[1,7915,"j"]],[7907,7915],[7908,7908]]],[1565231961874,["GJX@GJXAIOU",[[1,7908,"ava"]],[7908,7908],[7911,7911]]],[1565231962020,["GJX@GJXAIOU",[[1,7912,"\n"]],[7911,7911],[7912,7912]]],[1565231982382,["GJX@GJXAIOU",[[1,7912," public static int getCount(String src, String tag) {\n        // 0. 定义索引变量和统计个数的变量\n        int index = 0;\n        int count = 0;\n        // 1. 写循环判断\n        while ((index = src.indexOf(tag)) != -1)   // jackjava\n        {\n            // 2. 求字串\n            System.out.println(src);\n            src = src.substring(index + tag.length());   // index 4 + 4 = 8\n            System.out.print(src.length() + \" : \" + index + \" :  \" + tag.length());\n            // 3. 累加\n            count++;\n        }\n        return count;\n    }"]],[7912,7912],[8432,8432]]],[1565232010800,["GJX@GJXAIOU",[[-1,8538,"**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n特点：\n\n1. 默认缓冲区的容量是16。\n\n2. StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。"]],[8538,8684],[8538,8538]]],[1565232013138,["GJX@GJXAIOU",[[1,8455,"**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n特点：\n\n1. 默认缓冲区的容量是16。\n\n2. StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。"]],[8455,8455],[8601,8601]]],[1565232016346,["GJX@GJXAIOU",[[1,8535,"- "]],[8535,8535],[8537,8537]]],[1565232019978,["GJX@GJXAIOU",[[-1,8542,"1. "]],[8542,8545],[8542,8542]]],[1565232020137,["GJX@GJXAIOU",[[-1,8541,"\n"]],[8542,8542],[8541,8541]]],[1565232021728,["GJX@GJXAIOU",[[1,8541,"  - "]],[8541,8541],[8545,8545]]],[1565232024144,["GJX@GJXAIOU",[[-1,8559,"2. "]],[8559,8562],[8559,8559]]],[1565232024311,["GJX@GJXAIOU",[[-1,8558,"\n"]],[8559,8559],[8558,8558]]],[1565232025963,["GJX@GJXAIOU",[[1,8558,"    - "]],[8558,8558],[8564,8564]]],[1565232029783,["GJX@GJXAIOU",[[-1,8560,"  "]],[8562,8562],[8560,8560]]],[1565232035434,["GJX@GJXAIOU",[[-1,8604,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg)"]],[8604,8684],[8604,8604]]],[1565232035816,["GJX@GJXAIOU",[[1,8608,"\n"]],[8604,8604],[8605,8605]]],[1565232037578,["GJX@GJXAIOU",[[1,8605,"···"]],[8605,8605],[8608,8608]]],[1565232038391,["GJX@GJXAIOU",[[-1,8606,"··"]],[8608,8608],[8606,8606]]],[1565232039259,["GJX@GJXAIOU",[[1,8606,"```"]],[8606,8606],[8609,8609]]],[1565232041042,["GJX@GJXAIOU",[[-1,8605,"·"]],[8606,8606],[8605,8605]]],[1565232043012,["GJX@GJXAIOU",[[1,8608,"java"]],[8608,8608],[8612,8612]]],[1565232043154,["GJX@GJXAIOU",[[1,8616,"\n"]],[8612,8612],[8613,8613]]],[1565232043311,["GJX@GJXAIOU",[[1,8617,"\n"]],[8613,8613],[8614,8614]]],[1565232044491,["GJX@GJXAIOU",[[1,8614,"```"]],[8614,8614],[8617,8617]]],[1565232135950,["GJX@GJXAIOU",[[1,8613,"public static void main(String[] args) {\n        String string = \"\";\n        for (int i = 0; i < 10; i++) {\n            string += 1;\n        }\n        System.out.println(string);\n    }"]],[8613,8613],[8797,8797]]],[1565232153848,["GJX@GJXAIOU",[[-1,8821,"\n"]],[8821,8821],[8820,8820]]],[1565232154656,["GJX@GJXAIOU",[[-1,8818,"| "]],[8820,8820],[8818,8818]]],[1565232155793,["GJX@GJXAIOU",[[-1,8818,"\n"]],[8818,8818],[8817,8817]]],[1565232161212,["GJX@GJXAIOU",[[1,8817,"| fang"]],[8817,8817],[8823,8823]]],[1565232162169,["GJX@GJXAIOU",[[-1,8819,"fang"]],[8823,8823],[8819,8819]]],[1565232167485,["GJX@GJXAIOU",[[1,8819,"方法名 | 说明"]],[8819,8819],[8827,8827]]],[1565232167907,["GJX@GJXAIOU",[[1,8828,"\n"]],[8827,8827],[8828,8828]]],[1565232169343,["GJX@GJXAIOU",[[1,8828,"——"]],[8828,8828],[8830,8830]]],[1565232170320,["GJX@GJXAIOU",[[-1,8828,"——"]],[8830,8830],[8828,8828]]],[1565232174004,["GJX@GJXAIOU",[[1,8828,"---|---|"]],[8828,8828],[8836,8836]]],[1565232179376,["GJX@GJXAIOU",[[-1,8873,"\n"]],[8873,8873],[8872,8872]]],[1565232181762,["GJX@GJXAIOU",[[-1,8911,"\n"]],[8911,8911],[8910,8910]]],[1565232184844,["GJX@GJXAIOU",[[1,8859,"|"]],[8859,8859],[8860,8860]]],[1565232187757,["GJX@GJXAIOU",[[1,8891,"|"]],[8891,8891],[8892,8892]]],[1565232189852,["GJX@GJXAIOU",[[1,8931,"|"]],[8931,8931],[8932,8932]]],[1565232195481,["GJX@GJXAIOU",[[-1,8956," |\n\n| "]],[8956,8962],[8956,8956]]],[1565232342143,["GJX@GJXAIOU",[[1,8956,"·"]],[8956,8956],[8957,8957]]],[1565232343138,["GJX@GJXAIOU",[[-1,8956,"·"]],[8957,8957],[8956,8956]]],[1565232343955,["GJX@GJXAIOU",[[1,8956,"```"]],[8956,8956],[8959,8959]]],[1565232343997,["GJX@GJXAIOU",[[1,8959,"language\n```\n"]],[8959,8959],[8959,8967]]],[1565232344659,["GJX@GJXAIOU",[[-1,8959,"language"],[1,8967,"j"]],[8959,8967],[8960,8960]]],[1565232345026,["GJX@GJXAIOU",[[1,8960,"ava"]],[8960,8960],[8963,8963]]],[1565232345148,["GJX@GJXAIOU",[[1,8964,"\n"]],[8963,8963],[8964,8964]]],[1565232348433,["GJX@GJXAIOU",[[1,8964,"StringBuffer sb = new StringBuffer(\"jack\");\n        sb.append(true);\n        sb.append('a');\n        // 链式编程\n        sb.append(97).append(34.0).append(new char[]{\n             'o', 'o'\n         });   \n        // 输出缓冲区的中文本数据\n        System.out.println(sb.toString());          \n        sb = new\n\n        StringBuffer(\"jack\");\n        // jajavack\n        sb.insert(2, \"java\");                       \n        System.out.println(sb.toString());"]],[8964,8964],[9404,9404]]],[1565232353425,["GJX@GJXAIOU",[[-1,9014,"  "],[-1,9033,"  "],[-1,9063,"  "],[-1,9073," "],[-1,9080," "],[-1,9138,"  "],[-1,9156,"  "],[-1,9165," "],[-1,9172," "],[-1,9188,"  "],[-1,9247,"  "],[-1,9259,"  "],[-1,9295,"  "],[-1,9309,"  "],[-1,9362,"  "]],[9016,9404],[9014,9378]]],[1565232353897,["GJX@GJXAIOU",[[-1,9012,"  "],[-1,9031,"  "],[-1,9057,"  "],[-1,9067," "],[-1,9072," "],[-1,9128,"  "],[-1,9144,"  "],[-1,9153," "],[-1,9158," "],[-1,9174,"  "],[-1,9229,"  "],[-1,9241,"  "],[-1,9273,"  "],[-1,9287,"  "],[-1,9338,"  "]],[9014,9378],[9012,9352]]],[1565232354235,["GJX@GJXAIOU",[[-1,9010,"  "],[-1,9029,"  "],[-1,9051,"  "],[-1,9061," "],[-1,9064," "],[-1,9118,"  "],[-1,9132,"  "],[-1,9141," "],[-1,9144," "],[-1,9160,"  "],[-1,9211,"  "],[-1,9223,"  "],[-1,9251,"  "],[-1,9265,"  "],[-1,9314,"  "]],[9012,9352],[9010,9326]]],[1565232354843,["GJX@GJXAIOU",[[-1,9008,"  "],[-1,9027,"  "],[-1,9045,"  "],[-1,9055,"  "],[-1,9108,"  "],[-1,9120,"  "],[-1,9129,"  "],[-1,9146,"  "],[-1,9193,"  "],[-1,9205,"  "],[-1,9229,"  "],[-1,9243,"  "],[-1,9290,"  "]],[9010,9326],[9008,9300]]],[1565232365233,["GJX@GJXAIOU",[[-1,9307,"StringBuffer sb = **new** StringBuffer(\"jack\");\n\nsb.append(**true**);\n\nsb.append('a');\n\nsb.append(97).append(34.0).append(**new**  **char**[]{'o','o'}); // 链式编程\n\nSystem._out_.println( sb.toString() ); // 输出缓冲区的中文本数据\n\nsb = **new** StringBuffer(\"jack\");\n\nsb.insert( 2, \"java\" ); // jajavack\n\nSystem._out_.println( sb.toString() ); \n\n |\n"]],[9306,9640],[9306,9306]]],[1565232365816,["GJX@GJXAIOU",[[-1,9307,"\n"]],[9306,9306],[9305,9305]]],[1565232366656,["GJX@GJXAIOU",[[-1,9306,"\n"]],[9305,9305],[9304,9304]]],[1565232370664,["GJX@GJXAIOU",[[-1,9317,"| "]],[9319,9319],[9317,9317]]],[1565232371000,["GJX@GJXAIOU",[[-1,9318,"\n"]],[9317,9317],[9316,9316]]],[1565232372264,["GJX@GJXAIOU",[[1,9318,"\n"]],[9316,9316],[9317,9317]]],[1565232375171,["GJX@GJXAIOU",[[1,9317,"_+"]],[9317,9317],[9319,9319]]],[1565232375242,["GJX@GJXAIOU",[[-1,9318,"+"],[1,9319,"_"]],[9319,9319],[9318,9318]]],[1565232375840,["GJX@GJXAIOU",[[-1,9318,"_"]],[9318,9318],[9317,9317]]],[1565232376231,["GJX@GJXAIOU",[[-1,9316,"\n"]],[9317,9317],[9316,9316]]],[1565232377811,["GJX@GJXAIOU",[[1,9319,"\n"]],[9317,9317],[9318,9318]]],[1565232378704,["GJX@GJXAIOU",[[-1,9319,"\n"]],[9318,9318],[9317,9317]]],[1565232379160,["GJX@GJXAIOU",[[-1,9316,"_"]],[9317,9317],[9316,9316]]],[1565232381473,["GJX@GJXAIOU",[[1,9316,"| fang"]],[9316,9316],[9322,9322]]],[1565232382514,["GJX@GJXAIOU",[[-1,9318,"fang"]],[9322,9322],[9318,9318]]],[1565232387863,["GJX@GJXAIOU",[[1,9318,"方法 | 说明"]],[9318,9318],[9325,9325]]],[1565232388733,["GJX@GJXAIOU",[[1,9327,"\n"]],[9325,9325],[9326,9326]]],[1565232392660,["GJX@GJXAIOU",[[1,9326,"|---|---"]],[9326,9326],[9334,9334]]],[1565232395209,["GJX@GJXAIOU",[[-1,9335,"\n"]],[9335,9335],[9334,9334]]],[1565232396091,["GJX@GJXAIOU",[[-1,9357,"\n"]],[9357,9357],[9356,9356]]],[1565232396768,["GJX@GJXAIOU",[[-1,9402,"\n"]],[9402,9402],[9401,9401]]],[1565232397784,["GJX@GJXAIOU",[[-1,9438," |"]],[9438,9440],[9438,9438]]],[1565232400765,["GJX@GJXAIOU",[[1,9346," | "]],[9346,9346],[9349,9349]]],[1565232403475,["GJX@GJXAIOU",[[1,9380," | "]],[9380,9380],[9383,9383]]],[1565232405476,["GJX@GJXAIOU",[[1,9429," |"]],[9429,9429],[9431,9431]]],[1565232415122,["GJX@GJXAIOU",[[-1,9448,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg)\n"]],[9447,9528],[9447,9447]]],[1565232415256,["GJX@GJXAIOU",[[-1,9448,"\n"]],[9447,9447],[9446,9446]]],[1565232523144,["GJX@GJXAIOU",[[1,9448,"\n"]],[9445,9445],[9446,9446]]],[1565232524906,["GJX@GJXAIOU",[[1,9446,"```"]],[9446,9446],[9449,9449]]],[1565232524947,["GJX@GJXAIOU",[[1,9449,"language\n```\n"]],[9449,9449],[9449,9457]]],[1565232525738,["GJX@GJXAIOU",[[-1,9449,"language"],[1,9457,"j"]],[9449,9457],[9450,9450]]],[1565232526195,["GJX@GJXAIOU",[[1,9450,"ava"]],[9450,9450],[9453,9453]]],[1565232526317,["GJX@GJXAIOU",[[1,9454,"\n"]],[9453,9453],[9454,9454]]],[1565232529130,["GJX@GJXAIOU",[[1,9454,"public static void main(String[] args) {\n    StringBuffer stringBuffer = new StringBuffer(\"jackc\");\n  System.out.println(stringBuffer.indexOf(\"c\"));\n  System.out.println(stringBuffer.lastIndexOf(\"c\")); }"]],[9454,9454],[9657,9657]]],[1565232546706,["GJX@GJXAIOU",[[1,9681,"---"]],[9681,9681],[9684,9684]]],[1565232548291,["GJX@GJXAIOU",[[1,9684,"|---"]],[9684,9684],[9688,9688]]],[1565232552807,["GJX@GJXAIOU",[[1,9678,"|fangf"]],[9678,9678],[9684,9684]]],[1565232554320,["GJX@GJXAIOU",[[-1,9679,"fangf"]],[9684,9684],[9679,9679]]],[1565232558263,["GJX@GJXAIOU",[[1,9679,"方法 | 说明"]],[9679,9679],[9686,9686]]],[1565232561272,["GJX@GJXAIOU",[[-1,9697,"\n"]],[9697,9697],[9696,9696]]],[1565232563360,["GJX@GJXAIOU",[[-1,9814,"\n"]],[9814,9814],[9813,9813]]],[1565232565360,["GJX@GJXAIOU",[[-1,9857," |"]],[9859,9859],[9857,9857]]],[1565232569223,["GJX@GJXAIOU",[[1,9734,"|"]],[9734,9734],[9735,9735]]],[1565232571427,["GJX@GJXAIOU",[[1,9844," "]],[9843,9843],[9844,9844]]],[1565232572051,["GJX@GJXAIOU",[[1,9844,"|"]],[9844,9844],[9845,9845]]],[1565232763916,["GJX@GJXAIOU",[[1,9860,"~·"]],[9860,9860],[9862,9862]]],[1565232764928,["GJX@GJXAIOU",[[-1,9860,"~·"]],[9862,9862],[9860,9860]]],[1565232766203,["GJX@GJXAIOU",[[1,9860,"```"]],[9860,9860],[9863,9863]]],[1565232766244,["GJX@GJXAIOU",[[1,9863,"language\n```\n"]],[9863,9863],[9863,9871]]],[1565232768162,["GJX@GJXAIOU",[[-1,9863,"language"],[1,9871,"j"]],[9863,9871],[9864,9864]]],[1565232768568,["GJX@GJXAIOU",[[1,9864,"ava"]],[9864,9864],[9867,9867]]],[1565232768983,["GJX@GJXAIOU",[[1,9868,"\n"]],[9867,9867],[9868,9868]]],[1565232772108,["GJX@GJXAIOU",[[1,9868,"public static void main(String[] args) {\n        StringBuffer stringBuffer = new StringBuffer(\"helloworld\");\n        System.out.println(stringBuffer.replace(2, 6, \"javaEE\"));\n        stringBuffer.setCharAt(8,'Q');\n        System.out.println(stringBuffer);\n    }"]],[9868,9868],[10129,10129]]],[1565232774951,["GJX@GJXAIOU",[[1,10136,"\n"]],[10133,10133],[10134,10134]]],[1565232775987,["GJX@GJXAIOU",[[1,10134,"cheng"]],[10134,10134],[10139,10139]]],[1565232776687,["GJX@GJXAIOU",[[-1,10134,"cheng"]],[10139,10139],[10134,10134]]],[1565232780690,["GJX@GJXAIOU",[[1,10134,"程序运行结果："]],[10134,10134],[10141,10141]]],[1565232780920,["GJX@GJXAIOU",[[1,10144,"\n"]],[10141,10141],[10142,10142]]],[1565232782228,["GJX@GJXAIOU",[[1,10142,"```"]],[10142,10142],[10145,10145]]],[1565232782268,["GJX@GJXAIOU",[[1,10145,"language\n```\n"]],[10145,10145],[10145,10153]]],[1565232783146,["GJX@GJXAIOU",[[-1,10145,"language"],[1,10153,"j"]],[10145,10153],[10146,10146]]],[1565232783522,["GJX@GJXAIOU",[[1,10146,"ava"]],[10146,10146],[10149,10149]]],[1565232783593,["GJX@GJXAIOU",[[1,10150,"\n"]],[10149,10149],[10150,10150]]],[1565232791694,["GJX@GJXAIOU",[[1,10150,"hejavaEEorld\nhejavaEEQrld"]],[10150,10150],[10175,10175]]],[1565232797058,["GJX@GJXAIOU",[[-1,10183,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg)"]],[10183,10263],[10183,10183]]],[1565232797185,["GJX@GJXAIOU",[[-1,10184,"\n"]],[10183,10183],[10182,10182]]],[1565232823122,["GJX@GJXAIOU",[[1,10198,"\n"]],[10197,10197],[10198,10198]]],[1565232825499,["GJX@GJXAIOU",[[1,10198,"---"]],[10198,10198],[10201,10201]]],[1565232827008,["GJX@GJXAIOU",[[-1,10198,"---"]],[10201,10201],[10198,10198]]],[1565232830379,["GJX@GJXAIOU",[[1,10198,"has"]],[10198,10198],[10201,10201]]],[1565232830959,["GJX@GJXAIOU",[[-1,10198,"has"]],[10201,10201],[10198,10198]]],[1565232834548,["GJX@GJXAIOU",[[1,10198,"方法 | 说明"]],[10198,10198],[10205,10205]]],[1565232834841,["GJX@GJXAIOU",[[1,10206,"\n"]],[10205,10205],[10206,10206]]],[1565232838798,["GJX@GJXAIOU",[[1,10206,"---|---"]],[10206,10206],[10213,10213]]],[1565232839273,["GJX@GJXAIOU",[[1,10214,"   |   \n"]],[10213,10213],[10214,10217]]],[1565232845204,["GJX@GJXAIOU",[[-1,10214,"   "],[1,10217,"delete"]],[10214,10214],[10220,10220]]],[1565232847269,["GJX@GJXAIOU",[[1,10220,"()"]],[10220,10220],[10222,10222]]],[1565232849867,["GJX@GJXAIOU",[[1,10221,"int  s"]],[10221,10221],[10227,10227]]],[1565232850601,["GJX@GJXAIOU",[[-1,10225," s"]],[10227,10227],[10225,10225]]],[1565232851658,["GJX@GJXAIOU",[[1,10225,"str"]],[10225,10225],[10228,10228]]],[1565232852328,["GJX@GJXAIOU",[[-1,10227,"r"]],[10228,10228],[10227,10227]]],[1565232855921,["GJX@GJXAIOU",[[1,10227,"art, int end"]],[10227,10227],[10239,10239]]],[1565232873588,["GJX@GJXAIOU",[[1,10241,"删除指定区域元素，se"]],[10241,10241],[10252,10252]]],[1565232874225,["GJX@GJXAIOU",[[-1,10251,"e"]],[10252,10252],[10251,10251]]],[1565232874296,["GJX@GJXAIOU",[[1,10251,"a"]],[10251,10251],[10252,10252]]],[1565232874844,["GJX@GJXAIOU",[[-1,10251,"a"]],[10252,10252],[10251,10251]]],[1565232876018,["GJX@GJXAIOU",[[1,10251,"taer"]],[10251,10251],[10255,10255]]],[1565232876714,["GJX@GJXAIOU",[[-1,10253,"er"]],[10255,10255],[10253,10253]]],[1565232877283,["GJX@GJXAIOU",[[1,10253,"rt"]],[10253,10253],[10255,10255]]],[1565232878099,["GJX@GJXAIOU",[[1,10258," "]],[10255,10255],[10256,10256]]],[1565232879643,["GJX@GJXAIOU",[[1,10256,"<="]],[10256,10256],[10258,10258]]],[1565232879860,["GJX@GJXAIOU",[[1,10261," "]],[10258,10258],[10259,10259]]],[1565232881751,["GJX@GJXAIOU",[[1,10259,"char"]],[10259,10259],[10263,10263]]],[1565232882548,["GJX@GJXAIOU",[[1,10266," "]],[10263,10263],[10264,10264]]],[1565232882979,["GJX@GJXAIOU",[[1,10264,"<"]],[10264,10264],[10265,10265]]],[1565232883164,["GJX@GJXAIOU",[[1,10268," "]],[10265,10265],[10266,10266]]],[1565232884468,["GJX@GJXAIOU",[[1,10266,"end"]],[10266,10266],[10269,10269]]],[1565232885800,["GJX@GJXAIOU",[[1,10269,"\n"]],[10269,10269],[10270,10270]]],[1565232892280,["GJX@GJXAIOU",[[1,10270,"delete()"]],[10270,10270],[10278,10278]]],[1565232895981,["GJX@GJXAIOU",[[1,10277,"0,s"]],[10277,10277],[10280,10280]]],[1565232897451,["GJX@GJXAIOU",[[-1,10279,"s"]],[10280,10280],[10279,10279]]],[1565232900395,["GJX@GJXAIOU",[[1,10279," s"]],[10279,10279],[10281,10281]]],[1565232901107,["GJX@GJXAIOU",[[-1,10280,"s"]],[10281,10281],[10280,10280]]],[1565232906035,["GJX@GJXAIOU",[[1,10280,"s"]],[10280,10280],[10281,10281]]],[1565232910339,["GJX@GJXAIOU",[[1,10281,"b.length"]],[10281,10281],[10289,10289]]],[1565232912410,["GJX@GJXAIOU",[[1,10293," "]],[10290,10290],[10291,10291]]],[1565232913389,["GJX@GJXAIOU",[[1,10291,"|"]],[10291,10291],[10292,10292]]],[1565232913675,["GJX@GJXAIOU",[[1,10295," "]],[10292,10292],[10293,10293]]],[1565232917141,["GJX@GJXAIOU",[[1,10293,"q"]],[10293,10293],[10294,10294]]],[1565232917672,["GJX@GJXAIOU",[[-1,10293,"q"]],[10294,10294],[10293,10293]]],[1565232923312,["GJX@GJXAIOU",[[1,10293,"清空整个缓冲区"]],[10293,10293],[10300,10300]]],[1565232923716,["GJX@GJXAIOU",[[1,10300,"\n"]],[10300,10300],[10301,10301]]],[1565232933932,["GJX@GJXAIOU",[[1,10301,"deleteChat"]],[10301,10301],[10311,10311]]],[1565232934640,["GJX@GJXAIOU",[[-1,10310,"t"]],[10311,10311],[10310,10310]]],[1565232936142,["GJX@GJXAIOU",[[1,10310,"rAT"]],[10310,10310],[10313,10313]]],[1565232936888,["GJX@GJXAIOU",[[-1,10312,"T"]],[10313,10313],[10312,10312]]],[1565232939327,["GJX@GJXAIOU",[[1,10312,"t()"]],[10312,10312],[10315,10315]]],[1565232942148,["GJX@GJXAIOU",[[1,10314,"int inse"]],[10314,10314],[10322,10322]]],[1565232942752,["GJX@GJXAIOU",[[-1,10320,"se"]],[10322,10322],[10320,10320]]],[1565232943635,["GJX@GJXAIOU",[[1,10320,"dex"]],[10320,10320],[10323,10323]]],[1565232945066,["GJX@GJXAIOU",[[1,10327," "]],[10324,10324],[10325,10325]]],[1565232945540,["GJX@GJXAIOU",[[1,10325,"|"]],[10325,10325],[10326,10326]]],[1565232945724,["GJX@GJXAIOU",[[1,10329," "]],[10326,10326],[10327,10327]]],[1565232946568,["GJX@GJXAIOU",[[1,10327,"qing"]],[10327,10327],[10331,10331]]],[1565232947343,["GJX@GJXAIOU",[[-1,10327,"qing"]],[10331,10331],[10327,10327]]],[1565232959757,["GJX@GJXAIOU",[[1,10327,"删除某个下标的元素"]],[10327,10327],[10336,10336]]],[1565232964633,["GJX@GJXAIOU",[[-1,10340,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg)\n"]],[10340,10503],[10340,10340]]],[1565232966082,["GJX@GJXAIOU",[[1,10341,"\n"]],[10340,10340],[10341,10341]]],[1565232966948,["GJX@GJXAIOU",[[1,10341,"```"]],[10341,10341],[10344,10344]]],[1565232966988,["GJX@GJXAIOU",[[1,10344,"language\n```\n"]],[10344,10344],[10344,10352]]],[1565232967925,["GJX@GJXAIOU",[[-1,10344,"language"],[1,10352,"j"]],[10344,10352],[10345,10345]]],[1565232968437,["GJX@GJXAIOU",[[1,10345,"ava"]],[10345,10345],[10348,10348]]],[1565232968541,["GJX@GJXAIOU",[[1,10349,"\n"]],[10348,10348],[10349,10349]]],[1565233492202,["GJX@GJXAIOU",[[1,10349,"public static void main(String[] args) {\n        StringBuffer stringBuffer = new StringBuffer(\"helloworld\");\n        System.out.println(stringBuffer.delete(2, 5));\n\n        System.out.println(stringBuffer.deleteCharAt(3));\n    }"]],[10349,10349],[10577,10577]]],[1565233495801,["GJX@GJXAIOU",[[1,10583,"\n"]],[10581,10581],[10582,10582]]],[1565233496699,["GJX@GJXAIOU",[[1,10582,"cheng"]],[10582,10582],[10587,10587]]],[1565233497768,["GJX@GJXAIOU",[[-1,10582,"cheng"]],[10587,10587],[10582,10582]]],[1565233500742,["GJX@GJXAIOU",[[1,10582,"程序运行解雇"]],[10582,10582],[10588,10588]]],[1565233501609,["GJX@GJXAIOU",[[-1,10586,"解雇"]],[10588,10588],[10586,10586]]],[1565233503326,["GJX@GJXAIOU",[[1,10586,"结果："]],[10586,10586],[10589,10589]]],[1565233503562,["GJX@GJXAIOU",[[1,10591,"\n"]],[10589,10589],[10590,10590]]],[1565233504264,["GJX@GJXAIOU",[[1,10592,"\n"]],[10590,10590],[10591,10591]]],[1565233505137,["GJX@GJXAIOU",[[-1,10592,"\n"]],[10591,10591],[10590,10590]]],[1565233505830,["GJX@GJXAIOU",[[1,10590,"··"]],[10590,10590],[10592,10592]]],[1565233506488,["GJX@GJXAIOU",[[-1,10590,"··"]],[10592,10592],[10590,10590]]],[1565233507652,["GJX@GJXAIOU",[[1,10590,"```"]],[10590,10590],[10593,10593]]],[1565233507692,["GJX@GJXAIOU",[[1,10593,"language\n```\n"]],[10593,10593],[10593,10601]]],[1565233508443,["GJX@GJXAIOU",[[-1,10593,"language"],[1,10601,"j"]],[10593,10601],[10594,10594]]],[1565233508962,["GJX@GJXAIOU",[[1,10594,"ava"]],[10594,10594],[10597,10597]]],[1565233509080,["GJX@GJXAIOU",[[1,10598,"\n"]],[10597,10597],[10598,10598]]],[1565233516486,["GJX@GJXAIOU",[[1,10598,"heworld\nhewrld"]],[10598,10598],[10612,10612]]],[1565233531592,["GJX@GJXAIOU",[[-1,10651,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg)"]],[10651,10731],[10651,10651]]],[1565233532559,["GJX@GJXAIOU",[[-1,10652,"\n"]],[10651,10651],[10650,10650]]],[1565233533808,["GJX@GJXAIOU",[[1,10650,"·"]],[10650,10650],[10651,10651]]],[1565233534747,["GJX@GJXAIOU",[[-1,10650,"·"]],[10651,10651],[10650,10650]]],[1565233535750,["GJX@GJXAIOU",[[1,10650,"```"]],[10650,10650],[10653,10653]]],[1565233535792,["GJX@GJXAIOU",[[1,10653,"language\n```\n"]],[10653,10653],[10653,10661]]],[1565233536572,["GJX@GJXAIOU",[[-1,10653,"language"],[1,10661,"j"]],[10653,10661],[10654,10654]]],[1565233536970,["GJX@GJXAIOU",[[1,10654,"ava"]],[10654,10654],[10657,10657]]],[1565233537146,["GJX@GJXAIOU",[[1,10658,"\n"]],[10657,10657],[10658,10658]]],[1565233616488,["GJX@GJXAIOU",[[1,10658,"public static void main(String[] args) {\n    String string = \"helloworld\";\n  StringBuffer stringBuffer = new StringBuffer(string);\n  System.out.println(stringBuffer.reverse()); }"]],[10658,10658],[10836,10836]]],[1565233620561,["GJX@GJXAIOU",[[-1,10701,"  "]],[10703,10703],[10701,10701]]],[1565233622593,["GJX@GJXAIOU",[[1,10841,"\n"]],[10838,10838],[10839,10839]]],[1565233623527,["GJX@GJXAIOU",[[1,10839,"chegn"]],[10839,10839],[10844,10844]]],[1565233624735,["GJX@GJXAIOU",[[-1,10839,"chegn"]],[10844,10844],[10839,10839]]],[1565233628037,["GJX@GJXAIOU",[[1,10839,"程序运行击鼓"]],[10839,10839],[10845,10845]]],[1565233628730,["GJX@GJXAIOU",[[-1,10843,"击鼓"]],[10845,10845],[10843,10843]]],[1565233630165,["GJX@GJXAIOU",[[1,10843,"结果："]],[10843,10843],[10846,10846]]],[1565233630408,["GJX@GJXAIOU",[[1,10849,"\n"]],[10846,10846],[10847,10847]]],[1565233632507,["GJX@GJXAIOU",[[1,10847,"```"]],[10847,10847],[10850,10850]]],[1565233632547,["GJX@GJXAIOU",[[1,10850,"language\n```\n"]],[10850,10850],[10850,10858]]],[1565233633735,["GJX@GJXAIOU",[[-1,10848,"``language"]],[10850,10858],[10848,10848]]],[1565233637192,["GJX@GJXAIOU",[[-1,10849,"```"]],[10852,10852],[10849,10849]]],[1565233637465,["GJX@GJXAIOU",[[-1,10852,"\n"]],[10849,10849],[10848,10848]]],[1565233638636,["GJX@GJXAIOU",[[1,10848,"`"]],[10848,10848],[10849,10849]]],[1565233644632,["GJX@GJXAIOU",[[1,10848,"dlrowolleh"]],[10848,10848],[10858,10858]]],[1565233673552,["GJX@GJXAIOU",[[-1,10973,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg)\n"]],[10972,11053],[10972,10972]]],[1565233674290,["GJX@GJXAIOU",[[1,10972,"  "]],[10972,10972],[10974,10974]]],[1565233675959,["GJX@GJXAIOU",[[-1,10972,"  "]],[10974,10974],[10972,10972]]],[1565233677010,["GJX@GJXAIOU",[[1,10972,"    "]],[10972,10972],[10976,10976]]],[1565233678098,["GJX@GJXAIOU",[[-1,10972,"    "]],[10976,10976],[10972,10972]]],[1565233679737,["GJX@GJXAIOU",[[1,10972,"  "]],[10972,10972],[10974,10974]]],[1565233680402,["GJX@GJXAIOU",[[-1,10972,"  "]],[10974,10974],[10972,10972]]],[1565233681277,["GJX@GJXAIOU",[[1,10972,"·"]],[10972,10972],[10973,10973]]],[1565233681919,["GJX@GJXAIOU",[[-1,10972,"·"]],[10973,10973],[10972,10972]]],[1565233683390,["GJX@GJXAIOU",[[1,10972,"```"]],[10972,10972],[10975,10975]]],[1565233683429,["GJX@GJXAIOU",[[1,10975,"language\n```\n"]],[10975,10975],[10975,10983]]],[1565233684422,["GJX@GJXAIOU",[[-1,10975,"language"],[1,10983,"j"]],[10975,10983],[10976,10976]]],[1565233684955,["GJX@GJXAIOU",[[1,10976,"ava"]],[10976,10976],[10979,10979]]],[1565233685216,["GJX@GJXAIOU",[[1,10980,"\n"]],[10979,10979],[10980,10980]]],[1565234141311,["GJX@GJXAIOU",[[1,10980,"public static void main(String[] args) {\n        // 获取系统属性\n        Properties properties = System.getProperties();\n        // 输出系统属性\n        properties.list(System.out);\n        System.out.println(\"*********************\");\n\n        // 获取操作系统名称\n        String osName = System.getProperty(\"os.name\");\n        System.out.println(osName);\n        System.out.println(\"*********************\");\n\n        // 检测操作系统系统支持该软件\n        if (\"Windows 10\".equals(osName)){\n            System.out.println(\"符合\");\n        }else{\n            System.out.println(\"不符合\");\n        }\n        System.out.println(\"*********************\");\n\n        // 获取path环境变量值\n        System.out.println(System.getenv(\"path\"));\n    }\n"]],[10980,10980],[11672,11672]]],[1565234144536,["GJX@GJXAIOU",[[1,11679,"\n"]],[11676,11676],[11677,11677]]],[1565234147734,["GJX@GJXAIOU",[[1,11677,"chu"]],[11677,11677],[11680,11680]]],[1565234148682,["GJX@GJXAIOU",[[-1,11677,"chu"]],[11680,11680],[11677,11677]]],[1565234153620,["GJX@GJXAIOU",[[1,11677,"输出结果："]],[11677,11677],[11682,11682]]],[1565234153937,["GJX@GJXAIOU",[[1,11685,"\n"]],[11682,11682],[11683,11683]]],[1565234155523,["GJX@GJXAIOU",[[1,11683,"```"]],[11683,11683],[11686,11686]]],[1565234155565,["GJX@GJXAIOU",[[1,11686,"language\n```\n"]],[11686,11686],[11686,11694]]],[1565234156635,["GJX@GJXAIOU",[[-1,11686,"language"],[1,11694,"j"]],[11686,11694],[11687,11687]]],[1565234157032,["GJX@GJXAIOU",[[1,11687,"ava"]],[11687,11687],[11690,11690]]],[1565234157145,["GJX@GJXAIOU",[[1,11691,"\n"]],[11690,11690],[11691,11691]]],[1565234170184,["GJX@GJXAIOU",[[1,11691,"-- listing properties --\njava.runtime.name=Java(TM) SE Runtime Environment\nsun.boot.library.path=E:\\Program\\Java\\JDK1.8\\jre\\bin\njava.vm.version=25.221-b11\njava.vm.vendor=Oracle Corporation\njava.vendor.url=http://java.oracle.com/\npath.separator=;\njava.vm.name=Java HotSpot(TM) 64-Bit Server VM\nfile.encoding.pkg=sun.io\nuser.script=\nuser.country=CN\nsun.java.launcher=SUN_STANDARD\nsun.os.patch.level=\njava.vm.specification.name=Java Virtual Machine Specification\nuser.dir=E:\\Program\\Java\\Project\\LeetCode\njava.runtime.version=1.8.0_221-b11\njava.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment\njava.endorsed.dirs=E:\\Program\\Java\\JDK1.8\\jre\\lib\\endorsed\nos.arch=amd64\njava.io.tmpdir=C:\\Users\\gjx16\\AppData\\Local\\Temp\\\nline.separator=\n\njava.vm.specification.vendor=Oracle Corporation\nuser.variant=\nos.name=Windows 10\nsun.jnu.encoding=GBK\njava.library.path=E:\\Program\\Java\\JDK1.8\\bin;C:\\WINDOWS...\njava.specification.name=Java Platform API Specification\njava.class.version=52.0\nsun.management.compiler=HotSpot 64-Bit Tiered Compilers\nos.version=10.0\nuser.home=C:\\Users\\gjx16\nuser.timezone=\njava.awt.printerjob=sun.awt.windows.WPrinterJob\nfile.encoding=UTF-8\njava.specification.version=1.8\nuser.name=GJX\njava.class.path=E:\\Program\\Java\\JDK1.8\\jre\\lib\\charse...\njava.vm.specification.version=1.8\nsun.arch.data.model=64\njava.home=E:\\Program\\Java\\JDK1.8\\jre\nsun.java.command=array.easy.Demo\njava.specification.vendor=Oracle Corporation\nuser.language=zh\nawt.toolkit=sun.awt.windows.WToolkit\njava.vm.info=mixed mode\njava.version=1.8.0_221\njava.ext.dirs=E:\\Program\\Java\\JDK1.8\\jre\\lib\\ext;C:...\nsun.boot.class.path=E:\\Program\\Java\\JDK1.8\\jre\\lib\\resour...\njava.vendor=Oracle Corporation\nfile.separator=\\\njava.vendor.url.bug=http://bugreport.sun.com/bugreport/\nsun.cpu.endian=little\nsun.io.unicode.encoding=UnicodeLittle\nsun.desktop=windows\nsun.cpu.isalist=amd64\n*********************\nWindows 10\n*********************\n符合\n*********************\nC:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files(x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\Matlab\\MATLAB2016B\\runtime\\win64;D:\\Matlab\\MATLAB2016B\\bin;D:\\Matlab\\MATLAB2016B\\polyspace\\bin;E:\\Program\\Java\\jdk_10.0.2\\bin;E:\\Program\\Java\\jdk_10.0.2\\jre\\bin;E:\\Program\\C++\\Qt\\5.11.1\\msvc2017_64;E:\\Program\\C++\\Qt\\5.11.1\\msvc2017_64\\bin;E:\\Program\\C++\\Qt\\Tools\\QtCreator\\bin;E:\\Program\\Nodejs\\;E:\\Program\\Nodejs;E:\\Program\\Python\\Python3.7.1;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;E:\\MySQL\\MySQL Server 5.7\\bin;E:\\Program\\C++\\C++\\MinGW\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\MacType\\MacType;E:\\Program\\Java\\JDK1.8\\bin;E:\\Program\\Python\\Python3.7.1\\Scripts\\;E:\\Program\\Python\\Python3.7.1\\;C:\\Users\\gjx16\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\gjx16\\AppData\\Roaming\\npm\n"]],[11691,11691],[15088,15088]]],[1565234201968,["GJX@GJXAIOU",[[-1,13676,";C:\\Program Files(x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\iCLS\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;D:\\Matlab\\MATLAB2016B\\runtime\\win64;D:\\Matlab\\MATLAB2016B\\bin;D:\\Matlab\\MATLAB2016B\\polyspace\\bin;E:\\Program\\Java\\jdk_10.0.2\\bin;E:\\Program\\Java\\jdk_10.0.2\\jre\\bin;E:\\Program\\C++\\Qt\\5.11.1\\msvc2017_64;E:\\Program\\C++\\Qt\\5.11.1\\msvc2017_64\\bin;E:\\Program\\C++\\Qt\\Tools\\QtCreator\\bin;E:\\Program\\Nodejs\\;E:\\Program\\Nodejs;E:\\Program\\Python\\Python3.7.1;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;E:\\MySQL\\MySQL Server 5.7\\bin;E:\\Program\\C++\\C++\\MinGW\\bin;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;D:\\MacType\\MacType;E:\\Program\\Java\\JDK1.8\\bin;E:\\Program\\Python\\Python3.7.1\\Scripts\\;E:\\Program\\Python\\Python3.7.1\\;C:\\Users\\gjx16\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\gjx16\\AppData\\Roaming\\npm\n"]],[13676,15088],[13676,13676]]],[1565234203139,["GJX@GJXAIOU",[[1,13676,"deng"]],[13676,13676],[13680,13680]]],[1565234204216,["GJX@GJXAIOU",[[-1,13676,"deng"]],[13680,13680],[13676,13676]]],[1565234213088,["GJX@GJXAIOU",[[1,13676,"； ##等等等等"]],[13676,13676],[13684,13684]]],[1565234223023,["GJX@GJXAIOU",[[-1,11846,"java.vm.vendor=Oracle Corporation\njava.vendor.url=http://java.oracle.com/\npath.separator=;\njava.vm.name=Java HotSpot(TM) 64-Bit Server VM\nfile.encoding.pkg=sun.io\nuser.script=\nuser.country=CN\nsun.java.launcher=SUN_STANDARD\nsun.os.patch.level=\njava.vm.specification.name=Java Virtual Machine Specification\nuser.dir=E:\\Program\\Java\\Project\\LeetCode\njava.runtime.version=1.8.0_221-b11\njava.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment\njava.endorsed.dirs=E:\\Program\\Java\\JDK1.8\\jre\\lib\\endorsed\nos.arch=amd64\njava.io.tmpdir=C:\\Users\\gjx16\\AppData\\Local\\Temp\\\nline.separator=\n\njava.vm.specification.vendor=Oracle Corporation\nuser.variant=\nos.name=Windows 10\nsun.jnu.encoding=GBK\njava.library.path=E:\\Program\\Java\\JDK1.8\\bin;C:\\WINDOWS...\njava.specification.name=Java Platform API Specification\njava.class.version=52.0\nsun.management.compiler=HotSpot 64-Bit Tiered Compilers\nos.version=10.0\nuser.home=C:\\Users\\gjx16\nuser.timezone=\njava.awt.printerjob=sun.awt.windows.WPrinterJob\nfile.encoding=UTF-8\njava.specification.version=1.8\nuser.name=GJX\njava.class.path=E:\\Program\\Java\\JDK1.8\\jre\\lib\\charse...\njava.vm.specification.version=1.8\nsun.arch.data.model=64\njava.home=E:\\Program\\Java\\JDK1.8\\jre\nsun.java.command=array.easy.Demo\njava.specification.vendor=Oracle Corporation\nuser.language=zh\nawt.toolkit=sun.awt.windows.WToolkit\njava.vm.info=mixed mode\njava.version=1.8.0_221\njava.ext.dirs=E:\\Program\\Java\\JDK1.8\\jre\\lib\\ext;C:...\nsun.boot.class.path=E:\\Program\\Java\\JDK1.8\\jre\\lib\\resour...\njava.vendor=Oracle Corporation\nfile.separator=\\\njava.vendor.url.bug=http://bugreport.sun.com/bugreport/\nsun.cpu.endian=little\nsun.io.unicode.encoding=UnicodeLittle\nsun.desktop=windows\nsun.cpu.isalist=amd64"]],[11846,13539],[11846,11846]]],[1565234230279,["GJX@GJXAIOU",[[1,11846,"##等等等等"]],[11846,11846],[11852,11852]]],[1565234232154,["GJX@GJXAIOU",[[1,11848," "]],[11848,11848],[11849,11849]]],[1565234233651,["GJX@GJXAIOU",[[1,11994," "]],[11994,11994],[11995,11995]]],[1565234256248,["GJX@GJXAIOU",[[-1,12047,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg)"]],[12047,12209],[12047,12047]]],[1565234264046,["GJX@GJXAIOU",[[1,12047,"|fang"]],[12047,12047],[12052,12052]]],[1565234264825,["GJX@GJXAIOU",[[-1,12048,"fang"]],[12052,12052],[12048,12048]]],[1565234272029,["GJX@GJXAIOU",[[1,12048,"方法名 | 说明、"]],[12048,12048],[12057,12057]]],[1565234273303,["GJX@GJXAIOU",[[-1,12056,"、"]],[12057,12057],[12056,12056]]],[1565234274111,["GJX@GJXAIOU",[[1,12058,"\n"]],[12056,12056],[12057,12057]]],[1565234276768,["GJX@GJXAIOU",[[1,12057,"---|----"]],[12057,12057],[12065,12065]]],[1565234277830,["GJX@GJXAIOU",[[-1,12064,"-"]],[12065,12065],[12064,12064]]],[1565234278271,["GJX@GJXAIOU",[[1,12065,"   |   \n"]],[12064,12064],[12065,12068]]],[1565234281675,["GJX@GJXAIOU",[[-1,12065,"   "],[1,12068,"exit"]],[12065,12068],[12069,12069]]],[1565234282203,["GJX@GJXAIOU",[[1,12069,"()"]],[12069,12069],[12071,12071]]],[1565234285082,["GJX@GJXAIOU",[[-1,12072,"   "],[1,12075,"t"]],[12072,12075],[12073,12073]]],[1565234285570,["GJX@GJXAIOU",[[1,12073,"ui"]],[12073,12073],[12075,12075]]],[1565234286583,["GJX@GJXAIOU",[[-1,12072,"tui"]],[12075,12075],[12072,12072]]],[1565234289859,["GJX@GJXAIOU",[[1,12072,"退出虚拟机"]],[12072,12072],[12077,12077]]],[1565234290175,["GJX@GJXAIOU",[[1,12078,"   |   \n"]],[12077,12077],[12078,12081]]],[1565234291626,["GJX@GJXAIOU",[[-1,12078,"   "],[1,12081,"l"]],[12078,12081],[12079,12079]]],[1565234292062,["GJX@GJXAIOU",[[1,12079,"ong"]],[12079,12079],[12082,12082]]],[1565234304033,["GJX@GJXAIOU",[[1,12047,"fanh"]],[12047,12047],[12051,12051]]],[1565234304922,["GJX@GJXAIOU",[[-1,12047,"fanh"]],[12051,12051],[12047,12047]]],[1565234306971,["GJX@GJXAIOU",[[1,12047,"返回值"]],[12047,12047],[12050,12050]]],[1565234310259,["GJX@GJXAIOU",[[1,12063,"---"]],[12060,12060],[12063,12063]]],[1565234311819,["GJX@GJXAIOU",[[1,12063,"|"]],[12063,12063],[12064,12064]]],[1565234315002,["GJX@GJXAIOU",[[1,12072,"|"]],[12072,12072],[12073,12073]]],[1565234322687,["GJX@GJXAIOU",[[1,12072," 的"]],[12072,12072],[12074,12074]]],[1565234325714,["GJX@GJXAIOU",[[-1,12073,"的"]],[12073,12074],[12073,12073]]],[1565234326657,["GJX@GJXAIOU",[[1,12073,"五"]],[12073,12073],[12074,12074]]],[1565234327514,["GJX@GJXAIOU",[[-1,12073,"五"]],[12074,12074],[12073,12073]]],[1565234330999,["GJX@GJXAIOU",[[1,12073,"吴"]],[12073,12073],[12074,12074]]],[1565234333964,["GJX@GJXAIOU",[[1,12059,"|"]],[12059,12059],[12060,12060]]],[1565234336083,["GJX@GJXAIOU",[[1,12072,"|"]],[12072,12072],[12073,12073]]],[1565234338364,["GJX@GJXAIOU",[[1,12089,"|"]],[12089,12089],[12090,12090]]],[1565234340912,["GJX@GJXAIOU",[[-1,12075,"吴"]],[12076,12076],[12075,12075]]],[1565234344331,["GJX@GJXAIOU",[[1,12075,"  "]],[12075,12075],[12077,12077]]],[1565234345458,["GJX@GJXAIOU",[[1,12085," "]],[12085,12085],[12086,12086]]],[1565234346174,["GJX@GJXAIOU",[[1,12084," "]],[12084,12084],[12085,12085]]],[1565234351609,["GJX@GJXAIOU",[[1,12075,"无"]],[12075,12075],[12076,12076]]],[1565234359216,["GJX@GJXAIOU",[[1,12101,"freemen"]],[12101,12101],[12108,12108]]],[1565234360384,["GJX@GJXAIOU",[[-1,12107,"n"]],[12108,12108],[12107,12107]]],[1565234365157,["GJX@GJXAIOU",[[1,12107,"mory()"]],[12107,12107],[12113,12113]]],[1565234365971,["GJX@GJXAIOU",[[1,12115," "]],[12113,12113],[12114,12114]]],[1565234366474,["GJX@GJXAIOU",[[1,12114,"|"]],[12114,12114],[12115,12115]]],[1565234366782,["GJX@GJXAIOU",[[1,12117," "]],[12115,12115],[12116,12116]]],[1565234372962,["GJX@GJXAIOU",[[1,12116,"获取可用内存数目"]],[12116,12116],[12124,12124]]],[1565234373763,["GJX@GJXAIOU",[[1,12124,"\n"]],[12124,12124],[12125,12125]]],[1565234379307,["GJX@GJXAIOU",[[1,12125,"wu"]],[12125,12125],[12127,12127]]],[1565234380040,["GJX@GJXAIOU",[[-1,12125,"wu"]],[12127,12127],[12125,12125]]],[1565234381239,["GJX@GJXAIOU",[[1,12125,"无"]],[12125,12125],[12126,12126]]],[1565234381706,["GJX@GJXAIOU",[[1,12128," "]],[12126,12126],[12127,12127]]],[1565234382130,["GJX@GJXAIOU",[[1,12127,"|"]],[12127,12127],[12128,12128]]],[1565234382331,["GJX@GJXAIOU",[[1,12130," "]],[12128,12128],[12129,12129]]],[1565234385943,["GJX@GJXAIOU",[[1,12129,"gc()"]],[12129,12129],[12133,12133]]],[1565234386781,["GJX@GJXAIOU",[[1,12135," "]],[12133,12133],[12134,12134]]],[1565234387182,["GJX@GJXAIOU",[[1,12134,"|"]],[12134,12134],[12135,12135]]],[1565234387371,["GJX@GJXAIOU",[[1,12137," "]],[12135,12135],[12136,12136]]],[1565234389098,["GJX@GJXAIOU",[[1,12136,"d"]],[12136,12136],[12137,12137]]],[1565234389719,["GJX@GJXAIOU",[[-1,12136,"d"]],[12137,12137],[12136,12136]]],[1565234408837,["GJX@GJXAIOU",[[1,12136,"调用垃圾回收器程序，但是调用"]],[12136,12136],[12150,12150]]],[1565234425774,["GJX@GJXAIOU",[[1,12150,"该方法不会马上就运行gc"]],[12150,12150],[12162,12162]]],[1565234425815,["GJX@GJXAIOU",[[1,12160," "]],[12162,12162],[12163,12163]]],[1565234426864,["GJX@GJXAIOU",[[1,12163,"\n"]],[12163,12163],[12164,12164]]],[1565234429504,["GJX@GJXAIOU",[[1,12164,"龙"]],[12164,12164],[12165,12165]]],[1565234430311,["GJX@GJXAIOU",[[-1,12164,"龙"]],[12165,12165],[12164,12164]]],[1565234431830,["GJX@GJXAIOU",[[1,12164,"Long"]],[12164,12164],[12168,12168]]],[1565234432819,["GJX@GJXAIOU",[[-1,12164,"Long"]],[12168,12168],[12164,12164]]],[1565234433201,["GJX@GJXAIOU",[[-1,12163,"\n"]],[12164,12164],[12163,12163]]],[1565234434059,["GJX@GJXAIOU",[[1,12163,"\n"]],[12163,12163],[12164,12164]]],[1565234435146,["GJX@GJXAIOU",[[1,12164,"loon"]],[12164,12164],[12168,12168]]],[1565234435895,["GJX@GJXAIOU",[[-1,12166,"on"]],[12168,12168],[12166,12166]]],[1565234436291,["GJX@GJXAIOU",[[1,12166,"ng"]],[12166,12166],[12168,12168]]],[1565234436707,["GJX@GJXAIOU",[[1,12170," "]],[12168,12168],[12169,12169]]],[1565234437517,["GJX@GJXAIOU",[[1,12169,"|"]],[12169,12169],[12170,12170]]],[1565234437706,["GJX@GJXAIOU",[[1,12172," "]],[12170,12170],[12171,12171]]],[1565234441627,["GJX@GJXAIOU",[[1,12171,"maxMen"]],[12171,12171],[12177,12177]]],[1565234443095,["GJX@GJXAIOU",[[-1,12176,"n"]],[12177,12177],[12176,12176]]],[1565234444851,["GJX@GJXAIOU",[[1,12176,"mory"]],[12176,12176],[12180,12180]]],[1565234447471,["GJX@GJXAIOU",[[-1,12105,"m"]],[12106,12106],[12105,12105]]],[1565234447883,["GJX@GJXAIOU",[[1,12105,"M"]],[12105,12105],[12106,12106]]],[1565234458312,["GJX@GJXAIOU",[[1,12180,"()"]],[12180,12180],[12182,12182]]],[1565234460818,["GJX@GJXAIOU",[[1,12184," "]],[12182,12182],[12183,12183]]],[1565234461474,["GJX@GJXAIOU",[[1,12183,"|"]],[12183,12183],[12184,12184]]],[1565234461642,["GJX@GJXAIOU",[[1,12186," "]],[12184,12184],[12185,12185]]],[1565234467037,["GJX@GJXAIOU",[[1,12185,"获取JVM"]],[12185,12185],[12190,12190]]],[1565234467078,["GJX@GJXAIOU",[[1,12187," "]],[12190,12190],[12191,12191]]],[1565234469052,["GJX@GJXAIOU",[[1,12191,"最大"]],[12191,12191],[12193,12193]]],[1565234469093,["GJX@GJXAIOU",[[1,12191," "]],[12193,12193],[12194,12194]]],[1565234470375,["GJX@GJXAIOU",[[1,12194,"内存"]],[12194,12194],[12196,12196]]],[1565234474768,["GJX@GJXAIOU",[[1,12196,"容量"]],[12196,12196],[12198,12198]]],[1565234475096,["GJX@GJXAIOU",[[1,12198,"\n"]],[12198,12198],[12199,12199]]],[1565234477578,["GJX@GJXAIOU",[[1,12199,"long"]],[12199,12199],[12203,12203]]],[1565234478379,["GJX@GJXAIOU",[[1,12205," "]],[12203,12203],[12204,12204]]],[1565234478892,["GJX@GJXAIOU",[[1,12204,"|"]],[12204,12204],[12205,12205]]],[1565234479162,["GJX@GJXAIOU",[[1,12207," "]],[12205,12205],[12206,12206]]],[1565234481460,["GJX@GJXAIOU",[[1,12206,"toa"]],[12206,12206],[12209,12209]]],[1565234482138,["GJX@GJXAIOU",[[-1,12208,"a"]],[12209,12209],[12208,12208]]],[1565234484798,["GJX@GJXAIOU",[[1,12208,"talMen"]],[12208,12208],[12214,12214]]],[1565234485287,["GJX@GJXAIOU",[[-1,12213,"n"]],[12214,12214],[12213,12213]]],[1565234488219,["GJX@GJXAIOU",[[1,12213,"mory()"]],[12213,12213],[12219,12219]]],[1565234488565,["GJX@GJXAIOU",[[1,12221," "]],[12219,12219],[12220,12220]]],[1565234489298,["GJX@GJXAIOU",[[1,12220,"|"]],[12220,12220],[12221,12221]]],[1565234489532,["GJX@GJXAIOU",[[1,12223," "]],[12221,12221],[12222,12222]]],[1565234495004,["GJX@GJXAIOU",[[1,12222,"湖区"]],[12222,12222],[12224,12224]]],[1565234495696,["GJX@GJXAIOU",[[-1,12222,"湖区"]],[12224,12224],[12222,12222]]],[1565234500332,["GJX@GJXAIOU",[[1,12222,"获取总内存"]],[12222,12222],[12227,12227]]],[1565234500721,["GJX@GJXAIOU",[[1,12227,"\n"]],[12227,12227],[12228,12228]]],[1565234505594,["GJX@GJXAIOU",[[1,12228,"Procd"]],[12228,12228],[12233,12233]]],[1565234506137,["GJX@GJXAIOU",[[-1,12232,"d"]],[12233,12233],[12232,12232]]],[1565234506829,["GJX@GJXAIOU",[[1,12232,"ess"]],[12232,12232],[12235,12235]]],[1565234509980,["GJX@GJXAIOU",[[1,12237," "]],[12235,12235],[12236,12236]]],[1565234511179,["GJX@GJXAIOU",[[1,12236,"|"]],[12236,12236],[12237,12237]]],[1565234511474,["GJX@GJXAIOU",[[1,12239," "]],[12237,12237],[12238,12238]]],[1565234515236,["GJX@GJXAIOU",[[1,12238,"exec()"]],[12238,12238],[12244,12244]]],[1565234521518,["GJX@GJXAIOU",[[1,12243,"String command"]],[12243,12243],[12257,12257]]],[1565234523587,["GJX@GJXAIOU",[[1,12260," "]],[12258,12258],[12259,12259]]],[1565234524114,["GJX@GJXAIOU",[[1,12259,"|"]],[12259,12259],[12260,12260]]],[1565234524340,["GJX@GJXAIOU",[[1,12262," "]],[12260,12260],[12261,12261]]],[1565234525237,["GJX@GJXAIOU",[[1,12261,"q"]],[12261,12261],[12262,12262]]],[1565234525712,["GJX@GJXAIOU",[[-1,12261,"q"]],[12262,12262],[12261,12261]]],[1565234530228,["GJX@GJXAIOU",[[1,12261,"启动一个字符串"]],[12261,12261],[12268,12268]]],[1565234533751,["GJX@GJXAIOU",[[1,12268,"命令的进程"]],[12268,12268],[12273,12273]]],[1565234977111,["GJX@GJXAIOU",[[1,12277,"\n"]],[12276,12276],[12277,12277]]],[1565234978338,["GJX@GJXAIOU",[[1,12277,"```"]],[12277,12277],[12280,12280]]],[1565234978380,["GJX@GJXAIOU",[[1,12280,"language\n```\n"]],[12280,12280],[12280,12288]]],[1565234979109,["GJX@GJXAIOU",[[-1,12280,"language"],[1,12288,"j"]],[12280,12288],[12281,12281]]],[1565234979492,["GJX@GJXAIOU",[[1,12281,"ava"]],[12281,12281],[12284,12284]]],[1565234979626,["GJX@GJXAIOU",[[1,12285,"\n"]],[12284,12284],[12285,12285]]],[1565234983264,["GJX@GJXAIOU",[[1,12285,"public static void main(String[] args) {\n        // 获取应用运行环境的对象\n        Runtime runtime = Runtime.getRuntime();\n\n        // 获取可用的内存数\n        System.out.println(runtime.freeMemory());\n\n        // 获取JVM试图使用的内存总容量\n        System.out.println(runtime.maxMemory());\n\n        // 获取JVM只能使用的总容量\n        System.out.println(runtime.totalMemory());\n\n        // 启动程序：\n        try {\n            Process screentoGif = runtime.exec(\"D:\\\\Screentogif\\\\screentogif.exe\");\n            Process typora = runtime.exec(\"typora demo.md\");\n            \n            Thread.sleep(1000*10);\n            typora.destroy();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }"]],[12285,12285],[13035,13035]]],[1565235005981,["GJX@GJXAIOU",[[-1,13242,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg)"]],[13242,13322],[13242,13242]]],[1565235008958,["GJX@GJXAIOU",[[-1,13135,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg)"]],[13135,13215],[13135,13135]]],[1565235019247,["GJX@GJXAIOU",[[-1,13136,"\n"]],[13135,13135],[13134,13134]]],[1565235020311,["GJX@GJXAIOU",[[1,13134,"  "]],[13134,13134],[13136,13136]]],[1565235022975,["GJX@GJXAIOU",[[-1,13134,"  "]],[13136,13136],[13134,13134]]],[1565235024092,["GJX@GJXAIOU",[[1,13134,"```"]],[13134,13134],[13137,13137]]],[1565235024134,["GJX@GJXAIOU",[[1,13137,"language\n```\n"]],[13137,13137],[13137,13145]]],[1565235025081,["GJX@GJXAIOU",[[-1,13137,"language"],[1,13145,"j"]],[13137,13145],[13138,13138]]],[1565235025549,["GJX@GJXAIOU",[[1,13138,"ava"]],[13138,13138],[13141,13141]]],[1565235025695,["GJX@GJXAIOU",[[1,13142,"\n"]],[13141,13141],[13142,13142]]],[1565235649359,["GJX@GJXAIOU",[[1,13142,"public static void main(String[] args) {\n        Calendar calendar = Calendar.getInstance();\n        // 获取年、月、日、时、分、秒\n        int year = calendar.get(Calendar.YEAR);\n        int month = calendar.get(Calendar.MONTH) + 1;\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        int minute = calendar.get(Calendar.MINUTE);\n        int second = calendar.get(Calendar.SECOND);\n\n        System.out.println(\"year : \" + year + \" month : \" + month + \" day : \" + day +  \"\\n\" +\n                \"dayOfWeek : \" + dayOfWeek + \"\\n\" +\n                \"hour : \" + hour + \" minute : \" + minute + \" second : \" + second);\n\n    }"]],[13142,13142],[13873,13873]]],[1565235652970,["GJX@GJXAIOU",[[1,13878,"cheng"]],[13878,13878],[13883,13883]]],[1565235653951,["GJX@GJXAIOU",[[-1,13878,"cheng"]],[13883,13883],[13878,13878]]],[1565235657604,["GJX@GJXAIOU",[[1,13878,"程序运行结果“"]],[13878,13878],[13885,13885]]],[1565235658438,["GJX@GJXAIOU",[[-1,13884,"“"]],[13885,13885],[13884,13884]]],[1565235658948,["GJX@GJXAIOU",[[1,13884,"："]],[13884,13884],[13885,13885]]],[1565235659186,["GJX@GJXAIOU",[[1,13887,"\n"]],[13885,13885],[13886,13886]]],[1565235660635,["GJX@GJXAIOU",[[1,13886,"```"]],[13886,13886],[13889,13889]]],[1565235660678,["GJX@GJXAIOU",[[1,13889,"language\n```\n"]],[13889,13889],[13889,13897]]],[1565235661453,["GJX@GJXAIOU",[[-1,13889,"language"],[1,13897,"j"]],[13889,13897],[13890,13890]]],[1565235661908,["GJX@GJXAIOU",[[1,13890,"ava"]],[13890,13890],[13893,13893]]],[1565235661998,["GJX@GJXAIOU",[[1,13894,"\n"]],[13893,13893],[13894,13894]]],[1565235672505,["GJX@GJXAIOU",[[1,13894,"year : 2019 month : 8 day : 8\ndayOfWeek : 5\nhour : 11 minute : 40 second : 42"]],[13894,13894],[13971,13971]]],[1565235677498,["GJX@GJXAIOU",[[-1,13977,"\n"]],[13977,13977],[13976,13976]]],[1565235842932,["GJX@GJXAIOU",[[1,14001,"···"]],[14001,14001],[14004,14004]]],[1565235844044,["GJX@GJXAIOU",[[-1,14001,"···"]],[14004,14004],[14001,14001]]],[1565235845307,["GJX@GJXAIOU",[[1,14001,"```"]],[14001,14001],[14004,14004]]],[1565235845351,["GJX@GJXAIOU",[[1,14004,"language\n```\n"]],[14004,14004],[14004,14012]]],[1565235846146,["GJX@GJXAIOU",[[-1,14004,"language"],[1,14012,"j"]],[14004,14012],[14005,14005]]],[1565235846565,["GJX@GJXAIOU",[[1,14005,"ava"]],[14005,14005],[14008,14008]]],[1565235846700,["GJX@GJXAIOU",[[1,14009,"\n"]],[14008,14008],[14009,14009]]],[1565235850693,["GJX@GJXAIOU",[[1,14009,"public static void main(String[] args) {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy年MM日dd日 E a hh时mm分ss秒\");\n        System.out.println(simpleDateFormat.format(new Date()));\n    }"]],[14009,14009],[14215,14215]]],[1565235852888,["GJX@GJXAIOU",[[1,14223,"\n"]],[14219,14219],[14220,14220]]],[1565235863316,["GJX@GJXAIOU",[[1,14220,"cheng"]],[14220,14220],[14225,14225]]],[1565235864278,["GJX@GJXAIOU",[[-1,14220,"cheng"]],[14225,14225],[14220,14220]]],[1565235868986,["GJX@GJXAIOU",[[1,14220,"程序结果：``"]],[14220,14220],[14227,14227]]],[1565235870208,["GJX@GJXAIOU",[[1,14226,"2019年08日08日 星期四 上午 11时43分53秒"]],[14226,14226],[14254,14254]]],[1565235881984,["GJX@GJXAIOU",[[-1,14288,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg)\n\n![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg)"]],[14288,14450],[14288,14288]]],[1565235885502,["GJX@GJXAIOU",[[-1,14302,"![](file:///C:/Users/gjx16/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg)"]],[14302,14382],[14302,14302]]],[1565235905369,["GJX@GJXAIOU",[[1,14287," "]],[14287,14287],[14288,14288]]],[1565235907137,["GJX@GJXAIOU",[[-1,14287," "]],[14288,14288],[14287,14287]]],[1565235908025,["GJX@GJXAIOU",[[1,14287,"fang"]],[14287,14287],[14291,14291]]],[1565235909287,["GJX@GJXAIOU",[[-1,14287,"fang"]],[14291,14291],[14287,14287]]],[1565235913703,["GJX@GJXAIOU",[[1,14287,"方法| 说明"]],[14287,14287],[14293,14293]]],[1565235914249,["GJX@GJXAIOU",[[1,14296,"\n"]],[14293,14293],[14294,14294]]],[1565235916975,["GJX@GJXAIOU",[[1,14294,"---|---"]],[14294,14294],[14301,14301]]],[1565235917561,["GJX@GJXAIOU",[[1,14302,"   |   \n"]],[14301,14301],[14302,14305]]],[1565235920127,["GJX@GJXAIOU",[[-1,14302,"   "],[1,14305,"s"]],[14302,14305],[14303,14303]]],[1565235928216,["GJX@GJXAIOU",[[1,14303,"tatic double ceil()"]],[14303,14303],[14322,14322]]],[1565235931082,["GJX@GJXAIOU",[[1,14321,"double a"]],[14321,14321],[14329,14329]]],[1565235934484,["GJX@GJXAIOU",[[1,14331,"f"]],[14331,14331],[14332,14332]]],[1565235934926,["GJX@GJXAIOU",[[-1,14331,"f"]],[14332,14332],[14331,14331]]],[1565235948131,["GJX@GJXAIOU",[[1,14331,"返回大于等于指定小数的最小整数"]],[14331,14331],[14346,14346]]],[1565235948499,["GJX@GJXAIOU",[[1,14346,"\n"]],[14346,14346],[14347,14347]]],[1565235951780,["GJX@GJXAIOU",[[1,14347,"static"]],[14347,14347],[14353,14353]]],[1565235952323,["GJX@GJXAIOU",[[1,14356," "]],[14353,14353],[14354,14354]]],[1565235953019,["GJX@GJXAIOU",[[1,14354,"dou"]],[14354,14354],[14357,14357]]],[1565235953918,["GJX@GJXAIOU",[[-1,14354,"dou"]],[14357,14357],[14354,14354]]],[1565235957818,["GJX@GJXAIOU",[[1,14354,"double"]],[14354,14354],[14360,14360]]],[1565235958346,["GJX@GJXAIOU",[[1,14363," "]],[14360,14360],[14361,14361]]],[1565235962578,["GJX@GJXAIOU",[[1,14361,"floor()"]],[14361,14361],[14368,14368]]],[1565235966970,["GJX@GJXAIOU",[[1,14367,"double a"]],[14367,14367],[14375,14375]]],[1565235968835,["GJX@GJXAIOU",[[1,14379," "]],[14376,14376],[14377,14377]]],[1565235969308,["GJX@GJXAIOU",[[1,14377,"|"]],[14377,14377],[14378,14378]]],[1565235969578,["GJX@GJXAIOU",[[1,14381," "]],[14378,14378],[14379,14379]]],[1565235985497,["GJX@GJXAIOU",[[1,14379,"返回小于等于指定小数的最大整数"]],[14379,14379],[14394,14394]]],[1565235986967,["GJX@GJXAIOU",[[1,14394,"\n"]],[14394,14394],[14395,14395]]],[1565235987962,["GJX@GJXAIOU",[[1,14395,"a"]],[14395,14395],[14396,14396]]],[1565235988814,["GJX@GJXAIOU",[[-1,14395,"a"]],[14396,14396],[14395,14395]]],[1565235990058,["GJX@GJXAIOU",[[1,14395,"static"]],[14395,14395],[14401,14401]]],[1565235991419,["GJX@GJXAIOU",[[1,14404," "]],[14401,14401],[14402,14402]]],[1565235992312,["GJX@GJXAIOU",[[1,14402,"long"]],[14402,14402],[14406,14406]]],[1565235992484,["GJX@GJXAIOU",[[1,14409," "]],[14406,14406],[14407,14407]]],[1565235996352,["GJX@GJXAIOU",[[1,14407,"round()"]],[14407,14407],[14414,14414]]],[1565235997829,["GJX@GJXAIOU",[[1,14413,"f"]],[14413,14413],[14414,14414]]],[1565235998255,["GJX@GJXAIOU",[[-1,14413,"f"]],[14414,14414],[14413,14413]]],[1565235999577,["GJX@GJXAIOU",[[1,14413,"doubvle"]],[14413,14413],[14420,14420]]],[1565236000783,["GJX@GJXAIOU",[[-1,14417,"vle"]],[14420,14420],[14417,14417]]],[1565236003220,["GJX@GJXAIOU",[[1,14417,"le a  "]],[14417,14417],[14423,14423]]],[1565236004991,["GJX@GJXAIOU",[[-1,14421,"  "]],[14423,14423],[14421,14421]]],[1565236006162,["GJX@GJXAIOU",[[1,14425," "]],[14422,14422],[14423,14423]]],[1565236006635,["GJX@GJXAIOU",[[1,14423,"|"]],[14423,14423],[14424,14424]]],[1565236006845,["GJX@GJXAIOU",[[1,14427," "]],[14424,14424],[14425,14425]]],[1565236008371,["GJX@GJXAIOU",[[1,14425,"d"]],[14425,14425],[14426,14426]]],[1565236008856,["GJX@GJXAIOU",[[-1,14425,"d"]],[14426,14426],[14425,14425]]],[1565236012372,["GJX@GJXAIOU",[[1,14425,"四舍五入"]],[14425,14425],[14429,14429]]],[1565236012795,["GJX@GJXAIOU",[[1,14429,"\n"]],[14429,14429],[14430,14430]]],[1565236014393,["GJX@GJXAIOU",[[1,14430,"a"]],[14430,14430],[14431,14431]]],[1565236014960,["GJX@GJXAIOU",[[-1,14430,"a"]],[14431,14431],[14430,14430]]],[1565236016592,["GJX@GJXAIOU",[[1,14430,"static"]],[14430,14430],[14436,14436]]],[1565236017878,["GJX@GJXAIOU",[[1,14439," "]],[14436,14436],[14437,14437]]],[1565236019322,["GJX@GJXAIOU",[[1,14437,"double"]],[14437,14437],[14443,14443]]],[1565236020177,["GJX@GJXAIOU",[[1,14446," "]],[14443,14443],[14444,14444]]],[1565236022979,["GJX@GJXAIOU",[[1,14444,"random()"]],[14444,14444],[14452,14452]]],[1565236023570,["GJX@GJXAIOU",[[1,14455," "]],[14452,14452],[14453,14453]]],[1565236024049,["GJX@GJXAIOU",[[1,14453,"|"]],[14453,14453],[14454,14454]]],[1565236024259,["GJX@GJXAIOU",[[1,14457," "]],[14454,14454],[14455,14455]]],[1565236026158,["GJX@GJXAIOU",[[1,14455,"f"]],[14455,14455],[14456,14456]]],[1565236026623,["GJX@GJXAIOU",[[-1,14455,"f"]],[14456,14456],[14455,14455]]],[1565236030222,["GJX@GJXAIOU",[[1,14455,"返回dayu8"]],[14455,14455],[14462,14462]]],[1565236030265,["GJX@GJXAIOU",[[1,14457," "]],[14462,14462],[14463,14463]]],[1565236031610,["GJX@GJXAIOU",[[-1,14460," dayu8"]],[14463,14463],[14457,14457]]],[1565236035861,["GJX@GJXAIOU",[[1,14457,"大于等于0"]],[14457,14457],[14462,14462]]],[1565236035904,["GJX@GJXAIOU",[[1,14461," "]],[14462,14462],[14463,14463]]],[1565236038895,["GJX@GJXAIOU",[[1,14463,".0小于"]],[14463,14463],[14467,14467]]],[1565236038938,["GJX@GJXAIOU",[[1,14465," "]],[14467,14467],[14468,14468]]],[1565236039570,["GJX@GJXAIOU",[[1,14468,"1"]],[14468,14468],[14469,14469]]],[1565236039614,["GJX@GJXAIOU",[[1,14468," "]],[14469,14469],[14470,14470]]],[1565236041158,["GJX@GJXAIOU",[[1,14470,".0的"]],[14470,14470],[14473,14473]]],[1565236041202,["GJX@GJXAIOU",[[1,14472," "]],[14473,14473],[14474,14474]]],[1565236047688,["GJX@GJXAIOU",[[1,14474,"小数"]],[14474,14474],[14476,14476]]],[1565236051523,["GJX@GJXAIOU",[[1,14479," "]],[14476,14476],[14477,14477]]],[1565236061564,["GJX@GJXAIOU",[[1,14477,"1.0《="]],[14477,14477],[14482,14482]]],[1565236062383,["GJX@GJXAIOU",[[-1,14480,"《="]],[14482,14482],[14480,14480]]],[1565236063910,["GJX@GJXAIOU",[[1,14480,"<="]],[14480,14480],[14482,14482]]],[1565236064689,["GJX@GJXAIOU",[[1,14485," "]],[14482,14482],[14483,14483]]],[1565236064995,["GJX@GJXAIOU",[[1,14483,"x"]],[14483,14483],[14484,14484]]],[1565236066571,["GJX@GJXAIOU",[[1,14487," "]],[14484,14484],[14485,14485]]],[1565236069850,["GJX@GJXAIOU",[[1,14485,"<11.0"]],[14485,14485],[14490,14490]]],[1565236072642,["GJX@GJXAIOU",[[1,14480," "]],[14480,14480],[14481,14481]]],[1565236076846,["GJX@GJXAIOU",[[1,14497,"\n"]],[14495,14495],[14496,14496]]],[1565236078189,["GJX@GJXAIOU",[[1,14496,"```"]],[14496,14496],[14499,14499]]],[1565236078233,["GJX@GJXAIOU",[[1,14499,"language\n```\n"]],[14499,14499],[14499,14507]]],[1565236078715,["GJX@GJXAIOU",[[-1,14499,"language"],[1,14507,"j"]],[14499,14507],[14500,14500]]],[1565236079146,["GJX@GJXAIOU",[[1,14500,"ava"]],[14500,14500],[14503,14503]]],[1565236079287,["GJX@GJXAIOU",[[1,14504,"\n"]],[14503,14503],[14504,14504]]],[1565236270531,[null,[[-1,14483,"dxa"],[1,14486," x "]],[14483,14483],[14489,14489]]],[1565236270531,[null,[[1,14483,"dxa"],[-1,14483," x "]],[14489,14489],[14483,14483]]],[1565236237677,["GJX@GJXAIOU",[[1,14504,"public static void main(String[] args) {\n        System.out.println(Math.PI);\n        System.out.println(Math.ceil(12.3));\n        System.out.println(Math.ceil(12.5));\n        System.out.println(Math.ceil(-12.5));\n\n        System.out.println(Math.floor(-15.1));\n        System.out.println(Math.floor(15.1));\n\n        System.out.println(Math.round(15.1));\n        System.out.println(Math.round(15.5));\n\n        System.out.println(Math.random());\n    }"]],[14504,14504],[14954,14954]]],[1565236239976,["GJX@GJXAIOU",[[1,14961,"\n"]],[14958,14958],[14959,14959]]],[1565236241625,["GJX@GJXAIOU",[[1,14959,"chen"]],[14959,14959],[14963,14963]]],[1565236242686,["GJX@GJXAIOU",[[-1,14959,"chen"]],[14963,14963],[14959,14959]]],[1565236247471,["GJX@GJXAIOU",[[1,14959,"程序输出解雇"]],[14959,14959],[14965,14965]]],[1565236248358,["GJX@GJXAIOU",[[-1,14963,"解雇"]],[14965,14965],[14963,14963]]],[1565236248749,["GJX@GJXAIOU",[[1,14963,"j"]],[14963,14963],[14964,14964]]],[1565236248793,["GJX@GJXAIOU",[[1,14963," "]],[14964,14964],[14965,14965]]],[1565236248972,["GJX@GJXAIOU",[[1,14965,"ie"]],[14965,14965],[14967,14967]]],[1565236249982,["GJX@GJXAIOU",[[-1,14963," jie"]],[14967,14967],[14963,14963]]],[1565236252341,["GJX@GJXAIOU",[[1,14963,"结果："]],[14963,14963],[14966,14966]]],[1565236252577,["GJX@GJXAIOU",[[1,14969,"\n"]],[14966,14966],[14967,14967]]],[1565236253917,["GJX@GJXAIOU",[[1,14967,"```"]],[14967,14967],[14970,14970]]],[1565236253962,["GJX@GJXAIOU",[[1,14970,"language\n```\n"]],[14970,14970],[14970,14978]]],[1565236254116,["GJX@GJXAIOU",[[-1,14970,"language"],[1,14978,"j"]],[14970,14978],[14971,14971]]],[1565236254668,["GJX@GJXAIOU",[[1,14971,"afva"]],[14971,14971],[14975,14975]]],[1565236254763,["GJX@GJXAIOU",[[1,14976,"\n"]],[14975,14975],[14976,14976]]],[1565236255342,["GJX@GJXAIOU",[[-1,14976,"\n"]],[14976,14976],[14975,14975]]],[1565236255999,["GJX@GJXAIOU",[[-1,14972,"fva"]],[14975,14975],[14972,14972]]],[1565236256281,["GJX@GJXAIOU",[[1,14972,"va"]],[14972,14972],[14974,14974]]],[1565236256632,["GJX@GJXAIOU",[[1,14975,"\n"]],[14974,14974],[14975,14975]]],[1565236266778,["GJX@GJXAIOU",[[1,14975,"3.141592653589793\n13.0\n13.0\n-12.0\n-16.0\n15.0\n15\n16\n0.1833227126599336"]],[14975,14975],[15044,15044]]],[1565236330530,[null,[[-1,14483,"dxa"],[1,14486," x "]],[14483,14483],[14489,14489]]],[1565236330530,[null,[[1,14483,"dxa"],[-1,14483," x "]],[14489,14489],[14483,14483]]],[1565236272216,["GJX@GJXAIOU",[[-1,15051,"\n"]],[15051,15051],[15050,15050]]],[1565236511425,[null,[[-1,14483,"dxa"],[1,14486," x "]],[14483,14483],[14489,14489]]],[1565236511425,[null,[[1,14483,"dxa"],[-1,14483," x "]],[14489,14489],[14483,14483]]],[1565236491363,["GJX@GJXAIOU",[[1,15062,"···"]],[15062,15062],[15065,15065]]],[1565236492432,["GJX@GJXAIOU",[[-1,15062,"···"]],[15065,15065],[15062,15062]]],[1565236493556,["GJX@GJXAIOU",[[1,15062,"```"]],[15062,15062],[15065,15065]]],[1565236493600,["GJX@GJXAIOU",[[1,15065,"language\n```\n"]],[15065,15065],[15065,15073]]],[1565236494410,["GJX@GJXAIOU",[[-1,15065,"language"],[1,15073,"j"]],[15065,15073],[15066,15066]]],[1565236494783,["GJX@GJXAIOU",[[1,15066,"ava"]],[15066,15066],[15069,15069]]],[1565236494932,["GJX@GJXAIOU",[[1,15070,"\n"]],[15069,15069],[15070,15070]]],[1565236495985,["GJX@GJXAIOU",[[1,15070,"public static void main(String[] args) {\n    // 生成一个随机码\n  Random random = new Random();\n char[] chars = {'a', 'b', 'c', 'd', 'e', '你', '好', '@'};    StringBuilder stringBuilder = new StringBuilder(\"\");   for (int i = 0; i < 4; i++) {\n        stringBuilder.append(chars[random.nextInt(chars.length)]);    }\n    System.out.println(\"随机码：\" + stringBuilder.toString()); }"]],[15070,15070],[15436,15436]]],[1565236497984,["GJX@GJXAIOU",[[-1,15070,"public static void main(String[] args) {\n    // 生成一个随机码\n  Random random = new Random();\n char[] chars = {'a', 'b', 'c', 'd', 'e', '你', '好', '@'};    StringBuilder stringBuilder = new StringBuilder(\"\");   for (int i = 0; i < 4; i++) {\n        stringBuilder.append(chars[random.nextInt(chars.length)]);    }\n    System.out.println(\"随机码：\" + stringBuilder.toString()); }"]],[15436,15436],[15070,15070]]],[1565236500048,["GJX@GJXAIOU",[[1,15070,"public static void main(String[] args) {\n        // 生成一个随机码\n        Random random = new Random();\n        char[] chars = {'a', 'b', 'c', 'd', 'e', '你', '好', '@'};\n\n        StringBuilder stringBuilder = new StringBuilder(\"\");\n\n        for (int i = 0; i < 4; i++) {\n            stringBuilder.append(chars[random.nextInt(chars.length)]);\n\n        }\n        System.out.println(\"随机码：\" + stringBuilder.toString());\n    }"]],[15070,15070],[15484,15484]]],[1565241910203,[null,[[-1,14483,"dxa"],[1,14486," x "]],[14483,14483],[14489,14489]]],[1565241910203,[null,[[1,14483,"dxa"],[-1,14483," x "]],[14489,14489],[14483,14483]]],[1565241897934,["GJX@GJXAIOU",[[-1,41,"==准备看 2.4=="]],[41,52],[41,41]]],[1565241898109,["GJX@GJXAIOU",[[-1,42,"\n"]],[41,41],[40,40]]],[1565241898643,["GJX@GJXAIOU",[[-1,41,"\n"]],[40,40],[39,39]]],[1565241970202,[null,[[-1,14470,"dxa"],[1,14473," x "]],[14470,14470],[14476,14476]]],[1565241970202,[null,[[1,14470,"dxa"],[-1,14470," x "]],[14476,14476],[14470,14470]]],[1565241956657,["GJX@GJXAIOU",[[-1,61,"1."],[1,63,"y"]],[61,63],[62,62]]],[1565241956750,["GJX@GJXAIOU",[[1,62,"i"]],[62,62],[63,63]]],[1565241958886,["GJX@GJXAIOU",[[-1,61,"yi"]],[63,63],[61,61]]],[1565241960615,["GJX@GJXAIOU",[[1,61,"一、"]],[61,61],[63,63]]],[1565241962419,["GJX@GJXAIOU",[[-1,63," "]],[64,64],[63,63]]],[1565241966581,["GJX@GJXAIOU",[[-1,247,"1.1"],[1,250,"（"]],[247,247],[248,248]]],[1565241966728,["GJX@GJXAIOU",[[1,248,"）"]],[248,248],[249,249]]],[1565241968304,["GJX@GJXAIOU",[[1,248,"i"]],[248,248],[249,249]]],[1565241969342,["GJX@GJXAIOU",[[-1,248,"i"]],[249,249],[248,248]]],[1565242030201,[null,[[-1,14468,"dxa"],[1,14471," x "]],[14468,14468],[14474,14474]]],[1565242030201,[null,[[1,14468,"dxa"],[-1,14468," x "]],[14474,14474],[14468,14468]]],[1565241970267,["GJX@GJXAIOU",[[1,248,"一"]],[248,248],[249,249]]],[1565241975639,["GJX@GJXAIOU",[[-1,1377,"1.2"]],[1377,1380],[1377,1377]]],[1565241976239,["GJX@GJXAIOU",[[1,1377,"（0"]],[1377,1377],[1379,1379]]],[1565241977419,["GJX@GJXAIOU",[[-1,1378,"0"]],[1379,1379],[1378,1378]]],[1565241977798,["GJX@GJXAIOU",[[1,1378,"）"]],[1378,1378],[1379,1379]]],[1565241978778,["GJX@GJXAIOU",[[1,1378,"二"]],[1378,1378],[1379,1379]]],[1565241984171,["GJX@GJXAIOU",[[-1,2146,"1.3"]],[2146,2149],[2146,2146]]],[1565241984766,["GJX@GJXAIOU",[[1,2146,"（）"]],[2146,2146],[2148,2148]]],[1565241987298,["GJX@GJXAIOU",[[1,2147,"三"]],[2147,2147],[2148,2148]]],[1565241991380,["GJX@GJXAIOU",[[-1,2573,"2"]],[2574,2574],[2573,2573]]],[1565241992609,["GJX@GJXAIOU",[[1,2573,"二、"]],[2573,2573],[2575,2575]]],[1565241993819,["GJX@GJXAIOU",[[-1,2575," "]],[2576,2576],[2575,2575]]],[1565241998058,["GJX@GJXAIOU",[[-1,2675,"2.1"],[1,2678,"（"]],[2675,2675],[2676,2676]]],[1565241998147,["GJX@GJXAIOU",[[1,2676,"）"]],[2676,2676],[2677,2677]]],[1565242000008,["GJX@GJXAIOU",[[1,2676,"一"]],[2676,2676],[2677,2677]]],[1565242002035,["GJX@GJXAIOU",[[-1,2678," "]],[2679,2679],[2678,2678]]],[1565242006147,["GJX@GJXAIOU",[[-1,3376,"2.2 "]],[3376,3380],[3376,3376]]],[1565242006737,["GJX@GJXAIOU",[[1,3376,"（）"]],[3376,3376],[3378,3378]]],[1565242008003,["GJX@GJXAIOU",[[1,3377,"二"]],[3377,3377],[3378,3378]]],[1565242011620,["GJX@GJXAIOU",[[-1,4097,"2.3 "]],[4101,4101],[4097,4097]]],[1565242013025,["GJX@GJXAIOU",[[1,4097,"（）"]],[4097,4097],[4099,4099]]],[1565242015519,["GJX@GJXAIOU",[[1,4098,"三"]],[4098,4098],[4099,4099]]],[1565242019099,["GJX@GJXAIOU",[[-1,5188,"\n"]],[5188,5188],[5187,5187]]],[1565242019250,["GJX@GJXAIOU",[[-1,5187,"\n"]],[5187,5187],[5186,5186]]],[1565242019387,["GJX@GJXAIOU",[[-1,5186,"\n"]],[5186,5186],[5185,5185]]],[1565242022219,["GJX@GJXAIOU",[[-1,5189,"2.4 "]],[5193,5193],[5189,5189]]],[1565242023243,["GJX@GJXAIOU",[[1,5189,"（）"]],[5189,5189],[5191,5191]]],[1565242025281,["GJX@GJXAIOU",[[1,5190,"四"]],[5190,5190],[5191,5191]]],[1565242029476,["GJX@GJXAIOU",[[-1,5905,"2.5"]],[5908,5908],[5905,5905]]],[1565242090204,[null,[[-1,14459,"dxa"],[1,14462," x "]],[14459,14459],[14465,14465]]],[1565242090204,[null,[[1,14459,"dxa"],[-1,14459," x "]],[14465,14465],[14459,14459]]],[1565242030440,["GJX@GJXAIOU",[[1,5905,"（）"]],[5905,5905],[5907,5907]]],[1565242031848,["GJX@GJXAIOU",[[1,5906,"五"]],[5906,5906],[5907,5907]]],[1565242036179,["GJX@GJXAIOU",[[-1,5908," "]],[5909,5909],[5908,5908]]],[1565242039525,["GJX@GJXAIOU",[[-1,6199,"2.6"]],[6202,6202],[6199,6199]]],[1565242040384,["GJX@GJXAIOU",[[1,6199,"（）"]],[6199,6199],[6201,6201]]],[1565242042498,["GJX@GJXAIOU",[[1,6200,"六"]],[6200,6200],[6201,6201]]],[1565242044755,["GJX@GJXAIOU",[[-1,6202," "]],[6203,6203],[6202,6202]]],[1565242050574,["GJX@GJXAIOU",[[-1,8417,"3 "]],[8419,8419],[8417,8417]]],[1565242052051,["GJX@GJXAIOU",[[1,8417,"三 "]],[8417,8417],[8418,8418]]],[1565242052330,["GJX@GJXAIOU",[[1,8418,"、"]],[8418,8418],[8419,8419]]],[1565242053676,["GJX@GJXAIOU",[[-1,8419," "]],[8420,8420],[8419,8419]]],[1565242057402,["GJX@GJXAIOU",[[-1,8785,"3.1"]],[8788,8788],[8785,8785]]],[1565242058603,["GJX@GJXAIOU",[[1,8785,"（）"]],[8785,8785],[8787,8787]]],[1565242060116,["GJX@GJXAIOU",[[1,8786,"一"]],[8786,8786],[8787,8787]]],[1565242061611,["GJX@GJXAIOU",[[-1,8788," "]],[8789,8789],[8788,8788]]],[1565242065917,["GJX@GJXAIOU",[[-1,9285,"3.2"]],[9288,9288],[9285,9285]]],[1565242066610,["GJX@GJXAIOU",[[1,9285,"（）"]],[9285,9285],[9287,9287]]],[1565242067970,["GJX@GJXAIOU",[[1,9286,"二"]],[9286,9286],[9287,9287]]],[1565242069950,["GJX@GJXAIOU",[[-1,9288," "]],[9289,9289],[9288,9288]]],[1565242074497,["GJX@GJXAIOU",[[-1,9643,"3.3 "],[1,9647,"（"]],[9643,9643],[9644,9644]]],[1565242074588,["GJX@GJXAIOU",[[1,9644,"）"]],[9644,9644],[9645,9645]]],[1565242077158,["GJX@GJXAIOU",[[1,9644,"三"]],[9644,9644],[9645,9645]]],[1565242080781,["GJX@GJXAIOU",[[-1,10161,"3.4 "]],[10165,10165],[10161,10161]]],[1565242081833,["GJX@GJXAIOU",[[1,10161,"（0 "]],[10161,10161],[10163,10163]]],[1565242082889,["GJX@GJXAIOU",[[1,10162,"四 "]],[10162,10162],[10163,10163]]],[1565242085231,["GJX@GJXAIOU",[[-1,10163," "]],[10164,10164],[10163,10163]]],[1565242085768,["GJX@GJXAIOU",[[1,10163,"）"]],[10163,10163],[10164,10164]]],[1565242089575,["GJX@GJXAIOU",[[-1,10163,"）0 "]],[10165,10165],[10163,10163]]],[1565242150204,[null,[[-1,14455,"dxa"],[1,14458," x "]],[14455,14455],[14461,14461]]],[1565242150204,[null,[[1,14455,"dxa"],[-1,14455," x "]],[14461,14461],[14455,14455]]],[1565242090713,["GJX@GJXAIOU",[[1,10163,"）"]],[10163,10163],[10164,10164]]],[1565242095035,["GJX@GJXAIOU",[[-1,10595,"3.5 "]],[10599,10599],[10595,10595]]],[1565242095869,["GJX@GJXAIOU",[[1,10595,"（）"]],[10595,10595],[10597,10597]]],[1565242098144,["GJX@GJXAIOU",[[1,10596,"五"]],[10596,10596],[10597,10597]]],[1565242105731,["GJX@GJXAIOU",[[-1,10837,"4"]],[10838,10838],[10837,10837]]],[1565242107384,["GJX@GJXAIOU",[[1,10837,"四、"]],[10837,10837],[10839,10839]]],[1565242108435,["GJX@GJXAIOU",[[-1,10839," "]],[10840,10840],[10839,10839]]],[1565242111075,["GJX@GJXAIOU",[[-1,10916,"5 "]],[10917,10918],[10916,10916]]],[1565242112642,["GJX@GJXAIOU",[[1,10916,"五 "]],[10916,10916],[10917,10917]]],[1565242112907,["GJX@GJXAIOU",[[1,10917,"、"]],[10917,10917],[10918,10918]]],[1565242114606,["GJX@GJXAIOU",[[-1,10918," "]],[10919,10919],[10918,10918]]],[1565242119476,["GJX@GJXAIOU",[[-1,11981,"6 "]],[11982,11982],[11981,11981]]],[1565242120414,["GJX@GJXAIOU",[[1,11981,"六 "]],[11981,11981],[11982,11982]]],[1565242120777,["GJX@GJXAIOU",[[1,11982,"、"]],[11982,11982],[11983,11983]]],[1565242123419,["GJX@GJXAIOU",[[-1,11982,"、 "]],[11983,11983],[11982,11982]]],[1565242124370,["GJX@GJXAIOU",[[1,11982,"、"]],[11982,11982],[11983,11983]]],[1565242129676,["GJX@GJXAIOU",[[-1,13015,"7 "]],[13017,13017],[13015,13015]]],[1565242133976,["GJX@GJXAIOU",[[1,13015,"七 "]],[13015,13015],[13016,13016]]],[1565242135251,["GJX@GJXAIOU",[[1,13016,"、"]],[13016,13016],[13017,13017]]],[1565242137252,["GJX@GJXAIOU",[[-1,13017," "]],[13018,13018],[13017,13017]]],[1565242142444,["GJX@GJXAIOU",[[-1,14233,"8 "]],[14235,14235],[14233,14233]]],[1565242145113,["GJX@GJXAIOU",[[1,14233,"八 "]],[14233,14233],[14234,14234]]],[1565242146176,["GJX@GJXAIOU",[[1,14234,"、"]],[14234,14234],[14235,14235]]],[1565242147563,["GJX@GJXAIOU",[[-1,14235," "]],[14236,14236],[14235,14235]]],[1565242193275,[null,[[-1,14455,"dxa"],[1,14458," x "]],[14455,14455],[14461,14461]]],[1565242193275,[null,[[1,14455,"dxa"],[-1,14455," x "]],[14461,14461],[14455,14455]]],[1565242170332,["GJX@GJXAIOU",[[-1,859,"=="]],[861,861],[859,859]]],[1565242172044,["GJX@GJXAIOU",[[-1,899,"=="]],[901,901],[899,899]]],[1565242189976,["GJX@GJXAIOU",[[1,17,"style: summer"]],[17,17],[30,30]]]],null,"GJX@GJXAIOU"],["b829e008-81a9-4abc-b791-9c11571f6854",1565917456583,"---\ntags: \n- API\nstyle: summer\ndate: '2019-6-30'\n---\n\n# Java常用API\n@toc\n\n# 一、Object对象\n\n面向对象的核心思想:“找合适的对象，做适合的事情”。\n\n合适的对象：\n1. 自己描述类，自己创建对象。\n2. sun已经描述了好多常用的类，可以使用这些类创建对象。\n    API（Application Program Interface）\n\n sun定义的那么多类的终极父类是Object。Object描述的是所有类的通用属性与方法。\n\n## （一） toString方法以及重写\n\n```java\npublic static void main(String[] args){\n  Object o = new Object();\n  System.out.println(o); //java.lang.Object@de6ced\n}\n```\ntoString() 返回对象的描述信息 java.lang.Object@de6ced 类名@哈希码值的十六进制形式。\n直接输入一个对象的时候，会调用对象的toString方法。\n\n练习：自定义一个Person类，打印该对象的描述信息，要求描述信息为：姓名 — 年龄\n\n```java\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n}\n\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tPerson person = new Person();\n\t\tSystem.out.println(person); //对象的描述信息 study.Person@311d617d\n\t}\n}\n```\n\n问题：调用person 的toString方法时，打印出来的信息是`类名+内存地址值`。不符合要求。根据我们之前学的继承，假如父类的指定的功能不能满足要求，那么子类可以复写父类的功能函数。那么该对象再调用toString()方法时，则会调用子类复写的toString方法。\n\n```java\n//tostring方法重写\nclass Person{\n\tint age;\n\tString name;\n\n\tpublic Person() {\n\t}\n\t\n\tpublic Person(int age, String name){\n\t\tthis.age = age;\n\t\tthis.name = name;\n\t}\n\t\n  //可以使用Alt + shift + s 然后generate toString \n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [age=\" + this.age + \", name=\" + this.name + \"]\";\n\t}\n\t\n}\n```\n\n\n**编程习惯:** 开发者要对自定义的类重写toString()，对对象做详细的说明\n\n\n\n## （二） equals方法\n\n**equals()** 返回的是比较的结果  如果相等返回true，否则false，比较的是对象的内存地址值。\n```java\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = new Object();\n  System.out.println(o1.equals(o2)); //false\n}\n\npublic static void main(String[] args){\n  Object o1 = new Object();\n  Object o2 = o1;\n  System.out.println(o1.equals(o2)); //true\n}\n```\n\n问题：比较两个人是否是同一个人，根据两个人的名字判断。\n\n**问题：** 如果根据名字去作为判断两个人是否是同一个时，明显p与p1是同一个人，但是程序输入却不是同一个人。不符合我们现实生活的要求。\n\n**解决:** 根据我们学的继承中的函数复写，如果父类的函数不能满足我们目前的要求，那么就可以在子类把该功能复写，达到复合我们的要求。\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n```\n**编程习惯：** 开发者要对自定义的类重写equals()，使得比较两个对象的时候比较对象的属性是否相等，而不是内存地址。\n\n\n\n## （三） hashCode方法\n\n**hashCode()** 返回该对象的哈希码值： 采用操作系统底层实现的哈希算法。 同一个对象的哈希码值是唯一的。\n\njava规定如果两个对象equals返回true，那么这两个对象的hashCode码必须一致。(使用默认的 equals 方法的时候)\n**一般情况下：重写了 equals 方法就得重写 hashCode 方法**\n```java\n@Override\npublic boolean equals(Object arg0) {\n\tPerson person = (Person)arg0; //强制类型转换\n\treturn this.name.equals(person.name);//判断name的属性，使用的string中的equals方法\n}\n\n@Override\npublic int hashCode() {\n\treturn this.name.hashCode();\n}\n```\n\n\n# 二、String类\n\nString类描述的是文本字符串序列。例如： 留言 、QQ、 写日志。\n\n**创建String类的对象的两种方式：**\n1. 使用“ ”直接赋值法\n2. new关键字法\n\n\n\n## （一）字符串对象的比较\n\n```java\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tString string1 = \"hello\";\n\t\tString string2 = \"hello\";\n\t\tString string3 = new String(\"hello\");\n\t\tString string4 = new String(\"hello\");\n\t\t\n\t\tSystem.out.println(string1 == string2); //true\n\t\tSystem.out.println(string1 == string3); //false\n\t\tSystem.out.println(string3 == string4); //false\n}\n```\n\n\nString string = “hello” 这个语句会先检查字符串常量池是否存放这个”string1”这个字符串对象，如果没有存在，那么就会在字符串常量池中创建这个字符串对象，如果存在直接返回该字符串的内存地址值。\n\nString string3 = new String(“hello”) 该语句会创建两个对象,首先会先检查字符串常量池中存不存在 `hello` 这个字符串对象，如果不存在就会创建，如果存在就返回内存地址值。创建了出来之后，new String这个语句就会在堆内存中开辟一个字符串对象。总共两个对象。\n\n![string数组]($resource/string%E6%95%B0%E7%BB%84.png)\n\n\n\n## （二）获取方法\n\n返回值 |命令 | 含义\n---|---|---\nint |  length() | 获取字符串的长度\nchar | charAt(int index) | 获取特定位置的字符 (角标越界)\nint  |  indexOf(String str) | 获取特定字符的位置(overload)\nint  |  lastIndexOf(int ch)  |   获取最后一个字符的位置\n```java\nString string = \"hello world\";\n      System.out.println(\"length : \" + string.length());       \t\t\t\t  //11\n      System.out.println(\"I 的位置 ：\" + string.indexOf(\"o\")); \t\t\t\t //4\n      System.out.println(\"I的最后位置  ：\"  + string.lastIndexOf(\"o\"));    // 7\n      System.out.println(\"P的位置 ： \" + string.indexOf(\"P\"));\t\t\t\t //-1 不存在下标就是-1\n      System.out.println(\"获取下标为1的元素：\" + string.charAt(1));      //e\n      System.out.println(\"获取下表为12的元素：\" + string.charAt(12));  // 数组越界java.lang.StringIndexOutOfBoundsException\n```\n\n\n## （三）判断方法\n\n返回值 |命令 | 含义\n---|---|---\nboolean  | endsWith(String str)  | 是否以指定字符结束\nboolean |  isEmpty()  | 是否长度为0 如：“” null V1.6\nboolean  | contains(CharSequences) | 是否包含指定序列 应用：搜索\nboolean | equals(Object anObject) | 是否相等\nboolean |equalsIgnoreCase(String anotherString) |忽略大小写是否相等\n```java\nString string1 = \" \";\nString string2 = \"\";\nSystem.out.println(\"string1长度：\" + string1.length()); //string1的长度：1\nSystem.out.println(\"string2长度：\" + string2.length()); //string2的长度：0\nSystem.out.println(\"string1是否为空：\" + string1.isEmpty()); //false\nSystem.out.println(\"string2是否为空：\" + string2.isEmpty()); //true\n\nstring1 = \"hello java world\";\nSystem.out.println(\"是否包含 java 字符串：\" +string1.contains(\"java\")); //true\nSystem.out.println(\"abc\".equals(\"abc\")); //true\n\nSystem.out.println(new String(\"abc\") .equals(new String(\"abc\"))); //true\nSystem.out.println(new String(\"abc\") .equals(new String(\"ABC\"))); //false\nSystem.out.println(new String(\"abc\") .equalsIgnoreCase(new String(\"ABC\"))); //true\n\nstring1 = \"Demo.java\";\nSystem.out.println(\"是不是以 .java 结尾 \" + string1.endsWith(\".java\")); //是不是以 .java 结尾 true\n```\n\n\n## （四）转换方法\n\n方法| 含义\n---|---\nString(char[] value) | 将字符数组转换为字符串\nString(char[] value, int offset, int count) |\nStatic String valueOf(char[] data)|\nstatic String valueOf(char[] data, int offset, int count) |\nchar[] toCharArray() | 将字符串转换为字符数组\n\n```java\nString str = new String(new char[]{'h', 'e', 'l', 'l', '0'});\nSystem.out.println(str);\n\nchar[] chars = str.toCharArray();\nfor (int i = 0; i < chars.length; i++) {\n    System.out.println(chars[i]);\n}\n\nbyte[] bytes = {97, 98, 99};\nString s = new String(bytes);\nSystem.out.println(s);\n\nbyte[] strBytes = str.getBytes();\nfor (int i = 0; i < strBytes.length; i++) {\n    System.out.println(strBytes[i]);\n }\n```\n程序运行结果：\n```java\nhell0\nh\ne\nl\nl\n0\nabc\n104\n101\n108\n108\n48\n```\n\n\n\n\n## （五）其他方法\n 返回值  | 方法| 说明\n ---|---|---\nString |replace(char oldChar, char newChar)| 替换\nString[] | split(String regex) | 切割\nString| substring(int beginIndex)\nString| substring(int beginIndex, int endIndex) |截取字串\nString | toUpperCase() |转大写\nString  | toLowerCase() |转小写\nString |  trim() |去除空格\n\n\n\n## （六）练习\n\n- 去除字符串两边空格的函数。\n\n```java\npublic class Demo {\n\n    // 定义一个祛除字符串两边空格的函数\n    public static void main(String[] args) {\n        String string = Demo.trim(\"  hell  0  \");\n        System.out.println(string.toCharArray());\n    }\n    public static String trim(String str) {\n\n        // 0、定义求字串需要的起始索引变量\n        int start = 0;\n        int end = str.length() - 1;\n        // 1. for循环遍历字符串对象的每一个字符\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n        System.out.println(start);\n\n        for (; end < str.length() && end >= 0; ) {\n            if (str.charAt(end) == ' ') {\n                end--;\n            } else {\n                break;\n            }\n        }\n        System.out.println(end);\n        // 2. 求子串\n        if (start < end) {\n            return str.substring(start, (end + 1));\n        } else {\n            return \"_\";\n        }\n    }\n}\n\n```\n程序执行结果：\n```java\n2\n8\nhell  0\n```\n\n- 获取上传文件名 \"D:\\\\20120512\\\\day12\\\\Demo1.java\"。\n```java\npublic static  String getFileName2( String path ){\n    return path.substring( path.lastIndexOf(\"\\\\\") + 1 );\n     }\n}\n```\n\n- 将字符串对象中存储的字符反序。\n```java\n// 将字符串对象中存储的字符反序\n    public static String reaverseString(String src) {\n\n        // 1. 将字符串转换为字符数组\n        char chs[] = src.toCharArray();\n        // 2. 循环交换\n        for (int start = 0, end = chs.length - 1; start < end; start++, end--) {\n            // 3. 数据交换\n            char temp = chs[end];\n            chs[end] = chs[start];\n            chs[start] = temp;\n        }\n        // 4. 将字符数组转换为字符串\n        return new String(chs);\n    }\n```\n\n- 求一个子串在整串中出现的次数\n\n```java\n public static int getCount(String src, String tag) {\n        // 0. 定义索引变量和统计个数的变量\n        int index = 0;\n        int count = 0;\n        // 1. 写循环判断\n        while ((index = src.indexOf(tag)) != -1)   // jackjava\n        {\n            // 2. 求字串\n            System.out.println(src);\n            src = src.substring(index + tag.length());   // index 4 + 4 = 8\n            System.out.print(src.length() + \" : \" + index + \" :  \" + tag.length());\n            // 3. 累加\n            count++;\n        }\n        return count;\n    }\n```\n\n# 三、StringBuffer\n**StringBuffer** : 由于String是不可变的，所以导致String对象泛滥，在频繁改变字符串对象的应用中，需要使用可变的字符串缓冲区类。\n\n- 特点：\n  - 默认缓冲区的容量是16。\n  - StringBuffer ： 线程安全的所有的缓冲区操作方法都是同步的。效率很低。\n\n```java\npublic static void main(String[] args) {\n        String string = \"\";\n        for (int i = 0; i < 10; i++) {\n            string += 1;\n        }\n        System.out.println(string);\n    }\n```\n\n\n\n## （一）添加方法\n| 方法名 | 说明\n---|---|\nStringBuffer(\"jack\")  |   在创建对象的时候赋值\nappend()         |     在缓冲区的尾部添加新的文本对象\ninsert()          |      在指定的下标位置添加新的文本对象\n\n```java\nStringBuffer sb = new StringBuffer(\"jack\");\nsb.append(true);\nsb.append('a');\n// 链式编程\nsb.append(97).append(34.0).append(new char[]{\n     'o', 'o'\n });   \n// 输出缓冲区的中文本数据\nSystem.out.println(sb.toString());          \nsb = new\n\nStringBuffer(\"jack\");\n// jajavack\nsb.insert(2, \"java\");                       \nSystem.out.println(sb.toString());\n```\n\n## （二）查看\n| 方法 | 说明\n|---|---\ntoString()  | 返回这个容器的字符串\nindexOf(String str)  | 返回第一次出现的指定子字符串在该字符串中的索引。\nsubstring(int start)  |从开始的位置开始截取字符串\n\n```java\npublic static void main(String[] args) {\n    StringBuffer stringBuffer = new StringBuffer(\"jackc\");\n  System.out.println(stringBuffer.indexOf(\"c\"));\n  System.out.println(stringBuffer.lastIndexOf(\"c\")); }\n```\n\n\n\n## （三）修改(U)\n|方法 | 说明\n| ---|---\nreplace(int start int endString str) | 使用给定 `String`  中的字符替换此序列的子字符串中的字符。该子字符串从指定的 `start`  处开始，一直到索引 `end - 1`  处的字符\nsetCharAt(int index char ch) | 指定索引位置替换一个字符\n\n```java\npublic static void main(String[] args) {\n        StringBuffer stringBuffer = new StringBuffer(\"helloworld\");\n        System.out.println(stringBuffer.replace(2, 6, \"javaEE\"));\n        stringBuffer.setCharAt(8,'Q');\n        System.out.println(stringBuffer);\n    }\n```\n程序运行结果：\n```java\nhejavaEEorld\nhejavaEEQrld\n```\n\n\n\n\n## （四）删除(D)\n\n方法 | 说明\n---|---\ndelete(int start, int end)|删除指定区域元素，start <= char < end\ndelete(0, sb.length) | 清空整个缓冲区\ndeleteCharAt(int index) | 删除某个下标的元素   \n\n```java\npublic static void main(String[] args) {\n        StringBuffer stringBuffer = new StringBuffer(\"helloworld\");\n        System.out.println(stringBuffer.delete(2, 5));\n\n        System.out.println(stringBuffer.deleteCharAt(3));\n    }\n```\n程序运行结果：\n```java\nheworld\nhewrld\n```\n\n\n## （五）反序\n\nreverse() 把字符串反序输出。\n```java\npublic static void main(String[] args) {\n  String string = \"helloworld\";\n  StringBuffer stringBuffer = new StringBuffer(string);\n  System.out.println(stringBuffer.reverse()); }\n```\n程序运行结果：\n`dlrowolleh`\n\n\n\n# 四、StringBuilder\n\nStringBuilder 是JDK1.5之后提出的，线程不安全，但是效率要高。用法与StringBuffer类似。\n\n# 五、System\n\nSystem 可以获取系统的属性。\n```java\npublic static void main(String[] args) {\n        // 获取系统属性\n        Properties properties = System.getProperties();\n        // 输出系统属性\n        properties.list(System.out);\n        System.out.println(\"*********************\");\n\n        // 获取操作系统名称\n        String osName = System.getProperty(\"os.name\");\n        System.out.println(osName);\n        System.out.println(\"*********************\");\n\n        // 检测操作系统系统支持该软件\n        if (\"Windows 10\".equals(osName)){\n            System.out.println(\"符合\");\n        }else{\n            System.out.println(\"不符合\");\n        }\n        System.out.println(\"*********************\");\n\n        // 获取path环境变量值\n        System.out.println(System.getenv(\"path\"));\n    }\n\n```\n输出结果：\n```java\n-- listing properties --\njava.runtime.name=Java(TM) SE Runtime Environment\nsun.boot.library.path=E:\\Program\\Java\\JDK1.8\\jre\\bin\njava.vm.version=25.221-b11\n## 等等等等\n*********************\nWindows 10\n*********************\n符合\n*********************\nC:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath； ## 等等等等\n```\n\n\n\n# 六、Runtime\n\nRuntime 类主要描述的是应用程序运行的环境。\n\n返回值|方法名 | 说明|\n---|---|---|\n 无  |exit() | 退出虚拟机|\nlong| freeMemory() | 获取可用内存数目\n无 | gc() | 调用垃圾回收器程序，但是调用该方法不会马上就运行 gc\nlong | maxMemory() | 获取 JVM 最大内存容量\nlong | totalMemory() | 获取总内存\nProcess | exec(String command) | 启动一个字符串命令的进程  \n\n```java\npublic static void main(String[] args) {\n        // 获取应用运行环境的对象\n        Runtime runtime = Runtime.getRuntime();\n\n        // 获取可用的内存数\n        System.out.println(runtime.freeMemory());\n\n        // 获取JVM试图使用的内存总容量\n        System.out.println(runtime.maxMemory());\n\n        // 获取JVM只能使用的总容量\n        System.out.println(runtime.totalMemory());\n\n        // 启动程序：\n        try {\n            Process screentoGif = runtime.exec(\"D:\\\\Screentogif\\\\screentogif.exe\");\n            Process typora = runtime.exec(\"typora demo.md\");\n            \n            Thread.sleep(1000*10);\n            typora.destroy();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n# 七、Date\n\nDate 类封装的是系统的当前时间.。但是Date已经过时了，sun推荐使用Calendar类。\n\nCalendar: 该类是一个日历的类，封装了年月日时分秒时区。\n```java\npublic static void main(String[] args) {\n        Calendar calendar = Calendar.getInstance();\n        // 获取年、月、日、时、分、秒\n        int year = calendar.get(Calendar.YEAR);\n        int month = calendar.get(Calendar.MONTH) + 1;\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);\n\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        int minute = calendar.get(Calendar.MINUTE);\n        int second = calendar.get(Calendar.SECOND);\n\n        System.out.println(\"year : \" + year + \" month : \" + month + \" day : \" + day +  \"\\n\" +\n                \"dayOfWeek : \" + dayOfWeek + \"\\n\" +\n                \"hour : \" + hour + \" minute : \" + minute + \" second : \" + second);\n\n    }\n```\n程序运行结果：\n```java\nyear : 2019 month : 8 day : 8\ndayOfWeek : 5\nhour : 11 minute : 40 second : 42\n```\n\n日期格式化类：SimpleDateFormat\n```java\npublic static void main(String[] args) {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy年MM日dd日 E a hh时mm分ss秒\");\n        System.out.println(simpleDateFormat.format(new Date()));\n    }\n```\n程序结果：`2019年08日08日 星期四 上午 11时43分53秒`\n\n\n\n# 八、Math\n\nMath：类封装了很多数学的功能。\n方法| 说明\n---|---\nstatic double ceil(double a)|返回大于等于指定小数的最小整数\nstatic double floor(double a) | 返回小于等于指定小数的最大整数\nstatic long round(double a) | 四舍五入\nstatic double random() | 返回大于等于 0.0 小于 1.0 的小数 1.0 <= x <11.0   \n\n```java\npublic static void main(String[] args) {\n        System.out.println(Math.PI);\n        System.out.println(Math.ceil(12.3));\n        System.out.println(Math.ceil(12.5));\n        System.out.println(Math.ceil(-12.5));\n\n        System.out.println(Math.floor(-15.1));\n        System.out.println(Math.floor(15.1));\n\n        System.out.println(Math.round(15.1));\n        System.out.println(Math.round(15.5));\n\n        System.out.println(Math.random());\n    }\n```\n程序输出结果：\n```java\n3.141592653589793\n13.0\n13.0\n-12.0\n-16.0\n15.0\n15\n16\n0.1833227126599336\n```\n\n\n练习：生成一个随机码\n```java\npublic static void main(String[] args) {\n        // 生成一个随机码\n        Random random = new Random();\n        char[] chars = {'a', 'b', 'c', 'd', 'e', '你', '好', '@'};\n\n        StringBuilder stringBuilder = new StringBuilder(\"\");\n\n        for (int i = 0; i < 4; i++) {\n            stringBuilder.append(chars[random.nextInt(chars.length)]);\n\n        }\n        System.out.println(\"随机码：\" + stringBuilder.toString());\n    }\n```\n\n\n",[[1565917412343,["GJX@GJXAIOU",[[1,31,"\n"]],[30,30],[31,31]]],[1565917422192,["GJX@GJXAIOU",[[1,31,"flag:red"]],[31,31],[39,39]]],[1565917424494,["GJX@GJXAIOU",[[1,36," "]],[36,36],[37,37]]]],null,"GJX@GJXAIOU"]]}