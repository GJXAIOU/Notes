{"compress":true,"commitItems":[["c80f376f-7fd1-439f-87b8-c7ec885553c0",1565266540851,"# [Java Web(一) Servlet详解！！](https://www.cnblogs.com/whgk/p/6399262.html)\n\n　　　　这篇文章到上一篇，距离的有点遥远呀，隔了大概有两个月把，中间在家过了个年，哈哈~ 现在重新开始拾起。\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　--WZY\n\n一、什么是servlet？\n\n　　　　处理请求和发送响应的过程是由一种叫做Servlet的程序来完成的，并且Servlet是为了解决实现动态页面而衍生的东西。理解这个的前提是了解一些http协议的东西，并且知道B/S模式(浏览器/服务器)。\n\n　　　　B/S:浏览器/服务器。 浏览器通过网址来访问服务器，比如访问百度，在浏览器中输入www.baidu.com，这个时候浏览器就会显示百度的首页，那么这个具体的过程，步骤是怎样的呢？这个就了解一下[http请求和响应](http://www.cnblogs.com/whgk/p/6130882.html \"http://www.cnblogs.com/whgk/p/6130882.html\")了\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170214192940050-671180063.png)\n\n　　　　请求，响应：通过给的链接应该可以知道这两个具体的内容\n\n二、tomcat和servlet的关系\n\n　　　　Tomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件. Servlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品.\n\n　　　　从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。但是在上面这个图中，并不知道是如何转变的，只知道浏览器发送过来的请求也就是request，我们响应回去的就用response。忽略了其中的细节，现在就来探究一下。\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170214204632894-1786729693.png)\n\n　　　　　　①：Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。\n\n　　　　　　②：Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器\n\n　　　　Java Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。\n\n三、编写Servlet\n\n　　　　在前面，我们已经知道了servlet是什么，为什么需要servlet?（为了实现动态网页，而不是显示静态网页，具体情况可以百度查查），tomcat和servlet的关系？等问题。现在来手动编写一个Servlet。\n\n　　　　3.1、手动编写servlet。\n\n　　　　　　1、创建一个MyServlet继承HttpServlet，重写doGet和doPost方法，也就是看请求的方式是get还是post，然后用不同的处理方式来处理请求，\n\n　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094438629-1196159083.png)\n\n　　　　　　2、在web.xml中配置MyServlet，为什么需要配置？让浏览器发出的请求知道到达哪个servlet，也就是让tomcat将封装好的request找到对应的servlet让其使用。\n\n　　　　　　　　　　　　配置四个东西。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094000972-1276129522.png)\n\n　　　　　　　　　　　　配置之后，浏览器是如何通过我们配置的信息来找到对应的servlet的。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094053504-915571176.png)\n\n　　　　　　　　　　　　按照步骤，首先浏览器通过http://localhost:8080/test01/MyServlet来找到web.xml中的url-pattern，这就是第一步，匹配到了url-pattern后，就会找到第二步servlet的名字MyServlet，知道了名字，就可以通过servlet-name找到第三步，到了第三步，也就能够知道servlet的位置了。然后到其中找到对应的处理方式进行处理。\n\n　　　　　　　3、实验，验证上面配置成功。\n\n　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094649550-2096214829.png)　　　\n\n　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094700035-984507451.png)\n\n　　　　3.2、利用向导新建MyServlet\n\n　　　　　　　　这个就相对简单了，web.xml不用我们手动配置，工具直接帮我们自动配置了\n\n　　　　　　　　　　　　1、右击项目，在new选项中有直接新建servlet的选项\n\n　　　　　　　　　　　　2、配置MyServlet类中的信息\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216095540332-191821755.png)　\n\n　　　　　　　　　　3、配置web.xml中的servlet信息\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216095633754-1304935718.png)　　　\n\n　　　　　　　　4、查看MyServle01类中的代码和web.xml，其中的配置跟手动的配置是一样的，只是用图形化界面，让我们更方便的创建servlet而产生的。\n\n　　　　3.3、详解创建servlet的原理\n\n　　　　　　　　1、servlet的生命周期是什么？\n\n　　　　　　　　2、为什么创建的servlet是继承自httpServlet，而不是直接实现Servlet接口？\n\n　　　　　　　　3、servlet的生命周期中，可以看出，执行的是service方法，为什么我们就只需要写doGet和doPost方法呢？\n\n　　　　　　　　等这一系列的问题，我们都应该知道，而不应该就单纯的知道如何配置和使用servlet?上面的问题，一一来解答。\n\n　　　　　　　　1、servlet的生命周期是什么？\n\n　　　　　　　　　　服务器启动时(web.xml中配置load-on-startup=1，默认为0)或者第一次请求该servlet时，就会初始化一个Servlet对象，也就是会执行初始化方法init(ServletConfig conf)\n\n　　　　　　　　　　该servlet对象去处理所有客户端请求，在service(ServletRequest req，ServletResponse res)方法中执行\n\n　　　　　　　　　　最后服务器关闭时，才会销毁这个servlet对象，执行destroy()方法。\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216103737254-1072057229.png)\n\n　　　　　　　　2、为什么创建的servlet是继承自httpServlet，而不是直接实现Servlet接口？\n\n　　　　　　　　3、servlet的生命周期中，可以看出，执行的是service方法，为什么我们就只需要写doGet和doPost方法呢？\n\n　　　　　　　　　　查看源码，httpServlet的继承结构。\n\n　　　　　　　　　　　　　httpServlet继承GenericServlet。懂的人立马就应该知道，GenericServlet(通用Servlet)的作用是什么？大概的就是将实现Servlet接口的方法，简化编写servlet的步骤。具体下面详解\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104143472-1013662984.png)\n\n　　　　　　　　　　　　　GenericServlet的继承结构，实现了Servlet接口和ServletConfig接口，\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104540738-1388356015.png)　　　\n\n　　　　　　　　　　　　　Servlet接口内容\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216142610660-322166979.png)　\n\n　　　　　　　　　　　　　　　　从这里可以看到，Servlet生命周期的三个关键方法，init、service、destroy。还有另外两个方法，一个getServletConfig()方法来获取ServletConfig对象，ServletConfig对象可以获取到Servlet的一些信息，ServletName、ServletContext、InitParameter、InitParameterNames、通过查看ServletConfig这个接口就可以知道\n\n　　　　　　　　　　　　　ServletConfig接口内容\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216143011050-806963452.png)\n\n　　　　　　　　　　　　　　　　其中ServletContext对象是servlet上下文对象，功能有很多，获得了ServletContext对象，就能获取大部分我们需要的信息，比如获取servlet的路径，等方法。\n\n　　　　　　　　　　　　　　　到此，就知道了Servlet接口中的内容和作用，总结起来就是，三个生命周期运行的方法，获取ServletConfig，而通过ServletConfig又可以获取到ServletContext。而GenericServlet实现了Servlet接口后，也就说明我们可以直接继承GenericServlet，就可以使用上面我们所介绍Servlet接口中的那几个方法了，能拿到ServletConfig，也可以拿到ServletContext，不过那样太麻烦，不能直接获取ServletContext，所以GenericServlet除了实现Servlet接口外，还实现了ServletConfig接口，那样，就可以直接获取ServletContext了。\n\n 　　　　　　　　　　　　　GenericServlet类的内容详解\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145502191-411577839.png)\n\n　　　　　　　　　　　　　　　　看上图，用红色框框起来的就是实现Servlet和ServletConfig接口所实现的方法，有9个，这很正常，但是我们可以发现，init方法有两个，一个是带有参数ServletConfig的，一个有无参的方法，为什么这样设计？这里需要知道其中做了什么事情，来看看这两个方法分别做了什么事？\n\n　　　　　　　　　　　　　　　　init(ServletConfig config)\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145829785-244456335.png)　\n\n　　　　　　　　　　　　　　　　init()\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145902488-312998049.png)　\n\n　　　　　　　　　　　　　　　　一个成员变量config\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145934441-854020880.png)　\n\n　　　　　　　　　　　　　　　　getServletConfig()\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216150037300-348044601.png)　\n\n　　　　　　　　　　　　　　　　通过这几个方法一起来讲解，首先看init(ServletConfig config)方法，因为只有init(ServletConfig config)中带有ServletConfig对象，为了方便能够在其他地方也能直接使用ServletConfig对象，而不仅仅局限在init(ServletConfig config)方法中，所以创建一个私有的成员变量config，在init(ServletConfig config)方法中就将其赋值给config，然后通过getServletConfig()方法就能够获取ServletConfig对象了，这个可以理解，但是在init(ServletConfig config)中，158行，还调用了一个init()方法，并且这个init()方法是空的，什么读没有，这是为什么呢？这个原因是为了防止一件事情，当我们需要在init方法中做一点别的事情，我们想到的方法就是继承GenericServlet并且重写了init(ServletConfig config)方法，这样依赖，就破坏了原本在GenericServlet类中init(ServletConfig config)写的代码了，也就是在GenericServlet类中的成员变量config会一直是null，无法得到赋值，因为被重写了，就不会在执行GenericServlet中init(ServletConfig config)方法中的代码。要想赋值，就必须在重写的init(ServletConfig config)方法中调用父类的init(ServletConfig config)方法，也就是super.init(ServletConfig config)，这样一来，就很不方便，怕有时候会忘了写这句代码，所以在GenericServlet类中增加一个init()方法，以后需要在init方法中需要初始化别的数据，只需要重写init()这个方法，而不需要去覆盖init(ServletConfig config)这个方法，这样设计，就好很多，不用在管init(ServletConfig config)这个其中的内容了。也不用出现其他的问题。\n\n　　　　　　　　　　　　　　　　service(ServletRequest req, ServletResponse res)\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216151326800-261692386.png)　\n\n　　　　　　　　　　　　　　　　　　　一个抽象方法，说明在GenericServlet类中并没有实现该内容，那么我们想到的是，在它上面肯定还有一层，也就是还有一个子类继承它，实现该方法，要是让我们自己写的Servlet继承GenericServlet，需要自己写service方法，那岂不是累死，并且我们可以看到，service方法中的参数还是ServletRequest，ServletResponse。并没有跟http相关对象挂钩，所以我们接着往下面看。\n\n　　　　　　　　　　　HttpServlet类详解\n\n　　　　　　　　　　　　　　　继承了GenericServlet类，通过我们上面的推测，这个类主要的功能肯定是实现service方法的各种细节和设计。并且通过类名可以知道，该类就跟http挂钩了。\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152220082-1786372762.png)\n\n　　　　　　　　　　　　　　　　关注service(HttpServletRequest req, HttpServletResponse resp)方法和service(ServletRequest req, ServletResponse res)方法。\n\n　　　　　　　　　　　　　　　　　　service(ServletRequest req, ServletResponse res)方法\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152409566-1602415910.png)　　\n\n　　　　　　　　　　　　　　　　　　　　该方法中就做一件事情，就是将ServletRequest和ServletResponse这两个对象强转为HttpServletRequest和HttpServletResponse对象。为什么能这样转？\n\n　　　　　　　　　　　　　　　　　　　　　　首先要知道req、res是什么类型，通过打印System.out.println(req)，可以知道，req实际上的类型是org.apache.catalina.connector.RequestFacade　　　　　　　　　　　　　　　　　　　　　　　　　Tomcat中的源码。\n\n　　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216153430191-1401298895.png)　\n\n　　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152630363-1042785925.png)　　　\n\n　　　　　　　　　　　　　　　　　　　　通过图可以得知，req的继承结构：RequestFacade、httpServletRequest、ServletRequest，我们知道本身req是ServletRequest，那么从继承结构上看，它也可以看成HttpServletRequest，也可以看成ServletRequest，所以强转为HttpServletRequest是可以的，如果不明白，我举个例子，ArrayList、List、Object 这个，Object obj = new ArrayList();  List list = new ArrayList();  一个ArrayList对象可以看成List对象， 也可以看成一个Object对象，现在obj是不是可以堪称List对象呢？答案是可以的，因为obj就是ArrayList对象，既然是ArrayList对象，那么就可以看成是List对象。一样的道理，RequestFacade 对应 ArrayList、httpServleRequest对应 List、 ServletRequest 对应 Object。\n\n　　　　　　　　　　　　　　　　　　　　转换为httpServletRequest和HttpServletResponse对象之后，在调用service(HttpServletRequest req, HttpServletResponse resp)方法。\n\n　　　　　　　　　　　　　　　　service(HttpServletRequest req, HttpServletResponse resp)\n\n　　　　　　　　　　　　　　　　　　　　这个方法就是判断浏览器过来的请求方式是哪种，每种的处理方式不一样，我们常用的就是get，post，并且，我们处理的方式可能有很多的内容，所以，在该方法内会将get，post等其他5种请求方式提取出来，变成单个的方法，然后我们需要编写servlet时，就可以直接重写doGet或者doPost方法就行了，而不是重写service方法，更加有针对性。所以这里就回到了我们上面编写servlet时的情况，继承httpServlet，而只要重写两个方法，一个doGet，一个doPost，其实就是service方法会调用这两个方法中的一个(看请求方式)。所以也就解答了我们一开始提的问题3。　　\n\n四、几个重点的对象。ServletConfig、ServletContext，request、response\n\n　　　　　　 讲解四大类，ServletConfig对象，ServletContext对象、request对象，response对象\n\n　　　　ServletConfig对象\n\n　　　　　　　　获取途径：getServletConfig(); \n\n　　　　　　　　功能：上面大概提及了一下，能得到四个东西，\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216193829863-177507047.png)\n\n　　　　　　　　　　　　getServletName();  //获取servlet的名称，也就是我们在web.xml中配置的servlet-name\n\n　　　　　　　　　　　　getServletContext(); //获取ServletContext对象，该对象的作用看下面讲解\n\n　　　　　　　　　　　　getInitParameter(String); //获取在servlet中初始化参数的值。这里注意与全局初始化参数的区分。这个获取的只是在该servlet下的初始化参数\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216195140550-371826071.png)\n\n 　　　　　　　　　　　　getInitParameterNames(); //获取在Servlet中所有初始化参数的名字，也就是key值，可以通过key值，来找到各个初始化参数的value值。注意返回的是枚举类型\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091747144-810654839.png)\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091914597-1623014325.png)\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091935300-1981582648.png)\n\n　　　　　　　　　　　注意：在上面我们所分析的源码过程中，我们就知道，其实可以不用先获得ServletConfig，然后在获取其各种参数，可以直接使用其方法，比如上面我们用的ServletConfig().getServletName();可以直接写成getServletName();而不用在先获取ServletConfig();了，原因就是在GenericServlet中，已经帮我们获取了这些数据，我们只需要直接拿就行。\n\n　　　　　　ServletContext对象\n\n　　　　　　　　　　　获取途径：getServletContext(); 、getServletConfig().getServletContext();　　//这两种获取方式的区别就跟上面的解释一样，第一种是直接拿，在GenericServlet中已经帮我们用getServletConfig().getServletContext();拿到了ServletContext。我们只需要直接获取就行了，第二种就相当于我们自己在获取一遍，两种读是一样的。\n\n　　　　　　　　　　　功能：tomcat为每个web项目都创建一个ServletContext实例，tomcat在启动时创建，服务器关闭时销毁，在一个web项目中共享数据，管理web项目资源，为整个web配置公共信息等，通俗点讲，就是一个web项目，就存在一个ServletContext实例，每个Servlet读可以访问到它。\n\n　　　　　　　　　　　　　　1、web项目中共享数据，getAttribute(String name)、setAttribute(String name, Object obj)、removeAttribute(String name)\n\n　　　　　　　　　　　　　　　　　　setAttribute(String name, Object obj) 在web项目范围内存放内容，以便让在web项目中所有的servlet读能访问到\n\n　　　　　　　　　　　　　　　　　　getAttribute(String name) 通过指定名称获得内容\n\n　　　　　　　　　　　　　　　　　　removeAttribute(String name) 通过指定名称移除内容  　\n\n 　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100021019-1747366315.png)\n\n　　　　　　　　　　　　　　　　　　 ![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100049254-1938338032.png)　　\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100106379-1506943167.png)　　\n\n　　　　　　　　　　　　　　2、整个web项目初始化参数 //这个就是全局初始化参数，每个Servlet中都能获取到该初始化值\n\n　　　　　　　　　　　　　　　　　　getInitPatameter(String name)　　//通过指定名称获取初始化值\n\n　　　　　　　　　　　　　　　　　　getInitParameterNames()　　//获得枚举类型\n\n 　　　　　　　　　　　　　　　　　　web.xml 配置 整个web项目的初始化\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101303988-623871756.png)\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101317597-1875411632.png)\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101334441-1632535355.png)\n\n　　　　　　　　　　　　　　3、获取web项目资源\n\n　　　　　　　　　　　　　　　　　　3.1获取web项目下指定资源的路径：getServletContext().getRealPath(\"/WEB-INF/web.xml\")\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217102136347-1305457655.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217102149113-1528997169.png)\n\n　　　　　　　　　　　　　　　　　　3.2获取web项目下指定资源的内容，返回的是字节输入流。InputStream getResourceAsStream(java.lang.String path)\n\n　　　　　　　　　　　　　　　　　　　　前提知识：需要了解流。不知道的可以去看看[IO流总结](http://www.cnblogs.com/whgk/p/5326568.html \"http://www.cnblogs.com/whgk/p/5326568.html\")的文章\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217105752019-1686962725.png)\n\n　　　　　　　　　　　　　　　　　　　　输出内容截图一部分\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217105820394-1482656955.png)\n\n　　　　　　　　　　　　　　　4、getResourcePaths(java.lang.String path)  指定路径下的所有内容。\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110536316-752633624.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110549457-1699480159.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110604254-1174782701.png)\n\n　　　　　　　　　　　　　　　　5还有很多别的方法，暂时用到的就这几个了，以后需要在用的，就查看源码，看API。\n\n　　　　　　request对象\n\n　　　　　　　　　　我们知道，request就是将请求文本封装而成的对象，所以通过request能获得请求文本中的所有内容，请求头、请求体、请求行 。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113102004-1305201880.png)\n\n　　　　　　　　　　　　1、请求行内容的获取。\n\n　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112157910-1493109100.png)　\n\n　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112213488-1676592080.png)　\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112234097-1109437412.png)　\n\n　　　　　　　　　　　　2请求头的获取\n\n　　　　　　　　　　　　　　　　随便百度一个东西，然后查看的请求头，包括以下这些内容，稍作了解。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113256660-1823637829.png)\n\n　　　　　　　　　　　　　　　　String getHeader(java.lang.String name) 获得指定头内容String【】\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113439050-289451177.png)\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113449019-979867352.png)\n\n　　　　　　　　　　　　　　　　long getDateHeader(java.lang.String name) 获得指定头内容Date\n\n　　　　　　　　　　　　　　　　int getIntHeader(java.lang.String name)  获得指定头内容int\n\n　　　　　　　　　　　　　　　　Enumeration getHeaders(java.lang.String name) 获得指定名称所有内容\n\n　　　　　　　　　　　　3请求体的获取 -- 请求参数的获取\n\n　　　　　　　　　　　　　　　分两种，一种get请求，一种post请求\n\n　　　　　　　　　　　　　　　get请求参数：http://localhost:8080/test01/MyServlet?username=jack&password=1234\n\n　　　　　　　　　　　　　　　post请求参数: <form method=\"post\"><input type=\"text\" name=\"username\">\n\n　　　　　　　　　　　　　　　　String request.getParameter(String) 获得指定名称，一个请求参数值。\n\n　　　　　　　　　　　　　　　　String[] request.getParameterValues(String) 获得指定名称，所有请求参数值。例如：checkbox、select等\n\n　　　　　　　　　　　　　　　　Map<String , String[]> request.getParameterMap() 获得所有的请求参数　　\n\n　　　　　　　　　　　　4请求转发\n\n　　　　　　　　　　　　　　　　request.getRequestDispatcher(String path).forward(request,response);　　//path:转发后跳转的页面，这里不管用不用\"/\"开头，都是以web项目根开始，因为这是请求转发，请求转发只局限与在同一个web项目下使用，所以这里一直都是从web项目根下开始的，\n\n　　　　　　　　　　　　　　　　web项目根：\n\n　　　　　　　　　　　　　　　　　　　　开发：G:\\Workspaces\\test01\\WebRoot\\..\n\n　　　　　　　　　　　　　　　　　　　　运行时：D:\\java\\tomcat\\apache-tomcat-7.0.53\\webapps\\test01\\..\n\n　　　　　　　　　　　　　　　　 web站点根：\n\n　　　　　　　　　　　　　　　　　　　　运行时：D:\\java\\tomcat\\apache-tomcat-7.0.53\\webapps\\..\n\n　　　　　　　　　　　　　　　　从这里可以看出，web项目根就是从该web项目名开始，所以我们请求转发时，只需要接着项目名后面需要访问的路径写就行了，\n\n　　　　　　　　　　　　　　　　特点：浏览器中url不会改变，也就是浏览器不知道服务器做了什么，是服务器帮我们跳转页面的，并且在转发后的页面，能够继续使用原先的request，因为是原先的request，所以request域中的属性都可以继续获取到。\n\n　　　　　　response对象\n\n　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217141731800-1190823561.png)\n\n　　　　　　　　常用的一个方法：response.setHeader(java.lang.String name, java.lang.String value) 设置指定的头，一般常用。\n\n　　　　　　　　　　　　　例如：设置每隔3秒就自动刷新一次，\n\n　　　　　　　　　　　　　　response.setHeader(\"Refresh\",3);\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144321504-317554648.png)\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144436769-1330637125.png)![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144447535-1374034061.png)\n\n　　　　　　　　　　　　　　这样可以看到现在时间的秒数，会发现每隔三秒就会自动刷新一次页面。\n\n　　　　　　　　这个最重要的一个就是重定向，其他的一些操作都被封装到response对象中了，重点讲解重定向\n\n　　　　　　　　　　重定向(页面跳转)\n\n　　　　　　　　　　　　方式一：手动方案\n\n　　　　　　　　　　　　　　　　response.setStatus(302);　　//状态码302就代表重定向\n\n　　　　　　　　　　　　　　　　response.setHeader(\"location\",\"http://www.baidu.com\");\n\n　　　　　　　　　　　　方式二：使用封装好的，通过response.sendRedirect(\"http://www.baidu.com\");\n\n　　　　　　　　　　特点：服务器告诉浏览器要跳转的页面，是浏览器主动去跳转的页面，浏览器知道，也浏览器的地址栏中url会变，是浏览器重新发起一个请求到另外一个页面，所以request是重新发起的，跟请求转发不一样。\n\n　　　　　　　　　　　　注意：response.sendRedirect(path);　　//\n\n　　　　　　　　　　　　第一种：response.sendRedirect(\"/test01/MyServlet01\");　　//使用了\"/\"开头，说明是从web站点根开始，所以需要写test01/MyServlet01\n\n　　　　　　　　　　　　第二种：response.sendRedirect(\"MyServlet01\");　　//没有使用\"/\"开头，说明是从web项目根开始，那么就无需写test01了。\n\n　　　　　　　　　　　　重定向没有任何局限，可以重定向web项目内的任何路径，也可以访问别的web项目中的路径，并且这里就用\"/\"区分开来，如果使用了\"/\"开头，就说明我要重新开始定位了，不访问刚才的web项目，自己写项目名，如果没有使用\"/\"开始，那么就知道是访问刚才那个web项目下的servlet，就可以省略项目名了。就是这样来区别。\n\n五、总结\n\n　　　　　　这一章节篇幅较长，不过理清很多知识点\n\n　　　　　　　　　　1、什么是servlet？如果编写servlet？\n\n　　　　　　　　　　2、分析了servlet的部分源码，知道了其中的一些设计巧妙的东西，比如，本来编写servlet是能看到其生命周期的，但是在其设计下，我们只关注doGet和doPost方法，为什么能这样呢？就可以通过源码中得知。\n\n　　　　　　　　　　3、servlet的生命周期，web.xml的配置\n\n　　　　　　　　　　4、servlet中的ServletConfig对象，ServletContext对象，request对象，response对象的详细讲解。包括其中的一些常用的方法。\n\n　　　　　　　　　　5、下一篇讲解一下request、response的中文乱码问题的解决",[[1565266525682,["GJX@GJXAIOU",[[-1,27,""],[1,27,"原文"],[-1,5402," "],[1,5403," "],[-1,9028," "],[1,9029," "],[-1,9058," "],[1,9059," "],[-1,9962," "],[1,9963," "],[-1,10134," "],[1,10135," "],[-1,10460," "],[1,10461," "],[-1,11868," "],[1,11869," "],[-1,11873," "],[1,11874," "],[-1,12006," "],[1,12007," "],[-1,12404," "],[1,12405," "],[-1,13712," "],[1,13713," "],[-1,15303," "],[1,15304," "],[-1,16250," "],[1,16251," "]],[27,27],[29,29]]],[1565266526428,["GJX@GJXAIOU",[[1,29,"地址"]],[29,29],[31,31]]],[1565266531049,["GJX@GJXAIOU",[[-1,32,"https://www.cnblogs.com/whgk/p/6399262.html"]],[32,75],[32,32]]],[1565266536592,["GJX@GJXAIOU",[[-1,27,"原文地址()"]],[31,33],[27,27]]],[1565266550303,["GJX@GJXAIOU",[[1,28,"[原文地址](https://www.cnblogs.com/whgk/p/6399262.html)"]],[28,28],[79,79]]],[1565266554170,["GJX@GJXAIOU",[[-1,84,"这篇文章到上一篇，距离的有点遥远呀，隔了大概有两个月把，中间在家过了个年，哈哈~ 现在重新开始拾起。\n"]],[84,135],[84,84]]],[1565266555904,["GJX@GJXAIOU",[[-1,118,"　　　　　　　--WZY"]],[119,130],[118,118]]],[1565266557256,["GJX@GJXAIOU",[[-1,2,"["]],[3,3],[2,2]]],[1565266558976,["GJX@GJXAIOU",[[-1,23,"！！]"]],[23,26],[23,23]]],[1565266563496,["GJX@GJXAIOU",[[-1,112,"　　"]],[110,110],[108,108]]],[1565266620703,["GJX@GJXAIOU",[[-1,130,"　　　处"]],[133,133],[130,130]]],[1565266622254,["GJX@GJXAIOU",[[1,130,"　　　处"]],[130,130],[133,133]]],[1565266624139,["GJX@GJXAIOU",[[-1,128,"\n"]],[128,128],[127,127]]],[1565266625752,["GJX@GJXAIOU",[[-1,129,"　　　"]],[129,132],[129,129]]],[1565266631360,["GJX@GJXAIOU",[[-1,126,"？"]],[127,127],[126,126]]],[1565266635375,["GJX@GJXAIOU",[[1,126,"含义"]],[126,126],[128,128]]],[1565266635420,["GJX@GJXAIOU",[[1,126," "]],[128,128],[129,129]]],[1565266635703,["GJX@GJXAIOU",[[1,129,"："]],[129,129],[130,130]]],[1565266638489,["GJX@GJXAIOU",[[1,114,"## "]],[114,114],[133,133]]],[1565266643386,["GJX@GJXAIOU",[[-1,119,"什么是s"]],[123,123],[119,119]]],[1565266645492,["GJX@GJXAIOU",[[1,119,"S"]],[119,119],[120,120]]],[1565266654138,["GJX@GJXAIOU",[[1,132,"**"],[1,164,"**"]],[132,164],[132,168]]],[1565266660968,["GJX@GJXAIOU",[[1,183,"**"],[1,189,"**"]],[183,189],[183,193]]],[1565266723529,["GJX@GJXAIOU",[[-1,399,"\"http://www.cnblogs.com/whgk/p/6130882.html\")"]],[399,444],[399,399]]],[1565266724828,["GJX@GJXAIOU",[[-1,344,"["]],[345,345],[344,344]]],[1565266727584,["GJX@GJXAIOU",[[-1,353,"](http://www.cnblogs.com/whgk/p/6130882.html "]],[354,398],[353,353]]],[1565266730874,["GJX@GJXAIOU",[[-1,356,"　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170214192940050-671180063.png)\n"]],[355,467],[355,355]]],[1565266734152,["GJX@GJXAIOU",[[-1,244,"　　　"]],[244,247],[244,244]]],[1565266741332,["GJX@GJXAIOU",[[1,352,"![HTTP过程]($resource/HTTP%E8%BF%87%E7%A8%8B.png)"]],[352,352],[400,400]]],[1565266743704,["GJX@GJXAIOU",[[1,352,"\n"]],[352,352],[353,353]]],[1565266786112,["GJX@GJXAIOU",[[-1,402,"　　　　"]],[402,406],[402,402]]],[1565266792028,["GJX@GJXAIOU",[[1,430,"## "]],[430,430],[452,452]]],[1565266796435,["GJX@GJXAIOU",[[-1,455,"　　　"]],[455,458],[455,455]]],[1565266838752,["GJX@GJXAIOU",[[1,455,"**"],[1,488,"**"]],[455,488],[455,492]]],[1565266845944,["GJX@GJXAIOU",[[1,513,"**"],[1,535,"**"]],[513,535],[513,539]]],[1565266852617,["GJX@GJXAIOU",[[-1,513,"**"],[-1,537,"**"]],[536,558],[513,535]]],[1565266855919,["GJX@GJXAIOU",[[1,513,"**"],[1,554,"**"]],[513,554],[513,558]]],[1565266894096,["GJX@GJXAIOU",[[-1,802,"　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170214204632894-1786729693.png)"]],[802,897],[802,802]]],[1565266900575,["GJX@GJXAIOU",[[1,803,"![Tomcat服务器响应客户请求过程]($resource/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png)"]],[789,789],[945,945]]],[1565266904504,["GJX@GJXAIOU",[[-1,649,"　　　"]],[649,652],[649,649]]],[1565266946810,["GJX@GJXAIOU",[[1,560,"**"],[1,589,"**"]],[560,589],[560,593]]],[1565266967481,["GJX@GJXAIOU",[[-1,442,"s"]],[443,443],[442,442]]],[1565266968638,["GJX@GJXAIOU",[[1,442,"S"]],[442,442],[443,443]]],[1565266968683,["GJX@GJXAIOU",[[1,442," "]],[443,443],[444,444]]],[1565266992640,["GJX@GJXAIOU",[[-1,1151,"t"],[1,1152," T"]],[1151,1157],[1151,1158]]],[1565266993184,["GJX@GJXAIOU",[[-1,1159,"t"],[1,1160," T"]],[1159,1165],[1159,1166]]],[1565266993857,["GJX@GJXAIOU",[[-1,1219,"t"],[1,1220," T"]],[1219,1225],[1219,1226]]],[1565266994595,["GJX@GJXAIOU",[[-1,1452,"t"],[1,1453," T"]],[1452,1458],[1452,1459]]],[1565266995310,["GJX@GJXAIOU",[[-1,1778,"t"],[1,1779," T"]],[1778,1784],[1778,1785]]],[1565266996188,["GJX@GJXAIOU",[[-1,11228,"t"],[1,11229," T"]],[11228,11234],[11228,11235]]],[1565266996607,["GJX@GJXAIOU",[[-1,11265,"t"],[1,11266," T"]],[11265,11271],[11265,11272]]],[1565266997488,["GJX@GJXAIOU",[[-1,16032,"t"],[1,16033," T"]],[16032,16038],[16032,16039]]],[1565267004934,["GJX@GJXAIOU",[[-1,435,"t"],[1,436," T"]],[435,441],[435,442]]],[1565267027245,["GJX@GJXAIOU",[[-1,17856,"s"],[1,17857,"S"]],[17856,17863],[17856,17863]]],[1565267029233,["GJX@GJXAIOU",[[-1,17931,"s"],[1,17932,"S"]],[17931,17938],[17931,17938]]],[1565267029785,["GJX@GJXAIOU",[[-1,17943,"s"],[1,17944,"S"]],[17943,17950],[17943,17950]]],[1565267030709,["GJX@GJXAIOU",[[-1,17968,"s"],[1,17969,"S"]],[17968,17975],[17968,17975]]],[1565267031220,["GJX@GJXAIOU",[[-1,18004,"s"],[1,18005,"S"]],[18004,18011],[18004,18011]]],[1565267031577,["GJX@GJXAIOU",[[-1,18083,"s"],[1,18084,"S"]],[18083,18090],[18083,18090]]],[1565267032038,["GJX@GJXAIOU",[[-1,18120,"s"],[1,18121,"S"]],[18120,18127],[18120,18127]]],[1565267033105,["GJX@GJXAIOU",[[-1,1229,"s"],[1,1230,"S"]],[1229,1236],[1229,1236]]],[1565267033521,["GJX@GJXAIOU",[[-1,1334,"s"],[1,1335,"S"]],[1334,1341],[1334,1341]]],[1565267033858,["GJX@GJXAIOU",[[-1,1397,"s"],[1,1398,"S"]],[1397,1404],[1397,1404]]],[1565267034209,["GJX@GJXAIOU",[[-1,1413,"s"],[1,1414,"S"]],[1413,1420],[1413,1420]]],[1565267034817,["GJX@GJXAIOU",[[-1,1461,"s"],[1,1462,"S"]],[1461,1468],[1461,1468]]],[1565267035321,["GJX@GJXAIOU",[[-1,1507,"s"],[1,1508,"S"]],[1507,1514],[1507,1514]]],[1565267035836,["GJX@GJXAIOU",[[-1,1767,"s"],[1,1768,"S"]],[1767,1774],[1767,1774]]],[1565267036590,["GJX@GJXAIOU",[[-1,1803,"s"],[1,1804,"S"]],[1803,1810],[1803,1810]]],[1565267037108,["GJX@GJXAIOU",[[-1,1988,"s"],[1,1989,"S"]],[1988,1995],[1988,1995]]],[1565267037701,["GJX@GJXAIOU",[[-1,2227,"s"],[1,2228,"S"]],[2227,2234],[2227,2234]]],[1565267038317,["GJX@GJXAIOU",[[-1,2258,"s"],[1,2259,"S"]],[2258,2265],[2258,2265]]],[1565267039312,["GJX@GJXAIOU",[[-1,2288,"s"],[1,2289,"S"]],[2288,2295],[2288,2295]]],[1565267040624,["GJX@GJXAIOU",[[-1,2665,"s"],[1,2666,"S"]],[2665,2672],[2665,2672]]],[1565267041181,["GJX@GJXAIOU",[[-1,2843,"s"],[1,2844,"S"]],[2843,2850],[2843,2850]]],[1565267041759,["GJX@GJXAIOU",[[-1,3038,"s"],[1,3039,"S"]],[3038,3045],[3038,3045]]],[1565267042229,["GJX@GJXAIOU",[[-1,3064,"s"],[1,3065,"S"]],[3064,3071],[3064,3071]]],[1565267042604,["GJX@GJXAIOU",[[-1,3086,"s"],[1,3087,"S"]],[3086,3093],[3086,3093]]],[1565267042924,["GJX@GJXAIOU",[[-1,3120,"s"],[1,3121,"S"]],[3120,3127],[3120,3127]]],[1565267043213,["GJX@GJXAIOU",[[-1,3172,"s"],[1,3173,"S"]],[3172,3179],[3172,3179]]],[1565267043469,["GJX@GJXAIOU",[[-1,3275,"s"],[1,3276,"S"]],[3275,3282],[3275,3282]]],[1565267043681,["GJX@GJXAIOU",[[-1,3307,"s"],[1,3308,"S"]],[3307,3314],[3307,3314]]],[1565267043904,["GJX@GJXAIOU",[[-1,3383,"s"],[1,3384,"S"]],[3383,3390],[3383,3390]]],[1565267044123,["GJX@GJXAIOU",[[-1,3457,"s"],[1,3458,"S"]],[3457,3464],[3457,3464]]],[1565267044593,["GJX@GJXAIOU",[[-1,3557,"s"],[1,3558,"S"]],[3557,3564],[3557,3564]]],[1565267045156,["GJX@GJXAIOU",[[-1,3709,"s"],[1,3710,"S"]],[3709,3716],[3709,3716]]],[1565267045713,["GJX@GJXAIOU",[[-1,3761,"s"],[1,3762,"S"]],[3761,3768],[3761,3768]]],[1565267046273,["GJX@GJXAIOU",[[-1,3965,"s"],[1,3966,"S"]],[3965,3972],[3965,3972]]],[1565267047133,["GJX@GJXAIOU",[[-1,4829,"s"],[1,4830,"S"]],[4829,4836],[4829,4836]]],[1565267047342,["GJX@GJXAIOU",[[-1,4887,"s"],[1,4888,"S"]],[4887,4894],[4887,4894]]],[1565267048204,["GJX@GJXAIOU",[[-1,9449,"s"],[1,9450,"S"]],[9449,9456],[9449,9456]]],[1565267048478,["GJX@GJXAIOU",[[-1,9520,"s"],[1,9521,"S"]],[9520,9527],[9520,9527]]],[1565267049382,["GJX@GJXAIOU",[[-1,9984,"s"],[1,9985,"S"]],[9984,9991],[9984,9991]]],[1565267049625,["GJX@GJXAIOU",[[-1,10012,"s"],[1,10013,"S"]],[10012,10019],[10012,10019]]],[1565267050225,["GJX@GJXAIOU",[[-1,10136,"s"],[1,10137,"S"]],[10136,10143],[10136,10143]]],[1565267050451,["GJX@GJXAIOU",[[-1,10177,"s"],[1,10178,"S"]],[10177,10184],[10177,10184]]],[1565267050905,["GJX@GJXAIOU",[[-1,11587,"s"],[1,11588,"S"]],[11587,11594],[11587,11594]]],[1565267082186,["GJX@GJXAIOU",[[-1,804,"　"]],[793,793],[792,792]]],[1565267082769,["GJX@GJXAIOU",[[-1,791,"\n"]],[792,792],[791,791]]],[1565267091859,["GJX@GJXAIOU",[[-1,890,"AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png)\n　　　　　　"]],[890,952],[890,890]]],[1565267092144,["GJX@GJXAIOU",[[1,890,"\n"]],[890,890],[891,891]]],[1565267095144,["GJX@GJXAIOU",[[1,891,"\n"]],[891,891],[892,892]]],[1565267099035,["GJX@GJXAIOU",[[1,890,"）"]],[890,890],[891,891]]],[1565267101960,["GJX@GJXAIOU",[[-1,890,"）"]],[891,891],[890,890]]],[1565267103217,["GJX@GJXAIOU",[[1,890,")"]],[890,890],[891,891]]],[1565267106735,["GJX@GJXAIOU",[[-1,890,")"]],[891,891],[890,890]]],[1565267107232,["GJX@GJXAIOU",[[1,890,"）"]],[890,890],[891,891]]],[1565267107887,["GJX@GJXAIOU",[[-1,890,"）"]],[891,891],[890,890]]],[1565267108495,["GJX@GJXAIOU",[[-1,891,"\n"]],[892,892],[891,891]]],[1565267109165,["GJX@GJXAIOU",[[-1,890,"\n"]],[891,891],[890,890]]],[1565267110312,["GJX@GJXAIOU",[[1,890,"AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png)\n　　　　　　"]],[890,890],[890,952]]],[1565267115568,["GJX@GJXAIOU",[[-1,948,"　　　　"]],[952,952],[948,948]]],[1565267117208,["GJX@GJXAIOU",[[1,948,"\n　　"]],[948,948],[951,951]]],[1565267121000,["GJX@GJXAIOU",[[-1,1049,"　　　　"]],[1049,1053],[1049,1049]]],[1565267125434,["GJX@GJXAIOU",[[-1,1046,"\n"]],[1046,1046],[1045,1045]]],[1565267155831,["GJX@GJXAIOU",[[-1,1599,"　　　　　　　　　　　　"]],[1599,1611],[1599,1599]]],[1565267161192,["GJX@GJXAIOU",[[-1,1818,"　　　　　　　　　　　　　　　　"]],[1818,1834],[1818,1818]]],[1565267166787,["GJX@GJXAIOU",[[1,1601,"ff"]],[1601,1601],[1603,1603]]],[1565267170402,["GJX@GJXAIOU",[[-1,1601,"ff"]],[1603,1603],[1601,1601]]]],null,"GJX@GJXAIOU"],["ffb7d41c-2ae0-4a1d-865a-49d416243c82",1565267443177,"# Java Web(一) Servlet详解\n[原文地址](https://www.cnblogs.com/whgk/p/6399262.html)\n　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n\n## 一、Servlet 含义：\n　**处理请求和发送响应的过程是由一种叫做Servlet的程序来完成的**，并且Servlet是为了解决**实现动态页面**而衍生的东西。理解这个的前提是了解一些http协议的东西，并且知道B/S模式(浏览器/服务器)。\n\n　B/S:浏览器/服务器。 浏览器通过网址来访问服务器，比如访问百度，在浏览器中输入www.baidu.com，这个时候浏览器就会显示百度的首页，那么这个具体的过程，步骤是怎样的呢？这个就了解一下http请求和响应了\n\n![HTTP过程]($resource/HTTP%E8%BF%87%E7%A8%8B.png)\n\n请求，响应：通过给的链接应该可以知道这两个具体的内容\n\n## 二、 Tomcat和 Servlet的关系\n\n　**Tomcat 是Web应用服务器,是一个Servlet/JSP容器**. Tomcat 作为Servlet容器,**负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户**.而**Servlet是一种运行在支持Java语言的服务器上的组件**. Servlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品.\n\n　从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。但是在上面这个图中，并不知道是如何转变的，只知道浏览器发送过来的请求也就是request，我们响应回去的就用response。忽略了其中的细节，现在就来探究一下。\n　　　　　　　　　　　　\n![Tomcat服务器响应客户请求过程]($resource/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E5%AE%A2%E6%88%B7%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png)\n　　\n　　①：Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。\n　　②：Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给 Tomcat， Tomcat就会将其变成响应文本的格式发送给浏览器\n\n　　　　Java Servlet API 是Servlet容器( Tomcat)和Servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写Servlet时，需要实现Servlet接口，按照其规范进行操作。\n\n三、编写Servlet\n\n　　　　在前面，我们已经知道了Servlet是什么，为什么需要Servlet?（为了实现动态网页，而不是显示静态网页，具体情况可以百度查查）， Tomcat和Servlet的关系？等问题。现在来手动编写一个Servlet。\n\n　　　　3.1、手动编写Servlet。\n\n　　　　　　1、创建一个MyServlet继承HttpServlet，重写doGet和doPost方法，也就是看请求的方式是get还是post，然后用不同的处理方式来处理请求，\n\n![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094438629-1196159083.png)\n\n　　　　　　2、在web.xml中配置MyServlet，为什么需要配置？让浏览器发出的请求知道到达哪个Servlet，也就是让 Tomcat将封装好的request找到对应的Servlet让其使用。\n\n　　　　　　　　　　　　配置四个东西。\n\n![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094000972-1276129522.png)\n\n　　　　　　　　　　　　配置之后，浏览器是如何通过我们配置的信息来找到对应的Servlet的。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094053504-915571176.png)\n\n　　　　　　　　　　　　按照步骤，首先浏览器通过http://localhost:8080/test01/MyServlet来找到web.xml中的url-pattern，这就是第一步，匹配到了url-pattern后，就会找到第二步Servlet的名字MyServlet，知道了名字，就可以通过Servlet-name找到第三步，到了第三步，也就能够知道Servlet的位置了。然后到其中找到对应的处理方式进行处理。\n\n　　　　　　　3、实验，验证上面配置成功。\n\n　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094649550-2096214829.png)　　　\n\n　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094700035-984507451.png)\n\n　　　　3.2、利用向导新建MyServlet\n\n　　　　　　　　这个就相对简单了，web.xml不用我们手动配置，工具直接帮我们自动配置了\n\n　　　　　　　　　　　　1、右击项目，在new选项中有直接新建Servlet的选项\n\n　　　　　　　　　　　　2、配置MyServlet类中的信息\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216095540332-191821755.png)　\n\n　　　　　　　　　　3、配置web.xml中的Servlet信息\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216095633754-1304935718.png)　　　\n\n　　　　　　　　4、查看MyServle01类中的代码和web.xml，其中的配置跟手动的配置是一样的，只是用图形化界面，让我们更方便的创建Servlet而产生的。\n\n　　　　3.3、详解创建Servlet的原理\n\n　　　　　　　　1、Servlet的生命周期是什么？\n\n　　　　　　　　2、为什么创建的Servlet是继承自httpServlet，而不是直接实现Servlet接口？\n\n　　　　　　　　3、Servlet的生命周期中，可以看出，执行的是service方法，为什么我们就只需要写doGet和doPost方法呢？\n\n　　　　　　　　等这一系列的问题，我们都应该知道，而不应该就单纯的知道如何配置和使用Servlet?上面的问题，一一来解答。\n\n　　　　　　　　1、Servlet的生命周期是什么？\n\n　　　　　　　　　　服务器启动时(web.xml中配置load-on-startup=1，默认为0)或者第一次请求该Servlet时，就会初始化一个Servlet对象，也就是会执行初始化方法init(ServletConfig conf)\n\n　　　　　　　　　　该Servlet对象去处理所有客户端请求，在service(ServletRequest req，ServletResponse res)方法中执行\n\n　　　　　　　　　　最后服务器关闭时，才会销毁这个Servlet对象，执行destroy()方法。\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216103737254-1072057229.png)\n\n　　　　　　　　2、为什么创建的Servlet是继承自httpServlet，而不是直接实现Servlet接口？\n\n　　　　　　　　3、Servlet的生命周期中，可以看出，执行的是service方法，为什么我们就只需要写doGet和doPost方法呢？\n\n　　　　　　　　　　查看源码，httpServlet的继承结构。\n\n　　　　　　　　　　　　　httpServlet继承GenericServlet。懂的人立马就应该知道，GenericServlet(通用Servlet)的作用是什么？大概的就是将实现Servlet接口的方法，简化编写Servlet的步骤。具体下面详解\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104143472-1013662984.png)\n\n　　　　　　　　　　　　　GenericServlet的继承结构，实现了Servlet接口和ServletConfig接口，\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104540738-1388356015.png)　　　\n\n　　　　　　　　　　　　　Servlet接口内容\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216142610660-322166979.png)　\n\n　　　　　　　　　　　　　　　　从这里可以看到，Servlet生命周期的三个关键方法，init、service、destroy。还有另外两个方法，一个getServletConfig()方法来获取ServletConfig对象，ServletConfig对象可以获取到Servlet的一些信息，ServletName、ServletContext、InitParameter、InitParameterNames、通过查看ServletConfig这个接口就可以知道\n\n　　　　　　　　　　　　　ServletConfig接口内容\n\n　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216143011050-806963452.png)\n\n　　　　　　　　　　　　　　　　其中ServletContext对象是Servlet上下文对象，功能有很多，获得了ServletContext对象，就能获取大部分我们需要的信息，比如获取Servlet的路径，等方法。\n\n　　　　　　　　　　　　　　　到此，就知道了Servlet接口中的内容和作用，总结起来就是，三个生命周期运行的方法，获取ServletConfig，而通过ServletConfig又可以获取到ServletContext。而GenericServlet实现了Servlet接口后，也就说明我们可以直接继承GenericServlet，就可以使用上面我们所介绍Servlet接口中的那几个方法了，能拿到ServletConfig，也可以拿到ServletContext，不过那样太麻烦，不能直接获取ServletContext，所以GenericServlet除了实现Servlet接口外，还实现了ServletConfig接口，那样，就可以直接获取ServletContext了。\n\n 　　　　　　　　　　　　　GenericServlet类的内容详解\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145502191-411577839.png)\n\n　　　　　　　　　　　　　　　　看上图，用红色框框起来的就是实现Servlet和ServletConfig接口所实现的方法，有9个，这很正常，但是我们可以发现，init方法有两个，一个是带有参数ServletConfig的，一个有无参的方法，为什么这样设计？这里需要知道其中做了什么事情，来看看这两个方法分别做了什么事？\n\n　　　　　　　　　　　　　　　　init(ServletConfig config)\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145829785-244456335.png)　\n\n　　　　　　　　　　　　　　　　init()\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145902488-312998049.png)　\n\n　　　　　　　　　　　　　　　　一个成员变量config\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145934441-854020880.png)　\n\n　　　　　　　　　　　　　　　　getServletConfig()\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216150037300-348044601.png)　\n\n　　　　　　　　　　　　　　　　通过这几个方法一起来讲解，首先看init(ServletConfig config)方法，因为只有init(ServletConfig config)中带有ServletConfig对象，为了方便能够在其他地方也能直接使用ServletConfig对象，而不仅仅局限在init(ServletConfig config)方法中，所以创建一个私有的成员变量config，在init(ServletConfig config)方法中就将其赋值给config，然后通过getServletConfig()方法就能够获取ServletConfig对象了，这个可以理解，但是在init(ServletConfig config)中，158行，还调用了一个init()方法，并且这个init()方法是空的，什么读没有，这是为什么呢？这个原因是为了防止一件事情，当我们需要在init方法中做一点别的事情，我们想到的方法就是继承GenericServlet并且重写了init(ServletConfig config)方法，这样依赖，就破坏了原本在GenericServlet类中init(ServletConfig config)写的代码了，也就是在GenericServlet类中的成员变量config会一直是null，无法得到赋值，因为被重写了，就不会在执行GenericServlet中init(ServletConfig config)方法中的代码。要想赋值，就必须在重写的init(ServletConfig config)方法中调用父类的init(ServletConfig config)方法，也就是super.init(ServletConfig config)，这样一来，就很不方便，怕有时候会忘了写这句代码，所以在GenericServlet类中增加一个init()方法，以后需要在init方法中需要初始化别的数据，只需要重写init()这个方法，而不需要去覆盖init(ServletConfig config)这个方法，这样设计，就好很多，不用在管init(ServletConfig config)这个其中的内容了。也不用出现其他的问题。\n\n　　　　　　　　　　　　　　　　service(ServletRequest req, ServletResponse res)\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216151326800-261692386.png)　\n\n　　　　　　　　　　　　　　　　　　　一个抽象方法，说明在GenericServlet类中并没有实现该内容，那么我们想到的是，在它上面肯定还有一层，也就是还有一个子类继承它，实现该方法，要是让我们自己写的Servlet继承GenericServlet，需要自己写service方法，那岂不是累死，并且我们可以看到，service方法中的参数还是ServletRequest，ServletResponse。并没有跟http相关对象挂钩，所以我们接着往下面看。\n\n　　　　　　　　　　　HttpServlet类详解\n\n　　　　　　　　　　　　　　　继承了GenericServlet类，通过我们上面的推测，这个类主要的功能肯定是实现service方法的各种细节和设计。并且通过类名可以知道，该类就跟http挂钩了。\n\n　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152220082-1786372762.png)\n\n　　　　　　　　　　　　　　　　关注service(HttpServletRequest req, HttpServletResponse resp)方法和service(ServletRequest req, ServletResponse res)方法。\n\n　　　　　　　　　　　　　　　　　　service(ServletRequest req, ServletResponse res)方法\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152409566-1602415910.png)　　\n\n　　　　　　　　　　　　　　　　　　　　该方法中就做一件事情，就是将ServletRequest和ServletResponse这两个对象强转为HttpServletRequest和HttpServletResponse对象。为什么能这样转？\n\n　　　　　　　　　　　　　　　　　　　　　　首先要知道req、res是什么类型，通过打印System.out.println(req)，可以知道，req实际上的类型是org.apache.catalina.connector.RequestFacade　　　　　　　　　　　　　　　　　　　　　　　　　Tomcat中的源码。\n\n　　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216153430191-1401298895.png)　\n\n　　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152630363-1042785925.png)　　　\n\n　　　　　　　　　　　　　　　　　　　　通过图可以得知，req的继承结构：RequestFacade、httpServletRequest、ServletRequest，我们知道本身req是ServletRequest，那么从继承结构上看，它也可以看成HttpServletRequest，也可以看成ServletRequest，所以强转为HttpServletRequest是可以的，如果不明白，我举个例子，ArrayList、List、Object 这个，Object obj = new ArrayList();  List list = new ArrayList();  一个ArrayList对象可以看成List对象， 也可以看成一个Object对象，现在obj是不是可以堪称List对象呢？答案是可以的，因为obj就是ArrayList对象，既然是ArrayList对象，那么就可以看成是List对象。一样的道理，RequestFacade 对应 ArrayList、httpServleRequest对应 List、 ServletRequest 对应 Object。\n\n　　　　　　　　　　　　　　　　　　　　转换为httpServletRequest和HttpServletResponse对象之后，在调用service(HttpServletRequest req, HttpServletResponse resp)方法。\n\n　　　　　　　　　　　　　　　　service(HttpServletRequest req, HttpServletResponse resp)\n\n　　　　　　　　　　　　　　　　　　　　这个方法就是判断浏览器过来的请求方式是哪种，每种的处理方式不一样，我们常用的就是get，post，并且，我们处理的方式可能有很多的内容，所以，在该方法内会将get，post等其他5种请求方式提取出来，变成单个的方法，然后我们需要编写Servlet时，就可以直接重写doGet或者doPost方法就行了，而不是重写service方法，更加有针对性。所以这里就回到了我们上面编写Servlet时的情况，继承httpServlet，而只要重写两个方法，一个doGet，一个doPost，其实就是service方法会调用这两个方法中的一个(看请求方式)。所以也就解答了我们一开始提的问题3。　　\n\n四、几个重点的对象。ServletConfig、ServletContext，request、response\n\n　　　　　　 讲解四大类，ServletConfig对象，ServletContext对象、request对象，response对象\n\n　　　　ServletConfig对象\n\n　　　　　　　　获取途径：getServletConfig(); \n\n　　　　　　　　功能：上面大概提及了一下，能得到四个东西，\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216193829863-177507047.png)\n\n　　　　　　　　　　　　getServletName();  //获取Servlet的名称，也就是我们在web.xml中配置的Servlet-name\n\n　　　　　　　　　　　　getServletContext(); //获取ServletContext对象，该对象的作用看下面讲解\n\n　　　　　　　　　　　　getInitParameter(String); //获取在Servlet中初始化参数的值。这里注意与全局初始化参数的区分。这个获取的只是在该Servlet下的初始化参数\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216195140550-371826071.png)\n\n 　　　　　　　　　　　　getInitParameterNames(); //获取在Servlet中所有初始化参数的名字，也就是key值，可以通过key值，来找到各个初始化参数的value值。注意返回的是枚举类型\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091747144-810654839.png)\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091914597-1623014325.png)\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217091935300-1981582648.png)\n\n　　　　　　　　　　　注意：在上面我们所分析的源码过程中，我们就知道，其实可以不用先获得ServletConfig，然后在获取其各种参数，可以直接使用其方法，比如上面我们用的ServletConfig().getServletName();可以直接写成getServletName();而不用在先获取ServletConfig();了，原因就是在GenericServlet中，已经帮我们获取了这些数据，我们只需要直接拿就行。\n\n　　　　　　ServletContext对象\n\n　　　　　　　　　　　获取途径：getServletContext(); 、getServletConfig().getServletContext();　　//这两种获取方式的区别就跟上面的解释一样，第一种是直接拿，在GenericServlet中已经帮我们用getServletConfig().getServletContext();拿到了ServletContext。我们只需要直接获取就行了，第二种就相当于我们自己在获取一遍，两种读是一样的。\n\n　　　　　　　　　　　功能： Tomcat为每个web项目都创建一个ServletContext实例， Tomcat在启动时创建，服务器关闭时销毁，在一个web项目中共享数据，管理web项目资源，为整个web配置公共信息等，通俗点讲，就是一个web项目，就存在一个ServletContext实例，每个Servlet读可以访问到它。\n\n　　　　　　　　　　　　　　1、web项目中共享数据，getAttribute(String name)、setAttribute(String name, Object obj)、removeAttribute(String name)\n\n　　　　　　　　　　　　　　　　　　setAttribute(String name, Object obj) 在web项目范围内存放内容，以便让在web项目中所有的Servlet读能访问到\n\n　　　　　　　　　　　　　　　　　　getAttribute(String name) 通过指定名称获得内容\n\n　　　　　　　　　　　　　　　　　　removeAttribute(String name) 通过指定名称移除内容  　\n\n 　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100021019-1747366315.png)\n\n　　　　　　　　　　　　　　　　　　 ![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100049254-1938338032.png)　　\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217100106379-1506943167.png)　　\n\n　　　　　　　　　　　　　　2、整个web项目初始化参数 //这个就是全局初始化参数，每个Servlet中都能获取到该初始化值\n\n　　　　　　　　　　　　　　　　　　getInitPatameter(String name)　　//通过指定名称获取初始化值\n\n　　　　　　　　　　　　　　　　　　getInitParameterNames()　　//获得枚举类型\n\n 　　　　　　　　　　　　　　　　　　web.xml 配置 整个web项目的初始化\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101303988-623871756.png)\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101317597-1875411632.png)\n\n　　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217101334441-1632535355.png)\n\n　　　　　　　　　　　　　　3、获取web项目资源\n\n　　　　　　　　　　　　　　　　　　3.1获取web项目下指定资源的路径：getServletContext().getRealPath(\"/WEB-INF/web.xml\")\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217102136347-1305457655.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217102149113-1528997169.png)\n\n　　　　　　　　　　　　　　　　　　3.2获取web项目下指定资源的内容，返回的是字节输入流。InputStream getResourceAsStream(java.lang.String path)\n\n　　　　　　　　　　　　　　　　　　　　前提知识：需要了解流。不知道的可以去看看[IO流总结](http://www.cnblogs.com/whgk/p/5326568.html \"http://www.cnblogs.com/whgk/p/5326568.html\")的文章\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217105752019-1686962725.png)\n\n　　　　　　　　　　　　　　　　　　　　输出内容截图一部分\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217105820394-1482656955.png)\n\n　　　　　　　　　　　　　　　4、getResourcePaths(java.lang.String path)  指定路径下的所有内容。\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110536316-752633624.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110549457-1699480159.png)\n\n　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217110604254-1174782701.png)\n\n　　　　　　　　　　　　　　　　5还有很多别的方法，暂时用到的就这几个了，以后需要在用的，就查看源码，看API。\n\n　　　　　　request对象\n\n　　　　　　　　　　我们知道，request就是将请求文本封装而成的对象，所以通过request能获得请求文本中的所有内容，请求头、请求体、请求行 。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113102004-1305201880.png)\n\n　　　　　　　　　　　　1、请求行内容的获取。\n\n　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112157910-1493109100.png)　\n\n　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112213488-1676592080.png)　\n\n　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217112234097-1109437412.png)　\n\n　　　　　　　　　　　　2请求头的获取\n\n　　　　　　　　　　　　　　　　随便百度一个东西，然后查看的请求头，包括以下这些内容，稍作了解。\n\n　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113256660-1823637829.png)\n\n　　　　　　　　　　　　　　　　String getHeader(java.lang.String name) 获得指定头内容String【】\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113439050-289451177.png)\n\n　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217113449019-979867352.png)\n\n　　　　　　　　　　　　　　　　long getDateHeader(java.lang.String name) 获得指定头内容Date\n\n　　　　　　　　　　　　　　　　int getIntHeader(java.lang.String name)  获得指定头内容int\n\n　　　　　　　　　　　　　　　　Enumeration getHeaders(java.lang.String name) 获得指定名称所有内容\n\n　　　　　　　　　　　　3请求体的获取 -- 请求参数的获取\n\n　　　　　　　　　　　　　　　分两种，一种get请求，一种post请求\n\n　　　　　　　　　　　　　　　get请求参数：http://localhost:8080/test01/MyServlet?username=jack&password=1234\n\n　　　　　　　　　　　　　　　post请求参数: <form method=\"post\"><input type=\"text\" name=\"username\">\n\n　　　　　　　　　　　　　　　　String request.getParameter(String) 获得指定名称，一个请求参数值。\n\n　　　　　　　　　　　　　　　　String[] request.getParameterValues(String) 获得指定名称，所有请求参数值。例如：checkbox、select等\n\n　　　　　　　　　　　　　　　　Map<String , String[]> request.getParameterMap() 获得所有的请求参数　　\n\n　　　　　　　　　　　　4请求转发\n\n　　　　　　　　　　　　　　　　request.getRequestDispatcher(String path).forward(request,response);　　//path:转发后跳转的页面，这里不管用不用\"/\"开头，都是以web项目根开始，因为这是请求转发，请求转发只局限与在同一个web项目下使用，所以这里一直都是从web项目根下开始的，\n\n　　　　　　　　　　　　　　　　web项目根：\n\n　　　　　　　　　　　　　　　　　　　　开发：G:\\Workspaces\\test01\\WebRoot\\..\n\n　　　　　　　　　　　　　　　　　　　　运行时：D:\\java\\ Tomcat\\apache-tomcat-7.0.53\\webapps\\test01\\..\n\n　　　　　　　　　　　　　　　　 web站点根：\n\n　　　　　　　　　　　　　　　　　　　　运行时：D:\\java\\tomcat\\apache-tomcat-7.0.53\\webapps\\..\n\n　　　　　　　　　　　　　　　　从这里可以看出，web项目根就是从该web项目名开始，所以我们请求转发时，只需要接着项目名后面需要访问的路径写就行了，\n\n　　　　　　　　　　　　　　　　特点：浏览器中url不会改变，也就是浏览器不知道服务器做了什么，是服务器帮我们跳转页面的，并且在转发后的页面，能够继续使用原先的request，因为是原先的request，所以request域中的属性都可以继续获取到。\n\n　　　　　　response对象\n\n　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217141731800-1190823561.png)\n\n　　　　　　　　常用的一个方法：response.setHeader(java.lang.String name, java.lang.String value) 设置指定的头，一般常用。\n\n　　　　　　　　　　　　　例如：设置每隔3秒就自动刷新一次，\n\n　　　　　　　　　　　　　　response.setHeader(\"Refresh\",3);\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144321504-317554648.png)\n\n　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144436769-1330637125.png)![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170217144447535-1374034061.png)\n\n　　　　　　　　　　　　　　这样可以看到现在时间的秒数，会发现每隔三秒就会自动刷新一次页面。\n\n　　　　　　　　这个最重要的一个就是重定向，其他的一些操作都被封装到response对象中了，重点讲解重定向\n\n　　　　　　　　　　重定向(页面跳转)\n\n　　　　　　　　　　　　方式一：手动方案\n\n　　　　　　　　　　　　　　　　response.setStatus(302);　　//状态码302就代表重定向\n\n　　　　　　　　　　　　　　　　response.setHeader(\"location\",\"http://www.baidu.com\");\n\n　　　　　　　　　　　　方式二：使用封装好的，通过response.sendRedirect(\"http://www.baidu.com\");\n\n　　　　　　　　　　特点：服务器告诉浏览器要跳转的页面，是浏览器主动去跳转的页面，浏览器知道，也浏览器的地址栏中url会变，是浏览器重新发起一个请求到另外一个页面，所以request是重新发起的，跟请求转发不一样。\n\n　　　　　　　　　　　　注意：response.sendRedirect(path);　　//\n\n　　　　　　　　　　　　第一种：response.sendRedirect(\"/test01/MyServlet01\");　　//使用了\"/\"开头，说明是从web站点根开始，所以需要写test01/MyServlet01\n\n　　　　　　　　　　　　第二种：response.sendRedirect(\"MyServlet01\");　　//没有使用\"/\"开头，说明是从web项目根开始，那么就无需写test01了。\n\n　　　　　　　　　　　　重定向没有任何局限，可以重定向web项目内的任何路径，也可以访问别的web项目中的路径，并且这里就用\"/\"区分开来，如果使用了\"/\"开头，就说明我要重新开始定位了，不访问刚才的web项目，自己写项目名，如果没有使用\"/\"开始，那么就知道是访问刚才那个web项目下的Servlet，就可以省略项目名了。就是这样来区别。\n\n五、总结\n\n　　　　　　这一章节篇幅较长，不过理清很多知识点\n\n　　　　　　　　　　1、什么是Servlet？如果编写Servlet？\n\n　　　　　　　　　　2、分析了Servlet的部分源码，知道了其中的一些设计巧妙的东西，比如，本来编写Servlet是能看到其生命周期的，但是在其设计下，我们只关注doGet和doPost方法，为什么能这样呢？就可以通过源码中得知。\n\n　　　　　　　　　　3、Servlet的生命周期，web.xml的配置\n\n　　　　　　　　　　4、Servlet中的ServletConfig对象，ServletContext对象，request对象，response对象的详细讲解。包括其中的一些常用的方法。\n\n　　　　　　　　　　5、下一篇讲解一下request、response的中文乱码问题的解决",[[1565267404247,["GJX@GJXAIOU",[[-1,1182,"　　"]],[1182,1184],[1182,1182]]],[1565267561097,["GJX@GJXAIOU",[[1,1059,"将"]],[1059,1059],[1060,1060]]],[1565267592001,["GJX@GJXAIOU",[[1,951,"☆"]],[951,951],[952,952]]],[1565267596591,["GJX@GJXAIOU",[[1,951,"===="]],[951,951],[953,953]]],[1565267602524,["GJX@GJXAIOU",[[1,953,"☆"]],[953,953],[954,954]]],[1565267608090,["GJX@GJXAIOU",[[-1,956,"☆"]],[956,957],[956,956]]],[1565267611343,["GJX@GJXAIOU",[[1,954,"☆☆☆☆"]],[954,954],[958,958]]],[1565267617175,["GJX@GJXAIOU",[[1,1057,"==☆☆☆☆☆=="]],[1057,1057],[1066,1066]]],[1565267695667,["GJX@GJXAIOU",[[1,1378,"## "]],[1378,1378],[1392,1392]]],[1565267701321,["GJX@GJXAIOU",[[-1,76,"　　　　"],[1,80,"\n"]],[79,79],[77,77]]],[1565267704865,["GJX@GJXAIOU",[[1,77,"@toc"]],[77,77],[81,81]]],[1565268495199,["GJX@GJXAIOU",[[-1,1395,"　　　　在前面，我们已经知道了Servlet是什么，为什么需要Servlet?（为了实现动态网页，而不是显示静态网页，具体情况可以百度查查）， Tomcat和Servlet的关系？等问题。现在来手动编写一个Servlet。\n\n　　　　"]],[1394,1506],[1395,1395]]],[1565268495960,["GJX@GJXAIOU",[[1,1395,"### "]],[1395,1395],[1415,1415]]],[1565268502108,["GJX@GJXAIOU",[[-1,1399,"3.1、"]],[1403,1403],[1399,1399]]],[1565268502993,["GJX@GJXAIOU",[[1,1399,"()"]],[1399,1399],[1401,1401]]],[1565268504604,["GJX@GJXAIOU",[[1,1400,"yi "]],[1400,1400],[1403,1403]]],[1565268505816,["GJX@GJXAIOU",[[-1,1401,"i "]],[1403,1403],[1401,1401]]],[1565268506966,["GJX@GJXAIOU",[[1,1401,"一"]],[1401,1401],[1402,1402]]],[1565268507010,["GJX@GJXAIOU",[[1,1401," "]],[1402,1402],[1403,1403]]],[1565268509107,["GJX@GJXAIOU",[[-1,1400,"y "]],[1402,1402],[1400,1400]]],[1565268512418,["GJX@GJXAIOU",[[-1,1416,"　　　　　　"]],[1416,1422],[1416,1416]]],[1565269991327,["GJX@GJXAIOU",[[-1,1500,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094438629-1196159083.png)"]],[1501,1594],[1500,1500]]],[1565269993171,["GJX@GJXAIOU",[[1,1500,"```"]],[1500,1500],[1503,1503]]],[1565269993215,["GJX@GJXAIOU",[[1,1503,"language\n```\n"]],[1503,1503],[1503,1511]]],[1565269994611,["GJX@GJXAIOU",[[-1,1503,"language"],[1,1511,"m"]],[1503,1511],[1504,1504]]],[1565269994860,["GJX@GJXAIOU",[[1,1504,"y"]],[1504,1504],[1505,1505]]],[1565269995862,["GJX@GJXAIOU",[[-1,1503,"my"]],[1505,1505],[1503,1503]]],[1565269996580,["GJX@GJXAIOU",[[1,1503,"java"]],[1503,1503],[1507,1507]]],[1565269996831,["GJX@GJXAIOU",[[1,1508,"\n"]],[1507,1507],[1508,1508]]],[1565270000172,["GJX@GJXAIOU",[[1,1508,"public class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // 做get请求的处理\n        System.out.println(\"get\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // 做POST请求的处理\n        doGet(req, resp);\n    }\n}"]],[1508,1508],[1928,1928]]],[1565270289590,["GJX@GJXAIOU",[[-1,1935,"　　　　　　"]],[1935,1941],[1935,1935]]],[1565270323615,["GJX@GJXAIOU",[[-1,2031,"　　　　　　　　　　　　"]],[2031,2043],[2031,2031]]],[1565270324206,["GJX@GJXAIOU",[[-1,2030,"\n"]],[2031,2031],[2030,2030]]],[1565270328656,["GJX@GJXAIOU",[[1,2038,"```"]],[2038,2038],[2041,2041]]],[1565270328702,["GJX@GJXAIOU",[[1,2041,"language\n```\n"]],[2041,2041],[2041,2049]]],[1565270329172,["GJX@GJXAIOU",[[-1,2041,"language"],[1,2049,"j"]],[2041,2049],[2042,2042]]],[1565270329330,["GJX@GJXAIOU",[[1,2042,"a"]],[2042,2042],[2043,2043]]],[1565270330159,["GJX@GJXAIOU",[[-1,2041,"ja"]],[2043,2043],[2041,2041]]],[1565270331289,["GJX@GJXAIOU",[[1,2041,"xml"]],[2041,2041],[2044,2044]]],[1565270331671,["GJX@GJXAIOU",[[1,2045,"\n"]],[2044,2044],[2045,2045]]],[1565270332998,["GJX@GJXAIOU",[[1,2045,"<servlet>\n     <!-- servlet的内部名称 这个名字可以自定义-->\n     <servlet-name>HelloServlet</servlet-name>\n     <!-- servlet程序的class文件 要求是完整的类名，也就是包名.类名 -->\n     <servlet-class>a_firstServlet.HelloServlet</servlet-class>\n </servlet>\n<servlet-mapping>\n     <!-- servlet的名字 【要求和上边的名字必须一模一样】-->\n     <servlet-name>HelloServlet</servlet-name>\n     <!-- servlet的访问名称: http://localhost:8080/mywebs/访问名 -->\n     <url-pattern>/hello</url-pattern>\n </servlet-mapping>"]],[2045,2045],[2489,2489]]],[1565270338033,["GJX@GJXAIOU",[[1,2087,",yiban"]],[2087,2087],[2093,2093]]],[1565270339450,["GJX@GJXAIOU",[[-1,2088,"yiban"]],[2093,2093],[2088,2088]]],[1565270342749,["GJX@GJXAIOU",[[1,2088,"一般取"]],[2088,2088],[2091,2091]]],[1565270344841,["GJX@GJXAIOU",[[-1,2090,"取"]],[2091,2091],[2090,2090]]],[1565270352649,["GJX@GJXAIOU",[[1,2090,"和Servlet类名相同"]],[2090,2090],[2102,2102]]],[1565270357182,["GJX@GJXAIOU",[[-1,2125,"Hello"]],[2125,2130],[2125,2125]]],[1565270358554,["GJX@GJXAIOU",[[1,2125,"My"]],[2125,2125],[2127,2127]]],[1565270375672,["GJX@GJXAIOU",[[1,2196,"也是Servlet位置"]],[2196,2196],[2207,2207]]],[1565270386126,["GJX@GJXAIOU",[[-1,2160,"servlet程序的class文件 "]],[2178,2178],[2160,2160]]],[1565270392839,["GJX@GJXAIOU",[[-1,2160,"要求是完整的"]],[2166,2166],[2160,2160]]],[1565270403356,["GJX@GJXAIOU",[[1,2160,"Servlet全限定"]],[2160,2160],[2170,2170]]],[1565270415663,["GJX@GJXAIOU",[[-1,2217,"a_firstServlet.HelloServlet"]],[2217,2244],[2217,2217]]],[1565270427207,["GJX@GJXAIOU",[[1,2217,"demo.MyServlet"]],[2217,2217],[2231,2231]]],[1565270450922,["GJX@GJXAIOU",[[1,2423,",lil"]],[2423,2423],[2427,2427]]],[1565270452302,["GJX@GJXAIOU",[[-1,2424,"lil"]],[2427,2427],[2424,2424]]],[1565270468098,["GJX@GJXAIOU",[[1,2424,"浏览器通过这个URL找到Servlet"]],[2424,2424],[2443,2443]]],[1565270484277,["GJX@GJXAIOU",[[-1,2466,"hello"],[1,2471,"Myservlet"]],[2466,2471],[2475,2475]]],[1565270534247,["GJX@GJXAIOU",[[-1,2515,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094000972-1276129522.png)\n\n　　　　　　　　　　　　"]],[2514,2609],[2515,2515]]],[1565270653519,["GJX@GJXAIOU",[[-1,2552,"　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216094053504-915571176.png)\n"]],[2551,2661],[2551,2551]]],[1565270662080,["GJX@GJXAIOU",[[1,2551,"![浏览器通过配置信息找到Servlet]($resource/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%89%BE%E5%88%B0Servlet.png)"]],[2551,2551],[2695,2695]]],[1565270673094,["GJX@GJXAIOU",[[-1,2696,"　　　　　　　　　　　　"]],[2696,2708],[2696,2696]]],[1565270677873,["GJX@GJXAIOU",[[1,2696,"j "]],[2696,2696],[2697,2697]]],[1565270678525,["GJX@GJXAIOU",[[1,2697,"ieshi"]],[2697,2697],[2702,2702]]],[1565270679830,["GJX@GJXAIOU",[[-1,2696,"jieshi"]],[2702,2702],[2696,2696]]],[1565270681553,["GJX@GJXAIOU",[[1,2696,"解释："]],[2696,2696],[2699,2699]]],[1565271218934,["GJX@GJXAIOU",[[-1,2899,"　　　　　　　"]],[2899,2906],[2899,2899]]],[1565271223302,["GJX@GJXAIOU",[[-1,2915,"　　　　　　　　　　　　"]],[2915,2927],[2915,2915]]],[1565271224966,["GJX@GJXAIOU",[[-1,3015,"　　　　　　　　　　　"]],[3014,3025],[3014,3014]]],[1565271228416,["GJX@GJXAIOU",[[-1,3110,"　　　　"]],[3110,3114],[3110,3110]]],[1565271235232,["GJX@GJXAIOU",[[-1,3131,"　　　　　　　　"]],[3131,3139],[3131,3131]]],[1565271240174,["GJX@GJXAIOU",[[-1,3170,"　　　　　　　　　　　　"]],[3170,3182],[3170,3170]]],[1565271242137,["GJX@GJXAIOU",[[-1,3201,"　　　　　　　　　　　　"]],[3201,3213],[3201,3201]]],[1565271245566,["GJX@GJXAIOU",[[-1,3332,"　　　　　　　　　　"]],[3332,3342],[3332,3332]]],[1565271256974,["GJX@GJXAIOU",[[-1,3470,"　　　　　　　　"]],[3470,3478],[3470,3470]]],[1565271259264,["GJX@GJXAIOU",[[-1,3546,"　　　　"]],[3546,3550],[3546,3546]]],[1565271270073,["GJX@GJXAIOU",[[-1,3110,"3.2、"]],[3110,3114],[3110,3110]]],[1565271270798,["GJX@GJXAIOU",[[1,3110,"### "]],[3110,3110],[3129,3129]]],[1565271272154,["GJX@GJXAIOU",[[1,3129,"（）"]],[3129,3129],[3131,3131]]],[1565271273294,["GJX@GJXAIOU",[[-1,3129,"（）"]],[3131,3131],[3129,3129]]],[1565271277187,["GJX@GJXAIOU",[[1,3114,"（0 "]],[3114,3114],[3116,3116]]],[1565271278216,["GJX@GJXAIOU",[[-1,3115,"0"]],[3116,3116],[3115,3115]]],[1565271278607,["GJX@GJXAIOU",[[1,3115,"0"]],[3115,3115],[3116,3116]]],[1565271279750,["GJX@GJXAIOU",[[-1,3115,"0"]],[3116,3116],[3115,3115]]],[1565271280079,["GJX@GJXAIOU",[[1,3115,")"]],[3115,3115],[3116,3116]]],[1565271281646,["GJX@GJXAIOU",[[1,3115,"er "]],[3115,3115],[3118,3118]]],[1565271282616,["GJX@GJXAIOU",[[-1,3116,"r "]],[3118,3118],[3116,3116]]],[1565271283811,["GJX@GJXAIOU",[[1,3116,"二"]],[3116,3116],[3117,3117]]],[1565271283856,["GJX@GJXAIOU",[[1,3116," "]],[3117,3117],[3118,3118]]],[1565271285813,["GJX@GJXAIOU",[[-1,3115,"e "]],[3117,3117],[3115,3115]]],[1565271291693,["GJX@GJXAIOU",[[-1,3225,"　　　　　　　　　　　　　　　"]],[3225,3240],[3225,3225]]],[1565271295093,["GJX@GJXAIOU",[[-1,3345,"　　　　　　　　　　　　　　　"]],[3345,3360],[3345,3345]]],[1565271299231,["GJX@GJXAIOU",[[-1,3520,"3.3、"]],[3520,3524],[3520,3520]]],[1565271305890,["GJX@GJXAIOU",[[1,3520,"### （）"]],[3520,3520],[3526,3526]]],[1565271308265,["GJX@GJXAIOU",[[1,3525,"三"]],[3525,3525],[3526,3526]]],[1565271315274,["GJX@GJXAIOU",[[-1,3543,"　　　　　　　　"],[-1,3571,"　　　　　　　　"],[-1,3629,"　　　　　　　　"],[-1,3700,"　　　　　　　　"],[-1,3764,"　　　　　　　　"],[-1,3792,"　　　　　　　　　　"],[-1,3913,"　　　　　　　　　　"],[-1,3999,"　　　　　　　　　　"]],[3551,4048],[3551,4048]]],[1565271329333,["GJX@GJXAIOU",[[-1,3522,"#"]],[3523,3523],[3522,3522]]],[1565271331936,["GJX@GJXAIOU",[[-1,3525,"）"]],[3526,3526],[3525,3525]]],[1565271333454,["GJX@GJXAIOU",[[-1,3523,"（"]],[3524,3524],[3523,3523]]],[1565271335155,["GJX@GJXAIOU",[[1,3524,"、"]],[3524,3524],[3525,3525]]],[1565271342238,["GJX@GJXAIOU",[[1,3730,"### "]],[3730,3730],[3752,3752]]],[1565271357894,["GJX@GJXAIOU",[[1,4092,"### "]],[4100,4100],[4152,4152]]],[1565271360247,["GJX@GJXAIOU",[[1,4154,"### "]],[4162,4162],[4227,4227]]],[1565271363718,["GJX@GJXAIOU",[[-1,4097,"　　　　　　　"]],[4097,4104],[4097,4097]]],[1565271365765,["GJX@GJXAIOU",[[-1,4152,"　　　　　　　"]],[4152,4159],[4152,4152]]],[1565271369759,["GJX@GJXAIOU",[[-1,3734,"1、"]],[3734,3736],[3734,3734]]],[1565271370530,["GJX@GJXAIOU",[[1,3734,"（）"]],[3734,3734],[3736,3736]]],[1565271371947,["GJX@GJXAIOU",[[1,3735,"一"]],[3735,3735],[3736,3736]]],[1565271376013,["GJX@GJXAIOU",[[-1,4097,"　2、"]],[4098,4100],[4097,4097]]],[1565271377221,["GJX@GJXAIOU",[[1,4097,"（）"]],[4097,4097],[4099,4099]]],[1565271378922,["GJX@GJXAIOU",[[1,4098,"二"]],[4098,4098],[4099,4099]]],[1565271381422,["GJX@GJXAIOU",[[-1,4153,"3、"]],[4153,4155],[4153,4153]]],[1565271381994,["GJX@GJXAIOU",[[1,4153,"（）"]],[4153,4153],[4155,4155]]],[1565271384515,["GJX@GJXAIOU",[[1,4154,"三"]],[4154,4154],[4155,4155]]],[1565271386086,["GJX@GJXAIOU",[[-1,4152,"　"]],[4153,4153],[4152,4152]]],[1565271390702,["GJX@GJXAIOU",[[-1,3983,"　　　　　　　　　　　　　　"]],[3983,3997],[3983,3983]]],[1565271397534,["GJX@GJXAIOU",[[-1,3541,"1、Servlet的生命周期是什么？\n\n2、为什么创建的Servlet是继承自httpServlet，而不是直接实现Servlet接口？\n\n3、Servlet的生命周期中，可以看出，执行的是service方法，为什么我们就只需要写doGet和doPost方法呢？\n\n等这一系列的问题，我们都应该知道，而不应该就单纯的知道如何配置和使用Servlet?上面的问题，一一来解答。\n"]],[3540,3728],[3540,3540]]],[1565271398111,["GJX@GJXAIOU",[[-1,3541,"\n"]],[3540,3540],[3539,3539]]],[1565271415416,["GJX@GJXAIOU",[[-1,3752,"\n"]],[3752,3752],[3751,3751]]],[1565271417704,["GJX@GJXAIOU",[[1,3751,"；"]],[3751,3751],[3752,3752]]],[1565271430529,["GJX@GJXAIOU",[[-1,4014,"　　　　　　　　　"]],[4014,4023],[4014,4014]]],[1565271432861,["GJX@GJXAIOU",[[-1,4038,"　　　　　　　　　　　　　"]],[4038,4051],[4038,4038]]],[1565271434814,["GJX@GJXAIOU",[[-1,4153,"　　　　　　　　　　　　　　　　"]],[4153,4169],[4153,4153]]],[1565271436902,["GJX@GJXAIOU",[[-1,4250,"　　　　　　　　　　　　"]],[4250,4262],[4250,4250]]],[1565271439599,["GJX@GJXAIOU",[[-1,4301,"　　　　　　　　　　　　　　　　　"]],[4301,4318],[4301,4301]]],[1565271442200,["GJX@GJXAIOU",[[-1,4400,"　　　　　　　　　　　　　"]],[4400,4413],[4400,4400]]],[1565271444582,["GJX@GJXAIOU",[[-1,4413,"　　　　　　　　　　　　　　　　　"]],[4413,4430],[4413,4413]]],[1565271446895,["GJX@GJXAIOU",[[-1,4509,"　　　　　　　　　　　　　　　　"]],[4509,4525],[4509,4509]]],[1565271448678,["GJX@GJXAIOU",[[-1,4728,"　　　　　　　　　　　　　"]],[4728,4741],[4728,4728]]],[1565271450414,["GJX@GJXAIOU",[[-1,4748,"　　　　　　　　　　　　　　　　"]],[4747,4763],[4747,4747]]],[1565271455089,["GJX@GJXAIOU",[[-1,4843,"　　　　　　　　　　　　　　　　"],[-1,4953,"　　　　　　　　　　　　　　　"],[-1,5295," 　　　　　　　　　　　　　"],[-1,5331,"　　　　　　　　　　　　　　　　　　　　　"],[-1,5447,"　　　　　　　　　　　　　　　　"],[-1,5609,"　　　　　　　　　　　　　　　　"]],[4859,5651],[4859,5651]]],[1565271467773,["GJX@GJXAIOU",[[-1,5672,"　　　　　　　　　　　　　　　　"],[-1,5696,"　　　　　　　　　　　　　　　　　　　　　"],[-1,5813,"　　　　　　　　　　　　　　　　"],[-1,5843,"　　　　　　　　　　　　　　　　　　　　　"],[-1,5960,"　　　　　　　　　　　　　　　　"],[-1,5996,"　　　　　　　　　　　　　　　　　　　　　"],[-1,6113,"　　　　　　　　　　　　　　　　"],[-1,7056,"　　　　　　　　　　　　　　　　"],[-1,7122,"　　　　　　　　　　　　　　　　　　　　　"],[-1,7239,"　　　　　　　　　　　　　　　　　　　"],[-1,7470,"　　　　　　　　　　　"],[-1,7497,"　　　　　　　　　　　　　　　"],[-1,7597,"　　　　　　　　　　　　　　　　　　　　　"],[-1,7714,"　　　　　　　　　　　　　　　　"],[-1,7845,"　　　　　　　　　　　　　　　　　　"],[-1,7915,"　　　　　　　　　　　　　　　　　　　　　　"],[-1,8035,"　　　　　　　　　　　　　　　　　　　　"],[-1,8158,"　　　　　　　　　　　　　　　　　　　　　　"],[-1,8322,"　　　　　　　　　　　　　　　　　　　　　　　"],[-1,8442,"　　　　　　　　　　　　　　　　　　　　　　　"],[-1,8564,"　　　　　　　　　　　　　　　　　　　　"],[-1,9058,"　　　　　　　　　　　　　　　　　　　　"],[-1,9189,"　　　　　　　　　　　　　　　　"],[-1,9264,"　　　　　　　　　　　　　　　　　　　　"],[-1,9636,"　　　　　　 "],[-1,9704,"　　　　"],[-1,9725,"　　　　　　　　"],[-1,9760,"　　　　　　　　"],[-1,9791,"　　　　　　　　　　　　　　"],[-1,9900,"　　　　　　　　　　　　"],[-1,9977,"　　　　　　　　　　　　"],[-1,10044,"　　　　　　　　　　　　"],[-1,10144,"　　　　　　　　　　　　　　　　"],[-1,10255," 　　　　　　　　　　　　"],[-1,10364,"　　　　　　　　　　　　　　　　"],[-1,10475,"　　　　　　　　　　　　　　　　"],[-1,10587,"　　　　　　　　　　　　　　　　"],[-1,10699,"　　　　　　　　　　　"],[-1,10914,"　　　　　　"],[-1,10938,"　　　　　　　　　　　"],[-1,11166,"　　　　　　　　　　　"],[-1,11334,"　　　　　　　　　　　　　　"],[-1,11455,"　　　　　　　　　　　　　　　　　　"],[-1,11552,"　　　　　　　　　　　　　　　　　　"],[-1,11608,"　　　　　　　　　　　　　　　　　　"],[-1,11670," 　　　　　　　　　　　　　　　　　　"],[-1,11785,"　　　　　　　　　　　　　　　　　　 "],[-1,11902,"　　　　　　　　　　　　　　　　　　"],[-1,12018,"　　　　　　　　　　　　　　"],[-1,12083,"　　　　　　　　　　　　　　　　　　"],[-1,12148,"　　　　　　　　　　　　　　　　　　"],[-1,12201," 　　　　　　　　　　　　　　　　　　"],[-1,12244,"　　　　　　　　　　　　　　　　　　　　　　"],[-1,12361,"　　　　　　　　　　　　　　　　　　　　　　"],[-1,12479,"　　　　　　　　　　　　　　　　　　　　　　"],[-1,12597,"　　　　　　　　　　　　　　"],[-1,12624,"　　　　　　　　　　　　　　　　　　"],[-1,12714,"　　　　　　　　　　　　　　　　　　　　"],[-1,12830,"　　　　　　　　　　　　　　　　　　　　"],[-1,12946,"　　　　　　　　　　　　　　　　　　"],[-1,13049,"　　　　　　　　　　　　　　　　　　　　"],[-1,13190,"　　　　　　　　　　　　　　　　　　　　"],[-1,13306,"　　　　　　　　　　　　　　　　　　　　"],[-1,13337,"　　　　　　　　　　　　　　　　　　　　"],[-1,13453,"　　　　　　　　　　　　　　　"],[-1,13524,"　　　　　　　　　　　　　　　　　　　　"],[-1,13639,"　　　　　　　　　　　　　　　　　　　　"],[-1,13755,"　　　　　　　　　　　　　　　　　　　　"],[-1,13871,"　　　　　　　　　　　　　　　　"],[-1,13929,"　　　　　　"],[-1,13946,"　　　　　　　　　　"],[-1,14023,"　　　　　　　　　　　　　　　　"],[-1,14135,"　　　　　　　　　　　　"],[-1,14160,"　　　　　　　　　　　　　"],[-1,14270,"　　　　　　　　　　　　　"],[-1,14380,"　　　　　　　　　　　　　　　"],[-1,14492,"　　　　　　　　　　　　"],[-1,14513,"　　　　　　　　　　　　　　　　"],[-1,14563,"　　　　　　　　　　　　　　　　"],[-1,14675,"　　　　　　　　　　　　　　　　"],[-1,14748,"　　　　　　　　　　　　　　　　　　"],[-1,14861,"　　　　　　　　　　　　　　　　　　"],[-1,14974,"　　　　　　　　　　　　　　　　"],[-1,15045,"　　　　　　　　　　　　　　　　"],[-1,15114,"　　　　　　　　　　　　　　　　"],[-1,15188,"　　　　　　　　　　　　"],[-1,15220,"　　　　　　　　　　　　　　　"],[-1,15257,"　　　　　　　　　　　　　　　"],[-1,15348,"　　　　　　　　　　　　　　　"],[-1,15430,"　　　　　　　　　　　　　　　　"],[-1,15499,"　　　　　　　　　　　　　　　　"],[-1,15595,"　　　　　　　　　　　　　　　　"],[-1,15673,"　　　　　　　　　　　　"],[-1,15692,"　　　　　　　　　　　　　　　　"],[-1,15871,"　　　　　　　　　　　　　　　　"],[-1,15896,"　　　　　　　　　　　　　　　　　　　　"],[-1,15952,"　　　　　　　　　　　　　　　　　　　　"],[-1,16032,"　　　　　　　　　　　　　　　　 "],[-1,16058,"　　　　　　　　　　　　　　　　　　　　"],[-1,16130,"　　　　　　　　　　　　　　　　"],[-1,16207,"　　　　　　　　　　　　　　　　"],[-1,16334,"　　　　　　"],[-1,16352,"　　　　　　　　　　"],[-1,16458,"　　　　　　　　"],[-1,16554,"　　　　　　　　　　　　　"],[-1,16586,"　　　　　　　　　　　　　　"],[-1,16634,"　　　　　　　　　　　　　　"],[-1,16743,"　　　　　　　　　　　　　　"],[-1,16947,"　　　　　　　　　　　　　　"],[-1,16995,"　　　　　　　　"],[-1,17051,"　　　　　　　　　　"],[-1,17072,"　　　　　　　　　　　　"],[-1,17094,"　　　　　　　　　　　　　　　　"],[-1,17152,"　　　　　　　　　　　　　　　　"],[-1,17224,"　　　　　　　　　　　　"],[-1,17297,"　　　　　　　　　　"],[-1,17406,"　　　　　　　　　　　　"],[-1,17455,"　　　　　　　　　　　　"],[-1,17567,"　　　　　　　　　　　　"],[-1,17663,"　　　　　　　　　　　　"],[-1,17841,"　　　　　　"],[-1,17867,"　　　　　　　　　　"],[-1,17904,"　　　　　　　　　　"],[-1,18022,"　　　　　　　　　　"],[-1,18059,"　　　　　　　　　　"],[-1,18154,"　　　　　　　　　　"]],[5685,18199],[5685,18199]]],[1565271515586,["GJX@GJXAIOU",[[1,3675,"，这个生命周期只执行一遍；"]],[3675,3675],[3688,3688]]],[1565271529000,["GJX@GJXAIOU",[[1,3805,"整个生命周期只执行"]],[3805,3805],[3814,3814]]],[1565271530457,["GJX@GJXAIOU",[[1,3814,"一遍；"]],[3814,3814],[3817,3817]]],[1565271666669,["GJX@GJXAIOU",[[-1,4038,"　"]],[4038,4039],[4038,4038]]],[1565271778517,["GJX@GJXAIOU",[[-1,4177,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104143472-1013662984.png)\n"]],[4176,4271],[4176,4176]]],[1565271779029,["GJX@GJXAIOU",[[-1,4177,"\n"]],[4176,4176],[4175,4175]]],[1565271781038,["GJX@GJXAIOU",[[1,4177,"\n"]],[4175,4175],[4176,4176]]],[1565271783202,["GJX@GJXAIOU",[[1,4176,"``"]],[4176,4176],[4178,4178]]],[1565271784528,["GJX@GJXAIOU",[[1,4177,"public abstract class HttpServlet extends GenericServlet"]],[4177,4177],[4233,4233]]],[1565271807533,["GJX@GJXAIOU",[[-1,4288,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216104540738-1388356015.png)　　　\n\n"]],[4287,4386],[4287,4287]]],[1565271808271,["GJX@GJXAIOU",[[1,4287,"``"]],[4287,4287],[4289,4289]]],[1565271809406,["GJX@GJXAIOU",[[1,4288,"public abstract class GenericServlet implements Servlet, ServletConfig, Serializable"]],[4288,4288],[4372,4372]]],[1565271812012,["GJX@GJXAIOU",[[-1,4236,"　"]],[4236,4237],[4236,4236]]],[1565272003406,["GJX@GJXAIOU",[[-1,4719,"\n"]],[4719,4719],[4718,4718]]],[1565272005726,["GJX@GJXAIOU",[[-1,4719,"　"]],[4719,4720],[4719,4719]]],[1565272145287,["GJX@GJXAIOU",[[1,5525,"```"]],[5525,5525],[5528,5528]]],[1565272145329,["GJX@GJXAIOU",[[1,5528,"language\n```\n"]],[5528,5528],[5528,5536]]],[1565272148959,["GJX@GJXAIOU",[[-1,5528,"language"],[1,5536,"j"]],[5528,5536],[5529,5529]]],[1565272149440,["GJX@GJXAIOU",[[1,5529,"ava"]],[5529,5529],[5532,5532]]],[1565272149684,["GJX@GJXAIOU",[[1,5533,"\n"]],[5532,5532],[5533,5533]]],[1565272152627,["GJX@GJXAIOU",[[1,5533,"public void init(ServletConfig config) throws ServletException {\n        this.config = config;\n        this.init();\n    }\n\n    public void init() throws ServletException {\n    }"]],[5533,5533],[5710,5710]]],[1565272156022,["GJX@GJXAIOU",[[-1,5659," public void init() throws ServletException {\n    }"]],[5659,5710],[5659,5659]]],[1565272159174,["GJX@GJXAIOU",[[1,5789,"```"]],[5789,5789],[5792,5792]]],[1565272159215,["GJX@GJXAIOU",[[1,5792,"language\n```\n"]],[5792,5792],[5792,5800]]],[1565272160154,["GJX@GJXAIOU",[[-1,5792,"language"],[1,5800,"j"]],[5792,5800],[5793,5793]]],[1565272160568,["GJX@GJXAIOU",[[1,5793,"ava"]],[5793,5793],[5796,5796]]],[1565272160765,["GJX@GJXAIOU",[[1,5797,"\n"]],[5796,5796],[5797,5797]]],[1565272163851,["GJX@GJXAIOU",[[1,5797," public void init() throws ServletException {\n    }"]],[5797,5797],[5848,5848]]],[1565272166644,["GJX@GJXAIOU",[[-1,5657,"  "]],[5658,5658],[5656,5656]]],[1565272167244,["GJX@GJXAIOU",[[-1,5655,"\n"]],[5656,5656],[5655,5655]]],[1565272167701,["GJX@GJXAIOU",[[-1,5654,"\n"]],[5655,5655],[5654,5654]]],[1565272171204,["GJX@GJXAIOU",[[-1,5604,"  "],[-1,5634,"  "],[-1,5649,"  "]],[5605,5655],[5603,5649]]],[1565272174925,["GJX@GJXAIOU",[[-1,5655,"　　　　　　　　　　　　　　　　　　　　　![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145829785-244456335.png)　\n"]],[5654,5770],[5654,5654]]],[1565272176028,["GJX@GJXAIOU",[[-1,5655,"\n"]],[5655,5655],[5654,5654]]],[1565272178125,["GJX@GJXAIOU",[[-1,5727,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145902488-312998049.png)　\n"]],[5726,5821],[5726,5726]]],[1565272181749,["GJX@GJXAIOU",[[-1,5670," "],[-1,5716,"  "]],[5670,5721],[5670,5719]]],[1565272292654,["GJX@GJXAIOU",[[-1,5739,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216145934441-854020880.png)　\n"]],[5738,5833],[5738,5738]]],[1565272293094,["GJX@GJXAIOU",[[-1,5739,"\n"]],[5738,5738],[5737,5737]]],[1565272294233,["GJX@GJXAIOU",[[1,5739,"\n"]],[5737,5737],[5738,5738]]],[1565272294986,["GJX@GJXAIOU",[[1,5738,"··"]],[5738,5738],[5740,5740]]],[1565272295989,["GJX@GJXAIOU",[[-1,5739,"·"]],[5740,5740],[5739,5739]]],[1565272296680,["GJX@GJXAIOU",[[1,5739,"`"]],[5739,5739],[5740,5740]]],[1565272298269,["GJX@GJXAIOU",[[-1,5738,"·"]],[5739,5739],[5738,5738]]],[1565272299440,["GJX@GJXAIOU",[[1,5739,"`"]],[5738,5738],[5739,5739]]],[1565272300793,["GJX@GJXAIOU",[[1,5739,"private transient ServletConfig config;"]],[5739,5739],[5778,5778]]],[1565272324576,["GJX@GJXAIOU",[[-1,5801,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216150037300-348044601.png)　"]],[5801,5895],[5801,5801]]],[1565272325336,["GJX@GJXAIOU",[[1,5801,"``"]],[5801,5801],[5803,5803]]],[1565272326685,["GJX@GJXAIOU",[[1,5802,"public ServletConfig getServletConfig() {\n    return this.config; }"]],[5802,5802],[5869,5869]]],[1565272332302,["GJX@GJXAIOU",[[-1,5844,"    "]],[5848,5848],[5844,5844]]],[1565272332734,["GJX@GJXAIOU",[[-1,5843,"\n"]],[5844,5844],[5843,5843]]],[1565272408350,["GJX@GJXAIOU",[[-1,6844,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216151326800-261692386.png)　\n"]],[6843,6938],[6843,6843]]],[1565272409455,["GJX@GJXAIOU",[[1,6843,"```"]],[6843,6843],[6846,6846]]],[1565272409497,["GJX@GJXAIOU",[[1,6846,"language\n```\n"]],[6846,6846],[6846,6854]]],[1565272410994,["GJX@GJXAIOU",[[-1,6846,"language"],[1,6854,"j"]],[6846,6854],[6847,6847]]],[1565272411384,["GJX@GJXAIOU",[[1,6847,"ava"]],[6847,6847],[6850,6850]]],[1565272411630,["GJX@GJXAIOU",[[1,6851,"\n"]],[6850,6850],[6851,6851]]],[1565272412842,["GJX@GJXAIOU",[[1,6851,"public abstract void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;"]],[6851,6851],[6960,6960]]],[1565272422560,["GJX@GJXAIOU",[[1,7179,"### "]],[7179,7179],[7197,7197]]],[1565272476639,["GJX@GJXAIOU",[[1,7495,"qizhon"]],[7495,7495],[7501,7501]]],[1565272478093,["GJX@GJXAIOU",[[-1,7495,"qizhon"]],[7501,7501],[7495,7495]]],[1565272479432,["GJX@GJXAIOU",[[1,7495,"其中 "]],[7495,7495],[7497,7497]]],[1565272504566,["GJX@GJXAIOU",[[1,9028,"## "]],[9028,9028],[9086,9086]]],[1565272533694,["GJX@GJXAIOU",[[1,9149,"### （）"]],[9149,9149],[9155,9155]]],[1565272535075,["GJX@GJXAIOU",[[1,9154,"一"]],[9154,9154],[9155,9155]]],[1565272537598,["GJX@GJXAIOU",[[-1,9087,"\n"]],[9087,9087],[9086,9086]]],[1565272562567,["GJX@GJXAIOU",[[-1,9436,"\n"]],[9436,9436],[9435,9435]]],[1565272564205,["GJX@GJXAIOU",[[-1,9381,"\n"]],[9381,9381],[9380,9380]]],[1565272568501,["GJX@GJXAIOU",[[1,9317,"* "],[1,9381,"* "],[1,9435,"* "]],[9317,9478],[9319,9484]]],[1565272625759,["GJX@GJXAIOU",[[1,9624,"- "]],[9624,9624],[9626,9626]]],[1565272820845,["GJX@GJXAIOU",[[-1,7990,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216152630363-1042785925.png)　　　"]],[7990,8087],[7990,7990]]],[1565272821553,["GJX@GJXAIOU",[[1,7990,"··"]],[7990,7990],[7992,7992]]],[1565272822588,["GJX@GJXAIOU",[[-1,7990,"··"]],[7992,7992],[7990,7990]]],[1565272823367,["GJX@GJXAIOU",[[1,7990,"``"]],[7990,7990],[7992,7992]]],[1565272824436,["GJX@GJXAIOU",[[1,7991,"public interface HttpServletRequest extends ServletRequest"]],[7991,7991],[8049,8049]]],[1565273021909,["GJX@GJXAIOU",[[-1,7893,"![](https://images2015.cnblogs.com/blog/874710/201702/874710-20170216153430191-1401298895.png)　\n"]],[7892,7988],[7892,7892]]],[1565273022827,["GJX@GJXAIOU",[[1,7892,"``"]],[7892,7892],[7894,7894]]],[1565273024327,["GJX@GJXAIOU",[[1,7893,"public class RequestFacade implements HttpServletRequest"]],[7893,7893],[7949,7949]]],[1565273028685,["GJX@GJXAIOU",[[-1,7876,"　　　　"]],[7877,7880],[7876,7876]]],[1565273039685,["GJX@GJXAIOU",[[-1,7873,"　　　Tomcat中的源码。"]],[7876,7876],[7873,7873]]],[1565273043448,["GJX@GJXAIOU",[[1,7856,",Tomcat中的源码。"]],[7856,7856],[7868,7868]]],[1565273047302,["GJX@GJXAIOU",[[-1,7865,"源"]],[7866,7866],[7865,7865]]],[1565273058545,["GJX@GJXAIOU",[[-1,7857,"Tomcat中的码。　　　　　　　　　　　　　　　　　"]],[7857,7884],[7857,7857]]],[1565273063616,["GJX@GJXAIOU",[[1,7857,"Tomcatyu"]],[7857,7857],[7865,7865]]],[1565273064133,["GJX@GJXAIOU",[[-1,7863,"yu"]],[7865,7865],[7863,7863]]],[1565273065224,["GJX@GJXAIOU",[[1,7863,"de "]],[7863,7863],[7866,7866]]],[1565273065861,["GJX@GJXAIOU",[[-1,7863,"de "]],[7866,7866],[7863,7863]]],[1565273067108,["GJX@GJXAIOU",[[1,7863,"的"]],[7863,7863],[7864,7864]]],[1565273067148,["GJX@GJXAIOU",[[1,7863," "]],[7864,7864],[7865,7865]]],[1565273069194,["GJX@GJXAIOU",[[1,7865,"源码；"]],[7865,7865],[7868,7868]]]],null,"GJX@GJXAIOU"]]}