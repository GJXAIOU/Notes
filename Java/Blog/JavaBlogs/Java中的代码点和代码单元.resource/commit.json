{"compress":true,"commitItems":[["eec1b121-f09a-41e3-b8f5-8add9ef0a3c1",1565399776160,"# Java中的代码点和代码单元\n\n2009年02月19日 11:34:00 [weizhaozhe](https://me.csdn.net/weizhaozhe) 阅读数 29791 标签： [java](https://so.csdn.net/so/search/s.do?q=java&t=blog)[api](https://so.csdn.net/so/search/s.do?q=api&t=blog)[j2se](https://so.csdn.net/so/search/s.do?q=j2se&t=blog)[string](https://so.csdn.net/so/search/s.do?q=string&t=blog)[平台](https://so.csdn.net/so/search/s.do?q=%E5%B9%B3%E5%8F%B0&t=blog)[character](https://so.csdn.net/so/search/s.do?q=character&t=blog)\n\n这篇文章讲的很细，但是对于初学者也很难理解，在后面的笔记中，我会陈述自己的简单理解。 \n\n**摘要**\n\n    本文介绍 [Java](http://java.chinaitlab.com/) 平台支持增补字符的方式。增补字符是 Unicode 标准中代码点超出 U+FFFF 的字符，因此它们无法在 [Java](http://java.chinaitlab.com/) 编程语言中描述为单个的 16 位实体（例如char数据类型）。这些字符一般极少用，但是，有些会在诸如中文或日文人名中用到，因此，在东亚国家，政府应用程序通常会要求支持这些字符。\n\n    Java 平台目前正在改进，以便支持对增补字符的处理，这种改进对现有的应用程序影响微乎其微。新的低层 API 在需要时能够使用单个的字符运行。不过，大多数文本处理 API 均使用字符序列，例如String类或字符数组。现在，这些均解释为 UTF-16 序列，而且，这些 API 实现已转变为正确地处理增补字符。这些改进已融入 Java 2 平台 5.0 版，标准版 （J2SE）。\n\n    除详细解释这些改进之外，本文同时为应用程序开发人员确定和实现必要的更改提供指导，以支持整个 Unicode 字符集的使用。\n\n   ** 背景**\n\n    Unicode 最初设计是作为一种固定宽度的 16 位字符编码。在 Java 编程语言中，基本数据类型char初衷是通过提供一种简单的、能够包含任何字符的数据类型来充分利用这种设计的优点。不过，现在看来，16 位编码的所有 65，536 个字符并不能完全表示全世界所有正在使用或曾经使用的字符。于是，Unicode 标准已扩展到包含多达 1，112，064 个字符。那些超出原来的 16 位限制的字符被称作增补字符。Unicode 标准 2.0 版是第一个包含启用增补字符设计的版本，但是，直到 3.1 版才收入第一批增补字符集。由于 J2SE 的 5.0 版必须支持 Unicode 标准 4.0 版，因此它必须支持增补字符。\n\n    对增补字符的支持也可能会成为东亚市场的一个普遍商业要求。政府应用程序会需要这些增补字符，以正确表示一些包含罕见中文字符的姓名。出版应用程序可能会需要这些增补字符，以表示所有的古代字符和变体字符。中国政府要求支持 GB18030（一种对整个 Unicode 字符集进行编码的字符编码标准），因此，如果是 Unicode 3.1 版或更新版本，则将包括增补字符。台湾标准 CNS-11643 包含的许多字符在 Unicode 3.1 中列为增补字符。香港政府定义了一种针对粤语的字符集，其中的一些字符是 Unicode 中的增补字符。最后，日本的一些供应商正计划利用增补字符空间中大量的专用空间收入 50，000 多个日文汉字字符变体，以便从其专有系统迁移至基于 Java 平台的解决方案。\n\n    因此，Java 平台不仅需要支持增补字符，而且必须使应用程序能够方便地做到这一点。由于增补字符打破了 Java 编程语言的基础设计构想，而且可能要求对编程模型进行根本性的修改，因此，Java Community Process 召集了一个专家组，以期找到一个适当的解决方案。该小组被称为 JSR-204 专家组，使用Unicode 增补字符支持的 Java 技术规范请求的编号。从技术上来说，该专家组的决定仅适用于 J2SE 平台，但是由于 Java 2 平台企业版 （J2EE） 处于 J2SE 平台的最上层，因此它可以直接受益，我们期望 Java 2 平台袖珍版 （J2ME） 的配置也采用相同的设计方法。\n\n    不过，在了解 JSR-204 专家组确定的解决方案之前，我们需要先理解一些术语。\n\n    **代码点、字符编码方案、UTF-16：这些是指什么？**\n\n    不幸的是，引入增补字符使字符模型变得更加复杂了。在过去，我们可以简单地说“字符”，在一个基于 Unicode 的环境（例如 Java 平台）中，假定字符有 16 位，而现在我们需要更多的术语。我们会尽量介绍得相对简单一些 — 如需了解所有详细的讨论信息，您可以阅读Unicode 标准第 2 章或 Unicode 技术报告 17“字符编码模型”。Unicode 专业人士可略过所有介绍直接参阅本部分中的最后定义。\n\n    字符是抽象的最小文本单位。它没有固定的形状（可能是一个字形），而且没有值。“A”是一个字符，“€”（德国、法国和许多其他欧洲国家通用货币的标志）也是一个字符。\n\n    字符集是字符的集合。例如，汉字字符是中国人最先发明的字符，在中文、日文、韩文和越南文的书写中使用。\n\n    编码字符集是一个字符集，它为每一个字符分配一个唯一数字。Unicode 标准的核心是一个编码字符集，字母“A”的编码为 004116 和字符“€”的编码为20AC16.Unicode 标准始终使用十六进制数字，而且在书写时在前面加上前缀“U+”，所以“A”的编码书写为“U+0041”。\n\n    代码点是指可用于编码字符集的数字。编码字符集定义一个有效的代码点范围，但是并不一定将字符分配给所有这些代码点。有效的 Unicode 代码点范围是 U+0000 至 U+10FFFF.Unicode 4.0 将字符分配给一百多万个代码点中的 96，382 代码点。\n\n    增补字符是代码点在 U+10000 至 U+10FFFF 范围之间的字符，也就是那些使用原始的 Unicode 的 16 位设计无法表示的字符。从 U+0000 至 U+FFFF 之间的字符集有时候被称为基本多语言面 （BMP）。因此，每一个 Unicode 字符要么属于 BMP，要么属于增补字符。\n\n    字符编码方案是从一个或多个编码字符集到一个或多个固定宽度代码单元序列的映射。最常用的代码单元是字节，但是 16 位或 32 位整数也可用于内部处理。UTF-32、UTF-16 和 UTF-8 是 Unicode 标准的编码字符集的字符编码方案。\n\n    UTF-32 即将每一个 Unicode 代码点表示为相同值的 32 位整数。很明显，它是内部处理最方便的表达方式，但是，如果作为一般字符串表达方式，则要消耗更多的内存。\n\n    UTF-16 使用一个或两个未分配的 16 位代码单元的序列对 Unicode 代码点进行编码。值 U+0000 至 U+FFFF 编码为一个相同值的 16 位单元。增补字符编码为两个代码单元，第一个单元来自于高代理范围（U+D800 至 U+DBFF），第二个单元来自于低代理范围（U+DC00 至 U+DFFF）。这在概念上可能看起来类似于多字节编码，但是其中有一个重要区别：值 U+D800 至 U+DFFF 保留用于 UTF-16；没有这些值分配字符作为代码点。这意味着，对于一个字符串中的每个单独的代码单元，软件可以识别是否该代码单元表示某个单单元字符，或者是否该代码单元是某个双单元字符的第一个或第二单元。这相当于某些传统的多字节字符编码来说是一个显著的改进，在传统的多字节字符编码中，字节值 0x41 既可能表示字母“A”，也可能是一个双字节字符的第二个字节。\n\n    UTF-8 使用一至四个字节的序列对编码 Unicode 代码点进行编码。U+0000 至 U+007F 使用一个字节编码，U+0080 至 U+07FF 使用两个字节，U+0800 至 U+FFFF 使用三个字节，而 U+10000 至 U+10FFFF 使用四个字节。UTF-8 设计原理为：字节值 0x00 至 0x7F 始终表示代码点 U+0000 至 U+007F（Basic Latin 字符子集，它对应 ASCII 字符集）。这些字节值永远不会表示其他代码点，这一特性使 UTF-8 可以很方便地在软件中将特殊的含义赋予某些 ASCII 字符。\n\n    下表所示为几个字符不同表达方式的比较：\n\n| \n\nUnicode 代码点\n\n | \n\nU+0041\n\n | \n\nU+00DF\n\n | \n\nU+6771\n\n | \n\nU+10400\n\n |\n| \n\n表示字形\n\n |\n| \n\nUTF-32 代码单元\n\n | \n\n| \n\n00000041\n\n |\n\n | \n\n| \n\n000000DF\n\n |\n\n | \n\n| \n\n00006771\n\n |\n\n | \n\n| \n\n00010400\n\n |\n\n |\n| \n\nUTF-16 代码单元\n\n | \n\n| \n\n0041\n\n |\n\n | \n\n| \n\n00DF\n\n |\n\n | \n\n| \n\n6771\n\n |\n\n | \n\n| \n\nD801\n\n | \n\nDC00\n\n |\n\n |\n| \n\nUTF-8 代码单元\n\n | \n\n| \n\n41\n\n |\n\n | \n\n| \n\nC3\n\n | \n\n9F\n\n |\n\n | \n\n| \n\nE6\n\n | \n\n9D\n\n | \n\nB1\n\n |\n\n | \n\n| \n\nF0\n\n | \n\n90\n\n | \n\n90\n\n | \n\n80\n\n |\n\n |\n\n    另外，本文在许多地方使用术语字符序列或char序列概括 Java 2 平台识别的所有字符序列的容器：char[]， java.lang.CharSequence的实现（例如String类），和java.text.CharacterIterator的实现。\n\n    这么多术语。它们与在 Java 平台中支持增补字符有什么关系呢？\n\n   **Java 平台中增补字符的设计方法**\n\n    JSR-204 专家组必须作出的主要决定是如何在 Java API 中表示增补字符，包括单个字符和所有形式的字符序列。专家组考虑并排除了多种方法：\n\n        重新定义基本类型char，使其具有 32 位，这样也会使所有形式的char序列成为 UTF-32 序列。\n        在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型（例如，char32）。所有形式的 Char 序列均基于 UTF-16.\n        在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型（例如，char32）。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列；其他char序列继续基于 UTF-16.\n        使用int表示增补的代码点。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列；其他char序列继续基于 UTF-16.\n        使用代理char对，表示增补代码点。所有形式的char序列基于 UTF-16.\n        引入一种封装字符的类。String和StringBuffer接受新的 API，并将它们解释为此类字符的序列。\n        使用一个CharSequence实例和一个索引的组合表示代码点。\n\n    在这些方法中，一些在早期就被排除了。例如，重新定义基本类型char，使其具有 32 位，这对于全新的平台可能会非常有吸引力，但是，对于 J2SE 来说，它会与现有的 Java 虚拟机1、序列化和其他接口不兼容，更不用说基于 UTF-32 的字符串要使用两倍于基于 UTF-16 的字符串的内存了。添加一种新类型的char32可能会简单一些，但是仍然会出现虚拟机和序列化方面的问题。而且，语言更改通常需要比 API 更改有更长的提前期，因此，前面两种方法会对增补字符支持带来无法接受的延迟。为了在余下的方法中筛选出最优方案，实现小组使用四种不同的方法，在大量进行低层字符处理的代码（java.util.regex包）中实现了对增补字符支持，并对这四种方法的难易程度和运行表现进行了比较。\n\n    最终，专家组确定了一种分层的方法：\n\n        使用基本类型int在低层 API 中表示代码点，例如Character类的静态方法。\n        将所有形式的char序列均解释为 UTF-16 序列，并促进其在更高层级 API 中的使用。\n        提供 API，以方便在各种char和基于代码点的表示法之间的转换。\n\n    在需要时，此方法既能够提供一种概念简明且高效的单个字符表示法，又能够充分利用通过改进可支持增补字符的现有 API.同时，还能够促进字符序列在单个字符上的应用，这一点一般对于国际化的软件很有好处。\n\n    在这种方法中，一个char表示一个 UTF-16 代码单元，这样对于表示代码点有时并不够用。您会注意到，J2SE 技术规范现在使用术语代码点和 UTF-16 代码单元（表示法是相关的）以及通用术语字符（表示法与该讨论没有关系）。API 通常使用名称codePoint描述表示代码点的类型int的变量，而 UTF-16 代码单元的类型当然为char.我们将在下面两部分中了解到 J2SE 平台的实质变化 — 其中一部分介绍单个代码点的低层 API，另一部分介绍采用字符序列的高层接口。\n\n    **开放的增补字符：基于代码点的 API**\n\n    新增的低层 API 分为两大类：用于各种char和基于代码点的表示法之间转换的方法和用于分析和映射代码点的方法。\n\n    最基本的转换方法是Character.toCodePoint（char high， char low）（用于将两个 UTF-16 代码单元转换为一个代码点）和Character.toChars（int codePoint）（用于将指定的代码点转换为一个或两个 UTF-16 代码单元，然后封装到一个char[]内。不过，由于大多数情况下文本以字符序列的形式出现，因此，另外提供codePointAt和codePointBefore方法，用于将代码点从各种字符序列表示法中提取出来：Character.codePointAt（char[] a， int index）和String.codePointBefore（int index）是两种典型的例子。在将代码点插入字符序列时，大多数情况下均有一些针对StringBuffer和StringBuilder类的appendCodePoint（int codePoint）方法，以及一个用于提取表示代码点的int[]的String构建器。\n\n    几种用于分析代码单元和代码点的方法有助于转换过程：Character 类中的isHighSurrogate和isLowSurrogate方法可以识别用于表示增补字符的char值；charCount（int codePoint）方法可以确定是否需要将某个代码点转换为一个或两个char.但是，大多数基于代码点的方法均能够对所有 Unicode 字符实现基于char的旧方法对 BMP 字符所实现的功能。以下是一些典型例子：\n\n    Character.isLetter（int codePoint）可根据 Unicode 标准识别字母。\n    Character.isJavaIdentifierStart（int codePoint）可根据 Java 语言规范确定代码点是否可以启动标识符。\n    Character.UnicodeBlock.of（int codePoint）可搜索代码点所属的 Unicode 字符子集。\n    Character.toUpperCase（int codePoint）可将给定的代码点转换为其大写等值字符。尽管此方法能够支持增补字符，但是它仍然不能解决根本的问题，即在某些情况下，逐个字符的转换无法正确完成。例如，德文字符“\"？\"”应该转换为“SS”，这需要使用String.toUpperCase方法。\n\n    注意大多数接受代码点的方法并不检查给定的int值是否处于有效的 Unicode 代码点范围之内（如上所述，只有 0x0 至 0x10FFFF 之间的范围是有效的）。在大多数情况下，该值是以确保其有效的方法产生的，在这些低层 API 中反复检查其有效性可能会对系统性能造成负面的影响。在无法确保有效性的情况下，应用程序必须使用Character.isValidCodePoint方法确保代码点有效。大多数方法对于无效的代码点采取的行为没有特别加以指定，不同的实现可能会有所不同。\n\n    API 包含许多简便的方法，这些方法可使用其他低层的 API 实现，但是专家组觉得，这些方法很常用，将它们添加到 J2SE 平台上很有意义。不过，专家组也排除了一些建议的简便方法，这给我们提供了一次展示自己实现此类方法能力的机会。例如，专家组经过讨论，排除了一种针对String类的新构建器（该构建器可以创建一个保持单个代码点的String）。以下是使应用程序使用现有的 API 提供功能的一种简便方法：\n\n| /**\n* 创建仅含有指定代码点的新 String. \n*/ \nString newString（int codePoint） { \n    return new String（Character.toChars（codePoint））；\n}  |\n\n    您会注意到，在这个简单的实现中，toChars方法始终创建一个中间数列，该数列仅使用一次即立即丢弃。如果该方法在您的性能评估中出现，您可能会希望将其优化为针对最为普通的情况，即该代码点为 BMP 字符：\n\n| \n\n/**\n* 创建仅含有指定代码点的新 String.\n* 针对 BMP 字符优化的版本。\n */ \nString newString（int codePoint） { \n    if （Character.charCount（codePoint） == 1） { \n        return String.valueOf（（char） codePoint）；\n    } \n    else { \n        return new String（Character.toChars（codePoint））；\n    }\n} \n\n |\n\n    或者，如果您需要创建许多个这样的 string，则可能希望编写一个重复使用toChars方法所使用的数列的通用版本：\n\n| \n\n/**\n* 创建每一个均含有一个指定\n* 代码点的新 String. \n* 针对 BMP 字符优化的版本。\n */ \nString[] newStrings（int[] codePoints） { \n    String[] result = new String[codePoints.length]；\n    char[] codeUnits = new char[2]；\n    for （int i = 0； i < codePoints.length； i++） {\n         int count = Character.toChars（codePoints[i]， codeUnits， 0）；\n        result[i] = new String（codeUnits， 0， count）；\n    } \n    return result；\n} \n\n |\n\n    不过，最终您可能会发现，您需要的是一个完全不同的解决方案。新的构建器String（int codePoint）实际上建议作为String.valueOf（char）的一个基于代码点的备选方案。在很多情况下，此方法用于消息生成的环境，例如：\n\n| System.out.println（\"Character \" + String.valueOf（char） + \" is invalid.\"）；  |\n\n    新的格式化 API支持增补文字，提供一种更加简单的备选方案：\n\n| System.out.printf（\"Character %c is invalid.%n\"， codePoint）；  |\n\n    使用此高层 API 不仅简捷，而它有很多特殊的优点：它可以避免串联（串联会使消息很难本地化），并将需要移进资源包 （resource bundle） 的字符串数量从两个减少到一个。\n\n**增补字符透视：功能增强**\n\n    在支持使用增补字符的 Java 2 平台中的大部分更改没有反映到新的 API 内。一般预期是，处理字符序列的所有接口将以适合其功能的方式处理增补字符。本部分着重讲述为达到此预期所作一些功能增强。\n\n    **Java 编程语言中的标识符**\n\n    Java 语言规范指出所有 Unicode 字母和数字均可用于标识符。许多增补字符是字母或数字，因此 Java 语言规范已经参照新的基于代码点的方法进行更新，以在标识符内定义合法字符。为使用这些新方法，需要检测标识符的 javac 编译器和其他工具都进行了修订。\n\n   ** 库内的增补字符支持**\n\n    许多 J2SE 库已经过增强，可以通过现有接口支持增补字符。以下是一些例子：\n\n        字符串大小写转换功能已更新，可以处理增补字符，也可以实现 Unicode 标准中规定的特殊大小写规则。\n        java.util.regex包已更新，这样模式字符串和目标字符串均可以包含增补字符并将其作为完整单元处理。\n        现在，在java.text包内进行整理处理时，会将增补字符看作完整单元。\n        java.text.Bidi类已更新，可以处理增补字符和 Unicode 4.0 中新增的其他字符。请注意，Cypriot Syllabary 字符子集内的增补字符具有从右至左的方向性。\n        Java 2D API 内的字体渲染和打印技术已经过增强，可以正确渲染和测量包含增补字符的字符串。\n        Swing 文本组件实现已更新，可以处理包含增补字符的文本。\n\n    **字符转换**\n\n    只有很少的字符编码可以表示增补字符。如果是基于 Unicode 的编码（如 UTF-8 和 UTF-16LE），则旧版的 J2RE 内的字符转换器已经按照正确处理增补字符的方式实现转换。对于 J2RE 5.0，可以表示增补字符的其他编码的转换器已更新：GB18030、x-EUC-TW（现在实现所有 CNS 11643 层面）和 Big5-HKSCS（现在实现 HKSCS-2001）。\n\n    **在源文件内表示增补字符**\n\n    在 Java 编程语言源文件中，如果使用可以直接表示增补字符的字符编码，则使用增补字符最为方便。UTF-8 是最佳的选择。在所使用的字符编码无法直接表示字符的情况下，Java 编程语言提供一种 Unicode 转义符语法。此语法没有经过增强，无法直接表示增补字符。而是使用两个连续的 Unicode 转义符将其表示为 UTF-16 字符表示法中的两个编码单元。例如，字符 U+20000 写作“/uD840/uDC00”。您也许不愿意探究这些转义序列的含义；最好是写入支持所需增补字符的编码，然后使用一种工具（如 native2ascii）将其转换为转义序列。\n\n    遗憾的是，由于其编码问题，属性文件仍局限于 ISO 8859-1（除非您的应用程序使用新的 XML 格式）。这意味着您始终必须对增补字符使用转义序列，而且可能要使用不同的编码进行编写，然后使用诸如 native2ascii 的工具进行转换。\n\n   ** 经修订的 UTF-8**\n\n    Java 平台对经修订的 UTF-8 已经很熟悉，但是，问题是应用程序开发人员在可能包含增补字符的文本和 UTF-8 之间进行转换时需要更加留神。需要特别注意的是，某些 J2SE 接口使用的编码与 UTF-8 相似但与其并不兼容。以前，此编码有时被称为“Java modified UTF-8”（经 Java 修订的 UTF-8）或（错误地）直接称为“UTF-8”。对于 J2SE 5.0，其说明文档正在更新，此编码将统称为“modified UTF-8”（经修订的 UTF-8）。\n\n    经修订的 UTF-8 和标准 UTF-8 之间之所以不兼容，其原因有两点。其一，经修订的 UTF-8 将字符 U+0000 表示为双字节序列 0xC0 0x80，而标准 UTF-8 使用单字节值 0x0.其二，经修订的 UTF-8 通过对其 UTF-16 表示法的两个代理代码单元单独进行编码表示增补字符。每个代理代码单元由三个字节来表示，共有六个字节。而标准 UTF-8 使用单个四字节序列表示整个字符。\n\n    Java 虚拟机及其附带的接口（如 Java 本机接口、多种工具接口或 Java 类文件）在java.io.DataInput和DataOutput接口和类中使用经修订的 UTF-8 实现或使用这些接口和类，并进行序列化。Java 本机接口提供与经修订的 UTF-8 之间进行转换的例程。而标准 UTF-8 由String类、java.io.InputStreamReader和OutputStreamWriter类、java.nio.charset设施 （facility） 以及许多其上层的 API 提供支持。\n\n    由于经修订的 UTF-8 与标准的 UTF-8 不兼容，因此切勿同时使用这两种版本的编码。经修订的 UTF-8 只能与上述的 Java 接口配合使用。在任何其他情况下，尤其对于可能来自非基于 Java 平台的软件的或可能通过其编译的数据流，必须使用标准的 UTF-8.需要使用标准的 UTF-8 时，则不能使用 Java 本机接口例程与经修订的 UTF-8 进行转换。\n\n    **在应用程序内支持增补字符**\n\n    现在，对大多数读者来说最为重要的问题是：必须对应用程序进行哪些更改才能支持增补字符？\n\n    答案取决于在应用程序中进行哪种类型的文本处理和使用哪些 Java 平台 API.对于仅以各种形式char序列（[char[]、java.lang.CharSequence实现、java.text.CharacterIterator实现）处理文本和仅使用接受和退回序列（如char序列）的 Java API 的应用程序，可能根本不需要进行任何更改。Java 平台 API 的实现应该能够处理增补字符。\n\n    对于本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法的应用程序，则需要考虑这些字符的有效值。在很多情况下，往往不要求支持增补字符。例如，如果某应用程序搜索char序列中的 HTML 标记，并逐一检查每个char，它会知道这些标记仅使用 Basic Latin 字符子集中的字符。如果所搜索的文本含有增补字符，则这些字符不会与标记字符混淆，因为 UTF-16 使用代码单元表示增补字符，而代码单元的值不会用于 BMP 字符。\n\n    只有在某应用程序本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法且这些字符可能为增补字符时，才必须更改该应用程序。在提供使用char序列的并行 API 时，最好转而使用此类 API.在其他情况下，有必要使用新的 API 在char和基于代码点的表示法之间进行转换，并调用基于代码点的 API.当然，如果您发现在 J2SE 5.0 中有更新、更方便的 API，使您能够支持增补字符并同时简化代码（如上格式化范例中所述），则没有必要这样做。\n\n    您可能会犹豫，是将所有文本转换为代码点表示法（即int[]）然后在该表示法中处理，还是在大多数情况下仍采用char序列，仅在需要时转换为代码点，两者之间孰优孰劣很难确定。当然，总体来说，Java 平台 API 相对于char序列肯定具有一定的优势，而且采用 Java 平台 API 可以节省内存空间。\n\n    对于需要与 UTF-8 之间进行转换的应用程序，还需要认真考虑是需要标准的 UTF-8 还是经修订的 UTF-8，并针对每种 UTF-8 采用适当的 Java 平台。“经修订的 UTF-8”部分介绍进行正确选择所需的信息。\n\n    **使用增补字符测试应用程序**\n\n    经过前面部分的介绍后，无论您是否需要修订应用程序，测试应用程序是否运行正常始终是一种正确的做法。对于不含有图形用户界面的应用程序，有关“在源文件内表示增补字符”　的信息有助于设计测试用例。以下是有关使用图形用户界面进行测试的补充信息。\n\n    对于文本输入，Java 2 SDK提供用于接受“/Uxxxxxx”格式字符串的代码点输入方法，这里大写的“U”表示转义序列包含六个十六进制数字，因此允许使用增补字符。小写的“u”表示转义序列“/uxxxx”的原始格式。您可以在 J2SDK 目录 demo/jfc/CodePointIM 内找到此输入方法及其说明文档。\n\n    对于字体渲染，您需要至少能够渲染一些增补字符的字体。其中一种此类字体为 James Kass 的Code2001字体，它提供手写体字形（如 Deseret 和 Old Italic）。利用 Java 2D 库中提供新功能，您只需将该字体安装到 J2RE 的 lib/fonts/fallback 目录内即可，然后它可自动添加至在 2D 和 XAWT 渲染时使用的所有逻辑字体 — 无需编辑字体配置文件。\n\n    至此，您就可以确认，您的应用程序能够完全支持增补字符了！\n\n    **结论**\n\n    对增补字符的支持已经引入 Java 平台，大部分应用程序无需更改代码即可处理这些字符。解释单个字符的应用程序可以在Character类和多种CharSequence子类中使用基于代码点的新 API.\n\n    **以下是Unicode和UTF-8之间的转换关系表：**\n\n| U-00000000 - U-0000007F： 0xxxxxxx \nU-00000080 - U-000007FF： 110xxxxx 10xxxxxx \nU-00000800 - U-0000FFFF： 1110xxxx 10xxxxxx 10xxxxxx \nU-00010000 - U-001FFFFF： 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-00200000 - U-03FFFFFF： 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-04000000 - U-7FFFFFFF： 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx  |\n\n    **Byte 数组转整数：**\n\n| \n\nstatic int bytes2int（byte[] b）\n    { \n        int mask=0xff；\n        int temp=0；\n        int res=0；\n        for（int i=0；i<4；i++）{\n             res<<=8；\n             temp=b[i]&mask；\n             res|=temp；\n        } \n    return res；\n}\n\n整数转byte数组：\n\nstatic byte[] int2bytes（int num）\n    { \n        byte[] b=new byte[4]；\n        int mask=0xff；\n        for（int i=0；i<4；i++）{ \n            b[i]=（byte）（num>>>（24-i*8））；\n        } \n    return b；\n}\n\n |",[[1565399741224,["GJX@GJXAIOU",[[-1,38," "],[1,39," "],[-1,83," "],[1,84," "],[-1,93," 标签： "],[1,98," 标签： "],[-1,502," "],[1,503," "],[-1,513,"   "],[1,516,"   "],[-1,521," "],[1,522," "],[-1,557," "],[1,558," "],[-1,611," "],[1,612," "],[-1,647," "],[1,648," "],[-1,738,"   "],[1,741,"   "],[-1,934,"   "],[1,937,"   "],[-1,1001,"   ** "],[1,1007,"   ** "],[-1,1013,"   "],[1,1016,"   "],[-1,1333,"   "],[1,1336,"   "],[-1,1682,"   "],[1,1685,"   "],[-1,1993,"   "],[1,1996,"   "],[-1,2039,"    "],[1,2043,"    "],[-1,2074,"   "],[1,2077,"   "],[-1,2286,"   "],[1,2289,"   "],[-1,2371,"   "],[1,2374,"   "],[-1,2426,"   "],[1,2429,"   "],[1,2494,"m"],[-1,2575,"   "],[1,2578,"   "],[-1,2713,"   "],[1,2716,"   "],[-1,2869,"   "],[1,2872,"   "],[-1,2997,"   "],[1,3000,"   "],[-1,3088,"   "],[1,3091,"   "],[-1,3481,"   "],[1,3484,"   "],[-1,3766,"   "],[1,3769,"   "],[-1,3802," "],[1,3803," "],[-1,3887," "],[1,3888," "],[-1,3999," "],[1,4000," "],[-1,4105," "],[1,4106," "],[-1,4238,"   "],[1,4241,"   "],[-1,4371,"   "],[1,4374,"   "],[-1,4409,"   "],[1,4412,"   "],[-1,4435,"   "],[1,4438,"   "],[-1,4514,"       "],[1,4521,"       "],[-1,4575,"       "],[1,4582,"       "],[-1,4658,"       "],[1,4665,"       "],[-1,4794,"       "],[1,4801,"       "],[-1,4894,"       "],[1,4901,"       "],[-1,4942,"       "],[1,4949,"       "],[-1,5005,"       "],[1,5012,"       "],[-1,5047,"   "],[1,5050,"   "],[-1,5395,"   "],[1,5398,"   "],[-1,5418,"       "],[1,5425,"       "],[-1,5469,"       "],[1,5476,"       "],[-1,5524,"       "],[1,5531,"       "],[-1,5567,"   "],[1,5570,"   "],[-1,5670,"   "],[1,5673,"   "],[-1,5917,"    "],[1,5921,"    "],[-1,5945,"   "],[1,5948,"   "],[-1,6007,"   "],[1,6010,"   "],[-1,6454,"   "],[1,6457,"   "],[-1,6670,"   "],[1,6673,"   "],[-1,6727,"   "],[1,6730,"   "],[-1,6806,"   "],[1,6809,"   "],[-1,6874,"   "],[1,6877,"   "],[-1,7034,"   "],[1,7037,"   "],[-1,7278,"   "],[1,7281,"   "],[-1,7514," \n*/ "],[1,7519," \n*/ "],[-1,7553," \n   "],[1,7558," \n   "],[-1,7609," "],[1,7610," "],[-1,7614,"   "],[1,7617,"   "],[-1,7770," */ "],[1,7774," */ "],[-1,7808," \n   "],[1,7813," \n   "],[-1,7856," \n       "],[1,7865," \n       "],[-1,7907,"    } \n   "],[1,7917,"    } \n   "],[-1,7924," \n       "],[1,7933," \n       "],[-1,7983,"   "],[1,7986,"   "],[-1,7990," "],[1,7991," "],[-1,7997,"   "],[1,8000,"   "],[-1,8099," "],[1,8100," "],[-1,8119," */ "],[1,8123," */ "],[-1,8163," \n   "],[1,8168," \n   "],[-1,8218,"   "],[1,8221,"   "],[-1,8254,"   "],[1,8257,"   "],[-1,8304,"        "],[1,8312,"        "],[-1,8373,"       "],[1,8380,"       "],[-1,8426,"    } \n   "],[1,8436,"    } \n   "],[-1,8453," "],[1,8454," "],[-1,8460,"   "],[1,8463,"   "],[-1,8660," "],[1,8661," "],[-1,8665,"   "],[1,8668,"   "],[-1,8762," "],[1,8763," "],[-1,8767,"   "],[1,8770,"   "],[-1,8880,"   "],[1,8883,"   "],[-1,8983,"    "],[1,8987,"    "],[-1,9007,"   "],[1,9010,"   "],[-1,9144,"   ** "],[1,9150,"   ** "],[-1,9163,"   "],[1,9166,"   "],[-1,9207,"       "],[1,9214,"       "],[-1,9267,"       "],[1,9274,"       "],[-1,9330,"       "],[1,9337,"       "],[-1,9375,"       "],[1,9382,"       "],[-1,9477,"       "],[1,9484,"       "],[-1,9535,"       "],[1,9542,"       "],[-1,9575,"    "],[1,9579,"    "],[-1,9589,"   "],[1,9592,"   "],[-1,9788,"    "],[1,9792,"    "],[-1,9809,"   "],[1,9812,"   "],[-1,10095,"   "],[1,10098,"   "],[-1,10221,"   ** "],[1,10227,"   ** "],[-1,10241,"   "],[1,10244,"   "],[-1,10488,"   "],[1,10491,"   "],[-1,10697,"   "],[1,10700,"   "],[-1,10960,"   "],[1,10963,"   "],[-1,11150,"    "],[1,11154,"    "],[-1,11172,"   "],[1,11175,"   "],[-1,11220,"   "],[1,11223,"   "],[-1,11425,"   "],[1,11428,"   "],[-1,11662,"   "],[1,11665,"   "],[-1,11906,"   "],[1,11909,"   "],[-1,12062,"   "],[1,12065,"   "],[-1,12179,"    "],[1,12183,"    "],[-1,12201,"   "],[1,12204,"   "],[-1,12324,"   "],[1,12327,"   "],[-1,12489,"   "],[1,12492,"   "],[-1,12696,"   "],[1,12699,"   "],[-1,12730,"    "],[1,12734,"    "],[-1,12742,"   "],[1,12745,"   "],[-1,12847,"    "],[1,12851,"    "],[-1,12917," "],[1,12918," "],[-1,12961," "],[1,12962," "],[-1,13014," "],[1,13015," "],[-1,13076," "],[1,13077," "],[-1,13147," "],[1,13148," "],[-1,13227," "],[1,13228," "],[-1,13232,"    "],[1,13236,"    "],[-1,13288,"    { \n       "],[1,13302,"    { \n       "],[-1,13318,"       "],[1,13325,"       "],[-1,13338,"       "],[1,13345,"       "],[-1,13357,"       "],[1,13364,"       "],[-1,13387,"            "],[1,13399,"            "],[-1,13409,"             "],[1,13422,"             "],[-1,13438,"             "],[1,13451,"             "],[-1,13462,"        } \n   "],[1,13476,"        } \n   "],[-1,13537,"    { \n       "],[1,13551,"    { \n       "],[-1,13574,"       "],[1,13581,"       "],[-1,13597,"       "],[1,13604,"       "],[-1,13626," \n           "],[1,13639," \n           "],[-1,13669,"        } \n   "],[1,13683,"        } \n   "]],[2494,2494],[2495,2495]]],[1565399743205,["GJX@GJXAIOU",[[1,38," "],[-1,38," "],[1,83," "],[-1,83," "],[1,93," 标签： "],[-1,93," 标签： "],[1,502," "],[-1,502," "],[1,513,"   "],[-1,513,"   "],[1,521," "],[-1,521," "],[1,557," "],[-1,557," "],[1,611," "],[-1,611," "],[1,647," "],[-1,647," "],[1,738,"   "],[-1,738,"   "],[1,934,"   "],[-1,934,"   "],[1,1001,"   ** "],[-1,1001,"   ** "],[1,1013,"   "],[-1,1013,"   "],[1,1333,"   "],[-1,1333,"   "],[1,1682,"   "],[-1,1682,"   "],[1,1993,"   "],[-1,1993,"   "],[1,2039,"    "],[-1,2039,"    "],[1,2074,"   "],[-1,2074,"   "],[1,2286,"   "],[-1,2286,"   "],[1,2371,"   "],[-1,2371,"   "],[1,2426,"   "],[-1,2426,"   "],[-1,2494,"m"],[1,2576,"   "],[-1,2576,"   "],[1,2714,"   "],[-1,2714,"   "],[1,2870,"   "],[-1,2870,"   "],[1,2998,"   "],[-1,2998,"   "],[1,3089,"   "],[-1,3089,"   "],[1,3482,"   "],[-1,3482,"   "],[1,3767,"   "],[-1,3767,"   "],[1,3803," "],[-1,3803," "],[1,3888," "],[-1,3888," "],[1,4000," "],[-1,4000," "],[1,4106," "],[-1,4106," "],[1,4239,"   "],[-1,4239,"   "],[1,4372,"   "],[-1,4372,"   "],[1,4410,"   "],[-1,4410,"   "],[1,4436,"   "],[-1,4436,"   "],[1,4515,"       "],[-1,4515,"       "],[1,4576,"       "],[-1,4576,"       "],[1,4659,"       "],[-1,4659,"       "],[1,4795,"       "],[-1,4795,"       "],[1,4895,"       "],[-1,4895,"       "],[1,4943,"       "],[-1,4943,"       "],[1,5006,"       "],[-1,5006,"       "],[1,5048,"   "],[-1,5048,"   "],[1,5396,"   "],[-1,5396,"   "],[1,5419,"       "],[-1,5419,"       "],[1,5470,"       "],[-1,5470,"       "],[1,5525,"       "],[-1,5525,"       "],[1,5568,"   "],[-1,5568,"   "],[1,5671,"   "],[-1,5671,"   "],[1,5918,"    "],[-1,5918,"    "],[1,5946,"   "],[-1,5946,"   "],[1,6008,"   "],[-1,6008,"   "],[1,6455,"   "],[-1,6455,"   "],[1,6671,"   "],[-1,6671,"   "],[1,6728,"   "],[-1,6728,"   "],[1,6807,"   "],[-1,6807,"   "],[1,6875,"   "],[-1,6875,"   "],[1,7035,"   "],[-1,7035,"   "],[1,7279,"   "],[-1,7279,"   "],[1,7515," \n*/ "],[-1,7515," \n*/ "],[1,7554," \n   "],[-1,7554," \n   "],[1,7610," "],[-1,7610," "],[1,7615,"   "],[-1,7615,"   "],[1,7771," */ "],[-1,7771," */ "],[1,7809," \n   "],[-1,7809," \n   "],[1,7857," \n       "],[-1,7857," \n       "],[1,7908,"    } \n   "],[-1,7908,"    } \n   "],[1,7925," \n       "],[-1,7925," \n       "],[1,7984,"   "],[-1,7984,"   "],[1,7991," "],[-1,7991," "],[1,7998,"   "],[-1,7998,"   "],[1,8100," "],[-1,8100," "],[1,8120," */ "],[-1,8120," */ "],[1,8164," \n   "],[-1,8164," \n   "],[1,8219,"   "],[-1,8219,"   "],[1,8255,"   "],[-1,8255,"   "],[1,8305,"        "],[-1,8305,"        "],[1,8374,"       "],[-1,8374,"       "],[1,8427,"    } \n   "],[-1,8427,"    } \n   "],[1,8454," "],[-1,8454," "],[1,8461,"   "],[-1,8461,"   "],[1,8661," "],[-1,8661," "],[1,8666,"   "],[-1,8666,"   "],[1,8763," "],[-1,8763," "],[1,8768,"   "],[-1,8768,"   "],[1,8881,"   "],[-1,8881,"   "],[1,8984,"    "],[-1,8984,"    "],[1,9008,"   "],[-1,9008,"   "],[1,9145,"   ** "],[-1,9145,"   ** "],[1,9164,"   "],[-1,9164,"   "],[1,9208,"       "],[-1,9208,"       "],[1,9268,"       "],[-1,9268,"       "],[1,9331,"       "],[-1,9331,"       "],[1,9376,"       "],[-1,9376,"       "],[1,9478,"       "],[-1,9478,"       "],[1,9536,"       "],[-1,9536,"       "],[1,9576,"    "],[-1,9576,"    "],[1,9590,"   "],[-1,9590,"   "],[1,9789,"    "],[-1,9789,"    "],[1,9810,"   "],[-1,9810,"   "],[1,10096,"   "],[-1,10096,"   "],[1,10222,"   ** "],[-1,10222,"   ** "],[1,10242,"   "],[-1,10242,"   "],[1,10489,"   "],[-1,10489,"   "],[1,10698,"   "],[-1,10698,"   "],[1,10961,"   "],[-1,10961,"   "],[1,11151,"    "],[-1,11151,"    "],[1,11173,"   "],[-1,11173,"   "],[1,11221,"   "],[-1,11221,"   "],[1,11426,"   "],[-1,11426,"   "],[1,11663,"   "],[-1,11663,"   "],[1,11907,"   "],[-1,11907,"   "],[1,12063,"   "],[-1,12063,"   "],[1,12180,"    "],[-1,12180,"    "],[1,12202,"   "],[-1,12202,"   "],[1,12325,"   "],[-1,12325,"   "],[1,12490,"   "],[-1,12490,"   "],[1,12697,"   "],[-1,12697,"   "],[1,12731,"    "],[-1,12731,"    "],[1,12743,"   "],[-1,12743,"   "],[1,12848,"    "],[-1,12848,"    "],[1,12918," "],[-1,12918," "],[1,12962," "],[-1,12962," "],[1,13015," "],[-1,13015," "],[1,13077," "],[-1,13077," "],[1,13148," "],[-1,13148," "],[1,13228," "],[-1,13228," "],[1,13233,"    "],[-1,13233,"    "],[1,13289,"    { \n       "],[-1,13289,"    { \n       "],[1,13319,"       "],[-1,13319,"       "],[1,13339,"       "],[-1,13339,"       "],[1,13358,"       "],[-1,13358,"       "],[1,13388,"            "],[-1,13388,"            "],[1,13410,"             "],[-1,13410,"             "],[1,13439,"             "],[-1,13439,"             "],[1,13463,"        } \n   "],[-1,13463,"        } \n   "],[1,13538,"    { \n       "],[-1,13538,"    { \n       "],[1,13575,"       "],[-1,13575,"       "],[1,13598,"       "],[-1,13598,"       "],[1,13627," \n           "],[-1,13627," \n           "],[1,13670,"        } \n   "],[-1,13670,"        } \n   "]],[2495,2495],[2494,2494]]],[1565399746866,["GJX@GJXAIOU",[[-1,2494,"16"]],[2494,2496],[2494,2494]]],[1565399749898,["GJX@GJXAIOU",[[-1,2509,"16"]],[2511,2511],[2509,2509]]],[1565399785409,["GJX@GJXAIOU",[[-1,3787,"| \n\nUnicode 代码点\n\n | \n\nU+0041\n\n | \n\nU+00DF\n\n | \n\nU+6771\n\n | \n\nU+10400\n\n |\n| \n\n表示字形\n\n |\n| \n\nUTF-32 代码单元\n\n | \n\n| \n\n00000041\n\n |\n\n | \n\n| \n\n000000DF\n\n |\n\n | \n\n| \n\n00006771\n\n |\n\n | \n\n| \n\n00010400\n\n |\n\n |\n| \n\nUTF-16 代码单元\n\n | \n\n| \n\n0041\n\n |\n\n | \n\n| \n\n00DF\n\n |\n\n | \n\n| \n\n6771\n\n |\n\n | \n\n| \n\nD801\n\n | \n\nDC00\n\n |\n\n |\n| \n\nUTF-8 代码单元\n\n | \n\n| \n\n41\n\n |\n\n | \n\n| \n\nC3\n\n | \n\n9F\n\n |\n\n | \n\n| \n\nE6\n\n | \n\n9D\n\n | \n\nB1\n\n |\n\n | \n\n| \n\nF0\n\n | \n\n90\n\n | \n\n90\n\n | \n\n80\n\n |\n\n |"]],[3787,4232],[3787,3787]]],[1565400021930,["GJX@GJXAIOU",[[1,3786,"![字符不同表达方式]($resource/%E5%AD%97%E7%AC%A6%E4%B8%8D%E5%90%8C%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F.png)"]],[3786,3786],[3886,3886]]],[1565400038509,["GJX@GJXAIOU",[[-1,38," "],[1,39," "],[-1,83," "],[1,84," "],[-1,93," 标签： "],[1,98," 标签： "],[-1,502," "],[1,503," "],[-1,513,"   "],[1,516,"   "],[-1,521," "],[1,522," "],[-1,557," "],[1,558," "],[-1,611," "],[1,612," "],[-1,647," "],[1,648," "],[-1,738,"   "],[1,741,"   "],[-1,934,"   "],[1,937,"   "],[-1,1001,"   ** "],[1,1007,"   ** "],[-1,1013,"   "],[1,1016,"   "],[-1,1333,"   "],[1,1336,"   "],[-1,1682,"   "],[1,1685,"   "],[-1,1993,"   "],[1,1996,"   "],[-1,2039,"    "],[1,2043,"    "],[-1,2074,"   "],[1,2077,"   "],[-1,2286,"   "],[1,2289,"   "],[-1,2371,"   "],[1,2374,"   "],[-1,2426,"   "],[1,2429,"   "],[-1,2571,"   "],[1,2574,"   "],[-1,2709,"   "],[1,2712,"   "],[-1,2865,"   "],[1,2868,"   "],[-1,2993,"   "],[1,2996,"   "],[-1,3084,"   "],[1,3087,"   "],[-1,3477,"   "],[1,3480,"   "],[-1,3762,"   "],[1,3765,"   "],[-1,3888,"   "],[1,3891,"   "],[-1,4021,"   "],[1,4024,"   "],[-1,4059,"   "],[1,4062,"   "],[-1,4085,"   "],[1,4088,"   "],[-1,4164,"       "],[1,4171,"       "],[-1,4225,"       "],[1,4232,"       "],[-1,4308,"       "],[1,4315,"       "],[-1,4444,"       "],[1,4451,"       "],[-1,4544,"       "],[1,4551,"       "],[-1,4592,"       "],[1,4599,"       "],[-1,4655,"       "],[1,4662,"       "],[-1,4697,"   "],[1,4700,"   "],[-1,5045,"   "],[1,5048,"   "],[-1,5068,"       "],[1,5075,"       "],[-1,5119,"       "],[1,5126,"       "],[-1,5174,"       "],[1,5181,"       "],[-1,5217,"   "],[1,5220,"   "],[-1,5320,"   "],[1,5323,"   "],[-1,5567,"    "],[1,5571,"    "],[-1,5595,"   "],[1,5598,"   "],[-1,5657,"   "],[1,5660,"   "],[-1,6104,"   "],[1,6107,"   "],[-1,6320,"   "],[1,6323,"   "],[-1,6377,"   "],[1,6380,"   "],[-1,6456,"   "],[1,6459,"   "],[-1,6524,"   "],[1,6527,"   "],[-1,6684,"   "],[1,6687,"   "],[-1,6928,"   "],[1,6931,"   "],[1,7135,"`"],[-1,7164," \n*/ "],[1,7169," \n*/ "],[-1,7203," \n   "],[1,7208," \n   "],[-1,7259," "],[1,7260," "],[-1,7264,"   "],[1,7267,"   "],[-1,7420," */ "],[1,7424," */ "],[-1,7458," \n   "],[1,7463," \n   "],[-1,7506," \n       "],[1,7515," \n       "],[-1,7557,"    } \n   "],[1,7567,"    } \n   "],[-1,7574," \n       "],[1,7583," \n       "],[-1,7633,"   "],[1,7636,"   "],[-1,7640," "],[1,7641," "],[-1,7647,"   "],[1,7650,"   "],[-1,7749," "],[1,7750," "],[-1,7769," */ "],[1,7773," */ "],[-1,7813," \n   "],[1,7818," \n   "],[-1,7868,"   "],[1,7871,"   "],[-1,7904,"   "],[1,7907,"   "],[-1,7954,"        "],[1,7962,"        "],[-1,8023,"       "],[1,8030,"       "],[-1,8076,"    } \n   "],[1,8086,"    } \n   "],[-1,8103," "],[1,8104," "],[-1,8110,"   "],[1,8113,"   "],[-1,8310," "],[1,8311," "],[-1,8315,"   "],[1,8318,"   "],[-1,8412," "],[1,8413," "],[-1,8417,"   "],[1,8420,"   "],[-1,8530,"   "],[1,8533,"   "],[-1,8633,"    "],[1,8637,"    "],[-1,8657,"   "],[1,8660,"   "],[-1,8794,"   ** "],[1,8800,"   ** "],[-1,8813,"   "],[1,8816,"   "],[-1,8857,"       "],[1,8864,"       "],[-1,8917,"       "],[1,8924,"       "],[-1,8980,"       "],[1,8987,"       "],[-1,9025,"       "],[1,9032,"       "],[-1,9127,"       "],[1,9134,"       "],[-1,9185,"       "],[1,9192,"       "],[-1,9225,"    "],[1,9229,"    "],[-1,9239,"   "],[1,9242,"   "],[-1,9438,"    "],[1,9442,"    "],[-1,9459,"   "],[1,9462,"   "],[-1,9745,"   "],[1,9748,"   "],[-1,9871,"   ** "],[1,9877,"   ** "],[-1,9891,"   "],[1,9894,"   "],[-1,10138,"   "],[1,10141,"   "],[-1,10347,"   "],[1,10350,"   "],[-1,10610,"   "],[1,10613,"   "],[-1,10800,"    "],[1,10804,"    "],[-1,10822,"   "],[1,10825,"   "],[-1,10870,"   "],[1,10873,"   "],[-1,11075,"   "],[1,11078,"   "],[-1,11312,"   "],[1,11315,"   "],[-1,11556,"   "],[1,11559,"   "],[-1,11712,"   "],[1,11715,"   "],[-1,11829,"    "],[1,11833,"    "],[-1,11851,"   "],[1,11854,"   "],[-1,11974,"   "],[1,11977,"   "],[-1,12139,"   "],[1,12142,"   "],[-1,12346,"   "],[1,12349,"   "],[-1,12380,"    "],[1,12384,"    "],[-1,12392,"   "],[1,12395,"   "],[-1,12497,"    "],[1,12501,"    "],[-1,12567," "],[1,12568," "],[-1,12611," "],[1,12612," "],[-1,12664," "],[1,12665," "],[-1,12726," "],[1,12727," "],[-1,12797," "],[1,12798," "],[-1,12877," "],[1,12878," "],[-1,12882,"    "],[1,12886,"    "],[-1,12938,"    { \n       "],[1,12952,"    { \n       "],[-1,12968,"       "],[1,12975,"       "],[-1,12988,"       "],[1,12995,"       "],[-1,13007,"       "],[1,13014,"       "],[-1,13037,"            "],[1,13049,"            "],[-1,13059,"             "],[1,13072,"             "],[-1,13088,"             "],[1,13101,"             "],[-1,13112,"        } \n   "],[1,13126,"        } \n   "],[-1,13187,"    { \n       "],[1,13201,"    { \n       "],[-1,13224,"       "],[1,13231,"       "],[-1,13247,"       "],[1,13254,"       "],[-1,13276," \n           "],[1,13289," \n           "],[-1,13319,"        } \n   "],[1,13333,"        } \n   "]],[7135,7135],[7136,7136]]],[1565400038674,["GJX@GJXAIOU",[[1,7136,"`"]],[7136,7136],[7137,7137]]],[1565400045307,["GJX@GJXAIOU",[[-1,7136,"`"]],[7137,7137],[7136,7136]]],[1565400049144,["GJX@GJXAIOU",[[1,38," "],[-1,38," "],[1,83," "],[-1,83," "],[1,93," 标签： "],[-1,93," 标签： "],[1,502," "],[-1,502," "],[1,513,"   "],[-1,513,"   "],[1,521," "],[-1,521," "],[1,557," "],[-1,557," "],[1,611," "],[-1,611," "],[1,647," "],[-1,647," "],[1,738,"   "],[-1,738,"   "],[1,934,"   "],[-1,934,"   "],[1,1001,"   ** "],[-1,1001,"   ** "],[1,1013,"   "],[-1,1013,"   "],[1,1333,"   "],[-1,1333,"   "],[1,1682,"   "],[-1,1682,"   "],[1,1993,"   "],[-1,1993,"   "],[1,2039,"    "],[-1,2039,"    "],[1,2074,"   "],[-1,2074,"   "],[1,2286,"   "],[-1,2286,"   "],[1,2371,"   "],[-1,2371,"   "],[1,2426,"   "],[-1,2426,"   "],[1,2571,"   "],[-1,2571,"   "],[1,2709,"   "],[-1,2709,"   "],[1,2865,"   "],[-1,2865,"   "],[1,2993,"   "],[-1,2993,"   "],[1,3084,"   "],[-1,3084,"   "],[1,3477,"   "],[-1,3477,"   "],[1,3762,"   "],[-1,3762,"   "],[1,3888,"   "],[-1,3888,"   "],[1,4021,"   "],[-1,4021,"   "],[1,4059,"   "],[-1,4059,"   "],[1,4085,"   "],[-1,4085,"   "],[1,4164,"       "],[-1,4164,"       "],[1,4225,"       "],[-1,4225,"       "],[1,4308,"       "],[-1,4308,"       "],[1,4444,"       "],[-1,4444,"       "],[1,4544,"       "],[-1,4544,"       "],[1,4592,"       "],[-1,4592,"       "],[1,4655,"       "],[-1,4655,"       "],[1,4697,"   "],[-1,4697,"   "],[1,5045,"   "],[-1,5045,"   "],[1,5068,"       "],[-1,5068,"       "],[1,5119,"       "],[-1,5119,"       "],[1,5174,"       "],[-1,5174,"       "],[1,5217,"   "],[-1,5217,"   "],[1,5320,"   "],[-1,5320,"   "],[1,5567,"    "],[-1,5567,"    "],[1,5595,"   "],[-1,5595,"   "],[1,5657,"   "],[-1,5657,"   "],[1,6104,"   "],[-1,6104,"   "],[1,6320,"   "],[-1,6320,"   "],[1,6377,"   "],[-1,6377,"   "],[1,6456,"   "],[-1,6456,"   "],[1,6524,"   "],[-1,6524,"   "],[1,6684,"   "],[-1,6684,"   "],[1,6928,"   "],[-1,6928,"   "],[-1,7135,"`"],[1,7165," \n*/ "],[-1,7165," \n*/ "],[1,7204," \n   "],[-1,7204," \n   "],[1,7260," "],[-1,7260," "],[1,7265,"   "],[-1,7265,"   "],[1,7421," */ "],[-1,7421," */ "],[1,7459," \n   "],[-1,7459," \n   "],[1,7507," \n       "],[-1,7507," \n       "],[1,7558,"    } \n   "],[-1,7558,"    } \n   "],[1,7575," \n       "],[-1,7575," \n       "],[1,7634,"   "],[-1,7634,"   "],[1,7641," "],[-1,7641," "],[1,7648,"   "],[-1,7648,"   "],[1,7750," "],[-1,7750," "],[1,7770," */ "],[-1,7770," */ "],[1,7814," \n   "],[-1,7814," \n   "],[1,7869,"   "],[-1,7869,"   "],[1,7905,"   "],[-1,7905,"   "],[1,7955,"        "],[-1,7955,"        "],[1,8024,"       "],[-1,8024,"       "],[1,8077,"    } \n   "],[-1,8077,"    } \n   "],[1,8104," "],[-1,8104," "],[1,8111,"   "],[-1,8111,"   "],[1,8311," "],[-1,8311," "],[1,8316,"   "],[-1,8316,"   "],[1,8413," "],[-1,8413," "],[1,8418,"   "],[-1,8418,"   "],[1,8531,"   "],[-1,8531,"   "],[1,8634,"    "],[-1,8634,"    "],[1,8658,"   "],[-1,8658,"   "],[1,8795,"   ** "],[-1,8795,"   ** "],[1,8814,"   "],[-1,8814,"   "],[1,8858,"       "],[-1,8858,"       "],[1,8918,"       "],[-1,8918,"       "],[1,8981,"       "],[-1,8981,"       "],[1,9026,"       "],[-1,9026,"       "],[1,9128,"       "],[-1,9128,"       "],[1,9186,"       "],[-1,9186,"       "],[1,9226,"    "],[-1,9226,"    "],[1,9240,"   "],[-1,9240,"   "],[1,9439,"    "],[-1,9439,"    "],[1,9460,"   "],[-1,9460,"   "],[1,9746,"   "],[-1,9746,"   "],[1,9872,"   ** "],[-1,9872,"   ** "],[1,9892,"   "],[-1,9892,"   "],[1,10139,"   "],[-1,10139,"   "],[1,10348,"   "],[-1,10348,"   "],[1,10611,"   "],[-1,10611,"   "],[1,10801,"    "],[-1,10801,"    "],[1,10823,"   "],[-1,10823,"   "],[1,10871,"   "],[-1,10871,"   "],[1,11076,"   "],[-1,11076,"   "],[1,11313,"   "],[-1,11313,"   "],[1,11557,"   "],[-1,11557,"   "],[1,11713,"   "],[-1,11713,"   "],[1,11830,"    "],[-1,11830,"    "],[1,11852,"   "],[-1,11852,"   "],[1,11975,"   "],[-1,11975,"   "],[1,12140,"   "],[-1,12140,"   "],[1,12347,"   "],[-1,12347,"   "],[1,12381,"    "],[-1,12381,"    "],[1,12393,"   "],[-1,12393,"   "],[1,12498,"    "],[-1,12498,"    "],[1,12568," "],[-1,12568," "],[1,12612," "],[-1,12612," "],[1,12665," "],[-1,12665," "],[1,12727," "],[-1,12727," "],[1,12798," "],[-1,12798," "],[1,12878," "],[-1,12878," "],[1,12883,"    "],[-1,12883,"    "],[1,12939,"    { \n       "],[-1,12939,"    { \n       "],[1,12969,"       "],[-1,12969,"       "],[1,12989,"       "],[-1,12989,"       "],[1,13008,"       "],[-1,13008,"       "],[1,13038,"            "],[-1,13038,"            "],[1,13060,"             "],[-1,13060,"             "],[1,13089,"             "],[-1,13089,"             "],[1,13113,"        } \n   "],[-1,13113,"        } \n   "],[1,13188,"    { \n       "],[-1,13188,"    { \n       "],[1,13225,"       "],[-1,13225,"       "],[1,13248,"       "],[-1,13248,"       "],[1,13277," \n           "],[-1,13277," \n           "],[1,13320,"        } \n   "],[-1,13320,"        } \n   "]],[7136,7136],[7135,7135]]],[1565400053002,["GJX@GJXAIOU",[[1,7136,"\n"]],[7135,7135],[7136,7136]]],[1565400056106,["GJX@GJXAIOU",[[-1,7137,"|"]],[7137,7138],[7137,7137]]],[1565400058097,["GJX@GJXAIOU",[[-1,7261,"|"]],[7261,7262],[7261,7261]]],[1565400059950,["GJX@GJXAIOU",[[-1,38," "],[1,39," "],[-1,83," "],[1,84," "],[-1,93," 标签： "],[1,98," 标签： "],[-1,502," "],[1,503," "],[-1,513,"   "],[1,516,"   "],[-1,521," "],[1,522," "],[-1,557," "],[1,558," "],[-1,611," "],[1,612," "],[-1,647," "],[1,648," "],[-1,738,"   "],[1,741,"   "],[-1,934,"   "],[1,937,"   "],[-1,1001,"   ** "],[1,1007,"   ** "],[-1,1013,"   "],[1,1016,"   "],[-1,1333,"   "],[1,1336,"   "],[-1,1682,"   "],[1,1685,"   "],[-1,1993,"   "],[1,1996,"   "],[-1,2039,"    "],[1,2043,"    "],[-1,2074,"   "],[1,2077,"   "],[-1,2286,"   "],[1,2289,"   "],[-1,2371,"   "],[1,2374,"   "],[-1,2426,"   "],[1,2429,"   "],[-1,2571,"   "],[1,2574,"   "],[-1,2709,"   "],[1,2712,"   "],[-1,2865,"   "],[1,2868,"   "],[-1,2993,"   "],[1,2996,"   "],[-1,3084,"   "],[1,3087,"   "],[-1,3477,"   "],[1,3480,"   "],[-1,3762,"   "],[1,3765,"   "],[-1,3888,"   "],[1,3891,"   "],[-1,4021,"   "],[1,4024,"   "],[-1,4059,"   "],[1,4062,"   "],[-1,4085,"   "],[1,4088,"   "],[-1,4164,"       "],[1,4171,"       "],[-1,4225,"       "],[1,4232,"       "],[-1,4308,"       "],[1,4315,"       "],[-1,4444,"       "],[1,4451,"       "],[-1,4544,"       "],[1,4551,"       "],[-1,4592,"       "],[1,4599,"       "],[-1,4655,"       "],[1,4662,"       "],[-1,4697,"   "],[1,4700,"   "],[-1,5045,"   "],[1,5048,"   "],[-1,5068,"       "],[1,5075,"       "],[-1,5119,"       "],[1,5126,"       "],[-1,5174,"       "],[1,5181,"       "],[-1,5217,"   "],[1,5220,"   "],[-1,5320,"   "],[1,5323,"   "],[-1,5567,"    "],[1,5571,"    "],[-1,5595,"   "],[1,5598,"   "],[-1,5657,"   "],[1,5660,"   "],[-1,6104,"   "],[1,6107,"   "],[-1,6320,"   "],[1,6323,"   "],[-1,6377,"   "],[1,6380,"   "],[-1,6456,"   "],[1,6459,"   "],[-1,6524,"   "],[1,6527,"   "],[-1,6684,"   "],[1,6687,"   "],[-1,6928,"   "],[1,6931,"   "],[1,7136,"`"],[-1,7164," \n*/ "],[1,7169," \n*/ "],[-1,7203," \n   "],[1,7208," \n   "],[-1,7259,"  \n\n   "],[1,7266,"  \n\n   "],[-1,7419," */ "],[1,7423," */ "],[-1,7457," \n   "],[1,7462," \n   "],[-1,7505," \n       "],[1,7514," \n       "],[-1,7556,"    } \n   "],[1,7566,"    } \n   "],[-1,7573," \n       "],[1,7582," \n       "],[-1,7632,"   "],[1,7635,"   "],[-1,7639," "],[1,7640," "],[-1,7646,"   "],[1,7649,"   "],[-1,7748," "],[1,7749," "],[-1,7768," */ "],[1,7772," */ "],[-1,7812," \n   "],[1,7817," \n   "],[-1,7867,"   "],[1,7870,"   "],[-1,7903,"   "],[1,7906,"   "],[-1,7953,"        "],[1,7961,"        "],[-1,8022,"       "],[1,8029,"       "],[-1,8075,"    } \n   "],[1,8085,"    } \n   "],[-1,8102," "],[1,8103," "],[-1,8109,"   "],[1,8112,"   "],[-1,8309," "],[1,8310," "],[-1,8314,"   "],[1,8317,"   "],[-1,8411," "],[1,8412," "],[-1,8416,"   "],[1,8419,"   "],[-1,8529,"   "],[1,8532,"   "],[-1,8632,"    "],[1,8636,"    "],[-1,8656,"   "],[1,8659,"   "],[-1,8793,"   ** "],[1,8799,"   ** "],[-1,8812,"   "],[1,8815,"   "],[-1,8856,"       "],[1,8863,"       "],[-1,8916,"       "],[1,8923,"       "],[-1,8979,"       "],[1,8986,"       "],[-1,9024,"       "],[1,9031,"       "],[-1,9126,"       "],[1,9133,"       "],[-1,9184,"       "],[1,9191,"       "],[-1,9224,"    "],[1,9228,"    "],[-1,9238,"   "],[1,9241,"   "],[-1,9437,"    "],[1,9441,"    "],[-1,9458,"   "],[1,9461,"   "],[-1,9744,"   "],[1,9747,"   "],[-1,9870,"   ** "],[1,9876,"   ** "],[-1,9890,"   "],[1,9893,"   "],[-1,10137,"   "],[1,10140,"   "],[-1,10346,"   "],[1,10349,"   "],[-1,10609,"   "],[1,10612,"   "],[-1,10799,"    "],[1,10803,"    "],[-1,10821,"   "],[1,10824,"   "],[-1,10869,"   "],[1,10872,"   "],[-1,11074,"   "],[1,11077,"   "],[-1,11311,"   "],[1,11314,"   "],[-1,11555,"   "],[1,11558,"   "],[-1,11711,"   "],[1,11714,"   "],[-1,11828,"    "],[1,11832,"    "],[-1,11850,"   "],[1,11853,"   "],[-1,11973,"   "],[1,11976,"   "],[-1,12138,"   "],[1,12141,"   "],[-1,12345,"   "],[1,12348,"   "],[-1,12379,"    "],[1,12383,"    "],[-1,12391,"   "],[1,12394,"   "],[-1,12496,"    "],[1,12500,"    "],[-1,12566," "],[1,12567," "],[-1,12610," "],[1,12611," "],[-1,12663," "],[1,12664," "],[-1,12725," "],[1,12726," "],[-1,12796," "],[1,12797," "],[-1,12876," "],[1,12877," "],[-1,12881,"    "],[1,12885,"    "],[-1,12937,"    { \n       "],[1,12951,"    { \n       "],[-1,12967,"       "],[1,12974,"       "],[-1,12987,"       "],[1,12994,"       "],[-1,13006,"       "],[1,13013,"       "],[-1,13036,"            "],[1,13048,"            "],[-1,13058,"             "],[1,13071,"             "],[-1,13087,"             "],[1,13100,"             "],[-1,13111,"        } \n   "],[1,13125,"        } \n   "],[-1,13186,"    { \n       "],[1,13200,"    { \n       "],[-1,13223,"       "],[1,13230,"       "],[-1,13246,"       "],[1,13253,"       "],[-1,13275," \n           "],[1,13288," \n           "],[-1,13318,"        } \n   "],[1,13332,"        } \n   "]],[7136,7136],[7137,7137]]],[1565400060978,["GJX@GJXAIOU",[[1,7137,"``"]],[7137,7137],[7139,7139]]],[1565400061014,["GJX@GJXAIOU",[[1,7139,"language\n```\n"]],[7139,7139],[7139,7147]]],[1565400062898,["GJX@GJXAIOU",[[-1,7139,"language"],[1,7147,"j"]],[7139,7147],[7140,7140]]],[1565400063298,["GJX@GJXAIOU",[[1,7140,"ava"]],[7140,7140],[7143,7143]]],[1565400063457,["GJX@GJXAIOU",[[1,7144,"\n"]],[7143,7143],[7144,7144]]],[1565400067201,["GJX@GJXAIOU",[[-1,7150," /**\n* 创建仅含有指定代码点的新 String. \n*/ \nString newString（int codePoint） { \n    return new String（Character.toChars（codePoint））；\n}  "]],[7150,7274],[7150,7150]]],[1565400069361,["GJX@GJXAIOU",[[1,7144," /**\n* 创建仅含有指定代码点的新 String. \n*/ \nString newString（int codePoint） { \n    return new String（Character.toChars（codePoint））；\n}  "]],[7144,7144],[7268,7268]]],[1565400081816,["GJX@GJXAIOU",[[-1,515,"  "],[-1,740,"  "],[-1,934,"  "],[-1,1002,"  "],[-1,1013,"  "],[-1,1333,"  "],[-1,1684,"  "],[-1,1995,"  "],[-1,2039,"  "],[-1,2076,"  "],[-1,2288,"  "],[-1,2371,"  "],[-1,2428,"  "],[-1,2573,"  "],[-1,2709,"  "],[-1,2867,"  "],[-1,2995,"  "],[-1,3084,"  "],[-1,3479,"  "],[-1,3764,"  "],[-1,3888,"  "],[-1,4023,"  "],[-1,4060,"  "],[-1,4085,"  "],[-1,4170,"  "],[-1,4225,"  "],[-1,4308,"  "],[-1,4450,"  "],[-1,4550,"  "],[-1,4592,"  "],[-1,4661,"  "],[-1,4697,"  "],[-1,5047,"  "],[-1,5068,"  "],[-1,5125,"  "],[-1,5174,"  "],[-1,5219,"  "],[-1,5320,"  "],[-1,5569,"  "],[-1,5595,"  "],[-1,5657,"  "],[-1,6104,"  "],[-1,6322,"  "],[-1,6377,"  "],[-1,6456,"  "],[-1,6526,"  "],[-1,6684,"  "],[-1,6928,"  "],[-1,7144," "],[1,7145,""],[-1,7214,"  "],[-1,7276,"  "],[-1,7432," "],[1,7433,""],[-1,7474,"  "],[-1,7520,"  "],[-1,7571,"  "],[-1,7576,"  "],[-1,7594,"  "],[-1,7647,"  "],[-1,7655," "],[-1,7659,"  "],[-1,7781," "],[1,7782,""],[-1,7829,"  "],[-1,7882,"  "],[-1,7916," "],[-1,7919," "],[-1,7966,"  "],[-1,8035," "],[-1,8042," "],[-1,8090,"  "],[-1,8095,"  "],[-1,8118," "],[-1,8122,"  "],[-1,8329,"  "],[1,8331,""],[-1,8431,"  "],[-1,8544,"  "],[-1,8645," "],[-1,8648," "],[-1,8669,"  "],[-1,8806,"  "],[-1,8827,"  "],[-1,8869,"  "],[-1,8929," "],[-1,8936," "],[-1,8998,"  "],[-1,9037," "],[-1,9044," "],[-1,9145,"  "],[-1,9197,"  "],[-1,9239,"  "],[-1,9251,"  "],[-1,9452,"  "],[-1,9471,"  "],[-1,9759,"  "],[-1,9884,"  "],[-1,9903," "],[-1,9906," "],[-1,10152,"  "],[-1,10359,"  "],[-1,10624,"  "],[-1,10814,"  "],[-1,10834," "],[-1,10837," "],[-1,10882,"  "],[-1,11087,"  "],[-1,11326,"  "],[-1,11568,"  "],[-1,11726,"  "],[-1,11843,"  "],[-1,11863," "],[-1,11866," "],[-1,11986,"  "],[-1,12151," "],[-1,12154," "],[-1,12360,"  "],[-1,12394,"  "],[-1,12404,"  "],[-1,12509,"  "],[-1,12896,"  "],[1,12898,""],[-1,12952,"  "],[-1,12957,"  "],[-1,12980," "],[-1,12987," "],[-1,13006,"  "],[-1,13019," "],[-1,13026," "],[-1,13060,"  "],[-1,13071," "],[-1,13083," "],[-1,13111,"  "],[-1,13124," "],[-1,13131," "],[-1,13135,"  "],[-1,13201,"  "],[-1,13206,"  "],[-1,13236,"  "],[-1,13265,"  "],[-1,13290,"  "],[-1,13337,"  "],[-1,13342,"  "],[-1,13359," "]],[0,13361],[0,13119]]],[1565400091545,["GJX@GJXAIOU",[[-1,7541,"|"]],[7541,7542],[7541,7541]]],[1565400094785,["GJX@GJXAIOU",[[-1,7282,"| "]],[7282,7284],[7282,7282]]],[1565400095636,["GJX@GJXAIOU",[[1,7282,"```"]],[7282,7282],[7285,7285]]],[1565400095671,["GJX@GJXAIOU",[[1,7285,"language\n```\n"]],[7285,7285],[7285,7293]]],[1565400097044,["GJX@GJXAIOU",[[-1,7285,"language"],[1,7293,"j"]],[7285,7293],[7286,7286]]],[1565400097443,["GJX@GJXAIOU",[[1,7286,"ava"]],[7286,7286],[7289,7289]]],[1565400097592,["GJX@GJXAIOU",[[1,7290,"\n"]],[7289,7289],[7290,7290]]],[1565400101209,["GJX@GJXAIOU",[[-1,7297,"/**\n* 创建仅含有指定代码点的新 String.\n* 针对 BMP 字符优化的版本。\n*/ \nString newString（int codePoint） { \n  if （Character.charCount（codePoint） == 1） { \n      return String.valueOf（（char） codePoint）；\n  } \n  else { \n      return new String（Character.toChars（codePoint））；\n  }\n} "]],[7297,7550],[7297,7297]]],[1565400103001,["GJX@GJXAIOU",[[1,7290,"/**\n* 创建仅含有指定代码点的新 String.\n* 针对 BMP 字符优化的版本。\n*/ \nString newString（int codePoint） { \n  if （Character.charCount（codePoint） == 1） { \n      return String.valueOf（（char） codePoint）；\n  } \n  else { \n      return new String（Character.toChars（codePoint））；\n  }\n} "]],[7290,7290],[7543,7543]]],[1565400105625,["GJX@GJXAIOU",[[-1,7553,"\n"]],[7553,7553],[7552,7552]]],[1565400105763,["GJX@GJXAIOU",[[-1,7552,"\n"]],[7552,7552],[7551,7551]]],[1565400105904,["GJX@GJXAIOU",[[-1,7551,"\n"]],[7551,7551],[7550,7550]]],[1565400106107,["GJX@GJXAIOU",[[-1,7550,"\n"]],[7550,7550],[7549,7549]]],[1565400106296,["GJX@GJXAIOU",[[-1,7549,"\n"]],[7549,7549],[7548,7548]]],[1565400108625,["GJX@GJXAIOU",[[-1,7611,"| \n"]],[7611,7614],[7611,7611]]],[1565400109357,["GJX@GJXAIOU",[[1,7611,"```"]],[7611,7611],[7614,7614]]],[1565400109392,["GJX@GJXAIOU",[[1,7614,"language\n```\n"]],[7614,7614],[7614,7622]]],[1565400110340,["GJX@GJXAIOU",[[-1,7614,"language"],[1,7622,"j"]],[7614,7622],[7615,7615]]],[1565400110860,["GJX@GJXAIOU",[[1,7615,"ava"]],[7615,7615],[7618,7618]]],[1565400111027,["GJX@GJXAIOU",[[1,7619,"\n"]],[7618,7618],[7619,7619]]],[1565400115434,["GJX@GJXAIOU",[[-1,7625,"/**\n* 创建每一个均含有一个指定\n* 代码点的新 String. \n* 针对 BMP 字符优化的版本。\n*/ \nString[] newStrings（int[] codePoints） { \n  String[] result = new String[codePoints.length]；\n  char[] codeUnits = new char[2]；\n  for （int i = 0； i < codePoints.length； i++） {\n       int count = Character.toChars（codePoints[i]， codeUnits， 0）；\n      result[i] = new String（codeUnits， 0， count）；\n  } \n  return result；\n} "]],[7625,7999],[7625,7625]]],[1565400117488,["GJX@GJXAIOU",[[1,7619,"/**\n* 创建每一个均含有一个指定\n* 代码点的新 String. \n* 针对 BMP 字符优化的版本。\n*/ \nString[] newStrings（int[] codePoints） { \n  String[] result = new String[codePoints.length]；\n  char[] codeUnits = new char[2]；\n  for （int i = 0； i < codePoints.length； i++） {\n       int count = Character.toChars（codePoints[i]， codeUnits， 0）；\n      result[i] = new String（codeUnits， 0， count）；\n  } \n  return result；\n} "]],[7619,7619],[7993,7993]]],[1565400119897,["GJX@GJXAIOU",[[-1,8001,"|\n"]],[8000,8002],[8000,8000]]],[1565400120177,["GJX@GJXAIOU",[[-1,8001,"\n"]],[8000,8000],[7999,7999]]],[1565400120370,["GJX@GJXAIOU",[[-1,8000,"\n"]],[7999,7999],[7998,7998]]],[1565400126667,["GJX@GJXAIOU",[[-1,8123,"| "]],[8123,8125],[8123,8123]]],[1565400127018,["GJX@GJXAIOU",[[1,8123,"`"]],[8123,8123],[8124,8124]]],[1565400130889,["GJX@GJXAIOU",[[-1,8197,"  |"]],[8197,8200],[8197,8197]]],[1565400131050,["GJX@GJXAIOU",[[1,8197,"`"]],[8197,8197],[8198,8198]]],[1565400134529,["GJX@GJXAIOU",[[-1,8234,"| "]],[8234,8236],[8234,8234]]],[1565400134717,["GJX@GJXAIOU",[[1,8234,"`"]],[8234,8234],[8235,8235]]],[1565400137856,["GJX@GJXAIOU",[[-1,8294,"  |"]],[8297,8297],[8294,8294]]],[1565400138333,["GJX@GJXAIOU",[[1,8294,"`"]],[8294,8294],[8295,8295]]],[1565400150179,["GJX@GJXAIOU",[[1,12337,"```"]],[12337,12337],[12340,12340]]],[1565400150214,["GJX@GJXAIOU",[[1,12340,"language\n```\n"]],[12340,12340],[12340,12348]]],[1565400151234,["GJX@GJXAIOU",[[-1,12340,"language"],[1,12348,"j"]],[12340,12348],[12341,12341]]],[1565400151658,["GJX@GJXAIOU",[[1,12341,"ava"]],[12341,12341],[12344,12344]]],[1565400152122,["GJX@GJXAIOU",[[1,12345,"\n"]],[12344,12344],[12345,12345]]],[1565400154904,["GJX@GJXAIOU",[[-1,12351,"| "]],[12351,12353],[12351,12351]]],[1565400161209,["GJX@GJXAIOU",[[-1,12351,"U-00000000 - U-0000007F： 0xxxxxxx \nU-00000080 - U-000007FF： 110xxxxx 10xxxxxx \nU-00000800 - U-0000FFFF： 1110xxxx 10xxxxxx 10xxxxxx \nU-00010000 - U-001FFFFF： 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-00200000 - U-03FFFFFF： 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-04000000 - U-7FFFFFFF： 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx  |"]],[12697,12697],[12351,12351]]],[1565400162864,["GJX@GJXAIOU",[[1,12345,"U-00000000 - U-0000007F： 0xxxxxxx \nU-00000080 - U-000007FF： 110xxxxx 10xxxxxx \nU-00000800 - U-0000FFFF： 1110xxxx 10xxxxxx 10xxxxxx \nU-00010000 - U-001FFFFF： 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-00200000 - U-03FFFFFF： 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-04000000 - U-7FFFFFFF： 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx  "]],[12345,12345],[12690,12690]]],[1565400167152,["GJX@GJXAIOU",[[-1,12720,"\n"]],[12720,12720],[12719,12719]]],[1565400167456,["GJX@GJXAIOU",[[-1,12717,"| "]],[12719,12719],[12717,12717]]],[1565400167944,["GJX@GJXAIOU",[[-1,12717,"\n"]],[12717,12717],[12716,12716]]],[1565400168499,["GJX@GJXAIOU",[[1,12716,"  "]],[12716,12716],[12718,12718]]],[1565400169191,["GJX@GJXAIOU",[[-1,12717," "]],[12718,12718],[12717,12717]]],[1565400170378,["GJX@GJXAIOU",[[1,12717,"```"]],[12717,12717],[12720,12720]]],[1565400171559,["GJX@GJXAIOU",[[-1,12716," ```"]],[12720,12720],[12716,12716]]],[1565400172372,["GJX@GJXAIOU",[[1,12716,"```"]],[12716,12716],[12719,12719]]],[1565400172405,["GJX@GJXAIOU",[[1,12719,"language\n```\n"]],[12719,12719],[12719,12727]]],[1565400173282,["GJX@GJXAIOU",[[-1,12719,"language"],[1,12727,"j"]],[12719,12727],[12720,12720]]],[1565400173634,["GJX@GJXAIOU",[[1,12720,"ava"]],[12720,12720],[12723,12723]]],[1565400173801,["GJX@GJXAIOU",[[1,12724,"\n"]],[12723,12723],[12724,12724]]],[1565400177649,["GJX@GJXAIOU",[[-1,12730,"static int bytes2int（byte[] b）\n  { \n      int mask=0xff；\n      int temp=0；\n      int res=0；\n      for（int i=0；i<4；i++）{\n           res<<=8；\n           temp=b[i]&mask；\n           res|=temp；\n      } \n  return res；\n}\n"]],[12730,12944],[12730,12730]]],[1565400179995,["GJX@GJXAIOU",[[1,12724,"static int bytes2int（byte[] b）\n  { \n      int mask=0xff；\n      int temp=0；\n      int res=0；\n      for（int i=0；i<4；i++）{\n           res<<=8；\n           temp=b[i]&mask；\n           res|=temp；\n      } \n  return res；\n}\n"]],[12724,12724],[12938,12938]]],[1565400184484,["GJX@GJXAIOU",[[1,12956,"```"]],[12956,12956],[12959,12959]]],[1565400184517,["GJX@GJXAIOU",[[1,12959,"language\n```\n"]],[12959,12959],[12959,12967]]],[1565400185723,["GJX@GJXAIOU",[[-1,12959,"language"],[1,12967,"j"]],[12959,12967],[12960,12960]]],[1565400186075,["GJX@GJXAIOU",[[1,12960,"ava"]],[12960,12960],[12963,12963]]],[1565400186192,["GJX@GJXAIOU",[[1,12964,"\n"]],[12963,12963],[12964,12964]]],[1565400190167,["GJX@GJXAIOU",[[-1,12970,"static byte[] int2bytes（int num）\n  { \n      byte[] b=new byte[4]；\n      int mask=0xff；\n      for（int i=0；i<4；i++）{ \n          b[i]=（byte）（num>>>（24-i*8））；\n      } \n  return b；\n}\n"]],[12970,13148],[12970,12970]]],[1565400192073,["GJX@GJXAIOU",[[1,12964,"static byte[] int2bytes（int num）\n  { \n      byte[] b=new byte[4]；\n      int mask=0xff；\n      for（int i=0；i<4；i++）{ \n          b[i]=（byte）（num>>>（24-i*8））；\n      } \n  return b；\n}\n"]],[12964,12964],[13142,13142]]],[1565400194640,["GJX@GJXAIOU",[[-1,13149,"|"],[1,13150,"\n"]],[13149,13150],[13149,13149]]],[1565400194795,["GJX@GJXAIOU",[[-1,13149,"\n"]],[13149,13149],[13148,13148]]],[1565400210592,["GJX@GJXAIOU",[[-1,18,"2009年02月19日 11:34:00 [weizhaozhe](https://me.csdn.net/weizhaozhe) 阅读数 29791 标签： [java](https://so.csdn.net/so/search/s.do?q=java&t=blog)[api](https://so.csdn.net/so/search/s.do?q=api&t=blog)[j2se](https://so.csdn.net/so/search/s.do?q=j2se&t=blog)[string](https://so.csdn.net/so/search/s.do?q=string&t=blog)[平台](https://so.csdn.net/so/search/s.do?q=%E5%B9%B3%E5%8F%B0&t=blog)[character](https://so.csdn.net/so/search/s.do?q=character&t=blog)\n\n这篇文章讲的很细，但是对于初学者也很难理解，在后面的笔记中，我会陈述自己的简单理解。 \n"]],[18,504],[18,18]]],[1565400211191,["GJX@GJXAIOU",[[-1,18,"\n"]],[18,18],[17,17]]],[1565400216361,["GJX@GJXAIOU",[[-1,38,"](http://java.chinaitlab.com/)"]],[38,68],[38,38]]],[1565400218554,["GJX@GJXAIOU",[[-1,33,"["]],[34,34],[33,33]]],[1565400224771,["GJX@GJXAIOU",[[-1,91," [Java](http://"],[-1,107,"ava.chinaitlab.com/) "]],[91,128],[92,92]]],[1565400224931,["GJX@GJXAIOU",[[1,92,"a "]],[92,92],[93,93]]],[1565400225172,["GJX@GJXAIOU",[[1,93,"va"]],[93,93],[95,95]]],[1565400233926,["GJX@GJXAIOU",[[1,83,"()"]],[83,83],[85,85]]],[1565400235346,["GJX@GJXAIOU",[[1,84,"ji"]],[84,84],[86,86]]],[1565400236593,["GJX@GJXAIOU",[[-1,84,"ji"]],[86,86],[84,84]]],[1565400239468,["GJX@GJXAIOU",[[1,84,"即超多"]],[84,84],[87,87]]],[1565400240377,["GJX@GJXAIOU",[[-1,85,"超多"]],[87,87],[85,85]]],[1565400247346,["GJX@GJXAIOU",[[1,85,"超过6"]],[85,85],[88,88]]],[1565400247378,["GJX@GJXAIOU",[[1,87," "]],[88,88],[89,89]]],[1565400249404,["GJX@GJXAIOU",[[1,89,"5535"]],[89,89],[93,93]]],[1565400293209,["GJX@GJXAIOU",[[-1,459," "]],[460,460],[459,459]]],[1565400299856,["GJX@GJXAIOU",[[-1,18,"**"],[-1,22,"**"]],[18,18],[18,20]]],[1565400300705,["GJX@GJXAIOU",[[1,18,"## "]],[18,20],[23,23]]],[1565400303650,["GJX@GJXAIOU",[[-1,456,"**"],[-1,460,"**"]],[457,457],[456,458]]],[1565400304617,["GJX@GJXAIOU",[[1,455,"## "]],[456,458],[461,461]]],[1565400308567,["GJX@GJXAIOU",[[-1,1483,"**"],[-1,1510,"**"]],[1484,1484],[1483,1508]]],[1565400309592,["GJX@GJXAIOU",[[1,1481,"## "]],[1483,1508],[1511,1511]]],[1565400321872,["GJX@GJXAIOU",[[1,49,"**"],[1,136,"**"]],[49,136],[49,140]]],[1565400346535,["GJX@GJXAIOU",[[-1,583,"，"]],[584,584],[583,583]]],[1565400361640,["GJX@GJXAIOU",[[1,653,"**"],[1,675,"**"]],[653,675],[653,679]]],[1565400429688,["GJX@GJXAIOU",[[-1,790,"对增补字符的支持也可能会成为东亚市场的一个普遍商业要求。政府应用程序会需要这些增补字符，以正确表示一些包含罕见中文字符的姓名。出版应用程序可能会需要这些增补字符，以表示所有的古代字符和变体字符。中国政府要求支持 GB18030（一种对整个 Unicode 字符集进行编码的字符编码标准），因此，如果是 Unicode 3.1 版或更新版本，则将包括增补字符。台湾标准 CNS-11643 包含的许多字符在 Unicode 3.1 中列为增补字符。香港政府定义了一种针对粤语的字符集，其中的一些字符是 Unicode 中的增补字符。最后，日本的一些供应商正计划利用增补字符空间中大量的专用空间收入 50，000 多个日文汉字字符变体，以便从其专有系统迁移至基于 Java 平台的解决方案。"]],[790,1133],[790,790]]],[1565400433921,["GJX@GJXAIOU",[[-1,791,"\n"]],[791,791],[790,790]]],[1565400434097,["GJX@GJXAIOU",[[-1,789," "]],[790,790],[789,789]]],[1565400457505,["GJX@GJXAIOU",[[-1,790,"  因此，Java 平台不仅需要支持增补字符，而且必须使应用程序能够方便地做到这一点。由于增补字符打破了 Java 编程语言的基础设计构想，而且可能要求对编程模型进行根本性的修改，因此，Java Community Process 召集了一个专家组，以期找到一个适当的解决方案。该小组被称为 JSR-204 专家组，使用Unicode 增补字符支持的 Java 技术规范请求的编号。从技术上来说，该专家组的决定仅适用于 J2SE 平台，但是由于 Java 2 平台企业版 （J2EE） 处于 J2SE 平台的最上层，因此它可以直接受益，我们期望 Java 2 平台袖珍版 （J2ME） 的配置也采用相同的设计方法。\n\n  不过，在了解 JSR-204 专家组确定的解决方案之前，我们需要先理解一些术语。"]],[791,1141],[790,790]]],[1565400457896,["GJX@GJXAIOU",[[-1,791,"\n"]],[790,790],[789,789]]],[1565400458097,["GJX@GJXAIOU",[[-1,788," "]],[789,789],[788,788]]],[1565400458448,["GJX@GJXAIOU",[[-1,789,"\n"]],[788,788],[787,787]]],[1565400458641,["GJX@GJXAIOU",[[-1,788,"\n"]],[787,787],[786,786]]],[1565400472633,["GJX@GJXAIOU",[[-1,394,"  除详细解释这些改进之外，本文同时为应用程序开发人员确定和实现必要的更改提供指导，以支持整个 Unicode 字符集的使用。\n"]],[393,457],[393,393]]],[1565400503321,["GJX@GJXAIOU",[[-1,869,"— 如需了解所有详细的讨论信息，您可以阅读Unicode 标准第 2 章或 Unicode 技术报告 17“字符编码模型”。Unicode 专业人士可略过所有介绍直接参阅本部分中的最后定义。"]],[869,964],[869,869]]],[1565400505167,["GJX@GJXAIOU",[[1,869,"；"]],[869,869],[870,870]]],[1565400509881,["GJX@GJXAIOU",[[-1,872,"  "]],[872,874],[872,872]]],[1565400510329,["GJX@GJXAIOU",[[1,872,"- "]],[872,872],[874,874]]],[1565400516688,["GJX@GJXAIOU",[[-1,854,"我们会尽量介绍得相对简单一些 ；"]],[854,870],[854,854]]],[1565400521232,["GJX@GJXAIOU",[[1,858,"**"],[1,860,"**"]],[858,860],[858,864]]],[1565400540288,["GJX@GJXAIOU",[[-1,943,"  "]],[943,945],[943,943]]],[1565400540667,["GJX@GJXAIOU",[[1,943,"- "]],[943,943],[945,945]]],[1565400543635,["GJX@GJXAIOU",[[1,945,"**"],[1,948,"**"]],[945,948],[945,952]]],[1565400576480,["GJX@GJXAIOU",[[-1,1000,"  "]],[1000,1002],[1000,1000]]],[1565400577898,["GJX@GJXAIOU",[[1,1000,"- "]],[1000,1000],[1002,1002]]],[1565400581714,["GJX@GJXAIOU",[[1,1002,"**"],[1,1007,"**"]],[1002,1007],[1002,1011]]],[1565400602903,["GJX@GJXAIOU",[[1,1019,"**"],[1,1033,"**"]],[1019,1033],[1019,1037]]],[1565400624824,["GJX@GJXAIOU",[[1,1114,"**"],[1,1128,"**"]],[1114,1128],[1114,1132]]],[1565400633018,["GJX@GJXAIOU",[[1,1155,"-"]],[1155,1155],[1156,1156]]],[1565400636752,["GJX@GJXAIOU",[[1,1158,"**"],[1,1161,"**"]],[1158,1161],[1158,1165]]]],null,"GJX@GJXAIOU"],["3b13b3ed-aae1-4182-813d-66d277aa0734",1565440377548,"# Java中的代码点和代码单元\n\n## 摘要\n\n  本文介绍 Java 平台支持增补字符的方式。**增补字符是 Unicode 标准中代码点超出 U+FFFF 的字符(即超过 65535)，因此它们无法在java 编程语言中描述为单个的 16 位实体（例如char数据类型）**。这些字符一般极少用，但是，有些会在诸如中文或日文人名中用到，因此，在东亚国家，政府应用程序通常会要求支持这些字符。\n\n  Java 平台目前正在改进，以便支持对增补字符的处理，这种改进对现有的应用程序影响微乎其微。新的低层 API 在需要时能够使用单个的字符运行。不过，大多数文本处理 API 均使用字符序列，例如String类或字符数组。现在，这些均解释为 UTF-16 序列，而且，这些 API 实现已转变为正确地处理增补字符。这些改进已融入 Java 2 平台 5.0 版，标准版 （J2SE）。\n\n\n##  背景\n\n  Unicode 最初设计是作为一种固定宽度的 16 位字符编码。在 Java 编程语言中，基本数据类型char初衷是通过提供一种简单的、能够包含任何字符的数据类型来充分利用这种设计的优点。不过，现在看来，16 位编码的所有 65536 个字符并不能完全表示全世界所有正在使用或曾经使用的字符。于是，Unicode 标准已扩展到包含多达 1，112，064 个字符。那些**超出原来的 16 位限制的字符被称作增补字符**。Unicode 标准 2.0 版是第一个包含启用增补字符设计的版本，但是，直到 3.1 版才收入第一批增补字符集。由于 J2SE 的 5.0 版必须支持 Unicode 标准 4.0 版，因此它必须支持增补字符。\n\n##   代码点、字符编码方案、UTF-16：这些是指什么？\n\n  不幸的是，引入增补字符使字符模型变得更加复杂了。在过去，我们可以简单地说“字符”，在一个基于 Unicode 的环境（例如 Java 平台）中，假定字符有 16 位，而现在我们需要更多的术语。\n\n- **字符**是抽象的最小文本单位。它没有固定的形状（可能是一个字形），而且没有值。“A”是一个字符，“€”（德国、法国和许多其他欧洲国家通用货币的标志）也是一个字符。\n\n- **字符集**是字符的集合。例如，汉字字符是中国人最先发明的字符，在中文、日文、韩文和越南文的书写中使用。\n\n- **编码字符集**是一个字符集，它**为每一个字符分配一个唯一数字**。Unicode 标准的核心是一个编码字符集，字母“A”的编码为 0041 和字符“€”的编码为20AC.Unicode 标准始终使用十六进制数字，而且在**书写时在前面加上前缀“U+”**，所以“A”的编码书写为“U+0041”。\n\n-  **代码点**是指可用于编码字符集的数字。编码字符集定义一个有效的代码点范围，但是并不一定将字符分配给所有这些代码点。有效的 Unicode 代码点范围是 U+0000 至 U+10FFFF.Unicode 4.0 将字符分配给一百多万个代码点中的 96，382 代码点。\n\n  增补字符是代码点在 U+10000 至 U+10FFFF 范围之间的字符，也就是那些使用原始的 Unicode 的 16 位设计无法表示的字符。从 U+0000 至 U+FFFF 之间的字符集有时候被称为基本多语言面 （BMP）。因此，每一个 Unicode 字符要么属于 BMP，要么属于增补字符。\n\n  字符编码方案是从一个或多个编码字符集到一个或多个固定宽度代码单元序列的映射。最常用的代码单元是字节，但是 16 位或 32 位整数也可用于内部处理。UTF-32、UTF-16 和 UTF-8 是 Unicode 标准的编码字符集的字符编码方案。\n\n  UTF-32 即将每一个 Unicode 代码点表示为相同值的 32 位整数。很明显，它是内部处理最方便的表达方式，但是，如果作为一般字符串表达方式，则要消耗更多的内存。\n\n  UTF-16 使用一个或两个未分配的 16 位代码单元的序列对 Unicode 代码点进行编码。值 U+0000 至 U+FFFF 编码为一个相同值的 16 位单元。增补字符编码为两个代码单元，第一个单元来自于高代理范围（U+D800 至 U+DBFF），第二个单元来自于低代理范围（U+DC00 至 U+DFFF）。这在概念上可能看起来类似于多字节编码，但是其中有一个重要区别：值 U+D800 至 U+DFFF 保留用于 UTF-16；没有这些值分配字符作为代码点。这意味着，对于一个字符串中的每个单独的代码单元，软件可以识别是否该代码单元表示某个单单元字符，或者是否该代码单元是某个双单元字符的第一个或第二单元。这相当于某些传统的多字节字符编码来说是一个显著的改进，在传统的多字节字符编码中，字节值 0x41 既可能表示字母“A”，也可能是一个双字节字符的第二个字节。\n\n  UTF-8 使用一至四个字节的序列对编码 Unicode 代码点进行编码。U+0000 至 U+007F 使用一个字节编码，U+0080 至 U+07FF 使用两个字节，U+0800 至 U+FFFF 使用三个字节，而 U+10000 至 U+10FFFF 使用四个字节。UTF-8 设计原理为：字节值 0x00 至 0x7F 始终表示代码点 U+0000 至 U+007F（Basic Latin 字符子集，它对应 ASCII 字符集）。这些字节值永远不会表示其他代码点，这一特性使 UTF-8 可以很方便地在软件中将特殊的含义赋予某些 ASCII 字符。\n\n  下表所示为几个字符不同表达方式的比较：\n![字符不同表达方式]($resource/%E5%AD%97%E7%AC%A6%E4%B8%8D%E5%90%8C%E8%A1%A8%E8%BE%BE%E6%96%B9%E5%BC%8F.png)\n\n\n  另外，本文在许多地方使用术语字符序列或char序列概括 Java 2 平台识别的所有字符序列的容器：char[]， java.lang.CharSequence的实现（例如String类），和java.text.CharacterIterator的实现。\n\n  这么多术语。它们与在 Java 平台中支持增补字符有什么关系呢？\n\n **Java 平台中增补字符的设计方法**\n\n  JSR-204 专家组必须作出的主要决定是如何在 Java API 中表示增补字符，包括单个字符和所有形式的字符序列。专家组考虑并排除了多种方法：\n\n      重新定义基本类型char，使其具有 32 位，这样也会使所有形式的char序列成为 UTF-32 序列。\n      在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型（例如，char32）。所有形式的 Char 序列均基于 UTF-16.\n      在现有的 16 位类型char的基础上，为字符引入一种新的 32 位基本类型（例如，char32）。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列；其他char序列继续基于 UTF-16.\n      使用int表示增补的代码点。String和StringBuffer接受并行 API，并将它们解释为 UTF-16 序列或 UTF-32 序列；其他char序列继续基于 UTF-16.\n      使用代理char对，表示增补代码点。所有形式的char序列基于 UTF-16.\n      引入一种封装字符的类。String和StringBuffer接受新的 API，并将它们解释为此类字符的序列。\n      使用一个CharSequence实例和一个索引的组合表示代码点。\n\n  在这些方法中，一些在早期就被排除了。例如，重新定义基本类型char，使其具有 32 位，这对于全新的平台可能会非常有吸引力，但是，对于 J2SE 来说，它会与现有的 Java 虚拟机1、序列化和其他接口不兼容，更不用说基于 UTF-32 的字符串要使用两倍于基于 UTF-16 的字符串的内存了。添加一种新类型的char32可能会简单一些，但是仍然会出现虚拟机和序列化方面的问题。而且，语言更改通常需要比 API 更改有更长的提前期，因此，前面两种方法会对增补字符支持带来无法接受的延迟。为了在余下的方法中筛选出最优方案，实现小组使用四种不同的方法，在大量进行低层字符处理的代码（java.util.regex包）中实现了对增补字符支持，并对这四种方法的难易程度和运行表现进行了比较。\n\n  最终，专家组确定了一种分层的方法：\n\n      使用基本类型int在低层 API 中表示代码点，例如Character类的静态方法。\n      将所有形式的char序列均解释为 UTF-16 序列，并促进其在更高层级 API 中的使用。\n      提供 API，以方便在各种char和基于代码点的表示法之间的转换。\n\n  在需要时，此方法既能够提供一种概念简明且高效的单个字符表示法，又能够充分利用通过改进可支持增补字符的现有 API.同时，还能够促进字符序列在单个字符上的应用，这一点一般对于国际化的软件很有好处。\n\n  在这种方法中，一个char表示一个 UTF-16 代码单元，这样对于表示代码点有时并不够用。您会注意到，J2SE 技术规范现在使用术语代码点和 UTF-16 代码单元（表示法是相关的）以及通用术语字符（表示法与该讨论没有关系）。API 通常使用名称codePoint描述表示代码点的类型int的变量，而 UTF-16 代码单元的类型当然为char.我们将在下面两部分中了解到 J2SE 平台的实质变化 — 其中一部分介绍单个代码点的低层 API，另一部分介绍采用字符序列的高层接口。\n\n  **开放的增补字符：基于代码点的 API**\n\n  新增的低层 API 分为两大类：用于各种char和基于代码点的表示法之间转换的方法和用于分析和映射代码点的方法。\n\n  最基本的转换方法是Character.toCodePoint（char high， char low）（用于将两个 UTF-16 代码单元转换为一个代码点）和Character.toChars（int codePoint）（用于将指定的代码点转换为一个或两个 UTF-16 代码单元，然后封装到一个char[]内。不过，由于大多数情况下文本以字符序列的形式出现，因此，另外提供codePointAt和codePointBefore方法，用于将代码点从各种字符序列表示法中提取出来：Character.codePointAt（char[] a， int index）和String.codePointBefore（int index）是两种典型的例子。在将代码点插入字符序列时，大多数情况下均有一些针对StringBuffer和StringBuilder类的appendCodePoint（int codePoint）方法，以及一个用于提取表示代码点的int[]的String构建器。\n\n  几种用于分析代码单元和代码点的方法有助于转换过程：Character 类中的isHighSurrogate和isLowSurrogate方法可以识别用于表示增补字符的char值；charCount（int codePoint）方法可以确定是否需要将某个代码点转换为一个或两个char.但是，大多数基于代码点的方法均能够对所有 Unicode 字符实现基于char的旧方法对 BMP 字符所实现的功能。以下是一些典型例子：\n\n  Character.isLetter（int codePoint）可根据 Unicode 标准识别字母。\n  Character.isJavaIdentifierStart（int codePoint）可根据 Java 语言规范确定代码点是否可以启动标识符。\n  Character.UnicodeBlock.of（int codePoint）可搜索代码点所属的 Unicode 字符子集。\n  Character.toUpperCase（int codePoint）可将给定的代码点转换为其大写等值字符。尽管此方法能够支持增补字符，但是它仍然不能解决根本的问题，即在某些情况下，逐个字符的转换无法正确完成。例如，德文字符“\"？\"”应该转换为“SS”，这需要使用String.toUpperCase方法。\n\n  注意大多数接受代码点的方法并不检查给定的int值是否处于有效的 Unicode 代码点范围之内（如上所述，只有 0x0 至 0x10FFFF 之间的范围是有效的）。在大多数情况下，该值是以确保其有效的方法产生的，在这些低层 API 中反复检查其有效性可能会对系统性能造成负面的影响。在无法确保有效性的情况下，应用程序必须使用Character.isValidCodePoint方法确保代码点有效。大多数方法对于无效的代码点采取的行为没有特别加以指定，不同的实现可能会有所不同。\n\n  API 包含许多简便的方法，这些方法可使用其他低层的 API 实现，但是专家组觉得，这些方法很常用，将它们添加到 J2SE 平台上很有意义。不过，专家组也排除了一些建议的简便方法，这给我们提供了一次展示自己实现此类方法能力的机会。例如，专家组经过讨论，排除了一种针对String类的新构建器（该构建器可以创建一个保持单个代码点的String）。以下是使应用程序使用现有的 API 提供功能的一种简便方法：\n\n```java\n/**\n* 创建仅含有指定代码点的新 String. \n*/ \nString newString（int codePoint） { \n  return new String（Character.toChars（codePoint））；\n}  \n```\n\n\n\n  您会注意到，在这个简单的实现中，toChars方法始终创建一个中间数列，该数列仅使用一次即立即丢弃。如果该方法在您的性能评估中出现，您可能会希望将其优化为针对最为普通的情况，即该代码点为 BMP 字符：\n\n```java\n/**\n* 创建仅含有指定代码点的新 String.\n* 针对 BMP 字符优化的版本。\n*/ \nString newString（int codePoint） { \n  if （Character.charCount（codePoint） == 1） { \n      return String.valueOf（（char） codePoint）；\n  } \n  else { \n      return new String（Character.toChars（codePoint））；\n  }\n} \n```\n\n  或者，如果您需要创建许多个这样的 string，则可能希望编写一个重复使用toChars方法所使用的数列的通用版本：\n\n```java\n/**\n* 创建每一个均含有一个指定\n* 代码点的新 String. \n* 针对 BMP 字符优化的版本。\n*/ \nString[] newStrings（int[] codePoints） { \n  String[] result = new String[codePoints.length]；\n  char[] codeUnits = new char[2]；\n  for （int i = 0； i < codePoints.length； i++） {\n       int count = Character.toChars（codePoints[i]， codeUnits， 0）；\n      result[i] = new String（codeUnits， 0， count）；\n  } \n  return result；\n} \n```\n\n\n  不过，最终您可能会发现，您需要的是一个完全不同的解决方案。新的构建器String（int codePoint）实际上建议作为String.valueOf（char）的一个基于代码点的备选方案。在很多情况下，此方法用于消息生成的环境，例如：\n\n`System.out.println（\"Character \" + String.valueOf（char） + \" is invalid.\"）；`\n\n  新的格式化 API支持增补文字，提供一种更加简单的备选方案：\n\n`System.out.printf（\"Character %c is invalid.%n\"， codePoint）；`\n\n  使用此高层 API 不仅简捷，而它有很多特殊的优点：它可以避免串联（串联会使消息很难本地化），并将需要移进资源包 （resource bundle） 的字符串数量从两个减少到一个。\n\n**增补字符透视：功能增强**\n\n  在支持使用增补字符的 Java 2 平台中的大部分更改没有反映到新的 API 内。一般预期是，处理字符序列的所有接口将以适合其功能的方式处理增补字符。本部分着重讲述为达到此预期所作一些功能增强。\n\n  **Java 编程语言中的标识符**\n\n  Java 语言规范指出所有 Unicode 字母和数字均可用于标识符。许多增补字符是字母或数字，因此 Java 语言规范已经参照新的基于代码点的方法进行更新，以在标识符内定义合法字符。为使用这些新方法，需要检测标识符的 javac 编译器和其他工具都进行了修订。\n\n ** 库内的增补字符支持**\n\n  许多 J2SE 库已经过增强，可以通过现有接口支持增补字符。以下是一些例子：\n\n      字符串大小写转换功能已更新，可以处理增补字符，也可以实现 Unicode 标准中规定的特殊大小写规则。\n      java.util.regex包已更新，这样模式字符串和目标字符串均可以包含增补字符并将其作为完整单元处理。\n      现在，在java.text包内进行整理处理时，会将增补字符看作完整单元。\n      java.text.Bidi类已更新，可以处理增补字符和 Unicode 4.0 中新增的其他字符。请注意，Cypriot Syllabary 字符子集内的增补字符具有从右至左的方向性。\n      Java 2D API 内的字体渲染和打印技术已经过增强，可以正确渲染和测量包含增补字符的字符串。\n      Swing 文本组件实现已更新，可以处理包含增补字符的文本。\n\n  **字符转换**\n\n  只有很少的字符编码可以表示增补字符。如果是基于 Unicode 的编码（如 UTF-8 和 UTF-16LE），则旧版的 J2RE 内的字符转换器已经按照正确处理增补字符的方式实现转换。对于 J2RE 5.0，可以表示增补字符的其他编码的转换器已更新：GB18030、x-EUC-TW（现在实现所有 CNS 11643 层面）和 Big5-HKSCS（现在实现 HKSCS-2001）。\n\n  **在源文件内表示增补字符**\n\n  在 Java 编程语言源文件中，如果使用可以直接表示增补字符的字符编码，则使用增补字符最为方便。UTF-8 是最佳的选择。在所使用的字符编码无法直接表示字符的情况下，Java 编程语言提供一种 Unicode 转义符语法。此语法没有经过增强，无法直接表示增补字符。而是使用两个连续的 Unicode 转义符将其表示为 UTF-16 字符表示法中的两个编码单元。例如，字符 U+20000 写作“/uD840/uDC00”。您也许不愿意探究这些转义序列的含义；最好是写入支持所需增补字符的编码，然后使用一种工具（如 native2ascii）将其转换为转义序列。\n\n  遗憾的是，由于其编码问题，属性文件仍局限于 ISO 8859-1（除非您的应用程序使用新的 XML 格式）。这意味着您始终必须对增补字符使用转义序列，而且可能要使用不同的编码进行编写，然后使用诸如 native2ascii 的工具进行转换。\n\n ** 经修订的 UTF-8**\n\n  Java 平台对经修订的 UTF-8 已经很熟悉，但是，问题是应用程序开发人员在可能包含增补字符的文本和 UTF-8 之间进行转换时需要更加留神。需要特别注意的是，某些 J2SE 接口使用的编码与 UTF-8 相似但与其并不兼容。以前，此编码有时被称为“Java modified UTF-8”（经 Java 修订的 UTF-8）或（错误地）直接称为“UTF-8”。对于 J2SE 5.0，其说明文档正在更新，此编码将统称为“modified UTF-8”（经修订的 UTF-8）。\n\n  经修订的 UTF-8 和标准 UTF-8 之间之所以不兼容，其原因有两点。其一，经修订的 UTF-8 将字符 U+0000 表示为双字节序列 0xC0 0x80，而标准 UTF-8 使用单字节值 0x0.其二，经修订的 UTF-8 通过对其 UTF-16 表示法的两个代理代码单元单独进行编码表示增补字符。每个代理代码单元由三个字节来表示，共有六个字节。而标准 UTF-8 使用单个四字节序列表示整个字符。\n\n  Java 虚拟机及其附带的接口（如 Java 本机接口、多种工具接口或 Java 类文件）在java.io.DataInput和DataOutput接口和类中使用经修订的 UTF-8 实现或使用这些接口和类，并进行序列化。Java 本机接口提供与经修订的 UTF-8 之间进行转换的例程。而标准 UTF-8 由String类、java.io.InputStreamReader和OutputStreamWriter类、java.nio.charset设施 （facility） 以及许多其上层的 API 提供支持。\n\n  由于经修订的 UTF-8 与标准的 UTF-8 不兼容，因此切勿同时使用这两种版本的编码。经修订的 UTF-8 只能与上述的 Java 接口配合使用。在任何其他情况下，尤其对于可能来自非基于 Java 平台的软件的或可能通过其编译的数据流，必须使用标准的 UTF-8.需要使用标准的 UTF-8 时，则不能使用 Java 本机接口例程与经修订的 UTF-8 进行转换。\n\n  **在应用程序内支持增补字符**\n\n  现在，对大多数读者来说最为重要的问题是：必须对应用程序进行哪些更改才能支持增补字符？\n\n  答案取决于在应用程序中进行哪种类型的文本处理和使用哪些 Java 平台 API.对于仅以各种形式char序列（[char[]、java.lang.CharSequence实现、java.text.CharacterIterator实现）处理文本和仅使用接受和退回序列（如char序列）的 Java API 的应用程序，可能根本不需要进行任何更改。Java 平台 API 的实现应该能够处理增补字符。\n\n  对于本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法的应用程序，则需要考虑这些字符的有效值。在很多情况下，往往不要求支持增补字符。例如，如果某应用程序搜索char序列中的 HTML 标记，并逐一检查每个char，它会知道这些标记仅使用 Basic Latin 字符子集中的字符。如果所搜索的文本含有增补字符，则这些字符不会与标记字符混淆，因为 UTF-16 使用代码单元表示增补字符，而代码单元的值不会用于 BMP 字符。\n\n  只有在某应用程序本身解释单个字符、将单个字符传送给 Java 平台 API 或调用能够返回单个字符的方法且这些字符可能为增补字符时，才必须更改该应用程序。在提供使用char序列的并行 API 时，最好转而使用此类 API.在其他情况下，有必要使用新的 API 在char和基于代码点的表示法之间进行转换，并调用基于代码点的 API.当然，如果您发现在 J2SE 5.0 中有更新、更方便的 API，使您能够支持增补字符并同时简化代码（如上格式化范例中所述），则没有必要这样做。\n\n  您可能会犹豫，是将所有文本转换为代码点表示法（即int[]）然后在该表示法中处理，还是在大多数情况下仍采用char序列，仅在需要时转换为代码点，两者之间孰优孰劣很难确定。当然，总体来说，Java 平台 API 相对于char序列肯定具有一定的优势，而且采用 Java 平台 API 可以节省内存空间。\n\n  对于需要与 UTF-8 之间进行转换的应用程序，还需要认真考虑是需要标准的 UTF-8 还是经修订的 UTF-8，并针对每种 UTF-8 采用适当的 Java 平台。“经修订的 UTF-8”部分介绍进行正确选择所需的信息。\n\n  **使用增补字符测试应用程序**\n\n  经过前面部分的介绍后，无论您是否需要修订应用程序，测试应用程序是否运行正常始终是一种正确的做法。对于不含有图形用户界面的应用程序，有关“在源文件内表示增补字符”　的信息有助于设计测试用例。以下是有关使用图形用户界面进行测试的补充信息。\n\n  对于文本输入，Java 2 SDK提供用于接受“/Uxxxxxx”格式字符串的代码点输入方法，这里大写的“U”表示转义序列包含六个十六进制数字，因此允许使用增补字符。小写的“u”表示转义序列“/uxxxx”的原始格式。您可以在 J2SDK 目录 demo/jfc/CodePointIM 内找到此输入方法及其说明文档。\n\n  对于字体渲染，您需要至少能够渲染一些增补字符的字体。其中一种此类字体为 James Kass 的Code2001字体，它提供手写体字形（如 Deseret 和 Old Italic）。利用 Java 2D 库中提供新功能，您只需将该字体安装到 J2RE 的 lib/fonts/fallback 目录内即可，然后它可自动添加至在 2D 和 XAWT 渲染时使用的所有逻辑字体 — 无需编辑字体配置文件。\n\n  至此，您就可以确认，您的应用程序能够完全支持增补字符了！\n\n  **结论**\n\n  对增补字符的支持已经引入 Java 平台，大部分应用程序无需更改代码即可处理这些字符。解释单个字符的应用程序可以在Character类和多种CharSequence子类中使用基于代码点的新 API.\n\n  **以下是Unicode和UTF-8之间的转换关系表：**\n```java\nU-00000000 - U-0000007F： 0xxxxxxx \nU-00000080 - U-000007FF： 110xxxxx 10xxxxxx \nU-00000800 - U-0000FFFF： 1110xxxx 10xxxxxx 10xxxxxx \nU-00010000 - U-001FFFFF： 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-00200000 - U-03FFFFFF： 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx \nU-04000000 - U-7FFFFFFF： 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx  \n```\n\n\n\n  **Byte 数组转整数：**\n```java\nstatic int bytes2int（byte[] b）\n  { \n      int mask=0xff；\n      int temp=0；\n      int res=0；\n      for（int i=0；i<4；i++）{\n           res<<=8；\n           temp=b[i]&mask；\n           res|=temp；\n      } \n  return res；\n}\n\n```\n\n\n整数转byte数组：\n```java\nstatic byte[] int2bytes（int num）\n  { \n      byte[] b=new byte[4]；\n      int mask=0xff；\n      for（int i=0；i<4；i++）{ \n          b[i]=（byte）（num>>>（24-i*8））；\n      } \n  return b；\n}\n\n```\n\n\n",[[1565440369341,["GJX@GJXAIOU",[[1,1370,"**"],[1,1447,"**"]],[1370,1447],[1370,1451]]],[1565440429203,["GJX@GJXAIOU",[[-1,2739,"  "],[-1,2794,"  "],[-1,2879,"  "],[-1,3009," "],[-1,3014," "],[-1,3111,"  "],[-1,3153," "],[-1,3158," "],[-1,3214,"  "]],[2741,3252],[2739,3238]]],[1565440430051,["GJX@GJXAIOU",[[-1,2737,"  "],[-1,2792,"  "],[-1,2873,"  "],[-1,3003," "],[-1,3006," "],[-1,3101,"  "],[-1,3143," "],[-1,3146," "],[-1,3202,"  "]],[2739,3238],[2737,3224]]],[1565440436358,["GJX@GJXAIOU",[[-1,3597,"  "],[-1,3642,"  "],[-1,3695,"  "]],[3599,3734],[3597,3728]]],[1565440440547,["GJX@GJXAIOU",[[-1,3595,"  "],[-1,3640,"  "],[-1,3691,"  "]],[3596,3728],[3594,3722]]],[1565440575858,["GJX@GJXAIOU",[[-1,8299," "]],[8300,8300],[8299,8299]]],[1565440581053,["GJX@GJXAIOU",[[1,11727,"\n"]],[11724,11724],[11725,11725]]],[1565440581196,["GJX@GJXAIOU",[[1,11728,"\n"]],[11725,11725],[11726,11726]]],[1565440581331,["GJX@GJXAIOU",[[1,11729,"\n"]],[11726,11726],[11727,11727]]],[1565440597063,["GJX@GJXAIOU",[[1,11726,"## Unicode和"]],[11726,11726],[11737,11737]]],[1565440597098,["GJX@GJXAIOU",[[1,11736," "]],[11737,11737],[11738,11738]]],[1565440600255,["GJX@GJXAIOU",[[1,11738,"utf-8"]],[11738,11738],[11743,11743]]],[1565440600289,["GJX@GJXAIOU",[[1,11738," "]],[11743,11743],[11744,11744]]],[1565440602129,["GJX@GJXAIOU",[[1,11744,"区别"]],[11744,11744],[11746,11746]]],[1565440602164,["GJX@GJXAIOU",[[1,11744," "]],[11746,11746],[11747,11747]]],[1565440602470,["GJX@GJXAIOU",[[1,11751,"\n"]],[11747,11747],[11748,11748]]],[1565440603772,["GJX@GJXAIOU",[[1,11748," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11748,11748],[11772,11772]]],[1565440607228,["GJX@GJXAIOU",[[-1,11748," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11748,11772],[11748,11748]]],[1565440625014,["GJX@GJXAIOU",[[1,11749," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11749,11749],[11773,11773]]],[1565440628078,["GJX@GJXAIOU",[[-1,11749," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11749,11773],[11749,11749]]],[1565440635673,["GJX@GJXAIOU",[[1,11749," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11749,11749],[11773,11773]]],[1565440638138,["GJX@GJXAIOU",[[-1,11749," 选择器六：属性选择器 ，根据标签属性选择哪一个"]],[11749,11773],[11749,11749]]],[1565440778638,["GJX@GJXAIOU",[[1,11749,"简单来说：\n\n*   Unicode 是「字符集」\n*   UTF-8 是「编码规则」\n\n其中：\n\n*   字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）\n\n*   编码规则：将「码位」转换为字节序列的规则（编码/解码 可以理解为 加密/解密 的过程）\n\n广义的 Unicode 是一个标准，定义了一个字符集以及一系列的编码规则，即 Unicode 字符集和 UTF-8、UTF-16、UTF-32 等等编码……\n\nUnicode 字符集为每一个字符分配一个码位，例如「知」的码位是 30693，记作 U+77E5（30693 的十六进制为 0x77E5）。\n\nUTF-8 顾名思义，是一套以 8 位为一个编码单位的可变长编码。会将一个码位编码为 1 到 4 个字节：\n\n```text\nU+ 0000 ~ U+ 007F: 0XXXXXXX\nU+ 0080 ~ U+ 07FF: 110XXXXX 10XXXXXX\nU+ 0800 ~ U+ FFFF: 1110XXXX 10XXXXXX 10XXXXXX\nU+10000 ~ U+1FFFF: 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX\n\n```\n\n根据上表中的编码规则，之前的「知」字的码位 U+77E5 属于第三行的范围：\n\n```text\n       7    7    E    5    \n    0111 0111 1110 0101    二进制的 77E5\n--------------------------\n    0111   011111   100101 二进制的 77E5\n1110XXXX 10XXXXXX 10XXXXXX 模版（上表第三行）\n11100111 10011111 10100101 代入模版\n   E   7    9   F    A   5\n```\n\n这就是将 U+77E5 按照 UTF-8 编码为字节序列 E79FA5 的过程。反之亦然。"]],[11749,11749],[12612,12612]]],[1565440787627,["GJX@GJXAIOU",[[-1,11755,"\n"]],[11755,11755],[11754,11754]]],[1565440790412,["GJX@GJXAIOU",[[-1,11797,"\n"]],[11797,11797],[11796,11796]]],[1565440792451,["GJX@GJXAIOU",[[-1,11849,"\n"]],[11849,11849],[11848,11848]]],[1565440797610,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1565440802047,["GJX@GJXAIOU",[[1,18,"@toc"]],[18,18],[22,22]]],[1565440803685,["GJX@GJXAIOU",[[1,23,"\n"]],[22,22],[23,23]]],[1565440815363,["GJX@GJXAIOU",[[-1,2641,"**"],[-1,2660,"**"]],[2647,2647],[2641,2658]]],[1565440817300,["GJX@GJXAIOU",[[1,2640,"## "]],[2641,2658],[2661,2661]]],[1565440821396,["GJX@GJXAIOU",[[-1,4077,"**"],[-1,4097,"**"]],[4083,4083],[4077,4095]]],[1565440822100,["GJX@GJXAIOU",[[1,4075,"## "]],[4077,4095],[4098,4098]]],[1565440828435,["GJX@GJXAIOU",[[-1,6974,"**"],[-1,6987,"**"]],[6980,6980],[6974,6985]]],[1565440829155,["GJX@GJXAIOU",[[1,6974,"### "]],[6974,6985],[6989,6989]]],[1565440831380,["GJX@GJXAIOU",[[-1,7094,"**"],[-1,7110,"**"]],[7103,7103],[7094,7108]]],[1565440832139,["GJX@GJXAIOU",[[1,7092,"## "]],[7094,7108],[7111,7111]]],[1565440835756,["GJX@GJXAIOU",[[-1,7665,"**"],[-1,7671,"**"]],[7669,7669],[7665,7669]]],[1565440836756,["GJX@GJXAIOU",[[1,7663,"### "]],[7665,7669],[7673,7673]]],[1565440838427,["GJX@GJXAIOU",[[-1,7874,"**"],[-1,7887,"**"]],[7882,7882],[7874,7885]]],[1565440839093,["GJX@GJXAIOU",[[1,7872,"### "]],[7874,7885],[7889,7889]]],[1565440841390,["GJX@GJXAIOU",[[-1,8300,"**"],[-1,8312,"**"]],[8305,8305],[8300,8310]]],[1565440842364,["GJX@GJXAIOU",[[1,8299,"### "]],[8300,8310],[8314,8314]]],[1565440844571,["GJX@GJXAIOU",[[-1,9219,"**"],[-1,9233,"**"]],[9225,9225],[9219,9231]]],[1565440845243,["GJX@GJXAIOU",[[1,9217,"### "]],[9219,9231],[9235,9235]]],[1565440847972,["GJX@GJXAIOU",[[-1,10234,"**"],[-1,10248,"**"]],[10241,10241],[10234,10246]]],[1565440849117,["GJX@GJXAIOU",[[1,10232,"## "]],[10234,10246],[10249,10249]]],[1565440851907,["GJX@GJXAIOU",[[-1,10774,"**"],[-1,10778,"**"]],[10777,10777],[10774,10776]]],[1565440852660,["GJX@GJXAIOU",[[1,10772,"## "]],[10774,10776],[10779,10779]]]],null,"GJX@GJXAIOU"]]}