{"compress":true,"commitItems":[["8ff5fc4b-9fa4-4894-819a-462b6aa3ab65",1562727837225,"",[[1562727795627,["GJX@GJXAIOU",[[1,0,"# 为什么函数返回值不能重载\n\n\n\n"]],[0,0],[17,17]]],[1562727823565,["GJX@GJXAIOU",[[1,16,"重载函数是函数的一种特殊情况，为方便使用，C++允许在同一范围中声明几个功能类似的同名函数，但是这些同名函数的[形式参数](https://baike.baidu.com/item/%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0/1995068)（指参数的个数、类型或者顺序）必须不同，也就是说用同一个函数完成不同的功能。这就是重载函数。重载函数常用来实现功能类似而所处理的数据类型不同的问题。不能只有函数返回值类型不同。"]],[16,16],[240,240]]],[1562727826956,["GJX@GJXAIOU",[[-1,71,"["]],[72,72],[71,71]]],[1562727829757,["GJX@GJXAIOU",[[-1,75,"](https://baike.baidu.com/item/%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0/1995068)"]],[75,151],[75,75]]],[1562727900108,["GJX@GJXAIOU",[[1,16,"**"],[1,20,"**"]],[16,20],[16,24]]],[1562728009836,["GJX@GJXAIOU",[[1,16,"\n"]],[16,16],[17,17]]],[1562728009956,["GJX@GJXAIOU",[[1,17,"\n"]],[17,17],[18,18]]],[1562728010109,["GJX@GJXAIOU",[[1,18,"\n"]],[18,18],[19,19]]],[1562728016487,["GJX@GJXAIOU",[[1,16,"## 一、区别"]],[16,16],[23,23]]],[1562728024624,["GJX@GJXAIOU",[[1,23,"函数重写与熊仔"]],[23,23],[30,30]]],[1562728025455,["GJX@GJXAIOU",[[-1,27,"与熊仔"]],[30,30],[27,27]]],[1562728026656,["GJX@GJXAIOU",[[1,27,"（）"]],[27,27],[29,29]]],[1562728034518,["GJX@GJXAIOU",[[1,28,"Override"]],[28,28],[36,36]]],[1562728041862,["GJX@GJXAIOU",[[1,37,"和函数从在"]],[37,37],[42,42]]],[1562728042444,["GJX@GJXAIOU",[[-1,40,"从在"]],[42,42],[40,40]]],[1562728047423,["GJX@GJXAIOU",[[1,40,"重载（）"]],[40,40],[44,44]]],[1562728054157,["GJX@GJXAIOU",[[1,43,"Overload"]],[43,43],[51,51]]],[1562728065246,["GJX@GJXAIOU",[[1,54,"## 重写(Override)\n\n重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。**即外壳不变，核心重写！**\n\n重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。\n\n重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。\n\n在面向对象原则里，重写意味着可以重写任何现有方法。实例如下："]],[54,54],[360,360]]],[1562728067654,["GJX@GJXAIOU",[[1,361,"\n"]],[360,360],[361,361]]],[1562728068204,["GJX@GJXAIOU",[[1,362,"\n"]],[361,361],[362,362]]],[1562728093228,["GJX@GJXAIOU",[[1,363,"\n"]],[361,361],[362,362]]],[1562728093357,["GJX@GJXAIOU",[[1,364,"\n"]],[362,362],[363,363]]],[1562728093793,["GJX@GJXAIOU",[[1,363,"## 方法的重写规则\n\n*   参数列表必须完全与被重写方法的相同；\n*   返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）；\n*   访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。\n*   父类的成员方法只能被它的子类重写。\n*   声明为final的方法不能被重写。\n*   声明为static的方法不能被重写，但是能够被再次声明。\n*   子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。\n*   子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。\n*   重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\n*   构造方法不能被重写。\n*   如果不能继承一个方法，则不能重写这个方法。"]],[363,363],[868,868]]],[1562728096805,["GJX@GJXAIOU",[[1,869,"* \n"]],[868,868],[871,871]]],[1562728096924,["GJX@GJXAIOU",[[-1,869,"* "]],[871,871],[870,870]]],[1562728097047,["GJX@GJXAIOU",[[1,871,"\n"]],[870,870],[871,871]]],[1562728097165,["GJX@GJXAIOU",[[1,872,"\n"]],[871,871],[872,872]]],[1562728097316,["GJX@GJXAIOU",[[1,873,"\n"]],[872,872],[873,873]]],[1562728105380,["GJX@GJXAIOU",[[1,870,"## Super关键字的使用\n\n当需要在子类中调用父类的被重写方法时，要使用super关键字。"]],[870,870],[917,917]]],[1562728107173,["GJX@GJXAIOU",[[1,921,"\n"]],[917,917],[918,918]]],[1562728107316,["GJX@GJXAIOU",[[1,922,"\n"]],[918,918],[919,919]]],[1562728107460,["GJX@GJXAIOU",[[1,923,"\n"]],[919,919],[920,920]]],[1562728107687,["GJX@GJXAIOU",[[1,924,"\n"]],[920,920],[921,921]]],[1562728117221,["GJX@GJXAIOU",[[1,921,"## 重载(Overload)\n\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器的重载。\n\n**重载规则:**\n\n*   被重载的方法必须改变参数列表(参数个数或类型不一样)；\n*   被重载的方法可以改变返回类型；\n*   被重载的方法可以改变访问修饰符；\n*   被重载的方法可以声明新的或更广的检查异常；\n*   方法能够在同一个类中或者在一个子类中被重载。\n*   无法以返回值类型作为重载函数的区分标准。"]],[921,921],[1204,1204]]],[1562728125029,["GJX@GJXAIOU",[[1,1208,"\n"]],[1206,1206],[1207,1207]]],[1562728125164,["GJX@GJXAIOU",[[1,1209,"\n"]],[1207,1207],[1208,1208]]],[1562728125535,["GJX@GJXAIOU",[[1,1208,"## 重写与重载之间的区别\n\n| 区别点 | 重载方法 | 重写方法 |\n| 参数列表 | 必须修改 | 一定不能修改 |\n| 返回类型 | 可以修改 | 一定不能修改 |\n| 异常 | 可以修改 | 可以减少或删除，一定不能抛出新的或者更广的异常 |\n| 访问 | 可以修改 | 一定不能做更严格的限制（可以降低限制） |\n\n* * *\n\n## 总结\n\n方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。\n\n*   (1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。\n*   (2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。\n*   (3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。"]],[1208,1208],[1661,1661]]],[1562728130612,["GJX@GJXAIOU",[[1,1663,"\n"]],[1662,1662],[1663,1663]]],[1562728130750,["GJX@GJXAIOU",[[1,1664,"\n"]],[1663,1663],[1664,1664]]],[1562728130868,["GJX@GJXAIOU",[[1,1665,"\n"]],[1664,1664],[1665,1665]]],[1562728137084,["GJX@GJXAIOU",[[1,1245,"\n"]],[1244,1244],[1245,1245]]],[1562728142006,["GJX@GJXAIOU",[[1,1245,"|---|————"]],[1245,1245],[1254,1254]]],[1562728143212,["GJX@GJXAIOU",[[-1,1250,"————"]],[1254,1254],[1250,1250]]],[1562728147158,["GJX@GJXAIOU",[[1,1250,"---|---|"]],[1250,1250],[1258,1258]]],[1562728162572,["GJX@GJXAIOU",[[1,1680,"\n"]],[1676,1676],[1677,1677]]],[1562728163101,["GJX@GJXAIOU",[[1,1681,"\n"]],[1677,1677],[1678,1678]]],[1562728214482,["GJX@GJXAIOU",[[1,1678,"![20171102-1]($resource/20171102-1.jpg)\n![overloading-vs-overriding]($resource/overloading-vs-overriding.png)"]],[1678,1678],[1788,1788]]],[1562728219389,["GJX@GJXAIOU",[[-1,1718,"![overloading-vs-overriding]($resource/overloading-vs-overriding.png)"]],[1718,1787],[1718,1718]]],[1562728222133,["GJX@GJXAIOU",[[1,1677,"![overloading-vs-overriding]($resource/overloading-vs-overriding.png)"]],[1677,1677],[1746,1746]]],[1562728223596,["GJX@GJXAIOU",[[1,1747,"\n"]],[1746,1746],[1747,1747]]],[1562728345852,["GJX@GJXAIOU",[[1,100,"**"],[1,111,"**"]],[100,111],[100,115]]],[1562728351901,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1562728352015,["GJX@GJXAIOU",[[1,17,"\n"]],[16,16],[17,17]]],[1562728352149,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1562728358432,["GJX@GJXAIOU",[[1,16,"@toc"]],[16,16],[20,20]]],[1562728374406,["GJX@GJXAIOU",[[1,63,"#"]],[63,63],[77,77]]],[1562728382229,["GJX@GJXAIOU",[[1,377,"##"]],[377,377],[387,387]]],[1562728388342,["GJX@GJXAIOU",[[1,886,"##"]],[886,886],[900,900]]],[1562728391789,["GJX@GJXAIOU",[[1,939,"#"]],[939,939],[953,953]]],[1562728395925,["GJX@GJXAIOU",[[1,1227,"#"]],[1227,1227],[1239,1239]]],[1562728400038,["GJX@GJXAIOU",[[1,1413,"#"]],[1413,1413],[1417,1417]]],[1562728422045,["GJX@GJXAIOU",[[1,1809,"## er"]],[1809,1809],[1814,1814]]],[1562728422860,["GJX@GJXAIOU",[[-1,1812,"er"]],[1814,1814],[1812,1812]]],[1562728425196,["GJX@GJXAIOU",[[1,1812,"二、为什么函数返回值不能重载"]],[1812,1812],[1826,1826]]],[1562728480525,["GJX@GJXAIOU",[[1,141,"**"],[1,146,"**："]],[141,146],[149,149]]],[1562728484206,["GJX@GJXAIOU",[[1,151," "]],[151,151],[152,152]]],[1562728617802,[null,[[1,148,"："],[-1,150,"："]],[148,148],[150,150]]],[1562728617802,[null,[[-1,148,"："],[1,151,"："]],[150,150],[148,148]]],[1562728600406,["GJX@GJXAIOU",[[1,79,"- "]],[79,79],[81,81]]],[1562728607381,["GJX@GJXAIOU",[[1,143,"- "]],[143,143],[145,145]]],[1562728610262,["GJX@GJXAIOU",[[1,201,"- "]],[201,201],[203,203]]],[1562728616804,["GJX@GJXAIOU",[[-1,379,"实例如下："]],[379,384],[379,379]]],[1562728677802,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562728677802,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562728642214,["GJX@GJXAIOU",[[1,379,"示例"]],[379,379],[381,381]]],[1562728642860,["GJX@GJXAIOU",[[-1,379,"示例"]],[381,381],[379,379]]],[1562728643422,["GJX@GJXAIOU",[[1,382,"\n"]],[379,379],[380,380]]],[1562728646424,["GJX@GJXAIOU",[[1,380,"示例代码："]],[380,380],[385,385]]],[1562728647083,["GJX@GJXAIOU",[[1,388,"\n"]],[385,385],[386,386]]],[1562728648612,["GJX@GJXAIOU",[[1,386,"```"]],[386,386],[389,389]]],[1562728648638,["GJX@GJXAIOU",[[1,389,"language\n```\n"]],[389,389],[389,397]]],[1562728649423,["GJX@GJXAIOU",[[-1,389,"language"],[1,397,"j"]],[389,397],[390,390]]],[1562728649798,["GJX@GJXAIOU",[[1,390,"ava"]],[390,390],[393,393]]],[1562728649923,["GJX@GJXAIOU",[[1,394,"\n"]],[393,393],[394,394]]],[1562728653230,["GJX@GJXAIOU",[[1,354,"- "]],[354,354],[356,356]]],[1562728655987,["GJX@GJXAIOU",[[1,382,"\n"]],[382,382],[383,383]]],[1562728665282,["GJX@GJXAIOU",[[1,397,"class  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  }  }"]],[397,397],[763,763]]],[1562728667410,["GJX@GJXAIOU",[[-1,397,"class  Animal{  public  void  move(){  System.out.println(\"动物可以移动\"); }  }  class  Dog  extends  Animal{  public  void  move(){  System.out.println(\"狗可以跑和走\"); }  }  public  class  TestDog{  public  static  void  main(String  args[]){  Animal  a = new  Animal(); // Animal 对象  Animal  b = new  Dog(); // Dog 对象  a.move();// 执行 Animal 类的方法  b.move();//执行 Dog 类的方法  }  }"]],[763,763],[397,397]]],[1562728669720,["GJX@GJXAIOU",[[1,397,"class Animal{\n   public void move(){\n      System.out.println(\"动物可以移动\");\n   }\n}\n \nclass Dog extends Animal{\n   public void move(){\n      System.out.println(\"狗可以跑和走\");\n   }\n}\n \npublic class TestDog{\n   public static void main(String args[]){\n      Animal a = new Animal(); // Animal 对象\n      Animal b = new Dog(); // Dog 对象\n \n      a.move();// 执行 Animal 类的方法\n \n      b.move();//执行 Dog 类的方法\n   }\n}"]],[397,397],[792,792]]],[1562728797806,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562728797806,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562728749516,["GJX@GJXAIOU",[[-1,754,"\n"]],[755,755],[754,754]]],[1562728777219,["GJX@GJXAIOU",[[1,792,"\n"]],[791,791],[792,792]]],[1562728781445,["GJX@GJXAIOU",[[1,792,"//OutPUt"]],[792,792],[800,800]]],[1562728782556,["GJX@GJXAIOU",[[-1,798,"Ut"]],[800,800],[798,798]]],[1562728783735,["GJX@GJXAIOU",[[1,798,"ut:"]],[798,798],[801,801]]],[1562728784612,["GJX@GJXAIOU",[[1,802,"\n"]],[801,801],[802,802]]],[1562728790181,["GJX@GJXAIOU",[[-1,793,"/"]],[792,794],[793,793]]],[1562728791156,["GJX@GJXAIOU",[[1,793,"*"]],[793,793],[794,794]]],[1562728794998,["GJX@GJXAIOU",[[1,800,"\n"]],[800,800],[801,801]]],[1562728796019,["GJX@GJXAIOU",[[-1,800,"\n"]],[801,801],[800,800]]],[1562728797691,["GJX@GJXAIOU",[[1,803,"\n"]],[801,801],[802,802]]],[1562728857818,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562728857818,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562728798013,["GJX@GJXAIOU",[[1,804,"\n"]],[802,802],[803,803]]],[1562728803724,["GJX@GJXAIOU",[[1,802,"动物可以移动  狗可以跑和走"]],[802,802],[816,816]]],[1562728805972,["GJX@GJXAIOU",[[1,810,"\n"]],[810,810],[811,811]]],[1562728808870,["GJX@GJXAIOU",[[1,818,"*?"]],[818,818],[820,820]]],[1562728809444,["GJX@GJXAIOU",[[-1,819,"?"]],[820,820],[819,819]]],[1562728809877,["GJX@GJXAIOU",[[1,819,"/"]],[819,819],[820,820]]],[1562728811643,["GJX@GJXAIOU",[[-1,821,"\n"]],[821,821],[820,820]]],[1562728833725,["GJX@GJXAIOU",[[1,825,"在上面的例子中可以看到，尽管b属于Animal类型，但是它运行的是Dog类的move方法。\n\n这是由于在编译阶段，只是检查参数的引用类型。\n\n然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。\n\n因此在上面的例子中，之所以能编译成功，是因为Animal类中存在move方法，然而运行时，运行的是特定对象的方法。"]],[825,825],[992,992]]],[1562728853771,["GJX@GJXAIOU",[[1,876,"**"],[1,893,"**"]],[876,893],[876,897]]],[1562728855676,["GJX@GJXAIOU",[[-1,871,"\n"]],[871,871],[870,870]]],[1562728857395,["GJX@GJXAIOU",[[-1,898,"\n"]],[899,899],[898,898]]],[1562728857781,["GJX@GJXAIOU",[[-1,897,"\n"]],[898,898],[897,897]]],[1562728917820,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562728917820,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562728864131,["GJX@GJXAIOU",[[-1,935,"\n"]],[936,936],[935,935]]],[1562728865195,["GJX@GJXAIOU",[[-1,934,"\n"]],[935,935],[934,934]]],[1562728901271,["GJX@GJXAIOU",[[1,991,"ruguo"]],[991,991],[996,996]]],[1562728903068,["GJX@GJXAIOU",[[-1,991,"ruguo"]],[996,996],[991,991]]],[1562728903613,["GJX@GJXAIOU",[[1,991,"rugo"]],[991,991],[995,995]]],[1562728904908,["GJX@GJXAIOU",[[-1,991,"rugo"]],[995,995],[991,991]]],[1562728905815,["GJX@GJXAIOU",[[1,991,"rugu"]],[991,991],[995,995]]],[1562728906515,["GJX@GJXAIOU",[[-1,991,"rugu"]],[995,995],[991,991]]],[1562728908006,["GJX@GJXAIOU",[[1,991,"如果"]],[991,991],[993,993]]],[1562728908788,["GJX@GJXAIOU",[[1,996,"\n"]],[993,993],[994,994]]],[1562728908894,["GJX@GJXAIOU",[[1,994,"a"]],[994,994],[995,995]]],[1562728909604,["GJX@GJXAIOU",[[-1,994,"a"]],[995,995],[994,994]]],[1562728909709,["GJX@GJXAIOU",[[-1,996,"\n"]],[994,994],[993,993]]],[1562728910557,["GJX@GJXAIOU",[[1,993,"A"]],[993,993],[994,994]]],[1562728910586,["GJX@GJXAIOU",[[1,993," "]],[994,994],[995,995]]],[1562728914113,["GJX@GJXAIOU",[[1,995,"nimal类"]],[995,995],[1001,1001]]],[1562728914141,["GJX@GJXAIOU",[[1,1000," "]],[1001,1001],[1002,1002]]],[1562728916096,["GJX@GJXAIOU",[[1,1002,"中没有"]],[1002,1002],[1005,1005]]],[1562728977820,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562728977820,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562728918839,["GJX@GJXAIOU",[[1,1005,"move"]],[1005,1005],[1009,1009]]],[1562728918867,["GJX@GJXAIOU",[[1,1005," "]],[1009,1009],[1010,1010]]],[1562728919911,["GJX@GJXAIOU",[[1,1010,"方法"]],[1010,1010],[1012,1012]]],[1562728919937,["GJX@GJXAIOU",[[1,1010," "]],[1012,1012],[1013,1013]]],[1562728925237,["GJX@GJXAIOU",[[1,1013,"，就会编译错误；"]],[1013,1013],[1021,1021]]],[1562729097823,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562729097823,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562729069116,["GJX@GJXAIOU",[[1,2630,"\n"]],[2629,2629],[2630,2630]]],[1562729069723,["GJX@GJXAIOU",[[1,2630,"wiki百科上对函数的定义是： 函数将有效的输入值变换为唯一的输出值，同一输入总是对应同一输出。\n\n        如果返回值的类型 能用来 重载， 那么 相同的输入值  可能 有 不同的 输出值，  这违反了  数学概念中  对 函数的定义 。"]],[2630,2630],[2753,2753]]],[1562729073620,["GJX@GJXAIOU",[[-1,2680,"        如"]],[2680,2689],[2680,2680]]],[1562729076863,["GJX@GJXAIOU",[[1,2680,"如"],[-1,2706," "],[1,2707," "],[-1,2721," "],[1,2722," "],[-1,2727," "],[1,2728," "],[-1,2734," "],[1,2735," "]],[2680,2680],[2681,2681]]],[1562729094971,["GJX@GJXAIOU",[[1,2746,"\n"]],[2745,2745],[2746,2746]]],[1562729095966,["GJX@GJXAIOU",[[1,2747,"\n"]],[2746,2746],[2747,2747]]],[1562729096379,["GJX@GJXAIOU",[[1,2747," 返回值  是  对外 沟通 的 唯一结果，   如果对外的结果 不能 唯一，    那么说明这一步的处理还没有完成，还需要相关的协同步骤来继续处理，  直到它能做到 “同一输入总是对应同一输出”。  那么 这一步处理 就算完成了，可以进入 事情 的下一步了。"]],[2747,2747],[2877,2877]]],[1562729337829,[null,[[1,152,"："],[-1,154,"："]],[152,152],[154,154]]],[1562729337829,[null,[[-1,152,"："],[1,155,"："]],[154,154],[152,152]]],[1562729293046,["GJX@GJXAIOU",[[-1,2053,"* * *"]],[2053,2058],[2053,2053]]],[1562729303102,["GJX@GJXAIOU",[[1,1917," "],[-1,2742," "],[1,2743," "],[-1,2747," 是  "],[1,2751," 是  "],[-1,2765," "],[1,2766," "],[-1,2782,"   "],[1,2785,"   "],[-1,2818," "],[1,2819," "],[-1,2842," "],[1,2843," "]],[1917,1917],[1918,1918]]],[1562729304693,["GJX@GJXAIOU",[[1,1921," "]],[1921,1921],[1922,1922]]],[1562729310845,["GJX@GJXAIOU",[[1,1923," "]],[1923,1923],[1924,1924]]],[1562729311724,["GJX@GJXAIOU",[[1,1927," "]],[1927,1927],[1928,1928]]],[1562729312901,["GJX@GJXAIOU",[[1,1916," "]],[1916,1916],[1917,1917]]],[1562729314174,["GJX@GJXAIOU",[[1,1913," "]],[1913,1913],[1914,1914]]],[1562729325767,["GJX@GJXAIOU",[[1,1931," "]],[1931,1931],[1932,1932]]],[1562729333956,["GJX@GJXAIOU",[[1,1930," "]],[1929,1929],[1930,1930]]],[1562729335443,["GJX@GJXAIOU",[[-1,1930," "]],[1930,1930],[1929,1929]]]],null,"GJX@GJXAIOU"],["f327f938-ba3a-4d7e-95d1-df26e0d59ca2",1566096956150,"# 为什么函数返回值不能重载\n\n@toc\n\n\n## 一、区别函数重写（Override）和函数重载（Overload）\n\n### 重写(Override)\n\n- 重写是子类对父类的允许访问的方法的实现过程进行重新编写, **返回值和形参都不能改变**。**即外壳不变，核心重写！**\n\n- **重写的好处：** 在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。\n\n- 重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。\n\n- 在面向对象原则里，重写意味着可以重写任何现有方法。\n\n示例代码：\n```java\nclass Animal{\n   public void move(){\n      System.out.println(\"动物可以移动\");\n   }\n}\n \nclass Dog extends Animal{\n   public void move(){\n      System.out.println(\"狗可以跑和走\");\n   }\n}\n \npublic class TestDog{\n   public static void main(String args[]){\n      Animal a = new Animal(); // Animal 对象\n      Animal b = new Dog(); // Dog 对象\n \n      a.move();// 执行 Animal 类的方法 \n      b.move();//执行 Dog 类的方法\n   }\n}\n/*OutPut:\n动物可以移动  \n狗可以跑和走\n*/\n```\n在上面的例子中可以看到，尽管b属于Animal类型，但是它运行的是Dog类的move方法。\n这是由于**在编译阶段，只是检查参数的引用类型**。然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。因此在上面的例子中，之所以能编译成功，是因为Animal类中存在move方法，然而运行时，运行的是特定对象的方法。如果 Animal 类中没有 move 方法，就会编译错误；\n\n\n#### 方法的重写规则\n\n*   参数列表必须完全与被重写方法的相同；\n*   返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）；\n*   访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。\n*   父类的成员方法只能被它的子类重写。\n*   声明为final的方法不能被重写。\n*   声明为static的方法不能被重写，但是能够被再次声明。\n*   子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。\n*   子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。\n*   重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\n*   构造方法不能被重写。\n*   如果不能继承一个方法，则不能重写这个方法。\n\n#### Super关键字的使用\n\n当需要在子类中调用父类的被重写方法时，要使用super关键字。\n\n\n\n### 重载(Overload)\n\n重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器的重载。\n\n**重载规则:**\n\n*   被重载的方法必须改变参数列表(参数个数或类型不一样)；\n*   被重载的方法可以改变返回类型；\n*   被重载的方法可以改变访问修饰符；\n*   被重载的方法可以声明新的或更广的检查异常；\n*   方法能够在同一个类中或者在一个子类中被重载。\n*   无法以返回值类型作为重载函数的区分标准。\n\n\n\n### 重写与重载之间的区别\n\n| 区别点 | 重载方法 | 重写方法 |\n| --- | --- | --- | \n| 参数列表 | 必须修改 | 一定不能修改 |\n| 返回类型 | 可以修改 | 一定不能修改 |\n| 异常 | 可以修改 | 可以减少或删除，一定不能抛出新的或者更广的异常 |\n| 访问 | 可以修改 | 一定不能做更严格的限制（可以降低限制） |\n\n\n\n### 总结\n\n方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。\n\n*   (1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。\n*   (2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。\n*   (3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。\n\n![overloading-vs-overriding]($resource/overloading-vs-overriding.png)\n\n![20171102-1]($resource/20171102-1.jpg)\n\n\n## 二、为什么函数返回值不能重载\n\n**重载函数**是函数的一种特殊情况，为方便使用，C++允许在同一范围中声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同，也就是说用同一个函数完成不同的功能。这就是重载函数。重载函数常用来实现功能类似而所处理的数据类型不同的问题。不能只有函数返回值类型不同。\n\nwiki百科上对函数的定义是： 函数将有效的输入值变换为唯一的输出值，同一输入总是对应同一输出。\n\n如果返回值的类型 能用来 重载， 那么 相同的输入值  可能 有 不同的 输出值，  这违反了  数学概念中  对 函数的定义 。\n\n 返回值  是  对外 沟通 的 唯一结果，   如果对外的结果 不能 唯一，    那么说明这一步的处理还没有完成，还需要相关的协同步骤来继续处理，  直到它能做到 “同一输入总是对应同一输出”。  那么 这一步处理 就算完成了，可以进入 事情 的下一步了。\n",[[1566096944469,["GJX@GJXAIOU",[[1,2702,"**"],[1,2747,"**"]],[2702,2747],[2702,2751]]],[1566096947018,["GJX@GJXAIOU",[[1,2753,"\n"]],[2751,2751],[2752,2752]]],[1566096948093,["GJX@GJXAIOU",[[1,2752,"lingyi"]],[2752,2752],[2758,2758]]],[1566096949898,["GJX@GJXAIOU",[[-1,2752,"lingyi"]],[2758,2758],[2752,2752]]],[1566096954933,["GJX@GJXAIOU",[[1,2752,"另一种："]],[2752,2752],[2756,2756]]],[1566096970268,["GJX@GJXAIOU",[[1,2756,"可能村上"]],[2756,2756],[2760,2760]]],[1566096971842,["GJX@GJXAIOU",[[-1,2758,"村上"]],[2760,2760],[2758,2758]]],[1566096981840,["GJX@GJXAIOU",[[1,2758,"存在向上取整"]],[2758,2758],[2764,2764]]],[1566097044098,["GJX@GJXAIOU",[[-1,1656,"\n"]],[1656,1656],[1655,1655]]],[1566097044867,["GJX@GJXAIOU",[[-1,1690,"\n"]],[1690,1690],[1689,1689]]],[1566097045802,["GJX@GJXAIOU",[[-1,1603,"\n"]],[1603,1603],[1602,1602]]],[1566097047066,["GJX@GJXAIOU",[[-1,1550,"\n"]],[1550,1550],[1549,1549]]],[1566097049026,["GJX@GJXAIOU",[[-1,1037,"\n"]],[1037,1037],[1036,1036]]],[1566097074910,["GJX@GJXAIOU",[[1,2148,"重载"]],[2148,2148],[2150,2150]]],[1566097097535,["GJX@GJXAIOU",[[1,2150,"实现的是编译时的多态性，重写实现的是雨欣"]],[2150,2150],[2170,2170]]],[1566097098114,["GJX@GJXAIOU",[[-1,2168,"雨欣"]],[2170,2170],[2168,2168]]],[1566097103558,["GJX@GJXAIOU",[[1,2168,"运行时的所泰兴"]],[2168,2168],[2175,2175]]],[1566097104218,["GJX@GJXAIOU",[[-1,2172,"所泰兴"]],[2175,2175],[2172,2172]]],[1566097109158,["GJX@GJXAIOU",[[1,2172,"多态性。"]],[2172,2172],[2176,2176]]],[1566098584968,["GJX@GJXAIOU",[[1,2502,"\n"]],[2501,2501],[2502,2502]]],[1566098588382,["GJX@GJXAIOU",[[1,2502,"****"]],[2502,2502],[2504,2504]]],[1566098590627,["GJX@GJXAIOU",[[1,2504,"说法一："]],[2504,2504],[2508,2508]]],[1566098594808,["GJX@GJXAIOU",[[1,2929," \n"]],[2928,2928],[2930,2930]]],[1566098594936,["GJX@GJXAIOU",[[-1,2929," "],[1,2930,"\n"]],[2930,2930],[2930,2930]]],[1566098595754,["GJX@GJXAIOU",[[-1,2930,"\n"],[1,2931,"*"]],[2930,2930],[2931,2931]]],[1566098595910,["GJX@GJXAIOU",[[1,2931,"***"]],[2931,2931],[2932,2932]]],[1566098598290,["GJX@GJXAIOU",[[1,2932,"说法二："]],[2932,2932],[2936,2936]]],[1566098600000,["GJX@GJXAIOU",[[1,2938,"\n\n"]],[2938,2938],[2939,2939]]],[1566098615306,["GJX@GJXAIOU",[[1,2939,"举个例子：\n\n```\nfloat max(int a, int b);int max(int a, int b);\n```\n\n上面两个方法，别人调用的时候，不要返回值，直接就是：max(...)，你能区分出它想调用哪个函数吗？\n\n当调用max(1, 2);时无法确定调用的是哪个，单从这一点上来说，仅返回值类型不同的重载是不应该允许的。\n\n另外，在Java虚拟机中也有提到重载的问题：\n\n![](https://img-blog.csdn.net/20180627221226801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NpbWJhX2NoZW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n在《深入理解Java虚拟机》中，6.3.6章节有这样一段：\n\n    在Java语言中，要重载一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名；\n\n    特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合，也就是因为返回值不会包含在特征签名之中，因此Java语言里面是无法仅仅依靠返回值的不同来对一个已有方法进行重载。\n\n    但在Class文件格式之中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法也可以共存。\n\n    也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法存于同一个Class文件中的。\n\nClass文件中同方法名、同参数、不同返回值可以，那为什么Java文件中不行呢？\n\n因为Java语言规范的规定，所以编译时会出现错误。\n\n那为什么Class文件可以呢？因为Java虚拟机规范和Java语言规范不同，两者是分开的...\n\n如有更多兴趣，可以看看这篇文章\n\n[Java语言层面和JVM层面方法特征签名的区别 及 实例分析](https://blog.csdn.net/tjiyu/article/details/53891813)"]],[2939,2939],[3823,3823]]],[1566098618680,["GJX@GJXAIOU",[[-1,2945,"\n"]],[2945,2945],[2944,2944]]],[1566098620895,["GJX@GJXAIOU",[[1,2973,"\n"]],[2973,2973],[2974,2974]]],[1566098626303,["GJX@GJXAIOU",[[-1,3001,"\n"]],[3001,3001],[3000,3000]]],[1566098628568,["GJX@GJXAIOU",[[-1,3052,"\n"]],[3052,3052],[3051,3051]]],[1566098636584,["GJX@GJXAIOU",[[-1,3131,"![](https://img-blog.csdn.net/20180627221226801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NpbWJhX2NoZW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"]],[3131,3298],[3131,3131]]],[1566098639298,["GJX@GJXAIOU",[[-1,3107,"另外，在Java虚拟机中也有提到重载的问题："]],[3107,3129],[3107,3107]]],[1566098643473,["GJX@GJXAIOU",[[1,3111,"*"],[-1,3142,"    "],[1,3146,"    "],[-1,3205,"    "],[1,3209,"    "],[-1,3298,"    "],[1,3302,"    "],[-1,3352,"    "],[1,3356,"    "]],[3111,3111],[3112,3112]]],[1566098643630,["GJX@GJXAIOU",[[1,3112,"***"]],[3112,3112],[3113,3113]]],[1566098644939,["GJX@GJXAIOU",[[1,3113,"方法"]],[3113,3113],[3115,3115]]],[1566098647552,["GJX@GJXAIOU",[[-1,3113,"**方法"]],[3115,3115],[3111,3111]]],[1566098647928,["GJX@GJXAIOU",[[-1,3110,"\n"]],[3111,3111],[3110,3110]]],[1566098649281,["GJX@GJXAIOU",[[-1,3109,"\n"]],[3110,3110],[3109,3109]]],[1566098650970,["GJX@GJXAIOU",[[-1,3109,"**"]],[3111,3111],[3109,3109]]],[1566098651687,["GJX@GJXAIOU",[[1,3109,"\n"]],[3109,3109],[3110,3110]]],[1566098653702,["GJX@GJXAIOU",[[1,3109,"****"]],[3109,3109],[3111,3111]]],[1566098656587,["GJX@GJXAIOU",[[1,3111,"说法三："]],[3111,3111],[3115,3115]]],[1566098659187,["GJX@GJXAIOU",[[-1,3148,"\n"]],[3148,3148],[3147,3147]]],[1566098662224,["GJX@GJXAIOU",[[-1,3210,"\n"]],[3210,3210],[3209,3209]]],[1566098664218,["GJX@GJXAIOU",[[-1,3302,"\n"]],[3302,3302],[3301,3301]]],[1566098666336,["GJX@GJXAIOU",[[-1,3355,"\n"]],[3355,3355],[3354,3354]]],[1566098695433,["GJX@GJXAIOU",[[1,3414,"\n"]],[3413,3413],[3414,3414]]],[1566098696067,["GJX@GJXAIOU",[[1,3414,"-"]],[3414,3414],[3415,3415]]],[1566098701003,["GJX@GJXAIOU",[[1,3415," Java代码"]],[3415,3415],[3422,3422]]],[1566098701033,["GJX@GJXAIOU",[[1,3420," "]],[3422,3422],[3423,3423]]],[1566098709909,["GJX@GJXAIOU",[[1,3423,"的方法特征前面"]],[3423,3423],[3430,3430]]],[1566098710503,["GJX@GJXAIOU",[[-1,3428,"前面"]],[3430,3430],[3428,3428]]],[1566098721686,["GJX@GJXAIOU",[[1,3428,"签名包括：方法名称、参数熟悉怒"]],[3428,3428],[3443,3443]]],[1566098722766,["GJX@GJXAIOU",[[-1,3440,"熟悉怒"]],[3443,3443],[3440,3440]]],[1566098730267,["GJX@GJXAIOU",[[1,3440,"顺序、参数类型；"]],[3440,3440],[3448,3448]]],[1566098730551,["GJX@GJXAIOU",[[1,3449,"- \n"]],[3448,3448],[3451,3451]]],[1566098746514,["GJX@GJXAIOU",[[1,3451,"字节码的特征签名包括："]],[3451,3451],[3462,3462]]],[1566098750023,["GJX@GJXAIOU",[[-1,3459,"包括："]],[3462,3462],[3459,3459]]],[1566098755210,["GJX@GJXAIOU",[[1,3459,"海报框"]],[3459,3459],[3462,3462]]],[1566098756104,["GJX@GJXAIOU",[[-1,3459,"海报框"]],[3462,3462],[3459,3459]]],[1566098758268,["GJX@GJXAIOU",[[1,3459,"h"]],[3459,3459],[3460,3460]]],[1566098758297,["GJX@GJXAIOU",[[1,3459," "]],[3460,3460],[3461,3461]]],[1566098758634,["GJX@GJXAIOU",[[1,3461,"ia"]],[3461,3461],[3463,3463]]],[1566098760286,["GJX@GJXAIOU",[[-1,3459," hia"]],[3463,3463],[3459,3459]]],[1566098771363,["GJX@GJXAIOU",[[1,3459,"还包括：方法返回值、。"]],[3459,3459],[3470,3470]]],[1566098774064,["GJX@GJXAIOU",[[-1,3469,"。"]],[3470,3470],[3469,3469]]],[1566098780955,["GJX@GJXAIOU",[[1,3469,"受查异常表；"]],[3469,3469],[3475,3475]]],[1566103980546,["GJX@GJXAIOU",[[-1,3594,"如有更多兴趣，可以看看这篇文章\n\n[Java语言层面和JVM层面方法特征签名的区别 及 实例分析](https://blog.csdn.net/tjiyu/article/details/53891813)"]],[3594,3697],[3594,3594]]],[1566103990354,["GJX@GJXAIOU",[[1,3594,"### 方法"]],[3594,3594],[3600,3600]]],[1566103995503,["GJX@GJXAIOU",[[1,3600,"特征签名"]],[3600,3600],[3604,3604]]],[1566103995832,["GJX@GJXAIOU",[[1,3605,"\n"]],[3604,3604],[3605,3605]]],[1566103996946,["GJX@GJXAIOU",[[-1,3605,"\n"],[1,3606,"f"]],[3605,3605],[3606,3606]]],[1566103997510,["GJX@GJXAIOU",[[1,3606,"angf"]],[3606,3606],[3610,3610]]],[1566103998202,["GJX@GJXAIOU",[[-1,3606,"angf"]],[3610,3610],[3606,3606]]],[1566103998368,["GJX@GJXAIOU",[[-1,3605,"f"],[1,3606,"\n"]],[3606,3606],[3605,3605]]],[1566103999670,["GJX@GJXAIOU",[[-1,3605,"\n"],[1,3606,"方法"]],[3605,3605],[3607,3607]]],[1566104023490,["GJX@GJXAIOU",[[1,3607,"特征签名用于区分两个不同方法的语法符号；"]],[3607,3607],[3627,3627]]],[1566104074808,["GJX@GJXAIOU",[[1,3627,"\n\n"]],[3627,3627],[3628,3628]]],[1566104074954,["GJX@GJXAIOU",[[1,3629,"\n"]],[3628,3628],[3629,3629]]],[1566104075088,["GJX@GJXAIOU",[[1,3630,"\n"]],[3629,3629],[3630,3630]]],[1566104079307,["GJX@GJXAIOU",[[1,3629,"> **（A）、Java语言层面的方法特征签名：**\n> \n>      特征签名 = 方法名 + 参数类型 + 参数顺序；\n> \n>       更多请参考：[http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html%23jls-8.4.2)\n> \n> **（B）、JVM层面的方法特征签名：**\n> \n>      特征签名 = 方法名 + 参数类型 + 参数顺序 + 返回值类型；\n> \n>       如果存在类型变量或参数化类型，还包括类型变量或参数化类型编译未擦除类型前的信息（FormalTypeParametersopt），和抛出的异常信息（ThrowsSignature），即方法名+签名；\n\n**      Java语言重载（Overload）一个方法，需要Java语言层面的方法特征签名不同，即不包括方法返回值；而Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样，也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型。**\n\n**      同样的，对字段来说，Java语言规定字段无法重载，名称必须不一样；但对Class文件来说，只要两个字段描述（类型）不一样，名称一样也是可以的。**"]],[3629,3629],[4256,4256]]],[1566104081637,["GJX@GJXAIOU",[[-1,3629,"> **（A）、Java语言层面的方法特征签名：**\n> \n>      特征签名 = 方法名 + 参数类型 + 参数顺序；\n> \n>       更多请参考：[http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html%23jls-8.4.2)\n> \n> **（B）、JVM层面的方法特征签名：**\n> \n>      特征签名 = 方法名 + 参数类型 + 参数顺序 + 返回值类型；\n> \n>       如果存在类型变量或参数化类型，还包括类型变量或参数化类型编译未擦除类型前的信息（FormalTypeParametersopt），和抛出的异常信息（ThrowsSignature），即方法名+签名；\n\n**      Java语言重载（Overload）一个方法，需要Java语言层面的方法特征签名不同，即不包括方法返回值；而Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样，也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型。**\n\n**      同样的，对字段来说，Java语言规定字段无法重载，名称必须不一样；但对Class文件来说，只要两个字段描述（类型）不一样，名称一样也是可以的。**"]],[4256,4256],[3629,3629]]],[1566104083860,["GJX@GJXAIOU",[[1,3629,"（A）、Java语言层面的方法特征签名：\n\n     特征签名 = 方法名 + 参数类型 + 参数顺序；\n\n      更多请参考：http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2\n\n（B）、JVM层面的方法特征签名：\n\n     特征签名 = 方法名 + 参数类型 + 参数顺序 + 返回值类型；\n\n      如果存在类型变量或参数化类型，还包括类型变量或参数化类型编译未擦除类型前的信息（FormalTypeParametersopt），和抛出的异常信息（ThrowsSignature），即方法名+签名；\n\n      Java语言重载（Overload）一个方法，需要Java语言层面的方法特征签名不同，即不包括方法返回值；而Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样，也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型。\n\n      同样的，对字段来说，Java语言规定字段无法重载，名称必须不一样；但对Class文件来说，只要两个字段描述（类型）不一样，名称一样也是可以的。"]],[3629,3629],[4143,4143]]],[1566104092439,["GJX@GJXAIOU",[[-1,3651,"     "]],[3656,3656],[3651,3651]]],[1566104092824,["GJX@GJXAIOU",[[-1,3650,"\n"]],[3651,3651],[3650,3650]]],[1566104101051,["GJX@GJXAIOU",[[-1,3629,"（A）、"]],[3629,3633],[3629,3629]]],[1566104101482,["GJX@GJXAIOU",[[1,3629,"- "]],[3629,3629],[3631,3631]]],[1566104473304,["GJX@GJXAIOU",[[-1,3679,"  "]],[3681,3681],[3679,3679]]],[1566104487790,["GJX@GJXAIOU",[[-1,3676,"   更多请参考：http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2"]],[3677,3754],[3676,3676]]],[1566104490318,["GJX@GJXAIOU",[[-1,3678,"（B）、"]],[3678,3682],[3678,3678]]],[1566104491410,["GJX@GJXAIOU",[[1,3678,"="]],[3678,3678],[3679,3679]]],[1566104492392,["GJX@GJXAIOU",[[-1,3678,"="]],[3679,3679],[3678,3678]]],[1566104493040,["GJX@GJXAIOU",[[1,3678,"- "]],[3678,3678],[3680,3680]]],[1566104494217,["GJX@GJXAIOU",[[-1,3677,"\n"]],[3677,3677],[3676,3676]]],[1566104494639,["GJX@GJXAIOU",[[-1,3675," "]],[3676,3676],[3675,3675]]],[1566104495093,["GJX@GJXAIOU",[[-1,3675,"\n"]],[3675,3675],[3674,3674]]],[1566104500001,["GJX@GJXAIOU",[[-1,3692,"     "]],[3693,3697],[3692,3692]]],[1566104500422,["GJX@GJXAIOU",[[-1,3691,"\n"]],[3692,3692],[3691,3691]]],[1566104511889,["GJX@GJXAIOU",[[-1,3726,"      "]],[3732,3732],[3726,3726]]],[1566104536015,["GJX@GJXAIOU",[[-1,3830,"   "]],[3833,3833],[3830,3830]]],[1566104538878,["GJX@GJXAIOU",[[-1,3961,"   "]],[3964,3964],[3961,3961]]],[1566104823559,["GJX@GJXAIOU",[[1,4034,"\n"]],[4033,4033],[4034,4034]]],[1566104823663,["GJX@GJXAIOU",[[1,4035,"\n"]],[4034,4034],[4035,4035]]],[1566104824157,["GJX@GJXAIOU",[[1,4035,"## **2、实例分析验证**\n\n> 下面我们先用javac编译测试程序JavacTestOverload.java，测试程序如下：\n\n> > ```\n> > public class JavacTestOverload {     public String method1(String str) {        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc        System.out.println(\"invoke \" + mtdName + \" return String\");        return \"\";    }     public int method2(String str) {        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();        System.out.println(\"invoke \" + mtdName + \" return int\");        return 1;    }             public static void main(String[] args) {        JavacTestOverload javacTestOverload = new JavacTestOverload();        String str = javacTestOverload.method1(\"Test\");        int i = javacTestOverload.method2(\"Test\");    }     }\n> > ```\n\n> 注意，public String method1(String str)方法和public String method2(String str)方法，方法名称和返回值类型不同，而参数一样，因为方法名不同，是同时满足Java语言层面的方法特征签名和JVM层面的方法特征签名的要求；\n> \n>      如果方法名相同（都为\"method1\"），就不满足ava语言层面的方法特征签名的要求，javac编译就会出现错误，如下：\n\n![](https://img-blog.csdn.net/20161227005740118)\n\n> 我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n![](https://img-blog.csdn.net/20161227005740478)\n\n> 接着，我们用javap反编译JavacTestOverload..class文件，并保存到JavacTestOverload..txt文件，方便对照分析：\n> \n> > javap -verbose JavacTestOverload> JavacTestOverload..txt\n\n![](https://img-blog.csdn.net/20161227005740837)\n\n> 然后，通过分析JavacTestOverload..txt反编译信息，可以知道\"method2\"方法名称对应的常量为第27项，描述符为第28项（\"method1\"方法的分别为第25、26项），如下：\n\n![](https://img-blog.csdn.net/20161227005741056)\n\n> 而后，在JavacTestOverload..class找到\"method2\"方法名称对应的字节码，修改为\"method1\"，修改前后如下（\"32\"--》\"31\"）：\n\n![](https://img-blog.csdn.net/20161227005741399)\n\n![](https://img-blog.csdn.net/20161227005741915)\n\n> 这样两个方法的名称就相同了，可以再通过反编译修改后的JavacTestOverload..class来对比，可以看到修改后生成的反编译信息中没有了\"method2\"的字符信息，都变为了\"method1\"，如下：\n\n![](https://img-blog.csdn.net/20161227005742368)\n\n![](https://img-blog.csdn.net/20161227005742775)\n\n> 而运行修改后的JavacTestOverload..class，可以看到两个方法运行时输出的名称都为\"method1\",也证明了两个方法的名称相同，如下：\n\n![](https://img-blog.csdn.net/20161227005743259)\n\n> **     到这里，这样就证明了：Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样的方法也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型 。**"]],[4035,4035],[6221,6221]]],[1566104829317,["GJX@GJXAIOU",[[-1,4035,"## **2、实例分析验证**\n\n> 下面我们先用javac编译测试程序JavacTestOverload.java，测试程序如下：\n\n> > ```\n> > public class JavacTestOverload {     public String method1(String str) {        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc        System.out.println(\"invoke \" + mtdName + \" return String\");        return \"\";    }     public int method2(String str) {        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();        System.out.println(\"invoke \" + mtdName + \" return int\");        return 1;    }             public static void main(String[] args) {        JavacTestOverload javacTestOverload = new JavacTestOverload();        String str = javacTestOverload.method1(\"Test\");        int i = javacTestOverload.method2(\"Test\");    }     }\n> > ```\n\n> 注意，public String method1(String str)方法和public String method2(String str)方法，方法名称和返回值类型不同，而参数一样，因为方法名不同，是同时满足Java语言层面的方法特征签名和JVM层面的方法特征签名的要求；\n> \n>      如果方法名相同（都为\"method1\"），就不满足ava语言层面的方法特征签名的要求，javac编译就会出现错误，如下：\n\n![](https://img-blog.csdn.net/20161227005740118)\n\n> 我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n![](https://img-blog.csdn.net/20161227005740478)\n\n> 接着，我们用javap反编译JavacTestOverload..class文件，并保存到JavacTestOverload..txt文件，方便对照分析：\n> \n> > javap -verbose JavacTestOverload> JavacTestOverload..txt\n\n![](https://img-blog.csdn.net/20161227005740837)\n\n> 然后，通过分析JavacTestOverload..txt反编译信息，可以知道\"method2\"方法名称对应的常量为第27项，描述符为第28项（\"method1\"方法的分别为第25、26项），如下：\n\n![](https://img-blog.csdn.net/20161227005741056)\n\n> 而后，在JavacTestOverload..class找到\"method2\"方法名称对应的字节码，修改为\"method1\"，修改前后如下（\"32\"--》\"31\"）：\n\n![](https://img-blog.csdn.net/20161227005741399)\n\n![](https://img-blog.csdn.net/20161227005741915)\n\n> 这样两个方法的名称就相同了，可以再通过反编译修改后的JavacTestOverload..class来对比，可以看到修改后生成的反编译信息中没有了\"method2\"的字符信息，都变为了\"method1\"，如下：\n\n![](https://img-blog.csdn.net/20161227005742368)\n\n![](https://img-blog.csdn.net/20161227005742775)\n\n> 而运行修改后的JavacTestOverload..class，可以看到两个方法运行时输出的名称都为\"method1\",也证明了两个方法的名称相同，如下：\n\n![](https://img-blog.csdn.net/20161227005743259)\n\n> **     到这里，这样就证明了：Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样的方法也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型 。**"]],[6221,6221],[4035,4035]]],[1566104832906,["GJX@GJXAIOU",[[1,4035,"2、实例分析验证\n      下面我们先用javac编译测试程序JavacTestOverload.java，测试程序如下：\n\npublic class JavacTestOverload {\n \n    public String method1(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc\n        System.out.println(\"invoke \" + mtdName + \" return String\");\n        return \"\";\n    }\n \n    public int method2(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return int\");\n        return 1;\n    }        \n \n    public static void main(String[] args) {\n        JavacTestOverload javacTestOverload = new JavacTestOverload();\n        String str = javacTestOverload.method1(\"Test\");\n        int i = javacTestOverload.method2(\"Test\");\n    }    \n \n}\n     注意，public String method1(String str)方法和public String method2(String str)方法，方法名称和返回值类型不同，而参数一样，因为方法名不同，是同时满足Java语言层面的方法特征签名和JVM层面的方法特征签名的要求；\n\n     如果方法名相同（都为\"method1\"），就不满足ava语言层面的方法特征签名的要求，javac编译就会出现错误，如下：\n\n\n\n     我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n\n\n     接着，我们用javap反编译JavacTestOverload..class文件，并保存到JavacTestOverload..txt文件，方便对照分析：\n\n     javap -verbose JavacTestOverload> JavacTestOverload..txt\n\n\n\n     然后，通过分析JavacTestOverload..txt反编译信息，可以知道\"method2\"方法名称对应的常量为第27项，描述符为第28项（\"method1\"方法的分别为第25、26项），如下：\n\n\n\n     而后，在JavacTestOverload..class找到\"method2\"方法名称对应的字节码，修改为\"method1\"，修改前后如下（\"32\"--》\"31\"）：\n\n\n\n\n\n     这样两个方法的名称就相同了，可以再通过反编译修改后的JavacTestOverload..class来对比，可以看到修改后生成的反编译信息中没有了\"method2\"的字符信息，都变为了\"method1\"，如下：\n\n\n\n\n\n     而运行修改后的JavacTestOverload..class，可以看到两个方法运行时输出的名称都为\"method1\",也证明了两个方法的名称相同，如下：\n\n\n\n \n\n     到这里，这样就证明了：Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样的方法也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型 。"]],[4035,4035],[5797,5797]]],[1566104835593,["GJX@GJXAIOU",[[-1,4035,"2、"]],[4035,4037],[4035,4035]]],[1566104836207,["GJX@GJXAIOU",[[1,4035,"## "]],[4035,4035],[4044,4044]]],[1566104850393,["GJX@GJXAIOU",[[1,4037,"##"]],[4037,4037],[4046,4046]]],[1566104868407,["GJX@GJXAIOU",[[-1,4102,"public class JavacTestOverload {\n \n    public String method1(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc\n        System.out.println(\"invoke \" + mtdName + \" return String\");\n        return \"\";\n    }\n \n    public int method2(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return int\");\n        return 1;\n    }        \n \n    public static void main(String[] args) {\n        JavacTestOverload javacTestOverload = new JavacTestOverload();\n        String str = javacTestOverload.method1(\"Test\");\n        int i = javacTestOverload.method2(\"Test\");\n    }    \n \n}"]],[4102,4882],[4102,4102]]],[1566104871730,["GJX@GJXAIOU",[[1,4102,"··"]],[4102,4102],[4104,4104]]],[1566104873032,["GJX@GJXAIOU",[[-1,4102,"··"]],[4104,4104],[4102,4102]]],[1566104874019,["GJX@GJXAIOU",[[1,4102,"```"]],[4102,4102],[4105,4105]]],[1566104874051,["GJX@GJXAIOU",[[1,4105,"language\n```\n"]],[4105,4105],[4105,4113]]],[1566104874913,["GJX@GJXAIOU",[[-1,4105,"language"],[1,4113,"j"]],[4105,4113],[4106,4106]]],[1566104875282,["GJX@GJXAIOU",[[1,4106,"ava"]],[4106,4106],[4109,4109]]],[1566104875463,["GJX@GJXAIOU",[[1,4110,"\n"]],[4109,4109],[4110,4110]]],[1566104878251,["GJX@GJXAIOU",[[1,4110,"public class JavacTestOverload {\n \n    public String method1(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc\n        System.out.println(\"invoke \" + mtdName + \" return String\");\n        return \"\";\n    }\n \n    public int method2(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return int\");\n        return 1;\n    }        \n \n    public static void main(String[] args) {\n        JavacTestOverload javacTestOverload = new JavacTestOverload();\n        String str = javacTestOverload.method1(\"Test\");\n        int i = javacTestOverload.method2(\"Test\");\n    }    \n \n}"]],[4110,4110],[4890,4890]]],[1566104881319,["GJX@GJXAIOU",[[-1,4101,"\n"]],[4101,4101],[4100,4100]]],[1566104889454,["GJX@GJXAIOU",[[-1,4267,"//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc"]],[4267,4337],[4267,4267]]],[1566104891533,["GJX@GJXAIOU",[[1,4188,"\n    "]],[4183,4183],[4188,4188]]],[1566104891990,["GJX@GJXAIOU",[[1,4188,"//获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc"]],[4188,4188],[4258,4258]]],[1566104897858,["GJX@GJXAIOU",[[-1,4903,"  "]],[4905,4905],[4903,4903]]],[1566104900015,["GJX@GJXAIOU",[[-1,5045,"    "]],[5045,5049],[5045,5045]]],[1566104922198,["GJX@GJXAIOU",[[-1,5108,"\n     我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n\n\n     接着，我们用javap反编译JavacTestOverload..class文件，并保存到JavacTestOverload..txt文件，方便对照分析：\n\n     javap -verbose JavacTestOverload> JavacTestOverload..txt\n\n\n\n     然后，通过分析JavacTestOverload..txt反编译信息，可以知道\"method2\"方法名称对应的常量为第27项，描述符为第28项（\"method1\"方法的分别为第25、26项），如下：\n\n\n\n     而后，在JavacTestOverload..class找到\"method2\"方法名称对应的字节码，修改为\"method1\"，修改前后如下（\"32\"--》\"31\"）：\n\n\n\n\n\n     这样两个方法的名称就相同了，可以再通过反编译修改后的JavacTestOverload..class来对比，可以看到修改后生成的反编译信息中没有了\"method2\"的字符信息，都变为了\"method1\"，如下：\n\n\n\n\n\n     而运行修改后的JavacTestOverload..class，可以看到两个方法运行时输出的名称都为\"method1\",也证明了两个方法的名称相同，如下：\n\n\n\n \n\n     到这里，这样就证明了：Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样的方法也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型 。\n"]],[5107,5811],[5107,5107]]],[1566104924846,["GJX@GJXAIOU",[[1,5107,"![](https://img-blog.csdn.net/20161227005740118)\n\n> 我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n![](https://img-blog.csdn.net/20161227005740478)\n\n> 接着，我们用javap反编译JavacTestOverload..class文件，并保存到JavacTestOverload..txt文件，方便对照分析：\n> \n> > javap -verbose JavacTestOverload> JavacTestOverload..txt\n\n![](https://img-blog.csdn.net/20161227005740837)\n\n> 然后，通过分析JavacTestOverload..txt反编译信息，可以知道\"method2\"方法名称对应的常量为第27项，描述符为第28项（\"method1\"方法的分别为第25、26项），如下：\n\n![](https://img-blog.csdn.net/20161227005741056)\n\n> 而后，在JavacTestOverload..class找到\"method2\"方法名称对应的字节码，修改为\"method1\"，修改前后如下（\"32\"--》\"31\"）：\n\n![](https://img-blog.csdn.net/20161227005741399)\n\n![](https://img-blog.csdn.net/20161227005741915)\n\n> 这样两个方法的名称就相同了，可以再通过反编译修改后的JavacTestOverload..class来对比，可以看到修改后生成的反编译信息中没有了\"method2\"的字符信息，都变为了\"method1\"，如下：\n\n![](https://img-blog.csdn.net/20161227005742368)\n\n![](https://img-blog.csdn.net/20161227005742775)\n\n> 而运行修改后的JavacTestOverload..class，可以看到两个方法运行时输出的名称都为\"method1\",也证明了两个方法的名称相同，如下：\n\n![](https://img-blog.csdn.net/20161227005743259)\n\n> **     到这里，这样就证明了：Class文件中有两个同名同参数（类型、顺序都相同），但返回值类型不一样的方法也是允许的，可以正常运行，因为JVM层面的方法特征签名包括返回值类型 。**"]],[5107,5107],[6229,6229]]],[1566104928672,["GJX@GJXAIOU",[[-1,5157,"> "]],[5159,5159],[5157,5157]]],[1566104929869,["GJX@GJXAIOU",[[-1,5256," "]],[5257,5257],[5256,5256]]],[1566104930839,["GJX@GJXAIOU",[[-1,5334,"> "]],[5334,5336],[5334,5334]]],[1566104932007,["GJX@GJXAIOU",[[-1,5255,">"]],[5255,5256],[5255,5255]]],[1566104934062,["GJX@GJXAIOU",[[-1,5334,">> "]],[5337,5337],[5334,5334]]],[1566104936312,["GJX@GJXAIOU",[[-1,5443,"> "]],[5443,5445],[5443,5443]]],[1566104938254,["GJX@GJXAIOU",[[-1,5594,">"]],[5595,5595],[5594,5594]]],[1566104941102,["GJX@GJXAIOU",[[-1,5780,"> "]],[5780,5782],[5780,5780]]],[1566104943279,["GJX@GJXAIOU",[[-1,5987,"> "]],[5987,5989],[5987,5987]]],[1566104945086,["GJX@GJXAIOU",[[-1,6116,">"]],[6116,6117],[6116,6116]]],[1566104946805,["GJX@GJXAIOU",[[-1,6120,"    "]],[6124,6124],[6120,6120]]],[1566104952182,["GJX@GJXAIOU",[[1,4047,"\n"]],[4046,4046],[4047,4047]]],[1566104952301,["GJX@GJXAIOU",[[1,4048,"\n"]],[4047,4047],[4048,4048]]],[1566104954424,["GJX@GJXAIOU",[[1,4049,"\n"]],[4047,4047],[4048,4048]]],[1566104955250,["GJX@GJXAIOU",[[1,4048,"*"],[-1,6122," "],[1,6123," "],[-1,6207," "],[1,6208," "]],[4048,4048],[4049,4049]]],[1566104955395,["GJX@GJXAIOU",[[1,4049,"***"]],[4049,4049],[4050,4050]]],[1566104956144,["GJX@GJXAIOU",[[1,4050,"yan"]],[4050,4050],[4053,4053]]],[1566104957093,["GJX@GJXAIOU",[[-1,4050,"yan"]],[4053,4053],[4050,4050]]],[1566104959218,["GJX@GJXAIOU",[[1,4050,"验证"]],[4050,4050],[4052,4052]]],[1566105031581,["GJX@GJXAIOU",[[-1,4059,"   "]],[4059,4062],[4059,4059]]],[1566105259461,["GJX@GJXAIOU",[[1,4901,"\n"]],[4900,4900],[4901,4901]]],[1566105260297,["GJX@GJXAIOU",[[1,4901,"、、"]],[4901,4901],[4903,4903]]],[1566105261133,["GJX@GJXAIOU",[[-1,4901,"、、"]],[4903,4903],[4901,4901]]],[1566105261742,["GJX@GJXAIOU",[[1,4901,"/"]],[4901,4901],[4902,4902]]],[1566105262765,["GJX@GJXAIOU",[[-1,4901,"/"]],[4902,4902],[4901,4901]]],[1566105327455,["GJX@GJXAIOU",[[-1,5114,"![](https://img-blog.csdn.net/20161227005740118)\n"]],[5113,5162],[5113,5113]]],[1566105330227,["GJX@GJXAIOU",[[1,5113,"Error:(16, 16) java: 已在类 chapter3.JavacTestOverload中定义了方法 method1(java.lang.String)"]],[5113,5113],[5196,5196]]],[1566105332190,["GJX@GJXAIOU",[[1,5113,"  "]],[5113,5113],[5115,5115]]],[1566105334904,["GJX@GJXAIOU",[[-1,5113,"  "]],[5115,5115],[5113,5113]]],[1566105335336,["GJX@GJXAIOU",[[1,5113,"`"]],[5113,5113],[5114,5114]]],[1566105336696,["GJX@GJXAIOU",[[1,5197,"`"]],[5197,5197],[5198,5198]]],[1566105365910,["GJX@GJXAIOU",[[-1,5200,"我们用上面的程序先通过编译，运行调用这两个方法，可以看到两个方法分别输出了自己的名称，如下：\n\n![](https://img-blog.csdn.net/20161227005740478)"]],[5200,5296],[5200,5200]]],[1566105368295,["GJX@GJXAIOU",[[-1,5201,"\n"]],[5200,5200],[5199,5199]]],[1566105393117,["GJX@GJXAIOU",[[-1,4115,"public class JavacTestOverload {\n \n    public String method1(String str) {\n    //获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return String\");\n        return \"\";\n    }\n \n    public int method2(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return int\");\n        return 1;\n    }        \n \n    public static void main(String[] args) {\n        JavacTestOverload javacTestOverload = new JavacTestOverload();\n        String str = javacTestOverload.method1(\"Test\");\n        int i = javacTestOverload.method2(\"Test\");\n    }    \n \n}\n"]],[4115,4901],[4115,4115]]],[1566105396598,["GJX@GJXAIOU",[[1,4115,"public class JavacTestOverload {\n\n    public String method1(String str) {\n        //获取当前方法名称，具体使用数组的那个元素和JVM的实现有关，具体说明可以查看Thread.getStackTrace方法的javadoc\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return String\");\n        return \"\";\n    }\n\n    public int method2(String str) {\n        String mtdName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        System.out.println(\"invoke \" + mtdName + \" return int\");\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        JavacTestOverload javacTestOverload = new JavacTestOverload();\n        String str = javacTestOverload.method1(\"Test\");\n        int i = javacTestOverload.method2(\"Test\");\n    }\n}\n/**output:\n * invoke method1 return String\n * invoke method2 return int\n */"]],[4115,4115],[4963,4963]]],[1566105403613,["GJX@GJXAIOU",[[-1,5295,"."]],[5295,5295],[5294,5294]]],[1566105811720,["GJX@GJXAIOU",[[1,5374,".class "]],[5374,5374],[5381,5381]]],[1566105814052,["GJX@GJXAIOU",[[-1,5401,"."]],[5401,5401],[5400,5400]]],[1566105816607,["GJX@GJXAIOU",[[-1,5325,"."]],[5325,5325],[5324,5324]]],[1566105838149,["GJX@GJXAIOU",[[-1,5339,"\n"]],[5339,5339],[5338,5338]]],[1566105841639,["GJX@GJXAIOU",[[-1,5262,"\n"]],[5262,5262],[5261,5261]]],[1566105843535,["GJX@GJXAIOU",[[1,5339,"`"]],[5339,5339],[5340,5340]]],[1566105844694,["GJX@GJXAIOU",[[1,5402,"`"]],[5402,5402],[5403,5403]]],[1566105855916,["GJX@GJXAIOU",[[-1,5405,"![](https://img-blog.csdn.net/20161227005740837)"]],[5405,5453],[5405,5405]]],[1566105856380,["GJX@GJXAIOU",[[-1,5406,"\n"]],[5405,5405],[5404,5404]]],[1566105857365,["GJX@GJXAIOU",[[-1,5405,"\n"]],[5404,5404],[5403,5403]]],[1566105860821,["GJX@GJXAIOU",[[-1,5430,"."]],[5430,5430],[5429,5429]]],[1566105876048,["GJX@GJXAIOU",[[-1,5463,"27"]],[5465,5465],[5463,5463]]],[1566105876486,["GJX@GJXAIOU",[[1,5463,"3"]],[5463,5463],[5464,5464]]],[1566105876673,["GJX@GJXAIOU",[[1,5463," "],[1,5464," 3"]],[5464,5464],[5466,5466]]],[1566105883719,["GJX@GJXAIOU",[[-1,5474,"28"]],[5476,5476],[5474,5474]]],[1566105884087,["GJX@GJXAIOU",[[1,5474,"3"]],[5474,5474],[5475,5475]]],[1566105884383,["GJX@GJXAIOU",[[1,5474," "],[1,5475," 4"]],[5475,5475],[5477,5477]]],[1566105894885,["GJX@GJXAIOU",[[-1,5497,"5"]],[5498,5498],[5497,5497]]],[1566105895535,["GJX@GJXAIOU",[[1,5497,"8"]],[5497,5497],[5498,5498]]],[1566105897016,["GJX@GJXAIOU",[[-1,5500,"6"]],[5501,5501],[5500,5500]]],[1566105897721,["GJX@GJXAIOU",[[1,5500,"9 "]],[5500,5500],[5501,5501]]],[1566105913581,["GJX@GJXAIOU",[[-1,5510,"![](https://img-blog.csdn.net/20161227005741056)\n"]],[5509,5558],[5509,5509]]],[1566105914000,["GJX@GJXAIOU",[[-1,5510,"\n"]],[5509,5509],[5508,5508]]],[1566105975792,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566105975792,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566105915205,["GJX@GJXAIOU",[[1,5510,"\n"]],[5508,5508],[5509,5509]]],[1566105916002,["GJX@GJXAIOU",[[1,5509,"```"]],[5509,5509],[5512,5512]]],[1566105916034,["GJX@GJXAIOU",[[1,5512,"language\n```\n"]],[5512,5512],[5512,5520]]],[1566105917039,["GJX@GJXAIOU",[[-1,5512,"language"],[1,5520,"j"]],[5512,5520],[5513,5513]]],[1566105917415,["GJX@GJXAIOU",[[1,5513,"ava"]],[5513,5513],[5516,5516]]],[1566105917589,["GJX@GJXAIOU",[[1,5517,"\n"]],[5516,5516],[5517,5517]]],[1566105920878,["GJX@GJXAIOU",[[1,5517,"#28 = Utf8               method1\n  #29 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n  #30 = Utf8               str\n  #31 = Utf8               Ljava/lang/String;\n  #32 = Utf8               mtdName\n  #33 = Utf8               method2\n  #34 = Utf8               (Ljava/lang/String;)I\n  #35 = Utf8               main\n  #36 = Utf8               ([Ljava/lang/String;)V"]],[5517,5517],[5893,5893]]],[1566105923519,["GJX@GJXAIOU",[[1,5542,"  "]],[5541,5541],[5543,5543]]],[1566105924862,["GJX@GJXAIOU",[[1,5517,"  "]],[5517,5517],[5519,5519]]],[1566105927589,["GJX@GJXAIOU",[[-1,5517,"  "],[-1,5554,"  "],[-1,5620,"  "],[-1,5651,"  "],[-1,5697,"  "],[-1,5732,"  "],[-1,5767,"  "],[-1,5816,"  "],[-1,5848,"  "]],[5519,5897],[5517,5879]]],[1566105931181,["GJX@GJXAIOU",[[-1,5542,"  "]],[5544,5544],[5542,5542]]],[1566105937333,["GJX@GJXAIOU",[[-1,5907,"."]],[5907,5907],[5906,5906]]],[1566106462795,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106462795,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106428989,["GJX@GJXAIOU",[[-1,5969,"![](https://img-blog.csdn.net/20161227005741399)\n\n![](https://img-blog.csdn.net/20161227005741915)"]],[5969,6067],[5969,5969]]],[1566106432145,["GJX@GJXAIOU",[[1,5968,"```"]],[5968,5968],[5971,5971]]],[1566106432178,["GJX@GJXAIOU",[[1,5971,"language\n```\n"]],[5971,5971],[5971,5979]]],[1566106433831,["GJX@GJXAIOU",[[-1,5971,"language"],[1,5979,"j"]],[5971,5979],[5972,5972]]],[1566106434302,["GJX@GJXAIOU",[[1,5972,"ava"]],[5972,5972],[5975,5975]]],[1566106434940,["GJX@GJXAIOU",[[-1,5971,"java"]],[5975,5975],[5971,5971]]],[1566106436279,["GJX@GJXAIOU",[[1,5971,"clsa"]],[5971,5971],[5975,5975]]],[1566106436741,["GJX@GJXAIOU",[[-1,5973,"sa"]],[5975,5975],[5973,5973]]],[1566106437302,["GJX@GJXAIOU",[[1,5973,"ass"]],[5973,5973],[5976,5976]]],[1566106437548,["GJX@GJXAIOU",[[1,5977,"\n"]],[5976,5976],[5977,5977]]],[1566106440354,["GJX@GJXAIOU",[[1,5977,"000000c0:  3b01 0007 6d65 7468 6f64 3101 0026 284c 6a61 7661 2f6c 616e  :;...method1..&(Ljava/lan\n000000d8:  672f 5374 7269 6e67 3b29 4c6a 6176 612f 6c61 6e67 2f53 7472  :g/String;)Ljava/lang/Str\n000000f0:  696e 673b 0100 0373 7472 0100 124c 6a61 7661 2f6c 616e 672f  :ing;...str...Ljava/lang/\n00000108:  5374 7269 6e67 3b01 0007 6d74 644e 616d 6501 0007 6d65 7468  :String;...mtdName...meth\n00000120:  6f64 3201 0015 284c 6a61 7661 2f6c 616e 672f 5374 7269 6e67  :od2...(Ljava/lang/String"]],[5977,5977],[6466,6466]]],[1566106448532,["GJX@GJXAIOU",[[-1,5977,"000000c0:  "]],[5977,5988],[5977,5977]]],[1566106452932,["GJX@GJXAIOU",[[-1,6064,"000000d8:  "]],[6064,6074],[6064,6064]]],[1566106455363,["GJX@GJXAIOU",[[-1,6151,"000000f0:  "]],[6151,6162],[6151,6151]]],[1566106457644,["GJX@GJXAIOU",[[-1,6238,"00000108:  "]],[6238,6249],[6238,6238]]],[1566106461116,["GJX@GJXAIOU",[[-1,6325,"00000120:  "]],[6325,6335],[6325,6325]]],[1566106522800,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106522800,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106470687,["GJX@GJXAIOU",[[1,6330,"**"],[1,6332,"**"]],[6330,6332],[6330,6336]]],[1566106485764,["GJX@GJXAIOU",[[1,6002,"**"],[1,6004,"**"]],[6002,6004],[6002,6008]]],[1566106513243,["GJX@GJXAIOU",[[-1,5958,"--》"]],[5961,5961],[5958,5958]]],[1566106515173,["GJX@GJXAIOU",[[1,5958,"fai"]],[5958,5958],[5961,5961]]],[1566106516019,["GJX@GJXAIOU",[[-1,5958,"fai"]],[5961,5961],[5958,5958]]],[1566106517313,["GJX@GJXAIOU",[[1,5958,"改为"]],[5958,5958],[5960,5960]]],[1566106762803,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106762803,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106760439,["GJX@GJXAIOU",[[-1,6425,"\n"]],[6425,6425],[6424,6424]]],[1566106761060,["GJX@GJXAIOU",[[-1,6424,"\n"]],[6424,6424],[6423,6423]]],[1566106823793,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106823793,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106768507,["GJX@GJXAIOU",[[-1,6468,"."]],[6468,6468],[6467,6467]]],[1566106884794,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106884794,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106857509,["GJX@GJXAIOU",[[-1,6530,"![](https://img-blog.csdn.net/20161227005742368)\n\n![](https://img-blog.csdn.net/20161227005742775)"]],[6530,6628],[6530,6530]]],[1566106867183,["GJX@GJXAIOU",[[1,6529,"···"]],[6529,6529],[6532,6532]]],[1566106868799,["GJX@GJXAIOU",[[-1,6529,"···"]],[6532,6532],[6529,6529]]],[1566106869837,["GJX@GJXAIOU",[[1,6529,"```"]],[6529,6529],[6532,6532]]],[1566106869871,["GJX@GJXAIOU",[[1,6532,"language\n```\n"]],[6532,6532],[6532,6540]]],[1566106871310,["GJX@GJXAIOU",[[-1,6532,"language"],[1,6540,"j"]],[6532,6540],[6533,6533]]],[1566106871806,["GJX@GJXAIOU",[[1,6533,"ava"]],[6533,6533],[6536,6536]]],[1566106872062,["GJX@GJXAIOU",[[1,6537,"\n"]],[6536,6536],[6537,6537]]],[1566106874898,["GJX@GJXAIOU",[[1,6537,"  #28 = Utf8               method1\n  #29 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n  #30 = Utf8               str\n  #31 = Utf8               Ljava/lang/String;\n  #32 = Utf8               mtdName\n  #33 = Utf8               method1\n  #34 = Utf8               (Ljava/lang/String;)I"]],[6537,6537],[6833,6833]]],[1566106878611,["GJX@GJXAIOU",[[-1,6840,"\n"]],[6840,6840],[6839,6839]]],[1566106878751,["GJX@GJXAIOU",[[-1,6839,"\n"]],[6839,6839],[6838,6838]]],[1566106945793,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566106945793,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566106899820,["GJX@GJXAIOU",[[-1,6918,"![](https://img-blog.csdn.net/20161227005743259)"]],[6918,6966],[6918,6918]]],[1566106900948,["GJX@GJXAIOU",[[-1,6919,"\n"]],[6918,6918],[6917,6917]]],[1566106902430,["GJX@GJXAIOU",[[1,6917,"```"]],[6917,6917],[6920,6920]]],[1566106902463,["GJX@GJXAIOU",[[1,6920,"language\n```\n"]],[6920,6920],[6920,6928]]],[1566106903661,["GJX@GJXAIOU",[[-1,6920,"language"],[1,6928,"j"]],[6920,6928],[6921,6921]]],[1566106904069,["GJX@GJXAIOU",[[1,6921,"ava"]],[6921,6921],[6924,6924]]],[1566106904187,["GJX@GJXAIOU",[[1,6925,"\n"]],[6924,6924],[6925,6925]]],[1566106907585,["GJX@GJXAIOU",[[1,6925,"invoke method1 return String\ninvoke method1 return int"]],[6925,6925],[6979,6979]]],[1566107066795,[null,[[-1,5465," "],[1,5467," "],[-1,5476," "],[1,5478," "]],[5465,5465],[5479,5479]]],[1566107066795,[null,[[1,5465," "],[-1,5466," "],[1,5476," "],[-1,5477," "]],[5479,5479],[5465,5465]]],[1566107015276,["GJX@GJXAIOU",[[1,5262,"\n"]],[5261,5261],[5262,5262]]],[1566107015379,["GJX@GJXAIOU",[[1,5263,"\n"]],[5262,5262],[5263,5263]]],[1566107017114,["GJX@GJXAIOU",[[1,5262,"****"]],[5262,5262],[5264,5264]]],[1566107018101,["GJX@GJXAIOU",[[1,5264,"yanzh"]],[5264,5264],[5269,5269]]],[1566107018851,["GJX@GJXAIOU",[[-1,5264,"yanzh"]],[5269,5269],[5264,5264]]],[1566107021532,["GJX@GJXAIOU",[[1,5264,"验证：但对Class文件来说，只要两个字段描述（类型）不一样，名称一样也是可以的。"]],[5264,5264],[5305,5305]]],[1566107126788,[null,[[-1,5512," "],[1,5514," "],[-1,5523," "],[1,5525," "]],[5512,5512],[5526,5526]]],[1566107126788,[null,[[1,5512," "],[-1,5513," "],[1,5523," "],[-1,5524," "]],[5526,5526],[5512,5512]]],[1566107089739,["GJX@GJXAIOU",[[-1,4055,"\n"]],[4055,4055],[4054,4054]]],[1566107095674,["GJX@GJXAIOU",[[-1,5929,"\n"]],[5929,5929],[5928,5928]]]],null,"GJX@GJXAIOU"]]}