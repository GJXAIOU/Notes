{"compress":true,"commitItems":[["d0f2774d-d6e5-4779-9656-a01f5e8aadd0",1570192015459,"# 冷静对待你遇到的所有Java内存异常\n\nZAZALU'S BLOG \n\n2019-09-17 \n\n  [IT](https://zazalu.space/categories/IT/) \n\n  [JVM](https://zazalu.space/tags/JVM/)\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%A2%AB%E4%BA%BA%E8%AF%B4%E7%83%82%E7%9A%84Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B \"被人说烂的Java内存模型\")被人说烂的Java内存模型\n\nJava内存模型的相关资料在网上实在是太多了,不管是过时的还是不过时的,网络上充斥的学习资料,比如各类研究Java内存模型的博文,也随着Java的发展,渐渐失去了其内容的准确性.\n\n要在那么多网络资料中找到对Java内存模型最新最全的说法,估计最好的方式只有翻阅Oracle的文档了!(字体大小太不舒服了!)\n\n我最近也不停的查阅和总结了不少网上的资料,不过由于类似资料实在太多,所以不打算重复的说明这个被人说烂的Java内存模型\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%8E%E5%90%84%E7%A7%8DOOM%E5%BC%82%E5%B8%B8%E5%87%BA%E5%8F%91%E6%9D%A5%E9%9B%B6%E8%B7%9D%E7%A6%BB%E7%9A%84%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B \"从各种OOM异常出发来零距离的理解Java内存模型\")从各种OOM异常出发来零距离的理解Java内存模型\n\n对于大脑来说, 大脑更喜欢问题, 而不是从陈述开始.\n\n本文会从平时工作中可能会遇到的OOM异常出发,来一步步的深入理解我们所熟知的Java内存模型,从而哪怕可以更加理解一点这些方面的编程思想和设计精髓, 也是一个不小的进步\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-StackOverFlowError \"java.lang.StackOverFlowError\")java.lang.StackOverFlowError\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E4%B8%AAStack%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%E4%B8%9C%E8%A5%BF \"这个Stack是什么鬼东西\")这个Stack是什么鬼东西\n\nStack是个栈, 是一种数据结构, 会占用一块内存空间\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#Java%E5%9C%A8%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E4%BC%9A%E4%BD%BF%E7%94%A8Stack%E6%9D%A5%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE \"Java在哪些地方会使用Stack来存储数据\")Java在哪些地方会使用Stack来存储数据\n\n1.  最常见的就是虚拟机栈, 它是专门为java Method执行服务的一块内存, 每个方法调用都会往这个栈中压入一个栈帧(stackFrame), 由于方法可以互调,迭代,所以使用栈模型来服务Java Method是很适合的一种数据结构模型\n\n2.  别忘了还有一个本地方法栈, 它是专门为java的底层native方法执行服务的一块内存. 然而由于native方法都是术语jdk内部的测试稳定的程序,所以作为应用java开发人员的我们,一般是不可能遇到这个层面抛出的这个异常,同时我也几乎可以判断这种方法是不会直接抛出java.lang.StackOverFlowError异常的,所以我们可以缩小我们的关注范围,把抛出这个异常的原因全部指向于虚拟机栈即可\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E7%94%9F%E7%9A%84 \"这种异常是如何发生的?\")这种异常是如何发生的?\n\n我们知道每调用一次Java Method,就会往虚拟机栈中压入一个栈帧,在方法结束之前都不会出栈. 所以可以直接推理出在一个java线程运行过程中,如果同时调用的方法过多(比如递归的调用一个方法),就会出现这个异常\n\n事实上,除了恶性递归或者虚拟机栈可用内存过小的情况下, 也很难触发这种异常, 所以一般来说遇到这种异常几乎是可以直接断定程序中存在恶性递归导致的.\n\n这类问题在实际开发中遇到的并不多, 反而是在做一些算法问题的时候, 由于自己的疏忽从而引发不可预知的恶性递归\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Demo%E5%A4%8D%E7%8E%B0%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8 \"一个简单的Demo复现这种异常\")一个简单的Demo复现这种异常\n\n| \n\n1\n2\n3\n4\n5\n\n | \n\npublic class Main {\n public static void main(String[] args) {\n Main.main(null);\n }\n}\n\n |\n\n上述代码就会报StackOverFlowError, 因为main方法会被不停的循环执行, 直到超出虚拟机栈能够承受的大小\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0 \"相关JVM参数\")相关JVM参数\n\n-Xss, 正常取值128K~256K, 如果仍然不够可以进行加大, 这个选项对性能影响比较大，需要严格的测试哦\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Java-heap-space \"java.lang.OutOfMemoryError: Java heap space\")java.lang.OutOfMemoryError: Java heap space\n\n这个异常表示, Java程序运行过程中遭遇了内存超限问题, 根本原因是Java的堆(Heap)内存超限\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#Java%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%AF%B9%E5%BA%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%98%AF%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6 \"Java常用的内存空间对应计算机硬件是哪些组件?\")Java常用的内存空间对应计算机硬件是哪些组件?\n\n1.  寄存器(比如每个Java线程独享程序计数器(Program Counter Register))\n2.  RAM(也就是我们常说的内存,java中的虚拟机栈,堆内存都用的这块)\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFJava%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98-Heap \"什么是Java的堆内存(Heap)\")什么是Java的堆内存(Heap)\n\n这就涉及了Java的运行时内存模型了~\n\n我就简单来说下吧~\n\n一个JVM进程运行后, 会有一个主线程去运行我们写的Java程序, 那么每一个这种线程都拥有两大块内存空间\n\n*   线程共享内存空间\n    *   堆(Heap, 所有java的对象实例和数组,jdk8后还存放了字符串常量池和类静态变量)\n    *   方法区(存放类元数据,符号引用,静态常量,jdk8后HotSpot将其从永久代移动到了Metaspace)\n*   线程独享内存空间\n    *   虚拟机栈(为Java方法提供的一块内存空间,内部有栈帧组成)\n    *   本地方法栈(为Java的native方法)\n    *   程序计数器(PC寄存器,记录执行行号)\n\n所以Java的堆内存就是JVM中设定的一块专门存储所有java的对象实例和数组,jdk8后甚至包括字符串常量池和类静态变量的内存区域\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E7%94%9F%E7%9A%84-1 \"这种异常是如何发生的?\")这种异常是如何发生的?\n\n如果是1.7以前, Java堆溢出的问题根源是简单的, 就是运行时存在的对象实例和数组太多了!\n\n但是在1.8后, 由于还存放了字符串常量, 所以出现异常还有一种可能就是 interned Strings 过多导致的哦!\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo \"最小复现Demo\")最小复现Demo\n\n执行前最好先修改下JVM参数,防止等待时间过长\nJVM参数:\n-Xms20m\n-Xmx20m\n-XX:MetaspaceSize=10m\n-XX:MaxMetaspaceSize=10m\n-XX:-UseGCOverheadLimit\n\nJVM参数说明: 限制堆大小20M,方便快速报错! 由于我用的是jdk8,所以限制了元空间的大小为10m,说实话在这个情况下没啥用哈哈哈哈哈哈哈(就是觉得加上去舒服才加的,不信我说的你可以自己google)!最后一个参数-XX:-UseGCOverheadLimit这个有必要加一下. 因为我的demo程序属于那种恶意的程序,所以一次GC几乎没办法清理任何对象实例,因为他们都在被占用着! 所以必须使用这个参数来防止GC检测出我的这种恶意程序,从而正常的提示堆溢出的错误而不是GC Overhead limit exceeded错误(这个错误会在后面细讲)\n\n1.  普通的对象实例爆掉堆内存\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String[] args) {\n List<Object> list = new ArrayList();\n int i = 0;\n while(true){\n list.add(new Object());\n }\n }\n\n |\n\n1.  interned Strings过多爆掉堆内存(有待考证此代码的准确性,请不要盲目相信,要有自己的想法)\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String[] args) {\n List<String> list = new ArrayList();\n int i = 0;\n while(true){\n list.add(String.valueOf(i++).intern());\n }\n }\n\n |\n\n代码说明: 这串代码会每次生成一个新的interned String, 也就是数字递增对应的String表示, 所以最终爆掉内存, 证明了是interned Strings爆掉了内存, 相同的代码在jkd1.7以前是不会报堆内存溢出的, 请注意\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-1 \"相关JVM参数\")相关JVM参数\n\n-Xms : 初始堆大小\n-Xmx : 最大堆大小\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86 \"如何处理?\")如何处理?\n\n查看jvm快照,分析占用内存大的对象是哪些, 然后定位到代码位置, 最后进行优化\n\n我一般使用visualVM来查看这类问题\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded \"java.lang.OutOfMemoryError: GC Overhead limit exceeded\")java.lang.OutOfMemoryError: GC Overhead limit exceeded\n\n这个异常表示您的Java程序在运行的时候, 98%的时间都在执行GC回收, 但是每次回收只回收不到2%的空间!\n\n换句话说,其实这个异常往往是抛出java.lang.OutOfMemoryError: Java heap space异常的前兆! 因为Java程序每次都GC回收只能回收一点点内存空间,而你的程序却仍然在不停的产生新的对象实例, 这无疑导致了两种可能结果:\n\n1.  不停的进行GC\n2.  直接超出的堆内存大小\n\n这个问题还有一些细节需要我们去掌握,我们先从下面的例子来看吧\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-1 \"最小复现Demo\")最小复现Demo\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String args[]) throws Exception {\n Map map = System.getProperties();\n Random r = new Random();\n while (true) {\n map.put(r.nextInt(), \"value\");\n }\n }\n\n |\n\n代码说明: 这段代码不停的往map中加入新的key-value,导致map大小不断变大! 当到达堆内存顶点的时候,GC发生, 但是清理完毕后,JVM发现清理前后的堆内存大小改变很小,不到2%; 这时候程序继续运行,继续往map中加数据!GC又发生了!又只清理不到2%! 如此不停的循环, 最后JVM得出了一个判断! 你的Java程序在占用CPU进行运算的时间里,98%的时间都特么的在垃圾回收,而每次GC居然只能回收堆内存的2%空间, 这肯定是代码存在问题,于是抛出了这个异常. 如果这个时候,你断定不是自己的代码问题, 使用JVM参数-XX:-UseGCOverheadLimit来关闭这种检查! 然后你就会发现你的程序抛出了堆溢出异常! 为什么呢? 因为堆内存不断的被占满,最终导致最后一次加入新的int的时候, 堆内存空间直接不足了!\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E4%B8%AA%E5%BC%82%E5%B8%B8%E4%B8%80%E8%88%AC%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86 \"这个异常一般如何处理\")这个异常一般如何处理\n\n和堆溢出的解决方式一致\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-2 \"相关JVM参数\")相关JVM参数\n\n-XX:-UseGCOverheadLimit\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Permgen-space-jdk8%E5%B7%B2%E7%BB%8F%E4%B8%8D%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%AD%A4%E5%BC%82%E5%B8%B8-%E8%AF%B7%E6%B3%A8%E6%84%8F \"java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\")java.lang.OutOfMemoryError: Permgen space (jdk8已经不会出现此异常,请注意)\n\n只存在于jdk1.8以前的java程序中! 这个异常表示,永久代大小不够!\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFPermgen \"什么是Permgen\")什么是Permgen\n\n是HotSpot在jdk1.8以前存在的一个区域,用于实现方法区\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E4%BA%A7%E7%94%9F%E8%BF%99%E4%B8%AA%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3 \"什么时候会产生这个错误以及如何解决\")什么时候会产生这个错误以及如何解决\n\n由于是实现方法区的地方, 所以肯定是类元信息或者常量（jdk1.7后部分常量已经挪到堆中），静态常量和JIT即时编译器编译后的代码等数据太多导致大小不够\n\n乍一看也许你会头晕! 不过没关系, 根据我两年的开发经验, 我碰到过的唯一一次Permgen space问题是因为SpringIoC容器一口气加载了过多的Bean导致的!\n\n所以正常来说, 直接扩大这个区域的大小即可!\n\n比如使用如下JVM参数扩大:\n-XX:MaxNewSize=xxxm -XX:MaxPermSize=xxxm\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-2 \"最小复现Demo\")最小复现Demo\n\n运行要求: jdk版本 <= 1.6\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n | \n\nimport javassist.ClassPool;\n\npublic class MicroGenerator {\n public static void main(String[] args) throws Exception {\n for (int i = 0; i < 100_000_000; i++) {\n generate(\"eu.plumbr.demo.Generated\" + i);\n }\n }\n\n public static Class generate(String name) throws Exception {\n ClassPool pool = ClassPool.getDefault();\n return pool.makeClass(name).toClass();\n }\n}\n\n |\n\n借助了javassist来不停的加载新的class,直至爆掉永久代区域\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-3 \"相关JVM参数\")相关JVM参数\n\n-XX:PermSize=xxxm\n-XX:MaxPermSize=xxxm\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Metaspace-since-jdk8-%E6%89%8D%E6%9C%89%E5%8F%AF%E8%83%BD%E6%8A%9B%E5%87%BA%E7%9A%84%E9%94%99%E8%AF%AF \"java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\")java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\n\n这个异常表示: Metaspace的空间不足导致OOM异常发生\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFMetaspace \"什么是Metaspace\")什么是Metaspace\n\n有些不太专注JVM知识的小伙伴可能对Metaspace是陌生的, 因为这玩意是jdk8开始才正式登场的一块内存区域. 它专门用于替代原来的永久代, 且存在于本地内存中, 所以它的最大内存理论就是你电脑的最大内存. 和永久代不一样的是, 它可以进行自我扩容, 直到达到规定的MaxMetaspaceSize或者到达本机的最大可用内存为止.\n\nMetaspace接替了永久代的任务, 方法区的内容全部转移到此处(除了字符串常量池被挪到了堆中)\n\n不过相比于永久代, Metaspace进行GC的时候, 稍微改变了一点规则, Metaspace中类元数据是否需要回收是根据类加载器死活来来决定的, 这不同于永久代的, 只要类引用消失就会被回收. 这种规则会产生一些问题:\n\n1.  [https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit](https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit)\n2.  [https://zhuanlan.zhihu.com/p/25634935](https://zhuanlan.zhihu.com/p/25634935)\n\n所以在jdk8后使用反射,动态代理等会生成class对象的方法, 一定要小心MetaSpace是否会对其进行回收, 如果不会, 则需要进行相应的优化处理\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%A7%BB%E9%99%A4%E6%B0%B8%E4%B9%85%E4%BB%A3 \"为什么要移除永久代\")为什么要移除永久代\n\n1.  方法区大小难以设定，容易发生内存溢出。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出\n\n2.  GC复杂且效率低。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。\n\n3.  促进HotSpot JVM与JRockit VM的融合。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-3 \"最小复现Demo\")最小复现Demo\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n | \n\n/**\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n */\npublic class MetaSpaceOOMTest {\n\n public static void main(String[] args) {\n while (true) {\n Enhancer enhancer = new Enhancer();\n enhancer.setSuperclass(OOMObject.class);\n enhancer.setUseCache(false);\n enhancer.setCallback(new MethodInterceptor() {\n public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n return proxy.invokeSuper(obj, args);\n }\n });\n //无限创建动态代理，生成Class对象\n enhancer.create();\n }\n }\n\n static class OOMObject {\n\n }\n}\n\n |\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E7%B1%BB%E5%BC%82%E5%B8%B8 \"如何解决这类异常\")如何解决这类异常\n\n1.  增大MetaSpace的最大空间大小\n\n2.  类似检查永久代异常一样的处理方式, 检查dump文件, 查看哪些类加载存在异常\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-4 \"相关JVM参数\")相关JVM参数\n\n-XX:MetaspaceSize=8m\n-XX:MaxMetaspaceSize=8m\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Unable-to-create-new-native-thread \"java.lang.OutOfMemoryError: Unable to create new native thread\")java.lang.OutOfMemoryError: Unable to create new native thread\n\n这个异常表示,JVM无法再创建新的线程了!JVM能够创建的线程数是有限制的,\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A4%8D%E7%8E%B0demo \"复现demo\")复现demo\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n | \n\npublic class TestNativeOutOfMemoryError { \n\n public static void main(String[] args) { \n\n for (int i = 0;; i++) { \n System.out.println(\"i = \" + i); \n new Thread(new HoldThread()).start(); \n } \n } \n\n} \n\nclass HoldThread extends Thread { \n CountDownLatch cdl = new CountDownLatch(1); \n\n public HoldThread() { \n this.setDaemon(true); \n } \n\n public void run() { \n try { \n cdl.await(); \n } catch (InterruptedException e) { \n } \n } \n}\n\n |\n\n### [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88 \"解决方案\")解决方案\n\n1.  去用线程池!\n\n2.  检查代码是否存在bug在不停的生成新线程!\n\n3.  如果确实需要那么多线程,那就修改OS和JVM的参数设置,并且加大你的硬件内存容量!\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-request-size-bytes-for-reason \"java.lang.OutOfMemoryError: request size bytes for reason\")java.lang.OutOfMemoryError: request size bytes for reason\n\n如果你看到了这个异常, 说明你的OS内存不够用了, JVM想本地操作系统申请内存被拒绝, 导致JVM进程无法继续运行! 发生这个问题的原因一般是你的Java程序需要的内存容量超过了操作系统可提供给JVM的最大内存容量, 连swap内存都没了\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM \"java.lang.OutOfMemoryError: Requested array size exceeds VM\")java.lang.OutOfMemoryError: Requested array size exceeds VM\n\n当你正准备创建一个超过虚拟机允许的大小的数组时，这条错误就会出现在你眼前!\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%B0%BE \"尾\")尾\n\n本文对java常见的OOM异常做了总结说明,同时对于涉及的Java内存模型进行了说明,希望可以在日后遇到类似问题的时候可以沉着冷静,不慌不忙的来排查问题\n\n参考:\n[https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973](https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973)\n[https://juejin.im/post/5ca02d046fb9a05e6a086cb7](https://juejin.im/post/5ca02d046fb9a05e6a086cb7)\n[https://zhuanlan.zhihu.com/p/25634935](https://zhuanlan.zhihu.com/p/25634935)\n[https://www.zhihu.com/question/39990490/answer/369690291](https://www.zhihu.com/question/39990490/answer/369690291)",[[1570191990478,["GJX@GJXAIOU",[[-1,22,"ZAZALU'S BLOG \n\n2019-09-17 \n\n  [IT](https://zazalu.space/categories/IT/) \n\n  [JVM](https://zazalu.space/tags/JVM/)\n\n## [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%A2%AB%E4%BA%BA%E8%AF%B4%E7%83%82%E7%9A%84Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B \"被人说烂的Java内存模型\")"]],[22,320],[22,22]]],[1570191997486,["GJX@GJXAIOU",[[1,22,"## "]],[22,22],[38,38]]],[1570192003087,["GJX@GJXAIOU",[[-1,259," [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%8E%E5%90%84%E7%A7%8DOOM%E5%BC%82%E5%B8%B8%E5%87%BA%E5%8F%91%E6%9D%A5%E9%9B%B6%E8%B7%9D%E7%A6%BB%E7%9A%84%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B \"从各种OOM异常出发来零距离的理解Java内存模型\")"]],[259,535],[259,259]]],[1570192003943,["GJX@GJXAIOU",[[1,259," "]],[259,259],[260,260]]],[1570192012225,["GJX@GJXAIOU",[[1,21,"【"]],[21,21],[22,22]]],[1570192012799,["GJX@GJXAIOU",[[-1,21,"【"]],[22,22],[21,21]]],[1570192021291,["GJX@GJXAIOU",[[1,21,"[原文地址](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/)"]],[21,21],[102,102]]],[1570192023808,["GJX@GJXAIOU",[[1,103,"\n"]],[102,102],[103,103]]],[1570192030511,["GJX@GJXAIOU",[[-1,485," [](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-StackOverFlowError \"java.lang.StackOverFlowError\")"]],[485,623],[485,485]]],[1570192031672,["GJX@GJXAIOU",[[1,485," "]],[485,485],[486,486]]],[1570192037302,["GJX@GJXAIOU",[[-1,520,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E4%B8%AAStack%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC%E4%B8%9C%E8%A5%BF \"这个Stack是什么鬼东西\")"]],[520,691],[520,520]]],[1570192041110,["GJX@GJXAIOU",[[-1,569,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#Java%E5%9C%A8%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E4%BC%9A%E4%BD%BF%E7%94%A8Stack%E6%9D%A5%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE \"Java在哪些地方会使用Stack来存储数据\")"]],[570,798],[569,569]]],[1570192044781,["GJX@GJXAIOU",[[-1,930,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E7%94%9F%E7%9A%84 \"这种异常是如何发生的?\")"]],[930,1112],[930,930]]],[1570192049830,["GJX@GJXAIOU",[[-1,1187,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Demo%E5%A4%8D%E7%8E%B0%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8 \"一个简单的Demo复现这种异常\")"]],[1187,1386],[1187,1187]]],[1570192058862,["GJX@GJXAIOU",[[-1,1204,"| \n\n1\n2\n3\n4\n5\n\n | \n\npublic class Main {\n public static void main(String[] args) {\n Main.main(null);\n }\n}\n\n |"]],[1204,1312],[1204,1204]]],[1570192059623,["GJX@GJXAIOU",[[1,1204,"···"]],[1204,1204],[1207,1207]]],[1570192060357,["GJX@GJXAIOU",[[-1,1204,"···"]],[1207,1207],[1204,1204]]],[1570192060717,["GJX@GJXAIOU",[[-1,1205,"\n"]],[1204,1204],[1203,1203]]],[1570192061590,["GJX@GJXAIOU",[[1,1205,"\n"]],[1203,1203],[1204,1204]]],[1570192062279,["GJX@GJXAIOU",[[1,1204,"```"]],[1204,1204],[1207,1207]]],[1570192062326,["GJX@GJXAIOU",[[1,1207,"language\n```\n"]],[1207,1207],[1207,1215]]],[1570192063184,["GJX@GJXAIOU",[[-1,1207,"language"],[1,1215,"j"]],[1207,1215],[1208,1208]]],[1570192063546,["GJX@GJXAIOU",[[1,1208,"ava"]],[1208,1208],[1211,1211]]],[1570192063666,["GJX@GJXAIOU",[[1,1212,"\n"]],[1211,1211],[1212,1212]]],[1570192065832,["GJX@GJXAIOU",[[1,1212,"public class Main {\n public static void main(String[] args) {\n Main.main(null);\n }\n}"]],[1212,1212],[1296,1296]]],[1570192067429,["GJX@GJXAIOU",[[-1,1212,"public class Main {\n public static void main(String[] args) {\n Main.main(null);\n }\n}"]],[1296,1296],[1212,1212]]],[1570192069542,["GJX@GJXAIOU",[[1,1212,"public class Main {\n    public static void main(String[] args) {\n        Main.main(null);\n    }\n}"]],[1212,1212],[1309,1309]]],[1570192073277,["GJX@GJXAIOU",[[-1,1383,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0 \"相关JVM参数\")"]],[1383,1510],[1383,1383]]],[1570192077246,["GJX@GJXAIOU",[[-1,1453,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Java-heap-space \"java.lang.OutOfMemoryError: Java heap space\")"]],[1453,1619],[1453,1453]]],[1570192084319,["GJX@GJXAIOU",[[-1,1555,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#Java%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%AF%B9%E5%BA%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E6%98%AF%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6 \"Java常用的内存空间对应计算机硬件是哪些组件?\")"]],[1556,1835],[1555,1555]]],[1570192087318,["GJX@GJXAIOU",[[-1,1679,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFJava%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98-Heap \"什么是Java的堆内存(Heap)\")"]],[1679,1849],[1679,1679]]],[1570192095254,["GJX@GJXAIOU",[[-1,2097,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E7%A7%8D%E5%BC%82%E5%B8%B8%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%91%E7%94%9F%E7%9A%84-1 \"这种异常是如何发生的?\")"]],[2098,2281],[2097,2097]]],[1570192098304,["GJX@GJXAIOU",[[-1,2226,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo \"最小复现Demo\")"]],[2227,2355],[2226,2226]]],[1570192108058,["GJX@GJXAIOU",[[1,2652,"```"]],[2652,2652],[2655,2655]]],[1570192108103,["GJX@GJXAIOU",[[1,2655,"language\n```\n"]],[2655,2655],[2655,2663]]],[1570192108969,["GJX@GJXAIOU",[[-1,2655,"l"],[-1,2657,"nguage"]],[2655,2663],[2656,2656]]],[1570192109275,["GJX@GJXAIOU",[[1,2656,"jva"]],[2656,2656],[2659,2659]]],[1570192109445,["GJX@GJXAIOU",[[1,2660,"\n"]],[2659,2659],[2660,2660]]],[1570192113184,["GJX@GJXAIOU",[[1,2657,"a"]],[2657,2657],[2658,2658]]],[1570192114582,["GJX@GJXAIOU",[[-1,2655,"a"]],[2656,2656],[2655,2655]]],[1570192117037,["GJX@GJXAIOU",[[1,2660,"public static void main(String[] args) {\n        List<Object> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(new Object());\n        }\n    }"]],[2660,2660],[2837,2837]]],[1570192120285,["GJX@GJXAIOU",[[-1,2843,"| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String[] args) {\n List<Object> list = new ArrayList();\n int i = 0;\n while(true){\n list.add(new Object());\n }\n }\n\n |\n"]],[2843,3007],[2843,2843]]],[1570192127568,["GJX@GJXAIOU",[[1,2901,"```"]],[2901,2901],[2904,2904]]],[1570192127614,["GJX@GJXAIOU",[[1,2904,"language\n```\n"]],[2904,2904],[2904,2912]]],[1570192128699,["GJX@GJXAIOU",[[-1,2904,"language"],[1,2912,"j"]],[2904,2912],[2905,2905]]],[1570192129150,["GJX@GJXAIOU",[[1,2905,"ava"]],[2905,2905],[2908,2908]]],[1570192129261,["GJX@GJXAIOU",[[1,2909,"\n"]],[2908,2908],[2909,2909]]],[1570192131709,["GJX@GJXAIOU",[[1,2909,"public static void main(String[] args) {\n        List<String> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(String.valueOf(i++).intern());\n        }\n    }"]],[2909,2909],[3102,3102]]],[1570192135354,["GJX@GJXAIOU",[[-1,3108,"| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String[] args) {\n List<String> list = new ArrayList();\n int i = 0;\n while(true){\n list.add(String.valueOf(i++).intern());\n }\n }\n\n |"]],[3108,3287],[3108,3108]]],[1570192137246,["GJX@GJXAIOU",[[-1,3109,"\n"]],[3109,3109],[3108,3108]]],[1570192137557,["GJX@GJXAIOU",[[-1,3108,"\n"]],[3108,3108],[3107,3107]]],[1570192140367,["GJX@GJXAIOU",[[-1,3236,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-1 \"相关JVM参数\")"]],[3236,3365],[3236,3236]]],[1570192146493,["GJX@GJXAIOU",[[-1,3276,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86 \"如何处理?\")"]],[3276,3398],[3276,3276]]],[1570192155126,["GJX@GJXAIOU",[[-1,3350,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded \"java.lang.OutOfMemoryError: GC Overhead limit exceeded\")"]],[3350,3538],[3350,3350]]],[1570192158998,["GJX@GJXAIOU",[[-1,3657,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-1 \"最小复现Demo\")"]],[3657,3788],[3657,3657]]],[1570192166024,["GJX@GJXAIOU",[[1,3667,"\n"]],[3666,3666],[3667,3667]]],[1570192166649,["GJX@GJXAIOU",[[1,3667,"```"]],[3667,3667],[3670,3670]]],[1570192166693,["GJX@GJXAIOU",[[1,3670,"language\n```\n"]],[3670,3670],[3670,3678]]],[1570192167504,["GJX@GJXAIOU",[[-1,3670,"language"],[1,3678,"j"]],[3670,3678],[3671,3671]]],[1570192167904,["GJX@GJXAIOU",[[1,3671,"ava"]],[3671,3671],[3674,3674]]],[1570192168197,["GJX@GJXAIOU",[[1,3675,"\n"]],[3674,3674],[3675,3675]]],[1570192170801,["GJX@GJXAIOU",[[1,3675,"public static void main(String args[]) throws Exception {\n        Map map = System.getProperties();\n        Random r = new Random();\n        while (true) {\n            map.put(r.nextInt(), \"value\");\n        }\n    }"]],[3675,3675],[3889,3889]]],[1570192174293,["GJX@GJXAIOU",[[-1,3895,"| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic static void main(String args[]) throws Exception {\n Map map = System.getProperties();\n Random r = new Random();\n while (true) {\n map.put(r.nextInt(), \"value\");\n }\n }\n\n |\n"]],[3895,4096],[3895,3895]]],[1570192175014,["GJX@GJXAIOU",[[-1,3895,"\n"]],[3895,3895],[3894,3894]]],[1570192181031,["GJX@GJXAIOU",[[-1,4271,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%BF%99%E4%B8%AA%E5%BC%82%E5%B8%B8%E4%B8%80%E8%88%AC%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86 \"这个异常一般如何处理\")"]],[4271,4452],[4271,4271]]],[1570192183341,["GJX@GJXAIOU",[[-1,4300,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-2 \"相关JVM参数\")"]],[4300,4429],[4300,4300]]],[1570192187616,["GJX@GJXAIOU",[[-1,4337,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Permgen-space-jdk8%E5%B7%B2%E7%BB%8F%E4%B8%8D%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%AD%A4%E5%BC%82%E5%B8%B8-%E8%AF%B7%E6%B3%A8%E6%84%8F \"java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\")"]],[4337,4634],[4337,4337]]],[1570192194421,["GJX@GJXAIOU",[[-1,4443,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFPermgen \"什么是Permgen\")"]],[4443,4568],[4443,4443]]],[1570192197419,["GJX@GJXAIOU",[[-1,4493,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E4%BA%A7%E7%94%9F%E8%BF%99%E4%B8%AA%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3 \"什么时候会产生这个错误以及如何解决\")"]],[4493,4744],[4493,4493]]],[1570192200238,["GJX@GJXAIOU",[[-1,4762,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-2 \"最小复现Demo\")"]],[4762,4893],[4762,4762]]],[1570192209232,["GJX@GJXAIOU",[[1,4791,"```"]],[4791,4791],[4794,4794]]],[1570192209272,["GJX@GJXAIOU",[[1,4794,"language\n```\n"]],[4794,4794],[4794,4802]]],[1570192210080,["GJX@GJXAIOU",[[-1,4794,"language"],[1,4802,"j"]],[4794,4802],[4795,4795]]],[1570192210432,["GJX@GJXAIOU",[[1,4795,"ava"]],[4795,4795],[4798,4798]]],[1570192210519,["GJX@GJXAIOU",[[1,4799,"\n"]],[4798,4798],[4799,4799]]],[1570192213068,["GJX@GJXAIOU",[[1,4799,"import javassist.ClassPool;\n\npublic class MicroGenerator {\n  public static void main(String[] args) throws Exception {\n    for (int i = 0; i < 100_000_000; i++) {\n      generate(\"eu.plumbr.demo.Generated\" + i);\n    }\n  }\n\n  public static Class generate(String name) throws Exception {\n    ClassPool pool = ClassPool.getDefault();\n    return pool.makeClass(name).toClass();\n  }\n}"]],[4799,4799],[5177,5177]]],[1570192216775,["GJX@GJXAIOU",[[-1,5183,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n | \n\nimport javassist.ClassPool;\n\npublic class MicroGenerator {\n public static void main(String[] args) throws Exception {\n for (int i = 0; i < 100_000_000; i++) {\n generate(\"eu.plumbr.demo.Generated\" + i);\n }\n }\n\n public static Class generate(String name) throws Exception {\n ClassPool pool = ClassPool.getDefault();\n return pool.makeClass(name).toClass();\n }\n}\n\n |\n"]],[5183,5588],[5183,5183]]],[1570192222566,["GJX@GJXAIOU",[[-1,5225,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-3 \"相关JVM参数\")"]],[5225,5354],[5225,5225]]],[1570192225008,["GJX@GJXAIOU",[[-1,5277,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Metaspace-since-jdk8-%E6%89%8D%E6%9C%89%E5%8F%AF%E8%83%BD%E6%8A%9B%E5%87%BA%E7%9A%84%E9%94%99%E8%AF%AF \"java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\")"]],[5277,5547],[5277,5277]]],[1570192227341,["GJX@GJXAIOU",[[-1,5376,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%BB%80%E4%B9%88%E6%98%AFMetaspace \"什么是Metaspace\")"]],[5376,5505],[5376,5376]]],[1570192235951,["GJX@GJXAIOU",[[-1,6041,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%A7%BB%E9%99%A4%E6%B0%B8%E4%B9%85%E4%BB%A3 \"为什么要移除永久代\")"]],[6041,6212],[6041,6041]]],[1570192238695,["GJX@GJXAIOU",[[-1,6430,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E6%9C%80%E5%B0%8F%E5%A4%8D%E7%8E%B0Demo-3 \"最小复现Demo\")"]],[6430,6561],[6430,6430]]],[1570192245998,["GJX@GJXAIOU",[[1,6440,"\n"]],[6439,6439],[6440,6440]]],[1570192246562,["GJX@GJXAIOU",[[1,6440,"```"]],[6440,6440],[6443,6443]]],[1570192246601,["GJX@GJXAIOU",[[1,6443,"language\n```\n"]],[6443,6443],[6443,6451]]],[1570192247393,["GJX@GJXAIOU",[[-1,6443,"language"],[1,6451,"j"]],[6443,6451],[6444,6444]]],[1570192247732,["GJX@GJXAIOU",[[1,6444,"ava"]],[6444,6444],[6447,6447]]],[1570192247869,["GJX@GJXAIOU",[[1,6448,"\n"]],[6447,6447],[6448,6448]]],[1570192250671,["GJX@GJXAIOU",[[1,6448,"/**\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n */\npublic class MetaSpaceOOMTest {\n\n    public static void main(String[] args) {\n        while (true) {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(OOMObject.class);\n            enhancer.setUseCache(false);\n            enhancer.setCallback(new MethodInterceptor() {\n                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                    return proxy.invokeSuper(obj, args);\n                }\n            });\n            //无限创建动态代理，生成Class对象\n            enhancer.create();\n        }\n    }\n\n    static class OOMObject {\n\n    }\n}"]],[6448,6448],[7134,7134]]],[1570192256711,["GJX@GJXAIOU",[[-1,7140,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n | \n\n/**\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n */\npublic class MetaSpaceOOMTest {\n\n public static void main(String[] args) {\n while (true) {\n Enhancer enhancer = new Enhancer();\n enhancer.setSuperclass(OOMObject.class);\n enhancer.setUseCache(false);\n enhancer.setCallback(new MethodInterceptor() {\n public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n return proxy.invokeSuper(obj, args);\n }\n });\n //无限创建动态代理，生成Class对象\n enhancer.create();\n }\n }\n\n static class OOMObject {\n\n }\n}\n\n |\n"]],[7140,7758],[7140,7140]]],[1570192259078,["GJX@GJXAIOU",[[-1,7145,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E7%B1%BB%E5%BC%82%E5%B8%B8 \"如何解决这类异常\")"]],[7145,7306],[7145,7145]]],[1570192260401,["GJX@GJXAIOU",[[-1,7178,"\n"]],[7178,7178],[7177,7177]]],[1570192265215,["GJX@GJXAIOU",[[-1,7227,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E7%9B%B8%E5%85%B3JVM%E5%8F%82%E6%95%B0-4 \"相关JVM参数\")"]],[7227,7356],[7227,7227]]],[1570192274825,["GJX@GJXAIOU",[[1,7713,"```"]],[7713,7713],[7716,7716]]],[1570192274863,["GJX@GJXAIOU",[[1,7716,"language\n```\n"]],[7716,7716],[7716,7724]]],[1570192275683,["GJX@GJXAIOU",[[-1,7716,"l"],[-1,7718,"nguage"]],[7716,7724],[7717,7717]]],[1570192276001,["GJX@GJXAIOU",[[1,7717,"jva"]],[7717,7717],[7720,7720]]],[1570192276216,["GJX@GJXAIOU",[[1,7721,"\n"]],[7720,7720],[7721,7721]]],[1570192278864,["GJX@GJXAIOU",[[1,7718,"a"]],[7718,7718],[7719,7719]]],[1570192280077,["GJX@GJXAIOU",[[-1,7716,"a"]],[7717,7717],[7716,7716]]],[1570192283074,["GJX@GJXAIOU",[[1,7721,"public class TestNativeOutOfMemoryError {  \n  \n    public static void main(String[] args) {  \n  \n        for (int i = 0;; i++) {  \n            System.out.println(\"i = \" + i);  \n            new Thread(new HoldThread()).start();  \n        }  \n    }  \n  \n}  \n  \nclass HoldThread extends Thread {  \n    CountDownLatch cdl = new CountDownLatch(1);  \n  \n    public HoldThread() {  \n        this.setDaemon(true);  \n    }  \n  \n    public void run() {  \n        try {  \n            cdl.await();  \n        } catch (InterruptedException e) {  \n        }  \n    }  \n}"]],[7721,7721],[8275,8275]]],[1570192287253,["GJX@GJXAIOU",[[-1,7285,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Unable-to-create-new-native-thread \"java.lang.OutOfMemoryError: Unable to create new native thread\")"]],[7286,7489],[7285,7285]]],[1570192290101,["GJX@GJXAIOU",[[-1,7393,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%A4%8D%E7%8E%B0demo \"复现demo\")"]],[7393,7502],[7393,7393]]],[1570192297366,["GJX@GJXAIOU",[[-1,7968,"| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n | \n\npublic class TestNativeOutOfMemoryError { \n\n public static void main(String[] args) { \n\n for (int i = 0;; i++) { \n System.out.println(\"i = \" + i); \n new Thread(new HoldThread()).start(); \n } \n } \n\n} \n\nclass HoldThread extends Thread { \n CountDownLatch cdl = new CountDownLatch(1); \n\n public HoldThread() { \n this.setDaemon(true); \n } \n\n public void run() { \n try { \n cdl.await(); \n } catch (InterruptedException e) { \n } \n } \n}\n\n |"]],[7968,8478],[7968,7968]]],[1570192300165,["GJX@GJXAIOU",[[-1,7974,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88 \"解决方案\")"]],[7975,8095],[7974,7974]]],[1570192305830,["GJX@GJXAIOU",[[-1,8069,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-request-size-bytes-for-reason \"java.lang.OutOfMemoryError: request size bytes for reason\")"]],[8069,8263],[8069,8069]]],[1570192308288,["GJX@GJXAIOU",[[-1,8253,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM \"java.lang.OutOfMemoryError: Requested array size exceeds VM\")"]],[8253,8451],[8253,8253]]],[1570192312341,["GJX@GJXAIOU",[[-1,8356,"[](https://zazalu.space/2019/09/17/java-memory-error-solution-Theoretically/#%E5%B0%BE \"尾\")"]],[8356,8447],[8356,8356]]]],null,"GJX@GJXAIOU"]]}