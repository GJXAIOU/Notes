{"compress":true,"commitItems":[["cfc344be-b5c2-4cb5-b52a-0cf22274b40f",1563939127729,"",[[1563939079099,["GJX@GJXAIOU",[[1,0,"# Java多线程\n\n\n\n"]],[0,0],[12,12]]],[1563939105967,["GJX@GJXAIOU",[[1,11,"# Java多线程学习（吐血超详细总结）\n\n置顶 2015年03月14日 13:13:17 [Evankaka](https://me.csdn.net/Evankaka) 阅读数 143715\n\n 版权声明：本文为博主林炳文Evankaka原创文章，转载请注明出处http://blog.csdn.net/evankaka https://blog.csdn.net/Evankaka/article/details/44153709\n\n         [林炳文Evankaka](http://blog.csdn.net/evankaka)原创作品。转载请注明出处[http://blog.csdn.net/evankaka](http://blog.csdn.net/evankaka)\n\n        写在前面的话：此文只能说是java多线程的一个入门，其实Java里头线程完全可以写一本书了，但是如果最基本的你都学掌握好，又怎么能更上一个台阶呢？如果你觉得此文很简单，那推荐你看看Java并发包的的线程池（[Java并发编程与技术内幕:线程池深入理解](http://blog.csdn.net/evankaka/article/details/51489322)），或者看这个专栏：[Java并发编程与技术内幕](http://blog.csdn.net/column/details/javahhighconcurrence.html)。你将会对Java里头的高并发场景下的线程有更加深刻的理解。\n\n目录[(?)](http://blog.csdn.net/evankaka/article/details/44153709# \"系统根据文章中H1到H6标签自动生成文章目录\")[[-]](http://blog.csdn.net/evankaka/article/details/44153709# \"收起\")\n\n1.  [一扩展javalangThread类](http://blog.csdn.net/evankaka/article/details/44153709#t0)\n2.  [二实现javalangRunnable接口](http://blog.csdn.net/evankaka/article/details/44153709#t1)\n3.  [三Thread和Runnable的区别](http://blog.csdn.net/evankaka/article/details/44153709#t2)\n4.  [四线程状态转换](http://blog.csdn.net/evankaka/article/details/44153709#t3)\n5.  [五线程调度](http://blog.csdn.net/evankaka/article/details/44153709#t4)\n6.  [六常用函数说明](http://blog.csdn.net/evankaka/article/details/44153709#t5)\n    1.  [使用方式](http://blog.csdn.net/evankaka/article/details/44153709#t6)\n    2.  [为什么要用join方法](http://blog.csdn.net/evankaka/article/details/44153709#t7)\n7.  [七常见线程名词解释](http://blog.csdn.net/evankaka/article/details/44153709#t8)\n8.  [八线程同步](http://blog.csdn.net/evankaka/article/details/44153709#t9)\n9.  [九线程数据传递](http://blog.csdn.net/evankaka/article/details/44153709#t10)\n\n        本文主要讲了java中多线程的使用方法、线程同步、线程数据传递、线程状态及相应的一些线程函数用法、概述等。在这之前，首先让我们来了解下在操作系统中进程和线程的区别：\n\n**　　进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）**\n\n**　　线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）**\n\n　　线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。\n\n　　多进程是指操作系统能同时运行多个任务（程序）。\n\n　　多线程是指在同一程序中有多个顺序流在执行。\n\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口.(**其实准确来讲，应该有三种，还有一种是实现Callable接口**，并与Future、线程池结合使用，此文这里不讲这个，有兴趣看这里[Java并发编程与技术内幕:Callable、Future、FutureTask、CompletionService](http://blog.csdn.net/evankaka/article/details/51610635) )\n\n# 一、扩展java.lang.Thread类\n\n这里继承Thread类的方法是比较常用的一种，如果说你只是想起一条线程。没有什么其它特殊的要求，那么可以使用Thread.（**笔者推荐使用Runable，后头会说明为什么**）。下面来看一个简单的实例\n\n```java\npackage com.multithread.learning;/** *@functon 多线程学习 *@author 林炳文 *@time 2015.3.9 */class Thread1 extends Thread{\tprivate String name;    public Thread1(String name) {       this.name=name;    }\tpublic void run() {        for (int i = 0; i < 5; i++) {            System.out.println(name + \"运行  :  \" + i);            try {                sleep((int) Math.random() * 10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }       \t}}public class Main { \tpublic static void main(String[] args) {\t\tThread1 mTh1=new Thread1(\"A\");\t\tThread1 mTh2=new Thread1(\"B\");\t\tmTh1.start();\t\tmTh2.start(); \t} }\n```\n\n输出：\n\nA运行  :  0\nB运行  :  0\nA运行  :  1\nA运行  :  2\nA运行  :  3\nA运行  :  4\nB运行  :  1\nB运行  :  2\nB运行  :  3\nB运行  :  4\n\n再运行一下：\n\nA运行  :  0\nB运行  :  0\nB运行  :  1\nB运行  :  2\nB运行  :  3\nB运行  :  4\nA运行  :  1\nA运行  :  2\nA运行  :  3\nA运行  :  4\n\n说明：\n\n程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用MitiSay的两个对象的start方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。\n\n注意：start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。\n\n从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。\n\nThread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。\n\n实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。\n\n但是start方法重复调用的话，会出现java.lang.IllegalThreadStateException异常。\n\n```java\n\t\tThread1 mTh1=new Thread1(\"A\");\t\tThread1 mTh2=mTh1;\t\tmTh1.start();\t\tmTh2.start();\n```\n\n输出：\n\nException in thread \"main\" java.lang.IllegalThreadStateException\n    at java.lang.Thread.start(Unknown Source)\n    at com.multithread.learning.Main.main(Main.java:31)\nA运行  :  0\nA运行  :  1\nA运行  :  2\nA运行  :  3\nA运行  :  4\n\n# 二、实现java.lang.Runnable接口\n\n采用Runnable也是非常常见的一种，我们只需要重写run方法即可。下面也来看个实例。\n\n```java\n/** *@functon 多线程学习 *@author 林炳文 *@time 2015.3.9 */package com.multithread.runnable;class Thread2 implements Runnable{\tprivate String name; \tpublic Thread2(String name) {\t\tthis.name=name;\t} \t@Override\tpublic void run() {\t\t  for (int i = 0; i < 5; i++) {\t            System.out.println(name + \"运行  :  \" + i);\t            try {\t            \tThread.sleep((int) Math.random() * 10);\t            } catch (InterruptedException e) {\t                e.printStackTrace();\t            }\t        }\t\t\t}\t}public class Main { \tpublic static void main(String[] args) {\t\tnew Thread(new Thread2(\"C\")).start();\t\tnew Thread(new Thread2(\"D\")).start();\t} }\n```\n\n输出：\n\nC运行  :  0\nD运行  :  0\nD运行  :  1\nC运行  :  1\nD运行  :  2\nC运行  :  2\nD运行  :  3\nC运行  :  3\nD运行  :  4\nC运行  :  4\n\n说明：\n\nThread2类通过实现Runnable接口，使得该类有了多线程类的特征。run（）方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。\n\n在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。\n\n实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。\n\n# 三、Thread和Runnable的区别\n\n如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。\n\n**总结：** \n\n**实现Runnable接口比继承Thread类所具有的优势：**\n\n**1）：适合多个相同的程序代码的线程去处理同一个资源**\n\n**2）：可以避免java中的单继承的限制**\n\n**3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立**\n\n**4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类**\n\n**提醒一下大家：main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。**\n\n**在****java****中，每次程序运行至少启动****2****个线程。一个是****main****线程，一个是垃圾收集线程。因为每当使用****java****命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。**\n\n# 四、线程状态转换\n\n下面的这个图非常重要！你如果看懂了这个图，那么对于多线程的理解将会更加深刻！\n\n![](https://img-blog.csdn.net/20150309140927553)\n\n1、新建状态（New）：新创建了一个线程对象。\n\n2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n\n3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。\n\n**4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：**\n\n**（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)**\n\n**（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。**\n\n**（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）**\n\n5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n# 五、线程调度\n\n线程的调度\n\n1、调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。\n\nJava线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：\n\n```java\nstatic int MAX_PRIORITY\n          线程可以具有的最高优先级，取值为10。\nstatic int MIN_PRIORITY\n          线程可以具有的最低优先级，取值为1。\nstatic int NORM_PRIORITY\n          分配给线程的默认优先级，取值为5。\n```\n\nThread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。\n\n 每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。\n\n线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。\n\nJVM提供了10个线程优先级，但与常见的操作系统都不能很好的映射。如果希望程序能移植到各个操作系统中，应该仅仅使用Thread类有以下三个静态常量作为优先级，这样能保证同样的优先级采用了同样的调度方式。\n\n2、线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。\n\n3、线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。\n\n4、线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。\n\n5、线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。\n\n6、线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。\n\n 注意：Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。\n\n# 六、常用函数说明\n\n**①sleep(long millis): 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）\n\n②join():指等待t线程终止。**\n\n### 使用方式。\n\njoin是Thread类的一个方法，启动线程后直接调用，即join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行。\n\n```java\nThread t = new AThread(); t.start(); t.join();\n```\n\n### 为什么要用join()方法\n\n在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。\n\n不加join。\n\n```java\n/** *@functon 多线程学习,join *@author 林炳文 *@time 2015.3.9 */package com.multithread.join;class Thread1 extends Thread{\tprivate String name;    public Thread1(String name) {    \tsuper(name);       this.name=name;    }\tpublic void run() {\t\tSystem.out.println(Thread.currentThread().getName() + \" 线程运行开始!\");        for (int i = 0; i < 5; i++) {            System.out.println(\"子线程\"+name + \"运行 : \" + i);            try {                sleep((int) Math.random() * 10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(Thread.currentThread().getName() + \" 线程运行结束!\");\t}} public class Main { \tpublic static void main(String[] args) {\t\tSystem.out.println(Thread.currentThread().getName()+\"主线程运行开始!\");\t\tThread1 mTh1=new Thread1(\"A\");\t\tThread1 mTh2=new Thread1(\"B\");\t\tmTh1.start();\t\tmTh2.start();\t\tSystem.out.println(Thread.currentThread().getName()+ \"主线程运行结束!\"); \t} }   \n```\n\n输出结果：\nmain主线程运行开始!\nmain主线程运行结束!\nB 线程运行开始!\n子线程B运行 : 0\nA 线程运行开始!\n子线程A运行 : 0\n子线程B运行 : 1\n子线程A运行 : 1\n子线程A运行 : 2\n子线程A运行 : 3\n子线程A运行 : 4\nA 线程运行结束!\n子线程B运行 : 2\n子线程B运行 : 3\n子线程B运行 : 4\nB 线程运行结束!\n发现主线程比子线程早结束\n\n加join\n\n```java\npublic class Main { \tpublic static void main(String[] args) {\t\tSystem.out.println(Thread.currentThread().getName()+\"主线程运行开始!\");\t\tThread1 mTh1=new Thread1(\"A\");\t\tThread1 mTh2=new Thread1(\"B\");\t\tmTh1.start();\t\tmTh2.start();\t\ttry {\t\t\tmTh1.join();\t\t} catch (InterruptedException e) {\t\t\te.printStackTrace();\t\t}\t\ttry {\t\t\tmTh2.join();\t\t} catch (InterruptedException e) {\t\t\te.printStackTrace();\t\t}\t\tSystem.out.println(Thread.currentThread().getName()+ \"主线程运行结束!\"); \t} }\n```\n\n运行结果：\nmain主线程运行开始!\nA 线程运行开始!\n子线程A运行 : 0\nB 线程运行开始!\n子线程B运行 : 0\n子线程A运行 : 1\n子线程B运行 : 1\n子线程A运行 : 2\n子线程B运行 : 2\n子线程A运行 : 3\n子线程B运行 : 3\n子线程A运行 : 4\n子线程B运行 : 4\nA 线程运行结束!\n主线程一定会等子线程都结束了才结束\n\n**③yield():暂停当前正在执行的线程对象，并执行其他线程。**\n\n        Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。\n\n        ** yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。**因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。\n\n结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。可看上面的图。 \n\n```cpp\n/** *@functon 多线程学习 yield *@author 林炳文 *@time 2015.3.9 */package com.multithread.yield;class ThreadYield extends Thread{    public ThreadYield(String name) {        super(name);    }     @Override    public void run() {        for (int i = 1; i <= 50; i++) {            System.out.println(\"\" + this.getName() + \"-----\" + i);            // 当i为30时，该线程就会把CPU时间让掉，让其他或者自己的线程执行（也就是谁先抢到谁执行）            if (i ==30) {                this.yield();            }        }\t}} public class Main { \tpublic static void main(String[] args) {\t\t\t\tThreadYield yt1 = new ThreadYield(\"张三\");    \tThreadYield yt2 = new ThreadYield(\"李四\");        yt1.start();        yt2.start();\t} }\n```\n\n运行结果：\n\n第一种情况：李四（线程）当执行到30时会CPU时间让掉，这时张三（线程）抢到CPU时间并执行。\n\n第二种情况：李四（线程）当执行到30时会CPU时间让掉，这时李四（线程）抢到CPU时间并执行。\n\n**sleep()和yield()的区别**\n        sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。\n        sleep 方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，yield 方法使当前线程让出 CPU 占有权，但让出的时间是不可设定的。实际上，yield()方法对应了如下操作：先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把 CPU  的占有权交给此线程，否则，继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程\n       另外，sleep 方法允许较低优先级的线程获得运行机会，但 yield()  方法执行时，当前线程仍处在可运行状态，所以，不可能让出较低优先级的线程些时获得 CPU 占有权。在一个运行系统中，如果较高优先级的线程没有调用 sleep 方法，又没有受到 I\\O 阻塞，那么，较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。 \n\n**④setPriority(): 更改线程的优先级。**\n\n　　　　MIN_PRIORITY = 1\n  　　   NORM_PRIORITY = 5\n           MAX_PRIORITY = 10\n\n用法：\n\nThread4 t1 = new Thread4(\"t1\"); Thread4 t2 = new Thread4(\"t2\"); t1.setPriority(Thread.MAX_PRIORITY); t2.setPriority(Thread.MIN_PRIORITY);\n\n**⑤interrupt():不要以为它是中断某个线程！它只是线线程发送一个中断信号，让线程在无限等待时（如死锁时）能抛出抛出，从而结束线程，但是如果你吃掉了这个异常，那么这个线程还是不会中断的！**\n\n⑥wait()\n\nObj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。\n\n    单单在概念上理解清楚了还不够，需要在实际的例子中进行测试才能更好的理解。对Object.wait()，Object.notify()的应用最经典的例子，应该是三线程打印ABC的问题了吧，这是一道比较经典的面试题，题目要求如下：\n\n    建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，notify()就可以很方便的解决。代码如下：\n\n```java\n/** * wait用法 * @author DreamSea  * @time 2015.3.9  */package com.multithread.wait;public class MyThreadPrinter2 implements Runnable {   \t      private String name;       private Object prev;       private Object self;         private MyThreadPrinter2(String name, Object prev, Object self) {           this.name = name;           this.prev = prev;           this.self = self;       }         @Override      public void run() {           int count = 10;           while (count > 0) {               synchronized (prev) {                   synchronized (self) {                       System.out.print(name);                       count--;                                          self.notify();                   }                   try {                       prev.wait();                   } catch (InterruptedException e) {                       e.printStackTrace();                   }               }             }       }         public static void main(String[] args) throws Exception {           Object a = new Object();           Object b = new Object();           Object c = new Object();           MyThreadPrinter2 pa = new MyThreadPrinter2(\"A\", c, a);           MyThreadPrinter2 pb = new MyThreadPrinter2(\"B\", a, b);           MyThreadPrinter2 pc = new MyThreadPrinter2(\"C\", b, c);                                 new Thread(pa).start();        Thread.sleep(100);  //确保按顺序A、B、C执行        new Thread(pb).start();        Thread.sleep(100);          new Thread(pc).start();           Thread.sleep(100);          }   }   \n```\n\n输出结果：\n\nABCABCABCABCABCABCABCABCABCABC\n\n     先来解释一下其整体思路，从大的方向上来讲，该问题为三线程间的同步唤醒操作，主要的目的就是ThreadA->ThreadB->ThreadC->ThreadA循环执行三个线程。为了控制线程执行的顺序，那么就必须要确定唤醒、等待的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。一个对象锁是prev，就是前一个线程所持有的对象锁。还有一个就是自身对象锁。主要的思想就是，为了控制执行的顺序，必须要先持有prev锁，也就前一个线程要释放自身对象锁，再去申请自身对象锁，两者兼备时打印，之后首先调用self.notify()释放自身对象锁，唤醒下一个等待线程，再调用prev.wait()释放prev对象锁，终止当前线程，等待循环结束后再次被唤醒。运行上述代码，可以发现三个线程循环打印ABC，共10次。程序运行的主要过程就是A线程最先运行，持有C,A对象锁，后释放A,C锁，唤醒B。线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，再释放C,B锁，唤醒A。看起来似乎没什么问题，但如果你仔细想一下，就会发现有问题，就是初始条件，三个线程按照A,B,C的顺序来启动，按照前面的思考，A唤醒B，B唤醒C，C再唤醒A。但是这种假设依赖于JVM中线程调度、执行的顺序。\n**    wait和sleep区别\n共同点： **\n1\\. 他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。 \n2\\. wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException。 \n   如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep /join，则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。 \n   需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出InterruptedException 。 \n**不同点： **\n1\\. Thread类的方法：sleep(),yield()等 \n   Object的方法：wait()和notify()等 \n2\\. 每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同步。 \n   sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。 \n3\\. wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用 \n所以sleep()和wait()方法的最大区别是：\n　　　　sleep()睡眠时，保持对象锁，仍然占有该锁；\n　　　　而wait()睡眠时，释放对象锁。\n　　但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException（但不建议使用该方法）。\n**sleep（）方法**\nsleep()使当前线程进入停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会;\n　　 sleep()是Thread类的Static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法是，线程虽然休眠了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）。\n　　在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。 \n**wait（）方法**\nwait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁）；其他线程可以访问；\n　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。\n　　wiat()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。\n\n# 七、常见线程名词解释\n\n主线程：JVM调用程序main()所产生的线程。\n\n当前线程：这个是容易混淆的概念。一般指通过Thread.currentThread()来获取的进程。\n\n后台线程：指为其他线程提供服务的线程，也称为守护线程。JVM的垃圾回收线程就是一个后台线程。**用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束**\n\n前台线程：是指接受后台线程服务的线程，其实前台后台线程是联系在一起，就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。\n\n**线程类的一些常用方法： \n\n　　sleep(): 强迫一个线程睡眠Ｎ毫秒。 \n　　isAlive(): 判断一个线程是否存活。 \n　　join(): 等待线程终止。 \n　　activeCount(): 程序中活跃的线程数。 \n　　enumerate(): 枚举程序中的线程。 \n    currentThread(): 得到当前线程。 \n　　isDaemon(): 一个线程是否为守护线程。 \n　　setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束) \n　　setName(): 为线程设置一个名称。 \n　　wait(): 强迫一个线程等待。 \n　　notify(): 通知一个线程继续运行。 \n　　setPriority(): 设置一个线程的优先级。** \n\n# 八、线程同步\n\n1、synchronized关键字的作用域有二种： \n1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法； \n2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。 \n\n2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/*区块*/}，它的作用域是当前对象； \n\n3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法； \n\nJava对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。\n\n总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。\n\n在进一步阐述之前，我们需要明确几点：\n\nA．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。\n\nB．每个对象只有一个锁（lock）与之相关联。\n\nC．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。\n\n接着来讨论synchronized用到不同地方对代码产生的影响：\n\n假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。\n\n1．  把synchronized当作函数修饰符时，示例代码如下：\n\n```java\nPublic synchronized void methodAAA(){//….}\n```\n\n这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。\n\n上边的示例代码等同于如下代码：\n\n```java\npublic void methodAAA(){synchronized (this)      //  (1){       //…..}}\n```\n\n (1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：（\n\n2．同步块，示例代码如下：\n\n```java\n            public void method3(SomeObject so)              {                     synchronized(so){       //…..}}\n```\n\n这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：\n\n```java\nclass Foo implements Runnable{       private byte[] lock = new byte[0];  // 特殊的instance变量    Public void methodA(){       synchronized(lock) { //… }}//…..}\n```\n\n注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。\n\n3．将synchronized作用于static 函数，示例代码如下：\n\n```java\nClass Foo{public synchronized static void methodAAA()   // 同步的static 函数{//….}public void methodBBB(){       synchronized(Foo.class)   //  class literal(类名称字面常量)}       }\n```\n\n   代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。\n\n记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。\n\n可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。\n\n**总结一下：**\n\n1、线程同步的目的是为了保护多个线程反问一个资源时对资源的破坏。\n2、线程同步方法是通过锁来实现，每个对象都有切仅有一个锁，这个锁与一个特定的对象关联，线程一旦获取了对象锁，其他访问该对象的线程就无法再访问该对象的其他非同步方法\n3、对于静态同步方法，锁是针对这个类的，锁对象是该类的Class对象。静态和非静态方法的锁互不干预。一个线程获得锁，当在一个同步方法中访问另外对象上的同步方法时，会获取这两个对象锁。\n4、对于同步，要时刻清醒在哪个对象上同步，这是关键。\n5、编写线程安全的类，需要时刻注意对多个线程竞争访问资源的逻辑和安全做出正确的判断，对“原子”操作做出分析，并保证原子操作期间别的线程无法访问竞争资源。\n6、当多个线程等待一个对象锁时，没有获取到锁的线程将发生阻塞。\n7、死锁是线程间相互等待锁锁造成的，在实际中发生的概率非常的小。真让你写个死锁程序，不一定好使，呵呵。但是，一旦程序发生死锁，程序将死掉。\n\n# 九、线程数据传递\n\n在传统的同步开发模式下，当我们调用一个函数时，通过这个函数的参数将数据传入，并通过这个函数的返回值来返回最终的计算结果。但在多线程的异步开发模式下，数据的传递和返回和同步开发模式有很大的区别。由于线程的运行和结束是不可预料的，因此，在传递和返回数据时就无法象函数一样通过函数参数和return语句来返回数据。\n\n9.1、通过构造方法传递数据 \n在创建线程时，必须要建立一个Thread类的或其子类的实例。因此，我们不难想到在调用start方法之前通过线程类的构造方法将数据传入线程。并将传入的数据使用类变量保存起来，以便线程使用(其实就是在run方法中使用)。下面的代码演示了如何通过构造方法来传递数据： \n\n```java\n package mythread; public class MyThread1 extends Thread { private String name; public MyThread1(String name) { this.name = name; } public void run() { System.out.println(\"hello \" + name); } public static void main(String[] args) { Thread thread = new MyThread1(\"world\"); thread.start(); } } \n```\n\n由于这种方法是在创建线程对象的同时传递数据的，因此，在线程运行之前这些数据就就已经到位了，这样就不会造成数据在线程运行后才传入的现象。如果要传递更复杂的数据，可以使用集合、类等数据结构。使用构造方法来传递数据虽然比较安全，但如果要传递的数据比较多时，就会造成很多不便。由于Java没有默认参数，要想实现类似默认参数的效果，就得使用重载，这样不但使构造方法本身过于复杂，又会使构造方法在数量上大增。因此，要想避免这种情况，就得通过类方法或类变量来传递数据。 \n\n9.2、通过变量和方法传递数据 \n向对象中传入数据一般有两次机会，第一次机会是在建立对象时通过构造方法将数据传入，另外一次机会就是在类中定义一系列的public的方法或变量（也可称之为字段）。然后在建立完对象后，通过对象实例逐个赋值。下面的代码是对MyThread1类的改版，使用了一个setName方法来设置 name变量： \n\n```java\n package mythread; public class MyThread2 implements Runnable { private String name; public void setName(String name) { this.name = name; } public void run() { System.out.println(\"hello \" + name); } public static void main(String[] args) { MyThread2 myThread = new MyThread2(); myThread.setName(\"world\"); Thread thread = new Thread(myThread); thread.start(); } } \n```\n\n9.3、通过回调函数传递数据 \n\n上面讨论的两种向线程中传递数据的方法是最常用的。但这两种方法都是main方法中主动将数据传入线程类的。这对于线程来说，是被动接收这些数据的。然而，在有些应用中需要在线程运行的过程中动态地获取数据，如在下面代码的run方法中产生了3个随机数，然后通过Work类的process方法求这三个随机数的和，并通过Data类的value将结果返回。从这个例子可以看出，在返回value之前，必须要得到三个随机数。也就是说，这个 value是无法事先就传入线程类的。 \n\n```java\n package mythread; class Data { public int value = 0; } class Work { public void process(Data data, Integer numbers) { for (int n : numbers) { data.value += n; } } } public class MyThread3 extends Thread { private Work work; public MyThread3(Work work) { this.work = work; } public void run() { java.util.Random random = new java.util.Random(); Data data = new Data(); int n1 = random.nextInt(1000); int n2 = random.nextInt(2000); int n3 = random.nextInt(3000); work.process(data, n1, n2, n3); // 使用回调函数 System.out.println(String.valueOf(n1) + \"+\" + String.valueOf(n2) + \"+\" + String.valueOf(n3) + \"=\" + data.value); } public static void main(String[] args) { Thread thread = new MyThread3(new Work()); thread.start(); } } \n```\n\n  好了，Java多线程的基础知识就讲到这里了，有兴趣研究多线程的推荐直接看java的源码，你将会得到很大的提升！\n\n[林炳文Evankaka](http://blog.csdn.net/evankaka)原创作品。转载请注明出处[http://blog.csdn.net/evankaka](http://blog.csdn.net/evankaka)"]],[11,11],[22442,22442]]],[1563939108810,["GJX@GJXAIOU",[[-1,11,"# Java多线程学习（吐血超详细总结）"]],[11,31],[11,11]]],[1563939135467,["GJX@GJXAIOU",[[-1,13,"置顶 2015年03月14日 13:13:17 [Evankaka](https://me.csdn.net/Evankaka) 阅读数 143715\n\n 版权声明：本文为博主林炳文Evankaka原创文章，转载请注明出处http://blog.csdn.net/evankaka https://blog.csdn.net/Evankaka/article/details/44153709\n\n         [林炳文Evankaka](http://blog.csdn.net/evankaka)原创作品。转载请注明出处[http://blog.csdn.net/evankaka](http://blog.csdn.net/evankaka)"]],[13,338],[13,13]]],[1563939151845,["GJX@GJXAIOU",[[1,11,"[原文地址](https://blog.csdn.net/evankaka/article/details/44153709)"]],[11,11],[74,74]]],[1563939153748,["GJX@GJXAIOU",[[-1,77,"\n"]],[77,77],[76,76]]],[1563939154042,["GJX@GJXAIOU",[[-1,76,"\n"]],[76,76],[75,75]]],[1563939169083,["GJX@GJXAIOU",[[-1,386,"目录[(?)](http://blog.csdn.net/evankaka/article/details/44153709# \"系统根据文章中H1到H6标签自动生成文章目录\")[[-]](http://blog.csdn.net/evankaka/article/details/44153709# \"收起\")\n\n1.  [一扩展javalangThread类](http://blog.csdn.net/evankaka/article/details/44153709#t0)\n2.  [二实现javalangRunnable接口](http://blog.csdn.net/evankaka/article/details/44153709#t1)\n3.  [三Thread和Runnable的区别](http://blog.csdn.net/evankaka/article/details/44153709#t2)\n4.  [四线程状态转换](http://blog.csdn.net/evankaka/article/details/44153709#t3)\n5.  [五线程调度](http://blog.csdn.net/evankaka/article/details/44153709#t4)\n6.  [六常用函数说明](http://blog.csdn.net/evankaka/article/details/44153709#t5)\n    1.  [使用方式](http://blog.csdn.net/evankaka/article/details/44153709#t6)\n    2.  [为什么要用join方法](http://blog.csdn.net/evankaka/article/details/44153709#t7)\n7.  [七常见线程名词解释](http://blog.csdn.net/evankaka/article/details/44153709#t8)\n8.  [八线程同步](http://blog.csdn.net/evankaka/article/details/44153709#t9)\n9.  [九线程数据传递](http://blog.csdn.net/evankaka/article/details/44153709#t10)\n"]],[386,1392],[386,386]]],[1563939173580,["GJX@GJXAIOU",[[1,76,"\n"]],[75,75],[76,76]]],[1563939179366,["GJX@GJXAIOU",[[-1,10,""],[1,10,"@"],[-1,77,"       "],[1,84,"       "],[-1,388,"       "],[1,395,"       "],[-1,947," "],[1,948," "],[-1,1744,"  : "],[1,1748,"  : "],[-1,1754,"  : "],[1,1758,"  : "],[-1,1764,"  : "],[1,1768,"  : "],[-1,1774,"  : "],[1,1778,"  : "],[-1,1784,"  : "],[1,1788,"  : "],[-1,1794,"  : "],[1,1798,"  : "],[-1,1804,"  : "],[1,1808,"  : "],[-1,1814,"  : "],[1,1818,"  : "],[-1,1824,"  : "],[1,1828,"  : "],[-1,1834,"  : "],[1,1838,"  : "],[-1,1853,"  : "],[1,1857,"  : "],[-1,1863,"  : "],[1,1867,"  : "],[-1,1873,"  : "],[1,1877,"  : "],[-1,1883,"  : "],[1,1887,"  : "],[-1,1893,"  : "],[1,1897,"  : "],[-1,1903,"  : "],[1,1907,"  : "],[-1,1913,"  : "],[1,1917,"  : "],[-1,1923,"  : "],[1,1927,"  : "],[-1,1933,"  : "],[1,1937,"  : "],[-1,1943,"  : "],[1,1947,"  : "],[-1,2507,"    "],[1,2511,"    "],[-1,2553,"    "],[1,2557,"    "],[-1,2612,"  : "],[1,2616,"  : "],[-1,2622,"  : "],[1,2626,"  : "],[-1,2632,"  : "],[1,2636,"  : "],[-1,2642,"  : "],[1,2646,"  : "],[-1,2652,"  : "],[1,2656,"  : "],[-1,3391,"  : "],[1,3395,"  : "],[-1,3401,"  : "],[1,3405,"  : "],[-1,3411,"  : "],[1,3415,"  : "],[-1,3421,"  : "],[1,3425,"  : "],[-1,3431,"  : "],[1,3435,"  : "],[-1,3441,"  : "],[1,3445,"  : "],[-1,3451,"  : "],[1,3455,"  : "],[-1,3461,"  : "],[1,3465,"  : "],[-1,3471,"  : "],[1,3475,"  : "],[-1,3481,"  : "],[1,3485,"  : "],[-1,5264," "],[1,5265," "],[-1,6101," "],[1,6102," "],[-1,6196," "],[1,6197," "],[-1,8433,"       "],[1,8440,"       "],[-1,8485,"        ** "],[1,8496,"        ** "],[-1,9512,"       "],[1,9519,"       "],[-1,9647,"       "],[1,9654,"       "],[-1,9660," "],[1,9661," "],[-1,9708," "],[1,9709," "],[-1,9718," CPU "],[1,9723," CPU "],[-1,9791," CPU  "],[1,9797," CPU  "],[-1,9858,"      "],[1,9864,"      "],[-1,9873," "],[1,9874," "],[-1,9894," "],[1,9895," "],[-1,9902,"  "],[1,9904,"  "],[-1,9943," CPU "],[1,9948," CPU "],[-1,9975," "],[1,9976," "],[-1,9981," "],[1,9982," "],[-1,9990," I\\O "],[1,9995," I\\O "],[-1,10034," "],[1,10035," "],[-1,10054," "],[1,10055," "],[-1,10089,"  　　   "],[1,10096,"  　　   "],[-1,10114,"           "],[1,10125,"           "],[-1,10869,"   "],[1,10872,"   "],[-1,10988,"   "],[1,10991,"   "],[-1,12671,"     "],[1,12676,"     "],[-1,13236,"   "],[1,13239,"   "],[-1,13257," "],[1,13258," "],[-1,13301," "],[1,13302," "],[-1,13381," \n  "],[1,13385," \n  "],[-1,13520," \n  "],[1,13524," \n  "],[-1,13716," "],[1,13717," "],[-1,13724," "],[1,13725," "],[-1,13759," \n  "],[1,13763," \n  "],[-1,13790," "],[1,13791," "],[-1,13847," \n  "],[1,13851," \n  "],[-1,13897," "],[1,13898," "],[-1,13960," "],[1,13961," "],[-1,14418," "],[1,14419," "],[-1,15032," "],[1,15033," "],[-1,15058," "],[1,15059," "],[-1,15084," "],[1,15085," "],[-1,15103," "],[1,15104," "],[-1,15132," "],[1,15133," "],[-1,15158," \n   "],[1,15163," \n   "],[-1,15188," "],[1,15189," "],[-1,15216," "],[1,15217," "],[-1,15280," "],[1,15281," "],[-1,15305," "],[1,15306," "],[-1,15326," "],[1,15327," "],[-1,15351," "],[1,15352," "],[-1,15421," "],[1,15422," "],[-1,15655," "],[1,15656," "],[-1,15756," "],[1,15757," "],[-1,15874," "],[1,15875," "],[-1,16533," "],[1,16534," "],[-1,16878," "],[1,16879," "],[-1,17783,"  "],[1,17785,"  "],[-1,18778," "],[1,18779," "],[-1,18910," "],[1,18911," "],[-1,19446," "],[1,19447," "],[-1,19464," "],[1,19465," "],[-1,19612," "],[1,19613," "],[-1,20006," "],[1,20007," "],[-1,20236," "],[1,20237," "],[-1,20976," "],[1,20977," "]],[10,10],[11,11]]],[1563939180967,["GJX@GJXAIOU",[[1,11,"通常"]],[11,11],[13,13]]],[1563939182233,["GJX@GJXAIOU",[[-1,11,"通常"]],[13,13],[11,11]]],[1563939184070,["GJX@GJXAIOU",[[1,11,"toc"]],[11,11],[14,14]]],[1563939184956,["GJX@GJXAIOU",[[1,15,"\n"]],[14,14],[15,15]]],[1563939188322,["GJX@GJXAIOU",[[-1,85,"     "]],[85,90],[85,85]]],[1563939197961,["GJX@GJXAIOU",[[-1,391,"     "]],[396,396],[391,391]]],[1563939203105,["GJX@GJXAIOU",[[-1,477,"　　"]],[479,479],[477,477]]],[1563939204273,["GJX@GJXAIOU",[[-1,552,"　　"]],[554,554],[552,552]]],[1563939220284,["GJX@GJXAIOU",[[1,1111,"\n"],[1,1114,"\n"],[1,1130,"\n"],[1,1143,"\n"],[1,1159,"\n"],[1,1162,"\n"],[1,1191,"\n"],[1,1212,"\n"],[1,1245,"\n"],[1,1267,"\n"],[1,1272,"\n"],[1,1292,"\n"],[1,1329,"\n"],[1,1382,"\n"],[1,1399,"\n"],[1,1447,"\n"],[1,1493,"\n"],[1,1529,"\n"],[1,1542,"\n"],[1,1551,"\n"],[1,1558,"\n"],[1,1560,"\n"],[1,1561,"\n"],[1,1580,"\n"],[1,1581,"\n"],[1,1622,"\n"],[1,1654,"\n"],[1,1686,"\n"],[1,1701,"\n"],[1,1716,"\n"],[1,1717,"\n"],[1,1719,"\n"],[1,1720,"\n"]],[1078,1721],[1754,1754]]],[1563939251043,["GJX@GJXAIOU",[[1,2375,"\t"],[1,2405,"\n"],[1,2425,"\n"],[1,2440,"\n"]],[2374,2455],[2459,2459]]],[1563939253074,["GJX@GJXAIOU",[[-1,2375,"\t"]],[2376,2376],[2375,2375]]],[1563939257058,["GJX@GJXAIOU",[[-1,2374,"\t"],[-1,2406,"\t"],[-1,2428,"\t"],[-1,2443,"\t"]],[2375,2458],[2374,2454]]],[1563939257579,["GJX@GJXAIOU",[[-1,2373,"\t"],[-1,2405,"\t"],[-1,2425,"\t"],[-1,2440,"\t"]],[2374,2454],[2373,2450]]],[1563939272305,["GJX@GJXAIOU",[[1,2764,"\n"],[1,2780,"\n"],[1,2793,"\n"],[1,2809,"\n"],[1,2812,"\n"],[1,2845,"\n"],[1,2879,"\n"],[1,2900,"\n"],[1,2901,"\n"],[1,2931,"\n"],[1,2948,"\n"],[1,2950,"\n"],[1,2951,"\n"],[1,2961,"\n"],[1,2981,"\n"],[1,3014,"\n"],[1,3068,"\n"],[1,3086,"\n"],[1,3139,"\n"],[1,3186,"\n"],[1,3223,"\n"],[1,3237,"\n"],[1,3247,"\n"],[1,3249,"\n"],[1,3251,"\n"],[1,3252,"\n"],[1,3253,"\n"],[1,3272,"\n"],[1,3273,"\n"],[1,3314,"\n"],[1,3353,"\n"],[1,3392,"\n"],[1,3394,"\n"],[1,3395,"\n"]],[2761,3396],[3430,3430]]],[1563939315547,["GJX@GJXAIOU",[[1,6653,"\n"],[1,6674,"\n"],[1,6687,"\n"],[1,6703,"\n"],[1,6706,"\n"],[1,6735,"\n"],[1,6764,"\n"],[1,6785,"\n"],[1,6818,"\n"],[1,6835,"\n"],[1,6857,"\n"],[1,6862,"\n"],[1,6882,"\n"],[1,6950,"\n"],[1,6987,"\n"],[1,7044,"\n"],[1,7061,"\n"],[1,7109,"\n"],[1,7155,"\n"],[1,7191,"\n"],[1,7204,"\n"],[1,7213,"\n"],[1,7287,"\n"],[1,7289,"\n"],[1,7290,"\n"],[1,7291,"\n"],[1,7310,"\n"],[1,7311,"\n"],[1,7352,"\n"],[1,7418,"\n"],[1,7450,"\n"],[1,7482,"\n"],[1,7497,"\n"],[1,7512,"\n"],[1,7579,"\n"],[1,7580,"\n"],[1,7582,"\n"],[1,7583,"\n"],[1,7584,"\n"],[1,7585,"\n"],[1,7586,"\n"]],[6650,7587],[7628,7628]]],[1563939333278,["GJX@GJXAIOU",[[1,7864,"\n"],[1,7865,"\n"],[1,7906,"\n"],[1,7972,"\n"],[1,8004,"\n"],[1,8036,"\n"],[1,8051,"\n"],[1,8066,"\n"],[1,8073,"\n"],[1,8088,"\n"],[1,8124,"\n"],[1,8147,"\n"],[1,8150,"\n"],[1,8157,"\n"],[1,8172,"\n"],[1,8208,"\n"],[1,8231,"\n"],[1,8234,"\n"],[1,8301,"\n"],[1,8302,"\n"],[1,8304,"\n"],[1,8305,"\n"]],[7845,8306],[8328,8328]]],[1563939341009,["GJX@GJXAIOU",[[-1,8552,"     "]],[8557,8557],[8552,8552]]],[1563939343378,["GJX@GJXAIOU",[[-1,8598,"      "]],[8604,8604],[8598,8598]]],[1563939347825,["GJX@GJXAIOU",[[-1,8599,"* "]],[8600,8600],[8599,8599]]],[1563939351004,["GJX@GJXAIOU",[[1,8599,"*"]],[8599,8599],[8600,8600]]],[1563939361804,["GJX@GJXAIOU",[[1,8827,"\n"],[1,8849,"\n"],[1,8862,"\n"],[1,8878,"\n"],[1,8881,"\n"],[1,8911,"\n"],[1,8944,"\n"],[1,8981,"\n"],[1,9001,"\n"],[1,9006,"\n"],[1,9007,"\n"],[1,9020,"\n"],[1,9043,"\n"],[1,9082,"\n"],[1,9148,"\n"],[1,9208,"\n"],[1,9233,"\n"],[1,9262,"\n"],[1,9275,"\n"],[1,9284,"\n"],[1,9285,"\n"],[1,9286,"\n"],[1,9287,"\n"],[1,9288,"\n"],[1,9307,"\n"],[1,9308,"\n"],[1,9349,"\n"],[1,9351,"\n"],[1,9393,"\n"],[1,9438,"\n"],[1,9458,"\n"],[1,9478,"\n"],[1,9480,"\n"],[1,9481,"\n"]],[8824,9482],[9516,9516]]],[1563939387385,["GJX@GJXAIOU",[[-1,11009,"  "]],[11011,11011],[11009,11009]]],[1563939388410,["GJX@GJXAIOU",[[-1,11126,"  "]],[11128,11128],[11126,11126]]],[1563939395026,["GJX@GJXAIOU",[[1,11238,"\n"],[1,11247,"\n"],[1,11267,"\n"],[1,11285,"\n"],[1,11288,"\n"],[1,11317,"\n"],[1,11371,"\n"],[1,11374,"\n"],[1,11401,"\n"],[1,11428,"\n"],[1,11455,"\n"],[1,11457,"\n"],[1,11529,"\n"],[1,11557,"\n"],[1,11585,"\n"],[1,11613,"\n"],[1,11621,"\n"],[1,11623,"\n"],[1,11638,"\n"],[1,11664,"\n"],[1,11690,"\n"],[1,11720,"\n"],[1,11756,"\n"],[1,11796,"\n"],[1,11842,"\n"],[1,11872,"\n"],[1,11892,"\n"],[1,11929,"\n"],[1,11949,"\n"],[1,11973,"\n"],[1,12008,"\n"],[1,12061,"\n"],[1,12104,"\n"],[1,12124,"\n"],[1,12140,"\n"],[1,12142,"\n"],[1,12154,"\n"],[1,12162,"\n"],[1,12164,"\n"],[1,12228,"\n"],[1,12263,"\n"],[1,12298,"\n"],[1,12333,"\n"],[1,12398,"\n"],[1,12463,"\n"],[1,12528,"\n"],[1,12539,"\n"],[1,12550,"\n"],[1,12581,"\n"],[1,12623,"\n"],[1,12654,"\n"],[1,12682,"\n"],[1,12716,"\n"],[1,12744,"\n"],[1,12756,"\n"],[1,12757,"  \n"]],[11235,12758],[12816,12816]]],[1563939404306,["GJX@GJXAIOU",[[-1,12865,"   "]],[12867,12867],[12864,12864]]],[1563939410604,["GJX@GJXAIOU",[[-1,13425,"    "]],[13429,13429],[13425,13425]]],[1563939414920,["GJX@GJXAIOU",[[1,13437,"**"]],[13437,13437],[13439,13439]]],[1563939421582,["GJX@GJXAIOU",[[1,13440,"**"]],[13440,13440],[13442,13442]]],[1563939441930,["GJX@GJXAIOU",[[1,16799,"\n"],[1,16800,"\n"],[1,16804,"\n"]],[16763,16805],[16808,16808]]],[1563939447868,["GJX@GJXAIOU",[[1,17016,"\n"],[1,17017,"\n"],[1,17049,"\n"],[1,17050,"\n"],[1,17062,"\n"],[1,17063,"\n"]],[16993,17064],[17070,17070]]],[1563939454642,["GJX@GJXAIOU",[[1,17268," "],[1,17302,"\n"],[1,17317,"\n"],[1,17354,"\n"],[1,17355,"\n"],[1,17367,"\n"],[1,17368,"\n"]],[17257,17369],[17376,17376]]],[1563939457090,["GJX@GJXAIOU",[[-1,17257,"            "]],[17256,17268],[17256,17256]]],[1563939458930,["GJX@GJXAIOU",[[-1,17296,"          "]],[17296,17306],[17296,17296]]],[1563939460836,["GJX@GJXAIOU",[[-1,17305,"              "]],[17304,17318],[17304,17304]]],[1563939468306,["GJX@GJXAIOU",[[1,17501,"\n"],[1,17502,"\n"],[1,17561,"\n"],[1,17586,"\n"],[1,17587,"\n"],[1,17620,"\n"],[1,17621,"\n"],[1,17626,"\n"]],[17472,17627],[17635,17635]]],[1563939475300,["GJX@GJXAIOU",[[1,17794,"\n"],[1,17795,"\n"],[1,17856,"\n"],[1,17857,"\n"],[1,17861,"\n"],[1,17862,"\n"],[1,17885,"\n"],[1,17886,"\n"],[1,17945,"\n"],[1,17946,"\n"]],[17785,17954],[17964,17964]]],[1563939487387,["GJX@GJXAIOU",[[1,19109,"\n"],[1,19127,"\n"],[1,19165,"\n"],[1,19167,"\n"],[1,19188,"\n"],[1,19218,"\n"],[1,19220,"\n"],[1,19238,"\n"],[1,19240,"\n"],[1,19258,"\n"],[1,19260,"\n"],[1,19297,"\n"],[1,19299,"\n"],[1,19338,"\n"],[1,19340,"\n"],[1,19380,"\n"],[1,19396,"\n"],[1,19398,"\n"]],[19108,19400],[19418,19418]]],[1563939494821,["GJX@GJXAIOU",[[1,19829,"\n"],[1,19847,"\n"],[1,19890,"\n"],[1,19892,"\n"],[1,19913,"\n"],[1,19946,"\n"],[1,19948,"\n"],[1,19966,"\n"],[1,19968,"\n"],[1,19986,"\n"],[1,19988,"\n"],[1,20025,"\n"],[1,20027,"\n"],[1,20066,"\n"],[1,20068,"\n"],[1,20106,"\n"],[1,20133,"\n"],[1,20171,"\n"],[1,20187,"\n"],[1,20189,"\n"]],[19828,20191],[20211,20211]]],[1563939501708,["GJX@GJXAIOU",[[1,20473,"\n"],[1,20491,"\n"],[1,20502,"\n"],[1,20504,"\n"],[1,20526,"\n"],[1,20528,"\n"],[1,20539,"\n"],[1,20541,"\n"],[1,20589,"\n"],[1,20591,"\n"],[1,20613,"\n"],[1,20615,"\n"],[1,20632,"\n"],[1,20634,"\n"],[1,20636,"\n"],[1,20638,"\n"],[1,20676,"\n"],[1,20678,"\n"],[1,20697,"\n"],[1,20725,"\n"],[1,20727,"\n"],[1,20745,"\n"],[1,20747,"\n"],[1,20765,"\n"],[1,20767,"\n"],[1,20817,"\n"],[1,20841,"\n"],[1,20872,"\n"],[1,20903,"\n"],[1,20934,"\n"],[1,20976,"\n"],[1,21047,"\n"],[1,21089,"\n"],[1,21091,"\n"],[1,21130,"\n"],[1,21132,"\n"],[1,21175,"\n"],[1,21191,"\n"],[1,21193,"\n"]],[20472,21195],[21234,21234]]],[1563939520838,["GJX@GJXAIOU",[[1,20463,"、、"]],[20463,20463],[20465,20465]]],[1563939521568,["GJX@GJXAIOU",[[-1,20463,"、、"]],[20465,20465],[20463,20463]]],[1563939526422,["GJX@GJXAIOU",[[1,20463,"//此代码不完整"]],[20463,20463],[20471,20471]]],[1563939566369,["GJX@GJXAIOU",[[-1,3132,"int"]],[3135,3135],[3132,3132]]],[1563939567732,["GJX@GJXAIOU",[[1,3132,"long"]],[3132,3132],[3136,3136]]]],null,"GJX@GJXAIOU"]]}