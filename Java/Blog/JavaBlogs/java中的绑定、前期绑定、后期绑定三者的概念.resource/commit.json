{"compress":true,"commitItems":[["5c9b179b-74d8-4253-87f9-1e6d3a04f47a",1563155003089,"# java中的绑定、前期绑定、后期绑定三者的概念\n\n2015年07月13日 16:03:49 [q35445762](https://me.csdn.net/q35445762) 阅读数 1186\n\n       绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。\n\n　　前期绑定：在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。例如：C。\n\n　　后期绑定：在运行时根据具体对象的类型进行绑定。\n\n在java中，几乎所有的方法都是后期绑定的，在运行时动态绑定方法属于子类还是基类。但是也有特殊，针对static方法和final方法由于不能被继承，因此在编译时就可以确定他们的值，他们是属于前期绑定的。特别说明的一点是，private声明的方法和成员变量不能被子类继承，所有的private方法都被隐式的指定为final的(由此我们也可以知道：将方法声明为final类型的一是为了防止方法被覆盖，二是为了有效的关闭java中的动态绑定)。java中的后期绑定是有JVM来实现的，我们不用去显式的声明它，而C++则不同,必须明确的声明某个方法具备后期绑定。\n\n精确使用的方法是编译器绑定，在编译阶段，最佳方法名依赖于参数的静态和控制引用的静态类型所适合的方法。在这一点上，设置方法的名称，这一步叫静态重载。\n决定方法是哪一个类的版本，这通过由虚拟机推断出这个对象的运行时类型来完成，一旦知道运行时类型，虚拟机就唤起继承机制，寻找方法的最终版本。这叫做动态绑定。\n\n重载函数的实际调用版本由编译器绑定决定，而覆盖函数的实际调用版本由动态绑定决定。 \n\n在处理java类中的成员变量时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性还是父类的属性。 \n\n最简单的办法是将该成员变量封装成方法getter形式。",[[1563154991362,["GJX@GJXAIOU",[[-1,27,"2015年07月13日 16:03:49 [q35445762](https://me.csdn.net/q35445762) 阅读数 1186"]],[27,99],[27,27]]],[1563155014296,["GJX@GJXAIOU",[[1,26,"[原文地址](https://blog.csdn.net/q35445762/article/details/46863819)"]],[26,26],[90,90]]],[1563155023939,["GJX@GJXAIOU",[[1,107,"**"],[1,127,"**"]],[107,127],[107,131]]],[1563155064867,["GJX@GJXAIOU",[[-1,93,"       "],[-1,136,"　　"],[-1,180,"　　"]],[100,205],[100,205]]],[1563155074443,["GJX@GJXAIOU",[[1,196,"**"],[1,217,"**"]],[196,217],[196,221]]],[1563155093577,["GJX@GJXAIOU",[[1,248,"**"],[1,266,"**"]],[248,266],[248,270]]],[1563155096851,["GJX@GJXAIOU",[[1,294,"**"],[1,304,"**"]],[294,304],[294,308]]],[1563155101884,["GJX@GJXAIOU",[[-1,199,"j"]],[200,200],[199,199]]],[1563155104576,["GJX@GJXAIOU",[[1,199,"J"]],[199,199],[200,200]]],[1563155104599,["GJX@GJXAIOU",[[1,199," "]],[200,200],[201,201]]],[1563155213579,["GJX@GJXAIOU",[[1,310,"\n"]],[310,310],[311,311]]],[1563155215659,["GJX@GJXAIOU",[[1,311,"\n"]],[311,311],[312,312]]],[1563155231851,["GJX@GJXAIOU",[[1,349,"**"],[1,372,"**"]],[349,372],[349,376]]],[1563155241781,["GJX@GJXAIOU",[[1,387,"**"],[1,432,"**"]],[387,432],[387,436]]],[1563155339637,["GJX@GJXAIOU",[[1,650,"**"],[1,689,"**"]],[650,689],[650,693]]],[1563155646579,["GJX@GJXAIOU",[[1,697,"**"],[1,774,"**"]],[697,774],[697,778]]],[1563155877078,["GJX@GJXAIOU",[[1,713,"（）"]],[713,713],[715,715]]],[1563155885343,["GJX@GJXAIOU",[[1,714,"包括静态和非静态"]],[714,714],[722,722]]],[1563155889326,["GJX@GJXAIOU",[[-1,697,"**"]],[697,699],[697,697]]],[1563155893939,["GJX@GJXAIOU",[[1,700,"**"],[1,721,"**"]],[700,721],[700,725]]],[1563155898163,["GJX@GJXAIOU",[[1,739,"**"],[1,750,"**"]],[739,750],[739,754]]],[1563155900891,["GJX@GJXAIOU",[[-1,792,"**"]],[794,794],[792,792]]],[1563156203411,["GJX@GJXAIOU",[[1,823,"\n\n"]],[823,823],[824,824]]],[1563156203523,["GJX@GJXAIOU",[[1,825,"\n"]],[824,824],[825,825]]],[1563156203653,["GJX@GJXAIOU",[[1,826,"\n"]],[825,825],[826,826]]],[1563156203771,["GJX@GJXAIOU",[[1,827,"\n"]],[826,826],[827,827]]],[1563156205528,["GJX@GJXAIOU",[[-1,827,"\n"],[1,828,"示例"]],[827,827],[829,829]]],[1563156207093,["GJX@GJXAIOU",[[1,829,"程序："]],[829,829],[832,832]]],[1563156207298,["GJX@GJXAIOU",[[1,832,"\n\n"]],[832,832],[833,833]]],[1563156208427,["GJX@GJXAIOU",[[-1,833,"\n"],[1,834,"`"]],[833,833],[834,834]]],[1563156208795,["GJX@GJXAIOU",[[1,834,"``"]],[834,834],[836,836]]],[1563156208819,["GJX@GJXAIOU",[[1,836,"language\n```\n"]],[836,836],[836,844]]],[1563156209460,["GJX@GJXAIOU",[[-1,836,"language"],[1,844,"j"]],[836,844],[837,837]]],[1563156209869,["GJX@GJXAIOU",[[1,837,"ava"]],[837,837],[840,840]]],[1563156209891,["GJX@GJXAIOU",[[1,841,"\n"]],[840,840],[841,841]]],[1563156211173,["GJX@GJXAIOU",[[1,841,"class Base\n{ //成员变量，子类也有同样的成员变量名\n    public String test=\"Base Field\"; //静态方法，子类也有同样签名的静态方法\n    public static void staticMethod()\n    {\n        System.out.println(\"Base staticMethod()\");\n    } //子类将对此方法进行覆盖\n    public void notStaticMethod()\n    {\n        System.out.println(\"Base notStaticMethod()\");\n    }\n\n} public class Derive extends Base\n{ public String test=\"Derive Field\"; public static void staticMethod()\n    {\n        System.out.println(\"Derive staticMethod()\");\n    }\n    @Override public void notStaticMethod()\n    {\n        System.out.println(\"Derive notStaticMethod()\");\n    } //输出成员变量的值，验证其为前期绑定。\n    public static void testFieldBind(Base base)\n    {\n        System.out.println(base.test);\n    } //静态方法，验证其为前期绑定。\n    public static void testStaticMethodBind(Base base)\n    { //The static method test() from the type Base should be accessed in a static way //使用Base.test()更加合理，这里为了更为直观的展示前期绑定才使用这种表示。\n base.staticMethod();\n    } //调用非静态方法，验证其为后期绑定。\n    public static void testNotStaticMethodBind(Base base)\n    {\n        base.notStaticMethod();\n    } public static void main(String[] args)\n    {\n        Derive d=new Derive();\n        testFieldBind(d);\n        testStaticMethodBind(d);\n        testNotStaticMethodBind(d);\n    }\n} /*程序输出:\nBase Field\nBase staticMethod()\nDerive notStaticMethod() */"]],[841,841],[2149,2149]]],[1563156218875,["GJX@GJXAIOU",[[1,854,"\n"]],[854,854],[855,855]]],[1563156222685,["GJX@GJXAIOU",[[-1,851,"\n"]],[852,852],[851,851]]],[1563156228115,["GJX@GJXAIOU",[[-1,970,"    "]],[974,974],[970,970]]],[1563156228459,["GJX@GJXAIOU",[[-1,969,"\n"]],[970,970],[969,969]]],[1563156231035,["GJX@GJXAIOU",[[-1,1076,"    "]],[1080,1080],[1076,1076]]],[1563156231427,["GJX@GJXAIOU",[[-1,1075,"\n"]],[1076,1076],[1075,1075]]],[1563156233003,["GJX@GJXAIOU",[[1,1046,"\n    "]],[1046,1046],[1051,1051]]],[1563156240211,["GJX@GJXAIOU",[[1,1145,"\n"]],[1145,1145],[1146,1146]]],[1563156242563,["GJX@GJXAIOU",[[1,1146,"  "]],[1146,1146],[1148,1148]]],[1563156244923,["GJX@GJXAIOU",[[-1,1180,"\n"]],[1181,1181],[1180,1180]]],[1563156248902,["GJX@GJXAIOU",[[1,1182,"\n  "]],[1182,1182],[1185,1185]]],[1563156253138,["GJX@GJXAIOU",[[-1,1254,"    "]],[1254,1258],[1254,1254]]],[1563156253575,["GJX@GJXAIOU",[[-1,1253,"\n"]],[1254,1254],[1253,1253]]],[1563156263637,["GJX@GJXAIOU",[[-1,1146,"  "]],[1146,1148],[1146,1146]]],[1563156264579,["GJX@GJXAIOU",[[1,1146,"\n"]],[1146,1146],[1147,1147]]],[1563156268605,["GJX@GJXAIOU",[[1,1219,"\n  "]],[1219,1219],[1222,1222]]],[1563156273051,["GJX@GJXAIOU",[[-1,1262,"   "]],[1262,1265],[1262,1262]]],[1563156276996,["GJX@GJXAIOU",[[-1,1309,"  "]],[1309,1311],[1309,1309]]],[1563156282906,["GJX@GJXAIOU",[[-1,1314," "]],[1315,1315],[1314,1314]]],[1563156284716,["GJX@GJXAIOU",[[1,1324,"\n   "]],[1324,1324],[1328,1328]]],[1563156286371,["GJX@GJXAIOU",[[1,1314,"\n   "]],[1314,1314],[1318,1318]]],[1563156288655,["GJX@GJXAIOU",[[-1,1362,"    "]],[1362,1366],[1362,1362]]],[1563156289036,["GJX@GJXAIOU",[[-1,1361,"\n"]],[1362,1362],[1361,1361]]],[1563156291596,["GJX@GJXAIOU",[[1,1450,"\n    "]],[1450,1450],[1455,1455]]],[1563156295138,["GJX@GJXAIOU",[[-1,1499,"    "]],[1499,1503],[1499,1499]]],[1563156295643,["GJX@GJXAIOU",[[-1,1498,"\n"]],[1499,1499],[1498,1498]]],[1563156298373,["GJX@GJXAIOU",[[1,1566,"\n    "]],[1561,1561],[1566,1566]]],[1563156301451,["GJX@GJXAIOU",[[-1,1622,"    "]],[1626,1626],[1622,1622]]],[1563156301851,["GJX@GJXAIOU",[[-1,1621,"\n"]],[1622,1622],[1621,1621]]],[1563156303421,["GJX@GJXAIOU",[[1,1623,"\n    "]],[1623,1623],[1628,1628]]],[1563156307030,["GJX@GJXAIOU",[[1,1709,"\n    "]],[1709,1709],[1714,1714]]],[1563156312843,["GJX@GJXAIOU",[[1,1810,"\n    "]],[1810,1810],[1815,1815]]],[1563156314998,["GJX@GJXAIOU",[[-1,1869,"    "]],[1869,1873],[1869,1869]]],[1563156315451,["GJX@GJXAIOU",[[-1,1868,"\n"]],[1869,1869],[1868,1868]]],[1563156321852,["GJX@GJXAIOU",[[1,1908,"\n    \n    "]],[1908,1908],[1918,1918]]],[1563156324131,["GJX@GJXAIOU",[[-1,1957,"    "]],[1957,1961],[1957,1957]]],[1563156324541,["GJX@GJXAIOU",[[-1,1956,"\n"]],[1957,1957],[1956,1956]]],[1563156327867,["GJX@GJXAIOU",[[1,2092,"\n"]],[2092,2092],[2093,2093]]],[1563156356915,["GJX@GJXAIOU",[[1,911,"\n    "]],[911,911],[916,916]]],[1563156362211,["GJX@GJXAIOU",[[1,854,"    "]],[854,854],[858,858]]],[1563156364670,["GJX@GJXAIOU",[[1,920,"\n    "]],[920,920],[925,925]]],[1563156372907,["GJX@GJXAIOU",[[1,1042,"\n    \n    "]],[1042,1042],[1052,1052]]],[1563156374411,["GJX@GJXAIOU",[[-1,1070,"\n"]],[1070,1070],[1070,1070]]],[1563156377828,["GJX@GJXAIOU",[[-1,1070,"    "]],[1074,1074],[1070,1070]]],[1563156402411,["GJX@GJXAIOU",[[1,1444,"\n    \n    "]],[1444,1444],[1454,1454]]],[1563156403890,["GJX@GJXAIOU",[[-1,1479,"\n"]],[1479,1479],[1479,1479]]],[1563156406955,["GJX@GJXAIOU",[[-1,1479,"    "]],[1479,1479],[1475,1475]]],[1563156421950,["GJX@GJXAIOU",[[-1,1648,"    //The static method test() from the type Base should be accessed in a static way "]],[1648,1733],[1648,1648]]],[1563156422507,["GJX@GJXAIOU",[[-1,1648,"\n"]],[1648,1648],[1647,1647]]],[1563156432204,["GJX@GJXAIOU",[[1,1697,"      "]],[1697,1697],[1703,1703]]],[1563156453724,["GJX@GJXAIOU",[[1,1569,"\n    \n    "]],[1569,1569],[1579,1579]]],[1563156455347,["GJX@GJXAIOU",[[-1,1600,"\n"]],[1600,1600],[1600,1600]]],[1563156458092,["GJX@GJXAIOU",[[-1,1600,"    "]],[1600,1600],[1596,1596]]],[1563156557180,["GJX@GJXAIOU",[[1,1735,"\n    \n    "]],[1735,1735],[1745,1745]]],[1563156558396,["GJX@GJXAIOU",[[-1,1769,"\n"]],[1769,1769],[1769,1769]]],[1563156560627,["GJX@GJXAIOU",[[-1,1769,"    "]],[1769,1769],[1765,1765]]]],null,"GJX@GJXAIOU"]]}