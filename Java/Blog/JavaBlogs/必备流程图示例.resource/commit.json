{"compress":true,"commitItems":[["fa88ed87-bb84-4482-bf54-80fc97409364",1564119295327,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945lYms13SicjOQtJ9iaEZAwopJuwpAWVaPqh22HArTvk6xLTSN3p4RlNvw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)来源：juejin.im/post/5d214639e51d4550bf1ae8df\n\n* * *\n\n整理了一些Java基础流程图/架构图，做一下笔记，大家一起学习。\n\n### 1\\. spring的生命周期\n\nSpring作为当前Java最流行、最强大的轻量级容器框架，了解熟悉spring的生命周期非常有必要；\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945zekOOs9ibXn9I3bZDO1F8mKD1SVBMzC6vuDxW11RdarZMbZWgeeBkkA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   首先容器启动后，对bean进行初始化\n\n*   按照bean的定义，注入属性\n\n*   检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给bean，如BeanNameAware等\n\n*   以上步骤，bean对象已正确构造，通过实现BeanPostProcessor接口，可以再进行一些自定义方法处理。如:postProcessBeforeInitialzation。\n\n*   BeanPostProcessor的前置处理完成后，可以实现postConstruct，afterPropertiesSet,init-method等方法， 增加我们自定义的逻辑，\n\n*   通过实现BeanPostProcessor接口，进行postProcessAfterInitialzation后置处理\n\n*   接着Bean准备好被使用啦。\n\n*   容器关闭后，如果Bean实现了DisposableBean接口，则会回调该接口的destroy()方法\n\n*   通过给destroy-method指定函数，就可以在bean销毁前执行指定的逻\n\n### 2\\. TCP三次握手，四次挥手\n\ntcp的三次握手四次挥手是每个程序员都应该熟悉的。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt9456NnmwCTq3cfoxd2ppicfRKRNZGY05hBNSKdJ6YYQkgAIEmVicLwJo3AA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n三次握手：\n\n*   第一次握手(SYN=1, seq=x)，发送完毕后，客户端进入 SYN_SEND 状态\n\n*   第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1)， 发送完毕后，服务器端进入 SYN_RCVD 状态。\n\n*   第三次握手(ACK=1，ACKnum=y+1)，发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手，即可以开始数据传输。\n\n#### 四次挥手：\n\n*   第一次挥手(FIN=1，seq=a)，发送完毕后，客户端进入 FIN_WAIT_1 状态\n\n*   第二次挥手(ACK=1，ACKnum=a+1)，发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态\n\n*   第三次挥手(FIN=1，seq=b)，发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。\n\n*   第四次挥手(ACK=1，ACKnum=b+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。\n\n### 3\\. 线程池执行流程图\n\n线程池：一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务，这避免了在处理短时间任务时创建与销毁线程的代价。线程池执行流程是每个开发必备的。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945CtTNvJu6bhLYfvuTls5uMucfY7ghibEwWMEtQlNIQoTY9I7bjiawHXyg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n#### 执行流程\n\n*   提交一个任务，线程池里存活的核心线程数小于线程数corePoolSize时，线程池会创建一个核心线程去处理提交的任务。\n\n*   如果线程池核心线程数已满，即线程数已经等于corePoolSize，一个新提交的任务，会被放进任务队列workQueue排队等待执行。\n\n*   当线程池里面存活的线程数已经等于corePoolSize了,并且任务队列workQueue也满，判断线程数是否达到maximumPoolSize，即最大线程数是否已满，如果没到达，创建一个非核心线程执行提交的任务。\n\n*   如果当前的线程数达到了maximumPoolSize，还有新的任务过来的话，直接采用拒绝策略处理。\n\n#### JDK提供了四种拒绝策略处理类\n\n*   AbortPolicy(抛出一个异常，默认的)\n\n*   DiscardPolicy(直接丢弃任务)\n\n*   DiscardOldestPolicy（丢弃队列里最老的任务，将当前这个任务继续提交给线程池）\n\n*   CallerRunsPolicy（交给线程池调用所在的线程进行处理\n\n### 4\\. JVM内存结构\n\nJVM内存结构是Java程序员必须掌握的基础。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945nQ2BgYKOdxJEnIGClzXXSGqpGju4KxzorzHqtuZlSOUEYvkVyLY3gg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n程序计数器（PC 寄存器）\n\n程序计数器是一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器。在虚拟机的模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。\n\n#### Java虚拟机栈\n\n*   与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同\n\n*   每个方法被执行的时候都会创建一个\"栈帧\",用于存储局部变量表(包括参数)、操作数栈、动态链接、方法出口等信息。每个方法被调用到执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n*   局部变量表存放各种基本数据类型boolean、byte、char、short等\n\n#### 本地方法栈\n\n与虚拟机栈基本类似，区别在于虚拟机栈为虚拟机执行的java方法服务，而本地方法栈则是为Native方法服务。\n\n#### Java堆\n\n*   GC堆是java虚拟机所管理的内存中最大的一块内存区域，也是被各个线程共享的内存区域，在JVM启动时创建。\n\n*   其大小通过-Xms(最小值)和-Xmx(最大值)参数设置，-Xms为JVM启动时申请的最小内存，-Xmx为JVM可申请的最大内存。\n\n*   由于现在收集器都是采用分代收集算法，堆被划分为新生代和老年代。新生代由S0和S1构成，可通过-Xmn参数来指定新生代的大小。\n\n*   所有对象实例以及数组都在堆上分配。\n\n*   Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分内容将在类加载后放到方法区的运行时常量池中。\n\n#### 方法区\n\n*   也称”永久代” ，它用于存储虚拟机加载的类信息、常量、静态变量、是各个线程共享的内存区域。可以通过-XX:PermSize 和 -XX:MaxPermSize 参数限制方法区的大小。\n\n*   运行时常量池：是方法区的一部分，其中的主要内容来自于JVM对Class的加载。\n\n*   Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分内容将在类加载后放到方法区的运行时常量池中。\n\n### 5\\. Java内存模型\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945wtM7D2xVrunglibaCoBrqkB89R4tePD8as2n2Hl6LOT4TGXnNqVfauQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   Java的多线程之间是通过共享内存进行通信的，在通信过程中会存在一系列如可见性、原子性、顺序性等问题，而JMM就是围绕着多线程通信以及与其相关的一系列特性而建立的模型。JMM定义了一些语法集，这些语法集映射到Java语言中就是volatile、synchronized等关键字。有兴趣可以看看我的另外一篇笔记：www.jianshu.com/p/3c1691aed…\n\n*   Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。\n\n### 6\\. springMVC执行流程图\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945aJVeTVklgJh9R7ZZlge0ddY6XgibRV4AvPaZkrZxMUtaIZHKaNnuhWg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   User向服务器发送request,前端控制Servelt DispatcherServlet捕获;\n\n*   DispatcherServlet对请求URL进行解析，调用HandlerMapping获得该Handler配置的所有相关的对象，最后以HandlerExecutionChain对象的形式返回.\n\n*   DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter.\n\n*   提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)\n\n*   Handler执行完成后，返回一个ModelAndView对象到DispatcherServlet\n\n*   根据返回的ModelAndView，选择一个适合的ViewResolver\n\n*   ViewResolver 结合Model和View，来渲染视图\n\n*   将渲染结果返回给客户端。\n\n### 7\\. JDBC执行流程\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945LfS5vSINVmw2FIqXpOmuic5ia6lZUwPLZPHylleibmzqEYfzVOCVEluyg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n#### JDBC执行流程：\n\n*   连接数据源\n\n*   为数据库传递查询和更新指令\n\n*   处理数据库响应并返回的结果\n\n### 8\\. spring cloud组件架构\n\nSpring Cloud是一个基于Spring Boot实现的云原生应用开发工具，它为基于JVM的云原生应用开发中涉及的配置管理、服务发现、熔断器、智能路由、微代理、控制总线、分布式会话和集群状态管理等操作提供了一种简单的开发方式。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt9459TTyhnLbkZvguicjgDduomtQOuzrH7qVOmhDGK6bzAd2fXRcHGuB4Fw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   Eureka 负责服务的注册与发现。\n\n*   Hystrix 负责监控服务之间的调用情况，起到熔断,降级作用。\n\n*   Spring Cloud Config 提供了统一的配置中心服务。\n\n*   所有对外的请求和服务，我们都通过Zuul来进行转发，起到 API 网关的作用\n\n*   最后我们使用 Sleuth+Zipkin 将所有的请求数据记录下来，方便我们进行后续分析。\n\n*   Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器。\n\n*   Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。\n\n### 9\\. dubbo 调用\n\nDubbo是一个分布式服务框架，致力于提供高性能和透明化的远程服务调用方案，这容易和负载均衡弄混，负载均衡是对外提供一个公共地址，请求过来时通过轮询、随机等，路由到不同server。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945VazTcFLxboDrxJ24RiaicXKsS27ozOdJAoP6GEYu3MdOjSFFZm3ZWohg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   Provider: 暴露服务的服务提供方。\n\n*   Consumer: 调用远程服务的服务消费方。\n\n*   Registry: 服务注册与发现的注册中心。\n\n*   Monitor: 统计服务的调用次调和调用时间的监控中心。\n\n*   Container: 服务运行容器。",[[1564119258568,["GJX@GJXAIOU",[[-1,0,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945lYms13SicjOQtJ9iaEZAwopJuwpAWVaPqh22HArTvk6xLTSN3p4RlNvw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)来源：juejin.im/post/5d214639e51d4550bf1ae8df\n\n* * *"]],[0,226],[0,0]]],[1564119263201,["GJX@GJXAIOU",[[-1,41,"\\"]],[42,42],[41,41]]],[1564119401104,["GJX@GJXAIOU",[[-1,109,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945zekOOs9ibXn9I3bZDO1F8mKD1SVBMzC6vuDxW11RdarZMbZWgeeBkkA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[109,285],[109,109]]],[1564119409252,["GJX@GJXAIOU",[[1,109,"![spring生命周期]($resource/spring%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg)"]],[109,109],[181,181]]],[1564119414088,["GJX@GJXAIOU",[[-1,718,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt9456NnmwCTq3cfoxd2ppicfRKRNZGY05hBNSKdJ6YYQkgAIEmVicLwJo3AA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n"]],[717,895],[717,717]]],[1564119421481,["GJX@GJXAIOU",[[1,717,"![tcp建立与释放]($resource/tcp%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%87%8A%E6%94%BE.jpg)"]],[717,717],[793,793]]],[1564119426007,["GJX@GJXAIOU",[[-1,1586,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945CtTNvJu6bhLYfvuTls5uMucfY7ghibEwWMEtQlNIQoTY9I7bjiawHXyg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[1586,1763],[1586,1586]]],[1564119434283,["GJX@GJXAIOU",[[1,1586,"![线程池执行流程]($resource/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg)"]],[1586,1586],[1676,1676]]],[1564119438960,["GJX@GJXAIOU",[[-1,2206,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945nQ2BgYKOdxJEnIGClzXXSGqpGju4KxzorzHqtuZlSOUEYvkVyLY3gg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[2206,2381],[2206,2206]]],[1564119446164,["GJX@GJXAIOU",[[1,2206,"![JVM内存结构]($resource/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.jpg)"]],[2206,2206],[2272,2272]]],[1564119451960,["GJX@GJXAIOU",[[-1,3260,"![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945wtM7D2xVrunglibaCoBrqkB89R4tePD8as2n2Hl6LOT4TGXnNqVfauQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[3260,3435],[3260,3260]]],[1564119458323,["GJX@GJXAIOU",[[1,3260,"![Java内存模型]($resource/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.jpg)"]],[3260,3260],[3328,3328]]],[1564119461890,["GJX@GJXAIOU",[[-1,3707,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945aJVeTVklgJh9R7ZZlge0ddY6XgibRV4AvPaZkrZxMUtaIZHKaNnuhWg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[3707,3883],[3707,3707]]],[1564119505783,["GJX@GJXAIOU",[[1,3707,"![springMVC执行流程图]($resource/springMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg)"]],[3707,3707],[3795,3795]]],[1564119547240,["GJX@GJXAIOU",[[-1,4242,"![](https://mmbiz.qpic.cn/mmbiz_jpg/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945LfS5vSINVmw2FIqXpOmuic5ia6lZUwPLZPHylleibmzqEYfzVOCVEluyg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[4242,4420],[4242,4242]]],[1564119554063,["GJX@GJXAIOU",[[1,4242,"![JDBC执行流程]($resource/JDBC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg)"]],[4242,4242],[4310,4310]]],[1564119586912,["GJX@GJXAIOU",[[-1,4520,"![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt9459TTyhnLbkZvguicjgDduomtQOuzrH7qVOmhDGK6bzAd2fXRcHGuB4Fw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[4520,4695],[4520,4520]]],[1564119593820,["GJX@GJXAIOU",[[1,4520,"![springCloud组件架构]($resource/springCloud%E7%BB%84%E4%BB%B6%E6%9E%B6%E6%9E%84.jpg)"]],[4520,4520],[4602,4602]]],[1564119599767,["GJX@GJXAIOU",[[-1,5050,"![](https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPLw9w7DEEGGwiaLJsQxt945VazTcFLxboDrxJ24RiaicXKsS27ozOdJAoP6GEYu3MdOjSFFZm3ZWohg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[5050,5226],[5050,5050]]],[1564119629638,["GJX@GJXAIOU",[[1,5050,"![dubbo调用]($resource/dubbo%E8%B0%83%E7%94%A8.jpg)"]],[5050,5050],[5100,5100]]],[1564119637282,["GJX@GJXAIOU",[[-1,4944,"\\"]],[4945,4945],[4944,4944]]],[1564119655163,["GJX@GJXAIOU",[[1,0,"# 必备流程图"]],[0,0],[7,7]]],[1564119656275,["GJX@GJXAIOU",[[1,7,"示例"]],[7,7],[9,9]]],[1564119656713,["GJX@GJXAIOU",[[1,11,"\n"]],[9,9],[10,10]]],[1564119721253,["GJX@GJXAIOU",[[1,10,"@toc"]],[10,10],[14,14]]],[1564119798416,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1564119800065,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1564119800219,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1564119800385,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1564119800420,["GJX@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1564119804305,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1564119804609,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1564119809914,["GJX@GJXAIOU",[[1,11,"- 未看"]],[11,11],[15,15]]],[1564119810416,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1564119812928,["GJX@GJXAIOU",[[1,16,"1. spring的生命周期\n1.2 2\\. TCP三次握手，四次挥手\n1.2.1 四次挥手：\n1.3 3\\. 线程池执行流程图\n1.3.1 执行流程\n1.3.2 JDK提供了四种拒绝策略处理类\n1.4 4\\. JVM内存结构\n1.4.1 Java虚拟机栈\n1.4.2 本地方法栈\n1.4.3 Java堆\n1.4.4 方法区\n1.5 5\\. Java内存模型\n1.6 6\\. springMVC执行流程图\n1.7 7\\. JDBC执行流程\n1.7.1 JDBC执行流程：\n1.8 8\\. spring cloud组件架构\n1.9 9. dubbo 调用"]],[16,16],[292,292]]],[1564119817186,["GJX@GJXAIOU",[[-1,31,"1.2 2\\. "]],[31,39],[31,31]]],[1564119818514,["GJX@GJXAIOU",[[-1,44,"1.2.1 四次挥手："]],[44,55],[44,44]]],[1564119821288,["GJX@GJXAIOU",[[-1,16,"1. "]],[16,18],[16,16]]],[1564119824488,["GJX@GJXAIOU",[[-1,42,"1.3 3\\. "]],[42,50],[42,42]]],[1564119830440,["GJX@GJXAIOU",[[-1,51,"1.3.1 执行流程\n1.3.2 JDK提供了四种拒绝策略处理类"]],[51,83],[51,51]]],[1564119832455,["GJX@GJXAIOU",[[-1,52,"1.4 4\\. "]],[52,60],[52,52]]],[1564119833192,["GJX@GJXAIOU",[[-1,51,"\n"]],[51,51],[50,50]]],[1564119833864,["GJX@GJXAIOU",[[-1,41,"\n"]],[41,41],[40,40]]],[1564119838047,["GJX@GJXAIOU",[[-1,58,"1.4.1 Java虚拟机栈\n1.4.2 本地方法栈\n1.4.3 Java堆\n1.4.4 方法区"]],[58,106],[58,58]]],[1564119842664,["GJX@GJXAIOU",[[-1,59,"1.5 5\\. "]],[67,67],[59,59]]],[1564119843024,["GJX@GJXAIOU",[[-1,58,"\n"]],[59,59],[58,58]]],[1564119845191,["GJX@GJXAIOU",[[-1,67,"1.6 6\\."]],[67,74],[67,67]]],[1564119846568,["GJX@GJXAIOU",[[-1,90," "]],[91,91],[90,90]]],[1564119847627,["GJX@GJXAIOU",[[-1,67," "]],[68,68],[67,67]]],[1564119849057,["GJX@GJXAIOU",[[-1,82,"1.7 7\\."]],[82,89],[82,82]]],[1564119852336,["GJX@GJXAIOU",[[-1,91,"1.7.1 JDBC执行流程："]],[91,106],[91,91]]],[1564119854079,["GJX@GJXAIOU",[[-1,92,"1.8 8\\. "]],[92,100],[92,92]]],[1564119857129,["GJX@GJXAIOU",[[-1,109,"1.9 9. "]],[109,115],[109,109]]],[1564119857791,["GJX@GJXAIOU",[[-1,91,"\n"]],[91,91],[90,90]]],[1564119862176,["GJX@GJXAIOU",[[1,16,"- "],[1,28,"- "],[1,41,"- "],[1,50,"- "],[1,58,"- "],[1,67,"- "],[1,82,"- "],[1,91,"- "],[1,108,"- "]],[16,116],[18,134]]],[1564119910320,["GJX@GJXAIOU",[[1,4,"\n"]],[4,4],[5,5]]],[1564119913500,["GJX@GJXAIOU",[[1,4,"flag"]],[4,4],[8,8]]],[1564119917354,["GJX@GJXAIOU",[[1,8,": red"]],[8,8],[13,13]]]],null,"GJX@GJXAIOU"]]}