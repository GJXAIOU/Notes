{"compress":true,"commitItems":[["36fe4e4b-9f78-45b6-a4d9-207b9a73e5d6",1568986745203,"# Java三大器之拦截器(Interceptor)的实现原理及代码示例\n\n2016年10月29日 08:29:05 [春秋战国程序猿](https://me.csdn.net/reggergdsg) 阅读数 84725\n\n前言：前面2篇博客，我们分析了Java中过滤器和监听器的实现原理，今天我们来看看拦截器。\n\n![](https://img-blog.csdn.net/20161029082959934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n1，拦截器的概念\n    java里的拦截器是动态拦截Action调用的对象，它提供了一种机制可以使开发者在一个Action执行的前后执行一段代码，也可以在一个Action\n执行前阻止其执行，同时也提供了一种可以提取Action中可重用部分代码的方式。在AOP中，拦截器用于在某个方法或者字段被访问之前，进行拦截\n然后再之前或者之后加入某些操作。目前，我们需要掌握的主要是Spring的拦截器，Struts2的拦截器不用深究，知道即可。\n\n2，拦截器的原理\n    大部分时候，拦截器方法都是通过代理的方式来调用的。Struts2的拦截器实现相对简单。当请求到达Struts2的ServletDispatcher时，Struts2\n会查找配置文件，并根据配置实例化相对的拦截器对象，然后串成一个列表（List），最后一个一个的调用列表中的拦截器。Struts2的拦截器是可\n插拔的，拦截器是AOP的一个实现。Struts2拦截器栈就是将拦截器按一定的顺序连接成一条链。在访问被拦截的方法或者字段时，Struts2拦截器链\n中的拦截器就会按照之前定义的顺序进行调用。\n\n3，自定义拦截器的步骤\n    第一步：自定义一个实现了Interceptor接口的类，或者继承抽象类AbstractInterceptor。\n    第二步：在配置文件中注册定义的拦截器。\n    第三步：在需要使用Action中引用上述定义的拦截器，为了方便也可以将拦截器定义为默认的拦截器，这样在不加特殊说明的情况下，所有的\nAction都被这个拦截器拦截。\n\n4，过滤器与拦截器的区别\n    过滤器可以简单的理解为“取你所想取”，过滤器关注的是web请求；拦截器可以简单的理解为“拒你所想拒”，拦截器关注的是方法调用，比如拦截\n敏感词汇。\n4.1，拦截器是基于java反射机制来实现的，而过滤器是基于函数回调来实现的。（有人说，拦截器是基于动态代理来实现的）\n4.2，拦截器不依赖servlet容器，过滤器依赖于servlet容器。\n4.3，拦截器只对Action起作用，过滤器可以对所有请求起作用。\n4.4，拦截器可以访问Action上下文和值栈中的对象，过滤器不能。\n4.5，在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时调用一次。\n\n5，Spring拦截器\n5.1，抽象类HandlerInterceptorAdapter\n    我们如果在项目中使用了Spring框架，那么，我们可以直接继承HandlerInterceptorAdapter.java这个抽象类，来实现我们自己的拦截器。\n\nSpring框架，对java的拦截器概念进行了包装，这一点和Struts2很类似。HandlerInterceptorAdapter继承了抽象接口HandlerInterceptor。\n\n```\npackage org.springframework.web.servlet.handler;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;public abstract class HandlerInterceptorAdapter implements HandlerInterceptor{    // 在业务处理器处理请求之前被调用    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception{        return true;    }    // 在业务处理器处理请求完成之后，生成视图之前执行    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)      throws Exception{    }    // 在DispatcherServlet完全处理完请求之后被调用，可用于清理资源    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)      throws Exception{    }}\n```\n\n    接下来我们看一下Spring框架实现的一个简单的拦截器UserRoleAuthorizationInterceptor，UserRoleAuthorizationInterceptor继承了\n抽象类HandlerInterceptorAdapter，实现了用户登录认证的拦截功能，如果当前用户没有通过认证，会报403错误。\n\n```\npackage org.springframework.web.servlet.handler;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class UserRoleAuthorizationInterceptor extends HandlerInterceptorAdapter{    // 字符串数组，用来存放用户角色信息    private String[] authorizedRoles;    public final void setAuthorizedRoles(String[] authorizedRoles){        this.authorizedRoles = authorizedRoles;    }    public final boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)      throws ServletException, IOException{        if (this.authorizedRoles != null) {            for (int i = 0; i < this.authorizedRoles.length; ++i) {                if (request.isUserInRole(this.authorizedRoles[i])) {                    return true;                }            }        }        handleNotAuthorized(request, response, handler);        return false;    }    protected void handleNotAuthorized(HttpServletRequest request, HttpServletResponse response, Object handler)      throws ServletException, IOException{          // 403表示资源不可用。服务器理解用户的请求，但是拒绝处理它，通常是由于权限的问题          response.sendError(403);    }}\n```\n\n    下面，我们利用Spring框架提供的HandlerInterceptorAdapter抽过类，来实现一个自定义的拦截器。我们这个拦截器叫做\nUserLoginInterceptorBySpring，进行登录拦截控制。工作流程是这样的：如果当前用户没有登录，则跳转到登录页面；登录成功后，跳转到\n之前访问的URL页面。\n\n```\nimport java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;/** * @description 利用spring框架提供的HandlerInterceptorAdapter，实现自定义拦截器 */public class UserLoginInterceptorBySpring extends HandlerInterceptorAdapter{    // 在业务处理器处理请求之前被调用    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception{        // equalsIgnoreCase 与 equals的区别？        if(\"GET\".equalsIgnoreCase(request.getMethod())){            //RequestUtil.saveRequest();        }        System.out.println(\"preHandle...\");        String requestUri = request.getRequestURI();        String contextPath = request.getContextPath();        String url = requestUri.substring(contextPath.length());        System.out.println(\"requestUri\" + requestUri);        System.out.println(\"contextPath\" + contextPath);        System.out.println(\"url\" + url);        String username = (String) request.getSession().getAttribute(\"username\");        if(null == username){            // 跳转到登录页面            request.getRequestDispatcher(\"/WEB-INF/login.jsp\").forward(request, response);            return false;        }        else{            return true;        }    }    // 在业务处理器处理请求完成之后，生成视图之前执行    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception{        System.out.println(\"postHandle...\");        if(modelAndView != null){            Map<String, String> map = new HashMap<String, String>();            modelAndView.addAllObjects(map);        }    }    // 在DispatcherServlet完全处理完请求之后被调用，可用于清理资源    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception{        System.out.println(\"afterCompletion...\");    }}\n```\n\n    拦截器是依赖Java反射机制来实现的。拦截器的实现，用到的是JDK实现的动态代理，我们都知道，JDK实现的动态代理，需要依赖接口。拦截器\n是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。拦截器不是在web.xml，比如struts在\nstruts.xml中配置。\n\n```\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {      Object result = null;      System.out.println(\"方法调用前，可以执行一段代码\" + method.getName());      result = method.invoke(this.targetObj, args);      System.out.println(\"方法调用后，可以执行一段代码 \" + method.getName());      return result;  }  \n```\n\n总结：\n    1.过滤器（Filter）：所谓过滤器顾名思义是用来过滤的，Java的过滤器能够为我们提供系统级别的过滤，也就是说，能过滤所有的web请求，\n这一点，是拦截器无法做到的。在Java Web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或\n者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts\n的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的，url传来之后，检查之后，\n可保持原来的流程继续向下执行，被下一个filter, servlet接收。\n    2.监听器（Listener）：Java的监听器，也是系统级别的监听。监听器随web应用的启动而启动。Java的监听器在c/s模式里面经常用到，它\n会对特定的事件产生产生一个处理。监听在很多模式下用到，比如说观察者模式，就是一个使用监听器来实现的，在比如统计网站的在线人数。\n又比如struts2可以用监听来启动。Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。\n    3.拦截器（Interceptor）：java里的拦截器提供的是非系统级别的拦截，也就是说，就覆盖面来说，拦截器不如过滤器强大，但是更有针对性。\nJava中的拦截器是基于Java反射机制实现的，更准确的划分，应该是基于JDK实现的动态代理。它依赖于具体的接口，在运行期间动态生成字节码。\n拦截器是动态拦截Action调用的对象，它提供了一种机制可以使开发者在一个Action执行的前后执行一段代码，也可以在一个Action执行前阻止其\n执行，同时也提供了一种可以提取Action中可重用部分代码的方式。在AOP中，拦截器用于在某个方法或者字段被访问之前，进行拦截然后再之前或\n者之后加入某些操作。java的拦截器主要是用在插件上，扩展件上比如 Hibernate Spring Struts2等，有点类似面向切片的技术，在用之前先要在\n配置文件即xml，文件里声明一段的那个东西。",[[1568986738961,["GJX@GJXAIOU",[[-1,6,"三大器之"]],[10,10],[6,6]]],[1568986741577,["GJX@GJXAIOU",[[1,34,"\n"]],[33,33],[34,34]]],[1568986753138,["GJX@GJXAIOU",[[1,34,"[原文链接](https://blog.csdn.net/reggergdsg/article/details/52962774)"]],[34,34],[99,99]]],[1568986758155,["GJX@GJXAIOU",[[-1,100,"2016年10月29日 08:29:05 [春秋战国程序猿](https://me.csdn.net/reggergdsg) 阅读数 84725\n\n前言：前面2篇博客，我们分析了Java中过滤器和监听器的实现原理，今天我们来看看拦截器。"]],[100,218],[100,100]]],[1568986760705,["GJX@GJXAIOU",[[-1,102,"![](https://img-blog.csdn.net/20161029082959934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)"]],[102,268],[102,102]]],[1568986761064,["GJX@GJXAIOU",[[-1,103,"\n"]],[102,102],[101,101]]],[1568986765538,["GJX@GJXAIOU",[[1,101,"## "]],[101,101],[104,104]]],[1568986767595,["GJX@GJXAIOU",[[-1,104,""],[1,104,"Java"],[-1,115,"   "],[1,118,"   "],[-1,335,"   "],[1,338,"   "],[-1,602,"   "],[1,605,"   "],[-1,662,"   "],[1,665,"   "],[-1,686,"   "],[1,689,"   "],[-1,787,"   "],[1,790,"   "],[-1,1124,"   "],[1,1127,"   "],[-1,2185,"   "],[1,2188,"   "],[-1,3555,"   "],[1,3558,"   "],[-1,5708,"   "],[1,5711,"   "],[-1,6198,"   "],[1,6201,"   "],[-1,6547,"   "],[1,6550,"   "],[-1,6761,"   "],[1,6764,"   "]],[104,104],[108,108]]],[1568986768262,["GJX@GJXAIOU",[[1,108,"中"]],[108,108],[109,109]]],[1568986768294,["GJX@GJXAIOU",[[1,108," "]],[109,109],[110,110]]],[1568986781089,["GJX@GJXAIOU",[[1,110,"的过滤器、监听器、拦截器比较"]],[110,110],[124,124]]],[1568986781570,["GJX@GJXAIOU",[[1,126,"\n"]],[124,124],[125,125]]],[1568986789359,["GJX@GJXAIOU",[[1,125,"![过滤器、监听器、拦截器比较]($resource/%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E6%AF%94%E8%BE%83.png)"]],[125,125],[275,275]]],[1568986906075,["GJX@GJXAIOU",[[-1,276,"1，"]],[276,278],[276,276]]],[1568986906623,["GJX@GJXAIOU",[[1,276,"## "]],[276,276],[285,285]]],[1568986910794,["GJX@GJXAIOU",[[-1,363,"\n"]],[364,364],[363,363]]],[1568986934122,["GJX@GJXAIOU",[[-1,290,"j"],[1,291,"J"]],[290,294],[290,294]]],[1568986935032,["GJX@GJXAIOU",[[-1,1045,"j"],[1,1046,"J"]],[1045,1049],[1045,1049]]],[1568986935544,["GJX@GJXAIOU",[[-1,1355,"j"],[1,1356,"J"]],[1355,1359],[1355,1359]]],[1568986937309,["GJX@GJXAIOU",[[-1,1389,"j"],[1,1390,"J"]],[1389,1393],[1389,1393]]],[1568986956452,["GJX@GJXAIOU",[[-1,6954,"j"],[1,6955,"J"]],[6954,6958],[6954,6958]]],[1568986956980,["GJX@GJXAIOU",[[-1,7233,"j"],[1,7234,"J"]],[7233,7237],[7233,7237]]],[1568986981049,["GJX@GJXAIOU",[[-1,9,"(Interceptor)"]],[9,22],[9,9]]],[1568986981917,["GJX@GJXAIOU",[[1,9,"()"]],[9,9],[11,11]]],[1568986983161,["GJX@GJXAIOU",[[-1,9,"()"]],[11,11],[9,9]]],[1568986983634,["GJX@GJXAIOU",[[1,9,"()"]],[9,9],[11,11]]],[1568986984866,["GJX@GJXAIOU",[[-1,9,"()"]],[11,11],[9,9]]],[1568986985551,["GJX@GJXAIOU",[[1,9,"（）"]],[9,9],[11,11]]],[1568986996542,["GJX@GJXAIOU",[[1,10,"In特rceptor"]],[10,10],[20,20]]],[1568986999441,["GJX@GJXAIOU",[[-1,12,"特"]],[13,13],[12,12]]],[1568987000282,["GJX@GJXAIOU",[[1,12,"te"]],[12,12],[14,14]]],[1568987000421,["GJX@GJXAIOU",[[1,15,"r"]],[14,14],[15,15]]],[1568987001258,["GJX@GJXAIOU",[[-1,15,"r"]],[15,15],[14,14]]],[1568987004668,["GJX@GJXAIOU",[[1,294," "]],[294,294],[295,295]]],[1568987007781,["GJX@GJXAIOU",[[1,305," "]],[305,305],[306,306]]],[1568987009891,["GJX@GJXAIOU",[[1,312," "]],[312,312],[313,313]]],[1568987012469,["GJX@GJXAIOU",[[1,336," "]],[336,336],[337,337]]],[1568987015717,["GJX@GJXAIOU",[[1,343," "]],[343,343],[344,344]]],[1568987019373,["GJX@GJXAIOU",[[1,362," "]],[362,362],[363,363]]],[1568987021357,["GJX@GJXAIOU",[[1,369," "]],[369,369],[370,370]]],[1568987026077,["GJX@GJXAIOU",[[1,397," "]],[397,397],[398,398]]],[1568987028877,["GJX@GJXAIOU",[[1,411," "]],[411,411],[412,412]]],[1568987032342,["GJX@GJXAIOU",[[1,415," "]],[415,415],[416,416]]],[1568987033697,["GJX@GJXAIOU",[[-1,442,"\n"]],[442,442],[442,442]]],[1568987038835,["GJX@GJXAIOU",[[1,471," "]],[471,471],[472,472]]],[1568987040374,["GJX@GJXAIOU",[[1,478," "]],[478,478],[479,479]]],[1568987057009,["GJX@GJXAIOU",[[1,290,"**"],[1,457,"**"]],[290,457],[290,461]]],[1568987062633,["GJX@GJXAIOU",[[-1,286,"    "]],[286,290],[286,286]]],[1568987067889,["GJX@GJXAIOU",[[1,104,"yi"]],[104,104],[106,106]]],[1568987068592,["GJX@GJXAIOU",[[-1,104,"yi"]],[106,106],[104,104]]],[1568987069643,["GJX@GJXAIOU",[[1,104,"一 "]],[104,104],[105,105]]],[1568987069963,["GJX@GJXAIOU",[[1,105,"、"]],[105,105],[106,106]]],[1568987071473,["GJX@GJXAIOU",[[-1,106," "]],[107,107],[106,106]]],[1568987076060,["GJX@GJXAIOU",[[1,281,"二、"]],[281,281],[283,283]]],[1568987081576,["GJX@GJXAIOU",[[-1,511,"2，"]],[511,513],[511,511]]],[1568987086770,["GJX@GJXAIOU",[[1,511,"## 二、"]],[511,511],[516,516]]],[1568987091618,["GJX@GJXAIOU",[[-1,524,"   "]],[527,527],[524,524]]],[1568987097298,["GJX@GJXAIOU",[[1,556," "]],[556,556],[557,557]]],[1568987101933,["GJX@GJXAIOU",[[1,573," "]],[573,573],[574,574]]],[1568987103619,["GJX@GJXAIOU",[[1,581," "]],[581,581],[582,582]]],[1568987104570,["GJX@GJXAIOU",[[1,583," "]],[583,583],[584,584]]],[1568987107555,["GJX@GJXAIOU",[[1,601," "]],[601,601],[602,602]]],[1568987110733,["GJX@GJXAIOU",[[1,611," "]],[611,611],[612,612]]],[1568987110952,["GJX@GJXAIOU",[[-1,612,"\n"]],[612,612],[612,612]]],[1568987119516,["GJX@GJXAIOU",[[1,676," "]],[676,676],[677,677]]],[1568987122522,["GJX@GJXAIOU",[[1,692," "]],[692,692],[693,693]]],[1568987123898,["GJX@GJXAIOU",[[1,696," "]],[696,696],[697,697]]],[1568987126442,["GJX@GJXAIOU",[[1,710," "]],[710,710],[711,711]]],[1568987131684,["GJX@GJXAIOU",[[1,756," "]],[756,756],[757,757]]],[1568987135371,["GJX@GJXAIOU",[[-1,761,"\n"]],[762,762],[761,761]]],[1568987140456,["GJX@GJXAIOU",[[-1,784,"3，"]],[784,786],[784,784]]],[1568987145328,["GJX@GJXAIOU",[[1,784,"### 三、"]],[784,784],[790,790]]],[1568987147343,["GJX@GJXAIOU",[[-1,786,"#"]],[786,786],[785,785]]],[1568987223640,["GJX@GJXAIOU",[[-1,801,"  "],[-1,861,"  "],[-1,883,"  "]],[802,969],[800,963]]],[1568987224785,["GJX@GJXAIOU",[[-1,799,"  "],[-1,857,"  "],[-1,879,"  "]],[800,963],[799,957]]],[1568987228795,["GJX@GJXAIOU",[[1,799,"* "],[1,855,"* "],[1,875,"* "],[1,941,"* "]],[799,957],[801,965]]],[1568987235649,["GJX@GJXAIOU",[[-1,947,"* "]],[947,949],[947,947]]],[1568987236049,["GJX@GJXAIOU",[[-1,946,"\n"]],[947,947],[946,946]]],[1568987236969,["GJX@GJXAIOU",[[1,946," "]],[946,946],[947,947]]],[1568987238507,["GJX@GJXAIOU",[[1,953," "]],[953,953],[954,954]]],[1568987241842,["GJX@GJXAIOU",[[1,824," "]],[824,824],[825,825]]],[1568987243818,["GJX@GJXAIOU",[[1,813," "]],[813,813],[814,814]]],[1568987247028,["GJX@GJXAIOU",[[1,892," "]],[892,892],[893,893]]],[1568987248420,["GJX@GJXAIOU",[[1,899," "]],[899,899],[900,900]]],[1568987250539,["GJX@GJXAIOU",[[1,838," "]],[838,838],[839,839]]],[1568987253458,["GJX@GJXAIOU",[[-1,971,"4，"]],[971,973],[971,971]]],[1568987255937,["GJX@GJXAIOU",[[1,971,"四、"]],[971,971],[973,973]]],[1568987257273,["GJX@GJXAIOU",[[1,971,"## "]],[973,973],[986,986]]],[1568987264608,["GJX@GJXAIOU",[[-1,987,"    "]],[991,991],[987,987]]],[1568987278402,["GJX@GJXAIOU",[[-1,1054,"\n"]],[1055,1055],[1054,1054]]],[1568987284369,["GJX@GJXAIOU",[[1,987,"****"]],[987,987],[989,989]]],[1568987287392,["GJX@GJXAIOU",[[-1,989,"**"]],[991,991],[989,989]]],[1568987291748,["GJX@GJXAIOU",[[1,1061,"**"]],[1061,1061],[1063,1063]]],[1568987308617,["GJX@GJXAIOU",[[-1,1064,"4.1，"]],[1064,1068],[1064,1064]]],[1568987309013,["GJX@GJXAIOU",[[1,1064,"- "]],[1064,1064],[1066,1066]]],[1568987312913,["GJX@GJXAIOU",[[-1,1122,"4.2，"]],[1126,1126],[1122,1122]]],[1568987313555,["GJX@GJXAIOU",[[1,1122,"- "]],[1122,1122],[1124,1124]]],[1568987320913,["GJX@GJXAIOU",[[-1,1157,"4.3，"]],[1161,1161],[1157,1157]]],[1568987322162,["GJX@GJXAIOU",[[1,1157,"- "]],[1157,1157],[1159,1159]]],[1568987325665,["GJX@GJXAIOU",[[-1,1189,"4.4，"]],[1193,1193],[1189,1189]]],[1568987326781,["GJX@GJXAIOU",[[1,1189,"- "]],[1189,1189],[1191,1191]]],[1568987329544,["GJX@GJXAIOU",[[-1,1222,"4.5，"]],[1226,1226],[1222,1222]]],[1568987330210,["GJX@GJXAIOU",[[1,1222,"- "]],[1222,1222],[1224,1224]]],[1568987337673,["GJX@GJXAIOU",[[-1,1268,"5，"]],[1268,1270],[1268,1268]]],[1568987339723,["GJX@GJXAIOU",[[1,1268,"五 "]],[1268,1268],[1269,1269]]],[1568987340077,["GJX@GJXAIOU",[[1,1269,"、"]],[1269,1269],[1270,1270]]],[1568987341633,["GJX@GJXAIOU",[[-1,1270," "]],[1271,1271],[1270,1270]]],[1568987342258,["GJX@GJXAIOU",[[1,1268,"## "]],[1270,1270],[1282,1282]]],[1568987345258,["GJX@GJXAIOU",[[-1,1283,"5.1，"],[1,1287,"\n"]],[1283,1287],[1284,1284]]],[1568987345699,["GJX@GJXAIOU",[[-1,1283,"\n"]],[1284,1284],[1283,1283]]],[1568987347124,["GJX@GJXAIOU",[[1,1283,"- "]],[1283,1283],[1285,1285]]],[1568987349403,["GJX@GJXAIOU",[[1,1283,"\n"]],[1283,1283],[1284,1284]]],[1568987353393,["GJX@GJXAIOU",[[-1,1315,"    "]],[1315,1319],[1315,1315]]],[1568987357625,["GJX@GJXAIOU",[[1,1346,"·"]],[1346,1346],[1347,1347]]],[1568987358768,["GJX@GJXAIOU",[[-1,1346,"·"]],[1347,1347],[1346,1346]]],[1568987359145,["GJX@GJXAIOU",[[1,1346,"`"]],[1346,1346],[1347,1347]]],[1568987362797,["GJX@GJXAIOU",[[1,1377,"` "]],[1377,1377],[1379,1379]]],[1568987366291,["GJX@GJXAIOU",[[1,1429," "]],[1429,1429],[1430,1430]]],[1568987367298,["GJX@GJXAIOU",[[1,1437," "]],[1437,1437],[1438,1438]]],[1568987368235,["GJX@GJXAIOU",[[1,1413," "]],[1413,1413],[1414,1414]]],[1568987368889,["GJX@GJXAIOU",[[1,1409," "]],[1409,1409],[1410,1410]]],[1568987370281,["GJX@GJXAIOU",[[1,1405," "]],[1405,1405],[1406,1406]]],[1568987371034,["GJX@GJXAIOU",[[-1,1469,"r"],[1,1470," "]],[1469,1470],[1470,1470]]],[1568987372681,["GJX@GJXAIOU",[[1,1477," "]],[1477,1477],[1478,1478]]],[1568987399843,["GJX@GJXAIOU",[[1,1551,"\n"],[1,1596,"\n"],[1,1642,"\n"],[1,1700,"\n"],[1,1752,"\n"],[1,1830,"\n"],[1,1852,"\n"],[1,1972,"\n"],[1,1992,"\n"],[1,1997,"\n"],[1,2027,"\n"],[1,2154,"\n"],[1,2177,"\n"],[1,2182,"\n"],[1,2227,"\n"],[1,2346,"\n"],[1,2369,"\n"],[1,2374,"\n"]],[1503,2375],[2393,2393]]],[1568987415889,["GJX@GJXAIOU",[[-1,2402," "]],[2403,2403],[2402,2402]]],[1568987424504,["GJX@GJXAIOU",[[-1,2497,"\n"]],[2498,2498],[2497,2497]]],[1568987436173,["GJX@GJXAIOU",[[1,2616,"\n"],[1,2643,"\n"],[1,2681,"\n"],[1,2726,"\n"],[1,2772,"\n"],[1,2852,"\n"],[1,2875,"\n"],[1,2912,"\n"],[1,2979,"\n"],[1,3026,"\n"],[1,3031,"\n"],[1,3139,"\n"],[1,3182,"\n"],[1,3225,"\n"],[1,3292,"\n"],[1,3360,"\n"],[1,3392,"\n"],[1,3409,"\n"],[1,3422,"\n"],[1,3431,"\n"],[1,3487,"\n"],[1,3508,"\n"],[1,3513,"\n"],[1,3625,"\n"],[1,3668,"\n"],[1,3721,"\n"],[1,3755,"\n"],[1,3760,"\n"]],[2568,3761],[3789,3789]]],[1568987439155,["GJX@GJXAIOU",[[-1,3798," "]],[3799,3799],[3798,3798]]],[1568987441561,["GJX@GJXAIOU",[[-1,3867,"\n"]],[3868,3868],[3867,3867]]],[1568987451572,["GJX@GJXAIOU",[[1,3986,"\n"],[1,4007,"\n"],[1,4052,"\n"],[1,4098,"\n"],[1,4150,"\n"],[1,4223,"\n"],[1,4226,"\n"],[1,4289,"\n"],[1,4292,"\n"],[1,4368,"\n"],[1,4390,"\n"],[1,4510,"\n"],[1,4550,"\n"],[1,4606,"\n"],[1,4646,"\n"],[1,4655,"\n"],[1,4698,"\n"],[1,4750,"\n"],[1,4804,"\n"],[1,4868,"\n"],[1,4922,"\n"],[1,4978,"\n"],[1,5018,"\n"],[1,5099,"\n"],[1,5128,"\n"],[1,5150,"\n"],[1,5240,"\n"],[1,5265,"\n"],[1,5274,"\n"],[1,5287,"\n"],[1,5311,"\n"],[1,5320,"\n"],[1,5325,"\n"],[1,5355,"\n"],[1,5500,"\n"],[1,5544,"\n"],[1,5577,"\n"],[1,5645,"\n"],[1,5689,"\n"],[1,5698,"\n"],[1,5703,"\n"],[1,5748,"\n"],[1,5885,"\n"],[1,5934,"\n"],[1,5939,"\n"]],[3961,5940],[5985,5985]]],[1568987457193,["GJX@GJXAIOU",[[-1,5993,"  "]],[5995,5995],[5993,5993]]],[1568987462494,["GJX@GJXAIOU",[[1,6243,"\n"],[1,6270,"\n"],[1,6332,"\n"],[1,6383,"\n"],[1,6446,"\n"],[1,6466,"\n"]],[6158,6469],[6475,6475]]],[1568987468770,["GJX@GJXAIOU",[[1,6481,"**"],[1,6484,"**"]],[6481,6484],[6481,6488]]],[1568987472113,["GJX@GJXAIOU",[[-1,6489,"    1."]],[6489,6495],[6489,6489]]],[1568987472377,["GJX@GJXAIOU",[[1,6489,"\n"]],[6489,6489],[6490,6490]]],[1568987472954,["GJX@GJXAIOU",[[1,6490,"- "]],[6490,6490],[6492,6492]]],[1568987478952,["GJX@GJXAIOU",[[-1,6485,"：**"]],[6488,6488],[6485,6485]]],[1568987480639,["GJX@GJXAIOU",[[-1,6481,"**"]],[6483,6483],[6481,6481]]],[1568987485435,["GJX@GJXAIOU",[[1,6481,"###### l "]],[6481,6481],[6489,6489]]],[1568987485642,["GJX@GJXAIOU",[[1,6489,"iu"]],[6489,6489],[6491,6491]]],[1568987486225,["GJX@GJXAIOU",[[-1,6488,"liu"]],[6491,6491],[6488,6488]]],[1568987486841,["GJX@GJXAIOU",[[1,6488,"Liu"]],[6488,6488],[6491,6491]]],[1568987487904,["GJX@GJXAIOU",[[-1,6488,"Liu"]],[6491,6491],[6488,6488]]],[1568987488388,["GJX@GJXAIOU",[[1,6488,"Liu"]],[6488,6488],[6491,6491]]],[1568987489048,["GJX@GJXAIOU",[[-1,6488,"Liu"]],[6491,6491],[6488,6488]]],[1568987490346,["GJX@GJXAIOU",[[1,6488,"六、"]],[6488,6488],[6490,6490]]],[1568987491521,["GJX@GJXAIOU",[[-1,6490," "]],[6491,6491],[6490,6490]]],[1568987493155,["GJX@GJXAIOU",[[-1,6483,"####"]],[6489,6489],[6488,6488]]],[1568987496769,["GJX@GJXAIOU",[[-1,6560,"\n"]],[6560,6560],[6560,6560]]],[1568987498306,["GJX@GJXAIOU",[[-1,6639,"\n"]],[6639,6639],[6639,6639]]],[1568987499513,["GJX@GJXAIOU",[[-1,6721,"\n"]],[6721,6721],[6721,6721]]],[1568987500769,["GJX@GJXAIOU",[[-1,6793,"\n"]],[6793,6793],[6793,6793]]],[1568987503392,["GJX@GJXAIOU",[[-1,6831,"    2."]],[6831,6837],[6831,6831]]],[1568987503738,["GJX@GJXAIOU",[[1,6831,"\n"]],[6831,6831],[6832,6832]]],[1568987504796,["GJX@GJXAIOU",[[1,6832,"- "]],[6832,6832],[6834,6834]]],[1568987508000,["GJX@GJXAIOU",[[-1,6905,"\n"]],[6905,6905],[6905,6905]]],[1568987512810,["GJX@GJXAIOU",[[-1,7041,"    3."]],[7041,7047],[7041,7041]]],[1568987513081,["GJX@GJXAIOU",[[1,7041,"\n"]],[7041,7041],[7042,7042]]],[1568987514179,["GJX@GJXAIOU",[[1,7042,"- "]],[7042,7042],[7044,7044]]],[1568987522993,["GJX@GJXAIOU",[[-1,7259,"\n"]],[7259,7259],[7259,7259]]],[1568987524633,["GJX@GJXAIOU",[[-1,7408,"\n"]],[7408,7408],[7408,7408]]],[1568987527041,["GJX@GJXAIOU",[[-1,7387,"等"]],[7387,7387],[7387,7387]]],[1568987530521,["GJX@GJXAIOU",[[1,7387,"等"]],[7387,7387],[7387,7387]]],[1568987541594,["GJX@GJXAIOU",[[-1,6968,"\n"]],[6968,6968],[6968,6968]]]],null,"GJX@GJXAIOU"]]}