{"compress":true,"commitItems":[["f8fffaab-c7f6-4981-8def-60a5a289e7de",1564800623885,"# \nJava 枚举(enum) 详解7种常见的用法\n\n2016年08月11日 11:14:45 [李学凯](https://me.csdn.net/qq_27093465) 阅读数 611342\n\n 版权声明：觉得此文有用的，不嫌麻烦的，就留个言呐，或者点个赞呐(额，就是文章底部的“顶”啦)，要是嫌弃麻烦呢，也麻烦点个赞嘛，要是实在不想点赞呢，也不是不可以。 但是，你要是想踩一脚呢，那还是赶紧，马上，快快的闪人。 小心我手里三十米长的大刀。 哼哼。想想都怕 ！！！[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)\n\nJDK1.5引入了新的类型——枚举。在 Java 中它虽然算个“小”功能，却给我的开发带来了“大”方便。\n\n大师兄我[【大师兄】](https://blog.csdn.net/qq_27093465?viewmode=contents)又加上自己的理解，来帮助各位理解一下。\n\n## 用法一：常量\n\n在JDK1.5 之前，我们定义常量都是： public static final.... 。现在好了，有了枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。 \n\nJava代码 \n\n```\npublic enum Color {    RED, GREEN, BLANK, YELLOW  } \n```\n\n## 用法二：switch\n\nJDK1.6之前的switch语句只支持int,char,enum类型，使用枚举，能让我们的代码可读性更强。 \n\nJava代码 \n\n```\nenum Signal {      GREEN, YELLOW, RED  }  public class TrafficLight {      Signal color = Signal.RED;      public void change() {          switch (color) {          case RED:              color = Signal.GREEN;              break;          case YELLOW:              color = Signal.RED;              break;          case GREEN:              color = Signal.YELLOW;              break;          }      }  }  \n```\n\n## 用法三：向枚举中添加新方法\n\n如果打算自定义自己的方法，那么必须在enum实例序列的最后添加一个分号。\n\n[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)\n\n而且 Java 要求必须先定义 enum 实例。 \n\nJava代码 \n\n```\npublic enum Color {      RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);      // 成员变量      private String name;      private int index;      // 构造方法      private Color(String name, int index) {          this.name = name;          this.index = index;      }      // 普通方法      public static String getName(int index) {          for (Color c : Color.values()) {              if (c.getIndex() == index) {                  return c.name;              }          }          return null;      }      // get set 方法      public String getName() {          return name;      }      public void setName(String name) {          this.name = name;      }      public int getIndex() {          return index;      }      public void setIndex(int index) {          this.index = index;      }  }  \n```\n\n## 用法四：覆盖枚举的方法\n\n下面给出一个toString()方法覆盖的例子。 \n\nJava代码 \n\n```\npublic enum Color {      RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);      // 成员变量      private String name;      private int index;      // 构造方法      private Color(String name, int index) {          this.name = name;          this.index = index;      }      //覆盖方法      @Override      public String toString() {          return this.index+\"_\"+this.name;      }  }  \n```\n\n## 用法五：实现接口\n\n所有的枚举都继承自java.lang.Enum类。由于Java 不支持多继承，所以枚举对象不能再继承其他类。 \n\nJava代码 \n\n```\npublic interface Behaviour {      void print();      String getInfo();  }  public enum Color implements Behaviour{      RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);      // 成员变量      private String name;      private int index;      // 构造方法      private Color(String name, int index) {          this.name = name;          this.index = index;      }  //接口方法      @Override      public String getInfo() {          return this.name;      }      //接口方法      @Override      public void print() {          System.out.println(this.index+\":\"+this.name);      }  }  \n```\n\n## 用法六：使用接口组织枚举\n\n **Java代码 **\n\n```\npublic interface Food {      enum Coffee implements Food{          BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO      }      enum Dessert implements Food{          FRUIT, CAKE, GELATO      }  }  \n```\n\n```\n    /**     * 测试继承接口的枚举的使用（by 大师兄 or 大湿胸。）     */    private static void testImplementsInterface() {        for (Food.DessertEnum dessertEnum : Food.DessertEnum.values()) {            System.out.print(dessertEnum + \"  \");        }        System.out.println();        //我这地方这么写，是因为我在自己测试的时候，把这个coffee单独到一个文件去实现那个food接口，而不是在那个接口的内部。        for (CoffeeEnum coffee : CoffeeEnum.values()) {            System.out.print(coffee + \"  \");        }        System.out.println();        //搞个实现接口，来组织枚举，简单讲，就是分类吧。如果大量使用枚举的话，这么干，在写代码的时候，就很方便调用啦。        //还有就是个“多态”的功能吧，        Food food = Food.DessertEnum.CAKE;        System.out.println(food);        food = CoffeeEnum.BLACK_COFFEE;        System.out.println(food);    }\n```\n\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxNDE3MTczNzI0NQ)运行结果\n\n## 用法七：关于枚举集合的使用\n\njava.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的 key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。\n\n关于枚举的实现细节和原理请参考：\n\n参考资料：《ThinkingInJava》第四版\n\n[http://softbeta.iteye.com/blog/1185573](http://softbeta.iteye.com/blog/1185573)\n\n**我的这篇文章，因为是转载的，可能基本就没有变动，导致被某人踩了一脚。觉得不符合我大师兄的性格。下面我把自己的使用理解给整理一下。**\n\n**也是因为因为当时刚刚开始学习吧。把平时自以为了解的东西都只是大概了解了一下，说到底，还是自以为了解了，其实转眼就不知道什么是什么了。\n出来学习，不习惯看代码怎么能行呢？\n下面是我自己的测试代码。**\n\n```\npackage com.lxk.enumTest; /** * Java枚举用法测试 * <p> * Created by lxk on 2016/12/15 */public class EnumTest {    public static void main(String[] args) {        forEnum();        useEnumInJava();    }     /**     * 循环枚举,输出ordinal属性；若枚举有内部属性，则也输出。(说的就是我定义的TYPE类型的枚举的typeName属性)     */    private static void forEnum() {        for (SimpleEnum simpleEnum : SimpleEnum.values()) {            System.out.println(simpleEnum + \"  ordinal  \" + simpleEnum.ordinal());        }        System.out.println(\"------------------\");        for (TYPE type : TYPE.values()) {            System.out.println(\"type = \" + type + \"    type.name = \" + type.name() + \"   typeName = \" + type.getTypeName() + \"   ordinal = \" + type.ordinal());        }    }     /**     * 在Java代码使用枚举     */    private static void useEnumInJava() {        String typeName = \"f5\";        TYPE type = TYPE.fromTypeName(typeName);        if (TYPE.BALANCE.equals(type)) {            System.out.println(\"根据字符串获得的枚举类型实例跟枚举常量一致\");        } else {            System.out.println(\"大师兄代码错误\");        }     }     /**     * 季节枚举(不带参数的枚举常量)这个是最简单的枚举使用实例     * Ordinal 属性，对应的就是排列顺序，从0开始。     */    private enum SimpleEnum {        SPRING,        SUMMER,        AUTUMN,        WINTER    }      /**     * 常用类型(带参数的枚举常量，这个只是在书上不常见，实际使用还是很多的，看懂这个，使用就不是问题啦。)     */    private enum TYPE {        FIREWALL(\"firewall\"),        SECRET(\"secretMac\"),        BALANCE(\"f5\");         private String typeName;         TYPE(String typeName) {            this.typeName = typeName;        }         /**         * 根据类型的名称，返回类型的枚举实例。         *         * @param typeName 类型名称         */        public static TYPE fromTypeName(String typeName) {            for (TYPE type : TYPE.values()) {                if (type.getTypeName().equals(typeName)) {                    return type;                }            }            return null;        }         public String getTypeName() {            return this.typeName;        }    }}\n```\n\n**然后是测试的结果图：**\n\n![](https://img-blog.csdn.net/20161222184629554)\n\n简单的例子，大家基本都用过，看不懂的基本都是第二个例子。可以看到，在第二个例子里面，后面带有参数，其实可以这么理解。\n\nenum这个关键字，可以理解为跟class差不多，这也个单独的类。可以看到，上面的例子里面有属性，有构造方法，有getter，也可以有setter，但是一般都是构造传参数。还有其他自定义方法。那么在这些东西前面的，以逗号隔开的，最后以分号结尾的，这部分叫做，这个枚举的实例。也可以理解为，class  new 出来的实例对象。这下就好理解了。只是，class，new对象，可以自己随便new，想几个就几个，而这个enum关键字，他就不行，他的实例对象，只能在这个enum里面体现。也就是说，他对应的实例是有限的。这也就是枚举的好处了，限制了某些东西的范围，举个栗子：一年四季，只能有春夏秋冬，你要是字符串表示的话，那就海了去了，但是，要用枚举类型的话，你在enum的大括号里面把所有的选项，全列出来，那么这个季节的属性，对应的值，只能在里面挑。不能有其他的。\n\n我上面的例子，就是根据typeName，你可以从那些例子里面挑选到唯一的一个TYPE类型的枚举实例--TYPE.BALANCE。注意方法\n\nTYPE type = TYPE.fromTypeName(typeName);\n这个方法的返回类型就是这个TYPE枚举类型的。\n这下就好理解，这个枚举是怎么在工作了吧\n\n再补充一下：\n\n上面那个带参数的枚举类型的实例里面实际上是三个属性，除了我自定义的typeName以外，还有2个是系统自带的。看下面源码的图：\n\n![](https://img-blog.csdn.net/20161222185233843)\n\n看到这里之后，不知道你能不能理解下面图片内说明的话：下面图片主要说明在使用枚举时，的规范和标准。希望可以在实际开发时候用到\n\n![](https://img-blog.csdn.net/20170112172420090)\n\n![](https://img-blog.csdn.net/20170112172408793)\n\n**最后补充一点：**\n\n也许你知道呢，但是也许你不知道呢？我是真的不知道，测了之后才知道！！！\n\n**枚举类型对象之间的值比较，是可以使用==，直接来比较值，是否相等的，不是必须使用equals方法的哟。**\n\n具体，请参考下面的链接：\n\n[java 枚举类比较是用==还是equals？](http://blog.csdn.net/qq_27093465/article/details/70237349)\n\n**2017.11.07 更新**\n\n有的老铁，说这个switch case怎么写，我就在下面再啰嗦一下。\n\n```\n    private static void testSwitchCase() {        String typeName = \"f5\";        //这几行注释呢，你可以试着三选一，测试一下效果。        //String typeName = \"firewall\";        //String typeName = \"secretMac\";        TypeEnum typeEnum = TypeEnum.fromTypeName(typeName);        if (typeEnum == null) {            return;        }        switch (typeEnum) {            case FIREWALL:                System.out.println(\"枚举名称(即默认自带的属性 name 的值)是：\" + typeEnum.name());                System.out.println(\"排序值(默认自带的属性 ordinal 的值)是：\" + typeEnum.ordinal());                System.out.println(\"枚举的自定义属性 typeName 的值是：\" + typeEnum.getTypeName());                break;            case SECRET:                System.out.println(\"枚举名称(即默认自带的属性 name 的值)是：\" + typeEnum.name());                System.out.println(\"排序值(默认自带的属性 ordinal 的值)是：\" + typeEnum.ordinal());                System.out.println(\"枚举的自定义属性 typeName 的值是：\" + typeEnum.getTypeName());                break;            case BALANCE:                System.out.println(\"枚举名称(即默认自带的属性 name 的值)是：\" + typeEnum.name());                System.out.println(\"排序值(默认自带的属性 ordinal 的值)是：\" + typeEnum.ordinal());                System.out.println(\"枚举的自定义属性 typeName 的值是：\" + typeEnum.getTypeName());                break;            default:                System.out.println(\"default\");        }    }\n```\n\n然后，就是运行结果的截图。\n\n![](https://img-blog.csdn.net/20171107142120698)\n\n老铁们，看完这个枚举，你要懂个概念，那就是，这个枚举，他是个对象，就像你定义的Student类，Person类，等等一些个类一样。\n\n要有这么个概念。只要是个类，他就可以有构造函数，可以有属性，可以有方法。\n\n对的，老铁，你对这个属性，构造函数啥的，有概念吧，没有的话，我可就郁闷啦。\n\n然后，你就看到，这个地方有2个默认的属性，一个是name，一个是ordinal，这2个属性就像你定义Student类和Person类的name和age一样，\n\n只不过，这2个是系统自带的属性，不用你自己去定义啦。\n\n你也可以给这个枚举类，也就是你自己声明的枚举，随便加属性。\n\n我上面代码例子里面的那个TypeEnum那个枚举，就是这么干的，就简单的添加了个自定义属性typeName，\n\n虽然他有自己的name了，那姑且叫我这个自定义的属性叫别名吧。\n\n可以看到，我例子里面就是通过自己写的那个构造方法给我这个自定义的属性初始化值的。\n\n还有，这个构造方法是不可以，也不被运行public的，不信，你可以试试。\n\n还有，你不能对系统自带的name属性，在构造函数里面赋值，没有为什么。\n\n[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)\n\n**（2019-07-29更新）**\n\n再补充一点，这个也比较重要\n\n就是这个枚举类型，一旦创建，且被使用（比如，存数据库啥的）之后，持久化后的对象信息里面就保存了这个枚举信息。这个时候你的需求或者要求啥的，需要变更这个枚举名称。**应当禁止这个变更的操作，只能重新创建，用新的代替旧的，不能直接把旧的给改了**，因为，就数据在逆转成对象的时候，如果，旧的枚举不在了，那么就会400还是500的报错或者是空指针的bug。这也是需要关注的一个问题。希望注意下，不然等到出bug了再想到这个问题，就不好了。\n\n我写完文章，给自己点个赞，不过分吧，\n不过分，那我可就点啦啊。\n我先点为敬，你们随意。大家随意。不要客气。。。",[[1564800580799,["GJX@GJXAIOU",[[-1,2,"\n"]],[3,3],[2,2]]],[1564800585742,["GJX@GJXAIOU",[[-1,27,"2016年08月11日 11:14:45 [李学凯](https://me.csdn.net/qq_27093465) 阅读数 611342"]],[27,97],[27,27]]],[1564800633726,["GJX@GJXAIOU",[[1,27,"[原文地址链接](https://blog.csdn.net/qq_27093465/article/details/52180865)"]],[27,27],[95,95]]],[1564800890103,["GJX@GJXAIOU",[[-1,97," 版权声明：觉得此文有用的，不嫌麻烦的，就留个言呐，或者点个赞呐(额，就是文章底部的“顶”啦)，要是嫌弃麻烦呢，也麻烦点个赞嘛，要是实在不想点赞呢，也不是不可以。 但是，你要是想踩一脚呢，那还是赶紧，马上，快快的闪人。 小心我手里三十米长的大刀。 哼哼。想想都怕 ！！！[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)"]],[98,352],[97,97]]],[1564800891469,["GJX@GJXAIOU",[[-1,98,"\n"]],[98,98],[97,97]]],[1564800891916,["GJX@GJXAIOU",[[-1,97,"\n"]],[97,97],[96,96]]],[1564800893572,["GJX@GJXAIOU",[[-1,26,"\n"]],[26,26],[25,25]]],[1564800896374,["GJX@GJXAIOU",[[-1,150,"大师兄我[【大师兄】](https://blog.csdn.net/qq_27093465?viewmode=contents)又加上自己的理解，来帮助各位理解一下。"]],[150,233],[150,150]]],[1564800896909,["GJX@GJXAIOU",[[-1,151,"\n"]],[150,150],[149,149]]],[1564800901411,["GJX@GJXAIOU",[[1,96,"\n"]],[95,95],[96,96]]],[1564800904160,["GJX@GJXAIOU",[[1,96,"@"],[-1,116," "],[1,117," "],[-1,121," "],[1,122," "],[-1,170," "],[1,171," "],[-1,183," "],[1,184," "],[-1,207," "],[1,208," "],[-1,254," "],[1,255," "],[-1,263," "],[1,264," "],[-1,276," "],[1,277," "],[-1,281," "],[1,282," "],[-1,287," {    "],[1,293," {    "],[-1,297," "],[1,298," "],[-1,304," "],[1,305," "],[-1,311," "],[1,312," "],[-1,318,"  } "],[1,322,"  } "],[-1,397," "],[1,398," "],[-1,406," "],[1,407," "],[-1,417," "],[1,418," "],[-1,424," {      "],[1,432," {      "],[-1,438," "],[1,439," "],[-1,446," RED  }  "],[1,455," RED  }  "],[-1,461," "],[1,462," "],[-1,467," "],[1,468," "],[-1,480," {      "],[1,488," {      "],[-1,494," "],[1,495," "],[-1,500," = "],[1,503," = "],[-1,514,"      "],[1,520,"      "],[-1,526," "],[1,527," "],[-1,531," "],[1,532," "],[-1,540," {          "],[1,552," {          "],[-1,558," "],[1,559," "],[-1,566," {          "],[1,578," {          "],[-1,582," "],[1,583," "],[-1,587,"              "],[1,601,"              "],[-1,606," = "],[1,609," = "],[-1,622,"              "],[1,636,"              "],[-1,642,"          "],[1,652,"          "],[-1,656," "],[1,657," "],[-1,664,"              "],[1,678,"              "],[-1,683," = "],[1,686," = "],[-1,697,"              "],[1,711,"              "],[-1,717,"          "],[1,727,"          "],[-1,731," "],[1,732," "],[-1,738,"              "],[1,752,"              "],[-1,757," = "],[1,760," = "],[-1,774,"              "],[1,788,"              "],[-1,794,"          }      }  }  "],[1,817,"          }      }  }  "],[-1,1003," "],[1,1004," "],[-1,1008," "],[1,1009," "],[-1,1016," "],[1,1017," "],[-1,1021," 实例。 "],[1,1026," 实例。 "],[-1,1034," "],[1,1035," "],[-1,1047," "],[1,1048," "],[-1,1052," "],[1,1053," "],[-1,1058," {      "],[1,1066," {      "],[-1,1075," 1), "],[1,1080," 1), "],[-1,1091," 2), "],[1,1096," 2), "],[-1,1107," 3), "],[1,1112," 3), "],[-1,1123," 4);      // "],[1,1136," 4);      // "],[-1,1140,"      "],[1,1146,"      "],[-1,1153," "],[1,1154," "],[-1,1160," "],[1,1161," "],[-1,1166,"      "],[1,1172,"      "],[-1,1179," int "],[1,1184," int "],[-1,1190,"      // "],[1,1199,"      // "],[-1,1203,"      "],[1,1209,"      "],[-1,1216," "],[1,1217," "],[-1,1229," "],[1,1230," "],[-1,1235," int "],[1,1240," int "],[-1,1246," {          "],[1,1258," {          "],[-1,1267," = "],[1,1270," = "],[-1,1275,"          "],[1,1285,"          "],[-1,1295," = "],[1,1298," = "],[-1,1304,"      }      // "],[1,1320,"      }      // "],[-1,1324,"      "],[1,1330,"      "],[-1,1336," "],[1,1337," "],[-1,1343," "],[1,1344," "],[-1,1350," "],[1,1351," "],[-1,1362," "],[1,1363," "],[-1,1369," {          for "],[1,1385," {          for "],[-1,1391," c : "],[1,1396," c : "],[-1,1411," {              if "],[1,1430," {              if "],[-1,1443," == "],[1,1447," == "],[-1,1453," {                  "],[1,1473," {                  "],[-1,1479," "],[1,1480," "],[-1,1487,"              }          }          "],[1,1523,"              }          }          "],[-1,1529," "],[1,1530," "],[-1,1535,"      }      // get set 方法      "],[1,1567,"      }      // get set 方法      "],[-1,1573," "],[1,1574," "],[-1,1580," "],[1,1581," "],[-1,1590," {          "],[1,1602," {          "],[-1,1608," "],[1,1609," "],[-1,1614,"      }      "],[1,1627,"      }      "],[-1,1633," "],[1,1634," "],[-1,1638," "],[1,1639," "],[-1,1653," "],[1,1654," "],[-1,1659," {          "],[1,1671," {          "],[-1,1680," = "],[1,1683," = "],[-1,1688,"      }      "],[1,1701,"      }      "],[-1,1707," int "],[1,1712," int "],[-1,1722," {          "],[1,1734," {          "],[-1,1740," "],[1,1741," "],[-1,1747,"      }      "],[1,1760,"      }      "],[-1,1766," "],[1,1767," "],[-1,1771," "],[1,1772," "],[-1,1784," "],[1,1785," "],[-1,1791," {          "],[1,1803," {          "],[-1,1813," = "],[1,1816," = "],[-1,1822,"      }  }  "],[1,1834,"      }  }  "],[-1,1880," "],[1,1881," "],[-1,1889," "],[1,1890," "],[-1,1902," "],[1,1903," "],[-1,1907," "],[1,1908," "],[-1,1913," {      "],[1,1921," {      "],[-1,1930," 1), "],[1,1935," 1), "],[-1,1946," 2), "],[1,1951," 2), "],[-1,1962," 3), "],[1,1967," 3), "],[-1,1978," 4);      // "],[1,1991," 4);      // "],[-1,1995,"      "],[1,2001,"      "],[-1,2008," "],[1,2009," "],[-1,2015," "],[1,2016," "],[-1,2021,"      "],[1,2027,"      "],[-1,2034," int "],[1,2039," int "],[-1,2045,"      // "],[1,2054,"      // "],[-1,2058,"      "],[1,2064,"      "],[-1,2071," "],[1,2072," "],[-1,2084," "],[1,2085," "],[-1,2090," int "],[1,2095," int "],[-1,2101," {          "],[1,2113," {          "],[-1,2122," = "],[1,2125," = "],[-1,2130,"          "],[1,2140,"          "],[-1,2150," = "],[1,2153," = "],[-1,2159,"      }      "],[1,2172,"      }      "],[-1,2178,"      "],[1,2184,"      "],[-1,2193,"      "],[1,2199,"      "],[-1,2205," "],[1,2206," "],[-1,2212," "],[1,2213," "],[-1,2223," {          "],[1,2235," {          "],[-1,2241," "],[1,2242," "],[-1,2267,"      }  }  "],[1,2279,"      }  }  "],[-1,2329," "],[1,2330," "],[-1,2352," "],[1,2353," "],[-1,2361," "],[1,2362," "],[-1,2374," "],[1,2375," "],[-1,2384," "],[1,2385," "],[-1,2394," {      "],[1,2402," {      "],[-1,2406," "],[1,2407," "],[-1,2415,"      "],[1,2421,"      "],[-1,2427," "],[1,2428," "],[-1,2438,"  }  "],[1,2443,"  }  "],[-1,2449," "],[1,2450," "],[-1,2454," "],[1,2455," "],[-1,2460," "],[1,2461," "],[-1,2471," "],[1,2472," "],[-1,2482,"      "],[1,2488,"      "],[-1,2497," 1), "],[1,2502," 1), "],[-1,2513," 2), "],[1,2518," 2), "],[-1,2529," 3), "],[1,2534," 3), "],[-1,2545," 4);      // "],[1,2558," 4);      // "],[-1,2562,"      "],[1,2568,"      "],[-1,2575," "],[1,2576," "],[-1,2582," "],[1,2583," "],[-1,2588,"      "],[1,2594,"      "],[-1,2601," int "],[1,2606," int "],[-1,2612,"      // "],[1,2621,"      // "],[-1,2625,"      "],[1,2631,"      "],[-1,2638," "],[1,2639," "],[-1,2651," "],[1,2652," "],[-1,2657," int "],[1,2662," int "],[-1,2668," {          "],[1,2680," {          "],[-1,2689," = "],[1,2692," = "],[-1,2697,"          "],[1,2707,"          "],[-1,2717," = "],[1,2720," = "],[-1,2726,"      }  "],[1,2735,"      }  "],[-1,2741,"      "],[1,2747,"      "],[-1,2756,"      "],[1,2762,"      "],[-1,2768," "],[1,2769," "],[-1,2775," "],[1,2776," "],[-1,2785," {          "],[1,2797," {          "],[-1,2803," "],[1,2804," "],[-1,2814,"      }      "],[1,2827,"      }      "],[-1,2833,"      "],[1,2839,"      "],[-1,2848,"      "],[1,2854,"      "],[-1,2860," "],[1,2861," "],[-1,2865," "],[1,2866," "],[-1,2873," {          "],[1,2885," {          "],[-1,2930,"      }  }  "],[1,2942,"      }  }  "],[-1,2965," "],[1,2966," "],[-1,2974," "],[1,2975," "],[-1,2989," "],[1,2990," "],[-1,2999," "],[1,3000," "],[-1,3004," {      "],[1,3012," {      "],[-1,3016," "],[1,3017," "],[-1,3023," "],[1,3024," "],[-1,3034," "],[1,3035," "],[-1,3040,"          "],[1,3050,"          "],[-1,3092,"      }      "],[1,3105,"      }      "],[-1,3109," "],[1,3110," "],[-1,3117," "],[1,3118," "],[-1,3128," "],[1,3129," "],[-1,3134,"          "],[1,3144,"          "],[-1,3150," "],[1,3151," "],[-1,3156," "],[1,3157," "],[-1,3163,"      }  }  "],[1,3175,"      }  }  "],[-1,6675," "],[1,6676," "]],[96,96],[97,97]]],[1564800905609,["GJX@GJXAIOU",[[1,97,"toc"]],[97,97],[100,100]]],[1564800906277,["GJX@GJXAIOU",[[1,101,"\n"]],[100,100],[101,101]]],[1564800916055,["GJX@GJXAIOU",[[-1,167,"\n"]],[167,167],[166,166]]],[1564800921783,["GJX@GJXAIOU",[[-1,213,"现在好了，有了枚举，"],[1,223,"t"]],[213,223],[214,214]]],[1564800921904,["GJX@GJXAIOU",[[1,214,"o "]],[214,214],[215,215]]],[1564800922423,["GJX@GJXAIOU",[[1,215,"ngguo"]],[215,215],[220,220]]],[1564800923565,["GJX@GJXAIOU",[[-1,214,"ongguo"]],[220,220],[214,214]]],[1564800923869,["GJX@GJXAIOU",[[-1,213,"t"]],[214,214],[213,213]]],[1564800928090,["GJX@GJXAIOU",[[1,213,"通过枚举"]],[213,213],[217,217]]],[1564800930013,["GJX@GJXAIOU",[[-1,217," "]],[218,218],[217,217]]],[1564800937485,["GJX@GJXAIOU",[[1,287,"\n"]],[287,287],[288,288]]],[1564800941028,["GJX@GJXAIOU",[[1,319,"\n    "]],[319,319],[324,324]]],[1564800943140,["GJX@GJXAIOU",[[-1,320,"    "]],[324,324],[320,320]]],[1564800946945,["GJX@GJXAIOU",[[1,267,"java"]],[267,267],[271,271]]],[1564800948860,["GJX@GJXAIOU",[[-1,263,"\n"]],[263,263],[262,262]]],[1564800950108,["GJX@GJXAIOU",[[-1,255,"Java代码 "]],[262,262],[255,255]]],[1564800950220,["GJX@GJXAIOU",[[-1,255,"\n"]],[255,255],[254,254]]],[1564800950764,["GJX@GJXAIOU",[[-1,254,"\n"]],[254,254],[253,253]]],[1564800973022,["GJX@GJXAIOU",[[-1,336,"\n"]],[336,336],[335,335]]],[1564800978030,["GJX@GJXAIOU",[[1,405,"java"]],[405,405],[409,409]]],[1564800978367,["GJX@GJXAIOU",[[1,410,"\n"]],[409,409],[410,410]]],[1564800979404,["GJX@GJXAIOU",[[-1,410,"\n"]],[410,410],[409,409]]],[1564800993741,["GJX@GJXAIOU",[[-1,414," "],[1,415," "],[-1,421," {      "],[1,429," {  \n    "],[-1,435," "],[1,436," "],[-1,443," RED  }  "],[1,452," RED  \n}  \n"],[-1,458," "],[1,459," "],[-1,464," "],[1,465," "],[-1,477," {      "],[1,485," {  \n    "],[-1,491," "],[1,492," "],[-1,497," = "],[1,500," = "],[-1,511,"      "],[1,517,"  \n    "],[-1,523," "],[1,524," "],[-1,528," "],[1,529," "],[-1,537," {          "],[1,549," {  \n        "],[-1,555," "],[1,556," "],[-1,563," {          "],[1,575," {  \n        "],[-1,579," "],[1,580," "],[-1,584,"              "],[1,598,"  \n            "],[-1,603," = "],[1,606," = "],[-1,619,"              "],[1,633,"  \n            "],[-1,639,"          "],[1,649,"  \n        "],[-1,653," "],[1,654," "],[-1,661,"              "],[1,675,"  \n            "],[-1,680," = "],[1,683," = "],[-1,694,"              "],[1,708,"  \n            "],[-1,714,"          "],[1,724,"  \n        "],[-1,728," "],[1,729," "],[-1,735,"              "],[1,749,"  \n            "],[-1,754," = "],[1,757," = "],[-1,771,"              "],[1,785,"  \n            "],[-1,791,"          }      }  }  "],[1,814,"  \n        }  \n    }  \n}  "]],[410,814],[832,832]]],[1564800997664,["GJX@GJXAIOU",[[-1,401,"\n"]],[401,401],[400,400]]],[1564800998604,["GJX@GJXAIOU",[[-1,393,"Java代码 "]],[400,400],[393,393]]],[1564800998845,["GJX@GJXAIOU",[[-1,393,"\n"]],[393,393],[392,392]]],[1564800999286,["GJX@GJXAIOU",[[-1,392,"\n"]],[392,392],[391,391]]],[1564801024973,["GJX@GJXAIOU",[[-1,353,"只支持int,char,enum类型，"]],[353,372],[353,353]]],[1564801030158,["GJX@GJXAIOU",[[-1,336,"JDK1.6之前的"]],[336,345],[336,336]]],[1564808969769,["GJX@GJXAIOU",[[-1,376," "],[1,377," "],[-1,383," {  \n    "],[1,392,"Enum {  \n    "],[-1,398," "],[1,399," "],[-1,406," RED  \n}  "],[1,416," RED  \n}  "],[-1,423," "],[1,424," "],[-1,429," "],[1,430," "],[-1,442," {  \n    "],[1,451," {  \n    "],[-1,457," "],[1,458," "],[-1,463," = "],[1,466," = "],[-1,477,"  \n    "],[1,484,"  \n    "],[-1,490," "],[1,491," "],[-1,495," "],[1,496," "],[-1,504," {  \n        "],[1,517," {  \n        "],[-1,523," "],[1,524," "],[-1,531," {  \n        "],[1,544," {  \n        "],[-1,548," "],[1,549," "],[-1,553,"  \n            "],[1,568,"  \n            "],[-1,573," = "],[1,576," = "],[-1,589,"  \n            "],[1,604,"  \n            "],[-1,610,"  \n        "],[1,621,"  \n        "],[-1,625," "],[1,626," "],[-1,633,"  \n            "],[1,648,"  \n            "],[-1,653," = "],[1,656," = "],[-1,667,"  \n            "],[1,682,"  \n            "],[-1,688,"  \n        "],[1,699,"  \n        "],[-1,703," "],[1,704," "],[-1,710,"  \n            "],[1,725,"  \n            "],[-1,730," = "],[1,733," = "],[-1,747,"  \n            "],[1,762,"  \n            "],[-1,768,"  \n        }  \n    }  \n}  "],[1,794,"  \n        }  \n    }  \n}  "]],[383,383],[387,387]]],[1564808976443,["GJX@GJXAIOU",[[1,461,"R"]],[461,461],[462,462]]],[1564808976874,["GJX@GJXAIOU",[[-1,461,"R"]],[462,462],[461,461]]],[1564808977847,["GJX@GJXAIOU",[[1,461,"Enu"]],[461,461],[464,464]]],[1564808979114,["GJX@GJXAIOU",[[-1,463,"u"]],[464,464],[463,463]]],[1564808980714,["GJX@GJXAIOU",[[1,463,"um"]],[463,463],[465,465]]],[1564809004714,["GJX@GJXAIOU",[[1,480,"Enum"]],[480,480],[484,484]]],[1564809010418,["GJX@GJXAIOU",[[1,594,"Enum"]],[594,594],[598,598]]],[1564809014692,["GJX@GJXAIOU",[[1,678,"Enum"]],[678,678],[682,682]]],[1564809018530,["GJX@GJXAIOU",[[1,759,"Enum"]],[759,759],[763,763]]],[1564809094041,["GJX@GJXAIOU",[[-1,880,"[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)"]],[880,1000],[880,880]]],[1564809094465,["GJX@GJXAIOU",[[-1,881,"\n"]],[880,880],[879,879]]],[1564809097040,["GJX@GJXAIOU",[[-1,880,"\n"]],[880,880],[879,879]]],[1564809097259,["GJX@GJXAIOU",[[-1,879,"\n"]],[879,879],[878,878]]],[1564809109543,["GJX@GJXAIOU",[[-1,925," "],[1,926," "],[-1,930," "],[1,931," "],[-1,936," {      "],[1,944," {  \n    "],[-1,953," 1), "],[1,958," 1), "],[-1,969," 2), "],[1,974," 2), "],[-1,985," 3), "],[1,990," 3), "],[-1,1001," 4);      // "],[1,1014," 4);  \n    // "],[-1,1018,"      "],[1,1024,"  \n    "],[-1,1031," "],[1,1032," "],[-1,1038," "],[1,1039," "],[-1,1044,"      "],[1,1050,"  \n    "],[-1,1057," int "],[1,1062," int "],[-1,1068,"      // "],[1,1077,"  \n    // "],[-1,1081,"      "],[1,1087,"  \n    "],[-1,1094," "],[1,1095," "],[-1,1107," "],[1,1108," "],[-1,1113," int "],[1,1118," int "],[-1,1124," {          "],[1,1136," {  \n        "],[-1,1145," = "],[1,1148," = "],[-1,1153,"          "],[1,1163,"  \n        "],[-1,1173," = "],[1,1176," = "],[-1,1182,"      }      // "],[1,1198,"  \n    }  \n    // "],[-1,1202,"      "],[1,1208,"  \n    "],[-1,1214," "],[1,1215," "],[-1,1221," "],[1,1222," "],[-1,1228," "],[1,1229," "],[-1,1240," "],[1,1241," "],[-1,1247," {          for "],[1,1263," {  \n        for "],[-1,1269," c : "],[1,1274," c : "],[-1,1289," {              if "],[1,1308," {  \n            if "],[-1,1321," == "],[1,1325," == "],[-1,1331," {                  "],[1,1351," {  \n                "],[-1,1357," "],[1,1358," "],[-1,1365,"              }          }          "],[1,1401,"  \n            }  \n        }  \n        "],[-1,1407," "],[1,1408," "],[-1,1413,"      }      // get set 方法      "],[1,1445,"  \n    }  \n    // get set 方法  \n    "],[-1,1451," "],[1,1452," "],[-1,1458," "],[1,1459," "],[-1,1468," {          "],[1,1480," {  \n        "],[-1,1486," "],[1,1487," "],[-1,1492,"      }      "],[1,1505,"  \n    }  \n    "],[-1,1511," "],[1,1512," "],[-1,1516," "],[1,1517," "],[-1,1531," "],[1,1532," "],[-1,1537," {          "],[1,1549," {  \n        "],[-1,1558," = "],[1,1561," = "],[-1,1566,"      }      "],[1,1579,"  \n    }  \n    "],[-1,1585," int "],[1,1590," int "],[-1,1600," {          "],[1,1612," {  \n        "],[-1,1618," "],[1,1619," "],[-1,1625,"      }      "],[1,1638,"  \n    }  \n    "],[-1,1644," "],[1,1645," "],[-1,1649," "],[1,1650," "],[-1,1662," "],[1,1663," "],[-1,1669," {          "],[1,1681," {  \n        "],[-1,1691," = "],[1,1694," = "],[-1,1700,"      }  }  "],[1,1712,"  \n    }  \n}  "]],[919,1712],[1744,1744]]],[1564809112450,["GJX@GJXAIOU",[[-1,906,"Java代码 "]],[906,913],[906,906]]],[1564809113180,["GJX@GJXAIOU",[[-1,907,"\n"]],[907,907],[906,906]]],[1564809113362,["GJX@GJXAIOU",[[-1,906,"\n"]],[906,906],[905,905]]],[1564809113953,["GJX@GJXAIOU",[[-1,905,"\n"]],[905,905],[904,904]]],[1564809115537,["GJX@GJXAIOU",[[1,908,"j"],[-1,915," "],[1,916," "],[-1,920," "],[1,921," "],[-1,926," {  \n    "],[1,935," {  \n    "],[-1,944," 1), "],[1,949," 1), "],[-1,960," 2), "],[1,965," 2), "],[-1,976," 3), "],[1,981," 3), "],[-1,992," 4);  \n    // "],[1,1006," 4);  \n    // "],[-1,1010,"  \n    "],[1,1017,"  \n    "],[-1,1024," "],[1,1025," "],[-1,1031," "],[1,1032," "],[-1,1037,"  \n    "],[1,1044,"  \n    "],[-1,1051," int "],[1,1056," int "],[-1,1062,"  \n    // "],[1,1072,"  \n    // "],[-1,1076,"  \n    "],[1,1083,"  \n    "],[-1,1090," "],[1,1091," "],[-1,1103," "],[1,1104," "],[-1,1109," int "],[1,1114," int "],[-1,1120," {  \n        "],[1,1133," {  \n        "],[-1,1142," = "],[1,1145," = "],[-1,1150,"  \n        "],[1,1161,"  \n        "],[-1,1171," = "],[1,1174," = "],[-1,1180,"  \n    }  \n    // "],[1,1198,"  \n    }  \n    // "],[-1,1202,"  \n    "],[1,1209,"  \n    "],[-1,1215," "],[1,1216," "],[-1,1222," "],[1,1223," "],[-1,1229," "],[1,1230," "],[-1,1241," "],[1,1242," "],[-1,1248," {  \n        for "],[1,1265," {  \n        for "],[-1,1271," c : "],[1,1276," c : "],[-1,1291," {  \n            if "],[1,1311," {  \n            if "],[-1,1324," == "],[1,1328," == "],[-1,1334," {  \n                "],[1,1355," {  \n                "],[-1,1361," "],[1,1362," "],[-1,1369,"  \n            }  \n        }  \n        "],[1,1408,"  \n            }  \n        }  \n        "],[-1,1414," "],[1,1415," "],[-1,1420,"  \n    }  \n    // get set 方法  \n    "],[1,1455,"  \n    }  \n    // get set 方法  \n    "],[-1,1461," "],[1,1462," "],[-1,1468," "],[1,1469," "],[-1,1478," {  \n        "],[1,1491," {  \n        "],[-1,1497," "],[1,1498," "],[-1,1503,"  \n    }  \n    "],[1,1518,"  \n    }  \n    "],[-1,1524," "],[1,1525," "],[-1,1529," "],[1,1530," "],[-1,1544," "],[1,1545," "],[-1,1550," {  \n        "],[1,1563," {  \n        "],[-1,1572," = "],[1,1575," = "],[-1,1580,"  \n    }  \n    "],[1,1595,"  \n    }  \n    "],[-1,1601," int "],[1,1606," int "],[-1,1616," {  \n        "],[1,1629," {  \n        "],[-1,1635," "],[1,1636," "],[-1,1642,"  \n    }  \n    "],[1,1657,"  \n    }  \n    "],[-1,1663," "],[1,1664," "],[-1,1668," "],[1,1669," "],[-1,1681," "],[1,1682," "],[-1,1688," {  \n        "],[1,1701," {  \n        "],[-1,1711," = "],[1,1714," = "],[-1,1720,"  \n    }  \n}  "],[1,1734,"  \n    }  \n}  "]],[908,908],[909,909]]],[1564809115908,["GJX@GJXAIOU",[[1,909,"ava"]],[909,909],[912,912]]],[1564809134369,["GJX@GJXAIOU",[[1,842,"**"],[1,877,"**"]],[842,877],[842,881]]],[1564809136529,["GJX@GJXAIOU",[[-1,841,"\n"]],[841,841],[840,840]]],[1564809172152,["GJX@GJXAIOU",[[-1,1438,"    // get set 方法  "]],[1438,1457],[1438,1438]]],[1564809172545,["GJX@GJXAIOU",[[-1,1438,"\n"]],[1438,1438],[1437,1437]]],[1564809481226,["GJX@GJXAIOU",[[-1,1442,"public String getName() {  \n        return name;  \n    }  \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n    public int getIndex() {  \n        return index;  \n    }  \n    public void setIndex(int index) {  \n        this.index = index;  \n    }  "]],[1442,1717],[1442,1442]]],[1564809486664,["GJX@GJXAIOU",[[1,1202,"\n    "]],[1197,1197],[1202,1202]]],[1564809487770,["GJX@GJXAIOU",[[1,1202,"public String getName() {  \n        return name;  \n    }  \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n    public int getIndex() {  \n        return index;  \n    }  \n    public void setIndex(int index) {  \n        this.index = index;  \n    }  "]],[1202,1202],[1477,1477]]],[1564809490409,["GJX@GJXAIOU",[[-1,1074,"  // 构造方法  "]],[1072,1083],[1072,1072]]],[1564809492808,["GJX@GJXAIOU",[[-1,1006,"    // 成员变量  "]],[1006,1019],[1006,1006]]],[1564809497025,["GJX@GJXAIOU",[[-1,1454,"    // 普通方法  "]],[1454,1467],[1454,1454]]],[1564809526156,["GJX@GJXAIOU",[[-1,1757," "],[1,1758," "],[-1,1762," "],[1,1763," "],[-1,1768," {      "],[1,1776," {  \n    "],[-1,1785," 1), "],[1,1790," 1), "],[-1,1801," 2), "],[1,1806," 2), "],[-1,1817," 3), "],[1,1822," 3), "],[-1,1833," 4);      // "],[1,1846," 4);  \n    // "],[-1,1850,"      "],[1,1856,"  \n    "],[-1,1863," "],[1,1864," "],[-1,1870," "],[1,1871," "],[-1,1876,"      "],[1,1882,"  \n    "],[-1,1889," int "],[1,1894," int "],[-1,1900,"      // "],[1,1909,"  \n    // "],[-1,1913,"      "],[1,1919,"  \n    "],[-1,1926," "],[1,1927," "],[-1,1939," "],[1,1940," "],[-1,1945," int "],[1,1950," int "],[-1,1956," {          "],[1,1968," {  \n        "],[-1,1977," = "],[1,1980," = "],[-1,1985,"          "],[1,1995,"  \n        "],[-1,2005," = "],[1,2008," = "],[-1,2014,"      }      "],[1,2027,"  \n    }  \n    "],[-1,2033,"      "],[1,2039,"  \n    "],[-1,2048,"      "],[1,2054,"  \n    "],[-1,2060," "],[1,2061," "],[-1,2067," "],[1,2068," "],[-1,2078," {          "],[1,2090," {  \n        "],[-1,2096," "],[1,2097," "],[-1,2122,"      }  }  "],[1,2134,"  \n    }  \n}  "]],[1751,2134],[2149,2149]]],[1564809536565,["GJX@GJXAIOU",[[1,1750,"j"],[-1,1757," "],[1,1758," "],[-1,1762," "],[1,1763," "],[-1,1768," {  \n    "],[1,1777," {  \n    "],[-1,1786," 1), "],[1,1791," 1), "],[-1,1802," 2), "],[1,1807," 2), "],[-1,1818," 3), "],[1,1823," 3), "],[-1,1834," 4);  \n    // "],[1,1848," 4);  \n    // "],[-1,1852,"  \n    "],[1,1859,"  \n    "],[-1,1866," "],[1,1867," "],[-1,1873," "],[1,1874," "],[-1,1879,"  \n    "],[1,1886,"  \n    "],[-1,1893," int "],[1,1898," int "],[-1,1904,"  \n    // "],[1,1914,"  \n    // "],[-1,1918,"  \n    "],[1,1925,"  \n    "],[-1,1932," "],[1,1933," "],[-1,1945," "],[1,1946," "],[-1,1951," int "],[1,1956," int "],[-1,1962," {  \n        "],[1,1975," {  \n        "],[-1,1984," = "],[1,1987," = "],[-1,1992,"  \n        "],[1,2003,"  \n        "],[-1,2013," = "],[1,2016," = "],[-1,2022,"  \n    }  \n    "],[1,2037,"  \n    }  \n    "],[-1,2043,"  \n    "],[1,2050,"  \n    "],[-1,2059,"  \n    "],[1,2066,"  \n    "],[-1,2072," "],[1,2073," "],[-1,2079," "],[1,2080," "],[-1,2090," {  \n        "],[1,2103," {  \n        "],[-1,2109," "],[1,2110," "],[-1,2135,"  \n    }  \n}  "],[1,2149,"  \n    }  \n}  "]],[1750,1750],[1751,1751]]],[1564809538589,["GJX@GJXAIOU",[[1,1751,"ava"]],[1751,1751],[1754,1754]]],[1564809541884,["GJX@GJXAIOU",[[-1,1738,"Java代码 \n\n"]],[1737,1746],[1737,1737]]],[1564809542233,["GJX@GJXAIOU",[[-1,1737,"\n"]],[1737,1737],[1736,1736]]],[1564809547498,["GJX@GJXAIOU",[[-1,1837,"  // 成员变量  "]],[1837,1848],[1837,1837]]],[1564809549089,["GJX@GJXAIOU",[[-1,1902," "]],[1903,1903],[1902,1902]]],[1564809549899,["GJX@GJXAIOU",[[-1,1710,"\n"]],[1710,1710],[1709,1709]]],[1564809650666,["GJX@GJXAIOU",[[-1,2214,"\n"]],[2214,2214],[2213,2213]]],[1564809651849,["GJX@GJXAIOU",[[-1,2206,"Java代码 "]],[2213,2213],[2206,2206]]],[1564809652056,["GJX@GJXAIOU",[[-1,2206,"\n"]],[2206,2206],[2205,2205]]],[1564809652539,["GJX@GJXAIOU",[[-1,2205,"\n"]],[2205,2205],[2204,2204]]],[1564809663421,["GJX@GJXAIOU",[[-1,2215," "],[1,2216," "],[-1,2225," "],[1,2226," "],[-1,2235," {      "],[1,2243," {  \n    "],[-1,2247," "],[1,2248," "],[-1,2256,"      "],[1,2262,"  \n    "],[-1,2268," "],[1,2269," "],[-1,2279,"  }  "],[1,2284,"  \n}  \n"],[-1,2290," "],[1,2291," "],[-1,2295," "],[1,2296," "],[-1,2301," "],[1,2302," "],[-1,2312," "],[1,2313," "],[-1,2323,"      "],[1,2329,"  \n    "],[-1,2338," 1), "],[1,2343," 1), "],[-1,2354," 2), "],[1,2359," 2), "],[-1,2370," 3), "],[1,2375," 3), "],[-1,2386," 4);      // "],[1,2399," 4);  \n    // "],[-1,2403,"      "],[1,2409,"  \n    "],[-1,2416," "],[1,2417," "],[-1,2423," "],[1,2424," "],[-1,2429,"      "],[1,2435,"  \n    "],[-1,2442," int "],[1,2447," int "],[-1,2453,"      // "],[1,2462,"  \n    // "],[-1,2466,"      "],[1,2472,"  \n    "],[-1,2479," "],[1,2480," "],[-1,2492," "],[1,2493," "],[-1,2498," int "],[1,2503," int "],[-1,2509," {          "],[1,2521," {  \n        "],[-1,2530," = "],[1,2533," = "],[-1,2538,"          "],[1,2548,"  \n        "],[-1,2558," = "],[1,2561," = "],[-1,2567,"      }  "],[1,2576,"  \n    }  \n"],[-1,2582,"      "],[1,2588,"  \n    "],[-1,2597,"      "],[1,2603,"  \n    "],[-1,2609," "],[1,2610," "],[-1,2616," "],[1,2617," "],[-1,2626," {          "],[1,2638," {  \n        "],[-1,2644," "],[1,2645," "],[-1,2655,"      }      "],[1,2668,"  \n    }  \n    "],[-1,2674,"      "],[1,2680,"  \n    "],[-1,2689,"      "],[1,2695,"  \n    "],[-1,2701," "],[1,2702," "],[-1,2706," "],[1,2707," "],[-1,2714," {          "],[1,2726," {  \n        "],[-1,2771,"      }  }  "],[1,2783,"  \n    }  \n}  "]],[2209,2783],[2807,2807]]],[1564809676136,["GJX@GJXAIOU",[[-1,2854," "],[1,2855," "],[-1,2864," "],[1,2865," "],[-1,2869," {      "],[1,2877," {  \n    "],[-1,2881," "],[1,2882," "],[-1,2888," "],[1,2889," "],[-1,2899," "],[1,2900," "],[-1,2905,"          "],[1,2915,"  \n        "],[-1,2957,"      }      "],[1,2970,"  \n    }  \n    "],[-1,2974," "],[1,2975," "],[-1,2982," "],[1,2983," "],[-1,2993," "],[1,2994," "],[-1,2999,"          "],[1,3009,"  \n        "],[-1,3015," "],[1,3016," "],[-1,3021," "],[1,3022," "],[-1,3028,"      }  }  "],[1,3040,"  \n    }  \n}  "]],[2848,3040],[3047,3047]]],[1564809682146,["GJX@GJXAIOU",[[-1,2215," "],[1,2216," "],[-1,2225," "],[1,2226," "],[-1,2235," {  \n    "],[1,2244," {  \n    "],[-1,2248," "],[1,2249," "],[-1,2257,"  \n    "],[1,2264,"  \n    "],[-1,2270," "],[1,2271," "],[-1,2281,"  \n}  "],[1,2287,"  \n}  "],[-1,2294," "],[1,2295," "],[-1,2299," "],[1,2300," "],[-1,2305," "],[1,2306," "],[-1,2316," "],[1,2317," "],[-1,2327,"  \n    "],[1,2334,"  \n    "],[-1,2343," 1), "],[1,2348," 1), "],[-1,2359," 2), "],[1,2364," 2), "],[-1,2375," 3), "],[1,2380," 3), "],[-1,2391," 4);  \n    // "],[1,2405," 4);  \n    // "],[-1,2409,"  \n    "],[1,2416,"  \n    "],[-1,2423," "],[1,2424," "],[-1,2430," "],[1,2431," "],[-1,2436,"  \n    "],[1,2443,"  \n    "],[-1,2450," int "],[1,2455," int "],[-1,2461,"  \n    // "],[1,2471,"  \n    // "],[-1,2475,"  \n    "],[1,2482,"  \n    "],[-1,2489," "],[1,2490," "],[-1,2502," "],[1,2503," "],[-1,2508," int "],[1,2513," int "],[-1,2519," {  \n        "],[1,2532," {  \n        "],[-1,2541," = "],[1,2544," = "],[-1,2549,"  \n        "],[1,2560,"  \n        "],[-1,2570," = "],[1,2573," = "],[-1,2579,"  \n    }  "],[1,2589,"  \n    }  "],[-1,2596,"  \n    "],[1,2603,"  \n    "],[-1,2612,"  \n    "],[1,2619,"  \n    "],[-1,2625," "],[1,2626," "],[-1,2632," "],[1,2633," "],[-1,2642," {  \n        "],[1,2655," {  \n        "],[-1,2661," "],[1,2662," "],[-1,2672,"  \n    }  \n    "],[1,2687,"  \n    }  \n    "],[-1,2693,"  \n    "],[1,2700,"  \n    "],[-1,2709,"  \n    "],[1,2716,"  \n    "],[-1,2722," "],[1,2723," "],[-1,2727," "],[1,2728," "],[-1,2735," {  \n        "],[1,2748," {  \n        "],[-1,2793,"  \n    }  \n}  "],[1,2807,"  \n    }  \n}  "],[1,2847,"j"],[-1,2854," "],[1,2855," "],[-1,2864," "],[1,2865," "],[-1,2869," {  \n    "],[1,2878," {  \n    "],[-1,2882," "],[1,2883," "],[-1,2889," "],[1,2890," "],[-1,2900," "],[1,2901," "],[-1,2906,"  \n        "],[1,2917,"  \n        "],[-1,2959,"  \n    }  \n    "],[1,2974,"  \n    }  \n    "],[-1,2978," "],[1,2979," "],[-1,2986," "],[1,2987," "],[-1,2997," "],[1,2998," "],[-1,3003,"  \n        "],[1,3014,"  \n        "],[-1,3020," "],[1,3021," "],[-1,3026," "],[1,3027," "],[-1,3033,"  \n    }  \n}  "],[1,3047,"  \n    }  \n}  "]],[2847,2847],[2848,2848]]],[1564809682619,["GJX@GJXAIOU",[[1,2848,"ava"]],[2848,2848],[2851,2851]]],[1564809685937,["GJX@GJXAIOU",[[-1,2830," **Java代码 **\n"]],[2830,2843],[2830,2830]]],[1564809686201,["GJX@GJXAIOU",[[-1,2830,"\n"]],[2830,2830],[2829,2829]]],[1564809686753,["GJX@GJXAIOU",[[-1,2829,"\n"]],[2829,2829],[2828,2828]]],[1564809690138,["GJX@GJXAIOU",[[1,3045,"java"]],[3045,3045],[3049,3049]]],[1564809697111,["GJX@GJXAIOU",[[1,3054,"   "],[1,3057,"\n"],[1,3092,"\n"],[1,3099,"\n"],[1,3150,"\n"],[1,3222,"\n"],[1,3271,"\n"],[1,3280,"\n"],[1,3309,"\n"],[1,3380,"\n"],[1,3435,"\n"],[1,3479,"\n"],[1,3488,"\n"],[1,3517,"\n"],[1,3581,"\n"],[1,3605,"\n"],[1,3647,"\n"],[1,3680,"\n"],[1,3719,"\n"],[1,3752,"\n"]],[3053,3757],[3779,3779]]],[1564809699673,["GJX@GJXAIOU",[[-1,3080,"（by 大师兄 or 大湿胸。）"]],[3080,3096],[3080,3080]]],[1564809748088,["GJX@GJXAIOU",[[-1,3769,"![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxNDE3MTczNzI0NQ)"]],[3862,3862],[3769,3769]]],[1564809750593,["GJX@GJXAIOU",[[-1,3768,"\n"]],[3768,3768],[3767,3767]]],[1564809752290,["GJX@GJXAIOU",[[1,3774,"\n"]],[3772,3772],[3773,3773]]],[1564809753627,["GJX@GJXAIOU",[[1,3773,"···"]],[3773,3773],[3776,3776]]],[1564809754746,["GJX@GJXAIOU",[[-1,3773,"···"]],[3776,3776],[3773,3773]]],[1564809755933,["GJX@GJXAIOU",[[1,3773,"```"]],[3773,3773],[3776,3776]]],[1564809757114,["GJX@GJXAIOU",[[1,3778,"\n"]],[3776,3776],[3777,3777]]],[1564809757234,["GJX@GJXAIOU",[[1,3779,"\n"]],[3777,3777],[3778,3778]]],[1564809757827,["GJX@GJXAIOU",[[1,3778,"```"]],[3778,3778],[3781,3781]]],[1564809772090,["GJX@GJXAIOU",[[1,3777,"FRUIT CAKE GELATO"]],[3777,3777],[3794,3794]]],[1564809773041,["GJX@GJXAIOU",[[1,3795,"\n"]],[3794,3794],[3795,3795]]],[1564809774954,["GJX@GJXAIOU",[[1,3795,"BAL"]],[3795,3795],[3798,3798]]],[1564809775825,["GJX@GJXAIOU",[[-1,3796,"AL"]],[3798,3798],[3796,3796]]],[1564809776605,["GJX@GJXAIOU",[[1,3796,"LAX"]],[3796,3796],[3799,3799]]],[1564809777033,["GJX@GJXAIOU",[[-1,3798,"X"]],[3799,3799],[3798,3798]]],[1564809777349,["GJX@GJXAIOU",[[1,3798,"CK"]],[3798,3798],[3800,3800]]],[1564809800940,["GJX@GJXAIOU",[[1,3800,"_COFFEE DECAF_COFFEE LATTE CAPPUCCINO"]],[3800,3800],[3837,3837]]],[1564809802544,["GJX@GJXAIOU",[[1,3838,"\n"]],[3837,3837],[3838,3838]]],[1564809805292,["GJX@GJXAIOU",[[1,3838,"CAKE"]],[3838,3838],[3842,3842]]],[1564809805626,["GJX@GJXAIOU",[[1,3843,"\n"]],[3842,3842],[3843,3843]]],[1564809813604,["GJX@GJXAIOU",[[1,3843,"BLACK_COFFEE"]],[3843,3843],[3855,3855]]],[1564809831466,["GJX@GJXAIOU",[[-1,4136,"我的这篇文章，因为是转载的，可能基本就没有变动，导致被某人踩了一脚。觉得不符合我大师兄的性格。"]],[4136,4183],[4136,4136]]],[1564809844377,["GJX@GJXAIOU",[[-1,4159,"也是因为因为当时刚刚开始学习吧。把平时自以为了解的东西都只是大概了解了一下，说到底，还是自以为了解了，其实转眼就不知道什么是什么了。\n出来学习，不习惯看代码怎么能行呢？"]],[4159,4243],[4159,4159]]],[1564809845963,["GJX@GJXAIOU",[[-1,4159,"\n"]],[4159,4159],[4159,4159]]],[1564809858640,["GJX@GJXAIOU",[[1,4204,"\n"],[1,4205,"\n"],[1,4208,"\n"],[1,4221,"\n"],[1,4227,"\n"],[1,4258,"\n"],[1,4261,"\n"],[1,4284,"\n"],[1,4328,"\n"],[1,4346,"\n"],[1,4370,"\n"],[1,4375,"\n"],[1,4376,"\n"],[1,4383,"\n"],[1,4451,"\n"],[1,4458,"\n"],[1,4493,"\n"],[1,4552,"\n"],[1,4634,"\n"],[1,4643,"\n"],[1,4692,"\n"],[1,4733,"\n"],[1,4892,"\n"],[1,4901,"\n"],[1,4906,"\n"],[1,4907,"\n"],[1,4914,"\n"],[1,4932,"\n"],[1,4939,"\n"],[1,4980,"\n"],[1,5011,"\n"],[1,5059,"\n"],[1,5099,"\n"],[1,5155,"\n"],[1,5171,"\n"],[1,5213,"\n"],[1,5222,"\n"],[1,5223,"\n"],[1,5228,"\n"],[1,5229,"\n"],[1,5236,"\n"],[1,5271,"\n"],[1,5304,"\n"],[1,5311,"\n"],[1,5340,"\n"],[1,5355,"\n"],[1,5370,"\n"],[1,5385,"\n"],[1,5399,"\n"],[1,5404,"\n"],[1,5405,"\n"],[1,5406,"\n"],[1,5413,"\n"],[1,5470,"\n"],[1,5477,"\n"],[1,5500,"\n"],[1,5529,"\n"],[1,5557,"\n"],[1,5579,"\n"],[1,5580,"\n"],[1,5612,"\n"],[1,5613,"\n"],[1,5644,"\n"],[1,5681,"\n"],[1,5690,"\n"],[1,5691,"\n"],[1,5702,"\n"],[1,5731,"\n"],[1,5741,"\n"],[1,5772,"\n"],[1,5783,"\n"],[1,5841,"\n"],[1,5886,"\n"],[1,5944,"\n"],[1,5976,"\n"],[1,5993,"\n"],[1,6006,"\n"],[1,6030,"\n"],[1,6039,"\n"],[1,6040,"\n"],[1,6077,"\n"],[1,6110,"\n"],[1,6119,"\n"],[1,6124,"\n"]],[4179,6125],[6209,6209]]],[1564809878393,["GJX@GJXAIOU",[[-1,6231,"![](https://img-blog.csdn.net/20161222184629554)\n"]],[6230,6279],[6230,6230]]],[1564809917547,["GJX@GJXAIOU",[[1,6230,"![测试结果图]($resource/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%9B%BE.jpg)"]],[6230,6230],[6300,6300]]],[1564809954889,["GJX@GJXAIOU",[[-1,9693,"我写完文章，给自己点个赞，不过分吧，"],[-1,9712,"不过分，那我可就点啦啊。\n我先点为敬，你们随意。大家随意。不要客气。。。"]],[9693,9748],[9693,9693]]],[1564809973098,["GJX@GJXAIOU",[[-1,8829,"老铁们，看完这个枚举，你要懂个概念，那就是，这个"]],[8829,8852],[8829,8829]]],[1564809975609,["GJX@GJXAIOU",[[-1,8832,"他"]],[8833,8833],[8832,8832]]],[1564809979065,["GJX@GJXAIOU",[[-1,8839,"你"]],[8840,8840],[8839,8839]]],[1564809991441,["GJX@GJXAIOU",[[-1,8908,"对的，老铁，你对这个属性，构造函数啥的，有概念吧，没有的话，我可就郁闷啦。"]],[8908,8945],[8908,8908]]],[1564809991969,["GJX@GJXAIOU",[[-1,8909,"\n"]],[8908,8908],[8907,8907]]],[1564809992681,["GJX@GJXAIOU",[[-1,8908,"\n"]],[8907,8907],[8906,8906]]],[1564810090846,["GJX@GJXAIOU",[[-1,4008,"关于枚举的实现细节和原理请参考：\n\n参考资料：《ThinkingInJava》第四版\n\n[http://softbeta.iteye.com/blog/1185573](http://softbeta.iteye.com/blog/1185573)\n"]],[4008,4133],[4008,4008]]],[1564810091212,["GJX@GJXAIOU",[[-1,4008,"\n"]],[4008,4008],[4007,4007]]],[1564810153541,["GJX@GJXAIOU",[[1,7328," "],[1,7366,"\n"],[1,7397,"\n"],[1,7430,"\n"],[1,7469,"\n"],[1,7509,"\n"],[1,7569,"\n"],[1,7600,"\n"],[1,7619,"\n"],[1,7628,"\n"],[1,7655,"\n"],[1,7681,"\n"],[1,7762,"\n"],[1,7847,"\n"],[1,7933,"\n"],[1,7955,"\n"],[1,7979,"\n"],[1,8060,"\n"],[1,8145,"\n"],[1,8231,"\n"],[1,8253,"\n"],[1,8278,"\n"],[1,8359,"\n"],[1,8444,"\n"],[1,8530,"\n"],[1,8552,"\n"],[1,8572,"\n"],[1,8618,"\n"],[1,8627,"\n"]],[7325,8632],[8661,8661]]],[1564810163729,["GJX@GJXAIOU",[[-1,7327,"  "],[-1,7368,"  "],[-1,7406,"  "],[-1,7434,"  "],[-1,7480,"  "],[-1,7515,"  "],[-1,7582,"  "],[-1,7608," "],[-1,7619," "],[-1,7634,"  "],[-1,7638,"  "],[-1,7666,"  "],[-1,7707,"  "],[-1,7775,"  "],[-1,7875,"  "],[-1,7948," "],[-1,7963," "],[-1,7971,"  "],[-1,7996," "],[-1,8011," "],[-1,8078,"  "],[-1,8164," "],[-1,8179," "],[-1,8265,"  "],[-1,8274,"  "],[-1,8300,"  "],[-1,8396,"  "],[-1,8468,"  "],[-1,8569,"  "],[-1,8578," "],[-1,8589," "],[-1,8599,"  "],[-1,8652,"  "],[-1,8656,"  "]],[7328,8661],[7326,8603]]],[1564810164179,["GJX@GJXAIOU",[[-1,7325,"  "],[-1,7366,"  "],[-1,7400,"  "],[-1,7428,"  "],[-1,7470,"  "],[-1,7505,"  "],[-1,7568,"  "],[-1,7594," "],[-1,7603," "],[-1,7616,"  "],[-1,7620,"  "],[-1,7646,"  "],[-1,7683,"  "],[-1,7751,"  "],[-1,7847,"  "],[-1,7920," "],[-1,7933," "],[-1,7941,"  "],[-1,7964," "],[-1,7977," "],[-1,8044,"  "],[-1,8128," "],[-1,8141," "],[-1,8225,"  "],[-1,8234,"  "],[-1,8258,"  "],[-1,8350,"  "],[-1,8422,"  "],[-1,8519,"  "],[-1,8528," "],[-1,8537," "],[-1,8547,"  "],[-1,8596,"  "],[-1,8600,"  "]],[7326,8603],[7324,8545]]],[1564810198014,["GJX@GJXAIOU",[[1,8655,"因此"]],[8655,8655],[8657,8657]]],[1564810209807,["GJX@GJXAIOU",[[1,8657,"可以有构造方法、属性以及其他方法"]],[8657,8657],[8673,8673]]],[1564810214144,["GJX@GJXAIOU",[[-1,8675,"要有这么个概念。只要是个类，他就可以有构造函数，可以有属性，可以有方法。\n"]],[8674,8711],[8674,8674]]],[1564810222417,["GJX@GJXAIOU",[[1,8673,"，"]],[8673,8673],[8674,8674]]],[1564810224312,["GJX@GJXAIOU",[[-1,8673,"，"]],[8674,8674],[8673,8673]]],[1564810224732,["GJX@GJXAIOU",[[1,8673,"；"]],[8673,8673],[8674,8674]]],[1564810225409,["GJX@GJXAIOU",[[1,8677,"\n"]],[8674,8674],[8675,8675]]],[1564810240711,["GJX@GJXAIOU",[[1,8675,"枚举中有两个自带的默认属性：那么"]],[8675,8675],[8691,8691]]],[1564810241577,["GJX@GJXAIOU",[[-1,8689,"那么"]],[8691,8691],[8689,8689]]],[1564810242917,["GJX@GJXAIOU",[[1,8689,"··"]],[8689,8689],[8691,8691]]],[1564810244608,["GJX@GJXAIOU",[[-1,8688,"：··"]],[8691,8691],[8688,8688]]],[1564810247637,["GJX@GJXAIOU",[[1,8688,"：``"]],[8688,8688],[8691,8691]]],[1564810249212,["GJX@GJXAIOU",[[1,8690,"anme"]],[8690,8690],[8694,8694]]],[1564810250409,["GJX@GJXAIOU",[[-1,8690,"anme`"]],[8694,8694],[8689,8689]]],[1564810251667,["GJX@GJXAIOU",[[1,8690,"`"]],[8689,8689],[8690,8690]]],[1564810252315,["GJX@GJXAIOU",[[1,8690,"name"]],[8690,8690],[8694,8694]]],[1564810255795,["GJX@GJXAIOU",[[1,8695,"和``"]],[8695,8695],[8698,8698]]],[1564810258589,["GJX@GJXAIOU",[[1,8697,"ord"]],[8697,8697],[8700,8700]]],[1564810258916,["GJX@GJXAIOU",[[1,8700,"ian"]],[8700,8700],[8703,8703]]],[1564810260179,["GJX@GJXAIOU",[[-1,8701,"an"]],[8703,8703],[8701,8701]]],[1564810260787,["GJX@GJXAIOU",[[1,8701,"nal"]],[8701,8701],[8704,8704]]],[1564810277839,["GJX@GJXAIOU",[[1,8705,",其他属性可以自己添加"]],[8705,8705],[8716,8716]]],[1564810293946,["GJX@GJXAIOU",[[-1,8719,"然后，你就看到，这个地方有2个默认的属性，一个是name，一个是ordinal，这2个属性就像你定义Student类和Person类的name和age一样，\n\n只不过，这2个是系统自带的属性，不用你自己去定义啦。\n\n你也可以给这个枚举类，也就是你自己声明的枚举，随便加属性。\n\n我上面代码例子里面的那个TypeEnum那个枚举，就是这么干的，就简单的添加了个自定义属性typeName，\n\n虽然他有自己的name了，那姑且叫我这个自定义的属性叫别名吧。"]],[8719,8945],[8719,8719]]],[1564810299569,["GJX@GJXAIOU",[[-1,8720,"\n"]],[8719,8719],[8718,8718]]],[1564810300023,["GJX@GJXAIOU",[[-1,8719,"\n"]],[8718,8718],[8717,8717]]],[1564810300456,["GJX@GJXAIOU",[[-1,8718,"\n"]],[8717,8717],[8716,8716]]],[1564810360861,["GJX@GJXAIOU",[[1,8716,"；"]],[8716,8716],[8717,8717]]],[1564810374953,["GJX@GJXAIOU",[[-1,8803,"不能对系统自带的name属性，在构造函数里面赋值，"]],[8803,8828],[8803,8803]]],[1564810376572,["GJX@GJXAIOU",[[1,8717,"不能对系统自带的name属性，在构造函数里面赋值，"]],[8717,8717],[8742,8742]]],[1564810377962,["GJX@GJXAIOU",[[-1,8741,"，"]],[8742,8742],[8741,8741]]],[1564810378596,["GJX@GJXAIOU",[[1,8741,"。"]],[8741,8741],[8742,8742]]],[1564810382064,["GJX@GJXAIOU",[[-1,8744,"可以看到，我例子里面就是通过自己写的那个构造方法给我这个自定义的属性初始化值的。\n\n还有，这个构造方法是不可以，也不被运行public的，不信，你可以试试。\n\n还有，你没有为什么。\n\n[https://blog.csdn.net/qq_27093465/article/details/52180865](https://blog.csdn.net/qq_27093465/article/details/52180865)\n"]],[8744,8957],[8744,8744]]],[1564810382408,["GJX@GJXAIOU",[[-1,8744,"\n"]],[8744,8744],[8743,8743]]],[1564810390649,["GJX@GJXAIOU",[[-1,8744,"**（2019-07-29更新）**\n\n再补充一点，这个也比较重要"]],[8744,8777],[8744,8744]]],[1564810391760,["GJX@GJXAIOU",[[-1,8745,"\n"]],[8744,8744],[8743,8743]]],[1564810393811,["GJX@GJXAIOU",[[1,8744,"****"]],[8744,8744],[8746,8746]]],[1564810398653,["GJX@GJXAIOU",[[1,8746,"补充知识："]],[8746,8746],[8751,8751]]],[1564810417873,["GJX@GJXAIOU",[[-1,8808,"这个时候你的需求或者要求啥的，需要变更这个枚举名称。"]],[8808,8834],[8808,8808]]]],null,"GJX@GJXAIOU"]]}