{"compress":true,"commitItems":[["85b6c95d-3215-48e8-b34f-4b065c50194e",1562754630604,"",[[1562754583573,["GJX@GJXAIOU",[[1,0,"# Java中foreach使用\n\n\n\n"]],[0,0],[19,19]]],[1562754585452,["GJX@GJXAIOU",[[1,19,"JDK1.5加入的增强for和循环.\n\nforeach语句使用总结\n\n增强**for(part1:part2){part3}**; \n\n**part2中是一个数组对象,或者是带有泛性的集合. \npart1定义了一个局部变量,这个局部变量的类型与part2中的对象元素的类型是一致的. \npart3当然还是循环体.**\nforeach语句是java5的新特征之一，在遍历数组、集合方面，foreach为开发人员提供了极大的方便。\n\nforeach语句是for语句的特殊简化版本，但是foreach语句并不能完全取代for语句，然而，任何的foreach语句都可以改写为for语句版本。\n\nforeach并不是一个关键字，习惯上将这种特殊的for语句格式称之为“foreach”语句。从英文字面意思理解foreach也就是“for 每一个”的意思。实际上也就是这个意思。\n\nforeach的语句格式：\nfor(元素类型t 元素变量x : 遍历对象obj){\n     引用了x的java语句;\n}\n\n下面通过两个例子简单例子看看foreach是如何简化编程的。代码如下：\n\n一、foreach简化数组和集合的遍历\n\n```java\nimport java.util.Arrays; import java.util.List; import java.util.ArrayList;   public class TestArray { public static void main(String args[]) { TestArray test = new TestArray(); test.test1(); test.listToArray(); test.testArray3();   }  /** * foreach语句输出一维数组 */ public void test1() { //定义并初始化一个数组 int arr[] = {2, 3, 1}; System.out.println(\"----1----排序前的一维数组\"); for (int x : arr) { System.out.println(x); //逐个输出数组元素的值 }   //对数组排序 Arrays.sort(arr);   //利用java新特性for each循环输出数组 System.out.println(\"----1----排序后的一维数组\"); for (int x : arr) { System.out.println(x); //逐个输出数组元素的值 } }   /** * 集合转换为一维数组 */ public void listToArray() { //创建List并添加元素 List<String> list = new ArrayList<String>(); list.add(\"1\"); list.add(\"3\"); list.add(\"4\");   //利用froeach语句输出集合元素 System.out.println(\"----2----froeach语句输出集合元素\"); for (String x : list) { System.out.println(x); }   //将ArrayList转换为数组 Object s[] = list.toArray();   //利用froeach语句输出集合元素 System.out.println(\"----2----froeach语句输出集合转换而来的数组元素\"); for (Object x : s) { System.out.println(x.toString()); //逐个输出数组元素的值 } }   /** * foreach输出二维数组测试 */ public void testArray2() { int arr2[][] = {{4, 3}, {1, 2}}; System.out.println(\"----3----foreach输出二维数组测试\"); for (int x[] : arr2) { for (int e : x) { System.out.println(e); //逐个输出数组元素的值 } } }   /** * foreach输出三维数组 */ public void testArray3() { int arr[][][] = { {{1, 2}, {3, 4}}, {{5, 6}, {7, 8}} };   System.out.println(\"----4----foreach输出三维数组测试\"); for (int[][] a2 : arr) { for (int[] a1 : a2) { for (int x : a1) { System.out.println(x); } } } } }\n```\n\n运行结果：\n----1----排序前的一维数组 \n2 \n3 \n1 \n----1----排序后的一维数组 \n1 \n2 \n3 \n----2----froeach语句输出集合元素 \n1 \n3 \n4 \n----2----froeach语句输出集合转换而来的数组元素 \n1 \n3 \n4 \n----4----foreach输出三维数组测试 \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n\nProcess finished with exit code 0\n\n二、foreach语句的局限性\n\n通过上面的例子可以发现，如果要引用数组或者集合的索引，则foreach语句无法做到，foreach仅仅老老实实地遍历数组或者集合一遍。下面看一个例子就明白了：\n\npublic class TestArray2 { \n\npublic static void main(String args[]) { \n//定义一个一维数组 \nint arr[] = new int[4]; \nSystem.out.println(\"----未赋值前输出刚刚定义的数组----\"); \nfor (int x : arr) { \nSystem.out.println(x); \n} \n\n//通过索引给数组元素赋值 \nSystem.out.println(\"----通过循环变量给数组元素赋值----\"); \nfor (int i = 3; i > 0; i--) { \narr[i] = i; \n} \n//循环输出创建的数组 \nSystem.out.println(\"----赋值后，foreach输出创建好的数组----\"); \nfor (int x : arr) { \nSystem.out.println(x); \n} \n} \n}\n\n运行结果：\n\n----未赋值前输出刚刚定义的数组---- \n0 \n0 \n0 \n0 \n----通过循环变量给数组元素赋值---- \n----赋值后，foreach输出创建好的数组---- \n0 \n1 \n2 \n3 \n\nProcess finished with exit code 0\n\n三、总结\n\nforeach语句是for语句特殊情况下的增强版本，简化了编程，提高了代码的可读性和安全性（**不用怕数组越界**）。相对老的for语句来说是个很好的补充。提倡能用foreach的地方就不要再用for了。在用到对集合或者数组索引的情况下，foreach显得力不从心，这个时候是用for语句的时候了。foreach一般结合泛型使用"]],[19,19],[3122,3122]]],[1562754605808,["GJX@GJXAIOU",[[1,558,"\n"],[1,581,"\n"],[1,609,"\n"],[1,610,"\n"],[1,611,"\n"],[1,636,"\n"],[1,677,"\n"],[1,711,"\n"],[1,725,"\n"],[1,745,"\n"],[1,764,"\n"],[1,765,"\n"],[1,766,"\n"],[1,768,"\n"],[1,769,"\n"],[1,773,"\n"],[1,791,"\n"],[1,794,"\n"],[1,816,"\n"],[1,829,"\n"],[1,852,"\n"],[1,893,"\n"],[1,913,"\n"],[1,949,"\n"],[1,951,"\n"],[1,952,"\n"],[1,953,"\n"],[1,961,"\n"],[1,979,"\n"],[1,980,"\n"],[1,981,"\n"],[1,1007,"\n"],[1,1048,"\n"],[1,1068,"\n"],[1,1104,"\n"],[1,1106,"\n"],[1,1108,"\n"],[1,1109,"\n"],[1,1110,"\n"],[1,1114,"\n"],[1,1126,"\n"],[1,1129,"\n"],[1,1157,"\n"],[1,1171,"\n"],[1,1216,"\n"],[1,1231,"\n"],[1,1246,"\n"],[1,1261,"\n"],[1,1262,"\n"],[1,1263,"\n"],[1,1283,"\n"],[1,1331,"\n"],[1,1355,"\n"],[1,1378,"\n"],[1,1380,"\n"],[1,1381,"\n"],[1,1382,"\n"],[1,1400,"\n"],[1,1429,"\n"],[1,1430,"\n"],[1,1431,"\n"],[1,1451,"\n"],[1,1506,"\n"],[1,1527,"\n"],[1,1574,"\n"],[1,1576,"\n"],[1,1578,"\n"],[1,1579,"\n"],[1,1580,"\n"],[1,1584,"\n"],[1,1602,"\n"],[1,1605,"\n"],[1,1632,"\n"],[1,1665,"\n"],[1,1713,"\n"],[1,1736,"\n"],[1,1754,"\n"],[1,1790,"\n"],[1,1792,"\n"],[1,1794,"\n"],[1,1796,"\n"],[1,1797,"\n"],[1,1798,"\n"],[1,1802,"\n"],[1,1818,"\n"],[1,1821,"\n"],[1,1848,"\n"],[1,1866,"\n"],[1,1884,"\n"],[1,1901,"\n"],[1,1904,"\n"],[1,1905,"\n"],[1,1906,"\n"],[1,1954,"\n"],[1,1979,"\n"],[1,2001,"\n"],[1,2020,"\n"],[1,2043,"\n"],[1,2045,"\n"],[1,2047,"\n"],[1,2049,"\n"],[1,2051,"\n"]],[533,2052],[2154,2154]]],[1562754989360,["GJX@GJXAIOU",[[-1,56,"**"]],[58,58],[56,56]]],[1562754990696,["GJX@GJXAIOU",[[1,56,"`"],[-1,82," "],[1,83," "],[-1,112," "],[1,113," "],[-1,158," "],[1,159," "],[-1,444,"     "],[1,449,"     "],[-1,2181," \n2 \n3 \n1 "],[1,2191," \n2 \n3 \n1 "],[-1,2209," \n1 \n2 \n3 "],[1,2219," \n1 \n2 \n3 "],[-1,2244," \n1 \n3 \n4 "],[1,2254," \n1 \n3 \n4 "],[-1,2286," \n1 \n3 \n4 "],[1,2296," \n1 \n3 \n4 "],[-1,2321," \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 "],[1,2346," \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 "],[-1,2506," "],[1,2507," "],[-1,2549," "],[1,2550," "],[-1,2561," "],[1,2562," "],[-1,2586," "],[1,2587," "],[-1,2632," "],[1,2633," "],[-1,2653," "],[1,2654," "],[-1,2677," \n} "],[1,2681," \n} "],[-1,2696," "],[1,2697," "],[-1,2742," "],[1,2743," "],[-1,2773," "],[1,2774," "],[-1,2786," \n} "],[1,2790," \n} "],[-1,2802," "],[1,2803," "],[-1,2854," "],[1,2855," "],[-1,2875," "],[1,2876," "],[-1,2899," \n} \n} "],[1,2906," \n} \n} "],[-1,2938," \n0 \n0 \n0 \n0 "],[1,2951," \n0 \n0 \n0 \n0 "],[-1,2973," "],[1,2974," "],[-1,3002," \n0 \n1 \n2 \n3 "],[1,3015," \n0 \n1 \n2 \n3 "]],[56,56],[57,57]]],[1562754994725,["GJX@GJXAIOU",[[-1,80,"**"]],[82,82],[80,80]]],[1562754998000,["GJX@GJXAIOU",[[1,80,"`"]],[80,80],[81,81]]],[1562755012757,["GJX@GJXAIOU",[[-1,38,"\n"]],[38,38],[37,37]]],[1562755019437,["GJX@GJXAIOU",[[-1,33,"和"]],[34,34],[33,33]]],[1562755024159,["GJX@GJXAIOU",[[1,37,"**"],[1,50,"**"]],[37,50],[37,54]]],[1562755035047,["GJX@GJXAIOU",[[-1,37,"**foreach语句使用总结**"],[1,54,"\n"]],[37,54],[38,38]]],[1562755040678,["GJX@GJXAIOU",[[1,38,"## yufa "]],[38,38],[46,46]]],[1562755041766,["GJX@GJXAIOU",[[-1,41,"yufa "]],[46,46],[41,41]]],[1562755045631,["GJX@GJXAIOU",[[1,41,"一、语法格式："]],[41,41],[48,48]]],[1562755049285,["GJX@GJXAIOU",[[-1,50,"增强"]],[50,52],[50,50]]],[1562755057261,["GJX@GJXAIOU",[[1,75,"\n"]],[75,75],[76,76]]],[1562755058677,["GJX@GJXAIOU",[[1,76,"\n"]],[75,75],[76,76]]],[1562755060285,["GJX@GJXAIOU",[[-1,74,"`"]],[75,75],[74,74]]],[1562755062262,["GJX@GJXAIOU",[[1,68,"\n"]],[68,68],[69,69]]],[1562755063751,["GJX@GJXAIOU",[[1,74,"\n"]],[74,74],[75,75]]],[1562755065534,["GJX@GJXAIOU",[[1,69,"  "]],[69,69],[71,71]]],[1562755069229,["GJX@GJXAIOU",[[-1,80,"; "]],[80,82],[80,80]]],[1562755069445,["GJX@GJXAIOU",[[-1,81,"\n"]],[80,80],[79,79]]],[1562755072406,["GJX@GJXAIOU",[[1,49,"    "]],[49,49],[53,53]]],[1562755073990,["GJX@GJXAIOU",[[-1,49,"    "]],[53,53],[49,49]]],[1562755074999,["GJX@GJXAIOU",[[1,49,"  "]],[49,49],[51,51]]],[1562755075934,["GJX@GJXAIOU",[[-1,50," "]],[51,51],[50,50]]],[1562755079016,["GJX@GJXAIOU",[[1,50,"```java"]],[50,50],[57,57]]],[1562755081709,["GJX@GJXAIOU",[[-1,58,"`"]],[59,59],[58,58]]],[1562755084574,["GJX@GJXAIOU",[[1,86,"```"]],[86,86],[89,89]]],[1562755086829,["GJX@GJXAIOU",[[-1,49," "]],[50,50],[49,49]]],[1562755089541,["GJX@GJXAIOU",[[1,49,"\n"]],[49,49],[50,50]]],[1562755096766,["GJX@GJXAIOU",[[-1,91,"**"]],[91,93],[91,91]]],[1562755102917,["GJX@GJXAIOU",[[1,100,"**"],[1,115,"**"]],[100,115],[100,119]]],[1562755107344,["GJX@GJXAIOU",[[1,91,"- "]],[91,91],[93,93]]],[1562755109975,["GJX@GJXAIOU",[[1,124,"- "]],[124,124],[126,126]]],[1562755112054,["GJX@GJXAIOU",[[1,172,"- "]],[172,172],[174,174]]],[1562755115692,["GJX@GJXAIOU",[[-1,190,"foreach语句是java5的新特征之一，在遍历数组、集合方面，foreach为开发人员提供了极大的方便。"]],[190,244],[190,190]]],[1562755117254,["GJX@GJXAIOU",[[1,36,"foreach语句是java5的新特征之一，在遍历数组、集合方面，foreach为开发人员提供了极大的方便。"]],[36,36],[90,90]]],[1562755137046,["GJX@GJXAIOU",[[-1,241,"**"]],[243,243],[241,241]]],[1562755142053,["GJX@GJXAIOU",[[1,92,"\n"]],[90,90],[91,91]]],[1562755151924,["GJX@GJXAIOU",[[-1,245,"foreach语句是for语句的特殊简化版本，但是foreach语句并不能完全取代for语句，然而，任何的foreach语句都可以改写为for语句版本。\n\nforeach并不是一个关键字，习惯上将这种特殊的for语句格式称之为“foreach”语句。从英文字面意思理解foreach也就是“for 每一个”的意思。实际上也就是这个意思。\n"]],[244,413],[244,244]]],[1562755154301,["GJX@GJXAIOU",[[1,92,"foreach语句是for语句的特殊简化版本，但是foreach语句并不能完全取代for语句，然而，任何的foreach语句都可以改写为for语句版本。\n\nforeach并不是一个关键字，习惯上将这种特殊的for语句格式称之为“foreach”语句。从英文字面意思理解foreach也就是“for 每一个”的意思。实际上也就是这个意思。\n"]],[91,91],[260,260]]],[1562755159285,["GJX@GJXAIOU",[[-1,414,"\n"]],[414,414],[413,413]]],[1562755159429,["GJX@GJXAIOU",[[-1,413,"\n"]],[413,413],[412,412]]],[1562755163493,["GJX@GJXAIOU",[[1,413,"**"],[1,425,"**"]],[413,425],[413,429]]],[1562755165766,["GJX@GJXAIOU",[[1,425,"j"]],[425,425],[426,426]]],[1562755166280,["GJX@GJXAIOU",[[1,425," "],[1,426," uti"]],[426,426],[430,430]]],[1562755166517,["GJX@GJXAIOU",[[1,431," "]],[430,430],[431,431]]],[1562755167623,["GJX@GJXAIOU",[[-1,426,"juti "]],[431,431],[426,426]]],[1562755168824,["GJX@GJXAIOU",[[1,426,"具体"]],[426,426],[428,428]]],[1562755176237,["GJX@GJXAIOU",[[1,435,"\n"]],[434,434],[435,435]]],[1562755177023,["GJX@GJXAIOU",[[1,435,"·"]],[435,435],[436,436]]],[1562755177967,["GJX@GJXAIOU",[[-1,435,"·"]],[436,436],[435,435]]],[1562755180280,["GJX@GJXAIOU",[[1,435,"```java"]],[435,435],[442,442]]],[1562755183238,["GJX@GJXAIOU",[[1,491,"```"]],[491,491],[494,494]]],[1562755184205,["GJX@GJXAIOU",[[1,495,"\n"]],[494,494],[495,495]]],[1562755213441,["GJX@GJXAIOU",[[1,1701,"wujui"]],[1701,1701],[1706,1706]]],[1562755214565,["GJX@GJXAIOU",[[-1,1700," wujui"]],[1706,1706],[1700,1700]]],[1562755225153,["GJX@GJXAIOU",[[1,1700," ☆☆☆"]],[1700,1700],[1704,1704]]],[1562755233628,["GJX@GJXAIOU",[[1,1704,"☆☆☆"]],[1704,1704],[1707,1707]]],[1562755235517,["GJX@GJXAIOU",[[-1,1706,"☆"]],[1707,1707],[1706,1706]]],[1562755245279,["GJX@GJXAIOU",[[1,1541,"  ☆☆☆☆"]],[1541,1541],[1547,1547]]],[1562755252607,["GJX@GJXAIOU",[[1,2114,"  "]],[2114,2114],[2116,2116]]],[1562755254406,["GJX@GJXAIOU",[[1,2139,"    "]],[2139,2139],[2143,2143]]],[1562755257173,["GJX@GJXAIOU",[[1,2163,"      "]],[2163,2163],[2169,2169]]],[1562755260790,["GJX@GJXAIOU",[[1,2193,"          "]],[2193,2193],[2203,2203]]],[1562755262790,["GJX@GJXAIOU",[[1,2206,"      "]],[2206,2206],[2212,2212]]],[1562755264359,["GJX@GJXAIOU",[[1,2215,"    "]],[2215,2215],[2219,2219]]],[1562755265532,["GJX@GJXAIOU",[[1,2222,"  "]],[2222,2222],[2224,2224]]],[1562755272197,["GJX@GJXAIOU",[[1,1975,"  "]],[1975,1975],[1977,1977]]],[1562755274197,["GJX@GJXAIOU",[[1,1996,"    "]],[1996,1996],[2000,2000]]],[1562755275892,["GJX@GJXAIOU",[[1,2019,"    "]],[2019,2019],[2023,2023]]],[1562755284277,["GJX@GJXAIOU",[[1,2041,"  "]],[2041,2041],[2043,2043]]],[1562755293237,["GJX@GJXAIOU",[[1,2471,"## "]],[2471,2471],[2489,2489]]],[1562755300740,["GJX@GJXAIOU",[[1,2540,"**"],[1,2557,"**"]],[2540,2557],[2540,2561]]],[1562755303566,["GJX@GJXAIOU",[[1,2575,"···"]],[2575,2575],[2578,2578]]],[1562755304974,["GJX@GJXAIOU",[[-1,2575,"···"]],[2578,2578],[2575,2575]]],[1562755306206,["GJX@GJXAIOU",[[1,2575,"```"]],[2575,2575],[2578,2578]]],[1562755306233,["GJX@GJXAIOU",[[1,2578,"language\n```\n"]],[2578,2578],[2578,2586]]],[1562755307017,["GJX@GJXAIOU",[[-1,2578,"language"],[1,2586,"j"]],[2578,2586],[2579,2579]]],[1562755307414,["GJX@GJXAIOU",[[1,2579,"ava"]],[2579,2579],[2582,2582]]],[1562755309741,["GJX@GJXAIOU",[[-1,2583,"```"]],[2583,2586],[2583,2583]]],[1562755311269,["GJX@GJXAIOU",[[-1,2584,"\n"]],[2584,2584],[2583,2583]]],[1562755311622,["GJX@GJXAIOU",[[-1,2583,"\n"]],[2583,2583],[2582,2582]]],[1562755315868,["GJX@GJXAIOU",[[1,3011,"```"]],[3011,3011],[3014,3014]]],[1562755320486,["GJX@GJXAIOU",[[1,2979,"    "]],[2979,2979],[2983,2983]]],[1562755322317,["GJX@GJXAIOU",[[1,3007,"        "]],[3007,3007],[3015,3015]]],[1562755323376,["GJX@GJXAIOU",[[1,3018,"    "]],[3018,3018],[3022,3022]]],[1562755327564,["GJX@GJXAIOU",[[1,3173,"## "]],[3173,3173],[3180,3180]]]],null,"GJX@GJXAIOU"],["4248b54d-126f-49e7-9322-133f68fd20db",1562846935885,"# Java中foreach使用\n\n\nJDK1.5加入的增强for循环.foreach语句是java5的新特征之一，在遍历数组、集合方面，foreach为开发人员提供了极大的方便。\n\nforeach语句是for语句的特殊简化版本，但是foreach语句并不能完全取代for语句，然而，任何的foreach语句都可以改写为for语句版本。\n\nforeach并不是一个关键字，习惯上将这种特殊的for语句格式称之为“foreach”语句。从英文字面意思理解foreach也就是“for 每一个”的意思。实际上也就是这个意思。\n\n## 一、语法格式：\n\n```java\nfor(part1:part2){\n  part3\n}\n```\n\n- part2中是一个**数组对象,或者是带有泛性的集合**. \n- part1定义了一个局部变量,这个局部变量的类型与part2中的对象元素的类型是一致的. \n- part3当然还是循环体.\n\n**foreach的语句 具体 格式**：\n```java\nfor(元素类型t 元素变量x : 遍历对象obj){\n     引用了x的java语句;\n}\n```\n\n下面通过两个例子简单例子看看foreach是如何简化编程的。代码如下：\n\n一、foreach简化数组和集合的遍历\n\n```java\nimport java.util.Arrays; \nimport java.util.List; \nimport java.util.ArrayList; \n \n \npublic class TestArray { \npublic static void main(String args[]) { \nTestArray test = new TestArray(); \ntest.test1(); \ntest.listToArray(); \ntest.testArray3(); \n \n \n} \n \n/** \n* foreach语句输出一维数组 \n*/ \npublic void test1() { \n//定义并初始化一个数组 \nint arr[] = {2, 3, 1}; \nSystem.out.println(\"----1----排序前的一维数组\"); \nfor (int x : arr) { \nSystem.out.println(x); //逐个输出数组元素的值 \n} \n \n \n//对数组排序 \nArrays.sort(arr); \n \n \n//利用java新特性for each循环输出数组 \nSystem.out.println(\"----1----排序后的一维数组\"); \nfor (int x : arr) { \nSystem.out.println(x); //逐个输出数组元素的值 \n} \n} \n \n \n/** \n* 集合转换为一维数组 \n*/ \npublic void listToArray() { \n//创建List并添加元素 \nList<String> list = new ArrayList<String>(); \nlist.add(\"1\"); \nlist.add(\"3\"); \nlist.add(\"4\"); \n \n \n//利用froeach语句输出集合元素 \nSystem.out.println(\"----2----froeach语句输出集合元素\"); \nfor (String x : list) { \nSystem.out.println(x); \n} \n \n \n//将ArrayList转换为数组 \nObject s[] = list.toArray(); \n \n \n//利用froeach语句输出集合元素   ☆☆☆☆\nSystem.out.println(\"----2----froeach语句输出集合转换而来的数组元素\"); \nfor (Object x : s) { \nSystem.out.println(x.toString()); //逐个输出数组元素的值 \n} \n} \n \n \n/** \n* foreach输出二维数组测试 ☆☆☆☆☆\n*/ \npublic void testArray2() { \nint arr2[][] = {{4, 3}, {1, 2}}; \nSystem.out.println(\"----3----foreach输出二维数组测试\"); \nfor (int x[] : arr2) { \nfor (int e : x) { \nSystem.out.println(e); //逐个输出数组元素的值 \n} \n} \n} \n \n \n/** \n* foreach输出三维数组 \n*/ \npublic void testArray3() { \n  int arr[][][] = { \n    {{1, 2}, {3, 4}}, \n    {{5, 6}, {7, 8}} \n  }; \n \n \nSystem.out.println(\"----4----foreach输出三维数组测试\"); \nfor (int[][] a2 : arr) { \n  for (int[] a1 : a2) { \n    for (int x : a1) { \n      System.out.println(x); \n          } \n      } \n    } \n  } \n}\n```\n\n运行结果：\n----1----排序前的一维数组 \n2 \n3 \n1 \n----1----排序后的一维数组 \n1 \n2 \n3 \n----2----froeach语句输出集合元素 \n1 \n3 \n4 \n----2----froeach语句输出集合转换而来的数组元素 \n1 \n3 \n4 \n----4----foreach输出三维数组测试 \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n\nProcess finished with exit code 0\n\n## 二、foreach语句的局限性\n\n通过上面的例子可以发现，如果要引用数组或者集合的索引，则foreach语句无法做到，foreach**仅仅老老实实地遍历数组或者集合一遍**。下面看一个例子就明白了：\n```java\npublic class TestArray2 { \n\npublic static void main(String args[]) { \n//定义一个一维数组 \nint arr[] = new int[4]; \nSystem.out.println(\"----未赋值前输出刚刚定义的数组----\"); \nfor (int x : arr) { \nSystem.out.println(x); \n} \n\n//通过索引给数组元素赋值 \nSystem.out.println(\"----通过循环变量给数组元素赋值----\"); \nfor (int i = 3; i > 0; i--) { \narr[i] = i; \n} \n//循环输出创建的数组 \nSystem.out.println(\"----赋值后，foreach输出创建好的数组----\"); \nfor (int x : arr) { \n    System.out.println(x); \n        } \n    } \n}\n```\n运行结果：\n\n----未赋值前输出刚刚定义的数组---- \n0 \n0 \n0 \n0 \n----通过循环变量给数组元素赋值---- \n----赋值后，foreach输出创建好的数组---- \n0 \n1 \n2 \n3 \n\nProcess finished with exit code 0\n\n## 三、总结\n\nforeach语句是for语句特殊情况下的增强版本，简化了编程，提高了代码的可读性和安全性（**不用怕数组越界**）。相对老的for语句来说是个很好的补充。提倡能用foreach的地方就不要再用for了。在用到对集合或者数组索引的情况下，foreach显得力不从心，这个时候是用for语句的时候了。foreach一般结合泛型使用\n",[[1562846880625,["GJX@GJXAIOU",[[1,671,"  "]],[671,671],[673,673]]],[1562846882016,["GJX@GJXAIOU",[[1,715,"    "]],[715,715],[719,719]]],[1562846883159,["GJX@GJXAIOU",[[1,754,"    "]],[754,754],[758,758]]],[1562846884313,["GJX@GJXAIOU",[[1,773,"    "]],[773,773],[777,777]]],[1562846885438,["GJX@GJXAIOU",[[1,798,"    "]],[798,798],[802,802]]],[1562846886906,["GJX@GJXAIOU",[[-1,824," "]],[825,825],[824,824]]],[1562846887055,["GJX@GJXAIOU",[[-1,824,"\n"]],[824,824],[823,823]]],[1562846887281,["GJX@GJXAIOU",[[-1,822," "]],[823,823],[822,822]]],[1562846887663,["GJX@GJXAIOU",[[-1,822,"\n"]],[822,822],[821,821]]]],null,"GJX@GJXAIOU"]]}