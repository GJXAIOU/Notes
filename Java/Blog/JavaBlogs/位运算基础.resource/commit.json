{"compress":true,"commitItems":[["b2373a1b-ae90-4155-a859-f6bc139f31e0",1561856303024,"",[[1561856254163,["GJX@GJXAIOU",[[1,0,"# 位运算基础\n\n\n\n"]],[0,0],[10,10]]],[1561856280421,["GJX@GJXAIOU",[[1,9,"Title:       位操作基础篇之位操作全面总结\nAuthor:     MoreWindows\nE-mail:      morewindows@126.com\nKeyWord:   C/C++ 位操作 位操作技巧 判断奇偶 交换两数 变换符号 求绝对值 位操作压缩空间 筛素数 位操作趣味应用 位操作笔试面试\n\n位操作篇共分为基础篇和提高篇，基础篇主要对位操作进行全面总结，帮助大家梳理知识。提高篇则针对各大IT公司如微软、腾讯、百度、360等公司的笔试面试题作详细的解答，使大家能熟练应对在笔试面试中位操作题目。\n\n      下面就先来对位操作作个全面总结，欢迎大家补充。\n\n在计算机中所有数据都是以二进制的形式储存的。位运算其实就是直接对在内存中的二进制数据进行操作，因此处理数据的速度非常快。\n\n在实际编程中，如果能巧妙运用位操作，完全可以达到四两拨千斤的效果，正因为位操作的这些优点，所以位操作在各大IT公司的笔试面试中一直是个热点问题。因此本文将对位操作进行如下方面总结：\n\n      一． 位操作基础，用一张表描述位操作符的应用规则并详细解释。\n\n      二． 常用位操作小技巧，有判断奇偶、交换两数、变换符号、求绝对值。\n\n      三． 位操作与空间压缩，针对筛素数进行空间压缩。\n\n      四． 位操作的趣味应用，列举了位操作在高低位交换、二进制逆序、二进制中1的个数以及缺失的数字这4种趣味应用。\n\n希望读者能认真学习和亲自上机输入代码进行实验，相信通过本文及适当的练习可以使你对位操作有更加深入的了解，在笔试面试中遇到位操作相关试题能更加从容。\n\n一． 位操作基础\n基本的位操作符有与、或、异或、取反、左移、右移这6种，它们的运算规则如下所示：\n\n符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）\n\n注意以下几点：\n\n1．  在这6种操作符，只有~取反是单目操作符，其它5种都是双目操作符。\n\n2．  位操作只能用于整形数据，对float和double类型进行位操作会被编译器报错。\n\n3．  对于移位操作，在微软的VC6.0和VS2008编译器都是采取算术称位即算术移位操作，算术移位是相对于逻辑移位，它们在左移操作中都一样，低位补0即可，但在右移中逻辑移位的高位补0而算术移位的高位是补符号位。如下面代码会输出-4和3。\n\n\tint a = -15, b = 15;\n\tprintf(\"%d %d\\n\", a >> 2, b >> 2);\n因为15=0000 1111(二进制)，右移二位，最高位由符号位填充将得到0000 0011即3。-15 = 1111 0001(二进制)，右移二位，最高位由符号位填充将得到1111 1100即-4（见注1）。\n\n4．  位操作符的运算优先级比较低，因为尽量使用括号来确保运算顺序，否则很可能会得到莫明其妙的结果。比如要得到像1，3，5，9这些2^i+1的数字。写成int a = 1 << i + 1;是不对的，程序会先执行i + 1，再执行左移操作。应该写成int a = (1 << i) + 1;\n\n5．  另外位操作还有一些复合操作符，如&=、|=、 ^=、<<=、>>=。\n\n \n\n二． 常用位操作小技巧\n下面对位操作的一些常见应用作个总结，有判断奇偶、交换两数、变换符号及求绝对值。这些小技巧应用易记，应当熟练掌握。\n\n1．判断奇偶\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a & 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。\n\n下面程序将输出0到100之间的所有奇数。\n\n\tfor (i = 0; i < 100; ++i)\n\t\tif (i & 1)\n\t\t\tprintf(\"%d \", i);\n\tputchar('\\n');\n2．交换两数\n一般的写法是：\n\nvoid Swap(int &a, int &b)\n{\n\tif (a != b)\n\t{\n\t\tint c = a;\n\t\ta = b;\n\t\tb = c;\n\t}\n}\n可以用位操作来实现交换两数而不用第三方变量：\n\nvoid Swap(int &a, int &b)\n{\n\tif (a != b)\n\t{\n\t\ta ^= b;\n\t\tb ^= a;\n\t\ta ^= b;\n\t}\n}\n可以这样理解：\n\n第一步  a^=b 即a=(a^b);\n\n第二步  b^=a 即b=b^(a^b)，由于^运算满足交换律，b^(a^b)=b^b^a。由于一个数和自己异或的结果为0并且任何数与0异或都会不变的，所以此时b被赋上了a的值。\n\n第三步 a^=b 就是a=a^b，由于前面二步可知a=(a^b)，b=a，所以a=a^b即a=(a^b)^a。故a会被赋上b的值。\n再来个实例说明下以加深印象。int a = 13, b = 6;\n\na的二进制为 13=8+4+1=1101(二进制)\n\nb的二进制为 6=4+2=110(二进制)\n\n第一步 a^=b  a = 1101 ^ 110 = 1011;\n\n第二步 b^=a  b = 110 ^ 1011 = 1101;即b=13\n\n第三步 a^=b  a = 1011 ^ 1101 = 110;即a=6\n\n3．变换符号\n变换符号就是正数变成负数，负数变成正数。\n\n如对于-11和11，可以通过下面的变换方法将-11变成11\n\n      1111 0101(二进制) –取反-> 0000 1010(二进制) –加1-> 0000 1011(二进制)\n\n同样可以这样的将11变成-11\n\n      0000 1011(二进制) –取反-> 0000 0100(二进制) –加1-> 1111 0101(二进制)\n\n因此变换符号只需要取反后加1即可。完整代码如下：\n\n//by MoreWindows( http://blog.csdn.net/MoreWindows )  \n#include <stdio.h>\nint SignReversal(int a)\n{\n\treturn ~a + 1;\n}\nint main()\n{\n\tprintf(\"对整数变换符号 --- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n\tint a = 7, b = -12345;\n\tprintf(\"%d  %d\\n\", SignReversal(a), SignReversal(b));\n\treturn 0;\n}\n4．求绝对值\n位操作也可以用来求绝对值，对于负数可以通过对其取反后加1来得到正数。对-6可以这样：\n\n      1111 1010(二进制) –取反->0000 0101(二进制) -加1-> 0000 0110(二进制)\n\n来得到6。\n\n因此先移位来取符号位，int i = a >> 31;要注意如果a为正数，i等于0，为负数，i等于-1。然后对i进行判断——如果i等于0，直接返回。否之，返回~a+1。完整代码如下：\n\n//by MoreWindows( http://blog.csdn.net/MoreWindows )\nint my_abs(int a)\n{\n\tint i = a >> 31;\n\treturn i == 0 ? a : (~a + 1);\n}\n现在再分析下。对于任何数，与0异或都会保持不变，与-1即0xFFFFFFFF异或就相当于取反。因此，a与i异或后再减i（因为i为0或-1，所以减i即是要么加0要么加1）也可以得到绝对值。所以可以对上面代码优化下：\n\n//by MoreWindows( http://blog.csdn.net/MoreWindows )\nint my_abs(int a)\n{\n\tint i = a >> 31;\n\treturn ((a ^ i) - i);\n}\n注意这种方法没用任何判断表达式，而且有些笔面试题就要求这样做，因此建议读者记住该方法（^_^讲解过后应该是比较好记了）。\n\n \n\n三． 位操作与空间压缩\n筛素数法在这里不就详细介绍了，本文着重对筛素数法所使用的素数表进行优化来减小其空间占用。要压缩素数表的空间占用，可以使用位操作。下面是用筛素数法计算100以内的素数示例代码（注2）：\n\n//by MoreWindows( http://blog.csdn.net/MoreWindows )\n#include <stdio.h>\n#include <memory.h>\nconst int MAXN = 100;\nbool flag[MAXN];\nint primes[MAXN / 3 + 1], pi;\n//对每个素数，它的倍数必定不是素数。\n//有很多重复如flag[10]会在访问flag[2]和flag[5]时各访问一次\nvoid GetPrime_1()\n{\n\tint i, j;\n\tpi = 0;\n\tmemset(flag, false, sizeof(flag));\n\tfor (i = 2; i < MAXN; i++)\n\t\tif (!flag[i])\n\t\t{\n\t\t\tprimes[pi++] = i;\n\t\t\tfor (j = i; j < MAXN; j += i)\n\t\t\t\tflag[j] = true;\n\t\t}\n}\nvoid PrintfArray()\n{\n\tfor (int i = 0; i < pi; i++)\n\t\tprintf(\"%d \", primes[i]);\n\tputchar('\\n');\n}\nint main()\n{\n\tprintf(\"用筛素数法求100以内的素数\\n-- by MoreWindows( http://blog.csdn.net/MoreWindows ) --\\n\\n\");  \n\tGetPrime_1();\n\tPrintfArray();\n\treturn 0;\n}\n运行结果如下：\n\n\n\n在上面程序是用bool数组来作标记的，bool型数据占1个字节（8位），因此用位操作来压缩下空间占用将会使空间的占用减少八分之七。\n\n下面考虑下如何在数组中对指定位置置1，先考虑如何对一个整数在指定位置上置1。对于一个整数可以通过将1向左移位后与其相或来达到在指定位上置1的效果，代码如下所示：\n\n\t//在一个数指定位上置1\n\tint j = 0;\n\tj |=  1 << 10;\n\tprintf(\"%d\\n\", j);\n同样，可以1向左移位后与原数相与来判断指定位上是0还是1（也可以将原数右移若干位再与1相与）。\n\n    //判断指定位上是0还是1\n\tint j = 1 << 10;\n\tif ((j & (1 << 10)) != 0)\n\t\tprintf(\"指定位上为1\");\n\telse\n\t\tprintf(\"指定位上为0\");\n扩展到数组上，我们可以采用这种方法，因为数组在内存上也是连续分配的一段空间，完全可以“认为”是一个很长的整数。先写一份测试代码，看看如何在数组中使用位操作：\n\n//by MoreWindows( http://blog.csdn.net/MoreWindows )  \n#include <stdio.h>\nint main()\n{\n\tprintf(\"     对数组中指定位置上置位和判断该位\\n\");\n\tprintf(\"--- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n\t//在数组中在指定的位置上写1\n\tint b[5] = {0};\n\tint i;\n\t//在第i个位置上写1\n\tfor (i = 0; i < 40; i += 3)\n\t\tb[i / 32] |= (1 << (i % 32));\n\t//输出整个bitset\n\tfor (i = 0; i < 40; i++)\n\t{\n\t\tif ((b[i / 32] >> (i % 32)) & 1)\n\t\t\tputchar('1');\n\t\telse \n\t\t\tputchar('0');\n\t}\n\tputchar('\\n');\n\treturn 0;\n}\n运行结果如下：\n\n\n\n可以看出该数组每3个就置成了1，证明我们上面对数组进行位操作的方法是正确的。因此可以将上面筛素数方法改成使用位操作压缩后的筛素数方法：\n\n//使用位操作压缩后的筛素数方法\n//by MoreWindows( http://blog.csdn.net/MoreWindows ) \n#include <stdio.h>\n#include <memory.h>\nconst int MAXN = 100;\nint flag[MAXN / 32 + 1];\nint primes[MAXN / 3 + 1], pi;\nvoid GetPrime_1()\n{\n\tint i, j;\n\tpi = 0;\n\tmemset(flag, 0, sizeof(flag));\n\tfor (i = 2; i < MAXN; i++)\n\t\tif (!((flag[i / 32] >> (i % 32)) & 1))\n\t\t{\n\t\t\tprimes[pi++] = i;\n\t\t\tfor (j = i; j < MAXN; j += i)\n\t\t\t\tflag[j / 32] |= (1 << (j % 32));\n\t\t}\n}\nvoid PrintfArray()\n{\n\tfor (int i = 0; i < pi; i++)\n\t\tprintf(\"%d \", primes[i]);\n\tputchar('\\n');\n}\nint main()\n{\n\tprintf(\"用位操作压缩后筛素数法求100以内的素数\\n-- by MoreWindows( http://blog.csdn.net/MoreWindows ) --\\n\\n\");  \n\tGetPrime_1();\n\tPrintfArray();\n\treturn 0;\n}\n同样运行结果为：\n\n\n\n另外，还可以使用C++ STL中的bitset类来作素数表。筛素数方法在笔试面试出现的几率还是比较大的，能写出用位操作压缩后的筛素数方法无疑将会使你的代码脱颖而出，因此强烈建议读者自己亲自动手实现一遍，平时多努力，考试才不慌。\n\n位操作的压缩空间技巧也被用于strtok函数的实现，请参考《strtok源码剖析 位操作与空间压缩》（http://blog.csdn.net/morewindows/article/details/8740315）\n\n \n\n四． 位操作的趣味应用\n位操作有很有趣的应用，下面列举出一些，欢迎读者补充。\n\n1．  高低位交换\n给出一个16位的无符号整数。称这个二进制数的前8位为“高位”，后8位为“低位”。现在写一程序将它的高低位交换。例如，数34520用二进制表示为：\n\n      10000110 11011000\n\n将它的高低位进行交换，我们得到了一个新的二进制数：\n\n      11011000 10000110\n\n它即是十进制的55430。\n\n这个问题用位操作解决起来非常方便，设x=34520=10000110 11011000(二进制) 由于x为无符号数，右移时会执行逻辑右移即高位补0，因此x右移8位将得到00000000 10000110。而x左移8位将得到11011000 00000000。可以发现只要将x>>8与x<<8这两个数相或就可以得到11011000 10000110。用代码实现非常简洁：\n\n//高低位交换 by MoreWindows( http://blog.csdn.net/MoreWindows )  \n#include <stdio.h>\ntemplate <class T>\nvoid PrintfBinary(T a)\n{\n\tint i;\n\tfor (i = sizeof(a) * 8 - 1; i >= 0; --i)\n\t{\n\t\tif ((a >> i) & 1)\n\t\t\tputchar('1');\n\t\telse \n\t\t\tputchar('0');\n\t\tif (i == 8)\n\t\t\tputchar(' ');\n\t}\n\tputchar('\\n');\n}\nint main()\n{\n\tprintf(\"高低位交换 --- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n \n\tprintf(\"交换前:    \");\n\tunsigned short a = 3344520;\n\tPrintfBinary(a);\n \n\tprintf(\"交换后:    \");\n\ta = (a >> 8) | (a << 8);\n\tPrintfBinary(a);\n\treturn 0;\n}\n运行结果如下：\n\n\n\n2．  二进制逆序\n我们知道如何对字符串求逆序，现在要求计算二进制的逆序，如数34520用二进制表示为：\n\n      10000110 11011000\n\n将它逆序，我们得到了一个新的二进制数：\n\n      00011011 01100001\n\n它即是十进制的7009。\n\n    回顾下字符串的逆序，可以从字符串的首尾开始，依次交换两端的数据。在二进制逆序我们也可以用这种方法，但运用位操作的高低位交换来处理二进制逆序将会得到更简洁的方法。类似于归并排序的分组处理，可以通过下面4步得到16位数据的二进制逆序：\n\n第一步：每2位为一组，组内高低位交换\n\n      10 00 01 10  11 01 10 00\n\n  -->01 00 10 01 11 10 01 00\n\n第二步：每4位为一组，组内高低位交换\n\n      0100 1001 1110 0100\n\n  -->0001 0110 1011 0001\n\n第三步：每8位为一组，组内高低位交换\n\n      00010110 10110001\n\n  -->01100001 00011011\n\n第四步：每16位为一组，组内高低位交换\n\n      01100001 00011011\n\n  -->00011011 01100001\n\n对第一步，可以依次取出每2位作一组，再组内高低位交换，这样有点麻烦，下面介绍一种非常有技巧的方法。先分别取10000110 11011000的奇数位和偶数位，空位以下划线表示。\n\n      原 数    10000110 11011000\n\n      奇数位 1_0_0_1_ 1_0_1_0_\n\n      偶数位  _0_0_1_0 _1_1_0_0\n\n将下划线用0填充，可得\n\n      原 数    10000110 11011000\n\n      奇数位 10000010 10001000\n\n      偶数位 00000100 01010000\n\n再将奇数位右移一位，偶数位左移一位，此时将这两个数据相或即可以达到奇偶位上数据交换的效果了。\n\n      原 数           10000110 11011000\n\n      奇数位右移 01000001 01000100  \n\n      偶数位左移 00001000 10100000\n\n      相或得到      01001001 11100100\n\n可以看出，结果完全达到了奇偶位的数据交换，再来考虑代码的实现——\n\n      取x的奇数位并将偶数位用0填充用代码实现就是x & 0xAAAA\n\n      取x的偶数位并将奇数位用0填充用代码实现就是x & 0x5555\n\n因此，第一步就用代码实现就是：\n\n       x = ((x & 0xAAAA) >> 1) | ((x & 0x5555) << 1);\n\n类似可以得到后三步的代码。完整程序如下：\n\n//二进制逆序 by MoreWindows( http://blog.csdn.net/MoreWindows )  \n#include <stdio.h>\ntemplate <class T>\nvoid PrintfBinary(T a)\n{\n\tint i;\n\tfor (i = sizeof(a) * 8 - 1; i >= 0; --i)\n\t{\n\t\tif ((a >> i) & 1)\n\t\t\tputchar('1');\n\t\telse \n\t\t\tputchar('0');\n\t\tif (i == 8)\n\t\t\tputchar(' ');\n\t}\n\tputchar('\\n');\n}\nint main()\n{\n\tprintf(\"二进制逆序 --- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n \n\tprintf(\"逆序前:    \");\n\tunsigned short a = 34520;\n\tPrintfBinary(a);\n \n\tprintf(\"逆序后:    \");\t\n\ta = ((a & 0xAAAA) >> 1) | ((a & 0x5555) << 1);\n\ta = ((a & 0xCCCC) >> 2) | ((a & 0x3333) << 2);\n\ta = ((a & 0xF0F0) >> 4) | ((a & 0x0F0F) << 4);\n\ta = ((a & 0xFF00) >> 8) | ((a & 0x00FF) << 8);\n\tPrintfBinary(a);\n}\n运行结果如下：\n\n\n\n3．  二进制中1的个数\n统计二进制中1的个数可以直接移位再判断，当然像《编程之美》书中用循环移位计数或先打一个表再计算都可以。本文详细讲解一种高效的方法。以34520为例，可以通过下面四步来计算其二进制中1的个数二进制中1的个数。\n\n第一步：每2位为一组，组内高低位相加\n\n      10 00 01 10  11 01 10 00\n\n  -->01 00 01 01  10 01 01 00\n\n第二步：每4位为一组，组内高低位相加\n\n      0100 0101 1001 0100\n\n  -->0001 0010 0011 0001\n\n第三步：每8位为一组，组内高低位相加\n\n      00010010 00110001\n\n  -->00000011 00000100\n\n第四步：每16位为一组，组内高低位相加\n\n      00000011 00000100\n\n  -->00000000 00000111\n\n这样最后得到的00000000 00000111即7即34520二进制中1的个数。类似上文中对二进制逆序的做法不难实现第一步的代码：\n\n       x = ((x & 0xAAAA) >> 1) + (x & 0x5555);\n\n好的，有了第一步，后面几步就请读者完成下吧，先动动笔再看下面的完整代码：\n\n//二进制中1的个数  by MoreWindows( http://blog.csdn.net/MoreWindows ) \n#include <stdio.h>\ntemplate <class T>\nvoid PrintfBinary(T a)\n{\n\tint i;\n\tfor (i = sizeof(a) * 8 - 1; i >= 0; --i)\n\t{\n\t\tif ((a >> i) & 1)\n\t\t\tputchar('1');\n\t\telse \n\t\t\tputchar('0');\n\t\tif (i == 8)\n\t\t\tputchar(' ');\n\t}\n\tputchar('\\n');\n}\nint main()\n{\n\tprintf(\"二进制中1的个数 --- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n\t\n\tunsigned short a = 34520;\n\tprintf(\"原数    %6d的二进制为:  \", a);\n\tPrintfBinary(a);\n\t\n\ta = ((a & 0xAAAA) >> 1) + (a & 0x5555);\n\ta = ((a & 0xCCCC) >> 2) + (a & 0x3333);\n\ta = ((a & 0xF0F0) >> 4) + (a & 0x0F0F);\n\ta = ((a & 0xFF00) >> 8) + (a & 0x00FF);\t\n\tprintf(\"计算结果%6d的二进制为:  \", a);\t\n\tPrintfBinary(a);\n\treturn 0;\n}\n运行结果如下：\n\n\n\n可以发现巧妙运用分组处理确实是解决很多二进制问题的灵丹妙药。\n\n4．  缺失的数字\n很多成对出现数字保存在磁盘文件中，注意成对的数字不一定是相邻的，如2, 3, 4, 3, 4, 2……，由于意外有一个数字消失了，如何尽快的找到是哪个数字消失了？\n\n由于有一个数字消失了，那必定有一个数只出现一次而且其它数字都出现了偶数次。用搜索来做就没必要了，利用异或运算的两个特性——1.自己与自己异或结果为0，2.异或满足交换律。因此我们将这些数字全异或一遍，结果就一定是那个仅出现一个的那个数。 示例代码如下：\n\n//缺失的数字  by MoreWindows( http://blog.csdn.net/MoreWindows ) \n#include <stdio.h>\nint main()\n{\n\tprintf(\"缺失的数字 --- by MoreWindows( http://blog.csdn.net/MoreWindows )  ---\\n\\n\");\n\t\n\tconst int MAXN = 15;\n\tint a[MAXN] = {1, 347, 6, 9, 13, 65, 889, 712, 889, 347, 1, 9, 65, 13, 712};\n\tint lostNum = 0;\n\tfor (int i = 0; i < MAXN; i++)\n\t\tlostNum ^= a[i];\n\tprintf(\"缺失的数字为:  %d\\n\", lostNum);\t\n\treturn 0;\n}\n在这个题目中有一个数字丢失了，如果有两个数字丢失了应该怎么做了，请看《【白话经典算法系列之十二】数组中只出现1次的两个数字(百度面试题)》 \n\n地址：http://blog.csdn.net/morewindows/article/details/8214003\n\n \n\n位操作是一种高效优美的方法，同时由于其高效的运算性能和掌握难度较大，位操作运算一直是笔试面试时的热门话题之一。本文详细总结了位操作的方法与技巧并列出4种位操作趣味应用，如果读者能亲自上机实现代码，相信必能更好应对笔试和面试时可能遇到的位操作问题。\n\n另外，欢迎各位能提供笔试面试中的位操作相关的题目给我，我将会在提高篇中加入这些。谢谢大家。\n\n \n\n \n\n注1．int类型一般占4字节，32位。因此15准确表达为\n\n15=00000000 00000000 00000000 00001111(二进制)\n\n-15准确表达为\n\n-15=11111111 11111111 11111111 11110001(二进制)\n\n为了简便起见，文章中使用15=00001111(二进制)，-15=11110001(二进制)。\n\n \n\n注2．这种筛素数的方法很朴素，会多次重复访问数据，有什么办法能改进一下吗？请看《改进的筛素数方法》一文。"]],[9,9],[11651,11651]]],[1561856302251,["GJX@GJXAIOU",[[1,706,"## "]],[706,706],[717,717]]],[1561856317123,["GJX@GJXAIOU",[[-1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[759,1017],[759,759]]],[1561856326875,["GJX@GJXAIOU",[[1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[759,759],[1017,1017]]],[1561856329128,["GJX@GJXAIOU",[[-1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[1017,1017],[759,759]]],[1561856335921,["GJX@GJXAIOU",[[1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[759,759],[1017,1017]]],[1561856337461,["GJX@GJXAIOU",[[-1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[1017,1017],[759,759]]],[1561856365150,["GJX@GJXAIOU",[[1,759,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[759,759],[1017,1017]]],[1561856378541,["GJX@GJXAIOU",[[-1,794,"   by MoreWindows"]],[794,811],[794,794]]],[1561856396478,["GJX@GJXAIOU",[[-1,759,"符号\n\n 描述\n\n 运算规则                     \n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）\n"]],[759,1001],[759,759]]],[1561857080827,["GJX@GJXAIOU",[[1,760,"\n"]],[759,759],[760,760]]],[1561857080955,["GJX@GJXAIOU",[[1,761,"\n"]],[760,760],[761,761]]],[1561857081090,["GJX@GJXAIOU",[[1,762,"\n"]],[761,761],[762,762]]],[1561857098202,["GJX@GJXAIOU",[[-1,15,"      "],[1,21,"      "],[-1,44,"    "],[1,48,"    "],[-1,68,"     "],[1,73,"     "],[-1,102,"  "],[1,104,"  "],[-1,273,"     "],[1,278,"     "],[-1,458,"      一． "],[1,467,"      一． "],[-1,496,"      二． "],[1,505,"      二． "],[-1,537,"      三． "],[1,546,"      三． "],[-1,569,"      四． "],[1,578,"      四． "],[-1,759,""],[1,759,"-"],[-1,774," "],[1,775," "],[-1,812," "],[1,813," "],[-1,858," "],[1,859," "],[-1,1144," "],[1,1145," "],[-1,1291," "],[1,1292," "],[-1,1329," "],[1,1330," "],[-1,1800," "],[1,1801," "],[-1,1821," "],[1,1822," "],[-1,2067," "],[1,2068," "],[-1,2101," "],[1,2102," "],[-1,2140," "],[1,2141," "],[-1,2230,"     "],[1,2235,"     "],[-1,2311,"     "],[1,2316,"     "],[-1,2759,"     "],[1,2764,"     "],[-1,3332," "],[1,3333," "],[-1,6036," "],[1,6037," "],[-1,6081," "],[1,6082," "],[-1,6163,"     "],[1,6168,"     "],[-1,6215,"     "],[1,6220,"     "],[-1,6990," "],[1,6991," "],[-1,7042,"     "],[1,7047,"     "],[-1,7088,"     "],[1,7093,"     "],[-1,7127,"   "],[1,7130,"   "],[-1,7268,"     "],[1,7273,"     "],[-1,7286," "],[1,7287," "],[-1,7300," "],[1,7301," "],[-1,7350,"      "],[1,7356,"      "],[-1,7377," "],[1,7378," "],[-1,7423,"      "],[1,7429,"      "],[-1,7448," "],[1,7449," "],[-1,7493,"     "],[1,7498,"     "],[-1,7518," "],[1,7519," "],[-1,7632,"     "],[1,7637,"     "],[-1,7641,"   "],[1,7644,"   "],[-1,7664,"     "],[1,7669,"     "],[-1,7693,"     "],[1,7698,"     "],[-1,7702,"  "],[1,7704,"  "],[-1,7736,"     "],[1,7741,"     "],[-1,7745,"   "],[1,7748,"   "],[-1,7768,"     "],[1,7773,"     "],[-1,7797,"     "],[1,7802,"     "],[-1,7874,"     "],[1,7879,"     "],[-1,7883,"          "],[1,7893,"          "],[-1,7913,"     "],[1,7918,"     "],[-1,7942,"  \n\n     "],[1,7951,"  \n\n     "],[-1,7977,"     "],[1,7982,"     "],[-1,7987,"      "],[1,7993,"      "],[-1,8046,"     "],[1,8051,"     "],[-1,8086,"     "],[1,8091,"     "],[-1,8143,"      "],[1,8149,"      "],[-1,8923," "],[1,8924," "],[-1,9059,"     "],[1,9064,"     "],[-1,9077," "],[1,9078," "],[-1,9091," "],[1,9092," "],[-1,9107," "],[1,9108," "],[-1,9142,"     "],[1,9147,"     "],[-1,9169," "],[1,9170," "],[-1,9215,"     "],[1,9220,"     "],[-1,9240," "],[1,9241," "],[-1,9285,"     "],[1,9290,"     "],[-1,9310," "],[1,9311," "],[-1,9402,"      "],[1,9408,"      "],[-1,10235," "],[1,10236," "],[-1,10918," "],[1,10919," "],[-1,10982," "],[1,10983," "],[-1,11157," \n\n "],[1,11161," \n\n "],[-1,11343," "],[1,11344," "]],[759,759],[760,760]]],[1561857105678,["GJX@GJXAIOU",[[1,760,"--|---|---"]],[760,760],[770,770]]],[1561857111740,["GJX@GJXAIOU",[[1,771,"符号\n\n 描述\n\n 运算规则                        by MoreWindows\n\n&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[771,771],[1029,1029]]],[1561857114482,["GJX@GJXAIOU",[[-1,771,"符号\n\n 描述\n\n 运算规则  "]],[771,787],[771,771]]],[1561857116462,["GJX@GJXAIOU",[[1,759,"\n"]],[759,759],[760,760]]],[1561857117628,["GJX@GJXAIOU",[[1,759,"符号\n\n 描述\n\n 运算规则  "]],[759,759],[775,775]]],[1561857119643,["GJX@GJXAIOU",[[-1,763," "]],[764,764],[763,763]]],[1561857119827,["GJX@GJXAIOU",[[-1,762,"\n"]],[763,763],[762,762]]],[1561857120493,["GJX@GJXAIOU",[[-1,761,"\n"]],[762,762],[761,761]]],[1561857123025,["GJX@GJXAIOU",[[1,761,"|"],[-1,765," "],[1,766," "],[-1,770,"  "],[1,772,"  "],[-1,785,"                     "],[1,806,"                     "],[-1,824,"      \n\n "],[1,833,"      \n\n "],[-1,852,"  \n\n 或    "],[1,862,"  \n\n 或    "],[-1,880,"    "],[1,884,"    "],[-1,905,"   "],[1,908,"   "],[-1,925," "],[1,926," "],[-1,957," "],[1,958," "]],[761,761],[762,762]]],[1561857125525,["GJX@GJXAIOU",[[-1,765,"\n"]],[766,766],[765,765]]],[1561857125699,["GJX@GJXAIOU",[[-1,764,"\n"]],[765,765],[764,764]]],[1561857127729,["GJX@GJXAIOU",[[1,764,"|"]],[764,764],[765,765]]],[1561857129950,["GJX@GJXAIOU",[[-1,765," "]],[766,766],[765,765]]],[1561857132149,["GJX@GJXAIOU",[[-1,804,"  by MoreWindows"]],[804,820],[804,804]]],[1561857136059,["GJX@GJXAIOU",[[-1,806,"&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）\n"]],[806,1011],[806,806]]],[1561857145466,["GJX@GJXAIOU",[[1,785,"&      \n\n 与\n\n两个位都为1时，结果才为1\n\n|  \n\n 或    \n\n两个位都为0时，结果才为0\n\n^    \n\n异或\n\n两个位相同为0，相异为1\n\n~   \n\n取反\n\n0变1，1变0\n\n<< \n\n左移\n\n各二进位全部左移若干位，高位丢弃，低位补0\n\n>> \n\n右移\n\n各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）"]],[785,785],[989,989]]],[1561857148228,["GJX@GJXAIOU",[[-1,794," "]],[795,795],[794,794]]],[1561857148577,["GJX@GJXAIOU",[[-1,793,"\n"]],[794,794],[793,793]]],[1561857148987,["GJX@GJXAIOU",[[-1,792,"\n"]],[793,793],[792,792]]],[1561857150149,["GJX@GJXAIOU",[[-1,791," "]],[792,792],[791,791]]],[1561857151565,["GJX@GJXAIOU",[[-1,786,"     "],[1,791,"     |"],[-1,810,"  \n\n 或    "],[1,820,"  \n\n 或    "],[-1,838,"    "],[1,842,"    "],[-1,863,"   "],[1,866,"   "],[-1,883," "],[1,884," "],[-1,915," "],[1,916," "]],[791,791],[792,792]]],[1561857154121,["GJX@GJXAIOU",[[-1,794,"\n"]],[795,795],[794,794]]],[1561857154604,["GJX@GJXAIOU",[[-1,793,"\n"]],[794,794],[793,793]]],[1561857156350,["GJX@GJXAIOU",[[1,793," |"]],[793,793],[795,795]]],[1561857160218,["GJX@GJXAIOU",[[-1,815," "]],[816,816],[815,815]]],[1561857160378,["GJX@GJXAIOU",[[-1,814,"\n"]],[815,815],[814,814]]],[1561857160917,["GJX@GJXAIOU",[[-1,813,"\n"]],[814,814],[813,813]]],[1561857162318,["GJX@GJXAIOU",[[1,813," |"]],[813,813],[815,815]]],[1561857164541,["GJX@GJXAIOU",[[-1,809,"\n"]],[809,809],[808,808]]],[1561857166970,["GJX@GJXAIOU",[[-1,820,"\n"]],[821,821],[820,820]]],[1561857167338,["GJX@GJXAIOU",[[-1,819,"\n"]],[820,820],[819,819]]],[1561857168742,["GJX@GJXAIOU",[[1,819,"|"]],[819,819],[820,820]]],[1561857174566,["GJX@GJXAIOU",[[1,813," "]],[811,811],[812,812]]],[1561857177133,["GJX@GJXAIOU",[[-1,784," "]],[785,785],[784,784]]],[1561857180570,["GJX@GJXAIOU",[[-1,787,"   "]],[790,790],[787,787]]],[1561857183837,["GJX@GJXAIOU",[[-1,808,"  "]],[810,810],[808,808]]],[1561857188138,["GJX@GJXAIOU",[[-1,829,"\n"]],[830,830],[829,829]]],[1561857190378,["GJX@GJXAIOU",[[-1,835,"\n"]],[836,836],[835,835]]],[1561857190546,["GJX@GJXAIOU",[[-1,834,"\n"]],[835,835],[834,834]]],[1561857192141,["GJX@GJXAIOU",[[1,834,"|"]],[834,834],[835,835]]],[1561857194362,["GJX@GJXAIOU",[[-1,838,"\n"]],[839,839],[838,838]]],[1561857194530,["GJX@GJXAIOU",[[-1,837,"\n"]],[838,838],[837,837]]],[1561857195718,["GJX@GJXAIOU",[[1,837,"|"]],[837,837],[838,838]]],[1561857198089,["GJX@GJXAIOU",[[-1,833," "]],[834,834],[833,833]]],[1561857207646,["GJX@GJXAIOU",[[1,807,"从"]],[807,807],[808,808]]],[1561857209701,["GJX@GJXAIOU",[[-1,807,"从"]],[808,808],[807,807]]],[1561857213538,["GJX@GJXAIOU",[[1,804,"|"]],[804,804],[805,805]]],[1561857216342,["GJX@GJXAIOU",[[1,829,"|"]],[829,829],[830,830]]],[1561857218782,["GJX@GJXAIOU",[[1,771,"|"]],[771,771],[772,772]]],[1561857220591,["GJX@GJXAIOU",[[1,784,"|"]],[784,784],[785,785]]],[1561857223434,["GJX@GJXAIOU",[[-1,771,"|"]],[772,772],[771,771]]],[1561857224116,["GJX@GJXAIOU",[[-1,783,"|"]],[784,784],[783,783]]],[1561857225100,["GJX@GJXAIOU",[[-1,804,"|"]],[805,805],[804,804]]],[1561857225770,["GJX@GJXAIOU",[[-1,828,"|"]],[829,829],[828,828]]],[1561857227266,["GJX@GJXAIOU",[[-1,805,"|"]],[806,806],[805,805]]],[1561857229808,["GJX@GJXAIOU",[[1,805,"、"]],[805,805],[806,806]]],[1561857231722,["GJX@GJXAIOU",[[-1,805,"、"]],[806,806],[805,805]]],[1561857233972,["GJX@GJXAIOU",[[1,805,"``"]],[805,805],[807,807]]],[1561857236503,["GJX@GJXAIOU",[[1,806,"|"]],[806,806],[807,807]]],[1561857240525,["GJX@GJXAIOU",[[-1,852,"\n"]],[852,852],[851,851]]],[1561857245394,["GJX@GJXAIOU",[[-1,857,"\n"]],[858,858],[857,857]]],[1561857245851,["GJX@GJXAIOU",[[-1,856,"\n"]],[857,857],[856,856]]],[1561857248936,["GJX@GJXAIOU",[[1,856,"|"]],[856,856],[857,857]]],[1561857251138,["GJX@GJXAIOU",[[-1,860,"\n"]],[861,861],[860,860]]],[1561857251541,["GJX@GJXAIOU",[[-1,859,"\n"]],[860,860],[859,859]]],[1561857252872,["GJX@GJXAIOU",[[1,859," |"]],[859,859],[861,861]]],[1561857255293,["GJX@GJXAIOU",[[-1,869,"\n"]],[870,870],[869,869]]],[1561857257658,["GJX@GJXAIOU",[[-1,873,"\n"]],[874,874],[873,873]]],[1561857258001,["GJX@GJXAIOU",[[-1,872,"\n"]],[873,873],[872,872]]],[1561857259807,["GJX@GJXAIOU",[[1,872,"| "]],[872,872],[874,874]]],[1561857261666,["GJX@GJXAIOU",[[-1,877,"\n"]],[878,878],[877,877]]],[1561857261825,["GJX@GJXAIOU",[[-1,876,"\n"]],[877,877],[876,876]]],[1561857263135,["GJX@GJXAIOU",[[1,876,"|"]],[876,876],[877,877]]],[1561857265540,["GJX@GJXAIOU",[[-1,899,"\n"]],[900,900],[899,899]]],[1561857267770,["GJX@GJXAIOU",[[-1,903,"\n"]],[904,904],[903,903]]],[1561857268099,["GJX@GJXAIOU",[[-1,902,"\n"]],[903,903],[902,902]]],[1561857269062,["GJX@GJXAIOU",[[1,902,"|"]],[902,902],[903,903]]],[1561857271107,["GJX@GJXAIOU",[[-1,906,"\n"]],[907,907],[906,906]]],[1561857271427,["GJX@GJXAIOU",[[-1,905,"\n"]],[906,906],[905,905]]],[1561857272670,["GJX@GJXAIOU",[[1,905," |"]],[905,905],[907,907]]],[1561857283479,["GJX@GJXAIOU",[[1,1206,"··"]],[1206,1206],[1208,1208]]],[1561857284750,["GJX@GJXAIOU",[[-1,1206,"··"]],[1208,1208],[1206,1206]]],[1561857285980,["GJX@GJXAIOU",[[1,1206,"```"]],[1206,1206],[1209,1209]]],[1561857286018,["GJX@GJXAIOU",[[1,1209,"language\n```\n"]],[1209,1209],[1209,1217]]],[1561857288844,["GJX@GJXAIOU",[[-1,1218,"```"]],[1218,1221],[1218,1218]]],[1561857290589,["GJX@GJXAIOU",[[1,1278,"\t\n"]],[1277,1277],[1279,1279]]],[1561857291219,["GJX@GJXAIOU",[[1,1279,"```"]],[1279,1279],[1282,1282]]],[1561857293461,["GJX@GJXAIOU",[[-1,1278,"\t"]],[1278,1279],[1278,1278]]],[1561857297034,["GJX@GJXAIOU",[[-1,1220,"\t"],[-1,1242,"\t"]],[1221,1277],[1220,1275]]],[1561857299869,["GJX@GJXAIOU",[[-1,1219,"\n"]],[1219,1219],[1218,1218]]],[1561857300339,["GJX@GJXAIOU",[[-1,1218,"\n"]],[1218,1218],[1217,1217]]],[1561857303042,["GJX@GJXAIOU",[[-1,1209,"language"]],[1217,1217],[1209,1209]]],[1561857303414,["GJX@GJXAIOU",[[1,1209,"c"]],[1209,1209],[1210,1210]]],[1561857310451,["GJX@GJXAIOU",[[1,1568,"## "]],[1568,1568],[1582,1582]]],[1561857324701,["GJX@GJXAIOU",[[1,1750,"```"]],[1750,1750],[1753,1753]]],[1561857324741,["GJX@GJXAIOU",[[1,1753,"language\n```\n"]],[1753,1753],[1753,1761]]],[1561857326246,["GJX@GJXAIOU",[[-1,1753,"language"],[1,1761,"j"]],[1753,1761],[1754,1754]]],[1561857326679,["GJX@GJXAIOU",[[1,1754,"ava"]],[1754,1754],[1757,1757]]],[1561857326827,["GJX@GJXAIOU",[[1,1758,"\n"]],[1757,1757],[1758,1758]]],[1561857327331,["GJX@GJXAIOU",[[-1,1758,"\n"]],[1758,1758],[1757,1757]]],[1561857328250,["GJX@GJXAIOU",[[-1,1752,"`java"]],[1757,1757],[1752,1752]]],[1561857328497,["GJX@GJXAIOU",[[1,1752,"c"]],[1752,1752],[1753,1753]]],[1561857330360,["GJX@GJXAIOU",[[1,1752,"`"]],[1751,1751],[1752,1752]]],[1561857333166,["GJX@GJXAIOU",[[-1,1755,"```"]],[1755,1758],[1755,1755]]],[1561857335078,["GJX@GJXAIOU",[[1,1834,"\t\n"]],[1833,1833],[1835,1835]]],[1561857335267,["GJX@GJXAIOU",[[-1,1834,"\t"],[1,1835,"\n"]],[1835,1835],[1835,1835]]],[1561857335765,["GJX@GJXAIOU",[[1,1835,"```"]],[1835,1835],[1838,1838]]],[1561857338372,["GJX@GJXAIOU",[[-1,1756,"\n"]],[1756,1756],[1755,1755]]],[1561857338699,["GJX@GJXAIOU",[[-1,1755,"\n"]],[1755,1755],[1754,1754]]],[1561857341035,["GJX@GJXAIOU",[[-1,1832,"\n"]],[1832,1832],[1831,1831]]],[1561857345230,["GJX@GJXAIOU",[[-1,1755,"\t"],[-1,1782,"\t"],[-1,1797,"\t"],[-1,1816,"\t"]],[1756,1831],[1755,1827]]],[1561857356171,["GJX@GJXAIOU",[[1,1641,"### "]],[1641,1641],[1651,1651]]],[1561857358762,["GJX@GJXAIOU",[[1,1836,"\n"]],[1836,1836],[1837,1837]]],[1561857358907,["GJX@GJXAIOU",[[1,1837,"\n"]],[1837,1837],[1838,1838]]],[1561857359602,["GJX@GJXAIOU",[[1,1838,"### "]],[1838,1838],[1848,1848]]],[1561857362527,["GJX@GJXAIOU",[[1,1857,"```"]],[1857,1857],[1860,1860]]],[1561857362573,["GJX@GJXAIOU",[[1,1860,"language\n```\n"]],[1860,1860],[1860,1868]]],[1561857364405,["GJX@GJXAIOU",[[-1,1860,"language"],[1,1868,"c"]],[1860,1868],[1861,1861]]],[1561857367189,["GJX@GJXAIOU",[[-1,1862,"```"]],[1862,1865],[1862,1862]]],[1561857369371,["GJX@GJXAIOU",[[1,1944,"\n"]],[1943,1943],[1944,1944]]],[1561857369827,["GJX@GJXAIOU",[[1,1944,"```"]],[1944,1944],[1947,1947]]],[1561857371746,["GJX@GJXAIOU",[[-1,1863,"\n"]],[1863,1863],[1862,1862]]],[1561857372067,["GJX@GJXAIOU",[[-1,1862,"\n"]],[1862,1862],[1861,1861]]],[1561857375230,["GJX@GJXAIOU",[[1,1969,"```"]],[1969,1969],[1972,1972]]],[1561857375270,["GJX@GJXAIOU",[[1,1972,"language\n```\n"]],[1972,1972],[1972,1980]]],[1561857376341,["GJX@GJXAIOU",[[-1,1972,"language"],[1,1980,"c"]],[1972,1980],[1973,1973]]],[1561857376749,["GJX@GJXAIOU",[[1,1974,"\n"]],[1973,1973],[1974,1974]]],[1561857379956,["GJX@GJXAIOU",[[-1,1975,"```\n"]],[1974,1978],[1974,1974]]],[1561857381451,["GJX@GJXAIOU",[[-1,1975,"\n"]],[1974,1974],[1973,1973]]],[1561857383180,["GJX@GJXAIOU",[[-1,1974,"\n"]],[1974,1974],[1973,1973]]],[1561857385294,["GJX@GJXAIOU",[[1,2053,"\n"]],[2052,2052],[2053,2053]]],[1561857386370,["GJX@GJXAIOU",[[1,2054,"```\n"]],[2053,2053],[2057,2057]]],[1561857398509,["GJX@GJXAIOU",[[-1,2503,"   "]],[2506,2506],[2503,2503]]],[1561857400579,["GJX@GJXAIOU",[[-1,2580,"    "]],[2580,2584],[2580,2580]]],[1561857405824,["GJX@GJXAIOU",[[1,2663,"```"]],[2663,2663],[2666,2666]]],[1561857405861,["GJX@GJXAIOU",[[1,2666,"language\n```\n"]],[2666,2666],[2666,2674]]],[1561857407502,["GJX@GJXAIOU",[[-1,2666,"language"],[1,2674,"c"]],[2666,2674],[2667,2667]]],[1561857409955,["GJX@GJXAIOU",[[-1,2668,"```"]],[2668,2671],[2668,2668]]],[1561857414510,["GJX@GJXAIOU",[[1,2977,"\n"]],[2976,2976],[2977,2977]]],[1561857415051,["GJX@GJXAIOU",[[1,2977,"```"]],[2977,2977],[2980,2980]]],[1561857418099,["GJX@GJXAIOU",[[-1,2669,"\n"]],[2669,2669],[2668,2668]]],[1561857418251,["GJX@GJXAIOU",[[-1,2668,"\n"]],[2668,2668],[2667,2667]]],[1561857421917,["GJX@GJXAIOU",[[1,2979,"### "]],[2979,2979],[2989,2989]]],[1561857424003,["GJX@GJXAIOU",[[1,2979,"\n"]],[2979,2979],[2980,2980]]],[1561857427494,["GJX@GJXAIOU",[[-1,3038,"   "]],[3038,3041],[3038,3038]]],[1561857437926,["GJX@GJXAIOU",[[1,3195,"```"]],[3195,3195],[3198,3198]]],[1561857437963,["GJX@GJXAIOU",[[1,3198,"language\n```\n"]],[3198,3198],[3198,3206]]],[1561857439565,["GJX@GJXAIOU",[[-1,3198,"language"],[1,3206,"c"]],[3198,3206],[3199,3199]]],[1561857439885,["GJX@GJXAIOU",[[1,3200,"\n"]],[3199,3199],[3200,3200]]],[1561857442339,["GJX@GJXAIOU",[[-1,3201,"```\n"]],[3200,3204],[3200,3200]]],[1561857443795,["GJX@GJXAIOU",[[1,3325,"\n"]],[3324,3324],[3325,3325]]],[1561857444115,["GJX@GJXAIOU",[[1,3326,"```\n"]],[3325,3325],[3329,3329]]],[1561857456921,["GJX@GJXAIOU",[[-1,3200,"\n"]],[3200,3200],[3199,3199]]],[1561857467393,["GJX@GJXAIOU",[[1,3436,"```c"]],[3436,3436],[3440,3440]]],[1561857470789,["GJX@GJXAIOU",[[1,3557,"\n"]],[3556,3556],[3557,3557]]],[1561857472780,["GJX@GJXAIOU",[[1,3557,"```"]],[3557,3557],[3560,3560]]],[1561857476387,["GJX@GJXAIOU",[[1,3730,"```c"]],[3730,3730],[3734,3734]]],[1561857483377,["GJX@GJXAIOU",[[1,4407,"\n"]],[4406,4406],[4407,4407]]],[1561857485104,["GJX@GJXAIOU",[[1,4407,"```"]],[4407,4407],[4410,4410]]],[1561857510049,["GJX@GJXAIOU",[[1,4420,"![0_1331730444jYVW]($resource/0_1331730444jYVW.gif)"]],[4420,4420],[4472,4472]]],[1561857517503,["GJX@GJXAIOU",[[1,4621,"```c"]],[4621,4621],[4625,4625]]],[1561857519357,["GJX@GJXAIOU",[[1,4688,"\t\n"]],[4687,4687],[4689,4689]]],[1561857520862,["GJX@GJXAIOU",[[1,4689,"```"]],[4689,4689],[4692,4692]]],[1561857522738,["GJX@GJXAIOU",[[-1,4688,"\t"]],[4689,4689],[4688,4688]]],[1561857528220,["GJX@GJXAIOU",[[1,4740,"```c"]],[4740,4740],[4744,4744]]],[1561857531870,["GJX@GJXAIOU",[[1,4854,"\t\t\n"]],[4853,4853],[4856,4856]]],[1561857532691,["GJX@GJXAIOU",[[-1,4854,"\t\t"]],[4856,4856],[4854,4854]]],[1561857533122,["GJX@GJXAIOU",[[-1,4854,"\n"]],[4854,4854],[4853,4853]]],[1561857534237,["GJX@GJXAIOU",[[1,4854,"\t\t\n"]],[4853,4853],[4856,4856]]],[1561857535150,["GJX@GJXAIOU",[[-1,4854,"\t\t"]],[4856,4856],[4854,4854]]],[1561857538084,["GJX@GJXAIOU",[[1,4854,"```"]],[4854,4854],[4857,4857]]],[1561857543325,["GJX@GJXAIOU",[[1,4937,"```c"]],[4937,4937],[4941,4941]]],[1561857547722,["GJX@GJXAIOU",[[1,5409,"\n"]],[5408,5408],[5409,5409]]],[1561857550325,["GJX@GJXAIOU",[[1,5409,"```"]],[5409,5409],[5412,5412]]],[1561857565934,["GJX@GJXAIOU",[[1,5422,"![0_1331730469qzOa]($resource/0_1331730469qzOa.gif)"]],[5422,5422],[5474,5474]]],[1561857571459,["GJX@GJXAIOU",[[1,5543,"```c"]],[5543,5543],[5547,5547]]],[1561857574246,["GJX@GJXAIOU",[[1,6228,"\n"]],[6227,6227],[6228,6228]]],[1561857575736,["GJX@GJXAIOU",[[1,6228,"```"]],[6228,6228],[6231,6231]]],[1561857590987,["GJX@GJXAIOU",[[1,6241,"![0_1331730482xXMW]($resource/0_1331730482xXMW.gif)"]],[6241,6241],[6293,6293]]],[1561857596245,["GJX@GJXAIOU",[[1,6523,"## "]],[6523,6523],[6537,6537]]],[1561857601002,["GJX@GJXAIOU",[[1,6566,"### "]],[6566,6566],[6579,6579]]],[1561857604997,["GJX@GJXAIOU",[[-1,6654,"      "]],[6654,6660],[6654,6654]]],[1561857608890,["GJX@GJXAIOU",[[-1,6701,"     "]],[6701,6706],[6701,6701]]],[1561857615019,["GJX@GJXAIOU",[[1,6920,"```c"]],[6920,6920],[6924,6924]]],[1561857620402,["GJX@GJXAIOU",[[1,7461,"\n"]],[7460,7460],[7461,7461]]],[1561857622243,["GJX@GJXAIOU",[[1,7461,"```"]],[7461,7461],[7464,7464]]],[1561857637783,["GJX@GJXAIOU",[[1,7474,"![0_1331730495O3xn]($resource/0_1331730495O3xn.gif)"]],[7474,7474],[7526,7526]]],[1561857644410,["GJX@GJXAIOU",[[1,7527,"### "]],[7527,7527],[7540,7540]]],[1561857646954,["GJX@GJXAIOU",[[-1,7587,"    "]],[7586,7590],[7586,7586]]],[1561857649417,["GJX@GJXAIOU",[[-1,7629,"    "]],[7628,7632],[7628,7628]]],[1561857652121,["GJX@GJXAIOU",[[-1,7665," "]],[7666,7666],[7665,7665]]],[1561857660491,["GJX@GJXAIOU",[[-1,7804,"    "]],[7807,7807],[7803,7803]]],[1561857662165,["GJX@GJXAIOU",[[-1,7883,"   "]],[7882,7885],[7882,7882]]],[1561857664466,["GJX@GJXAIOU",[[-1,7951,"     "]],[7950,7955],[7950,7950]]],[1561857666557,["GJX@GJXAIOU",[[-1,8018,"   "]],[8017,8020],[8017,8017]]],[1561857668444,["GJX@GJXAIOU",[[-1,8155,"  "]],[8154,8156],[8154,8154]]],[1561857669652,["GJX@GJXAIOU",[[-1,8183,"    "]],[8182,8186],[8182,8182]]],[1561857670985,["GJX@GJXAIOU",[[-1,8151,"    "]],[8151,8155],[8151,8151]]],[1561857672625,["GJX@GJXAIOU",[[-1,8207," "]],[8207,8207],[8206,8206]]],[1561857674009,["GJX@GJXAIOU",[[-1,8177,"  "]],[8179,8179],[8177,8177]]],[1561857675705,["GJX@GJXAIOU",[[-1,8200,"     "]],[8200,8205],[8200,8200]]],[1561857677879,["GJX@GJXAIOU",[[1,8181,"·"]],[8181,8181],[8182,8182]]],[1561857679106,["GJX@GJXAIOU",[[-1,8181,"·"]],[8182,8182],[8181,8181]]],[1561857679607,["GJX@GJXAIOU",[[1,8181,"`"]],[8181,8181],[8182,8182]]],[1561857680941,["GJX@GJXAIOU",[[1,8199,"`"]],[8199,8199],[8200,8200]]],[1561857681676,["GJX@GJXAIOU",[[1,8224,"`"]],[8224,8224],[8225,8225]]],[1561857683036,["GJX@GJXAIOU",[[1,8207,"`"]],[8207,8207],[8208,8208]]],[1561857684133,["GJX@GJXAIOU",[[1,8158,"`"]],[8158,8158],[8159,8159]]],[1561857685086,["GJX@GJXAIOU",[[1,8176,"`"]],[8176,8176],[8177,8177]]],[1561857688228,["GJX@GJXAIOU",[[-1,8243,"      "]],[8243,8249],[8243,8243]]],[1561857690284,["GJX@GJXAIOU",[[-1,8269,"      "]],[8269,8275],[8269,8269]]],[1561857692620,["GJX@GJXAIOU",[[-1,8292,"      "]],[8292,8298],[8292,8292]]],[1561857695289,["GJX@GJXAIOU",[[-1,8363,"      "]],[8363,8369],[8363,8363]]],[1561857697393,["GJX@GJXAIOU",[[-1,8396,"      "]],[8396,8402],[8396,8396]]],[1561857699932,["GJX@GJXAIOU",[[-1,8423,"      "]],[8423,8429],[8423,8423]]],[1561857702657,["GJX@GJXAIOU",[[-1,8448,"      "]],[8448,8454],[8448,8448]]],[1561857706113,["GJX@GJXAIOU",[[-1,8511,"      "]],[8511,8517],[8511,8511]]],[1561857708500,["GJX@GJXAIOU",[[-1,8545,"      "]],[8545,8551],[8545,8545]]],[1561857713234,["GJX@GJXAIOU",[[1,8511,"* "],[1,8544,"* "],[1,8545,"* "]],[8511,8578],[8513,8584]]],[1561857715707,["GJX@GJXAIOU",[[-1,8546,"* "]],[8546,8548],[8546,8546]]],[1561857716138,["GJX@GJXAIOU",[[-1,8546,"\n"]],[8546,8546],[8545,8545]]],[1561857720410,["GJX@GJXAIOU",[[-1,8599,"       "]],[8599,8606],[8599,8599]]],[1561857720981,["GJX@GJXAIOU",[[1,8599,"`"]],[8599,8599],[8600,8600]]],[1561857722441,["GJX@GJXAIOU",[[1,8646,"`"]],[8646,8646],[8647,8647]]],[1561857726008,["GJX@GJXAIOU",[[1,8670,"```c"]],[8670,8670],[8674,8674]]],[1561857729124,["GJX@GJXAIOU",[[1,9365,"\n"]],[9364,9364],[9365,9365]]],[1561857730643,["GJX@GJXAIOU",[[1,9365,"```"]],[9365,9365],[9368,9368]]],[1561857747044,["GJX@GJXAIOU",[[1,9377,"![0_1331730522tfXT]($resource/0_1331730522tfXT.gif)"]],[9377,9377],[9429,9429]]],[1561857752461,["GJX@GJXAIOU",[[1,9431,"### "]],[9431,9431],[9447,9447]]],[1561857759180,["GJX@GJXAIOU",[[-1,9573,"      "]],[9573,9579],[9573,9573]]],[1561857761674,["GJX@GJXAIOU",[[-1,9650,"      "]],[9650,9656],[9650,9650]]],[1561857763787,["GJX@GJXAIOU",[[-1,9717,"      "]],[9717,9723],[9717,9717]]],[1561857765345,["GJX@GJXAIOU",[[-1,9781,"      "]],[9781,9787],[9781,9781]]],[1561857770684,["GJX@GJXAIOU",[[-1,9892,"       "]],[9892,9899],[9892,9892]]],[1561857774813,["GJX@GJXAIOU",[[1,9970,"```c"]],[9970,9970],[9974,9974]]],[1561857780733,["GJX@GJXAIOU",[[1,10677,"\n"]],[10676,10676],[10677,10677]]],[1561857782308,["GJX@GJXAIOU",[[1,10677,"```"]],[10677,10677],[10680,10680]]],[1561857800679,["GJX@GJXAIOU",[[1,10689,"![0_1331730537uEYH]($resource/0_1331730537uEYH.gif)"]],[10689,10689],[10741,10741]]],[1561857807442,["GJX@GJXAIOU",[[1,10775,"### "]],[10775,10775],[10788,10788]]],[1561857810244,["GJX@GJXAIOU",[[-1,10742,"\n"]],[10742,10742],[10741,10741]]],[1561857818170,["GJX@GJXAIOU",[[1,10998,"```c"]],[10998,10998],[11002,11002]]],[1561857822980,["GJX@GJXAIOU",[[1,11398,"\n"]],[11397,11397],[11398,11398]]],[1561857824545,["GJX@GJXAIOU",[[1,11398,"```"]],[11398,11398],[11401,11401]]]],null,"GJX@GJXAIOU"]]}