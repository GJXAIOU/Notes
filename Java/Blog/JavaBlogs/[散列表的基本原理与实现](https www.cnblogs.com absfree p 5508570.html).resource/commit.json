{"compress":true,"commitItems":[["400149c4-d707-447a-9115-9aa63ed9ff66",1563517269177,"# [散列表的基本原理与实现](https://www.cnblogs.com/absfree/p/5508570.html)\n\n**本篇博文主要介绍散列表（Hash Table）这一常见数据结构的原理与实现。由于个人水平有限，文章中难免存在不准确或是不清晰的地方，希望大家可以指正：）**\n\n# 一、概述 \n\n   符号表是一种用于存储键值对（key-value pair）的数据结构，我们平常经常使用的数组也可以看做是一个特殊的符号表，数组中的“键”即为数组索引，值为相应的数组元素。也就是说，当符号表中所有的键都是较小的整数时，我们可以使用数组来实现符号表，将数组的索引作为键，而索引处的数组元素即为键对应的值，但是这一表示仅限于所有的键都是比较小的整数时，否则可能会使用一个非常大的数组。散列表是对以上策略的一种“升级”，但是它可以支持任意的键而并没有对它们做过多的限定。对于基于散列表实现的符号表，若我们要在其中查找一个键，需要进行以下步骤：\n\n*   首先我们使用**散列函数**将给定键转化为一个“数组的索引”，理想情况下，不同的key会被转为不同的索引，但在实际应用中我们会遇到不同的键转为相同的索引的情况，这种情况叫做**碰撞**。解决碰撞的方法我们后面会具体介绍。\n*   得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。\n\n    以上就是散列表的核心思想，散列表是时空权衡的经典例子。当我们的空间无限大时，我们可以直接使用一个很大的数组来保存键值对，并用key作为数组索引，因为空间不受限，所以我们的键的取值可以无穷大，因此查找任何键都只需进行一次普通的数组访问。反过来，若对查找操作没有任何时间限制，我们就可以直接使用链表来保存所有键值对，这样把空间的使用降到了最低，但查找时只能顺序查找。在实际的应用中，我们的时间和空间都是有限的，所以我们必须在两者之间做出权衡，散列表就在时间和空间的使用上找到了一个很好的平衡点。散列表的一个优势在于我们只需调整散列算法的相应参数而无需对其他部分的代码做任何修改就能够在时间和空间的权衡上做出策略调整。\n\n# 二、散列函数\n\n   介绍散列函数前，我们先来介绍几个散列表的基本概念。在散列表内部，我们使用**桶（****bucket****）**来保存键值对，我们前面所说的数组索引即为桶号，决定了给定的键存于散列表的哪个桶中。散列表所拥有的桶数被称为散列表的**容量（****capacity****）**。\n\n   现在假设我们的散列表中有M个桶，桶号为0到M-1。我们的散列函数的功能就是把任意给定的key转为[0, M-1]上的整数。我们对散列函数有两个基本要求：一是计算时间要短，二是尽可能把键分布在不同的桶中。对于不同类型的键，我们需要使用不同的散列函数，这样才能保证有比较好的散列效果。\n\n我们使用的散列函数应该尽可能满足均匀散列假设，以下对均匀散列假设的定义来自于Sedgewick的《算法》一书：\n\n> （均匀散列假设）我们使用的散列函数能够均匀并独立地将所有的键散布于0到M – 1之间。\n\n    以上定义中有两个关键字，第一个是均匀，意思是我们对每个键计算而得的桶号有M个“候选值”，而均匀性要求这M个值被选中的概率是均等的；第二个关键字是独立，它的意思是，每个桶号被选中与否是相互独立的，与其他桶号是否被选中无关。这样一来，满足均匀性与独立性能够保证键值对在散列表的分布尽可能的均匀，不会出现“许多键值对被散列到同一个桶，而同时许多桶为空”的情况。\n\n    显然，设计一个较好的满足均匀散列假设的散列函数是不容易的，好消息是通常我们无需设计它，因为我们可以直接使用一些基于概率统计的高效的实现，比如Java中许多常用的类都重写了hashCode方法（Object类的hashCode方法默认返回对象的内存地址），用于为该类型对象返回一个hashCode，通常我们用这个hashCode除以桶数M的余数就可以获取一个桶号。下面我们以Java中的一些类为例，来介绍一下针对不同数据类型的散列函数的实现。\n\n## 1\\. String类的hashCode方法\n\n    String类的hashCode方法如下所示\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic int hashCode() { int h = hash; if (h == 0 && value.length > 0) { char val[] = value; for (int i = 0; i < value.length; i++) {\n            h = 31 * h + val[i];\n        }\n        hash = h;\n    } return h;\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    hashCode方法中的value是一个char[]数组，存储中字符串的的每字符。我们可以看到在方法的最开始我们会把hash赋给h，这个hash就表示之前计算的hashCode，这样以来若之前已经计算过这个字符串对象的hashCode，这次我们就无需再计算了，直接返回之前计算过得即可。这种把hashCode缓存的策略只对不可变对象有效，因为不可变对象的hashCode是不会变的。\n\n    根据上面的代码我们可以知道，若h为null，意味着我们是第一次计算hashCode，if语句体中就是hashCode的具体计算方法。假设我们的字符串对象str包含4个字符，ck表示的是字符串中的第k个字符（从0开始计数），那么str的hashCode就等于：31 * (31 * (31 * c0 + c1) + c2) +c3。\n\n## 2\\. 数值类型的hashCode方法\n\n    这里我们以Integer和Double为例，介绍一下数值类型的hashCode方法的一般实现。\n\n    Integer类的hashCode方法如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic int hashCode() { return Integer.hashCode(value);\n} public static int hashCode(int value) { return value;\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    其中value表示Integer对象所包装的整型值，所以Integer类的hashCode方法仅仅是简单的返回了自身的值。\n\n    我们再来看一下Double类的hashCode方法：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n@Override public int hashCode() { return Double.hashCode(value);\n\n} public static int hashCode(double value) { long bits = doubleToLongBits(value); return (int)(bits ^ (bits >>> 32));\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    我们可以看到Double类的hashCode方法首先会将它的值转为long类型，然后返回低32位和高32位的异或的结果作为hashCode。\n\n## 3\\. Date类的hashCode方法\n\n    前面我们介绍的数据类型都可以看做一种数值型（String可以看做一个整型数组），那么对于非数值类型对象的hashCode要怎么计算呢，这里我们以Date类为例简单的介绍一下。Date类的hashCode方法如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic int hashCode() { long ht = this.getTime(); return (int) ht ^ (int) (ht >> 32);\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    我们可以看到，它的hashCode方法的实现非常简单，只是返回了Date对象所封装的时间的低32位和高32位的异或结果。从Date类的hashCode的实现我们可以了解到，对于非数值类型的hashCode的计算，我们需要选取一些能区分各个类实例的实例域来作为计算的因子。比如对于Date类来说，通常具有相同的时间的Date对象我们认为它们相等，因此也就具有相同的hashCode。这里我们需要说明一下，对于等价的两个对象（也就是调用equals方法返回true），它们的hashCode必须相同，而反之则不然。\n\n## 4\\. 由hashCode获取桶号\n\n    前面我们介绍了计算对象hashCode的一些方法，那么我们获取了hashCode之后，如何进一步得到桶号呢？一个直接的办法就是直接拿得到的hashCode除以capacity（桶的数量），然后用所得的余数作为桶号。不过在Java中，hashCode是int型的，而Java中的int型均为有符号，所以我们要是直接使用返回的hashCode的话可能会得到一个负数，显然桶号是不能为负的。所以我们先将返回的hashCode转变为一个非负整数，再用它除以capacity取余数，作为key的对应桶号，具体代码如下：\n\nprivate int hash(K key) { return (x.hashCode() & 0x7fffffff) % M;\n\n} \n\n    现在我们已经知道了如何通过一个键获取桶号，那么接下来我们来介绍使用散列表查找的第二步——处理碰撞。\n\n# 三、使用拉链法处理碰撞\n\n    使用不同的碰撞处理方式，我们便得到了散列表的不同实现。首先我们要介绍的是使用拉链法来处理碰撞的散列表的实现。以这种方式实现的散列表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。这样一来，当桶数为M，散列表中存储的键值对数目为N时，平均每个桶中的链表包含的结点数为N / M。因此，当我们查找一个键时，首先通过散列函数确定它所在的桶，这一步所需时间为O(1)；然后我们依次比较桶中结点的键与给定键，若相等则找到了指定键值对，这一步所需时间为O(N / M)。所以查找操作所需的时间为O(N / M)，而通常我们都能够保证N是M的常数倍，所以散列表的查找操作的时间复杂度为O(1)，同理我们也可以得到插入操作的复杂度也为O(1)。\n\n    理解了以上的描述，实现基于拉链法的散列表也就很容易了，这里简单起见，我们直接使用前面的SeqSearchList作为桶中的链表，参考代码如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class ChainingHashMap<K, V> { private int num; //当前散列表中的键值对总数\n    private int capacity; //桶数\n    private SeqSearchST<K, V>[] st; //链表对象数组\n\n    public ChainingHashMap(int initialCapacity) {\n        capacity = initialCapacity;\n        st = (SeqSearchST<K, V>[]) new Object[capacity]; for (int i = 0; i < capacity; i++) {\n            st[i] = new SeqSearchST<>();\n        }\n    } private int hash(K key) { return (key.hashCode() & 0x7fffffff) % capacity;\n    } public V get(K key) { return st[hash(key)].get(key);\n    } public void put(K key, V value) {\n        st[hash(key)].put(key, value);\n    }\n\n} \n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    在上面的实现中，我们固定了散列表的桶数，当我们明确知道我们要插入的键值对数目最多只能到达桶数的常数倍时，固定桶数是完全可行的。但是若键值对数目会增长到远远大于桶数，我们就需要动态调整桶数的能力。实际上，散列表中的键值对数与桶数的比值叫做负载因子（load factor）。通常负载因子越小，我们进行查找所需时间就越短，而空间的使用就越大；若负载因子较大，则查找时间会变长，但是空间使用会减小。比如，Java标准库中的HashMap就是基于拉链法实现的散列表，它的默认负载因子为0.75。HashMap实现动态调整桶数的方式是基于公式loadFactor = maxSize / capacity，其中maxSize为支持存储的最大键值对数，而loadFactor和capacity（桶数）都会在初始化时由用户指定或是由系统赋予默认值。当HashMap中的键值对的数目达到了maxSize时，就会增大散列表中的桶数。\n\n   以上代码中还用到了SeqSearchST，实际上这就是一个基于链表的符号表实现，支持向其中添加key-value pair，查找指定键时使用的是顺序查找，它的代码如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class SeqSearchST<K, V> { private Node first; private class Node {\n        K key;\n        V val;\n        Node next; public Node(K key, V val, Node next) { this.key = key; this.val = val; this.next = next;\n        }\n    } public V get(K key) { for (Node node = first; node != null; node = node.next) { if (key.equals(node.key)) { return node.val;\n            }\n        } return null;\n    } public void put(K key, V val) { //先查找表中是否已存在相应key\n Node node; for (node = first; node != null; node = node.next) { if (key.equals(node.key)) {\n                node.val = val; return;\n            }\n        } //表中不存在相应key\n        first = new Node(key, val, first);\n    } }\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n# 四、使用线性探测法处理碰撞\n\n## 1\\. 基本原理与实现\n\n    线性探测法是另一种散列表的实现策略的具体方法，这种策略叫做开放定址法。开放定址法的主要思想是：用大小为M的数组保存N个键值对，其中M > N，数组中的空位用于解决碰撞问题。\n\n    线性探测法的主要思想是：当发生碰撞时（一个键被散列到一个已经有键值对的数组位置），我们会检查数组的下一个位置，这个过程被称作线性探测。线性探测可能会产生三种结果：\n\n*   命中：该位置的键与要查找的键相同；\n*   未命中：该位置为空；\n*   该位置的键和被查找的键不同。\n\n    当我们查找某个键时，首先通过散列函数得到一个数组索引后，之后我们就开始检查相应位置的键是否与给定键相同，若不同则继续查找（若到数组末尾也没找到就折回数组开头），直到找到该键或遇到一个空位置。由线性探测的过程我们可以知道，若数组已满的时候我们再向其中插入新键，会陷入无限循环之中。\n\n    理解了以上原理，要实现基于线性探测法的散列表也就不难了。这里我们使用数组keys保存散列表中的键，数组values保存散列表中的值，两个数组同一位置上的元素共同确定一个散列表中的键值对。具体代码如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class LinearProbingHashMap<K, V> { private int num; //散列表中的键值对数目\n    private int capacity; private K[] keys; private V[] values; public LinearProbingHashMap(int capacity) {\n        keys = (K[]) new Object[capacity];\n        values = (V[]) new Object[capacity]; this.capacity = capacity;\n    } private int hash(K key) { return (key.hashCode() & 0x7fffffff) % capacity;\n    } public V get(K key) { int index = hash(key); while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        } return values[index]; //若给定key在散列表中存在会返回相应value，否则这里返回的是null } public void put(K key, V value) { int index = hash(key); while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        } if (keys[index] == null) {\n            keys[index] = key;\n            values[index] = value; return;\n        }\n        values[index] = value;\n        num++;\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n## 2\\. 动态调整数组大小\n\n    在我们上面的实现中，数组的大小为桶数的2倍，不支持动态调整数组大小。而在实际应用中，当负载因子（键值对数与数组大小的比值）接近1时，查找操作的时间复杂度会接近O(n)，而当负载因子为1时，根据我们上面的实现，while循环会变为一个无限循环。显然我们不想让查找操作的复杂度退化至O(n)，更不想陷入无限循环。所以有必要实现动态增长数组来保持查找操作的常数时间复杂度。当键值对总数很小时，若空间比较紧张，可以动态缩小数组，这取决于实际情况。\n\n    要实现动态改变数组大小，只需要在上面的put方法最开始加上一个如下的判断：\n\n    if (num == capacity / 2) {\n        resize(2 * capacity);\n    }\n\n    resize方法的逻辑也很简单：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    private void resize(int newCapacity) {\n        LinearProbingHashMap<K, V> hashmap = new LinearProbingHashMap<>(newCapacity); for (int i = 0; i < capacity; i++) { if (keys[i] != null) {\n                hashmap.put(keys[i], values[i]);\n            }\n        }\n        keys = hashmap.keys;\n        values = hashmap.values;\n        capacity = hashmap.capacity;\n    }\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n    关于负载因子与查找操作的性能的关系，这里贴出《算法》（Sedgewick等）中的一个结论：\n\n> 在一张大小为M并含有N = a*M（a为负载因子）个键的基于线性探测的散列表中，若散列函数满足均匀散列假设，命中和未命中的查找所需的探测次数分别为：\n> \n> ~ 1/2 * (1 + 1/(1-a))和~1/2*(1 + 1/(1-a)^2)\n\n    关于以上结论，我们只需要知道当a约为1/2时，查找命中和未命中所需的探测次数分别为1.5次和2.5次。还有一点就是当a趋近于1时，以上结论中的估计值的精度会下降，不过我们在实际应用中不会让负载因子接近1，为了保持良好的性能，在上面的实现中我们应保持a不超过1/2。",[[1563517214436,["GJX@GJXAIOU",[[-1,15,"(https://www.cnblogs.com/absfree/p/5508570.html)"]],[15,63],[15,15]]],[1563517216546,["GJX@GJXAIOU",[[-1,2,"["]],[3,3],[2,2]]],[1563517217653,["GJX@GJXAIOU",[[-1,13,"]"]],[14,14],[13,13]]],[1563517220051,["GJX@GJXAIOU",[[-1,15,"**本篇博文主要介绍散列表（Hash Table）这一常见数据结构的原理与实现。由于个人水平有限，文章中难免存在不准确或是不清晰的地方，希望大家可以指正：）**"]],[15,95],[15,15]]],[1563517221091,["GJX@GJXAIOU",[[-1,16,"\n"]],[16,16],[15,15]]],[1563517252298,["GJX@GJXAIOU",[[-1,819,"****"]],[819,823],[819,819]]],[1563517254611,["GJX@GJXAIOU",[[-1,825,"****"]],[825,829],[825,825]]],[1563517258283,["GJX@GJXAIOU",[[-1,902,"****"]],[902,906],[902,902]]],[1563517260788,["GJX@GJXAIOU",[[-1,890,"****"]],[890,894],[890,890]]],[1563517269470,["GJX@GJXAIOU",[[-1,22," \n\n   "],[1,28," \n\n   "],[-1,454,"   "],[1,457,"   "],[-1,776,"   "],[1,779,"   "],[1,885," "],[-1,904,"   "],[1,907,"   "],[-1,1153,"   "],[1,1156,"   "],[-1,1336,"   "],[1,1339,"   "],[-1,1589,"   "],[1,1592,"   "],[-1,2004,"   "],[1,2007,"   "],[-1,2201,"   "],[1,2204,"   "],[-1,2396,"   "],[1,2399,"   "],[-1,2449,"   "],[1,2452,"   "],[-1,2766,"   "],[1,2769,"   "],[-1,2833,"   "],[1,2836,"   "],[-1,3227,"   "],[1,3230,"   "],[-1,3328,"   "],[1,3331,"   "],[-1,3704,"   "],[1,3707,"   "],[-1,3987,"   "],[1,3990,"   "],[-1,4315," \n\n   "],[1,4321," \n\n   "],[-1,4388,"   "],[1,4391,"   "],[-1,4784,"   "],[1,4787,"   "],[-1,5552," "],[1,5553," "],[-1,5642,"   "],[1,5645,"   "],[-1,6055,"   "],[1,6058,"   "],[-1,7019,"   "],[1,7022,"   "],[-1,7111,"   "],[1,7114,"   "],[-1,7255,"   "],[1,7258,"   "],[-1,7400,"   "],[1,7403,"   "],[-1,8633,"   "],[1,8636,"   "],[-1,8858,"   "],[1,8861,"   "],[-1,8969,"   "],[1,8972,"   "],[-1,9533,"   "],[1,9536,"   "],[-1,9710,"   "],[1,9713,"   "]],[885,885],[886,886]]],[1563517272375,["GJX@GJXAIOU",[[1,828," "]],[828,828],[829,829]]],[1563517274003,["GJX@GJXAIOU",[[1,815," "]],[815,815],[816,816]]],[1563517281637,["GJX@GJXAIOU",[[-1,1109,"> "]],[1111,1111],[1109,1109]]],[1563517287664,["GJX@GJXAIOU",[[1,1109,"`"]],[1109,1109],[1110,1110]]],[1563517288600,["GJX@GJXAIOU",[[1,1153,"`"]],[1153,1153],[1154,1154]]],[1563517294739,["GJX@GJXAIOU",[[-1,1159," "]],[1159,1159],[1158,1158]]],[1563517295770,["GJX@GJXAIOU",[[-1,1341," "]],[1342,1342],[1341,1341]]],[1563517300843,["GJX@GJXAIOU",[[-1,1567,"\\"]],[1568,1568],[1567,1567]]],[1563517301732,["GJX@GJXAIOU",[[-1,1592," "]],[1593,1593],[1592,1592]]],[1563517312749,["GJX@GJXAIOU",[[1,1616,"`"],[1,1701,"`"]],[1616,1701],[1616,1703]]],[1563517313515,["GJX@GJXAIOU",[[-1,1616,"`"],[-1,1702,"`"]],[1616,1703],[1616,1701]]],[1563517313883,["GJX@GJXAIOU",[[1,1616,"`"],[1,1701,"`"]],[1616,1701],[1616,1703]]],[1563517315046,["GJX@GJXAIOU",[[-1,1616,"`[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")`"]],[1616,1703],[1616,1616]]],[1563517315644,["GJX@GJXAIOU",[[1,1616,"```"]],[1616,1616],[1619,1619]]],[1563517315677,["GJX@GJXAIOU",[[1,1619,"language\n```\n"]],[1619,1619],[1619,1627]]],[1563517324671,["GJX@GJXAIOU",[[-1,1619,"language"],[1,1627,"j"]],[1619,1627],[1620,1620]]],[1563517325100,["GJX@GJXAIOU",[[1,1620,"ava"]],[1620,1620],[1623,1623]]],[1563517325202,["GJX@GJXAIOU",[[1,1624,"\n"]],[1623,1623],[1624,1624]]],[1563517326237,["GJX@GJXAIOU",[[1,1624,"public int hashCode() { int h = hash; if (h == 0 && value.length > 0) { char val[] = value; for (int i = 0; i < value.length; i++) {\n            h = 31 * h + val[i];\n        }\n        hash = h;\n    } return h;\n}"]],[1624,1624],[1835,1835]]],[1563517328695,["GJX@GJXAIOU",[[-1,1624,"public int hashCode() { int h = hash; if (h == 0 && value.length > 0) { char val[] = value; for (int i = 0; i < value.length; i++) {\n            h = 31 * h + val[i];\n        }\n        hash = h;\n    } return h;\n}"]],[1835,1835],[1624,1624]]],[1563517330589,["GJX@GJXAIOU",[[1,1624,"public int hashCode() {\n    int h = hash;\n    if (h == 0 && value.length > 0) {\n        char val[] = value;\n\n        for (int i = 0; i < value.length; i++) {\n            h = 31 * h + val[i];\n        }\n        hash = h;\n    }\n    return h;\n}"]],[1624,1624],[1864,1864]]],[1563517335451,["GJX@GJXAIOU",[[-1,1870,"\npublic int hashCode() { int h = hash; if (h == 0 && value.length > 0) { char val[] = value; for (int i = 0; i < value.length; i++) {\n            h = 31 * h + val[i];\n        }\n        hash = h;\n    } return h;\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n"]],[1869,2170],[1869,1869]]],[1563517340883,["GJX@GJXAIOU",[[-1,1873," "]],[1874,1874],[1873,1873]]],[1563517342115,["GJX@GJXAIOU",[[-1,2069," "]],[2070,2070],[2069,2069]]],[1563517345363,["GJX@GJXAIOU",[[-1,2240,"\\"]],[2241,2241],[2240,2240]]],[1563517346029,["GJX@GJXAIOU",[[-1,2262," "]],[2263,2263],[2262,2262]]],[1563517347291,["GJX@GJXAIOU",[[-1,2314," "]],[2315,2315],[2314,2314]]],[1563517364284,["GJX@GJXAIOU",[[-1,2338,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic int hashCode() { return Integer.hashCode(value);\n} public static int hashCode(int value) { return value;\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n"]],[2337,2626],[2337,2337]]],[1563517365021,["GJX@GJXAIOU",[[1,2337,"```"]],[2337,2337],[2340,2340]]],[1563517365055,["GJX@GJXAIOU",[[1,2340,"language\n```\n"]],[2340,2340],[2340,2348]]],[1563517366031,["GJX@GJXAIOU",[[-1,2340,"language"],[1,2348,"j"]],[2340,2348],[2341,2341]]],[1563517366484,["GJX@GJXAIOU",[[1,2341,"ava"]],[2341,2341],[2344,2344]]],[1563517366686,["GJX@GJXAIOU",[[1,2345,"\n"]],[2344,2344],[2345,2345]]],[1563517370375,["GJX@GJXAIOU",[[1,2345,"public int hashCode() {\n    return Integer.hashCode(value);\n}\n\npublic static int hashCode(int value) {\n    return value;\n}"]],[2345,2345],[2467,2467]]],[1563517375243,["GJX@GJXAIOU",[[-1,2476," "]],[2477,2477],[2476,2476]]],[1563517376436,["GJX@GJXAIOU",[[-1,2542," "]],[2543,2543],[2542,2542]]],[1563517384003,["GJX@GJXAIOU",[[-1,2570,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n@Override public int hashCode() { return Double.hashCode(value);\n\n} public static int hashCode(double value) { long bits = doubleToLongBits(value); return (int)(bits ^ (bits >>> 32));\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n"]],[2570,2931],[2570,2570]]],[1563517384774,["GJX@GJXAIOU",[[1,2570,"```"]],[2570,2570],[2573,2573]]],[1563517384805,["GJX@GJXAIOU",[[1,2573,"language\n```\n"]],[2573,2573],[2573,2581]]],[1563517385766,["GJX@GJXAIOU",[[-1,2573,"language"],[1,2581,"j"]],[2573,2581],[2574,2574]]],[1563517386327,["GJX@GJXAIOU",[[1,2574,"ava"]],[2574,2574],[2577,2577]]],[1563517386477,["GJX@GJXAIOU",[[1,2578,"\n"]],[2577,2577],[2578,2578]]],[1563517387686,["GJX@GJXAIOU",[[1,2578,"@Override\n\npublic int hashCode() {\n\n    return Double.hashCode(value);\n\n}\n\npublic static int hashCode(double value) {\n\n    long bits = doubleToLongBits(value);\n\n    return (int)(bits ^ (bits >>> 32));\n\n}"]],[2578,2578],[2781,2781]]],[1563517390966,["GJX@GJXAIOU",[[-1,2790," "]],[2791,2791],[2790,2790]]],[1563517392483,["GJX@GJXAIOU",[[-1,2866,"\\"]],[2867,2867],[2866,2866]]],[1563517393244,["GJX@GJXAIOU",[[-1,2889," "]],[2890,2890],[2889,2889]]],[1563517401621,["GJX@GJXAIOU",[[-1,2997,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic int hashCode() { long ht = this.getTime(); return (int) ht ^ (int) (ht >> 32);\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[2997,3259],[2997,2997]]],[1563517402213,["GJX@GJXAIOU",[[1,2997,"```"]],[2997,2997],[3000,3000]]],[1563517402245,["GJX@GJXAIOU",[[1,3000,"language\n```\n"]],[3000,3000],[3000,3008]]],[1563517403117,["GJX@GJXAIOU",[[-1,3000,"language"],[1,3008,"j"]],[3000,3008],[3001,3001]]],[1563517403524,["GJX@GJXAIOU",[[1,3001,"ava"]],[3001,3001],[3004,3004]]],[1563517403685,["GJX@GJXAIOU",[[1,3005,"\n"]],[3004,3004],[3005,3005]]],[1563517404685,["GJX@GJXAIOU",[[1,3005,"public int hashCode() {\n\n    long ht = this.getTime();\n\n    return (int) ht ^ (int) (ht >> 32);\n\n}"]],[3005,3005],[3103,3103]]],[1563517407997,["GJX@GJXAIOU",[[-1,3113," "]],[3114,3114],[3113,3113]]],[1563517412420,["GJX@GJXAIOU",[[-1,3374,"\\"]],[3375,3375],[3374,3374]]],[1563517413364,["GJX@GJXAIOU",[[-1,3394," "]],[3395,3395],[3394,3394]]],[1563517426595,["GJX@GJXAIOU",[[-1,3650,"private int hash(K key) { return (x.hashCode() & 0x7fffffff) % M;\n\n} \n"]],[3650,3720],[3650,3650]]],[1563517427230,["GJX@GJXAIOU",[[1,3650,"```"]],[3650,3650],[3653,3653]]],[1563517427262,["GJX@GJXAIOU",[[1,3653,"language\n```\n"]],[3653,3653],[3653,3661]]],[1563517428111,["GJX@GJXAIOU",[[-1,3653,"language"],[1,3661,"j"]],[3653,3661],[3654,3654]]],[1563517428564,["GJX@GJXAIOU",[[1,3654,"ava"]],[3654,3654],[3657,3657]]],[1563517428749,["GJX@GJXAIOU",[[1,3658,"\n"]],[3657,3657],[3658,3658]]],[1563517429811,["GJX@GJXAIOU",[[1,3658,"private int hash(K key) { return (x.hashCode() & 0x7fffffff) % M;\n\n}"]],[3658,3658],[3726,3726]]],[1563517434883,["GJX@GJXAIOU",[[-1,3658,"private int hash(K key) { return (x.hashCode() & 0x7fffffff) % M;\n\n}"]],[3726,3726],[3658,3658]]],[1563517438228,["GJX@GJXAIOU",[[1,3658,"private int hash(K key) {\n\n    return (x.hashCode() & 0x7fffffff) % M;\n\n} "]],[3658,3658],[3732,3732]]],[1563517440781,["GJX@GJXAIOU",[[-1,3684,"\n"]],[3684,3684],[3683,3683]]],[1563517453499,["GJX@GJXAIOU",[[-1,3728,"\n"]],[3728,3728],[3727,3727]]],[1563517463315,["GJX@GJXAIOU",[[-1,3649,"\n"]],[3649,3649],[3648,3648]]],[1563517465476,["GJX@GJXAIOU",[[-1,3738," "]],[3739,3739],[3738,3738]]],[1563517474859,["GJX@GJXAIOU",[[-1,3807," "]],[3808,3808],[3807,3807]]],[1563517476771,["GJX@GJXAIOU",[[-1,4202," "]],[4203,4203],[4202,4202]]],[1563517487804,["GJX@GJXAIOU",[[-1,4275,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class ChainingHashMap<K, V> { private int num; //当前散列表中的键值对总数\n    private int capacity; //桶数\n    private SeqSearchST<K, V>[] st; //链表对象数组\n\n    public ChainingHashMap(int initialCapacity) {\n        capacity = initialCapacity;\n        st = (SeqSearchST<K, V>[]) new Object[capacity]; for (int i = 0; i < capacity; i++) {\n            st[i] = new SeqSearchST<>();\n        }\n    } private int hash(K key) { return (key.hashCode() & 0x7fffffff) % capacity;\n    } public V get(K key) { return st[hash(key)].get(key);\n    } public void put(K key, V value) {\n        st[hash(key)].put(key, value);\n    }\n\n} \n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[4275,5054],[4275,4275]]],[1563517488878,["GJX@GJXAIOU",[[1,4275,"```"]],[4275,4275],[4278,4278]]],[1563517488910,["GJX@GJXAIOU",[[1,4278,"language\n```\n"]],[4278,4278],[4278,4286]]],[1563517489901,["GJX@GJXAIOU",[[-1,4278,"language"],[1,4286,"j"]],[4278,4286],[4279,4279]]],[1563517490414,["GJX@GJXAIOU",[[1,4279,"ava"]],[4279,4279],[4282,4282]]],[1563517490621,["GJX@GJXAIOU",[[1,4283,"\n"]],[4282,4282],[4283,4283]]],[1563518554150,["GJX@GJXAIOU",[[1,4283,"public class ChainingHashMap<K, V>  {\n    private int num; //当前散列表中的键值对总数\n    private int capacity; //桶数\n    private SeqSearchST<K, V>[] st; //链表对象数组\n\n    public ChainingHashMap(int initialCapacity) {\n        capacity = initialCapacity;\n        st = (SeqSearchST<K, V>[]) new Object[capacity];\n        for (int i = 0; i < capacity; i++) {\n            st[i] = new SeqSearchST<>();\n        }\n    }\n    \n    private int hash(K key) {\n        return (key.hashCode() & 0x7fffffff) % capacity;\n    }\n\n    \n    public V get(K key) {\n        return st[hash(key)].get(key);\n    }\n\n    public void put(K key, V value) {\n        st[hash(key)].put(key, value);\n    }\n\n}"]],[4283,4283],[4940,4940]]],[1563518557508,["GJX@GJXAIOU",[[-1,4950," "]],[4951,4951],[4950,4950]]],[1563518568931,["GJX@GJXAIOU",[[-1,5448,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class SeqSearchST<K, V> { private Node first; private class Node {\n        K key;\n        V val;\n        Node next; public Node(K key, V val, Node next) { this.key = key; this.val = val; this.next = next;\n        }\n    } public V get(K key) { for (Node node = first; node != null; node = node.next) { if (key.equals(node.key)) { return node.val;\n            }\n        } return null;\n    } public void put(K key, V val) { //先查找表中是否已存在相应key\n Node node; for (node = first; node != null; node = node.next) { if (key.equals(node.key)) {\n                node.val = val; return;\n            }\n        } //表中不存在相应key\n        first = new Node(key, val, first);\n    } }\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[5448,6288],[5448,5448]]],[1563518572710,["GJX@GJXAIOU",[[1,5448,"```"]],[5448,5448],[5451,5451]]],[1563518572743,["GJX@GJXAIOU",[[1,5451,"language\n```\n"]],[5451,5451],[5451,5459]]],[1563518573640,["GJX@GJXAIOU",[[-1,5451,"language"],[1,5459,"j"]],[5451,5459],[5452,5452]]],[1563518574261,["GJX@GJXAIOU",[[1,5452,"ava"]],[5452,5452],[5455,5455]]],[1563518574310,["GJX@GJXAIOU",[[1,5456,"\n"]],[5455,5455],[5456,5456]]],[1563518575707,["GJX@GJXAIOU",[[1,5456,"public class SeqSearchST<K, V> {\n    private Node first;\n\n    private class Node {\n        K key;\n        V val;\n        Node next;\n        public Node(K key, V val, Node next) {\n            this.key = key;\n            this.val = val;\n            this.next = next;\n        }\n    }\n\n    public V get(K key) {\n        for (Node node = first; node != null; node = node.next) {\n            if (key.equals(node.key)) {\n                return node.val;\n            }\n        }\n        return null;\n    }\n\n    public void put(K key, V val) {\n        //先查找表中是否已存在相应key\n        Node node;\n        for (node = first; node != null; node = node.next) {\n            if (key.equals(node.key)) {\n                node.val = val;\n                return;\n            }\n        }\n        //表中不存在相应key\n        first = new Node(key, val, first);\n    }\n\n}"]],[5456,5456],[6289,6289]]],[1563518580588,["GJX@GJXAIOU",[[-1,6317,"\\"]],[6318,6318],[6317,6317]]],[1563518583611,["GJX@GJXAIOU",[[-1,6331," "]],[6332,6332],[6331,6331]]],[1563518584612,["GJX@GJXAIOU",[[-1,6422," "]],[6423,6423],[6422,6422]]],[1563518587595,["GJX@GJXAIOU",[[-1,6565," "]],[6566,6566],[6565,6565]]],[1563518590052,["GJX@GJXAIOU",[[-1,6709," "]],[6710,6710],[6709,6709]]],[1563518600724,["GJX@GJXAIOU",[[-1,6811,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npublic class LinearProbingHashMap<K, V> { private int num; //散列表中的键值对数目\n    private int capacity; private K[] keys; private V[] values; public LinearProbingHashMap(int capacity) {\n        keys = (K[]) new Object[capacity];\n        values = (V[]) new Object[capacity]; this.capacity = capacity;\n    } private int hash(K key) { return (key.hashCode() & 0x7fffffff) % capacity;\n    } public V get(K key) { int index = hash(key); while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        } return values[index]; //若给定key在散列表中存在会返回相应value，否则这里返回的是null } public void put(K key, V value) { int index = hash(key); while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        } if (keys[index] == null) {\n            keys[index] = key;\n            values[index] = value; return;\n        }\n        values[index] = value;\n        num++;\n    }\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[6811,7919],[6811,6811]]],[1563518601262,["GJX@GJXAIOU",[[1,6811,"```"]],[6811,6811],[6814,6814]]],[1563518601294,["GJX@GJXAIOU",[[1,6814,"language\n```\n"]],[6814,6814],[6814,6822]]],[1563518602344,["GJX@GJXAIOU",[[-1,6814,"language"],[1,6822,"j"]],[6814,6822],[6815,6815]]],[1563518602822,["GJX@GJXAIOU",[[1,6815,"ava"]],[6815,6815],[6818,6818]]],[1563518602998,["GJX@GJXAIOU",[[1,6819,"\n"]],[6818,6818],[6819,6819]]],[1563518603940,["GJX@GJXAIOU",[[1,6819,"public class LinearProbingHashMap<K, V> {\n    private int num; //散列表中的键值对数目\n    private int capacity; \n    private K[] keys;\n    private V[] values;\n\n    public LinearProbingHashMap(int capacity) {\n        keys = (K[]) new Object[capacity];\n        values = (V[]) new Object[capacity];\n        this.capacity = capacity;\n    }\n\n    private int hash(K key) {\n        return (key.hashCode() & 0x7fffffff) % capacity;\n    }\n\n    public V get(K key) {\n        int index = hash(key);\n        while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        }\n        return values[index]; //若给定key在散列表中存在会返回相应value，否则这里返回的是null\n    }\n\n    public void put(K key, V value) {\n        int index = hash(key);\n        while (keys[index] != null && !key.equals(keys[index])) {\n            index = (index + 1) % capacity;\n        }\n        if (keys[index] == null) {\n            keys[index] = key;\n            values[index] = value;\n            return;\n        }\n        values[index] = value;\n        num++;\n    }\n}"]],[6819,6819],[7866,7866]]],[1563518607316,["GJX@GJXAIOU",[[-1,7877,"\\"]],[7878,7878],[7877,7877]]],[1563518610260,["GJX@GJXAIOU",[[-1,7892," "]],[7893,7893],[7892,7892]]],[1563518611235,["GJX@GJXAIOU",[[-1,8116," "]],[8117,8117],[8116,8116]]],[1563518614204,["GJX@GJXAIOU",[[-1,8158," "]],[8159,8159],[8158,8158]]],[1563518617007,["GJX@GJXAIOU",[[1,8154,"``"]],[8154,8154],[8156,8156]]],[1563518618735,["GJX@GJXAIOU",[[1,8223,"``"]],[8223,8223],[8225,8225]]],[1563518619671,["GJX@GJXAIOU",[[1,8156,"`"]],[8156,8156],[8157,8157]]],[1563518619702,["GJX@GJXAIOU",[[1,8157,"language\n```\n"]],[8157,8157],[8157,8165]]],[1563518621725,["GJX@GJXAIOU",[[1,8239,"`"]],[8239,8239],[8240,8240]]],[1563518621756,["GJX@GJXAIOU",[[1,8240,"language\n```\n"]],[8240,8240],[8240,8248]]],[1563518624046,["GJX@GJXAIOU",[[-1,8166,"```"]],[8166,8169],[8166,8166]]],[1563518625670,["GJX@GJXAIOU",[[-1,8234,"```language"]],[8234,8245],[8234,8234]]],[1563518626740,["GJX@GJXAIOU",[[-1,8167,"\n"]],[8167,8167],[8166,8166]]],[1563518627100,["GJX@GJXAIOU",[[-1,8166,"\n"]],[8166,8166],[8165,8165]]],[1563518629237,["GJX@GJXAIOU",[[-1,8157,"language"],[1,8165,"j"]],[8157,8165],[8158,8158]]],[1563518629623,["GJX@GJXAIOU",[[1,8158,"ava"]],[8158,8158],[8161,8161]]],[1563518634030,["GJX@GJXAIOU",[[-1,8228,"\n"]],[8228,8228],[8227,8227]]],[1563518638452,["GJX@GJXAIOU",[[-1,8255,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[8255,8340],[8255,8255]]],[1563518639332,["GJX@GJXAIOU",[[-1,8236," "]],[8237,8237],[8236,8236]]],[1563518640564,["GJX@GJXAIOU",[[-1,8255,"\n"]],[8255,8255],[8254,8254]]],[1563518642790,["GJX@GJXAIOU",[[1,8254,"```"]],[8254,8254],[8257,8257]]],[1563518642822,["GJX@GJXAIOU",[[1,8257,"language\n```\n"]],[8257,8257],[8257,8265]]],[1563518644173,["GJX@GJXAIOU",[[-1,8257,"language"],[1,8265,"j"]],[8257,8265],[8258,8258]]],[1563518644510,["GJX@GJXAIOU",[[1,8258,"ava"]],[8258,8258],[8261,8261]]],[1563518646901,["GJX@GJXAIOU",[[-1,8262,"```"]],[8262,8265],[8262,8262]]],[1563518648670,["GJX@GJXAIOU",[[-1,8263,"\n"]],[8263,8263],[8262,8262]]],[1563518649092,["GJX@GJXAIOU",[[-1,8262,"\n"]],[8262,8262],[8261,8261]]],[1563518652835,["GJX@GJXAIOU",[[-1,8630,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[8630,8715],[8630,8630]]],[1563518654100,["GJX@GJXAIOU",[[1,8630,"```"]],[8630,8630],[8633,8633]]],[1563518655868,["GJX@GJXAIOU",[[-1,8629,"\n"]],[8629,8629],[8628,8628]]],[1563518664900,["GJX@GJXAIOU",[[-1,8265," "],[1,8390,"\n       "],[1,8427,"\n           "],[-1,8524,""],[1,8536," "]],[8265,8628],[8648,8648]]],[1563518670971,["GJX@GJXAIOU",[[-1,8657," "]],[8658,8658],[8657,8657]]],[1563518674244,["GJX@GJXAIOU",[[-1,8704,"> "]],[8706,8706],[8704,8704]]],[1563518675612,["GJX@GJXAIOU",[[-1,8779,"> "]],[8781,8781],[8779,8779]]],[1563518676694,["GJX@GJXAIOU",[[-1,8780,">"]],[8781,8781],[8780,8780]]],[1563518678925,["GJX@GJXAIOU",[[-1,8779,"\n"]],[8780,8780],[8779,8779]]],[1563518685628,["GJX@GJXAIOU",[[-1,8827," "]],[8828,8828],[8827,8827]]]],null,"GJX@GJXAIOU"]]}