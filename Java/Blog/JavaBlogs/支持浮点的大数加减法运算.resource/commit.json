{"compress":true,"commitItems":[["7b7c70e7-e5d3-4278-8322-42532c86e56a",1566090189041,"## 支持浮点的大数加减法运算\n\n原创： 孙宇硕 [Java杂记](javascript:void(0);) _今天_\n\n### 什么是大数运算？\n\n> 大数运算，顾名思义就是很大数值的数进行一系列的计算。我们知道，在数学中数值的大小是没有上限的，但是在计算机中由于字长的限制，在实际的应用中进行大量的数据处理时，会发现参与运算的数会超过计算机的基本数据类型的表示范围。由于编程语言提供的基本数据类型表示的数值范围有限，不能满足较大规模的高精度数值计算，因此需要利用其他方法实现高精度数值的计算，于是产生了大数运算。大数运算主要有加、减、乘三种方法。——（概念引自百度百科）\n\n* * *\n\n### 为何要支持浮点类型？\n\n> 既然要实现的是高精度的大数计算，那就不能止步于整型大数，计算机中的浮点数用以近似的表示任意实数，如果脱离基本数据类型与相关的计算并模拟人脑对两个任意数的计算过程，是不是就可以不被字节长度限制并保证精度呢。\n\n* * *\n\n### 如何表示实数？\n\n> 脱离了基本数据类型，最接近的表示方式就是用字符串。String的基本结构是一个char[],我们知道数组的长度是int类型的，所以理论上一个String可以存放一个Integer.MAX_VALUE(2147483647)位的数字,利用数组连续性，将大数每一位上的数字单独取出，然后再对每一位做单独的运算即可。\n\n* * *\n\n**由于对浮点类型的支持，实现难度成倍增加，此次仅实现加法与减法，实现逻辑仅模拟大脑处理过程，具体算法未做过多优化。**\n\n* * *\n\n### 如何处理字符串？\n\n1.  `String str1 =  \"123.45\";`\n\n2.  `String str2 =  \"234.567\";`\n\n我们知道整数部分与小数部分的计算规则是不同的，所以对于每一个表示实数的字符串，应该将其整数部分与小数部分剥离开来，然后分别进行计算。\n\n定义字符串处理类：\n\n1.  `private  static  class  SplitResult{`\n\n2.  `private  int[]`\n\n3.  `intArray,`\n\n4.  `decimalArray;`\n\n6.  `public  SplitResult(String num)  {`\n\n7.  `//分离两个数字的整数小数部分  String.splt(\".\")无法如期切分，此处使用转义字符`\n\n8.  `String[] split = num.split(\"\\\\.\");`\n\n10.  `//取出数字的整数和小数部分`\n\n11.  `String intString = split[0];`\n\n12.  `String decimalString = split[1];`\n\n14.  `//转化为int数组`\n\n15.  `this.intArray = stringToArray(intString);`\n\n16.  `this.decimalArray = stringToArray(decimalString);`\n\n18.  `}`\n\n19.  `}`\n\n小数部分计算结果接收类：\n\n1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`\n\n* * *\n\n### 加法\n\n1.  `private  static  void add(String num1,  String num2)  {`\n\n2.  `//处理字符串`\n\n3.  `SplitResult splitResult1 =  new  SplitResult(num1);`\n\n4.  `SplitResult splitResult2 =  new  SplitResult(num2);`\n\n6.  `//计算整数部分`\n\n7.  `int[] intResult = addInt(splitResult1.intArray, splitResult2.intArray);`\n\n8.  `//计算小数部分`\n\n9.  `DecimalResult decimalResult = addDecimal(splitResult1.decimalArray, splitResult2.decimalArray);`\n\n10.  `//若小数部分有进位，则给整数再加一`\n\n11.  `if  (decimalResult.flag)  {`\n\n12.  `addInt(intResult,  1);`\n\n13.  `}`\n\n14.  `StringBuilder stringBuilder =  new  StringBuilder();`\n\n15.  `//结果拼接`\n\n16.  `append(stringBuilder, intResult, decimalResult.result);`\n\n18.  `}`\n\n##### 整数部分相加\n\n1.  `public  static  int[] addInt(int[] firstIntArray,  int... secondIntArray)  {`\n\n2.  `int numLength =  0;  //短数组长度`\n\n3.  `int[] shortArray =  null;`\n\n4.  `int totalLength =  0;  //长数组长度`\n\n5.  `int[] longArray =  null;`\n\n6.  `boolean carry =  false;  //是否进位`\n\n7.  `int multNum =  1;  //进一`\n\n8.  `if  (firstIntArray.length < secondIntArray.length)  {`\n\n9.  `numLength = firstIntArray.length;`\n\n10.  `totalLength = secondIntArray.length;`\n\n11.  `shortArray = firstIntArray;`\n\n12.  `longArray = secondIntArray;`\n\n13.  `}  else  {`\n\n14.  `numLength = secondIntArray.length;`\n\n15.  `totalLength = firstIntArray.length;`\n\n16.  `shortArray = secondIntArray;`\n\n17.  `longArray = firstIntArray;`\n\n18.  `}`\n\n19.  `//从数组末位开始，即数组右对齐，短数组遍历结束则跳出循环`\n\n20.  `for  (int i = numLength -  1, j = totalLength -  1; i >=  0; i--, j--)  {`\n\n21.  `carry = isCarry(shortArray, longArray, carry, multNum, i, j);`\n\n22.  `//若最后一个仍需进位`\n\n23.  `if  (i ==  0  && carry)  {`\n\n24.  `while  (j >=  0){`\n\n25.  `//并且长数组也走到尽头，数组扩容并将首位置1后直接跳出循环`\n\n26.  `if  (j ==  0){`\n\n27.  `longArray = expansion(longArray);`\n\n28.  `longArray[0]  =  1;`\n\n29.  `return longArray;`\n\n30.  `}`\n\n31.  `//否则对下一位数进行加一`\n\n32.  `int pre =  ++longArray[j -  1];`\n\n33.  `//若大于9则表示循环仍需进行，对下一位继续加一`\n\n34.  `if  (pre >  9)  {`\n\n35.  `longArray[j -  1]  = pre %  10;`\n\n36.  `}  else  {`\n\n37.  `//否则结束`\n\n38.  `longArray[j -  1]  = pre;`\n\n39.  `break;`\n\n40.  `}`\n\n41.  `j--;`\n\n42.  `}`\n\n44.  `}`\n\n46.  `}`\n\n47.  `return longArray;`\n\n48.  `}`\n\n##### 小数部分相加\n\n1.  `public  static  DecimalResult addDecimal(int[] firstDecimalArray,  int[] secondDecimalArray)  {`\n\n2.  `int numLength =  0;  //短数组长度`\n\n3.  `int[] shortArray =  null;`\n\n4.  `int[] longArray =  null;`\n\n5.  `boolean carry =  false;  //是否进位`\n\n6.  `int multNum =  1;  //进一`\n\n7.  `if  (firstDecimalArray.length < secondDecimalArray.length)  {`\n\n8.  `numLength = firstDecimalArray.length;`\n\n9.  `shortArray = firstDecimalArray;`\n\n10.  `longArray = secondDecimalArray;`\n\n11.  `}  else  {`\n\n12.  `numLength = secondDecimalArray.length;`\n\n13.  `shortArray = secondDecimalArray;`\n\n14.  `longArray = firstDecimalArray;`\n\n15.  `}`\n\n16.  `//小数部分计算较为简单，两个数组左对齐，直接从相同的下标开始即可`\n\n17.  `for  (int i = numLength -  1; i >=  0; i--)  {`\n\n18.  `carry = isCarry(shortArray, longArray, carry, multNum, i, i);`\n\n19.  `}`\n\n20.  `return  new  DecimalResult(longArray, carry);`\n\n22.  `}`\n\n##### 对相应位置的数值进行计算，并返回进位结果\n\n1.  `private  static  boolean isCarry(int[] shortArray,  int[] longArray,  boolean carry,  int multNum,  int i,  int j)  {`\n\n2.  `int num = shortArray[i]  + longArray[j];  //直接相加`\n\n3.  `//若上一次计算有进位，则再加一，并将标识位置为false`\n\n4.  `if  (carry)  {`\n\n5.  `num += multNum;`\n\n6.  `carry =  false;`\n\n7.  `}`\n\n8.  `//判断本次计算结果是否需要再次进位`\n\n9.  `if  (num >  9)  {`\n\n10.  `carry =  true;`\n\n11.  `num = num %  10;`\n\n12.  `}`\n\n13.  `longArray[j]  = num;  //使用长数组接收每次的计算结果`\n\n14.  `return carry;`\n\n15.  `}`\n\n##### 将数组扩充一单位长度，并右对齐\n\n1.  `public  static  int[] expansion(int[] src)  {`\n\n2.  `int[] newArray =  new  int[src.length +  1];`\n\n3.  `System.arraycopy(src,  0, newArray,  1, src.length);`\n\n4.  `return newArray;`\n\n5.  `}`\n\n##### 计算结果拼接\n\n1.  `private  static  void append(StringBuilder stringBuilder,  int[] intArray,int[] decimalArray)  {`\n\n2.  `for  (int i =  0; i < intArray.length; i++)  {`\n\n3.  `stringBuilder.append(intArray[i]);`\n\n4.  `}`\n\n5.  `stringBuilder.append(\".\");`\n\n6.  `for  (int i =  0; i < decimalArray.length; i++)  {`\n\n7.  `stringBuilder.append(decimalArray[i]);`\n\n8.  `}`\n\n10.  `System.out.println(stringBuilder.toString());`\n\n11.  `}`\n\n* * *\n\n### 减法\n\n减法处理较为复杂，可分为四种情况\n\n|   | num1 | num2 |\n| --- | --- | --- |\n| 整数部分 | 大于 | 小于 |\n| 小数部分 | 大于 | 小于 |\n\n整数部分可以通过交换参数的数值保证num1的整数部分始终大于num2，然后根据情况加上符号即可，\n\n##### 总流程\n\n1.  `private  static  void minus(String num1,  String num2)  {`\n\n2.  `//处理字符串`\n\n3.  `SplitResult splitResult1 =  new  SplitResult(num1);`\n\n4.  `SplitResult splitResult2 =  new  SplitResult(num2);`\n\n5.  `//初始化结果集`\n\n6.  `StringBuilder stringBuilder =  new  StringBuilder();`\n\n7.  `int[] intArray =  null;`\n\n8.  `DecimalResult decimalResult =  null;`\n\n9.  `//首先对两个实数的整数部分进行大小对比`\n\n10.  `switch  (compare(splitResult1.intArray,splitResult2.intArray)){`\n\n11.  `case  1://num1>num2`\n\n12.  `intArray = subtractionInt(splitResult1.intArray, splitResult2.intArray);`\n\n13.  `decimalResult = borrowSubtraction(splitResult1.decimalArray, splitResult2.decimalArray);`\n\n14.  `break;`\n\n15.  `case  -1:  //num1 < num2 给结果先拼接一个负号，注意整数部分交换，小数部分也要跟着交换。`\n\n16.  `intArray = subtractionInt(splitResult2.intArray, splitResult1.intArray);`\n\n17.  `decimalResult = borrowSubtraction(splitResult2.decimalArray, splitResult1.decimalArray);`\n\n18.  `stringBuilder.append(\"-\");`\n\n19.  `break;`\n\n20.  `case  0://若两个实数的整数部分相等，则给整数数组直接初始化为0。`\n\n21.  `intArray =  new  int[]{0};`\n\n22.  `int[] newArray ;  //由于小数部分左对齐，新建用于给短数组末位补零，然后使用整数减法函数做计算`\n\n23.  `if  (splitResult1.decimalArray.length > splitResult2.decimalArray.length){`\n\n24.  `newArray =  new  int[splitResult1.decimalArray.length];`\n\n25.  `System.arraycopy(splitResult2.decimalArray,0,newArray,0,splitResult2.decimalArray.length);`\n\n26.  `splitResult2.decimalArray = newArray;`\n\n27.  `}else  {`\n\n28.  `newArray =  new  int[splitResult2.decimalArray.length];`\n\n29.  `System.arraycopy(splitResult1.decimalArray,0,newArray,0,splitResult1.decimalArray.length);`\n\n30.  `splitResult1.decimalArray = newArray;`\n\n31.  `}`\n\n32.  `//再次判断两个小数部分数值的大小`\n\n33.  `switch(compare(splitResult1.decimalArray,splitResult2.decimalArray)){`\n\n34.  `//逻辑同上`\n\n35.  `case  1:`\n\n36.  `decimalResult =  new  DecimalResult(subtractionInt(splitResult1.decimalArray, splitResult2.decimalArray),false);`\n\n37.  `break;`\n\n38.  `case  -1:`\n\n39.  `stringBuilder.append(\"-\");`\n\n40.  `decimalResult =  new  DecimalResult(subtractionInt(splitResult2.decimalArray, splitResult1.decimalArray),false);`\n\n41.  `break;`\n\n42.  `case  0:`\n\n43.  `decimalResult =  new  DecimalResult(0,false);//如果小数部分也相等则直接置为0`\n\n44.  `break;`\n\n45.  `}`\n\n46.  `break;`\n\n47.  `}`\n\n49.  `if  (decimalResult.flag)  {`\n\n50.  `subtractionInt(intArray,  new  int[]{1});`\n\n51.  `}`\n\n52.  `append(stringBuilder, intArray, decimalResult.result);`\n\n54.  `}`\n\n##### 判断大小\n\n> 这是我之前用于比较大小的方法，10是进制，将两个数组的int值求出来，后来发现会有溢出，所以既然是大数运算就要避免基本类型的使用\n\n1.  `private  static  int getInt(int[] array)  {`\n\n2.  `int num =  0;`\n\n3.  `for  (int i =  0; i < array.length; i++)  {`\n\n4.  `num *=  10;`\n\n5.  `num -= array[i];`\n\n6.  `}`\n\n7.  `return  -num;`\n\n8.  `}`\n\n> **目前采用的比较大小的方法，不用做任何计算并且时间复杂度为O(n)：大于返回1，小于返回-1，相等返回0**\n\n1.  `private  static  int compare(int[] array1,  int[] array2)  {`\n\n2.  `int result =  0;`\n\n3.  `if  (array1.length > array2.length){`\n\n4.  `result =  1;`\n\n5.  `}else  if  (array1.length == array2.length){`\n\n6.  `for  (int i =  0; i < array1.length; i++)  {`\n\n7.  `int a = array1[i];`\n\n8.  `int b = array2[i];`\n\n9.  `if  (a == b)  continue;`\n\n10.  `if  (a > b){`\n\n11.  `result =  1;`\n\n12.  `break;`\n\n13.  `}else  {`\n\n14.  `result =  -1;`\n\n15.  `break;`\n\n16.  `}`\n\n17.  `}`\n\n19.  `}else  {`\n\n20.  `result =  -1;`\n\n21.  `}`\n\n22.  `return result;`\n\n23.  `}`\n\n##### 整数部分相减\n\n1.  `private  static  int[] subtractionInt(int[] bigNumArray,  int[] littleNumArray)  {//保证大数减小数`\n\n2.  `boolean borrow =  false;  //是否借位运算`\n\n3.  `//依旧是右对齐，下标左移`\n\n4.  `for  (int i = bigNumArray.length -  1, j = littleNumArray.length -  1; j >=  0; i--, j--)  {`\n\n5.  `borrow = subtraction(bigNumArray, borrow, i, bigNumArray[i], littleNumArray[j]);`\n\n6.  `//若最后一次相减仍需借位`\n\n7.  `if  (j ==  0  && borrow)  {`\n\n8.  `//继续依次借位`\n\n9.  `while  (i>0){`\n\n10.  `int pre =  --bigNumArray[i -  1];`\n\n11.  `if  (pre <  0){`\n\n12.  `bigNumArray[i -  1]  = pre+10;`\n\n13.  `}else  {`\n\n14.  `bigNumArray[i -  1]  = pre;`\n\n15.  `break;`\n\n16.  `}`\n\n17.  `i--;`\n\n18.  `}`\n\n19.  `}`\n\n20.  `}`\n\n21.  `//由于借位会出现零开头的情况，此处去零`\n\n22.  `if  (bigNumArray[0]  ==  0){`\n\n23.  `int[] newArray =  new  int[bigNumArray.length -  1];`\n\n24.  `System.arraycopy(bigNumArray,  1, newArray,  0, newArray.length);`\n\n25.  `bigNumArray = newArray;`\n\n26.  `}`\n\n27.  `return bigNumArray;`\n\n28.  `}`\n\n##### 小数部分借位相减\n\n1.  `private  static  DecimalResult borrowSubtraction(int[] firstNumArray,  int[] secondNumArray)  {`\n\n2.  `int firstNumArrayLength = firstNumArray.length;`\n\n3.  `int secondNumArrayLength = secondNumArray.length;`\n\n4.  `int counts = firstNumArrayLength > secondNumArrayLength ? firstNumArrayLength : secondNumArrayLength;`\n\n5.  `boolean borrow =  false;`\n\n6.  `if  (counts == firstNumArrayLength)  {`\n\n7.  `//根据数组长度差异，给短数组不可达的下标位一个0值`\n\n8.  `for  (int i = counts -  1; i >=  0; i--)  {`\n\n9.  `int subtrahend = firstNumArray[i];`\n\n10.  `int subtractor = i > secondNumArrayLength -  1  ?  0  : secondNumArray[i];`\n\n11.  `borrow = subtraction(firstNumArray, borrow, i, subtrahend, subtractor);`\n\n12.  `}`\n\n13.  `return  new  DecimalResult(firstNumArray, borrow);`\n\n14.  `}  else  {`\n\n15.  `for  (int i = counts -  1; i >=  0; i--)  {`\n\n16.  `int subtrahend = i > firstNumArrayLength -  1  ?  0  : firstNumArray[i];`\n\n17.  `int subtractor = secondNumArray[i];`\n\n18.  `borrow = subtraction(secondNumArray, borrow, i, subtrahend, subtractor);`\n\n19.  `}`\n\n20.  `return  new  DecimalResult(secondNumArray, borrow);`\n\n21.  `}`\n\n22.  `}`\n\n##### 减法逻辑，跟加法逻辑相似\n\n1.  `private  static  boolean subtraction(int[] firstNumArray,  boolean borrow,  int i,  int subtrahend,  int subtractor)  {`\n\n2.  `int num = subtrahend - subtractor;`\n\n3.  `//需要被借位则先减一`\n\n4.  `if  (borrow)  {`\n\n5.  `num--;`\n\n6.  `borrow =  false;`\n\n7.  `}`\n\n8.  `//若被减数小于减数，借位减`\n\n9.  `if  (num <  0)  {`\n\n10.  `num +=  10;`\n\n11.  `borrow =  true;`\n\n12.  `}`\n\n13.  `firstNumArray[i]  = num;`\n\n14.  `return borrow;`\n\n15.  `}`",[[1566090131141,["GJX@GJXAIOU",[[-1,75,">"]],[76,76],[75,75]]],[1566090133574,["GJX@GJXAIOU",[[-1,17,"原创： 孙宇硕 [Java杂记](javascript:void(0);) _今天_"]],[17,59],[17,17]]],[1566090134125,["GJX@GJXAIOU",[[-1,18,"\n"]],[17,17],[16,16]]],[1566090134499,["GJX@GJXAIOU",[[-1,17,"\n"]],[16,16],[15,15]]],[1566090138660,["GJX@GJXAIOU",[[-1,253,"#"]],[254,254],[253,253]]],[1566090139765,["GJX@GJXAIOU",[[-1,19,"#"]],[20,20],[19,19]]],[1566090140819,["GJX@GJXAIOU",[[-1,0,"#"]],[2,2],[1,1]]],[1566090144813,["GJX@GJXAIOU",[[-1,264,"> "]],[266,266],[264,264]]],[1566090146439,["GJX@GJXAIOU",[[-1,388,"> "]],[390,390],[388,388]]],[1566090146557,["GJX@GJXAIOU",[[-1,387,"\n"]],[388,388],[387,387]]],[1566090146671,["GJX@GJXAIOU",[[-1,386,"\n"]],[387,387],[386,386]]],[1566090147928,["GJX@GJXAIOU",[[-1,376,"## 如何表示实数？"]],[386,386],[376,376]]],[1566090151262,["GJX@GJXAIOU",[[1,376,"## 如何表示实数？"]],[376,376],[386,386]]],[1566090152933,["GJX@GJXAIOU",[[1,386,"\n"]],[386,386],[387,387]]],[1566090157987,["GJX@GJXAIOU",[[-1,622,"#"]],[622,622],[621,621]]],[1566090159325,["GJX@GJXAIOU",[[-1,377,"#"]],[377,377],[376,376]]],[1566090194093,["GJX@GJXAIOU",[[-1,632,"1.  `String str1 =  \"123.45\";`\n\n2.  `String str2 =  \"234.567\";`\n"]],[631,695],[631,631]]],[1566090195168,["GJX@GJXAIOU",[[1,631,"···"]],[631,631],[634,634]]],[1566090196123,["GJX@GJXAIOU",[[-1,631,"···"]],[634,634],[631,631]]],[1566090197577,["GJX@GJXAIOU",[[1,631,"```"]],[631,631],[634,634]]],[1566090197648,["GJX@GJXAIOU",[[1,634,"language\n```\n"]],[634,634],[634,642]]],[1566090199130,["GJX@GJXAIOU",[[-1,634,"language"],[1,642,"j"]],[634,642],[635,635]]],[1566090199586,["GJX@GJXAIOU",[[1,635,"ava"]],[635,635],[638,638]]],[1566090199712,["GJX@GJXAIOU",[[1,639,"\n"]],[638,638],[639,639]]],[1566090202938,["GJX@GJXAIOU",[[1,639,"String\n str1 \n=\n \n\"123.45\"\n;\n\nString\n str2 \n=\n \n\"234.567\"\n;"]],[639,639],[698,698]]],[1566090207909,["GJX@GJXAIOU",[[-1,639,"String\n str1 \n=\n \n\"123.45\"\n;\n\nString\n str2 \n=\n \n\"234.567\"\n;"]],[698,698],[639,639]]],[1566090209901,["GJX@GJXAIOU",[[1,639,"1.  `String str1 =  \"123.45\";`\n\n2.  `String str2 =  \"234.567\";`"]],[639,639],[702,702]]],[1566090212733,["GJX@GJXAIOU",[[-1,639,"1.  `"]],[639,644],[639,639]]],[1566090214676,["GJX@GJXAIOU",[[-1,663,"`"]],[664,664],[663,663]]],[1566090215459,["GJX@GJXAIOU",[[-1,695,"`"]],[696,696],[695,695]]],[1566090217364,["GJX@GJXAIOU",[[-1,665,"2.  `"]],[665,670],[665,665]]],[1566090218756,["GJX@GJXAIOU",[[-1,664,"\n"]],[664,664],[663,663]]],[1566090220332,["GJX@GJXAIOU",[[-1,695,"\n"]],[695,695],[694,694]]],[1566090220734,["GJX@GJXAIOU",[[-1,694,"\n"]],[694,694],[693,693]]],[1566090230157,["GJX@GJXAIOU",[[-1,773,"1.  `private  static  class  SplitResult{`\n\n2.  `private  int[]`\n\n3.  `intArray,`\n\n4.  `decimalArray;`\n\n6.  `public  SplitResult(String num)  {`\n\n7.  `//分离两个数字的整数小数部分  String.splt(\".\")无法如期切分，此处使用转义字符`\n\n8.  `String[] split = num.split(\"\\\\.\");`\n\n10.  `//取出数字的整数和小数部分`\n\n11.  `String intString = split[0];`\n\n12.  `String decimalString = split[1];`\n\n14.  `//转化为int数组`\n\n15.  `this.intArray = stringToArray(intString);`\n\n16.  `this.decimalArray = stringToArray(decimalString);`\n\n18.  `}`\n\n19.  `}`\n"]],[773,1264],[773,773]]],[1566090234808,["GJX@GJXAIOU",[[1,772,"```"]],[772,772],[775,775]]],[1566090234877,["GJX@GJXAIOU",[[1,775,"language\n```\n"]],[775,775],[775,783]]],[1566090236024,["GJX@GJXAIOU",[[-1,775,"language"],[1,783,"j"]],[775,783],[776,776]]],[1566090236521,["GJX@GJXAIOU",[[1,776,"ava"]],[776,776],[779,779]]],[1566090236756,["GJX@GJXAIOU",[[1,780,"\n"]],[779,779],[780,780]]],[1566090239706,["GJX@GJXAIOU",[[1,780,"private\n \nstatic\n \nclass\n \nSplitResult\n{\n\n    \nprivate\n \nint\n[]\n\n        intArray\n,\n\n        decimalArray\n;\n\n\n\n    \npublic\n \nSplitResult\n(\nString\n num\n)\n \n{\n\n        \n//分离两个数字的整数小数部分  String.splt(\".\")无法如期切分，此处使用转义字符\n\n        \nString\n[]\n split \n=\n num\n.\nsplit\n(\n\"\\\\.\"\n);\n\n\n\n        \n//取出数字的整数和小数部分\n\n        \nString\n intString \n=\n split\n[\n0\n];\n\n        \nString\n decimalString \n=\n split\n[\n1\n];\n\n\n\n        \n//转化为int数组\n\n        \nthis\n.\nintArray \n=\n stringToArray\n(\nintString\n);\n\n        \nthis\n.\ndecimalArray \n=\n stringToArray\n(\ndecimalString\n);\n\n\n\n    \n}\n\n}"]],[780,780],[1332,1332]]],[1566090242412,["GJX@GJXAIOU",[[-1,789,"\n"]],[790,790],[789,789]]],[1566090242908,["GJX@GJXAIOU",[[-1,788," "]],[789,789],[788,788]]],[1566090243548,["GJX@GJXAIOU",[[-1,787,"\n"]],[788,788],[787,787]]],[1566090244383,["GJX@GJXAIOU",[[1,787," "]],[787,787],[788,788]]],[1566090246915,["GJX@GJXAIOU",[[-1,794,"\n \n"]],[794,797],[794,794]]],[1566090247704,["GJX@GJXAIOU",[[1,794," "]],[794,794],[795,795]]],[1566090249157,["GJX@GJXAIOU",[[-1,802,"\n"]],[803,803],[802,802]]],[1566090249669,["GJX@GJXAIOU",[[-1,801," "]],[802,802],[801,801]]],[1566090250157,["GJX@GJXAIOU",[[-1,800,"\n"]],[801,801],[800,800]]],[1566090250733,["GJX@GJXAIOU",[[-1,799,"s"]],[800,800],[799,799]]],[1566090251065,["GJX@GJXAIOU",[[1,799," "]],[799,799],[800,800]]],[1566090253936,["GJX@GJXAIOU",[[1,799,"s"]],[799,799],[800,800]]],[1566090256555,["GJX@GJXAIOU",[[-1,812,"\n"]],[813,813],[812,812]]],[1566090265338,["GJX@GJXAIOU",[[-1,819,"\n"]],[820,820],[819,819]]],[1566090265952,["GJX@GJXAIOU",[[-1,818," "]],[819,819],[818,818]]],[1566090267483,["GJX@GJXAIOU",[[-1,814,"\n"]],[814,814],[813,813]]],[1566090269061,["GJX@GJXAIOU",[[-1,826,"\n"]],[827,827],[826,826]]],[1566090269531,["GJX@GJXAIOU",[[-1,825," "]],[826,826],[825,825]]],[1566090270003,["GJX@GJXAIOU",[[-1,824,"\n"]],[825,825],[824,824]]],[1566090271047,["GJX@GJXAIOU",[[1,824," "]],[824,824],[825,825]]],[1566090276067,["GJX@GJXAIOU",[[-1,828,"\n"]],[829,829],[828,828]]],[1566090277080,["GJX@GJXAIOU",[[1,828," "]],[828,828],[829,829]]],[1566090277692,["GJX@GJXAIOU",[[-1,828," "]],[829,829],[828,828]]],[1566090280970,["GJX@GJXAIOU",[[-1,831,"\n        "]],[831,840],[831,831]]],[1566090281610,["GJX@GJXAIOU",[[-1,830,"\n"]],[831,831],[830,830]]],[1566090282240,["GJX@GJXAIOU",[[1,830," "]],[830,830],[831,831]]],[1566090288003,["GJX@GJXAIOU",[[-1,839,"\n"]],[840,840],[839,839]]],[1566090290683,["GJX@GJXAIOU",[[-1,842,"        "]],[842,850],[842,842]]],[1566090291171,["GJX@GJXAIOU",[[-1,841,"\n"]],[842,842],[841,841]]],[1566090291666,["GJX@GJXAIOU",[[-1,840,"\n"]],[841,841],[840,840]]],[1566090293668,["GJX@GJXAIOU",[[-1,852,"\n"]],[853,853],[852,852]]],[1566090295414,["GJX@GJXAIOU",[[1,840," "]],[840,840],[841,841]]],[1566090297419,["GJX@GJXAIOU",[[-1,862,"\n"]],[863,863],[862,862]]],[1566090297835,["GJX@GJXAIOU",[[-1,861," "]],[862,862],[861,861]]],[1566090299076,["GJX@GJXAIOU",[[-1,857,"\n"]],[857,857],[856,856]]],[1566090299689,["GJX@GJXAIOU",[[-1,856,"\n"]],[856,856],[855,855]]],[1566090301803,["GJX@GJXAIOU",[[-1,867,"\n"]],[868,868],[867,867]]],[1566090302330,["GJX@GJXAIOU",[[-1,866," "]],[867,867],[866,866]]],[1566090302803,["GJX@GJXAIOU",[[-1,865,"\n"]],[866,866],[865,865]]],[1566090303479,["GJX@GJXAIOU",[[1,865," "]],[865,865],[866,866]]],[1566090305306,["GJX@GJXAIOU",[[-1,877,"\n"]],[878,878],[877,877]]],[1566090307210,["GJX@GJXAIOU",[[-1,878,"\n"]],[879,879],[878,878]]],[1566090309029,["GJX@GJXAIOU",[[-1,885," "]],[886,886],[885,885]]],[1566090309623,["GJX@GJXAIOU",[[-1,884,"\n"]],[885,885],[884,884]]],[1566090312183,["GJX@GJXAIOU",[[1,884," "]],[884,884],[885,885]]],[1566090314099,["GJX@GJXAIOU",[[-1,888,"\n"]],[889,889],[888,888]]],[1566090315475,["GJX@GJXAIOU",[[-1,891,"\n"]],[892,892],[891,891]]],[1566090316035,["GJX@GJXAIOU",[[-1,890," "]],[891,891],[890,890]]],[1566090316668,["GJX@GJXAIOU",[[-1,889,"\n"]],[890,890],[889,889]]],[1566090329971,["GJX@GJXAIOU",[[-1,900,"\n"]],[901,901],[900,900]]],[1566090333739,["GJX@GJXAIOU",[[-1,891,"\n        "]],[891,900],[891,891]]],[1566090335967,["GJX@GJXAIOU",[[1,891,"   "]],[891,891],[894,894]]],[1566090338323,["GJX@GJXAIOU",[[-1,943,"\n"]],[944,944],[943,943]]],[1566090338898,["GJX@GJXAIOU",[[-1,942,"\n"]],[943,943],[942,942]]],[1566090340125,["GJX@GJXAIOU",[[-1,957,"\n"]],[958,958],[957,957]]],[1566090343147,["GJX@GJXAIOU",[[-1,960," "]],[960,961],[960,960]]],[1566090343627,["GJX@GJXAIOU",[[-1,959,"\n"]],[960,960],[959,959]]],[1566090344463,["GJX@GJXAIOU",[[1,959,"  "]],[959,959],[961,961]]],[1566090345523,["GJX@GJXAIOU",[[-1,967,"\n"]],[968,968],[967,967]]],[1566090348356,["GJX@GJXAIOU",[[-1,969," "]],[969,970],[969,969]]],[1566090348780,["GJX@GJXAIOU",[[-1,968,"\n"]],[969,969],[968,968]]],[1566090349710,["GJX@GJXAIOU",[[1,968," "]],[968,968],[969,969]]],[1566090351028,["GJX@GJXAIOU",[[-1,972,"\n"]],[973,973],[972,972]]],[1566090353595,["GJX@GJXAIOU",[[-1,973,"\n"]],[974,974],[973,973]]],[1566090355939,["GJX@GJXAIOU",[[-1,978,"\n"]],[979,979],[978,978]]],[1566090357474,["GJX@GJXAIOU",[[-1,979,"\n"]],[980,980],[979,979]]],[1566090358779,["GJX@GJXAIOU",[[-1,984,"\n"]],[985,985],[984,984]]],[1566090362234,["GJX@GJXAIOU",[[1,951,"    "]],[951,951],[955,955]]],[1566090363764,["GJX@GJXAIOU",[[-1,954," "]],[955,955],[954,954]]],[1566090380877,["GJX@GJXAIOU",[[1,1002," \n"],[-1,1259,"\n\n"]],[1002,1261],[1261,1261]]],[1566090384585,["GJX@GJXAIOU",[[-1,1002," \n"],[1,1261,"\n\n"]],[1261,1261],[1002,1261]]],[1566090386852,["GJX@GJXAIOU",[[1,1002,"1.  `"],[1,1016,"`"],[1,1018,"2."],[-1,1020,"      \n"],[1,1027,"`"],[-1,1033,"\n"],[-1,1045,"\n"],[-1,1047,"\n"],[-1,1054,"\n"],[-1,1056,"\n"],[-1,1058,"\n"],[1,1061,"`"],[-1,1063,"        \n"],[1,1072,"3.  `"],[-1,1078,"\n"],[-1,1094,"\n"],[-1,1096,"\n"],[-1,1103,"\n"],[-1,1105,"\n"],[-1,1107,"\n"],[1,1110,"`"],[-1,1112,"\n\n        \n"],[1,1123,"5.  `"],[1,1133,"`"],[-1,1135,"        \n"],[1,1144,"6.  `"],[-1,1148,"\n"],[-1,1150,"\n"],[-1,1160,"\n"],[-1,1162,"\n"],[-1,1177,"\n"],[-1,1179,"\n"],[-1,1189,"\n"],[1,1192,"`"],[-1,1194,"        \n"],[1,1203,"7.  `"],[-1,1207,"\n"],[-1,1209,"\n"],[-1,1223,"\n"],[-1,1225,"\n"],[-1,1240,"\n"],[-1,1242,"\n"],[-1,1256,"\n"],[-1,1259,"\n\n"],[1,1261,"`"]],[1002,1261],[1222,1222]]],[1566090391108,["GJX@GJXAIOU",[[-1,1002,"1.  `"]],[1002,1007],[1002,1002]]],[1566090392068,["GJX@GJXAIOU",[[-1,992,"\n"]],[993,993],[992,992]]],[1566090392470,["GJX@GJXAIOU",[[-1,991,"\n"]],[992,992],[991,991]]],[1566090393064,["GJX@GJXAIOU",[[-1,990,"\n"]],[991,991],[990,990]]],[1566090394179,["GJX@GJXAIOU",[[-1,1013,"`"]],[1014,1014],[1013,1013]]],[1566090394971,["GJX@GJXAIOU",[[-1,1048,"`"]],[1049,1049],[1048,1048]]],[1566090395612,["GJX@GJXAIOU",[[-1,1087,"`"]],[1088,1088],[1087,1087]]],[1566090396532,["GJX@GJXAIOU",[[-1,1104,"`"]],[1105,1105],[1104,1104]]],[1566090397315,["GJX@GJXAIOU",[[-1,1152,"`"]],[1153,1153],[1152,1152]]],[1566090398061,["GJX@GJXAIOU",[[-1,1208,"`"]],[1209,1209],[1208,1208]]],[1566090399469,["GJX@GJXAIOU",[[-1,1154,"7.  `"]],[1154,1159],[1154,1154]]],[1566090400555,["GJX@GJXAIOU",[[-1,1110,"`"]],[1111,1111],[1110,1110]]],[1566090402195,["GJX@GJXAIOU",[[-1,1089,"5.  `"]],[1089,1094],[1089,1089]]],[1566090405421,["GJX@GJXAIOU",[[-1,1101,"6.  "]],[1101,1105],[1101,1101]]],[1566090407405,["GJX@GJXAIOU",[[-1,1050,"3.  `"]],[1050,1055],[1050,1050]]],[1566090408555,["GJX@GJXAIOU",[[-1,1015,"2.  `"]],[1015,1020],[1015,1015]]],[1566090411134,["GJX@GJXAIOU",[[-1,1044,"\n"]],[1044,1044],[1043,1043]]],[1566090412078,["GJX@GJXAIOU",[[-1,1014,"\n"]],[1014,1014],[1013,1013]]],[1566090415108,["GJX@GJXAIOU",[[-1,1088,"\n"]],[1088,1088],[1087,1087]]],[1566090416836,["GJX@GJXAIOU",[[-1,1130,"\n"]],[1130,1130],[1129,1129]]],[1566090418923,["GJX@GJXAIOU",[[-1,1184," "]],[1182,1182],[1181,1181]]],[1566090419964,["GJX@GJXAIOU",[[-1,1180,"\n"]],[1181,1181],[1180,1180]]],[1566090422335,["GJX@GJXAIOU",[[1,1184," "]],[1184,1184],[1185,1185]]],[1566090423468,["GJX@GJXAIOU",[[-1,1187,"\n"]],[1187,1187],[1186,1186]]],[1566090424212,["GJX@GJXAIOU",[[-1,1179,"\n"]],[1180,1180],[1179,1179]]],[1566091869028,["GJX@GJXAIOU",[[1,859," "],[1,865," void"],[1,891,"     "],[-1,942,"  "],[1,944,"\n"],[-1,950,"\n"],[-1,953," "],[1,990,"\n"],[-1,998,"\n"],[1,1014,"        "],[1,1043,"        "],[1,1077,"        "],[1,1088,"        "],[1,1130,"        "],[1,1179,"\n"],[-1,1182,"\n"]],[817,1185],[1233,1233]]],[1566091890729,["GJX@GJXAIOU",[[-1,1256,"1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`\n"]],[1256,1526],[1256,1256]]],[1566091891519,["GJX@GJXAIOU",[[1,1256,"```"]],[1256,1256],[1259,1259]]],[1566091891594,["GJX@GJXAIOU",[[1,1259,"language\n```\n"]],[1259,1259],[1259,1267]]],[1566091892551,["GJX@GJXAIOU",[[-1,1259,"language"],[1,1267,"j"]],[1259,1267],[1260,1260]]],[1566091892973,["GJX@GJXAIOU",[[1,1260,"ava"]],[1260,1260],[1263,1263]]],[1566091893103,["GJX@GJXAIOU",[[1,1264,"\n"]],[1263,1263],[1264,1264]]],[1566091896364,["GJX@GJXAIOU",[[1,1264,"1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`"]],[1264,1264],[1533,1533]]],[1566091900081,["GJX@GJXAIOU",[[-1,1264,"1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`"]],[1533,1533],[1264,1264]]],[1566091902088,["GJX@GJXAIOU",[[1,1264,"private\n \nstatic\n \nclass\n \nDecimalResult\n \n{\n\n    \nprivate\n \nint\n[]\n result\n;\n \n//计算结果\n\n    \nprivate\n \nboolean\n flag\n;\n//加法时表示是否进位，减法时表示是否借位\n\n\n\n    \npublic\n \nDecimalResult\n(\nint\n...\n result\n,\n \nboolean\n flag\n)\n \n{\n\n        \nthis\n.\nresult \n=\n result\n;\n\n        \nthis\n.\nflag \n=\n flag\n;\n\n    \n}\n\n}"]],[1264,1264],[1558,1558]]],[1566091903991,["GJX@GJXAIOU",[[-1,1264,"private\n \nstatic\n \nclass\n \nDecimalResult\n \n{\n\n    \nprivate\n \nint\n[]\n result\n;\n \n//计算结果\n\n    \nprivate\n \nboolean\n flag\n;\n//加法时表示是否进位，减法时表示是否借位\n\n\n\n    \npublic\n \nDecimalResult\n(\nint\n...\n result\n,\n \nboolean\n flag\n)\n \n{\n\n        \nthis\n.\nresult \n=\n result\n;\n\n        \nthis\n.\nflag \n=\n flag\n;\n\n    \n}\n\n}"]],[1558,1558],[1264,1264]]],[1566091908520,["GJX@GJXAIOU",[[1,1264,"1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`"]],[1264,1264],[1533,1533]]],[1566091910719,["GJX@GJXAIOU",[[-1,1264,"1.  `private  static  class  DecimalResult  {`\n\n2.  `private  int[] result;  //计算结果`\n\n3.  `private  boolean flag;//加法时表示是否进位，减法时表示是否借位`\n\n5.  `public  DecimalResult(int... result,  boolean flag)  {`\n\n6.  `this.result = result;`\n\n7.  `this.flag = flag;`\n\n8.  `}`\n\n9.  `}`"]],[1533,1533],[1264,1264]]]],null,"GJX@GJXAIOU"]]}