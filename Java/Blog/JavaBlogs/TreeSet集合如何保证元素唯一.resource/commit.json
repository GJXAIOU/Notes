{"compress":true,"commitItems":[["c83992e7-77e4-40ff-b1f6-5803af90935a",1568210774177,"## TreeSet集合如何保证元素唯一\n\n[后端技术精选](javascript:void(0);) _3天前_\n\n点击上方“后端技术精选”，选择“置顶公众号”\n\n技术文章第一时间送达！\n\n> 作者： 码上猿梦\n> \n> cnblogs.com/daimajun/p/6525276.html\n\n## TreeSet：\n\n### 1.特点\n\nTreeSet是用来排序的, 可以指定一个顺序, 对象存入之后会按照指定的顺序排列\n\n### 2.使用方式\n\n**a.自然顺序(Comparable)**\n\n*   TreeSet类的add()方法中会把存入的对象提升为Comparable类型\n\n*   调用对象的compareTo()方法和集合中的对象比较(当前存入的是谁,谁就会调用compareTo方法)\n\n*   根据compareTo()方法返回的结果进行存储\n\n**b.比较器顺序(Comparator)**\n\n*   创建TreeSet的时候可以制定 一个Comparator\n\n*   如果传入了Comparator的子类对象, 那么TreeSet就会按照比较器中的顺序排序\n\n*   add()方法内部会自动调用Comparator接口中compare()方法排序\n\n*   调用的对象(就是当前存入的对象)是compare方法的第一个参数,集合中的对象(已经添加进去的对象)是compare方法的第二个参数\n\n**c.两种方式的区别**\n\n*   TreeSet构造函数什么都不传, 默认按照类中Comparable的顺序(没有就报错ClassCastException)\n\n*   TreeSet如果传入Comparator, 就优先按照Comparator\n\n## 1\\. TreeSet存储Integer类型的元素\n\n```\npackage online.msym.set;import java.util.Comparator;import java.util.TreeSet;import online.msym.bean.Person;public class Demo3_TreeSet {    /**     * @param args     * TreeSet集合是用来对象元素进行排序的,同样他也可以保证元素的唯一         */    public static void main(String[] args) {        demo1();            }    public static void demo1() {        TreeSet<Integer> ts = new TreeSet<>();        ts.add(3);        ts.add(1);        ts.add(1);        ts.add(2);        ts.add(2);        ts.add(3);        ts.add(3);                System.out.println(\"TreeSet存储Integer类型的元素: \" + ts);    }}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/JfTPiahTHJhq7GdnjvDGx9OicYMEibmOn97nGicgUhziaRfia06fXkKYHILEs6UmHt4lUQ4xl2QTwiaiaFRfEiaoZcIm8ibg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n## 2\\. TreeSet存储自定义对象\n\n```\npackage online.msym.set;import java.util.Comparator;import java.util.TreeSet;import online.msym.bean.Person;public class Demo3_TreeSet {    /**     * @param args     * TreeSet集合是用来对象元素进行排序的,同样他也可以保证元素的唯一     * 当compareTo方法返回0的时候集合中只有一个元素     * 当compareTo方法返回正数的时候集合会怎么存就怎么取     * 当compareTo方法返回负数的时候集合会倒序存储     */    public static void main(String[] args) {                demo2();            }    public static void demo2() {        //因为TreeSet要对元素进行排序，那你排序的依据是什么，姓名还是年龄还是其它的，得告诉它，怎么告诉?        //需要让Person类实现Comparable接口重写compareTo方法        TreeSet<Person> ts = new TreeSet<>();        ts.add(new Person(\"张三\", 23));        ts.add(new Person(\"李四\", 13));        ts.add(new Person(\"周七\", 13));        ts.add(new Person(\"王五\", 43));        ts.add(new Person(\"赵六\", 33));        System.out.println(ts);    }}\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/JfTPiahTHJhq7GdnjvDGx9OicYMEibmOn97hic8Jg4zenCPFq4X9Ungvb8NxhJCudr6hXRxeHIYYFLlLvIXTRFnsjw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n注意上面的输出，跟添加的顺序相反，那是因为compareTo方法的返回值\n\n**Person实体类：**\n\n```\npackage online.msym.bean;//为了简化代码，这里没有hashCode和equals方法，用的话可以直接将上面的Person类中的hashCode和equals复制过来public class Person implements Comparable<Person> {    private String name;    private int age;    public Person() {        super();    }    public Person(String name, int age) {        super();        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return \"Person [name=\" + name + \", age=\" + age + \"]\\n\";    }            public int compareTo(Person o) {        //return 0;        //return 1;        return -1    }}\n```\n\n## TreeSet保证元素唯一和自然排序的原理和图解\n\nTreeSet保证元素唯一和自然排序的原理和图解,小的放左侧,大的放右侧\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/JfTPiahTHJhq7GdnjvDGx9OicYMEibmOn97y2whcxBPMIpqLOibibnE0FKwgibr1fcOCaAFx3165wyiatZia0v6gPU5jWQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/JfTPiahTHJhq7GdnjvDGx9OicYMEibmOn97oib4Lez3DomW6ia8BJCzBPI0oT2CmmQFsdPViaRAZ7slNJegK2pPJ0nibA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n**按照Person类的年龄排序的话,Person类改写为:**\n\n```\n//注意使用此类时要生成空参有参构造,set和get方法,hashCode和equals方法package online.msym.bean;public class Person implements Comparable<Person> {    private String name;    private int age;        @Override    //按照年龄排序    public int compareTo(Person o) {       int num = this.age - o.age; //按照年龄比较 return num;     //return num == 0 ? this.name.compareTo(o.name) : num;//姓名是比较的次要条件    }    }\n```\n\n**TreeSet保证元素唯一和比较器排序的原理:**\n\n定义比较器是实现Comparator接口,重写compare方法和equals方法,但是由于所有的类默认继承Object,而Object中有equals方法,所以自定义比较器类时,不用重写equals方法,只需要重写compare方法\n\n字符串长度比较器图解:\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/JfTPiahTHJhq7GdnjvDGx9OicYMEibmOn97cCbTSfO84FIGlliaBcTBmibnhW7k5O2B6XFoBYick3kH9niatefC6yAUnQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n下面采用了两种方式：匿名的内部类的比较器对象，自定义的比较器对象，\n\n```\npackage online.msym.test;import java.util.Comparator;import java.util.TreeSet;import online.msym.bean.Person;public class Demo3_TreeSet {    public static void main(String[] args) {        //demo1();        demo2();    }    private static void demo2() {        // 需求:将字符串按照长度排序, （利用匿名内部类对象, 长度从大到小, 长度相同按照字母倒序）        TreeSet<String> ts = new TreeSet<>(new Comparator<String>() {            @Override            public int compare(String s1, String s2) {                int num = s2.length() - s1.length(); // 长度为主要条件                return num == 0 ? s2.compareTo(s1) : num; // 内容为次要条件            }        });         ts.add(\"aaaaaaaa\");        ts.add(\"z\");        ts.add(\"wc\");        ts.add(\"nba\");        ts.add(\"cba\");        System.out.println(ts);    }    private static void demo1() {        // 需求:将字符串按照长度排序，（传递一个自定义的比较器对象）        TreeSet<String> ts = new TreeSet<>(new CompareByLen()); // Comparator c = new CompareByLen();        ts.add(\"aaaaaaaa\");        ts.add(\"z\");        ts.add(\"wc\");        ts.add(\"nba\");        ts.add(\"cba\");        System.out.println(ts);    }}class CompareByLen /* extends Object */implements Comparator<String> {//实现一个比较器类    @Override    public int compare(String s1, String s2) { // 按照字符串的长度比较        int num = s1.length() - s2.length(); // 长度为主要条件        return num == 0 ? s1.compareTo(s2) : num; // 内容为次要条件    }}\n```",[[1568210721628,["GJX@GJXAIOU",[[-1,22,"[后端技术精选](javascript:void(0);) _3天前_\n\n点击上方“后端技术精选”，选择“置顶公众号”\n\n技术文章第一时间送达！\n\n> 作者： 码上猿梦\n> \n> cnblogs.com/daimajun/p/6525276.html"]],[22,147],[22,22]]],[1568210723291,["GJX@GJXAIOU",[[-1,23,"\n"]],[23,23],[22,22]]],[1568210773052,["GJX@GJXAIOU",[[-1,655," "],[1,656," "],[1,672,"\n"],[-1,678," "],[1,679," "],[1,700,"\n"],[-1,706," "],[1,707," "],[1,725,"\n"],[-1,731," "],[1,732," "],[1,756,"\n"],[-1,762," "],[1,763," "],[-1,768," "],[1,769," "],[-1,782," {    /**     * "],[1,798," {\n    /**\n     * "],[-1,804," "],[1,805," "],[-1,809,"     * "],[1,816,"\n     * "],[-1,851,"         */    "],[1,866,"    \n     */\n    "],[-1,872," "],[1,873," "],[-1,879," "],[1,880," "],[-1,884," "],[1,885," "],[-1,898," "],[1,899," "],[-1,904," {        "],[1,914," {\n        "],[-1,922,"            }    "],[1,939,"        \n    }\n    "],[-1,945," "],[1,946," "],[-1,952," "],[1,953," "],[-1,957," "],[1,958," "],[-1,965," {        "],[1,975," {\n        "],[-1,991," ts = new "],[1,1001," ts = new "],[-1,1013,"        "],[1,1021,"\n        "],[-1,1031,"        "],[1,1039,"\n        "],[-1,1049,"        "],[1,1057,"\n        "],[-1,1067,"        "],[1,1075,"\n        "],[-1,1085,"        "],[1,1093,"\n        "],[-1,1103,"        "],[1,1111,"\n        "],[-1,1121,"        "],[1,1129,"\n        "],[-1,1139,"                "],[1,1155,"        \n        "],[-1,1197," \" + "],[1,1202," \" + "],[-1,1206,"    }"],[1,1211,"\n    }\n"]],[648,1212],[1235,1235]]],[1568210787868,["GJX@GJXAIOU",[[-1,1461," "],[1,1462," "],[1,1478,"\n"],[-1,1484," "],[1,1485," "],[1,1506,"\n"],[-1,1512," "],[1,1513," "],[1,1531,"\n"],[-1,1537," "],[1,1538," "],[1,1562,"\n"],[-1,1568," "],[1,1569," "],[-1,1574," "],[1,1575," "],[-1,1588," {    /**     * "],[1,1604," {\n    /**\n     * "],[-1,1610," "],[1,1611," "],[-1,1615,"     * "],[1,1622,"\n     * "],[-1,1657,"     * "],[1,1664,"\n     * "],[-1,1691,"     * "],[1,1698,"\n     * "],[-1,1727,"     * "],[1,1734,"\n     * "],[-1,1760,"     */    "],[1,1771,"\n     */\n    "],[-1,1777," "],[1,1778," "],[-1,1784," "],[1,1785," "],[-1,1789," "],[1,1790," "],[-1,1803," "],[1,1804," "],[-1,1809," {                "],[1,1827," {        \n        "],[-1,1835,"            }    "],[1,1852,"        \n    }\n    "],[-1,1858," "],[1,1859," "],[-1,1865," "],[1,1866," "],[-1,1870," "],[1,1871," "],[-1,1878," {        "],[1,1888," {\n        "],[-1,1941,"        "],[1,1949,"\n        "],[-1,1988,"        "],[1,1996,"\n        "],[-1,2011," ts = new "],[1,2021," ts = new "],[-1,2033,"        "],[1,2041,"\n        "],[-1,2051," "],[1,2052," "],[-1,2064," "],[1,2065," "],[-1,2070,"        "],[1,2078,"\n        "],[-1,2088," "],[1,2089," "],[-1,2101," "],[1,2102," "],[-1,2107,"        "],[1,2115,"\n        "],[-1,2125," "],[1,2126," "],[-1,2138," "],[1,2139," "],[-1,2144,"        "],[1,2152,"\n        "],[-1,2162," "],[1,2163," "],[-1,2175," "],[1,2176," "],[-1,2181,"        "],[1,2189,"\n        "],[-1,2199," "],[1,2200," "],[-1,2212," "],[1,2213," "],[-1,2218,"        "],[1,2226,"\n\n        "],[-1,2249,"    }"],[1,2254,"\n    }\n\n"]],[1454,2255],[2283,2283]]],[1568210802365,["GJX@GJXAIOU",[[-1,2534," "],[1,2535," "],[1,2552,"\n"],[1,2622,"\n"],[-1,2628," "],[1,2629," "],[-1,2634," "],[1,2635," "],[-1,2641," "],[1,2642," "],[-1,2652," "],[1,2653," "],[-1,2671," {    "],[1,2677," {\n    "],[-1,2684," "],[1,2685," "],[-1,2691," "],[1,2692," "],[-1,2697,"    "],[1,2701,"\n    "],[-1,2708," int "],[1,2713," int "],[-1,2717,"    "],[1,2721,"\n    "],[-1,2727," "],[1,2728," "],[-1,2736," {        "],[1,2746," {\n        "],[-1,2754,"    }    "],[1,2763,"\n\n    }\n    "],[-1,2769," "],[1,2770," "],[-1,2783," "],[1,2784," "],[-1,2789," int "],[1,2794," int "],[-1,2798," {        "],[1,2808," {\n        "],[-1,2816,"        "],[1,2824,"\n        "],[-1,2833," = "],[1,2836," = "],[-1,2841,"        "],[1,2849,"\n        "],[-1,2857," = "],[1,2860," = "],[-1,2864,"    }    "],[1,2873,"\n    }\n    "],[-1,2879," "],[1,2880," "],[-1,2886," "],[1,2887," "],[-1,2896," {        "],[1,2906," {\n        "],[-1,2912," "],[1,2913," "],[-1,2918,"    }    "],[1,2927,"\n    }\n    "],[-1,2933," "],[1,2934," "],[-1,2938," "],[1,2939," "],[-1,2953," "],[1,2954," "],[-1,2959," {        "],[1,2969," {\n        "],[-1,2978," = "],[1,2981," = "],[-1,2986,"    }    "],[1,2995,"\n    }\n    "],[-1,3001," int "],[1,3006," int "],[-1,3014," {        "],[1,3024," {\n        "],[-1,3030," "],[1,3031," "],[-1,3035,"    }    "],[1,3044,"\n    }\n    "],[-1,3050," "],[1,3051," "],[-1,3055," "],[1,3056," "],[-1,3066," "],[1,3067," "],[-1,3071," {        "],[1,3081," {\n        "],[-1,3089," = "],[1,3092," = "],[-1,3096,"    }    "],[1,3105,"\n    }\n    "],[-1,3114,"    "],[1,3118,"\n    "],[-1,3124," "],[1,3125," "],[-1,3131," "],[1,3132," "],[-1,3142," {        "],[1,3152," {\n        "],[-1,3158," "],[1,3159," "],[-1,3166," "],[1,3167," "],[-1,3174," + "],[1,3177," + "],[-1,3181," + \", "],[1,3187," + \", "],[-1,3192," + age + "],[1,3201," + age + "],[-1,3207,"    }            "],[1,3224,"\n    }        \n    "],[-1,3230," int "],[1,3235," int "],[-1,3251," o) {        "],[1,3264," o) {\n        "],[-1,3272," 0;        "],[1,3283," 0;\n        "],[-1,3291," 1;        "],[1,3302," 1;\n        "],[-1,3308," -1    }"],[1,3316," -1\n    }\n\n"]],[2527,3317],[3353,3353]]],[1568210816286,["GJX@GJXAIOU",[[1,3877,"\n"],[-1,3884," "],[1,3885," "],[1,3902,"\n"],[-1,3908," "],[1,3909," "],[-1,3914," "],[1,3915," "],[-1,3921," "],[1,3922," "],[-1,3932," "],[1,3933," "],[-1,3951," {    "],[1,3957," {\n    "],[-1,3964," "],[1,3965," "],[-1,3971," "],[1,3972," "],[-1,3977,"    "],[1,3981,"\n    "],[-1,3988," int "],[1,3993," int "],[-1,3997,"        "],[1,4005,"    \n    "],[-1,4014,"    "],[1,4018,"\n    "],[-1,4026,"    "],[1,4030,"\n    "],[-1,4036," int "],[1,4041," int "],[-1,4057," o) {       int num = "],[1,4079," o) {\n       int num = "],[-1,4087," - "],[1,4090," - "],[-1,4096," "],[1,4097," "],[-1,4105," "],[1,4106," "],[-1,4112," "],[1,4113," "],[-1,4117,"     "],[1,4122,"     "],[-1,4130," num == 0 ? "],[1,4142," num == 0 ? "],[-1,4169," : "],[1,4172," : "],[-1,4188,"    }    "],[1,4197,"\n    }    \n"]],[3831,4198],[4208,4208]]],[1568210832422,["GJX@GJXAIOU",[[-1,4604," "],[1,4605," "],[1,4622,"\n"],[-1,4628," "],[1,4629," "],[1,4650,"\n"],[-1,4656," "],[1,4657," "],[1,4675,"\n"],[-1,4681," "],[1,4682," "],[1,4706,"\n"],[-1,4712," "],[1,4713," "],[-1,4718," "],[1,4719," "],[-1,4732," {    "],[1,4738," {\n    "],[-1,4744," "],[1,4745," "],[-1,4751," "],[1,4752," "],[-1,4756," "],[1,4757," "],[-1,4770," "],[1,4771," "],[-1,4776," {        "],[1,4786," {\n        "],[-1,4796,"        "],[1,4804,"\n        "],[-1,4812,"    }    "],[1,4821,"\n    }\n    "],[-1,4828," "],[1,4829," "],[-1,4835," "],[1,4836," "],[-1,4840," "],[1,4841," "],[-1,4848," {        // "],[1,4861," {\n        // "],[-1,4875," "],[1,4876," "],[-1,4887," "],[1,4888," "],[-1,4895," "],[1,4896," "],[-1,4907,"        "],[1,4915,"\n        "],[-1,4930," ts = new "],[1,4940," ts = new "],[-1,4953," "],[1,4954," "],[-1,4974," {            "],[1,4988," {\n            "],[-1,4997,"            "],[1,5009,"\n            "],[-1,5015," int "],[1,5020," int "],[-1,5034," s1, "],[1,5039," s1, "],[-1,5045," s2) {                int num = "],[1,5077," s2) {\n                int num = "],[-1,5088," - "],[1,5091," - "],[-1,5103," // "],[1,5107," // "],[-1,5114,"                "],[1,5130,"\n                "],[-1,5136," num == 0 ? "],[1,5148," num == 0 ? "],[-1,5164," : "],[1,5167," : "],[-1,5171," // "],[1,5175," // "],[-1,5182,"            }        });         "],[1,5215,"\n            }\n        }); \n        "],[-1,5234,"        "],[1,5242,"\n        "],[-1,5254,"        "],[1,5262,"\n        "],[-1,5275,"        "],[1,5283,"\n        "],[-1,5297,"        "],[1,5305,"\n        "],[-1,5319,"        "],[1,5327,"\n        "],[-1,5350,"    }    "],[1,5359,"\n    }\n    "],[-1,5366," "],[1,5367," "],[-1,5373," "],[1,5374," "],[-1,5378," "],[1,5379," "],[-1,5386," {        // "],[1,5399," {\n        // "],[-1,5428,"        "],[1,5436,"\n        "],[-1,5451," ts = new "],[1,5461," ts = new "],[-1,5474," "],[1,5475," "],[-1,5491," // "],[1,5495," // "],[-1,5505," c = new "],[1,5514," c = new "],[-1,5529,"        "],[1,5537,"\n        "],[-1,5556,"        "],[1,5564,"\n        "],[-1,5576,"        "],[1,5584,"\n        "],[-1,5597,"        "],[1,5605,"\n        "],[-1,5619,"        "],[1,5627,"\n        "],[-1,5641,"        "],[1,5649,"\n        "],[-1,5672,"    }}"],[1,5678,"\n    }\n}\n"],[-1,5683," "],[1,5684," "],[-1,5696," /* "],[1,5700," /* "],[-1,5707," "],[1,5708," "],[-1,5714," "],[1,5715," "],[-1,5727," "],[1,5728," "],[-1,5746," "],[1,5747," "],[-1,5758,"    "],[1,5762,"\n    "],[-1,5771,"    "],[1,5775,"\n    "],[-1,5781," int "],[1,5786," int "],[-1,5800," s1, "],[1,5805," s1, "],[-1,5811," s2) { // "],[1,5821," s2) { // "],[-1,5831,"        int num = "],[1,5849,"\n        int num = "],[-1,5860," - "],[1,5863," - "],[-1,5875," // "],[1,5879," // "],[-1,5886,"        "],[1,5894,"\n        "],[-1,5900," num == 0 ? "],[1,5912," num == 0 ? "],[-1,5928," : "],[1,5931," : "],[-1,5935," // "],[1,5939," // "],[-1,5946,"    }"],[1,5951,"\n    }\n"]],[4597,5952],[5994,5994]]]],null,"GJX@GJXAIOU"]]}