{"compress":true,"commitItems":[["d887d6cd-78c9-485f-8aad-86ef4d436fc1",1562284773585,"# Java中static作用及用法详解\n\n2014年07月24日 13:13:55 [CrazyCodeBoy](https://me.csdn.net/fengyuzhengfan) 阅读数 28309 标签： [Java中static作用及用法详解](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3&t=blog)[Java中static使用总结](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog)[static使用总结](https://so.csdn.net/so/search/s.do?q=static%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog) 更多\n\n个人分类： [Java基础](https://blog.csdn.net/fengyuzhengfan/article/category/2419785)\n\n版权声明：本文为博主原创文章，未经博主允许不得转载。 https://blog.csdn.net/fengyuzhengfan/article/details/38082999\n\n## 1.1概述：\n\n     static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是**用static修饰的成员可以通过类名加“.”进行直接访问。**\n\nstatic表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。\n\n 被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。\n\n用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。\n\nstatic变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。\n\nstatic修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：\n\n类名.静态方法名(参数列表...) \n\n类名.静态变量名\n\n用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。\n\n## 1.2 static变量\n\n按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：\n\n对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。\n\n对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n## 1.3static方法\n\n静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 \n\n## 1.4static代码块\n\nstatic代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如： \n\n```java\npublic class Test5 {         private static int a;         private int b;        static {                 Test5.a = 3;                 System.out.println(a);                 Test5 t = new Test5();                 t.f();                 t.b = 1000;                 System.out.println(t.b);         }        static {                 Test5.a = 4;                 System.out.println(a);         }        public static void main(String[] args) {                 // TODO 自动生成方法存根         }        static {                 Test5.a = 5;                 System.out.println(a);         }         public void f() {                 System.out.println(\"hhahhahah\");         } }\n```\n\n运行结果：\n3\nhhahhahah\n1000\n4\n5\n\n利用静态代码块可以对一些static变量进行赋值，最后再看一眼这些例子，都一个static的main方法，这样JVM在运行main方法的时候可以直接调用而不用创建实例。 \n\n1、  static和final一块用表示什么\n\nstatic final用来修饰成员变量和成员方法，可简单理解为“全局常量”！\n\n       对于变量，表示一旦给值就不可修改，并且通过类名可以访问。\n\n 对于方法，表示不可覆盖，并且可以通过类名直接访问。       \n\n**特别要注意一个问题：**\n\n对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。看个例子：\n\n```java\npublic class TestStaticFinal {        private static final String strStaticFinalVar =\"aaa\";        private static String strStaticVar =null;        private final String strFinalVar = null;        private static final int intStaticFinalVar = 0;        private static final Integer integerStaticFinalVar =new Integer(8);        private static final ArrayList<String>alStaticFinalVar = new ArrayList<String>();        private void test() {                System.out.println(\"-------------值处理前----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");                //strStaticFinalVar=\"哈哈哈哈\";        //错误，final表示终态,不可以改变变量本身.                strStaticVar = \"哈哈哈哈\";               //正确，static表示类变量,值可以改变.                //strFinalVar=\"呵呵呵呵\";                    //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //intStaticFinalVar=2;                        //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //integerStaticFinalVar=new Integer(8);            //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                alStaticFinalVar.add(\"aaa\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                alStaticFinalVar.add(\"bbb\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                System.out.println(\"-------------值处理后----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");        }        public static void main(String args[]) {                new TestStaticFinal().test();        }}\n```\n\n运行结果如下：\n\n-------------值处理前----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=null\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[]\n\n-------------值处理后----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=哈哈哈哈\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[aaa, bbb]\nProcess finished with exit code 0\n\n看了上面这个例子，就清楚很多了，但必须明白：通过static final修饰的容器类型变量中所“装”的对象是可改变的。这是和一般基本类型和类类型变量差别很大的地方。\n\n## 1.5 java static块和static方法的使用区别\n\n如果有些代码必须在项目启动的时候就执行,就需要使用静态代码块,这种代码是主动执行的；需要在项目启动的时候就初始化但是不执行,在不创建对象的情况下,可以供其他程序调用,而在调用的时候才执行，这需要使用静态方法,这种代码是被动执行的。 静态方法在类加载的时候 就已经加载 可以用类名直接调用。\n\n**静态代码块和静态方法的区别是：**\n\n• 静态代码块是自动执行的;\n\n• 静态方法是被调用的时候才执行的.\n\n• 静态方法：如果我们在程序编写的时候需要一个不实例化对象就可以调用的方法，我们就可以使用静态方法，具体实现是在方法前面加上static，如下：\n\n**public static void** method(){}\n\n**在使用静态方法的时候需要注意一下几个方面：**\n\n在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用，而静态方法在使用前不用创建任何对象。（备注：**静态变量是属于整个类的变量而不是属于某个对象的**）\n\n静态方法不能以任何方式引用this和super关键字，因为静态方法在使用前不用创建任何实例对象，当静态方法调用时，this所引用的对象根本没有产生。\n\n静态程序块：当一个类需要在被载入时就执行一段程序，这样可以使用静态程序块。\n\n## 1.6总结\n\n有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static(静态的)就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。\n\n声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。声明为static的方法有以下几条限制：\n\n• 它们仅能调用其他的static方法。\n\n• 它们只能访问static数据。\n\n• 它们不能以任何方式引用this或super（关键字super 与继承有关，在下一章中描述）。\n\n如果你需要通过计算来初始化你的static变量，你可以声明一个static块，Static 块仅在该类被加载时执行一次。",[[1562284738786,["GJX@GJXAIOU",[[-1,22,"2014年07月24日 13:13:55 [CrazyCodeBoy](https://me.csdn.net/fengyuzhengfan) 阅读数 28309 标签： [Java中static作用及用法详解](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3&t=blog)[Java中static使用总结](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog)[static使用总结](https://so.csdn.net/so/search/s.do?q=static%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog) 更多\n\n个人分类： [Java基础](https://blog.csdn.net/fengyuzhengfan/article/category/2419785)\n\n版权声明：本文为博主"],[-1,569,"创"],[-1,571,"章，未经博主允许不得转载。 "],[-1,659,"     "],[1,664,"     "],[-1,993," "],[1,994," "],[-1,1473," "],[1,1474," "],[-1,1794," "],[1,1795," "],[-1,2017," "],[1,2018," "],[-1,2175," "],[1,2176," "],[-1,2968," "],[1,2969," "],[-1,2973,"  "],[1,2975,"  "],[-1,3037,"       "],[1,3044,"       "],[-1,3074," "],[1,3075," "],[-1,3100,"       "],[1,3107,"       "],[-1,6374," "],[1,6375," "],[-1,6381," "],[1,6382," "],[-1,6388," "],[1,6389," "]],[22,22],[24,24]]],[1562284739955,["GJX@GJXAIOU",[[1,24,"地址 "]],[24,24],[26,26]]],[1562284741917,["GJX@GJXAIOU",[[1,26,"链接："]],[26,26],[29,29]]],[1562284744656,["GJX@GJXAIOU",[[-1,28,"："]],[29,29],[28,28]]],[1562284745515,["GJX@GJXAIOU",[[1,28,":"]],[28,28],[29,29]]],[1562284750825,["GJX@GJXAIOU",[[-1,107,"  "]],[109,109],[107,107]]],[1562284817332,["GJX@GJXAIOU",[[1,171,"**"],[1,208,"**"]],[171,208],[171,212]]],[1562284830520,["GJX@GJXAIOU",[[1,268,"**"],[1,276,"**"]],[268,276],[268,280]]],[1562285032785,["GJX@GJXAIOU",[[1,445,"**"],[1,474,"**"]],[445,474],[445,478]]],[1562285080277,["GJX@GJXAIOU",[[-1,629,"市"]],[630,630],[629,629]]],[1562285081161,["GJX@GJXAIOU",[[1,629,"s"]],[629,629],[630,630]]],[1562285081191,["GJX@GJXAIOU",[[1,629," "]],[630,630],[631,631]]],[1562285081385,["GJX@GJXAIOU",[[1,631,"hi"]],[631,631],[633,633]]],[1562285082840,["GJX@GJXAIOU",[[-1,629," shi"]],[633,633],[629,629]]],[1562285085075,["GJX@GJXAIOU",[[1,629,"时"]],[629,629],[630,630]]],[1562285104625,["GJX@GJXAIOU",[[1,648,"**"],[1,667,"**"]],[648,667],[648,671]]],[1562285134304,["GJX@GJXAIOU",[[1,685,"**"],[1,695,"**"]],[685,695],[685,699]]],[1562285140109,["GJX@GJXAIOU",[[1,758,"# Java中static作用及用法详解\n\n2014年07月24日 13:13:55 [CrazyCodeBoy](https://me.csdn.net/fengyuzhengfan) 阅读数 28309 标签： [Java中static作用及用法详解](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3&t=blog)[Java中static使用总结](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog)[static使用总结](https://so.csdn.net/so/search/s.do?q=static%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog) 更多\n\n个人分类： [Java基础](https://blog.csdn.net/fengyuzhengfan/article/category/2419785)\n\n版权声明：本文为博主原创文章，未经博主允许不得转载。 https://blog.csdn.net/fengyuzhengfan/article/details/38082999\n\n## 1.1概述：\n\n     static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是**用static修饰的成员可以通过类名加“.”进行直接访问。**\n\nstatic表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。\n\n 被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。\n\n用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。\n\nstatic变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是"],[1,774,"，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。\n\nstatic修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：\n\n类名.静态方法名(参数列表...) \n\n类名.静态变量名\n\n用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。\n\n## 1.2 static变量\n\n按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：\n\n对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。\n\n对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n## 1.3static方法\n\n静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 \n\n## 1.4static代码块\n\nstatic代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如： \n\n```java\npublic class Test5 {         private static int a;         private int b;        static {                 Test5.a = 3;                 System.out.println(a);                 Test5 t = new Test5();                 t.f();                 t.b = 1000;                 System.out.println(t.b);         }        static {                 Test5.a = 4;                 System.out.println(a);         }        public static void main(String[] args) {                 // TODO 自动生成方法存根         }        static {                 Test5.a = 5;                 System.out.println(a);         }         public void f() {                 System.out.println(\"hhahhahah\");         } }\n```\n\n运行结果：\n3\nhhahhahah\n1000\n4\n5\n\n利用静态代码块可以对一些static变量进行赋值，最后再看一眼这些例子，都一个static的main方法，这样JVM在运行main方法的时候可以直接调用而不用创建实例。 \n\n1、  static和final一块用表示什么\n\nstatic final用来修饰成员变量和成员方法，可简单理解为“全局常量”！\n\n       对于变量，表示一旦给值就不可修改，并且通过类名可以访问。\n\n 对于方法，表示不可覆盖，并且可以通过类名直接访问。       \n\n**特别要注意一个问题：**\n\n对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。看个例子：\n\n```java\npublic class TestStaticFinal {        private static final String strStaticFinalVar =\"aaa\";        private static String strStaticVar =null;        private final String strFinalVar = null;        private static final int intStaticFinalVar = 0;        private static final Integer integerStaticFinalVar =new Integer(8);        private static final ArrayList<String>alStaticFinalVar = new ArrayList<String>();        private void test() {                System.out.println(\"-------------值处理前----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");                //strStaticFinalVar=\"哈哈哈哈\";        //错误，final表示终态,不可以改变变量本身.                strStaticVar = \"哈哈哈哈\";               //正确，static表示类变量,值可以改变.                //strFinalVar=\"呵呵呵呵\";                    //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //intStaticFinalVar=2;                        //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //integerStaticFinalVar=new Integer(8);            //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                alStaticFinalVar.add(\"aaa\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                alStaticFinalVar.add(\"bbb\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                System.out.println(\"-------------值处理后----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");        }        public static void main(String args[]) {                new TestStaticFinal().test();        }}\n```\n\n运行结果如下：\n\n-------------值处理前----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=null\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[]\n\n-------------值处理后----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=哈哈哈哈\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[aaa, bbb]\nProcess finished with exit code 0\n\n看了上面这个例子，就清楚很多了，但必须明白：通过static final修饰的容器类型变量中所“装”的对象是可改变的。这是和一般基本类型和类类型变量差别很大的地方。\n\n## 1.5 java static块和static方法的使用区别\n\n如果有些代码必须在项目启动的时候就执行,就需要使用静态代码块,这种代码是主动执行的；需要在项目启动的时候就初始化但是不执行,在不创建对象的情况下,可以供其他程序调用,而在调用的时候才执行，这需要使用静态方法,这种代码是被动执行的。 静态方法在类加载的时候 就已经加载 可以用类名直接调用。\n\n**静态代码块和静态方法的区别是：**\n\n• 静态代码块是自动执行的;\n\n• 静态方法是被调用的时候才执行的.\n\n• 静态方法：如果我们在程序编写的时候需要一个不实例化对象就可以调用的方法，我们就可以使用静态方法，具体实现是在方法前面加上static，如下：\n\n**public static void** method(){}\n\n**在使用静态方法的时候需要注意一下几个方面：**\n\n在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用，而静态方法在使用前不用创建任何对象。（备注：**静态变量是属于整个类的变量而不是属于某个对象的**）\n\n静态方法不能以任何方式引用this和super关键字，因为静态方法在使用前不用创建任何实例对象，当静态方法调用时，this所引用的对象根本没有产生。\n\n静态程序块：当一个类需要在被载入时就执行一段程序，这样可以使用静态程序块。\n\n## 1.6总结\n\n有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static(静态的)就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。\n\n声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。声明为static的方法有以下几条限制：\n\n• 它们仅能调用其他的static方法。\n\n• 它们只能访问static数据。\n\n• 它们不能以任何方式引用this或super（关键字super 与继承有关，在下一章中描述）。\n\n如果你需要通过计算来初始化你的static变量，你可以声明一个static块，Static 块仅在该类被加载时执行一次。"]],[758,774],[7943,7943]]],[1562285141834,["GJX@GJXAIOU",[[-1,758,"# Java中static作用及用法详解\n\n2014年07月24日 13:13:55 [CrazyCodeBoy](https://me.csdn.net/fengyuzhengfan) 阅读数 28309 标签： [Java中static作用及用法详解](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3&t=blog)[Java中static使用总结](https://so.csdn.net/so/search/s.do?q=Java%E4%B8%ADstatic%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog)[static使用总结](https://so.csdn.net/so/search/s.do?q=static%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93&t=blog) 更多\n\n个人分类： [Java基础](https://blog.csdn.net/fengyuzhengfan/article/category/2419785)\n\n版权声明：本文为博主原创文章，未经博主允许不得转载。 https://blog.csdn.net/fengyuzhengfan/article/details/38082999\n\n## 1.1概述：\n\n     static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是**用static修饰的成员可以通过类名加“.”进行直接访问。**\n\nstatic表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。\n\n 被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。\n\n用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。\n\nstatic变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是"],[-1,2069,"，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。\n\nstatic修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：\n\n类名.静态方法名(参数列表...) \n\n类名.静态变量名\n\n用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。\n\n## 1.2 static变量\n\n按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：\n\n对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。\n\n对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n## 1.3static方法\n\n静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 \n\n## 1.4static代码块\n\nstatic代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如： \n\n```java\npublic class Test5 {         private static int a;         private int b;        static {                 Test5.a = 3;                 System.out.println(a);                 Test5 t = new Test5();                 t.f();                 t.b = 1000;                 System.out.println(t.b);         }        static {                 Test5.a = 4;                 System.out.println(a);         }        public static void main(String[] args) {                 // TODO 自动生成方法存根         }        static {                 Test5.a = 5;                 System.out.println(a);         }         public void f() {                 System.out.println(\"hhahhahah\");         } }\n```\n\n运行结果：\n3\nhhahhahah\n1000\n4\n5\n\n利用静态代码块可以对一些static变量进行赋值，最后再看一眼这些例子，都一个static的main方法，这样JVM在运行main方法的时候可以直接调用而不用创建实例。 \n\n1、  static和final一块用表示什么\n\nstatic final用来修饰成员变量和成员方法，可简单理解为“全局常量”！\n\n       对于变量，表示一旦给值就不可修改，并且通过类名可以访问。\n\n 对于方法，表示不可覆盖，并且可以通过类名直接访问。       \n\n**特别要注意一个问题：**\n\n对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。看个例子：\n\n```java\npublic class TestStaticFinal {        private static final String strStaticFinalVar =\"aaa\";        private static String strStaticVar =null;        private final String strFinalVar = null;        private static final int intStaticFinalVar = 0;        private static final Integer integerStaticFinalVar =new Integer(8);        private static final ArrayList<String>alStaticFinalVar = new ArrayList<String>();        private void test() {                System.out.println(\"-------------值处理前----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");                //strStaticFinalVar=\"哈哈哈哈\";        //错误，final表示终态,不可以改变变量本身.                strStaticVar = \"哈哈哈哈\";               //正确，static表示类变量,值可以改变.                //strFinalVar=\"呵呵呵呵\";                    //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //intStaticFinalVar=2;                        //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                //integerStaticFinalVar=new Integer(8);            //错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。                alStaticFinalVar.add(\"aaa\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                alStaticFinalVar.add(\"bbb\");       //正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。                System.out.println(\"-------------值处理后----------\\r\\n\");                System.out.println(\"strStaticFinalVar=\" +strStaticFinalVar + \"\\r\\n\");                System.out.println(\"strStaticVar=\" +strStaticVar + \"\\r\\n\");                System.out.println(\"strFinalVar=\" +strFinalVar + \"\\r\\n\");                System.out.println(\"intStaticFinalVar=\" +intStaticFinalVar + \"\\r\\n\");                System.out.println(\"integerStaticFinalVar=\" +integerStaticFinalVar + \"\\r\\n\");                System.out.println(\"alStaticFinalVar=\" +alStaticFinalVar + \"\\r\\n\");        }        public static void main(String args[]) {                new TestStaticFinal().test();        }}\n```\n\n运行结果如下：\n\n-------------值处理前----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=null\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[]\n\n-------------值处理后----------\n\nstrStaticFinalVar=aaa\n\nstrStaticVar=哈哈哈哈\n\nstrFinalVar=null\n\nintStaticFinalVar=0\n\nintegerStaticFinalVar=8\n\nalStaticFinalVar=[aaa, bbb]\nProcess finished with exit code 0\n\n看了上面这个例子，就清楚很多了，但必须明白：通过static final修饰的容器类型变量中所“装”的对象是可改变的。这是和一般基本类型和类类型变量差别很大的地方。\n\n## 1.5 java static块和static方法的使用区别\n\n如果有些代码必须在项目启动的时候就执行,就需要使用静态代码块,这种代码是主动执行的；需要在项目启动的时候就初始化但是不执行,在不创建对象的情况下,可以供其他程序调用,而在调用的时候才执行，这需要使用静态方法,这种代码是被动执行的。 静态方法在类加载的时候 就已经加载 可以用类名直接调用。\n\n**静态代码块和静态方法的区别是：**\n\n• 静态代码块是自动执行的;\n\n• 静态方法是被调用的时候才执行的.\n\n• 静态方法：如果我们在程序编写的时候需要一个不实例化对象就可以调用的方法，我们就可以使用静态方法，具体实现是在方法前面加上static，如下：\n\n**public static void** method(){}\n\n**在使用静态方法的时候需要注意一下几个方面：**\n\n在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用，而静态方法在使用前不用创建任何对象。（备注：**静态变量是属于整个类的变量而不是属于某个对象的**）\n\n静态方法不能以任何方式引用this和super关键字，因为静态方法在使用前不用创建任何实例对象，当静态方法调用时，this所引用的对象根本没有产生。\n\n静态程序块：当一个类需要在被载入时就执行一段程序，这样可以使用静态程序块。\n\n## 1.6总结\n\n有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static(静态的)就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。\n\n声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。声明为static的方法有以下几条限制：\n\n• 它们仅能调用其他的static方法。\n\n• 它们只能访问static数据。\n\n• 它们不能以任何方式引用this或super（关键字super 与继承有关，在下一章中描述）。\n\n如果你需要通过计算来初始化你的static变量，你可以声明一个static块，Static 块仅在该类被加载时执行一次。"]],[7943,7943],[758,774]]],[1562285142554,["GJX@GJXAIOU",[[1,758,"**"],[1,774,"**"]],[758,774],[758,778]]],[1562285157026,["GJX@GJXAIOU",[[1,796,"**"],[1,829,"**"]],[796,829],[796,833]]],[1562285174707,["GJX@GJXAIOU",[[-1,946,"\n"]],[946,946],[945,945]]],[1562285176514,["GJX@GJXAIOU",[[1,926,"···"]],[926,926],[929,929]]],[1562285177593,["GJX@GJXAIOU",[[-1,926,"···"]],[929,929],[926,926]]],[1562285178988,["GJX@GJXAIOU",[[1,926,"```"]],[926,926],[929,929]]],[1562285180577,["GJX@GJXAIOU",[[1,958,"```"]],[958,958],[961,961]]],[1562285200474,["GJX@GJXAIOU",[[1,1022,"\n"]],[1021,1021],[1022,1022]]],[1562285209548,["GJX@GJXAIOU",[[1,92,"@toc"]],[92,92],[96,96]]],[1562285210359,["GJX@GJXAIOU",[[1,97,"\n"]],[96,96],[97,97]]],[1562285240386,["GJX@GJXAIOU",[[-1,1051,"的"]],[1052,1052],[1051,1051]]],[1562285241177,["GJX@GJXAIOU",[[1,1051,","]],[1051,1051],[1052,1052]]],[1562285268381,["GJX@GJXAIOU",[[1,1165,"**"],[1,1183,"**"]],[1165,1183],[1165,1187]]],[1562285273636,["GJX@GJXAIOU",[[1,1204,"**"],[1,1223,"**"]],[1204,1223],[1204,1227]]],[1562285285162,["GJX@GJXAIOU",[[1,1127,"- "]],[1127,1127],[1129,1129]]],[1562285288058,["GJX@GJXAIOU",[[1,1232,"- "]],[1232,1232],[1234,1234]]],[1562285297428,["GJX@GJXAIOU",[[-1,1241,"没"]],[1242,1242],[1241,1241]]],[1562285298135,["GJX@GJXAIOU",[[1,1241,"m "]],[1241,1241],[1242,1242]]],[1562285298308,["GJX@GJXAIOU",[[1,1242,"ei"]],[1242,1242],[1244,1244]]],[1562285299311,["GJX@GJXAIOU",[[-1,1241,"mei"]],[1244,1244],[1241,1241]]],[1562285301477,["GJX@GJXAIOU",[[1,1241,"每"]],[1241,1241],[1242,1242]]],[1562285303391,["GJX@GJXAIOU",[[-1,1242," "]],[1243,1243],[1242,1242]]],[1562285379696,["GJX@GJXAIOU",[[1,1336,"**"],[1,1357,"**"]],[1336,1357],[1336,1361]]],[1562285390356,["GJX@GJXAIOU",[[1,1362,"**"],[1,1405,"**"]],[1362,1405],[1362,1409]]],[1562285490448,["GJX@GJXAIOU",[[1,1709,"\n"],[1,1739,"\n"],[1,1761,"\n"],[1,1778,"\n"],[1,1807,"\n"],[1,1846,"\n"],[1,1885,"\n"],[1,1908,"\n"],[1,1936,"\n"],[1,1977,"\n"],[1,1986,"\n"],[1,2003,"\n"],[1,2032,"\n"],[1,2071,"\n"],[1,2080,"\n"],[1,2129,"\n"],[1,2162,"\n"],[1,2171,"\n"],[1,2188,"\n"],[1,2217,"\n"],[1,2256,"\n"],[1,2266,"\n"],[1,2292,"\n"],[1,2341,"\n"],[1,2351,"\n"]],[1688,2352],[2377,2377]]],[1562285517735,["GJX@GJXAIOU",[[1,1557,"**"],[1,1576,"**"]],[1557,1576],[1557,1580]]],[1562285534288,["GJX@GJXAIOU",[[1,1665,"**"],[1,1677,"**"]],[1665,1677],[1665,1681]]],[1562285543746,["GJX@GJXAIOU",[[1,2397,"\n"]],[2397,2397],[2398,2398]]],[1562285546762,["GJX@GJXAIOU",[[1,2397,"```"]],[2397,2397],[2400,2400]]],[1562285549339,["GJX@GJXAIOU",[[1,2422,"```"]],[2422,2422],[2425,2425]]],[1562285564740,["GJX@GJXAIOU",[[1,1819,"//因为a"]],[1819,1819],[1824,1824]]],[1562285566191,["GJX@GJXAIOU",[[-1,1823,"a"]],[1824,1824],[1823,1823]]],[1562285571425,["GJX@GJXAIOU",[[1,1823,"变量ash"]],[1823,1823],[1828,1828]]],[1562285571912,["GJX@GJXAIOU",[[-1,1826,"sh"]],[1828,1828],[1826,1826]]],[1562285597837,["GJX@GJXAIOU",[[1,1826,"使用static修饰，因此是静态变量，可以直接使用类名进行调研"]],[1826,1826],[1857,1857]]],[1562285598680,["GJX@GJXAIOU",[[-1,1855,"调研"]],[1857,1857],[1855,1855]]],[1562285601531,["GJX@GJXAIOU",[[1,1855,"调用；"]],[1855,1855],[1858,1858]]],[1562285646043,["GJX@GJXAIOU",[[-1,2618,"       "]],[2618,2625],[2618,2618]]],[1562285651845,["GJX@GJXAIOU",[[-1,2576,"\n"]],[2576,2576],[2575,2575]]],[1562285655856,["GJX@GJXAIOU",[[1,2555,"**"],[1,2575,"**"]],[2555,2575],[2555,2579]]],[1562285658150,["GJX@GJXAIOU",[[-1,2557," "]],[2558,2558],[2557,2557]]],[1562285662544,["GJX@GJXAIOU",[[-1,2552,"1、"]],[2554,2554],[2552,2552]]],[1562285664137,["GJX@GJXAIOU",[[1,2552,"1."]],[2552,2552],[2554,2554]]],[1562285665984,["GJX@GJXAIOU",[[1,2552,"\n"]],[2551,2551],[2552,2552]]],[1562285666512,["GJX@GJXAIOU",[[1,2553,"\n"]],[2552,2552],[2553,2553]]],[1562285682727,["GJX@GJXAIOU",[[-1,2651,"\n"]],[2651,2651],[2650,2650]]],[1562285687899,["GJX@GJXAIOU",[[-1,2651," "]],[2652,2652],[2651,2651]]],[1562285689790,["GJX@GJXAIOU",[[-1,2621,"\n"]],[2621,2621],[2620,2620]]],[1562285692778,["GJX@GJXAIOU",[[1,2650,"- "]],[2650,2650],[2652,2652]]],[1562285694665,["GJX@GJXAIOU",[[1,2621,"- "]],[2621,2621],[2623,2623]]],[1562285701265,["GJX@GJXAIOU",[[1,2661,"**"],[1,2665,"**"]],[2661,2665],[2661,2669]]],[1562285705272,["GJX@GJXAIOU",[[1,2635,"**"],[1,2639,"**"]],[2635,2639],[2635,2643]]],[1562285729285,["GJX@GJXAIOU",[[1,2797,"**"],[1,2809,"**"]],[2797,2809],[2797,2813]]],[1562285746486,["GJX@GJXAIOU",[[1,2871,"\n"],[1,2932,"\n"],[1,2981,"\n"],[1,3029,"\n"],[1,3084,"\n"],[1,3159,"\n"],[1,3248,"\n"],[1,3277,"\n"],[1,3347,"\n"],[1,3432,"\n"],[1,3507,"\n"],[1,3580,"\n"],[1,3665,"\n"],[1,3758,"\n"],[1,3841,"\n"],[1,3917,"\n"],[1,3993,"\n"],[1,4099,"\n"],[1,4210,"\n"],[1,4326,"\n"],[1,4421,"\n"],[1,4516,"\n"],[1,4586,"\n"],[1,4671,"\n"],[1,4746,"\n"],[1,4819,"\n"],[1,4904,"\n"],[1,4997,"\n"],[1,5080,"\n"],[1,5089,"\n"],[1,5137,"\n"],[1,5182,"\n"],[1,5191,"\n"]],[2841,5192],[5225,5225]]],[1562285779300,["GJX@GJXAIOU",[[1,5239,"  ·"]],[5239,5239],[5242,5242]]],[1562285780082,["GJX@GJXAIOU",[[-1,5240," ·"]],[5242,5242],[5240,5240]]],[1562285783249,["GJX@GJXAIOU",[[1,5240,"```java"]],[5240,5240],[5247,5247]]],[1562285788881,["GJX@GJXAIOU",[[1,5601,"```"]],[5601,5601],[5604,5604]]],[1562285788915,["GJX@GJXAIOU",[[1,5604,"language\n```\n"]],[5604,5604],[5604,5612]]],[1562285793585,["GJX@GJXAIOU",[[-1,5601,"```language"]],[5601,5612],[5601,5601]]],[1562285794451,["GJX@GJXAIOU",[[-1,5601,"\n"]],[5601,5601],[5600,5600]]],[1562285799109,["GJX@GJXAIOU",[[-1,5239," "]],[5240,5240],[5239,5239]]],[1562285950756,["GJX@GJXAIOU",[[-1,5675,"类"]],[5675,5675],[5674,5674]]],[1562285957800,["GJX@GJXAIOU",[[-1,5683,"地"]],[5684,5684],[5683,5683]]],[1562285960331,["GJX@GJXAIOU",[[1,5683,"地"]],[5683,5683],[5684,5684]]],[1562285973023,["GJX@GJXAIOU",[[-1,5665,"是"]],[5666,5666],[5665,5665]]],[1562285981111,["GJX@GJXAIOU",[[-1,5694,"j"]],[5695,5695],[5694,5694]]],[1562285981802,["GJX@GJXAIOU",[[1,5694,"J"]],[5694,5694],[5695,5695]]],[1562285997151,["GJX@GJXAIOU",[[1,5758,"**"],[1,5763,"**"]],[5758,5763],[5758,5767]]],[1562286031291,["GJX@GJXAIOU",[[1,5768,"\n"]],[5768,5768],[5769,5769]]],[1562286052474,["GJX@GJXAIOU",[[1,5722,"S "]],[5722,5722],[5723,5723]]],[1562286052723,["GJX@GJXAIOU",[[1,5723,"t"]],[5723,5723],[5724,5724]]],[1562286054367,["GJX@GJXAIOU",[[-1,5722,"St"]],[5724,5724],[5722,5722]]],[1562286055177,["GJX@GJXAIOU",[[1,5722,"-"]],[5722,5722],[5723,5723]]],[1562286055387,["GJX@GJXAIOU",[[1,5724," "]],[5723,5723],[5724,5724]]],[1562286057689,["GJX@GJXAIOU",[[1,5724,"statick"]],[5724,5724],[5731,5731]]],[1562286058231,["GJX@GJXAIOU",[[-1,5730,"k"]],[5731,5731],[5730,5730]]],[1562286059964,["GJX@GJXAIOU",[[1,5730,"块"]],[5730,5730],[5731,5731]]],[1562286059995,["GJX@GJXAIOU",[[1,5730," "]],[5731,5731],[5732,5732]]],[1562286060347,["GJX@GJXAIOU",[[1,5732,"："]],[5732,5732],[5733,5733]]],[1562286068984,["GJX@GJXAIOU",[[1,5781,"- static "]],[5781,5781],[5789,5789]]],[1562286070173,["GJX@GJXAIOU",[[1,5789,"方法"]],[5789,5789],[5791,5791]]],[1562286070205,["GJX@GJXAIOU",[[1,5789," "]],[5791,5791],[5792,5792]]],[1562286071113,["GJX@GJXAIOU",[[1,5792,":"]],[5792,5792],[5793,5793]]],[1562286074336,["GJX@GJXAIOU",[[-1,5732,"： "]],[5734,5734],[5732,5732]]],[1562286075466,["GJX@GJXAIOU",[[1,5732,":"]],[5732,5732],[5733,5733]]],[1562286188053,["GJX@GJXAIOU",[[-1,5933,"\n"]],[5933,5933],[5932,5932]]],[1562286192138,["GJX@GJXAIOU",[[-1,5917,"\n"]],[5917,5917],[5916,5916]]],[1562286199025,["GJX@GJXAIOU",[[-1,5917,"• "],[1,5919,"-"]],[5917,5919],[5918,5918]]],[1562286199347,["GJX@GJXAIOU",[[1,5918," "]],[5918,5918],[5919,5919]]],[1562286200761,["GJX@GJXAIOU",[[-1,5932,"• "],[1,5934,"-"]],[5932,5934],[5933,5933]]],[1562286201209,["GJX@GJXAIOU",[[1,5933," "]],[5933,5933],[5934,5934]]],[1562286209771,["GJX@GJXAIOU",[[1,6025,"```"]],[6025,6025],[6028,6028]]],[1562286209802,["GJX@GJXAIOU",[[1,6028,"language\n```\n"]],[6028,6028],[6028,6036]]],[1562286214035,["GJX@GJXAIOU",[[-1,6028,"language"],[1,6036,"j"]],[6028,6036],[6029,6029]]],[1562286215305,["GJX@GJXAIOU",[[1,6029,"ava"]],[6029,6029],[6032,6032]]],[1562286216670,["GJX@GJXAIOU",[[1,6033,"\n"]],[6032,6032],[6033,6033]]],[1562286221678,["GJX@GJXAIOU",[[1,6033,"public static void** method(){}"]],[6033,6033],[6064,6064]]],[1562286224235,["GJX@GJXAIOU",[[-1,6070,"**public static void** method(){}"]],[6070,6103],[6070,6070]]],[1562286224651,["GJX@GJXAIOU",[[-1,6071,"\n"]],[6070,6070],[6069,6069]]],[1562286227865,["GJX@GJXAIOU",[[-1,6051,"**"]],[6053,6053],[6051,6051]]],[1562286230993,["GJX@GJXAIOU",[[1,6061,"\n"]],[6061,6061],[6062,6062]]],[1562286330503,["GJX@GJXAIOU",[[-1,6724,"\n"]],[6724,6724],[6723,6723]]],[1562286331490,["GJX@GJXAIOU",[[-1,6742,"\n"]],[6742,6742],[6741,6741]]],[1562286334001,["GJX@GJXAIOU",[[-1,6742,"• "]],[6742,6744],[6742,6742]]],[1562286334870,["GJX@GJXAIOU",[[-1,6724,"•"]],[6724,6725],[6724,6724]]],[1562286335736,["GJX@GJXAIOU",[[-1,6704," "]],[6705,6705],[6704,6704]]],[1562286336570,["GJX@GJXAIOU",[[-1,6723," "]],[6724,6724],[6723,6723]]],[1562286337942,["GJX@GJXAIOU",[[-1,6703,"•"]],[6704,6704],[6703,6703]]],[1562286342728,["GJX@GJXAIOU",[[1,6703,"- "]],[6703,6703],[6705,6705]]],[1562286344490,["GJX@GJXAIOU",[[1,6724,"- "]],[6724,6724],[6726,6726]]],[1562286346241,["GJX@GJXAIOU",[[1,6742,"- "]],[6742,6742],[6744,6744]]],[1562286370088,["GJX@GJXAIOU",[[1,22,"["]],[22,22],[23,23]]],[1562286374361,["GJX@GJXAIOU",[[-1,30," "]],[31,31],[30,30]]],[1562286379000,["GJX@GJXAIOU",[[1,30,"]("]],[30,30],[32,32]]],[1562286379031,["GJX@GJXAIOU",[[1,40,")https://"]],[32,32],[32,40]]],[1562286384489,["GJX@GJXAIOU",[[-1,40,")https://"]],[32,41],[32,32]]],[1562286386996,["GJX@GJXAIOU",[[1,93,"https://)"]],[93,93],[102,102]]],[1562286390918,["GJX@GJXAIOU",[[-1,93,"https://"]],[93,101],[93,93]]]],null,"GJX@GJXAIOU"]]}