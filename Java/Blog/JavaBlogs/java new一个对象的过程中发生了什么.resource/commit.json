{"compress":true,"commitItems":[["1beabe15-3a89-4bf7-87f9-7118f1131081",1569110756534,"# java new一个对象的过程中发生了什么 \n\n2019-02-13 19:57\n\njava在new一个对象的时候，会先查看对象所属的类有没有被加载到内存，如果没有的话，就会先通过类的全限定名来加载。加载并初始化类完成后，再进行对象的创建工作。\n\n我们先假设是第一次使用该类，这样的话new一个对象就可以分为两个过程：加载并初始化类和创建对象。\n\n**一、类加载过程（第一次使用该类）**\n\njava是使用双亲委派模型来进行类的加载的，所以在描述类加载过程前，我们先看一下它的工作过程：\n\n双亲委托模型的工作过程是：如果一个类加载器（ClassLoader）收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要加载的类）时，子加载器才会尝试自己去加载。\n\n使用双亲委托机制的好处是：能够有效确保一个类的全局唯一性，当程序中出现多个限定名相同的类时，类加载器在执行加载时，始终只会加载其中的某一个类。\n\n**1、加载**\n\n由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例\n\n**2、验证**\n\n格式验证：验证是否符合class文件规范\n\n语义验证：检查一个被标记为final的类型是否包含子类；检查一个类中的final方法是否被子类进行重写；确保父类和子类之间没有不兼容的一些方法声明（比如方法签名相同，但方法的返回值不同）\n\n操作验证：在操作数栈中的数据必须进行正确的操作，对常量池中的各种符号引用执行验证（通常在解析阶段执行，检查是否可以通过符号引用中描述的全限定名定位到指定类型上，以及类成员信息的访问修饰符是否允许访问等）\n\n**3、准备**\n\n为类中的所有静态变量分配内存空间，并为其设置一个初始值（由于还没有产生对象，实例变量不在此操作范围内）\n\n被final修饰的static变量（常量），会直接赋值；\n\n**4、解析**\n\n将常量池中的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法），这个可以在初始化之后再执行。\n\n解析需要静态绑定的内容。 // 所有不会被重写的方法和域都会被静态绑定\n\n**以上2、3、4三个阶段又合称为链接阶段，链接阶段要做的是将加载到JVM中的二进制字节流的类数据信息合并到JVM的运行时状态中。**\n\n**5、初始化（先父后子）**\n\n5.1 为静态变量赋值\n\n5.2 执行static代码块\n\n注意：static代码块只有jvm能够调用\n\n如果是多线程需要同时初始化一个类，仅仅只能允许其中一个线程对其执行初始化操作，其余线程必须等待，只有在活动线程执行完对类的初始化操作之后，才会通知正在等待的其他线程。\n\n因为子类存在对父类的依赖，所以类的加载顺序是先加载父类后加载子类，初始化也一样。不过，父类初始化时，子类静态变量的值也有有的，是默认值。\n\n最终，方法区会存储当前类类信息，包括类的静态变量、类初始化代码（定义静态变量时的赋值语句 和 静态初始化代码块）、实例变量定义、实例初始化代码（定义实例变量时的赋值语句实例代码块和构造方法）和实例方法，还有父类的类信息引用。\n\n**二、创建对象**\n\n**1、在堆区分配对象需要的内存**\n\n分配的内存包括本类和父类的所有实例变量，但不包括任何静态变量\n\n**2、对所有实例变量赋默认值**\n\n将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值\n\n**3、执行实例初始化代码**\n\n初始化顺序是先初始化父类再初始化子类，初始化时先执行实例代码块然后是构造方法\n\n**4、如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它**\n\n需要注意的是，每个子类对象持有父类对象的引用，可在内部通过super关键字来调用父类对象，但在外部不可访问\n\n补充：\n\n通过实例引用调用实例方法的时候，先从方法区中对象的实际类型信息找，找不到的话再去父类类型信息中找。\n\n如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要经过很多次查找。这时候大多系统会采用一种称为虚方法表的方法来优化调用的效率。\n\n所谓虚方法表，就是在类加载的时候，为每个类创建一个表，这个表包括该类的对象所有动态绑定的方法及其地址，包括父类的方法，但一个方法只有一条记录，子类重写了父类方法后只会保留子类的。当通过对象动态绑定方法的时候，只需要查找这个表就可以了，而不需要挨个查找每个父类。",[[1569110700941,["GJX@GJXAIOU",[[-1,26,"2019-02-13 19:57"]],[26,42],[26,26]]],[1569110719358,["GJX@GJXAIOU",[[1,28,"**"],[1,108,"**"]],[28,108],[28,112]]],[1569110729798,["GJX@GJXAIOU",[[-1,164,"**"]],[166,166],[164,164]]],[1569110730893,["GJX@GJXAIOU",[[-1,180,"**"]],[182,182],[180,180]]],[1569110733593,["GJX@GJXAIOU",[[1,164,"## "]],[164,164],[183,183]]],[1569110737958,["GJX@GJXAIOU",[[-1,23," "],[1,24," "],[1,34," "]],[34,34],[35,35]]],[1569110739197,["GJX@GJXAIOU",[[1,36," "]],[36,36],[37,37]]],[1569110741158,["GJX@GJXAIOU",[[1,40," "]],[40,40],[41,41]]],[1569110743142,["GJX@GJXAIOU",[[1,10," "]],[10,10],[11,11]]],[1569110747249,["GJX@GJXAIOU",[[-1,2,"j"]],[3,3],[2,2]]],[1569110751916,["GJX@GJXAIOU",[[1,2,"使用 "]],[2,2],[4,4]]],[1569110753328,["GJX@GJXAIOU",[[1,4,"J"]],[4,4],[5,5]]],[1569110753354,["GJX@GJXAIOU",[[1,4," "]],[5,5],[6,6]]],[1569110755015,["GJX@GJXAIOU",[[-1,6," "]],[7,7],[6,6]]],[1569110764575,["GJX@GJXAIOU",[[-1,21,"中发生了什么 "]],[21,28],[21,21]]],[1569110767974,["GJX@GJXAIOU",[[-1,24,"\n"]],[24,24],[23,23]]],[1569110808851,["GJX@GJXAIOU",[[1,131," "]],[131,131],[132,132]]],[1569110810674,["GJX@GJXAIOU",[[1,135," "]],[135,135],[136,136]]],[1569110833830,["GJX@GJXAIOU",[[1,186,"**"],[1,207,"**"]],[186,207],[186,211]]],[1569110884413,["GJX@GJXAIOU",[[-1,503,"\n"]],[503,503],[502,502]]],[1569110886317,["GJX@GJXAIOU",[[-1,601,"\n"]],[601,601],[600,600]]],[1569110890782,["GJX@GJXAIOU",[[1,494,"- "]],[494,494],[496,496]]],[1569110894121,["GJX@GJXAIOU",[[1,594,"- "]],[594,594],[596,596]]],[1569110898470,["GJX@GJXAIOU",[[1,626,"-"]],[626,626],[627,627]]],[1569110900200,["GJX@GJXAIOU",[[-1,626,"-"]],[627,627],[626,626]]],[1569110901030,["GJX@GJXAIOU",[[-1,626,"\n"]],[626,626],[625,625]]],[1569110902286,["GJX@GJXAIOU",[[-1,720,"\n"]],[720,720],[719,719]]],[1569110905389,["GJX@GJXAIOU",[[1,605,"- "],[1,626,"- "],[1,720,"- "]],[605,821],[607,827]]],[1569110907102,["GJX@GJXAIOU",[[1,605,"  "],[1,628,"  "],[1,724,"  "]],[607,827],[609,833]]],[1569110910824,["GJX@GJXAIOU",[[-1,844,"\n"]],[844,844],[843,843]]],[1569110913400,["GJX@GJXAIOU",[[1,835,"- "]],[835,835],[837,837]]],[1569110916921,["GJX@GJXAIOU",[[1,846,"- "]],[846,846],[848,848]]],[1569110917910,["GJX@GJXAIOU",[[1,846,"  "]],[848,848],[850,850]]],[1569110922581,["GJX@GJXAIOU",[[-1,902,"\n"]],[903,903],[902,902]]],[1569110924319,["GJX@GJXAIOU",[[1,902,"- "]],[902,902],[904,904]]],[1569110925985,["GJX@GJXAIOU",[[1,902,"  "]],[904,904],[906,906]]],[1569110929034,["GJX@GJXAIOU",[[1,936,"- "]],[936,936],[938,938]]],[1569110930997,["GJX@GJXAIOU",[[-1,947,"\n"]],[947,947],[946,946]]],[1569110933514,["GJX@GJXAIOU",[[1,947,"  - "]],[947,947],[951,951]]],[1569110935453,["GJX@GJXAIOU",[[-1,1017,"\n"]],[1017,1017],[1016,1016]]],[1569110938625,["GJX@GJXAIOU",[[1,1017,"- "]],[1017,1017],[1019,1019]]],[1569110940462,["GJX@GJXAIOU",[[1,1017,"  "]],[1019,1019],[1021,1021]]],[1569110957912,["GJX@GJXAIOU",[[1,1127,"- "]],[1127,1127],[1129,1129]]],[1569110969038,["GJX@GJXAIOU",[[1,1468,"## "]],[1468,1468],[1481,1481]]],[1569110971673,["GJX@GJXAIOU",[[-1,1471,"**"]],[1473,1473],[1471,1471]]],[1569110974750,["GJX@GJXAIOU",[[-1,1477,"**"]],[1479,1479],[1477,1477]]],[1569111027928,["GJX@GJXAIOU",[[1,573,"·"]],[573,573],[574,574]]],[1569111029183,["GJX@GJXAIOU",[[-1,573,"·"]],[574,574],[573,573]]],[1569111029703,["GJX@GJXAIOU",[[1,573,"`"]],[573,573],[574,574]]],[1569111031358,["GJX@GJXAIOU",[[1,589,"`"]],[589,589],[590,590]]],[1569111033427,["GJX@GJXAIOU",[[1,535," "]],[535,535],[536,536]]],[1569111034439,["GJX@GJXAIOU",[[1,539," "]],[539,539],[540,540]]],[1569111044158,["GJX@GJXAIOU",[[1,596,"."]],[596,596],[597,597]]],[1569111045511,["GJX@GJXAIOU",[[-1,596,"."]],[597,597],[596,596]]],[1569111046169,["GJX@GJXAIOU",[[1,596,"。"]],[596,596],[597,597]]],[1569111048567,["GJX@GJXAIOU",[[1,634,"；"]],[634,634],[635,635]]],[1569111064449,["GJX@GJXAIOU",[[1,675," "]],[675,675],[676,676]]],[1569111066110,["GJX@GJXAIOU",[[1,681," "]],[681,681],[682,682]]],[1569111134783,["GJX@GJXAIOU",[[1,915," "]],[915,915],[916,916]]],[1569111136303,["GJX@GJXAIOU",[[1,921," "]],[921,921],[922,922]]],[1569111137825,["GJX@GJXAIOU",[[1,925," "]],[925,925],[926,926]]],[1569111139611,["GJX@GJXAIOU",[[1,932," "]],[932,932],[933,933]]],[1569111208544,["GJX@GJXAIOU",[[-1,1158,"5.1"]],[1158,1161],[1158,1158]]],[1569111209968,["GJX@GJXAIOU",[[-1,1157,"\n"]],[1158,1158],[1157,1157]]],[1569111211414,["GJX@GJXAIOU",[[1,1158,"  "]],[1157,1157],[1159,1159]]],[1569111211866,["GJX@GJXAIOU",[[1,1159,"-"]],[1159,1159],[1160,1160]]],[1569111212063,["GJX@GJXAIOU",[[1,1161," "]],[1160,1160],[1161,1161]]],[1569111215533,["GJX@GJXAIOU",[[-1,1170,"\n5.2"]],[1170,1174],[1170,1170]]],[1569111216421,["GJX@GJXAIOU",[[1,1171,"  "]],[1170,1170],[1172,1172]]],[1569111216791,["GJX@GJXAIOU",[[1,1172,"-"]],[1172,1172],[1173,1173]]],[1569111221877,["GJX@GJXAIOU",[[-1,1161," "]],[1162,1162],[1161,1161]]],[1569111227436,["GJX@GJXAIOU",[[-1,1185,"\n"]],[1185,1185],[1184,1184]]],[1569111380278,["GJX@GJXAIOU",[[-1,494,"- "]],[494,496],[494,494]]],[1569111381806,["GJX@GJXAIOU",[[-1,494,"**"],[-1,500,"**"]],[494,494],[494,498]]],[1569111382581,["GJX@GJXAIOU",[[1,494,"### "]],[494,498],[502,502]]],[1569111386597,["GJX@GJXAIOU",[[-1,498,"1、"]],[500,500],[498,498]]],[1569111388047,["GJX@GJXAIOU",[[1,498,"（）"]],[498,498],[500,500]]],[1569111389584,["GJX@GJXAIOU",[[1,499,"一"]],[499,499],[500,500]]],[1569111397077,["GJX@GJXAIOU",[[-1,600,"**"],[-1,606,"**"]],[606,606],[600,604]]],[1569111399685,["GJX@GJXAIOU",[[-1,598,"- 2、"]],[598,602],[598,598]]],[1569111404007,["GJX@GJXAIOU",[[1,598,"### （）"]],[598,598],[604,604]]],[1569111405983,["GJX@GJXAIOU",[[1,603,"二"]],[603,603],[604,604]]],[1569111410398,["GJX@GJXAIOU",[[-1,608,"  "],[-1,634,"  "],[-1,734,"  "]],[610,840],[608,834]]],[1569111416189,["GJX@GJXAIOU",[[-1,837,"**"],[-1,843,"**"]],[838,838],[837,841]]],[1569111418726,["GJX@GJXAIOU",[[-1,835,"- 3、"]],[835,839],[835,835]]],[1569111422238,["GJX@GJXAIOU",[[1,835,"### （）"]],[835,835],[841,841]]],[1569111424594,["GJX@GJXAIOU",[[1,840,"三"]],[840,840],[841,841]]],[1569111427528,["GJX@GJXAIOU",[[-1,941,"**"],[-1,947,"**"]],[944,944],[941,945]]],[1569111430334,["GJX@GJXAIOU",[[-1,939,"- 4、"]],[939,943],[939,939]]],[1569111433766,["GJX@GJXAIOU",[[1,939,"### （）"]],[939,939],[945,945]]],[1569111435320,["GJX@GJXAIOU",[[1,944,"是"]],[944,944],[945,945]]],[1569111436484,["GJX@GJXAIOU",[[-1,944,"是"]],[945,945],[944,944]]],[1569111438171,["GJX@GJXAIOU",[[1,944,"四"]],[944,944],[945,945]]],[1569111441373,["GJX@GJXAIOU",[[1,852,"****"]],[852,852],[854,854]]],[1569111445967,["GJX@GJXAIOU",[[-1,845,"  ****"]],[854,854],[850,850]]],[1569111447887,["GJX@GJXAIOU",[[-1,899,"  "]],[907,907],[905,905]]],[1569111451421,["GJX@GJXAIOU",[[1,898,"；"]],[898,898],[899,899]]],[1569111460342,["GJX@GJXAIOU",[[-1,1128,"**"],[-1,1141,"**"]],[1133,1133],[1128,1139]]],[1569111463231,["GJX@GJXAIOU",[[-1,1126,"- 5、"]],[1126,1130],[1126,1126]]],[1569111467583,["GJX@GJXAIOU",[[1,1126,"### （）"]],[1126,1126],[1132,1132]]],[1569111469234,["GJX@GJXAIOU",[[1,1131,"五"]],[1131,1131],[1132,1132]]],[1569111476264,["GJX@GJXAIOU",[[-1,1143,"  "],[-1,1155,"  "]],[1147,1169],[1145,1165]]],[1569111536554,[null,[[1,845,"- 为类"],[-1,846,"****"]],[845,845],[846,846]]],[1569111536555,[null,[[-1,845,"- 为类"],[1,850,"****"]],[846,846],[845,845]]],[1569111480942,["GJX@GJXAIOU",[[1,1167,"\n"]],[1167,1167],[1168,1168]]],[1569111497366,["GJX@GJXAIOU",[[-1,1471,"**"],[-1,1487,"**"]],[1473,1473],[1471,1485]]],[1569111500300,["GJX@GJXAIOU",[[-1,1471,"1、"]],[1471,1473],[1471,1471]]],[1569111504135,["GJX@GJXAIOU",[[1,1471,"### （）"]],[1471,1471],[1477,1477]]],[1569111506125,["GJX@GJXAIOU",[[1,1476,"一"]],[1476,1476],[1477,1477]]],[1569111510265,["GJX@GJXAIOU",[[-1,1524,"**"],[-1,1539,"**"]],[1528,1528],[1524,1537]]],[1569111512597,["GJX@GJXAIOU",[[-1,1524,"2、"]],[1524,1526],[1524,1524]]],[1569111516376,["GJX@GJXAIOU",[[1,1524,"### （）"]],[1524,1524],[1530,1530]]],[1569111517985,["GJX@GJXAIOU",[[1,1529,"二"]],[1529,1529],[1530,1530]]],[1569111520436,["GJX@GJXAIOU",[[-1,1573,"**"],[-1,1586,"**"]],[1575,1575],[1573,1584]]],[1569111522518,["GJX@GJXAIOU",[[-1,1573,"3、"]],[1573,1575],[1573,1573]]],[1569111526999,["GJX@GJXAIOU",[[1,1573,"### （）"]],[1573,1573],[1579,1579]]],[1569111529633,["GJX@GJXAIOU",[[1,1578,"三"]],[1578,1578],[1579,1579]]],[1569111534389,["GJX@GJXAIOU",[[-1,1631,"**"],[-1,1703,"**"]],[1634,1634],[1631,1701]]],[1569111536188,["GJX@GJXAIOU",[[-1,1631,"4、"]],[1633,1633],[1631,1631]]],[1569111596551,[null,[[1,845,"- 为类"],[-1,846,"****"]],[845,845],[846,846]]],[1569111596551,[null,[[-1,845,"- 为类"],[1,850,"****"]],[846,846],[845,845]]],[1569111538046,["GJX@GJXAIOU",[[1,1631,"（）"]],[1631,1631],[1633,1633]]],[1569111541391,["GJX@GJXAIOU",[[1,1632,"四"]],[1632,1632],[1633,1633]]],[1569111543357,["GJX@GJXAIOU",[[1,1631,"### "]],[1633,1633],[1706,1706]]],[1569111548317,["GJX@GJXAIOU",[[1,1763,"### "]],[1763,1763],[1770,1770]]]],null,"GJX@GJXAIOU"],["ffb47062-a321-491a-bc01-0bf044211667",1569113318369,"# 使用 Java new 一个对象的过程\n\n\n**java 在 new 一个对象的时候，会先查看对象所属的类有没有被加载到内存，如果没有的话，就会先通过类的全限定名来加载。加载并初始化类完成后，再进行对象的创建工作。**\n\n我们先假设是第一次使用该类，这样的话 new 一个对象就可以分为两个过程：加载并初始化类和创建对象。\n\n## 一、类加载过程（第一次使用该类）\n\n**java是使用双亲委派模型来进行类的加载的**，所以在描述类加载过程前，我们先看一下它的工作过程：\n\n双亲委托模型的工作过程是：如果一个类加载器（ClassLoader）收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要加载的类）时，子加载器才会尝试自己去加载。\n\n使用双亲委托机制的好处是：能够有效确保一个类的全局唯一性，当程序中出现多个限定名相同的类时，类加载器在执行加载时，始终只会加载其中的某一个类。\n\n### （一）加载\n由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到 JVM 内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的`java.lang.Class`对象实例。\n\n### （二）验证\n- 格式验证：验证是否符合class文件规范；\n- 语义验证：检查一个被标记为final的类型是否包含子类；检查一个类中的 final 方法是否被子类进行重写；确保父类和子类之间没有不兼容的一些方法声明（比如方法签名相同，但方法的返回值不同）\n- 操作验证：在操作数栈中的数据必须进行正确的操作，对常量池中的各种符号引用执行验证（通常在解析阶段执行，检查是否可以通过符号引用中描述的全限定名定位到指定类型上，以及类成员信息的访问修饰符是否允许访问等）\n\n### （三）准备\n- 为类中的所有静态变量分配内存空间，并为其设置一个初始值（由于还没有产生对象，实例变量不在此操作范围内）；\n- 被 final 修饰的 static 变量（常量），会直接赋值；\n\n### （四）解析\n  - 将常量池中的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法），这个可以在初始化之后再执行。\n  - 解析需要静态绑定的内容。 // 所有不会被重写的方法和域都会被静态绑定\n\n**以上2、3、4三个阶段又合称为链接阶段，链接阶段要做的是将加载到JVM中的二进制字节流的类数据信息合并到JVM的运行时状态中。**\n\n### （五）初始化（先父后子）\n- 为静态变量赋值\n- 执行static代码块\n\n注意：static代码块只有jvm能够调用\n\n如果是多线程需要同时初始化一个类，仅仅只能允许其中一个线程对其执行初始化操作，其余线程必须等待，只有在活动线程执行完对类的初始化操作之后，才会通知正在等待的其他线程。\n\n因为子类存在对父类的依赖，所以类的加载顺序是先加载父类后加载子类，初始化也一样。不过，父类初始化时，子类静态变量的值也有有的，是默认值。\n\n最终，方法区会存储当前类类信息，包括类的静态变量、类初始化代码（定义静态变量时的赋值语句 和 静态初始化代码块）、实例变量定义、实例初始化代码（定义实例变量时的赋值语句实例代码块和构造方法）和实例方法，还有父类的类信息引用。\n\n## 二、创建对象\n\n### （一）在堆区分配对象需要的内存\n\n分配的内存包括本类和父类的所有实例变量，但不包括任何静态变量\n\n### （二）对所有实例变量赋默认值\n\n将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值\n\n### （三）执行实例初始化代码\n\n初始化顺序是先初始化父类再初始化子类，初始化时先执行实例代码块然后是构造方法\n\n### （四）如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它\n\n需要注意的是，每个子类对象持有父类对象的引用，可在内部通过super关键字来调用父类对象，但在外部不可访问\n\n### 补充：\n\n通过实例引用调用实例方法的时候，先从方法区中对象的实际类型信息找，找不到的话再去父类类型信息中找。\n\n如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要经过很多次查找。这时候大多系统会采用一种称为虚方法表的方法来优化调用的效率。\n\n所谓虚方法表，就是在类加载的时候，为每个类创建一个表，这个表包括该类的对象所有动态绑定的方法及其地址，包括父类的方法，但一个方法只有一条记录，子类重写了父类方法后只会保留子类的。当通过对象动态绑定方法的时候，只需要查找这个表就可以了，而不需要挨个查找每个父类。",[[1569113264555,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1569113265804,["GJX@GJXAIOU",[[1,0,"---\nflag: red\n---"]],[0,0],[17,17]]]],null,"GJX@GJXAIOU"]]}