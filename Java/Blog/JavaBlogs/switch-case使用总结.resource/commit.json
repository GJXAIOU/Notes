{"compress":true,"commitItems":[["f684f788-04b7-46b7-80e7-a76c71825d72",1564801366763,"",[[1564801320414,["GJX@GJXAIOU",[[1,0,"# switch-case使用总结\n\n\n\n"]],[0,0],[20,20]]],[1564801332608,["GJX@GJXAIOU",[[1,20,"1.switch-case注意事项：\n\n    switch(A),括号中A的取值只能是整型或者可以转换为整型的数值类型，比如byte、short、int、char、还有枚举；需要强调的是：long和String类型是不能作用在switch语句上的。\n\n     case B：C；case是常量表达式，也就是说B的取值只能是常量（需要定义一个final型的常量,后面会详细介绍原因）或者int、byte、short、char（比如1、2、3、200000000000（注意了这是整型）），如果你需要在此处写一个表达式或者变量，那么就要加上单引号； case后的语句可以不用大括号，就是C不需要用大括号包裹着；\n\n     default就是如果没有符合的case就执行它,default并不是必须的."]],[20,20],[371,371]]],[1564801338840,["GJX@GJXAIOU",[[1,20,"@"],[-1,40,"   "],[1,43,"   "],[-1,147,"    "],[1,151,"    "],[-1,327,"    "],[1,331,"    "]],[20,20],[21,21]]],[1564801340119,["GJX@GJXAIOU",[[-1,20,"@"]],[21,21],[20,20]]],[1564801341041,["GJX@GJXAIOU",[[1,20,"## "]],[20,20],[41,41]]],[1564801345696,["GJX@GJXAIOU",[[-1,43,"    "]],[43,47],[43,43]]],[1564801349055,["GJX@GJXAIOU",[[-1,147,"    "]],[146,150],[146,146]]],[1564801350909,["GJX@GJXAIOU",[[-1,146," "]],[147,147],[146,146]]],[1564801355061,["GJX@GJXAIOU",[[-1,321,"     "]],[321,326],[321,321]]],[1564801654292,["GJX@GJXAIOU",[[1,43,"\n"]],[42,42],[43,43]]],[1564801655480,["GJX@GJXAIOU",[[1,43,"```"]],[43,43],[46,46]]],[1564801655503,["GJX@GJXAIOU",[[1,46,"language\n```\n"]],[46,46],[46,54]]],[1564801656637,["GJX@GJXAIOU",[[-1,46,"language"],[1,54,"j"]],[46,54],[47,47]]],[1564801657152,["GJX@GJXAIOU",[[1,47,"ava"]],[47,47],[50,50]]],[1564801657198,["GJX@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1564801660466,["GJX@GJXAIOU",[[1,51," switch(A){\n            case B:\n                // 处理方式B\n                break;\n            case 1:\n                // 处理方式C\n                break;\n            ...\n            \n            default:\n                // 默认处理方式\n                break;\n    }"]],[51,51],[303,303]]],[1564801674012,["GJX@GJXAIOU",[[-1,73,"  "],[-1,83,"  "],[-1,108,"  "],[-1,141,"  "],[-1,151,"  "],[-1,176," "],[-1,191," "],[-1,199,"  "],[-1,225,"  "],[-1,228," "],[-1,239," "],[-1,249,"  "],[-1,275,"  "]],[75,297],[73,275]]],[1564801674734,["GJX@GJXAIOU",[[-1,71,"  "],[-1,81,"  "],[-1,104,"  "],[-1,133,"  "],[-1,143,"  "],[-1,166," "],[-1,179," "],[-1,187,"  "],[-1,209,"  "],[-1,212," "],[-1,221," "],[-1,231,"  "],[-1,255,"  "]],[73,275],[71,253]]],[1564801675216,["GJX@GJXAIOU",[[-1,69,"  "],[-1,79,"  "],[-1,100,"  "],[-1,125,"  "],[-1,135,"  "],[-1,156," "],[-1,167," "],[-1,175,"  "],[-1,193,"  "],[-1,196," "],[-1,203," "],[-1,213,"  "],[-1,235,"  "]],[71,253],[69,231]]],[1564801677007,["GJX@GJXAIOU",[[-1,67,"  "],[-1,77,"  "],[-1,96,"  "],[-1,117,"  "],[-1,127,"  "],[-1,146," "],[-1,155," "],[-1,163,"  "],[-1,177,"  "],[-1,180," "],[-1,185," "],[-1,195,"  "],[-1,215,"  "]],[69,231],[67,209]]],[1564801694077,["GJX@GJXAIOU",[[1,234,"**"],[1,257,"**"]],[234,257],[234,261]]],[1564801697797,["GJX@GJXAIOU",[[1,221,"- "]],[221,221],[223,223]]],[1564801700183,["GJX@GJXAIOU",[[1,330,"- "]],[330,330],[332,332]]],[1564801703072,["GJX@GJXAIOU",[[1,507,"- "]],[507,507],[509,509]]],[1564801717540,["GJX@GJXAIOU",[[1,298,"**"],[1,327,"**"]],[298,327],[298,331]]],[1564801829744,["GJX@GJXAIOU",[[1,360,"**"],[1,369,"**"]],[360,369],[360,373]]],[1564801911072,["GJX@GJXAIOU",[[1,462,"**"],[1,481,"**"]],[462,481],[462,485]]],[1564801934062,["GJX@GJXAIOU",[[-1,343,"C"]],[344,344],[343,343]]],[1564801943668,["GJX@GJXAIOU",[[1,486,"\n"]],[486,486],[487,487]]],[1564801945245,["GJX@GJXAIOU",[[1,487,"- "]],[487,487],[489,489]]],[1564801945512,["GJX@GJXAIOU",[[1,490,"c"]],[489,489],[490,490]]],[1564801945829,["GJX@GJXAIOU",[[1,490,"hu"]],[490,490],[492,492]]],[1564801946588,["GJX@GJXAIOU",[[-1,490,"huc"]],[492,492],[489,489]]],[1564801948006,["GJX@GJXAIOU",[[1,489,"处理 "]],[489,489],[491,491]]],[1564801950807,["GJX@GJXAIOU",[[1,491,"方式B"]],[491,491],[494,494]]],[1564801950831,["GJX@GJXAIOU",[[1,493," "]],[494,494],[495,495]]],[1564801951224,["GJX@GJXAIOU",[[1,495,"："]],[495,495],[496,496]]],[1564801954276,["GJX@GJXAIOU",[[-1,515,"C"]],[516,516],[515,515]]],[1564801959744,["GJX@GJXAIOU",[[1,515,"处理方式语句"]],[515,515],[521,521]]],[1564801968957,["GJX@GJXAIOU",[[-1,574,"."]],[575,575],[574,574]]],[1564801969536,["GJX@GJXAIOU",[[1,574,"；"]],[574,574],[575,575]]],[1564802130301,["GJX@GJXAIOU",[[1,576,"- \n"]],[575,575],[578,578]]],[1564802130446,["GJX@GJXAIOU",[[-1,576,"- "]],[578,578],[577,577]]],[1564802130588,["GJX@GJXAIOU",[[1,577,"\n"]],[577,577],[578,578]]],[1564802136449,["GJX@GJXAIOU",[[1,576,"2.案例分析：\n\n1.标准型(case后面都有break语句，case后的值都是整数)\n\nint i=3; \n \nswitch(i) \n \n{ \n \ncase 1: \n \nSystem.out.println(1); \n \nbreak; \n \ncase 2: \n \nSystem.out.println(2); \n \nbreak;  \n \ndefault: \n \nSystem.out.println(\"default\"); \n \nbreak; \n \n} \n \n\n2.常量型(case后面都有break语句，case后的值都是常量)\n\n \n\nprivate final int NUM1=1；\nprivate final int NUM2=1；\nint i=3; \nswitch(i) \n{ \ncase NUM1: \nSystem.out.println(1); \nbreak; \ncase NUM2: \nSystem.out.println(2); \nbreak;  \ndefault: \nSystem.out.println(\"default\"); \nbreak; \n} \n\n \n\n3.表达式型(case后面都有break语句，case后的值都是表达式)\n\nint i=3; \n \nint b = 2;\n \nswitch(i) \n \n{ \n \ncase '类名.getId()': \n \nSystem.out.println(1); \n \nbreak; \n \ncase 'b' \n \nSystem.out.println(2); \n \nbreak;  \n \ndefault: \n \nSystem.out.println(\"default\"); \n \nbreak; \n \n}\n\n \n\n3.使用switch时的出错分析：\n\n1）.第二种情况容易出错的情况：\n\n 发现问题\n\nprivate int CLICK_QUERY = 1;\n \nprivate int CLICK_RESET = 2;\n \n@Override\n \npublic void onClick(View v)\n \n{\n \n int tag = (Integer) v.getTag();\n \n switch (tag)\n \n {\n \n  case CLICK_QUERY:\n \n   query();\n \n  break;\n \n  case CLICK_RESET:\n \n   reset();\n \n  break;\n \n }\n \n}\n\n \n\n   编译时一直报错：CLICK_QUERY 和CLICK_RESET——case expressions must be constant expressions\n\n解决问题\n\n   case后面必须跟常量，必须要常量，将上面两个变量声明为final即可。\n\nprivate final int CLICK_QUERY = 1;\n\nprivate final int CLICK_RESET = 2;\n\n2）.下面是switch的简单写法：\n\nswitch（A）{\n\ncase B;\n\n}\n\n   A部分中的值必须是int型的，或者是能够自动进行饮试转换成int型的表达式。也就是说A部分可以是byte\\short\\char\\int型(因为这几种类型都可以自动转换为int型)的。\n\n   其次要强调的是该程序中B部分的值必须是单个byte\\short\\char\\int型的值，或者是final型的变量。\n\n但是final型的变量也是有要求的，也即是它必须是编译时的常量，怎么讲呢，看下面的程序段：\n\nfinal int a = 0;\n\nfinal int b;\n\n   第二个语句就是在编译时不能够被识别出值的变量，因为它没有初始化，当然，这条语句也是错误的。所以总结case后的值可以是常数值或final型的值。再看下面的程序段：\n\npublic class TestSwitch {\n \n public static void main(String[] args){\n \n  byte a = 11;\n \n  switch(a){// C\n \n  case 11 : System.out.println(\" 11 \"); break;\n \n  case 225 : System.out.println(\" 11 \"); break;// D\n \n  }\n \n }\n \n}\n\n \n\n    该代码正确吗？答案是否定的。虽然在 C 处是合法的也即是byte型的a值可以出现在switch中，但是 D处的语句也即是第二个case后的值是225大小超过了byte的范围，所以是错误的。再就是case后的值不能出现重复。因此在使用中要注意。\n\n3.忘记写break的错误\n\n   再就是在使用switch-case中最容易忽视的就是忘记在每个case后处理完后忘记写上break；语句。那它带来的后果是什么呢，下面小程序段会告诉你：\n\npublic class TestSwitchCase {\n \n public static void main(String[] args){\n \n  byte a = 2;\n \n  switch(a){\n \n  case 1 : System.out.println(\" A \");\n \n  case 2 : System.out.println(\" B \");\n \n  case 3 : System.out.println(\" C \");\n \n  case 4 : System.out.println(\" D \");\n \n  default : System.out.println(\" default \");\n \n  }\n \n }\n \n}\n \n=========输出结果为:\n \n B \n \n C \n \n D \n \n default \n \n--------------------------\n\n \n\n看到了吗？连default都执行，注意结束符break;就OK了。"]],[576,576],[3092,3092]]],[1564802138588,["GJX@GJXAIOU",[[-1,576,"2.案例分析：\n\n1.标准型(case后面都有break语句，case后的值都是整数)\n\nint i=3; \n \nswitch(i) \n \n{ \n \ncase 1: \n \nSystem.out.println(1); \n \nbreak; \n \ncase 2: \n \nSystem.out.println(2); \n \nbreak;  \n \ndefault: \n \nSystem.out.println(\"default\"); \n \nbreak; \n \n} \n \n\n2.常量型(case后面都有break语句，case后的值都是常量)\n\n \n\nprivate final int NUM1=1；\nprivate final int NUM2=1；\nint i=3; \nswitch(i) \n{ \ncase NUM1: \nSystem.out.println(1); \nbreak; \ncase NUM2: \nSystem.out.println(2); \nbreak;  \ndefault: \nSystem.out.println(\"default\"); \nbreak; \n} \n\n \n\n3.表达式型(case后面都有break语句，case后的值都是表达式)\n\nint i=3; \n \nint b = 2;\n \nswitch(i) \n \n{ \n \ncase '类名.getId()': \n \nSystem.out.println(1); \n \nbreak; \n \ncase 'b' \n \nSystem.out.println(2); \n \nbreak;  \n \ndefault: \n \nSystem.out.println(\"default\"); \n \nbreak; \n \n}\n\n \n\n3.使用switch时的出错分析：\n\n1）.第二种情况容易出错的情况：\n\n 发现问题\n\nprivate int CLICK_QUERY = 1;\n \nprivate int CLICK_RESET = 2;\n \n@Override\n \npublic void onClick(View v)\n \n{\n \n int tag = (Integer) v.getTag();\n \n switch (tag)\n \n {\n \n  case CLICK_QUERY:\n \n   query();\n \n  break;\n \n  case CLICK_RESET:\n \n   reset();\n \n  break;\n \n }\n \n}\n\n \n\n   编译时一直报错：CLICK_QUERY 和CLICK_RESET——case expressions must be constant expressions\n\n解决问题\n\n   case后面必须跟常量，必须要常量，将上面两个变量声明为final即可。\n\nprivate final int CLICK_QUERY = 1;\n\nprivate final int CLICK_RESET = 2;\n\n2）.下面是switch的简单写法：\n\nswitch（A）{\n\ncase B;\n\n}\n\n   A部分中的值必须是int型的，或者是能够自动进行饮试转换成int型的表达式。也就是说A部分可以是byte\\short\\char\\int型(因为这几种类型都可以自动转换为int型)的。\n\n   其次要强调的是该程序中B部分的值必须是单个byte\\short\\char\\int型的值，或者是final型的变量。\n\n但是final型的变量也是有要求的，也即是它必须是编译时的常量，怎么讲呢，看下面的程序段：\n\nfinal int a = 0;\n\nfinal int b;\n\n   第二个语句就是在编译时不能够被识别出值的变量，因为它没有初始化，当然，这条语句也是错误的。所以总结case后的值可以是常数值或final型的值。再看下面的程序段：\n\npublic class TestSwitch {\n \n public static void main(String[] args){\n \n  byte a = 11;\n \n  switch(a){// C\n \n  case 11 : System.out.println(\" 11 \"); break;\n \n  case 225 : System.out.println(\" 11 \"); break;// D\n \n  }\n \n }\n \n}\n\n \n\n    该代码正确吗？答案是否定的。虽然在 C 处是合法的也即是byte型的a值可以出现在switch中，但是 D处的语句也即是第二个case后的值是225大小超过了byte的范围，所以是错误的。再就是case后的值不能出现重复。因此在使用中要注意。\n\n3.忘记写break的错误\n\n   再就是在使用switch-case中最容易忽视的就是忘记在每个case后处理完后忘记写上break；语句。那它带来的后果是什么呢，下面小程序段会告诉你：\n\npublic class TestSwitchCase {\n \n public static void main(String[] args){\n \n  byte a = 2;\n \n  switch(a){\n \n  case 1 : System.out.println(\" A \");\n \n  case 2 : System.out.println(\" B \");\n \n  case 3 : System.out.println(\" C \");\n \n  case 4 : System.out.println(\" D \");\n \n  default : System.out.println(\" default \");\n \n  }\n \n }\n \n}\n \n=========输出结果为:\n \n B \n \n C \n \n D \n \n default \n \n--------------------------\n\n \n\n看到了吗？连default都执行，注意结束符break;就OK了。"]],[3092,3092],[576,576]]],[1564802140102,["GJX@GJXAIOU",[[1,578,"\n"]],[576,576],[577,577]]],[1564802142739,["GJX@GJXAIOU",[[1,578,"2.案例分析：\n\n1.标准型(case后面都有break语句，case后的值都是整数)\n\n```\nint i=3;  switch(i)  {  case 1:  System.out.println(1);  break;  case 2:  System.out.println(2);  break;   default:  System.out.println(\"default\");  break;  }  \n```\n\n2.常量型(case后面都有break语句，case后的值都是常量)\n\n```\nprivate final int NUM1=1；private final int NUM2=1；int i=3; switch(i) { case NUM1: System.out.println(1); break; case NUM2: System.out.println(2); break;  default: System.out.println(\"default\"); break; } \n```\n\n3.表达式型(case后面都有break语句，case后的值都是表达式)\n\n```\nint i=3;  int b = 2; switch(i)  {  case '类名.getId()':  System.out.println(1);  break;  case 'b'  System.out.println(2);  break;   default:  System.out.println(\"default\");  break;  }\n```\n\n3.使用switch时的出错分析：\n\n1）.第二种情况容易出错的情况：\n\n **发现问题**\n\n```\nprivate int CLICK_QUERY = 1; private int CLICK_RESET = 2; @Override public void onClick(View v) {  int tag = (Integer) v.getTag();  switch (tag)  {   case CLICK_QUERY:    query();   break;   case CLICK_RESET:    reset();   break;  } }\n```\n\n   编译时一直报错：CLICK_QUERY 和CLICK_RESET——case expressions must be constant expressions\n\n**解决问题**\n\n   case后面必须跟常量，必须要常量，将上面两个变量声明为final即可。\n\nprivate final int CLICK_QUERY = 1;\n\nprivate final int CLICK_RESET = 2;\n\n2）.下面是switch的简单写法：\n\nswitch（A）{\n\ncase B;\n\n}\n\n   A部分中的值必须是int型的，或者是能够自动进行饮试转换成int型的表达式。也就是说A部分可以是byte\\short\\char\\int型(因为这几种类型都可以自动转换为int型)的。\n\n   其次要强调的是该程序中B部分的值必须是单个byte\\short\\char\\int型的值，或者是final型的变量。\n\n但是final型的变量也是有要求的，也即是它必须是编译时的常量，怎么讲呢，看下面的程序段：\n\nfinal int a = 0;\n\nfinal int b;\n\n   第二个语句就是在编译时不能够被识别出值的变量，因为它没有初始化，当然，这条语句也是错误的。所以总结case后的值可以是常数值或final型的值。再看下面的程序段：\n\n```\npublic class TestSwitch {  public static void main(String[] args){   byte a = 11;   switch(a){// C   case 11 : System.out.println(\" 11 \"); break;   case 225 : System.out.println(\" 11 \"); break;// D   }  } }\n```\n\n    该代码正确吗？答案是否定的。虽然在 C 处是合法的也即是byte型的a值可以出现在switch中，但是 D处的语句也即是第二个case后的值是225大小超过了byte的范围，所以是错误的。再就是case后的值不能出现重复。因此在使用中要注意。\n\n3.忘记写break的错误\n\n   再就是在使用switch-case中最容易忽视的就是忘记在每个case后处理完后忘记写上break；语句。那它带来的后果是什么呢，下面小程序段会告诉你：\n\n```\npublic class TestSwitchCase {  public static void main(String[] args){   byte a = 2;   switch(a){   case 1 : System.out.println(\" A \");   case 2 : System.out.println(\" B \");   case 3 : System.out.println(\" C \");   case 4 : System.out.println(\" D \");   default : System.out.println(\" default \");   }  } } =========输出结果为:  B   C   D   default  --------------------------\n```\n\n看到了吗？连default都执行，注意结束符break;就OK了。"]],[578,578],[2987,2987]]],[1564802146022,["GJX@GJXAIOU",[[1,578,"## "]],[578,578],[588,588]]],[1564802167655,["GJX@GJXAIOU",[[1,639,"\n"],[1,640,"\n"],[1,650,"\n"],[1,651,"\n"],[1,653,"\n"],[1,654,"\n"],[1,662,"\n"],[1,663,"\n"],[1,686,"\n"],[1,687,"\n"],[1,694,"\n"],[1,695,"\n"],[1,703,"\n"],[1,704,"\n"],[1,727,"\n"],[1,728,"\n"],[1,736,"\n"],[1,737,"\n"],[1,746,"\n"],[1,747,"\n"],[1,778,"\n"],[1,779,"\n"],[1,786,"\n"],[1,787,"\n"],[1,789,"\n"]],[630,790],[815,815]]],[1564802170932,["GJX@GJXAIOU",[[-1,669," "]],[670,670],[669,669]]],[1564802171420,["GJX@GJXAIOU",[[-1,669,"\n"]],[669,669],[668,668]]],[1564802173087,["GJX@GJXAIOU",[[-1,654,"\n"]],[655,655],[654,654]]],[1564802174332,["GJX@GJXAIOU",[[-1,653," "]],[654,654],[653,653]]],[1564802174732,["GJX@GJXAIOU",[[-1,652,"\n"]],[653,653],[652,652]]],[1564802175633,["GJX@GJXAIOU",[[-1,655," "]],[656,656],[655,655]]],[1564802176021,["GJX@GJXAIOU",[[-1,655,"\n"]],[655,655],[654,654]]],[1564802177420,["GJX@GJXAIOU",[[-1,688," "]],[689,689],[688,688]]],[1564802177861,["GJX@GJXAIOU",[[-1,688,"\n"]],[688,688],[687,687]]],[1564802185813,["GJX@GJXAIOU",[[1,655,"  "],[1,664,"  "],[1,688,"  "]],[655,695],[655,701]]],[1564802187188,["GJX@GJXAIOU",[[1,657,"  "],[1,666,"  "],[1,692,"  "]],[655,701],[655,707]]],[1564802189276,["GJX@GJXAIOU",[[1,672,"  "],[1,696,"  "]],[672,707],[674,711]]],[1564802189996,["GJX@GJXAIOU",[[1,674,"  "],[1,698,"  "]],[674,711],[676,715]]],[1564802192461,["GJX@GJXAIOU",[[-1,715,"\n"]],[716,716],[715,715]]],[1564802194958,["GJX@GJXAIOU",[[1,717,"    "]],[717,717],[721,721]]],[1564802197023,["GJX@GJXAIOU",[[1,731,"    "]],[730,730],[734,734]]],[1564802199038,["GJX@GJXAIOU",[[1,736,"  "],[1,761,"  "],[1,762,"  "]],[736,768],[736,774]]],[1564802199292,["GJX@GJXAIOU",[[1,738,"  "],[1,765,"  "],[1,766,"  "]],[736,774],[736,780]]],[1564802199774,["GJX@GJXAIOU",[[1,740,"  "],[1,769,"  "],[1,770,"  "]],[736,780],[736,786]]],[1564802200629,["GJX@GJXAIOU",[[1,742,"  "],[1,773,"  "],[1,774,"  "]],[736,786],[736,792]]],[1564802203477,["GJX@GJXAIOU",[[-1,767,"\n"]],[768,768],[767,767]]],[1564802205774,["GJX@GJXAIOU",[[-1,730,"     "]],[735,735],[730,730]]],[1564802206077,["GJX@GJXAIOU",[[-1,730,"\n"]],[730,730],[729,729]]],[1564802212237,["GJX@GJXAIOU",[[-1,787,"\n"]],[788,788],[787,787]]],[1564802214684,["GJX@GJXAIOU",[[-1,799," "]],[800,800],[799,799]]],[1564802215012,["GJX@GJXAIOU",[[-1,799,"\n"]],[799,799],[798,798]]],[1564802216711,["GJX@GJXAIOU",[[-1,831," "]],[832,832],[831,831]]],[1564802217613,["GJX@GJXAIOU",[[-1,831,"\n"]],[831,831],[830,830]]],[1564802220340,["GJX@GJXAIOU",[[1,789,"  "],[1,799,"  "],[1,831,"  "]],[789,838],[789,844]]],[1564802220876,["GJX@GJXAIOU",[[1,791,"  "],[1,801,"  "],[1,835,"  "]],[789,844],[789,850]]],[1564802223309,["GJX@GJXAIOU",[[1,807,"  "],[1,839,"  "]],[807,850],[809,854]]],[1564802223916,["GJX@GJXAIOU",[[1,809,"  "],[1,841,"  "]],[809,854],[811,858]]],[1564802226388,["GJX@GJXAIOU",[[-1,858,"\n"]],[859,859],[858,858]]],[1564802229549,["GJX@GJXAIOU",[[-1,863," "]],[864,864],[863,863]]],[1564802229989,["GJX@GJXAIOU",[[-1,863,"\n"]],[863,863],[862,862]]],[1564802232540,["GJX@GJXAIOU",[[-1,640," "]],[641,641],[640,640]]],[1564802232852,["GJX@GJXAIOU",[[-1,640,"\n"]],[640,640],[639,639]]],[1564802243792,["GJX@GJXAIOU",[[1,931,"\n"],[1,956,"\n"],[1,965,"\n"],[1,975,"\n"],[1,977,"\n"],[1,988,"\n"],[1,1011,"\n"],[1,1018,"\n"],[1,1029,"\n"],[1,1052,"\n"],[1,1060,"\n"],[1,1069,"\n"],[1,1100,"\n"],[1,1107,"\n"]],[906,1109],[1123,1123]]],[1564802367597,["GJX@GJXAIOU",[[-1,906,"private "],[-1,930,"；\nprivate"],[1,939,";\n       "],[-1,955,"1；\n"],[1,958,"2;\n        "],[-1,966," \n"],[1,968,"\n        "],[-1,977," \n{ \n"],[1,982,"\n        {\n            "],[-1,992," \n"],[1,994,"\n                "],[-1,1016," \n"],[1,1018,"\n                "],[-1,1024," "],[1,1026,"            "],[-1,1036," \n"],[1,1038,"\n                "],[-1,1060," \n"],[1,1062,"\n                "],[1,1068,"\n"],[-1,1070,"\n"],[1,1071,"          "],[-1,1079," \n"],[1,1081,"\n                "],[-1,1111," \n"],[1,1113,"\n                "],[-1,1119," \n} "],[1,1123,"\n        }"]],[906,1123],[1265,1265]]],[1564802372463,["GJX@GJXAIOU",[[-1,924,"        "]],[924,932],[924,924]]],[1564802375901,["GJX@GJXAIOU",[[-1,948,"  "],[-1,959,"  "],[-1,983,"  "],[-1,987," "],[-1,998," "],[-1,1010,"  "],[-1,1063,"  "],[-1,1072," "],[-1,1083," "],[-1,1095,"  "],[-1,1148,"  "],[-1,1157,"  "],[-1,1192,"  "],[-1,1239,"  "],[-1,1248,"  "]],[950,1257],[948,1231]]],[1564802383721,["GJX@GJXAIOU",[[-1,946,"  "],[-1,957,"  "],[-1,977,"  "],[-1,981," "],[-1,990," "],[-1,1002,"  "],[-1,1051,"  "],[-1,1060," "],[-1,1069," "],[-1,1081,"  "],[-1,1130,"  "],[-1,1139,"  "],[-1,1170,"  "],[-1,1215,"  "],[-1,1224,"  "]],[948,1231],[946,1205]]],[1564802384141,["GJX@GJXAIOU",[[-1,944,"  "],[-1,955,"  "],[-1,971,"  "],[-1,975," "],[-1,982," "],[-1,994,"  "],[-1,1039,"  "],[-1,1048," "],[-1,1055," "],[-1,1067,"  "],[-1,1112,"  "],[-1,1121,"  "],[-1,1148,"  "],[-1,1191,"  "],[-1,1200,"  "]],[946,1205],[944,1179]]],[1564802384791,["GJX@GJXAIOU",[[-1,942,"  "],[-1,953,"  "],[-1,965,"  "],[-1,969," "],[-1,974," "],[-1,986,"  "],[-1,1027,"  "],[-1,1036," "],[-1,1041," "],[-1,1053,"  "],[-1,1094,"  "],[-1,1103,"  "],[-1,1126,"  "],[-1,1167,"  "],[-1,1176,"  "]],[944,1179],[942,1153]]],[1564802388316,["GJX@GJXAIOU",[[-1,960,"\n"]],[961,961],[960,960]]],[1564802410674,["GJX@GJXAIOU",[[1,1209,"\n"],[1,1210,"\n"],[1,1220,"\n"],[1,1221,"\n"],[1,1231,"\n"],[1,1232,"\n"],[1,1234,"\n"],[1,1235,"\n"],[1,1254,"\n"],[1,1255,"\n"],[1,1278,"\n"],[1,1279,"\n"],[1,1286,"\n"],[1,1287,"\n"],[1,1296,"\n"],[1,1297,"\n"],[1,1320,"\n"],[1,1321,"\n"],[1,1329,"\n"],[1,1330,"\n"],[1,1339,"\n"],[1,1340,"\n"],[1,1371,"\n"],[1,1372,"\n"],[1,1379,"\n"],[1,1380,"\n"]],[1200,1381],[1407,1407]]],[1564802500530,["GJX@GJXAIOU",[[1,1200," "],[1,1205," "],[1,1206," "],[-1,1208," \n \n"],[1,1212,"\n        "],[-1,1224,"\n"],[1,1225,"       "],[1,1231," "],[1,1235,"{"],[-1,1237,"\n{ \n \n"],[1,1243,"           "],[-1,1261," \n \n"],[1,1265,"\n                "],[-1,1287," \n \n"],[1,1291,"\n                "],[-1,1297," \n \n"],[1,1301,"\n            "],[-1,1309," \n \n"],[1,1313,":\n                "],[-1,1335," \n \n"],[1,1339,"\n                "],[1,1345,"\n  "],[-1,1347,"\n \n"],[1,1350,"        "],[-1,1358," "],[-1,1361,"\n"],[1,1362,"               "],[-1,1392," \n \n"],[1,1396,"\n                "],[-1,1402," \n \n"],[1,1406,"\n\n        "]],[1200,1407],[1530,1530]]],[1564802505759,["GJX@GJXAIOU",[[-1,1218,"  "],[-1,1231,"  "],[-1,1252,"  "],[-1,1297,"  "],[-1,1336,"  "],[-1,1345,"  "],[-1,1381,"  "],[-1,1420,"  "],[-1,1429,"  "],[-1,1464,"  "],[-1,1511,"  "],[-1,1521,"  "]],[1220,1530],[1218,1506]]],[1564802506060,["GJX@GJXAIOU",[[-1,1216,"  "],[-1,1229,"  "],[-1,1248,"  "],[-1,1289,"  "],[-1,1326,"  "],[-1,1335,"  "],[-1,1367,"  "],[-1,1404,"  "],[-1,1413,"  "],[-1,1444,"  "],[-1,1489,"  "],[-1,1499,"  "]],[1218,1506],[1216,1482]]],[1564802506404,["GJX@GJXAIOU",[[-1,1214,"  "],[-1,1227," "],[-1,1230," "],[-1,1244,"  "],[-1,1281,"  "],[-1,1316,"  "],[-1,1325,"  "],[-1,1353,"  "],[-1,1388,"  "],[-1,1397,"  "],[-1,1424,"  "],[-1,1467,"  "],[-1,1477,"  "]],[1216,1482],[1214,1458]]],[1564802507044,["GJX@GJXAIOU",[[-1,1212,"  "],[-1,1225,"  "],[-1,1240,"  "],[-1,1273,"  "],[-1,1306,"  "],[-1,1315,"  "],[-1,1339,"  "],[-1,1372,"  "],[-1,1381,"  "],[-1,1404,"  "],[-1,1445,"  "],[-1,1455,"  "]],[1214,1458],[1212,1434]]],[1564802509996,["GJX@GJXAIOU",[[-1,1200," "]],[1201,1201],[1200,1200]]],[1564802531948,["GJX@GJXAIOU",[[1,1439,"## "]],[1439,1439],[1459,1459]]],[1564802639506,["GJX@GJXAIOU",[[-1,1494,"private "],[-1,1522," private"],[1,1530,"\n        "],[-1,1551," @Override"],[1,1561,"\n         \n       "],[1,1581," "],[-1,1589," "],[1,1591,"\n          "],[1,1624,"\n         "],[1,1626," "],[-1,1639," {"],[1,1641,"{\n             "],[1,1661,"\n                "],[1,1673,"\n                 "],[1,1682,"\n             "],[1,1702,"\n                "],[1,1714,"\n                 "],[1,1723,"\n          "],[1,1726,"\n\n       "]],[1494,1728],[1868,1868]]],[1564802643638,["GJX@GJXAIOU",[[-1,1522,"  "],[-1,1552,"  "],[-1,1555,"  "],[-1,1593," "],[-1,1604," "],[-1,1637,"  "],[-1,1678,"  "],[-1,1698," "],[-1,1717," "],[-1,1727,"  "],[-1,1768,"  "],[-1,1788,"  "],[-1,1835,"  "],[-1,1854,"  "],[-1,1859,"  "]],[1524,1868],[1522,1842]]],[1564802643916,["GJX@GJXAIOU",[[-1,1520,"  "],[-1,1548,"  "],[-1,1551,"  "],[-1,1587," "],[-1,1596," "],[-1,1629,"  "],[-1,1666,"  "],[-1,1686," "],[-1,1703," "],[-1,1713,"  "],[-1,1750,"  "],[-1,1770,"  "],[-1,1813,"  "],[-1,1830,"  "],[-1,1835,"  "]],[1522,1842],[1520,1816]]],[1564802644221,["GJX@GJXAIOU",[[-1,1518,"  "],[-1,1544,"  "],[-1,1547,"  "],[-1,1581," "],[-1,1588," "],[-1,1621,"  "],[-1,1654,"  "],[-1,1674," "],[-1,1689," "],[-1,1713,"  "],[-1,1722," "],[-1,1733," "],[-1,1752,"  "],[-1,1791,"  "],[-1,1806,"  "],[-1,1811,"  "]],[1520,1816],[1518,1790]]],[1564802644533,["GJX@GJXAIOU",[[-1,1516,"  "],[-1,1540,"  "],[-1,1543,"  "],[-1,1575," "],[-1,1580," "],[-1,1613,"  "],[-1,1642,"  "],[-1,1662," "],[-1,1675," "],[-1,1697,"  "],[-1,1706," "],[-1,1715," "],[-1,1734,"  "],[-1,1769,"  "],[-1,1782,"  "],[-1,1787,"  "]],[1518,1790],[1516,1764]]],[1564802644904,["GJX@GJXAIOU",[[-1,1515," "],[-1,1537," "],[-1,1569,"  "],[-1,1607,"  "],[-1,1624," "],[-1,1631," "],[-1,1660,"  "],[-1,1671," "],[-1,1682," "],[-1,1690,"  "],[-1,1716,"  "],[-1,1747,"  "],[-1,1756,"  "]],[1516,1764],[1515,1746]]],[1564802649661,["GJX@GJXAIOU",[[-1,1742,"\n"]],[1742,1742],[1741,1741]]],[1564802663165,["GJX@GJXAIOU",[[-1,1749,"   "]],[1752,1752],[1749,1749]]],[1564802663596,["GJX@GJXAIOU",[[-1,1748,"\n"]],[1749,1749],[1748,1748]]],[1564802666268,["GJX@GJXAIOU",[[-1,1839,"   "]],[1839,1842],[1839,1839]]],[1564802668876,["GJX@GJXAIOU",[[-1,1912,"\n"]],[1912,1912],[1911,1911]]],[1564802669915,["GJX@GJXAIOU",[[-1,1876,"\n"]],[1876,1876],[1875,1875]]],[1564802670628,["GJX@GJXAIOU",[[-1,1838,"\n"]],[1838,1838],[1837,1837]]],[1564802685340,["GJX@GJXAIOU",[[1,1461,"-"],[-1,1479," "],[1,1480," "],[-1,1767," "],[1,1768," "],[-1,1990,"  "],[1,1992,"  "],[-1,2086,"  "],[1,2088,"  "],[-1,2227,"  "],[1,2229,"  "],[-1,2529,"   "],[1,2532,"   "],[-1,2671,"  "],[1,2673,"  "]],[1461,1461],[1462,1462]]],[1564802685605,["GJX@GJXAIOU",[[1,1462," "]],[1462,1462],[1463,1463]]],[1564802689974,["GJX@GJXAIOU",[[1,1948,"- "]],[1948,1948],[1950,1950]]],[1564802694317,["GJX@GJXAIOU",[[-1,1994,"   "]],[1994,1997],[1994,1994]]],[1564802696421,["GJX@GJXAIOU",[[-1,2087,"   "]],[2087,2090],[2087,2087]]],[1564802704715,["GJX@GJXAIOU",[[-1,1480,"\n"]],[1480,1480],[1479,1479]]],[1564802706956,["GJX@GJXAIOU",[[-1,1490,"\n"]],[1490,1490],[1489,1489]]],[1564802876861,["GJX@GJXAIOU",[[1,906,"\n"]],[905,905],[906,906]]],[1564802877823,["GJX@GJXAIOU",[[1,906,"、、"]],[906,906],[908,908]]],[1564802878523,["GJX@GJXAIOU",[[-1,906,"、、"]],[908,908],[906,906]]],[1564802880589,["GJX@GJXAIOU",[[1,906,"// c"]],[906,906],[910,910]]],[1564802881004,["GJX@GJXAIOU",[[-1,909,"c"]],[910,910],[909,909]]],[1564802881549,["GJX@GJXAIOU",[[1,909,"xai"]],[909,909],[912,912]]],[1564802882636,["GJX@GJXAIOU",[[-1,909,"xai"]],[912,912],[909,909]]],[1564802893777,["GJX@GJXAIOU",[[1,909,"下面两个值必须声明为final类型"]],[909,909],[926,926]]],[1564802905796,["GJX@GJXAIOU",[[-1,1482,"- 1）.第二种情况容易出错的情况：\n **发现问题**\n```\nint CLICK_QUERY = 1;\nint CLICK_RESET = 2;\n\npublic void onClick (View v){\n  int tag = (Integer) v.getTag();\n  switch (tag) {\n      case CLICK_QUERY:\n          query();\n          break;\n      case CLICK_RESET:\n          reset();\n          break;\n  }\n}\n```\n编译时一直报错：CLICK_QUERY 和CLICK_RESET——case expressions must be constant expressions\n\n**解决问题**\ncase后面必须跟常量，必须要常量，将上面两个变量声明为final即可。\nprivate final int CLICK_QUERY = 1;\nprivate final int CLICK_RESET = 2;"]],[1482,1965],[1482,1482]]],[1564802949806,["GJX@GJXAIOU",[[-1,1460,"## 3.使用switch时的出错分析：\n\n\n\n- 2）.下面是switch的简单写法：\n\nswitch（A）{\n\ncase B;\n\n}\n\nA部分中的值必须是int型的，或者是能够自动进行饮试转换成int型的表达式。也就是说A部分可以是byte\\short\\char\\int型(因为这几种类型都可以自动转换为int型)的。\n\n其次要强调的是该程序中B部分的值必须是单个byte\\short\\char\\int型的值，或者是final型的变量。\n\n但是final型的变量也是有要求的，也即是它必须是编译时的常量，怎么讲呢，看下面的程序段：\n\nfinal int a = 0;\n\nfinal int b;\n\n   第二个语句就是在编译时不能够被识别出值的变量，因为它没有初始化，当然，这条语句也是错误的。所以总结case后的值可以是常数值或final型的值。再看下面的程序段：\n\n```\npublic class TestSwitch {  public static void main(String[] args){   byte a = 11;   switch(a){// C   case 11 : System.out.println(\" 11 \"); break;   case 225 : System.out.println(\" 11 \"); break;// D   }  } }\n```\n\n    该代码正确吗？答案是否定的。虽然在 C 处是合法的也即是byte型的a值可以出现在switch中，但是 D处的语句也即是第二个case后的值是225大小超过了byte的范围，所以是错误的。再就是case后的值不能出现重复。因此在使用中要注意。\n\n3.忘记写break的错误\n\n   再就是在使用switch-case中最容易忽视的就是忘记在每个case后处理完后忘记写上break；语句。那它带来的后果是什么呢，下面小程序段会告诉你：\n\n```\npublic class TestSwitchCase {  public static void main(String[] args){   byte a = 2;   switch(a){   case 1 : System.out.println(\" A \");   case 2 : System.out.println(\" B \");   case 3 : System.out.println(\" C \");   case 4 : System.out.println(\" D \");   default : System.out.println(\" default \");   }  } } =========输出结果为:  B   C   D   default  --------------------------\n```\n\n看到了吗？连default都执行，注意结束符break;就OK了。"]],[1460,2697],[1460,1460]]],[1564802951165,["GJX@GJXAIOU",[[-1,1460,"\n"]],[1460,1460],[1459,1459]]]],null,"GJX@GJXAIOU"]]}