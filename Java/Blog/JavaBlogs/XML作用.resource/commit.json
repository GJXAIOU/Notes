{"compress":true,"commitItems":[["f406fa6a-f704-4787-a95a-97f278fb7a1a",1566796617003,"简单概括(可能概括的不是很准确，但是我的语言功底也就到这了，见谅)的话就是，xml本身是一种格式规范，是一种包含了数据以及数据说明的文本格式规范。\n\n接下来煮几个栗子说明一下。\n\n比如，我们要给对方传输一段数据，数据内容是“too young,too simple,sometimes naive”，要将这段话按照属性拆分为三个数据的话，就是，年龄too young，阅历too simple，结果sometimes naive。\n\n我们都知道程序不像人，可以体会字面意思，并自动拆分出数据，因此，我们需要帮助程序做拆分，因此出现了各种各样的数据格式以及拆分方式。\n\n比如，可以是这样的\n数据为“too young,too simple,sometimes naive”\n然后按照逗号拆分，第一部分为年龄，第二部分为阅历，第三部分为结果。\n\n也可以是这样的\n数据为“too_young**too_simple*sometimes_naive”\n从数据开头开始截取前面十一个字符，去掉*号并把下划线替换为空格作为第一部分，再截取接下来的十一个字符同样去掉*并替换下划线为空格作为第二部分，最后把剩下的字符同样去*号体会空格作为第三部分。\n\n这两种方式都可以用来容纳数据并能够被解析，但是不直观，通用性也不好，而且如果出现超过限定字数的字符串就容纳不了，也可能出现数据本身就下划线字符导致需要做转义。\n\n基于这种情况，出现了xml这种数据格式， 上面的数据用XML表示的话\n可以是这样\n\n```xml\n<person age=\"too young\" experience=\"too simple\" result=\"sometimes naive\" />\n```\n\n也可以是这样\n\n```xml\n<person>\n    <age value=\"too young\" />\n    <experience value=\"too simple\" />\n    <result value=\"sometimes naive\" />\n</person>\n```\n\n两种方式都是xml，都很直观，附带了对数据的说明，并且具备通用的格式规范可以让程序做解析。\n\n如果用json格式来表示的话，就是下面这样\n\n```text\n{\n    \"age\":\"too young\",\n    \"experience\":\"too simple\",\n    \"result\":\"sometimes naive\"\n}\n```\n\n看出来没，其实数据都是一样的，不同的只是数据的格式而已，同样的数据，我用xml格式传给你，你用xml格式解析出三个数据，用json格式传给你，你就用json格式解析出三个数据，还可以我本地保存的是xml格式的数据，我自己先解析出三个数据，然后构造成json格式传给你，你解析json格式，获得三个数据，再自己构造成xml格式保存起来，说白了，不管是xml还是json，都只是包装数据的不同格式而已，重要的是其中含有的数据，而不是包装的格式。",[[1566796569291,["GJX@GJXAIOU",[[-1,4,"(可能概括的不是很准确，但是我的语言功底也就到这了，见谅)"]],[4,33],[4,4]]],[1566796575299,["GJX@GJXAIOU",[[1,9,"**"],[1,43,"**"]],[9,43],[9,47]]],[1566796584044,["GJX@GJXAIOU",[[-1,8,"，"]],[9,9],[8,8]]],[1566796584824,["GJX@GJXAIOU",[[1,8,"："]],[8,8],[9,9]]],[1566796591733,["GJX@GJXAIOU",[[-1,4,"的话"]],[6,6],[4,4]]],[1566796604876,["GJX@GJXAIOU",[[-1,48,"接下来煮几个栗子说明一下。"]],[48,61],[48,48]]],[1566796605693,["GJX@GJXAIOU",[[1,48,"****"]],[48,48],[50,50]]],[1566796607102,["GJX@GJXAIOU",[[1,50,"距离"]],[50,50],[52,52]]],[1566796608550,["GJX@GJXAIOU",[[-1,50,"距离"]],[52,52],[50,50]]],[1566796612174,["GJX@GJXAIOU",[[1,50,"举例说明："]],[50,50],[55,55]]],[1566796723622,["GJX@GJXAIOU",[[1,351,"·"]],[351,351],[352,352]]],[1566796724334,["GJX@GJXAIOU",[[1,391,"·"]],[391,391],[392,392]]],[1566796725770,["GJX@GJXAIOU",[[-1,391,"·"]],[392,392],[391,391]]],[1566796726190,["GJX@GJXAIOU",[[1,391,"`"]],[391,391],[392,392]]],[1566796728501,["GJX@GJXAIOU",[[-1,351,"·"]],[352,352],[351,351]]],[1566796728612,["GJX@GJXAIOU",[[1,351,"`"]],[351,351],[352,352]]],[1566796736077,["GJX@GJXAIOU",[[1,412,"`"]],[412,412],[413,413]]],[1566796737031,["GJX@GJXAIOU",[[1,414,"`"]],[414,414],[415,415]]],[1566796738324,["GJX@GJXAIOU",[[1,449,"`"]],[449,449],[450,450]]],[1566796739101,["GJX@GJXAIOU",[[1,451,"`"]],[451,451],[452,452]]],[1566796740292,["GJX@GJXAIOU",[[1,479,"`"]],[479,479],[480,480]]],[1566796741101,["GJX@GJXAIOU",[[1,481,"`"]],[481,481],[482,482]]],[1566796787308,["GJX@GJXAIOU",[[-1,618,"\n"]],[618,618],[617,617]]],[1566796789268,["GJX@GJXAIOU",[[1,625,"`"]],[625,625],[626,626]]],[1566796790565,["GJX@GJXAIOU",[[1,701,"`"]],[701,701],[702,702]]],[1566796792749,["GJX@GJXAIOU",[[-1,618,"```xml"]],[618,624],[618,618]]],[1566796793196,["GJX@GJXAIOU",[[-1,618,"\n"]],[618,618],[617,617]]],[1566796794274,["GJX@GJXAIOU",[[-1,696,"```"]],[696,699],[696,696]]],[1566796795283,["GJX@GJXAIOU",[[-1,697,"\n"]],[697,697],[696,696]]],[1566796795852,["GJX@GJXAIOU",[[-1,696,"\n"]],[696,696],[695,695]]],[1566796799986,["GJX@GJXAIOU",[[-1,703,"\n"]],[703,703],[702,702]]],[1566796825587,["GJX@GJXAIOU",[[1,851,"**"],[1,886,"**"]],[851,886],[851,890]]],[1566796828347,["GJX@GJXAIOU",[[-1,914,"\n"]],[914,914],[913,913]]],[1566796839675,["GJX@GJXAIOU",[[1,1021,"**"],[1,1043,"**"]],[1021,1043],[1021,1047]]],[1566796859125,["GJX@GJXAIOU",[[1,1191,"**"],[1,1239,"**"]],[1191,1239],[1191,1243]]]],null,"GJX@GJXAIOU"]]}