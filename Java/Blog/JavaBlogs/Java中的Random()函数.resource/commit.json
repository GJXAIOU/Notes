{"compress":true,"commitItems":[["78f5353e-9909-4cfb-8f05-ac097f51c025",1566092781792,"Java中存在着两种Random函数：\n\n一、java.lang.Math.Random;\n\n　　调用这个Math.Random()函数能够返回带正号的double值，该值大于等于0.0且小于1.0，即取值范围是[0.0,1.0)的左闭右开区间，返回值是一个伪随机选择的数，在该范围内（近似）均匀分布。例子如下：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npackage IO; import java.util.Random; public class TestRandom { public static void main(String[] args) { // 案例1\n        System.out.println(\"Math.random()=\" + Math.random());// 结果是个double类型的值，区间为[0.0,1.0）\n        int num = (int) (Math.random() * 3); // 注意不要写成(int)Math.random()*3，这个结果为0，因为先执行了强制转换\n        System.out.println(\"num=\" + num); /** * 输出结果为：\n         * \n         * Math.random()=0.02909671613289655\n         * num=0\n         * */\n　　}\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n二、java.util.Random\n\n　　下面Random()的两种构造方法：\n\n　　　　 Random()：创建一个新的随机数生成器。\n\n　　　　 Random(long seed)：使用单个 long 种子创建一个新的随机数生成器。\n\n　　我们可以在构造Random对象的时候指定种子（这里指定种子有何作用，请接着往下看），如：Random r1 = new Random(20);\n\n　　或者默认当前系统时间的毫秒数作为种子数:Random r1 = new Random();\n\n　　需要说明的是：你在创建一个Random对象的时候可以给定任意一个合法的种子数，种子数只是随机算法的起源数字，和生成的随机数的区间没有任何关系。如下面的Java代码：\n\nRandom rand =new Random(25); int i;\ni=rand.nextInt(100);\n\n　　初始化时25并没有起直接作用（注意：不是没有起作用）,rand.nextInt(100);中的100是随机数的上限,产生的随机数为0-100的整数,不包括100。\n\n　　具体用法如下例：\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npackage IO; import java.util.ArrayList; import java.util.Random; public class TestRandom { public static void main(String[] args) {\n\n        // 案例2 // 对于种子相同的Random对象，生成的随机数序列是一样的。\n        Random ran1 = new Random(10);\n        System.out.println(\"使用种子为10的Random对象生成[0,10)内随机整数序列: \"); for (int i = 0; i < 10; i++) {\n            System.out.print(ran1.nextInt(10) + \" \");\n        }\n        System.out.println();\n        Random ran2 = new Random(10);\n        System.out.println(\"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \"); for (int i = 0; i < 10; i++) {\n            System.out.print(ran2.nextInt(10) + \" \");\n        } /** * 输出结果为：\n         * \n         * 使用种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * */\n\n        // 案例3 // 在没带参数构造函数生成的Random对象的种子缺省是当前系统时间的毫秒数。\n        Random r3 = new Random();\n        System.out.println();\n        System.out.println(\"使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\"); for (int i = 0; i < 10; i++) {\n            System.out.print(r3.nextInt(10)+\" \");\n        } /** * 输出结果为：\n         * \n         * 使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\n         * 1 1 0 4 4 2 3 8 8 4\n         * */\n\n        // 另外，直接使用Random无法避免生成重复的数字，如果需要生成不重复的随机数序列，需要借助数组和集合类\n        ArrayList list=new TestRandom().getDiffNO(10);\n        System.out.println();\n        System.out.println(\"产生的n个不同的随机数：\"+list);\n    } /** * 生成n个不同的随机数，且随机数区间为[0,10)\n     * @param n\n     * @return\n     */\n    public ArrayList getDiffNO(int n){ // 生成 [0-n) 个不重复的随机数 // list 用来保存这些随机数\n        ArrayList list = new ArrayList();\n        Random rand = new Random(); boolean[] bool = new boolean[n]; int num = 0; for (int i = 0; i < n; i++) { do { // 如果产生的数相同继续循环\n                num = rand.nextInt(n);\n            } while (bool[num]);\n            bool[num] = true;\n            list.add(num);\n        } return list;\n    }\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n备注：下面是Java.util.Random()方法摘要：\n\n1.  protected int next(int bits)：生成下一个伪随机数。\n2.  boolean nextBoolean()：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的boolean值。\n3.  void nextBytes(byte[] bytes)：生成随机字节并将其置于用户提供的 byte 数组中。\n4.  double nextDouble()：返回下一个伪随机数，它是取自此随机数生成器序列的、在0.0和1.0之间均匀分布的 double值。\n5.  float nextFloat()：返回下一个伪随机数，它是取自此随机数生成器序列的、在0.0和1.0之间均匀分布float值。\n6.  double nextGaussian()：返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的double值，其平均值是0.0标准差是1.0。\n7.  int nextInt()：返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。\n8.  int nextInt(int n)：返回一个伪随机数，它是取自此随机数生成器序列的、在（包括和指定值（不包括）之间均匀分布的int值。\n9.  long nextLong()：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。\n10.  void setSeed(long seed)：使用单个 long 种子设置此随机数生成器的种子。\n\n下面给几个例子：\n\n1.  生成[0,1.0)区间的小数：double d1 = r.nextDouble();\n2.  生成[0,5.0)区间的小数：double d2 = r.nextDouble() * 5;\n3.  生成[1,2.5)区间的小数：double d3 = r.nextDouble() * 1.5 + 1;\n4.  生成-231到231-1之间的整数：int n = r.nextInt();\n5.  生成[0,10)区间的整数：\n\n　　　　int n2 = r.nextInt(10);//方法一\n\n　　　　n2 = Math.abs(r.nextInt() % 10);//方法二",[[1566092752959,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1566092754859,["GJX@GJXAIOU",[[1,0,"# [JAVA中的Random()函数](https://www.cnblogs.com/ningvsban/p/3590722.html)"]],[0,0],[70,70]]],[1566092760040,["GJX@GJXAIOU",[[-1,19,"](https://www.cnblogs.com/ningvsban/p/3590722.html)"]],[20,70],[19,19]]],[1566092760943,["GJX@GJXAIOU",[[-1,2,"["]],[3,3],[2,2]]],[1566092764079,["GJX@GJXAIOU",[[1,19,"\n"]],[19,19],[20,20]]],[1566092764336,["GJX@GJXAIOU",[[1,20,"\n"]],[20,20],[21,21]]],[1566092772832,["GJX@GJXAIOU",[[1,42,"### "]],[42,42],[70,70]]],[1566092774520,["GJX@GJXAIOU",[[-1,44,"#"]],[70,70],[69,69]]],[1566092777455,["GJX@GJXAIOU",[[1,802,"## "]],[802,802],[823,823]]],[1566092789970,["GJX@GJXAIOU",[[1,96,"**"],[1,174,"**"]],[96,174],[96,178]]],[1566092806487,["GJX@GJXAIOU",[[-1,186,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npackage IO; import java.util.Random; public class TestRandom { public static void main(String[] args) { // 案例1\n        System.out.println(\"Math.random()=\" + Math.random());// 结果是个double类型的值，区间为[0.0,1.0）\n        int num = (int) (Math.random() * 3); // 注意不要写成(int)Math.random()*3，这个结果为0，因为先执行了强制转换\n        System.out.println(\"num=\" + num); /** * 输出结果为：\n         * \n         * Math.random()=0.02909671613289655\n         * num=0\n         * */\n　　}\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n"]],[186,805],[186,186]]],[1566092806829,["GJX@GJXAIOU",[[1,186,"·"],[-1,236," "],[1,237," "],[-1,265," "],[1,266," "],[-1,2801," "],[1,2802," "],[-1,2839," "],[1,2840," "],[-1,2901," "],[1,2902," "],[-1,2963," "],[1,2964," "],[-1,3036," "],[1,3037," "],[-1,3106," "],[1,3107," "],[-1,3191," "],[1,3192," "],[-1,3245," "],[1,3246," "],[-1,3319," "],[1,3320," "],[-1,3378," "],[1,3379," "]],[186,186],[187,187]]],[1566092807220,["GJX@GJXAIOU",[[1,187,"··"]],[187,187],[189,189]]],[1566092808343,["GJX@GJXAIOU",[[-1,186,"···"]],[189,189],[186,186]]],[1566092809680,["GJX@GJXAIOU",[[1,186,"```"]],[186,186],[189,189]]],[1566092809708,["GJX@GJXAIOU",[[1,189,"language\n```\n"]],[189,189],[189,197]]],[1566092810707,["GJX@GJXAIOU",[[-1,189,"language"],[1,197,"j"]],[189,197],[190,190]]],[1566092811176,["GJX@GJXAIOU",[[1,190,"ava"]],[190,190],[193,193]]],[1566092811328,["GJX@GJXAIOU",[[1,194,"\n"]],[193,193],[194,194]]],[1566092814702,["GJX@GJXAIOU",[[1,194,"package IO;\nimport java.util.Random;\n\npublic class TestRandom {\n    \n    public static void main(String[] args) {\n        // 案例1\n        System.out.println(\"Math.random()=\" + Math.random());// 结果是个double类型的值，区间为[0.0,1.0）\n        int num = (int) (Math.random() * 3); // 注意不要写成(int)Math.random()*3，这个结果为0，因为先执行了强制转换\n        System.out.println(\"num=\" + num);\n        /**\n         * 输出结果为：\n         * \n         * Math.random()=0.02909671613289655\n         * num=0\n         * \n         */\n　　}\n}"]],[194,194],[683,683]]],[1566092816361,["GJX@GJXAIOU",[[-1,185,"\n"]],[185,185],[184,184]]],[1566092823680,["GJX@GJXAIOU",[[-1,260," "]],[260,260],[259,259]]],[1566092824799,["GJX@GJXAIOU",[[-1,259," "]],[258,258],[257,257]]],[1566092825201,["GJX@GJXAIOU",[[-1,256,"\n"]],[257,257],[256,256]]],[1566093045498,["GJX@GJXAIOU",[[1,231,"/**\n * @author GJXAIOU\n * @create 2019-08-18-9:12\n */ "],[-1,256,"  "],[-1,315,"案例1\n      "],[1,325,"结果是个double类型的值，区间为[0.0,1.0）\n"],[-1,380,"// 结果是个double类型的值，区间为[0.0,1.0）"],[-1,413,"      int num = (int) (Math.random() * 3); "],[1,490,"肯定"],[1,506,"int"],[1,507,"num"],[1,508,"="],[1,509,"(int)"],[1,510,"(Math.random()"],[1,511,"* 3); \n"],[-1,545,"\n    "],[-1,554,"/**\n         * 输出结果为：\n         * \n         *"],[1,598,"}\n}// output: 每次结果都不不一致的 //"],[-1,615,"02909671613289655\n         *"],[1,643,"8331445049622747 //"],[-1,648,"0\n         * \n         */\n　　}\n}"],[1,679,"1"]],[231,679],[650,650]]],[1566093048064,["GJX@GJXAIOU",[[-1,231,"/**\n * @author GJXAIOU\n * @create 2019-08-18-9:12\n */ "],[1,310,"  "],[1,367,"案例1\n      "],[-1,367,"结果是个double类型的值，区间为[0.0,1.0）\n"],[1,450,"// 结果是个double类型的值，区间为[0.0,1.0）"],[1,453,"      int num = (int) (Math.random() * 3); "],[-1,487,"肯定"],[-1,505,"int"],[-1,509,"num"],[-1,513,"="],[-1,515,"(int)"],[-1,521,"(Math.random()"],[-1,536,"* 3); \n"],[1,577,"\n    "],[1,581,"/**\n         * 输出结果为：\n         * \n         *"],[-1,581,"}\n}// output: 每次结果都不不一致的 //"],[1,625,"02909671613289655\n         *"],[-1,625,"8331445049622747 //"],[1,649,"0\n         * \n         */\n　　}\n}"],[-1,649,"1"]],[650,650],[231,679]]],[1566093054972,["GJX@GJXAIOU",[[1,231,"/**\n * @author GJXAIOU\n * @create 2019-08-18-9:12\n */\n"],[-1,256,"  "],[-1,315,"案例1"],[1,318,"结果是个double类型的值，区间为[0.0,1.0）"],[-1,380,"// 结果是个double类型的值，区间为[0.0,1.0）"],[-1,419,"int num = (int) (Math.random() * 3); "],[1,490,"肯定"],[1,512,"int num = (int) (Math.random() * 3); \n        "],[1,546,"\n"],[-1,550,"    /**\n         * 输出结果为：\n         * \n         *"],[1,598,"}\n}// output: 每次结果都不不一致的\n//"],[-1,615,"02909671613289655\n         *"],[1,643,"8331445049622747\n//"],[-1,648,"0\n         * \n         */\n　　}\n}"],[1,679,"1"]],[231,679],[677,677]]],[1566093059863,["GJX@GJXAIOU",[[-1,231,"/**\n * @author GJXAIOU\n * @create 2019-08-18-9:12\n */\n"]],[230,284],[230,230]]],[1566093060374,["GJX@GJXAIOU",[[-1,230,"\n"]],[230,230],[229,229]]],[1566093061775,["GJX@GJXAIOU",[[1,230,"\n"]],[229,229],[230,230]]],[1566093069583,["GJX@GJXAIOU",[[-1,443,"结果"]],[445,445],[443,443]]],[1566093072775,["GJX@GJXAIOU",[[1,555,"\n"]],[555,555],[556,556]]],[1566093077807,["GJX@GJXAIOU",[[-1,547,"\n"]],[547,547],[546,546]]],[1566093108848,["GJX@GJXAIOU",[[-1,650,"　　"],[-1,672,"　　　　 "],[-1,701,"　　　　 "],[-1,751,"　　"],[-1,826,"　　"],[-1,875,"　　"],[-1,1019,"　　"],[-1,1104,"　　"]],[652,1114],[652,1114]]],[1566093477299,["GJX@GJXAIOU",[[1,670,"- "]],[670,670],[672,672]]],[1566093483841,["GJX@GJXAIOU",[[1,696,"- "]],[696,696],[698,698]]],[1566093485159,["GJX@GJXAIOU",[[-1,695,"\n"]],[695,695],[694,694]]],[1566093487799,["GJX@GJXAIOU",[[-1,669,"\n"]],[669,669],[668,668]]],[1566093530251,["GJX@GJXAIOU",[[1,785,"`"]],[785,785],[786,786]]],[1566093532842,["GJX@GJXAIOU",[[1,813,"`"]],[813,813],[814,814]]],[1566093547360,["GJX@GJXAIOU",[[1,818,"**"],[1,830,"**"]],[818,830],[818,834]]],[1566093553494,["GJX@GJXAIOU",[[-1,815,"\n"]],[816,816],[815,815]]],[1566093556222,["GJX@GJXAIOU",[[-1,814,"\n"]],[815,815],[814,814]]],[1566093609207,["GJX@GJXAIOU",[[1,838,"`"]],[838,838],[839,839]]],[1566093610537,["GJX@GJXAIOU",[[1,864,"`"]],[864,864],[865,865]]],[1566093623249,["GJX@GJXAIOU",[[1,906,"**"],[1,937,"**"]],[906,937],[906,941]]],[1566093630841,["GJX@GJXAIOU",[[1,954,"```"]],[954,954],[957,957]]],[1566093630869,["GJX@GJXAIOU",[[1,957,"language\n```\n"]],[957,957],[957,965]]],[1566093632530,["GJX@GJXAIOU",[[-1,957,"language"],[1,965,"j"]],[957,965],[958,958]]],[1566093632938,["GJX@GJXAIOU",[[1,958,"ava"]],[958,958],[961,961]]],[1566093633115,["GJX@GJXAIOU",[[1,962,"\n"]],[961,961],[962,962]]],[1566093636097,["GJX@GJXAIOU",[[-1,968,"Random rand =new Random(25); int i;\ni=rand.nextInt(100);"]],[968,1024],[968,968]]],[1566093637363,["GJX@GJXAIOU",[[1,962,"Random rand =new Random(25); int i;\ni=rand.nextInt(100);"]],[962,962],[1018,1018]]],[1566093640938,["GJX@GJXAIOU",[[-1,1025,"\n"]],[1025,1025],[1024,1024]]],[1566093641710,["GJX@GJXAIOU",[[-1,1024,"\n"]],[1024,1024],[1023,1023]]],[1566093646119,["GJX@GJXAIOU",[[1,991,"\n"]],[991,991],[992,992]]],[1566093650079,["GJX@GJXAIOU",[[-1,1024,"\n"]],[1024,1024],[1023,1023]]],[1566093668515,["GJX@GJXAIOU",[[1,1051,"`"]],[1051,1051],[1052,1052]]],[1566093670065,["GJX@GJXAIOU",[[1,1070,"`"]],[1070,1070],[1071,1071]]],[1566093726689,["GJX@GJXAIOU",[[-1,1119,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\npackage IO; import java.util.ArrayList; import java.util.Random; public class TestRandom { public static void main(String[] args) {\n\n        // 案例2 // 对于种子相同的Random对象，生成的随机数序列是一样的。\n        Random ran1 = new Random(10);\n        System.out.println(\"使用种子为10的Random对象生成[0,10)内随机整数序列: \"); for (int i = 0; i < 10; i++) {\n            System.out.print(ran1.nextInt(10) + \" \");\n        }\n        System.out.println();\n        Random ran2 = new Random(10);\n        System.out.println(\"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \"); for (int i = 0; i < 10; i++) {\n            System.out.print(ran2.nextInt(10) + \" \");\n        } /** * 输出结果为：\n         * \n         * 使用种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * */\n\n        // 案例3 // 在没带参数构造函数生成的Random对象的种子缺省是当前系统时间的毫秒数。\n        Random r3 = new Random();\n        System.out.println();\n        System.out.println(\"使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\"); for (int i = 0; i < 10; i++) {\n            System.out.print(r3.nextInt(10)+\" \");\n        } /** * 输出结果为：\n         * \n         * 使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\n         * 1 1 0 4 4 2 3 8 8 4\n         * */\n\n        // 另外，直接使用Random无法避免生成重复的数字，如果需要生成不重复的随机数序列，需要借助数组和集合类\n        ArrayList list=new TestRandom().getDiffNO(10);\n        System.out.println();\n        System.out.println(\"产生的n个不同的随机数：\"+list);\n    } /** * 生成n个不同的随机数，且随机数区间为[0,10)\n     * @param n\n     * @return\n     */\n    public ArrayList getDiffNO(int n){ // 生成 [0-n) 个不重复的随机数 // list 用来保存这些随机数\n        ArrayList list = new ArrayList();\n        Random rand = new Random(); boolean[] bool = new boolean[n]; int num = 0; for (int i = 0; i < n; i++) { do { // 如果产生的数相同继续循环\n                num = rand.nextInt(n);\n            } while (bool[num]);\n            bool[num] = true;\n            list.add(num);\n        } return list;\n    }\n\n}\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n"]],[1118,3195],[1118,1118]]],[1566093729145,["GJX@GJXAIOU",[[1,1118,"```"]],[1118,1118],[1121,1121]]],[1566093729172,["GJX@GJXAIOU",[[1,1121,"language\n```\n"]],[1121,1121],[1121,1129]]],[1566093730331,["GJX@GJXAIOU",[[-1,1121,"language"],[1,1129,"j"]],[1121,1129],[1122,1122]]],[1566093730663,["GJX@GJXAIOU",[[1,1122,"ava"]],[1122,1122],[1125,1125]]],[1566093731599,["GJX@GJXAIOU",[[1,1126,"\n"]],[1125,1125],[1126,1126]]],[1566093734351,["GJX@GJXAIOU",[[1,1126,"package IO;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class TestRandom {\n    \n    public static void main(String[] args) {\n        \n        // 案例2\n        // 对于种子相同的Random对象，生成的随机数序列是一样的。\n        Random ran1 = new Random(10);\n        System.out.println(\"使用种子为10的Random对象生成[0,10)内随机整数序列: \");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(ran1.nextInt(10) + \" \");\n        }\n        System.out.println();\n        Random ran2 = new Random(10);\n        System.out.println(\"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(ran2.nextInt(10) + \" \");\n        }\n        /**\n         * 输出结果为：\n         * \n         * 使用种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * \n         */\n        \n        // 案例3\n        // 在没带参数构造函数生成的Random对象的种子缺省是当前系统时间的毫秒数。\n        Random r3 = new Random();\n        System.out.println();\n        System.out.println(\"使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(r3.nextInt(10)+\" \");\n        }\n        /**\n         * 输出结果为：\n         * \n         * 使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\n         * 1 1 0 4 4 2 3 8 8 4\n         *  \n         */\n        \n        // 另外，直接使用Random无法避免生成重复的数字，如果需要生成不重复的随机数序列，需要借助数组和集合类\n        ArrayList list=new TestRandom().getDiffNO(10);\n        System.out.println();\n        System.out.println(\"产生的n个不同的随机数：\"+list);\n    }\n    \n    /**\n     * 生成n个不同的随机数，且随机数区间为[0,10)\n     * @param n\n     * @return\n     */\n    public ArrayList getDiffNO(int n){\n        // 生成 [0-n) 个不重复的随机数\n        // list 用来保存这些随机数\n        ArrayList list = new ArrayList();\n        Random rand = new Random();\n        boolean[] bool = new boolean[n];\n        int num = 0;\n        for (int i = 0; i < n; i++) {\n            do {\n                // 如果产生的数相同继续循环\n                num = rand.nextInt(n);\n            } while (bool[num]);\n            bool[num] = true;\n            list.add(num);\n        }\n        return list;\n    }\n    \n    \n}"]],[1126,1126],[3256,3256]]],[1566093997751,["GJX@GJXAIOU",[[1,649,"在Java的API帮助文档中，总结了一下对这个Random()函数功能的描述：\n\n1、java.util.Random类中实现的随机算法是伪随机，也就是**有规则**的随机，所谓有规则的就是在给定种(seed)的区间内随机生成数字；\n\n2、相同种子数的Random对象，相同次数生成的随机数字是完全相同的；\n\n3、Random类中各方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的几率均等；"]],[649,649],[851,851]]],[1566093999922,["GJX@GJXAIOU",[[-1,689,"\n"]],[689,689],[688,688]]],[1566094023167,["GJX@GJXAIOU",[[1,851,"\n"]],[850,850],[851,851]]],[1566094562039,["GJX@GJXAIOU",[[1,802,"```java"]],[802,802],[809,809]]],[1566094562222,["GJX@GJXAIOU",[[1,810,"\n"]],[809,809],[810,810]]],[1566094562749,["GJX@GJXAIOU",[[1,811,"\n"]],[810,810],[811,811]]],[1566094563610,["GJX@GJXAIOU",[[1,811,"```"]],[811,811],[814,814]]],[1566094568097,["GJX@GJXAIOU",[[1,810,"// 案例2 :对于种子相同的Random对象，生成的随机数序列是一样的。\n        // 使用种子为10的Random对象生成[0,20)内随机整数序列\n        Random ran1 = new Random(10);\n        System.out.println(\"序列1: \\n\");\n        for (int i = 0; i < 8; i++) {\n            System.out.print(ran1.nextInt(20) + \" \");\n        }\n\n        Random ran2 = new Random(10);\n        System.out.println(\"\\n 序列2:\\n\");\n        for (int i = 0; i < 8; i++) {\n            System.out.print(ran2.nextInt(20) + \" \");\n        }"]],[810,810],[1251,1251]]],[1566094572958,["GJX@GJXAIOU",[[1,1252,"        \n"]],[1251,1251],[1260,1260]]],[1566094579072,["GJX@GJXAIOU",[[1,1260,"// output:"]],[1260,1260],[1270,1270]]],[1566094590022,["GJX@GJXAIOU",[[-1,854,"  "],[-1,897,"  "],[-1,929,"  "],[-1,974,"  "],[-1,1006,"  "],[-1,1060,"  "],[-1,1077,"  "],[-1,1109,"  "],[-1,1150,"  "],[-1,1198,"  "],[-1,1248,"  "],[-1,1252,"  "]],[848,1270],[848,1246]]],[1566094590485,["GJX@GJXAIOU",[[1,854,"  "],[1,889,"  "],[1,931,"  "],[1,962," "],[1,968," "],[1,998,"  "],[1,1056,"  "],[1,1058,"  "],[1,1059,"  "],[1,1101,"  "],[1,1134,"  "],[1,1180,"  "],[1,1228,"  "],[1,1230,"  "]],[848,1246],[848,1272]]],[1566094591017,["GJX@GJXAIOU",[[-1,854,"  "],[-1,891,"  "],[-1,935,"  "],[-1,968," "],[-1,975," "],[-1,1006,"  "],[-1,1066,"  "],[-1,1070,"  "],[-1,1073,"  "],[-1,1117,"  "],[-1,1152,"  "],[-1,1200,"  "],[-1,1250,"  "],[-1,1254,"  "]],[848,1272],[848,1246]]],[1566094591248,["GJX@GJXAIOU",[[-1,852,"  "],[-1,893,"  "],[-1,925,"  "],[-1,966,"  "],[-1,998,"  "],[-1,1050,"  "],[-1,1063,"  "],[-1,1095,"  "],[-1,1134,"  "],[-1,1178,"  "],[-1,1226,"  "],[-1,1230,"  "]],[848,1246],[848,1222]]],[1566094591710,["GJX@GJXAIOU",[[-1,850,"  "],[-1,889,"  "],[-1,921,"  "],[-1,958,"  "],[-1,990,"  "],[-1,1040,"  "],[-1,1049,"  "],[-1,1081," "],[-1,1084," "],[-1,1118,"  "],[-1,1158,"  "],[-1,1204,"  "],[-1,1208,"  "]],[848,1222],[848,1198]]],[1566094592414,["GJX@GJXAIOU",[[-1,848,"  "],[-1,885,"  "],[-1,917,"  "],[-1,950,"  "],[-1,982,"  "],[-1,1030,"  "],[-1,1035,"  "],[-1,1067,"  "],[-1,1102,"  "],[-1,1138,"  "],[-1,1182,"  "],[-1,1186,"  "]],[848,1198],[848,1174]]],[1566094594854,["GJX@GJXAIOU",[[1,882,"  Random ran1 = new Random(10);  System.out.println(\"序列1: \\n\");  for (int i = 0; i < 8; i++) {  System.out.print(ran1.nextInt(20) + \" \");  }  Random ran2 = new Random(10);  System.out.println(\"\\n 序列2:\\n\");  for (int i = 0; i < 8; i++) {  System.out.print(ran2.nextInt(20) + \" \");  }  // output:// 使用种子为10的Random对象生成[0,20)内随机整数序列"]],[848,1174],[1176,1176]]],[1566094596568,["GJX@GJXAIOU",[[-1,882,"  Random ran1 = new Random(10);  System.out.println(\"序列1: \\n\");  for (int i = 0; i < 8; i++) {  System.out.print(ran1.nextInt(20) + \" \");  }  Random ran2 = new Random(10);  System.out.println(\"\\n 序列2:\\n\");  for (int i = 0; i < 8; i++) {  System.out.print(ran2.nextInt(20) + \" \");  }  // output:// 使用种子为10的Random对象生成[0,20)内随机整数序列"]],[1176,1176],[848,1174]]],[1566094598286,["GJX@GJXAIOU",[[1,1175,"\n"]],[1174,1174],[1175,1175]]],[1566094607911,["GJX@GJXAIOU",[[1,1175,"、"]],[1175,1175],[1176,1176]]],[1566094608710,["GJX@GJXAIOU",[[-1,1175,"、"]],[1176,1176],[1175,1175]]],[1566094609895,["GJX@GJXAIOU",[[1,1175,"、"]],[1175,1175],[1176,1176]]],[1566094611101,["GJX@GJXAIOU",[[-1,1175,"、"]],[1176,1176],[1175,1175]]],[1566094611754,["GJX@GJXAIOU",[[1,1175,"//"]],[1175,1175],[1177,1177]]],[1566094612253,["GJX@GJXAIOU",[[1,1178,"\n"]],[1177,1177],[1178,1178]]],[1566094613167,["GJX@GJXAIOU",[[1,1178,".."]],[1178,1178],[1180,1180]]],[1566094613877,["GJX@GJXAIOU",[[-1,1178,".."]],[1180,1180],[1178,1178]]],[1566094616016,["GJX@GJXAIOU",[[1,1177,"序列1: \n\n13 0 13 10 6 16 17 8 \n 序列2:\n\n13 0 13 10 6 16 17 8"]],[1177,1177],[1233,1233]]],[1566094618109,["GJX@GJXAIOU",[[-1,1183,"\n"]],[1183,1183],[1182,1182]]],[1566094620285,["GJX@GJXAIOU",[[-1,1211,"\n"]],[1211,1211],[1210,1210]]],[1566094622903,["GJX@GJXAIOU",[[1,1183,"//"]],[1183,1183],[1185,1185]]],[1566094623846,["GJX@GJXAIOU",[[1,1207,"//"]],[1207,1207],[1209,1209]]],[1566094624976,["GJX@GJXAIOU",[[1,1215,"//"]],[1215,1215],[1217,1217]]],[1566094628246,["GJX@GJXAIOU",[[-1,1209," "]],[1210,1210],[1209,1209]]],[1566096096099,["GJX@GJXAIOU",[[1,1508,"\n"]],[1506,1506],[1507,1507]]],[1566096098783,["GJX@GJXAIOU",[[1,1507,"```java"]],[1507,1507],[1514,1514]]],[1566096099018,["GJX@GJXAIOU",[[1,1516,"\n"]],[1514,1514],[1515,1515]]],[1566096099500,["GJX@GJXAIOU",[[1,1517,"\n"]],[1515,1515],[1516,1516]]],[1566096100773,["GJX@GJXAIOU",[[1,1516,"```"]],[1516,1516],[1519,1519]]],[1566096106518,["GJX@GJXAIOU",[[1,1515," // 案例3\n        // 在没带参数构造函数生成的Random对象的种子缺省是当前系统时间的毫秒数。\n        Random r3 = new Random();\n        System.out.println(\"\\n 序列3: \\n\");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(r3.nextInt(10)+\" \");\n        }"]],[1515,1515],[1746,1746]]],[1566096428956,["GJX@GJXAIOU",[[-1,2161," \n        // 案例2\n        // 对于种子相同的Random对象，生成的随机数序列是一样的。\n        Random ran1 = new Random(10);\n        System.out.println(\"使用种子为10的Random对象生成[0,10)内随机整数序列: \");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(ran1.nextInt(10) + \" \");\n        }\n        System.out.println();\n        Random ran2 = new Random(10);\n        System.out.println(\"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(ran2.nextInt(10) + \" \");\n        }\n        /**\n         * 输出结果为：\n         * \n         * 使用种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列: \n         * 3 0 3 0 6 6 7 8 1 4 \n         * \n         */\n        \n        // 案例3\n        // 在没带参数构造函数生成的Random对象的种子缺省是当前系统时间的毫秒数。\n        Random r3 = new Random();\n        System.out.println();\n        System.out.println(\"使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\");\n        for (int i = 0; i < 10; i++) {\n            System.out.print(r3.nextInt(10)+\" \");\n        }\n        /**\n         * 输出结果为：\n         * \n         * 使用种子缺省是当前系统时间的毫秒数的Random对象生成[0,10)内随机整数序列\n         * 1 1 0 4 4 2 3 8 8 4\n         *  \n         */"]],[2161,3346],[2161,2161]]],[1566096432345,["GJX@GJXAIOU",[[-1,2168,"  "]],[2169,2169],[2167,2167]]],[1566096433962,["GJX@GJXAIOU",[[-1,2154,"       \n      "]],[2154,2168],[2154,2154]]],[1566096435060,["GJX@GJXAIOU",[[-1,2154,"\n"]],[2154,2154],[2153,2153]]],[1566096437029,["GJX@GJXAIOU",[[-1,2104,"    "]],[2108,2108],[2104,2104]]],[1566096437420,["GJX@GJXAIOU",[[-1,2104,"\n"]],[2104,2104],[2103,2103]]],[1566096439093,["GJX@GJXAIOU",[[-1,2023,"\n"]],[2023,2023],[2022,2022]]],[1566096440322,["GJX@GJXAIOU",[[-1,2011,"package IO;"]],[2011,2022],[2011,2011]]],[1566096441017,["GJX@GJXAIOU",[[-1,2011,"\n"]],[2011,2011],[2010,2010]]],[1566096453132,["GJX@GJXAIOU",[[-1,1994,"具体用法"],[1,1998,"s"]],[1994,1998],[1995,1995]]],[1566096453299,["GJX@GJXAIOU",[[1,1995,"he"]],[1995,1995],[1997,1997]]],[1566096453313,["GJX@GJXAIOU",[[-1,1996,"e"],[1,1997," "]],[1997,1997],[1996,1996]]],[1566096453515,["GJX@GJXAIOU",[[1,1996,"eng"]],[1996,1996],[1999,1999]]],[1566096455010,["GJX@GJXAIOU",[[-1,1994,"sheng"]],[1999,1999],[1994,1994]]],[1566096461567,["GJX@GJXAIOU",[[1,1994,"生成不重复的"]],[1994,1994],[2000,2000]]],[1566096463132,["GJX@GJXAIOU",[[1,2000,"随机苏"]],[2000,2000],[2003,2003]]],[1566096464385,["GJX@GJXAIOU",[[-1,2000,"随机苏"]],[2003,2003],[2000,2000]]],[1566096468364,["GJX@GJXAIOU",[[1,2000,"随机数"]],[2000,2000],[2003,2003]]],[1566096573582,["GJX@GJXAIOU",[[-1,2390,"     * @param n\n     * @return"]],[2390,2420],[2390,2390]]],[1566096573963,["GJX@GJXAIOU",[[-1,2390,"\n"]],[2390,2390],[2389,2389]]],[1566096690797,["GJX@GJXAIOU",[[1,3435,"0"]],[3435,3435],[3436,3436]]],[1566096690825,["GJX@GJXAIOU",[[1,3435," "]],[3436,3436],[3437,3437]]],[1566096697259,["GJX@GJXAIOU",[[1,3444,"和n"]],[3444,3444],[3446,3446]]],[1566096697286,["GJX@GJXAIOU",[[1,3445," "]],[3446,3446],[3447,3447]]],[1566096822485,["GJX@GJXAIOU",[[-1,3806,"\n　　　　"]],[3806,3811],[3806,3806]]],[1566096824220,["GJX@GJXAIOU",[[-1,3835,"\n　　　　"]],[3835,3840],[3835,3835]]],[1566096825853,["GJX@GJXAIOU",[[1,3806,"`"]],[3806,3806],[3807,3807]]],[1566096826741,["GJX@GJXAIOU",[[1,3835,"`"]],[3835,3835],[3836,3836]]],[1566096827244,["GJX@GJXAIOU",[[1,3874,"`"]],[3874,3874],[3875,3875]]],[1566096828675,["GJX@GJXAIOU",[[1,3837,"`"]],[3837,3837],[3838,3838]]]],null,"GJX@GJXAIOU"]]}