{"compress":true,"commitItems":[["07d51e2c-03ad-46d9-8583-cd7be31fe9d4",1566806690541,"",[[1566806650367,["GJX@GJXAIOU",[[1,0,"# Http、session、cookie、Servlet总结\n\n\n\n"]],[0,0],[34,34]]],[1566806689553,["GJX@GJXAIOU",[[1,34,"### "]],[34,34],[38,38]]],[1566806690434,["GJX@GJXAIOU",[[-1,37," "]],[38,38],[37,37]]],[1566806690908,["GJX@GJXAIOU",[[-1,36,"#"]],[37,37],[36,36]]],[1566806692965,["GJX@GJXAIOU",[[1,36," HTTP"]],[36,36],[41,41]]],[1566806693442,["GJX@GJXAIOU",[[1,42,"\n"]],[41,41],[42,42]]],[1566806740157,["GJX@GJXAIOU",[[-1,42,"\n"],[1,43,"-"]],[42,42],[43,43]]],[1566806748132,["GJX@GJXAIOU",[[1,43," 作用：规范浏览器的"]],[43,43],[53,53]]],[1566806800617,["GJX@GJXAIOU",[[1,53,"服务器的数据交互格式；\n- 特点：\n- "]],[53,53],[73,73]]],[1566806801473,["GJX@GJXAIOU",[[1,71,"  "]],[73,73],[75,75]]],[1566806808932,["GJX@GJXAIOU",[[1,75,"无连接："]],[75,75],[79,79]]],[1566806843707,["GJX@GJXAIOU",[[1,79,"每次连接只能处理一个请求；服务器处理完可会"]],[79,79],[100,100]]],[1566806844265,["GJX@GJXAIOU",[[-1,98,"可会"]],[100,100],[98,98]]],[1566806858609,["GJX@GJXAIOU",[[1,98,"客户的请求并收到客户端的硬蛋"]],[98,98],[112,112]]],[1566806859273,["GJX@GJXAIOU",[[-1,110,"硬蛋"]],[112,112],[110,110]]],[1566806870523,["GJX@GJXAIOU",[[1,110,"应答之后就会断开"]],[110,110],[118,118]]],[1566806929781,["GJX@GJXAIOU",[[1,118,"连接；\n  - 无状态：协议对于事务处理没有"]],[118,118],[140,140]]],[1566806950894,["GJX@GJXAIOU",[[1,140,"记忆能力，即当后续处理需要前面的信息，任然"]],[140,140],[161,161]]],[1566806952282,["GJX@GJXAIOU",[[-1,159,"任然"]],[161,161],[159,159]]],[1566806968970,["GJX@GJXAIOU",[[1,159,"人要重新传输"]],[159,159],[165,165]]],[1566806971971,["GJX@GJXAIOU",[[-1,159,"人要"]],[161,161],[159,159]]],[1566806995412,["GJX@GJXAIOU",[[1,159,"仍要"]],[159,159],[161,161]]],[1566807013573,["GJX@GJXAIOU",[[1,165,"；\n  - HTTP1.1之后"]],[165,165],[180,180]]],[1566807013595,["GJX@GJXAIOU",[[1,178," "]],[180,180],[181,181]]],[1566807019373,["GJX@GJXAIOU",[[1,181,"支持可连续连接；"]],[181,181],[189,189]]],[1566807055909,["GJX@GJXAIOU",[[1,189,"\n  - "]],[189,189],[194,194]]],[1566807056026,["GJX@GJXAIOU",[[-1,190,"  - "],[1,194,"\n\n"]],[194,194],[191,191]]],[1566807058028,["GJX@GJXAIOU",[[-1,191,"\n"],[1,192,"-"]],[191,191],[192,192]]],[1566807061034,["GJX@GJXAIOU",[[1,192," 其他：\n- "]],[192,192],[199,199]]],[1566807061979,["GJX@GJXAIOU",[[1,197,"  "]],[199,199],[201,201]]],[1566807062762,["GJX@GJXAIOU",[[1,201,"HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。 HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和CONNECT 方法。"]],[201,201],[299,299]]],[1566807082026,["GJX@GJXAIOU",[[-1,193,"其他"]],[195,195],[193,193]]],[1566807084700,["GJX@GJXAIOU",[[1,193,"请求"]],[193,193],[195,195]]],[1566807091755,["GJX@GJXAIOU",[[1,299,"\n  - get请求"]],[299,299],[309,309]]],[1566807091779,["GJX@GJXAIOU",[[1,307," "]],[309,309],[310,310]]],[1566807106057,["GJX@GJXAIOU",[[1,310,"：请求数据会以？的形式隔开拼接在请求头中，不安全，没有请求实体部分。"]],[310,310],[344,344]]],[1566807140729,["GJX@GJXAIOU",[[1,344,"携带的数据量较小；\n  - POST 请求：请求数据在请求实体中进行发送，在URL 中看不到具体的请求数据，安全。适合数据量大的数据发送。"]],[344,344],[413,413]]],[1566807316138,["GJX@GJXAIOU",[[1,413,"\n  - "]],[413,413],[418,418]]],[1566807316258,["GJX@GJXAIOU",[[-1,414,"  - "],[1,418,"\n\n"]],[418,418],[415,415]]],[1566807316394,["GJX@GJXAIOU",[[1,416,"\n"]],[415,415],[416,416]]],[1566807322774,["GJX@GJXAIOU",[[1,416,"![常见状态码]($resource/%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81.png)\n"]],[416,416],[486,486]]],[1566807425521,["GJX@GJXAIOU",[[1,487,"\n"]],[486,486],[487,487]]],[1566807425682,["GJX@GJXAIOU",[[1,488,"\n"]],[487,487],[488,488]]],[1566807436519,["GJX@GJXAIOU",[[1,488,"## Tomcat服务器"]],[488,488],[500,500]]],[1566807436542,["GJX@GJXAIOU",[[1,497," "]],[500,500],[501,501]]],[1566807436898,["GJX@GJXAIOU",[[1,502,"\n"]],[501,501],[502,502]]],[1566807442124,["GJX@GJXAIOU",[[1,503,"\n"]],[502,502],[503,503]]],[1566807442274,["GJX@GJXAIOU",[[1,504,"\n"]],[503,503],[504,504]]],[1566807442691,["GJX@GJXAIOU",[[1,504,"# Tomcat与Web服务器、应用服务器的关系\n\n2013年07月14日 17:20:51 [爱吃肉的老杨](https://me.csdn.net/yangchujie1) 阅读数 6564\n\nTomcat服务器是一个免费的开放源代码的Web应用服务器。因为Tomcat技术先进、性能稳定且免费，所以深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。\n\n**一、Tomcat与应用服务器**\n\n到目前为止，Tomcat一直被认为是Servlet/JSP API的执行器，也就所谓的Servlet容器。然而，Tomcat并不仅仅如此，它还提供了JNDI和JMX API的实现机制。尽管如此，Tomcat仍然还不能算是应用服务器，因为它不提供大多数J2EE API的支持。\n\n很有意思的是，目前许多的应用服务器通常把Tomcat作为它们Servlet和JSP API的容器。由于Tomcat允许开发者只需通过加入一行致谢，就可以把Tomcat嵌入到它们的应用中。遗憾的是，许多商业应用服务器并没有遵守此规则。\n\n对于开发者来说，如果是为了寻找利用Servlet、JSP、JNDI和JMX技术来生成Java Web应用的话，选择Tomcat是一个优秀的解决方案；但是为了寻找支持其他的J2EE API，那么寻找一个应用服务器或者把Tomcat作为应用服务器的辅助，将是一个不错的解决方案；第三种方式是找到独立的J2EE API实现，然后把它们跟Tomcat结合起来使用。虽然整合会带来相关的问题，但是这种方式是最为有效的。。\n\n**二、Tomcat与Web服务器**\n\nTomcat是提供一个支持Servlet和JSP运行的容器。Servlet和JSP能根据实时需要，产生动态网页内容。而对于Web服务器来说， Apache仅仅支持静态网页，对于支持动态网页就会显得无能为力；Tomcat则既能为动态网页服务，同时也能为静态网页提供支持。尽管它没有通常的Web服务器快、功能也不如Web服务器丰富，但是Tomcat逐渐为支持静态内容不断扩充。大多数的Web服务器都是用底层语言编写如C，利用了相应平台的特征，因此用纯Java编写的Tomcat执行速度不可能与它们相提并论。\n\n一般来说，大的站点都是将Tomcat与Apache的结合，Apache负责接受所有来自客户端的HTTP请求，然后将Servlets和JSP的请求转发给Tomcat来处理。Tomcat完成处理后，将响应传回给Apache，最后Apache将响应返回给客户端。"]],[504,504],[1589,1589]]],[1566807457489,["GJX@GJXAIOU",[[1,502,"所谓服务器其实就是代码编写的一个可以根据用户请求实时的调用执行对应的逻辑代码的一个容器。"]],[502,502],[546,546]]],[1566807469026,["GJX@GJXAIOU",[[1,549,"##"]],[549,549],[574,574]]],[1566807470994,["GJX@GJXAIOU",[[1,548,"\n"]],[547,547],[548,548]]],[1566807480157,["GJX@GJXAIOU",[[1,776,"**"],[1,822,"**"]],[776,822],[776,826]]],[1566807485323,["GJX@GJXAIOU",[[1,871,"**"],[1,889,"**"]],[871,889],[871,893]]],[1566821662350,["GJX@GJXAIOU",[[1,1645,"\n"]],[1644,1644],[1645,1645]]],[1566821662486,["GJX@GJXAIOU",[[1,1646,"\n"]],[1645,1645],[1646,1646]]],[1566821670529,["GJX@GJXAIOU",[[-1,597," "],[1,598," "],[-1,639," "],[1,640," "],[-1,1646,"\n"],[1,1647,"*"]],[1646,1646],[1647,1647]]],[1566821670673,["GJX@GJXAIOU",[[1,1647,"***"]],[1647,1647],[1648,1648]]],[1566821680398,["GJX@GJXAIOU",[[1,1648,"三、Tomcat软件"]],[1648,1648],[1658,1658]]],[1566821680424,["GJX@GJXAIOU",[[1,1656," "]],[1658,1658],[1659,1659]]],[1566821681259,["GJX@GJXAIOU",[[1,1659,"目录"]],[1659,1659],[1661,1661]]],[1566821682784,["GJX@GJXAIOU",[[1,1663,"\n\n"]],[1663,1663],[1664,1664]]],[1566821683503,["GJX@GJXAIOU",[[1,1664,"\\bin 存放启动和关闭Tomcat 的可执行文件\\conf 存放Tomcat 的配置文件\n\\lib 存放库文件\n\\logs 存放日志文件\n\\temp 存放临时文件\n\\webapps 存放web 应用\n\\work 存放JSP 转换后的Servlet 文件"]],[1664,1664],[1791,1791]]],[1566821777818,["GJX@GJXAIOU",[[1,1792,"\n"]],[1791,1791],[1792,1792]]],[1566821777958,["GJX@GJXAIOU",[[1,1793,"\n"]],[1792,1792],[1793,1793]]],[1566821778182,["GJX@GJXAIOU",[[1,1794,"\n"]],[1793,1793],[1794,1794]]],[1566821778327,["GJX@GJXAIOU",[[1,1795,"\n"]],[1794,1794],[1795,1795]]],[1566821785395,["GJX@GJXAIOU",[[1,1795,"## Servlet"]],[1795,1795],[1805,1805]]],[1566821785768,["GJX@GJXAIOU",[[1,1806,"\n"]],[1805,1805],[1806,1806]]],[1566821820322,["GJX@GJXAIOU",[[-1,1806,"\n"],[1,1807,"引言"]],[1806,1806],[1808,1808]]],[1566821830559,["GJX@GJXAIOU",[[1,1808,"：服务器在接收到浏览器的请求后，会自动调用对应的逻辑代码进行请求处理。但是逻辑代码是由程序员编写并放到服务器中，那么服务器怎么知道该怎么调用并调用哪个类和哪个方法来进行请求处理。"]],[1808,1808],[1897,1897]]],[1566821833791,["GJX@GJXAIOU",[[-1,1896,"。"]],[1897,1897],[1896,1896]]],[1566821835153,["GJX@GJXAIOU",[[1,1896,"？"]],[1896,1896],[1897,1897]]],[1566821952878,["GJX@GJXAIOU",[[1,1897,"\n\n"]],[1897,1897],[1898,1898]]],[1566821953440,["GJX@GJXAIOU",[[1,1898,"程序员在编写代码的时候如果能够按照服务器能够识别的规则进行编写，浏览器按照指定的规则进行发送请求，那么服务器就可以调用并执行响应的逻辑代码进行请求处理了。"]],[1898,1898],[1975,1975]]],[1566822010871,["GJX@GJXAIOU",[[1,1976,"\n"]],[1975,1975],[1976,1976]]],[1566822016985,["GJX@GJXAIOU",[[1,1898,"解决："]],[1898,1898],[1901,1901]]],[1566822019392,["GJX@GJXAIOU",[[1,1979,"狭义的Servlet 是指Java 语言实现的一个接口，广义的Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。 Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器"]],[1979,1979],[2160,2160]]],[1566822021479,["GJX@GJXAIOU",[[1,1979,"\n"]],[1979,1979],[1980,1980]]],[1566822023474,["GJX@GJXAIOU",[[1,1979,"****"]],[1979,1979],[1981,1981]]],[1566822025379,["GJX@GJXAIOU",[[1,1981,"概念："]],[1981,1981],[1984,1984]]],[1566822029231,["GJX@GJXAIOU",[[1,1898,"**"],[1,1901,"**"]],[1898,1901],[1898,1905]]],[1566822032055,["GJX@GJXAIOU",[[1,1806,"**"],[1,1809,"**"]],[1806,1809],[1806,1813]]],[1566822043839,["GJX@GJXAIOU",[[1,2023,"**"],[1,2056,"**"]],[2023,2056],[2023,2060]]],[1566822054141,["GJX@GJXAIOU",[[1,2140,"**"],[1,2180,"**"]],[2140,2180],[2140,2184]]],[1566822073024,["GJX@GJXAIOU",[[1,2184,"，"]],[2184,2184],[2185,2185]]],[1566822073894,["GJX@GJXAIOU",[[-1,2184,"，"]],[2185,2185],[2184,2184]]],[1566822076642,["GJX@GJXAIOU",[[1,2184,"。 Servlet 的实现遵循了服务器能够识别的规则，也就是服务器会自动的根据请求调用对应的servlet 进行请求处理。"]],[2184,2184],[2245,2245]]],[1566822099079,["GJX@GJXAIOU",[[1,2246,"\n"]],[2245,2245],[2246,2246]]],[1566822099206,["GJX@GJXAIOU",[[1,2247,"\n"]],[2246,2246],[2247,2247]]],[1566822100809,["GJX@GJXAIOU",[[-1,2247,"\n"],[1,2248,"-"]],[2247,2247],[2248,2248]]],[1566822109110,["GJX@GJXAIOU",[[1,2248," 使用过程中需要在WEB"]],[2248,2248],[2260,2260]]],[1566822109136,["GJX@GJXAIOU",[[1,2257," "]],[2260,2260],[2261,2261]]],[1566822112665,["GJX@GJXAIOU",[[1,2261,"-INF文件"]],[2261,2261],[2267,2267]]],[1566822112691,["GJX@GJXAIOU",[[1,2265," "]],[2267,2267],[2268,2268]]],[1566822117240,["GJX@GJXAIOU",[[1,2268,"夹下面的w"]],[2268,2268],[2273,2273]]],[1566822117267,["GJX@GJXAIOU",[[1,2272," "]],[2273,2273],[2274,2274]]],[1566822124400,["GJX@GJXAIOU",[[1,2274,"eb.xml 文件中配置s"]],[2274,2274],[2287,2287]]],[1566822124426,["GJX@GJXAIOU",[[1,2286," "]],[2287,2287],[2288,2288]]],[1566822124755,["GJX@GJXAIOU",[[1,2288,"er"]],[2288,2288],[2290,2290]]],[1566822125984,["GJX@GJXAIOU",[[-1,2287,"ser"]],[2290,2290],[2287,2287]]],[1566822130239,["GJX@GJXAIOU",[[1,2287,"Servlet."]],[2287,2287],[2295,2295]]],[1566822131296,["GJX@GJXAIOU",[[-1,2294,"."]],[2295,2295],[2294,2294]]],[1566822132153,["GJX@GJXAIOU",[[1,2294,"。"]],[2294,2294],[2295,2295]]],[1566822163726,["GJX@GJXAIOU",[[1,2295,"\n- 浏览器发送请求到服务器，服务器根据请求 URL 地址中的 URI 信息在 webapps 目录下找到对应的项目文件夹，然后在 web.xml 中检索对应的 servlet，找到后调用并执行Servlet。"]],[2295,2295],[2400,2400]]],[1566822305019,["GJX@GJXAIOU",[[1,2400,"\n- web.xml 文件的配置是为了保护 servlet。"]],[2400,2400],[2430,2430]]],[1566822361282,["GJX@GJXAIOU",[[1,2430,"\n- "]],[2430,2430],[2433,2433]]],[1566822361432,["GJX@GJXAIOU",[[-1,2431,"- "],[1,2433,"\n\n"]],[2433,2433],[2432,2432]]],[1566822361627,["GJX@GJXAIOU",[[1,2433,"\n"]],[2432,2432],[2433,2433]]],[1566822375442,["GJX@GJXAIOU",[[1,2433,"### 处理请求的方法"]],[2433,2433],[2444,2444]]],[1566822375786,["GJX@GJXAIOU",[[1,2445,"\n"]],[2444,2444],[2445,2445]]],[1566822384451,["GJX@GJXAIOU",[[-1,2445,"\n"],[1,2446,"处理"]],[2445,2445],[2447,2447]]],[1566822392221,["GJX@GJXAIOU",[[1,2447,"客户端的请求有三种昂"]],[2447,2447],[2457,2457]]],[1566822393592,["GJX@GJXAIOU",[[-1,2456,"昂"]],[2457,2457],[2456,2456]]],[1566822409505,["GJX@GJXAIOU",[[1,2456,"方法：Service、doGet、doPost"]],[2456,2456],[2479,2479]]],[1566822411824,["GJX@GJXAIOU",[[1,2479,"\n\n"]],[2479,2479],[2480,2480]]],[1566822434392,["GJX@GJXAIOU",[[1,2480,"不管是get 方式还是post 方式的请求，如果Servlet 类中有service 方法，则优先调用Service 方法。\ndoGet 方法:在没有 service 方法的情况下如果是 get 方式的请求所调用的处理请求的方法"]],[2480,2480],[2594,2594]]],[1566822437848,["GJX@GJXAIOU",[[1,2480,"- "]],[2480,2480],[2482,2482]]],[1566822443081,["GJX@GJXAIOU",[[1,2545,"- "]],[2545,2545],[2547,2547]]],[1566822445825,["GJX@GJXAIOU",[[1,2598,"。"]],[2598,2598],[2599,2599]]],[1566822455975,["GJX@GJXAIOU",[[1,2600,"- \n"]],[2599,2599],[2602,2602]]],[1566822460675,["GJX@GJXAIOU",[[1,2602,"doPOST方法"]],[2602,2602],[2610,2610]]],[1566822460702,["GJX@GJXAIOU",[[1,2608," "]],[2610,2610],[2611,2611]]],[1566822463944,["GJX@GJXAIOU",[[1,2611,"：在没有service方法的情况下如果是post方式的请求所调用的处理请求的方法。"]],[2611,2611],[2652,2652]]],[1566822515190,["GJX@GJXAIOU",[[1,2653,"- \n"]],[2652,2652],[2655,2655]]],[1566822515313,["GJX@GJXAIOU",[[-1,2653,"- "]],[2655,2655],[2654,2654]]],[1566822515439,["GJX@GJXAIOU",[[1,2654,"\n"]],[2654,2654],[2655,2655]]],[1566822515559,["GJX@GJXAIOU",[[1,2655,"\n"]],[2655,2655],[2656,2656]]],[1566822516223,["GJX@GJXAIOU",[[1,2656,"\n"]],[2656,2656],[2657,2657]]],[1566822516937,["GJX@GJXAIOU",[[1,2657,"### "]],[2657,2657],[2660,2660]]],[1566822519908,["GJX@GJXAIOU",[[1,2660,"Servlet"]],[2660,2660],[2667,2667]]],[1566822522824,["GJX@GJXAIOU",[[1,2660," "]],[2660,2660],[2661,2661]]],[1566822525129,["GJX@GJXAIOU",[[1,2669," "]],[2668,2668],[2669,2669]]],[1566822529331,["GJX@GJXAIOU",[[1,2669,"常见错误总结："]],[2669,2669],[2676,2676]]],[1566822529559,["GJX@GJXAIOU",[[1,2676,"\n"]],[2676,2676],[2677,2677]]],[1566822530287,["GJX@GJXAIOU",[[-1,2676,"\n"]],[2677,2677],[2676,2676]]],[1566822530726,["GJX@GJXAIOU",[[-1,2675,"："]],[2676,2676],[2675,2675]]],[1566822531297,["GJX@GJXAIOU",[[1,2675,"\n"]],[2675,2675],[2676,2676]]],[1566822538578,["GJX@GJXAIOU",[[1,2676,"\n"]],[2675,2675],[2676,2676]]],[1566822538743,["GJX@GJXAIOU",[[1,2677,"\n"]],[2676,2676],[2677,2677]]],[1566822539728,["GJX@GJXAIOU",[[1,2677,"*\t404错误:资源未找到\n*\t原因一：在请求地址中的servlet的别名书写错误。\n*\t原因二：虚拟项目名称拼写错误\n*\t500错误：内部服务器错误"]],[2677,2677],[2752,2752]]],[1566822573593,["GJX@GJXAIOU",[[-1,2677,"*\t"]],[2677,2679],[2677,2677]]],[1566822574024,["GJX@GJXAIOU",[[1,2677,"- "]],[2677,2677],[2679,2679]]],[1566822576855,["GJX@GJXAIOU",[[-1,2691,"*\t"]],[2691,2693],[2691,2691]]],[1566822577648,["GJX@GJXAIOU",[[1,2691,"  - "]],[2691,2691],[2695,2695]]],[1566822580265,["GJX@GJXAIOU",[[-1,2722,"*\t"]],[2722,2724],[2722,2722]]],[1566822581472,["GJX@GJXAIOU",[[1,2722,"  - "]],[2722,2722],[2726,2726]]],[1566822584905,["GJX@GJXAIOU",[[-1,2741,"*\t"]],[2741,2743],[2741,2741]]],[1566822585362,["GJX@GJXAIOU",[[1,2741,"- "]],[2741,2741],[2743,2743]]],[1566822590937,["GJX@GJXAIOU",[[1,2757,"- \n"]],[2756,2756],[2759,2759]]],[1566822592519,["GJX@GJXAIOU",[[1,2757,"  "]],[2759,2759],[2761,2761]]],[1566822594977,["GJX@GJXAIOU",[[1,2761,"原因一："]],[2761,2761],[2765,2765]]],[1566822612511,["GJX@GJXAIOU",[[-1,2761,"原因一："]],[2765,2765],[2761,2761]]],[1566822623674,["GJX@GJXAIOU",[[1,2761,"错误一：java.lang.ClassNotFoundException: com.bjsxt.servlet.ServletMothod"]],[2761,2761],[2830,2830]]],[1566822627642,["GJX@GJXAIOU",[[1,2832," - \n "]],[2830,2830],[2835,2835]]],[1566822630643,["GJX@GJXAIOU",[[1,2835,"解决："]],[2835,2835],[2838,2838]]],[1566822631390,["GJX@GJXAIOU",[[1,2833,"  "]],[2838,2838],[2840,2840]]],[1566822639847,["GJX@GJXAIOU",[[1,2840,"在web.xml中校验servlet类的全限定路径是否拼写错误。"]],[2840,2840],[2872,2872]]],[1566822646303,["GJX@GJXAIOU",[[1,2874,"   - \n "]],[2872,2872],[2879,2879]]],[1566822647401,["GJX@GJXAIOU",[[1,2879,"~"]],[2879,2879],[2880,2880]]],[1566822648215,["GJX@GJXAIOU",[[-1,2877,"~  "]],[2880,2880],[2877,2877]]],[1566822650739,["GJX@GJXAIOU",[[1,2877,"错误而"]],[2877,2877],[2880,2880]]],[1566822651250,["GJX@GJXAIOU",[[-1,2879,"而"]],[2880,2880],[2879,2879]]],[1566822654270,["GJX@GJXAIOU",[[1,2879,"二：因为service方法体的代码执行错误导致"]],[2879,2879],[2902,2902]]],[1566822747202,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566822747202,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822706826,["GJX@GJXAIOU",[[1,2902,"；"]],[2902,2902],[2903,2903]]],[1566822707071,["GJX@GJXAIOU",[[1,2905," - \n "]],[2903,2903],[2908,2908]]],[1566822708415,["GJX@GJXAIOU",[[1,2906,"  "]],[2908,2908],[2910,2910]]],[1566822711535,["GJX@GJXAIOU",[[1,2910,"解决：根据错误提示对service方法体中的代码进行错误更改。"]],[2910,2910],[2941,2941]]],[1566822722119,["GJX@GJXAIOU",[[1,2943,"   - \n "]],[2941,2941],[2948,2948]]],[1566822723656,["GJX@GJXAIOU",[[-1,2942,"    "]],[2948,2948],[2944,2944]]],[1566822725456,["GJX@GJXAIOU",[[1,2944,"*\t405错误:请求方式不支持\n"]],[2944,2944],[2960,2960]]],[1566822732663,["GJX@GJXAIOU",[[-1,2943," *\t"]],[2945,2945],[2943,2943]]],[1566822733221,["GJX@GJXAIOU",[[1,2943," "]],[2943,2943],[2944,2944]]],[1566822740679,["GJX@GJXAIOU",[[1,2958,"- \n"]],[2957,2957],[2960,2960]]],[1566822743019,["GJX@GJXAIOU",[[1,2960,"原因："]],[2960,2960],[2963,2963]]],[1566822743776,["GJX@GJXAIOU",[[1,2958,"  "]],[2963,2963],[2965,2965]]],[1566822744642,["GJX@GJXAIOU",[[1,2965,"请求方式和servlet中的方法不匹配所造成的。"]],[2965,2965],[2989,2989]]],[1566822807199,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566822807199,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822752088,["GJX@GJXAIOU",[[1,2990,"  - \n"]],[2989,2989],[2994,2994]]],[1566822752583,["GJX@GJXAIOU",[[1,2992,"  "]],[2994,2994],[2996,2996]]],[1566822757850,["GJX@GJXAIOU",[[1,2996,"解决：尽量使用 service 方法进行请求处理，并且不要再 service 方法中调用父类的Servlet"]],[2996,2996],[3050,3050]]],[1566822757879,["GJX@GJXAIOU",[[1,3043," "]],[3050,3050],[3051,3051]]],[1566822758808,["GJX@GJXAIOU",[[-1,3048,"let"]],[3051,3051],[3048,3048]]],[1566822760571,["GJX@GJXAIOU",[[1,3048,"ice"]],[3048,3048],[3051,3051]]],[1566822867207,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566822867207,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822838896,["GJX@GJXAIOU",[[1,3051,";"]],[3051,3051],[3052,3052]]],[1566822839814,["GJX@GJXAIOU",[[1,3053,"    - \n"]],[3052,3052],[3059,3059]]],[1566822839970,["GJX@GJXAIOU",[[-1,3053,"    - "]],[3059,3059],[3054,3054]]],[1566822841207,["GJX@GJXAIOU",[[1,3055,"\n"]],[3054,3054],[3055,3055]]],[1566822843440,["GJX@GJXAIOU",[[1,3055,"### ser"]],[3055,3055],[3062,3062]]],[1566822844567,["GJX@GJXAIOU",[[-1,3059,"ser"]],[3062,3062],[3059,3059]]],[1566822846096,["GJX@GJXAIOU",[[1,3059,"Serc"]],[3059,3059],[3063,3063]]],[1566822846753,["GJX@GJXAIOU",[[-1,3062,"c"]],[3063,3063],[3062,3062]]],[1566822866258,["GJX@GJXAIOU",[[1,3062,"vlet 处理浏览器"]],[3062,3062],[3072,3072]]],[1566822927203,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566822927203,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822868221,["GJX@GJXAIOU",[[1,3072,"请求"]],[3072,3072],[3074,3074]]],[1566822868535,["GJX@GJXAIOU",[[1,3075,"\n"]],[3074,3074],[3075,3075]]],[1566822890484,["GJX@GJXAIOU",[[1,3077,"- Request对象"]],[3077,3077],[3088,3088]]],[1566822890512,["GJX@GJXAIOU",[[1,3086," "]],[3088,3088],[3089,3089]]],[1566822921831,["GJX@GJXAIOU",[[1,3089,"：使用对象进行存储，服务器每接受一个请求，就创建一个对象专门的存储此次请求的请求数据。\n - "]],[3089,3089],[3136,3136]]],[1566822923081,["GJX@GJXAIOU",[[-1,3134,"- "]],[3136,3136],[3134,3134]]],[1566822987207,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566822987207,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822929872,["GJX@GJXAIOU",[[1,3134,"服务器接收到浏览器的请求后，会创建一个 Request 对象，对象中存储了此次请求相关的请求数据。服务器在调用 Servlet 时会将创建的"]],[3134,3134],[3204,3204]]],[1566822933200,["GJX@GJXAIOU",[[-1,3133," "]],[3133,3134],[3133,3133]]],[1566822943830,["GJX@GJXAIOU",[[1,3203,"Request 对象作为实参传递给Servlet 的方法，比如：service 方法。"]],[3203,3203],[3246,3246]]],[1566822943861,["GJX@GJXAIOU",[[1,3203," "]],[3246,3246],[3247,3247]]],[1566822961104,["GJX@GJXAIOU",[[1,3247,"\n\n"]],[3247,3247],[3248,3248]]],[1566822961234,["GJX@GJXAIOU",[[1,3249,"\n"]],[3248,3248],[3249,3249]]],[1566822962337,["GJX@GJXAIOU",[[-1,3249,"\n"],[1,3250,"0"]],[3249,3249],[3250,3250]]],[1566822962688,["GJX@GJXAIOU",[[1,3250," "]],[3250,3250],[3251,3251]]],[1566822963167,["GJX@GJXAIOU",[[-1,3250," "]],[3251,3251],[3250,3250]]],[1566822963270,["GJX@GJXAIOU",[[-1,3249,"0"],[1,3250,"\n"]],[3250,3250],[3249,3249]]],[1566822964139,["GJX@GJXAIOU",[[-1,3249,"\n"],[1,3250,"-"]],[3249,3249],[3250,3250]]],[1566822970316,["GJX@GJXAIOU",[[1,3250," Response对象"]],[3250,3250],[3261,3261]]],[1566822970355,["GJX@GJXAIOU",[[1,3259," "]],[3261,3261],[3262,3262]]],[1566822970945,["GJX@GJXAIOU",[[1,3262,"："]],[3262,3262],[3263,3263]]],[1566823047208,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823047208,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566822993926,["GJX@GJXAIOU",[[1,3263,"使用Response 对象获取"]],[3263,3263],[3278,3278]]],[1566823003104,["GJX@GJXAIOU",[[-1,3276,"获取"]],[3278,3278],[3276,3276]]],[1566823046802,["GJX@GJXAIOU",[[1,3276,"将服务器处理的结果显示到浏览器中。"]],[3276,3276],[3293,3293]]],[1566823107211,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823107211,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823047464,["GJX@GJXAIOU",[[1,3293,"\n- "]],[3293,3293],[3296,3296]]],[1566823048079,["GJX@GJXAIOU",[[-1,3295," "]],[3296,3296],[3295,3295]]],[1566823048199,["GJX@GJXAIOU",[[-1,3294,"-"],[1,3295,"\n"]],[3295,3295],[3294,3294]]],[1566823056119,["GJX@GJXAIOU",[[1,3294,"服务器在调用指定的 Servlet 进行请求处理的时候，会给 Servlet 的方法传递两个实参 request 和 response。其中 request 中封存了请求相关的请求数据，而response 则是用来进行响应的一个对象。"]],[3294,3294],[3411,3411]]],[1566823092753,["GJX@GJXAIOU",[[1,3412,"\n"]],[3411,3411],[3412,3412]]],[1566823092905,["GJX@GJXAIOU",[[1,3413,"\n"]],[3412,3412],[3413,3413]]],[1566823093528,["GJX@GJXAIOU",[[1,3414,"\n"]],[3413,3413],[3414,3414]]],[1566823098451,["GJX@GJXAIOU",[[1,3414,"### Servlet处理"]],[3414,3414],[3427,3427]]],[1566823098480,["GJX@GJXAIOU",[[1,3425," "]],[3427,3427],[3428,3428]]],[1566823099561,["GJX@GJXAIOU",[[-1,3426,"处理"]],[3428,3428],[3426,3426]]],[1566823101676,["GJX@GJXAIOU",[[1,3426,"使用流程"]],[3426,3426],[3430,3430]]],[1566823101993,["GJX@GJXAIOU",[[1,3431,"\n"]],[3430,3430],[3431,3431]]],[1566823167212,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823167212,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823108353,["GJX@GJXAIOU",[[1,3431,"设置请求编码格式设置响应编码格式获取请求信息\n处理请求信息\n响应处理结果"]],[3431,3431],[3467,3467]]],[1566823112282,["GJX@GJXAIOU",[[1,3439,"\n"]],[3439,3439],[3440,3440]]],[1566823114223,["GJX@GJXAIOU",[[1,3448,"\n"]],[3448,3448],[3449,3449]]],[1566823467223,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823467223,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823420472,["GJX@GJXAIOU",[[1,3470,"\n"]],[3469,3469],[3470,3470]]],[1566823420626,["GJX@GJXAIOU",[[1,3471,"\n"]],[3470,3470],[3471,3471]]],[1566823420784,["GJX@GJXAIOU",[[1,3472,"\n"]],[3471,3471],[3472,3472]]],[1566823424879,["GJX@GJXAIOU",[[1,3472,"### 球球"]],[3472,3472],[3478,3478]]],[1566823425539,["GJX@GJXAIOU",[[-1,3476,"球球"]],[3478,3478],[3476,3476]]],[1566823428381,["GJX@GJXAIOU",[[1,3476,"请求转发"]],[3476,3476],[3480,3480]]],[1566823428896,["GJX@GJXAIOU",[[1,3481,"\n"]],[3480,3480],[3481,3481]]],[1566823447792,["GJX@GJXAIOU",[[1,3481,"服务器在接收到浏览器的请求后，仅仅使用一个Servlet 进行请求处理，会造成不同的 Servlet 逻辑代码冗余，Servlet 的职责不明确。\n解决：\n使用请求转发。"]],[3481,3481],[3566,3566]]],[1566823447823,["GJX@GJXAIOU",[[1,3502," "]],[3566,3566],[3567,3567]]],[1566823527222,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823527222,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823468648,["GJX@GJXAIOU",[[1,3568,"\n"]],[3567,3567],[3568,3568]]],[1566823468793,["GJX@GJXAIOU",[[1,3569,"\n"]],[3568,3568],[3569,3569]]],[1566823469299,["GJX@GJXAIOU",[[1,3570,"\n"]],[3569,3569],[3570,3570]]],[1566823470339,["GJX@GJXAIOU",[[-1,3570,"\n"],[1,3571,"*"]],[3570,3570],[3571,3571]]],[1566823470497,["GJX@GJXAIOU",[[1,3571,"***"]],[3571,3571],[3572,3572]]],[1566823476340,["GJX@GJXAIOU",[[1,3572,"Request 对象作用域"]],[3572,3572],[3585,3585]]],[1566823478144,["GJX@GJXAIOU",[[1,3587,"\n\n"]],[3587,3587],[3588,3588]]],[1566823484025,["GJX@GJXAIOU",[[1,3588,"问题：使用请求转发后，不同的Servlet 之间怎么进行数据的共享呢？或者说数据怎么从一个servlet 流转给另外一个Servlet 呢？"]],[3588,3588],[3658,3658]]],[1566823494336,["GJX@GJXAIOU",[[1,3659,"\n"]],[3658,3658],[3659,3659]]],[1566823496036,["GJX@GJXAIOU",[[-1,3659,"\n"],[1,3660,"解决"]],[3659,3659],[3661,3661]]],[1566823506627,["GJX@GJXAIOU",[[1,3661,"：使用request 对象的作用域；作用：解决了一次请求内的不同Servlet 的数据(请求数据+其他数据)共享问题。"]],[3661,3661],[3720,3720]]],[1566823509408,["GJX@GJXAIOU",[[1,3679,"\n"]],[3679,3679],[3680,3680]]],[1566823587221,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823587221,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823527488,["GJX@GJXAIOU",[[1,3721,"\n\n"]],[3721,3721],[3722,3722]]],[1566823527616,["GJX@GJXAIOU",[[1,3723,"\n"]],[3722,3722],[3723,3723]]],[1566823569857,["GJX@GJXAIOU",[[1,3724,"\n"]],[3722,3722],[3723,3723]]],[1566823647223,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823647223,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823601002,["GJX@GJXAIOU",[[1,3723,"****"]],[3723,3723],[3725,3725]]],[1566823602690,["GJX@GJXAIOU",[[1,3725,"注："]],[3725,3725],[3727,3727]]],[1566823607438,["GJX@GJXAIOU",[[1,3729," 作用域即"]],[3729,3729],[3734,3734]]],[1566823608056,["GJX@GJXAIOU",[[-1,3733,"即"]],[3734,3734],[3733,3733]]],[1566823609469,["GJX@GJXAIOU",[[1,3733,"基于"]],[3733,3733],[3735,3735]]],[1566823611809,["GJX@GJXAIOU",[[-1,3733,"基于"]],[3735,3735],[3733,3733]]],[1566823623659,["GJX@GJXAIOU",[[1,3733,"基于请求转发，一次请求中的所有Servlet"]],[3733,3733],[3755,3755]]],[1566823623689,["GJX@GJXAIOU",[[1,3748," "]],[3755,3755],[3756,3756]]],[1566823625213,["GJX@GJXAIOU",[[1,3756,"共享"]],[3756,3756],[3758,3758]]],[1566823625242,["GJX@GJXAIOU",[[1,3756," "]],[3758,3758],[3759,3759]]],[1566823635926,["GJX@GJXAIOU",[[1,3759,"；使用request"]],[3759,3759],[3769,3769]]],[1566823635954,["GJX@GJXAIOU",[[1,3762," "]],[3769,3769],[3770,3770]]],[1566823637519,["GJX@GJXAIOU",[[1,3770,"对象"]],[3770,3770],[3772,3772]]],[1566823637550,["GJX@GJXAIOU",[[1,3770," "]],[3772,3772],[3773,3773]]],[1566823646197,["GJX@GJXAIOU",[[1,3773,"进行数据流转时候，数据"]],[3773,3773],[3784,3784]]],[1566823707226,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823707226,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823648271,["GJX@GJXAIOU",[[1,3784,"指在"]],[3784,3784],[3786,3786]]],[1566823648968,["GJX@GJXAIOU",[[-1,3784,"指在"]],[3786,3786],[3784,3784]]],[1566823661706,["GJX@GJXAIOU",[[1,3784,"只在一起请求中有效。"]],[3784,3784],[3794,3794]]],[1566823675379,["GJX@GJXAIOU",[[1,3796,"\n"]],[3794,3794],[3795,3795]]],[1566823675514,["GJX@GJXAIOU",[[1,3797,"\n"]],[3795,3795],[3796,3796]]],[1566823676546,["GJX@GJXAIOU",[[1,3798,"\n"]],[3796,3796],[3797,3797]]],[1566823676729,["GJX@GJXAIOU",[[1,3799,"\n"]],[3797,3797],[3798,3798]]],[1566823683941,["GJX@GJXAIOU",[[1,3798,"### 重定向"]],[3798,3798],[3805,3805]]],[1566823684337,["GJX@GJXAIOU",[[1,3807,"\n"]],[3805,3805],[3806,3806]]],[1566823701915,["GJX@GJXAIOU",[[1,3806,"主要针对：当前请求，Servlet无法"]],[3806,3806],[3825,3825]]],[1566823701946,["GJX@GJXAIOU",[[1,3823," "]],[3825,3825],[3826,3826]]],[1566823705981,["GJX@GJXAIOU",[[1,3826,"进行处理以及"]],[3826,3826],[3832,3832]]],[1566823767231,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823767231,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823729717,["GJX@GJXAIOU",[[1,3832,"使用请求转发造成表单数据重复提交等等问题。"]],[3832,3832],[3853,3853]]],[1566823730809,["GJX@GJXAIOU",[[1,3855,"\n"]],[3853,3853],[3854,3854]]],[1566823765710,["GJX@GJXAIOU",[[1,3854,"特点：两次请求，浏览器地址栏信息改变，同时可以"]],[3854,3854],[3877,3877]]],[1566823827230,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823827230,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823776629,["GJX@GJXAIOU",[[1,3877,"避免表单重复提交。"]],[3877,3877],[3886,3886]]],[1566823800418,["GJX@GJXAIOU",[[1,3888,"\n"]],[3887,3887],[3888,3888]]],[1566823800521,["GJX@GJXAIOU",[[1,3889,"\n"]],[3888,3888],[3889,3889]]],[1566823800691,["GJX@GJXAIOU",[[1,3890,"\n"]],[3889,3889],[3890,3890]]],[1566823800907,["GJX@GJXAIOU",[[1,3891,"\n"]],[3890,3890],[3891,3891]]],[1566823801042,["GJX@GJXAIOU",[[1,3892,"\n"]],[3891,3891],[3892,3892]]],[1566823801322,["GJX@GJXAIOU",[[1,3893,"\n"]],[3892,3892],[3893,3893]]],[1566823802190,["GJX@GJXAIOU",[[-1,3893,"\n"],[1,3894,"2"]],[3893,3893],[3894,3894]]],[1566823803377,["GJX@GJXAIOU",[[-1,3893,"2"],[1,3894,"\n"]],[3894,3894],[3893,3893]]],[1566823817439,["GJX@GJXAIOU",[[1,3893,"## 对于请求加护"]],[3893,3893],[3902,3902]]],[1566823818073,["GJX@GJXAIOU",[[-1,3900,"加护"]],[3902,3902],[3900,3900]]],[1566823824045,["GJX@GJXAIOU",[[1,3900,"交互过程进行优化"]],[3900,3900],[3908,3908]]],[1566823824417,["GJX@GJXAIOU",[[1,3909,"\n"]],[3908,3908],[3909,3909]]],[1566823824530,["GJX@GJXAIOU",[[1,3910,"\n"]],[3909,3909],[3910,3910]]],[1566823825283,["GJX@GJXAIOU",[[1,3911,"\n"]],[3910,3910],[3911,3911]]],[1566823826329,["GJX@GJXAIOU",[[1,3911,"### "]],[3911,3911],[3915,3915]]],[1566823887231,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823887231,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823830518,["GJX@GJXAIOU",[[1,3915,"cookie"]],[3915,3915],[3921,3921]]],[1566823831097,["GJX@GJXAIOU",[[1,3922,"\n"]],[3921,3921],[3922,3922]]],[1566823837944,["GJX@GJXAIOU",[[-1,3910,"\n"]],[3910,3910],[3909,3909]]],[1566823857876,["GJX@GJXAIOU",[[1,3921,"HTTP 协议是没有记忆功能的，一次请求结束后，相关数据会被销毁。如果第二次的请求需要使用相同的请求数据怎么办呢？难道是让用户再次请求书写吗?"]],[3921,3921],[3992,3992]]],[1566823869913,["GJX@GJXAIOU",[[1,3993,"\n"]],[3992,3992],[3993,3993]]],[1566823870016,["GJX@GJXAIOU",[[1,3994,"\n"]],[3993,3993],[3994,3994]]],[1566823870417,["GJX@GJXAIOU",[[1,3994,"Cookie 技术其实是浏览器端的数据存储技术，解决了不同请求需要使用相同的请求数据的问题。我们把请求需要共享的请求数据，存储在浏览器端，避免用户进行重复的书写请求数据。但是哪些数据需要使用Cookie 技术存储起来是一个主观问题，需要在\n后台进行响应的时候来告诉浏览器，有些数据其他请求还会使用，需要存储起来。"]],[3994,3994],[4150,4150]]],[1566823884708,["GJX@GJXAIOU",[[1,3920," ：浏览器端的数据存储记住"]],[3920,3920],[3933,3933]]],[1566823885401,["GJX@GJXAIOU",[[-1,3931,"记住"]],[3933,3933],[3931,3931]]],[1566823886323,["GJX@GJXAIOU",[[1,3931,"技术"]],[3931,3931],[3933,3933]]],[1566823947239,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566823947239,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823890649,["GJX@GJXAIOU",[[1,4164,"\n"]],[4163,4163],[4164,4164]]],[1566823890760,["GJX@GJXAIOU",[[1,4165,"\n"]],[4164,4164],[4165,4165]]],[1566823891566,["GJX@GJXAIOU",[[-1,4165,"\n"],[1,4166,"*"]],[4165,4165],[4166,4166]]],[1566823891705,["GJX@GJXAIOU",[[1,4166,"***"]],[4166,4166],[4167,4167]]],[1566823897557,["GJX@GJXAIOU",[[1,4167,"特点："]],[4167,4167],[4170,4170]]],[1566823898961,["GJX@GJXAIOU",[[1,4172,"\n\n"]],[4172,4172],[4173,4173]]],[1566823899286,["GJX@GJXAIOU",[[-1,4173,"\n"],[1,4174,"-"]],[4173,4173],[4174,4174]]],[1566823912228,["GJX@GJXAIOU",[[1,4174," 适合少量的数据；\n- 使用键值对；\n- 不安全；"]],[4174,4174],[4199,4199]]],[1566823929026,["GJX@GJXAIOU",[[1,3934,"\n"]],[3933,3933],[3934,3934]]],[1566823931089,["GJX@GJXAIOU",[[1,3935,"\n"]],[3934,3934],[3935,3935]]],[1566823947174,["GJX@GJXAIOU",[[1,3934,"用于解决不同请求发送之间"]],[3934,3934],[3946,3946]]],[1566824007238,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824007238,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566823954517,["GJX@GJXAIOU",[[1,3946,"的数据共享问题。"]],[3946,3946],[3954,3954]]],[1566824067238,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824067238,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824023441,["GJX@GJXAIOU",[[1,4221,"\n- "]],[4221,4221],[4224,4224]]],[1566824023562,["GJX@GJXAIOU",[[-1,4222,"- "],[1,4224,"\n\n"]],[4224,4224],[4223,4223]]],[1566824023729,["GJX@GJXAIOU",[[1,4224,"\n"]],[4223,4223],[4224,4224]]],[1566824053902,["GJX@GJXAIOU",[[1,4224,"### session：服务器端的数据存储技术"]],[4224,4224],[4247,4247]]],[1566824054393,["GJX@GJXAIOU",[[1,4248,"\n"]],[4247,4247],[4248,4248]]],[1566824427244,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824427244,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824375978,["GJX@GJXAIOU",[[1,4248,"Request 对象解决了一次请求内的不同 Servlet 的数据共享问\n题，那么一个用户的不同请求的处理需要使用相同的数据怎么办呢?"]],[4248,4248],[4315,4315]]],[1566824385042,["GJX@GJXAIOU",[[-1,4284,"\n"]],[4285,4285],[4284,4284]]],[1566824387161,["GJX@GJXAIOU",[[1,4315,"\n"]],[4314,4314],[4315,4315]]],[1566824387300,["GJX@GJXAIOU",[[1,4316,"\n"]],[4315,4315],[4316,4316]]],[1566824388694,["GJX@GJXAIOU",[[-1,4316,"\n"],[1,4317,"*"]],[4316,4316],[4317,4317]]],[1566824388829,["GJX@GJXAIOU",[[1,4317,"***"]],[4317,4317],[4318,4318]]],[1566824390492,["GJX@GJXAIOU",[[1,4318,"原理："]],[4318,4318],[4321,4321]]],[1566824391929,["GJX@GJXAIOU",[[1,4323,"\n\n"]],[4323,4323],[4324,4324]]],[1566824404402,["GJX@GJXAIOU",[[1,4324,"用户使用浏览器第一次向服务器发送请求，服务器在接受到请求后，调用对应的Servlet 进行处理。在处理过程中会给用户创建一个session 对象，用来存储用户请求处理相关的公共数据，并将此 session 对象的 JSESSIONID 以 Cookie 的形式存储在浏览器中(临时存储，浏览器关闭即失效)。用户在发起第二次请求及后续请求时，请求信息中会附带JSESSIONID，服务器在接收到请求后，调用对应的Servlet 进行请求处理，同时根据JSESSIONID 返回其对应的session 对象。"]],[4324,4324],[4576,4576]]],[1566824415364,["GJX@GJXAIOU",[[1,4248,"\n"]],[4247,4247],[4248,4248]]],[1566824415516,["GJX@GJXAIOU",[[1,4249,"\n"]],[4248,4248],[4249,4249]]],[1566824421870,["GJX@GJXAIOU",[[1,4249,"Session 技术是依赖Cookie 技术的服务器端的数据存储技术。"]],[4249,4249],[4284,4284]]],[1566824422226,["GJX@GJXAIOU",[[1,4285,"\n"]],[4284,4284],[4285,4285]]],[1566824487247,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824487247,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824432796,["GJX@GJXAIOU",[[1,4248,"解决了一个用户的不同请求的数据共享问题。"]],[4248,4248],[4268,4268]]],[1566824444755,["GJX@GJXAIOU",[[1,4635,"\n"]],[4634,4634],[4635,4635]]],[1566824444877,["GJX@GJXAIOU",[[1,4636,"\n"]],[4635,4635],[4636,4636]]],[1566824445685,["GJX@GJXAIOU",[[-1,4636,"\n"],[1,4637,"*"]],[4636,4636],[4637,4637]]],[1566824445837,["GJX@GJXAIOU",[[1,4637,"***"]],[4637,4637],[4638,4638]]],[1566824447524,["GJX@GJXAIOU",[[1,4638,"注："]],[4638,4638],[4640,4640]]],[1566824449097,["GJX@GJXAIOU",[[1,4642,"只要不关闭浏览器，并且 session 不失效的情况下，同一个用户的任意请求在项目的任意Servlet 中获取到的都是同一个session对象。"]],[4642,4642],[4714,4714]]],[1566824472107,["GJX@GJXAIOU",[[1,4714,"\n\n"]],[4714,4714],[4715,4715]]],[1566824472258,["GJX@GJXAIOU",[[1,4716,"\n"]],[4715,4715],[4716,4716]]],[1566824472946,["GJX@GJXAIOU",[[1,4717,"\n"]],[4716,4716],[4717,4717]]],[1566824474570,["GJX@GJXAIOU",[[1,4718,"\n"]],[4717,4717],[4718,4718]]],[1566824547252,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824547252,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824492014,["GJX@GJXAIOU",[[1,4718,"## Servlet两大"]],[4718,4718],[4730,4730]]],[1566824492046,["GJX@GJXAIOU",[[1,4728," "]],[4730,4730],[4731,4731]]],[1566824493951,["GJX@GJXAIOU",[[1,4731,"对象"]],[4731,4731],[4733,4733]]],[1566824494300,["GJX@GJXAIOU",[[1,4734,"\n"]],[4733,4733],[4734,4734]]],[1566824502554,["GJX@GJXAIOU",[[1,4734,"Request 解决了一次请求内的数据共享问题，session 解决了用户不同请求的数据共享问题，那么不同的用户的数据共享该怎么办呢？"]],[4734,4734],[4801,4801]]],[1566824508370,["GJX@GJXAIOU",[[1,4802,"\n"]],[4801,4801],[4802,4802]]],[1566824508493,["GJX@GJXAIOU",[[1,4803,"\n"]],[4802,4802],[4803,4803]]],[1566824509090,["GJX@GJXAIOU",[[1,4803,"使用ServletContext 对象"]],[4803,4803],[4822,4822]]],[1566824511714,["GJX@GJXAIOU",[[1,4734,"\n"]],[4733,4733],[4734,4734]]],[1566824511844,["GJX@GJXAIOU",[[1,4735,"\n"]],[4734,4734],[4735,4735]]],[1566824524182,["GJX@GJXAIOU",[[1,4735,"### ServletContext对象"]],[4735,4735],[4755,4755]]],[1566824524214,["GJX@GJXAIOU",[[1,4753," "]],[4755,4755],[4756,4756]]],[1566824531778,["GJX@GJXAIOU",[[1,4757,"\n"]],[4756,4756],[4757,4757]]],[1566824531891,["GJX@GJXAIOU",[[1,4758,"\n"]],[4757,4757],[4758,4758]]],[1566824533204,["GJX@GJXAIOU",[[1,4757,"解决了不同用户的数据共享问题"]],[4757,4757],[4771,4771]]],[1566824543481,["GJX@GJXAIOU",[[-1,4841,"\n"]],[4842,4842],[4841,4841]]],[1566824543882,["GJX@GJXAIOU",[[-1,4840,"\n"]],[4841,4841],[4840,4840]]],[1566824544972,["GJX@GJXAIOU",[[1,4840," ："]],[4840,4840],[4842,4842]]],[1566824607255,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824607255,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824547924,["GJX@GJXAIOU",[[1,4862,"\n"]],[4861,4861],[4862,4862]]],[1566824548027,["GJX@GJXAIOU",[[1,4863,"\n"]],[4862,4862],[4863,4863]]],[1566824548901,["GJX@GJXAIOU",[[-1,4863,"\n"],[1,4864,"*"]],[4863,4863],[4864,4864]]],[1566824549036,["GJX@GJXAIOU",[[1,4864,"***"]],[4864,4864],[4865,4865]]],[1566824551085,["GJX@GJXAIOU",[[1,4865,"原理"]],[4865,4865],[4867,4867]]],[1566824554537,["GJX@GJXAIOU",[[1,4869," ServletContext 对象由服务器进行创建，一个项目只有一个对象。不管在项目的任意位置进行获取得到的都是同一个对象，那么不同用户发起的请求获取到的也就是同一个对象了，该对象由用户共同拥有。"]],[4869,4869],[4968,4968]]],[1566824562705,["GJX@GJXAIOU",[[1,4773,"\n"]],[4771,4771],[4772,4772]]],[1566824565670,["GJX@GJXAIOU",[[1,4772,"有"]],[4772,4772],[4773,4773]]],[1566824567242,["GJX@GJXAIOU",[[-1,4772,"有"]],[4773,4773],[4772,4772]]],[1566824567794,["GJX@GJXAIOU",[[1,4774,"\n"]],[4772,4772],[4773,4773]]],[1566824599318,["GJX@GJXAIOU",[[1,4773,"由服务器创建、用户共享、一个项目只有一个；生命周期是：一个项目只有一个"]],[4773,4773],[4808,4808]]],[1566824602881,["GJX@GJXAIOU",[[-1,4800,"一个项目只有一个"]],[4808,4808],[4800,4800]]],[1566824667255,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824667255,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824607763,["GJX@GJXAIOU",[[-1,4799,"："]],[4800,4800],[4799,4799]]],[1566824619262,["GJX@GJXAIOU",[[1,4799,"：服务器启动到服务器关闭；"]],[4799,4799],[4812,4812]]],[1566824647442,["GJX@GJXAIOU",[[1,4794,"\n"]],[4794,4794],[4795,4795]]],[1566824651863,["GJX@GJXAIOU",[[1,4773,"特点："]],[4773,4773],[4776,4776]]],[1566824654459,["GJX@GJXAIOU",[[1,4818,"\n"]],[4816,4816],[4817,4817]]],[1566824663197,["GJX@GJXAIOU",[[1,4817,"作用域：项目内；"]],[4817,4817],[4825,4825]]],[1566824666861,["GJX@GJXAIOU",[[1,4773,"* "],[1,4798,"* "],[1,4817,"* "]],[4773,4825],[4775,4831]]],[1566824727254,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566824727254,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566824677908,["GJX@GJXAIOU",[[1,5028,"\n\n"]],[5028,5028],[5029,5029]]],[1566824678635,["GJX@GJXAIOU",[[1,5030,"\n"]],[5029,5029],[5030,5030]]],[1566824698999,["GJX@GJXAIOU",[[1,4771,"，可以用于网页浏览器次数统计；"]],[4771,4771],[4786,4786]]],[1566824706363,["GJX@GJXAIOU",[[1,5046,"\n"]],[5045,5045],[5046,5046]]],[1566824706501,["GJX@GJXAIOU",[[1,5047,"\n"]],[5046,5046],[5047,5047]]],[1566824715493,["GJX@GJXAIOU",[[1,5047,"### ServletConfig 对象"]],[5047,5047],[5067,5067]]],[1566824716371,["GJX@GJXAIOU",[[1,5068,"\n"]],[5067,5067],[5068,5068]]],[1566825567267,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566825567267,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566825532446,["GJX@GJXAIOU",[[1,5068,"使用ServletContext 对象可以获取web.xml 中的全局配置文件，在web.xml 中\n每个 Servlet 也可以进行单独的配置，那么该怎么获取配置信息呢？ ---》"]],[5068,5068],[5159,5159]]],[1566825533260,["GJX@GJXAIOU",[[-1,5158,"》"]],[5159,5159],[5158,5158]]],[1566825538024,["GJX@GJXAIOU",[[1,5158,"> 使用Servlet"]],[5158,5158],[5169,5169]]],[1566825538056,["GJX@GJXAIOU",[[1,5162," "]],[5169,5169],[5170,5170]]],[1566825541583,["GJX@GJXAIOU",[[1,5170,"Config对象"]],[5170,5170],[5178,5178]]],[1566825541615,["GJX@GJXAIOU",[[1,5176," "]],[5178,5178],[5179,5179]]],[1566825550572,["GJX@GJXAIOU",[[1,5180,"\n"]],[5179,5179],[5180,5180]]],[1566825550693,["GJX@GJXAIOU",[[1,5181,"\n"]],[5180,5180],[5181,5181]]],[1566825551132,["GJX@GJXAIOU",[[1,5181,"ServletConfig 对象是 Servlet 的专属配置对象，每个 Servlet 都单独拥有一个 ServletConfig 对象，用来获取 web.xml 中的配置信息。"]],[5181,5181],[5271,5271]]],[1566825627273,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566825627273,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566825580580,["GJX@GJXAIOU",[[-1,52,"的"]],[53,53],[52,52]]],[1566825582624,["GJX@GJXAIOU",[[1,52,"与"]],[52,52],[53,53]]],[1566825687270,[null,[[-1,2875," "],[1,2876,"-"]],[2875,2875],[2877,2877]]],[1566825687270,[null,[[1,2875," "],[-1,2875,"-"]],[2877,2877],[2875,2875]]],[1566825634363,["GJX@GJXAIOU",[[1,47,"**"],[1,63,"**"]],[47,63],[47,67]]],[1566825656659,["GJX@GJXAIOU",[[-1,308,"get"]],[311,311],[308,308]]],[1566825658360,["GJX@GJXAIOU",[[1,308,"GET"]],[308,308],[311,311]]],[1566825661836,["GJX@GJXAIOU",[[-1,419,"\n"]],[419,419],[418,418]]],[1566825747274,[null,[[-1,2878," "],[1,2879,"-"]],[2878,2878],[2880,2880]]],[1566825747274,[null,[[1,2878," "],[-1,2878,"-"]],[2880,2880],[2878,2878]]],[1566825709675,["GJX@GJXAIOU",[[-1,551,"\n"]],[551,551],[550,550]]],[1566825715652,["GJX@GJXAIOU",[[-1,579,"2013年07月14日 17:20:51 [爱吃肉的老杨](https://me.csdn.net/yangchujie1) 阅读数 6564"]],[579,650],[579,579]]],[1566825716267,["GJX@GJXAIOU",[[-1,580,"\n"]],[579,579],[578,578]]],[1566825716684,["GJX@GJXAIOU",[[-1,579,"\n"]],[578,578],[577,577]]],[1566825726486,["GJX@GJXAIOU",[[1,579,"**"],[1,608,"**"]],[579,608],[579,612]]],[1566825739851,["GJX@GJXAIOU",[[-1,613,"因为Tomcat技术先进、性能稳定且免费，所以深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。"]],[613,681],[613,613]]],[1566825867276,[null,[[-1,2740," "],[1,2741,"-"]],[2740,2740],[2742,2742]]],[1566825867276,[null,[[1,2740," "],[-1,2740,"-"]],[2742,2742],[2740,2740]]],[1566825823470,["GJX@GJXAIOU",[[1,1199,"**"],[1,1213,"**"]],[1199,1213],[1199,1217]]],[1566825859524,["GJX@GJXAIOU",[[-1,1127,"\n"]],[1127,1127],[1126,1126]]],[1566825862932,["GJX@GJXAIOU",[[-1,634,"\n"]],[634,634],[633,633]]],[1566825927277,[null,[[-1,2742," "],[1,2743,"-"]],[2742,2742],[2744,2744]]],[1566825927277,[null,[[1,2742," "],[-1,2742,"-"]],[2744,2744],[2742,2742]]],[1566825873077,["GJX@GJXAIOU",[[-1,1677,"："]],[1678,1678],[1677,1677]]],[1566825879471,["GJX@GJXAIOU",[[1,1679," ："]],[1679,1679],[1681,1681]]],[1566825895175,["GJX@GJXAIOU",[[1,1777," "]],[1777,1777],[1778,1778]]],[1566825898165,["GJX@GJXAIOU",[[1,2009," "]],[2009,2009],[2010,2010]]],[1566825899317,["GJX@GJXAIOU",[[1,2054," "]],[2054,2054],[2055,2055]]],[1566825903013,["GJX@GJXAIOU",[[-1,2056," "]],[2057,2057],[2056,2056]]],[1566825912373,["GJX@GJXAIOU",[[1,1531,"* "],[1,1577,"* "],[1,1588,"* "],[1,1601,"* "],[1,1614,"* "],[1,1632,"* "]],[1531,1658],[1533,1670]]],[1566826047283,[null,[[-1,2757," "],[1,2758,"-"]],[2757,2757],[2759,2759]]],[1566826047283,[null,[[1,2757," "],[-1,2757,"-"]],[2759,2759],[2757,2757]]],[1566826045981,["GJX@GJXAIOU",[[-1,2538,"\n"]],[2538,2538],[2537,2537]]],[1566826046126,["GJX@GJXAIOU",[[-1,2537,"\n"]],[2537,2537],[2536,2536]]],[1566826107287,[null,[[-1,2755," "],[1,2756,"-"]],[2755,2755],[2757,2757]]],[1566826107287,[null,[[1,2755," "],[-1,2755,"-"]],[2757,2757],[2755,2755]]],[1566826049844,["GJX@GJXAIOU",[[-1,2556,"\n"]],[2556,2556],[2555,2555]]],[1566826052924,["GJX@GJXAIOU",[[-1,2954,"\n"]],[2954,2954],[2953,2953]]],[1566826060340,["GJX@GJXAIOU",[[-1,3770,"\n"]],[3768,3768],[3767,3767]]],[1566826060503,["GJX@GJXAIOU",[[-1,3769,"\n"]],[3767,3767],[3766,3766]]],[1566826096932,["GJX@GJXAIOU",[[-1,4922,"\n"]],[4922,4922],[4921,4921]]],[1566826103532,["GJX@GJXAIOU",[[-1,4663,"\n"]],[4663,4663],[4662,4662]]]],null,"GJX@GJXAIOU"]]}