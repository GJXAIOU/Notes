{"compress":true,"commitItems":[["1bf564a8-4315-40d2-884b-141636bf793e",1561854963256,"Java迭代器Iterator详解",[[1561854915212,["GJX@GJXAIOU",[[1,0,"# "]],[0,0],[19,19]]],[1561854917156,["GJX@GJXAIOU",[[1,19,"\n\n"]],[19,19],[20,20]]],[1561854917732,["GJX@GJXAIOU",[[1,21,"\n"]],[20,20],[21,21]]],[1561854930757,["GJX@GJXAIOU",[[1,21,"为了方便的处理集合中的元素,Java中出现了一个对象,该对象提供了一些方法专门处理集合中的元素.例如删除和获取集合中的元素.该对象就叫做迭代器(Iterator).\n\n对 Collection 进行迭代的类，称其为迭代器。还是面向对象的思想，专业对象做专业的事情，迭代器就是专门取出集合元素的对象。但是该对象比较特殊，不能直接创建对象（通过new），该对象是以内部类的形式存在于每个集合类的内部。\n\n如何获取迭代器？Collection接口中定义了获取集合类迭代器的方法（iterator（）），所以所有的Collection体系集合都可以获取自身的迭代器。\n\n\n\n1.Iterable\n\n正是由于每一个容器都有取出元素的功能。这些功能定义都一样，只不过实现的具体方式不同（因为每一个容器的数据结构不一样）所以对共性的取出功能进行了抽取，从而出现了Iterator接口。而每一个容器都在其内部对该接口进行了内部类的实现。也就是将取出方式的细节进行封装。\n\n\nJdk1.5之后添加的新接口, Collection的父接口. 实现了Iterable的类就是可迭代的.并且支持增强for循环。该接口只有一个方法即获取迭代器的方法iterator（）可以获取每个容器自身的迭代器Iterator。（Collection）集合容器都需要获取迭代器（Iterator）于是在5.0后又进行了抽取将获取容器迭代器的iterator（）方法放入到了Iterable接口中。Collection接口进程了Iterable，所以Collection体系都具备获取自身迭代器的方法，只不过每个子类集合都进行了重写（因为数据结构不同）\n\n\n2.Iterator \n\niterator() 返回该集合的迭代器对象\n\n\n该类主要用于遍历集合对象，该类描述了遍历集合的常见方法\n\n1：java.lang. Itreable  \n\n---| Itreable      接口 实现该接口可以使用增强for循环\n\n        ---| Collection 描述所有集合共性的接口\n\n             ---| List接口     可以有重复元素的集合\n\n             ---| Set接口     不可以有重复元素的集合\n\npublic interface Iterable<T>\n\nItreable   该接口仅有一个方法，用于返回集合迭代器对象。\n\n  Iterator<T> iterator() 返回集合的迭代器对象\n\n \n\nIterator接口定义的方法\n\n\nItreator\t该接口是集合的迭代器接口类，定义了常见的迭代方法\n\t1：boolean hasNext() \n\t\t\t\t\t\t判断集合中是否有元素，如果有元素可以迭代，就返回true。\n\t2： E next()  \n\t\t\t\t\t\t返回迭代的下一个元素，注意： 如果没有下一个元素时，调用\nnext元素会抛出NoSuchElementException\n\t3： void remove()\n\t\t\t\t\t\t从迭代器指向的集合中移除迭代器返回的最后一个元素（可选操\n作）。\n思考：为什么next方法的返回类型是Object的呢？ \n\n为了可以接收任意类型的对象,那么返回的时候,不知道是什么类型的就定义为object\n\n3.迭代器的遍历\n\n第一种方式：while循环\n\npublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n\t\tIterator it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tString next = (String) it.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n\t}\n第二种方式:for循环\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n \n\t\tfor (Iterator it = list.iterator(); it.hasNext();) {\n             //迭代器的next方法返回值类型是Object，所以要记得类型转换。\n\t\t\tString next = (String) it.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n\t}\n}\n需要取出所有元素时，可以通过循环，java 建议使用for 循环。因为可以对内存进行一下优化。\n\n第三种方式：使用迭代器清空集合\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tCollection coll = new ArrayList();\n\t\tcoll.add(\"aaa\");\n\t\tcoll.add(\"bbb\");\n\t\tcoll.add(\"ccc\");\n\t\tcoll.add(\"ddd\");\n\t\tSystem.out.println(coll);\n\t\tIterator it = coll.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tit.next();\n\t\t\tit.remove();\n\t\t}\n\t\tSystem.out.println(coll);\n\t}\n}\n\n\n需要注意的细节如下：\n细节一：\n\n如果迭代器的指针已经指向了集合的末尾，那么如果再调用next()会返回NoSuchElementException异常\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n \n\t\tIterator it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tString next = (String) it.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n\t\t// 迭代器的指针已经指向了集合的末尾\n\t\t// String next = (String) it.next();\n\t\t// java.util.NoSuchElementException\n\t}\n}\n细节二：\n\n 如果调用remove之前没有调用next是不合法的，会抛出IllegalStateException\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n \n\t\tIterator it = list.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\t// 调用remove之前没有调用next是不合法的\n\t\t\t// it.remove();\n\t\t\t// java.lang.IllegalStateException\n\t\t\tString next = (String) it.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n \n\t}\n}\n4.迭代器的原理\n查看ArrayList源码\n\nprivate class Itr implements Iterator<E> {\n \n\t\tint cursor = 0;\n \n\t\tint lastRet = -1;\n \n\t\tint expectedModCount = modCount;\n \n\t\tpublic boolean hasNext() {\n\t\t\treturn cursor != size();\n\t\t}\n \n\t\tpublic E next() {\n\t\t\tcheckForComodification();\n\t\t\ttry {\n\t\t\t\tE next = get(cursor);\n\t\t\t\tlastRet = cursor++;\n\t\t\t\treturn next;\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\tcheckForComodification();\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t}\n \n\t\tpublic void remove() {\n\t\t\tif (lastRet == -1)\n\t\t\t\tthrow new IllegalStateException();\n\t\t\tcheckForComodification();\n \n\t\t\ttry {\n\t\t\t\tAbstractList.this.remove(lastRet);\n\t\t\t\tif (lastRet < cursor)\n\t\t\t\t\tcursor--;\n\t\t\t\tlastRet = -1;\n\t\t\t\texpectedModCount = modCount;\n\t\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t\tthrow new ConcurrentModificationException();\n\t\t\t}\n\t\t}\n \n\t\t\n\t}\n注意：1.在对集合进行迭代过程中，不允许出现迭代器以外的对元素的操作，因为这样会产生安全隐患，java会抛出异常并发修改异常（ConcurrentModificationException），普通迭代器只支持在迭代过程中的删除动作。\n\n     2.ConcurrentModificationException: 当一个集合在循环中即使用引用变量操作集合又使用迭代器操作集合对象， 会抛出该异常。\n\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tCollection coll = new ArrayList();\n\t\tcoll.add(\"aaa\");\n\t\tcoll.add(\"bbb\");\n\t\tcoll.add(\"ccc\");\n\t\tcoll.add(\"ddd\");\n\t\tSystem.out.println(coll);\n\t\tIterator it = coll.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tit.next();\n\t\t\tit.remove();\n\t\t\tcoll.add(\"abc\"); // 出现了迭代器以外的对元素的操作\n\t\t}\n\t\tSystem.out.println(coll);\n\t}\n}\n如果是List集合，想要在迭代中操作元素可以使用List集合的特有迭代器ListIterator，该迭代器支持在迭代过程中，添加元素和修改元素。\n\n5.List特有的迭代器ListIterator\npublic interface ListIterator extends Iterator\n\nListIterator<E> listIterator()\n\n---| Iterator\n\t\thasNext()\n\t\tnext()\n\t\tremove()\n\t   ------| ListIterator Iterator子接口 List专属的迭代器\n                  add(E e)    将指定的元素插入列表（可选操作）。该元素直接插入到 next 返回的下一个元素的前面（如果有）\n                  void set(E o)   用指定元素替换 next 或 previous 返回的最后一个元素\n                  hasPrevious()    逆向遍历列表，列表迭代器有多个元素，则返回 true。\n                  previous()       返回列表中的前一个元素。\nIterator在迭代时，只能对元素进行获取(next())和删除(remove())的操作。\n\n对于 Iterator 的子接口ListIterator 在迭代list 集合时，还可以对元素进行添加\n\n(add(obj))，修改set(obj)的操作。\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n         // 获取List专属的迭代器\n\t\tListIterator lit = list.listIterator();\n \n\t\twhile (lit.hasNext()) {\n\t\t\tString next = (String) lit.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n \n\t}\n}\n\n倒序遍历\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n        // 获取List专属的迭代器\n\t\tListIterator lit = list.listIterator();\n\t\twhile (lit.hasNext()) {\n\t\t\tString next = (String) lit.next();\n\t\t\tSystem.out.println(next);\n\t\t}\n\t\tSystem.out.println(\"***************\");\n\t\twhile (lit.hasPrevious()) {\n\t\t\tString next = (String) lit.previous();\n\t\t\tSystem.out.println(next);\n\t\t}\n \n\t}\n}\nSet方法：用指定元素替换 next 或 previous 返回的最后一个元素\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n \n\t\tListIterator lit = list.listIterator();\n\t\tlit.next(); // 计算机网络\n\t\tlit.next(); // 现代操作系统\n\t\tSystem.out.println(lit.next()); // java编程思想\n\t\t//用指定元素替换 next 或 previous 返回的最后一个元素\n\t\tlit.set(\"平凡的世界\");// 将java编程思想替换为平凡的世界\n\t\tSystem.out.println(list);\n \n\t}\n}\n\nadd方法将指定的元素插入列表，该元素直接插入到 next 返回的元素的后面\n\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\t// 增加：add() 将指定对象存储到容器中\n\t\tlist.add(\"计算机网络\");\n\t\tlist.add(\"现代操作系统\");\n\t\tlist.add(\"java编程思想\");\n\t\tlist.add(\"java核心技术\");\n\t\tlist.add(\"java语言程序设计\");\n\t\tSystem.out.println(list);\n \n\t\tListIterator lit = list.listIterator();\n\t\tlit.next(); // 计算机网络\n\t\tlit.next(); // 现代操作系统\n\t\tSystem.out.println(lit.next()); // java编程思想\n\t\t// 将指定的元素插入列表，该元素直接插入到 next 返回的元素的后\n\t\tlit.add(\"平凡的世界\");// 在java编程思想后添加平凡的世界\n\t\tSystem.out.println(list);\n \n\t}\n}\n"]],[21,21],[8017,8017]]],[1561854983349,["GJX@GJXAIOU",[[1,58,"**"],[1,68,"**"]],[58,68],[58,72]]],[1561855051812,["GJX@GJXAIOU",[[-1,126,""],[1,126,"'"],[-1,743," "],[1,744," "],[-1,812," "],[1,813," "],[-1,822," "],[1,823," "],[-1,838,"      "],[1,844,"      "],[-1,865,"       "],[1,872,"       "],[-1,902,"             "],[1,915,"             "],[-1,927,"    "],[1,931,"    "],[-1,943,"             "],[1,956,"             "],[-1,967,"    "],[1,971,"    "],[-1,1022,"   "],[1,1025,"   "],[-1,1049,"  "],[1,1051,"  "],[-1,1086," "],[1,1087," "],[-1,1365," "],[1,1366," "],[-1,3262," "],[1,3263," "],[-1,4753,"     "],[1,4758,"     "],[-1,6917," "],[1,6918," "],[-1,6928," "],[1,6929," "]],[126,126],[127,127]]],[1561855088013,["GJX@GJXAIOU",[[-1,126,"'"]],[127,127],[126,126]]],[1561855154300,["GJX@GJXAIOU",[[1,308,"## "]],[308,308],[321,321]]],[1561855163284,["GJX@GJXAIOU",[[1,736,"## "]],[736,736],[750,750]]],[1561855176198,["GJX@GJXAIOU",[[-1,875,"    "]],[879,879],[875,875]]],[1561855178774,["GJX@GJXAIOU",[[-1,915,"  "]],[908,908],[906,906]]],[1561855179212,["GJX@GJXAIOU",[[1,915,"  "]],[906,906],[908,908]]],[1561855181758,["GJX@GJXAIOU",[[-1,915,"  "]],[911,911],[909,909]]],[1561855182324,["GJX@GJXAIOU",[[1,915,"  "]],[909,909],[911,911]]],[1561855184468,["GJX@GJXAIOU",[[-1,915,"  "]],[914,914],[912,912]]],[1561855185118,["GJX@GJXAIOU",[[1,915,"  "]],[912,912],[914,914]]],[1561855187949,["GJX@GJXAIOU",[[-1,909,"        "]],[914,914],[906,906]]],[1561855189399,["GJX@GJXAIOU",[[1,909,"  "]],[906,906],[908,908]]],[1561855197044,["GJX@GJXAIOU",[[-1,946,"      "]],[946,952],[946,946]]],[1561855201979,["GJX@GJXAIOU",[[-1,903,"\n"]],[903,903],[902,902]]],[1561855204284,["GJX@GJXAIOU",[[-1,937,"\n"]],[937,937],[936,936]]],[1561855206611,["GJX@GJXAIOU",[[-1,870,"\n"]],[870,870],[869,869]]],[1561855219782,["GJX@GJXAIOU",[[-1,832,"--|"]],[831,831],[832,832]]],[1561855223008,["GJX@GJXAIOU",[[-1,872,"--|"]],[871,871],[872,872]]],[1561855225671,["GJX@GJXAIOU",[[-1,901,"  "],[-1,904,"--|"]],[901,901],[902,902]]],[1561855228105,["GJX@GJXAIOU",[[-1,930,"  "],[-1,933,"--|"]],[930,930],[931,931]]],[1561855231870,["GJX@GJXAIOU",[[-1,869,"  "]],[871,871],[869,869]]],[1561855240919,["GJX@GJXAIOU",[[1,1042,"·"]],[1042,1042],[1043,1043]]],[1561855242118,["GJX@GJXAIOU",[[-1,1042,"·"]],[1043,1043],[1042,1042]]],[1561855242629,["GJX@GJXAIOU",[[1,1042,"`"]],[1042,1042],[1043,1043]]],[1561855245497,["GJX@GJXAIOU",[[1,1020,"`"]],[1020,1020],[1021,1021]]],[1561855247790,["GJX@GJXAIOU",[[-1,1018,"  "]],[1020,1020],[1018,1018]]],[1561855257702,["GJX@GJXAIOU",[[1,1075,"```"]],[1075,1075],[1078,1078]]],[1561855257733,["GJX@GJXAIOU",[[1,1078,"language\n```\n"]],[1078,1078],[1078,1086]]],[1561855260613,["GJX@GJXAIOU",[[-1,1087,"```"]],[1087,1090],[1087,1087]]],[1561855262397,["GJX@GJXAIOU",[[-1,1088,"\n"]],[1087,1087],[1086,1086]]],[1561855267564,["GJX@GJXAIOU",[[1,1319,"\n"]],[1318,1318],[1319,1319]]],[1561855268149,["GJX@GJXAIOU",[[1,1319,"```"]],[1319,1319],[1322,1322]]],[1561855274477,["GJX@GJXAIOU",[[-1,1282,"\t\t\t\t"]],[1283,1286],[1282,1282]]],[1561855276478,["GJX@GJXAIOU",[[-1,1310,"\n"]],[1311,1311],[1310,1310]]],[1561855280484,["GJX@GJXAIOU",[[-1,1197,"\t\t\t\t"]],[1201,1201],[1197,1197]]],[1561855282013,["GJX@GJXAIOU",[[-1,1225,"\n"]],[1226,1226],[1225,1225]]],[1561855286734,["GJX@GJXAIOU",[[-1,1146,"\t\t\t\t"]],[1150,1150],[1146,1146]]],[1561855297293,["GJX@GJXAIOU",[[1,1382,"## "]],[1382,1382],[1393,1393]]],[1561855309486,["GJX@GJXAIOU",[[1,1409,"```"]],[1409,1409],[1412,1412]]],[1561855309518,["GJX@GJXAIOU",[[1,1412,"language\n```\n"]],[1412,1412],[1412,1420]]],[1561855310496,["GJX@GJXAIOU",[[-1,1412,"language"],[1,1420,"j"]],[1412,1420],[1413,1413]]],[1561855310940,["GJX@GJXAIOU",[[1,1413,"ava"]],[1413,1413],[1416,1416]]],[1561855313759,["GJX@GJXAIOU",[[-1,1417,"```"]],[1417,1420],[1417,1417]]],[1561855315919,["GJX@GJXAIOU",[[1,1798,"\t\n"]],[1797,1797],[1799,1799]]],[1561855316484,["GJX@GJXAIOU",[[1,1799,"```"]],[1799,1799],[1802,1802]]],[1561855318973,["GJX@GJXAIOU",[[-1,1798,"\t"]],[1799,1799],[1798,1798]]],[1561855321796,["GJX@GJXAIOU",[[-1,1418,"\n"]],[1418,1418],[1417,1417]]],[1561855322188,["GJX@GJXAIOU",[[-1,1417,"\n"]],[1417,1417],[1416,1416]]],[1561855327860,["GJX@GJXAIOU",[[1,1812,"\n"]],[1811,1811],[1812,1812]]],[1561855329697,["GJX@GJXAIOU",[[1,1812,"···"]],[1812,1812],[1815,1815]]],[1561855331108,["GJX@GJXAIOU",[[-1,1812,"···"]],[1815,1815],[1812,1812]]],[1561855331985,["GJX@GJXAIOU",[[1,1812,"```"]],[1812,1812],[1815,1815]]],[1561855332018,["GJX@GJXAIOU",[[1,1815,"language\n```\n"]],[1815,1815],[1815,1823]]],[1561855332974,["GJX@GJXAIOU",[[-1,1815,"language"],[1,1823,"j"]],[1815,1823],[1816,1816]]],[1561855333376,["GJX@GJXAIOU",[[1,1816,"ava"]],[1816,1816],[1819,1819]]],[1561855333676,["GJX@GJXAIOU",[[1,1820,"\n"]],[1819,1819],[1820,1820]]],[1561855337621,["GJX@GJXAIOU",[[-1,1821,"```\n\n"]],[1820,1825],[1820,1820]]],[1561855339924,["GJX@GJXAIOU",[[1,2272,"\n"]],[2271,2271],[2272,2272]]],[1561855340333,["GJX@GJXAIOU",[[1,2273,"```\n\n"]],[2272,2272],[2277,2277]]],[1561855343575,["GJX@GJXAIOU",[[-1,1820,"\n"]],[1820,1820],[1819,1819]]],[1561855349637,["GJX@GJXAIOU",[[1,2342,"\n"]],[2341,2341],[2342,2342]]],[1561855350614,["GJX@GJXAIOU",[[1,2342,"```"]],[2342,2342],[2345,2345]]],[1561855350645,["GJX@GJXAIOU",[[1,2345,"language\n```\n"]],[2345,2345],[2345,2353]]],[1561855351942,["GJX@GJXAIOU",[[-1,2345,"language"],[1,2353,"j"]],[2345,2353],[2346,2346]]],[1561855352318,["GJX@GJXAIOU",[[1,2346,"ava"]],[2346,2346],[2349,2349]]],[1561855352485,["GJX@GJXAIOU",[[1,2350,"\n"]],[2349,2349],[2350,2350]]],[1561855355685,["GJX@GJXAIOU",[[-1,2351,"```\n"]],[2350,2354],[2350,2350]]],[1561855358636,["GJX@GJXAIOU",[[1,2682,"```\n"]],[2681,2681],[2685,2685]]],[1561855361276,["GJX@GJXAIOU",[[-1,2351,"\n"]],[2351,2351],[2350,2350]]],[1561855361791,["GJX@GJXAIOU",[[-1,2350,"\n"]],[2350,2350],[2349,2349]]],[1561855371903,["GJX@GJXAIOU",[[1,2762,"```"]],[2762,2762],[2765,2765]]],[1561855371937,["GJX@GJXAIOU",[[1,2765,"language\n```\n"]],[2765,2765],[2765,2773]]],[1561855373022,["GJX@GJXAIOU",[[-1,2765,"language"],[1,2773,"j"]],[2765,2773],[2766,2766]]],[1561855373422,["GJX@GJXAIOU",[[1,2766,"ava"]],[2766,2766],[2769,2769]]],[1561855373613,["GJX@GJXAIOU",[[1,2770,"\n"]],[2769,2769],[2770,2770]]],[1561855376479,["GJX@GJXAIOU",[[-1,2771,"```\n"]],[2770,2774],[2770,2770]]],[1561855379110,["GJX@GJXAIOU",[[1,3276,"\n"]],[3275,3275],[3276,3276]]],[1561855379541,["GJX@GJXAIOU",[[1,3277,"```\n"]],[3276,3276],[3280,3280]]],[1561855382397,["GJX@GJXAIOU",[[-1,2771,"\n"]],[2771,2771],[2770,2770]]],[1561855382597,["GJX@GJXAIOU",[[-1,2770,"\n"]],[2770,2770],[2769,2769]]],[1561855386630,["GJX@GJXAIOU",[[1,3337,"```"]],[3337,3337],[3340,3340]]],[1561855386661,["GJX@GJXAIOU",[[1,3340,"language\n```\n"]],[3340,3340],[3340,3348]]],[1561855387751,["GJX@GJXAIOU",[[-1,3340,"language"],[1,3348,"j"]],[3340,3348],[3341,3341]]],[1561855388079,["GJX@GJXAIOU",[[1,3341,"ava"]],[3341,3341],[3344,3344]]],[1561855388316,["GJX@GJXAIOU",[[1,3345,"\n"]],[3344,3344],[3345,3345]]],[1561855391013,["GJX@GJXAIOU",[[-1,3346,"```"]],[3346,3349],[3346,3346]]],[1561855393420,["GJX@GJXAIOU",[[1,3842,"\n"]],[3841,3841],[3842,3842]]],[1561855393806,["GJX@GJXAIOU",[[1,3842,"```"]],[3842,3842],[3845,3845]]],[1561855396415,["GJX@GJXAIOU",[[-1,3347,"\n"]],[3347,3347],[3346,3346]]],[1561855396549,["GJX@GJXAIOU",[[-1,3346,"\n"]],[3346,3346],[3345,3345]]],[1561855396901,["GJX@GJXAIOU",[[-1,3345,"\n"]],[3345,3345],[3344,3344]]],[1561855399805,["GJX@GJXAIOU",[[1,3843,"\n"]],[3843,3843],[3844,3844]]],[1561855399948,["GJX@GJXAIOU",[[1,3844,"\n"]],[3844,3844],[3845,3845]]],[1561855400086,["GJX@GJXAIOU",[[1,3845,"\n"]],[3845,3845],[3846,3846]]],[1561855400724,["GJX@GJXAIOU",[[1,3846,"## "]],[3846,3846],[3857,3857]]],[1561855410381,["GJX@GJXAIOU",[[1,3872,"```"]],[3872,3872],[3875,3875]]],[1561855410413,["GJX@GJXAIOU",[[1,3875,"language\n```\n"]],[3875,3875],[3875,3883]]],[1561855411745,["GJX@GJXAIOU",[[-1,3875,"language"],[1,3883,"j"]],[3875,3883],[3876,3876]]],[1561855412043,["GJX@GJXAIOU",[[1,3876,"ava"]],[3876,3876],[3879,3879]]],[1561855412331,["GJX@GJXAIOU",[[1,3880,"\n"]],[3879,3879],[3880,3880]]],[1561855414900,["GJX@GJXAIOU",[[-1,3881,"```\n"]],[3880,3884],[3880,3880]]],[1561855418284,["GJX@GJXAIOU",[[1,4684,"\t\n```\n"]],[4683,4683],[4689,4689]]],[1561855420908,["GJX@GJXAIOU",[[-1,3881,"\n"]],[3881,3881],[3880,3880]]],[1561855421070,["GJX@GJXAIOU",[[-1,3880,"\n"]],[3880,3880],[3879,3879]]],[1561855426315,["GJX@GJXAIOU",[[-1,3943," "]],[3944,3944],[3943,3943]]],[1561855426683,["GJX@GJXAIOU",[[-1,3943,"\n"]],[3943,3943],[3942,3942]]],[1561855428292,["GJX@GJXAIOU",[[-1,3963," "]],[3964,3964],[3963,3963]]],[1561855428652,["GJX@GJXAIOU",[[-1,3963,"\n"]],[3963,3963],[3962,3962]]],[1561855438587,["GJX@GJXAIOU",[[-1,4805,"  "]],[4806,4806],[4804,4804]]],[1561855440941,["GJX@GJXAIOU",[[1,4687,"\n"]],[4687,4687],[4688,4688]]],[1561855442731,["GJX@GJXAIOU",[[1,4684,"\n"]],[4684,4684],[4685,4685]]],[1561855446372,["GJX@GJXAIOU",[[-1,4804,"   "]],[4807,4807],[4804,4804]]],[1561855452213,["GJX@GJXAIOU",[[1,4881,"```"]],[4881,4881],[4884,4884]]],[1561855452244,["GJX@GJXAIOU",[[1,4884,"language\n```\n"]],[4884,4884],[4884,4892]]],[1561855453302,["GJX@GJXAIOU",[[-1,4884,"language"],[1,4892,"j"]],[4884,4892],[4885,4885]]],[1561855453701,["GJX@GJXAIOU",[[1,4885,"ava"]],[4885,4885],[4888,4888]]],[1561855453869,["GJX@GJXAIOU",[[1,4889,"\n"]],[4888,4888],[4889,4889]]],[1561855456244,["GJX@GJXAIOU",[[-1,4890,"```\n"]],[4889,4893],[4889,4889]]],[1561855458900,["GJX@GJXAIOU",[[1,5259,"\n"]],[5258,5258],[5259,5259]]],[1561855459283,["GJX@GJXAIOU",[[1,5260,"```\n"]],[5259,5259],[5263,5263]]],[1561855461869,["GJX@GJXAIOU",[[-1,4890,"\n"]],[4890,4890],[4889,4889]]],[1561855462021,["GJX@GJXAIOU",[[-1,4889,"\n"]],[4889,4889],[4888,4888]]],[1561855471478,["GJX@GJXAIOU",[[1,5336,"## "]],[5336,5336],[5363,5363]]],[1561855474357,["GJX@GJXAIOU",[[1,5364,"\n"]],[5363,5363],[5364,5364]]],[1561855479825,["GJX@GJXAIOU",[[-1,5446,"--|"]],[5445,5449],[5446,5446]]],[1561855480006,["GJX@GJXAIOU",[[1,5447," "]],[5446,5446],[5447,5447]]],[1561855488092,["GJX@GJXAIOU",[[-1,5493,"------|"]],[5499,5499],[5493,5493]]],[1561855488737,["GJX@GJXAIOU",[[1,5493,"-"]],[5493,5493],[5494,5494]]],[1561855488935,["GJX@GJXAIOU",[[1,5495," "]],[5494,5494],[5495,5495]]],[1561855495239,["GJX@GJXAIOU",[[1,5459,"- "]],[5459,5459],[5461,5461]]],[1561855498023,["GJX@GJXAIOU",[[1,5473,"- "]],[5473,5473],[5475,5475]]],[1561855500152,["GJX@GJXAIOU",[[1,5484,"- "]],[5484,5484],[5486,5486]]],[1561855503532,["GJX@GJXAIOU",[[-1,5458,"\t"],[-1,5472,"\t"],[-1,5482,"\t"]],[5459,5494],[5458,5491]]],[1561855515214,["GJX@GJXAIOU",[[-1,5535,"                 "],[1,5552,"\t   -"],[-1,5613,"                 "],[1,5630,"\t   -"],[-1,5681,"                 "],[1,5698,"\t   -"],[-1,5744,"                 "],[1,5761,"\t   -"]],[5553,5791],[5541,5743]]],[1561855519791,["GJX@GJXAIOU",[[-1,5457,"\t"],[-1,5470,"\t"],[-1,5480,"\t"]],[5458,5491],[5457,5488]]],[1561855522333,["GJX@GJXAIOU",[[1,5457,"  "]],[5459,5459],[5461,5461]]],[1561855523005,["GJX@GJXAIOU",[[1,5471,"  "]],[5473,5473],[5475,5475]]],[1561855523710,["GJX@GJXAIOU",[[1,5482,"  "]],[5484,5484],[5486,5486]]],[1561855529484,["GJX@GJXAIOU",[[-1,5495,"\t"]],[5499,5537],[5498,5498]]],[1561855537136,["GJX@GJXAIOU",[[1,5498," "]],[5498,5498],[5499,5499]]],[1561855547399,["GJX@GJXAIOU",[[1,5875,"```"]],[5875,5875],[5878,5878]]],[1561855547430,["GJX@GJXAIOU",[[1,5878,"language\n```\n"]],[5878,5878],[5878,5886]]],[1561855548486,["GJX@GJXAIOU",[[-1,5878,"language"],[1,5886,"j"]],[5878,5886],[5879,5879]]],[1561855548989,["GJX@GJXAIOU",[[1,5879,"ava"]],[5879,5879],[5882,5882]]],[1561855549268,["GJX@GJXAIOU",[[1,5883,"\n"]],[5882,5882],[5883,5883]]],[1561855552686,["GJX@GJXAIOU",[[-1,5884,"```\n\n"]],[5883,5888],[5883,5883]]],[1561855553836,["GJX@GJXAIOU",[[-1,5883,"\n"]],[5883,5883],[5882,5882]]],[1561855557269,["GJX@GJXAIOU",[[1,6326,"```"]],[6326,6326],[6329,6329]]],[1561855559652,["GJX@GJXAIOU",[[1,6335,"```"]],[6335,6335],[6338,6338]]],[1561855559684,["GJX@GJXAIOU",[[1,6338,"language\n```\n"]],[6338,6338],[6338,6346]]],[1561855560759,["GJX@GJXAIOU",[[-1,6338,"language"],[1,6346,"j"]],[6338,6346],[6339,6339]]],[1561855561109,["GJX@GJXAIOU",[[1,6339,"ava"]],[6339,6339],[6342,6342]]],[1561855561308,["GJX@GJXAIOU",[[1,6343,"\n"]],[6342,6342],[6343,6343]]],[1561855563684,["GJX@GJXAIOU",[[-1,6344,"```\n"]],[6343,6347],[6343,6343]]],[1561855565886,["GJX@GJXAIOU",[[1,6931,"\n"]],[6930,6930],[6931,6931]]],[1561855566326,["GJX@GJXAIOU",[[1,6932,"```\n"]],[6931,6931],[6935,6935]]],[1561855569309,["GJX@GJXAIOU",[[1,6936,"\n"]],[6936,6936],[6937,6937]]],[1561855569430,["GJX@GJXAIOU",[[1,6937,"\n"]],[6937,6937],[6938,6938]]],[1561855576016,["GJX@GJXAIOU",[[1,6978,"```"]],[6978,6978],[6981,6981]]],[1561855576048,["GJX@GJXAIOU",[[1,6981,"language\n```\n"]],[6981,6981],[6981,6989]]],[1561855577087,["GJX@GJXAIOU",[[-1,6981,"language"],[1,6989,"j"]],[6981,6989],[6982,6982]]],[1561855577998,["GJX@GJXAIOU",[[1,6982,"ava"]],[6982,6982],[6985,6985]]],[1561855578452,["GJX@GJXAIOU",[[1,6986,"\n"]],[6985,6985],[6986,6986]]],[1561855580868,["GJX@GJXAIOU",[[-1,6987,"```\n"]],[6986,6990],[6986,6986]]],[1561855584004,["GJX@GJXAIOU",[[1,7509,"```\n"]],[7508,7508],[7512,7512]]],[1561855587471,["GJX@GJXAIOU",[[1,7552,"```"]],[7552,7552],[7555,7555]]],[1561855587502,["GJX@GJXAIOU",[[1,7555,"language\n```\n"]],[7555,7555],[7555,7563]]],[1561855588151,["GJX@GJXAIOU",[[-1,7555,"language"],[1,7563,"j"]],[7555,7563],[7556,7556]]],[1561855588621,["GJX@GJXAIOU",[[1,7556,"ava"]],[7556,7556],[7559,7559]]],[1561855591500,["GJX@GJXAIOU",[[-1,7560,"```"]],[7560,7563],[7560,7560]]],[1561855594228,["GJX@GJXAIOU",[[1,8082,"```"]],[8082,8082],[8085,8085]]]],null,"GJX@GJXAIOU"]]}