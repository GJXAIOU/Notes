{"compress":true,"commitItems":[["c66af922-e098-4a68-94e2-15c82737349f",1563411853660,"",[[1563411799731,["GJX@GJXAIOU",[[1,0,"# Java中的迭代器\n\n\n\n"]],[0,0],[14,14]]],[1563411801760,["GJX@GJXAIOU",[[1,14,"迭代器（Iterator）\n\n　　迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。\n\n　　Java中的Iterator功能比较简单，并且只能单向移动：\n\n　　(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。\n\n　　(2) 使用next()获得序列中的下一个元素。\n\n　　(3) 使用hasNext()检查序列中是否还有元素。\n\n　　(4) 使用remove()将迭代器新返回的元素删除。\n\n　　Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。\n\n迭代器应用：\n list l = new ArrayList();\n l.add(\"aa\");\n l.add(\"bb\");\n l.add(\"cc\");\n for (Iterator iter = l.iterator(); iter.hasNext();) {\n  String str = (String)iter.next();\n  System.out.println(str);\n }\n /*迭代器用于while循环\n Iterator iter = l.iterator();\n while(iter.hasNext()){\n  String str = (String) iter.next();\n  System.out.println(str);\n }\n */"]],[14,14],[786,786]]],[1563411834733,["GJX@GJXAIOU",[[-1,13,"\n迭代器（Iterator）\n\n"]],[12,28],[12,12]]],[1563411840197,["GJX@GJXAIOU",[[1,27,"**"],[1,32,"**"]],[27,32],[27,36]]],[1563411849212,["GJX@GJXAIOU",[[1,124,"**"],[1,130,"**"]],[124,130],[124,134]]],[1563411863765,["GJX@GJXAIOU",[[1,386,"**"],[1,437,"**"]],[386,437],[386,441]]]],null,"GJX@GJXAIOU"]]}