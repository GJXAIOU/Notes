{"compress":true,"commitItems":[["771edb7a-0bff-4abf-9234-2198d4b8c6e9",1565957460269,"# [监听器入门看这篇就够了](https://segmentfault.com/a/1190000013240470)\n\n[](https://segmentfault.com/a/1190000013240470) \n\n*   [jsp](https://segmentfault.com/t/jsp/blogs)\n\n*   [servlet](https://segmentfault.com/t/servlet/blogs)\n\n*   [java-web](https://segmentfault.com/t/java-web/blogs)\n\n*   [java-ee](https://segmentfault.com/t/java-ee/blogs)\n\n*   [![](https://avatar-static.segmentfault.com/868/271/868271510-54cb382abb7a1_small) java](https://segmentfault.com/t/java/blogs)\n\n 4.2k 次阅读  ·  读完需要 30 分钟\n\n8\n\n# 什么是监听器\n\n> 监听器就是一个**实现特定接口的普通java程序**，这个程序专门用于**监听另一个java对象的方法调用或属性改变**，当被监听对象发生上述事件后，监听器某个方法将立即被执行。。\n\n# 为什么我们要使用监听器？\n\n监听器可以**用来检测网站的在线人数，统计网站的访问量等等**！\n\n# 监听器组件\n\n监听器涉及三个组件：**事件源，事件对象，事件监听器**\n\n**当事件源发生某个动作的时候，它会调用事件监听器的方法，并在调用事件监听器方法的时候把事件对象传递进去。**\n\n**我们在监听器中就可以通过事件对象获取得到事件源，从而对事件源进行操作！**\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240473?w=889&h=253 \"这里写图片描述\")\n\n* * *\n\n# 模拟监听器\n\n既然上面已经说了监听器的概念了，监听器涉及三个组件：事件源，事件对象，事件监听器。\n\n**我们就写一个对象，被监听器监听**\n\n## 监听器\n\n监听器定义为接口，**监听的方法需要事件对象传递进来，从而在监听器上通过事件对象获取得到事件源，对事件源进行修改**！\n\n```\n\n    /**\n     * 事件监听器\n     *\n     * 监听Person事件源的eat和sleep方法\n     */\n    interface PersonListener{\n\n        void doEat(Event event);\n        void doSleep(Event event);\n    }\n\n```\n\n## 事件源\n\n事件源是一个Person类，它有eat和sleep()方法。\n\n**事件源需要注册监听器(即在事件源上关联监听器对象)**\n\n如果**触发了eat或sleep()方法的时候，会调用监听器的方法，并将事件对象传递进去**\n\n```\n\n    /**\n     *\n     * 事件源Person\n     *\n     * 事件源要提供方法注册监听器(即在事件源上关联监听器对象)\n     */\n\n    class Person {\n\n        //在成员变量定义一个监听器对象\n        private PersonListener personListener ;\n\n        //在事件源中定义两个方法\n        public void Eat() {\n\n            //当事件源调用了Eat方法时，应该触发监听器的方法，调用监听器的方法并把事件对象传递进去\n            personListener.doEat(new Event(this));\n        }\n\n        public void sleep() {\n\n            //当事件源调用了Eat方法时，应该触发监听器的方法，调用监听器的方法并把事件对象传递进去\n            personListener.doSleep(new Event(this));\n        }\n\n        //注册监听器，该类没有监听器对象啊，那么就传递进来吧。\n        public void registerLister(PersonListener personListener) {\n            this.personListener = personListener;\n        }\n\n    }\n\n```\n\n## 事件对象\n\n**事件对象封装了事件源。**\n\n**监听器可以从事件对象上获取得到事件源的对象(信息)**\n\n```\n\n    /**\n     * 事件对象Even\n     *\n     * 事件对象封装了事件源\n     *\n     * 在监听器上能够通过事件对象获取得到事件源\n     *\n     *\n     */\n    class Event{\n        private Person person;\n\n        public Event() {\n        }\n\n        public Event(Person person) {\n            this.person = person;\n        }\n\n        public Person getResource() {\n            return person;\n        }\n\n    }\n\n```\n\n## 测试\n\n```\n\n    public static void main(String[] args) {\n\n        Person person = new Person();\n\n        //注册监听器()\n        person.registerLister(new PersonListener() {\n            @Override\n            public void doEat(Event event) {\n                Person person1 = event.getResource();\n                System.out.println(person1 + \"正在吃饭呢！\");\n            }\n\n            @Override\n            public void doSleep(Event event) {\n                Person person1 = event.getResource();\n                System.out.println(person1 + \"正在睡觉呢！\");\n            }\n        });\n\n        //当调用eat方法时，触发事件，将事件对象传递给监听器，最后监听器获得事件源，对事件源进行操作\n        person.Eat();\n    }\n\n```\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240474?w=1014&h=264 \"这里写图片描述\")\n\n*   事件源：拥有事件\n*   监听器：监听事件源所拥有的事件（带事件对象参数的）\n*   事件对象：事件对象封装了事件源对象\n\n    *   **事件源要与监听器有关系，就得注册监听器【提供方法得到监听器对象】**\n    *   **触发事件源的事件，实际会提交给监听器对象处理，并且把事件对象传递过去给监听器**。\n\n# Servle监听器\n\n在Servlet规范中定义了多种类型的监听器，它们**用于监听的事件源分别 ServletContext, HttpSession和ServletRequest这三个域对象**\n\n和其它事件监听器略有不同的是，**servlet监听器的注册不是直接注册在事件源上，而是由WEB容器负责注册**，开发人员**只需在web.xml文件中使用`<listener>`标签配置好监听器**，\n\n## 监听对象的创建和销毁\n\n**HttpSessionListener、ServletContextListener、ServletRequestListener分别监控着Session、Context、Request对象的创建和销毁**\n\n*   **HttpSessionListener(可以用来收集在线者信息)**\n*   **ServletContextListener(可以获取web.xml里面的参数配置)**\n*   **ServletRequestListener**\n\n### **测试**\n\n```\n\npublic class Listener1 implements ServletContextListener,\n        HttpSessionListener, ServletRequestListener {\n\n    // Public constructor is required by servlet spec\n    public Listener1() {\n    }\n\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\"容器创建了\");\n    }\n\n    public void contextDestroyed(ServletContextEvent sce) {\n\n        System.out.println(\"容器销毁了\");\n    }\n\n    public void sessionCreated(HttpSessionEvent se) {\n\n        System.out.println(\"Session创建了\");\n    }\n\n    public void sessionDestroyed(HttpSessionEvent se) {\n        System.out.println(\"Session销毁了\");\n    }\n\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n    }\n\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n\n    }\n}\n\n```\n\n*   **监听器监听到ServletContext的初始化了，Session的创建和ServletContext的销毁。(服务器停掉，不代表Session就被销毁了。Session的创建是在内存中的，所以没看到Session被销毁了)**\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240475?w=748&h=597 \"这里写图片描述\")\n\n* * *\n\n## 监听对象属性变化\n\n**ServletContextAttributeListener、HttpSessionAttributeListener、ServletRequestAttributeListener分别监听着Context、Session、Request对象属性的变化**\n\n这三个接口中都定义了**三个方法来处理被监听对象中的属性的增加，删除和替换的事件**，同一个事件在这三个接口中对应的方法**名称完全相同，只是接受的参数类型不同**。\n\n*   **attributeAdded()**\n*   **attributeRemoved()**\n*   **attributeReplaced()**\n\n### **测试**\n\n这里我**只演示Context对象，其他对象都是以此类推的，就不一一测试了**。\n\n*   **实现ServletContextAttributeListener接口。**\n\n```\n\n    public class Listener1 implements ServletContextAttributeListener {\n\n        @Override\n        public void attributeAdded(ServletContextAttributeEvent servletContextAttributeEvent) {\n            System.out.println(\"Context对象增加了属性\");\n        }\n\n        @Override\n        public void attributeRemoved(ServletContextAttributeEvent servletContextAttributeEvent) {\n            System.out.println(\"Context对象删除了属性\");\n\n        }\n\n        @Override\n        public void attributeReplaced(ServletContextAttributeEvent servletContextAttributeEvent) {\n            System.out.println(\"Context对象替换了属性\");\n\n        }\n    }\n\n```\n\n*   测试的Servlet\n\n```\n\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n        ServletContext context = this.getServletContext();\n\n        context.setAttribute(\"aa\", \"123\");\n        context.setAttribute(\"aa\", \"234\");\n        context.removeAttribute(\"aa\");\n\n    }\n\n```\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240476?w=748&h=597 \"这里写图片描述\")\n\n* * *\n\n## 监听Session内的对象\n\n**除了上面的6种Listener，还有两种Linstener监听Session内的对象，分别是HttpSessionBindingListener和HttpSessionActivationListener，实现这两个接口并不需要在web.xml文件中注册**\n\n*   实现HttpSessionBindingListener接口，**JavaBean 对象可以感知自己被绑定到 Session 中和从 Session 中删除的事件【和HttpSessionAttributeListener的作用是差不多的】**\n*   实现HttpSessionActivationListener接口，**JavaBean 对象可以感知自己被活化和钝化的事件（当服务器关闭时，会将Session的内容保存在硬盘上【钝化】，当服务器开启时，会将Session的内容在硬盘式重新加载【活化】）** 。。\n\n**想要测试出Session的硬化和钝化，需要修改Tomcat的配置的**。在META-INF下的context.xml文件中添加下面的代码：\n\n```\n\n<Context>\n  <Manager className=\"org.apache.catalina.session.PersistentManager\" maxIdleSwap=\"1\">\n  <Store className=\"org.apache.catalina.session.FileStore\" directory=\"zhongfucheng\"/>\n  </Manager>\n</Context>\n```\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240477?w=1865&h=216 \"这里写图片描述\")\n\n### **测试**\n\n*   监听器和事件源\n\n```\n\n/*\n* 由于涉及到了将内存的Session钝化到硬盘和用硬盘活化到内存中，所以需要实现Serializable接口\n*\n* 该监听器是不需要在web.xml文件中配置的。但监听器要在事件源上实现接口\n* 也就是说，直接用一个类实现HttpSessionBindingListener和HttpSessionActivationListener接口是监听不到Session内对象的变化的。\n* 因为它们是感知自己在Session中的变化！\n* */\npublic class User implements HttpSessionBindingListener,HttpSessionActivationListener,Serializable {\n\n    private String username ;\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public void sessionWillPassivate(HttpSessionEvent httpSessionEvent) {\n\n        HttpSession httpSession = httpSessionEvent.getSession();\n\n        System.out.println(\"钝化了\");\n\n    }\n\n    @Override\n    public void sessionDidActivate(HttpSessionEvent httpSessionEvent) {\n        HttpSession httpSession = httpSessionEvent.getSession();\n        System.out.println(\"活化了\");\n\n    }\n    @Override\n    public void valueBound(HttpSessionBindingEvent httpSessionBindingEvent) {\n\n        System.out.println(\"绑定了对象\");\n    }\n    @Override\n    public void valueUnbound(HttpSessionBindingEvent httpSessionBindingEvent) {\n        System.out.println(\"解除了对象\");\n\n    }\n}\n```\n\n*   测试代码\n\n```\n\n        User user = new User();\n        request.getSession().setAttribute(\"aaa\", user);\n        request.getSession().removeAttribute(\"aaa\");\n```\n\n*   效果：\n\n![这里写图片描述](https://segmentfault.com/img/remote/1460000013240478?w=693&h=195 \"这里写图片描述\")",[[1565957408123,["GJX@GJXAIOU",[[-1,15,"(https://segmentfault.com/a/1190000013240470)\n\n[](https://segmentfault.com/a/1190000013240470) \n\n*   [jsp](https://segmentfault.com/t/jsp/blogs)\n\n*   [servlet](https://segmentfault.com/t/servlet/blogs)\n\n*   [java-web](https://segmentfault.com/t/java-web/blogs)\n\n*   [java-ee](https://segmentfault.com/t/java-ee/blogs)\n\n*   [![](https://avatar-static.segmentfault.com/868/271/868271510-54cb382abb7a1_small) java](https://segmentfault.com/t/java/blogs)\n\n 4.2k 次阅读  ·  读完需要 30 分钟\n"]],[15,492],[15,15]]],[1565957423746,["GJX@GJXAIOU",[[-1,29,"> "]],[31,31],[29,29]]],[1565957426944,["GJX@GJXAIOU",[[-1,16,"8"]],[16,17],[16,16]]],[1565957428129,["GJX@GJXAIOU",[[-1,2,"["]],[3,3],[2,2]]],[1565957430969,["GJX@GJXAIOU",[[-1,7,"看这篇就够了]"]],[7,14],[7,7]]],[1565957436965,["GJX@GJXAIOU",[[1,9,"[监听器入门看这篇就够了](https segmentfault.com a 1190000013240470)"]],[9,9],[65,65]]],[1565957453472,["GJX@GJXAIOU",[[1,66,"\n"]],[66,66],[67,67]]],[1565957468752,["GJX@GJXAIOU",[[1,9,"\n"]],[8,8],[9,9]]],[1565957506060,["GJX@GJXAIOU",[[1,9,"[原文链接](https://segmentfault.com/a/1190000013240470)"]],[9,9],[60,60]]],[1565957509957,["GJX@GJXAIOU",[[-1,61,"[监听器入门看这篇就够了](https segmentfault.com a 1190000013240470)\n"],[1,118,"="],[-1,6358," "],[1,6359," "]],[61,61],[62,62]]],[1565957510011,["GJX@GJXAIOU",[[-1,61,"="]],[62,62],[61,61]]],[1565957523547,["GJX@GJXAIOU",[[-1,164,"# 为什么我们要使用监听器？"]],[164,178],[164,164]]],[1565957524048,["GJX@GJXAIOU",[[-1,165,"\n"]],[164,164],[163,163]]],[1565957525290,["GJX@GJXAIOU",[[-1,164,"\n"]],[163,163],[162,162]]],[1565957551713,["GJX@GJXAIOU",[[-1,335,"![这里写图片描述](https://segmentfault.com/img/remote/1460000013240473?w=889&h=253 \"这里写图片描述\")"]],[335,421],[335,335]]],[1565957557066,["GJX@GJXAIOU",[[1,335,"![监听器组件]($resource/%E7%9B%91%E5%90%AC%E5%99%A8%E7%BB%84%E4%BB%B6.png)"]],[335,335],[405,405]]],[1565957637408,["GJX@GJXAIOU",[[-1,64,"什么是"]],[67,67],[64,64]]],[1565957642829,["GJX@GJXAIOU",[[1,67,"概念和作用"]],[67,67],[72,72]]],[1565957645331,["GJX@GJXAIOU",[[1,67,"2"]],[67,67],[68,68]]],[1565957645368,["GJX@GJXAIOU",[[1,67," "],[1,68," "]],[68,68],[69,69]]],[1565957650601,["GJX@GJXAIOU",[[-1,67," 2 "]],[70,70],[67,67]]],[1565957651649,["GJX@GJXAIOU",[[1,63,"#"]],[67,67],[73,73]]],[1565957655243,["GJX@GJXAIOU",[[1,65,"一、"]],[65,65],[67,67]]],[1565957658579,["GJX@GJXAIOU",[[1,205,"二、"]],[205,205],[207,207]]],[1565957663265,["GJX@GJXAIOU",[[1,421,"##"]],[422,422],[429,429]]],[1565957667858,["GJX@GJXAIOU",[[-1,422,"#"]],[429,429],[428,428]]],[1565957671277,["GJX@GJXAIOU",[[1,423,"三、"]],[423,423],[425,425]]],[1565957674393,["GJX@GJXAIOU",[[1,204,"#"]],[205,205],[213,213]]],[1565957678083,["GJX@GJXAIOU",[[1,428,"实现"]],[428,428],[430,430]]],[1565957686499,["GJX@GJXAIOU",[[-1,435,"既然上面已经说了监听器的概念了，监听器涉及三个组件：事件源，事件对象，事件监听器。\n\n**我们就写一个对象，被监听器监听**"]],[497,497],[435,435]]],[1565957687673,["GJX@GJXAIOU",[[-1,436,"\n"]],[435,435],[434,434]]],[1565957690235,["GJX@GJXAIOU",[[1,438,"#"]],[439,439],[443,443]]],[1565957713171,["GJX@GJXAIOU",[[-1,532,"     *"]],[532,538],[532,532]]],[1565957713611,["GJX@GJXAIOU",[[-1,532,"\n"]],[532,532],[531,531]]],[1565957715467,["GJX@GJXAIOU",[[-1,510,"\n"]],[510,510],[509,509]]],[1565957717129,["GJX@GJXAIOU",[[-1,675,"\n"]],[675,675],[674,674]]],[1565957717858,["GJX@GJXAIOU",[[-1,600,"\n"]],[600,600],[599,599]]],[1565957831073,["GJX@GJXAIOU",[[1,681,"#"]],[683,683],[686,686]]],[1565957834236,["GJX@GJXAIOU",[[-1,719,"\n"]],[719,719],[718,718]]],[1565957836531,["GJX@GJXAIOU",[[-1,749,"\n"]],[749,749],[748,748]]],[1565957858649,["GJX@GJXAIOU",[[-1,801,"\n"]],[801,801],[800,800]]],[1565957860563,["GJX@GJXAIOU",[[-1,809,"     *"]],[809,815],[809,809]]],[1565957860929,["GJX@GJXAIOU",[[-1,809,"\n"]],[809,809],[808,808]]],[1565957862408,["GJX@GJXAIOU",[[-1,826,"     *"]],[826,832],[826,826]]],[1565957862796,["GJX@GJXAIOU",[[-1,826,"\n"]],[826,826],[825,825]]],[1565957883833,["GJX@GJXAIOU",[[-1,890,"\n"]],[890,890],[889,889]]],[1565957884713,["GJX@GJXAIOU",[[-1,870,"\n"]],[870,870],[869,869]]],[1565957996785,["GJX@GJXAIOU",[[-1,1013,"\n"]],[1013,1013],[1012,1012]]],[1565958001145,["GJX@GJXAIOU",[[-1,1163,"\n"]],[1163,1163],[1162,1162]]],[1565958031280,["GJX@GJXAIOU",[[1,1465,"#"]],[1466,1466],[1471,1471]]],[1565958040456,["GJX@GJXAIOU",[[-1,1489,"\n"]],[1489,1489],[1488,1488]]],[1565958043123,["GJX@GJXAIOU",[[-1,1519,"\n"]],[1519,1519],[1518,1518]]],[1565958054650,["GJX@GJXAIOU",[[-1,1548,"     *"]],[1548,1554],[1548,1548]]],[1565958055441,["GJX@GJXAIOU",[[-1,1548,"\n"]],[1548,1548],[1547,1547]]],[1565958058785,["GJX@GJXAIOU",[[-1,1566,"     *"]],[1572,1572],[1566,1566]]],[1565958059268,["GJX@GJXAIOU",[[-1,1566,"\n"]],[1566,1566],[1565,1565]]],[1565958062193,["GJX@GJXAIOU",[[-1,1601,"     *"]],[1607,1607],[1601,1601]]],[1565958062521,["GJX@GJXAIOU",[[-1,1601,"\n"]],[1601,1601],[1600,1600]]],[1565958064052,["GJX@GJXAIOU",[[-1,1594,"     *"]],[1600,1600],[1594,1594]]],[1565958064401,["GJX@GJXAIOU",[[-1,1594,"\n"]],[1594,1594],[1593,1593]]],[1565958067266,["GJX@GJXAIOU",[[-1,1523,"\n"]],[1523,1523],[1522,1522]]],[1565958083321,["GJX@GJXAIOU",[[-1,1844,"\n"]],[1844,1844],[1843,1843]]],[1565958084321,["GJX@GJXAIOU",[[-1,1850,"\n"]],[1850,1850],[1849,1849]]],[1565958085499,["GJX@GJXAIOU",[[-1,1768,"\n"]],[1768,1768],[1767,1767]]],[1565958086658,["GJX@GJXAIOU",[[-1,1685,"\n"]],[1685,1685],[1684,1684]]],[1565958088553,["GJX@GJXAIOU",[[-1,1649,"\n"]],[1649,1649],[1648,1648]]],[1565958106905,["GJX@GJXAIOU",[[1,2509,"\n"]],[2507,2507],[2508,2508]]],[1565958108691,["GJX@GJXAIOU",[[1,2508,"结果："]],[2508,2508],[2511,2511]]],[1565958109467,["GJX@GJXAIOU",[[1,2513,"\n"]],[2511,2511],[2512,2512]]],[1565958111971,["GJX@GJXAIOU",[[-1,2513,"\n"]],[2512,2512],[2511,2511]]],[1565958113002,["GJX@GJXAIOU",[[1,2511,"``"]],[2511,2511],[2513,2513]]],[1565958127362,["GJX@GJXAIOU",[[1,2512,"Person@42552cz"]],[2512,2512],[2526,2526]]],[1565958128377,["GJX@GJXAIOU",[[-1,2525,"z"]],[2526,2526],[2525,2525]]],[1565958133812,["GJX@GJXAIOU",[[1,2525,"正在吃饭呢?"]],[2525,2525],[2531,2531]]],[1565958134833,["GJX@GJXAIOU",[[-1,2530,"?"]],[2531,2531],[2530,2530]]],[1565958137955,["GJX@GJXAIOU",[[1,2530,"!"]],[2530,2530],[2531,2531]]],[1565958142579,["GJX@GJXAIOU",[[-1,2534,"![这里写图片描述](https://segmentfault.com/img/remote/1460000013240474?w=1014&h=264 \"这里写图片描述\")\n"]],[2533,2621],[2533,2533]]],[1565958169281,["GJX@GJXAIOU",[[-1,2600,"\n"]],[2600,2600],[2599,2599]]],[1565958187409,["GJX@GJXAIOU",[[1,2699,"#"]],[2700,2700],[2710,2710]]],[1565958194041,["GJX@GJXAIOU",[[1,2907,"#"]],[2908,2908],[2919,2919]]],[1565958267547,["GJX@GJXAIOU",[[1,4212,"#"]],[4213,4213],[4222,4222]]],[1565958275891,["GJX@GJXAIOU",[[1,5684,"#"]],[5685,5685],[5699,5699]]],[1565958282048,["GJX@GJXAIOU",[[1,6480,"#"]],[6480,6480],[6488,6488]]],[1565958290800,["GJX@GJXAIOU",[[-1,7706,"\n"]],[7706,7706],[7705,7705]]]],null,"GJX@GJXAIOU"]]}