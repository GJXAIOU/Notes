{"compress":true,"commitItems":[["d0e83228-a074-4d36-87df-b73f33d907ff",1568772149403,"**什么是MySQL?**\n\nMySQL 是一种关系型数据库，在Java企业级开发中非常常用，因为 MySQL 是开源免费的，并且方便扩展。阿里巴巴数据库系统也大量用到了 MySQL，因此它的稳定性是有保障的。MySQL是开放源代码的，因此任何人都可以在 GPL(General Public License) 的许可下下载并根据个性化的需要对其进行修改。MySQL的默认端口号是**3306**。\n\n## **事务相关**\n\n### **什么是事务？**\n\n**事务是逻辑上的一组操作，要么都执行，要么都不执行。**\n\n事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。\n\n### **事物的四大特性(ACID)介绍一下？**\n\n![](https://mmbiz.qpic.cn/mmbiz_png/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKILZawMjGekTciaKUwpN9aEOV7BlMJMBvm0paeDkxqy7tCbuqFez4q6bw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"事物的特性\")\n\n*   **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n\n*   **一致性：** 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；\n\n*   **隔离性：** 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n\n*   **持久性：**一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n### **并发事务带来哪些问题？**\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题：\n\n*   **脏读（Dirty read）: **当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n\n*   **丢****失修改（Lost to modify）: **指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n\n*   **不可重复读（Unrepeatableread）: **指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n\n*   **幻读（Phantom read）: **幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。\n\n例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n### **事务隔离级别有哪些?MySQL的默认隔离级别是？**\n\n**SQL 标准定义了四个隔离级别：**\n\n*   **READ-UNCOMMITTED(读取未提交)：**最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\n\n*   **READ-COMMITTED(读取已提交)：**允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\n\n*   **REPEATABLE-READ(可重复读)：**对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n*   **SERIALIZABLE(可串行化)：**最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\n\n| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :-: | :-: | :-: | :-: |\n| READ-UNCOMMITTED | √ | √ | √ |\n| READ-COMMITTED | × | √ | √ |\n| REPEATABLE-READ | × | × | √ |\n| SERIALIZABLE | × | × | × |\n\nMySQL InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）**。我们可以通过`SELECT @@tx_isolation;`命令来查看\n\n```\nmysql> SELECT @@tx_isolation;\n```\n\n这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 **REPEATABLE-READ（可重读）**事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）** 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的**SERIALIZABLE(可串行化)**隔离级别。\n\n因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是**READ-COMMITTED(读取提交内容):**，但是你要知道的是InnoDB 存储引擎默认使用 REPEATABLE-READ（可重读）并不会有任何性能损失。\n\nInnoDB 存储引擎在 **分布式事务** 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。\n\n## **索引相关**\n\n### **为什么索引能提高查询速度**\n\n> 以下内容整理自：《数据库两大神器【索引和锁】》作者 ：Java3y\n\n**先从 MySQL 的基本存储结构说起**\n\nMySQL的基本存储结构是页 (记录都存在页里边) ：\n\n![](https://mmbiz.qpic.cn/mmbiz/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIjr85C8jqONiaJRCxkfWEbL5ysIL4hqq45cscSoBic87lfrrPLcWicYDVA/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"MySQL的基本存储结构是页\")\n\n![](https://mmbiz.qpic.cn/mmbiz/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIr8aicrWq2GWr26eicgSibz6BCEc4GcJWgtEZATZsNUR7HK2DHx9gNhYng/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n*   **各个数据页可以组成一个双向链表**\n\n*   **每个数据页中的记录又可以组成一个单向链表**\n\n```\n- 每个数据页都会为存储在它里边儿的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录\n```\n\n所以说，如果我们写select * from user where indexname = 'xxx'这样没有进行任何优化的sql语句，默认会这样做：\n\n1.  定位到记录所在的页：需要遍历双向链表，找到所在的页\n\n2.  从所在的页内中查找相应的记录：由于不是根据主键查询，只能遍历所在页的单链表了\n\n很明显，在数据量很大的情况下这样查找会很慢！这样的时间复杂度为O（n）。\n\n**索引做了些什么可以让我们查询加快速度呢？****其实就是将无序的数据变成有序(相对)：**\n\n![](https://mmbiz.qpic.cn/mmbiz/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKI5289k9cjXJgXwNnPrxfkNiaTxV35eMr1YibfYPJpDNrM03DGEhq7jHaQ/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n要找到id为8的记录简要步骤：\n\n![](https://mmbiz.qpic.cn/mmbiz/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIh5jyXIvK5dQQTIp3FaSBNoXsfZ3d8lPac4Jo5O9bYNWEtD2iaVnp0Bg/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n很明显的是：没有用索引我们是需要遍历双向链表来定位对应的页，现在通过 **“目录”** 就可以很快地定位到对应的页上了！（二分查找，时间复杂度近似为O(logn)）\n\n其实底层结构就是B+树，B+树作为树的一种实现，能够让我们很快地查找出对应的记录。\n\n> 以下内容整理自：《Java工程师修炼之道》\n\n### **什么是最左前缀原则？**\n\nMySQL中的索引可以以一定顺序引用多列，这种索引叫作联合索引。如User表的name和city加联合索引就是(name,city)，而最左前缀原则指的是，如果查询的时候查询条件精确匹配索引的左边连续一列或几列，则此列就可以被用到。如下：\n\n```\nselect * from user where name=xx and city=xx ; ／／可以命中索引\n```\n\n这里需要注意的是，查询的时候如果两个条件都用上了，但是顺序不同，如 `city= xx and name ＝xx`，那么现在的查询引擎会自动优化为匹配联合索引的顺序，这样是能够命中索引的。\n\n由于最左前缀原则，在创建联合索引时，索引字段的顺序需要考虑字段值去重之后的个数，较多的放前面。ORDER BY子句也遵循此规则。\n\n### **注意避免冗余索引**\n\n冗余索引指的是索引的功能相同，能够命中就肯定能命中 ，那么 就是冗余索引如（name,city ）和（name ）这两个索引就是冗余索引，能够命中后者的查询肯定是能够命中前者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\n\nMySQLS.7 版本后，可以通过查询 sys 库的 `schema_redundant_indexes` 表来查看冗余索引\n\n### **Mysql如何为表字段添加索引？**\n\n1.添加PRIMARY KEY（主键索引）\n\n```\nALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )\n```\n\n2.添加UNIQUE(唯一索引)\n\n```\nALTER TABLE `table_name` ADD UNIQUE ( `column` )\n```\n\n3.添加INDEX(普通索引)\n\n```\nALTER TABLE `table_name` ADD INDEX index_name ( `column` )\n```\n\n4.添加FULLTEXT(全文索引)\n\n```\nALTER TABLE `table_name` ADD FULLTEXT ( `column`)\n```\n\n5.添加多列索引\n\n```\nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )\n```\n\n## **存储引擎**\n\n#### 一些常用命令\n\n**查看MySQL提供的所有存储引擎**\n\n```\nmysql> show engines;\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIEJJlvA5Xvak9g2icgCFTultXpuTGyU4kTKPQ2gmZN2LHZNg1NxVDHhQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"查看MySQL提供的所有存储引擎\")\n\n从上图我们可以查看出 MySQL 当前默认的存储引擎是InnoDB,并且在5.7版本所有的存储引擎中只有 InnoDB 是事务性存储引擎，也就是说只有 InnoDB 支持事务。\n\n**查看MySQL当前默认的存储引擎**\n\n我们也可以通过下面的命令查看默认的存储引擎。\n\n```\nmysql> show variables like '%storage_engine%';\n```\n\n**查看表的存储引擎**\n\n```\nshow table status like \"table_name\" ;\n```\n\n![](https://mmbiz.qpic.cn/mmbiz_png/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIkOYceWJJB8tpribOyRg0lH5pPX1akCcU9Flrib410qa42qDTtaquHO7w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"查看表的存储引擎\")\n\n#### **MyISAM和InnoDB区别**\n\nMyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，而且提供了大量的特性，包括全文索引、压缩、空间函数等，但MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复。不过，5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为InnoDB。\n\n大多数时候我们使用的都是 InnoDB 存储引擎，但是在某些情况下使用 MyISAM 也是合适的比如读密集的情况下。（如果你不介意 MyISAM 崩溃回复问题的话）。\n\n**两者的对比：**\n\n1.  **是否支持行级锁** : MyISAM 只有表级锁(table-level locking)，而InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。\n\n2.  **是否支持事务和崩溃后的安全恢复：****MyISAM** 强调的是性能，每次查询具有原子性,其执行比InnoDB类型更快，但是不提供事务支持。但是**InnoDB** 提供事务支持事务，外部键等高级数据库功能。具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。\n\n3.  **是否支持外键：** MyISAM不支持，而InnoDB支持。\n\n4.  **是否支持MVCC** ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效;MVCC只在 `READ COMMITTED` 和 `REPEATABLE READ` 两个隔离级别下工作;MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现;各数据库中MVCC实现并不统一。\n\n5.  ......\n\n《MySQL高性能》上面有一句话这样写到:\n\n> 不要轻易相信“MyISAM比InnoDB快”之类的经验之谈，这个结论往往不是绝对的。在很多我们已知场景中，InnoDB的速度都可以让MyISAM望尘莫及，尤其是用到了聚簇索引，或者需要访问的数据都可以放入内存的应用。\n\n一般情况下我们选择 InnoDB 都是没有问题的，但是某事情况下你并不在乎可扩展能力和并发能力，也不需要事务支持，也不在乎崩溃后的安全恢复问题的话，选择MyISAM也是一个不错的选择。但是一般情况下，我们都是需要考虑到这些问题的。\n\n## **乐观锁与悲观锁的区别**\n\n### **悲观锁**\n\n总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（**共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程**）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中`synchronized`和`ReentrantLock`等独占锁就是悲观锁思想的实现。\n\n### **乐观锁**\n\n总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。**乐观锁适用于多读的应用类型，这样可以提高吞吐量**，像数据库提供的类似于**write_condition机制**，其实都是提供的乐观锁。在Java中`java.util.concurrent.atomic`包下面的原子变量类就是使用了乐观锁的一种实现方式**CAS**实现的。\n\n### **两种锁的使用场景**\n\n从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像**乐观锁适用于写比较少的情况下（多读场景）**，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以**一般多写的场景下用悲观锁就比较合适。**\n\n### **乐观锁常见的两种实现方式**\n\n> **乐观锁一般会使用版本号机制或CAS算法实现。**\n\n#### **1\\. 版本号机制**\n\n一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。\n\n**举一个简单的例子：** 假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。\n\n1.  操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。\n\n2.  在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。\n\n3.  操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。\n\n4.  操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。\n\n这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。\n\n#### **2\\. CAS算法**\n\n即**compare and swap（比较与交换）**，是一种有名的**无锁算法**。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。**CAS算法**涉及到三个操作数\n\n*   需要读写的内存值 V\n\n*   进行比较的值 A\n\n*   拟写入的新值 B\n\n当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个**自旋操作**，即**不断的重试**。\n\n### **乐观锁的缺点**\n\n> ABA 问题是乐观锁一个常见的问题\n\n#### **1 ABA 问题**\n\n如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 \"ABA\"问题。\n\nJDK 1.5 以后的 `AtomicStampedReference 类`就提供了此种能力，其中的 `compareAndSet 方法`就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\n\n#### **2 循环时间长开销大**\n\n**自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。** 如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。\n\n#### **3 只能保证一个共享变量的原子操作**\n\nCAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了`AtomicReference类`来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用`AtomicReference类`把多个共享变量合并成一个共享变量来操作。\n\n## **锁机制与InnoDB锁算法**\n\n**MyISAM和InnoDB存储引擎使用的锁：**\n\n*   MyISAM 采用表级锁(table-level locking)。\n\n*   InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁\n\n**表级锁和行级锁对比：**\n\n*   **表级锁：** Mysql中锁定 **粒度最大** 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。\n\n*   **行级锁：** Mysql中锁定 **粒度最小** 的一种锁，只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。\n\n**InnoDB存储引擎的锁的算法有三种：**\n\n*   Record lock：单个行记录上的锁\n\n*   Gap lock：间隙锁，锁定一个范围，不包括记录本身\n\n*   Next-key lock：record+gap 锁定一个范围，包含记录本身\n\n**相关知识点：**\n\n*   innodb对于行的查询使用next-key lock\n\n*   Next-locking keying为了解决Phantom Problem幻读问题\n\n*   当查询的索引含有唯一属性时，将next-key lock降级为record key\n\n*   Gap锁设计的目的是为了阻止多个事务将记录插入到同一范围内，而这会导致幻读问题的产生\n\n*   有两种方式显式关闭gap锁：（除了外键约束和唯一性检查外，其余情况仅使用record lock） A. 将事务隔离级别设置为RC B. 将参数innodb_locks_unsafe_for_binlog设置为1\n\n## **大表优化**\n\n当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：\n\n### **1\\. 限定数据的范围**\n\n务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内；\n\n### **2\\. 读/写分离**\n\n经典的数据库拆分方案，主库负责写，从库负责读；\n\n### **3\\. 垂直分区**\n\n**根据数据库里面数据表的相关性进行拆分。** 例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。\n\n**简单来说垂直拆分是指数据表列的拆分，把一张列比较多的表拆分为多张表。** 如下图所示，这样来说大家应该就更容易理解了。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIeKLunHKNruryaXgg0Zb8I9VBbjicMkS6gPTnYcfJlg0bZSiaGfDgtQUA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"数据库垂直分区\") \n\n*   **垂直拆分的优点：** 可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。\n\n*   **垂直拆分的缺点：** 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂；\n\n### **4\\. 水平分区**\n\n**保持数据表结构不变，通过某种策略存储数据分片。****这样每一片数据分散到不同的表或者库中，达到了分布式的目的。****水平拆分可以支撑非常大的数据量。**\n\n水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKIAYTTeeI9qS3xNFYDAkU8wdhKibXOMsVpHM9ZicecRj6YEJsWcYeKEwOg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"数据库水平拆分\")\n\n水平拆分可以支持非常大的数据量。需要注意的一点是：分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以 **水平拆分最好分库** 。\n\n水平拆分能够 **支持非常大的数据量存储，应用端改造也少**，但 **分片事务难以解决** ，跨节点Join性能较差，逻辑复杂。《Java工程师修炼之道》的作者推荐 **尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度** ，一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络I/O。\n\n**下面补充一下数据库分片的两种常见方案：**\n\n*   **客户端代理：** **分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。** 当当网的 **Sharding-JDBC** 、阿里的TDDL是两种比较常用的实现。\n\n*   **中间件代理：** **在应用和数据中间加了一个代理层。****分片逻辑统一维护在中间件服务中。** 我们现在谈的 **Mycat** 、360的Atlas、网易的DDB等等都是这种架构的实现。",[[1568772091503,["GJX@GJXAIOU",[[-1,204,"**"]],[206,206],[204,204]]],[1568772092657,["GJX@GJXAIOU",[[-1,208,"**"]],[210,210],[208,208]]],[1568772094607,["GJX@GJXAIOU",[[-1,222,"**"]],[224,224],[222,222]]],[1568772096633,["GJX@GJXAIOU",[[-1,214,"**"]],[216,216],[214,214]]],[1568772109179,["GJX@GJXAIOU",[[-1,0,"*什么*是"]],[4,4],[0,0]]],[1568772112759,["GJX@GJXAIOU",[[1,0,"## "]],[0,0],[11,11]]],[1568772115320,["GJX@GJXAIOU",[[-1,8,"?**"]],[11,11],[8,8]]],[1568772116342,["GJX@GJXAIOU",[[-1,8,""],[1,8," "],[-1,634," "],[1,635," "],[-1,692," "],[1,693," "],[-1,741," "],[1,742," "],[-1,964," "],[1,965," "],[-1,1123," "],[1,1124," "],[-1,1317," "],[1,1318," "],[-1,1470," "],[1,1471," "],[-1,2479," "],[1,2480," "],[-1,2552," "],[1,2553," "],[-1,2559," "],[1,2560," "],[-1,2617," "],[1,2618," "],[-1,2736," "],[1,2737," "],[-1,2761," "],[1,2762," "],[-1,2951," "],[1,2952," "],[-1,2961," "],[1,2962," "],[-1,4292," "],[1,4293," "],[-1,4301," "],[1,4302," "],[-1,4649," "],[1,4650," "],[-1,4942," "],[1,4943," "],[-1,4969," "],[1,4970," "],[-1,6451," "],[1,6452," "],[-1,6568," "],[1,6569," "],[-1,6623," "],[1,6624," "],[-1,6766," "],[1,6767," "],[-1,6805," "],[1,6806," "],[-1,6848," "],[1,6849," "],[-1,6865," 和 "],[1,6868," 和 "],[-1,6885," "],[1,6886," "],[-1,8141," "],[1,8142," "],[-1,9178," "],[1,9179," "],[-1,9200," "],[1,9201," "],[-1,9239," "],[1,9240," "],[-1,9401," "],[1,9402," "],[-1,9974," "],[1,9975," "],[-1,9983," "],[1,9984," "],[-1,9992," "],[1,9993," "],[-1,10097," "],[1,10098," "],[-1,10106," "],[1,10107," "],[-1,10115," "],[1,10116," "],[-1,10836," "],[1,10837," "],[-1,10931," "],[1,10932," "],[-1,11162," "],[1,11163," "],[-1,11236," "],[1,11237," "],[-1,11780," "],[1,11781," "],[-1,11793," "],[1,11794," "],[-1,11803," "],[1,11804," "],[-1,11829," "],[1,11830," "],[-1,11842," "],[1,11843," "],[-1,11879," "],[1,11880," "],[-1,11917," "],[1,11918," "],[-1,12033," "],[1,12034," "],[-1,12073," "],[1,12074," "],[-1,12078," "],[1,12079," "],[-1,12096," "],[1,12097," "],[-1,12132," "],[1,12133," "],[-1,12173," "],[1,12174," "],[-1,12180," "],[1,12181," "],[-1,12190," "],[1,12191," "]],[8,8],[9,9]]],[1568772117808,["GJX@GJXAIOU",[[1,9,"概念"]],[9,9],[11,11]]],[1568772125082,["GJX@GJXAIOU",[[1,3,"一 "]],[3,3],[4,4]]],[1568772125465,["GJX@GJXAIOU",[[1,4,"、"]],[4,4],[5,5]]],[1568772127078,["GJX@GJXAIOU",[[-1,4,"、 "]],[6,6],[4,4]]],[1568772129008,["GJX@GJXAIOU",[[1,4,"、"]],[4,4],[5,5]]],[1568772130740,["GJX@GJXAIOU",[[1,3," "]],[3,3],[4,4]]],[1568772176856,["GJX@GJXAIOU",[[-1,434,"介绍一下？"]],[439,439],[434,434]]],[1568772177708,["GJX@GJXAIOU",[[-1,434,"**"]],[436,436],[434,434]]],[1568772179493,["GJX@GJXAIOU",[[-1,419,"**"]],[421,421],[419,419]]],[1568772183014,["GJX@GJXAIOU",[[-1,215,"什么是"]],[218,218],[215,215]]],[1568772183835,["GJX@GJXAIOU",[[-1,217,"？"]],[218,218],[217,217]]],[1568772189559,["GJX@GJXAIOU",[[1,217,"概念"]],[217,217],[219,219]]],[1568772194324,["GJX@GJXAIOU",[[-1,207,"相关"]],[209,209],[207,207]]],[1568772198006,["GJX@GJXAIOU",[[1,205,"二、"]],[205,205],[207,207]]],[1568772206166,["GJX@GJXAIOU",[[1,215,"（）"]],[215,215],[217,217]]],[1568772208408,["GJX@GJXAIOU",[[1,216,"一"]],[216,216],[217,217]]],[1568772212141,["GJX@GJXAIOU",[[1,420,"（）"]],[420,420],[422,422]]],[1568772214534,["GJX@GJXAIOU",[[1,421,"二"]],[421,421],[422,422]]],[1568772230645,["GJX@GJXAIOU",[[1,798," "]],[798,798],[799,799]]],[1568772236058,["GJX@GJXAIOU",[[-1,438,"![](https://mmbiz.qpic.cn/mmbiz_png/aVp1YC8UV0dc6c7aKibepIBB1ha8ELsKILZawMjGekTciaKUwpN9aEOV7BlMJMBvm0paeDkxqy7tCbuqFez4q6bw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1 \"事物的特性\")"]],[438,621],[438,438]]],[1568772237343,["GJX@GJXAIOU",[[-1,439,"\n"]],[439,439],[438,438]]],[1568772238776,["GJX@GJXAIOU",[[-1,438,"\n"]],[438,438],[437,437]]],[1568772275312,["GJX@GJXAIOU",[[-1,667,"**"]],[669,669],[667,667]]],[1568772276926,["GJX@GJXAIOU",[[-1,673,"哪些"]],[675,675],[673,673]]],[1568772278198,["GJX@GJXAIOU",[[-1,675,"？**"]],[678,678],[675,675]]],[1568772284581,["GJX@GJXAIOU",[[1,667,"（）"]],[667,667],[669,669]]],[1568772286833,["GJX@GJXAIOU",[[1,668,"三"]],[668,668],[669,669]]],[1568772483259,["GJX@GJXAIOU",[[1,780," "]],[780,780],[781,781]]],[1568772486069,["GJX@GJXAIOU",[[1,940," "]],[940,940],[941,941]]],[1568772490398,["GJX@GJXAIOU",[[-1,913,"****"]],[917,917],[913,913]]],[1568772508696,["GJX@GJXAIOU",[[-1,1699,"有哪些?MySQL的默认隔离级别是？"]],[1699,1717],[1699,1699]]],[1568772511429,["GJX@GJXAIOU",[[-1,1691,"**"]],[1693,1693],[1691,1691]]],[1568772514005,["GJX@GJXAIOU",[[-1,1697,"**"]],[1699,1699],[1697,1697]]],[1568772520535,["GJX@GJXAIOU",[[1,1691,"（）"]],[1691,1691],[1693,1693]]],[1568772522807,["GJX@GJXAIOU",[[1,1692,"是"]],[1692,1692],[1693,1693]]],[1568772523714,["GJX@GJXAIOU",[[-1,1692,"是"]],[1693,1693],[1692,1692]]],[1568772525589,["GJX@GJXAIOU",[[1,1692,"四"]],[1692,1692],[1693,1693]]],[1568772536426,["GJX@GJXAIOU",[[1,1756," "]],[1756,1756],[1757,1757]]],[1568772546280,["GJX@GJXAIOU",[[1,1828," "]],[1828,1828],[1829,1829]]],[1568772548876,["GJX@GJXAIOU",[[1,1901," "]],[1901,1901],[1902,1902]]],[1568772551127,["GJX@GJXAIOU",[[1,1988," "]],[1988,1988],[1989,1989]]],[1568772689202,["GJX@GJXAIOU",[[1,2438," "]],[2438,2438],[2439,2439]]],[1568772695267,["GJX@GJXAIOU",[[1,2609," "]],[2609,2609],[2610,2610]]],[1568772707033,["GJX@GJXAIOU",[[1,2791," "]],[2791,2791],[2792,2792]]],[1568773162385,["GJX@GJXAIOU",[[-1,2834,"> "]],[2836,2836],[2834,2834]]],[1568773172183,["GJX@GJXAIOU",[[-1,3348,"```"]],[3348,3351],[3348,3348]]],[1568773176133,["GJX@GJXAIOU",[[-1,3439,"```"]],[3439,3442],[3439,3439]]],[1568773186418,["GJX@GJXAIOU",[[-1,3653,"****"]],[3653,3657],[3653,3653]]],[1568777013933,[null,[[-1,3348,"\n"],[-1,3439,"`"],[1,3440,"\n"],[-1,3653,"*"],[1,3654,"？"]],[3348,3348],[3655,3655]]],[1568777013933,[null,[[1,3348,"\n"],[1,3438,"`"],[-1,3438,"\n"],[1,3652,"*"],[-1,3652,"？"]],[3655,3655],[3348,3348]]],[1568776956002,["GJX@GJXAIOU",[[-1,3548,"\n"]],[3548,3548],[3547,3547]]],[1568776967465,["GJX@GJXAIOU",[[-1,4170,">"]],[4171,4171],[4170,4170]]],[1568776982497,["GJX@GJXAIOU",[[-1,6780,"> "]],[6782,6782],[6780,6780]]],[1568776983417,["GJX@GJXAIOU",[[-1,6779,"\n"]],[6780,6780],[6779,6779]]],[1568776990993,["GJX@GJXAIOU",[[-1,7705,"> "]],[7707,7707],[7705,7705]]]],null,"GJX@GJXAIOU"]]}