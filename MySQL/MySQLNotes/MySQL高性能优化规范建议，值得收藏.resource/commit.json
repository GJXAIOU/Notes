{"compress":true,"commitItems":[["8253d9ae-0025-49e4-8168-4d5c7732fb4f",1564883697342,"## MySQL高性能优化规范建议，值得收藏\n\n听风 [程序IT圈](javascript:void(0);) _4天前_\n\n点击上方“程序IT圈”，选择“置顶公众号”\n\n每天早晨8点50分，准点开车打卡\n\nwww.cnblogs.com/huchong/p/10219318.html\n\n还记得之前也有一篇MySQL性能优化的文章吗？[19条效率至少提高3倍的MySQL技巧](http://mp.weixin.qq.com/s?__biz=MzA5NzgzODI5NA==&mid=2454036524&idx=2&sn=3f39f2b35570a04119954f7df38600dd&chksm=872bb595b05c3c83168692aa518ec6d36ffcd1c75db2541ff6b8c2312d149f9767bf23f53eea&scene=21#wechat_redirect) ，再加上看了今天这一篇MySQL高性能优化规范建议 。那对于优化MySQL性能和规范，就掌握的差不多了 。废话不多说，开始正题。\n\n数据库命令规范\n\n•所有数据库对象名称必须使用小写字母并用下划线分割•所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）•数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符•临时库表必须以 tmp_为前缀并以日期为后缀，备份表必须以 bak_为前缀并以日期 (时间戳) 为后缀•所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）\n\n* * *\n\n## 数据库基本设计规范\n\n### 1\\. 所有表必须使用 Innodb 存储引擎\n\n没有特殊要求（即 Innodb 无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用 Innodb 存储引擎（MySQL5.5 之前默认使用 Myisam，5.6 以后默认的为 Innodb）。\n\nInnodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。\n\n### 2\\. 数据库和表的字符集统一使用 UTF8\n\n兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。\n\n### 3\\. 所有表和字段都需要添加注释\n\n使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护\n\n### 4\\. 尽量控制单表数据量的大小,建议控制在 500 万以内。\n\n500 万并不是 MySQL 数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题。\n\n可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小\n\n### 5\\. 谨慎使用 MySQL 分区表\n\n分区表在物理上表现为多个文件，在逻辑上表现为一个表；\n\n谨慎选择分区键，跨分区查询效率可能更低；\n\n建议采用物理分表的方式管理大数据。\n\n### 6.尽量做到冷热数据分离,减小表的宽度\n\n> MySQL 限制每个表最多存储 4096 列，并且每一行数据的大小不能超过 65535 字节。\n\n减少磁盘 IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的 IO）；\n\n更有效的利用缓存，避免读入无用的冷数据；\n\n经常一起使用的列放到一个表中（避免更多的关联操作）。\n\n### 7\\. 禁止在表中建立预留字段\n\n预留字段的命名很难做到见名识义。\n\n预留字段无法确认存储的数据类型，所以无法选择合适的类型。\n\n对预留字段类型的修改，会对表进行锁定。\n\n### 8\\. 禁止在数据库中存储图片,文件等大的二进制数据\n\n通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机 IO 操作，文件很大时，IO 操作很耗时。\n\n通常存储于文件服务器，数据库只存储文件地址信息\n\n### 9\\. 禁止在线上做数据库压力测试\n\n### 10\\. 禁止从开发环境,测试环境直接连接生成环境数据库\n\n* * *\n\n## 数据库字段设计规范\n\n### 1\\. 优先选择符合存储需要的最小的数据类型\n\n**原因：**\n\n列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的 IO 次数也就越多，索引的性能也就越差。\n\n**方法：**\n\n**a.将字符串转换成数字类型存储,如:将 IP 地址转换成整形数据**\n\nMySQL 提供了两个方法来处理 ip 地址\n\n•inet_aton 把 ip 转为无符号整型 (4-8 位)•inet_ntoa 把整型的 ip 转为地址\n\n插入数据前，先用 inet_aton 把 ip 地址转为整型，可以节省空间，显示数据时，使用 inet_ntoa 把整型的 ip 地址转为地址显示即可。\n\n**b.对于非负型的数据 (如自增 ID,整型 IP) 来说,要优先使用无符号整型来存储**\n\n**原因：**\n\n无符号相对于有符号可以多出一倍的存储空间\n\n```\nSIGNED INT -2147483648~2147483647\n```\n\nVARCHAR(N) 中的 N 代表的是字符数，而不是字节数，使用 UTF8 存储 255 个汉字 Varchar(255)=765 个字节。**过大的长度会消耗更多的内存。**\n\n### 2\\. 避免使用 TEXT,BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据\n\n**a. 建议把 BLOB 或是 TEXT 列分离到单独的扩展表中**\n\nMySQL 内存临时表不支持 TEXT、BLOB 这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。而且对于这种数据，MySQL 还是要进行二次查询，会使 sql 性能变得很差，但是不是说一定不能使用这样的数据类型。\n\n如果一定要使用，建议把 BLOB 或是 TEXT 列分离到单独的扩展表中，查询时一定不要使用 select * 而只需要取出必要的列，不需要 TEXT 列的数据时不要对该列进行查询。\n\n**2、TEXT 或 BLOB 类型只能使用前缀索引**\n\n因为MySQL[1] 对索引字段长度是有限制的，所以 TEXT 类型只能使用前缀索引，并且 TEXT 列上是不能有默认值的\n\n### 3\\. 避免使用 ENUM 类型\n\n修改 ENUM 值需要使用 ALTER 语句\n\nENUM 类型的 ORDER BY 操作效率低，需要额外操作\n\n禁止使用数值作为 ENUM 的枚举值\n\n### 4\\. 尽可能把所有列定义为 NOT NULL\n\n**原因：**\n\n索引 NULL 列需要额外的空间来保存，所以要占用更多的空间\n\n进行比较和计算时要对 NULL 值做特别的处理\n\n### 5\\. 使用 TIMESTAMP(4 个字节) 或 DATETIME 类型 (8 个字节) 存储时间\n\nTIMESTAMP 存储的时间范围 1970-01-01 00:00:01 ~ 2038-01-19-03:14:07\n\nTIMESTAMP 占用 4 字节和 INT 相同，但比 INT 可读性高\n\n超出 TIMESTAMP 取值范围的使用 DATETIME 类型存储\n\n**经常会有人用字符串存储日期型的数据（不正确的做法）**\n\n•缺点 1：无法用日期函数进行计算和比较•缺点 2：用字符串存储日期要占用更多的空间\n\n### 6\\. 同财务相关的金额类数据必须使用 decimal 类型\n\n•非精准浮点：float,double•精准浮点：decimal\n\nDecimal 类型为精准浮点数，在计算时不会丢失精度\n\n占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节\n\n可用于存储比 bigint 更大的整型数据\n\n* * *\n\n## 索引设计规范\n\n### 1\\. 限制每张表上的索引数量,建议单张表索引不超过 5 个\n\n索引并不是越多越好！索引可以提高效率同样可以降低效率。\n\n索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。\n\n因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。\n\n### 2\\. 禁止给表中的每一列都建立单独的索引\n\n5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。\n\n### 3\\. 每个 Innodb 表必须有个主键\n\nInnodb 是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。\n\nInnodb 是按照主键索引的顺序来组织表的\n\n•不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引）•不要使用 UUID,MD5,HASH,字符串列作为主键（无法保证数据的顺序增长）•主键建议使用自增 ID 值\n\n* * *\n\n### 4\\. 常见索引列建议\n\n•出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列•包含在 ORDER BY、GROUP BY、DISTINCT 中的字段•并不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好•多表 join 的关联列\n\n* * *\n\n### 5.如何选择索引列的顺序\n\n建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。\n\n•区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）•尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）•使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）\n\n* * *\n\n### 6\\. 避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）\n\n•重复索引示例：primary key(id)、index(id)、unique index(id)•冗余索引示例：index(a,b,c)、index(a,b)、index(a)\n\n* * *\n\n### 7\\. 对于频繁的查询优先考虑使用覆盖索引\n\n> 覆盖索引：就是包含了所有查询字段 (where,select,ordery by,group by 包含的字段) 的索引\n\n**覆盖索引的好处：**\n\n•**避免 Innodb 表进行索引的二次查询:** Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。•**可以把随机 IO 变成顺序 IO 加快查询效率:** 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。\n\n* * *\n\n### 8.索引 SET 规范\n\n**尽量避免使用外键约束**\n\n•不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引•外键可用于保证数据的参照完整性，但建议在业务端实现•外键会影响父表和子表的写操作从而降低性能\n\n* * *\n\n## 数据库 SQL 开发规范\n\n### 1\\. 建议使用预编译语句进行数据库操作\n\n预编译语句可以重复使用这些计划，减少 SQL 编译所需要的时间，还可以解决动态 SQL 所带来的 SQL 注入的问题。\n\n只传参数，比传递 SQL 语句更高效。\n\n相同语句可以一次解析，多次使用，提高处理效率。\n\n### 2\\. 避免数据类型的隐式转换\n\n隐式转换会导致索引失效如:\n\n```\nselect name,phone from customer where id = '111';\n```\n\n### 3\\. 充分利用表上已经存在的索引\n\n避免使用双%号的查询条件。如：`a like '%123%'`，（如果无前置%,只有后置%，是可以用到列上的索引的）\n\n一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。\n\n在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。\n\n### 4\\. 数据库设计时，应该要对以后扩展进行考虑\n\n### 5\\. 程序连接不同的数据库使用不同的账号，进制跨库查询\n\n•为数据库迁移和分库分表留出余地•降低业务耦合度•避免权限过大而产生的安全风险\n\n### 6\\. 禁止使用 SELECT * 必须使用 SELECT <字段列表> 查询\n\n**原因：**\n\n•消耗更多的 CPU 和 IO 以网络带宽资源•无法使用覆盖索引•可减少表结构变更带来的影响\n\n### 7\\. 禁止使用不含字段列表的 INSERT 语句\n\n如：\n\n```\ninsert into values ('a','b','c');\n```\n\n应使用：\n\n```\ninsert into t(c1,c2,c3) values ('a','b','c');\n```\n\n### 8\\. 避免使用子查询，可以把子查询优化为 join 操作\n\n通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。\n\n**子查询性能差的原因：**\n\n子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。\n\n由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。\n\n### 9\\. 避免使用 JOIN 关联太多的表\n\n对于 MySQL 来说，是存在关联缓存的，缓存的大小可以由 join_buffer_size 参数进行设置。\n\n在 MySQL 中，对于同一个 SQL 多关联（join）一个表，就会多分配一个关联缓存，如果在一个 SQL 中关联的表越多，所占用的内存也就越大。\n\n如果程序中大量的使用了多表关联的操作，同时 join_buffer_size 设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。\n\n同时对于关联操作来说，会产生临时表操作，影响查询效率，MySQL 最多允许关联 61 个表，建议不超过 5 个。\n\n### 10\\. 减少同数据库的交互次数\n\n数据库更适合处理批量操作，合并多个相同的操作到一起，可以提高处理效率。\n\n### 11\\. 对应同一列进行 or 判断时，使用 in 代替 or\n\nin 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。\n\n### 12\\. 禁止使用 order by rand() 进行随机排序\n\norder by rand() 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。\n\n推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。\n\n### 13\\. WHERE 从句中禁止对列进行函数转换和计算\n\n对列进行函数转换或计算时会导致无法使用索引\n\n**不推荐：**\n\n```\nwhere date(create_time)='20190101'\n```\n\n**推荐：**\n\n```\nwhere create_time >= '20190101' and create_time < '20190102'\n```\n\n### 14\\. 在明显不会有重复值时使用 UNION ALL 而不是 UNION\n\n•UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作•UNION ALL 不会再对结果集进行去重操作\n\n### 15\\. 拆分复杂的大 SQL 为多个小 SQL\n\n•大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL•MySQL 中，一个 SQL 只能使用一个 CPU 进行计算•SQL 拆分后可以通过并行执行来提高处理效率\n\n* * *\n\n## 数据库操作行为规范\n\n### 1\\. 超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作\n\n**大批量操作可能会造成严重的主从延迟**\n\n主从环境中,大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间， 而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况\n\n**binlog 日志为 row 格式时会产生大量的日志**\n\n大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于在 row 格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因\n\n**避免产生大事务操作**\n\n大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对 MySQL 的性能产生非常大的影响。\n\n特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批\n\n### 2\\. 对于大表使用 pt-online-schema-change 修改表结构\n\n•避免大表修改产生的主从延迟•避免在对表字段进行修改时进行锁表\n\n对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。\n\npt-online-schema-change 它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。把原来一个 DDL 操作，分解成多个小的批次进行。\n\n### 3\\. 禁止为程序使用的账号赋予 super 权限\n\n•当达到最大连接数限制时，还运行 1 个有 super 权限的用户连接•super 权限只能留给 DBA 处理问题的账号使用\n\n### 4\\. 对于程序连接数据库账号,遵循权限最小原则\n\n•程序使用数据库账号只能在一个 DB 下使用，不准跨库•程序使用的账号原则上不准有 drop 权限",[[1564883656541,["GJX@GJXAIOU",[[-1,188,"](http://mp.weixin.qq.com/s?__biz=MzA5NzgzODI5NA==&mid=2454036524&idx=2&sn=3f39f2b35570a04119954f7df38600dd&chksm=872bb595b05c3c83168692aa518ec6d36ffcd1c75db2541ff6b8c2312d149f9767bf23f53eea&scene=21#wechat_redirect)"]],[188,404],[188,188]]],[1564883661380,["GJX@GJXAIOU",[[-1,168,"["]],[169,169],[168,168]]],[1564883666119,["GJX@GJXAIOU",[[1,254,"## "]],[254,261],[264,264]]],[1564883670372,["GJX@GJXAIOU",[[-1,24,"听风 [程序IT圈](javascript:void(0);) _4天前_\n\n点击上方“程序IT圈”，选择“置顶公众号”\n\n每天早晨8点50分，准点开车打卡\n\nwww.cnblogs.com/huchong/p/10219318.html"]],[24,143],[24,24]]],[1564883671747,["GJX@GJXAIOU",[[-1,25,"\n"]],[24,24],[23,23]]],[1564883672315,["GJX@GJXAIOU",[[-1,24,"\n"]],[23,23],[22,22]]],[1564883675806,["GJX@GJXAIOU",[[-1,17,"，值得收藏"]],[17,22],[17,17]]],[1564883678324,["GJX@GJXAIOU",[[-1,0,"#"]],[2,2],[1,1]]],[1564883685559,["GJX@GJXAIOU",[[1,164,"\n"]],[164,164],[165,165]]],[1564883687069,["GJX@GJXAIOU",[[1,218,"\n"]],[218,218],[219,219]]],[1564883689173,["GJX@GJXAIOU",[[1,252,"\n"]],[252,252],[253,253]]],[1564883691092,["GJX@GJXAIOU",[[1,305,"\n"]],[305,305],[306,306]]],[1564883703867,["GJX@GJXAIOU",[[-1,60," "],[1,61," "],[-1,139,"•"],[1,140,"-"],[-1,2363," "],[1,2364," "],[-1,4258," "],[1,4259," "],[-1,4454," "],[1,4455," "]],[139,139],[140,140]]],[1564883704060,["GJX@GJXAIOU",[[1,140," "]],[140,140],[141,141]]],[1564883706434,["GJX@GJXAIOU",[[-1,166,"•"]],[166,167],[166,166]]],[1564883706838,["GJX@GJXAIOU",[[1,166,"- "]],[166,166],[168,168]]],[1564883708123,["GJX@GJXAIOU",[[-1,221,"•"]],[221,222],[221,221]]],[1564883708177,["GJX@GJXAIOU",[[1,221,"、"]],[221,221],[222,222]]],[1564883709180,["GJX@GJXAIOU",[[-1,221,"、"]],[222,222],[221,221]]],[1564883709791,["GJX@GJXAIOU",[[1,221,"- "]],[221,221],[223,223]]],[1564883711170,["GJX@GJXAIOU",[[-1,256,"•"]],[256,257],[256,256]]],[1564883711948,["GJX@GJXAIOU",[[1,256,"--"]],[256,256],[258,258]]],[1564883712837,["GJX@GJXAIOU",[[-1,257,"-"]],[258,258],[257,257]]],[1564883713189,["GJX@GJXAIOU",[[1,257," "]],[257,257],[258,258]]],[1564883714595,["GJX@GJXAIOU",[[-1,310,"•"]],[310,311],[310,310]]],[1564883714973,["GJX@GJXAIOU",[[1,310," "]],[310,310],[311,311]]],[1564883716042,["GJX@GJXAIOU",[[-1,310," "]],[311,311],[310,310]]],[1564883716709,["GJX@GJXAIOU",[[1,310,"- "]],[310,310],[312,312]]],[1564883724026,["GJX@GJXAIOU",[[-1,415,"\\"]],[416,416],[415,415]]],[1564883729811,["GJX@GJXAIOU",[[-1,585,"\\"]],[586,586],[585,585]]],[1564883733541,["GJX@GJXAIOU",[[-1,770,"\\"]],[771,771],[770,770]]],[1564883734869,["GJX@GJXAIOU",[[-1,709,"\\"]],[710,710],[709,709]]],[1564883740133,["GJX@GJXAIOU",[[-1,899,"\\"]],[900,900],[899,899]]],[1564883741531,["GJX@GJXAIOU",[[-1,944,"\n"]],[944,944],[943,943]]],[1564883742435,["GJX@GJXAIOU",[[-1,965,"\n"]],[965,965],[964,964]]],[1564883751499,["GJX@GJXAIOU",[[-1,1009,"> "]],[1010,1010],[1009,1009]]],[1564883763038,["GJX@GJXAIOU",[[-1,1175,"\\"]],[1176,1176],[1175,1175]]],[1564883764058,["GJX@GJXAIOU",[[-1,1264,"\\"]],[1265,1265],[1264,1264]]],[1564883771242,["GJX@GJXAIOU",[[-1,1388,"\\"]],[1389,1389],[1388,1388]]],[1564883772019,["GJX@GJXAIOU",[[-1,1411,"\\"]],[1412,1412],[1411,1411]]],[1564883776035,["GJX@GJXAIOU",[[-1,1464,"\\"]],[1465,1465],[1464,1464]]],[1564883786900,["GJX@GJXAIOU",[[-1,1620,"\n"]],[1620,1620],[1619,1619]]],[1564883788090,["GJX@GJXAIOU",[[-1,1643,"\n"]],[1643,1643],[1642,1642]]],[1564883790383,["GJX@GJXAIOU",[[1,1583,"- "]],[1583,1583],[1585,1585]]],[1564883792482,["GJX@GJXAIOU",[[-1,1645,"•"]],[1646,1646],[1645,1645]]],[1564883799486,["GJX@GJXAIOU",[[1,1645,"  - ·"]],[1645,1645],[1650,1650]]],[1564883801251,["GJX@GJXAIOU",[[-1,1649,"·"]],[1650,1650],[1649,1649]]],[1564883802511,["GJX@GJXAIOU",[[1,1649,"`"]],[1649,1649],[1650,1650]]],[1564883804356,["GJX@GJXAIOU",[[1,1659,"`"]],[1659,1659],[1660,1660]]],[1564883810220,["GJX@GJXAIOU",[[-1,1681,"•"]],[1682,1682],[1681,1681]]],[1564883813886,["GJX@GJXAIOU",[[1,1681,"\n  `- `"]],[1681,1681],[1688,1688]]],[1564883815813,["GJX@GJXAIOU",[[1,1697,"`"]],[1697,1697],[1698,1698]]],[1564883818371,["GJX@GJXAIOU",[[-1,1684,"`"]],[1685,1685],[1684,1684]]],[1564883825805,["GJX@GJXAIOU",[[-1,1711,"\n"]],[1711,1711],[1710,1710]]],[1564883829133,["GJX@GJXAIOU",[[1,1711,"\n"]],[1711,1711],[1712,1712]]],[1564883831103,["GJX@GJXAIOU",[[1,1721,"`"]],[1721,1721],[1722,1722]]],[1564883832309,["GJX@GJXAIOU",[[1,1731,"`"]],[1731,1731],[1732,1732]]],[1564883835957,["GJX@GJXAIOU",[[1,1761,"`"]],[1761,1761],[1762,1762]]],[1564883837478,["GJX@GJXAIOU",[[1,1771,"`"]],[1771,1771],[1772,1772]]],[1564883843431,["GJX@GJXAIOU",[[1,1794,"- "]],[1794,1794],[1796,1796]]],[1564883858571,["GJX@GJXAIOU",[[-1,1852,"\n"]],[1852,1852],[1851,1851]]],[1564883871676,["GJX@GJXAIOU",[[1,1878,"\n"],[1,1911,"\nUNSIGNED INT 0~4294967295"]],[1878,1911],[1938,1938]]],[1564883873755,["GJX@GJXAIOU",[[-1,1878,"\n"]],[1878,1878],[1877,1877]]],[1564883884428,["GJX@GJXAIOU",[[-1,2039,"\\"]],[2040,2040],[2039,2039]]],[1564883900852,["GJX@GJXAIOU",[[-1,2357,"2"]],[2358,2358],[2357,2357]]],[1564883901934,["GJX@GJXAIOU",[[1,2357,"b"]],[2357,2357],[2358,2358]]],[1564883906915,["GJX@GJXAIOU",[[-1,2453,"\\"]],[2454,2454],[2453,2453]]],[1564883911946,["GJX@GJXAIOU",[[-1,2550,"\\"]],[2551,2551],[2550,2550]]],[1564883915867,["GJX@GJXAIOU",[[-1,2613,"\n"]],[2613,2613],[2612,2612]]],[1564883916838,["GJX@GJXAIOU",[[-1,2492,"\n"]],[2492,2492],[2491,2491]]],[1564883917499,["GJX@GJXAIOU",[[-1,2523,"\n"]],[2523,2523],[2522,2522]]],[1564883919451,["GJX@GJXAIOU",[[-1,2579,"\n"]],[2579,2579],[2578,2578]]],[1564883921284,["GJX@GJXAIOU",[[-1,2640,"\\"]],[2641,2641],[2640,2640]]],[1564883923987,["GJX@GJXAIOU",[[-1,2750,"\n"]],[2750,2750],[2749,2749]]],[1564883925019,["GJX@GJXAIOU",[[-1,2788,"\n"]],[2788,2788],[2787,2787]]],[1564883930322,["GJX@GJXAIOU",[[1,2875,"\n"]],[2875,2875],[2876,2876]]],[1564883931659,["GJX@GJXAIOU",[[-1,2854,"\n"]],[2854,2854],[2853,2853]]],[1564883935476,["GJX@GJXAIOU",[[-1,2904,"\\"]],[2905,2905],[2904,2904]]],[1564883937499,["GJX@GJXAIOU",[[1,2953,"\n"]],[2953,2953],[2954,2954]]],[1564883942397,["GJX@GJXAIOU",[[-1,2997,"\n"]],[2997,2997],[2996,2996]]],[1564883943117,["GJX@GJXAIOU",[[-1,3041,"\n"]],[3041,3041],[3040,3040]]],[1564883947171,["GJX@GJXAIOU",[[-1,3087,"\\"]],[3088,3088],[3087,3087]]],[1564883948322,["GJX@GJXAIOU",[[-1,3145,"\n"]],[3145,3145],[3144,3144]]],[1564883949601,["GJX@GJXAIOU",[[-1,3188,"\n"]],[3188,3188],[3187,3187]]],[1564883953035,["GJX@GJXAIOU",[[-1,3309,"\\"]],[3310,3310],[3309,3309]]],[1564883954643,["GJX@GJXAIOU",[[-1,3329,"\n"]],[3329,3329],[3328,3328]]],[1564883959290,["GJX@GJXAIOU",[[-1,3411,"\\"]],[3412,3412],[3411,3411]]],[1564883963059,["GJX@GJXAIOU",[[1,3553,"\n"]],[3553,3553],[3554,3554]]],[1564883964627,["GJX@GJXAIOU",[[1,3595,"\n"]],[3595,3595],[3596,3596]]],[1564883967746,["GJX@GJXAIOU",[[-1,3624,"\\"]],[3625,3625],[3624,3624]]],[1564883972445,["GJX@GJXAIOU",[[1,3676,"\n"]],[3676,3676],[3677,3677]]],[1564883974299,["GJX@GJXAIOU",[[1,3713,"\n"]],[3713,3713],[3714,3714]]],[1564883977355,["GJX@GJXAIOU",[[1,3765,"\n"]],[3765,3765],[3766,3766]]],[1564883983116,["GJX@GJXAIOU",[[1,3910,"\n"]],[3910,3910],[3911,3911]]],[1564883984605,["GJX@GJXAIOU",[[1,3964,"\n"]],[3964,3964],[3965,3965]]],[1564883989795,["GJX@GJXAIOU",[[-1,4012,"\\"]],[4013,4013],[4012,4012]]],[1564883991907,["GJX@GJXAIOU",[[1,4098,"\n"]],[4098,4098],[4099,4099]]],[1564883995930,["GJX@GJXAIOU",[[-1,4153,"\\"]],[4154,4154],[4153,4153]]],[1564883996851,["GJX@GJXAIOU",[[-1,4175," "]],[4176,4176],[4175,4175]]],[1564883997363,["GJX@GJXAIOU",[[-1,4174,">"]],[4175,4175],[4174,4174]]],[1564884007563,["GJX@GJXAIOU",[[1,4658,"\n"]],[4658,4658],[4659,4659]]],[1564884009413,["GJX@GJXAIOU",[[1,4685,"\n"]],[4685,4685],[4686,4686]]],[1564884016274,["GJX@GJXAIOU",[[-1,4738,"\\"]],[4739,4739],[4738,4738]]],[1564884022155,["GJX@GJXAIOU",[[-1,4870,"\\"]],[4871,4871],[4870,4870]]],[1564884024691,["GJX@GJXAIOU",[[-1,4899,"\n"]],[4899,4899],[4898,4898]]],[1564884027730,["GJX@GJXAIOU",[[-1,4963,"\\"]],[4964,4964],[4963,4963]]],[1564884035010,["GJX@GJXAIOU",[[-1,5232,"\\"]],[5233,5233],[5232,5232]]],[1564884036244,["GJX@GJXAIOU",[[-1,5260,"\\"]],[5261,5261],[5260,5260]]],[1564884037482,["GJX@GJXAIOU",[[1,5304,"\n"]],[5304,5304],[5305,5305]]],[1564884039043,["GJX@GJXAIOU",[[1,5313,"\n"]],[5313,5313],[5314,5314]]],[1564884040235,["GJX@GJXAIOU",[[-1,5336,"\\"]],[5337,5337],[5336,5336]]],[1564884045731,["GJX@GJXAIOU",[[1,5407,"\n"]],[5407,5407],[5408,5408]]],[1564884047476,["GJX@GJXAIOU",[[1,5417,"\n"]],[5417,5417],[5418,5418]]],[1564884049618,["GJX@GJXAIOU",[[-1,5439,"\\"]],[5440,5440],[5439,5439]]],[1564884050618,["GJX@GJXAIOU",[[-1,5467,"\n"]],[5467,5467],[5466,5466]]],[1564884053180,["GJX@GJXAIOU",[[-1,5515,"\n"]],[5515,5515],[5514,5514]]],[1564884067282,["GJX@GJXAIOU",[[-1,5575,"\\"]],[5576,5576],[5575,5575]]],[1564884074714,["GJX@GJXAIOU",[[-1,5870,"\\"]],[5871,5871],[5870,5870]]],[1564884079579,["GJX@GJXAIOU",[[-1,6173,"\\"]],[6174,6174],[6173,6173]]],[1564884083428,["GJX@GJXAIOU",[[-1,6231,"\\"]],[6232,6232],[6231,6231]]],[1564884084267,["GJX@GJXAIOU",[[-1,6319,"\\"]],[6320,6320],[6319,6319]]],[1564884088604,["GJX@GJXAIOU",[[-1,6504,"\\"]],[6505,6505],[6504,6504]]],[1564884089493,["GJX@GJXAIOU",[[-1,6562,"\n"]],[6562,6562],[6561,6561]]],[1564884090683,["GJX@GJXAIOU",[[-1,6614,"\n"]],[6614,6614],[6613,6613]]],[1564884094773,["GJX@GJXAIOU",[[-1,6690,"\\"]],[6691,6691],[6690,6690]]],[1564884096980,["GJX@GJXAIOU",[[1,6759,"\n"]],[6759,6759],[6760,6760]]],[1564884099307,["GJX@GJXAIOU",[[-1,6792,"\\"]],[6793,6793],[6792,6792]]],[1564884101741,["GJX@GJXAIOU",[[1,6850,"\n"]],[6850,6850],[6851,6851]]],[1564884103291,["GJX@GJXAIOU",[[1,6882,"\n"]],[6882,6882],[6883,6883]]],[1564884112012,["GJX@GJXAIOU",[[-1,6934,"\\"]],[6935,6935],[6934,6934]]],[1564884117172,["GJX@GJXAIOU",[[-1,7405,"\\"]],[7406,7406],[7405,7405]]],[1564884118301,["GJX@GJXAIOU",[[1,7459,"\n"]],[7459,7459],[7460,7460]]],[1564884122387,["GJX@GJXAIOU",[[-1,7692,"\\"]],[7693,7693],[7692,7692]]],[1564884125027,["GJX@GJXAIOU",[[1,7752,"\n"]],[7752,7752],[7753,7753]]],[1564884130979,["GJX@GJXAIOU",[[-1,7787,"\\"]],[7788,7788],[7787,7787]]],[1564884133020,["GJX@GJXAIOU",[[1,7838,"\n"]],[7838,7838],[7839,7839]]]],null,"GJX@GJXAIOU"]]}