{"compress":true,"commitItems":[["f2e4e885-bc4c-4fd1-8b1a-c9fd9d5cf045",1565005713251,"# Mysql 练习题\n\n\n**我使用的Mysql版本是5.7.19。答案可能会因版本会有少许出入**。\n\n## 练习数据\n数据表\n--1.学生表\nStudent(SId,Sname,Sage,Ssex) \n\n--SId 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别\n\n--2.课程表 \nCourse(CId,Cname,TId) \n--CId --课程编号,Cname 课程名称,TId 教师编号\n\n--3.教师表 \nTeacher(TId,Tname)\n --TId 教师编号,Tname 教师姓名\n\n--4.成绩表 \nSC(SId,CId,score)\n --SId 学生编号,CId 课程编号,score 分数\n\n创建测试数据\n\n学生表 Student\n```sql\ncreate table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10));\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('09' , '张三' , '2017-12-20' , '女');\ninsert into Student values('10' , '李四' , '2017-12-25' , '女');\ninsert into Student values('11' , '李四' , '2017-12-30' , '女');\ninsert into Student values('12' , '赵六' , '2017-01-01' , '女');\ninsert into Student values('13' , '孙七' , '2018-01-01' , '女');\n```\n科目表 Course\n```sql\ncreate table Course(CId varchar(10),Cname varchar(10),TId varchar(10));\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n教师表 Teacher\n```sql\ncreate table Teacher(TId varchar(10),Tname varchar(10));\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n成绩表 SC\n```sql\ncreate table SC(SId varchar(10),CId varchar(10),score decimal(18,1));\ninsert into SC values('01' , '01' , 80);\ninsert into SC values('01' , '02' , 90);\ninsert into SC values('01' , '03' , 99);\ninsert into SC values('02' , '01' , 70);\ninsert into SC values('02' , '02' , 60);\ninsert into SC values('02' , '03' , 80);\ninsert into SC values('03' , '01' , 80);\ninsert into SC values('03' , '02' , 80);\ninsert into SC values('03' , '03' , 80);\ninsert into SC values('04' , '01' , 50);\ninsert into SC values('04' , '02' , 30);\ninsert into SC values('04' , '03' , 20);\ninsert into SC values('05' , '01' , 76);\ninsert into SC values('05' , '02' , 87);\ninsert into SC values('06' , '01' , 31);\ninsert into SC values('06' , '03' , 34);\ninsert into SC values('07' , '02' , 89);\ninsert into SC values('07' , '03' , 98);\n```\n## 练习题目\n1. 查询\" 01 \"课程比\" 02 \"课程成绩高的学生的信息及课程分数\n1.1 查询同时存在\" 01 \"课程和\" 02 \"课程的情况\n1.2 查询存在\" 01 \"课程但可能不存在\" 02 \"课程的情况(不存在时显示为 null )\n1.3 查询不存在\" 01 \"课程但存在\" 02 \"课程的情况\n2. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\n3. 查询在 SC 表存在成绩的学生信息\n4. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )\n4.1 查有成绩的学生信息\n5. 查询「李」姓老师的数量 \n6. 查询学过「张三」老师授课的同学的信息 \n7. 查询没有学全所有课程的同学的信息 \n8. 查询至少有一门课与学号为\" 01 \"的同学所学相同的同学的信息 \n9. 查询和\" 01 \"号的同学学习的课程   完全相同的其他同学的信息 \n10. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n11. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n12. 检索\" 01 \"课程分数小于 60，按分数降序排列的学生信息\n13. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n14. 查询各科成绩最高分、最低分和平均分：\n    以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n    要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列\n15. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺\n15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次\n16.  查询学生的总成绩，并进行排名，总分重复时保留名次空缺\n16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺\n17. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比\n18. 查询各科成绩前三名的记录\n19. 查询每门课程被选修的学生数 \n20. 查询出只选修两门课程的学生学号和姓名 \n21. 查询男生、女生人数\n22. 查询名字中含有「风」字的学生信息\n23. 查询同名同性学生名单，并统计同名人数\n24. 查询 1990 年出生的学生名单\n25. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列\n26. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 \n27. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数 \n28. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）\n29. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数\n30. 查询不及格的课程\n31. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名\n32. 求每门课程的学生人数 \n33. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\n34. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\n35. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n36. 查询每门功成绩最好的前两名\n37. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。\n38. 检索至少选修两门课程的学生学号 \n39. 查询选修了全部课程的学生信息\n40. 查询各学生的年龄，只按年份来算 \n41. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\n42. 查询本周过生日的学生\n43. 查询下周过生日的学生\n44. 查询本月过生日的学生\n45. 查询下月过生日的学生\n\n\n\n## 参考答案\n\n1.查询\" 01 \"课程比\" 02 \"课程成绩高的学生的信息及课程分数\n```sql\nselect *\nfrom (select SId ,score from sc where sc.CId='01')as t1 , (select SId ,score from sc where sc.CId='02') as t2\nwhere t1.SId=t2.SId\nand   t1.score>t2.score\n```\n\n1.1 查询同时存在\" 01 \"课程和\" 02 \"课程的情况\n```sql\nselect *\nfrom (select SId ,score from sc where sc.CId='01')as t1 , (select SId ,score from sc where sc.CId='02') as t2\nwhere t1.SId=t2.SId\n```\n1.2 查询存在\" 01 \"课程但可能不存在\" 02 \"课程的情况(不存在时显示为 null )\n```sql\nselect *\nfrom (select SId ,score from sc where sc.CId='01')as t1 left join (select SId ,score from sc where sc.CId='02') as t2\non t1.SId=t2.SId\n```\n1.3 查询不存在\" 01 \"课程但存在\" 02 \"课程的情况\n```sql\nselect *\nfrom sc\nwhere sc.SId not in (select SId from sc where sc.CId='01')\nand  sc.CId='02'\n```\n2. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\n```sql\nselect student.*,t1.avgscore\nfrom student inner JOIN(\nselect sc.SId ,AVG(sc.score)as avgscore\nfrom sc \nGROUP BY sc.SId\nHAVING AVG(sc.score)>=60)as t1 on student.SId=t1.SId \n```\n3. 查询在 SC 表存在成绩的学生信息\n```sql\nselect DISTINCT student.*\nfrom student ,sc\nwhere student.SId=sc.SId\n```\n\n```\nselect student.* from student,\n(select SId from sc group by sc.SId)as t1\nwhere student.SId=t1.SId;\n```\n\n4.查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为null)  \n\n```sql \nselect student.SId,student.Sname,t1.sumscore,t1.coursecount\nfrom student ,(\nselect SC.SId,sum(sc.score)as sumscore ,count(sc.CId) as coursecount\nfrom sc \nGROUP BY sc.SId) as t1\nwhere student.SId =t1.SId\n```\n```sql\nselect student.SId,student.Sname,t1.count_num,t1.score_sum from student left join\n(select sc.SId,count(sc.CId)as count_num,sum(sc.score)as score_sum from sc group by sc.SId)as t1 on student.SId=t1.SId\n```\n\n4.1 查有成绩的学生信息\n\n```sql\nselect *\nfrom student\nwhere EXISTS(select * from sc where student.SId=sc.SId)\n```\n```sql\nselect * from student \nwhere student.SId in(select sc.SId from sc);  --使用in代替exists\n```\n\n\n5. 查询「李」姓老师的数量 \n ```sql\nselect count(*)\nfrom teacher\nwhere teacher.Tname like '李%\n ```\n6. 查询学过「张三」老师授课的同学的信息 \n```sql\nselect student.*\nfrom teacher  ,course  ,student,sc\nwhere teacher.Tname='张三'\nand   teacher.TId=course.TId\nand   course.CId=sc.CId\nand   sc.SId=student.SId\n```\n```sql\n select * from student  \n where SId in  \n (select SId from sc where CId in\n  (select CId from course where TId in\n   (select TId from teacher where Tname='张三')));\n```\n\n\n7. 查询没有学全所有课程的同学的信息\n- 解法1\n```sql\nselect student.*\nfrom sc ,student\nwhere sc.SId=student.SId\nGROUP BY sc.SId\nHaving count(*)<(select count(*) from course)\n```\n```sql\nselect student.* \nfrom student left join sc \non student.SId=sc.SId \ngroup by student.SId \nhaving count(*) <(select count(*) from course);\n```\n\n但这种解法得出来的结果不包括什么课都没选的同学。**\n\n- 解法2\n```sql\nselect DISTINCT student.*\nfrom \n(select student.SId,course.CId\nfrom student,course ) as t1 LEFT JOIN (SELECT sc.SId,sc.CId from sc)as t2 on t1.SId=t2.SId and t1.CId=t2.CId,student\nwhere t2.SId is null\nand   t1.SId=student.SId\n```\n**利用笛卡尔积可以把什么课都没选的同学查询出来**\n\n8. 查询至少有一门课与学号为\" 01 \"的同学所学相同的同学的信息\n```sql \nselect DISTINCT student.*\nfrom  sc ,student\nwhere sc.CId in (select CId from sc where sc.SId='01')\nand   sc.SId=student.SId\n```\n```sql\nselect * from student \nwhere SId in \n(select SId from SC where CId in (select CId from SC where SId='01'));\n```\n\n9.查询和\" 01 \"号的同学学习的课程完全相同的其他同学的信息 \n\n```sql\nselect DISTINCT student.*\nfrom (\nselect student.SId,t.CId\nfrom student ,(select sc.CId from sc where sc.SId='01') as t) as t1 LEFT JOIN sc on t1.SId=sc.SId and t1.CId=sc.CId,student\nwhere sc.SId is null \nand   t1.SId=student.SId\n```\n\n10.查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n```sql\nselect *\nfrom student \nwhere student.SId not in \n(\nselect student.SId\nfrom student left join sc on student.SId=sc.SId \nwhere EXISTS \n(select *\nfrom teacher ,course\nwhere teacher.Tname='张三'\nand   teacher.TId=course.TId\nand \tcourse.CId=sc.CId))\n```\n```sql\nselect * from student \nwhere SId not in \n(select SId from sc where CId in(select CId from course where TId in (select TId from teacher where Tname='张三')));\n```\n\n11.查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n```sql\nselect student.SId,student.Sname,avg(sc.score)\nfrom student ,sc\nwhere student.SId=sc.SId\nand   sc.score<60\nGROUP BY sc.SId\nHAVING count(*)>=2\n```\n\n12. 检索\" 01 \"课程分数小于 60，按分数降序排列的学生信息\n```sql\nselect student.*, sc.score from student, sc\nwhere student.sid = sc.sid\nand sc.score < 60\nand cid = \"01\"\nORDER BY sc.score DESC;\n```\n```sql\n+------+--------+---------------------+------+-------+\n| SId  | Sname  | Sage                | Ssex | score |\n+------+--------+---------------------+------+-------+\n| 04   | 李云   | 1990-08-06 00:00:00 | 男   |  50.0 |\n| 06   | 吴兰   | 1992-03-01 00:00:00 | 女   |  31.0 |\n+------+--------+---------------------+------+-------+\n2 rows in set (0.00 sec)\n```\n\n13. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n```sql\nselect sc.SId,sc.CId,sc.score,t1.avgscore \nfrom  sc left join (select sc.SId,avg(sc.score) as avgscore from sc GROUP BY sc.SId) as t1 on sc.SId =t1.SId \nORDER BY t1.avgscore DESC;\n```\n或者\n\n```sql\nselect *  \nfrom sc left join (select sid,avg(score) as avgscore from sc group by sid)r \non sc.sid = r.sid\norder by avgscore desc;\n```\n\n```\n+------+------+-------+------+-----------+\n| SId  | CId  | score | sid  | avgscore  |\n+------+------+-------+------+-----------+\n| 09   | 03   | 100.0 | 09   | 100.00000 |\n| 07   | 03   |  98.0 | 07   |  93.50000 |\n| 07   | 02   |  89.0 | 07   |  93.50000 |\n| 01   | 01   |  80.0 | 01   |  89.66667 |\n| 01   | 03   |  99.0 | 01   |  89.66667 |\n| 01   | 02   |  90.0 | 01   |  89.66667 |\n| 05   | 01   |  76.0 | 05   |  81.50000 |\n| 05   | 02   |  87.0 | 05   |  81.50000 |\n| 03   | 02   |  80.0 | 03   |  80.00000 |\n| 03   | 01   |  80.0 | 03   |  80.00000 |\n| 03   | 03   |  80.0 | 03   |  80.00000 |\n| 02   | 02   |  60.0 | 02   |  70.00000 |\n| 02   | 01   |  70.0 | 02   |  70.00000 |\n| 02   | 03   |  80.0 | 02   |  70.00000 |\n| 04   | 01   |  50.0 | 04   |  33.33333 |\n| 04   | 03   |  20.0 | 04   |  33.33333 |\n| 04   | 02   |  30.0 | 04   |  33.33333 |\n| 06   | 01   |  31.0 | 06   |  32.50000 |\n| 06   | 03   |  34.0 | 06   |  32.50000 |\n+------+------+-------+------+-----------+\n19 rows in set (0.00 sec)\n```\n\n\n14. 查询各科成绩最高分、最低分和平均分：\n    以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n    要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列\n```sql\nselect sc.CId ,max(sc.score)as 最高分,min(sc.score)as 最低分,AVG(sc.score)as 平均分,count(*)as 选修人数,sum(case when sc.score>=60 then 1 else 0 end )/count(*)as 及格率,sum(case when sc.score>=70 and sc.score<80 then 1 else 0 end )/count(*)as 中等率,sum(case when sc.score>=80 and sc.score<90 and sc.score<80 then 1 else 0 end )/count(*)as 优良率,sum(case when sc.score>=90 then 1 else 0 end )/count(*)as 优秀率 \nfrom sc\nGROUP BY sc.CId\nORDER BY count(*)DESC,sc.CId asc\n```\n\n15. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺\n```sql\nselect sc.CId ,@curRank:=@curRank+1 as rank,sc.score\nfrom (select @curRank:=0) as t ,sc\nORDER BY sc.score desc\n```\n\n15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次\n```sql \nselect sc.CId , case when @fontscore=score then @curRank when @fontscore:=score then @curRank:=@curRank+1  end as rank,sc.score\nfrom (select @curRank:=0 ,@fontage:=null) as t ,sc\nORDER BY sc.score desc\n```\n\n16.  查询学生的总成绩，并进行排名，总分重复时保留名次空缺\n```sql\nselect t1.*,@currank:= @currank+1 as rank\nfrom (select sc.SId, sum(score)\nfrom sc\nGROUP BY sc.SId \nORDER BY sum(score) desc) as t1,(select @currank:=0) as t\n```\n\n16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺\n```sql\nselect t1.*, case when @fontscore=t1.sumscore then @currank  when @fontscore:=t1.sumscore  then @currank:=@currank+1  end as rank\nfrom (select sc.SId, sum(score) as sumscore\nfrom sc\nGROUP BY sc.SId \nORDER BY sum(score) desc) as t1,(select @currank:=0,@fontscore:=null) as t\n```\n\n17. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比\n```sql \nselect course.CId,course.Cname,t1.*\nfrom course LEFT JOIN (\nselect sc.CId,CONCAT(sum(case when sc.score>=85 and sc.score<=100 then 1 else 0 end )/count(*)*100,'%') as '[85-100]',\nCONCAT(sum(case when sc.score>=70 and sc.score<85 then 1 else 0 end )/count(*)*100,'%') as '[70-85)',\nCONCAT(sum(case when sc.score>=60 and sc.score<70 then 1 else 0 end )/count(*)*100,'%') as '[60-70)',\nCONCAT(sum(case when sc.score>=0 and sc.score<60 then 1 else 0 end )/count(*)*100,'%') as '[0-60)'\nfrom sc\nGROUP BY sc.CId) as t1 on course.CId=t1.CId\n```\n\n18. 查询各科成绩前三名的记录\n\n思路：前三名转化为若大于此成绩的数量少于3即为前三名。\n```sql\nselect *\nfrom sc  \nwhere  (select count(*) from sc as a where sc.CId =a.CId and  sc.score <a.score )<3\nORDER BY CId asc,sc.score desc\n```\n\n19. 查询每门课程被选修的学生数 \n```\nselect cid, count(*) from sc \ngroup by cid;\n```\n\n```\n+------+------------+\n| CId  | count(CID) |\n+------+------------+\n| 01   |          6 |\n| 02   |          6 |\n| 03   |          7 |\n+------+------------+\n3 rows in set (0.00 sec)\n```\n\n20. 查询出只选修两门课程的学生学号和姓名\n```sql\n--联合\nselect student.SId,student.Sname\nfrom sc,student\nwhere student.SId=sc.SId  \nGROUP BY sc.SId\nHAVING count(*)=2\n```\n```sql\n-- 嵌套\nselect sid,sname \nfrom student \nwhere sid in \n(select sid from sc group by sid having count(*)=2);\n```\n\n```\n+------+--------+\n| sid  | sname  |\n+------+--------+\n| 05   | 周梅   |\n| 06   | 吴兰   |\n| 07   | 郑竹   |\n+------+--------+\n3 rows in set (0.00 sec)\n```\n\n21.查询男生、女生人数\n\n```sql\nselect ssex, count(*) from student\ngroup by ssex;\n```\n```\n+------+----------+\n| ssex | count(*) |\n+------+----------+\n| 女   |        8 |\n| 男   |        4 |\n+------+----------+\n2 rows in set (0.00 sec)\n```\n\n22. 查询名字中含有「风」字的学生信息\n```sql\nselect *\nfrom student \nwhere Sname like '%风%'\n```\n\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |\n+------+--------+---------------------+------+\n1 row in set (0.00 sec)\n```\n\n23.查询同名同性学生名单，并统计同名人数\n\n```sql \nselect * from student \nwhere sname in (select sname from student group by sname having count(*)>1);\n```\n\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 10   | 李四   | 2017-12-25 00:00:00 | 女   |\n| 11   | 李四   | 2017-12-30 00:00:00 | 女   |\n+------+--------+---------------------+------+\n2 rows in set (0.00 sec)\n```\n\n```sql\nselect *,count(*)同名人数 from student  \nwhere sname in (select sname from student group by sname having count(*)>1);\n```\n\n```\n+------+--------+---------------------+------+--------------+\n| SId  | Sname  | Sage                | Ssex | 同名人数     |\n+------+--------+---------------------+------+--------------+\n| 10   | 李四   | 2017-12-25 00:00:00 | 女   |            2 |\n+------+--------+---------------------+------+--------------+\n1 row in set (0.00 sec)\n```\n\n24.查询 1990 年出生的学生名单\n\n```sql\nselect *\nfrom student\nwhere YEAR(student.Sage)=1990\n```\n\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |\n| 02   | 钱电   | 1990-12-21 00:00:00 | 男   |\n| 03   | 孙风   | 1990-05-20 00:00:00 | 男   |\n| 04   | 李云   | 1990-08-06 00:00:00 | 男   |\n+------+--------+---------------------+------+\n4 rows in set (0.00 sec)\n```\n\n25.查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列\n\n```sql\nselect sc.cid, course.cname, AVG(SC.SCORE) as 平均成绩 from sc, course\nwhere sc.cid = course.cid\ngroup by sc.cid \norder by 平均成绩 desc,cid asc;\n```\n\n26.查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 \n```sql\nselect student.SId,student.Sname,t1.avgscore\nfrom student INNER JOIN (select sc.SId ,AVG(sc.score) as avgscore from sc GROUP BY sc.SId HAVING AVG(sc.score)>85) as t1 on \nstudent.SId=t1.SId\n```\n```sql\n-- 我的解法\nselect student.sid,student.sname,avg(sc.score)as avg \nfrom sc,student \nwhere student.sid=sc.sid \ngroup by student.sid \nhaving avg>=85;\n```\n\n```\n+------+--------+-----------+\n| sid  | sname  | avg       |\n+------+--------+-----------+\n| 01   | 赵雷   |  89.66667 |\n| 07   | 郑竹   |  93.50000 |\n| 09   | 张三   | 100.00000 |\n+------+--------+-----------+\n3 rows in set (0.00 sec)\n```\n\n27. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数\n```sql\nselect student.Sname ,t1.score\nfrom student INNER JOIN  (select sc.SId,sc.score \nfrom sc,course\nwhere sc.CId=course.CId\nand   course.Cname='数学'\nand   sc.score<60)as t1 on student.SId=t1.SId \n```\n```sql\n-- 我的\nselect student.sname,sc.score \nfrom student,sc,course \nwhere course.cname='数学' \nand sc.score<60\nand course.cid=sc.cid \nand sc.sid=student.sid ;\n\n```\n\n```\n+--------+-------+\n| sname  | score |\n+--------+-------+\n| 李云   |  30.0 |\n+--------+-------+\n1 row in set (0.00 sec)\n```\n\n28. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）\n```sql\nselect student.SId,sc.CId,sc.score \nfrom Student  left join sc  \non student.SId=sc.SId \n```\n```sql\n-- 我的\nselect student.sid,sname,sc.cid,cname,score \nfrom  (student left join sc  on student.sid=sc.sid )left join course on sc.cid=course.cid;\n```\n\n```\n+------+--------+------+--------+-------+\n| sid  | sname  | cid  | cname  | score |\n+------+--------+------+--------+-------+\n| 01   | 赵雷   | 01   | 语文   |  80.0 |\n| 02   | 钱电   | 01   | 语文   |  70.0 |\n| 03   | 孙风   | 01   | 语文   |  80.0 |\n| 04   | 李云   | 01   | 语文   |  50.0 |\n| 05   | 周梅   | 01   | 语文   |  76.0 |\n| 06   | 吴兰   | 01   | 语文   |  31.0 |\n| 01   | 赵雷   | 02   | 数学   |  90.0 |\n| 02   | 钱电   | 02   | 数学   |  60.0 |\n| 03   | 孙风   | 02   | 数学   |  80.0 |\n| 04   | 李云   | 02   | 数学   |  30.0 |\n| 05   | 周梅   | 02   | 数学   |  87.0 |\n| 07   | 郑竹   | 02   | 数学   |  89.0 |\n| 01   | 赵雷   | 03   | 英语   |  99.0 |\n| 02   | 钱电   | 03   | 英语   |  80.0 |\n| 03   | 孙风   | 03   | 英语   |  80.0 |\n| 04   | 李云   | 03   | 英语   |  20.0 |\n| 06   | 吴兰   | 03   | 英语   |  34.0 |\n| 07   | 郑竹   | 03   | 英语   |  98.0 |\n| 09   | 张三   | 03   | 英语   | 100.0 |\n| 10   | 李四   | NULL | NULL   |  NULL |\n| 11   | 李四   | NULL | NULL   |  NULL |\n| 12   | 赵六   | NULL | NULL   |  NULL |\n| 13   | 孙七   | NULL | NULL   |  NULL |\n+------+--------+------+--------+-------+\n23 rows in set (0.00 sec)\n```\n\n\n29. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数\n```sql\nselect student.Sname,course.Cname,sc.score\nfrom student , sc  ,course\nwhere sc.score>=70\nand  student.SId=sc.SId\nand sc.CId=course.CId\n```\n\n```\n+--------+--------+-------+\n| sname  | cname  | score |\n+--------+--------+-------+\n| 赵雷   | 语文   |  80.0 |\n| 赵雷   | 数学   |  90.0 |\n| 赵雷   | 英语   |  99.0 |\n| 钱电   | 英语   |  80.0 |\n| 孙风   | 语文   |  80.0 |\n| 孙风   | 数学   |  80.0 |\n| 孙风   | 英语   |  80.0 |\n| 周梅   | 语文   |  76.0 |\n| 周梅   | 数学   |  87.0 |\n| 郑竹   | 数学   |  89.0 |\n| 郑竹   | 英语   |  98.0 |\n| 张三   | 英语   | 100.0 |\n+--------+--------+-------+\n12 rows in set (0.00 sec)\n```\n\n30.查询存在不及格的课程\n\n可以用group by 来取唯一，也可以用distinct\n\n```sql\nselect DISTINCT sc.CId\nfrom sc\nwhere sc.score <60\n```\n\n```sql\nselect course.cname,sc.cid ,count(*)as 不及格总数 \nfrom sc,course \nwhere sc.score<60 \nand sc.cid=course.cid \ngroup by course.cname;\n```\n\n```\n+--------+------+-----------------+\n| cname  | cid  | 不及格总数      |\n+--------+------+-----------------+\n| 数学   | 02   |               1 |\n| 英语   | 03   |               2 |\n| 语文   | 01   |               2 |\n+--------+------+-----------------+\n3 rows in set (0.00 sec)\n```\n\n31.查询课程编号为 01 且课程成绩在 70 分以上的学生的学号和姓名\n\n```sql\nselect student.sid,student.sname,sc.score \nfrom student,sc \nwhere sc.cid='01' \nand sc.score>70 \nand student.sid=sc.sid;\n```\n\n```\n+------+--------+-------+\n| sid  | sname  | score |\n+------+--------+-------+\n| 01   | 赵雷   |  80.0 |\n| 03   | 孙风   |  80.0 |\n| 05   | 周梅   |  76.0 |\n+------+--------+-------+\n3 rows in set (0.00 sec)\n```\n\n32. 求每门课程的学生人数 \n```sql\nselect cid,count(*)as 学生人数 \nfrom sc \ngroup by cid;\n```\n```\n+------+--------------+\n| cid  | 学生人数     |\n+------+--------------+\n| 01   |            6 |\n| 02   |            6 |\n| 03   |            7 |\n+------+--------------+\n3 rows in set (0.00 sec)\n```\n\n33. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\n```sql\nselect student.*,sc.score \nfrom student,sc,course,teacher \nwhere teacher.tname='张三' \nand teacher.tid=course.tid \nand course.cid=sc.cid   \nand sc.sid=student.sid  \norder by score desc \nlimit 1;\n```\n34.成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\n为了验证，先修改数据。这样张三老师教的02号课就有两个学生同时获得90的最高分了。\n\n```sql\nUPDATE sc SET score=90\nwhere sid = \"07\"\nand cid =\"02\";\n```\n\n\n\n```sql\nselect student.*, sc.score, sc.cid from student, teacher, course,sc \nwhere teacher.tid = course.tid\nand sc.sid = student.sid\nand sc.cid = course.cid\nand teacher.tname = \"张三\"\nand sc.score = (\n    select Max(sc.score) \n    from sc,student, teacher, course\n    where teacher.tid = course.tid\n    and sc.sid = student.sid\n    and sc.cid = course.cid\n    and teacher.tname = \"张三\"\n);\n```\n```\n+------+--------+---------------------+------+-------+------+\n| SId  | Sname  | Sage                | Ssex | score | cid  |\n+------+--------+---------------------+------+-------+------+\n| 01   | 赵雷   | 1990-01-01 00:00:00 | 男   |  90.0 | 02   |\n| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |  90.0 | 02   |\n+------+--------+---------------------+------+-------+------+\n2 rows in set (0.00 sec)\n```\n\n35. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩\n\n```sql\nselect *\nfrom sc as t1\nwhere exists(select * from sc as t2 where t1.SId=t2.SId and t1.CId!=t2.CId and t1.score =t2.score )\n```\n\n36.查询每门功成绩最好的前两名\n```sql\nselect *\nfrom sc as t1\nwhere (select count(*) from sc as t2 where t1.CId=t2.CId and t2.score >t1.score)<2\nORDER BY t1.CId\n```\n\n37.统计每门课程的学生选修人数（超过 5 人的课程才统计）\n```sql \nselect sc.CId as 课程编号,count(*) as 选修人数\nfrom sc \nGROUP BY sc.CId\nHAVING count(*)>5\n```\n\n38.检索至少选修两门课程的学生学号 \n```sql\nselect DISTINCT t1.SId\nfrom sc as t1 \nwhere (select count(* )from sc where t1.SId=sc.SId)>=3\n```\n\n\n39. 查询选修了全部课程的学生信息\n```sql\nselect student.*\nfrom sc ,student \nwhere sc.SId=student.SId\nGROUP BY sc.SId\nHAVING count(*) = (select DISTINCT count(*) from course )\n```\n\n40.查询各学生的年龄，只按年份来算 \n```sql\nselect student.SId as 学生编号,student.Sname  as  学生姓名,TIMESTAMPDIFF(YEAR,student.Sage,CURDATE()) as 学生年龄\nfrom student\n```\n\n41. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\n```Sql\nselect student.SId as 学生编号,student.Sname  as  学生姓名,TIMESTAMPDIFF(YEAR,student.Sage,CURDATE()) as 学生年龄\nfrom student\n```\n\n42.查询本周过生日的学生\n```sql\nselect * from student \nwhere weekofyear(sage)=weekofyear(curdate());\n```\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 04   | 李云   | 1990-08-06 00:00:00 | 男   |\n+------+--------+---------------------+------+\n1 row in set (0.01 sec)\n```\n\n43. 查询下周过生日的学生\n```sql\nselect * from student \nwhere weekofyear(sage)=weekofyear(curdate())+1;\n```\n\n44.查询本月过生日的学生（目前是8月）\n\n```sql\nselect * from student \nwhere month(sage)=month(curdate());\n```\n\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 04   | 李云   | 1990-08-06 00:00:00 | 男   |\n+------+--------+---------------------+------+\n1 row in set (0.00 sec)\n```\n\n45.查询上个月过生日的学生（目前是8月）\n\n```sql \nselect * from student \nwhere month(sage)=month(curdate())-1;\n```\n\n```\n+------+--------+---------------------+------+\n| SId  | Sname  | Sage                | Ssex |\n+------+--------+---------------------+------+\n| 07   | 郑竹   | 1989-07-01 00:00:00 | 女   |\n+------+--------+---------------------+------+\n1 row in set (0.00 sec)\n```\n\n\n",[[1565005687042,["GJX@GJXAIOU",[[1,7166,"\n"]],[7165,7165],[7166,7166]]]],null,"GJX@GJXAIOU"]]}