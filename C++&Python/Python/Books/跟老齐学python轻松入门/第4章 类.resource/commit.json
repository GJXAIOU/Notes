{"compress":true,"commitItems":[["16178dcb-1c69-4bfd-8062-65a861bf9eea",1548159877706,"",[[1548159829606,["gjx16@GJXAIOU",[[1,0,"# 第4章 类\n\n\n\n"]],[0,0],[10,10]]],[1548159844001,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1548159846313,["gjx16@GJXAIOU",[[1,0,"`"]],[0,0],[1,1]]],[1548159846578,["gjx16@GJXAIOU",[[1,0,"`"]],[1,1],[2,2]]],[1548159846987,["gjx16@GJXAIOU",[[1,2,"`"]],[2,2],[3,3]]],[1548159847010,["gjx16@GJXAIOU",[[1,3,"language\n```\n"]],[3,3],[3,11]]],[1548159849404,["gjx16@GJXAIOU",[[-1,0,"``language`"]],[3,11],[0,0]]],[1548159852461,["gjx16@GJXAIOU",[[-1,1,"```"]],[4,4],[1,1]]],[1548159852868,["gjx16@GJXAIOU",[[-1,2,"\n"]],[1,1],[0,0]]],[1548159853970,["gjx16@GJXAIOU",[[1,0,"'"]],[0,0],[1,1]]],[1548159853992,["gjx16@GJXAIOU",[[-1,0,"'"],[1,1,"‘"]],[1,1],[1,1]]],[1548159854154,["gjx16@GJXAIOU",[[1,1,"'"]],[1,1],[2,2]]],[1548159854177,["gjx16@GJXAIOU",[[-1,1,"'"],[1,2,"’"]],[2,2],[2,2]]],[1548159854594,["gjx16@GJXAIOU",[[1,2,"'"]],[2,2],[3,3]]],[1548159854617,["gjx16@GJXAIOU",[[-1,2,"'"],[1,3,"‘"]],[3,3],[3,3]]],[1548159856626,["gjx16@GJXAIOU",[[-1,0,"‘’‘"]],[3,3],[0,0]]],[1548159857995,["gjx16@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1548159858165,["gjx16@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1548159858346,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1548159858368,["gjx16@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1548159871265,["gjx16@GJXAIOU",[[1,4,"date:2019-1-22"]],[4,4],[18,18]]],[1548159878497,["gjx16@GJXAIOU",[[1,36,"\n"]],[33,33],[34,34]]],[1548159878619,["gjx16@GJXAIOU",[[1,37,"\n"]],[34,34],[35,35]]],[1548159948475,["gjx16@GJXAIOU",[[1,35,"++++"]],[35,35],[37,37]]],[1548159950981,["gjx16@GJXAIOU",[[1,37,"pyu"]],[37,37],[40,40]]],[1548159952448,["gjx16@GJXAIOU",[[-1,37,"pyu"]],[40,40],[37,37]]],[1548159954434,["gjx16@GJXAIOU",[[1,37,"python"]],[37,37],[43,43]]],[1548159956411,["gjx16@GJXAIOU",[[-1,37,"python"]],[43,43],[37,37]]],[1548159959367,["gjx16@GJXAIOU",[[-1,35,"++++"]],[39,39],[35,35]]],[1548159961529,["gjx16@GJXAIOU",[[1,35,"===="]],[35,35],[37,37]]],[1548159966491,["gjx16@GJXAIOU",[[1,37,"pythonzhong "]],[37,37],[49,49]]],[1548159967703,["gjx16@GJXAIOU",[[-1,43,"zhong "]],[49,49],[43,43]]],[1548159969227,["gjx16@GJXAIOU",[[1,43,"zhong"]],[43,43],[48,48]]],[1548159970657,["gjx16@GJXAIOU",[[-1,43,"zhong"]],[48,48],[43,43]]],[1548159972789,["gjx16@GJXAIOU",[[1,43,"zhong"]],[43,43],[48,48]]],[1548159974055,["gjx16@GJXAIOU",[[-1,43,"zhong"]],[48,48],[43,43]]],[1548159996541,["gjx16@GJXAIOU",[[1,43,"中一切皆对象，包括字符串、"]],[43,43],[56,56]]],[1548160004964,["gjx16@GJXAIOU",[[1,56,"函数、模块、类、、、、"]],[56,56],[67,67]]],[1548160015233,["gjx16@GJXAIOU",[[-1,34,"\n"]],[34,34],[33,33]]],[1548160914513,["gjx16@GJXAIOU",[[-1,70,"\n"],[1,71,"#"]],[70,70],[71,71]]],[1548160920914,["gjx16@GJXAIOU",[[1,71,"# 4。1"]],[71,71],[76,76]]],[1548160921936,["gjx16@GJXAIOU",[[-1,74,"。1"]],[76,76],[74,74]]],[1548160922744,["gjx16@GJXAIOU",[[1,74,"。"]],[74,74],[75,75]]],[1548160923522,["gjx16@GJXAIOU",[[-1,74,"。"]],[75,75],[74,74]]],[1548160924772,["gjx16@GJXAIOU",[[1,74,"。1"]],[74,74],[76,76]]],[1548160925775,["gjx16@GJXAIOU",[[-1,73,"4。1"]],[76,76],[73,73]]],[1548160930100,["gjx16@GJXAIOU",[[1,73,"3。"]],[73,73],[75,75]]],[1548160931099,["gjx16@GJXAIOU",[[-1,74,"。"]],[75,75],[74,74]]],[1548160932182,["gjx16@GJXAIOU",[[1,74,"。"]],[74,74],[75,75]]],[1548160933383,["gjx16@GJXAIOU",[[-1,74,"。"]],[75,75],[74,74]]],[1548160949935,["gjx16@GJXAIOU",[[1,74,".1基本啊亲"]],[74,74],[80,80]]],[1548160950726,["gjx16@GJXAIOU",[[-1,78,"啊亲"]],[80,80],[78,78]]],[1548160952713,["gjx16@GJXAIOU",[[1,78,"概念"]],[78,78],[80,80]]],[1548160953105,["gjx16@GJXAIOU",[[1,80,"\n\n"]],[80,80],[81,81]]],[1548160956117,["gjx16@GJXAIOU",[[-1,81,"\n"],[1,82,"-"]],[81,81],[82,82]]],[1548160956885,["gjx16@GJXAIOU",[[1,82," "]],[82,82],[83,83]]],[1548160960522,["gjx16@GJXAIOU",[[1,83,"对象:d"]],[83,83],[87,87]]],[1548160960999,["gjx16@GJXAIOU",[[-1,86,"d"]],[87,87],[86,86]]],[1548160988951,["gjx16@GJXAIOU",[[1,86,"包括状态、行为、和唯一的标识"]],[86,86],[100,100]]],[1548161050905,["gjx16@GJXAIOU",[[1,100,"\n- 状态：包括类已有的属性（）"]],[100,100],[116,116]]],[1548161062929,["gjx16@GJXAIOU",[[1,115,"类中已经定义好的"]],[115,115],[123,123]]],[1548161068038,["gjx16@GJXAIOU",[[1,124,"。"]],[124,124],[125,125]]],[1548161068839,["gjx16@GJXAIOU",[[-1,124,"。"]],[125,125],[124,124]]],[1548161076326,["gjx16@GJXAIOU",[[1,124,"，和随想"]],[124,124],[128,128]]],[1548161077808,["gjx16@GJXAIOU",[[1,128,"具有"]],[128,128],[130,130]]],[1548161079344,["gjx16@GJXAIOU",[[-1,126,"随想具有"]],[130,130],[126,126]]],[1548161092087,["gjx16@GJXAIOU",[[1,126,"对象具有的当前属性值（）"]],[126,126],[138,138]]],[1548161100606,["gjx16@GJXAIOU",[[1,137,"一般为动态的"]],[137,137],[143,143]]],[1548161136575,["gjx16@GJXAIOU",[[1,144,"\n- 行为："]],[144,144],[150,150]]],[1548161149943,["gjx16@GJXAIOU",[[1,150,"表现为对象自身转台"]],[150,150],[159,159]]],[1548161150839,["gjx16@GJXAIOU",[[-1,157,"转台"]],[159,159],[157,157]]],[1548161193932,["gjx16@GJXAIOU",[[1,157,"状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，"]],[157,157],[188,188]]],[1548161202937,["gjx16@GJXAIOU",[[1,188,"本质上为在"]],[188,188],[193,193]]],[1548161203602,["gjx16@GJXAIOU",[[-1,192,"在"]],[193,193],[192,192]]],[1548161223488,["gjx16@GJXAIOU",[[1,192,"内存中所创建的对象的地址"]],[192,192],[204,204]]],[1548161264572,["gjx16@GJXAIOU",[[1,204,"\n- "]],[204,204],[207,207]]],[1548161267922,["gjx16@GJXAIOU",[[-1,206," "]],[207,207],[206,206]]],[1548161268322,["gjx16@GJXAIOU",[[-1,205,"-"],[1,206,"\n"]],[206,206],[205,205]]],[1548161271138,["gjx16@GJXAIOU",[[-1,205,"\n"],[1,206,"对象"]],[205,205],[207,207]]],[1548161281158,["gjx16@GJXAIOU",[[1,207,"：应该具有：属性和方法"]],[207,207],[218,218]]],[1548161285431,["gjx16@GJXAIOU",[[1,215,"（）"]],[215,215],[217,217]]],[1548161294114,["gjx16@GJXAIOU",[[1,216,"状态：是什么"]],[216,216],[222,222]]],[1548161298103,["gjx16@GJXAIOU",[[1,226,"（）"]],[226,226],[228,228]]],[1548161308623,["gjx16@GJXAIOU",[[1,227,"行为：能做什么"]],[227,227],[234,234]]],[1548161317559,["gjx16@GJXAIOU",[[1,235,"。"]],[235,235],[236,236]]],[1548161318408,["gjx16@GJXAIOU",[[-1,235,"。"]],[236,236],[235,235]]],[1548161336916,["gjx16@GJXAIOU",[[1,235,"，标识一般在内存中自动完成。"]],[235,235],[249,249]]],[1548161577671,["gjx16@GJXAIOU",[[1,249,"\n\n"]],[249,249],[250,250]]],[1548161718902,["gjx16@GJXAIOU",[[-1,73,"3"]],[74,74],[73,73]]],[1548161719289,["gjx16@GJXAIOU",[[1,73,"4"]],[73,73],[74,74]]],[1548161722759,["gjx16@GJXAIOU",[[1,251,"\n"]],[250,250],[251,251]]],[1548161722888,["gjx16@GJXAIOU",[[1,252,"\n"]],[251,251],[252,252]]],[1548161724647,["gjx16@GJXAIOU",[[-1,252,"\n"],[1,253,"￥"]],[252,252],[253,253]]],[1548161725959,["gjx16@GJXAIOU",[[-1,252,"￥"],[1,253,"\n"]],[253,253],[252,252]]],[1548161727624,["gjx16@GJXAIOU",[[-1,252,"\n"],[1,253,"#"]],[252,252],[253,253]]],[1548161734743,["gjx16@GJXAIOU",[[1,253,"# 4.2编写类"]],[253,253],[261,261]]],[1548161735340,["gjx16@GJXAIOU",[[1,261,"\n\n"]],[261,261],[262,262]]],[1548161739265,["gjx16@GJXAIOU",[[1,263,"\n"]],[262,262],[263,263]]],[1548161740434,["gjx16@GJXAIOU",[[-1,263,"\n"],[1,264,"#"]],[263,263],[264,264]]],[1548161752749,["gjx16@GJXAIOU",[[1,264,"## 4.2.1创建类"]],[264,264],[275,275]]],[1548161753335,["gjx16@GJXAIOU",[[1,275,"\n\n"]],[275,275],[276,276]]],[1548161755543,["gjx16@GJXAIOU",[[-1,276,"\n"],[1,277,"~"]],[276,276],[277,277]]],[1548161755933,["gjx16@GJXAIOU",[[1,277,"··"]],[277,277],[279,279]]],[1548161756510,["gjx16@GJXAIOU",[[-1,277,"··"]],[279,279],[277,277]]],[1548161756639,["gjx16@GJXAIOU",[[-1,276,"~"],[1,277,"\n"]],[277,277],[276,276]]],[1548161757602,["gjx16@GJXAIOU",[[-1,276,"\n"],[1,277,"`"]],[276,276],[277,277]]],[1548161757999,["gjx16@GJXAIOU",[[1,277,"``"]],[277,277],[279,279]]],[1548161758024,["gjx16@GJXAIOU",[[1,279,"language\n```\n"]],[279,279],[279,287]]],[1548161759057,["gjx16@GJXAIOU",[[-1,279,"language"],[1,287,"p"]],[279,287],[280,280]]],[1548161759776,["gjx16@GJXAIOU",[[1,280,"ython"]],[280,280],[285,285]]],[1548161760111,["gjx16@GJXAIOU",[[1,286,"\n"]],[285,285],[286,286]]],[1548161920134,["gjx16@GJXAIOU",[[1,276,"\n"]],[275,275],[276,276]]],[1548161921446,["gjx16@GJXAIOU",[[1,277,"\n"]],[276,276],[277,277]]],[1548161924522,["gjx16@GJXAIOU",[[1,277,"- pthon"]],[277,277],[284,284]]],[1548161926009,["gjx16@GJXAIOU",[[-1,280,"thon"]],[284,284],[280,280]]],[1548161941736,["gjx16@GJXAIOU",[[1,280,"ython3中所有的类均为obj3"]],[280,280],[297,297]]],[1548161943226,["gjx16@GJXAIOU",[[-1,296,"3"]],[297,297],[296,296]]],[1548161947017,["gjx16@GJXAIOU",[[1,296,"ect类的额"]],[296,296],[302,302]]],[1548161947967,["gjx16@GJXAIOU",[[-1,301,"额"]],[302,302],[301,301]]],[1548161949698,["gjx16@GJXAIOU",[[1,301,"子类"]],[301,301],[303,303]]],[1548161955311,["gjx16@GJXAIOU",[[1,304,"- \n"]],[303,303],[306,306]]],[1548161973958,["gjx16@GJXAIOU",[[1,306,"类的名称开头首字母大写"]],[306,306],[317,317]]]],null,"gjx16@GJXAIOU"],["189255fd-fb65-4595-b5e1-90ee92e61b46",1548743705852,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\n```\n",[[1548743651259,["gjx16@GJXAIOU",[[1,328,"\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)"]],[328,328],[955,955]]],[1548743672365,["gjx16@GJXAIOU",[[1,960,"\n"]],[959,959],[960,960]]],[1548743674248,["gjx16@GJXAIOU",[[-1,960,"\n"],[1,961,"z"]],[960,960],[961,961]]],[1548743674551,["gjx16@GJXAIOU",[[1,961,"hu"]],[961,961],[963,963]]],[1548743675270,["gjx16@GJXAIOU",[[-1,961,"hu"]],[963,963],[961,961]]],[1548743675376,["gjx16@GJXAIOU",[[-1,960,"z"],[1,961,"\n"]],[961,961],[960,960]]],[1548743677284,["gjx16@GJXAIOU",[[-1,960,"\n"],[1,961,"注"]],[960,960],[961,961]]],[1548743685061,["gjx16@GJXAIOU",[[1,961,"：girl解释"]],[961,961],[968,968]]],[1548743686718,["gjx16@GJXAIOU",[[-1,966,"解释"]],[968,968],[966,966]]],[1548743700721,["gjx16@GJXAIOU",[[1,966,"就是一个实例（）girl"]],[966,966],[978,978]]],[1548743704333,["gjx16@GJXAIOU",[[-1,972,"（）girl"]],[978,978],[972,972]]],[1548743721359,["gjx16@GJXAIOU",[[1,973,"girl这个变量应用了"]],[973,973],[984,984]]],[1548743723205,["gjx16@GJXAIOU",[[-1,981,"应用了"]],[984,984],[981,981]]],[1548743736164,["gjx16@GJXAIOU",[[1,981,"引用了Person（"]],[981,981],[991,991]]],[1548743736201,["gjx16@GJXAIOU",[[1,992,"）"]],[991,991],[992,992]]],[1548743741039,["gjx16@GJXAIOU",[[1,991,"“"]],[991,991],[992,992]]],[1548743742124,["gjx16@GJXAIOU",[[-1,991,"“"]],[992,992],[991,991]]],[1548743742678,["gjx16@GJXAIOU",[[1,991,"‘’"]],[991,991],[993,993]]],[1548743746928,["gjx16@GJXAIOU",[[1,992,"zhangsan"]],[992,992],[1000,1000]]],[1548743754132,["gjx16@GJXAIOU",[[1,1002,"shi"]],[1002,1002],[1005,1005]]],[1548743754832,["gjx16@GJXAIOU",[[-1,1002,"shi"]],[1005,1005],[1002,1002]]],[1548743757691,["gjx16@GJXAIOU",[[1,1002,"实例对象"]],[1002,1002],[1006,1006]]],[1548743761346,["gjx16@GJXAIOU",[[1,1007,"，"]],[1007,1007],[1008,1008]]],[1548743824698,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"]],[972,972],[1007,1007]]],[1548743824698,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"]],[1007,1007],[972,972]]],[1548743770436,["gjx16@GJXAIOU",[[1,1008,"它有属性和方法"]],[1008,1008],[1015,1015]]],[1548743783553,["gjx16@GJXAIOU",[[1,1015,"\n\n"]],[1015,1015],[1016,1016]]],[1548743791812,["gjx16@GJXAIOU",[[-1,1016,"\n"],[1,1017,"self"]],[1016,1016],[1020,1020]]],[1548743809770,["gjx16@GJXAIOU",[[1,1020,"本质上就是实例对象本身"]],[1020,1020],[1031,1031]]],[1548743884696,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548743884696,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548743843456,["gjx16@GJXAIOU",[[1,1031,"\n\n"]],[1031,1031],[1032,1032]]],[1548743843616,["gjx16@GJXAIOU",[[1,1033,"\n"]],[1032,1032],[1033,1033]]],[1548743846911,["gjx16@GJXAIOU",[[-1,1033,"\n"],[1,1034,"#"]],[1033,1033],[1034,1034]]],[1548743849604,["gjx16@GJXAIOU",[[1,1034,"# 1.4"]],[1034,1034],[1039,1039]]],[1548743850484,["gjx16@GJXAIOU",[[-1,1036,"1.4"]],[1039,1039],[1036,1036]]],[1548743856543,["gjx16@GJXAIOU",[[1,1036,"4.3 属性和数据"]],[1036,1036],[1045,1045]]],[1548743859966,["gjx16@GJXAIOU",[[1,1045,"\n\n"]],[1045,1045],[1046,1046]]],[1548743860520,["gjx16@GJXAIOU",[[1,1047,"\n"]],[1046,1046],[1047,1047]]],[1548743862086,["gjx16@GJXAIOU",[[-1,1047,"\n"],[1,1048,"#"]],[1047,1047],[1048,1048]]],[1548743869698,["gjx16@GJXAIOU",[[1,1048,"## 4.3.1 类属性"]],[1048,1048],[1060,1060]]],[1548743870395,["gjx16@GJXAIOU",[[1,1060,"\n\n"]],[1060,1060],[1061,1061]]],[1548743882080,["gjx16@GJXAIOU",[[-1,1061,"\n"],[1,1062,"·"]],[1061,1061],[1062,1062]]],[1548743882542,["gjx16@GJXAIOU",[[1,1062,"··"]],[1062,1062],[1064,1064]]],[1548743883493,["gjx16@GJXAIOU",[[-1,1062,"··"]],[1064,1064],[1062,1062]]],[1548743883787,["gjx16@GJXAIOU",[[-1,1061,"·"],[1,1062,"\n"]],[1062,1062],[1061,1061]]],[1548743884600,["gjx16@GJXAIOU",[[-1,1061,"\n"],[1,1062,"`"]],[1061,1061],[1062,1062]]],[1548743944709,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548743944709,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548743884972,["gjx16@GJXAIOU",[[1,1062,"``"]],[1062,1062],[1064,1064]]],[1548743885005,["gjx16@GJXAIOU",[[1,1064,"language\n```\n"]],[1064,1064],[1064,1072]]],[1548743886258,["gjx16@GJXAIOU",[[-1,1064,"language"],[1,1072,"o"]],[1064,1072],[1065,1065]]],[1548743886849,["gjx16@GJXAIOU",[[1,1065,"yto"]],[1065,1065],[1068,1068]]],[1548743887891,["gjx16@GJXAIOU",[[-1,1064,"oyto"]],[1068,1068],[1064,1064]]],[1548743890180,["gjx16@GJXAIOU",[[1,1064,"python"]],[1064,1064],[1070,1070]]],[1548743890984,["gjx16@GJXAIOU",[[1,1071,"\n"]],[1070,1070],[1071,1071]]],[1548743933447,["gjx16@GJXAIOU",[[1,1071,"cls"]],[1071,1071],[1074,1074]]],[1548743934375,["gjx16@GJXAIOU",[[-1,1073,"s"]],[1074,1074],[1073,1073]]],[1548743939902,["gjx16@GJXAIOU",[[1,1073,"ass A:"]],[1073,1073],[1079,1079]]],[1548743940393,["gjx16@GJXAIOU",[[1,1080,"\n"]],[1079,1079],[1080,1080]]],[1548743943970,["gjx16@GJXAIOU",[[1,1080,"    "]],[1080,1080],[1084,1084]]],[1548744004723,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744004723,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548743948410,["gjx16@GJXAIOU",[[1,1084,"x = 5"]],[1084,1084],[1089,1089]]],[1548743957506,["gjx16@GJXAIOU",[[1,1094,"\n"]],[1093,1093],[1094,1094]]],[1548743958851,["gjx16@GJXAIOU",[[-1,1094,"\n"],[1,1095,"x"]],[1094,1094],[1095,1095]]],[1548743960006,["gjx16@GJXAIOU",[[1,1095,"we"]],[1095,1095],[1097,1097]]],[1548743960570,["gjx16@GJXAIOU",[[-1,1095,"we"]],[1097,1097],[1095,1095]]],[1548743981446,["gjx16@GJXAIOU",[[1,1095,"为类中的一个变量也为属性"]],[1095,1095],[1107,1107]]],[1548744484734,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744484734,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744453061,["gjx16@GJXAIOU",[[1,1071,"''' 4.3 类属性 ''' "],[1,1089,"\n  z = 8 # 可以直接在类中添加属性 print(A.x)\nA.y = 9 # 也可以在类的外部添加属性 print(dir(A)) #查看类的属性，里面包含x，y，z   del A.x  #这样可以删除类A中的X属性"]],[1071,1089],[1219,1219]]],[1548744459683,["gjx16@GJXAIOU",[[-1,1071,"''' 4.3 类属性 ''' "],[-1,1105,"\n  z = 8 # 可以直接在类中添加属性 print(A.x)\nA.y = 9 # 也可以在类的外部添加属性 print(dir(A)) #查看类的属性，里面包含x，y，z   del A.x  #这样可以删除类A中的X属性"]],[1219,1219],[1071,1089]]],[1548744464475,["gjx16@GJXAIOU",[[1,1071,"'''\n4.3 类属性\n'''\n"],[1,1089,"\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性"]],[1071,1089],[1223,1223]]],[1548744480048,["gjx16@GJXAIOU",[[1,1228,"- "]],[1228,1228],[1230,1230]]],[1548744483159,["gjx16@GJXAIOU",[[1,1243,"\n- "]],[1243,1243],[1246,1246]]],[1548744544745,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744544749,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744485274,["gjx16@GJXAIOU",[[1,1246,"基类"]],[1246,1246],[1248,1248]]],[1548744486191,["gjx16@GJXAIOU",[[-1,1246,"基类"]],[1248,1248],[1246,1246]]],[1548744498006,["gjx16@GJXAIOU",[[1,1246,"几类特殊的属性的含义：\n- "]],[1246,1246],[1260,1260]]],[1548744499096,["gjx16@GJXAIOU",[[1,1258,"  "]],[1260,1260],[1262,1262]]],[1548744506710,["gjx16@GJXAIOU",[[1,1262,"A.name"]],[1262,1262],[1268,1268]]],[1548744510378,["gjx16@GJXAIOU",[[-1,1264,"name"]],[1268,1268],[1264,1264]]],[1548744512739,["gjx16@GJXAIOU",[[1,1264,"————"]],[1264,1264],[1268,1268]]],[1548744514459,["gjx16@GJXAIOU",[[-1,1264,"————"]],[1268,1268],[1264,1264]]],[1548744515508,["gjx16@GJXAIOU",[[1,1264,"___"]],[1264,1264],[1266,1266]]],[1548744517282,["gjx16@GJXAIOU",[[1,1266,"name"]],[1266,1266],[1270,1270]]],[1548744530219,["gjx16@GJXAIOU",[[1,1271,"_  :yi"]],[1270,1270],[1277,1277]]],[1548744531472,["gjx16@GJXAIOU",[[-1,1275,"yi"]],[1277,1277],[1275,1275]]],[1548744535456,["gjx16@GJXAIOU",[[1,1275,"义字符串"]],[1275,1275],[1279,1279]]],[1548744536608,["gjx16@GJXAIOU",[[-1,1275,"义字符串"]],[1279,1279],[1275,1275]]],[1548744538875,["gjx16@GJXAIOU",[[1,1275,"以"]],[1275,1275],[1276,1276]]],[1548744604748,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744604748,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744548950,["gjx16@GJXAIOU",[[1,1276,"字符串的形式范围"]],[1276,1276],[1284,1284]]],[1548744549751,["gjx16@GJXAIOU",[[-1,1282,"范围"]],[1284,1284],[1282,1282]]],[1548744563568,["gjx16@GJXAIOU",[[1,1282,"返回类的名字\n  - A.___"]],[1282,1282],[1297,1297]]],[1548744567476,["gjx16@GJXAIOU",[[1,1297,"doc"]],[1297,1297],[1300,1300]]],[1548744590131,["gjx16@GJXAIOU",[[1,1301,"_: 显示类的文档\n  - A.___"]],[1300,1300],[1319,1319]]],[1548744593605,["gjx16@GJXAIOU",[[1,1319,"base"]],[1319,1319],[1323,1323]]],[1548744602084,["gjx16@GJXAIOU",[[1,1324,"_:lei"]],[1323,1323],[1329,1329]]],[1548744602864,["gjx16@GJXAIOU",[[-1,1326,"lei"]],[1329,1329],[1326,1326]]],[1548744664766,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744664766,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744607258,["gjx16@GJXAIOU",[[1,1326,"类A中"]],[1326,1326],[1329,1329]]],[1548744608672,["gjx16@GJXAIOU",[[-1,1328,"中"]],[1329,1329],[1328,1328]]],[1548744643224,["gjx16@GJXAIOU",[[1,1328,"的所有父类，默认没有其他继承就是显示object类\n  - A.___"]],[1328,1328],[1362,1362]]],[1548744647966,["gjx16@GJXAIOU",[[1,1362,"dict"]],[1362,1362],[1366,1366]]],[1548744655959,["gjx16@GJXAIOU",[[1,1367,"_:yi"]],[1366,1366],[1371,1371]]],[1548744656736,["gjx16@GJXAIOU",[[-1,1369,"yi"]],[1371,1371],[1369,1369]]],[1548744663141,["gjx16@GJXAIOU",[[1,1369,"以"]],[1369,1369],[1370,1370]]],[1548744724752,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744724752,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744667595,["gjx16@GJXAIOU",[[1,1370,"字典的实行"]],[1370,1370],[1375,1375]]],[1548744668394,["gjx16@GJXAIOU",[[-1,1373,"实行"]],[1375,1375],[1373,1373]]],[1548744686824,["gjx16@GJXAIOU",[[1,1373,"形式显示类的所有属性\n  - A.___"]],[1373,1373],[1392,1392]]],[1548744691193,["gjx16@GJXAIOU",[[1,1392,"mou"]],[1392,1392],[1395,1395]]],[1548744694788,["gjx16@GJXAIOU",[[-1,1394,"u"]],[1395,1395],[1394,1394]]],[1548744697067,["gjx16@GJXAIOU",[[1,1394,"dule"]],[1394,1394],[1398,1398]]],[1548744706541,["gjx16@GJXAIOU",[[1,1399,"_:lei"]],[1398,1398],[1404,1404]]],[1548744707693,["gjx16@GJXAIOU",[[-1,1401,"lei"]],[1404,1404],[1401,1401]]],[1548744715352,["gjx16@GJXAIOU",[[1,1401,"类所在的模块"]],[1401,1401],[1407,1407]]],[1548744784762,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744784762,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744735206,["gjx16@GJXAIOU",[[1,1407,"\n  - "]],[1407,1407],[1412,1412]]],[1548744739350,["gjx16@GJXAIOU",[[1,1410,"  "]],[1412,1412],[1414,1414]]],[1548744751276,["gjx16@GJXAIOU",[[1,1414,"例如：Person。"]],[1414,1414],[1424,1424]]],[1548744752302,["gjx16@GJXAIOU",[[-1,1423,"。"]],[1424,1424],[1423,1423]]],[1548744754221,["gjx16@GJXAIOU",[[1,1423,".___"]],[1423,1423],[1426,1426]]],[1548744757661,["gjx16@GJXAIOU",[[1,1426,"module"]],[1426,1426],[1432,1432]]],[1548744771146,["gjx16@GJXAIOU",[[1,1433,"_ 显示结果为main，"]],[1432,1432],[1445,1445]]],[1548744773959,["gjx16@GJXAIOU",[[-1,1440,"main，"]],[1445,1445],[1440,1440]]],[1548744775233,["gjx16@GJXAIOU",[[1,1440,"___"]],[1440,1440],[1442,1442]]],[1548744776582,["gjx16@GJXAIOU",[[1,1442,"main"]],[1442,1442],[1446,1446]]],[1548744780576,["gjx16@GJXAIOU",[[1,1447,"_,ji"]],[1446,1446],[1451,1451]]],[1548744781407,["gjx16@GJXAIOU",[[-1,1449,"ji"]],[1451,1451],[1449,1449]]],[1548744782431,["gjx16@GJXAIOU",[[1,1449,"即"]],[1449,1449],[1450,1450]]],[1548744844762,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548744844762,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548744786671,["gjx16@GJXAIOU",[[1,1450,"pei"]],[1450,1450],[1453,1453]]],[1548744788100,["gjx16@GJXAIOU",[[-1,1450,"pei"]],[1453,1453],[1450,1450]]],[1548744798882,["gjx16@GJXAIOU",[[1,1450,"类Person的全称为：___"]],[1450,1450],[1464,1464]]],[1548744800400,["gjx16@GJXAIOU",[[1,1464,"main"]],[1464,1464],[1468,1468]]],[1548744813047,["gjx16@GJXAIOU",[[1,1469,"_.Person\n    - "]],[1468,1468],[1484,1484]]],[1548744813467,["gjx16@GJXAIOU",[[-1,1478,"    - "],[1,1484,"\n\n"]],[1484,1484],[1479,1479]]],[1548746704958,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548746704958,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548746682081,["gjx16@GJXAIOU",[[1,1479,"'''\n4.3 实例\n'''\n\n'''\n1.实例属性\n'''\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n    "]],[1479,1479],[1718,1718]]],[1548746686818,["gjx16@GJXAIOU",[[-1,1490,"'''"]],[1493,1493],[1490,1490]]],[1548746693008,["gjx16@GJXAIOU",[[-1,1479,"'''"]],[1482,1482],[1479,1479]]],[1548746696049,["gjx16@GJXAIOU",[[-1,1480,"4.3 实例"]],[1480,1486],[1480,1480]]],[1548746700897,["gjx16@GJXAIOU",[[1,1487,"4.3."]],[1487,1487],[1491,1491]]],[1548746764952,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548746764952,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548746707406,["gjx16@GJXAIOU",[[-1,1483,"'''"]],[1486,1486],[1483,1483]]],[1548746709379,["gjx16@GJXAIOU",[[-1,1495,"'''"]],[1498,1498],[1495,1495]]],[1548746721084,["gjx16@GJXAIOU",[[-1,1483,"\n"]],[1483,1483],[1482,1482]]],[1548746721344,["gjx16@GJXAIOU",[[-1,1482,"\n"]],[1482,1482],[1481,1481]]],[1548746721851,["gjx16@GJXAIOU",[[-1,1481,"\n"]],[1481,1481],[1480,1480]]],[1548746726465,["gjx16@GJXAIOU",[[1,1481,"### "]],[1481,1481],[1485,1485]]],[1548746730492,["gjx16@GJXAIOU",[[1,1496,"'"]],[1496,1496],[1497,1497]]],[1548746730532,["gjx16@GJXAIOU",[[-1,1496,"'"],[1,1497,"‘"]],[1497,1497],[1497,1497]]],[1548746734006,["gjx16@GJXAIOU",[[-1,1496,"‘"]],[1497,1497],[1496,1496]]],[1548746735792,["gjx16@GJXAIOU",[[1,1496,"```"]],[1496,1496],[1499,1499]]],[1548746735833,["gjx16@GJXAIOU",[[1,1499,"language\n```\n"]],[1499,1499],[1499,1507]]],[1548746737664,["gjx16@GJXAIOU",[[-1,1499,"language"],[1,1507,"p"]],[1499,1507],[1500,1500]]],[1548746738653,["gjx16@GJXAIOU",[[1,1500,"ython"]],[1500,1500],[1505,1505]]],[1548746739602,["gjx16@GJXAIOU",[[1,1506,"\n"]],[1505,1505],[1506,1506]]],[1548746746385,["gjx16@GJXAIOU",[[-1,1512,"class Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系"]],[1512,1715],[1512,1512]]],[1548746749388,["gjx16@GJXAIOU",[[1,1506,"class Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系"]],[1506,1506],[1709,1709]]],[1548746756693,["gjx16@GJXAIOU",[[-1,1719," "]],[1720,1720],[1719,1719]]],[1548748144993,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548748144993,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548748122380,["gjx16@GJXAIOU",[[1,1716,"\n"]],[1713,1713],[1714,1714]]],[1548748125171,["gjx16@GJXAIOU",[[1,1714,"```"]],[1714,1714],[1717,1717]]],[1548748125220,["gjx16@GJXAIOU",[[1,1717,"language\n```\n"]],[1717,1717],[1717,1725]]],[1548748127927,["gjx16@GJXAIOU",[[-1,1717,"language"],[1,1725,"p"]],[1717,1725],[1718,1718]]],[1548748128693,["gjx16@GJXAIOU",[[1,1718,"ython"]],[1718,1718],[1723,1723]]],[1548748129807,["gjx16@GJXAIOU",[[1,1724,"\n"]],[1723,1723],[1724,1724]]],[1548748135162,["gjx16@GJXAIOU",[[1,1724,"'''\n2.实例属性\n'''\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用"]],[1724,1724],[2144,2144]]],[1548748137655,["gjx16@GJXAIOU",[[1,1714,"\n"]],[1713,1713],[1714,1714]]],[1548748205006,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548748205006,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548748160593,["gjx16@GJXAIOU",[[-1,1490,".实例属性"]],[1495,1495],[1490,1490]]],[1548748163347,["gjx16@GJXAIOU",[[1,1490," chuang"]],[1490,1490],[1497,1497]]],[1548748164738,["gjx16@GJXAIOU",[[-1,1491,"chuang"]],[1497,1497],[1491,1491]]],[1548748168906,["gjx16@GJXAIOU",[[1,1491,"创建实例"]],[1491,1491],[1495,1495]]],[1548748174296,["gjx16@GJXAIOU",[[1,1715,"\n"]],[1714,1714],[1715,1715]]],[1548748182351,["gjx16@GJXAIOU",[[1,1715,"### 4.3.2 实例属性"]],[1715,1715],[1729,1729]]],[1548748187719,["gjx16@GJXAIOU",[[-1,1751,"'''"]],[1754,1754],[1751,1751]]],[1548748187957,["gjx16@GJXAIOU",[[-1,1751,"\n"]],[1751,1751],[1750,1750]]],[1548748189143,["gjx16@GJXAIOU",[[-1,1744,"2.实例属性"]],[1750,1750],[1744,1744]]],[1548748189438,["gjx16@GJXAIOU",[[-1,1744,"\n"]],[1744,1744],[1743,1743]]],[1548748190268,["gjx16@GJXAIOU",[[-1,1740,"'''"]],[1743,1743],[1740,1740]]],[1548748190579,["gjx16@GJXAIOU",[[-1,1740,"\n"]],[1740,1740],[1739,1739]]],[1548748199875,["gjx16@GJXAIOU",[[1,2094,"\n"]],[2093,2093],[2094,2094]]],[1548749756385,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548749756385,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548748211247,["gjx16@GJXAIOU",[[1,2154,"\n"]],[2151,2151],[2152,2152]]],[1548748218496,["gjx16@GJXAIOU",[[1,2152,"## 4.4 方法"]],[2152,2152],[2161,2161]]],[1548748219921,["gjx16@GJXAIOU",[[1,2164,"\n"]],[2161,2161],[2162,2162]]],[1548749996391,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548749996391,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548749988690,["gjx16@GJXAIOU",[[1,2165,"\n"]],[2162,2162],[2163,2163]]],[1548749995383,["gjx16@GJXAIOU",[[1,2163,"### 4.4.1 "]],[2163,2163],[2173,2173]]],[1548750056355,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548750056355,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548750008639,["gjx16@GJXAIOU",[[1,2173,"绑定方法和非绑定方法"]],[2173,2173],[2183,2183]]],[1548750021840,["gjx16@GJXAIOU",[[1,2186,"\n"]],[2183,2183],[2184,2184]]],[1548750025428,["gjx16@GJXAIOU",[[1,2184,"- 使用"]],[2184,2184],[2188,2188]]],[1548751376450,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548751376450,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548751366645,["gjx16@GJXAIOU",[[1,2188,"8"]],[2188,2188],[2189,2189]]],[1548751375162,["gjx16@GJXAIOU",[[1,2186,"绑定方法："]],[2186,2186],[2191,2191]]],[1548751436448,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548751436448,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548751377859,["gjx16@GJXAIOU",[[-1,2193,"8"]],[2194,2194],[2193,2193]]],[1548751400377,["gjx16@GJXAIOU",[[1,2193,"实例调用的方法"]],[2193,2193],[2200,2200]]],[1548751402211,["gjx16@GJXAIOU",[[1,2201,"- \n"]],[2200,2200],[2203,2203]]],[1548751419863,["gjx16@GJXAIOU",[[1,2203,"非绑定方法：使用类的名字调用的方法"]],[2203,2203],[2220,2220]]],[1548752893805,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548752893805,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548752878451,["gjx16@GJXAIOU",[[1,2221,"·"]],[2221,2221],[2222,2222]]],[1548752879526,["gjx16@GJXAIOU",[[-1,2221,"·"]],[2222,2222],[2221,2221]]],[1548752880889,["gjx16@GJXAIOU",[[1,2221,"```"]],[2221,2221],[2224,2224]]],[1548752880917,["gjx16@GJXAIOU",[[1,2224,"language\n```\n"]],[2224,2224],[2224,2232]]],[1548752882188,["gjx16@GJXAIOU",[[-1,2224,"language"],[1,2232,"p"]],[2224,2232],[2225,2225]]],[1548752883033,["gjx16@GJXAIOU",[[1,2225,"ython"]],[2225,2225],[2230,2230]]],[1548752883853,["gjx16@GJXAIOU",[[1,2231,"\n"]],[2230,2230],[2231,2231]]],[1548752890314,["gjx16@GJXAIOU",[[1,2231,"'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法"]],[2231,2231],[2549,2549]]],[1548753193810,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753193810,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753177549,["gjx16@GJXAIOU",[[1,2556,"\n"]],[2553,2553],[2554,2554]]],[1548753177682,["gjx16@GJXAIOU",[[1,2557,"\n"]],[2554,2554],[2555,2555]]],[1548753183483,["gjx16@GJXAIOU",[[1,2555,"****"]],[2555,2555],[2557,2557]]],[1548753185264,["gjx16@GJXAIOU",[[1,2557,"miaosh"]],[2557,2557],[2563,2563]]],[1548753186599,["gjx16@GJXAIOU",[[-1,2557,"miaosh"]],[2563,2563],[2557,2557]]],[1548753253814,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753253814,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753201590,["gjx16@GJXAIOU",[[1,2557,"描述器"]],[2557,2557],[2560,2560]]],[1548753204185,["gjx16@GJXAIOU",[[1,2565,"\n"]],[2562,2562],[2563,2563]]],[1548753224889,["gjx16@GJXAIOU",[[1,2563,"含有：'"]],[2563,2563],[2567,2567]]],[1548753224918,["gjx16@GJXAIOU",[[-1,2566,"'"],[1,2567,"‘"]],[2567,2567],[2567,2567]]],[1548753225439,["gjx16@GJXAIOU",[[1,2567,"'"]],[2567,2567],[2568,2568]]],[1548753225468,["gjx16@GJXAIOU",[[-1,2567,"'"],[1,2568,"’"]],[2568,2568],[2568,2568]]],[1548753226689,["gjx16@GJXAIOU",[[-1,2566,"‘’"]],[2568,2568],[2566,2566]]],[1548753231043,["gjx16@GJXAIOU",[[1,2566,"`___"]],[2566,2566],[2569,2569]]],[1548753233000,["gjx16@GJXAIOU",[[1,2569,"get"]],[2569,2569],[2572,2572]]],[1548753238859,["gjx16@GJXAIOU",[[1,2573,"_`/"]],[2572,2572],[2576,2576]]],[1548753240011,["gjx16@GJXAIOU",[[-1,2575,"/"]],[2576,2576],[2575,2575]]],[1548753242052,["gjx16@GJXAIOU",[[1,2575,"、·"]],[2575,2575],[2577,2577]]],[1548753243015,["gjx16@GJXAIOU",[[-1,2576,"·"]],[2577,2577],[2576,2576]]],[1548753244507,["gjx16@GJXAIOU",[[1,2576,"``"]],[2576,2576],[2578,2578]]],[1548753251414,["gjx16@GJXAIOU",[[1,2577,"__set__"]],[2577,2577],[2584,2584]]],[1548753313814,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753313814,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753255584,["gjx16@GJXAIOU",[[1,2585,"、``"]],[2585,2585],[2588,2588]]],[1548753257649,["gjx16@GJXAIOU",[[1,2587,"————"]],[2587,2587],[2591,2591]]],[1548753259891,["gjx16@GJXAIOU",[[-1,2587,"————"]],[2591,2591],[2587,2587]]],[1548753266293,["gjx16@GJXAIOU",[[1,2587,"__delete__"]],[2587,2587],[2597,2597]]],[1548753283898,["gjx16@GJXAIOU",[[1,2574,"()"]],[2574,2574],[2576,2576]]],[1548753287781,["gjx16@GJXAIOU",[[1,2586,"()"]],[2586,2586],[2588,2588]]],[1548753291887,["gjx16@GJXAIOU",[[1,2601,"()"]],[2601,2601],[2603,2603]]],[1548753295355,["gjx16@GJXAIOU",[[1,2604,"z"]],[2604,2604],[2605,2605]]],[1548753296107,["gjx16@GJXAIOU",[[-1,2604,"z"]],[2605,2605],[2604,2604]]],[1548753305878,["gjx16@GJXAIOU",[[1,2604,"这些方法的对象称为"]],[2604,2604],[2613,2613]]],[1548753373819,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753373819,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753318673,["gjx16@GJXAIOU",[[1,2613,"描述器"]],[2613,2613],[2616,2616]]],[1548753326739,["gjx16@GJXAIOU",[[1,2619,"\n"]],[2616,2616],[2617,2617]]],[1548753330279,["gjx16@GJXAIOU",[[1,2563,"- "]],[2563,2563],[2565,2565]]],[1548753372282,["gjx16@GJXAIOU",[[1,2619,"- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现"]],[2619,2619],[2658,2658]]],[1548753433818,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753433818,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753373907,["gjx16@GJXAIOU",[[1,2658,"机制"]],[2658,2658],[2660,2660]]],[1548753428121,["gjx16@GJXAIOU",[[1,2661,"- \n"]],[2660,2660],[2663,2663]]],[1548753432319,["gjx16@GJXAIOU",[[1,2663,"p198"]],[2663,2663],[2667,2667]]],[1548753493817,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753493817,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753437947,["gjx16@GJXAIOU",[[1,2667,"见详述"]],[2667,2667],[2670,2670]]],[1548753439036,["gjx16@GJXAIOU",[[1,2671,"- \n"]],[2670,2670],[2673,2673]]],[1548753439331,["gjx16@GJXAIOU",[[-1,2671,"- "]],[2673,2673],[2672,2672]]],[1548753442152,["gjx16@GJXAIOU",[[1,2674,"\n"]],[2672,2672],[2673,2673]]],[1548753446435,["gjx16@GJXAIOU",[[1,2673,"### 4.3.2 "]],[2673,2673],[2683,2683]]],[1548753448072,["gjx16@GJXAIOU",[[-1,2679,"3.2 "]],[2683,2683],[2679,2679]]],[1548753456545,["gjx16@GJXAIOU",[[1,2679,"4.2 类方法和静态方法"]],[2679,2679],[2691,2691]]],[1548753457584,["gjx16@GJXAIOU",[[1,2693,"\n"]],[2691,2691],[2692,2692]]],[1548753482801,["gjx16@GJXAIOU",[[1,2692,"·"]],[2692,2692],[2693,2693]]],[1548753483725,["gjx16@GJXAIOU",[[-1,2692,"·"]],[2693,2693],[2692,2692]]],[1548753484978,["gjx16@GJXAIOU",[[1,2692,"```"]],[2692,2692],[2695,2695]]],[1548753485007,["gjx16@GJXAIOU",[[1,2695,"language\n```\n"]],[2695,2695],[2695,2703]]],[1548753487057,["gjx16@GJXAIOU",[[-1,2695,"language"],[1,2703,"p"]],[2695,2703],[2696,2696]]],[1548753487848,["gjx16@GJXAIOU",[[1,2696,"ython"]],[2696,2696],[2701,2701]]],[1548753488618,["gjx16@GJXAIOU",[[1,2702,"\n"]],[2701,2701],[2702,2702]]],[1548753492115,["gjx16@GJXAIOU",[[1,2702,"#"]],[2702,2702],[2703,2703]]],[1548753553818,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548753553818,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548753494076,["gjx16@GJXAIOU",[[1,2703,"~"]],[2703,2703],[2704,2704]]],[1548753494922,["gjx16@GJXAIOU",[[-1,2703,"~"]],[2704,2704],[2703,2703]]],[1548753503289,["gjx16@GJXAIOU",[[1,2703,"! /usr"]],[2703,2703],[2709,2709]]],[1548753509888,["gjx16@GJXAIOU",[[-1,2704," "]],[2705,2705],[2704,2704]]],[1548753514132,["gjx16@GJXAIOU",[[1,2708,"/d"]],[2708,2708],[2710,2710]]],[1548753515146,["gjx16@GJXAIOU",[[-1,2709,"d"]],[2710,2710],[2709,2709]]],[1548753526222,["gjx16@GJXAIOU",[[1,2709,"bin/env python"]],[2709,2709],[2723,2723]]],[1548753526955,["gjx16@GJXAIOU",[[1,2724,"\n"]],[2723,2723],[2724,2724]]],[1548753537665,["gjx16@GJXAIOU",[[1,2724,"#coding:utf-8"]],[2724,2724],[2737,2737]]],[1548753538776,["gjx16@GJXAIOU",[[1,2738,"\n"]],[2737,2737],[2738,2738]]],[1548753539894,["gjx16@GJXAIOU",[[1,2739,"\n"]],[2738,2738],[2739,2739]]],[1548753541609,["gjx16@GJXAIOU",[[1,2739,"cls"]],[2739,2739],[2742,2742]]],[1548753542624,["gjx16@GJXAIOU",[[-1,2741,"s"]],[2742,2742],[2741,2741]]],[1548753548673,["gjx16@GJXAIOU",[[1,2741,"ass Foo:"]],[2741,2741],[2749,2749]]],[1548753549464,["gjx16@GJXAIOU",[[1,2750,"\n"]],[2749,2749],[2750,2750]]],[1548753550195,["gjx16@GJXAIOU",[[1,2750,"l"]],[2750,2750],[2751,2751]]],[1548753550902,["gjx16@GJXAIOU",[[-1,2750,"l"]],[2751,2751],[2750,2750]]],[1548756313878,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548756313878,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548756286851,["gjx16@GJXAIOU",[[1,2702,"'''\n4.4.2 类方法和静态方法\n'''\n\n"],[1,2750,"    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())"]],[2702,2750],[3289,3289]]],[1548756294086,["gjx16@GJXAIOU",[[1,3296,"\n"]],[3293,3293],[3294,3294]]],[1548756296206,["gjx16@GJXAIOU",[[1,3294,"****"]],[3294,3294],[3296,3296]]],[1548756297286,["gjx16@GJXAIOU",[[1,3296,"lei"]],[3296,3296],[3299,3299]]],[1548756298382,["gjx16@GJXAIOU",[[-1,3296,"lei"]],[3299,3299],[3296,3296]]],[1548756301450,["gjx16@GJXAIOU",[[1,3296,"类方法："]],[3296,3296],[3300,3300]]],[1548756309756,["gjx16@GJXAIOU",[[1,3302," 就是"]],[3302,3302],[3305,3305]]],[1548756373870,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548756373870,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548756372906,["gjx16@GJXAIOU",[[1,3305,"类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是"]],[3305,3305],[3351,3351]]],[1548756433875,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548756433875,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548756416646,["gjx16@GJXAIOU",[[1,3351,"这个类对象，即将类对象作为引用对象传入到该方法中。"]],[3351,3351],[3376,3376]]],[1548756417466,["gjx16@GJXAIOU",[[1,3379,"\n"]],[3376,3376],[3377,3377]]],[1548756417626,["gjx16@GJXAIOU",[[1,3380,"\n"]],[3377,3377],[3378,3378]]],[1548769575054,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548769575054,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548769567938,["gjx16@GJXAIOU",[[1,3381,"\n"]],[3377,3377],[3378,3378]]],[1548769568126,["gjx16@GJXAIOU",[[1,3382,"\n"]],[3378,3378],[3379,3379]]],[1548769635053,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548769635053,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548769582544,["gjx16@GJXAIOU",[[1,3379,"- ****"]],[3379,3379],[3383,3383]]],[1548769596592,["gjx16@GJXAIOU",[[1,3383,"staticmethod"]],[3383,3383],[3395,3395]]],[1548769600283,["gjx16@GJXAIOU",[[1,3398,"- \n"]],[3397,3397],[3400,3400]]],[1548769601882,["gjx16@GJXAIOU",[[1,3400,"``"]],[3400,3400],[3402,3402]]],[1548769603953,["gjx16@GJXAIOU",[[-1,3398,"- ``"]],[3402,3402],[3398,3398]]],[1548769605203,["gjx16@GJXAIOU",[[1,3398,"```"]],[3398,3398],[3401,3401]]],[1548769605233,["gjx16@GJXAIOU",[[1,3401,"language\n```\n"]],[3401,3401],[3401,3409]]],[1548769607032,["gjx16@GJXAIOU",[[-1,3401,"language"],[1,3409,"p"]],[3401,3409],[3402,3402]]],[1548769607917,["gjx16@GJXAIOU",[[1,3402,"ython"]],[3402,3402],[3407,3407]]],[1548769608813,["gjx16@GJXAIOU",[[1,3408,"\n"]],[3407,3407],[3408,3408]]],[1548769613770,["gjx16@GJXAIOU",[[1,3409,"'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n"]],[3408,3408],[4025,4025]]],[1548769625951,["gjx16@GJXAIOU",[[1,2692,"\n"]],[2691,2691],[2692,2692]]],[1548769629286,["gjx16@GJXAIOU",[[1,2692,"- ****"]],[2692,2692],[2696,2696]]],[1548769633756,["gjx16@GJXAIOU",[[1,2696,"cls"]],[2696,2696],[2699,2699]]],[1548769634641,["gjx16@GJXAIOU",[[-1,2698,"s"]],[2699,2699],[2698,2698]]],[1548769634828,["gjx16@GJXAIOU",[[1,2698,"a"]],[2698,2698],[2699,2699]]],[1548769695059,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548769695059,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548769635626,["gjx16@GJXAIOU",[[1,2699,"dd"]],[2699,2699],[2701,2701]]],[1548769636215,["gjx16@GJXAIOU",[[-1,2699,"dd"]],[2701,2701],[2699,2699]]],[1548769641048,["gjx16@GJXAIOU",[[1,2699,"ssmethod"]],[2699,2699],[2707,2707]]],[1548769658504,["gjx16@GJXAIOU",[[1,4052,"\n"]],[4048,4048],[4049,4049]]],[1548769658669,["gjx16@GJXAIOU",[[1,4053,"\n"]],[4049,4049],[4050,4050]]],[1548769658834,["gjx16@GJXAIOU",[[1,4054,"\n"]],[4050,4050],[4051,4051]]],[1548769664636,["gjx16@GJXAIOU",[[1,4051,"## 4.5 jich"]],[4051,4051],[4062,4062]]],[1548769665970,["gjx16@GJXAIOU",[[-1,4058,"jich"]],[4062,4062],[4058,4058]]],[1548769669079,["gjx16@GJXAIOU",[[1,4058,"继承"]],[4058,4058],[4060,4060]]],[1548769669973,["gjx16@GJXAIOU",[[1,4064,"\n"]],[4060,4060],[4061,4061]]],[1548770235072,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548770235072,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548770227503,["gjx16@GJXAIOU",[[1,4061,"继承是"]],[4061,4061],[4064,4064]]],[1548770228223,["gjx16@GJXAIOU",[[-1,4063,"是"]],[4064,4064],[4063,4063]]],[1548770232841,["gjx16@GJXAIOU",[[1,4063,"使子类具有"]],[4063,4063],[4068,4068]]],[1548770295069,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548770295069,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548770239693,["gjx16@GJXAIOU",[[1,4068,"父类的方法和属性"]],[4068,4068],[4076,4076]]],[1548770242500,["gjx16@GJXAIOU",[[1,4080,"\n"]],[4076,4076],[4077,4077]]],[1548770247389,["gjx16@GJXAIOU",[[1,4077,"继承个最主要"]],[4077,4077],[4083,4083]]],[1548770248526,["gjx16@GJXAIOU",[[-1,4079,"个最主要"]],[4083,4083],[4079,4079]]],[1548770253596,["gjx16@GJXAIOU",[[1,4079,"最主要的作用"]],[4079,4079],[4085,4085]]],[1548770256373,["gjx16@GJXAIOU",[[-1,4083,"作用"]],[4085,4085],[4083,4083]]],[1548770263118,["gjx16@GJXAIOU",[[1,4083,"用途是实现多态"]],[4083,4083],[4090,4090]]],[1548770268744,["gjx16@GJXAIOU",[[1,4094,"\n"]],[4090,4090],[4091,4091]]],[1548770269239,["gjx16@GJXAIOU",[[1,4095,"\n"]],[4091,4091],[4092,4092]]],[1548770277214,["gjx16@GJXAIOU",[[1,4092,"### 4.5.2 单继承"]],[4092,4092],[4105,4105]]],[1548771135081,[null,[[1,972,"（"],[-1,980,"应"],[1,1006,"）"],[-1,1014,"\n"]],[972,972],[1014,1014]]],[1548771135081,[null,[[-1,972,"（"],[1,981,"应"],[-1,1006,"）"],[1,1015,"\n"]],[1014,1014],[972,972]]],[1548771079695,["gjx16@GJXAIOU",[[1,4106,"···"]],[4106,4106],[4109,4109]]],[1548771081491,["gjx16@GJXAIOU",[[-1,4106,"···"]],[4109,4109],[4106,4106]]],[1548771082657,["gjx16@GJXAIOU",[[1,4106,"```"]],[4106,4106],[4109,4109]]],[1548771082691,["gjx16@GJXAIOU",[[1,4109,"language\n```\n"]],[4109,4109],[4109,4117]]],[1548771084236,["gjx16@GJXAIOU",[[-1,4109,"language"],[1,4117,"p"]],[4109,4117],[4110,4110]]],[1548771085018,["gjx16@GJXAIOU",[[1,4110,"ython"]],[4110,4110],[4115,4115]]],[1548771085733,["gjx16@GJXAIOU",[[1,4116,"\n"]],[4115,4115],[4116,4116]]],[1548771090531,["gjx16@GJXAIOU",[[1,4116,"'''\n4.5 继承\n'''\n\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n"]],[4116,4116],[4723,4723]]],[1548771093380,["gjx16@GJXAIOU",[[-1,4116,"'''\n4.5 继承\n'''"]],[4116,4130],[4116,4116]]],[1548771094517,["gjx16@GJXAIOU",[[-1,4117,"\n"]],[4117,4117],[4116,4116]]],[1548771094888,["gjx16@GJXAIOU",[[-1,4116,"\n"]],[4116,4116],[4115,4115]]]],null,"gjx16@GJXAIOU"],["ccbcf8e4-aff3-4eb3-bdf2-080fa306fd84",1550139983824,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)\n```\n注：girl就是一个实例（girl这个变量引用了Person（‘zhangsan’）实例对象），它有属性和方法\nself本质上就是实例对象本身\n\n## 4.3 属性和数据\n\n### 4.3.1 类属性\n```python\n'''\n4.3 类属性\n'''\nclass A:\n    x = 5\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性\n```\n- x为类中的一个变量也为属性\n- 几类特殊的属性的含义：\n  - A.__name__  :以字符串的形式返回类的名字\n  - A.__doc__: 显示类的文档\n  - A.__base__:类A的所有父类，默认没有其他继承就是显示object类\n  - A.__dict__:以字典的形式显示类的所有属性\n  - A.__module__:类所在的模块\n    - 例如：Person.__module__ 显示结果为__main__,即类Person的全称为：__main__.Person\n\n\n\n### 4.3.1 创建实例\n```python\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n```\n\n### 4.3.2 实例属性\n```python\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\n\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用\n```\n\n## 4.4 方法\n\n### 4.4.1 绑定方法和非绑定方法\n- 绑定方法：使用实例调用的方法\n- 非绑定方法：使用类的名字调用的方法\n```python\n'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法\n```\n\n**描述器**\n- 含有：`__get__()`、`__set__()`、`__delete__()`这些方法的对象称为描述器\n- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现机制\n- p198见详述\n\n\n### 4.4.2 类方法和静态方法\n- **classmethod**\n```python\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Foo:\n    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())\n```\n**类方法：** 就是类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是这个类对象，即将类对象作为引用对象传入到该方法中。\n\n\n- **staticmethod**\n```python\n\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n```\n\n\n\n## 4.5 继承\n继承使子类具有父类的方法和属性\n继承最主要的用途是实现多态\n\n### 4.5.2 单继承\n```python\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n\n```\n\n\n\n   \n",[[1550139953196,["gjx16@GJXAIOU",[[1,4396,"# "]],[4396,4396],[4398,4398]]],[1550139954532,["gjx16@GJXAIOU",[[1,4396," "]],[4396,4396],[4397,4397]]],[1550139962068,["gjx16@GJXAIOU",[[1,4398,"继承Person"]],[4398,4398],[4406,4406]]],[1550140199800,["gjx16@GJXAIOU",[[1,4465,"  # 如果子类中没有初始化哈舒"]],[4465,4465],[4481,4481]]],[1550140200392,["gjx16@GJXAIOU",[[-1,4479,"哈舒"]],[4481,4481],[4479,4479]]],[1550140219985,["gjx16@GJXAIOU",[[1,4479,"函数，在实例化的时候就会继承父类中的"]],[4479,4479],[4497,4497]]],[1550140234966,["gjx16@GJXAIOU",[[1,4497,"初始化函数并且执行；"]],[4497,4497],[4507,4507]]],[1550144909113,["gjx16@GJXAIOU",[[1,4766,"###"]],[4766,4766],[4769,4769]]],[1550145395095,["gjx16@GJXAIOU",[[1,4765,"****"]],[4765,4765],[4767,4767]]],[1550145397595,["gjx16@GJXAIOU",[[-1,4767,"**"]],[4767,4767],[4765,4765]]],[1550145399843,["gjx16@GJXAIOU",[[-1,4765,"**"]],[4767,4767],[4765,4765]]],[1550145400839,["gjx16@GJXAIOU",[[1,4766,"\n"]],[4765,4765],[4766,4766]]],[1550145408048,["gjx16@GJXAIOU",[[1,4766,"程序运行结果："]],[4766,4766],[4773,4773]]],[1550145409071,["gjx16@GJXAIOU",[[1,4774,"\n"]],[4773,4773],[4774,4774]]],[1550145410999,["gjx16@GJXAIOU",[[1,4774,"···"]],[4774,4774],[4777,4777]]],[1550145412509,["gjx16@GJXAIOU",[[-1,4774,"···"]],[4777,4777],[4774,4774]]],[1550145413600,["gjx16@GJXAIOU",[[1,4774,"```"]],[4774,4774],[4777,4777]]],[1550145413636,["gjx16@GJXAIOU",[[1,4777,"language\n```\n"]],[4777,4777],[4777,4785]]],[1550145418523,["gjx16@GJXAIOU",[[-1,4774,"```language"]],[4777,4785],[4774,4774]]],[1550145421187,["gjx16@GJXAIOU",[[-1,4775,"```"]],[4778,4778],[4775,4775]]],[1550145421398,["gjx16@GJXAIOU",[[-1,4776,"\n"]],[4775,4775],[4774,4774]]],[1550145440448,["gjx16@GJXAIOU",[[1,4774,"`"]],[4774,4774],[4775,4775]]],[1550145443236,["gjx16@GJXAIOU",[[1,4775,"This is son\nzhangsan\n{'height': 180}\n(<class '__main__.Person'>,)"]],[4775,4775],[4840,4840]]],[1550145446941,["gjx16@GJXAIOU",[[1,4786,"`"]],[4786,4786],[4787,4787]]],[1550145451711,["gjx16@GJXAIOU",[[1,4796,"`"]],[4796,4796],[4797,4797]]],[1550145454006,["gjx16@GJXAIOU",[[1,4788,"`"]],[4788,4788],[4789,4789]]],[1550145454833,["gjx16@GJXAIOU",[[1,4799,"`"]],[4799,4799],[4800,4800]]],[1550145455574,["gjx16@GJXAIOU",[[1,4816,"`"]],[4816,4816],[4817,4817]]],[1550145459294,["gjx16@GJXAIOU",[[1,4845,"``"]],[4845,4845],[4846,4846]]],[1550145460515,["gjx16@GJXAIOU",[[-1,4846,"`"]],[4846,4846],[4845,4845]]],[1550145462565,["gjx16@GJXAIOU",[[1,4815,"`"]],[4815,4815],[4816,4816]]],[1550145466478,["gjx16@GJXAIOU",[[1,4852," 3.5"]],[4852,4852],[4856,4856]]],[1550145468279,["gjx16@GJXAIOU",[[-1,4853,"3.5"]],[4856,4856],[4853,4853]]],[1550145468760,["gjx16@GJXAIOU",[[1,4853,"3"]],[4853,4853],[4854,4854]]],[1550145469187,["gjx16@GJXAIOU",[[-1,4853,"3"]],[4854,4854],[4853,4853]]],[1550145469711,["gjx16@GJXAIOU",[[1,4853,"4l5"]],[4853,4853],[4856,4856]]],[1550145470965,["gjx16@GJXAIOU",[[-1,4853,"4l5"]],[4856,4856],[4853,4853]]],[1550145475936,["gjx16@GJXAIOU",[[1,4853,"4.5.3 d"]],[4853,4853],[4860,4860]]],[1550145476388,["gjx16@GJXAIOU",[[-1,4859,"d"]],[4860,4860],[4859,4859]]],[1550145484593,["gjx16@GJXAIOU",[[1,4859,"调用覆盖的方法"]],[4859,4859],[4866,4866]]],[1550145485263,["gjx16@GJXAIOU",[[1,4868,"\n"]],[4866,4866],[4867,4867]]],[1550145497212,["gjx16@GJXAIOU",[[1,4869,"\n"]],[4867,4867],[4868,4868]]],[1550145501609,["gjx16@GJXAIOU",[[1,4868,"- 如果子类"]],[4868,4868],[4874,4874]]],[1550145522160,["gjx16@GJXAIOU",[[1,4874,"重写了父类的方法，现在子类中调用父类的方法"]],[4874,4874],[4895,4895]]],[1550145522589,["gjx16@GJXAIOU",[[1,4896,"- \n"]],[4895,4895],[4898,4898]]],[1550145524027,["gjx16@GJXAIOU",[[-1,4896,"- "]],[4898,4898],[4896,4896]]],[1550145525525,["gjx16@GJXAIOU",[[1,4896,"```"]],[4896,4896],[4899,4899]]],[1550145525558,["gjx16@GJXAIOU",[[1,4899,"language\n```\n"]],[4899,4899],[4899,4907]]],[1550145526792,["gjx16@GJXAIOU",[[-1,4899,"language"],[1,4907,"p"]],[4899,4907],[4900,4900]]],[1550145527464,["gjx16@GJXAIOU",[[1,4900,"ython"]],[4900,4900],[4905,4905]]],[1550145528007,["gjx16@GJXAIOU",[[1,4906,"\n"]],[4905,4905],[4906,4906]]]],null,"gjx16@GJXAIOU"],["b48fadc8-1393-4dcc-9851-5c420f5b8044",1550214744216,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)\n```\n注：girl就是一个实例（girl这个变量引用了Person（‘zhangsan’）实例对象），它有属性和方法\nself本质上就是实例对象本身\n\n## 4.3 属性和数据\n\n### 4.3.1 类属性\n```python\n'''\n4.3 类属性\n'''\nclass A:\n    x = 5\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性\n```\n- x为类中的一个变量也为属性\n- 几类特殊的属性的含义：\n  - A.__name__  :以字符串的形式返回类的名字\n  - A.__doc__: 显示类的文档\n  - A.__base__:类A的所有父类，默认没有其他继承就是显示object类\n  - A.__dict__:以字典的形式显示类的所有属性\n  - A.__module__:类所在的模块\n    - 例如：Person.__module__ 显示结果为__main__,即类Person的全称为：__main__.Person\n\n\n\n### 4.3.1 创建实例\n```python\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n```\n\n### 4.3.2 实例属性\n```python\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\n\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用\n```\n\n## 4.4 方法\n\n### 4.4.1 绑定方法和非绑定方法\n- 绑定方法：使用实例调用的方法\n- 非绑定方法：使用类的名字调用的方法\n```python\n'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法\n```\n\n**描述器**\n- 含有：`__get__()`、`__set__()`、`__delete__()`这些方法的对象称为描述器\n- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现机制\n- p198见详述\n\n\n### 4.4.2 类方法和静态方法\n- **classmethod**\n```python\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Foo:\n    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())\n```\n**类方法：** 就是类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是这个类对象，即将类对象作为引用对象传入到该方法中。\n\n\n- **staticmethod**\n```python\n\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n```\n\n\n\n## 4.5 继承\n继承使子类具有父类的方法和属性\n继承最主要的用途是实现多态\n\n### 4.5.2 单继承\n```python\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person): #继承Person \n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准  # 如果子类中没有初始化函数，在实例化的时候就会继承父类中的初始化函数并且执行；\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n\n```\n\n程序运行结果：\n`This is son`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n### 4.5.3 调用覆盖的方法\n\n- 如果子类重写了父类的方法，现在子类中调用父类的方法\n```python\n\n```\n\n\n   \n",[[1550214730543,["gjx16@GJXAIOU",[[1,4906,"# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现   #!/usr/bin/env python #coding:utf-8 import random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n  super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n  self.real_name = \"lisi\"\n  print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类"]],[4906,4906],[5665,5665]]],[1550214733175,["gjx16@GJXAIOU",[[-1,4906,"# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现   #!/usr/bin/env python #coding:utf-8 import random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n  super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n  self.real_name = \"lisi\"\n  print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类"]],[5665,5665],[4906,4906]]],[1550214740205,["gjx16@GJXAIOU",[[1,4906,"# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n        super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n        self.real_name = \"lisi\"\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类"]],[4906,4906],[5682,5682]]],[1550214745183,["gjx16@GJXAIOU",[[1,5689,"\n"]],[5686,5686],[5687,5687]]],[1550214750920,["gjx16@GJXAIOU",[[1,5687,"程序运行结果；"]],[5687,5687],[5694,5694]]],[1550214751736,["gjx16@GJXAIOU",[[-1,5693,"；"]],[5694,5694],[5693,5693]]],[1550214752244,["gjx16@GJXAIOU",[[1,5693,"："]],[5693,5693],[5694,5694]]],[1550214752618,["gjx16@GJXAIOU",[[1,5697,"\n"]],[5694,5694],[5695,5695]]],[1550214753809,["gjx16@GJXAIOU",[[1,5695,"··"]],[5695,5695],[5697,5697]]],[1550214754681,["gjx16@GJXAIOU",[[-1,5695,"··"]],[5697,5697],[5695,5695]]],[1550214755459,["gjx16@GJXAIOU",[[1,5695,"``"]],[5695,5695],[5697,5697]]],[1550214764750,["gjx16@GJXAIOU",[[1,5696,"This is father\nThis is son\nlisi\nzhangsan\n{'height': 180}\n(<class '__main__.Person'>,)"]],[5696,5696],[5781,5781]]],[1550214766608,["gjx16@GJXAIOU",[[1,5710,"`"]],[5710,5710],[5711,5711]]],[1550214767890,["gjx16@GJXAIOU",[[1,5723,"`"]],[5723,5723],[5724,5724]]],[1550214770234,["gjx16@GJXAIOU",[[1,5729,"`"]],[5729,5729],[5730,5730]]],[1550214772339,["gjx16@GJXAIOU",[[1,5739,"`"]],[5739,5739],[5740,5740]]],[1550214774964,["gjx16@GJXAIOU",[[1,5756,"`"]],[5756,5756],[5757,5757]]],[1550214778737,["gjx16@GJXAIOU",[[1,5758,"`"]],[5758,5758],[5759,5759]]],[1550214779736,["gjx16@GJXAIOU",[[1,5741,"`"]],[5741,5741],[5742,5742]]],[1550214780361,["gjx16@GJXAIOU",[[1,5731,"`"]],[5731,5731],[5732,5732]]],[1550214781690,["gjx16@GJXAIOU",[[1,5725,"`"]],[5725,5725],[5726,5726]]],[1550214782747,["gjx16@GJXAIOU",[[1,5712,"`"]],[5712,5712],[5713,5713]]],[1550221885115,["gjx16@GJXAIOU",[[1,5794,"- duoji"]],[5794,5794],[5801,5801]]],[1550221886309,["gjx16@GJXAIOU",[[-1,5796,"duoji"]],[5801,5801],[5796,5796]]],[1550221896353,["gjx16@GJXAIOU",[[1,5796,"多继承的继承"]],[5796,5796],[5802,5802]]],[1550221898566,["gjx16@GJXAIOU",[[1,5802,"顺序"]],[5802,5802],[5804,5804]]],[1550221898951,["gjx16@GJXAIOU",[[1,5805,"- \n"]],[5804,5804],[5807,5807]]],[1550221900475,["gjx16@GJXAIOU",[[-1,5805,"- "]],[5807,5807],[5805,5805]]],[1550221902499,["gjx16@GJXAIOU",[[1,5805,"```"]],[5805,5805],[5808,5808]]],[1550221902543,["gjx16@GJXAIOU",[[1,5808,"language\n```\n"]],[5808,5808],[5808,5816]]],[1550221904205,["gjx16@GJXAIOU",[[-1,5808,"language"],[1,5816,"p"]],[5808,5816],[5809,5809]]],[1550221904855,["gjx16@GJXAIOU",[[1,5809,"ython"]],[5809,5809],[5814,5814]]],[1550221905111,["gjx16@GJXAIOU",[[1,5815,"\n"]],[5814,5814],[5815,5815]]],[1550221909480,["gjx16@GJXAIOU",[[1,5815,"## 多重继承的继承顺序 # 广度优先   #!usr/bin/env python # coding=utf-8   class A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass class AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass   if __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n  ab = AB()\n    ab.Ha()\n    ab.La()"]],[5815,5815],[6270,6270]]],[1550221911986,["gjx16@GJXAIOU",[[-1,5815,"## 多重继承的继承顺序 # 广度优先   #!usr/bin/env python # coding=utf-8   class A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass class AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass   if __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n  ab = AB()\n    ab.Ha()\n    ab.La()"]],[6270,6270],[5815,5815]]],[1550221914853,["gjx16@GJXAIOU",[[1,5815,"## 多重继承的继承顺序\n# 广度优先\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass\nclass AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass\n\nif __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n    ab = AB()\n    ab.Ha()\n    ab.La()"]],[5815,5815],[6269,6269]]],[1550221934181,["gjx16@GJXAIOU",[[1,6275,"\n"]],[6273,6273],[6274,6274]]],[1550221940597,["gjx16@GJXAIOU",[[1,6274,"程序运行结果："]],[6274,6274],[6281,6281]]],[1550221941292,["gjx16@GJXAIOU",[[1,6283,"\n"]],[6281,6281],[6282,6282]]],[1550221942987,["gjx16@GJXAIOU",[[1,6282,"``"]],[6282,6282],[6284,6284]]],[1550221952690,["gjx16@GJXAIOU",[[1,6283,"(<class '__main__.AB'>, <class '__main__.AB1'>, <class '__main__.AB2'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nThis is A ha\nThis is AB2 la"]],[6283,6283],[6444,6444]]],[1550221958558,["gjx16@GJXAIOU",[[1,6416,"`"]],[6416,6416],[6417,6417]]],[1550221960949,["gjx16@GJXAIOU",[[1,6418,"`"]],[6418,6418],[6419,6419]]],[1550221961813,["gjx16@GJXAIOU",[[1,6431,"`"]],[6431,6431],[6432,6432]]],[1550221963691,["gjx16@GJXAIOU",[[1,6433,"`"]],[6433,6433],[6434,6434]]],[1550221998489,["gjx16@GJXAIOU",[[1,6451,"\n"]],[6449,6449],[6450,6450]]],[1550221998635,["gjx16@GJXAIOU",[[1,6452,"\n"]],[6450,6450],[6451,6451]]],[1550221998753,["gjx16@GJXAIOU",[[1,6453,"\n"]],[6451,6451],[6452,6452]]],[1550221998899,["gjx16@GJXAIOU",[[1,6454,"\n"]],[6452,6452],[6453,6453]]],[1550221999017,["gjx16@GJXAIOU",[[1,6455,"\n"]],[6453,6453],[6454,6454]]],[1550221999151,["gjx16@GJXAIOU",[[1,6456,"\n"]],[6454,6454],[6455,6455]]],[1550221999266,["gjx16@GJXAIOU",[[1,6457,"\n"]],[6455,6455],[6456,6456]]],[1550221999395,["gjx16@GJXAIOU",[[1,6458,"\n"]],[6456,6456],[6457,6457]]],[1550221999817,["gjx16@GJXAIOU",[[1,6459,"\n"]],[6457,6457],[6458,6458]]],[1550222008658,["gjx16@GJXAIOU",[[1,6458,"## 4.6 duotai"]],[6458,6458],[6471,6471]]],[1550222009920,["gjx16@GJXAIOU",[[-1,6465,"duotai"]],[6471,6471],[6465,6465]]],[1550222016149,["gjx16@GJXAIOU",[[1,6465,"多态与封装"]],[6465,6465],[6470,6470]]],[1550223517498,["gjx16@GJXAIOU",[[1,6471,"#"]],[6471,6471],[6472,6472]]],[1550223518316,["gjx16@GJXAIOU",[[1,6473,"#"]],[6473,6473],[6474,6474]]],[1550223524040,["gjx16@GJXAIOU",[[1,6471,"\n"]],[6471,6471],[6472,6472]]],[1550223531316,["gjx16@GJXAIOU",[[1,6475," 4.6.1 多态"]],[6475,6475],[6484,6484]]],[1550223531840,["gjx16@GJXAIOU",[[1,6485,"\n"]],[6484,6484],[6485,6485]]],[1550223534425,["gjx16@GJXAIOU",[[1,6485,"```"]],[6485,6485],[6488,6488]]],[1550223534462,["gjx16@GJXAIOU",[[1,6488,"language\n```\n"]],[6488,6488],[6488,6496]]],[1550223535017,["gjx16@GJXAIOU",[[-1,6488,"language"],[1,6496,"p"]],[6488,6496],[6489,6489]]],[1550223535683,["gjx16@GJXAIOU",[[1,6489,"ython"]],[6489,6489],[6494,6494]]],[1550223536290,["gjx16@GJXAIOU",[[1,6495,"\n"]],[6494,6494],[6495,6495]]],[1550223540618,["gjx16@GJXAIOU",[[1,6495,"## 4.6 多态与封装\n\n### 4.6.1 多态：同一方法传入不同参数结果不同 /对象多种表现形式的体现\n\n# count :数一数某个元素在对象中出现的次数\nprint(\"This is a book\".count(\"s\" ))\nprint([1,2,3,4,2,3,2].count(2))\n\nf = lambda x,y: x+y\nprint(f(2,3))\nprint(f(\"hello\",\"world\"))\nprint(f([\"a\",\"b\"],[\"c\",\"d\"]))\n\n# python 不检查传入对象的类型，这种方式称为：“隐式类型”、“结构式类型”、\"鸭子类型”\n# 鸭子类型：动态类型的一种风格，该风格中一个对象有效的语义，不是由继承自特定的类或者特定的接口决定的，而是有当前方法和属性的集合决定"]],[6495,6495],[6853,6853]]],[1550223549454,["gjx16@GJXAIOU",[[-1,6495,"## 4.6 多态与封装"]],[6507,6507],[6495,6495]]],[1550223549878,["gjx16@GJXAIOU",[[-1,6496,"\n"]],[6495,6495],[6494,6494]]],[1550223551431,["gjx16@GJXAIOU",[[-1,6495,"\n"]],[6495,6495],[6494,6494]]],[1550223556736,["gjx16@GJXAIOU",[[1,6845,"\n"]],[6843,6843],[6844,6844]]],[1550223559036,["gjx16@GJXAIOU",[[1,6844,"chengxu "]],[6844,6844],[6852,6852]]],[1550223560758,["gjx16@GJXAIOU",[[-1,6844,"chengxu "]],[6852,6852],[6844,6844]]],[1550223566003,["gjx16@GJXAIOU",[[1,6844,"程序运行结果："]],[6844,6844],[6851,6851]]],[1550223575225,["gjx16@GJXAIOU",[[1,6852,"2\n3\n5\nhelloworld\n['a', 'b', 'c', 'd']"]],[6852,6852],[6889,6889]]],[1550223596898,[null,[[-1,6473,"\n"],[1,6474,"#"],[-1,6484," "],[1,6485,"\n"],[1,6890," "]],[6473,6473],[6891,6891]]],[1550223596898,[null,[[1,6473,"\n"],[-1,6473,"#"],[1,6484," "],[-1,6484,"\n"],[-1,6890," "]],[6891,6891],[6473,6473]]],[1550223578620,["gjx16@GJXAIOU",[[1,6852,"`"]],[6852,6852],[6853,6853]]],[1550223581003,["gjx16@GJXAIOU",[[1,6854,"`"]],[6854,6854],[6855,6855]]],[1550223581744,["gjx16@GJXAIOU",[[1,6857,"`"]],[6857,6857],[6858,6858]]],[1550223582178,["gjx16@GJXAIOU",[[1,6860,"`"]],[6860,6860],[6861,6861]]],[1550223585825,["gjx16@GJXAIOU",[[1,6872,"`"]],[6872,6872],[6873,6873]]],[1550223589361,["gjx16@GJXAIOU",[[1,6894,"`"]],[6894,6894],[6895,6895]]],[1550223592225,["gjx16@GJXAIOU",[[1,6874,"`"]],[6874,6874],[6875,6875]]],[1550223593635,["gjx16@GJXAIOU",[[1,6862,"`"]],[6862,6862],[6863,6863]]],[1550223594281,["gjx16@GJXAIOU",[[1,6859,"`"]],[6859,6859],[6860,6860]]],[1550223595292,["gjx16@GJXAIOU",[[1,6856,"`"]],[6856,6856],[6857,6857]]]],null,"gjx16@GJXAIOU"],["c39db19b-7594-4ecb-8aa6-e1825ac6fb27",1550229624912,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)\n```\n注：girl就是一个实例（girl这个变量引用了Person（‘zhangsan’）实例对象），它有属性和方法\nself本质上就是实例对象本身\n\n## 4.3 属性和数据\n\n### 4.3.1 类属性\n```python\n'''\n4.3 类属性\n'''\nclass A:\n    x = 5\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性\n```\n- x为类中的一个变量也为属性\n- 几类特殊的属性的含义：\n  - A.__name__  :以字符串的形式返回类的名字\n  - A.__doc__: 显示类的文档\n  - A.__base__:类A的所有父类，默认没有其他继承就是显示object类\n  - A.__dict__:以字典的形式显示类的所有属性\n  - A.__module__:类所在的模块\n    - 例如：Person.__module__ 显示结果为__main__,即类Person的全称为：__main__.Person\n\n\n\n### 4.3.1 创建实例\n```python\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n```\n\n### 4.3.2 实例属性\n```python\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\n\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用\n```\n\n## 4.4 方法\n\n### 4.4.1 绑定方法和非绑定方法\n- 绑定方法：使用实例调用的方法\n- 非绑定方法：使用类的名字调用的方法\n```python\n'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法\n```\n\n**描述器**\n- 含有：`__get__()`、`__set__()`、`__delete__()`这些方法的对象称为描述器\n- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现机制\n- p198见详述\n\n\n### 4.4.2 类方法和静态方法\n- **classmethod**\n```python\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Foo:\n    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())\n```\n**类方法：** 就是类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是这个类对象，即将类对象作为引用对象传入到该方法中。\n\n\n- **staticmethod**\n```python\n\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n```\n\n\n\n## 4.5 继承\n继承使子类具有父类的方法和属性\n继承最主要的用途是实现多态\n\n### 4.5.2 单继承\n```python\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person): #继承Person \n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准  # 如果子类中没有初始化函数，在实例化的时候就会继承父类中的初始化函数并且执行；\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n\n```\n\n程序运行结果：\n`This is son`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n### 4.5.3 调用覆盖的方法\n\n- 如果子类重写了父类的方法，现在子类中调用父类的方法\n```python\n# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n        super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n        self.real_name = \"lisi\"\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n```\n程序运行结果：\n`This is father`\n`This is son`\n`lisi`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n- 多继承的继承顺序\n```python\n## 多重继承的继承顺序\n# 广度优先\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass\nclass AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass\n\nif __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n    ab = AB()\n    ab.Ha()\n    ab.La()\n```\n程序运行结果：\n`(<class '__main__.AB'>, <class '__main__.AB1'>, <class '__main__.AB2'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)`\n`This is A ha`\n`This is AB2 la`\n\n\n\n\n\n\n\n\n## 4.6 多态与封装\n\n### 4.6.1 多态\n```python\n### 4.6.1 多态：同一方法传入不同参数结果不同 /对象多种表现形式的体现\n\n# count :数一数某个元素在对象中出现的次数\nprint(\"This is a book\".count(\"s\" ))\nprint([1,2,3,4,2,3,2].count(2))\n\nf = lambda x,y: x+y\nprint(f(2,3))\nprint(f(\"hello\",\"world\"))\nprint(f([\"a\",\"b\"],[\"c\",\"d\"]))\n\n# python 不检查传入对象的类型，这种方式称为：“隐式类型”、“结构式类型”、\"鸭子类型”\n# 鸭子类型：动态类型的一种风格，该风格中一个对象有效的语义，不是由继承自特定的类或者特定的接口决定的，而是有当前方法和属性的集合决定\n```\n程序运行结果：\n`2`\n`3`\n`5`\n`helloworld`\n`['a', 'b', 'c', 'd']`\n   \n",[[1550229582172,["gjx16@GJXAIOU",[[1,6900,"\n"]],[6899,6899],[6900,6900]]],[1550229582379,["gjx16@GJXAIOU",[[1,6901,"\n"]],[6900,6900],[6901,6901]]],[1550229582788,["gjx16@GJXAIOU",[[1,6902,"\n"]],[6901,6901],[6902,6902]]],[1550229583281,["gjx16@GJXAIOU",[[1,6903,"\n"]],[6902,6902],[6903,6903]]],[1550229595476,["gjx16@GJXAIOU",[[1,6903,"### 4.6.2 封装和私有化"]],[6903,6903],[6919,6919]]],[1550229596101,["gjx16@GJXAIOU",[[1,6920,"\n"]],[6919,6919],[6920,6920]]],[1550229610426,["gjx16@GJXAIOU",[[1,6920,"# 私有化：将类或者函数中的方法或者属性限定在某个区域之内，外部无法调用 #私有化方法：在需要私有的数据或者方法属性前面加上__"]],[6920,6920],[6984,6984]]],[1550229614138,["gjx16@GJXAIOU",[[-1,6920,"# "]],[6922,6922],[6920,6920]]],[1550229615757,["gjx16@GJXAIOU",[[1,6920,"- "]],[6920,6920],[6922,6922]]],[1550229618276,["gjx16@GJXAIOU",[[-1,6957,"#"]],[6958,6958],[6957,6957]]],[1550229619348,["gjx16@GJXAIOU",[[1,6957,"\n"]],[6957,6957],[6958,6958]]],[1550229620429,["gjx16@GJXAIOU",[[1,6958,"- "]],[6958,6958],[6960,6960]]],[1550229626326,["gjx16@GJXAIOU",[[1,6987,"- \n"]],[6986,6986],[6989,6989]]],[1550229627196,["gjx16@GJXAIOU",[[-1,6987,"- "]],[6989,6989],[6987,6987]]],[1550229628200,["gjx16@GJXAIOU",[[1,6987,"·"]],[6987,6987],[6988,6988]]],[1550229629105,["gjx16@GJXAIOU",[[-1,6987,"·"]],[6988,6988],[6987,6987]]],[1550229630231,["gjx16@GJXAIOU",[[1,6987,"```"]],[6987,6987],[6990,6990]]],[1550229630270,["gjx16@GJXAIOU",[[1,6990,"language\n```\n"]],[6990,6990],[6990,6998]]],[1550229631669,["gjx16@GJXAIOU",[[-1,6990,"language"],[1,6998,"p"]],[6990,6998],[6991,6991]]],[1550229632398,["gjx16@GJXAIOU",[[1,6991,"ython"]],[6991,6991],[6996,6996]]],[1550229633132,["gjx16@GJXAIOU",[[1,6997,"\n"]],[6996,6996],[6997,6997]]],[1550229647627,["gjx16@GJXAIOU",[[1,6997,"### 4.6.2 封装和私有化\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n    def __Python(self):\n        print(\"I Love Python\")\n    def code(self):\n        print(\"Which Language do you like\")\n        self.__Python()\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.me) #这里可以 使用\n    protect.code() #因为code()方法和__Python（）均在同一个类中，因此可以调用\n    print(protect.__name) # 私有属性类外不能调用\n    protect.__python()"]],[6997,6997],[7496,7496]]],[1550229652417,["gjx16@GJXAIOU",[[1,7502,"\n"]],[7500,7500],[7501,7501]]],[1550229653914,["gjx16@GJXAIOU",[[1,7501,"chegn"]],[7501,7501],[7506,7506]]],[1550229654905,["gjx16@GJXAIOU",[[-1,7501,"chegn"]],[7506,7506],[7501,7501]]],[1550229659765,["gjx16@GJXAIOU",[[1,7501,"程序运行结果："]],[7501,7501],[7508,7508]]],[1550229660202,["gjx16@GJXAIOU",[[1,7510,"\n"]],[7508,7508],[7509,7509]]],[1550229661532,["gjx16@GJXAIOU",[[1,7509,"``"]],[7509,7509],[7511,7511]]],[1550229676817,["gjx16@GJXAIOU",[[1,7510,"zhangsan\nWhich Language do you like\nI Love Python\nTraceback (most recent call last):\n  File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 343, in <module>\n    print(protect.__name) # 私有属性类外不能调用\nAttributeError: 'ProtectMe' object has no attribute '__name'"]],[7510,7510],[7800,7800]]],[1550229679268,["gjx16@GJXAIOU",[[1,7518,"`"]],[7518,7518],[7519,7519]]],[1550229680412,["gjx16@GJXAIOU",[[1,7546,"`"]],[7546,7546],[7547,7547]]],[1550229681103,["gjx16@GJXAIOU",[[1,7561,"`"]],[7561,7561],[7562,7562]]],[1550229682527,["gjx16@GJXAIOU",[[1,7597,"`"]],[7597,7597],[7598,7598]]],[1550229683924,["gjx16@GJXAIOU",[[1,7688,"`"]],[7688,7688],[7689,7689]]],[1550229686937,["gjx16@GJXAIOU",[[-1,7688,"`"]],[7689,7689],[7688,7688]]],[1550229690675,["gjx16@GJXAIOU",[[1,7520,"`"]],[7520,7520],[7521,7521]]],[1550229691919,["gjx16@GJXAIOU",[[1,7549,"`"]],[7549,7549],[7550,7550]]],[1550229693124,["gjx16@GJXAIOU",[[1,7565,"`"]],[7565,7565],[7566,7566]]],[1550229695108,["gjx16@GJXAIOU",[[1,7602,"`"]],[7602,7602],[7603,7603]]],[1550229696421,["gjx16@GJXAIOU",[[1,7708,"`"]],[7708,7708],[7709,7709]]],[1550229700561,["gjx16@GJXAIOU",[[-1,7603,"  "]],[7605,7605],[7603,7603]]],[1550229702893,["gjx16@GJXAIOU",[[1,7603,"`"]],[7603,7603],[7604,7604]]],[1550229704835,["gjx16@GJXAIOU",[[-1,7602,"``"]],[7604,7604],[7602,7602]]],[1550229705922,["gjx16@GJXAIOU",[[-1,7601,"\n"]],[7602,7602],[7601,7601]]],[1550229709410,["gjx16@GJXAIOU",[[-1,7600,"`"]],[7601,7601],[7600,7600]]],[1550229723963,["gjx16@GJXAIOU",[[-1,7703,"`"]],[7704,7704],[7703,7703]]],[1550229731278,["gjx16@GJXAIOU",[[1,7703,"`"]],[7703,7703],[7704,7704]]],[1550229734332,["gjx16@GJXAIOU",[[1,7709,"`"]],[7709,7709],[7710,7710]]],[1550229740764,["gjx16@GJXAIOU",[[1,7744,"`"]],[7744,7744],[7745,7745]]],[1550229741870,["gjx16@GJXAIOU",[[1,7807,"`"]],[7807,7807],[7808,7808]]],[1550229743197,["gjx16@GJXAIOU",[[-1,7807,"`"]],[7808,7808],[7807,7807]]],[1550229745280,["gjx16@GJXAIOU",[[1,7746,"`"]],[7746,7746],[7747,7747]]],[1550230721624,["gjx16@GJXAIOU",[[1,7810,"\n"]],[7809,7809],[7810,7810]]],[1550230723467,["gjx16@GJXAIOU",[[1,7810,"- shiyon"]],[7810,7810],[7818,7818]]],[1550230724711,["gjx16@GJXAIOU",[[-1,7812,"shiyon"]],[7818,7818],[7812,7812]]],[1550230765800,["gjx16@GJXAIOU",[[1,7812,"使用装饰器"]],[7812,7812],[7817,7817]]],[1550230771724,["gjx16@GJXAIOU",[[1,7817,"进行"]],[7817,7817],[7819,7819]]],[1550230772336,["gjx16@GJXAIOU",[[-1,7817,"进行"]],[7819,7819],[7817,7817]]],[1550230782875,["gjx16@GJXAIOU",[[1,7817,"调用私有化的属性与方法"]],[7817,7817],[7828,7828]]],[1550230783312,["gjx16@GJXAIOU",[[1,7829,"- \n"]],[7828,7828],[7831,7831]]],[1550230784507,["gjx16@GJXAIOU",[[-1,7829,"- "]],[7831,7831],[7829,7829]]],[1550230786181,["gjx16@GJXAIOU",[[1,7829,"```"]],[7829,7829],[7832,7832]]],[1550230786220,["gjx16@GJXAIOU",[[1,7832,"language\n```\n"]],[7832,7832],[7832,7840]]],[1550230787282,["gjx16@GJXAIOU",[[-1,7832,"language"],[1,7840,"["]],[7832,7840],[7833,7833]]],[1550230788088,["gjx16@GJXAIOU",[[1,7833,"ython"]],[7833,7833],[7838,7838]]],[1550230789666,["gjx16@GJXAIOU",[[-1,7832,"[ython"]],[7838,7838],[7832,7832]]],[1550230790723,["gjx16@GJXAIOU",[[1,7832,"pyu"]],[7832,7832],[7835,7835]]],[1550230791751,["gjx16@GJXAIOU",[[-1,7834,"u"]],[7835,7835],[7834,7834]]],[1550230792722,["gjx16@GJXAIOU",[[1,7834,"thon"]],[7834,7834],[7838,7838]]],[1550230793266,["gjx16@GJXAIOU",[[1,7839,"\n"]],[7838,7838],[7839,7839]]],[1550230797449,["gjx16@GJXAIOU",[[1,7839,"# 使用装饰器调用类的私有属性\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n\n    @property        # 装饰器：主要用于为已存在的对象添加功能\n    def code(self):\n        return self.__name\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.code)"]],[7839,7839],[8160,8160]]],[1550230800482,["gjx16@GJXAIOU",[[1,8166,"\n"]],[8164,8164],[8165,8165]]],[1550230801634,["gjx16@GJXAIOU",[[1,8165,"cheng"]],[8165,8165],[8170,8170]]],[1550230802759,["gjx16@GJXAIOU",[[-1,8165,"cheng"]],[8170,8170],[8165,8165]]],[1550230809762,["gjx16@GJXAIOU",[[1,8165,"程序运行结果为："]],[8165,8165],[8173,8173]]],[1550230810290,["gjx16@GJXAIOU",[[1,8175,"\n"]],[8173,8173],[8174,8174]]],[1550230812194,["gjx16@GJXAIOU",[[1,8174,"``"]],[8174,8174],[8176,8176]]],[1550230816182,["gjx16@GJXAIOU",[[1,8175,"lilsi"]],[8175,8175],[8180,8180]]],[1550230817354,["gjx16@GJXAIOU",[[-1,8177,"lsi"]],[8180,8180],[8177,8177]]],[1550230818065,["gjx16@GJXAIOU",[[1,8177,"si"]],[8177,8177],[8179,8179]]],[1550230820672,["gjx16@GJXAIOU",[[1,8182,"\n"]],[8181,8181],[8182,8182]]],[1550230820805,["gjx16@GJXAIOU",[[1,8183,"\n"]],[8182,8182],[8183,8183]]],[1550230820938,["gjx16@GJXAIOU",[[1,8184,"\n"]],[8183,8183],[8184,8184]]],[1550230822578,["gjx16@GJXAIOU",[[1,8184,"  "]],[8184,8184],[8186,8186]]],[1550230824425,["gjx16@GJXAIOU",[[-1,8184,"  "],[1,8186,"\n"]],[8186,8186],[8185,8185]]],[1550230824582,["gjx16@GJXAIOU",[[1,8186,"\n"]],[8185,8185],[8186,8186]]],[1550230824704,["gjx16@GJXAIOU",[[1,8187,"\n"]],[8186,8186],[8187,8187]]],[1550230824946,["gjx16@GJXAIOU",[[1,8188,"\n"]],[8187,8187],[8188,8188]]],[1550230827155,["gjx16@GJXAIOU",[[1,8188,"## "]],[8188,8188],[8191,8191]]],[1550230832773,["gjx16@GJXAIOU",[[1,8191,"4.7 定制类"]],[8191,8191],[8198,8198]]],[1550230833234,["gjx16@GJXAIOU",[[1,8199,"\n"]],[8198,8198],[8199,8199]]],[1550231973541,["gjx16@GJXAIOU",[[-1,8202," "]],[8203,8203],[8202,8202]]],[1550231975265,["gjx16@GJXAIOU",[[1,8202,"- "]],[8202,8202],[8204,8204]]],[1550231976699,["gjx16@GJXAIOU",[[-1,8201," - "]],[8204,8204],[8201,8201]]],[1550232000775,["gjx16@GJXAIOU",[[1,8201,"类是对象，也是对象类型"]],[8201,8201],[8212,8212]]],[1550232620903,["gjx16@GJXAIOU",[[1,8213," \n"]],[8212,8212],[8214,8214]]],[1550232621279,["gjx16@GJXAIOU",[[-1,8213," "],[1,8214,"\n"]],[8214,8214],[8214,8214]]],[1550232622706,["gjx16@GJXAIOU",[[-1,8214,"\n"],[1,8215,"`"]],[8214,8214],[8215,8215]]],[1550232623081,["gjx16@GJXAIOU",[[1,8215,"``"]],[8215,8215],[8217,8217]]],[1550232623123,["gjx16@GJXAIOU",[[1,8217,"language\n```\n"]],[8217,8217],[8217,8225]]],[1550232625012,["gjx16@GJXAIOU",[[-1,8217,"language"],[1,8225,"p"]],[8217,8225],[8218,8218]]],[1550232625630,["gjx16@GJXAIOU",[[1,8218,"ytohn"]],[8218,8218],[8223,8223]]],[1550232626191,["gjx16@GJXAIOU",[[1,8224,"\n"]],[8223,8223],[8224,8224]]],[1550232626934,["gjx16@GJXAIOU",[[-1,8224,"\n"]],[8224,8224],[8223,8223]]],[1550232627951,["gjx16@GJXAIOU",[[-1,8220,"ohn"]],[8223,8223],[8220,8220]]],[1550232629802,["gjx16@GJXAIOU",[[1,8220,"hon"]],[8220,8220],[8223,8223]]],[1550232630558,["gjx16@GJXAIOU",[[1,8224,"\n"]],[8223,8223],[8224,8224]]],[1550232636117,["gjx16@GJXAIOU",[[1,8224,"## 4.7 定制类（定制对象类型）\n### 4.7.1 类和对象类型\nclass A:pass\nclass B:pass\na = A()\nb = B()\nprint(type(a)) #返回对象a的对象类型，使用type()可以得到实例或者变量所引用对象的类型\nprint(type(b))\nprint(isinstance(a, A))  #也可以使用isinstance判断一个对象是不是另一个给定类的实例\nm = 1\nprint(isinstance(m, int)) #得出：m所引用的对象是整数型"]],[8224,8224],[8478,8478]]],[1550232649713,["gjx16@GJXAIOU",[[1,8483,"\n"]],[8482,8482],[8483,8483]]],[1550232649903,["gjx16@GJXAIOU",[[1,8484,"\n"]],[8483,8483],[8484,8484]]],[1550232650825,["gjx16@GJXAIOU",[[-1,8484,"\n"]],[8484,8484],[8483,8483]]],[1550232651969,["gjx16@GJXAIOU",[[-1,8483,"\n"],[1,8484,"c"]],[8483,8483],[8484,8484]]],[1550232652657,["gjx16@GJXAIOU",[[1,8484,"hengx"]],[8484,8484],[8489,8489]]],[1550232654182,["gjx16@GJXAIOU",[[-1,8484,"hengx"]],[8489,8489],[8484,8484]]],[1550232654623,["gjx16@GJXAIOU",[[-1,8483,"c"],[1,8484,"\n"]],[8484,8484],[8483,8483]]],[1550232657067,["gjx16@GJXAIOU",[[-1,8483,"\n"],[1,8484,"程序"]],[8483,8483],[8485,8485]]],[1550232661005,["gjx16@GJXAIOU",[[1,8485,"运行结果："]],[8485,8485],[8490,8490]]],[1550232662033,["gjx16@GJXAIOU",[[1,8490,"\n\n"]],[8490,8490],[8491,8491]]],[1550232663820,["gjx16@GJXAIOU",[[-1,8491,"\n"],[1,8492,"`"]],[8491,8491],[8492,8492]]],[1550232664012,["gjx16@GJXAIOU",[[1,8492,"`"]],[8492,8492],[8493,8493]]],[1550232667166,["gjx16@GJXAIOU",[[1,8492,"<class '__main__.A'>\n<class '__main__.B'>\nTrue\nTrue"]],[8492,8492],[8543,8543]]],[1550232672185,["gjx16@GJXAIOU",[[1,8512,"`"]],[8512,8512],[8513,8513]]],[1550232674796,["gjx16@GJXAIOU",[[1,8534,"`"]],[8534,8534],[8535,8535]]],[1550232676059,["gjx16@GJXAIOU",[[1,8514,"`"]],[8514,8514],[8515,8515]]],[1550232677250,["gjx16@GJXAIOU",[[1,8537,"`"]],[8537,8537],[8538,8538]]],[1550232678245,["gjx16@GJXAIOU",[[1,8543,"`"]],[8543,8543],[8544,8544]]],[1550232679001,["gjx16@GJXAIOU",[[1,8542,"`"]],[8542,8542],[8543,8543]]],[1550232680827,["gjx16@GJXAIOU",[[1,8550,"\n\n"]],[8550,8550],[8551,8551]]],[1550232680962,["gjx16@GJXAIOU",[[1,8552,"\n"]],[8551,8551],[8552,8552]]],[1550234226549,["gjx16@GJXAIOU",[[-1,8243,"### 4.7.1 类和对象类型"]],[8243,8259],[8243,8243]]],[1550234230212,["gjx16@GJXAIOU",[[1,8213,"### 4.7.1 类和对象类型"]],[8213,8213],[8229,8229]]],[1550234234276,["gjx16@GJXAIOU",[[1,8553,"\n"]],[8551,8551],[8552,8552]]],[1550234234996,["gjx16@GJXAIOU",[[1,8552,"### 4.7.1 类和对象类型"]],[8552,8552],[8568,8568]]],[1550234241140,["gjx16@GJXAIOU",[[-1,8562,"类和"]],[8564,8564],[8562,8562]]],[1550234244388,["gjx16@GJXAIOU",[[1,8562,"zidingy"]],[8562,8562],[8569,8569]]],[1550234246030,["gjx16@GJXAIOU",[[-1,8562,"zidingy"]],[8569,8569],[8562,8562]]],[1550234250035,["gjx16@GJXAIOU",[[1,8562,"自定义"]],[8562,8562],[8565,8565]]],[1550234253238,["gjx16@GJXAIOU",[[1,8571,"\n"]],[8569,8569],[8570,8570]]],[1550234273840,["gjx16@GJXAIOU",[[1,8570,"·"]],[8570,8570],[8571,8571]]],[1550234274596,["gjx16@GJXAIOU",[[-1,8570,"·"]],[8571,8571],[8570,8570]]],[1550234275968,["gjx16@GJXAIOU",[[1,8570,"```"]],[8570,8570],[8573,8573]]],[1550234276010,["gjx16@GJXAIOU",[[1,8573,"language\n```\n"]],[8573,8573],[8573,8581]]],[1550234276750,["gjx16@GJXAIOU",[[-1,8573,"language"],[1,8581,"p"]],[8573,8581],[8574,8574]]],[1550234277816,["gjx16@GJXAIOU",[[1,8574,"ython"]],[8574,8574],[8579,8579]]],[1550234278564,["gjx16@GJXAIOU",[[1,8580,"\n"]],[8579,8579],[8580,8580]]],[1550234282945,["gjx16@GJXAIOU",[[1,8580,"##示例一：得到仅保留小数点后两位小数的数\n#!usr/bin/env python\n# coding=utf-8\n\nclass RoundFloat:\n    #定义一种两位小数的浮点数类型，利用该类可以得到两位小数的浮点数\n    def __init__(self, val):\n        assert isinstance(val, float), \"value must be a float\"#assert的作用相当于布尔运算，当运行到这里，进行对象值的判断，如果为false，则抛出后面的异常提示\n        self.value = round(val, 2)\n\n    def __str__(self): #为能够得到打印的内容\n        return \"{:.2f}\".format(self.value) #将前面四舍五入保留两位小数的浮点数，以小数点后有两位小数的形式输出\n\n    __repr__ = __str__#在类被调用即向变量提供__str__()里的内容\n\nif __name__ ==\"__main__\":\n    r = RoundFloat(2.185)\n    print(r)\n    print(type(r))"]],[8580,8580],[9121,9121]]],[1550234309391,["gjx16@GJXAIOU",[[1,8785,"  "]],[8785,8785],[8787,8787]]],[1550234315237,["gjx16@GJXAIOU",[[1,9130,"\n"]],[9127,9127],[9128,9128]]],[1550234317647,["gjx16@GJXAIOU",[[1,9128,"chengx"]],[9128,9128],[9134,9134]]],[1550234319355,["gjx16@GJXAIOU",[[-1,9128,"chengx"]],[9134,9134],[9128,9128]]],[1550234327351,["gjx16@GJXAIOU",[[1,9131,"\n"]],[9127,9127],[9128,9128]]],[1550234333369,["gjx16@GJXAIOU",[[1,9128,"chengxu"]],[9128,9128],[9135,9135]]],[1550234334918,["gjx16@GJXAIOU",[[-1,9128,"chengxu"]],[9135,9135],[9128,9128]]],[1550234335243,["gjx16@GJXAIOU",[[-1,9131,"\n"]],[9128,9128],[9127,9127]]],[1550234340882,["gjx16@GJXAIOU",[[1,9127,"程序"]],[9127,9127],[9129,9129]]],[1550234343387,["gjx16@GJXAIOU",[[-1,9127,"程序"]],[9129,9129],[9127,9127]]],[1550234344119,["gjx16@GJXAIOU",[[1,9131,"\n"]],[9127,9127],[9128,9128]]],[1550234349841,["gjx16@GJXAIOU",[[1,9128,"程序运行结果："]],[9128,9128],[9135,9135]]],[1550234350944,["gjx16@GJXAIOU",[[1,9139,"\n"]],[9135,9135],[9136,9136]]],[1550234351994,["gjx16@GJXAIOU",[[1,9136,"``"]],[9136,9136],[9138,9138]]],[1550234353947,["gjx16@GJXAIOU",[[1,9137,"2.19\n<class '__main__.RoundFloat'>"]],[9137,9137],[9171,9171]]],[1550234356488,["gjx16@GJXAIOU",[[1,9141,"`"]],[9141,9141],[9142,9142]]],[1550234360026,["gjx16@GJXAIOU",[[1,9143,"`"]],[9143,9143],[9144,9144]]],[1550235979838,["gjx16@GJXAIOU",[[1,9178,"\n"]],[9174,9174],[9175,9175]]],[1550235979985,["gjx16@GJXAIOU",[[1,9179,"\n"]],[9175,9175],[9176,9176]]],[1550235984018,["gjx16@GJXAIOU",[[1,9176,"```"]],[9176,9176],[9179,9179]]],[1550235984060,["gjx16@GJXAIOU",[[1,9179,"language\n```\n"]],[9179,9179],[9179,9187]]],[1550235984831,["gjx16@GJXAIOU",[[-1,9179,"language"],[1,9187,"p"]],[9179,9187],[9180,9180]]],[1550235985671,["gjx16@GJXAIOU",[[1,9180,"ython"]],[9180,9180],[9185,9185]]],[1550235986220,["gjx16@GJXAIOU",[[1,9186,"\n"]],[9185,9185],[9186,9186]]],[1550236001564,["gjx16@GJXAIOU",[[1,9186,"##示例二：输入分子分母得到分数\n\n#!usr/bin/env python\n# coding = utf-8\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\nif __name__ == \"__main__\":\n    f = Fraction(2, 3)\n    print(f)\n"]],[9186,9186],[9525,9525]]],[1550236012216,["gjx16@GJXAIOU",[[1,9530,"cheng"]],[9530,9530],[9535,9535]]],[1550236013315,["gjx16@GJXAIOU",[[-1,9530,"cheng"]],[9535,9535],[9530,9530]]],[1550236027591,["gjx16@GJXAIOU",[[1,9530,"程序运行结果：``"]],[9530,9530],[9539,9539]]],[1550236029101,["gjx16@GJXAIOU",[[1,9538,"2/3"]],[9538,9538],[9541,9541]]],[1550237850573,["gjx16@GJXAIOU",[[1,9546,"\n"]],[9543,9543],[9544,9544]]],[1550237851387,["gjx16@GJXAIOU",[[1,9547,"\n"]],[9544,9544],[9545,9545]]],[1550237853184,["gjx16@GJXAIOU",[[1,9545,"```"]],[9545,9545],[9548,9548]]],[1550237853226,["gjx16@GJXAIOU",[[1,9548,"language\n```\n"]],[9548,9548],[9548,9556]]],[1550237854101,["gjx16@GJXAIOU",[[-1,9548,"language"],[1,9556,"p"]],[9548,9556],[9549,9549]]],[1550237856966,["gjx16@GJXAIOU",[[1,9549,"ython"]],[9549,9549],[9554,9554]]],[1550237858185,["gjx16@GJXAIOU",[[1,9555,"\n"]],[9554,9554],[9555,9555]]],[1550237862174,["gjx16@GJXAIOU",[[1,9555,"## 示例三： 实现分数计算 1/2 + 1/3 = 5/6\n#收下按照最小公倍数通分，然后分子相加\n#最小公倍数lcm(a, b) = 丨a*b丨 /gcd(a,b)   注：丨因为注释所以有点斜 ，gcd(a,b)表示两个数的最大公约数\n\n #！usr/bin/env python\n # coding = utf-8\n\ndef gcd(a, b):\n     #求最大公约数\n    if not a > b:\n        a, b = b, a\n    while b != 0:\n        remainder = a % b\n        a, b = b, remainder\n    return  a\n\ndef lcm(a, b):\n     #求最小公倍数\n    return (a * b) / gcd(a, b)\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\n    def __add__(self, other): #这个类中规定了加减乘除等运算等特殊方法\n        lcm_num = lcm(self.denom, other.denom)\n        number_sum = (lcm_num / self.denom * self.number) + (lcm_num / other.denom * other.number)\n        return Fraction(number_sum, lcm_num)\n\n\nif __name__ == \"__main__\":\n    m = Fraction(1, 3)\n    n = Fraction(1, 2)\n    s = m + n\n    print(m,\"+\",n ,\" = \",s)"]],[9555,9555],[10508,10508]]],[1550237868386,["gjx16@GJXAIOU",[[-1,9555,"## 示例三： 实现分数计算 1/2 + 1/3 = 5/6"]],[9555,9585],[9555,9555]]],[1550237871658,["gjx16@GJXAIOU",[[1,9544,"-## 示例三： 实现分数计算 1/2 + 1/3 = 5/6"]],[9544,9544],[9575,9575]]],[1550237875906,["gjx16@GJXAIOU",[[-1,9545,"## "]],[9548,9548],[9545,9545]]],[1550237876335,["gjx16@GJXAIOU",[[1,9545," "]],[9545,9545],[9546,9546]]],[1550237885545,["gjx16@GJXAIOU",[[-1,9186,"##示例二：输入分子分母得到分数"]],[9186,9202],[9186,9186]]],[1550237887642,["gjx16@GJXAIOU",[[1,9176,"\n"]],[9175,9175],[9176,9176]]],[1550237890932,["gjx16@GJXAIOU",[[1,9176,"- ##示例二：输入分子分母得到分数"]],[9176,9176],[9194,9194]]],[1550237894361,["gjx16@GJXAIOU",[[-1,9178,"##"]],[9180,9180],[9178,9178]]],[1550237899468,["gjx16@GJXAIOU",[[-1,9204,"\n"]],[9204,9204],[9203,9203]]],[1550237900546,["gjx16@GJXAIOU",[[-1,9203,"\n"]],[9203,9203],[9202,9202]]],[1550237904874,["gjx16@GJXAIOU",[[1,9176,"\n"]],[9174,9174],[9175,9175]]],[1550237912061,["gjx16@GJXAIOU",[[1,10515,"\n"]],[10511,10511],[10512,10512]]],[1550237913637,["gjx16@GJXAIOU",[[1,10512,"ch"]],[10512,10512],[10514,10514]]],[1550237914201,["gjx16@GJXAIOU",[[-1,10512,"ch"]],[10514,10514],[10512,10512]]],[1550237919535,["gjx16@GJXAIOU",[[1,10512,"程序运行结果："]],[10512,10512],[10519,10519]]],[1550237920063,["gjx16@GJXAIOU",[[1,10523,"\n"]],[10519,10519],[10520,10520]]],[1550237928535,["gjx16@GJXAIOU",[[1,10520,"·"]],[10520,10520],[10521,10521]]],[1550237929738,["gjx16@GJXAIOU",[[-1,10520,"·"]],[10521,10521],[10520,10520]]],[1550237930333,["gjx16@GJXAIOU",[[1,10520,"``"]],[10520,10520],[10522,10522]]],[1550237931954,["gjx16@GJXAIOU",[[1,10521,"1/3 + 1/2  =  5.0/6.0"]],[10521,10521],[10542,10542]]],[1550237933603,["gjx16@GJXAIOU",[[1,10547,"\n"]],[10543,10543],[10544,10544]]],[1550237933741,["gjx16@GJXAIOU",[[1,10548,"\n"]],[10544,10544],[10545,10545]]],[1550237944325,["gjx16@GJXAIOU",[[1,10545,"- za"]],[10545,10545],[10549,10549]]],[1550237945002,["gjx16@GJXAIOU",[[-1,10547,"za"]],[10549,10549],[10547,10547]]],[1550237960105,["gjx16@GJXAIOU",[[1,10547,"在python中实现某种运算本质上都是"]],[10547,10547],[10566,10566]]],[1550237964514,["gjx16@GJXAIOU",[[-1,10561,"本质上都是"]],[10566,10566],[10561,10561]]],[1550237967992,["gjx16@GJXAIOU",[[1,10561,"所使用的"]],[10561,10561],[10565,10565]]],[1550237988734,["gjx16@GJXAIOU",[[1,10565,"运算符本质上是以特殊方法实现的，七对应"]],[10565,10565],[10584,10584]]],[1550237989706,["gjx16@GJXAIOU",[[-1,10581,"七对应"]],[10584,10584],[10581,10581]]],[1550238010982,["gjx16@GJXAIOU",[[1,10581,"其对应关系为:P218"]],[10581,10581],[10592,10592]]],[1550238012901,["gjx16@GJXAIOU",[[1,10593,"- \n"]],[10592,10592],[10595,10595]]],[1550238033622,["gjx16@GJXAIOU",[[1,10593,"  "]],[10595,10595],[10597,10597]]],[1550238035761,["gjx16@GJXAIOU",[[1,10597,"liru "]],[10597,10597],[10602,10602]]],[1550238037228,["gjx16@GJXAIOU",[[-1,10597,"liru "]],[10602,10602],[10597,10597]]],[1550238049126,["gjx16@GJXAIOU",[[1,10597,"例如加法对应的特殊方法为：``"]],[10597,10597],[10612,10612]]],[1550238054677,["gjx16@GJXAIOU",[[1,10611,"__ass"]],[10611,10611],[10616,10616]]],[1550238055394,["gjx16@GJXAIOU",[[-1,10614,"ss"]],[10616,10616],[10614,10614]]],[1550238058287,["gjx16@GJXAIOU",[[1,10614,"dd))_"]],[10614,10614],[10619,10619]]],[1550238060524,["gjx16@GJXAIOU",[[-1,10616,"))_"]],[10619,10619],[10616,10616]]],[1550238061854,["gjx16@GJXAIOU",[[1,10616,"__"]],[10616,10616],[10618,10618]]],[1550238064685,["gjx16@GJXAIOU",[[1,10619,"h"]],[10619,10619],[10620,10620]]],[1550238065097,["gjx16@GJXAIOU",[[-1,10619,"h"]],[10620,10620],[10619,10619]]],[1550238069206,["gjx16@GJXAIOU",[[1,10619,"或者``"]],[10619,10619],[10623,10623]]],[1550238077186,["gjx16@GJXAIOU",[[1,10622,"__radd__"]],[10622,10622],[10630,10630]]],[1550238081122,["gjx16@GJXAIOU",[[1,10631,",liang"]],[10631,10631],[10637,10637]]],[1550238082804,["gjx16@GJXAIOU",[[-1,10632,"liang"]],[10637,10637],[10632,10632]]],[1550238084308,["gjx16@GJXAIOU",[[1,10632,"Lingge"]],[10632,10632],[10638,10638]]],[1550238086105,["gjx16@GJXAIOU",[[-1,10631,",Lingge"]],[10638,10638],[10631,10631]]],[1550238087140,["gjx16@GJXAIOU",[[1,10631,","]],[10631,10631],[10632,10632]]],[1550238125011,["gjx16@GJXAIOU",[[1,10632,"两个对象能否相加，取决于两对象是否含有``"]],[10632,10632],[10653,10653]]],[1550238129631,["gjx16@GJXAIOU",[[1,10652,"__add__"]],[10652,10652],[10659,10659]]],[1550238131156,["gjx16@GJXAIOU",[[1,10660,"f"]],[10660,10660],[10661,10661]]],[1550238131680,["gjx16@GJXAIOU",[[-1,10660,"f"]],[10661,10661],[10660,10660]]],[1550238133206,["gjx16@GJXAIOU",[[1,10660,"方法"]],[10660,10660],[10662,10662]]],[1550238700498,["gjx16@GJXAIOU",[[1,10663,"  - \n"]],[10662,10662],[10667,10667]]],[1550238700647,["gjx16@GJXAIOU",[[-1,10663,"  - "]],[10667,10667],[10664,10664]]],[1550238700795,["gjx16@GJXAIOU",[[1,10667,"\n"]],[10664,10664],[10665,10665]]],[1550238700937,["gjx16@GJXAIOU",[[1,10668,"\n"]],[10665,10665],[10666,10666]]],[1550238701061,["gjx16@GJXAIOU",[[1,10669,"\n"]],[10666,10666],[10667,10667]]],[1550238701185,["gjx16@GJXAIOU",[[1,10670,"\n"]],[10667,10667],[10668,10668]]],[1550238706176,["gjx16@GJXAIOU",[[1,10668,"###"]],[10668,10668],[10671,10671]]],[1550238707248,["gjx16@GJXAIOU",[[-1,10670,"#"]],[10671,10671],[10670,10670]]],[1550238710701,["gjx16@GJXAIOU",[[1,10670," 4.87"]],[10670,10670],[10675,10675]]],[1550238711384,["gjx16@GJXAIOU",[[-1,10674,"7"]],[10675,10675],[10674,10674]]],[1550238718566,["gjx16@GJXAIOU",[[1,10674," 一些特殊点"]],[10674,10674],[10680,10680]]],[1550238719324,["gjx16@GJXAIOU",[[1,10683,"\n"]],[10680,10680],[10681,10681]]],[1550238719809,["gjx16@GJXAIOU",[[1,10684,"\n"]],[10681,10681],[10682,10682]]],[1550238731866,["gjx16@GJXAIOU",[[1,10682,"### 4.8.1 优化内存"]],[10682,10682],[10696,10696]]],[1550239901123,["gjx16@GJXAIOU",[[1,10697,"```"]],[10697,10697],[10700,10700]]],[1550239901169,["gjx16@GJXAIOU",[[1,10700,"language\n```\n"]],[10700,10700],[10700,10708]]],[1550239902515,["gjx16@GJXAIOU",[[-1,10700,"language"],[1,10708,"p"]],[10700,10708],[10701,10701]]],[1550239903182,["gjx16@GJXAIOU",[[1,10701,"ython"]],[10701,10701],[10706,10706]]],[1550239903651,["gjx16@GJXAIOU",[[1,10707,"\n"]],[10706,10706],[10707,10707]]],[1550239907372,["gjx16@GJXAIOU",[[1,10707,"class Spring:\n    time = \"From march to June\"\n\nprint(Spring.__dict__) #每个类都有一个__dict__属性，包含了当前类的属性值\n\nyear = Spring()  #建立一个实例\nprint(year.__dict__)   # 实例也有这个属性，只是刚建立的时候为空\n\n#为了控制__dict__属性，使用__slots__属性替代__dict__属性\n\nclass Summer:\n    __slots__ = (\"tree\",\"flower\")\n\nprint(dir(Summer))  # 结果没有__dict__属性\n\nprint(Summer.__slots__)  #此时Summer仅有两个属性\ns1 = Summer()\ns2 = Summer()\nprint(s1.__slots__) # 实例也仅有两个属性\nprint(s2.__slots__)\nprint(id(s1.__slots__) == id(s2.__slots__)) #两个实例的__slots__在内存中占同一个位置\n\n\n# 使用__slots__优化了内存，同时实例不能增加属性，只能通过类属性进行增加"]],[10707,10707],[11243,11243]]],[1550239913217,["gjx16@GJXAIOU",[[1,11250,"\n"]],[11247,11247],[11248,11248]]],[1550239922167,["gjx16@GJXAIOU",[[1,11248,"程序运行结果："]],[11248,11248],[11255,11255]]],[1550239923049,["gjx16@GJXAIOU",[[1,11258,"\n"]],[11255,11255],[11256,11256]]],[1550239924468,["gjx16@GJXAIOU",[[1,11256,"``"]],[11256,11256],[11258,11258]]],[1550239937210,["gjx16@GJXAIOU",[[1,11257,"{'__module__': '__main__', 'time': 'From march to June', '__dict__': <attribute '__dict__' of 'Spring' objects>, '__weakref__': <attribute '__weakref__' of 'Spring' objects>, '__doc__': None}\n{}\n['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'flower', 'tree']\n('tree', 'flower')\n('tree', 'flower')\n('tree', 'flower')\nTrue"]],[11257,11257],[11862,11862]]],[1550239940959,["gjx16@GJXAIOU",[[1,11448,"`"]],[11448,11448],[11449,11449]]],[1550239943342,["gjx16@GJXAIOU",[[1,11450,"`"]],[11450,11450],[11451,11451]]],[1550239944655,["gjx16@GJXAIOU",[[1,11453,"`"]],[11453,11453],[11454,11454]]],[1550239947434,["gjx16@GJXAIOU",[[1,11455,"`"]],[11455,11455],[11456,11456]]],[1550239955584,["gjx16@GJXAIOU",[[1,11804,"`"]],[11804,11804],[11805,11805]]],[1550239960076,["gjx16@GJXAIOU",[[1,11824,"`"]],[11824,11824],[11825,11825]]],[1550239960705,["gjx16@GJXAIOU",[[1,11844,"`"]],[11844,11844],[11845,11845]]],[1550239961283,["gjx16@GJXAIOU",[[1,11864,"`"]],[11864,11864],[11865,11865]]],[1550239961946,["gjx16@GJXAIOU",[[1,11871,"`"]],[11871,11871],[11872,11872]]],[1550239963375,["gjx16@GJXAIOU",[[-1,11871,"`"]],[11872,11872],[11871,11871]]],[1550239965180,["gjx16@GJXAIOU",[[1,11866,"`"]],[11866,11866],[11867,11867]]],[1550239966092,["gjx16@GJXAIOU",[[1,11846,"`"]],[11846,11846],[11847,11847]]],[1550239966762,["gjx16@GJXAIOU",[[1,11826,"`"]],[11826,11826],[11827,11827]]],[1550239967719,["gjx16@GJXAIOU",[[1,11806,"`"]],[11806,11806],[11807,11807]]],[1550240198009,["gjx16@GJXAIOU",[[1,11878,"\n"]],[11876,11876],[11877,11877]]],[1550240198147,["gjx16@GJXAIOU",[[1,11879,"\n"]],[11877,11877],[11878,11878]]],[1550240198298,["gjx16@GJXAIOU",[[1,11880,"\n"]],[11878,11878],[11879,11879]]],[1550240205919,["gjx16@GJXAIOU",[[1,11881,"\n"]],[11877,11877],[11878,11878]]],[1550240206034,["gjx16@GJXAIOU",[[1,11882,"\n"]],[11878,11878],[11879,11879]]],[1550240206424,["gjx16@GJXAIOU",[[1,11879,"### 4.8.2 属性拦截 ## 当访问类或者实例的属性时候，若不存在，就会调用某一类方法"]],[11879,11879],[11925,11925]]],[1550240209992,["gjx16@GJXAIOU",[[1,11894,"\n"]],[11894,11894],[11895,11895]]],[1550240213294,["gjx16@GJXAIOU",[[-1,11895,"## "]],[11898,11898],[11895,11895]]],[1550240214602,["gjx16@GJXAIOU",[[1,11895,"\n"]],[11895,11895],[11896,11896]]],[1550240215941,["gjx16@GJXAIOU",[[1,11896,"- "]],[11896,11896],[11898,11898]]],[1550240218785,["gjx16@GJXAIOU",[[1,11927,"- \n"]],[11926,11926],[11929,11929]]],[1550240219225,["gjx16@GJXAIOU",[[-1,11927,"- "]],[11929,11929],[11927,11927]]],[1550240219359,["gjx16@GJXAIOU",[[-1,11930,"\n"]],[11927,11927],[11926,11926]]],[1550240222588,["gjx16@GJXAIOU",[[1,11926,"|"]],[11926,11926],[11927,11927]]],[1550240226062,["gjx16@GJXAIOU",[[-1,11926,"|"]],[11927,11927],[11926,11926]]],[1550240226816,["gjx16@GJXAIOU",[[1,11927,"- \n"]],[11926,11926],[11929,11929]]],[1550240229182,["gjx16@GJXAIOU",[[-1,11927,"- "]],[11929,11929],[11927,11927]]],[1550240245787,["gjx16@GJXAIOU",[[1,11927,"|方法|使用方式|"]],[11927,11927],[11936,11936]]],[1550240247087,["gjx16@GJXAIOU",[[1,11940,"\n"]],[11936,11936],[11937,11937]]],[1550240254891,["gjx16@GJXAIOU",[[1,11937,"---|---"]],[11937,11937],[11944,11944]]],[1550240255715,["gjx16@GJXAIOU",[[1,11945,"   |   \n"]],[11944,11944],[11945,11948]]],[1550240257157,["gjx16@GJXAIOU",[[-1,11945,"   "]],[11945,11948],[11945,11945]]],[1550240257854,["gjx16@GJXAIOU",[[-1,11944,"\n"]],[11945,11945],[11944,11944]]],[1550240263898,["gjx16@GJXAIOU",[[-1,11944,"|"]],[11945,11945],[11944,11944]]],[1550240265689,["gjx16@GJXAIOU",[[1,11944,"\n"]],[11944,11944],[11945,11945]]],[1550240271483,["gjx16@GJXAIOU",[[1,11945,"|"]],[11945,11945],[11946,11946]]],[1550240276789,["gjx16@GJXAIOU",[[1,11937,"|"]],[11937,11937],[11938,11938]]],[1550240280109,["gjx16@GJXAIOU",[[1,11945,"|"]],[11945,11945],[11946,11946]]],[1550240284687,["gjx16@GJXAIOU",[[-1,11947,"|"]],[11948,11948],[11947,11947]]],[1550240285088,["gjx16@GJXAIOU",[[-1,11946,"\n"]],[11947,11947],[11946,11946]]],[1550240286175,["gjx16@GJXAIOU",[[-1,11945,"|"]],[11946,11946],[11945,11945]]],[1550240288803,["gjx16@GJXAIOU",[[1,11945,"|"]],[11945,11945],[11946,11946]]],[1550240290055,["gjx16@GJXAIOU",[[-1,11945,"|"]],[11946,11946],[11945,11945]]],[1550240291371,["gjx16@GJXAIOU",[[1,11945,"\n"]],[11945,11945],[11946,11946]]],[1550240306012,["gjx16@GJXAIOU",[[1,11945,"|"]],[11945,11945],[11946,11946]]],[1550240307973,["gjx16@GJXAIOU",[[1,11947,"|   |   |\n"]],[11946,11946],[11948,11951]]],[1550240312804,["gjx16@GJXAIOU",[[1,11948,"_"],[1,11951,"_"]],[11948,11951],[11948,11953]]],[1550240312963,["gjx16@GJXAIOU",[[1,11949,"_"],[1,11952,"_"]],[11948,11953],[11948,11955]]],[1550240314733,["gjx16@GJXAIOU",[[-1,11948,"__   __"],[1,11955,"s"]],[11948,11955],[11949,11949]]],[1550240315705,["gjx16@GJXAIOU",[[-1,11948,"s"]],[11949,11949],[11948,11948]]],[1550240317153,["gjx16@GJXAIOU",[[1,11948,"————"]],[11948,11948],[11952,11952]]],[1550240319088,["gjx16@GJXAIOU",[[-1,11948,"————"]],[11952,11952],[11948,11948]]],[1550240320278,["gjx16@GJXAIOU",[[1,11948,"___"]],[11948,11948],[11950,11950]]],[1550240323041,["gjx16@GJXAIOU",[[1,11950,"aewt"]],[11950,11950],[11954,11954]]],[1550240324406,["gjx16@GJXAIOU",[[-1,11950,"aewt"]],[11954,11954],[11950,11950]]],[1550240324637,["gjx16@GJXAIOU",[[1,11950,"a"]],[11950,11950],[11951,11951]]],[1550240325798,["gjx16@GJXAIOU",[[-1,11950,"a"]],[11951,11951],[11950,11950]]],[1550240334818,["gjx16@GJXAIOU",[[1,11950,"setattr"]],[11950,11950],[11957,11957]]],[1550240335871,["gjx16@GJXAIOU",[[1,11958,"__"]],[11957,11957],[11959,11959]]],[1550240339438,["gjx16@GJXAIOU",[[-1,11959,"_"]],[11960,11960],[11959,11959]]],[1550240342798,["gjx16@GJXAIOU",[[1,11959,"()"]],[11959,11959],[11961,11961]]],[1550240353018,["gjx16@GJXAIOU",[[1,11960,"self,name,value"]],[11960,11960],[11975,11975]]],[1550240365138,["gjx16@GJXAIOU",[[1,11948,"`"]],[11948,11948],[11949,11949]]],[1550240368917,["gjx16@GJXAIOU",[[1,11977,"`"]],[11977,11977],[11978,11978]]],[1550240376218,["gjx16@GJXAIOU",[[-1,11935,"|"]],[11936,11936],[11935,11935]]],[1550240378190,["gjx16@GJXAIOU",[[-1,11944,"|"]],[11945,11945],[11944,11944]]],[1550240382590,["gjx16@GJXAIOU",[[-1,11980,"|"]],[11981,11981],[11980,11980]]],[1550240388036,["gjx16@GJXAIOU",[[1,11977,"ru"]],[11977,11977],[11979,11979]]],[1550240388602,["gjx16@GJXAIOU",[[-1,11977,"ru"]],[11979,11979],[11977,11977]]],[1550240390359,["gjx16@GJXAIOU",[[1,11977,"如果"]],[11977,11977],[11979,11979]]],[1550240486563,["gjx16@GJXAIOU",[[1,11935,"|"]],[11935,11935],[11936,11936]]],[1550240491148,["gjx16@GJXAIOU",[[1,11938," "]],[11938,11938],[11939,11939]]],[1550240492739,["gjx16@GJXAIOU",[[1,11942," "]],[11942,11942],[11943,11943]]],[1550240493983,["gjx16@GJXAIOU",[[1,11944," "]],[11944,11944],[11945,11945]]],[1550240496106,["gjx16@GJXAIOU",[[1,11948,"|"]],[11948,11948],[11949,11949]]],[1550240497231,["gjx16@GJXAIOU",[[1,11948," "]],[11948,11948],[11949,11949]]],[1550240501395,["gjx16@GJXAIOU",[[1,11948,"-"]],[11948,11948],[11949,11949]]],[1550240504988,["gjx16@GJXAIOU",[[1,11942,"-"]],[11942,11942],[11943,11943]]],[1550240513947,["gjx16@GJXAIOU",[[-1,11927,"|方法|使用方式|\n| ---- | ---- |\n|`__setattr__(self,name,value)`|如果   "]],[11927,11990],[11927,11927]]],[1550240516324,["gjx16@GJXAIOU",[[1,11928,"\n"]],[11927,11927],[11928,11928]]],[1550240517167,["gjx16@GJXAIOU",[[1,11928,"|方法|使用方式|\n| ---- | ---- |\n|`__setattr__(self,name,value)`|如果   "]],[11928,11928],[11991,11991]]],[1550240534892,["gjx16@GJXAIOU",[[1,11988,"要给那么"]],[11988,11988],[11992,11992]]],[1550240536623,["gjx16@GJXAIOU",[[-1,11990,"那么"]],[11992,11992],[11990,11990]]],[1550240543689,["gjx16@GJXAIOU",[[1,11990,"name赋值，则嗲用"]],[11990,11990],[12000,12000]]],[1550240545305,["gjx16@GJXAIOU",[[-1,11997,"则嗲用"]],[12000,12000],[11997,11997]]],[1550240548688,["gjx16@GJXAIOU",[[1,11997,"则调用"]],[11997,11997],[12000,12000]]],[1550240549729,["gjx16@GJXAIOU",[[1,12000,"\n"]],[12000,12000],[12001,12001]]],[1550240553203,["gjx16@GJXAIOU",[[1,12001,"|"]],[12001,12001],[12002,12002]]],[1550240554649,["gjx16@GJXAIOU",[[-1,12001,"|"]],[12002,12002],[12001,12001]]],[1550240555241,["gjx16@GJXAIOU",[[-1,12000,"\n"]],[12001,12001],[12000,12000]]],[1550240556724,["gjx16@GJXAIOU",[[1,12000,"|"]],[12000,12000],[12001,12001]]],[1550240578442,["gjx16@GJXAIOU",[[1,12001,"\n"]],[12001,12001],[12002,12002]]],[1550240586749,["gjx16@GJXAIOU",[[1,12002,"|·"]],[12002,12002],[12004,12004]]],[1550240587966,["gjx16@GJXAIOU",[[-1,12003,"·"]],[12004,12004],[12003,12003]]],[1550240588851,["gjx16@GJXAIOU",[[1,12003,"``"]],[12003,12003],[12005,12005]]],[1550240593099,["gjx16@GJXAIOU",[[1,12004,"__s"]],[12004,12004],[12007,12007]]],[1550240593607,["gjx16@GJXAIOU",[[-1,12006,"s"]],[12007,12007],[12006,12006]]],[1550240603814,["gjx16@GJXAIOU",[[1,12006,"getattr__()"]],[12006,12006],[12017,12017]]],[1550240607909,["gjx16@GJXAIOU",[[1,12016,"sel"]],[12016,12016],[12019,12019]]],[1550240612967,["gjx16@GJXAIOU",[[1,12019,"f,name"]],[12019,12019],[12025,12025]]],[1550240617045,["gjx16@GJXAIOU",[[1,12027,"|"]],[12027,12027],[12028,12028]]],[1550240620563,["gjx16@GJXAIOU",[[1,12031," "]],[12028,12028],[12029,12029]]],[1550240625062,["gjx16@GJXAIOU",[[1,12029,"如果namebei"]],[12029,12029],[12038,12038]]],[1550240626014,["gjx16@GJXAIOU",[[-1,12035,"bei"]],[12038,12038],[12035,12035]]],[1550240651109,["gjx16@GJXAIOU",[[1,12035,"被访问，但同时它不存在，那么"]],[12035,12035],[12049,12049]]],[1550240657352,["gjx16@GJXAIOU",[[-1,12047,"那么"]],[12049,12049],[12047,12047]]],[1550240661723,["gjx16@GJXAIOU",[[1,12047,"则调用|"]],[12047,12047],[12051,12051]]],[1550240662752,["gjx16@GJXAIOU",[[1,12051,"\n"]],[12051,12051],[12052,12052]]],[1550240666106,["gjx16@GJXAIOU",[[1,12052,"|"]],[12052,12052],[12053,12053]]],[1550240685840,["gjx16@GJXAIOU",[[1,12053,"``"]],[12053,12053],[12055,12055]]],[1550240694265,["gjx16@GJXAIOU",[[1,12054,"__gets"]],[12054,12054],[12060,12060]]],[1550240694808,["gjx16@GJXAIOU",[[-1,12059,"s"]],[12060,12060],[12059,12059]]],[1550240706845,["gjx16@GJXAIOU",[[1,12059,"attribute__()"]],[12059,12059],[12072,12072]]],[1550240709663,["gjx16@GJXAIOU",[[1,12071,"seld"]],[12071,12071],[12075,12075]]],[1550240710241,["gjx16@GJXAIOU",[[-1,12074,"d"]],[12075,12075],[12074,12074]]],[1550240712826,["gjx16@GJXAIOU",[[1,12074,"f,name"]],[12074,12074],[12080,12080]]],[1550240725913,["gjx16@GJXAIOU",[[1,12082,"|dang"]],[12082,12082],[12087,12087]]],[1550240727359,["gjx16@GJXAIOU",[[-1,12083,"dang"]],[12087,12087],[12083,12083]]],[1550240733392,["gjx16@GJXAIOU",[[1,12083,"无论那么"]],[12083,12083],[12087,12087]]],[1550240737215,["gjx16@GJXAIOU",[[-1,12085,"那么"]],[12087,12087],[12085,12085]]],[1550240758693,["gjx16@GJXAIOU",[[1,12085,"name是否存在，只要name白访问"]],[12085,12085],[12103,12103]]],[1550240759831,["gjx16@GJXAIOU",[[-1,12100,"白访问"]],[12103,12103],[12100,12100]]],[1550240774375,["gjx16@GJXAIOU",[[1,12100,"被访问时候就会自动被调用|"]],[12100,12100],[12113,12113]]],[1550240775106,["gjx16@GJXAIOU",[[1,12113,"\n"]],[12113,12113],[12114,12114]]],[1550240779640,["gjx16@GJXAIOU",[[1,12114,"··"]],[12114,12114],[12116,12116]]],[1550240781623,["gjx16@GJXAIOU",[[-1,12114,"··"]],[12116,12116],[12114,12114]]],[1550240786053,["gjx16@GJXAIOU",[[1,12114,"|·"]],[12114,12114],[12116,12116]]],[1550240787103,["gjx16@GJXAIOU",[[-1,12115,"·"]],[12116,12116],[12115,12115]]],[1550240790836,["gjx16@GJXAIOU",[[1,12115,"``"]],[12115,12115],[12117,12117]]],[1550240793163,["gjx16@GJXAIOU",[[1,12116,"__"]],[12116,12116],[12118,12118]]],[1550240967265,["gjx16@GJXAIOU",[[1,12118,"delattr__()"]],[12118,12118],[12129,12129]]],[1550240968114,["gjx16@GJXAIOU",[[1,12128,"s"]],[12128,12128],[12129,12129]]],[1550240972794,["gjx16@GJXAIOU",[[1,12129,"elf,name"]],[12129,12129],[12137,12137]]],[1550240982539,["gjx16@GJXAIOU",[[1,12139,"|"]],[12139,12139],[12140,12140]]],[1550240984773,["gjx16@GJXAIOU",[[1,12143," "]],[12140,12140],[12141,12141]]],[1550240987149,["gjx16@GJXAIOU",[[1,12141,"ru"]],[12141,12141],[12143,12143]]],[1550240987815,["gjx16@GJXAIOU",[[-1,12141,"ru"]],[12143,12143],[12141,12141]]],[1550240992193,["gjx16@GJXAIOU",[[1,12141,"如果老妖删除"]],[12141,12141],[12147,12147]]],[1550240995201,["gjx16@GJXAIOU",[[-1,12143,"老妖"]],[12145,12145],[12143,12143]]],[1550240997121,["gjx16@GJXAIOU",[[1,12143,"要"]],[12143,12143],[12144,12144]]],[1550240999309,["gjx16@GJXAIOU",[[1,12146,"j"]],[12146,12146],[12147,12147]]],[1550241000088,["gjx16@GJXAIOU",[[-1,12146,"j"]],[12147,12147],[12146,12146]]],[1550241007999,["gjx16@GJXAIOU",[[1,12146,"name,则调用|"]],[12146,12146],[12155,12155]]],[1550241009833,["gjx16@GJXAIOU",[[1,12155,"\n"]],[12155,12155],[12156,12156]]],[1550241010543,["gjx16@GJXAIOU",[[-1,12156,"   "],[1,12159,"\n"]],[12156,12156],[12157,12157]]]],null,"gjx16@GJXAIOU"],["71e93667-9aa4-424c-92ae-dc8107b23c67",1550293240691,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)\n```\n注：girl就是一个实例（girl这个变量引用了Person（‘zhangsan’）实例对象），它有属性和方法\nself本质上就是实例对象本身\n\n## 4.3 属性和数据\n\n### 4.3.1 类属性\n```python\n'''\n4.3 类属性\n'''\nclass A:\n    x = 5\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性\n```\n- x为类中的一个变量也为属性\n- 几类特殊的属性的含义：\n  - A.__name__  :以字符串的形式返回类的名字\n  - A.__doc__: 显示类的文档\n  - A.__base__:类A的所有父类，默认没有其他继承就是显示object类\n  - A.__dict__:以字典的形式显示类的所有属性\n  - A.__module__:类所在的模块\n    - 例如：Person.__module__ 显示结果为__main__,即类Person的全称为：__main__.Person\n\n\n\n### 4.3.1 创建实例\n```python\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n```\n\n### 4.3.2 实例属性\n```python\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\n\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用\n```\n\n## 4.4 方法\n\n### 4.4.1 绑定方法和非绑定方法\n- 绑定方法：使用实例调用的方法\n- 非绑定方法：使用类的名字调用的方法\n```python\n'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法\n```\n\n**描述器**\n- 含有：`__get__()`、`__set__()`、`__delete__()`这些方法的对象称为描述器\n- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现机制\n- p198见详述\n\n\n### 4.4.2 类方法和静态方法\n- **classmethod**\n```python\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Foo:\n    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())\n```\n**类方法：** 就是类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是这个类对象，即将类对象作为引用对象传入到该方法中。\n\n\n- **staticmethod**\n```python\n\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n```\n\n\n\n## 4.5 继承\n继承使子类具有父类的方法和属性\n继承最主要的用途是实现多态\n\n### 4.5.2 单继承\n```python\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person): #继承Person \n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准  # 如果子类中没有初始化函数，在实例化的时候就会继承父类中的初始化函数并且执行；\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n\n```\n\n程序运行结果：\n`This is son`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n### 4.5.3 调用覆盖的方法\n\n- 如果子类重写了父类的方法，现在子类中调用父类的方法\n```python\n# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n        super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n        self.real_name = \"lisi\"\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n```\n程序运行结果：\n`This is father`\n`This is son`\n`lisi`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n- 多继承的继承顺序\n```python\n## 多重继承的继承顺序\n# 广度优先\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass\nclass AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass\n\nif __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n    ab = AB()\n    ab.Ha()\n    ab.La()\n```\n程序运行结果：\n`(<class '__main__.AB'>, <class '__main__.AB1'>, <class '__main__.AB2'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)`\n`This is A ha`\n`This is AB2 la`\n\n\n\n\n\n\n\n\n## 4.6 多态与封装\n\n### 4.6.1 多态\n```python\n### 4.6.1 多态：同一方法传入不同参数结果不同 /对象多种表现形式的体现\n\n# count :数一数某个元素在对象中出现的次数\nprint(\"This is a book\".count(\"s\" ))\nprint([1,2,3,4,2,3,2].count(2))\n\nf = lambda x,y: x+y\nprint(f(2,3))\nprint(f(\"hello\",\"world\"))\nprint(f([\"a\",\"b\"],[\"c\",\"d\"]))\n\n# python 不检查传入对象的类型，这种方式称为：“隐式类型”、“结构式类型”、\"鸭子类型”\n# 鸭子类型：动态类型的一种风格，该风格中一个对象有效的语义，不是由继承自特定的类或者特定的接口决定的，而是有当前方法和属性的集合决定\n```\n程序运行结果：\n`2`\n`3`\n`5`\n`helloworld`\n`['a', 'b', 'c', 'd']`\n\n\n\n### 4.6.2 封装和私有化\n- 私有化：将类或者函数中的方法或者属性限定在某个区域之内，外部无法调用 \n- 私有化方法：在需要私有的数据或者方法属性前面加上__\n```python\n### 4.6.2 封装和私有化\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n    def __Python(self):\n        print(\"I Love Python\")\n    def code(self):\n        print(\"Which Language do you like\")\n        self.__Python()\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.me) #这里可以 使用\n    protect.code() #因为code()方法和__Python（）均在同一个类中，因此可以调用\n    print(protect.__name) # 私有属性类外不能调用\n    protect.__python()\n```\n程序运行结果：\n`zhangsan`\n`Which Language do you like`\n`I Love Python`\n`Traceback (most recent call last):File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 343, in <module>`\n    `print(protect.__name) # 私有属性类外不能调用`\n`AttributeError: 'ProtectMe' object has no attribute '__name'`\n\n- 使用装饰器调用私有化的属性与方法\n```python\n# 使用装饰器调用类的私有属性\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n\n    @property        # 装饰器：主要用于为已存在的对象添加功能\n    def code(self):\n        return self.__name\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.code)\n```\n程序运行结果为：\n`lisi`\n\n\n\n\n\n\n\n## 4.7 定制类\n\n 类是对象，也是对象类型\n### 4.7.1 类和对象类型\n```python\n## 4.7 定制类（定制对象类型）\n\nclass A:pass\nclass B:pass\na = A()\nb = B()\nprint(type(a)) #返回对象a的对象类型，使用type()可以得到实例或者变量所引用对象的类型\nprint(type(b))\nprint(isinstance(a, A))  #也可以使用isinstance判断一个对象是不是另一个给定类的实例\nm = 1\nprint(isinstance(m, int)) #得出：m所引用的对象是整数型\n```\n程序运行结果：\n`<class '__main__.A'>`\n`<class '__main__.B'>`\n`True`\n`True`\n\n### 4.7.1 自定义对象类型\n```python\n##示例一：得到仅保留小数点后两位小数的数\n#!usr/bin/env python\n# coding=utf-8\n\nclass RoundFloat:\n    #定义一种两位小数的浮点数类型，利用该类可以得到两位小数的浮点数\n    def __init__(self, val):\n        assert isinstance(val, float), \"value must be a float\"  #assert的作用相当于布尔运算，当运行到这里，进行对象值的判断，如果为false，则抛出后面的异常提示\n        self.value = round(val, 2)\n\n    def __str__(self): #为能够得到打印的内容\n        return \"{:.2f}\".format(self.value) #将前面四舍五入保留两位小数的浮点数，以小数点后有两位小数的形式输出\n\n    __repr__ = __str__#在类被调用即向变量提供__str__()里的内容\n\nif __name__ ==\"__main__\":\n    r = RoundFloat(2.185)\n    print(r)\n    print(type(r))\n```\n程序运行结果：\n`2.19`\n`<class '__main__.RoundFloat'>`\n\n\n- 示例二：输入分子分母得到分数\n```python\n#!usr/bin/env python\n# coding = utf-8\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\nif __name__ == \"__main__\":\n    f = Fraction(2, 3)\n    print(f)\n\n```\n程序运行结果：`2/3`\n\n- 示例三： 实现分数计算 1/2 + 1/3 = 5/6\n```python\n\n#收下按照最小公倍数通分，然后分子相加\n#最小公倍数lcm(a, b) = 丨a*b丨 /gcd(a,b)   注：丨因为注释所以有点斜 ，gcd(a,b)表示两个数的最大公约数\n\n #！usr/bin/env python\n # coding = utf-8\n\ndef gcd(a, b):\n     #求最大公约数\n    if not a > b:\n        a, b = b, a\n    while b != 0:\n        remainder = a % b\n        a, b = b, remainder\n    return  a\n\ndef lcm(a, b):\n     #求最小公倍数\n    return (a * b) / gcd(a, b)\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\n    def __add__(self, other): #这个类中规定了加减乘除等运算等特殊方法\n        lcm_num = lcm(self.denom, other.denom)\n        number_sum = (lcm_num / self.denom * self.number) + (lcm_num / other.denom * other.number)\n        return Fraction(number_sum, lcm_num)\n\n\nif __name__ == \"__main__\":\n    m = Fraction(1, 3)\n    n = Fraction(1, 2)\n    s = m + n\n    print(m,\"+\",n ,\" = \",s)\n```\n程序运行结果：\n`1/3 + 1/2  =  5.0/6.0`\n\n- 在python中实现某种运算所使用的运算符本质上是以特殊方法实现的，其对应关系为:P218\n  - 例如加法对应的特殊方法为：`__add__`或者`__radd__`,两个对象能否相加，取决于两对象是否含有`__add__`方法\n\n\n\n\n\n## 4.8 一些特殊点\n\n### 4.8.1 优化内存\n```python\nclass Spring:\n    time = \"From march to June\"\n\nprint(Spring.__dict__) #每个类都有一个__dict__属性，包含了当前类的属性值\n\nyear = Spring()  #建立一个实例\nprint(year.__dict__)   # 实例也有这个属性，只是刚建立的时候为空\n\n#为了控制__dict__属性，使用__slots__属性替代__dict__属性\n\nclass Summer:\n    __slots__ = (\"tree\",\"flower\")\n\nprint(dir(Summer))  # 结果没有__dict__属性\n\nprint(Summer.__slots__)  #此时Summer仅有两个属性\ns1 = Summer()\ns2 = Summer()\nprint(s1.__slots__) # 实例也仅有两个属性\nprint(s2.__slots__)\nprint(id(s1.__slots__) == id(s2.__slots__)) #两个实例的__slots__在内存中占同一个位置\n\n\n# 使用__slots__优化了内存，同时实例不能增加属性，只能通过类属性进行增加\n```\n程序运行结果：\n`{'__module__': '__main__', 'time': 'From march to June', '__dict__': <attribute '__dict__' of 'Spring' objects>, '__weakref__': <attribute '__weakref__' of 'Spring' objects>, '__doc__': None}`\n`{}`\n`['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'flower', 'tree']`\n`('tree', 'flower')`\n`('tree', 'flower')`\n`('tree', 'flower')`\n`True`\n\n\n\n### 4.8.2 属性拦截 \n\n- 当访问类或者实例的属性时候，若不存在，就会调用某一类方法\n\n|方法|使用方式|\n| ---- | ---- |\n|`__setattr__(self,name,value)`|如果要给name赋值，则调用|\n|`__getattr__(self,name)`| 如果name被访问，但同时它不存在，则调用|\n|`__getattribute__(self,name)`|无论name是否存在，只要name被访问时候就会自动被调用|\n|`__delattr__(self,name)`| 如果要删除name,则调用|\n\n\n   \n\n\n\n",[[1550293186308,["gjx16@GJXAIOU",[[1,12158,"\n"]],[12156,12156],[12157,12157]]],[1550293187968,["gjx16@GJXAIOU",[[1,12157,"···"]],[12157,12157],[12160,12160]]],[1550293191398,["gjx16@GJXAIOU",[[-1,12157,"···"]],[12160,12160],[12157,12157]]],[1550293192963,["gjx16@GJXAIOU",[[1,12157,"```"]],[12157,12157],[12160,12160]]],[1550293193016,["gjx16@GJXAIOU",[[1,12160,"language\n```\n"]],[12160,12160],[12160,12168]]],[1550293194282,["gjx16@GJXAIOU",[[-1,12160,"language"],[1,12168,"p"]],[12160,12168],[12161,12161]]],[1550293195015,["gjx16@GJXAIOU",[[1,12161,"ython"]],[12161,12161],[12166,12166]]],[1550293195520,["gjx16@GJXAIOU",[[1,12167,"\n"]],[12166,12166],[12167,12167]]],[1550293199238,["gjx16@GJXAIOU",[[1,12167,"class A:\n    def __getattr__(self, name):\n        print(\"You use getatter\")\n\n    def __setattr__(self, name, value):\n        print(\"You use setattr\")\n        self.__dict__[name] = value  # 将数据和属性保存到对象的__dict__中\n\n\na = A()   # 实例化\na.x  #实例不存在这个属性，但是因为有__getattr__方法，当属性X不在对象的__dict__ 中时候，就调用__getattr__ 方法\na.one = 7  # 给对象的属性赋值，调用__setattr__\nprint(a.one)  # 已经将属性保存到对象的__dict__ 中\n\n\nclass B:\n    def __getattribute__(self, name):\n        print(\"You use getattribute\")\n        return object.__getattribute__(self, name) #这里不能使用self.__dict__[name] = value ，因为这样就得访问属性self.__dict__,相当于死循环\n\nb = B()\nb.y  #虽然不存在，但是仍然执行 __getattribute__方法\nb.two = 7\nprint(b.two) #赋值之后就会被加入__dict__中"]],[12167,12167],[12839,12839]]],[1550293202813,["gjx16@GJXAIOU",[[1,12846,"\n"]],[12843,12843],[12844,12844]]],[1550293205341,["gjx16@GJXAIOU",[[1,12844,"cheng"]],[12844,12844],[12849,12849]]],[1550293206684,["gjx16@GJXAIOU",[[-1,12844,"cheng"]],[12849,12849],[12844,12844]]],[1550293215565,["gjx16@GJXAIOU",[[1,12844,"程序运行结果："]],[12844,12844],[12851,12851]]],[1550293216071,["gjx16@GJXAIOU",[[1,12854,"\n"]],[12851,12851],[12852,12852]]],[1550293217435,["gjx16@GJXAIOU",[[1,12852,"``"]],[12852,12852],[12854,12854]]],[1550293232548,["gjx16@GJXAIOU",[[1,12853,"You use getatter\nYou use setattr\n7\nYou use getattribute\nTraceback (most recent call last):\n  File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 521, in <module>\n    b.y  #虽然不存在，但是仍然执行 __getattribute__方法\n  File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 518, in __getattribute__\n    return object.__getattribute__(self, name) #这里不能使用self.__dict__[name] = value ，因为这样就得访问属性self.__dict__,相当于死循环\nAttributeError: 'B' object has no attribute 'y'"]],[12853,12853],[13367,13367]]],[1550293235026,["gjx16@GJXAIOU",[[1,12869,"`"]],[12869,12869],[12870,12870]]],[1550293235979,["gjx16@GJXAIOU",[[1,12886,"`"]],[12886,12886],[12887,12887]]],[1550293236586,["gjx16@GJXAIOU",[[1,12889,"`"]],[12889,12889],[12890,12890]]],[1550293237257,["gjx16@GJXAIOU",[[1,12911,"`"]],[12911,12911],[12912,12912]]],[1550293237748,["gjx16@GJXAIOU",[[1,12947,"`"]],[12947,12947],[12948,12948]]],[1550293242028,["gjx16@GJXAIOU",[[-1,12947,"`"]],[12948,12948],[12947,12947]]],[1550293264075,["gjx16@GJXAIOU",[[-1,13054,"    "]],[13058,13058],[13054,13054]]],[1550293264757,["gjx16@GJXAIOU",[[-1,13053,"\n"]],[13054,13054],[13053,13053]]],[1550293265879,["gjx16@GJXAIOU",[[1,13053," "]],[13053,13053],[13054,13054]]],[1550293272591,["gjx16@GJXAIOU",[[1,13091,"`"]],[13091,13091],[13092,13092]]],[1550293280859,["gjx16@GJXAIOU",[[-1,13207,"    "]],[13211,13211],[13207,13207]]],[1550293281509,["gjx16@GJXAIOU",[[-1,13206,"\n"]],[13207,13207],[13206,13206]]],[1550293282328,["gjx16@GJXAIOU",[[1,13206," "]],[13206,13206],[13207,13207]]],[1550293285848,["gjx16@GJXAIOU",[[1,13365,"`"]],[13365,13365],[13366,13366]]],[1550293300501,["gjx16@GJXAIOU",[[1,13054,"\n  "]],[13054,13054],[13057,13057]]],[1550293304348,["gjx16@GJXAIOU",[[1,13210,"\n  "]],[13210,13210],[13213,13213]]],[1550293315742,["gjx16@GJXAIOU",[[-1,13371,"`"]],[13371,13372],[13371,13371]]],[1550293318514,["gjx16@GJXAIOU",[[1,12871,"`"]],[12871,12871],[12872,12872]]],[1550293319112,["gjx16@GJXAIOU",[[1,12889,"`"]],[12889,12889],[12890,12890]]],[1550293319951,["gjx16@GJXAIOU",[[1,12893,"`"]],[12893,12893],[12894,12894]]],[1550293321044,["gjx16@GJXAIOU",[[1,12916,"`"]],[12916,12916],[12917,12917]]],[1550293323931,["gjx16@GJXAIOU",[[1,13058,"`"]],[13058,13058],[13059,13059]]],[1550293325202,["gjx16@GJXAIOU",[[1,13062,"`"]],[13062,13062],[13063,13063]]],[1550293331229,["gjx16@GJXAIOU",[[-1,13057," `"]],[13058,13058],[13057,13057]]],[1550293333031,["gjx16@GJXAIOU",[[1,12951,"`"]],[12951,12951],[12952,12952]]],[1550293335875,["gjx16@GJXAIOU",[[-1,12954," "]],[12955,12955],[12954,12954]]],[1550293336355,["gjx16@GJXAIOU",[[1,12954,"`"]],[12954,12954],[12955,12955]]],[1550293338320,["gjx16@GJXAIOU",[[1,13058,"`"]],[13058,13058],[13059,13059]]],[1550293346353,["gjx16@GJXAIOU",[[1,13104,"`"]],[13104,13104],[13105,13105]]],[1550293348970,["gjx16@GJXAIOU",[[1,13329,"`"]],[13329,13329],[13330,13330]]],[1550293350443,["gjx16@GJXAIOU",[[1,13297,"`"]],[13297,13297],[13298,13298]]],[1550293351746,["gjx16@GJXAIOU",[[1,13217,"`"]],[13217,13217],[13218,13218]]],[1550293353866,["gjx16@GJXAIOU",[[1,13221,"`"]],[13221,13221],[13222,13222]]],[1550293356890,["gjx16@GJXAIOU",[[1,13302,"`"]],[13302,13302],[13303,13303]]],[1550293358033,["gjx16@GJXAIOU",[[1,13383,"`"]],[13383,13383],[13384,13384]]],[1550293359483,["gjx16@GJXAIOU",[[-1,13383,"`"]],[13384,13384],[13383,13383]]],[1550293364667,["gjx16@GJXAIOU",[[1,13302,"\n  '"]],[13302,13302],[13306,13306]]],[1550293366715,["gjx16@GJXAIOU",[[-1,13305,"'"]],[13306,13306],[13305,13305]]],[1550293366810,["gjx16@GJXAIOU",[[1,13305,"="]],[13305,13305],[13306,13306]]],[1550293369123,["gjx16@GJXAIOU",[[-1,13304," ="]],[13306,13306],[13304,13304]]],[1550293372602,["gjx16@GJXAIOU",[[-1,13336,"\n"]],[13337,13337],[13336,13336]]],[1550293373391,["gjx16@GJXAIOU",[[1,13336," "]],[13336,13336],[13337,13337]]],[1550293376339,["gjx16@GJXAIOU",[[-1,13335,"` "]],[13337,13337],[13335,13335]]],[1550293378027,["gjx16@GJXAIOU",[[1,13335,","]],[13335,13335],[13336,13336]]]],null,"gjx16@GJXAIOU"],["102a3258-4375-49fd-826b-70fa5d603919",1551017830428,"---\ndate:2019-1-22\n---\n\n\n# 第4章 类\n\n==python中一切皆对象，包括字符串、函数、模块、类、、、、==\n\n## 4.1基本概念\n- 对象:包括状态、行为、和唯一的标识\n- 状态：包括类已有的属性（类中已经定义好的），和对象具有的当前属性值（一般为动态的）\n- 行为：表现为对象自身状态的改变和信息的传递\n- 标识：该对象区别于其他对象的属性，本质上为内存中所创建的对象的地址\n对象：应该具有：属性（状态：是什么）和方法（行为：能做什么），标识一般在内存中自动完成。\n\n\n## 4.2编写类\n\n### 4.2.1创建类\n\n- python3中所有的类均为object类的子类\n- 类的名称开头首字母大写\n```python\n\"\"\"\n4.2.1创建类\n\"\"\"\n\nclass Person:  #如果继承其他类：格式为：class Person（FatherClass）\n    def __init__(self,name):   # 这是构造函数（初始化函数），在使用类创建实例的时候，首先执行构造函数  #类中参数第一个参数必须为self,\n        self.name = name       #建立实例的一种属性，属性的名字为name，值为参数name 传递的值\n\n    def get_name(self):\n        return self.name\n\n    def color(self, color):\n        d = {}\n        d[self.name] = color\n        return d\n\n\nif __name__ ==\"__main__\":  #注意这里是两个_\n    girl = Person(\"zhangsan\")  #利用上面的类创建实例，因为类中有name 参数，需要进行传值，所以在创建实例的时候有值（传的是引用），self不需要传值\n    print(girl.name)\n    name = girl.get_name()# 调用类的方法\n    print(name)\n    her_color = girl.color(\"white\")\n    print(her_color)\n```\n注：girl就是一个实例（girl这个变量引用了Person（‘zhangsan’）实例对象），它有属性和方法\nself本质上就是实例对象本身\n\n## 4.3 属性和数据\n\n### 4.3.1 类属性\n```python\n'''\n4.3 类属性\n'''\nclass A:\n    x = 5\n    z = 8  # 可以直接在类中添加属性\nprint(A.x)\nA.y = 9   # 也可以在类的外部添加属性\nprint(dir(A)) #查看类的属性，里面包含x，y，z\n\ndel A.x  #这样可以删除类A中的X属性\n```\n- x为类中的一个变量也为属性\n- 几类特殊的属性的含义：\n  - A.__name__  :以字符串的形式返回类的名字\n  - A.__doc__: 显示类的文档\n  - A.__base__:类A的所有父类，默认没有其他继承就是显示object类\n  - A.__dict__:以字典的形式显示类的所有属性\n  - A.__module__:类所在的模块\n    - 例如：Person.__module__ 显示结果为__main__,即类Person的全称为：__main__.Person\n\n\n\n### 4.3.1 创建实例\n```python\nclass Person: \n   def __init__(self,name): #初始化函数第一个参数必须是self，其次不能含有return 语句，\n       self.name = name\nif __name__ ==\"__main__\": \n    zhangsan = Person() #创建一个实例zhangsan,本质是将变量zhangsan与实例对象Person（）建立引用关系\n```\n\n### 4.3.2 实例属性\n```python\nclass A:\n    x = 7\n    #x = 8  对类属性值的修改会影响实例的属性值\n    y = [1,2,3] #可变对象\nfoo = A()\nprint(foo.x)\nfoo.x = 8  #类中的属性尽量避免更改，但是实例中的属性可以随意更改\n#这里更改的本质的建立了一个新的属性，和之前的同名，访问时候覆盖掉了原来的属性，可以使用del foo.x可以得到原来的属性值\nprint(foo.x)\nprint(A.x)#类中属性的值不会因为实例属性值更改而改变,当且仅当类中变量引用的是不可变对象：例如字符串\n#当类中变量引用的是可变对象的时候，实例改变会影响类中属性的值，因为是原地修改\nfoo.y.append(4) #修改实例的值\nprint(A.y)#运行结果：类的值也改变了\n\nfoo.z = [1,2,3,4,5]\n#print(A.z)   通过实例增加的变量并不能在类中使用\n```\n\n## 4.4 方法\n\n### 4.4.1 绑定方法和非绑定方法\n- 绑定方法：使用实例调用的方法\n- 非绑定方法：使用类的名字调用的方法\n```python\n'''\n4.4.1 绑定与非绑定方法\n'''\n\nclass Foo:\n    def bar(self):\n        print(\"this is a normal method of class\")\n\n#实例化与引用\nf = Foo()\nf.bar()#当建立这个实例的时候，引用方法时候，python解释器会把实例作为第一个参数隐式的传递给该方法\n\n#实例显式传递方法\nFoo.bar(f)#实例化之后，self和实例f是相同的，一般在类里使用self,在类外部使用f这个实例。\n\n# 因为python一切皆对象，类Foo的方法bar()也是对象（函数对象）\nFoo.bar #该方法为非绑定方法\nf.bar   # 绑定方法\n```\n\n**描述器**\n- 含有：`__get__()`、`__set__()`、`__delete__()`这些方法的对象称为描述器\n- 描述器是属性、实例方法、静态方法、类方法和继承中使用的super的背后实现机制\n- p198见详述\n\n\n### 4.4.2 类方法和静态方法\n- **classmethod**\n```python\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\n\nclass Foo:\n    lang = \"Java\" # 类属性\n    def __init__(self):\n        self.lang = \"python\"#方法属性\n\n    @classmethod #装饰器，修饰的方法中的参数第一个不使用self，一般使用cls\n    # 使用类和实例执行get_class_attr,得到的都是类属性值，装饰器修饰的方法，参数所引用的对象是类对象Foo。\n    def get_class_attr(cls):#这里参数为cls，要求所引用的对象应该具有属性lang。\n        return cls.lang\n\n\nif __name__ == \"__main__\":\n    print(\"Foo.lang:\",Foo.lang)\n    r = Foo.get_class_attr()\n    print(\"get class attribute:\",r)\n    f = Foo()\n    print(\"instance attribute:\",f.lang)\n    print(\"instance get_class_attr\",f.get_class_attr())\n```\n**类方法：** 就是类里面定义的方法，该方法由装饰器@classmethod 所装饰，第一个参数cls所引用的是这个类对象，即将类对象作为引用对象传入到该方法中。\n\n\n- **staticmethod**\n```python\n\n'''\n4.4.2 类方法和静态方法\n'''\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Foo:\n    def __init__(self,name):\n        self.name = name\n\n    def get_name(self,age):\n        if self.select(age):\n            return self.name\n        else:\n            return  \"the name is secret\"\n\n    @staticmethod #是该方法位于类内但是独立于类，这个方法称为：静态方法\n    def select(n):#虽然在类内但是是独立的方法，跟类没有关系，就是类的作用域内的普通函数\n        a = random.randint(1,100)\n        return a - n > 0\n    #该函数不以self开头\n    #可以通过实例调用，比如self.select(n);\n    #可以通过类调用这个方法，比如 Foo.select(n)\nif __name__ == \"__main__\":\n    f = Foo(\"zhangsan\")\n    name = f.get_name(22)\n    print(name)\n```\n\n\n\n## 4.5 继承\n继承使子类具有父类的方法和属性\n继承最主要的用途是实现多态\n\n### 4.5.2 单继承\n```python\n### 4.5.1 单继承\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name): #建立实例的时候这个初始化函数就要执行\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person): #继承Person \n    def __init__(self, name): #当子类和父类中的函数重名就会函数重写，以子类中的为准  # 如果子类中没有初始化函数，在实例化的时候就会继承父类中的初始化函数并且执行；\n        self.name = name\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n\n```\n\n程序运行结果：\n`This is son`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n### 4.5.3 调用覆盖的方法\n\n- 如果子类重写了父类的方法，现在子类中调用父类的方法\n```python\n# 4.5.3 调用覆盖的方法 # 使父类中被覆盖的方法再次在子类中实现\n\n#!/usr/bin/env python\n#coding:utf-8\nimport random\nclass Person:\n    def __init__(self,name):\n        self.name = name\n        print(\"This is father\")\n\n    def height(self,m):\n        h = dict(([\"height\",m],))\n        return h\n\nclass Boy(Person):\n    def __init__(self, name):\n        # Person.__init__(self, name) #方案一：但是一旦父类名称修改，这这里也要修改\n        super(boy, self).__init__(name)  #方案二：使用super    详细使用方法：https://www.cnblogs.com/silencestorm/p/8404046.html\n        self.real_name = \"lisi\"\n        print(\"This is son\")\n\n    def get_name(self):\n        return self.name\n\nif __name__ == \"__main__\":\n    boy = Boy(\"zhangsan\")\n    print(boy.real_name )\n    print(boy.get_name())\n    print(boy.height(180))\n    print(Boy.__bases__) #得到Boy这个子类的所有父类\n```\n程序运行结果：\n`This is father`\n`This is son`\n`lisi`\n`zhangsan`\n`{'height': 180}`\n`(<class '__main__.Person'>,)`\n\n- 多继承的继承顺序\n```python\n## 多重继承的继承顺序\n# 广度优先\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass A:\n    def Ha(self):\n        print(\"This is A ha\")\n\nclass B:\n    def Ha(self):\n        print(\"This is B ha\")\n    def La(self):\n        print(\"This is B la\")\n\nclass AB1(A, B):\n    pass\nclass AB2(A, B):\n    def La(self):\n        print(\"This is AB2 la\")\n\nclass AB(AB1, AB2):\n    pass\n\nif __name__ == \"__main__\":\n    print(AB.__mro__) # __mro__ 可以打印出类的继承顺序\n    ab = AB()\n    ab.Ha()\n    ab.La()\n```\n程序运行结果：\n`(<class '__main__.AB'>, <class '__main__.AB1'>, <class '__main__.AB2'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)`\n`This is A ha`\n`This is AB2 la`\n\n\n\n\n\n\n\n\n## 4.6 多态与封装\n\n### 4.6.1 多态\n```python\n### 4.6.1 多态：同一方法传入不同参数结果不同 /对象多种表现形式的体现\n\n# count :数一数某个元素在对象中出现的次数\nprint(\"This is a book\".count(\"s\" ))\nprint([1,2,3,4,2,3,2].count(2))\n\nf = lambda x,y: x+y\nprint(f(2,3))\nprint(f(\"hello\",\"world\"))\nprint(f([\"a\",\"b\"],[\"c\",\"d\"]))\n\n# python 不检查传入对象的类型，这种方式称为：“隐式类型”、“结构式类型”、\"鸭子类型”\n# 鸭子类型：动态类型的一种风格，该风格中一个对象有效的语义，不是由继承自特定的类或者特定的接口决定的，而是有当前方法和属性的集合决定\n```\n程序运行结果：\n`2`\n`3`\n`5`\n`helloworld`\n`['a', 'b', 'c', 'd']`\n\n\n\n### 4.6.2 封装和私有化\n- 私有化：将类或者函数中的方法或者属性限定在某个区域之内，外部无法调用 \n- 私有化方法：在需要私有的数据或者方法属性前面加上__\n```python\n### 4.6.2 封装和私有化\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n    def __Python(self):\n        print(\"I Love Python\")\n    def code(self):\n        print(\"Which Language do you like\")\n        self.__Python()\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.me) #这里可以 使用\n    protect.code() #因为code()方法和__Python（）均在同一个类中，因此可以调用\n    print(protect.__name) # 私有属性类外不能调用\n    protect.__python()\n```\n程序运行结果：\n`zhangsan`\n`Which Language do you like`\n`I Love Python`\n`Traceback (most recent call last):File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 343, in <module>`\n    `print(protect.__name) # 私有属性类外不能调用`\n`AttributeError: 'ProtectMe' object has no attribute '__name'`\n\n- 使用装饰器调用私有化的属性与方法\n```python\n# 使用装饰器调用类的私有属性\n\n#!usr/bin/env python\n# coding=utf-8\n\nclass ProtectMe:\n    def __init__(self):\n        self.me = \"zhangsan\"\n        self.__name = \"lisi\"\n\n    @property        # 装饰器：主要用于为已存在的对象添加功能\n    def code(self):\n        return self.__name\n\nif __name__ == \"__main__\":\n    protect = ProtectMe()\n    print(protect.code)\n```\n程序运行结果为：\n`lisi`\n\n\n\n\n\n\n\n## 4.7 定制类\n\n 类是对象，也是对象类型\n### 4.7.1 类和对象类型\n```python\n## 4.7 定制类（定制对象类型）\n\nclass A:pass\nclass B:pass\na = A()\nb = B()\nprint(type(a)) #返回对象a的对象类型，使用type()可以得到实例或者变量所引用对象的类型\nprint(type(b))\nprint(isinstance(a, A))  #也可以使用isinstance判断一个对象是不是另一个给定类的实例\nm = 1\nprint(isinstance(m, int)) #得出：m所引用的对象是整数型\n```\n程序运行结果：\n`<class '__main__.A'>`\n`<class '__main__.B'>`\n`True`\n`True`\n\n### 4.7.1 自定义对象类型\n```python\n##示例一：得到仅保留小数点后两位小数的数\n#!usr/bin/env python\n# coding=utf-8\n\nclass RoundFloat:\n    #定义一种两位小数的浮点数类型，利用该类可以得到两位小数的浮点数\n    def __init__(self, val):\n        assert isinstance(val, float), \"value must be a float\"  #assert的作用相当于布尔运算，当运行到这里，进行对象值的判断，如果为false，则抛出后面的异常提示\n        self.value = round(val, 2)\n\n    def __str__(self): #为能够得到打印的内容\n        return \"{:.2f}\".format(self.value) #将前面四舍五入保留两位小数的浮点数，以小数点后有两位小数的形式输出\n\n    __repr__ = __str__#在类被调用即向变量提供__str__()里的内容\n\nif __name__ ==\"__main__\":\n    r = RoundFloat(2.185)\n    print(r)\n    print(type(r))\n```\n程序运行结果：\n`2.19`\n`<class '__main__.RoundFloat'>`\n\n\n- 示例二：输入分子分母得到分数\n```python\n#!usr/bin/env python\n# coding = utf-8\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\nif __name__ == \"__main__\":\n    f = Fraction(2, 3)\n    print(f)\n\n```\n程序运行结果：`2/3`\n\n- 示例三： 实现分数计算 1/2 + 1/3 = 5/6\n```python\n\n#收下按照最小公倍数通分，然后分子相加\n#最小公倍数lcm(a, b) = 丨a*b丨 /gcd(a,b)   注：丨因为注释所以有点斜 ，gcd(a,b)表示两个数的最大公约数\n\n #！usr/bin/env python\n # coding = utf-8\n\ndef gcd(a, b):\n     #求最大公约数\n    if not a > b:\n        a, b = b, a\n    while b != 0:\n        remainder = a % b\n        a, b = b, remainder\n    return  a\n\ndef lcm(a, b):\n     #求最小公倍数\n    return (a * b) / gcd(a, b)\n\nclass Fraction:\n    def __init__(self, number, denom = 1):\n        self.number = number\n        self.denom = denom\n\n    def __str__(self):\n        return str(self.number) + '/' +str(self.denom)\n\n    __repr__ = __str__\n\n    def __add__(self, other): #这个类中规定了加减乘除等运算等特殊方法\n        lcm_num = lcm(self.denom, other.denom)\n        number_sum = (lcm_num / self.denom * self.number) + (lcm_num / other.denom * other.number)\n        return Fraction(number_sum, lcm_num)\n\n\nif __name__ == \"__main__\":\n    m = Fraction(1, 3)\n    n = Fraction(1, 2)\n    s = m + n\n    print(m,\"+\",n ,\" = \",s)\n```\n程序运行结果：\n`1/3 + 1/2  =  5.0/6.0`\n\n- 在python中实现某种运算所使用的运算符本质上是以特殊方法实现的，其对应关系为:P218\n  - 例如加法对应的特殊方法为：`__add__`或者`__radd__`,两个对象能否相加，取决于两对象是否含有`__add__`方法\n\n\n\n\n\n## 4.8 一些特殊点\n\n### 4.8.1 优化内存\n```python\nclass Spring:\n    time = \"From march to June\"\n\nprint(Spring.__dict__) #每个类都有一个__dict__属性，包含了当前类的属性值\n\nyear = Spring()  #建立一个实例\nprint(year.__dict__)   # 实例也有这个属性，只是刚建立的时候为空\n\n#为了控制__dict__属性，使用__slots__属性替代__dict__属性\n\nclass Summer:\n    __slots__ = (\"tree\",\"flower\")\n\nprint(dir(Summer))  # 结果没有__dict__属性\n\nprint(Summer.__slots__)  #此时Summer仅有两个属性\ns1 = Summer()\ns2 = Summer()\nprint(s1.__slots__) # 实例也仅有两个属性\nprint(s2.__slots__)\nprint(id(s1.__slots__) == id(s2.__slots__)) #两个实例的__slots__在内存中占同一个位置\n\n\n# 使用__slots__优化了内存，同时实例不能增加属性，只能通过类属性进行增加\n```\n程序运行结果：\n`{'__module__': '__main__', 'time': 'From march to June', '__dict__': <attribute '__dict__' of 'Spring' objects>, '__weakref__': <attribute '__weakref__' of 'Spring' objects>, '__doc__': None}`\n`{}`\n`['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'flower', 'tree']`\n`('tree', 'flower')`\n`('tree', 'flower')`\n`('tree', 'flower')`\n`True`\n\n\n\n### 4.8.2 属性拦截 \n\n- 当访问类或者实例的属性时候，若不存在，就会调用某一类方法\n\n|方法|使用方式|\n| ---- | ---- |\n|`__setattr__(self,name,value)`|如果要给name赋值，则调用|\n|`__getattr__(self,name)`| 如果name被访问，但同时它不存在，则调用|\n|`__getattribute__(self,name)`|无论name是否存在，只要name被访问时候就会自动被调用|\n|`__delattr__(self,name)`| 如果要删除name,则调用|\n\n```python\nclass A:\n    def __getattr__(self, name):\n        print(\"You use getatter\")\n\n    def __setattr__(self, name, value):\n        print(\"You use setattr\")\n        self.__dict__[name] = value  # 将数据和属性保存到对象的__dict__中\n\n\na = A()   # 实例化\na.x  #实例不存在这个属性，但是因为有__getattr__方法，当属性X不在对象的__dict__ 中时候，就调用__getattr__ 方法\na.one = 7  # 给对象的属性赋值，调用__setattr__\nprint(a.one)  # 已经将属性保存到对象的__dict__ 中\n\n\nclass B:\n    def __getattribute__(self, name):\n        print(\"You use getattribute\")\n        return object.__getattribute__(self, name) #这里不能使用self.__dict__[name] = value ，因为这样就得访问属性self.__dict__,相当于死循环\n\nb = B()\nb.y  #虽然不存在，但是仍然执行 __getattribute__方法\nb.two = 7\nprint(b.two) #赋值之后就会被加入__dict__中\n```\n程序运行结果：\n`You use getatter`\n`You use setattr`\n`7`\n`You use getattribute`\n`Traceback (most recent call last):`\n `File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 521, in <module>`\n  `b.y  #虽然不存在，但是仍然执行 __getattribute__方法`\n  `File \"E:/Program/Python/Study/my/program/daydayup/Code_of_laoqi_python/char4.py\", line 518, in __getattribute__ `\n  `return object.__getattribute__(self, name) #这里不能使用self.__dict__[name] = value` ，\n `因为这样就得访问属性self.__dict__,相当于死循环,AttributeError: 'B' object has no attribute 'y'`\n\n\n   \n\n\n\n",[[1551017823974,["gjx16@GJXAIOU",[[1,4562,"        \n"]],[4561,4561],[4570,4570]]],[1551017826757,["gjx16@GJXAIOU",[[-1,4566,"    "]],[4570,4570],[4566,4566]]],[1551017838767,["gjx16@GJXAIOU",[[1,4566,"\"\"\""]],[4566,4566],[4569,4569]]],[1551017841725,["gjx16@GJXAIOU",[[-1,4566,"\"\"\""]],[4569,4569],[4566,4566]]],[1551017858954,["gjx16@GJXAIOU",[[1,4566,"```直接让子类包含父类的所有属性···"]],[4566,4566],[4586,4586]]],[1551017859772,["gjx16@GJXAIOU",[[-1,4583,"···"]],[4586,4586],[4583,4583]]],[1551017861109,["gjx16@GJXAIOU",[[1,4583,"```"]],[4583,4583],[4586,4586]]],[1551017861750,["gjx16@GJXAIOU",[[1,4587,"    \n"]],[4586,4586],[4591,4591]]],[1551017875849,["gjx16@GJXAIOU",[[1,4591,"super().__init__()"]],[4591,4591],[4609,4609]]],[1551017882784,["gjx16@GJXAIOU",[[1,4608,"seld"]],[4608,4608],[4612,4612]]],[1551017883630,["gjx16@GJXAIOU",[[-1,4611,"d"]],[4612,4612],[4611,4611]]],[1551017886857,["gjx16@GJXAIOU",[[1,4611,"f,name"]],[4611,4611],[4617,4617]]],[1551017898266,["gjx16@GJXAIOU",[[1,4591,"#"]],[4591,4591],[4592,4592]]],[1551017936954,["gjx16@GJXAIOU",[[1,5227,"f"]],[5227,5227],[5228,5228]]],[1551017937757,["gjx16@GJXAIOU",[[-1,5227,"f"]],[5228,5228],[5227,5227]]],[1551017938525,["gjx16@GJXAIOU",[[1,5228,"        \n"]],[5227,5227],[5236,5236]]],[1551017941053,["gjx16@GJXAIOU",[[-1,5232,"    "]],[5236,5236],[5232,5232]]],[1551017950164,["gjx16@GJXAIOU",[[1,5232,"#返回一个字典"]],[5232,5232],[5239,5239]]],[1551017950689,["gjx16@GJXAIOU",[[1,5240,"    \n"]],[5239,5239],[5244,5244]]],[1551017954604,["gjx16@GJXAIOU",[[1,5244,"dwef"]],[5244,5244],[5248,5248]]],[1551017955505,["gjx16@GJXAIOU",[[-1,5245,"wef"]],[5248,5248],[5245,5245]]],[1551017958924,["gjx16@GJXAIOU",[[1,5245,"ef na"]],[5245,5245],[5250,5250]]],[1551017959516,["gjx16@GJXAIOU",[[-1,5248,"na"]],[5250,5250],[5248,5248]]],[1551017960410,["gjx16@GJXAIOU",[[1,5248,"ha"]],[5248,5248],[5250,5250]]],[1551017961389,["gjx16@GJXAIOU",[[-1,5249,"a"]],[5250,5250],[5249,5249]]],[1551017962460,["gjx16@GJXAIOU",[[1,5249,"wll"]],[5249,5249],[5252,5252]]],[1551017963166,["gjx16@GJXAIOU",[[-1,5249,"wll"]],[5252,5252],[5249,5249]]],[1551017965736,["gjx16@GJXAIOU",[[1,5249,"ello()"]],[5249,5249],[5255,5255]]],[1551017968329,["gjx16@GJXAIOU",[[1,5254,"seo"]],[5254,5254],[5257,5257]]],[1551017969166,["gjx16@GJXAIOU",[[-1,5256,"o"]],[5257,5257],[5256,5256]]],[1551017983489,["gjx16@GJXAIOU",[[1,5256,"lf, a. "]],[5256,5256],[5263,5263]]],[1551017984166,["gjx16@GJXAIOU",[[-1,5261,". "]],[5263,5263],[5261,5261]]],[1551017986002,["gjx16@GJXAIOU",[[1,5261,", b"]],[5261,5261],[5264,5264]]],[1551017987871,["gjx16@GJXAIOU",[[1,5266,"    \n"]],[5265,5265],[5270,5270]]],[1551018004346,["gjx16@GJXAIOU",[[1,5270,"    C = {\"a\""]],[5270,5270],[5282,5282]]],[1551018008661,["gjx16@GJXAIOU",[[-1,5280,"a"]],[5281,5281],[5280,5280]]],[1551018009464,["gjx16@GJXAIOU",[[1,5280,"A"]],[5280,5280],[5281,5281]]],[1551018022208,["gjx16@GJXAIOU",[[1,5282,":a, \"B\":b}"]],[5282,5282],[5292,5292]]],[1551018025077,["gjx16@GJXAIOU",[[1,5293,"        \n"]],[5292,5292],[5301,5301]]],[1551018028778,["gjx16@GJXAIOU",[[1,5301,"returnC"]],[5301,5301],[5308,5308]]],[1551018029421,["gjx16@GJXAIOU",[[-1,5307,"C"]],[5308,5308],[5307,5307]]],[1551018030546,["gjx16@GJXAIOU",[[1,5307," C"]],[5307,5307],[5309,5309]]]],null,"gjx16@GJXAIOU"]]}