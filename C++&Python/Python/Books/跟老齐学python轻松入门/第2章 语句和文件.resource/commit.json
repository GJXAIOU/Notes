{"compress":true,"commitItems":[["3d2d4f57-b574-4367-b15c-de2018a36f96",1541426393634,"",[[1541426346220,["gjx16@GJXAIOU",[[1,0,"# 第2章 语句和文件\n\n\n\n"]],[0,0],[14,14]]],[1541426385000,["gjx16@GJXAIOU",[[-1,14,"\n"],[1,15,"#"]],[14,14],[15,15]]],[1541426390712,["gjx16@GJXAIOU",[[1,15,"# 2.1 "]],[15,15],[21,21]]],[1541426394088,["gjx16@GJXAIOU",[[1,21,"yu"]],[21,21],[23,23]]],[1541426395289,["gjx16@GJXAIOU",[[-1,21,"yu"]],[23,23],[21,21]]],[1541426398280,["gjx16@GJXAIOU",[[1,21,"运算符"]],[21,21],[24,24]]],[1541426399174,["gjx16@GJXAIOU",[[1,24,"\n\n"]],[24,24],[25,25]]],[1541426400712,["gjx16@GJXAIOU",[[1,26,"\n"]],[25,25],[26,26]]],[1541426402194,["gjx16@GJXAIOU",[[-1,26,"\n"],[1,27,"#"]],[26,26],[27,27]]],[1541426414045,["gjx16@GJXAIOU",[[1,27,"## 2.1.2 算术运算符"]],[27,27],[41,41]]],[1541426414729,["gjx16@GJXAIOU",[[1,41,"\n\n"]],[41,41],[42,42]]],[1541426473768,["gjx16@GJXAIOU",[[1,42,"| 运算符 | 描述 | 实例 |\n| + | 加 - 两个对象相加 | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数 | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y | b / a 输出结果 2 |\n| % | 取模 - 返回除法的余数 | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂 | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） | \n\n>>>  9//2  4  >>>  -9//2  -5\n\n |"]],[42,42],[392,392]]],[1541426477854,["gjx16@GJXAIOU",[[1,60,"\n"]],[59,59],[60,60]]],[1541426491714,["gjx16@GJXAIOU",[[1,60,"|---|---|---|---|"]],[60,60],[77,77]]],[1541426511950,["gjx16@GJXAIOU",[[1,95,"                      "]],[95,95],[117,117]]],[1541426519176,["gjx16@GJXAIOU",[[1,161,"           "]],[161,161],[172,172]]],[1541426520982,["gjx16@GJXAIOU",[[1,117,"     "]],[117,117],[122,122]]],[1541426524977,["gjx16@GJXAIOU",[[1,262,"                                 "]],[262,262],[295,295]]],[1541426529816,["gjx16@GJXAIOU",[[1,331,"                         "]],[331,331],[356,356]]],[1541426534032,["gjx16@GJXAIOU",[[1,392,"                    "]],[392,392],[412,412]]],[1541426540470,["gjx16@GJXAIOU",[[-1,494,">>>  9//2  4  >>>  -9//2  -5"]],[494,522],[494,494]]],[1541426542141,["gjx16@GJXAIOU",[[1,492,">>>  9//2  4  >>>  -9//2  -5"]],[492,492],[520,520]]],[1541426544063,["gjx16@GJXAIOU",[[-1,525,"|"]],[526,526],[525,525]]],[1541426549517,["gjx16@GJXAIOU",[[-1,492,">>> "]],[496,496],[492,492]]],[1541426554697,["gjx16@GJXAIOU",[[-1,502,">>>"]],[505,505],[502,502]]],[1541426577326,["gjx16@GJXAIOU",[[-1,319,"模"]],[320,320],[319,319]]],[1541426583313,["gjx16@GJXAIOU",[[1,319,"余"]],[319,319],[320,320]]],[1541426608680,["gjx16@GJXAIOU",[[1,517,"\n"]],[515,515],[516,516]]],[1541426613406,["gjx16@GJXAIOU",[[1,516,"### 2.1.2"]],[516,516],[525,525]]],[1541426613997,["gjx16@GJXAIOU",[[-1,524,"2"]],[525,525],[524,524]]],[1541426614465,["gjx16@GJXAIOU",[[1,524,"3"]],[524,524],[525,525]]],[1541426618581,["gjx16@GJXAIOU",[[-1,34,"2"]],[35,35],[34,34]]],[1541426618775,["gjx16@GJXAIOU",[[1,34,"1"]],[34,34],[35,35]]],[1541426622138,["gjx16@GJXAIOU",[[-1,524,"3"]],[525,525],[524,524]]],[1541426629511,["gjx16@GJXAIOU",[[1,524,"2 比较运算符"]],[524,524],[531,531]]],[1541426630120,["gjx16@GJXAIOU",[[1,533,"\n"]],[531,531],[532,532]]],[1541426649847,["gjx16@GJXAIOU",[[1,532,"| 运算符 | 描述 | 实例 |\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |"]],[532,532],[923,923]]],[1541426654454,["gjx16@GJXAIOU",[[1,550,"\n"]],[549,549],[550,550]]],[1541426654869,["gjx16@GJXAIOU",[[1,550,"|---|---|---|---|"]],[550,550],[567,567]]],[1541426661045,["gjx16@GJXAIOU",[[-1,943," "],[1,944,"\n"]],[944,944],[944,944]]],[1541426661198,["gjx16@GJXAIOU",[[1,945,"\n"]],[944,944],[945,945]]],[1541427290760,["gjx16@GJXAIOU",[[1,946,"\n"]],[942,942],[943,943]]],[1541427290894,["gjx16@GJXAIOU",[[1,947,"\n"]],[943,943],[944,944]]],[1541427291233,["gjx16@GJXAIOU",[[1,948,"\n"]],[944,944],[945,945]]],[1541427293313,["gjx16@GJXAIOU",[[1,945,"###"]],[945,945],[948,948]]],[1541427295744,["gjx16@GJXAIOU",[[1,948," 2.3"]],[948,948],[952,952]]],[1541427296157,["gjx16@GJXAIOU",[[-1,951,"3"]],[952,952],[951,951]]],[1541427296735,["gjx16@GJXAIOU",[[1,951,"2.3"]],[951,951],[954,954]]],[1541427298094,["gjx16@GJXAIOU",[[-1,951,"2.3"]],[954,954],[951,951]]],[1541427309053,["gjx16@GJXAIOU",[[1,951,"1.3 逻辑运算符"]],[951,951],[960,960]]],[1541427309480,["gjx16@GJXAIOU",[[1,964,"\n"]],[960,960],[961,961]]],[1541427342272,["gjx16@GJXAIOU",[[1,962,"- 1.布尔类型"]],[962,962],[970,970]]],[1541427342829,["gjx16@GJXAIOU",[[1,971,"- \n"]],[970,970],[973,973]]],[1541427350937,["gjx16@GJXAIOU",[[1,973,"2.布尔运算"]],[973,973],[979,979]]],[1541427357796,["gjx16@GJXAIOU",[[1,980,"- \n"]],[979,979],[982,982]]],[1541427361151,["gjx16@GJXAIOU",[[1,532,"\n"]],[531,531],[532,532]]],[1541427364604,["gjx16@GJXAIOU",[[1,532,"任何统一"]],[532,532],[536,536]]],[1541427367230,["gjx16@GJXAIOU",[[-1,532,"任何统一"]],[536,536],[532,532]]],[1541427391281,["gjx16@GJXAIOU",[[1,532,"任何两个同一类型的对象都可以进行比价"]],[532,532],[550,550]]],[1541427392341,["gjx16@GJXAIOU",[[-1,548,"比价"]],[550,550],[548,548]]],[1541427397817,["gjx16@GJXAIOU",[[1,548,"比较"]],[548,548],[550,550]]],[1541427398883,["gjx16@GJXAIOU",[[1,551,"\n"]],[550,550],[551,551]]],[1541427522368,["gjx16@GJXAIOU",[[1,993,"\n- "]],[990,990],[993,993]]],[1541427523652,["gjx16@GJXAIOU",[[-1,991,"- "]],[993,993],[991,991]]],[1541427532794,["gjx16@GJXAIOU",[[1,991,"本质上就是返回值为"]],[991,991],[1000,1000]]],[1541427535619,["gjx16@GJXAIOU",[[1,1000,"true"]],[1000,1000],[1004,1004]]],[1541427537716,["gjx16@GJXAIOU",[[-1,1001,"rue"]],[1004,1004],[1001,1001]]],[1541427538157,["gjx16@GJXAIOU",[[1,1001," "]],[1001,1001],[1002,1002]]],[1541427539236,["gjx16@GJXAIOU",[[-1,1000,"t "]],[1002,1002],[1000,1000]]],[1541427540932,["gjx16@GJXAIOU",[[1,1000," ``"]],[1000,1000],[1003,1003]]],[1541427545094,["gjx16@GJXAIOU",[[1,1002,"True"]],[1002,1002],[1006,1006]]],[1541427547925,["gjx16@GJXAIOU",[[1,1007," h"]],[1007,1007],[1009,1009]]],[1541427548334,["gjx16@GJXAIOU",[[-1,1008,"h"]],[1009,1009],[1008,1008]]],[1541427550549,["gjx16@GJXAIOU",[[1,1008,"和``"]],[1008,1008],[1011,1011]]],[1541427557857,["gjx16@GJXAIOU",[[1,1010,"False"]],[1010,1010],[1015,1015]]],[1541427561845,["gjx16@GJXAIOU",[[1,1016," de"]],[1016,1016],[1019,1019]]],[1541427563532,["gjx16@GJXAIOU",[[-1,1017,"de"]],[1019,1019],[1017,1017]]],[1541427571311,["gjx16@GJXAIOU",[[1,1017,"的对象"]],[1017,1017],[1020,1020]]],[1541427572436,["gjx16@GJXAIOU",[[1,1021,"\n"]],[1020,1020],[1021,1021]]],[1541427578422,["gjx16@GJXAIOU",[[1,1021,"注意："]],[1021,1021],[1024,1024]]],[1541427579351,["gjx16@GJXAIOU",[[1,1025,"\n"]],[1024,1024],[1025,1025]]],[1541427796871,["gjx16@GJXAIOU",[[1,1025,"·"]],[1025,1025],[1026,1026]]],[1541427797791,["gjx16@GJXAIOU",[[-1,1025,"·"]],[1026,1026],[1025,1025]]],[1541427799388,["gjx16@GJXAIOU",[[1,1025,"```"]],[1025,1025],[1028,1028]]],[1541427799414,["gjx16@GJXAIOU",[[1,1028,"language\n```\n"]],[1028,1028],[1028,1036]]],[1541427800758,["gjx16@GJXAIOU",[[-1,1028,"language"],[1,1036,"p"]],[1028,1036],[1029,1029]]],[1541427801549,["gjx16@GJXAIOU",[[1,1029,"ython"]],[1029,1029],[1034,1034]]],[1541427804339,["gjx16@GJXAIOU",[[1,1035,"\n"]],[1034,1034],[1035,1035]]],[1541427805464,["gjx16@GJXAIOU",[[1,1035,"a = \" \"#这里是空格，空格也是一个字符 print(bool(a))\n\nb = \"\"#这里是空，不是空格 print(bool(b))\n\nprint(bool([])) #这是空列表   print(bool({})) #这是空字典"]],[1035,1035],[1154,1154]]],[1541427807724,["gjx16@GJXAIOU",[[-1,1035,"a = \" \"#这里是空格，空格也是一个字符 print(bool(a))\n\nb = \"\"#这里是空，不是空格 print(bool(b))\n\nprint(bool([])) #这是空列表   print(bool({})) #这是空字典"]],[1154,1154],[1035,1035]]],[1541427810569,["gjx16@GJXAIOU",[[1,1035,"a = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典"]],[1035,1035],[1153,1153]]],[1541427813120,["gjx16@GJXAIOU",[[1,1159,"\n"]],[1157,1157],[1158,1158]]],[1541427813852,["gjx16@GJXAIOU",[[1,1158,"c"]],[1158,1158],[1159,1159]]],[1541427814475,["gjx16@GJXAIOU",[[-1,1158,"c"]],[1159,1159],[1158,1158]]],[1541427821359,["gjx16@GJXAIOU",[[1,1158,"程序运行结果："]],[1158,1158],[1165,1165]]],[1541427827972,["gjx16@GJXAIOU",[[1,1167,"\n"]],[1165,1165],[1166,1166]]],[1541427829764,["gjx16@GJXAIOU",[[1,1166,"True\nFalse\nFalse\nFalse"]],[1166,1166],[1188,1188]]],[1541427833581,["gjx16@GJXAIOU",[[1,1166,"`"]],[1166,1166],[1167,1167]]],[1541427835841,["gjx16@GJXAIOU",[[1,1171,"`"]],[1171,1171],[1172,1172]]],[1541427836462,["gjx16@GJXAIOU",[[1,1177,"`"]],[1177,1177],[1178,1178]]],[1541427837531,["gjx16@GJXAIOU",[[-1,1177,"`"]],[1178,1178],[1177,1177]]],[1541427839324,["gjx16@GJXAIOU",[[1,1173,"`"]],[1173,1173],[1174,1174]]],[1541427839940,["gjx16@GJXAIOU",[[1,1180,"`"]],[1180,1180],[1181,1181]]],[1541427840581,["gjx16@GJXAIOU",[[1,1187,"`"]],[1187,1187],[1188,1188]]],[1541427841965,["gjx16@GJXAIOU",[[1,1193,"`"]],[1193,1193],[1194,1194]]],[1541427842369,["gjx16@GJXAIOU",[[1,1186,"`"]],[1186,1186],[1187,1187]]],[1541427842764,["gjx16@GJXAIOU",[[1,1179,"`"]],[1179,1179],[1180,1180]]],[1541427853547,["gjx16@GJXAIOU",[[-1,1207,"- "]],[1209,1209],[1207,1207]]],[1541427855767,["gjx16@GJXAIOU",[[1,1207,"P"]],[1207,1207],[1208,1208]]],[1541427857759,["gjx16@GJXAIOU",[[-1,1207,"P"]],[1208,1208],[1207,1207]]],[1541427859871,["gjx16@GJXAIOU",[[1,1207,"~~~~"]],[1207,1207],[1209,1209]]],[1541427863029,["gjx16@GJXAIOU",[[1,1209,"P103"]],[1209,1209],[1213,1213]]]],null,"gjx16@GJXAIOU"],["a89242c6-1745-47fc-ab81-f17437e0233b",1541486615948,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n~~P103~~\n\n\n",[[1541486568314,["gjx16@GJXAIOU",[[-1,1207,"~~P103~~"]],[1215,1215],[1207,1207]]],[1541486602195,["gjx16@GJXAIOU",[[1,1207,"进行布尔运算的运算符称为逻辑运算符  ：and   od"]],[1207,1207],[1235,1235]]],[1541486602564,["gjx16@GJXAIOU",[[-1,1234,"d"]],[1235,1235],[1234,1234]]],[1541486605521,["gjx16@GJXAIOU",[[1,1234,"r     not"]],[1234,1234],[1243,1243]]],[1541486606251,["gjx16@GJXAIOU",[[1,1246,"\n"]],[1243,1243],[1244,1244]]],[1541486607093,["gjx16@GJXAIOU",[[1,1247,"\n"]],[1244,1244],[1245,1245]]],[1541486614344,["gjx16@GJXAIOU",[[1,1245,"  - and :"]],[1245,1245],[1254,1254]]],[1541486641130,["gjx16@GJXAIOU",[[1,1255,"  - \n"]],[1254,1254],[1259,1259]]],[1541486642785,["gjx16@GJXAIOU",[[-1,1257,"- "]],[1259,1259],[1257,1257]]],[1541486644865,["gjx16@GJXAIOU",[[1,1257,"hany"]],[1257,1257],[1261,1261]]],[1541486646304,["gjx16@GJXAIOU",[[-1,1257,"hany"]],[1261,1261],[1257,1257]]],[1541486653700,["gjx16@GJXAIOU",[[1,1257,"****"]],[1257,1257],[1259,1259]]],[1541486654850,["gjx16@GJXAIOU",[[1,1259,"han"]],[1259,1259],[1262,1262]]],[1541486655589,["gjx16@GJXAIOU",[[-1,1259,"han"]],[1262,1262],[1259,1259]]],[1541486657450,["gjx16@GJXAIOU",[[1,1259,"含义："]],[1259,1259],[1262,1262]]],[1541486669672,["gjx16@GJXAIOU",[[1,1264," 如果A wei"]],[1264,1264],[1272,1272]]],[1541486670563,["gjx16@GJXAIOU",[[-1,1269,"wei"]],[1272,1272],[1269,1269]]],[1541486674818,["gjx16@GJXAIOU",[[1,1269,"为true，"]],[1269,1269],[1275,1275]]],[1541486683474,["gjx16@GJXAIOU",[[1,1275,"计算B，最红"]],[1275,1275],[1281,1281]]],[1541486684894,["gjx16@GJXAIOU",[[-1,1280,"红"]],[1281,1281],[1280,1280]]],[1541486727275,["gjx16@GJXAIOU",[[1,1280,"终结果为B   ；如果A为False ，就不用计算B，结果为False"]],[1280,1280],[1315,1315]]],[1541486728078,["gjx16@GJXAIOU",[[1,1316,"  \n"]],[1315,1315],[1318,1318]]],[1541486747054,["gjx16@GJXAIOU",[[1,1254,"      A ans"]],[1254,1254],[1265,1265]]],[1541486747655,["gjx16@GJXAIOU",[[-1,1264,"s"]],[1265,1265],[1264,1264]]],[1541486748089,["gjx16@GJXAIOU",[[1,1264,"s "]],[1264,1264],[1266,1266]]],[1541486748721,["gjx16@GJXAIOU",[[-1,1264,"s "]],[1266,1266],[1264,1264]]],[1541486750659,["gjx16@GJXAIOU",[[1,1264,"d  B"]],[1264,1264],[1268,1268]]],[1541486754315,["gjx16@GJXAIOU",[[1,1333,"  \n"]],[1329,1329],[1332,1332]]],[1541486754848,["gjx16@GJXAIOU",[[-1,1330,"  "],[1,1332,"\n"]],[1332,1332],[1331,1331]]],[1541486755833,["gjx16@GJXAIOU",[[1,1331,"-"]],[1331,1331],[1332,1332]]],[1541486756713,["gjx16@GJXAIOU",[[-1,1331,"-"]],[1332,1332],[1331,1331]]],[1541486772320,["gjx16@GJXAIOU",[[1,1331,"  - or  :     A or B  "]],[1331,1331],[1353,1353]]],[1541486772632,["gjx16@GJXAIOU",[[1,1356,"- \n  "]],[1353,1353],[1358,1358]]],[1541486774561,["gjx16@GJXAIOU",[[-1,1356,"- "]],[1358,1358],[1356,1356]]],[1541486775773,["gjx16@GJXAIOU",[[1,1356,"****"]],[1356,1356],[1358,1358]]],[1541486776673,["gjx16@GJXAIOU",[[1,1358,"ha"]],[1358,1358],[1360,1360]]],[1541486777226,["gjx16@GJXAIOU",[[-1,1358,"ha"]],[1360,1360],[1358,1358]]],[1541486780291,["gjx16@GJXAIOU",[[1,1358,"含义：·"]],[1358,1358],[1362,1362]]],[1541486781043,["gjx16@GJXAIOU",[[-1,1361,"·"]],[1362,1362],[1361,1361]]],[1541486783826,["gjx16@GJXAIOU",[[1,1363," "]],[1363,1363],[1364,1364]]],[1541486813364,["gjx16@GJXAIOU",[[1,1364,"RUO"]],[1364,1364],[1367,1367]]],[1541486814339,["gjx16@GJXAIOU",[[-1,1364,"RUO"]],[1367,1367],[1364,1364]]],[1541486815905,["gjx16@GJXAIOU",[[1,1364,"tr"]],[1364,1364],[1366,1366]]],[1541486817866,["gjx16@GJXAIOU",[[-1,1364,"tr"]],[1366,1366],[1364,1364]]],[1541486818034,["gjx16@GJXAIOU",[[1,1364,"R"]],[1364,1364],[1365,1365]]],[1541486818665,["gjx16@GJXAIOU",[[-1,1364,"R"]],[1365,1365],[1364,1364]]],[1541486854861,["gjx16@GJXAIOU",[[1,1364,"如果A的值为True ，结果为True"]],[1364,1364],[1383,1383]]],[1541486861812,["gjx16@GJXAIOU",[[1,1383,"  ； 如果A为？"]],[1383,1383],[1392,1392]]],[1541486862971,["gjx16@GJXAIOU",[[-1,1391,"？"]],[1392,1392],[1391,1391]]],[1541486877083,["gjx16@GJXAIOU",[[1,1391,"False，结果看B的值"]],[1391,1391],[1403,1403]]],[1541486881860,["gjx16@GJXAIOU",[[1,1407,"  \n"]],[1403,1403],[1406,1406]]],[1541486882534,["gjx16@GJXAIOU",[[-1,1404,"  "],[1,1406,"\n"]],[1406,1406],[1405,1405]]],[1541486884675,["gjx16@GJXAIOU",[[1,1405,"  ·-"]],[1405,1405],[1409,1409]]],[1541486885848,["gjx16@GJXAIOU",[[-1,1407,"·-"]],[1409,1409],[1407,1407]]],[1541486888009,["gjx16@GJXAIOU",[[1,1407,"  - "]],[1407,1407],[1411,1411]]],[1541486889347,["gjx16@GJXAIOU",[[-1,1408," - "]],[1411,1411],[1408,1408]]],[1541486890842,["gjx16@GJXAIOU",[[1,1408,"- "]],[1408,1408],[1410,1410]]],[1541486892056,["gjx16@GJXAIOU",[[-1,1407," - "]],[1410,1410],[1407,1407]]],[1541486904144,["gjx16@GJXAIOU",[[1,1407,"- not   ：A not"]],[1407,1407],[1421,1421]]],[1541486908397,["gjx16@GJXAIOU",[[-1,1416,"A not"]],[1421,1421],[1416,1416]]],[1541486912272,["gjx16@GJXAIOU",[[1,1416,"nou A"]],[1416,1416],[1421,1421]]],[1541486913187,["gjx16@GJXAIOU",[[-1,1418,"u A"]],[1421,1421],[1418,1418]]],[1541486914240,["gjx16@GJXAIOU",[[1,1418,"t "]],[1418,1418],[1420,1420]]],[1541486914930,["gjx16@GJXAIOU",[[1,1420,"A"]],[1420,1420],[1421,1421]]],[1541486915820,["gjx16@GJXAIOU",[[1,1424,"- \n  "]],[1421,1421],[1426,1426]]],[1541486916950,["gjx16@GJXAIOU",[[-1,1424,"- "]],[1426,1426],[1424,1424]]],[1541486918387,["gjx16@GJXAIOU",[[1,1424,"****"]],[1424,1424],[1426,1426]]],[1541486919322,["gjx16@GJXAIOU",[[1,1426,"h"]],[1426,1426],[1427,1427]]],[1541486919793,["gjx16@GJXAIOU",[[-1,1426,"h"]],[1427,1427],[1426,1426]]],[1541486921412,["gjx16@GJXAIOU",[[1,1426,"含义："]],[1426,1426],[1429,1429]]],[1541486941217,["gjx16@GJXAIOU",[[1,1431," 取反就行"]],[1431,1431],[1436,1436]]],[1541486941718,["gjx16@GJXAIOU",[[1,1440,"  \n"]],[1436,1436],[1439,1439]]],[1541486941959,["gjx16@GJXAIOU",[[-1,1437,"  "],[1,1439,"\n"]],[1439,1439],[1438,1438]]],[1541486971644,["gjx16@GJXAIOU",[[1,1438,"对于复杂的布尔表达式一定使用括号来"]],[1438,1438],[1455,1455]]],[1541486978144,["gjx16@GJXAIOU",[[1,1455,"自传选择"]],[1455,1455],[1459,1459]]],[1541486979651,["gjx16@GJXAIOU",[[-1,1455,"自传选择"]],[1459,1459],[1455,1455]]],[1541486986218,["gjx16@GJXAIOU",[[1,1455,"自主选择优先级"]],[1455,1455],[1462,1462]]],[1541486987067,["gjx16@GJXAIOU",[[1,1463,"\n"]],[1462,1462],[1463,1463]]],[1541486987549,["gjx16@GJXAIOU",[[1,1464,"\n"]],[1463,1463],[1464,1464]]],[1541486990304,["gjx16@GJXAIOU",[[1,1465,"\n"]],[1464,1464],[1465,1465]]],[1541486990456,["gjx16@GJXAIOU",[[1,1466,"\n"]],[1465,1465],[1466,1466]]],[1541487027259,["gjx16@GJXAIOU",[[1,1466,"## 2.2 简单语句  "]],[1466,1466],[1479,1479]]],[1541487027613,["gjx16@GJXAIOU",[[1,1480,"\n"]],[1479,1479],[1480,1480]]],[1541487027752,["gjx16@GJXAIOU",[[1,1481,"\n"]],[1480,1480],[1481,1481]]],[1541487072289,["gjx16@GJXAIOU",[[1,1481,"### 2.2.2"]],[1481,1481],[1490,1490]]],[1541487072883,["gjx16@GJXAIOU",[[-1,1489,"2"]],[1490,1490],[1489,1489]]],[1541487078904,["gjx16@GJXAIOU",[[1,1489,"1  import   "]],[1489,1489],[1501,1501]]],[1541487079276,["gjx16@GJXAIOU",[[1,1502,"\n"]],[1501,1501],[1502,1502]]],[1541487090504,["gjx16@GJXAIOU",[[1,1502,"使用import math    "]],[1502,1502],[1519,1519]]],[1541487100664,["gjx16@GJXAIOU",[[1,1519,"导入math模块"]],[1519,1519],[1527,1527]]],[1541487106937,["gjx16@GJXAIOU",[[1,1504,"`"]],[1504,1504],[1505,1505]]],[1541487109665,["gjx16@GJXAIOU",[[1,1516,"`"]],[1516,1516],[1517,1517]]],[1541487113337,["gjx16@GJXAIOU",[[1,1529,","]],[1529,1529],[1530,1530]]],[1541487123589,["gjx16@GJXAIOU",[[1,1531,"\n"]],[1530,1530],[1531,1531]]],[1541487124224,["gjx16@GJXAIOU",[[1,1531,"s"]],[1531,1531],[1532,1532]]],[1541487125205,["gjx16@GJXAIOU",[[-1,1531,"s"]],[1532,1532],[1531,1531]]],[1541487137624,["gjx16@GJXAIOU",[[1,1531,"使用math模块里面的函数：``"]],[1531,1531],[1547,1547]]],[1541487142351,["gjx16@GJXAIOU",[[1,1546,"math.poe"]],[1546,1546],[1554,1554]]],[1541487143195,["gjx16@GJXAIOU",[[-1,1553,"e"]],[1554,1554],[1553,1553]]],[1541487144160,["gjx16@GJXAIOU",[[1,1553,"w()"]],[1553,1553],[1556,1556]]],[1541487147313,["gjx16@GJXAIOU",[[1,1555,"3,2"]],[1555,1555],[1558,1558]]],[1541487153666,["gjx16@GJXAIOU",[[1,1560,","]],[1560,1560],[1561,1561]]],[1541487158924,["gjx16@GJXAIOU",[[1,1561,"这种应用方式"]],[1561,1561],[1567,1567]]],[1541487160730,["gjx16@GJXAIOU",[[-1,1563,"应用方式"]],[1567,1567],[1563,1563]]],[1541487174930,["gjx16@GJXAIOU",[[1,1563,"应用方式可以避免重复"]],[1563,1563],[1573,1573]]],[1541487177322,["gjx16@GJXAIOU",[[-1,1571,"重复"]],[1573,1573],[1571,1571]]],[1541487181165,["gjx16@GJXAIOU",[[1,1571,"函数重名"]],[1571,1571],[1575,1575]]],[1541487196527,["gjx16@GJXAIOU",[[1,1576,"\n"]],[1575,1575],[1576,1576]]],[1541487196703,["gjx16@GJXAIOU",[[1,1577,"\n"]],[1576,1576],[1577,1577]]],[1541487196894,["gjx16@GJXAIOU",[[1,1578,"\n"]],[1577,1577],[1578,1578]]],[1541487197250,["gjx16@GJXAIOU",[[1,1579,"\n"]],[1578,1578],[1579,1579]]],[1541487208029,["gjx16@GJXAIOU",[[1,1579,"### 2.2.2 赋值"]],[1579,1579],[1591,1591]]],[1541487208433,["gjx16@GJXAIOU",[[1,1592,"\n"]],[1591,1591],[1592,1592]]],[1541487209283,["gjx16@GJXAIOU",[[1,1593,"\n"]],[1592,1592],[1593,1593]]],[1541498830786,["gjx16@GJXAIOU",[[1,1592,"·"]],[1592,1592],[1593,1593]]],[1541498832557,["gjx16@GJXAIOU",[[-1,1592,"·"]],[1593,1593],[1592,1592]]],[1541498833960,["gjx16@GJXAIOU",[[1,1592,"```"]],[1592,1592],[1595,1595]]],[1541498833989,["gjx16@GJXAIOU",[[1,1595,"language\n```\n"]],[1595,1595],[1595,1603]]],[1541498835359,["gjx16@GJXAIOU",[[-1,1595,"language"],[1,1603,"p"]],[1595,1603],[1596,1596]]],[1541498836185,["gjx16@GJXAIOU",[[1,1596,"ython"]],[1596,1596],[1601,1601]]],[1541498836751,["gjx16@GJXAIOU",[[1,1602,"\n"]],[1601,1601],[1602,1602]]],[1541498841359,["gjx16@GJXAIOU",[[1,1602,"#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)"]],[1602,1602],[2380,2380]]],[1541498848182,["gjx16@GJXAIOU",[[1,2387,"\n"]],[2384,2384],[2385,2385]]],[1541498848303,["gjx16@GJXAIOU",[[1,2388,"\n"]],[2385,2385],[2386,2386]]],[1541498849568,["gjx16@GJXAIOU",[[1,2386,"cheng"]],[2386,2386],[2391,2391]]],[1541498850722,["gjx16@GJXAIOU",[[-1,2386,"cheng"]],[2391,2391],[2386,2386]]],[1541498851148,["gjx16@GJXAIOU",[[-1,2388,"\n"]],[2386,2386],[2385,2385]]],[1541498857080,["gjx16@GJXAIOU",[[1,2385,"程序运行结果："]],[2385,2385],[2392,2392]]],[1541498858020,["gjx16@GJXAIOU",[[1,2395,"\n"]],[2392,2392],[2393,2393]]],[1541498870268,["gjx16@GJXAIOU",[[1,2393,"1\npython\n['hello', 'world']\n('hello', 'python')\n3\n2\nm =  python ; n =  python\nid(m) =  2859978232080 id(n) =  2859978232080\nTrue\nTrue\nTrue\n2859977205744 2859977205744\nTrue\n2859978871344 2859978871344\nTrue\n10\npython"]],[2393,2393],[2607,2607]]],[1541498874026,["gjx16@GJXAIOU",[[1,2393,"·"]],[2393,2393],[2394,2394]]],[1541498876436,["gjx16@GJXAIOU",[[-1,2393,"·"]],[2394,2394],[2393,2393]]],[1541498876858,["gjx16@GJXAIOU",[[1,2393,"`"]],[2393,2393],[2394,2394]]],[1541498877983,["gjx16@GJXAIOU",[[1,2396,"`"]],[2396,2396],[2397,2397]]],[1541498878640,["gjx16@GJXAIOU",[[1,2405,"`"]],[2405,2405],[2406,2406]]],[1541498879566,["gjx16@GJXAIOU",[[-1,2405,"`"]],[2406,2406],[2405,2405]]],[1541498880872,["gjx16@GJXAIOU",[[1,2404,"`"]],[2404,2404],[2405,2405]]],[1541498881879,["gjx16@GJXAIOU",[[1,2424,"`"]],[2424,2424],[2425,2425]]],[1541498882672,["gjx16@GJXAIOU",[[1,2445,"`"]],[2445,2445],[2446,2446]]],[1541498883272,["gjx16@GJXAIOU",[[1,2448,"`"]],[2448,2448],[2449,2449]]],[1541498884056,["gjx16@GJXAIOU",[[1,2451,"`"]],[2451,2451],[2452,2452]]],[1541498885063,["gjx16@GJXAIOU",[[1,2478,"`"]],[2478,2478],[2479,2479]]],[1541498885887,["gjx16@GJXAIOU",[[1,2525,"`"]],[2525,2525],[2526,2526]]],[1541498886639,["gjx16@GJXAIOU",[[1,2531,"`"]],[2531,2531],[2532,2532]]],[1541498887303,["gjx16@GJXAIOU",[[1,2537,"`"]],[2537,2537],[2538,2538]]],[1541498888239,["gjx16@GJXAIOU",[[1,2543,"`"]],[2543,2543],[2544,2544]]],[1541498888895,["gjx16@GJXAIOU",[[1,2572,"`"]],[2572,2572],[2573,2573]]],[1541498889608,["gjx16@GJXAIOU",[[1,2578,"`"]],[2578,2578],[2579,2579]]],[1541498890383,["gjx16@GJXAIOU",[[1,2607,"`"]],[2607,2607],[2608,2608]]],[1541498891079,["gjx16@GJXAIOU",[[1,2613,"`"]],[2613,2613],[2614,2614]]],[1541498891856,["gjx16@GJXAIOU",[[1,2617,"`"]],[2617,2617],[2618,2618]]],[1541498894031,["gjx16@GJXAIOU",[[1,2624,"`"]],[2624,2624],[2625,2625]]],[1541498894472,["gjx16@GJXAIOU",[[1,2616,"`"]],[2616,2616],[2617,2617]]],[1541498895654,["gjx16@GJXAIOU",[[1,2612,"`"]],[2612,2612],[2613,2613]]],[1541498898583,["gjx16@GJXAIOU",[[1,2606,"`"]],[2606,2606],[2607,2607]]],[1541498899110,["gjx16@GJXAIOU",[[1,2577,"`"]],[2577,2577],[2578,2578]]],[1541498901902,["gjx16@GJXAIOU",[[1,2571,"`"]],[2571,2571],[2572,2572]]],[1541498902518,["gjx16@GJXAIOU",[[1,2542,"`"]],[2542,2542],[2543,2543]]],[1541498902934,["gjx16@GJXAIOU",[[1,2536,"`"]],[2536,2536],[2537,2537]]],[1541498903406,["gjx16@GJXAIOU",[[1,2530,"`"]],[2530,2530],[2531,2531]]],[1541498908144,["gjx16@GJXAIOU",[[1,2524,"`"]],[2524,2524],[2525,2525]]],[1541498908568,["gjx16@GJXAIOU",[[1,2477,"`"]],[2477,2477],[2478,2478]]],[1541498909215,["gjx16@GJXAIOU",[[1,2450,"`"]],[2450,2450],[2451,2451]]],[1541498909625,["gjx16@GJXAIOU",[[1,2447,"`"]],[2447,2447],[2448,2448]]],[1541498913161,["gjx16@GJXAIOU",[[1,2444,"`"]],[2444,2444],[2445,2445]]],[1541498913663,["gjx16@GJXAIOU",[[1,2423,"`"]],[2423,2423],[2424,2424]]],[1541498914486,["gjx16@GJXAIOU",[[1,2403,"`"]],[2403,2403],[2404,2404]]],[1541498915079,["gjx16@GJXAIOU",[[1,2395,"`"]],[2395,2395],[2396,2396]]]],null,"gjx16@GJXAIOU"],["bfbf0db1-9d94-491a-9a5a-36e22f58280e",1542193356240,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n\n  \n\n\n",[[1542193338780,["gjx16@GJXAIOU",[[1,2644,"\n"]],[2641,2641],[2642,2642]]],[1542193338905,["gjx16@GJXAIOU",[[1,2645,"\n"]],[2642,2642],[2643,2643]]],[1542193344865,["gjx16@GJXAIOU",[[1,2643,"## 2.43"]],[2643,2643],[2650,2650]]],[1542193345784,["gjx16@GJXAIOU",[[-1,2648,"43"]],[2650,2650],[2648,2648]]],[1542193347272,["gjx16@GJXAIOU",[[1,2648,"3 "]],[2648,2648],[2650,2650]]],[1542193372459,["gjx16@GJXAIOU",[[1,2650,"条件语句"]],[2650,2650],[2654,2654]]],[1542193373225,["gjx16@GJXAIOU",[[1,2657,"\n"]],[2654,2654],[2655,2655]]],[1542193373385,["gjx16@GJXAIOU",[[1,2658,"\n"]],[2655,2655],[2656,2656]]],[1542193379288,["gjx16@GJXAIOU",[[1,2656,"### 2.3.31"]],[2656,2656],[2666,2666]]],[1542193379877,["gjx16@GJXAIOU",[[-1,2663,".31"]],[2666,2666],[2663,2663]]],[1542193380939,["gjx16@GJXAIOU",[[1,2663,"1.、"]],[2663,2663],[2666,2666]]],[1542193381544,["gjx16@GJXAIOU",[[-1,2663,"1.、"]],[2666,2666],[2663,2663]]],[1542193382895,["gjx16@GJXAIOU",[[1,2663,"。1"]],[2663,2663],[2665,2665]]],[1542193383560,["gjx16@GJXAIOU",[[-1,2663,"。1"]],[2665,2665],[2663,2663]]],[1542193413178,["gjx16@GJXAIOU",[[1,2663,".1 if  。。。"]],[2663,2663],[2673,2673]]],[1542193413882,["gjx16@GJXAIOU",[[-1,2670,"。。。"]],[2673,2673],[2670,2670]]],[1542193415705,["gjx16@GJXAIOU",[[1,2670,"...s"]],[2670,2670],[2674,2674]]],[1542193416548,["gjx16@GJXAIOU",[[-1,2673,"s"]],[2674,2674],[2673,2673]]],[1542193417489,["gjx16@GJXAIOU",[[1,2673,"else"]],[2673,2673],[2677,2677]]],[1542193419776,["gjx16@GJXAIOU",[[-1,2675,"se"]],[2677,2677],[2675,2675]]],[1542193420546,["gjx16@GJXAIOU",[[1,2675,"id"]],[2675,2675],[2677,2677]]],[1542193422114,["gjx16@GJXAIOU",[[-1,2675,"id"]],[2677,2677],[2675,2675]]],[1542193422305,["gjx16@GJXAIOU",[[1,2675,"f"]],[2675,2675],[2676,2676]]],[1542193422998,["gjx16@GJXAIOU",[[-1,2675,"f"]],[2676,2676],[2675,2675]]],[1542193429993,["gjx16@GJXAIOU",[[1,2675,"if ...else"]],[2675,2675],[2685,2685]]],[1542198793109,["gjx16@GJXAIOU",[[-1,2687,"\n"]],[2687,2687],[2686,2686]]],[1542198796325,["gjx16@GJXAIOU",[[1,2686,"```"]],[2686,2686],[2689,2689]]],[1542198796355,["gjx16@GJXAIOU",[[1,2689,"language\n```\n"]],[2689,2689],[2689,2697]]],[1542198797367,["gjx16@GJXAIOU",[[-1,2689,"language"],[1,2697,"p"]],[2689,2697],[2690,2690]]],[1542198798169,["gjx16@GJXAIOU",[[1,2690,"ython"]],[2690,2690],[2695,2695]]],[1542198799005,["gjx16@GJXAIOU",[[1,2696,"\n"]],[2695,2695],[2696,2696]]],[1542199079890,["gjx16@GJXAIOU",[[1,2696,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/14 19:23 #Author:GJXAIOU   import math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit   if number.isdigit():# isdigit()是检测字符串是否由数字组成    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")"]],[2696,2696],[3386,3386]]],[1542199082269,["gjx16@GJXAIOU",[[-1,2696,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/14 19:23 #Author:GJXAIOU   import math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit   if number.isdigit():# isdigit()是检测字符串是否由数字组成    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")"]],[3386,3386],[2696,2696]]],[1542199085915,["gjx16@GJXAIOU",[[1,2696,"#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n"]],[2696,2696],[3387,3387]]],[1542199116064,["gjx16@GJXAIOU",[[1,3393,"\n"]],[3391,3391],[3392,3392]]],[1542199121483,["gjx16@GJXAIOU",[[1,3394,"\n"]],[3392,3392],[3393,3393]]],[1542199472733,["gjx16@GJXAIOU",[[1,3395,"\n"]],[3392,3392],[3393,3393]]],[1542199472852,["gjx16@GJXAIOU",[[1,3396,"\n"]],[3393,3393],[3394,3394]]],[1542199481451,["gjx16@GJXAIOU",[[1,3394,"### 2.3.3 san"]],[3394,3394],[3407,3407]]],[1542199482268,["gjx16@GJXAIOU",[[-1,3404,"san"]],[3407,3407],[3404,3404]]],[1542199492848,["gjx16@GJXAIOU",[[1,3404,"三元操作符"]],[3404,3404],[3409,3409]]],[1542199494892,["gjx16@GJXAIOU",[[1,3412,"\n"]],[3409,3409],[3410,3410]]],[1542199495876,["gjx16@GJXAIOU",[[1,3413,"\n"]],[3410,3410],[3411,3411]]],[1542199616750,["gjx16@GJXAIOU",[[1,3411,"name = \""]],[3411,3411],[3419,3419]]],[1542199616783,["gjx16@GJXAIOU",[[-1,3418,"\""],[1,3419,"“"]],[3419,3419],[3419,3419]]],[1542199616878,["gjx16@GJXAIOU",[[1,3419,"\""]],[3419,3419],[3420,3420]]],[1542199616911,["gjx16@GJXAIOU",[[-1,3419,"\""],[1,3420,"”"]],[3420,3420],[3420,3420]]],[1542199621214,["gjx16@GJXAIOU",[[1,3419,"qiw"]],[3419,3419],[3422,3422]]],[1542199622452,["gjx16@GJXAIOU",[[1,3422,"sir"]],[3422,3422],[3425,3425]]],[1542199770704,["gjx16@GJXAIOU",[[1,3426," if 29 > 21 else :"]],[3426,3426],[3444,3444]]],[1542199771596,["gjx16@GJXAIOU",[[-1,3443,":"]],[3444,3444],[3443,3443]]],[1542199772434,["gjx16@GJXAIOU",[[1,3443,"\""]],[3443,3443],[3444,3444]]],[1542199772465,["gjx16@GJXAIOU",[[-1,3443,"\""],[1,3444,"“"]],[3444,3444],[3444,3444]]],[1542199772564,["gjx16@GJXAIOU",[[1,3444,"\""]],[3444,3444],[3445,3445]]],[1542199772598,["gjx16@GJXAIOU",[[-1,3444,"\""],[1,3445,"”"]],[3445,3445],[3445,3445]]],[1542199776058,["gjx16@GJXAIOU",[[1,3444,"github"]],[3444,3444],[3450,3450]]],[1542199783596,["gjx16@GJXAIOU",[[1,3411,"\n"]],[3410,3410],[3411,3411]]],[1542199785682,["gjx16@GJXAIOU",[[1,3411,"··"]],[3411,3411],[3413,3413]]],[1542199786806,["gjx16@GJXAIOU",[[-1,3411,"··"]],[3413,3413],[3411,3411]]],[1542199787156,["gjx16@GJXAIOU",[[-1,3411,"\n"]],[3411,3411],[3410,3410]]],[1542199789080,["gjx16@GJXAIOU",[[1,3410,"```"]],[3410,3410],[3413,3413]]],[1542199789112,["gjx16@GJXAIOU",[[1,3413,"language\n```\n"]],[3413,3413],[3413,3421]]],[1542199790646,["gjx16@GJXAIOU",[[-1,3413,"language"],[1,3421,"p"]],[3413,3421],[3414,3414]]],[1542199791382,["gjx16@GJXAIOU",[[1,3414,"ython"]],[3414,3414],[3419,3419]]],[1542199792452,["gjx16@GJXAIOU",[[1,3420,"\n"]],[3419,3419],[3420,3420]]],[1542199796316,["gjx16@GJXAIOU",[[-1,3421,"```"]],[3421,3424],[3421,3421]]],[1542199798511,["gjx16@GJXAIOU",[[1,3464,"```"]],[3464,3464],[3467,3467]]],[1542199800764,["gjx16@GJXAIOU",[[-1,3422,"\n"]],[3422,3422],[3421,3421]]],[1542199800988,["gjx16@GJXAIOU",[[-1,3421,"\n"]],[3421,3421],[3420,3420]]],[1542199801382,["gjx16@GJXAIOU",[[-1,3420,"\n"]],[3420,3420],[3419,3419]]],[1542199807548,["gjx16@GJXAIOU",[[-1,3459,"”"]],[3460,3460],[3459,3459]]],[1542199808814,["gjx16@GJXAIOU",[[1,3459,"\""]],[3459,3459],[3460,3460]]],[1542199812108,["gjx16@GJXAIOU",[[-1,3452,"“"]],[3453,3453],[3452,3452]]],[1542199812745,["gjx16@GJXAIOU",[[1,3452,"\""]],[3452,3452],[3453,3453]]],[1542199821002,["gjx16@GJXAIOU",[[-1,3433,"r”"]],[3435,3435],[3433,3433]]],[1542199824558,["gjx16@GJXAIOU",[[1,3433,"e\"\""]],[3433,3433],[3436,3436]]],[1542199825717,["gjx16@GJXAIOU",[[-1,3435,"\""]],[3436,3436],[3435,3435]]],[1542199831389,["gjx16@GJXAIOU",[[-1,3427,"“"]],[3428,3428],[3427,3427]]],[1542199833136,["gjx16@GJXAIOU",[[1,3427,"\""]],[3427,3427],[3428,3428]]],[1542199837091,["gjx16@GJXAIOU",[[1,3461,"\n"]],[3461,3461],[3462,3462]]],[1542199838588,["gjx16@GJXAIOU",[[-1,3461,"\n"]],[3462,3462],[3461,3461]]],[1542199969916,["gjx16@GJXAIOU",[[1,3466,"\n"]],[3464,3464],[3465,3465]]],[1542199970068,["gjx16@GJXAIOU",[[1,3467,"\n"]],[3465,3465],[3466,3466]]],[1542199976168,["gjx16@GJXAIOU",[[1,3466,"han"]],[3466,3466],[3469,3469]]],[1542199976934,["gjx16@GJXAIOU",[[-1,3466,"han"]],[3469,3469],[3466,3466]]],[1542199980245,["gjx16@GJXAIOU",[[1,3466,"****"]],[3466,3466],[3468,3468]]],[1542199983323,["gjx16@GJXAIOU",[[1,3468,"函数定义："]],[3468,3468],[3473,3473]]],[1542200015269,["gjx16@GJXAIOU",[[1,3475,"  A = Y if X or "]],[3475,3475],[3491,3491]]],[1542200018675,["gjx16@GJXAIOU",[[-1,3488,"or "]],[3491,3491],[3488,3488]]],[1542200021910,["gjx16@GJXAIOU",[[1,3488,"slse"]],[3488,3488],[3492,3492]]],[1542200023214,["gjx16@GJXAIOU",[[-1,3488,"slse"]],[3492,3492],[3488,3488]]],[1542200027841,["gjx16@GJXAIOU",[[1,3488,"else Z "]],[3488,3488],[3495,3495]]],[1542200047758,["gjx16@GJXAIOU",[[1,3497,"\n"]],[3495,3495],[3496,3496]]],[1542200051504,["gjx16@GJXAIOU",[[1,3496,"- ruguo"]],[3496,3496],[3503,3503]]],[1542200052923,["gjx16@GJXAIOU",[[-1,3498,"ruguo"]],[3503,3503],[3498,3498]]],[1542200082159,["gjx16@GJXAIOU",[[1,3498,"如果X为真，那么就执行 A= Y"]],[3498,3498],[3514,3514]]],[1542200082924,["gjx16@GJXAIOU",[[1,3515,"- \n"]],[3514,3514],[3517,3517]]],[1542200100828,["gjx16@GJXAIOU",[[1,3517,"如果X为假，就执行 A"]],[3517,3517],[3528,3528]]],[1542200103531,["gjx16@GJXAIOU",[[1,3528,"= Z"]],[3528,3528],[3531,3531]]],[1542200113855,["gjx16@GJXAIOU",[[1,3532,"- \n"]],[3531,3531],[3534,3534]]],[1542200114235,["gjx16@GJXAIOU",[[-1,3532,"- "]],[3534,3534],[3533,3533]]],[1542200115219,["gjx16@GJXAIOU",[[1,3534,"\n"]],[3533,3533],[3534,3534]]],[1542200141555,["gjx16@GJXAIOU",[[1,3535,"\n"]],[3534,3534],[3535,3535]]],[1542200141907,["gjx16@GJXAIOU",[[1,3536,"\n"]],[3535,3535],[3536,3536]]],[1542200156685,["gjx16@GJXAIOU",[[1,3536,"## 2.4 for循环语句"]],[3536,3536],[3550,3550]]],[1542200157355,["gjx16@GJXAIOU",[[1,3551,"\n"]],[3550,3550],[3551,3551]]],[1542200173349,["gjx16@GJXAIOU",[[1,3551,"```"]],[3551,3551],[3554,3554]]],[1542200173394,["gjx16@GJXAIOU",[[1,3554,"language\n```\n"]],[3554,3554],[3554,3562]]],[1542200174813,["gjx16@GJXAIOU",[[-1,3554,"language"],[1,3562,"p"]],[3554,3562],[3555,3555]]],[1542200175573,["gjx16@GJXAIOU",[[1,3555,"ython"]],[3555,3555],[3560,3560]]],[1542200176187,["gjx16@GJXAIOU",[[1,3561,"\n"]],[3560,3560],[3561,3561]]],[1542200184506,["gjx16@GJXAIOU",[[1,3561,"for 循环规则"]],[3561,3561],[3569,3569]]],[1542200507183,["gjx16@GJXAIOU",[[1,3570,"\n"]],[3569,3569],[3570,3570]]],[1542200521267,["gjx16@GJXAIOU",[[1,3570,"    操作语句"]],[3570,3570],[3578,3578]]],[1542200525048,["gjx16@GJXAIOU",[[1,3569,"："]],[3569,3569],[3570,3570]]],[1542200639134,["gjx16@GJXAIOU",[[1,3585,"\n"]],[3583,3583],[3584,3584]]],[1542200639275,["gjx16@GJXAIOU",[[1,3586,"\n"]],[3584,3584],[3585,3585]]],[1542200640873,["gjx16@GJXAIOU",[[1,3585,"示例"]],[3585,3585],[3587,3587]]],[1542200642279,["gjx16@GJXAIOU",[[1,3587,"城市需"]],[3587,3587],[3590,3590]]],[1542200643165,["gjx16@GJXAIOU",[[-1,3587,"城市需"]],[3590,3590],[3587,3587]]],[1542200644864,["gjx16@GJXAIOU",[[1,3587,"程序；"]],[3587,3587],[3590,3590]]],[1542200645283,["gjx16@GJXAIOU",[[1,3592,"\n"]],[3590,3590],[3591,3591]]],[1542200646942,["gjx16@GJXAIOU",[[1,3591,"```"]],[3591,3591],[3594,3594]]],[1542200646974,["gjx16@GJXAIOU",[[1,3594,"language\n```\n"]],[3594,3594],[3594,3602]]],[1542200647761,["gjx16@GJXAIOU",[[-1,3594,"language"],[1,3602,"p"]],[3594,3602],[3595,3595]]],[1542200648494,["gjx16@GJXAIOU",[[1,3595,"ython"]],[3595,3595],[3600,3600]]],[1542200648962,["gjx16@GJXAIOU",[[1,3601,"\n"]],[3600,3600],[3601,3601]]],[1542200884047,["gjx16@GJXAIOU",[[1,3601,"hello = \"world\" for i in range(len(hello)):\n    print(hello[i])"]],[3601,3601],[3664,3664]]],[1542200886836,["gjx16@GJXAIOU",[[-1,3601,"hello = \"world\" for i in range(len(hello)):\n    print(hello[i])"]],[3664,3664],[3601,3601]]],[1542200889301,["gjx16@GJXAIOU",[[1,3601,"hello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])"]],[3601,3601],[3664,3664]]],[1542200891107,["gjx16@GJXAIOU",[[1,3671,"\n"]],[3668,3668],[3669,3669]]],[1542200892329,["gjx16@GJXAIOU",[[1,3669,"cheng"]],[3669,3669],[3674,3674]]],[1542200893533,["gjx16@GJXAIOU",[[-1,3669,"cheng"]],[3674,3674],[3669,3669]]],[1542200900498,["gjx16@GJXAIOU",[[1,3669,"程序运行结果："]],[3669,3669],[3676,3676]]],[1542200901419,["gjx16@GJXAIOU",[[1,3679,"\n"]],[3676,3676],[3677,3677]]],[1542200910495,["gjx16@GJXAIOU",[[1,3677,"w\no\nr\nl\nd"]],[3677,3677],[3686,3686]]],[1542200913882,["gjx16@GJXAIOU",[[1,3677,"·"]],[3677,3677],[3678,3678]]],[1542200915064,["gjx16@GJXAIOU",[[-1,3677,"·"]],[3678,3678],[3677,3677]]],[1542200915589,["gjx16@GJXAIOU",[[1,3677,"`"]],[3677,3677],[3678,3678]]],[1542200916467,["gjx16@GJXAIOU",[[1,3680,"`"]],[3680,3680],[3681,3681]]],[1542200917151,["gjx16@GJXAIOU",[[1,3683,"`"]],[3683,3683],[3684,3684]]],[1542200917653,["gjx16@GJXAIOU",[[1,3686,"`"]],[3686,3686],[3687,3687]]],[1542200918311,["gjx16@GJXAIOU",[[1,3689,"`"]],[3689,3689],[3690,3690]]],[1542200920170,["gjx16@GJXAIOU",[[1,3691,"`"]],[3691,3691],[3692,3692]]],[1542200920564,["gjx16@GJXAIOU",[[1,3688,"`"]],[3688,3688],[3689,3689]]],[1542200920985,["gjx16@GJXAIOU",[[1,3685,"`"]],[3685,3685],[3686,3686]]],[1542200921464,["gjx16@GJXAIOU",[[1,3682,"`"]],[3682,3682],[3683,3683]]],[1542200921880,["gjx16@GJXAIOU",[[1,3679,"`"]],[3679,3679],[3680,3680]]],[1542200924780,["gjx16@GJXAIOU",[[1,3699,"\n"]],[3697,3697],[3698,3698]]],[1542201070451,["gjx16@GJXAIOU",[[1,3700,"\n"]],[3697,3697],[3698,3698]]],[1542201112875,["gjx16@GJXAIOU",[[1,3591,"\n"]],[3590,3590],[3591,3591]]],[1542201113011,["gjx16@GJXAIOU",[[1,3592,"\n"]],[3591,3591],[3592,3592]]],[1542201120692,["gjx16@GJXAIOU",[[1,3591,"```pythohn"]],[3591,3591],[3601,3601]]],[1542201121891,["gjx16@GJXAIOU",[[-1,3599,"hn"]],[3601,3601],[3599,3599]]],[1542201122644,["gjx16@GJXAIOU",[[1,3599,"n"]],[3599,3599],[3600,3600]]],[1542201122949,["gjx16@GJXAIOU",[[1,3602,"\n"]],[3600,3600],[3601,3601]]],[1542201123090,["gjx16@GJXAIOU",[[1,3603,"\n"]],[3601,3601],[3602,3602]]],[1542201123250,["gjx16@GJXAIOU",[[1,3604,"\n"]],[3602,3602],[3603,3603]]],[1542201124360,["gjx16@GJXAIOU",[[1,3603,"```"]],[3603,3603],[3606,3606]]],[1542201154993,["gjx16@GJXAIOU",[[1,3601,"hello = \"world\"\nfor i in hello:\n    print(i)"]],[3601,3601],[3645,3645]]],[1542201158479,["gjx16@GJXAIOU",[[1,3652,"\n"]],[3650,3650],[3651,3651]]],[1542201164222,["gjx16@GJXAIOU",[[1,3652,"zi"]],[3652,3652],[3654,3654]]],[1542201164889,["gjx16@GJXAIOU",[[-1,3652,"zi"]],[3654,3654],[3652,3652]]],[1542201170909,["gjx16@GJXAIOU",[[1,3652,"下面的承运"]],[3652,3652],[3657,3657]]],[1542201171988,["gjx16@GJXAIOU",[[-1,3655,"承运"]],[3657,3657],[3655,3655]]],[1542201181160,["gjx16@GJXAIOU",[[1,3655,"程序等效于上面的程序"]],[3655,3655],[3665,3665]]],[1542201183154,["gjx16@GJXAIOU",[[1,3665,"："]],[3665,3665],[3666,3666]]],[1542201184949,["gjx16@GJXAIOU",[[-1,3651,"\n"]],[3651,3651],[3650,3650]]],[1542201259182,["gjx16@GJXAIOU",[[1,3776,"\n"]],[3772,3772],[3773,3773]]],[1542201262795,["gjx16@GJXAIOU",[[1,3773,"print（0"]],[3773,3773],[3780,3780]]],[1542201263635,["gjx16@GJXAIOU",[[-1,3778,"（0"]],[3780,3780],[3778,3778]]],[1542201273136,["gjx16@GJXAIOU",[[1,3778,"()默认的``"]],[3778,3778],[3785,3785]]],[1542201281217,["gjx16@GJXAIOU",[[1,3784,"end = \\n"]],[3784,3784],[3792,3792]]],[1542201296666,["gjx16@GJXAIOU",[[1,3793,",所以在默认的情况下，灭个元素"]],[3793,3793],[3808,3808]]],[1542201297690,["gjx16@GJXAIOU",[[-1,3804,"灭个元素"]],[3808,3808],[3804,3804]]],[1542201300955,["gjx16@GJXAIOU",[[1,3804,"每个元素"]],[3804,3804],[3808,3808]]],[1542201303707,["gjx16@GJXAIOU",[[1,3808,"都单独做"]],[3808,3808],[3812,3812]]],[1542201304170,["gjx16@GJXAIOU",[[-1,3811,"做"]],[3812,3812],[3811,3811]]],[1542201306489,["gjx16@GJXAIOU",[[1,3811,"占一行"]],[3811,3811],[3814,3814]]],[1542201307356,["gjx16@GJXAIOU",[[1,3818,"\n"]],[3814,3814],[3815,3815]]],[1542201315235,["gjx16@GJXAIOU",[[1,3551,"\n"]],[3550,3550],[3551,3551]]],[1542201325166,["gjx16@GJXAIOU",[[1,3551,"只有序列类型可以使用否"]],[3551,3551],[3562,3562]]],[1542201328075,["gjx16@GJXAIOU",[[-1,3561,"否"]],[3562,3562],[3561,3561]]],[1542201329452,["gjx16@GJXAIOU",[[1,3561,"fou"]],[3561,3561],[3564,3564]]],[1542201329936,["gjx16@GJXAIOU",[[-1,3563,"u"]],[3564,3564],[3563,3563]]],[1542201331576,["gjx16@GJXAIOU",[[1,3563,"r v"]],[3563,3563],[3566,3566]]],[1542201331955,["gjx16@GJXAIOU",[[-1,3565,"v"]],[3566,3566],[3565,3565]]],[1542201333137,["gjx16@GJXAIOU",[[1,3565,"xuanhu"]],[3565,3565],[3571,3571]]],[1542201334515,["gjx16@GJXAIOU",[[-1,3565,"xuanhu"]],[3571,3571],[3565,3565]]],[1542201339482,["gjx16@GJXAIOU",[[1,3565,"循环（）"]],[3565,3565],[3569,3569]]],[1542201349425,["gjx16@GJXAIOU",[[1,3568,"包括：列表和字符串"]],[3568,3568],[3577,3577]]],[1542201364200,["gjx16@GJXAIOU",[[1,3801,"- "]],[3801,3801],[3803,3803]]],[1542201393615,["gjx16@GJXAIOU",[[1,3845,"- 字典也可以使用for循环，但是得到的结果是获取字典值"]],[3845,3845],[3873,3873]]],[1542201394281,["gjx16@GJXAIOU",[[-1,3872,"值"]],[3873,3873],[3872,3872]]],[1542201400536,["gjx16@GJXAIOU",[[1,3872,"中所有的键值"]],[3872,3872],[3878,3878]]],[1542201407356,["gjx16@GJXAIOU",[[1,3879,"- \n"]],[3878,3878],[3881,3881]]],[1542201409199,["gjx16@GJXAIOU",[[-1,3879,"- "]],[3881,3881],[3879,3879]]],[1542201411517,["gjx16@GJXAIOU",[[1,3879,"```"]],[3879,3879],[3882,3882]]],[1542201411555,["gjx16@GJXAIOU",[[1,3882,"language\n```\n"]],[3882,3882],[3882,3890]]],[1542201412207,["gjx16@GJXAIOU",[[-1,3882,"language"],[1,3890,"p"]],[3882,3890],[3883,3883]]],[1542201412954,["gjx16@GJXAIOU",[[1,3883,"ython"]],[3883,3883],[3888,3888]]],[1542201413556,["gjx16@GJXAIOU",[[1,3889,"\n"]],[3888,3888],[3889,3889]]],[1542201542175,["gjx16@GJXAIOU",[[1,3889,"s = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s:\n    print(k)"]],[3889,3889],[3978,3978]]],[1542201543932,["gjx16@GJXAIOU",[[1,3987,"\n"]],[3982,3982],[3983,3983]]],[1542201545012,["gjx16@GJXAIOU",[[1,3983,"cheng"]],[3983,3983],[3988,3988]]],[1542201545917,["gjx16@GJXAIOU",[[-1,3983,"cheng"]],[3988,3988],[3983,3983]]],[1542201546213,["gjx16@GJXAIOU",[[-1,3987,"\n"]],[3983,3983],[3982,3982]]],[1542201547213,["gjx16@GJXAIOU",[[1,3987,"\n"]],[3982,3982],[3983,3983]]],[1542201550591,["gjx16@GJXAIOU",[[1,3983,"程勋"]],[3983,3983],[3985,3985]]],[1542201552152,["gjx16@GJXAIOU",[[-1,3983,"程勋"]],[3985,3985],[3983,3983]]],[1542201555519,["gjx16@GJXAIOU",[[1,3983,"程勋"]],[3983,3983],[3985,3985]]],[1542201556373,["gjx16@GJXAIOU",[[-1,3983,"程勋"]],[3985,3985],[3983,3983]]],[1542201561498,["gjx16@GJXAIOU",[[1,3983,"程序运行结果："]],[3983,3983],[3990,3990]]],[1542201562221,["gjx16@GJXAIOU",[[1,3995,"\n"]],[3990,3990],[3991,3991]]],[1542201569291,["gjx16@GJXAIOU",[[1,3991,"web\nlang\nauthor"]],[3991,3991],[4006,4006]]],[1542201572517,["gjx16@GJXAIOU",[[1,3991,"`"]],[3991,3991],[3992,3992]]],[1542201574000,["gjx16@GJXAIOU",[[1,3997,"`"]],[3997,3997],[3998,3998]]],[1542201575015,["gjx16@GJXAIOU",[[-1,3997,"`"]],[3998,3998],[3997,3997]]],[1542201575969,["gjx16@GJXAIOU",[[1,3996,"`"]],[3996,3996],[3997,3997]]],[1542201576846,["gjx16@GJXAIOU",[[1,4002,"`"]],[4002,4002],[4003,4003]]],[1542201578795,["gjx16@GJXAIOU",[[1,4009,"`"]],[4009,4009],[4010,4010]]],[1542201579302,["gjx16@GJXAIOU",[[1,4001,"`"]],[4001,4001],[4002,4002]]],[1542201580003,["gjx16@GJXAIOU",[[1,3995,"`"]],[3995,3995],[3996,3996]]],[1542201963262,["gjx16@GJXAIOU",[[1,3964,".keys()"],[1,3965,"  #同样是获得字典中所有的键值"],[1,3977,")\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v"]],[3889,3978],[4110,4110]]],[1542201966789,["gjx16@GJXAIOU",[[-1,4123,"`web`\n`lang`\n`author`\n"]],[4123,4145],[4123,4123]]],[1542201981461,["gjx16@GJXAIOU",[[1,4123,"web\nlang\nauthor\nhello\nworld\nlaogao\nweb-->hello\nlang-->world\nauthor-->laogao"]],[4123,4123],[4198,4198]]],[1542201984005,["gjx16@GJXAIOU",[[1,4123,"`"]],[4123,4123],[4124,4124]]],[1542201986088,["gjx16@GJXAIOU",[[1,4128,"`"]],[4128,4128],[4129,4129]]],[1542201986973,["gjx16@GJXAIOU",[[1,4134,"`"]],[4134,4134],[4135,4135]]],[1542201987613,["gjx16@GJXAIOU",[[1,4142,"`"]],[4142,4142],[4143,4143]]],[1542201988219,["gjx16@GJXAIOU",[[1,4149,"`"]],[4149,4149],[4150,4150]]],[1542201988808,["gjx16@GJXAIOU",[[1,4157,"`"]],[4157,4157],[4158,4158]]],[1542201989763,["gjx16@GJXAIOU",[[-1,4157,"`"]],[4158,4158],[4157,4157]]],[1542201990588,["gjx16@GJXAIOU",[[1,4156,"`"]],[4156,4156],[4157,4157]]],[1542201991450,["gjx16@GJXAIOU",[[1,4164,"`"]],[4164,4164],[4165,4165]]],[1542201992614,["gjx16@GJXAIOU",[[1,4177,"`"]],[4177,4177],[4178,4178]]],[1542201993400,["gjx16@GJXAIOU",[[1,4191,"`"]],[4191,4191],[4192,4192]]],[1542201996694,["gjx16@GJXAIOU",[[1,4207,"`"]],[4207,4207],[4208,4208]]],[1542201997126,["gjx16@GJXAIOU",[[1,4190,"`"]],[4190,4190],[4191,4191]]],[1542201997694,["gjx16@GJXAIOU",[[1,4176,"`"]],[4176,4176],[4177,4177]]],[1542201998202,["gjx16@GJXAIOU",[[1,4163,"`"]],[4163,4163],[4164,4164]]],[1542201998628,["gjx16@GJXAIOU",[[1,4155,"`"]],[4155,4155],[4156,4156]]],[1542201999128,["gjx16@GJXAIOU",[[1,4148,"`"]],[4148,4148],[4149,4149]]],[1542202000109,["gjx16@GJXAIOU",[[1,4141,"`"]],[4141,4141],[4142,4142]]],[1542202000512,["gjx16@GJXAIOU",[[1,4133,"`"]],[4133,4133],[4134,4134]]],[1542202000892,["gjx16@GJXAIOU",[[1,4127,"`"]],[4127,4127],[4128,4128]]],[1542202004557,["gjx16@GJXAIOU",[[1,4220,"\n"]],[4216,4216],[4217,4217]]],[1542202004690,["gjx16@GJXAIOU",[[1,4221,"\n"]],[4217,4217],[4218,4218]]],[1542202047463,["gjx16@GJXAIOU",[[1,4218,"- ****"]],[4218,4218],[4222,4222]]],[1542202048942,["gjx16@GJXAIOU",[[1,4222,"否认"]],[4222,4222],[4224,4224]]],[1542202049722,["gjx16@GJXAIOU",[[-1,4222,"否认"]],[4224,4224],[4222,4222]]],[1542202060288,["gjx16@GJXAIOU",[[1,4222,"for循环所引用"]],[4222,4222],[4230,4230]]],[1542202061026,["gjx16@GJXAIOU",[[-1,4228,"引用"]],[4230,4230],[4228,4228]]],[1542202073784,["gjx16@GJXAIOU",[[1,4228,"应用的对象必须是可迭代的"]],[4228,4228],[4240,4240]]],[1542202093402,["gjx16@GJXAIOU",[[1,4243,"- \n"]],[4242,4242],[4245,4245]]],[1542202100666,["gjx16@GJXAIOU",[[-1,4243,"- "]],[4245,4245],[4243,4243]]],[1542202111830,["gjx16@GJXAIOU",[[1,4243,"判断一个对象管是否"]],[4243,4243],[4252,4252]]],[1542202112913,["gjx16@GJXAIOU",[[-1,4249,"管是否"]],[4252,4252],[4249,4249]]],[1542202117893,["gjx16@GJXAIOU",[[1,4249,"是否可以迭代"]],[4249,4249],[4255,4255]]],[1542202118737,["gjx16@GJXAIOU",[[1,4259,"\n"]],[4255,4255],[4256,4256]]],[1542202132111,["gjx16@GJXAIOU",[[1,4256,"··"]],[4256,4256],[4258,4258]]],[1542202132915,["gjx16@GJXAIOU",[[-1,4256,"··"]],[4258,4258],[4256,4256]]],[1542202134361,["gjx16@GJXAIOU",[[1,4256,"```"]],[4256,4256],[4259,4259]]],[1542202134400,["gjx16@GJXAIOU",[[1,4259,"language\n```\n"]],[4259,4259],[4259,4267]]],[1542202135076,["gjx16@GJXAIOU",[[-1,4259,"language"],[1,4267,"p"]],[4259,4267],[4260,4260]]],[1542202135908,["gjx16@GJXAIOU",[[1,4260,"ython"]],[4260,4260],[4265,4265]]],[1542202136394,["gjx16@GJXAIOU",[[1,4266,"\n"]],[4265,4265],[4266,4266]]],[1542202157517,["gjx16@GJXAIOU",[[1,4266,"impot"]],[4266,4266],[4271,4271]]],[1542202158314,["gjx16@GJXAIOU",[[-1,4270,"t"]],[4271,4271],[4270,4270]]],[1542202168014,["gjx16@GJXAIOU",[[1,4270,"rt collections"]],[4270,4270],[4284,4284]]],[1542202168605,["gjx16@GJXAIOU",[[1,4285,"\n"]],[4284,4284],[4285,4285]]],[1542202827691,["gjx16@GJXAIOU",[[-1,4266,"import"],[1,4272,"from"],[1,4284," import Iterable"],[1,4285,"\nprint(isinstance(123,Iterable))"]],[4266,4285],[4331,4331]]],[1542202831509,["gjx16@GJXAIOU",[[1,4340,"\n"]],[4335,4335],[4336,4336]]],[1542202833556,["gjx16@GJXAIOU",[[1,4336,"cheng"]],[4336,4336],[4341,4341]]],[1542202835218,["gjx16@GJXAIOU",[[-1,4336,"cheng"]],[4341,4341],[4336,4336]]],[1542202840048,["gjx16@GJXAIOU",[[1,4336,"程序运行结果："]],[4336,4336],[4343,4343]]],[1542202842425,["gjx16@GJXAIOU",[[1,4348,"\n"]],[4343,4343],[4344,4344]]],[1542202843947,["gjx16@GJXAIOU",[[1,4344,"from collections import Iterable\n\nprint(isinstance(123,Iterable))"]],[4344,4344],[4409,4409]]],[1542202848564,["gjx16@GJXAIOU",[[-1,4378,"print(isinstance(123,Iterable))"]],[4409,4409],[4378,4378]]],[1542202848624,["gjx16@GJXAIOU",[[-1,4382,"\n"]],[4378,4378],[4377,4377]]],[1542202848686,["gjx16@GJXAIOU",[[-1,4381,"\n"]],[4377,4377],[4376,4376]]],[1542202854685,["gjx16@GJXAIOU",[[-1,4344,"from collections import Iterable"]],[4376,4376],[4344,4344]]],[1542202863952,["gjx16@GJXAIOU",[[1,4344,"``"]],[4344,4344],[4346,4346]]],[1542202867064,["gjx16@GJXAIOU",[[1,4345,"False"]],[4345,4345],[4350,4350]]],[1542202871293,["gjx16@GJXAIOU",[[1,4336,"()"]],[4336,4336],[4338,4338]]],[1542202878780,["gjx16@GJXAIOU",[[1,4337,"需要在中断中"]],[4337,4337],[4343,4343]]],[1542202879738,["gjx16@GJXAIOU",[[-1,4340,"中断中"]],[4343,4343],[4340,4340]]],[1542202883716,["gjx16@GJXAIOU",[[1,4340,"终端中运行"]],[4340,4340],[4345,4345]]],[1542202886202,["gjx16@GJXAIOU",[[1,4366,"\n"]],[4361,4361],[4362,4362]]],[1542202886344,["gjx16@GJXAIOU",[[1,4367,"\n"]],[4362,4362],[4363,4363]]],[1542202893433,["gjx16@GJXAIOU",[[1,4363,"===="]],[4363,4363],[4365,4365]]],[1542202920202,["gjx16@GJXAIOU",[[1,4365,"字符串、列表、字典、元组、集合都是可迭代"]],[4365,4365],[4385,4385]]],[1542202921703,["gjx16@GJXAIOU",[[1,4385,"对象"]],[4385,4385],[4387,4387]]],[1542202928971,["gjx16@GJXAIOU",[[1,4394,"\n"]],[4389,4389],[4390,4390]]],[1542202929089,["gjx16@GJXAIOU",[[1,4395,"\n"]],[4390,4390],[4391,4391]]],[1542202929254,["gjx16@GJXAIOU",[[1,4396,"\n"]],[4391,4391],[4392,4392]]],[1542202929350,["gjx16@GJXAIOU",[[1,4397,"\n"]],[4392,4392],[4393,4393]]],[1542202929481,["gjx16@GJXAIOU",[[1,4398,"\n"]],[4393,4393],[4394,4394]]],[1542202932975,["gjx16@GJXAIOU",[[1,4394,"### 2.3"]],[4394,4394],[4401,4401]]],[1542202933414,["gjx16@GJXAIOU",[[-1,4400,"3"]],[4401,4401],[4400,4400]]],[1542202935413,["gjx16@GJXAIOU",[[1,4400,"4.2"]],[4400,4400],[4403,4403]]],[1542202936326,["gjx16@GJXAIOU",[[-1,4402,"2"]],[4403,4403],[4402,4402]]],[1542202943698,["gjx16@GJXAIOU",[[1,4402,"3  range()"]],[4402,4402],[4412,4412]]],[1542202946429,["gjx16@GJXAIOU",[[1,4411,"atart"]],[4411,4411],[4416,4416]]],[1542202947789,["gjx16@GJXAIOU",[[-1,4411,"atart"]],[4416,4416],[4411,4411]]],[1542202974287,["gjx16@GJXAIOU",[[1,4411,"start,stop,[,step]"]],[4411,4411],[4429,4429]]],[1542202976485,["gjx16@GJXAIOU",[[1,4435,"\n"]],[4430,4430],[4431,4431]]],[1542202978639,["gjx16@GJXAIOU",[[1,4431,"```"]],[4431,4431],[4434,4434]]],[1542202978678,["gjx16@GJXAIOU",[[1,4434,"language\n```\n"]],[4434,4434],[4434,4442]]],[1542202979624,["gjx16@GJXAIOU",[[-1,4434,"language"],[1,4442,"p"]],[4434,4442],[4435,4435]]],[1542202980319,["gjx16@GJXAIOU",[[1,4435,"ython"]],[4435,4435],[4440,4440]]],[1542202980852,["gjx16@GJXAIOU",[[1,4441,"\n"]],[4440,4440],[4441,4441]]],[1542203021578,["gjx16@GJXAIOU",[[1,4431,"\n"]],[4430,4430],[4431,4431]]],[1542203025119,["gjx16@GJXAIOU",[[1,4431,"- canshu"]],[4431,4431],[4439,4439]]],[1542203026453,["gjx16@GJXAIOU",[[-1,4433,"canshu"]],[4439,4439],[4433,4433]]],[1542203039251,["gjx16@GJXAIOU",[[1,4433,"参数含义：开始，结尾，步长"]],[4433,4433],[4446,4446]]],[1542203039811,["gjx16@GJXAIOU",[[1,4447,"- \n"]],[4446,4446],[4449,4449]]],[1542203041297,["gjx16@GJXAIOU",[[1,4449,"当"]],[4449,4449],[4450,4450]]],[1542203056204,["gjx16@GJXAIOU",[[1,4450,"步长为1 的时候可以神裂"]],[4450,4450],[4462,4462]]],[1542203057557,["gjx16@GJXAIOU",[[-1,4460,"神裂"]],[4462,4462],[4460,4460]]],[1542203061619,["gjx16@GJXAIOU",[[1,4460,"省略"]],[4460,4460],[4462,4462]]],[1542203062149,["gjx16@GJXAIOU",[[1,4463,"- \n"]],[4462,4462],[4465,4465]]],[1542203064603,["gjx16@GJXAIOU",[[1,4465,"当"]],[4465,4465],[4466,4466]]],[1542203070278,["gjx16@GJXAIOU",[[-1,4465,"当"]],[4466,4466],[4465,4465]]],[1542203082894,["gjx16@GJXAIOU",[[1,4465,"当start为0的时候，可以省略"]],[4465,4465],[4481,4481]]],[1542203083282,["gjx16@GJXAIOU",[[1,4482,"- \n"]],[4481,4481],[4484,4484]]],[1542203089708,["gjx16@GJXAIOU",[[1,4484,"当步长不为1 "]],[4484,4484],[4491,4491]]],[1542203090806,["gjx16@GJXAIOU",[[-1,4490," "]],[4491,4491],[4490,4490]]],[1542203100419,["gjx16@GJXAIOU",[[1,4490,"的时候，开始不可以省略"]],[4490,4490],[4501,4501]]]],null,"gjx16@GJXAIOU"],["be572858-23d3-4224-8c61-49e79e06a309",1542290524179,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\n```\n\n\n\n\n\n  \n\n\n",[[1542290522575,["gjx16@GJXAIOU",[[1,4512,"\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表"]],[4512,4512],[4716,4716]]],[1542290525327,["gjx16@GJXAIOU",[[1,4726,"\n"]],[4720,4720],[4721,4721]]],[1542290531422,["gjx16@GJXAIOU",[[1,4721,"程序的运行结果；"]],[4721,4721],[4729,4729]]],[1542290531960,["gjx16@GJXAIOU",[[1,4735,"\n"]],[4729,4729],[4730,4730]]],[1542290540166,["gjx16@GJXAIOU",[[1,4730,"·"]],[4730,4730],[4731,4731]]],[1542290540978,["gjx16@GJXAIOU",[[-1,4730,"·"]],[4731,4731],[4730,4730]]],[1542290541626,["gjx16@GJXAIOU",[[1,4730,"`··"]],[4730,4730],[4733,4733]]],[1542290542823,["gjx16@GJXAIOU",[[-1,4730,"`··"]],[4733,4733],[4730,4730]]],[1542290543173,["gjx16@GJXAIOU",[[-1,4730,"\n"],[1,4731,"·"]],[4730,4730],[4731,4731]]],[1542290544574,["gjx16@GJXAIOU",[[-1,4730,"·"]],[4731,4731],[4730,4730]]],[1542290544731,["gjx16@GJXAIOU",[[-1,4730,"\n"],[1,4731,"`"]],[4730,4730],[4731,4731]]],[1542290545291,["gjx16@GJXAIOU",[[1,4731,"``"]],[4731,4731],[4733,4733]]],[1542290545327,["gjx16@GJXAIOU",[[1,4733,"language\n```\n"]],[4733,4733],[4733,4741]]],[1542290546139,["gjx16@GJXAIOU",[[-1,4733,"language"],[1,4741,"p"]],[4733,4741],[4734,4734]]],[1542290546840,["gjx16@GJXAIOU",[[1,4734,"ython"]],[4734,4734],[4739,4739]]],[1542290548610,["gjx16@GJXAIOU",[[-1,4731,"``python"]],[4739,4739],[4731,4731]]],[1542290549194,["gjx16@GJXAIOU",[[1,4731,"="]],[4731,4731],[4732,4732]]],[1542290549253,["gjx16@GJXAIOU",[[-1,4731,"="]],[4732,4732],[4731,4731]]],[1542290551126,["gjx16@GJXAIOU",[[-1,4733,"``"]],[4734,4734],[4732,4732]]],[1542290551256,["gjx16@GJXAIOU",[[-1,4731,"\n"]],[4732,4732],[4731,4731]]],[1542290551591,["gjx16@GJXAIOU",[[-1,4731,"`"]],[4731,4731],[4730,4730]]],[1542290552798,["gjx16@GJXAIOU",[[-1,4730,"`"]],[4731,4731],[4730,4730]]],[1542290555753,["gjx16@GJXAIOU",[[1,4730,"range(1, 7, 2)\n<class 'range'>\nrange(0, -9, -1)\n[0, -1, -2, -3, -4, -5, -6, -7, -8]`"]],[4730,4730],[4814,4814]]],[1542290556546,["gjx16@GJXAIOU",[[1,4777,"`"]],[4777,4777],[4778,4778]]],[1542290556916,["gjx16@GJXAIOU",[[1,4760,"`"]],[4760,4760],[4761,4761]]],[1542290557308,["gjx16@GJXAIOU",[[1,4744,"`"]],[4744,4744],[4745,4745]]],[1542290566346,["gjx16@GJXAIOU",[[1,4730,"`"]],[4730,4730],[4731,4731]]],[1542290567737,["gjx16@GJXAIOU",[[1,4747,"`"]],[4747,4747],[4748,4748]]],[1542290568276,["gjx16@GJXAIOU",[[1,4765,"`"]],[4765,4765],[4766,4766]]],[1542290568947,["gjx16@GJXAIOU",[[1,4784,"`"]],[4784,4784],[4785,4785]]]],null,"gjx16@GJXAIOU"],["b793e490-e51b-43d2-b2a8-107ba0f2e73f",1542329082285,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n\n  \n\n\n",[[1542329073414,["gjx16@GJXAIOU",[[1,4826,"\n"]],[4821,4821],[4822,4822]]],[1542329073526,["gjx16@GJXAIOU",[[1,4827,"\n"]],[4822,4822],[4823,4823]]],[1542329074069,["gjx16@GJXAIOU",[[1,4828,"\n"]],[4823,4823],[4824,4824]]],[1542329074341,["gjx16@GJXAIOU",[[1,4829,"\n"]],[4824,4824],[4825,4825]]],[1542329078720,["gjx16@GJXAIOU",[[1,4825,"###2.4.2"]],[4825,4825],[4833,4833]]],[1542329079542,["gjx16@GJXAIOU",[[-1,4832,"2"]],[4833,4833],[4832,4832]]],[1542329080327,["gjx16@GJXAIOU",[[1,4832,"4 "]],[4832,4832],[4834,4834]]],[1542329083504,["gjx16@GJXAIOU",[[1,4828," "]],[4828,4828],[4829,4829]]],[1542329086082,["gjx16@GJXAIOU",[[1,4835," "]],[4834,4834],[4835,4835]]],[1542329091839,["gjx16@GJXAIOU",[[1,4835,"并行迭代"]],[4835,4835],[4839,4839]]],[1542329092294,["gjx16@GJXAIOU",[[1,4839,"\n"]],[4839,4839],[4840,4840]]],[1542329107402,["gjx16@GJXAIOU",[[1,4840,"```"]],[4840,4840],[4843,4843]]],[1542329107438,["gjx16@GJXAIOU",[[1,4843,"language\n```\n"]],[4843,4843],[4843,4851]]],[1542329108623,["gjx16@GJXAIOU",[[-1,4843,"language"],[1,4851,"p"]],[4843,4851],[4844,4844]]],[1542329109354,["gjx16@GJXAIOU",[[1,4844,"yhton"]],[4844,4844],[4849,4849]]],[1542329110053,["gjx16@GJXAIOU",[[1,4850,"\n"]],[4849,4849],[4850,4850]]],[1542329114470,["gjx16@GJXAIOU",[[1,4851,"\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n"]],[4850,4850],[5369,5369]]],[1542329118326,["gjx16@GJXAIOU",[[1,5374,"\n"]],[5373,5373],[5374,5374]]],[1542329120328,["gjx16@GJXAIOU",[[1,5374,"chengxu"]],[5374,5374],[5381,5381]]],[1542329121685,["gjx16@GJXAIOU",[[-1,5374,"chengxu"]],[5381,5381],[5374,5374]]],[1542329127722,["gjx16@GJXAIOU",[[1,5374,"程序运行结果："]],[5374,5374],[5381,5381]]],[1542329128167,["gjx16@GJXAIOU",[[1,5382,"\n"]],[5381,5381],[5382,5382]]],[1542329141736,["gjx16@GJXAIOU",[[1,5382,"<zip object at 0x0000026214FB9B48>\n[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]\n[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]\n[('name', 'age')]\n[('h',), ('e',), ('l',), ('l',), ('o',)]\n[('w',), ('o',), ('r',), ('l',), ('d',)]\n[3, 5, 8, 10, 13]"]],[5382,5382],[5656,5656]]],[1542329145473,["gjx16@GJXAIOU",[[1,5382,"`"]],[5382,5382],[5383,5383]]],[1542329147682,["gjx16@GJXAIOU",[[1,5418,"`"]],[5418,5418],[5419,5419]]],[1542329148233,["gjx16@GJXAIOU",[[1,5480,"`"]],[5480,5480],[5481,5481]]],[1542329148814,["gjx16@GJXAIOU",[[1,5542,"`"]],[5542,5542],[5543,5543]]],[1542329149393,["gjx16@GJXAIOU",[[1,5561,"`"]],[5561,5561],[5562,5562]]],[1542329149963,["gjx16@GJXAIOU",[[1,5603,"`"]],[5603,5603],[5604,5604]]],[1542329150603,["gjx16@GJXAIOU",[[1,5645,"`"]],[5645,5645],[5646,5646]]],[1542329152441,["gjx16@GJXAIOU",[[1,5663,"`"]],[5663,5663],[5664,5664]]],[1542329154466,["gjx16@GJXAIOU",[[1,5644,"`"]],[5644,5644],[5645,5645]]],[1542329154915,["gjx16@GJXAIOU",[[1,5602,"`"]],[5602,5602],[5603,5603]]],[1542329155401,["gjx16@GJXAIOU",[[1,5560,"`"]],[5560,5560],[5561,5561]]],[1542329158840,["gjx16@GJXAIOU",[[1,5541,"`"]],[5541,5541],[5542,5542]]],[1542329159609,["gjx16@GJXAIOU",[[1,5479,"`"]],[5479,5479],[5480,5480]]],[1542329160201,["gjx16@GJXAIOU",[[1,5417,"`"]],[5417,5417],[5418,5418]]],[1542329181166,["gjx16@GJXAIOU",[[1,5671,"\n"]],[5670,5670],[5671,5671]]],[1542329181294,["gjx16@GJXAIOU",[[1,5672,"\n"]],[5671,5671],[5672,5672]]],[1542329184104,["gjx16@GJXAIOU",[[1,5672,"~~~~"]],[5672,5672],[5674,5674]]],[1542329188106,["gjx16@GJXAIOU",[[1,5674,"p121j"]],[5674,5674],[5679,5679]]],[1542329188575,["gjx16@GJXAIOU",[[-1,5678,"j"]],[5679,5679],[5678,5678]]],[1542329190167,["gjx16@GJXAIOU",[[1,5678,"结束"]],[5678,5678],[5680,5680]]]],null,"gjx16@GJXAIOU"],["5ecf512a-56ec-4c70-a74b-3427c208a119",1542549565931,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n### 2.4.4 并行迭代\n```pyhton\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n```\n程序运行结果：\n`<zip object at 0x0000026214FB9B48>`\n`[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]`\n`[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]`\n`[('name', 'age')]`\n`[('h',), ('e',), ('l',), ('l',), ('o',)]`\n`[('w',), ('o',), ('r',), ('l',), ('d',)]`\n`[3, 5, 8, 10, 13]`\n\n~~p121结束~~\n \n\n\n\n\n  \n\n\n",[[1542549546077,["gjx16@GJXAIOU",[[-1,5672,"~~p121结束~~"],[1,5682,"#"]],[5672,5682],[5673,5673]]],[1542549560252,["gjx16@GJXAIOU",[[1,5673,"## 2.4.5 enumerate使用"]],[5673,5673],[5693,5693]]],[1542549560744,["gjx16@GJXAIOU",[[1,5694,"\n"]],[5693,5693],[5694,5694]]],[1542549562484,["gjx16@GJXAIOU",[[1,5694,"1"]],[5694,5694],[5695,5695]]],[1542549563056,["gjx16@GJXAIOU",[[-1,5694,"1"]],[5695,5695],[5694,5694]]],[1542549563623,["gjx16@GJXAIOU",[[1,5694,"```"]],[5694,5694],[5697,5697]]],[1542549563661,["gjx16@GJXAIOU",[[1,5697,"language\n```\n"]],[5697,5697],[5697,5705]]],[1542549565128,["gjx16@GJXAIOU",[[-1,5697,"language"],[1,5705,"p"]],[5697,5705],[5698,5698]]],[1542549565771,["gjx16@GJXAIOU",[[1,5698,"ytho"]],[5698,5698],[5702,5702]]],[1542549565968,["gjx16@GJXAIOU",[[1,5702,"n"]],[5702,5702],[5703,5703]]],[1542549566886,["gjx16@GJXAIOU",[[1,5704,"\n"]],[5703,5703],[5704,5704]]],[1542549567618,["gjx16@GJXAIOU",[[1,5704,"''' enumerate的使用；p123 '''   ''' 同时得到列表中元素的索引和元素 p123 ''' # 一般方法 week = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号   #使用enumerate 内建函数 for (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n''' 直接显示列表中的索引和元素  p124 ''' seasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n''' 当原本的为字符串的时候，需要先转换为列表  p124 '''   #将字符串中部分字符进行替换   raw = \"hello world ,you are a good good student .\" raw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n  if \"good\" in string:\n        raw_list[i] = \"best\"   print(raw_list)"]],[5704,5704],[6415,6415]]],[1542549569331,["gjx16@GJXAIOU",[[-1,5704,"''' enumerate的使用；p123 '''   ''' 同时得到列表中元素的索引和元素 p123 ''' # 一般方法 week = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号   #使用enumerate 内建函数 for (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n''' 直接显示列表中的索引和元素  p124 ''' seasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n''' 当原本的为字符串的时候，需要先转换为列表  p124 '''   #将字符串中部分字符进行替换   raw = \"hello world ,you are a good good student .\" raw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n  if \"good\" in string:\n        raw_list[i] = \"best\"   print(raw_list)"]],[6415,6415],[5704,5704]]],[1542549572015,["gjx16@GJXAIOU",[[1,5704,"'''\nenumerate的使用；p123\n'''\n\n'''\n同时得到列表中元素的索引和元素 p123\n'''\n# 一般方法\nweek = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n\n#使用enumerate 内建函数\nfor (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n'''\n直接显示列表中的索引和元素  p124\n'''\nseasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n'''\n当原本的为字符串的时候，需要先转换为列表  p124\n'''\n\n#将字符串中部分字符进行替换\n\nraw = \"hello world ,you are a good good student .\"\nraw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n    if \"good\" in string:\n        raw_list[i] = \"best\"\n\nprint(raw_list)"]],[5704,5704],[6412,6412]]],[1542549578573,["gjx16@GJXAIOU",[[1,6418,"\n"]],[6416,6416],[6417,6417]]],[1542549580095,["gjx16@GJXAIOU",[[1,6417,"c"]],[6417,6417],[6418,6418]]],[1542549580628,["gjx16@GJXAIOU",[[-1,6417,"c"]],[6418,6418],[6417,6417]]],[1542549587193,["gjx16@GJXAIOU",[[1,6417,"程序运行结果："]],[6417,6417],[6424,6424]]],[1542549587686,["gjx16@GJXAIOU",[[1,6426,"\n"]],[6424,6424],[6425,6425]]],[1542549602893,["gjx16@GJXAIOU",[[1,6425,"mondayis0\nsundayis1\nfridayis2\nmondayis0\nsundayis1\nfridayis2\n[(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]\n[(1, 'spring'), (2, 'summer'), (3, 'fall'), (4, 'winter')]\n['hello', 'world', ',you', 'are', 'a', 'best', 'best', 'student', '.']"]],[6425,6425],[6673,6673]]],[1542549614605,["gjx16@GJXAIOU",[[1,6425,"·"]],[6425,6425],[6426,6426]]],[1542549615820,["gjx16@GJXAIOU",[[-1,6425,"·"]],[6426,6426],[6425,6425]]],[1542549616856,["gjx16@GJXAIOU",[[1,6425,"`"]],[6425,6425],[6426,6426]]],[1542549618912,["gjx16@GJXAIOU",[[1,6436,"`"]],[6436,6436],[6437,6437]]],[1542549620010,["gjx16@GJXAIOU",[[1,6447,"`"]],[6447,6447],[6448,6448]]],[1542549620816,["gjx16@GJXAIOU",[[1,6458,"`"]],[6458,6458],[6459,6459]]],[1542549621483,["gjx16@GJXAIOU",[[1,6469,"`"]],[6469,6469],[6470,6470]]],[1542549622063,["gjx16@GJXAIOU",[[1,6481,"`"]],[6481,6481],[6482,6482]]],[1542549623125,["gjx16@GJXAIOU",[[-1,6481,"`"]],[6482,6482],[6481,6481]]],[1542549625042,["gjx16@GJXAIOU",[[1,6480,"`"]],[6480,6480],[6481,6481]]],[1542549625879,["gjx16@GJXAIOU",[[1,6491,"`"]],[6491,6491],[6492,6492]]],[1542549626735,["gjx16@GJXAIOU",[[1,6551,"`"]],[6551,6551],[6552,6552]]],[1542549627312,["gjx16@GJXAIOU",[[1,6612,"`"]],[6612,6612],[6613,6613]]],[1542549628405,["gjx16@GJXAIOU",[[-1,6612,"`"]],[6613,6613],[6612,6612]]],[1542549629225,["gjx16@GJXAIOU",[[1,6611,"`"]],[6611,6611],[6612,6612]]],[1542549633799,["gjx16@GJXAIOU",[[1,6682,"`"]],[6682,6682],[6683,6683]]],[1542549634307,["gjx16@GJXAIOU",[[1,6616,"`"]],[6616,6616],[6617,6617]]],[1542549637149,["gjx16@GJXAIOU",[[-1,6616,"`"]],[6617,6617],[6616,6616]]],[1542549645697,["gjx16@GJXAIOU",[[1,6610,"  "]],[6610,6610],[6612,6612]]],[1542549647173,["gjx16@GJXAIOU",[[-1,6611," "]],[6612,6612],[6611,6611]]],[1542549648135,["gjx16@GJXAIOU",[[1,6611,"`"]],[6611,6611],[6612,6612]]],[1542549649346,["gjx16@GJXAIOU",[[1,6550,"`"]],[6550,6550],[6551,6551]]],[1542549650064,["gjx16@GJXAIOU",[[1,6490,"`"]],[6490,6490],[6491,6491]]],[1542549650927,["gjx16@GJXAIOU",[[1,6479,"`"]],[6479,6479],[6480,6480]]],[1542549651600,["gjx16@GJXAIOU",[[1,6468,"`"]],[6468,6468],[6469,6469]]],[1542549652075,["gjx16@GJXAIOU",[[1,6457,"`"]],[6457,6457],[6458,6458]]],[1542549652920,["gjx16@GJXAIOU",[[1,6446,"`"]],[6446,6446],[6447,6447]]],[1542549653480,["gjx16@GJXAIOU",[[1,6435,"`"]],[6435,6435],[6436,6436]]],[1542549659078,["gjx16@GJXAIOU",[[1,6694,"\n"]],[6692,6692],[6693,6693]]],[1542549659655,["gjx16@GJXAIOU",[[1,6695,"\n"]],[6693,6693],[6694,6694]]],[1542549774579,["gjx16@GJXAIOU",[[1,6694,"###2.4.6 "]],[6694,6694],[6703,6703]]],[1542549777202,["gjx16@GJXAIOU",[[1,6697," "]],[6697,6697],[6698,6698]]],[1542549787259,["gjx16@GJXAIOU",[[1,6704," "]],[6703,6703],[6704,6704]]],[1542549788187,["gjx16@GJXAIOU",[[1,6704,"lie"]],[6704,6704],[6707,6707]]],[1542549789491,["gjx16@GJXAIOU",[[-1,6704,"lie "]],[6707,6707],[6703,6703]]],[1542549790206,["gjx16@GJXAIOU",[[1,6704," "]],[6703,6703],[6704,6704]]],[1542549794624,["gjx16@GJXAIOU",[[1,6704,"列表解析"]],[6704,6704],[6708,6708]]],[1542549795549,["gjx16@GJXAIOU",[[1,6708,"\n"]],[6708,6708],[6709,6709]]],[1542550292773,["gjx16@GJXAIOU",[[-1,6709," "]],[6710,6710],[6709,6709]]],[1542550294111,["gjx16@GJXAIOU",[[1,6709,"·"]],[6709,6709],[6710,6710]]],[1542550294667,["gjx16@GJXAIOU",[[-1,6709,"·"]],[6710,6710],[6709,6709]]],[1542550295267,["gjx16@GJXAIOU",[[1,6709,"~"]],[6709,6709],[6710,6710]]],[1542550296203,["gjx16@GJXAIOU",[[-1,6709,"~"]],[6710,6710],[6709,6709]]],[1542550296671,["gjx16@GJXAIOU",[[1,6709,"·"]],[6709,6709],[6710,6710]]],[1542550297419,["gjx16@GJXAIOU",[[-1,6709,"·"]],[6710,6710],[6709,6709]]],[1542550298144,["gjx16@GJXAIOU",[[1,6709,"~·"]],[6709,6709],[6711,6711]]],[1542550299038,["gjx16@GJXAIOU",[[-1,6709,"~·"]],[6711,6711],[6709,6709]]],[1542550301119,["gjx16@GJXAIOU",[[1,6709,"```"]],[6709,6709],[6712,6712]]],[1542550301172,["gjx16@GJXAIOU",[[1,6712,"language\n```\n"]],[6712,6712],[6712,6720]]],[1542550302673,["gjx16@GJXAIOU",[[-1,6712,"language"],[1,6720,"p"]],[6712,6720],[6713,6713]]],[1542550303416,["gjx16@GJXAIOU",[[1,6713,"ython"]],[6713,6713],[6718,6718]]],[1542550304197,["gjx16@GJXAIOU",[[1,6719,"\n"]],[6718,6718],[6719,6719]]],[1542550305557,["gjx16@GJXAIOU",[[1,6719,"''' 列表解析：p125 '''   #得到1-9的平方，放入列表并打印   outlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到 outlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n#删除列表中字符串前后的空格 raw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)"]],[6719,6719],[7023,7023]]],[1542550307724,["gjx16@GJXAIOU",[[-1,6719,"''' 列表解析：p125 '''   #得到1-9的平方，放入列表并打印   outlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到 outlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n#删除列表中字符串前后的空格 raw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)"]],[7023,7023],[6719,6719]]],[1542550309871,["gjx16@GJXAIOU",[[1,6720,"'''\n列表解析：p125\n'''\n\n#得到1-9的平方，放入列表并打印\n\noutlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到\noutlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n\n#删除列表中字符串前后的空格\nraw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)\n"]],[6719,6719],[7023,7023]]],[1542550313400,["gjx16@GJXAIOU",[[1,7030,"\n"]],[7027,7027],[7028,7028]]],[1542550314480,["gjx16@GJXAIOU",[[1,7028,"c"]],[7028,7028],[7029,7029]]],[1542550315075,["gjx16@GJXAIOU",[[-1,7028,"c"]],[7029,7029],[7028,7028]]],[1542550321220,["gjx16@GJXAIOU",[[1,7028,"程序运行结果："]],[7028,7028],[7035,7035]]],[1542550321844,["gjx16@GJXAIOU",[[1,7038,"\n"]],[7035,7035],[7036,7036]]],[1542550334021,["gjx16@GJXAIOU",[[1,7036,"[1, 4, 9, 16, 25, 36, 49, 64, 81]\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n['hello', 'lala', 'world']"]],[7036,7036],[7130,7130]]],[1542550336851,["gjx16@GJXAIOU",[[1,7036,"·"]],[7036,7036],[7037,7037]]],[1542550337979,["gjx16@GJXAIOU",[[-1,7036,"·"]],[7037,7037],[7036,7036]]],[1542550338406,["gjx16@GJXAIOU",[[1,7036,"`"]],[7036,7036],[7037,7037]]],[1542550339810,["gjx16@GJXAIOU",[[1,7071,"`"]],[7071,7071],[7072,7072]]],[1542550340942,["gjx16@GJXAIOU",[[1,7106,"`"]],[7106,7106],[7107,7107]]],[1542550343702,["gjx16@GJXAIOU",[[1,7133,"`"]],[7133,7133],[7134,7134]]],[1542550344630,["gjx16@GJXAIOU",[[1,7105,"`"]],[7105,7105],[7106,7106]]],[1542550345214,["gjx16@GJXAIOU",[[1,7070,"`"]],[7070,7070],[7071,7071]]],[1542550347429,["gjx16@GJXAIOU",[[1,7139,"\n"]],[7136,7136],[7137,7137]]],[1542550347844,["gjx16@GJXAIOU",[[1,7140,"\n"]],[7137,7137],[7138,7138]]],[1542550350684,["gjx16@GJXAIOU",[[1,7141,"\n"]],[7138,7138],[7139,7139]]],[1542550350858,["gjx16@GJXAIOU",[[1,7142,"\n"]],[7139,7139],[7140,7140]]],[1542550350996,["gjx16@GJXAIOU",[[1,7143,"\n"]],[7140,7140],[7141,7141]]],[1542550357615,["gjx16@GJXAIOU",[[1,7141,"## 2.5 ehi"]],[7141,7141],[7151,7151]]],[1542550358355,["gjx16@GJXAIOU",[[-1,7148,"ehi"]],[7151,7151],[7148,7148]]],[1542550364428,["gjx16@GJXAIOU",[[1,7148,"while循环语句"]],[7148,7148],[7157,7157]]],[1542550365025,["gjx16@GJXAIOU",[[1,7160,"\n"]],[7157,7157],[7158,7158]]],[1542551251568,["gjx16@GJXAIOU",[[1,7158,"示例程序："]],[7158,7158],[7163,7163]]],[1542551252341,["gjx16@GJXAIOU",[[1,7166,"\n"]],[7163,7163],[7164,7164]]],[1542551254027,["gjx16@GJXAIOU",[[1,7167,"\n"]],[7164,7164],[7165,7165]]],[1542551254620,["gjx16@GJXAIOU",[[1,7165,"···"]],[7165,7165],[7168,7168]]],[1542551255351,["gjx16@GJXAIOU",[[-1,7165,"···"]],[7168,7168],[7165,7165]]],[1542551255612,["gjx16@GJXAIOU",[[-1,7167,"\n"]],[7165,7165],[7164,7164]]],[1542551257002,["gjx16@GJXAIOU",[[1,7164,"```"]],[7164,7164],[7167,7167]]],[1542551257050,["gjx16@GJXAIOU",[[1,7167,"language\n```\n"]],[7167,7167],[7167,7175]]],[1542551258359,["gjx16@GJXAIOU",[[-1,7167,"language"],[1,7175,"p"]],[7167,7175],[7168,7168]]],[1542551259116,["gjx16@GJXAIOU",[[1,7168,"ython"]],[7168,7168],[7173,7173]]],[1542551259637,["gjx16@GJXAIOU",[[1,7174,"\n"]],[7173,7173],[7174,7174]]],[1542551263729,["gjx16@GJXAIOU",[[1,7175,"'''\nwhile循环示例：P129\n'''\nimport  random\nnum = random.randint(1,100)\nguess = 0\n\nwhile True:\n    num_input = input(\"please input one interger that is in 1 to 100:\")\n    guess +=1\n    if not num_input.isdigit():\n        print(\"please input interger.\")\n    elif int(num_input) < 0 or int(num_input) > 100:\n        print(\"please input number that is in 1 to 100:\")\n    else:\n        if num == int(num_input):\n            print(\"you are so smart\")\n            break\n        elif num > int(num_input):\n            print(\"the true num is bigger than you input\")\n        elif num < int(num_input):\n            print(\"the true num is smaller than you input\")\n        else:\n            print(\"There is something bad\")\n"]],[7174,7174],[7879,7879]]],[1542551272758,["gjx16@GJXAIOU",[[1,7885,"~~~~"]],[7885,7885],[7887,7887]]],[1542551276387,["gjx16@GJXAIOU",[[1,7887,"P129"]],[7887,7887],[7891,7891]]]],null,"gjx16@GJXAIOU"],["99bcaa91-1bec-4389-8349-d26755169556",1542794925184,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n### 2.4.4 并行迭代\n```pyhton\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n```\n程序运行结果：\n`<zip object at 0x0000026214FB9B48>`\n`[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]`\n`[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]`\n`[('name', 'age')]`\n`[('h',), ('e',), ('l',), ('l',), ('o',)]`\n`[('w',), ('o',), ('r',), ('l',), ('d',)]`\n`[3, 5, 8, 10, 13]`\n\n### 2.4.5 enumerate使用\n```python\n'''\nenumerate的使用；p123\n'''\n\n'''\n同时得到列表中元素的索引和元素 p123\n'''\n# 一般方法\nweek = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n\n#使用enumerate 内建函数\nfor (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n'''\n直接显示列表中的索引和元素  p124\n'''\nseasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n'''\n当原本的为字符串的时候，需要先转换为列表  p124\n'''\n\n#将字符串中部分字符进行替换\n\nraw = \"hello world ,you are a good good student .\"\nraw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n    if \"good\" in string:\n        raw_list[i] = \"best\"\n\nprint(raw_list)\n```\n程序运行结果：\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`[(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]`\n`[(1, 'spring'), (2, 'summer'), (3, 'fall'), (4, 'winter')] `\n`['hello', 'world', ',you', 'are', 'a', 'best', 'best', 'student', '.']`\n\n### 2.4.6 列表解析\n```python\n\n'''\n列表解析：p125\n'''\n\n#得到1-9的平方，放入列表并打印\n\noutlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到\noutlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n\n#删除列表中字符串前后的空格\nraw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)\n```\n程序运行结果：\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`['hello', 'lala', 'world']`\n\n\n\n\n## 2.5 while循环语句\n示例程序：\n```python\n\n'''\nwhile循环示例：P129\n'''\nimport  random\nnum = random.randint(1,100)\nguess = 0\n\nwhile True:\n    num_input = input(\"please input one interger that is in 1 to 100:\")\n    guess +=1\n    if not num_input.isdigit():\n        print(\"please input interger.\")\n    elif int(num_input) < 0 or int(num_input) > 100:\n        print(\"please input number that is in 1 to 100:\")\n    else:\n        if num == int(num_input):\n            print(\"you are so smart\")\n            break\n        elif num > int(num_input):\n            print(\"the true num is bigger than you input\")\n        elif num < int(num_input):\n            print(\"the true num is smaller than you input\")\n        else:\n            print(\"There is something bad\")\n```\n\n~~P129~~\n\n \n\n\n\n\n  \n\n\n",[[1542794900678,["gjx16@GJXAIOU",[[-1,7885,"~~P129~~"]],[7885,7893],[7885,7885]]],[1542794902422,["gjx16@GJXAIOU",[[1,7885,"###"]],[7885,7885],[7888,7888]]],[1542794923468,["gjx16@GJXAIOU",[[1,7381,"#用来判断"]],[7381,7381],[7386,7386]]],[1542794927469,["gjx16@GJXAIOU",[[1,7386,"字符串是够"]],[7386,7386],[7391,7391]]],[1542794928097,["gjx16@GJXAIOU",[[-1,7390,"够"]],[7391,7391],[7390,7390]]],[1542794937462,["gjx16@GJXAIOU",[[1,7390,"否全部由数字组成"]],[7390,7390],[7398,7398]]],[1542795044053,["gjx16@GJXAIOU",[[1,7905," 2."]],[7905,7905],[7908,7908]]],[1542795045885,["gjx16@GJXAIOU",[[1,7908,"5.2"]],[7908,7908],[7911,7911]]],[1542795048647,["gjx16@GJXAIOU",[[1,7913,"\n"]],[7911,7911],[7912,7912]]],[1542795049602,["gjx16@GJXAIOU",[[-1,7913,"\n"]],[7912,7912],[7911,7911]]],[1542795063542,["gjx16@GJXAIOU",[[1,7911," breakh3e"]],[7911,7911],[7920,7920]]],[1542795064458,["gjx16@GJXAIOU",[[-1,7917,"h3e"]],[7920,7920],[7917,7917]]],[1542795071719,["gjx16@GJXAIOU",[[1,7917,"和continue "]],[7917,7917],[7927,7927]]],[1542795072907,["gjx16@GJXAIOU",[[1,7929,"\n"]],[7927,7927],[7928,7928]]],[1542795073659,["gjx16@GJXAIOU",[[1,7930,"\n"]],[7928,7928],[7929,7929]]],[1542795170482,["gjx16@GJXAIOU",[[1,7931,"\n"]],[7928,7928],[7929,7929]]],[1542795180538,["gjx16@GJXAIOU",[[1,7929,"****"]],[7929,7929],[7931,7931]]],[1542795188521,["gjx16@GJXAIOU",[[1,7931,"1.break："]],[7931,7931],[7939,7939]]],[1542795196865,["gjx16@GJXAIOU",[[1,7941," 主要是终端循环"]],[7941,7941],[7949,7949]]],[1542795198490,["gjx16@GJXAIOU",[[-1,7945,"终端循环"]],[7949,7949],[7945,7945]]],[1542795216660,["gjx16@GJXAIOU",[[1,7945,"中断循环并且跳出循环体"]],[7945,7945],[7956,7956]]],[1542795312975,["gjx16@GJXAIOU",[[1,7945,"在当前位置"]],[7945,7945],[7950,7950]]],[1542795338493,["gjx16@GJXAIOU",[[1,7957,"\n"]],[7957,7957],[7958,7958]]],[1542795339747,["gjx16@GJXAIOU",[[-1,7957,"\n"]],[7958,7958],[7957,7957]]],[1542795342422,["gjx16@GJXAIOU",[[1,7964,"\n"]],[7961,7961],[7962,7962]]],[1542795342958,["gjx16@GJXAIOU",[[1,7965,"\n"]],[7962,7962],[7963,7963]]],[1542795344992,["gjx16@GJXAIOU",[[1,7963,"****"]],[7963,7963],[7965,7965]]],[1542795350945,["gjx16@GJXAIOU",[[1,7965,"continue："]],[7965,7965],[7974,7974]]],[1542795352511,["gjx16@GJXAIOU",[[1,7976,"· "]],[7976,7976],[7978,7978]]],[1542795353078,["gjx16@GJXAIOU",[[-1,7976,"· "]],[7978,7978],[7976,7976]]],[1542795364084,["gjx16@GJXAIOU",[[1,7976," 从当前位置（）"]],[7976,7976],[7984,7984]]],[1542795389624,["gjx16@GJXAIOU",[[1,7983,"continue 位置，跳到循环体的而最后一行"]],[7983,7983],[8006,8006]]],[1542795391933,["gjx16@GJXAIOU",[[-1,8001,"而"]],[8002,8002],[8001,8001]]],[1542795397973,["gjx16@GJXAIOU",[[1,8005,"的后面（"]],[8005,8005],[8009,8009]]],[1542795398059,["gjx16@GJXAIOU",[[1,8010,"）"]],[8009,8009],[8010,8010]]],[1542795400610,["gjx16@GJXAIOU",[[-1,8008,"（）"]],[8010,8010],[8008,8008]]],[1542795402323,["gjx16@GJXAIOU",[[1,8009,"，"]],[8009,8009],[8010,8010]]],[1542795412067,["gjx16@GJXAIOU",[[1,7994,"）"]],[7994,7994],[7995,7995]]],[1542795415226,["gjx16@GJXAIOU",[[-1,7995,"，"]],[7996,7996],[7995,7995]]],[1542795427651,["gjx16@GJXAIOU",[[-1,8008,"），"]],[8010,8010],[8008,8008]]],[1542795430313,["gjx16@GJXAIOU",[[1,8008,"（）"]],[8008,8008],[8010,8010]]],[1542795440208,["gjx16@GJXAIOU",[[1,8009,"不执行最后一行"]],[8009,8009],[8016,8016]]],[1542795461935,["gjx16@GJXAIOU",[[1,8020,"\n"]],[8017,8017],[8018,8018]]],[1542795462096,["gjx16@GJXAIOU",[[1,8021,"\n"]],[8018,8018],[8019,8019]]],[1542795467588,["gjx16@GJXAIOU",[[1,8019,"===="]],[8019,8019],[8021,8021]]],[1542795491522,["gjx16@GJXAIOU",[[1,8021,"尽量在循环之前将条件做足，避免使用这两个在循环中跳来跳去"]],[8021,8021],[8049,8049]]],[1542795508132,["gjx16@GJXAIOU",[[1,8054,"\n"]],[8051,8051],[8052,8052]]],[1542795508301,["gjx16@GJXAIOU",[[1,8055,"\n"]],[8052,8052],[8053,8053]]],[1542795508448,["gjx16@GJXAIOU",[[1,8056,"\n"]],[8053,8053],[8054,8054]]],[1542795509247,["gjx16@GJXAIOU",[[1,8057,"\n"]],[8054,8054],[8055,8055]]],[1542795515615,["gjx16@GJXAIOU",[[1,8055,"### 2.5.3"]],[8055,8055],[8064,8064]]],[1542795516297,["gjx16@GJXAIOU",[[1,8067,"\n"]],[8064,8064],[8065,8065]]],[1542795517107,["gjx16@GJXAIOU",[[-1,8067,"\n"]],[8065,8065],[8064,8064]]],[1542795522514,["gjx16@GJXAIOU",[[1,8064," while...."]],[8064,8064],[8074,8074]]],[1542795526915,["gjx16@GJXAIOU",[[1,8074,"else"]],[8074,8074],[8078,8078]]],[1542795527640,["gjx16@GJXAIOU",[[1,8081,"\n"]],[8078,8078],[8079,8079]]],[1542795531425,["gjx16@GJXAIOU",[[1,8079,"例子："]],[8079,8079],[8082,8082]]],[1542795531974,["gjx16@GJXAIOU",[[1,8085,"\n"]],[8082,8082],[8083,8083]]],[1542795533781,["gjx16@GJXAIOU",[[1,8083,"```"]],[8083,8083],[8086,8086]]],[1542795533825,["gjx16@GJXAIOU",[[1,8086,"language\n```\n"]],[8086,8086],[8086,8094]]],[1542795536362,["gjx16@GJXAIOU",[[-1,8086,"language"],[1,8094,"p"]],[8086,8094],[8087,8087]]],[1542795538144,["gjx16@GJXAIOU",[[1,8087,"ython"]],[8087,8087],[8092,8092]]],[1542795541284,["gjx16@GJXAIOU",[[1,8093,"\n"]],[8092,8092],[8093,8093]]],[1542795543998,["gjx16@GJXAIOU",[[1,8093,"int"]],[8093,8093],[8096,8096]]],[1542795546311,["gjx16@GJXAIOU",[[-1,8093,"int"]],[8096,8096],[8093,8093]]],[1542795549806,["gjx16@GJXAIOU",[[1,8093,"cout = "]],[8093,8093],[8100,8100]]],[1542795553579,["gjx16@GJXAIOU",[[-1,8093,"cout = "]],[8100,8100],[8093,8093]]],[1542795778021,["gjx16@GJXAIOU",[[1,8093,"''' while ...else P130 '''   count = 0 while count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1 else:\n    print(count,\"is not less than 5\")"]],[8093,8093],[8243,8243]]],[1542795779747,["gjx16@GJXAIOU",[[-1,8093,"''' while ...else P130 '''   count = 0 while count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1 else:\n    print(count,\"is not less than 5\")"]],[8243,8243],[8093,8093]]],[1542795783380,["gjx16@GJXAIOU",[[1,8093,"'''\nwhile ...else P130\n'''\n\ncount = 0\nwhile count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1\nelse:\n    print(count,\"is not less than 5\")"]],[8093,8093],[8242,8242]]],[1542795785660,["gjx16@GJXAIOU",[[1,8250,"\n"]],[8246,8246],[8247,8247]]],[1542795787091,["gjx16@GJXAIOU",[[1,8247,"chengx"]],[8247,8247],[8253,8253]]],[1542795788748,["gjx16@GJXAIOU",[[-1,8247,"chengx"]],[8253,8253],[8247,8247]]],[1542795794089,["gjx16@GJXAIOU",[[1,8247,"程序运行结果："]],[8247,8247],[8254,8254]]],[1542795795150,["gjx16@GJXAIOU",[[1,8258,"\n"]],[8254,8254],[8255,8255]]],[1542795804827,["gjx16@GJXAIOU",[[1,8256,"0 is less than 5\n1 is less than 5\n2 is less than 5\n3 is less than 5\n4 is less than 5\n5 is not less than 5"]],[8256,8256],[8361,8361]]],[1542795806455,["gjx16@GJXAIOU",[[-1,8255,"\n"]],[8255,8255],[8254,8254]]],[1542795812931,["gjx16@GJXAIOU",[[1,8255,"·"]],[8255,8255],[8256,8256]]],[1542795814031,["gjx16@GJXAIOU",[[-1,8255,"·"]],[8256,8256],[8255,8255]]],[1542795814500,["gjx16@GJXAIOU",[[1,8255,"`"]],[8255,8255],[8256,8256]]],[1542795815704,["gjx16@GJXAIOU",[[1,8273,"`"]],[8273,8273],[8274,8274]]],[1542795816303,["gjx16@GJXAIOU",[[1,8291,"`"]],[8291,8291],[8292,8292]]],[1542795816868,["gjx16@GJXAIOU",[[1,8309,"`"]],[8309,8309],[8310,8310]]],[1542795817437,["gjx16@GJXAIOU",[[1,8327,"`"]],[8327,8327],[8328,8328]]],[1542795818025,["gjx16@GJXAIOU",[[1,8345,"`"]],[8345,8345],[8346,8346]]],[1542795820643,["gjx16@GJXAIOU",[[1,8366,"`"]],[8366,8366],[8367,8367]]],[1542795821058,["gjx16@GJXAIOU",[[1,8344,"`"]],[8344,8344],[8345,8345]]],[1542795821504,["gjx16@GJXAIOU",[[1,8326,"`"]],[8326,8326],[8327,8327]]],[1542795821909,["gjx16@GJXAIOU",[[1,8308,"`"]],[8308,8308],[8309,8309]]],[1542795822283,["gjx16@GJXAIOU",[[1,8290,"`"]],[8290,8290],[8291,8291]]],[1542795822642,["gjx16@GJXAIOU",[[1,8272,"`"]],[8272,8272],[8273,8273]]],[1542795826048,["gjx16@GJXAIOU",[[1,8375,"\n"]],[8372,8372],[8373,8373]]],[1542795826232,["gjx16@GJXAIOU",[[1,8376,"\n"]],[8373,8373],[8374,8374]]],[1542796320696,["gjx16@GJXAIOU",[[1,8374,"### 2.4"]],[8374,8374],[8381,8381]]],[1542796321141,["gjx16@GJXAIOU",[[-1,8380,"4"]],[8381,8381],[8380,8380]]],[1542796327625,["gjx16@GJXAIOU",[[1,8380,"5.4 for ...else"]],[8380,8380],[8395,8395]]],[1542796328566,["gjx16@GJXAIOU",[[1,8398,"\n"]],[8395,8395],[8396,8396]]],[1542796331114,["gjx16@GJXAIOU",[[1,8396,"```"]],[8396,8396],[8399,8399]]],[1542796331157,["gjx16@GJXAIOU",[[1,8399,"language\n```\n"]],[8399,8399],[8399,8407]]],[1542796331844,["gjx16@GJXAIOU",[[-1,8399,"language"],[1,8407,"p"]],[8399,8407],[8400,8400]]],[1542796332783,["gjx16@GJXAIOU",[[1,8400,"ython"]],[8400,8400],[8405,8405]]],[1542796333397,["gjx16@GJXAIOU",[[1,8406,"\n"]],[8405,8405],[8406,8406]]],[1542796335070,["gjx16@GJXAIOU",[[1,8406,"''' for ...else  P131 ''' from math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break #这个break作用是？\n  else:\n        print(\"nothing\")"]],[8406,8406],[8625,8625]]],[1542796336802,["gjx16@GJXAIOU",[[-1,8406,"''' for ...else  P131 ''' from math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break #这个break作用是？\n  else:\n        print(\"nothing\")"]],[8625,8625],[8406,8406]]],[1542796340508,["gjx16@GJXAIOU",[[1,8406,"'''\nfor ...else  P131\n'''\nfrom math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break                            #这个break作用是？\n    else:\n        print(\"nothing\")"]],[8406,8406],[8654,8654]]],[1542796357629,["gjx16@GJXAIOU",[[1,8662,"\n"]],[8658,8658],[8659,8659]]],[1542796363175,["gjx16@GJXAIOU",[[1,8659,"cheng"]],[8659,8659],[8664,8664]]],[1542796364015,["gjx16@GJXAIOU",[[-1,8659,"cheng"]],[8664,8664],[8659,8659]]],[1542796369473,["gjx16@GJXAIOU",[[1,8659,"程序运行个结果："]],[8659,8659],[8667,8667]]],[1542796371871,["gjx16@GJXAIOU",[[-1,8661,"运行个结果："]],[8667,8667],[8661,8661]]],[1542796375074,["gjx16@GJXAIOU",[[1,8661,"运行结果："]],[8661,8661],[8666,8666]]],[1542796376038,["gjx16@GJXAIOU",[[1,8670,"\n"]],[8666,8666],[8667,8667]]],[1542796401021,["gjx16@GJXAIOU",[[1,8667,"nothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\n9.0 is the sqrt of 81"]],[8667,8667],[8832,8832]]],[1542796434743,["gjx16@GJXAIOU",[[-1,8691,"nothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\nnothing\n"],[-1,8832,"\n"]],[8667,8833],[8712,8712]]],[1542796437499,["gjx16@GJXAIOU",[[1,8667,"·"]],[8667,8667],[8668,8668]]],[1542796438596,["gjx16@GJXAIOU",[[-1,8667,"·"]],[8668,8668],[8667,8667]]],[1542796439025,["gjx16@GJXAIOU",[[1,8667,"`"]],[8667,8667],[8668,8668]]],[1542796440369,["gjx16@GJXAIOU",[[1,8676,"`"]],[8676,8676],[8677,8677]]],[1542796440875,["gjx16@GJXAIOU",[[1,8685,"`"]],[8685,8685],[8686,8686]]],[1542796441648,["gjx16@GJXAIOU",[[1,8694,"`"]],[8694,8694],[8695,8695]]],[1542796444091,["gjx16@GJXAIOU",[[1,8716,"`"]],[8716,8716],[8717,8717]]],[1542796444473,["gjx16@GJXAIOU",[[1,8693,"`"]],[8693,8693],[8694,8694]]],[1542796444816,["gjx16@GJXAIOU",[[1,8684,"`"]],[8684,8684],[8685,8685]]],[1542796445172,["gjx16@GJXAIOU",[[1,8675,"`"]],[8675,8675],[8676,8676]]],[1542796448727,["gjx16@GJXAIOU",[[1,8723,"\n"]],[8720,8720],[8721,8721]]],[1542796448864,["gjx16@GJXAIOU",[[1,8724,"\n"]],[8721,8721],[8722,8722]]],[1542796449878,["gjx16@GJXAIOU",[[1,8725,"\n"]],[8722,8722],[8723,8723]]],[1542796450020,["gjx16@GJXAIOU",[[1,8726,"\n"]],[8723,8723],[8724,8724]]],[1542796526888,["gjx16@GJXAIOU",[[1,8724,"## 2.6 wenjai"]],[8724,8724],[8737,8737]]],[1542796527989,["gjx16@GJXAIOU",[[-1,8731,"wenjai"]],[8737,8737],[8731,8731]]],[1542796531126,["gjx16@GJXAIOU",[[1,8731," 文件"]],[8731,8731],[8734,8734]]],[1542796531689,["gjx16@GJXAIOU",[[1,8737,"\n"]],[8734,8734],[8735,8735]]],[1542796532185,["gjx16@GJXAIOU",[[1,8738,"\n"]],[8735,8735],[8736,8736]]],[1542796543298,["gjx16@GJXAIOU",[[1,8736,"### 2.6.2"]],[8736,8736],[8745,8745]]],[1542796544061,["gjx16@GJXAIOU",[[-1,8744,"2"]],[8745,8745],[8744,8744]]],[1542796547679,["gjx16@GJXAIOU",[[1,8744,"1 读文件"]],[8744,8744],[8749,8749]]],[1542797010737,["gjx16@GJXAIOU",[[1,8751,"```"]],[8751,8751],[8754,8754]]],[1542797010781,["gjx16@GJXAIOU",[[1,8754,"language\n```\n"]],[8754,8754],[8754,8762]]],[1542797011833,["gjx16@GJXAIOU",[[-1,8754,"language"],[1,8762,"c"]],[8754,8762],[8755,8755]]],[1542797012410,["gjx16@GJXAIOU",[[-1,8754,"c"]],[8755,8755],[8754,8754]]],[1542797014561,["gjx16@GJXAIOU",[[1,8754,"python"]],[8754,8754],[8760,8760]]],[1542797015438,["gjx16@GJXAIOU",[[1,8761,"\n"]],[8760,8760],[8761,8761]]],[1542797021015,["gjx16@GJXAIOU",[[1,8761,"''' 读文件：p131 ''' f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 for line in f:\n    print(line)"]],[8761,8761],[8855,8855]]],[1542797022853,["gjx16@GJXAIOU",[[-1,8761,"''' 读文件：p131 ''' f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 for line in f:\n    print(line)"]],[8855,8855],[8761,8761]]],[1542797027160,["gjx16@GJXAIOU",[[1,8761,"'''\n读文件：p131\n'''\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line)\n"]],[8761,8761],[8856,8856]]],[1542797050516,["gjx16@GJXAIOU",[[1,8862,"\n"]],[8860,8860],[8861,8861]]],[1542797051968,["gjx16@GJXAIOU",[[1,8861,"cheng"]],[8861,8861],[8866,8866]]],[1542797053121,["gjx16@GJXAIOU",[[-1,8861,"cheng"]],[8866,8866],[8861,8861]]],[1542797058191,["gjx16@GJXAIOU",[[1,8861,"程序运行结果："]],[8861,8861],[8868,8868]]],[1542797058672,["gjx16@GJXAIOU",[[1,8870,"\n"]],[8868,8868],[8869,8869]]],[1542797076217,["gjx16@GJXAIOU",[[1,8869,"你好世界\n\n12345\n\nbest\n"]],[8869,8869],[8887,8887]]],[1542797077876,["gjx16@GJXAIOU",[[1,8869,"·"]],[8869,8869],[8870,8870]]],[1542797078891,["gjx16@GJXAIOU",[[-1,8869,"·"]],[8870,8870],[8869,8869]]],[1542797079347,["gjx16@GJXAIOU",[[1,8869,"`"]],[8869,8869],[8870,8870]]],[1542797081098,["gjx16@GJXAIOU",[[1,8876,"`"]],[8876,8876],[8877,8877]]],[1542797082210,["gjx16@GJXAIOU",[[1,8882,"`"]],[8882,8882],[8883,8883]]],[1542797084058,["gjx16@GJXAIOU",[[1,8874,"`"]],[8874,8874],[8875,8875]]],[1542797086141,["gjx16@GJXAIOU",[[1,8890,"`"]],[8890,8890],[8891,8891]]],[1542797087830,["gjx16@GJXAIOU",[[1,8886,"`"]],[8886,8886],[8887,8887]]],[1542797095843,["gjx16@GJXAIOU",[[1,8895,"\n"]],[8893,8893],[8894,8894]]],[1542797101963,["gjx16@GJXAIOU",[[1,8894,"上面程序改进"]],[8894,8894],[8900,8900]]],[1542797110986,["gjx16@GJXAIOU",[[1,8893,"#因为美俄韩"]],[8893,8893],[8899,8899]]],[1542797113503,["gjx16@GJXAIOU",[[-1,8894,"因为美俄韩"]],[8899,8899],[8894,8894]]],[1542797122596,["gjx16@GJXAIOU",[[1,8894,"因为每行的最后都有·"]],[8894,8894],[8904,8904]]],[1542797123168,["gjx16@GJXAIOU",[[-1,8903,"·"]],[8904,8904],[8903,8903]]],[1542797124370,["gjx16@GJXAIOU",[[1,8903,"``"]],[8903,8903],[8905,8905]]],[1542797126242,["gjx16@GJXAIOU",[[1,8904,"\\n"]],[8904,8904],[8906,8906]]],[1542797143609,["gjx16@GJXAIOU",[[1,8907,",同时print在默认情况"]],[8907,8907],[8920,8920]]],[1542797165549,["gjx16@GJXAIOU",[[1,8921,"，打印完line的对象之后会增加一个``"]],[8921,8921],[8941,8941]]],[1542797167226,["gjx16@GJXAIOU",[[1,8940,"\\n"]],[8940,8940],[8942,8942]]],[1542797172424,["gjx16@GJXAIOU",[[1,8943,",yingci "]],[8943,8943],[8951,8951]]],[1542797174695,["gjx16@GJXAIOU",[[-1,8944,"yingci "]],[8951,8951],[8944,8944]]],[1542797178350,["gjx16@GJXAIOU",[[1,8944,"因此重甲"]],[8944,8944],[8948,8948]]],[1542797179286,["gjx16@GJXAIOU",[[-1,8946,"重甲"]],[8948,8948],[8946,8946]]],[1542797186280,["gjx16@GJXAIOU",[[1,8946,"中间会空一行；"]],[8946,8946],[8953,8953]]],[1542797189296,["gjx16@GJXAIOU",[[1,8954,"\n"]],[8954,8954],[8955,8955]]],[1542797192506,["gjx16@GJXAIOU",[[1,8962,"```"]],[8962,8962],[8965,8965]]],[1542797192549,["gjx16@GJXAIOU",[[1,8965,"language\n```\n"]],[8965,8965],[8965,8973]]],[1542797194044,["gjx16@GJXAIOU",[[-1,8965,"language"],[1,8973,"p"]],[8965,8973],[8966,8966]]],[1542797195634,["gjx16@GJXAIOU",[[1,8966,"ython"]],[8966,8966],[8971,8971]]],[1542797196203,["gjx16@GJXAIOU",[[1,8972,"\n"]],[8971,8971],[8972,8972]]],[1542797264229,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[1,8976,"\n"]],[8920,8920],[8977,8977]]],[1542797264229,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[-1,8976,"\n"]],[8977,8977],[8920,8920]]],[1542797210031,["gjx16@GJXAIOU",[[1,8972,"f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line)"]],[8972,8972],[9049,9049]]],[1542797220188,["gjx16@GJXAIOU",[[1,9048,",end = ``"]],[9048,9048],[9057,9057]]],[1542797224121,["gjx16@GJXAIOU",[[-1,9055,"``"]],[9057,9057],[9055,9055]]],[1542797226059,["gjx16@GJXAIOU",[[1,9055,"' '"]],[9055,9055],[9058,9058]]],[1542797235864,["gjx16@GJXAIOU",[[1,9065,"\n"]],[9063,9063],[9064,9064]]],[1542797236024,["gjx16@GJXAIOU",[[1,9066,"\n"]],[9064,9064],[9065,9065]]],[1542797237680,["gjx16@GJXAIOU",[[1,9065,"****"]],[9065,9065],[9067,9067]]],[1542797238973,["gjx16@GJXAIOU",[[1,9067,"wenjia"]],[9067,9067],[9073,9073]]],[1542797240190,["gjx16@GJXAIOU",[[-1,9067,"wenjia"]],[9073,9073],[9067,9067]]],[1542797247704,["gjx16@GJXAIOU",[[1,9067,"文件对象是可迭代的"]],[9067,9067],[9076,9076]]],[1542797384242,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9080," "]],[8920,8920],[9081,9081]]],[1542797384242,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9080," "]],[9081,9081],[8920,8920]]],[1542797326280,["gjx16@GJXAIOU",[[1,9080,"\n"]],[9078,9078],[9079,9079]]],[1542797326440,["gjx16@GJXAIOU",[[1,9081,"\n"]],[9079,9079],[9080,9080]]],[1542797326584,["gjx16@GJXAIOU",[[1,9082,"\n"]],[9080,9080],[9081,9081]]],[1542797326728,["gjx16@GJXAIOU",[[1,9083,"\n"]],[9081,9081],[9082,9082]]],[1542797326842,["gjx16@GJXAIOU",[[1,9084,"\n"]],[9082,9082],[9083,9083]]],[1542797326998,["gjx16@GJXAIOU",[[1,9085,"\n"]],[9083,9083],[9084,9084]]],[1542797345192,["gjx16@GJXAIOU",[[1,9084,"### 2.6.2 创建文件"]],[9084,9084],[9098,9098]]],[1542797345796,["gjx16@GJXAIOU",[[1,9100,"\n"]],[9098,9098],[9099,9099]]],[1542797346305,["gjx16@GJXAIOU",[[1,9101,"\n"]],[9099,9099],[9100,9100]]],[1542797640508,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9102," "]],[8920,8920],[9103,9103]]],[1542797640508,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9102," "]],[9103,9103],[8920,8920]]],[1542797634583,["gjx16@GJXAIOU",[[1,9099,"‘r’只读模式，必须打开一个已有的文件，且只能执行读操作。\n\n‘r+’读+追加模式，可读可写，与‘r’相同之处在于也是必须打开一个已有的文件，不同的是它可写可读，而且写与读不分先        后，即随时都可进行读与写。（写为追加在文件末尾）\n\n‘w’只写模式，打开即默认创建一个新的空文件，当然若打开的是已有文件，则清空文件，且只能执行写操作。\n\n‘w+’写读模式，打开创建新文件，因此需要先把内容写进去在读。即保证文件有内容通过移动光标来读自己想要的部分。\n\n‘a’追加模式，若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写（追加在后面），不能读。即追加写。\n\n‘a+’追加读写模式，打开文件方式同‘a’一样，写方式也和'a'一样，但是可以读。且是任意时刻读写。需要注意的是你若刚用‘a+’打开一个文件，则不能立即读，因为此时光标已经是文件末尾，除非你把光标移动到初始位置或任意非末尾的位置。\n--------------------- \n作者：风从北方来 \n来源：CSDN \n原文：https://blog.csdn.net/beifangdefengchuilai/article/details/79592454 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[9099,9099],[9653,9653]]],[1542797639160,["gjx16@GJXAIOU",[[-1,9514,"--------------------- \n作者：风从北方来 \n来源：CSDN \n原文：https://blog.csdn.net/beifangdefengchuilai/article/details/79592454 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[9514,9653],[9514,9514]]],[1542797700509,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9517," "]],[8920,8920],[9518,9518]]],[1542797700510,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9517," "]],[9518,9518],[8920,8920]]],[1542797641961,["gjx16@GJXAIOU",[[1,9517,"\n"]],[9514,9514],[9515,9515]]],[1542797642109,["gjx16@GJXAIOU",[[1,9518,"\n"]],[9515,9515],[9516,9516]]],[1542797650609,["gjx16@GJXAIOU",[[1,9519,"\n"]],[9516,9516],[9517,9517]]],[1542797650759,["gjx16@GJXAIOU",[[1,9520,"\n"]],[9517,9517],[9518,9518]]],[1542797650891,["gjx16@GJXAIOU",[[1,9521,"\n"]],[9518,9518],[9519,9519]]],[1542797651041,["gjx16@GJXAIOU",[[1,9522,"\n"]],[9519,9519],[9520,9520]]],[1542797660066,["gjx16@GJXAIOU",[[-1,9189,"       "],[1,9196,"       "],[1,9520,"### 2.6.3 使用with"]],[9520,9520],[9536,9536]]],[1542797660754,["gjx16@GJXAIOU",[[1,9539,"\n"]],[9536,9536],[9537,9537]]],[1542797820509,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9540," "]],[8920,8920],[9541,9541]]],[1542797820509,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9540," "]],[9541,9541],[8920,8920]]],[1542797771117,["gjx16@GJXAIOU",[[1,9537,"****"]],[9537,9537],[9539,9539]]],[1542797779527,["gjx16@GJXAIOU",[[1,9539,"原来使用文件的方法；"]],[9539,9539],[9549,9549]]],[1542797781326,["gjx16@GJXAIOU",[[1,9554,"\n"]],[9551,9551],[9552,9552]]],[1542797782998,["gjx16@GJXAIOU",[[1,9552,"```"]],[9552,9552],[9555,9555]]],[1542797783043,["gjx16@GJXAIOU",[[1,9555,"language\n```\n"]],[9555,9555],[9555,9563]]],[1542797784068,["gjx16@GJXAIOU",[[-1,9555,"language"],[1,9563,"p"]],[9555,9563],[9556,9556]]],[1542797784836,["gjx16@GJXAIOU",[[1,9556,"ython"]],[9556,9556],[9561,9561]]],[1542797785356,["gjx16@GJXAIOU",[[1,9562,"\n"]],[9561,9561],[9562,9562]]],[1542798300532,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9570," "]],[8920,8920],[9571,9571]]],[1542798300532,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9570," "]],[9571,9571],[8920,8920]]],[1542798265634,["gjx16@GJXAIOU",[[1,9562,"''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   with open(\"abc.txt\") as fn:\n    print(fn.read())"]],[9562,9562],[9773,9773]]],[1542798268209,["gjx16@GJXAIOU",[[-1,9562,"''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   with open(\"abc.txt\") as fn:\n    print(fn.read())"]],[9773,9773],[9562,9562]]],[1542798271859,["gjx16@GJXAIOU",[[1,9562,"'''\n使用with  p135\n'''\n\n#常用的使用文件方法：\n# fn = open(\"abc.txt\",\"a\") #打开文件\n# fn.write(\"python is the best\") #写入文件\n# fn.close()     #关闭文件\n\n\n#使用with进行操作，这时候就不需要使用close\n\nwith open(\"abc.txt\") as fn:\n    print(fn.read())\n"]],[9562,9562],[9770,9770]]],[1542798278586,["gjx16@GJXAIOU",[[-1,9537,"**原来使用文件的方法；**"]],[9537,9551],[9537,9537]]],[1542798282928,["gjx16@GJXAIOU",[[1,9761,"dang"]],[9761,9761],[9765,9765]]],[1542798284389,["gjx16@GJXAIOU",[[-1,9761,"dang"]],[9765,9765],[9761,9761]]],[1542798298083,["gjx16@GJXAIOU",[[1,9761,"当然程序中两个代码的作用是不一样的，"]],[9761,9761],[9779,9779]]],[1542798360531,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[1,9782," "]],[8920,8920],[9783,9783]]],[1542798360531,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[-1,9782," "]],[9783,9783],[8920,8920]]],[1542798304523,["gjx16@GJXAIOU",[[1,9781,"只是是翻译"]],[9781,9781],[9786,9786]]],[1542798305842,["gjx16@GJXAIOU",[[-1,9783,"是翻译"]],[9786,9786],[9783,9783]]],[1542798308411,["gjx16@GJXAIOU",[[1,9783,"释放"]],[9783,9783],[9785,9785]]],[1542798309002,["gjx16@GJXAIOU",[[-1,9783,"释放"]],[9785,9785],[9783,9783]]],[1542798317613,["gjx16@GJXAIOU",[[1,9783,"示范一下使用方法"]],[9783,9783],[9791,9791]]],[1542798318972,["gjx16@GJXAIOU",[[1,9794,"\n"]],[9791,9791],[9792,9792]]],[1542798660540,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[-1,9779,"\n\n"],[1,9781,"这里"],[1,9793,"\n\n "]],[8920,8920],[9796,9796]]],[1542798660540,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[1,9779,"\n\n"],[-1,9779,"这里"],[-1,9793,"\n\n "]],[9796,9796],[8920,8920]]],[1542798618361,["gjx16@GJXAIOU",[[1,9795,"\n"]],[9792,9792],[9793,9793]]],[1542798647460,["gjx16@GJXAIOU",[[1,9793,"### 2.6.3"]],[9793,9793],[9802,9802]]],[1542798647922,["gjx16@GJXAIOU",[[-1,9801,"3"]],[9802,9802],[9801,9801]]],[1542798655479,["gjx16@GJXAIOU",[[1,9801,"4 文件的状态"]],[9801,9801],[9808,9808]]],[1542798656332,["gjx16@GJXAIOU",[[1,9811,"\n"]],[9808,9808],[9809,9809]]],[1542798657204,["gjx16@GJXAIOU",[[1,9812,"\n"]],[9809,9809],[9810,9810]]],[1542798720548,[null,[[-1,8920,"\n"],[1,8921,"下"],[1,8953,"\n\n"],[-1,8954,"\n"],[-1,8960,"\n"],[-1,9064," "],[1,9065,"\n"],[-1,9779,"\n\n"],[1,9781,"这里"],[1,9811,"\n\n "]],[8920,8920],[9814,9814]]],[1542798720548,[null,[[1,8920,"\n"],[-1,8920,"下"],[-1,8953,"\n\n"],[1,8956,"\n"],[1,8961,"\n"],[1,9064," "],[-1,9064,"\n"],[1,9779,"\n\n"],[-1,9779,"这里"],[-1,9811,"\n\n "]],[9814,9814],[8920,8920]]],[1542798686567,["gjx16@GJXAIOU",[[1,9810,"可以获取问价的"]],[9810,9810],[9817,9817]]],[1542798688575,["gjx16@GJXAIOU",[[-1,9812,"获取问价的"]],[9817,9817],[9812,9812]]],[1542798698017,["gjx16@GJXAIOU",[[1,9812,"获取文件的创建日期、。"]],[9812,9812],[9823,9823]]],[1542798698835,["gjx16@GJXAIOU",[[-1,9822,"。"]],[9823,9823],[9822,9822]]],[1542798708227,["gjx16@GJXAIOU",[[1,9822,"修改日期的状态信息"]],[9822,9822],[9831,9831]]],[1542798708811,["gjx16@GJXAIOU",[[1,9834,"\n"]],[9831,9831],[9832,9832]]]],null,"gjx16@GJXAIOU"],["c887546c-c866-4b78-af37-2d2fbbfe16fa",1542799386198,"# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n### 2.4.4 并行迭代\n```pyhton\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n```\n程序运行结果：\n`<zip object at 0x0000026214FB9B48>`\n`[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]`\n`[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]`\n`[('name', 'age')]`\n`[('h',), ('e',), ('l',), ('l',), ('o',)]`\n`[('w',), ('o',), ('r',), ('l',), ('d',)]`\n`[3, 5, 8, 10, 13]`\n\n### 2.4.5 enumerate使用\n```python\n'''\nenumerate的使用；p123\n'''\n\n'''\n同时得到列表中元素的索引和元素 p123\n'''\n# 一般方法\nweek = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n\n#使用enumerate 内建函数\nfor (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n'''\n直接显示列表中的索引和元素  p124\n'''\nseasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n'''\n当原本的为字符串的时候，需要先转换为列表  p124\n'''\n\n#将字符串中部分字符进行替换\n\nraw = \"hello world ,you are a good good student .\"\nraw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n    if \"good\" in string:\n        raw_list[i] = \"best\"\n\nprint(raw_list)\n```\n程序运行结果：\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`[(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]`\n`[(1, 'spring'), (2, 'summer'), (3, 'fall'), (4, 'winter')] `\n`['hello', 'world', ',you', 'are', 'a', 'best', 'best', 'student', '.']`\n\n### 2.4.6 列表解析\n```python\n\n'''\n列表解析：p125\n'''\n\n#得到1-9的平方，放入列表并打印\n\noutlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到\noutlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n\n#删除列表中字符串前后的空格\nraw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)\n```\n程序运行结果：\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`['hello', 'lala', 'world']`\n\n\n\n\n## 2.5 while循环语句\n示例程序：\n```python\n\n'''\nwhile循环示例：P129\n'''\nimport  random\nnum = random.randint(1,100)\nguess = 0\n\nwhile True:\n    num_input = input(\"please input one interger that is in 1 to 100:\")\n    guess +=1\n    if not num_input.isdigit():#用来判断字符串是否全部由数字组成\n        print(\"please input interger.\")\n    elif int(num_input) < 0 or int(num_input) > 100:\n        print(\"please input number that is in 1 to 100:\")\n    else:\n        if num == int(num_input):\n            print(\"you are so smart\")\n            break\n        elif num > int(num_input):\n            print(\"the true num is bigger than you input\")\n        elif num < int(num_input):\n            print(\"the true num is smaller than you input\")\n        else:\n            print(\"There is something bad\")\n```\n\n### 2.5.2 break和continue \n\n**1.break：** 主要是在当前位置中断循环并且跳出循环体\n\n**continue：** 从当前位置（continue 位置）跳到循环体的最后一行的后面（不执行最后一行）\n\n==尽量在循环之前将条件做足，避免使用这两个在循环中跳来跳去==\n\n\n\n### 2.5.3 while....else\n例子：\n```python\n'''\nwhile ...else P130\n'''\n\ncount = 0\nwhile count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1\nelse:\n    print(count,\"is not less than 5\")\n```\n程序运行结果：\n`0 is less than 5`\n`1 is less than 5`\n`2 is less than 5`\n`3 is less than 5`\n`4 is less than 5`\n`5 is not less than 5`\n\n### 2.5.4 for ...else\n```python\n'''\nfor ...else  P131\n'''\nfrom math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break                            #这个break作用是？\n    else:\n        print(\"nothing\")\n```\n程序运行结果：\n`nothing`\n`nothing`\n`nothing`\n`9.0 is the sqrt of 81`\n\n\n\n## 2.6  文件\n\n### 2.6.1 读文件\n\n```python\n'''\n读文件：p131\n'''\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line)\n\n```\n程序运行结果：\n`你好世界`\n\n`12345`\n\n`best`\n#因为每行的最后都有`\\n`,同时print在默认情况下，打印完line的对象之后会增加一个`\\n`,因此中间会空一行；\n\n上面程序改进\n```python\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line,end = ' ')\n```\n\n**文件对象是可迭代的**\n\n\n\n\n\n### 2.6.2 创建文件\n‘r’只读模式，必须打开一个已有的文件，且只能执行读操作。\n\n‘r+’读+追加模式，可读可写，与‘r’相同之处在于也是必须打开一个已有的文件，不同的是它可写可读，而且写与读不分先        后，即随时都可进行读与写。（写为追加在文件末尾）\n\n‘w’只写模式，打开即默认创建一个新的空文件，当然若打开的是已有文件，则清空文件，且只能执行写操作。\n\n‘w+’写读模式，打开创建新文件，因此需要先把内容写进去在读。即保证文件有内容通过移动光标来读自己想要的部分。\n\n‘a’追加模式，若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写（追加在后面），不能读。即追加写。\n\n‘a+’追加读写模式，打开文件方式同‘a’一样，写方式也和'a'一样，但是可以读。且是任意时刻读写。需要注意的是你若刚用‘a+’打开一个文件，则不能立即读，因为此时光标已经是文件末尾，除非你把光标移动到初始位置或任意非末尾的位置。\n\n\n\n\n\n\n### 2.6.3 使用with\n\n```python\n'''\n使用with  p135\n'''\n\n#常用的使用文件方法：\n# fn = open(\"abc.txt\",\"a\") #打开文件\n# fn.write(\"python is the best\") #写入文件\n# fn.close()     #关闭文件\n\n\n#使用with进行操作，这时候就不需要使用close\n\nwith open(\"abc.txt\") as fn:\n    print(fn.read())\n\n```\n当然程序中两个代码的作用是不一样的，这里只是示范一下使用方法\n\n### 2.6.4 文件的状态\n\n可以获取文件的创建日期、修改日期的状态信息\n\n\n\n \n\n\n\n\n  \n\n\n",[[1542799382701,["gjx16@GJXAIOU",[[1,9832,"···"]],[9832,9832],[9835,9835]]],[1542799384341,["gjx16@GJXAIOU",[[-1,9832,"···"]],[9835,9835],[9832,9832]]],[1542799386642,["gjx16@GJXAIOU",[[1,9835,"language\n```\n"]],[9835,9835],[9835,9843]]],[1542799388409,["gjx16@GJXAIOU",[[-1,9835,"language"],[1,9843,"p"]],[9835,9843],[9836,9836]]],[1542799389229,["gjx16@GJXAIOU",[[1,9836,"ython"]],[9836,9836],[9841,9841]]],[1542799389857,["gjx16@GJXAIOU",[[1,9842,"\n"]],[9841,9841],[9842,9842]]],[1542799392759,["gjx16@GJXAIOU",[[1,9843,"'''\n文件的状态：p136\n'''\n\nimport os\nfile_state = os.stat(\"abc.txt\")\nprint(file_state)\n\n"]],[9842,9842],[9923,9923]]],[1542799401789,["gjx16@GJXAIOU",[[1,9931,"\n"]],[9927,9927],[9928,9928]]],[1542799408220,["gjx16@GJXAIOU",[[1,9928,"程序运行结果；"]],[9928,9928],[9935,9935]]],[1542799408629,["gjx16@GJXAIOU",[[1,9939,"\n"]],[9935,9935],[9936,9936]]],[1542799409902,["gjx16@GJXAIOU",[[1,9936,"os.stat_result(st_mode=33206, st_ino=562949953675316, st_dev=1143006259, st_nlink=1, st_uid=0, st_gid=0, st_size=18, st_atime=1542798239, st_mtime=1542798211, st_ctime=1542798211)"]],[9936,9936],[10115,10115]]],[1542799412245,["gjx16@GJXAIOU",[[1,9936,"·"]],[9936,9936],[9937,9937]]],[1542799413542,["gjx16@GJXAIOU",[[-1,9936,"·"]],[9937,9937],[9936,9936]]],[1542799414003,["gjx16@GJXAIOU",[[1,9936,"`"]],[9936,9936],[9937,9937]]],[1542799415633,["gjx16@GJXAIOU",[[1,10116,"`"]],[10116,10116],[10117,10117]]],[1542799419625,["gjx16@GJXAIOU",[[1,10121,"\n"]],[10117,10117],[10118,10118]]],[1542799420893,["gjx16@GJXAIOU",[[1,10118,"xian"]],[10118,10118],[10122,10122]]],[1542799422500,["gjx16@GJXAIOU",[[-1,10118,"xian"]],[10122,10122],[10118,10118]]],[1542799427217,["gjx16@GJXAIOU",[[1,10118,"显示的接通过"]],[10118,10118],[10124,10124]]],[1542799428012,["gjx16@GJXAIOU",[[-1,10121,"接通过"]],[10124,10124],[10121,10121]]],[1542799431472,["gjx16@GJXAIOU",[[1,10121,"结果看不懂"]],[10121,10121],[10126,10126]]],[1542799431952,["gjx16@GJXAIOU",[[1,10130,"\n"]],[10126,10126],[10127,10127]]],[1542799438426,["gjx16@GJXAIOU",[[1,10127,"换一种显示方式："]],[10127,10127],[10135,10135]]],[1542799438687,["gjx16@GJXAIOU",[[1,10139,"\n"]],[10135,10135],[10136,10136]]],[1542799441616,["gjx16@GJXAIOU",[[1,10136,"```"]],[10136,10136],[10139,10139]]],[1542799441665,["gjx16@GJXAIOU",[[1,10139,"language\n```\n"]],[10139,10139],[10139,10147]]],[1542799443066,["gjx16@GJXAIOU",[[-1,10139,"language"],[1,10147,"p"]],[10139,10147],[10140,10140]]],[1542799443883,["gjx16@GJXAIOU",[[1,10140,"yuthon"]],[10140,10140],[10146,10146]]],[1542799444856,["gjx16@GJXAIOU",[[-1,10143,"hon"]],[10146,10146],[10143,10143]]],[1542799505106,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[1,10150,"\n\n "]],[9832,9832],[10153,10153]]],[1542799505106,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[-1,10150,"\n\n "]],[10153,10153],[9832,9832]]],[1542799445484,["gjx16@GJXAIOU",[[-1,10141,"ut"]],[10143,10143],[10141,10141]]],[1542799446725,["gjx16@GJXAIOU",[[1,10141,"thon"]],[10141,10141],[10145,10145]]],[1542799447286,["gjx16@GJXAIOU",[[1,10146,"\n"]],[10145,10145],[10146,10146]]],[1542799805076,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[1,10153,"\n\n "]],[9832,9832],[10156,10156]]],[1542799805076,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[-1,10153,"\n\n "]],[10156,10156],[9832,9832]]],[1542799762250,["gjx16@GJXAIOU",[[1,10146,"'''\n换种时间显示方式：\n'''\nimport os\nfile_state = os.stat(\"abc.txt\")\nimport time\nstate_file = time.localtime(file_state.st_ctime)\nprint(state_file)"]],[10146,10146],[10284,10284]]],[1542799765053,["gjx16@GJXAIOU",[[1,10293,"\n"]],[10288,10288],[10289,10289]]],[1542799765977,["gjx16@GJXAIOU",[[1,10289,"c"]],[10289,10289],[10290,10290]]],[1542799766605,["gjx16@GJXAIOU",[[-1,10289,"c"]],[10290,10290],[10289,10289]]],[1542799787323,["gjx16@GJXAIOU",[[1,10289,"程序运行结果："]],[10289,10289],[10296,10296]]],[1542799787804,["gjx16@GJXAIOU",[[1,10301,"\n"]],[10296,10296],[10297,10297]]],[1542799798942,["gjx16@GJXAIOU",[[1,10297,"time.struct_time(tm_year=2018, tm_mon=11, tm_mday=21, tm_hour=19, tm_min=3, tm_sec=31, tm_wday=2, tm_yday=325, tm_isdst=0)"]],[10297,10297],[10419,10419]]],[1542799802129,["gjx16@GJXAIOU",[[1,10297,"·"]],[10297,10297],[10298,10298]]],[1542799803510,["gjx16@GJXAIOU",[[-1,10297,"·"]],[10298,10298],[10297,10297]]],[1542799804065,["gjx16@GJXAIOU",[[1,10297,"`"]],[10297,10297],[10298,10298]]],[1542799865109,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[1,10423,"\n\n "]],[9832,9832],[10426,10426]]],[1542799865109,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[-1,10423,"\n\n "]],[10426,10426],[9832,9832]]],[1542799809569,["gjx16@GJXAIOU",[[1,10420,"`"]],[10420,10420],[10421,10421]]],[1542799846564,["gjx16@GJXAIOU",[[1,10424,"### 2.6.5 reaf"]],[10424,10424],[10438,10438]]],[1542799847377,["gjx16@GJXAIOU",[[-1,10437,"f"]],[10438,10438],[10437,10437]]],[1542799859226,["gjx16@GJXAIOU",[[1,10437,"d /readline / real"]],[10437,10437],[10455,10455]]],[1542799859640,["gjx16@GJXAIOU",[[-1,10454,"l"]],[10455,10455],[10454,10454]]],[1542799860403,["gjx16@GJXAIOU",[[1,10454,"sli"]],[10454,10454],[10457,10457]]],[1542799861132,["gjx16@GJXAIOU",[[-1,10454,"sli"]],[10457,10457],[10454,10454]]],[1542799862206,["gjx16@GJXAIOU",[[1,10454,"dlin"]],[10454,10454],[10458,10458]]],[1542799862818,["gjx16@GJXAIOU",[[-1,10455,"lin"]],[10458,10458],[10455,10455]]],[1542799864907,["gjx16@GJXAIOU",[[1,10455,"line"]],[10455,10455],[10459,10459]]],[1542799925098,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[1,10459,"\n\n "]],[9832,9832],[10462,10462]]],[1542799925098,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[-1,10459,"\n\n "]],[10462,10462],[9832,9832]]],[1542799866588,["gjx16@GJXAIOU",[[1,10460," "]],[10460,10460],[10461,10461]]],[1542799867069,["gjx16@GJXAIOU",[[1,10463,"\n"]],[10461,10461],[10462,10462]]],[1542799873882,["gjx16@GJXAIOU",[[1,10462,"- read :"]],[10462,10462],[10470,10470]]],[1542799875748,["gjx16@GJXAIOU",[[-1,10464,"read :"]],[10470,10470],[10464,10464]]],[1542799877085,["gjx16@GJXAIOU",[[1,10464,"****"]],[10464,10464],[10466,10466]]],[1542799880057,["gjx16@GJXAIOU",[[1,10466,"read:"]],[10466,10466],[10471,10471]]],[1542799881319,["gjx16@GJXAIOU",[[1,10462,"  "]],[10471,10471],[10473,10473]]],[1542799886678,["gjx16@GJXAIOU",[[-1,10462,"  "]],[10464,10464],[10462,10462]]],[1542799887741,["gjx16@GJXAIOU",[[1,10462,"\n"]],[10462,10462],[10463,10463]]],[1542799892443,["gjx16@GJXAIOU",[[1,10474," "]],[10474,10474],[10475,10475]]],[1542800045107,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10475,"\n\n \n"]],[9832,9832],[10479,10479]]],[1542800045107,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10475,"\n\n \n"]],[10479,10479],[9832,9832]]],[1542800004198,["gjx16@GJXAIOU",[[1,10475,"wan"]],[10475,10475],[10478,10478]]],[1542800004972,["gjx16@GJXAIOU",[[-1,10475,"wan"]],[10478,10478],[10475,10475]]],[1542800017715,["gjx16@GJXAIOU",[[1,10475,"完整的表达方式：reas"]],[10475,10475],[10487,10487]]],[1542800018287,["gjx16@GJXAIOU",[[-1,10486,"s"]],[10487,10487],[10486,10486]]],[1542800019451,["gjx16@GJXAIOU",[[1,10486,"d()"]],[10486,10486],[10489,10489]]],[1542800021318,["gjx16@GJXAIOU",[[1,10488,"size"]],[10488,10488],[10492,10492]]],[1542800024190,["gjx16@GJXAIOU",[[1,10493," ,zhi"]],[10493,10493],[10498,10498]]],[1542800025046,["gjx16@GJXAIOU",[[-1,10495,"zhi"]],[10498,10498],[10495,10495]]],[1542800026248,["gjx16@GJXAIOU",[[1,10495,"值"]],[10495,10495],[10496,10496]]],[1542800026880,["gjx16@GJXAIOU",[[-1,10495,"值"]],[10496,10496],[10495,10495]]],[1542800044259,["gjx16@GJXAIOU",[[1,10495,"指一次性读取文件中sizeof"]],[10495,10495],[10510,10510]]],[1542800044841,["gjx16@GJXAIOU",[[-1,10509,"f"]],[10510,10510],[10509,10509]]],[1542800105107,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10509,"\n\n \n"]],[9832,9832],[10513,10513]]],[1542800105107,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10509,"\n\n \n"]],[10513,10513],[9832,9832]]],[1542800045480,["gjx16@GJXAIOU",[[-1,10508,"o"]],[10509,10509],[10508,10508]]],[1542800060573,["gjx16@GJXAIOU",[[1,10508,"个字符并且返回一个字符串"]],[10508,10508],[10520,10520]]],[1542800062296,["gjx16@GJXAIOU",[[1,10521,"- \n"]],[10520,10520],[10523,10523]]],[1542800165111,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10523,"\n\n \n"]],[9832,9832],[10527,10527]]],[1542800165111,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10523,"\n\n \n"]],[10527,10527],[9832,9832]]],[1542800157967,["gjx16@GJXAIOU",[[1,10520,"，如果省略的话则读取文件对象中的字符"]],[10520,10520],[10538,10538]]],[1542800225111,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10541,"\n\n \n"]],[9832,9832],[10545,10545]]],[1542800225111,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10541,"\n\n \n"]],[10545,10545],[9832,9832]]],[1542800205774,["gjx16@GJXAIOU",[[1,10538,"直到EOF，并且依然返回字符串"]],[10538,10538],[10553,10553]]],[1542800285109,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10556,"\n\n \n"]],[9832,9832],[10560,10560]]],[1542800285109,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10556,"\n\n \n"]],[10560,10560],[9832,9832]]],[1542800240762,["gjx16@GJXAIOU",[[1,10556,"readline "]],[10556,10556],[10565,10565]]],[1542800242920,["gjx16@GJXAIOU",[[-1,10556,"readline "]],[10565,10565],[10556,10556]]],[1542800244879,["gjx16@GJXAIOU",[[1,10556,"****"]],[10556,10556],[10558,10558]]],[1542800250130,["gjx16@GJXAIOU",[[1,10558,"readline:"]],[10558,10558],[10567,10567]]],[1542800251531,["gjx16@GJXAIOU",[[1,10554,"  "]],[10567,10567],[10569,10569]]],[1542800252239,["gjx16@GJXAIOU",[[-1,10568,":"]],[10569,10569],[10568,10568]]],[1542800253634,["gjx16@GJXAIOU",[[1,10568,":"]],[10568,10568],[10569,10569]]],[1542800258030,["gjx16@GJXAIOU",[[-1,10554,"  "]],[10556,10556],[10554,10554]]],[1542800265539,["gjx16@GJXAIOU",[[1,10569," mei"]],[10569,10569],[10573,10573]]],[1542800266646,["gjx16@GJXAIOU",[[-1,10570,"mei"]],[10573,10573],[10570,10570]]],[1542800279502,["gjx16@GJXAIOU",[[1,10570,"每次执行文件名."]],[10570,10570],[10578,10578]]],[1542800281873,["gjx16@GJXAIOU",[[-1,10572,"执行文件名."]],[10578,10578],[10572,10572]]],[1542800282629,["gjx16@GJXAIOU",[[1,10572,"zhix"]],[10572,10572],[10576,10576]]],[1542800283769,["gjx16@GJXAIOU",[[-1,10572,"zhix"]],[10576,10576],[10572,10572]]],[1542800345107,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10572,"\n\n \n"]],[9832,9832],[10576,10576]]],[1542800345107,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10572,"\n\n \n"]],[10576,10576],[9832,9832]]],[1542800288323,["gjx16@GJXAIOU",[[1,10572,"执行``"]],[10572,10572],[10576,10576]]],[1542800293163,["gjx16@GJXAIOU",[[1,10575,"w"]],[10575,10575],[10576,10576]]],[1542800293811,["gjx16@GJXAIOU",[[-1,10575,"w"]],[10576,10576],[10575,10575]]],[1542800307463,["gjx16@GJXAIOU",[[1,10575,"文件名.readlines()"]],[10575,10575],[10590,10590]]],[1542800310916,["gjx16@GJXAIOU",[[1,10591," ,zhi"]],[10591,10591],[10596,10596]]],[1542800312001,["gjx16@GJXAIOU",[[-1,10593,"zhi"]],[10596,10596],[10593,10593]]],[1542800335930,["gjx16@GJXAIOU",[[1,10593,"只读取一行，直到最后一行，最后林奕含"]],[10593,10593],[10611,10611]]],[1542800336902,["gjx16@GJXAIOU",[[-1,10608,"林奕含"]],[10611,10611],[10608,10608]]],[1542800341739,["gjx16@GJXAIOU",[[1,10608,"一行之后海之星"]],[10608,10608],[10615,10615]]],[1542800342701,["gjx16@GJXAIOU",[[-1,10612,"海之星"]],[10615,10615],[10612,10612]]],[1542800343865,["gjx16@GJXAIOU",[[1,10612,"还"]],[10612,10612],[10613,10613]]],[1542800405113,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10613,"\n\n \n"]],[9832,9832],[10617,10617]]],[1542800405113,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10613,"\n\n \n"]],[10617,10617],[9832,9832]]],[1542800358042,["gjx16@GJXAIOU",[[1,10613,"执行的话会返回空字符串，但是不报错"]],[10613,10613],[10630,10630]]],[1542800358811,["gjx16@GJXAIOU",[[1,10631,"- \n"]],[10630,10630],[10633,10633]]],[1542800362824,["gjx16@GJXAIOU",[[1,10633,"****"]],[10633,10633],[10635,10635]]],[1542800371701,["gjx16@GJXAIOU",[[1,10635,"readlines："]],[10635,10635],[10645,10645]]],[1542800383385,["gjx16@GJXAIOU",[[1,10647," 他的"]],[10647,10647],[10650,10650]]],[1542800385233,["gjx16@GJXAIOU",[[-1,10649,"的"]],[10650,10650],[10649,10649]]],[1542800465111,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[1,10649,"\n\n \n"]],[9832,9832],[10653,10653]]],[1542800465111,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[-1,10649,"\n\n \n"]],[10653,10653],[9832,9832]]],[1542800411951,["gjx16@GJXAIOU",[[-1,10650,"\n"]],[10649,10650],[10649,10649]]],[1542800412454,["gjx16@GJXAIOU",[[-1,10648,"他"]],[10649,10649],[10648,10648]]],[1542800437362,["gjx16@GJXAIOU",[[1,10648,"它的作用是将文件中的各行读取出来，最后结果放在一个列表中国"]],[10648,10648],[10677,10677]]],[1542800439016,["gjx16@GJXAIOU",[[-1,10676,"国"]],[10677,10677],[10676,10676]]],[1542800441841,["gjx16@GJXAIOU",[[1,10676,"返回"]],[10676,10676],[10678,10678]]],[1542800444201,["gjx16@GJXAIOU",[[1,10679,"- \n"]],[10678,10678],[10681,10681]]],[1542800444352,["gjx16@GJXAIOU",[[-1,10679,"- "]],[10681,10681],[10680,10680]]],[1542800444538,["gjx16@GJXAIOU",[[-1,10680," "],[1,10681,"\n"]],[10680,10680],[10681,10681]]],[1542800444719,["gjx16@GJXAIOU",[[1,10686,"\n"]],[10681,10681],[10682,10682]]],[1542800445257,["gjx16@GJXAIOU",[[1,10687,"\n"]],[10682,10682],[10683,10683]]],[1542800457675,["gjx16@GJXAIOU",[[1,10683,"### 2.6.6 读很大的文件"]],[10683,10683],[10699,10699]]],[1542800458648,["gjx16@GJXAIOU",[[1,10704,"\n"]],[10699,10699],[10700,10700]]],[1542800463457,["gjx16@GJXAIOU",[[1,10700,"使用"]],[10700,10700],[10702,10702]]],[1542800525115,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10705,"\n\n  "]],[9832,9832],[10709,10709]]],[1542800525115,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10705,"\n\n  "]],[10709,10709],[9832,9832]]],[1542800473033,["gjx16@GJXAIOU",[[1,10702,"fileinput 木块"]],[10702,10702],[10714,10714]]],[1542800474551,["gjx16@GJXAIOU",[[-1,10711," 木块"]],[10714,10714],[10711,10711]]],[1542800485240,["gjx16@GJXAIOU",[[1,10711,"模块，抵用"]],[10711,10711],[10716,10716]]],[1542800485762,["gjx16@GJXAIOU",[[-1,10714,"抵用"]],[10716,10716],[10714,10714]]],[1542800491348,["gjx16@GJXAIOU",[[1,10714,"使用方式如下："]],[10714,10714],[10721,10721]]],[1542800491708,["gjx16@GJXAIOU",[[1,10726,"\n"]],[10721,10721],[10722,10722]]],[1542800765120,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10725,"\n\n  "]],[9832,9832],[10729,10729]]],[1542800765120,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10725,"\n\n  "]],[10729,10729],[9832,9832]]],[1542800758476,["gjx16@GJXAIOU",[[1,10722,"```"]],[10722,10722],[10725,10725]]],[1542800758546,["gjx16@GJXAIOU",[[1,10725,"language\n```\n"]],[10725,10725],[10725,10733]]],[1542800759914,["gjx16@GJXAIOU",[[-1,10725,"language"],[1,10733,"p"]],[10725,10733],[10726,10726]]],[1542800760658,["gjx16@GJXAIOU",[[1,10726,"ython"]],[10726,10726],[10731,10731]]],[1542800761890,["gjx16@GJXAIOU",[[1,10732,"\n"]],[10731,10731],[10732,10732]]],[1542800825115,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10740,"\n\n  "]],[9832,9832],[10744,10744]]],[1542800825115,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10740,"\n\n  "]],[10744,10744],[9832,9832]]],[1542800765918,["gjx16@GJXAIOU",[[1,10732,"'''\n使用fileinput 模块进行大文件的读取\n'''\nimport fileinput\nfor line in fileinput.input(\"lianxi.txt\"):\n    print(line,end = \" \")"]],[10732,10732],[10848,10848]]],[1542800770023,["gjx16@GJXAIOU",[[1,10858,"\n"]],[10852,10852],[10853,10853]]],[1542800771383,["gjx16@GJXAIOU",[[1,10853,"cheng"]],[10853,10853],[10858,10858]]],[1542800772702,["gjx16@GJXAIOU",[[-1,10853,"cheng"]],[10858,10858],[10853,10853]]],[1542800794269,["gjx16@GJXAIOU",[[1,10853,"程序运行结果：防止运行时可以的"]],[10853,10853],[10868,10868]]],[1542800796124,["gjx16@GJXAIOU",[[1,10874,"\n"]],[10868,10868],[10869,10869]]],[1542800796271,["gjx16@GJXAIOU",[[1,10875,"\n"]],[10869,10869],[10870,10870]]],[1542800796390,["gjx16@GJXAIOU",[[1,10876,"\n"]],[10870,10870],[10871,10871]]],[1542800885124,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10875,"\n\n  "]],[9832,9832],[10879,10879]]],[1542800885124,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10875,"\n\n  "]],[10879,10879],[9832,9832]]],[1542800853892,["gjx16@GJXAIOU",[[1,10871,"### 2.6.7 seek"]],[10871,10871],[10885,10885]]],[1542800854587,["gjx16@GJXAIOU",[[1,10891,"\n"]],[10885,10885],[10886,10886]]],[1542800855585,["gjx16@GJXAIOU",[[1,10892,"\n"]],[10886,10886],[10887,10887]]],[1542800945119,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10891,"\n\n  "]],[9832,9832],[10895,10895]]],[1542800945119,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10891,"\n\n  "]],[10895,10895],[9832,9832]]],[1542800890256,["gjx16@GJXAIOU",[[-1,10892,"\n"]],[10887,10887],[10886,10886]]],[1542800903484,["gjx16@GJXAIOU",[[1,10886,"首先在读取文件的时候，之后只能"]],[10886,10886],[10901,10901]]],[1542800904624,["gjx16@GJXAIOU",[[-1,10897,"之后只能"]],[10901,10901],[10897,10897]]],[1542800936321,["gjx16@GJXAIOU",[[1,10897,"指针随之运动，当读取结束的时候，指针就移动到相应的位置了"]],[10897,10897],[10925,10925]]],[1542801005125,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10929,"\n\n  "]],[9832,9832],[10933,10933]]],[1542801005125,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10929,"\n\n  "]],[10933,10933],[9832,9832]]],[1542800956513,["gjx16@GJXAIOU",[[1,10931,"\n"]],[10925,10925],[10926,10926]]],[1542800974520,["gjx16@GJXAIOU",[[1,10926,"例如：文件f.txt中内容如下；"]],[10926,10926],[10942,10942]]],[1542800974850,["gjx16@GJXAIOU",[[1,10948,"\n"]],[10942,10942],[10943,10943]]],[1542800979546,["gjx16@GJXAIOU",[[1,10943," 有"]],[10943,10943],[10945,10945]]],[1542800980115,["gjx16@GJXAIOU",[[-1,10944,"有"]],[10945,10945],[10944,10944]]],[1542800987482,["gjx16@GJXAIOU",[[1,10944,"you raise me up"]],[10944,10944],[10959,10959]]],[1542800989633,["gjx16@GJXAIOU",[[1,10960," \n"]],[10959,10959],[10961,10961]]],[1542800998655,["gjx16@GJXAIOU",[[1,10961,"when i an "]],[10961,10961],[10971,10971]]],[1542800999475,["gjx16@GJXAIOU",[[-1,10969,"n "]],[10971,10971],[10969,10969]]],[1542801003047,["gjx16@GJXAIOU",[[1,10969,"m down"]],[10969,10969],[10975,10975]]],[1542801065119,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,10979,"\n\n  "]],[9832,9832],[10983,10983]]],[1542801065119,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,10979,"\n\n  "]],[10983,10983],[9832,9832]]],[1542801006674,["gjx16@GJXAIOU",[[1,10976," \n"]],[10975,10975],[10977,10977]]],[1542801011432,["gjx16@GJXAIOU",[[1,10977,"please hel"]],[10977,10977],[10987,10987]]],[1542801011968,["gjx16@GJXAIOU",[[-1,10986,"l"]],[10987,10987],[10986,10986]]],[1542801014129,["gjx16@GJXAIOU",[[1,10986,"lp me "]],[10986,10986],[10992,10992]]],[1542801014768,["gjx16@GJXAIOU",[[-1,10991," "]],[10992,10992],[10991,10991]]],[1542801031699,["gjx16@GJXAIOU",[[1,10992," \n"]],[10991,10991],[10993,10993]]],[1542801036422,["gjx16@GJXAIOU",[[1,10993,"lalalalala"]],[10993,10993],[11003,11003]]],[1542801037936,["gjx16@GJXAIOU",[[1,11004," \n"]],[11003,11003],[11005,11005]]],[1542801038801,["gjx16@GJXAIOU",[[-1,11004," "],[1,11005,"\n"]],[11005,11005],[11005,11005]]],[1542801040850,["gjx16@GJXAIOU",[[1,11005,"··"]],[11005,11005],[11007,11007]]],[1542801042130,["gjx16@GJXAIOU",[[-1,11005,"··"]],[11007,11007],[11005,11005]]],[1542801042536,["gjx16@GJXAIOU",[[1,11011,"\n"]],[11005,11005],[11006,11006]]],[1542801043016,["gjx16@GJXAIOU",[[1,11006,"··"]],[11006,11006],[11008,11008]]],[1542801043739,["gjx16@GJXAIOU",[[-1,11006,"··"]],[11008,11008],[11006,11006]]],[1542801043922,["gjx16@GJXAIOU",[[-1,11011,"\n"]],[11006,11006],[11005,11005]]],[1542801045559,["gjx16@GJXAIOU",[[1,11005,"```"]],[11005,11005],[11008,11008]]],[1542801045608,["gjx16@GJXAIOU",[[1,11008,"language\n```\n"]],[11008,11008],[11008,11016]]],[1542801047179,["gjx16@GJXAIOU",[[-1,11008,"language"],[1,11016,"p"]],[11008,11016],[11009,11009]]],[1542801048328,["gjx16@GJXAIOU",[[1,11009,"yutho"]],[11009,11009],[11014,11014]]],[1542801049594,["gjx16@GJXAIOU",[[-1,11009,"yutho"]],[11014,11014],[11009,11009]]],[1542801052110,["gjx16@GJXAIOU",[[1,11009,"ython"]],[11009,11009],[11014,11014]]],[1542801052700,["gjx16@GJXAIOU",[[1,11015,"\n"]],[11014,11014],[11015,11015]]],[1542803286899,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11024,"\n\n  "]],[9832,9832],[11028,11028]]],[1542803286899,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11024,"\n\n  "]],[11028,11028],[9832,9832]]],[1542803260723,["gjx16@GJXAIOU",[[1,11026,"\n"]],[11021,11021],[11022,11022]]],[1542803260868,["gjx16@GJXAIOU",[[1,11027,"\n"]],[11022,11022],[11023,11023]]],[1542803526916,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11026,"\n\n  "]],[9832,9832],[11030,11030]]],[1542803526916,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11026,"\n\n  "]],[11030,11030],[9832,9832]]],[1542803505608,["gjx16@GJXAIOU",[[1,11028,"\n"]],[11021,11021],[11022,11022]]],[1542803505770,["gjx16@GJXAIOU",[[1,11029,"\n"]],[11022,11022],[11023,11023]]],[1542803507361,["gjx16@GJXAIOU",[[1,11023,"#3 "]],[11023,11023],[11026,11026]]],[1542803508095,["gjx16@GJXAIOU",[[-1,11024,"3 "]],[11026,11026],[11024,11024]]],[1542803514327,["gjx16@GJXAIOU",[[1,11024,"# 2.7 chushi"]],[11024,11024],[11036,11036]]],[1542803515966,["gjx16@GJXAIOU",[[-1,11030,"chushi"]],[11036,11036],[11030,11030]]],[1542803586923,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11035,"\n\n  "]],[9832,9832],[11039,11039]]],[1542803586923,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11035,"\n\n  "]],[11039,11039],[9832,9832]]],[1542803528928,["gjx16@GJXAIOU",[[1,11030,"初识迭代"]],[11030,11030],[11034,11034]]],[1542803529811,["gjx16@GJXAIOU",[[1,11041,"\n"]],[11034,11034],[11035,11035]]],[1542803529957,["gjx16@GJXAIOU",[[1,11042,"\n"]],[11035,11035],[11036,11036]]],[1542803541224,["gjx16@GJXAIOU",[[1,11036,"- ****"]],[11036,11036],[11040,11040]]],[1542803543860,["gjx16@GJXAIOU",[[1,11040,"玄幻"]],[11040,11040],[11042,11042]]],[1542803544451,["gjx16@GJXAIOU",[[-1,11040,"玄幻"]],[11042,11042],[11040,11040]]],[1542803546539,["gjx16@GJXAIOU",[[1,11040,"循环："]],[11040,11040],[11043,11043]]],[1542803552374,["gjx16@GJXAIOU",[[1,11045," 只是"]],[11045,11045],[11048,11048]]],[1542803553045,["gjx16@GJXAIOU",[[-1,11046,"只是"]],[11048,11048],[11046,11046]]],[1542803568726,["gjx16@GJXAIOU",[[1,11046,"指是在满足家条件的"]],[11046,11046],[11055,11055]]],[1542803571789,["gjx16@GJXAIOU",[[-1,11051,"家条件的"]],[11055,11055],[11051,11051]]],[1542803573396,["gjx16@GJXAIOU",[[1,11051,"提哦啊见"]],[11051,11051],[11055,11055]]],[1542803574414,["gjx16@GJXAIOU",[[-1,11051,"提哦啊见"]],[11055,11055],[11051,11051]]],[1542803584168,["gjx16@GJXAIOU",[[1,11051,"条件的情况下，重复指向"]],[11051,11051],[11062,11062]]],[1542803646907,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11067,"\n\n  "]],[9832,9832],[11071,11071]]],[1542803646907,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11067,"\n\n  "]],[11071,11071],[9832,9832]]],[1542803589143,["gjx16@GJXAIOU",[[1,11062,"同一段代码"]],[11062,11062],[11067,11067]]],[1542803592736,["gjx16@GJXAIOU",[[-1,11060,"指向"]],[11062,11062],[11060,11060]]],[1542803594803,["gjx16@GJXAIOU",[[1,11060,"执行"]],[11060,11060],[11062,11062]]],[1542803602710,["gjx16@GJXAIOU",[[1,11067,"，如while语句"]],[11067,11067],[11076,11076]]],[1542803706963,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11081,"\n\n  "]],[9832,9832],[11085,11085]]],[1542803706963,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11081,"\n\n  "]],[11085,11085],[9832,9832]]],[1542803687154,["gjx16@GJXAIOU",[[1,11077,"- \n"]],[11076,11076],[11079,11079]]],[1542803689938,["gjx16@GJXAIOU",[[1,11079,"****"]],[11079,11079],[11081,11081]]],[1542803693069,["gjx16@GJXAIOU",[[1,11081,"迭代；"]],[11081,11081],[11084,11084]]],[1542803694790,["gjx16@GJXAIOU",[[-1,11083,"；"]],[11084,11084],[11083,11083]]],[1542803695326,["gjx16@GJXAIOU",[[1,11083,"："]],[11083,11083],[11084,11084]]],[1542803705971,["gjx16@GJXAIOU",[[1,11086," 指的是按照"]],[11086,11086],[11092,11092]]],[1542803766910,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11097,"\n\n  "]],[9832,9832],[11101,11101]]],[1542803766910,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11097,"\n\n  "]],[11101,11101],[9832,9832]]],[1542803721876,["gjx16@GJXAIOU",[[1,11092,"某种顺序逐个访问对象（）"]],[11092,11092],[11104,11104]]],[1542803730736,["gjx16@GJXAIOU",[[1,11103,"如列表"]],[11103,11103],[11106,11106]]],[1542803946916,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11112,"\n\n  "]],[9832,9832],[11116,11116]]],[1542803946916,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11112,"\n\n  "]],[11116,11116],[9832,9832]]],[1542803904163,["gjx16@GJXAIOU",[[1,11107,"中的每一句，如foryuj"]],[11107,11107],[11120,11120]]],[1542803905201,["gjx16@GJXAIOU",[[-1,11116,"ryuj"]],[11120,11120],[11116,11116]]],[1542803907891,["gjx16@GJXAIOU",[[1,11116,"r语句"]],[11116,11116],[11119,11119]]],[1542804066932,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11124,"\n\n  "]],[9832,9832],[11128,11128]]],[1542804066932,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11124,"\n\n  "]],[11128,11128],[9832,9832]]],[1542804037517,["gjx16@GJXAIOU",[[1,11015,"'''\n使用seek   \n'''\n\nf = open(\"f.txt\",\"rb\")\nprint(f.readline(),end = \" \")\nprint(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置\n\nf.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头\nprint(f.tell())\nprint(f.readline(),end = \" \")\nprint(f.tell())\n\n\n#seek的标准形式为 :seek(offset[,whence])\n\n#whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0\n#whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动\n#whence 如果为2，表示相对于文件末尾移动\n\nf.seek(-5,1) #以当前位置为准，往后移动两个\nprint(f.readline(),end = \" \")\n"]],[11015,11015],[11457,11457]]],[1542804042555,["gjx16@GJXAIOU",[[1,11056," 、、"]],[11056,11056],[11059,11059]]],[1542804043530,["gjx16@GJXAIOU",[[-1,11057,"、、"]],[11059,11059],[11057,11057]]],[1542804049975,["gjx16@GJXAIOU",[[1,11057,"#ruguo "]],[11057,11057],[11064,11064]]],[1542804051577,["gjx16@GJXAIOU",[[-1,11058,"ruguo "]],[11064,11064],[11058,11058]]],[1542804066275,["gjx16@GJXAIOU",[[1,11058,"如果使用seek，这里必须使用rb"]],[11058,11058],[11075,11075]]],[1542804126930,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11585,"\n\n  "]],[9832,9832],[11589,11589]]],[1542804126930,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11585,"\n\n  "]],[11589,11589],[9832,9832]]],[1542804084024,["gjx16@GJXAIOU",[[1,11581,"- ****"]],[11581,11581],[11585,11585]]],[1542804091722,["gjx16@GJXAIOU",[[1,11585,"digui"]],[11585,11585],[11590,11590]]],[1542804098105,["gjx16@GJXAIOU",[[-1,11585,"digui"]],[11590,11590],[11585,11585]]],[1542804100766,["gjx16@GJXAIOU",[[1,11585,"递归："]],[11585,11585],[11588,11588]]],[1542804123280,["gjx16@GJXAIOU",[[1,11590," 指的是一个函数不断调用自身的行为，如"]],[11590,11590],[11609,11609]]],[1542804186929,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11613,"\n\n  "]],[9832,9832],[11617,11617]]],[1542804186929,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11613,"\n\n  "]],[11617,11617],[9832,9832]]],[1542804135681,["gjx16@GJXAIOU",[[1,11609,"斐波那契数列"]],[11609,11609],[11615,11615]]],[1542804136785,["gjx16@GJXAIOU",[[1,11616,"- \n"]],[11615,11615],[11618,11618]]],[1542804138348,["gjx16@GJXAIOU",[[1,11618,"****"]],[11618,11618],[11620,11620]]],[1542804142454,["gjx16@GJXAIOU",[[1,11620,"遍历："]],[11620,11620],[11623,11623]]],[1542804163204,["gjx16@GJXAIOU",[[1,11625," 指的是按照一定的规则访问属性结果"]],[11625,11625],[11642,11642]]],[1542804164626,["gjx16@GJXAIOU",[[-1,11638,"属性结果"]],[11642,11642],[11638,11638]]],[1542804182913,["gjx16@GJXAIOU",[[1,11638,"树形结构中的每一个节点，而且每个"]],[11638,11638],[11654,11654]]],[1542804246934,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11658,"\n\n  "]],[9832,9832],[11662,11662]]],[1542804246934,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11658,"\n\n  "]],[11662,11662],[9832,9832]]],[1542804228271,["gjx16@GJXAIOU",[[1,11654,"节点都只访问一次，例如for循环"]],[11654,11654],[11670,11670]]],[1542804306936,[null,[[-1,9832,"\n\n\n"],[1,9835,"```"],[-1,9935," "],[1,9936,"\n"],[-1,10459,"\n"],[1,10460,"s"],[-1,10682," "],[1,10683,"\n"],[-1,10699," "],[1,10700,"\n"],[1,11674,"\n\n  "]],[9832,9832],[11678,11678]]],[1542804306936,[null,[[1,9832,"\n\n\n"],[-1,9832,"```"],[1,9935," "],[-1,9935,"\n"],[1,10459,"\n"],[-1,10459,"s"],[1,10682," "],[-1,10682,"\n"],[1,10699," "],[-1,10699,"\n"],[-1,11674,"\n\n  "]],[11678,11678],[9832,9832]]],[1542804249927,["gjx16@GJXAIOU",[[1,11484,"\n"]],[11480,11480],[11481,11481]]],[1542804255408,["gjx16@GJXAIOU",[[1,11481,"程序运行结果；"]],[11481,11481],[11488,11488]]],[1542804255873,["gjx16@GJXAIOU",[[1,11492,"\n"]],[11488,11488],[11489,11489]]],[1542804259984,["gjx16@GJXAIOU",[[1,11489,"b'you raise me up\\r\\n' 17\n0\nb'you raise me up\\r\\n' 17\nb' up\\r\\n' ·"]],[11489,11489],[11555,11555]]],[1542804260942,["gjx16@GJXAIOU",[[-1,11554,"·"]],[11555,11555],[11554,11554]]],[1542804261406,["gjx16@GJXAIOU",[[1,11554,"`"]],[11554,11554],[11555,11555]]],[1542804268717,["gjx16@GJXAIOU",[[1,11489,"`"]],[11489,11489],[11490,11490]]],[1542804270227,["gjx16@GJXAIOU",[[1,11516,"`"]],[11516,11516],[11517,11517]]],[1542804270990,["gjx16@GJXAIOU",[[1,11519,"`"]],[11519,11519],[11520,11520]]],[1542804271719,["gjx16@GJXAIOU",[[1,11546,"`"]],[11546,11546],[11547,11547]]],[1542804275715,["gjx16@GJXAIOU",[[1,11545,"`"]],[11545,11545],[11546,11546]]],[1542804276110,["gjx16@GJXAIOU",[[1,11518,"`"]],[11518,11518],[11519,11519]]],[1542804279963,["gjx16@GJXAIOU",[[1,11515,"`"]],[11515,11515],[11516,11516]]],[1542804305736,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1542804366935,[null,[[-1,9833,"\n\n\n"],[1,9836,"```"],[-1,9936," "],[1,9937,"\n"],[-1,10460,"\n"],[1,10461,"s"],[-1,10683," "],[1,10684,"\n"],[-1,10700," "],[1,10701,"\n"],[1,11757,"\n\n  "]],[9833,9833],[11761,11761]]],[1542804366935,[null,[[1,9833,"\n\n\n"],[-1,9833,"```"],[1,9936," "],[-1,9936,"\n"],[1,10460,"\n"],[-1,10460,"s"],[1,10683," "],[-1,10683,"\n"],[1,10700," "],[-1,10700,"\n"],[-1,11757,"\n\n  "]],[11761,11761],[9833,9833]]],[1542804308034,["gjx16@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1542804308233,["gjx16@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1542804308882,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1542804308931,["gjx16@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1542804312306,["gjx16@GJXAIOU",[[1,4,"datel"]],[4,4],[9,9]]],[1542804426934,[null,[[-1,9847,"\n\n\n"],[1,9850,"```"],[-1,9950," "],[1,9951,"\n"],[-1,10474,"\n"],[1,10475,"s"],[-1,10697," "],[1,10698,"\n"],[-1,10714," "],[1,10715,"\n"],[1,11771,"\n\n  "]],[9847,9847],[11775,11775]]],[1542804426934,[null,[[1,9847,"\n\n\n"],[-1,9847,"```"],[1,9950," "],[-1,9950,"\n"],[1,10474,"\n"],[-1,10474,"s"],[1,10697," "],[-1,10697,"\n"],[1,10714," "],[-1,10714,"\n"],[-1,11771,"\n\n  "]],[11775,11775],[9847,9847]]],[1542804380971,["gjx16@GJXAIOU",[[1,9,"ine;"]],[9,9],[13,13]]],[1542804381889,["gjx16@GJXAIOU",[[-1,12,";"]],[13,13],[12,12]]],[1542804386476,["gjx16@GJXAIOU",[[1,12,":``"]],[12,12],[15,15]]],[1542804393709,["gjx16@GJXAIOU",[[1,14,"2018-11-21"]],[14,14],[24,24]]]],null,"gjx16@GJXAIOU"],["fcb1f480-93d3-4dfa-a875-3ba8f93af1d5",1542810851544,"---\ndateline:`2018-11-21`\n---\n\n# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n### 2.4.4 并行迭代\n```pyhton\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n```\n程序运行结果：\n`<zip object at 0x0000026214FB9B48>`\n`[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]`\n`[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]`\n`[('name', 'age')]`\n`[('h',), ('e',), ('l',), ('l',), ('o',)]`\n`[('w',), ('o',), ('r',), ('l',), ('d',)]`\n`[3, 5, 8, 10, 13]`\n\n### 2.4.5 enumerate使用\n```python\n'''\nenumerate的使用；p123\n'''\n\n'''\n同时得到列表中元素的索引和元素 p123\n'''\n# 一般方法\nweek = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n\n#使用enumerate 内建函数\nfor (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n'''\n直接显示列表中的索引和元素  p124\n'''\nseasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n'''\n当原本的为字符串的时候，需要先转换为列表  p124\n'''\n\n#将字符串中部分字符进行替换\n\nraw = \"hello world ,you are a good good student .\"\nraw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n    if \"good\" in string:\n        raw_list[i] = \"best\"\n\nprint(raw_list)\n```\n程序运行结果：\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`[(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]`\n`[(1, 'spring'), (2, 'summer'), (3, 'fall'), (4, 'winter')] `\n`['hello', 'world', ',you', 'are', 'a', 'best', 'best', 'student', '.']`\n\n### 2.4.6 列表解析\n```python\n\n'''\n列表解析：p125\n'''\n\n#得到1-9的平方，放入列表并打印\n\noutlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到\noutlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n\n#删除列表中字符串前后的空格\nraw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)\n```\n程序运行结果：\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`['hello', 'lala', 'world']`\n\n\n\n\n## 2.5 while循环语句\n示例程序：\n```python\n\n'''\nwhile循环示例：P129\n'''\nimport  random\nnum = random.randint(1,100)\nguess = 0\n\nwhile True:\n    num_input = input(\"please input one interger that is in 1 to 100:\")\n    guess +=1\n    if not num_input.isdigit():#用来判断字符串是否全部由数字组成\n        print(\"please input interger.\")\n    elif int(num_input) < 0 or int(num_input) > 100:\n        print(\"please input number that is in 1 to 100:\")\n    else:\n        if num == int(num_input):\n            print(\"you are so smart\")\n            break\n        elif num > int(num_input):\n            print(\"the true num is bigger than you input\")\n        elif num < int(num_input):\n            print(\"the true num is smaller than you input\")\n        else:\n            print(\"There is something bad\")\n```\n\n### 2.5.2 break和continue \n\n**1.break：** 主要是在当前位置中断循环并且跳出循环体\n\n**continue：** 从当前位置（continue 位置）跳到循环体的最后一行的后面（不执行最后一行）\n\n==尽量在循环之前将条件做足，避免使用这两个在循环中跳来跳去==\n\n\n\n### 2.5.3 while....else\n例子：\n```python\n'''\nwhile ...else P130\n'''\n\ncount = 0\nwhile count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1\nelse:\n    print(count,\"is not less than 5\")\n```\n程序运行结果：\n`0 is less than 5`\n`1 is less than 5`\n`2 is less than 5`\n`3 is less than 5`\n`4 is less than 5`\n`5 is not less than 5`\n\n### 2.5.4 for ...else\n```python\n'''\nfor ...else  P131\n'''\nfrom math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break                            #这个break作用是？\n    else:\n        print(\"nothing\")\n```\n程序运行结果：\n`nothing`\n`nothing`\n`nothing`\n`9.0 is the sqrt of 81`\n\n\n\n## 2.6  文件\n\n### 2.6.1 读文件\n\n```python\n'''\n读文件：p131\n'''\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line)\n\n```\n程序运行结果：\n`你好世界`\n\n`12345`\n\n`best`\n#因为每行的最后都有`\\n`,同时print在默认情况下，打印完line的对象之后会增加一个`\\n`,因此中间会空一行；\n\n上面程序改进\n```python\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line,end = ' ')\n```\n\n**文件对象是可迭代的**\n\n\n\n\n\n### 2.6.2 创建文件\n‘r’只读模式，必须打开一个已有的文件，且只能执行读操作。\n\n‘r+’读+追加模式，可读可写，与‘r’相同之处在于也是必须打开一个已有的文件，不同的是它可写可读，而且写与读不分先        后，即随时都可进行读与写。（写为追加在文件末尾）\n\n‘w’只写模式，打开即默认创建一个新的空文件，当然若打开的是已有文件，则清空文件，且只能执行写操作。\n\n‘w+’写读模式，打开创建新文件，因此需要先把内容写进去在读。即保证文件有内容通过移动光标来读自己想要的部分。\n\n‘a’追加模式，若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写（追加在后面），不能读。即追加写。\n\n‘a+’追加读写模式，打开文件方式同‘a’一样，写方式也和'a'一样，但是可以读。且是任意时刻读写。需要注意的是你若刚用‘a+’打开一个文件，则不能立即读，因为此时光标已经是文件末尾，除非你把光标移动到初始位置或任意非末尾的位置。\n\n\n\n\n\n\n### 2.6.3 使用with\n\n```python\n'''\n使用with  p135\n'''\n\n#常用的使用文件方法：\n# fn = open(\"abc.txt\",\"a\") #打开文件\n# fn.write(\"python is the best\") #写入文件\n# fn.close()     #关闭文件\n\n\n#使用with进行操作，这时候就不需要使用close\n\nwith open(\"abc.txt\") as fn:\n    print(fn.read())\n\n```\n当然程序中两个代码的作用是不一样的，这里只是示范一下使用方法\n\n### 2.6.4 文件的状态\n\n可以获取文件的创建日期、修改日期的状态信息\n```python\n\n'''\n文件的状态：p136\n'''\n\nimport os\nfile_state = os.stat(\"abc.txt\")\nprint(file_state)\n\n```\n程序运行结果；\n`os.stat_result(st_mode=33206, st_ino=562949953675316, st_dev=1143006259, st_nlink=1, st_uid=0, st_gid=0, st_size=18, st_atime=1542798239, st_mtime=1542798211, st_ctime=1542798211)`\n显示的结果看不懂\n换一种显示方式：\n```python\n'''\n换种时间显示方式：\n'''\nimport os\nfile_state = os.stat(\"abc.txt\")\nimport time\nstate_file = time.localtime(file_state.st_ctime)\nprint(state_file)\n```\n程序运行结果：\n`time.struct_time(tm_year=2018, tm_mon=11, tm_mday=21, tm_hour=19, tm_min=3, tm_sec=31, tm_wday=2, tm_yday=325, tm_isdst=0)`\n\n\n### 2.6.5 read /readline / readlines \n\n- **read:** 完整的表达方式：read(size) ,指一次性读取文件中size个字符并且返回一个字符串，如果省略的话则读取文件对象中的字符直到EOF，并且依然返回字符串\n- **readline:** 每次执行`文件名.readlines()` ,只读取一行，直到最后一行，最后一行之后还执行的话会返回空字符串，但是不报错\n- **readlines：** 它的作用是将文件中的各行读取出来，最后结果放在一个列表中返回\n\n\n\n\n### 2.6.6 读很大的文件\n使用fileinput模块，使用方式如下：\n```python\n'''\n使用fileinput 模块进行大文件的读取\n'''\nimport fileinput\nfor line in fileinput.input(\"lianxi.txt\"):\n    print(line,end = \" \")\n```\n程序运行结果：防止运行时可以的\n\n\n### 2.6.7 seek\n首先在读取文件的时候，指针随之运动，当读取结束的时候，指针就移动到相应的位置了\n例如：文件f.txt中内容如下；\n you raise me up\n when i am down\n please help me\n lalalalala\n\n```python\n'''\n使用seek   \n'''\n\nf = open(\"f.txt\",\"rb\") #如果使用seek，这里必须使用rb\nprint(f.readline(),end = \" \")\nprint(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置\n\nf.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头\nprint(f.tell())\nprint(f.readline(),end = \" \")\nprint(f.tell())\n\n\n#seek的标准形式为 :seek(offset[,whence])\n\n#whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0\n#whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动\n#whence 如果为2，表示相对于文件末尾移动\n\nf.seek(-5,1) #以当前位置为准，往后移动两个\nprint(f.readline(),end = \" \")\n\n```\n程序运行结果；\n`b'you raise me up\\r\\n' 17`\n`0`\n`b'you raise me up\\r\\n' 17`\n`b' up\\r\\n' `\n\n\n\n## 2.7 初识迭代\n\n- **循环：** 指是在满足条件的情况下，重复执行同一段代码，如while语句\n- **迭代：** 指的是按照某种顺序逐个访问对象（如列表）中的每一句，如for语句\n- **递归：** 指的是一个函数不断调用自身的行为，如斐波那契数列\n- **遍历：** 指的是按照一定的规则访问树形结构中的每一个节点，而且每个节点都只访问一次，例如for循环\n\n\n\n\n\n  \n\n\n",[[1542810842086,["gjx16@GJXAIOU",[[1,10917,"\n"]],[10916,10916],[10917,10917]]],[1542810865452,["gjx16@GJXAIOU",[[1,10917,"[seek使用报错解决](https://blog.csdn.net/gaojixu/article/details/84331063)"]],[10917,10917],[10985,10985]]]],null,"gjx16@GJXAIOU"],["25eeb201-462c-4d00-8d4b-847fc334c5b5",1548132513706,"---\ndateline:`2018-11-21`\n---\n\n# 第2章 语句和文件\n\n\n## 2.1 运算符\n\n### 2.1.1 算术运算符\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| + | 加 - 两个对象相加                            | a + b 输出结果 30 |\n| - | 减 - 得到负数或是一个数减去另一个数            | a - b 输出结果 -10 |\n| * | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 200 |\n| / | 除 - x除以y                                  | b / a 输出结果 2 |\n| % | 取余 - 返回除法的余数                          | b % a 输出结果 0 |\n| ** | 幂 - 返回x的y次幂                     | a**b 为10的20次方， 输出结果 100000000000000000000 |\n| // | 取整除 - 返回商的整数部分（**向下取整**） |  9//2  4    -9//2  -5\n\n\n### 2.1.2 比较运算符\n任何两个同一类型的对象都可以进行比较\n\n| 运算符 | 描述 | 实例 |\n|---|---|---|---|\n| == | 等于 - 比较对象是否相等 | (a == b) 返回 False。 |\n| != | 不等于 - 比较两个对象是否不相等 | (a != b) 返回 true. |\n| <> | 不等于 - 比较两个对象是否不相等 | (a <> b) 返回 true。这个运算符类似 != 。 |\n| > | 大于 - 返回x是否大于y | (a > b) 返回 False。 |\n| < | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 | (a < b) 返回 true。 |\n| >= | 大于等于 - 返回x是否大于等于y。 | (a >= b) 返回 False。 |\n| <= | 小于等于 - 返回x是否小于等于y。 | (a <= b) 返回 true。 |\n\n\n\n### 2.1.3 逻辑运算符\n\n- 1.布尔类型\n本质上就是返回值为 `True` 和`False` 的对象\n注意：\n```python\na = \" \"#这里是空格，空格也是一个字符\nprint(bool(a))\n\nb = \"\"#这里是空，不是空格\nprint(bool(b))\n\nprint(bool([])) #这是空列表\n\nprint(bool({})) #这是空字典\n```\n程序运行结果：\n`True`\n`False`\n`False`\n`False`\n\n- 2.布尔运算\n进行布尔运算的运算符称为逻辑运算符  ：and   or     not\n\n  - and :      A and  B\n  **含义：** 如果A 为true，计算B，最终结果为B   ；如果A为False ，就不用计算B，结果为False\n\n  - or  :     A or B  \n  **含义：** 如果A的值为True ，结果为True  ； 如果A为False，结果看B的值\n\n  - not   ：not A\n  **含义：** 取反就行\n\n对于复杂的布尔表达式一定使用括号来自主选择优先级\n\n\n\n## 2.2 简单语句  \n\n### 2.2.1  import   \n使用`import math`    导入math模块,\n使用math模块里面的函数：`math.pow(3,2)`,这种应用方式可以避免函数重名\n\n\n\n### 2.2.2 赋值\n```python\n#批量的进行一一赋值\nx,y,z = 1,\"python\",[\"hello\",\"world\"]\nprint(x)\nprint(y)\nprint(z)\n\n#将多个值赋值给一个：相当于自动创建一个元组\n\naa = \"hello\",\"python\"\nprint(aa)\n\n\n\n## 交换元素值(实现数值对调 )    变量只是贴在对象上的标签\n\nla = 2\nlb = 3\nla,lb = lb,la\nprint(la)\nprint(lb)\n\n\n\n\n## 链式赋值\n\nm = n = \"python\"\nprint(\"m = \",m, \"; n = \" ,n)\nprint(\"id(m) = \",id(m), \"id(n) = \",id(n))  #实际上两个变量所指向的是同一个对象\n#以上判断内存是否一致方法还可以使用is\nprint(m is n)  #如果结果为True，则表示两个变量所引用的对象是同一个\n\n\n\n## 两变量赋值同样的对象\nlala = \"python\"\nlblb = \"python\"\nprint(lala is lblb) # 其结果并非同一个\n\n\n# 有待商榷\n#例外情况：当两个变量都分别赋值小于等于256及其以下的值时候，其所指的都是同一块内存，等价于链式赋值，但是大于256就是两个对象\n\nlu = 256\nlk = 256\nprint(lu is lk)\n\nld = 257\nldd = 257\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\nld = 4097\nldd =4097\nprint(id(ld),id(ldd))\nprint(ld is ldd)\n\n#可以使用+实现赋值\nx = 9\nx += 1\nprint(x)\n\n\ny = \"pyth\"\ny += \"on\"\nprint(y)\n```\n程序运行结果：\n`1`\n`python`\n`['hello', 'world']`\n`('hello', 'python')`\n`3`\n`2`\n`m =  python ; n =  python`\n`id(m) =  2859978232080 id(n) =  2859978232080`\n`True`\n`True`\n`True`\n`2859977205744 2859977205744`\n`True`\n`2859978871344 2859978871344`\n`True`\n`10`\n`python`\n\n## 2.3 条件语句\n\n### 2.3.1 if  ...elif ...else\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/14 19:23\n#Author:GJXAIOU\n\nimport math\n\nprint(\"please input a number :\")\n\nnumber = input()  #这里不能使用int进行强转，如果使用int就不能使用isdigit\n\nif number.isdigit():# isdigit()是检测字符串是否由数字组成\n\n    if int(number) == 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"You are smart\")\n\n    elif int(number) < 10:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is bigger than you input\")\n\n    else:\n        print(\"The number of you input is :{}\".format(number))\n        print(\"The number is smaller than you input\")\n\nelse:\n    print(\" The input is not number,please input number\")\n\n```\n\n\n### 2.3.3 三元操作符\n```python\nname = \"qiwsie\" if 29 > 21 else \"github\"\n```\n\n**函数定义：**  A = Y if X else Z \n- 如果X为真，那么就执行 A= Y\n- 如果X为假，就执行 A= Z\n\n\n\n\n## 2.4 for循环语句\n只有序列类型可以使用for 循环（包括：列表和字符串）\n```python\nfor 循环规则：\n    操作语句\n```\n\n示例程序；\n```python\nhello = \"world\"\nfor i in hello:\n    print(i)\n\n```\n下面的程序等效于上面的程序：\n```python\nhello = \"world\"\nfor i in range(len(hello)):\n    print(hello[i])\n```\n程序运行结果：\n`w`\n`o`\n`r`\n`l`\n`d`\n\n- print()默认的`end = \\n`,所以在默认的情况下，每个元素都单独占一行\n- 字典也可以使用for循环，但是得到的结果是获取字典中所有的键值\n```python\ns = dict([(\"web\",\"hello\"),(\"lang\",\"world\"),(\"author\",\"laogao\")])\nfor k in s.keys():  #同样是获得字典中所有的键值\n    print(k)\n\nfor v in s.values(): #获得字典中所有的值\n    print(v)\n\nfor k,v in s.items():  #同时获得字典中所有的键和值\n    print(k + \"-->\" +v)\n```\n程序运行结果：\n`web`\n`lang`\n`author`\n`hello`\n`world`\n`laogao`\n`web-->hello`\n`lang-->world`\n`author-->laogao`\n\n- **for循环所应用的对象必须是可迭代的**\n判断一个对象是否可以迭代\n```python\nfrom collections import Iterable\n\nprint(isinstance(123,Iterable))\n```\n(需要在终端中运行)程序运行结果：\n`False`\n\n==字符串、列表、字典、元组、集合都是可迭代对象==\n\n\n\n\n### 2.4.3  range(start,stop,[,step])\n- 参数含义：开始，结尾，步长\n- 当步长为1 的时候可以省略\n- 当start为0的时候，可以省略\n- 当步长不为1的时候，开始不可以省略\n```python\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\nprint(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\nprint(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n\nprint(range(0,-9,-1))  #这样无法得到列表\n\nprint(list(range(0,-9,-1)))#结果为列表\n```\n程序的运行结果；\n`range(1, 7, 2)`\n`<class 'range'>`\n`range(0, -9, -1)`\n`[0, -1, -2, -3, -4, -5, -6, -7, -8]`\n\n\n\n### 2.4.4 并行迭代\n```pyhton\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n#迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# zip()的参数需要是可迭代对象，返回值是一个zip对象\n\n#当参数为普通序列时候\na = \"hello\"\nb = \"world\"\nc = \"gaojixu\"\nprint(zip(a,b))  #函数名表示函数在内存中的信息\nprint(list(zip(a,b)))# 序列长度相同的时候\nprint(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n\n#当参数为字典的时候\nd = {\"name\":\"GJX\"}\ne = {\"age\":\"23\"}\nprint(list(zip(d,e))) #得到的是所有的键值\n\n\n#当参数是一个序列时候\nf = \"hello\"\ng = \"world\"\nprint(list(zip(f)))\nprint(list(zip(g)))\n\n\n#应用，两个序列对应位置元素运算\na = [1,2,4,5,6]\nb = [2,3,4,5,7]\nd = []\nfor x,y in zip(a,b):\n    d.append(x + y)\n\n\nprint(d)\n```\n程序运行结果：\n`<zip object at 0x0000026214FB9B48>`\n`[('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]`\n`[('h', 'g'), ('e', 'a'), ('l', 'o'), ('l', 'j'), ('o', 'i')]`\n`[('name', 'age')]`\n`[('h',), ('e',), ('l',), ('l',), ('o',)]`\n`[('w',), ('o',), ('r',), ('l',), ('d',)]`\n`[3, 5, 8, 10, 13]`\n\n### 2.4.5 enumerate使用\n```python\n'''\nenumerate的使用；p123\n'''\n\n'''\n同时得到列表中元素的索引和元素 p123\n'''\n# 一般方法\nweek = ['monday','sunday','friday']\nfor i in range(len(week)):\n    print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n\n#使用enumerate 内建函数\nfor (i,day) in enumerate(week):\n    print(day + \"is\" + str(i))\n\n'''\n直接显示列表中的索引和元素  p124\n'''\nseasons = ['spring','summer','fall','winter']\nprint(list(enumerate(seasons)))\nprint(list(enumerate(seasons,start = 1)))\n\n'''\n当原本的为字符串的时候，需要先转换为列表  p124\n'''\n\n#将字符串中部分字符进行替换\n\nraw = \"hello world ,you are a good good student .\"\nraw_list = raw.split()\n\nfor i,string in enumerate(raw_list):\n    #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n    if \"good\" in string:\n        raw_list[i] = \"best\"\n\nprint(raw_list)\n```\n程序运行结果：\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`mondayis0`\n`sundayis1`\n`fridayis2`\n`[(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]`\n`[(1, 'spring'), (2, 'summer'), (3, 'fall'), (4, 'winter')] `\n`['hello', 'world', ',you', 'are', 'a', 'best', 'best', 'student', '.']`\n\n### 2.4.6 列表解析\n```python\n\n'''\n列表解析：p125\n'''\n\n#得到1-9的平方，放入列表并打印\n\noutlist1 = []\nfor i in range(1,10):\n    outlist1.append(i**2)\nprint(outlist1)\n\n#使用列表解析得到\noutlist2 = [(i**2) for i in range(1,10)]\nprint(outlist2)\n\n\n#删除列表中字符串前后的空格\nraw_list = [\"  hello\",\" lala \",\"world  \"]\nans_list = [one.strip() for one in raw_list]\nprint(ans_list)\n```\n程序运行结果：\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`[1, 4, 9, 16, 25, 36, 49, 64, 81]`\n`['hello', 'lala', 'world']`\n\n\n\n\n## 2.5 while循环语句\n示例程序：\n```python\n\n'''\nwhile循环示例：P129\n'''\nimport  random\nnum = random.randint(1,100)\nguess = 0\n\nwhile True:\n    num_input = input(\"please input one interger that is in 1 to 100:\")\n    guess +=1\n    if not num_input.isdigit():#用来判断字符串是否全部由数字组成\n        print(\"please input interger.\")\n    elif int(num_input) < 0 or int(num_input) > 100:\n        print(\"please input number that is in 1 to 100:\")\n    else:\n        if num == int(num_input):\n            print(\"you are so smart\")\n            break\n        elif num > int(num_input):\n            print(\"the true num is bigger than you input\")\n        elif num < int(num_input):\n            print(\"the true num is smaller than you input\")\n        else:\n            print(\"There is something bad\")\n```\n\n### 2.5.2 break和continue \n\n**1.break：** 主要是在当前位置中断循环并且跳出循环体\n\n**continue：** 从当前位置（continue 位置）跳到循环体的最后一行的后面（不执行最后一行）\n\n==尽量在循环之前将条件做足，避免使用这两个在循环中跳来跳去==\n\n\n\n### 2.5.3 while....else\n例子：\n```python\n'''\nwhile ...else P130\n'''\n\ncount = 0\nwhile count < 5 :\n    print(count ,\"is less than 5\")\n    count += 1\nelse:\n    print(count,\"is not less than 5\")\n```\n程序运行结果：\n`0 is less than 5`\n`1 is less than 5`\n`2 is less than 5`\n`3 is less than 5`\n`4 is less than 5`\n`5 is not less than 5`\n\n### 2.5.4 for ...else\n```python\n'''\nfor ...else  P131\n'''\nfrom math import sqrt\nfor i in range(99,80,-1):\n    root = sqrt(i)\n    if root == int (root):\n        print(root ,\"is the sqrt of\",i)\n        break                            #这个break作用是？\n    else:\n        print(\"nothing\")\n```\n程序运行结果：\n`nothing`\n`nothing`\n`nothing`\n`9.0 is the sqrt of 81`\n\n\n\n## 2.6  文件\n\n### 2.6.1 读文件\n\n```python\n'''\n读文件：p131\n'''\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line)\n\n```\n程序运行结果：\n`你好世界`\n\n`12345`\n\n`best`\n#因为每行的最后都有`\\n`,同时print在默认情况下，打印完line的对象之后会增加一个`\\n`,因此中间会空一行；\n\n上面程序改进\n```python\nf = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\nfor line in f:\n    print(line,end = ' ')\n```\n\n**文件对象是可迭代的**\n\n\n\n\n\n### 2.6.2 创建文件\n‘r’只读模式，必须打开一个已有的文件，且只能执行读操作。\n\n‘r+’读+追加模式，可读可写，与‘r’相同之处在于也是必须打开一个已有的文件，不同的是它可写可读，而且写与读不分先        后，即随时都可进行读与写。（写为追加在文件末尾）\n\n‘w’只写模式，打开即默认创建一个新的空文件，当然若打开的是已有文件，则清空文件，且只能执行写操作。\n\n‘w+’写读模式，打开创建新文件，因此需要先把内容写进去在读。即保证文件有内容通过移动光标来读自己想要的部分。\n\n‘a’追加模式，若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写（追加在后面），不能读。即追加写。\n\n‘a+’追加读写模式，打开文件方式同‘a’一样，写方式也和'a'一样，但是可以读。且是任意时刻读写。需要注意的是你若刚用‘a+’打开一个文件，则不能立即读，因为此时光标已经是文件末尾，除非你把光标移动到初始位置或任意非末尾的位置。\n\n\n\n\n\n\n### 2.6.3 使用with\n\n```python\n'''\n使用with  p135\n'''\n\n#常用的使用文件方法：\n# fn = open(\"abc.txt\",\"a\") #打开文件\n# fn.write(\"python is the best\") #写入文件\n# fn.close()     #关闭文件\n\n\n#使用with进行操作，这时候就不需要使用close\n\nwith open(\"abc.txt\") as fn:\n    print(fn.read())\n\n```\n当然程序中两个代码的作用是不一样的，这里只是示范一下使用方法\n\n### 2.6.4 文件的状态\n\n可以获取文件的创建日期、修改日期的状态信息\n```python\n\n'''\n文件的状态：p136\n'''\n\nimport os\nfile_state = os.stat(\"abc.txt\")\nprint(file_state)\n\n```\n程序运行结果；\n`os.stat_result(st_mode=33206, st_ino=562949953675316, st_dev=1143006259, st_nlink=1, st_uid=0, st_gid=0, st_size=18, st_atime=1542798239, st_mtime=1542798211, st_ctime=1542798211)`\n显示的结果看不懂\n换一种显示方式：\n```python\n'''\n换种时间显示方式：\n'''\nimport os\nfile_state = os.stat(\"abc.txt\")\nimport time\nstate_file = time.localtime(file_state.st_ctime)\nprint(state_file)\n```\n程序运行结果：\n`time.struct_time(tm_year=2018, tm_mon=11, tm_mday=21, tm_hour=19, tm_min=3, tm_sec=31, tm_wday=2, tm_yday=325, tm_isdst=0)`\n\n\n### 2.6.5 read /readline / readlines \n\n- **read:** 完整的表达方式：read(size) ,指一次性读取文件中size个字符并且返回一个字符串，如果省略的话则读取文件对象中的字符直到EOF，并且依然返回字符串\n- **readline:** 每次执行`文件名.readlines()` ,只读取一行，直到最后一行，最后一行之后还执行的话会返回空字符串，但是不报错\n- **readlines：** 它的作用是将文件中的各行读取出来，最后结果放在一个列表中返回\n\n\n\n\n### 2.6.6 读很大的文件\n使用fileinput模块，使用方式如下：\n```python\n'''\n使用fileinput 模块进行大文件的读取\n'''\nimport fileinput\nfor line in fileinput.input(\"lianxi.txt\"):\n    print(line,end = \" \")\n```\n程序运行结果：防止运行时可以的\n\n\n### 2.6.7 seek\n[seek使用报错解决](https://blog.csdn.net/gaojixu/article/details/84331063)\n首先在读取文件的时候，指针随之运动，当读取结束的时候，指针就移动到相应的位置了\n例如：文件f.txt中内容如下；\n you raise me up\n when i am down\n please help me\n lalalalala\n\n```python\n'''\n使用seek   \n'''\n\nf = open(\"f.txt\",\"rb\") #如果使用seek，这里必须使用rb\nprint(f.readline(),end = \" \")\nprint(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置\n\nf.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头\nprint(f.tell())\nprint(f.readline(),end = \" \")\nprint(f.tell())\n\n\n#seek的标准形式为 :seek(offset[,whence])\n\n#whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0\n#whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动\n#whence 如果为2，表示相对于文件末尾移动\n\nf.seek(-5,1) #以当前位置为准，往后移动两个\nprint(f.readline(),end = \" \")\n\n```\n程序运行结果；\n`b'you raise me up\\r\\n' 17`\n`0`\n`b'you raise me up\\r\\n' 17`\n`b' up\\r\\n' `\n\n\n\n## 2.7 初识迭代\n\n- **循环：** 指是在满足条件的情况下，重复执行同一段代码，如while语句\n- **迭代：** 指的是按照某种顺序逐个访问对象（如列表）中的每一句，如for语句\n- **递归：** 指的是一个函数不断调用自身的行为，如斐波那契数列\n- **遍历：** 指的是按照一定的规则访问树形结构中的每一个节点，而且每个节点都只访问一次，例如for循环\n\n\n\n\n\n  \n\n\n",[[1548132513508,["gjx16@GJXAIOU",[[-1,529," "]],[530,530],[529,529]]],[1548132515119,["gjx16@GJXAIOU",[[1,529,"="]],[529,529],[530,530]]],[1548132520971,["gjx16@GJXAIOU",[[1,534,"；"]],[534,534],[535,535]]],[1548132524134,["gjx16@GJXAIOU",[[1,534," "]],[534,534],[535,535]]],[1548132531924,["gjx16@GJXAIOU",[[1,543,"="]],[543,543],[544,544]]],[1548133005070,["gjx16@GJXAIOU",[[1,723,"（）"]],[723,723],[725,725]]],[1548133008665,["gjx16@GJXAIOU",[[1,724,"python2"]],[724,724],[731,731]]],[1548133013714,["gjx16@GJXAIOU",[[1,676,"（）"]],[676,676],[678,678]]],[1548133018790,["gjx16@GJXAIOU",[[1,677,"python3"]],[677,677],[684,684]]],[1548133233013,["gjx16@GJXAIOU",[[1,2142,"下卖弄"]],[2142,2142],[2145,2145]]],[1548133233568,["gjx16@GJXAIOU",[[-1,2144,"弄"]],[2145,2145],[2144,2144]]],[1548133234055,["gjx16@GJXAIOU",[[-1,2142,"下"]],[2143,2143],[2142,2142]]],[1548133239005,["gjx16@GJXAIOU",[[1,2142,"下面这句"]],[2142,2142],[2146,2146]]],[1548136594136,[null,[[-1,2146,"卖"]],[2146,2146],[2146,2146]]],[1548136594137,[null,[[1,2146,"卖"]],[2146,2146],[2146,2146]]],[1548136534688,["gjx16@GJXAIOU",[[1,9163,"**"],[1,9183,"**"]],[9163,9183],[9163,9187]]],[1548136552366,["gjx16@GJXAIOU",[[-1,9248,"        "]],[9256,9256],[9248,9248]]],[1548136643690,[null,[[-1,2146,"卖"],[1,9163,"，"],[-1,9165,"，"],[1,9185,"作"],[-1,9187,"作"],[-1,9248," "],[1,9249,"先"]],[2146,2146],[9250,9250]]],[1548136643690,[null,[[1,2146,"卖"],[-1,9162,"，"],[1,9165,"，"],[-1,9184,"作"],[1,9187,"作"],[1,9247," "],[-1,9247,"先"]],[9250,9250],[2146,2146]]],[1548136640493,["gjx16@GJXAIOU",[[1,9282,"**"],[1,9323,"**"]],[9282,9323],[9282,9327]]],[1548156625630,[null,[[-1,2146,"卖"],[1,9163,"，"],[-1,9165,"，"],[1,9185,"作"],[-1,9187,"作"],[-1,9248," "],[1,9249,"先"],[1,9282,"，"],[-1,9284,"，"],[1,9325,"作"],[-1,9327,"作"]],[2146,2146],[9327,9327]]],[1548156625630,[null,[[1,2146,"卖"],[-1,9162,"，"],[1,9165,"，"],[-1,9184,"作"],[1,9187,"作"],[1,9247," "],[-1,9247,"先"],[-1,9281,"，"],[1,9284,"，"],[-1,9324,"作"],[1,9327,"作"]],[9327,9327],[2146,2146]]],[1548156575241,["gjx16@GJXAIOU",[[1,11880,"## shu"]],[11880,11880],[11886,11886]]],[1548156576726,["gjx16@GJXAIOU",[[-1,11882," shu"]],[11886,11886],[11882,11882]]],[1548156589820,["gjx16@GJXAIOU",[[1,11882," 书上对应代码练习："]],[11882,11882],[11892,11892]]],[1548156590649,["gjx16@GJXAIOU",[[1,11895,"\n"]],[11892,11892],[11893,11893]]],[1548156592738,["gjx16@GJXAIOU",[[1,11893,"```"]],[11893,11893],[11896,11896]]],[1548156592818,["gjx16@GJXAIOU",[[1,11896,"language\n```\n"]],[11896,11896],[11896,11904]]],[1548156594515,["gjx16@GJXAIOU",[[-1,11896,"language"],[1,11904,"p"]],[11896,11904],[11897,11897]]],[1548156595422,["gjx16@GJXAIOU",[[1,11897,"ython"]],[11897,11897],[11902,11902]]],[1548156596206,["gjx16@GJXAIOU",[[1,11903,"\n"]],[11902,11902],[11903,11903]]],[1548156598135,["gjx16@GJXAIOU",[[1,11903,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/15 22:04 #Author:GJXAIOU     \"\"\" 本代码为第二章练习代码，从笔记中的2.4.3中开始，其他将会陆续补充   \"\"\"       \"\"\" range 的使用 ；P118   \"\"\" # print(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推 # print(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range # # print(range(0,-9,-1))  #这样无法得到列表 # # print(list(range(0,-9,-1)))#结果为列表               \"\"\" 使用zip() 进行并行迭代：P120 \"\"\" # #迭代：将for循环用于列表、字符串、字典的键值对就是迭代 # # zip()的参数需要是可迭代对象，返回值是一个zip对象 # # #当参数为普通序列时候 # a = \"hello\" # b = \"world\" # c = \"gaojixu\" # print(zip(a,b))  #函数名表示函数在内存中的信息 # print(list(zip(a,b)))# 序列长度相同的时候 # print(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准 # # #当参数为字典的时候 # d = {\"name\":\"GJX\"} # e = {\"age\":\"23\"} # print(list(zip(d,e))) #得到的是所有的键值 # # # #当参数是一个序列时候 # f = \"hello\" # g = \"world\" # print(list(zip(f))) # print(list(zip(g))) # # # #应用，两个序列对应位置元素运算 # a = [1,2,4,5,6] # b = [2,3,4,5,7] # d = [] # for x,y in zip(a,b): #     d.append(x + y) # # # print(d)     ''' enumerate的使用；p123 ''' # # ''' # 同时得到列表中元素的索引和元素 p123 # ''' # # 一般方法 # week = ['monday','sunday','friday'] # for i in range(len(week)): #     print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号 # # #使用enumerate 内建函数 # for (i,day) in enumerate(week): #     print(day + \"is\" + str(i)) # # ''' # 直接显示列表中的索引和元素  p124 # ''' # seasons = ['spring','summer','fall','winter'] # print(list(enumerate(seasons))) # print(list(enumerate(seasons,start = 1))) # # ''' # 当原本的为字符串的时候，需要先转换为列表  p124 # ''' # # #将字符串中部分字符进行替换 # # raw = \"hello world ,you are a good good student .\" # raw_list = raw.split() # # for i,string in enumerate(raw_list): #     #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了 #     if \"good\" in string: #         raw_list[i] = \"best\" # # print(raw_list)           ''' 列表解析：p125 '''   # #得到1-9的平方，放入列表并打印 # # outlist1 = [] # for i in range(1,10): #     outlist1.append(i**2) # print(outlist1) # # #使用列表解析得到 # outlist2 = [(i**2) for i in range(1,10)] # print(outlist2) # # # #删除列表中字符串前后的空格 # raw_list = [\"  hello\",\" lala \",\"world  \"] # ans_list = [one.strip() for one in raw_list] # print(ans_list)         ''' while循环示例：P129 ''' # import  random # num = random.randint(1,100) # guess = 0 # # while True: #     num_input = input(\"please input one interger that is in 1 to 100:\") #     guess +=1 #     if not num_input.isdigit(): #         print(\"please input interger.\") #     elif int(num_input) < 0 or int(num_input) > 100: #         print(\"please input number that is in 1 to 100:\") #     else: #         if num == int(num_input): #             print(\"you are so smart\") #             break #         elif num > int(num_input): #             print(\"the true num is bigger than you input\") #         elif num < int(num_input): #             print(\"the true num is smaller than you input\") #         else: #             print(\"There is something bad\")         ''' while ...else P130 ''' # count = 0 # # while count < 5 : # #     print(count ,\"is less than 5\") # #     count += 1 # # else: # #     print(count,\"is not less than 5\")       ''' for ...else  P131 ''' # from math import sqrt # for i in range(84,80,-1): #     root = sqrt(i) #     if root == int (root): #         print(root ,\"is the sqrt of\",i) #         break                            #这个break作用是？ #     else: #         print(\"nothing\")     ''' 读文件：p131 ''' # f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 # for line in f: #     print(line,end = ' ')     ''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   # with open(\"abc.txt\") as fn: #     print(fn.read())       ''' 文件的状态：p136 ''' # # import os # file_state = os.stat(\"abc.txt\") # print(file_state) #   ''' 换种时间显示方式： ''' # import os # # file_state = os.stat(\"abc.txt\") # # import time # # state_file = time.localtime(file_state.st_ctime) # # print(state_file)     ''' 使用fileinput 模块进行大文件的读取 ''' # import fileinput # for line in fileinput.input(\"lianxi.txt\"): #     print(line,end = \" \") #         ''' 使用seek ''' # # f = open(\"f.txt\",\"rb\") # print(f.readline(),end = \" \") # print(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置 # # f.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头 # print(f.tell()) # print(f.readline(),end = \" \") # print(f.tell()) # # # #seek的标准形式为 :seek(offset[,whence]) # # #whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0 # #whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动 # #whence 如果为2，表示相对于文件末尾移动 # # f.seek(-5,1) #以当前位置为准，往后移动两个 # print(f.readline(),end = \" \")       ''' 闭包：p168 ''' # def foo(): #     a = 3 #     def bar(): #         return a #     return bar # # f = foo() # print(f())       ''' lambda的使用：p170 ''' # lam = lambda x,y :x + y # buf = [] # for i in range(10): #     buf.append(lam(i,i+1)) # # print(buf)     ''' map使用 p172 ''' # numbers1 = [1,2,3,4,5,6,7,8,9] # numbers2 = [1,2,3,4,5,6,7,8,9] # numbers3 = [1,2] # # a =list(map(lambda x,y: x+y ,numbers1,numbers2)) # b =list(map(lambda x,y: x+y ,numbers1,numbers3)) # print(a) # print(b)       ''' reduce p173 ''' # from functools import reduce # a = reduce(lambda x,y:x+y,[1,2,3,4,5]) # print(a)"]],[11903,11903],[16971,16971]]],[1548156600398,["gjx16@GJXAIOU",[[-1,11903,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/15 22:04 #Author:GJXAIOU     \"\"\" 本代码为第二章练习代码，从笔记中的2.4.3中开始，其他将会陆续补充   \"\"\"       \"\"\" range 的使用 ；P118   \"\"\" # print(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推 # print(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range # # print(range(0,-9,-1))  #这样无法得到列表 # # print(list(range(0,-9,-1)))#结果为列表               \"\"\" 使用zip() 进行并行迭代：P120 \"\"\" # #迭代：将for循环用于列表、字符串、字典的键值对就是迭代 # # zip()的参数需要是可迭代对象，返回值是一个zip对象 # # #当参数为普通序列时候 # a = \"hello\" # b = \"world\" # c = \"gaojixu\" # print(zip(a,b))  #函数名表示函数在内存中的信息 # print(list(zip(a,b)))# 序列长度相同的时候 # print(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准 # # #当参数为字典的时候 # d = {\"name\":\"GJX\"} # e = {\"age\":\"23\"} # print(list(zip(d,e))) #得到的是所有的键值 # # # #当参数是一个序列时候 # f = \"hello\" # g = \"world\" # print(list(zip(f))) # print(list(zip(g))) # # # #应用，两个序列对应位置元素运算 # a = [1,2,4,5,6] # b = [2,3,4,5,7] # d = [] # for x,y in zip(a,b): #     d.append(x + y) # # # print(d)     ''' enumerate的使用；p123 ''' # # ''' # 同时得到列表中元素的索引和元素 p123 # ''' # # 一般方法 # week = ['monday','sunday','friday'] # for i in range(len(week)): #     print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号 # # #使用enumerate 内建函数 # for (i,day) in enumerate(week): #     print(day + \"is\" + str(i)) # # ''' # 直接显示列表中的索引和元素  p124 # ''' # seasons = ['spring','summer','fall','winter'] # print(list(enumerate(seasons))) # print(list(enumerate(seasons,start = 1))) # # ''' # 当原本的为字符串的时候，需要先转换为列表  p124 # ''' # # #将字符串中部分字符进行替换 # # raw = \"hello world ,you are a good good student .\" # raw_list = raw.split() # # for i,string in enumerate(raw_list): #     #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了 #     if \"good\" in string: #         raw_list[i] = \"best\" # # print(raw_list)           ''' 列表解析：p125 '''   # #得到1-9的平方，放入列表并打印 # # outlist1 = [] # for i in range(1,10): #     outlist1.append(i**2) # print(outlist1) # # #使用列表解析得到 # outlist2 = [(i**2) for i in range(1,10)] # print(outlist2) # # # #删除列表中字符串前后的空格 # raw_list = [\"  hello\",\" lala \",\"world  \"] # ans_list = [one.strip() for one in raw_list] # print(ans_list)         ''' while循环示例：P129 ''' # import  random # num = random.randint(1,100) # guess = 0 # # while True: #     num_input = input(\"please input one interger that is in 1 to 100:\") #     guess +=1 #     if not num_input.isdigit(): #         print(\"please input interger.\") #     elif int(num_input) < 0 or int(num_input) > 100: #         print(\"please input number that is in 1 to 100:\") #     else: #         if num == int(num_input): #             print(\"you are so smart\") #             break #         elif num > int(num_input): #             print(\"the true num is bigger than you input\") #         elif num < int(num_input): #             print(\"the true num is smaller than you input\") #         else: #             print(\"There is something bad\")         ''' while ...else P130 ''' # count = 0 # # while count < 5 : # #     print(count ,\"is less than 5\") # #     count += 1 # # else: # #     print(count,\"is not less than 5\")       ''' for ...else  P131 ''' # from math import sqrt # for i in range(84,80,-1): #     root = sqrt(i) #     if root == int (root): #         print(root ,\"is the sqrt of\",i) #         break                            #这个break作用是？ #     else: #         print(\"nothing\")     ''' 读文件：p131 ''' # f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 # for line in f: #     print(line,end = ' ')     ''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   # with open(\"abc.txt\") as fn: #     print(fn.read())       ''' 文件的状态：p136 ''' # # import os # file_state = os.stat(\"abc.txt\") # print(file_state) #   ''' 换种时间显示方式： ''' # import os # # file_state = os.stat(\"abc.txt\") # # import time # # state_file = time.localtime(file_state.st_ctime) # # print(state_file)     ''' 使用fileinput 模块进行大文件的读取 ''' # import fileinput # for line in fileinput.input(\"lianxi.txt\"): #     print(line,end = \" \") #         ''' 使用seek ''' # # f = open(\"f.txt\",\"rb\") # print(f.readline(),end = \" \") # print(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置 # # f.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头 # print(f.tell()) # print(f.readline(),end = \" \") # print(f.tell()) # # # #seek的标准形式为 :seek(offset[,whence]) # # #whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0 # #whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动 # #whence 如果为2，表示相对于文件末尾移动 # # f.seek(-5,1) #以当前位置为准，往后移动两个 # print(f.readline(),end = \" \")       ''' 闭包：p168 ''' # def foo(): #     a = 3 #     def bar(): #         return a #     return bar # # f = foo() # print(f())       ''' lambda的使用：p170 ''' # lam = lambda x,y :x + y # buf = [] # for i in range(10): #     buf.append(lam(i,i+1)) # # print(buf)     ''' map使用 p172 ''' # numbers1 = [1,2,3,4,5,6,7,8,9] # numbers2 = [1,2,3,4,5,6,7,8,9] # numbers3 = [1,2] # # a =list(map(lambda x,y: x+y ,numbers1,numbers2)) # b =list(map(lambda x,y: x+y ,numbers1,numbers3)) # print(a) # print(b)       ''' reduce p173 ''' # from functools import reduce # a = reduce(lambda x,y:x+y,[1,2,3,4,5]) # print(a)"]],[16971,16971],[11903,11903]]],[1548156603578,["gjx16@GJXAIOU",[[1,11903,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/15 22:04 #Author:GJXAIOU     \"\"\" 本代码为第二章练习代码，从笔记中的2.4.3中开始，其他将会陆续补充   \"\"\"       \"\"\" range 的使用 ；P118   \"\"\" # print(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推 # print(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range # # print(range(0,-9,-1))  #这样无法得到列表 # # print(list(range(0,-9,-1)))#结果为列表               \"\"\" 使用zip() 进行并行迭代：P120 \"\"\" # #迭代：将for循环用于列表、字符串、字典的键值对就是迭代 # # zip()的参数需要是可迭代对象，返回值是一个zip对象 # # #当参数为普通序列时候 # a = \"hello\" # b = \"world\" # c = \"gaojixu\" # print(zip(a,b))  #函数名表示函数在内存中的信息 # print(list(zip(a,b)))# 序列长度相同的时候 # print(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准 # # #当参数为字典的时候 # d = {\"name\":\"GJX\"} # e = {\"age\":\"23\"} # print(list(zip(d,e))) #得到的是所有的键值 # # # #当参数是一个序列时候 # f = \"hello\" # g = \"world\" # print(list(zip(f))) # print(list(zip(g))) # # # #应用，两个序列对应位置元素运算 # a = [1,2,4,5,6] # b = [2,3,4,5,7] # d = [] # for x,y in zip(a,b): #     d.append(x + y) # # # print(d)     ''' enumerate的使用；p123 ''' # # ''' # 同时得到列表中元素的索引和元素 p123 # ''' # # 一般方法 # week = ['monday','sunday','friday'] # for i in range(len(week)): #     print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号 # # #使用enumerate 内建函数 # for (i,day) in enumerate(week): #     print(day + \"is\" + str(i)) # # ''' # 直接显示列表中的索引和元素  p124 # ''' # seasons = ['spring','summer','fall','winter'] # print(list(enumerate(seasons))) # print(list(enumerate(seasons,start = 1))) # # ''' # 当原本的为字符串的时候，需要先转换为列表  p124 # ''' # # #将字符串中部分字符进行替换 # # raw = \"hello world ,you are a good good student .\" # raw_list = raw.split() # # for i,string in enumerate(raw_list): #     #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了 #     if \"good\" in string: #         raw_list[i] = \"best\" # # print(raw_list)           ''' 列表解析：p125 '''   # #得到1-9的平方，放入列表并打印 # # outlist1 = [] # for i in range(1,10): #     outlist1.append(i**2) # print(outlist1) # # #使用列表解析得到 # outlist2 = [(i**2) for i in range(1,10)] # print(outlist2) # # # #删除列表中字符串前后的空格 # raw_list = [\"  hello\",\" lala \",\"world  \"] # ans_list = [one.strip() for one in raw_list] # print(ans_list)         ''' while循环示例：P129 ''' # import  random # num = random.randint(1,100) # guess = 0 # # while True: #     num_input = input(\"please input one interger that is in 1 to 100:\") #     guess +=1 #     if not num_input.isdigit(): #         print(\"please input interger.\") #     elif int(num_input) < 0 or int(num_input) > 100: #         print(\"please input number that is in 1 to 100:\") #     else: #         if num == int(num_input): #             print(\"you are so smart\") #             break #         elif num > int(num_input): #             print(\"the true num is bigger than you input\") #         elif num < int(num_input): #             print(\"the true num is smaller than you input\") #         else: #             print(\"There is something bad\")         ''' while ...else P130 ''' # count = 0 # # while count < 5 : # #     print(count ,\"is less than 5\") # #     count += 1 # # else: # #     print(count,\"is not less than 5\")       ''' for ...else  P131 ''' # from math import sqrt # for i in range(84,80,-1): #     root = sqrt(i) #     if root == int (root): #         print(root ,\"is the sqrt of\",i) #         break                            #这个break作用是？ #     else: #         print(\"nothing\")     ''' 读文件：p131 ''' # f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 # for line in f: #     print(line,end = ' ')     ''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   # with open(\"abc.txt\") as fn: #     print(fn.read())       ''' 文件的状态：p136 ''' # # import os # file_state = os.stat(\"abc.txt\") # print(file_state) #   ''' 换种时间显示方式： ''' # import os # # file_state = os.stat(\"abc.txt\") # # import time # # state_file = time.localtime(file_state.st_ctime) # # print(state_file)     ''' 使用fileinput 模块进行大文件的读取 ''' # import fileinput # for line in fileinput.input(\"lianxi.txt\"): #     print(line,end = \" \") #         ''' 使用seek ''' # # f = open(\"f.txt\",\"rb\") # print(f.readline(),end = \" \") # print(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置 # # f.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头 # print(f.tell()) # print(f.readline(),end = \" \") # print(f.tell()) # # # #seek的标准形式为 :seek(offset[,whence]) # # #whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0 # #whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动 # #whence 如果为2，表示相对于文件末尾移动 # # f.seek(-5,1) #以当前位置为准，往后移动两个 # print(f.readline(),end = \" \")       ''' 闭包：p168 ''' # def foo(): #     a = 3 #     def bar(): #         return a #     return bar # # f = foo() # print(f())       ''' lambda的使用：p170 ''' # lam = lambda x,y :x + y # buf = [] # for i in range(10): #     buf.append(lam(i,i+1)) # # print(buf)     ''' map使用 p172 ''' # numbers1 = [1,2,3,4,5,6,7,8,9] # numbers2 = [1,2,3,4,5,6,7,8,9] # numbers3 = [1,2] # # a =list(map(lambda x,y: x+y ,numbers1,numbers2)) # b =list(map(lambda x,y: x+y ,numbers1,numbers3)) # print(a) # print(b)       ''' reduce p173 ''' # from functools import reduce # a = reduce(lambda x,y:x+y,[1,2,3,4,5]) # print(a)"]],[11903,11903],[16971,16971]]],[1548156607260,["gjx16@GJXAIOU",[[-1,11903,"#!/usr/bin/env python # -*- coding:utf-8 -*- #@Time :2018/11/15 22:04 #Author:GJXAIOU     \"\"\" 本代码为第二章练习代码，从笔记中的2.4.3中开始，其他将会陆续补充   \"\"\"       \"\"\" range 的使用 ；P118   \"\"\" # print(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推 # print(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range # # print(range(0,-9,-1))  #这样无法得到列表 # # print(list(range(0,-9,-1)))#结果为列表               \"\"\" 使用zip() 进行并行迭代：P120 \"\"\" # #迭代：将for循环用于列表、字符串、字典的键值对就是迭代 # # zip()的参数需要是可迭代对象，返回值是一个zip对象 # # #当参数为普通序列时候 # a = \"hello\" # b = \"world\" # c = \"gaojixu\" # print(zip(a,b))  #函数名表示函数在内存中的信息 # print(list(zip(a,b)))# 序列长度相同的时候 # print(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准 # # #当参数为字典的时候 # d = {\"name\":\"GJX\"} # e = {\"age\":\"23\"} # print(list(zip(d,e))) #得到的是所有的键值 # # # #当参数是一个序列时候 # f = \"hello\" # g = \"world\" # print(list(zip(f))) # print(list(zip(g))) # # # #应用，两个序列对应位置元素运算 # a = [1,2,4,5,6] # b = [2,3,4,5,7] # d = [] # for x,y in zip(a,b): #     d.append(x + y) # # # print(d)     ''' enumerate的使用；p123 ''' # # ''' # 同时得到列表中元素的索引和元素 p123 # ''' # # 一般方法 # week = ['monday','sunday','friday'] # for i in range(len(week)): #     print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号 # # #使用enumerate 内建函数 # for (i,day) in enumerate(week): #     print(day + \"is\" + str(i)) # # ''' # 直接显示列表中的索引和元素  p124 # ''' # seasons = ['spring','summer','fall','winter'] # print(list(enumerate(seasons))) # print(list(enumerate(seasons,start = 1))) # # ''' # 当原本的为字符串的时候，需要先转换为列表  p124 # ''' # # #将字符串中部分字符进行替换 # # raw = \"hello world ,you are a good good student .\" # raw_list = raw.split() # # for i,string in enumerate(raw_list): #     #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了 #     if \"good\" in string: #         raw_list[i] = \"best\" # # print(raw_list)           ''' 列表解析：p125 '''   # #得到1-9的平方，放入列表并打印 # # outlist1 = [] # for i in range(1,10): #     outlist1.append(i**2) # print(outlist1) # # #使用列表解析得到 # outlist2 = [(i**2) for i in range(1,10)] # print(outlist2) # # # #删除列表中字符串前后的空格 # raw_list = [\"  hello\",\" lala \",\"world  \"] # ans_list = [one.strip() for one in raw_list] # print(ans_list)         ''' while循环示例：P129 ''' # import  random # num = random.randint(1,100) # guess = 0 # # while True: #     num_input = input(\"please input one interger that is in 1 to 100:\") #     guess +=1 #     if not num_input.isdigit(): #         print(\"please input interger.\") #     elif int(num_input) < 0 or int(num_input) > 100: #         print(\"please input number that is in 1 to 100:\") #     else: #         if num == int(num_input): #             print(\"you are so smart\") #             break #         elif num > int(num_input): #             print(\"the true num is bigger than you input\") #         elif num < int(num_input): #             print(\"the true num is smaller than you input\") #         else: #             print(\"There is something bad\")         ''' while ...else P130 ''' # count = 0 # # while count < 5 : # #     print(count ,\"is less than 5\") # #     count += 1 # # else: # #     print(count,\"is not less than 5\")       ''' for ...else  P131 ''' # from math import sqrt # for i in range(84,80,-1): #     root = sqrt(i) #     if root == int (root): #         print(root ,\"is the sqrt of\",i) #         break                            #这个break作用是？ #     else: #         print(\"nothing\")     ''' 读文件：p131 ''' # f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径 # for line in f: #     print(line,end = ' ')     ''' 使用with  p135 '''   #常用的使用文件方法： # fn = open(\"abc.txt\",\"a\") #打开文件 # fn.write(\"python is the best\") #写入文件 # fn.close()     #关闭文件     #使用with进行操作，这时候就不需要使用close   # with open(\"abc.txt\") as fn: #     print(fn.read())       ''' 文件的状态：p136 ''' # # import os # file_state = os.stat(\"abc.txt\") # print(file_state) #   ''' 换种时间显示方式： ''' # import os # # file_state = os.stat(\"abc.txt\") # # import time # # state_file = time.localtime(file_state.st_ctime) # # print(state_file)     ''' 使用fileinput 模块进行大文件的读取 ''' # import fileinput # for line in fileinput.input(\"lianxi.txt\"): #     print(line,end = \" \") #         ''' 使用seek ''' # # f = open(\"f.txt\",\"rb\") # print(f.readline(),end = \" \") # print(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置 # # f.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头 # print(f.tell()) # print(f.readline(),end = \" \") # print(f.tell()) # # # #seek的标准形式为 :seek(offset[,whence]) # # #whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0 # #whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动 # #whence 如果为2，表示相对于文件末尾移动 # # f.seek(-5,1) #以当前位置为准，往后移动两个 # print(f.readline(),end = \" \")       ''' 闭包：p168 ''' # def foo(): #     a = 3 #     def bar(): #         return a #     return bar # # f = foo() # print(f())       ''' lambda的使用：p170 ''' # lam = lambda x,y :x + y # buf = [] # for i in range(10): #     buf.append(lam(i,i+1)) # # print(buf)     ''' map使用 p172 ''' # numbers1 = [1,2,3,4,5,6,7,8,9] # numbers2 = [1,2,3,4,5,6,7,8,9] # numbers3 = [1,2] # # a =list(map(lambda x,y: x+y ,numbers1,numbers2)) # b =list(map(lambda x,y: x+y ,numbers1,numbers3)) # print(a) # print(b)       ''' reduce p173 ''' # from functools import reduce # a = reduce(lambda x,y:x+y,[1,2,3,4,5]) # print(a)"]],[16971,16971],[11903,11903]]],[1548156610094,["gjx16@GJXAIOU",[[1,11903,"#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#@Time :2018/11/15 22:04\n#Author:GJXAIOU\n\n\n\"\"\"\n本代码为第二章练习代码，从笔记中的2.4.3中开始，其他将会陆续补充\n\n\"\"\"\n\n\n\n\"\"\"\nrange 的使用 ；P118\n\n\"\"\"\n# print(range(1,7,2)) #第一个值为1，然后是start+1 * step ，以此类推\n# print(type(range(1,7,2))) #range 得到的结果为一个序列类型，序列的名字就是range\n#\n# print(range(0,-9,-1))  #这样无法得到列表\n#\n# print(list(range(0,-9,-1)))#结果为列表\n\n\n\n\n\n\n\n\"\"\"\n使用zip() 进行并行迭代：P120\n\"\"\"\n# #迭代：将for循环用于列表、字符串、字典的键值对就是迭代\n# # zip()的参数需要是可迭代对象，返回值是一个zip对象\n#\n# #当参数为普通序列时候\n# a = \"hello\"\n# b = \"world\"\n# c = \"gaojixu\"\n# print(zip(a,b))  #函数名表示函数在内存中的信息\n# print(list(zip(a,b)))# 序列长度相同的时候\n# print(list(zip(a,c))) #序列长度不同的时候，以两个中短的那个为准\n#\n# #当参数为字典的时候\n# d = {\"name\":\"GJX\"}\n# e = {\"age\":\"23\"}\n# print(list(zip(d,e))) #得到的是所有的键值\n#\n#\n# #当参数是一个序列时候\n# f = \"hello\"\n# g = \"world\"\n# print(list(zip(f)))\n# print(list(zip(g)))\n#\n#\n# #应用，两个序列对应位置元素运算\n# a = [1,2,4,5,6]\n# b = [2,3,4,5,7]\n# d = []\n# for x,y in zip(a,b):\n#     d.append(x + y)\n#\n#\n# print(d)\n\n\n'''\nenumerate的使用；p123\n'''\n#\n# '''\n# 同时得到列表中元素的索引和元素 p123\n# '''\n# # 一般方法\n# week = ['monday','sunday','friday']\n# for i in range(len(week)):\n#     print(week[i] + 'is' + str(i)) #str(i) ,将整数i 转换为字符串类型，因为有加号\n#\n# #使用enumerate 内建函数\n# for (i,day) in enumerate(week):\n#     print(day + \"is\" + str(i))\n#\n# '''\n# 直接显示列表中的索引和元素  p124\n# '''\n# seasons = ['spring','summer','fall','winter']\n# print(list(enumerate(seasons)))\n# print(list(enumerate(seasons,start = 1)))\n#\n# '''\n# 当原本的为字符串的时候，需要先转换为列表  p124\n# '''\n#\n# #将字符串中部分字符进行替换\n#\n# raw = \"hello world ,you are a good good student .\"\n# raw_list = raw.split()\n#\n# for i,string in enumerate(raw_list):\n#     #if string ==\"good\":  使用该语句只能查找得到第一个good,后面的改不了\n#     if \"good\" in string:\n#         raw_list[i] = \"best\"\n#\n# print(raw_list)\n\n\n\n\n\n'''\n列表解析：p125\n'''\n\n# #得到1-9的平方，放入列表并打印\n#\n# outlist1 = []\n# for i in range(1,10):\n#     outlist1.append(i**2)\n# print(outlist1)\n#\n# #使用列表解析得到\n# outlist2 = [(i**2) for i in range(1,10)]\n# print(outlist2)\n#\n#\n# #删除列表中字符串前后的空格\n# raw_list = [\"  hello\",\" lala \",\"world  \"]\n# ans_list = [one.strip() for one in raw_list]\n# print(ans_list)\n\n\n\n\n'''\nwhile循环示例：P129\n'''\n# import  random\n# num = random.randint(1,100)\n# guess = 0\n#\n# while True:\n#     num_input = input(\"please input one interger that is in 1 to 100:\")\n#     guess +=1\n#     if not num_input.isdigit():\n#         print(\"please input interger.\")\n#     elif int(num_input) < 0 or int(num_input) > 100:\n#         print(\"please input number that is in 1 to 100:\")\n#     else:\n#         if num == int(num_input):\n#             print(\"you are so smart\")\n#             break\n#         elif num > int(num_input):\n#             print(\"the true num is bigger than you input\")\n#         elif num < int(num_input):\n#             print(\"the true num is smaller than you input\")\n#         else:\n#             print(\"There is something bad\")\n\n\n\n\n'''\nwhile ...else P130\n'''\n# count = 0\n# # while count < 5 :\n# #     print(count ,\"is less than 5\")\n# #     count += 1\n# # else:\n# #     print(count,\"is not less than 5\")\n\n\n\n'''\nfor ...else  P131\n'''\n# from math import sqrt\n# for i in range(84,80,-1):\n#     root = sqrt(i)\n#     if root == int (root):\n#         print(root ,\"is the sqrt of\",i)\n#         break                            #这个break作用是？\n#     else:\n#         print(\"nothing\")\n\n\n'''\n读文件：p131\n'''\n# f = open(\"123.txt\") #表示该文件在当前目录下，如果在其他目录下要写上路径\n# for line in f:\n#     print(line,end = ' ')\n\n\n'''\n使用with  p135\n'''\n\n#常用的使用文件方法：\n# fn = open(\"abc.txt\",\"a\") #打开文件\n# fn.write(\"python is the best\") #写入文件\n# fn.close()     #关闭文件\n\n\n#使用with进行操作，这时候就不需要使用close\n\n# with open(\"abc.txt\") as fn:\n#     print(fn.read())\n\n\n\n'''\n文件的状态：p136\n'''\n#\n# import os\n# file_state = os.stat(\"abc.txt\")\n# print(file_state)\n#\n\n'''\n换种时间显示方式：\n'''\n# import os\n# # file_state = os.stat(\"abc.txt\")\n# # import time\n# # state_file = time.localtime(file_state.st_ctime)\n# # print(state_file)\n\n\n'''\n使用fileinput 模块进行大文件的读取\n'''\n# import fileinput\n# for line in fileinput.input(\"lianxi.txt\"):\n#     print(line,end = \" \")\n#\n\n\n\n\n'''\n使用seek   \n'''\n#\n# f = open(\"f.txt\",\"rb\")\n# print(f.readline(),end = \" \")\n# print(f.tell()) #文件名.tell()   显示当前偏移量移动指针的位置\n#\n# f.seek(0) #将指针的位置偏移量置为0，相当于把位置移动到开头\n# print(f.tell())\n# print(f.readline(),end = \" \")\n# print(f.tell())\n#\n#\n# #seek的标准形式为 :seek(offset[,whence])\n#\n# #whence 默认值为0，表示从文件开头进行计算偏移量，这时候offset必须大于等于0\n# #whence 如果为1，表示从当前位置开始计算偏移量，如果offence为负数，表示往前移动，为正表示往后移动\n# #whence 如果为2，表示相对于文件末尾移动\n#\n# f.seek(-5,1) #以当前位置为准，往后移动两个\n# print(f.readline(),end = \" \")\n\n\n\n'''\n闭包：p168\n'''\n# def foo():\n#     a = 3\n#     def bar():\n#         return a\n#     return bar\n#\n# f = foo()\n# print(f())\n\n\n\n'''\nlambda的使用：p170\n'''\n# lam = lambda x,y :x + y\n# buf = []\n# for i in range(10):\n#     buf.append(lam(i,i+1))\n#\n# print(buf)\n\n\n'''\nmap使用 p172\n'''\n# numbers1 = [1,2,3,4,5,6,7,8,9]\n# numbers2 = [1,2,3,4,5,6,7,8,9]\n# numbers3 = [1,2]\n#\n# a =list(map(lambda x,y: x+y ,numbers1,numbers2))\n# b =list(map(lambda x,y: x+y ,numbers1,numbers3))\n# print(a)\n# print(b)\n\n\n\n'''\nreduce p173\n'''\n# from functools import reduce\n# a = reduce(lambda x,y:x+y,[1,2,3,4,5])\n# print(a)\n\n\n\n\n\n\n"]],[11903,11903],[16919,16919]]],[1548156616856,["gjx16@GJXAIOU",[[1,11880,"\n"]],[11879,11879],[11880,11880]]],[1548156617026,["gjx16@GJXAIOU",[[1,11881,"\n"]],[11880,11880],[11881,11881]]]],null,"gjx16@GJXAIOU"]]}