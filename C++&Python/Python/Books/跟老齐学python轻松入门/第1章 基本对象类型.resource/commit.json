{"compress":true,"commitItems":[["df01e180-cb9e-4970-9e4d-444873509a79",1540948377889,"",[[1540948334085,["gjx16@GJXAIOU",[[1,0,"# 第1章 基本对象类型\n\n\n\n"]],[0,0],[15,15]]],[1540948349507,["gjx16@GJXAIOU",[[-1,15,"\n"],[1,16,"1"]],[15,15],[16,16]]],[1540948370247,["gjx16@GJXAIOU",[[1,16,".python可以自动处理大整数问题，不必担心溢出"]],[16,16],[41,41]]],[1540948382275,["gjx16@GJXAIOU",[[1,41,"\n\n"]],[41,41],[42,42]]],[1540948384065,["gjx16@GJXAIOU",[[-1,42,"\n"],[1,43,"2"]],[42,42],[43,43]]],[1540948395056,["gjx16@GJXAIOU",[[1,43,".单精度浮点数（）"]],[43,43],[52,52]]],[1540948399158,["gjx16@GJXAIOU",[[1,51,"4个字节"]],[51,51],[55,55]]],[1540948408502,["gjx16@GJXAIOU",[[1,56,"在计算机内部存储方式："]],[56,56],[67,67]]],[1540948408923,["gjx16@GJXAIOU",[[1,67,"\n\n"]],[67,67],[68,68]]],[1540948412531,["gjx16@GJXAIOU",[[-1,68,"\n"],[1,69,"1"]],[68,68],[69,69]]],[1540948414272,["gjx16@GJXAIOU",[[1,69,"为"]],[69,69],[70,70]]],[1540948415090,["gjx16@GJXAIOU",[[-1,69,"为"]],[70,70],[69,69]]],[1540948425877,["gjx16@GJXAIOU",[[1,69,"位为符号位（）"]],[69,69],[76,76]]],[1540948437417,["gjx16@GJXAIOU",[[1,75,"0为正，1为符"]],[75,75],[82,82]]],[1540948437986,["gjx16@GJXAIOU",[[-1,81,"符"]],[82,82],[81,81]]],[1540948442110,["gjx16@GJXAIOU",[[1,81,"负"]],[81,81],[82,82]]],[1540948444164,["gjx16@GJXAIOU",[[1,83,"，"]],[83,83],[84,84]]],[1540949323242,["gjx16@GJXAIOU",[[1,84,"8位"]],[84,84],[86,86]]],[1540949389941,["gjx16@GJXAIOU",[[1,86,"用作整数，最后的23位表示有效数字"]],[86,86],[103,103]]],[1540949403264,["gjx16@GJXAIOU",[[1,103,"\n\n"]],[103,103],[104,104]]],[1540949409920,["gjx16@GJXAIOU",[[1,105,"\n"]],[104,104],[105,105]]],[1540949410371,["gjx16@GJXAIOU",[[-1,105,"\n"],[1,106,"3"]],[105,105],[106,106]]],[1540949450869,["gjx16@GJXAIOU",[[1,106,".每个对象在内存中都有自己的地址，这就是"]],[106,106],[126,126]]],[1540949452280,["gjx16@GJXAIOU",[[-1,123,"这就是"]],[126,126],[123,123]]],[1540949464312,["gjx16@GJXAIOU",[[1,123,"可以使用函数``"]],[123,123],[131,131]]],[1540949470473,["gjx16@GJXAIOU",[[1,130,"id()"]],[130,130],[134,134]]],[1540949487323,["gjx16@GJXAIOU",[[1,135,"查看每个对象的内存地址；"]],[135,135],[147,147]]],[1540949487888,["gjx16@GJXAIOU",[[1,147,"\n\n"]],[147,147],[148,148]]],[1540949492800,["gjx16@GJXAIOU",[[-1,148,"\n"]],[148,148],[147,147]]],[1540949501682,["gjx16@GJXAIOU",[[1,147,"但是通过``"]],[147,147],[153,153]]],[1540949504291,["gjx16@GJXAIOU",[[1,152,"i()"]],[152,152],[155,155]]],[1540949505295,["gjx16@GJXAIOU",[[-1,153,"()"]],[155,155],[153,153]]],[1540949506554,["gjx16@GJXAIOU",[[1,153,"d()"]],[153,153],[156,156]]],[1540949513876,["gjx16@GJXAIOU",[[1,157,"得到的内存地址是"]],[157,157],[165,165]]],[1540949523376,["gjx16@GJXAIOU",[[1,165,"只读的，不能够修改"]],[165,165],[174,174]]],[1540949534546,["gjx16@GJXAIOU",[[1,169,"**"],[1,174,"**"]],[169,174],[169,178]]],[1540949537514,["gjx16@GJXAIOU",[[1,178,"。"]],[178,178],[179,179]]],[1540949537784,["gjx16@GJXAIOU",[[1,180,"\n"]],[179,179],[180,180]]],[1540949543448,["gjx16@GJXAIOU",[[1,181,"\n"]],[180,180],[181,181]]],[1540949545313,["gjx16@GJXAIOU",[[-1,181,"\n"],[1,182,"4"]],[181,181],[182,182]]],[1540949548540,["gjx16@GJXAIOU",[[1,182,".使用哈数"]],[182,182],[187,187]]],[1540949549327,["gjx16@GJXAIOU",[[-1,185,"哈数"]],[187,187],[185,185]]],[1540949552799,["gjx16@GJXAIOU",[[1,185,"函数``"]],[185,185],[189,189]]],[1540949558111,["gjx16@GJXAIOU",[[1,188,"type()"]],[188,188],[194,194]]],[1540949576497,["gjx16@GJXAIOU",[[1,195,"可以查看对象的类型，当然"]],[195,195],[207,207]]],[1540949584685,["gjx16@GJXAIOU",[[1,207,"得到的结果也是制度"]],[207,207],[216,216]]],[1540949585838,["gjx16@GJXAIOU",[[-1,214,"制度"]],[216,216],[214,214]]],[1540949590018,["gjx16@GJXAIOU",[[1,214,"只读的；"]],[214,214],[218,218]]],[1540949590489,["gjx16@GJXAIOU",[[1,218,"\n\n"]],[218,218],[219,219]]],[1540949608681,["gjx16@GJXAIOU",[[-1,219,"\n"],[1,220,"5"]],[219,219],[220,220]]],[1540949610202,["gjx16@GJXAIOU",[[1,220,".（"]],[220,220],[222,222]]],[1540949610648,["gjx16@GJXAIOU",[[-1,221,"（"]],[222,222],[221,221]]],[1540949612089,["gjx16@GJXAIOU",[[1,221,"****"]],[221,221],[223,223]]],[1540949615459,["gjx16@GJXAIOU",[[1,223,"睢县"]],[223,223],[225,225]]],[1540949616486,["gjx16@GJXAIOU",[[-1,223,"睢县"]],[225,225],[223,223]]],[1540949628635,["gjx16@GJXAIOU",[[1,223,"对象有类型，变量无类型"]],[223,223],[234,234]]],[1540949633553,["gjx16@GJXAIOU",[[1,236,"\n\n"]],[236,236],[237,237]]],[1540949634070,["gjx16@GJXAIOU",[[1,238,"\n"]],[237,237],[238,238]]],[1540949635967,["gjx16@GJXAIOU",[[-1,238,"\n"],[1,239,"6"]],[238,238],[239,239]]],[1540949636571,["gjx16@GJXAIOU",[[1,239,"."]],[239,239],[240,240]]],[1540949681448,["gjx16@GJXAIOU",[[1,240,"四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数"]],[240,240],[273,273]]],[1540949682226,["gjx16@GJXAIOU",[[1,273,"\n\n"]],[273,273],[274,274]]],[1540949701423,["gjx16@GJXAIOU",[[1,275,"\n"]],[274,274],[275,275]]],[1540949701905,["gjx16@GJXAIOU",[[-1,275,"\n"],[1,276,"7"]],[275,275],[276,276]]],[1540949721920,["gjx16@GJXAIOU",[[1,276,".浮点数会出现溢出的问题    ``"]],[276,276],[294,294]]],[1540949723227,["gjx16@GJXAIOU",[[1,293,"*"]],[293,293],[294,294]]],[1540949726275,["gjx16@GJXAIOU",[[1,295,"   ``"]],[295,295],[300,300]]],[1540949729179,["gjx16@GJXAIOU",[[1,299,"**  "]],[299,299],[303,303]]],[1540949730016,["gjx16@GJXAIOU",[[-1,301,"  "]],[303,303],[301,301]]],[1540949733179,["gjx16@GJXAIOU",[[1,302,"    ``"]],[302,302],[308,308]]],[1540949739280,["gjx16@GJXAIOU",[[1,307,"e-08"]],[307,307],[311,311]]],[1540949756424,["gjx16@GJXAIOU",[[1,297,"表示相城·"]],[297,297],[302,302]]],[1540949762263,["gjx16@GJXAIOU",[[-1,299,"相城·"]],[302,302],[299,299]]],[1540949767810,["gjx16@GJXAIOU",[[1,299,"相乘"]],[299,299],[301,301]]],[1540949770624,["gjx16@GJXAIOU",[[1,310," "]],[306,306],[307,307]]],[1540949777572,["gjx16@GJXAIOU",[[1,307,"表示乘幂"]],[307,307],[311,311]]],[1540949804705,["gjx16@GJXAIOU",[[1,321," 表示10的-8次方、"]],[321,321],[332,332]]],[1540965566716,["gjx16@GJXAIOU",[[-1,331,"、"]],[332,332],[331,331]]],[1540965568060,["gjx16@GJXAIOU",[[1,331,"；"]],[331,331],[332,332]]],[1540965568475,["gjx16@GJXAIOU",[[1,332,"\n\n"]],[332,332],[333,333]]],[1540965585649,["gjx16@GJXAIOU",[[1,334,"\n"]],[333,333],[334,334]]],[1540965588013,["gjx16@GJXAIOU",[[-1,334,"\n"],[1,335,"8"]],[334,334],[335,335]]],[1540965610830,["gjx16@GJXAIOU",[[1,335,".python中的===="]],[335,335],[346,346]]],[1540965638430,["gjx16@GJXAIOU",[[1,346,"除法的结果都是浮点数，不论参与运算到 数有没有浮点数"]],[346,346],[372,372]]],[1540965641042,["gjx16@GJXAIOU",[[1,374,"\n\n"]],[374,374],[375,375]]],[1540965642119,["gjx16@GJXAIOU",[[1,376,"\n"]],[375,375],[376,376]]],[1540965645929,["gjx16@GJXAIOU",[[-1,376,"\n"],[1,377,"9"]],[376,376],[377,377]]],[1540965649836,["gjx16@GJXAIOU",[[1,377,"、``"]],[377,377],[380,380]]],[1540965653795,["gjx16@GJXAIOU",[[1,379,"//"]],[379,379],[381,381]]],[1540965659748,["gjx16@GJXAIOU",[[1,382," 表示取余"]],[382,382],[387,387]]],[1540965662560,["gjx16@GJXAIOU",[[-1,385,"取余"]],[387,387],[385,385]]],[1540965669793,["gjx16@GJXAIOU",[[1,385,"两个数 "]],[385,385],[389,389]]],[1540965672248,["gjx16@GJXAIOU",[[-1,388," "]],[389,389],[388,388]]],[1540965684484,["gjx16@GJXAIOU",[[1,388,"现出"]],[388,388],[390,390]]],[1540965687792,["gjx16@GJXAIOU",[[-1,388,"现出"]],[390,390],[388,388]]],[1540965700419,["gjx16@GJXAIOU",[[1,388,"相除之后的商（）"]],[388,388],[396,396]]],[1540965707261,["gjx16@GJXAIOU",[[1,395,"取整"]],[395,395],[397,397]]],[1540965715295,["gjx16@GJXAIOU",[[1,398,"，这个商已定位"]],[398,398],[405,405]]],[1540965716359,["gjx16@GJXAIOU",[[-1,402,"已定位"]],[405,405],[402,402]]],[1540965719804,["gjx16@GJXAIOU",[[1,402,"一定为整数"]],[402,402],[407,407]]],[1540965720312,["gjx16@GJXAIOU",[[1,407,"\n\n"]],[407,407],[408,408]]],[1540965721081,["gjx16@GJXAIOU",[[1,409,"\n"]],[408,408],[409,409]]],[1540965776858,["gjx16@GJXAIOU",[[-1,409,"\n"],[1,410,"1"]],[409,409],[410,410]]],[1540965782916,["gjx16@GJXAIOU",[[1,410,"0、python中的工具"]],[410,410],[422,422]]],[1540965786839,["gjx16@GJXAIOU",[[-1,420,"工具"]],[422,422],[420,420]]],[1540965789022,["gjx16@GJXAIOU",[[1,420,"一定"]],[420,420],[422,422]]],[1540965789592,["gjx16@GJXAIOU",[[-1,420,"一定"]],[422,422],[420,420]]],[1540965791494,["gjx16@GJXAIOU",[[1,420,"已经"]],[420,420],[422,422]]],[1540965809843,["gjx16@GJXAIOU",[[1,422,"写好的工具叫做 “”"]],[422,422],[432,432]]],[1540965814109,["gjx16@GJXAIOU",[[1,431,"库"]],[431,431],[432,432]]],[1540965819734,["gjx16@GJXAIOU",[[1,433," ，或者“”"]],[433,433],[439,439]]],[1540965827765,["gjx16@GJXAIOU",[[1,438,"模块"]],[438,438],[440,440]]],[1540965835946,["gjx16@GJXAIOU",[[1,441,"、或者“”"]],[441,441],[446,446]]],[1540965838941,["gjx16@GJXAIOU",[[1,445,"类库"]],[445,445],[447,447]]],[1540965840496,["gjx16@GJXAIOU",[[1,448,"\n\n"]],[448,448],[449,449]]],[1540965840896,["gjx16@GJXAIOU",[[1,450,"\n"]],[449,449],[450,450]]],[1540965842113,["gjx16@GJXAIOU",[[-1,450,"\n"],[1,451,"1"]],[450,450],[451,451]]],[1540965846316,["gjx16@GJXAIOU",[[1,451,"1.****"]],[451,451],[455,455]]],[1540965851757,["gjx16@GJXAIOU",[[1,455,"导入模块"]],[455,455],[459,459]]],[1540965853393,["gjx16@GJXAIOU",[[-1,458,"块"]],[459,459],[458,458]]],[1540965855476,["gjx16@GJXAIOU",[[1,458,"快"]],[458,458],[459,459]]],[1540965856291,["gjx16@GJXAIOU",[[-1,457,"模快"]],[459,459],[457,457]]],[1540965859382,["gjx16@GJXAIOU",[[1,457,"模块："]],[457,457],[460,460]]],[1540965861506,["gjx16@GJXAIOU",[[1,462,"\n\n"]],[462,462],[463,463]]],[1540965862544,["gjx16@GJXAIOU",[[1,464,"\n"]],[463,463],[464,464]]],[1540965862915,["gjx16@GJXAIOU",[[-1,464,"\n"],[1,465,"-"]],[464,464],[465,465]]],[1540965875120,["gjx16@GJXAIOU",[[1,465," 单一模块： ``"]],[465,465],[474,474]]],[1540965891010,["gjx16@GJXAIOU",[[1,473,"inport module-name"]],[473,473],[491,491]]],[1540965912059,["gjx16@GJXAIOU",[[1,492,"  表示导入模块：module-name"]],[492,492],[512,512]]],[1540965926115,["gjx16@GJXAIOU",[[1,512,"\n- 大模块中的小模块： ``"]],[512,512],[527,527]]],[1540965959474,["gjx16@GJXAIOU",[[1,526,"from module1 import module11"]],[526,526],[554,554]]],[1540965968139,["gjx16@GJXAIOU",[[1,555," ,表示"]],[555,555],[559,559]]],[1540965982133,["gjx16@GJXAIOU",[[1,559,"从库module1（）"]],[559,559],[570,570]]],[1540965985662,["gjx16@GJXAIOU",[[1,569,"大模块"]],[569,569],[572,572]]],[1540965987540,["gjx16@GJXAIOU",[[1,573,"，"]],[573,573],[574,574]]],[1540965988408,["gjx16@GJXAIOU",[[-1,573,"，"]],[574,574],[573,573]]],[1540965996164,["gjx16@GJXAIOU",[[1,573,"中导入"]],[573,573],[576,576]]],[1540966000687,["gjx16@GJXAIOU",[[-1,573,"中导入"]],[576,576],[573,573]]],[1540966007757,["gjx16@GJXAIOU",[[1,573,"，里面的小模块"]],[573,573],[580,580]]],[1540966010808,["gjx16@GJXAIOU",[[-1,577,"小模块"]],[580,580],[577,577]]],[1540966015267,["gjx16@GJXAIOU",[[1,577,"子模块\n- ··"]],[577,577],[585,585]]],[1540966016576,["gjx16@GJXAIOU",[[-1,582," ··"]],[585,585],[582,582]]],[1540966016920,["gjx16@GJXAIOU",[[-1,581,"-"],[1,582,"\n"]],[582,582],[581,581]]],[1540966017407,["gjx16@GJXAIOU",[[-1,581,"\n"]],[581,581],[580,580]]],[1540966027001,["gjx16@GJXAIOU",[[1,580," module11"]],[580,580],[589,589]]],[1540966027711,["gjx16@GJXAIOU",[[1,590,"- \n"]],[589,589],[592,592]]],[1540966027880,["gjx16@GJXAIOU",[[-1,590,"- "]],[592,592],[591,591]]],[1540966028096,["gjx16@GJXAIOU",[[1,591,"\n"]],[591,591],[592,592]]],[1540966029104,["gjx16@GJXAIOU",[[1,592,"\n"]],[592,592],[593,593]]],[1540966030689,["gjx16@GJXAIOU",[[-1,592,"\n"],[1,593,"1"]],[593,593],[593,593]]],[1540966032218,["gjx16@GJXAIOU",[[1,593,"2."]],[593,593],[595,595]]],[1540966065588,["gjx16@GJXAIOU",[[1,595,"zheng"]],[595,595],[600,600]]],[1540966066967,["gjx16@GJXAIOU",[[-1,595,"zheng"]],[600,600],[595,595]]],[1540966077183,["gjx16@GJXAIOU",[[1,595,"针对python中的浮点数稳点"]],[595,595],[610,610]]],[1540966077849,["gjx16@GJXAIOU",[[-1,608,"稳点"]],[610,610],[608,608]]],[1540966079859,["gjx16@GJXAIOU",[[1,608,"问题"]],[608,608],[610,610]]],[1540966080608,["gjx16@GJXAIOU",[[1,610,"\n\n"]],[610,610],[611,611]]],[1540966081608,["gjx16@GJXAIOU",[[1,612,"\n"]],[611,611],[612,612]]],[1540966081970,["gjx16@GJXAIOU",[[-1,612,"\n"],[1,613,"-"]],[612,612],[613,613]]],[1540966090715,["gjx16@GJXAIOU",[[1,613," 除法会将无线"]],[613,613],[620,620]]],[1540966091672,["gjx16@GJXAIOU",[[-1,618,"无线"]],[620,620],[618,618]]],[1540966124496,["gjx16@GJXAIOU",[[1,618,"无限循环小数截断，还不是按照四舍五入的截断\n- "]],[618,618],[642,642]]],[1540966128479,["gjx16@GJXAIOU",[[-1,641," "]],[642,642],[641,641]]],[1540966128983,["gjx16@GJXAIOU",[[-1,640,"-"],[1,641,"\n"]],[641,641],[640,640]]],[1540966136388,["gjx16@GJXAIOU",[[1,640,"  解决："]],[640,640],[645,645]]],[1540966139000,["gjx16@GJXAIOU",[[1,646,"  \n"]],[645,645],[648,648]]],[1540966141120,["gjx16@GJXAIOU",[[1,648,"```"]],[648,648],[651,651]]],[1540966143586,["gjx16@GJXAIOU",[[-1,646,"  ```"]],[651,651],[646,646]]],[1540966144049,["gjx16@GJXAIOU",[[-1,646,"\n"]],[646,646],[645,645]]],[1540966144983,["gjx16@GJXAIOU",[[1,646,"  \n"]],[645,645],[648,648]]],[1540966145522,["gjx16@GJXAIOU",[[-1,646,"  "]],[648,648],[646,646]]],[1540966146449,["gjx16@GJXAIOU",[[-1,646,"\n"],[1,647,"`"]],[646,646],[647,647]]],[1540966146824,["gjx16@GJXAIOU",[[1,647,"``"]],[647,647],[649,649]]],[1540966146849,["gjx16@GJXAIOU",[[1,649,"language\n```\n"]],[649,649],[649,657]]],[1540966148338,["gjx16@GJXAIOU",[[-1,649,"language"],[1,657,"p"]],[649,657],[650,650]]],[1540966149097,["gjx16@GJXAIOU",[[1,650,"ython"]],[650,650],[655,655]]],[1540966149666,["gjx16@GJXAIOU",[[1,656,"\n"]],[655,655],[656,656]]],[1540966151561,["gjx16@GJXAIOU",[[1,656,"imp"]],[656,656],[659,659]]],[1540966160545,["gjx16@GJXAIOU",[[1,659,"ort decimal"]],[659,659],[670,670]]],[1540966161415,["gjx16@GJXAIOU",[[1,671,"\n"]],[670,670],[671,671]]],[1540966167243,["gjx16@GJXAIOU",[[1,671,"a = decima;"]],[671,671],[682,682]]],[1540966167919,["gjx16@GJXAIOU",[[-1,681,";"]],[682,682],[681,681]]],[1540966176369,["gjx16@GJXAIOU",[[1,681,"l.Decimal()"]],[681,681],[692,692]]],[1540966178513,["gjx16@GJXAIOU",[[1,691,"\"\""]],[691,691],[693,693]]],[1540966182960,["gjx16@GJXAIOU",[[1,692,"10.0"]],[692,692],[696,696]]],[1540966185145,["gjx16@GJXAIOU",[[1,699,"\n"]],[698,698],[699,699]]],[1540966195768,["gjx16@GJXAIOU",[[1,699,"b= decimal.Decil="]],[699,699],[716,716]]],[1540966196585,["gjx16@GJXAIOU",[[-1,714,"l="]],[716,716],[714,714]]],[1540966198868,["gjx16@GJXAIOU",[[1,714,"mal()"]],[714,714],[719,719]]],[1540966200752,["gjx16@GJXAIOU",[[1,718,"\"\""]],[718,718],[720,720]]],[1540966207184,["gjx16@GJXAIOU",[[1,719,"3"]],[719,719],[720,720]]],[1540966211872,["gjx16@GJXAIOU",[[1,723,"\n"]],[722,722],[723,723]]],[1540966215264,["gjx16@GJXAIOU",[[1,723,"a/b"]],[723,723],[726,726]]],[1540966261479,["gjx16@GJXAIOU",[[1,731,"\n"]],[730,730],[731,731]]],[1540966262178,["gjx16@GJXAIOU",[[1,732,"\n"]],[731,731],[732,732]]],[1540966262978,["gjx16@GJXAIOU",[[-1,732,"\n"],[1,733,"-"]],[732,732],[733,733]]],[1540966264703,["gjx16@GJXAIOU",[[1,733," liang"]],[733,733],[739,739]]],[1540966265711,["gjx16@GJXAIOU",[[-1,734,"liang"]],[739,739],[734,734]]],[1540966269088,["gjx16@GJXAIOU",[[1,734,"两个数"]],[734,734],[737,737]]],[1540966282112,["gjx16@GJXAIOU",[[1,737,"相除将结果保留为分数\n- "]],[737,737],[750,750]]],[1540966283121,["gjx16@GJXAIOU",[[-1,749," "]],[750,750],[749,749]]],[1540966283275,["gjx16@GJXAIOU",[[-1,748,"-"],[1,749,"\n"]],[749,749],[748,748]]],[1540966283720,["gjx16@GJXAIOU",[[-1,748,"\n"]],[748,748],[747,747]]],[1540966285265,["gjx16@GJXAIOU",[[1,747,"``"]],[747,747],[749,749]]],[1540966293297,["gjx16@GJXAIOU",[[1,748,"fa=r"]],[748,748],[752,752]]],[1540966294018,["gjx16@GJXAIOU",[[-1,749,"a=r"]],[752,752],[749,749]]],[1540966297316,["gjx16@GJXAIOU",[[1,749,"ractionm"]],[749,749],[757,757]]],[1540966298016,["gjx16@GJXAIOU",[[-1,756,"m"]],[757,757],[756,756]]],[1540966303513,["gjx16@GJXAIOU",[[1,758,"- \n"]],[757,757],[760,760]]],[1540966304529,["gjx16@GJXAIOU",[[-1,758,"- "]],[760,760],[758,758]]],[1540966306042,["gjx16@GJXAIOU",[[-1,758,"\n"],[1,759,"`"]],[758,758],[759,759]]],[1540966306821,["gjx16@GJXAIOU",[[1,759,"``"]],[759,759],[761,761]]],[1540966306851,["gjx16@GJXAIOU",[[1,761,"language\n```\n"]],[761,761],[761,769]]],[1540966308868,["gjx16@GJXAIOU",[[-1,761,"language"],[1,769,"p"]],[761,769],[762,762]]],[1540966309704,["gjx16@GJXAIOU",[[1,762,"ython"]],[762,762],[767,767]]],[1540966310417,["gjx16@GJXAIOU",[[1,768,"\n"]],[767,767],[768,768]]],[1540966372383,["gjx16@GJXAIOU",[[1,727,"\n"]],[726,726],[727,727]]],[1540966373011,["gjx16@GJXAIOU",[[1,727,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)"]],[727,727],[856,856]]],[1540966377474,["gjx16@GJXAIOU",[[-1,656,"import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\na/b"]],[656,726],[656,656]]],[1540966380424,["gjx16@GJXAIOU",[[1,673,"\n"]],[673,673],[674,674]]],[1540966382881,["gjx16@GJXAIOU",[[1,688,"\n"]],[688,688],[689,689]]],[1540966386064,["gjx16@GJXAIOU",[[-1,656,"\n"]],[656,656],[655,655]]],[1540966389930,["gjx16@GJXAIOU",[[1,793,"\n"]],[791,791],[792,792]]],[1540966391074,["gjx16@GJXAIOU",[[1,792,"cheng"]],[792,792],[797,797]]],[1540966392382,["gjx16@GJXAIOU",[[-1,792,"cheng"]],[797,797],[792,792]]],[1540966396826,["gjx16@GJXAIOU",[[1,792,"程序运行结果；"]],[792,792],[799,799]]],[1540966397711,["gjx16@GJXAIOU",[[-1,798,"；"]],[799,799],[798,798]]],[1540966400297,["gjx16@GJXAIOU",[[1,798,"：``"]],[798,798],[801,801]]],[1540966409959,["gjx16@GJXAIOU",[[1,800,"3.333333333333333333333333333"]],[800,800],[829,829]]],[1540966414344,["gjx16@GJXAIOU",[[1,868,"im"]],[868,868],[870,870]]],[1540966415319,["gjx16@GJXAIOU",[[-1,868,"im"]],[870,870],[868,868]]],[1540966421728,["gjx16@GJXAIOU",[[1,868,"from fractionm"]],[868,868],[882,882]]],[1540966422359,["gjx16@GJXAIOU",[[-1,881,"m"]],[882,882],[881,881]]],[1540966429801,["gjx16@GJXAIOU",[[1,881,"s import "]],[881,881],[890,890]]],[1540966471842,["gjx16@GJXAIOU",[[1,890,"Fra"]],[890,890],[893,893]]],[1540966473496,["gjx16@GJXAIOU",[[-1,892,"a"]],[893,893],[892,892]]],[1540966476458,["gjx16@GJXAIOU",[[1,892,"actionm"]],[892,892],[899,899]]],[1540966477152,["gjx16@GJXAIOU",[[-1,898,"m"]],[899,899],[898,898]]],[1540966480963,["gjx16@GJXAIOU",[[1,899,"\n"]],[898,898],[899,899]]],[1540966541211,["gjx16@GJXAIOU",[[1,868,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python "],[1,898,"\nans = Fraction(10,4)\nprint(ans)"]],[868,898],[982,982]]],[1540966543343,["gjx16@GJXAIOU",[[1,884,"\n"]],[884,884],[885,885]]],[1540966549736,["gjx16@GJXAIOU",[[1,899,"\n"]],[899,899],[900,900]]],[1540966560849,["gjx16@GJXAIOU",[[1,990,"\n"]],[989,989],[990,990]]],[1540966561737,["gjx16@GJXAIOU",[[-1,990,"\n"],[1,991,"c"]],[990,990],[991,991]]],[1540966562025,["gjx16@GJXAIOU",[[1,991,"he"]],[991,991],[993,993]]],[1540966562447,["gjx16@GJXAIOU",[[-1,991,"he"]],[993,993],[991,991]]],[1540966562791,["gjx16@GJXAIOU",[[-1,990,"c"],[1,991,"\n"]],[991,991],[990,990]]],[1540966568542,["gjx16@GJXAIOU",[[-1,990,"\n"],[1,991,"程序运行结果"]],[990,990],[996,996]]],[1540966571688,["gjx16@GJXAIOU",[[1,996,"：``"]],[996,996],[999,999]]],[1540966573428,["gjx16@GJXAIOU",[[1,998,"5/2"]],[998,998],[1001,1001]]],[1540966583242,["gjx16@GJXAIOU",[[1,1002,"\n\n"]],[1002,1002],[1003,1003]]],[1540966583376,["gjx16@GJXAIOU",[[1,1004,"\n"]],[1003,1003],[1004,1004]]],[1540966584995,["gjx16@GJXAIOU",[[-1,1004,"\n"],[1,1005,"1"]],[1004,1004],[1005,1005]]],[1540966585512,["gjx16@GJXAIOU",[[1,1005,"33"]],[1005,1005],[1007,1007]]],[1540966586071,["gjx16@GJXAIOU",[[-1,1006,"3"]],[1007,1007],[1006,1006]]],[1540966587978,["gjx16@GJXAIOU",[[1,1006,".qu"]],[1006,1006],[1009,1009]]],[1540966588593,["gjx16@GJXAIOU",[[-1,1007,"qu"]],[1009,1009],[1007,1007]]],[1540966591601,["gjx16@GJXAIOU",[[1,1007,"取余："]],[1007,1007],[1010,1010]]],[1540966592799,["gjx16@GJXAIOU",[[1,1010,"\n\n"]],[1010,1010],[1011,1011]]],[1540966593499,["gjx16@GJXAIOU",[[-1,1011,"\n"],[1,1012,"·"]],[1011,1011],[1012,1012]]],[1540966594151,["gjx16@GJXAIOU",[[-1,1011,"·"],[1,1012,"\n"]],[1012,1012],[1011,1011]]],[1540966595538,["gjx16@GJXAIOU",[[-1,1011,"\n"]],[1011,1011],[1010,1010]]],[1540966596656,["gjx16@GJXAIOU",[[1,1010,"``"]],[1010,1010],[1012,1012]]],[1540966598794,["gjx16@GJXAIOU",[[1,1011,"&"]],[1011,1011],[1012,1012]]],[1540966599975,["gjx16@GJXAIOU",[[-1,1011,"&"]],[1012,1012],[1011,1011]]],[1540966600608,["gjx16@GJXAIOU",[[1,1011,"%"]],[1011,1011],[1012,1012]]],[1540966613291,["gjx16@GJXAIOU",[[1,1014,"\n"]],[1013,1013],[1014,1014]]],[1540966613474,["gjx16@GJXAIOU",[[1,1015,"\n"]],[1014,1014],[1015,1015]]],[1540966615179,["gjx16@GJXAIOU",[[-1,1015,"\n"],[1,1016,"1"]],[1015,1015],[1016,1016]]],[1540966630593,["gjx16@GJXAIOU",[[1,1016,"4.同时获得除法的商和余数，使用"]],[1016,1016],[1032,1032]]],[1540966634698,["gjx16@GJXAIOU",[[1,1032,"内建函数``"]],[1032,1032],[1038,1038]]],[1540966641916,["gjx16@GJXAIOU",[[1,1037,"divmod()"]],[1037,1037],[1045,1045]]],[1540966643682,["gjx16@GJXAIOU",[[1,1046,"\n\n"]],[1046,1046],[1047,1047]]],[1540966687777,["gjx16@GJXAIOU",[[-1,1047,"\n"],[1,1048,"`"]],[1047,1047],[1048,1048]]],[1540966688904,["gjx16@GJXAIOU",[[1,1048,"``"]],[1048,1048],[1050,1050]]],[1540966688931,["gjx16@GJXAIOU",[[1,1050,"language\n```\n"]],[1050,1050],[1050,1058]]],[1540966690835,["gjx16@GJXAIOU",[[-1,1050,"language"],[1,1058,"p"]],[1050,1058],[1051,1051]]],[1540966691072,["gjx16@GJXAIOU",[[1,1051,"y"]],[1051,1051],[1052,1052]]],[1540966694787,["gjx16@GJXAIOU",[[1,1052,"thon]\\"]],[1052,1052],[1058,1058]]],[1540966696537,["gjx16@GJXAIOU",[[-1,1056,"]\\"]],[1058,1058],[1056,1056]]],[1540966697454,["gjx16@GJXAIOU",[[1,1057,"\n"]],[1056,1056],[1057,1057]]],[1540966698637,["gjx16@GJXAIOU",[[1,1057,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))"]],[1057,1057],[1127,1127]]],[1540966704591,["gjx16@GJXAIOU",[[1,1132,"\n"]],[1131,1131],[1132,1132]]],[1540966705688,["gjx16@GJXAIOU",[[-1,1132,"\n"],[1,1133,"c"]],[1132,1132],[1133,1133]]],[1540966706106,["gjx16@GJXAIOU",[[1,1133,"heng"]],[1133,1133],[1137,1137]]],[1540966707183,["gjx16@GJXAIOU",[[-1,1133,"heng"]],[1137,1137],[1133,1133]]],[1540966707807,["gjx16@GJXAIOU",[[-1,1132,"c"],[1,1133,"\n"]],[1133,1133],[1132,1132]]],[1540966710282,["gjx16@GJXAIOU",[[-1,1132,"\n"],[1,1133,"程序"]],[1132,1132],[1134,1134]]],[1540966713065,["gjx16@GJXAIOU",[[1,1134,"运行结果："]],[1134,1134],[1139,1139]]],[1540966788494,["gjx16@GJXAIOU",[[1,1139,"·"]],[1139,1139],[1140,1140]]],[1540966789310,["gjx16@GJXAIOU",[[-1,1139,"·"]],[1140,1140],[1139,1139]]],[1540966790288,["gjx16@GJXAIOU",[[1,1139,"``"]],[1139,1139],[1141,1141]]],[1540966791834,["gjx16@GJXAIOU",[[1,1140,"(2, 1)"]],[1140,1140],[1146,1146]]],[1540966795231,["gjx16@GJXAIOU",[[1,1147,"q"]],[1147,1147],[1148,1148]]],[1540966795767,["gjx16@GJXAIOU",[[-1,1147,"q"]],[1148,1148],[1147,1147]]],[1540966798081,["gjx16@GJXAIOU",[[1,1147,"签名"]],[1147,1147],[1149,1149]]],[1540966798798,["gjx16@GJXAIOU",[[-1,1147,"签名"]],[1149,1149],[1147,1147]]],[1540966810745,["gjx16@GJXAIOU",[[1,1147,"前面为商，后面为"]],[1147,1147],[1155,1155]]],[1540966813721,["gjx16@GJXAIOU",[[1,1155,"余数"]],[1155,1155],[1157,1157]]],[1540966826055,["gjx16@GJXAIOU",[[1,1157,"\n\n"]],[1157,1157],[1158,1158]]],[1540966826226,["gjx16@GJXAIOU",[[1,1159,"\n"]],[1158,1158],[1159,1159]]],[1540966826407,["gjx16@GJXAIOU",[[1,1160,"\n"]],[1159,1159],[1160,1160]]],[1540966826913,["gjx16@GJXAIOU",[[1,1161,"\n"]],[1160,1160],[1161,1161]]],[1540966828323,["gjx16@GJXAIOU",[[-1,1161,"\n"],[1,1162,"1"]],[1161,1161],[1162,1162]]],[1540966850904,["gjx16@GJXAIOU",[[1,1162,"5.对小数进行四舍五入，使用内建函数 "]],[1162,1162],[1181,1181]]],[1540966851312,["gjx16@GJXAIOU",[[1,1181,"\n\n"]],[1181,1181],[1182,1182]]],[1540966852399,["gjx16@GJXAIOU",[[-1,1182,"\n"]],[1182,1182],[1181,1181]]],[1540966853646,["gjx16@GJXAIOU",[[1,1181,"··"]],[1181,1181],[1183,1183]]],[1540966854305,["gjx16@GJXAIOU",[[-1,1181,"··"]],[1183,1183],[1181,1181]]],[1540966855371,["gjx16@GJXAIOU",[[1,1181,"``"]],[1181,1181],[1183,1183]]],[1540966863211,["gjx16@GJXAIOU",[[1,1182,"round()"]],[1182,1182],[1189,1189]]],[1540966867888,["gjx16@GJXAIOU",[[1,1191,"\n"]],[1190,1190],[1191,1191]]],[1540966868689,["gjx16@GJXAIOU",[[-1,1191,"\n"],[1,1192,"s"]],[1191,1191],[1192,1192]]],[1540966868936,["gjx16@GJXAIOU",[[1,1192,"hi"]],[1192,1192],[1194,1194]]],[1540966869543,["gjx16@GJXAIOU",[[-1,1192,"hi"]],[1194,1194],[1192,1192]]],[1540966870057,["gjx16@GJXAIOU",[[-1,1191,"s"],[1,1192,"\n"]],[1192,1192],[1191,1191]]],[1540966872952,["gjx16@GJXAIOU",[[-1,1191,"\n"],[1,1192,"`"]],[1191,1191],[1192,1192]]],[1540966873331,["gjx16@GJXAIOU",[[1,1192,"``"]],[1192,1192],[1194,1194]]],[1540966873362,["gjx16@GJXAIOU",[[1,1194,"language\n```\n"]],[1194,1194],[1194,1202]]],[1540966874539,["gjx16@GJXAIOU",[[-1,1194,"language"],[1,1202,"p"]],[1194,1202],[1195,1195]]],[1540966875392,["gjx16@GJXAIOU",[[1,1195,"ython"]],[1195,1195],[1200,1200]]],[1540966876888,["gjx16@GJXAIOU",[[1,1201,"\n"]],[1200,1200],[1201,1201]]],[1540966915087,["gjx16@GJXAIOU",[[1,1201,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))"]],[1201,1201],[1281,1281]]],[1540966917424,["gjx16@GJXAIOU",[[1,1286,"\n"]],[1285,1285],[1286,1286]]],[1540966918294,["gjx16@GJXAIOU",[[-1,1286,"\n"],[1,1287,"c"]],[1286,1286],[1287,1287]]],[1540966918686,["gjx16@GJXAIOU",[[1,1287,"heng"]],[1287,1287],[1291,1291]]],[1540966919887,["gjx16@GJXAIOU",[[-1,1287,"heng"]],[1291,1291],[1287,1287]]],[1540966920211,["gjx16@GJXAIOU",[[-1,1286,"c"],[1,1287,"\n"]],[1287,1287],[1286,1286]]],[1540966922197,["gjx16@GJXAIOU",[[-1,1286,"\n"],[1,1287,"程序"]],[1286,1286],[1288,1288]]],[1540966924658,["gjx16@GJXAIOU",[[1,1288,"运行结果；"]],[1288,1288],[1293,1293]]],[1540966925575,["gjx16@GJXAIOU",[[-1,1292,"；"]],[1293,1293],[1292,1292]]],[1540966928176,["gjx16@GJXAIOU",[[1,1292,"：``"]],[1292,1292],[1295,1295]]],[1540966936375,["gjx16@GJXAIOU",[[1,1294,"1.256"]],[1294,1294],[1299,1299]]],[1540966939883,["gjx16@GJXAIOU",[[1,1190,",wqi"]],[1190,1190],[1194,1194]]],[1540966940810,["gjx16@GJXAIOU",[[-1,1191,"wqi"]],[1194,1194],[1191,1191]]],[1540966968639,["gjx16@GJXAIOU",[[1,1191,"前一个参数为数字，后一个参数为小数点后的维数"]],[1191,1191],[1213,1213]]],[1540966969167,["gjx16@GJXAIOU",[[-1,1211,"维数"]],[1213,1213],[1211,1211]]],[1540966971595,["gjx16@GJXAIOU",[[1,1211,"位数"]],[1211,1211],[1213,1213]]],[1540967007247,["gjx16@GJXAIOU",[[1,15,"\n"]],[14,14],[15,15]]],[1540967013999,["gjx16@GJXAIOU",[[-1,15,"\n"]],[14,14],[13,13]]],[1540967015178,["gjx16@GJXAIOU",[[1,15,"\n"]],[13,13],[14,14]]],[1540967023756,["gjx16@GJXAIOU",[[1,14,"浮点数的所有运算都要注意"]],[14,14],[26,26]]],[1540967028968,["gjx16@GJXAIOU",[[1,1336,"\n\n"]],[1336,1336],[1337,1337]]],[1540967057183,["gjx16@GJXAIOU",[[1,1338,"\n"]],[1337,1337],[1338,1338]]],[1540967057335,["gjx16@GJXAIOU",[[1,1339,"\n"]],[1338,1338],[1339,1339]]],[1540967057480,["gjx16@GJXAIOU",[[1,1340,"\n"]],[1339,1339],[1340,1340]]],[1540967059098,["gjx16@GJXAIOU",[[-1,1340,"\n"],[1,1341,"#"]],[1340,1340],[1341,1341]]],[1540967068674,["gjx16@GJXAIOU",[[1,1341,"# python中的标准库"]],[1341,1341],[1354,1354]]],[1540967069423,["gjx16@GJXAIOU",[[1,1354,"\n\n"]],[1354,1354],[1355,1355]]],[1540967073538,["gjx16@GJXAIOU",[[1,1356,"\n"]],[1355,1355],[1356,1356]]],[1540967074210,["gjx16@GJXAIOU",[[-1,1356,"\n"],[1,1357,"1"]],[1356,1356],[1357,1357]]],[1540967076436,["gjx16@GJXAIOU",[[1,1357,".****"]],[1357,1357],[1360,1360]]],[1540967091589,["gjx16@GJXAIOU",[[1,1360,"常见的数学函数以及运算优先级"]],[1360,1360],[1374,1374]]],[1540967093560,["gjx16@GJXAIOU",[[1,1376,"\n\n"]],[1376,1376],[1377,1377]]],[1540967109478,["gjx16@GJXAIOU",[[-1,1377,"\n"],[1,1378,"使用"]],[1377,1377],[1379,1379]]],[1540967110503,["gjx16@GJXAIOU",[[-1,1378,"用"]],[1379,1379],[1378,1378]]],[1540967110624,["gjx16@GJXAIOU",[[-1,1377,"使"],[1,1378,"\n"]],[1378,1378],[1377,1377]]],[1540967111459,["gjx16@GJXAIOU",[[-1,1377,"\n"],[1,1378,"-"]],[1377,1377],[1378,1378]]],[1540967111625,["gjx16@GJXAIOU",[[1,1378," "]],[1378,1378],[1379,1379]]],[1540967115555,["gjx16@GJXAIOU",[[1,1379,"使用``"]],[1379,1379],[1383,1383]]],[1540967118764,["gjx16@GJXAIOU",[[1,1382,"matn"]],[1382,1382],[1386,1386]]],[1540967119291,["gjx16@GJXAIOU",[[-1,1385,"n"]],[1386,1386],[1385,1385]]],[1540967119921,["gjx16@GJXAIOU",[[1,1385,"h"]],[1385,1385],[1386,1386]]],[1540967121822,["gjx16@GJXAIOU",[[1,1387,"\n- "]],[1387,1387],[1390,1390]]],[1540967123041,["gjx16@GJXAIOU",[[-1,1389," "]],[1390,1390],[1389,1389]]],[1540967123383,["gjx16@GJXAIOU",[[-1,1388,"-"],[1,1389,"\n"]],[1389,1389],[1388,1388]]],[1540967127017,["gjx16@GJXAIOU",[[-1,1388,"\n"],[1,1389,"`"]],[1388,1388],[1389,1389]]],[1540967127400,["gjx16@GJXAIOU",[[1,1389,"``"]],[1389,1389],[1391,1391]]],[1540967127428,["gjx16@GJXAIOU",[[1,1391,"language\n```\n"]],[1391,1391],[1391,1399]]],[1540967128419,["gjx16@GJXAIOU",[[-1,1391,"language"],[1,1399,"p"]],[1391,1399],[1392,1392]]],[1540967129216,["gjx16@GJXAIOU",[[1,1392,"ython"]],[1392,1392],[1397,1397]]],[1540967130042,["gjx16@GJXAIOU",[[1,1398,"\n"]],[1397,1397],[1398,1398]]],[1540967131747,["gjx16@GJXAIOU",[[1,1398,"im"]],[1398,1398],[1400,1400]]],[1540967133327,["gjx16@GJXAIOU",[[-1,1398,"im"]],[1400,1400],[1398,1398]]],[1540967197231,["gjx16@GJXAIOU",[[1,1398,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python import math\nprint(math.pi)\n\nprint(dir(math))"]],[1398,1398],[1494,1494]]],[1540967202010,["gjx16@GJXAIOU",[[1,1499,"\n"]],[1498,1498],[1499,1499]]],[1540967203786,["gjx16@GJXAIOU",[[-1,1499,"\n"],[1,1500,"c"]],[1499,1499],[1500,1500]]],[1540967203994,["gjx16@GJXAIOU",[[1,1500,"h"]],[1500,1500],[1501,1501]]],[1540967204295,["gjx16@GJXAIOU",[[-1,1500,"h"]],[1501,1501],[1500,1500]]],[1540967204434,["gjx16@GJXAIOU",[[-1,1499,"c"],[1,1500,"\n"]],[1500,1500],[1499,1499]]],[1540967206588,["gjx16@GJXAIOU",[[-1,1499,"\n"],[1,1500,"程序"]],[1499,1499],[1501,1501]]],[1540967209354,["gjx16@GJXAIOU",[[1,1501,"运行结果："]],[1501,1501],[1506,1506]]],[1540967232070,["gjx16@GJXAIOU",[[1,1506,"\n\n"]],[1506,1506],[1507,1507]]],[1540967232792,["gjx16@GJXAIOU",[[-1,1507,"\n"],[1,1508,"`"]],[1507,1507],[1508,1508]]],[1540967232952,["gjx16@GJXAIOU",[[1,1508,"`"]],[1508,1508],[1509,1509]]],[1540967234575,["gjx16@GJXAIOU",[[1,1508,"3.141592653589793\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']"]],[1508,1508],[2018,2018]]],[1540967240504,["gjx16@GJXAIOU",[[1,1525,"`"]],[1525,1525],[1526,1526]]],[1540967247001,["gjx16@GJXAIOU",[[1,1527,"`"]],[1527,1527],[1528,1528]]],[1540967252207,["gjx16@GJXAIOU",[[1,1527,"\n"]],[1526,1526],[1527,1527]]],[1540967253556,["gjx16@GJXAIOU",[[1,1527,"c"]],[1527,1527],[1528,1528]]],[1540967254046,["gjx16@GJXAIOU",[[-1,1527,"c"]],[1528,1528],[1527,1527]]],[1540967256371,["gjx16@GJXAIOU",[[1,1527,"瞎买酸奶"]],[1527,1527],[1531,1531]]],[1540967257503,["gjx16@GJXAIOU",[[-1,1527,"瞎买酸奶"]],[1531,1531],[1527,1527]]],[1540967270653,["gjx16@GJXAIOU",[[1,1527,"下面是math中的所有东西（）"]],[1527,1527],[1542,1542]]],[1540967273061,["gjx16@GJXAIOU",[[1,1541,"函数"]],[1541,1541],[1543,1543]]],[1540967291824,["gjx16@GJXAIOU",[[1,325,"，等效于`1`"]],[325,325],[332,332]]],[1540967294359,["gjx16@GJXAIOU",[[-1,329,"`1"]],[331,331],[329,329]]],[1540967295696,["gjx16@GJXAIOU",[[1,329,"``"]],[329,329],[331,331]]],[1540967299760,["gjx16@GJXAIOU",[[1,330,"pow()"]],[330,330],[335,335]]],[1540967320657,["gjx16@GJXAIOU",[[1,336,"函数，当然要导入math库，"]],[336,336],[350,350]]],[1540967337961,["gjx16@GJXAIOU",[[1,2064,"\n\n"]],[2064,2064],[2065,2065]]],[1540967338510,["gjx16@GJXAIOU",[[1,2066,"\n"]],[2065,2065],[2066,2066]]],[1540967341604,["gjx16@GJXAIOU",[[-1,2066,"\n"],[1,2067,"其中"]],[2066,2066],[2068,2068]]],[1540967345591,["gjx16@GJXAIOU",[[1,2068,"``"]],[2068,2068],[2070,2070]]],[1540967350058,["gjx16@GJXAIOU",[[1,2069,"math/"]],[2069,2069],[2074,2074]]],[1540967350774,["gjx16@GJXAIOU",[[-1,2073,"/"]],[2074,2074],[2073,2073]]],[1540967351732,["gjx16@GJXAIOU",[[1,2073,","]],[2073,2073],[2074,2074]]],[1540967352407,["gjx16@GJXAIOU",[[-1,2073,","]],[2074,2074],[2073,2073]]],[1540967412640,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2074,"`"]],[350,350],[2074,2074]]],[1540967412640,[null,[[1,350,"`"],[-1,2063,"`"],[1,2074,"`"]],[2074,2074],[350,350]]],[1540967357689,["gjx16@GJXAIOU",[[1,2073,".floor()"]],[2073,2073],[2081,2081]]],[1540967369367,["gjx16@GJXAIOU",[[1,2082,"为取整函数，``"]],[2082,2082],[2090,2090]]],[1540967379808,["gjx16@GJXAIOU",[[1,2089,"math.fabs()"]],[2089,2089],[2100,2100]]],[1540967382320,["gjx16@GJXAIOU",[[1,2099,"-2"]],[2099,2099],[2101,2101]]],[1540967385138,["gjx16@GJXAIOU",[[1,2103,"f"]],[2103,2103],[2104,2104]]],[1540967385632,["gjx16@GJXAIOU",[[-1,2103,"f"]],[2104,2104],[2103,2103]]],[1540967397325,["gjx16@GJXAIOU",[[1,2103,"为求绝对值"]],[2103,2103],[2108,2108]]],[1540967398094,["gjx16@GJXAIOU",[[1,2108,"\n\n"]],[2108,2108],[2109,2109]]],[1540967405733,["gjx16@GJXAIOU",[[-1,2109,"\n"]],[2109,2109],[2108,2108]]],[1540967407228,["gjx16@GJXAIOU",[[1,2108,"（）"]],[2108,2108],[2110,2110]]],[1540967411890,["gjx16@GJXAIOU",[[1,2109,"也可以使用"]],[2109,2109],[2114,2114]]],[1540967472641,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2116,"`"]],[350,350],[2116,2116]]],[1540967472641,[null,[[1,350,"`"],[-1,2063,"`"],[1,2116,"`"]],[2116,2116],[350,350]]],[1540967417432,["gjx16@GJXAIOU",[[1,2114,"内建函数``"]],[2114,2114],[2120,2120]]],[1540967421919,["gjx16@GJXAIOU",[[1,2119,"abs()"]],[2119,2119],[2124,2124]]],[1540967444111,["gjx16@GJXAIOU",[[1,2126,",qiuyu"]],[2126,2126],[2132,2132]]],[1540967445336,["gjx16@GJXAIOU",[[-1,2127,"qiuyu"]],[2132,2132],[2127,2127]]],[1540967449197,["gjx16@GJXAIOU",[[1,2127,"求除法色"]],[2127,2127],[2131,2131]]],[1540967449806,["gjx16@GJXAIOU",[[-1,2130,"色"]],[2131,2131],[2130,2130]]],[1540967455984,["gjx16@GJXAIOU",[[1,2130,"的余数：``"]],[2130,2130],[2136,2136]]],[1540967465047,["gjx16@GJXAIOU",[[1,2135,"math.fmod()"]],[2135,2135],[2146,2146]]],[1540967470479,["gjx16@GJXAIOU",[[1,2145,"5,3"]],[2145,2145],[2148,2148]]],[1540967532643,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2151,"`"]],[350,350],[2151,2151]]],[1540967532643,[null,[[1,350,"`"],[-1,2063,"`"],[1,2151,"`"]],[2151,2151],[350,350]]],[1540967484544,["gjx16@GJXAIOU",[[1,2150,"()"]],[2150,2150],[2152,2152]]],[1540967497247,["gjx16@GJXAIOU",[[1,2151,"也可以使用内建的``"]],[2151,2151],[2161,2161]]],[1540967499672,["gjx16@GJXAIOU",[[1,2160,"/"]],[2160,2160],[2161,2161]]],[1540967506110,["gjx16@GJXAIOU",[[1,2164,"\n"]],[2163,2163],[2164,2164]]],[1540967506278,["gjx16@GJXAIOU",[[1,2165,"\n"]],[2164,2164],[2165,2165]]],[1540967506448,["gjx16@GJXAIOU",[[1,2166,"\n"]],[2165,2165],[2166,2166]]],[1540967506617,["gjx16@GJXAIOU",[[1,2167,"\n"]],[2166,2166],[2167,2167]]],[1540967507898,["gjx16@GJXAIOU",[[-1,2167,"\n"],[1,2168,"2"]],[2167,2167],[2168,2168]]],[1540967509662,["gjx16@GJXAIOU",[[1,2168,".****"]],[2168,2168],[2171,2171]]],[1540967510775,["gjx16@GJXAIOU",[[1,2171,"yun"]],[2171,2171],[2174,2174]]],[1540967511886,["gjx16@GJXAIOU",[[-1,2171,"yun"]],[2174,2174],[2171,2171]]],[1540967515834,["gjx16@GJXAIOU",[[1,2171,"运算优先级"]],[2171,2171],[2176,2176]]],[1540967592646,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2178,"`"]],[350,350],[2178,2178]]],[1540967592646,[null,[[1,350,"`"],[-1,2063,"`"],[1,2178,"`"]],[2178,2178],[350,350]]],[1540967559417,["gjx16@GJXAIOU",[[1,2176," "]],[2176,2176],[2177,2177]]],[1540967832651,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2179,"`"]],[350,350],[2179,2179]]],[1540967832651,[null,[[1,350,"`"],[-1,2063,"`"],[1,2179,"`"]],[2179,2179],[350,350]]],[1540967792189,["gjx16@GJXAIOU",[[1,2179,"\n\n"]],[2179,2179],[2180,2180]]],[1540967952656,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2181,"`"]],[350,350],[2181,2181]]],[1540967952656,[null,[[1,350,"`"],[-1,2063,"`"],[1,2181,"`"]],[2181,2181],[350,350]]],[1540967935481,["gjx16@GJXAIOU",[[-1,2180,"\n"],[1,2181,"见"]],[2180,2180],[2181,2181]]],[1540967946596,["gjx16@GJXAIOU",[[1,2181,"书P25-26页"]],[2181,2181],[2189,2189]]],[1540967947342,["gjx16@GJXAIOU",[[1,2189,"\n\n"]],[2189,2189],[2190,2190]]],[1540967952313,["gjx16@GJXAIOU",[[-1,2190,"\n"],[1,2191,"实在不行"]],[2190,2190],[2194,2194]]],[1540968012651,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2194,"`"]],[350,350],[2194,2194]]],[1540968012651,[null,[[1,350,"`"],[-1,2063,"`"],[1,2194,"`"]],[2194,2194],[350,350]]],[1540967959610,["gjx16@GJXAIOU",[[1,2194,"先加括号"]],[2194,2194],[2198,2198]]],[1540967964631,["gjx16@GJXAIOU",[[1,2198,"\n\n"]],[2198,2198],[2199,2199]]],[1540967964762,["gjx16@GJXAIOU",[[1,2200,"\n"]],[2199,2199],[2200,2200]]],[1540967965343,["gjx16@GJXAIOU",[[1,2201,"\n"]],[2200,2200],[2201,2201]]],[1540967965510,["gjx16@GJXAIOU",[[1,2202,"\n"]],[2201,2201],[2202,2202]]],[1540967965670,["gjx16@GJXAIOU",[[1,2203,"\n"]],[2202,2202],[2203,2203]]],[1540967970500,["gjx16@GJXAIOU",[[-1,2203,"\n"],[1,2204,"#"]],[2203,2203],[2204,2204]]],[1540967977692,["gjx16@GJXAIOU",[[1,2204,"# 一个简单说"]],[2204,2204],[2211,2211]]],[1540967978295,["gjx16@GJXAIOU",[[-1,2210,"说"]],[2211,2211],[2210,2210]]],[1540967980164,["gjx16@GJXAIOU",[[1,2210,"的程序"]],[2210,2210],[2213,2213]]],[1540967980682,["gjx16@GJXAIOU",[[1,2213,"\n\n"]],[2213,2213],[2214,2214]]],[1540967980856,["gjx16@GJXAIOU",[[1,2215,"\n"]],[2214,2214],[2215,2215]]],[1540967985048,["gjx16@GJXAIOU",[[-1,2215,"\n"],[1,2216,"1"]],[2215,2215],[2216,2216]]],[1540968007739,["gjx16@GJXAIOU",[[1,2216,"、未经编译就可运行的程序称为脚本程序（）"]],[2216,2216],[2236,2236]]],[1540968072656,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2236,"`"]],[350,350],[2236,2236]]],[1540968072656,[null,[[1,350,"`"],[-1,2063,"`"],[1,2236,"`"]],[2236,2236],[350,350]]],[1540968015282,["gjx16@GJXAIOU",[[1,2235,"script"]],[2235,2235],[2241,2241]]],[1540968016713,["gjx16@GJXAIOU",[[1,2242,"\n\n"]],[2242,2242],[2243,2243]]],[1540968037616,["gjx16@GJXAIOU",[[1,2244,"\n"]],[2242,2242],[2243,2243]]],[1540968037750,["gjx16@GJXAIOU",[[1,2245,"\n"]],[2243,2243],[2244,2244]]],[1540968062824,["gjx16@GJXAIOU",[[1,2244,"2.程序前面两行"]],[2244,2244],[2252,2252]]],[1540968063670,["gjx16@GJXAIOU",[[1,2254,"\n"]],[2252,2252],[2253,2253]]],[1540968066007,["gjx16@GJXAIOU",[[1,2253,"```"]],[2253,2253],[2256,2256]]],[1540968066037,["gjx16@GJXAIOU",[[1,2256,"language\n```\n"]],[2256,2256],[2256,2264]]],[1540968066920,["gjx16@GJXAIOU",[[-1,2256,"language"],[1,2264,"p"]],[2256,2264],[2257,2257]]],[1540968067862,["gjx16@GJXAIOU",[[1,2257,"ython"]],[2257,2257],[2262,2262]]],[1540968068486,["gjx16@GJXAIOU",[[1,2263,"\n"]],[2262,2262],[2263,2263]]],[1540968252662,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2270,"`"]],[350,350],[2270,2270]]],[1540968252662,[null,[[1,350,"`"],[-1,2063,"`"],[1,2270,"`"]],[2270,2270],[350,350]]],[1540968215696,["gjx16@GJXAIOU",[[1,2263,"#Author:GJXAIOU #coding:utf-8   #本程序采用utf-8编码 #!/usr/bin/env python   #在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器"]],[2263,2263],[2377,2377]]],[1540968219108,["gjx16@GJXAIOU",[[1,2333,"\n"]],[2333,2333],[2334,2334]]],[1540968225480,["gjx16@GJXAIOU",[[1,2279,"\n"]],[2279,2279],[2280,2280]]],[1540968228527,["gjx16@GJXAIOU",[[1,2296,"\n"]],[2296,2296],[2297,2297]]],[1540968231007,["gjx16@GJXAIOU",[[1,2311,"\n"]],[2311,2311],[2312,2312]]],[1540968232943,["gjx16@GJXAIOU",[[1,2280,"\n"]],[2279,2279],[2280,2280]]],[1540968237039,["gjx16@GJXAIOU",[[1,2389,"\n"]],[2386,2386],[2387,2387]]],[1540968239142,["gjx16@GJXAIOU",[[1,2387,"3/"]],[2387,2387],[2389,2389]]],[1540968239884,["gjx16@GJXAIOU",[[-1,2388,"/"]],[2389,2389],[2388,2388]]],[1540968244064,["gjx16@GJXAIOU",[[1,2388,".python zhong"]],[2388,2388],[2401,2401]]],[1540968245212,["gjx16@GJXAIOU",[[-1,2396,"zhong"]],[2401,2401],[2396,2396]]],[1540968252313,["gjx16@GJXAIOU",[[1,2396,"中的注释：当行注释"]],[2396,2396],[2405,2405]]],[1540968312660,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2408,"`"]],[350,350],[2408,2408]]],[1540968312660,[null,[[1,350,"`"],[-1,2063,"`"],[1,2408,"`"]],[2408,2408],[350,350]]],[1540968255481,["gjx16@GJXAIOU",[[1,2405,"：``"]],[2405,2405],[2408,2408]]],[1540968265337,["gjx16@GJXAIOU",[[1,2407,"#"]],[2407,2407],[2408,2408]]],[1540968269534,["gjx16@GJXAIOU",[[1,2409," .d"]],[2409,2409],[2412,2412]]],[1540968270813,["gjx16@GJXAIOU",[[-1,2410,".d"]],[2412,2412],[2410,2410]]],[1540968280264,["gjx16@GJXAIOU",[[1,2410,",多行注释：``"]],[2410,2410],[2418,2418]]],[1540968287729,["gjx16@GJXAIOU",[[1,2417,"'''"]],[2417,2417],[2420,2420]]],[1540968293477,["gjx16@GJXAIOU",[[1,2416,"shi"]],[2416,2416],[2419,2419]]],[1540968294056,["gjx16@GJXAIOU",[[-1,2416,"shi"]],[2419,2419],[2416,2416]]],[1540968298260,["gjx16@GJXAIOU",[[1,2416,"使用一对"]],[2416,2416],[2420,2420]]],[1540968306306,["gjx16@GJXAIOU",[[1,2425,"或者一对``"]],[2425,2425],[2431,2431]]],[1540968309703,["gjx16@GJXAIOU",[[1,2430,"\"\"\""]],[2430,2430],[2433,2433]]],[1540968311798,["gjx16@GJXAIOU",[[1,2437,"\n"]],[2434,2434],[2435,2435]]],[1540968311936,["gjx16@GJXAIOU",[[1,2438,"\n"]],[2435,2435],[2436,2436]]],[1540968372667,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2439,"`"]],[350,350],[2439,2439]]],[1540968372667,[null,[[1,350,"`"],[-1,2063,"`"],[1,2439,"`"]],[2439,2439],[350,350]]],[1540968313528,["gjx16@GJXAIOU",[[1,2436,"4."]],[2436,2436],[2438,2438]]],[1540968344102,["gjx16@GJXAIOU",[[1,2441,"\n"]],[2438,2438],[2439,2439]]],[1540968344248,["gjx16@GJXAIOU",[[1,2442,"\n"]],[2439,2439],[2440,2440]]],[1540968344406,["gjx16@GJXAIOU",[[1,2443,"\n"]],[2440,2440],[2441,2441]]],[1540968344981,["gjx16@GJXAIOU",[[-1,2443,"\n"]],[2441,2441],[2440,2440]]],[1540968345120,["gjx16@GJXAIOU",[[-1,2442,"\n"]],[2440,2440],[2439,2439]]],[1540968345253,["gjx16@GJXAIOU",[[-1,2441,"\n"]],[2439,2439],[2438,2438]]],[1540968346013,["gjx16@GJXAIOU",[[-1,2436,"4."]],[2438,2438],[2436,2436]]],[1540968346846,["gjx16@GJXAIOU",[[1,2439,"\n"]],[2436,2436],[2437,2437]]],[1540968346982,["gjx16@GJXAIOU",[[1,2440,"\n"]],[2437,2437],[2438,2438]]],[1540968347105,["gjx16@GJXAIOU",[[1,2441,"\n"]],[2438,2438],[2439,2439]]],[1540968350689,["gjx16@GJXAIOU",[[1,2439,"## zifu"]],[2439,2439],[2446,2446]]],[1540968351454,["gjx16@GJXAIOU",[[-1,2442,"zifu"]],[2446,2446],[2442,2442]]],[1540968354433,["gjx16@GJXAIOU",[[1,2442,"字符串"]],[2442,2442],[2445,2445]]],[1540968354845,["gjx16@GJXAIOU",[[1,2448,"\n"]],[2445,2445],[2446,2446]]],[1540968354998,["gjx16@GJXAIOU",[[1,2449,"\n"]],[2446,2446],[2447,2447]]],[1540968370831,["gjx16@GJXAIOU",[[1,2447,"1."]],[2447,2447],[2449,2449]]],[1540968432667,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2452,"`"]],[350,350],[2452,2452]]],[1540968432667,[null,[[1,350,"`"],[-1,2063,"`"],[1,2452,"`"]],[2452,2452],[350,350]]],[1540968388276,["gjx16@GJXAIOU",[[1,2449,"字符串使用单引号和双引号包裹，"]],[2449,2449],[2464,2464]]],[1540968392696,["gjx16@GJXAIOU",[[-1,2457,"和"]],[2458,2458],[2457,2457]]],[1540968394433,["gjx16@GJXAIOU",[[1,2457,"或者"]],[2457,2457],[2459,2459]]],[1540968397593,["gjx16@GJXAIOU",[[1,2465,"，"]],[2465,2465],[2466,2466]]],[1540968398687,["gjx16@GJXAIOU",[[-1,2465,"，"]],[2466,2466],[2465,2465]]],[1540968407503,["gjx16@GJXAIOU",[[1,2465,"当字符串内部哈石油"]],[2465,2465],[2474,2474]]],[1540968408272,["gjx16@GJXAIOU",[[-1,2471,"哈石油"]],[2474,2474],[2471,2471]]],[1540968429761,["gjx16@GJXAIOU",[[1,2471,"含有其中一种符号时候，外面采用另一种"]],[2471,2471],[2489,2489]]],[1540968492670,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2492,"`"]],[350,350],[2492,2492]]],[1540968492670,[null,[[1,350,"`"],[-1,2063,"`"],[1,2492,"`"]],[2492,2492],[350,350]]],[1540968434292,["gjx16@GJXAIOU",[[1,2489,"符号的"]],[2489,2489],[2492,2492]]],[1540968434998,["gjx16@GJXAIOU",[[-1,2491,"的"]],[2492,2492],[2491,2491]]],[1540968439308,["gjx16@GJXAIOU",[[1,2491,"进行包裹"]],[2491,2491],[2495,2495]]],[1540968452543,["gjx16@GJXAIOU",[[1,2498,"\n"]],[2495,2495],[2496,2496]]],[1540968453702,["gjx16@GJXAIOU",[[1,2499,"\n"]],[2496,2496],[2497,2497]]],[1540968461122,["gjx16@GJXAIOU",[[1,2497,"2.可以使用``"]],[2497,2497],[2505,2505]]],[1540968465479,["gjx16@GJXAIOU",[[1,2504,"type()"]],[2504,2504],[2510,2510]]],[1540968474489,["gjx16@GJXAIOU",[[1,2511,"进行检验类型"]],[2511,2511],[2517,2517]]],[1540968475121,["gjx16@GJXAIOU",[[1,2520,"\n"]],[2517,2517],[2518,2518]]],[1540968478015,["gjx16@GJXAIOU",[[1,2518,"```"]],[2518,2518],[2521,2521]]],[1540968478045,["gjx16@GJXAIOU",[[1,2521,"language\n```\n"]],[2521,2521],[2521,2529]]],[1540968478983,["gjx16@GJXAIOU",[[-1,2521,"language"],[1,2529,"p"]],[2521,2529],[2522,2522]]],[1540968479762,["gjx16@GJXAIOU",[[1,2522,"ython"]],[2522,2522],[2527,2527]]],[1540968480274,["gjx16@GJXAIOU",[[1,2528,"\n"]],[2527,2527],[2528,2528]]],[1540968552670,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2536,"`"]],[350,350],[2536,2536]]],[1540968552670,[null,[[1,350,"`"],[-1,2063,"`"],[1,2536,"`"]],[2536,2536],[350,350]]],[1540968545959,["gjx16@GJXAIOU",[[1,2528,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(type(330))\nprint(type(\"330\"))"]],[2528,2528],[2615,2615]]],[1540968550752,["gjx16@GJXAIOU",[[1,2620,"程序"]],[2620,2620],[2622,2622]]],[1540968577805,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2625,"`"]],[350,350],[2625,2625]]],[1540968577805,[null,[[1,350,"`"],[-1,2063,"`"],[1,2625,"`"]],[2625,2625],[350,350]]],[1540968555120,["gjx16@GJXAIOU",[[1,2622,"运行结果为："]],[2622,2622],[2628,2628]]],[1540968558276,["gjx16@GJXAIOU",[[1,2631,"\n"]],[2628,2628],[2629,2629]]],[1540968559742,["gjx16@GJXAIOU",[[1,2629,"``"]],[2629,2629],[2631,2631]]],[1540968566604,["gjx16@GJXAIOU",[[1,2630,"<class 'int'>\n<class 'str'>\n"]],[2630,2630],[2658,2658]]],[1540968569277,["gjx16@GJXAIOU",[[1,2644,"`"]],[2644,2644],[2645,2645]]],[1540968572039,["gjx16@GJXAIOU",[[-1,2659,"`"]],[2660,2660],[2659,2659]]],[1540968572436,["gjx16@GJXAIOU",[[-1,2661,"\n"]],[2659,2659],[2658,2658]]],[1540968572998,["gjx16@GJXAIOU",[[1,2658,"`"]],[2658,2658],[2659,2659]]],[1540968574502,["gjx16@GJXAIOU",[[1,2643,"`"]],[2643,2643],[2644,2644]]],[1540969429740,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2663,"`"]],[350,350],[2663,2663]]],[1540969429740,[null,[[1,350,"`"],[-1,2063,"`"],[1,2663,"`"]],[2663,2663],[350,350]]],[1540969379813,["gjx16@GJXAIOU",[[1,2644,"  dui"]],[2644,2644],[2649,2649]]],[1540969380431,["gjx16@GJXAIOU",[[-1,2646,"dui"]],[2649,2649],[2646,2646]]],[1540969388407,["gjx16@GJXAIOU",[[1,2646,"对象类型为整型"]],[2646,2646],[2653,2653]]],[1540969409161,["gjx16@GJXAIOU",[[1,2669," 对象类型为字符串类型"]],[2669,2669],[2680,2680]]],[1540969489740,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2683,"`"]],[350,350],[2683,2683]]],[1540969489740,[null,[[1,350,"`"],[-1,2063,"`"],[1,2683,"`"]],[2683,2683],[350,350]]],[1540969451012,["gjx16@GJXAIOU",[[1,2465,"\n"]],[2465,2465],[2466,2466]]],[1540969452075,["gjx16@GJXAIOU",[[1,2466,"\n"]],[2466,2466],[2467,2467]]],[1540969463847,["gjx16@GJXAIOU",[[1,2497,"，或者在单引号"]],[2497,2497],[2504,2504]]],[1540969466367,["gjx16@GJXAIOU",[[-1,2501,"单引号"]],[2504,2504],[2501,2501]]],[1540969488360,["gjx16@GJXAIOU",[[1,2501,"字符串中出现的的"]],[2501,2501],[2509,2509]]],[1540969549741,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2697,"`"]],[350,350],[2697,2697]]],[1540969549741,[null,[[1,350,"`"],[-1,2063,"`"],[1,2697,"`"]],[2697,2697],[350,350]]],[1540969496950,["gjx16@GJXAIOU",[[1,2509,"符号前加上``"]],[2509,2509],[2516,2516]]],[1540969499873,["gjx16@GJXAIOU",[[1,2515,"\\"]],[2515,2515],[2516,2516]]],[1540969609743,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2705,"`"]],[350,350],[2705,2705]]],[1540969609743,[null,[[1,350,"`"],[-1,2063,"`"],[1,2705,"`"]],[2705,2705],[350,350]]],[1540969572823,["gjx16@GJXAIOU",[[1,2519,"\n"]],[2517,2517],[2518,2518]]],[1540969573387,["gjx16@GJXAIOU",[[1,2520,"\n"]],[2518,2518],[2519,2519]]],[1540969582718,["gjx16@GJXAIOU",[[1,2519,"事例说明："]],[2519,2519],[2524,2524]]],[1540969583594,["gjx16@GJXAIOU",[[1,2526,"\n"]],[2524,2524],[2525,2525]]],[1540969587212,["gjx16@GJXAIOU",[[1,2525,"```python"]],[2525,2525],[2534,2534]]],[1540969587907,["gjx16@GJXAIOU",[[1,2536,"\n"]],[2534,2534],[2535,2535]]],[1540969589108,["gjx16@GJXAIOU",[[1,2535,"```"]],[2535,2535],[2538,2538]]],[1540969592587,["gjx16@GJXAIOU",[[1,2535,"\n"]],[2534,2534],[2535,2535]]],[1540969849749,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2727,"`"]],[350,350],[2727,2727]]],[1540969849749,[null,[[1,350,"`"],[-1,2063,"`"],[1,2727,"`"]],[2727,2727],[350,350]]],[1540969846075,["gjx16@GJXAIOU",[[1,2535,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python str = \"what's your name?\" #采用双引号包含单引号 str1 = 'what\\'s your name?' # 使用转义字符   print(str)\nprint(str1)"]],[2535,2535],[2686,2686]]],[1540969909758,[null,[[-1,350,"`"],[1,2064,"`"],[-1,2878,"`"]],[350,350],[2878,2878]]],[1540969909758,[null,[[1,350,"`"],[-1,2063,"`"],[1,2878,"`"]],[2878,2878],[350,350]]],[1540969851602,["gjx16@GJXAIOU",[[1,2624,"\n"]],[2624,2624],[2625,2625]]],[1540969853547,["gjx16@GJXAIOU",[[-1,2624,"\n"]],[2625,2625],[2624,2624]]],[1540969870994,["gjx16@GJXAIOU",[[1,2587,"\n"]],[2587,2587],[2588,2588]]],[1540969876187,["gjx16@GJXAIOU",[[1,2626,"\n"]],[2626,2626],[2627,2627]]],[1540969885658,["gjx16@GJXAIOU",[[1,1453,"\n"]],[1453,1453],[1454,1454]]],[1540969890622,["gjx16@GJXAIOU",[[1,2566,"\n"]],[2566,2566],[2567,2567]]],[1540969897091,["gjx16@GJXAIOU",[[1,2757,"\n"]],[2757,2757],[2758,2758]]],[1540969899490,["gjx16@GJXAIOU",[[1,2780,"\n"]],[2780,2780],[2781,2781]]],[1540969908229,["gjx16@GJXAIOU",[[-1,1475," "],[1,1476,"\n"]],[1475,1476],[1476,1476]]],[1540969969760,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2884,"`"]],[350,350],[2884,2884]]],[1540969969760,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2884,"`"]],[2884,2884],[350,350]]],[1540969916351,["gjx16@GJXAIOU",[[1,2667,"\n"]],[2667,2667],[2668,2668]]],[1540969918086,["gjx16@GJXAIOU",[[-1,2668," "]],[2669,2669],[2668,2668]]],[1540969921275,["gjx16@GJXAIOU",[[1,2696,"\n"]],[2694,2694],[2695,2695]]],[1540969922526,["gjx16@GJXAIOU",[[1,2695,"c"]],[2695,2695],[2696,2696]]],[1540969923027,["gjx16@GJXAIOU",[[-1,2695,"c"]],[2696,2696],[2695,2695]]],[1540969930765,["gjx16@GJXAIOU",[[1,2695,"程序运行结果为：``"]],[2695,2695],[2705,2705]]],[1540969939908,["gjx16@GJXAIOU",[[1,2704,"what's your name?\nwhat's your name?"]],[2704,2704],[2739,2739]]],[1540969942795,["gjx16@GJXAIOU",[[1,2703,"\n"]],[2703,2703],[2704,2704]]],[1540969946830,["gjx16@GJXAIOU",[[1,2722,"`"]],[2722,2722],[2723,2723]]],[1540969951744,["gjx16@GJXAIOU",[[1,2724,"`"]],[2724,2724],[2725,2725]]],[1540970089767,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2933,"`"]],[350,350],[2933,2933]]],[1540970089767,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2933,"`"]],[2933,2933],[350,350]]],[1540970072810,["gjx16@GJXAIOU",[[1,2933,"\n"]],[2931,2931],[2932,2932]]],[1540970072932,["gjx16@GJXAIOU",[[1,2934,"\n"]],[2932,2932],[2933,2933]]],[1540970073052,["gjx16@GJXAIOU",[[1,2935,"\n"]],[2933,2933],[2934,2934]]],[1540970077229,["gjx16@GJXAIOU",[[1,2934,"3.s"]],[2934,2934],[2937,2937]]],[1540970077741,["gjx16@GJXAIOU",[[-1,2936,"s"]],[2937,2937],[2936,2936]]],[1540970084935,["gjx16@GJXAIOU",[[1,2936,"使用``"]],[2936,2936],[2940,2940]]],[1540970149769,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2942,"`"]],[350,350],[2942,2942]]],[1540970149769,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2942,"`"]],[2942,2942],[350,350]]],[1540970092652,["gjx16@GJXAIOU",[[1,2939,"+"]],[2939,2939],[2940,2940]]],[1540970109028,["gjx16@GJXAIOU",[[1,2941,"实现字符串的连接"]],[2941,2941],[2949,2949]]],[1540970110196,["gjx16@GJXAIOU",[[1,2951,"\n"]],[2949,2949],[2950,2950]]],[1540970116436,["gjx16@GJXAIOU",[[1,2950,"首先``"]],[2950,2950],[2954,2954]]],[1540970117620,["gjx16@GJXAIOU",[[1,2953,"+"]],[2953,2953],[2954,2954]]],[1540970149672,["gjx16@GJXAIOU",[[1,2955,"两边的对象给的数据类型必须一致 "]],[2955,2955],[2971,2971]]],[1540970209761,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2973,"`"]],[350,350],[2973,2973]]],[1540970209761,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2973,"`"]],[2973,2973],[350,350]]],[1540970154078,["gjx16@GJXAIOU",[[1,2971," ~~~~"]],[2971,2971],[2974,2974]]],[1540970157965,["gjx16@GJXAIOU",[[1,2974,"P34"]],[2974,2974],[2977,2977]]],[1540982727061,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2981,"`"]],[350,350],[2981,2981]]],[1540982727061,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2981,"`"]],[2981,2981],[350,350]]],[1540982680518,["gjx16@GJXAIOU",[[-1,2971," ~~P34~~"]],[2979,2979],[2971,2971]]],[1540982686855,["gjx16@GJXAIOU",[[1,2971,"，例如整数就是"]],[2971,2971],[2978,2978]]],[1540982692585,["gjx16@GJXAIOU",[[-1,2974,"整数就是"]],[2978,2978],[2974,2974]]],[1540982705826,["gjx16@GJXAIOU",[[1,2974,"都是数字就是加法，字符串就是拼接"]],[2974,2974],[2990,2990]]],[1540982787057,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,2992,"`"]],[350,350],[2992,2992]]],[1540982787057,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,2992,"`"]],[2992,2992],[350,350]]],[1540982750417,["gjx16@GJXAIOU",[[1,2992,"\n"]],[2991,2991],[2992,2992]]],[1540982750747,["gjx16@GJXAIOU",[[-1,2992,"\n"],[1,2993,"-"]],[2992,2992],[2993,2993]]],[1540982753639,["gjx16@GJXAIOU",[[1,2993," ``"]],[2993,2993],[2996,2996]]],[1540982761029,["gjx16@GJXAIOU",[[1,2995,"atr"]],[2995,2995],[2998,2998]]],[1540982762665,["gjx16@GJXAIOU",[[-1,2995,"atr"]],[2998,2998],[2995,2995]]],[1540982764389,["gjx16@GJXAIOU",[[1,2995,"str()"]],[2995,2995],[3000,3000]]],[1540982766603,["gjx16@GJXAIOU",[[1,3001," s"]],[3001,3001],[3003,3003]]],[1540982767022,["gjx16@GJXAIOU",[[-1,3002,"s"]],[3003,3003],[3002,3002]]],[1540982782439,["gjx16@GJXAIOU",[[1,3002,"实现将整数转换为字符串\n- ``"]],[3002,3002],[3018,3018]]],[1540982786824,["gjx16@GJXAIOU",[[1,3017,"in"]],[3017,3017],[3019,3019]]],[1540982847061,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[1,3014,""],[-1,3020,"`"]],[350,350],[3020,3020]]],[1540982847061,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[-1,3014,""],[1,3020,"`"]],[3020,3020],[350,350]]],[1540982789435,["gjx16@GJXAIOU",[[1,3019,"t()"]],[3019,3019],[3022,3022]]],[1540982822876,["gjx16@GJXAIOU",[[1,3023," 实现将字符串转换为整数"]],[3023,3023],[3035,3035]]],[1540982837340,["gjx16@GJXAIOU",[[1,3013,"；``"]],[3013,3013],[3016,3016]]],[1540982840376,["gjx16@GJXAIOU",[[1,3015,"rer"]],[3015,3015],[3018,3018]]],[1540982841453,["gjx16@GJXAIOU",[[-1,3017,"r"]],[3018,3018],[3017,3017]]],[1540982843657,["gjx16@GJXAIOU",[[1,3017,"pr()"]],[3017,3017],[3021,3021]]],[1540982846565,["gjx16@GJXAIOU",[[1,3022,"函数"]],[3022,3022],[3024,3024]]],[1540982907061,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[1,3025,""],[-1,3046,"`"]],[350,350],[3046,3046]]],[1540982907061,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[-1,3025,""],[1,3046,"`"]],[3046,3046],[350,350]]],[1540982855030,["gjx16@GJXAIOU",[[1,3024,"同样 可以实现，"]],[3024,3024],[3032,3032]]],[1540982863894,["gjx16@GJXAIOU",[[-1,3024,"同样 可以实现，"]],[3032,3032],[3024,3024]]],[1540982877427,["gjx16@GJXAIOU",[[1,3024,"作用是返回一个字符串对象；"]],[3024,3024],[3037,3037]]],[1540983609150,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[1,3038,""],[-1,3059,"`"]],[350,350],[3059,3059]]],[1540983609150,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[-1,3038,""],[1,3059,"`"]],[3059,3059],[350,350]]],[1540983606215,["gjx16@GJXAIOU",[[1,3037,"这两个区别见这里"]],[3037,3037],[3045,3045]]],[1540983729158,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[1,3046,""],[-1,3067,"`"]],[350,350],[3067,3067]]],[1540983729158,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[-1,3046,""],[1,3067,"`"]],[3067,3067],[350,350]]],[1540983728300,["gjx16@GJXAIOU",[[-1,3037,"这两个区别见这里"],[1,3045,"[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)"]],[3037,3045],[3093,3093]]],[1540983789163,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[1,3094,""],[-1,3115,"`"]],[350,350],[3115,3115]]],[1540983789163,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[-1,3094,""],[1,3115,"`"]],[3115,3115],[350,350]]],[1540983737861,["gjx16@GJXAIOU",[[1,3115,"\n- "]],[3115,3115],[3118,3118]]],[1540983738012,["gjx16@GJXAIOU",[[-1,3116,"- "],[1,3118,"\n\n"]],[3118,3118],[3117,3117]]],[1540984509176,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3118,"`"]],[350,350],[3118,3118]]],[1540984509176,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3118,"`"]],[3118,3118],[350,350]]],[1540984495152,["gjx16@GJXAIOU",[[1,3116,"4.yihang "]],[3116,3116],[3125,3125]]],[1540984496858,["gjx16@GJXAIOU",[[-1,3118,"yihang "]],[3125,3125],[3118,3118]]],[1540984500535,["gjx16@GJXAIOU",[[1,3118,"一行的结果"]],[3118,3118],[3123,3123]]],[1540984501310,["gjx16@GJXAIOU",[[-1,3121,"结果"]],[3123,3123],[3121,3121]]],[1540984507234,["gjx16@GJXAIOU",[[1,3121,"结尾加上"]],[3121,3121],[3125,3125]]],[1540984569177,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3127,"`"]],[350,350],[3127,3127]]],[1540984569177,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3127,"`"]],[3127,3127],[350,350]]],[1540984513868,["gjx16@GJXAIOU",[[1,3125,"`````"]],[3125,3125],[3129,3129]]],[1540984516214,["gjx16@GJXAIOU",[[-1,3127,"```"]],[3129,3129],[3126,3126]]],[1540984519279,["gjx16@GJXAIOU",[[1,3125,"sange"]],[3125,3125],[3130,3130]]],[1540984520467,["gjx16@GJXAIOU",[[-1,3125,"sange"]],[3130,3130],[3125,3125]]],[1540984521813,["gjx16@GJXAIOU",[[1,3127,"`"]],[3125,3125],[3126,3126]]],[1540984526030,["gjx16@GJXAIOU",[[1,3125,"三个"]],[3125,3125],[3127,3127]]],[1540984529594,["gjx16@GJXAIOU",[[-1,3125,"三个```"]],[3130,3130],[3125,3125]]],[1540984532008,["gjx16@GJXAIOU",[[1,3125,"``"]],[3125,3125],[3127,3127]]],[1540984533438,["gjx16@GJXAIOU",[[1,3126,"\\"]],[3126,3126],[3127,3127]]],[1540984568026,["gjx16@GJXAIOU",[[1,3128," ，实现续航，对于字符串可以采用字符串开头结尾各"]],[3128,3128],[3152,3152]]],[1540984629179,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3154,"`"]],[350,350],[3154,3154]]],[1540984629179,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3154,"`"]],[3154,3154],[350,350]]],[1540984627278,["gjx16@GJXAIOU",[[1,3152,"加上三个``"]],[3152,3152],[3158,3158]]],[1540984689181,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3160,"`"]],[350,350],[3160,3160]]],[1540984689181,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3160,"`"]],[3160,3160],[350,350]]],[1540984629869,["gjx16@GJXAIOU",[[1,3157,"\""]],[3157,3157],[3158,3158]]],[1540984633479,["gjx16@GJXAIOU",[[1,3159,"biao"]],[3159,3159],[3163,3163]]],[1540984634371,["gjx16@GJXAIOU",[[-1,3159,"biao"]],[3163,3163],[3159,3159]]],[1540984651422,["gjx16@GJXAIOU",[[1,3159,"表示字符串的续行"]],[3159,3159],[3167,3167]]],[1540984659970,["gjx16@GJXAIOU",[[1,3169,"\n"]],[3167,3167],[3168,3168]]],[1540984660726,["gjx16@GJXAIOU",[[1,3170,"\n"]],[3168,3168],[3169,3169]]],[1540984666686,["gjx16@GJXAIOU",[[1,3169,"5.输入"]],[3169,3169],[3173,3173]]],[1540984667733,["gjx16@GJXAIOU",[[-1,3171,"输入"]],[3173,3173],[3171,3171]]],[1540984675903,["gjx16@GJXAIOU",[[1,3171,"键盘输入：使用``"]],[3171,3171],[3180,3180]]],[1540984679385,["gjx16@GJXAIOU",[[1,3179,"input()"]],[3179,3179],[3186,3186]]],[1540984749179,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3189,"`"]],[350,350],[3189,3189]]],[1540984749179,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3189,"`"]],[3189,3189],[350,350]]],[1540984701336,["gjx16@GJXAIOU",[[1,3187,"hu"]],[3187,3187],[3189,3189]]],[1540984701835,["gjx16@GJXAIOU",[[-1,3187,"hu"]],[3189,3189],[3187,3187]]],[1540984703590,["gjx16@GJXAIOU",[[1,3187,"huoqu "]],[3187,3187],[3193,3193]]],[1540984705325,["gjx16@GJXAIOU",[[-1,3187,"huoqu "]],[3193,3193],[3187,3187]]],[1540984711417,["gjx16@GJXAIOU",[[1,3187,"获取输入的数据"]],[3187,3187],[3194,3194]]],[1540984712076,["gjx16@GJXAIOU",[[1,3196,"\n"]],[3194,3194],[3195,3195]]],[1540984713775,["gjx16@GJXAIOU",[[1,3195,"```"]],[3195,3195],[3198,3198]]],[1540984713808,["gjx16@GJXAIOU",[[1,3198,"language\n```\n"]],[3198,3198],[3198,3206]]],[1540984714733,["gjx16@GJXAIOU",[[-1,3198,"language"],[1,3206,"p"]],[3198,3206],[3199,3199]]],[1540984715812,["gjx16@GJXAIOU",[[1,3199,"ython"]],[3199,3199],[3204,3204]]],[1540984809182,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3211,"`"]],[350,350],[3211,3211]]],[1540984809182,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3211,"`"]],[3211,3211],[350,350]]],[1540984801138,["gjx16@GJXAIOU",[[1,3205,"\n"]],[3204,3204],[3205,3205]]],[1540984802933,["gjx16@GJXAIOU",[[1,3205,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python name = input(\"your name :\")\n\nprint(\"your name is \" + name)"]],[3205,3205],[3315,3315]]],[1540984806556,["gjx16@GJXAIOU",[[1,3235,"\n"]],[3235,3235],[3236,3236]]],[1540984869224,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3323,"`"]],[350,350],[3323,3323]]],[1540984869224,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3323,"`"]],[3323,3323],[350,350]]],[1540984810170,["gjx16@GJXAIOU",[[1,3258,"\n"]],[3258,3258],[3259,3259]]],[1540984811085,["gjx16@GJXAIOU",[[1,3259,"\n"]],[3259,3259],[3260,3260]]],[1540984819715,["gjx16@GJXAIOU",[[1,3325,"\n"]],[3322,3322],[3323,3323]]],[1540984822028,["gjx16@GJXAIOU",[[1,3323,"hanshu"]],[3323,3323],[3329,3329]]],[1540984823211,["gjx16@GJXAIOU",[[-1,3323,"hanshu"]],[3329,3329],[3323,3323]]],[1540984827158,["gjx16@GJXAIOU",[[1,3323,"程序输出"]],[3323,3323],[3327,3327]]],[1540984827682,["gjx16@GJXAIOU",[[-1,3325,"输出"]],[3327,3327],[3325,3325]]],[1540984831328,["gjx16@GJXAIOU",[[1,3325,"运行结果："]],[3325,3325],[3330,3330]]],[1540984832445,["gjx16@GJXAIOU",[[1,3333,"\n"]],[3330,3330],[3331,3331]]],[1540984840989,["gjx16@GJXAIOU",[[1,3331,"your name :gaojixu\nyour name is gaojixu"]],[3331,3331],[3370,3370]]],[1540984844126,["gjx16@GJXAIOU",[[1,3331,"·"]],[3331,3331],[3332,3332]]],[1540984845197,["gjx16@GJXAIOU",[[-1,3331,"·"]],[3332,3332],[3331,3331]]],[1540984845956,["gjx16@GJXAIOU",[[1,3331,"`"]],[3331,3331],[3332,3332]]],[1540984847668,["gjx16@GJXAIOU",[[1,3351,"`"]],[3351,3351],[3352,3352]]],[1540984850156,["gjx16@GJXAIOU",[[1,3372,"`"]],[3372,3372],[3373,3373]]],[1540984851324,["gjx16@GJXAIOU",[[1,3350,"`"]],[3350,3350],[3351,3351]]],[1540984854658,["gjx16@GJXAIOU",[[1,3377,"\n"]],[3374,3374],[3375,3375]]],[1540984863109,["gjx16@GJXAIOU",[[1,3194,",input"]],[3194,3194],[3200,3200]]],[1540984865747,["gjx16@GJXAIOU",[[-1,3195,"input"]],[3200,3200],[3195,3195]]],[1540984867378,["gjx16@GJXAIOU",[[1,3195,"****"]],[3195,3195],[3197,3197]]],[1540984869157,["gjx16@GJXAIOU",[[1,3197,"input "]],[3197,3197],[3203,3203]]],[1540984929219,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3389,"`"]],[350,350],[3389,3389]]],[1540984929219,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3389,"`"]],[3389,3389],[350,350]]],[1540984870567,["gjx16@GJXAIOU",[[1,3203,"()"]],[3203,3203],[3205,3205]]],[1540984887159,["gjx16@GJXAIOU",[[1,3207,"返回的结果为字符串类型的对象"]],[3207,3207],[3221,3221]]],[1540985229228,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3405,"`"]],[350,350],[3405,3405]]],[1540985229228,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3405,"`"]],[3405,3405],[350,350]]],[1540985173615,["gjx16@GJXAIOU",[[-1,3262,"\n"],[-1,3285,"\n\n"],[1,3301,"what's "],[-1,3311,":"],[1,3312,"?\")\nage = input(\"how old are you ?"],[1,3344,")\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 print(\"you will be\" +str(after_ten) + \"years old after ten years.\""]],[3232,3345],[3515,3515]]],[1540985176758,["gjx16@GJXAIOU",[[1,3283,"\n"]],[3283,3283],[3284,3284]]],[1540985179129,["gjx16@GJXAIOU",[[-1,3284," "]],[3285,3285],[3284,3284]]],[1540985182514,["gjx16@GJXAIOU",[[1,3262,"\n"]],[3262,3262],[3263,3263]]],[1540985190010,["gjx16@GJXAIOU",[[1,3449,"\n"]],[3449,3449],[3450,3450]]],[1540985216946,["gjx16@GJXAIOU",[[-1,3530,"`your name :gaojixu`\n`your name is gaojixu`"],[1,3573,"·"]],[3530,3530],[3531,3531]]],[1540985218181,["gjx16@GJXAIOU",[[-1,3530,"·"]],[3531,3531],[3530,3530]]],[1540985218911,["gjx16@GJXAIOU",[[1,3530,"``"]],[3530,3530],[3532,3532]]],[1540985220610,["gjx16@GJXAIOU",[[1,3531,"what's your name ?gaojixu\nhow old are you ?23\nyour name is gaojixu\nyou are 23years old.\nyou will be33years old after ten years."]],[3531,3531],[3658,3658]]],[1540985223230,["gjx16@GJXAIOU",[[1,3556,"`"]],[3556,3556],[3557,3557]]],[1540985224406,["gjx16@GJXAIOU",[[1,3577,"`"]],[3577,3577],[3578,3578]]],[1540985225049,["gjx16@GJXAIOU",[[1,3599,"`"]],[3599,3599],[3600,3600]]],[1540985225596,["gjx16@GJXAIOU",[[1,3621,"`"]],[3621,3621],[3622,3622]]],[1540985289228,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3667,"`"]],[350,350],[3667,3667]]],[1540985289228,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3667,"`"]],[3667,3667],[350,350]]],[1540985229955,["gjx16@GJXAIOU",[[1,3601,"`"]],[3601,3601],[3602,3602]]],[1540985231573,["gjx16@GJXAIOU",[[1,3624,"`"]],[3624,3624],[3625,3625]]],[1540985233004,["gjx16@GJXAIOU",[[1,3579,"`"]],[3579,3579],[3580,3580]]],[1540985234064,["gjx16@GJXAIOU",[[1,3558,"`"]],[3558,3558],[3559,3559]]],[1540985260815,["gjx16@GJXAIOU",[[1,3579,"6."]],[3579,3579],[3581,3581]]],[1540985261877,["gjx16@GJXAIOU",[[-1,3579,"6."]],[3581,3581],[3579,3579]]],[1540985264259,["gjx16@GJXAIOU",[[1,3671,"\n"]],[3668,3668],[3669,3669]]],[1540985264414,["gjx16@GJXAIOU",[[1,3672,"\n"]],[3669,3669],[3670,3670]]],[1540985268342,["gjx16@GJXAIOU",[[1,3670,"6.yu"]],[3670,3670],[3674,3674]]],[1540985268778,["gjx16@GJXAIOU",[[-1,3672,"yu"]],[3674,3674],[3672,3672]]],[1540985288682,["gjx16@GJXAIOU",[[1,3672,"原始字符串：由r引起"]],[3672,3672],[3682,3682]]],[1540985349231,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3685,"`"]],[350,350],[3685,3685]]],[1540985349231,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3685,"`"]],[3685,3685],[350,350]]],[1540985290371,["gjx16@GJXAIOU",[[-1,3680,"引起"]],[3682,3682],[3680,3680]]],[1540985294590,["gjx16@GJXAIOU",[[1,3680,"开头因为"]],[3680,3680],[3684,3684]]],[1540985295820,["gjx16@GJXAIOU",[[-1,3679,"r开头因为"]],[3684,3684],[3679,3679]]],[1540985297468,["gjx16@GJXAIOU",[[1,3679,"``"]],[3679,3679],[3681,3681]]],[1540985298548,["gjx16@GJXAIOU",[[1,3680,"r"]],[3680,3680],[3681,3681]]],[1540985329856,["gjx16@GJXAIOU",[[1,3682,"开头引起的字符串就是原始字符串，在里面放置任何字符嗾使"]],[3682,3682],[3709,3709]]],[1540985331154,["gjx16@GJXAIOU",[[-1,3707,"嗾使"]],[3709,3709],[3707,3707]]],[1540985335059,["gjx16@GJXAIOU",[[1,3707,"都是原始汉所以"]],[3707,3707],[3714,3714]]],[1540985336429,["gjx16@GJXAIOU",[[-1,3711,"汉所以"]],[3714,3714],[3711,3711]]],[1540985347642,["gjx16@GJXAIOU",[[1,3711,"含义，也就是说没有转义字符的"]],[3711,3711],[3725,3725]]],[1540985409234,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3728,"`"]],[350,350],[3728,3728]]],[1540985409234,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3728,"`"]],[3728,3728],[350,350]]],[1540985350971,["gjx16@GJXAIOU",[[1,3725,"性质"]],[3725,3725],[3727,3727]]],[1540985589235,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3730,"`"]],[350,350],[3730,3730]]],[1540985589235,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3730,"`"]],[3730,3730],[350,350]]],[1540985564937,["gjx16@GJXAIOU",[[1,3730,"\n"]],[3727,3727],[3728,3728]]],[1540985565491,["gjx16@GJXAIOU",[[1,3731,"\n"]],[3728,3728],[3729,3729]]],[1540985649236,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3732,"`"]],[350,350],[3732,3732]]],[1540985649236,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3732,"`"]],[3732,3732],[350,350]]],[1540985603370,["gjx16@GJXAIOU",[[1,3732,"\n"]],[3729,3729],[3730,3730]]],[1540985603539,["gjx16@GJXAIOU",[[1,3733,"\n"]],[3730,3730],[3731,3731]]],[1540985607136,["gjx16@GJXAIOU",[[1,3731,"7.****"]],[3731,3731],[3735,3735]]],[1540985610215,["gjx16@GJXAIOU",[[1,3735,"序列："]],[3735,3735],[3738,3738]]],[1540985634646,["gjx16@GJXAIOU",[[1,3740,"有序排列，例如字符串、列表等等统称为序列】"]],[3740,3740],[3761,3761]]],[1540985635084,["gjx16@GJXAIOU",[[1,3764,"\n"]],[3761,3761],[3762,3762]]],[1540985636322,["gjx16@GJXAIOU",[[-1,3764,"\n"]],[3762,3762],[3761,3761]]],[1540985636476,["gjx16@GJXAIOU",[[-1,3760,"】"]],[3761,3761],[3760,3760]]],[1540985637461,["gjx16@GJXAIOU",[[1,3763,"\n"]],[3760,3760],[3761,3761]]],[1540985638436,["gjx16@GJXAIOU",[[1,3764,"\n"]],[3761,3761],[3762,3762]]],[1540985639432,["gjx16@GJXAIOU",[[1,3762,"8、"]],[3762,3762],[3764,3764]]],[1540985640322,["gjx16@GJXAIOU",[[-1,3763,"、"]],[3764,3764],[3763,3763]]],[1540985641121,["gjx16@GJXAIOU",[[1,3763,"。"]],[3763,3763],[3764,3764]]],[1540985642002,["gjx16@GJXAIOU",[[-1,3763,"。"]],[3764,3764],[3763,3763]]],[1540985644286,["gjx16@GJXAIOU",[[1,3763,".****"]],[3763,3763],[3766,3766]]],[1540985649078,["gjx16@GJXAIOU",[[1,3766,"索引："]],[3766,3766],[3769,3769]]],[1540985709235,[null,[[-1,350,"`"],[1,372,""],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3774,"`"]],[350,350],[3774,3774]]],[1540985709235,[null,[[1,350,"`"],[-1,371,""],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3774,"`"]],[3774,3774],[350,350]]],[1540985689030,["gjx16@GJXAIOU",[[1,3771,"序列中每一个都有编号，这个编号即为：索引"]],[3771,3771],[3791,3791]]],[1540985708418,["gjx16@GJXAIOU",[[1,3794,"\n"]],[3791,3791],[3792,3792]]],[1540985769241,[null,[[-1,350,"`"],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3795,"`"]],[350,350],[3795,3795]]],[1540985769241,[null,[[1,350,"`"],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3795,"`"]],[3795,3795],[350,350]]],[1540985712713,["gjx16@GJXAIOU",[[1,3792,"例如："]],[3792,3792],[3795,3795]]],[1540985713196,["gjx16@GJXAIOU",[[1,3798,"\n"]],[3795,3795],[3796,3796]]],[1540988769280,[null,[[-1,350,"`"],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3799,"`"]],[350,350],[3799,3799]]],[1540988769280,[null,[[1,350,"`"],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3799,"`"]],[3799,3799],[350,350]]],[1540988728527,["gjx16@GJXAIOU",[[1,3796,"```"]],[3796,3796],[3799,3799]]],[1540988728563,["gjx16@GJXAIOU",[[1,3799,"language\n```\n"]],[3799,3799],[3799,3807]]],[1540988730159,["gjx16@GJXAIOU",[[-1,3799,"language"],[1,3807,"p"]],[3799,3807],[3800,3800]]],[1540988731027,["gjx16@GJXAIOU",[[1,3800,"ython"]],[3800,3800],[3805,3805]]],[1540988731807,["gjx16@GJXAIOU",[[1,3806,"\n"]],[3805,3805],[3806,3806]]],[1540988746242,["gjx16@GJXAIOU",[[1,3806,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python # 索引 lang = \"python is beautiful\" print(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置   print(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）   ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） print(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的 print(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址     #对比如下的赋值语句 ans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） print(\"lang[:9] = \",ans5)"]],[3806,3806],[4486,4486]]],[1540988750384,["gjx16@GJXAIOU",[[-1,3806,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python # 索引 lang = \"python is beautiful\" print(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置   print(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）   ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） print(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的 print(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址     #对比如下的赋值语句 ans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） print(\"lang[:9] = \",ans5)"]],[4486,4486],[3806,3806]]],[1540988829283,[null,[[-1,350,"`"],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,3814,"`"]],[350,350],[3814,3814]]],[1540988829283,[null,[[1,350,"`"],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,3814,"`"]],[3814,3814],[350,350]]],[1540988775570,["gjx16@GJXAIOU",[[1,3806,"#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python # 索引 lang = \"python is beautiful\" print(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置   print(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）   ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） print(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的 print(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址     #对比如下的赋值语句 ans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） print(\"lang[:9] = \",ans5)"]],[3806,3806],[4486,4486]]],[1540988781605,["gjx16@GJXAIOU",[[1,3858,"\n"]],[3858,3858],[3859,3859]]],[1540988784272,["gjx16@GJXAIOU",[[1,3864,"\n"]],[3864,3864],[3865,3865]]],[1540988787367,["gjx16@GJXAIOU",[[1,3835,"\n"]],[3835,3835],[3836,3836]]],[1540988795797,["gjx16@GJXAIOU",[[-1,3836," "]],[3837,3837],[3836,3836]]],[1540988799560,["gjx16@GJXAIOU",[[1,3894,"\n"]],[3894,3894],[3895,3895]]],[1540988802885,["gjx16@GJXAIOU",[[1,3859,"\n"]],[3858,3858],[3859,3859]]],[1540988808125,["gjx16@GJXAIOU",[[1,3947,"\n"]],[3946,3946],[3947,3947]]],[1540988809321,["gjx16@GJXAIOU",[[1,3991,"\n"]],[3991,3991],[3992,3992]]],[1540988813981,["gjx16@GJXAIOU",[[-1,3992," "]],[3993,3993],[3992,3992]]],[1540988817781,["gjx16@GJXAIOU",[[1,4051,"\n"]],[4051,4051],[4052,4052]]],[1540988820381,["gjx16@GJXAIOU",[[1,4096,"\n "]],[4096,4096],[4098,4098]]],[1540988825190,["gjx16@GJXAIOU",[[1,4162,"\n"]],[4162,4162],[4163,4163]]],[1540988889290,[null,[[-1,350,"`"],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,4503,"`"]],[350,350],[4503,4503]]],[1540988889290,[null,[[1,350,"`"],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,4503,"`"]],[4503,4503],[350,350]]],[1540988829533,["gjx16@GJXAIOU",[[1,4256,"\n"]],[4256,4256],[4257,4257]]],[1540988837157,["gjx16@GJXAIOU",[[1,4356,"\n"]],[4356,4356],[4357,4357]]],[1540988838765,["gjx16@GJXAIOU",[[1,4357,"\n "]],[4357,4357],[4359,4359]]],[1540988841407,["gjx16@GJXAIOU",[[1,4371,"\n  "]],[4371,4371],[4374,4374]]],[1540988843605,["gjx16@GJXAIOU",[[-1,4372,"  "]],[4374,4374],[4372,4372]]],[1540988845253,["gjx16@GJXAIOU",[[-1,4358,"  "]],[4360,4360],[4358,4358]]],[1540988847240,["gjx16@GJXAIOU",[[-1,4257," "]],[4258,4258],[4257,4257]]],[1540988853469,["gjx16@GJXAIOU",[[1,4472,"\n"]],[4472,4472],[4473,4473]]],[1540988858944,["gjx16@GJXAIOU",[[1,4506,"\n"]],[4502,4502],[4503,4503]]],[1540988860431,["gjx16@GJXAIOU",[[1,4503,"c"]],[4503,4503],[4504,4504]]],[1540988860885,["gjx16@GJXAIOU",[[-1,4503,"c"]],[4504,4504],[4503,4503]]],[1540988867424,["gjx16@GJXAIOU",[[1,4503,"程序运行结果："]],[4503,4503],[4510,4510]]],[1540988868056,["gjx16@GJXAIOU",[[1,4514,"\n"]],[4510,4510],[4511,4511]]],[1540988878399,["gjx16@GJXAIOU",[[1,4511,"lang =  python is beautiful\nlang[3] =  h\nindex('p')=  0\nlang[2:9] =  thon is\nlang[1:] =  ython is beautiful\nans4 =  python is beautiful\nid(lang) =  2381962817448 id(ans4) =  2381962817448\nid(lang) =  2381962817448 id(ans4) =  2381962817448\nlang[:9] =  python is"]],[4511,4511],[4772,4772]]],[1540988882537,["gjx16@GJXAIOU",[[1,4511,"`"]],[4511,4511],[4512,4512]]],[1540988884354,["gjx16@GJXAIOU",[[1,4540,"`"]],[4540,4540],[4541,4541]]],[1540988885713,["gjx16@GJXAIOU",[[1,4554,"`"]],[4554,4554],[4555,4555]]],[1540988886703,["gjx16@GJXAIOU",[[1,4570,"`"]],[4570,4570],[4571,4571]]],[1540988887768,["gjx16@GJXAIOU",[[1,4592,"`"]],[4592,4592],[4593,4593]]],[1540988888735,["gjx16@GJXAIOU",[[1,4624,"`"]],[4624,4624],[4625,4625]]],[1540988949288,[null,[[-1,350,"`"],[-1,1453,"\n"],[1,1455,"\n"],[1,1475,"n"],[-1,1476," "],[1,2065,"`"],[-1,4782,"`"]],[350,350],[4782,4782]]],[1540988949288,[null,[[1,350,"`"],[1,1452,"\n"],[-1,1453,"\n"],[-1,1474,"n"],[1,1476," "],[-1,2064,"`"],[1,4782,"`"]],[4782,4782],[350,350]]],[1540988889932,["gjx16@GJXAIOU",[[1,4653,"`"]],[4653,4653],[4654,4654]]],[1540988890986,["gjx16@GJXAIOU",[[1,4706,"`"]],[4706,4706],[4707,4707]]],[1540988892274,["gjx16@GJXAIOU",[[1,4759,"`"]],[4759,4759],[4760,4760]]],[1540988896609,["gjx16@GJXAIOU",[[1,4781,"`"]],[4781,4781],[4782,4782]]],[1540988899842,["gjx16@GJXAIOU",[[1,4758,"`"]],[4758,4758],[4759,4759]]],[1540988900680,["gjx16@GJXAIOU",[[1,4705,"`"]],[4705,4705],[4706,4706]]],[1540988901343,["gjx16@GJXAIOU",[[1,4652,"`"]],[4652,4652],[4653,4653]]],[1540988901930,["gjx16@GJXAIOU",[[1,4623,"`"]],[4623,4623],[4624,4624]]],[1540988902487,["gjx16@GJXAIOU",[[1,4591,"`"]],[4591,4591],[4592,4592]]],[1540988902978,["gjx16@GJXAIOU",[[1,4569,"`"]],[4569,4569],[4570,4570]]],[1540988903387,["gjx16@GJXAIOU",[[1,4553,"`"]],[4553,4553],[4554,4554]]],[1540988906403,["gjx16@GJXAIOU",[[1,4539,"`"]],[4539,4539],[4540,4540]]],[1540988910264,["gjx16@GJXAIOU",[[1,4794,"\n"]],[4790,4790],[4791,4791]]],[1540988910397,["gjx16@GJXAIOU",[[1,4795,"\n"]],[4791,4791],[4792,4792]]]],null,"gjx16@GJXAIOU"],["acc1cbe4-618e-4a32-8c8f-b3834acfba7c",1541309915918,"# 第1章 基本对象类型\n\n浮点数的所有运算都要注意\n\n1.python可以自动处理大整数问题，不必担心溢出\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个对象在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n5.**对象有类型，变量无类型**\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 `**` 表示乘幂 ，等效于`pow()`函数，当然要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算到 数有没有浮点数==\n\n9、`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10、python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n12.针对python中的浮点数问题\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python from fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n\n## python中的标准库\n\n1.**常见的数学函数以及运算优先级**\n- 使用`math`\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 字符串\n\n1.字符串使用单引号或者双引号包裹，\n\n当字符串内部含有其中一种符号时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先`+`两边的对象给的数据类型必须一致 ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；`repr()`函数作用是返回一个字符串对象；[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续航，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()**返回的结果为字符串类型的对象\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU #coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \n ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \n print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n\n\n",[[1541309881898,["gjx16@GJXAIOU",[[1,4796,"\n"]],[4791,4791],[4792,4792]]],[1541309882009,["gjx16@GJXAIOU",[[1,4797,"\n"]],[4792,4792],[4793,4793]]],[1541309927608,["gjx16@GJXAIOU",[[1,4798,"\n"]],[4793,4793],[4794,4794]]],[1541309943424,["gjx16@GJXAIOU",[[1,4794,"### 1.5.8 字符串的基本操作"]],[4794,4794],[4812,4812]]],[1541309944320,["gjx16@GJXAIOU",[[1,4817,"\n"]],[4812,4812],[4813,4813]]],[1541309944465,["gjx16@GJXAIOU",[[1,4818,"\n"]],[4813,4813],[4814,4814]]],[1541309954028,["gjx16@GJXAIOU",[[1,4814,"- len() q"]],[4814,4814],[4823,4823]]],[1541309954584,["gjx16@GJXAIOU",[[-1,4822,"q"]],[4823,4823],[4822,4822]]],[1541309962642,["gjx16@GJXAIOU",[[1,4822,"求字符串的长度"]],[4822,4822],[4829,4829]]],[1541309963130,["gjx16@GJXAIOU",[[1,4830,"- \n"]],[4829,4829],[4832,4832]]],[1541309971133,["gjx16@GJXAIOU",[[1,4832,"+  连接"]],[4832,4832],[4837,4837]]],[1541309974768,["gjx16@GJXAIOU",[[-1,4833,"  连接"]],[4837,4837],[4833,4833]]],[1541309976114,["gjx16@GJXAIOU",[[1,4833," "]],[4833,4833],[4834,4834]]],[1541309977599,["gjx16@GJXAIOU",[[-1,4832,"+ "]],[4834,4834],[4832,4832]]],[1541309978362,["gjx16@GJXAIOU",[[1,4832," "]],[4832,4832],[4833,4833]]],[1541309979220,["gjx16@GJXAIOU",[[-1,4832," "]],[4833,4833],[4832,4832]]],[1541309980439,["gjx16@GJXAIOU",[[1,4832,"··"]],[4832,4832],[4834,4834]]],[1541309981624,["gjx16@GJXAIOU",[[-1,4832,"··"]],[4834,4834],[4832,4832]]],[1541309982716,["gjx16@GJXAIOU",[[1,4832,"``"]],[4832,4832],[4834,4834]]],[1541309985381,["gjx16@GJXAIOU",[[1,4833,"="]],[4833,4833],[4834,4834]]],[1541309986536,["gjx16@GJXAIOU",[[-1,4833,"="]],[4834,4834],[4833,4833]]],[1541309986930,["gjx16@GJXAIOU",[[1,4833,"+"]],[4833,4833],[4834,4834]]],[1541309992161,["gjx16@GJXAIOU",[[1,4835,"    lianjie"]],[4835,4835],[4846,4846]]],[1541309994087,["gjx16@GJXAIOU",[[-1,4839,"lianjie"]],[4846,4846],[4839,4839]]],[1541310000666,["gjx16@GJXAIOU",[[1,4839,"连接两个序列"]],[4839,4839],[4845,4845]]],[1541310023783,["gjx16@GJXAIOU",[[1,4846,"- \n"]],[4845,4845],[4848,4848]]],[1541310028761,["gjx16@GJXAIOU",[[1,4848,"``"]],[4848,4848],[4850,4850]]],[1541310030617,["gjx16@GJXAIOU",[[1,4849,"*"]],[4849,4849],[4850,4850]]],[1541310032860,["gjx16@GJXAIOU",[[1,4851,"   "]],[4851,4851],[4854,4854]]],[1541310035441,["gjx16@GJXAIOU",[[1,4854,"chong"]],[4854,4854],[4859,4859]]],[1541310036679,["gjx16@GJXAIOU",[[-1,4854,"chong"]],[4859,4859],[4854,4854]]],[1541310045523,["gjx16@GJXAIOU",[[1,4854,"重复序列元素"]],[4854,4854],[4860,4860]]],[1541310046031,["gjx16@GJXAIOU",[[1,4861,"- \n"]],[4860,4860],[4863,4863]]],[1541310049977,["gjx16@GJXAIOU",[[1,4863,"``"]],[4863,4863],[4865,4865]]],[1541310052679,["gjx16@GJXAIOU",[[-1,4869,"\n"]],[4866,4866],[4865,4865]]],[1541310053201,["gjx16@GJXAIOU",[[-1,4864,"`"]],[4865,4865],[4864,4864]]],[1541310072069,["gjx16@GJXAIOU",[[1,4864,"in`  判断元素是否存在于序列中"]],[4864,4864],[4881,4881]]],[1541310073608,["gjx16@GJXAIOU",[[1,4882,"- \n"]],[4881,4881],[4884,4884]]],[1541310076074,["gjx16@GJXAIOU",[[1,4884,"``"]],[4884,4884],[4886,4886]]],[1541310079550,["gjx16@GJXAIOU",[[1,4885,"max()"]],[4885,4885],[4890,4890]]],[1541310087059,["gjx16@GJXAIOU",[[1,4891,"  返回最大值"]],[4891,4891],[4898,4898]]],[1541310087535,["gjx16@GJXAIOU",[[1,4899,"- \n"]],[4898,4898],[4901,4901]]],[1541310089892,["gjx16@GJXAIOU",[[1,4901,"``"]],[4901,4901],[4903,4903]]],[1541310092684,["gjx16@GJXAIOU",[[1,4902,"min()"]],[4902,4902],[4907,4907]]],[1541310094236,["gjx16@GJXAIOU",[[1,4908," "]],[4908,4908],[4909,4909]]],[1541310095449,["gjx16@GJXAIOU",[[1,4909,"fanh"]],[4909,4909],[4913,4913]]],[1541310096615,["gjx16@GJXAIOU",[[-1,4909,"fanh"]],[4913,4913],[4909,4909]]],[1541310100648,["gjx16@GJXAIOU",[[1,4909,"返回最小值"]],[4909,4909],[4914,4914]]],[1541310108549,["gjx16@GJXAIOU",[[1,4822,"·"]],[4822,4822],[4823,4823]]],[1541310111955,["gjx16@GJXAIOU",[[-1,4822,"·"]],[4823,4823],[4822,4822]]],[1541310114930,["gjx16@GJXAIOU",[[1,4822,"`"]],[4822,4822],[4823,4823]]],[1541310118597,["gjx16@GJXAIOU",[[1,4816,"`"]],[4816,4816],[4817,4817]]],[1541327869425,["gjx16@GJXAIOU",[[1,4917,"- \n"]],[4916,4916],[4919,4919]]],[1541328048774,["gjx16@GJXAIOU",[[1,4919,"``"]],[4919,4919],[4921,4921]]],[1541328059036,["gjx16@GJXAIOU",[[-1,4919,"``"]],[4921,4921],[4919,4919]]],[1541328060078,["gjx16@GJXAIOU",[[-1,4917,"- "]],[4919,4919],[4917,4917]]],[1541328061660,["gjx16@GJXAIOU",[[-1,4920,"\n"]],[4917,4917],[4916,4916]]],[1541328084207,["gjx16@GJXAIOU",[[1,4834,"\n- "]],[4831,4831],[4834,4834]]],[1541328086284,["gjx16@GJXAIOU",[[-1,4832,"- "]],[4834,4834],[4832,4832]]],[1541328372163,["gjx16@GJXAIOU",[[1,4851,"\n- "]],[4848,4848],[4851,4851]]],[1541328373307,["gjx16@GJXAIOU",[[-1,4849,"- "]],[4851,4851],[4849,4849]]],[1541328416007,["gjx16@GJXAIOU",[[1,4849,"  ··"]],[4849,4849],[4853,4853]]],[1541328419243,["gjx16@GJXAIOU",[[-1,4850," ··"]],[4853,4853],[4850,4850]]],[1541328419458,["gjx16@GJXAIOU",[[-1,4849," "]],[4850,4850],[4849,4849]]],[1541328421398,["gjx16@GJXAIOU",[[1,4849,"·"]],[4849,4849],[4850,4850]]],[1541328422518,["gjx16@GJXAIOU",[[-1,4849,"·"]],[4850,4850],[4849,4849]]],[1541328424757,["gjx16@GJXAIOU",[[1,4849,"```"]],[4849,4849],[4852,4852]]],[1541328424793,["gjx16@GJXAIOU",[[1,4852,"language\n```\n"]],[4852,4852],[4852,4860]]],[1541328426071,["gjx16@GJXAIOU",[[-1,4852,"language"],[1,4860,"c"]],[4852,4860],[4853,4853]]],[1541328426315,["gjx16@GJXAIOU",[[1,4854,"\n"]],[4853,4853],[4854,4854]]],[1541328436933,["gjx16@GJXAIOU",[[1,4854,"str1 = \"\""]],[4854,4854],[4863,4863]]],[1541328441509,["gjx16@GJXAIOU",[[1,4862,"python"]],[4862,4862],[4868,4868]]],[1541328444483,["gjx16@GJXAIOU",[[1,4870,"\n"]],[4869,4869],[4870,4870]]],[1541328448917,["gjx16@GJXAIOU",[[1,4870,"str2 = \"\""]],[4870,4870],[4879,4879]]],[1541328452773,["gjx16@GJXAIOU",[[1,4878,"liso"]],[4878,4878],[4882,4882]]],[1541328453346,["gjx16@GJXAIOU",[[-1,4881,"o"]],[4882,4882],[4881,4881]]],[1541328454064,["gjx16@GJXAIOU",[[1,4881,"p"]],[4881,4881],[4882,4882]]],[1541328458749,["gjx16@GJXAIOU",[[1,4884,"\n"]],[4884,4884],[4885,4885]]],[1541328464949,["gjx16@GJXAIOU",[[1,4884,"srt"]],[4884,4884],[4887,4887]]],[1541328465547,["gjx16@GJXAIOU",[[-1,4885,"rt"]],[4887,4887],[4885,4885]]],[1541328465886,["gjx16@GJXAIOU",[[1,4885,"tr"]],[4885,4885],[4887,4887]]],[1541328468539,["gjx16@GJXAIOU",[[-1,4884,"str"]],[4887,4887],[4884,4884]]],[1541328533559,["gjx16@GJXAIOU",[[-1,4869,"\n"],[1,4870," "],[1,4883," print(str1 + \"&\"+ str2)"]],[4854,4883],[4907,4907]]],[1541328536428,["gjx16@GJXAIOU",[[1,4870,"\n"]],[4870,4870],[4871,4871]]],[1541328539572,["gjx16@GJXAIOU",[[1,4885,"\n"]],[4885,4885],[4886,4886]]],[1541328541659,["gjx16@GJXAIOU",[[-1,4910,"\n"]],[4910,4910],[4909,4909]]],[1541328543472,["gjx16@GJXAIOU",[[1,4915,"\n"]],[4913,4913],[4914,4914]]],[1541328544839,["gjx16@GJXAIOU",[[1,4914,"cheng"]],[4914,4914],[4919,4919]]],[1541328545877,["gjx16@GJXAIOU",[[-1,4914,"cheng"]],[4919,4919],[4914,4914]]],[1541328552772,["gjx16@GJXAIOU",[[1,4914,"程序运行结果；"]],[4914,4914],[4921,4921]]],[1541328554142,["gjx16@GJXAIOU",[[-1,4920,"；"]],[4921,4921],[4920,4920]]],[1541328556870,["gjx16@GJXAIOU",[[1,4920,"：``"]],[4920,4920],[4923,4923]]],[1541328566939,["gjx16@GJXAIOU",[[1,4922,"python&lisp"]],[4922,4922],[4933,4933]]],[1541328571132,["gjx16@GJXAIOU",[[1,4953,"\n- "]],[4950,4950],[4953,4953]]],[1541328572491,["gjx16@GJXAIOU",[[-1,4951,"- "]],[4953,4953],[4951,4951]]],[1541328642301,["gjx16@GJXAIOU",[[1,4951,"```"]],[4951,4951],[4954,4954]]],[1541328642336,["gjx16@GJXAIOU",[[1,4954,"language\n```\n"]],[4954,4954],[4954,4962]]],[1541328643207,["gjx16@GJXAIOU",[[-1,4954,"language"],[1,4962,"c"]],[4954,4962],[4955,4955]]],[1541328643443,["gjx16@GJXAIOU",[[1,4956,"\n"]],[4955,4955],[4956,4956]]],[1541328644723,["gjx16@GJXAIOU",[[-1,4956,"\n"]],[4956,4956],[4955,4955]]],[1541328645077,["gjx16@GJXAIOU",[[-1,4954,"c"]],[4955,4955],[4954,4954]]],[1541328647205,["gjx16@GJXAIOU",[[1,4954,"python"]],[4954,4954],[4960,4960]]],[1541328648234,["gjx16@GJXAIOU",[[1,4961,"\n"]],[4960,4960],[4961,4961]]],[1541328649259,["gjx16@GJXAIOU",[[1,4961,"str1 = \"python\" print(\"th\" in str1)"]],[4961,4961],[4996,4996]]],[1541328651670,["gjx16@GJXAIOU",[[1,4977,"\n"]],[4977,4977],[4978,4978]]],[1541328654029,["gjx16@GJXAIOU",[[-1,4852,"c"]],[4853,4853],[4852,4852]]],[1541328655645,["gjx16@GJXAIOU",[[1,4852,"python"]],[4852,4852],[4858,4858]]],[1541328659783,["gjx16@GJXAIOU",[[1,5008,"\n"]],[5006,5006],[5007,5007]]],[1541328661756,["gjx16@GJXAIOU",[[1,5007,"huanshu"]],[5007,5007],[5014,5014]]],[1541328663162,["gjx16@GJXAIOU",[[-1,5007,"huanshu"]],[5014,5014],[5007,5007]]],[1541328665182,["gjx16@GJXAIOU",[[1,5007,"函数"]],[5007,5007],[5009,5009]]],[1541328666469,["gjx16@GJXAIOU",[[-1,5007,"函数"]],[5009,5009],[5007,5007]]],[1541328687445,["gjx16@GJXAIOU",[[1,5007,"程序运行结果：``"]],[5007,5007],[5016,5016]]],[1541328692492,["gjx16@GJXAIOU",[[1,5015,"Truw"]],[5015,5015],[5019,5019]]],[1541328693187,["gjx16@GJXAIOU",[[-1,5018,"w"]],[5019,5019],[5018,5018]]],[1541328693333,["gjx16@GJXAIOU",[[1,5018,"e"]],[5018,5018],[5019,5019]]],[1541328801437,["gjx16@GJXAIOU",[[1,5062,"\n- "]],[5059,5059],[5062,5062]]],[1541328802610,["gjx16@GJXAIOU",[[-1,5060,"- "]],[5062,5062],[5060,5060]]],[1541328804472,["gjx16@GJXAIOU",[[1,5060,"···"]],[5060,5060],[5063,5063]]],[1541328805532,["gjx16@GJXAIOU",[[-1,5060,"···"]],[5063,5063],[5060,5060]]],[1541328806620,["gjx16@GJXAIOU",[[1,5060,"```"]],[5060,5060],[5063,5063]]],[1541328806656,["gjx16@GJXAIOU",[[1,5063,"language\n```\n"]],[5063,5063],[5063,5071]]],[1541328808348,["gjx16@GJXAIOU",[[-1,5063,"language"],[1,5071,"p"]],[5063,5071],[5064,5064]]],[1541328809047,["gjx16@GJXAIOU",[[1,5064,"ython"]],[5064,5064],[5069,5069]]],[1541328810015,["gjx16@GJXAIOU",[[1,5070,"\n"]],[5069,5069],[5070,5070]]],[1541328810971,["gjx16@GJXAIOU",[[1,5070,"str1 = \"python\" print(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))"]],[5070,5070],[5139,5139]]],[1541328814066,["gjx16@GJXAIOU",[[1,5086,"\n"]],[5086,5086],[5087,5087]]],[1541328818579,["gjx16@GJXAIOU",[[-1,4956,"```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```"]],[4956,5006],[4956,4956]]],[1541328820674,["gjx16@GJXAIOU",[[1,4995,"\n- "]],[4992,4992],[4995,4995]]],[1541328821186,["gjx16@GJXAIOU",[[-1,4993,"- "]],[4995,4995],[4993,4993]]],[1541328822141,["gjx16@GJXAIOU",[[1,4993,"```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```"]],[4993,4993],[5043,5043]]],[1541328944083,["gjx16@GJXAIOU",[[-1,4957,"程序运行结果：`True`"]],[4957,4970],[4957,4957]]],[1541328946126,["gjx16@GJXAIOU",[[1,5031,"\n"]],[5030,5030],[5031,5031]]],[1541328946635,["gjx16@GJXAIOU",[[1,5031,"程序运行结果：`True`"]],[5031,5031],[5044,5044]]],[1541328948460,["gjx16@GJXAIOU",[[1,5045,"\n"]],[5044,5044],[5045,5045]]],[1541328956966,["gjx16@GJXAIOU",[[-1,5151,"`min()` 返回最小值"]],[5151,5164],[5151,5151]]],[1541328959096,["gjx16@GJXAIOU",[[1,5062,"  "]],[5062,5062],[5064,5064]]],[1541328961948,["gjx16@GJXAIOU",[[1,5064,";   `min()` 返回最小值"]],[5064,5064],[5081,5081]]],[1541328964963,["gjx16@GJXAIOU",[[-1,5173,"\n"]],[5171,5171],[5170,5170]]],[1541328965301,["gjx16@GJXAIOU",[[-1,5168,"- "]],[5170,5170],[5168,5168]]],[1541328965667,["gjx16@GJXAIOU",[[-1,5170,"\n"]],[5168,5168],[5167,5167]]],[1541328965851,["gjx16@GJXAIOU",[[-1,5169,"\n"]],[5167,5167],[5166,5166]]],[1541328985524,["gjx16@GJXAIOU",[[1,5169,"\n"]],[5166,5166],[5167,5167]]],[1541328986801,["gjx16@GJXAIOU",[[1,5167,"cheng"]],[5167,5167],[5172,5172]]],[1541328988003,["gjx16@GJXAIOU",[[-1,5167,"cheng"]],[5172,5172],[5167,5167]]],[1541328996491,["gjx16@GJXAIOU",[[1,5167,"cheng"]],[5167,5167],[5172,5172]]],[1541328997667,["gjx16@GJXAIOU",[[-1,5167,"cheng"]],[5172,5172],[5167,5167]]],[1541329019144,["gjx16@GJXAIOU",[[1,5167,"程序运行结果：``"]],[5167,5167],[5176,5176]]],[1541329021034,["gjx16@GJXAIOU",[[1,5175,"max(str1)=  y min(str1)= h"]],[5175,5175],[5201,5201]]],[1541329024972,["gjx16@GJXAIOU",[[1,5205,"\n"]],[5202,5202],[5203,5203]]],[1541329031472,["gjx16@GJXAIOU",[[1,5203,"BI"]],[5203,5203],[5205,5205]]],[1541329032010,["gjx16@GJXAIOU",[[-1,5203,"BI"]],[5205,5205],[5203,5203]]],[1541329034788,["gjx16@GJXAIOU",[[1,5203,"BIJ"]],[5203,5203],[5206,5206]]],[1541329035442,["gjx16@GJXAIOU",[[-1,5203,"BIJ"]],[5206,5206],[5203,5203]]],[1541329037495,["gjx16@GJXAIOU",[[1,5203,"b"]],[5203,5203],[5204,5204]]],[1541329038108,["gjx16@GJXAIOU",[[-1,5203,"b"]],[5204,5204],[5203,5203]]],[1541329051594,["gjx16@GJXAIOU",[[1,5203,"比较的是字符编码，"]],[5203,5203],[5212,5212]]],[1541329052373,["gjx16@GJXAIOU",[[-1,5211,"，"]],[5212,5212],[5211,5211]]],[1541329064181,["gjx16@GJXAIOU",[[1,5211,"：可以使用内建函数``"]],[5211,5211],[5222,5222]]],[1541329067160,["gjx16@GJXAIOU",[[1,5221,"ord()"]],[5221,5221],[5226,5226]]],[1541329078175,["gjx16@GJXAIOU",[[1,5227,"获得一个字符对应的"]],[5227,5227],[5236,5236]]],[1541329081607,["gjx16@GJXAIOU",[[1,5236,"数字编码"]],[5236,5236],[5240,5240]]],[1541329082348,["gjx16@GJXAIOU",[[1,5243,"\n"]],[5240,5240],[5241,5241]]],[1541329084226,["gjx16@GJXAIOU",[[1,5241,"例如："]],[5241,5241],[5244,5244]]],[1541329096350,["gjx16@GJXAIOU",[[1,5240,"，使用``"]],[5240,5240],[5245,5245]]],[1541329100300,["gjx16@GJXAIOU",[[1,5244,"chr()"]],[5244,5244],[5249,5249]]],[1541329118412,["gjx16@GJXAIOU",[[1,5250,"实现数字编码向字符的转换"]],[5250,5250],[5262,5262]]],[1541329119005,["gjx16@GJXAIOU",[[1,5263,"\n"]],[5262,5262],[5263,5263]]],[1541329120660,["gjx16@GJXAIOU",[[-1,5263,"\n"]],[5263,5263],[5262,5262]]],[1541329123157,["gjx16@GJXAIOU",[[1,5269,"\n"]],[5266,5266],[5267,5267]]],[1541329127145,["gjx16@GJXAIOU",[[1,5267,"```"]],[5267,5267],[5270,5270]]],[1541329127184,["gjx16@GJXAIOU",[[1,5270,"language\n```\n"]],[5270,5270],[5270,5278]]],[1541329129160,["gjx16@GJXAIOU",[[-1,5270,"language"],[1,5278,"p"]],[5270,5278],[5271,5271]]],[1541329130096,["gjx16@GJXAIOU",[[1,5271,"ytohh"]],[5271,5271],[5276,5276]]],[1541329132358,["gjx16@GJXAIOU",[[-1,5273,"ohh"]],[5276,5276],[5273,5273]]],[1541329133678,["gjx16@GJXAIOU",[[1,5273,"hon"]],[5273,5273],[5276,5276]]],[1541329134470,["gjx16@GJXAIOU",[[1,5277,"\n"]],[5276,5276],[5277,5277]]],[1541329285291,["gjx16@GJXAIOU",[[1,5277,"print(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))"]],[5277,5277],[5330,5330]]],[1541329287868,["gjx16@GJXAIOU",[[1,5338,"\n"]],[5334,5334],[5335,5335]]],[1541329302138,["gjx16@GJXAIOU",[[1,5335,"chegn"]],[5335,5335],[5340,5340]]],[1541329303108,["gjx16@GJXAIOU",[[-1,5335,"chegn"]],[5340,5340],[5335,5335]]],[1541329309917,["gjx16@GJXAIOU",[[1,5335,"程序运行结果：``"]],[5335,5335],[5344,5344]]],[1541329311303,["gjx16@GJXAIOU",[[1,5343,"ord('h') =  104 chr(104) =  h"]],[5343,5343],[5372,5372]]],[1541329365910,["gjx16@GJXAIOU",[[1,5374,"*"]],[5374,5374],[5375,5375]]],[1541329383639,["gjx16@GJXAIOU",[[1,5375,"字符串的比价"]],[5375,5375],[5381,5381]]],[1541329384459,["gjx16@GJXAIOU",[[-1,5380,"价"]],[5381,5381],[5380,5380]]],[1541329395606,["gjx16@GJXAIOU",[[1,5380,"较是挨个比较，知道"]],[5380,5380],[5389,5389]]],[1541329396678,["gjx16@GJXAIOU",[[-1,5387,"知道"]],[5389,5389],[5387,5387]]],[1541329404543,["gjx16@GJXAIOU",[[1,5387,"直到得出结果；"]],[5387,5387],[5394,5394]]],[1541329405211,["gjx16@GJXAIOU",[[1,5397,"\n"]],[5394,5394],[5395,5395]]],[1541329405963,["gjx16@GJXAIOU",[[1,5398,"\n"]],[5395,5395],[5396,5396]]],[1541329418537,["gjx16@GJXAIOU",[[1,5396,"ACII"]],[5396,5396],[5400,5400]]],[1541329423821,["gjx16@GJXAIOU",[[1,5397,"S"]],[5397,5397],[5398,5398]]],[1541329426623,["gjx16@GJXAIOU",[[1,5401,"ma"]],[5401,5401],[5403,5403]]],[1541329427330,["gjx16@GJXAIOU",[[-1,5401,"ma"]],[5403,5403],[5401,5401]]],[1541329430606,["gjx16@GJXAIOU",[[1,5401,"码："]],[5401,5401],[5403,5403]]],[1541329459317,["gjx16@GJXAIOU",[[1,5403,"A：65  a :97"]],[5403,5403],[5414,5414]]],[1541329460143,["gjx16@GJXAIOU",[[1,5417,"\n"]],[5414,5414],[5415,5415]]],[1541329460611,["gjx16@GJXAIOU",[[1,5418,"\n"]],[5415,5415],[5416,5416]]],[1541329477135,["gjx16@GJXAIOU",[[1,4956,"//"]],[4956,4956],[4958,4958]]],[1541329477860,["gjx16@GJXAIOU",[[-1,4956,"//"]],[4958,4958],[4956,4956]]],[1541329485177,["gjx16@GJXAIOU",[[1,4956,"```python"]],[4956,4956],[4965,4965]]],[1541329485915,["gjx16@GJXAIOU",[[1,4968,"\n"]],[4965,4965],[4966,4966]]],[1541329487705,["gjx16@GJXAIOU",[[1,4966,"```"]],[4966,4966],[4969,4969]]],[1541329495251,["gjx16@GJXAIOU",[[1,4966,"\n"]],[4965,4965],[4966,4966]]],[1541329495405,["gjx16@GJXAIOU",[[1,4967,"\n"]],[4966,4966],[4967,4967]]],[1541329498739,["gjx16@GJXAIOU",[[1,4966,"atr"]],[4966,4966],[4969,4969]]],[1541329500035,["gjx16@GJXAIOU",[[-1,4966,"atr"]],[4969,4969],[4966,4966]]],[1541329500346,["gjx16@GJXAIOU",[[-1,4967,"\n"]],[4966,4966],[4965,4965]]],[1541329501273,["gjx16@GJXAIOU",[[1,4965,"st"]],[4965,4965],[4967,4967]]],[1541329502195,["gjx16@GJXAIOU",[[-1,4965,"st"]],[4967,4967],[4965,4965]]],[1541329502924,["gjx16@GJXAIOU",[[1,4967,"\n"]],[4965,4965],[4966,4966]]],[1541329505773,["gjx16@GJXAIOU",[[1,4966,"str = \"\""]],[4966,4966],[4974,4974]]],[1541329508848,["gjx16@GJXAIOU",[[1,4973,"hello"]],[4973,4973],[4978,4978]]],[1541329511110,["gjx16@GJXAIOU",[[1,4981,"\n"]],[4979,4979],[4980,4980]]],[1541329514229,["gjx16@GJXAIOU",[[1,4980,"strZ*"]],[4980,4980],[4985,4985]]],[1541329514842,["gjx16@GJXAIOU",[[-1,4983,"Z*"]],[4985,4985],[4983,4983]]],[1541329517063,["gjx16@GJXAIOU",[[1,4983,"*3"]],[4983,4983],[4985,4985]]],[1541329520517,["gjx16@GJXAIOU",[[-1,4983,"*3"]],[4985,4985],[4983,4983]]],[1541329523333,["gjx16@GJXAIOU",[[1,4983," *3"]],[4983,4983],[4986,4986]]],[1541329529815,["gjx16@GJXAIOU",[[1,4980,"print("]],[4980,4980],[4986,4986]]],[1541329532661,["gjx16@GJXAIOU",[[1,4992,")"]],[4992,4992],[4993,4993]]],[1541329533787,["gjx16@GJXAIOU",[[1,4995,"\n"]],[4993,4993],[4994,4994]]],[1541329534843,["gjx16@GJXAIOU",[[-1,4995,"\n"]],[4994,4994],[4993,4993]]],[1541329536062,["gjx16@GJXAIOU",[[-1,4994,"\n"]],[4994,4994],[4993,4993]]],[1541329561926,["gjx16@GJXAIOU",[[1,4998,"c"]],[4998,4998],[4999,4999]]],[1541329562850,["gjx16@GJXAIOU",[[-1,4998,"c"]],[4999,4999],[4998,4998]]],[1541329568757,["gjx16@GJXAIOU",[[1,4998,"程序运行结果：``"]],[4998,4998],[5007,5007]]],[1541329570186,["gjx16@GJXAIOU",[[1,5006,"hellohellohello"]],[5006,5006],[5021,5021]]],[1541329619317,["gjx16@GJXAIOU",[[1,4832,"```p"]],[4832,4832],[4836,4836]]],[1541329620111,["gjx16@GJXAIOU",[[1,4836,"ython"]],[4836,4836],[4841,4841]]],[1541329620771,["gjx16@GJXAIOU",[[1,4842,"\n"]],[4841,4841],[4842,4842]]],[1541329622213,["gjx16@GJXAIOU",[[1,4842,"```"]],[4842,4842],[4845,4845]]],[1541329625914,["gjx16@GJXAIOU",[[1,4842,"\n"]],[4842,4842],[4843,4843]]],[1541329632782,["gjx16@GJXAIOU",[[1,4842,"str = \"hello\" print(len(str))str = \"hello\" print(len(str))"]],[4842,4842],[4900,4900]]],[1541329634685,["gjx16@GJXAIOU",[[-1,4842,"str = \"hello\" print(len(str))str = \"hello\" print(len(str))"]],[4900,4900],[4842,4842]]],[1541329636003,["gjx16@GJXAIOU",[[1,4842,"str = \"hello\" print(len(str))"]],[4842,4842],[4871,4871]]],[1541329638131,["gjx16@GJXAIOU",[[1,4856,"\n"]],[4856,4856],[4857,4857]]],[1541329644539,["gjx16@GJXAIOU",[[1,4877,"\n"]],[4876,4876],[4877,4877]]],[1541329645905,["gjx16@GJXAIOU",[[1,4877,"cheng"]],[4877,4877],[4882,4882]]],[1541329646930,["gjx16@GJXAIOU",[[-1,4877,"cheng"]],[4882,4882],[4877,4877]]],[1541329653623,["gjx16@GJXAIOU",[[1,4877,"程序运行结果；``"]],[4877,4877],[4886,4886]]],[1541329655188,["gjx16@GJXAIOU",[[1,4885,"5\n"]],[4885,4885],[4887,4887]]],[1541329656962,["gjx16@GJXAIOU",[[-1,4886,"\n"]],[4887,4887],[4886,4886]]],[1541329659037,["gjx16@GJXAIOU",[[1,4888,"\n"]],[4887,4887],[4888,4888]]],[1541329682207,["gjx16@GJXAIOU",[[1,4831,"  ,fanhui"]],[4831,4831],[4840,4840]]],[1541329683301,["gjx16@GJXAIOU",[[-1,4834,"fanhui"]],[4840,4840],[4834,4834]]],[1541329691153,["gjx16@GJXAIOU",[[1,4834,"返回值为intxing"]],[4834,4834],[4845,4845]]],[1541329692066,["gjx16@GJXAIOU",[[-1,4841,"xing"]],[4845,4845],[4841,4841]]],[1541329694847,["gjx16@GJXAIOU",[[1,4841,"型"]],[4841,4841],[4842,4842]]],[1541329757050,["gjx16@GJXAIOU",[[1,5551,"\n"]],[5546,5546],[5547,5547]]],[1541329757221,["gjx16@GJXAIOU",[[1,5552,"\n"]],[5547,5547],[5548,5548]]],[1541329757381,["gjx16@GJXAIOU",[[1,5553,"\n"]],[5548,5548],[5549,5549]]],[1541329757522,["gjx16@GJXAIOU",[[1,5554,"\n"]],[5549,5549],[5550,5550]]],[1541329757755,["gjx16@GJXAIOU",[[1,5555,"\n"]],[5550,5550],[5551,5551]]],[1541329773087,["gjx16@GJXAIOU",[[1,5551,"### 1.5.9 字符串的格式化输出"]],[5551,5551],[5570,5570]]],[1541329773732,["gjx16@GJXAIOU",[[1,5575,"\n"]],[5570,5570],[5571,5571]]],[1541329799112,["gjx16@GJXAIOU",[[1,5571,"- 使用"]],[5571,5571],[5575,5575]]],[1541329805054,["gjx16@GJXAIOU",[[1,5573,"方法一："]],[5573,5573],[5577,5577]]],[1541329810477,["gjx16@GJXAIOU",[[1,5579,"占位符``"]],[5579,5579],[5584,5584]]],[1541329813573,["gjx16@GJXAIOU",[[1,5583,"%s"]],[5583,5583],[5585,5585]]],[1541329815322,["gjx16@GJXAIOU",[[1,5587,"- \n"]],[5586,5586],[5589,5589]]],[1541329818834,["gjx16@GJXAIOU",[[-1,5587,"- "]],[5589,5589],[5587,5587]]],[1541329819803,["gjx16@GJXAIOU",[[1,5592,"\n"]],[5587,5587],[5588,5588]]],[1541329822797,["gjx16@GJXAIOU",[[-1,5592,"\n"]],[5588,5588],[5587,5587]]],[1541329824967,["gjx16@GJXAIOU",[[1,5587,"```"]],[5587,5587],[5590,5590]]],[1541329825005,["gjx16@GJXAIOU",[[1,5590,"language\n```\n"]],[5590,5590],[5590,5598]]],[1541329825917,["gjx16@GJXAIOU",[[-1,5590,"language"],[1,5598,"p"]],[5590,5598],[5591,5591]]],[1541329826789,["gjx16@GJXAIOU",[[1,5591,"ython"]],[5591,5591],[5596,5596]]],[1541329827627,["gjx16@GJXAIOU",[[1,5597,"\n"]],[5596,5596],[5597,5597]]],[1541329836134,["gjx16@GJXAIOU",[[1,5597,"\"\""]],[5597,5597],[5599,5599]]],[1541329838925,["gjx16@GJXAIOU",[[1,5598,"I l"]],[5598,5598],[5601,5601]]],[1541329840546,["gjx16@GJXAIOU",[[-1,5600,"l"]],[5601,5601],[5600,5600]]],[1541329842248,["gjx16@GJXAIOU",[[1,5600,"Like"]],[5600,5600],[5604,5604]]],[1541329844515,["gjx16@GJXAIOU",[[-1,5600,"Like"]],[5604,5604],[5600,5600]]],[1541329849966,["gjx16@GJXAIOU",[[1,5600,"like %s"]],[5600,5600],[5607,5607]]],[1541329856238,["gjx16@GJXAIOU",[[1,5608," %s"]],[5608,5608],[5611,5611]]],[1541329859538,["gjx16@GJXAIOU",[[-1,5610,"s"]],[5611,5611],[5610,5610]]],[1541329868818,["gjx16@GJXAIOU",[[1,5610,"      "]],[5610,5610],[5616,5616]]],[1541329871644,["gjx16@GJXAIOU",[[-1,5612,"    "]],[5616,5616],[5612,5612]]],[1541329873461,["gjx16@GJXAIOU",[[1,5612,"\"\""]],[5612,5612],[5614,5614]]],[1541329876902,["gjx16@GJXAIOU",[[1,5613,"pt"]],[5613,5613],[5615,5615]]],[1541329877436,["gjx16@GJXAIOU",[[-1,5614,"t"]],[5615,5615],[5614,5614]]],[1541329878736,["gjx16@GJXAIOU",[[1,5614,"yton"]],[5614,5614],[5618,5618]]],[1541329879977,["gjx16@GJXAIOU",[[-1,5615,"ton"]],[5618,5618],[5615,5615]]],[1541329881820,["gjx16@GJXAIOU",[[1,5615,"thon"]],[5615,5615],[5619,5619]]],[1541329891700,["gjx16@GJXAIOU",[[1,5597,"print("]],[5597,5597],[5603,5603]]],[1541329896964,["gjx16@GJXAIOU",[[1,5626,")"]],[5626,5626],[5627,5627]]],[1541329911849,["gjx16@GJXAIOU",[[1,5637,"\n"]],[5631,5631],[5632,5632]]],[1541329913127,["gjx16@GJXAIOU",[[1,5632,"chee"]],[5632,5632],[5636,5636]]],[1541329913953,["gjx16@GJXAIOU",[[-1,5632,"chee"]],[5636,5636],[5632,5632]]],[1541329917301,["gjx16@GJXAIOU",[[1,5632,"程序运行"]],[5632,5632],[5636,5636]]],[1541329921668,["gjx16@GJXAIOU",[[1,5636,"结果：``"]],[5636,5636],[5641,5641]]],[1541329922961,["gjx16@GJXAIOU",[[1,5640,"I like python"]],[5640,5640],[5653,5653]]],[1541329924468,["gjx16@GJXAIOU",[[1,5660,"\n"]],[5654,5654],[5655,5655]]],[1541329924572,["gjx16@GJXAIOU",[[1,5661,"\n"]],[5655,5655],[5656,5656]]],[1541329928316,["gjx16@GJXAIOU",[[1,5656,"- fangfa"]],[5656,5656],[5664,5664]]],[1541329929769,["gjx16@GJXAIOU",[[-1,5658,"fangfa"]],[5664,5664],[5658,5658]]],[1541329947815,["gjx16@GJXAIOU",[[1,5658,"方法二：使用format()fangfa"]],[5658,5658],[5678,5678]]],[1541329948770,["gjx16@GJXAIOU",[[-1,5672,"fangfa"]],[5678,5678],[5672,5672]]],[1541329952145,["gjx16@GJXAIOU",[[1,5672,"方法"]],[5672,5672],[5674,5674]]],[1541329954901,["gjx16@GJXAIOU",[[1,5672,"`"]],[5672,5672],[5673,5673]]],[1541329957065,["gjx16@GJXAIOU",[[1,5664,"`"]],[5664,5664],[5665,5665]]],[1541329968853,["gjx16@GJXAIOU",[[1,5676,",shiy"]],[5676,5676],[5681,5681]]],[1541329969798,["gjx16@GJXAIOU",[[-1,5676,",shiy"]],[5681,5681],[5676,5676]]],[1541329977257,["gjx16@GJXAIOU",[[1,5676,",使用方法：``"]],[5676,5676],[5684,5684]]],[1541329979429,["gjx16@GJXAIOU",[[1,5683,"strin"]],[5683,5683],[5688,5688]]],[1541329984863,["gjx16@GJXAIOU",[[1,5689,".format()"]],[5689,5689],[5698,5698]]],[1541329986893,["gjx16@GJXAIOU",[[1,5700,"- \n"]],[5699,5699],[5702,5702]]],[1541329988627,["gjx16@GJXAIOU",[[-1,5700,"- "]],[5702,5702],[5700,5700]]],[1541330035369,["gjx16@GJXAIOU",[[1,5700,"tong"]],[5700,5700],[5704,5704]]],[1541330036586,["gjx16@GJXAIOU",[[-1,5700,"tong"]],[5704,5704],[5700,5700]]],[1541330039400,["gjx16@GJXAIOU",[[1,5700,"同样是"]],[5700,5700],[5703,5703]]],[1541330099519,[null,[[-1,5688,"`"],[1,5689,"g"],[-1,5698,"\n"],[1,5699,"`"],[1,5703,"\n"]],[5688,5688],[5704,5704]]],[1541330099519,[null,[[1,5688,"`"],[-1,5688,"g"],[1,5698,"\n"],[-1,5698,"`"],[-1,5703,"\n"]],[5704,5704],[5688,5688]]],[1541330044785,["gjx16@GJXAIOU",[[1,5703,"使用占位符``"]],[5703,5703],[5710,5710]]],[1541330046839,["gjx16@GJXAIOU",[[1,5709,"{}"]],[5709,5709],[5711,5711]]],[1541330050065,["gjx16@GJXAIOU",[[1,5712,",geng"]],[5712,5712],[5717,5717]]],[1541330051538,["gjx16@GJXAIOU",[[-1,5713,"geng"]],[5717,5717],[5713,5713]]],[1541330066972,["gjx16@GJXAIOU",[[1,5713,"根据中间的数字序号来对应替换"]],[5713,5713],[5727,5727]]],[1541330067621,["gjx16@GJXAIOU",[[1,5733,"\n"]],[5727,5727],[5728,5728]]],[1541330083018,["gjx16@GJXAIOU",[[1,5728,"·"]],[5728,5728],[5729,5729]]],[1541330084037,["gjx16@GJXAIOU",[[-1,5728,"·"]],[5729,5729],[5728,5728]]],[1541330085048,["gjx16@GJXAIOU",[[1,5728,"···"]],[5728,5728],[5731,5731]]],[1541330086410,["gjx16@GJXAIOU",[[-1,5728,"···"]],[5731,5731],[5728,5728]]],[1541330087752,["gjx16@GJXAIOU",[[1,5728,"```"]],[5728,5728],[5731,5731]]],[1541330087793,["gjx16@GJXAIOU",[[1,5731,"language\n```\n"]],[5731,5731],[5731,5739]]],[1541330088717,["gjx16@GJXAIOU",[[-1,5731,"language"],[1,5739,"p"]],[5731,5739],[5732,5732]]],[1541330089542,["gjx16@GJXAIOU",[[1,5732,"yton"]],[5732,5732],[5736,5736]]],[1541330090222,["gjx16@GJXAIOU",[[1,5737,"\n"]],[5736,5736],[5737,5737]]],[1541330090882,["gjx16@GJXAIOU",[[-1,5737,"\n"]],[5737,5737],[5736,5736]]],[1541330091395,["gjx16@GJXAIOU",[[-1,5734,"on"]],[5736,5736],[5734,5734]]],[1541330092789,["gjx16@GJXAIOU",[[1,5734,"hon"]],[5734,5734],[5737,5737]]],[1541330093475,["gjx16@GJXAIOU",[[1,5738,"\n"]],[5737,5737],[5738,5738]]],[1541330098465,["gjx16@GJXAIOU",[[1,5738,"print()"]],[5738,5738],[5745,5745]]],[1541330159516,[null,[[-1,5688,"`"],[1,5689,"g"],[-1,5698,"\n"],[1,5699,"`"],[1,5749,"\n"]],[5688,5688],[5750,5750]]],[1541330159516,[null,[[1,5688,"`"],[-1,5688,"g"],[1,5698,"\n"],[-1,5698,"`"],[-1,5749,"\n"]],[5750,5750],[5688,5688]]],[1541330105101,["gjx16@GJXAIOU",[[1,5744,"\"\"\""]],[5744,5744],[5747,5747]]],[1541330107538,["gjx16@GJXAIOU",[[-1,5746,"\""]],[5746,5746],[5745,5745]]],[1541330123862,["gjx16@GJXAIOU",[[1,5745,"I like {1} and {}"]],[5745,5745],[5762,5762]]],[1541330125801,["gjx16@GJXAIOU",[[1,5761,"0 "]],[5761,5761],[5763,5763]]],[1541330126522,["gjx16@GJXAIOU",[[-1,5762," "]],[5763,5763],[5762,5762]]],[1541330133815,["gjx16@GJXAIOU",[[1,5764,".formate"]],[5764,5764],[5772,5772]]],[1541330134682,["gjx16@GJXAIOU",[[-1,5771,"e"]],[5772,5772],[5771,5771]]],[1541330135853,["gjx16@GJXAIOU",[[1,5771,"("]],[5771,5771],[5772,5772]]],[1541330135931,["gjx16@GJXAIOU",[[1,5773,")"]],[5772,5772],[5773,5773]]],[1541330145541,["gjx16@GJXAIOU",[[1,5772,"lalala"]],[5772,5772],[5778,5778]]],[1541330148859,["gjx16@GJXAIOU",[[-1,5772,"lalala"]],[5778,5778],[5772,5772]]],[1541330150592,["gjx16@GJXAIOU",[[1,5772,"\"\""]],[5772,5772],[5774,5774]]],[1541330155133,["gjx16@GJXAIOU",[[1,5773,"lalala"]],[5773,5773],[5779,5779]]],[1541330158293,["gjx16@GJXAIOU",[[1,5780,",\"\""]],[5780,5780],[5783,5783]]],[1541330219516,[null,[[-1,5688,"`"],[1,5689,"g"],[-1,5698,"\n"],[1,5699,"`"],[1,5789,"\n"]],[5688,5688],[5790,5790]]],[1541330219516,[null,[[1,5688,"`"],[-1,5688,"g"],[1,5698,"\n"],[-1,5698,"`"],[-1,5789,"\n"]],[5790,5790],[5688,5688]]],[1541330160895,["gjx16@GJXAIOU",[[1,5782,"pyton"]],[5782,5782],[5787,5787]]],[1541330162154,["gjx16@GJXAIOU",[[-1,5784,"ton"]],[5787,5787],[5784,5784]]],[1541330165148,["gjx16@GJXAIOU",[[1,5784,"thon"]],[5784,5784],[5788,5788]]],[1541330182828,["gjx16@GJXAIOU",[[1,5802,"\n"]],[5795,5795],[5796,5796]]],[1541330184133,["gjx16@GJXAIOU",[[1,5796,"cheng"]],[5796,5796],[5801,5801]]],[1541330185266,["gjx16@GJXAIOU",[[-1,5796,"cheng"]],[5801,5801],[5796,5796]]],[1541330194316,["gjx16@GJXAIOU",[[1,5796,"程序运行结果：```"]],[5796,5796],[5806,5806]]],[1541330195161,["gjx16@GJXAIOU",[[-1,5805,"`"]],[5806,5806],[5805,5805]]],[1541330196531,["gjx16@GJXAIOU",[[1,5804,"I like python and lalala"]],[5804,5804],[5828,5828]]],[1541330279521,[null,[[-1,5688,"`"],[1,5689,"g"],[-1,5698,"\n"],[1,5699,"`"],[1,5829,"\n"]],[5688,5688],[5830,5830]]],[1541330279521,[null,[[1,5688,"`"],[-1,5688,"g"],[1,5698,"\n"],[-1,5698,"`"],[-1,5829,"\n"]],[5830,5830],[5688,5688]]],[1541330225229,["gjx16@GJXAIOU",[[1,5699,",format()fang"]],[5699,5699],[5712,5712]]],[1541330226185,["gjx16@GJXAIOU",[[-1,5708,"fang"]],[5712,5712],[5708,5708]]],[1541330233942,["gjx16@GJXAIOU",[[1,5708,"方法的返回值为一个字符串"]],[5708,5708],[5720,5720]]],[1541330263738,["gjx16@GJXAIOU",[[1,5857,"\n"]],[5850,5850],[5851,5851]]],[1541330263945,["gjx16@GJXAIOU",[[1,5858,"\n"]],[5851,5851],[5852,5852]]],[1541330264441,["gjx16@GJXAIOU",[[1,5859,"\n"]],[5852,5852],[5853,5853]]],[1541330267780,["gjx16@GJXAIOU",[[1,5571,"\n"]],[5570,5570],[5571,5571]]],[1541330273112,["gjx16@GJXAIOU",[[1,5571,"- 输出方式"]],[5571,5571],[5577,5577]]],[1541330277330,["gjx16@GJXAIOU",[[1,5578,"  "]],[5578,5578],[5580,5580]]],[1541330339524,[null,[[-1,5697,"`"],[1,5698,"g"],[-1,5707,"\n"],[1,5708,"`"],[1,5859,"\n"]],[5697,5697],[5860,5860]]],[1541330339524,[null,[[1,5697,"`"],[-1,5697,"g"],[1,5707,"\n"],[-1,5707,"`"],[-1,5859,"\n"]],[5860,5860],[5697,5697]]],[1541330284627,["gjx16@GJXAIOU",[[1,5641,"  "]],[5641,5641],[5643,5643]]],[1541330289162,["gjx16@GJXAIOU",[[1,5667,"  "]],[5667,5667],[5669,5669]]],[1541330294611,["gjx16@GJXAIOU",[[1,5830,"  "]],[5830,5830],[5832,5832]]],[1541330304764,["gjx16@GJXAIOU",[[-1,5578,"  "]],[5580,5580],[5578,5578]]],[1541330305373,["gjx16@GJXAIOU",[[1,5578,"  "]],[5578,5578],[5580,5580]]],[1541330308505,["gjx16@GJXAIOU",[[-1,5667,"  "]],[5669,5669],[5667,5667]]],[1541330309315,["gjx16@GJXAIOU",[[1,5667,"  "]],[5667,5667],[5669,5669]]],[1541330313210,["gjx16@GJXAIOU",[[1,5866,"  \n"]],[5865,5865],[5868,5868]]],[1541330313355,["gjx16@GJXAIOU",[[-1,5866,"  "],[1,5868,"\n"]],[5868,5868],[5867,5867]]],[1541330319790,["gjx16@GJXAIOU",[[1,5867,"- 输出"]],[5867,5867],[5871,5871]]],[1541330322426,["gjx16@GJXAIOU",[[-1,5869,"输出"]],[5871,5871],[5869,5869]]],[1541330325664,["gjx16@GJXAIOU",[[1,5869,"输出格式："]],[5869,5869],[5874,5874]]],[1541330326269,["gjx16@GJXAIOU",[[1,5875,"- \n"]],[5874,5874],[5877,5877]]],[1541330331218,["gjx16@GJXAIOU",[[-1,5875,"- "]],[5877,5877],[5875,5875]]],[1541330332581,["gjx16@GJXAIOU",[[-1,5884,"\n"]],[5875,5875],[5874,5874]]],[1541330333562,["gjx16@GJXAIOU",[[1,5875,"- \n"]],[5874,5874],[5877,5877]]],[1541330334274,["gjx16@GJXAIOU",[[-1,5875,"- "]],[5877,5877],[5875,5875]]],[1541330338616,["gjx16@GJXAIOU",[[1,5875,"  - "]],[5875,5875],[5879,5879]]],[1541330399525,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330399525,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330342221,["gjx16@GJXAIOU",[[1,5879,"对齐："]],[5879,5879],[5882,5882]]],[1541330342690,["gjx16@GJXAIOU",[[1,5883,"  - \n"]],[5882,5882],[5887,5887]]],[1541330344538,["gjx16@GJXAIOU",[[-1,5884," - "]],[5887,5887],[5884,5884]]],[1541330347082,["gjx16@GJXAIOU",[[1,5884,"··"]],[5884,5884],[5886,5886]]],[1541330348002,["gjx16@GJXAIOU",[[-1,5883," ··"]],[5886,5886],[5883,5883]]],[1541330349042,["gjx16@GJXAIOU",[[-1,5892,"\n"]],[5883,5883],[5882,5882]]],[1541330350058,["gjx16@GJXAIOU",[[1,5883,"  - \n"]],[5882,5882],[5887,5887]]],[1541330351377,["gjx16@GJXAIOU",[[-1,5883,"  - "]],[5887,5887],[5883,5883]]],[1541330352103,["gjx16@GJXAIOU",[[1,5883,"··"]],[5883,5883],[5885,5885]]],[1541330352801,["gjx16@GJXAIOU",[[-1,5883,"··"]],[5885,5885],[5883,5883]]],[1541330354045,["gjx16@GJXAIOU",[[1,5883,"```"]],[5883,5883],[5886,5886]]],[1541330354087,["gjx16@GJXAIOU",[[1,5886,"language\n```\n"]],[5886,5886],[5886,5894]]],[1541330355085,["gjx16@GJXAIOU",[[-1,5886,"language"],[1,5894,"p"]],[5886,5894],[5887,5887]]],[1541330355893,["gjx16@GJXAIOU",[[1,5887,"ython"]],[5887,5887],[5892,5892]]],[1541330356517,["gjx16@GJXAIOU",[[1,5893,"\n"]],[5892,5892],[5893,5893]]],[1541330375666,["gjx16@GJXAIOU",[[1,5893,"print(\"I like {1} and {0}\".format(\"lalala\",\"python\"))"]],[5893,5893],[5946,5946]]],[1541330385702,["gjx16@GJXAIOU",[[1,5918," sa"]],[5918,5918],[5921,5921]]],[1541330387420,["gjx16@GJXAIOU",[[-1,5918," sa"]],[5921,5921],[5918,5918]]],[1541330393805,["gjx16@GJXAIOU",[[1,5918," dan"]],[5918,5918],[5922,5922]]],[1541330394985,["gjx16@GJXAIOU",[[-1,5919,"dan"]],[5922,5922],[5919,5919]]],[1541330395413,["gjx16@GJXAIOU",[[1,5919,"san"]],[5919,5919],[5922,5922]]],[1541330396537,["gjx16@GJXAIOU",[[-1,5919,"san"]],[5922,5922],[5919,5919]]],[1541330398357,["gjx16@GJXAIOU",[[1,5919,"and"]],[5919,5919],[5922,5922]]],[1541330459528,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330459528,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330402373,["gjx16@GJXAIOU",[[1,5922,"{2}"]],[5922,5922],[5925,5925]]],[1541330410045,["gjx16@GJXAIOU",[[1,5951,",\"\""]],[5951,5951],[5954,5954]]],[1541330413271,["gjx16@GJXAIOU",[[1,5953,"hahahj"]],[5953,5953],[5959,5959]]],[1541330413930,["gjx16@GJXAIOU",[[-1,5958,"j"]],[5959,5959],[5958,5958]]],[1541330414415,["gjx16@GJXAIOU",[[1,5958,"a"]],[5958,5958],[5959,5959]]],[1541330450237,["gjx16@GJXAIOU",[[1,5909,":10"]],[5909,5909],[5912,5912]]],[1541330454566,["gjx16@GJXAIOU",[[1,5920,":"]],[5920,5920],[5921,5921]]],[1541330519562,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330519562,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330464285,["gjx16@GJXAIOU",[[1,5921,"^15"]],[5921,5921],[5924,5924]]],[1541330475007,["gjx16@GJXAIOU",[[1,5931,":>12"]],[5931,5931],[5935,5935]]],[1541330495933,["gjx16@GJXAIOU",[[1,5978,"c"]],[5978,5978],[5979,5979]]],[1541330496506,["gjx16@GJXAIOU",[[-1,5978,"c"]],[5979,5979],[5978,5978]]],[1541330502821,["gjx16@GJXAIOU",[[1,5978,"程序运行结果：``"]],[5978,5978],[5987,5987]]],[1541330504395,["gjx16@GJXAIOU",[[1,5986,"I like python     and     lalala      and      hahaha"]],[5986,5986],[6039,6039]]],[1541330509406,["gjx16@GJXAIOU",[[1,5974,"\n"]],[5973,5973],[5974,5974]]],[1541330510920,["gjx16@GJXAIOU",[[1,5974,"##"]],[5974,5974],[5976,5976]]],[1541330511649,["gjx16@GJXAIOU",[[-1,5975,"#"]],[5976,5976],[5975,5975]]],[1541330513981,["gjx16@GJXAIOU",[[1,5975," canshu="]],[5975,5975],[5983,5983]]],[1541330515242,["gjx16@GJXAIOU",[[-1,5976,"canshu="]],[5983,5983],[5976,5976]]],[1541330519442,["gjx16@GJXAIOU",[[1,5976,"参数含义："]],[5976,5976],[5981,5981]]],[1541330579563,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330579563,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330569481,["gjx16@GJXAIOU",[[1,5981,"第一个位置：占得位置为10个字节；  第0个位置，占的位置为15个字节"]],[5981,5981],[6016,6016]]],[1541330699565,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330699565,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330644123,["gjx16@GJXAIOU",[[1,5997,"，默认左对齐"]],[5997,5997],[6003,6003]]],[1541330652023,["gjx16@GJXAIOU",[[1,6022,"，居中对齐；"]],[6022,6022],[6028,6028]]],[1541330652786,["gjx16@GJXAIOU",[[1,6029,"\n"]],[6028,6028],[6029,6029]]],[1541330666323,["gjx16@GJXAIOU",[[1,6029,"第2个位置，占得位置西航都"]],[6029,6029],[6042,6042]]],[1541330667161,["gjx16@GJXAIOU",[[-1,6039,"西航都"]],[6042,6042],[6039,6039]]],[1541330677318,["gjx16@GJXAIOU",[[1,6039,"长度为12个字节，右对齐；"]],[6039,6039],[6052,6052]]],[1541330879568,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330879568,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330858594,["gjx16@GJXAIOU",[[1,6129,"\n"]],[6119,6119],[6120,6120]]],[1541330860258,["gjx16@GJXAIOU",[[1,6130,"\n"]],[6120,6120],[6121,6121]]],[1541330878686,["gjx16@GJXAIOU",[[1,6121,"  - 长度"]],[6121,6121],[6127,6127]]],[1541330939572,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330939572,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330883854,["gjx16@GJXAIOU",[[1,6127,"："]],[6127,6127],[6128,6128]]],[1541330884579,["gjx16@GJXAIOU",[[1,6129,"  - \n"]],[6128,6128],[6133,6133]]],[1541330886401,["gjx16@GJXAIOU",[[-1,6129,"  - "]],[6133,6133],[6129,6129]]],[1541330888118,["gjx16@GJXAIOU",[[1,6129,"~··"]],[6129,6129],[6132,6132]]],[1541330889002,["gjx16@GJXAIOU",[[-1,6129,"~··"]],[6132,6132],[6129,6129]]],[1541330889161,["gjx16@GJXAIOU",[[-1,6138,"\n"]],[6129,6129],[6128,6128]]],[1541330890189,["gjx16@GJXAIOU",[[1,6129,"  - \n"]],[6128,6128],[6133,6133]]],[1541330891129,["gjx16@GJXAIOU",[[-1,6129,"  - "]],[6133,6133],[6129,6129]]],[1541330891633,["gjx16@GJXAIOU",[[1,6129,"·"]],[6129,6129],[6130,6130]]],[1541330892378,["gjx16@GJXAIOU",[[-1,6129,"·"]],[6130,6130],[6129,6129]]],[1541330893816,["gjx16@GJXAIOU",[[1,6129,"```"]],[6129,6129],[6132,6132]]],[1541330893857,["gjx16@GJXAIOU",[[1,6132,"language\n```\n"]],[6132,6132],[6132,6140]]],[1541330895228,["gjx16@GJXAIOU",[[-1,6132,"language"],[1,6140,"p"]],[6132,6140],[6133,6133]]],[1541330896085,["gjx16@GJXAIOU",[[1,6133,"ython"]],[6133,6133],[6138,6138]]],[1541330896754,["gjx16@GJXAIOU",[[1,6139,"\n"]],[6138,6138],[6139,6139]]],[1541330909812,["gjx16@GJXAIOU",[[1,6139,"print(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))"]],[6139,6139],[6219,6219]]],[1541330915140,["gjx16@GJXAIOU",[[-1,6156,"10"]],[6158,6158],[6156,6156]]],[1541330917784,["gjx16@GJXAIOU",[[1,6156,".2"]],[6156,6156],[6158,6158]]],[1541330926276,["gjx16@GJXAIOU",[[1,6170,".4"]],[6170,6170],[6172,6172]]],[1541330999600,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541330999600,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541330941747,["gjx16@GJXAIOU",[[1,6222,"\n"]],[6221,6221],[6222,6222]]],[1541330947246,["gjx16@GJXAIOU",[[1,6222,"# can"]],[6222,6222],[6227,6227]]],[1541330947817,["gjx16@GJXAIOU",[[-1,6224,"can"]],[6227,6227],[6224,6224]]],[1541330950131,["gjx16@GJXAIOU",[[1,6224,"线束"]],[6224,6224],[6226,6226]]],[1541330951377,["gjx16@GJXAIOU",[[-1,6224,"线束"]],[6226,6226],[6224,6224]]],[1541330954278,["gjx16@GJXAIOU",[[1,6224,"参数汉所以"]],[6224,6224],[6229,6229]]],[1541330955425,["gjx16@GJXAIOU",[[-1,6226,"汉所以"]],[6229,6229],[6226,6226]]],[1541330999494,["gjx16@GJXAIOU",[[1,6226,"含义：第1个位置，占得长度自动适应即将放入该位置"]],[6226,6226],[6250,6250]]],[1541331059597,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331059597,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331002392,["gjx16@GJXAIOU",[[1,6250,"的字符串"]],[6250,6250],[6254,6254]]],[1541331038226,["gjx16@GJXAIOU",[[1,6235,"：后面没有数字表示"]],[6235,6235],[6244,6244]]],[1541331044168,["gjx16@GJXAIOU",[[1,6263,"，。"]],[6263,6263],[6265,6265]]],[1541331045145,["gjx16@GJXAIOU",[[-1,6264,"。"]],[6265,6265],[6264,6264]]],[1541331050098,["gjx16@GJXAIOU",[[1,6264,".号后面数组"]],[6264,6264],[6270,6270]]],[1541331050812,["gjx16@GJXAIOU",[[-1,6268,"数组"]],[6270,6270],[6268,6268]]],[1541331054567,["gjx16@GJXAIOU",[[1,6268,"数字表示"]],[6268,6268],[6272,6272]]],[1541331119599,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331119599,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331060211,["gjx16@GJXAIOU",[[1,6272,"堆区"]],[6272,6272],[6274,6274]]],[1541331061625,["gjx16@GJXAIOU",[[-1,6272,"堆区"]],[6274,6274],[6272,6272]]],[1541331065741,["gjx16@GJXAIOU",[[1,6272,"对于即将闯入"]],[6272,6272],[6278,6278]]],[1541331067252,["gjx16@GJXAIOU",[[-1,6276,"闯入"]],[6278,6278],[6276,6276]]],[1541331084817,["gjx16@GJXAIOU",[[1,6276,"传入的字符串截取前两个字符；"]],[6276,6276],[6290,6290]]],[1541331094547,["gjx16@GJXAIOU",[[1,6291,"\n"]],[6290,6290],[6291,6291]]],[1541331118025,["gjx16@GJXAIOU",[[1,6291,"# 第2个参数的含义；放在第0个位置，占位"]],[6291,6291],[6312,6312]]],[1541331179601,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331179601,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331122816,["gjx16@GJXAIOU",[[1,6312,"长度为14"]],[6312,6312],[6317,6317]]],[1541331123401,["gjx16@GJXAIOU",[[-1,6316,"4"]],[6317,6317],[6316,6316]]],[1541331148445,["gjx16@GJXAIOU",[[1,6316,"5个字节，居中对齐，截取将传入的字符串前4个字符"]],[6316,6316],[6340,6340]]],[1541331160130,["gjx16@GJXAIOU",[[1,6341,"\n"]],[6340,6340],[6341,6341]]],[1541331166225,["gjx16@GJXAIOU",[[1,6356,"\n"]],[6345,6345],[6346,6346]]],[1541331172022,["gjx16@GJXAIOU",[[1,6346,"程序运行结果："]],[6346,6346],[6353,6353]]],[1541331239600,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331239600,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331191438,["gjx16@GJXAIOU",[[1,6353,"``"]],[6353,6353],[6355,6355]]],[1541331192897,["gjx16@GJXAIOU",[[1,6354,"I like py and      lala       and      hahaha"]],[6354,6354],[6399,6399]]],[1541331195361,["gjx16@GJXAIOU",[[1,6411,"\n"]],[6400,6400],[6401,6401]]],[1541331196187,["gjx16@GJXAIOU",[[1,6412,"\n"]],[6401,6401],[6402,6402]]],[1541331201131,["gjx16@GJXAIOU",[[1,6402,"  - shu"]],[6402,6402],[6409,6409]]],[1541331202024,["gjx16@GJXAIOU",[[-1,6406,"shu"]],[6409,6409],[6406,6406]]],[1541331205366,["gjx16@GJXAIOU",[[1,6406,"格式符"]],[6406,6406],[6409,6409]]],[1541331206145,["gjx16@GJXAIOU",[[1,6410,"  - \n"]],[6409,6409],[6414,6414]]],[1541331207704,["gjx16@GJXAIOU",[[-1,6410,"  - "]],[6414,6414],[6410,6410]]],[1541331209236,["gjx16@GJXAIOU",[[1,6410,"```"]],[6410,6410],[6413,6413]]],[1541331209276,["gjx16@GJXAIOU",[[1,6413,"language\n```\n"]],[6413,6413],[6413,6421]]],[1541331210059,["gjx16@GJXAIOU",[[-1,6413,"language"],[1,6421,"p"]],[6413,6421],[6414,6414]]],[1541331210772,["gjx16@GJXAIOU",[[1,6414,"ython"]],[6414,6414],[6419,6419]]],[1541331211332,["gjx16@GJXAIOU",[[1,6420,"\n"]],[6419,6419],[6420,6420]]],[1541331220122,["gjx16@GJXAIOU",[[1,6420,"print(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))"]],[6420,6420],[6502,6502]]],[1541331359594,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331359594,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331310155,["gjx16@GJXAIOU",[[-1,6437,".2"]],[6439,6439],[6437,6437]]],[1541331311287,["gjx16@GJXAIOU",[[1,6437,"d"]],[6437,6437],[6438,6438]]],[1541331839611,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541331839611,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541331788009,["gjx16@GJXAIOU",[[-1,6447,"^15.4"]],[6452,6452],[6447,6447]]],[1541331793380,["gjx16@GJXAIOU",[[1,6447,"sf"]],[6447,6447],[6449,6449]]],[1541332139613,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332139613,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332114979,["gjx16@GJXAIOU",[[1,6437,"4"]],[6437,6437],[6438,6438]]],[1541332117385,["gjx16@GJXAIOU",[[-1,6448,"s"]],[6449,6449],[6448,6448]]],[1541332199613,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332199613,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332145024,["gjx16@GJXAIOU",[[-1,6457,">12"]],[6460,6460],[6457,6457]]],[1541332149974,["gjx16@GJXAIOU",[[1,6457,"6.2f"]],[6457,6457],[6461,6461]]],[1541332156503,["gjx16@GJXAIOU",[[1,6462," and {}"]],[6462,6462],[6469,6469]]],[1541332167925,["gjx16@GJXAIOU",[[1,6468,"3:04f"]],[6468,6468],[6473,6473]]],[1541332179131,["gjx16@GJXAIOU",[[1,6509,",\"\""]],[6509,6509],[6512,6512]]],[1541332181458,["gjx16@GJXAIOU",[[1,6511,"duduu"]],[6511,6511],[6516,6516]]],[1541332183016,["gjx16@GJXAIOU",[[-1,6515,"u"]],[6516,6516],[6515,6515]]],[1541332184107,["gjx16@GJXAIOU",[[1,6515,"du"]],[6515,6515],[6517,6517]]],[1541332259619,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332259619,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332218687,["gjx16@GJXAIOU",[[-1,6484,"lalala"]],[6490,6490],[6484,6484]]],[1541332226339,["gjx16@GJXAIOU",[[1,6484,"12345"]],[6484,6484],[6489,6489]]],[1541332319615,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332319615,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332277415,["gjx16@GJXAIOU",[[1,6409,"()"]],[6409,6409],[6411,6411]]],[1541332279270,["gjx16@GJXAIOU",[[1,6410,"zh"]],[6410,6410],[6412,6412]]],[1541332280343,["gjx16@GJXAIOU",[[-1,6410,"zh"]],[6412,6412],[6410,6410]]],[1541332283637,["gjx16@GJXAIOU",[[1,6410,"针对数组"]],[6410,6410],[6414,6414]]],[1541332284827,["gjx16@GJXAIOU",[[-1,6412,"数组"]],[6414,6414],[6412,6412]]],[1541332286753,["gjx16@GJXAIOU",[[1,6412,"数字和"]],[6412,6412],[6415,6415]]],[1541332289456,["gjx16@GJXAIOU",[[-1,6414,"和"]],[6415,6415],[6414,6414]]],[1541332290627,["gjx16@GJXAIOU",[[1,6414,"（）"]],[6414,6414],[6416,6416]]],[1541332299867,["gjx16@GJXAIOU",[[1,6415,"包括整数和浮点数"]],[6415,6415],[6423,6423]]],[1541332305906,["gjx16@GJXAIOU",[[-1,6526,"dududu"]],[6532,6532],[6526,6526]]],[1541332307912,["gjx16@GJXAIOU",[[1,6526,"368937987"]],[6526,6526],[6535,6535]]],[1541332312088,["gjx16@GJXAIOU",[[-1,6517,"hahaha"]],[6523,6523],[6517,6517]]],[1541332313864,["gjx16@GJXAIOU",[[1,6517,"3434324234"]],[6517,6517],[6527,6527]]],[1541332316744,["gjx16@GJXAIOU",[[-1,6521,"324234"]],[6527,6527],[6521,6521]]],[1541332317900,["gjx16@GJXAIOU",[[1,6521,"3846"]],[6521,6521],[6525,6525]]],[1541332318911,["gjx16@GJXAIOU",[[-1,6521,"3846"]],[6525,6525],[6521,6521]]],[1541332379619,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332379619,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332320115,["gjx16@GJXAIOU",[[1,6521,"478"]],[6521,6521],[6524,6524]]],[1541332326008,["gjx16@GJXAIOU",[[-1,6508,"python"]],[6514,6514],[6508,6508]]],[1541332327645,["gjx16@GJXAIOU",[[1,6508,"90800897"]],[6508,6508],[6516,6516]]],[1541332439680,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332439680,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332421416,["gjx16@GJXAIOU",[[-1,6499,"\""],[-1,6505,"\""],[-1,6507,"\""],[-1,6509,"08"],[-1,6516,"\""],[-1,6518,"\""],[-1,6526,"\""],[-1,6528,"\""],[-1,6538,"\""]],[6436,6541],[6531,6531]]],[1541332424946,["gjx16@GJXAIOU",[[1,6547,"\n"]],[6535,6535],[6536,6536]]],[1541332431853,["gjx16@GJXAIOU",[[1,6536,"程序运行结果：``"]],[6536,6536],[6545,6545]]],[1541332439568,["gjx16@GJXAIOU",[[1,6544,"I like 900897 and 12345.000000 and3434478.00 and 368937987.000000"]],[6544,6544],[6609,6609]]],[1541332499671,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332499671,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332442113,["gjx16@GJXAIOU",[[1,6622,"\n"]],[6610,6610],[6611,6611]]],[1541332461531,["gjx16@GJXAIOU",[[1,6532,"\n"]],[6531,6531],[6532,6532]]],[1541332464208,["gjx16@GJXAIOU",[[1,6532,"#canshu"]],[6532,6532],[6539,6539]]],[1541332465352,["gjx16@GJXAIOU",[[-1,6533,"canshu"]],[6539,6539],[6533,6533]]],[1541332481358,["gjx16@GJXAIOU",[[1,6533,"参数含义：第1个人"]],[6533,6533],[6542,6542]]],[1541332482034,["gjx16@GJXAIOU",[[-1,6541,"人"]],[6542,6542],[6541,6541]]],[1541332499317,["gjx16@GJXAIOU",[[1,6541,"位置，长度为4个字节，"]],[6541,6541],[6552,6552]]],[1541332559673,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332559673,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332529240,["gjx16@GJXAIOU",[[1,6552,"以整数形式，默认是右对齐"]],[6552,6552],[6564,6564]]],[1541332529656,["gjx16@GJXAIOU",[[1,6565,"\n"]],[6564,6564],[6565,6565]]],[1541332537433,["gjx16@GJXAIOU",[[1,6565,"# 第2个位置："]],[6565,6565],[6573,6573]]],[1541332537982,["gjx16@GJXAIOU",[[-1,6572,"："]],[6573,6573],[6572,6572]]],[1541332558879,["gjx16@GJXAIOU",[[1,6572,"：长度自适应，一浮点数形式"]],[6572,6572],[6585,6585]]],[1541332619683,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332619683,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332560976,["gjx16@GJXAIOU",[[-1,6579,"一"]],[6580,6580],[6579,6579]]],[1541332563025,["gjx16@GJXAIOU",[[1,6579,"以"]],[6579,6579],[6580,6580]]],[1541332570741,["gjx16@GJXAIOU",[[1,6585,"。默认右对齐"]],[6585,6585],[6591,6591]]],[1541332571417,["gjx16@GJXAIOU",[[1,6592,"\n"]],[6591,6591],[6592,6592]]],[1541332617692,["gjx16@GJXAIOU",[[1,6592,"#第3个位置：长度6个字节，填充"]],[6592,6592],[6608,6608]]],[1541332679677,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"]],[5701,5701],[5713,5713]]],[1541332679677,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"]],[5713,5713],[5701,5701]]],[1541332627603,["gjx16@GJXAIOU",[[1,6610,"的浮点数保证"]],[6610,6610],[6616,6616]]],[1541332632048,["gjx16@GJXAIOU",[[-1,6614,"保证"]],[6616,6616],[6614,6614]]],[1541332636198,["gjx16@GJXAIOU",[[1,6614,"保留2为"]],[6614,6614],[6618,6618]]],[1541332638024,["gjx16@GJXAIOU",[[-1,6617,"为"]],[6618,6618],[6617,6617]]],[1541332650416,["gjx16@GJXAIOU",[[1,6617,"位小数，右对齐"]],[6617,6617],[6624,6624]]],[1541332651105,["gjx16@GJXAIOU",[[1,6625,"\n"]],[6624,6624],[6625,6625]]],[1541332677152,["gjx16@GJXAIOU",[[1,6625,"#第4个位置：数字前面加0表示"]],[6625,6625],[6640,6640]]],[1541332739678,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6641,"``"]],[5701,5701],[6643,6643]]],[1541332739678,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6641,"``"]],[6643,6643],[5701,5701]]],[1541332688287,["gjx16@GJXAIOU",[[1,6640,"如果位数不足，"]],[6640,6640],[6647,6647]]],[1541332689850,["gjx16@GJXAIOU",[[-1,6646,"，"]],[6647,6647],[6646,6646]]],[1541332694380,["gjx16@GJXAIOU",[[1,6646,"则补0；"]],[6646,6646],[6650,6650]]],[1541332919698,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"]],[5701,5701],[6653,6653]]],[1541332919698,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"]],[6653,6653],[5701,5701]]],[1541332908713,["gjx16@GJXAIOU",[[1,6742,"\n"]],[6729,6729],[6730,6730]]],[1541332908878,["gjx16@GJXAIOU",[[1,6743,"\n"]],[6730,6730],[6731,6731]]],[1541332909431,["gjx16@GJXAIOU",[[1,6744,"\n"]],[6731,6731],[6732,6732]]],[1541332910735,["gjx16@GJXAIOU",[[1,6745,"\n"]],[6732,6732],[6733,6733]]],[1541332915028,["gjx16@GJXAIOU",[[1,6733,"###1.4"]],[6733,6733],[6739,6739]]],[1541332916608,["gjx16@GJXAIOU",[[-1,6738,"4"]],[6739,6739],[6738,6738]]],[1541332917490,["gjx16@GJXAIOU",[[1,6738,"5、"]],[6738,6738],[6740,6740]]],[1541332918138,["gjx16@GJXAIOU",[[-1,6739,"、"]],[6740,6740],[6739,6739]]],[1541332918537,["gjx16@GJXAIOU",[[1,6739,"。"]],[6739,6739],[6740,6740]]],[1541332979684,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[1,6740,"\n\n"]],[5701,5701],[6742,6742]]],[1541332979684,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[-1,6740,"\n\n"]],[6742,6742],[5701,5701]]],[1541332920828,["gjx16@GJXAIOU",[[1,6740,"10"]],[6740,6740],[6742,6742]]],[1541332924334,["gjx16@GJXAIOU",[[-1,6739,"。"]],[6740,6740],[6739,6739]]],[1541332925165,["gjx16@GJXAIOU",[[1,6739,"。"]],[6739,6739],[6740,6740]]],[1541332926502,["gjx16@GJXAIOU",[[-1,6739,"。"]],[6740,6740],[6739,6739]]],[1541332927003,["gjx16@GJXAIOU",[[1,6739,"."]],[6739,6739],[6740,6740]]],[1541332928143,["gjx16@GJXAIOU",[[1,6742," "]],[6742,6742],[6743,6743]]],[1541333879701,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[1,6743,"\n\n"]],[5701,5701],[6745,6745]]],[1541333879701,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[-1,6743,"\n\n"]],[6745,6745],[5701,5701]]],[1541333873241,["gjx16@GJXAIOU",[[1,6736," "]],[6736,6736],[6737,6737]]],[1541333876988,["gjx16@GJXAIOU",[[1,6744,"chang"]],[6744,6744],[6749,6749]]],[1541333878248,["gjx16@GJXAIOU",[[-1,6744,"chang"]],[6749,6749],[6744,6744]]],[1541333939699,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[1,6744,"\n\n"]],[5701,5701],[6746,6746]]],[1541333939699,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[-1,6744,"\n\n"]],[6746,6746],[5701,5701]]],[1541333886382,["gjx16@GJXAIOU",[[1,6744,"常用的字符串方法"]],[6744,6744],[6752,6752]]],[1541333887162,["gjx16@GJXAIOU",[[1,6765,"\n"]],[6752,6752],[6753,6753]]],[1541333911307,["gjx16@GJXAIOU",[[1,6753,"- 判断是否全为字母"]],[6753,6753],[6763,6763]]],[1541333911862,["gjx16@GJXAIOU",[[1,6764,"- \n"]],[6763,6763],[6766,6766]]],[1541333922741,["gjx16@GJXAIOU",[[1,6766,"根据分隔符分割字符串‘"]],[6766,6766],[6777,6777]]],[1541333923733,["gjx16@GJXAIOU",[[-1,6776,"‘"]],[6777,6777],[6776,6776]]],[1541333924150,["gjx16@GJXAIOU",[[1,6777,"- \n"]],[6776,6776],[6779,6779]]],[1541333934903,["gjx16@GJXAIOU",[[1,6779,"去掉字符串两头的空格"]],[6779,6779],[6789,6789]]],[1541333935411,["gjx16@GJXAIOU",[[1,6790,"- \n"]],[6789,6789],[6792,6792]]],[1541333938206,["gjx16@GJXAIOU",[[1,6792,"字符"]],[6792,6792],[6794,6794]]],[1541333999705,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,6790,""],[1,6794,"\n\n"]],[5701,5701],[6796,6796]]],[1541333999705,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,6790,""],[-1,6794,"\n\n"]],[6796,6796],[5701,5701]]],[1541333942238,["gjx16@GJXAIOU",[[1,6794,"大小写的转换"]],[6794,6794],[6800,6800]]],[1541333942609,["gjx16@GJXAIOU",[[1,6801,"- \n"]],[6800,6800],[6803,6803]]],[1541333942674,["gjx16@GJXAIOU",[[1,6803,"’"]],[6803,6803],[6804,6804]]],[1541333943688,["gjx16@GJXAIOU",[[-1,6803,"’"]],[6804,6804],[6803,6803]]],[1541333956954,["gjx16@GJXAIOU",[[1,6803,"用join()拼接字符串‘"]],[6803,6803],[6816,6816]]],[1541333957791,["gjx16@GJXAIOU",[[-1,6815,"‘"]],[6816,6816],[6815,6815]]],[1541333958034,["gjx16@GJXAIOU",[[1,6816,"- \n"]],[6815,6815],[6818,6818]]],[1541333959905,["gjx16@GJXAIOU",[[-1,6816,"- "]],[6818,6818],[6816,6816]]],[1541333960807,["gjx16@GJXAIOU",[[1,6829,"\n"]],[6816,6816],[6817,6817]]],[1541333960943,["gjx16@GJXAIOU",[[1,6830,"\n"]],[6817,6817],[6818,6818]]],[1541333961084,["gjx16@GJXAIOU",[[1,6831,"\n"]],[6818,6818],[6819,6819]]],[1541333961207,["gjx16@GJXAIOU",[[1,6832,"\n"]],[6819,6819],[6820,6820]]],[1541333961340,["gjx16@GJXAIOU",[[1,6833,"\n"]],[6820,6820],[6821,6821]]],[1541333961474,["gjx16@GJXAIOU",[[1,6834,"\n"]],[6821,6821],[6822,6822]]],[1541333961602,["gjx16@GJXAIOU",[[1,6835,"\n"]],[6822,6822],[6823,6823]]],[1541333961737,["gjx16@GJXAIOU",[[1,6836,"\n"]],[6823,6823],[6824,6824]]],[1541333962814,["gjx16@GJXAIOU",[[1,6837,"\n"]],[6824,6824],[6825,6825]]],[1541333963518,["gjx16@GJXAIOU",[[1,6825,"###"]],[6825,6825],[6828,6828]]],[1541333964070,["gjx16@GJXAIOU",[[-1,6827,"#"]],[6828,6828],[6827,6827]]],[1541333974150,["gjx16@GJXAIOU",[[1,6827," 1.6 字符编码"]],[6827,6827],[6836,6836]]],[1541333978561,["gjx16@GJXAIOU",[[1,6766,"\n- "]],[6763,6763],[6766,6766]]],[1541334239701,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,6828,""],[1,6839,"\n\n"]],[5701,5701],[6841,6841]]],[1541334239701,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,6828,""],[-1,6839,"\n\n"]],[6841,6841],[5701,5701]]],[1541334213353,["gjx16@GJXAIOU",[[-1,6764,"- "]],[6766,6766],[6764,6764]]],[1541334223097,["gjx16@GJXAIOU",[[-1,6764,"\n"]],[6764,6764],[6763,6763]]],[1541334224644,["gjx16@GJXAIOU",[[1,6763," "]],[6763,6763],[6764,6764]]],[1541334225658,["gjx16@GJXAIOU",[[-1,6763," "]],[6764,6764],[6763,6763]]],[1541334229146,["gjx16@GJXAIOU",[[1,6763,"，使用1"]],[6763,6763],[6767,6767]]],[1541334229600,["gjx16@GJXAIOU",[[-1,6766,"1"]],[6767,6767],[6766,6766]]],[1541334229956,["gjx16@GJXAIOU",[[1,6766,"``"]],[6766,6766],[6768,6768]]],[1541334232745,["gjx16@GJXAIOU",[[1,6767,"id"]],[6767,6767],[6769,6769]]],[1541334233302,["gjx16@GJXAIOU",[[-1,6768,"d"]],[6769,6769],[6768,6768]]],[1541334239433,["gjx16@GJXAIOU",[[1,6768,"salpha()"]],[6768,6768],[6776,6776]]],[1541334299702,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,6839,""],[1,6850,"\n\n"]],[5701,5701],[6852,6852]]],[1541334299702,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,6839,""],[-1,6850,"\n\n"]],[6852,6852],[5701,5701]]],[1541334261156,["gjx16@GJXAIOU",[[1,6777,"判断字符串是否全由字符串"]],[6777,6777],[6789,6789]]],[1541334263094,["gjx16@GJXAIOU",[[-1,6786,"字符串"]],[6789,6789],[6786,6786]]],[1541334267758,["gjx16@GJXAIOU",[[1,6786,"字母组成发"]],[6786,6786],[6791,6791]]],[1541334268366,["gjx16@GJXAIOU",[[-1,6790,"发"]],[6791,6791],[6790,6790]]],[1541334270130,["gjx16@GJXAIOU",[[1,6793,"\n- "]],[6790,6790],[6793,6793]]],[1541334271511,["gjx16@GJXAIOU",[[-1,6791,"- "]],[6793,6793],[6791,6791]]],[1541334479709,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,6864,"\n\n"]],[5701,5701],[6866,6866]]],[1541334479709,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,6864,"\n\n"]],[6866,6866],[5701,5701]]],[1541334450364,["gjx16@GJXAIOU",[[1,6791,"···"]],[6791,6791],[6794,6794]]],[1541334451550,["gjx16@GJXAIOU",[[-1,6791,"···"]],[6794,6794],[6791,6791]]],[1541334452924,["gjx16@GJXAIOU",[[1,6791,"```"]],[6791,6791],[6794,6794]]],[1541334452966,["gjx16@GJXAIOU",[[1,6794,"language\n```\n"]],[6794,6794],[6794,6802]]],[1541334454745,["gjx16@GJXAIOU",[[-1,6794,"language"],[1,6802,"p"]],[6794,6802],[6795,6795]]],[1541334455545,["gjx16@GJXAIOU",[[1,6795,"yton"]],[6795,6795],[6799,6799]]],[1541334456646,["gjx16@GJXAIOU",[[-1,6797,"on"]],[6799,6799],[6797,6797]]],[1541334458187,["gjx16@GJXAIOU",[[1,6797,"hon"]],[6797,6797],[6800,6800]]],[1541334458760,["gjx16@GJXAIOU",[[1,6801,"\n"]],[6800,6800],[6801,6801]]],[1541334459736,["gjx16@GJXAIOU",[[1,6801,"str= \"python\" # 下面两个等价 print(str.isalpha())\nprint(\"python\".isalpha())"]],[6801,6801],[6870,6870]]],[1541334462723,["gjx16@GJXAIOU",[[1,6815,"\n"]],[6815,6815],[6816,6816]]],[1541334466760,["gjx16@GJXAIOU",[[1,6825,"\n"]],[6825,6825],[6826,6826]]],[1541334539705,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,6950,"\n\n"]],[5701,5701],[6952,6952]]],[1541334539705,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,6950,"\n\n"]],[6952,6952],[5701,5701]]],[1541334527377,["gjx16@GJXAIOU",[[1,6878,"\n"]],[6876,6876],[6877,6877]]],[1541334528165,["gjx16@GJXAIOU",[[1,6877,"c"]],[6877,6877],[6878,6878]]],[1541334528968,["gjx16@GJXAIOU",[[-1,6877,"c"]],[6878,6878],[6877,6877]]],[1541334537844,["gjx16@GJXAIOU",[[1,6877,"程序运行结果：``"]],[6877,6877],[6886,6886]]],[1541334599707,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,6960,"\n\n"]],[5701,5701],[6962,6962]]],[1541334599707,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,6960,"\n\n"]],[6962,6962],[5701,5701]]],[1541334553784,["gjx16@GJXAIOU",[[1,6885,"True\nTrue"]],[6885,6885],[6894,6894]]],[1541334556287,["gjx16@GJXAIOU",[[1,6884,"\n"]],[6884,6884],[6885,6885]]],[1541334559482,["gjx16@GJXAIOU",[[1,6890,"`"]],[6890,6890],[6891,6891]]],[1541334561497,["gjx16@GJXAIOU",[[1,6892,"`"]],[6892,6892],[6893,6893]]],[1541334564833,["gjx16@GJXAIOU",[[1,6915,"\n- "]],[6912,6912],[6915,6915]]],[1541334565314,["gjx16@GJXAIOU",[[-1,6913,"- "]],[6915,6915],[6914,6914]]],[1541334568387,["gjx16@GJXAIOU",[[1,6913,"```"]],[6913,6913],[6916,6916]]],[1541334568443,["gjx16@GJXAIOU",[[1,6916,"language\n```\n"]],[6916,6916],[6916,6924]]],[1541334569108,["gjx16@GJXAIOU",[[-1,6916,"language"],[1,6924,"p"]],[6916,6924],[6917,6917]]],[1541334571237,["gjx16@GJXAIOU",[[1,6917,"ython"]],[6917,6917],[6922,6922]]],[1541334571894,["gjx16@GJXAIOU",[[1,6923,"\n"]],[6922,6922],[6923,6923]]],[1541334839713,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,6988,"\n\n"]],[5701,5701],[6990,6990]]],[1541334839713,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,6988,"\n\n"]],[6990,6990],[5701,5701]]],[1541334812974,["gjx16@GJXAIOU",[[1,6923,"str= \"python,is a python.lan\" # 下面两个等价 print(str.split(\" \"))#以空格分割 print(\"python,is a python.lan\".split(\".\"))#以.进行分割 print(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等"]],[6923,6923],[7085,7085]]],[1541334815720,["gjx16@GJXAIOU",[[1,6953,"\n"]],[6953,6953],[6954,6954]]],[1541334822878,["gjx16@GJXAIOU",[[-1,6954,"# 下面两个等价 "]],[6954,6963],[6954,6954]]],[1541334827862,["gjx16@GJXAIOU",[[1,6982,"\n"]],[6982,6982],[6983,6983]]],[1541334831302,["gjx16@GJXAIOU",[[1,7032,"\n"]],[7032,7032],[7033,7033]]],[1541334835001,["gjx16@GJXAIOU",[[-1,7033," "]],[7034,7034],[7033,7033]]],[1541334837422,["gjx16@GJXAIOU",[[1,7084,"\n"]],[7082,7082],[7083,7083]]],[1541334838217,["gjx16@GJXAIOU",[[1,7083,"c"]],[7083,7083],[7084,7084]]],[1541334838789,["gjx16@GJXAIOU",[[-1,7083,"c"]],[7084,7084],[7083,7083]]],[1541334899717,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7144,"\n\n"]],[5701,5701],[7146,7146]]],[1541334899717,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7144,"\n\n"]],[7146,7146],[5701,5701]]],[1541334843133,["gjx16@GJXAIOU",[[1,7083,"程序运行结果："]],[7083,7083],[7090,7090]]],[1541334844151,["gjx16@GJXAIOU",[[1,7092,"\n"]],[7090,7090],[7091,7091]]],[1541334851640,["gjx16@GJXAIOU",[[1,7091,"['python,is', 'a', 'python.lan']\n['python,is a python', 'lan']\n['python,is', 'a', 'python.lan']"]],[7091,7091],[7186,7186]]],[1541334854587,["gjx16@GJXAIOU",[[1,7091,"`"]],[7091,7091],[7092,7092]]],[1541334857681,["gjx16@GJXAIOU",[[1,7125,"`"]],[7125,7125],[7126,7126]]],[1541334858865,["gjx16@GJXAIOU",[[1,7156,"`"]],[7156,7156],[7157,7157]]],[1541334863153,["gjx16@GJXAIOU",[[1,7189,"`"]],[7189,7189],[7190,7190]]],[1541334863675,["gjx16@GJXAIOU",[[1,7155,"`"]],[7155,7155],[7156,7156]]],[1541334864162,["gjx16@GJXAIOU",[[1,7124,"`"]],[7124,7124],[7125,7125]]],[1541334869335,["gjx16@GJXAIOU",[[1,6912,",****"]],[6912,6912],[6915,6915]]],[1541334871441,["gjx16@GJXAIOU",[[1,6915,"fanh"]],[6915,6915],[6919,6919]]],[1541334872599,["gjx16@GJXAIOU",[[-1,6915,"fanh"]],[6919,6919],[6915,6915]]],[1541334875054,["gjx16@GJXAIOU",[[1,6915,"返回结果又"]],[6915,6915],[6920,6920]]],[1541334876070,["gjx16@GJXAIOU",[[-1,6919,"又"]],[6920,6920],[6919,6919]]],[1541334884356,["gjx16@GJXAIOU",[[1,6919,"形式为列表"]],[6919,6919],[6924,6924]]],[1541334959717,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7267,"\n\n"]],[5701,5701],[7269,7269]]],[1541334959717,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7267,"\n\n"]],[7269,7269],[5701,5701]]],[1541334903534,["gjx16@GJXAIOU",[[1,7223,"\n- "]],[7220,7220],[7223,7223]]],[1541334903959,["gjx16@GJXAIOU",[[-1,7221,"- "]],[7223,7223],[7222,7222]]],[1541335559725,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7268,"\n\n"]],[5701,5701],[7270,7270]]],[1541335559725,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7268,"\n\n"]],[7270,7270],[5701,5701]]],[1541335519731,["gjx16@GJXAIOU",[[1,7221,"···"]],[7221,7221],[7224,7224]]],[1541335520813,["gjx16@GJXAIOU",[[-1,7221,"···"]],[7224,7224],[7221,7221]]],[1541335521158,["gjx16@GJXAIOU",[[-1,7221,"\n"]],[7221,7221],[7220,7220]]],[1541335522350,["gjx16@GJXAIOU",[[1,7223,"\n- "]],[7220,7220],[7223,7223]]],[1541335522773,["gjx16@GJXAIOU",[[-1,7221,"- "]],[7223,7223],[7221,7221]]],[1541335523124,["gjx16@GJXAIOU",[[-1,7221,"\n"]],[7221,7221],[7220,7220]]],[1541335523829,["gjx16@GJXAIOU",[[-1,7219,"格"]],[7220,7220],[7219,7219]]],[1541335530827,["gjx16@GJXAIOU",[[1,7219,"格，会尝试"]],[7219,7219],[7224,7224]]],[1541335532605,["gjx16@GJXAIOU",[[-1,7222,"尝试"]],[7224,7224],[7222,7222]]],[1541335547162,["gjx16@GJXAIOU",[[1,7222,"产生新的字符串，原来的字符串不变"]],[7222,7222],[7238,7238]]],[1541335548027,["gjx16@GJXAIOU",[[1,7241,"\n- "]],[7238,7238],[7241,7241]]],[1541335548864,["gjx16@GJXAIOU",[[-1,7239,"- "]],[7241,7241],[7239,7239]]],[1541335550531,["gjx16@GJXAIOU",[[1,7239,"```"]],[7239,7239],[7242,7242]]],[1541335550575,["gjx16@GJXAIOU",[[1,7242,"language\n```\n"]],[7242,7242],[7242,7250]]],[1541335551432,["gjx16@GJXAIOU",[[-1,7242,"language"],[1,7250,"p"]],[7242,7250],[7243,7243]]],[1541335552161,["gjx16@GJXAIOU",[[1,7243,"ython"]],[7243,7243],[7248,7248]]],[1541335552832,["gjx16@GJXAIOU",[[1,7249,"\n"]],[7248,7248],[7249,7249]]],[1541335554000,["gjx16@GJXAIOU",[[1,7249,"str = \"  hello  \" print(id(str))#获得原来的字符串的地址 print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串"]],[7249,7249],[7529,7529]]],[1541335619733,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,7570,""],[1,7581,"\n\n"]],[5701,5701],[7583,7583]]],[1541335619733,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,7570,""],[-1,7581,"\n\n"]],[7583,7583],[5701,5701]]],[1541335559894,["gjx16@GJXAIOU",[[1,7267,"\n"]],[7267,7267],[7268,7268]]],[1541335562318,["gjx16@GJXAIOU",[[1,7294,"\n"]],[7294,7294],[7295,7295]]],[1541335563953,["gjx16@GJXAIOU",[[1,7339,"\n "]],[7339,7339],[7341,7341]]],[1541335565902,["gjx16@GJXAIOU",[[1,7392,"\n "]],[7392,7392],[7394,7394]]],[1541335567971,["gjx16@GJXAIOU",[[1,7437,"\n "]],[7437,7437],[7439,7439]]],[1541335569510,["gjx16@GJXAIOU",[[1,7482,"\n "]],[7482,7482],[7484,7484]]],[1541335573118,["gjx16@GJXAIOU",[[1,7545,"\n"]],[7543,7543],[7544,7544]]],[1541335574431,["gjx16@GJXAIOU",[[1,7544,"cheng"]],[7544,7544],[7549,7549]]],[1541335575608,["gjx16@GJXAIOU",[[-1,7544,"cheng"]],[7549,7549],[7544,7544]]],[1541335581720,["gjx16@GJXAIOU",[[1,7544,"程序运行结果："]],[7544,7544],[7551,7551]]],[1541338156193,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,7588,""],[1,7599,"\n\n"]],[5701,5701],[7601,7601]]],[1541338156193,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,7588,""],[-1,7599,"\n\n"]],[7601,7601],[5701,5701]]],[1541338097540,["gjx16@GJXAIOU",[[1,7566,"\n- "]],[7563,7563],[7566,7566]]],[1541338098987,["gjx16@GJXAIOU",[[-1,7564,"- "]],[7566,7566],[7564,7564]]],[1541338101084,["gjx16@GJXAIOU",[[1,7564,"  "]],[7564,7564],[7566,7566]]],[1541338101690,["gjx16@GJXAIOU",[[-1,7565," "]],[7566,7566],[7565,7565]]],[1541338102834,["gjx16@GJXAIOU",[[1,7565,"···"]],[7565,7565],[7568,7568]]],[1541338104002,["gjx16@GJXAIOU",[[-1,7564," ···"]],[7568,7568],[7564,7564]]],[1541338105871,["gjx16@GJXAIOU",[[1,7564,"```"]],[7564,7564],[7567,7567]]],[1541338105914,["gjx16@GJXAIOU",[[1,7567,"language\n```\n"]],[7567,7567],[7567,7575]]],[1541338107159,["gjx16@GJXAIOU",[[-1,7567,"language"],[1,7575,"p"]],[7567,7575],[7568,7568]]],[1541338108134,["gjx16@GJXAIOU",[[1,7568,"ython"]],[7568,7568],[7573,7573]]],[1541338108939,["gjx16@GJXAIOU",[[1,7574,"\n"]],[7573,7573],[7574,7574]]],[1541338110534,["gjx16@GJXAIOU",[[1,7574,"1651046031536\nstarhelloend\n1651046258096\nstarthello  end\nstart  helloend\nstart  hello  end"]],[7574,7574],[7664,7664]]],[1541338115971,["gjx16@GJXAIOU",[[-1,7574,"1651046031536\nstarhelloend\n1651046258096\nstarthello  end\nstart  helloend\nstart  hello  end"]],[7574,7664],[7574,7574]]],[1541338118753,["gjx16@GJXAIOU",[[1,7552,"``"]],[7552,7552],[7554,7554]]],[1541338120843,["gjx16@GJXAIOU",[[1,7553,"1651046031536\nstarhelloend\n1651046258096\nstarthello  end\nstart  helloend\nstart  hello  end"]],[7553,7553],[7643,7643]]],[1541338123800,["gjx16@GJXAIOU",[[1,7566,"`"]],[7566,7566],[7567,7567]]],[1541338124590,["gjx16@GJXAIOU",[[1,7580,"`"]],[7580,7580],[7581,7581]]],[1541338125753,["gjx16@GJXAIOU",[[1,7595,"`"]],[7595,7595],[7596,7596]]],[1541338126382,["gjx16@GJXAIOU",[[1,7612,"`"]],[7612,7612],[7613,7613]]],[1541338131114,["gjx16@GJXAIOU",[[1,7629,"`"]],[7629,7629],[7630,7630]]],[1541338134478,["gjx16@GJXAIOU",[[1,7631,"`"]],[7631,7631],[7632,7632]]],[1541338135462,["gjx16@GJXAIOU",[[1,7614,"`"]],[7614,7614],[7615,7615]]],[1541338136558,["gjx16@GJXAIOU",[[1,7597,"`"]],[7597,7597],[7598,7598]]],[1541338138198,["gjx16@GJXAIOU",[[1,7582,"`"]],[7582,7582],[7583,7583]]],[1541338139207,["gjx16@GJXAIOU",[[1,7568,"`"]],[7568,7568],[7569,7569]]],[1541338154356,["gjx16@GJXAIOU",[[1,7655,"\n"]],[7654,7654],[7655,7655]]],[1541338216186,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,7707,""],[1,7718,"\n\n"]],[5701,5701],[7720,7720]]],[1541338216186,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,7707,""],[-1,7718,"\n\n"]],[7720,7720],[5701,5701]]],[1541338187114,["gjx16@GJXAIOU",[[1,7666,"\\"]],[7666,7666],[7667,7667]]],[1541338187182,["gjx16@GJXAIOU",[[1,7668,"- \n"]],[7667,7667],[7670,7670]]],[1541338191845,["gjx16@GJXAIOU",[[-1,7666,"\\"]],[7667,7667],[7666,7666]]],[1541338194667,["gjx16@GJXAIOU",[[1,7667,"  "]],[7667,7667],[7669,7669]]],[1541338195678,["gjx16@GJXAIOU",[[1,7671," "]],[7670,7670],[7671,7671]]],[1541338198854,["gjx16@GJXAIOU",[[1,7671,"S."]],[7671,7671],[7673,7673]]],[1541338204475,["gjx16@GJXAIOU",[[-1,7671,"S. "]],[7673,7673],[7670,7670]]],[1541338205817,["gjx16@GJXAIOU",[[1,7671," "]],[7670,7670],[7671,7671]]],[1541338206670,["gjx16@GJXAIOU",[[1,7671,"sr"]],[7671,7671],[7673,7673]]],[1541338207156,["gjx16@GJXAIOU",[[-1,7672,"r"]],[7673,7673],[7672,7672]]],[1541338212757,["gjx16@GJXAIOU",[[1,7672,"tr.upper()"]],[7672,7672],[7682,7682]]],[1541338213834,["gjx16@GJXAIOU",[[1,7683," "]],[7682,7682],[7683,7683]]],[1541338214208,["gjx16@GJXAIOU",[[1,7683,":"]],[7683,7683],[7684,7684]]],[1541338276188,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6731,"\n\n"],[-1,7726,""],[1,7737,"\n\n"]],[5701,5701],[7739,7739]]],[1541338276188,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6733,"\n\n"],[1,7726,""],[-1,7737,"\n\n"]],[7739,7739],[5701,5701]]],[1541338226945,["gjx16@GJXAIOU",[[1,7684,"将str中的字母全部转换为i"]],[7684,7684],[7698,7698]]],[1541338227501,["gjx16@GJXAIOU",[[-1,7697,"i"]],[7698,7698],[7697,7697]]],[1541338233217,["gjx16@GJXAIOU",[[1,7697,"大写\n  -"]],[7697,7697],[7703,7703]]],[1541338234528,["gjx16@GJXAIOU",[[1,7704," "]],[7703,7703],[7704,7704]]],[1541338251901,["gjx16@GJXAIOU",[[1,7704,"str.lower()"]],[7704,7704],[7715,7715]]],[1541338253368,["gjx16@GJXAIOU",[[1,7716," "]],[7715,7715],[7716,7716]]],[1541338253753,["gjx16@GJXAIOU",[[1,7716,";"]],[7716,7716],[7717,7717]]],[1541338254749,["gjx16@GJXAIOU",[[-1,7716,";"]],[7717,7717],[7716,7716]]],[1541338257469,["gjx16@GJXAIOU",[[1,7716,":jiang"]],[7716,7716],[7722,7722]]],[1541338259571,["gjx16@GJXAIOU",[[-1,7717,"jiang"]],[7722,7722],[7717,7717]]],[1541338272312,["gjx16@GJXAIOU",[[1,7717,"将str中的字母全部转换为小写\n  -"]],[7717,7717],[7736,7736]]],[1541338272505,["gjx16@GJXAIOU",[[1,7737," "]],[7736,7736],[7737,7737]]],[1541338275679,["gjx16@GJXAIOU",[[1,7737,"s"]],[7737,7737],[7738,7738]]],[1541338336197,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7791,"\n\n"]],[5701,5701],[7793,7793]]],[1541338336197,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7791,"\n\n"]],[7793,7793],[5701,5701]]],[1541338288620,["gjx16@GJXAIOU",[[1,7738,"tr.capitalize()"]],[7738,7738],[7753,7753]]],[1541338289183,["gjx16@GJXAIOU",[[1,7754," "]],[7753,7753],[7754,7754]]],[1541338295199,["gjx16@GJXAIOU",[[1,7754,":jiang"]],[7754,7754],[7760,7760]]],[1541338296258,["gjx16@GJXAIOU",[[-1,7755,"jiang"]],[7760,7760],[7755,7755]]],[1541338305831,["gjx16@GJXAIOU",[[1,7755,"将首字母转换为大写’\n  "]],[7755,7755],[7768,7768]]],[1541338307459,["gjx16@GJXAIOU",[[-1,7767,"  "]],[7768,7768],[7766,7766]]],[1541338307833,["gjx16@GJXAIOU",[[-1,7765,"\n"]],[7766,7766],[7765,7765]]],[1541338308721,["gjx16@GJXAIOU",[[-1,7764,"’"]],[7765,7765],[7764,7764]]],[1541338310369,["gjx16@GJXAIOU",[[1,7764,"\n  -"]],[7764,7764],[7768,7768]]],[1541338310573,["gjx16@GJXAIOU",[[1,7769," "]],[7768,7768],[7769,7769]]],[1541338324151,["gjx16@GJXAIOU",[[1,7769,"str.isupper()"]],[7769,7769],[7782,7782]]],[1541338325144,["gjx16@GJXAIOU",[[1,7783," "]],[7782,7782],[7783,7783]]],[1541338334463,["gjx16@GJXAIOU",[[1,7783,":判断str中"]],[7783,7783],[7790,7790]]],[1541338396205,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7843,"\n\n"]],[5701,5701],[7845,7845]]],[1541338396205,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7843,"\n\n"]],[7845,7845],[5701,5701]]],[1541338351678,["gjx16@GJXAIOU",[[1,7790,"的字母是否全为大写\n  -"]],[7790,7790],[7803,7803]]],[1541338352701,["gjx16@GJXAIOU",[[1,7804," "]],[7803,7803],[7804,7804]]],[1541338361705,["gjx16@GJXAIOU",[[1,7804,"str.islower()"]],[7804,7804],[7817,7817]]],[1541338362133,["gjx16@GJXAIOU",[[1,7818," "]],[7817,7817],[7818,7818]]],[1541338364414,["gjx16@GJXAIOU",[[1,7818,":pan"]],[7818,7818],[7822,7822]]],[1541338365297,["gjx16@GJXAIOU",[[-1,7819,"pan"]],[7822,7822],[7819,7819]]],[1541338383984,["gjx16@GJXAIOU",[[1,7819,"判断str中的字母是否全为小写\n  -"]],[7819,7819],[7838,7838]]],[1541338384255,["gjx16@GJXAIOU",[[1,7839," "]],[7838,7838],[7839,7839]]],[1541338393201,["gjx16@GJXAIOU",[[1,7839,"str.istitle()"]],[7839,7839],[7852,7852]]],[1541338394023,["gjx16@GJXAIOU",[[1,7853," "]],[7852,7852],[7853,7853]]],[1541338394377,["gjx16@GJXAIOU",[[1,7853,":"]],[7853,7853],[7854,7854]]],[1541338456199,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7907,"\n\n"]],[5701,5701],[7909,7909]]],[1541338456199,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7907,"\n\n"]],[7909,7909],[5701,5701]]],[1541338397574,["gjx16@GJXAIOU",[[1,7854,"panduan"]],[7854,7854],[7861,7861]]],[1541338397815,["gjx16@GJXAIOU",[[1,7862," "]],[7861,7861],[7862,7862]]],[1541338398877,["gjx16@GJXAIOU",[[1,7862,"str"]],[7862,7862],[7865,7865]]],[1541338401378,["gjx16@GJXAIOU",[[-1,7854,"panduanstr "]],[7865,7865],[7854,7854]]],[1541338406583,["gjx16@GJXAIOU",[[1,7854,"判断带头人"]],[7854,7854],[7859,7859]]],[1541338407781,["gjx16@GJXAIOU",[[-1,7856,"带头人"]],[7859,7859],[7856,7856]]],[1541338409954,["gjx16@GJXAIOU",[[1,7856,"str中"]],[7856,7856],[7860,7860]]],[1541338412570,["gjx16@GJXAIOU",[[-1,7859,"中"]],[7860,7860],[7859,7859]]],[1541338416084,["gjx16@GJXAIOU",[[1,7859,"对否为"]],[7859,7859],[7862,7862]]],[1541338418346,["gjx16@GJXAIOU",[[-1,7859,"对否为"]],[7862,7862],[7859,7859]]],[1541338447074,["gjx16@GJXAIOU",[[1,7859,"是否为标题模式，即所有单词首字母大写，抑郁"]],[7859,7859],[7880,7880]]],[1541338448035,["gjx16@GJXAIOU",[[-1,7878,"抑郁"]],[7880,7880],[7878,7878]]],[1541338453247,["gjx16@GJXAIOU",[[1,7878,"其余字母全部"]],[7878,7878],[7884,7884]]],[1541338516195,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7937,"\n\n"]],[5701,5701],[7939,7939]]],[1541338516195,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7937,"\n\n"]],[7939,7939],[5701,5701]]],[1541338456279,["gjx16@GJXAIOU",[[1,7884,"小写"]],[7884,7884],[7886,7886]]],[1541338513691,["gjx16@GJXAIOU",[[1,7666,"，生成一个新的字符串，不改变原有的值"]],[7666,7666],[7684,7684]]],[1541338576210,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,7957,"\n\n"]],[5701,5701],[7959,7959]]],[1541338576210,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,7957,"\n\n"]],[7959,7959],[5701,5701]]],[1541338522256,["gjx16@GJXAIOU",[[1,7916,"str = \"\""]],[7916,7916],[7924,7924]]],[1541338531737,["gjx16@GJXAIOU",[[1,7923,"hello PyThon"]],[7923,7923],[7935,7935]]],[1541338534163,["gjx16@GJXAIOU",[[1,7937,"\n"]],[7936,7936],[7937,7937]]],[1541338536929,["gjx16@GJXAIOU",[[1,7937,"print()"]],[7937,7937],[7944,7944]]],[1541338546510,["gjx16@GJXAIOU",[[1,7943,"str.upper"]],[7943,7943],[7952,7952]]],[1541338548691,["gjx16@GJXAIOU",[[1,7954,"\n"]],[7953,7953],[7954,7954]]],[1541338551449,["gjx16@GJXAIOU",[[1,7954,"print()"]],[7954,7954],[7961,7961]]],[1541338556637,["gjx16@GJXAIOU",[[1,7960,"str.lower"]],[7960,7960],[7969,7969]]],[1541338636197,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,8011,"\n\n"]],[5701,5701],[8013,8013]]],[1541338636197,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,8011,"\n\n"]],[8013,8013],[5701,5701]]],[1541338595547,["gjx16@GJXAIOU",[[-1,7936,"\n"],[1,7937," "],[1,7952,"()"],[1,7969,"()"]],[7916,7970],[7974,7974]]],[1541338598098,["gjx16@GJXAIOU",[[1,7937,"\n"]],[7937,7937],[7938,7938]]],[1541338600388,["gjx16@GJXAIOU",[[1,7976,"\n"]],[7975,7975],[7976,7976]]],[1541338603491,["gjx16@GJXAIOU",[[1,7982,"\n"]],[7980,7980],[7981,7981]]],[1541338604317,["gjx16@GJXAIOU",[[1,7981,"c"]],[7981,7981],[7982,7982]]],[1541338604825,["gjx16@GJXAIOU",[[-1,7981,"c"]],[7982,7982],[7981,7981]]],[1541338609575,["gjx16@GJXAIOU",[[1,7981,"程序运行结果："]],[7981,7981],[7988,7988]]],[1541338617291,["gjx16@GJXAIOU",[[1,7990,"\n"]],[7988,7988],[7989,7989]]],[1541338619800,["gjx16@GJXAIOU",[[1,7989,"``"]],[7989,7989],[7991,7991]]],[1541338621603,["gjx16@GJXAIOU",[[1,7990,"HELLO PYTHON\nhello python"]],[7990,7990],[8015,8015]]],[1541338624774,["gjx16@GJXAIOU",[[1,8002,"`"]],[8002,8002],[8003,8003]]],[1541338628758,["gjx16@GJXAIOU",[[1,8004,"`"]],[8004,8004],[8005,8005]]],[1541338633878,["gjx16@GJXAIOU",[[1,8035,"- \n"]],[8034,8034],[8037,8037]]],[1541338635050,["gjx16@GJXAIOU",[[-1,8035,"- "]],[8037,8037],[8035,8035]]],[1541338696205,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,8056,"\n\n"]],[5701,5701],[8058,8058]]],[1541338696205,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,8056,"\n\n"]],[8058,8058],[5701,5701]]],[1541338670754,["gjx16@GJXAIOU",[[-1,8044,"\n"]],[8035,8035],[8034,8034]]],[1541338673046,["gjx16@GJXAIOU",[[1,8034,",zhuy"]],[8034,8034],[8039,8039]]],[1541338673994,["gjx16@GJXAIOU",[[-1,8035,"zhuy"]],[8039,8039],[8035,8035]]],[1541338685168,["gjx16@GJXAIOU",[[1,8035,"主要用于将列表中的各个元素，"]],[8035,8035],[8049,8049]]],[1541338688389,["gjx16@GJXAIOU",[[-1,8044,"各个元素，"]],[8049,8049],[8044,8044]]],[1541338695075,["gjx16@GJXAIOU",[[1,8044,"各种类型元素连接，"]],[8044,8044],[8053,8053]]],[1541338756203,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,8074,"\n\n"]],[5701,5701],[8076,8076]]],[1541338756203,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,8074,"\n\n"]],[8076,8076],[5701,5701]]],[1541338749836,["gjx16@GJXAIOU",[[1,8053,"或者抵用"]],[8053,8053],[8057,8057]]],[1541338750478,["gjx16@GJXAIOU",[[-1,8055,"抵用"]],[8057,8057],[8055,8055]]],[1541338752035,["gjx16@GJXAIOU",[[1,8055,"使用"]],[8055,8055],[8057,8057]]],[1541338816236,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,8078,"\n\n"]],[5701,5701],[8080,8080]]],[1541338816236,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,8078,"\n\n"]],[8080,8080],[5701,5701]]],[1541338759152,["gjx16@GJXAIOU",[[1,8057,"某个符号将"]],[8057,8057],[8062,8062]]],[1541338766205,["gjx16@GJXAIOU",[[-1,8061,"将"]],[8062,8062],[8061,8061]]],[1541338772480,["gjx16@GJXAIOU",[[1,8061,"来拼接字符串"]],[8061,8061],[8067,8067]]],[1541338773158,["gjx16@GJXAIOU",[[1,8068,"- \n"]],[8067,8067],[8070,8070]]],[1541338774097,["gjx16@GJXAIOU",[[-1,8068,"- "]],[8070,8070],[8068,8068]]],[1541338790132,["gjx16@GJXAIOU",[[1,8068,"例如"]],[8068,8068],[8070,8070]]],[1541338790845,["gjx16@GJXAIOU",[[-1,8068,"例如"]],[8070,8070],[8068,8068]]],[1541338792785,["gjx16@GJXAIOU",[[1,8068,"·"]],[8068,8068],[8069,8069]]],[1541338794173,["gjx16@GJXAIOU",[[-1,8068,"·"]],[8069,8069],[8068,8068]]],[1541338795120,["gjx16@GJXAIOU",[[1,8068,"~··"]],[8068,8068],[8071,8071]]],[1541338795898,["gjx16@GJXAIOU",[[-1,8068,"~··"]],[8071,8071],[8068,8068]]],[1541338797209,["gjx16@GJXAIOU",[[1,8068,"```"]],[8068,8068],[8071,8071]]],[1541338797253,["gjx16@GJXAIOU",[[1,8071,"language\n```\n"]],[8071,8071],[8071,8079]]],[1541338798399,["gjx16@GJXAIOU",[[-1,8071,"language"],[1,8079,"p"]],[8071,8079],[8072,8072]]],[1541338799192,["gjx16@GJXAIOU",[[1,8072,"ython"]],[8072,8072],[8077,8077]]],[1541338799862,["gjx16@GJXAIOU",[[1,8078,"\n"]],[8077,8077],[8078,8078]]],[1541338805162,["gjx16@GJXAIOU",[[1,8078,"a = []"]],[8078,8078],[8084,8084]]],[1541338807119,["gjx16@GJXAIOU",[[1,8083,"\"\""]],[8083,8083],[8085,8085]]],[1541338809664,["gjx16@GJXAIOU",[[1,8084,"python"]],[8084,8084],[8090,8090]]],[1541338813774,["gjx16@GJXAIOU",[[1,8091,",\"\""]],[8091,8091],[8094,8094]]],[1541338815409,["gjx16@GJXAIOU",[[1,8093,"if"]],[8093,8093],[8095,8095]]],[1541338816093,["gjx16@GJXAIOU",[[-1,8094,"f"]],[8095,8095],[8094,8094]]],[1541338876234,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[1,8122,"\n\n"]],[5701,5701],[8124,8124]]],[1541338876234,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[-1,8122,"\n\n"]],[8124,8124],[5701,5701]]],[1541338817986,["gjx16@GJXAIOU",[[-1,8094,"d"]],[8095,8095],[8094,8094]]],[1541338818192,["gjx16@GJXAIOU",[[1,8094,"s"]],[8094,8094],[8095,8095]]],[1541338821910,["gjx16@GJXAIOU",[[1,8096,",\"\""]],[8096,8096],[8099,8099]]],[1541338830489,["gjx16@GJXAIOU",[[1,8098,"the"]],[8098,8098],[8101,8101]]],[1541338835462,["gjx16@GJXAIOU",[[1,8102,",\"\""]],[8102,8102],[8105,8105]]],[1541338838522,["gjx16@GJXAIOU",[[1,8104,"bewt"]],[8104,8104],[8108,8108]]],[1541338839938,["gjx16@GJXAIOU",[[-1,8105,"ewt"]],[8108,8108],[8105,8105]]],[1541338842821,["gjx16@GJXAIOU",[[1,8105,"est"]],[8105,8105],[8108,8108]]],[1541338844866,["gjx16@GJXAIOU",[[1,8111,"\n"]],[8110,8110],[8111,8111]]],[1541338847684,["gjx16@GJXAIOU",[[1,8111,"\"\""]],[8111,8111],[8113,8113]]],[1541338850026,["gjx16@GJXAIOU",[[-1,8112,"\""]],[8112,8112],[8111,8111]]],[1541338851898,["gjx16@GJXAIOU",[[-1,8112,"\n"]],[8113,8113],[8112,8112]]],[1541338852748,["gjx16@GJXAIOU",[[-1,8111,"\""]],[8112,8112],[8111,8111]]],[1541338854082,["gjx16@GJXAIOU",[[1,8111,"\n"]],[8111,8111],[8112,8112]]],[1541338856877,["gjx16@GJXAIOU",[[1,8111,"print()"]],[8111,8111],[8118,8118]]],[1541338859442,["gjx16@GJXAIOU",[[1,8117,"\"\""]],[8117,8117],[8119,8119]]],[1541338861240,["gjx16@GJXAIOU",[[1,8118,"*"]],[8118,8118],[8119,8119]]],[1541338866136,["gjx16@GJXAIOU",[[1,8120,",join("]],[8120,8120],[8126,8126]]],[1541338866211,["gjx16@GJXAIOU",[[1,8127,")"]],[8126,8126],[8127,8127]]],[1541338867534,["gjx16@GJXAIOU",[[1,8126,"a"]],[8126,8126],[8127,8127]]],[1541338936249,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[-1,8095,"]"],[1,8096,"\""],[1,8109,"]"],[-1,8110,"`"],[1,8132,"`"],[1,8154,"\n\n"]],[5701,5701],[8156,8156]]],[1541338936249,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[1,8095,"]"],[-1,8095,"\""],[-1,8109,"]"],[1,8111,"`"],[-1,8132,"`"],[-1,8155,"\n\n"]],[8156,8156],[5701,5701]]],[1541338900547,["gjx16@GJXAIOU",[[-1,8120,","]],[8121,8121],[8120,8120]]],[1541338900863,["gjx16@GJXAIOU",[[1,8120,"."]],[8120,8120],[8121,8121]]],[1541338911544,["gjx16@GJXAIOU",[[1,8134,"程序运行结果：``"]],[8134,8134],[8143,8143]]],[1541338913126,["gjx16@GJXAIOU",[[1,8142,"python*is*the*best"]],[8142,8142],[8160,8160]]],[1541338917411,["gjx16@GJXAIOU",[[1,8171,"\n"]],[8161,8161],[8162,8162]]],[1541338918731,["gjx16@GJXAIOU",[[1,8172,"\n"]],[8162,8162],[8163,8163]]],[1541338933719,["gjx16@GJXAIOU",[[1,8163,"\\"]],[8163,8163],[8164,8164]]],[1541338934651,["gjx16@GJXAIOU",[[1,8174,"\n"]],[8164,8164],[8165,8165]]],[1541338935237,["gjx16@GJXAIOU",[[-1,8174,"\n"]],[8165,8165],[8164,8164]]],[1541338935387,["gjx16@GJXAIOU",[[-1,8163,"\\"]],[8164,8164],[8163,8163]]],[1541338936083,["gjx16@GJXAIOU",[[1,8173,"\n"]],[8163,8163],[8164,8164]]],[1541338996252,[null,[[-1,5701,"`"],[1,5702,"g"],[-1,5711,"\n"],[1,5712,"`"],[-1,6608,"\n`"],[1,6610,"到此"],[-1,6624,"`"],[1,6625,"\n"],[1,6651,"``"],[-1,6727,"\n\n"],[-1,8095,"]"],[1,8096,"\""],[1,8109,"]"],[-1,8110,"`"],[-1,8132,"\n"],[1,8133,"`"],[-1,8170,"#"],[1,8171,"\n"],[1,8174,"#"],[1,8184,"\n\n"]],[5701,5701],[8186,8186]]],[1541338996252,[null,[[1,5701,"`"],[-1,5701,"g"],[1,5711,"\n"],[-1,5711,"`"],[1,6608,"\n`"],[-1,6608,"到此"],[1,6624,"`"],[-1,6624,"\n"],[-1,6651,"``"],[1,6729,"\n\n"],[1,8095,"]"],[-1,8095,"\""],[-1,8109,"]"],[1,8111,"`"],[1,8132,"\n"],[-1,8132,"`"],[1,8170,"#"],[-1,8170,"\n"],[-1,8174,"#"],[-1,8185,"\n\n"]],[8186,8186],[5701,5701]]],[1541338942273,["gjx16@GJXAIOU",[[1,8165,"## 1.6 zifu"]],[8165,8165],[8176,8176]]],[1541338943437,["gjx16@GJXAIOU",[[-1,8172,"zifu"]],[8176,8176],[8172,8172]]],[1541338947897,["gjx16@GJXAIOU",[[1,8172,"字符编码"]],[8172,8172],[8176,8176]]],[1541338948780,["gjx16@GJXAIOU",[[1,8186,"\n"]],[8176,8176],[8177,8177]]],[1541338953686,["gjx16@GJXAIOU",[[1,8177,"python3"]],[8177,8177],[8184,8184]]],[1541338956650,["gjx16@GJXAIOU",[[-1,8183,"3"]],[8184,8184],[8183,8183]]],[1541338966651,["gjx16@GJXAIOU",[[1,8183," 3 中所有字符串穿"]],[8183,8183],[8193,8193]]],[1541338967035,["gjx16@GJXAIOU",[[-1,8192,"穿"]],[8193,8193],[8192,8192]]],[1541338976099,["gjx16@GJXAIOU",[[1,8192,"均采用Unicode编码"]],[8192,8192],[8204,8204]]],[1541338980812,["gjx16@GJXAIOU",[[-1,8202,"编码"]],[8204,8204],[8202,8202]]],[1541338995785,["gjx16@GJXAIOU",[[1,8202,"编码，"]],[8202,8202],[8205,8205]]]],null,"gjx16@GJXAIOU"],["389b7912-052b-4231-a201-e1c3f2601c6d",1541339843670,"# 第1章 基本对象类型\n\n浮点数的所有运算都要注意\n\n1.python可以自动处理大整数问题，不必担心溢出\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个对象在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n5.**对象有类型，变量无类型**\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 `**` 表示乘幂 ，等效于`pow()`函数，当然要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算到 数有没有浮点数==\n\n9、`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10、python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n12.针对python中的浮点数问题\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python from fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n\n## python中的标准库\n\n1.**常见的数学函数以及运算优先级**\n- 使用`math`\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 字符串\n\n1.字符串使用单引号或者双引号包裹，\n\n当字符串内部含有其中一种符号时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先`+`两边的对象给的数据类型必须一致 ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；`repr()`函数作用是返回一个字符串对象；[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续航，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()**返回的结果为字符串类型的对象\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU #coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \n ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \n print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s`\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，\n\n\n\n\n\n\n\n\n\n## 1.6 字符编码\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1541339809926,["gjx16@GJXAIOU",[[1,8205,"UTF-8知识"]],[8205,8205],[8212,8212]]],[1541339810647,["gjx16@GJXAIOU",[[-1,8210,"知识"]],[8212,8212],[8210,8210]]],[1541339814025,["gjx16@GJXAIOU",[[1,8210,"只是1"]],[8210,8210],[8213,8213]]],[1541339814816,["gjx16@GJXAIOU",[[-1,8212,"1"]],[8213,8213],[8212,8212]]],[1541339820866,["gjx16@GJXAIOU",[[1,8212,"其实现方法之一，"]],[8212,8212],[8220,8220]]],[1541339824857,["gjx16@GJXAIOU",[[-1,8219,"，"]],[8220,8220],[8219,8219]]],[1541339825418,["gjx16@GJXAIOU",[[1,8219,"()"]],[8219,8219],[8221,8221]]],[1541339828617,["gjx16@GJXAIOU",[[1,8220,"cai"]],[8220,8220],[8223,8223]]],[1541339829620,["gjx16@GJXAIOU",[[-1,8220,"cai"]],[8223,8223],[8220,8220]]],[1541339831578,["gjx16@GJXAIOU",[[1,8220,"采用"]],[8220,8220],[8222,8222]]],[1541339832370,["gjx16@GJXAIOU",[[-1,8220,"采用"]],[8222,8222],[8220,8220]]],[1541339835218,["gjx16@GJXAIOU",[[1,8220,"采用"]],[8220,8220],[8222,8222]]],[1541339849005,["gjx16@GJXAIOU",[[1,8222,"可变长度字符编码"]],[8222,8222],[8230,8230]]],[1541339858403,["gjx16@GJXAIOU",[[1,8231,"，同时可以使用``"]],[8231,8231],[8240,8240]]],[1541339862542,["gjx16@GJXAIOU",[[1,8239,"encode()"]],[8239,8239],[8247,8247]]],[1541339886405,["gjx16@GJXAIOU",[[1,8248,"将Unicode编码的字符转换为其他编码"]],[8248,8248],[8268,8268]]],[1541339899530,["gjx16@GJXAIOU",[[-1,8278,"## 1.6 字符编码\n"]],[8277,8289],[8277,8277]]],[1541339899677,["gjx16@GJXAIOU",[[-1,8289,"\n"]],[8277,8277],[8276,8276]]],[1541339899797,["gjx16@GJXAIOU",[[-1,8288,"\n"]],[8276,8276],[8275,8275]]],[1541339900265,["gjx16@GJXAIOU",[[-1,8287,"\n"]],[8275,8275],[8274,8274]]],[1541339900423,["gjx16@GJXAIOU",[[-1,8286,"\n"]],[8274,8274],[8273,8273]]],[1541339912142,["gjx16@GJXAIOU",[[1,8273,"## 1.7 列表"]],[8273,8273],[8282,8282]]],[1541339912894,["gjx16@GJXAIOU",[[1,8295,"\n"]],[8282,8282],[8283,8283]]],[1541340022505,["gjx16@GJXAIOU",[[1,8284,"### 1"]],[8284,8284],[8289,8289]]],[1541340028394,["gjx16@GJXAIOU",[[1,8289,".7.1 定义"]],[8289,8289],[8296,8296]]],[1541340028901,["gjx16@GJXAIOU",[[1,8308,"\n"]],[8296,8296],[8297,8297]]],[1541340040217,["gjx16@GJXAIOU",[[1,8297,"- 形式为``"]],[8297,8297],[8304,8304]]],[1541340042434,["gjx16@GJXAIOU",[[1,8303,"[]"]],[8303,8303],[8305,8305]]],[1541340044403,["gjx16@GJXAIOU",[[1,8307,"- \n"]],[8306,8306],[8309,8309]]],[1541340084642,["gjx16@GJXAIOU",[[1,8309,"pan"]],[8309,8309],[8312,8312]]],[1541340086014,["gjx16@GJXAIOU",[[-1,8309,"pan"]],[8312,8312],[8309,8309]]],[1541340099476,["gjx16@GJXAIOU",[[1,8309,"判断列表是否为空：``"]],[8309,8309],[8320,8320]]],[1541340105892,["gjx16@GJXAIOU",[[1,8319,"bool()"]],[8319,8319],[8325,8325]]],[1541340114963,["gjx16@GJXAIOU",[[1,8326,"  zhen"]],[8326,8326],[8332,8332]]],[1541340115945,["gjx16@GJXAIOU",[[-1,8328,"zhen"]],[8332,8332],[8328,8328]]],[1541340136964,["gjx16@GJXAIOU",[[1,8328,"空为false"]],[8328,8328],[8335,8335]]],[1541340788870,["gjx16@GJXAIOU",[[1,8336,"- \n"]],[8335,8335],[8338,8338]]],[1541340792360,["gjx16@GJXAIOU",[[1,8338,"定义："]],[8338,8338],[8341,8341]]],[1541340793156,["gjx16@GJXAIOU",[[1,8342,"- \n"]],[8341,8341],[8344,8344]]],[1541340794764,["gjx16@GJXAIOU",[[-1,8342,"- "]],[8344,8344],[8342,8342]]],[1541340796133,["gjx16@GJXAIOU",[[-1,8353,"\n"]],[8342,8342],[8341,8341]]],[1541340797174,["gjx16@GJXAIOU",[[1,8342,"- \n"]],[8341,8341],[8344,8344]]],[1541340797924,["gjx16@GJXAIOU",[[-1,8342,"- "]],[8344,8344],[8342,8342]]],[1541340804128,["gjx16@GJXAIOU",[[1,8342,"```"]],[8342,8342],[8345,8345]]],[1541340804175,["gjx16@GJXAIOU",[[1,8345,"language\n```\n"]],[8345,8345],[8345,8353]]],[1541340805505,["gjx16@GJXAIOU",[[-1,8345,"language"],[1,8353,"o"]],[8345,8353],[8346,8346]]],[1541340806728,["gjx16@GJXAIOU",[[-1,8345,"o"]],[8346,8346],[8345,8345]]],[1541340808657,["gjx16@GJXAIOU",[[1,8345,"pyton"]],[8345,8345],[8350,8350]]],[1541340809612,["gjx16@GJXAIOU",[[-1,8348,"on"]],[8350,8350],[8348,8348]]],[1541340810624,["gjx16@GJXAIOU",[[1,8348,"hon"]],[8348,8348],[8351,8351]]],[1541340811261,["gjx16@GJXAIOU",[[1,8352,"\n"]],[8351,8351],[8352,8352]]],[1541340816762,["gjx16@GJXAIOU",[[1,8352,"a= "]],[8352,8352],[8355,8355]]],[1541340818098,["gjx16@GJXAIOU",[[-1,8353,"= "]],[8355,8355],[8353,8353]]],[1541340822535,["gjx16@GJXAIOU",[[1,8353," = [\""]],[8353,8353],[8358,8358]]],[1541340824725,["gjx16@GJXAIOU",[[-1,8357,"\""]],[8358,8358],[8357,8357]]],[1541340835223,["gjx16@GJXAIOU",[[1,8357,"'2',3,\"\""]],[8357,8357],[8365,8365]]],[1541340840455,["gjx16@GJXAIOU",[[1,8364,"nihoa"]],[8364,8364],[8369,8369]]],[1541340841625,["gjx16@GJXAIOU",[[-1,8367,"oa"]],[8369,8369],[8367,8367]]],[1541340842425,["gjx16@GJXAIOU",[[1,8367,"as"]],[8367,8367],[8369,8369]]],[1541340843695,["gjx16@GJXAIOU",[[-1,8364,"nihas"]],[8369,8369],[8364,8364]]],[1541340845040,["gjx16@GJXAIOU",[[1,8364,"hello"]],[8364,8364],[8369,8369]]],[1541340852136,["gjx16@GJXAIOU",[[1,8370,"]#bao"]],[8370,8370],[8375,8375]]],[1541340853264,["gjx16@GJXAIOU",[[-1,8372,"bao"]],[8375,8375],[8372,8372]]],[1541340861866,["gjx16@GJXAIOU",[[1,8372,"包含字符、数字、"]],[8372,8372],[8380,8380]]],[1541340864434,["gjx16@GJXAIOU",[[1,8380,"字符串"]],[8380,8380],[8383,8383]]],[1541340866204,["gjx16@GJXAIOU",[[1,8384,"\n"]],[8383,8383],[8384,8384]]],[1541340869942,["gjx16@GJXAIOU",[[1,8384,"print()"]],[8384,8384],[8391,8391]]],[1541340870839,["gjx16@GJXAIOU",[[1,8390,"a"]],[8390,8390],[8391,8391]]],[1541340884988,["gjx16@GJXAIOU",[[1,8384,"\n"]],[8383,8383],[8384,8384]]],[1541340894046,["gjx16@GJXAIOU",[[1,8384,"b= [he"]],[8384,8384],[8390,8390]]],[1541340895995,["gjx16@GJXAIOU",[[-1,8388,"he"]],[8390,8390],[8388,8388]]],[1541340897136,["gjx16@GJXAIOU",[[1,8388,"\"\""]],[8388,8388],[8390,8390]]],[1541340900081,["gjx16@GJXAIOU",[[1,8389,"python"]],[8389,8389],[8395,8395]]],[1541340903424,["gjx16@GJXAIOU",[[1,8396,",a]"]],[8396,8396],[8399,8399]]],[1541340906915,["gjx16@GJXAIOU",[[-1,8406,"a"]],[8407,8407],[8406,8406]]],[1541340907471,["gjx16@GJXAIOU",[[1,8406,"b"]],[8406,8406],[8407,8407]]],[1541340908416,["gjx16@GJXAIOU",[[-1,8406,"b"]],[8407,8407],[8406,8406]]],[1541340908987,["gjx16@GJXAIOU",[[1,8406,"a"]],[8406,8406],[8407,8407]]],[1541340910110,["gjx16@GJXAIOU",[[1,8409,"\n"]],[8408,8408],[8409,8409]]],[1541340913086,["gjx16@GJXAIOU",[[1,8409,"python()"]],[8409,8409],[8417,8417]]],[1541340914616,["gjx16@GJXAIOU",[[1,8416,"b"]],[8416,8416],[8417,8417]]],[1541340932161,["gjx16@GJXAIOU",[[1,8423,"程序运行结果为："]],[8423,8423],[8431,8431]]],[1541340935450,["gjx16@GJXAIOU",[[1,8443,"\n"]],[8431,8431],[8432,8432]]],[1541340936632,["gjx16@GJXAIOU",[[1,8432,"``"]],[8432,8432],[8434,8434]]],[1541340941916,["gjx16@GJXAIOU",[[1,8446,"\n"]],[8434,8434],[8435,8435]]],[1541340956790,["gjx16@GJXAIOU",[[1,8435,"### 1.7.2 dyu"]],[8435,8435],[8448,8448]]],[1541340957837,["gjx16@GJXAIOU",[[-1,8445,"dyu"]],[8448,8448],[8445,8445]]],[1541340964463,["gjx16@GJXAIOU",[[1,8445,"索引和切片"]],[8445,8445],[8450,8450]]],[1541340965638,["gjx16@GJXAIOU",[[1,8462,"\n"]],[8450,8450],[8451,8451]]],[1541341024344,["gjx16@GJXAIOU",[[1,8433,"['2', 3, 'hello']\n['python', ['2', 3, 'hello']]"]],[8433,8433],[8480,8480]]],[1541341026530,["gjx16@GJXAIOU",[[1,8450,"·"]],[8450,8450],[8451,8451]]],[1541341028486,["gjx16@GJXAIOU",[[-1,8450,"·"]],[8451,8451],[8450,8450]]],[1541341028723,["gjx16@GJXAIOU",[[1,8450,"·"]],[8450,8450],[8451,8451]]],[1541341030047,["gjx16@GJXAIOU",[[-1,8450,"·"]],[8451,8451],[8450,8450]]],[1541341030567,["gjx16@GJXAIOU",[[1,8450,"`"]],[8450,8450],[8451,8451]]],[1541341035990,["gjx16@GJXAIOU",[[1,8452,"`"]],[8452,8452],[8453,8453]]],[1541341058536,["gjx16@GJXAIOU",[[1,8399,"#同时可以套一个链表"]],[8399,8399],[8409,8409]]],[1541341059941,["gjx16@GJXAIOU",[[-1,8407,"链表"]],[8409,8409],[8407,8407]]],[1541341063337,["gjx16@GJXAIOU",[[1,8407,"列表"]],[8407,8407],[8409,8409]]],[1541341102397,["gjx16@GJXAIOU",[[1,8494,"\n"]],[8493,8493],[8494,8494]]],[1541341102550,["gjx16@GJXAIOU",[[1,8495,"\n"]],[8494,8494],[8495,8495]]],[1541342133264,["gjx16@GJXAIOU",[[1,8513,"···"]],[8513,8513],[8516,8516]]],[1541342134213,["gjx16@GJXAIOU",[[-1,8513,"···"]],[8516,8516],[8513,8513]]],[1541342135672,["gjx16@GJXAIOU",[[1,8513,"```"]],[8513,8513],[8516,8516]]],[1541342135721,["gjx16@GJXAIOU",[[1,8516,"language\n```\n"]],[8516,8516],[8516,8524]]],[1541342136694,["gjx16@GJXAIOU",[[-1,8516,"language"],[1,8524,"p"]],[8516,8524],[8517,8517]]],[1541342138726,["gjx16@GJXAIOU",[[1,8517,"ython"]],[8517,8517],[8522,8522]]],[1541342139377,["gjx16@GJXAIOU",[[1,8523,"\n"]],[8522,8522],[8523,8523]]],[1541342140137,["gjx16@GJXAIOU",[[1,8523,"#列表元素的索引 a = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引 \"\"\" 编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。 \"\"\" print(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序   #典型的错误读取方式 print(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值 #正确用法 print(a[-3:-1])  #等价于a[1:3]   #根据步长索引 print(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]   # 当步长为负数的时候"]],[8523,8523],[8913,8913]]]],null,"gjx16@GJXAIOU"],["0591c93b-400b-4c37-8e71-461db500e815",1541379669808,"# 第1章 基本对象类型\n\n浮点数的所有运算都要注意\n\n1.python可以自动处理大整数问题，不必担心溢出\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个对象在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n5.**对象有类型，变量无类型**\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 `**` 表示乘幂 ，等效于`pow()`函数，当然要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算到 数有没有浮点数==\n\n9、`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10、python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n12.针对python中的浮点数问题\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python from fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n\n## python中的标准库\n\n1.**常见的数学函数以及运算优先级**\n- 使用`math`\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 字符串\n\n1.字符串使用单引号或者双引号包裹，\n\n当字符串内部含有其中一种符号时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先`+`两边的对象给的数据类型必须一致 ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；`repr()`函数作用是返回一个字符串对象；[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续航，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()**返回的结果为字符串类型的对象\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU #coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \n ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \n print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s`\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\npython(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#列表元素的索引 a = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引 \"\"\" 编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。 \"\"\" print(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序   #典型的错误读取方式 print(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值 #正确用法 print(a[-3:-1])  #等价于a[1:3]   #根据步长索引 print(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]   # 当步长为负数的时候\n```\n\n\n\n\n\n\n\n\n\n\n\n",[[1541379616781,["gjx16@GJXAIOU",[[-1,8531," "],[1,8532,"\n"],[-1,8610," \"\"\" "],[1,8615,"\n\"\"\"\n"],[-1,8670," \"\"\" "],[1,8675,"\n\"\"\"\n"],[-1,8716,"   "],[1,8719,"\n\n"],[-1,8729," "],[1,8730,"\n"],[-1,8804," "],[1,8805,"\n"],[-1,8810," "],[1,8811,"\n"],[-1,8838,"   "],[1,8841,"\n\n"],[-1,8848," "],[1,8849,"\n"],[-1,8899,"   "],[1,8902,"\n\n"]],[8523,8913],[8910,8910]]],[1541380639289,["gjx16@GJXAIOU",[[1,8524,"索引\n\n#"],[-1,8532,""],[1,8718,"#切片\n"],[-1,8844,"索引"],[1,8846,"切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值"],[-1,8899,""],[1,8910,"，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])"]],[8523,8910],[9025,9025]]],[1541380647866,["gjx16@GJXAIOU",[[1,9041,"\n"]],[9029,9029],[9030,9030]]],[1541380654073,["gjx16@GJXAIOU",[[1,9030,"程序运行结果："]],[9030,9030],[9037,9037]]],[1541380671523,["gjx16@GJXAIOU",[[1,9049,"\n"]],[9037,9037],[9038,9038]]],[1541380672432,["gjx16@GJXAIOU",[[1,9038,"hello\n['2', 3]\nell\n2\n[]\n[3, 'hello']\n['2', 'hello']\n[3]\n[3]\n['hello']"]],[9038,9038],[9107,9107]]],[1541380675487,["gjx16@GJXAIOU",[[1,9038,"`"]],[9038,9038],[9039,9039]]],[1541380677384,["gjx16@GJXAIOU",[[1,9045,"`"]],[9045,9045],[9046,9046]]],[1541380678407,["gjx16@GJXAIOU",[[1,9055,"`"]],[9055,9055],[9056,9056]]],[1541380679474,["gjx16@GJXAIOU",[[1,9060,"`"]],[9060,9060],[9061,9061]]],[1541380680289,["gjx16@GJXAIOU",[[1,9063,"`"]],[9063,9063],[9064,9064]]],[1541380680943,["gjx16@GJXAIOU",[[1,9067,"`"]],[9067,9067],[9068,9068]]],[1541380681560,["gjx16@GJXAIOU",[[1,9082,"`"]],[9082,9082],[9083,9083]]],[1541380682692,["gjx16@GJXAIOU",[[-1,9082,"`"]],[9083,9083],[9082,9082]]],[1541380683967,["gjx16@GJXAIOU",[[1,9081,"`"]],[9081,9081],[9082,9082]]],[1541380685088,["gjx16@GJXAIOU",[[1,9097,"`"]],[9097,9097],[9098,9098]]],[1541380686032,["gjx16@GJXAIOU",[[1,9102,"`"]],[9102,9102],[9103,9103]]],[1541380687226,["gjx16@GJXAIOU",[[1,9107,"`"]],[9107,9107],[9108,9108]]],[1541380689800,["gjx16@GJXAIOU",[[1,9117,"`"]],[9117,9117],[9118,9118]]],[1541380690632,["gjx16@GJXAIOU",[[1,9106,"`"]],[9106,9106],[9107,9107]]],[1541380691072,["gjx16@GJXAIOU",[[1,9101,"`"]],[9101,9101],[9102,9102]]],[1541380693706,["gjx16@GJXAIOU",[[1,9096,"`"]],[9096,9096],[9097,9097]]],[1541380694417,["gjx16@GJXAIOU",[[1,9080,"`"]],[9080,9080],[9081,9081]]],[1541380694929,["gjx16@GJXAIOU",[[1,9066,"`"]],[9066,9066],[9067,9067]]],[1541380695414,["gjx16@GJXAIOU",[[1,9062,"`"]],[9062,9062],[9063,9063]]],[1541380696055,["gjx16@GJXAIOU",[[1,9059,"`"]],[9059,9059],[9060,9060]]],[1541380697465,["gjx16@GJXAIOU",[[1,9054,"`"]],[9054,9054],[9055,9055]]],[1541380698089,["gjx16@GJXAIOU",[[1,9044,"`"]],[9044,9044],[9045,9045]]],[1541380709070,["gjx16@GJXAIOU",[[1,9139,"\n"]],[9127,9127],[9128,9128]]],[1541380709217,["gjx16@GJXAIOU",[[1,9140,"\n"]],[9128,9128],[9129,9129]]],[1541380710642,["gjx16@GJXAIOU",[[1,9141,"\n"]],[9129,9129],[9130,9130]]],[1541380717430,["gjx16@GJXAIOU",[[1,9130,"### 1.7.3 m"]],[9130,9130],[9141,9141]]],[1541380718382,["gjx16@GJXAIOU",[[-1,9140,"m"]],[9141,9141],[9140,9140]]],[1541380721628,["gjx16@GJXAIOU",[[1,9140," fan"]],[9140,9140],[9144,9144]]],[1541380722484,["gjx16@GJXAIOU",[[-1,9141,"fan"]],[9144,9144],[9141,9141]]],[1541380726617,["gjx16@GJXAIOU",[[1,9141,"翻转"]],[9141,9141],[9143,9143]]],[1541380727293,["gjx16@GJXAIOU",[[-1,9141,"翻转"]],[9143,9143],[9141,9141]]],[1541380730453,["gjx16@GJXAIOU",[[1,9141,"反转"]],[9141,9141],[9143,9143]]],[1541380730767,["gjx16@GJXAIOU",[[1,9155,"\n"]],[9143,9143],[9144,9144]]],[1541380756681,["gjx16@GJXAIOU",[[-1,9155,"\n"]],[9144,9144],[9143,9143]]],[1541380758746,["gjx16@GJXAIOU",[[1,9143,"（）"]],[9143,9143],[9145,9145]]],[1541380771448,["gjx16@GJXAIOU",[[1,9144,"适用于列表以及字符串"]],[9144,9144],[9154,9154]]],[1541380773104,["gjx16@GJXAIOU",[[1,9167,"\n"]],[9155,9155],[9156,9156]]],[1541380777024,["gjx16@GJXAIOU",[[1,9156,"```"]],[9156,9156],[9159,9159]]],[1541380777070,["gjx16@GJXAIOU",[[1,9159,"language\n```\n"]],[9159,9159],[9159,9167]]],[1541380779937,["gjx16@GJXAIOU",[[-1,9159,"language"],[1,9167,"p"]],[9159,9167],[9160,9160]]],[1541380780881,["gjx16@GJXAIOU",[[1,9160,"ython"]],[9160,9160],[9165,9165]]],[1541380781635,["gjx16@GJXAIOU",[[1,9166,"\n"]],[9165,9165],[9166,9166]]],[1541381161102,["gjx16@GJXAIOU",[[1,9166,"lst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))"]],[9166,9166],[9360,9360]]],[1541381165867,["gjx16@GJXAIOU",[[1,9377,"\n"]],[9364,9364],[9365,9365]]],[1541381167250,["gjx16@GJXAIOU",[[1,9365,"cheng"]],[9365,9365],[9370,9370]]],[1541381168331,["gjx16@GJXAIOU",[[-1,9365,"cheng"]],[9370,9370],[9365,9365]]],[1541381172697,["gjx16@GJXAIOU",[[1,9365,"程序运行结果；"]],[9365,9365],[9372,9372]]],[1541381174007,["gjx16@GJXAIOU",[[-1,9371,"；"]],[9372,9372],[9371,9371]]],[1541381174761,["gjx16@GJXAIOU",[[1,9371,"："]],[9371,9371],[9372,9372]]],[1541381183640,["gjx16@GJXAIOU",[[1,9385,"\n"]],[9372,9372],[9373,9373]]],[1541381184160,["gjx16@GJXAIOU",[[1,9373,"[6, 5, 4, 3, 2, 1]\nnohtyp\n[1, 2, 3, 4, 5, 6]\npython\n['n', 'o', 'h', 't', 'y', 'p']\n[6, 5, 4, 3, 2, 1]"]],[9373,9373],[9474,9474]]],[1541381191767,["gjx16@GJXAIOU",[[1,9373,"·"]],[9373,9373],[9374,9374]]],[1541381192810,["gjx16@GJXAIOU",[[-1,9373,"·"]],[9374,9374],[9373,9373]]],[1541381193304,["gjx16@GJXAIOU",[[1,9373,"`"]],[9373,9373],[9374,9374]]],[1541381195334,["gjx16@GJXAIOU",[[1,9393,"`"]],[9393,9393],[9394,9394]]],[1541381196319,["gjx16@GJXAIOU",[[1,9401,"`"]],[9401,9401],[9402,9402]]],[1541381197111,["gjx16@GJXAIOU",[[1,9421,"`"]],[9421,9421],[9422,9422]]],[1541381198215,["gjx16@GJXAIOU",[[1,9429,"`"]],[9429,9429],[9430,9430]]],[1541381199081,["gjx16@GJXAIOU",[[1,9461,"`"]],[9461,9461],[9462,9462]]],[1541381202921,["gjx16@GJXAIOU",[[1,9480,"`"]],[9480,9480],[9481,9481]]],[1541381203807,["gjx16@GJXAIOU",[[1,9460,"`"]],[9460,9460],[9461,9461]]],[1541381204559,["gjx16@GJXAIOU",[[1,9428,"`"]],[9428,9428],[9429,9429]]],[1541381207343,["gjx16@GJXAIOU",[[1,9420,"`"]],[9420,9420],[9421,9421]]],[1541381207807,["gjx16@GJXAIOU",[[1,9400,"`"]],[9400,9400],[9401,9401]]],[1541381210831,["gjx16@GJXAIOU",[[1,9392,"`"]],[9392,9392],[9393,9393]]],[1541381232375,["gjx16@GJXAIOU",[[1,9499,"\n"]],[9488,9488],[9489,9489]]],[1541381232524,["gjx16@GJXAIOU",[[1,9500,"\n"]],[9489,9489],[9490,9490]]],[1541381246232,["gjx16@GJXAIOU",[[1,9490,"### 1.7.4 caozou"]],[9490,9490],[9506,9506]]],[1541381247896,["gjx16@GJXAIOU",[[-1,9500,"caozou"]],[9506,9506],[9500,9500]]],[1541381251862,["gjx16@GJXAIOU",[[1,9500,"操作列表"]],[9500,9500],[9504,9504]]],[1541381252681,["gjx16@GJXAIOU",[[1,9515,"\n"]],[9504,9504],[9505,9505]]],[1541381262062,["gjx16@GJXAIOU",[[1,9505,"- 基本操作"]],[9505,9505],[9511,9511]]],[1541381262882,["gjx16@GJXAIOU",[[1,9512,"- \n"]],[9511,9511],[9514,9514]]],[1541381265122,["gjx16@GJXAIOU",[[1,9512,"  "]],[9512,9512],[9514,9514]]],[1541381266095,["gjx16@GJXAIOU",[[1,9516," "]],[9515,9515],[9516,9516]]],[1541381274413,["gjx16@GJXAIOU",[[1,9516,"len()\n  -"]],[9516,9516],[9525,9525]]],[1541381274623,["gjx16@GJXAIOU",[[1,9526," "]],[9525,9525],[9526,9526]]],[1541381276526,["gjx16@GJXAIOU",[[1,9526,"+"]],[9526,9526],[9527,9527]]],[1541381277494,["gjx16@GJXAIOU",[[1,9528," "]],[9527,9527],[9528,9528]]],[1541381278548,["gjx16@GJXAIOU",[[-1,9526,"+ "]],[9528,9528],[9526,9526]]],[1541381280368,["gjx16@GJXAIOU",[[1,9526,"``"]],[9526,9526],[9528,9528]]],[1541381282607,["gjx16@GJXAIOU",[[1,9527,"+"]],[9527,9527],[9528,9528]]],[1541381285742,["gjx16@GJXAIOU",[[1,9521,"`"]],[9521,9521],[9522,9522]]],[1541381287526,["gjx16@GJXAIOU",[[1,9516,"`"]],[9516,9516],[9517,9517]]],[1541381291095,["gjx16@GJXAIOU",[[1,9523,"  f"]],[9523,9523],[9526,9526]]],[1541381291664,["gjx16@GJXAIOU",[[-1,9525,"f"]],[9526,9526],[9525,9525]]],[1541381304719,["gjx16@GJXAIOU",[[1,9530,"\n  - "]],[9525,9525],[9530,9530]]],[1541381306130,["gjx16@GJXAIOU",[[-1,9528,"- "]],[9530,9530],[9528,9528]]],[1541381308015,["gjx16@GJXAIOU",[[1,9528,"·"]],[9528,9528],[9529,9529]]],[1541381309884,["gjx16@GJXAIOU",[[-1,9526,"  ·"]],[9529,9529],[9526,9526]]],[1541381311890,["gjx16@GJXAIOU",[[1,9526,"```"]],[9526,9526],[9529,9529]]],[1541381311936,["gjx16@GJXAIOU",[[1,9529,"language\n```\n"]],[9529,9529],[9529,9537]]],[1541381313615,["gjx16@GJXAIOU",[[-1,9529,"language"],[1,9537,"p"]],[9529,9537],[9530,9530]]],[1541381314505,["gjx16@GJXAIOU",[[1,9530,"ython"]],[9530,9530],[9535,9535]]],[1541381315228,["gjx16@GJXAIOU",[[1,9536,"\n"]],[9535,9535],[9536,9536]]],[1541381459128,["gjx16@GJXAIOU",[[1,9536,"lst= [\"\""]],[9536,9536],[9544,9544]]],[1541381461312,["gjx16@GJXAIOU",[[1,9543,"i"]],[9543,9543],[9544,9544]]],[1541381465064,["gjx16@GJXAIOU",[[1,9545,",\"\""]],[9545,9545],[9548,9548]]],[1541381467373,["gjx16@GJXAIOU",[[1,9547,"python"]],[9547,9547],[9553,9553]]],[1541381470384,["gjx16@GJXAIOU",[[1,9554,",\"\""]],[9554,9554],[9557,9557]]],[1541381472872,["gjx16@GJXAIOU",[[1,9556,"lalla"]],[9556,9556],[9561,9561]]],[1541381475797,["gjx16@GJXAIOU",[[1,9562,"]"]],[9562,9562],[9563,9563]]],[1541381476547,["gjx16@GJXAIOU",[[1,9564,"\n"]],[9563,9563],[9564,9564]]],[1541381479828,["gjx16@GJXAIOU",[[1,9564,"print()"]],[9564,9564],[9571,9571]]],[1541381483173,["gjx16@GJXAIOU",[[1,9570,"len("]],[9570,9570],[9574,9574]]],[1541381483254,["gjx16@GJXAIOU",[[1,9575,")"]],[9574,9574],[9575,9575]]],[1541381487279,["gjx16@GJXAIOU",[[1,9574,"lst"]],[9574,9574],[9577,9577]]],[1541381518508,["gjx16@GJXAIOU",[[1,9585,"\n"]],[9583,9583],[9584,9584]]],[1541381519774,["gjx16@GJXAIOU",[[1,9584,"cheng"]],[9584,9584],[9589,9589]]],[1541381521096,["gjx16@GJXAIOU",[[-1,9584,"cheng"]],[9589,9589],[9584,9584]]],[1541381528672,["gjx16@GJXAIOU",[[1,9584,"程序运行结果：``"]],[9584,9584],[9593,9593]]],[1541381529805,["gjx16@GJXAIOU",[[1,9592,"3"]],[9592,9592],[9593,9593]]],[1541381683987,["gjx16@GJXAIOU",[[1,9605,"  - \n"]],[9604,9604],[9609,9609]]],[1541381708493,["gjx16@GJXAIOU",[[1,9604,":"]],[9604,9604],[9605,9605]]],[1541381709704,["gjx16@GJXAIOU",[[1,9605,"lian"]],[9605,9605],[9609,9609]]],[1541381710673,["gjx16@GJXAIOU",[[-1,9605,"lian"]],[9609,9609],[9605,9605]]],[1541381717130,["gjx16@GJXAIOU",[[1,9605,"连接两个列表"]],[9605,9605],[9611,9611]]],[1541381724854,["gjx16@GJXAIOU",[[1,9616,"``"]],[9616,9616],[9618,9618]]],[1541381726560,["gjx16@GJXAIOU",[[1,9617,"*"]],[9617,9617],[9618,9618]]],[1541381731800,["gjx16@GJXAIOU",[[1,9619," :chong"]],[9619,9619],[9626,9626]]],[1541381733232,["gjx16@GJXAIOU",[[-1,9621,"chong"]],[9626,9626],[9621,9621]]],[1541381738167,["gjx16@GJXAIOU",[[1,9621,"重复序列圆度"]],[9621,9621],[9627,9627]]],[1541381752805,["gjx16@GJXAIOU",[[-1,9625,"圆度"]],[9627,9627],[9625,9625]]],[1541381755643,["gjx16@GJXAIOU",[[1,9625,"元素"]],[9625,9625],[9627,9627]]],[1541381758933,["gjx16@GJXAIOU",[[1,9628,"  - \n"]],[9627,9627],[9632,9632]]],[1541381772396,["gjx16@GJXAIOU",[[1,9632,"``"]],[9632,9632],[9634,9634]]],[1541381773957,["gjx16@GJXAIOU",[[1,9633,"in"]],[9633,9633],[9635,9635]]],[1541381782066,["gjx16@GJXAIOU",[[1,9636," :chazh"]],[9636,9636],[9643,9643]]],[1541381783153,["gjx16@GJXAIOU",[[-1,9638,"chazh"]],[9643,9643],[9638,9638]]],[1541381790895,["gjx16@GJXAIOU",[[1,9638,"判断元素师傅"]],[9638,9638],[9644,9644]]],[1541381792657,["gjx16@GJXAIOU",[[-1,9642,"师傅"]],[9644,9644],[9642,9642]]],[1541381797697,["gjx16@GJXAIOU",[[1,9642,"是否在序列中"]],[9642,9642],[9648,9648]]],[1541381799473,["gjx16@GJXAIOU",[[-1,9645,"序列中"]],[9648,9648],[9645,9645]]],[1541381817442,["gjx16@GJXAIOU",[[1,9645,"列表中（）"]],[9645,9645],[9650,9650]]],[1541381826067,["gjx16@GJXAIOU",[[1,9649,"完整性的元素，不是"]],[9649,9649],[9658,9658]]],[1541381830511,["gjx16@GJXAIOU",[[1,9658,"字符"]],[9658,9658],[9660,9660]]],[1541381832892,["gjx16@GJXAIOU",[[1,9662,"  - \n"]],[9661,9661],[9666,9666]]],[1541381834361,["gjx16@GJXAIOU",[[-1,9664,"- "]],[9666,9666],[9664,9664]]],[1541381837325,["gjx16@GJXAIOU",[[1,9664,"```"]],[9664,9664],[9667,9667]]],[1541381840259,["gjx16@GJXAIOU",[[-1,9662,"  ```"]],[9667,9667],[9662,9662]]],[1541381843316,["gjx16@GJXAIOU",[[1,9662,"```"]],[9662,9662],[9665,9665]]],[1541381843369,["gjx16@GJXAIOU",[[1,9665,"language\n```\n"]],[9665,9665],[9665,9673]]],[1541381843966,["gjx16@GJXAIOU",[[-1,9665,"language"],[1,9673,"p"]],[9665,9673],[9666,9666]]],[1541381848156,["gjx16@GJXAIOU",[[1,9666,"yh"]],[9666,9666],[9668,9668]]],[1541381849344,["gjx16@GJXAIOU",[[-1,9667,"h"]],[9668,9668],[9667,9667]]],[1541381850444,["gjx16@GJXAIOU",[[1,9667,"thon"]],[9667,9667],[9671,9671]]],[1541381851353,["gjx16@GJXAIOU",[[1,9672,"\n"]],[9671,9671],[9672,9672]]],[1541381947706,["gjx16@GJXAIOU",[[1,9672,"lst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)"]],[9672,9672],[9741,9741]]],[1541381954218,["gjx16@GJXAIOU",[[1,9757,"\n"]],[9745,9745],[9746,9746]]],[1541381955423,["gjx16@GJXAIOU",[[1,9746,"cheng"]],[9746,9746],[9751,9751]]],[1541381956948,["gjx16@GJXAIOU",[[-1,9746,"cheng"]],[9751,9751],[9746,9746]]],[1541381963399,["gjx16@GJXAIOU",[[1,9746,"程序运行结果：``"]],[9746,9746],[9755,9755]]],[1541381964689,["gjx16@GJXAIOU",[[1,9754,"True\nFalse"]],[9754,9754],[9764,9764]]],[1541381967940,["gjx16@GJXAIOU",[[1,9753,"\n"]],[9753,9753],[9754,9754]]],[1541381970125,["gjx16@GJXAIOU",[[1,9759,"`"]],[9759,9759],[9760,9760]]],[1541381972024,["gjx16@GJXAIOU",[[1,9761,"`"]],[9761,9761],[9762,9762]]],[1541381975378,["gjx16@GJXAIOU",[[1,9780,"\n"]],[9768,9768],[9769,9769]]],[1541381992427,["gjx16@GJXAIOU",[[1,9781,"\n"]],[9769,9769],[9770,9770]]],[1541382000775,["gjx16@GJXAIOU",[[1,9770,"  - ··"]],[9770,9770],[9776,9776]]],[1541382001736,["gjx16@GJXAIOU",[[-1,9774,"··"]],[9776,9776],[9774,9774]]],[1541382002314,["gjx16@GJXAIOU",[[-1,9770,"  - "]],[9774,9774],[9771,9771]]],[1541382003587,["gjx16@GJXAIOU",[[-1,9781,"\n"]],[9771,9771],[9770,9770]]],[1541382006463,["gjx16@GJXAIOU",[[1,9770,"- ·"]],[9770,9770],[9773,9773]]],[1541382007293,["gjx16@GJXAIOU",[[-1,9772,"·"]],[9773,9773],[9772,9772]]],[1541382009039,["gjx16@GJXAIOU",[[1,9772,"``"]],[9772,9772],[9774,9774]]],[1541382012725,["gjx16@GJXAIOU",[[1,9773,"max()"]],[9773,9773],[9778,9778]]],[1541382017929,["gjx16@GJXAIOU",[[1,9779,"和···"]],[9779,9779],[9783,9783]]],[1541382018979,["gjx16@GJXAIOU",[[-1,9780,"···"]],[9783,9783],[9780,9780]]],[1541382020280,["gjx16@GJXAIOU",[[1,9780,"``"]],[9780,9780],[9782,9782]]],[1541382022985,["gjx16@GJXAIOU",[[1,9781,"min()"]],[9781,9781],[9786,9786]]],[1541382034001,["gjx16@GJXAIOU",[[1,9787,"寻找列表中"]],[9787,9787],[9792,9792]]],[1541382035840,["gjx16@GJXAIOU",[[1,9792,"醉倒"]],[9792,9792],[9794,9794]]],[1541382036849,["gjx16@GJXAIOU",[[-1,9791,"中醉倒"]],[9794,9794],[9791,9791]]],[1541382044832,["gjx16@GJXAIOU",[[1,9791,"中最大或者最小的元素"]],[9791,9791],[9801,9801]]],[1541382045939,["gjx16@GJXAIOU",[[1,9802,"- \n"]],[9801,9801],[9804,9804]]],[1541382047900,["gjx16@GJXAIOU",[[-1,9802,"- "]],[9804,9804],[9802,9802]]],[1541382049275,["gjx16@GJXAIOU",[[-1,9812,"\n"]],[9802,9802],[9801,9801]]],[1541382051097,["gjx16@GJXAIOU",[[1,9802,"- \n"]],[9801,9801],[9804,9804]]],[1541382051905,["gjx16@GJXAIOU",[[-1,9802,"- "]],[9804,9804],[9802,9802]]],[1541382053248,["gjx16@GJXAIOU",[[-1,9812,"\n"]],[9802,9802],[9801,9801]]],[1541382054213,["gjx16@GJXAIOU",[[1,9802,"- \n"]],[9801,9801],[9804,9804]]],[1541382055280,["gjx16@GJXAIOU",[[-1,9802,"- "]],[9804,9804],[9802,9802]]],[1541382057813,["gjx16@GJXAIOU",[[1,9770,"  "]],[9770,9770],[9772,9772]]],[1541382060318,["gjx16@GJXAIOU",[[1,9804,"··"]],[9804,9804],[9806,9806]]],[1541382061164,["gjx16@GJXAIOU",[[-1,9804,"··"]],[9806,9806],[9804,9804]]],[1541382062432,["gjx16@GJXAIOU",[[1,9804,"···"]],[9804,9804],[9807,9807]]],[1541382063217,["gjx16@GJXAIOU",[[-1,9804,"···"]],[9807,9807],[9804,9804]]],[1541382064593,["gjx16@GJXAIOU",[[1,9804,"```"]],[9804,9804],[9807,9807]]],[1541382064644,["gjx16@GJXAIOU",[[1,9807,"language\n```\n"]],[9807,9807],[9807,9815]]],[1541382066048,["gjx16@GJXAIOU",[[-1,9807,"language"],[1,9815,"p"]],[9807,9815],[9808,9808]]],[1541382066821,["gjx16@GJXAIOU",[[1,9808,"yton"]],[9808,9808],[9812,9812]]],[1541382068393,["gjx16@GJXAIOU",[[-1,9810,"on"]],[9812,9812],[9810,9810]]],[1541382069812,["gjx16@GJXAIOU",[[1,9810,"hon"]],[9810,9810],[9813,9813]]],[1541382423640,["gjx16@GJXAIOU",[[1,9829,"\n"]],[9817,9817],[9818,9818]]],[1541382426294,["gjx16@GJXAIOU",[[1,9818,"```"]],[9818,9818],[9821,9821]]],[1541382426347,["gjx16@GJXAIOU",[[1,9821,"language\n```\n"]],[9821,9821],[9821,9829]]],[1541382427840,["gjx16@GJXAIOU",[[-1,9818,"```language"]],[9821,9829],[9818,9818]]],[1541382430919,["gjx16@GJXAIOU",[[-1,9819,"```"]],[9822,9822],[9819,9819]]],[1541382436565,["gjx16@GJXAIOU",[[1,9819,"···python"]],[9819,9819],[9828,9828]]],[1541382437792,["gjx16@GJXAIOU",[[1,9841,"\n"]],[9828,9828],[9829,9829]]],[1541382439220,["gjx16@GJXAIOU",[[1,9829,"···"]],[9829,9829],[9832,9832]]],[1541382811600,["gjx16@GJXAIOU",[[-1,9819,"···python\n···"]],[9819,9832],[9819,9819]]],[1541382815057,["gjx16@GJXAIOU",[[1,9814,"\n"]],[9813,9813],[9814,9814]]],[1541382868084,["gjx16@GJXAIOU",[[1,9814,"lst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))"]],[9814,9814],[9873,9873]]],[1541382870225,["gjx16@GJXAIOU",[[1,9892,"\n"]],[9877,9877],[9878,9878]]],[1541382872214,["gjx16@GJXAIOU",[[1,9878,"程序"]],[9878,9878],[9880,9880]]],[1541382882293,["gjx16@GJXAIOU",[[1,9884,"：python\ni"]],[9884,9884],[9893,9893]]],[1541382888628,["gjx16@GJXAIOU",[[1,9885,"`"]],[9885,9885],[9886,9886]]],[1541382891821,["gjx16@GJXAIOU",[[1,9893,"`"]],[9893,9893],[9894,9894]]],[1541382893659,["gjx16@GJXAIOU",[[1,9895,"`"]],[9895,9895],[9896,9896]]],[1541382899186,["gjx16@GJXAIOU",[[1,9892,"`"]],[9892,9892],[9893,9893]]],[1541382903864,["gjx16@GJXAIOU",[[1,9885,"\n"]],[9885,9885],[9886,9886]]],[1541382905761,["gjx16@GJXAIOU",[[1,9913,"\n"]],[9898,9898],[9899,9899]]],[1541382921746,["gjx16@GJXAIOU",[[1,9914,"\n"]],[9899,9899],[9900,9900]]],[1541382921903,["gjx16@GJXAIOU",[[1,9915,"\n"]],[9900,9900],[9901,9901]]],[1541382924260,["gjx16@GJXAIOU",[[1,9901,"- xue"]],[9901,9901],[9906,9906]]],[1541382925109,["gjx16@GJXAIOU",[[-1,9903,"xue"]],[9906,9906],[9903,9903]]],[1541382933247,["gjx16@GJXAIOU",[[1,9903,"修改列表元素（）"]],[9903,9903],[9911,9911]]],[1541382994162,[null,[[-1,9880,"\n\n\n\n"],[1,9884,"运行结果"],[1,9911,"\n\n\n\n"]],[9880,9880],[9915,9915]]],[1541382994162,[null,[[1,9880,"\n\n\n\n"],[-1,9880,"运行结果"],[-1,9911,"\n\n\n\n"]],[9915,9915],[9880,9880]]],[1541382935991,["gjx16@GJXAIOU",[[1,9910,"休二改"]],[9910,9910],[9913,9913]]],[1541382937208,["gjx16@GJXAIOU",[[-1,9909,"（休二改"]],[9913,9913],[9909,9909]]],[1541382938885,["gjx16@GJXAIOU",[[1,9909,"修改"]],[9909,9909],[9911,9911]]],[1541382941322,["gjx16@GJXAIOU",[[-1,9909,"修改）"]],[9911,9911],[9909,9909]]],[1541382942222,["gjx16@GJXAIOU",[[1,9909,"（）"]],[9909,9909],[9911,9911]]],[1541382951593,["gjx16@GJXAIOU",[[1,9910,"修改和差啊如"]],[9910,9910],[9916,9916]]],[1541382953311,["gjx16@GJXAIOU",[[-1,9913,"差啊如"]],[9916,9916],[9913,9913]]],[1541382956753,["gjx16@GJXAIOU",[[1,9913,"插入"]],[9913,9913],[9915,9915]]],[1541382974667,["gjx16@GJXAIOU",[[-1,9913,"插入"]],[9915,9915],[9913,9913]]],[1541382977137,["gjx16@GJXAIOU",[[1,9913,"追加"]],[9913,9913],[9915,9915]]],[1541382981652,["gjx16@GJXAIOU",[[1,9917,"- \n"]],[9916,9916],[9919,9919]]],[1541382984449,["gjx16@GJXAIOU",[[-1,9917,"- "]],[9919,9919],[9917,9917]]],[1541383474165,[null,[[-1,9880,"\n\n\n\n"],[1,9884,"运行结果"],[1,9916,"\n\n\n\n"]],[9880,9880],[9920,9920]]],[1541383474165,[null,[[1,9880,"\n\n\n\n"],[-1,9880,"运行结果"],[-1,9916,"\n\n\n\n"]],[9920,9920],[9880,9880]]],[1541383429491,["gjx16@GJXAIOU",[[1,9917,"···"]],[9917,9917],[9920,9920]]],[1541383430655,["gjx16@GJXAIOU",[[-1,9917,"···"]],[9920,9920],[9917,9917]]],[1541383431126,["gjx16@GJXAIOU",[[-1,9931,"\n"]],[9917,9917],[9916,9916]]],[1541383432232,["gjx16@GJXAIOU",[[1,9917,"- \n"]],[9916,9916],[9919,9919]]],[1541383433136,["gjx16@GJXAIOU",[[-1,9917,"- "]],[9919,9919],[9917,9917]]],[1541383433566,["gjx16@GJXAIOU",[[-1,9931,"\n"]],[9917,9917],[9916,9916]]],[1541383434278,["gjx16@GJXAIOU",[[1,9917,"- \n"]],[9916,9916],[9919,9919]]],[1541383435152,["gjx16@GJXAIOU",[[-1,9917,"- "]],[9919,9919],[9917,9917]]],[1541383436708,["gjx16@GJXAIOU",[[1,9917,"```"]],[9917,9917],[9920,9920]]],[1541383436763,["gjx16@GJXAIOU",[[1,9920,"language\n```\n"]],[9920,9920],[9920,9928]]],[1541383438667,["gjx16@GJXAIOU",[[-1,9920,"language"],[1,9928,"p"]],[9920,9928],[9921,9921]]],[1541383439407,["gjx16@GJXAIOU",[[1,9921,"ython"]],[9921,9921],[9926,9926]]],[1541383440374,["gjx16@GJXAIOU",[[1,9927,"\n"]],[9926,9926],[9927,9927]]],[1541383441105,["gjx16@GJXAIOU",[[1,9927,"#修改元素   lst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\" #将第1个元素修改为“hello” print(lst)\n\n#追加元素 lst.append(\"hulala\")#在结尾追加元素,返回值为None,使用print(lst.append(\"hulala\")),结果为None print(lst)"]],[9927,9927],[10102,10102]]],[1541383444701,["gjx16@GJXAIOU",[[-1,9927,"#修改元素   lst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\" #将第1个元素修改为“hello” print(lst)\n\n#追加元素 lst.append(\"hulala\")#在结尾追加元素,返回值为None,使用print(lst.append(\"hulala\")),结果为None print(lst)"]],[10102,10102],[9927,9927]]],[1541383447498,["gjx16@GJXAIOU",[[1,9927,"#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,使用print(lst.append(\"hulala\")),结果为None\nprint(lst)"]],[9927,9927],[10102,10102]]],[1541383460403,["gjx16@GJXAIOU",[[1,10054,"zhijie"]],[10054,10054],[10060,10060]]],[1541383461550,["gjx16@GJXAIOU",[[-1,10054,"zhijie"]],[10060,10060],[10054,10054]]],[1541383463376,["gjx16@GJXAIOU",[[1,10054,"直接"]],[10054,10054],[10056,10056]]],[1541383465808,["gjx16@GJXAIOU",[[1,10124,"\n"]],[10108,10108],[10109,10109]]],[1541383534171,[null,[[-1,9880,"\n\n\n\n"],[1,9884,"运行结果"],[1,10108,"\n\n"]],[9880,9880],[10110,10110]]],[1541383534171,[null,[[1,9880,"\n\n\n\n"],[-1,9880,"运行结果"],[-1,10108,"\n\n"]],[10110,10110],[9880,9880]]],[1541383481622,["gjx16@GJXAIOU",[[1,10109,"程序运行结果；"]],[10109,10109],[10116,10116]]],[1541383482637,["gjx16@GJXAIOU",[[-1,10115,"；"]],[10116,10116],[10115,10115]]],[1541383483098,["gjx16@GJXAIOU",[[1,10115,"："]],[10115,10115],[10116,10116]]],[1541383484686,["gjx16@GJXAIOU",[[1,10132,"\n"]],[10116,10116],[10117,10117]]],[1541383485432,["gjx16@GJXAIOU",[[1,10117,"['i', 'hello', 'lalla']\n['i', 'hello', 'lalla', 'hulala']"]],[10117,10117],[10174,10174]]],[1541383492606,["gjx16@GJXAIOU",[[1,10117,"·"]],[10117,10117],[10118,10118]]],[1541383494201,["gjx16@GJXAIOU",[[-1,10117,"·"]],[10118,10118],[10117,10117]]],[1541383495861,["gjx16@GJXAIOU",[[1,10117,"`"]],[10117,10117],[10118,10118]]],[1541383497594,["gjx16@GJXAIOU",[[1,10142,"`"]],[10142,10142],[10143,10143]]],[1541383500797,["gjx16@GJXAIOU",[[1,10176,"`"]],[10176,10176],[10177,10177]]],[1541383501898,["gjx16@GJXAIOU",[[1,10141,"`"]],[10141,10141],[10142,10142]]],[1541383894175,[null,[[-1,9880,"\n\n\n\n"],[1,9884,"运行结果"],[1,10178,"\n\n"]],[9880,9880],[10180,10180]]],[1541383894175,[null,[[1,9880,"\n\n\n\n"],[-1,9880,"运行结果"],[-1,10178,"\n\n"]],[10180,10180],[9880,9880]]],[1541383891654,["gjx16@GJXAIOU",[[1,10194,"\n"]],[10178,10178],[10179,10179]]],[1541383954179,[null,[[-1,9880,"\n\n\n\n"],[1,9884,"运行结果"],[1,10178,"\n\n"]],[9880,9880],[10180,10180]]],[1541383954179,[null,[[1,9880,"\n\n\n\n"],[-1,9880,"运行结果"],[-1,10178,"\n\n"]],[10180,10180],[9880,9880]]],[1541383895878,["gjx16@GJXAIOU",[[1,10195,"\n"]],[10179,10179],[10180,10180]]],[1541383896096,["gjx16@GJXAIOU",[[1,10196,"\n"]],[10180,10180],[10181,10181]]],[1541383896252,["gjx16@GJXAIOU",[[1,10197,"\n"]],[10181,10181],[10182,10182]]],[1541383896450,["gjx16@GJXAIOU",[[1,10198,"\n"]],[10182,10182],[10183,10183]]],[1541383902635,["gjx16@GJXAIOU",[[1,10183,"###1.7.5"]],[10183,10183],[10191,10191]]],[1541383905666,["gjx16@GJXAIOU",[[1,10186," "]],[10186,10186],[10187,10187]]],[1541383910509,["gjx16@GJXAIOU",[[1,10192," chang"]],[10192,10192],[10198,10198]]],[1541383911613,["gjx16@GJXAIOU",[[-1,10193,"chang"]],[10198,10198],[10193,10193]]],[1541383918893,["gjx16@GJXAIOU",[[1,10193,"常见的列表函数"]],[10193,10193],[10200,10200]]]],null,"gjx16@GJXAIOU"],["e99eeb84-9e8f-4443-b319-cf991f250bbb",1541384189184,"# 第1章 基本对象类型\n\n浮点数的所有运算都要注意\n\n1.python可以自动处理大整数问题，不必担心溢出\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个对象在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n5.**对象有类型，变量无类型**\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 `**` 表示乘幂 ，等效于`pow()`函数，当然要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算到 数有没有浮点数==\n\n9、`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10、python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n12.针对python中的浮点数问题\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python from fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n\n## python中的标准库\n\n1.**常见的数学函数以及运算优先级**\n- 使用`math`\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 字符串\n\n1.字符串使用单引号或者双引号包裹，\n\n当字符串内部含有其中一种符号时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先`+`两边的对象给的数据类型必须一致 ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；`repr()`函数作用是返回一个字符串对象；[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续航，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()**返回的结果为字符串类型的对象\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU #coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \n ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \n print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s`\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\npython(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n#切片\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1541384135597,["gjx16@GJXAIOU",[[-1,10215,"\n"]],[10203,10203],[10202,10202]]],[1541384144538,["gjx16@GJXAIOU",[[1,10202,"- extend:"]],[10202,10202],[10211,10211]]],[1541384145717,["gjx16@GJXAIOU",[[-1,10210,":"]],[10211,10211],[10210,10210]]],[1541384162259,["gjx16@GJXAIOU",[[1,10210," ：将两个列表合并"]],[10210,10210],[10219,10219]]],[1541384164121,["gjx16@GJXAIOU",[[1,10220,"- \n"]],[10219,10219],[10222,10222]]],[1541384165903,["gjx16@GJXAIOU",[[-1,10220,"- "]],[10222,10222],[10220,10220]]],[1541384167605,["gjx16@GJXAIOU",[[-1,10232,"\n"]],[10220,10220],[10219,10219]]],[1541384180714,["gjx16@GJXAIOU",[[1,10219,"，a:b - >a+b :b"]],[10219,10219],[10233,10233]]],[1541384182592,["gjx16@GJXAIOU",[[1,10234,"- \n"]],[10233,10233],[10236,10236]]],[1541384183973,["gjx16@GJXAIOU",[[-1,10234,"- "]],[10236,10236],[10234,10234]]],[1541384186298,["gjx16@GJXAIOU",[[1,10234,"···"]],[10234,10234],[10237,10237]]],[1541384187166,["gjx16@GJXAIOU",[[-1,10234,"···"]],[10237,10237],[10234,10234]]],[1541384187316,["gjx16@GJXAIOU",[[-1,10246,"\n"]],[10234,10234],[10233,10233]]],[1541384192629,["gjx16@GJXAIOU",[[1,10234,"```"]],[10234,10234],[10237,10237]]],[1541384192682,["gjx16@GJXAIOU",[[1,10237,"language\n```\n"]],[10237,10237],[10237,10245]]],[1541384194688,["gjx16@GJXAIOU",[[-1,10237,"language"],[1,10245,"p"]],[10237,10245],[10238,10238]]],[1541384195472,["gjx16@GJXAIOU",[[1,10238,"uthon"]],[10238,10238],[10243,10243]]],[1541384199636,["gjx16@GJXAIOU",[[-1,10238,"u"]],[10239,10239],[10238,10238]]],[1541384200584,["gjx16@GJXAIOU",[[1,10238,"y"]],[10238,10238],[10239,10239]]],[1541384203317,["gjx16@GJXAIOU",[[1,10244,"\n"]],[10243,10243],[10244,10244]]],[1541384488128,[null,[[1,10261,"\n"]],[10261,10261],[10262,10262]]],[1541384488128,[null,[[-1,10261,"\n"]],[10262,10262],[10261,10261]]],[1541384446533,["gjx16@GJXAIOU",[[1,10244,"la = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none print(la)\nprint(lb)"]],[10244,10244],[10341,10341]]],[1541384448893,["gjx16@GJXAIOU",[[1,10359,"\n"]],[10345,10345],[10346,10346]]],[1541384450467,["gjx16@GJXAIOU",[[1,10346,"chen"]],[10346,10346],[10350,10350]]],[1541384451226,["gjx16@GJXAIOU",[[-1,10346,"chen"]],[10350,10350],[10346,10346]]],[1541384462061,["gjx16@GJXAIOU",[[1,10346,"程序运行结果："]],[10346,10346],[10353,10353]]],[1541384463390,["gjx16@GJXAIOU",[[1,10367,"\n"]],[10353,10353],[10354,10354]]],[1541384478780,["gjx16@GJXAIOU",[[1,10354,"None\n['lala', 'lblb', 1, 2, 3]\n[1, 2, 3]"]],[10354,10354],[10394,10394]]],[1541384481643,["gjx16@GJXAIOU",[[1,10354,"`"]],[10354,10354],[10355,10355]]],[1541384483539,["gjx16@GJXAIOU",[[1,10360,"`"]],[10360,10360],[10361,10361]]],[1541384484633,["gjx16@GJXAIOU",[[1,10387,"`"]],[10387,10387],[10388,10388]]],[1541384487499,["gjx16@GJXAIOU",[[1,10397,"`"]],[10397,10397],[10398,10398]]],[1541384548127,[null,[[1,10411,"\n"]],[10411,10411],[10412,10412]]],[1541384548127,[null,[[-1,10411,"\n"]],[10412,10412],[10411,10411]]],[1541384490257,["gjx16@GJXAIOU",[[1,10386,"`"]],[10386,10386],[10387,10387]]],[1541384491173,["gjx16@GJXAIOU",[[1,10359,"`"]],[10359,10359],[10360,10360]]],[1541384728133,[null,[[1,10413,"\n"]],[10413,10413],[10414,10414]]],[1541384728133,[null,[[-1,10413,"\n"]],[10414,10414],[10413,10413]]],[1541384699501,["gjx16@GJXAIOU",[[1,10414,"\n"]],[10400,10400],[10401,10401]]],[1541384700124,["gjx16@GJXAIOU",[[1,10415,"\n"]],[10401,10401],[10402,10402]]],[1541384701680,["gjx16@GJXAIOU",[[1,10402,"- "]],[10402,10402],[10404,10404]]],[1541384707702,["gjx16@GJXAIOU",[[-1,10402,"- "]],[10404,10404],[10402,10402]]],[1541384713988,["gjx16@GJXAIOU",[[1,10342,"\n"]],[10341,10341],[10342,10342]]],[1541384788144,[null,[[1,10416,"\n"]],[10416,10416],[10417,10417]]],[1541384788144,[null,[[-1,10416,"\n"]],[10417,10417],[10416,10416]]],[1541384734463,["gjx16@GJXAIOU",[[1,10322,"\n"]],[10322,10322],[10323,10323]]],[1541384737484,["gjx16@GJXAIOU",[[1,10344,"\n"]],[10343,10343],[10344,10344]]],[1541384742194,["gjx16@GJXAIOU",[[1,10344,"lc= \"\""]],[10344,10344],[10350,10350]]],[1541384747735,["gjx16@GJXAIOU",[[1,10349,"abcde"]],[10349,10349],[10354,10354]]],[1541384750988,["gjx16@GJXAIOU",[[1,10356,"\n"]],[10355,10355],[10356,10356]]],[1541384776699,["gjx16@GJXAIOU",[[1,10356,"la.extenf"]],[10356,10356],[10365,10365]]],[1541384777173,["gjx16@GJXAIOU",[[-1,10364,"f"]],[10365,10365],[10364,10364]]],[1541384780008,["gjx16@GJXAIOU",[[1,10364,"d()"]],[10364,10364],[10367,10367]]],[1541384784007,["gjx16@GJXAIOU",[[1,10366,"lc"]],[10366,10366],[10368,10368]]],[1541384848127,[null,[[1,10443,"\n"]],[10443,10443],[10444,10444]]],[1541384848127,[null,[[-1,10443,"\n"]],[10444,10444],[10443,10443]]],[1541384788364,["gjx16@GJXAIOU",[[1,10370,"\n"]],[10369,10369],[10370,10370]]],[1541384791605,["gjx16@GJXAIOU",[[1,10370,"print()"]],[10370,10370],[10377,10377]]],[1541384793507,["gjx16@GJXAIOU",[[1,10376,"la"]],[10376,10376],[10378,10378]]],[1541384908153,[null,[[1,10453,"\n"]],[10453,10453],[10454,10454]]],[1541384908153,[null,[[-1,10453,"\n"]],[10454,10454],[10453,10453]]],[1541384873307,["gjx16@GJXAIOU",[[-1,10321," "],[1,10355,"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加"]],[10244,10379],[10415,10415]]],[1541384886468,["gjx16@GJXAIOU",[[1,10490,"\n"]],[10474,10474],[10475,10475]]],[1541384888752,["gjx16@GJXAIOU",[[1,10475,"['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`"]],[10475,10475],[10526,10526]]],[1541384893386,["gjx16@GJXAIOU",[[1,10475,"`"]],[10475,10475],[10476,10476]]],[1541384895261,["gjx16@GJXAIOU",[[1,10543,"\n"]],[10528,10528],[10529,10529]]],[1541384895440,["gjx16@GJXAIOU",[[1,10544,"\n"]],[10529,10529],[10530,10530]]],[1541384901650,["gjx16@GJXAIOU",[[1,10233,",can"]],[10233,10233],[10237,10237]]],[1541384902323,["gjx16@GJXAIOU",[[-1,10234,"can"]],[10237,10237],[10234,10234]]],[1541384905820,["gjx16@GJXAIOU",[[1,10234,"参数可以是"]],[10234,10234],[10239,10239]]],[1541384968132,[null,[[1,10550,"\n"]],[10550,10550],[10551,10551]]],[1541384968132,[null,[[-1,10550,"\n"]],[10551,10551],[10550,10550]]],[1541384923157,["gjx16@GJXAIOU",[[1,10239,"列表或者字符串，但是如果为数值型就会包旭哦"]],[10239,10239],[10260,10260]]],[1541384924197,["gjx16@GJXAIOU",[[-1,10256,"会包旭哦"]],[10260,10260],[10256,10256]]],[1541384928734,["gjx16@GJXAIOU",[[1,10256,"会报错"]],[10256,10256],[10259,10259]]],[1541385028145,[null,[[1,10570,"\n"]],[10570,10570],[10571,10571]]],[1541385028145,[null,[[-1,10570,"\n"]],[10571,10571],[10570,10570]]],[1541385020053,["gjx16@GJXAIOU",[[1,10260,"- \n"]],[10259,10259],[10262,10262]]],[1541385020902,["gjx16@GJXAIOU",[[-1,10260,"- "]],[10262,10262],[10260,10260]]],[1541385021404,["gjx16@GJXAIOU",[[-1,10260,"\n"]],[10260,10260],[10259,10259]]],[1541385022542,["gjx16@GJXAIOU",[[1,10260,"- \n"]],[10259,10259],[10262,10262]]],[1541385023380,["gjx16@GJXAIOU",[[-1,10260,"- "]],[10262,10262],[10260,10260]]],[1541385024597,["gjx16@GJXAIOU",[[1,10260,"  "]],[10260,10260],[10262,10262]]],[1541385088151,[null,[[1,10573,"\n"]],[10573,10573],[10574,10574]]],[1541385088151,[null,[[-1,10573,"\n"]],[10574,10574],[10573,10573]]],[1541385032643,["gjx16@GJXAIOU",[[1,10262,"extend的参数鼻祖"]],[10262,10262],[10273,10273]]],[1541385033885,["gjx16@GJXAIOU",[[-1,10271,"鼻祖"]],[10273,10273],[10271,10271]]],[1541385048694,["gjx16@GJXAIOU",[[1,10271,"必须为iterable()"]],[10271,10271],[10284,10284]]],[1541385056696,["gjx16@GJXAIOU",[[1,10283,"kedi"]],[10283,10283],[10287,10287]]],[1541385058166,["gjx16@GJXAIOU",[[-1,10283,"kedi"]],[10287,10287],[10283,10283]]],[1541385076863,["gjx16@GJXAIOU",[[1,10283,"可迭代的（）"]],[10283,10283],[10289,10289]]],[1541385083533,["gjx16@GJXAIOU",[[1,10288,"可以重复反馈"]],[10288,10288],[10294,10294]]],[1541385148153,[null,[[1,10607,"\n"]],[10607,10607],[10608,10608]]],[1541385148153,[null,[[-1,10607,"\n"]],[10608,10608],[10607,10607]]],[1541385104997,["gjx16@GJXAIOU",[[1,10295,"\n  "]],[10295,10295],[10298,10298]]],[1541385107002,["gjx16@GJXAIOU",[[-1,10296,"  "]],[10298,10298],[10296,10296]]],[1541385107486,["gjx16@GJXAIOU",[[-1,10295,"\n"]],[10296,10296],[10295,10295]]],[1541385109860,["gjx16@GJXAIOU",[[1,10297,"  \n"]],[10296,10296],[10299,10299]]],[1541385117735,["gjx16@GJXAIOU",[[1,10299,"使用``"]],[10299,10299],[10303,10303]]],[1541385128236,["gjx16@GJXAIOU",[[1,10302,"hasattr()"]],[10302,10302],[10311,10311]]],[1541385133122,["gjx16@GJXAIOU",[[1,10312,"pan"]],[10312,10312],[10315,10315]]],[1541385133946,["gjx16@GJXAIOU",[[-1,10312,"pan"]],[10315,10315],[10312,10312]]],[1541385141940,["gjx16@GJXAIOU",[[1,10312,"判断是否可迭代"]],[10312,10312],[10319,10319]]],[1541385144083,["gjx16@GJXAIOU",[[-1,10314,"是否可迭代"]],[10319,10319],[10314,10314]]],[1541385147898,["gjx16@GJXAIOU",[[1,10314,"类型是否"]],[10314,10314],[10318,10318]]],[1541385208146,[null,[[1,10629,"\n"]],[10629,10629],[10630,10630]]],[1541385208146,[null,[[-1,10629,"\n"]],[10630,10630],[10629,10629]]],[1541385165026,["gjx16@GJXAIOU",[[1,10318,"可迭代，，"]],[10318,10318],[10323,10323]]],[1541385167843,["gjx16@GJXAIOU",[[-1,10321,"，，"]],[10323,10323],[10321,10321]]],[1541385186408,["gjx16@GJXAIOU",[[1,10321,"，判断本质是看类型中是否含有``"]],[10321,10321],[10337,10337]]],[1541385193942,["gjx16@GJXAIOU",[[1,10336,"_iter_()"]],[10336,10336],[10344,10344]]],[1541385196196,["gjx16@GJXAIOU",[[1,10345,"zhe"]],[10345,10345],[10348,10348]]],[1541385197380,["gjx16@GJXAIOU",[[-1,10345,"zhe"]],[10348,10348],[10345,10345]]],[1541385206739,["gjx16@GJXAIOU",[[1,10345,"这个方法"]],[10345,10345],[10349,10349]]],[1541385268151,[null,[[1,10660,"\n"]],[10660,10660],[10661,10661]]],[1541385268151,[null,[[-1,10660,"\n"]],[10661,10661],[10660,10660]]],[1541385215017,["gjx16@GJXAIOU",[[1,10349,"，可以使用``"]],[10349,10349],[10356,10356]]],[1541385217596,["gjx16@GJXAIOU",[[1,10355,"dir"]],[10355,10355],[10358,10358]]],[1541385221749,["gjx16@GJXAIOU",[[1,10359,"查看"]],[10359,10359],[10361,10361]]],[1541385222199,["gjx16@GJXAIOU",[[1,10362,"  \n"]],[10361,10361],[10364,10364]]],[1541385225498,["gjx16@GJXAIOU",[[1,10364,"示例；"]],[10364,10364],[10367,10367]]],[1541385226284,["gjx16@GJXAIOU",[[1,10368,"  \n"]],[10367,10367],[10370,10370]]],[1541385231232,["gjx16@GJXAIOU",[[1,10370,"```python"]],[10370,10370],[10379,10379]]],[1541385231885,["gjx16@GJXAIOU",[[1,10380,"  \n"]],[10379,10379],[10382,10382]]],[1541385233387,["gjx16@GJXAIOU",[[1,10382,"```"]],[10382,10382],[10385,10385]]],[1541385236266,["gjx16@GJXAIOU",[[-1,10368,"  "]],[10370,10370],[10368,10368]]],[1541385237510,["gjx16@GJXAIOU",[[-1,10367,"\n"]],[10368,10368],[10367,10367]]],[1541385238755,["gjx16@GJXAIOU",[[1,10367,"\n  "]],[10367,10367],[10370,10370]]],[1541385240459,["gjx16@GJXAIOU",[[-1,10368,"  "]],[10370,10370],[10368,10368]]],[1541385243068,["gjx16@GJXAIOU",[[-1,10378,"  "]],[10380,10380],[10378,10378]]],[1541385245309,["gjx16@GJXAIOU",[[1,10378,"\n"]],[10378,10378],[10379,10379]]],[1541385246839,["gjx16@GJXAIOU",[[-1,10378,"\n"]],[10379,10379],[10378,10378]]],[1541385248421,["gjx16@GJXAIOU",[[-1,10377,"\n"]],[10378,10378],[10377,10377]]],[1541385252067,["gjx16@GJXAIOU",[[1,10378,"\n"]],[10378,10378],[10379,10379]]],[1541385260299,["gjx16@GJXAIOU",[[-1,10368,"```python`\n``"]],[10368,10381],[10368,10368]]],[1541385264182,["gjx16@GJXAIOU",[[1,10368,"```python"]],[10368,10368],[10377,10377]]],[1541385264796,["gjx16@GJXAIOU",[[1,10378,"\n"]],[10377,10377],[10378,10378]]],[1541385266351,["gjx16@GJXAIOU",[[1,10378,"```"]],[10378,10378],[10381,10381]]],[1541385267494,["gjx16@GJXAIOU",[[1,10382,"\n"]],[10381,10381],[10382,10382]]],[1541385328158,[null,[[1,10693,"\n"]],[10693,10693],[10694,10694]]],[1541385328158,[null,[[-1,10693,"\n"]],[10694,10694],[10693,10693]]],[1541385269852,["gjx16@GJXAIOU",[[1,10378,"\n"]],[10378,10378],[10379,10379]]],[1541385274362,["gjx16@GJXAIOU",[[1,10378,"lat"]],[10378,10378],[10381,10381]]],[1541385275669,["gjx16@GJXAIOU",[[-1,10379,"at"]],[10381,10381],[10379,10379]]],[1541385278466,["gjx16@GJXAIOU",[[1,10379,"st= ["]],[10379,10379],[10384,10384]]],[1541385279288,["gjx16@GJXAIOU",[[-1,10381,"= ["]],[10384,10384],[10381,10381]]],[1541385280566,["gjx16@GJXAIOU",[[1,10381," = "]],[10381,10381],[10384,10384]]],[1541387248189,[null,[[1,10700,"\n"]],[10700,10700],[10701,10701]]],[1541387248189,[null,[[-1,10700,"\n"]],[10701,10701],[10700,10700]]],[1541387227370,["gjx16@GJXAIOU",[[1,10701,"\n"]],[10683,10683],[10684,10684]]],[1541387308192,[null,[[1,10701,"\n"]],[10701,10701],[10702,10702]]],[1541387308192,[null,[[-1,10701,"\n"]],[10702,10702],[10701,10701]]],[1541387272735,["gjx16@GJXAIOU",[[1,10384,"[1,2]\nlat= 3 print(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False print(hasattr(lat,\"__iter__\"))"]],[10378,10384],[10524,10524]]],[1541387275966,["gjx16@GJXAIOU",[[-1,10384,"[1,2]\nlat= 3 print(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False print(hasattr(lat,\"__iter__\"))"]],[10524,10524],[10378,10384]]],[1541387280063,["gjx16@GJXAIOU",[[1,10384,"[1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n"]],[10378,10384],[10525,10525]]],[1541387283295,["gjx16@GJXAIOU",[[1,10531,"\n"]],[10529,10529],[10530,10530]]],[1541387284523,["gjx16@GJXAIOU",[[1,10530,"cheng"]],[10530,10530],[10535,10535]]],[1541387286230,["gjx16@GJXAIOU",[[-1,10530,"cheng"]],[10535,10535],[10530,10530]]],[1541387290422,["gjx16@GJXAIOU",[[1,10530,"程序运行结果；"]],[10530,10530],[10537,10537]]],[1541387291519,["gjx16@GJXAIOU",[[-1,10536,"；"]],[10537,10537],[10536,10536]]],[1541387291912,["gjx16@GJXAIOU",[[1,10536,"："]],[10536,10536],[10537,10537]]],[1541387299160,["gjx16@GJXAIOU",[[1,10538,"True\nFalse"]],[10538,10538],[10548,10548]]],[1541387301637,["gjx16@GJXAIOU",[[1,10538,"`"]],[10538,10538],[10539,10539]]],[1541387303445,["gjx16@GJXAIOU",[[1,10544,"`"]],[10544,10544],[10545,10545]]],[1541387305246,["gjx16@GJXAIOU",[[1,10550,"`"]],[10550,10550],[10551,10551]]],[1541387305836,["gjx16@GJXAIOU",[[1,10543,"`"]],[10543,10543],[10544,10544]]],[1541387368193,[null,[[1,10864,"\n"]],[10864,10864],[10865,10865]]],[1541387368193,[null,[[-1,10864,"\n"]],[10865,10865],[10864,10864]]],[1541387308575,["gjx16@GJXAIOU",[[1,10553,"\n"]],[10552,10552],[10553,10553]]],[1541387341264,["gjx16@GJXAIOU",[[1,10641,",tontgs"]],[10641,10641],[10648,10648]]],[1541387342327,["gjx16@GJXAIOU",[[-1,10642,"tontgs"]],[10648,10648],[10642,10642]]],[1541387356767,["gjx16@GJXAIOU",[[1,10642,"同时拓展之后的内存位置变换了"]],[10642,10642],[10656,10656]]],[1541387365734,["gjx16@GJXAIOU",[[-1,10649,"内存位置变换了"]],[10656,10656],[10649,10649]]],[1541387428188,[null,[[1,10873,"\n"]],[10873,10873],[10874,10874]]],[1541387428188,[null,[[-1,10873,"\n"]],[10874,10874],[10873,10873]]],[1541387385572,["gjx16@GJXAIOU",[[1,10649,"内存位置仍然没有改变，原地修改"]],[10649,10649],[10664,10664]]],[1541387405199,["gjx16@GJXAIOU",[[1,10093," 同时进行的也是原地修改"]],[10093,10093],[10105,10105]]],[1541388088199,[null,[[1,10900,"\n"]],[10900,10900],[10901,10901]]],[1541388088199,[null,[[-1,10900,"\n"]],[10901,10901],[10900,10900]]],[1541388080014,["gjx16@GJXAIOU",[[1,10884,"****"]],[10884,10884],[10886,10886]]],[1541388087844,["gjx16@GJXAIOU",[[1,10886,"append（）和"]],[10886,10886],[10895,10895]]],[1541388148211,[null,[[1,10913,"\n"]],[10913,10913],[10914,10914]]],[1541388148211,[null,[[-1,10913,"\n"]],[10914,10914],[10913,10913]]],[1541388100131,["gjx16@GJXAIOU",[[1,10895,"extend（）区别："]],[10895,10895],[10906,10906]]],[1541388101933,["gjx16@GJXAIOU",[[1,10925,"\n"]],[10908,10908],[10909,10909]]],[1541388113538,["gjx16@GJXAIOU",[[1,10909,"append直接将所有内政"]],[10909,10909],[10922,10922]]],[1541388114216,["gjx16@GJXAIOU",[[-1,10920,"内政"]],[10922,10922],[10920,10920]]],[1541388120506,["gjx16@GJXAIOU",[[1,10920,"内容整体导报"]],[10920,10920],[10926,10926]]],[1541388121765,["gjx16@GJXAIOU",[[-1,10924,"导报"]],[10926,10926],[10924,10924]]],[1541388130110,["gjx16@GJXAIOU",[[1,10924,"打包什么都不懂的"]],[10924,10924],[10932,10932]]],[1541388131806,["gjx16@GJXAIOU",[[-1,10930,"懂的"]],[10932,10932],[10930,10930]]],[1541388135010,["gjx16@GJXAIOU",[[1,10930,"动（）"]],[10930,10930],[10933,10933]]],[1541388138237,["gjx16@GJXAIOU",[[1,10932,"保罗"]],[10932,10932],[10934,10934]]],[1541388139092,["gjx16@GJXAIOU",[[-1,10932,"保罗"]],[10934,10934],[10932,10932]]],[1541388145278,["gjx16@GJXAIOU",[[1,10932,"包括列比哦啊"]],[10932,10932],[10938,10938]]],[1541388146582,["gjx16@GJXAIOU",[[-1,10934,"列比哦啊"]],[10938,10938],[10934,10934]]],[1541388208200,[null,[[1,10951,"\n"]],[10951,10951],[10952,10952]]],[1541388208200,[null,[[-1,10951,"\n"]],[10952,10952],[10951,10951]]],[1541388151835,["gjx16@GJXAIOU",[[1,10934,"列表的[]"]],[10934,10934],[10939,10939]]],[1541388156484,["gjx16@GJXAIOU",[[1,10940,"ji"]],[10940,10940],[10942,10942]]],[1541388157694,["gjx16@GJXAIOU",[[-1,10939,"）ji"]],[10942,10942],[10939,10939]]],[1541388159269,["gjx16@GJXAIOU",[[1,10939,"}"]],[10939,10939],[10940,10940]]],[1541388160221,["gjx16@GJXAIOU",[[-1,10939,"}"]],[10940,10940],[10939,10939]]],[1541388160734,["gjx16@GJXAIOU",[[1,10939,"]"]],[10939,10939],[10940,10940]]],[1541388161598,["gjx16@GJXAIOU",[[-1,10939,"]"]],[10940,10940],[10939,10939]]],[1541388163439,["gjx16@GJXAIOU",[[1,10939,")z"]],[10939,10939],[10941,10941]]],[1541388164189,["gjx16@GJXAIOU",[[-1,10940,"z"]],[10941,10941],[10940,10940]]],[1541388166246,["gjx16@GJXAIOU",[[1,10940,"直接"]],[10940,10940],[10942,10942]]],[1541388166848,["gjx16@GJXAIOU",[[-1,10940,"直接"]],[10942,10942],[10940,10940]]],[1541388171595,["gjx16@GJXAIOU",[[1,10940,"追加在后面"]],[10940,10940],[10945,10945]]],[1541388172105,["gjx16@GJXAIOU",[[1,10962,"\n"]],[10945,10945],[10946,10946]]],[1541388192720,["gjx16@GJXAIOU",[[1,10946,"extend将追加的内容先拆开（）"]],[10946,10946],[10963,10963]]],[1541388197408,["gjx16@GJXAIOU",[[1,10962,"针对列表"]],[10962,10962],[10966,10966]]],[1541388207672,["gjx16@GJXAIOU",[[1,10967,"，然后合并成一个列表"]],[10967,10967],[10977,10977]]],[1541388268201,[null,[[1,10993,"\n"]],[10993,10993],[10994,10994]]],[1541388268201,[null,[[-1,10993,"\n"]],[10994,10994],[10993,10993]]],[1541388257766,["gjx16@GJXAIOU",[[1,10994,"\n"]],[10979,10979],[10980,10980]]],[1541388265621,["gjx16@GJXAIOU",[[1,10980,"- count："]],[10980,10980],[10988,10988]]],[1541388328202,[null,[[1,11002,"\n"]],[11002,11002],[11003,11003]]],[1541388328202,[null,[[-1,11002,"\n"]],[11003,11003],[11002,11002]]],[1541388280835,["gjx16@GJXAIOU",[[1,10988,"查找列表中元素出现的次数"]],[10988,10988],[11000,11000]]],[1541388282030,["gjx16@GJXAIOU",[[1,11001,"- \n"]],[11000,11000],[11003,11003]]],[1541388298759,["gjx16@GJXAIOU",[[-1,11001,"- "]],[11003,11003],[11001,11001]]],[1541388301500,["gjx16@GJXAIOU",[[1,11001,"```"]],[11001,11001],[11004,11004]]],[1541388301555,["gjx16@GJXAIOU",[[1,11004,"language\n```\n"]],[11004,11004],[11004,11012]]],[1541388303187,["gjx16@GJXAIOU",[[-1,11004,"language"],[1,11012,"p"]],[11004,11012],[11005,11005]]],[1541388303946,["gjx16@GJXAIOU",[[1,11005,"yto"]],[11005,11005],[11008,11008]]],[1541388304734,["gjx16@GJXAIOU",[[-1,11007,"o"]],[11008,11008],[11007,11007]]],[1541388306018,["gjx16@GJXAIOU",[[1,11007,"hon"]],[11007,11007],[11010,11010]]],[1541388306927,["gjx16@GJXAIOU",[[1,11011,"\n"]],[11010,11010],[11011,11011]]],[1541388388206,[null,[[1,11030,"\n"]],[11030,11030],[11031,11031]]],[1541388388206,[null,[[-1,11030,"\n"]],[11031,11031],[11030,11030]]],[1541388385926,["gjx16@GJXAIOU",[[1,11011,"lst = [1,2,3,2,1,2,1,'a']\nprint(lst.count(1))\nprint(lst.count('a'))"]],[11011,11011],[11078,11078]]],[1541388448220,[null,[[1,11097,"\n"]],[11097,11097],[11098,11098]]],[1541388448220,[null,[[-1,11097,"\n"]],[11098,11098],[11097,11097]]],[1541388389863,["gjx16@GJXAIOU",[[1,11098,"\n"]],[11082,11082],[11083,11083]]],[1541388392651,["gjx16@GJXAIOU",[[1,11083,"c"]],[11083,11083],[11084,11084]]],[1541388393622,["gjx16@GJXAIOU",[[-1,11083,"c"]],[11084,11084],[11083,11083]]],[1541388400164,["gjx16@GJXAIOU",[[1,11083,"程序运行结果："]],[11083,11083],[11090,11090]]],[1541388402230,["gjx16@GJXAIOU",[[1,11106,"\n"]],[11090,11090],[11091,11091]]],[1541388508210,[null,[[1,11106,"\n"]],[11106,11106],[11107,11107]]],[1541388508210,[null,[[-1,11106,"\n"]],[11107,11107],[11106,11106]]],[1541388458205,["gjx16@GJXAIOU",[[1,11107,"\n"]],[11090,11090],[11091,11091]]],[1541388459029,["gjx16@GJXAIOU",[[1,11091,"3\n1"]],[11091,11091],[11094,11094]]],[1541388463939,["gjx16@GJXAIOU",[[1,11091,"·"]],[11091,11091],[11092,11092]]],[1541388464956,["gjx16@GJXAIOU",[[-1,11091,"·"]],[11092,11092],[11091,11091]]],[1541388465453,["gjx16@GJXAIOU",[[1,11091,"`"]],[11091,11091],[11092,11092]]],[1541388466717,["gjx16@GJXAIOU",[[1,11094,"`"]],[11094,11094],[11095,11095]]],[1541388467537,["gjx16@GJXAIOU",[[1,11096,"`"]],[11096,11096],[11097,11097]]],[1541388468012,["gjx16@GJXAIOU",[[1,11093,"`"]],[11093,11093],[11094,11094]]],[1541388469845,["gjx16@GJXAIOU",[[1,11115,"\n"]],[11099,11099],[11100,11100]]],[1541388485314,["gjx16@GJXAIOU",[[1,11100,"index"]],[11100,11100],[11105,11105]]],[1541388486671,["gjx16@GJXAIOU",[[-1,11100,"index"]],[11105,11105],[11100,11100]]],[1541388492752,["gjx16@GJXAIOU",[[1,11100,"- index :chazh"]],[11100,11100],[11114,11114]]],[1541388494092,["gjx16@GJXAIOU",[[-1,11109,"chazh"]],[11114,11114],[11109,11109]]],[1541388505143,["gjx16@GJXAIOU",[[1,11109,"查找列表中的字符（）"]],[11109,11109],[11119,11119]]],[1541388568215,[null,[[1,11134,"\n"]],[11134,11134],[11135,11135]]],[1541388568215,[null,[[-1,11134,"\n"]],[11135,11135],[11134,11134]]],[1541388509484,["gjx16@GJXAIOU",[[-1,11115,"字符（）"]],[11119,11119],[11115,11115]]],[1541388512654,["gjx16@GJXAIOU",[[1,11115,"元素（）"]],[11115,11115],[11119,11119]]],[1541388517133,["gjx16@GJXAIOU",[[1,11118,"必须是网站"]],[11118,11118],[11123,11123]]],[1541388517702,["gjx16@GJXAIOU",[[-1,11121,"网站"]],[11123,11123],[11121,11121]]],[1541388519959,["gjx16@GJXAIOU",[[1,11121,"完整的"]],[11121,11121],[11124,11124]]],[1541388530732,["gjx16@GJXAIOU",[[1,11126,"- \n"]],[11125,11125],[11128,11128]]],[1541388542681,["gjx16@GJXAIOU",[[-1,11126,"- "]],[11128,11128],[11126,11126]]],[1541388542884,["gjx16@GJXAIOU",[[-1,11141,"\n"]],[11126,11126],[11125,11125]]],[1541388545758,["gjx16@GJXAIOU",[[1,11125,"位置"]],[11125,11125],[11127,11127]]],[1541388558397,["gjx16@GJXAIOU",[[1,11125,"在列表中的"]],[11125,11125],[11130,11130]]],[1541388560467,["gjx16@GJXAIOU",[[1,11133,"- \n"]],[11132,11132],[11135,11135]]],[1541388561625,["gjx16@GJXAIOU",[[-1,11133,"- "]],[11135,11135],[11133,11133]]],[1541388563389,["gjx16@GJXAIOU",[[1,11133,"```"]],[11133,11133],[11136,11136]]],[1541388563449,["gjx16@GJXAIOU",[[1,11136,"language\n```\n"]],[11136,11136],[11136,11144]]],[1541388564836,["gjx16@GJXAIOU",[[-1,11136,"language"],[1,11144,"p"]],[11136,11144],[11137,11137]]],[1541388565670,["gjx16@GJXAIOU",[[1,11137,"ython"]],[11137,11137],[11142,11142]]],[1541388566547,["gjx16@GJXAIOU",[[1,11143,"\n"]],[11142,11142],[11143,11143]]],[1541388567702,["gjx16@GJXAIOU",[[1,11143,"lst = [1,2,3,2,1,2,1,'a']"]],[11143,11143],[11168,11168]]],[1541388569061,["gjx16@GJXAIOU",[[1,11169,"\n"]],[11168,11168],[11169,11169]]],[1541388571353,["gjx16@GJXAIOU",[[1,11169,"print()"]],[11169,11169],[11176,11176]]],[1541388572178,["gjx16@GJXAIOU",[[1,11175,"a"]],[11175,11175],[11176,11176]]],[1541388573152,["gjx16@GJXAIOU",[[-1,11175,"a"]],[11176,11176],[11175,11175]]],[1541388582291,["gjx16@GJXAIOU",[[1,11175,"lst.index("]],[11175,11175],[11185,11185]]],[1541388582419,["gjx16@GJXAIOU",[[1,11186,")"]],[11185,11185],[11186,11186]]],[1541388588678,["gjx16@GJXAIOU",[[1,11185,"1"]],[11185,11185],[11186,11186]]],[1541388590596,["gjx16@GJXAIOU",[[1,11189,"\n"]],[11188,11188],[11189,11189]]],[1541388592710,["gjx16@GJXAIOU",[[1,11189,"print()"]],[11189,11189],[11196,11196]]],[1541388594738,["gjx16@GJXAIOU",[[1,11195,"lstr"]],[11195,11195],[11199,11199]]],[1541388595494,["gjx16@GJXAIOU",[[-1,11198,"r"]],[11199,11199],[11198,11198]]],[1541388597354,["gjx16@GJXAIOU",[[1,11198,".inse"]],[11198,11198],[11203,11203]]],[1541388598080,["gjx16@GJXAIOU",[[-1,11201,"se"]],[11203,11203],[11201,11201]]],[1541388598708,["gjx16@GJXAIOU",[[1,11201,"dec"]],[11201,11201],[11204,11204]]],[1541388599364,["gjx16@GJXAIOU",[[-1,11203,"c"]],[11204,11204],[11203,11203]]],[1541388599481,["gjx16@GJXAIOU",[[1,11203,"x"]],[11203,11203],[11204,11204]]],[1541388600716,["gjx16@GJXAIOU",[[1,11205,")"]],[11204,11204],[11205,11205]]],[1541388601809,["gjx16@GJXAIOU",[[-1,11205,")"]],[11205,11205],[11204,11204]]],[1541388602228,["gjx16@GJXAIOU",[[1,11204,"("]],[11204,11204],[11205,11205]]],[1541388602362,["gjx16@GJXAIOU",[[1,11206,")"]],[11205,11205],[11206,11206]]],[1541388606481,["gjx16@GJXAIOU",[[1,11205,"'a'"]],[11205,11205],[11208,11208]]],[1541388632316,["gjx16@GJXAIOU",[[1,11215,"c"]],[11215,11215],[11216,11216]]],[1541388632796,["gjx16@GJXAIOU",[[-1,11215,"c"]],[11216,11216],[11215,11215]]],[1541388639015,["gjx16@GJXAIOU",[[1,11215,"程序运行结果；"]],[11215,11215],[11222,11222]]],[1541388640041,["gjx16@GJXAIOU",[[-1,11221,"；"]],[11222,11222],[11221,11221]]],[1541388641917,["gjx16@GJXAIOU",[[1,11221,"：0\n7"]],[11221,11221],[11225,11225]]],[1541388645615,["gjx16@GJXAIOU",[[1,11222,"\n"]],[11222,11222],[11223,11223]]],[1541388647458,["gjx16@GJXAIOU",[[1,11223,"`"]],[11223,11223],[11224,11224]]],[1541388648521,["gjx16@GJXAIOU",[[1,11226,"`"]],[11226,11226],[11227,11227]]],[1541388649426,["gjx16@GJXAIOU",[[1,11228,"`"]],[11228,11228],[11229,11229]]],[1541388650054,["gjx16@GJXAIOU",[[1,11225,"`"]],[11225,11225],[11226,11226]]],[1541388722233,["gjx16@GJXAIOU",[[1,11246,"\n"]],[11230,11230],[11231,11231]]],[1541388737446,["gjx16@GJXAIOU",[[1,11129,"diyi"]],[11129,11129],[11133,11133]]],[1541388738828,["gjx16@GJXAIOU",[[-1,11129,"diyi"]],[11133,11133],[11129,11129]]],[1541388743105,["gjx16@GJXAIOU",[[1,11129,"第一次出现"]],[11129,11129],[11134,11134]]],[1541388743561,["gjx16@GJXAIOU",[[1,11135,"的"]],[11134,11134],[11135,11135]]],[1541388745861,["gjx16@GJXAIOU",[[-1,11132,"出现的"]],[11135,11135],[11132,11132]]],[1541388748625,["gjx16@GJXAIOU",[[1,11132,"出现"]],[11132,11132],[11134,11134]]],[1541388756496,["gjx16@GJXAIOU",[[1,11252,"\n"]],[11235,11235],[11236,11236]]],[1541388757112,["gjx16@GJXAIOU",[[1,11253,"\n"]],[11236,11236],[11237,11237]]],[1541388785707,["gjx16@GJXAIOU",[[1,11237,"- insert ：将元素填在"]],[11237,11237],[11252,11252]]],[1541388786412,["gjx16@GJXAIOU",[[-1,11250,"填在"]],[11252,11252],[11250,11250]]],[1541388804156,["gjx16@GJXAIOU",[[1,11250,"添加在列表中的任意位置：``"]],[11250,11250],[11264,11264]]],[1541388806563,["gjx16@GJXAIOU",[[1,11263,"lst"]],[11263,11263],[11266,11266]]],[1541388807540,["gjx16@GJXAIOU",[[-1,11264,"st"]],[11266,11266],[11264,11264]]],[1541388809893,["gjx16@GJXAIOU",[[1,11264,"ist()"]],[11264,11264],[11269,11269]]],[1541388823978,["gjx16@GJXAIOU",[[1,11268,"i,x"]],[11268,11268],[11271,11271]]],[1541388839691,["gjx16@GJXAIOU",[[1,11273,",其中i为先"]],[11273,11273],[11279,11279]]],[1541388841076,["gjx16@GJXAIOU",[[-1,11278,"先"]],[11279,11279],[11278,11278]]],[1541388862679,["gjx16@GJXAIOU",[[1,11278,"想插入的位置，X为插入的位置（）"]],[11278,11278],[11294,11294]]],[1541388864294,["gjx16@GJXAIOU",[[-1,11289,"的位置（）"]],[11294,11294],[11289,11289]]],[1541388866823,["gjx16@GJXAIOU",[[1,11289,"的圆度"]],[11289,11289],[11292,11292]]],[1541388867339,["gjx16@GJXAIOU",[[-1,11290,"圆度"]],[11292,11292],[11290,11290]]],[1541388873519,["gjx16@GJXAIOU",[[1,11290,"元素，该圆度"]],[11290,11290],[11296,11296]]],[1541388874282,["gjx16@GJXAIOU",[[-1,11294,"圆度"]],[11296,11296],[11294,11294]]],[1541388884175,["gjx16@GJXAIOU",[[1,11294,"元素插入位置之前"]],[11294,11294],[11302,11302]]],[1541392138792,["gjx16@GJXAIOU",[[1,11303,"···"]],[11303,11303],[11306,11306]]],[1541392140173,["gjx16@GJXAIOU",[[-1,11303,"···"]],[11306,11306],[11303,11303]]],[1541392141994,["gjx16@GJXAIOU",[[1,11303,"```"]],[11303,11303],[11306,11306]]],[1541392142054,["gjx16@GJXAIOU",[[1,11306,"language\n```\n"]],[11306,11306],[11306,11314]]],[1541392143421,["gjx16@GJXAIOU",[[-1,11306,"language"],[1,11314,"p"]],[11306,11314],[11307,11307]]],[1541392145050,["gjx16@GJXAIOU",[[1,11307,"yto"]],[11307,11307],[11310,11310]]],[1541392146029,["gjx16@GJXAIOU",[[-1,11309,"o"]],[11310,11310],[11309,11309]]],[1541392146989,["gjx16@GJXAIOU",[[1,11309,"hon"]],[11309,11309],[11312,11312]]],[1541392148354,["gjx16@GJXAIOU",[[1,11313,"\n"]],[11312,11312],[11313,11313]]],[1541392153410,["gjx16@GJXAIOU",[[1,11313,"lst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None print(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面 print(lst)"]],[11313,11313],[11461,11461]]],[1541392156045,["gjx16@GJXAIOU",[[-1,11313,"lst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None print(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面 print(lst)"]],[11461,11461],[11313,11313]]],[1541392158934,["gjx16@GJXAIOU",[[1,11313,"lst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n"]],[11313,11313],[11462,11462]]],[1541392222046,["gjx16@GJXAIOU",[[1,11483,"\n"]],[11466,11466],[11467,11467]]],[1541392223564,["gjx16@GJXAIOU",[[1,11467,"cheng"]],[11467,11467],[11472,11472]]],[1541392224613,["gjx16@GJXAIOU",[[-1,11467,"cheng"]],[11472,11472],[11467,11467]]],[1541392226564,["gjx16@GJXAIOU",[[1,11467,"程序"]],[11467,11467],[11469,11469]]],[1541392229968,["gjx16@GJXAIOU",[[1,11469,"运行结果为；"]],[11469,11469],[11475,11475]]],[1541392231369,["gjx16@GJXAIOU",[[-1,11474,"；"]],[11475,11475],[11474,11474]]],[1541392231875,["gjx16@GJXAIOU",[[1,11474,"："]],[11474,11474],[11475,11475]]],[1541392242638,["gjx16@GJXAIOU",[[1,11492,"\n"]],[11475,11475],[11476,11476]]],[1541392243453,["gjx16@GJXAIOU",[[1,11476,"[1, 2, 'lalala', 'a']\n[1, 2, 'lalala', 'a', 'end']"]],[11476,11476],[11526,11526]]],[1541392246147,["gjx16@GJXAIOU",[[1,11476,"·"]],[11476,11476],[11477,11477]]],[1541392247205,["gjx16@GJXAIOU",[[-1,11476,"·"]],[11477,11477],[11476,11476]]],[1541392247674,["gjx16@GJXAIOU",[[1,11476,"`"]],[11476,11476],[11477,11477]]],[1541392248690,["gjx16@GJXAIOU",[[1,11499,"`"]],[11499,11499],[11500,11500]]],[1541392253972,["gjx16@GJXAIOU",[[1,11528,"`"]],[11528,11528],[11529,11529]]],[1541392254379,["gjx16@GJXAIOU",[[1,11498,"`"]],[11498,11498],[11499,11499]]],[1541392257062,["gjx16@GJXAIOU",[[1,11547,"\n"]],[11531,11531],[11532,11532]]],[1541392259238,["gjx16@GJXAIOU",[[1,11548,"\n"]],[11532,11532],[11533,11533]]],[1541392279032,["gjx16@GJXAIOU",[[1,11533,"- remove 和pop实现删除列表中分"]],[11533,11533],[11554,11554]]],[1541392279717,["gjx16@GJXAIOU",[[-1,11553,"分"]],[11554,11554],[11553,11553]]],[1541392281902,["gjx16@GJXAIOU",[[1,11553,"的元素"]],[11553,11553],[11556,11556]]],[1541392338265,["gjx16@GJXAIOU",[[1,11557,"  - remove ："]],[11557,11557],[11569,11569]]],[1541392359779,["gjx16@GJXAIOU",[[1,11570,"  - \n"]],[11569,11569],[11574,11574]]],[1541392363253,["gjx16@GJXAIOU",[[-1,11570,"  - "]],[11574,11574],[11570,11570]]],[1541392365040,["gjx16@GJXAIOU",[[1,11570,"```"]],[11570,11570],[11573,11573]]],[1541392365106,["gjx16@GJXAIOU",[[1,11573,"language\n```\n"]],[11573,11573],[11573,11581]]],[1541392366300,["gjx16@GJXAIOU",[[-1,11573,"language"],[1,11581,"y"]],[11573,11581],[11574,11574]]],[1541392367004,["gjx16@GJXAIOU",[[1,11574,"thon"]],[11574,11574],[11578,11578]]],[1541392368046,["gjx16@GJXAIOU",[[-1,11573,"ython"]],[11578,11578],[11573,11573]]],[1541392370333,["gjx16@GJXAIOU",[[1,11573,"python"]],[11573,11573],[11579,11579]]],[1541392372371,["gjx16@GJXAIOU",[[1,11580,"\n"]],[11579,11579],[11580,11580]]],[1541392722976,["gjx16@GJXAIOU",[[1,11580,"#remove使用方式： # 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改 #如果删除的元素不在列表中，则会报错：X not in list   lst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中 lst.remove(\"hello\")#同样没有返回值， print(lst)"]],[11580,11580],[11776,11776]]],[1541392724802,["gjx16@GJXAIOU",[[-1,11580,"#remove使用方式： # 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改 #如果删除的元素不在列表中，则会报错：X not in list   lst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中 lst.remove(\"hello\")#同样没有返回值， print(lst)"]],[11776,11776],[11580,11580]]],[1541392727030,["gjx16@GJXAIOU",[[1,11580,"#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n"]],[11580,11580],[11776,11776]]],[1541392729831,["gjx16@GJXAIOU",[[1,11796,"\n"]],[11780,11780],[11781,11781]]],[1541392731289,["gjx16@GJXAIOU",[[1,11781,"cheng"]],[11781,11781],[11786,11786]]],[1541392732606,["gjx16@GJXAIOU",[[-1,11781,"cheng"]],[11786,11786],[11781,11781]]],[1541392736721,["gjx16@GJXAIOU",[[1,11781,"程序运行结果；"]],[11781,11781],[11788,11788]]],[1541392738021,["gjx16@GJXAIOU",[[-1,11787,"；"]],[11788,11788],[11787,11787]]],[1541392738895,["gjx16@GJXAIOU",[[1,11787,"："]],[11787,11787],[11788,11788]]],[1541392746327,["gjx16@GJXAIOU",[[1,11804,"\n"]],[11788,11788],[11789,11789]]],[1541392747949,["gjx16@GJXAIOU",[[1,11789,"！"]],[11789,11789],[11790,11790]]],[1541392748495,["gjx16@GJXAIOU",[[-1,11789,"！"]],[11790,11790],[11789,11789]]],[1541392749837,["gjx16@GJXAIOU",[[1,11789,"``"]],[11789,11789],[11791,11791]]],[1541392751729,["gjx16@GJXAIOU",[[1,11790,"True\n['python', 'lala', 1, 2]"]],[11790,11790],[11819,11819]]],[1541392754223,["gjx16@GJXAIOU",[[1,11794,"`"]],[11794,11794],[11795,11795]]],[1541392756604,["gjx16@GJXAIOU",[[1,11797,"`"]],[11797,11797],[11798,11798]]],[1541392757549,["gjx16@GJXAIOU",[[-1,11797,"`"]],[11798,11798],[11797,11797]]],[1541392758504,["gjx16@GJXAIOU",[[1,11796,"`"]],[11796,11796],[11797,11797]]],[1541392760247,["gjx16@GJXAIOU",[[1,11838,"\n"]],[11823,11823],[11824,11824]]],[1541392760437,["gjx16@GJXAIOU",[[1,11839,"\n"]],[11824,11824],[11825,11825]]],[1541392761804,["gjx16@GJXAIOU",[[1,11825,"`"]],[11825,11825],[11826,11826]]],[1541392762813,["gjx16@GJXAIOU",[[-1,11825,"`"]],[11826,11826],[11825,11825]]],[1541392767725,["gjx16@GJXAIOU",[[1,11825,"  - pop"]],[11825,11825],[11832,11832]]],[1541392779053,["gjx16@GJXAIOU",[[1,11832," :shi"]],[11832,11832],[11837,11837]]],[1541392780438,["gjx16@GJXAIOU",[[-1,11834,"shi"]],[11837,11837],[11834,11834]]],[1541392786613,["gjx16@GJXAIOU",[[1,11834,"使用方式: lie"]],[11834,11834],[11843,11843]]],[1541392787748,["gjx16@GJXAIOU",[[-1,11840,"lie"]],[11843,11843],[11840,11840]]],[1541392789015,["gjx16@GJXAIOU",[[1,11840,"``"]],[11840,11840],[11842,11842]]],[1541392794557,["gjx16@GJXAIOU",[[1,11841,"list.pop["]],[11841,11841],[11850,11850]]],[1541392795188,["gjx16@GJXAIOU",[[-1,11849,"["]],[11850,11850],[11849,11849]]],[1541392796059,["gjx16@GJXAIOU",[[1,11849,"()"]],[11849,11849],[11851,11851]]],[1541392798241,["gjx16@GJXAIOU",[[1,11850,"[]"]],[11850,11850],[11852,11852]]],[1541392801867,["gjx16@GJXAIOU",[[1,11851,"i"]],[11851,11851],[11852,11852]]],[1541392805904,["gjx16@GJXAIOU",[[1,11855," ,qi"]],[11855,11855],[11859,11859]]],[1541392806785,["gjx16@GJXAIOU",[[-1,11857,"qi"]],[11859,11859],[11857,11857]]],[1541392813560,["gjx16@GJXAIOU",[[1,11857,"其中iwei s"]],[11857,11857],[11865,11865]]],[1541392815062,["gjx16@GJXAIOU",[[-1,11860,"wei s"]],[11865,11865],[11860,11860]]],[1541392825751,["gjx16@GJXAIOU",[[1,11860,"为所要删除的元素的位置，"]],[11860,11860],[11872,11872]]],[1541392839152,["gjx16@GJXAIOU",[[1,11872,"，如果"]],[11872,11872],[11875,11875]]],[1541392841838,["gjx16@GJXAIOU",[[-1,11871,"，，如果"]],[11875,11875],[11871,11871]]],[1541392867053,["gjx16@GJXAIOU",[[1,11871,"，如果为空则表示删除最后一个，返回值为删除的元素"]],[11871,11871],[11895,11895]]],[1541392871599,["gjx16@GJXAIOU",[[1,11896,"  - \n"]],[11895,11895],[11900,11900]]],[1541392874612,["gjx16@GJXAIOU",[[-1,11896,"  - "]],[11900,11900],[11896,11896]]],[1541392876723,["gjx16@GJXAIOU",[[1,11896,"```"]],[11896,11896],[11899,11899]]],[1541392876827,["gjx16@GJXAIOU",[[1,11899,"language\n```\n"]],[11899,11899],[11899,11907]]],[1541392878348,["gjx16@GJXAIOU",[[-1,11899,"language"],[1,11907,"p"]],[11899,11907],[11900,11900]]],[1541392879262,["gjx16@GJXAIOU",[[1,11900,"ython"]],[11900,11900],[11905,11905]]],[1541392879990,["gjx16@GJXAIOU",[[1,11906,"\n"]],[11905,11905],[11906,11906]]],[1541393083965,["gjx16@GJXAIOU",[[1,11906,"lst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值 print(lst)"]],[11906,11906],[11992,11992]]],[1541393087342,["gjx16@GJXAIOU",[[-1,11906,"lst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值 print(lst)"]],[11992,11992],[11906,11906]]],[1541393089611,["gjx16@GJXAIOU",[[1,11906,"lst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n"]],[11906,11906],[11993,11993]]],[1541393092890,["gjx16@GJXAIOU",[[1,12013,"\n"]],[11997,11997],[11998,11998]]],[1541393094804,["gjx16@GJXAIOU",[[1,11998,"cheng"]],[11998,11998],[12003,12003]]],[1541393096559,["gjx16@GJXAIOU",[[-1,11998,"cheng"]],[12003,12003],[11998,11998]]],[1541393101353,["gjx16@GJXAIOU",[[1,11998,"程序运行结果："]],[11998,11998],[12005,12005]]],[1541393109238,["gjx16@GJXAIOU",[[1,12021,"\n"]],[12005,12005],[12006,12006]]],[1541393109761,["gjx16@GJXAIOU",[[1,12006,"hello\n['python', 'lala', 1, 2]"]],[12006,12006],[12036,12036]]],[1541393112772,["gjx16@GJXAIOU",[[1,12006,"`"]],[12006,12006],[12007,12007]]],[1541393116215,["gjx16@GJXAIOU",[[1,12012,"`"]],[12012,12012],[12013,12013]]],[1541393119205,["gjx16@GJXAIOU",[[1,12014,"`"]],[12014,12014],[12015,12015]]],[1541393123799,["gjx16@GJXAIOU",[[1,12039,"`"]],[12039,12039],[12040,12040]]],[1541393133248,["gjx16@GJXAIOU",[[1,11871,",shij"]],[11871,11871],[11876,11876]]],[1541393134110,["gjx16@GJXAIOU",[[-1,11872,"shij"]],[11876,11876],[11872,11872]]],[1541393140985,["gjx16@GJXAIOU",[[1,11872,"实际使用的时候没有[]"]],[11872,11872],[11883,11883]]],[1541393148174,["gjx16@GJXAIOU",[[1,12068,"\n"]],[12052,12052],[12053,12053]]],[1541393148376,["gjx16@GJXAIOU",[[1,12069,"\n"]],[12053,12053],[12054,12054]]],[1541393148509,["gjx16@GJXAIOU",[[1,12070,"\n"]],[12054,12054],[12055,12055]]],[1541393148744,["gjx16@GJXAIOU",[[1,12071,"\n"]],[12055,12055],[12056,12056]]],[1541393148882,["gjx16@GJXAIOU",[[1,12072,"\n"]],[12056,12056],[12057,12057]]],[1541393152622,["gjx16@GJXAIOU",[[1,12057,"- res"]],[12057,12057],[12062,12062]]],[1541393154301,["gjx16@GJXAIOU",[[-1,12061,"s"]],[12062,12062],[12061,12061]]],[1541393163821,["gjx16@GJXAIOU",[[1,12061,"verse :将列比哦啊"]],[12061,12061],[12073,12073]]],[1541393165104,["gjx16@GJXAIOU",[[-1,12069,"列比哦啊"]],[12073,12073],[12069,12069]]],[1541393166807,["gjx16@GJXAIOU",[[1,12069,"列比哦啊"]],[12069,12069],[12073,12073]]],[1541393168125,["gjx16@GJXAIOU",[[-1,12069,"列比哦啊"]],[12073,12073],[12069,12069]]],[1541393182973,["gjx16@GJXAIOU",[[1,12069,"列表的元素书序返回来，"]],[12069,12069],[12080,12080]]],[1541393187860,["gjx16@GJXAIOU",[[-1,12074,"书序"]],[12076,12076],[12074,12074]]],[1541393189745,["gjx16@GJXAIOU",[[1,12074,"顺序"]],[12074,12074],[12076,12076]]],[1541393204395,["gjx16@GJXAIOU",[[1,12080,"是原地反过来，没有返回值"]],[12080,12080],[12092,12092]]],[1541393213237,["gjx16@GJXAIOU",[[1,12093,"- \n"]],[12092,12092],[12095,12095]]],[1541393220580,["gjx16@GJXAIOU",[[1,12095,"reversed :"]],[12095,12095],[12105,12105]]],[1541393472381,["gjx16@GJXAIOU",[[1,12106,"- \n"]],[12105,12105],[12108,12108]]],[1541393474030,["gjx16@GJXAIOU",[[-1,12106,"- "]],[12108,12108],[12106,12106]]],[1541393475269,["gjx16@GJXAIOU",[[1,12106,"这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[12106,12106],[12640,12640]]],[1541393482746,["gjx16@GJXAIOU",[[-1,12106,"这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[12640,12640],[12106,12106]]],[1541393486123,["gjx16@GJXAIOU",[[1,12107,"这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[12107,12107],[12641,12641]]],[1541393489213,["gjx16@GJXAIOU",[[-1,12107,"这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[12641,12641],[12107,12107]]],[1541393506033,["gjx16@GJXAIOU",[[1,12108,"API\n这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n1\n2\n3\n4\n5\n6\n7\n8\n\n--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[12108,12108],[12663,12663]]],[1541393512187,["gjx16@GJXAIOU",[[-1,12516,"1\n2\n3\n4\n5\n6\n7\n8"]],[12516,12531],[12516,12516]]],[1541393521840,["gjx16@GJXAIOU",[[-1,12518,"--------------------- \n作者：JNingWei \n来源：CSDN \n原文：https://blog.csdn.net/JNingWei/article/details/78467012 \n版权声明：本文为博主原创文章，转载请附上博文链接！\n"]],[12518,12649],[12518,12518]]],[1541393522515,["gjx16@GJXAIOU",[[-1,12530,"\n"]],[12518,12518],[12517,12517]]],[1541393522939,["gjx16@GJXAIOU",[[-1,12529,"\n"]],[12517,12517],[12516,12516]]],[1541393691161,["gjx16@GJXAIOU",[[1,12092,",yuan"]],[12092,12092],[12097,12097]]],[1541393692780,["gjx16@GJXAIOU",[[-1,12093,"yuan"]],[12097,12097],[12093,12093]]],[1541393697028,["gjx16@GJXAIOU",[[1,12086,"()"]],[12086,12086],[12088,12088]]],[1541393699466,["gjx16@GJXAIOU",[[1,12087,"yuan"]],[12087,12087],[12091,12091]]],[1541393700486,["gjx16@GJXAIOU",[[-1,12087,"yuan"]],[12091,12091],[12087,12087]]],[1541393705652,["gjx16@GJXAIOU",[[1,12087,"原来列比哦啊"]],[12087,12087],[12093,12093]]],[1541393707380,["gjx16@GJXAIOU",[[-1,12089,"列比哦啊"]],[12093,12093],[12089,12089]]],[1541393717836,["gjx16@GJXAIOU",[[1,12089,"列表的值变化"]],[12089,12089],[12095,12095]]],[1541393726997,["gjx16@GJXAIOU",[[1,12116,"原来"]],[12116,12116],[12118,12118]]],[1541393728617,["gjx16@GJXAIOU",[[1,12118,"列比哦啊"]],[12118,12118],[12122,12122]]],[1541393730155,["gjx16@GJXAIOU",[[-1,12118,"列比哦啊"]],[12122,12122],[12118,12118]]],[1541393775302,["gjx16@GJXAIOU",[[1,12118,"列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()"]],[12118,12118],[12158,12158]]],[1541393787363,["gjx16@GJXAIOU",[[-1,12161,"API\n这两个函数都是 对list中元素 反向排序：\n\nlist.reverse()\n\n\n\nreversed(list)\n\n区别在于：\n\nAPI\t改变原list\t返回值\nlist.reverse()\t是\t无\nreversed(list)\t否\t有\nNote：\n\nreversed() 的返回值类型 并不是list，因此如果需要，要再套上一个list() 。\n实验代码\nimport copy\nL = ['x', 123, 'abc', 'z', 'xyz']\nL_copy = copy.copy(L)\n\nassert list(i for i in reversed(L)) == ['xyz', 'z', 'abc', 123, 'x'] and L == L_copy\n\nL.reverse()\nassert L == ['xyz', 'z', 'abc', 123, 'x'] and L != L_copy\n\n\n\n"]],[12161,12572],[12161,12161]]],[1541394077029,["gjx16@GJXAIOU",[[1,12159,"·"]],[12159,12159],[12160,12160]]],[1541394078147,["gjx16@GJXAIOU",[[-1,12159,"·"]],[12160,12160],[12159,12159]]],[1541394079255,["gjx16@GJXAIOU",[[1,12159,"```"]],[12159,12159],[12162,12162]]],[1541394079331,["gjx16@GJXAIOU",[[1,12162,"language\n```\n"]],[12162,12162],[12162,12170]]],[1541394080681,["gjx16@GJXAIOU",[[-1,12162,"language"],[1,12170,"p"]],[12162,12170],[12163,12163]]],[1541394081604,["gjx16@GJXAIOU",[[1,12163,"ython"]],[12163,12163],[12168,12168]]],[1541394082734,["gjx16@GJXAIOU",[[1,12169,"\n"]],[12168,12168],[12169,12169]]],[1541394083444,["gjx16@GJXAIOU",[[1,12169,"lst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse() lst.reverse()\nprint(lst)#原列表的值改变了   #reversed() print(reversed(lst))#返回值不是列表 print(list(reversed(lst)))#将机返回值转换为列表 print(lst)#再次打印列表，经过reversed之后的原列表没有变化"]],[12169,12169],[12368,12368]]],[1541394086075,["gjx16@GJXAIOU",[[-1,12169,"lst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse() lst.reverse()\nprint(lst)#原列表的值改变了   #reversed() print(reversed(lst))#返回值不是列表 print(list(reversed(lst)))#将机返回值转换为列表 print(lst)#再次打印列表，经过reversed之后的原列表没有变化"]],[12368,12368],[12169,12169]]],[1541394091376,["gjx16@GJXAIOU",[[1,12169,"lst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化"]],[12169,12169],[12367,12367]]],[1541394094742,["gjx16@GJXAIOU",[[1,12384,"\n"]],[12371,12371],[12372,12372]]],[1541394096114,["gjx16@GJXAIOU",[[1,12372,"cheng"]],[12372,12372],[12377,12377]]],[1541394097547,["gjx16@GJXAIOU",[[-1,12372,"cheng"]],[12377,12377],[12372,12372]]],[1541394101893,["gjx16@GJXAIOU",[[1,12372,"程序运行结果；"]],[12372,12372],[12379,12379]]],[1541394103122,["gjx16@GJXAIOU",[[-1,12378,"；"]],[12379,12379],[12378,12378]]],[1541394103702,["gjx16@GJXAIOU",[[1,12378,"；"]],[12378,12378],[12379,12379]]],[1541394110646,["gjx16@GJXAIOU",[[1,12392,"\n"]],[12379,12379],[12380,12380]]],[1541394113500,["gjx16@GJXAIOU",[[1,12380,"[2, 1, 'lala', 'hello', 'python']\n<list_reverseiterator object at 0x0000029BF3C09160>\n['python', 'hello', 'lala', 1, 2]\n[2, 1, 'lala', 'hello', 'python']`"]],[12380,12380],[12534,12534]]],[1541394114411,["gjx16@GJXAIOU",[[1,12499,"`"]],[12499,12499],[12500,12500]]],[1541394117572,["gjx16@GJXAIOU",[[1,12465,"`"]],[12465,12465],[12466,12466]]],[1541394118087,["gjx16@GJXAIOU",[[1,12413,"`"]],[12413,12413],[12414,12414]]],[1541394121890,["gjx16@GJXAIOU",[[1,12380,"`"]],[12380,12380],[12381,12381]]],[1541394122811,["gjx16@GJXAIOU",[[1,12416,"`"]],[12416,12416],[12417,12417]]],[1541394123493,["gjx16@GJXAIOU",[[1,12471,"`"]],[12471,12471],[12472,12472]]],[1541394124607,["gjx16@GJXAIOU",[[-1,12471,"`"]],[12472,12472],[12471,12471]]],[1541394125504,["gjx16@GJXAIOU",[[1,12470,"`"]],[12470,12470],[12471,12471]]],[1541394126532,["gjx16@GJXAIOU",[[1,12506,"`"]],[12506,12506],[12507,12507]]],[1541394128436,["gjx16@GJXAIOU",[[1,12554,"\n"]],[12542,12542],[12543,12543]]],[1541394167691,["gjx16@GJXAIOU",[[1,12555,"\n"]],[12543,12543],[12544,12544]]],[1541394167884,["gjx16@GJXAIOU",[[1,12556,"\n"]],[12544,12544],[12545,12545]]],[1541394189714,["gjx16@GJXAIOU",[[1,12545,"-sort "]],[12545,12545],[12551,12551]]],[1541394191203,["gjx16@GJXAIOU",[[-1,12545,"-sort "]],[12551,12551],[12545,12545]]],[1541394192611,["gjx16@GJXAIOU",[[-1,12556,"\n"]],[12545,12545],[12544,12544]]],[1541394193725,["gjx16@GJXAIOU",[[1,12556,"\n"]],[12544,12544],[12545,12545]]],[1541394199913,["gjx16@GJXAIOU",[[1,12545,"- sort :j"]],[12545,12545],[12554,12554]]],[1541394200491,["gjx16@GJXAIOU",[[-1,12553,"j"]],[12554,12554],[12553,12553]]],[1541394205918,["gjx16@GJXAIOU",[[1,12553,"对列表今次那个排序"]],[12553,12553],[12562,12562]]],[1541394207836,["gjx16@GJXAIOU",[[-1,12556,"今次那个排序"]],[12562,12562],[12556,12556]]],[1541394218046,["gjx16@GJXAIOU",[[1,12556,"进行排序"]],[12556,12556],[12560,12560]]],[1541394218596,["gjx16@GJXAIOU",[[1,12561,"- \n"]],[12560,12560],[12563,12563]]],[1541394227150,["gjx16@GJXAIOU",[[-1,12561,"- "]],[12563,12563],[12561,12561]]],[1541394227562,["gjx16@GJXAIOU",[[-1,12572,"\n"]],[12561,12561],[12560,12560]]],[1541394263837,["gjx16@GJXAIOU",[[1,12560,"，进行原地修改，没有返回值，默认为从小到大进行排序，也可以是指"]],[12560,12560],[12591,12591]]],[1541394264733,["gjx16@GJXAIOU",[[-1,12589,"是指"]],[12591,12591],[12589,12589]]],[1541394267446,["gjx16@GJXAIOU",[[1,12589,"设置"]],[12589,12589],[12591,12591]]],[1541394273567,["gjx16@GJXAIOU",[[1,12591,"关键字进行排序"]],[12591,12591],[12598,12598]]],[1541394274085,["gjx16@GJXAIOU",[[1,12599,"- \n"]],[12598,12598],[12601,12601]]],[1541394275163,["gjx16@GJXAIOU",[[-1,12599,"- "]],[12601,12601],[12599,12599]]],[1541394275659,["gjx16@GJXAIOU",[[-1,12610,"\n"]],[12599,12599],[12598,12598]]],[1541394277215,["gjx16@GJXAIOU",[[1,12599,"- \n"]],[12598,12598],[12601,12601]]],[1541394277846,["gjx16@GJXAIOU",[[-1,12599,"- "]],[12601,12601],[12599,12599]]],[1541394280961,["gjx16@GJXAIOU",[[1,12599,"```"]],[12599,12599],[12602,12602]]],[1541394281028,["gjx16@GJXAIOU",[[1,12602,"language\n```\n"]],[12602,12602],[12602,12610]]],[1541394281697,["gjx16@GJXAIOU",[[-1,12602,"language"],[1,12610,"p"]],[12602,12610],[12603,12603]]],[1541394282707,["gjx16@GJXAIOU",[[1,12603,"ython"]],[12603,12603],[12608,12608]]],[1541394283528,["gjx16@GJXAIOU",[[1,12609,"\n"]],[12608,12608],[12609,12609]]],[1541394637576,["gjx16@GJXAIOU",[[1,12609,"lst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序 lst.sort(reverse = True)#这里的True不能小写 print(lst)\n\n#按照某个关键词进行排序 lst.sort(key = len) #按照长度为关键字进行排序 print(lst)"]],[12609,12609],[12781,12781]]],[1541394642058,["gjx16@GJXAIOU",[[-1,12609,"lst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序 lst.sort(reverse = True)#这里的True不能小写 print(lst)\n\n#按照某个关键词进行排序 lst.sort(key = len) #按照长度为关键字进行排序 print(lst)"]],[12781,12781],[12609,12609]]],[1541394646723,["gjx16@GJXAIOU",[[1,12609,"lst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)"]],[12609,12609],[12781,12781]]],[1541394649949,["gjx16@GJXAIOU",[[1,12609,"\n"]],[12608,12608],[12609,12609]]],[1541394653748,["gjx16@GJXAIOU",[[1,12609,"#shiyoh"]],[12609,12609],[12616,12616]]],[1541394655481,["gjx16@GJXAIOU",[[-1,12610,"shiyoh"]],[12616,12616],[12610,12610]]],[1541394663000,["gjx16@GJXAIOU",[[1,12610,"使用sort*（"]],[12610,12610],[12618,12618]]],[1541394664278,["gjx16@GJXAIOU",[[-1,12616,"*（"]],[12618,12618],[12616,12616]]],[1541394684116,["gjx16@GJXAIOU",[[1,12616,"（）不能实现字符串与整数进行"]],[12616,12616],[12630,12630]]],[1541394693862,["gjx16@GJXAIOU",[[1,12630,"排序，只能各自排序"]],[12630,12630],[12639,12639]]],[1541394697803,["gjx16@GJXAIOU",[[1,12829,"\n"]],[12816,12816],[12817,12817]]],[1541394705222,["gjx16@GJXAIOU",[[1,12817,"程序运行结果；"]],[12817,12817],[12824,12824]]],[1541394706146,["gjx16@GJXAIOU",[[-1,12823,"；"]],[12824,12824],[12823,12823]]],[1541394707163,["gjx16@GJXAIOU",[[1,12823,"："]],[12823,12823],[12824,12824]]],[1541394708156,["gjx16@GJXAIOU",[[1,12837,"\n"]],[12824,12824],[12825,12825]]],[1541394717473,["gjx16@GJXAIOU",[[1,12825,"['hello', 'lala', 'python']\n['python', 'lala', 'hello']\n['lala', 'hello', 'python']`"]],[12825,12825],[12909,12909]]],[1541394718219,["gjx16@GJXAIOU",[[1,12880,"`"]],[12880,12880],[12881,12881]]],[1541394718661,["gjx16@GJXAIOU",[[1,12852,"`"]],[12852,12852],[12853,12853]]],[1541394721846,["gjx16@GJXAIOU",[[1,12825,"`"]],[12825,12825],[12826,12826]]],[1541394722881,["gjx16@GJXAIOU",[[1,12855,"`"]],[12855,12855],[12856,12856]]],[1541394723777,["gjx16@GJXAIOU",[[1,12885,"`"]],[12885,12885],[12886,12886]]],[1541394725395,["gjx16@GJXAIOU",[[1,12927,"\n"]],[12915,12915],[12916,12916]]],[1541394725535,["gjx16@GJXAIOU",[[1,12928,"\n"]],[12916,12916],[12917,12917]]],[1541394973314,["gjx16@GJXAIOU",[[1,12917,"- sord"]],[12917,12917],[12923,12923]]],[1541394974177,["gjx16@GJXAIOU",[[-1,12922,"d"]],[12923,12923],[12922,12922]]],[1541394974841,["gjx16@GJXAIOU",[[1,12922,"e"]],[12922,12922],[12923,12923]]],[1541394975393,["gjx16@GJXAIOU",[[-1,12922,"e"]],[12923,12923],[12922,12922]]],[1541394976138,["gjx16@GJXAIOU",[[1,12922,"tde"]],[12922,12922],[12925,12925]]],[1541394976543,["gjx16@GJXAIOU",[[-1,12923,"de"]],[12925,12925],[12923,12923]]],[1541394980801,["gjx16@GJXAIOU",[[1,12923,"ed :chan"]],[12923,12923],[12931,12931]]],[1541394981937,["gjx16@GJXAIOU",[[-1,12927,"chan"]],[12931,12931],[12927,12927]]],[1541394987600,["gjx16@GJXAIOU",[[1,12927,"产生新的列表，"]],[12927,12927],[12934,12934]]],[1541395000772,["gjx16@GJXAIOU",[[1,12934,"有返回值，可以设置从左到右挥着"]],[12934,12934],[12949,12949]]],[1541395001438,["gjx16@GJXAIOU",[[-1,12947,"挥着"]],[12949,12949],[12947,12947]]],[1541395012388,["gjx16@GJXAIOU",[[1,12947,"或者从右到左排序"]],[12947,12947],[12955,12955]]],[1541395012971,["gjx16@GJXAIOU",[[1,12956,"- \n"]],[12955,12955],[12958,12958]]],[1541395014741,["gjx16@GJXAIOU",[[-1,12956,"- "]],[12958,12958],[12956,12956]]],[1541395016482,["gjx16@GJXAIOU",[[1,12956,"```"]],[12956,12956],[12959,12959]]],[1541395016583,["gjx16@GJXAIOU",[[1,12959,"language\n```\n"]],[12959,12959],[12959,12967]]],[1541395017745,["gjx16@GJXAIOU",[[-1,12959,"language"],[1,12967,"p"]],[12959,12967],[12960,12960]]],[1541395018713,["gjx16@GJXAIOU",[[1,12960,"ython"]],[12960,12960],[12965,12965]]],[1541395019628,["gjx16@GJXAIOU",[[1,12966,"\n"]],[12965,12965],[12966,12966]]],[1541395287777,["gjx16@GJXAIOU",[[1,12966,"lst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n"]],[12966,12966],[13100,13100]]],[1541395290174,["gjx16@GJXAIOU",[[1,13117,"\n"]],[13104,13104],[13105,13105]]],[1541395291618,["gjx16@GJXAIOU",[[1,13105,"cheng"]],[13105,13105],[13110,13110]]],[1541395293448,["gjx16@GJXAIOU",[[-1,13105,"cheng"]],[13110,13110],[13105,13105]]],[1541395297663,["gjx16@GJXAIOU",[[1,13105,"程序运行结果；"]],[13105,13105],[13112,13112]]],[1541395299076,["gjx16@GJXAIOU",[[1,13125,"\n"]],[13112,13112],[13113,13113]]],[1541395305995,["gjx16@GJXAIOU",[[1,13113,"['hello', 'lala', 'python']\n['python', 'hello', 'lala']\n['python', 'lala', 'hello']"]],[13113,13113],[13196,13196]]],[1541395312595,["gjx16@GJXAIOU",[[1,13113,"`"]],[13113,13113],[13114,13114]]],[1541395314986,["gjx16@GJXAIOU",[[1,13142,"`"]],[13142,13142],[13143,13143]]],[1541395315917,["gjx16@GJXAIOU",[[1,13171,"`"]],[13171,13171],[13172,13172]]],[1541395320330,["gjx16@GJXAIOU",[[1,13170,"`"]],[13170,13170],[13171,13171]]],[1541395321022,["gjx16@GJXAIOU",[[1,13141,"`"]],[13141,13141],[13142,13142]]],[1541395322069,["gjx16@GJXAIOU",[[1,13201,"`"]],[13201,13201],[13202,13202]]],[1541395548490,["gjx16@GJXAIOU",[[1,13215,"\n"]],[13202,13202],[13203,13203]]],[1541395548633,["gjx16@GJXAIOU",[[1,13216,"\n"]],[13203,13203],[13204,13204]]],[1541395564825,["gjx16@GJXAIOU",[[1,13217,"\n"]],[13204,13204],[13205,13205]]],[1541395564993,["gjx16@GJXAIOU",[[1,13218,"\n"]],[13205,13205],[13206,13206]]],[1541395576763,["gjx16@GJXAIOU",[[1,13206,"### 1.7.6 bijiao"]],[13206,13206],[13222,13222]]],[1541395578918,["gjx16@GJXAIOU",[[-1,13216,"bijiao"]],[13222,13222],[13216,13216]]],[1541395586693,["gjx16@GJXAIOU",[[1,13216,"比较字符串和列比哦啊"]],[13216,13216],[13226,13226]]],[1541395587921,["gjx16@GJXAIOU",[[-1,13222,"列比哦啊"]],[13226,13226],[13222,13222]]],[1541395591537,["gjx16@GJXAIOU",[[1,13221,"和列表"]],[13221,13221],[13224,13224]]],[1541395592030,["gjx16@GJXAIOU",[[1,13237,"\n"]],[13224,13224],[13225,13225]]],[1541395614706,["gjx16@GJXAIOU",[[1,13225,"- 相同点："]],[13225,13225],[13231,13231]]],[1541395616409,["gjx16@GJXAIOU",[[1,13232,"- \n"]],[13231,13231],[13234,13234]]],[1541395619738,["gjx16@GJXAIOU",[[1,13232,"  "]],[13232,13232],[13234,13234]]],[1541395620447,["gjx16@GJXAIOU",[[1,13236," "]],[13235,13235],[13236,13236]]],[1541395643204,["gjx16@GJXAIOU",[[1,13236,"都是序列类型\n  -"]],[13236,13236],[13246,13246]]],[1541395643463,["gjx16@GJXAIOU",[[1,13247," "]],[13246,13246],[13247,13247]]],[1541395645666,["gjx16@GJXAIOU",[[1,13247,"都是"]],[13247,13247],[13249,13249]]],[1541395648128,["gjx16@GJXAIOU",[[-1,13248,"是"]],[13249,13249],[13248,13248]]],[1541395708418,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13249,"\n"]],[13224,13224],[13249,13249]]],[1541395708418,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13249,"\n"]],[13249,13249],[13224,13224]]],[1541395648720,["gjx16@GJXAIOU",[[-1,13247,"都"]],[13248,13248],[13247,13247]]],[1541395659381,["gjx16@GJXAIOU",[[1,13247,"都可以按照顺心"]],[13247,13247],[13254,13254]]],[1541395661674,["gjx16@GJXAIOU",[[-1,13250,"按照顺心"]],[13254,13254],[13250,13250]]],[1541395669489,["gjx16@GJXAIOU",[[1,13250,"按照顺序进行索引\n  -"]],[13250,13250],[13262,13262]]],[1541395669738,["gjx16@GJXAIOU",[[1,13263," "]],[13262,13262],[13263,13263]]],[1541395697747,["gjx16@GJXAIOU",[[1,13263,"都可以采用切片得到一个或者多个圆度"]],[13263,13263],[13280,13280]]],[1541395698304,["gjx16@GJXAIOU",[[-1,13278,"圆度"]],[13280,13280],[13278,13278]]],[1541395702018,["gjx16@GJXAIOU",[[1,13278,"元素\n  "]],[13278,13278],[13283,13283]]],[1541395768418,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13284,"\n"]],[13224,13224],[13284,13284]]],[1541395768418,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13284,"\n"]],[13284,13284],[13224,13224]]],[1541395710485,["gjx16@GJXAIOU",[[-1,13281,"   "],[1,13284,"\n"]],[13283,13283],[13282,13282]]],[1541395715587,["gjx16@GJXAIOU",[[1,13282,"- 不同点："]],[13282,13282],[13288,13288]]],[1541395716376,["gjx16@GJXAIOU",[[1,13289,"- \n"]],[13288,13288],[13291,13291]]],[1541395718603,["gjx16@GJXAIOU",[[1,13289,"  "]],[13289,13289],[13291,13291]]],[1541395719559,["gjx16@GJXAIOU",[[1,13293," "]],[13292,13292],[13293,13293]]],[1541395725070,["gjx16@GJXAIOU",[[1,13293,"列比哦啊"]],[13293,13293],[13297,13297]]],[1541395726592,["gjx16@GJXAIOU",[[-1,13293,"列比哦啊 "]],[13297,13297],[13292,13292]]],[1541395727458,["gjx16@GJXAIOU",[[1,13293," "]],[13292,13292],[13293,13293]]],[1541395728818,["gjx16@GJXAIOU",[[1,13293,"列比哦啊"]],[13293,13293],[13297,13297]]],[1541395730142,["gjx16@GJXAIOU",[[-1,13293,"列比哦啊"]],[13297,13297],[13293,13293]]],[1541395747367,["gjx16@GJXAIOU",[[1,13293,"列表是可以改变的，然后字符串是不可以改变的额"]],[13293,13293],[13315,13315]]],[1541395748392,["gjx16@GJXAIOU",[[-1,13314,"额"]],[13315,13315],[13314,13314]]],[1541395760804,["gjx16@GJXAIOU",[[1,13314,"，如果要修改字符串，"]],[13314,13314],[13324,13324]]],[1541395888425,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13325,"\n"]],[13224,13224],[13325,13325]]],[1541395888425,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13325,"\n"]],[13325,13325],[13224,13224]]],[1541395849859,["gjx16@GJXAIOU",[[1,13324,"可以采用"]],[13324,13324],[13328,13328]]],[1541395854930,["gjx16@GJXAIOU",[[-1,13313,"的，如果要修改字符串，可以采用"]],[13328,13328],[13313,13313]]],[1541395869708,["gjx16@GJXAIOU",[[1,13313,"的。\n  -"]],[13313,13313],[13319,13319]]],[1541395869946,["gjx16@GJXAIOU",[[1,13320," "]],[13319,13319],[13320,13320]]],[1541395878672,["gjx16@GJXAIOU",[[1,13320,"字符串中每个了严肃"]],[13320,13320],[13329,13329]]],[1541395879668,["gjx16@GJXAIOU",[[-1,13326,"了严肃"]],[13329,13329],[13326,13326]]],[1541395883835,["gjx16@GJXAIOU",[[1,13326,"元素只嗯呢是"]],[13326,13326],[13332,13332]]],[1541395885322,["gjx16@GJXAIOU",[[-1,13328,"只嗯呢是"]],[13332,13332],[13328,13328]]],[1541395887178,["gjx16@GJXAIOU",[[1,13328,"只能是"]],[13328,13328],[13331,13331]]],[1541395948425,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13332,"\n"]],[13224,13224],[13332,13332]]],[1541395948425,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13332,"\n"]],[13332,13332],[13224,13224]]],[1541395894768,["gjx16@GJXAIOU",[[1,13333,"，列表中都可以，认知"]],[13333,13333],[13343,13343]]],[1541395897308,["gjx16@GJXAIOU",[[-1,13341,"认知"]],[13343,13343],[13341,13341]]],[1541395946244,["gjx16@GJXAIOU",[[1,13341,"也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待"]],[13341,13341],[13379,13379]]],[1541396008459,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13379," "]],[13224,13224],[13380,13380]]],[1541396008459,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13379," "]],[13380,13380],[13224,13224]]],[1541395953028,["gjx16@GJXAIOU",[[1,13379,"\n  "]],[13379,13379],[13382,13382]]],[1541395953231,["gjx16@GJXAIOU",[[-1,13380,"   "],[1,13383,"\n"]],[13382,13382],[13381,13381]]],[1541395954520,["gjx16@GJXAIOU",[[1,13394,"\n"]],[13381,13381],[13382,13382]]],[1541395965577,["gjx16@GJXAIOU",[[1,13382,"### 1.7.7 字符串和列表色"]],[13382,13382],[13399,13399]]],[1541395967471,["gjx16@GJXAIOU",[[-1,13396,"列表色"]],[13399,13399],[13396,13396]]],[1541395971309,["gjx16@GJXAIOU",[[1,13396,"列表的转换"]],[13396,13396],[13401,13401]]],[1541395971753,["gjx16@GJXAIOU",[[1,13414,"\n"]],[13401,13401],[13402,13402]]],[1541395988178,["gjx16@GJXAIOU",[[1,13402,"- split（）"]],[13402,13402],[13411,13411]]],[1541395990892,["gjx16@GJXAIOU",[[-1,13409,"（）"]],[13411,13411],[13409,13409]]],[1541395995604,["gjx16@GJXAIOU",[[1,13409,"()  ：将"]],[13409,13409],[13415,13415]]],[1541395997561,["gjx16@GJXAIOU",[[-1,13414,"将"]],[13415,13415],[13414,13414]]],[1541396003235,["gjx16@GJXAIOU",[[1,13414,"可以根据某个特"]],[13414,13414],[13421,13421]]],[1541396004279,["gjx16@GJXAIOU",[[-1,13420,"特"]],[13421,13421],[13420,13420]]],[1541396008131,["gjx16@GJXAIOU",[[1,13420,"分隔符将"]],[13420,13420],[13424,13424]]],[1541396068450,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13424,"\n"]],[13224,13224],[13425,13425]]],[1541396068450,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13424,"\n"]],[13425,13425],[13224,13224]]],[1541396014370,["gjx16@GJXAIOU",[[1,13424,"字符串转换为列比哦啊"]],[13424,13424],[13434,13434]]],[1541396015831,["gjx16@GJXAIOU",[[-1,13430,"列比哦啊"]],[13434,13434],[13430,13430]]],[1541396032516,["gjx16@GJXAIOU",[[1,13430,"列表"]],[13430,13430],[13432,13432]]],[1541396048928,["gjx16@GJXAIOU",[[1,13433,"- \n"]],[13432,13432],[13435,13435]]],[1541396050337,["gjx16@GJXAIOU",[[-1,13433,"- "]],[13435,13435],[13433,13433]]],[1541396052134,["gjx16@GJXAIOU",[[1,13433,"```"]],[13433,13433],[13436,13436]]],[1541396052260,["gjx16@GJXAIOU",[[1,13436,"language\n```\n"]],[13436,13436],[13436,13444]]],[1541396053336,["gjx16@GJXAIOU",[[-1,13436,"language"],[1,13444,"p"]],[13436,13444],[13437,13437]]],[1541396055786,["gjx16@GJXAIOU",[[1,13437,"ython"]],[13437,13437],[13442,13442]]],[1541396056749,["gjx16@GJXAIOU",[[1,13443,"\n"]],[13442,13442],[13443,13443]]],[1541396368456,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13447,"\n"]],[13224,13224],[13448,13448]]],[1541396368456,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13447,"\n"]],[13448,13448],[13224,13224]]],[1541396309911,["gjx16@GJXAIOU",[[1,13443,"str = \"hello.i am GJXAIOU .welcome you\" print(str.split(\".\")) #以.来分割 print(str.split(\".\",1))#以第一个.来分割 print(str.split())# 所有的空字符都是分隔符"]],[13443,13443],[13576,13576]]],[1541396311916,["gjx16@GJXAIOU",[[-1,13443,"str = \"hello.i am GJXAIOU .welcome you\" print(str.split(\".\")) #以.来分割 print(str.split(\".\",1))#以第一个.来分割 print(str.split())# 所有的空字符都是分隔符"]],[13576,13576],[13443,13443]]],[1541396314099,["gjx16@GJXAIOU",[[1,13443,"str = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符"]],[13443,13443],[13576,13576]]],[1541396318009,["gjx16@GJXAIOU",[[1,13594,"\n"]],[13580,13580],[13581,13581]]],[1541396318983,["gjx16@GJXAIOU",[[1,13581,"c"]],[13581,13581],[13582,13582]]],[1541396319649,["gjx16@GJXAIOU",[[-1,13581,"c"]],[13582,13582],[13581,13581]]],[1541396326018,["gjx16@GJXAIOU",[[1,13581,"程序运行结果："]],[13581,13581],[13588,13588]]],[1541396327421,["gjx16@GJXAIOU",[[1,13602,"\n"]],[13588,13588],[13589,13589]]],[1541396338394,["gjx16@GJXAIOU",[[1,13589,"['hello', 'i am GJXAIOU ', 'welcome you']\n['hello', 'i am GJXAIOU .welcome you']\n['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']"]],[13589,13589],[13717,13717]]],[1541396341379,["gjx16@GJXAIOU",[[1,13589,"`"]],[13589,13589],[13590,13590]]],[1541396343791,["gjx16@GJXAIOU",[[1,13632,"`"]],[13632,13632],[13633,13633]]],[1541396345081,["gjx16@GJXAIOU",[[1,13672,"`"]],[13672,13672],[13673,13673]]],[1541396349863,["gjx16@GJXAIOU",[[1,13720,"`"]],[13720,13720],[13721,13721]]],[1541396350344,["gjx16@GJXAIOU",[[1,13671,"`"]],[13671,13671],[13672,13672]]],[1541396351313,["gjx16@GJXAIOU",[[1,13631,"`"]],[13631,13631],[13632,13632]]],[1541396356944,["gjx16@GJXAIOU",[[1,13737,"\n"]],[13724,13724],[13725,13725]]],[1541396357143,["gjx16@GJXAIOU",[[1,13738,"\n"]],[13725,13725],[13726,13726]]],[1541396489006,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13723,"\n"]],[13224,13224],[13724,13724]]],[1541396489006,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13723,"\n"]],[13724,13724],[13224,13224]]],[1541396444769,["gjx16@GJXAIOU",[[1,13739,"\n"]],[13726,13726],[13727,13727]]],[1541396451089,["gjx16@GJXAIOU",[[1,13727,"- join :lian"]],[13727,13727],[13739,13739]]],[1541396452662,["gjx16@GJXAIOU",[[-1,13735,"lian"]],[13739,13739],[13735,13735]]],[1541396466147,["gjx16@GJXAIOU",[[1,13735,"连接；"]],[13735,13735],[13738,13738]]],[1541396467989,["gjx16@GJXAIOU",[[-1,13737,"；"]],[13738,13738],[13737,13737]]],[1541396480976,["gjx16@GJXAIOU",[[1,13737,"list中的元素或者字符串中的字符"]],[13737,13737],[13754,13754]]],[1541396481503,["gjx16@GJXAIOU",[[1,13755,"- \n"]],[13754,13754],[13757,13757]]],[1541396482628,["gjx16@GJXAIOU",[[-1,13755,"- "]],[13757,13757],[13755,13755]]],[1541396483716,["gjx16@GJXAIOU",[[1,13768,"\n"]],[13755,13755],[13756,13756]]],[1541396484698,["gjx16@GJXAIOU",[[1,13756,"``"]],[13756,13756],[13758,13758]]],[1541396485336,["gjx16@GJXAIOU",[[-1,13756,"``"]],[13758,13758],[13756,13756]]],[1541396486735,["gjx16@GJXAIOU",[[1,13756,"```"]],[13756,13756],[13759,13759]]],[1541396486838,["gjx16@GJXAIOU",[[1,13759,"language\n```\n"]],[13759,13759],[13759,13767]]],[1541396487756,["gjx16@GJXAIOU",[[-1,13759,"language"],[1,13767,"p"]],[13759,13767],[13760,13760]]],[1541396488739,["gjx16@GJXAIOU",[[1,13760,"ython"]],[13760,13760],[13765,13765]]],[1541396548992,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13769,"\n"]],[13224,13224],[13770,13770]]],[1541396548992,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13769,"\n"]],[13770,13770],[13224,13224]]],[1541396490828,["gjx16@GJXAIOU",[[1,13766,"\n"]],[13765,13765],[13766,13766]]],[1541397389001,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13770,"\n"]],[13224,13224],[13771,13771]]],[1541397389001,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13770,"\n"]],[13771,13771],[13224,13224]]],[1541397365906,["gjx16@GJXAIOU",[[1,13766,"lst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着 print(\",\".join(lst))#以英文的.作为连接符 print(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串"]],[13766,13766],[13956,13956]]],[1541397367724,["gjx16@GJXAIOU",[[-1,13766,"lst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着 print(\",\".join(lst))#以英文的.作为连接符 print(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串"]],[13956,13956],[13766,13766]]],[1541397370345,["gjx16@GJXAIOU",[[1,13766,"lst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串"]],[13766,13766],[13956,13956]]],[1541397372966,["gjx16@GJXAIOU",[[1,13974,"\n"]],[13960,13960],[13961,13961]]],[1541397377204,["gjx16@GJXAIOU",[[1,13961,"cgebg===="]],[13961,13961],[13968,13968]]],[1541397378483,["gjx16@GJXAIOU",[[-1,13965,"g=="]],[13968,13968],[13965,13965]]],[1541397382607,["gjx16@GJXAIOU",[[-1,13961,"cgeb=="]],[13967,13967],[13961,13961]]],[1541397383914,["gjx16@GJXAIOU",[[1,13961,"c"]],[13961,13961],[13962,13962]]],[1541397384543,["gjx16@GJXAIOU",[[-1,13961,"c"]],[13962,13962],[13961,13961]]],[1541397386789,["gjx16@GJXAIOU",[[1,13961,"程序"]],[13961,13961],[13963,13963]]],[1541397448996,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,13963,"\n"]],[13224,13224],[13964,13964]]],[1541397448996,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,13963,"\n"]],[13964,13964],[13224,13224]]],[1541397389469,["gjx16@GJXAIOU",[[1,13963,"运行结果："]],[13963,13963],[13968,13968]]],[1541397397597,["gjx16@GJXAIOU",[[1,13982,"\n"]],[13968,13968],[13969,13969]]],[1541397402410,["gjx16@GJXAIOU",[[1,13969,"hello.iamGJXAIOU.welcomeyou\nhello.i,am,GJXAIOU,.welcome,you\n[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`1"]],[13969,13969],[14068,14068]]],[1541397403854,["gjx16@GJXAIOU",[[-1,14067,"1"]],[14068,14068],[14067,14067]]],[1541397406290,["gjx16@GJXAIOU",[[1,14028,"`"]],[14028,14028],[14029,14029]]],[1541397406861,["gjx16@GJXAIOU",[[1,13996,"`"]],[13996,13996],[13997,13997]]],[1541397416253,["gjx16@GJXAIOU",[[1,13969,"`"]],[13969,13969],[13970,13970]]],[1541397417533,["gjx16@GJXAIOU",[[1,13999,"`"]],[13999,13999],[14000,14000]]],[1541397418443,["gjx16@GJXAIOU",[[1,14033,"`"]],[14033,14033],[14034,14034]]],[1541397420349,["gjx16@GJXAIOU",[[1,14086,"\n"]],[14073,14073],[14074,14074]]],[1541397422572,["gjx16@GJXAIOU",[[1,14087,"\n"]],[14074,14074],[14075,14075]]],[1541397422755,["gjx16@GJXAIOU",[[1,14088,"\n"]],[14075,14075],[14076,14076]]],[1541397422888,["gjx16@GJXAIOU",[[1,14089,"\n"]],[14076,14076],[14077,14077]]],[1541397423070,["gjx16@GJXAIOU",[[1,14090,"\n"]],[14077,14077],[14078,14078]]],[1541397423194,["gjx16@GJXAIOU",[[1,14091,"\n"]],[14078,14078],[14079,14079]]],[1541397424794,["gjx16@GJXAIOU",[[1,14079,"###"]],[14079,14079],[14082,14082]]],[1541397425652,["gjx16@GJXAIOU",[[-1,14081,"#"]],[14082,14082],[14081,14081]]],[1541397429781,["gjx16@GJXAIOU",[[1,14081," 1.8 yuan"]],[14081,14081],[14090,14090]]],[1541397430703,["gjx16@GJXAIOU",[[-1,14086,"yuan"]],[14090,14090],[14086,14086]]],[1541397435131,["gjx16@GJXAIOU",[[1,14086,"元组"]],[14086,14086],[14088,14088]]],[1541397436389,["gjx16@GJXAIOU",[[1,14101,"\n"]],[14088,14088],[14089,14089]]],[1541397436941,["gjx16@GJXAIOU",[[1,14102,"\n"]],[14089,14089],[14090,14090]]],[1541397509017,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14088,"\n"]],[13224,13224],[14089,14089]]],[1541397509017,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14088,"\n"]],[14089,14089],[13224,13224]]],[1541397482819,["gjx16@GJXAIOU",[[1,14090,"这是一种（）"]],[14090,14090],[14096,14096]]],[1541397485363,["gjx16@GJXAIOU",[[1,14095,"数据"]],[14095,14095],[14097,14097]]],[1541397490865,["gjx16@GJXAIOU",[[1,14098,"或者对象类型"]],[14098,14098],[14104,14104]]],[1541397498630,["gjx16@GJXAIOU",[[1,14088,"（）"]],[14088,14088],[14090,14090]]],[1541397503305,["gjx16@GJXAIOU",[[1,14089,"tuple"]],[14089,14089],[14094,14094]]],[1541397507260,["gjx16@GJXAIOU",[[1,14111,","]],[14111,14111],[14112,14112]]],[1541397568993,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14112,"\n"]],[13224,13224],[14113,14113]]],[1541397568994,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14112,"\n"]],[14113,14113],[13224,13224]]],[1541397527434,["gjx16@GJXAIOU",[[1,14125,"\n"]],[14112,14112],[14113,14113]]],[1541397529608,["gjx16@GJXAIOU",[[1,14113,"···"]],[14113,14113],[14116,14116]]],[1541397531084,["gjx16@GJXAIOU",[[-1,14113,"···"]],[14116,14116],[14113,14113]]],[1541397532676,["gjx16@GJXAIOU",[[1,14113,"```"]],[14113,14113],[14116,14116]]],[1541397532753,["gjx16@GJXAIOU",[[1,14116,"language\n```\n"]],[14116,14116],[14116,14124]]],[1541397534101,["gjx16@GJXAIOU",[[-1,14116,"language"],[1,14124,"p"]],[14116,14124],[14117,14117]]],[1541397534373,["gjx16@GJXAIOU",[[1,14117,"t"]],[14117,14117],[14118,14118]]],[1541397535184,["gjx16@GJXAIOU",[[-1,14116,"pt"]],[14118,14118],[14116,14116]]],[1541397536969,["gjx16@GJXAIOU",[[1,14116,"python"]],[14116,14116],[14122,14122]]],[1541397538293,["gjx16@GJXAIOU",[[1,14123,"\n"]],[14122,14122],[14123,14123]]],[1541397689000,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14127,"\n"]],[13224,13224],[14128,14128]]],[1541397689000,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14127,"\n"]],[14128,14128],[13224,13224]]],[1541397660563,["gjx16@GJXAIOU",[[1,14123,"lst = 1,2,\"lalala\",[\"jdjjdfj\",1234]#几乎包含了所有的数据类型 print(lst)\nprint(type(lst))"]],[14123,14123],[14199,14199]]],[1541397662178,["gjx16@GJXAIOU",[[-1,14123,"lst = 1,2,\"lalala\",[\"jdjjdfj\",1234]#几乎包含了所有的数据类型 print(lst)\nprint(type(lst))"]],[14199,14199],[14123,14123]]],[1541397664332,["gjx16@GJXAIOU",[[1,14123,"lst = 1,2,\"lalala\",[\"jdjjdfj\",1234]#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))"]],[14123,14123],[14199,14199]]],[1541397666868,["gjx16@GJXAIOU",[[1,14112,"keyi"]],[14112,14112],[14116,14116]]],[1541397668074,["gjx16@GJXAIOU",[[-1,14112,"keyi"]],[14116,14116],[14112,14112]]],[1541397669494,["gjx16@GJXAIOU",[[1,14112,"可以"]],[14112,14112],[14114,14114]]],[1541397676564,["gjx16@GJXAIOU",[[-1,14112,"可以"]],[14114,14114],[14112,14112]]],[1541397686836,["gjx16@GJXAIOU",[[1,14112,"其元素可以包含任何"]],[14112,14112],[14121,14121]]],[1541397749002,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14212,"\n"]],[13224,13224],[14213,14213]]],[1541397749002,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14212,"\n"]],[14213,14213],[13224,13224]]],[1541397701636,["gjx16@GJXAIOU",[[1,14121,"类型的数据，"]],[14121,14121],[14127,14127]]],[1541397706907,["gjx16@GJXAIOU",[[-1,14126,"，"]],[14127,14127],[14126,14126]]],[1541397707687,["gjx16@GJXAIOU",[[1,14127,"\n"]],[14126,14126],[14127,14127]]],[1541397736447,["gjx16@GJXAIOU",[[1,14127,"格式为：用（）括起来，中间的元素使用,隔开"]],[14127,14127],[14148,14148]]],[1541397739267,["gjx16@GJXAIOU",[[1,14145,"`"]],[14145,14145],[14146,14146]]],[1541397740763,["gjx16@GJXAIOU",[[1,14147,"`"]],[14147,14147],[14148,14148]]],[1541397809004,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14241,"\n"]],[13224,13224],[14242,14242]]],[1541397809004,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14241,"\n"]],[14242,14242],[13224,13224]]],[1541397751770,["gjx16@GJXAIOU",[[1,14150,"，++++"]],[14150,14150],[14153,14153]]],[1541397755484,["gjx16@GJXAIOU",[[-1,14151,"++++"]],[14155,14155],[14151,14151]]],[1541397756053,["gjx16@GJXAIOU",[[1,14151,"===="]],[14151,14151],[14153,14153]]],[1541397770853,["gjx16@GJXAIOU",[[1,14153,"元组是序列，元素不能更改"]],[14153,14153],[14165,14165]]],[1541397869010,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14258,"\n"]],[13224,13224],[14259,14259]]],[1541397869010,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14258,"\n"]],[14259,14259],[13224,13224]]],[1541397835769,["gjx16@GJXAIOU",[[1,14213,",(\"123\",12,'abadf')"]],[14178,14254],[14273,14273]]],[1541397838344,["gjx16@GJXAIOU",[[1,14291,"\n"]],[14277,14277],[14278,14278]]],[1541397849989,["gjx16@GJXAIOU",[[1,14278,"程序运行结果："]],[14278,14278],[14285,14285]]],[1541397859085,["gjx16@GJXAIOU",[[1,14299,"\n"]],[14285,14285],[14286,14286]]],[1541397859558,["gjx16@GJXAIOU",[[1,14286,"(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))\n<class 'tuple'>"]],[14286,14286],[14359,14359]]],[1541397862635,["gjx16@GJXAIOU",[[1,14286,"·"]],[14286,14286],[14287,14287]]],[1541397864389,["gjx16@GJXAIOU",[[-1,14286,"·"]],[14287,14287],[14286,14286]]],[1541397865290,["gjx16@GJXAIOU",[[1,14286,"`"]],[14286,14286],[14287,14287]]],[1541397866763,["gjx16@GJXAIOU",[[1,14345,"`"]],[14345,14345],[14346,14346]]],[1541397929008,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14361,"\n"]],[13224,13224],[14362,14362]]],[1541397929008,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14361,"\n"]],[14362,14362],[13224,13224]]],[1541397870797,["gjx16@GJXAIOU",[[1,14361,"`"]],[14361,14361],[14362,14362]]],[1541397880962,["gjx16@GJXAIOU",[[1,14344,"`"]],[14344,14344],[14345,14345]]],[1541397913676,["gjx16@GJXAIOU",[[1,14346,"\n"]],[14345,14345],[14346,14346]]],[1541397913821,["gjx16@GJXAIOU",[[1,14347,"\n"]],[14346,14346],[14347,14347]]],[1541397915118,["gjx16@GJXAIOU",[[-1,14347,"\n"]],[14347,14347],[14346,14346]]],[1541397915707,["gjx16@GJXAIOU",[[-1,14346,"\n"]],[14346,14346],[14345,14345]]],[1541397918606,["gjx16@GJXAIOU",[[1,14377,"\n"]],[14365,14365],[14366,14366]]],[1541397918799,["gjx16@GJXAIOU",[[1,14378,"\n"]],[14366,14366],[14367,14367]]],[1541397918986,["gjx16@GJXAIOU",[[1,14379,"\n"]],[14367,14367],[14368,14368]]],[1541397925548,["gjx16@GJXAIOU",[[1,14368,"### 1.8/2"]],[14368,14368],[14377,14377]]],[1541397926362,["gjx16@GJXAIOU",[[-1,14375,"/2"]],[14377,14377],[14375,14375]]],[1541397928226,["gjx16@GJXAIOU",[[1,14375,".2 "]],[14375,14375],[14378,14378]]],[1541397989001,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14378,"\n"]],[13224,13224],[14379,14379]]],[1541397989001,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14378,"\n"]],[14379,14379],[13224,13224]]],[1541397930381,["gjx16@GJXAIOU",[[1,14378,"suo"]],[14378,14378],[14381,14381]]],[1541397931429,["gjx16@GJXAIOU",[[-1,14378,"suo"]],[14381,14381],[14378,14378]]],[1541397937020,["gjx16@GJXAIOU",[[1,14378,"索引和切片"]],[14378,14378],[14383,14383]]],[1541398169013,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14383,"\n"]],[13224,13224],[14384,14384]]],[1541398169013,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14383,"\n"]],[14384,14384],[13224,13224]]],[1541398138095,["gjx16@GJXAIOU",[[1,14385,"主要的方法和列表以及字符串几乎相同，只收"]],[14385,14385],[14405,14405]]],[1541398138682,["gjx16@GJXAIOU",[[-1,14403,"只收"]],[14405,14405],[14403,14403]]],[1541398150465,["gjx16@GJXAIOU",[[1,14403,"只是当元组中只用一个乐元素"]],[14403,14403],[14416,14416]]],[1541398153683,["gjx16@GJXAIOU",[[-1,14410,"用一个乐元素"]],[14416,14416],[14410,14410]]],[1541398159079,["gjx16@GJXAIOU",[[1,14410,"有合一元素的时候"]],[14410,14410],[14418,14418]]],[1541398162014,["gjx16@GJXAIOU",[[-1,14411,"合一"]],[14413,14413],[14411,14411]]],[1541398164388,["gjx16@GJXAIOU",[[1,14411,"一个"]],[14411,14411],[14413,14413]]],[1541398229007,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[1,14418,"\n"]],[13224,13224],[14419,14419]]],[1541398229007,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[-1,14418,"\n"]],[14419,14419],[13224,13224]]],[1541398184795,["gjx16@GJXAIOU",[[1,14419,"元素后面应该加上英文的``"]],[14419,14419],[14432,14432]]],[1541398186564,["gjx16@GJXAIOU",[[1,14431,","]],[14431,14431],[14432,14432]]],[1541398190353,["gjx16@GJXAIOU",[[1,14433,","]],[14433,14433],[14434,14434]]],[1541398409018,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14418,"\n"],[1,14419,"，"],[1,14434,"\n\n"]],[13224,13224],[14436,14436]]],[1541398409018,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14418,"\n"],[-1,14418,"，"],[-1,14434,"\n\n"]],[14436,14436],[13224,13224]]],[1541398350832,["gjx16@GJXAIOU",[[1,14435,"··"]],[14435,14435],[14437,14437]]],[1541398352529,["gjx16@GJXAIOU",[[-1,14435,"··"]],[14437,14437],[14435,14435]]],[1541398354177,["gjx16@GJXAIOU",[[1,14435,"```"]],[14435,14435],[14438,14438]]],[1541398354243,["gjx16@GJXAIOU",[[1,14438,"language\n```\n"]],[14438,14438],[14438,14446]]],[1541398355616,["gjx16@GJXAIOU",[[-1,14438,"language"],[1,14446,"p"]],[14438,14446],[14439,14439]]],[1541398356568,["gjx16@GJXAIOU",[[1,14439,"ython"]],[14439,14439],[14444,14444]]],[1541398357203,["gjx16@GJXAIOU",[[1,14445,"\n"]],[14444,14444],[14445,14445]]],[1541398361467,["gjx16@GJXAIOU",[[1,14445,"lst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))"]],[14445,14445],[14499,14499]]],[1541398364110,["gjx16@GJXAIOU",[[1,14513,"\n"]],[14503,14503],[14504,14504]]],[1541398365508,["gjx16@GJXAIOU",[[1,14504,"cheng"]],[14504,14504],[14509,14509]]],[1541398367329,["gjx16@GJXAIOU",[[-1,14504,"cheng"]],[14509,14509],[14504,14504]]],[1541398373353,["gjx16@GJXAIOU",[[1,14504,"程序运行结果为："]],[14504,14504],[14512,14512]]],[1541398378698,["gjx16@GJXAIOU",[[1,14522,"\n"]],[14512,14512],[14513,14513]]],[1541398385257,["gjx16@GJXAIOU",[[1,14513,"``"]],[14513,14513],[14515,14515]]],[1541398395837,["gjx16@GJXAIOU",[[1,14514,"<class 'int'>\n<class 'tuple'>"]],[14514,14514],[14543,14543]]],[1541398397627,["gjx16@GJXAIOU",[[1,14527,"`"]],[14527,14527],[14528,14528]]],[1541398405891,["gjx16@GJXAIOU",[[1,14529,"`"]],[14529,14529],[14530,14530]]],[1541398469017,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14418,"\n"],[1,14419,"，"],[1,14546,"\n\n"]],[13224,13224],[14548,14548]]],[1541398469017,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14418,"\n"],[-1,14418,"，"],[-1,14546,"\n\n"]],[14548,14548],[13224,13224]]],[1541398436452,["gjx16@GJXAIOU",[[1,14556,"\n"]],[14547,14547],[14548,14548]]],[1541398437745,["gjx16@GJXAIOU",[[1,14548,"yin"]],[14548,14548],[14551,14551]]],[1541398438764,["gjx16@GJXAIOU",[[-1,14548,"yin"]],[14551,14551],[14548,14548]]],[1541398442895,["gjx16@GJXAIOU",[[1,14548,"以为列表"]],[14548,14548],[14552,14552]]],[1541398443393,["gjx16@GJXAIOU",[[-1,14550,"列表"]],[14552,14552],[14550,14550]]],[1541398454676,["gjx16@GJXAIOU",[[1,14550,"元素是不可修改的没如果"]],[14550,14550],[14561,14561]]],[1541398455632,["gjx16@GJXAIOU",[[-1,14558,"没如果"]],[14561,14561],[14558,14558]]],[1541398465646,["gjx16@GJXAIOU",[[1,14558,"，如果需要修改元组"]],[14558,14558],[14567,14567]]],[1541398529020,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14418,"\n"],[1,14419,"，"],[1,14567,"\n\n"]],[13224,13224],[14569,14569]]],[1541398529020,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14418,"\n"],[-1,14418,"，"],[-1,14567,"\n\n"]],[14569,14569],[13224,13224]]],[1541398486176,["gjx16@GJXAIOU",[[1,14567,"可以将元组转换成一个数组"]],[14567,14567],[14579,14579]]],[1541398487505,["gjx16@GJXAIOU",[[-1,14577,"数组"]],[14579,14579],[14577,14577]]],[1541398497460,["gjx16@GJXAIOU",[[1,14577,"列表，然后在进行修改"]],[14577,14577],[14587,14587]]],[1541398501058,["gjx16@GJXAIOU",[[1,14596,"\n"]],[14587,14587],[14588,14588]]],[1541398506540,["gjx16@GJXAIOU",[[1,14588,"函数为：``"]],[14588,14588],[14594,14594]]],[1541398509352,["gjx16@GJXAIOU",[[1,14593,"s"]],[14593,14593],[14594,14594]]],[1541398509921,["gjx16@GJXAIOU",[[-1,14593,"s"]],[14594,14594],[14593,14593]]],[1541398511802,["gjx16@GJXAIOU",[[1,14593,"list()"]],[14593,14593],[14599,14599]]],[1541398517346,["gjx16@GJXAIOU",[[1,14600," 以及 ``"]],[14600,14600],[14606,14606]]],[1541398523129,["gjx16@GJXAIOU",[[1,14605,"tuple()"]],[14605,14605],[14612,14612]]],[1541398525346,["gjx16@GJXAIOU",[[1,14622,"\n"]],[14613,14613],[14614,14614]]],[1541398589019,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14418,"\n"],[1,14419,"，"],[1,14613,"\n\n"]],[13224,13224],[14615,14615]]],[1541398589019,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14418,"\n"],[-1,14418,"，"],[-1,14613,"\n\n"]],[14615,14615],[13224,13224]]],[1541398534902,["gjx16@GJXAIOU",[[1,14126,",===="]],[14126,14126],[14129,14129]]],[1541398536379,["gjx16@GJXAIOU",[[1,14129,"yuan"]],[14129,14129],[14133,14133]]],[1541398538437,["gjx16@GJXAIOU",[[-1,14129,"yuan"]],[14133,14133],[14129,14129]]],[1541398548301,["gjx16@GJXAIOU",[[1,14129,"元组的对象是可以迭代的"]],[14129,14129],[14140,14140]]],[1541398649022,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14629,"\n\n"]],[13224,13224],[14631,14631]]],[1541398649022,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14629,"\n\n"]],[14631,14631],[13224,13224]]],[1541398598174,["gjx16@GJXAIOU",[[1,14639,"\n"]],[14630,14630],[14631,14631]]],[1541398598354,["gjx16@GJXAIOU",[[1,14640,"\n"]],[14631,14631],[14632,14632]]],[1541398598527,["gjx16@GJXAIOU",[[1,14641,"\n"]],[14632,14632],[14633,14633]]],[1541398598774,["gjx16@GJXAIOU",[[1,14642,"\n"]],[14633,14633],[14634,14634]]],[1541398598964,["gjx16@GJXAIOU",[[1,14643,"\n"]],[14634,14634],[14635,14635]]],[1541398600500,["gjx16@GJXAIOU",[[1,14644,"\n"]],[14635,14635],[14636,14636]]],[1541398601343,["gjx16@GJXAIOU",[[1,14636,"####"]],[14636,14636],[14640,14640]]],[1541398602310,["gjx16@GJXAIOU",[[-1,14639,"#"]],[14640,14640],[14639,14639]]],[1541398612719,["gjx16@GJXAIOU",[[1,14639," 1.8.3 元组得我用途"]],[14639,14639],[14652,14652]]],[1541398616551,["gjx16@GJXAIOU",[[-1,14648,"得我"]],[14650,14650],[14648,14648]]],[1541398617534,["gjx16@GJXAIOU",[[1,14648,"的"]],[14648,14648],[14649,14649]]],[1541398619282,["gjx16@GJXAIOU",[[1,14660,"\n"]],[14651,14651],[14652,14652]]],[1541398639674,["gjx16@GJXAIOU",[[1,14652,"- 元组的操作比列表块"]],[14652,14652],[14663,14663]]],[1541398640529,["gjx16@GJXAIOU",[[-1,14662,"块"]],[14663,14663],[14662,14662]]],[1541398643196,["gjx16@GJXAIOU",[[1,14662,"快"]],[14662,14662],[14663,14663]]],[1541398709154,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14663,"\n\n"]],[13224,13224],[14665,14665]]],[1541398709154,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14663,"\n\n"]],[14665,14665],[13224,13224]]],[1541398675179,["gjx16@GJXAIOU",[[1,14663,"，所以当定义一个值之后以后只是遍历的话，使用元组"]],[14663,14663],[14687,14687]]],[1541398675621,["gjx16@GJXAIOU",[[1,14688,"- \n"]],[14687,14687],[14690,14690]]],[1541398686059,["gjx16@GJXAIOU",[[1,14690,"元组可以进行“”"]],[14690,14690],[14698,14698]]],[1541398689695,["gjx16@GJXAIOU",[[1,14697,"写保护"]],[14697,14697],[14700,14700]]],[1541398708941,["gjx16@GJXAIOU",[[1,14701,"，如果要改变的话先转换为"]],[14701,14701],[14713,14713]]],[1541398769129,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14713,"\n\n"]],[13224,13224],[14715,14715]]],[1541398769129,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14713,"\n\n"]],[14715,14715],[13224,13224]]],[1541398710787,["gjx16@GJXAIOU",[[1,14713,"列表"]],[14713,14713],[14715,14715]]],[1541398711483,["gjx16@GJXAIOU",[[1,14716,"- \n"]],[14715,14715],[14718,14718]]],[1541398735416,["gjx16@GJXAIOU",[[1,14718,"元组乐意在字典中用作key（）"]],[14718,14718],[14733,14733]]],[1541398744432,["gjx16@GJXAIOU",[[1,14732,"因为字典的ky"]],[14732,14732],[14739,14739]]],[1541398745033,["gjx16@GJXAIOU",[[-1,14738,"y"]],[14739,14739],[14738,14738]]],[1541398752571,["gjx16@GJXAIOU",[[1,14738,"ey是保持不变的"]],[14738,14738],[14746,14746]]],[1541400509161,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14747,"\n\n"]],[13224,13224],[14749,14749]]],[1541400509161,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14747,"\n\n"]],[14749,14749],[13224,13224]]],[1541400499752,["gjx16@GJXAIOU",[[1,14748,"- \n"]],[14747,14747],[14750,14750]]],[1541400499913,["gjx16@GJXAIOU",[[-1,14748,"- "]],[14750,14750],[14749,14749]]],[1541400500084,["gjx16@GJXAIOU",[[1,14757,"\n"]],[14749,14749],[14750,14750]]],[1541400500344,["gjx16@GJXAIOU",[[1,14758,"\n"]],[14750,14750],[14751,14751]]],[1541400500467,["gjx16@GJXAIOU",[[1,14759,"\n"]],[14751,14751],[14752,14752]]],[1541400500613,["gjx16@GJXAIOU",[[1,14760,"\n"]],[14752,14752],[14753,14753]]],[1541400506862,["gjx16@GJXAIOU",[[-1,14718,"元组乐意"]],[14721,14721],[14718,14718]]],[1541400569171,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14743,"\n\n"]],[13224,13224],[14745,14745]]],[1541400569171,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14743,"\n\n"]],[14745,14745],[13224,13224]]],[1541400527634,["gjx16@GJXAIOU",[[1,14718,"元组可以"]],[14718,14718],[14722,14722]]],[1541400539027,["gjx16@GJXAIOU",[[1,14761,"\n"]],[14748,14748],[14749,14749]]],[1541400539190,["gjx16@GJXAIOU",[[1,14762,"\n"]],[14749,14749],[14750,14750]]],[1541400539421,["gjx16@GJXAIOU",[[1,14763,"\n"]],[14750,14750],[14751,14751]]],[1541400539555,["gjx16@GJXAIOU",[[1,14764,"\n"]],[14751,14751],[14752,14752]]],[1541400540451,["gjx16@GJXAIOU",[[1,14765,"\n"]],[14752,14752],[14753,14753]]],[1541400549102,["gjx16@GJXAIOU",[[1,14753,"## 1.9"]],[14753,14753],[14759,14759]]],[1541401171379,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14759,"\n\n"]],[13224,13224],[14761,14761]]],[1541401171379,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14759,"\n\n"]],[14761,14761],[13224,13224]]],[1541401127011,["gjx16@GJXAIOU",[[1,14759," 字典"]],[14759,14759],[14762,14762]]],[1541401127456,["gjx16@GJXAIOU",[[1,14775,"\n"]],[14762,14762],[14763,14763]]],[1541401127662,["gjx16@GJXAIOU",[[1,14776,"\n"]],[14763,14763],[14764,14764]]],[1541401151017,["gjx16@GJXAIOU",[[1,14764,"@"]],[14764,14764],[14765,14765]]],[1541401151914,["gjx16@GJXAIOU",[[-1,14764,"@"]],[14765,14765],[14764,14764]]],[1541401164992,["gjx16@GJXAIOU",[[1,14764,"### 1.9.1 穿件"]],[14764,14764],[14776,14776]]],[1541401165751,["gjx16@GJXAIOU",[[-1,14774,"穿件"]],[14776,14776],[14774,14774]]],[1541401169163,["gjx16@GJXAIOU",[[1,14774,"创建字典"]],[14774,14774],[14778,14778]]],[1541401169604,["gjx16@GJXAIOU",[[1,14791,"\n"]],[14778,14778],[14779,14779]]],[1541401231378,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14778,"\n\n"]],[13224,13224],[14780,14780]]],[1541401231378,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14778,"\n\n"]],[14780,14780],[13224,13224]]],[1541401172297,["gjx16@GJXAIOU",[[1,14779,"```"]],[14779,14779],[14782,14782]]],[1541401172377,["gjx16@GJXAIOU",[[1,14782,"language\n```\n"]],[14782,14782],[14782,14790]]],[1541401173021,["gjx16@GJXAIOU",[[-1,14782,"language"],[1,14790,"p"]],[14782,14790],[14783,14783]]],[1541401173911,["gjx16@GJXAIOU",[[1,14783,"ython"]],[14783,14783],[14788,14788]]],[1541401174528,["gjx16@GJXAIOU",[[1,14789,"\n"]],[14788,14788],[14789,14789]]],[1541401192686,["gjx16@GJXAIOU",[[1,14789,"persong"]],[14789,14789],[14796,14796]]],[1541401195407,["gjx16@GJXAIOU",[[-1,14789,"persong"]],[14796,14796],[14789,14789]]],[1541412502129,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,14793,"\n\n"]],[13224,13224],[14795,14795]]],[1541412502129,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,14793,"\n\n"]],[14795,14795],[13224,13224]]],[1541412465886,["gjx16@GJXAIOU",[[1,14789,"#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的， person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对： person['name2']= \"GJXAIOU\" #字典是进行原地修改     #方法二：使用dict()函数 name = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n#方法三：使用fromkeys() website = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能 dd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错"]],[14789,14789],[15220,15220]]],[1541412467880,["gjx16@GJXAIOU",[[-1,14789,"#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的， person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对： person['name2']= \"GJXAIOU\" #字典是进行原地修改     #方法二：使用dict()函数 name = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n#方法三：使用fromkeys() website = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能 dd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错"]],[15220,15220],[14789,14789]]],[1541412472706,["gjx16@GJXAIOU",[[1,14789,"#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错"]],[14789,14789],[15220,15220]]],[1541412482533,["gjx16@GJXAIOU",[[1,15238,"\n"]],[15224,15224],[15225,15225]]],[1541412482693,["gjx16@GJXAIOU",[[1,15239,"\n"]],[15225,15225],[15226,15226]]],[1541412491018,["gjx16@GJXAIOU",[[1,15226,"### 1.9.2 fangw"]],[15226,15226],[15241,15241]]],[1541412493028,["gjx16@GJXAIOU",[[-1,15236,"fangw"]],[15241,15241],[15236,15236]]],[1541412499086,["gjx16@GJXAIOU",[[1,15236,"访问字典的值"]],[15236,15236],[15242,15242]]],[1541412499810,["gjx16@GJXAIOU",[[1,15256,"\n"]],[15242,15242],[15243,15243]]],[1541412562130,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[1,15242,"\n\n"]],[13224,13224],[15244,15244]]],[1541412562130,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[-1,15242,"\n\n"]],[15244,15244],[13224,13224]]],[1541412502897,["gjx16@GJXAIOU",[[1,15243," "]],[15243,15243],[15244,15244]]],[1541412512129,["gjx16@GJXAIOU",[[-1,15243," "]],[15244,15244],[15243,15243]]],[1541412512523,["gjx16@GJXAIOU",[[-1,15256,"\n"]],[15243,15243],[15242,15242]]],[1541412527580,["gjx16@GJXAIOU",[[1,15242,"，通过键就可以得到值"]],[15242,15242],[15252,15252]]],[1541412527970,["gjx16@GJXAIOU",[[1,15266,"\n"]],[15252,15252],[15253,15253]]],[1541412540196,["gjx16@GJXAIOU",[[1,15253,"···"]],[15253,15253],[15256,15256]]],[1541412541313,["gjx16@GJXAIOU",[[-1,15253,"···"]],[15256,15256],[15253,15253]]],[1541412541729,["gjx16@GJXAIOU",[[-1,15266,"\n"]],[15253,15253],[15252,15252]]],[1541412542875,["gjx16@GJXAIOU",[[1,15266,"\n"]],[15252,15252],[15253,15253]]],[1541412545002,["gjx16@GJXAIOU",[[1,15253,"```"]],[15253,15253],[15256,15256]]],[1541412545070,["gjx16@GJXAIOU",[[1,15256,"language\n```\n"]],[15256,15256],[15256,15264]]],[1541412545953,["gjx16@GJXAIOU",[[-1,15256,"language"],[1,15264,"p"]],[15256,15264],[15257,15257]]],[1541412546931,["gjx16@GJXAIOU",[[1,15257,"ython"]],[15257,15257],[15262,15262]]],[1541412547852,["gjx16@GJXAIOU",[[1,15263,"\n"]],[15262,15262],[15263,15263]]],[1541412802131,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541412802131,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541412757672,["gjx16@GJXAIOU",[[1,15263,"#首先字典中是没有索引的 person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])"]],[15263,15263],[15370,15370]]],[1541412759789,["gjx16@GJXAIOU",[[-1,15263,"#首先字典中是没有索引的 person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])"]],[15370,15370],[15263,15263]]],[1541412765640,["gjx16@GJXAIOU",[[1,15263,"#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])"]],[15263,15263],[15370,15370]]],[1541412785900,["gjx16@GJXAIOU",[[1,15389,"\n"]],[15374,15374],[15375,15375]]],[1541412787246,["gjx16@GJXAIOU",[[1,15375,"chen"]],[15375,15375],[15379,15379]]],[1541412788671,["gjx16@GJXAIOU",[[-1,15375,"chen"]],[15379,15379],[15375,15375]]],[1541412797400,["gjx16@GJXAIOU",[[1,15375,"程序运行结果：gjxaiou"]],[15375,15375],[15389,15389]]],[1541412799595,["gjx16@GJXAIOU",[[-1,15382,"gjxaiou"]],[15389,15389],[15382,15382]]],[1541412801590,["gjx16@GJXAIOU",[[1,15382,"``"]],[15382,15382],[15384,15384]]],[1541412862128,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541412862128,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541412803450,["gjx16@GJXAIOU",[[1,15383,"gjxaiou"]],[15383,15383],[15390,15390]]],[1541412805656,["gjx16@GJXAIOU",[[1,15406,"\n"]],[15391,15391],[15392,15392]]],[1541412806920,["gjx16@GJXAIOU",[[1,15407,"\n"]],[15392,15392],[15393,15393]]],[1541412812229,["gjx16@GJXAIOU",[[1,15408,"\n"]],[15393,15393],[15394,15394]]],[1541412820432,["gjx16@GJXAIOU",[[1,15394,"### 1.9.3 jiben"]],[15394,15394],[15409,15409]]],[1541412821554,["gjx16@GJXAIOU",[[-1,15404,"jiben"]],[15409,15409],[15404,15404]]],[1541412826815,["gjx16@GJXAIOU",[[1,15404,"基本操作"]],[15404,15404],[15408,15408]]],[1541412827260,["gjx16@GJXAIOU",[[1,15423,"\n"]],[15408,15408],[15409,15409]]],[1541412842198,["gjx16@GJXAIOU",[[1,15409,"- ··"]],[15409,15409],[15413,15413]]],[1541412844263,["gjx16@GJXAIOU",[[-1,15411,"··"]],[15413,15413],[15411,15411]]],[1541412845609,["gjx16@GJXAIOU",[[1,15411,"``"]],[15411,15411],[15413,15413]]],[1541412850884,["gjx16@GJXAIOU",[[1,15412,"len()"]],[15412,15412],[15417,15417]]],[1541412852282,["gjx16@GJXAIOU",[[1,15416,"d"]],[15416,15416],[15417,15417]]],[1541412861810,["gjx16@GJXAIOU",[[1,15419," :返回字典中的"]],[15419,15419],[15427,15427]]],[1541412922126,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541412922126,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541412869072,["gjx16@GJXAIOU",[[1,15427,"键值对数量"]],[15427,15427],[15432,15432]]],[1541412869448,["gjx16@GJXAIOU",[[1,15433,"- \n"]],[15432,15432],[15435,15435]]],[1541412871561,["gjx16@GJXAIOU",[[1,15435,"``"]],[15435,15435],[15437,15437]]],[1541412921798,["gjx16@GJXAIOU",[[1,15436,"d"]],[15436,15436],[15437,15437]]],[1541412982138,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541412982138,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541412925157,["gjx16@GJXAIOU",[[1,15437,"[ker"]],[15437,15437],[15441,15441]]],[1541412926244,["gjx16@GJXAIOU",[[-1,15440,"r"]],[15441,15441],[15440,15440]]],[1541412928046,["gjx16@GJXAIOU",[[1,15440,"y]"]],[15440,15440],[15442,15442]]],[1541412932774,["gjx16@GJXAIOU",[[1,15443," :fanh"]],[15443,15443],[15449,15449]]],[1541412934712,["gjx16@GJXAIOU",[[-1,15445,"fanh"]],[15449,15449],[15445,15445]]],[1541412947089,["gjx16@GJXAIOU",[[1,15445,"返回字典中键对应值"]],[15445,15445],[15454,15454]]],[1541412948191,["gjx16@GJXAIOU",[[-1,15453,"值"]],[15454,15454],[15453,15453]]],[1541412949938,["gjx16@GJXAIOU",[[1,15453,"的值"]],[15453,15453],[15455,15455]]],[1541412950306,["gjx16@GJXAIOU",[[1,15456,"- \n"]],[15455,15455],[15458,15458]]],[1541412952630,["gjx16@GJXAIOU",[[1,15458,"``"]],[15458,15458],[15460,15460]]],[1541412956406,["gjx16@GJXAIOU",[[1,15459,"s"]],[15459,15459],[15460,15460]]],[1541412957555,["gjx16@GJXAIOU",[[-1,15459,"s"]],[15460,15460],[15459,15459]]],[1541412966235,["gjx16@GJXAIOU",[[1,15459,"d[key] = valude"]],[15459,15459],[15474,15474]]],[1541412967320,["gjx16@GJXAIOU",[[-1,15472,"de"]],[15474,15474],[15472,15472]]],[1541412967465,["gjx16@GJXAIOU",[[1,15472,"e"]],[15472,15472],[15473,15473]]],[1541412978985,["gjx16@GJXAIOU",[[1,15474," :将"]],[15474,15474],[15477,15477]]],[1541413042137,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413042137,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541412994425,["gjx16@GJXAIOU",[[1,15477,"value赋值给字典中的键"]],[15477,15477],[15490,15490]]],[1541412995162,["gjx16@GJXAIOU",[[1,15491,"- \n"]],[15490,15490],[15493,15493]]],[1541412997551,["gjx16@GJXAIOU",[[1,15493,"``"]],[15493,15493],[15495,15495]]],[1541413008128,["gjx16@GJXAIOU",[[1,15494,"del d[key]"]],[15494,15494],[15504,15504]]],[1541413019203,["gjx16@GJXAIOU",[[1,15505," :shan"]],[15505,15505],[15511,15511]]],[1541413020586,["gjx16@GJXAIOU",[[-1,15507,"shan"]],[15511,15511],[15507,15507]]],[1541413030348,["gjx16@GJXAIOU",[[1,15507,"删除该见"]],[15507,15507],[15511,15511]]],[1541413030832,["gjx16@GJXAIOU",[[-1,15510,"见"]],[15511,15511],[15510,15510]]],[1541413038663,["gjx16@GJXAIOU",[[1,15510,"键对应的键值对"]],[15510,15510],[15517,15517]]],[1541413039457,["gjx16@GJXAIOU",[[1,15518,"- \n"]],[15517,15517],[15520,15520]]],[1541413041525,["gjx16@GJXAIOU",[[1,15520,"``"]],[15520,15520],[15522,15522]]],[1541413102128,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413102128,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413047254,["gjx16@GJXAIOU",[[1,15521,"key in d"]],[15521,15521],[15529,15529]]],[1541413051667,["gjx16@GJXAIOU",[[1,15530," :j"]],[15530,15530],[15533,15533]]],[1541413052455,["gjx16@GJXAIOU",[[-1,15532,"j"]],[15533,15533],[15532,15532]]],[1541413091988,["gjx16@GJXAIOU",[[1,15532,"检查字典中是否含有键为key的项"]],[15532,15532],[15548,15548]]],[1541413162311,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413162311,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413154880,["gjx16@GJXAIOU",[[1,15563,"\n"]],[15549,15549],[15550,15550]]],[1541413155323,["gjx16@GJXAIOU",[[1,15564,"\n"]],[15550,15550],[15551,15551]]],[1541413155715,["gjx16@GJXAIOU",[[1,15565,"\n"]],[15551,15551],[15552,15552]]],[1541413162080,["gjx16@GJXAIOU",[[1,15552,"### 1"]],[15552,15552],[15557,15557]]],[1541413222285,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413222285,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413171423,["gjx16@GJXAIOU",[[1,15557,".9.5 字典的方法"]],[15557,15557],[15567,15567]]],[1541413172095,["gjx16@GJXAIOU",[[1,15581,"\n"]],[15567,15567],[15568,15568]]],[1541413179241,["gjx16@GJXAIOU",[[1,15568,"-copy"]],[15568,15568],[15573,15573]]],[1541413182456,["gjx16@GJXAIOU",[[1,15569," "]],[15569,15569],[15570,15570]]],[1541413202425,["gjx16@GJXAIOU",[[1,15574," ：变量有"]],[15574,15574],[15579,15579]]],[1541413207110,["gjx16@GJXAIOU",[[-1,15576,"变量有"]],[15579,15579],[15576,15576]]],[1541413209041,["gjx16@GJXAIOU",[[1,15576,"对象那个"]],[15576,15576],[15580,15580]]],[1541413210091,["gjx16@GJXAIOU",[[-1,15578,"那个"]],[15580,15580],[15578,15578]]],[1541413217724,["gjx16@GJXAIOU",[[1,15578,"有类型，变量无类型"]],[15578,15578],[15587,15587]]],[1541413218244,["gjx16@GJXAIOU",[[1,15588,"- \n"]],[15587,15587],[15590,15590]]],[1541413282288,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413282288,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413240119,["gjx16@GJXAIOU",[[-1,15588,"- "]],[15590,15590],[15588,15588]]],[1541413243220,["gjx16@GJXAIOU",[[1,15588,"··"]],[15588,15588],[15590,15590]]],[1541413244146,["gjx16@GJXAIOU",[[-1,15588,"··"]],[15590,15590],[15588,15588]]],[1541413246098,["gjx16@GJXAIOU",[[1,15588,"```"]],[15588,15588],[15591,15591]]],[1541413246165,["gjx16@GJXAIOU",[[1,15591,"language\n```\n"]],[15591,15591],[15591,15599]]],[1541413247050,["gjx16@GJXAIOU",[[-1,15591,"language"],[1,15599,"p"]],[15591,15599],[15592,15592]]],[1541413248028,["gjx16@GJXAIOU",[[1,15592,"ython"]],[15592,15592],[15597,15597]]],[1541413249387,["gjx16@GJXAIOU",[[1,15598,"\n"]],[15597,15597],[15598,15598]]],[1541413255367,["gjx16@GJXAIOU",[[1,15598,"a - 5;"]],[15598,15598],[15604,15604]]],[1541413257322,["gjx16@GJXAIOU",[[-1,15600,"- 5;"]],[15604,15604],[15600,15600]]],[1541413258905,["gjx16@GJXAIOU",[[1,15600,"=5"]],[15600,15600],[15602,15602]]],[1541413259635,["gjx16@GJXAIOU",[[1,15603,"\n"]],[15602,15602],[15603,15603]]],[1541413260355,["gjx16@GJXAIOU",[[-1,15603,"\n"]],[15603,15603],[15602,15602]]],[1541413260808,["gjx16@GJXAIOU",[[-1,15601,"5"]],[15602,15602],[15601,15601]]],[1541413262178,["gjx16@GJXAIOU",[[1,15601," 5"]],[15601,15601],[15603,15603]]],[1541413262785,["gjx16@GJXAIOU",[[1,15604,"\n"]],[15603,15603],[15604,15604]]],[1541413264611,["gjx16@GJXAIOU",[[1,15604,"b= "]],[15604,15604],[15607,15607]]],[1541413265503,["gjx16@GJXAIOU",[[-1,15605,"= "]],[15607,15607],[15605,15605]]],[1541413267455,["gjx16@GJXAIOU",[[1,15605," = a"]],[15605,15605],[15609,15609]]],[1541413269432,["gjx16@GJXAIOU",[[1,15610,"\n"]],[15609,15609],[15610,15610]]],[1541413275432,["gjx16@GJXAIOU",[[1,15610,"print()"]],[15610,15610],[15617,15617]]],[1541413276549,["gjx16@GJXAIOU",[[1,15616,"a"]],[15616,15616],[15617,15617]]],[1541413278464,["gjx16@GJXAIOU",[[1,15619,"\n"]],[15618,15618],[15619,15619]]],[1541413281299,["gjx16@GJXAIOU",[[1,15619,"print()"]],[15619,15619],[15626,15626]]],[1541413342294,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413342294,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413283989,["gjx16@GJXAIOU",[[1,15625,"id("]],[15625,15625],[15628,15628]]],[1541413284131,["gjx16@GJXAIOU",[[1,15629,")"]],[15628,15628],[15629,15629]]],[1541413285248,["gjx16@GJXAIOU",[[1,15628,"a"]],[15628,15628],[15629,15629]]],[1541413287032,["gjx16@GJXAIOU",[[1,15632,"\n"]],[15631,15631],[15632,15632]]],[1541413289924,["gjx16@GJXAIOU",[[1,15632,"print()"]],[15632,15632],[15639,15639]]],[1541413293038,["gjx16@GJXAIOU",[[1,15638,"id("]],[15638,15638],[15641,15641]]],[1541413293189,["gjx16@GJXAIOU",[[1,15642,")"]],[15641,15641],[15642,15642]]],[1541413295151,["gjx16@GJXAIOU",[[1,15641,"b"]],[15641,15641],[15642,15642]]],[1541413319407,["gjx16@GJXAIOU",[[1,15663,"\n"]],[15648,15648],[15649,15649]]],[1541413320253,["gjx16@GJXAIOU",[[1,15649,"c"]],[15649,15649],[15650,15650]]],[1541413320824,["gjx16@GJXAIOU",[[-1,15649,"c"]],[15650,15650],[15649,15649]]],[1541413325496,["gjx16@GJXAIOU",[[1,15649,"程序运行结果："]],[15649,15649],[15656,15656]]],[1541413326360,["gjx16@GJXAIOU",[[1,15671,"\n"]],[15656,15656],[15657,15657]]],[1541413330485,["gjx16@GJXAIOU",[[1,15657,"5\n140703865942992\n140703865942992`"]],[15657,15657],[15691,15691]]],[1541413331312,["gjx16@GJXAIOU",[[1,15674,"`"]],[15674,15674],[15675,15675]]],[1541413332032,["gjx16@GJXAIOU",[[1,15658,"`"]],[15658,15658],[15659,15659]]],[1541413333409,["gjx16@GJXAIOU",[[1,15657,"`"]],[15657,15657],[15658,15658]]],[1541413334877,["gjx16@GJXAIOU",[[1,15661,"`"]],[15661,15661],[15662,15662]]],[1541413335902,["gjx16@GJXAIOU",[[1,15679,"`"]],[15679,15679],[15680,15680]]],[1541413462281,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413462281,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413402798,["gjx16@GJXAIOU",[[1,15598,"\n"]],[15598,15598],[15599,15599]]],[1541413406713,["gjx16@GJXAIOU",[[1,15598,"#ji"]],[15598,15598],[15601,15601]]],[1541413408013,["gjx16@GJXAIOU",[[-1,15599,"ji"]],[15601,15601],[15599,15599]]],[1541413413443,["gjx16@GJXAIOU",[[1,15599,"基本的赋值操作"]],[15599,15599],[15606,15606]]],[1541413418736,["gjx16@GJXAIOU",[[1,15720,"\n"]],[15706,15706],[15707,15707]]],[1541413642295,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413642295,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413585522,["gjx16@GJXAIOU",[[1,15707,"·"]],[15707,15707],[15708,15708]]],[1541413586077,["gjx16@GJXAIOU",[[-1,15707,"·"]],[15708,15708],[15707,15707]]],[1541413587409,["gjx16@GJXAIOU",[[1,15707,"```"]],[15707,15707],[15710,15710]]],[1541413587523,["gjx16@GJXAIOU",[[1,15710,"language\n```\n"]],[15710,15710],[15710,15718]]],[1541413589053,["gjx16@GJXAIOU",[[-1,15710,"language"],[1,15718,"p"]],[15710,15718],[15711,15711]]],[1541413590163,["gjx16@GJXAIOU",[[1,15711,"ython"]],[15711,15711],[15716,15716]]],[1541413590887,["gjx16@GJXAIOU",[[1,15717,"\n"]],[15716,15716],[15717,15717]]],[1541413592544,["gjx16@GJXAIOU",[[1,15717,"person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))"]],[15717,15717],[15851,15851]]],[1541413602307,["gjx16@GJXAIOU",[[1,15717,"\n"]],[15716,15716],[15717,15717]]],[1541413605849,["gjx16@GJXAIOU",[[1,15717,"#shi"]],[15717,15717],[15721,15721]]],[1541413606901,["gjx16@GJXAIOU",[[-1,15718,"shi"]],[15721,15721],[15718,15718]]],[1541413619594,["gjx16@GJXAIOU",[[1,15718,"使用copy赋值到"]],[15718,15718],[15727,15727]]],[1541413621878,["gjx16@GJXAIOU",[[-1,15724,"赋值到"]],[15727,15727],[15724,15724]]],[1541413623303,["gjx16@GJXAIOU",[[1,15724,"渎职"]],[15724,15724],[15726,15726]]],[1541413624248,["gjx16@GJXAIOU",[[-1,15724,"渎职"]],[15726,15726],[15724,15724]]],[1541413626658,["gjx16@GJXAIOU",[[1,15724,"赋值"]],[15724,15724],[15726,15726]]],[1541413627407,["gjx16@GJXAIOU",[[-1,15724,"赋值"]],[15726,15726],[15724,15724]]],[1541413633226,["gjx16@GJXAIOU",[[1,15724,"复制到新空间"]],[15724,15724],[15730,15730]]],[1541413636206,["gjx16@GJXAIOU",[[1,15884,"\n"]],[15869,15869],[15870,15870]]],[1541413641287,["gjx16@GJXAIOU",[[1,15870,"程序运行结果；"]],[15870,15870],[15877,15877]]],[1541413702298,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413702298,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413648697,["gjx16@GJXAIOU",[[1,15892,"\n"]],[15877,15877],[15878,15878]]],[1541413649383,["gjx16@GJXAIOU",[[1,15878,"{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}\n2246490159576\n2246490159504"]],[15878,15878],[15974,15974]]],[1541413654430,["gjx16@GJXAIOU",[[1,15878,"·"]],[15878,15878],[15879,15879]]],[1541413655718,["gjx16@GJXAIOU",[[-1,15878,"·"]],[15879,15879],[15878,15878]]],[1541413656192,["gjx16@GJXAIOU",[[1,15878,"`"]],[15878,15878],[15879,15879]]],[1541413657842,["gjx16@GJXAIOU",[[1,15948,"`"]],[15948,15948],[15949,15949]]],[1541413658989,["gjx16@GJXAIOU",[[1,15963,"`"]],[15963,15963],[15964,15964]]],[1541413662128,["gjx16@GJXAIOU",[[1,15977,"`"]],[15977,15977],[15978,15978]]],[1541413662703,["gjx16@GJXAIOU",[[1,15962,"`"]],[15962,15962],[15963,15963]]],[1541413668294,["gjx16@GJXAIOU",[[1,15947,"`"]],[15947,15947],[15948,15948]]],[1541413762305,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413762305,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413730455,["gjx16@GJXAIOU",[[1,15995,"\n"]],[15980,15980],[15981,15981]]],[1541413731010,["gjx16@GJXAIOU",[[1,15996,"\n"]],[15981,15981],[15982,15982]]],[1541413731731,["gjx16@GJXAIOU",[[1,15997,"\n"]],[15982,15982],[15983,15983]]],[1541413734673,["gjx16@GJXAIOU",[[1,15983,"- ··"]],[15983,15983],[15987,15987]]],[1541413736509,["gjx16@GJXAIOU",[[-1,15985,"··"]],[15987,15987],[15985,15985]]],[1541413737651,["gjx16@GJXAIOU",[[1,15985,"``"]],[15985,15985],[15987,15987]]],[1541413739374,["gjx16@GJXAIOU",[[1,15986,"f"]],[15986,15986],[15987,15987]]],[1541413739934,["gjx16@GJXAIOU",[[-1,15986,"f"]],[15987,15987],[15986,15986]]],[1541413747752,["gjx16@GJXAIOU",[[1,15986,"deepcoo"]],[15986,15986],[15993,15993]]],[1541413748877,["gjx16@GJXAIOU",[[-1,15991,"oo"]],[15993,15993],[15991,15991]]],[1541413752192,["gjx16@GJXAIOU",[[1,15991,"opy()"]],[15991,15991],[15996,15996]]],[1541413756032,["gjx16@GJXAIOU",[[1,15997," ,d"]],[15997,15997],[16000,16000]]],[1541413756598,["gjx16@GJXAIOU",[[-1,15999,"d"]],[16000,16000],[15999,15999]]],[1541413822296,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413822296,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413766496,["gjx16@GJXAIOU",[[1,15999,"深拷贝形参"]],[15999,15999],[16004,16004]]],[1541413767528,["gjx16@GJXAIOU",[[-1,16002,"形参"]],[16004,16004],[16002,16002]]],[1541413774580,["gjx16@GJXAIOU",[[1,16002,"形成一个副本，"]],[16002,16002],[16009,16009]]],[1541413882289,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541413882289,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541413827606,["gjx16@GJXAIOU",[[1,15866,"\n"]],[15865,15865],[15866,15866]]],[1541414062302,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414062302,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414024083,["gjx16@GJXAIOU",[[-1,15724,"复制到新"],[1,15728,"得到的是新的"],[1,15730,"，和原来的各不相干"],[1,15866,"print(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象"]],[15717,15866],[15940,15940]]],[1541414036033,["gjx16@GJXAIOU",[[1,16056,"#使用copy得到的是新的空间，和原来的各不相干 person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象"]],[16056,16056],[16279,16279]]],[1541414038259,["gjx16@GJXAIOU",[[-1,16056,"#使用copy得到的是新的空间，和原来的各不相干 person = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象"]],[16279,16279],[16056,16056]]],[1541414046055,["gjx16@GJXAIOU",[[1,16056,"1341291115664\n1341291115664"]],[16056,16056],[16083,16083]]],[1541414048605,["gjx16@GJXAIOU",[[1,16056,"`"]],[16056,16056],[16057,16057]]],[1541414050164,["gjx16@GJXAIOU",[[1,16071,"`"]],[16071,16071],[16072,16072]]],[1541414052772,["gjx16@GJXAIOU",[[1,16085,"`"]],[16085,16085],[16086,16086]]],[1541414053397,["gjx16@GJXAIOU",[[1,16070,"`"]],[16070,16070],[16071,16071]]],[1541414122293,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414122293,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414071636,["gjx16@GJXAIOU",[[1,16115,"xiang"]],[16115,16115],[16120,16120]]],[1541414073125,["gjx16@GJXAIOU",[[-1,16115,"xiang"]],[16120,16120],[16115,16115]]],[1541414082718,["gjx16@GJXAIOU",[[1,16115,"相当于两个完全不管"]],[16115,16115],[16124,16124]]],[1541414084533,["gjx16@GJXAIOU",[[-1,16122,"不管"]],[16124,16124],[16122,16122]]],[1541414099959,["gjx16@GJXAIOU",[[1,16122,"无关的字典"]],[16122,16122],[16127,16127]]],[1541414100894,["gjx16@GJXAIOU",[[1,16128,"- \n"]],[16127,16127],[16130,16130]]],[1541414102631,["gjx16@GJXAIOU",[[-1,16128,"- "]],[16130,16130],[16128,16128]]],[1541414242312,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414242312,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414225766,["gjx16@GJXAIOU",[[1,16129,"·"]],[16129,16129],[16130,16130]]],[1541414226925,["gjx16@GJXAIOU",[[-1,16129,"·"]],[16130,16130],[16129,16129]]],[1541414227837,["gjx16@GJXAIOU",[[1,16129,"```"]],[16129,16129],[16132,16132]]],[1541414227901,["gjx16@GJXAIOU",[[1,16132,"language\n```\n"]],[16132,16132],[16132,16140]]],[1541414229500,["gjx16@GJXAIOU",[[-1,16132,"language"],[1,16140,"p"]],[16132,16140],[16133,16133]]],[1541414230457,["gjx16@GJXAIOU",[[1,16133,"ython"]],[16133,16133],[16138,16138]]],[1541414231202,["gjx16@GJXAIOU",[[1,16139,"\n"]],[16138,16138],[16139,16139]]],[1541414232198,["gjx16@GJXAIOU",[[1,16139,"#使用copy得到的是新的空间，和原来的各不相干 import copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象"]],[16139,16139],[16382,16382]]],[1541414236743,["gjx16@GJXAIOU",[[1,16401,"\n"]],[16386,16386],[16387,16387]]],[1541414237558,["gjx16@GJXAIOU",[[1,16387,"c"]],[16387,16387],[16388,16388]]],[1541414238325,["gjx16@GJXAIOU",[[-1,16387,"c"]],[16388,16388],[16387,16387]]],[1541414241424,["gjx16@GJXAIOU",[[1,16387,"程序"]],[16387,16387],[16389,16389]]],[1541414302315,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414302315,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414244285,["gjx16@GJXAIOU",[[1,16389,"运行结果："]],[16389,16389],[16394,16394]]],[1541414253550,["gjx16@GJXAIOU",[[1,16409,"\n"]],[16394,16394],[16395,16395]]],[1541414254168,["gjx16@GJXAIOU",[[1,16395,"{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}\n1652151429808\n1652150008208\n1652150776976\n1652150776976"]],[16395,16395],[16519,16519]]],[1541414257769,["gjx16@GJXAIOU",[[1,16395,"·"]],[16395,16395],[16396,16396]]],[1541414258968,["gjx16@GJXAIOU",[[-1,16395,"·"]],[16396,16396],[16395,16395]]],[1541414259454,["gjx16@GJXAIOU",[[1,16395,"`"]],[16395,16395],[16396,16396]]],[1541414260884,["gjx16@GJXAIOU",[[1,16465,"`"]],[16465,16465],[16466,16466]]],[1541414261569,["gjx16@GJXAIOU",[[1,16480,"`"]],[16480,16480],[16481,16481]]],[1541414262220,["gjx16@GJXAIOU",[[1,16495,"`"]],[16495,16495],[16496,16496]]],[1541414262926,["gjx16@GJXAIOU",[[1,16510,"`"]],[16510,16510],[16511,16511]]],[1541414265876,["gjx16@GJXAIOU",[[1,16524,"`"]],[16524,16524],[16525,16525]]],[1541414266408,["gjx16@GJXAIOU",[[1,16509,"`"]],[16509,16509],[16510,16510]]],[1541414266939,["gjx16@GJXAIOU",[[1,16494,"`"]],[16494,16494],[16495,16495]]],[1541414267459,["gjx16@GJXAIOU",[[1,16479,"`"]],[16479,16479],[16480,16480]]],[1541414273380,["gjx16@GJXAIOU",[[1,16464,"`"]],[16464,16464],[16465,16465]]],[1541414281701,["gjx16@GJXAIOU",[[1,16544,"\n"]],[16530,16530],[16531,16531]]],[1541414281920,["gjx16@GJXAIOU",[[1,16545,"\n"]],[16531,16531],[16532,16532]]],[1541414282073,["gjx16@GJXAIOU",[[1,16546,"\n"]],[16532,16532],[16533,16533]]],[1541414282246,["gjx16@GJXAIOU",[[1,16547,"\n"]],[16533,16533],[16534,16534]]],[1541414282437,["gjx16@GJXAIOU",[[1,16548,"\n"]],[16534,16534],[16535,16535]]],[1541414282667,["gjx16@GJXAIOU",[[1,16549,"\n"]],[16535,16535],[16536,16536]]],[1541414296135,["gjx16@GJXAIOU",[[1,16536,"- clear qingk"]],[16536,16536],[16549,16549]]],[1541414297597,["gjx16@GJXAIOU",[[-1,16544,"qingk"]],[16549,16549],[16544,16544]]],[1541414299766,["gjx16@GJXAIOU",[[1,16544,"清空"]],[16544,16544],[16546,16546]]],[1541414362310,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414362310,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414306888,["gjx16@GJXAIOU",[[1,16546,"字典中的所有元素"]],[16546,16546],[16554,16554]]],[1541414308328,["gjx16@GJXAIOU",[[1,16555,"- \n"]],[16554,16554],[16557,16557]]],[1541414310342,["gjx16@GJXAIOU",[[1,16557,"```"]],[16557,16557],[16560,16560]]],[1541414312090,["gjx16@GJXAIOU",[[-1,16555,"- ```"]],[16560,16560],[16555,16555]]],[1541414313611,["gjx16@GJXAIOU",[[1,16555,"```"]],[16555,16555],[16558,16558]]],[1541414313704,["gjx16@GJXAIOU",[[1,16558,"language\n```\n"]],[16558,16558],[16558,16566]]],[1541414316111,["gjx16@GJXAIOU",[[-1,16558,"language"],[1,16566,"p"]],[16558,16566],[16559,16559]]],[1541414317391,["gjx16@GJXAIOU",[[1,16559,"ython"]],[16559,16559],[16564,16564]]],[1541414330286,["gjx16@GJXAIOU",[[1,16565,"\n"]],[16564,16564],[16565,16565]]],[1541414422312,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414422312,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414364000,["gjx16@GJXAIOU",[[1,16554,",de"]],[16554,16554],[16557,16557]]],[1541414364738,["gjx16@GJXAIOU",[[-1,16555,"de"]],[16557,16557],[16555,16555]]],[1541414366451,["gjx16@GJXAIOU",[[1,16555,"dedao "]],[16555,16555],[16561,16561]]],[1541414368046,["gjx16@GJXAIOU",[[-1,16555,"dedao "]],[16561,16561],[16555,16555]]],[1541414396760,["gjx16@GJXAIOU",[[1,16555,"得到空字典，但是对象仍然在内存中，而``"]],[16555,16555],[16575,16575]]],[1541414398900,["gjx16@GJXAIOU",[[1,16574,"del"]],[16574,16574],[16577,16577]]],[1541414419591,["gjx16@GJXAIOU",[[1,16578,"是直接将字典删除，内存中就没有了"]],[16578,16578],[16594,16594]]],[1541414482300,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414482300,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414422494,["gjx16@GJXAIOU",[[1,16606,"\n"]],[16604,16604],[16605,16605]]],[1541414542455,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414542455,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414493729,["gjx16@GJXAIOU",[[1,16605,"a = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)"]],[16605,16605],[16648,16648]]],[1541414496855,["gjx16@GJXAIOU",[[1,16668,"\n"]],[16653,16653],[16654,16654]]],[1541414501984,["gjx16@GJXAIOU",[[1,16654,"程序运行结果；"]],[16654,16654],[16661,16661]]],[1541414503104,["gjx16@GJXAIOU",[[-1,16660,"；"]],[16661,16661],[16660,16660]]],[1541414512797,["gjx16@GJXAIOU",[[1,16660,"：``"]],[16660,16660],[16663,16663]]],[1541414514452,["gjx16@GJXAIOU",[[1,16662,"{}"]],[16662,16662],[16664,16664]]],[1541414516701,["gjx16@GJXAIOU",[[1,16680,"\n"]],[16665,16665],[16666,16666]]],[1541414534445,["gjx16@GJXAIOU",[[1,16649,"#"]],[16649,16649],[16650,16650]]],[1541414535887,["gjx16@GJXAIOU",[[-1,16649,"#"]],[16650,16650],[16649,16649]]],[1541414538292,["gjx16@GJXAIOU",[[1,16605,"\n"]],[16605,16605],[16606,16606]]],[1541414542212,["gjx16@GJXAIOU",[[1,16605,"#c"]],[16605,16605],[16607,16607]]],[1541414602439,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414602439,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414544782,["gjx16@GJXAIOU",[[1,16607,"lear m"]],[16607,16607],[16613,16613]]],[1541414545252,["gjx16@GJXAIOU",[[-1,16612,"m"]],[16613,16613],[16612,16612]]],[1541414561182,["gjx16@GJXAIOU",[[1,16612,"没有返回值，是对字典进行了原地修改"]],[16612,16612],[16629,16629]]],[1541414662577,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414662577,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414617174,["gjx16@GJXAIOU",[[1,16706,"\n"]],[16691,16691],[16692,16692]]],[1541414617378,["gjx16@GJXAIOU",[[1,16707,"\n"]],[16692,16692],[16693,16693]]],[1541414617559,["gjx16@GJXAIOU",[[1,16708,"\n"]],[16693,16693],[16694,16694]]],[1541414630053,["gjx16@GJXAIOU",[[1,16694,"- get he"]],[16694,16694],[16702,16702]]],[1541414630865,["gjx16@GJXAIOU",[[-1,16700,"he"]],[16702,16702],[16700,16700]]],[1541414643797,["gjx16@GJXAIOU",[[1,16700,"和setdefault"]],[16700,16700],[16711,16711]]],[1541414652011,["gjx16@GJXAIOU",[[1,16712,"- \n"]],[16711,16711],[16714,16714]]],[1541414654672,["gjx16@GJXAIOU",[[1,16712,"  "]],[16712,16712],[16714,16714]]],[1541414655768,["gjx16@GJXAIOU",[[1,16716," "]],[16715,16715],[16716,16716]]],[1541414657240,["gjx16@GJXAIOU",[[1,16716,"get"]],[16716,16716],[16719,16719]]],[1541414657926,["gjx16@GJXAIOU",[[1,16720," "]],[16719,16719],[16720,16720]]],[1541414658359,["gjx16@GJXAIOU",[[1,16720,"de"]],[16720,16720],[16722,16722]]],[1541414659191,["gjx16@GJXAIOU",[[-1,16720,"de"]],[16722,16722],[16720,16720]]],[1541414660152,["gjx16@GJXAIOU",[[1,16720,"de"]],[16720,16720],[16722,16722]]],[1541414660926,["gjx16@GJXAIOU",[[-1,16720,"de"]],[16722,16722],[16720,16720]]],[1541414662337,["gjx16@GJXAIOU",[[1,16720,"的"]],[16720,16720],[16721,16721]]],[1541414722561,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541414722561,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541414684350,["gjx16@GJXAIOU",[[1,16721,"含义是获取该键对应的值，将建中德州进行"]],[16721,16721],[16740,16740]]],[1541414688805,["gjx16@GJXAIOU",[[-1,16732,"，将建中德州进行"]],[16740,16740],[16732,16732]]],[1541414703458,["gjx16@GJXAIOU",[[1,16732,"，如果没有发现也不抱序偶"]],[16732,16732],[16744,16744]]],[1541414704567,["gjx16@GJXAIOU",[[-1,16741,"抱序偶"]],[16744,16744],[16741,16741]]],[1541414708357,["gjx16@GJXAIOU",[[1,16741,"报错\n  "]],[16741,16741],[16746,16746]]],[1541414711748,["gjx16@GJXAIOU",[[-1,16745,"  "]],[16746,16746],[16744,16744]]],[1541414713408,["gjx16@GJXAIOU",[[1,16744,"```"]],[16744,16744],[16747,16747]]],[1541414713522,["gjx16@GJXAIOU",[[1,16747,"language\n```\n"]],[16747,16747],[16747,16755]]],[1541414714155,["gjx16@GJXAIOU",[[-1,16747,"language"],[1,16755,"p"]],[16747,16755],[16748,16748]]],[1541414715120,["gjx16@GJXAIOU",[[1,16748,"ython"]],[16748,16748],[16753,16753]]],[1541414715471,["gjx16@GJXAIOU",[[1,16754,"\n"]],[16753,16753],[16754,16754]]],[1541415322577,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415322577,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415271718,["gjx16@GJXAIOU",[[1,16754,"a = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值 print(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中 print(a)"]],[16754,16754],[16962,16962]]],[1541415275546,["gjx16@GJXAIOU",[[-1,16754,"a = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值 print(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中 print(a)"]],[16962,16962],[16754,16754]]],[1541415280017,["gjx16@GJXAIOU",[[1,16754,"a = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)"]],[16754,16754],[16962,16962]]],[1541415282966,["gjx16@GJXAIOU",[[1,16967,"\n"]],[16966,16966],[16967,16967]]],[1541415283905,["gjx16@GJXAIOU",[[1,16967,"c"]],[16967,16967],[16968,16968]]],[1541415284558,["gjx16@GJXAIOU",[[-1,16967,"c"]],[16968,16968],[16967,16967]]],[1541415289286,["gjx16@GJXAIOU",[[1,16967,"程序运行结果；"]],[16967,16967],[16974,16974]]],[1541415290306,["gjx16@GJXAIOU",[[-1,16973,"；"]],[16974,16974],[16973,16973]]],[1541415290846,["gjx16@GJXAIOU",[[1,16973,"；"]],[16973,16973],[16974,16974]]],[1541415291901,["gjx16@GJXAIOU",[[-1,16973,"；"]],[16974,16974],[16973,16973]]],[1541415292503,["gjx16@GJXAIOU",[[1,16973,"："]],[16973,16973],[16974,16974]]],[1541415303668,["gjx16@GJXAIOU",[[1,16975,"\n"]],[16974,16974],[16975,16975]]],[1541415306708,["gjx16@GJXAIOU",[[1,16975,"GJXAIOU\nno answer\nsecond\n{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}·"]],[16975,16975],[17056,17056]]],[1541415307762,["gjx16@GJXAIOU",[[-1,17055,"·"]],[17056,17056],[17055,17055]]],[1541415308227,["gjx16@GJXAIOU",[[1,17055,"`"]],[17055,17055],[17056,17056]]],[1541415309211,["gjx16@GJXAIOU",[[1,16999,"`"]],[16999,16999],[17000,17000]]],[1541415310899,["gjx16@GJXAIOU",[[1,16992,"`"]],[16992,16992],[16993,16993]]],[1541415311700,["gjx16@GJXAIOU",[[1,16982,"`"]],[16982,16982],[16983,16983]]],[1541415315814,["gjx16@GJXAIOU",[[1,16975,"`"]],[16975,16975],[16976,16976]]],[1541415316988,["gjx16@GJXAIOU",[[1,16985,"`"]],[16985,16985],[16986,16986]]],[1541415317754,["gjx16@GJXAIOU",[[1,16997,"`"]],[16997,16997],[16998,16998]]],[1541415318674,["gjx16@GJXAIOU",[[1,17006,"`"]],[17006,17006],[17007,17007]]],[1541415382581,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415382581,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415325087,["gjx16@GJXAIOU",[[-1,17064," "],[1,17065,"\n"]],[17065,17065],[17065,17065]]],[1541415325297,["gjx16@GJXAIOU",[[1,17080,"\n"]],[17065,17065],[17066,17066]]],[1541415329406,["gjx16@GJXAIOU",[[1,17066,"- get"]],[17066,17066],[17071,17071]]],[1541415330790,["gjx16@GJXAIOU",[[-1,17068,"get"]],[17071,17071],[17068,17068]]],[1541415334186,["gjx16@GJXAIOU",[[1,17068,"item/"]],[17068,17068],[17073,17073]]],[1541415335643,["gjx16@GJXAIOU",[[-1,17072,"/"]],[17073,17073],[17072,17072]]],[1541415346769,["gjx16@GJXAIOU",[[1,17072,"s .keys  .c"]],[17072,17072],[17083,17083]]],[1541415347274,["gjx16@GJXAIOU",[[-1,17082,"c"]],[17083,17083],[17082,17082]]],[1541415348507,["gjx16@GJXAIOU",[[1,17082,"valud"]],[17082,17082],[17087,17087]]],[1541415349042,["gjx16@GJXAIOU",[[-1,17086,"d"]],[17087,17087],[17086,17086]]],[1541415351162,["gjx16@GJXAIOU",[[1,17086,"es"]],[17086,17086],[17088,17088]]],[1541415352908,["gjx16@GJXAIOU",[[1,17089,"- \n"]],[17088,17088],[17091,17091]]],[1541415354806,["gjx16@GJXAIOU",[[-1,17089,"- "]],[17091,17091],[17089,17089]]],[1541415502582,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415502582,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415485140,["gjx16@GJXAIOU",[[1,17089,"  - jjitems"]],[17089,17089],[17100,17100]]],[1541415487906,["gjx16@GJXAIOU",[[-1,17093,"jjitems"]],[17100,17100],[17093,17093]]],[1541415490574,["gjx16@GJXAIOU",[[1,17093,"items"]],[17093,17093],[17098,17098]]],[1541415492267,["gjx16@GJXAIOU",[[1,17099,"  - \n"]],[17098,17098],[17103,17103]]],[1541415495692,["gjx16@GJXAIOU",[[-1,17099,"  - "]],[17103,17103],[17099,17099]]],[1541415497314,["gjx16@GJXAIOU",[[1,17099,"·"]],[17099,17099],[17100,17100]]],[1541415498987,["gjx16@GJXAIOU",[[-1,17099,"·"]],[17100,17100],[17099,17099]]],[1541415500770,["gjx16@GJXAIOU",[[1,17099,"```"]],[17099,17099],[17102,17102]]],[1541415500847,["gjx16@GJXAIOU",[[1,17102,"language\n```\n"]],[17102,17102],[17102,17110]]],[1541415501977,["gjx16@GJXAIOU",[[-1,17102,"language"],[1,17110,"p"]],[17102,17110],[17103,17103]]],[1541415562583,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415562583,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415503523,["gjx16@GJXAIOU",[[1,17103,"ython"]],[17103,17103],[17108,17108]]],[1541415504254,["gjx16@GJXAIOU",[[1,17109,"\n"]],[17108,17108],[17109,17109]]],[1541415505606,["gjx16@GJXAIOU",[[1,17109,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())"]],[17109,17109],[17184,17184]]],[1541415508158,["gjx16@GJXAIOU",[[-1,17109,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())"]],[17184,17184],[17109,17109]]],[1541415512483,["gjx16@GJXAIOU",[[1,17109,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())"]],[17109,17109],[17184,17184]]],[1541415515247,["gjx16@GJXAIOU",[[1,17204,"\n"]],[17188,17188],[17189,17189]]],[1541415517419,["gjx16@GJXAIOU",[[1,17189,"c"]],[17189,17189],[17190,17190]]],[1541415518315,["gjx16@GJXAIOU",[[-1,17189,"c"]],[17190,17190],[17189,17189]]],[1541415539819,["gjx16@GJXAIOU",[[1,17189,"程序运行结果：·"]],[17189,17189],[17197,17197]]],[1541415540923,["gjx16@GJXAIOU",[[-1,17196,"·"]],[17197,17197],[17196,17196]]],[1541415541783,["gjx16@GJXAIOU",[[1,17196,"``"]],[17196,17196],[17198,17198]]],[1541415543466,["gjx16@GJXAIOU",[[1,17197,"dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])"]],[17197,17197],[17270,17270]]],[1541415546015,["gjx16@GJXAIOU",[[1,17287,"\n"]],[17271,17271],[17272,17272]]],[1541415546823,["gjx16@GJXAIOU",[[1,17288,"\n"]],[17272,17272],[17273,17273]]],[1541415551023,["gjx16@GJXAIOU",[[1,17273,"  - m "]],[17273,17273],[17279,17279]]],[1541415552250,["gjx16@GJXAIOU",[[-1,17277,"m "]],[17279,17279],[17277,17277]]],[1541415554122,["gjx16@GJXAIOU",[[1,17277,"keys"]],[17277,17277],[17281,17281]]],[1541415555628,["gjx16@GJXAIOU",[[1,17282,"  - \n"]],[17281,17281],[17286,17286]]],[1541415557890,["gjx16@GJXAIOU",[[-1,17282,"  - "]],[17286,17286],[17282,17282]]],[1541415558730,["gjx16@GJXAIOU",[[-1,17297,"\n"]],[17282,17282],[17281,17281]]],[1541415559742,["gjx16@GJXAIOU",[[1,17282,"  - \n"]],[17281,17281],[17286,17286]]],[1541415561547,["gjx16@GJXAIOU",[[-1,17282,"  - "]],[17286,17286],[17282,17282]]],[1541415622586,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415622586,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415563889,["gjx16@GJXAIOU",[[1,17282,"··"]],[17282,17282],[17284,17284]]],[1541415564740,["gjx16@GJXAIOU",[[-1,17282,"··"]],[17284,17284],[17282,17282]]],[1541415566323,["gjx16@GJXAIOU",[[1,17282,"```"]],[17282,17282],[17285,17285]]],[1541415566440,["gjx16@GJXAIOU",[[1,17285,"language\n```\n"]],[17285,17285],[17285,17293]]],[1541415567762,["gjx16@GJXAIOU",[[-1,17285,"language"],[1,17293,"p"]],[17285,17293],[17286,17286]]],[1541415570649,["gjx16@GJXAIOU",[[1,17286,"ython"]],[17286,17286],[17291,17291]]],[1541415571860,["gjx16@GJXAIOU",[[1,17292,"\n"]],[17291,17291],[17292,17292]]],[1541415604538,["gjx16@GJXAIOU",[[1,17281," d"]],[17281,17281],[17283,17283]]],[1541415605290,["gjx16@GJXAIOU",[[-1,17282,"d"]],[17283,17283],[17282,17282]]],[1541415611035,["gjx16@GJXAIOU",[[1,17282,"得到所有的家"]],[17282,17282],[17288,17288]]],[1541415611482,["gjx16@GJXAIOU",[[-1,17287,"家"]],[17288,17288],[17287,17287]]],[1541415614494,["gjx16@GJXAIOU",[[1,17287,"键"]],[17287,17287],[17288,17288]]],[1541415682585,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415682585,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415661257,["gjx16@GJXAIOU",[[1,17299,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) "]],[17299,17299],[17392,17392]]],[1541415679213,["gjx16@GJXAIOU",[[1,17413,"\n"]],[17396,17396],[17397,17397]]],[1541415742616,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541415742616,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541415693190,["gjx16@GJXAIOU",[[1,17288,"，value 得到所有的值"]],[17288,17288],[17301,17301]]],[1541415702317,["gjx16@GJXAIOU",[[1,17410,"程序运行结果："]],[17410,17410],[17417,17417]]],[1541415706119,["gjx16@GJXAIOU",[[1,17434,"\n"]],[17417,17417],[17418,17418]]],[1541415720251,["gjx16@GJXAIOU",[[1,17418,"dict_keys(['name', 'age', 'first'])\ndict_values(['GJXAIOU', 'lalala', 'second'])`"]],[17418,17418],[17499,17499]]],[1541415721091,["gjx16@GJXAIOU",[[1,17453,"`"]],[17453,17453],[17454,17454]]],[1541415733011,["gjx16@GJXAIOU",[[1,17418,"`"]],[17418,17418],[17419,17419]]],[1541415733997,["gjx16@GJXAIOU",[[1,17456,"`"]],[17456,17456],[17457,17457]]],[1541417242616,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541417242616,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541417222089,["gjx16@GJXAIOU",[[1,17519,"\n"]],[17503,17503],[17504,17504]]],[1541417222256,["gjx16@GJXAIOU",[[1,17520,"\n"]],[17504,17504],[17505,17505]]],[1541417222507,["gjx16@GJXAIOU",[[1,17521,"\n"]],[17505,17505],[17506,17506]]],[1541417222964,["gjx16@GJXAIOU",[[1,17522,"\n"]],[17506,17506],[17507,17507]]],[1541417223141,["gjx16@GJXAIOU",[[1,17523,"\n"]],[17507,17507],[17508,17508]]],[1541417223484,["gjx16@GJXAIOU",[[1,17508,"-"]],[17508,17508],[17509,17509]]],[1541417302616,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541417302616,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541417284279,["gjx16@GJXAIOU",[[1,17509," pop he"]],[17509,17509],[17516,17516]]],[1541417285095,["gjx16@GJXAIOU",[[-1,17514,"he"]],[17516,17516],[17514,17514]]],[1541417291584,["gjx16@GJXAIOU",[[1,17514,"和popitem"]],[17514,17514],[17522,17522]]],[1541417362625,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541417362625,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541417328642,["gjx16@GJXAIOU",[[1,17523,"- \n"]],[17522,17522],[17525,17525]]],[1541417331569,["gjx16@GJXAIOU",[[1,17523,"  "]],[17523,17523],[17525,17525]]],[1541417332394,["gjx16@GJXAIOU",[[1,17527," "]],[17526,17526],[17527,17527]]],[1541417335500,["gjx16@GJXAIOU",[[1,17527,"pop"]],[17527,17527],[17530,17530]]],[1541417336200,["gjx16@GJXAIOU",[[1,17531," "]],[17530,17530],[17531,17531]]],[1541417338065,["gjx16@GJXAIOU",[[1,17531,"ge"]],[17531,17531],[17533,17533]]],[1541417338958,["gjx16@GJXAIOU",[[-1,17531,"ge"]],[17533,17533],[17531,17531]]],[1541417347593,["gjx16@GJXAIOU",[[1,17531,"删除键值对\n  "]],[17531,17531],[17539,17539]]],[1541417350978,["gjx16@GJXAIOU",[[-1,17538,"  "]],[17539,17539],[17537,17537]]],[1541417353164,["gjx16@GJXAIOU",[[1,17537,"```"]],[17537,17537],[17540,17540]]],[1541417353283,["gjx16@GJXAIOU",[[1,17540,"language\n```\n"]],[17540,17540],[17540,17548]]],[1541417354710,["gjx16@GJXAIOU",[[-1,17540,"language"],[1,17548,"p"]],[17540,17548],[17541,17541]]],[1541417355610,["gjx16@GJXAIOU",[[1,17541,"ython"]],[17541,17541],[17546,17546]]],[1541417359000,["gjx16@GJXAIOU",[[1,17547,"\n"]],[17546,17546],[17547,17547]]],[1541418022634,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418022634,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418017257,["gjx16@GJXAIOU",[[1,17547,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误 print(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数 print(a)"]],[17547,17547],[17777,17777]]],[1541418019167,["gjx16@GJXAIOU",[[-1,17547,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误 print(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数 print(a)"]],[17777,17777],[17547,17547]]],[1541418021431,["gjx16@GJXAIOU",[[1,17547,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)"]],[17547,17547],[17777,17777]]],[1541418082631,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418082631,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418026962,["gjx16@GJXAIOU",[[1,17782,"\n"]],[17781,17781],[17782,17782]]],[1541418027689,["gjx16@GJXAIOU",[[1,17782,"c"]],[17782,17782],[17783,17783]]],[1541418028369,["gjx16@GJXAIOU",[[-1,17782,"c"]],[17783,17783],[17782,17782]]],[1541418033743,["gjx16@GJXAIOU",[[1,17782,"程序运行结果："]],[17782,17782],[17789,17789]]],[1541418040504,["gjx16@GJXAIOU",[[1,17790,"\n"]],[17789,17789],[17790,17790]]],[1541418040961,["gjx16@GJXAIOU",[[1,17790,"GJXAIOU\n{'age': 'lalala', 'first': 'second'}\nno find in:'name'\n{'age': 'lalala', 'first': 'second'}"]],[17790,17790],[17889,17889]]],[1541418045841,["gjx16@GJXAIOU",[[1,17790,"·"]],[17790,17790],[17791,17791]]],[1541418047289,["gjx16@GJXAIOU",[[-1,17790,"·"]],[17791,17791],[17790,17790]]],[1541418049445,["gjx16@GJXAIOU",[[1,17790,"`"]],[17790,17790],[17791,17791]]],[1541418050521,["gjx16@GJXAIOU",[[1,17799,"`"]],[17799,17799],[17800,17800]]],[1541418051360,["gjx16@GJXAIOU",[[1,17837,"`"]],[17837,17837],[17838,17838]]],[1541418052005,["gjx16@GJXAIOU",[[1,17856,"`"]],[17856,17856],[17857,17857]]],[1541418055494,["gjx16@GJXAIOU",[[1,17893,"`"]],[17893,17893],[17894,17894]]],[1541418055845,["gjx16@GJXAIOU",[[1,17855,"`"]],[17855,17855],[17856,17856]]],[1541418058361,["gjx16@GJXAIOU",[[1,17836,"`"]],[17836,17836],[17837,17837]]],[1541418059038,["gjx16@GJXAIOU",[[1,17798,"`"]],[17798,17798],[17799,17799]]],[1541418065584,["gjx16@GJXAIOU",[[1,17858,"#zh"]],[17858,17858],[17861,17861]]],[1541418066410,["gjx16@GJXAIOU",[[-1,17859,"zh"]],[17861,17861],[17859,17859]]],[1541418076927,["gjx16@GJXAIOU",[[1,17859,"这里因为上面已经删除了，所有"]],[17859,17859],[17873,17873]]],[1541418078013,["gjx16@GJXAIOU",[[-1,17871,"所有"]],[17873,17873],[17871,17871]]],[1541418079458,["gjx16@GJXAIOU",[[1,17871,"所以"]],[17871,17871],[17873,17873]]],[1541418142635,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418142635,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418084819,["gjx16@GJXAIOU",[[1,17873,"找不到了"]],[17873,17873],[17877,17877]]],[1541418088943,["gjx16@GJXAIOU",[[-1,17917," "],[1,17918,"\n"]],[17918,17918],[17918,17918]]],[1541418096877,["gjx16@GJXAIOU",[[1,17918,"- popitem "]],[17918,17918],[17928,17928]]],[1541418202627,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418202627,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418175059,["gjx16@GJXAIOU",[[1,17929,"- \n"]],[17928,17928],[17931,17931]]],[1541418176809,["gjx16@GJXAIOU",[[-1,17929,"- "]],[17931,17931],[17929,17929]]],[1541418262723,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418262723,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418259775,["gjx16@GJXAIOU",[[1,17929,"···"]],[17929,17929],[17932,17932]]],[1541418261469,["gjx16@GJXAIOU",[[-1,17929,"···"]],[17932,17932],[17929,17929]]],[1541418262473,["gjx16@GJXAIOU",[[1,17929,"`"]],[17929,17929],[17930,17930]]],[1541418322713,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"]],[13224,13224],[14436,14436]]],[1541418322713,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"]],[14436,14436],[13224,13224]]],[1541418263057,["gjx16@GJXAIOU",[[1,17932,"language\n```\n"]],[17932,17932],[17932,17940]]],[1541418264333,["gjx16@GJXAIOU",[[-1,17932,"language"],[1,17940,"p"]],[17932,17940],[17933,17933]]],[1541418265387,["gjx16@GJXAIOU",[[1,17933,"ython"]],[17933,17933],[17938,17938]]],[1541418266551,["gjx16@GJXAIOU",[[1,17939,"\n"]],[17938,17938],[17939,17939]]],[1541418267901,["gjx16@GJXAIOU",[[1,17939,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组"]],[17939,17939],[18052,18052]]],[1541418270873,["gjx16@GJXAIOU",[[-1,17939,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组"]],[18052,18052],[17939,17939]]],[1541418273422,["gjx16@GJXAIOU",[[1,17939,"a ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组"]],[17939,17939],[18052,18052]]],[1541418283552,["gjx16@GJXAIOU",[[1,18073,"\n"]],[18056,18056],[18057,18057]]],[1541418284391,["gjx16@GJXAIOU",[[1,18057,"c"]],[18057,18057],[18058,18058]]],[1541418285019,["gjx16@GJXAIOU",[[-1,18057,"c"]],[18058,18058],[18057,18057]]],[1541418292622,["gjx16@GJXAIOU",[[1,18057,"程序运行结果：``"]],[18057,18057],[18066,18066]]],[1541418294221,["gjx16@GJXAIOU",[[1,18065,"('first', 'second')"]],[18065,18065],[18084,18084]]],[1541418321520,["gjx16@GJXAIOU",[[1,17918,"  "]],[17918,17918],[17920,17920]]],[1541418382717,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"],[1,18087,"\n\n"]],[13224,13224],[18089,18089]]],[1541418382717,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"],[-1,18087,"\n\n"]],[18089,18089],[13224,13224]]],[1541418326745,["gjx16@GJXAIOU",[[1,18104,"\n"]],[18090,18090],[18091,18091]]],[1541418326928,["gjx16@GJXAIOU",[[1,18105,"\n"]],[18091,18091],[18092,18092]]],[1541418338541,["gjx16@GJXAIOU",[[1,18092,"- update :geng"]],[18092,18092],[18106,18106]]],[1541418339926,["gjx16@GJXAIOU",[[-1,18102,"geng"]],[18106,18106],[18102,18102]]],[1541418345674,["gjx16@GJXAIOU",[[1,18102,"更新字典内容"]],[18102,18102],[18108,18108]]],[1541418346568,["gjx16@GJXAIOU",[[1,18109,"- \n"]],[18108,18108],[18111,18111]]],[1541418347474,["gjx16@GJXAIOU",[[-1,18109,"- "]],[18111,18111],[18109,18109]]],[1541418356285,["gjx16@GJXAIOU",[[-1,18122,"\n"]],[18109,18109],[18108,18108]]],[1541418363839,["gjx16@GJXAIOU",[[1,18108,"，函数返回值为NOne"]],[18108,18108],[18119,18119]]],[1541418365375,["gjx16@GJXAIOU",[[-1,18116,"One"]],[18119,18119],[18116,18116]]],[1541418371712,["gjx16@GJXAIOU",[[1,18116,"one即为空"]],[18116,18116],[18122,18122]]],[1541418372993,["gjx16@GJXAIOU",[[-1,18120,"为空"]],[18122,18122],[18120,18120]]],[1541418379832,["gjx16@GJXAIOU",[[1,18120,"没有返回值"]],[18120,18120],[18125,18125]]],[1541418380519,["gjx16@GJXAIOU",[[1,18126,"- \n"]],[18125,18125],[18128,18128]]],[1541418381363,["gjx16@GJXAIOU",[[-1,18126,"- "]],[18128,18128],[18126,18126]]],[1541418622738,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"],[1,18125,"\n"]],[13224,13224],[18126,18126]]],[1541418622738,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"],[-1,18125,"\n"]],[18126,18126],[13224,13224]]],[1541418573977,["gjx16@GJXAIOU",[[1,18126,"```"]],[18126,18126],[18129,18129]]],[1541418574110,["gjx16@GJXAIOU",[[1,18129,"language\n```\n"]],[18129,18129],[18129,18137]]],[1541418576084,["gjx16@GJXAIOU",[[-1,18129,"language"],[1,18137,"p"]],[18129,18137],[18130,18130]]],[1541418577158,["gjx16@GJXAIOU",[[1,18130,"ython"]],[18130,18130],[18135,18135]]],[1541418578326,["gjx16@GJXAIOU",[[1,18136,"\n"]],[18135,18135],[18136,18136]]],[1541418581503,["gjx16@GJXAIOU",[[1,18136,"a ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化"]],[18136,18136],[18257,18257]]],[1541418584615,["gjx16@GJXAIOU",[[1,18276,"\n"]],[18261,18261],[18262,18262]]],[1541418597084,["gjx16@GJXAIOU",[[1,18262,"c"]],[18262,18262],[18263,18263]]],[1541418597684,["gjx16@GJXAIOU",[[-1,18262,"c"]],[18263,18263],[18262,18262]]],[1541418613282,["gjx16@GJXAIOU",[[1,18262,"程序运行结果：``"]],[18262,18262],[18271,18271]]],[1541418615008,["gjx16@GJXAIOU",[[1,18270,"{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}"]],[18270,18270],[18325,18325]]],[1541418682746,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"],[1,18326,"\n"]],[13224,13224],[18327,18327]]],[1541418682746,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"],[-1,18326,"\n"]],[18327,18327],[13224,13224]]],[1541418645507,["gjx16@GJXAIOU",[[1,18328,"##"]],[18328,18328],[18330,18330]]],[1541418646806,["gjx16@GJXAIOU",[[-1,18328,"##"]],[18330,18330],[18328,18328]]],[1541418647665,["gjx16@GJXAIOU",[[1,18341,"\n"]],[18328,18328],[18329,18329]]],[1541418647837,["gjx16@GJXAIOU",[[1,18342,"\n"]],[18329,18329],[18330,18330]]],[1541418648003,["gjx16@GJXAIOU",[[1,18343,"\n"]],[18330,18330],[18331,18331]]],[1541418648307,["gjx16@GJXAIOU",[[1,18344,"\n"]],[18331,18331],[18332,18332]]],[1541418651460,["gjx16@GJXAIOU",[[1,18332,"## 1/"]],[18332,18332],[18337,18337]]],[1541418652448,["gjx16@GJXAIOU",[[-1,18336,"/"]],[18337,18337],[18336,18336]]],[1541418656965,["gjx16@GJXAIOU",[[1,18336,".10 jih"]],[18336,18336],[18343,18343]]],[1541418658072,["gjx16@GJXAIOU",[[-1,18340,"jih"]],[18343,18343],[18340,18340]]],[1541418659824,["gjx16@GJXAIOU",[[1,18340,"集合"]],[18340,18340],[18342,18342]]],[1541418660406,["gjx16@GJXAIOU",[[1,18355,"\n"]],[18342,18342],[18343,18343]]],[1541418676168,["gjx16@GJXAIOU",[[-1,18355,"\n"]],[18343,18343],[18342,18342]]],[1541418677678,["gjx16@GJXAIOU",[[1,18342,"（）"]],[18342,18342],[18344,18344]]],[1541418680564,["gjx16@GJXAIOU",[[1,18343,"set"]],[18343,18343],[18346,18346]]],[1541418682439,["gjx16@GJXAIOU",[[1,18360,"\n"]],[18347,18347],[18348,18348]]],[1541418742737,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541418742737,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541418687350,["gjx16@GJXAIOU",[[1,18348,"有的可变。"]],[18348,18348],[18353,18353]]],[1541418689367,["gjx16@GJXAIOU",[[-1,18348,"有的可变。"]],[18353,18353],[18348,18348]]],[1541418712606,["gjx16@GJXAIOU",[[1,18348,"特点：有的可变、有的不可变、元素无次序。"]],[18348,18348],[18368,18368]]],[1541418713373,["gjx16@GJXAIOU",[[-1,18367,"。"]],[18368,18368],[18367,18367]]],[1541418725395,["gjx16@GJXAIOU",[[1,18367,"、不可重复"]],[18367,18367],[18372,18372]]],[1541418726279,["gjx16@GJXAIOU",[[1,18385,"\n"]],[18372,18372],[18373,18373]]],[1541418726949,["gjx16@GJXAIOU",[[1,18386,"\n"]],[18373,18373],[18374,18374]]],[1541419162745,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541419162745,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541419157831,["gjx16@GJXAIOU",[[-1,16163," "],[1,16164,"\n"]],[16163,16164],[16164,16164]]],[1541422282803,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541422282803,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541422241722,["gjx16@GJXAIOU",[[1,18387,"\n"]],[18372,18372],[18373,18373]]],[1541422261809,["gjx16@GJXAIOU",[[1,18373,"集合没有索引，没有顺序，不属于序列"]],[18373,18373],[18390,18390]]],[1541422882823,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541422882823,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541422847068,["gjx16@GJXAIOU",[[1,18391,"```"]],[18391,18391],[18394,18394]]],[1541422847229,["gjx16@GJXAIOU",[[1,18394,"language\n```\n"]],[18394,18394],[18394,18402]]],[1541422848478,["gjx16@GJXAIOU",[[-1,18394,"language"],[1,18402,"p"]],[18394,18402],[18395,18395]]],[1541422849836,["gjx16@GJXAIOU",[[1,18395,"ython"]],[18395,18395],[18400,18400]]],[1541422850237,["gjx16@GJXAIOU",[[1,18401,"\n"]],[18400,18400],[18401,18401]]],[1541422851966,["gjx16@GJXAIOU",[[1,18401,"#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l   #通过set函数创建 a= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法 b = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改 #使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错 #但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型"]],[18401,18401],[18663,18663]]],[1541422854339,["gjx16@GJXAIOU",[[-1,18401,"#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l   #通过set函数创建 a= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法 b = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改 #使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错 #但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型"]],[18663,18663],[18401,18401]]],[1541422857646,["gjx16@GJXAIOU",[[1,18401,"#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型"]],[18401,18401],[18663,18663]]],[1541422861281,["gjx16@GJXAIOU",[[1,18682,"\n"]],[18667,18667],[18668,18668]]],[1541422881371,["gjx16@GJXAIOU",[[1,18668,"程序运行结果；"]],[18668,18668],[18675,18675]]],[1541422942826,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541422942826,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541422883736,["gjx16@GJXAIOU",[[1,18676,"{'e', 'h', 'd', 'r', 'w', 'l', 'o'}\n<class 'set'>\n{123, 'facd'}"]],[18676,18676],[18739,18739]]],[1541422892591,["gjx16@GJXAIOU",[[1,18676,"`"]],[18676,18676],[18677,18677]]],[1541422893696,["gjx16@GJXAIOU",[[1,18713,"`"]],[18713,18713],[18714,18714]]],[1541422894598,["gjx16@GJXAIOU",[[1,18728,"`"]],[18728,18728],[18729,18729]]],[1541422902115,["gjx16@GJXAIOU",[[1,18742,"`"]],[18742,18742],[18743,18743]]],[1541422902703,["gjx16@GJXAIOU",[[1,18727,"`"]],[18727,18727],[18728,18728]]],[1541422907117,["gjx16@GJXAIOU",[[1,18712,"`"]],[18712,18712],[18713,18713]]],[1541422934009,["gjx16@GJXAIOU",[[1,18714,"\n"]],[18713,18713],[18714,18714]]],[1541422934455,["gjx16@GJXAIOU",[[1,18715,"\n"]],[18714,18714],[18715,18715]]],[1541422935317,["gjx16@GJXAIOU",[[-1,18715,"\n"]],[18715,18715],[18714,18714]]],[1541422935508,["gjx16@GJXAIOU",[[-1,18714,"\n"]],[18714,18714],[18713,18713]]],[1541422938359,["gjx16@GJXAIOU",[[1,18760,"\n"]],[18746,18746],[18747,18747]]],[1541422938555,["gjx16@GJXAIOU",[[1,18761,"\n"]],[18747,18747],[18748,18748]]],[1541422938769,["gjx16@GJXAIOU",[[1,18762,"\n"]],[18748,18748],[18749,18749]]],[1541423002819,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"],[1,18745,"\n"]],[13224,13224],[18746,18746]]],[1541423002819,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"],[-1,18745,"\n"]],[18746,18746],[13224,13224]]],[1541422951175,["gjx16@GJXAIOU",[[1,18763,"\n"]],[18749,18749],[18750,18750]]],[1541422951409,["gjx16@GJXAIOU",[[1,18764,"\n"]],[18750,18750],[18751,18751]]],[1541422951609,["gjx16@GJXAIOU",[[1,18765,"\n"]],[18751,18751],[18752,18752]]],[1541422952367,["gjx16@GJXAIOU",[[-1,18765,"\n"]],[18752,18752],[18751,18751]]],[1541422952829,["gjx16@GJXAIOU",[[-1,18764,"\n"]],[18751,18751],[18750,18750]]],[1541422968225,["gjx16@GJXAIOU",[[1,18750,"### 1.10.2 sret"]],[18750,18750],[18765,18765]]],[1541422969638,["gjx16@GJXAIOU",[[-1,18762,"ret"]],[18765,18765],[18762,18762]]],[1541422973061,["gjx16@GJXAIOU",[[1,18762,"et de"]],[18762,18762],[18767,18767]]],[1541422974193,["gjx16@GJXAIOU",[[-1,18765,"de"]],[18767,18767],[18765,18765]]],[1541422977094,["gjx16@GJXAIOU",[[1,18765,"的方法"]],[18765,18765],[18768,18768]]],[1541422978207,["gjx16@GJXAIOU",[[1,18782,"\n"]],[18768,18768],[18769,18769]]],[1541423062823,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423062823,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423017793,["gjx16@GJXAIOU",[[1,18783,"\n"]],[18769,18769],[18770,18770]]],[1541423028614,["gjx16@GJXAIOU",[[1,18770,"- add和update"]],[18770,18770],[18782,18782]]],[1541423029296,["gjx16@GJXAIOU",[[1,18783,"- \n"]],[18782,18782],[18785,18785]]],[1541423030826,["gjx16@GJXAIOU",[[-1,18783,"- "]],[18785,18785],[18783,18783]]],[1541423542834,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423542834,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423533038,["gjx16@GJXAIOU",[[1,18783,"·"]],[18783,18783],[18784,18784]]],[1541423533916,["gjx16@GJXAIOU",[[-1,18783,"·"]],[18784,18784],[18783,18783]]],[1541423535481,["gjx16@GJXAIOU",[[1,18783,"```"]],[18783,18783],[18786,18786]]],[1541423535647,["gjx16@GJXAIOU",[[1,18786,"language\n```\n"]],[18786,18786],[18786,18794]]],[1541423536343,["gjx16@GJXAIOU",[[-1,18786,"language"],[1,18794,"p"]],[18786,18794],[18787,18787]]],[1541423538848,["gjx16@GJXAIOU",[[1,18787,"ython"]],[18787,18787],[18792,18792]]],[1541423539663,["gjx16@GJXAIOU",[[1,18793,"\n"]],[18792,18792],[18793,18793]]],[1541423602832,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423602832,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423549190,["gjx16@GJXAIOU",[[1,18793,"#如果要创建一个空集合，只能使用set， a_set = {}  #这样默认情况下创建的是字典 print(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合 s.add(\"hello\")#为该集合增加一个元素 print(s)"]],[18793,18793],[18927,18927]]],[1541423550863,["gjx16@GJXAIOU",[[-1,18793,"#如果要创建一个空集合，只能使用set， a_set = {}  #这样默认情况下创建的是字典 print(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合 s.add(\"hello\")#为该集合增加一个元素 print(s)"]],[18927,18927],[18793,18793]]],[1541423553111,["gjx16@GJXAIOU",[[1,18793,"#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)"]],[18793,18793],[18927,18927]]],[1541423555675,["gjx16@GJXAIOU",[[1,18946,"\n"]],[18931,18931],[18932,18932]]],[1541423556461,["gjx16@GJXAIOU",[[1,18932,"c"]],[18932,18932],[18933,18933]]],[1541423557493,["gjx16@GJXAIOU",[[-1,18932,"c"]],[18933,18933],[18932,18932]]],[1541423561867,["gjx16@GJXAIOU",[[1,18932,"程序运算"]],[18932,18932],[18936,18936]]],[1541423565484,["gjx16@GJXAIOU",[[-1,18934,"运算"]],[18936,18936],[18934,18934]]],[1541423568848,["gjx16@GJXAIOU",[[1,18934,"运行结果："]],[18934,18934],[18939,18939]]],[1541423579520,["gjx16@GJXAIOU",[[1,18954,"\n"]],[18939,18939],[18940,18940]]],[1541423580352,["gjx16@GJXAIOU",[[1,18940,"<class 'dict'>\n<class 'set'>\n{'hello'}"]],[18940,18940],[18978,18978]]],[1541423584736,["gjx16@GJXAIOU",[[1,18940,"·"]],[18940,18940],[18941,18941]]],[1541423586087,["gjx16@GJXAIOU",[[-1,18940,"·"]],[18941,18941],[18940,18940]]],[1541423587309,["gjx16@GJXAIOU",[[1,18940,"`"]],[18940,18940],[18941,18941]]],[1541423588385,["gjx16@GJXAIOU",[[1,18956,"`"]],[18956,18956],[18957,18957]]],[1541423589117,["gjx16@GJXAIOU",[[1,18971,"`"]],[18971,18971],[18972,18972]]],[1541423591762,["gjx16@GJXAIOU",[[1,18981,"`"]],[18981,18981],[18982,18982]]],[1541423593357,["gjx16@GJXAIOU",[[1,18970,"`"]],[18970,18970],[18971,18971]]],[1541423594143,["gjx16@GJXAIOU",[[1,18955,"`"]],[18955,18955],[18956,18956]]],[1541423598230,["gjx16@GJXAIOU",[[1,18999,"\n"]],[18984,18984],[18985,18985]]],[1541423598782,["gjx16@GJXAIOU",[[1,19000,"\n"]],[18985,18985],[18986,18986]]],[1541423599496,["gjx16@GJXAIOU",[[1,19001,"\n"]],[18986,18986],[18987,18987]]],[1541423601524,["gjx16@GJXAIOU",[[1,18987,"-"]],[18987,18987],[18988,18988]]],[1541423662836,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423662836,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423608512,["gjx16@GJXAIOU",[[1,18988," update "]],[18988,18988],[18996,18996]]],[1541423609397,["gjx16@GJXAIOU",[[1,18997,"- \n"]],[18996,18996],[18999,18999]]],[1541423610626,["gjx16@GJXAIOU",[[-1,18997,"- "]],[18999,18999],[18997,18997]]],[1541423842844,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423842844,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423831011,["gjx16@GJXAIOU",[[1,18997,"```"]],[18997,18997],[19000,19000]]],[1541423831166,["gjx16@GJXAIOU",[[1,19000,"language\n```\n"]],[19000,19000],[19000,19008]]],[1541423832605,["gjx16@GJXAIOU",[[-1,19000,"language"],[1,19008,"p"]],[19000,19008],[19001,19001]]],[1541423833900,["gjx16@GJXAIOU",[[1,19001,"ython"]],[19001,19001],[19006,19006]]],[1541423835199,["gjx16@GJXAIOU",[[1,19007,"\n"]],[19006,19006],[19007,19007]]],[1541423902843,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423902843,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423845995,["gjx16@GJXAIOU",[[1,19007,"s1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)"]],[19007,19007],[19125,19125]]],[1541423849533,["gjx16@GJXAIOU",[[1,19145,"\n"]],[19129,19129],[19130,19130]]],[1541423850358,["gjx16@GJXAIOU",[[1,19130,"c"]],[19130,19130],[19131,19131]]],[1541423850807,["gjx16@GJXAIOU",[[-1,19130,"c"]],[19131,19131],[19130,19130]]],[1541423856555,["gjx16@GJXAIOU",[[1,19130,"程序运行结果；"]],[19130,19130],[19137,19137]]],[1541423857774,["gjx16@GJXAIOU",[[-1,19136,"；"]],[19137,19137],[19136,19136]]],[1541423858773,["gjx16@GJXAIOU",[[1,19136,"："]],[19136,19136],[19137,19137]]],[1541423860189,["gjx16@GJXAIOU",[[1,19153,"\n"]],[19137,19137],[19138,19138]]],[1541423883708,["gjx16@GJXAIOU",[[1,19138,"{'c', 'd', 'b', 'a'}\n{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}\n{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}·"]],[19138,19138],[19247,19247]]],[1541423885011,["gjx16@GJXAIOU",[[-1,19246,"·"]],[19247,19247],[19246,19246]]],[1541423885535,["gjx16@GJXAIOU",[[1,19246,"`"]],[19246,19246],[19247,19247]]],[1541423886378,["gjx16@GJXAIOU",[[1,19199,"`"]],[19199,19199],[19200,19200]]],[1541423886965,["gjx16@GJXAIOU",[[1,19158,"`"]],[19158,19158],[19159,19159]]],[1541423898013,["gjx16@GJXAIOU",[[1,19138,"`"]],[19138,19138],[19139,19139]]],[1541423899015,["gjx16@GJXAIOU",[[1,19161,"`"]],[19161,19161],[19162,19162]]],[1541423900606,["gjx16@GJXAIOU",[[1,19204,"`"]],[19204,19204],[19205,19205]]],[1541423962847,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541423962847,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423927765,["gjx16@GJXAIOU",[[1,19268,"\n"]],[19252,19252],[19253,19253]]],[1541423928030,["gjx16@GJXAIOU",[[1,19269,"\n"]],[19253,19253],[19254,19254]]],[1541423929357,["gjx16@GJXAIOU",[[1,19270,"\n"]],[19254,19254],[19255,19255]]],[1541423935813,["gjx16@GJXAIOU",[[1,19255,"- pop/"]],[19255,19255],[19261,19261]]],[1541423937091,["gjx16@GJXAIOU",[[-1,19260,"/"]],[19261,19261],[19260,19260]]],[1541423949677,["gjx16@GJXAIOU",[[1,19260,",remove,discard."]],[19260,19260],[19276,19276]]],[1541423950759,["gjx16@GJXAIOU",[[-1,19275,"."]],[19276,19276],[19275,19275]]],[1541423951568,["gjx16@GJXAIOU",[[1,19275,","]],[19275,19275],[19276,19276]]],[1541424022842,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541424022842,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541423978046,["gjx16@GJXAIOU",[[1,19276,"clr"]],[19276,19276],[19279,19279]]],[1541423978635,["gjx16@GJXAIOU",[[-1,19278,"r"]],[19279,19279],[19278,19278]]],[1541423979502,["gjx16@GJXAIOU",[[1,19278,"ear"]],[19278,19278],[19281,19281]]],[1541423982827,["gjx16@GJXAIOU",[[1,19282,"- \n"]],[19281,19281],[19284,19284]]],[1541423984172,["gjx16@GJXAIOU",[[-1,19282,"- "]],[19284,19284],[19282,19282]]],[1541423984794,["gjx16@GJXAIOU",[[-1,19297,"\n"]],[19282,19282],[19281,19281]]],[1541423985918,["gjx16@GJXAIOU",[[1,19282,"- \n"]],[19281,19281],[19284,19284]]],[1541423987044,["gjx16@GJXAIOU",[[-1,19282,"- "]],[19284,19284],[19282,19282]]],[1541425102870,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541425102870,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541425079275,["gjx16@GJXAIOU",[[1,19282,"```"]],[19282,19282],[19285,19285]]],[1541425079427,["gjx16@GJXAIOU",[[1,19285,"language\n```\n"]],[19285,19285],[19285,19293]]],[1541425080645,["gjx16@GJXAIOU",[[-1,19285,"language"],[1,19293,"p"]],[19285,19293],[19286,19286]]],[1541425081787,["gjx16@GJXAIOU",[[1,19286,"ython"]],[19286,19286],[19291,19291]]],[1541425082547,["gjx16@GJXAIOU",[[1,19292,"\n"]],[19291,19291],[19292,19292]]],[1541425083716,["gjx16@GJXAIOU",[[1,19292,"#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错 b_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错 b_set.remove(\"d\")#删除指定的值 print(b_set)\n\n#discard :没有返回值，有就删除，没有就什么都不做 b_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素 b_set.clear()\nprint(b_set)"]],[19292,19292],[19579,19579]]],[1541425085577,["gjx16@GJXAIOU",[[-1,19292,"#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错 b_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错 b_set.remove(\"d\")#删除指定的值 print(b_set)\n\n#discard :没有返回值，有就删除，没有就什么都不做 b_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素 b_set.clear()\nprint(b_set)"]],[19579,19579],[19292,19292]]],[1541425087943,["gjx16@GJXAIOU",[[1,19292,"#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)"]],[19292,19292],[19580,19580]]],[1541425090426,["gjx16@GJXAIOU",[[1,19601,"\n"]],[19584,19584],[19585,19585]]],[1541425092119,["gjx16@GJXAIOU",[[1,19585,"chen"]],[19585,19585],[19589,19589]]],[1541425094736,["gjx16@GJXAIOU",[[-1,19585,"chen"]],[19589,19589],[19585,19585]]],[1541425101793,["gjx16@GJXAIOU",[[1,19585,"程序运行结果；"]],[19585,19585],[19592,19592]]],[1541425162861,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541425162861,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541425103076,["gjx16@GJXAIOU",[[-1,19591,"；"]],[19592,19592],[19591,19591]]],[1541425103676,["gjx16@GJXAIOU",[[1,19591,"："]],[19591,19591],[19592,19592]]],[1541425104941,["gjx16@GJXAIOU",[[1,19609,"\n"]],[19592,19592],[19593,19593]]],[1541425125191,["gjx16@GJXAIOU",[[1,19593,"·"]],[19593,19593],[19594,19594]]],[1541425126202,["gjx16@GJXAIOU",[[-1,19593,"·"]],[19594,19594],[19593,19593]]],[1541425126908,["gjx16@GJXAIOU",[[1,19593,"~·"]],[19593,19593],[19595,19595]]],[1541425128017,["gjx16@GJXAIOU",[[-1,19593,"~·"]],[19595,19595],[19593,19593]]],[1541425131221,["gjx16@GJXAIOU",[[1,19593,"```"]],[19593,19593],[19596,19596]]],[1541425131302,["gjx16@GJXAIOU",[[1,19596,"language\n```\n"]],[19596,19596],[19596,19604]]],[1541425133704,["gjx16@GJXAIOU",[[-1,19593,"```language"]],[19596,19604],[19593,19593]]],[1541425139669,["gjx16@GJXAIOU",[[-1,19594,"```"]],[19597,19597],[19594,19594]]],[1541425140280,["gjx16@GJXAIOU",[[-1,19611,"\n"]],[19594,19594],[19593,19593]]],[1541425141508,["gjx16@GJXAIOU",[[1,19593,"e\n{'o', 'h', 'l', 'r', 'w'}\n{'o', 'h', 'l', 'w'}\nset()"]],[19593,19593],[19647,19647]]],[1541425144664,["gjx16@GJXAIOU",[[1,19593,"`"]],[19593,19593],[19594,19594]]],[1541425145472,["gjx16@GJXAIOU",[[1,19596,"`"]],[19596,19596],[19597,19597]]],[1541425146128,["gjx16@GJXAIOU",[[1,19623,"`"]],[19623,19623],[19624,19624]]],[1541425146810,["gjx16@GJXAIOU",[[1,19645,"`"]],[19645,19645],[19646,19646]]],[1541425149426,["gjx16@GJXAIOU",[[1,19651,"`"]],[19651,19651],[19652,19652]]],[1541425152598,["gjx16@GJXAIOU",[[1,19644,"`"]],[19644,19644],[19645,19645]]],[1541425154444,["gjx16@GJXAIOU",[[1,19622,"`"]],[19622,19622],[19623,19623]]],[1541425155017,["gjx16@GJXAIOU",[[1,19595,"`"]],[19595,19595],[19596,19596]]],[1541425222871,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541425222871,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541425166846,["gjx16@GJXAIOU",[[1,19673,"\n"]],[19656,19656],[19657,19657]]],[1541425167101,["gjx16@GJXAIOU",[[1,19674,"\n"]],[19657,19657],[19658,19658]]],[1541425167303,["gjx16@GJXAIOU",[[1,19675,"\n"]],[19658,19658],[19659,19659]]],[1541425167501,["gjx16@GJXAIOU",[[1,19676,"\n"]],[19659,19659],[19660,19660]]],[1541425173676,["gjx16@GJXAIOU",[[1,19660,"1.10.3"]],[19660,19660],[19666,19666]]],[1541425180189,["gjx16@GJXAIOU",[[1,19660,"### "]],[19660,19660],[19664,19664]]],[1541425185099,["gjx16@GJXAIOU",[[1,19670," shiyon"]],[19670,19670],[19677,19677]]],[1541425187043,["gjx16@GJXAIOU",[[-1,19671,"shiyon"]],[19677,19677],[19671,19671]]],[1541425216107,["gjx16@GJXAIOU",[[1,19671,"使用frozenset创建不可变结合"]],[19671,19671],[19689,19689]]],[1541425217084,["gjx16@GJXAIOU",[[-1,19687,"结合"]],[19689,19689],[19687,19687]]],[1541425218819,["gjx16@GJXAIOU",[[1,19687,"集合"]],[19687,19687],[19689,19689]]],[1541425282873,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541425282873,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541425230252,["gjx16@GJXAIOU",[[1,19706,"\n"]],[19689,19689],[19690,19690]]],[1541425230436,["gjx16@GJXAIOU",[[1,19707,"\n"]],[19690,19690],[19691,19691]]],[1541425230756,["gjx16@GJXAIOU",[[1,19708,"\n"]],[19691,19691],[19692,19692]]],[1541425231043,["gjx16@GJXAIOU",[[1,19709,"\n"]],[19692,19692],[19693,19693]]],[1541425236930,["gjx16@GJXAIOU",[[1,19693,"### 1.10.3"]],[19693,19693],[19703,19703]]],[1541425237420,["gjx16@GJXAIOU",[[-1,19702,"3"]],[19703,19703],[19702,19702]]],[1541425238210,["gjx16@GJXAIOU",[[1,19702,"4 "]],[19702,19702],[19704,19704]]],[1541425239360,["gjx16@GJXAIOU",[[-1,19703," "]],[19704,19704],[19703,19703]]],[1541425243530,["gjx16@GJXAIOU",[[1,19703," 集合运算"]],[19703,19703],[19708,19708]]],[1541425243908,["gjx16@GJXAIOU",[[1,19725,"\n"]],[19708,19708],[19709,19709]]],[1541425244378,["gjx16@GJXAIOU",[[1,19726,"\n"]],[19709,19709],[19710,19710]]],[1541425260460,["gjx16@GJXAIOU",[[1,19710,"- 元素与集合的关系"]],[19710,19710],[19720,19720]]],[1541425260870,["gjx16@GJXAIOU",[[1,19721,"- \n"]],[19720,19720],[19723,19723]]],[1541425269453,["gjx16@GJXAIOU",[[1,19723,"集合与集合的关系"]],[19723,19723],[19731,19731]]],[1541425271307,["gjx16@GJXAIOU",[[1,19723,"\n- "]],[19720,19720],[19723,19723]]],[1541425272174,["gjx16@GJXAIOU",[[-1,19721,"- "]],[19723,19723],[19721,19721]]],[1541425272360,["gjx16@GJXAIOU",[[-1,19721,"\n"]],[19721,19721],[19720,19720]]],[1541425273532,["gjx16@GJXAIOU",[[1,19723,"\n- "]],[19720,19720],[19723,19723]]],[1541425275840,["gjx16@GJXAIOU",[[-1,19721,"- "]],[19723,19723],[19721,19721]]],[1541425276229,["gjx16@GJXAIOU",[[1,19722,"\n"]],[19721,19721],[19722,19722]]],[1541425402869,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541425402869,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541425350340,["gjx16@GJXAIOU",[[1,19721,"·"]],[19721,19721],[19722,19722]]],[1541425350984,["gjx16@GJXAIOU",[[-1,19721,"·"]],[19722,19722],[19721,19721]]],[1541425352816,["gjx16@GJXAIOU",[[1,19721,"```"]],[19721,19721],[19724,19724]]],[1541425352962,["gjx16@GJXAIOU",[[1,19724,"language\n```\n"]],[19724,19724],[19724,19732]]],[1541425353801,["gjx16@GJXAIOU",[[-1,19724,"language"],[1,19732,"p"]],[19724,19732],[19725,19725]]],[1541425355096,["gjx16@GJXAIOU",[[1,19725,"ython"]],[19725,19725],[19730,19730]]],[1541425355599,["gjx16@GJXAIOU",[[1,19731,"\n"]],[19730,19730],[19731,19731]]],[1541425357157,["gjx16@GJXAIOU",[[1,19731,"#判断元素是否在集合中 b_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)"]],[19731,19731],[19806,19806]]],[1541425360003,["gjx16@GJXAIOU",[[1,19743,"\n"]],[19743,19743],[19744,19744]]],[1541425362147,["gjx16@GJXAIOU",[[1,19814,"\n"]],[19811,19811],[19812,19812]]],[1541425363556,["gjx16@GJXAIOU",[[1,19812,"chen"]],[19812,19812],[19816,19816]]],[1541425364786,["gjx16@GJXAIOU",[[-1,19812,"chen"]],[19816,19816],[19812,19812]]],[1541425365196,["gjx16@GJXAIOU",[[-1,19814,"\n"]],[19812,19812],[19811,19811]]],[1541425366279,["gjx16@GJXAIOU",[[1,19814,"\n"]],[19811,19811],[19812,19812]]],[1541425379561,["gjx16@GJXAIOU",[[1,19812,"程序运行结果：``"]],[19812,19812],[19821,19821]]],[1541425382129,["gjx16@GJXAIOU",[[1,19820,"True"]],[19820,19820],[19824,19824]]],[1541425387218,["gjx16@GJXAIOU",[[1,19839,"- \n"]],[19838,19838],[19841,19841]]],[1541425388248,["gjx16@GJXAIOU",[[-1,19840," "]],[19841,19841],[19840,19840]]],[1541425390475,["gjx16@GJXAIOU",[[1,19839,"  "]],[19839,19839],[19841,19841]]],[1541425397259,["gjx16@GJXAIOU",[[1,19842," shi"]],[19842,19842],[19846,19846]]],[1541425400977,["gjx16@GJXAIOU",[[-1,19841,"- shi"]],[19846,19846],[19841,19841]]],[1541426243126,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541426243126,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541426237544,["gjx16@GJXAIOU",[[-1,19839,"  "]],[19841,19841],[19839,19839]]],[1541426238993,["gjx16@GJXAIOU",[[1,19839,"·"]],[19839,19839],[19840,19840]]],[1541426239863,["gjx16@GJXAIOU",[[-1,19839,"·"]],[19840,19840],[19839,19839]]],[1541426240608,["gjx16@GJXAIOU",[[1,19839,"~·"]],[19839,19839],[19841,19841]]],[1541426241560,["gjx16@GJXAIOU",[[-1,19839,"~·"]],[19841,19841],[19839,19839]]],[1541426242748,["gjx16@GJXAIOU",[[1,19839,"··"]],[19839,19839],[19841,19841]]],[1541426303114,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541426303114,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541426243503,["gjx16@GJXAIOU",[[-1,19839,"··"]],[19841,19841],[19839,19839]]],[1541426245461,["gjx16@GJXAIOU",[[1,19839,"```"]],[19839,19839],[19842,19842]]],[1541426245558,["gjx16@GJXAIOU",[[1,19842,"language\n```\n"]],[19842,19842],[19842,19850]]],[1541426246959,["gjx16@GJXAIOU",[[-1,19842,"language"],[1,19850,"p"]],[19842,19850],[19843,19843]]],[1541426248203,["gjx16@GJXAIOU",[[1,19843,"ython"]],[19843,19843],[19848,19848]]],[1541426248866,["gjx16@GJXAIOU",[[1,19849,"\n"]],[19848,19848],[19849,19849]]],[1541426253236,["gjx16@GJXAIOU",[[1,19849,"#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n\n\n\n"]],[19849,19849],[20748,20748]]],[1541426258809,["gjx16@GJXAIOU",[[-1,20748,"\n"]],[20748,20748],[20747,20747]]],[1541426258993,["gjx16@GJXAIOU",[[-1,20747,"\n"]],[20747,20747],[20746,20746]]],[1541426259200,["gjx16@GJXAIOU",[[-1,20746,"\n"]],[20746,20746],[20745,20745]]],[1541426260142,["gjx16@GJXAIOU",[[-1,20745,"\n"]],[20745,20745],[20744,20744]]],[1541426262896,["gjx16@GJXAIOU",[[1,20766,"\n"]],[20748,20748],[20749,20749]]],[1541426264741,["gjx16@GJXAIOU",[[1,20749,"cheng"]],[20749,20749],[20754,20754]]],[1541426267230,["gjx16@GJXAIOU",[[-1,20749,"cheng"]],[20754,20754],[20749,20749]]],[1541426272036,["gjx16@GJXAIOU",[[1,20749,"程序运行结果："]],[20749,20749],[20756,20756]]],[1541426272761,["gjx16@GJXAIOU",[[1,20774,"\n"]],[20756,20756],[20757,20757]]],[1541426285606,["gjx16@GJXAIOU",[[1,20757,"False\nFalse\n{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}\n{'e', 'd'}\n{'g', 'k'}\n{'w', 'h', 'r', 'o', 'l'}\n{'w', 'h', 'r', 'o', 'k', 'l', 'g'}"]],[20757,20757],[20898,20898]]],[1541426288402,["gjx16@GJXAIOU",[[1,20757,"·"]],[20757,20757],[20758,20758]]],[1541426289734,["gjx16@GJXAIOU",[[-1,20757,"·"]],[20758,20758],[20757,20757]]],[1541426290063,["gjx16@GJXAIOU",[[1,20757,"\n"]],[20757,20757],[20758,20758]]],[1541426292349,["gjx16@GJXAIOU",[[-1,20757,"\n"]],[20758,20758],[20757,20757]]],[1541426294090,["gjx16@GJXAIOU",[[1,20757,"·"]],[20757,20757],[20758,20758]]],[1541426295422,["gjx16@GJXAIOU",[[-1,20757,"·"]],[20758,20758],[20757,20757]]],[1541426295898,["gjx16@GJXAIOU",[[1,20757,"`"]],[20757,20757],[20758,20758]]],[1541426297723,["gjx16@GJXAIOU",[[1,20764,"`"]],[20764,20764],[20765,20765]]],[1541426298497,["gjx16@GJXAIOU",[[1,20771,"`"]],[20771,20771],[20772,20772]]],[1541426299157,["gjx16@GJXAIOU",[[1,20818,"`"]],[20818,20818],[20819,20819]]],[1541426299783,["gjx16@GJXAIOU",[[1,20830,"`"]],[20830,20830],[20831,20831]]],[1541426300385,["gjx16@GJXAIOU",[[1,20842,"`"]],[20842,20842],[20843,20843]]],[1541426301036,["gjx16@GJXAIOU",[[1,20869,"`"]],[20869,20869],[20870,20870]]],[1541426363105,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541426363105,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541426304832,["gjx16@GJXAIOU",[[1,20905,"`"]],[20905,20905],[20906,20906]]],[1541426305364,["gjx16@GJXAIOU",[[1,20868,"`"]],[20868,20868],[20869,20869]]],[1541426306137,["gjx16@GJXAIOU",[[1,20841,"`"]],[20841,20841],[20842,20842]]],[1541426306739,["gjx16@GJXAIOU",[[1,20829,"`"]],[20829,20829],[20830,20830]]],[1541426311164,["gjx16@GJXAIOU",[[1,20817,"`"]],[20817,20817],[20818,20818]]],[1541426311721,["gjx16@GJXAIOU",[[1,20770,"`"]],[20770,20770],[20771,20771]]],[1541426312416,["gjx16@GJXAIOU",[[1,20763,"`"]],[20763,20763],[20764,20764]]],[1541428043288,[null,[[-1,13224,"和"],[1,13225,"\n"],[-1,13331," \n"],[1,13333,"字符"],[-1,14434,"\n"],[1,14435,"，"],[-1,17932,"\n\n"],[1,17934,"``"]],[13224,13224],[17936,17936]]],[1541428043288,[null,[[1,13224,"和"],[-1,13224,"\n"],[1,13331," \n"],[-1,13331,"字符"],[1,14434,"\n"],[-1,14434,"，"],[1,17932,"\n\n"],[-1,17932,"``"]],[17936,17936],[13224,13224]]],[1541427986875,["gjx16@GJXAIOU",[[1,14,"**"],[1,26,"**"]],[14,26],[14,30]]],[1541428026847,["gjx16@GJXAIOU",[[1,31,"#3"]],[31,31],[33,33]]],[1541428027947,["gjx16@GJXAIOU",[[-1,32,"3"]],[33,33],[32,32]]],[1541428038800,["gjx16@GJXAIOU",[[1,32,"# 1.1 数和四则运算"]],[32,32],[44,44]]],[1541428043003,["gjx16@GJXAIOU",[[1,31,"\n"]],[31,31],[32,32]]],[1541428103277,[null,[[-1,13242,"和"],[1,13243,"\n"],[-1,13349," \n"],[1,13351,"字符"],[-1,14452,"\n"],[1,14453,"，"],[-1,17950,"\n\n"],[1,17952,"``"]],[13242,13242],[17954,17954]]],[1541428103277,[null,[[1,13242,"和"],[-1,13242,"\n"],[1,13349," \n"],[-1,13349,"字符"],[1,14452,"\n"],[-1,14452,"，"],[1,17950,"\n\n"],[-1,17950,"``"]],[17954,17954],[13242,13242]]],[1541428044691,["gjx16@GJXAIOU",[[1,46,"\n"]],[46,46],[47,47]]],[1541428102579,["gjx16@GJXAIOU",[[-1,1384,"## python中的标准库"]],[1384,1398],[1384,1384]]],[1541428163273,[null,[[-1,13229,"和"],[1,13230,"\n"],[-1,13336," \n"],[1,13338,"字符"],[-1,14439,"\n"],[1,14440,"，"],[-1,17937,"\n\n"],[1,17939,"``"]],[13229,13229],[17941,17941]]],[1541428163273,[null,[[1,13229,"和"],[-1,13229,"\n"],[1,13336," \n"],[-1,13336,"字符"],[1,14439,"\n"],[-1,14439,"，"],[1,17937,"\n\n"],[-1,17937,"``"]],[17941,17941],[13229,13229]]],[1541428108586,["gjx16@GJXAIOU",[[-1,1386,"1"]],[1387,1387],[1386,1386]]],[1541428114309,["gjx16@GJXAIOU",[[-1,1386,".**"]],[1389,1389],[1386,1386]]],[1541428116983,["gjx16@GJXAIOU",[[-1,1400,"**"]],[1402,1402],[1400,1400]]],[1541428124520,["gjx16@GJXAIOU",[[1,1386,"## 1.3 "]],[1386,1386],[1393,1393]]],[1541428216616,[null,[[-1,13230,"和"],[1,13231,"\n"],[-1,13337," \n"],[1,13339,"字符"],[-1,14440,"\n"],[1,14441,"，"],[-1,17938,"\n\n"],[1,17940,"``"]],[13230,13230],[17942,17942]]],[1541428216616,[null,[[1,13230,"和"],[-1,13230,"\n"],[1,13337," \n"],[-1,13337,"字符"],[1,14440,"\n"],[-1,14440,"，"],[1,17938,"\n\n"],[-1,17938,"``"]],[17942,17942],[13230,13230]]],[1541428179972,["gjx16@GJXAIOU",[[1,62,"**"],[1,73,"**"]],[62,73],[62,77]]],[1541428194087,["gjx16@GJXAIOU",[[1,78,"\n"]],[77,77],[78,78]]],[1541428210364,["gjx16@GJXAIOU",[[1,256,"\n"]],[255,255],[256,256]]]],null,"gjx16@GJXAIOU"],["21485471-085e-442d-96d0-b673c0678f35",1541498985339,"# 第1章 基本对象类型\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个对象在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.**对象有类型，变量无类型**\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 `**` 表示乘幂 ，等效于`pow()`函数，当然要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算到 数有没有浮点数==\n\n9、`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10、python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n12.针对python中的浮点数问题\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python import decimal\na = decimal.Decimal(\"10.0\")\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python from fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU #coding:utf-8 #!/usr/bin/env python print(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 字符串\n\n1.字符串使用单引号或者双引号包裹，\n\n当字符串内部含有其中一种符号时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先`+`两边的对象给的数据类型必须一致 ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；`repr()`函数作用是返回一个字符串对象；[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续航，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()**返回的结果为字符串类型的对象\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU #coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \n ans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \n print(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s`\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\npython(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n#切片\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，但是如果为数值型就会报错\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1541498940850,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1541498941577,["gjx16@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1541498974139,["gjx16@GJXAIOU",[[1,148,"**"],[1,150,"**"]],[148,150],[148,154]]],[1541498995524,["gjx16@GJXAIOU",[[1,265,"===="]],[265,265],[267,267]]],[1541498996678,["gjx16@GJXAIOU",[[-1,267,"=="]],[267,267],[265,265]]],[1541499001024,["gjx16@GJXAIOU",[[1,282,"===="]],[282,282],[284,284]]],[1541499002177,["gjx16@GJXAIOU",[[-1,284,"=="]],[284,284],[282,282]]],[1541499026543,["gjx16@GJXAIOU",[[-1,436,"到 "]],[438,438],[436,436]]],[1541499026793,["gjx16@GJXAIOU",[[1,436,"d"]],[436,436],[437,437]]],[1541499028274,["gjx16@GJXAIOU",[[-1,436,"d"]],[437,437],[436,436]]],[1541499029291,["gjx16@GJXAIOU",[[1,436,"的"]],[436,436],[437,437]]],[1541499042360,["gjx16@GJXAIOU",[[1,350,"，"]],[350,350],[351,351]]],[1541499045732,["gjx16@GJXAIOU",[[-1,350,"，"]],[351,351],[350,350]]],[1541499046387,["gjx16@GJXAIOU",[[1,350,"；"]],[350,350],[351,351]]],[1541499061186,["gjx16@GJXAIOU",[[1,377,"使用的时候"]],[377,377],[382,382]]],[1541499096732,["gjx16@GJXAIOU",[[-1,455,"、"]],[456,456],[455,455]]],[1541499097156,["gjx16@GJXAIOU",[[1,455,"。"]],[455,455],[456,456]]],[1541499098373,["gjx16@GJXAIOU",[[-1,455,"。"]],[456,456],[455,455]]],[1541499098825,["gjx16@GJXAIOU",[[1,455,"."]],[455,455],[456,456]]],[1541499105004,["gjx16@GJXAIOU",[[-1,489,"、"]],[490,490],[489,489]]],[1541499106089,["gjx16@GJXAIOU",[[1,489,"."]],[489,489],[490,490]]],[1541499151725,["gjx16@GJXAIOU",[[1,788,"\n"]],[788,788],[789,789]]],[1541499158885,["gjx16@GJXAIOU",[[1,803," #dao"]],[803,803],[808,808]]],[1541499159959,["gjx16@GJXAIOU",[[-1,805,"dao"]],[808,808],[805,805]]],[1541499165446,["gjx16@GJXAIOU",[[1,789,"\n"]],[789,789],[790,790]]],[1541499176043,["gjx16@GJXAIOU",[[1,806,"导入这和="]],[806,806],[811,811]]],[1541499177123,["gjx16@GJXAIOU",[[-1,807,"入这和="]],[811,811],[807,807]]],[1541499182258,["gjx16@GJXAIOU",[[1,807,"入e"]],[807,807],[809,809]]],[1541499183689,["gjx16@GJXAIOU",[[-1,808,"e"]],[809,809],[808,808]]],[1541499193626,["gjx16@GJXAIOU",[[1,808,"decimal 模块"]],[808,808],[818,818]]],[1541499201680,["gjx16@GJXAIOU",[[1,846," #shiyong"]],[846,846],[855,855]]],[1541499204014,["gjx16@GJXAIOU",[[-1,848,"shiyong"]],[855,855],[848,848]]],[1541499209759,["gjx16@GJXAIOU",[[1,848,"使用decimao"]],[848,848],[857,857]]],[1541499210460,["gjx16@GJXAIOU",[[-1,856,"o"]],[857,857],[856,856]]],[1541499211186,["gjx16@GJXAIOU",[[1,856,"."]],[856,856],[857,857]]],[1541499212097,["gjx16@GJXAIOU",[[-1,856,"."]],[857,857],[856,856]]],[1541499225318,["gjx16@GJXAIOU",[[1,856,"l模块中的Decima"]],[856,856],[867,867]]],[1541499228290,["gjx16@GJXAIOU",[[1,868,"函数"]],[868,868],[870,870]]],[1541499256745,["gjx16@GJXAIOU",[[1,965,"：使用"]],[965,965],[968,968]]],[1541499266014,["gjx16@GJXAIOU",[[1,1043,"\n"]],[1043,1043],[1044,1044]]],[1541499345621,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"]],[867,867],[1045,1045]]],[1541499345621,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"]],[1045,1045],[867,867]]],[1541499289930,["gjx16@GJXAIOU",[[1,1194,"\n"]],[1194,1194],[1195,1195]]],[1541499291599,["gjx16@GJXAIOU",[[-1,1195," "]],[1196,1196],[1195,1195]]],[1541499297752,["gjx16@GJXAIOU",[[1,1209,"、"]],[1209,1209],[1210,1210]]],[1541499297939,["gjx16@GJXAIOU",[[1,1210,"\n"]],[1210,1210],[1211,1211]]],[1541499299562,["gjx16@GJXAIOU",[[-1,1210,"\n"]],[1211,1211],[1210,1210]]],[1541499300060,["gjx16@GJXAIOU",[[-1,1209,"、"]],[1210,1210],[1209,1209]]],[1541499301054,["gjx16@GJXAIOU",[[1,1209,"\n"]],[1209,1209],[1210,1210]]],[1541499307396,["gjx16@GJXAIOU",[[1,1232,"\n"]],[1232,1232],[1233,1233]]],[1541499323388,["gjx16@GJXAIOU",[[1,1364,"\n"]],[1364,1364],[1365,1365]]],[1541499326513,["gjx16@GJXAIOU",[[1,1379,"\n"]],[1379,1379],[1380,1380]]],[1541499330116,["gjx16@GJXAIOU",[[1,1402,"\n"]],[1402,1402],[1403,1403]]],[1541500485645,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"]],[867,867],[1404,1404]]],[1541500485645,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"]],[1404,1404],[867,867]]],[1541500449457,["gjx16@GJXAIOU",[[1,1452,"round"]],[1452,1452],[1457,1457]]],[1541500452778,["gjx16@GJXAIOU",[[-1,1452,"round"]],[1457,1457],[1452,1452]]],[1541500454456,["gjx16@GJXAIOU",[[1,1452,"【"]],[1452,1452],[1453,1453]]],[1541500455322,["gjx16@GJXAIOU",[[-1,1452,"【"]],[1453,1453],[1452,1452]]],[1541500460371,["gjx16@GJXAIOU",[[1,1452,"![]("]],[1452,1452],[1456,1456]]],[1541500460456,["gjx16@GJXAIOU",[[1,1456,"https://)"]],[1456,1456],[1456,1464]]],[1541500463466,["gjx16@GJXAIOU",[[1,1464,"blog.csdn.net/gaojixu/article/details/83792109"]],[1456,1464],[1510,1510]]],[1541500473594,["gjx16@GJXAIOU",[[1,1454,"round()shiyong"]],[1454,1454],[1468,1468]]],[1541500478717,["gjx16@GJXAIOU",[[-1,1461,"shiyong"]],[1468,1468],[1461,1461]]],[1541500482444,["gjx16@GJXAIOU",[[1,1461,"使用方法"]],[1461,1461],[1465,1465]]],[1541500545643,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"],[-1,1449,"\n"],[1,1522,"\n"]],[867,867],[1523,1523]]],[1541500545644,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"],[1,1450,"\n"],[-1,1522,"\n"]],[1523,1523],[867,867]]],[1541500505461,["gjx16@GJXAIOU",[[1,1523,"[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)"]],[1523,1523],[1592,1592]]],[1541500511722,["gjx16@GJXAIOU",[[-1,1452,"![round()使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)"]],[1452,1522],[1452,1452]]],[1541500519626,["gjx16@GJXAIOU",[[1,1584,"\n"]],[1584,1584],[1585,1585]]],[1541500605645,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"],[-1,1452,"\n"],[1,1524,"\n"],[-1,1583,"#"],[1,1585,"#"]],[867,867],[1586,1586]]],[1541500605645,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"],[1,1453,"\n"],[-1,1524,"\n"],[1,1584,"#"],[-1,1585,"#"]],[1586,1586],[867,867]]],[1541500595143,["gjx16@GJXAIOU",[[1,2353,"1.4 "]],[2353,2353],[2357,2357]]],[1541500665649,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"],[-1,1452,"\n"],[1,1524,"\n"],[-1,1583,"#"],[1,1585,"#"],[-1,2352,"一"],[1,2357,"一"]],[867,867],[2358,2358]]],[1541500665649,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"],[1,1453,"\n"],[-1,1524,"\n"],[1,1584,"#"],[-1,1585,"#"],[1,2353,"一"],[-1,2357,"一"]],[2358,2358],[867,867]]],[1541500607929,["gjx16@GJXAIOU",[[1,2593,"1.5 "]],[2593,2593],[2597,2597]]],[1541500725648,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"],[-1,1452,"\n"],[1,1524,"\n"],[-1,1583,"#"],[1,1585,"#"],[-1,2352,"一"],[1,2357,"一"],[-1,2592,"字"],[1,2597,"字"]],[867,867],[2598,2598]]],[1541500725648,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"],[1,1453,"\n"],[-1,1524,"\n"],[1,1584,"#"],[-1,1585,"#"],[1,2353,"一"],[-1,2357,"一"],[1,2593,"字"],[-1,2597,"字"]],[2598,2598],[867,867]]],[1541500675035,["gjx16@GJXAIOU",[[1,2393,"序称为脚本程序（script）"]],[2378,2394],[2393,2393]]],[1541500678054,["gjx16@GJXAIOU",[[-1,2393,"序称为脚本程序（script）"]],[2393,2393],[2378,2394]]],[1541500785648,[null,[[-1,867,"\n"],[1,868,"l"],[1,870,"\n"],[-1,964,"`"],[1,968,"`"],[-1,1042,"f"],[1,1044,"f"],[-1,1193," "],[1,1195,"#"],[-1,1208,"#"],[1,1210,"#"],[-1,1231,"p"],[1,1233,"p"],[-1,1363,"#"],[1,1365,"#"],[-1,1378,"#"],[1,1380,"#"],[-1,1401,"p"],[1,1403,"p"],[-1,1452,"\n"],[1,1524,"\n"],[-1,1583,"#"],[1,1585,"#"],[-1,2352,"一"],[1,2357,"一"],[-1,2592,"字"],[1,2597,"字"]],[867,867],[2598,2598]]],[1541500785648,[null,[[1,867,"\n"],[-1,867,"l"],[-1,870,"\n"],[1,965,"`"],[-1,968,"`"],[1,1043,"f"],[-1,1044,"f"],[1,1194," "],[-1,1195,"#"],[1,1209,"#"],[-1,1210,"#"],[1,1232,"p"],[-1,1233,"p"],[1,1364,"#"],[-1,1365,"#"],[1,1379,"#"],[-1,1380,"#"],[1,1402,"p"],[-1,1403,"p"],[1,1453,"\n"],[-1,1524,"\n"],[1,1584,"#"],[-1,1585,"#"],[1,2353,"一"],[-1,2357,"一"],[1,2593,"字"],[-1,2597,"字"]],[2598,2598],[867,867]]],[1541500750296,["gjx16@GJXAIOU",[[1,689,"python以双精度64为"]],[689,689],[702,702]]],[1541500750950,["gjx16@GJXAIOU",[[-1,701,"为"]],[702,702],[701,701]]],[1541500773688,["gjx16@GJXAIOU",[[1,701,"位表示浮点数，默认的小数精度为17为"]],[701,701],[719,719]]],[1541500774202,["gjx16@GJXAIOU",[[-1,718,"为"]],[719,719],[718,718]]],[1541500776688,["gjx16@GJXAIOU",[[1,718,"位，"]],[718,718],[720,720]]],[1541500845650,[null,[[-1,898,"\n"],[1,899,"l"],[1,901,"\n"],[-1,995,"`"],[1,999,"`"],[-1,1073,"f"],[1,1075,"f"],[-1,1224," "],[1,1226,"#"],[-1,1239,"#"],[1,1241,"#"],[-1,1262,"p"],[1,1264,"p"],[-1,1394,"#"],[1,1396,"#"],[-1,1409,"#"],[1,1411,"#"],[-1,1432,"p"],[1,1434,"p"],[-1,1483,"\n"],[1,1555,"\n"],[-1,1614,"#"],[1,1616,"#"],[-1,2383,"一"],[1,2388,"一"],[-1,2623,"字"],[1,2628,"字"]],[898,898],[2629,2629]]],[1541500845650,[null,[[1,898,"\n"],[-1,898,"l"],[-1,901,"\n"],[1,996,"`"],[-1,999,"`"],[1,1074,"f"],[-1,1075,"f"],[1,1225," "],[-1,1226,"#"],[1,1240,"#"],[-1,1241,"#"],[1,1263,"p"],[-1,1264,"p"],[1,1395,"#"],[-1,1396,"#"],[1,1410,"#"],[-1,1411,"#"],[1,1433,"p"],[-1,1434,"p"],[1,1484,"\n"],[-1,1555,"\n"],[1,1615,"#"],[-1,1616,"#"],[1,2384,"一"],[-1,2388,"一"],[1,2624,"字"],[-1,2628,"字"]],[2629,2629],[898,898]]],[1541500787085,["gjx16@GJXAIOU",[[1,720,"多以"]],[720,720],[722,722]]],[1541500788150,["gjx16@GJXAIOU",[[-1,720,"多以"]],[722,722],[720,720]]],[1541500794615,["gjx16@GJXAIOU",[[1,720,"所以电脑中一"]],[720,720],[726,726]]],[1541500795105,["gjx16@GJXAIOU",[[-1,725,"一"]],[726,726],[725,725]]],[1541500809507,["gjx16@GJXAIOU",[[1,725,"以二进制进行保存的时候会丢带哦"]],[725,725],[740,740]]],[1541500811180,["gjx16@GJXAIOU",[[-1,737,"丢带哦"]],[740,740],[737,737]]],[1541500841247,["gjx16@GJXAIOU",[[1,737,"丢掉后面的一部分，造成存储的实际上就有误差；"]],[737,737],[759,759]]],[1541500842545,["gjx16@GJXAIOU",[[1,760,"\n"]],[759,759],[760,760]]],[1541500905672,[null,[[-1,938,"\n"],[1,939,"l"],[1,941,"\n"],[-1,1035,"`"],[1,1039,"`"],[-1,1113,"f"],[1,1115,"f"],[-1,1264," "],[1,1266,"#"],[-1,1279,"#"],[1,1281,"#"],[-1,1302,"p"],[1,1304,"p"],[-1,1434,"#"],[1,1436,"#"],[-1,1449,"#"],[1,1451,"#"],[-1,1472,"p"],[1,1474,"p"],[-1,1523,"\n"],[1,1595,"\n"],[-1,1654,"#"],[1,1656,"#"],[-1,2423,"一"],[1,2428,"一"],[-1,2663,"字"],[1,2668,"字"]],[938,938],[2669,2669]]],[1541500905672,[null,[[1,938,"\n"],[-1,938,"l"],[-1,941,"\n"],[1,1036,"`"],[-1,1039,"`"],[1,1114,"f"],[-1,1115,"f"],[1,1265," "],[-1,1266,"#"],[1,1280,"#"],[-1,1281,"#"],[1,1303,"p"],[-1,1304,"p"],[1,1435,"#"],[-1,1436,"#"],[1,1450,"#"],[-1,1451,"#"],[1,1473,"p"],[-1,1474,"p"],[1,1524,"\n"],[-1,1595,"\n"],[1,1655,"#"],[-1,1656,"#"],[1,2424,"一"],[-1,2428,"一"],[1,2664,"字"],[-1,2668,"字"]],[2669,2669],[938,938]]],[1541500849113,["gjx16@GJXAIOU",[[1,670,"**"],[1,688,"**"]],[670,688],[670,692]]],[1541501746037,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"]],[942,942],[2673,2673]]],[1541501746037,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"]],[2673,2673],[942,942]]],[1541501711861,["gjx16@GJXAIOU",[[-1,2677,"1.字符串使用单引号或者双引号包裹，"],[1,2695," round(2.635, 2)\n2.63\n round(2.645, 2)\n2.65\n round(2.655, 2)\n2.65\n round(2.665, 2)\n2.67\n round(2.675, 2)\n2.67\n"]],[2677,2695],[2787,2787]]],[1541501713972,["gjx16@GJXAIOU",[[1,2677,"1.字符串使用单引号或者双引号包裹，"],[-1,2677," round(2.635, 2)\n2.63\n round(2.645, 2)\n2.65\n round(2.655, 2)\n2.65\n round(2.665, 2)\n2.67\n round(2.675, 2)\n2.67\n"]],[2787,2787],[2677,2695]]],[1541501714624,["gjx16@GJXAIOU",[[1,2677,"**"],[1,2695,"**"]],[2677,2695],[2677,2699]]],[1541501719042,["gjx16@GJXAIOU",[[1,2715,"（）"]],[2715,2715],[2717,2717]]],[1541501730910,["gjx16@GJXAIOU",[[1,2716,"单引号或者双引号"]],[2716,2716],[2724,2724]]],[1541502106032,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"]],[942,942],[2726,2726]]],[1541502106032,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"]],[2726,2726],[942,942]]],[1541502053504,["gjx16@GJXAIOU",[[1,2795,"\n"]],[2795,2795],[2796,2796]]],[1541502226034,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"]],[942,942],[2797,2797]]],[1541502226034,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"]],[2797,2797],[942,942]]],[1541502166025,["gjx16@GJXAIOU",[[1,3196,"**"],[1,3214,"**"]],[3196,3214],[3196,3218]]],[1541502172163,["gjx16@GJXAIOU",[[1,3196," "]],[3196,3196],[3197,3197]]],[1541502173738,["gjx16@GJXAIOU",[[1,3220," "]],[3220,3220],[3221,3221]]],[1541502189904,["gjx16@GJXAIOU",[[1,3264,"\n"]],[3264,3264],[3265,3265]]],[1541502192407,["gjx16@GJXAIOU",[[1,3288,"\n"]],[3288,3288],[3289,3289]]],[1541502214550,["gjx16@GJXAIOU",[[-1,3385,"航"]],[3386,3386],[3385,3385]]],[1541502217197,["gjx16@GJXAIOU",[[1,3385,"行"]],[3385,3385],[3386,3386]]],[1541502286041,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"],[-1,3195,"`"],[1,3199,"`"],[-1,3216," "],[-1,3219,"， "],[1,3221,"  ，"],[-1,3263,"`"],[1,3265,"`"],[-1,3287,"["],[1,3289,"["],[-1,3384,"航"],[1,3386,"，"]],[942,942],[3387,3387]]],[1541502286041,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"],[1,3196,"`"],[-1,3199,"`"],[1,3217," "],[1,3219,"， "],[-1,3219,"  ，"],[1,3264,"`"],[-1,3265,"`"],[1,3288,"["],[-1,3289,"["],[1,3385,"航"],[-1,3386,"，"]],[3387,3387],[942,942]]],[1541502246967,["gjx16@GJXAIOU",[[1,3500,"\n"]],[3500,3500],[3501,3501]]],[1541502275026,["gjx16@GJXAIOU",[[-1,3447,"**"],[-1,3457,"**"]],[3447,3473],[3447,3455]]],[1541502277170,["gjx16@GJXAIOU",[[-1,3447,"input ()"],[1,3455,"小数点后第三位为5，所以看小数点后第2位为3（奇数），所以第三位的5直接舍弃"]],[3447,3455],[3485,3485]]],[1541502278891,["gjx16@GJXAIOU",[[1,3447,"input ()"],[-1,3447,"小数点后第三位为5，所以看小数点后第2位为3（奇数），所以第三位的5直接舍弃"]],[3485,3485],[3447,3455]]],[1541502284601,["gjx16@GJXAIOU",[[1,3447,"**"],[1,3469,"**"]],[3447,3469],[3447,3473]]],[1541502406038,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"],[-1,3195,"`"],[1,3199,"`"],[-1,3216," "],[1,3219,"  "],[-1,3220," "],[-1,3263,"`"],[1,3265,"`"],[-1,3287,"["],[1,3289,"["],[-1,3384,"航"],[1,3386,"，"],[-1,3448,"*"],[1,3457,"返"],[-1,3470,"\n"],[1,3473,"\n"],[-1,3499,"#"],[1,3501,"#"]],[942,942],[3502,3502]]],[1541502406038,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"],[1,3196,"`"],[-1,3199,"`"],[1,3217," "],[-1,3219,"  "],[1,3222," "],[1,3264,"`"],[-1,3265,"`"],[1,3288,"["],[-1,3289,"["],[1,3385,"航"],[-1,3386,"，"],[1,3449,"*"],[-1,3457,"返"],[1,3471,"\n"],[-1,3473,"\n"],[1,3500,"#"],[-1,3501,"#"]],[3502,3502],[942,942]]],[1541502374353,["gjx16@GJXAIOU",[[1,3981,"```python"]],[3981,3981],[3990,3990]]],[1541502375010,["gjx16@GJXAIOU",[[1,3993,"\n"]],[3990,3990],[3991,3991]]],[1541502375551,["gjx16@GJXAIOU",[[1,3994,"\n"]],[3991,3991],[3992,3992]]],[1541502376261,["gjx16@GJXAIOU",[[1,3992,"```"]],[3992,3992],[3995,3995]]],[1541502379850,["gjx16@GJXAIOU",[[1,3991,"a= "]],[3991,3991],[3994,3994]]],[1541502381567,["gjx16@GJXAIOU",[[-1,3992,"= "]],[3994,3994],[3992,3992]]],[1541502387015,["gjx16@GJXAIOU",[[1,3992," = r\"\""]],[3992,3992],[3998,3998]]],[1541502391530,["gjx16@GJXAIOU",[[1,3997,"hello"]],[3997,3997],[4002,4002]]],[1541502393777,["gjx16@GJXAIOU",[[1,4004,"\n"]],[4003,4003],[4004,4004]]],[1541502404021,["gjx16@GJXAIOU",[[1,3997,"c:\\"]],[3997,3997],[4000,4000]]],[1541502466038,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"],[-1,3195,"`"],[1,3199,"`"],[-1,3216," "],[1,3219,"  "],[-1,3220," "],[-1,3263,"`"],[1,3265,"`"],[-1,3287,"["],[1,3289,"["],[-1,3384,"航"],[1,3386,"，"],[-1,3448,"*"],[1,3457,"返"],[-1,3470,"\n"],[1,3473,"\n"],[-1,3499,"#"],[1,3501,"#"],[-1,3980,"\n"],[-1,4011,"7"],[1,4014,"\n7"]],[942,942],[4016,4016]]],[1541502466038,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"],[1,3196,"`"],[-1,3199,"`"],[1,3217," "],[-1,3219,"  "],[1,3222," "],[1,3264,"`"],[-1,3265,"`"],[1,3288,"["],[-1,3289,"["],[1,3385,"航"],[-1,3386,"，"],[1,3449,"*"],[-1,3457,"返"],[1,3471,"\n"],[-1,3473,"\n"],[1,3500,"#"],[-1,3501,"#"],[1,3981,"\n"],[1,4011,"7"],[-1,4013,"\n7"]],[4016,4016],[942,942]]],[1541502413439,["gjx16@GJXAIOU",[[1,4007,"print()"]],[4007,4007],[4014,4014]]],[1541502415271,["gjx16@GJXAIOU",[[1,4013,"a"]],[4013,4013],[4014,4014]]],[1541502417482,["gjx16@GJXAIOU",[[1,4022,"\n"]],[4019,4019],[4020,4020]]],[1541502423419,["gjx16@GJXAIOU",[[1,4020,"cheng"]],[4020,4020],[4025,4025]]],[1541502425127,["gjx16@GJXAIOU",[[-1,4020,"cheng"]],[4025,4025],[4020,4020]]],[1541502432352,["gjx16@GJXAIOU",[[1,4020,"程序运行结果：``"]],[4020,4020],[4029,4029]]],[1541502436331,["gjx16@GJXAIOU",[[1,4028,"c\"::"]],[4028,4028],[4032,4032]]],[1541502437718,["gjx16@GJXAIOU",[[-1,4029,"\"::"]],[4032,4032],[4029,4029]]],[1541502441405,["gjx16@GJXAIOU",[[1,4029,":\\hello"]],[4029,4029],[4036,4036]]],[1541502526040,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"],[-1,3195,"`"],[1,3199,"`"],[-1,3216," "],[1,3219,"  "],[-1,3220," "],[-1,3263,"`"],[1,3265,"`"],[-1,3287,"["],[1,3289,"["],[-1,3384,"航"],[1,3386,"，"],[-1,3448,"*"],[1,3457,"返"],[-1,3470,"\n"],[1,3473,"\n"],[-1,3499,"#"],[1,3501,"#"],[-1,3980,"\n"],[-1,4019,"7"],[1,4020,"\n"],[1,4040,"7"]],[942,942],[4041,4041]]],[1541502526041,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"],[1,3196,"`"],[-1,3199,"`"],[1,3217," "],[-1,3219,"  "],[1,3222," "],[1,3264,"`"],[-1,3265,"`"],[1,3288,"["],[-1,3289,"["],[1,3385,"航"],[-1,3386,"，"],[1,3449,"*"],[-1,3457,"返"],[1,3471,"\n"],[-1,3473,"\n"],[1,3500,"#"],[-1,3501,"#"],[1,3981,"\n"],[1,4019,"7"],[-1,4019,"\n"],[-1,4040,"7"]],[4041,4041],[942,942]]],[1541502486686,["gjx16@GJXAIOU",[[1,4131,"\n"]],[4131,4131],[4132,4132]]],[1541502507519,["gjx16@GJXAIOU",[[-1,4362," "]],[4363,4363],[4362,4362]]],[1541502510567,["gjx16@GJXAIOU",[[-1,4406," "]],[4407,4407],[4406,4406]]],[1541502766044,[null,[[-1,942,"\n"],[1,943,"l"],[1,945,"\n"],[-1,1039,"`"],[1,1043,"`"],[-1,1117,"f"],[1,1119,"f"],[-1,1268," "],[1,1270,"#"],[-1,1283,"#"],[1,1285,"#"],[-1,1306,"p"],[1,1308,"p"],[-1,1438,"#"],[1,1440,"#"],[-1,1453,"#"],[1,1455,"#"],[-1,1476,"p"],[1,1478,"p"],[-1,1527,"\n"],[1,1599,"\n"],[-1,1658,"#"],[1,1660,"#"],[-1,2427,"一"],[1,2432,"一"],[-1,2667,"字"],[1,2672,"字"],[-1,2676,"1"],[1,2700,"\n"],[-1,2714,"时"],[1,2725,"时"],[-1,2794,"#"],[1,2796,"#"],[-1,3195,"`"],[1,3199,"`"],[-1,3216," "],[1,3219,"  "],[-1,3220," "],[-1,3263,"`"],[1,3265,"`"],[-1,3287,"["],[1,3289,"["],[-1,3384,"航"],[1,3386,"，"],[-1,3448,"*"],[1,3457,"返"],[-1,3470,"\n"],[1,3473,"\n"],[-1,3499,"#"],[1,3501,"#"],[-1,3980,"\n"],[-1,4019,"7"],[1,4020,"\n"],[1,4040,"7"],[-1,4130,"#"],[1,4132,"#"],[-1,4361," "],[1,4362,"a"],[-1,4405," "],[1,4406,"p"]],[942,942],[4407,4407]]],[1541502766044,[null,[[1,942,"\n"],[-1,942,"l"],[-1,945,"\n"],[1,1040,"`"],[-1,1043,"`"],[1,1118,"f"],[-1,1119,"f"],[1,1269," "],[-1,1270,"#"],[1,1284,"#"],[-1,1285,"#"],[1,1307,"p"],[-1,1308,"p"],[1,1439,"#"],[-1,1440,"#"],[1,1454,"#"],[-1,1455,"#"],[1,1477,"p"],[-1,1478,"p"],[1,1528,"\n"],[-1,1599,"\n"],[1,1659,"#"],[-1,1660,"#"],[1,2428,"一"],[-1,2432,"一"],[1,2668,"字"],[-1,2672,"字"],[1,2677,"1"],[-1,2700,"\n"],[1,2715,"时"],[-1,2725,"时"],[1,2795,"#"],[-1,2796,"#"],[1,3196,"`"],[-1,3199,"`"],[1,3217," "],[-1,3219,"  "],[1,3222," "],[1,3264,"`"],[-1,3265,"`"],[1,3288,"["],[-1,3289,"["],[1,3385,"航"],[-1,3386,"，"],[1,3449,"*"],[-1,3457,"返"],[1,3471,"\n"],[-1,3473,"\n"],[1,3500,"#"],[-1,3501,"#"],[1,3981,"\n"],[1,4019,"7"],[-1,4019,"\n"],[-1,4040,"7"],[1,4131,"#"],[-1,4132,"#"],[1,4362," "],[-1,4362,"a"],[1,4406," "],[-1,4406,"p"]],[4407,4407],[942,942]]],[1541502740819,["gjx16@GJXAIOU",[[1,5903," ,butui"]],[5903,5903],[5910,5910]]],[1541502742423,["gjx16@GJXAIOU",[[-1,5905,"butui"]],[5910,5910],[5905,5905]]],[1541502743686,["gjx16@GJXAIOU",[[1,5905,"()"]],[5905,5905],[5907,5907]]],[1541502749214,["gjx16@GJXAIOU",[[1,5906,"不推荐使用"]],[5906,5906],[5911,5911]]]],null,"gjx16@GJXAIOU"],["cb0cb1e2-bc62-42d3-a420-b95eedea4764",1543232901989,"\n\n# 第1章 基本对象类型\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `inport module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n\n2.**运算优先级 **\n见书P25-26页\n实在不行先加括号\n\n\n\n\n## 1.4 一个简单的程序\n\n1、未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹，**\n\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**  ，例如都是数字就是加法，字符串就是拼接\n\n- `str()` 实现将整数转换为字符串；\n`repr()`函数作用是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列：**有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：**序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\npython(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n#切片\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，但是如果为数值型就会报错\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1543232883278,["gjx16@GJXAIOU",[[-1,0,"\n"]],[1,1],[0,0]]],[1543233258452,["gjx16@GJXAIOU",[[-1,551,"n"]],[552,552],[551,551]]],[1543233259023,["gjx16@GJXAIOU",[[1,551,"m"]],[551,551],[552,552]]],[1543233317491,["gjx16@GJXAIOU",[[-1,668,"\n"]],[668,668],[667,667]]],[1543233406602,["gjx16@GJXAIOU",[[1,795,"fangfa"]],[795,795],[801,801]]],[1543233409436,["gjx16@GJXAIOU",[[-1,795,"fangfa"]],[801,801],[795,795]]],[1543233440776,["gjx16@GJXAIOU",[[1,795,"方法，导入decimal"]],[795,795],[807,807]]],[1543233514836,["gjx16@GJXAIOU",[[-1,1369,"\n"]],[1368,1368],[1367,1367]]],[1543233516020,["gjx16@GJXAIOU",[[-1,1368,"\n"]],[1367,1367],[1366,1366]]],[1543233910126,["gjx16@GJXAIOU",[[1,1606,"round()如果只有一个数作为参数，不指定位数的时候：\n返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n当指定取舍的小数点位数的时候：\n一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n--------------------- \n作者：GJXAIOU \n来源：CSDN \n原文：https://blog.csdn.net/gaojixu/article/details/83792109 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[1606,1606],[1905,1905]]],[1543233912857,["gjx16@GJXAIOU",[[1,1606,"- "]],[1606,1606],[1608,1608]]],[1543233917258,["gjx16@GJXAIOU",[[1,1702,"- "]],[1702,1702],[1704,1704]]],[1543233919263,["gjx16@GJXAIOU",[[1,1637,"  "]],[1637,1637],[1639,1639]]],[1543233921036,["gjx16@GJXAIOU",[[1,1722,"  "]],[1722,1722],[1724,1724]]],[1543233925280,["gjx16@GJXAIOU",[[-1,1785,"--------------------- \n作者：GJXAIOU \n来源：CSDN \n原文：https://blog.csdn.net/gaojixu/article/details/83792109 \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[1785,1913],[1785,1785]]],[1543234106764,["gjx16@GJXAIOU",[[-1,2576,"2."]],[2578,2578],[2576,2576]]],[1543234111186,["gjx16@GJXAIOU",[[1,2578,"2."]],[2578,2578],[2580,2580]]],[1543234117112,["gjx16@GJXAIOU",[[-1,2585," "]],[2586,2586],[2585,2585]]],[1543234128012,["gjx16@GJXAIOU",[[-1,2610,"\n"]],[2610,2610],[2609,2609]]],[1543234128508,["gjx16@GJXAIOU",[[-1,2609,"\n"]],[2609,2609],[2608,2608]]],[1543234131924,["gjx16@GJXAIOU",[[-1,2575,"\n"]],[2575,2575],[2574,2574]]],[1543234150332,["gjx16@GJXAIOU",[[-1,2625,"、"]],[2626,2626],[2625,2625]]],[1543234152138,["gjx16@GJXAIOU",[[1,2625,"。"]],[2625,2625],[2626,2626]]],[1543234153816,["gjx16@GJXAIOU",[[-1,2625,"。"]],[2626,2626],[2625,2625]]],[1543234154628,["gjx16@GJXAIOU",[[1,2625,"."]],[2625,2625],[2626,2626]]],[1543234275756,["gjx16@GJXAIOU",[[-1,2883,"\n"]],[2883,2883],[2882,2882]]],[1543234280923,["gjx16@GJXAIOU",[[-1,2879,"，"]],[2880,2880],[2879,2879]]],[1543234318704,["gjx16@GJXAIOU",[[1,2942,".,"]],[2942,2942],[2944,2944]]],[1543234319934,["gjx16@GJXAIOU",[[-1,2942,".,"]],[2944,2944],[2942,2942]]],[1543234324812,["gjx16@GJXAIOU",[[1,2942,",xiangdang"]],[2942,2942],[2952,2952]]],[1543234329443,["gjx16@GJXAIOU",[[-1,2943,"xiangdang"]],[2952,2952],[2943,2943]]],[1543234340090,["gjx16@GJXAIOU",[[1,2943,"相当于转义字符"]],[2943,2943],[2950,2950]]],[1543234570956,["gjx16@GJXAIOU",[[1,3430,"；"]],[3430,3430],[3431,3431]]],[1543235122064,[null,[[1,2950,"。"],[-1,3429,"\n"],[1,3431,"\n"]],[2950,2950],[3432,3432]]],[1543235122065,[null,[[-1,2950,"。"],[1,3430,"\n"],[-1,3431,"\n"]],[3432,3432],[2950,2950]]],[1543235104092,["gjx16@GJXAIOU",[[-1,4237,"："]],[4238,4238],[4237,4237]]],[1543235104759,["gjx16@GJXAIOU",[[1,4237,"："]],[4237,4237],[4238,4238]]],[1543235109180,["gjx16@GJXAIOU",[[-1,4237,"："]],[4238,4238],[4237,4237]]],[1543235110301,["gjx16@GJXAIOU",[[1,4237,":"]],[4237,4237],[4238,4238]]],[1543235115891,["gjx16@GJXAIOU",[[1,4240," "]],[4240,4240],[4241,4241]]],[1543235119026,["gjx16@GJXAIOU",[[1,4272," "]],[4272,4272],[4273,4273]]],[1543236262073,[null,[[1,2950,"。"],[-1,3429,"\n"],[1,3431,"\n"],[-1,4236,"："],[-1,4239,"有 "],[1,4241,"* 有"],[-1,4271,"序"],[1,4273,"序"]],[2950,2950],[4274,4274]]],[1543236262073,[null,[[-1,2950,"。"],[1,3430,"\n"],[-1,3431,"\n"],[1,4237,"："],[1,4239,"有 "],[-1,4239,"* 有"],[1,4272,"序"],[-1,4273,"序"]],[4274,4274],[2950,2950]]],[1543236224924,["gjx16@GJXAIOU",[[-1,8930,"ython"]],[8935,8935],[8930,8930]]],[1543236226611,["gjx16@GJXAIOU",[[1,8930,"rint"]],[8930,8930],[8934,8934]]],[1543236322071,[null,[[1,2950,"。"],[-1,3429,"\n"],[1,3431,"\n"],[-1,4236,"："],[-1,4239,"有 "],[1,4241,"* 有"],[-1,4271,"序"],[1,4273,"序"],[-1,8929,"y"],[1,8934,"("]],[2950,2950],[8935,8935]]],[1543236322071,[null,[[-1,2950,"。"],[1,3430,"\n"],[-1,3431,"\n"],[1,4237,"："],[1,4239,"有 "],[-1,4239,"* 有"],[1,4272,"序"],[-1,4273,"序"],[1,8930,"y"],[-1,8934,"("]],[8935,8935],[2950,2950]]],[1543236276143,["gjx16@GJXAIOU",[[1,9184,"**congka"]],[9184,9184],[9192,9192]]],[1543236279715,["gjx16@GJXAIOU",[[-1,9184,"**congka"]],[9192,9192],[9184,9184]]],[1543236286118,["gjx16@GJXAIOU",[[1,9236,"\n"]],[9235,9235],[9236,9236]]],[1543236288095,["gjx16@GJXAIOU",[[1,9232,"\n"]],[9232,9232],[9233,9233]]],[1543236622069,[null,[[1,2950,"。"],[-1,3429,"\n"],[1,3431,"\n"],[-1,4236,"："],[-1,4239,"有 "],[1,4241,"* 有"],[-1,4271,"序"],[1,4273,"序"],[-1,8929,"y"],[1,8934,"("],[-1,9231,"#"],[1,9233,"#"],[-1,9236,"#"],[1,9238,"#"]],[2950,2950],[9239,9239]]],[1543236622069,[null,[[-1,2950,"。"],[1,3430,"\n"],[-1,3431,"\n"],[1,4237,"："],[1,4239,"有 "],[-1,4239,"* 有"],[1,4272,"序"],[-1,4273,"序"],[1,8930,"y"],[-1,8934,"("],[1,9232,"#"],[-1,9233,"#"],[1,9237,"#"],[-1,9238,"#"]],[9239,9239],[2950,2950]]],[1543236583358,["gjx16@GJXAIOU",[[1,9872,"\n"]],[9871,9871],[9872,9872]]],[1543236587038,["gjx16@GJXAIOU",[[1,9872,"#zhuyi"]],[9872,9872],[9878,9878]]],[1543236590855,["gjx16@GJXAIOU",[[-1,9873,"zhuyi"]],[9878,9878],[9873,9873]]],[1543236601209,["gjx16@GJXAIOU",[[1,9873,"注意比较两个的不同"]],[9873,9873],[9882,9882]]]],null,"gjx16@GJXAIOU"],["012bc486-7f9c-4f17-b7e6-4dd93baaf5f8",1543293305876,"\n# 第1章 基本对象类型\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**  ，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串；\n`repr()`函数作用是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，但是如果为数值型就会报错\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1543293265056,["gjx16@GJXAIOU",[[1,17587,"@toc"]],[17587,17587],[17591,17591]]],[1543293317434,["gjx16@GJXAIOU",[[-1,17587,"@toc"]],[17587,17591],[17587,17587]]],[1543293328275,["gjx16@GJXAIOU",[[1,15,"\n"]],[14,14],[15,15]]],[1543293331598,["gjx16@GJXAIOU",[[1,15,"@toc"]],[15,15],[19,19]]],[1543293332347,["gjx16@GJXAIOU",[[1,20,"\n"]],[19,19],[20,20]]]],null,"gjx16@GJXAIOU"],["2e9a937f-9484-46ea-b911-5b17deecb2f6",1544757069158,"\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**  ，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串；\n`repr()`函数作用是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右所有的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除左边的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除右边的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，但是如果为数值型就会报错\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1544757024455,["gjx16@GJXAIOU",[[1,7443,"- \n"]],[7442,7442],[7445,7445]]],[1544757024960,["gjx16@GJXAIOU",[[1,7445,"-"]],[7445,7445],[7446,7446]]],[1544757026044,["gjx16@GJXAIOU",[[-1,7445,"-"]],[7446,7446],[7445,7445]]],[1544757027359,["gjx16@GJXAIOU",[[1,7443,"  "]],[7445,7445],[7447,7447]]],[1544757030559,["gjx16@GJXAIOU",[[1,7447,"dany"]],[7447,7447],[7451,7451]]],[1544757031742,["gjx16@GJXAIOU",[[-1,7447,"dany"]],[7451,7451],[7447,7447]]],[1544757040397,["gjx16@GJXAIOU",[[1,7447,"单一分隔符：使用 ``"]],[7447,7447],[7458,7458]]],[1544757041459,["gjx16@GJXAIOU",[[1,7457,"s"]],[7457,7457],[7458,7458]]],[1544757042586,["gjx16@GJXAIOU",[[-1,7457,"s"]],[7458,7458],[7457,7457]]],[1544757051254,["gjx16@GJXAIOU",[[1,7457,"str.split()"]],[7457,7457],[7468,7468]]],[1544757111208,["gjx16@GJXAIOU",[[1,7751,"\n"]],[7750,7750],[7751,7751]]],[1544757113207,["gjx16@GJXAIOU",[[1,7751,"  `"]],[7751,7751],[7754,7754]]],[1544757114109,["gjx16@GJXAIOU",[[-1,7753,"`"]],[7754,7754],[7753,7753]]],[1544757120061,["gjx16@GJXAIOU",[[1,7753,"- 多个分割符"]],[7753,7753],[7760,7760]]],[1544757120940,["gjx16@GJXAIOU",[[1,7761,"  - \n"]],[7760,7760],[7765,7765]]],[1544757124787,["gjx16@GJXAIOU",[[-1,7762," - "]],[7765,7765],[7762,7762]]],[1544757126132,["gjx16@GJXAIOU",[[1,7762,"·"]],[7762,7762],[7763,7763]]],[1544757126852,["gjx16@GJXAIOU",[[-1,7762,"·"]],[7763,7763],[7762,7762]]],[1544757129349,["gjx16@GJXAIOU",[[1,7762,"```"]],[7762,7762],[7765,7765]]],[1544757133015,["gjx16@GJXAIOU",[[-1,7761," "]],[7762,7762],[7761,7761]]],[1544757137740,["gjx16@GJXAIOU",[[1,7764,"pyhton"]],[7764,7764],[7770,7770]]],[1544757137970,["gjx16@GJXAIOU",[[1,7771,"\n"]],[7770,7770],[7771,7771]]],[1544757138397,["gjx16@GJXAIOU",[[1,7772,"\n"]],[7771,7771],[7772,7772]]],[1544757139178,["gjx16@GJXAIOU",[[1,7772,"```"]],[7772,7772],[7775,7775]]],[1544757150638,["gjx16@GJXAIOU",[[1,7771,"str= \"python,is a python.lan\" "]],[7771,7771],[7801,7801]]],[1544757160423,["gjx16@GJXAIOU",[[1,7760,":shiyong"]],[7760,7760],[7768,7768]]],[1544757163652,["gjx16@GJXAIOU",[[-1,7761,"shiyong"]],[7768,7768],[7761,7761]]],[1544757167890,["gjx16@GJXAIOU",[[1,7761,"使用``"]],[7761,7761],[7765,7765]]],[1544757175766,["gjx16@GJXAIOU",[[1,7764,"re.split()"]],[7764,7764],[7774,7774]]],[1544757180661,["gjx16@GJXAIOU",[[1,7815,"\n"]],[7815,7815],[7816,7816]]],[1544757197858,["gjx16@GJXAIOU",[[1,7816,"print()"]],[7816,7816],[7823,7823]]],[1544757203349,["gjx16@GJXAIOU",[[1,7822,"re.splot"]],[7822,7822],[7830,7830]]],[1544757204050,["gjx16@GJXAIOU",[[-1,7828,"ot"]],[7830,7830],[7828,7828]]],[1544757205365,["gjx16@GJXAIOU",[[1,7828,"it"]],[7828,7828],[7830,7830]]],[1544757206977,["gjx16@GJXAIOU",[[1,7831,")"]],[7830,7830],[7831,7831]]],[1544757207166,["gjx16@GJXAIOU",[[1,7831,"("]],[7831,7831],[7832,7832]]],[1544757209276,["gjx16@GJXAIOU",[[-1,7831,"()"]],[7832,7832],[7830,7830]]],[1544757210884,["gjx16@GJXAIOU",[[1,7830,"("]],[7830,7830],[7831,7831]]],[1544757213940,["gjx16@GJXAIOU",[[1,7832,")"]],[7832,7832],[7833,7833]]],[1544757227149,["gjx16@GJXAIOU",[[1,7831,"r\",| \""]],[7831,7831],[7837,7837]]],[1544757229745,["gjx16@GJXAIOU",[[1,7839,";"]],[7839,7839],[7840,7840]]],[1544757231947,["gjx16@GJXAIOU",[[-1,7839,";"]],[7840,7840],[7839,7839]]],[1544757241269,["gjx16@GJXAIOU",[[1,7837,",str"]],[7837,7837],[7841,7841]]],[1544757277589,["gjx16@GJXAIOU",[[1,7761,"sO"]],[7761,7761],[7763,7763]]],[1544757278813,["gjx16@GJXAIOU",[[-1,7761,"sO"]],[7763,7763],[7761,7761]]],[1544757288139,["gjx16@GJXAIOU",[[1,7761,"导入包`impot"]],[7761,7761],[7770,7770]]],[1544757289207,["gjx16@GJXAIOU",[[-1,7769,"t"]],[7770,7770],[7769,7769]]],[1544757291826,["gjx16@GJXAIOU",[[1,7769,"rt re`"]],[7769,7769],[7775,7775]]],[1544757294670,["gjx16@GJXAIOU",[[1,7800,"\n"]],[7799,7799],[7800,7800]]],[1544757296302,["gjx16@GJXAIOU",[[1,7800,"impt"]],[7800,7800],[7804,7804]]],[1544757297211,["gjx16@GJXAIOU",[[-1,7803,"t"]],[7804,7804],[7803,7803]]],[1544757299695,["gjx16@GJXAIOU",[[1,7803,"ort re"]],[7803,7803],[7809,7809]]],[1544757626017,["gjx16@GJXAIOU",[[1,7830,"?"]],[7830,7830],[7831,7831]]],[1544757645988,["gjx16@GJXAIOU",[[1,7869,"//多个分隔符之间使用|jinx"]],[7869,7869],[7885,7885]]],[1544757647537,["gjx16@GJXAIOU",[[-1,7880,"|jinx"]],[7885,7885],[7880,7880]]],[1544757651086,["gjx16@GJXAIOU",[[1,7880,"|feng"]],[7880,7880],[7885,7885]]],[1544757653404,["gjx16@GJXAIOU",[[-1,7881,"feng"]],[7885,7885],[7881,7881]]],[1544757655400,["gjx16@GJXAIOU",[[1,7881,"分开"]],[7881,7881],[7883,7883]]],[1544757684162,["gjx16@GJXAIOU",[[1,7884,"\n"]],[7883,7883],[7884,7884]]],[1544757695415,["gjx16@GJXAIOU",[[1,7884,"print()"]],[7884,7884],[7891,7891]]],[1544757700761,["gjx16@GJXAIOU",[[1,7890,"re.split("]],[7890,7890],[7899,7899]]],[1544757700964,["gjx16@GJXAIOU",[[1,7900,")"]],[7899,7899],[7900,7900]]],[1544757722664,["gjx16@GJXAIOU",[[1,7899,"r\",| |\\?\",str"]],[7899,7899],[7912,7912]]],[1544757727890,["gjx16@GJXAIOU",[[1,7914," //dang"]],[7914,7914],[7921,7921]]],[1544757728441,["gjx16@GJXAIOU",[[-1,7919,"ng"]],[7921,7921],[7919,7919]]],[1544757730270,["gjx16@GJXAIOU",[[-1,7917,"da"]],[7919,7919],[7917,7917]]],[1544757738599,["gjx16@GJXAIOU",[[1,7917,"当有？de "]],[7917,7917],[7923,7923]]],[1544757740314,["gjx16@GJXAIOU",[[-1,7920,"de "]],[7923,7923],[7920,7920]]],[1544757743724,["gjx16@GJXAIOU",[[1,7920,"等适合"]],[7920,7920],[7923,7923]]],[1544757753378,["gjx16@GJXAIOU",[[-1,7921,"适合"]],[7923,7923],[7921,7921]]],[1544757757316,["gjx16@GJXAIOU",[[1,7921,"时候"]],[7921,7921],[7923,7923]]],[1544757757625,["gjx16@GJXAIOU",[[-1,7922,"候"]],[7923,7923],[7922,7922]]],[1544757769788,["gjx16@GJXAIOU",[[1,7922,"，需要在前面加上|"]],[7922,7922],[7931,7931]]],[1544757770515,["gjx16@GJXAIOU",[[-1,7930,"|"]],[7931,7931],[7930,7930]]],[1544757771299,["gjx16@GJXAIOU",[[1,7930,"|"]],[7930,7930],[7931,7931]]],[1544757772076,["gjx16@GJXAIOU",[[-1,7930,"|"]],[7931,7931],[7930,7930]]],[1544757772616,["gjx16@GJXAIOU",[[1,7930,"、"]],[7930,7930],[7931,7931]]],[1544757773355,["gjx16@GJXAIOU",[[-1,7930,"、"]],[7931,7931],[7930,7930]]],[1544757781973,["gjx16@GJXAIOU",[[1,7930,"\\进行转义"]],[7930,7930],[7935,7935]]],[1544764170082,["gjx16@GJXAIOU",[[1,8065," "]],[8065,8065],[8066,8066]]],[1544764171586,["gjx16@GJXAIOU",[[1,8068,"  "]],[8068,8068],[8070,8070]]],[1544764174082,["gjx16@GJXAIOU",[[1,8166," "]],[8166,8166],[8167,8167]]],[1544764177087,["gjx16@GJXAIOU",[[1,8213," "]],[8213,8213],[8214,8214]]],[1544764178024,["gjx16@GJXAIOU",[[1,8216," "]],[8216,8216],[8217,8217]]],[1544770175556,[null,[[1,8169," "],[-1,8212,"右"],[1,8214,"右"],[-1,8215,"的"],[1,8217,"的"]],[8169,8169],[8218,8218]]],[1544770175556,[null,[[-1,8169," "],[1,8213,"右"],[-1,8214,"右"],[1,8216,"的"],[-1,8217,"的"]],[8218,8218],[8169,8169]]],[1544770173370,["gjx16@GJXAIOU",[[1,11010,"**"],[1,11022,"**"]],[11010,11022],[11010,11026]]],[1544770295554,[null,[[1,8169," "],[-1,8212,"右"],[1,8214,"右"],[-1,8215,"的"],[1,8217,"的"],[-1,11009,"但"],[1,11012,"但"],[-1,11023,"\n"],[1,11026,"\n"]],[8169,8169],[11027,11027]]],[1544770295554,[null,[[-1,8169," "],[1,8213,"右"],[-1,8214,"右"],[1,8216,"的"],[-1,8217,"的"],[1,11010,"但"],[-1,11012,"但"],[1,11024,"\n"],[-1,11026,"\n"]],[11027,11027],[8169,8169]]],[1544770283562,["gjx16@GJXAIOU",[[1,11790,"，‘"]],[11790,11790],[11792,11792]]],[1544770285194,["gjx16@GJXAIOU",[[-1,11790,"，‘"]],[11792,11792],[11790,11790]]],[1544770291771,["gjx16@GJXAIOU",[[1,11790,",'aaa'"]],[11790,11790],[11796,11796]]],[1544770355556,[null,[[1,8169," "],[-1,8212,"右"],[1,8214,"右"],[-1,8215,"的"],[1,8217,"的"],[-1,11009,"但"],[1,11012,"但"],[-1,11023,"\n"],[1,11026,"\n"],[-1,11789,"]"],[1,11796,"]"]],[8169,8169],[11797,11797]]],[1544770355556,[null,[[-1,8169," "],[1,8213,"右"],[-1,8214,"右"],[1,8216,"的"],[-1,8217,"的"],[1,11010,"但"],[-1,11012,"但"],[1,11024,"\n"],[-1,11026,"\n"],[1,11790,"]"],[-1,11796,"]"]],[11797,11797],[8169,8169]]],[1544770307470,["gjx16@GJXAIOU",[[1,11755,"()"]],[11755,11755],[11757,11757]]],[1544770310524,["gjx16@GJXAIOU",[[1,11756,"bicu"]],[11756,11756],[11760,11760]]],[1544770312346,["gjx16@GJXAIOU",[[-1,11756,"bicu"]],[11760,11760],[11756,11756]]],[1544770317938,["gjx16@GJXAIOU",[[1,11756,"必须是网站"]],[11756,11756],[11761,11761]]],[1544770318755,["gjx16@GJXAIOU",[[-1,11759,"网站"]],[11761,11761],[11759,11759]]],[1544770321502,["gjx16@GJXAIOU",[[1,11759,"完整的"]],[11759,11759],[11762,11762]]]],null,"gjx16@GJXAIOU"],["3b38ee2a-fe6b-4e6b-b2be-281de75bf7f1",1548052448040,"\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**  ，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串；\n`repr()`函数作用是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n  - 单一分隔符：使用 `str.split()`\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n  - 多个分割符:导入包`import re`使用`re.split()`\n```pyhton\nimport re\nstr= \"python,is a py?thon.lan\"\nprint(re.split(r\",| \",str)) //多个分隔符之间使用|分开\nprint(re.split(r\",| |\\?\",str)) //当有？等时，需要在前面加上\\进行转义\n```\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右 所有  的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除 左边 的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除 右边 的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，**但是如果为数值型就会报错**\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数(必须是完整的)\n```python\nlst = [1,2,3,2,1,2,1,'a','aaa']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1548052430852,["gjx16@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1548052431100,["gjx16@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1548052431339,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1548052431574,["gjx16@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1548052445912,["gjx16@GJXAIOU",[[1,4,"二轮整理：2019-1-21"]],[4,4],[18,18]]],[1548056853657,["gjx16@GJXAIOU",[[1,256,"内建"]],[256,256],[258,258]]],[1548073674812,["gjx16@GJXAIOU",[[1,2879,"\n"]],[2874,2874],[2875,2875]]],[1548073676404,["gjx16@GJXAIOU",[[1,2880,"\n"]],[2875,2875],[2876,2876]]],[1548073680842,["gjx16@GJXAIOU",[[1,2875,"****"]],[2875,2875],[2877,2877]]],[1548073682222,["gjx16@GJXAIOU",[[1,2877,"能否"]],[2877,2877],[2879,2879]]],[1548073682651,["gjx16@GJXAIOU",[[-1,2878,"否"]],[2879,2879],[2878,2878]]],[1548073686651,["gjx16@GJXAIOU",[[1,2878,"但行注释的"]],[2878,2878],[2883,2883]]],[1548073689444,["gjx16@GJXAIOU",[[-1,2878,"但"]],[2879,2879],[2878,2878]]],[1548073694619,["gjx16@GJXAIOU",[[1,2878,"单"]],[2878,2878],[2879,2879]]],[1548073697972,["gjx16@GJXAIOU",[[1,2883,"就"]],[2883,2883],[2884,2884]]],[1548073735081,["gjx16@GJXAIOU",[[1,2884,"单行注释，尽量笔面试"]],[2884,2884],[2894,2894]]],[1548073737051,["gjx16@GJXAIOU",[[-1,2891,"笔面试"]],[2894,2894],[2891,2891]]],[1548073746187,["gjx16@GJXAIOU",[[1,2891,"避免使用多行注释"]],[2891,2891],[2899,2899]]],[1548073772615,["gjx16@GJXAIOU",[[1,3094,"\n"]],[3094,3094],[3095,3095]]],[1548073913313,["gjx16@GJXAIOU",[[-1,3094,"\n"]],[3095,3095],[3094,3094]]],[1548075736184,["gjx16@GJXAIOU",[[1,3445,"**"],[1,3466,"**"]],[3445,3468],[3445,3472]]],[1548075739723,["gjx16@GJXAIOU",[[-1,3470,"**"]],[3470,3470],[3468,3468]]],[1548075745087,["gjx16@GJXAIOU",[[-1,3447," **"]],[3450,3450],[3447,3447]]],[1548075751019,["gjx16@GJXAIOU",[[1,3445," "]],[3445,3445],[3446,3446]]],[1548075754651,["gjx16@GJXAIOU",[[-1,3468,"  "]],[3470,3470],[3468,3468]]],[1548076010803,["gjx16@GJXAIOU",[[-1,3520,"`函数作用"]],[3525,3525],[3520,3520]]],[1548076116757,["gjx16@GJXAIOU",[[1,3512," 、、"]],[3512,3512],[3515,3515]]],[1548076118073,["gjx16@GJXAIOU",[[-1,3513,"、、"]],[3515,3515],[3513,3513]]],[1548076128002,["gjx16@GJXAIOU",[[1,3513,"#没有返回值"]],[3513,3513],[3519,3519]]]],null,"gjx16@GJXAIOU"],["9b54a524-5c65-4949-95d8-80675ed8b011",1548119866763,"---\n二轮整理：2019-1-21\n---\n\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用内建函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n**能单行注释的就单行注释，尽量避免使用多行注释**\n\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串； #没有返回值\n`repr()是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址    \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n  - 单一分隔符：使用 `str.split()`\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n  - 多个分割符:导入包`import re`使用`re.split()`\n```pyhton\nimport re\nstr= \"python,is a py?thon.lan\"\nprint(re.split(r\",| \",str)) //多个分隔符之间使用|分开\nprint(re.split(r\",| |\\?\",str)) //当有？等时，需要在前面加上\\进行转义\n```\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右 所有  的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除 左边 的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除 右边 的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，**但是如果为数值型就会报错**\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数(必须是完整的)\n```python\nlst = [1,2,3,2,1,2,1,'a','aaa']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1548119826018,["gjx16@GJXAIOU",[[1,4720,"和最后一个"]],[4720,4720],[4725,4725]]],[1548119995805,["gjx16@GJXAIOU",[[1,4919,"\n"]],[4919,4919],[4920,4920]]],[1548120018969,["gjx16@GJXAIOU",[[1,4920,"**完全复制的时候不产生新的字符串**"]],[4920,4920],[4939,4939]]],[1548120404181,["gjx16@GJXAIOU",[[1,5743,"  #多个元素必须是"]],[5743,5743],[5753,5753]]],[1548120410362,["gjx16@GJXAIOU",[[1,5753,"相邻的"]],[5753,5753],[5756,5756]]],[1548121176304,["gjx16@GJXAIOU",[[1,7339,"****"]],[7339,7339],[7341,7341]]],[1548121180964,["gjx16@GJXAIOU",[[1,7341,"默认情况写"]],[7341,7341],[7346,7346]]],[1548121181995,["gjx16@GJXAIOU",[[-1,7345,"写"]],[7346,7346],[7345,7345]]],[1548121183575,["gjx16@GJXAIOU",[[1,7345,"下："]],[7345,7345],[7347,7347]]],[1548121197202,["gjx16@GJXAIOU",[[1,7347,"字符串左对齐，数字右对齐"]],[7347,7347],[7359,7359]]],[1548121201319,["gjx16@GJXAIOU",[[1,7362,"\n"]],[7361,7361],[7362,7362]]],[1548123089412,["gjx16@GJXAIOU",[[1,11020,"\n"]],[11019,11019],[11020,11020]]],[1548123090386,["gjx16@GJXAIOU",[[-1,11020,"\n"]],[11020,11020],[11019,11019]]],[1548123101345,["gjx16@GJXAIOU",[[1,11060,"\n"]],[11055,11055],[11056,11056]]],[1548123102284,["gjx16@GJXAIOU",[[1,11061,"\n"]],[11056,11056],[11057,11057]]],[1548123104336,["gjx16@GJXAIOU",[[1,11057,"****"]],[11057,11057],[11059,11059]]],[1548123112107,["gjx16@GJXAIOU",[[1,11059,"追加元素是原地丢该"]],[11059,11059],[11068,11068]]],[1548123112864,["gjx16@GJXAIOU",[[-1,11066,"丢该"]],[11068,11068],[11066,11066]]],[1548123124939,["gjx16@GJXAIOU",[[1,11066,"修改，返回值为Nome"]],[11066,11066],[11077,11077]]],[1548123126121,["gjx16@GJXAIOU",[[-1,11075,"me"]],[11077,11077],[11075,11075]]],[1548123128435,["gjx16@GJXAIOU",[[1,11075,"ne"]],[11075,11075],[11077,11077]]],[1548123411084,["gjx16@GJXAIOU",[[1,11640,"\n"]],[11639,11639],[11640,11640]]],[1548123415136,["gjx16@GJXAIOU",[[1,11640,"ld = "]],[11640,11640],[11645,11645]]],[1548123415659,["gjx16@GJXAIOU",[[1,11646,"\n"]],[11645,11645],[11646,11646]]],[1548123416803,["gjx16@GJXAIOU",[[-1,11646,"\n"]],[11646,11646],[11645,11645]]],[1548123424569,["gjx16@GJXAIOU",[[1,11645,"[\"abcde\"]"]],[11645,11645],[11654,11654]]],[1548123427396,["gjx16@GJXAIOU",[[1,11669,"\n"]],[11668,11668],[11669,11669]]],[1548123439400,["gjx16@GJXAIOU",[[-1,11669,"\n"]],[11669,11669],[11668,11668]]],[1548123443593,["gjx16@GJXAIOU",[[-1,11640,"ld = [\"abcde\"]"]],[11640,11654],[11640,11640]]],[1548123445755,["gjx16@GJXAIOU",[[-1,11640,"\n"]],[11640,11640],[11639,11639]]],[1548123450874,["gjx16@GJXAIOU",[[1,11664,"\n"]],[11663,11663],[11664,11664]]],[1548123453883,["gjx16@GJXAIOU",[[1,11664,"ld = [\"abcde\"]"]],[11664,11664],[11678,11678]]],[1548123459069,["gjx16@GJXAIOU",[[1,11664,"\n"]],[11663,11663],[11664,11664]]],[1548123459562,["gjx16@GJXAIOU",[[1,11664,"la = [\"lala\",\"lblb\"]"]],[11664,11664],[11684,11684]]],[1548123466348,["gjx16@GJXAIOU",[[1,11700,"\n"]],[11699,11699],[11700,11700]]],[1548123466803,["gjx16@GJXAIOU",[[1,11700,"la.extend(lc)\nprint(la)"]],[11700,11700],[11723,11723]]],[1548123469115,["gjx16@GJXAIOU",[[1,11664,"\n"]],[11663,11663],[11664,11664]]],[1548123573227,["gjx16@GJXAIOU",[[1,11838,"\n"]],[11836,11836],[11837,11837]]],[1548123578009,["gjx16@GJXAIOU",[[1,11837,"``"]],[11837,11837],[11839,11839]]],[1548123579570,["gjx16@GJXAIOU",[[1,11838,"['lala', 'lblb', 'abcde']"]],[11838,11838],[11863,11863]]],[1548123583171,["gjx16@GJXAIOU",[[-1,11712,"c"]],[11713,11713],[11712,11712]]],[1548123583397,["gjx16@GJXAIOU",[[1,11712,"d"]],[11712,11712],[11713,11713]]],[1548123590522,["gjx16@GJXAIOU",[[1,11685," # dang"]],[11685,11685],[11692,11692]]],[1548123592539,["gjx16@GJXAIOU",[[-1,11688,"dang"]],[11692,11692],[11688,11688]]],[1548123594095,["gjx16@GJXAIOU",[[1,11688,"方"]],[11688,11688],[11689,11689]]],[1548123595969,["gjx16@GJXAIOU",[[-1,11688,"方"]],[11689,11689],[11688,11688]]],[1548123616595,["gjx16@GJXAIOU",[[1,11688,"当拓展为列表的时候，不再拆分然后追加"]],[11688,11688],[11706,11706]]],[1548123628690,["gjx16@GJXAIOU",[[1,11706,"，直接追加"]],[11706,11706],[11711,11711]]],[1548132252412,["gjx16@GJXAIOU",[[-1,21951,"\n"]],[21951,21951],[21950,21950]]],[1548132252617,["gjx16@GJXAIOU",[[-1,21950,"\n"]],[21950,21950],[21949,21949]]],[1548132252834,["gjx16@GJXAIOU",[[-1,21949,"\n"]],[21949,21949],[21948,21948]]],[1548132253155,["gjx16@GJXAIOU",[[-1,21948,"\n"]],[21948,21948],[21947,21947]]],[1548132253403,["gjx16@GJXAIOU",[[-1,21947,"\n"]],[21947,21947],[21946,21946]]],[1548132253612,["gjx16@GJXAIOU",[[-1,21946,"\n"]],[21946,21946],[21945,21945]]],[1548132253826,["gjx16@GJXAIOU",[[-1,21945,"\n"]],[21945,21945],[21944,21944]]],[1548132254214,["gjx16@GJXAIOU",[[-1,21944,"\n"]],[21944,21944],[21943,21943]]],[1548132258026,["gjx16@GJXAIOU",[[-1,21943,"\n"]],[21943,21943],[21942,21942]]],[1548132258209,["gjx16@GJXAIOU",[[-1,21942,"\n"]],[21942,21942],[21941,21941]]],[1548132258414,["gjx16@GJXAIOU",[[-1,21941,"\n"]],[21941,21941],[21940,21940]]],[1548132258727,["gjx16@GJXAIOU",[[-1,21940,"\n"]],[21940,21940],[21939,21939]]],[1548132260665,["gjx16@GJXAIOU",[[-1,21939,"\n"]],[21939,21939],[21938,21938]]],[1548132260850,["gjx16@GJXAIOU",[[-1,21938,"\n"]],[21938,21938],[21937,21937]]],[1548132261061,["gjx16@GJXAIOU",[[-1,21937,"\n"]],[21937,21937],[21936,21936]]],[1548132261353,["gjx16@GJXAIOU",[[-1,21936,"\n"]],[21936,21936],[21935,21935]]]],null,"gjx16@GJXAIOU"],["bc312936-6a86-421b-b01f-b1e8d12dd468",1550407668321,"---\n二轮整理：2019-1-21\n---\n\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用内建函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n**能单行注释的就单行注释，尽量避免使用多行注释**\n\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串； #没有返回值\n`repr()是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个和最后一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址   \n**完全复制的时候不产生新的字符串** \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)  #多个元素必须是相邻的\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n**默认情况下：字符串左对齐，数字右对齐**\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n  - 单一分隔符：使用 `str.split()`\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n  - 多个分割符:导入包`import re`使用`re.split()`\n```pyhton\nimport re\nstr= \"python,is a py?thon.lan\"\nprint(re.split(r\",| \",str)) //多个分隔符之间使用|分开\nprint(re.split(r\",| |\\?\",str)) //当有？等时，需要在前面加上\\进行转义\n```\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右 所有  的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除 左边 的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除 右边 的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n**追加元素是原地修改，返回值为None**\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，**但是如果为数值型就会报错**\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n\nla = [\"lala\",\"lblb\"] # 当拓展为列表的时候，不再拆分然后追加，直接追加\nld = [\"abcde\"]\nla.extend(ld)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n`['lala', 'lblb', 'abcde']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数(必须是完整的)\n```python\nlst = [1,2,3,2,1,2,1,'a','aaa']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n",[[1550407610824,["gjx16@GJXAIOU",[[1,6149,"\n"]],[6144,6144],[6145,6145]]],[1550407611585,["gjx16@GJXAIOU",[[1,6150,"\n"]],[6145,6145],[6146,6146]]],[1550407623324,["gjx16@GJXAIOU",[[1,6146,"- 字符串大小写"]],[6146,6146],[6154,6154]]],[1550407632811,["gjx16@GJXAIOU",[[1,6155,"- \n"]],[6154,6154],[6157,6157]]],[1550407634132,["gjx16@GJXAIOU",[[-1,6155,"- "]],[6157,6157],[6155,6155]]],[1550407639353,["gjx16@GJXAIOU",[[1,6155,"```python"]],[6155,6155],[6164,6164]]],[1550407639902,["gjx16@GJXAIOU",[[1,6169,"\n"]],[6164,6164],[6165,6165]]],[1550407640909,["gjx16@GJXAIOU",[[1,6170,"\n"]],[6165,6165],[6166,6166]]],[1550407641111,["gjx16@GJXAIOU",[[1,6171,"\n"]],[6166,6166],[6167,6167]]],[1550407641322,["gjx16@GJXAIOU",[[1,6172,"\n"]],[6167,6167],[6168,6168]]],[1550407642221,["gjx16@GJXAIOU",[[1,6168,"```"]],[6168,6168],[6171,6171]]],[1550407646002,["gjx16@GJXAIOU",[[-1,6175,"\n"]],[6173,6173],[6172,6172]]],[1550407647954,["gjx16@GJXAIOU",[[-1,6174,"\n"]],[6172,6172],[6171,6171]]]],null,"gjx16@GJXAIOU"],["5040be55-7011-47cd-b2b1-bad13f28b02e",1550908628579,"---\n二轮整理：2019-1-21\n---\n\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用内建函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n**能单行注释的就单行注释，尽量避免使用多行注释**\n\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串； #没有返回值\n`repr()是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个和最后一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址   \n**完全复制的时候不产生新的字符串** \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)  #多个元素必须是相邻的\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n- 字符串大小写\n```python\n\n\n\n```\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n**默认情况下：字符串左对齐，数字右对齐**\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n  - 单一分隔符：使用 `str.split()`\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n  - 多个分割符:导入包`import re`使用`re.split()`\n```pyhton\nimport re\nstr= \"python,is a py?thon.lan\"\nprint(re.split(r\",| \",str)) //多个分隔符之间使用|分开\nprint(re.split(r\",| |\\?\",str)) //当有？等时，需要在前面加上\\进行转义\n```\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右 所有  的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除 左边 的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除 右边 的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将列表中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n**追加元素是原地修改，返回值为None**\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，**但是如果为数值型就会报错**\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n\nla = [\"lala\",\"lblb\"] # 当拓展为列表的时候，不再拆分然后追加，直接追加\nld = [\"abcde\"]\nla.extend(ld)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n`['lala', 'lblb', 'abcde']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数(必须是完整的)\n```python\nlst = [1,2,3,2,1,2,1,'a','aaa']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n",[[1550908610598,["gjx16@GJXAIOU",[[1,8418," \n"]],[8417,8417],[8419,8419]]],[1550908614009,["gjx16@GJXAIOU",[[1,8419,"srt"]],[8419,8419],[8422,8422]]],[1550908614680,["gjx16@GJXAIOU",[[-1,8420,"rt"]],[8422,8422],[8420,8420]]],[1550908626637,["gjx16@GJXAIOU",[[1,8420,"tr = str.strip()  "]],[8420,8420],[8438,8438]]],[1550908631247,["gjx16@GJXAIOU",[[1,8438,"# quchu"]],[8438,8438],[8445,8445]]],[1550908633237,["gjx16@GJXAIOU",[[-1,8440,"quchu"]],[8445,8445],[8440,8440]]],[1550908654625,["gjx16@GJXAIOU",[[1,8440,"去除原来字符串两边空格并保存"]],[8440,8440],[8454,8454]]],[1550910463580,["gjx16@GJXAIOU",[[-1,8955,"列表"]],[8955,8957],[8955,8955]]],[1550910501656,["gjx16@GJXAIOU",[[1,9517,"\n"]],[9516,9516],[9517,9517]]],[1550910505648,["gjx16@GJXAIOU",[[1,9517,"print()"]],[9517,9517],[9524,9524]]],[1550910511166,["gjx16@GJXAIOU",[[1,9523,"a[-1]"]],[9523,9523],[9528,9528]]],[1550910515274,["gjx16@GJXAIOU",[[1,9529,"  #f"]],[9529,9529],[9533,9533]]],[1550910515706,["gjx16@GJXAIOU",[[-1,9532,"f"]],[9533,9533],[9532,9532]]],[1550910526788,["gjx16@GJXAIOU",[[1,9532,"访问列表中最后一个元素"]],[9532,9532],[9543,9543]]]],null,"gjx16@GJXAIOU"],["fc127ab0-721b-40c5-af23-543ba51d6243",1551017471617,"---\n二轮整理：2019-1-21\n---\n\n# 第1章 基本对象类型\n\n@toc\n\n**浮点数的所有运算都要注意**\n\n## 1.1 数和四则运算\n\n1.python可以自动处理大**整数问题，不必担心溢出**\n\n2.单精度浮点数（4个字节）在计算机内部存储方式：\n1位为符号位（0为正，1为负），8位用作整数，最后的23位表示有效数字\n\n3.每个**对象**在内存中都有自己的地址，可以使用函数`id()`查看每个对象的内存地址；但是通过`id()`得到的内存地址是只读的，**不能够修改**。\n\n4.使用内建函数`type()`可以查看对象的类型，当然得到的结果也是只读的；\n\n5.==**对象有类型，变量无类型**==\n\n6.四则运算中运算符两侧只要有一个为浮点数，结果就是浮点数，否则为整数\n\n7.浮点数会出现溢出的问题    `*`  表示相乘 ；`**` 表示乘幂 ，等效于`pow()`函数，当然使用的时候要导入math库，   `e-08` 表示10的-8次方；\n\n8.python中的==除法的结果都是浮点数，不论参与运算的数有没有浮点数==\n\n9.`//` 表示两个数相除之后的商（取整），这个商一定为整数\n\n10.python中的已经写好的工具叫做 “库” ，或者“模块”、或者“类库”\n\n11.**导入模块：**\n\n- 单一模块： `import module-name`  表示导入模块：module-name\n- 大模块中的小模块： `from module1 import module11` ,表示从库module1（大模块），里面的子模块 module11\n\n**12.针对python中的浮点数问题**\npython以双精度64位表示浮点数，默认的小数精度为17位，所以电脑中以二进制进行保存的时候会丢掉后面的一部分，造成存储的实际上就有误差；\n\n- 除法会将无限循环小数截断，还不是按照四舍五入的截断\n  解决方法，导入decimal：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \n\nimport decimal #导入decimal 模块\na = decimal.Decimal(\"10.0\") #使用decimal模块中的Decimal函数\nb= decimal.Decimal(\"3\")\nprint(a/b)\n```\n程序运行结果：`3.333333333333333333333333333`\n\n- 两个数相除将结果保留为分数：使用`fraction`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nfrom fractions import Fraction\nans = Fraction(10,4)\nprint(ans)\n\n```\n程序运行结果：`5/2`\n\n13.取余：`%`\n\n14.同时获得除法的商和余数，使用内建函数`divmod()`\n```python\n#Author:GJXAIOU\n#coding:utf-8 \n#!/usr/bin/env python \nprint(divmod(5,2))\n```\n程序运行结果：`(2, 1)`前面为商，后面为余数\n\n15.对小数进行四舍五入，使用内建函数 `round()`,前一个参数为数字，后一个参数为小数点后的位数\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nprint(round(1.256452233 ,3))\n```\n程序运行结果：`1.256`\n\n\n[round（）使用方法](https://blog.csdn.net/gaojixu/article/details/83792109)\n- round()如果只有一个数作为参数，不指定位数的时候：\n  返回的是一个整数，而且是最靠近的整数（这点上类似四舍五入）。但是当出现.5的时候，两边的距离都一样，round()取靠近的偶数。\n- 当指定取舍的小数点位数的时候：\n  一般情况也是使用四舍五入的规则，但是碰到.5的这样情况，如果要取舍的位数前的小数是奇数，则直接舍弃，如果偶数这向上取舍。\n\n\n## 1.3 常见的数学函数以及运算优先级\n- 使用`math`\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nimport math\nprint(math.pi)\n\nprint(dir(math))\n```\n程序运行结果：\n`3.141592653589793`\n下面是math中的所有东西（函数）\n`['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']`\n\n其中`math.floor()`为取整函数，`math.fabs(-2)`为求绝对值（也可以使用内建函数`abs()`）,求除法的余数：`math.fmod(5,3)`(也可以使用内建的`/`)\n\n\n**2.运算优先级**\n见书P25-26页\n实在不行先加括号\n\n\n## 1.4 一个简单的程序\n\n1.未经编译就可运行的程序称为脚本程序（script）\n\n2.程序前面两行\n```python\n#Author:GJXAIOU \n\n#coding:utf-8   \n#本程序采用utf-8编码 \n#!/usr/bin/env python   \n#在Linux中必须写，在Windows中可以不写，能够引导程序找到python的解释器\n```\n3.python 中的注释：当行注释：`#` ,多行注释：使用一对`'''`或者一对`\"\"\"`\n**能单行注释的就单行注释，尽量避免使用多行注释**\n\n\n\n\n\n## 1.5 字符串\n\n**1.字符串使用单引号或者双引号包裹**\n当字符串内部含有其中一种符号（单引号或者双引号）时候，外面采用另一种符号进行包裹，或者在字符串中出现的的符号前加上`\\`,相当于转义字符。\n\n事例说明：\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python \nstr = \"what's your name?\" #采用双引号包含单引号 \nstr1 = 'what\\'s your name?' # 使用转义字符  \nprint(str)\nprint(str1)\n```\n程序运行结果为：\n`what's your name?`\n`what's your name?`\n\n2.可以使用`type()`进行检验类型\n```python\n#Author:GJXAIOU #coding:utf-8 \n#!/usr/bin/env python \nprint(type(330))\nprint(type(\"330\"))\n```\n程序运行结果为：\n`<class 'int'>`  对象类型为整型\n`<class 'str'>` 对象类型为字符串类型\n\n\n\n3.使用`+`实现字符串的连接\n首先 **`+`两边的对象给的数据类型必须一致**，例如都是数字就是加法，字符串就是拼接；\n\n- `str()` 实现将整数转换为字符串； #没有返回值\n`repr()是返回一个字符串对象；\n[补充_Python中str()与repr()函数的区别](补充-python中str-与repr-函数的区别)\n- `int()` 实现将字符串转换为整数\n4.一行的结尾加上`\\` ，实现续行，对于字符串可以采用字符串开头结尾各加上三个`\"`表示字符串的续行\n\n5.键盘输入：使用`input()`获取输入的数据,**input ()返回的结果为字符串类型的对象**\n```python\n#Author:GJXAIOU \n#coding:utf-8 \n#!/usr/bin/env python\nname = input(\"what's your name ?\")\nage = input(\"how old are you ?\")\n\nprint(\"your name is \" + name)\nprint(\"you are \" + age + \"years old.\")\nafter_ten = int(age) + 10 \nprint(\"you will be\" +str(after_ten) + \"years old after ten years.\")\n```\n程序运行结果：\n`what's your name ?gaojixu`\n`how old are you ?23`\n`your name is gaojixu`\n`you are 23years old.`\n`you will be33years old after ten years.`\n\n\n6.原始字符串：由`r`开头引起的字符串就是原始字符串，在里面放置任何字符都是原始含义，也就是说没有转义字符的性质\n```python\na = r\"c:\\hello\"\nprint(a)\n```\n程序运行结果：`c:\\hello`\n\n\n7.**序列:** 有序排列，例如字符串、列表等等统称为序列\n\n8.**索引：** 序列中每一个都有编号，这个编号即为：索引\n例如：\n```python\n#Author:GJXAIOU \n#coding:utf-8\n#!/usr/bin/env python \n\n# 索引 \nlang = \"python is beautiful\" \nprint(\"lang = \" ,lang)\nprint(\"lang[3] = \",lang[3])\n\nans1 = lang.index(\"p\")# 在lang字符串中查找字符p的位置  \nprint(\"index('p')= \",ans1)\n\n#字符串的切片：复制字符串的一部分，（不改变原有的字符串）  \nans2 = lang[2:9]#得到第2到第9个字符（包括第2 个，不包括第9个） \nprint(\"lang[2:9] = \",ans2)\n\nans3 = lang[1:]#得到从第一个到最后的字符（包括第一个和最后一个） \nprint(\"lang[1:] = \",ans3)\n\nans4 = lang[:] #得到所有的字符,这时候新的字符串（其实本质上这时候并没有生成新的字符串）和原来字符串的地址也是一样的\nprint(\"ans4 = \",ans4)\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))  #id()是查看该对象在内存中的地址   \n**完全复制的时候不产生新的字符串** \n\n#对比如下的赋值语句 \nans = lang\nprint(\"id(lang) = \",id(lang),\"id(ans4) = \",id(ans4))\n\nans5 = lang[:9] #得到第9个之前的所有字符（不包括第9个） \nprint(\"lang[:9] = \",ans5)\n```\n程序运行结果：\n`lang =  python is beautiful`\n`lang[3] =  h`\n`index('p')=  0`\n`lang[2:9] =  thon is`\n`lang[1:] =  ython is beautiful`\n`ans4 =  python is beautiful`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`id(lang) =  2381962817448 id(ans4) =  2381962817448`\n`lang[:9] =  python is`\n\n\n\n### 1.5.8 字符串的基本操作\n\n- `len() `求字符串的长度  ,返回值为int型\n```python\nstr = \"hello\" \nprint(len(str))\n```\n程序运行结果；`5`\n\n- `+`    连接两个序列\n```python\nstr1 = \"python\" \nstr2 = \"lisp\" \nprint(str1 + \"&\"+ str2)\n```\n程序运行结果：`python&lisp`\n\n- `*`   重复序列元素\n```python\nstr = \"hello\"\nprint(str *3)\n```\n程序运行结果：`hellohellohello`\n\n- `in`  判断元素是否存在于序列中\n```python\nstr1 = \"python\" \nprint(\"th\" in str1)  #多个元素必须是相邻的\n```\n程序运行结果：`True`\n\n- `max()`  返回最大值  ;   `min()` 返回最小值\n```python\nstr1 = \"python\" \nprint(\"max(str1)= \",max(str1),\"min(str1)=\",min(str1))\n```\n程序运行结果：`max(str1)=  y min(str1)= h`\n比较的是字符编码：可以使用内建函数`ord()`获得一个字符对应的数字编码，使用`chr()`实现数字编码向字符的转换\n例如：\n```python\nprint(\"ord('h') = \",ord(\"h\"), \"chr(104) = \",chr(104))\n```\n程序运行结果：`ord('h') =  104 chr(104) =  h`\n*字符串的比较是挨个比较，直到得出结果；\n\nASCII码：A：65  a :97\n\n- 字符串大小写\n```python\n\n\n\n```\n\n\n### 1.5.9 字符串的格式化输出\n- 输出方式\n  - 方法一：使用占位符`%s` ,(不推荐使用)\n```python\nprint(\"I like %s\" %  \"python\")\n```\n  程序运行结果：`I like python`\n\n  - 方法二：使用`format()`方法,使用方法：`string.format()`,format()方法的返回值为一个字符串\n同样是使用占位符`{}`,根据中间的数字序号来对应替换\n```python\nprint(\"I like {1} and {0}\".format(\"lalala\",\"python\"))\n```\n  程序运行结果：`I like python and lalala`\n\n- 输出格式：\n  - 对齐：\n```python\nprint(\"I like {1:10} and {0:^15} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第一个位置：占得位置为10个字节，默认左对齐；  第0个位置，占的位置为15个字节，居中对齐；\n第2个位置，占得位置长度为12个字节，右对齐；\n```\n程序运行结果：`I like python     and     lalala      and      hahaha`\n\n  - 长度：\n```python\nprint(\"I like {1:.2} and {0:^15.4} and{2:>12}\".format(\"lalala\",\"python\",\"hahaha\"))\n# 参数含义：第1个位置，：后面没有数字表示占得长度自动适应即将放入该位置的字符串，.号后面数字表示对于即将传入的字符串截取前两个字符；\n# 第2个参数的含义；放在第0个位置，占位长度为15个字节，居中对齐，截取将传入的字符串前4个字符\n\n```\n程序运行结果：`I like py and      lala       and      hahaha`\n\n  - 格式符(针对数字（包括整数和浮点数）)\n```python\nprint(\"I like {1:4d} and {0:f} and{2:6.2f} and {3:04f}\".format(12345,900897,3434478,368937987))\n#参数含义：第1个位置，长度为4个字节，以整数形式，默认是右对齐\n# 第2个位置：长度自适应，以浮点数形式。默认右对齐\n#第3个位置：长度6个字节，填充到此的浮点数保留2位小数，右对齐\n#第4个位置：数字前面加0表示如果位数不足则补0；\n```\n程序运行结果：`I like 900897 and 12345.000000 and3434478.00 and 368937987.000000`\n\n\n**默认情况下：字符串左对齐，数字右对齐**\n\n### 1.5.10 常用的字符串方法\n- 判断是否全为字母，使用`isalpha()`判断字符串是否全由字母组成\n```python\nstr= \"python\" \n# 下面两个等价 \nprint(str.isalpha())\nprint(\"python\".isalpha())\n```\n程序运行结果：\n`True`\n`True`\n\n- 根据分隔符分割字符串,**返回结果形式为列表**\n  - 单一分隔符：使用 `str.split()`\n```python\nstr= \"python,is a python.lan\" \nprint(str.split(\" \"))#以空格分割 \nprint(\"python,is a python.lan\".split(\".\"))#以.进行分割\nprint(str.split())#默认的分割符为所有空字符，包括空格、换行、制表符等等\n```\n程序运行结果：\n`['python,is', 'a', 'python.lan']`\n`['python,is a python', 'lan']`\n`['python,is', 'a', 'python.lan']`\n\n  - 多个分割符:导入包`import re`使用`re.split()`\n```pyhton\nimport re\nstr= \"python,is a py?thon.lan\"\nprint(re.split(r\",| \",str)) //多个分隔符之间使用|分开\nprint(re.split(r\",| |\\?\",str)) //当有？等时，需要在前面加上\\进行转义\n```\n- 去掉字符串两头的空格，会产生新的字符串，原来的字符串不变\n```python\nstr = \"  hello  \" \nprint(id(str))#获得原来的字符串的地址\n print(\"star\"+str.strip()+ \"end\")#去除左右 所有  的空格 \n print(id(\"star\"+str.strip()+ \"end\"))#获取变换之后的字符串的地址 \n print(\"start\"+str.lstrip()+ \"end\")#去除 左边 的空格 \n print(\"start\"+str.rstrip()+ \"end\")#去除 右边 的空格 \n print(\"start\"+str+\"end\")#去除之后的字符串，原来的值没有变化，这种去除产生了新的字符串\n str = str.strip()  # 去除原来字符串两边空格并保存\n```\n程序运行结果：\n`1651046031536`\n`starhelloend`\n`1651046258096`\n`starthello  end`\n`start  helloend`\n`start  hello  end`\n\n- 字符大小写的转换，生成一个新的字符串，不改变原有的值\n  - str.upper() :将str中的字母全部转换为大写\n  - str.lower() :将str中的字母全部转换为小写\n  - str.capitalize() :将首字母转换为大写\n  - str.isupper() :判断str中的字母是否全为大写\n  - str.islower() :判断str中的字母是否全为小写\n  - str.istitle() :判断str是否为标题模式，即所有单词首字母大写，其余字母全部小写 \n```python\nstr = \"hello PyThon\" \nprint(str.upper())\nprint(str.lower())\n\n```\n程序运行结果：\n`HELLO PYTHON`\n`hello python`\n\n- 用join()拼接字符串,主要用于将中的各种类型元素连接，或者使用某个符号来拼接字符串\n```python\na = [\"python\",\"is\",\"the\",\"best\"]\nprint(\"*\".join(a))\n```\n程序运行结果：`python*is*the*best`\n\n\n\n## 1.6 字符编码\npython 3 中所有字符串均采用Unicode编码，UTF-8只是其实现方法之一(采用可变长度字符编码)，同时可以使用`encode()`将Unicode编码的字符转换为其他编码\n\n\n\n\n## 1.7 列表\n\n### 1.7.1 定义\n- 形式为`[]`\n- 判断列表是否为空：`bool()`  空为false\n- 定义：\n```python\na = ['2',3,\"hello\"]#包含字符、数字、字符串\nb= [\"python\",a]#同时可以套一个列表\nprint(a)\nprint(b)\n```\n程序运行结果为：\n`['2', 3, 'hello']`\n`['python', ['2', 3, 'hello']]`\n\n\n### 1.7.2 索引和切片\n\n```python\n#索引\n\n#列表元素的索引\na = ['2',3,\"hello\",\"end\"]\nprint(a[2])\nprint(a[:2])\nprint(a[2][1:4])\nprint(a[-1])  #访问列表中最后一个元素\n#列表元素地址的索引\n\"\"\"\n编号方式（适用于字符串和列表等所有序列类型）：从左至右0、1、2  或者从右至左-1、-2、-3、-4.。。。\n\"\"\"\nprint(a.index(\"hello\"))#这样默认返回时是按照从左到右的顺序\n\n\n#切片\n\n#典型的错误读取方式\nprint(a[-1:-3]) # 等价于a[(4-1):(4-3)]=a[3:1],又因为序列都是从左到右读取，这里是从右到左的读取，因此返回空值\n#正确用法\nprint(a[-3:-1])  #等价于a[1:3]\n\n#根据步长切片，当步长为正数的时候，相当于从左往右看数列，先看到的值为开始的值\nprint(a[::2])#从头搜到位，步长为2，实际上中间也就间隔一个字符  [开始：结束：步长]\n\n# 当步长为负数的时候，相当于从右往左看数列，先看到的值为开始的值\n\nprint(a[1:3:2])\nprint(a[-3:3:2])\nprint(a[-2:1:-2])\n```\n程序运行结果：\n`hello`\n`['2', 3]`\n`ell`\n`2`\n`[]`\n`[3, 'hello']`\n`['2', 'hello']`\n`[3]`\n`[3]`\n`['hello']`\n\n\n### 1.7.3  反转（适用于列表以及字符串）\n```python\nlst = [1,2,3,4,5,6]\nstr = \"python\"\nprint(lst[: : -1])\nprint(str[: : -1])\n\nprint(lst)\nprint(str)\n\n#可以使用reversed函数进行反转，但是必须加上list，最后的结果也都是列表格式\nprint(list(reversed(str)))\nprint(list(reversed(lst)))\n#注意比较两个的不同\n```\n程序运行结果：\n`[6, 5, 4, 3, 2, 1]`\n`nohtyp`\n`[1, 2, 3, 4, 5, 6]`\n`python`\n`['n', 'o', 'h', 't', 'y', 'p']`\n`[6, 5, 4, 3, 2, 1]`\n\n\n\n### 1.7.4 操作列表\n- 基本操作\n  - `len()`  \n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(len(lst))\n```\n程序运行结果：`3`\n\n  - `+` :连接两个列表\n  - `*` :重复序列元素\n  - `in` :判断元素是否在列表中（完整性的元素，不是字符）\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(\"python\" in lst)\nprint(\"la\" in lst)\n```\n程序运行结果：\n`True`\n`False`\n\n  - `max()`和`min()`寻找列表中最大或者最小的元素\n```python\nlst= [\"i\",\"python\",\"lalla\"]\nprint(max(lst))\nprint(min(lst))\n```\n程序运行结果：\n`python`\n`i`\n\n\n- 修改列表元素（修改和追加）\n```python\n#修改元素\n\nlst= [\"i\",\"python\",\"lalla\"]\nlst[1] = \"hello\"  #将第1个元素修改为“hello”\nprint(lst)\n\n#追加元素\nlst.append(\"hulala\")#在结尾追加元素,返回值为None,直接使用print(lst.append(\"hulala\")),结果为None 同时进行的也是原地修改\nprint(lst)\n```\n程序运行结果：\n`['i', 'hello', 'lalla']`\n`['i', 'hello', 'lalla', 'hulala']`\n\n**追加元素是原地修改，返回值为None**\n\n\n\n\n### 1.7.5 常见的列表函数\n\n- extend ：将两个列表合并，a:b - >a+b :b,参数可以是列表或者字符串，**但是如果为数值型就会报错**\n  extend的参数必须为iterable(可迭代的（可以重复反馈）)\n  使用`hasattr()`判断类型是否可迭代，判断本质是看类型中是否含有`_iter_()`这个方法，可以使用`dir`查看\n  示例；\n```python\nlst = [1,2]\nlat= 3\nprint(hasattr(lst,'__iter__'))\n#hasattr(object，'x') 函数，用于判断对象object是否含有x属性或方法，有则返回True，否则返回False\nprint(hasattr(lat,\"__iter__\"))\n\n```\n程序运行结果：\n`True`\n`False`\n\n```python\nla = [\"lala\",\"lblb\"]\nlb = [1,2,3]\nprint(la.extend(lb))#la.extend(lb)的返回值为none,同时拓展之后的内存位置仍然没有改变，原地修改\nprint(la)\nprint(lb)\n\nlc= \"abcde\"#当拓展参数为字符串的时候，结果是将字符串挨个字符拆开形成列表，然后在追加\nla.extend(lc)\nprint(la)\n\nla = [\"lala\",\"lblb\"] # 当拓展为列表的时候，不再拆分然后追加，直接追加\nld = [\"abcde\"]\nla.extend(ld)\nprint(la)\n```\n程序运行结果：\n`None`\n`['lala', 'lblb', 1, 2, 3]`\n`[1, 2, 3]`\n`['lala', 'lblb', 1, 2, 3, 'a', 'b', 'c', 'd', 'e']`\n`['lala', 'lblb', 'abcde']`\n\n**append（）和extend（）区别：**\nappend直接将所有内容整体打包什么都不动（包括列表的[])追加在后面\nextend将追加的内容先拆开（针对列表），然后合并成一个列表\n\n\n- count：查找列表中元素出现的次数(必须是完整的)\n```python\nlst = [1,2,3,2,1,2,1,'a','aaa']\nprint(lst.count(1))\nprint(lst.count('a'))\n```\n程序运行结果：\n`3`\n`1`\n\n- index :查找列表中的元素（必须是完整的）在列表中第一次出现的位置\n```python\nlst = [1,2,3,2,1,2,1,'a']\nprint(lst.index(1))\nprint(lst.index('a'))\n```\n程序运行结果：\n`0`\n`7`\n\n- insert ：将元素添加在列表中的任意位置：`list(i,x)`,其中i为想插入的位置，X为插入的元素，该元素插入位置之前\n```python\nlst = [1,2,'a']\nlst.insert(2,\"lalala\")#insert()函数也是列表的原地修改，没有返回值，或者说返回值为None\nprint(lst)\nlst.insert(len(lst),\"end\") #使用len函数，将插入值放在字符串的最后面\nprint(lst)\n\n```\n程序运行结果为：\n`[1, 2, 'lalala', 'a']`\n`[1, 2, 'lalala', 'a', 'end']`\n\n\n- remove 和pop实现删除列表中的元素\n  - remove ：\n```python\n#remove使用方式：\n# 正确就删除第一个符合的对象，没有返回值；对列表进行原地修改\n#如果删除的元素不在列表中，则会报错：X not in list\n\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(\"hello\" in lst)#可以在删除之前先判断该元素是否在列表中\nlst.remove(\"hello\")#同样没有返回值，\nprint(lst)\n\n```\n程序运行结果：\n`True`\n`['python', 'lala', 1, 2]`\n\n\n  - pop :使用方式: `list.pop([i])` ,其中i为所要删除的元素的位置,实际使用的时候没有[]，如果为空则表示删除最后一个，返回值为删除的元素\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\nprint(lst.pop(1))#删除列表中第1个元素，返回值为第1个元素的值\nprint(lst)\n\n```\n程序运行结果：\n`hello`\n`['python', 'lala', 1, 2]`\n\n\n\n\n- reverse :将列表的元素顺序返回来，是原地反过来(原来列表的值变化)，没有返回值,\n- reversed :原来列表的值没有变化，有返回值，但是返回值并不是list（），需要转换为list()\n```python\nlst= [\"python\",\"hello\",\"lala\",1,2]\n#reverse()\nlst.reverse()\nprint(lst)#原列表的值改变了\n\n#reversed()\nprint(reversed(lst))#返回值不是列表\nprint(list(reversed(lst)))#将机返回值转换为列表\nprint(lst)#再次打印列表，经过reversed之后的原列表没有变化\n```\n程序运行结果；\n`[2, 1, 'lala', 'hello', 'python']`\n`<list_reverseiterator object at 0x0000029BF3C09160>`\n`['python', 'hello', 'lala', 1, 2]`\n`[2, 1, 'lala', 'hello', 'python']`\n\n\n\n- sort :对列表进行排序，进行原地修改，没有返回值，默认为从小到大进行排序，也可以设置关键字进行排序\n```python\n#使用sort（）不能实现字符串与整数进行排序，只能各自排序\nlst= [\"python\",\"hello\",\"lala\"]\nlst.sort()\nprint(lst)\n\n#按照从大到小进行排序\nlst.sort(reverse = True)#这里的True不能小写\nprint(lst)\n\n#按照某个关键词进行排序\nlst.sort(key = len) #按照长度为关键字进行排序\nprint(lst)\n```\n程序运行结果：\n`['hello', 'lala', 'python']`\n`['python', 'lala', 'hello']`\n`['lala', 'hello', 'python']`\n\n\n- sorted :产生新的列表，有返回值，可以设置从左到右或者从右到左排序\n```python\nlst= [\"python\",\"hello\",\"lala\"]\nprint(sorted(lst))#默认情况下是从小到大的排序\nprint(lst)#可以得到原列表并没有改变\n\n#实现从大到小的排序\nprint(sorted(lst,reverse = True))\n\n```\n程序运行结果；\n`['hello', 'lala', 'python']`\n`['python', 'hello', 'lala']`\n`['python', 'lala', 'hello']`\n\n\n\n### 1.7.6 比较字符串和列表\n- 相同点：\n  - 都是序列类型\n  - 都可以按照顺序进行索引\n  - 都可以采用切片得到一个或者多个元素\n\n- 不同点：\n  - 列表是可以改变的，然后字符串是不可以改变的。\n  - 字符串中每个元素只能是字符，列表中都可以，也可以列表套列表，形成多维列表，在多维情况下，里面的列表被当成一个元素来看待\n\n\n### 1.7.7 字符串和列表的转换\n- split()  ：可以根据某个分隔符将字符串转换为列表\n```python\nstr = \"hello.i am GJXAIOU .welcome you\"\nprint(str.split(\".\")) #以.来分割\nprint(str.split(\".\",1))#以第一个.来分割\nprint(str.split())# 所有的空字符都是分隔符\n```\n程序运行结果：\n`['hello', 'i am GJXAIOU ', 'welcome you']`\n`['hello', 'i am GJXAIOU .welcome you']`\n`['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']`\n\n\n\n- join :连接list中的元素或者字符串中的字符\n\n```python\nlst = ['hello.i', 'am', 'GJXAIOU', '.welcome', 'you']\nstr1 = [1,2,3,'a','b']\nprint(\"\".join(lst))#没有连接符，表示紧邻着\nprint(\",\".join(lst))#以英文的.作为连接符\nprint(\" \".join(str(str1)))#以为list中含有数字，不能直接转换成字符串\n```\n程序运行结果：\n`hello.iamGJXAIOU.welcomeyou`\n`hello.i,am,GJXAIOU,.welcome,you`\n`[ 1 ,   2 ,   3 ,   ' a ' ,   ' b ' ]`\n\n\n\n\n\n\n## 1.8 元组（tuple）\n\n这是一种（数据）或者对象类型,其元素可以包含任何类型的数据,==元组的对象是可以迭代的==\n格式为：用（）括起来，中间的元素使用`,`隔开，==元组是序列，元素不能更改==\n```python\nlst = 1,2,\"lalala\",[\"jdjjdfj\",1234],(\"123\",12,'abadf')#几乎包含了所有的数据类型\nprint(lst)\nprint(type(lst))\n```\n程序运行结果：\n`(1, 2, 'lalala', ['jdjjdfj', 1234], ('123', 12, 'abadf'))`\n`<class 'tuple'>`\n\n\n\n\n### 1.8.2 索引和切片\n\n主要的方法和列表以及字符串几乎相同，只是当元组中只有一个元素的时候，元素后面应该加上英文的`,`,\n```python\nlst = (3)\nlat = (3,)\nprint(type(lst))\nprint(type(lat))\n```\n程序运行结果为：\n`<class 'int'>`\n`<class 'tuple'>`\n\n以为元素是不可修改的，如果需要修改元组可以将元组转换成一个列表，然后在进行修改\n函数为：`list()` 以及 `tuple()`\n\n\n\n\n\n\n### 1.8.3 元组的用途\n- 元组的操作比列表快，所以当定义一个值之后以后只是遍历的话，使用元组\n- 元组可以进行“写保护”，如果要改变的话先转换为列表\n- 元组可以在字典中用作key（因为字典的key是保持不变的）\n\n\n\n\n\n## 1.9 字典\n\n### 1.9.1 创建字典\n```python\n#“A”：“B” ，为一对键/值对,前面为键，后面为值，每一个字典中键都是唯一的，\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person)\n\n#向已经建立的字典中增加键值对：\nperson['name2']= \"GJXAIOU\"  #字典是进行原地修改\n\n\n#方法二：使用dict()函数\nname = ([\"first\",\"google\"],[\"second\",\"Yahoo\"])\nweb = dict(name)\n\nprint(web)\n\n\n#方法三：使用fromkeys()\nwebsite = {}.fromkeys((\"third\",\"forth\"),\"facebook\")\nprint(website)\n\n#注意；元组可以做键值，但是列表不能\ndd = {(1,2):1}\nprint(dd)\n#ee = {[1,2],1},会报错\n```\n\n### 1.9.2 访问字典的值，通过键就可以得到值\n```python\n#首先字典中是没有索引的\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\nprint(person['name'])\n```\n程序运行结果：`gjxaiou`\n\n\n### 1.9.3 基本操作\n- `len(d)` :返回字典中的键值对数量\n- `d[key]` :返回字典中键对应的值\n- `d[key] = value` :将value赋值给字典中的键\n- `del d[key]` :删除该键对应的键值对\n- `key in d` :检查字典中是否含有键为key的项\n\n\n\n### 1.9.5 字典的方法\n- copy ：对象有类型，变量无类型\n```python\n#基本的赋值操作\na = 5\nb = a\nprint(a)\nprint(id(a))\nprint(id(b))\n```\n程序运行结果：\n`5`\n`140703865942992`\n`140703865942992`\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = person.copy()\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果；\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`2246490159576`\n`2246490159504`\n`1341291115664`\n`1341291115664`\n\n- `deepcopy()` ,深拷贝形成一个副本，相当于两个完全无关的字典\n\n```python\n#使用copy得到的是新的空间，和原来的各不相干\nimport copy\nperson = {\"name\":\"gjxaiou\",\"site\":\"www.gaojixu.com\",\"language\":\"python\"}\ncd = copy.deepcopy(person)\n\nprint(cd)\nprint(id(cd))\nprint(id(person))\nprint(id(person[\"name\"]))\nprint(id(cd[\"name\"]))#两个键的值（列表）为同一个对象\n```\n程序运行结果：\n`{'name': 'gjxaiou', 'site': 'www.gaojixu.com', 'language': 'python'}`\n`1652151429808`\n`1652150008208`\n`1652150776976`\n`1652150776976`\n\n\n\n\n\n\n- clear 清空字典中的所有元素,得到空字典，但是对象仍然在内存中，而`del`是直接将字典删除，内存中就没有了\n```python\n#clear 没有返回值，是对字典进行了原地修改\na = {\"name\" : \"GJXAIOU\"}\na.clear()\nprint(a)\n\n```\n程序运行结果：`{}`\n\n\n\n- get 和setdefault\n  - get 的含义是获取该键对应的值，如果没有发现也不报错\n```python\na = {\"name\" : \"GJXAIOU\",\"age\":\"lalala\"}\nprint(a.get(\"name\"))\nprint(a.get(\"gjx\",\"no answer\"))#如果找到键的值就返回键的值，如果没有就返回后面的值\nprint(a.setdefault(\"first\",\"second\"))#如果找到键的值就返回键的值，如果没有就返回后面的值,并且将这个键值对加入原来的字典中\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`no answer`\n`second`\n`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n- items .keys  .values\n  - items\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.items())\n```\n程序运行结果：`dict_items([('name', 'GJXAIOU'), ('age', 'lalala'), ('first', 'second')])`\n\n  - keys 得到所有的键，value 得到所有的值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.keys())\nprint(a.values()) \n```\n程序运行结果：\n`dict_keys(['name', 'age', 'first'])`\n`dict_values(['GJXAIOU', 'lalala', 'second'])`\n\n\n\n\n\n- pop 和popitem\n  - pop 删除键值对\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.pop(\"name\"))#以键为参数，将指定键的键值对删除，返回值为键所对应的值，如果没有找到键，就返回错误\nprint(a)\nprint(a.pop(\"name\",\"no find in:'name'\")) #pop后面可以是两个参数，以逗号隔开，如果有这个键，就返回对应的值，如果没有就返回后面的这个参数\nprint(a)\n```\n程序运行结果：\n`GJXAIOU`\n`{'age': 'lalala', 'first': 'second'}`\n`no find in:'name'`#这里因为上面已经删除了，所以找不到了\n`{'age': 'lalala', 'first': 'second'}`\n\n  - popitem \n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}\nprint(a.popitem( ))#可以不写参数，就是随机删除一个，然后将删除的值返回，返回的格式为元组\n```\n程序运行结果：`('first', 'second')`\n\n\n\n\n- update :更新字典内容，函数返回值为None即没有返回值\n```python\na ={'name': 'GJXAIOU', 'age': 'lalala', }\nb = {'first': 'second'}\na.update(b)\nprint(a)\n# 字典b更新纳入字典a 中，函数返回值为None，当然b并没有变化\n```\n程序运行结果：`{'name': 'GJXAIOU', 'age': 'lalala', 'first': 'second'}`\n\n\n\n\n\n## 1.10 集合（set）\n特点：有的可变、有的不可变、元素无次序、不可重复\n集合没有索引，没有顺序，不属于序列\n```python\n#创建集合，这里是将字符串拆后形成集合 ，这里hello中有两个l,但是集合中只有一个l\n\n#通过set函数创建\na= set(\"helloworld\")\nprint(a)\n\n# 直接创建,尽量避免使用这种方法\nb = {\"facd\",123}\nprint(type(b))\nprint(b)\n\n\n#unhashable  不可哈希 ：表示该数据时可变的，例如列表、字典都能原地修改\n#使用{} 进行创建的时候，元素要求是可哈希的，随意存在字典、列表就报错\n#但是set（）建立起来的集合是可变集合。可变集合都是不可哈希类型\n```\n程序运行结果；\n`{'e', 'h', 'd', 'r', 'w', 'l', 'o'}`\n`<class 'set'>`\n`{123, 'facd'}`\n\n\n\n\n### 1.10.2 set 的方法\n\n- add和update\n```python\n#如果要创建一个空集合，只能使用set，\na_set = {}  #这样默认情况下创建的是字典\nprint(type(a_set))\n\ns= set()\nprint(type(s))#创建一个空集合\ns.add(\"hello\")#为该集合增加一个元素\nprint(s)\n```\n程序运行结果：\n`<class 'dict'>`\n`<class 'set'>`\n`{'hello'}`\n\n\n- update \n```python\ns1= set(['a','b'])\ns2 = set(['c','d'])\ns2.update(s1)\nprint(s2)\ns2.update(\"hello\")\nprint(s2)\ns2.update((2,3))\nprint(s2)\n```\n程序运行结果：\n`{'c', 'd', 'b', 'a'}`\n`{'d', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n`{2, 3, 'd', 'e', 'o', 'l', 'c', 'h', 'b', 'a'}`\n\n\n- pop,remove,discard,clear\n```python\n#pop :没有参数，删除元素也是随机删除，返回值为删除的元素，没有可以删除的元素的时候就会报错\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(b_set.pop())\n\n#remove :没有返回值，删除的指定元素不存在时候会报错\nb_set.remove(\"d\")#删除指定的值\nprint(b_set)\n\n\n#discard :没有返回值，有就删除，没有就什么都不做\nb_set.discard(\"r\")\nprint(b_set)\n\n#clear ：清空所有元素\nb_set.clear()\nprint(b_set)\n```\n程序运行结果：\n`e`\n`{'o', 'h', 'l', 'r', 'w'}`\n`{'o', 'h', 'l', 'w'}`\n`set()`\n\n\n\n\n### 1.10.3 使用frozenset创建不可变集合\n\n\n\n### 1.10.4 集合运算\n\n- 元素与集合的关系\n```python\n#判断元素是否在集合中 \nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(\"h\" in b_set)\n```\n程序运行结果：`True`\n\n\n- 集合与集合的关系\n```python\n#判断两个集合是否完全一样\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set == b_set)\n\n\n#判断A是否是B的子集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set < b_set)\n#或者：print(a_set.issubset(b_set))\n\n\n#求A与B的并集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set |b_set\n#或者使用  a_set.union(b_set)\nprint(c_set)\n\n\n\n#求A与B的交集\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nc_set = a_set & b_set\n#或者：c_set = a.intersection(b_set)\nprint(c_set)\n\n\n\n#A 相对于B的差（补），即A相对于B不同的部分元素    （书P98）\n\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set - b_set)\n#上面等价于：print(a_set.difference(b_set))\nprint(b_set - a_set)\n#上面等价于：print(b_set.difference(a_set))\n\n\n\n# A 与B的对称差集\na_set = {'e','d','g','k'}\nb_set = {'e', 'h', 'd', 'r', 'w', 'l', 'o'}\nprint(a_set.symmetric_difference(b_set))\n\n```\n程序运行结果：\n`False`\n`False`\n`{'w', 'h', 'd', 'r', 'o', 'k', 'l', 'g', 'e'}`\n`{'e', 'd'}`\n`{'g', 'k'}`\n`{'w', 'h', 'r', 'o', 'l'}`\n`{'w', 'h', 'r', 'o', 'k', 'l', 'g'}`\n\n",[[1551017449788,["gjx16@GJXAIOU",[[1,13814,"()"]],[13814,13814],[13816,13816]]],[1551017452315,["gjx16@GJXAIOU",[[1,13815,"fanx"]],[13815,13815],[13819,13819]]],[1551017453940,["gjx16@GJXAIOU",[[-1,13815,"fanx"]],[13819,13819],[13815,13815]]],[1551017456080,["gjx16@GJXAIOU",[[1,13815,"方向"]],[13815,13815],[13817,13817]]],[1551017456974,["gjx16@GJXAIOU",[[-1,13815,"方向"]],[13817,13817],[13815,13815]]],[1551017461520,["gjx16@GJXAIOU",[[1,13815,"反向排序"]],[13815,13815],[13819,13819]]],[1551017530079,["gjx16@GJXAIOU",[[1,15864,"- 元组的值不可修改，但是可以给存储元组的变量"]],[15864,15864],[15887,15887]]],[1551017533178,["gjx16@GJXAIOU",[[1,15887,"进行赋值"]],[15887,15887],[15891,15891]]],[1551017549181,["gjx16@GJXAIOU",[[-1,6422,"and"]],[6422,6425],[6422,6422]]],[1551017554514,["gjx16@GJXAIOU",[[1,6422,"and"]],[6422,6422],[6422,6425]]],[1551017587430,["gjx16@GJXAIOU",[[1,15906,"\n"]],[15905,15905],[15906,15906]]],[1551017619709,["gjx16@GJXAIOU",[[1,15906,"一般用于存放一个对象的各种属性，或者多个相似对象的同一种信息"]],[15906,15906],[15936,15936]]]],null,"gjx16@GJXAIOU"]]}