{"compress":true,"commitItems":[["c0761534-e0cf-4e74-a56d-64e9bd33472a",1550296616038,"# Python3 迭代器与生成器\n\n* * *\n\n## 迭代器\n\n迭代是Python最强大的功能之一，是访问集合元素的一种方式。\n\n迭代器是一个可以记住遍历的位置的对象。\n\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\n\n迭代器有两个基本的方法：**iter()** 和 **next()**。\n\n字符串，列表或元组对象都可用于创建迭代器：\n\n## 实例(Python 3.0+)\n\n>>>list=[1,2,3,4] >>> it = iter(list)  # 创建迭代器对象 >>> print  (next(it))  # 输出迭代器的下一个元素  1 >>> print  (next(it))  2 >>>\n\n迭代器对象可以使用常规for语句进行遍历：\n\n## 实例(Python 3.0+)\n\n#!/usr/bin/python3  list=[1,2,3,4]  it = iter(list)  # 创建迭代器对象  for  x  in  it: print  (x, end=\"  \")\n\n执行以上程序，输出结果如下：\n\n1  2  3  4\n\n也可以使用 next() 函数：\n\n## 实例(Python 3.0+)\n\n#!/usr/bin/python3  import  sys  # 引入 sys 模块  list=[1,2,3,4]  it = iter(list)  # 创建迭代器对象  while  True: try: print  (next(it))  except  StopIteration: sys.exit()\n\n执行以上程序，输出结果如下：\n\n1  2  3  4\n\n### 创建一个迭代器\n\n把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。\n\n如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。\n\n更多内容查阅：[Python3 面向对象](http://www.runoob.com/python3/python3-class.html)\n\n__iter__() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。\n\n__next__() 方法（Python 2 里是 next()）会返回下一个迭代器对象。\n\n创建一个返回数字的迭代器，初始值为 1，逐步递增 1：\n\n## 实例(Python 3.0+)\n\nclass  MyNumbers: def  __iter__(self): self.a = 1  return  self  def  __next__(self): x = self.a  self.a += 1  return  x  myclass = MyNumbers()  myiter = iter(myclass)  print(next(myiter))  print(next(myiter))  print(next(myiter))  print(next(myiter))  print(next(myiter))\n\n执行输出结果为：\n\n1  2  3  4  5\n\n### StopIteration\n\nStopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。\n\n在 20 次迭代后停止执行：\n\n## 实例(Python 3.0+)\n\nclass  MyNumbers: def  __iter__(self): self.a = 1  return  self  def  __next__(self): if  self.a <= 20: x = self.a  self.a += 1  return  x  else: raise  StopIteration  myclass = MyNumbers()  myiter = iter(myclass)  for  x  in  myiter: print(x)\n\n执行输出结果为：\n\n1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20\n\n* * *\n\n## 生成器\n\n在 Python 中，使用了 yield 的函数被称为生成器（generator）。\n\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。\n\n在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。\n\n调用一个生成器函数，返回的是一个迭代器对象。\n\n以下实例使用 yield 实现斐波那契数列：\n\n## 实例(Python 3.0+)\n\n#!/usr/bin/python3  import  sys  def  fibonacci(n): # 生成器函数 - 斐波那契  a, b, counter = 0, 1, 0  while  True: if  (counter > n): return  yield  a  a, b = b, a + b  counter += 1  f = fibonacci(10)  # f 是一个迭代器，由生成器返回生成  while  True: try: print  (next(f), end=\"  \")  except  StopIteration: sys.exit()\n\n执行以上程序，输出结果如下：\n\n0  1  1  2  3  5  8  13  21  34  55",[[1550296580405,["gjx16@GJXAIOU",[[-1,216,">>>list=[1,2,3,4] >>> it = iter(list)  # 创建迭代器对象 >>> print  (next(it))  # 输出迭代器的下一个元素  1 >>> print  (next(it))  2 >>>"]],[216,333],[216,216]]],[1550296582933,["gjx16@GJXAIOU",[[-1,157," 和 "],[1,160," 和 "],[1,195,"```"]],[195,195],[198,198]]],[1550296582962,["gjx16@GJXAIOU",[[1,198,"language\n```\n"]],[198,198],[198,206]]],[1550296584385,["gjx16@GJXAIOU",[[-1,198,"language"],[1,206,"p"]],[198,206],[199,199]]],[1550296587158,["gjx16@GJXAIOU",[[1,199,"ython"]],[199,199],[204,204]]],[1550296589525,["gjx16@GJXAIOU",[[1,205,"\n"]],[204,204],[205,205]]],[1550296590079,["gjx16@GJXAIOU",[[1,205,">>>list=[1,2,3,4] >>> it = iter(list)  # 创建迭代器对象 >>> print  (next(it))  # 输出迭代器的下一个元素  1 >>> print  (next(it))  2 >>>"]],[205,205],[322,322]]],[1550296591709,["gjx16@GJXAIOU",[[-1,205,">>>list=[1,2,3,4] >>> it = iter(list)  # 创建迭代器对象 >>> print  (next(it))  # 输出迭代器的下一个元素  1 >>> print  (next(it))  2 >>>"]],[322,322],[205,205]]],[1550296594289,["gjx16@GJXAIOU",[[1,205,">>>list=[1,2,3,4]\n>>> it = iter(list)    # 创建迭代器对象\n>>> print (next(it))   # 输出迭代器的下一个元素\n1\n>>> print (next(it))\n2\n>>>"]],[205,205],[321,321]]],[1550296597877,["gjx16@GJXAIOU",[[-1,327,"## 实例(Python 3.0+)"]],[327,345],[327,327]]],[1550296599663,["gjx16@GJXAIOU",[[1,205,"\n"]],[204,204],[205,205]]],[1550296600119,["gjx16@GJXAIOU",[[1,205,"## 实例(Python 3.0+)"]],[205,205],[223,223]]],[1550296604820,["gjx16@GJXAIOU",[[-1,349,"\n"]],[348,348],[347,347]]],[1550296604991,["gjx16@GJXAIOU",[[-1,348,"\n"]],[347,347],[346,346]]],[1550296605164,["gjx16@GJXAIOU",[[-1,347,"\n"]],[346,346],[345,345]]],[1550296617420,["gjx16@GJXAIOU",[[-1,389,"\n#!/usr/bin/python3  list=[1,2,3,4]  it = iter(list)  # 创建迭代器对象  for  x  in  it: print  (x, end=\"  \")\n"],[1,491,"```"]],[389,491],[392,392]]],[1550296618932,["gjx16@GJXAIOU",[[1,393,"\n"]],[392,392],[393,393]]],[1550296619093,["gjx16@GJXAIOU",[[1,394,"\n"]],[393,393],[394,394]]],[1550296619533,["gjx16@GJXAIOU",[[1,394,"```"]],[394,394],[397,397]]],[1550296626942,["gjx16@GJXAIOU",[[1,393,"#!/usr/bin/python3\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nfor x in it:\n    print (x, end=\" \")"]],[393,393],[493,493]]],[1550296631792,["gjx16@GJXAIOU",[[1,514,"`"]],[514,514],[515,515]]],[1550296632865,["gjx16@GJXAIOU",[[1,525,"`"]],[525,525],[526,526]]],[1550296642077,["gjx16@GJXAIOU",[[-1,566,"#!/usr/bin/python3  import  sys  # 引入 sys 模块  list=[1,2,3,4]  it = iter(list)  # 创建迭代器对象  while  True: try: print  (next(it))  except  StopIteration: sys.exit()\n"]],[565,726],[565,565]]],[1550296648189,["gjx16@GJXAIOU",[[1,545,"```"]],[545,545],[548,548]]],[1550296653183,["gjx16@GJXAIOU",[[1,569,"```"]],[569,569],[572,572]]],[1550296660934,["gjx16@GJXAIOU",[[1,568,"#!/usr/bin/python3\n \nimport sys         # 引入 sys 模块\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\n \nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:\n        sys.exit()"]],[568,568],[758,758]]],[1550296664320,["gjx16@GJXAIOU",[[1,789,"`"]],[789,789],[790,790]]],[1550296666088,["gjx16@GJXAIOU",[[1,779,"`"]],[779,779],[780,780]]],[1550296686044,["gjx16@GJXAIOU",[[-1,1178,"class  MyNumbers: def  __iter__(self): self.a = 1  return  self  def  __next__(self): x = self.a  self.a += 1  return  x  myclass = MyNumbers()  myiter = iter(myclass)  print(next(myiter))  print(next(myiter))  print(next(myiter))  print(next(myiter))  print(next(myiter))\n\n"]],[1177,1451],[1177,1177]]],[1550296690122,["gjx16@GJXAIOU",[[1,1177,"class MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))"]],[1177,1177],[1463,1463]]],[1550296694996,["gjx16@GJXAIOU",[[1,1157,"```"]],[1157,1157],[1160,1160]]],[1550296698647,["gjx16@GJXAIOU",[[1,1467,"\n"]],[1466,1466],[1467,1467]]],[1550296700908,["gjx16@GJXAIOU",[[1,1467,"```"]],[1467,1467],[1470,1470]]],[1550296703137,["gjx16@GJXAIOU",[[1,1494,"`"]],[1494,1494],[1495,1495]]],[1550296704466,["gjx16@GJXAIOU",[[1,1481,"`"]],[1481,1481],[1482,1482]]],[1550296711701,["gjx16@GJXAIOU",[[1,1629,"```"]],[1629,1629],[1632,1632]]],[1550296714038,["gjx16@GJXAIOU",[[1,1897,"```"]],[1897,1897],[1900,1900]]],[1550296716152,["gjx16@GJXAIOU",[[1,1911,"`"]],[1911,1911],[1912,1912]]],[1550296717606,["gjx16@GJXAIOU",[[1,1981,"`"]],[1981,1981],[1982,1982]]],[1550296728703,["gjx16@GJXAIOU",[[-1,1659," "],[1,1670,"\n "],[-1,1674," "],[1,1691,"\n   "],[1,1702,"\n  "],[-1,1710," "],[1,1716,"\n \n"],[-1,1721," "],[1,1738,"\n   "],[-1,1741," "],[1,1756,"\n     "],[1,1767,"\n   "],[1,1769," "],[1,1780,"\n    "],[-1,1789," "],[1,1791,"\n  "],[1,1798,"\n     "],[-1,1805," "],[-1,1819,"  "],[1,1821,"\n \n"],[-1,1842,"  "],[1,1844,"\n"],[-1,1866,"  "],[1,1868,"\n \n"],[-1,1872," "],[-1,1874," "],[-1,1879," "],[1,1887,"\n "]],[1653,1896],[1930,1930]]],[1550296747081,["gjx16@GJXAIOU",[[-1,2264,"## "],[-1,2282,"\n"],[-1,2302,"  "],[1,2304,"\n \n"],[-1,2311," "],[-1,2315,"  "],[1,2317,"\n \n"],[-1,2320," "],[1,2350,"\n  "],[1,2375,"\n  "],[-1,2382," "],[1,2389,"\n       "],[-1,2392," "],[1,2409,"\n            "],[1,2415,"\n      "],[-1,2423," a"],[1,2425,"a\n      "],[1,2442,"\n      "],[-1,2456,"  "],[1,2458,"\n"],[-1,2475," "],[-1,2496,"  "],[1,2498,"\n \n"],[-1,2504," "],[1,2510,"\n   "],[1,2515,"\n       "],[-1,2521," "],[-1,2538," "],[1,2542,"\n  "],[-1,2550," "],[1,2566,"\n       "]],[2264,2577],[2636,2636]]],[1550296750776,["gjx16@GJXAIOU",[[1,2263,"```"]],[2263,2263],[2266,2266]]],[1550296750807,["gjx16@GJXAIOU",[[1,2266,"language\n```\n"]],[2266,2266],[2266,2274]]],[1550296753982,["gjx16@GJXAIOU",[[-1,2275,"```"]],[2275,2278],[2275,2275]]],[1550296757621,["gjx16@GJXAIOU",[[1,2650,"```"]],[2650,2650],[2653,2653]]],[1550296760206,["gjx16@GJXAIOU",[[1,2670,"`"]],[2670,2670],[2671,2671]]],[1550296761207,["gjx16@GJXAIOU",[[1,2706,"`"]],[2706,2706],[2707,2707]]]],null,"gjx16@GJXAIOU"]]}