{"compress":true,"commitItems":[["e35789b3-1285-472c-bf69-0d969bc1a09e",1542890475648,"",[[1542890415763,["gjx16@GJXAIOU",[[1,0,"# Untitled\n\n\n\n"]],[0,0],[13,13]]],[1542890439089,["gjx16@GJXAIOU",[[-1,2,"Untitled"],[1,10,"python"]],[2,2],[8,8]]],[1542890441193,["gjx16@GJXAIOU",[[1,8,"装饰器"]],[8,8],[11,11]]],[1542890441774,["gjx16@GJXAIOU",[[1,15,"\n"]],[11,11],[12,12]]],[1542890442237,["gjx16@GJXAIOU",[[1,16,"\n"]],[12,12],[13,13]]],[1542890443759,["gjx16@GJXAIOU",[[1,13,"===="]],[13,13],[15,15]]],[1542890447543,["gjx16@GJXAIOU",[[1,15,"原文地址："]],[15,15],[20,20]]],[1542890449526,["gjx16@GJXAIOU",[[1,26,"\n"]],[22,22],[23,23]]],[1542890457263,["gjx16@GJXAIOU",[[1,23,"查看原文点击这里："]],[23,23],[32,32]]],[1542890457720,["gjx16@GJXAIOU",[[1,36,"\n"]],[32,32],[33,33]]],[1542890466230,["gjx16@GJXAIOU",[[1,33,"90"]],[33,33],[35,35]]],[1542890467007,["gjx16@GJXAIOU",[[-1,33,"90"]],[35,35],[33,33]]],[1542890467552,["gjx16@GJXAIOU",[[-1,36,"\n"]],[33,33],[32,32]]],[1542890471415,["gjx16@GJXAIOU",[[1,23,"["]],[23,23],[24,24]]],[1542890474696,["gjx16@GJXAIOU",[[-1,32,"："]],[33,33],[32,32]]],[1542890475287,["gjx16@GJXAIOU",[[1,32,":"]],[32,32],[33,33]]],[1542890476975,["gjx16@GJXAIOU",[[1,33,"]("]],[33,33],[35,35]]],[1542890477000,["gjx16@GJXAIOU",[[1,35,"https://)"]],[35,35],[35,43]]],[1542890477050,["gjx16@GJXAIOU",[[-1,35,"https://"],[1,43,")"]],[35,43],[36,36]]],[1542890494363,["gjx16@GJXAIOU",[[1,35,"https://foofish.net/python-decorator.html"]],[35,35],[76,76]]],[1542890496463,["gjx16@GJXAIOU",[[-1,77,")"]],[78,78],[77,77]]],[1542890517917,["gjx16@GJXAIOU",[[1,79,"讲 Python 装饰器前，我想先举个例子，虽有点污，但跟装饰器这个话题很贴切。\n\n每个人都有的内裤主要功能是用来遮羞，但是到了冬天它没法为我们防风御寒，咋办？我们想到的一个办法就是把内裤改造一下，让它变得更厚更长，这样一来，它不仅有遮羞功能，还能提供保暖，不过有个问题，这个内裤被我们改造成了长裤后，虽然还有遮羞功能，但本质上它不再是一条真正的内裤了。于是聪明的人们发明长裤，在不影响内裤的前提下，直接把长裤套在了内裤外面，这样内裤还是内裤，有了长裤后宝宝再也不冷了。装饰器就像我们这里说的长裤，在不影响内裤作用的前提下，给我们的身子提供了保暖的功效。\n\n谈装饰器前，还要先要明白一件事，Python 中的函数和 Java、C++不太一样，Python 中的函数可以像普通变量一样当做参数传递给另外一个函数，例如：\n\ndef foo():\n    print(\"foo\")\n\ndef bar(func):\n    func()\n\nbar(foo)\n\n正式回到我们的主题。装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。\n\n先来看一个简单例子，虽然实际代码可能比这复杂很多：\n\ndef foo():\n    print('i am foo')\n\n现在有一个新的需求，希望可以记录下函数的执行日志，于是在代码中添加日志代码：\n\ndef foo():\n    print('i am foo')\n    logging.info(\"foo is running\")\n\n如果函数 bar()、bar2() 也有类似的需求，怎么做？再写一个 logging 在 bar 函数里？这样就造成大量雷同的代码，为了减少重复写代码，我们可以这样做，重新定义一个新的函数：专门处理日志 ，日志处理完之后再执行真正的业务代码\n\ndef use_logging(func):\n    logging.warn(\"%s is running\" % func.__name__)\n    func()\n\ndef foo():\n    print('i am foo')\n\nuse_logging(foo)\n\n这样做逻辑上是没问题的，功能是实现了，但是我们调用的时候不再是调用真正的业务逻辑 foo 函数，而是换成了 use_logging 函数，这就破坏了原有的代码结构， 现在我们不得不每次都要把原来的那个 foo 函数作为参数传递给 use_logging 函数，那么有没有更好的方式的呢？当然有，答案就是装饰器。\n\n### 简单装饰器\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)  # 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper\nfoo()                   # 执行foo()就相当于执行 wrapper()\n\nuse_logging 就是一个装饰器，它一个普通的函数，它把执行真正业务逻辑的函数 func 包裹在其中，看起来像 foo 被 use_logging 装饰了一样，use_logging 返回的也是一个函数，这个函数的名字叫 wrapper。在这个例子中，函数进入和退出时 ，被称为一个横切面，这种编程方式被称为面向切面的编程。\n\n### @ 语法糖\n\n如果你接触 Python 有一段时间了的话，想必你对 @ 符号一定不陌生了，没错 @ 符号就是装饰器的语法糖，它放在函数开始定义的地方，这样就可以省略最后一步再次赋值的操作。\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()\n    return wrapper\n\n@use_logging\ndef foo():\n    print(\"i am foo\")\n\nfoo()\n\n如上所示，有了 @ ，我们就可以省去`foo = use_logging(foo)`这一句了，直接调用 foo() 即可得到想要的结果。你们看到了没有，foo() 函数不需要做任何修改，只需在定义的地方加上装饰器，调用的时候还是和以前一样，如果我们有其他的类似函数，我们可以继续调用装饰器来修饰函数，而不用重复修改函数或者增加新的封装。这样，我们就提高了程序的可重复利用性，并增加了程序的可读性。\n\n装饰器在 Python 使用如此方便都要归因于 Python 的函数能像普通的对象一样能作为参数传递给其他函数，可以被赋值给其他变量，可以作为返回值，可以被定义在另外一个函数内。\n\n### *args、**kwargs\n\n可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：\n\ndef foo(name):\n    print(\"i am %s\" % name)\n\n我们可以在定义 wrapper 函数的时候指定参数：\n\ndef wrapper(name):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(name)\n    return wrapper\n\n这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：\n\ndef wrapper(*args):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args)\n    return wrapper\n\n如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：\n\ndef foo(name, age=None, height=None):\n    print(\"I am %s, age %s, height %s\" % (name, age, height))\n\n这时，你就可以把 wrapper 函数指定关键字函数：\n\ndef wrapper(*args, **kwargs):\n        # args是一个数组，kwargs一个字典\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n\n### 带参数的装饰器\n\n装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如`@decorator(a)`。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。\n\ndef use_logging(level):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                logging.warn(\"%s is running\" % func.__name__)\n            elif level == \"info\":\n                logging.info(\"%s is running\" % func.__name__)\n            return func(*args)\n        return wrapper\n\n    return decorator\n\n@use_logging(level=\"warn\")\ndef foo(name='foo'):\n    print(\"i am %s\" % name)\n\nfoo()\n\n上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用`@use_logging(level=\"warn\")`调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。\n\n`@use_logging(level=\"warn\")`等价于`@decorator`\n\n### 类装饰器\n\n没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的`__call__`方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。\n\nclass Foo(object):\n    def __init__(self, func):\n        self._func = func\n\n    def __call__(self):\n        print ('class decorator runing')\n        self._func()\n        print ('class decorator ending')\n\n@Foo\ndef bar():\n    print ('bar')\n\nbar()\n\n### functools.wraps\n\n使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，先看例子：\n\n# 装饰器\ndef logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'with_logging'\n        print func.__doc__       # 输出 None\n        return func(*args, **kwargs)\n    return with_logging\n\n# 函数\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nlogged(f)\n\n不难发现，函数 f 被`with_logging`取代了，当然它的`docstring`，`__name__`就是变成了`with_logging`函数的信息了。好在我们有`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。\n\nfrom functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'f'\n        print func.__doc__       # 输出 'does some math'\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\n### 装饰器顺序\n\n一个函数还可以同时定义多个装饰器，比如：\n\n@a\n@b\n@c\ndef f ():\n    pass\n\n它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于\n\nf = a(b(c(f)))"]],[79,79],[5500,5500]]],[1542890530090,["gjx16@GJXAIOU",[[1,438,"```"]],[438,438],[441,441]]],[1542890530122,["gjx16@GJXAIOU",[[1,441,"language\n```\n"]],[441,441],[441,449]]],[1542890531312,["gjx16@GJXAIOU",[[-1,441,"language"],[1,449,"p"]],[441,449],[442,442]]],[1542890531721,["gjx16@GJXAIOU",[[1,442,"ut"]],[442,442],[444,444]]],[1542890532446,["gjx16@GJXAIOU",[[-1,442,"ut"]],[444,444],[442,442]]],[1542890533742,["gjx16@GJXAIOU",[[1,442,"ython"]],[442,442],[447,447]]],[1542890538082,["gjx16@GJXAIOU",[[-1,453,"def foo():\n    print(\"foo\")\n\ndef bar(func):\n    func()\n\nbar(foo)"]],[453,517],[453,453]]],[1542890539646,["gjx16@GJXAIOU",[[1,448,"\n"]],[447,447],[448,448]]],[1542890540016,["gjx16@GJXAIOU",[[1,448,"def foo():\n    print(\"foo\")\n\ndef bar(func):\n    func()\n\nbar(foo)"]],[448,448],[512,512]]],[1542890542822,["gjx16@GJXAIOU",[[-1,519,"\n"]],[519,519],[518,518]]],[1542890542960,["gjx16@GJXAIOU",[[-1,518,"\n"]],[518,518],[517,517]]],[1542890547740,["gjx16@GJXAIOU",[[1,757,"```"]],[757,757],[760,760]]],[1542890547771,["gjx16@GJXAIOU",[[1,760,"language\n```\n"]],[760,760],[760,768]]],[1542890549050,["gjx16@GJXAIOU",[[-1,760,"language"],[1,768,"p"]],[760,768],[761,761]]],[1542890549683,["gjx16@GJXAIOU",[[1,761,"ython"]],[761,761],[766,766]]],[1542890550304,["gjx16@GJXAIOU",[[1,767,"\n"]],[766,766],[767,767]]],[1542890553053,["gjx16@GJXAIOU",[[-1,773,"def foo():\n    print('i am foo')"]],[773,805],[773,773]]],[1542890554559,["gjx16@GJXAIOU",[[1,767,"def foo():\n    print('i am foo')"]],[767,767],[799,799]]],[1542890556206,["gjx16@GJXAIOU",[[-1,806,"\n"]],[806,806],[805,805]]],[1542890561682,["gjx16@GJXAIOU",[[1,845,"```"]],[845,845],[848,848]]],[1542890561713,["gjx16@GJXAIOU",[[1,848,"language\n```\n"]],[848,848],[848,856]]],[1542890562602,["gjx16@GJXAIOU",[[-1,848,"language"],[1,856,"p"]],[848,856],[849,849]]],[1542890563207,["gjx16@GJXAIOU",[[1,849,"uytho"]],[849,849],[854,854]]],[1542890564365,["gjx16@GJXAIOU",[[-1,849,"uytho"]],[854,854],[849,849]]],[1542890565494,["gjx16@GJXAIOU",[[1,849,"ython"]],[849,849],[854,854]]],[1542890569158,["gjx16@GJXAIOU",[[1,855,"\n"]],[854,854],[855,855]]],[1542890575711,["gjx16@GJXAIOU",[[-1,861,"def foo():\n    print('i am foo')\n    logging.info(\"foo is running\")"]],[861,928],[861,861]]],[1542890577143,["gjx16@GJXAIOU",[[1,855,"def foo():\n    print('i am foo')\n    logging.info(\"foo is running\")"]],[855,855],[922,922]]],[1542890579230,["gjx16@GJXAIOU",[[-1,928,"\n\n"]],[927,929],[927,927]]],[1542890579446,["gjx16@GJXAIOU",[[-1,927,"\n"]],[927,927],[926,926]]],[1542890583599,["gjx16@GJXAIOU",[[1,1048,"```"]],[1048,1048],[1051,1051]]],[1542890583629,["gjx16@GJXAIOU",[[1,1051,"language\n```\n"]],[1051,1051],[1051,1059]]],[1542890584328,["gjx16@GJXAIOU",[[-1,1051,"language"],[1,1059,"p"]],[1051,1059],[1052,1052]]],[1542890585983,["gjx16@GJXAIOU",[[1,1052,"ython"]],[1052,1052],[1057,1057]]],[1542890586854,["gjx16@GJXAIOU",[[1,1058,"\n"]],[1057,1057],[1058,1058]]],[1542890591376,["gjx16@GJXAIOU",[[-1,1064,"def use_logging(func):\n    logging.warn(\"%s is running\" % func.__name__)\n    func()\n\ndef foo():\n    print('i am foo')\n\nuse_logging(foo)"]],[1064,1199],[1064,1064]]],[1542890592720,["gjx16@GJXAIOU",[[1,1058,"def use_logging(func):\n    logging.warn(\"%s is running\" % func.__name__)\n    func()\n\ndef foo():\n    print('i am foo')\n\nuse_logging(foo)"]],[1058,1058],[1193,1193]]],[1542890594537,["gjx16@GJXAIOU",[[-1,1200,"\n"]],[1199,1199],[1198,1198]]],[1542890599616,["gjx16@GJXAIOU",[[1,1357,"\n"]],[1356,1356],[1357,1357]]],[1542890606598,["gjx16@GJXAIOU",[[-1,1394,"   "]],[1397,1397],[1394,1394]]],[1542890610622,["gjx16@GJXAIOU",[[-1,1526,"   "]],[1528,1528],[1525,1525]]],[1542890611221,["gjx16@GJXAIOU",[[-1,1524,"\n"]],[1525,1525],[1524,1524]]],[1542890612272,["gjx16@GJXAIOU",[[-1,1393," "]],[1394,1394],[1393,1393]]],[1542890612790,["gjx16@GJXAIOU",[[-1,1392,"\n"]],[1393,1393],[1392,1392]]],[1542890614605,["gjx16@GJXAIOU",[[1,1392,"\n"]],[1392,1392],[1393,1393]]],[1542890639976,["gjx16@GJXAIOU",[[1,1393," "]],[1393,1393],[1394,1394]]],[1542890642200,["gjx16@GJXAIOU",[[-1,1393," "]],[1394,1394],[1393,1393]]],[1542890642468,["gjx16@GJXAIOU",[[-1,1392,"\n"]],[1393,1393],[1392,1392]]],[1542890642669,["gjx16@GJXAIOU",[[1,1392,"\n"]],[1392,1392],[1393,1393]]],[1542890643278,["gjx16@GJXAIOU",[[1,1393," "]],[1393,1393],[1394,1394]]],[1542890643859,["gjx16@GJXAIOU",[[1,1524,"\n"]],[1524,1524],[1525,1525]]],[1542890644429,["gjx16@GJXAIOU",[[1,1526,"   "]],[1525,1525],[1528,1528]]],[1542890644918,["gjx16@GJXAIOU",[[1,1394,"   "]],[1394,1394],[1397,1397]]],[1542890651590,["gjx16@GJXAIOU",[[-1,1392,"\n"]],[1392,1392],[1391,1391]]],[1542890657003,["gjx16@GJXAIOU",[[1,1368,"```"]],[1368,1368],[1371,1371]]],[1542890657034,["gjx16@GJXAIOU",[[1,1371,"language\n```\n"]],[1371,1371],[1371,1379]]],[1542890658281,["gjx16@GJXAIOU",[[-1,1371,"language"],[1,1379,"p"]],[1371,1379],[1372,1372]]],[1542890659008,["gjx16@GJXAIOU",[[1,1372,"ytho9hn"]],[1372,1372],[1379,1379]]],[1542890660159,["gjx16@GJXAIOU",[[-1,1376,"9hn"]],[1379,1379],[1376,1376]]],[1542890661146,["gjx16@GJXAIOU",[[1,1376,"n"]],[1376,1376],[1377,1377]]],[1542890661823,["gjx16@GJXAIOU",[[1,1378,"\n"]],[1377,1377],[1378,1378]]],[1542890665159,["gjx16@GJXAIOU",[[-1,1384,"def use_logging(func):\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n"]],[1383,1594],[1383,1383]]],[1542890666663,["gjx16@GJXAIOU",[[1,1379,"def use_logging(func):\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n"]],[1378,1378],[1589,1589]]]],null,"gjx16@GJXAIOU"]]}