{"compress":true,"commitItems":[["ee38d65d-0b38-4df7-849c-c058811d7957",1550295921211,"",[[1550295881582,["gjx16@GJXAIOU",[[1,0,"# python迭代对象、迭代器、生成器\n\n\n\n"]],[0,0],[23,23]]],[1550295904765,["gjx16@GJXAIOU",[[1,23,"在了解Python的数据结构时，容器(container)、可迭代对象(iterable)、迭代器(iterator)、生成器(generator)、列表/集合/字典推导式(list,set,dict comprehension)众多概念参杂在一起，难免让初学者一头雾水，我将用一篇文章试图将这些概念以及它们之间的关系捋清楚。\n\n![relations](http://7d9py7.com1.z0.glb.clouddn.com/relationships.png)\n\n### 容器(container)\n\n容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用`in`, `not in`关键字判断元素是否包含在容器中。通常这类数据结构把所有的元素存储在内存中（也有一些特例，并不是所有的元素都放在内存，比如迭代器和生成器对象）在Python中，常见的容器对象有：\n\n*   list, deque, ....\n*   set, frozensets, ....\n*   dict, defaultdict, OrderedDict, Counter, ....\n*   tuple, namedtuple, …\n*   str\n\n容器比较容易理解，因为你就可以把它看作是一个盒子、一栋房子、一个柜子，里面可以塞任何东西。从技术角度来说，当它可以用来询问某个元素是否包含在其中时，那么这个对象就可以认为是一个容器，比如 list，set，tuples都是容器对象：\n\n>>> assert 1 in [1, 2, 3]      # lists\n>>> assert 4 not in [1, 2, 3]\n>>> assert 1 in {1, 2, 3}      # sets\n>>> assert 4 not in {1, 2, 3}\n>>> assert 1 in (1, 2, 3)      # tuples\n>>> assert 4 not in (1, 2, 3)\n\n询问某元素是否在dict中用dict的中key：\n\n>>> d = {1: 'foo', 2: 'bar', 3: 'qux'}\n>>> assert 1 in d\n>>> assert 'foo' not in d  # 'foo' 不是dict中的元素\n\n询问某substring是否在string中：\n\n>>> s = 'foobar'\n>>> assert 'b' in s\n>>> assert 'x' not in s\n>>> assert 'foo' in s \n\n尽管绝大多数容器都提供了某种方式来获取其中的每一个元素，但这并不是容器本身提供的能力，而是**可迭代对象**赋予了容器这种能力，当然并不是所有的容器都是可迭代的，比如：[Bloom filter](https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8)，虽然Bloom filter可以用来检测某个元素是否包含在容器中，但是并不能从容器中获取其中的每一个值，因为Bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中。\n\n### 可迭代对象(iterable)\n\n刚才说过，很多容器都是可迭代对象，此外还有更多的对象同样也是可迭代对象，比如处于打开状态的files，sockets等等。但凡是可以返回一个**迭代器**的对象都可称之为可迭代对象，听起来可能有点困惑，没关系，先看一个例子：\n\n>>> x = [1, 2, 3]\n>>> y = iter(x)\n>>> z = iter(x)\n>>> next(y)\n1\n>>> next(y)\n2\n>>> next(z)\n1\n>>> type(x)\n<class 'list'>\n>>> type(y)\n<class 'list_iterator'>\n\n这里`x`是一个可迭代对象，可迭代对象和容器一样是一种通俗的叫法，并不是指某种具体的数据类型，list是可迭代对象，dict是可迭代对象，set也是可迭代对象。`y`和`z`是两个独立的迭代器，迭代器内部持有一个状态，该状态用于记录当前迭代所在的位置，以方便下次迭代的时候获取正确的元素。迭代器有一种具体的迭代器类型，比如`list_iterator`，`set_iterator`。可迭代对象实现了`__iter__`方法，该方法返回一个迭代器对象。\n\n当运行代码：\n\nx = [1, 2, 3]\nfor elem in x:\n    ...\n\n实际执行情况是： \n![iterable-vs-iterator.png](http://7d9py7.com1.z0.glb.clouddn.com/iterable-vs-iterator.png)\n\n反编译该段代码，你可以看到解释器显示地调用`GET_ITER`指令，相当于调用`iter(x)`，`FOR_ITER`指令就是调用`next()`方法，不断地获取迭代器中的下一个元素，但是你没法直接从指令中看出来，因为他被解释器优化过了。\n\n>>> import dis\n>>> x = [1, 2, 3]\n>>> dis.dis('for _ in x: pass')\n  1           0 SETUP_LOOP              14 (to 17)\n              3 LOAD_NAME                0 (x)\n              6 GET_ITER\n        >>    7 FOR_ITER                 6 (to 16)\n             10 STORE_NAME               1 (_)\n             13 JUMP_ABSOLUTE            7\n        >>   16 POP_BLOCK\n        >>   17 LOAD_CONST               0 (None)\n             20 RETURN_VALUE\n\n### 迭代器(iterator)\n\n那么什么迭代器呢？它是一个带状态的对象，他能在你调用`next()`方法的时候返回容器中的下一个值，任何实现了`__iter__`和`__next__()`（python2中实现`next()`）方法的对象都是迭代器，`__iter__`返回迭代器自身，`__next__`返回容器中的下一个值，如果容器中没有更多元素了，则抛出StopIteration异常，至于它们到底是如何实现的这并不重要。\n\n所以，迭代器就是实现了工厂模式的对象，它在你每次你询问要下一个值的时候给你返回。有很多关于迭代器的例子，比如`itertools`函数返回的都是迭代器对象。\n\n生成无限序列：\n\n>>> from itertools import count\n>>> counter = count(start=13)\n>>> next(counter)\n13\n>>> next(counter)\n14\n\n从一个有限序列中生成无限序列：\n\n>>> from itertools import cycle\n>>> colors = cycle(['red', 'white', 'blue'])\n>>> next(colors)\n'red'\n>>> next(colors)\n'white'\n>>> next(colors)\n'blue'\n>>> next(colors)\n'red'\n\n从无限的序列中生成有限序列：\n\n>>> from itertools import islice\n>>> colors = cycle(['red', 'white', 'blue'])  # infinite\n>>> limited = islice(colors, 0, 4)            # finite\n>>> for x in limited:                         \n...     print(x)\nred\nwhite\nblue\nred\n\n为了更直观地感受迭代器内部的执行过程，我们自定义一个迭代器，以斐波那契数列为例：\n\nclass Fib:\n    def __init__(self):\n        self.prev = 0\n        self.curr = 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        value = self.curr\n        self.curr += self.prev\n        self.prev = value\n        return value\n\n>>> f = Fib()\n>>> list(islice(f, 0, 10))\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\nFib既是一个可迭代对象（因为它实现了`__iter__`方法），又是一个迭代器（因为实现了`__next__`方法）。实例变量`prev`和`curr`用户维护迭代器内部的状态。每次调用`next()`方法的时候做两件事：\n\n1.  为下一次调用`next()`方法修改状态\n2.  为当前这次调用生成返回结果\n\n迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。\n\n### 生成器(generator)\n\n生成器算得上是Python语言中最吸引人的特性之一，生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。它不需要再像上面的类一样写`__iter__()`和`__next__()`方法了，只需要一个`yiled`关键字。 生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值。用生成器来实现斐波那契数列的例子是：\n\ndef fib():\n    prev, curr = 0, 1\n    while True:\n        yield curr\n        prev, curr = curr, curr + prev\n\n>>> f = fib()\n>>> list(islice(f, 0, 10))\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n`fib`就是一个普通的python函数，它特殊的地方在于函数体中没有`return`关键字，函数的返回值是一个生成器对象。当执行`f=fib()`返回的是一个生成器对象，此时函数体中的代码并不会执行，只有显示或隐示地调用next的时候才会真正执行里面的代码。\n\n生成器在Python中是一个非常强大的编程结构，可以用更少地中间变量写流式代码，此外，相比其它容器对象它更能节省内存和CPU，当然它可以用更少的代码来实现相似的功能。现在就可以动手重构你的代码了，但凡看到类似：\n\ndef something():\n    result = []\n    for ... in ...:\n        result.append(x)\n    return result\n\n都可以用生成器函数来替换：\n\ndef iter_something():\n    for ... in ...:\n        yield x\n\n### 生成器表达式(generator expression)\n\n生成器表达式是列表推倒式的生成器版本，看起来像列表推导式，但是它返回的是一个生成器对象而不是列表对象。\n\n>>> a = (x*x for x in range(10))\n>>> a\n<generator object <genexpr> at 0x401f08>\n>>> sum(a)\n285\n\n### 总结\n\n*   容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器，容器都可以被迭代（用在for，while等语句中），因此他们被称为可迭代对象。\n*   可迭代对象实现了`__iter__`方法，该方法返回一个迭代器对象。\n*   迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了`__next__`和`__iter__`方法，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生成返回结果。\n*   生成器是一种特殊的迭代器，它的返回值不是通过`return`而是用`yield`。\n\n参考链接：[https://docs.python.org/2/library/stdtypes.html#iterator-types](https://docs.python.org/2/library/stdtypes.html#iterator-types)"]],[23,23],[5446,5446]]],[1550295936972,["gjx16@GJXAIOU",[[-1,323," "],[1,324," "],[1,671,"·"],[-1,1974," "],[1,1975," "]],[671,671],[672,672]]],[1550295937463,["gjx16@GJXAIOU",[[1,672,"··"]],[672,672],[674,674]]],[1550295939228,["gjx16@GJXAIOU",[[-1,671,"···"]],[674,674],[671,671]]],[1550295939994,["gjx16@GJXAIOU",[[1,671,"···"]],[671,671],[674,674]]],[1550295941500,["gjx16@GJXAIOU",[[-1,671,"···"]],[674,674],[671,671]]],[1550295942401,["gjx16@GJXAIOU",[[1,671,"···"]],[671,671],[674,674]]],[1550295943893,["gjx16@GJXAIOU",[[-1,671,"···"]],[674,674],[671,671]]],[1550295945337,["gjx16@GJXAIOU",[[1,671,"```"]],[671,671],[674,674]]],[1550295945371,["gjx16@GJXAIOU",[[1,674,"language\n```\n"]],[674,674],[674,682]]],[1550295956981,["gjx16@GJXAIOU",[[-1,688,">>> assert 1 in [1, 2, 3]      # lists\n>>> assert 4 not in [1, 2, 3]\n>>> assert 1 in {1, 2, 3}      # sets\n>>> assert 4 not in {1, 2, 3}\n>>> assert 1 in (1, 2, 3)      # tuples\n>>> assert 4 not in (1, 2, 3)"]],[688,894],[688,688]]],[1550295960668,["gjx16@GJXAIOU",[[-1,674,"language"]],[682,682],[674,674]]],[1550295962286,["gjx16@GJXAIOU",[[1,674,"python"]],[674,674],[680,680]]],[1550295962664,["gjx16@GJXAIOU",[[1,681,"\n"]],[680,680],[681,681]]],[1550295963804,["gjx16@GJXAIOU",[[1,681,">>> assert 1 in [1, 2, 3]      # lists\n>>> assert 4 not in [1, 2, 3]\n>>> assert 1 in {1, 2, 3}      # sets\n>>> assert 4 not in {1, 2, 3}\n>>> assert 1 in (1, 2, 3)      # tuples\n>>> assert 4 not in (1, 2, 3)"]],[681,681],[887,887]]],[1550295972296,["gjx16@GJXAIOU",[[1,920,"``"]],[920,920],[922,922]]],[1550295974089,["gjx16@GJXAIOU",[[1,1026,"```"]],[1026,1026],[1029,1029]]],[1550295974123,["gjx16@GJXAIOU",[[1,1029,"language\n```\n"]],[1029,1029],[1029,1037]]],[1550295975557,["gjx16@GJXAIOU",[[1,922,"`"]],[922,922],[923,923]]],[1550295979892,["gjx16@GJXAIOU",[[-1,1027,"```language"]],[1027,1038],[1027,1027]]],[1550295991015,["gjx16@GJXAIOU",[[1,1057,"```"]],[1057,1057],[1060,1060]]],[1550295991052,["gjx16@GJXAIOU",[[1,1060,"language\n```\n"]],[1060,1060],[1060,1068]]],[1550295992518,["gjx16@GJXAIOU",[[1,1158,"```"]],[1158,1158],[1161,1161]]],[1550295992554,["gjx16@GJXAIOU",[[1,1161,"language\n```\n"]],[1161,1161],[1161,1169]]],[1550295995323,["gjx16@GJXAIOU",[[-1,1158,"```language"]],[1158,1169],[1158,1158]]],[1550295997780,["gjx16@GJXAIOU",[[-1,1069,"```"]],[1072,1072],[1069,1069]]],[1550295998189,["gjx16@GJXAIOU",[[-1,1070,"\n"]],[1069,1069],[1068,1068]]],[1550295998744,["gjx16@GJXAIOU",[[-1,1067,"e"]],[1068,1068],[1067,1067]]],[1550296000013,["gjx16@GJXAIOU",[[-1,1068,"\n"]],[1068,1068],[1067,1067]]],[1550296001260,["gjx16@GJXAIOU",[[-1,1152,"\n"]],[1152,1152],[1151,1151]]],[1550296015869,["gjx16@GJXAIOU",[[1,1572,"```"]],[1572,1572],[1575,1575]]],[1550296015906,["gjx16@GJXAIOU",[[1,1575,"language\n```\n"]],[1575,1575],[1575,1583]]],[1550296019076,["gjx16@GJXAIOU",[[-1,1584,"```"]],[1584,1587],[1584,1584]]],[1550296021845,["gjx16@GJXAIOU",[[1,1741,"```"]],[1741,1741],[1744,1744]]],[1550296034198,["gjx16@GJXAIOU",[[1,1980,"```"]],[1980,1980],[1983,1983]]],[1550296034232,["gjx16@GJXAIOU",[[1,1983,"language\n```\n"]],[1983,1983],[1983,1991]]],[1550296037996,["gjx16@GJXAIOU",[[-1,1992,"```\n"]],[1992,1996],[1992,1992]]],[1550296040195,["gjx16@GJXAIOU",[[1,2030,"```\n"]],[2030,2030],[2034,2034]]],[1550296050062,["gjx16@GJXAIOU",[[1,2258,"```"]],[2258,2258],[2261,2261]]],[1550296050099,["gjx16@GJXAIOU",[[1,2261,"language\n```\n"]],[2261,2261],[2261,2269]]],[1550296053024,["gjx16@GJXAIOU",[[-1,2270,"```"]],[2270,2273],[2270,2270]]],[1550296055502,["gjx16@GJXAIOU",[[1,2706,"```"]],[2706,2706],[2709,2709]]],[1550296056143,["gjx16@GJXAIOU",[[1,2710,"\n"]],[2709,2709],[2710,2710]]],[1550296056749,["gjx16@GJXAIOU",[[1,2711,"\n"]],[2710,2710],[2711,2711]]],[1550296067104,["gjx16@GJXAIOU",[[1,3019,"```"]],[3019,3019],[3022,3022]]],[1550296067141,["gjx16@GJXAIOU",[[1,3022,"language\n```\n"]],[3022,3022],[3022,3030]]],[1550296069071,["gjx16@GJXAIOU",[[-1,3031,"```"]],[3031,3034],[3031,3031]]],[1550296072998,["gjx16@GJXAIOU",[[1,3137,"```"]],[3137,3137],[3140,3140]]],[1550296076414,["gjx16@GJXAIOU",[[1,3141,"\n"]],[3140,3140],[3141,3141]]],[1550296080636,["gjx16@GJXAIOU",[[1,3158,"```"]],[3158,3158],[3161,3161]]],[1550296083054,["gjx16@GJXAIOU",[[1,3334,"```"]],[3334,3334],[3337,3337]]],[1550296086303,["gjx16@GJXAIOU",[[1,3338,"\n"]],[3337,3337],[3338,3338]]],[1550296088870,["gjx16@GJXAIOU",[[1,3354,"```"]],[3354,3354],[3357,3357]]],[1550296091964,["gjx16@GJXAIOU",[[1,3586,"```"]],[3586,3586],[3589,3589]]],[1550296099680,["gjx16@GJXAIOU",[[1,3631,"```"]],[3631,3631],[3634,3634]]],[1550296105469,["gjx16@GJXAIOU",[[1,3965,"```"]],[3965,3965],[3968,3968]]],[1550296115742,["gjx16@GJXAIOU",[[1,4372,"```"]],[4372,4372],[4375,4375]]],[1550296117893,["gjx16@GJXAIOU",[[1,4560,"```"]],[4560,4560],[4563,4563]]],[1550296124140,["gjx16@GJXAIOU",[[1,4802,"```"]],[4802,4802],[4805,4805]]],[1550296127118,["gjx16@GJXAIOU",[[1,4902,"```"]],[4902,4902],[4905,4905]]],[1550296129965,["gjx16@GJXAIOU",[[1,4920,"```"]],[4920,4920],[4923,4923]]],[1550296131796,["gjx16@GJXAIOU",[[1,4982,"```"]],[4982,4982],[4985,4985]]],[1550296138429,["gjx16@GJXAIOU",[[1,5072,"```"]],[5072,5072],[5075,5075]]],[1550296140469,["gjx16@GJXAIOU",[[1,5171,"```"]],[5171,5171],[5174,5174]]]],null,"gjx16@GJXAIOU"]]}