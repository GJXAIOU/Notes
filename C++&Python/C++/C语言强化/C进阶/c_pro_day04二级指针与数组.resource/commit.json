{"compress":true,"commitItems":[["a8a73076-604a-428f-834e-0a331e394a85",1540686489569,"",[[1540686455282,["gjx16@GJXAIOU",[[1,0,"# Day04二级指针与数组\n\n\n\n"]],[0,0],[17,17]]],[1540686461639,["gjx16@GJXAIOU",[[-1,17,"\n"],[1,18,"#"]],[17,17],[18,18]]],[1540686466834,["gjx16@GJXAIOU",[[1,18,"# 二级指着人"]],[18,18],[25,25]]],[1540686467966,["gjx16@GJXAIOU",[[-1,22,"指着人"]],[25,25],[22,22]]],[1540686472684,["gjx16@GJXAIOU",[[1,22,"指针做输入"]],[22,22],[27,27]]],[1540686473137,["gjx16@GJXAIOU",[[1,27,"\n\n"]],[27,27],[28,28]]],[1540686473367,["gjx16@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1540686474692,["gjx16@GJXAIOU",[[-1,29,"\n"],[1,30,"#"]],[29,29],[30,30]]],[1540686480713,["gjx16@GJXAIOU",[[1,30,"# 二级指针做输出"]],[30,30],[39,39]]],[1540686481130,["gjx16@GJXAIOU",[[1,39,"\n\n"]],[39,39],[40,40]]],[1540686481874,["gjx16@GJXAIOU",[[1,41,"\n"]],[40,40],[41,41]]],[1540686485028,["gjx16@GJXAIOU",[[-1,41,"\n"],[1,42,"#"]],[41,41],[42,42]]],[1540686485582,["gjx16@GJXAIOU",[[1,42,"# "]],[42,42],[44,44]]],[1540686491779,["gjx16@GJXAIOU",[[1,44,"多即指针"]],[44,44],[48,48]]],[1540686492938,["gjx16@GJXAIOU",[[-1,44,"多即指针"]],[48,48],[44,44]]],[1540686498905,["gjx16@GJXAIOU",[[1,44,"多级指针的使用"]],[44,44],[51,51]]],[1540686499445,["gjx16@GJXAIOU",[[1,51,"\n\n"]],[51,51],[52,52]]],[1540686500142,["gjx16@GJXAIOU",[[1,53,"\n"]],[52,52],[53,53]]],[1540686502841,["gjx16@GJXAIOU",[[1,54,"\n"]],[53,53],[54,54]]],[1540686503073,["gjx16@GJXAIOU",[[1,55,"\n"]],[54,54],[55,55]]],[1540686505182,["gjx16@GJXAIOU",[[-1,55,"\n"],[1,56,"#"]],[55,55],[56,56]]],[1540686515692,["gjx16@GJXAIOU",[[1,56,"# 一维数组的使用"]],[56,56],[65,65]]],[1540686516891,["gjx16@GJXAIOU",[[1,65,"\n\n"]],[65,65],[66,66]]],[1540686517293,["gjx16@GJXAIOU",[[1,67,"\n"]],[66,66],[67,67]]],[1540686519156,["gjx16@GJXAIOU",[[-1,67,"\n"],[1,68,"#"]],[67,67],[68,68]]],[1540686522243,["gjx16@GJXAIOU",[[1,68,"# 指针数组"]],[68,68],[74,74]]],[1540686522703,["gjx16@GJXAIOU",[[1,74,"\n\n"]],[74,74],[75,75]]],[1540686522888,["gjx16@GJXAIOU",[[1,76,"\n"]],[75,75],[76,76]]],[1540686524963,["gjx16@GJXAIOU",[[-1,76,"\n"],[1,77,"#"]],[76,76],[77,77]]],[1540686529408,["gjx16@GJXAIOU",[[1,77,"# 数组指针"]],[77,77],[83,83]]],[1540686530316,["gjx16@GJXAIOU",[[1,83,"\n\n"]],[83,83],[84,84]]],[1540686530514,["gjx16@GJXAIOU",[[1,85,"\n"]],[84,84],[85,85]]],[1540686530698,["gjx16@GJXAIOU",[[1,86,"\n"]],[85,85],[86,86]]],[1540686531005,["gjx16@GJXAIOU",[[1,87,"\n"]],[86,86],[87,87]]],[1540686533539,["gjx16@GJXAIOU",[[-1,87,"\n"],[1,88,"#"]],[87,87],[88,88]]],[1540686537429,["gjx16@GJXAIOU",[[1,88,"# 二维数组"]],[88,88],[94,94]]],[1540686538215,["gjx16@GJXAIOU",[[1,94,"\n\n"]],[94,94],[95,95]]],[1540686538640,["gjx16@GJXAIOU",[[1,96,"\n"]],[95,95],[96,96]]],[1540686538826,["gjx16@GJXAIOU",[[1,97,"\n"]],[96,96],[97,97]]],[1540686539989,["gjx16@GJXAIOU",[[-1,97,"\n"],[1,98,"#"]],[97,97],[98,98]]],[1540686540245,["gjx16@GJXAIOU",[[1,98,"#"]],[98,98],[99,99]]],[1540686543948,["gjx16@GJXAIOU",[[-1,98,"#"]],[99,99],[98,98]]],[1540686544102,["gjx16@GJXAIOU",[[-1,97,"#"],[1,98,"\n"]],[98,98],[97,97]]],[1540686544287,["gjx16@GJXAIOU",[[-1,97,"\n"]],[97,97],[96,96]]]],null,"gjx16@GJXAIOU"],["581351f3-32fe-4ea8-9894-1ca0b223d8c4",1540692021827,"# Day04二级指针与数组\n\n\n## 二级指针做输入\n\n## 二级指针做输出\n\n## 多级指针的使用\n\n\n\n## 一维数组的使用\n\n## 指针数组\n\n## 数组指针\n\n\n\n## 二维数组\n\n\n",[[1540692019764,["gjx16@GJXAIOU",[[1,29,"\n"]],[28,28],[29,29]]],[1540692019900,["gjx16@GJXAIOU",[[1,30,"\n"]],[29,29],[30,30]]],[1540692023624,["gjx16@GJXAIOU",[[1,19,"yi"]],[19,19],[21,21]]],[1540692024860,["gjx16@GJXAIOU",[[-1,19,"yi"]],[21,21],[19,19]]],[1540692026686,["gjx16@GJXAIOU",[[1,19,"一、"]],[19,19],[21,21]]],[1540692029405,["gjx16@GJXAIOU",[[1,19," "]],[19,19],[20,20]]],[1540692031857,["gjx16@GJXAIOU",[[1,38,"二"]],[37,37],[38,38]]],[1540692032418,["gjx16@GJXAIOU",[[1,38,"、"]],[38,38],[39,39]]],[1540692037619,["gjx16@GJXAIOU",[[1,51,"三、"]],[51,51],[53,53]]],[1540692042984,["gjx16@GJXAIOU",[[1,67,"四、"]],[67,67],[69,69]]],[1540692050490,["gjx16@GJXAIOU",[[1,81,"五、"]],[81,81],[83,83]]],[1540692056273,["gjx16@GJXAIOU",[[1,92,"六、"]],[92,92],[94,94]]],[1540692061791,["gjx16@GJXAIOU",[[1,105,"七、"]],[105,105],[107,107]]],[1540692072669,["gjx16@GJXAIOU",[[1,89,"\n"]],[88,88],[89,89]]],[1540692074483,["gjx16@GJXAIOU",[[1,78,"\n"]],[77,77],[78,78]]],[1540692076910,["gjx16@GJXAIOU",[[1,48,"\n"]],[47,47],[48,48]]]],null,"gjx16@GJXAIOU"],["6ed55fc2-93cb-4b71-9d14-27cbc15ae2d0",1540792574305,"# Day04二级指针与数组\n\n\n## 一、 二级指针做输入\n\n\n\n## 二、二级指针做输出\n\n\n## 三、多级指针的使用\n\n\n\n## 四、一维数组的使用\n\n\n## 五、指针数组\n\n\n## 六、数组指针\n\n\n\n## 七、二维数组\n\n\n",[[1540792530232,["gjx16@GJXAIOU",[[-1,48,"\n"]],[47,47],[46,46]]],[1540792532439,["gjx16@GJXAIOU",[[-1,34,"## 二、二级指针做输出"]],[46,46],[34,34]]],[1540792532633,["gjx16@GJXAIOU",[[-1,35,"\n"]],[34,34],[33,33]]],[1540792532815,["gjx16@GJXAIOU",[[-1,34,"\n"]],[33,33],[32,32]]],[1540792533039,["gjx16@GJXAIOU",[[-1,33,"\n"]],[32,32],[31,31]]],[1540792533288,["gjx16@GJXAIOU",[[-1,32,"\n"]],[31,31],[30,30]]],[1540792536456,["gjx16@GJXAIOU",[[-1,17,"## 一、 二级指针做输入"]],[30,30],[17,17]]],[1540792536952,["gjx16@GJXAIOU",[[-1,18,"\n"]],[17,17],[16,16]]],[1540792537343,["gjx16@GJXAIOU",[[-1,17,"\n"]],[16,16],[15,15]]],[1540792541360,["gjx16@GJXAIOU",[[1,31,"meiton"]],[31,31],[37,37]]],[1540792542935,["gjx16@GJXAIOU",[[-1,31,"meiton"]],[37,37],[31,31]]],[1540792551194,["gjx16@GJXAIOU",[[1,31,"没听懂"]],[31,31],[34,34]]],[1540792555634,["gjx16@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1540792555799,["gjx16@GJXAIOU",[[1,52,"\n"]],[51,51],[52,52]]],[1540792555983,["gjx16@GJXAIOU",[[1,53,"\n"]],[52,52],[53,53]]],[1540792556163,["gjx16@GJXAIOU",[[1,54,"\n"]],[53,53],[54,54]]],[1540792559760,["gjx16@GJXAIOU",[[1,55,"\n"]],[49,49],[50,50]]],[1540793196015,["gjx16@GJXAIOU",[[1,50,"int main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n}"]],[50,50],[411,411]]],[1540793202943,["gjx16@GJXAIOU",[[-1,50,"int main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n}"],[1,411,"·"]],[50,50],[51,51]]],[1540793203308,["gjx16@GJXAIOU",[[1,51,"··"]],[51,51],[53,53]]],[1540793204303,["gjx16@GJXAIOU",[[-1,50,"···"]],[53,53],[50,50]]],[1540793205504,["gjx16@GJXAIOU",[[1,50,"```"]],[50,50],[53,53]]],[1540793205527,["gjx16@GJXAIOU",[[1,53,"language\n```\n"]],[53,53],[53,61]]],[1540793207899,["gjx16@GJXAIOU",[[-1,53,"language"],[1,61,"c"]],[53,61],[54,54]]],[1540793208199,["gjx16@GJXAIOU",[[1,55,"\n"]],[54,54],[55,55]]],[1540793209359,["gjx16@GJXAIOU",[[1,55,"int main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n}"]],[55,55],[416,416]]],[1540793212682,["gjx16@GJXAIOU",[[1,49,"bao"]],[49,49],[52,52]]],[1540793213478,["gjx16@GJXAIOU",[[-1,49,"bao"]],[52,52],[49,49]]],[1540793227377,["gjx16@GJXAIOU",[[1,49,"包括一维数组的定义和使用"]],[49,49],[61,61]]],[1540793231638,["gjx16@GJXAIOU",[[-1,438,"\n"]],[438,438],[437,437]]],[1540793231734,["gjx16@GJXAIOU",[[-1,437,"\n"]],[437,437],[436,436]]],[1540793231881,["gjx16@GJXAIOU",[[-1,436,"\n"]],[436,436],[435,435]]],[1540794083095,["gjx16@GJXAIOU",[[1,67,"#include<stdio.h>\n#include<string.h>\n\n\n"],[1,426,"\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n"]],[67,428],[838,838]]],[1540794104015,["gjx16@GJXAIOU",[[1,49,"1."]],[49,49],[51,51]]],[1540794108699,["gjx16@GJXAIOU",[[1,49,"**"],[1,63,"**"]],[49,63],[49,67]]],[1540794113384,["gjx16@GJXAIOU",[[1,849,"****"]],[849,849],[851,851]]],[1540794126780,["gjx16@GJXAIOU",[[1,851,"2.使用typedef定义数组类型"]],[851,851],[868,868]]],[1540794128326,["gjx16@GJXAIOU",[[1,873,"\n"]],[870,870],[871,871]]],[1540794132653,["gjx16@GJXAIOU",[[1,871,"~··"]],[871,871],[874,874]]],[1540794133375,["gjx16@GJXAIOU",[[-1,871,"~··"]],[874,874],[871,871]]],[1540794133495,["gjx16@GJXAIOU",[[-1,873,"\n"]],[871,871],[870,870]]],[1540794133930,["gjx16@GJXAIOU",[[1,873,"\n"]],[870,870],[871,871]]],[1540794135027,["gjx16@GJXAIOU",[[1,871,"···"]],[871,871],[874,874]]],[1540794136415,["gjx16@GJXAIOU",[[-1,871,"···"]],[874,874],[871,871]]],[1540794137624,["gjx16@GJXAIOU",[[1,871,"```"]],[871,871],[874,874]]],[1540794137651,["gjx16@GJXAIOU",[[1,874,"language\n```\n"]],[874,874],[874,882]]],[1540794139159,["gjx16@GJXAIOU",[[-1,874,"language"],[1,882,"c"]],[874,882],[875,875]]],[1540794139486,["gjx16@GJXAIOU",[[1,876,"\n"]],[875,875],[876,876]]],[1540794157855,["gjx16@GJXAIOU",[[1,876,"//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\t\n"]],[876,876],[1078,1078]]],[1540794158054,["gjx16@GJXAIOU",[[-1,1077,"\t"],[1,1078,"\n"]],[1078,1078],[1078,1078]]],[1540794160143,["gjx16@GJXAIOU",[[1,1078,"for()"]],[1078,1078],[1083,1083]]],[1540794169702,["gjx16@GJXAIOU",[[1,1082,"i = 0 ; i < 8 ; i++"]],[1082,1082],[1101,1101]]],[1540794171213,["gjx16@GJXAIOU",[[1,1104,"\n"]],[1102,1102],[1103,1103]]],[1540794172608,["gjx16@GJXAIOU",[[1,1103,"{}"]],[1103,1103],[1105,1105]]],[1540794173981,["gjx16@GJXAIOU",[[1,1104,"\n"]],[1104,1104],[1105,1105]]],[1540794174126,["gjx16@GJXAIOU",[[1,1105,"\n"]],[1105,1105],[1106,1106]]],[1540794183947,["gjx16@GJXAIOU",[[1,1105,"  b[i] = i;"]],[1105,1105],[1116,1116]]],[1540794194310,["gjx16@GJXAIOU",[[1,1077,"//数组元素"]],[1077,1077],[1083,1083]]],[1540794196545,["gjx16@GJXAIOU",[[1,1083,"复制"]],[1083,1083],[1085,1085]]],[1540794197141,["gjx16@GJXAIOU",[[-1,1083,"复制"]],[1085,1085],[1083,1083]]],[1540794199390,["gjx16@GJXAIOU",[[1,1083,"赋值"]],[1083,1083],[1085,1085]]],[1540794202335,["gjx16@GJXAIOU",[[1,1077,"\n"]],[1077,1077],[1078,1078]]],[1540794202438,["gjx16@GJXAIOU",[[1,1078,"\n"]],[1078,1078],[1079,1079]]],[1540794215637,["gjx16@GJXAIOU",[[-1,1136,"\n"]],[1136,1136],[1135,1135]]],[1540797021021,["gjx16@GJXAIOU",[[1,1147,"··"]],[1147,1147],[1149,1149]]],[1540797021989,["gjx16@GJXAIOU",[[-1,1147,"··"]],[1149,1149],[1147,1147]]],[1540797022970,["gjx16@GJXAIOU",[[1,1147,"```"]],[1147,1147],[1150,1150]]],[1540797022994,["gjx16@GJXAIOU",[[1,1150,"language\n```\n"]],[1150,1150],[1150,1158]]],[1540797024314,["gjx16@GJXAIOU",[[-1,1150,"language"],[1,1158,"c"]],[1150,1158],[1151,1151]]],[1540797024588,["gjx16@GJXAIOU",[[1,1152,"\n"]],[1151,1151],[1152,1152]]],[1540797025421,["gjx16@GJXAIOU",[[1,1152,"#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}"]],[1152,1152],[1502,1502]]],[1540811237874,["gjx16@GJXAIOU",[[1,1518,"```"]],[1518,1518],[1521,1521]]],[1540811237901,["gjx16@GJXAIOU",[[1,1521,"language\n```\n"]],[1521,1521],[1521,1529]]],[1540811240003,["gjx16@GJXAIOU",[[-1,1521,"language"],[1,1529,"c"]],[1521,1529],[1522,1522]]],[1540811240329,["gjx16@GJXAIOU",[[1,1523,"\n"]],[1522,1522],[1523,1523]]],[1540811241739,["gjx16@GJXAIOU",[[1,1524,"//数组指针：本质上为指针，是一个指向数组的指针\n\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\t//方法一；先定义数组类型，根据类型定义指针变量\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n"]],[1523,1523],[1950,1950]]],[1540811437618,["gjx16@GJXAIOU",[[-1,1524,"//数组指针：本质上为指针，是一个指向数组的指针\n"]],[1523,1548],[1523,1523]]],[1540811439076,["gjx16@GJXAIOU",[[1,1518,"\n"]],[1517,1517],[1518,1518]]],[1540811439274,["gjx16@GJXAIOU",[[1,1519,"\n"]],[1518,1518],[1519,1519]]],[1540811439733,["gjx16@GJXAIOU",[[1,1520,"//数组指针：本质上为指针，是一个指向数组的指针\n"]],[1519,1519],[1544,1544]]],[1540811442289,["gjx16@GJXAIOU",[[-1,1520,"//"]],[1522,1522],[1520,1520]]],[1540811446651,["gjx16@GJXAIOU",[[-1,1549,"\n"]],[1549,1549],[1548,1548]]],[1540811446953,["gjx16@GJXAIOU",[[-1,1548,"\n"]],[1548,1548],[1547,1547]]],[1540811450810,["gjx16@GJXAIOU",[[1,1956,"\n"]],[1952,1952],[1953,1953]]],[1540811452525,["gjx16@GJXAIOU",[[1,1953,"****"]],[1953,1953],[1955,1955]]],[1540811454614,["gjx16@GJXAIOU",[[1,1955,"dingyi "]],[1955,1955],[1962,1962]]],[1540811456033,["gjx16@GJXAIOU",[[-1,1955,"dingyi "]],[1962,1962],[1955,1955]]],[1540811462188,["gjx16@GJXAIOU",[[1,1955,"定义方法2："]],[1955,1955],[1961,1961]]],[1540811464129,["gjx16@GJXAIOU",[[1,1967,"\n"]],[1963,1963],[1964,1964]]],[1540811465421,["gjx16@GJXAIOU",[[1,1964,"```"]],[1964,1964],[1967,1967]]],[1540811465447,["gjx16@GJXAIOU",[[1,1967,"language\n```\n"]],[1967,1967],[1967,1975]]],[1540811466555,["gjx16@GJXAIOU",[[-1,1967,"language"],[1,1975,"c"]],[1967,1975],[1968,1968]]],[1540811466803,["gjx16@GJXAIOU",[[1,1969,"\n"]],[1968,1968],[1969,1969]]],[1540811466954,["gjx16@GJXAIOU",[[1,1970,"\n"]],[1969,1969],[1970,1970]]],[1540811907371,["gjx16@GJXAIOU",[[1,1971,"#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n"]],[1969,1969],[2412,2412]]],[1540811910272,["gjx16@GJXAIOU",[[-1,1970,"\n"]],[1970,1970],[1969,1969]]],[1540811910747,["gjx16@GJXAIOU",[[-1,1969,"\n"]],[1969,1969],[1968,1968]]],[1540811920317,["gjx16@GJXAIOU",[[1,2416,"****"]],[2416,2416],[2418,2418]]],[1540811922393,["gjx16@GJXAIOU",[[1,2418,"dingy"]],[2418,2418],[2423,2423]]],[1540811923920,["gjx16@GJXAIOU",[[-1,2418,"dingy"]],[2423,2423],[2418,2418]]],[1540811928878,["gjx16@GJXAIOU",[[1,2418,"定义方法3："]],[2418,2418],[2424,2424]]],[1540811930747,["gjx16@GJXAIOU",[[1,2430,"\n"]],[2426,2426],[2427,2427]]],[1540811941160,["gjx16@GJXAIOU",[[1,1543,"\n"]],[1542,1542],[1543,1543]]],[1540811948972,["gjx16@GJXAIOU",[[1,1543,"定义方法：三种"]],[1543,1543],[1550,1550]]],[1540811951848,["gjx16@GJXAIOU",[[1,1551,"\n"]],[1550,1550],[1551,1551]]],[1540811952918,["gjx16@GJXAIOU",[[1,1551,"****"]],[1551,1551],[1553,1553]]],[1540811957603,["gjx16@GJXAIOU",[[1,1553,"定义方法1："]],[1553,1553],[1559,1559]]],[1540811961224,["gjx16@GJXAIOU",[[1,1972,"\n"]],[1971,1971],[1972,1972]]],[1540812791256,["gjx16@GJXAIOU",[[-1,2450,"\n"]],[2448,2448],[2447,2447]]],[1540812793426,["gjx16@GJXAIOU",[[1,2447,"··"]],[2447,2447],[2449,2449]]],[1540812794039,["gjx16@GJXAIOU",[[-1,2447,"··"]],[2449,2449],[2447,2447]]],[1540812795241,["gjx16@GJXAIOU",[[1,2447,"```"]],[2447,2447],[2450,2450]]],[1540812795268,["gjx16@GJXAIOU",[[1,2450,"language\n```\n"]],[2450,2450],[2450,2458]]],[1540812796385,["gjx16@GJXAIOU",[[-1,2450,"language"],[1,2458,"c"]],[2450,2458],[2451,2451]]],[1540812796608,["gjx16@GJXAIOU",[[1,2452,"\n"]],[2451,2451],[2452,2452]]],[1540812797608,["gjx16@GJXAIOU",[[1,2453,"//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n"]],[2452,2452],[2852,2852]]],[1540812803256,["gjx16@GJXAIOU",[[-1,2065,"//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）"]],[2065,2102],[2065,2065]]],[1540812805680,["gjx16@GJXAIOU",[[1,1989,"\n"]],[1988,1988],[1989,1989]]],[1540812806096,["gjx16@GJXAIOU",[[1,1989,"//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）"]],[1989,1989],[2026,2026]]],[1540812812144,["gjx16@GJXAIOU",[[-1,1654,"\t//方法一；先定义数组类型，根据类型定义指针变量"]],[1654,1679],[1654,1654]]],[1540812814505,["gjx16@GJXAIOU",[[1,1567,"\n"]],[1566,1566],[1567,1567]]],[1540812814880,["gjx16@GJXAIOU",[[1,1567,"\t//方法一；先定义数组类型，根据类型定义指针变量"]],[1567,1567],[1592,1592]]],[1540812817122,["gjx16@GJXAIOU",[[-1,1567,"\t"]],[1568,1568],[1567,1567]]],[1540812817239,["gjx16@GJXAIOU",[[-1,1566,"\n"]],[1567,1567],[1566,1566]]],[1540812818680,["gjx16@GJXAIOU",[[1,1566,"\n"]],[1566,1566],[1567,1567]]]],null,"gjx16@GJXAIOU"],["ffbb19f1-42c6-4817-949d-d84f0453a3ea",1540994176311,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n\n",[[1540994124812,["gjx16@GJXAIOU",[[-1,2872,"\n"],[1,2873,"b"]],[2872,2872],[2873,2873]]],[1540994125055,["gjx16@GJXAIOU",[[1,2873,"ao"]],[2873,2873],[2875,2875]]],[1540994125894,["gjx16@GJXAIOU",[[-1,2873,"ao"]],[2875,2875],[2873,2873]]],[1540994126022,["gjx16@GJXAIOU",[[-1,2872,"b"],[1,2873,"\n"]],[2873,2873],[2872,2872]]],[1540994129674,["gjx16@GJXAIOU",[[-1,2872,"\n"],[1,2873,"包括"]],[2872,2872],[2874,2874]]],[1540994136034,["gjx16@GJXAIOU",[[1,2874,"定义。使用，以及"]],[2874,2874],[2882,2882]]],[1540994138311,["gjx16@GJXAIOU",[[-1,2876,"。使用，以及"]],[2882,2882],[2876,2876]]],[1540994139219,["gjx16@GJXAIOU",[[1,2876,"、"]],[2876,2876],[2877,2877]]],[1540994141344,["gjx16@GJXAIOU",[[-1,2876,"、"]],[2877,2877],[2876,2876]]],[1540994143814,["gjx16@GJXAIOU",[[1,2876,"以及使用"]],[2876,2876],[2880,2880]]],[1540994144467,["gjx16@GJXAIOU",[[1,2880,"\n\n"]],[2880,2880],[2881,2881]]],[1540994146219,["gjx16@GJXAIOU",[[-1,2881,"\n"],[1,2882,"`"]],[2881,2881],[2882,2882]]],[1540994146583,["gjx16@GJXAIOU",[[1,2882,"``"]],[2882,2882],[2884,2884]]],[1540994146610,["gjx16@GJXAIOU",[[1,2884,"language\n```\n"]],[2884,2884],[2884,2892]]],[1540994147520,["gjx16@GJXAIOU",[[-1,2884,"language"],[1,2892,"c"]],[2884,2892],[2885,2885]]],[1540994147726,["gjx16@GJXAIOU",[[1,2886,"\n"]],[2885,2885],[2886,2886]]],[1540994147879,["gjx16@GJXAIOU",[[1,2887,"\n"]],[2886,2886],[2887,2887]]],[1540996267159,["gjx16@GJXAIOU",[[1,2886,"#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n\treturn 0;\n\n}\n\n"]],[2886,2886],[3493,3493]]],[1540996270515,["gjx16@GJXAIOU",[[1,3499,"\n"]],[3498,3498],[3499,3499]]],[1540996272106,["gjx16@GJXAIOU",[[1,3500,"\n"]],[3499,3499],[3500,3500]]],[1540996280808,["gjx16@GJXAIOU",[[1,3500,"![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n"]],[3500,3500],[3542,3542]]],[1540996286266,["gjx16@GJXAIOU",[[-1,3494,"\n"]],[3494,3494],[3493,3493]]],[1540996286482,["gjx16@GJXAIOU",[[-1,3493,"\n"]],[3493,3493],[3492,3492]]]],null,"gjx16@GJXAIOU"],["beb7f7a0-387a-44d4-a845-dcf7c9206003",1541032614624,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n包括定义以及使用\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n\treturn 0;\n\n}\n\n```\n\n![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n\n",[[1541032576957,["gjx16@GJXAIOU",[[1,3477,"\t\n"]],[3476,3476],[3478,3478]]],[1541032577082,["gjx16@GJXAIOU",[[-1,3477,"\t"],[1,3478,"\n"]],[3478,3478],[3478,3478]]],[1541032579889,["gjx16@GJXAIOU",[[1,3478,"、"]],[3478,3478],[3479,3479]]],[1541032580786,["gjx16@GJXAIOU",[[-1,3478,"、"]],[3479,3479],[3478,3478]]],[1541032586035,["gjx16@GJXAIOU",[[1,3478,"  /**/"]],[3478,3478],[3484,3484]]],[1541032588411,["gjx16@GJXAIOU",[[1,3482,"\n  \n  \n  \n  \n  "]],[3482,3482],[3497,3497]]],[1541032596219,["gjx16@GJXAIOU",[[1,3485,"yi"]],[3485,3485],[3487,3487]]],[1541032596809,["gjx16@GJXAIOU",[[-1,3485,"yi"]],[3487,3487],[3485,3485]]],[1541032604900,["gjx16@GJXAIOU",[[1,3485,"以int a[][4["]],[3485,3485],[3496,3496]]],[1541032605778,["gjx16@GJXAIOU",[[-1,3495,"["]],[3496,3496],[3495,3495]]],[1541032608957,["gjx16@GJXAIOU",[[1,3495,"]为例"]],[3495,3495],[3498,3498]]],[1541032609538,["gjx16@GJXAIOU",[[-1,3496,"为例"]],[3498,3498],[3496,3496]]],[1541032612164,["gjx16@GJXAIOU",[[1,3496," = d"]],[3496,3496],[3500,3500]]],[1541032612682,["gjx16@GJXAIOU",[[-1,3499,"d"]],[3500,3500],[3499,3499]]],[1541032613453,["gjx16@GJXAIOU",[[1,3499,"{"]],[3499,3499],[3500,3500]]],[1541032631836,["gjx16@GJXAIOU",[[1,3500,"1,2,3,4,5,6,7,8,9,10."]],[3500,3500],[3521,3521]]],[1541032632842,["gjx16@GJXAIOU",[[-1,3520,"."]],[3521,3521],[3520,3520]]],[1541032634485,["gjx16@GJXAIOU",[[1,3520,",11,2"]],[3520,3520],[3525,3525]]],[1541032635235,["gjx16@GJXAIOU",[[-1,3524,"2"]],[3525,3525],[3524,3524]]],[1541032635541,["gjx16@GJXAIOU",[[1,3524,"12"]],[3524,3524],[3526,3526]]],[1541032639869,["gjx16@GJXAIOU",[[1,3527,";为例"]],[3527,3527],[3530,3530]]],[1541032640803,["gjx16@GJXAIOU",[[1,3542,"\n  "]],[3530,3530],[3533,3533]]],[1541032656278,["gjx16@GJXAIOU",[[1,3533,"//a:d"]],[3533,3533],[3538,3538]]],[1541032656754,["gjx16@GJXAIOU",[[-1,3537,"d"]],[3538,3538],[3537,3537]]],[1541032665549,["gjx16@GJXAIOU",[[1,3537,"代表第0行的首地址"]],[3537,3537],[3546,3546]]],[1541032666042,["gjx16@GJXAIOU",[[1,3558,"\n  "]],[3546,3546],[3549,3549]]],[1541032667217,["gjx16@GJXAIOU",[[1,3549,"、、"]],[3549,3549],[3551,3551]]],[1541032667891,["gjx16@GJXAIOU",[[-1,3549,"、、"]],[3551,3551],[3549,3549]]],[1541032673381,["gjx16@GJXAIOU",[[1,3549,"//a + i"]],[3549,3549],[3556,3556]]],[1541032733546,[null,[[-1,3526,"\n"],[1,3527,"}"],[1,3530,"\n"],[-1,3532,"\n"],[1,3546,"\n"],[-1,3548,"\n"],[1,3556,"\n"],[-1,3561,"*"],[1,3568,"*"]],[3526,3526],[3569,3569]]],[1541032733546,[null,[[1,3526,"\n"],[-1,3526,"}"],[-1,3530,"\n"],[1,3533,"\n"],[-1,3546,"\n"],[1,3549,"\n"],[-1,3556,"\n"],[1,3562,"*"],[-1,3568,"*"]],[3569,3569],[3526,3526]]],[1541032705129,["gjx16@GJXAIOU",[[1,3556," 等价于 &a[i]  ，代表第i行首地址"]],[3556,3556],[3577,3577]]],[1541032705707,["gjx16@GJXAIOU",[[1,3589,"\n  "]],[3577,3577],[3580,3580]]],[1541032706999,["gjx16@GJXAIOU",[[1,3580,"、、"]],[3580,3580],[3582,3582]]],[1541032707531,["gjx16@GJXAIOU",[[-1,3580,"、、"]],[3582,3582],[3580,3580]]],[1541032710967,["gjx16@GJXAIOU",[[1,3580,"//*（）"]],[3580,3580],[3585,3585]]],[1541032716362,["gjx16@GJXAIOU",[[-1,3583,"（）"]],[3584,3584],[3583,3583]]],[1541032717460,["gjx16@GJXAIOU",[[1,3583,"()"]],[3583,3583],[3585,3585]]],[1541032720972,["gjx16@GJXAIOU",[[1,3584,"a + i"]],[3584,3584],[3589,3589]]],[1541032723767,["gjx16@GJXAIOU",[[1,3590," \""]],[3590,3590],[3592,3592]]],[1541032724475,["gjx16@GJXAIOU",[[-1,3591,"\""]],[3592,3592],[3591,3591]]],[1541032727187,["gjx16@GJXAIOU",[[1,3591,": baiso"]],[3591,3591],[3598,3598]]],[1541032728235,["gjx16@GJXAIOU",[[-1,3593,"baiso"]],[3598,3598],[3593,3593]]],[1541032732793,["gjx16@GJXAIOU",[[1,3593,"表示"]],[3593,3593],[3595,3595]]],[1541032793543,[null,[[-1,3526,"\n"],[1,3527,"}"],[1,3530,"\n"],[-1,3532,"\n"],[1,3546,"\n"],[-1,3548,"\n"],[1,3577,"\n"],[-1,3579,"\n"],[1,3595,"\n"],[-1,3597,"*"],[1,3607,"*"]],[3526,3526],[3608,3608]]],[1541032793543,[null,[[1,3526,"\n"],[-1,3526,"}"],[-1,3530,"\n"],[1,3533,"\n"],[-1,3546,"\n"],[1,3549,"\n"],[-1,3577,"\n"],[1,3580,"\n"],[-1,3595,"\n"],[1,3598,"*"],[-1,3607,"*"]],[3608,3608],[3526,3526]]],[1541032741677,["gjx16@GJXAIOU",[[1,3595,"第0行首元素地址"]],[3595,3595],[3603,3603]]],[1541032744707,["gjx16@GJXAIOU",[[1,3615,"\n  "]],[3603,3603],[3606,3606]]],[1541032749254,["gjx16@GJXAIOU",[[1,3606,"//*()"]],[3606,3606],[3611,3611]]],[1541032752605,["gjx16@GJXAIOU",[[1,3610,"a + i"]],[3610,3610],[3615,3615]]],[1541032766676,["gjx16@GJXAIOU",[[1,3616," + j  等价于 &a[i][i"]],[3616,3616],[3633,3633]]],[1541032767483,["gjx16@GJXAIOU",[[-1,3632,"i"]],[3633,3633],[3632,3632]]],[1541032788000,["gjx16@GJXAIOU",[[1,3632,"j]  :表示第i行第j列匀速"]],[3632,3632],[3647,3647]]],[1541032788802,["gjx16@GJXAIOU",[[-1,3645,"匀速"]],[3647,3647],[3645,3645]]],[1541032793357,["gjx16@GJXAIOU",[[1,3645,"元素的地址"]],[3645,3645],[3650,3650]]],[1541032853546,[null,[[-1,3526,"\n"],[1,3527,"}"],[1,3530,"\n"],[-1,3532,"\n"],[1,3546,"\n"],[-1,3548,"\n"],[1,3577,"\n"],[-1,3579,"\n"],[1,3603,"\n"],[-1,3605,"*"],[-1,3660,""],[1,3662,"*"]],[3526,3526],[3663,3663]]],[1541032853546,[null,[[1,3526,"\n"],[-1,3526,"}"],[-1,3530,"\n"],[1,3533,"\n"],[-1,3546,"\n"],[1,3549,"\n"],[-1,3577,"\n"],[1,3580,"\n"],[-1,3603,"\n"],[1,3606,"*"],[1,3660,""],[-1,3662,"*"]],[3663,3663],[3526,3526]]],[1541032793843,["gjx16@GJXAIOU",[[1,3662,"\n  "]],[3650,3650],[3653,3653]]],[1541032799743,["gjx16@GJXAIOU",[[1,3653,"//*()"]],[3653,3653],[3658,3658]]],[1541032806229,["gjx16@GJXAIOU",[[1,3657,"*（）"]],[3657,3657],[3660,3660]]],[1541032807043,["gjx16@GJXAIOU",[[-1,3658,"（）"]],[3660,3660],[3658,3658]]],[1541032808171,["gjx16@GJXAIOU",[[1,3658,"("]],[3658,3658],[3659,3659]]],[1541032808229,["gjx16@GJXAIOU",[[1,3660,")"]],[3659,3659],[3660,3660]]],[1541032812411,["gjx16@GJXAIOU",[[1,3659,"a +i"]],[3659,3659],[3663,3663]]],[1541032816387,["gjx16@GJXAIOU",[[1,3664," + j"]],[3664,3664],[3668,3668]]],[1541032826683,["gjx16@GJXAIOU",[[1,3669," 等价于 a[i] ["]],[3669,3669],[3680,3680]]],[1541032827385,["gjx16@GJXAIOU",[[-1,3677,"] ["]],[3680,3680],[3677,3677]]],[1541032840203,["gjx16@GJXAIOU",[[1,3677,"][j]  :表示第i行第jle"]],[3677,3677],[3693,3693]]],[1541032840905,["gjx16@GJXAIOU",[[-1,3691,"le"]],[3693,3693],[3691,3691]]],[1541032846441,["gjx16@GJXAIOU",[[1,3691,"列圆度"]],[3691,3691],[3694,3694]]],[1541032847241,["gjx16@GJXAIOU",[[-1,3692,"圆度"]],[3694,3694],[3692,3692]]],[1541032851355,["gjx16@GJXAIOU",[[1,3692,"元素的值"]],[3692,3692],[3696,3696]]],[1541033093547,[null,[[-1,3526,"\n"],[1,3527,"}"],[1,3530,"\n"],[-1,3532,"\n"],[1,3546,"\n"],[-1,3548,"\n"],[1,3577,"\n"],[-1,3579,"\n"],[1,3603,"\n"],[-1,3605,"*"],[1,3708,"*"]],[3526,3526],[3709,3709]]],[1541033093547,[null,[[1,3526,"\n"],[-1,3526,"}"],[-1,3530,"\n"],[1,3533,"\n"],[-1,3546,"\n"],[1,3549,"\n"],[-1,3577,"\n"],[1,3580,"\n"],[-1,3603,"\n"],[1,3606,"*"],[-1,3708,"*"]],[3709,3709],[3526,3526]]],[1541033073139,["gjx16@GJXAIOU",[[-1,3703,"  "]],[3705,3705],[3703,3703]]],[1541033073258,["gjx16@GJXAIOU",[[-1,3703,"\n"]],[3703,3703],[3702,3702]]],[1541033073858,["gjx16@GJXAIOU",[[-1,3700,"  "]],[3702,3702],[3700,3700]]],[1541033074018,["gjx16@GJXAIOU",[[-1,3700,"\n"]],[3700,3700],[3699,3699]]],[1541033074146,["gjx16@GJXAIOU",[[-1,3698," "]],[3699,3699],[3698,3698]]],[1541033077939,["gjx16@GJXAIOU",[[-1,3725,"![图片1]($resource/%E5%9B%BE%E7%89%871.png)\n"]],[3724,3766],[3724,3724]]],[1541033081015,["gjx16@GJXAIOU",[[1,3724,"~~~~"]],[3724,3724],[3726,3726]]],[1541033082267,["gjx16@GJXAIOU",[[1,3726,"shi"]],[3726,3726],[3729,3729]]],[1541033084027,["gjx16@GJXAIOU",[[-1,3726,"shi"]],[3729,3729],[3726,3726]]],[1541033087029,["gjx16@GJXAIOU",[[1,3726,"视频18"]],[3726,3726],[3730,3730]]]],null,"gjx16@GJXAIOU"],["cfe8b354-16c5-4905-90dd-68caadbc8178",1541119220740,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n包括定义以及使用\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n  /*\n  以int a[][4] = {1,2,3,4,5,6,7,8,9,10,11,12};为例\n  //a:代表第0行的首地址\n  //a + i 等价于 &a[i]  ，代表第i行首地址\n  //*(a + i) : 表示第0行首元素地址\n  //*(a + i) + j  等价于 &a[i][j]  :表示第i行第j列元素的地址\n  //*(*(a +i) + j) 等价于 a[i][j]  :表示第i行第j列元素的值\n \n  */\n\n\treturn 0;\n\n}\n\n```\n~~视频18~~\n\n",[[1541119181056,["gjx16@GJXAIOU",[[-1,3596,"0"]],[3597,3597],[3596,3596]]],[1541119183198,["gjx16@GJXAIOU",[[1,3596,"i"]],[3596,3596],[3597,3597]]],[1541119690654,["gjx16@GJXAIOU",[[-1,3724,"~~视频18~~"]],[3732,3732],[3724,3724]]],[1541119702118,["gjx16@GJXAIOU",[[-1,2872,"包括定义以及使用"]],[2880,2880],[2872,2872]]],[1541119705123,["gjx16@GJXAIOU",[[1,2872,"1.****"]],[2872,2872],[2876,2876]]],[1541119706816,["gjx16@GJXAIOU",[[1,2876,"dingyi"]],[2876,2876],[2882,2882]]],[1541119708510,["gjx16@GJXAIOU",[[-1,2876,"dingyi"]],[2882,2882],[2876,2876]]],[1541119711867,["gjx16@GJXAIOU",[[1,2876,"定义与使用"]],[2876,2876],[2881,2881]]],[1541119721135,["gjx16@GJXAIOU",[[1,3729,"\n"]],[3727,3727],[3728,3728]]],[1541119725011,["gjx16@GJXAIOU",[[1,3728,"2.****"]],[3728,3728],[3732,3732]]],[1541119732224,["gjx16@GJXAIOU",[[1,3732,"求数组"]],[3732,3732],[3735,3735]]],[1541119733157,["gjx16@GJXAIOU",[[-1,3733,"数组"]],[3735,3735],[3733,3733]]],[1541119736493,["gjx16@GJXAIOU",[[1,3733,"而维护"]],[3733,3733],[3736,3736]]],[1541119738222,["gjx16@GJXAIOU",[[-1,3733,"而维护"]],[3736,3736],[3733,3733]]],[1541119744482,["gjx16@GJXAIOU",[[1,3733,"二维数组元素个数"]],[3733,3733],[3741,3741]]],[1541119747156,["gjx16@GJXAIOU",[[1,3745,"\n"]],[3743,3743],[3744,3744]]],[1541119810104,["gjx16@GJXAIOU",[[1,3744,"```"]],[3744,3744],[3747,3747]]],[1541119810131,["gjx16@GJXAIOU",[[1,3747,"language\n```\n"]],[3747,3747],[3747,3755]]],[1541119811201,["gjx16@GJXAIOU",[[-1,3747,"language"],[1,3755,"c"]],[3747,3755],[3748,3748]]],[1541119811437,["gjx16@GJXAIOU",[[1,3749,"\n"]],[3748,3748],[3749,3749]]],[1541119816153,["gjx16@GJXAIOU",[[1,3749,"in4 "]],[3749,3749],[3753,3753]]],[1541119816941,["gjx16@GJXAIOU",[[-1,3751,"4 "]],[3753,3753],[3751,3751]]],[1541119819519,["gjx16@GJXAIOU",[[1,3751,"t a"]],[3751,3751],[3754,3754]]],[1541119827112,["gjx16@GJXAIOU",[[1,3754,"[][8] = {}"]],[3754,3754],[3764,3764]]],[1541119831118,["gjx16@GJXAIOU",[[1,3763,"1,2.3/"]],[3763,3763],[3769,3769]]],[1541119832733,["gjx16@GJXAIOU",[[-1,3766,".3/"]],[3769,3769],[3766,3766]]],[1541119834407,["gjx16@GJXAIOU",[[1,3766,",4."]],[3766,3766],[3769,3769]]],[1541119835614,["gjx16@GJXAIOU",[[-1,3768,"."]],[3769,3769],[3768,3768]]],[1541119846535,["gjx16@GJXAIOU",[[1,3768,",3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3"]],[3768,3768],[3804,3804]]],[1541119849007,["gjx16@GJXAIOU",[[1,3805,";"]],[3805,3805],[3806,3806]]],[1541119849398,["gjx16@GJXAIOU",[[1,3807,"\n"]],[3806,3806],[3807,3807]]],[1541119855295,["gjx16@GJXAIOU",[[1,3807,"int num = 0;"]],[3807,3807],[3819,3819]]],[1541119855846,["gjx16@GJXAIOU",[[1,3820,"\n"]],[3819,3819],[3820,3820]]],[1541119859406,["gjx16@GJXAIOU",[[1,3820,"num = diz"]],[3820,3820],[3829,3829]]],[1541119861789,["gjx16@GJXAIOU",[[-1,3826,"diz"]],[3829,3829],[3826,3826]]],[1541119864689,["gjx16@GJXAIOU",[[1,3826,"sizeof()"]],[3826,3826],[3834,3834]]],[1541119967200,["gjx16@GJXAIOU",[[1,3833,"a"]],[3833,3833],[3834,3834]]],[1541119973230,["gjx16@GJXAIOU",[[1,3835,"/sizeof()"]],[3835,3835],[3844,3844]]],[1541119975606,["gjx16@GJXAIOU",[[1,3843,"int "]],[3843,3843],[3847,3847]]],[1541119976285,["gjx16@GJXAIOU",[[-1,3846," "]],[3847,3847],[3846,3846]]],[1541119978431,["gjx16@GJXAIOU",[[1,3847,"'"]],[3847,3847],[3848,3848]]],[1541119978845,["gjx16@GJXAIOU",[[1,3849,"\n"]],[3848,3848],[3849,3849]]],[1541119979726,["gjx16@GJXAIOU",[[-1,3849,"\n"]],[3849,3849],[3848,3848]]],[1541119980206,["gjx16@GJXAIOU",[[-1,3847,"'"]],[3848,3848],[3847,3847]]],[1541119981103,["gjx16@GJXAIOU",[[1,3847,";"]],[3847,3847],[3848,3848]]],[1541119981413,["gjx16@GJXAIOU",[[1,3849,"\n"]],[3848,3848],[3849,3849]]],[1541119988696,["gjx16@GJXAIOU",[[1,3849,"//等价于：nun"]],[3849,3849],[3858,3858]]],[1541119990501,["gjx16@GJXAIOU",[[-1,3857,"n"]],[3858,3858],[3857,3857]]],[1541119993414,["gjx16@GJXAIOU",[[1,3857,"m = dizoe"]],[3857,3857],[3866,3866]]],[1541119994918,["gjx16@GJXAIOU",[[-1,3861,"dizoe"]],[3866,3866],[3861,3861]]],[1541119997248,["gjx16@GJXAIOU",[[1,3861,"sizeof()"]],[3861,3861],[3869,3869]]],[1541119998072,["gjx16@GJXAIOU",[[1,3868,"a"]],[3868,3868],[3869,3869]]],[1541120002928,["gjx16@GJXAIOU",[[1,3870,"/sizeof()"]],[3870,3870],[3879,3879]]],[1541120007415,["gjx16@GJXAIOU",[[1,3878,"a[0][-"]],[3878,3878],[3884,3884]]],[1541120008118,["gjx16@GJXAIOU",[[-1,3883,"-"]],[3884,3884],[3883,3883]]],[1541120008982,["gjx16@GJXAIOU",[[1,3883,"0]"]],[3883,3883],[3885,3885]]],[1541120011776,["gjx16@GJXAIOU",[[1,3886,";"]],[3886,3886],[3887,3887]]],[1541120027774,["gjx16@GJXAIOU",[[1,3894,"\n"]],[3892,3892],[3893,3893]]],[1541120027919,["gjx16@GJXAIOU",[[1,3895,"\n"]],[3893,3893],[3894,3894]]],[1541120029825,["gjx16@GJXAIOU",[[1,3894,"3.s"]],[3894,3894],[3897,3897]]],[1541120030497,["gjx16@GJXAIOU",[[-1,3896,"s"]],[3897,3897],[3896,3896]]],[1541120031378,["gjx16@GJXAIOU",[[1,3896,"****"]],[3896,3896],[3898,3898]]],[1541120035113,["gjx16@GJXAIOU",[[1,3898,"数组指针"]],[3898,3898],[3902,3902]]],[1541120037086,["gjx16@GJXAIOU",[[1,3906,"\n"]],[3904,3904],[3905,3905]]],[1541120146071,["gjx16@GJXAIOU",[[1,3904," "]],[3904,3904],[3905,3905]]],[1541120153758,["gjx16@GJXAIOU",[[-1,3907,"\n"],[1,3908,"-"]],[3907,3907],[3908,3908]]],[1541120154534,["gjx16@GJXAIOU",[[1,3908,"d"]],[3908,3908],[3909,3909]]],[1541120155101,["gjx16@GJXAIOU",[[-1,3908,"d"]],[3909,3909],[3908,3908]]],[1541120155246,["gjx16@GJXAIOU",[[-1,3907,"-"],[1,3908,"\n"]],[3908,3908],[3907,3907]]],[1541120155636,["gjx16@GJXAIOU",[[-1,3907,"\n"]],[3907,3907],[3906,3906]]],[1541120157345,["gjx16@GJXAIOU",[[-1,3906,"\n"],[1,3907,"·"]],[3906,3906],[3907,3907]]],[1541120157712,["gjx16@GJXAIOU",[[1,3907,"··"]],[3907,3907],[3909,3909]]],[1541120158748,["gjx16@GJXAIOU",[[-1,3907,"··"]],[3909,3909],[3907,3907]]],[1541120158908,["gjx16@GJXAIOU",[[-1,3906,"·"],[1,3907,"\n"]],[3907,3907],[3906,3906]]],[1541120160335,["gjx16@GJXAIOU",[[-1,3906,"\n"],[1,3907,"`"]],[3906,3906],[3907,3907]]],[1541120160718,["gjx16@GJXAIOU",[[1,3907,"``"]],[3907,3907],[3909,3909]]],[1541120160746,["gjx16@GJXAIOU",[[1,3909,"language\n```\n"]],[3909,3909],[3909,3917]]],[1541120161704,["gjx16@GJXAIOU",[[-1,3909,"language"],[1,3917,"c"]],[3909,3917],[3910,3910]]],[1541120161932,["gjx16@GJXAIOU",[[1,3911,"\n"]],[3910,3910],[3911,3911]]],[1541120164374,["gjx16@GJXAIOU",[[1,3911,"int a "]],[3911,3911],[3917,3917]]],[1541120173957,["gjx16@GJXAIOU",[[1,3916,"[][8]"],[1,3917,"= {1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3};"]],[3911,3917],[3968,3968]]],[1541120176326,["gjx16@GJXAIOU",[[1,3969,"\n"]],[3968,3968],[3969,3969]]],[1541120209014,["gjx16@GJXAIOU",[[1,3970,"\n"]],[3969,3969],[3970,3970]]],[1541120212383,["gjx16@GJXAIOU",[[1,3970,"//dingyi "]],[3970,3970],[3979,3979]]],[1541120213902,["gjx16@GJXAIOU",[[-1,3972,"dingyi "]],[3979,3979],[3972,3972]]],[1541120219264,["gjx16@GJXAIOU",[[1,3972,"定义数组指针变量"]],[3972,3972],[3980,3980]]],[1541120220189,["gjx16@GJXAIOU",[[1,3981,"\n"]],[3980,3980],[3981,3981]]],[1541120682887,["gjx16@GJXAIOU",[[1,3594,"等价于 a[]"]],[3594,3594],[3601,3601]]],[1541120685007,["gjx16@GJXAIOU",[[1,3600,"i"]],[3600,3600],[3601,3601]]],[1541122602514,["gjx16@GJXAIOU",[[1,3919,"#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t\n\t"],[-1,3927,"8"],[1,3928,"5"],[1,3933," "],[1,3974," "],[1,3978,"\t"],[1,3980,"直接"],[1,3989,"\n\t//定义数组指针变量,这个指针变量应该指向一维数组的整个数组的首地址\n\n\tint(*p)[5];\n\t//错误定义：p = &a;  这是整个二维数组的首地址\n\tp = a;//表示第0行首地址，每次跳4*5个字节，这里p等价于二维数组名\n\n\n\t//先定义数组指针类型，然后定义变量\n\ttypedef int(*P)[10];\n\tP p;\n\tp = a;\n\n\n\n\n\t//测二维数组的函数和列数\n\tint num1 = sizeof(a) / sizeof(a[0]);//获取行数\n\tint num2 = sizeof(a[0]) / sizeof(a[0][0]);//获取列数\n\n\n\n}"]],[3919,3989],[4348,4348]]],[1541122970963,["gjx16@GJXAIOU",[[1,4353,"\n"]],[4352,4352],[4353,4353]]],[1541122971537,["gjx16@GJXAIOU",[[1,4354,"\n"]],[4353,4353],[4354,4354]]],[1541122972283,["gjx16@GJXAIOU",[[-1,4354,"\n"],[1,4355,"3"]],[4354,4354],[4355,4355]]],[1541122973827,["gjx16@GJXAIOU",[[1,4355,".****"]],[4355,4355],[4358,4358]]],[1541122974755,["gjx16@GJXAIOU",[[1,4358,"shuz"]],[4358,4358],[4362,4362]]],[1541122975700,["gjx16@GJXAIOU",[[-1,4358,"shuz"]],[4362,4362],[4358,4358]]],[1541122980602,["gjx16@GJXAIOU",[[1,4358,"数组指针做参数"]],[4358,4358],[4365,4365]]],[1541122982233,["gjx16@GJXAIOU",[[-1,4363,"参数"]],[4365,4365],[4363,4363]]],[1541122984649,["gjx16@GJXAIOU",[[1,4363,"形参"]],[4363,4363],[4365,4365]]],[1541123003969,["gjx16@GJXAIOU",[[1,4367,"\n\n"]],[4367,4367],[4368,4368]]],[1541123005658,["gjx16@GJXAIOU",[[1,4369,"\n"]],[4368,4368],[4369,4369]]],[1541123013829,["gjx16@GJXAIOU",[[-1,4369,"\n"],[1,4370,"`"]],[4369,4369],[4370,4370]]],[1541123014205,["gjx16@GJXAIOU",[[1,4370,"``"]],[4370,4370],[4372,4372]]],[1541123014236,["gjx16@GJXAIOU",[[1,4372,"language\n```\n"]],[4372,4372],[4372,4380]]],[1541123016100,["gjx16@GJXAIOU",[[-1,4372,"language"],[1,4380,"c"]],[4372,4380],[4373,4373]]],[1541123016313,["gjx16@GJXAIOU",[[1,4374,"\n"]],[4373,4373],[4374,4374]]],[1541123448888,["gjx16@GJXAIOU",[[1,4374,"#include<stdio.h>\n#include<string.h>\n\n\nvoid printarray(int a[][4])\n//等价于 void printarray(int a[3][4])\n//等价于 void printarray(int (*a)[4])//数组做形参则退化成指针，注意每一次跳的步长是不同的\n{\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tfor (j = 0; j < 4; j++)\n\t\t{\n\t\t\tprintf(\"%d  \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(void)\n{\n\n\tint a[][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };\n\n\tprintarray(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n"]],[4374,4374],[4806,4806]]],[1541123471499,["gjx16@GJXAIOU",[[1,4811,"\n"]],[4810,4810],[4811,4811]]],[1541123471651,["gjx16@GJXAIOU",[[1,4812,"\n"]],[4811,4811],[4812,4812]]],[1541123474420,["gjx16@GJXAIOU",[[-1,4812,"\n"],[1,4813,"c"]],[4812,4812],[4813,4813]]],[1541123474984,["gjx16@GJXAIOU",[[-1,4812,"c"],[1,4813,"\n"]],[4813,4813],[4812,4812]]],[1541123476999,["gjx16@GJXAIOU",[[-1,4812,"\n"],[1,4813,"程序"]],[4812,4812],[4814,4814]]],[1541123503240,["gjx16@GJXAIOU",[[1,4814,"运行结果：1  2  3  4\n5  6  7  8\n9  10  11  12"]],[4814,4814],[4854,4854]]],[1541123504993,["gjx16@GJXAIOU",[[1,4819,"\n"]],[4819,4819],[4820,4820]]],[1541123506836,["gjx16@GJXAIOU",[[1,4820,"·"]],[4820,4820],[4821,4821]]],[1541123507826,["gjx16@GJXAIOU",[[-1,4820,"·"]],[4821,4821],[4820,4820]]],[1541123508282,["gjx16@GJXAIOU",[[1,4820,"`"]],[4820,4820],[4821,4821]]],[1541123509458,["gjx16@GJXAIOU",[[1,4832,"`"]],[4832,4832],[4833,4833]]],[1541123510210,["gjx16@GJXAIOU",[[1,4844,"`"]],[4844,4844],[4845,4845]]],[1541123513218,["gjx16@GJXAIOU",[[1,4858,"`"]],[4858,4858],[4859,4859]]],[1541123513706,["gjx16@GJXAIOU",[[1,4843,"`"]],[4843,4843],[4844,4844]]],[1541123514171,["gjx16@GJXAIOU",[[1,4831,"`"]],[4831,4831],[4832,4832]]]],null,"gjx16@GJXAIOU"],["a365a226-7e48-427a-be55-53d62a1716c2",1541125358076,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n1.**定义与使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n  /*\n  以int a[][4] = {1,2,3,4,5,6,7,8,9,10,11,12};为例\n  //a:代表第0行的首地址\n  //a + i 等价于 &a[i]  ，代表第i行首地址\n  //*(a + i) 等价于 a[i]: 表示第i行首元素地址\n  //*(a + i) + j  等价于 &a[i][j]  :表示第i行第j列元素的地址\n  //*(*(a +i) + j) 等价于 a[i][j]  :表示第i行第j列元素的值\n \n  */\n\n\treturn 0;\n\n}\n\n```\n\n2.**求二维数组元素个数**\n```c\nint a[][8] = {1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3};\nint num = 0;\nnum = sizeof(a)/sizeof(int);\n//等价于：num = sizeof(a)/sizeof(a[0][0]);\n```\n\n\n3.**数组指针** \n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t\n\tint a[][5] = { 1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3 };\n\n\t//直接定义数组指针变量\n\n\t//定义数组指针变量,这个指针变量应该指向一维数组的整个数组的首地址\n\n\tint(*p)[5];\n\t//错误定义：p = &a;  这是整个二维数组的首地址\n\tp = a;//表示第0行首地址，每次跳4*5个字节，这里p等价于二维数组名\n\n\n\t//先定义数组指针类型，然后定义变量\n\ttypedef int(*P)[10];\n\tP p;\n\tp = a;\n\n\n\n\n\t//测二维数组的函数和列数\n\tint num1 = sizeof(a) / sizeof(a[0]);//获取行数\n\tint num2 = sizeof(a[0]) / sizeof(a[0][0]);//获取列数\n\n\n\n}\n```\n\n3.**数组指针做形参**\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid printarray(int a[][4])\n//等价于 void printarray(int a[3][4])\n//等价于 void printarray(int (*a)[4])//数组做形参则退化成指针，注意每一次跳的步长是不同的\n{\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tfor (j = 0; j < 4; j++)\n\t\t{\n\t\t\tprintf(\"%d  \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(void)\n{\n\n\tint a[][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };\n\n\tprintarray(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n\n```\n\n程序运行结果：\n`1  2  3  4`\n`5  6  7  8`\n`9  10  11  12`",[[1541125325049,["gjx16@GJXAIOU",[[1,4440,"、、"]],[4440,4440],[4442,4442]]],[1541125326075,["gjx16@GJXAIOU",[[-1,4440,"、、"]],[4442,4442],[4440,4440]]],[1541125328847,["gjx16@GJXAIOU",[[1,4440,"//dier"]],[4440,4440],[4446,4446]]],[1541125329942,["gjx16@GJXAIOU",[[-1,4442,"dier"]],[4446,4446],[4442,4442]]],[1541125351098,["gjx16@GJXAIOU",[[1,4442,"第二维为"]],[4442,4442],[4446,4446]]],[1541125363928,["gjx16@GJXAIOU",[[1,4446,"指针+1 的步长"]],[4446,4446],[4454,4454]]],[1541125458702,["gjx16@GJXAIOU",[[1,1508,"\n"]],[1506,1506],[1507,1507]]],[1541125458841,["gjx16@GJXAIOU",[[1,1509,"\n"]],[1507,1507],[1508,1508]]],[1541125460729,["gjx16@GJXAIOU",[[1,1508,"1、"]],[1508,1508],[1510,1510]]],[1541125462021,["gjx16@GJXAIOU",[[-1,1509,"、"]],[1510,1510],[1509,1509]]],[1541125462467,["gjx16@GJXAIOU",[[1,1509,"。"]],[1509,1509],[1510,1510]]],[1541125463593,["gjx16@GJXAIOU",[[-1,1509,"。"]],[1510,1510],[1509,1509]]],[1541125465848,["gjx16@GJXAIOU",[[1,1509,".****"]],[1509,1509],[1512,1512]]],[1541125560570,["gjx16@GJXAIOU",[[1,1512,"指针数组的定义："]],[1512,1512],[1520,1520]]],[1541125562517,["gjx16@GJXAIOU",[[1,1524,"\n"]],[1522,1522],[1523,1523]]],[1541125570432,["gjx16@GJXAIOU",[[1,1523,"//"]],[1523,1523],[1525,1525]]],[1541125571909,["gjx16@GJXAIOU",[[-1,1523,"//"]],[1525,1525],[1523,1523]]],[1541125575039,["gjx16@GJXAIOU",[[1,1523,"```c"]],[1523,1523],[1527,1527]]],[1541125575398,["gjx16@GJXAIOU",[[1,1529,"\n"]],[1527,1527],[1528,1528]]],[1541125576325,["gjx16@GJXAIOU",[[1,1530,"\n"]],[1528,1528],[1529,1529]]],[1541125577042,["gjx16@GJXAIOU",[[1,1529,"```"]],[1529,1529],[1532,1532]]],[1541125585675,["gjx16@GJXAIOU",[[1,1528,"//指针数组变量"]],[1528,1528],[1536,1536]]],[1541125586137,["gjx16@GJXAIOU",[[1,1537,"\n"]],[1536,1536],[1537,1537]]],[1541125589890,["gjx16@GJXAIOU",[[1,1537,"//【】"]],[1537,1537],[1541,1541]]],[1541125590590,["gjx16@GJXAIOU",[[-1,1539,"【】"]],[1541,1541],[1539,1539]]],[1541125597993,["gjx16@GJXAIOU",[[1,1539,"[]优先级比*"]],[1539,1539],[1546,1546]]],[1541125615538,["gjx16@GJXAIOU",[[1,1546,"高，它是数组，每个元素都是指针（）"]],[1546,1546],[1563,1563]]],[1541125620858,["gjx16@GJXAIOU",[[1,1562,"char*"]],[1562,1562],[1567,1567]]],[1541125621429,["gjx16@GJXAIOU",[[-1,1566,"*"]],[1567,1567],[1566,1566]]],[1541125622336,["gjx16@GJXAIOU",[[1,1566," *"]],[1566,1566],[1568,1568]]],[1541125624445,["gjx16@GJXAIOU",[[1,1570,"\n"]],[1569,1569],[1570,1570]]],[1541125637121,["gjx16@GJXAIOU",[[1,1570,"char *str[] = {}"]],[1570,1570],[1586,1586]]],[1541125640286,["gjx16@GJXAIOU",[[1,1585,"\"\""]],[1585,1585],[1587,1587]]],[1541125642368,["gjx16@GJXAIOU",[[1,1586,"123"]],[1586,1586],[1589,1589]]],[1541125646344,["gjx16@GJXAIOU",[[1,1590,",\"\""]],[1590,1590],[1593,1593]]],[1541125649055,["gjx16@GJXAIOU",[[1,1592,"578"]],[1592,1592],[1595,1595]]],[1541125651072,["gjx16@GJXAIOU",[[1,1597,";"]],[1597,1597],[1598,1598]]],[1541125651529,["gjx16@GJXAIOU",[[1,1599,"\n"]],[1598,1598],[1599,1599]]],[1541125657720,["gjx16@GJXAIOU",[[1,1599,"char **str"]],[1599,1599],[1609,1609]]],[1541125658783,["gjx16@GJXAIOU",[[1,1609,"["]],[1609,1609],[1610,1610]]],[1541125659285,["gjx16@GJXAIOU",[[-1,1609,"["]],[1610,1610],[1609,1609]]],[1541125661514,["gjx16@GJXAIOU",[[1,1609," = {}"]],[1609,1609],[1614,1614]]],[1541125671598,["gjx16@GJXAIOU",[[1,1613,"\"123\",\"578\""],[1,1614,";"]],[1612,1614],[1626,1626]]],[1541125677892,["gjx16@GJXAIOU",[[1,1626,"//错误的"]],[1626,1626],[1631,1631]]],[1541125678840,["gjx16@GJXAIOU",[[1,1632,"\n"]],[1631,1631],[1632,1632]]],[1541125684405,["gjx16@GJXAIOU",[[1,1638,"\n"]],[1636,1636],[1637,1637]]],[1541125687499,["gjx16@GJXAIOU",[[1,1637,"2.****"]],[1637,1637],[1641,1641]]],[1541125694043,["gjx16@GJXAIOU",[[1,1641,"指针数组做形参"]],[1641,1641],[1648,1648]]],[1541125696597,["gjx16@GJXAIOU",[[1,1652,"\n"]],[1650,1650],[1651,1651]]],[1541125705046,["gjx16@GJXAIOU",[[1,1651,"```c"]],[1651,1651],[1655,1655]]],[1541125705313,["gjx16@GJXAIOU",[[1,1657,"\n"]],[1655,1655],[1656,1656]]],[1541125705462,["gjx16@GJXAIOU",[[1,1658,"\n"]],[1656,1656],[1657,1657]]],[1541125705630,["gjx16@GJXAIOU",[[1,1659,"\n"]],[1657,1657],[1658,1658]]],[1541125706335,["gjx16@GJXAIOU",[[1,1658,"```"]],[1658,1658],[1661,1661]]],[1541125712335,["gjx16@GJXAIOU",[[1,1656,"void fun()"]],[1656,1656],[1666,1666]]],[1541125714390,["gjx16@GJXAIOU",[[1,1665,"s"]],[1665,1665],[1666,1666]]],[1541125714872,["gjx16@GJXAIOU",[[-1,1665,"s"]],[1666,1666],[1665,1665]]],[1541125715407,["gjx16@GJXAIOU",[[1,1665,"ca"]],[1665,1665],[1667,1667]]],[1541125716381,["gjx16@GJXAIOU",[[-1,1666,"a"]],[1667,1667],[1666,1666]]],[1541125717250,["gjx16@GJXAIOU",[[1,1666,"har"]],[1666,1666],[1669,1669]]],[1541125722470,["gjx16@GJXAIOU",[[1,1669," *str[]"]],[1669,1669],[1676,1676]]],[1541125725937,["gjx16@GJXAIOU",[[1,1677,";"]],[1677,1677],[1678,1678]]],[1541125726933,["gjx16@GJXAIOU",[[1,1680,"\n"]],[1678,1678],[1679,1679]]],[1541125727879,["gjx16@GJXAIOU",[[1,1679,"c"]],[1679,1679],[1680,1680]]],[1541125728349,["gjx16@GJXAIOU",[[-1,1679,"c"]],[1680,1680],[1679,1679]]],[1541125732616,["gjx16@GJXAIOU",[[1,1679,"void fun()"]],[1679,1679],[1689,1689]]],[1541125737170,["gjx16@GJXAIOU",[[1,1688,"char **str"]],[1688,1688],[1698,1698]]],[1541125740935,["gjx16@GJXAIOU",[[1,1699,";"]],[1699,1699],[1700,1700]]],[1541125744527,["gjx16@GJXAIOU",[[1,1656,"\n"]],[1655,1655],[1656,1656]]],[1541125754826,["gjx16@GJXAIOU",[[1,1656,"//以下两个等价"]],[1656,1656],[1664,1664]]],[1541125772502,["gjx16@GJXAIOU",[[1,1709,"//因为str[] = *str"]],[1709,1709],[1725,1725]]],[1541125774188,["gjx16@GJXAIOU",[[1,1727,"\n"]],[1725,1725],[1726,1726]]],[1541125778316,["gjx16@GJXAIOU",[[-1,1727,"\n"]],[1727,1727],[1726,1726]]],[1541125781285,["gjx16@GJXAIOU",[[1,1732,"\n"]],[1730,1730],[1731,1731]]],[1541125781495,["gjx16@GJXAIOU",[[1,1733,"\n"]],[1731,1731],[1732,1732]]],[1541125785075,["gjx16@GJXAIOU",[[1,1732,"3.****"]],[1732,1732],[1736,1736]]],[1541125788304,["gjx16@GJXAIOU",[[1,1736,"mina"]],[1736,1736],[1740,1740]]],[1541125789436,["gjx16@GJXAIOU",[[-1,1737,"ina"]],[1740,1740],[1737,1737]]],[1541125796450,["gjx16@GJXAIOU",[[1,1737,"ain函数的指针数组"]],[1737,1737],[1747,1747]]],[1541125798419,["gjx16@GJXAIOU",[[1,1751,"\n"]],[1749,1749],[1750,1750]]],[1541125803158,["gjx16@GJXAIOU",[[1,1750,"·=```"]],[1750,1750],[1755,1755]]],[1541125804591,["gjx16@GJXAIOU",[[-1,1750,"·=```"]],[1755,1755],[1750,1750]]],[1541125806422,["gjx16@GJXAIOU",[[1,1750,"```c"]],[1750,1750],[1754,1754]]],[1541125806741,["gjx16@GJXAIOU",[[1,1756,"\n"]],[1754,1754],[1755,1755]]],[1541125806909,["gjx16@GJXAIOU",[[1,1757,"\n"]],[1755,1755],[1756,1756]]],[1541125807120,["gjx16@GJXAIOU",[[1,1758,"\n"]],[1756,1756],[1757,1757]]],[1541125807421,["gjx16@GJXAIOU",[[1,1759,"\n"]],[1757,1757],[1758,1758]]],[1541125808158,["gjx16@GJXAIOU",[[1,1758,"```"]],[1758,1758],[1761,1761]]],[1541125835944,["gjx16@GJXAIOU",[[1,1755,"//argc :传参数的个数（）"]],[1755,1755],[1771,1771]]],[1541125844012,["gjx16@GJXAIOU",[[1,1770,"包括可执行程序"]],[1770,1770],[1777,1777]]],[1541125845926,["gjx16@GJXAIOU",[[1,1781,"\n"]],[1778,1778],[1779,1779]]],[1541125855711,["gjx16@GJXAIOU",[[1,1779,"//argv: zhizh"]],[1779,1779],[1792,1792]]],[1541125856824,["gjx16@GJXAIOU",[[-1,1787,"zhizh"]],[1792,1792],[1787,1787]]],[1541125866108,["gjx16@GJXAIOU",[[1,1787,"指针数组，指向输入的参数"]],[1787,1787],[1799,1799]]],[1541125870222,["gjx16@GJXAIOU",[[1,1802,"\n"]],[1799,1799],[1800,1800]]],[1541125870920,["gjx16@GJXAIOU",[[1,1803,"\n"]],[1800,1800],[1801,1801]]],[1541125878177,["gjx16@GJXAIOU",[[1,1801,"int main()"]],[1801,1801],[1811,1811]]],[1541125891143,["gjx16@GJXAIOU",[[1,1810,"int argc, i"]],[1810,1810],[1821,1821]]],[1541125891805,["gjx16@GJXAIOU",[[-1,1820,"i"]],[1821,1821],[1820,1820]]],[1541125896302,["gjx16@GJXAIOU",[[1,1820,"char *arg"]],[1820,1820],[1829,1829]]],[1541125900926,["gjx16@GJXAIOU",[[1,1829,"v[]"]],[1829,1829],[1832,1832]]],[1541125903655,["gjx16@GJXAIOU",[[1,1833,";"]],[1833,1833],[1834,1834]]],[1541125913397,["gjx16@GJXAIOU",[[1,1837,"\n"]],[1834,1834],[1835,1835]]],[1541125914173,["gjx16@GJXAIOU",[[1,1838,"\n"]],[1835,1835],[1836,1836]]],[1541125926319,["gjx16@GJXAIOU",[[1,1836,":demo.exe a b test"]],[1836,1836],[1854,1854]]],[1541125927543,["gjx16@GJXAIOU",[[1,1857,"\n"]],[1854,1854],[1855,1855]]],[1541125935726,["gjx16@GJXAIOU",[[1,1855,"int argc = 4"]],[1855,1855],[1867,1867]]],[1541125936789,["gjx16@GJXAIOU",[[1,1870,"\n"]],[1867,1867],[1868,1868]]],[1541125947529,["gjx16@GJXAIOU",[[1,1868,"char *argv[] = {}"]],[1868,1868],[1885,1885]]],[1541125950959,["gjx16@GJXAIOU",[[1,1884,"\"\""]],[1884,1884],[1886,1886]]],[1541125956022,["gjx16@GJXAIOU",[[1,1885,"demo.exe"]],[1885,1885],[1893,1893]]],[1541125960070,["gjx16@GJXAIOU",[[1,1894,",\"\""]],[1894,1894],[1897,1897]]],[1541125960937,["gjx16@GJXAIOU",[[1,1896,"a"]],[1896,1896],[1897,1897]]],[1541125963718,["gjx16@GJXAIOU",[[1,1898,",\"\""]],[1898,1898],[1901,1901]]],[1541125965463,["gjx16@GJXAIOU",[[1,1900,"b"]],[1900,1900],[1901,1901]]],[1541125969126,["gjx16@GJXAIOU",[[1,1902,",\"\""]],[1902,1902],[1905,1905]]],[1541125972118,["gjx16@GJXAIOU",[[1,1904,"test"]],[1904,1904],[1908,1908]]]],null,"gjx16@GJXAIOU"],["d44f541b-f10f-430b-a2bc-855259e48410",1541142299987,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n1.**指针数组的定义：**\n```c\n//指针数组变量\n//[]优先级比*高，它是数组，每个元素都是指针（char *）\nchar *str[] = {\"123\",\"578\"};\nchar **str = {\"123\",\"578\"};//错误的\n\n```\n2.**指针数组做形参**\n```c\n//以下两个等价\nvoid fun(char *str[]);\nvoid fun(char **str);//因为str[] = *str\n\n```\n\n3.**main函数的指针数组**\n```c\n//argc :传参数的个数（包括可执行程序）\n//argv: 指针数组，指向输入的参数\n\nint main(int argc, char *argv[]);\n\n:demo.exe a b test\nint argc = 4\nchar *argv[] = {\"demo.exe\",\"a\",\"b\",\"test\"}\n\n\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n1.**定义与使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n  /*\n  以int a[][4] = {1,2,3,4,5,6,7,8,9,10,11,12};为例\n  //a:代表第0行的首地址\n  //a + i 等价于 &a[i]  ，代表第i行首地址\n  //*(a + i) 等价于 a[i]: 表示第i行首元素地址\n  //*(a + i) + j  等价于 &a[i][j]  :表示第i行第j列元素的地址\n  //*(*(a +i) + j) 等价于 a[i][j]  :表示第i行第j列元素的值\n \n  */\n\n\treturn 0;\n\n}\n\n```\n\n2.**求二维数组元素个数**\n```c\nint a[][8] = {1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3};\nint num = 0;\nnum = sizeof(a)/sizeof(int);\n//等价于：num = sizeof(a)/sizeof(a[0][0]);\n```\n\n\n3.**数组指针** \n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t\n\tint a[][5] = { 1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3 };\n\n\t//直接定义数组指针变量\n\n\t//定义数组指针变量,这个指针变量应该指向一维数组的整个数组的首地址\n\n\tint(*p)[5];\n\t//错误定义：p = &a;  这是整个二维数组的首地址\n\tp = a;//表示第0行首地址，每次跳4*5个字节，这里p等价于二维数组名\n\n\n\t//先定义数组指针类型，然后定义变量\n\ttypedef int(*P)[10];\n\tP p;\n\tp = a;\n\n\n\n\n\t//测二维数组的函数和列数\n\tint num1 = sizeof(a) / sizeof(a[0]);//获取行数\n\tint num2 = sizeof(a[0]) / sizeof(a[0][0]);//获取列数\n\n\n\n}\n```\n\n3.**数组指针做形参**\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid printarray(int a[][4])//第二维为指针+1 的步长\n//等价于 void printarray(int a[3][4])\n//等价于 void printarray(int (*a)[4])//数组做形参则退化成指针，注意每一次跳的步长是不同的\n{\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tfor (j = 0; j < 4; j++)\n\t\t{\n\t\t\tprintf(\"%d  \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(void)\n{\n\n\tint a[][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };\n\n\tprintarray(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n\n```\n\n程序运行结果：\n`1  2  3  4`\n`5  6  7  8`\n`9  10  11  12`",[[1541142276001,["gjx16@GJXAIOU",[[1,5285,"\n\n"]],[5285,5285],[5286,5286]]],[1541142276122,["gjx16@GJXAIOU",[[1,5287,"\n"]],[5286,5286],[5287,5287]]],[1541143379604,["gjx16@GJXAIOU",[[1,5288,"\n"]],[5287,5287],[5288,5288]]],[1541143382782,["gjx16@GJXAIOU",[[-1,5288,"\n"],[1,5289,"#"]],[5288,5288],[5289,5289]]],[1541143383269,["gjx16@GJXAIOU",[[1,5289,"##"]],[5289,5289],[5291,5291]]],[1541143384001,["gjx16@GJXAIOU",[[-1,5290,"#"]],[5291,5291],[5290,5290]]],[1541143385831,["gjx16@GJXAIOU",[[1,5290," 作业"]],[5290,5290],[5293,5293]]],[1541143387556,["gjx16@GJXAIOU",[[1,5293,"\n\n"]],[5293,5293],[5294,5294]]],[1541143387705,["gjx16@GJXAIOU",[[1,5295,"\n"]],[5294,5294],[5295,5295]]],[1541143388937,["gjx16@GJXAIOU",[[-1,5295,"\n"],[1,5296,"@"]],[5295,5295],[5296,5296]]],[1541143389776,["gjx16@GJXAIOU",[[-1,5295,"@"],[1,5296,"\n"]],[5296,5296],[5295,5295]]],[1541143390359,["gjx16@GJXAIOU",[[-1,5295,"\n"],[1,5296,"#"]],[5295,5295],[5296,5296]]],[1541143396500,["gjx16@GJXAIOU",[[1,5296,"## 作业一："]],[5296,5296],[5303,5303]]],[1541143397097,["gjx16@GJXAIOU",[[1,5303,"\n\n"]],[5303,5303],[5304,5304]]],[1541143399923,["gjx16@GJXAIOU",[[-1,5304,"\n"],[1,5305,"`"]],[5304,5304],[5305,5305]]],[1541143400299,["gjx16@GJXAIOU",[[1,5305,"``"]],[5305,5305],[5307,5307]]],[1541143400331,["gjx16@GJXAIOU",[[1,5307,"language\n```\n"]],[5307,5307],[5307,5315]]],[1541143401261,["gjx16@GJXAIOU",[[-1,5307,"language"],[1,5315,"c"]],[5307,5315],[5308,5308]]],[1541143401504,["gjx16@GJXAIOU",[[1,5309,"\n"]],[5308,5308],[5309,5309]]],[1541143401669,["gjx16@GJXAIOU",[[1,5310,"\n"]],[5309,5309],[5310,5310]]],[1541143406371,["gjx16@GJXAIOU",[[1,5315,"\n"]],[5314,5314],[5315,5315]]],[1541143406516,["gjx16@GJXAIOU",[[1,5316,"\n"]],[5315,5315],[5316,5316]]],[1541143406688,["gjx16@GJXAIOU",[[1,5317,"\n"]],[5316,5316],[5317,5317]]],[1541143406880,["gjx16@GJXAIOU",[[1,5318,"\n"]],[5317,5317],[5318,5318]]],[1541143407064,["gjx16@GJXAIOU",[[1,5319,"\n"]],[5318,5318],[5319,5319]]],[1541143409154,["gjx16@GJXAIOU",[[-1,5319,"\n"],[1,5320,"#"]],[5319,5319],[5320,5320]]],[1541143411428,["gjx16@GJXAIOU",[[1,5320,"## zuoye"]],[5320,5320],[5328,5328]]],[1541143412472,["gjx16@GJXAIOU",[[-1,5323,"zuoye"]],[5328,5328],[5323,5323]]],[1541143416660,["gjx16@GJXAIOU",[[1,5323,"作业二："]],[5323,5323],[5327,5327]]],[1541143417185,["gjx16@GJXAIOU",[[1,5327,"\n\n"]],[5327,5327],[5328,5328]]],[1541143419019,["gjx16@GJXAIOU",[[-1,5328,"\n"],[1,5329,"`"]],[5328,5328],[5329,5329]]],[1541143419406,["gjx16@GJXAIOU",[[1,5329,"``"]],[5329,5329],[5331,5331]]],[1541143419438,["gjx16@GJXAIOU",[[1,5331,"language\n```\n"]],[5331,5331],[5331,5339]]],[1541143420212,["gjx16@GJXAIOU",[[-1,5331,"language"],[1,5339,"c"]],[5331,5339],[5332,5332]]],[1541143420416,["gjx16@GJXAIOU",[[1,5333,"\n"]],[5332,5332],[5333,5333]]],[1541143420587,["gjx16@GJXAIOU",[[1,5334,"\n"]],[5333,5333],[5334,5334]]],[1541143420750,["gjx16@GJXAIOU",[[1,5335,"\n"]],[5334,5334],[5335,5335]]],[1541143437459,["gjx16@GJXAIOU",[[1,5333,"int main()"]],[5333,5333],[5343,5343]]],[1541143438217,["gjx16@GJXAIOU",[[1,5346,"\n"]],[5343,5343],[5344,5344]]],[1541143439452,["gjx16@GJXAIOU",[[1,5344,"{}"]],[5344,5344],[5346,5346]]],[1541143440657,["gjx16@GJXAIOU",[[1,5345,"\n"]],[5345,5345],[5346,5346]]],[1541143440832,["gjx16@GJXAIOU",[[1,5346,"\n"]],[5346,5346],[5347,5347]]],[1541143441000,["gjx16@GJXAIOU",[[1,5347,"\n"]],[5347,5347],[5348,5348]]],[1541143441248,["gjx16@GJXAIOU",[[1,5348,"\n"]],[5348,5348],[5349,5349]]],[1541143441636,["gjx16@GJXAIOU",[[1,5349,"\n"]],[5349,5349],[5350,5350]]],[1541143441781,["gjx16@GJXAIOU",[[1,5350,"\n"]],[5350,5350],[5351,5351]]],[1541143451506,["gjx16@GJXAIOU",[[1,5346,"  int ret = 0 ;//zh"]],[5346,5346],[5365,5365]]],[1541143452059,["gjx16@GJXAIOU",[[-1,5363,"zh"]],[5365,5365],[5363,5363]]],[1541143457522,["gjx16@GJXAIOU",[[1,5363,"这是错误码"]],[5363,5363],[5368,5368]]],[1541143457995,["gjx16@GJXAIOU",[[1,5369,"  \n"]],[5368,5368],[5371,5371]]],[1541143459362,["gjx16@GJXAIOU",[[1,5371,"int "]],[5371,5371],[5375,5375]]],[1541143460392,["gjx16@GJXAIOU",[[-1,5371,"int "]],[5375,5375],[5371,5371]]],[1541143470050,["gjx16@GJXAIOU",[[1,5371,"char *p1[] = {};"]],[5371,5371],[5387,5387]]],[1541143473797,["gjx16@GJXAIOU",[[1,5385,"\"\""]],[5385,5385],[5387,5387]]],[1541143475966,["gjx16@GJXAIOU",[[1,5386,"aa,"]],[5386,5386],[5389,5389]]],[1541143478624,["gjx16@GJXAIOU",[[-1,5388,","]],[5389,5389],[5388,5388]]],[1541143481412,["gjx16@GJXAIOU",[[1,5389,",\"\""]],[5389,5389],[5392,5392]]],[1541143487917,["gjx16@GJXAIOU",[[1,5391,"ccccccc"]],[5391,5391],[5398,5398]]],[1541143491212,["gjx16@GJXAIOU",[[1,5399,",\"\""]],[5399,5399],[5402,5402]]],[1541143494227,["gjx16@GJXAIOU",[[1,5401,"bbbbb"]],[5401,5401],[5406,5406]]],[1541143496353,["gjx16@GJXAIOU",[[1,5410,"  \n"]],[5409,5409],[5412,5412]]],[1541143498578,["gjx16@GJXAIOU",[[1,5412,"xhar "]],[5412,5412],[5417,5417]]],[1541143500160,["gjx16@GJXAIOU",[[-1,5412,"xhar "]],[5417,5417],[5412,5412]]],[1541143514219,["gjx16@GJXAIOU",[[1,5412,"char buf2[][30] = {};"]],[5412,5412],[5433,5433]]],[1541143517445,["gjx16@GJXAIOU",[[1,5431,"\"\""]],[5431,5431],[5433,5433]]],[1541143522155,["gjx16@GJXAIOU",[[1,5432,"111111"]],[5432,5432],[5438,5438]]],[1541143525294,["gjx16@GJXAIOU",[[1,5439,",\"\""]],[5439,5439],[5442,5442]]],[1541143529836,["gjx16@GJXAIOU",[[1,5441,"3333333"]],[5441,5441],[5448,5448]]],[1541143534836,["gjx16@GJXAIOU",[[1,5449,",\"\""]],[5449,5449],[5452,5452]]],[1541143537981,["gjx16@GJXAIOU",[[1,5451,"222222"]],[5451,5451],[5457,5457]]],[1541143988875,["gjx16@GJXAIOU",[[1,5309,"#include<stdio.h>\n#include<string.h>\n\n\n#define NUM(a) (sizeof(a)/sizeof(*a))\n\n/*\n函数功能：找到数组中指定字符串的位置\n\n参数说明：\ntable ：字符串数组（指针数组）首地址\nsize ： 数组元素个数\nkey : 匹配字符串，如：\"do\"\npos :匹配字符串在数组中的位置，如果“do”在keywords[]中的位置为4\n\n返回值：\n成功：0\n失败：非0\n\n*/\n\n\nint  searchKeyTable(const char* table[] ,const int size,const char *key,int *pos)\n{\n\tif (table == NULL || key == NULL || pos == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint i = 0; \n\tint index = -1;  //因为可能正好为0，所以这里不能赋值为0，就随便选一个负数即可\n\tfor (i = 0; i < size; i++)\n\t{\n\t\tif (strcmp(table[i], key) == 0)\n\t\t{\n\t\t\tindex = i; \n\t\t\tbreak;\n\t\t}\n\n\t}\n\tif (index == -1)//没有匹配的字符串的时候\n\t{\n\t\treturn -2;\n\n\t}\n\n\t*pos = index + 1;\n\n\treturn 0;\n}\n\nint main(void)\n{\n\tconst char* keywords[] = { \"while\",\"case\",\"static\",\"do\" };\n\n\tint pos = 0;\n\tint ret = 0;\n\n\tret = searchKeyTable(keywords, NUM(keywords), \"do\", &pos);\n\n\tif (ret != 0)\n\t{\n\t\tprintf(\"searchKeyTable err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"%s located in keyword is : %d\\n\", pos);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[5309,5309],[6273,6273]]],[1541143993866,["gjx16@GJXAIOU",[[1,5303," che"]],[5303,5303],[5307,5307]]],[1541143994496,["gjx16@GJXAIOU",[[-1,5304,"che"]],[5307,5307],[5304,5304]]],[1541144000990,["gjx16@GJXAIOU",[[1,5304,"程序有点问题"]],[5304,5304],[5310,5310]]],[1541144019060,["gjx16@GJXAIOU",[[-1,6304,"int main()\n{\n  int ret = 0 ;//这是错误码\n  char *p1[] = {\"aa\",\"ccccccc\",\"bbbbb\"};\n  char buf2[][30] = {\"111111\",\"3333333\",\"222222\"};"]],[6304,6431],[6304,6304]]],[1541144762143,["gjx16@GJXAIOU",[[-1,6309,"}"]],[6310,6310],[6309,6309]]],[1541145385895,["gjx16@GJXAIOU",[[1,6306,"//作业下的第2分钟\n\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint ret = 0;//这是错误码\n\tchar *p1[] = { \"aa\",\"ccccccc\",\"bbbbb\" };\n\tchar buf2[][30] = { \"111111\",\"3333333\",\"222222\" };\n\tchar **p3 = NULL;\n\tint len1, len2, len3, i = 0;\n\n\tlen1 = sizeof(p1) / sizeof(*p1);\n\tlen2 = sizeof(buf2) / sizeof(buf2[0]);\n\n\t/*\n\t功能：\n\t1.把指针数组p1的字符串取出来\n\t2.把二维数组buf2的字符取出来\n\t3.上面的字符串放在p3.p3是在堆区分配的二维内存\n\t4.对p3中字符串进行排序，通过strcmp（）进行排序\n\n\t参数：\n\tp1:指针数组首地址，char *p1[] = { \"aa\",\"ccccccc\",\"bbbbb\" };\n\tlen1 :p1元素个数\n\tbuf2:二维数组首元素地址，char buf2[][30] = { \"111111\",\"3333333\",\"222222\" };\n\tlen2:buf2字符串的行数\n\tp3:二级指针的地址，需要在函数内分配二维内存，保存p1和buf2的字符串，还需要排序\n\tlen3：保存p3中字符串的个数\n\n\t返回值：\n\n\t*/\n\n\tret = sort(p1, len1, buf2, len2, &p3, &len3);\n\n\n\t//释放p3所指向内存\n\t//在函数内部把p3的值赋值为NULL\n\n\tfree_buf(&p3);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n\n\n\n\n}\n\n"]],[6304,6304],[7083,7083]]],[1541145390463,["gjx16@GJXAIOU",[[-1,7090,"\n"]],[7090,7090],[7089,7089]]],[1541145390606,["gjx16@GJXAIOU",[[-1,7089,"\n"]],[7089,7089],[7088,7088]]],[1541145390729,["gjx16@GJXAIOU",[[-1,7088,"\n"]],[7088,7088],[7087,7087]]],[1541145390863,["gjx16@GJXAIOU",[[-1,7087,"\n"]],[7087,7087],[7086,7086]]],[1541145391126,["gjx16@GJXAIOU",[[-1,7086,"\n"]],[7086,7086],[7085,7085]]],[1541145391321,["gjx16@GJXAIOU",[[-1,7085,"\n"]],[7085,7085],[7084,7084]]]],null,"gjx16@GJXAIOU"],["8c025cd2-0dd2-4789-816d-4a0384bd2b61",1541593600059,"# Day04二级指针与数组\n\n\n## 三、多级指针的使用\n\n没听懂\n\n## 四、一维数组的使用\n**1.包括一维数组的定义和使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main(void)\n{\n\tint a[] = { 1,2,3,4,5,6,7,8 };\n\t//sizeof() 是测量 变量多占的空间（变量所对应的类型的空间（这里是数组类型，并不是整数类型））\n\t//数组类型空间：由元素个数和元素类型所决定   8*4 = 32\n\t//sizeof(a[0]) 是首元素的大小，每个元素占4个字节\n\n\tint num = 0;\n\tnum = sizeof(a) / sizeof(a[0]);\n\n\t//使用\n\tint i = 0;\n\tfor (i = 0; i < num; i++)\n\t{\n\t\tprintf(\"%d \", *(a + i));\n\t//这里a+i ，因为a表示首元素的地址，因此a+i 表示第i个元素的地址，因此 *（a+i）表示第i个元素的内存值；\n\t}\n\n\n\t//数组类型\n\n\t//a代表首元素的地址\n\t//&a表示整个数组的首地址，它和 首元素地址是一样的，但是步长不同；\n\tprintf(\"a = %d   a+1 =  %d\\n \", a, a + 1);//步长为4\n\tprintf(\"&a = %d  &a+1  = %d\\n\", &a, &a + 1);//步长为32\n\t\n\n\t//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n}\n```\n**2.使用typedef定义数组类型**\n```c\n//因为数组类型由元素个数和元素类型决定，因此可以通过typedef定义一个数组类型。\n\t//如果有typedef则表示是类型，没有的话为变量\n\n\t//定义：\n\ttypedef int A[8];//这就表示是数组类型，不是变量，等价于typedef int (A)[8]\n\t//使用：\n\tA b;   //怎么看；将typedef去掉，同时将b替换到A的位置，结果为：int b[8],其他使用一样\n\n\n//数组元素赋值\nfor(i = 0 ; i < 8 ; i++)\n{\n  b[i] = i;\n}\n\n```\n\n\n## 五、指针数组\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n//argc： 传参数的个数（包含可执行程序）\n//argv:  指针数组，指向输入的参数内容\nint main(int  argc, char *argv[])//这个是系统调用，而里面的参数只能从命令行进行输入\n{\n\t//指针数组：本质上为数组，只是每个元素都是指针\n\t//[]的优先级是比*优先级高\n\n\n\tchar *a[] = { \"aaaaa\",\"bbbbbbb\",\"cccccccc\" };\n\tint i = 0;\n\n\tprintf(\"argc = %d\\n\", argc);\n\n\tfor (i = 0; i < argc; i++)\n\t{\n\t\tprintf(\"%s\\n\", argv[i]);\n\t}\n\n\n\n\n}\n```\n\n1.**指针数组的定义：**\n```c\n//指针数组变量\n//[]优先级比*高，它是数组，每个元素都是指针（char *）\nchar *str[] = {\"123\",\"578\"};\nchar **str = {\"123\",\"578\"};//错误的\n\n```\n2.**指针数组做形参**\n```c\n//以下两个等价\nvoid fun(char *str[]);\nvoid fun(char **str);//因为str[] = *str\n\n```\n\n3.**main函数的指针数组**\n```c\n//argc :传参数的个数（包括可执行程序）\n//argv: 指针数组，指向输入的参数\n\nint main(int argc, char *argv[]);\n\n:demo.exe a b test\nint argc = 4\nchar *argv[] = {\"demo.exe\",\"a\",\"b\",\"test\"}\n\n\n```\n\n## 六、数组指针\n\n\n数组指针：本质上为指针，是一个指向数组的指针\n定义方法：三种\n**定义方法1：**\n```c\n//方法一；先定义数组类型，根据类型定义指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t//定义数组指针变量\n\n\n\ttypedef int A[10];  //A 数组类型，[10]也可以认为是步长\n\tA *p = NULL;   //p是数组指针类型变量\n\tp = &a;//因为数组指针是指向一维数组的这个数组，而不是首元素地址，所以使用p = a；的时候会有警告\n\n\tprintf(\"p: %d ,p +1: %d\\n\", p, p + 1);\n\n\t//赋值\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t//因为p = &a;所以*p = *&a,即是a\n\t\t(*p)[i] = i + 1;\n\t}\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n**定义方法2：**\n```c\n//先定义数组指针类型，然后根据了类型定义变量，写法比指针数组多了一个（）\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，又因为前面有typedef,因此这是一个数组指针类型\n\ttypedef int(*P)[10];\n\tP q;//q是数组指针变量\n\tq = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*q)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*q)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n\n```\n**定义方法3：**\n```c\n\n//直接定义数组指针变量\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\tint a[10] = { 0 };\n\t\n\t//（）和[]的优先级是一样的，均是从左往右\n\t//（）里面有指针，所以这是一个指针，[]表示数组，因此这是一个指向数组的指针，没有typedef,因此这是一个数组指针变量\n\tint(*p)[10];//p是数组指针变量\n\tp = &a;\n\n\t\n\t//赋值\n\tint i = 0;\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\t(*p)[i] = i + 1;\n\t}\n\n\t//打印输出\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tprintf(\"%d \", (*p)[i]);\n\n\n\t}\n\tprintf(\"\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n## 七、二维数组\n\n1.**定义与使用**\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t//二维数组的定义：主要这两种方式\n\n\tint a[4][8] = { 1,2,3,4,5,6,7,8,9,10 };\n\tint a1[4][8] = { {1,2,3},{4,5,6,7},{8,9,10,11} };\n\t\n\t//打印输出：\n\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tfor (j = 0; j < 8; j++)\n\t\t{\n\t\t\tprintf(\"a[%d][%d] = \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\n\t}\n\tprintf(\"\\n\");\n\n\n\t//地址：二维数组中数组名表示第0行首地址\n\tprintf(\"%d,%d\\n\", a, a + 1);//第0行首地址，第一行首地址\n\tprintf(\"%d,%d\\n\", a[0], a[1]);//含义同上\n\tprintf(\"%d ,%d\\n\", *(a + 0), *(a + 1));//第0行首元素地址，第1行首元素地址\n\tprintf(\"%d,%d\\n\", *(a + 0) + 1);//表示第0行第二个元素的地址。\n\tprintf(\"%d,%d\\n\", a[0] + 1);//含义同上 \n\n  /*\n  以int a[][4] = {1,2,3,4,5,6,7,8,9,10,11,12};为例\n  //a:代表第0行的首地址\n  //a + i 等价于 &a[i]  ，代表第i行首地址\n  //*(a + i) 等价于 a[i]: 表示第i行首元素地址\n  //*(a + i) + j  等价于 &a[i][j]  :表示第i行第j列元素的地址\n  //*(*(a +i) + j) 等价于 a[i][j]  :表示第i行第j列元素的值\n \n  */\n\n\treturn 0;\n\n}\n\n```\n\n2.**求二维数组元素个数**\n```c\nint a[][8] = {1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3};\nint num = 0;\nnum = sizeof(a)/sizeof(int);\n//等价于：num = sizeof(a)/sizeof(a[0][0]);\n```\n\n\n3.**数组指针** \n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n\t\n\tint a[][5] = { 1,2,4,3,6,7,98,5,6,87,9,5,3,45,7,98,6,4,3 };\n\n\t//直接定义数组指针变量\n\n\t//定义数组指针变量,这个指针变量应该指向一维数组的整个数组的首地址\n\n\tint(*p)[5];\n\t//错误定义：p = &a;  这是整个二维数组的首地址\n\tp = a;//表示第0行首地址，每次跳4*5个字节，这里p等价于二维数组名\n\n\n\t//先定义数组指针类型，然后定义变量\n\ttypedef int(*P)[10];\n\tP p;\n\tp = a;\n\n\n\n\n\t//测二维数组的函数和列数\n\tint num1 = sizeof(a) / sizeof(a[0]);//获取行数\n\tint num2 = sizeof(a[0]) / sizeof(a[0][0]);//获取列数\n\n\n\n}\n```\n\n3.**数组指针做形参**\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid printarray(int a[][4])//第二维为指针+1 的步长\n//等价于 void printarray(int a[3][4])\n//等价于 void printarray(int (*a)[4])//数组做形参则退化成指针，注意每一次跳的步长是不同的\n{\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tfor (j = 0; j < 4; j++)\n\t\t{\n\t\t\tprintf(\"%d  \", a[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\nint main(void)\n{\n\n\tint a[][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };\n\n\tprintarray(a);\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n\n```\n\n程序运行结果：\n`1  2  3  4`\n`5  6  7  8`\n`9  10  11  12`\n\n\n## 作业\n\n### 作业一： 程序有点问题\n```c\n#include<stdio.h>\n#include<string.h>\n\n\n#define NUM(a) (sizeof(a)/sizeof(*a))\n\n/*\n函数功能：找到数组中指定字符串的位置\n\n参数说明：\ntable ：字符串数组（指针数组）首地址\nsize ： 数组元素个数\nkey : 匹配字符串，如：\"do\"\npos :匹配字符串在数组中的位置，如果“do”在keywords[]中的位置为4\n\n返回值：\n成功：0\n失败：非0\n\n*/\n\n\nint  searchKeyTable(const char* table[] ,const int size,const char *key,int *pos)\n{\n\tif (table == NULL || key == NULL || pos == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint i = 0; \n\tint index = -1;  //因为可能正好为0，所以这里不能赋值为0，就随便选一个负数即可\n\tfor (i = 0; i < size; i++)\n\t{\n\t\tif (strcmp(table[i], key) == 0)\n\t\t{\n\t\t\tindex = i; \n\t\t\tbreak;\n\t\t}\n\n\t}\n\tif (index == -1)//没有匹配的字符串的时候\n\t{\n\t\treturn -2;\n\n\t}\n\n\t*pos = index + 1;\n\n\treturn 0;\n}\n\nint main(void)\n{\n\tconst char* keywords[] = { \"while\",\"case\",\"static\",\"do\" };\n\n\tint pos = 0;\n\tint ret = 0;\n\n\tret = searchKeyTable(keywords, NUM(keywords), \"do\", &pos);\n\n\tif (ret != 0)\n\t{\n\t\tprintf(\"searchKeyTable err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"%s located in keyword is : %d\\n\", pos);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n\n\n\n\n### 作业二：\n```c\n\n\n//作业下的第2分钟\n\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n\tint ret = 0;//这是错误码\n\tchar *p1[] = { \"aa\",\"ccccccc\",\"bbbbb\" };\n\tchar buf2[][30] = { \"111111\",\"3333333\",\"222222\" };\n\tchar **p3 = NULL;\n\tint len1, len2, len3, i = 0;\n\n\tlen1 = sizeof(p1) / sizeof(*p1);\n\tlen2 = sizeof(buf2) / sizeof(buf2[0]);\n\n\t/*\n\t功能：\n\t1.把指针数组p1的字符串取出来\n\t2.把二维数组buf2的字符取出来\n\t3.上面的字符串放在p3.p3是在堆区分配的二维内存\n\t4.对p3中字符串进行排序，通过strcmp（）进行排序\n\n\t参数：\n\tp1:指针数组首地址，char *p1[] = { \"aa\",\"ccccccc\",\"bbbbb\" };\n\tlen1 :p1元素个数\n\tbuf2:二维数组首元素地址，char buf2[][30] = { \"111111\",\"3333333\",\"222222\" };\n\tlen2:buf2字符串的行数\n\tp3:二级指针的地址，需要在函数内分配二维内存，保存p1和buf2的字符串，还需要排序\n\tlen3：保存p3中字符串的个数\n\n\t返回值：\n\n\t*/\n\n\tret = sort(p1, len1, buf2, len2, &p3, &len3);\n\n\n\t//释放p3所指向内存\n\t//在函数内部把p3的值赋值为NULL\n\n\tfree_buf(&p3);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n\n\n\n\n}\n\n```\n",[[1541593542107,["gjx16@GJXAIOU",[[1,6386,"表示"]],[6386,6386],[6388,6388]]],[1541593589033,["gjx16@GJXAIOU",[[-1,6306,"//作业下的第2分钟"]],[6306,6316],[6306,6306]]],[1541593590189,["gjx16@GJXAIOU",[[-1,6307,"\n"]],[6306,6306],[6305,6305]]],[1541593590327,["gjx16@GJXAIOU",[[-1,6306,"\n"]],[6305,6305],[6304,6304]]],[1541593590924,["gjx16@GJXAIOU",[[-1,6305,"\n"]],[6304,6304],[6303,6303]]]],null,"gjx16@GJXAIOU"]]}