{"compress":true,"commitItems":[["60f63c08-ed68-474a-9dd2-15139eecfa42",1540278470323,"",[[1540278415281,["gjx16@GJXAIOU",[[1,0,"# day02\n\n\n\n"]],[0,0],[10,10]]],[1540278415620,["gjx16@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1540278690012,["gjx16@GJXAIOU",[[1,9,"指针也是一种数据类型"]],[9,9],[19,19]]],[1540278690412,["gjx16@GJXAIOU",[[1,22,"\n"]],[19,19],[20,20]]],[1540278690421,["gjx16@GJXAIOU",[[1,20,"】"]],[20,20],[21,21]]],[1540278691193,["gjx16@GJXAIOU",[[-1,20,"】"]],[21,21],[20,20]]],[1540278701646,["gjx16@GJXAIOU",[[1,20,"指针变量也是一种变量"]],[20,20],[30,30]]],[1540278702089,["gjx16@GJXAIOU",[[1,33,"\n"]],[30,30],[31,31]]],[1540278706242,["gjx16@GJXAIOU",[[1,9,"- "]],[9,9],[11,11]]],[1540278712122,["gjx16@GJXAIOU",[[1,22,"- "]],[22,22],[24,24]]],[1540278715954,["gjx16@GJXAIOU",[[1,35,"- \n"]],[34,34],[37,37]]],[1540278716105,["gjx16@GJXAIOU",[[-1,35,"- "]],[37,37],[36,36]]],[1540291214746,["gjx16@GJXAIOU",[[-1,38,"\n"],[1,39," "]],[38,38],[39,39]]],[1540291549799,["gjx16@GJXAIOU",[[1,7," "]],[7,7],[8,8]]],[1540291556059,["gjx16@GJXAIOU",[[1,8,"指针强化"]],[8,8],[12,12]]]],null,"gjx16@GJXAIOU"],["d49b2eb3-e7c0-4c09-8fc7-3a1abd650514",1540380453840,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n\n ",[[1540380408561,["gjx16@GJXAIOU",[[1,44,"1、****"]],[44,44],[48,48]]],[1540380449822,["gjx16@GJXAIOU",[[1,48,"指针变量和它指向的指针内存不同："]],[48,48],[64,64]]],[1540380451759,["gjx16@GJXAIOU",[[1,66,"\n "]],[66,66],[68,68]]],[1540380655969,["gjx16@GJXAIOU",[[1,68,"首先改变制止和"]],[68,68],[75,75]]],[1540380657311,["gjx16@GJXAIOU",[[-1,72,"制止和"]],[75,75],[72,72]]],[1540380690187,["gjx16@GJXAIOU",[[1,72,"指针变量的值并不会改变指向的内存区域的值，因为指针变量为一个"]],[72,72],[102,102]]],[1540380691663,["gjx16@GJXAIOU",[[-1,99,"为一个"]],[102,102],[99,99]]],[1540380710147,["gjx16@GJXAIOU",[[1,99,"本质上为一个地址变量，而指向的内存为"]],[99,99],[117,117]]],[1540380710929,["gjx16@GJXAIOU",[[-1,116,"为"]],[117,117],[116,116]]],[1540380719819,["gjx16@GJXAIOU",[[1,116,"中是存储的具体的值；"]],[116,116],[126,126]]],[1540380924195,["gjx16@GJXAIOU",[[1,126,"\n 同样改变指针指向内存区域的值并不会改变指针变量的值"]],[126,126],[153,153]]],[1540380929024,["gjx16@GJXAIOU",[[-1,149,"变量"]],[151,151],[149,149]]],[1540380939158,["gjx16@GJXAIOU",[[-1,97,"变量本质上"]],[102,102],[97,97]]],[1540380941179,["gjx16@GJXAIOU",[[1,97,"的值"]],[97,97],[99,99]]],[1540380944905,["gjx16@GJXAIOU",[[-1,74,"变量"]],[76,76],[74,74]]],[1540380953745,["gjx16@GJXAIOU",[[1,67,"-"]],[67,67],[68,68]]],[1540380953881,["gjx16@GJXAIOU",[[1,69," "]],[68,68],[69,69]]],[1540380956945,["gjx16@GJXAIOU",[[1,125,"- "]],[125,125],[127,127]]],[1540380959030,["gjx16@GJXAIOU",[[-1,124," "]],[125,125],[124,124]]],[1540380964648,["gjx16@GJXAIOU",[[1,149,"，"]],[149,149],[150,150]]],[1540381214093,["gjx16@GJXAIOU",[[-1,149,"，"]],[150,150],[149,149]]],[1540381215262,["gjx16@GJXAIOU",[[1,149,"；\n- "]],[149,149],[153,153]]],[1540381216133,["gjx16@GJXAIOU",[[-1,151,"- "],[1,153,"\n\n"]],[153,153],[152,152]]],[1540381217528,["gjx16@GJXAIOU",[[-1,152,"\n"],[1,153,"2"]],[152,152],[153,153]]],[1540381219343,["gjx16@GJXAIOU",[[1,153,".****"]],[153,153],[156,156]]],[1540381232269,["gjx16@GJXAIOU",[[1,156,"进行写内存时候，首先确保"]],[156,156],[168,168]]],[1540381246543,["gjx16@GJXAIOU",[[1,168,"该内存可写（）"]],[168,168],[175,175]]],[1540381257453,["gjx16@GJXAIOU",[[1,174,"看内存四区图"]],[174,174],[180,180]]],[1540381260541,["gjx16@GJXAIOU",[[1,183,"\n\n"]],[183,183],[184,184]]],[1540381261319,["gjx16@GJXAIOU",[[1,185,"\n"]],[184,184],[185,185]]],[1540381262632,["gjx16@GJXAIOU",[[1,185,"  "]],[185,185],[187,187]]],[1540381263518,["gjx16@GJXAIOU",[[-1,186," "]],[187,187],[186,186]]],[1540381264534,["gjx16@GJXAIOU",[[1,186,"```"]],[186,186],[189,189]]],[1540381266975,["gjx16@GJXAIOU",[[-1,185," ```"]],[189,189],[185,185]]],[1540381267767,["gjx16@GJXAIOU",[[-1,185,"\n"],[1,186,"`"]],[185,185],[186,186]]],[1540381268182,["gjx16@GJXAIOU",[[1,186,"``"]],[186,186],[188,188]]],[1540381268205,["gjx16@GJXAIOU",[[1,188,"language\n```\n"]],[188,188],[188,196]]],[1540381269174,["gjx16@GJXAIOU",[[-1,188,"language"],[1,196,"c"]],[188,196],[189,189]]],[1540381269550,["gjx16@GJXAIOU",[[1,190,"\n"]],[189,189],[190,190]]],[1540381277846,["gjx16@GJXAIOU",[[1,190,"char * buf"]],[190,190],[200,200]]],[1540381279549,["gjx16@GJXAIOU",[[-1,196," buf"]],[200,200],[196,196]]],[1540381284653,["gjx16@GJXAIOU",[[1,196,"buf1 = \"\""]],[196,196],[205,205]]],[1540381288685,["gjx16@GJXAIOU",[[1,204,"asdfghk"]],[204,204],[211,211]]],[1540381289732,["gjx16@GJXAIOU",[[-1,210,"k"]],[211,211],[210,210]]],[1540381290429,["gjx16@GJXAIOU",[[1,210,"k"]],[210,210],[211,211]]],[1540381291309,["gjx16@GJXAIOU",[[-1,210,"k"]],[211,211],[210,210]]],[1540381292733,["gjx16@GJXAIOU",[[1,210,"jkl"]],[210,210],[213,213]]],[1540381296246,["gjx16@GJXAIOU",[[1,214,";"]],[214,214],[215,215]]],[1540381296604,["gjx16@GJXAIOU",[[1,216,"\n"]],[215,215],[216,216]]],[1540381307527,["gjx16@GJXAIOU",[[1,216,"buf1[2] = 1;"]],[216,216],[228,228]]],[1540381312140,["gjx16@GJXAIOU",[[1,229,"\n"]],[228,228],[229,229]]],[1540381313750,["gjx16@GJXAIOU",[[1,229,"、、"]],[229,229],[231,231]]],[1540381314566,["gjx16@GJXAIOU",[[-1,229,"、、"]],[231,231],[229,229]]],[1540381340670,["gjx16@GJXAIOU",[[1,229,"//这个是错误的，因为该字符串是放置在产量去"]],[229,229],[251,251]]],[1540381341557,["gjx16@GJXAIOU",[[-1,248,"产量去"]],[251,251],[248,248]]],[1540381344335,["gjx16@GJXAIOU",[[1,248,"常量去"]],[248,248],[251,251]]],[1540381344998,["gjx16@GJXAIOU",[[-1,250,"去"]],[251,251],[250,250]]],[1540381352400,["gjx16@GJXAIOU",[[1,250,"区，是不可更改的"]],[250,250],[258,258]]],[1540381354365,["gjx16@GJXAIOU",[[1,259,"\n"]],[258,258],[259,259]]],[1540381354533,["gjx16@GJXAIOU",[[1,260,"\n"]],[259,259],[260,260]]],[1540381360934,["gjx16@GJXAIOU",[[1,260,"char buf[2"]],[260,260],[270,270]]],[1540381361869,["gjx16@GJXAIOU",[[-1,268,"[2"]],[270,270],[268,268]]],[1540381363478,["gjx16@GJXAIOU",[[1,268,"2[]"]],[268,268],[271,271]]],[1540381365502,["gjx16@GJXAIOU",[[1,270,"100"]],[270,270],[273,273]]],[1540381367766,["gjx16@GJXAIOU",[[1,274," =="]],[274,274],[277,277]]],[1540381368365,["gjx16@GJXAIOU",[[-1,276,"="]],[277,277],[276,276]]],[1540381369703,["gjx16@GJXAIOU",[[1,276," \"\""]],[276,276],[279,279]]],[1540381371681,["gjx16@GJXAIOU",[[1,278,"shjfaksjdhgj"]],[278,278],[290,290]]],[1540381373462,["gjx16@GJXAIOU",[[1,291,";"]],[291,291],[292,292]]],[1540381373862,["gjx16@GJXAIOU",[[1,293,"\n"]],[292,292],[293,293]]],[1540381378814,["gjx16@GJXAIOU",[[1,293,"buf2[3["]],[293,293],[300,300]]],[1540381379534,["gjx16@GJXAIOU",[[-1,299,"["]],[300,300],[299,299]]],[1540381382222,["gjx16@GJXAIOU",[[1,299,"] = d"]],[299,299],[304,304]]],[1540381382789,["gjx16@GJXAIOU",[[-1,303,"d"]],[304,304],[303,303]]],[1540381383574,["gjx16@GJXAIOU",[[1,303,"3;"]],[303,303],[305,305]]],[1540381384319,["gjx16@GJXAIOU",[[1,306,"\n"]],[305,305],[306,306]]],[1540381409547,["gjx16@GJXAIOU",[[1,306,"//可以更改，因为数组的元素都是放置在栈区，可以直接进行"]],[306,306],[334,334]]],[1540381414544,["gjx16@GJXAIOU",[[1,334,"修改"]],[334,334],[336,336]]],[1540381415102,["gjx16@GJXAIOU",[[1,337,"\n"]],[336,336],[337,337]]],[1540381416584,["gjx16@GJXAIOU",[[1,338,"\n"]],[338,338],[339,339]]],[1540381416741,["gjx16@GJXAIOU",[[1,339,"\n"]],[339,339],[340,340]]],[1540381417813,["gjx16@GJXAIOU",[[-1,339,"\n"]],[340,340],[339,339]]],[1540381417965,["gjx16@GJXAIOU",[[-1,338,"\n"]],[339,339],[338,338]]],[1540381419381,["gjx16@GJXAIOU",[[1,342,"\n"]],[341,341],[342,342]]],[1540381755823,["gjx16@GJXAIOU",[[1,343,"\n"]],[342,342],[343,343]]],[1540381756694,["gjx16@GJXAIOU",[[-1,343,"\n"],[1,344,"3"]],[343,343],[344,344]]],[1540381772143,["gjx16@GJXAIOU",[[1,344,".指针是一种数据类型，"]],[344,344],[355,355]]],[1540381778202,["gjx16@GJXAIOU",[[1,355,"加一的而不畅"]],[355,355],[361,361]]],[1540381780156,["gjx16@GJXAIOU",[[-1,358,"而不畅"]],[361,361],[358,358]]],[1540381805768,["gjx16@GJXAIOU",[[1,358,"步长取决于指向的元素的类型"]],[358,358],[371,371]]],[1540381806868,["gjx16@GJXAIOU",[[1,371,"\n\n"]],[371,371],[372,372]]],[1540381807060,["gjx16@GJXAIOU",[[1,373,"\n"]],[372,372],[373,373]]],[1540382372731,["gjx16@GJXAIOU",[[1,43,"\n"]],[41,41],[42,42]]],[1540382381206,["gjx16@GJXAIOU",[[1,42,"## 指针也是一种数据类型"]],[42,42],[55,55]]],[1540382384367,["gjx16@GJXAIOU",[[1,388,"\n"]],[386,386],[387,387]]],[1540382384492,["gjx16@GJXAIOU",[[1,389,"\n"]],[387,387],[388,388]]],[1540382393711,["gjx16@GJXAIOU",[[1,388,"## 通过指针进行讲解"]],[388,388],[399,399]]],[1540382397243,["gjx16@GJXAIOU",[[-1,397,"讲解"]],[399,399],[397,397]]],[1540382398747,["gjx16@GJXAIOU",[[1,397,"讲解"]],[397,397],[399,399]]],[1540382399404,["gjx16@GJXAIOU",[[-1,397,"讲解"]],[399,399],[397,397]]],[1540382403754,["gjx16@GJXAIOU",[[1,397,"间接赋值"]],[397,397],[401,401]]],[1540382404284,["gjx16@GJXAIOU",[[1,403,"\n"]],[401,401],[402,402]]],[1540382404419,["gjx16@GJXAIOU",[[1,404,"\n"]],[402,402],[403,403]]],[1540382448002,["gjx16@GJXAIOU",[[1,403,"1.****"]],[403,403],[407,407]]],[1540382461868,["gjx16@GJXAIOU",[[1,407,"三大条件："]],[407,407],[412,412]]],[1540382463548,["gjx16@GJXAIOU",[[1,416,"\n"]],[414,414],[415,415]]],[1540382468498,["gjx16@GJXAIOU",[[-1,416,"\n"]],[416,416],[415,415]]],[1540382469492,["gjx16@GJXAIOU",[[-1,415,"\n"],[1,416,"-"]],[415,415],[416,416]]],[1540382474395,["gjx16@GJXAIOU",[[1,416," 定义两个两边"]],[416,416],[423,423]]],[1540382475163,["gjx16@GJXAIOU",[[-1,421,"两边"]],[423,423],[421,421]]],[1540382488105,["gjx16@GJXAIOU",[[1,421,"变量\n- 建立关系\n- 通过指正"]],[421,421],[437,437]]],[1540382488923,["gjx16@GJXAIOU",[[-1,435,"指正"]],[437,437],[435,435]]],[1540382493038,["gjx16@GJXAIOU",[[1,435,"*caozuo"]],[435,435],[442,442]]],[1540382493810,["gjx16@GJXAIOU",[[-1,439,"zuo"]],[442,442],[439,439]]],[1540382494491,["gjx16@GJXAIOU",[[-1,436,"cao"]],[439,439],[436,436]]],[1540382499170,["gjx16@GJXAIOU",[[1,436,"操作内存\n- "]],[436,436],[443,443]]],[1540382499306,["gjx16@GJXAIOU",[[-1,441,"- "],[1,443,"\n\n"]],[443,443],[442,442]]],[1540382501053,["gjx16@GJXAIOU",[[-1,442,"\n"],[1,443,"`"]],[442,442],[443,443]]],[1540382501444,["gjx16@GJXAIOU",[[1,443,"``"]],[443,443],[445,445]]],[1540382501469,["gjx16@GJXAIOU",[[1,445,"language\n```\n"]],[445,445],[445,453]]],[1540382501636,["gjx16@GJXAIOU",[[1,445,"`"],[1,453,"`"]],[445,453],[445,455]]],[1540382503309,["gjx16@GJXAIOU",[[-1,445,"`language`"],[1,455,"c"]],[445,455],[446,446]]],[1540382503444,["gjx16@GJXAIOU",[[1,447,"\n"]],[446,446],[447,447]]],[1540382506636,["gjx16@GJXAIOU",[[1,447,"int main()"]],[447,447],[457,457]]],[1540382509508,["gjx16@GJXAIOU",[[1,456,"void"]],[456,456],[460,460]]],[1540382511100,["gjx16@GJXAIOU",[[1,462,"\n"]],[461,461],[462,462]]],[1540382512118,["gjx16@GJXAIOU",[[1,462,"{}"]],[462,462],[464,464]]],[1540382512763,["gjx16@GJXAIOU",[[1,463,"\n"]],[463,463],[464,464]]],[1540382512923,["gjx16@GJXAIOU",[[1,464,"\n"]],[464,464],[465,465]]],[1540382513054,["gjx16@GJXAIOU",[[1,465,"\n"]],[465,465],[466,466]]],[1540382517070,["gjx16@GJXAIOU",[[1,464,"    int a;"]],[464,464],[474,474]]],[1540382518027,["gjx16@GJXAIOU",[[-1,473,";"]],[474,474],[473,473]]],[1540382521653,["gjx16@GJXAIOU",[[1,473,"  = 100;"]],[473,473],[481,481]]],[1540382522107,["gjx16@GJXAIOU",[[1,482,"    \n"]],[481,481],[486,486]]],[1540382525501,["gjx16@GJXAIOU",[[1,486,"int *p ;"]],[486,486],[494,494]]],[1540382525955,["gjx16@GJXAIOU",[[1,495,"    \n"]],[494,494],[499,499]]],[1540382529771,["gjx16@GJXAIOU",[[1,468,"\n    "]],[468,468],[473,473]]],[1540382538312,["gjx16@GJXAIOU",[[1,468,"//定义两个变量"]],[468,468],[476,476]]],[1540382540611,["gjx16@GJXAIOU",[[1,513,"    \n"]],[507,507],[512,512]]],[1540382540764,["gjx16@GJXAIOU",[[-1,508,"    "],[1,512,"\n"]],[512,512],[509,509]]],[1540382543533,["gjx16@GJXAIOU",[[1,509,"  、、"]],[509,509],[513,513]]],[1540382544370,["gjx16@GJXAIOU",[[-1,511,"、、"]],[513,513],[511,511]]],[1540382548919,["gjx16@GJXAIOU",[[1,511,"//建立关系"]],[511,511],[517,517]]],[1540382549963,["gjx16@GJXAIOU",[[1,520,"\n  "]],[517,517],[520,520]]],[1540382553748,["gjx16@GJXAIOU",[[1,520,"p "]],[520,520],[522,522]]],[1540382554867,["gjx16@GJXAIOU",[[1,522,"= "]],[522,522],[524,524]]],[1540382556643,["gjx16@GJXAIOU",[[1,527,"\n  "]],[524,524],[527,527]]],[1540382556956,["gjx16@GJXAIOU",[[1,527,"7"]],[527,527],[528,528]]],[1540382558282,["gjx16@GJXAIOU",[[-1,525,"  7"]],[528,528],[525,525]]],[1540382558650,["gjx16@GJXAIOU",[[-1,525,"\n"]],[525,525],[524,524]]],[1540382561156,["gjx16@GJXAIOU",[[1,524,"&a;"]],[524,524],[527,527]]],[1540382562122,["gjx16@GJXAIOU",[[1,530,"\n  "]],[527,527],[530,530]]],[1540382562283,["gjx16@GJXAIOU",[[-1,528,"  "],[1,530,"\n"]],[530,530],[529,529]]],[1540382568994,["gjx16@GJXAIOU",[[1,529,"  //通过指针"]],[529,529],[537,537]]],[1540382570595,["gjx16@GJXAIOU",[[-1,535,"指针"]],[537,537],[535,535]]],[1540382574343,["gjx16@GJXAIOU",[[1,535,"*操作内存"]],[535,535],[540,540]]],[1540382575331,["gjx16@GJXAIOU",[[1,543,"\n  "]],[540,540],[543,543]]],[1540382581604,["gjx16@GJXAIOU",[[1,543,"*p = a"]],[543,543],[549,549]]],[1540382582299,["gjx16@GJXAIOU",[[-1,548,"a"]],[549,549],[548,548]]],[1540382582798,["gjx16@GJXAIOU",[[1,548,"209"]],[548,548],[551,551]]],[1540382583805,["gjx16@GJXAIOU",[[-1,550,"9"]],[551,551],[550,550]]],[1540382584813,["gjx16@GJXAIOU",[[1,550,";"]],[550,550],[551,551]]],[1540382588334,["gjx16@GJXAIOU",[[-1,557,"\n"]],[557,557],[556,556]]],[1540382590419,["gjx16@GJXAIOU",[[1,563,"\n"]],[562,562],[563,563]]],[1540382590859,["gjx16@GJXAIOU",[[1,564,"\n"]],[563,563],[564,564]]],[1540382837370,["gjx16@GJXAIOU",[[1,565,"\n"]],[563,563],[564,564]]],[1540382839494,["gjx16@GJXAIOU",[[1,564,"2.****"]],[564,564],[568,568]]],[1540382841117,["gjx16@GJXAIOU",[[1,568,"ruguo"]],[568,568],[573,573]]],[1540382842291,["gjx16@GJXAIOU",[[-1,568,"ruguo"]],[573,573],[568,568]]],[1540382847191,["gjx16@GJXAIOU",[[1,568,"如果形参"]],[568,568],[572,572]]],[1540382865948,["gjx16@GJXAIOU",[[1,570,"通过"]],[570,570],[572,572]]],[1540382882829,["gjx16@GJXAIOU",[[1,574,"改变实参的内存内容（）"]],[574,574],[585,585]]],[1540382884877,["gjx16@GJXAIOU",[[1,584,"值"]],[584,584],[585,585]]],[1540382898342,["gjx16@GJXAIOU",[[1,586,"，必须采用地址传递"]],[586,586],[595,595]]],[1540382906493,["gjx16@GJXAIOU",[[1,599,"\n"]],[597,597],[598,598]]],[1540382928445,["gjx16@GJXAIOU",[[-1,599,"\n"],[1,600,"`"]],[599,599],[600,600]]],[1540382928885,["gjx16@GJXAIOU",[[1,600,"``"]],[600,600],[602,602]]],[1540382928910,["gjx16@GJXAIOU",[[1,602,"language\n```\n"]],[602,602],[602,610]]],[1540382929780,["gjx16@GJXAIOU",[[-1,602,"language"],[1,610,"c"]],[602,610],[603,603]]],[1540382929970,["gjx16@GJXAIOU",[[1,604,"\n"]],[603,603],[604,604]]],[1540382930164,["gjx16@GJXAIOU",[[1,605,"\n"]],[604,604],[605,605]]],[1540382931931,["gjx16@GJXAIOU",[[1,605,"int j"]],[605,605],[610,610]]],[1540382934203,["gjx16@GJXAIOU",[[-1,609,"j"]],[610,610],[609,609]]],[1540382935727,["gjx16@GJXAIOU",[[1,609,"mian"]],[609,609],[613,613]]],[1540382937090,["gjx16@GJXAIOU",[[-1,610,"ian"]],[613,613],[610,610]]],[1540382938467,["gjx16@GJXAIOU",[[1,610,"ain()"]],[610,610],[615,615]]],[1540382940875,["gjx16@GJXAIOU",[[1,614,"void"]],[614,614],[618,618]]],[1540382942509,["gjx16@GJXAIOU",[[1,620,"\n"]],[619,619],[620,620]]],[1540382943694,["gjx16@GJXAIOU",[[1,620,"{}"]],[620,620],[622,622]]],[1540382944619,["gjx16@GJXAIOU",[[1,621,"\n"]],[621,621],[622,622]]],[1540382944810,["gjx16@GJXAIOU",[[1,622,"\n"]],[622,622],[623,623]]],[1540382952148,["gjx16@GJXAIOU",[[1,622,"    itn  "]],[622,622],[631,631]]],[1540382953523,["gjx16@GJXAIOU",[[-1,627,"tn  "]],[631,631],[627,627]]],[1540382955372,["gjx16@GJXAIOU",[[1,627,"nt a; "]],[627,627],[633,633]]],[1540382956036,["gjx16@GJXAIOU",[[-1,631,"; "]],[633,633],[631,631]]],[1540382958758,["gjx16@GJXAIOU",[[1,631," = 100;"]],[631,631],[638,638]]],[1540382959162,["gjx16@GJXAIOU",[[1,639,"    \n"]],[638,638],[643,643]]],[1540382967435,["gjx16@GJXAIOU",[[1,643,"get_str()"]],[643,643],[652,652]]],[1540382972675,["gjx16@GJXAIOU",[[1,651,"&a"]],[651,651],[653,653]]],[1540382974516,["gjx16@GJXAIOU",[[1,654,";"]],[654,654],[655,655]]],[1540382975274,["gjx16@GJXAIOU",[[1,656,"    \n"]],[655,655],[660,660]]],[1540382976587,["gjx16@GJXAIOU",[[1,660,"pting"]],[660,660],[665,665]]],[1540382978650,["gjx16@GJXAIOU",[[-1,660,"pting"]],[665,665],[660,660]]],[1540382985027,["gjx16@GJXAIOU",[[1,660,"printf();"]],[660,660],[669,669]]],[1540382987171,["gjx16@GJXAIOU",[[1,667,"\"\""]],[667,667],[669,669]]],[1540382998587,["gjx16@GJXAIOU",[[1,668,"zhi = %d\\n"]],[668,668],[678,678]]],[1540383002626,["gjx16@GJXAIOU",[[1,679,",zhi"]],[679,679],[683,683]]],[1540383009555,["gjx16@GJXAIOU",[[1,643,"zhi = "]],[643,643],[649,649]]],[1540383025579,["gjx16@GJXAIOU",[[1,604,"void get_str()"]],[604,604],[618,618]]],[1540383029259,["gjx16@GJXAIOU",[[1,617,"int *b"]],[617,617],[623,623]]],[1540383031370,["gjx16@GJXAIOU",[[1,625,"\n"]],[624,624],[625,625]]],[1540383033199,["gjx16@GJXAIOU",[[1,625,"}"]],[625,625],[626,626]]],[1540383033740,["gjx16@GJXAIOU",[[-1,625,"}"]],[626,626],[625,625]]],[1540383034727,["gjx16@GJXAIOU",[[1,625,"{}"]],[625,625],[627,627]]],[1540383035467,["gjx16@GJXAIOU",[[1,626,"\n"]],[626,626],[627,627]]],[1540383035650,["gjx16@GJXAIOU",[[1,627,"\n"]],[627,627],[628,628]]],[1540383042509,["gjx16@GJXAIOU",[[1,627,"  吧= "]],[627,627],[632,632]]],[1540383043314,["gjx16@GJXAIOU",[[-1,629,"吧= "]],[632,632],[629,629]]],[1540383045011,["gjx16@GJXAIOU",[[1,629,"b- "]],[629,629],[632,632]]],[1540383047139,["gjx16@GJXAIOU",[[-1,628," b- "]],[632,632],[628,628]]],[1540383057747,["gjx16@GJXAIOU",[[1,628," *b = 200;"]],[628,628],[638,638]]],[1540383074964,["gjx16@GJXAIOU",[[1,641,"\n"]],[640,640],[641,641]]],[1540383244746,["gjx16@GJXAIOU",[[-1,679," zhi = "]],[686,686],[679,679]]],[1540383246579,["gjx16@GJXAIOU",[[1,679," "]],[679,679],[680,680]]],[1540383251306,["gjx16@GJXAIOU",[[-1,705,"zhi "]],[709,709],[705,705]]],[1540383251563,["gjx16@GJXAIOU",[[1,705,"as"]],[705,705],[707,707]]],[1540383252587,["gjx16@GJXAIOU",[[-1,706,"s"]],[707,707],[706,706]]],[1540383252723,["gjx16@GJXAIOU",[[1,706," "]],[706,706],[707,707]]],[1540383255953,["gjx16@GJXAIOU",[[-1,715,"zhi"]],[718,718],[715,715]]],[1540383256338,["gjx16@GJXAIOU",[[1,715,"a"]],[715,715],[716,716]]],[1540383261234,["gjx16@GJXAIOU",[[1,725,"\n"]],[724,724],[725,725]]],[1540383263011,["gjx16@GJXAIOU",[[-1,725,"\n"],[1,726,"c"]],[725,725],[726,726]]],[1540383263714,["gjx16@GJXAIOU",[[1,726,"heng="]],[726,726],[731,731]]],[1540383264809,["gjx16@GJXAIOU",[[-1,726,"heng="]],[731,731],[726,726]]],[1540383265153,["gjx16@GJXAIOU",[[-1,725,"c"],[1,726,"\n"]],[726,726],[725,725]]],[1540383267220,["gjx16@GJXAIOU",[[-1,725,"\n"],[1,726,"程序"]],[725,725],[727,727]]],[1540383271367,["gjx16@GJXAIOU",[[1,727,"运行结果为："]],[727,727],[733,733]]],[1540383273026,["gjx16@GJXAIOU",[[1,733,"\n\n"]],[733,733],[734,734]]],[1540383274261,["gjx16@GJXAIOU",[[-1,734,"\n"]],[734,734],[733,733]]],[1540383275134,["gjx16@GJXAIOU",[[1,733,"··"]],[733,733],[735,735]]],[1540383275746,["gjx16@GJXAIOU",[[-1,733,"··"]],[735,735],[733,733]]],[1540383276763,["gjx16@GJXAIOU",[[1,733,"``"]],[733,733],[735,735]]],[1540383285900,["gjx16@GJXAIOU",[[1,734,"a = 200"]],[734,734],[741,741]]],[1540383814442,["gjx16@GJXAIOU",[[1,598,"lizi"]],[598,598],[602,602]]],[1540383816074,["gjx16@GJXAIOU",[[-1,598,"lizi"]],[602,602],[598,598]]],[1540383821123,["gjx16@GJXAIOU",[[1,598,"例子1："]],[598,598],[602,602]]],[1540383894288,["gjx16@GJXAIOU",[[1,747,"\n"]],[746,746],[747,747]]],[1540383894697,["gjx16@GJXAIOU",[[1,748,"\n"]],[747,747],[748,748]]],[1540383897398,["gjx16@GJXAIOU",[[-1,748,"\n"],[1,749,"例子"]],[748,748],[750,750]]],[1540383899003,["gjx16@GJXAIOU",[[1,750,"2："]],[750,750],[752,752]]],[1540383899673,["gjx16@GJXAIOU",[[1,752,"\n\n"]],[752,752],[753,753]]],[1540383902218,["gjx16@GJXAIOU",[[-1,753,"\n"],[1,754,"1"]],[753,753],[754,754]]],[1540383902441,["gjx16@GJXAIOU",[[1,754,"1"]],[754,754],[755,755]]],[1540383903040,["gjx16@GJXAIOU",[[-1,754,"1"]],[755,755],[754,754]]],[1540383903204,["gjx16@GJXAIOU",[[-1,753,"1"],[1,754,"\n"]],[754,754],[753,753]]],[1540383903866,["gjx16@GJXAIOU",[[-1,753,"\n"],[1,754,"`"]],[753,753],[754,754]]],[1540383904249,["gjx16@GJXAIOU",[[1,754,"``"]],[754,754],[756,756]]],[1540383904274,["gjx16@GJXAIOU",[[1,756,"language\n```\n"]],[756,756],[756,764]]],[1540383905210,["gjx16@GJXAIOU",[[-1,756,"language"],[1,764,"c"]],[756,764],[757,757]]],[1540383905448,["gjx16@GJXAIOU",[[1,758,"\n"]],[757,757],[758,758]]],[1540383933153,["gjx16@GJXAIOU",[[1,758,"int main"]],[758,758],[766,766]]],[1540383934098,["gjx16@GJXAIOU",[[1,766,"()"]],[766,766],[768,768]]],[1540383937465,["gjx16@GJXAIOU",[[1,767,"void"]],[767,767],[771,771]]],[1540383939641,["gjx16@GJXAIOU",[[1,773,"\n"]],[772,772],[773,773]]],[1540383940762,["gjx16@GJXAIOU",[[1,773,"{}"]],[773,773],[775,775]]],[1540383943104,["gjx16@GJXAIOU",[[1,774,"\n"]],[774,774],[775,775]]],[1540383943320,["gjx16@GJXAIOU",[[1,775,"\n"]],[775,775],[776,776]]],[1540383958442,["gjx16@GJXAIOU",[[1,775,"  int *p = 0x122;'"]],[775,775],[793,793]]],[1540383959731,["gjx16@GJXAIOU",[[-1,792,"'"]],[793,793],[792,792]]],[1540383960480,["gjx16@GJXAIOU",[[1,793,"  \n"]],[792,792],[795,795]]],[1540383963821,["gjx16@GJXAIOU",[[1,795,"printf();"]],[795,795],[804,804]]],[1540383970026,["gjx16@GJXAIOU",[[1,802,"\"\""]],[802,802],[804,804]]],[1540383976994,["gjx16@GJXAIOU",[[1,803,"p1 = %p "]],[803,803],[811,811]]],[1540383977809,["gjx16@GJXAIOU",[[-1,810," "]],[811,811],[810,810]]],[1540383978937,["gjx16@GJXAIOU",[[1,810,"\\n"]],[810,810],[812,812]]],[1540383983313,["gjx16@GJXAIOU",[[1,813,",p1"]],[813,813],[816,816]]],[1540383986576,["gjx16@GJXAIOU",[[1,819,"  \n"]],[818,818],[821,821]]],[1540383989280,["gjx16@GJXAIOU",[[-1,819,"  "],[1,821,"\n"]],[821,821],[820,820]]],[1540383992233,["gjx16@GJXAIOU",[[1,820,"  fun"]],[820,820],[825,825]]],[1540383994258,["gjx16@GJXAIOU",[[1,825,"()"]],[825,825],[827,827]]],[1540383996434,["gjx16@GJXAIOU",[[1,826,"p"]],[826,826],[827,827]]],[1540384058336,["gjx16@GJXAIOU",[[1,828,";>>"]],[828,828],[831,831]]],[1540384059063,["gjx16@GJXAIOU",[[-1,829,">>"]],[831,831],[829,829]]],[1540384061834,["gjx16@GJXAIOU",[[1,829,"//benzh"]],[829,829],[836,836]]],[1540384062791,["gjx16@GJXAIOU",[[-1,831,"benzh"]],[836,836],[831,831]]],[1540384066596,["gjx16@GJXAIOU",[[1,831,"本质申请按"]],[831,831],[836,836]]],[1540384067383,["gjx16@GJXAIOU",[[-1,833,"申请按"]],[836,836],[833,833]]],[1540384074481,["gjx16@GJXAIOU",[[1,833,"上时值传递"]],[833,833],[838,838]]],[1540384078015,["gjx16@GJXAIOU",[[-1,834,"时"]],[835,835],[834,834]]],[1540384079500,["gjx16@GJXAIOU",[[1,834,"是"]],[834,834],[835,835]]],[1540384082711,["gjx16@GJXAIOU",[[1,839,"  \n"]],[838,838],[841,841]]],[1540384087675,["gjx16@GJXAIOU",[[1,841,"printf（）"]],[841,841],[849,849]]],[1540384088903,["gjx16@GJXAIOU",[[-1,847,"（）"]],[849,849],[847,847]]],[1540384091575,["gjx16@GJXAIOU",[[1,847,"();"]],[847,847],[850,850]]],[1540384095905,["gjx16@GJXAIOU",[[1,848,"\"\""]],[848,848],[850,850]]],[1540384108673,["gjx16@GJXAIOU",[[1,849,"p2 = %p\\n"]],[849,849],[858,858]]],[1540384112064,["gjx16@GJXAIOU",[[1,859,","]],[859,859],[860,860]]],[1540384132090,["gjx16@GJXAIOU",[[1,860,"p"]],[860,860],[861,861]]],[1540384140784,["gjx16@GJXAIOU",[[1,864,"  \n"]],[863,863],[866,866]]],[1540384145164,["gjx16@GJXAIOU",[[-1,864,"  "],[1,866,"\n"]],[866,866],[865,865]]],[1540384152497,["gjx16@GJXAIOU",[[1,865,"  system();"]],[865,865],[876,876]]],[1540384156170,["gjx16@GJXAIOU",[[1,874,"\"\""]],[874,874],[876,876]]],[1540384158884,["gjx16@GJXAIOU",[[1,875,"pause"]],[875,875],[880,880]]],[1540384163112,["gjx16@GJXAIOU",[[1,884,"  \n"]],[883,883],[886,886]]],[1540384165745,["gjx16@GJXAIOU",[[1,886,"return 0;"]],[886,886],[895,895]]],[1540384302232,["gjx16@GJXAIOU",[[1,758,"\n"]],[757,757],[758,758]]],[1540384302402,["gjx16@GJXAIOU",[[1,759,"\n"]],[758,758],[759,759]]],[1540384310602,["gjx16@GJXAIOU",[[1,759,"void fun()"]],[759,759],[769,769]]],[1540384314857,["gjx16@GJXAIOU",[[1,768,"int p"]],[768,768],[773,773]]],[1540384315619,["gjx16@GJXAIOU",[[-1,772,"p"]],[773,773],[772,772]]],[1540384316825,["gjx16@GJXAIOU",[[1,772,"*p"]],[772,772],[774,774]]],[1540384318936,["gjx16@GJXAIOU",[[1,776,"\n"]],[775,775],[776,776]]],[1540384320153,["gjx16@GJXAIOU",[[1,776,"{}"]],[776,776],[778,778]]],[1540384320916,["gjx16@GJXAIOU",[[1,777,"\n"]],[777,777],[778,778]]],[1540384321104,["gjx16@GJXAIOU",[[1,778,"\n"]],[778,778],[779,779]]],[1540384322554,["gjx16@GJXAIOU",[[1,778,"  "]],[778,778],[780,780]]],[1540384324179,["gjx16@GJXAIOU",[[1,783,"\n"]],[782,782],[783,783]]],[1540384324360,["gjx16@GJXAIOU",[[1,784,"\n"]],[783,783],[784,784]]],[1540384326242,["gjx16@GJXAIOU",[[1,780,"  "]],[778,778],[780,780]]],[1540384352690,["gjx16@GJXAIOU",[[1,780,"p"]],[780,780],[781,781]]],[1540384352872,["gjx16@GJXAIOU",[[1,783," "]],[781,781],[782,782]]],[1540384354153,["gjx16@GJXAIOU",[[1,782,"="]],[782,782],[783,783]]],[1540384354369,["gjx16@GJXAIOU",[[1,785," "]],[783,783],[784,784]]],[1540384357433,["gjx16@GJXAIOU",[[1,784,"0a"]],[784,784],[786,786]]],[1540384358048,["gjx16@GJXAIOU",[[-1,785,"a"]],[786,786],[785,785]]],[1540384367017,["gjx16@GJXAIOU",[[1,785,"xaabb;\n  printf();"]],[785,785],[803,803]]],[1540384374017,["gjx16@GJXAIOU",[[1,801,"\"\""]],[801,801],[803,803]]],[1540384385852,["gjx16@GJXAIOU",[[1,802,"fun:p = %p "]],[802,802],[813,813]]],[1540384387087,["gjx16@GJXAIOU",[[-1,812," "]],[813,813],[812,812]]],[1540384388586,["gjx16@GJXAIOU",[[1,812,"\\n"]],[812,812],[814,814]]],[1540384392738,["gjx16@GJXAIOU",[[1,815,",p"]],[815,815],[817,817]]],[1540384546263,["gjx16@GJXAIOU",[[1,970,"\n"]],[969,969],[970,970]]],[1540384548011,["gjx16@GJXAIOU",[[-1,970,"\n"],[1,971,"c"]],[970,970],[971,971]]],[1540384548393,["gjx16@GJXAIOU",[[1,971,"heng"]],[971,971],[975,975]]],[1540384549167,["gjx16@GJXAIOU",[[-1,971,"heng"]],[975,975],[971,971]]],[1540384549360,["gjx16@GJXAIOU",[[-1,970,"c"],[1,971,"\n"]],[971,971],[970,970]]],[1540384551347,["gjx16@GJXAIOU",[[-1,970,"\n"],[1,971,"程序"]],[970,970],[972,972]]],[1540384554322,["gjx16@GJXAIOU",[[1,972,"运行结果："]],[972,972],[977,977]]],[1540384555064,["gjx16@GJXAIOU",[[1,977,"\n\n"]],[977,977],[978,978]]],[1540384556751,["gjx16@GJXAIOU",[[1,978,"p1 = 0000000000000122\nfun:p = 000000000000AABB\np2 = 0000000000000122"]],[978,978],[1046,1046]]],[1540384563595,["gjx16@GJXAIOU",[[1,1025,"·"]],[1025,1025],[1026,1026]]],[1540384565538,["gjx16@GJXAIOU",[[-1,1025,"·"]],[1026,1026],[1025,1025]]],[1540384566857,["gjx16@GJXAIOU",[[1,1025,"`"]],[1025,1025],[1026,1026]]],[1540384568296,["gjx16@GJXAIOU",[[1,1000,"`"]],[1000,1000],[1001,1001]]],[1540384569266,["gjx16@GJXAIOU",[[1,978,"`"]],[978,978],[979,979]]],[1540384574385,["gjx16@GJXAIOU",[[1,1000,"`"]],[1000,1000],[1001,1001]]],[1540384575602,["gjx16@GJXAIOU",[[1,1027,"`"]],[1027,1027],[1028,1028]]],[1540384576362,["gjx16@GJXAIOU",[[1,1051,"`"]],[1051,1051],[1052,1052]]],[1540384581279,["gjx16@GJXAIOU",[[-1,883,"1"]],[884,884],[883,883]]],[1540384589073,["gjx16@GJXAIOU",[[1,1052,"\n"]],[1051,1051],[1052,1052]]],[1540384590266,["gjx16@GJXAIOU",[[-1,1052,"\n"],[1,1053,"y"]],[1052,1052],[1053,1053]]],[1540384590513,["gjx16@GJXAIOU",[[1,1053,"ou"]],[1053,1053],[1055,1055]]],[1540384591047,["gjx16@GJXAIOU",[[-1,1053,"ou"]],[1055,1055],[1053,1053]]],[1540384591664,["gjx16@GJXAIOU",[[-1,1052,"y"],[1,1053,"\n"]],[1053,1053],[1052,1052]]],[1540384593107,["gjx16@GJXAIOU",[[-1,1052,"\n"],[1,1053,"由此"]],[1052,1052],[1054,1054]]],[1540384598857,["gjx16@GJXAIOU",[[1,1054,"可见指针pd"]],[1054,1054],[1060,1060]]],[1540384599471,["gjx16@GJXAIOU",[[-1,1059,"d"]],[1060,1060],[1059,1059]]],[1540384605658,["gjx16@GJXAIOU",[[1,1059,"的地址并没有改变"]],[1059,1059],[1067,1067]]],[1540384615275,["gjx16@GJXAIOU",[[1,752,"（）"]],[752,752],[754,754]]],[1540384620854,["gjx16@GJXAIOU",[[1,753,"改变指针的地址"]],[753,753],[760,760]]],[1540384624439,["gjx16@GJXAIOU",[[1,1076,"\n\n"]],[1076,1076],[1077,1077]]],[1540384624562,["gjx16@GJXAIOU",[[1,1078,"\n"]],[1077,1077],[1078,1078]]],[1540384628914,["gjx16@GJXAIOU",[[1,762,"\n"]],[761,761],[762,762]]],[1540384640652,["gjx16@GJXAIOU",[[1,762,"此程序没有改变地址，看下一个"]],[762,762],[776,776]]],[1540384644608,["gjx16@GJXAIOU",[[1,1094,"\n"]],[1091,1091],[1092,1092]]],[1540384644751,["gjx16@GJXAIOU",[[1,1095,"\n"]],[1092,1092],[1093,1093]]],[1540384645793,["gjx16@GJXAIOU",[[1,1096,"\n"]],[1093,1093],[1094,1094]]],[1540384645935,["gjx16@GJXAIOU",[[1,1097,"\n"]],[1094,1094],[1095,1095]]],[1540384652121,["gjx16@GJXAIOU",[[1,1095,"程序2"]],[1095,1095],[1098,1098]]],[1540384652585,["gjx16@GJXAIOU",[[-1,1097,"2"]],[1098,1098],[1097,1097]]],[1540384653466,["gjx16@GJXAIOU",[[1,1097,"3："]],[1097,1097],[1099,1099]]],[1540384663618,["gjx16@GJXAIOU",[[1,1099,"改变指针的地址（）"]],[1099,1099],[1108,1108]]],[1540384677714,["gjx16@GJXAIOU",[[1,1107,"通过二级指针进行修改"]],[1107,1107],[1117,1117]]],[1540384680667,["gjx16@GJXAIOU",[[-1,1120,"\n"],[1,1121,"`"]],[1120,1120],[1121,1121]]],[1540384681048,["gjx16@GJXAIOU",[[1,1121,"``"]],[1121,1121],[1123,1123]]],[1540384681076,["gjx16@GJXAIOU",[[1,1123,"language\n```\n"]],[1123,1123],[1123,1131]]],[1540384682217,["gjx16@GJXAIOU",[[-1,1123,"language"],[1,1131,"c"]],[1123,1131],[1124,1124]]],[1540384682431,["gjx16@GJXAIOU",[[1,1125,"\n"]],[1124,1124],[1125,1125]]],[1540384689538,["gjx16@GJXAIOU",[[1,1125,"void fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}"]],[1125,1125],[1330,1330]]],[1540384765244,["gjx16@GJXAIOU",[[1,1259,"&"]],[1259,1259],[1260,1260]]],[1540384800169,["gjx16@GJXAIOU",[[1,1139,"*"]],[1138,1138],[1139,1139]]],[1540384804488,["gjx16@GJXAIOU",[[1,1147,"*"]],[1147,1147],[1148,1148]]],[1540384807473,["gjx16@GJXAIOU",[[1,1184,"*"]],[1184,1184],[1185,1185]]],[1540384869985,["gjx16@GJXAIOU",[[1,1339,"\n"]],[1338,1338],[1339,1339]]],[1540384870431,["gjx16@GJXAIOU",[[1,1339,"p1 = 0000000000000122\nfun:p = 000000000000AABB\np2 = 000000000000AABB"]],[1339,1339],[1407,1407]]],[1540384873978,["gjx16@GJXAIOU",[[1,1339,"\n"]],[1338,1338],[1339,1339]]],[1540384875268,["gjx16@GJXAIOU",[[1,1339,"cheng"]],[1339,1339],[1344,1344]]],[1540384876071,["gjx16@GJXAIOU",[[-1,1339,"cheng"]],[1344,1344],[1339,1339]]],[1540384884589,["gjx16@GJXAIOU",[[1,1339,"程序运行结果："]],[1339,1339],[1346,1346]]],[1540384906546,["gjx16@GJXAIOU",[[1,1347,"·"]],[1347,1347],[1348,1348]]],[1540384909063,["gjx16@GJXAIOU",[[-1,1347,"·"]],[1348,1348],[1347,1347]]],[1540384909619,["gjx16@GJXAIOU",[[1,1347,"`"]],[1347,1347],[1348,1348]]],[1540384911630,["gjx16@GJXAIOU",[[1,1370,"`"]],[1370,1370],[1371,1371]]],[1540384912481,["gjx16@GJXAIOU",[[1,1396,"`"]],[1396,1396],[1397,1397]]],[1540384913619,["gjx16@GJXAIOU",[[1,1418,"`"]],[1418,1418],[1419,1419]]],[1540384914752,["gjx16@GJXAIOU",[[1,1395,"`"]],[1395,1395],[1396,1396]]],[1540384915480,["gjx16@GJXAIOU",[[1,1369,"`"]],[1369,1369],[1370,1370]]],[1540385096791,["gjx16@GJXAIOU",[[1,1422,"\n"]],[1421,1421],[1422,1422]]],[1540385098079,["gjx16@GJXAIOU",[[-1,1422,"\n"],[1,1423,"t"]],[1422,1422],[1423,1423]]],[1540385098946,["gjx16@GJXAIOU",[[1,1423,"ogguo"]],[1423,1423],[1428,1428]]],[1540385100271,["gjx16@GJXAIOU",[[-1,1423,"ogguo"]],[1428,1428],[1423,1423]]],[1540385101241,["gjx16@GJXAIOU",[[-1,1422,"t"],[1,1423,"\n"]],[1423,1423],[1422,1422]]],[1540385102859,["gjx16@GJXAIOU",[[-1,1422,"\n"],[1,1423,"通过"]],[1422,1422],[1424,1424]]],[1540385111737,["gjx16@GJXAIOU",[[1,1424,"二级指针可以更改指针的地址"]],[1424,1424],[1437,1437]]],[1540385131934,["gjx16@GJXAIOU",[[1,598,"\n"]],[598,598],[599,599]]],[1540385132323,["gjx16@GJXAIOU",[[1,599,"-"]],[599,599],[600,600]]],[1540385133632,["gjx16@GJXAIOU",[[1,600,"\n"]],[600,600],[601,601]]],[1540385135353,["gjx16@GJXAIOU",[[1,599," "]],[599,599],[600,600]]],[1540385136623,["gjx16@GJXAIOU",[[-1,599," "]],[600,600],[599,599]]],[1540385145706,["gjx16@GJXAIOU",[[1,600," 一级指针"]],[600,600],[605,605]]],[1540385150295,["gjx16@GJXAIOU",[[1,756,"\n"]],[755,755],[756,756]]],[1540385154595,["gjx16@GJXAIOU",[[1,756,"- 二级指针"]],[756,756],[762,762]]],[1540385158934,["gjx16@GJXAIOU",[[1,763,"- \n"]],[762,762],[765,765]]],[1540385160294,["gjx16@GJXAIOU",[[-1,763,"- "]],[765,765],[763,763]]],[1540385379782,["gjx16@GJXAIOU",[[-1,1288,"值"]],[1289,1289],[1288,1288]]],[1540385382884,["gjx16@GJXAIOU",[[1,1288,"地址"]],[1288,1288],[1290,1290]]],[1540385654129,["gjx16@GJXAIOU",[[1,1245,"  "]],[1245,1245],[1247,1247]]],[1540386989452,["gjx16@GJXAIOU",[[1,1456,"\n\n"]],[1456,1456],[1457,1457]]],[1540386989573,["gjx16@GJXAIOU",[[1,1458,"\n"]],[1457,1457],[1458,1458]]],[1540386989747,["gjx16@GJXAIOU",[[1,1459,"\n"]],[1458,1458],[1459,1459]]],[1540387222108,["gjx16@GJXAIOU",[[-1,1459,"\n"],[1,1460,"3"]],[1459,1459],[1460,1460]]],[1540387222452,["gjx16@GJXAIOU",[[1,1460,"4."]],[1460,1460],[1462,1462]]],[1540387223514,["gjx16@GJXAIOU",[[-1,1460,"4."]],[1462,1462],[1460,1460]]],[1540387226914,["gjx16@GJXAIOU",[[1,1460,"。****"]],[1460,1460],[1463,1463]]],[1540387244784,["gjx16@GJXAIOU",[[1,1463,"指针应该和内存四区相结合进行理解"]],[1463,1463],[1479,1479]]],[1540387247003,["gjx16@GJXAIOU",[[1,1481,"\n\n"]],[1481,1481],[1482,1482]]],[1540387271522,["gjx16@GJXAIOU",[[1,1483,"\n"]],[1482,1482],[1483,1483]]],[1540387271798,["gjx16@GJXAIOU",[[-1,1483,"\n"],[1,1484,"-"]],[1483,1483],[1484,1484]]],[1540387281587,["gjx16@GJXAIOU",[[1,1484," 主调函数和被调函数\n- "]],[1484,1484],[1497,1497]]],[1540387292272,["gjx16@GJXAIOU",[[1,1497,"内存分配方式"]],[1497,1497],[1503,1503]]],[1540387295362,["gjx16@GJXAIOU",[[1,1497,"\n- "]],[1494,1494],[1497,1497]]],[1540387295987,["gjx16@GJXAIOU",[[-1,1495,"- "]],[1497,1497],[1496,1496]]],[1540387333761,["gjx16@GJXAIOU",[[1,1495,"  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用的"]],[1495,1495],[1525,1525]]],[1540387334866,["gjx16@GJXAIOU",[[-1,1524,"的"]],[1525,1525],[1524,1524]]],[1540387336630,["gjx16@GJXAIOU",[[1,1524,"函数"]],[1524,1524],[1526,1526]]],[1540387337643,["gjx16@GJXAIOU",[[1,1527,"  - \n"]],[1526,1526],[1531,1531]]],[1540387337680,["gjx16@GJXAIOU",[[1,1531,"、"]],[1531,1531],[1532,1532]]],[1540387339226,["gjx16@GJXAIOU",[[-1,1531,"、"]],[1532,1532],[1531,1531]]],[1540387361686,["gjx16@GJXAIOU",[[1,1531,"被调函数只能返回堆区、全局数据"]],[1531,1531],[1546,1546]]],[1540387400891,["gjx16@GJXAIOU",[[1,1555,"\n- "]],[1555,1555],[1558,1558]]],[1540387404027,["gjx16@GJXAIOU",[[1,1556,"  "]],[1556,1556],[1558,1558]]],[1540387404838,["gjx16@GJXAIOU",[[1,1560," "]],[1559,1559],[1560,1560]]],[1540387413397,["gjx16@GJXAIOU",[[1,1560,"指针可以作为输入输出\n  "]],[1560,1560],[1573,1573]]],[1540387417618,["gjx16@GJXAIOU",[[1,1574,"    "]],[1573,1573],[1577,1577]]],[1540387418559,["gjx16@GJXAIOU",[[1,1577,"-"]],[1577,1577],[1578,1578]]],[1540387418763,["gjx16@GJXAIOU",[[1,1579," "]],[1578,1578],[1579,1579]]],[1540387434122,["gjx16@GJXAIOU",[[1,1579,"输入：主调函数分配内存\n      "]],[1579,1579],[1597,1597]]],[1540387436643,["gjx16@GJXAIOU",[[1,1598,"    "]],[1597,1597],[1601,1601]]],[1540387437572,["gjx16@GJXAIOU",[[1,1601,"-"]],[1601,1601],[1602,1602]]],[1540387437759,["gjx16@GJXAIOU",[[1,1603," "]],[1602,1602],[1603,1603]]],[1540387438740,["gjx16@GJXAIOU",[[-1,1601,"-  "]],[1603,1603],[1600,1600]]],[1540387440109,["gjx16@GJXAIOU",[[1,1600,"-"]],[1600,1600],[1601,1601]]],[1540387440300,["gjx16@GJXAIOU",[[1,1602," "]],[1601,1601],[1602,1602]]],[1540387441874,["gjx16@GJXAIOU",[[-1,1599," -  "]],[1602,1602],[1598,1598]]],[1540387442565,["gjx16@GJXAIOU",[[1,1598,"-"]],[1598,1598],[1599,1599]]],[1540387445874,["gjx16@GJXAIOU",[[-1,1597," "]],[1598,1598],[1597,1597]]],[1540387447054,["gjx16@GJXAIOU",[[1,1599," "]],[1598,1598],[1599,1599]]],[1540387461448,["gjx16@GJXAIOU",[[1,1599,"输出：被调用函数分配内存"]],[1599,1599],[1611,1611]]],[1540388463761,["gjx16@GJXAIOU",[[1,1458,"再加一个示例家亲理解"]],[1458,1458],[1468,1468]]],[1540388464819,["gjx16@GJXAIOU",[[-1,1464,"家亲理解"]],[1468,1468],[1464,1464]]],[1540388470789,["gjx16@GJXAIOU",[[1,1464,"加强理解："]],[1464,1464],[1469,1469]]],[1540388471416,["gjx16@GJXAIOU",[[1,1470,"\n"]],[1469,1469],[1470,1470]]],[1540388473372,["gjx16@GJXAIOU",[[1,1470,"```"]],[1470,1470],[1473,1473]]],[1540388473400,["gjx16@GJXAIOU",[[1,1473,"language\n```\n"]],[1473,1473],[1473,1481]]],[1540388474769,["gjx16@GJXAIOU",[[-1,1473,"language"],[1,1481,"c"]],[1473,1481],[1474,1474]]],[1540388474995,["gjx16@GJXAIOU",[[1,1475,"\n"]],[1474,1474],[1475,1475]]],[1540388480217,["gjx16@GJXAIOU",[[1,1475,"#ubx"]],[1475,1475],[1479,1479]]],[1540388482147,["gjx16@GJXAIOU",[[-1,1476,"ubx"]],[1479,1479],[1476,1476]]],[1540388484180,["gjx16@GJXAIOU",[[1,1476,"inl"]],[1476,1476],[1479,1479]]],[1540388484960,["gjx16@GJXAIOU",[[-1,1478,"l"]],[1479,1479],[1478,1478]]],[1540388487523,["gjx16@GJXAIOU",[[1,1478,"clude<>"]],[1478,1478],[1485,1485]]],[1540388491417,["gjx16@GJXAIOU",[[1,1484,"stdiol."]],[1484,1484],[1491,1491]]],[1540388493607,["gjx16@GJXAIOU",[[-1,1489,"l."]],[1491,1491],[1489,1489]]],[1540388494852,["gjx16@GJXAIOU",[[1,1489,".h"]],[1489,1489],[1491,1491]]],[1540388496905,["gjx16@GJXAIOU",[[1,1493,"\n"]],[1492,1492],[1493,1493]]],[1540388500749,["gjx16@GJXAIOU",[[1,1493,"#include<>"]],[1493,1493],[1503,1503]]],[1540388505433,["gjx16@GJXAIOU",[[1,1502,"string.h"]],[1502,1502],[1510,1510]]],[1540388506753,["gjx16@GJXAIOU",[[1,1512,"\n"]],[1511,1511],[1512,1512]]],[1540388511002,["gjx16@GJXAIOU",[[1,1512,"#include<>"]],[1512,1512],[1522,1522]]],[1540388515229,["gjx16@GJXAIOU",[[1,1521,"strlib.h"]],[1521,1521],[1529,1529]]],[1540388516945,["gjx16@GJXAIOU",[[1,1531,"\n"]],[1530,1530],[1531,1531]]],[1540388517096,["gjx16@GJXAIOU",[[1,1532,"\n"]],[1531,1531],[1532,1532]]],[1540388519320,["gjx16@GJXAIOU",[[1,1533,"\n"]],[1532,1532],[1533,1533]]],[1540388520212,["gjx16@GJXAIOU",[[1,1533,"m"]],[1533,1533],[1534,1534]]],[1540388520664,["gjx16@GJXAIOU",[[-1,1533,"m"]],[1534,1534],[1533,1533]]],[1540388522276,["gjx16@GJXAIOU",[[1,1533,"imt"]],[1533,1533],[1536,1536]]],[1540388522800,["gjx16@GJXAIOU",[[-1,1534,"mt"]],[1536,1536],[1534,1534]]],[1540388525917,["gjx16@GJXAIOU",[[1,1534,"nt main()"]],[1534,1534],[1543,1543]]],[1540388528637,["gjx16@GJXAIOU",[[1,1542,"void"]],[1542,1542],[1546,1546]]],[1540388530040,["gjx16@GJXAIOU",[[1,1548,"\n"]],[1547,1547],[1548,1548]]],[1540388531794,["gjx16@GJXAIOU",[[1,1548,"{}"]],[1548,1548],[1550,1550]]],[1540388532508,["gjx16@GJXAIOU",[[1,1549,"\n"]],[1549,1549],[1550,1550]]],[1540388532688,["gjx16@GJXAIOU",[[1,1550,"\n"]],[1550,1550],[1551,1551]]],[1540388532866,["gjx16@GJXAIOU",[[1,1551,"\n"]],[1551,1551],[1552,1552]]],[1540388543650,["gjx16@GJXAIOU",[[1,1550,"  char *p = NULL;"]],[1550,1550],[1567,1567]]],[1540388544264,["gjx16@GJXAIOU",[[1,1568,"  \n"]],[1567,1567],[1570,1570]]],[1540388547282,["gjx16@GJXAIOU",[[1,1570,"int len -"]],[1570,1570],[1579,1579]]],[1540388547819,["gjx16@GJXAIOU",[[-1,1578,"-"]],[1579,1579],[1578,1578]]],[1540388549393,["gjx16@GJXAIOU",[[1,1578,"= 0;"]],[1578,1578],[1582,1582]]],[1540388549929,["gjx16@GJXAIOU",[[1,1583,"  \n"]],[1582,1582],[1585,1585]]],[1540388554249,["gjx16@GJXAIOU",[[1,1585,"fun ()"]],[1585,1585],[1591,1591]]],[1540388560312,["gjx16@GJXAIOU",[[-1,1588," ()"]],[1591,1591],[1588,1588]]],[1540388561604,["gjx16@GJXAIOU",[[1,1588,"()"]],[1588,1588],[1590,1590]]],[1540388573060,["gjx16@GJXAIOU",[[1,1589,"&p,&len"]],[1589,1589],[1596,1596]]],[1540388577228,["gjx16@GJXAIOU",[[1,1597,";"]],[1597,1597],[1598,1598]]],[1540388577555,["gjx16@GJXAIOU",[[1,1599,"  \n"]],[1598,1598],[1601,1601]]],[1540388583540,["gjx16@GJXAIOU",[[1,1601,"if()"]],[1601,1601],[1605,1605]]],[1540388591180,["gjx16@GJXAIOU",[[1,1604,"p != NULL"]],[1604,1604],[1613,1613]]],[1540388592688,["gjx16@GJXAIOU",[[1,1615,"  \n"]],[1614,1614],[1617,1617]]],[1540388595044,["gjx16@GJXAIOU",[[1,1617,"  {}"]],[1617,1617],[1621,1621]]],[1540388595920,["gjx16@GJXAIOU",[[1,1620,"\n    \n    "]],[1620,1620],[1630,1630]]],[1540388601859,["gjx16@GJXAIOU",[[1,1625,"  printf();"]],[1625,1625],[1636,1636]]],[1540388604604,["gjx16@GJXAIOU",[[1,1634,"\"\""]],[1634,1634],[1636,1636]]],[1540388613513,["gjx16@GJXAIOU",[[1,1635,"p = %s\\n"]],[1635,1635],[1643,1643]]],[1540388624115,["gjx16@GJXAIOU",[[1,1644,",len = %d\\n"]],[1644,1644],[1655,1655]]],[1540388634424,["gjx16@GJXAIOU",[[-1,1643,"\""]],[1644,1644],[1643,1643]]],[1540388644682,["gjx16@GJXAIOU",[[1,1654,"\",p ,;en"]],[1654,1654],[1662,1662]]],[1540388645936,["gjx16@GJXAIOU",[[-1,1659,";en"]],[1662,1662],[1659,1659]]],[1540388646962,["gjx16@GJXAIOU",[[1,1659,"len"]],[1659,1659],[1662,1662]]],[1540388656912,["gjx16@GJXAIOU",[[1,1533,"\n"]],[1532,1532],[1533,1533]]],[1540388663073,["gjx16@GJXAIOU",[[1,1532,"void fun()"]],[1532,1532],[1542,1542]]],[1540388666497,["gjx16@GJXAIOU",[[1,1541,"in"]],[1541,1541],[1543,1543]]],[1540388667119,["gjx16@GJXAIOU",[[-1,1541,"in"]],[1543,1543],[1541,1541]]],[1540388677177,["gjx16@GJXAIOU",[[1,1541,"char **p,int *len"]],[1541,1541],[1558,1558]]],[1540388678992,["gjx16@GJXAIOU",[[1,1561,"\n"]],[1559,1559],[1560,1560]]],[1540388680729,["gjx16@GJXAIOU",[[1,1560,"{}"]],[1560,1560],[1562,1562]]],[1540388681921,["gjx16@GJXAIOU",[[1,1561,"\n"]],[1561,1561],[1562,1562]]],[1540388682936,["gjx16@GJXAIOU",[[1,1562,"\n"]],[1562,1562],[1563,1563]]],[1540388688674,["gjx16@GJXAIOU",[[1,1562,"  if()"]],[1562,1562],[1568,1568]]],[1540388695393,["gjx16@GJXAIOU",[[1,1567,"p == NULL"]],[1567,1567],[1576,1576]]],[1540388697183,["gjx16@GJXAIOU",[[1,1578,"  \n"]],[1577,1577],[1580,1580]]],[1540388699426,["gjx16@GJXAIOU",[[1,1580,"  {}"]],[1580,1580],[1584,1584]]],[1540388700344,["gjx16@GJXAIOU",[[1,1583,"\n    \n    "]],[1583,1583],[1593,1593]]],[1540388705148,["gjx16@GJXAIOU",[[1,1588,"  return;"]],[1588,1588],[1597,1597]]],[1540388708792,["gjx16@GJXAIOU",[[1,1604,"    \n"]],[1603,1603],[1608,1608]]],[1540388721114,["gjx16@GJXAIOU",[[1,1608,"char *tmp = ()"]],[1608,1608],[1622,1622]]],[1540388724433,["gjx16@GJXAIOU",[[1,1621,"char *"]],[1621,1621],[1627,1627]]],[1540388731116,["gjx16@GJXAIOU",[[1,1628,"malloc()"]],[1628,1628],[1636,1636]]],[1540388733465,["gjx16@GJXAIOU",[[1,1635,"100"]],[1635,1635],[1638,1638]]],[1540388735073,["gjx16@GJXAIOU",[[1,1639,";"]],[1639,1639],[1640,1640]]],[1540388736712,["gjx16@GJXAIOU",[[1,1641,"    \n"]],[1640,1640],[1645,1645]]],[1540388739626,["gjx16@GJXAIOU",[[1,1645,"if()"]],[1645,1645],[1649,1649]]],[1540388745513,["gjx16@GJXAIOU",[[1,1648,"tmp == NULL"]],[1648,1648],[1659,1659]]],[1540388750121,["gjx16@GJXAIOU",[[1,1661,"    \n"]],[1660,1660],[1665,1665]]],[1540388752129,["gjx16@GJXAIOU",[[1,1665,"{}"]],[1665,1665],[1667,1667]]],[1540388755152,["gjx16@GJXAIOU",[[1,1665,"  "]],[1665,1665],[1667,1667]]],[1540388756464,["gjx16@GJXAIOU",[[1,1668,"\n      \n      "]],[1668,1668],[1682,1682]]],[1540388767113,["gjx16@GJXAIOU",[[1,1675,"  return;"]],[1675,1675],[1684,1684]]],[1540388769273,["gjx16@GJXAIOU",[[1,1693,"      \n"]],[1692,1692],[1699,1699]]],[1540388776931,["gjx16@GJXAIOU",[[1,1699,"strcpy()"]],[1699,1699],[1707,1707]]],[1540388781329,["gjx16@GJXAIOU",[[1,1706,"tmp,\"\""]],[1706,1706],[1712,1712]]],[1540388784372,["gjx16@GJXAIOU",[[1,1711,"adjfkdjfkdjf"]],[1711,1711],[1723,1723]]],[1540388789786,["gjx16@GJXAIOU",[[1,1725,";"]],[1725,1725],[1726,1726]]],[1540388796560,["gjx16@GJXAIOU",[[1,1727,"      \n"]],[1726,1726],[1733,1733]]],[1540388797168,["gjx16@GJXAIOU",[[-1,1727,"      "],[1,1733,"\n"]],[1733,1733],[1728,1728]]],[1540388801739,["gjx16@GJXAIOU",[[1,1728,"    //jia"]],[1728,1728],[1737,1737]]],[1540388802538,["gjx16@GJXAIOU",[[-1,1734,"jia"]],[1737,1737],[1734,1734]]],[1540388805251,["gjx16@GJXAIOU",[[1,1734,"间接赋值"]],[1734,1734],[1738,1738]]],[1540388805944,["gjx16@GJXAIOU",[[1,1739,"    \n"]],[1738,1738],[1743,1743]]],[1540388813293,["gjx16@GJXAIOU",[[1,1743,"*p = tmp;"]],[1743,1743],[1752,1752]]],[1540388813816,["gjx16@GJXAIOU",[[1,1753,"    \n"]],[1752,1752],[1757,1757]]],[1540388822452,["gjx16@GJXAIOU",[[1,1757,"*len = strlen()"]],[1757,1757],[1772,1772]]],[1540388824153,["gjx16@GJXAIOU",[[1,1771,"tmp"]],[1771,1771],[1774,1774]]],[1540388825993,["gjx16@GJXAIOU",[[1,1775,";"]],[1775,1775],[1776,1776]]],[1540388840905,["gjx16@GJXAIOU",[[1,1918,"  return 0;"]],[1918,1918],[1929,1929]]],[1540388882071,["gjx16@GJXAIOU",[[-1,1523,"r"]],[1524,1524],[1523,1523]]],[1540388882249,["gjx16@GJXAIOU",[[1,1523,"d"]],[1523,1523],[1524,1524]]],[1540388898082,["gjx16@GJXAIOU",[[1,1909,"                       "]],[1909,1909],[1932,1932]]],[1540388901408,["gjx16@GJXAIOU",[[-1,1909,"                       "]],[1932,1932],[1909,1909]]],[1540388905850,["gjx16@GJXAIOU",[[-1,1890,","]],[1891,1891],[1890,1890]]],[1540388906073,["gjx16@GJXAIOU",[[1,1890," "]],[1890,1890],[1891,1891]]],[1540388945625,["gjx16@GJXAIOU",[[1,1937,"\n"]],[1935,1935],[1936,1936]]],[1540388947057,["gjx16@GJXAIOU",[[1,1936,"c"]],[1936,1936],[1937,1937]]],[1540388947784,["gjx16@GJXAIOU",[[-1,1936,"c"]],[1937,1937],[1936,1936]]],[1540388956466,["gjx16@GJXAIOU",[[1,1936,"程序运行结果："]],[1936,1936],[1943,1943]]],[1540388957175,["gjx16@GJXAIOU",[[1,1945,"\n"]],[1943,1943],[1944,1944]]],[1540389024945,["gjx16@GJXAIOU",[[1,1944,"p = adjfkdjfkdjf\nlen = 12\n"]],[1944,1944],[1970,1970]]],[1540389028690,["gjx16@GJXAIOU",[[1,1944,"·"]],[1944,1944],[1945,1945]]],[1540389029849,["gjx16@GJXAIOU",[[-1,1944,"·"]],[1945,1945],[1944,1944]]],[1540389030346,["gjx16@GJXAIOU",[[1,1944,"`"]],[1944,1944],[1945,1945]]],[1540389031672,["gjx16@GJXAIOU",[[1,1963,"`"]],[1963,1963],[1964,1964]]],[1540389033159,["gjx16@GJXAIOU",[[-1,1963,"`"]],[1964,1964],[1963,1963]]],[1540389034072,["gjx16@GJXAIOU",[[1,1962,"`"]],[1962,1962],[1963,1963]]],[1540389036635,["gjx16@GJXAIOU",[[1,1971,"`"]],[1971,1971],[1972,1972]]],[1540389039032,["gjx16@GJXAIOU",[[1,1961,"`"]],[1961,1961],[1962,1962]]],[1540389052528,["gjx16@GJXAIOU",[[1,1976,"\n"]],[1973,1973],[1974,1974]]],[1540389052983,["gjx16@GJXAIOU",[[1,1977,"\n"]],[1974,1974],[1975,1975]]],[1540389053179,["gjx16@GJXAIOU",[[1,1978,"\n"]],[1975,1975],[1976,1976]]],[1540389054050,["gjx16@GJXAIOU",[[1,1976,"---"]],[1976,1976],[1979,1979]]],[1540389099809,["gjx16@GJXAIOU",[[1,1975,"![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)"]],[1975,1975],[2085,2085]]],[1540389106415,["gjx16@GJXAIOU",[[1,2085,"\n"]],[2084,2084],[2085,2085]]],[1540389113010,["gjx16@GJXAIOU",[[-1,2086,"---"]],[2089,2089],[2086,2086]]],[1540389118089,["gjx16@GJXAIOU",[[1,2086,"---"]],[2086,2086],[2089,2089]]],[1540389185042,["gjx16@GJXAIOU",[[1,2245,"\n      - "]],[2245,2245],[2254,2254]]],[1540389185209,["gjx16@GJXAIOU",[[-1,2246,"      - "],[1,2254,"\n\n"]],[2254,2254],[2247,2247]]],[1540389185522,["gjx16@GJXAIOU",[[1,2248,"\n"]],[2247,2247],[2248,2248]]],[1540389186587,["gjx16@GJXAIOU",[[-1,2248,"\n"],[1,2249,"s"]],[2248,2248],[2249,2249]]],[1540389187244,["gjx16@GJXAIOU",[[1,2249,"hip"]],[2249,2249],[2252,2252]]],[1540389188327,["gjx16@GJXAIOU",[[-1,2249,"hip"]],[2252,2252],[2249,2249]]],[1540389188663,["gjx16@GJXAIOU",[[-1,2248,"s"],[1,2249,"\n"]],[2249,2249],[2248,2248]]],[1540389190792,["gjx16@GJXAIOU",[[-1,2248,"\n"],[1,2249,"~"]],[2248,2248],[2249,2249]]],[1540389191031,["gjx16@GJXAIOU",[[1,2249,"~~~"]],[2249,2249],[2250,2250]]],[1540389192259,["gjx16@GJXAIOU",[[1,2250,"sh"]],[2250,2250],[2252,2252]]],[1540389192799,["gjx16@GJXAIOU",[[-1,2250,"sh"]],[2252,2252],[2250,2250]]],[1540389198248,["gjx16@GJXAIOU",[[1,2250,"视频第15"]],[2250,2250],[2255,2255]]],[1540389203407,["gjx16@GJXAIOU",[[-1,2093,"。"]],[2094,2094],[2093,2093]]],[1540389203844,["gjx16@GJXAIOU",[[1,2093,"。"]],[2093,2093],[2094,2094]]],[1540389204983,["gjx16@GJXAIOU",[[-1,2093,"。"]],[2094,2094],[2093,2093]]],[1540389205521,["gjx16@GJXAIOU",[[1,2093,"."]],[2093,2093],[2094,2094]]],[1540389250981,["gjx16@GJXAIOU",[[1,45,"一。"]],[45,45],[47,47]]],[1540389252031,["gjx16@GJXAIOU",[[-1,46,"。"]],[47,47],[46,46]]],[1540389252905,["gjx16@GJXAIOU",[[1,46,"、"]],[46,46],[47,47]]],[1540389259777,["gjx16@GJXAIOU",[[1,393,"二、"]],[393,393],[395,395]]],[1540389316911,["gjx16@GJXAIOU",[[1,79,"点"]],[79,79],[80,80]]],[1540389340584,["gjx16@GJXAIOU",[[1,169,"\n"]],[168,168],[169,169]]],[1540389341312,["gjx16@GJXAIOU",[[1,169,"---"]],[169,169],[172,172]]],[1540389347305,["gjx16@GJXAIOU",[[1,173,"\n"]],[172,172],[173,173]]],[1540389360007,["gjx16@GJXAIOU",[[-1,196,"看"]],[197,197],[196,196]]],[1540389362665,["gjx16@GJXAIOU",[[1,196,"根据"]],[196,196],[198,198]]],[1540389378320,["gjx16@GJXAIOU",[[1,366,"\n"]],[364,364],[365,365]]],[1540389379142,["gjx16@GJXAIOU",[[1,367,"\n"]],[365,365],[366,366]]],[1540389380234,["gjx16@GJXAIOU",[[1,366,"---"]],[366,366],[369,369]]],[1540389381047,["gjx16@GJXAIOU",[[1,371,"\n"]],[369,369],[370,370]]],[1540389381224,["gjx16@GJXAIOU",[[1,372,"\n"]],[370,370],[371,371]]],[1540389385619,["gjx16@GJXAIOU",[[1,403,"---"]],[403,403],[406,406]]],[1540389386471,["gjx16@GJXAIOU",[[1,407,"\n"]],[406,406],[407,407]]],[1540389386618,["gjx16@GJXAIOU",[[1,408,"\n"]],[407,407],[408,408]]],[1540389386766,["gjx16@GJXAIOU",[[1,409,"\n"]],[408,408],[409,409]]],[1540389394056,["gjx16@GJXAIOU",[[1,213,"\n"]],[212,212],[213,213]]],[1540389403088,["gjx16@GJXAIOU",[[1,213,"、、、、、、、、、、、、、、、、、、、、、、、、、、3"]],[213,213],[240,240]]],[1540389406767,["gjx16@GJXAIOU",[[-1,213,"、、、、、、、、、、、、、、、、、、、、、、、、、、3"]],[240,240],[213,213]]],[1540389408727,["gjx16@GJXAIOU",[[-1,213,"\n"]],[213,213],[212,212]]],[1540389420561,["gjx16@GJXAIOU",[[1,281,"；"]],[281,281],[282,282]]],[1540389423777,["gjx16@GJXAIOU",[[1,360,"；"]],[360,360],[361,361]]],[1540389450873,["gjx16@GJXAIOU",[[1,387,"指针进行"]],[387,387],[391,391]]],[1540389464658,["gjx16@GJXAIOU",[[1,393,"或者减一"]],[393,393],[397,397]]],[1540389465530,["gjx16@GJXAIOU",[[1,398,"的"]],[397,397],[398,398]]],[1540389466246,["gjx16@GJXAIOU",[[-1,398,"的"]],[398,398],[397,397]]],[1540389486529,["gjx16@GJXAIOU",[[1,411,"；"]],[411,411],[412,412]]],[1540389546736,["gjx16@GJXAIOU",[[1,470,"`"]],[470,470],[471,471]]],[1540389549338,["gjx16@GJXAIOU",[[1,472,"`"]],[472,472],[473,473]]],[1540389612782,["gjx16@GJXAIOU",[[1,548,"  "]],[548,548],[550,550]]],[1540389614464,["gjx16@GJXAIOU",[[1,559,"  "]],[559,559],[561,561]]],[1540389616583,["gjx16@GJXAIOU",[[1,572,"  "]],[572,572],[574,574]]],[1540389618029,["gjx16@GJXAIOU",[[1,586,"  "]],[586,586],[588,588]]]],null,"gjx16@GJXAIOU"],["962555e0-f03a-4587-807b-ffd2ba35c192",1540449544798,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n~~视频第15~~",[[1540449506999,["gjx16@GJXAIOU",[[1,2293,"\n"]],[2291,2291],[2292,2292]]],[1540449507120,["gjx16@GJXAIOU",[[1,2294,"\n"]],[2292,2292],[2293,2293]]],[1540449507267,["gjx16@GJXAIOU",[[1,2295,"\n"]],[2293,2293],[2294,2294]]],[1540449525677,["gjx16@GJXAIOU",[[1,2296,"\n"]],[2293,2293],[2294,2294]]],[1540449525797,["gjx16@GJXAIOU",[[1,2297,"\n"]],[2294,2294],[2295,2295]]],[1540449528822,["gjx16@GJXAIOU",[[1,2295,"## san"]],[2295,2295],[2301,2301]]],[1540449529637,["gjx16@GJXAIOU",[[-1,2298,"san"]],[2301,2301],[2298,2298]]],[1540449536704,["gjx16@GJXAIOU",[[1,2298,"三、字符串"]],[2298,2298],[2303,2303]]],[1540449537741,["gjx16@GJXAIOU",[[1,2306,"\n"]],[2303,2303],[2304,2304]]],[1540449538229,["gjx16@GJXAIOU",[[1,2307,"\n"]],[2304,2304],[2305,2305]]],[1540449662104,["gjx16@GJXAIOU",[[1,2305,"### （）"]],[2305,2305],[2311,2311]]],[1540449663919,["gjx16@GJXAIOU",[[1,2310,"以"]],[2310,2310],[2311,2311]]],[1540449664516,["gjx16@GJXAIOU",[[-1,2310,"以"]],[2311,2311],[2310,2310]]],[1540449666183,["gjx16@GJXAIOU",[[1,2310,"一"]],[2310,2310],[2311,2311]]],[1540449672191,["gjx16@GJXAIOU",[[1,2312,"基本操作"]],[2312,2312],[2316,2316]]],[1540449673171,["gjx16@GJXAIOU",[[1,2319,"\n"]],[2316,2316],[2317,2317]]],[1540449673349,["gjx16@GJXAIOU",[[1,2320,"\n"]],[2317,2317],[2318,2318]]],[1540449676152,["gjx16@GJXAIOU",[[1,2318,"1.****"]],[2318,2318],[2322,2322]]],[1540449678467,["gjx16@GJXAIOU",[[1,2322,"初始化"]],[2322,2322],[2325,2325]]],[1540449680763,["gjx16@GJXAIOU",[[1,2330,"\n"]],[2327,2327],[2328,2328]]],[1540449706065,["gjx16@GJXAIOU",[[1,2328,"C语言没有字符串类型，只能通过字符数据模拟"]],[2328,2328],[2349,2349]]],[1540449707100,["gjx16@GJXAIOU",[[1,2352,"\n"]],[2349,2349],[2350,2350]]],[1540449717646,["gjx16@GJXAIOU",[[1,2350,"C语言字符串，以字符``"]],[2350,2350],[2362,2362]]],[1540449720518,["gjx16@GJXAIOU",[[1,2361,"、"]],[2361,2361],[2362,2362]]],[1540449722259,["gjx16@GJXAIOU",[[-1,2361,"、"]],[2362,2362],[2361,2361]]],[1540449723357,["gjx16@GJXAIOU",[[1,2361,"\\"]],[2361,2361],[2362,2362]]],[1540449725073,["gjx16@GJXAIOU",[[1,2362,"0"]],[2362,2362],[2363,2363]]],[1540449732690,["gjx16@GJXAIOU",[[1,2364,"，或者数据"]],[2364,2364],[2369,2369]]],[1540449733476,["gjx16@GJXAIOU",[[-1,2367,"数据"]],[2369,2369],[2367,2367]]],[1540449740451,["gjx16@GJXAIOU",[[1,2367,"数字0结尾"]],[2367,2367],[2372,2372]]],[1540449741141,["gjx16@GJXAIOU",[[1,2375,"\n"]],[2372,2372],[2373,2373]]],[1540449741300,["gjx16@GJXAIOU",[[1,2376,"\n"]],[2373,2373],[2374,2374]]],[1540449837071,["gjx16@GJXAIOU",[[1,2374,"两个区别："]],[2374,2374],[2379,2379]]],[1540449837820,["gjx16@GJXAIOU",[[1,2382,"\n"]],[2379,2379],[2380,2380]]],[1540449839317,["gjx16@GJXAIOU",[[1,2380,"```"]],[2380,2380],[2383,2383]]],[1540449839347,["gjx16@GJXAIOU",[[1,2383,"language\n```\n"]],[2383,2383],[2383,2391]]],[1540449840229,["gjx16@GJXAIOU",[[-1,2383,"language"],[1,2391,"c"]],[2383,2391],[2384,2384]]],[1540449840483,["gjx16@GJXAIOU",[[1,2385,"\n"]],[2384,2384],[2385,2385]]],[1540449843092,["gjx16@GJXAIOU",[[1,2385,"int ma"]],[2385,2385],[2391,2391]]],[1540449844948,["gjx16@GJXAIOU",[[1,2391,"in()"]],[2391,2391],[2395,2395]]],[1540449847197,["gjx16@GJXAIOU",[[1,2394,"void"]],[2394,2394],[2398,2398]]],[1540449848661,["gjx16@GJXAIOU",[[1,2400,"\n"]],[2399,2399],[2400,2400]]],[1540449849676,["gjx16@GJXAIOU",[[1,2400,"{}"]],[2400,2400],[2402,2402]]],[1540449850315,["gjx16@GJXAIOU",[[1,2401,"\n"]],[2401,2401],[2402,2402]]],[1540449850467,["gjx16@GJXAIOU",[[1,2402,"\n"]],[2402,2402],[2403,2403]]],[1540449850611,["gjx16@GJXAIOU",[[1,2403,"\n"]],[2403,2403],[2404,2404]]],[1540449873151,["gjx16@GJXAIOU",[[1,2402,"  //不指定长度，而且没有0结束符"]],[2402,2402],[2420,2420]]],[1540449873907,["gjx16@GJXAIOU",[[1,2421,"  \n"]],[2420,2420],[2423,2423]]],[1540449884573,["gjx16@GJXAIOU",[[1,2423,"char buf[] = {};"]],[2423,2423],[2439,2439]]],[1540449887012,["gjx16@GJXAIOU",[[1,2437,"\""]],[2437,2437],[2438,2438]]],[1540449888586,["gjx16@GJXAIOU",[[-1,2437,"\""]],[2438,2438],[2437,2437]]],[1540449889644,["gjx16@GJXAIOU",[[1,2437,"''"]],[2437,2437],[2439,2439]]],[1540449890524,["gjx16@GJXAIOU",[[1,2438,"a"]],[2438,2438],[2439,2439]]],[1540449892526,["gjx16@GJXAIOU",[[1,2440,",m"]],[2440,2440],[2442,2442]]],[1540449893827,["gjx16@GJXAIOU",[[-1,2441,"m"]],[2442,2442],[2441,2441]]],[1540449900583,["gjx16@GJXAIOU",[[1,2441,"'b','c'"]],[2441,2441],[2448,2448]]],[1540449906165,["gjx16@GJXAIOU",[[1,2451,"  \n"]],[2450,2450],[2453,2453]]],[1540449910133,["gjx16@GJXAIOU",[[1,2453,"printf();"]],[2453,2453],[2462,2462]]],[1540449912464,["gjx16@GJXAIOU",[[1,2460,"\"\""]],[2460,2460],[2462,2462]]],[1540449920765,["gjx16@GJXAIOU",[[1,2461,"%s\\n"]],[2461,2461],[2465,2465]]],[1540449924696,["gjx16@GJXAIOU",[[1,2466,",buf"]],[2466,2466],[2470,2470]]],[1540449929540,["gjx16@GJXAIOU",[[1,2473,"  \n"]],[2472,2472],[2475,2475]]],[1540449935592,["gjx16@GJXAIOU",[[1,2475,"//打印"]],[2475,2475],[2479,2479]]],[1540449939363,["gjx16@GJXAIOU",[[-1,2475,"//打印"]],[2479,2479],[2475,2475]]],[1540449940661,["gjx16@GJXAIOU",[[1,2475,"ch"]],[2475,2475],[2477,2477]]],[1540449941139,["gjx16@GJXAIOU",[[-1,2475,"ch"]],[2477,2477],[2475,2475]]],[1540449942043,["gjx16@GJXAIOU",[[-1,2473,"  "],[1,2475,"\n"]],[2475,2475],[2474,2474]]],[1540449942186,["gjx16@GJXAIOU",[[1,2476,"\n"]],[2474,2474],[2475,2475]]],[1540449959403,["gjx16@GJXAIOU",[[1,2475,"  //指定长度，当后面没有复制"]],[2475,2475],[2491,2491]]],[1540449960588,["gjx16@GJXAIOU",[[-1,2489,"复制"]],[2491,2491],[2489,2489]]],[1540449962488,["gjx16@GJXAIOU",[[1,2489,"赋值的"]],[2489,2489],[2492,2492]]],[1540449983076,["gjx16@GJXAIOU",[[1,2492,"元素自动的补0"]],[2492,2492],[2499,2499]]],[1540449984235,["gjx16@GJXAIOU",[[1,2500,"  \n"]],[2499,2499],[2502,2502]]],[1540449990120,["gjx16@GJXAIOU",[[1,2502,"char buf1[]"]],[2502,2502],[2513,2513]]],[1540449993006,["gjx16@GJXAIOU",[[1,2512,"100"]],[2512,2512],[2515,2515]]],[1540449998389,["gjx16@GJXAIOU",[[1,2516," = {};"]],[2516,2516],[2522,2522]]],[1540450004415,["gjx16@GJXAIOU",[[1,2520,"'a',a'"]],[2520,2520],[2526,2526]]],[1540450005171,["gjx16@GJXAIOU",[[-1,2524,"a'"]],[2526,2526],[2524,2524]]],[1540450009926,["gjx16@GJXAIOU",[[1,2524,"'b','c'"]],[2524,2524],[2531,2531]]],[1540450013884,["gjx16@GJXAIOU",[[1,2534,"  \n"]],[2533,2533],[2536,2536]]],[1540450015415,["gjx16@GJXAIOU",[[1,2536,"pritn"]],[2536,2536],[2541,2541]]],[1540450017477,["gjx16@GJXAIOU",[[-1,2539,"tn"]],[2541,2541],[2539,2539]]],[1540450020014,["gjx16@GJXAIOU",[[1,2539,"ntf();"]],[2539,2539],[2545,2545]]],[1540450022557,["gjx16@GJXAIOU",[[1,2543,"\"\""]],[2543,2543],[2545,2545]]],[1540450024919,["gjx16@GJXAIOU",[[1,2544,"\n  %s"]],[2544,2544],[2549,2549]]],[1540450026323,["gjx16@GJXAIOU",[[-1,2545,"  %s"]],[2549,2549],[2545,2545]]],[1540450026684,["gjx16@GJXAIOU",[[-1,2544,"\n"]],[2545,2545],[2544,2544]]],[1540450030024,["gjx16@GJXAIOU",[[1,2544,"%s\\n"]],[2544,2544],[2548,2548]]],[1540450035717,["gjx16@GJXAIOU",[[1,2549,",buf1"]],[2549,2549],[2554,2554]]],[1540450046972,["gjx16@GJXAIOU",[[1,2557,"  "]],[2557,2557],[2559,2559]]],[1540450048087,["gjx16@GJXAIOU",[[-1,2557,"  "],[1,2559,"\n"]],[2559,2559],[2558,2558]]],[1540450051980,["gjx16@GJXAIOU",[[1,2558,"  return 0;"]],[2558,2558],[2569,2569]]],[1540450055371,["gjx16@GJXAIOU",[[1,2385,"\n"]],[2384,2384],[2385,2385]]],[1540450061622,["gjx16@GJXAIOU",[[1,2385,"#include<>"]],[2385,2385],[2395,2395]]],[1540450064853,["gjx16@GJXAIOU",[[1,2394,"stdiol."]],[2394,2394],[2401,2401]]],[1540450065429,["gjx16@GJXAIOU",[[-1,2399,"l."]],[2401,2401],[2399,2399]]],[1540450066574,["gjx16@GJXAIOU",[[1,2399,".h"]],[2399,2399],[2401,2401]]],[1540450070532,["gjx16@GJXAIOU",[[1,2403,"\n"]],[2402,2402],[2403,2403]]],[1540450077286,["gjx16@GJXAIOU",[[1,2403,"#include<>"]],[2403,2403],[2413,2413]]],[1540450080653,["gjx16@GJXAIOU",[[1,2412,"string.hy"]],[2412,2412],[2421,2421]]],[1540450081338,["gjx16@GJXAIOU",[[-1,2420,"y"]],[2421,2421],[2420,2420]]],[1540450083868,["gjx16@GJXAIOU",[[1,2422,"\n"]],[2421,2421],[2422,2422]]],[1540450223245,["gjx16@GJXAIOU",[[1,2595,"  \n"]],[2594,2594],[2597,2597]]],[1540450223397,["gjx16@GJXAIOU",[[-1,2595,"  "],[1,2597,"\n"]],[2597,2597],[2596,2596]]],[1540450240678,["gjx16@GJXAIOU",[[1,2596,"  char buf2[20] = {};"]],[2596,2596],[2617,2617]]],[1540450253629,["gjx16@GJXAIOU",[[1,2615,"'a','b','0',4"]],[2615,2615],[2628,2628]]],[1540450254371,["gjx16@GJXAIOU",[[-1,2627,"4"]],[2628,2628],[2627,2627]]],[1540450260076,["gjx16@GJXAIOU",[[1,2627,"'4','5'"]],[2627,2627],[2634,2634]]],[1540450265557,["gjx16@GJXAIOU",[[1,2637,"  \n"]],[2636,2636],[2639,2639]]],[1540450266795,["gjx16@GJXAIOU",[[1,2639,"pritn"]],[2639,2639],[2644,2644]]],[1540450267810,["gjx16@GJXAIOU",[[-1,2642,"tn"]],[2644,2644],[2642,2642]]],[1540450268789,["gjx16@GJXAIOU",[[1,2642,"ng"]],[2642,2642],[2644,2644]]],[1540450269556,["gjx16@GJXAIOU",[[-1,2643,"g"]],[2644,2644],[2643,2643]]],[1540450271838,["gjx16@GJXAIOU",[[1,2643,"tf();"]],[2643,2643],[2648,2648]]],[1540450274188,["gjx16@GJXAIOU",[[1,2646,"\"\""]],[2646,2646],[2648,2648]]],[1540450280071,["gjx16@GJXAIOU",[[1,2647,"buf2 = "]],[2647,2647],[2654,2654]]],[1540450284516,["gjx16@GJXAIOU",[[1,2469,"1"]],[2469,2469],[2470,2470]]],[1540450288373,["gjx16@GJXAIOU",[[1,2500,"buf "]],[2500,2500],[2504,2504]]],[1540450289002,["gjx16@GJXAIOU",[[-1,2503," "]],[2504,2504],[2503,2503]]],[1540450289356,["gjx16@GJXAIOU",[[1,2503,"1 "]],[2503,2503],[2505,2505]]],[1540450291789,["gjx16@GJXAIOU",[[-1,2503,"1 "]],[2505,2505],[2503,2503]]],[1540450292790,["gjx16@GJXAIOU",[[1,2503,"= "]],[2503,2503],[2505,2505]]],[1540450296029,["gjx16@GJXAIOU",[[1,2514,"1"]],[2514,2514],[2515,2515]]],[1540450297685,["gjx16@GJXAIOU",[[1,2503,"1"]],[2503,2503],[2504,2504]]],[1540450301251,["gjx16@GJXAIOU",[[-1,2556,"1"]],[2557,2557],[2556,2556]]],[1540450301399,["gjx16@GJXAIOU",[[1,2556,"2"]],[2556,2556],[2557,2557]]],[1540450308137,["gjx16@GJXAIOU",[[1,2590,"buf2 = ="]],[2590,2590],[2598,2598]]],[1540450309586,["gjx16@GJXAIOU",[[-1,2596," ="]],[2598,2598],[2596,2596]]],[1540450310422,["gjx16@GJXAIOU",[[1,2596," "]],[2596,2596],[2597,2597]]],[1540450313843,["gjx16@GJXAIOU",[[-1,2606,"1"]],[2607,2607],[2606,2606]]],[1540450314293,["gjx16@GJXAIOU",[[1,2606,"2"]],[2606,2606],[2607,2607]]],[1540450317074,["gjx16@GJXAIOU",[[-1,2621,"2"]],[2622,2622],[2621,2621]]],[1540450317436,["gjx16@GJXAIOU",[[1,2621,"3"]],[2621,2621],[2622,2622]]],[1540450320381,["gjx16@GJXAIOU",[[-1,2665,"2"]],[2666,2666],[2665,2665]]],[1540450321068,["gjx16@GJXAIOU",[[1,2665,"3"]],[2665,2665],[2666,2666]]],[1540450329852,["gjx16@GJXAIOU",[[1,2669,"%s\\n"]],[2669,2669],[2673,2673]]],[1540450334829,["gjx16@GJXAIOU",[[1,2674,",buf3"]],[2674,2674],[2679,2679]]],[1540450343019,["gjx16@GJXAIOU",[[1,2682,"  \n"]],[2681,2681],[2684,2684]]],[1540450343419,["gjx16@GJXAIOU",[[1,2684,"  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);"]],[2684,2684],[2754,2754]]],[1540450345709,["gjx16@GJXAIOU",[[-1,2684,"  "]],[2686,2686],[2684,2684]]],[1540450346690,["gjx16@GJXAIOU",[[1,2684,"\n  \n  "]],[2684,2684],[2690,2690]]],[1540450350453,["gjx16@GJXAIOU",[[1,2610,"`"]],[2610,2610],[2611,2611]]],[1540450351514,["gjx16@GJXAIOU",[[-1,2610,"`"]],[2611,2611],[2610,2610]]],[1540450351809,["gjx16@GJXAIOU",[[1,2611,"\n"]],[2610,2610],[2611,2611]]],[1540450365724,["gjx16@GJXAIOU",[[1,2611,"  //元素含有字符0-"]],[2611,2611],[2623,2623]]],[1540450366789,["gjx16@GJXAIOU",[[-1,2622,"-"]],[2623,2623],[2622,2622]]],[1540450376374,["gjx16@GJXAIOU",[[1,2699,"//元素含有数组"]],[2699,2699],[2707,2707]]],[1540450377177,["gjx16@GJXAIOU",[[-1,2705,"数组"]],[2707,2707],[2705,2705]]],[1540450379340,["gjx16@GJXAIOU",[[1,2705,"数字0"]],[2705,2705],[2708,2708]]],[1540450383609,["gjx16@GJXAIOU",[[-1,2719,"3"]],[2720,2720],[2719,2719]]],[1540450383795,["gjx16@GJXAIOU",[[1,2719,"4"]],[2719,2719],[2720,2720]]],[1540450387755,["gjx16@GJXAIOU",[[-1,2763,"3"]],[2764,2764],[2763,2763]]],[1540450387964,["gjx16@GJXAIOU",[[1,2763,"4"]],[2763,2763],[2764,2764]]],[1540450391658,["gjx16@GJXAIOU",[[-1,2776,"3"]],[2777,2777],[2776,2776]]],[1540450391805,["gjx16@GJXAIOU",[[1,2776,"4"]],[2776,2776],[2777,2777]]],[1540450393369,["gjx16@GJXAIOU",[[1,2780,"  \n"]],[2779,2779],[2782,2782]]],[1540450394065,["gjx16@GJXAIOU",[[-1,2780,"  "],[1,2782,"\n"]],[2782,2782],[2781,2781]]],[1540450395180,["gjx16@GJXAIOU",[[1,2783,"\n"]],[2781,2781],[2782,2782]]],[1540450396805,["gjx16@GJXAIOU",[[1,2782,"  、、"]],[2782,2782],[2786,2786]]],[1540450398233,["gjx16@GJXAIOU",[[-1,2782,"  、、"]],[2786,2786],[2782,2782]]],[1540450398618,["gjx16@GJXAIOU",[[-1,2783,"\n"]],[2782,2782],[2781,2781]]],[1540450417156,["gjx16@GJXAIOU",[[1,2781,"  //元素含有\\0"]],[2781,2781],[2791,2791]]],[1540450417756,["gjx16@GJXAIOU",[[1,2792,"  \n"]],[2791,2791],[2794,2794]]],[1540450426588,["gjx16@GJXAIOU",[[1,2794," char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n"]],[2794,2794],[2864,2864]]],[1540450429322,["gjx16@GJXAIOU",[[-1,2794," "]],[2795,2795],[2794,2794]]],[1540450432698,["gjx16@GJXAIOU",[[-1,2802,"4"]],[2803,2803],[2802,2802]]],[1540450433248,["gjx16@GJXAIOU",[[1,2802,"5"]],[2802,2802],[2803,2803]]],[1540450435196,["gjx16@GJXAIOU",[[-1,2846,"4"]],[2847,2847],[2846,2846]]],[1540450435324,["gjx16@GJXAIOU",[[1,2846,"5"]],[2846,2846],[2847,2847]]],[1540450440203,["gjx16@GJXAIOU",[[-1,2859,"4"]],[2860,2860],[2859,2859]]],[1540450440357,["gjx16@GJXAIOU",[[1,2859,"5"]],[2859,2859],[2860,2860]]],[1540450445780,["gjx16@GJXAIOU",[[1,2820,"\\"]],[2820,2820],[2821,2821]]],[1540450560188,["gjx16@GJXAIOU",[[1,2864,"  "]],[2864,2864],[2866,2866]]],[1540450561042,["gjx16@GJXAIOU",[[-1,2864,"  "],[1,2866,"\n"]],[2866,2866],[2865,2865]]],[1540450561186,["gjx16@GJXAIOU",[[1,2867,"\n"]],[2865,2865],[2866,2866]]],[1540450565060,["gjx16@GJXAIOU",[[1,2866,"  //zh"]],[2866,2866],[2872,2872]]],[1540450565153,["gjx16@GJXAIOU",[[1,2872,"i"]],[2872,2872],[2873,2873]]],[1540450565868,["gjx16@GJXAIOU",[[-1,2870,"zhi"]],[2873,2873],[2870,2870]]],[1540450571417,["gjx16@GJXAIOU",[[1,2870,"直接批量赋值"]],[2870,2870],[2876,2876]]],[1540450572042,["gjx16@GJXAIOU",[[1,2877,"  \n"]],[2876,2876],[2879,2879]]],[1540450583372,["gjx16@GJXAIOU",[[1,2879,"char buf6[] = {};"]],[2879,2879],[2896,2896]]],[1540450584757,["gjx16@GJXAIOU",[[-1,2892," {};"]],[2896,2896],[2892,2892]]],[1540450587764,["gjx16@GJXAIOU",[[1,2892," \"\";"]],[2892,2892],[2896,2896]]],[1540450590386,["gjx16@GJXAIOU",[[1,2894,"asfsjgkjsdl"]],[2894,2894],[2905,2905]]],[1540450592555,["gjx16@GJXAIOU",[[1,2908,"  \n"]],[2907,2907],[2910,2910]]],[1540450597876,["gjx16@GJXAIOU",[[1,2910,"printf();"]],[2910,2910],[2919,2919]]],[1540450600612,["gjx16@GJXAIOU",[[1,2917,"\"\""]],[2917,2917],[2919,2919]]],[1540450604525,["gjx16@GJXAIOU",[[1,2918,"strlen = "]],[2918,2918],[2927,2927]]],[1540450605394,["gjx16@GJXAIOU",[[1,2927,"\n"]],[2927,2927],[2928,2928]]],[1540450605813,["gjx16@GJXAIOU",[[1,2928,"$"]],[2928,2928],[2929,2929]]],[1540450606362,["gjx16@GJXAIOU",[[-1,2928,"$"]],[2929,2929],[2928,2928]]],[1540450607247,["gjx16@GJXAIOU",[[1,2928,"5%"]],[2928,2928],[2930,2930]]],[1540450608073,["gjx16@GJXAIOU",[[-1,2928,"5%"]],[2930,2930],[2928,2928]]],[1540450608234,["gjx16@GJXAIOU",[[-1,2927,"\n"]],[2928,2928],[2927,2927]]],[1540450618167,["gjx16@GJXAIOU",[[1,2927,"%d,s"]],[2927,2927],[2931,2931]]],[1540450619772,["gjx16@GJXAIOU",[[-1,2930,"s"]],[2931,2931],[2930,2930]]],[1540450619949,["gjx16@GJXAIOU",[[1,2930," "]],[2930,2930],[2931,2931]]],[1540450621100,["gjx16@GJXAIOU",[[-1,2929,", "]],[2931,2931],[2929,2929]]],[1540450625060,["gjx16@GJXAIOU",[[1,2929," , siz"]],[2929,2929],[2935,2935]]],[1540450627747,["gjx16@GJXAIOU",[[1,2935,"eof()"]],[2935,2935],[2940,2940]]],[1540450633179,["gjx16@GJXAIOU",[[-1,2938,"()"]],[2940,2940],[2938,2938]]],[1540450638683,["gjx16@GJXAIOU",[[1,2938," = %d\\n"]],[2938,2938],[2945,2945]]],[1540450641932,["gjx16@GJXAIOU",[[1,2946,",stt"]],[2946,2946],[2950,2950]]],[1540450642602,["gjx16@GJXAIOU",[[-1,2949,"t"]],[2950,2950],[2949,2949]]],[1540450644660,["gjx16@GJXAIOU",[[1,2949,"rlen("]],[2949,2949],[2954,2954]]],[1540450644806,["gjx16@GJXAIOU",[[1,2955,")"]],[2954,2954],[2955,2955]]],[1540450648996,["gjx16@GJXAIOU",[[1,2954,"buf6"]],[2954,2954],[2958,2958]]],[1540450652277,["gjx16@GJXAIOU",[[1,2959,".s"]],[2959,2959],[2961,2961]]],[1540450653683,["gjx16@GJXAIOU",[[-1,2960,"s"]],[2961,2961],[2960,2960]]],[1540450654693,["gjx16@GJXAIOU",[[1,2960,"soz"]],[2960,2960],[2963,2963]]],[1540450655898,["gjx16@GJXAIOU",[[-1,2961,"oz"]],[2963,2963],[2961,2961]]],[1540450659415,["gjx16@GJXAIOU",[[1,2961,"izeof("]],[2961,2961],[2967,2967]]],[1540450659500,["gjx16@GJXAIOU",[[1,2968,")"]],[2967,2967],[2968,2968]]],[1540450665044,["gjx16@GJXAIOU",[[1,2967,"buf6"]],[2967,2967],[2971,2971]]],[1540450670235,["gjx16@GJXAIOU",[[-1,2959,"."]],[2960,2960],[2959,2959]]],[1540450671228,["gjx16@GJXAIOU",[[1,2959,","]],[2959,2959],[2960,2960]]],[1540450676939,["gjx16@GJXAIOU",[[1,2975,"  \n"]],[2974,2974],[2977,2977]]],[1540450680635,["gjx16@GJXAIOU",[[1,2910,"\n  "]],[2910,2910],[2913,2913]]],[1540450682523,["gjx16@GJXAIOU",[[1,2910,"//"]],[2910,2910],[2912,2912]]],[1540450701165,["gjx16@GJXAIOU",[[1,2912,"strlen：测字符串长度，不保罗"]],[2912,2912],[2929,2929]]],[1540450701936,["gjx16@GJXAIOU",[[-1,2927,"保罗"]],[2929,2929],[2927,2927]]],[1540450715191,["gjx16@GJXAIOU",[[1,2927,"包括数字0和字符\\0-"]],[2927,2927],[2938,2938]]],[1540450715954,["gjx16@GJXAIOU",[[-1,2937,"-"]],[2938,2938],[2937,2937]]],[1540450717217,["gjx16@GJXAIOU",[[1,2940,"\n  "]],[2937,2937],[2940,2940]]],[1540450719948,["gjx16@GJXAIOU",[[1,2940,"；；"]],[2940,2940],[2942,2942]]],[1540450720600,["gjx16@GJXAIOU",[[-1,2940,"；；"]],[2942,2942],[2940,2940]]],[1540450744255,["gjx16@GJXAIOU",[[1,2940,"//sizeof:测数组长度，包括数字0和"]],[2940,2940],[2961,2961]]],[1540450748674,["gjx16@GJXAIOU",[[1,2961,"字符\\0"]],[2961,2961],[2965,2965]]],[1540450791131,["gjx16@GJXAIOU",[[1,3036,"  \n"]],[3032,3032],[3035,3035]]],[1540450791289,["gjx16@GJXAIOU",[[-1,3033,"  "],[1,3035,"\n"]],[3035,3035],[3034,3034]]],[1540450791761,["gjx16@GJXAIOU",[[1,3034,"char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));"]],[3034,3034],[3187,3187]]],[1540450804868,["gjx16@GJXAIOU",[[1,3034,"  "]],[3034,3034],[3036,3036]]],[1540450810772,["gjx16@GJXAIOU",[[-1,3044,"6"]],[3045,3045],[3044,3044]]],[1540450811515,["gjx16@GJXAIOU",[[1,3044,"7"]],[3044,3044],[3045,3045]]],[1540450814675,["gjx16@GJXAIOU",[[1,3046,"100"]],[3046,3046],[3049,3049]]],[1540450817508,["gjx16@GJXAIOU",[[-1,3175,"6"]],[3176,3176],[3175,3175]]],[1540450818355,["gjx16@GJXAIOU",[[1,3175,"7"]],[3175,3175],[3176,3176]]],[1540450821625,["gjx16@GJXAIOU",[[-1,3188,"6"]],[3189,3189],[3188,3188]]],[1540450821947,["gjx16@GJXAIOU",[[1,3188,"7"]],[3188,3188],[3189,3189]]],[1540450899387,["gjx16@GJXAIOU",[[1,2349,",ben"]],[2349,2349],[2353,2353]]],[1540450900265,["gjx16@GJXAIOU",[[-1,2350,"ben"]],[2353,2353],[2350,2350]]],[1540450905277,["gjx16@GJXAIOU",[[1,2350,"本质上是字符数组"]],[2350,2350],[2358,2358]]],[1540450940083,["gjx16@GJXAIOU",[[1,3227,"\n"]],[3223,3223],[3224,3224]]],[1540450946669,["gjx16@GJXAIOU",[[1,3224,"程序运行结果："]],[3224,3224],[3231,3231]]],[1540450947410,["gjx16@GJXAIOU",[[1,3235,"\n"]],[3231,3231],[3232,3232]]],[1540450948410,["gjx16@GJXAIOU",[[1,3232,"buf1= abc\nbuf2 = abc\nbuf3 = ab045\nbuf4 = ab045\nbuf5 = ab\nstrlen = 11 , sizeof = 12\nstrlen = 11 , sizeof = 100\n\n"]],[3232,3232],[3343,3343]]],[1540450952462,["gjx16@GJXAIOU",[[1,3232,"`"]],[3232,3232],[3233,3233]]],[1540450953572,["gjx16@GJXAIOU",[[1,3243,"`"]],[3243,3243],[3244,3244]]],[1540450954205,["gjx16@GJXAIOU",[[1,3268,"`"]],[3268,3268],[3269,3269]]],[1540450955579,["gjx16@GJXAIOU",[[1,3255,"`"]],[3255,3255],[3256,3256]]],[1540450957139,["gjx16@GJXAIOU",[[1,3283,"`"]],[3283,3283],[3284,3284]]],[1540450957980,["gjx16@GJXAIOU",[[1,3294,"`"]],[3294,3294],[3295,3295]]],[1540450959333,["gjx16@GJXAIOU",[[1,3321,"`"]],[3321,3321],[3322,3322]]],[1540450962837,["gjx16@GJXAIOU",[[1,3348,"`"]],[3348,3348],[3349,3349]]],[1540450963581,["gjx16@GJXAIOU",[[1,3320,"`"]],[3320,3320],[3321,3321]]],[1540450964052,["gjx16@GJXAIOU",[[1,3293,"`"]],[3293,3293],[3294,3294]]],[1540450964419,["gjx16@GJXAIOU",[[1,3281,"`"]],[3281,3281],[3282,3282]]],[1540450966745,["gjx16@GJXAIOU",[[-1,3281,"`"]],[3282,3282],[3281,3281]]],[1540450967573,["gjx16@GJXAIOU",[[1,3282,"`"]],[3282,3282],[3283,3283]]],[1540450968572,["gjx16@GJXAIOU",[[1,3268,"`"]],[3268,3268],[3269,3269]]],[1540450969261,["gjx16@GJXAIOU",[[1,3254,"`"]],[3254,3254],[3255,3255]]],[1540450969739,["gjx16@GJXAIOU",[[1,3242,"`"]],[3242,3242],[3243,3243]]],[1540450974445,["gjx16@GJXAIOU",[[1,3361,"\n"]],[3358,3358],[3359,3359]]],[1540450974562,["gjx16@GJXAIOU",[[1,3362,"\n"]],[3359,3359],[3360,3360]]],[1540450981548,["gjx16@GJXAIOU",[[1,3360,"2.****"]],[3360,3360],[3364,3364]]],[1540450982563,["gjx16@GJXAIOU",[[1,3364,"shiy"]],[3364,3364],[3368,3368]]],[1540450983337,["gjx16@GJXAIOU",[[-1,3364,"shiy"]],[3368,3368],[3364,3364]]],[1540450991622,["gjx16@GJXAIOU",[[1,3364,"使用字符串：当做"]],[3364,3364],[3372,3372]]],[1540450994804,["gjx16@GJXAIOU",[[-1,3370,"当做"]],[3372,3372],[3370,3370]]],[1540451002317,["gjx16@GJXAIOU",[[1,3370,"一般又是"]],[3370,3370],[3374,3374]]],[1540451004539,["gjx16@GJXAIOU",[[-1,3369,"：一般又是"]],[3374,3374],[3369,3369]]],[1540451006450,["gjx16@GJXAIOU",[[1,3374,"\n"]],[3371,3371],[3372,3372]]],[1540451015141,["gjx16@GJXAIOU",[[1,3372,"一般都是字符数组，座椅"]],[3372,3372],[3383,3383]]],[1540451015819,["gjx16@GJXAIOU",[[-1,3381,"座椅"]],[3383,3383],[3381,3381]]],[1540451025301,["gjx16@GJXAIOU",[[1,3381,"所以就当做数组来用"]],[3381,3381],[3390,3390]]],[1540451026101,["gjx16@GJXAIOU",[[1,3393,"\n"]],[3390,3390],[3391,3391]]],[1540451026498,["gjx16@GJXAIOU",[[1,3394,"\n"]],[3391,3391],[3392,3392]]],[1540451440292,["gjx16@GJXAIOU",[[1,3391,"- 使用【"]],[3391,3391],[3396,3396]]],[1540451441008,["gjx16@GJXAIOU",[[-1,3395,"【"]],[3396,3396],[3395,3395]]],[1540451444502,["gjx16@GJXAIOU",[[1,3395,"[]方式"]],[3395,3395],[3399,3399]]],[1540451445585,["gjx16@GJXAIOU",[[1,3400,"- \n"]],[3399,3399],[3402,3402]]],[1540451449420,["gjx16@GJXAIOU",[[1,3402,"使用指针方式"]],[3402,3402],[3408,3408]]],[1540451451760,["gjx16@GJXAIOU",[[1,3402,"\n- "]],[3399,3399],[3402,3402]]],[1540451452033,["gjx16@GJXAIOU",[[-1,3400,"- "]],[3402,3402],[3401,3401]]],[1540452671247,["gjx16@GJXAIOU",[[1,3400,"```"]],[3400,3400],[3403,3403]]],[1540452671281,["gjx16@GJXAIOU",[[1,3403,"language\n```\n"]],[3403,3403],[3403,3411]]],[1540452672639,["gjx16@GJXAIOU",[[-1,3403,"language"],[1,3411,"c"]],[3403,3411],[3404,3404]]],[1540452673055,["gjx16@GJXAIOU",[[1,3405,"\n"]],[3404,3404],[3405,3405]]],[1540452687697,["gjx16@GJXAIOU",[[1,3405,"#include<>"]],[3405,3405],[3415,3415]]],[1540452688555,["gjx16@GJXAIOU",[[1,3414,"a"]],[3414,3414],[3415,3415]]],[1540452689494,["gjx16@GJXAIOU",[[-1,3414,"a"]],[3415,3415],[3414,3414]]],[1540452691831,["gjx16@GJXAIOU",[[1,3414,"stdio.h"]],[3414,3414],[3421,3421]]],[1540452694893,["gjx16@GJXAIOU",[[1,3423,"\n"]],[3423,3423],[3424,3424]]],[1540452697649,["gjx16@GJXAIOU",[[1,3424,"\n"]],[3423,3423],[3424,3424]]],[1540452699983,["gjx16@GJXAIOU",[[1,3424,"int main()"]],[3424,3424],[3434,3434]]],[1540452700670,["gjx16@GJXAIOU",[[1,3435,"\n"]],[3434,3434],[3435,3435]]],[1540452702887,["gjx16@GJXAIOU",[[1,3435,"{}"]],[3435,3435],[3437,3437]]],[1540452703901,["gjx16@GJXAIOU",[[1,3436,"\n"]],[3436,3436],[3437,3437]]],[1540452704087,["gjx16@GJXAIOU",[[1,3437,"\n"]],[3437,3437],[3438,3438]]],[1540452704277,["gjx16@GJXAIOU",[[1,3438,"\n"]],[3438,3438],[3439,3439]]],[1540452704438,["gjx16@GJXAIOU",[[1,3439,"\n"]],[3439,3439],[3440,3440]]],[1540452721088,["gjx16@GJXAIOU",[[1,3437,"  char buf[] = \"\""]],[3437,3437],[3454,3454]]],[1540452725511,["gjx16@GJXAIOU",[[1,3453,"abcdef"]],[3453,3453],[3459,3459]]],[1540452728063,["gjx16@GJXAIOU",[[1,3460,";"]],[3460,3460],[3461,3461]]],[1540452728533,["gjx16@GJXAIOU",[[1,3462,"  \n"]],[3461,3461],[3464,3464]]],[1540452782077,["gjx16@GJXAIOU",[[1,3465,"  \n"]],[3461,3461],[3464,3464]]],[1540452784703,["gjx16@GJXAIOU",[[1,3464,"int i ;="]],[3464,3464],[3472,3472]]],[1540452785445,["gjx16@GJXAIOU",[[-1,3470,";="]],[3472,3472],[3470,3470]]],[1540452795175,["gjx16@GJXAIOU",[[1,3470,"= 0;"]],[3470,3470],[3474,3474]]],[1540452795791,["gjx16@GJXAIOU",[[1,3478,"  \n"]],[3474,3474],[3477,3477]]],[1540452798379,["gjx16@GJXAIOU",[[1,3477,"for()"]],[3477,3477],[3482,3482]]],[1540452801626,["gjx16@GJXAIOU",[[1,3481,"i = "]],[3481,3481],[3485,3485]]],[1540452807169,["gjx16@GJXAIOU",[[1,3485,"0; i 《"]],[3485,3485],[3491,3491]]],[1540452808141,["gjx16@GJXAIOU",[[-1,3490,"《"]],[3491,3491],[3490,3490]]],[1540452811930,["gjx16@GJXAIOU",[[1,3490,"< strlen("]],[3490,3490],[3499,3499]]],[1540452812031,["gjx16@GJXAIOU",[[1,3500,")"]],[3499,3499],[3500,3500]]],[1540452815095,["gjx16@GJXAIOU",[[1,3499,"buf"]],[3499,3499],[3502,3502]]],[1540452819559,["gjx16@GJXAIOU",[[1,3503," ; i++"]],[3503,3503],[3509,3509]]],[1540452821110,["gjx16@GJXAIOU",[[1,3514,"  \n"]],[3510,3510],[3513,3513]]],[1540452823682,["gjx16@GJXAIOU",[[1,3513,"  {}"]],[3513,3513],[3517,3517]]],[1540452825150,["gjx16@GJXAIOU",[[1,3516,"\n    \n    \n    "]],[3516,3516],[3531,3531]]],[1540452841290,["gjx16@GJXAIOU",[[1,3521,"  pritnf"]],[3521,3521],[3529,3529]]],[1540452843214,["gjx16@GJXAIOU",[[-1,3526,"tnf"]],[3529,3529],[3526,3526]]],[1540452847704,["gjx16@GJXAIOU",[[1,3526,"ntf();"]],[3526,3526],[3532,3532]]],[1540452849848,["gjx16@GJXAIOU",[[1,3530,"\"\""]],[3530,3530],[3532,3532]]],[1540452858377,["gjx16@GJXAIOU",[[1,3531,"buf[i] = "]],[3531,3531],[3540,3540]]],[1540452863342,["gjx16@GJXAIOU",[[-1,3535,"i"]],[3536,3536],[3535,3535]]],[1540452865385,["gjx16@GJXAIOU",[[1,3535,"%d"]],[3535,3535],[3537,3537]]],[1540452872985,["gjx16@GJXAIOU",[[1,3541," %s"]],[3541,3541],[3544,3544]]],[1540452876105,["gjx16@GJXAIOU",[[1,3545,","]],[3545,3545],[3546,3546]]],[1540452879454,["gjx16@GJXAIOU",[[-1,3543,"s"]],[3544,3544],[3543,3543]]],[1540452879752,["gjx16@GJXAIOU",[[1,3543,"c"]],[3543,3543],[3544,3544]]],[1540452889784,["gjx16@GJXAIOU",[[1,3546," i ,buf[i["]],[3546,3546],[3556,3556]]],[1540452890570,["gjx16@GJXAIOU",[[-1,3555,"["]],[3556,3556],[3555,3555]]],[1540452891280,["gjx16@GJXAIOU",[[1,3555,"]"]],[3555,3555],[3556,3556]]],[1540452894982,["gjx16@GJXAIOU",[[-1,3559,"    "]],[3563,3563],[3559,3559]]],[1540452895278,["gjx16@GJXAIOU",[[-1,3559,"\n"]],[3559,3559],[3558,3558]]],[1540452897526,["gjx16@GJXAIOU",[[1,3567,"  \n  "]],[3564,3564],[3569,3569]]],[1540452901200,["gjx16@GJXAIOU",[[1,3569,"return 0;"]],[3569,3569],[3578,3578]]],[1540452904094,["gjx16@GJXAIOU",[[1,3581,"  \n  "]],[3578,3578],[3583,3583]]],[1540452904245,["gjx16@GJXAIOU",[[-1,3579,"    "],[1,3583,"\n"]],[3583,3583],[3580,3580]]],[1540452904717,["gjx16@GJXAIOU",[[1,3581,"\n"]],[3580,3580],[3581,3581]]],[1540452905910,["gjx16@GJXAIOU",[[1,3581,"  "]],[3581,3581],[3583,3583]]],[1540452909024,["gjx16@GJXAIOU",[[-1,3588,"\n"]],[3587,3587],[3586,3586]]],[1540452909516,["gjx16@GJXAIOU",[[-1,3584,"  "]],[3586,3586],[3584,3584]]],[1540452909709,["gjx16@GJXAIOU",[[-1,3585,"\n"]],[3584,3584],[3583,3583]]],[1540452910038,["gjx16@GJXAIOU",[[-1,3581,"  "]],[3583,3583],[3581,3581]]],[1540452910196,["gjx16@GJXAIOU",[[-1,3582,"\n"]],[3581,3581],[3580,3580]]],[1540452910349,["gjx16@GJXAIOU",[[-1,3581,"\n"]],[3580,3580],[3579,3579]]],[1540452910510,["gjx16@GJXAIOU",[[-1,3580,"\n"]],[3579,3579],[3578,3578]]],[1540452929768,["gjx16@GJXAIOU",[[1,3596,"```"]],[3596,3596],[3599,3599]]],[1540452929801,["gjx16@GJXAIOU",[[1,3599,"language\n```\n"]],[3599,3599],[3599,3607]]],[1540452930639,["gjx16@GJXAIOU",[[-1,3599,"language"],[1,3607,"c"]],[3599,3607],[3600,3600]]],[1540452930877,["gjx16@GJXAIOU",[[1,3601,"\n"]],[3600,3600],[3601,3601]]],[1540452932024,["gjx16@GJXAIOU",[[1,3601,"#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}"]],[3601,3601],[3777,3777]]],[1540452938086,["gjx16@GJXAIOU",[[1,3673,"\n  "]],[3670,3670],[3673,3673]]],[1540452941823,["gjx16@GJXAIOU",[[1,3673,"int *p "]],[3673,3673],[3680,3680]]],[1540452944743,["gjx16@GJXAIOU",[[-1,3673,"int"]],[3676,3676],[3673,3673]]],[1540452946392,["gjx16@GJXAIOU",[[1,3673,"char"]],[3673,3673],[3677,3677]]],[1540452948376,["gjx16@GJXAIOU",[[1,3681," "]],[3680,3680],[3681,3681]]],[1540452949730,["gjx16@GJXAIOU",[[1,3681,"="]],[3681,3681],[3682,3682]]],[1540452949863,["gjx16@GJXAIOU",[[1,3683," "]],[3682,3682],[3683,3683]]],[1540452952174,["gjx16@GJXAIOU",[[1,3683,"buf;"]],[3683,3683],[3687,3687]]],[1540452963624,["gjx16@GJXAIOU",[[-1,3764,"buf[i]"]],[3770,3770],[3764,3764]]],[1540452978245,["gjx16@GJXAIOU",[[-1,3745,"buf"]],[3748,3748],[3745,3745]]],[1540452979119,["gjx16@GJXAIOU",[[1,3745,"p"]],[3745,3745],[3746,3746]]],[1540452983556,["gjx16@GJXAIOU",[[-1,3752,"  "]],[3754,3754],[3752,3752]]],[1540452984517,["gjx16@GJXAIOU",[[-1,3745,"p[d] =%"]],[3752,3752],[3745,3745]]],[1540452988276,["gjx16@GJXAIOU",[[-1,3750,"i ,"]],[3753,3753],[3750,3750]]],[1540452990945,["gjx16@GJXAIOU",[[1,3750,"pp"]],[3750,3750],[3752,3752]]],[1540452991797,["gjx16@GJXAIOU",[[-1,3751,"p"]],[3752,3752],[3751,3751]]],[1540452993910,["gjx16@GJXAIOU",[[1,3751,"[i[["]],[3751,3751],[3755,3755]]],[1540452994557,["gjx16@GJXAIOU",[[-1,3753,"[["]],[3755,3755],[3753,3753]]],[1540452995472,["gjx16@GJXAIOU",[[1,3753,"]"]],[3753,3753],[3754,3754]]],[1540453003400,["gjx16@GJXAIOU",[[1,3761,"  \n    "]],[3756,3756],[3763,3763]]],[1540453010845,["gjx16@GJXAIOU",[[1,3736,"\n      "]],[3736,3736],[3743,3743]]],[1540453014776,["gjx16@GJXAIOU",[[1,3736,"  //yi"]],[3736,3736],[3742,3742]]],[1540453017845,["gjx16@GJXAIOU",[[-1,3740,"yi"]],[3742,3742],[3740,3740]]],[1540453028738,["gjx16@GJXAIOU",[[1,3740,"以下表达式是等价的"]],[3740,3740],[3749,3749]]],[1540453031320,["gjx16@GJXAIOU",[[1,3783," \n      "]],[3776,3776],[3784,3784]]],[1540453035838,["gjx16@GJXAIOU",[[1,3784,"printf();"]],[3784,3784],[3793,3793]]],[1540453038471,["gjx16@GJXAIOU",[[1,3791,"\"\""]],[3791,3791],[3793,3793]]],[1540453040624,["gjx16@GJXAIOU",[[1,3792,"%c"]],[3792,3792],[3794,3794]]],[1540453043191,["gjx16@GJXAIOU",[[1,3795,","]],[3795,3795],[3796,3796]]],[1540453051415,["gjx16@GJXAIOU",[[1,3796,"*("]],[3796,3796],[3798,3798]]],[1540453051526,["gjx16@GJXAIOU",[[1,3799,")"]],[3798,3798],[3799,3799]]],[1540453053718,["gjx16@GJXAIOU",[[1,3798,"p ="]],[3798,3798],[3801,3801]]],[1540453054413,["gjx16@GJXAIOU",[[-1,3800,"="]],[3801,3801],[3800,3800]]],[1540453056095,["gjx16@GJXAIOU",[[1,3800,"+ i"]],[3800,3800],[3803,3803]]],[1540453058478,["gjx16@GJXAIOU",[[1,3813," \n      "]],[3806,3806],[3814,3814]]],[1540453059735,["gjx16@GJXAIOU",[[1,3814,"pr"]],[3814,3814],[3816,3816]]],[1540453060340,["gjx16@GJXAIOU",[[-1,3815,"r"]],[3816,3816],[3815,3815]]],[1540453062929,["gjx16@GJXAIOU",[[1,3815,"rintf();"]],[3815,3815],[3823,3823]]],[1540453064880,["gjx16@GJXAIOU",[[1,3821,"\"\""]],[3821,3821],[3823,3823]]],[1540453066670,["gjx16@GJXAIOU",[[1,3822,"%d"]],[3822,3822],[3824,3824]]],[1540453067125,["gjx16@GJXAIOU",[[-1,3823,"d"]],[3824,3824],[3823,3823]]],[1540453067240,["gjx16@GJXAIOU",[[1,3823,"c"]],[3823,3823],[3824,3824]]],[1540453078729,["gjx16@GJXAIOU",[[1,3825,",*buf("]],[3825,3825],[3831,3831]]],[1540453078830,["gjx16@GJXAIOU",[[1,3832,")"]],[3831,3831],[3832,3832]]],[1540453080853,["gjx16@GJXAIOU",[[-1,3827,"buf()"]],[3832,3832],[3827,3827]]],[1540453081768,["gjx16@GJXAIOU",[[1,3827,"("]],[3827,3827],[3828,3828]]],[1540453081878,["gjx16@GJXAIOU",[[1,3829,")"]],[3828,3828],[3829,3829]]],[1540453085655,["gjx16@GJXAIOU",[[1,3828,"buf + i"]],[3828,3828],[3835,3835]]],[1540453094385,["gjx16@GJXAIOU",[[1,3756,"//"]],[3756,3756],[3758,3758]]],[1540453098529,["gjx16@GJXAIOU",[[1,3786,"//"]],[3786,3786],[3788,3788]]],[1540453810837,["gjx16@GJXAIOU",[[1,3880,"\n"]],[3877,3877],[3878,3878]]],[1540453810971,["gjx16@GJXAIOU",[[1,3881,"\n"]],[3878,3878],[3879,3879]]],[1540453812167,["gjx16@GJXAIOU",[[1,3879,"****"]],[3879,3879],[3881,3881]]],[1540453813406,["gjx16@GJXAIOU",[[1,3881,"hansh"]],[3881,3881],[3886,3886]]],[1540453814267,["gjx16@GJXAIOU",[[-1,3881,"hansh"]],[3886,3886],[3881,3881]]],[1540453815357,["gjx16@GJXAIOU",[[1,3883,"*"]],[3881,3881],[3882,3882]]],[1540453820705,["gjx16@GJXAIOU",[[1,3882,"和++++"]],[3882,3882],[3885,3885]]],[1540453821795,["gjx16@GJXAIOU",[[-1,3885,"++"]],[3885,3885],[3883,3883]]],[1540453832216,["gjx16@GJXAIOU",[[1,3885,"的使用说明"]],[3885,3885],[3890,3890]]],[1540453837622,["gjx16@GJXAIOU",[[1,3879,"注："]],[3879,3879],[3881,3881]]],[1540453842774,["gjx16@GJXAIOU",[[1,3892,"："]],[3892,3892],[3893,3893]]],[1540453846387,["gjx16@GJXAIOU",[[1,3897,"      "]],[3897,3897],[3903,3903]]],[1540453848563,["gjx16@GJXAIOU",[[-1,3897,"      "]],[3903,3903],[3897,3897]]],[1540453849364,["gjx16@GJXAIOU",[[-1,3897,"\n"]],[3897,3897],[3896,3896]]],[1540453850571,["gjx16@GJXAIOU",[[1,3897,"\n"]],[3896,3896],[3897,3897]]],[1540453851198,["gjx16@GJXAIOU",[[1,3897,"```"]],[3897,3897],[3900,3900]]],[1540453851232,["gjx16@GJXAIOU",[[1,3900,"language\n```\n"]],[3900,3900],[3900,3908]]],[1540453852390,["gjx16@GJXAIOU",[[-1,3900,"language"],[1,3908,"c"]],[3900,3908],[3901,3901]]],[1540453852580,["gjx16@GJXAIOU",[[1,3902,"\n"]],[3901,3901],[3902,3902]]],[1540453854712,["gjx16@GJXAIOU",[[1,3902,"e"]],[3902,3902],[3903,3903]]],[1540453855214,["gjx16@GJXAIOU",[[-1,3902,"e"]],[3903,3903],[3902,3902]]],[1540453858301,["gjx16@GJXAIOU",[[1,3902,"while()"]],[3902,3902],[3909,3909]]],[1540453863614,["gjx16@GJXAIOU",[[1,3908,"*a "]],[3908,3908],[3911,3911]]],[1540453864475,["gjx16@GJXAIOU",[[-1,3910," "]],[3911,3911],[3910,3910]]],[1540453868801,["gjx16@GJXAIOU",[[1,3910,"++ = *b++"]],[3910,3910],[3919,3919]]],[1540453874836,["gjx16@GJXAIOU",[[1,3921,"\n"]],[3920,3920],[3921,3921]]],[1540453876077,["gjx16@GJXAIOU",[[1,3921,"{}"]],[3921,3921],[3923,3923]]],[1540453877492,["gjx16@GJXAIOU",[[1,3924,"\n"]],[3923,3923],[3924,3924]]],[1540453879988,["gjx16@GJXAIOU",[[1,3922,"\n"]],[3922,3922],[3923,3923]]],[1540453882211,["gjx16@GJXAIOU",[[1,3923,"\n"]],[3923,3923],[3924,3924]]],[1540453883604,["gjx16@GJXAIOU",[[1,3923,"  "]],[3923,3923],[3925,3925]]],[1540453885453,["gjx16@GJXAIOU",[[1,3925,"NULL;"]],[3925,3925],[3930,3930]]],[1540453891749,["gjx16@GJXAIOU",[[1,3933,"//shou"]],[3933,3933],[3939,3939]]],[1540453892683,["gjx16@GJXAIOU",[[-1,3935,"shou"]],[3939,3939],[3935,3935]]],[1540453898979,["gjx16@GJXAIOU",[[1,3935,"首先执行：*啊"]],[3935,3935],[3942,3942]]],[1540453899667,["gjx16@GJXAIOU",[[-1,3941,"啊"]],[3942,3942],[3941,3941]]],[1540453905501,["gjx16@GJXAIOU",[[1,3941,"a = *b;"]],[3941,3941],[3948,3948]]],[1540453906071,["gjx16@GJXAIOU",[[1,3949,"\n"]],[3948,3948],[3949,3949]]],[1540453909589,["gjx16@GJXAIOU",[[1,3949,"ranh"]],[3949,3949],[3953,3953]]],[1540453910396,["gjx16@GJXAIOU",[[-1,3949,"ranh"]],[3953,3953],[3949,3949]]],[1540453911123,["gjx16@GJXAIOU",[[-1,3949,"\n"]],[3949,3949],[3948,3948]]],[1540453922253,["gjx16@GJXAIOU",[[1,3948,"然后a++; b++; ,"]],[3948,3948],[3961,3961]]],[1540453923875,["gjx16@GJXAIOU",[[-1,3960,","]],[3961,3961],[3960,3960]]],[1540453942902,["gjx16@GJXAIOU",[[1,3960,"然后判断*a是否为0，不为0"]],[3960,3960],[3974,3974]]],[1540453956402,["gjx16@GJXAIOU",[[1,3974,"则执行，为0不执行"]],[3974,3974],[3983,3983]]],[1540453959276,["gjx16@GJXAIOU",[[-1,3980,"不执行"]],[3983,3983],[3980,3980]]],[1540453963050,["gjx16@GJXAIOU",[[1,3980,"跳出循环"]],[3980,3980],[3984,3984]]],[1540454178987,["gjx16@GJXAIOU",[[1,3990,"\n"]],[3989,3989],[3990,3990]]],[1540454179125,["gjx16@GJXAIOU",[[1,3991,"\n"]],[3990,3990],[3991,3991]]],[1540454180422,["gjx16@GJXAIOU",[[1,3991,"、、"]],[3991,3991],[3993,3993]]],[1540454181643,["gjx16@GJXAIOU",[[-1,3991,"、、"]],[3993,3993],[3991,3991]]],[1540454186927,["gjx16@GJXAIOU",[[1,3991,"ZHU"]],[3991,3991],[3994,3994]]],[1540454187742,["gjx16@GJXAIOU",[[-1,3991,"ZHU"]],[3994,3994],[3991,3991]]],[1540454189813,["gjx16@GJXAIOU",[[1,3991,"zhu "]],[3991,3991],[3995,3995]]],[1540454190578,["gjx16@GJXAIOU",[[-1,3991,"zhu "]],[3995,3995],[3991,3991]]],[1540454194776,["gjx16@GJXAIOU",[[1,3991,"注：****"]],[3991,3991],[3995,3995]]],[1540454196749,["gjx16@GJXAIOU",[[1,3995,"加一"]],[3995,3995],[3997,3997]]],[1540454197338,["gjx16@GJXAIOU",[[-1,3995,"加一"]],[3997,3997],[3995,3995]]],[1540454198919,["gjx16@GJXAIOU",[[1,3995,"建议"]],[3995,3995],[3997,3997]]],[1540454200907,["gjx16@GJXAIOU",[[1,4000,"\n"]],[3999,3999],[4000,4000]]],[1540454243505,["gjx16@GJXAIOU",[[1,4000,"- 1.判断形参指针是否为空，然后在选择是否这行"]],[4000,4000],[4024,4024]]],[1540454245499,["gjx16@GJXAIOU",[[-1,4020,"是否这行"]],[4024,4024],[4020,4020]]],[1540454252687,["gjx16@GJXAIOU",[[1,4020,"是否执行下面的操作"]],[4020,4020],[4029,4029]]],[1540454253292,["gjx16@GJXAIOU",[[1,4030,"- \n"]],[4029,4029],[4032,4032]]],[1540454289752,["gjx16@GJXAIOU",[[1,4032,"2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用心得"]],[4032,4032],[4063,4063]]],[1540454290493,["gjx16@GJXAIOU",[[-1,4061,"心得"]],[4063,4063],[4061,4061]]],[1540454294287,["gjx16@GJXAIOU",[[1,4061,"行的"]],[4061,4061],[4063,4063]]],[1540454295619,["gjx16@GJXAIOU",[[-1,4061,"行的"]],[4063,4063],[4061,4061]]],[1540454300215,["gjx16@GJXAIOU",[[1,4061,"新的变量，"]],[4061,4061],[4066,4066]]],[1540454316457,["gjx16@GJXAIOU",[[1,4066,"这样可以保证形参指针一直执行原来的位置"]],[4066,4066],[4085,4085]]],[1540454322515,["gjx16@GJXAIOU",[[1,4086,"- \n"]],[4085,4085],[4088,4088]]],[1540454322654,["gjx16@GJXAIOU",[[-1,4086,"- "]],[4088,4088],[4087,4087]]],[1540454322787,["gjx16@GJXAIOU",[[1,4087,"\n"]],[4087,4087],[4088,4088]]],[1540454322900,["gjx16@GJXAIOU",[[1,4088,"\n"]],[4088,4088],[4089,4089]]],[1540454617123,["gjx16@GJXAIOU",[[1,4089,"\n"]],[4086,4086],[4087,4087]]],[1540454617298,["gjx16@GJXAIOU",[[1,4090,"\n"]],[4087,4087],[4088,4088]]],[1540454623832,["gjx16@GJXAIOU",[[1,4088,"3、"]],[4088,4088],[4090,4090]]],[1540454624306,["gjx16@GJXAIOU",[[-1,4089,"、"]],[4090,4090],[4089,4089]]],[1540454625110,["gjx16@GJXAIOU",[[1,4089,"。"]],[4089,4089],[4090,4090]]],[1540454626418,["gjx16@GJXAIOU",[[-1,4089,"。"]],[4090,4090],[4089,4089]]],[1540454628814,["gjx16@GJXAIOU",[[1,4089,".****"]],[4089,4089],[4092,4092]]],[1540454650973,["gjx16@GJXAIOU",[[1,4092,"使用strstr查找字符串中的特定数组"]],[4092,4092],[4111,4111]]],[1540454653202,["gjx16@GJXAIOU",[[1,4116,"\n"]],[4113,4113],[4114,4114]]],[1540454656980,["gjx16@GJXAIOU",[[1,4114,"```"]],[4114,4114],[4117,4117]]],[1540454657015,["gjx16@GJXAIOU",[[1,4117,"language\n```\n"]],[4117,4117],[4117,4125]]],[1540454658020,["gjx16@GJXAIOU",[[-1,4117,"language"],[1,4125,"c"]],[4117,4125],[4118,4118]]],[1540454658250,["gjx16@GJXAIOU",[[1,4119,"\n"]],[4118,4118],[4119,4119]]],[1540454661665,["gjx16@GJXAIOU",[[1,4120,"\n"]],[4119,4119],[4120,4120]]],[1540454661798,["gjx16@GJXAIOU",[[1,4120,"3"]],[4120,4120],[4121,4121]]],[1540454663090,["gjx16@GJXAIOU",[[-1,4120,"3"]],[4121,4121],[4120,4120]]],[1540454663378,["gjx16@GJXAIOU",[[-1,4120,"\n"]],[4120,4120],[4119,4119]]],[1540454669565,["gjx16@GJXAIOU",[[1,4119,"#include<>stdli"]],[4119,4119],[4134,4134]]],[1540454672036,["gjx16@GJXAIOU",[[-1,4129,"stdli"]],[4134,4134],[4129,4129]]],[1540454676639,["gjx16@GJXAIOU",[[1,4128,"stdlib.h"]],[4128,4128],[4136,4136]]],[1540454679666,["gjx16@GJXAIOU",[[1,4138,"\n"]],[4137,4137],[4138,4138]]],[1540454683547,["gjx16@GJXAIOU",[[1,4138,"#include<>"]],[4138,4138],[4148,4148]]],[1540454685277,["gjx16@GJXAIOU",[[1,4147,"atr"]],[4147,4147],[4150,4150]]],[1540454687434,["gjx16@GJXAIOU",[[-1,4147,"atr"]],[4150,4150],[4147,4147]]],[1540454691059,["gjx16@GJXAIOU",[[1,4147,"string.h"]],[4147,4147],[4155,4155]]],[1540454694643,["gjx16@GJXAIOU",[[1,4157,"\n"]],[4156,4156],[4157,4157]]],[1540454697980,["gjx16@GJXAIOU",[[1,4157,"#ic"]],[4157,4157],[4160,4160]]],[1540454698510,["gjx16@GJXAIOU",[[-1,4159,"c"]],[4160,4160],[4159,4159]]],[1540454699372,["gjx16@GJXAIOU",[[1,4159,"nl"]],[4159,4159],[4161,4161]]],[1540454700018,["gjx16@GJXAIOU",[[-1,4160,"l"]],[4161,4161],[4160,4160]]],[1540454702092,["gjx16@GJXAIOU",[[1,4160,"clude<>"]],[4160,4160],[4167,4167]]],[1540454705683,["gjx16@GJXAIOU",[[1,4166,"atdl"]],[4166,4166],[4170,4170]]],[1540454707249,["gjx16@GJXAIOU",[[-1,4166,"atdl"]],[4170,4170],[4166,4166]]],[1540454710724,["gjx16@GJXAIOU",[[1,4166,"stdl"]],[4166,4166],[4170,4170]]],[1540454711305,["gjx16@GJXAIOU",[[-1,4169,"l"]],[4170,4170],[4169,4169]]],[1540454713531,["gjx16@GJXAIOU",[[1,4169,"io.j"]],[4169,4169],[4173,4173]]],[1540454714401,["gjx16@GJXAIOU",[[-1,4172,"j"]],[4173,4173],[4172,4172]]],[1540454715165,["gjx16@GJXAIOU",[[1,4172,"h"]],[4172,4172],[4173,4173]]],[1540454718509,["gjx16@GJXAIOU",[[1,4175,"\n"]],[4174,4174],[4175,4175]]],[1540454718659,["gjx16@GJXAIOU",[[1,4176,"\n"]],[4175,4175],[4176,4176]]],[1540454718821,["gjx16@GJXAIOU",[[1,4177,"\n"]],[4176,4176],[4177,4177]]],[1540454722980,["gjx16@GJXAIOU",[[1,4177,"int main"]],[4177,4177],[4185,4185]]],[1540454723812,["gjx16@GJXAIOU",[[1,4185,"()"]],[4185,4185],[4187,4187]]],[1540454726580,["gjx16@GJXAIOU",[[1,4186,"void"]],[4186,4186],[4190,4190]]],[1540454728546,["gjx16@GJXAIOU",[[1,4192,"\n"]],[4191,4191],[4192,4192]]],[1540454729701,["gjx16@GJXAIOU",[[1,4192,"{}"]],[4192,4192],[4194,4194]]],[1540454730577,["gjx16@GJXAIOU",[[1,4193,"\n"]],[4193,4193],[4194,4194]]],[1540454730741,["gjx16@GJXAIOU",[[1,4194,"\n"]],[4194,4194],[4195,4195]]],[1540454743774,["gjx16@GJXAIOU",[[1,4194,"  char str[100] = \"\";"]],[4194,4194],[4215,4215]]],[1540454765806,["gjx16@GJXAIOU",[[1,4213,"1234abcd3454343abcd678769878abcd9900abcd77637"]],[4213,4213],[4258,4258]]],[1540454768674,["gjx16@GJXAIOU",[[1,4261,"  \n"]],[4260,4260],[4263,4263]]],[1540454774244,["gjx16@GJXAIOU",[[1,4263,"int *p ;"]],[4263,4263],[4271,4271]]],[1540454775050,["gjx16@GJXAIOU",[[-1,4270,";"]],[4271,4271],[4270,4270]]],[1540454779868,["gjx16@GJXAIOU",[[1,4270," = strstr();"]],[4270,4270],[4282,4282]]],[1540454782087,["gjx16@GJXAIOU",[[1,4280,"str"]],[4280,4280],[4283,4283]]],[1540454789101,["gjx16@GJXAIOU",[[-1,4275,"rstr(str);"]],[4285,4285],[4275,4275]]],[1540454791188,["gjx16@GJXAIOU",[[1,4275,"t"]],[4275,4275],[4276,4276]]],[1540454792074,["gjx16@GJXAIOU",[[-1,4275,"t"]],[4276,4276],[4275,4275]]],[1540454794086,["gjx16@GJXAIOU",[[1,4275,"r;"]],[4275,4275],[4277,4277]]],[1540454795074,["gjx16@GJXAIOU",[[1,4278,"  \n"]],[4277,4277],[4280,4280]]],[1540454797419,["gjx16@GJXAIOU",[[1,4280,"p - "]],[4280,4280],[4284,4284]]],[1540454799053,["gjx16@GJXAIOU",[[-1,4282,"- "]],[4284,4284],[4282,4282]]],[1540454800693,["gjx16@GJXAIOU",[[1,4282,"= "]],[4282,4282],[4284,4284]]],[1540454805994,["gjx16@GJXAIOU",[[-1,4280,"p = "]],[4284,4284],[4280,4280]]],[1540454808613,["gjx16@GJXAIOU",[[1,4280,"do"]],[4280,4280],[4282,4282]]],[1540454813970,["gjx16@GJXAIOU",[[1,4283,"  \n"]],[4282,4282],[4285,4285]]],[1540454815149,["gjx16@GJXAIOU",[[1,4285,"{}"]],[4285,4285],[4287,4287]]],[1540454816764,["gjx16@GJXAIOU",[[1,4286,"\n  \n  \n  "]],[4286,4286],[4295,4295]]],[1540454820912,["gjx16@GJXAIOU",[[1,4296,"while()"]],[4296,4296],[4303,4303]]],[1540454826893,["gjx16@GJXAIOU",[[1,4302,"p ="]],[4302,4302],[4305,4305]]],[1540454827461,["gjx16@GJXAIOU",[[-1,4304,"="]],[4305,4305],[4304,4304]]],[1540454833103,["gjx16@GJXAIOU",[[1,4304,"!= NULL"]],[4304,4304],[4311,4311]]],[1540454836492,["gjx16@GJXAIOU",[[1,4289,"  "]],[4289,4289],[4291,4291]]],[1540454886093,["gjx16@GJXAIOU",[[1,4291,"int num;"]],[4291,4291],[4299,4299]]],[1540454887227,["gjx16@GJXAIOU",[[-1,4298,";"]],[4299,4299],[4298,4298]]],[1540454889108,["gjx16@GJXAIOU",[[1,4298," = 0;"]],[4298,4298],[4303,4303]]],[1540454889540,["gjx16@GJXAIOU",[[1,4306,"  \n  "]],[4303,4303],[4308,4308]]],[1540454892108,["gjx16@GJXAIOU",[[1,4308,"if()"]],[4308,4308],[4312,4312]]],[1540454896550,["gjx16@GJXAIOU",[[1,4311,"p = "]],[4311,4311],[4315,4315]]],[1540454898434,["gjx16@GJXAIOU",[[-1,4313,"= "]],[4315,4315],[4313,4313]]],[1540454903588,["gjx16@GJXAIOU",[[1,4313,"!= NULL"]],[4313,4313],[4320,4320]]],[1540454907884,["gjx16@GJXAIOU",[[1,4324,"      "]],[4322,4322],[4328,4328]]],[1540454909512,["gjx16@GJXAIOU",[[1,4328,"{}"]],[4328,4328],[4330,4330]]],[1540454910902,["gjx16@GJXAIOU",[[1,4329,"\n      \n      \n      "]],[4329,4329],[4350,4350]]],[1540454920183,["gjx16@GJXAIOU",[[1,4336,"    p = strstr()"]],[4336,4336],[4352,4352]]],[1540454936106,["gjx16@GJXAIOU",[[-1,4340,"p = strstr()"]],[4352,4352],[4340,4340]]],[1540454940886,["gjx16@GJXAIOU",[[1,4308,"\n    "]],[4303,4303],[4308,4308]]],[1540454947203,["gjx16@GJXAIOU",[[1,4308,"p = ()"]],[4308,4308],[4314,4314]]],[1540454948025,["gjx16@GJXAIOU",[[-1,4312,"()"]],[4314,4314],[4312,4312]]],[1540454950779,["gjx16@GJXAIOU",[[1,4312,"strstr();"]],[4312,4312],[4321,4321]]],[1540454959758,["gjx16@GJXAIOU",[[1,4319,"p ,\"\""]],[4319,4319],[4324,4324]]],[1540454963291,["gjx16@GJXAIOU",[[1,4323,"ab"]],[4323,4323],[4325,4325]]],[1540454964747,["gjx16@GJXAIOU",[[1,4325,"cd"]],[4325,4325],[4327,4327]]],[1540455007093,["gjx16@GJXAIOU",[[1,4367,"num++;"]],[4367,4367],[4373,4373]]],[1540455007738,["gjx16@GJXAIOU",[[1,4380,"    \n      "]],[4373,4373],[4384,4384]]],[1540455014102,["gjx16@GJXAIOU",[[1,4384,"p = p+"]],[4384,4384],[4390,4390]]],[1540455014636,["gjx16@GJXAIOU",[[-1,4389,"+"]],[4390,4390],[4389,4389]]],[1540455020427,["gjx16@GJXAIOU",[[1,4389," + strlen()l"]],[4389,4389],[4401,4401]]],[1540455021296,["gjx16@GJXAIOU",[[-1,4400,"l"]],[4401,4401],[4400,4400]]],[1540455021869,["gjx16@GJXAIOU",[[1,4400,";"]],[4400,4400],[4401,4401]]],[1540455026579,["gjx16@GJXAIOU",[[1,4399,"str"]],[4399,4399],[4402,4402]]],[1540455033545,["gjx16@GJXAIOU",[[-1,4399,"str"]],[4402,4402],[4399,4399]]],[1540455035059,["gjx16@GJXAIOU",[[1,4399,"\"\""]],[4399,4399],[4401,4401]]],[1540455037994,["gjx16@GJXAIOU",[[1,4400,"abcd"]],[4400,4400],[4404,4404]]],[1540455047809,["gjx16@GJXAIOU",[[1,4427,"    \n  "]],[4424,4424],[4431,4431]]],[1540455050928,["gjx16@GJXAIOU",[[-1,4425,"      "]],[4431,4431],[4425,4425]]],[1540455051393,["gjx16@GJXAIOU",[[-1,4425,"\n"]],[4425,4425],[4424,4424]]],[1540455052513,["gjx16@GJXAIOU",[[-1,4423," "]],[4424,4424],[4423,4423]]],[1540455054139,["gjx16@GJXAIOU",[[1,4423,"sl"]],[4423,4423],[4425,4425]]],[1540455055272,["gjx16@GJXAIOU",[[-1,4423,"sl"]],[4425,4425],[4423,4423]]],[1540455056779,["gjx16@GJXAIOU",[[1,4423,"else"]],[4423,4423],[4427,4427]]],[1540455057681,["gjx16@GJXAIOU",[[1,4430,"    \n  "]],[4427,4427],[4434,4434]]],[1540455059619,["gjx16@GJXAIOU",[[1,4434,"{}"]],[4434,4434],[4436,4436]]],[1540455060853,["gjx16@GJXAIOU",[[1,4435,"\\\n      "]],[4435,4435],[4443,4443]]],[1540455063226,["gjx16@GJXAIOU",[[-1,4437,"      "]],[4443,4443],[4437,4437]]],[1540455063600,["gjx16@GJXAIOU",[[-1,4436,"\n"]],[4437,4437],[4436,4436]]],[1540455064000,["gjx16@GJXAIOU",[[-1,4435,"\\"]],[4436,4436],[4435,4435]]],[1540455070089,["gjx16@GJXAIOU",[[1,4435,"\n      \n      "]],[4435,4435],[4449,4449]]],[1540455075075,["gjx16@GJXAIOU",[[1,4442,"    breal"]],[4442,4442],[4451,4451]]],[1540455075899,["gjx16@GJXAIOU",[[-1,4450,"l"]],[4451,4451],[4450,4450]]],[1540455077083,["gjx16@GJXAIOU",[[1,4450,"k;"]],[4450,4450],[4452,4452]]],[1540455085195,["gjx16@GJXAIOU",[[1,4481,"  \n"]],[4480,4480],[4483,4483]]],[1540455085353,["gjx16@GJXAIOU",[[-1,4481,"  "],[1,4483,"\n"]],[4483,4483],[4482,4482]]],[1540455090843,["gjx16@GJXAIOU",[[1,4482,"  return 0;"]],[4482,4482],[4493,4493]]],[1540455103133,["gjx16@GJXAIOU",[[1,4482,"\n"]],[4481,4481],[4482,4482]]],[1540455108213,["gjx16@GJXAIOU",[[1,4482,"  printf();"]],[4482,4482],[4493,4493]]],[1540455110643,["gjx16@GJXAIOU",[[1,4491,"::"]],[4491,4491],[4493,4493]]],[1540455111352,["gjx16@GJXAIOU",[[-1,4491,"::"]],[4493,4493],[4491,4491]]],[1540455112579,["gjx16@GJXAIOU",[[1,4491,"\"\""]],[4491,4491],[4493,4493]]],[1540455145874,["gjx16@GJXAIOU",[[1,4492,"%d\\n"]],[4492,4492],[4496,4496]]],[1540455155183,["gjx16@GJXAIOU",[[1,4497,",num"]],[4497,4497],[4501,4501]]],[1540455162888,["gjx16@GJXAIOU",[[-1,4119,"#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int *p  = str;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL)\n\n  printf(\"%d\\n\",num);\n  return 0;\n}"]],[4119,4517],[4119,4119]]],[1540455164554,["gjx16@GJXAIOU",[[1,4119,"#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int *p  = str;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL)\n\n  printf(\"%d\\n\",num);\n  return 0;\n}"]],[4119,4119],[4517,4517]]],[1540455264626,["gjx16@GJXAIOU",[[1,4280,"\n  "]],[4277,4277],[4280,4280]]],[1540455264970,["gjx16@GJXAIOU",[[1,4280,"int num = 0;"]],[4280,4280],[4292,4292]]],[1540455267857,["gjx16@GJXAIOU",[[-1,4263,"int"]],[4266,4266],[4263,4263]]],[1540455269763,["gjx16@GJXAIOU",[[1,4263,"char"]],[4263,4263],[4267,4267]]],[1540455278780,["gjx16@GJXAIOU",[[1,4496,";"]],[4496,4496],[4497,4497]]],[1540455285436,["gjx16@GJXAIOU",[[1,4509,"num =- "]],[4509,4509],[4516,4516]]],[1540455286657,["gjx16@GJXAIOU",[[-1,4514,"- "]],[4516,4516],[4514,4514]]],[1540455290773,["gjx16@GJXAIOU",[[1,4547,"\n"]],[4543,4543],[4544,4544]]],[1540455291628,["gjx16@GJXAIOU",[[1,4544,"c"]],[4544,4544],[4545,4545]]],[1540455292281,["gjx16@GJXAIOU",[[-1,4544,"c"]],[4545,4545],[4544,4544]]],[1540455299700,["gjx16@GJXAIOU",[[1,4544,"程序运行结果：``"]],[4544,4544],[4553,4553]]],[1540455303276,["gjx16@GJXAIOU",[[1,4552,"n = 4"]],[4552,4552],[4557,4557]]],[1540455492544,["gjx16@GJXAIOU",[[1,4562,"\n"]],[4559,4559],[4560,4560]]],[1540455492682,["gjx16@GJXAIOU",[[1,4563,"\n"]],[4560,4560],[4561,4561]]],[1540455496437,["gjx16@GJXAIOU",[[1,4561,"****"]],[4561,4561],[4563,4563]]],[1540455497618,["gjx16@GJXAIOU",[[1,4563,"shiyo"]],[4563,4563],[4568,4568]]],[1540455498896,["gjx16@GJXAIOU",[[-1,4563,"shiyo"]],[4568,4568],[4563,4563]]],[1540455503582,["gjx16@GJXAIOU",[[1,4563,"使用while"]],[4563,4563],[4570,4570]]],[1540455506184,["gjx16@GJXAIOU",[[1,4575,"\n"]],[4572,4572],[4573,4573]]],[1540455507972,["gjx16@GJXAIOU",[[1,4573,"```"]],[4573,4573],[4576,4576]]],[1540455508006,["gjx16@GJXAIOU",[[1,4576,"language\n```\n"]],[4576,4576],[4576,4584]]],[1540455508885,["gjx16@GJXAIOU",[[-1,4576,"language"],[1,4584,"c"]],[4576,4584],[4577,4577]]],[1540455509131,["gjx16@GJXAIOU",[[1,4578,"\n"]],[4577,4577],[4578,4578]]],[1540455511805,["gjx16@GJXAIOU",[[1,4578,"itn "]],[4578,4578],[4582,4582]]],[1540455513194,["gjx16@GJXAIOU",[[-1,4579,"tn "]],[4582,4582],[4579,4579]]],[1540455521339,["gjx16@GJXAIOU",[[1,4579,"nt my_strstr()"]],[4579,4579],[4593,4593]]],[1540455524907,["gjx16@GJXAIOU",[[1,4592,"cha *"]],[4592,4592],[4597,4597]]],[1540455526280,["gjx16@GJXAIOU",[[-1,4594,"a *"]],[4597,4597],[4594,4594]]],[1540455528515,["gjx16@GJXAIOU",[[1,4594,"ar*p"]],[4594,4594],[4598,4598]]],[1540455529195,["gjx16@GJXAIOU",[[-1,4596,"*p"]],[4598,4598],[4596,4596]]],[1540455530411,["gjx16@GJXAIOU",[[1,4596," 8"]],[4596,4596],[4598,4598]]],[1540455531211,["gjx16@GJXAIOU",[[-1,4597,"8"]],[4598,4598],[4597,4597]]],[1540455536546,["gjx16@GJXAIOU",[[1,4597,"*p ,int *n"]],[4597,4597],[4607,4607]]],[1540455538804,["gjx16@GJXAIOU",[[1,4609,"\n"]],[4608,4608],[4609,4609]]],[1540455540411,["gjx16@GJXAIOU",[[1,4609,"{}"]],[4609,4609],[4611,4611]]],[1540455541113,["gjx16@GJXAIOU",[[-1,4610,"}"],[1,4611,"\n"]],[4610,4611],[4611,4611]]],[1540455541280,["gjx16@GJXAIOU",[[1,4612,"\n"]],[4611,4611],[4612,4612]]],[1540455541445,["gjx16@GJXAIOU",[[1,4613,"\n"]],[4612,4612],[4613,4613]]],[1540455543291,["gjx16@GJXAIOU",[[1,4612,"}"]],[4612,4612],[4613,4613]]],[1540455545216,["gjx16@GJXAIOU",[[1,4612,"\n"]],[4611,4611],[4612,4612]]],[1540455545385,["gjx16@GJXAIOU",[[1,4613,"\n"]],[4612,4612],[4613,4613]]],[1540455549923,["gjx16@GJXAIOU",[[1,4611,"  int i;"]],[4611,4611],[4619,4619]]],[1540455550672,["gjx16@GJXAIOU",[[-1,4618,";"]],[4619,4619],[4618,4618]]],[1540455552604,["gjx16@GJXAIOU",[[1,4618," = 0;"]],[4618,4618],[4623,4623]]],[1540455553097,["gjx16@GJXAIOU",[[1,4624,"  \n"]],[4623,4623],[4626,4626]]],[1540455557830,["gjx16@GJXAIOU",[[1,4626,"char *tn"]],[4626,4626],[4634,4634]]],[1540455558281,["gjx16@GJXAIOU",[[-1,4633,"n"]],[4634,4634],[4633,4633]]],[1540455561887,["gjx16@GJXAIOU",[[1,4633,"mp = p ;"]],[4633,4633],[4641,4641]]],[1540455562337,["gjx16@GJXAIOU",[[1,4642,"  \n"]],[4641,4641],[4644,4644]]],[1540455565331,["gjx16@GJXAIOU",[[1,4645,"hile()"]],[4645,4645],[4651,4651]]],[1540455568004,["gjx16@GJXAIOU",[[1,4650,"("]],[4650,4650],[4651,4651]]],[1540455568054,["gjx16@GJXAIOU",[[1,4652,")"]],[4651,4651],[4652,4652]]],[1540455575496,["gjx16@GJXAIOU",[[1,4651,"tmp = strsrt"]],[4651,4651],[4663,4663]]],[1540455576378,["gjx16@GJXAIOU",[[-1,4661,"rt"]],[4663,4663],[4661,4661]]],[1540455579182,["gjx16@GJXAIOU",[[1,4661,"tr("]],[4661,4661],[4664,4664]]],[1540455579256,["gjx16@GJXAIOU",[[1,4666,")"]],[4664,4664],[4665,4665]]],[1540455584332,["gjx16@GJXAIOU",[[1,4664,"tmp,\"\""]],[4664,4664],[4670,4670]]],[1540455587099,["gjx16@GJXAIOU",[[1,4669,"abcd"]],[4669,4669],[4673,4673]]],[1540455594891,["gjx16@GJXAIOU",[[1,4676," != NULL"]],[4676,4676],[4684,4684]]],[1540455597625,["gjx16@GJXAIOU",[[1,4686,"  \n"]],[4685,4685],[4688,4688]]],[1540455599790,["gjx16@GJXAIOU",[[1,4688,"  {}"]],[4688,4688],[4692,4692]]],[1540455601204,["gjx16@GJXAIOU",[[1,4691,"\n    \n    \n    "]],[4691,4691],[4706,4706]]],[1540455606359,["gjx16@GJXAIOU",[[1,4696,"  //nen"]],[4696,4696],[4703,4703]]],[1540455607577,["gjx16@GJXAIOU",[[-1,4700,"nen"]],[4703,4703],[4700,4700]]],[1540455622627,["gjx16@GJXAIOU",[[1,4700,"能进来就代表肯定有匹配的字符串"]],[4700,4700],[4715,4715]]],[1540455623496,["gjx16@GJXAIOU",[[1,4720,"  \n    "]],[4715,4715],[4722,4722]]],[1540455683739,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4733,"\n"]],[4644,4644],[4734,4734]]],[1540455683739,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4733,"\n"]],[4734,4734],[4644,4644]]],[1540455624528,["gjx16@GJXAIOU",[[-1,4716,"      "],[1,4722,"\n"]],[4722,4722],[4717,4717]]],[1540455627661,["gjx16@GJXAIOU",[[1,4717,"      、、"]],[4717,4717],[4725,4725]]],[1540455628225,["gjx16@GJXAIOU",[[-1,4723,"、、"]],[4725,4725],[4723,4723]]],[1540455628692,["gjx16@GJXAIOU",[[1,4723,"？、"]],[4723,4723],[4725,4725]]],[1540455629543,["gjx16@GJXAIOU",[[-1,4723,"？、"]],[4725,4725],[4723,4723]]],[1540455640407,["gjx16@GJXAIOU",[[1,4723,"//重新设置起点位置"]],[4723,4723],[4733,4733]]],[1540455641977,["gjx16@GJXAIOU",[[1,4738,"  \n    "]],[4733,4733],[4740,4740]]],[1540455646082,["gjx16@GJXAIOU",[[1,4740,"tmp - "]],[4740,4740],[4746,4746]]],[1540455646834,["gjx16@GJXAIOU",[[-1,4744,"- "]],[4746,4746],[4744,4744]]],[1540455651893,["gjx16@GJXAIOU",[[1,4744,"= tmp _+"]],[4744,4744],[4752,4752]]],[1540455652704,["gjx16@GJXAIOU",[[-1,4750,"_+"]],[4752,4752],[4750,4750]]],[1540455657181,["gjx16@GJXAIOU",[[1,4750,"+ strlen();"]],[4750,4750],[4761,4761]]],[1540455659946,["gjx16@GJXAIOU",[[1,4759,"\"\""]],[4759,4759],[4761,4761]]],[1540455662513,["gjx16@GJXAIOU",[[1,4760,"abcd"]],[4760,4760],[4764,4764]]],[1540455666704,["gjx16@GJXAIOU",[[1,4772,"  \n    "]],[4767,4767],[4774,4774]]],[1540455669938,["gjx16@GJXAIOU",[[1,4774,"i++;"]],[4774,4774],[4778,4778]]],[1540455671369,["gjx16@GJXAIOU",[[1,4783,"  \n    "]],[4778,4778],[4785,4785]]],[1540455672032,["gjx16@GJXAIOU",[[-1,4779,"      "],[1,4785,"\n"]],[4785,4785],[4780,4780]]],[1540455674420,["gjx16@GJXAIOU",[[1,4780,"      id"]],[4780,4780],[4788,4788]]],[1540455674915,["gjx16@GJXAIOU",[[-1,4787,"d"]],[4788,4788],[4787,4787]]],[1540455675919,["gjx16@GJXAIOU",[[1,4787,"f()"]],[4787,4787],[4790,4790]]],[1540455680214,["gjx16@GJXAIOU",[[1,4789,"*tmp = "]],[4789,4789],[4796,4796]]],[1540455681850,["gjx16@GJXAIOU",[[-1,4795," "]],[4796,4796],[4795,4795]]],[1540455682627,["gjx16@GJXAIOU",[[1,4795,"_ "]],[4795,4795],[4797,4797]]],[1540455683128,["gjx16@GJXAIOU",[[-1,4795,"_ "]],[4797,4797],[4795,4795]]],[1540455683579,["gjx16@GJXAIOU",[[1,4795,"-"]],[4795,4795],[4796,4796]]],[1540455743735,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4808,"\n"]],[4644,4644],[4809,4809]]],[1540455743735,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4808,"\n"]],[4809,4809],[4644,4644]]],[1540455683886,["gjx16@GJXAIOU",[[1,4796," "]],[4796,4796],[4797,4797]]],[1540455684476,["gjx16@GJXAIOU",[[-1,4795,"- "]],[4797,4797],[4795,4795]]],[1540455684777,["gjx16@GJXAIOU",[[1,4795,"-="]],[4795,4795],[4797,4797]]],[1540455685571,["gjx16@GJXAIOU",[[-1,4795,"-="]],[4797,4797],[4795,4795]]],[1540455687428,["gjx16@GJXAIOU",[[1,4795,"= 0"]],[4795,4795],[4798,4798]]],[1540455700717,["gjx16@GJXAIOU",[[1,4799,"//如果到结束符"]],[4799,4799],[4807,4807]]],[1540455701571,["gjx16@GJXAIOU",[[1,4812,"  \n    "]],[4807,4807],[4814,4814]]],[1540455703860,["gjx16@GJXAIOU",[[1,4814,"  {}"]],[4814,4814],[4818,4818]]],[1540455705123,["gjx16@GJXAIOU",[[1,4817,"\n        \n        \n        "]],[4817,4817],[4844,4844]]],[1540455713365,["gjx16@GJXAIOU",[[1,4826,"  break:"]],[4826,4826],[4834,4834]]],[1540455714016,["gjx16@GJXAIOU",[[-1,4833,":"]],[4834,4834],[4833,4833]]],[1540455714339,["gjx16@GJXAIOU",[[1,4833,";"]],[4833,4833],[4834,4834]]],[1540455719312,["gjx16@GJXAIOU",[[-1,4835,"        "]],[4843,4843],[4835,4835]]],[1540455719648,["gjx16@GJXAIOU",[[-1,4835,"\n"]],[4835,4835],[4834,4834]]],[1540455803738,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4855,"\n"]],[4644,4644],[4856,4856]]],[1540455803738,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4855,"\n"]],[4856,4856],[4644,4644]]],[1540455751316,["gjx16@GJXAIOU",[[1,4849,"//jian"]],[4849,4849],[4855,4855]]],[1540455752544,["gjx16@GJXAIOU",[[-1,4851,"jian"]],[4855,4855],[4851,4851]]],[1540455755238,["gjx16@GJXAIOU",[[1,4851,"间接赋值"]],[4851,4851],[4855,4855]]],[1540455755729,["gjx16@GJXAIOU",[[1,4860,"\n    "]],[4855,4855],[4860,4860]]],[1540455764884,["gjx16@GJXAIOU",[[1,4860,"*n = o"]],[4860,4860],[4866,4866]]],[1540455765635,["gjx16@GJXAIOU",[[-1,4865,"o"]],[4866,4866],[4865,4865]]],[1540455767443,["gjx16@GJXAIOU",[[1,4865,"i;"]],[4865,4865],[4867,4867]]],[1540455767938,["gjx16@GJXAIOU",[[1,4872,"\n    "]],[4867,4867],[4872,4872]]],[1540455771067,["gjx16@GJXAIOU",[[1,4872,"return 0;"]],[4872,4872],[4881,4881]]],[1540455781528,["gjx16@GJXAIOU",[[-1,4846,"   //间接赋值\n    *n = i;\n    return 0;"]],[4846,4881],[4846,4846]]],[1540455787624,["gjx16@GJXAIOU",[[1,4853,"       //间接赋值\n    *n = i;\n    return 0;"]],[4853,4853],[4892,4892]]],[1540455790544,["gjx16@GJXAIOU",[[-1,4857,"   "]],[4860,4860],[4857,4857]]],[1540455793393,["gjx16@GJXAIOU",[[1,4894,"\n"]],[4893,4893],[4894,4894]]],[1540455793513,["gjx16@GJXAIOU",[[1,4895,"\n"]],[4894,4894],[4895,4895]]],[1540455793625,["gjx16@GJXAIOU",[[1,4896,"\n"]],[4895,4895],[4896,4896]]],[1540455796403,["gjx16@GJXAIOU",[[1,4896,"int main()"]],[4896,4896],[4906,4906]]],[1540455798713,["gjx16@GJXAIOU",[[1,4907,"\n"]],[4906,4906],[4907,4907]]],[1540455799923,["gjx16@GJXAIOU",[[1,4907,"{}"]],[4907,4907],[4909,4909]]],[1540455800874,["gjx16@GJXAIOU",[[1,4908,"\n"]],[4908,4908],[4909,4909]]],[1540455801040,["gjx16@GJXAIOU",[[1,4909,"\n"]],[4909,4909],[4910,4910]]],[1540455801185,["gjx16@GJXAIOU",[[1,4910,"\n"]],[4910,4910],[4911,4911]]],[1540455801297,["gjx16@GJXAIOU",[[1,4911,"\n"]],[4911,4911],[4912,4912]]],[1540455863741,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4890,"\n"],[-1,4893,"`"],[1,4914,"`"]],[4644,4644],[4915,4915]]],[1540455863741,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4890,"\n"],[1,4894,"`"],[-1,4914,"`"]],[4915,4915],[4644,4644]]],[1540455813967,["gjx16@GJXAIOU",[[1,4909,"  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;"]],[4909,4909],[5008,5008]]],[1540455832585,["gjx16@GJXAIOU",[[-1,4978,"char *p  = str;"]],[4983,4993],[4978,4978]]],[1540455835997,["gjx16@GJXAIOU",[[1,4978,"int "]],[4978,4978],[4982,4982]]],[1540456403751,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4890,"\n"],[-1,4893,"`"],[1,5002,"`"]],[4644,4644],[5003,5003]]],[1540456403751,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4890,"\n"],[1,4894,"`"],[-1,5002,"`"]],[5003,5003],[4644,4644]]],[1540456396282,["gjx16@GJXAIOU",[[1,4982,"ret = 0;"]],[4982,4982],[4990,4990]]],[1540456401201,["gjx16@GJXAIOU",[[1,5008,"\n"]],[5006,5006],[5007,5007]]],[1540456403589,["gjx16@GJXAIOU",[[1,5007,"  re"]],[5007,5007],[5011,5011]]],[1540456463751,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4890,"\n"],[-1,4893,"`"],[1,5015,"`"]],[4644,4644],[5016,5016]]],[1540456463751,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4890,"\n"],[1,4894,"`"],[-1,5015,"`"]],[5016,5016],[4644,4644]]],[1540456419676,["gjx16@GJXAIOU",[[1,5012," = my_strstr();"]],[5012,5012],[5027,5027]]],[1540456422162,["gjx16@GJXAIOU",[[1,5025,"["]],[5025,5025],[5026,5026]]],[1540456423087,["gjx16@GJXAIOU",[[-1,5025,"["]],[5026,5026],[5025,5025]]],[1540456432418,["gjx16@GJXAIOU",[[1,5025,"p,&n"]],[5025,5025],[5029,5029]]],[1540456436744,["gjx16@GJXAIOU",[[1,5032,"  \n"]],[5031,5031],[5034,5034]]],[1540456438699,["gjx16@GJXAIOU",[[1,5034,"if()"]],[5034,5034],[5038,5038]]],[1540456445003,["gjx16@GJXAIOU",[[1,5037,"ret 1"]],[5037,5037],[5042,5042]]],[1540456446007,["gjx16@GJXAIOU",[[-1,5041,"1"]],[5042,5042],[5041,5041]]],[1540456449737,["gjx16@GJXAIOU",[[1,5041,"!=  "]],[5041,5041],[5045,5045]]],[1540456450575,["gjx16@GJXAIOU",[[-1,5044," "]],[5045,5045],[5044,5044]]],[1540456450885,["gjx16@GJXAIOU",[[1,5044,"0"]],[5044,5044],[5045,5045]]],[1540456453577,["gjx16@GJXAIOU",[[1,5047,"  \n"]],[5046,5046],[5049,5049]]],[1540456455306,["gjx16@GJXAIOU",[[1,5049,"{}"]],[5049,5049],[5051,5051]]],[1540456456554,["gjx16@GJXAIOU",[[1,5050,"\n  \n  "]],[5050,5050],[5056,5056]]],[1540456462728,["gjx16@GJXAIOU",[[1,5053,"  "]],[5053,5053],[5055,5055]]],[1540456523753,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4890,"\n"],[-1,4893,"`"],[-1,5011,"\n"],[1,5012,"t"],[1,5060,"\n"],[1,5062,"`"]],[4644,4644],[5063,5063]]],[1540456523753,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4890,"\n"],[1,4894,"`"],[1,5011,"\n"],[-1,5011,"t"],[-1,5060,"\n"],[-1,5063,"`"]],[5063,5063],[4644,4644]]],[1540456466964,["gjx16@GJXAIOU",[[1,5055,"return ret;"]],[5055,5055],[5066,5066]]],[1540456471774,["gjx16@GJXAIOU",[[1,5071,"  \n"]],[5070,5070],[5073,5073]]],[1540456474196,["gjx16@GJXAIOU",[[1,5073,"print "]],[5073,5073],[5079,5079]]],[1540456474975,["gjx16@GJXAIOU",[[-1,5078," "]],[5079,5079],[5078,5078]]],[1540456476425,["gjx16@GJXAIOU",[[1,5078,"f();"]],[5078,5078],[5082,5082]]],[1540456479138,["gjx16@GJXAIOU",[[1,5080,"\"\""]],[5080,5080],[5082,5082]]],[1540456483619,["gjx16@GJXAIOU",[[1,5081,"n = "]],[5081,5081],[5085,5085]]],[1540456486046,["gjx16@GJXAIOU",[[-1,5082," = "]],[5085,5085],[5082,5082]]],[1540456494328,["gjx16@GJXAIOU",[[1,5082,"um = %d\\n"]],[5082,5082],[5091,5091]]],[1540456498545,["gjx16@GJXAIOU",[[1,5092,",num"]],[5092,5092],[5096,5096]]],[1540456503471,["gjx16@GJXAIOU",[[1,5099,"  \n"]],[5098,5098],[5101,5101]]],[1540456507496,["gjx16@GJXAIOU",[[1,5101,"return 0;"]],[5101,5101],[5110,5110]]],[1540456510568,["gjx16@GJXAIOU",[[-1,5111,"\n"]],[5111,5111],[5110,5110]]],[1540456516391,["gjx16@GJXAIOU",[[-1,4845," "]],[4846,4846],[4845,4845]]],[1540456516541,["gjx16@GJXAIOU",[[-1,4845,"\n"]],[4845,4845],[4844,4844]]],[1540457003782,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"]],[4644,4644],[5111,5111]]],[1540457003782,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"]],[5111,5111],[4644,4644]]],[1540457003526,["gjx16@GJXAIOU",[[1,5118,"\n"]],[5114,5114],[5115,5115]]],[1540457003664,["gjx16@GJXAIOU",[[1,5119,"\n"]],[5115,5115],[5116,5116]]],[1540457063776,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[1,5120,"~~"]],[4644,4644],[5122,5122]]],[1540457063776,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[-1,5120,"~~"]],[5122,5122],[4644,4644]]],[1540457003913,["gjx16@GJXAIOU",[[1,5121,"\n"]],[5117,5117],[5118,5118]]],[1540457013331,["gjx16@GJXAIOU",[[1,5118,"4.****"]],[5118,5118],[5122,5122]]],[1540457014528,["gjx16@GJXAIOU",[[1,5122,"yige"]],[5122,5122],[5126,5126]]],[1540457015680,["gjx16@GJXAIOU",[[-1,5122,"yige"]],[5126,5126],[5122,5122]]],[1540457027980,["gjx16@GJXAIOU",[[1,5122,"一个字符串两头均为空格，求中奖"]],[5122,5122],[5137,5137]]],[1540457028798,["gjx16@GJXAIOU",[[-1,5135,"中奖"]],[5137,5137],[5135,5135]]],[1540457041075,["gjx16@GJXAIOU",[[1,5135,"中间一部分的字符长度"]],[5135,5135],[5145,5145]]],[1540457043086,["gjx16@GJXAIOU",[[1,5151,"\n"]],[5147,5147],[5148,5148]]],[1540457055997,["gjx16@GJXAIOU",[[1,5152,"\n"]],[5148,5148],[5149,5149]]],[1540457057409,["gjx16@GJXAIOU",[[1,5149,"```"]],[5149,5149],[5152,5152]]],[1540457057444,["gjx16@GJXAIOU",[[1,5152,"language\n```\n"]],[5152,5152],[5152,5160]]],[1540457058463,["gjx16@GJXAIOU",[[-1,5152,"language"],[1,5160,"c"]],[5152,5160],[5153,5153]]],[1540457058664,["gjx16@GJXAIOU",[[1,5154,"\n"]],[5153,5153],[5154,5154]]],[1540457063148,["gjx16@GJXAIOU",[[1,5154,"int fun()"]],[5154,5154],[5163,5163]]],[1540457123784,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5168,"视"],[1,5172,"\n~~视"]],[4644,4644],[5176,5176]]],[1540457123784,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5168,"视"],[-1,5171,"\n~~视"]],[5176,5176],[4644,4644]]],[1540457065322,["gjx16@GJXAIOU",[[1,5162,"in"]],[5162,5162],[5164,5164]]],[1540457065845,["gjx16@GJXAIOU",[[-1,5162,"in"]],[5164,5164],[5162,5162]]],[1540457073472,["gjx16@GJXAIOU",[[1,5162,"char *p ,int *n"]],[5162,5162],[5177,5177]]],[1540457075414,["gjx16@GJXAIOU",[[1,5179,"\n"]],[5178,5178],[5179,5179]]],[1540457076824,["gjx16@GJXAIOU",[[1,5179,"{}"]],[5179,5179],[5181,5181]]],[1540457077422,["gjx16@GJXAIOU",[[1,5180,"\n"]],[5180,5180],[5181,5181]]],[1540457077583,["gjx16@GJXAIOU",[[1,5181,"\n"]],[5181,5181],[5182,5182]]],[1540457081251,["gjx16@GJXAIOU",[[1,5181,"  if()"]],[5181,5181],[5187,5187]]],[1540457101121,["gjx16@GJXAIOU",[[1,5186,"p == NULL || n ++"]],[5186,5186],[5203,5203]]],[1540457101805,["gjx16@GJXAIOU",[[-1,5202,"+"]],[5203,5203],[5202,5202]]],[1540457102265,["gjx16@GJXAIOU",[[1,5202,"=="]],[5202,5202],[5204,5204]]],[1540457103136,["gjx16@GJXAIOU",[[-1,5201,"+=="]],[5204,5204],[5201,5201]]],[1540457105541,["gjx16@GJXAIOU",[[1,5201,"==NULL"]],[5201,5201],[5207,5207]]],[1540457107324,["gjx16@GJXAIOU",[[1,5203," "]],[5203,5203],[5204,5204]]],[1540457109761,["gjx16@GJXAIOU",[[1,5210,"  \n"]],[5209,5209],[5212,5212]]],[1540457112555,["gjx16@GJXAIOU",[[1,5212,"  {}"]],[5212,5212],[5216,5216]]],[1540457113669,["gjx16@GJXAIOU",[[1,5215,"\n    \n    "]],[5215,5215],[5225,5225]]],[1540457122651,["gjx16@GJXAIOU",[[1,5220,"    return -1;"]],[5220,5220],[5234,5234]]],[1540457183785,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5247,"视"],[1,5251,"\n~~视"]],[4644,4644],[5255,5255]]],[1540457183785,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5247,"视"],[-1,5250,"\n~~视"]],[5255,5255],[4644,4644]]],[1540457149734,["gjx16@GJXAIOU",[[1,5241,"    \n"]],[5240,5240],[5245,5245]]],[1540457150494,["gjx16@GJXAIOU",[[-1,5241,"    "],[1,5245,"\n"]],[5245,5245],[5242,5242]]],[1540457158864,["gjx16@GJXAIOU",[[1,5242,"  itn begin = 0;"]],[5242,5242],[5258,5258]]],[1540457159606,["gjx16@GJXAIOU",[[1,5259,"  \n"]],[5258,5258],[5261,5261]]],[1540457163688,["gjx16@GJXAIOU",[[1,5261,"int end = "]],[5261,5261],[5271,5271]]],[1540457483791,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5278,"视"],[1,5282,"\n~~视"]],[4644,4644],[5286,5286]]],[1540457483791,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5278,"视"],[-1,5281,"\n~~视"]],[5286,5286],[4644,4644]]],[1540457452907,["gjx16@GJXAIOU",[[1,5271,"strlwn()"]],[5271,5271],[5279,5279]]],[1540457454924,["gjx16@GJXAIOU",[[-1,5275,"wn()"]],[5279,5279],[5275,5275]]],[1540457458294,["gjx16@GJXAIOU",[[1,5275,"en();"]],[5275,5275],[5280,5280]]],[1540457460104,["gjx16@GJXAIOU",[[1,5278,"p"]],[5278,5278],[5279,5279]]],[1540457462157,["gjx16@GJXAIOU",[[1,5282,"  \n"]],[5281,5281],[5284,5284]]],[1540457663793,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5291,"视"],[1,5295,"\n~~视"]],[4644,4644],[5299,5299]]],[1540457663793,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5291,"视"],[-1,5294,"\n~~视"]],[5299,5299],[4644,4644]]],[1540457638845,["gjx16@GJXAIOU",[[1,5285,"  \n"]],[5281,5281],[5284,5284]]],[1540457641126,["gjx16@GJXAIOU",[[-1,5282,"  "],[1,5284,"\n"]],[5284,5284],[5283,5283]]],[1540457642440,["gjx16@GJXAIOU",[[1,5283,"?/"]],[5283,5283],[5285,5285]]],[1540457643246,["gjx16@GJXAIOU",[[-1,5283,"?/"]],[5285,5285],[5283,5283]]],[1540457651139,["gjx16@GJXAIOU",[[1,5283,"//从左边开始"]],[5283,5283],[5290,5290]]],[1540457651608,["gjx16@GJXAIOU",[[1,5291,"\n"]],[5290,5290],[5291,5291]]],[1540457655361,["gjx16@GJXAIOU",[[1,5291,"、、"]],[5291,5291],[5293,5293]]],[1540457655823,["gjx16@GJXAIOU",[[-1,5291,"、、"]],[5293,5293],[5291,5291]]],[1540457656603,["gjx16@GJXAIOU",[[1,5291,"？、"]],[5291,5291],[5293,5293]]],[1540457658141,["gjx16@GJXAIOU",[[-1,5291,"？、"]],[5293,5293],[5291,5291]]],[1540457658809,["gjx16@GJXAIOU",[[1,5291,"、、"]],[5291,5291],[5293,5293]]],[1540457723793,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5303,"视"],[1,5307,"\n~~视"]],[4644,4644],[5311,5311]]],[1540457723793,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5303,"视"],[-1,5306,"\n~~视"]],[5311,5311],[4644,4644]]],[1540457684526,["gjx16@GJXAIOU",[[-1,5291,"、、"]],[5293,5293],[5291,5291]]],[1540457685113,["gjx16@GJXAIOU",[[1,5291,"、、"]],[5291,5291],[5293,5293]]],[1540457685573,["gjx16@GJXAIOU",[[-1,5291,"、、"]],[5293,5293],[5291,5291]]],[1540457702857,["gjx16@GJXAIOU",[[1,5291,"//如果当前字符为空，而且没有结束"]],[5291,5291],[5308,5308]]],[1540457704351,["gjx16@GJXAIOU",[[1,5309,"\n"]],[5308,5308],[5309,5309]]],[1540457709040,["gjx16@GJXAIOU",[[1,5309,"while()"]],[5309,5309],[5316,5316]]],[1540457718183,["gjx16@GJXAIOU",[[1,5315,"p "]],[5315,5315],[5317,5317]]],[1540457719516,["gjx16@GJXAIOU",[[-1,5316," "]],[5317,5317],[5316,5316]]],[1540457723062,["gjx16@GJXAIOU",[[1,5316,"[begin"]],[5316,5316],[5322,5322]]],[1540457783795,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5333,"视"],[1,5337,"\n~~视"]],[4644,4644],[5341,5341]]],[1540457783795,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5333,"视"],[-1,5336,"\n~~视"]],[5341,5341],[4644,4644]]],[1540457723998,["gjx16@GJXAIOU",[[1,5322,"["]],[5322,5322],[5323,5323]]],[1540457724780,["gjx16@GJXAIOU",[[-1,5322,"["]],[5323,5323],[5322,5322]]],[1540457752200,["gjx16@GJXAIOU",[[1,5322,"] == ' ' &&p "]],[5322,5322],[5335,5335]]],[1540457752979,["gjx16@GJXAIOU",[[-1,5333,"p "]],[5335,5335],[5333,5333]]],[1540457754321,["gjx16@GJXAIOU",[[1,5333," p "]],[5333,5333],[5336,5336]]],[1540457755076,["gjx16@GJXAIOU",[[-1,5335," "]],[5336,5336],[5335,5335]]],[1540457765263,["gjx16@GJXAIOU",[[1,5335,"[begin] != 0"]],[5335,5335],[5347,5347]]],[1540457767605,["gjx16@GJXAIOU",[[1,5349,"\n"]],[5348,5348],[5349,5349]]],[1540457770618,["gjx16@GJXAIOU",[[1,5349,"  {}"]],[5349,5349],[5353,5353]]],[1540457771613,["gjx16@GJXAIOU",[[1,5352,"\n  \n  "]],[5352,5352],[5358,5358]]],[1540457782256,["gjx16@GJXAIOU",[[1,5355,"  begin++;"]],[5355,5355],[5365,5365]]],[1540457843799,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5379,"视"],[1,5383,"\n~~视"]],[4644,4644],[5387,5387]]],[1540457843799,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5379,"视"],[-1,5382,"\n~~视"]],[5387,5387],[4644,4644]]],[1540457794868,["gjx16@GJXAIOU",[[1,5365,"//位置往后移动一位"]],[5365,5365],[5375,5375]]],[1540457797941,["gjx16@GJXAIOU",[[1,5383,"  \n"]],[5379,5379],[5382,5382]]],[1540457799190,["gjx16@GJXAIOU",[[-1,5380,"  "],[1,5382,"\n"]],[5382,5382],[5381,5381]]],[1540457803074,["gjx16@GJXAIOU",[[1,5381,"  、、"]],[5381,5381],[5385,5385]]],[1540457804134,["gjx16@GJXAIOU",[[-1,5383,"、、"]],[5385,5385],[5383,5383]]],[1540457820030,["gjx16@GJXAIOU",[[1,5383,"//如果当前字符为空，而且没有结束"]],[5383,5383],[5400,5400]]],[1540457820616,["gjx16@GJXAIOU",[[1,5404,"  \n"]],[5400,5400],[5403,5403]]],[1540457825995,["gjx16@GJXAIOU",[[1,5403,"while()"]],[5403,5403],[5410,5410]]],[1540457829176,["gjx16@GJXAIOU",[[1,5409,"p "]],[5409,5409],[5411,5411]]],[1540457829925,["gjx16@GJXAIOU",[[-1,5410," "]],[5411,5411],[5410,5410]]],[1540457833261,["gjx16@GJXAIOU",[[1,5410,"[end[]"]],[5410,5410],[5416,5416]]],[1540457834320,["gjx16@GJXAIOU",[[-1,5414,"[]"]],[5416,5416],[5414,5414]]],[1540457834650,["gjx16@GJXAIOU",[[1,5414,"["]],[5414,5414],[5415,5415]]],[1540457835430,["gjx16@GJXAIOU",[[-1,5414,"["]],[5415,5415],[5414,5414]]],[1540457841079,["gjx16@GJXAIOU",[[1,5414,"] == ''"]],[5414,5414],[5421,5421]]],[1540457843137,["gjx16@GJXAIOU",[[1,5420," "]],[5420,5420],[5421,5421]]],[1540457903798,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5433,"视"],[1,5437,"\n~~视"]],[4644,4644],[5441,5441]]],[1540457903798,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5433,"视"],[-1,5436,"\n~~视"]],[5441,5441],[4644,4644]]],[1540457845679,["gjx16@GJXAIOU",[[-1,5415," == ' '"]],[5422,5422],[5415,5415]]],[1540457847175,["gjx16@GJXAIOU",[[1,5416,")"]],[5415,5415],[5416,5416]]],[1540457850745,["gjx16@GJXAIOU",[[1,5409,"("]],[5409,5409],[5410,5410]]],[1540457855903,["gjx16@GJXAIOU",[[1,5409,"str"]],[5409,5409],[5412,5412]]],[1540457859823,["gjx16@GJXAIOU",[[-1,5409,"str"]],[5412,5412],[5409,5409]]],[1540457864584,["gjx16@GJXAIOU",[[1,5409,"isspace"]],[5409,5409],[5416,5416]]],[1540457881486,["gjx16@GJXAIOU",[[1,5424," && p[begin"]],[5424,5424],[5435,5435]]],[1540457884107,["gjx16@GJXAIOU",[[-1,5430,"begin"]],[5435,5435],[5430,5430]]],[1540457890190,["gjx16@GJXAIOU",[[1,5430,"end] != 0"]],[5430,5430],[5439,5439]]],[1540457892613,["gjx16@GJXAIOU",[[1,5444,"  \n"]],[5440,5440],[5443,5443]]],[1540457896153,["gjx16@GJXAIOU",[[1,5443,"  {}"]],[5443,5443],[5447,5447]]],[1540457897389,["gjx16@GJXAIOU",[[1,5446,"\n    \n    "]],[5446,5446],[5456,5456]]],[1540457902495,["gjx16@GJXAIOU",[[1,5451,"    end__"]],[5451,5451],[5460,5460]]],[1540457903380,["gjx16@GJXAIOU",[[-1,5458,"__"]],[5460,5460],[5458,5458]]],[1540457963806,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5474,"视"],[1,5478,"\n~~视"]],[4644,4644],[5482,5482]]],[1540457963806,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5474,"视"],[-1,5477,"\n~~视"]],[5482,5482],[4644,4644]]],[1540457924360,["gjx16@GJXAIOU",[[1,5458,"--;//往左移动"]],[5458,5458],[5467,5467]]],[1540457934216,["gjx16@GJXAIOU",[[1,5473,"、"]],[5473,5473],[5474,5474]]],[1540457934368,["gjx16@GJXAIOU",[[1,5477,"  \n  "]],[5474,5474],[5479,5479]]],[1540457935915,["gjx16@GJXAIOU",[[-1,5475,"    "]],[5479,5479],[5475,5475]]],[1540457936077,["gjx16@GJXAIOU",[[-1,5475,"\n"]],[5475,5475],[5474,5474]]],[1540457936235,["gjx16@GJXAIOU",[[-1,5473,"、"]],[5474,5474],[5473,5473]]],[1540457937055,["gjx16@GJXAIOU",[[1,5476,"  \n  "]],[5473,5473],[5478,5478]]],[1540457937188,["gjx16@GJXAIOU",[[-1,5474,"    "],[1,5478,"\n"]],[5478,5478],[5475,5475]]],[1540457940785,["gjx16@GJXAIOU",[[1,5475,"  *你"]],[5475,5475],[5479,5479]]],[1540457942571,["gjx16@GJXAIOU",[[-1,5477,"*你"]],[5479,5479],[5477,5477]]],[1540457953896,["gjx16@GJXAIOU",[[1,5477,"*n = end -begin +1;"]],[5477,5477],[5496,5496]]],[1540457954499,["gjx16@GJXAIOU",[[1,5500,"  \n"]],[5496,5496],[5499,5499]]],[1540457958823,["gjx16@GJXAIOU",[[1,5499,"return 0;"]],[5499,5499],[5508,5508]]],[1540458023814,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5518,"视"],[1,5522,"\n~~视"]],[4644,4644],[5526,5526]]],[1540458023814,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5518,"视"],[-1,5521,"\n~~视"]],[5526,5526],[4644,4644]]],[1540457964773,["gjx16@GJXAIOU",[[1,5514,"\n"]],[5513,5513],[5514,5514]]],[1540457964924,["gjx16@GJXAIOU",[[1,5515,"\n"]],[5514,5514],[5515,5515]]],[1540457965054,["gjx16@GJXAIOU",[[1,5516,"\n"]],[5515,5515],[5516,5516]]],[1540457965181,["gjx16@GJXAIOU",[[1,5517,"\n"]],[5516,5516],[5517,5517]]],[1540457968822,["gjx16@GJXAIOU",[[1,5517,"int main()"]],[5517,5517],[5527,5527]]],[1540457970181,["gjx16@GJXAIOU",[[1,5528,"\n"]],[5527,5527],[5528,5528]]],[1540457971374,["gjx16@GJXAIOU",[[1,5528,"{}"]],[5528,5528],[5530,5530]]],[1540457972367,["gjx16@GJXAIOU",[[1,5529,"\n"]],[5529,5529],[5530,5530]]],[1540457972548,["gjx16@GJXAIOU",[[1,5530,"\n"]],[5530,5530],[5531,5531]]],[1540457972694,["gjx16@GJXAIOU",[[1,5531,"\n"]],[5531,5531],[5532,5532]]],[1540457986024,["gjx16@GJXAIOU",[[1,5530,"  char *p = \"\";"]],[5530,5530],[5545,5545]]],[1540457995142,["gjx16@GJXAIOU",[[1,5543,"    abcdefg       "]],[5543,5543],[5561,5561]]],[1540457997268,["gjx16@GJXAIOU",[[1,5564,"  \n"]],[5563,5563],[5566,5566]]],[1540458135658,[null,[[-1,4644,"\n"],[1,4645,"w"],[1,4888,"\n"],[-1,4891,"`"],[1,4892,""],[-1,5009,"\n"],[1,5010,"t"],[1,5109,"}"],[1,5110,"`"],[-1,5116,"~~"],[-1,5574,"视"],[1,5578,"\n~~视"]],[4644,4644],[5582,5582]]],[1540458135658,[null,[[1,4644,"\n"],[-1,4644,"w"],[-1,4888,"\n"],[1,4892,"`"],[-1,4892,""],[1,5009,"\n"],[-1,5009,"t"],[-1,5109,"}"],[-1,5111,"`"],[1,5118,"~~"],[1,5574,"视"],[-1,5577,"\n~~视"]],[5582,5582],[4644,4644]]],[1540458110779,["gjx16@GJXAIOU",[[1,5567,"21"]],[5567,5567],[5569,5569]]],[1540458126187,["gjx16@GJXAIOU",[[-1,5567,"21"]],[5569,5569],[5567,5567]]],[1540458133195,["gjx16@GJXAIOU",[[1,5567,"![11]($resource/11.png)"]],[5567,5567],[5591,5591]]]],null,"gjx16@GJXAIOU"],["fb3b2d9d-3cef-42cf-be78-1fe7106c91be",1540511926593,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数据模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n\n```c\nint fun(char *p ,int *n)\n{\n  if(p == NULL || n == NULL)\n    {\n        return -1;\n    }\n\n  itn begin = 0;\n  int end = strlen(p);\n\n//从左边开始\n//如果当前字符为空，而且没有结束\nwhile(p[begin] == ' ' && p[begin] != 0)\n  {\n    begin++;//位置往后移动一位\n  }\n\n  //如果当前字符为空，而且没有结束\n  while(isspace(p[end]) && p[end] != 0)\n    {\n        end--;//往左移动\n    }\n\n  *n = end -begin +1;\n  return 0;\n  \n}\n\n\n\nint main()\n{\n  char *p = \"    abcdefg       \";\n  \n![11]($resource/11.png)\n}\n```\n\n\n\n\n~~视频第15~~",[[1540511905295,["gjx16@GJXAIOU",[[-1,5567,"![11]($resource/11.png)"]],[5567,5590],[5567,5567]]],[1540511907093,["gjx16@GJXAIOU",[[1,5575,"![11]($resource/11.png)"]],[5575,5575],[5598,5598]]],[1540511935792,["gjx16@GJXAIOU",[[1,5566,"int ret = 0;"]],[5566,5566],[5578,5578]]],[1540511936446,["gjx16@GJXAIOU",[[1,5582,"  \n"]],[5578,5578],[5581,5581]]],[1540511941856,["gjx16@GJXAIOU",[[1,5581,"int n = 0;"]],[5581,5581],[5591,5591]]],[1540511942174,["gjx16@GJXAIOU",[[1,5595,"  \n"]],[5591,5591],[5594,5594]]],[1540511945495,["gjx16@GJXAIOU",[[-1,5592,"  "],[1,5594,"\n"]],[5594,5594],[5593,5593]]],[1540511954505,["gjx16@GJXAIOU",[[1,5593,"  ret = fun();"]],[5593,5593],[5607,5607]]],[1540511962057,["gjx16@GJXAIOU",[[1,5605,"p,&n"]],[5605,5605],[5609,5609]]],[1540511973515,["gjx16@GJXAIOU",[[1,5615,"  \n"]],[5611,5611],[5614,5614]]],[1540511976484,["gjx16@GJXAIOU",[[1,5614,"if()"]],[5614,5614],[5618,5618]]],[1540511985011,["gjx16@GJXAIOU",[[1,5617,"ret != "]],[5617,5617],[5624,5624]]],[1540512045556,[null,[[-1,5579,"\n}"],[1,5581,"  "],[1,5628,"\n\n}"]],[5579,5579],[5631,5631]]],[1540512045556,[null,[[1,5579,"\n}"],[-1,5579,"  "],[-1,5628,"\n\n}"]],[5631,5631],[5579,5579]]],[1540511987592,["gjx16@GJXAIOU",[[1,5624,"0"]],[5624,5624],[5625,5625]]],[1540511993195,["gjx16@GJXAIOU",[[1,5630,"  \n"]],[5626,5626],[5629,5629]]],[1540511994465,["gjx16@GJXAIOU",[[1,5629,"{}"]],[5629,5629],[5631,5631]]],[1540511996044,["gjx16@GJXAIOU",[[1,5630,"\n  \n  "]],[5630,5630],[5636,5636]]],[1540512000036,["gjx16@GJXAIOU",[[1,5629,"  "]],[5629,5629],[5631,5631]]],[1540512001637,["gjx16@GJXAIOU",[[1,5638,"  "]],[5638,5638],[5640,5640]]],[1540512010303,["gjx16@GJXAIOU",[[1,5635,"    ret"]],[5635,5635],[5642,5642]]],[1540512011445,["gjx16@GJXAIOU",[[-1,5641,"t"]],[5642,5642],[5641,5641]]],[1540512017263,["gjx16@GJXAIOU",[[1,5641,"turn ret;"]],[5641,5641],[5650,5650]]],[1540512023837,["gjx16@GJXAIOU",[[1,5659,"  \n  "]],[5656,5656],[5661,5661]]],[1540512024465,["gjx16@GJXAIOU",[[-1,5657,"    "],[1,5661,"\n"]],[5661,5661],[5658,5658]]],[1540512027905,["gjx16@GJXAIOU",[[1,5658,"  pritnf"]],[5658,5658],[5666,5666]]],[1540512029484,["gjx16@GJXAIOU",[[-1,5663,"tnf"]],[5666,5666],[5663,5663]]],[1540512030447,["gjx16@GJXAIOU",[[1,5663,"nf"]],[5663,5663],[5665,5665]]],[1540512030904,["gjx16@GJXAIOU",[[-1,5664,"f"]],[5665,5665],[5664,5664]]],[1540512032951,["gjx16@GJXAIOU",[[1,5664,"tf();"]],[5664,5664],[5669,5669]]],[1540512036280,["gjx16@GJXAIOU",[[1,5667,"\"\""]],[5667,5667],[5669,5669]]],[1540512043063,["gjx16@GJXAIOU",[[1,5668,"n = %d\\n"]],[5668,5668],[5676,5676]]],[1540512069391,[null,[[-1,5579,"\n}"],[1,5581,"  "],[1,5682,"\n\n}"]],[5579,5579],[5685,5685]]],[1540512069391,[null,[[1,5579,"\n}"],[-1,5579,"  "],[-1,5682,"\n\n}"]],[5685,5685],[5579,5579]]],[1540512047327,["gjx16@GJXAIOU",[[1,5677,",n"]],[5677,5677],[5679,5679]]],[1540512051624,["gjx16@GJXAIOU",[[1,5685,"  \n"]],[5681,5681],[5684,5684]]],[1540512055760,["gjx16@GJXAIOU",[[1,5684,"return 0;"]],[5684,5684],[5693,5693]]],[1540512065677,["gjx16@GJXAIOU",[[-1,5705,"![11]($resource/11.png)"]],[5728,5728],[5705,5705]]],[1540512067300,["gjx16@GJXAIOU",[[-1,5707,"\n"]],[5705,5705],[5704,5704]]],[1540512129414,[null,[[-1,5579,"\n}"],[1,5581,"  "],[1,5697,"\n}\n"],[-1,5702,"![1"],[1,5705,"\n\n"],[1,5707,"视"]],[5579,5579],[5708,5708]]],[1540512129414,[null,[[1,5579,"\n}"],[-1,5579,"  "],[-1,5697,"\n}\n"],[1,5705,"![1"],[-1,5705,"\n\n"],[-1,5709,"视"]],[5708,5708],[5579,5579]]],[1540512080262,["gjx16@GJXAIOU",[[1,5148,"fenbi"]],[5148,5148],[5153,5153]]],[1540512081453,["gjx16@GJXAIOU",[[-1,5148,"fenbi"]],[5153,5153],[5148,5148]]],[1540512110598,["gjx16@GJXAIOU",[[1,5148,"分别同时从左边和从右边向中间查找"]],[5148,5148],[5164,5164]]],[1540512429468,[null,[[-1,5595,"\n}"],[1,5597,"  "],[1,5713,"\n}\n"],[-1,5718,"![1"],[1,5721,"\n\n"],[1,5723,"视"]],[5595,5595],[5724,5724]]],[1540512429468,[null,[[1,5595,"\n}"],[-1,5595,"  "],[-1,5713,"\n}\n"],[1,5721,"![1"],[-1,5721,"\n\n"],[-1,5725,"视"]],[5724,5724],[5595,5595]]],[1540512369907,["gjx16@GJXAIOU",[[1,5170,"\n"]],[5169,5169],[5170,5170]]],[1540512375446,["gjx16@GJXAIOU",[[1,5170,"#include>"]],[5170,5170],[5179,5179]]],[1540512376403,["gjx16@GJXAIOU",[[-1,5178,">"]],[5179,5179],[5178,5178]]],[1540512376910,["gjx16@GJXAIOU",[[1,5178,"<>"]],[5178,5178],[5180,5180]]],[1540512379577,["gjx16@GJXAIOU",[[1,5179,"stdil"]],[5179,5179],[5184,5184]]],[1540512380300,["gjx16@GJXAIOU",[[-1,5183,"l"]],[5184,5184],[5183,5183]]],[1540512382984,["gjx16@GJXAIOU",[[1,5183,"o.h"]],[5183,5183],[5186,5186]]],[1540512385428,["gjx16@GJXAIOU",[[1,5188,"\n"]],[5187,5187],[5188,5188]]],[1540512388223,["gjx16@GJXAIOU",[[1,5188,"#inl"]],[5188,5188],[5192,5192]]],[1540512388747,["gjx16@GJXAIOU",[[-1,5191,"l"]],[5192,5192],[5191,5191]]],[1540512391590,["gjx16@GJXAIOU",[[1,5191,"clude<>"]],[5191,5191],[5198,5198]]],[1540512395676,["gjx16@GJXAIOU",[[1,5197,"string.hj"]],[5197,5197],[5206,5206]]],[1540512396365,["gjx16@GJXAIOU",[[-1,5205,"j"]],[5206,5206],[5205,5205]]],[1540512399423,["gjx16@GJXAIOU",[[1,5207,"\n"]],[5206,5206],[5207,5207]]],[1540512489472,[null,[[-1,5633,"\n}"],[1,5635,"  "],[1,5751,"\n}\n"],[-1,5756,"![1"],[1,5759,"\n\n"],[1,5761,"视"]],[5633,5633],[5762,5762]]],[1540512489472,[null,[[1,5633,"\n}"],[-1,5633,"  "],[-1,5751,"\n}\n"],[1,5759,"![1"],[-1,5759,"\n\n"],[-1,5763,"视"]],[5762,5762],[5633,5633]]],[1540512448364,["gjx16@GJXAIOU",[[-1,5299,"tn"]],[5301,5301],[5299,5299]]],[1540512449243,["gjx16@GJXAIOU",[[1,5299,"nt"]],[5299,5299],[5301,5301]]],[1540512549477,[null,[[-1,5633,"\n}"],[1,5635,"  "],[1,5751,"\n}\n"],[-1,5756,"![1"],[1,5759,"\n\n"],[1,5761,"视"]],[5633,5633],[5762,5762]]],[1540512549477,[null,[[1,5633,"\n}"],[-1,5633,"  "],[-1,5751,"\n}\n"],[1,5759,"![1"],[-1,5759,"\n\n"],[-1,5763,"视"]],[5762,5762],[5633,5633]]],[1540512507149,["gjx16@GJXAIOU",[[1,5208,"\n"]],[5206,5206],[5207,5207]]],[1540512510297,["gjx16@GJXAIOU",[[1,5207,"#inl"]],[5207,5207],[5211,5211]]],[1540512510775,["gjx16@GJXAIOU",[[-1,5210,"l"]],[5211,5211],[5210,5210]]],[1540512513223,["gjx16@GJXAIOU",[[1,5210,"clude<>"]],[5210,5210],[5217,5217]]],[1540512514401,["gjx16@GJXAIOU",[[1,5216,"s"]],[5216,5216],[5217,5217]]],[1540512517981,["gjx16@GJXAIOU",[[-1,5216,"s"]],[5217,5217],[5216,5216]]],[1540512523739,["gjx16@GJXAIOU",[[1,5216,"ctype.h"]],[5216,5216],[5223,5223]]],[1540512557761,[null,[[-1,5651,"\n}"],[1,5653,"  "],[1,5769,"\n}\n"],[-1,5774,"![1"],[1,5777,"\n\n"],[1,5779,"视"]],[5651,5651],[5780,5780]]],[1540512557761,[null,[[1,5651,"\n}"],[-1,5651,"  "],[-1,5769,"\n}\n"],[1,5777,"![1"],[-1,5777,"\n\n"],[-1,5781,"视"]],[5780,5780],[5651,5651]]],[1540512551157,["gjx16@GJXAIOU",[[-1,5400," "]],[5401,5401],[5400,5400]]],[1540512554319,["gjx16@GJXAIOU",[[1,5400,"\\0"]],[5400,5400],[5402,5402]]],[1540513457907,[null,[[-1,5652,"\n}"],[1,5654,"  "],[1,5770,"\n}\n"],[-1,5775,"![1"],[1,5778,"\n\n"],[1,5780,"视"]],[5652,5652],[5781,5781]]],[1540513457907,[null,[[1,5652,"\n}"],[-1,5652,"  "],[-1,5770,"\n}\n"],[1,5778,"![1"],[-1,5778,"\n\n"],[-1,5782,"视"]],[5781,5781],[5652,5652]]],[1540513443283,["gjx16@GJXAIOU",[[-1,5546,"\n"],[1,5547," "]],[5546,5547],[5547,5547]]],[1540513577919,[null,[[-1,5652,"\n}"],[1,5654,"  "],[1,5770,"\n}\n"],[-1,5775,"![1"],[1,5778,"\n\n"],[1,5780,"视"]],[5652,5652],[5781,5781]]],[1540513577919,[null,[[1,5652,"\n}"],[-1,5652,"  "],[-1,5770,"\n}\n"],[1,5778,"![1"],[-1,5778,"\n\n"],[-1,5782,"视"]],[5781,5781],[5652,5652]]],[1540513527593,["gjx16@GJXAIOU",[[1,5599,"void"]],[5599,5599],[5603,5603]]],[1540514418024,[null,[[-1,5656,"\n}"],[1,5658,"  "],[1,5774,"\n}\n"],[-1,5779,"![1"],[1,5782,"\n\n"],[1,5784,"视"]],[5656,5656],[5785,5785]]],[1540514418024,[null,[[1,5656,"\n}"],[-1,5656,"  "],[-1,5774,"\n}\n"],[1,5782,"![1"],[-1,5782,"\n\n"],[-1,5786,"视"]],[5785,5785],[5656,5656]]],[1540514381312,["gjx16@GJXAIOU",[[1,5352," -1"]],[5352,5352],[5355,5355]]],[1540514792654,[null,[[-1,5659,"\n}"],[1,5661,"  "],[1,5777,"\n}\n"],[-1,5782,"![1"],[1,5785,"\n\n"],[1,5787,"视"]],[5659,5659],[5788,5788]]],[1540514792654,[null,[[1,5659,"\n}"],[-1,5659,"  "],[-1,5777,"\n}\n"],[1,5785,"![1"],[-1,5785,"\n\n"],[-1,5789,"视"]],[5788,5788],[5659,5659]]],[1540514791015,["gjx16@GJXAIOU",[[-1,5553,"*"]],[5554,5554],[5553,5553]]],[1540515272660,[null,[[-1,5658,"\n}"],[1,5660,"  "],[1,5776,"\n}\n"],[-1,5781,"![1"],[1,5784,"\n\n"],[1,5786,"视"]],[5658,5658],[5787,5787]]],[1540515272660,[null,[[1,5658,"\n}"],[-1,5658,"  "],[-1,5776,"\n}\n"],[1,5784,"![1"],[-1,5784,"\n\n"],[-1,5788,"视"]],[5787,5787],[5658,5658]]],[1540515243924,["gjx16@GJXAIOU",[[1,5188,"\n"],[1,5207,"\n"],[1,5230," "],[1,5239," "],[1,5241," "],[1,5247," "],[1,5250,"\n"],[1,5253,"\n"],[1,5260," "],[1,5262," "],[1,5268," "],[1,5270," "],[1,5273," "],[1,5275," "],[-1,5282,"  "],[1,5284,"\n"],[-1,5288,"      "],[1,5294,"\n"],[1,5303," "],[1,5306,"\n"],[-1,5309,"  "],[1,5320," "],[1,5325," "],[1,5328," "],[1,5330,"\n"],[1,5336," "],[1,5341," "],[1,5343," (int)"],[1,5353," "],[1,5358,"  "],[1,5366,"\n  "],[1,5384,"\n  "],[1,5390,"isspace("],[1,5398,")"],[-1,5399,"== '\\0'"],[1,5409," "],[1,5418," "],[1,5422," "],[1,5424,"\n"],[-1,5429,"  "],[1,5431,"\n"],[1,5452,"\n"],[1,5476,"\n"],[1,5501," "],[1,5503," "],[1,5511," "],[1,5513," "],[-1,5517,"  "],[1,5519,"\n"],[-1,5523,"      "],[1,5529,"\n"],[-1,5544,"    } "],[1,5550,"\n  }\n"],[1,5553,"*"],[1,5554," "],[1,5557," "],[1,5560," "],[1,5567," "],[1,5572,"\n"],[1,5580," "],[-1,5584,"  "],[-1,5588,"\n\n"],[1,5596," "],[1,5607,"\n"],[1,5608,"\n"],[1,5616," "],[1,5618," "],[-1,5621,"\"  "],[1,5624," \""],[-1,5633,"     "],[1,5642,"\n"],[1,5649," "],[1,5652," "],[1,5655," "],[1,5657,"\n"],[1,5664," "],[1,5665," "],[1,5667," "],[1,5678," "],[1,5679," "],[1,5691,"\n"],[1,5700," "],[1,5702," "],[-1,5706,"  "],[1,5708,"\n"],[-1,5712,"    "],[1,5716,"\n"],[1,5725," "],[-1,5730,"  "],[1,5732,"\n"],[1,5749," "],[1,5750," "],[1,5760,"\n"],[1,5770," "],[-1,5772,"\n  "]],[5170,5778],[5823,5823]]],[1540515246439,["gjx16@GJXAIOU",[[-1,5188,"\n"]],[5188,5188],[5187,5187]]],[1540515247305,["gjx16@GJXAIOU",[[-1,5207,"\n"]],[5207,5207],[5206,5206]]],[1540515248503,["gjx16@GJXAIOU",[[-1,5255,"\n"]],[5255,5255],[5254,5254]]],[1540515249215,["gjx16@GJXAIOU",[[-1,5257,"\n"]],[5257,5257],[5256,5256]]],[1540515250407,["gjx16@GJXAIOU",[[-1,5292,"\n"]],[5292,5292],[5291,5291]]],[1540515251193,["gjx16@GJXAIOU",[[-1,5296,"\n"]],[5296,5296],[5295,5295]]],[1540515380128,[null,[[-1,5692,"\n}"],[1,5694,"  "],[1,5815,"\n}\n"],[-1,5820,"![1"],[1,5823,"\n\n"],[1,5825,"视"]],[5692,5692],[5826,5826]]],[1540515380128,[null,[[1,5692,"\n}"],[-1,5692,"  "],[-1,5815,"\n}\n"],[1,5823,"![1"],[-1,5823,"\n\n"],[-1,5827,"视"]],[5826,5826],[5692,5692]]],[1540515374924,["gjx16@GJXAIOU",[[-1,5230," "],[-1,5240," "],[-1,5243,"  "],[1,5246," "],[-1,5249," "],[-1,5257,"  "],[1,5259,"\t"],[1,5261," "],[-1,5263," "],[-1,5267," "],[-1,5274," "],[-1,5277," "],[-1,5280," "],[-1,5285," "],[-1,5292,"  {\n  "],[1,5298,"\t{\n\t\t"],[-1,5305," "],[-1,5310,"\n  }\n\n  "],[1,5318,"\t}\n\n\t"],[-1,5321," "],[-1,5329," "],[-1,5331," "],[-1,5336,"\n  "],[1,5339,"\t"],[-1,5343," "],[-1,5348," "],[-1,5350," "],[-1,5367," "],[1,5369," "],[-1,5373,"  "],[1,5375,"\t"],[-1,5383,"\n  "],[1,5386,"\t"],[-1,5404,"\n  "],[1,5407,"\t"],[1,5412," "],[-1,5431," "],[-1,5434," "],[-1,5444," "],[-1,5449," "],[-1,5453,"\n  {\n\n  "],[1,5461,"\t{\n\t\t"],[-1,5480,"\n  }\n\n  "],[1,5488,"\t}\n\n\t"],[-1,5506,"\n  "],[1,5509,"\t"],[1,5514," "],[-1,5531," "],[-1,5534," "],[-1,5542," "],[-1,5547," "],[-1,5551,"\n  {\n\n  "],[1,5559,"\t{\n\t\t"],[-1,5572,"\n  }\n\n  "],[1,5580,"\t}\n\t"],[-1,5583," "],[-1,5585," "],[-1,5591," "],[1,5593," "],[-1,5598," "],[1,5601," "],[-1,5604,"\n  "],[1,5607,"\t"],[-1,5613," "],[1,5620,"\n\n"],[-1,5626," "],[-1,5638,"\n"],[-1,5641,"\n  "],[1,5644,"\t"],[-1,5649," "],[-1,5652," "],[-1,5656," "],[1,5658," "],[1,5667,"   "],[-1,5672,"\n  "],[1,5675,"\t"],[-1,5679," "],[-1,5684," "],[-1,5686," "],[-1,5691,"\n  "],[1,5694,"\t"],[-1,5697," "],[-1,5701," "],[-1,5703," "],[-1,5709,"  "],[1,5711,"\t"],[-1,5714," "],[-1,5718," "],[1,5725," "],[-1,5730,"\n  "],[1,5733,"\t"],[1,5735," "],[-1,5740," "],[-1,5743," "],[-1,5748,"\n  {\n\n  "],[1,5756,"\t{\n\t\t"],[-1,5763," "],[-1,5769,"\n  }\n\n  "],[1,5777,"\t}\n\n\t"],[-1,5787," "],[-1,5789," "],[1,5797," "],[-1,5801,"\n  "],[1,5804,"\t"],[-1,5810," "],[1,5816,"\n"],[1,5817,"\n"]],[5170,5817],[5738,5738]]],[1540516442489,[null,[[1,5734,"\n\n}\n\n``"],[-1,5736,"`"],[-1,5738,"`"],[-1,5741,"![1"],[1,5746,"视"]],[5734,5734],[5747,5747]]],[1540516442489,[null,[[-1,5734,"\n\n}\n\n``"],[1,5743,"`"],[1,5744,"`"],[1,5746,"![1"],[-1,5748,"视"]],[5747,5747],[5734,5734]]],[1540516410871,["gjx16@GJXAIOU",[[1,5744,"4.2****"]],[5744,5744],[5749,5749]]],[1540516427581,["gjx16@GJXAIOU",[[1,5749,"将中间有元素的那一部分打印出来"]],[5749,5749],[5764,5764]]],[1540516431704,["gjx16@GJXAIOU",[[1,5768,"\n"]],[5766,5766],[5767,5767]]],[1540516433130,["gjx16@GJXAIOU",[[1,5767,"```"]],[5767,5767],[5770,5770]]],[1540516433165,["gjx16@GJXAIOU",[[1,5770,"language\n```\n"]],[5770,5770],[5770,5778]]],[1540516434330,["gjx16@GJXAIOU",[[-1,5770,"language"],[1,5778,"c"]],[5770,5778],[5771,5771]]],[1540516434547,["gjx16@GJXAIOU",[[1,5772,"\n"]],[5771,5771],[5772,5772]]],[1540516435496,["gjx16@GJXAIOU",[[1,5772,"#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n\n\n}\n"]],[5772,5772],[6453,6453]]],[1540516441195,["gjx16@GJXAIOU",[[-1,6450,"\n"]],[6450,6450],[6449,6449]]],[1540516441359,["gjx16@GJXAIOU",[[-1,6449,"\n"]],[6449,6449],[6448,6448]]],[1540517104903,[null,[[-1,5734,"`\n`"],[1,5737,"\n\n}\n"],[1,5739,"``"],[-1,5741,"![1"],[-1,5766,"~"],[1,5767,"\n"],[-1,6456,"~\n"],[1,6458,"\n\n~~视"]],[5734,5734],[6463,6463]]],[1540517104903,[null,[[1,5734,"`\n`"],[-1,5734,"\n\n}\n"],[-1,5740,"``"],[1,5744,"![1"],[1,5766,"~"],[-1,5766,"\n"],[1,6456,"~\n"],[-1,6456,"\n\n~~视"]],[6463,6463],[5734,5734]]],[1540517062290,["gjx16@GJXAIOU",[[-1,6459,"~视频第15~~"]],[6467,6467],[6459,6459]]],[1540517062433,["gjx16@GJXAIOU",[[-1,6458,"~"],[1,6459,"\n"]],[6459,6459],[6458,6458]]],[1540517062972,["gjx16@GJXAIOU",[[-1,6458,"\n"]],[6458,6458],[6457,6457]]],[1540517064672,["gjx16@GJXAIOU",[[-1,6457,"\n"],[1,6458,"z"]],[6457,6457],[6458,6458]]],[1540517065384,["gjx16@GJXAIOU",[[1,6458,"uoye"]],[6458,6458],[6462,6462]]],[1540517066209,["gjx16@GJXAIOU",[[-1,6458,"uoye"]],[6462,6462],[6458,6458]]],[1540517066538,["gjx16@GJXAIOU",[[-1,6457,"z"],[1,6458,"\n"]],[6458,6458],[6457,6457]]],[1540517068285,["gjx16@GJXAIOU",[[-1,6457,"\n"],[1,6458,"作业"]],[6457,6457],[6459,6459]]],[1540517068897,["gjx16@GJXAIOU",[[1,6459,"："]],[6459,6459],[6460,6460]]],[1540517080484,["gjx16@GJXAIOU",[[1,6457,"## 复习以及"]],[6457,6457],[6464,6464]]],[1540517164918,[null,[[-1,5734,"`\n`"],[1,5737,"\n\n}\n"],[1,5739,"``"],[-1,5741,"![1"],[-1,5766,"~"],[1,5767,"\n"],[-1,6456,"~"],[1,6457,"\n"]],[5734,5734],[6458,6458]]],[1540517164918,[null,[[1,5734,"`\n`"],[-1,5734,"\n\n}\n"],[-1,5740,"``"],[1,5744,"![1"],[1,5766,"~"],[-1,5766,"\n"],[1,6456,"~"],[-1,6456,"\n"]],[6458,6458],[5734,5734]]],[1540517132049,["gjx16@GJXAIOU",[[-1,6466,"："]],[6467,6467],[6466,6466]]],[1540517132270,["gjx16@GJXAIOU",[[1,6466,"\n\n"]],[6466,6466],[6467,6467]]],[1540517133426,["gjx16@GJXAIOU",[[1,6468,"\n"]],[6467,6467],[6468,6468]]],[1540518904944,[null,[[-1,5734,"`\n`"],[1,5737,"\n\n}\n"],[1,5739,"``"],[-1,5741,"![1"],[-1,5766,"~"],[1,5767,"\n"],[-1,6456,"~"],[1,6457,"\n"]],[5734,5734],[6458,6458]]],[1540518904944,[null,[[1,5734,"`\n`"],[-1,5734,"\n\n}\n"],[-1,5740,"``"],[1,5744,"![1"],[1,5766,"~"],[-1,5766,"\n"],[1,6456,"~"],[-1,6456,"\n"]],[6458,6458],[5734,5734]]],[1540518903868,["gjx16@GJXAIOU",[[1,207,"不允许"]],[207,207],[210,210]]],[1540518964944,[null,[[-1,5737,"`\n`"],[1,5740,"\n\n}\n"],[1,5742,"``"],[-1,5744,"![1"],[-1,5769,"~"],[1,5770,"\n"],[-1,6459,"~"],[1,6460,"\n"]],[5737,5737],[6461,6461]]],[1540518964944,[null,[[1,5737,"`\n`"],[-1,5737,"\n\n}\n"],[-1,5743,"``"],[1,5747,"![1"],[1,5769,"~"],[-1,5769,"\n"],[1,6459,"~"],[-1,6459,"\n"]],[6461,6461],[5737,5737]]],[1540518921102,["gjx16@GJXAIOU",[[1,210,"向NULL和未知地址拷贝内存"]],[210,210],[224,224]]],[1540519264943,[null,[[-1,5751,"`\n`"],[1,5754,"\n\n}\n"],[1,5756,"``"],[-1,5758,"![1"],[-1,5783,"~"],[1,5784,"\n"],[-1,6473,"~"],[1,6474,"\n"]],[5751,5751],[6475,6475]]],[1540519264943,[null,[[1,5751,"`\n`"],[-1,5751,"\n\n}\n"],[-1,5757,"``"],[1,5761,"![1"],[1,5783,"~"],[-1,5783,"\n"],[1,6473,"~"],[-1,6473,"\n"]],[6475,6475],[5751,5751]]],[1540519245937,["gjx16@GJXAIOU",[[1,2310,"****"]],[2310,2310],[2312,2312]]],[1540519252672,["gjx16@GJXAIOU",[[1,2310,"4。"]],[2310,2310],[2312,2312]]],[1540519253851,["gjx16@GJXAIOU",[[-1,2311,"。"]],[2312,2312],[2311,2311]]],[1540519254557,["gjx16@GJXAIOU",[[1,2311,"."]],[2311,2311],[2312,2312]]],[1540519259970,["gjx16@GJXAIOU",[[1,2314,"区别单个"]],[2314,2314],[2318,2318]]],[1540519260971,["gjx16@GJXAIOU",[[-1,2316,"单个"]],[2318,2318],[2316,2316]]],[1540519263529,["gjx16@GJXAIOU",[[1,2316,"三个"]],[2316,2316],[2318,2318]]],[1540519324944,[null,[[-1,5761,"`\n`"],[1,5764,"\n\n}\n"],[1,5766,"``"],[-1,5768,"![1"],[-1,5793,"~"],[1,5794,"\n"],[-1,6483,"~"],[1,6484,"\n"]],[5761,5761],[6485,6485]]],[1540519324944,[null,[[1,5761,"`\n`"],[-1,5761,"\n\n}\n"],[-1,5767,"``"],[1,5771,"![1"],[1,5793,"~"],[-1,5793,"\n"],[1,6483,"~"],[-1,6483,"\n"]],[6485,6485],[5761,5761]]],[1540519266217,["gjx16@GJXAIOU",[[1,2318,"语句"]],[2318,2318],[2320,2320]]],[1540519268636,["gjx16@GJXAIOU",[[1,2324,"\n"]],[2322,2322],[2323,2323]]],[1540519284490,["gjx16@GJXAIOU",[[1,2323,"·"]],[2323,2323],[2324,2324]]],[1540519285596,["gjx16@GJXAIOU",[[-1,2323,"·"]],[2324,2324],[2323,2323]]],[1540519287573,["gjx16@GJXAIOU",[[1,2323,"```c"]],[2323,2323],[2327,2327]]],[1540519287815,["gjx16@GJXAIOU",[[1,2329,"\n"]],[2327,2327],[2328,2328]]],[1540519287979,["gjx16@GJXAIOU",[[1,2330,"\n"]],[2328,2328],[2329,2329]]],[1540519288175,["gjx16@GJXAIOU",[[1,2331,"\n"]],[2329,2329],[2330,2330]]],[1540519288356,["gjx16@GJXAIOU",[[1,2332,"\n"]],[2330,2330],[2331,2331]]],[1540519288507,["gjx16@GJXAIOU",[[1,2333,"\n"]],[2331,2331],[2332,2332]]],[1540519289161,["gjx16@GJXAIOU",[[1,2332,"```"]],[2332,2332],[2335,2335]]],[1540519298262,["gjx16@GJXAIOU",[[1,2328,"int fun()\\{}"]],[2328,2328],[2340,2340]]],[1540519299211,["gjx16@GJXAIOU",[[-1,2337,"\\{}"]],[2340,2340],[2337,2337]]],[1540519300040,["gjx16@GJXAIOU",[[1,2341,"\n"]],[2337,2337],[2338,2338]]],[1540519301162,["gjx16@GJXAIOU",[[1,2338,"{}"]],[2338,2338],[2340,2340]]],[1540519301836,["gjx16@GJXAIOU",[[1,2339,"\n"]],[2339,2339],[2340,2340]]],[1540519302028,["gjx16@GJXAIOU",[[1,2340,"\n"]],[2340,2340],[2341,2341]]],[1540519302222,["gjx16@GJXAIOU",[[1,2341,"\n"]],[2341,2341],[2342,2342]]],[1540519308446,["gjx16@GJXAIOU",[[1,2340,"  int a = 10;"]],[2340,2340],[2353,2353]]],[1540519308879,["gjx16@GJXAIOU",[[1,2354,"  \n"]],[2353,2353],[2356,2356]]],[1540519313822,["gjx16@GJXAIOU",[[1,2356,"return a;"]],[2356,2356],[2365,2365]]],[1540519384996,[null,[[-1,5816,"`\n`"],[1,5819,"\n\n}\n"],[1,5821,"``"],[-1,5823,"![1"],[-1,5848,"~"],[1,5849,"\n"],[-1,6538,"~"],[1,6539,"\n"]],[5816,5816],[6540,6540]]],[1540519384996,[null,[[1,5816,"`\n`"],[-1,5816,"\n\n}\n"],[-1,5822,"``"],[1,5826,"![1"],[1,5848,"~"],[-1,5848,"\n"],[1,6538,"~"],[-1,6538,"\n"]],[6540,6540],[5816,5816]]],[1540519325678,["gjx16@GJXAIOU",[[-1,2366,"\n"]],[2366,2366],[2365,2365]]],[1540519327815,["gjx16@GJXAIOU",[[1,2371,"\n"]],[2367,2367],[2368,2368]]],[1540519328006,["gjx16@GJXAIOU",[[1,2372,"\n"]],[2368,2368],[2369,2369]]],[1540519328796,["gjx16@GJXAIOU",[[1,2373,"\n"]],[2369,2369],[2370,2370]]],[1540519333883,["gjx16@GJXAIOU",[[1,2370,"int *fun()"]],[2370,2370],[2380,2380]]],[1540519335799,["gjx16@GJXAIOU",[[1,2384,"\n"]],[2380,2380],[2381,2381]]],[1540519336944,["gjx16@GJXAIOU",[[1,2381,"{}"]],[2381,2381],[2383,2383]]],[1540519338028,["gjx16@GJXAIOU",[[1,2382,"\n"]],[2382,2382],[2383,2383]]],[1540519338212,["gjx16@GJXAIOU",[[1,2383,"\n"]],[2383,2383],[2384,2384]]],[1540519338388,["gjx16@GJXAIOU",[[1,2384,"\n"]],[2384,2384],[2385,2385]]],[1540519346510,["gjx16@GJXAIOU",[[1,2383,"  int a = 1-;"]],[2383,2383],[2396,2396]]],[1540519346971,["gjx16@GJXAIOU",[[-1,2394,"-;"]],[2396,2396],[2394,2394]]],[1540519349166,["gjx16@GJXAIOU",[[1,2394,"0;"]],[2394,2394],[2396,2396]]],[1540519349614,["gjx16@GJXAIOU",[[1,2397,"  \n"]],[2396,2396],[2399,2399]]],[1540519354583,["gjx16@GJXAIOU",[[1,2399,"return 10;"]],[2399,2399],[2409,2409]]],[1540519356535,["gjx16@GJXAIOU",[[-1,2406,"10;"]],[2409,2409],[2406,2406]]],[1540519358247,["gjx16@GJXAIOU",[[1,2406,"&a;"]],[2406,2406],[2409,2409]]],[1540519360471,["gjx16@GJXAIOU",[[-1,2410,"\n"]],[2410,2410],[2409,2409]]],[1540519362916,["gjx16@GJXAIOU",[[1,2415,"\n"]],[2411,2411],[2412,2412]]],[1540519363132,["gjx16@GJXAIOU",[[1,2416,"\n"]],[2412,2412],[2413,2413]]],[1540519363343,["gjx16@GJXAIOU",[[1,2417,"\n"]],[2413,2413],[2414,2414]]],[1540519363525,["gjx16@GJXAIOU",[[1,2418,"\n"]],[2414,2414],[2415,2415]]],[1540519369572,["gjx16@GJXAIOU",[[1,2415,"int *fun()"]],[2415,2415],[2425,2425]]],[1540519370388,["gjx16@GJXAIOU",[[1,2429,"\n"]],[2425,2425],[2426,2426]]],[1540519371209,["gjx16@GJXAIOU",[[1,2426,"}"]],[2426,2426],[2427,2427]]],[1540519371894,["gjx16@GJXAIOU",[[-1,2426,"}"]],[2427,2427],[2426,2426]]],[1540519373166,["gjx16@GJXAIOU",[[1,2426,"{}"]],[2426,2426],[2428,2428]]],[1540519374127,["gjx16@GJXAIOU",[[1,2427,"\n"]],[2427,2427],[2428,2428]]],[1540519374300,["gjx16@GJXAIOU",[[1,2428,"\n"]],[2428,2428],[2429,2429]]],[1540519374472,["gjx16@GJXAIOU",[[1,2429,"\n"]],[2429,2429],[2430,2430]]],[1540519378130,["gjx16@GJXAIOU",[[1,2428,"  sta"]],[2428,2428],[2433,2433]]],[1540519378715,["gjx16@GJXAIOU",[[-1,2432,"a"]],[2433,2433],[2432,2432]]],[1540519378833,["gjx16@GJXAIOU",[[1,2432,"t"]],[2432,2432],[2433,2433]]],[1540519379755,["gjx16@GJXAIOU",[[-1,2432,"t"]],[2433,2433],[2432,2432]]],[1540519384865,["gjx16@GJXAIOU",[[1,2432,"atic int a = "]],[2432,2432],[2445,2445]]],[1540519444985,[null,[[-1,5896,"`\n`"],[1,5899,"\n\n}\n"],[1,5901,"``"],[-1,5903,"![1"],[-1,5928,"~"],[1,5929,"\n"],[-1,6618,"~"],[1,6619,"\n"]],[5896,5896],[6620,6620]]],[1540519444985,[null,[[1,5896,"`\n`"],[-1,5896,"\n\n}\n"],[-1,5902,"``"],[1,5906,"![1"],[1,5928,"~"],[-1,5928,"\n"],[1,6618,"~"],[-1,6618,"\n"]],[6620,6620],[5896,5896]]],[1540519385834,["gjx16@GJXAIOU",[[1,2445,"10;"]],[2445,2445],[2448,2448]]],[1540519386596,["gjx16@GJXAIOU",[[1,2449,"  \n"]],[2448,2448],[2451,2451]]],[1540519391390,["gjx16@GJXAIOU",[[1,2451,"return &a;"]],[2451,2451],[2461,2461]]],[1540519395101,["gjx16@GJXAIOU",[[1,2468,"\n"]],[2464,2464],[2465,2465]]],[1540519395268,["gjx16@GJXAIOU",[[1,2469,"\n"]],[2465,2465],[2466,2466]]],[1540519402570,["gjx16@GJXAIOU",[[1,2466,"int b = fun();"]],[2466,2466],[2480,2480]]],[1540519407392,["gjx16@GJXAIOU",[[1,2412,"\\\\"]],[2412,2412],[2414,2414]]],[1540519408372,["gjx16@GJXAIOU",[[-1,2412,"\\\\"]],[2414,2414],[2412,2412]]],[1540519427088,["gjx16@GJXAIOU",[[1,2412,"//本质上第一个和第二个是等奖"]],[2412,2412],[2427,2427]]],[1540519427766,["gjx16@GJXAIOU",[[-1,2425,"等奖"]],[2427,2427],[2425,2425]]],[1540519430281,["gjx16@GJXAIOU",[[1,2425,"等价的"]],[2425,2425],[2428,2428]]],[1540519433868,["gjx16@GJXAIOU",[[1,2482,"\n"]],[2481,2481],[2482,2482]]],[1540519437757,["gjx16@GJXAIOU",[[1,2482,"int main()"]],[2482,2482],[2492,2492]]],[1540519438164,["gjx16@GJXAIOU",[[1,2493,"\n"]],[2492,2492],[2493,2493]]],[1540519439102,["gjx16@GJXAIOU",[[1,2493,"{"]],[2493,2493],[2494,2494]]],[1540519442693,["gjx16@GJXAIOU",[[1,2495,"  "]],[2495,2495],[2497,2497]]],[1540519505038,[null,[[-1,5959,"`\n`"],[1,5962,"\n\n}\n"],[1,5964,"``"],[-1,5966,"![1"],[-1,5991,"~"],[1,5992,"\n"],[-1,6681,"~"],[1,6682,"\n"]],[5959,5959],[6683,6683]]],[1540519505038,[null,[[1,5959,"`\n`"],[-1,5959,"\n\n}\n"],[-1,5965,"``"],[1,5969,"![1"],[1,5991,"~"],[-1,5991,"\n"],[1,6681,"~"],[-1,6681,"\n"]],[6683,6683],[5959,5959]]],[1540519445271,["gjx16@GJXAIOU",[[1,2512,"}"]],[2512,2512],[2513,2513]]],[1540519485101,["gjx16@GJXAIOU",[[1,2368,"//ok，b的值为12"]],[2368,2368],[2379,2379]]],[1540519485941,["gjx16@GJXAIOU",[[-1,2378,"2"]],[2379,2379],[2378,2378]]],[1540519486833,["gjx16@GJXAIOU",[[1,2378,"0"]],[2378,2378],[2379,2379]]],[1540519490820,["gjx16@GJXAIOU",[[1,2440,"、、"]],[2440,2440],[2442,2442]]],[1540519491836,["gjx16@GJXAIOU",[[-1,2440,"、、"]],[2442,2442],[2440,2440]]],[1540519504859,["gjx16@GJXAIOU",[[1,2440,"//p确实保存"]],[2440,2440],[2447,2447]]],[1540519565034,[null,[[-1,5978,"`\n`"],[1,5981,"\n\n}\n"],[1,5983,"``"],[-1,5985,"![1"],[-1,6010,"~"],[1,6011,"\n"],[-1,6700,"~"],[1,6701,"\n"]],[5978,5978],[6702,6702]]],[1540519565034,[null,[[1,5978,"`\n`"],[-1,5978,"\n\n}\n"],[-1,5984,"``"],[1,5988,"![1"],[1,6010,"~"],[-1,6010,"\n"],[1,6700,"~"],[-1,6700,"\n"]],[6702,6702],[5978,5978]]],[1540519512744,["gjx16@GJXAIOU",[[1,2447,"了fun()内部q"]],[2447,2447],[2456,2456]]],[1540519513621,["gjx16@GJXAIOU",[[-1,2455,"q"]],[2456,2456],[2455,2455]]],[1540519540868,["gjx16@GJXAIOU",[[1,2455,"a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域"]],[2455,2455],[2486,2486]]],[1540519549602,["gjx16@GJXAIOU",[[1,2538,"、、"]],[2538,2538],[2540,2540]]],[1540519550552,["gjx16@GJXAIOU",[[-1,2538,"、、"]],[2540,2540],[2538,2538]]],[1540519558417,["gjx16@GJXAIOU",[[1,2538,"//afang"]],[2538,2538],[2545,2545]]],[1540519559783,["gjx16@GJXAIOU",[[-1,2541,"fang"]],[2545,2545],[2541,2541]]],[1540519563397,["gjx16@GJXAIOU",[[1,2541,"放在"]],[2541,2541],[2543,2543]]],[1540519625033,[null,[[-1,6022,"`\n`"],[1,6025,"\n\n}\n"],[1,6027,"``"],[-1,6029,"![1"],[-1,6054,"~"],[1,6055,"\n"],[-1,6744,"~"],[1,6745,"\n"]],[6022,6022],[6746,6746]]],[1540519625033,[null,[[1,6022,"`\n`"],[-1,6022,"\n\n}\n"],[-1,6028,"``"],[1,6032,"![1"],[1,6054,"~"],[-1,6054,"\n"],[1,6744,"~"],[-1,6744,"\n"]],[6746,6746],[6022,6022]]],[1540519579057,["gjx16@GJXAIOU",[[1,2543,"全局区，函数运行完毕，a的孔家"]],[2543,2543],[2558,2558]]],[1540519580556,["gjx16@GJXAIOU",[[-1,2556,"孔家"]],[2558,2558],[2556,2556]]],[1540519584220,["gjx16@GJXAIOU",[[1,2556,"空间不释放"]],[2556,2556],[2561,2561]]],[1540519585836,["gjx16@GJXAIOU",[[1,2562,"\n"]],[2561,2561],[2562,2562]]],[1540520165055,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540520165055,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540520107619,["gjx16@GJXAIOU",[[-1,2652,"数据"]],[2654,2654],[2652,2652]]],[1540520111778,["gjx16@GJXAIOU",[[1,2652,"数组"]],[2652,2652],[2654,2654]]],[1540521924231,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540521924231,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540521895878,["gjx16@GJXAIOU",[[-1,6775,"\n"],[1,6776,"-"]],[6775,6775],[6776,6776]]],[1540521896124,["gjx16@GJXAIOU",[[1,6776,"0 "]],[6776,6776],[6778,6778]]],[1540521897398,["gjx16@GJXAIOU",[[-1,6776,"0 "]],[6778,6778],[6776,6776]]],[1540521900928,["gjx16@GJXAIOU",[[1,6776," 作业\n- "]],[6776,6776],[6782,6782]]],[1540521901067,["gjx16@GJXAIOU",[[-1,6780,"- "],[1,6782,"\n\n"]],[6782,6782],[6781,6781]]],[1540524144269,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524144269,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524135976,["gjx16@GJXAIOU",[[1,6780,"- \n"]],[6779,6779],[6782,6782]]],[1540524137667,["gjx16@GJXAIOU",[[-1,6780,"- "]],[6782,6782],[6780,6780]]],[1540524139469,["gjx16@GJXAIOU",[[1,6780,"1、"]],[6780,6780],[6782,6782]]],[1540524140712,["gjx16@GJXAIOU",[[-1,6781,"、"]],[6782,6782],[6781,6781]]],[1540524141070,["gjx16@GJXAIOU",[[1,6781,"。"]],[6781,6781],[6782,6782]]],[1540524142056,["gjx16@GJXAIOU",[[-1,6781,"。"]],[6782,6782],[6781,6781]]],[1540524143800,["gjx16@GJXAIOU",[[1,6781,".****"]],[6781,6781],[6784,6784]]],[1540524204272,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524204272,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524170856,["gjx16@GJXAIOU",[[1,6784,"根据元素的就行"]],[6784,6784],[6791,6791]]],[1540524171554,["gjx16@GJXAIOU",[[-1,6789,"就行"]],[6791,6791],[6789,6789]]],[1540524186343,["gjx16@GJXAIOU",[[1,6789,"奇偶性调处"]],[6789,6789],[6794,6794]]],[1540524187347,["gjx16@GJXAIOU",[[-1,6792,"调处"]],[6794,6794],[6792,6792]]],[1540524200241,["gjx16@GJXAIOU",[[1,6792,"挑出字符串中的对应元素"]],[6792,6792],[6803,6803]]],[1540524264268,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524264268,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524204867,["gjx16@GJXAIOU",[[1,6788,"位置"]],[6788,6788],[6790,6790]]],[1540524210085,["gjx16@GJXAIOU",[[1,6810,"\n"]],[6807,6807],[6808,6808]]],[1540524210205,["gjx16@GJXAIOU",[[1,6811,"\n"]],[6808,6808],[6809,6809]]],[1540524211615,["gjx16@GJXAIOU",[[1,6809,"```"]],[6809,6809],[6812,6812]]],[1540524211654,["gjx16@GJXAIOU",[[1,6812,"language\n```\n"]],[6812,6812],[6812,6820]]],[1540524212467,["gjx16@GJXAIOU",[[-1,6812,"language"],[1,6820,"c"]],[6812,6820],[6813,6813]]],[1540524212716,["gjx16@GJXAIOU",[[1,6814,"\n"]],[6813,6813],[6814,6814]]],[1540524213317,["gjx16@GJXAIOU",[[1,6815,"\n"]],[6814,6814],[6815,6815]]],[1540524227322,["gjx16@GJXAIOU",[[1,6808,"有一个字符串“”"]],[6808,6808],[6816,6816]]],[1540524234817,["gjx16@GJXAIOU",[[1,6815,"1阿班"]],[6815,6815],[6818,6818]]],[1540524236384,["gjx16@GJXAIOU",[[-1,6816,"阿班"]],[6818,6818],[6816,6816]]],[1540524241979,["gjx16@GJXAIOU",[[1,6816,"a2b3c4d"]],[6816,6816],[6823,6823]]],[1540524246369,["gjx16@GJXAIOU",[[1,6825,"\n"]],[6824,6824],[6825,6825]]],[1540524252056,["gjx16@GJXAIOU",[[1,6825,"实现改一下"]],[6825,6825],[6830,6830]]],[1540524253754,["gjx16@GJXAIOU",[[-1,6827,"改一下"]],[6830,6830],[6827,6827]]],[1540524257751,["gjx16@GJXAIOU",[[1,6827,"以下的功能："]],[6827,6827],[6833,6833]]],[1540524258334,["gjx16@GJXAIOU",[[1,6834,"\n"]],[6833,6833],[6834,6834]]],[1540524262055,["gjx16@GJXAIOU",[[1,6834,"功能以；"]],[6834,6834],[6838,6838]]],[1540524262645,["gjx16@GJXAIOU",[[-1,6836,"以；"]],[6838,6838],[6836,6836]]],[1540524263700,["gjx16@GJXAIOU",[[1,6836,"1"]],[6836,6836],[6837,6837]]],[1540524324268,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524324268,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524281483,["gjx16@GJXAIOU",[[1,6837,"：把偶数位字符挑选出来，自称"]],[6837,6837],[6851,6851]]],[1540524282481,["gjx16@GJXAIOU",[[-1,6849,"自称"]],[6851,6851],[6849,6849]]],[1540524290167,["gjx16@GJXAIOU",[[1,6849,"组成字符串1；"]],[6849,6849],[6856,6856]]],[1540524290570,["gjx16@GJXAIOU",[[1,6857,"\n"]],[6856,6856],[6857,6857]]],[1540524316633,["gjx16@GJXAIOU",[[1,6857,"功能2：把奇数位字符挑选出来，组成字符串2；"]],[6857,6857],[6879,6879]]],[1540524317258,["gjx16@GJXAIOU",[[1,6880,"\n"]],[6879,6879],[6880,6880]]],[1540524320933,["gjx16@GJXAIOU",[[1,6880,"功能3："]],[6880,6880],[6884,6884]]],[1540524384270,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524384270,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524361368,["gjx16@GJXAIOU",[[1,6884,"把字符串1和字符串2通过函数参数返回至main，并且打印"]],[6884,6884],[6912,6912]]],[1540524361818,["gjx16@GJXAIOU",[[1,6913,"\n"]],[6912,6912],[6913,6913]]],[1540524374359,["gjx16@GJXAIOU",[[1,6913,"功能4：主函数能测试通过"]],[6913,6913],[6925,6925]]],[1540524376810,["gjx16@GJXAIOU",[[1,6926,"\n"]],[6925,6925],[6926,6926]]],[1540524377026,["gjx16@GJXAIOU",[[1,6927,"\n"]],[6926,6926],[6927,6927]]],[1540524382759,["gjx16@GJXAIOU",[[-1,6808,"有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过"]],[6808,6925],[6808,6808]]],[1540524444272,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524444272,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524385584,["gjx16@GJXAIOU",[[-1,6810,"\n"]],[6810,6810],[6809,6809]]],[1540524385711,["gjx16@GJXAIOU",[[-1,6809,"\n"]],[6809,6809],[6808,6808]]],[1540524390447,["gjx16@GJXAIOU",[[1,6814,"、&"]],[6814,6814],[6816,6816]]],[1540524391544,["gjx16@GJXAIOU",[[-1,6814,"、&"]],[6816,6816],[6814,6814]]],[1540524392836,["gjx16@GJXAIOU",[[1,6814,"/*"]],[6814,6814],[6816,6816]]],[1540524393956,["gjx16@GJXAIOU",[[1,6818,"\n"]],[6816,6816],[6817,6817]]],[1540524394098,["gjx16@GJXAIOU",[[1,6819,"\n"]],[6817,6817],[6818,6818]]],[1540524394268,["gjx16@GJXAIOU",[[1,6820,"\n"]],[6818,6818],[6819,6819]]],[1540524396319,["gjx16@GJXAIOU",[[1,6819,"*/"]],[6819,6819],[6821,6821]]],[1540524398612,["gjx16@GJXAIOU",[[1,6817,"有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过"]],[6817,6817],[6934,6934]]],[1540524403744,["gjx16@GJXAIOU",[[-1,6935,"\n"]],[6935,6935],[6934,6934]]],[1540524405569,["gjx16@GJXAIOU",[[1,6939,"\n"]],[6938,6938],[6939,6939]]],[1540524409796,["gjx16@GJXAIOU",[[1,6939,"#inluce"]],[6939,6939],[6946,6946]]],[1540524412051,["gjx16@GJXAIOU",[[-1,6942,"luce"]],[6946,6946],[6942,6942]]],[1540524414917,["gjx16@GJXAIOU",[[1,6942,"clude<>"]],[6942,6942],[6949,6949]]],[1540524418884,["gjx16@GJXAIOU",[[1,6948,"stdio.h"]],[6948,6948],[6955,6955]]],[1540524420740,["gjx16@GJXAIOU",[[1,6957,"\n"]],[6956,6956],[6957,6957]]],[1540524423900,["gjx16@GJXAIOU",[[1,6957,"#inluce"]],[6957,6957],[6964,6964]]],[1540524425536,["gjx16@GJXAIOU",[[-1,6960,"luce"]],[6964,6964],[6960,6960]]],[1540524428516,["gjx16@GJXAIOU",[[1,6960,"clude<>"]],[6960,6960],[6967,6967]]],[1540524433883,["gjx16@GJXAIOU",[[1,6966,"stdlib.h"]],[6966,6966],[6974,6974]]],[1540524437465,["gjx16@GJXAIOU",[[1,6976,"\n"]],[6975,6975],[6976,6976]]],[1540524440503,["gjx16@GJXAIOU",[[1,6976,"#inlcued"]],[6976,6976],[6984,6984]]],[1540524441904,["gjx16@GJXAIOU",[[-1,6979,"lcued"]],[6984,6984],[6979,6979]]],[1540524444107,["gjx16@GJXAIOU",[[1,6979,"clude>"]],[6979,6979],[6985,6985]]],[1540524504280,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524504280,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524444740,["gjx16@GJXAIOU",[[-1,6984,">"]],[6985,6985],[6984,6984]]],[1540524445632,["gjx16@GJXAIOU",[[1,6984,"<>"]],[6984,6984],[6986,6986]]],[1540524449291,["gjx16@GJXAIOU",[[1,6985,"string.h"]],[6985,6985],[6993,6993]]],[1540524451362,["gjx16@GJXAIOU",[[1,6995,"\n"]],[6994,6994],[6995,6995]]],[1540524564273,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524564273,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524520085,["gjx16@GJXAIOU",[[1,6996,"\n"]],[6995,6995],[6996,6996]]],[1540524520219,["gjx16@GJXAIOU",[[1,6997,"\n"]],[6996,6996],[6997,6997]]],[1540524520404,["gjx16@GJXAIOU",[[1,6998,"\n"]],[6997,6997],[6998,6998]]],[1540524520536,["gjx16@GJXAIOU",[[1,6999,"\n"]],[6998,6998],[6999,6999]]],[1540524520658,["gjx16@GJXAIOU",[[1,7000,"\n"]],[6999,6999],[7000,7000]]],[1540524524517,["gjx16@GJXAIOU",[[1,7000,"int main()"]],[7000,7000],[7010,7010]]],[1540524528480,["gjx16@GJXAIOU",[[1,7009,"voif"]],[7009,7009],[7013,7013]]],[1540524528973,["gjx16@GJXAIOU",[[-1,7012,"f"]],[7013,7013],[7012,7012]]],[1540524529109,["gjx16@GJXAIOU",[[1,7012,"d"]],[7012,7012],[7013,7013]]],[1540524530796,["gjx16@GJXAIOU",[[1,7015,"\n"]],[7014,7014],[7015,7015]]],[1540524532070,["gjx16@GJXAIOU",[[1,7015,"{}"]],[7015,7015],[7017,7017]]],[1540524533148,["gjx16@GJXAIOU",[[1,7016,"\n"]],[7016,7016],[7017,7017]]],[1540524533336,["gjx16@GJXAIOU",[[1,7017,"\n"]],[7017,7017],[7018,7018]]],[1540524533527,["gjx16@GJXAIOU",[[1,7018,"\n"]],[7018,7018],[7019,7019]]],[1540524533669,["gjx16@GJXAIOU",[[1,7019,"\n"]],[7019,7019],[7020,7020]]],[1540524536197,["gjx16@GJXAIOU",[[1,7017,"  "]],[7017,7017],[7019,7019]]],[1540524624276,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524624276,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524596206,["gjx16@GJXAIOU",[[1,7019,"int "]],[7019,7019],[7023,7023]]],[1540524597101,["gjx16@GJXAIOU",[[-1,7019,"int "]],[7023,7023],[7019,7019]]],[1540524603664,["gjx16@GJXAIOU",[[1,7019,"char *p = \"\";"]],[7019,7019],[7032,7032]]],[1540524613053,["gjx16@GJXAIOU",[[1,7030,"****"]],[7030,7030],[7032,7032]]],[1540524616273,["gjx16@GJXAIOU",[[-1,7030,"****"]],[7034,7034],[7030,7030]]],[1540524616956,["gjx16@GJXAIOU",[[1,7030,"1a2b3c4d"]],[7030,7030],[7038,7038]]],[1540524619036,["gjx16@GJXAIOU",[[1,7041,"  \n"]],[7040,7040],[7043,7043]]],[1540524623303,["gjx16@GJXAIOU",[[1,7043,"char buf1"]],[7043,7043],[7052,7052]]],[1540524684282,[null,[[-1,6041,"`\n`"],[1,6044,"\n\n}\n"],[1,6046,"``"],[-1,6048,"![1"],[-1,6073,"~"],[1,6074,"\n"],[-1,6763,"~"],[1,6764,"\n"]],[6041,6041],[6765,6765]]],[1540524684282,[null,[[1,6041,"`\n`"],[-1,6041,"\n\n}\n"],[-1,6047,"``"],[1,6051,"![1"],[1,6073,"~"],[-1,6073,"\n"],[1,6763,"~"],[-1,6763,"\n"]],[6765,6765],[6041,6041]]],[1540524625076,["gjx16@GJXAIOU",[[1,7053,"]"]],[7053,7053],[7054,7054]]]],null,"gjx16@GJXAIOU"],["5ee429a9-56fb-48b9-be7f-44dd4f708268",1540535372896,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n不允许向NULL和未知地址拷贝内存\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n4.**区别三个语句**\n```c\nint fun()\n{\n  int a = 10;\n  return a;\n}\n//ok，b的值为10\n\nint *fun()\n{\n  int a = 10;\n  return &a;\n}\n//本质上第一个和第二个是等价的\n//p确实保存了fun()内部a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域\n\nint *fun()\n{\n  static int a = 10;\n  return &a;\n\n}\n//a放在全局区，函数运行完毕，a的空间不释放\n\nint main()\n{\n  int b = fun();\n}\n\n\n```\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数组模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n分别同时从左边和从右边向中间查找\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *n)\n{\n\tif (p == NULL || n == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\t*n = end - begin + 1;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, &n);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\tprintf(\"n = %d\\n\", n);\n\treturn 0;\n\n\n}\n\n```\n\n4.2**将中间有元素的那一部分打印出来**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n}\n\n```\n\n## 复习以及作业\n\n- 作业\n1.**根据元素位置的奇偶性挑出字符串中的对应元素**\n\n```c\n/*\n有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\n\n\n\nint main(void)\n{\n  char *p = \"1a2b3c4d\";\n  char buf1[]\n\n\n}\n```\n\n\n\n",[[1540535352553,["gjx16@GJXAIOU",[[1,6775,"\n"]],[6774,6774],[6775,6775]]],[1540535356940,["gjx16@GJXAIOU",[[1,6775,"1.****"]],[6775,6775],[6779,6779]]],[1540535358745,["gjx16@GJXAIOU",[[1,6779,"。"]],[6779,6779],[6780,6780]]],[1540535360066,["gjx16@GJXAIOU",[[-1,6779,"。"]],[6780,6780],[6779,6779]]],[1540535369952,["gjx16@GJXAIOU",[[1,6779,".c可程序"]],[6779,6779],[6784,6784]]],[1540535375434,["gjx16@GJXAIOU",[[1,6786,"过程"]],[6786,6786],[6788,6788]]],[1540535379307,["gjx16@GJXAIOU",[[1,6791,"\n"]],[6790,6790],[6791,6791]]],[1540535409279,["gjx16@GJXAIOU",[[1,6791,"****"]],[6791,6791],[6793,6793]]],[1540535414200,["gjx16@GJXAIOU",[[1,6793,"预处理："]],[6793,6793],[6797,6797]]],[1540535430322,["gjx16@GJXAIOU",[[1,6799," 宏定义展开、头文件"]],[6799,6799],[6809,6809]]],[1540535491804,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6810,"- "]],[6784,6784],[6812,6812]]],[1540535491804,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6810,"- "]],[6812,6812],[6784,6784]]],[1540535488276,["gjx16@GJXAIOU",[[1,6809,"展开、条件编译、这里不会检查语法"]],[6809,6809],[6825,6825]]],[1540535488990,["gjx16@GJXAIOU",[[1,6826,"\n"]],[6825,6825],[6826,6826]]],[1540535490644,["gjx16@GJXAIOU",[[1,6826,"****"]],[6826,6826],[6828,6828]]],[1540535551809,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6831,"- "]],[6784,6784],[6833,6833]]],[1540535551809,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6831,"- "]],[6833,6833],[6784,6784]]],[1540535494305,["gjx16@GJXAIOU",[[1,6828,"编译："]],[6828,6828],[6831,6831]]],[1540535521853,["gjx16@GJXAIOU",[[1,6833," 检查语法，将"]],[6833,6833],[6840,6840]]],[1540535611901,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6841,"- "]],[6784,6784],[6843,6843]]],[1540535611901,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6841,"- "]],[6843,6843],[6784,6784]]],[1540535588698,["gjx16@GJXAIOU",[[1,6840,"预处理后的文件编译成成"]],[6840,6840],[6851,6851]]],[1540535590306,["gjx16@GJXAIOU",[[-1,6849,"成成"]],[6851,6851],[6849,6849]]],[1540535602547,["gjx16@GJXAIOU",[[1,6849,"生成汇编文件"]],[6849,6849],[6855,6855]]],[1540535605975,["gjx16@GJXAIOU",[[1,6856,"\n"]],[6855,6855],[6856,6856]]],[1540535607627,["gjx16@GJXAIOU",[[1,6856,"****"]],[6856,6856],[6858,6858]]],[1540535611766,["gjx16@GJXAIOU",[[1,6858,"汇编"]],[6858,6858],[6860,6860]]],[1540535671890,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6863,"- "]],[6784,6784],[6865,6865]]],[1540535671890,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6863,"- "]],[6865,6865],[6784,6784]]],[1540535616653,["gjx16@GJXAIOU",[[1,6860,":"]],[6860,6860],[6861,6861]]],[1540535621621,["gjx16@GJXAIOU",[[1,6863," jiang huai"]],[6863,6863],[6874,6874]]],[1540535624011,["gjx16@GJXAIOU",[[-1,6864,"jiang huai"]],[6874,6874],[6864,6864]]],[1540535636418,["gjx16@GJXAIOU",[[1,6864,"将汇编文件生成目标文件（）"]],[6864,6864],[6877,6877]]],[1540535640247,["gjx16@GJXAIOU",[[1,6876,"二进制文件"]],[6876,6876],[6881,6881]]],[1540535642495,["gjx16@GJXAIOU",[[1,6883,"\n"]],[6882,6882],[6883,6883]]],[1540535644210,["gjx16@GJXAIOU",[[1,6883,"****"]],[6883,6883],[6885,6885]]],[1540535731889,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6888,"- "]],[6784,6784],[6890,6890]]],[1540535731889,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6888,"- "]],[6890,6890],[6784,6784]]],[1540535675409,["gjx16@GJXAIOU",[[1,6885,"链接："]],[6885,6885],[6888,6888]]],[1540535690385,["gjx16@GJXAIOU",[[1,6890," 将目标文件链接称为可执行程序"]],[6890,6890],[6905,6905]]],[1540535692340,["gjx16@GJXAIOU",[[1,6906,"\n"]],[6905,6905],[6906,6906]]],[1540535693331,["gjx16@GJXAIOU",[[1,6907,"\n"]],[6906,6906],[6907,6907]]],[1540535700735,["gjx16@GJXAIOU",[[1,6907,"程序只有在运行"]],[6907,6907],[6914,6914]]],[1540535702786,["gjx16@GJXAIOU",[[-1,6912,"运行"]],[6914,6914],[6912,6912]]],[1540535713592,["gjx16@GJXAIOU",[[1,6912,"运行才加载到内存（）"]],[6912,6912],[6922,6922]]],[1540535715727,["gjx16@GJXAIOU",[[1,6921,"有"]],[6921,6921],[6922,6922]]],[1540535716690,["gjx16@GJXAIOU",[[-1,6921,"有"]],[6922,6922],[6921,6921]]],[1540535723351,["gjx16@GJXAIOU",[[1,6921,"由系统完成  "]],[6921,6921],[6928,6928]]],[1540535724227,["gjx16@GJXAIOU",[[-1,6927," "]],[6928,6928],[6927,6927]]],[1540535728369,["gjx16@GJXAIOU",[[1,6928,"，但是"]],[6928,6928],[6931,6931]]],[1540535791891,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6932,"- "]],[6784,6784],[6934,6934]]],[1540535791891,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6932,"- "]],[6934,6934],[6784,6784]]],[1540535733286,["gjx16@GJXAIOU",[[1,6931,"耨个"]],[6931,6931],[6933,6933]]],[1540535734475,["gjx16@GJXAIOU",[[-1,6931,"耨个"]],[6933,6933],[6931,6931]]],[1540535780071,["gjx16@GJXAIOU",[[1,6931,"某个变量具体分配多大空间在编译的时候已经确定，但是"]],[6931,6931],[6956,6956]]],[1540535780962,["gjx16@GJXAIOU",[[-1,6954,"但是"]],[6956,6956],[6954,6954]]],[1540535791719,["gjx16@GJXAIOU",[[1,6954,"当实际运行时候正式分配"]],[6954,6954],[6965,6965]]],[1540535852205,[null,[[-1,6784,"**"],[1,6786,"程序"],[1,6788,"**"],[-1,6789,"- "],[1,6966,"- "]],[6784,6784],[6968,6968]]],[1540535852205,[null,[[1,6784,"**"],[-1,6784,"程序"],[-1,6788,"**"],[1,6791,"- "],[-1,6966,"- "]],[6968,6968],[6784,6784]]],[1540535795534,["gjx16@GJXAIOU",[[1,6966,"\n"]],[6965,6965],[6966,6966]]],[1540535795691,["gjx16@GJXAIOU",[[1,6967,"\n"]],[6966,6966],[6967,6967]]],[1540535795851,["gjx16@GJXAIOU",[[1,6968,"\n"]],[6967,6967],[6968,6968]]]],null,"gjx16@GJXAIOU"],["15c54105-873c-48ae-ac7f-cf5f1fab8ff3",1540537026426,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n不允许向NULL和未知地址拷贝内存\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n4.**区别三个语句**\n```c\nint fun()\n{\n  int a = 10;\n  return a;\n}\n//ok，b的值为10\n\nint *fun()\n{\n  int a = 10;\n  return &a;\n}\n//本质上第一个和第二个是等价的\n//p确实保存了fun()内部a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域\n\nint *fun()\n{\n  static int a = 10;\n  return &a;\n\n}\n//a放在全局区，函数运行完毕，a的空间不释放\n\nint main()\n{\n  int b = fun();\n}\n\n\n```\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数组模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n分别同时从左边和从右边向中间查找\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *n)\n{\n\tif (p == NULL || n == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\t*n = end - begin + 1;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, &n);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\tprintf(\"n = %d\\n\", n);\n\treturn 0;\n\n\n}\n\n```\n\n4.2**将中间有元素的那一部分打印出来**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n}\n\n```\n\n## 复习以及作业\n\n1.**.c可程序程序过程**\n**预处理：** 宏定义展开、头文件展开、条件编译、这里不会检查语法\n**编译：** 检查语法，将预处理后的文件编译生成汇编文件\n**汇编:** 将汇编文件生成目标文件（二进制文件）\n**链接：** 将目标文件链接称为可执行程序\n\n程序只有在运行才加载到内存（由系统完成 ），但是某个变量具体分配多大空间在编译的时候已经确定，当实际运行时候正式分配\n\n\n\n- 作业\n1.**根据元素位置的奇偶性挑出字符串中的对应元素**\n\n```c\n/*\n有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\n\n\n\nint main(void)\n{\n  char *p = \"1a2b3c4d\";\n  char buf1[]\n\n\n}\n```\n\n\n\n",[[1540537009465,["gjx16@GJXAIOU",[[1,7260,"\n"]],[7256,7256],[7257,7257]]],[1540537015015,["gjx16@GJXAIOU",[[1,7257,"程序运行结果："]],[7257,7257],[7264,7264]]],[1540537015867,["gjx16@GJXAIOU",[[1,7268,"\n"]],[7264,7264],[7265,7265]]],[1540537017504,["gjx16@GJXAIOU",[[1,7265,"buf1 = abcd\nbuf2 = 1234\n请按任意键继续. . ."]],[7265,7265],[7301,7301]]],[1540537021387,["gjx16@GJXAIOU",[[-1,7289,"请按任意键继续. . ."]],[7301,7301],[7289,7289]]],[1540537024186,["gjx16@GJXAIOU",[[1,7265,"·"]],[7265,7265],[7266,7266]]],[1540537027844,["gjx16@GJXAIOU",[[-1,7265,"·"]],[7266,7266],[7265,7265]]],[1540537028880,["gjx16@GJXAIOU",[[1,7265,"`"]],[7265,7265],[7266,7266]]],[1540537030993,["gjx16@GJXAIOU",[[1,7278,"`"]],[7278,7278],[7279,7279]]],[1540537035855,["gjx16@GJXAIOU",[[1,7290,"`"]],[7290,7290],[7291,7291]]],[1540537036665,["gjx16@GJXAIOU",[[1,7277,"`"]],[7277,7277],[7278,7278]]],[1540537058907,["gjx16@GJXAIOU",[[-1,7132,"\n"],[1,7190,"int getstr1str2(char *p, char *buf1, char *buf2)//返回值为Int"],[1,7191,"{\n\tchar *str = p;\n\t\n\t\tif (str == NULL || buf1 == NULL || buf2 == NULL)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (i = 0; i < strlen(str); i++)\n\t\t\t{\n\t\t\tif (i % 2 != 0)\n\t\t\t{\n\t\t\t\t*buf1 = str[i];\n\t\t\t\tbuf1++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*buf2 = str[i];\n\t\t\t\tbuf2++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn 0;\n\n}"],[-1,7211,"  "],[1,7213,"\t"],[1,7235,"\tchar"],[1,7236,"buf1[50]"],[1,7237,"= { 0 };\n\t"],[-1,7245,"1[]\n"],[1,7249,"2[50] = { 0 };\n\tint ret = 0;\n\n\tret = getstr1str2(p,buf1,buf2);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getdtr1str2 err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"buf1 = %s\\n\",buf1);\n\tprintf(\"buf2 = %s\\n\",buf2);\n\tsystem(\"pause\");\n\treturn 0;"]],[7132,7252],[7845,7845]]],[1540537072695,["gjx16@GJXAIOU",[[-1,7243,"I"]],[7244,7244],[7243,7243]]],[1540537073091,["gjx16@GJXAIOU",[[1,7243,"i"]],[7243,7243],[7244,7244]]],[1540537077050,["gjx16@GJXAIOU",[[1,7246,",bushi"]],[7246,7246],[7252,7252]]],[1540537078231,["gjx16@GJXAIOU",[[-1,7247,"bushi"]],[7252,7252],[7247,7247]]],[1540537082615,["gjx16@GJXAIOU",[[1,7247,"不是void"]],[7247,7247],[7253,7253]]],[1540537093925,["gjx16@GJXAIOU",[[1,7275,"\n\t"]],[7271,7271],[7273,7273]]],[1540537096978,["gjx16@GJXAIOU",[[1,7273,"//y"]],[7273,7273],[7276,7276]]],[1540537097616,["gjx16@GJXAIOU",[[-1,7275,"y"]],[7276,7276],[7275,7275]]],[1540537108729,["gjx16@GJXAIOU",[[1,7275,"因为参数赋值时候为cha"]],[7275,7275],[7287,7287]]],[1540537110164,["gjx16@GJXAIOU",[[-1,7284,"cha"]],[7287,7287],[7284,7284]]],[1540537126050,["gjx16@GJXAIOU",[[1,7284," char *p = buf,deng"]],[7284,7284],[7303,7303]]],[1540537128524,["gjx16@GJXAIOU",[[-1,7299,"deng"]],[7303,7303],[7299,7299]]],[1540537135392,["gjx16@GJXAIOU",[[1,7299,"等价于插入"]],[7299,7299],[7304,7304]]],[1540537136165,["gjx16@GJXAIOU",[[-1,7302,"插入"]],[7304,7304],[7302,7302]]],[1540537145214,["gjx16@GJXAIOU",[[1,7302," char *p ;  p ="]],[7302,7302],[7317,7317]]],[1540537147207,["gjx16@GJXAIOU",[[1,7318,"buf"]],[7318,7318],[7321,7321]]],[1540537265398,[null,[[-1,7317,"\n"],[1,7318," "],[1,7321,"\n"]],[7317,7317],[7322,7322]]],[1540537265399,[null,[[1,7317,"\n"],[-1,7317," "],[-1,7321,"\n"]],[7322,7322],[7317,7317]]],[1540537260782,["gjx16@GJXAIOU",[[1,7374,"//当这三个全为空的时候"]],[7374,7374],[7386,7386]]],[1540537325395,[null,[[-1,7317,"\n"],[1,7318," "],[1,7321,"\n"],[-1,7373,"\n"],[1,7386,"\n"]],[7317,7317],[7387,7387]]],[1540537325395,[null,[[1,7317,"\n"],[-1,7317," "],[-1,7321,"\n"],[1,7374,"\n"],[-1,7386,"\n"]],[7387,7387],[7317,7317]]],[1540537314322,["gjx16@GJXAIOU",[[1,7494,"、、"]],[7494,7494],[7496,7496]]],[1540537315386,["gjx16@GJXAIOU",[[-1,7494,"、、"]],[7496,7496],[7494,7494]]],[1540537323503,["gjx16@GJXAIOU",[[1,7494,"//当为技术位置"]],[7494,7494],[7502,7502]]],[1540537324636,["gjx16@GJXAIOU",[[-1,7498,"技术位置"]],[7502,7502],[7498,7498]]],[1540537385395,[null,[[-1,7317,"\n"],[1,7318," "],[1,7321,"\n"],[-1,7373,"\n"],[1,7386,"\n"],[-1,7493,"\n"],[1,7498,"\n"]],[7317,7317],[7499,7499]]],[1540537385395,[null,[[1,7317,"\n"],[-1,7317," "],[-1,7321,"\n"],[1,7374,"\n"],[-1,7386,"\n"],[1,7494,"\n"],[-1,7498,"\n"]],[7499,7499],[7317,7317]]],[1540537331434,["gjx16@GJXAIOU",[[1,7498,"奇数位置的时候"]],[7498,7498],[7505,7505]]],[1540537356141,["gjx16@GJXAIOU",[[1,7970,"\n"]],[7967,7967],[7968,7968]]],[1540537363715,["gjx16@GJXAIOU",[[1,7968,"2."]],[7968,7968],[7970,7970]]],[1540537445399,[null,[[-1,7317,"\n"],[1,7318," "],[1,7321,"\n"],[-1,7373,"\n"],[1,7386,"\n"],[-1,7493,"\n"],[1,7505,"\n"],[-1,7967,"\n"],[1,7970,"\n"]],[7317,7317],[7971,7971]]],[1540537445399,[null,[[1,7317,"\n"],[-1,7317," "],[-1,7321,"\n"],[1,7374,"\n"],[-1,7386,"\n"],[1,7494,"\n"],[-1,7505,"\n"],[1,7968,"\n"],[-1,7970,"\n"]],[7971,7971],[7317,7317]]],[1540537425956,["gjx16@GJXAIOU",[[1,7970,"****"]],[7970,7970],[7972,7972]]],[1540537505392,[null,[[-1,7317,"\n"],[1,7318," "],[1,7321,"\n"],[-1,7373,"\n"],[1,7386,"\n"],[-1,7493,"\n"],[1,7505,"\n"],[-1,7967,"\n"],[1,7974,"\n"]],[7317,7317],[7975,7975]]],[1540537505392,[null,[[1,7317,"\n"],[-1,7317," "],[-1,7321,"\n"],[1,7374,"\n"],[-1,7386,"\n"],[1,7494,"\n"],[-1,7505,"\n"],[1,7968,"\n"],[-1,7974,"\n"]],[7975,7975],[7317,7317]]],[1540537460655,["gjx16@GJXAIOU",[[1,7972,"键值使用"]],[7972,7972],[7976,7976]]],[1540537463415,["gjx16@GJXAIOU",[[1,7981,"\n"]],[7978,7978],[7979,7979]]],[1540537468268,["gjx16@GJXAIOU",[[1,7132,"\n"]],[7131,7131],[7132,7132]]],[1540537474462,["gjx16@GJXAIOU",[[1,7980,"```"]],[7980,7980],[7983,7983]]],[1540537474502,["gjx16@GJXAIOU",[[1,7983,"language\n```\n"]],[7983,7983],[7983,7991]]],[1540537475640,["gjx16@GJXAIOU",[[-1,7983,"language"],[1,7991,"c"]],[7983,7991],[7984,7984]]],[1540537475868,["gjx16@GJXAIOU",[[1,7985,"\n"]],[7984,7984],[7985,7985]]],[1540537481246,["gjx16@GJXAIOU",[[1,7985,"/*"]],[7985,7985],[7987,7987]]],[1540537482181,["gjx16@GJXAIOU",[[1,7988,"\n"]],[7987,7987],[7988,7988]]],[1540537482342,["gjx16@GJXAIOU",[[1,7989,"\n"]],[7988,7988],[7989,7989]]],[1540537482517,["gjx16@GJXAIOU",[[1,7990,"\n"]],[7989,7989],[7990,7990]]],[1540537482670,["gjx16@GJXAIOU",[[1,7991,"\n"]],[7990,7990],[7991,7991]]],[1540537482916,["gjx16@GJXAIOU",[[1,7992,"\n"]],[7991,7991],[7992,7992]]],[1540537484998,["gjx16@GJXAIOU",[[1,7992,"*/"]],[7992,7992],[7994,7994]]],[1540538645426,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[1,7998,"\n"]],[7318,7318],[7999,7999]]],[1540538645426,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[-1,7998,"\n"]],[7999,7999],[7318,7318]]],[1540538642685,["gjx16@GJXAIOU",[[-1,7973,"键值使用"]],[7977,7977],[7973,7973]]],[1540538644579,["gjx16@GJXAIOU",[[1,7973,"chazh"]],[7973,7973],[7978,7978]]],[1540538645253,["gjx16@GJXAIOU",[[-1,7975,"azh"]],[7978,7978],[7975,7975]]],[1540538705821,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[1,7996,"\n"]],[7318,7318],[7997,7997]]],[1540538705821,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[-1,7996,"\n"]],[7997,7997],[7318,7318]]],[1540538645669,["gjx16@GJXAIOU",[[-1,7973,"c"]],[7974,7974],[7973,7973]]],[1540538649132,["gjx16@GJXAIOU",[[1,7973,"查找键值"]],[7973,7973],[7977,7977]]],[1540538651288,["gjx16@GJXAIOU",[[1,7980,"\n"]],[7979,7979],[7980,7980]]],[1540538674130,["gjx16@GJXAIOU",[[1,7980,"如果查到键值，就返回键值等号后面的值，如果没有就"]],[7980,7980],[8004,8004]]],[1540538684694,["gjx16@GJXAIOU",[[-1,7998,"，如果没有就"]],[8004,8004],[7998,7998]]],[1540538690594,["gjx16@GJXAIOU",[[1,7992,"对应"]],[7992,7992],[7994,7994]]],[1540542972832,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8001,"\n"],[1,8020,"\n"]],[7318,7318],[8021,8021]]],[1540542972832,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8001,"\n"],[-1,8019,"\n"]],[8021,8021],[7318,7318]]],[1540542968437,["gjx16@GJXAIOU",[[1,8009,"查找键值（“key = value”）字符串，在开发中经常使用"],[1,8010,"要求1：请自己定义一个接口，实现根据key获取"],[1,8011,"要求2：编写测试用例\n要求3：键值对中间可能有n多空格，请去除空格\n\n\n注意：键值对字符串格式可能如下：\n\"key1 = value1\"\n\"key2 =       value2\"\n\"key3   = valude3\"\n\"key4             = value4\"\n\"key5   =     \"\n\"key6   =\""],[1,8015,"\n\n\n//这是两边夹的函数，去除空格的作用\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n#include<stdlib.h>\n#define _CRT_SECURE_NO_WARNINGS \n#pragma warning(disable:4996)\n\nint  trimSpace(char *inbuf, char *outbuf)\n{\n\tif (inbuf == NULL || outbuf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tchar *p = inbuf;\n\tint begin = 0;\n\tint end = strlen(p) - 1;\n\tint n = 0;\n\n\tif (end < 0)\n\t{\n\t\treturn -2;\n\t}\n\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;\n\t}\n\t\n\twhile (isspace(p[end]))\n\t{\n\t\tend--;\n\t}\n\n\tn = end - begin + 1;//非空元素的个数\n\tstrncpy(outbuf, p + begin, n);\n\toutbuf[n] = 0;\n\treturn 0;\n}\n\n//查找key值的函数，并且获取后面的字符串、\nint getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int *valuebuflen)\n{\n\t/*\n\tkeyvaluebuf = \"key4 =     value4\"\n\tkeybuf = \"key4\"\n\t*/\n\n\tif (keybuf == NULL || keyvaluebuf == NULL || valuebuf == NULL || valuebuflen == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *p = NULL;\n\tint ret = 0;\n\t//查找匹配键值\n\t//“key4 =     value4”,找key4，找到返回首地址\n\tp = strstr(keyvaluebuf, keybuf);\n\t\tif(p == NULL)\n\t\t{\n\t\t\treturn -2;\n\t\t}\n\n\t//如果找到，重新设置起点位置，跳过“key4”\n\t//\"key4 =   value4\"  -> \"=   value4\"\n\tp = p + strlen(keybuf);\n\n\n\t//查到“=”\n\tp = strstr(p, \"=\");\n\tif (p == NULL)\n\t{\n\t\treturn -3;\n\t}\n\n\t//如果找到，重新设置起点位置，跳过“=”\n\t//\"=     value4\" ->  \"   value4\"\n\tp = p + strlen(\"=\");\n\n\n\t//去非空字符\n\tret = trimSpace(p, valuebuf);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"trimSpace err : %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\t//获取长度，通过*间接赋值\n\t*valuebuflen = strlen(valuebuf);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *keyVal = \"key4             = value4\";\n\tchar *key = \"key4\";//想要查找的key\n\tchar value[100] = { 0 };\n\tint len = 0;\n\tint ret = 0;\n\n\tret = getKeyByValue(keyVal, key, value, &len);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getKeyByValue err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"Val:%s\\n\", value);\n\tprintf(\"len = %d\\n\",len );\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n\n\n"]],[8006,8015],[10009,10009]]],[1540543032847,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8001,"\n"],[1,8009,"\n"],[-1,8231,"\n"],[1,8233,"/"],[-1,10009,"/"],[1,10014,"\n"]],[7318,7318],[10015,10015]]],[1540543032847,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8001,"\n"],[-1,8008,"\n"],[1,8231,"\n"],[-1,8232,"/"],[1,10009,"/"],[-1,10013,"\n"]],[10015,10015],[7318,7318]]],[1540542975959,["gjx16@GJXAIOU",[[-1,10009,"\n"]],[10009,10009],[10008,10008]]],[1540542976135,["gjx16@GJXAIOU",[[-1,10008,"\n"]],[10008,10008],[10007,10007]]],[1540542976666,["gjx16@GJXAIOU",[[-1,10007,"\n"]],[10007,10007],[10006,10006]]],[1540542988625,["gjx16@GJXAIOU",[[1,10011,"程序运行结果；"]],[10011,10011],[10018,10018]]],[1540542989887,["gjx16@GJXAIOU",[[-1,10017,"；"]],[10018,10018],[10017,10017]]],[1540542992246,["gjx16@GJXAIOU",[[1,10017,"："]],[10017,10017],[10018,10018]]],[1540542992778,["gjx16@GJXAIOU",[[1,10021,"\n"]],[10018,10018],[10019,10019]]],[1540542996247,["gjx16@GJXAIOU",[[1,10019,"Val:value4\nlen = 6"]],[10019,10019],[10037,10037]]],[1540543000546,["gjx16@GJXAIOU",[[1,10019,"`"]],[10019,10019],[10020,10020]]],[1540543001939,["gjx16@GJXAIOU",[[1,10032,"`"]],[10032,10032],[10033,10033]]],[1540543002993,["gjx16@GJXAIOU",[[-1,10032,"`"]],[10033,10033],[10032,10032]]],[1540543004310,["gjx16@GJXAIOU",[[1,10031,"`"]],[10031,10031],[10032,10032]]],[1540543006300,["gjx16@GJXAIOU",[[1,10039,"`"]],[10039,10039],[10040,10040]]],[1540543007171,["gjx16@GJXAIOU",[[1,10030,"`"]],[10030,10030],[10031,10031]]],[1540543026941,["gjx16@GJXAIOU",[[1,8000,"yij"]],[8000,8000],[8003,8003]]],[1540543027929,["gjx16@GJXAIOU",[[-1,7999,"值yij"]],[8003,8003],[7999,7999]]],[1540543030920,["gjx16@GJXAIOU",[[1,7999,"值以及"]],[7999,7999],[8002,8002]]],[1540543092834,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8003,"\n"],[1,8011,"\n"],[-1,8233,"\n"],[1,8235,"/"],[-1,10009,"\n"],[1,10013,"\n"]],[7318,7318],[10014,10014]]],[1540543092834,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8003,"\n"],[-1,8010,"\n"],[1,8233,"\n"],[-1,8234,"/"],[1,10009,"\n"],[-1,10012,"\n"]],[10014,10014],[7318,7318]]],[1540543032903,["gjx16@GJXAIOU",[[1,8002,"数组"]],[8002,8002],[8004,8004]]],[1540543033641,["gjx16@GJXAIOU",[[-1,8002,"数组"]],[8004,8004],[8002,8002]]],[1540543040078,["gjx16@GJXAIOU",[[1,8002,"字符串的长度"]],[8002,8002],[8008,8008]]],[1540543452867,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8009,"\n"],[1,8017,"\n"],[-1,8239,"\n"],[1,8241,"/"],[-1,10015,"\n"],[1,10019,"\n"]],[7318,7318],[10020,10020]]],[1540543452867,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8009,"\n"],[-1,8016,"\n"],[1,8239,"\n"],[-1,8240,"/"],[1,10015,"\n"],[-1,10018,"\n"]],[10020,10020],[7318,7318]]],[1540543451160,["gjx16@GJXAIOU",[[1,8806,"\n"]],[8805,8805],[8806,8806]]],[1540543451342,["gjx16@GJXAIOU",[[1,8807,"\n"]],[8806,8806],[8807,8807]]],[1540543451491,["gjx16@GJXAIOU",[[1,8808,"\n"]],[8807,8807],[8808,8808]]],[1540543451658,["gjx16@GJXAIOU",[[1,8809,"\n"]],[8808,8808],[8809,8809]]],[1540543512885,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8009,"\n"],[1,8017,"\n"],[-1,8239,"\n"],[1,8241,"/"],[-1,10019,"\n"],[1,10023,"\n"]],[7318,7318],[10024,10024]]],[1540543512885,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8009,"\n"],[-1,8016,"\n"],[1,8239,"\n"],[-1,8240,"/"],[1,10019,"\n"],[-1,10022,"\n"]],[10024,10024],[7318,7318]]],[1540543458992,["gjx16@GJXAIOU",[[-1,8244,"//这是两边夹的函数，去除空格的作用"]],[8244,8262],[8244,8244]]],[1540543462193,["gjx16@GJXAIOU",[[1,8382,"//这是两边夹的函数，去除空格的作用"]],[8382,8382],[8400,8400]]],[1540543464735,["gjx16@GJXAIOU",[[1,8382,"\n"]],[8381,8381],[8382,8382]]],[1540543464888,["gjx16@GJXAIOU",[[1,8383,"\n"]],[8382,8382],[8383,8383]]],[1540543467334,["gjx16@GJXAIOU",[[-1,8244,"\n"]],[8244,8244],[8243,8243]]],[1540543482434,["gjx16@GJXAIOU",[[1,8696," &&end "]],[8696,8696],[8703,8703]]],[1540543483638,["gjx16@GJXAIOU",[[-1,8699,"end "]],[8703,8703],[8699,8699]]],[1540543487293,["gjx16@GJXAIOU",[[1,8699," end > 0"]],[8699,8699],[8707,8707]]],[1540543491839,["gjx16@GJXAIOU",[[1,8708,"//bao"]],[8708,8708],[8713,8713]]],[1540543492708,["gjx16@GJXAIOU",[[-1,8710,"bao"]],[8713,8713],[8710,8710]]],[1540543504519,["gjx16@GJXAIOU",[[1,8710,"保证空字符串的时候跳出来"]],[8710,8710],[8722,8722]]],[1540543509087,["gjx16@GJXAIOU",[[1,8738,"    "]],[8738,8738],[8742,8742]]],[1540543509976,["gjx16@GJXAIOU",[[-1,8738,"    "],[1,8742,"\n"]],[8742,8742],[8739,8739]]],[1540543511071,["gjx16@GJXAIOU",[[1,8739,"    "]],[8739,8739],[8743,8743]]],[1540543572871,[null,[[-1,7318,"\n"],[1,7319," "],[1,7322,"\n"],[-1,7374,"\n"],[1,7387,"\n"],[-1,7494,"\n"],[1,7506,"\n"],[-1,7968,"\n"],[-1,7977,"h"],[1,7980,"\n"],[-1,8009,"\n"],[1,8017,"\n"],[-1,8239,"\n"],[1,8241,"/"],[-1,10050,"\n"],[1,10054,"\n"]],[7318,7318],[10055,10055]]],[1540543572871,[null,[[1,7318,"\n"],[-1,7318," "],[-1,7322,"\n"],[1,7375,"\n"],[-1,7387,"\n"],[1,7495,"\n"],[-1,7506,"\n"],[1,7969,"\n"],[1,7977,"h"],[-1,7979,"\n"],[1,8009,"\n"],[-1,8016,"\n"],[1,8239,"\n"],[-1,8240,"/"],[1,10050,"\n"],[-1,10053,"\n"]],[10055,10055],[7318,7318]]],[1540543517512,["gjx16@GJXAIOU",[[1,8743,"if()"]],[8743,8743],[8747,8747]]],[1540543520796,["gjx16@GJXAIOU",[[1,8746,"wnd"]],[8746,8746],[8749,8749]]],[1540543522143,["gjx16@GJXAIOU",[[-1,8746,"wnd"]],[8749,8749],[8746,8746]]],[1540543522242,["gjx16@GJXAIOU",[[1,8746,"="]],[8746,8746],[8747,8747]]],[1540543522560,["gjx16@GJXAIOU",[[-1,8746,"="]],[8747,8747],[8746,8746]]],[1540543525875,["gjx16@GJXAIOU",[[1,8746,"end == 0"]],[8746,8746],[8754,8754]]],[1540543529073,["gjx16@GJXAIOU",[[1,8756,"    \n"]],[8755,8755],[8760,8760]]],[1540543532347,["gjx16@GJXAIOU",[[1,8760,"  {}"]],[8760,8760],[8764,8764]]],[1540543534265,["gjx16@GJXAIOU",[[1,8763,"\n      \n      "]],[8763,8763],[8777,8777]]],[1540543540842,["gjx16@GJXAIOU",[[1,8770,"  return -2;"]],[8770,8770],[8782,8782]]],[1540543542784,["gjx16@GJXAIOU",[[1,8791,"      \n"]],[8790,8790],[8797,8797]]]],null,"gjx16@GJXAIOU"],["c2d9aef8-16ce-4df2-87db-dd694d8e691a",1540560815161,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n不允许向NULL和未知地址拷贝内存\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n4.**区别三个语句**\n```c\nint fun()\n{\n  int a = 10;\n  return a;\n}\n//ok，b的值为10\n\nint *fun()\n{\n  int a = 10;\n  return &a;\n}\n//本质上第一个和第二个是等价的\n//p确实保存了fun()内部a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域\n\nint *fun()\n{\n  static int a = 10;\n  return &a;\n\n}\n//a放在全局区，函数运行完毕，a的空间不释放\n\nint main()\n{\n  int b = fun();\n}\n\n\n```\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数组模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n分别同时从左边和从右边向中间查找\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *n)\n{\n\tif (p == NULL || n == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\t*n = end - begin + 1;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, &n);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\tprintf(\"n = %d\\n\", n);\n\treturn 0;\n\n\n}\n\n```\n\n4.2**将中间有元素的那一部分打印出来**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n}\n\n```\n\n## 复习以及作业\n\n1.**.c可程序程序过程**\n**预处理：** 宏定义展开、头文件展开、条件编译、这里不会检查语法\n**编译：** 检查语法，将预处理后的文件编译生成汇编文件\n**汇编:** 将汇编文件生成目标文件（二进制文件）\n**链接：** 将目标文件链接称为可执行程序\n\n程序只有在运行才加载到内存（由系统完成 ），但是某个变量具体分配多大空间在编译的时候已经确定，当实际运行时候正式分配\n\n\n\n- 作业\n1.**根据元素位置的奇偶性挑出字符串中的对应元素**\n\n```c\n/*\n有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint getstr1str2(char *p, char *buf1, char *buf2)//返回值为int,不是void\n{\n\tchar *str = p;\n\t//因为参数赋值时候为 char *p = buf,等价于 char *p ;  p = buf\n\t\n\t\tif (str == NULL || buf1 == NULL || buf2 == NULL)//当这三个全为空的时候\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (i = 0; i < strlen(str); i++)\n\t\t\t{\n\t\t\tif (i % 2 != 0)//当为奇数位置的时候\n\t\t\t{\n\t\t\t\t*buf1 = str[i];\n\t\t\t\tbuf1++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*buf2 = str[i];\n\t\t\t\tbuf2++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn 0;\n\n}\n\n\nint main(void)\n{\n\tchar *p = \"1a2b3c4d\";\n\tchar buf1[50] = { 0 };\n\tchar buf2[50] = { 0 };\n\tint ret = 0;\n\n\tret = getstr1str2(p,buf1,buf2);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getdtr1str2 err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"buf1 = %s\\n\",buf1);\n\tprintf(\"buf2 = %s\\n\",buf2);\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n程序运行结果：\n`buf1 = abcd`\n`buf2 = 1234`\n\n\n2.**查找键值**\n如果查到键值，就返回键值对应等号后面的值以及字符串的长度\n```c\n/*\n查找键值（“key = value”）字符串，在开发中经常使用\n要求1：请自己定义一个接口，实现根据key获取\n要求2：编写测试用例\n要求3：键值对中间可能有n多空格，请去除空格\n\n\n注意：键值对字符串格式可能如下：\n\"key1 = value1\"\n\"key2 =       value2\"\n\"key3   = valude3\"\n\"key4             = value4\"\n\"key5   =     \"\n\"key6   =\"\n\n*/\n\n\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n#include<stdlib.h>\n#define _CRT_SECURE_NO_WARNINGS \n#pragma warning(disable:4996)\n\n\n//这是两边夹的函数，去除空格的作用\nint  trimSpace(char *inbuf, char *outbuf)\n{\n\tif (inbuf == NULL || outbuf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tchar *p = inbuf;\n\tint begin = 0;\n\tint end = strlen(p) - 1;\n\tint n = 0;\n\n\tif (end < 0)\n\t{\n\t\treturn -2;\n\t}\n\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;\n\t}\n\t\n\twhile (isspace(p[end]) && end > 0)//保证空字符串的时候跳出来\n\t{\n\t\tend--;\n\t}\n\n    if(end == 0)\n      {\n        return -2;\n      }\n      \n\tn = end - begin + 1;//非空元素的个数\n\tstrncpy(outbuf, p + begin, n);\n\toutbuf[n] = 0;\n\treturn 0;\n}\n\n\n\n\n\n//查找key值的函数，并且获取后面的字符串、\nint getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int *valuebuflen)\n{\n\t/*\n\tkeyvaluebuf = \"key4 =     value4\"\n\tkeybuf = \"key4\"\n\t*/\n\n\tif (keybuf == NULL || keyvaluebuf == NULL || valuebuf == NULL || valuebuflen == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *p = NULL;\n\tint ret = 0;\n\t//查找匹配键值\n\t//“key4 =     value4”,找key4，找到返回首地址\n\tp = strstr(keyvaluebuf, keybuf);\n\t\tif(p == NULL)\n\t\t{\n\t\t\treturn -2;\n\t\t}\n\n\t//如果找到，重新设置起点位置，跳过“key4”\n\t//\"key4 =   value4\"  -> \"=   value4\"\n\tp = p + strlen(keybuf);\n\n\n\t//查到“=”\n\tp = strstr(p, \"=\");\n\tif (p == NULL)\n\t{\n\t\treturn -3;\n\t}\n\n\t//如果找到，重新设置起点位置，跳过“=”\n\t//\"=     value4\" ->  \"   value4\"\n\tp = p + strlen(\"=\");\n\n\n\t//去非空字符\n\tret = trimSpace(p, valuebuf);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"trimSpace err : %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\t//获取长度，通过*间接赋值\n\t*valuebuflen = strlen(valuebuf);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *keyVal = \"key4             = value4\";\n\tchar *key = \"key4\";//想要查找的key\n\tchar value[100] = { 0 };\n\tint len = 0;\n\tint ret = 0;\n\n\tret = getKeyByValue(keyVal, key, value, &len);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getKeyByValue err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"Val:%s\\n\", value);\n\tprintf(\"len = %d\\n\",len );\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n```\n程序运行结果：\n`Val:value4`\n`len = 6`\n\n\n",[[1540560762539,["gjx16@GJXAIOU",[[1,10141,"\n"]],[10138,10138],[10139,10139]]],[1540560762696,["gjx16@GJXAIOU",[[1,10142,"\n"]],[10139,10139],[10140,10140]]],[1540560892261,["gjx16@GJXAIOU",[[1,10143,"\n"]],[10139,10139],[10140,10140]]]],null,"gjx16@GJXAIOU"],["7ffbf831-ef4b-48e1-a9bb-a0cccda28562",1540644950943,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n不允许向NULL和未知地址拷贝内存\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n4.**区别三个语句**\n```c\nint fun()\n{\n  int a = 10;\n  return a;\n}\n//ok，b的值为10\n\nint *fun()\n{\n  int a = 10;\n  return &a;\n}\n//本质上第一个和第二个是等价的\n//p确实保存了fun()内部a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域\n\nint *fun()\n{\n  static int a = 10;\n  return &a;\n\n}\n//a放在全局区，函数运行完毕，a的空间不释放\n\nint main()\n{\n  int b = fun();\n}\n\n\n```\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数组模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n分别同时从左边和从右边向中间查找\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *n)\n{\n\tif (p == NULL || n == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\t*n = end - begin + 1;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, &n);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\tprintf(\"n = %d\\n\", n);\n\treturn 0;\n\n\n}\n\n```\n\n4.2**将中间有元素的那一部分打印出来**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n}\n\n```\n\n## 复习以及作业\n\n1.**.c可程序程序过程**\n**预处理：** 宏定义展开、头文件展开、条件编译、这里不会检查语法\n**编译：** 检查语法，将预处理后的文件编译生成汇编文件\n**汇编:** 将汇编文件生成目标文件（二进制文件）\n**链接：** 将目标文件链接称为可执行程序\n\n程序只有在运行才加载到内存（由系统完成 ），但是某个变量具体分配多大空间在编译的时候已经确定，当实际运行时候正式分配\n\n\n\n- 作业\n1.**根据元素位置的奇偶性挑出字符串中的对应元素**\n\n```c\n/*\n有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint getstr1str2(char *p, char *buf1, char *buf2)//返回值为int,不是void\n{\n\tchar *str = p;\n\t//因为参数赋值时候为 char *p = buf,等价于 char *p ;  p = buf\n\t\n\t\tif (str == NULL || buf1 == NULL || buf2 == NULL)//当这三个全为空的时候\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (i = 0; i < strlen(str); i++)\n\t\t\t{\n\t\t\tif (i % 2 != 0)//当为奇数位置的时候\n\t\t\t{\n\t\t\t\t*buf1 = str[i];\n\t\t\t\tbuf1++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*buf2 = str[i];\n\t\t\t\tbuf2++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn 0;\n\n}\n\n\nint main(void)\n{\n\tchar *p = \"1a2b3c4d\";\n\tchar buf1[50] = { 0 };\n\tchar buf2[50] = { 0 };\n\tint ret = 0;\n\n\tret = getstr1str2(p,buf1,buf2);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getdtr1str2 err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"buf1 = %s\\n\",buf1);\n\tprintf(\"buf2 = %s\\n\",buf2);\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n程序运行结果：\n`buf1 = abcd`\n`buf2 = 1234`\n\n\n2.**查找键值**\n如果查到键值，就返回键值对应等号后面的值以及字符串的长度\n```c\n/*\n查找键值（“key = value”）字符串，在开发中经常使用\n要求1：请自己定义一个接口，实现根据key获取\n要求2：编写测试用例\n要求3：键值对中间可能有n多空格，请去除空格\n\n\n注意：键值对字符串格式可能如下：\n\"key1 = value1\"\n\"key2 =       value2\"\n\"key3   = valude3\"\n\"key4             = value4\"\n\"key5   =     \"\n\"key6   =\"\n\n*/\n\n\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n#include<stdlib.h>\n#define _CRT_SECURE_NO_WARNINGS \n#pragma warning(disable:4996)\n\n\n//这是两边夹的函数，去除空格的作用\nint  trimSpace(char *inbuf, char *outbuf)\n{\n\tif (inbuf == NULL || outbuf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tchar *p = inbuf;\n\tint begin = 0;\n\tint end = strlen(p) - 1;\n\tint n = 0;\n\n\tif (end < 0)\n\t{\n\t\treturn -2;\n\t}\n\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;\n\t}\n\t\n\twhile (isspace(p[end]) && end > 0)//保证空字符串的时候跳出来\n\t{\n\t\tend--;\n\t}\n\n    if(end == 0)\n      {\n        return -2;\n      }\n      \n\tn = end - begin + 1;//非空元素的个数\n\tstrncpy(outbuf, p + begin, n);\n\toutbuf[n] = 0;\n\treturn 0;\n}\n\n\n\n\n\n//查找key值的函数，并且获取后面的字符串、\nint getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int *valuebuflen)\n{\n\t/*\n\tkeyvaluebuf = \"key4 =     value4\"\n\tkeybuf = \"key4\"\n\t*/\n\n\tif (keybuf == NULL || keyvaluebuf == NULL || valuebuf == NULL || valuebuflen == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *p = NULL;\n\tint ret = 0;\n\t//查找匹配键值\n\t//“key4 =     value4”,找key4，找到返回首地址\n\tp = strstr(keyvaluebuf, keybuf);\n\t\tif(p == NULL)\n\t\t{\n\t\t\treturn -2;\n\t\t}\n\n\t//如果找到，重新设置起点位置，跳过“key4”\n\t//\"key4 =   value4\"  -> \"=   value4\"\n\tp = p + strlen(keybuf);\n\n\n\t//查到“=”\n\tp = strstr(p, \"=\");\n\tif (p == NULL)\n\t{\n\t\treturn -3;\n\t}\n\n\t//如果找到，重新设置起点位置，跳过“=”\n\t//\"=     value4\" ->  \"   value4\"\n\tp = p + strlen(\"=\");\n\n\n\t//去非空字符\n\tret = trimSpace(p, valuebuf);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"trimSpace err : %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\t//获取长度，通过*间接赋值\n\t*valuebuflen = strlen(valuebuf);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *keyVal = \"key4             = value4\";\n\tchar *key = \"key4\";//想要查找的key\n\tchar value[100] = { 0 };\n\tint len = 0;\n\tint ret = 0;\n\n\tret = getKeyByValue(keyVal, key, value, &len);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getKeyByValue err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"Val:%s\\n\", value);\n\tprintf(\"len = %d\\n\",len );\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n```\n程序运行结果：\n`Val:value4`\n`len = 6`\n\n\n\n\n\n",[[1540644913617,["gjx16@GJXAIOU",[[1,84," \n"]],[83,83],[85,85]]],[1540645589720,["gjx16@GJXAIOU",[[-1,393,"\n"]],[392,392],[391,391]]],[1540645589882,["gjx16@GJXAIOU",[[-1,392,"\n"]],[391,391],[390,390]]],[1540645792238,["gjx16@GJXAIOU",[[1,428,"所长"]],[428,428],[430,430]]],[1540645792979,["gjx16@GJXAIOU",[[-1,429,"长"]],[430,430],[429,429]]],[1540645804513,["gjx16@GJXAIOU",[[1,429,"占的字节"]],[429,429],[433,433]]],[1540647066123,["gjx16@GJXAIOU",[[1,677,"将a的地址作为参数传递"]],[677,677],[688,688]]],[1540647099789,["gjx16@GJXAIOU",[[1,834,"\n"]],[833,833],[834,834]]],[1540647099940,["gjx16@GJXAIOU",[[1,835,"\n"]],[834,834],[835,835]]],[1540649367643,["gjx16@GJXAIOU",[[1,868,"就是一个错误到 "]],[868,868],[876,876]]],[1540649368922,["gjx16@GJXAIOU",[[-1,874,"到 "]],[876,876],[874,874]]],[1540649373405,["gjx16@GJXAIOU",[[1,874,"的程序，"]],[874,874],[878,878]]]],null,"gjx16@GJXAIOU"],["c13dcc26-270b-4e3f-b8f8-b29dccb13fe3",1544679285163,"# day02 指针强化\n\n- 指针也是一种数据类型\n- 指针变量也是一种变量\n\n\n## 一、指针也是一种数据类型\n\n 1、**指针变量和它指向的指针内存不同点：**\n \n-  首先改变指针的值并不会改变指向的内存区域的值，因为指针的值为一个地址变量，而指向的内存中是存储的具体的值；\n- 同样改变指针指向内存区域的值并不会改变指针的值；\n\n---\n\n2.**进行写内存时候，首先确保该内存可写（根据内存四区图）**\n不允许向NULL和未知地址拷贝内存\n```c\nchar *buf1 = \"asdfghjkl\";\nbuf1[2] = 1;\n//这个是错误的，因为该字符串是放置在常量区，是不可更改的；\n\nchar buf2[100] = \"shjfaksjdhgj\";\nbuf2[3] = 3;\n//可以更改，因为数组的元素都是放置在栈区，可以直接进行修改；\n\n```\n\n---\n\n3.指针是一种数据类型，指针进行加一或者减一的步长取决于指向的元素的类型所占的字节；\n\n---\n\n\n\n## 二、通过指针进行间接赋值\n\n1.**三大条件：**\n- 定义两个变量\n- 建立关系\n- 通过`*`操作内存\n\n```c\nint main(void)\n{\n    //定义两个变量\n    int a  = 100;\n    int *p ;\n\n    //建立关系\n    p = &a;\n\n    //通过*操作内存\n    *p = 20;\n    \n}\n```\n\n2.**如果通过形参改变实参的内存内容（值），必须采用地址传递**\n\n- 一级指针\n例子1：将a的地址作为参数传递\n```c\nvoid get_str(int *b)\n{\n  *b = 200;\n}\n\nint main(void)\n{\n    int a = 100;\n    get_str(&a);\n    printf(\"a = %d\\n\",a);\n}\n```\n程序运行结果为：`a = 200`\n\n\n\n- 二级指针\n\n例子2：（改变指针的地址）\n此程序没有改变地址，就是一个错误的程序，看下一个\n```c\n\nvoid fun(int *p)\n{\n  p = 0xaabb;\n  printf(\"fun:p = %p\\n\",p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;\n  printf(\"p1 = %p\\n\",p);\n\n  fun(p);//本质上是值传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 0000000000000122`\n由此可见指针p的地址并没有改变\n\n\n\n程序3：改变指针的地址（通过二级指针进行修改）\n\n```c\nvoid fun(int **p)\n{\n  *p = 0xaabb;\n  printf(\"fun:p = %p\\n\",*p);  \n}\n\n\nint main(void)\n{\n  int *p = 0x122;  \n  printf(\"p1 = %p\\n\",p);\n\n  fun(&p);//本质上是地址传递\n  printf(\"p2 = %p\\n\",p);\n\n  system(\"pause\");\n  return 0;\n}\n```\n程序运行结果：\n`p1 = 0000000000000122`\n`fun:p = 000000000000AABB`\n`p2 = 000000000000AABB`\n通过二级指针可以更改指针的地址\n\n再加一个示例加强理解：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid fun(char **p,int *len)\n{\n  if(p == NULL)\n    {\n      return;\n    }\n    char *tmp = (char *)malloc(100);\n    if(tmp == NULL)\n      {\n        return;\n      }\n      strcpy(tmp,\"adjfkdjfkdjf\");\n\n    //间接赋值\n    *p = tmp;\n    *len = strlen(tmp);\n}\n\nint main(void)\n{\n  char *p = NULL;\n  int len = 0;\n  fun(&p,&len);\n  if(p != NULL)\n    {\n      printf(\"p = %s\\n len = %d\\n\",p ,len);\n    }\n  return 0;\n}\n```\n程序运行结果：\n`p = adjfkdjfkdjf`\n`len = 12`\n\n![指针以及内存四区图]($resource/%E6%8C%87%E9%92%88%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n---\n\n\n3.**指针应该和内存四区相结合进行理解**\n\n- 主调函数和被调函数\n  - 主调函数可把堆区、栈区，全局数据内存地址传给被调用函数\n  - 被调函数只能返回堆区、全局数据\n- 内存分配方式\n  - 指针可以作为输入输出\n      - 输入：主调函数分配内存\n      - 输出：被调用函数分配内存 \n\n\n4.**区别三个语句**\n```c\nint fun()\n{\n  int a = 10;\n  return a;\n}\n//ok，b的值为10\n\nint *fun()\n{\n  int a = 10;\n  return &a;\n}\n//本质上第一个和第二个是等价的\n//p确实保存了fun()内部a 的地址，但是如果fun完毕之后，a就释放，p就指向未知区域\n\nint *fun()\n{\n  static int a = 10;\n  return &a;\n\n}\n//a放在全局区，函数运行完毕，a的空间不释放\n\nint main()\n{\n  int b = fun();\n}\n\n\n```\n\n## 三、字符串\n\n### （一）基本操作\n\n1.**初始化**\nC语言没有字符串类型，只能通过字符数组模拟,本质上是字符数组\nC语言字符串，以字符`\\0`，或者数字0结尾\n\n两个区别：\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main(void)\n{\n  //不指定长度，而且没有0结束符\n  char buf1[] = {'a','b','c'};\n  printf(\"buf1= %s\\n\",buf1);\n\n\n  //指定长度，当后面没有赋值的元素自动的补0\n  char buf2[100] = {'a','b','c'};\n  printf(\"buf2 = %s\\n\",buf2);\n\n  //元素含有字符0\n  char buf3[20] = {'a','b','0','4','5'};\n  printf(\"buf3 = %s\\n\",buf3);\n  \n  //元素含有数字0\n  char buf4[20] = {'a','b','0','4','5'};\n  printf(\"buf4 = %s\\n\",buf4);\n\n  //元素含有\\0\n  char buf5[20] = {'a','b','\\0','4','5'};\n  printf(\"buf5 = %s\\n\",buf5);\n\n\n  //直接批量赋值\n  char buf6[] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf6),sizeof(buf6));\n\n  char buf7[100] = \"asfsjgkjsdl\";\n  //strlen：测字符串长度，不包括数字0和字符\\0\n  //sizeof:测数组长度，包括数字0和字符\\0\n  printf(\"strlen = %d , sizeof = %d\\n\",strlen(buf7),sizeof(buf7));\n  \n\n  return 0;\n}\n```\n程序运行结果：\n`buf1= abc`\n`buf2 = abc`\n`buf3 = ab045`\n`buf4 = ab045`\n`buf5 = ab`\n`strlen = 11 , sizeof = 12`\n`strlen = 11 , sizeof = 100`\n\n\n\n\n2.**使用字符串**\n一般都是字符数组，所以就当做数组来用\n- 使用[]方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  for(i = 0; i < strlen(buf) ; i++)\n    {\n      printf(\"buf[%d] =  %c\", i ,buf[i]);\n    }\n    return 0;\n\n}\n```\n\n- 使用指针方式\n```c\n#include<stdio.h>\n\nint main()\n{\n  char buf[] = \"abcdef\";\n  int i = 0;\n  char *p = buf; \n  for(i = 0; i < strlen(buf) ; i++)\n    {\n       //以下表达式是等价的\n      // printf(\"%c\", p[i]);\n       //printf(\"%c\",*(p + i));\n       printf(\"%c\",*(buf + i));\n      \n    }\n    return 0;\n\n}\n```\n\n\n注：***和++的使用说明：**\n\n```c\nwhile(*a++ = *b++)\n{\n  NULL;\n}\n//首先执行：*a = *b;然后a++; b++; 然后判断*a是否为0，不为0则执行，为0跳出循环\n```\n\n\n注：**建议**\n- 1.判断形参指针是否为空，然后在选择是否执行下面的操作\n- 2.不要直接使用形参，先将形参赋值给另一个 变量，然后使用新的变量，这样可以保证形参指针一直执行原来的位置\n\n\n3.**使用strstr查找字符串中的特定数组**\n```c\n#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\n\n\nint main(void)\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  char *p  = str;\n  int num = 0;\n  do\n  {\n    int num = 0;\n    p = strstr(p ,\"abcd\");\n    if(p != NULL)\n      {\n          num++;\n          p = p + strlen(\"abcd\");\n      \n      } else\n      {\n          break;\n      }\n  }while(p != NULL);\n\n  printf(\"num =%d\\n\",num);\n  return 0;\n}\n```\n程序运行结果：`n = 4`\n\n\n**使用while**\n```c\nint my_strstr(char *p ,int *n)\n{\n  int i = 0;\n  char *tmp = p ;\n  while((tmp = strstr(tmp,\"abcd\")) != NULL)\n    {\n      //能进来就代表肯定有匹配的字符串\n\n      //重新设置起点位置\n      tmp = tmp + strlen(\"abcd\");\n      i++;\n\n      if(*tmp == 0)//如果到结束符\n        {\n          break;\n        }\n    }\n    //间接赋值\n    *n = i;\n    return 0;\n\n}\n\n\n\nint main()\n{\n  char str[100] = \"1234abcd3454343abcd678769878abcd9900abcd77637\";\n  int ret = 0;\n  int num = 0;\n\n  ret = my_strstr(p,&n);\n  if(ret != 0)\n  {\n    return ret;\n  }\n  printf(\"num = %d\\n\",num);\n  return 0;\n}\n```\n\n\n\n4.**一个字符串两头均为空格，求中间一部分的字符长度**\n分别同时从左边和从右边向中间查找\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *n)\n{\n\tif (p == NULL || n == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\t*n = end - begin + 1;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, &n);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\tprintf(\"n = %d\\n\", n);\n\treturn 0;\n\n\n}\n\n```\n\n4.2**将中间有元素的那一部分打印出来**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nint fun(char *p, int *buf)\n{\n\tif (p == NULL || buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tint begin = 0;\n\tint end = (int)strlen(p) - 1;\n\tint num = 0;\n\n\t//从左边开始\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;//位置往后移动一位\n\t}\n\n\t//如果当前字符为空，而且没有结束\n\twhile (isspace(p[end]) && p[end] != 0)\n\t{\n\t\tend--;//往左移动\n\t}\n\tnum = end - begin + 1;\n\n\tstrncpy(buf, p + begin, num);\n\tbuf[num] = 0;\n\treturn 0;\n\n}\n\n\n\nint main(void)\n{\n\tchar *p = \"   abcdefg     \";\n\tchar buf[100] = { 0 };\n\tint ret = 0;\n\tint n = 0;\n\n\tret = fun(p, buf);\n\tif (ret != 0)\n\t{\n\t\treturn ret;\n\t}\n\n\n\tprintf(\"buf = %s\", buf);\n\n\treturn 0;\n\tsystem(\"pause\");\n}\n\n```\n\n## 复习以及作业\n\n1.**.c可程序程序过程**\n**预处理：** 宏定义展开、头文件展开、条件编译、这里不会检查语法\n**编译：** 检查语法，将预处理后的文件编译生成汇编文件\n**汇编:** 将汇编文件生成目标文件（二进制文件）\n**链接：** 将目标文件链接称为可执行程序\n\n程序只有在运行才加载到内存（由系统完成 ），但是某个变量具体分配多大空间在编译的时候已经确定，当实际运行时候正式分配\n\n\n\n- 作业\n1.**根据元素位置的奇偶性挑出字符串中的对应元素**\n\n```c\n/*\n有一个字符串“1a2b3c4d”\n实现以下的功能：\n功能1：把偶数位字符挑选出来，组成字符串1；\n功能2：把奇数位字符挑选出来，组成字符串2；\n功能3：把字符串1和字符串2通过函数参数返回至main，并且打印\n功能4：主函数能测试通过\n*/\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\nint getstr1str2(char *p, char *buf1, char *buf2)//返回值为int,不是void\n{\n\tchar *str = p;\n\t//因为参数赋值时候为 char *p = buf,等价于 char *p ;  p = buf\n\t\n\t\tif (str == NULL || buf1 == NULL || buf2 == NULL)//当这三个全为空的时候\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (i = 0; i < strlen(str); i++)\n\t\t\t{\n\t\t\tif (i % 2 != 0)//当为奇数位置的时候\n\t\t\t{\n\t\t\t\t*buf1 = str[i];\n\t\t\t\tbuf1++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*buf2 = str[i];\n\t\t\t\tbuf2++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn 0;\n\n}\n\n\nint main(void)\n{\n\tchar *p = \"1a2b3c4d\";\n\tchar buf1[50] = { 0 };\n\tchar buf2[50] = { 0 };\n\tint ret = 0;\n\n\tret = getstr1str2(p,buf1,buf2);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getdtr1str2 err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"buf1 = %s\\n\",buf1);\n\tprintf(\"buf2 = %s\\n\",buf2);\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n```\n程序运行结果：\n`buf1 = abcd`\n`buf2 = 1234`\n\n\n2.**查找键值**\n如果查到键值，就返回键值对应等号后面的值以及字符串的长度\n```c\n/*\n查找键值（“key = value”）字符串，在开发中经常使用\n要求1：请自己定义一个接口，实现根据key获取\n要求2：编写测试用例\n要求3：键值对中间可能有n多空格，请去除空格\n\n\n注意：键值对字符串格式可能如下：\n\"key1 = value1\"\n\"key2 =       value2\"\n\"key3   = valude3\"\n\"key4             = value4\"\n\"key5   =     \"\n\"key6   =\"\n\n*/\n\n\n#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n#include<stdlib.h>\n#define _CRT_SECURE_NO_WARNINGS \n#pragma warning(disable:4996)\n\n\n//这是两边夹的函数，去除空格的作用\nint  trimSpace(char *inbuf, char *outbuf)\n{\n\tif (inbuf == NULL || outbuf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tchar *p = inbuf;\n\tint begin = 0;\n\tint end = strlen(p) - 1;\n\tint n = 0;\n\n\tif (end < 0)\n\t{\n\t\treturn -2;\n\t}\n\n\twhile (isspace(p[begin]) && p[begin] != 0)\n\t{\n\t\tbegin++;\n\t}\n\t\n\twhile (isspace(p[end]) && end > 0)//保证空字符串的时候跳出来\n\t{\n\t\tend--;\n\t}\n\n    if(end == 0)\n      {\n        return -2;\n      }\n      \n\tn = end - begin + 1;//非空元素的个数\n\tstrncpy(outbuf, p + begin, n);\n\toutbuf[n] = 0;\n\treturn 0;\n}\n\n\n\n\n\n//查找key值的函数，并且获取后面的字符串、\nint getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int *valuebuflen)\n{\n\t/*\n\tkeyvaluebuf = \"key4 =     value4\"\n\tkeybuf = \"key4\"\n\t*/\n\n\tif (keybuf == NULL || keyvaluebuf == NULL || valuebuf == NULL || valuebuflen == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *p = NULL;\n\tint ret = 0;\n\t//查找匹配键值\n\t//“key4 =     value4”,找key4，找到返回首地址\n\tp = strstr(keyvaluebuf, keybuf);\n\t\tif(p == NULL)\n\t\t{\n\t\t\treturn -2;\n\t\t}\n\n\t//如果找到，重新设置起点位置，跳过“key4”\n\t//\"key4 =   value4\"  -> \"=   value4\"\n\tp = p + strlen(keybuf);\n\n\n\t//查到“=”\n\tp = strstr(p, \"=\");\n\tif (p == NULL)\n\t{\n\t\treturn -3;\n\t}\n\n\t//如果找到，重新设置起点位置，跳过“=”\n\t//\"=     value4\" ->  \"   value4\"\n\tp = p + strlen(\"=\");\n\n\n\t//去非空字符\n\tret = trimSpace(p, valuebuf);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"trimSpace err : %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\t//获取长度，通过*间接赋值\n\t*valuebuflen = strlen(valuebuf);\n\treturn 0;\n}\n\nint main()\n{\n\tchar *keyVal = \"key4             = value4\";\n\tchar *key = \"key4\";//想要查找的key\n\tchar value[100] = { 0 };\n\tint len = 0;\n\tint ret = 0;\n\n\tret = getKeyByValue(keyVal, key, value, &len);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getKeyByValue err : %d \\n\", ret);\n\t\treturn ret;\n\t}\n\n\tprintf(\"Val:%s\\n\", value);\n\tprintf(\"len = %d\\n\",len );\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n```\n程序运行结果：\n`Val:value4`\n`len = 6`\n\n\n\n\n\n",[[1544679253186,["gjx16@GJXAIOU",[[-1,171,"---"]],[174,174],[171,171]]],[1544679253450,["gjx16@GJXAIOU",[[-1,172,"\n"]],[171,171],[170,170]]],[1544679254127,["gjx16@GJXAIOU",[[-1,171,"\n"]],[170,170],[169,169]]],[1544679364344,["gjx16@GJXAIOU",[[-1,431,"---"]],[434,434],[431,431]]],[1544679365008,["gjx16@GJXAIOU",[[-1,434,"\n"]],[431,431],[430,430]]],[1544679372357,["gjx16@GJXAIOU",[[-1,61,"、"]],[62,62],[61,61]]],[1544679372906,["gjx16@GJXAIOU",[[1,61,"。"]],[61,61],[62,62]]],[1544679374091,["gjx16@GJXAIOU",[[-1,61,"。"]],[62,62],[61,61]]],[1544679374830,["gjx16@GJXAIOU",[[1,61,"."]],[61,61],[62,62]]],[1544679378177,["gjx16@GJXAIOU",[[1,171,"\n"]],[170,170],[171,171]]],[1544679379180,["gjx16@GJXAIOU",[[1,171,"---"]],[171,171],[174,174]]],[1544679380060,["gjx16@GJXAIOU",[[1,175,"\n"]],[174,174],[175,175]]],[1544679883525,["gjx16@GJXAIOU",[[1,864,"ben"]],[864,864],[867,867]]],[1544679884907,["gjx16@GJXAIOU",[[-1,864,"ben"]],[867,867],[864,864]]],[1544679887249,["gjx16@GJXAIOU",[[1,864,"本质上"]],[864,864],[867,867]]]],null,"gjx16@GJXAIOU"]]}