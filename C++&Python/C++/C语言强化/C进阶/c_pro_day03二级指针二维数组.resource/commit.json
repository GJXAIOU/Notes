{"compress":true,"commitItems":[["896946c9-e112-4bb1-84cb-0b71542c0e80",1540517166289,"",[[1540517122825,["gjx16@GJXAIOU",[[1,0,"# day03二级指针二维数组\n\n\n\n"]],[0,0],[18,18]]]],null,"gjx16@GJXAIOU"],["0f6699d3-339c-4861-b7e5-03a90efbd973",1540543872837,"# day03二级指针二维数组\n\n\n\n",[[1540543841025,["gjx16@GJXAIOU",[[-1,18,"\n"],[1,19,"#"]],[18,18],[19,19]]],[1540543843048,["gjx16@GJXAIOU",[[1,19,"# yi"]],[19,19],[23,23]]],[1540543843783,["gjx16@GJXAIOU",[[-1,21,"yi"]],[23,23],[21,21]]],[1540543853500,["gjx16@GJXAIOU",[[1,21,"一、const"]],[21,21],[28,28]]],[1540543854016,["gjx16@GJXAIOU",[[1,28,"\n\n"]],[28,28],[29,29]]],[1540543857713,["gjx16@GJXAIOU",[[-1,29,"\n"],[1,30,"-"]],[29,29],[30,30]]],[1540543870058,["gjx16@GJXAIOU",[[1,30," 修饰变量，将变量变为"]],[30,30],[41,41]]],[1540543877340,["gjx16@GJXAIOU",[[1,41,"只读，不能更给"]],[41,41],[48,48]]],[1540543878135,["gjx16@GJXAIOU",[[-1,46,"更给"]],[48,48],[46,46]]],[1540543883797,["gjx16@GJXAIOU",[[1,46,"更改\n- 写实"]],[46,46],[53,53]]],[1540543884570,["gjx16@GJXAIOU",[[-1,51,"写实"]],[53,53],[51,51]]],[1540543891824,["gjx16@GJXAIOU",[[1,51,"修饰指针\n- "]],[51,51],[58,58]]],[1540543894179,["gjx16@GJXAIOU",[[1,56,"  "]],[56,56],[58,58]]],[1540543909003,["gjx16@GJXAIOU",[[1,60,"内存"]],[60,60],[62,62]]],[1540543910526,["gjx16@GJXAIOU",[[-1,60,"内存"]],[62,62],[60,60]]],[1540543926449,["gjx16@GJXAIOU",[[1,60,"指向的内存不能变\n  - 指向不能变"]],[60,60],[78,78]]],[1540543932767,["gjx16@GJXAIOU",[[1,51,"\n- "]],[48,48],[51,51]]],[1540543932912,["gjx16@GJXAIOU",[[-1,49,"- "]],[51,51],[50,50]]],[1540543935656,["gjx16@GJXAIOU",[[1,49,"```"]],[49,49],[52,52]]],[1540543935678,["gjx16@GJXAIOU",[[1,52,"language\n```\n"]],[52,52],[52,60]]],[1540543936543,["gjx16@GJXAIOU",[[-1,52,"language"],[1,60,"c"]],[52,60],[53,53]]],[1540543936758,["gjx16@GJXAIOU",[[1,54,"\n"]],[53,53],[54,54]]],[1540543939263,["gjx16@GJXAIOU",[[1,54,"int"]],[54,54],[57,57]]],[1540543940912,["gjx16@GJXAIOU",[[-1,54,"int"]],[57,57],[54,54]]],[1540543941375,["gjx16@GJXAIOU",[[-1,54,"\n"]],[54,54],[53,53]]],[1540543942305,["gjx16@GJXAIOU",[[1,54,"\n"]],[53,53],[54,54]]],[1540543945623,["gjx16@GJXAIOU",[[1,54,"const int a;"]],[54,54],[66,66]]],[1540543946414,["gjx16@GJXAIOU",[[-1,65,";"]],[66,66],[65,65]]],[1540543950424,["gjx16@GJXAIOU",[[1,65," = 10;"]],[65,65],[71,71]]],[1540543951070,["gjx16@GJXAIOU",[[1,72,"\n"]],[71,71],[72,72]]],[1540543959119,["gjx16@GJXAIOU",[[1,72,"a = 1000"]],[72,72],[80,80]]],[1540543959790,["gjx16@GJXAIOU",[[-1,79,"0"]],[80,80],[79,79]]],[1540543964183,["gjx16@GJXAIOU",[[1,79,";//errro"]],[79,79],[87,87]]],[1540543965327,["gjx16@GJXAIOU",[[-1,85,"ro"]],[87,87],[85,85]]],[1540543966936,["gjx16@GJXAIOU",[[1,85,"or"]],[85,85],[87,87]]],[1540543974015,["gjx16@GJXAIOU",[[1,100,"- \n"]],[99,99],[102,102]]],[1540543974506,["gjx16@GJXAIOU",[[-1,100,"- "]],[102,102],[101,101]]],[1540543977191,["gjx16@GJXAIOU",[[1,100,"****"]],[100,100],[102,102]]],[1540543979291,["gjx16@GJXAIOU",[[1,102,"c"]],[102,102],[103,103]]],[1540543979791,["gjx16@GJXAIOU",[[-1,102,"c"]],[103,103],[102,102]]],[1540543991510,["gjx16@GJXAIOU",[[1,102,"从左往右看，跳过"]],[102,102],[110,110]]],[1540544009676,["gjx16@GJXAIOU",[[1,110,"类型，看const修饰哪一个字符，如果是"]],[110,110],[130,130]]],[1540544010853,["gjx16@GJXAIOU",[[1,132,"*"]],[130,130],[131,131]]],[1540544051283,["gjx16@GJXAIOU",[[1,131," ，则表示指针指向的内存不能改变，如果"]],[131,131],[150,150]]],[1540544075446,["gjx16@GJXAIOU",[[1,150,"是指针变量，则表示指针的指向不能改变，即指针的值不能改变"]],[150,150],[178,178]]],[1540544080163,["gjx16@GJXAIOU",[[1,130,"`"]],[130,130],[131,131]]],[1540544081280,["gjx16@GJXAIOU",[[1,132,"`"]],[132,132],[133,133]]],[1540544091783,["gjx16@GJXAIOU",[[-1,132,"` ，"]],[134,134],[132,132]]],[1540544094079,["gjx16@GJXAIOU",[[1,132,"`,"]],[132,132],[134,134]]],[1540544100148,["gjx16@GJXAIOU",[[-1,112,"，"]],[113,113],[112,112]]],[1540544101384,["gjx16@GJXAIOU",[[1,112,","]],[112,112],[113,113]]],[1540544103867,["gjx16@GJXAIOU",[[-1,107,"，"]],[108,108],[107,107]]],[1540544104276,["gjx16@GJXAIOU",[[1,107,"."]],[107,107],[108,108]]],[1540544105632,["gjx16@GJXAIOU",[[-1,107,"."]],[108,108],[107,107]]],[1540544105968,["gjx16@GJXAIOU",[[1,107,","]],[107,107],[108,108]]],[1540544110713,["gjx16@GJXAIOU",[[-1,148,"，"]],[149,149],[148,148]]],[1540544111136,["gjx16@GJXAIOU",[[1,148,","]],[148,148],[149,149]]],[1540544116480,["gjx16@GJXAIOU",[[-1,169,"，"]],[170,170],[169,169]]],[1540544116819,["gjx16@GJXAIOU",[[1,169,"."]],[169,169],[170,170]]],[1540544117672,["gjx16@GJXAIOU",[[-1,169,"."]],[170,170],[169,169]]],[1540544118120,["gjx16@GJXAIOU",[[1,169,","]],[169,169],[170,170]]],[1540544120656,["gjx16@GJXAIOU",[[-1,156,"，"]],[157,157],[156,156]]],[1540544122024,["gjx16@GJXAIOU",[[1,156,","]],[156,156],[157,157]]],[1540544126296,["gjx16@GJXAIOU",[[1,199,"\n  - "]],[194,194],[199,199]]],[1540544126983,["gjx16@GJXAIOU",[[-1,195,"  - "]],[199,199],[196,196]]],[1540544129883,["gjx16@GJXAIOU",[[1,195,"```"]],[195,195],[198,198]]],[1540544129907,["gjx16@GJXAIOU",[[1,198,"language\n```\n"]],[198,198],[198,206]]],[1540544130689,["gjx16@GJXAIOU",[[-1,198,"language"],[1,206,"c"]],[198,206],[199,199]]],[1540544130851,["gjx16@GJXAIOU",[[1,200,"\n"]],[199,199],[200,200]]],[1540544137464,["gjx16@GJXAIOU",[[1,200,"char buf "]],[200,200],[209,209]]],[1540544138163,["gjx16@GJXAIOU",[[-1,208," "]],[209,209],[208,208]]],[1540544144360,["gjx16@GJXAIOU",[[1,208,"[100] = \"\""]],[208,208],[218,218]]],[1540544147283,["gjx16@GJXAIOU",[[1,217,"akldfjksdjgf"]],[217,217],[229,229]]],[1540544149264,["gjx16@GJXAIOU",[[1,230,";"]],[230,230],[231,231]]],[1540544306608,["gjx16@GJXAIOU",[[1,232,"\n"]],[231,231],[232,232]]],[1540544345041,["gjx16@GJXAIOU",[[1,232,"const char *p = buf;"]],[232,232],[252,252]]],[1540544352672,["gjx16@GJXAIOU",[[1,253,"\n"]],[252,252],[253,253]]],[1540544354539,["gjx16@GJXAIOU",[[1,253,"//debg"]],[253,253],[259,259]]],[1540544356242,["gjx16@GJXAIOU",[[-1,255,"debg"]],[259,259],[255,255]]],[1540544377963,["gjx16@GJXAIOU",[[1,255,"等价于：char const *p = buf;"]],[255,255],[279,279]]],[1540544379151,["gjx16@GJXAIOU",[[1,280,"\n"]],[279,279],[280,280]]],[1540544387840,["gjx16@GJXAIOU",[[1,280,"zhi"]],[280,280],[283,283]]],[1540544389496,["gjx16@GJXAIOU",[[-1,280,"zhi"]],[283,283],[280,280]]],[1540544390386,["gjx16@GJXAIOU",[[1,280,"、、"]],[280,280],[282,282]]],[1540544391088,["gjx16@GJXAIOU",[[-1,280,"、、"]],[282,282],[280,280]]],[1540544391656,["gjx16@GJXAIOU",[[1,280,"/'"]],[280,280],[282,282]]],[1540544392368,["gjx16@GJXAIOU",[[-1,281,"'"]],[282,282],[281,281]]],[1540544393430,["gjx16@GJXAIOU",[[1,281,"、"]],[281,281],[282,282]]],[1540544394336,["gjx16@GJXAIOU",[[-1,281,"、"]],[282,282],[281,281]]],[1540544395338,["gjx16@GJXAIOU",[[1,281,"、"]],[281,281],[282,282]]],[1540544396103,["gjx16@GJXAIOU",[[-1,281,"、"]],[282,282],[281,281]]],[1540544411026,["gjx16@GJXAIOU",[[1,281,"/只能更改指针值，"]],[281,281],[290,290]]],[1540544423230,["gjx16@GJXAIOU",[[1,290,"但是指向的内存数据不能更改"]],[290,290],[303,303]]],[1540544424983,["gjx16@GJXAIOU",[[1,304,"\n"]],[303,303],[304,304]]],[1540544434671,["gjx16@GJXAIOU",[[1,319,"\n  - "]],[319,319],[324,324]]],[1540544435159,["gjx16@GJXAIOU",[[-1,320,"  - "],[1,324,"\n\n"]],[324,324],[321,321]]],[1540544436672,["gjx16@GJXAIOU",[[-1,321,"\n"],[1,322,"`"]],[321,321],[322,322]]],[1540544437039,["gjx16@GJXAIOU",[[1,322,"``"]],[322,322],[324,324]]],[1540544437063,["gjx16@GJXAIOU",[[1,324,"language\n```\n"]],[324,324],[324,332]]],[1540544438039,["gjx16@GJXAIOU",[[-1,324,"language"],[1,332,"c"]],[324,332],[325,325]]],[1540544438255,["gjx16@GJXAIOU",[[1,326,"\n"]],[325,325],[326,326]]],[1540544462752,["gjx16@GJXAIOU",[[1,326,"char *const p2 = buf;"]],[326,326],[347,347]]],[1540544463648,["gjx16@GJXAIOU",[[1,348,"\n"]],[347,347],[348,348]]],[1540544479586,["gjx16@GJXAIOU",[[1,348,"p[2] "]],[348,348],[353,353]]],[1540544484279,["gjx16@GJXAIOU",[[1,349,"2"]],[349,349],[350,350]]],[1540544485753,["gjx16@GJXAIOU",[[1,354," "]],[353,353],[354,354]]],[1540544487009,["gjx16@GJXAIOU",[[1,354,"="]],[354,354],[355,355]]],[1540544488280,["gjx16@GJXAIOU",[[1,356," "]],[355,355],[356,356]]],[1540544490984,["gjx16@GJXAIOU",[[1,356,"'4;'"]],[356,356],[360,360]]],[1540544492022,["gjx16@GJXAIOU",[[-1,358,";'"]],[360,360],[358,358]]],[1540544492618,["gjx16@GJXAIOU",[[1,358,";"]],[358,358],[359,359]]],[1540544493359,["gjx16@GJXAIOU",[[-1,358,";"]],[359,359],[358,358]]],[1540544511956,["gjx16@GJXAIOU",[[1,358,"';//这是可以的，但是不能改变指针的值"]],[358,358],[378,378]]],[1540544522255,["gjx16@GJXAIOU",[[1,384,"\n"]],[383,383],[384,384]]],[1540544524279,["gjx16@GJXAIOU",[[1,385,"\n"]],[384,384],[385,385]]],[1540544532267,["gjx16@GJXAIOU",[[1,385,"  - 指向和"]],[385,385],[392,392]]],[1540544537947,["gjx16@GJXAIOU",[[1,392,"值都不能改"]],[392,392],[397,397]]],[1540544538543,["gjx16@GJXAIOU",[[1,398,"  - \n"]],[397,397],[402,402]]],[1540544541817,["gjx16@GJXAIOU",[[-1,399," - "]],[402,402],[399,399]]],[1540544543968,["gjx16@GJXAIOU",[[1,399,"```"]],[399,399],[402,402]]],[1540544547599,["gjx16@GJXAIOU",[[-1,398," "]],[399,399],[398,398]]],[1540544549015,["gjx16@GJXAIOU",[[-1,397,"\n"]],[398,398],[397,397]]],[1540544550703,["gjx16@GJXAIOU",[[1,397,"\n  "]],[397,397],[400,400]]],[1540544551838,["gjx16@GJXAIOU",[[-1,398,"  "]],[400,400],[398,398]]],[1540544555210,["gjx16@GJXAIOU",[[-1,398,"```"]],[401,401],[398,398]]],[1540544555646,["gjx16@GJXAIOU",[[-1,398,"\n"]],[398,398],[397,397]]],[1540544556570,["gjx16@GJXAIOU",[[1,398,"  - \n"]],[397,397],[402,402]]],[1540544557783,["gjx16@GJXAIOU",[[-1,398,"  - "]],[402,402],[398,398]]],[1540544559360,["gjx16@GJXAIOU",[[-1,398,"\n"],[1,399,"`"]],[398,398],[399,399]]],[1540544559719,["gjx16@GJXAIOU",[[1,399,"``"]],[399,399],[401,401]]],[1540544559743,["gjx16@GJXAIOU",[[1,401,"language\n```\n"]],[401,401],[401,409]]],[1540544560744,["gjx16@GJXAIOU",[[-1,401,"language"],[1,409,"c"]],[401,409],[402,402]]],[1540544560999,["gjx16@GJXAIOU",[[1,403,"\n"]],[402,402],[403,403]]],[1540544581898,["gjx16@GJXAIOU",[[1,403,"const char * const p3 = buf;"]],[403,403],[431,431]]],[1540544583103,["gjx16@GJXAIOU",[[1,432,"\n"]],[431,431],[432,432]]],[1540544589713,["gjx16@GJXAIOU",[[1,432,"//指针的值和"]],[432,432],[439,439]]],[1540544593501,["gjx16@GJXAIOU",[[1,439,"智爱香"]],[439,439],[442,442]]],[1540544594318,["gjx16@GJXAIOU",[[-1,439,"智爱香"]],[442,442],[439,439]]],[1540544604291,["gjx16@GJXAIOU",[[1,439,"指向的内存的值都是不可更改"]],[439,439],[452,452]]]],null,"gjx16@GJXAIOU"],["72d24bd6-2809-42e7-865e-0c3754476e4f",1540561114080,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量，将变量变为只读，不能更改\n```c\nconst int a = 10;\na = 100;//error\n```\n\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变**\n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值，但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char * const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n",[[1540561077609,["gjx16@GJXAIOU",[[1,457,"\n"]],[456,456],[457,457]]],[1540561077721,["gjx16@GJXAIOU",[[1,458,"\n"]],[457,457],[458,458]]],[1540561313006,["gjx16@GJXAIOU",[[-1,458,"\n"],[1,459,"注"]],[458,458],[459,459]]],[1540561315125,["gjx16@GJXAIOU",[[1,459,"；****"]],[459,459],[462,462]]],[1540561316806,["gjx16@GJXAIOU",[[1,462,"如何"]],[462,462],[464,464]]],[1540561385859,["gjx16@GJXAIOU",[[1,464,"引入外部文件定义的const变量（）"]],[464,464],[482,482]]],[1540561400367,["gjx16@GJXAIOU",[[1,481,"同一个项目中的不同c文件"]],[481,481],[493,493]]],[1540561403459,["gjx16@GJXAIOU",[[1,496,"\n\n"]],[496,496],[497,497]]],[1540561411839,["gjx16@GJXAIOU",[[-1,497,"\n"],[1,498,"在"]],[497,497],[498,498]]],[1540561413866,["gjx16@GJXAIOU",[[-1,497,"在"],[1,498,"\n"]],[498,498],[497,497]]],[1540561416637,["gjx16@GJXAIOU",[[-1,497,"\n"],[1,498,"例子"]],[497,497],[499,499]]],[1540561426771,["gjx16@GJXAIOU",[[1,499,"：在a.c中定义：``"]],[499,499],[510,510]]],[1540561437369,["gjx16@GJXAIOU",[[1,509,"const int a = 10;"]],[509,509],[526,526]]],[1540561439584,["gjx16@GJXAIOU",[[1,527,"\n\n"]],[527,527],[528,528]]],[1540561440754,["gjx16@GJXAIOU",[[-1,528,"\n"],[1,529,"z"]],[528,528],[529,529]]],[1540561441258,["gjx16@GJXAIOU",[[1,529,"ai "]],[529,529],[532,532]]],[1540561442376,["gjx16@GJXAIOU",[[-1,529,"ai "]],[532,532],[529,529]]],[1540561442559,["gjx16@GJXAIOU",[[-1,528,"z"],[1,529,"\n"]],[529,529],[528,528]]],[1540561443908,["gjx16@GJXAIOU",[[-1,528,"\n"],[1,529,"在"]],[528,528],[529,529]]],[1540561449721,["gjx16@GJXAIOU",[[1,529,"b.czhong"]],[529,529],[537,537]]],[1540561450881,["gjx16@GJXAIOU",[[-1,532,"zhong"]],[537,537],[532,532]]],[1540561458093,["gjx16@GJXAIOU",[[1,532,"中定义使用"]],[532,532],[537,537]]],[1540561687154,["gjx16@GJXAIOU",[[1,537,"：``"]],[537,537],[540,540]]],[1540561698510,["gjx16@GJXAIOU",[[1,539,"extern conmst"]],[539,539],[552,552]]],[1540561700056,["gjx16@GJXAIOU",[[-1,549,"mst"]],[552,552],[549,549]]],[1540561703609,["gjx16@GJXAIOU",[[1,549,"st *"]],[549,549],[553,553]]],[1540561707658,["gjx16@GJXAIOU",[[-1,552,"*"]],[553,553],[552,552]]],[1540561710210,["gjx16@GJXAIOU",[[1,552,"int a;"]],[552,552],[558,558]]],[1540561713796,["gjx16@GJXAIOU",[[1,559,"//zhi"]],[559,559],[564,564]]],[1540561715313,["gjx16@GJXAIOU",[[-1,561,"zhi"]],[564,564],[561,561]]],[1540561727080,["gjx16@GJXAIOU",[[1,561,"只能声明，不能在进行赋值"]],[561,561],[573,573]]],[1540561730444,["gjx16@GJXAIOU",[[1,573,"\n\n"]],[573,573],[574,574]]],[1540561730610,["gjx16@GJXAIOU",[[1,575,"\n"]],[574,574],[575,575]]],[1540561941405,["gjx16@GJXAIOU",[[1,48,"，所以修饰"]],[48,48],[53,53]]],[1540561942992,["gjx16@GJXAIOU",[[-1,51,"修饰"]],[53,53],[51,51]]],[1540561952402,["gjx16@GJXAIOU",[[1,51,"定义的时候必须初始化"]],[51,51],[61,61]]],[1540561993684,["gjx16@GJXAIOU",[[1,105,"可以使用指针修改："]],[105,105],[114,114]]],[1540561994901,["gjx16@GJXAIOU",[[1,115,"\n"]],[114,114],[115,115]]],[1540562022803,["gjx16@GJXAIOU",[[1,115,"```c"]],[115,115],[119,119]]],[1540562023288,["gjx16@GJXAIOU",[[1,120,"\n"]],[119,119],[120,120]]],[1540562025256,["gjx16@GJXAIOU",[[1,121,"\n"]],[120,120],[121,121]]],[1540562025915,["gjx16@GJXAIOU",[[1,121,"··"]],[121,121],[123,123]]],[1540562027041,["gjx16@GJXAIOU",[[-1,121,"··"]],[123,123],[121,121]]],[1540562028313,["gjx16@GJXAIOU",[[1,121,"```"]],[121,121],[124,124]]],[1540562040626,["gjx16@GJXAIOU",[[1,120,"const a "]],[120,120],[128,128]]],[1540562041553,["gjx16@GJXAIOU",[[-1,127," "]],[128,128],[127,127]]],[1540562042507,["gjx16@GJXAIOU",[[1,127,"int"]],[127,127],[130,130]]],[1540562043872,["gjx16@GJXAIOU",[[-1,126,"aint"]],[130,130],[126,126]]],[1540562048360,["gjx16@GJXAIOU",[[1,126,"int a = 10;"]],[126,126],[137,137]]],[1540562048728,["gjx16@GJXAIOU",[[1,138,"\n"]],[137,137],[138,138]]],[1540562051448,["gjx16@GJXAIOU",[[1,138,"int (*"]],[138,138],[144,144]]],[1540562052771,["gjx16@GJXAIOU",[[-1,142,"(*"]],[144,144],[142,142]]],[1540562055195,["gjx16@GJXAIOU",[[1,142,"*p -"]],[142,142],[146,146]]],[1540562055651,["gjx16@GJXAIOU",[[-1,145,"-"]],[146,146],[145,145]]],[1540562055883,["gjx16@GJXAIOU",[[1,145,"-"]],[145,145],[146,146]]],[1540562056511,["gjx16@GJXAIOU",[[-1,145,"-"]],[146,146],[145,145]]],[1540562059722,["gjx16@GJXAIOU",[[1,145,"= &a;"]],[145,145],[150,150]]],[1540562060224,["gjx16@GJXAIOU",[[1,151,"\n"]],[150,150],[151,151]]],[1540562073945,["gjx16@GJXAIOU",[[1,151,"*p = 22"]],[151,151],[158,158]]],[1540562074195,["gjx16@GJXAIOU",[[1,158,";"]],[158,158],[159,159]]],[1540562086819,["gjx16@GJXAIOU",[[1,647,"\n"]],[644,644],[645,645]]],[1540562086952,["gjx16@GJXAIOU",[[1,648,"\n"]],[645,645],[646,646]]],[1540562087100,["gjx16@GJXAIOU",[[1,649,"\n"]],[646,646],[647,647]]],[1540562087233,["gjx16@GJXAIOU",[[1,650,"\n"]],[647,647],[648,648]]],[1540562087352,["gjx16@GJXAIOU",[[1,651,"\n"]],[648,648],[649,649]]],[1540562087496,["gjx16@GJXAIOU",[[1,652,"\n"]],[649,649],[650,650]]],[1540562093649,["gjx16@GJXAIOU",[[1,650,"## zhizhen"]],[650,650],[660,660]]],[1540562095274,["gjx16@GJXAIOU",[[-1,653,"zhizhen"]],[660,660],[653,653]]],[1540562106699,["gjx16@GJXAIOU",[[1,653,"指针作为函数参数"]],[653,653],[661,661]]],[1540562107225,["gjx16@GJXAIOU",[[1,664,"\n"]],[661,661],[662,662]]],[1540562107369,["gjx16@GJXAIOU",[[1,665,"\n"]],[662,662],[663,663]]],[1540562107539,["gjx16@GJXAIOU",[[1,666,"\n"]],[663,663],[664,664]]],[1540562111923,["gjx16@GJXAIOU",[[1,664,"### 值传递"]],[664,664],[671,671]]],[1540562112492,["gjx16@GJXAIOU",[[1,674,"\n"]],[671,671],[672,672]]],[1540562439509,["gjx16@GJXAIOU",[[1,671,"（）"]],[671,671],[673,673]]],[1540562455013,["gjx16@GJXAIOU",[[1,672,"形参的修改不会影响到实参的值"]],[672,672],[686,686]]],[1540562456805,["gjx16@GJXAIOU",[[1,691,"\n"]],[687,687],[688,688]]],[1540562461774,["gjx16@GJXAIOU",[[1,688,"例子："]],[688,688],[691,691]]],[1540562462409,["gjx16@GJXAIOU",[[1,695,"\n"]],[691,691],[692,692]]],[1540562463858,["gjx16@GJXAIOU",[[1,692,"```"]],[692,692],[695,695]]],[1540562463883,["gjx16@GJXAIOU",[[1,695,"language\n```\n"]],[695,695],[695,703]]],[1540562464666,["gjx16@GJXAIOU",[[-1,695,"language"],[1,703,"c"]],[695,703],[696,696]]],[1540562464898,["gjx16@GJXAIOU",[[1,697,"\n"]],[696,696],[697,697]]],[1540562465026,["gjx16@GJXAIOU",[[1,698,"\n"]],[697,697],[698,698]]],[1540562465162,["gjx16@GJXAIOU",[[1,699,"\n"]],[698,698],[699,699]]],[1540562469845,["gjx16@GJXAIOU",[[1,697,"int mau"]],[697,697],[704,704]]],[1540562472297,["gjx16@GJXAIOU",[[-1,697,"int mau"]],[704,704],[697,697]]],[1540562477634,["gjx16@GJXAIOU",[[1,697,"#include<>"]],[697,697],[707,707]]],[1540562480099,["gjx16@GJXAIOU",[[1,706,"stdl"]],[706,706],[710,710]]],[1540562481092,["gjx16@GJXAIOU",[[-1,709,"l"]],[710,710],[709,709]]],[1540562482274,["gjx16@GJXAIOU",[[1,709,"iol"]],[709,709],[712,712]]],[1540562483033,["gjx16@GJXAIOU",[[-1,711,"l"]],[712,712],[711,711]]],[1540562484010,["gjx16@GJXAIOU",[[1,711,".j"]],[711,711],[713,713]]],[1540562484729,["gjx16@GJXAIOU",[[-1,712,"j"]],[713,713],[712,712]]],[1540562485372,["gjx16@GJXAIOU",[[1,712,"h"]],[712,712],[713,713]]],[1540562487445,["gjx16@GJXAIOU",[[1,717,"\n"]],[714,714],[715,715]]],[1540562492091,["gjx16@GJXAIOU",[[1,715,"#include<>"]],[715,715],[725,725]]],[1540562493026,["gjx16@GJXAIOU",[[1,724,"s"]],[724,724],[725,725]]],[1540562495684,["gjx16@GJXAIOU",[[1,726,"ring.h"]],[726,726],[732,732]]],[1540562497546,["gjx16@GJXAIOU",[[1,736,"\n"]],[733,733],[734,734]]],[1540562501125,["gjx16@GJXAIOU",[[1,734,"#inlcued"]],[734,734],[742,742]]],[1540562502393,["gjx16@GJXAIOU",[[-1,737,"lcued"]],[742,742],[737,737]]],[1540562505698,["gjx16@GJXAIOU",[[1,737,"clude<>"]],[737,737],[744,744]]],[1540562510387,["gjx16@GJXAIOU",[[1,743,"stdlib.h"]],[743,743],[751,751]]],[1540562512657,["gjx16@GJXAIOU",[[1,755,"\n"]],[752,752],[753,753]]],[1540562512803,["gjx16@GJXAIOU",[[1,756,"\n"]],[753,753],[754,754]]],[1540562515938,["gjx16@GJXAIOU",[[1,754,"int main()"]],[754,754],[764,764]]],[1540562519180,["gjx16@GJXAIOU",[[1,763,"vois"]],[763,763],[767,767]]],[1540562519954,["gjx16@GJXAIOU",[[-1,766,"s"]],[767,767],[766,766]]],[1540562520074,["gjx16@GJXAIOU",[[1,766,"d"]],[766,766],[767,767]]],[1540562521643,["gjx16@GJXAIOU",[[1,771,"\n"]],[768,768],[769,769]]],[1540562522955,["gjx16@GJXAIOU",[[1,769,"{}"]],[769,769],[771,771]]],[1540562525593,["gjx16@GJXAIOU",[[1,770,"\n"]],[770,770],[771,771]]],[1540562525777,["gjx16@GJXAIOU",[[1,771,"\n"]],[771,771],[772,772]]],[1540563326827,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,753,"`"],[1,754,"\n"],[1,776,"`"]],[725,725],[777,777]]],[1540563326827,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,753,"`"],[-1,753,"\n"],[-1,776,"`"]],[777,777],[725,725]]],[1540563324598,["gjx16@GJXAIOU",[[1,758,"getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\nint "],[1,771,"\tchar *p = NULL;"],[1,772,"\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t"],[1,774,"\tprintf(\"p = %s\\n\",p);"],[1,775,"}"]],[697,775],[1071,1071]]],[1540563368242,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,753,"`"],[1,754,"\n"],[1,1072,"`"]],[725,725],[1073,1073]]],[1540563368242,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,753,"`"],[-1,753,"\n"],[-1,1072,"`"]],[1073,1073],[725,725]]],[1540563366498,["gjx16@GJXAIOU",[[1,754,"\n"]],[752,752],[753,753]]],[1540563367042,["gjx16@GJXAIOU",[[1,753,"#pragma warning(disable:4996)"]],[753,753],[782,782]]],[1540563428244,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,782,"`"],[1,783,"\n"],[1,1102,"`"]],[725,725],[1103,1103]]],[1540563428244,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,782,"`"],[-1,782,"\n"],[-1,1102,"`"]],[1103,1103],[725,725]]],[1540563411250,["gjx16@GJXAIOU",[[1,1110,"\n"]],[1105,1105],[1106,1106]]],[1540563412854,["gjx16@GJXAIOU",[[1,1106,"chengxu"]],[1106,1106],[1113,1113]]],[1540563414101,["gjx16@GJXAIOU",[[-1,1106,"chengxu"]],[1113,1113],[1106,1106]]],[1540563420542,["gjx16@GJXAIOU",[[1,1106,"程序运行结果："]],[1106,1106],[1113,1113]]],[1540563421250,["gjx16@GJXAIOU",[[1,1118,"\n"]],[1113,1113],[1114,1114]]],[1540563422314,["gjx16@GJXAIOU",[[1,1114,"p = abdakg\np = (null)"]],[1114,1114],[1135,1135]]],[1540563426547,["gjx16@GJXAIOU",[[1,1114,"`"]],[1114,1114],[1115,1115]]],[1540563427511,["gjx16@GJXAIOU",[[1,1126,"`"]],[1126,1126],[1127,1127]]],[1540563488252,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,782,"`"],[1,783,"\n"],[-1,1104,"\n"],[1,1105,"`"],[1,1137,"\n"]],[725,725],[1138,1138]]],[1540563488252,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,782,"`"],[-1,782,"\n"],[1,1104,"\n"],[-1,1104,"`"],[-1,1137,"\n"]],[1138,1138],[725,725]]],[1540563430197,["gjx16@GJXAIOU",[[1,1125,"`"]],[1125,1125],[1126,1126]]],[1540563430966,["gjx16@GJXAIOU",[[1,1138,"`"]],[1138,1138],[1139,1139]]],[1540563433890,["gjx16@GJXAIOU",[[1,1144,"\n"]],[1139,1139],[1140,1140]]],[1540563436259,["gjx16@GJXAIOU",[[1,1140,"yun"]],[1140,1140],[1143,1143]]],[1540563436794,["gjx16@GJXAIOU",[[-1,1140,"yun"]],[1143,1143],[1140,1140]]],[1540563452856,["gjx16@GJXAIOU",[[1,1140,"程序运行内存四区图："]],[1140,1140],[1150,1150]]],[1540563453138,["gjx16@GJXAIOU",[[1,1155,"\n"]],[1150,1150],[1151,1151]]],[1540563548247,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,782,"`"],[1,783,"\n"],[-1,1104,"\n"],[1,1105,"`"],[1,1150,"\n"]],[725,725],[1151,1151]]],[1540563548247,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,782,"`"],[-1,782,"\n"],[1,1104,"\n"],[-1,1104,"`"],[-1,1150,"\n"]],[1151,1151],[725,725]]],[1540563493479,["gjx16@GJXAIOU",[[1,1151,"![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)"]],[1151,1151],[1261,1261]]],[1540563496266,["gjx16@GJXAIOU",[[1,1265,"\n"]],[1261,1261],[1262,1262]]],[1540563496403,["gjx16@GJXAIOU",[[1,1266,"\n"]],[1262,1262],[1263,1263]]],[1540563608249,[null,[[-1,725,">"],[1,726,"t"],[-1,732,"\n"],[1,733,">"],[-1,782,"`"],[1,783,"\n"],[-1,1104,"\n"],[1,1105,"`"],[1,1260,"\n"]],[725,725],[1261,1261]]],[1540563608249,[null,[[1,725,">"],[-1,725,"t"],[1,732,"\n"],[-1,732,">"],[1,782,"`"],[-1,782,"\n"],[1,1104,"\n"],[-1,1104,"`"],[-1,1260,"\n"]],[1261,1261],[725,725]]],[1540563550903,["gjx16@GJXAIOU",[[1,1262,"****"]],[1262,1262],[1264,1264]]],[1540563567909,["gjx16@GJXAIOU",[[1,1264,"二级指针做哈数参数输出特性"]],[1264,1264],[1277,1277]]],[1540563571346,["gjx16@GJXAIOU",[[-1,1269,"哈数"]],[1271,1271],[1269,1269]]],[1540563575961,["gjx16@GJXAIOU",[[1,1269,"函数"]],[1269,1269],[1271,1271]]],[1540563583558,["gjx16@GJXAIOU",[[1,1280,"~~~~"]],[1280,1280],[1282,1282]]],[1540563587868,["gjx16@GJXAIOU",[[1,1282,"视频12"]],[1282,1282],[1286,1286]]]],null,"gjx16@GJXAIOU"],["1d572cda-e9e1-4648-bcea-fab76952651d",1540602792919,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量，将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变**\n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值，但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char * const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 指针作为函数参数\n\n\n### 值传递（形参的修改不会影响到实参的值）\n例子：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n**二级指针做函数参数输出特性**\n~~视频12~~\n\n\n\n",[[1540602775902,["gjx16@GJXAIOU",[[-1,1280,"~~视频12~~"]],[1280,1288],[1280,1280]]],[1540602777214,["gjx16@GJXAIOU",[[1,1280,"```"]],[1280,1280],[1283,1283]]],[1540602777241,["gjx16@GJXAIOU",[[1,1283,"language\n```\n"]],[1283,1283],[1283,1291]]],[1540602778687,["gjx16@GJXAIOU",[[-1,1283,"language"],[1,1291,"c"]],[1283,1291],[1284,1284]]],[1540602778895,["gjx16@GJXAIOU",[[1,1285,"\n"]],[1284,1284],[1285,1285]]],[1540602779062,["gjx16@GJXAIOU",[[1,1286,"\n"]],[1285,1285],[1286,1286]]],[1540602780079,["gjx16@GJXAIOU",[[1,1286,"#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}"]],[1286,1286],[1786,1786]]],[1540602783749,["gjx16@GJXAIOU",[[1,1795,"\n"]],[1790,1790],[1791,1791]]],[1540602791401,["gjx16@GJXAIOU",[[1,1791,"陈诉"]],[1791,1791],[1793,1793]]],[1540602793086,["gjx16@GJXAIOU",[[-1,1795,"\n"]],[1791,1791],[1790,1790]]],[1540602793389,["gjx16@GJXAIOU",[[-1,1789,"`"]],[1790,1790],[1789,1789]]],[1540602797119,["gjx16@GJXAIOU",[[1,1789,"`"]],[1789,1789],[1790,1790]]],[1540602798143,["gjx16@GJXAIOU",[[1,1795,"\n"]],[1790,1790],[1791,1791]]],[1540602800792,["gjx16@GJXAIOU",[[1,1791,"承运"]],[1791,1791],[1793,1793]]],[1540602802389,["gjx16@GJXAIOU",[[-1,1791,"承运"]],[1793,1793],[1791,1791]]],[1540602807072,["gjx16@GJXAIOU",[[1,1791,"程序运行结果："]],[1791,1791],[1798,1798]]],[1540602807759,["gjx16@GJXAIOU",[[1,1803,"\n"]],[1798,1798],[1799,1799]]],[1540602824109,["gjx16@GJXAIOU",[[1,1799,"p = abdakg"]],[1799,1799],[1809,1809]]],[1540602826376,["gjx16@GJXAIOU",[[1,1799,"·"]],[1799,1799],[1800,1800]]],[1540602827509,["gjx16@GJXAIOU",[[-1,1799,"·"]],[1800,1800],[1799,1799]]],[1540602827962,["gjx16@GJXAIOU",[[1,1799,"`"]],[1799,1799],[1800,1800]]],[1540602830191,["gjx16@GJXAIOU",[[1,1810,"`"]],[1810,1810],[1811,1811]]],[1540602831056,["gjx16@GJXAIOU",[[1,1816,"\n"]],[1811,1811],[1812,1812]]],[1540602837934,["gjx16@GJXAIOU",[[1,1812,"cheng"]],[1812,1812],[1817,1817]]],[1540602838876,["gjx16@GJXAIOU",[[-1,1812,"cheng"]],[1817,1817],[1812,1812]]],[1540602848756,["gjx16@GJXAIOU",[[1,1812,"程序运行对应的内存四区图"]],[1812,1812],[1824,1824]]],[1540602849198,["gjx16@GJXAIOU",[[1,1829,"\n"]],[1824,1824],[1825,1825]]],[1540602911836,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,1824,"\n\n"]],[1798,1798],[1824,1824]]],[1540602911836,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,1824,"\n\n"]],[1824,1824],[1798,1798]]],[1540602857466,["gjx16@GJXAIOU",[[1,1825,"![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)"]],[1825,1825],[1935,1935]]],[1540602860100,["gjx16@GJXAIOU",[[1,1939,"\n"]],[1936,1936],[1937,1937]]],[1540602868975,["gjx16@GJXAIOU",[[1,1940,"\n"]],[1937,1937],[1938,1938]]],[1540602876202,["gjx16@GJXAIOU",[[1,1938,"### 指针数组的使用"]],[1938,1938],[1949,1949]]],[1540602880141,["gjx16@GJXAIOU",[[-1,1940,"#"]],[1940,1940],[1939,1939]]],[1540602884525,["gjx16@GJXAIOU",[[1,1951,"\n"]],[1949,1949],[1950,1950]]],[1540603031828,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,1948,"\n\n"]],[1798,1798],[1948,1948]]],[1540603031828,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,1948,"\n\n"]],[1948,1948],[1798,1798]]],[1540602978305,["gjx16@GJXAIOU",[[1,1950," "]],[1950,1950],[1951,1951]]],[1540603009095,["gjx16@GJXAIOU",[[1,1949,"引入："]],[1949,1949],[1952,1952]]],[1540603010758,["gjx16@GJXAIOU",[[1,1953,"\n"]],[1952,1952],[1953,1953]]],[1540603013651,["gjx16@GJXAIOU",[[1,1953,"定义指针的"]],[1953,1953],[1958,1958]]],[1540603015132,["gjx16@GJXAIOU",[[-1,1957,"的"]],[1958,1958],[1957,1957]]],[1540603016472,["gjx16@GJXAIOU",[[1,1957,"："]],[1957,1957],[1958,1958]]],[1540603017335,["gjx16@GJXAIOU",[[1,1959,"\n"]],[1958,1958],[1959,1959]]],[1540603018453,["gjx16@GJXAIOU",[[1,1959,"```"]],[1959,1959],[1962,1962]]],[1540603018481,["gjx16@GJXAIOU",[[1,1962,"language\n```\n"]],[1962,1962],[1962,1970]]],[1540603020046,["gjx16@GJXAIOU",[[-1,1962,"language"],[1,1970,"c"]],[1962,1970],[1963,1963]]],[1540603020255,["gjx16@GJXAIOU",[[1,1964,"\n"]],[1963,1963],[1964,1964]]],[1540603022648,["gjx16@GJXAIOU",[[1,1964,"icha"]],[1964,1964],[1968,1968]]],[1540603024078,["gjx16@GJXAIOU",[[-1,1964,"icha"]],[1968,1968],[1964,1964]]],[1540603031648,["gjx16@GJXAIOU",[[1,1964,"char *p1 = \"\""]],[1964,1964],[1977,1977]]],[1540603091831,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,1986,"\n\n"]],[1798,1798],[1986,1986]]],[1540603091831,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,1986,"\n\n"]],[1986,1986],[1798,1798]]],[1540603033925,["gjx16@GJXAIOU",[[1,1976,"dkfjdksjf"]],[1976,1976],[1985,1985]]],[1540603035389,["gjx16@GJXAIOU",[[1,1986,";"]],[1986,1986],[1987,1987]]],[1540603035805,["gjx16@GJXAIOU",[[1,1988,"\n"]],[1987,1987],[1988,1988]]],[1540603041511,["gjx16@GJXAIOU",[[1,1988,"char *p2 = \"\""]],[1988,1988],[2001,2001]]],[1540603042927,["gjx16@GJXAIOU",[[1,2000,"djfdkshfa"]],[2000,2000],[2009,2009]]],[1540603044929,["gjx16@GJXAIOU",[[1,2010,";"]],[2010,2010],[2011,2011]]],[1540603045236,["gjx16@GJXAIOU",[[1,2012,"\n"]],[2011,2011],[2012,2012]]],[1540603052616,["gjx16@GJXAIOU",[[1,2012,"char *p3 = \"\";"]],[2012,2012],[2026,2026]]],[1540603055097,["gjx16@GJXAIOU",[[1,2024,"dkfjaioerio"]],[2024,2024],[2035,2035]]],[1540603057748,["gjx16@GJXAIOU",[[1,2038,"\n"]],[2037,2037],[2038,2038]]],[1540603064512,["gjx16@GJXAIOU",[[1,2038,"//jiang"]],[2038,2038],[2045,2045]]],[1540603066430,["gjx16@GJXAIOU",[[-1,2040,"jiang"]],[2045,2045],[2040,2040]]],[1540603067726,["gjx16@GJXAIOU",[[1,2040,"jianh"]],[2040,2040],[2045,2045]]],[1540603068668,["gjx16@GJXAIOU",[[-1,2040,"jianh"]],[2045,2045],[2040,2040]]],[1540603072572,["gjx16@GJXAIOU",[[1,2040,"弱鸡"]],[2040,2040],[2042,2042]]],[1540603073444,["gjx16@GJXAIOU",[[-1,2040,"弱鸡"]],[2042,2042],[2040,2040]]],[1540603075995,["gjx16@GJXAIOU",[[1,2040,"若江湖"]],[2040,2040],[2043,2043]]],[1540603079212,["gjx16@GJXAIOU",[[-1,2040,"若江湖"]],[2043,2043],[2040,2040]]],[1540603091087,["gjx16@GJXAIOU",[[1,2040,"若简化定义一系列定义，"]],[2040,2040],[2051,2051]]],[1540603151832,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2060,"\n\n"]],[1798,1798],[2060,2060]]],[1540603151832,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2060,"\n\n"]],[2060,2060],[1798,1798]]],[1540603097312,["gjx16@GJXAIOU",[[1,2051,"可使用数组"]],[2051,2051],[2056,2056]]],[1540603097852,["gjx16@GJXAIOU",[[1,2057,"\n"]],[2056,2056],[2057,2057]]],[1540603099165,["gjx16@GJXAIOU",[[1,2058,"\n"]],[2057,2057],[2058,2058]]],[1540603107761,["gjx16@GJXAIOU",[[1,2054,"指针"]],[2054,2054],[2056,2056]]],[1540603109717,["gjx16@GJXAIOU",[[1,2061,"\n"]],[2058,2058],[2059,2059]]],[1540603111036,["gjx16@GJXAIOU",[[1,2062,"\n"]],[2059,2059],[2060,2060]]],[1540603115253,["gjx16@GJXAIOU",[[1,2060,"char *p []"]],[2060,2060],[2070,2070]]],[1540603116052,["gjx16@GJXAIOU",[[-1,2067," []"]],[2070,2070],[2067,2067]]],[1540603121142,["gjx16@GJXAIOU",[[1,2067,"[] = {};"]],[2067,2067],[2075,2075]]],[1540603142693,["gjx16@GJXAIOU",[[1,2073,"\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\""]],[2073,2073],[2110,2110]]],[1540603148772,["gjx16@GJXAIOU",[[1,2113,"zxz"]],[2113,2113],[2116,2116]]],[1540603211837,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2126,"\n\n"]],[1798,1798],[2126,2126]]],[1540603211837,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2126,"\n\n"]],[2126,2126],[1798,1798]]],[1540603153492,["gjx16@GJXAIOU",[[-1,2113,"zxz"]],[2116,2116],[2113,2113]]],[1540603155749,["gjx16@GJXAIOU",[[1,2113,"//z"]],[2113,2113],[2116,2116]]],[1540603157286,["gjx16@GJXAIOU",[[-1,2113,"//z"]],[2116,2116],[2113,2113]]],[1540603157428,["gjx16@GJXAIOU",[[-1,2114,"\n"]],[2113,2113],[2112,2112]]],[1540603165564,["gjx16@GJXAIOU",[[1,1959,"\n"]],[1958,1958],[1959,1959]]],[1540603167081,["gjx16@GJXAIOU",[[1,1959,"****"]],[1959,1959],[1961,1961]]],[1540603168830,["gjx16@GJXAIOU",[[1,1961,"zhizhen "]],[1961,1961],[1969,1969]]],[1540603170228,["gjx16@GJXAIOU",[[-1,1961,"zhizhen "]],[1969,1969],[1961,1961]]],[1540603177337,["gjx16@GJXAIOU",[[1,1961,"指针数组的本质："]],[1961,1961],[1969,1969]]],[1540603200262,["gjx16@GJXAIOU",[[1,1971,"是一个数组，只是每一个元素都是指针插入*"]],[1971,1971],[1991,1991]]],[1540603201429,["gjx16@GJXAIOU",[[-1,1988,"插入*"]],[1991,1991],[1988,1988]]],[1540603203945,["gjx16@GJXAIOU",[[1,1988,"char *"]],[1988,1988],[1994,1994]]],[1540603271837,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2158,"\n\n"]],[1798,1798],[2158,2158]]],[1540603271837,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2158,"\n\n"]],[2158,2158],[1798,1798]]],[1540603244679,["gjx16@GJXAIOU",[[1,2150,"\n"]],[2149,2149],[2150,2150]]],[1540603245869,["gjx16@GJXAIOU",[[1,2150,"dayi"]],[2150,2150],[2154,2154]]],[1540603246908,["gjx16@GJXAIOU",[[-1,2150,"dayi"]],[2154,2154],[2150,2150]]],[1540603247838,["gjx16@GJXAIOU",[[1,2150,"、、"]],[2150,2150],[2152,2152]]],[1540603248653,["gjx16@GJXAIOU",[[-1,2150,"、、"]],[2152,2152],[2150,2150]]],[1540603249667,["gjx16@GJXAIOU",[[1,2150,"/'/"]],[2150,2150],[2153,2153]]],[1540603251164,["gjx16@GJXAIOU",[[-1,2151,"'/"]],[2153,2153],[2151,2151]]],[1540603256691,["gjx16@GJXAIOU",[[1,2151,"/打印方式"]],[2151,2151],[2156,2156]]],[1540603257260,["gjx16@GJXAIOU",[[1,2157,"\n"]],[2156,2156],[2157,2157]]],[1540603268294,["gjx16@GJXAIOU",[[1,2157," int i ;= 0"]],[2157,2157],[2168,2168]]],[1540603269485,["gjx16@GJXAIOU",[[-1,2164,";= 0"]],[2168,2168],[2164,2164]]],[1540603271198,["gjx16@GJXAIOU",[[1,2164,"= "]],[2164,2164],[2166,2166]]],[1540603331838,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2175,"\n\n"]],[1798,1798],[2175,2175]]],[1540603331838,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2175,"\n\n"]],[2175,2175],[1798,1798]]],[1540603272294,["gjx16@GJXAIOU",[[1,2166,"0;"]],[2166,2166],[2168,2168]]],[1540603272717,["gjx16@GJXAIOU",[[1,2169," \n"]],[2168,2168],[2170,2170]]],[1540603275438,["gjx16@GJXAIOU",[[1,2170,"for()"]],[2170,2170],[2175,2175]]],[1540603289088,["gjx16@GJXAIOU",[[1,2174,"i = 0; i < 4 ; i++"]],[2174,2174],[2192,2192]]],[1540603291421,["gjx16@GJXAIOU",[[1,2194," \n"]],[2193,2193],[2195,2195]]],[1540603294337,["gjx16@GJXAIOU",[[1,2195,"  {}"]],[2195,2195],[2199,2199]]],[1540603295632,["gjx16@GJXAIOU",[[1,2198,"\n   \n   "]],[2198,2198],[2206,2206]]],[1540603301838,["gjx16@GJXAIOU",[[1,2202,"    printf();"]],[2202,2202],[2215,2215]]],[1540603304102,["gjx16@GJXAIOU",[[1,2213,"\"\""]],[2213,2213],[2215,2215]]],[1540603307023,["gjx16@GJXAIOU",[[1,2214,"%d"]],[2214,2214],[2216,2216]]],[1540603308204,["gjx16@GJXAIOU",[[-1,2215,"d"]],[2216,2216],[2215,2215]]],[1540603309742,["gjx16@GJXAIOU",[[1,2215,"s\\m"]],[2215,2215],[2218,2218]]],[1540603310356,["gjx16@GJXAIOU",[[-1,2217,"m"]],[2218,2218],[2217,2217]]],[1540603310654,["gjx16@GJXAIOU",[[1,2217,"n"]],[2217,2217],[2218,2218]]],[1540603315510,["gjx16@GJXAIOU",[[1,2219,",p[i["]],[2219,2219],[2224,2224]]],[1540603316308,["gjx16@GJXAIOU",[[-1,2223,"["]],[2224,2224],[2223,2223]]],[1540603317056,["gjx16@GJXAIOU",[[1,2223,"]"]],[2223,2223],[2224,2224]]],[1540603451841,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2240,"\n\n"]],[1798,1798],[2240,2240]]],[1540603451841,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2240,"\n\n"]],[2240,2240],[1798,1798]]],[1540603424350,["gjx16@GJXAIOU",[[1,1995,"\n"]],[1995,1995],[1996,1996]]],[1540603428654,["gjx16@GJXAIOU",[[1,1995,"- diyi"]],[1995,1995],[2001,2001]]],[1540603429757,["gjx16@GJXAIOU",[[-1,1997,"diyi"]],[2001,2001],[1997,1997]]],[1540603443644,["gjx16@GJXAIOU",[[1,1997,"第一种内存模型"]],[1997,1997],[2004,2004]]],[1540603448541,["gjx16@GJXAIOU",[[-1,1968,"："]],[1969,1969],[1968,1968]]],[1540603449704,["gjx16@GJXAIOU",[[1,1968,"："]],[1968,1968],[1969,1969]]],[1540603451342,["gjx16@GJXAIOU",[[1,1971," "]],[1971,1971],[1972,1972]]],[1540603511837,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2251,"\n\n"]],[1798,1798],[2251,2251]]],[1540603511837,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2251,"\n\n"]],[2251,2251],[1798,1798]]],[1540603457390,["gjx16@GJXAIOU",[[1,2248,"\n"]],[2246,2246],[2247,2247]]],[1540603466048,["gjx16@GJXAIOU",[[1,2247,"内存四区图："]],[2247,2247],[2253,2253]]],[1540603466572,["gjx16@GJXAIOU",[[1,2255,"\n"]],[2253,2253],[2254,2254]]],[1540603631845,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2259,"\n\n"]],[1798,1798],[2259,2259]]],[1540603631845,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2259,"\n\n"]],[2259,2259],[1798,1798]]],[1540603627653,["gjx16@GJXAIOU",[[1,2256,"\n"]],[2253,2253],[2254,2254]]],[1540603691847,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2260,"\n\n"]],[1798,1798],[2260,2260]]],[1540603691847,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2260,"\n\n"]],[2260,2260],[1798,1798]]],[1540603650335,["gjx16@GJXAIOU",[[1,2254,"![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)"]],[2254,2254],[2354,2354]]],[1540603652477,["gjx16@GJXAIOU",[[1,2254,"\n"]],[2253,2253],[2254,2254]]],[1540603674635,["gjx16@GJXAIOU",[[1,2160,"int"]],[2160,2160],[2163,2163]]],[1540603676591,["gjx16@GJXAIOU",[[-1,2160,"int"]],[2163,2163],[2160,2160]]],[1540603677944,["gjx16@GJXAIOU",[[1,2160,"int a"]],[2160,2160],[2165,2165]]],[1540603678733,["gjx16@GJXAIOU",[[-1,2164,"a"]],[2165,2165],[2164,2164]]],[1540603690665,["gjx16@GJXAIOU",[[1,2164," n = sizoeof()"]],[2164,2164],[2178,2178]]],[1540603751848,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2378,"\n\n"]],[1798,1798],[2378,2378]]],[1540603751848,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2378,"\n\n"]],[2378,2378],[1798,1798]]],[1540603692095,["gjx16@GJXAIOU",[[1,2177,"o"]],[2177,2177],[2178,2178]]],[1540603692981,["gjx16@GJXAIOU",[[-1,2177,"o"]],[2178,2178],[2177,2177]]],[1540603693374,["gjx16@GJXAIOU",[[1,2177,"p"]],[2177,2177],[2178,2178]]],[1540603699606,["gjx16@GJXAIOU",[[1,2179," /sizeo"]],[2179,2179],[2186,2186]]],[1540603700405,["gjx16@GJXAIOU",[[-1,2185,"o"]],[2186,2186],[2185,2185]]],[1540603703861,["gjx16@GJXAIOU",[[1,2185,"of()"]],[2185,2185],[2189,2189]]],[1540603707258,["gjx16@GJXAIOU",[[1,2188,"p[0]"]],[2188,2188],[2192,2192]]],[1540603710150,["gjx16@GJXAIOU",[[1,2193,";"]],[2193,2193],[2194,2194]]],[1540603714509,["gjx16@GJXAIOU",[[-1,2230,"4"]],[2231,2231],[2230,2230]]],[1540603714976,["gjx16@GJXAIOU",[[1,2230,"n"]],[2230,2230],[2231,2231]]],[1540603991855,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2394,"\n\n"]],[1798,1798],[2394,2394]]],[1540603991855,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2394,"\n\n"]],[2394,2394],[1798,1798]]],[1540603974157,["gjx16@GJXAIOU",[[1,2195,"\n"]],[2194,2194],[2195,2195]]],[1540603976272,["gjx16@GJXAIOU",[[1,2195,"da"]],[2195,2195],[2197,2197]]],[1540603976861,["gjx16@GJXAIOU",[[-1,2195,"da"]],[2197,2197],[2195,2195]]],[1540603978830,["gjx16@GJXAIOU",[[1,2195,"//zh"]],[2195,2195],[2199,2199]]],[1540603979565,["gjx16@GJXAIOU",[[-1,2197,"zh"]],[2199,2199],[2197,2197]]],[1540603991673,["gjx16@GJXAIOU",[[1,2197,"这种方法只能是没有定义"]],[2197,2197],[2208,2208]]],[1540604051855,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2408,"\n\n"]],[1798,1798],[2408,2408]]],[1540604051855,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2408,"\n\n"]],[2408,2408],[1798,1798]]],[1540604004433,["gjx16@GJXAIOU",[[1,2208,"数组长度的时候使用，以下方法就不能使用"]],[2208,2208],[2227,2227]]],[1540604004924,["gjx16@GJXAIOU",[[1,2228,"\n"]],[2227,2227],[2228,2228]]],[1540604010959,["gjx16@GJXAIOU",[[1,2229,"\n"]],[2228,2228],[2229,2229]]],[1540604011077,["gjx16@GJXAIOU",[[1,2230,"\n"]],[2229,2229],[2230,2230]]],[1540604011229,["gjx16@GJXAIOU",[[1,2231,"\n"]],[2230,2230],[2231,2231]]],[1540604013961,["gjx16@GJXAIOU",[[1,2228,"、、"]],[2228,2228],[2230,2230]]],[1540604014869,["gjx16@GJXAIOU",[[-1,2228,"、、"]],[2230,2230],[2228,2228]]],[1540604015864,["gjx16@GJXAIOU",[[1,2228,"//"]],[2228,2228],[2230,2230]]],[1540604016749,["gjx16@GJXAIOU",[[1,2234,"\n"]],[2230,2230],[2231,2231]]],[1540604017183,["gjx16@GJXAIOU",[[1,2231,"//"]],[2231,2231],[2233,2233]]],[1540604017647,["gjx16@GJXAIOU",[[1,2237,"\n"]],[2233,2233],[2234,2234]]],[1540604018617,["gjx16@GJXAIOU",[[1,2234,"//"]],[2234,2234],[2236,2236]]],[1540604040725,["gjx16@GJXAIOU",[[1,1996,"\n"]],[1996,1996],[1997,1997]]],[1540604111851,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2440,"\n\n"]],[1798,1798],[2440,2440]]],[1540604111851,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2440,"\n\n"]],[2440,2440],[1798,1798]]],[1540604098008,["gjx16@GJXAIOU",[[1,2231,"char *p[20"]],[2231,2231],[2241,2241]]],[1540604098990,["gjx16@GJXAIOU",[[-1,2239,"20"]],[2241,2241],[2239,2239]]],[1540604108734,["gjx16@GJXAIOU",[[1,2239,"10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};"]],[2239,2239],[2285,2285]]],[1540604171855,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2494,"\n\n"]],[1798,1798],[2494,2494]]],[1540604171855,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2494,"\n\n"]],[2494,2494],[1798,1798]]],[1540604114961,["gjx16@GJXAIOU",[[1,2288,"yi"]],[2288,2288],[2290,2290]]],[1540604115647,["gjx16@GJXAIOU",[[-1,2288,"yi"]],[2290,2290],[2288,2288]]],[1540604125649,["gjx16@GJXAIOU",[[1,2288,"printf();"]],[2288,2288],[2297,2297]]],[1540604127607,["gjx16@GJXAIOU",[[1,2295,"\"\""]],[2295,2295],[2297,2297]]],[1540604137408,["gjx16@GJXAIOU",[[1,2296,"%d,%d\\n"]],[2296,2296],[2303,2303]]],[1540604140439,["gjx16@GJXAIOU",[[1,2296,"sizo"]],[2296,2296],[2300,2300]]],[1540604141262,["gjx16@GJXAIOU",[[-1,2299,"o"]],[2300,2300],[2299,2299]]],[1540604142183,["gjx16@GJXAIOU",[[1,2299,"eod"]],[2299,2299],[2302,2302]]],[1540604143150,["gjx16@GJXAIOU",[[-1,2301,"d"]],[2302,2302],[2301,2301]]],[1540604146683,["gjx16@GJXAIOU",[[1,2301,"f()"]],[2301,2301],[2304,2304]]],[1540604147903,["gjx16@GJXAIOU",[[1,2303,"p"]],[2303,2303],[2304,2304]]],[1540604149755,["gjx16@GJXAIOU",[[1,2305," = "]],[2305,2305],[2308,2308]]],[1540604156929,["gjx16@GJXAIOU",[[1,2311,"sizeof()"]],[2311,2311],[2319,2319]]],[1540604160479,["gjx16@GJXAIOU",[[1,2318,"p[0]"]],[2318,2318],[2322,2322]]],[1540604163934,["gjx16@GJXAIOU",[[1,2323," = "]],[2323,2323],[2326,2326]]],[1540604168390,["gjx16@GJXAIOU",[[1,2331,",sizo"]],[2331,2331],[2336,2336]]],[1540604168805,["gjx16@GJXAIOU",[[-1,2335,"o"]],[2336,2336],[2335,2335]]],[1540604170735,["gjx16@GJXAIOU",[[1,2335,"eof("]],[2335,2335],[2339,2339]]],[1540604170847,["gjx16@GJXAIOU",[[1,2340,")"]],[2339,2339],[2340,2340]]],[1540604231858,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2548,"\n\n"]],[1798,1798],[2548,2548]]],[1540604231858,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2548,"\n\n"]],[2548,2548],[1798,1798]]],[1540604173447,["gjx16@GJXAIOU",[[1,2339,"p"]],[2339,2339],[2340,2340]]],[1540604178143,["gjx16@GJXAIOU",[[1,2341,",sizo"]],[2341,2341],[2346,2346]]],[1540604179197,["gjx16@GJXAIOU",[[-1,2345,"o"]],[2346,2346],[2345,2345]]],[1540604181928,["gjx16@GJXAIOU",[[1,2345,"eof("]],[2345,2345],[2349,2349]]],[1540604181994,["gjx16@GJXAIOU",[[1,2350,")"]],[2349,2349],[2350,2350]]],[1540604188632,["gjx16@GJXAIOU",[[1,2349,"p[0]"]],[2349,2349],[2353,2353]]],[1540604195601,["gjx16@GJXAIOU",[[1,2359,"shu"]],[2359,2359],[2362,2362]]],[1540604196197,["gjx16@GJXAIOU",[[-1,2359,"shu"]],[2362,2362],[2359,2359]]],[1540604207511,["gjx16@GJXAIOU",[[1,2359,"输出结果为：40和4（）"]],[2359,2359],[2371,2371]]],[1540604213753,["gjx16@GJXAIOU",[[1,2370,"因为32为"]],[2370,2370],[2375,2375]]],[1540604214382,["gjx16@GJXAIOU",[[-1,2374,"为"]],[2375,2375],[2374,2374]]],[1540604229851,["gjx16@GJXAIOU",[[1,2374,"位系统中指针占4个字节"]],[2374,2374],[2385,2385]]],[1540604411862,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2589,"\n\n"]],[1798,1798],[2589,2589]]],[1540604411862,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2589,"\n\n"]],[2589,2589],[1798,1798]]],[1540604354694,["gjx16@GJXAIOU",[[1,2586,"\n"]],[2584,2584],[2585,2585]]],[1540604354845,["gjx16@GJXAIOU",[[1,2587,"\n"]],[2585,2585],[2586,2586]]],[1540604356454,["gjx16@GJXAIOU",[[1,2586,"88"]],[2586,2586],[2588,2588]]],[1540604357245,["gjx16@GJXAIOU",[[-1,2586,"88"]],[2588,2588],[2586,2586]]],[1540604357990,["gjx16@GJXAIOU",[[1,2586,"****"]],[2586,2586],[2588,2588]]],[1540604360152,["gjx16@GJXAIOU",[[1,2588,"排序："]],[2588,2588],[2591,2591]]],[1540604361885,["gjx16@GJXAIOU",[[1,2595,"\n"]],[2593,2593],[2594,2594]]],[1540605491874,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2599,"\n\n"]],[1798,1798],[2599,2599]]],[1540605491874,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2599,"\n\n"]],[2599,2599],[1798,1798]]],[1540605488840,["gjx16@GJXAIOU",[[1,2594,"~··"]],[2594,2594],[2597,2597]]],[1540605489702,["gjx16@GJXAIOU",[[-1,2594,"~··"]],[2597,2597],[2594,2594]]],[1540605489830,["gjx16@GJXAIOU",[[-1,2595,"\n"]],[2594,2594],[2593,2593]]],[1540605490863,["gjx16@GJXAIOU",[[1,2593,"```"]],[2593,2593],[2596,2596]]],[1540605491781,["gjx16@GJXAIOU",[[-1,2594,"``"]],[2596,2596],[2594,2594]]],[1540605551879,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,2599,"\n\n"]],[1798,1798],[2599,2599]]],[1540605551879,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,2599,"\n\n"]],[2599,2599],[1798,1798]]],[1540605491912,["gjx16@GJXAIOU",[[-1,2593,"`"]],[2594,2594],[2593,2593]]],[1540605492583,["gjx16@GJXAIOU",[[1,2595,"\n"]],[2593,2593],[2594,2594]]],[1540605493544,["gjx16@GJXAIOU",[[1,2594,"```"]],[2594,2594],[2597,2597]]],[1540605493571,["gjx16@GJXAIOU",[[1,2597,"language\n```\n"]],[2597,2597],[2597,2605]]],[1540605494215,["gjx16@GJXAIOU",[[-1,2597,"language"],[1,2605,"c"]],[2597,2605],[2598,2598]]],[1540605494422,["gjx16@GJXAIOU",[[1,2599,"\n"]],[2598,2598],[2599,2599]]],[1540605495437,["gjx16@GJXAIOU",[[1,2599,"#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\n\tprintf(\"shuruqianshuzu:\");\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i+1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\n\n\t}\n\n\n\tprintf(\"paixuzhihou:\");\n\tfor (i = 0; i < n; i++)\n\t{\n\t\t\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n\n\treturn 0;\n}\n"]],[2599,2599],[3204,3204]]],[1540605500454,["gjx16@GJXAIOU",[[1,3211,"\n"]],[3208,3208],[3209,3209]]],[1540605505936,["gjx16@GJXAIOU",[[1,3209,"程序运行结果；"]],[3209,3209],[3216,3216]]],[1540605506437,["gjx16@GJXAIOU",[[1,3219,"\n"]],[3216,3216],[3217,3217]]],[1540605522885,["gjx16@GJXAIOU",[[1,3217,"paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,"]],[3217,3217],[3270,3270]]],[1540605528806,["gjx16@GJXAIOU",[[-1,3217,"paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,"]],[3218,3270],[3217,3217]]],[1540605541550,["gjx16@GJXAIOU",[[1,3217,"shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,\npaixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,"]],[3217,3217],[3327,3327]]],[1540605544416,["gjx16@GJXAIOU",[[1,3217,"·"]],[3217,3217],[3218,3218]]],[1540605545382,["gjx16@GJXAIOU",[[-1,3217,"·"]],[3218,3218],[3217,3217]]],[1540605545855,["gjx16@GJXAIOU",[[1,3217,"`"]],[3217,3217],[3218,3218]]],[1540605547071,["gjx16@GJXAIOU",[[1,3275,"`"]],[3275,3275],[3276,3276]]],[1540605550994,["gjx16@GJXAIOU",[[1,3329,"`"]],[3329,3329],[3330,3330]]],[1540605611883,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3336,"\n\n"]],[1798,1798],[3336,3336]]],[1540605611883,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3336,"\n\n"]],[3336,3336],[1798,1798]]],[1540605551963,["gjx16@GJXAIOU",[[1,3274,"`"]],[3274,3274],[3275,3275]]],[1540605567263,["gjx16@GJXAIOU",[[1,3334,"\n"]],[3332,3332],[3333,3333]]],[1540605567391,["gjx16@GJXAIOU",[[1,3335,"\n"]],[3333,3333],[3334,3334]]],[1540605851881,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3339,"\n\n"]],[1798,1798],[3339,3339]]],[1540605851881,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3339,"\n\n"]],[3339,3339],[1798,1798]]],[1540605795811,["gjx16@GJXAIOU",[[1,3187," "]],[3187,3187],[3188,3188]]],[1540606391892,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3340,"\n\n"]],[1798,1798],[3340,3340]]],[1540606391892,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3340,"\n\n"]],[3340,3340],[1798,1798]]],[1540606336174,["gjx16@GJXAIOU",[[1,2655,"\n\nvoid pr"],[-1,2658," main(void)\n{\n\t"],[1,2673,"_array("],[-1,2682," = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\t"],[1,2735,", "],[-1,2739," n = sizeof(p) / sizeof(p[0]);\n\tint i = 0;\n\t"],[1,2783,"n)\n//或者void print_array(char **p,"],[-1,2787,"j = 0;"],[1,2793,"n)\n{"],[-1,2799,"*tmp = NULL;\n\n\n\tprintf(\"shuruqianshuzu:\")"],[1,2840,"i = 0"],[1,2914,"}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;"],[1,2969," "],[1,2970," "],[-1,3084,"\n\n"],[1,3089,"}"],[-1,3091,"\tpr"],[-1,3097,"f(\"paixuzhihou:\");\n\tfor (i = 0; i < n; i++)\n\t{"],[1,3143," main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);"],[-1,3145,"\t"],[-1,3147,"\t"],[-1,3157,"%s ,\", p[i]"],[1,3168,"shuruqianshuzu:\");\n\n\tprint_array(p,n"],[-1,3172,"}"],[1,3173,"\n\tsort_array(p,n);\n"],[-1,3183,"\\n"],[1,3185,"paixuzhihou:"],[1,3187,";\n\tprint_array(p,"],[1,3188,"n)"],[-1,3189,"\n"]],[2599,3205],[3317,3317]]],[1540606351432,["gjx16@GJXAIOU",[[1,3447,"****"]],[3447,3447],[3449,3449]]],[1540606352640,["gjx16@GJXAIOU",[[1,3449,"erw"]],[3449,3449],[3452,3452]]],[1540606353342,["gjx16@GJXAIOU",[[-1,3449,"erw"]],[3452,3452],[3449,3449]]],[1540606355098,["gjx16@GJXAIOU",[[1,3449,"Erwin"]],[3449,3449],[3454,3454]]],[1540606356782,["gjx16@GJXAIOU",[[-1,3449,"Erwin"]],[3454,3454],[3449,3449]]],[1540606365595,["gjx16@GJXAIOU",[[1,3449,"二维数组的使用："]],[3449,3449],[3457,3457]]],[1540606367414,["gjx16@GJXAIOU",[[1,3461,"\n"]],[3459,3459],[3460,3460]]],[1540606367534,["gjx16@GJXAIOU",[[1,3462,"\n"]],[3460,3460],[3461,3461]]],[1540606451891,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3466,"\n\n"]],[1798,1798],[3466,3466]]],[1540606451891,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3466,"\n\n"]],[3466,3466],[1798,1798]]],[1540606399022,["gjx16@GJXAIOU",[[1,3447,"\n"]],[3446,3446],[3447,3447]]],[1540606401995,["gjx16@GJXAIOU",[[1,3447,"传值"]],[3447,3447],[3449,3449]]],[1540606402944,["gjx16@GJXAIOU",[[-1,3447,"传值"]],[3449,3449],[3447,3447]]],[1540606418371,["gjx16@GJXAIOU",[[1,3447,"实参与形参传值参数的定义方法："]],[3447,3447],[3462,3462]]],[1540606418847,["gjx16@GJXAIOU",[[1,3463,"\n"]],[3462,3462],[3463,3463]]],[1540606432889,["gjx16@GJXAIOU",[[1,3463,"例子1："]],[3463,3463],[3467,3467]]],[1540606434366,["gjx16@GJXAIOU",[[1,3468,"\n"]],[3467,3467],[3468,3468]]],[1540606435887,["gjx16@GJXAIOU",[[1,3468,"```"]],[3468,3468],[3471,3471]]],[1540606435919,["gjx16@GJXAIOU",[[1,3471,"language\n```\n"]],[3471,3471],[3471,3479]]],[1540606436856,["gjx16@GJXAIOU",[[-1,3471,"language"],[1,3479,"c"]],[3471,3479],[3472,3472]]],[1540606437070,["gjx16@GJXAIOU",[[1,3473,"\n"]],[3472,3472],[3473,3473]]],[1540606511899,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3498,"\n\n"]],[1798,1798],[3498,3498]]],[1540606511899,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3498,"\n\n"]],[3498,3498],[1798,1798]]],[1540606459303,["gjx16@GJXAIOU",[[1,3473,"char *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n"]],[3473,3473],[3533,3533]]],[1540606463225,["gjx16@GJXAIOU",[[-1,3491,"111"]],[3494,3494],[3491,3491]]],[1540606466854,["gjx16@GJXAIOU",[[-1,3498,"4444"]],[3499,3499],[3495,3495]]],[1540606470935,["gjx16@GJXAIOU",[[-1,3505,"aaaaaa"]],[3507,3507],[3501,3501]]],[1540606474553,["gjx16@GJXAIOU",[[-1,3512,"0000"]],[3513,3513],[3509,3509]]],[1540606631912,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3541,"\n\n"]],[1798,1798],[3541,3541]]],[1540606631912,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3541,"\n\n"]],[3541,3541],[1798,1798]]],[1540606593367,["gjx16@GJXAIOU",[[1,3473,"\n"]],[3473,3473],[3474,3474]]],[1540606597833,["gjx16@GJXAIOU",[[1,3473,"int main()"]],[3473,3473],[3483,3483]]],[1540606600174,["gjx16@GJXAIOU",[[1,3484,"\n"]],[3483,3483],[3484,3484]]],[1540606600688,["gjx16@GJXAIOU",[[1,3484,"{"]],[3484,3484],[3485,3485]]],[1540606603479,["gjx16@GJXAIOU",[[1,3486,"  "]],[3486,3486],[3488,3488]]],[1540606605425,["gjx16@GJXAIOU",[[1,3531,"}"]],[3531,3531],[3532,3532]]],[1540606615686,["gjx16@GJXAIOU",[[1,3487,"\n  "]],[3487,3487],[3490,3490]]],[1540606619880,["gjx16@GJXAIOU",[[-1,3486," "]],[3487,3487],[3486,3486]]],[1540606620998,["gjx16@GJXAIOU",[[-1,3486,"\n"]],[3486,3486],[3485,3485]]],[1540606623406,["gjx16@GJXAIOU",[[1,3532,"   \n"]],[3531,3531],[3535,3535]]],[1540606629400,["gjx16@GJXAIOU",[[1,3535,"array()"]],[3535,3535],[3542,3542]]],[1540606691905,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3569,"\n\n"]],[1798,1798],[3569,3569]]],[1540606691905,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3569,"\n\n"]],[3569,3569],[1798,1798]]],[1540606632073,["gjx16@GJXAIOU",[[1,3541,"p"]],[3541,3541],[3542,3542]]],[1540606634144,["gjx16@GJXAIOU",[[1,3543,";"]],[3543,3543],[3544,3544]]],[1540606638639,["gjx16@GJXAIOU",[[1,3473,"\n"]],[3472,3472],[3473,3473]]],[1540606642496,["gjx16@GJXAIOU",[[1,3473,"vois"]],[3473,3473],[3477,3477]]],[1540606643383,["gjx16@GJXAIOU",[[-1,3476,"s"]],[3477,3477],[3476,3476]]],[1540606647407,["gjx16@GJXAIOU",[[1,3476,"d array()"]],[3476,3476],[3485,3485]]],[1540606666920,["gjx16@GJXAIOU",[[1,3484,"char a[]//或者char *a"]],[3484,3484],[3503,3503]]],[1540606751906,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3603,"\n\n"]],[1798,1798],[3603,3603]]],[1540606751906,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3603,"\n\n"]],[3603,3603],[1798,1798]]],[1540606694319,["gjx16@GJXAIOU",[[1,3584,"\n"]],[3582,3582],[3583,3583]]],[1540606694658,["gjx16@GJXAIOU",[[1,3585,"\n"]],[3583,3583],[3584,3584]]],[1540606695927,["gjx16@GJXAIOU",[[1,3584,"lizi"]],[3584,3584],[3588,3588]]],[1540606696943,["gjx16@GJXAIOU",[[-1,3584,"lizi"]],[3588,3588],[3584,3584]]],[1540606700388,["gjx16@GJXAIOU",[[1,3584,"例子2："]],[3584,3584],[3588,3588]]],[1540606700766,["gjx16@GJXAIOU",[[1,3590,"\n"]],[3588,3588],[3589,3589]]],[1540606716124,["gjx16@GJXAIOU",[[1,3589,"```"]],[3589,3589],[3592,3592]]],[1540606716163,["gjx16@GJXAIOU",[[1,3592,"language\n```\n"]],[3592,3592],[3592,3600]]],[1540606716969,["gjx16@GJXAIOU",[[-1,3592,"language"],[1,3600,"c"]],[3592,3600],[3593,3593]]],[1540606717215,["gjx16@GJXAIOU",[[1,3594,"\n"]],[3593,3593],[3594,3594]]],[1540606717391,["gjx16@GJXAIOU",[[1,3595,"\n"]],[3594,3594],[3595,3595]]],[1540606722702,["gjx16@GJXAIOU",[[1,3594,"void array(char a[]//或者char *a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}"]],[3594,3594],[3699,3699]]],[1540606731460,["gjx16@GJXAIOU",[[1,3610,"*"]],[3610,3610],[3611,3611]]],[1540606736969,["gjx16@GJXAIOU",[[1,3624,"*"]],[3623,3623],[3624,3624]]],[1540606742289,["gjx16@GJXAIOU",[[-1,3526,"*"]],[3527,3527],[3526,3526]]],[1540609271950,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3727,"\n\n"]],[1798,1798],[3727,3727]]],[1540609271950,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3727,"\n\n"]],[3727,3727],[1798,1798]]],[1540609261922,["gjx16@GJXAIOU",[[1,3722,"shou"]],[3722,3722],[3726,3726]]],[1540609262766,["gjx16@GJXAIOU",[[-1,3722,"shou"]],[3726,3726],[3722,3722]]],[1540609270683,["gjx16@GJXAIOU",[[1,3722,"首先一维数组 的地址"]],[3722,3722],[3732,3732]]],[1540609271408,["gjx16@GJXAIOU",[[1,3734,"\n"]],[3732,3732],[3733,3733]]],[1540609331954,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3738,"\n\n"]],[1798,1798],[3738,3738]]],[1540609331954,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3738,"\n\n"]],[3738,3738],[1798,1798]]],[1540609272980,["gjx16@GJXAIOU",[[1,3733,"```"]],[3733,3733],[3736,3736]]],[1540609273012,["gjx16@GJXAIOU",[[1,3736,"language\n```\n"]],[3736,3736],[3736,3744]]],[1540609274001,["gjx16@GJXAIOU",[[-1,3736,"language"],[1,3744,"c"]],[3736,3744],[3737,3737]]],[1540609274199,["gjx16@GJXAIOU",[[1,3738,"\n"]],[3737,3737],[3738,3738]]],[1540609276666,["gjx16@GJXAIOU",[[1,3738,"i"]],[3738,3738],[3739,3739]]],[1540609277199,["gjx16@GJXAIOU",[[-1,3738,"i"]],[3739,3739],[3738,3738]]],[1540609287185,["gjx16@GJXAIOU",[[1,3738,"char a[10] = \"\""]],[3738,3738],[3753,3753]]],[1540609289158,["gjx16@GJXAIOU",[[1,3752,"dkfjdkfj"]],[3752,3752],[3760,3760]]],[1540609290683,["gjx16@GJXAIOU",[[1,3761,";"]],[3761,3761],[3762,3762]]],[1540609290983,["gjx16@GJXAIOU",[[1,3763,"\n"]],[3762,3762],[3763,3763]]],[1540609301081,["gjx16@GJXAIOU",[[1,3763,"printf();"]],[3763,3763],[3772,3772]]],[1540609303233,["gjx16@GJXAIOU",[[1,3770,"\"\""]],[3770,3770],[3772,3772]]],[1540609311557,["gjx16@GJXAIOU",[[1,3771,"%d,%d\\n"]],[3771,3771],[3778,3778]]],[1540609329826,["gjx16@GJXAIOU",[[1,3779,",a,&a,*a+1"]],[3779,3779],[3789,3789]]],[1540609391952,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3801,"\n\n"]],[1798,1798],[3801,3801]]],[1540609391952,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3801,"\n\n"]],[3801,3801],[1798,1798]]],[1540609332767,["gjx16@GJXAIOU",[[-1,3785,"*"]],[3786,3786],[3785,3785]]],[1540609334508,["gjx16@GJXAIOU",[[1,3785,"&"]],[3785,3785],[3786,3786]]],[1540609340319,["gjx16@GJXAIOU",[[1,3792,"\n"]],[3791,3791],[3792,3792]]],[1540609340680,["gjx16@GJXAIOU",[[1,3793,"\n"]],[3792,3792],[3793,3793]]],[1540609356495,["gjx16@GJXAIOU",[[1,3793,"char a[4][29]= {};"]],[3793,3793],[3811,3811]]],[1540609362589,["gjx16@GJXAIOU",[[1,3809,"\"\""]],[3809,3809],[3811,3811]]],[1540609364510,["gjx16@GJXAIOU",[[1,3810,"sfdsfaf"]],[3810,3810],[3817,3817]]],[1540609370933,["gjx16@GJXAIOU",[[1,3818,",\"\""]],[3818,3818],[3821,3821]]],[1540609373857,["gjx16@GJXAIOU",[[1,3820,"dfdgdfgre"]],[3820,3820],[3829,3829]]],[1540609376588,["gjx16@GJXAIOU",[[1,3830,",\"\""]],[3830,3830],[3833,3833]]],[1540609378122,["gjx16@GJXAIOU",[[1,3832,"dfdogio"]],[3832,3832],[3839,3839]]],[1540609380591,["gjx16@GJXAIOU",[[1,3843,"\n"]],[3842,3842],[3843,3843]]],[1540609571953,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3853,"\n\n"]],[1798,1798],[3853,3853]]],[1540609571953,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3853,"\n\n"]],[3853,3853],[1798,1798]]],[1540609533972,["gjx16@GJXAIOU",[[1,3791,"//&abia"]],[3791,3791],[3798,3798]]],[1540609534800,["gjx16@GJXAIOU",[[-1,3795,"bia"]],[3798,3798],[3795,3795]]],[1540609541278,["gjx16@GJXAIOU",[[1,3795,"表示一维数组"]],[3795,3795],[3801,3801]]],[1540609546157,["gjx16@GJXAIOU",[[1,3797,"整个"]],[3797,3797],[3799,3799]]],[1540609557125,["gjx16@GJXAIOU",[[1,3803,"的地址，a拜师"]],[3803,3803],[3810,3810]]],[1540609557967,["gjx16@GJXAIOU",[[-1,3808,"拜师"]],[3810,3810],[3808,3808]]],[1540609562941,["gjx16@GJXAIOU",[[1,3808,"表示有元素"]],[3808,3808],[3813,3813]]],[1540609563935,["gjx16@GJXAIOU",[[-1,3810,"有元素"]],[3813,3813],[3810,3810]]],[1540609570526,["gjx16@GJXAIOU",[[1,3810,"首元素的地址"]],[3810,3810],[3816,3816]]],[1540609631994,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3878,"\n\n"]],[1798,1798],[3878,3878]]],[1540609631994,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3878,"\n\n"]],[3878,3878],[1798,1798]]],[1540609574352,["gjx16@GJXAIOU",[[1,3869,"\n"]],[3867,3867],[3868,3868]]],[1540609590872,["gjx16@GJXAIOU",[[1,3868,"printf(\"%d,%d\\n\",a,&a,&a+1);"]],[3868,3868],[3896,3896]]],[1540609603868,["gjx16@GJXAIOU",[[1,3898,"\n"]],[3896,3896],[3897,3897]]],[1540609604024,["gjx16@GJXAIOU",[[1,3899,"\n"]],[3897,3897],[3898,3898]]],[1540609604648,["gjx16@GJXAIOU",[[1,3900,"\n"]],[3898,3898],[3899,3899]]],[1540609608841,["gjx16@GJXAIOU",[[1,3899,"inti"]],[3899,3899],[3903,3903]]],[1540609611280,["gjx16@GJXAIOU",[[-1,3899,"inti"]],[3903,3903],[3899,3899]]],[1540609611447,["gjx16@GJXAIOU",[[-1,3900,"\n"]],[3899,3899],[3898,3898]]],[1540609613808,["gjx16@GJXAIOU",[[1,3818,"\n"]],[3817,3817],[3818,3818]]],[1540609613953,["gjx16@GJXAIOU",[[1,3819,"\n"]],[3818,3818],[3819,3819]]],[1540609614095,["gjx16@GJXAIOU",[[1,3820,"\n"]],[3819,3819],[3820,3820]]],[1540609614242,["gjx16@GJXAIOU",[[1,3821,"\n"]],[3820,3820],[3821,3821]]],[1540609614360,["gjx16@GJXAIOU",[[1,3822,"\n"]],[3821,3821],[3822,3822]]],[1540609620737,["gjx16@GJXAIOU",[[1,3818,"int i = 0'"]],[3818,3818],[3828,3828]]],[1540609621607,["gjx16@GJXAIOU",[[-1,3827,"'"]],[3828,3828],[3827,3827]]],[1540609622186,["gjx16@GJXAIOU",[[1,3827,";"]],[3827,3827],[3828,3828]]],[1540609622512,["gjx16@GJXAIOU",[[1,3833,"\n"]],[3828,3828],[3829,3829]]],[1540609624619,["gjx16@GJXAIOU",[[1,3829,"for()"]],[3829,3829],[3834,3834]]],[1540609631900,["gjx16@GJXAIOU",[[1,3833,"i = 0; i < 1"]],[3833,3833],[3845,3845]]],[1540609691991,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3942,"\n\n"]],[1798,1798],[3942,3942]]],[1540609691991,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3942,"\n\n"]],[3942,3942],[1798,1798]]],[1540609634449,["gjx16@GJXAIOU",[[1,3845,"0; i++"]],[3845,3845],[3851,3851]]],[1540609635868,["gjx16@GJXAIOU",[[1,3857,"\n"]],[3852,3852],[3853,3853]]],[1540609637476,["gjx16@GJXAIOU",[[1,3853,"{}"]],[3853,3853],[3855,3855]]],[1540609638507,["gjx16@GJXAIOU",[[1,3854,"\n"]],[3854,3854],[3855,3855]]],[1540609638680,["gjx16@GJXAIOU",[[1,3855,"\n"]],[3855,3855],[3856,3856]]],[1540609644324,["gjx16@GJXAIOU",[[1,3855,"  printf();"]],[3855,3855],[3866,3866]]],[1540609647186,["gjx16@GJXAIOU",[[1,3864,"\"\""]],[3864,3864],[3866,3866]]],[1540609648931,["gjx16@GJXAIOU",[[1,3865,"\n"]],[3865,3865],[3866,3866]]],[1540609649770,["gjx16@GJXAIOU",[[1,3866,"%s"]],[3866,3866],[3868,3868]]],[1540609650967,["gjx16@GJXAIOU",[[-1,3866,"%s"]],[3868,3868],[3866,3866]]],[1540609651256,["gjx16@GJXAIOU",[[-1,3865,"\n"]],[3866,3866],[3865,3865]]],[1540609656275,["gjx16@GJXAIOU",[[1,3865,"%s\\n"]],[3865,3865],[3869,3869]]],[1540609664869,["gjx16@GJXAIOU",[[1,3870,",a[i]"]],[3870,3870],[3875,3875]]],[1540609671467,["gjx16@GJXAIOU",[[1,3877,"//zhel"]],[3877,3877],[3883,3883]]],[1540609672967,["gjx16@GJXAIOU",[[-1,3879,"zhel"]],[3883,3883],[3879,3879]]],[1540609682535,["gjx16@GJXAIOU",[[1,3879,"这里的a[i] 等于"]],[3879,3879],[3889,3889]]],[1540609752000,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,3987,"\n\n"]],[1798,1798],[3987,3987]]],[1540609752000,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,3987,"\n\n"]],[3987,3987],[1798,1798]]],[1540609702292,["gjx16@GJXAIOU",[[1,3889," a+i  或者 *()"]],[3889,3889],[3901,3901]]],[1540609705498,["gjx16@GJXAIOU",[[1,3900,"a+i"]],[3900,3900],[3903,3903]]],[1540609725495,["gjx16@GJXAIOU",[[1,3904,",因为这里的首行地址和首元素地址是一样的"]],[3904,3904],[3924,3924]]],[1540610292002,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,4022,"\n\n"]],[1798,1798],[4022,4022]]],[1540610292002,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,4022,"\n\n"]],[4022,4022],[1798,1798]]],[1540610265760,["gjx16@GJXAIOU",[[1,4019,"\n"]],[4016,4016],[4017,4017]]],[1540610269471,["gjx16@GJXAIOU",[[1,4017,"****"]],[4017,4017],[4019,4019]]],[1540610274124,["gjx16@GJXAIOU",[[1,4019,"将二维狮子座"]],[4019,4019],[4025,4025]]],[1540610275311,["gjx16@GJXAIOU",[[-1,4022,"狮子座"]],[4025,4025],[4022,4022]]],[1540610281558,["gjx16@GJXAIOU",[[1,4022,"数组排序打印输出："]],[4022,4022],[4031,4031]]],[1540610283179,["gjx16@GJXAIOU",[[1,4036,"\n"]],[4033,4033],[4034,4034]]],[1540610285050,["gjx16@GJXAIOU",[[1,4034,"```"]],[4034,4034],[4037,4037]]],[1540610285083,["gjx16@GJXAIOU",[[1,4037,"language\n```\n"]],[4037,4037],[4037,4045]]],[1540610286066,["gjx16@GJXAIOU",[[-1,4037,"language"],[1,4045,"c"]],[4037,4045],[4038,4038]]],[1540610286304,["gjx16@GJXAIOU",[[1,4039,"\n"]],[4038,4038],[4039,4039]]],[1540610286432,["gjx16@GJXAIOU",[[1,4040,"\n"]],[4039,4039],[4040,4040]]],[1540610837864,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,4051,"\n\n"]],[1798,1798],[4051,4051]]],[1540610837864,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,4051,"\n\n"]],[4051,4051],[1798,1798]]],[1540610817586,["gjx16@GJXAIOU",[[1,4039,"#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}"]],[4039,4039],[4850,4850]]],[1540610832082,["gjx16@GJXAIOU",[[1,4859,"\n"]],[4855,4855],[4856,4856]]],[1540610832229,["gjx16@GJXAIOU",[[1,4860,"\n"]],[4856,4856],[4857,4857]]],[1540610834278,["gjx16@GJXAIOU",[[1,4857,"c"]],[4857,4857],[4858,4858]]],[1540610834885,["gjx16@GJXAIOU",[[-1,4857,"c"]],[4858,4858],[4857,4857]]],[1540610897868,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,4864,"\n\n"]],[1798,1798],[4864,4864]]],[1540610897868,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,4864,"\n\n"]],[4864,4864],[1798,1798]]],[1540610841515,["gjx16@GJXAIOU",[[1,4857,"程序运行结果："]],[4857,4857],[4864,4864]]],[1540610844698,["gjx16@GJXAIOU",[[1,4868,"\n"]],[4864,4864],[4865,4865]]],[1540610848527,["gjx16@GJXAIOU",[[1,4865,"shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,\npaixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,·"]],[4865,4865],[4976,4976]]],[1540610849641,["gjx16@GJXAIOU",[[-1,4975,"·"]],[4976,4976],[4975,4975]]],[1540610850092,["gjx16@GJXAIOU",[[1,4975,"`"]],[4975,4975],[4976,4976]]],[1540610851702,["gjx16@GJXAIOU",[[1,4920,"`"]],[4920,4920],[4921,4921]]],[1540610852705,["gjx16@GJXAIOU",[[-1,4920,"`"]],[4921,4921],[4920,4920]]],[1540610853779,["gjx16@GJXAIOU",[[1,4921,"`"]],[4921,4921],[4922,4922]]],[1540610863611,["gjx16@GJXAIOU",[[1,4865,"1"]],[4865,4865],[4866,4866]]],[1540610865905,["gjx16@GJXAIOU",[[-1,4865,"1"]],[4866,4866],[4865,4865]]],[1540610866395,["gjx16@GJXAIOU",[[1,4865,"`"]],[4865,4865],[4866,4866]]],[1540610868623,["gjx16@GJXAIOU",[[1,4924,"`"]],[4924,4924],[4925,4925]]],[1540620254251,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,4986,"\n\n"]],[1798,1798],[4986,4986]]],[1540620254251,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,4986,"\n\n"]],[4986,4986],[1798,1798]]],[1540620209533,["gjx16@GJXAIOU",[[1,4983,"\n"]],[4981,4981],[4982,4982]]],[1540620210771,["gjx16@GJXAIOU",[[1,4982,"****"]],[4982,4982],[4984,4984]]],[1540620211993,["gjx16@GJXAIOU",[[1,4984,"erji"]],[4984,4984],[4988,4988]]],[1540620213268,["gjx16@GJXAIOU",[[-1,4984,"erji"]],[4988,4988],[4984,4984]]],[1540620226131,["gjx16@GJXAIOU",[[1,4984,"二级指针第三种内存模型"]],[4984,4984],[4995,4995]]],[1540620228383,["gjx16@GJXAIOU",[[1,4999,"\n"]],[4997,4997],[4998,4998]]],[1540620235862,["gjx16@GJXAIOU",[[1,4998,"分配在堆区"]],[4998,4998],[5003,5003]]],[1540620236517,["gjx16@GJXAIOU",[[1,5005,"\n"]],[5003,5003],[5004,5004]]],[1540620314850,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,5009,"\n\n"]],[1798,1798],[5009,5009]]],[1540620314850,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,5009,"\n\n"]],[5009,5009],[1798,1798]]],[1540620257392,["gjx16@GJXAIOU",[[1,5005,"···"]],[5005,5005],[5008,5008]]],[1540620258631,["gjx16@GJXAIOU",[[-1,5005,"···"]],[5008,5008],[5005,5005]]],[1540620259910,["gjx16@GJXAIOU",[[1,5005,"```"]],[5005,5005],[5008,5008]]],[1540620259946,["gjx16@GJXAIOU",[[1,5008,"language\n```\n"]],[5008,5008],[5008,5016]]],[1540620261151,["gjx16@GJXAIOU",[[-1,5008,"language"],[1,5016,"c"]],[5008,5016],[5009,5009]]],[1540620261461,["gjx16@GJXAIOU",[[1,5010,"\n"]],[5009,5009],[5010,5010]]],[1540621472851,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,5019,"\n\n"]],[1798,1798],[5019,5019]]],[1540621472851,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,5019,"\n\n"]],[5019,5019],[1798,1798]]],[1540621468431,["gjx16@GJXAIOU",[[1,5010,"#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}"]],[5010,5010],[5905,5905]]],[1540621652863,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,5914,"\n\n"]],[1798,1798],[5914,5914]]],[1540621652863,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,5914,"\n\n"]],[5914,5914],[1798,1798]]],[1540621611557,["gjx16@GJXAIOU",[[1,5911,"\n"]],[5909,5909],[5910,5910]]],[1540621611696,["gjx16@GJXAIOU",[[1,5912,"\n"]],[5910,5910],[5911,5911]]],[1540621613067,["gjx16@GJXAIOU",[[1,5911,"****"]],[5911,5911],[5913,5913]]],[1540621613989,["gjx16@GJXAIOU",[[1,5913,"jiangf "]],[5913,5913],[5920,5920]]],[1540621615350,["gjx16@GJXAIOU",[[-1,5913,"jiangf "]],[5920,5920],[5913,5913]]],[1540621618209,["gjx16@GJXAIOU",[[1,5913,"将上面的额"]],[5913,5913],[5918,5918]]],[1540621619007,["gjx16@GJXAIOU",[[-1,5917,"额"]],[5918,5918],[5917,5917]]],[1540621627260,["gjx16@GJXAIOU",[[1,5917,"程序进行函数封装："]],[5917,5917],[5926,5926]]],[1540621629278,["gjx16@GJXAIOU",[[1,5930,"\n"]],[5928,5928],[5929,5929]]],[1540621631767,["gjx16@GJXAIOU",[[1,5929,"```"]],[5929,5929],[5932,5932]]],[1540621631802,["gjx16@GJXAIOU",[[1,5932,"language\n```\n"]],[5932,5932],[5932,5940]]],[1540621632503,["gjx16@GJXAIOU",[[-1,5932,"language"],[1,5940,"c"]],[5932,5940],[5933,5933]]],[1540621632781,["gjx16@GJXAIOU",[[1,5934,"\n"]],[5933,5933],[5934,5934]]],[1540621632921,["gjx16@GJXAIOU",[[1,5935,"\n"]],[5934,5934],[5935,5935]]],[1540621640896,["gjx16@GJXAIOU",[[1,5934,"#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}"]],[5934,5934],[6829,6829]]],[1540621643024,["gjx16@GJXAIOU",[[1,6003,"\n"]],[6002,6002],[6003,6003]]],[1540621647387,["gjx16@GJXAIOU",[[1,6003,"char ** get"]],[6003,6003],[6014,6014]]],[1540621648745,["gjx16@GJXAIOU",[[-1,6009,"* get"]],[6014,6014],[6009,6009]]],[1540621652272,["gjx16@GJXAIOU",[[1,6009,"getMem"]],[6009,6009],[6015,6015]]],[1540621712856,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6853,"\n\n"]],[1798,1798],[6853,6853]]],[1540621712856,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6853,"\n\n"]],[6853,6853],[1798,1798]]],[1540621653761,["gjx16@GJXAIOU",[[1,6015,"()"]],[6015,6015],[6017,6017]]],[1540621656521,["gjx16@GJXAIOU",[[1,6016,"int n"]],[6016,6016],[6021,6021]]],[1540621659320,["gjx16@GJXAIOU",[[1,6023,"\n"]],[6022,6022],[6023,6023]]],[1540621660803,["gjx16@GJXAIOU",[[1,6023,"{}"]],[6023,6023],[6025,6025]]],[1540621662093,["gjx16@GJXAIOU",[[1,6024,"\n"]],[6024,6024],[6025,6025]]],[1540621662229,["gjx16@GJXAIOU",[[1,6025,"\n"]],[6025,6025],[6026,6026]]],[1540622132867,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6865,"\n\n"]],[1798,1798],[6865,6865]]],[1540622132867,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6865,"\n\n"]],[6865,6865],[1798,1798]]],[1540622104454,["gjx16@GJXAIOU",[[1,6840,"\t\n\t"]],[6838,6838],[6841,6841]]],[1540622110418,["gjx16@GJXAIOU",[[1,6841,"buf = NUL;"]],[6841,6841],[6851,6851]]],[1540622110970,["gjx16@GJXAIOU",[[-1,6850,";"]],[6851,6851],[6850,6850]]],[1540622112063,["gjx16@GJXAIOU",[[1,6850,"L;"]],[6850,6850],[6852,6852]]],[1540622372874,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6879,"\n\n"]],[1798,1798],[6879,6879]]],[1540622372874,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6879,"\n\n"]],[6879,6879],[1798,1798]]],[1540622350265,["gjx16@GJXAIOU",[[-1,6025,"\n}\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n"],[-1,6184,"0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 1"],[-1,6508,"-1"],[1,6510,"NULL"],[1,6666,"\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;"],[1,6711," "],[1,6739,"}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;"],[1,6855,"\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;"],[-1,6868,"\n"],[1,6869,""]],[5934,6869],[6778,6778]]],[1540622357686,["gjx16@GJXAIOU",[[1,6785,"\n"]],[6782,6782],[6783,6783]]],[1540622358783,["gjx16@GJXAIOU",[[1,6783,"han"]],[6783,6783],[6786,6786]]],[1540622359277,["gjx16@GJXAIOU",[[-1,6783,"han"]],[6786,6786],[6783,6783]]],[1540622359669,["gjx16@GJXAIOU",[[-1,6785,"\n"]],[6783,6783],[6782,6782]]],[1540622360888,["gjx16@GJXAIOU",[[1,6785,"\n"]],[6782,6782],[6783,6783]]],[1540622369266,["gjx16@GJXAIOU",[[1,6783,"程序运行结果为："]],[6783,6783],[6791,6791]]],[1540622369993,["gjx16@GJXAIOU",[[1,6794,"\n"]],[6791,6791],[6792,6792]]],[1540622432875,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6798,"\n\n"]],[1798,1798],[6798,6798]]],[1540622432875,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6798,"\n\n"]],[6798,6798],[1798,1798]]],[1540622383181,["gjx16@GJXAIOU",[[1,6792,"test00, test11, test22,\n"]],[6792,6792],[6816,6816]]],[1540622385450,["gjx16@GJXAIOU",[[1,6792,"·"]],[6792,6792],[6793,6793]]],[1540622386384,["gjx16@GJXAIOU",[[-1,6792,"·"]],[6793,6793],[6792,6792]]],[1540622386800,["gjx16@GJXAIOU",[[1,6792,"`"]],[6792,6792],[6793,6793]]],[1540622390279,["gjx16@GJXAIOU",[[1,6816,"`"]],[6816,6816],[6817,6817]]],[1540622391557,["gjx16@GJXAIOU",[[1,6821,"\n"]],[6817,6817],[6818,6818]]],[1540622492875,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6825,"\n\n"]],[1798,1798],[6825,6825]]],[1540622492875,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6825,"\n\n"]],[6825,6825],[1798,1798]]],[1540622450565,["gjx16@GJXAIOU",[[1,5911,"\n"]],[5909,5909],[5910,5910]]],[1540622480176,["gjx16@GJXAIOU",[[1,5910,"erji"]],[5910,5910],[5914,5914]]],[1540622481068,["gjx16@GJXAIOU",[[-1,5910,"erji"]],[5914,5914],[5910,5910]]],[1540622491385,["gjx16@GJXAIOU",[[1,5910,"二级指针的第三种内存模型为："]],[5910,5910],[5924,5924]]],[1540622491797,["gjx16@GJXAIOU",[[1,5926,"\n"]],[5924,5924],[5925,5925]]],[1540622552881,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6841,"\n\n"]],[1798,1798],[6841,6841]]],[1540622552881,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6841,"\n\n"]],[6841,6841],[1798,1798]]],[1540622500478,["gjx16@GJXAIOU",[[1,5925,"![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)"]],[5925,5925],[6065,6065]]],[1540622503357,["gjx16@GJXAIOU",[[1,5925,"\n"]],[5924,5924],[5925,5925]]],[1540622506570,["gjx16@GJXAIOU",[[1,6067,"\n"]],[6065,6065],[6066,6066]]],[1540622510415,["gjx16@GJXAIOU",[[1,6979,"\n"]],[6974,6974],[6975,6975]]],[1540622972892,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6983,"\n\n"]],[1798,1798],[6983,6983]]],[1540622972892,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6983,"\n\n"]],[6983,6983],[1798,1798]]],[1540622968518,["gjx16@GJXAIOU",[[1,6980,"\n"]],[6977,6977],[6978,6978]]],[1540622970933,["gjx16@GJXAIOU",[[-1,6980,"\n"]],[6978,6978],[6977,6977]]],[1540623032895,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6983,"\n\n"]],[1798,1798],[6983,6983]]],[1540623032895,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6983,"\n\n"]],[6983,6983],[1798,1798]]],[1540622973502,["gjx16@GJXAIOU",[[1,6977,"++++"]],[6977,6977],[6979,6979]]],[1540622974206,["gjx16@GJXAIOU",[[-1,6979,"++"]],[6979,6979],[6977,6977]]],[1540622975648,["gjx16@GJXAIOU",[[-1,6977,"++"]],[6979,6979],[6977,6977]]],[1540622979998,["gjx16@GJXAIOU",[[1,6977,"## 作业"]],[6977,6977],[6982,6982]]],[1540622981091,["gjx16@GJXAIOU",[[1,6985,"\n"]],[6982,6982],[6983,6983]]],[1540623092891,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,6989,"\n\n"]],[1798,1798],[6989,6989]]],[1540623092891,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,6989,"\n\n"]],[6989,6989],[1798,1798]]],[1540623071105,["gjx16@GJXAIOU",[[1,6984,"![作业1]($resource/%E4%BD%9C%E4%B8%9A1.png)"]],[6984,6984],[7026,7026]]],[1540623152902,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7030,"\n\n"]],[1798,1798],[7030,7030]]],[1540623152902,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7030,"\n\n"]],[7030,7030],[1798,1798]]],[1540623140343,["gjx16@GJXAIOU",[[1,7027,"\n"]],[7026,7026],[7027,7027]]],[1540623212891,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7031,"\n\n"]],[1798,1798],[7031,7031]]],[1540623212891,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7031,"\n\n"]],[7031,7031],[1798,1798]]],[1540623167332,["gjx16@GJXAIOU",[[1,7027,"![作业2]($resource/%E4%BD%9C%E4%B8%9A2.png)\n![作业3]($resource/%E4%BD%9C%E4%B8%9A3.png)"]],[7027,7027],[7111,7111]]],[1540623170962,["gjx16@GJXAIOU",[[1,7111,"\n"]],[7110,7110],[7111,7111]]],[1540623172914,["gjx16@GJXAIOU",[[1,7069,"\n"]],[7068,7068],[7069,7069]]],[1540623512896,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7116,"\n\n"]],[1798,1798],[7116,7116]]],[1540623512896,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7116,"\n\n"]],[7116,7116],[1798,1798]]],[1540623463831,["gjx16@GJXAIOU",[[1,7115,"![作业4]($resource/%E4%BD%9C%E4%B8%9A4.png)"]],[7114,7114],[7157,7157]]],[1540623572898,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7157,"\n\n"]],[1798,1798],[7157,7157]]],[1540623572898,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7157,"\n\n"]],[7157,7157],[1798,1798]]],[1540623541624,["gjx16@GJXAIOU",[[1,6983,"### 1."]],[6983,6983],[6989,6989]]],[1540623547165,["gjx16@GJXAIOU",[[-1,6983,"### 1."]],[6989,6989],[6983,6983]]],[1540623547341,["gjx16@GJXAIOU",[[-1,6983,"\n"]],[6983,6983],[6982,6982]]],[1540623548294,["gjx16@GJXAIOU",[[1,6983,"\n"]],[6982,6982],[6983,6983]]],[1540623550745,["gjx16@GJXAIOU",[[1,6983,"1、"]],[6983,6983],[6985,6985]]],[1540623551670,["gjx16@GJXAIOU",[[-1,6984,"、"]],[6985,6985],[6984,6984]]],[1540623553103,["gjx16@GJXAIOU",[[1,6984,"。****"]],[6984,6984],[6987,6987]]],[1540623555681,["gjx16@GJXAIOU",[[-1,6984,"。"]],[6985,6985],[6984,6984]]],[1540623556361,["gjx16@GJXAIOU",[[1,6984,"/"]],[6984,6984],[6985,6985]]],[1540623557062,["gjx16@GJXAIOU",[[-1,6984,"/"]],[6985,6985],[6984,6984]]],[1540623557562,["gjx16@GJXAIOU",[[1,6984,"."]],[6984,6984],[6985,6985]]],[1540623632898,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7163,"\n\n"]],[1798,1798],[7163,7163]]],[1540623632898,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7163,"\n\n"]],[7163,7163],[1798,1798]]],[1540623574345,["gjx16@GJXAIOU",[[1,6987,"作业1："]],[6987,6987],[6991,6991]]],[1540623576390,["gjx16@GJXAIOU",[[1,6994,"\n"]],[6993,6993],[6994,6994]]],[1540623593293,["gjx16@GJXAIOU",[[1,6994,"已知：`char buf[] = \""]],[6994,6994],[7012,7012]]],[1540623593331,["gjx16@GJXAIOU",[[-1,7011,"\""],[1,7012,"“"]],[7012,7012],[7012,7012]]],[1540623593452,["gjx16@GJXAIOU",[[1,7012,"\""]],[7012,7012],[7013,7013]]],[1540623593490,["gjx16@GJXAIOU",[[-1,7012,"\""],[1,7013,"”"]],[7013,7013],[7013,7013]]],[1540623598962,["gjx16@GJXAIOU",[[1,7012,"abcdef"]],[7012,7012],[7018,7018]]],[1540623608453,["gjx16@GJXAIOU",[[1,7019,"`,xia"]],[7019,7019],[7024,7024]]],[1540623609231,["gjx16@GJXAIOU",[[-1,7021,"xia"]],[7024,7024],[7021,7021]]],[1540623617411,["gjx16@GJXAIOU",[[1,7021,"下面表达式的区别："]],[7021,7021],[7030,7030]]],[1540623617810,["gjx16@GJXAIOU",[[1,7031,"\n"]],[7030,7030],[7031,7031]]],[1540623618385,["gjx16@GJXAIOU",[[-1,7031,"\n"]],[7031,7031],[7030,7030]]],[1540623618741,["gjx16@GJXAIOU",[[-1,7029,"："]],[7030,7030],[7029,7029]]],[1540623623544,["gjx16@GJXAIOU",[[1,7029,"？"]],[7029,7029],[7030,7030]]],[1540623623998,["gjx16@GJXAIOU",[[1,7031,"\n"]],[7030,7030],[7031,7031]]],[1540623692898,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7205,"\n\n"]],[1798,1798],[7205,7205]]],[1540623692898,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7205,"\n\n"]],[7205,7205],[1798,1798]]],[1540623641131,["gjx16@GJXAIOU",[[1,7031,"- ·"]],[7031,7031],[7034,7034]]],[1540623642070,["gjx16@GJXAIOU",[[-1,7033,"·"]],[7034,7034],[7033,7033]]],[1540623642616,["gjx16@GJXAIOU",[[-1,7031,"- "]],[7033,7033],[7032,7032]]],[1540623642748,["gjx16@GJXAIOU",[[1,7032,"`"]],[7032,7032],[7033,7033]]],[1540623643750,["gjx16@GJXAIOU",[[-1,7032,"`"]],[7033,7033],[7032,7032]]],[1540623643937,["gjx16@GJXAIOU",[[-1,7031,"\n"]],[7032,7032],[7031,7031]]],[1540623646905,["gjx16@GJXAIOU",[[1,7031,"- `"]],[7031,7031],[7034,7034]]],[1540623648290,["gjx16@GJXAIOU",[[1,7034,"\n"]],[7034,7034],[7035,7035]]],[1540623662060,["gjx16@GJXAIOU",[[1,7034,"const char *p = buf`"]],[7034,7034],[7054,7054]]],[1540623662838,["gjx16@GJXAIOU",[[1,7055,"- \n"]],[7054,7054],[7057,7057]]],[1540623678916,["gjx16@GJXAIOU",[[1,7057,"`char const *p = buf`"]],[7057,7057],[7078,7078]]],[1540623679654,["gjx16@GJXAIOU",[[1,7079,"- \n"]],[7078,7078],[7081,7081]]],[1540623687539,["gjx16@GJXAIOU",[[1,7081,"`char *cong"]],[7081,7081],[7092,7092]]],[1540623688649,["gjx16@GJXAIOU",[[-1,7091,"g"]],[7092,7092],[7091,7091]]],[1540623692593,["gjx16@GJXAIOU",[[1,7091,"st p"]],[7091,7091],[7095,7095]]],[1540623752911,[null,[[-1,1798,"陈"],[1,1799,"\n"],[-1,1811,"诉"],[1,1812,"\n"],[-1,7269,"\n\n"]],[1798,1798],[7269,7269]]],[1540623752911,[null,[[1,1798,"陈"],[-1,1798,"\n"],[1,1811,"诉"],[-1,1811,"\n"],[1,7269,"\n\n"]],[7269,7269],[1798,1798]]],[1540623697800,["gjx16@GJXAIOU",[[1,7095," = buf`"]],[7095,7095],[7102,7102]]],[1540623698790,["gjx16@GJXAIOU",[[1,7103,"- \n"]],[7102,7102],[7105,7105]]],[1540623705986,["gjx16@GJXAIOU",[[1,7105,"cp"]],[7105,7105],[7107,7107]]],[1540623706896,["gjx16@GJXAIOU",[[-1,7106,"p"]],[7107,7107],[7106,7106]]],[1540623709637,["gjx16@GJXAIOU",[[1,7106,"onst"]],[7106,7106],[7110,7110]]],[1540623714096,["gjx16@GJXAIOU",[[1,7105,"`"]],[7105,7105],[7106,7106]]],[1540623718307,["gjx16@GJXAIOU",[[1,7111," cjar"]],[7111,7111],[7116,7116]]],[1540623719781,["gjx16@GJXAIOU",[[-1,7112,"cjar"]],[7116,7116],[7112,7112]]],[1540623726947,["gjx16@GJXAIOU",[[1,7112,"char *const *p"]],[7112,7112],[7126,7126]]],[1540623731032,["gjx16@GJXAIOU",[[1,7124," "]],[7124,7124],[7125,7125]]],[1540623737001,["gjx16@GJXAIOU",[[1,7127," = buf`"]],[7127,7127],[7134,7134]]]],null,"gjx16@GJXAIOU"],["7ca885c2-6b47-4e5e-bb24-a1b61c2b4bb4",1540686753591,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量，将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变**\n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值，但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char * const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 指针作为函数参数\n\n\n### 值传递（形参的修改不会影响到实参的值）\n例子：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n**二级指针做函数参数输出特性**\n```c\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}\n```\n程序运行结果：\n`p = abdakg`\n程序运行对应的内存四区图\n![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)\n\n\n\n## 指针数组的使用\n引入：\n定义指针：\n**指针数组的本质：** 是一个数组，只是每一个元素都是指针char *\n\n- 第一种内存模型\n```c\nchar *p1 = \"dkfjdksjf\";\nchar *p2 = \"djfdkshfa\";\nchar *p3 = \"dkfjaioerio\";\n//若简化定义一系列定义，可使用指针数组\n\nchar *p[] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\nint  n = sizoeof(p) /sizeof(p[0]);\n//这种方法只能是没有定义数组长度的时候使用，以下方法就不能使用\n//char *p[10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\n//printf(\"sizeof(p) = %d,sizeof(p[0]) = %d\\n\",sizeof(p),sizeof(p[0]));\n//输出结果为：40和4（因为32位系统中指针占4个字节）\n\n\n\n//打印方式\n int i = 0;\n for(i = 0; i < n ; i++)\n   {\n       printf(\"%s\\n\",p[i]);\n   }\n```\n内存四区图：\n\n![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**排序：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid print_array(char *p[], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\t\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p,n);\n\t\n\tsort_array(p,n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n程序运行结果；\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n实参与形参传值参数的定义方法：\n例子1：\n```c\nvoid array(char a[]//或者char *a)\nint main()\n{\n   char p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n```\n\n例子2：\n```c\nvoid array(char *a[]//或者char **a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n\n```\n\n\n**二维数组的使用：**\n\n首先一维数组 的地址\n```c\nchar a[10] = \"dkfjdkfj\";\nprintf(\"%d,%d\\n\",a,&a,&a+1);//&a表示整个一维数组的地址，a表示首元素的地址\n\nint i = 0;\nfor(i = 0; i < 10; i++)\n{\n  printf(\"%s\\n\",a[i]);//这里的a[i] 等于 a+i  或者 *(a+i),因为这里的首行地址和首元素地址是一样的\n}\n\n\n\n\nchar a[4][29]= {\"sfdsfaf\",\"dfdgdfgre\",\"dfdogio\"};\nprintf(\"%d,%d\\n\",a,&a,&a+1);\n\n\n\n```\n**将二维数组排序打印输出：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n\n程序运行结果：\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**二级指针第三种内存模型**\n分配在堆区\n\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}\n```\n二级指针的第三种内存模型为：\n\n![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)\n\n\n**将上面的程序进行函数封装：**\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nchar *getMem(int n)\n{\n\tint i = 0;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \", buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\t}\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;\n\treturn 0;\n}\n```\n程序运行结果为：\n`test00, test11, test22,`\n\n\n## 作业\n1.**作业1：**\n已知：`char buf[] = “abcdef”`,下面表达式的区别？\n- `const char *p = buf`\n- `char const *p = buf`\n- `char *const p = buf`\n- `const char *const  *p = buf`\n![作业1]($resource/%E4%BD%9C%E4%B8%9A1.png)\n\n![作业2]($resource/%E4%BD%9C%E4%B8%9A2.png)\n\n![作业3]($resource/%E4%BD%9C%E4%B8%9A3.png)\n\n \n![作业4]($resource/%E4%BD%9C%E4%B8%9A4.png)\n",[[1540686696691,["gjx16@GJXAIOU",[[1,252," "]],[252,252],[253,253]]],[1540686705053,["gjx16@GJXAIOU",[[-1,35,"，"]],[36,36],[35,35]]],[1540686705332,["gjx16@GJXAIOU",[[1,35,"\n"]],[35,35],[36,36]]],[1540686878893,["gjx16@GJXAIOU",[[1,361,"90"]],[361,361],[363,363]]],[1540686880104,["gjx16@GJXAIOU",[[-1,362,"0"]],[363,363],[362,362]]],[1540686881406,["gjx16@GJXAIOU",[[1,362,"（）"]],[362,362],[364,364]]],[1540686883706,["gjx16@GJXAIOU",[[-1,361,"9"]],[362,362],[361,361]]],[1540686889159,["gjx16@GJXAIOU",[[1,362,"指向"]],[362,362],[364,364]]],[1540686934558,["gjx16@GJXAIOU",[[-1,491," "]],[492,492],[491,491]]],[1540686951532,["gjx16@GJXAIOU",[[1,657,"二、"]],[657,657],[659,659]]],[1540686956807,["gjx16@GJXAIOU",[[1,674,"1"]],[674,674],[675,675]]],[1540686958167,["gjx16@GJXAIOU",[[-1,674,"1"]],[675,675],[674,674]]],[1540686960246,["gjx16@GJXAIOU",[[1,674,"（）"]],[674,674],[676,676]]],[1540686965054,["gjx16@GJXAIOU",[[1,675,"一"]],[675,675],[676,676]]],[1540687042895,["gjx16@GJXAIOU",[[1,951,"\n"]],[950,950],[951,951]]]],null,"gjx16@GJXAIOU"],["12ec5af9-f502-4fec-9198-653d4f404494",1540687822578,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量\n将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变** \n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值（指向），但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char *const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 二、指针作为函数参数\n\n\n### （一）值传递（形参的修改不会影响到实参的值）\n例子：\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n**二级指针做函数参数输出特性**\n```c\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}\n```\n程序运行结果：\n`p = abdakg`\n程序运行对应的内存四区图\n![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)\n\n\n\n## 指针数组的使用\n引入：\n定义指针：\n**指针数组的本质：** 是一个数组，只是每一个元素都是指针char *\n\n- 第一种内存模型\n```c\nchar *p1 = \"dkfjdksjf\";\nchar *p2 = \"djfdkshfa\";\nchar *p3 = \"dkfjaioerio\";\n//若简化定义一系列定义，可使用指针数组\n\nchar *p[] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\nint  n = sizoeof(p) /sizeof(p[0]);\n//这种方法只能是没有定义数组长度的时候使用，以下方法就不能使用\n//char *p[10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\n//printf(\"sizeof(p) = %d,sizeof(p[0]) = %d\\n\",sizeof(p),sizeof(p[0]));\n//输出结果为：40和4（因为32位系统中指针占4个字节）\n\n\n\n//打印方式\n int i = 0;\n for(i = 0; i < n ; i++)\n   {\n       printf(\"%s\\n\",p[i]);\n   }\n```\n内存四区图：\n\n![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**排序：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid print_array(char *p[], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\t\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p,n);\n\t\n\tsort_array(p,n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n程序运行结果；\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n实参与形参传值参数的定义方法：\n例子1：\n```c\nvoid array(char a[]//或者char *a)\nint main()\n{\n   char p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n```\n\n例子2：\n```c\nvoid array(char *a[]//或者char **a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n\n```\n\n\n**二维数组的使用：**\n\n首先一维数组 的地址\n```c\nchar a[10] = \"dkfjdkfj\";\nprintf(\"%d,%d\\n\",a,&a,&a+1);//&a表示整个一维数组的地址，a表示首元素的地址\n\nint i = 0;\nfor(i = 0; i < 10; i++)\n{\n  printf(\"%s\\n\",a[i]);//这里的a[i] 等于 a+i  或者 *(a+i),因为这里的首行地址和首元素地址是一样的\n}\n\n\n\n\nchar a[4][29]= {\"sfdsfaf\",\"dfdgdfgre\",\"dfdogio\"};\nprintf(\"%d,%d\\n\",a,&a,&a+1);\n\n\n\n```\n**将二维数组排序打印输出：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n\n程序运行结果：\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**二级指针第三种内存模型**\n分配在堆区\n\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}\n```\n二级指针的第三种内存模型为：\n\n![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)\n\n\n**将上面的程序进行函数封装：**\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nchar *getMem(int n)\n{\n\tint i = 0;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \", buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\t}\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;\n\treturn 0;\n}\n```\n程序运行结果为：\n`test00, test11, test22,`\n\n\n## 作业\n1.**作业1：**\n已知：`char buf[] = “abcdef”`,下面表达式的区别？\n- `const char *p = buf`\n- `char const *p = buf`\n- `char *const p = buf`\n- `const char *const  *p = buf`\n![作业1]($resource/%E4%BD%9C%E4%B8%9A1.png)\n\n![作业2]($resource/%E4%BD%9C%E4%B8%9A2.png)\n\n![作业3]($resource/%E4%BD%9C%E4%B8%9A3.png)\n\n \n![作业4]($resource/%E4%BD%9C%E4%B8%9A4.png)\n",[[1540687782813,["gjx16@GJXAIOU",[[1,700,"（）"]],[700,700],[702,702]]],[1540687801324,["gjx16@GJXAIOU",[[1,701,"这里main函数中的p和getMemhan"]],[701,701],[722,722]]],[1540687802094,["gjx16@GJXAIOU",[[-1,719,"han"]],[722,722],[719,719]]],[1540687818258,["gjx16@GJXAIOU",[[1,719,"函数中的p未建立"]],[719,719],[727,727]]],[1540687824979,["gjx16@GJXAIOU",[[1,727,"对应关系"]],[727,727],[731,731]]],[1540688044635,["gjx16@GJXAIOU",[[1,1306,"·。"]],[1306,1306],[1308,1308]]],[1540688047428,["gjx16@GJXAIOU",[[-1,1306,"·。"]],[1308,1308],[1306,1306]]],[1540688049352,["gjx16@GJXAIOU",[[1,1306,"1."]],[1306,1306],[1308,1308]]],[1540688057332,["gjx16@GJXAIOU",[[1,1304,"\n"]],[1303,1303],[1304,1304]]],[1540688057451,["gjx16@GJXAIOU",[[1,1305,"\n"]],[1304,1304],[1305,1305]]],[1540688058105,["gjx16@GJXAIOU",[[1,1305,"---"]],[1305,1305],[1308,1308]]],[1540688059122,["gjx16@GJXAIOU",[[1,1309,"\n"]],[1308,1308],[1309,1309]]],[1540688433551,["gjx16@GJXAIOU",[[1,1602,"、、"]],[1602,1602],[1604,1604]]],[1540688434573,["gjx16@GJXAIOU",[[-1,1602,"、、"]],[1604,1604],[1602,1602]]],[1540688439047,["gjx16@GJXAIOU",[[1,1602,"//这里的篇"]],[1602,1602],[1608,1608]]],[1540688439709,["gjx16@GJXAIOU",[[-1,1607,"篇"]],[1608,1608],[1607,1607]]],[1540688445057,["gjx16@GJXAIOU",[[1,1607,"p指向哪里："]],[1607,1607],[1613,1613]]],[1540688446186,["gjx16@GJXAIOU",[[-1,1612,"："]],[1613,1613],[1612,1612]]],[1540688447221,["gjx16@GJXAIOU",[[1,1612,"？"]],[1612,1612],[1613,1613]]],[1540688454848,["gjx16@GJXAIOU",[[1,1309,"~~~~"]],[1309,1309],[1311,1311]]],[1540688462560,["gjx16@GJXAIOU",[[1,1311,"这里有点问题 "]],[1311,1311],[1318,1318]]],[1540688466987,["gjx16@GJXAIOU",[[-1,1317," "]],[1318,1318],[1317,1317]]],[1540688467068,["gjx16@GJXAIOU",[[1,1317,"="]],[1317,1317],[1318,1318]]],[1540688469594,["gjx16@GJXAIOU",[[-1,1317,"="]],[1318,1318],[1317,1317]]],[1540688495164,["gjx16@GJXAIOU",[[1,2024,"****"]],[2024,2024],[2026,2026]]],[1540688496778,["gjx16@GJXAIOU",[[-1,2026,"**"]],[2026,2026],[2024,2024]]],[1540688499104,["gjx16@GJXAIOU",[[1,2026,"1."]],[2026,2026],[2028,2028]]],[1540688501813,["gjx16@GJXAIOU",[[1,2033,"**"]],[2033,2033],[2035,2035]]],[1540688505774,["gjx16@GJXAIOU",[[-1,2020,"引入："]],[2023,2023],[2020,2020]]],[1540688510327,["gjx16@GJXAIOU",[[1,2007,"---"]],[2007,2007],[2010,2010]]],[1540688667338,["gjx16@GJXAIOU",[[1,2665,"2."]],[2665,2665],[2667,2667]]],[1540688699437,["gjx16@GJXAIOU",[[1,3151,"\n"]],[3150,3150],[3151,3151]]],[1540688699582,["gjx16@GJXAIOU",[[1,3152,"\n"]],[3151,3151],[3152,3152]]],[1540688785231,["gjx16@GJXAIOU",[[1,3528,"**"],[1,3543,"**"]],[3528,3543],[3528,3547]]],[1540688789169,["gjx16@GJXAIOU",[[1,3530,"3."]],[3530,3530],[3532,3532]]],[1540688814276,["gjx16@GJXAIOU",[[1,3550,"\n"]],[3549,3549],[3550,3550]]],[1540688826136,["gjx16@GJXAIOU",[[1,3550,"即形参应该怎么写"]],[3550,3550],[3558,3558]]],[1540688921252,["gjx16@GJXAIOU",[[-1,3804,"**"]],[3806,3806],[3804,3804]]],[1540688924138,["gjx16@GJXAIOU",[[1,3804,"## "]],[3804,3804],[3807,3807]]],[1540688928431,["gjx16@GJXAIOU",[[-1,3814,"：**"]],[3817,3817],[3814,3814]]],[1540688934090,["gjx16@GJXAIOU",[[1,3807,"三、"]],[3807,3807],[3809,3809]]],[1540688942564,["gjx16@GJXAIOU",[[1,3820,"**"],[1,3828,"**"]],[3820,3828],[3820,3832]]],[1540688945967,["gjx16@GJXAIOU",[[-1,3818,"首先"]],[3820,3820],[3818,3818]]],[1540688946105,["gjx16@GJXAIOU",[[-1,3817,"\n"]],[3818,3818],[3817,3817]]],[1540688947372,["gjx16@GJXAIOU",[[1,3817,"\n"]],[3817,3817],[3818,3818]]],[1540688950191,["gjx16@GJXAIOU",[[1,3820,"1."]],[3820,3820],[3822,3822]]],[1540689163795,["gjx16@GJXAIOU",[[1,3875,"%"]],[3874,3874],[3875,3875]]],[1540689167730,["gjx16@GJXAIOU",[[1,3875,"d,"]],[3875,3875],[3877,3877]]],[1540689168593,["gjx16@GJXAIOU",[[1,3878,"%"]],[3877,3877],[3878,3878]]],[1540689170297,["gjx16@GJXAIOU",[[1,3878,"d,"]],[3878,3878],[3880,3880]]],[1540689183153,["gjx16@GJXAIOU",[[1,3888,"a+1,"]],[3888,3888],[3892,3892]]],[1540689187977,["gjx16@GJXAIOU",[[1,3927,"//jie"]],[3927,3927],[3932,3932]]],[1540689188866,["gjx16@GJXAIOU",[[-1,3929,"jie"]],[3932,3932],[3929,3929]]],[1540689197486,["gjx16@GJXAIOU",[[1,3929,"结果示例：1 。2"]],[3929,3929],[3938,3938]]],[1540689199166,["gjx16@GJXAIOU",[[-1,3936,"。2"]],[3938,3938],[3936,3936]]],[1540689201455,["gjx16@GJXAIOU",[[1,3936,"，2，"]],[3936,3936],[3939,3939]]],[1540689202030,["gjx16@GJXAIOU",[[-1,3938,"，"]],[3939,3939],[3938,3938]]],[1540689202191,["gjx16@GJXAIOU",[[1,3938,",2"]],[3938,3938],[3940,3940]]],[1540689203061,["gjx16@GJXAIOU",[[-1,3939,"2"]],[3940,3940],[3939,3939]]],[1540689203215,["gjx16@GJXAIOU",[[1,3939,"1"]],[3939,3939],[3940,3940]]],[1540689204059,["gjx16@GJXAIOU",[[-1,3939,"1"]],[3940,3940],[3939,3939]]],[1540689207703,["gjx16@GJXAIOU",[[1,3939," 1，"]],[3939,3939],[3942,3942]]],[1540689210676,["gjx16@GJXAIOU",[[-1,3941,"，"]],[3942,3942],[3941,3941]]],[1540689210909,["gjx16@GJXAIOU",[[1,3941,",11"]],[3941,3941],[3944,3944]]],[1540689220075,["gjx16@GJXAIOU",[[-1,3939," "]],[3940,3940],[3939,3939]]],[1540689221192,["gjx16@GJXAIOU",[[1,3939,"，"]],[3939,3939],[3940,3940]]],[1540689222939,["gjx16@GJXAIOU",[[-1,3941,","]],[3942,3942],[3941,3941]]],[1540689223444,["gjx16@GJXAIOU",[[1,3941,"，"]],[3941,3941],[3942,3942]]],[1540689225835,["gjx16@GJXAIOU",[[-1,3938,","]],[3939,3939],[3938,3938]]],[1540689399581,["gjx16@GJXAIOU",[[1,3944,"\n"]],[3943,3943],[3944,3944]]],[1540689399732,["gjx16@GJXAIOU",[[1,3945,"\n"]],[3944,3944],[3945,3945]]],[1540689399884,["gjx16@GJXAIOU",[[1,3946,"\n"]],[3945,3945],[3946,3946]]],[1540689458047,["gjx16@GJXAIOU",[[1,4128,"，a+1"]],[4128,4128],[4132,4132]]],[1540689462371,["gjx16@GJXAIOU",[[-1,4126,","]],[4127,4127],[4126,4126]]],[1540689462985,["gjx16@GJXAIOU",[[1,4126,","]],[4126,4126],[4127,4127]]],[1540689465843,["gjx16@GJXAIOU",[[-1,4128,"，"]],[4129,4129],[4128,4128]]],[1540689466216,["gjx16@GJXAIOU",[[1,4128,","]],[4128,4128],[4129,4129]]],[1540689473167,["gjx16@GJXAIOU",[[1,4123,"%d,%d"]],[4123,4123],[4128,4128]]],[1540689475423,["gjx16@GJXAIOU",[[1,4123,","]],[4123,4123],[4124,4124]]],[1540689545591,["gjx16@GJXAIOU",[[1,4149,"//结果示例：1 ，2，1，11"]],[4149,4149],[4165,4165]]],[1540689554772,["gjx16@GJXAIOU",[[-1,4149,"//结果示例：1 2，"]],[4160,4160],[4149,4149]]],[1540689554858,["gjx16@GJXAIOU",[[-1,4148,"\n"]],[4149,4149],[4148,4148]]],[1540689557587,["gjx16@GJXAIOU",[[-1,4117,"\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);"]],[4148,4148],[4117,4117]]],[1540689558113,["gjx16@GJXAIOU",[[1,4117,"jieguo"]],[4117,4117],[4123,4123]]],[1540689560779,["gjx16@GJXAIOU",[[-1,4118,"ieguo"]],[4123,4123],[4118,4118]]],[1540689563263,["gjx16@GJXAIOU",[[1,4118,"ieguo"]],[4118,4118],[4123,4123]]],[1540689564187,["gjx16@GJXAIOU",[[-1,4117,"jieguo"]],[4123,4123],[4117,4117]]],[1540689564807,["gjx16@GJXAIOU",[[1,4117,"\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);"]],[4117,4117],[4148,4148]]],[1540689566021,["gjx16@GJXAIOU",[[1,4148,"\n"]],[4148,4148],[4149,4149]]],[1540689568549,["gjx16@GJXAIOU",[[-1,4149,"，1，11"],[1,4154,"/"]],[4149,4154],[4150,4150]]],[1540689576667,["gjx16@GJXAIOU",[[1,4150,"/结果示例：1，"]],[4150,4150],[4158,4158]]],[1540689583756,["gjx16@GJXAIOU",[[-1,4071,"9"]],[4072,4072],[4071,4071]]],[1540689583835,["gjx16@GJXAIOU",[[1,4071,","]],[4071,4071],[4072,4072]]],[1540689585070,["gjx16@GJXAIOU",[[-1,4070,"2,"]],[4072,4072],[4070,4070]]],[1540689586610,["gjx16@GJXAIOU",[[1,4070,"30"]],[4070,4070],[4072,4072]]],[1540689593556,["gjx16@GJXAIOU",[[1,4158,"31，"]],[4158,4158],[4161,4161]]],[1540689599305,["gjx16@GJXAIOU",[[-1,4160,"，"]],[4161,4161],[4160,4160]]],[1540689599736,["gjx16@GJXAIOU",[[1,4160,",1，"]],[4160,4160],[4163,4163]]],[1540689602080,["gjx16@GJXAIOU",[[-1,4162,"，"]],[4163,4163],[4162,4162]]],[1540689603125,["gjx16@GJXAIOU",[[1,4162,",120"]],[4162,4162],[4166,4166]]],[1540689620324,["gjx16@GJXAIOU",[[1,4173,"\n"]],[4172,4172],[4173,4173]]],[1540689620494,["gjx16@GJXAIOU",[[1,4174,"\n"]],[4173,4173],[4174,4174]]],[1540689623784,["gjx16@GJXAIOU",[[1,4177,"2."]],[4177,4177],[4179,4179]]],[1540689654179,["gjx16@GJXAIOU",[[1,4451,"\n"]],[4450,4450],[4451,4451]]],[1540689700532,["gjx16@GJXAIOU",[[1,7296,"- \n"]],[7295,7295],[7298,7298]]],[1540689700685,["gjx16@GJXAIOU",[[-1,7296,"- "]],[7298,7298],[7297,7297]]],[1540689705684,["gjx16@GJXAIOU",[[1,7144,"\n"]],[7143,7143],[7144,7144]]],[1540689739924,["gjx16@GJXAIOU",[[1,7298,"\n"]],[7297,7297],[7298,7298]]],[1540689740794,["gjx16@GJXAIOU",[[1,7298,"2."]],[7298,7298],[7300,7300]]],[1540689747523,["gjx16@GJXAIOU",[[1,7300,"****"]],[7300,7300],[7302,7302]]],[1540689757260,["gjx16@GJXAIOU",[[1,7302,"求下列表达式的值："]],[7302,7302],[7311,7311]]],[1540689760304,["gjx16@GJXAIOU",[[1,7314,"\n"]],[7313,7313],[7314,7314]]],[1540689786967,["gjx16@GJXAIOU",[[1,7314,"d"]],[7314,7314],[7315,7315]]],[1540689787891,["gjx16@GJXAIOU",[[-1,7314,"d"]],[7315,7315],[7314,7314]]],[1540689798271,["gjx16@GJXAIOU",[[1,7314,"`char *p1[] = {}"]],[7314,7314],[7330,7330]]],[1540689801387,["gjx16@GJXAIOU",[[1,7329,"\""]],[7329,7329],[7330,7330]]],[1540689801425,["gjx16@GJXAIOU",[[-1,7329,"\""],[1,7330,"“"]],[7330,7330],[7330,7330]]],[1540689801555,["gjx16@GJXAIOU",[[1,7330,"\""]],[7330,7330],[7331,7331]]],[1540689803530,["gjx16@GJXAIOU",[[1,7330,"1111"]],[7330,7330],[7334,7334]]],[1540689807888,["gjx16@GJXAIOU",[[1,7335,",\""]],[7335,7335],[7337,7337]]],[1540689807928,["gjx16@GJXAIOU",[[-1,7336,"\""],[1,7337,"“"]],[7337,7337],[7337,7337]]],[1540689808057,["gjx16@GJXAIOU",[[1,7337,"\""]],[7337,7337],[7338,7338]]],[1540689808098,["gjx16@GJXAIOU",[[-1,7337,"\""],[1,7338,"”"]],[7338,7338],[7338,7338]]],[1540689810682,["gjx16@GJXAIOU",[[1,7337,"2222"]],[7337,7337],[7341,7341]]],[1540689813767,["gjx16@GJXAIOU",[[1,7342,",\""]],[7342,7342],[7344,7344]]],[1540689813808,["gjx16@GJXAIOU",[[-1,7343,"\""],[1,7344,"“"]],[7344,7344],[7344,7344]]],[1540689813928,["gjx16@GJXAIOU",[[1,7344,"\""]],[7344,7344],[7345,7345]]],[1540689813966,["gjx16@GJXAIOU",[[-1,7344,"\""],[1,7345,"”"]],[7345,7345],[7345,7345]]],[1540689814138,["gjx16@GJXAIOU",[[1,7345,"\""]],[7345,7345],[7346,7346]]],[1540689814177,["gjx16@GJXAIOU",[[-1,7345,"\""],[1,7346,"“"]],[7346,7346],[7346,7346]]],[1540689815403,["gjx16@GJXAIOU",[[-1,7345,"“"]],[7346,7346],[7345,7345]]],[1540689818687,["gjx16@GJXAIOU",[[1,7344,"3333"]],[7344,7344],[7348,7348]]],[1540689824063,["gjx16@GJXAIOU",[[1,7350,";`"]],[7350,7350],[7352,7352]]],[1540689824717,["gjx16@GJXAIOU",[[1,7353,"\n"]],[7352,7352],[7353,7353]]],[1540689831861,["gjx16@GJXAIOU",[[1,7353,"`sizeof()"]],[7353,7353],[7362,7362]]],[1540689834534,["gjx16@GJXAIOU",[[1,7361,"p1"]],[7361,7361],[7363,7363]]],[1540689840519,["gjx16@GJXAIOU",[[1,7364," /sizeod"]],[7364,7364],[7372,7372]]],[1540689841029,["gjx16@GJXAIOU",[[-1,7371,"d"]],[7372,7372],[7371,7371]]],[1540689842822,["gjx16@GJXAIOU",[[1,7371,"f()"]],[7371,7371],[7374,7374]]],[1540689846827,["gjx16@GJXAIOU",[[1,7373,"p1[0]"]],[7373,7373],[7378,7378]]],[1540689853779,["gjx16@GJXAIOU",[[1,7379,"`= "]],[7379,7379],[7382,7382]]],[1540689861504,["gjx16@GJXAIOU",[[1,7314,"-"]],[7314,7314],[7315,7315]]],[1540689921653,[null,[[-1,7335,"\""],[1,7336,"”"]],[7335,7335],[7337,7337]]],[1540689921653,[null,[[1,7335,"\""],[-1,7335,"”"]],[7337,7337],[7335,7335]]],[1540689865356,["gjx16@GJXAIOU",[[1,7355,"   "]],[7355,7355],[7358,7358]]],[1540689868453,["gjx16@GJXAIOU",[[1,7388,"   \n"]],[7387,7387],[7391,7391]]],[1540689870564,["gjx16@GJXAIOU",[[-1,7388,"   "]],[7391,7391],[7388,7388]]],[1540689871623,["gjx16@GJXAIOU",[[1,7389,"\n"]],[7388,7388],[7389,7389]]],[1540689880312,["gjx16@GJXAIOU",[[1,7389,"- `char *p1[] = {“1111”,“2222”,“3333”};`\n   `sizeof(p1) /sizeof(p1[0])`= "]],[7389,7389],[7462,7462]]],[1540689884701,["gjx16@GJXAIOU",[[-1,7399,"1"]],[7400,7400],[7399,7399]]],[1540689884929,["gjx16@GJXAIOU",[[1,7399,"2"]],[7399,7399],[7400,7400]]],[1540689888123,["gjx16@GJXAIOU",[[1,7401,"10"]],[7401,7401],[7403,7403]]],[1540689892893,["gjx16@GJXAIOU",[[-1,7444,"1"]],[7445,7445],[7444,7444]]],[1540689893217,["gjx16@GJXAIOU",[[1,7444,"2"]],[7444,7444],[7445,7445]]],[1540689896385,["gjx16@GJXAIOU",[[-1,7456,"1"]],[7457,7457],[7456,7456]]],[1540689896521,["gjx16@GJXAIOU",[[1,7456,"2"]],[7456,7456],[7457,7457]]],[1540689904838,["gjx16@GJXAIOU",[[1,7465,"   \n"]],[7464,7464],[7468,7468]]],[1540689905405,["gjx16@GJXAIOU",[[1,7468,"- `char *p2[10] = {“1111”,“2222”,“3333”};`\n   `sizeof(p2) /sizeof(p2[0])`= "]],[7468,7468],[7543,7543]]],[1540689907861,["gjx16@GJXAIOU",[[-1,7465,"   "]],[7468,7468],[7465,7465]]],[1540689908500,["gjx16@GJXAIOU",[[-1,7464,"\n"]],[7465,7465],[7464,7464]]],[1540689910173,["gjx16@GJXAIOU",[[1,7464,"\n   "]],[7464,7464],[7468,7468]]],[1540689911579,["gjx16@GJXAIOU",[[-1,7465,"   "]],[7468,7468],[7465,7465]]],[1540689915980,["gjx16@GJXAIOU",[[-1,7475,"2"]],[7476,7476],[7475,7475]]],[1540689916568,["gjx16@GJXAIOU",[[1,7475,"3"]],[7475,7475],[7476,7476]]],[1540689919686,["gjx16@GJXAIOU",[[-1,7473,"*"]],[7474,7474],[7473,7473]]],[1540689981651,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7387,"!"],[1,7540,"!"]],[7315,7315],[7541,7541]]],[1540689981651,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7388,"!"],[-1,7540,"!"]],[7541,7541],[7315,7315]]],[1540689923263,["gjx16@GJXAIOU",[[1,7476,"["]],[7475,7475],[7476,7476]]],[1540689923389,["gjx16@GJXAIOU",[[1,7476,"]"]],[7476,7476],[7477,7477]]],[1540689927596,["gjx16@GJXAIOU",[[-1,7478,"1"]],[7479,7479],[7478,7478]]],[1540689927959,["gjx16@GJXAIOU",[[1,7478,"3"]],[7478,7478],[7479,7479]]],[1540689934496,["gjx16@GJXAIOU",[[-1,7521,"2"]],[7522,7522],[7521,7521]]],[1540689934936,["gjx16@GJXAIOU",[[1,7521,"3"]],[7521,7521],[7522,7522]]],[1540689939451,["gjx16@GJXAIOU",[[-1,7533,"2"]],[7534,7534],[7533,7533]]],[1540689939587,["gjx16@GJXAIOU",[[1,7533,"3"]],[7533,7533],[7534,7534]]],[1540689945530,["gjx16@GJXAIOU",[[1,7541,"\\"]],[7541,7541],[7542,7542]]],[1540689945617,["gjx16@GJXAIOU",[[1,7543,"   \n"]],[7542,7542],[7546,7546]]],[1540689948103,["gjx16@GJXAIOU",[[-1,7543,"   "]],[7546,7546],[7543,7543]]],[1540689948764,["gjx16@GJXAIOU",[[-1,7543,"\n"]],[7543,7543],[7542,7542]]],[1540689949467,["gjx16@GJXAIOU",[[-1,7541,"\\"]],[7542,7542],[7541,7541]]],[1540689950278,["gjx16@GJXAIOU",[[1,7542,"   \n"]],[7541,7541],[7545,7545]]],[1540689951277,["gjx16@GJXAIOU",[[-1,7542,"   "],[1,7545,"\n"]],[7545,7545],[7543,7543]]],[1540689951933,["gjx16@GJXAIOU",[[-1,7543,"\n"]],[7543,7543],[7542,7542]]],[1540689954022,["gjx16@GJXAIOU",[[1,7542,"- `char *p2[10] = {“1111”,“2222”,“3333”};`\n   `sizeof(p2) /sizeof(p2[0])`= "]],[7542,7542],[7617,7617]]],[1540689959323,["gjx16@GJXAIOU",[[-1,7552,"2"]],[7553,7553],[7552,7552]]],[1540689959811,["gjx16@GJXAIOU",[[1,7552,"4"]],[7552,7552],[7553,7553]]],[1540689961532,["gjx16@GJXAIOU",[[-1,7550,"*"]],[7551,7551],[7550,7550]]],[1540689963418,["gjx16@GJXAIOU",[[1,7553,"["]],[7552,7552],[7553,7553]]],[1540689963551,["gjx16@GJXAIOU",[[1,7553,"]"]],[7553,7553],[7554,7554]]],[1540689967505,["gjx16@GJXAIOU",[[1,7553,"10"]],[7553,7553],[7555,7555]]],[1540689970947,["gjx16@GJXAIOU",[[-1,7557,"1"]],[7558,7558],[7557,7557]]],[1540689971143,["gjx16@GJXAIOU",[[1,7557,"3"]],[7557,7557],[7558,7558]]],[1540689975947,["gjx16@GJXAIOU",[[-1,7600,"2"]],[7601,7601],[7600,7600]]],[1540689976224,["gjx16@GJXAIOU",[[1,7600,"4"]],[7600,7600],[7601,7601]]],[1540689981084,["gjx16@GJXAIOU",[[-1,7612,"2"]],[7613,7613],[7612,7612]]],[1540689981270,["gjx16@GJXAIOU",[[1,7612,"4"]],[7612,7612],[7613,7613]]],[1540690041659,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7387,"!"],[1,7621,"!"]],[7315,7315],[7622,7622]]],[1540690041659,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7388,"!"],[-1,7621,"!"]],[7622,7622],[7315,7315]]],[1540689990876,["gjx16@GJXAIOU",[[-1,7388,"\n"]],[7388,7388],[7387,7387]]],[1540690101671,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7387,"!"],[1,7620,"!"]],[7315,7315],[7621,7621]]],[1540690101671,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7388,"!"],[-1,7620,"!"]],[7621,7621],[7315,7315]]],[1540690050256,["gjx16@GJXAIOU",[[1,7387,"12"]],[7387,7387],[7389,7389]]],[1540690050861,["gjx16@GJXAIOU",[[-1,7387,"12"]],[7389,7389],[7387,7387]]],[1540690074768,["gjx16@GJXAIOU",[[1,7387,"3*4 / 4 = m3"]],[7387,7387],[7399,7399]]],[1540690075740,["gjx16@GJXAIOU",[[-1,7397,"m3"]],[7399,7399],[7397,7397]]],[1540690077061,["gjx16@GJXAIOU",[[1,7397,"3;"]],[7397,7397],[7399,7399]]],[1540690097713,["gjx16@GJXAIOU",[[1,7475,"10*4 /4 = 10;"]],[7475,7475],[7488,7488]]],[1540690101090,["gjx16@GJXAIOU",[[1,7565," "]],[7565,7565],[7566,7566]]],[1540690161740,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7646,"!"]],[7315,7315],[7647,7647]]],[1540690161740,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7646,"!"]],[7647,7647],[7315,7315]]],[1540690135585,["gjx16@GJXAIOU",[[1,7566,"3*30 / 30 = 3;"]],[7566,7566],[7580,7580]]],[1540690152370,["gjx16@GJXAIOU",[[1,7659,"10*30 ."]],[7659,7659],[7666,7666]]],[1540690153213,["gjx16@GJXAIOU",[[-1,7665,"."]],[7666,7666],[7665,7665]]],[1540690161601,["gjx16@GJXAIOU",[[1,7665,"/30 = 10ll"]],[7665,7665],[7675,7675]]],[1540690221726,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7676,"!"]],[7315,7315],[7677,7677]]],[1540690221726,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7676,"!"]],[7677,7677],[7315,7315]]],[1540690163172,["gjx16@GJXAIOU",[[-1,7673,"ll"]],[7675,7675],[7673,7673]]],[1540690164770,["gjx16@GJXAIOU",[[1,7673,";"]],[7673,7673],[7674,7674]]],[1540690167543,["gjx16@GJXAIOU",[[1,7675,"   \n"]],[7674,7674],[7678,7678]]],[1540690167703,["gjx16@GJXAIOU",[[-1,7675,"   "],[1,7678,"\n"]],[7678,7678],[7676,7676]]],[1540690198714,["gjx16@GJXAIOU",[[1,7676,"3.char"]],[7676,7676],[7682,7682]]],[1540690200085,["gjx16@GJXAIOU",[[-1,7678,"char"]],[7682,7682],[7678,7678]]],[1540690208372,["gjx16@GJXAIOU",[[1,7678,"`char buf[]p"]],[7678,7678],[7690,7690]]],[1540690209231,["gjx16@GJXAIOU",[[-1,7689,"p"]],[7690,7690],[7689,7689]]],[1540690209763,["gjx16@GJXAIOU",[[1,7689,"["]],[7689,7689],[7690,7690]]],[1540690209803,["gjx16@GJXAIOU",[[1,7690,"reference-id]"]],[7690,7690],[7690,7702]]],[1540690211260,["gjx16@GJXAIOU",[[-1,7690,"reference-id"]],[7690,7702],[7690,7690]]],[1540690214166,["gjx16@GJXAIOU",[[1,7690,"30"]],[7690,7690],[7692,7692]]],[1540690221355,["gjx16@GJXAIOU",[[1,7693," = "]],[7693,7693],[7696,7696]]],[1540690281726,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7697,"!"]],[7315,7315],[7698,7698]]],[1540690281726,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7697,"!"]],[7698,7698],[7315,7315]]],[1540690226830,["gjx16@GJXAIOU",[[1,7696,"{}l"]],[7696,7696],[7699,7699]]],[1540690228275,["gjx16@GJXAIOU",[[-1,7698,"l"]],[7699,7699],[7698,7698]]],[1540690228935,["gjx16@GJXAIOU",[[1,7698,";"]],[7698,7698],[7699,7699]]],[1540690236893,["gjx16@GJXAIOU",[[1,7697,"“1111”,“2222”,“3333”"]],[7697,7697],[7717,7717]]],[1540690247631,["gjx16@GJXAIOU",[[1,7720,"\n"]],[7719,7719],[7720,7720]]],[1540690250202,["gjx16@GJXAIOU",[[1,7720,"er"]],[7720,7720],[7722,7722]]],[1540690250963,["gjx16@GJXAIOU",[[-1,7720,"er"]],[7722,7722],[7720,7720]]],[1540690272814,["gjx16@GJXAIOU",[[1,7720,"二维数组做参数的时候，为什么不能写成·"]],[7720,7720],[7739,7739]]],[1540690273787,["gjx16@GJXAIOU",[[-1,7738,"·"]],[7739,7739],[7738,7738]]],[1540690281507,["gjx16@GJXAIOU",[[1,7738,"`void fun()"]],[7738,7738],[7749,7749]]],[1540690341737,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7750,"!"]],[7315,7315],[7751,7751]]],[1540690341737,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7750,"!"]],[7751,7751],[7315,7315]]],[1540690285917,["gjx16@GJXAIOU",[[1,7748,"char ****"]],[7748,7748],[7755,7755]]],[1540690289487,["gjx16@GJXAIOU",[[1,7755,"buf);"]],[7755,7755],[7760,7760]]],[1540690291303,["gjx16@GJXAIOU",[[-1,7759,";"]],[7760,7760],[7759,7759]]],[1540690295552,["gjx16@GJXAIOU",[[1,7759,";"]],[7759,7759],[7760,7760]]],[1540690299120,["gjx16@GJXAIOU",[[-1,7760,"**)"]],[7763,7763],[7760,7760]]],[1540690304338,["gjx16@GJXAIOU",[[1,7760,"`"]],[7760,7760],[7761,7761]]],[1540690306651,["gjx16@GJXAIOU",[[1,7719,"`"]],[7719,7719],[7720,7720]]],[1540690313508,["gjx16@GJXAIOU",[[1,7763,"\n"]],[7762,7762],[7763,7763]]],[1540690314952,["gjx16@GJXAIOU",[[1,7763,"weih"]],[7763,7763],[7767,7767]]],[1540690315780,["gjx16@GJXAIOU",[[-1,7763,"weih"]],[7767,7767],[7763,7763]]],[1540690332208,["gjx16@GJXAIOU",[[1,7763,"为什么可以写成：`void fun "]],[7763,7763],[7781,7781]]],[1540690333102,["gjx16@GJXAIOU",[[-1,7780," "]],[7781,7781],[7780,7780]]],[1540690333784,["gjx16@GJXAIOU",[[1,7780,"()"]],[7780,7780],[7782,7782]]],[1540690341043,["gjx16@GJXAIOU",[[1,7781,"char buf[]"]],[7781,7781],[7791,7791]]],[1540690401732,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7793,"!"]],[7315,7315],[7794,7794]]],[1540690401732,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7793,"!"]],[7794,7794],[7315,7315]]],[1540690342136,["gjx16@GJXAIOU",[[1,7791,"["]],[7791,7791],[7792,7792]]],[1540690342180,["gjx16@GJXAIOU",[[1,7792,"reference-id]"]],[7792,7792],[7792,7804]]],[1540690343297,["gjx16@GJXAIOU",[[-1,7792,"reference-id"],[1,7804,"3"]],[7792,7804],[7793,7793]]],[1540690343583,["gjx16@GJXAIOU",[[1,7793,"0"]],[7793,7793],[7794,7794]]],[1540690347183,["gjx16@GJXAIOU",[[1,7796,"`"]],[7796,7796],[7797,7797]]],[1540690821749,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7798,"!"]],[7315,7315],[7799,7799]]],[1540690821749,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7798,"!"]],[7799,7799],[7315,7315]]],[1540690801745,["gjx16@GJXAIOU",[[1,7798,"\n"]],[7797,7797],[7798,7798]]],[1540690801910,["gjx16@GJXAIOU",[[1,7799,"\n"]],[7798,7798],[7799,7799]]],[1540690803969,["gjx16@GJXAIOU",[[1,7799,"4."]],[7799,7799],[7801,7801]]],[1540691001756,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7802,"!"]],[7315,7315],[7803,7803]]],[1540691001756,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7802,"!"]],[7803,7803],[7315,7315]]],[1540690970239,["gjx16@GJXAIOU",[[1,7400,"   \n"]],[7399,7399],[7403,7403]]],[1540690974076,["gjx16@GJXAIOU",[[1,7403,"```c"]],[7403,7403],[7407,7407]]],[1540690974497,["gjx16@GJXAIOU",[[1,7408,"   \n"]],[7407,7407],[7411,7411]]],[1540690976930,["gjx16@GJXAIOU",[[1,7411,"```"]],[7411,7411],[7414,7414]]],[1540690980962,["gjx16@GJXAIOU",[[-1,7400,"   "]],[7403,7403],[7400,7400]]],[1540690984368,["gjx16@GJXAIOU",[[-1,7405,"   "]],[7408,7408],[7405,7405]]],[1540690987917,["gjx16@GJXAIOU",[[1,7405,"\n"]],[7404,7404],[7405,7405]]],[1540690988673,["gjx16@GJXAIOU",[[1,7405,"#include<stdio.h>\n\nint main(void)\n{\n\tchar *p1[] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p1), sizeof(p1[0]), sizeof(p1) / sizeof(p1[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[7405,7405],[7588,7588]]],[1540691121755,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,7995,"!"]],[7315,7315],[7996,7996]]],[1540691121755,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,7995,"!"]],[7996,7996],[7315,7315]]],[1540691096401,["gjx16@GJXAIOU",[[1,7682,"   \n"]],[7681,7681],[7685,7685]]],[1540691098050,["gjx16@GJXAIOU",[[1,7685,"···"]],[7685,7685],[7688,7688]]],[1540691101712,["gjx16@GJXAIOU",[[-1,7682,"   ···"]],[7688,7688],[7682,7682]]],[1540691104187,["gjx16@GJXAIOU",[[1,7682,"```"]],[7682,7682],[7685,7685]]],[1540691104229,["gjx16@GJXAIOU",[[1,7685,"language\n```\n"]],[7685,7685],[7685,7693]]],[1540691105424,["gjx16@GJXAIOU",[[-1,7685,"language"],[1,7693,"c"]],[7685,7693],[7686,7686]]],[1540691105695,["gjx16@GJXAIOU",[[1,7687,"\n"]],[7686,7686],[7687,7687]]],[1540691107475,["gjx16@GJXAIOU",[[1,7687,"#include<stdio.h>\n\nint main(void)\n{\n\tchar *p2[10] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p2), sizeof(p2[0]), sizeof(p2) / sizeof(p2[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n"]],[7687,7687],[7873,7873]]],[1540691119342,["gjx16@GJXAIOU",[[1,7879,"\n"]],[7877,7877],[7878,7878]]],[1540691120048,["gjx16@GJXAIOU",[[1,7878,"//"]],[7878,7878],[7880,7880]]],[1540691181818,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8195,"!"]],[7315,7315],[8196,8196]]],[1540691181818,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8195,"!"]],[8196,8196],[7315,7315]]],[1540691123140,["gjx16@GJXAIOU",[[1,7880,"jieguo"]],[7880,7880],[7886,7886]]],[1540691124827,["gjx16@GJXAIOU",[[-1,7880,"jieguo"]],[7886,7886],[7880,7880]]],[1540691130043,["gjx16@GJXAIOU",[[1,7880,"结果：40，"]],[7880,7880],[7886,7886]]],[1540691131086,["gjx16@GJXAIOU",[[-1,7885,"，"]],[7886,7886],[7885,7885]]],[1540691131370,["gjx16@GJXAIOU",[[1,7885,",4，"]],[7885,7885],[7888,7888]]],[1540691131748,["gjx16@GJXAIOU",[[-1,7887,"，"]],[7888,7888],[7887,7887]]],[1540691132035,["gjx16@GJXAIOU",[[1,7887,",10"]],[7887,7887],[7890,7890]]],[1540691139452,["gjx16@GJXAIOU",[[1,7593,"\n"]],[7593,7593],[7594,7594]]],[1540691165025,["gjx16@GJXAIOU",[[1,7594,"\n"]],[7592,7592],[7593,7593]]],[1540691165523,["gjx16@GJXAIOU",[[1,7593,"、、"]],[7593,7593],[7595,7595]]],[1540691166429,["gjx16@GJXAIOU",[[-1,7593,"、、"]],[7595,7595],[7593,7593]]],[1540691173147,["gjx16@GJXAIOU",[[1,7593,"//结果：123，"]],[7593,7593],[7602,7602]]],[1540691173856,["gjx16@GJXAIOU",[[-1,7601,"，"]],[7602,7602],[7601,7601]]],[1540691174061,["gjx16@GJXAIOU",[[1,7601,",4"]],[7601,7601],[7603,7603]]],[1540691175295,["gjx16@GJXAIOU",[[-1,7600,"3,4"]],[7603,7603],[7600,7600]]],[1540691178220,["gjx16@GJXAIOU",[[1,7600,"，4，"]],[7600,7600],[7603,7603]]],[1540691178466,["gjx16@GJXAIOU",[[-1,7602,"，"]],[7603,7603],[7602,7602]]],[1540691178672,["gjx16@GJXAIOU",[[1,7602,",3"]],[7602,7602],[7604,7604]]],[1540691181636,["gjx16@GJXAIOU",[[1,7603," "]],[7603,7603],[7604,7604]]],[1540691241829,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8219,"!"]],[7315,7315],[8220,8220]]],[1540691241829,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8219,"!"]],[8220,8220],[7315,7315]]],[1540691195336,["gjx16@GJXAIOU",[[1,7998,"   \n"]],[7997,7997],[8001,8001]]],[1540691195484,["gjx16@GJXAIOU",[[-1,7998,"   "],[1,8001,"\n"]],[8001,8001],[7999,7999]]],[1540691301819,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8221,"!"]],[7315,7315],[8222,8222]]],[1540691301819,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8221,"!"]],[8222,8222],[7315,7315]]],[1540691253018,["gjx16@GJXAIOU",[[1,7998,"··"]],[7998,7998],[8000,8000]]],[1540691254541,["gjx16@GJXAIOU",[[-1,7998,"··"]],[8000,8000],[7998,7998]]],[1540691255173,["gjx16@GJXAIOU",[[-1,7999,"\n"]],[7998,7998],[7997,7997]]],[1540691256417,["gjx16@GJXAIOU",[[1,7998,"   \n"]],[7997,7997],[8001,8001]]],[1540691257700,["gjx16@GJXAIOU",[[-1,7998,"   "]],[8001,8001],[7998,7998]]],[1540691258663,["gjx16@GJXAIOU",[[-1,7999,"\n"]],[7998,7998],[7997,7997]]],[1540691259690,["gjx16@GJXAIOU",[[1,7998,"   \n"]],[7997,7997],[8001,8001]]],[1540691260623,["gjx16@GJXAIOU",[[-1,7998,"   "]],[8001,8001],[7998,7998]]],[1540691262594,["gjx16@GJXAIOU",[[1,7998,"```"]],[7998,7998],[8001,8001]]],[1540691262641,["gjx16@GJXAIOU",[[1,8001,"language\n```\n"]],[8001,8001],[8001,8009]]],[1540691263833,["gjx16@GJXAIOU",[[-1,8001,"language"],[1,8009,"c"]],[8001,8009],[8002,8002]]],[1540691264061,["gjx16@GJXAIOU",[[1,8003,"\n"]],[8002,8002],[8003,8003]]],[1540691265276,["gjx16@GJXAIOU",[[1,8003,"#include<stdio.h>\n\nint main(void)\n{\n\tchar p3[][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p3), sizeof(p3[0]), sizeof(p3) / sizeof(p3[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[8003,8003],[8190,8190]]],[1540691269565,["gjx16@GJXAIOU",[[1,8197,"\n"]],[8194,8194],[8195,8195]]],[1540691291532,["gjx16@GJXAIOU",[[1,8195,"//结果：90,30,3"]],[8195,8195],[8207,8207]]],[1540691421817,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8431,"!"]],[7315,7315],[8432,8432]]],[1540691421817,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8431,"!"]],[8432,8432],[7315,7315]]],[1540691378362,["gjx16@GJXAIOU",[[1,8305,"\n"]],[8304,8304],[8305,8305]]],[1540691379359,["gjx16@GJXAIOU",[[1,8305,"```"]],[8305,8305],[8308,8308]]],[1540691379408,["gjx16@GJXAIOU",[[1,8308,"language\n```\n"]],[8308,8308],[8308,8316]]],[1540691380652,["gjx16@GJXAIOU",[[-1,8308,"language"],[1,8316,"c"]],[8308,8316],[8309,8309]]],[1540691380889,["gjx16@GJXAIOU",[[1,8310,"\n"]],[8309,8309],[8310,8310]]],[1540691382252,["gjx16@GJXAIOU",[[1,8310,"#include<stdio.h>\n\nint main(void)\n{\n\tchar p4[10][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p4), sizeof(p4[0]), sizeof(p4) / sizeof(p4[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[8310,8310],[8499,8499]]],[1540691395387,["gjx16@GJXAIOU",[[1,8504,"//结果："]],[8504,8504],[8509,8509]]],[1540691481820,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8636,"!"]],[7315,7315],[8637,8637]]],[1540691481820,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8636,"!"]],[8637,8637],[7315,7315]]],[1540691422968,["gjx16@GJXAIOU",[[1,8509,"300,30,10"]],[8509,8509],[8518,8518]]],[1540691425158,["gjx16@GJXAIOU",[[1,8519,"\n"]],[8518,8518],[8519,8519]]],[1540691901834,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8646,"!"]],[7315,7315],[8647,8647]]],[1540691901834,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8646,"!"]],[8647,8647],[7315,7315]]],[1540691878744,["gjx16@GJXAIOU",[[1,8645,"//画出三种二级指针内存模型图\n\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[8645,8645],[9078,9078]]],[1540691882404,["gjx16@GJXAIOU",[[1,8662,"···"]],[8662,8662],[8665,8665]]],[1540691883844,["gjx16@GJXAIOU",[[-1,8662,"···"]],[8665,8665],[8662,8662]]],[1540691884124,["gjx16@GJXAIOU",[[-1,8662,"\n"]],[8662,8662],[8661,8661]]],[1540691889146,["gjx16@GJXAIOU",[[1,8661,"·"]],[8661,8661],[8662,8662]]],[1540691890492,["gjx16@GJXAIOU",[[-1,8661,"·"]],[8662,8662],[8661,8661]]],[1540691892186,["gjx16@GJXAIOU",[[1,8661,"```"]],[8661,8661],[8664,8664]]],[1540691892234,["gjx16@GJXAIOU",[[1,8664,"language\n```\n"]],[8664,8664],[8664,8672]]],[1540691893177,["gjx16@GJXAIOU",[[-1,8664,"language"],[1,8672,"c"]],[8664,8672],[8665,8665]]],[1540691900206,["gjx16@GJXAIOU",[[-1,8671,"#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[8671,9086],[8671,8671]]],[1540691961831,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,8672,"!"]],[7315,7315],[8673,8673]]],[1540691961831,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,8672,"!"]],[8673,8673],[7315,7315]]],[1540691902903,["gjx16@GJXAIOU",[[1,8666,"\n"]],[8665,8665],[8666,8666]]],[1540691903510,["gjx16@GJXAIOU",[[1,8666,"#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[8666,8666],[9081,9081]]],[1540691910024,["gjx16@GJXAIOU",[[1,8643,"\n"]],[8642,8642],[8643,8643]]],[1540691910181,["gjx16@GJXAIOU",[[1,8644,"\n"]],[8643,8643],[8644,8644]]],[1540691910896,["gjx16@GJXAIOU",[[1,8644,"---"]],[8644,8644],[8647,8647]]],[1540691912168,["gjx16@GJXAIOU",[[1,8648,"\n"]],[8647,8647],[8648,8648]]],[1540691914869,["gjx16@GJXAIOU",[[1,8520,"\n"]],[8519,8519],[8520,8520]]],[1540691916609,["gjx16@GJXAIOU",[[1,8520,"----"]],[8520,8520],[8524,8524]]],[1540691917278,["gjx16@GJXAIOU",[[1,8525,"\n"]],[8524,8524],[8525,8525]]],[1540692021842,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,9100,"!"]],[7315,7315],[9101,9101]]],[1540692021842,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,9100,"!"]],[9101,9101],[7315,7315]]],[1540691998277,["gjx16@GJXAIOU",[[-1,9100,"![作业1]($resource/%E4%BD%9C%E4%B8%9A1.png)\n\n![作业2]($resource/%E4%BD%9C%E4%B8%9A2.png)"]],[9100,9184],[9100,9100]]],[1540693101855,[null,[[1,7315," "],[-1,7335,"\""],[1,7336,"”"],[-1,7354,"`"],[1,7358,"`"],[-1,7386,"\n"],[-1,7399,"!"],[1,7400,"\n"],[1,9097,"\n"]],[7315,7315],[9098,9098]]],[1540693101855,[null,[[-1,7315," "],[1,7336,"\""],[-1,7336,"”"],[1,7355,"`"],[-1,7358,"`"],[1,7387,"\n"],[1,7399,"!"],[-1,7399,"\n"],[-1,9097,"\n"]],[9098,9098],[7315,7315]]],[1540693090783,["gjx16@GJXAIOU",[[-1,1309,"~~这里有点问题~~"]],[1319,1319],[1309,1309]]],[1540693091038,["gjx16@GJXAIOU",[[-1,1309,"\n"]],[1309,1309],[1308,1308]]],[1540693098614,["gjx16@GJXAIOU",[[-1,1603,"这里的p指向哪里？"]],[1612,1612],[1603,1603]]],[1540693161852,[null,[[1,7295," "],[-1,7315,"\""],[1,7316,"”"],[-1,7334,"`"],[1,7338,"`"],[-1,7366,"\n"],[-1,7379,"!"],[1,7380,"\n"],[1,9077,"\n"]],[7295,7295],[9078,9078]]],[1540693161852,[null,[[-1,7295," "],[1,7316,"\""],[-1,7316,"”"],[1,7335,"`"],[-1,7338,"`"],[1,7367,"\n"],[1,7379,"!"],[-1,7379,"\n"],[-1,9077,"\n"]],[9078,9078],[7295,7295]]],[1540693120937,["gjx16@GJXAIOU",[[1,1603,"即是将tmp赋值给p指向的内存空间"]],[1603,1603],[1620,1620]]],[1540693761867,[null,[[1,7312," "],[-1,7332,"\""],[1,7333,"”"],[-1,7351,"`"],[1,7355,"`"],[-1,7383,"\n"],[-1,7396,"!"],[1,7397,"\n"],[1,9094,"\n"]],[7312,7312],[9095,9095]]],[1540693761867,[null,[[-1,7312," "],[1,7333,"\""],[-1,7333,"”"],[1,7352,"`"],[-1,7355,"`"],[1,7384,"\n"],[1,7396,"!"],[-1,7396,"\n"],[-1,9094,"\n"]],[9095,9095],[7312,7312]]],[1540693735995,["gjx16@GJXAIOU",[[1,1668,"、、"]],[1668,1668],[1670,1670]]],[1540693737120,["gjx16@GJXAIOU",[[-1,1668,"、、"]],[1670,1670],[1668,1668]]],[1540693737642,["gjx16@GJXAIOU",[[1,1668,"？、"]],[1668,1668],[1670,1670]]],[1540693738537,["gjx16@GJXAIOU",[[-1,1668,"？、"]],[1670,1670],[1668,1668]]],[1540693749389,["gjx16@GJXAIOU",[[1,1668,"//这时候并没有分配内存"]],[1668,1668],[1680,1680]]],[1540694001871,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7408,"!"],[1,7409,"\n"],[1,9106,"\n"]],[7324,7324],[9107,9107]]],[1540694001871,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7408,"!"],[-1,7408,"\n"],[-1,9106,"\n"]],[9107,9107],[7324,7324]]],[1540693963821,["gjx16@GJXAIOU",[[1,9108,"![作业四：三种二级指针内存模型图]($resource/%E4%BD%9C%E4%B8%9A%E5%9B%9B%EF%BC%9A%E4%B8%89%E7%A7%8D%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)"]],[9108,9108],[9278,9278]]],[1540693996541,["gjx16@GJXAIOU",[[1,8803,"、、"]],[8803,8803],[8805,8805]]],[1540693997336,["gjx16@GJXAIOU",[[-1,8803,"、、"]],[8805,8805],[8803,8803]]],[1540694000449,["gjx16@GJXAIOU",[[1,8803,"//sange"]],[8803,8803],[8810,8810]]],[1540694001552,["gjx16@GJXAIOU",[[-1,8806,"ange"]],[8810,8810],[8806,8806]]],[1540694061875,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7408,"!"],[1,7409,"\n"],[1,9280,"\n"]],[7324,7324],[9281,9281]]],[1540694061875,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7408,"!"],[-1,7408,"\n"],[-1,9280,"\n"]],[9281,9281],[7324,7324]]],[1540694002029,["gjx16@GJXAIOU",[[-1,8805,"s"]],[8806,8806],[8805,8805]]],[1540694012230,["gjx16@GJXAIOU",[[1,8805,"三个元素，每个占四个字节"]],[8805,8805],[8817,8817]]],[1540694241878,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7408,"!"],[1,7409,"\n"],[1,9291,"\n"]],[7324,7324],[9292,9292]]],[1540694241878,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7408,"!"],[-1,7408,"\n"],[-1,9291,"\n"]],[9292,9292],[7324,7324]]],[1540694224061,["gjx16@GJXAIOU",[[1,7400,"（）"]],[7400,7400],[7402,7402]]],[1540694230298,["gjx16@GJXAIOU",[[1,7401,"指针占4个字节"]],[7401,7401],[7408,7408]]],[1540694301871,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7417,"!"],[1,7418,"\n"],[1,9300,"\n"]],[7324,7324],[9301,9301]]],[1540694301871,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7417,"!"],[-1,7417,"\n"],[-1,9300,"\n"]],[9301,9301],[7324,7324]]],[1540694284499,["gjx16@GJXAIOU",[[1,8666,"因为第一分割"]],[8666,8666],[8672,8672]]],[1540694285346,["gjx16@GJXAIOU",[[-1,8670,"分割"]],[8672,8672],[8670,8670]]],[1540694297005,["gjx16@GJXAIOU",[[1,8670,"个的buf +1的补偿"]],[8670,8670],[8681,8681]]],[1540694297727,["gjx16@GJXAIOU",[[-1,8679,"补偿"]],[8681,8681],[8679,8679]]],[1540694301642,["gjx16@GJXAIOU",[[1,8679,"步长"]],[8679,8679],[8681,8681]]],[1540694361880,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7417,"!"],[1,7418,"\n"],[1,9315,"\n"]],[7324,7324],[9316,9316]]],[1540694361880,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7417,"!"],[-1,7417,"\n"],[-1,9315,"\n"]],[9316,9316],[7324,7324]]],[1540694307349,["gjx16@GJXAIOU",[[1,8681,"为4，二"]],[8681,8681],[8685,8685]]],[1540694309190,["gjx16@GJXAIOU",[[-1,8684,"二"]],[8685,8685],[8684,8684]]],[1540694311540,["gjx16@GJXAIOU",[[1,8684,"er"]],[8684,8684],[8686,8686]]],[1540694312336,["gjx16@GJXAIOU",[[-1,8684,"er"]],[8686,8686],[8684,8684]]],[1540694323003,["gjx16@GJXAIOU",[[1,8684,"而原来的——"]],[8684,8684],[8690,8690]]],[1540694323494,["gjx16@GJXAIOU",[[-1,8689,"—"]],[8690,8690],[8689,8689]]],[1540694324669,["gjx16@GJXAIOU",[[1,8689,"+1"]],[8689,8689],[8691,8691]]],[1540694325879,["gjx16@GJXAIOU",[[-1,8688,"—+1"]],[8691,8691],[8688,8688]]],[1540694333235,["gjx16@GJXAIOU",[[1,8688,"+1步长为30；"]],[8688,8688],[8696,8696]]],[1540694336966,["gjx16@GJXAIOU",[[1,8666,"\n"]],[8666,8666],[8667,8667]]],[1540694661873,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7417,"!"],[1,7418,"\n"],[1,9331,"\n"]],[7324,7324],[9332,9332]]],[1540694661873,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7417,"!"],[-1,7417,"\n"],[-1,9331,"\n"]],[9332,9332],[7324,7324]]],[1540694641664,["gjx16@GJXAIOU",[[1,9378," "]],[9378,9378],[9379,9379]]],[1540709426862,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7417,"!"],[1,7418,"\n"],[1,9333,"\n"],[-1,9377,"\n"],[1,9379,"\n"]],[7324,7324],[9380,9380]]],[1540709426862,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7417,"!"],[-1,7417,"\n"],[-1,9333,"\n"],[1,9378,"\n"],[-1,9379,"\n"]],[9380,9380],[7324,7324]]],[1540709375806,["gjx16@GJXAIOU",[[1,9162,"\n"]],[9161,9161],[9162,9162]]],[1540709375964,["gjx16@GJXAIOU",[[1,9163,"\n"]],[9162,9162],[9163,9163]]],[1540709377311,["gjx16@GJXAIOU",[[-1,9163,"\n"]],[9163,9163],[9162,9162]]],[1540709377464,["gjx16@GJXAIOU",[[-1,9162,"\n"]],[9162,9162],[9161,9161]]],[1540709381931,["gjx16@GJXAIOU",[[1,9333,"~~~~"]],[9333,9333],[9335,9335]]],[1540709420233,["gjx16@GJXAIOU",[[1,9335,"视频没听，作业间接中"]],[9335,9335],[9345,9345]]],[1540709420868,["gjx16@GJXAIOU",[[-1,9344,"中"]],[9345,9345],[9344,9344]]],[1540709421747,["gjx16@GJXAIOU",[[1,9344,"（）"]],[9344,9344],[9346,9346]]],[1540709423702,["gjx16@GJXAIOU",[[-1,9342,"间接"]],[9344,9344],[9342,9342]]],[1540709426577,["gjx16@GJXAIOU",[[1,9342,"讲解"]],[9342,9342],[9344,9344]]],[1540709486855,[null,[[1,7324," "],[-1,7344,"\""],[1,7345,"”"],[-1,7363,"`"],[1,7367,"`"],[-1,7395,"\n"],[-1,7417,"!"],[1,7418,"\n"],[1,9348,"\n"],[-1,9392,"\n"],[1,9394,"\n"]],[7324,7324],[9395,9395]]],[1540709486855,[null,[[-1,7324," "],[1,7345,"\""],[-1,7345,"”"],[1,7364,"`"],[-1,7367,"`"],[1,7396,"\n"],[1,7417,"!"],[-1,7417,"\n"],[-1,9348,"\n"],[1,9393,"\n"],[-1,9394,"\n"]],[9395,9395],[7324,7324]]],[1540709429119,["gjx16@GJXAIOU",[[1,9345,"中"]],[9345,9345],[9346,9346]]],[1540709432502,["gjx16@GJXAIOU",[[1,9347,"第五分钟"]],[9347,9347],[9351,9351]]]],null,"gjx16@GJXAIOU"],["d560eb80-d686-43a8-9b88-edf2a6ea2657",1540734073811,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量\n将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变** \n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值（指向），但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char *const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 二、指针作为函数参数\n\n\n### （一）值传递（形参的修改不会影响到实参的值）\n例子：（这里main函数中的p和getMem函数中的p未建立对应关系）\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n\n---\n**1.二级指针做函数参数输出特性**\n```c\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;//即是将tmp赋值给p指向的内存空间\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;//这时候并没有分配内存\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}\n```\n程序运行结果：\n`p = abdakg`\n程序运行对应的内存四区图\n![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)\n\n---\n\n## 指针数组的使用\n\n**1.定义指针：**\n**指针数组的本质：** 是一个数组，只是每一个元素都是指针char *\n\n- 第一种内存模型\n```c\nchar *p1 = \"dkfjdksjf\";\nchar *p2 = \"djfdkshfa\";\nchar *p3 = \"dkfjaioerio\";\n//若简化定义一系列定义，可使用指针数组\n\nchar *p[] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\nint  n = sizoeof(p) /sizeof(p[0]);\n//这种方法只能是没有定义数组长度的时候使用，以下方法就不能使用\n//char *p[10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\n//printf(\"sizeof(p) = %d,sizeof(p[0]) = %d\\n\",sizeof(p),sizeof(p[0]));\n//输出结果为：40和4（因为32位系统中指针占4个字节）\n\n\n\n//打印方式\n int i = 0;\n for(i = 0; i < n ; i++)\n   {\n       printf(\"%s\\n\",p[i]);\n   }\n```\n内存四区图：\n\n![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**2.排序：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid print_array(char *p[], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\t\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p,n);\n\t\n\tsort_array(p,n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n程序运行结果；\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**3.实参与形参传值参数的定义方法：**\n即形参应该怎么写\n例子1：\n```c\nvoid array(char a[]//或者char *a)\nint main()\n{\n   char p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n```\n\n例子2：\n```c\nvoid array(char *a[]//或者char **a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n\n```\n\n\n## 三、二维数组的使用\n\n**1.一维数组 的地址**\n```c\nchar a[10] = \"dkfjdkfj\";\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);//&a表示整个一维数组的地址，a表示首元素的地址\n//结果示例：1 ，2，1，11\n\n\n\nint i = 0;\nfor(i = 0; i < 10; i++)\n{\n  printf(\"%s\\n\",a[i]);//这里的a[i] 等于 a+i  或者 *(a+i),因为这里的首行地址和首元素地址是一样的\n}\n\n\n\n\nchar a[4][30]= {\"sfdsfaf\",\"dfdgdfgre\",\"dfdogio\"};\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);\n//结果示例：1，31,1,120\n\n\n```\n\n\n**2.将二维数组排序打印输出：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n\n程序运行结果：\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**二级指针第三种内存模型**\n分配在堆区\n\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}\n```\n二级指针的第三种内存模型为：\n\n![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)\n\n\n**将上面的程序进行函数封装：**\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nchar *getMem(int n)\n{\n\tint i = 0;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \", buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\t}\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;\n\treturn 0;\n}\n```\n程序运行结果为：\n`test00, test11, test22,`\n\n\n## 作业\n\n1.**作业1：**\n已知：`char buf[] = “abcdef”`,下面表达式的区别？\n- `const char *p = buf`\n- `char const *p = buf`\n- `char *const p = buf`\n- `const char *const  *p = buf`\n\n2.**求下列表达式的值：**\n- `char *p1[] = {“1111”,“2222”,“3333”};`\n   `sizeof(p1) /sizeof(p1[0])`= 3*4 （指针占4个字节）/ 4 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p1[] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p1), sizeof(p1[0]), sizeof(p1) / sizeof(p1[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：12，4, 3\n\n- `char *p2[10] = {“1111”,“2222”,“3333”};`\n   `sizeof(p2) /sizeof(p2[0])`= 10*4 /4 = 10;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p2[10] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p2), sizeof(p2[0]), sizeof(p2) / sizeof(p2[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n//结果：40,4,10\n\n- `char p3[][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p3) /sizeof(p3[0])`=  3*30 / 30 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p3[][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p3), sizeof(p3[0]), sizeof(p3) / sizeof(p3[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：90,30,3\n\n\n- `char p4[10][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p4) /sizeof(p4[0])`= 10*30 /30 = 10;\n\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p4[10][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p4), sizeof(p4[0]), sizeof(p4) / sizeof(p4[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：300,30,10\n\n----\n\n3.`char buf[][30] = {“1111”,“2222”,“3333”};`\n二维数组做参数的时候，为什么不能写成`void fun(char **buf);`\n为什么可以写成：`void fun(char buf[][30])`\n\n因为第一个的buf +1的步长为4，而原来的+1步长为30；\n\n---\n\n4.//画出三种二级指针内存模型图\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};//三个元素，每个占四个字节\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n![作业四：三种二级指针内存模型图]($resource/%E4%BD%9C%E4%B8%9A%E5%9B%9B%EF%BC%9A%E4%B8%89%E7%A7%8D%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n~~视频没听，作业讲解（中）第五分钟~~\n![作业3]($resource/%E4%BD%9C%E4%B8%9A3.png)\n\n  \n![作业4]($resource/%E4%BD%9C%E4%B8%9A4.png)\n",[[1540734015961,["gjx16@GJXAIOU",[[1,9354,"\n"]],[9353,9353],[9354,9354]]],[1540734016145,["gjx16@GJXAIOU",[[1,9355,"\n"]],[9354,9354],[9355,9355]]],[1540735478359,["gjx16@GJXAIOU",[[1,9401,"/*\n有字符串有以下特征（\"abcd11111abcd222222abcdqqqqqqqq\"）,请写一个函数接口，输出一下结果：\n把字符串替换为（dcba11111dcba222222dcbaqqqqqqqq），并把结果传出\n要求：\n1.正确实现接口和功能\n2.编写测试用例\n\nsrc: 原字符串\ndst:生成的或需要填充的字符串\nsub:需要查找的字符串\nnew_sub :替换的新字符串\n\nreturn : 0 成功\n\t\t-1 失败\n\n*/"]],[9401,9401],[9623,9623]]],[1540735481862,["gjx16@GJXAIOU",[[1,9398,"···"]],[9398,9398],[9401,9401]]],[1540735483017,["gjx16@GJXAIOU",[[-1,9398,"···"]],[9401,9401],[9398,9398]]],[1540735484755,["gjx16@GJXAIOU",[[1,9398,"```"]],[9398,9398],[9401,9401]]],[1540735484800,["gjx16@GJXAIOU",[[1,9401,"language\n```\n"]],[9401,9401],[9401,9409]]],[1540735486130,["gjx16@GJXAIOU",[[-1,9401,"language"],[1,9409,"p"]],[9401,9409],[9402,9402]]],[1540735487157,["gjx16@GJXAIOU",[[1,9402,"ython"]],[9402,9402],[9407,9407]]],[1540735490966,["gjx16@GJXAIOU",[[-1,9408,"```"]],[9408,9411],[9408,9408]]],[1540735494826,["gjx16@GJXAIOU",[[1,9635,"\n"]],[9634,9634],[9635,9635]]],[1540735495413,["gjx16@GJXAIOU",[[1,9635,"```"]],[9635,9635],[9638,9638]]],[1540735498142,["gjx16@GJXAIOU",[[-1,9409,"\n"]],[9409,9409],[9408,9408]]],[1540735498324,["gjx16@GJXAIOU",[[-1,9408,"\n"]],[9408,9408],[9407,9407]]],[1540736604009,["gjx16@GJXAIOU",[[1,9637,"\n"]],[9636,9636],[9637,9637]]],[1540736604168,["gjx16@GJXAIOU",[[1,9638,"\n"]],[9637,9637],[9638,9638]]],[1540736604367,["gjx16@GJXAIOU",[[1,9639,"\n"]],[9638,9638],[9639,9639]]],[1540736606985,["gjx16@GJXAIOU",[[1,9639,"~~~~~"]],[9639,9639],[9642,9642]]],[1540736609982,["gjx16@GJXAIOU",[[-1,9639,"~~~~~"]],[9644,9644],[9639,9639]]],[1540736611672,["gjx16@GJXAIOU",[[1,9639,"```"]],[9639,9639],[9642,9642]]],[1540736611716,["gjx16@GJXAIOU",[[1,9642,"language\n```\n"]],[9642,9642],[9642,9650]]],[1540736612936,["gjx16@GJXAIOU",[[-1,9642,"language"],[1,9650,"p"]],[9642,9650],[9643,9643]]],[1540736613979,["gjx16@GJXAIOU",[[1,9643,"ython"]],[9643,9643],[9648,9648]]],[1540736614975,["gjx16@GJXAIOU",[[1,9649,"\n"]],[9648,9648],[9649,9649]]],[1540736617196,["gjx16@GJXAIOU",[[1,9649,"/*\n有一个字符串符合以下特征（\"abcdef\",acccd,eeee,aaaa,e3eeee,ssss\"）\n写两个函数（API），输出以下结果：\n第一个API（第二种内存模型：二维数组）\n- 以逗号分割字符串，形成二维数组，并把结果传出\n- 把二维数组行数运算结果也传出\nint spitString(const char *str ,char c,char buf[10][30] ,int *count);   //in\n\n\n第二个API（第三种内存模型：动态生成二维内存）\n- 以逗号分隔字符串，形成一个二级指针；\n- 把一共拆分多少行字符串个数传出；\nint spitString2(const char *str ,char c,char **myp ,int *count);   //in\n\n\n\n要求：\n- 能正确表达功能的要求，定义出接口\n- 正确实现接口和功能\n- 编写正确的测试用例\n\n*/\n"]],[9649,9649],[10056,10056]]],[1540736624485,["gjx16@GJXAIOU",[[-1,10062,"![作业4]($resource/%E4%BD%9C%E4%B8%9A4.png)\n"]],[10061,10103],[10061,10061]]],[1540736629854,["gjx16@GJXAIOU",[[-1,9356,"![作业3]($resource/%E4%BD%9C%E4%B8%9A3.png)\n"]],[9355,9397],[9355,9355]]],[1540736632229,["gjx16@GJXAIOU",[[1,9333,"\n"]],[9332,9332],[9333,9333]]],[1540736632421,["gjx16@GJXAIOU",[[1,9334,"\n"]],[9333,9333],[9334,9334]]],[1540736720293,["gjx16@GJXAIOU",[[-1,9335,"~~视频没听，作业讲解（中）第五分钟~~"]],[9335,9355],[9335,9335]]],[1540736722976,["gjx16@GJXAIOU",[[-1,9337,"\n"]],[9337,9337],[9336,9336]]],[1540736723400,["gjx16@GJXAIOU",[[-1,9336,"\n"]],[9336,9336],[9335,9335]]],[1540736723932,["gjx16@GJXAIOU",[[-1,9335,"\n"]],[9335,9335],[9334,9334]]],[1540736755594,["gjx16@GJXAIOU",[[1,9334,"~~~~"]],[9334,9334],[9336,9336]]],[1540736759895,["gjx16@GJXAIOU",[[1,9336,"zuoye"]],[9336,9336],[9341,9341]]],[1540736761373,["gjx16@GJXAIOU",[[-1,9336,"zuoye"]],[9341,9341],[9336,9336]]],[1540736770142,["gjx16@GJXAIOU",[[1,9336,"作业视频（）"]],[9336,9336],[9342,9342]]],[1540736772299,["gjx16@GJXAIOU",[[1,9341,"中"]],[9341,9341],[9342,9342]]],[1540736775819,["gjx16@GJXAIOU",[[1,9343,"第五分钟"]],[9343,9343],[9347,9347]]]],null,"gjx16@GJXAIOU"],["5f225b27-8da4-4feb-88d2-045020fedcda",1540776596957,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量\n将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变** \n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值（指向），但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char *const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 二、指针作为函数参数\n\n\n### （一）值传递（形参的修改不会影响到实参的值）\n例子：（这里main函数中的p和getMem函数中的p未建立对应关系）\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n\n---\n**1.二级指针做函数参数输出特性**\n```c\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;//即是将tmp赋值给p指向的内存空间\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;//这时候并没有分配内存\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}\n```\n程序运行结果：\n`p = abdakg`\n程序运行对应的内存四区图\n![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)\n\n---\n\n## 指针数组的使用\n\n**1.定义指针：**\n**指针数组的本质：** 是一个数组，只是每一个元素都是指针char *\n\n- 第一种内存模型\n```c\nchar *p1 = \"dkfjdksjf\";\nchar *p2 = \"djfdkshfa\";\nchar *p3 = \"dkfjaioerio\";\n//若简化定义一系列定义，可使用指针数组\n\nchar *p[] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\nint  n = sizoeof(p) /sizeof(p[0]);\n//这种方法只能是没有定义数组长度的时候使用，以下方法就不能使用\n//char *p[10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\n//printf(\"sizeof(p) = %d,sizeof(p[0]) = %d\\n\",sizeof(p),sizeof(p[0]));\n//输出结果为：40和4（因为32位系统中指针占4个字节）\n\n\n\n//打印方式\n int i = 0;\n for(i = 0; i < n ; i++)\n   {\n       printf(\"%s\\n\",p[i]);\n   }\n```\n内存四区图：\n\n![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**2.排序：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid print_array(char *p[], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\t\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p,n);\n\t\n\tsort_array(p,n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n程序运行结果；\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**3.实参与形参传值参数的定义方法：**\n即形参应该怎么写\n例子1：\n```c\nvoid array(char a[]//或者char *a)\nint main()\n{\n   char p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n```\n\n例子2：\n```c\nvoid array(char *a[]//或者char **a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n\n```\n\n\n## 三、二维数组的使用\n\n**1.一维数组 的地址**\n```c\nchar a[10] = \"dkfjdkfj\";\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);//&a表示整个一维数组的地址，a表示首元素的地址\n//结果示例：1 ，2，1，11\n\n\n\nint i = 0;\nfor(i = 0; i < 10; i++)\n{\n  printf(\"%s\\n\",a[i]);//这里的a[i] 等于 a+i  或者 *(a+i),因为这里的首行地址和首元素地址是一样的\n}\n\n\n\n\nchar a[4][30]= {\"sfdsfaf\",\"dfdgdfgre\",\"dfdogio\"};\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);\n//结果示例：1，31,1,120\n\n\n```\n\n\n**2.将二维数组排序打印输出：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n\n程序运行结果：\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**二级指针第三种内存模型**\n分配在堆区\n\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}\n```\n二级指针的第三种内存模型为：\n\n![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)\n\n\n**将上面的程序进行函数封装：**\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nchar *getMem(int n)\n{\n\tint i = 0;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \", buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\t}\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;\n\treturn 0;\n}\n```\n程序运行结果为：\n`test00, test11, test22,`\n\n\n## 作业\n\n1.**作业1：**\n已知：`char buf[] = “abcdef”`,下面表达式的区别？\n- `const char *p = buf`\n- `char const *p = buf`\n- `char *const p = buf`\n- `const char *const  *p = buf`\n\n2.**求下列表达式的值：**\n- `char *p1[] = {“1111”,“2222”,“3333”};`\n   `sizeof(p1) /sizeof(p1[0])`= 3*4 （指针占4个字节）/ 4 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p1[] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p1), sizeof(p1[0]), sizeof(p1) / sizeof(p1[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：12，4, 3\n\n- `char *p2[10] = {“1111”,“2222”,“3333”};`\n   `sizeof(p2) /sizeof(p2[0])`= 10*4 /4 = 10;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p2[10] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p2), sizeof(p2[0]), sizeof(p2) / sizeof(p2[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n//结果：40,4,10\n\n- `char p3[][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p3) /sizeof(p3[0])`=  3*30 / 30 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p3[][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p3), sizeof(p3[0]), sizeof(p3) / sizeof(p3[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：90,30,3\n\n\n- `char p4[10][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p4) /sizeof(p4[0])`= 10*30 /30 = 10;\n\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p4[10][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p4), sizeof(p4[0]), sizeof(p4) / sizeof(p4[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：300,30,10\n\n----\n\n3.`char buf[][30] = {“1111”,“2222”,“3333”};`\n二维数组做参数的时候，为什么不能写成`void fun(char **buf);`\n为什么可以写成：`void fun(char buf[][30])`\n\n因为第一个的buf +1的步长为4，而原来的+1步长为30；\n\n---\n\n4.//画出三种二级指针内存模型图\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};//三个元素，每个占四个字节\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n![作业四：三种二级指针内存模型图]($resource/%E4%BD%9C%E4%B8%9A%E5%9B%9B%EF%BC%9A%E4%B8%89%E7%A7%8D%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n~~作业视频（中）第五分钟~~\n```python\n  /*\n有字符串有以下特征（\"abcd11111abcd222222abcdqqqqqqqq\"）,请写一个函数接口，输出一下结果：\n把字符串替换为（dcba11111dcba222222dcbaqqqqqqqq），并把结果传出\n要求：\n1.正确实现接口和功能\n2.编写测试用例\n\nsrc: 原字符串\ndst:生成的或需要填充的字符串\nsub:需要查找的字符串\nnew_sub :替换的新字符串\n\nreturn : 0 成功\n\t\t-1 失败\n\n*/\n```\n\n\n```python\n/*\n有一个字符串符合以下特征（\"abcdef\",acccd,eeee,aaaa,e3eeee,ssss\"）\n写两个函数（API），输出以下结果：\n第一个API（第二种内存模型：二维数组）\n- 以逗号分割字符串，形成二维数组，并把结果传出\n- 把二维数组行数运算结果也传出\nint spitString(const char *str ,char c,char buf[10][30] ,int *count);   //in\n\n\n第二个API（第三种内存模型：动态生成二维内存）\n- 以逗号分隔字符串，形成一个二级指针；\n- 把一共拆分多少行字符串个数传出；\nint spitString2(const char *str ,char c,char **myp ,int *count);   //in\n\n\n\n要求：\n- 能正确表达功能的要求，定义出接口\n- 正确实现接口和功能\n- 编写正确的测试用例\n\n*/\n\n```\n\n",[[1540776558449,["gjx16@GJXAIOU",[[1,6329,"分别"]],[6329,6329],[6331,6331]]],[1540776563867,["gjx16@GJXAIOU",[[-1,6329,"分别"]],[6331,6331],[6329,6329]]],[1540776662323,["gjx16@GJXAIOU",[[-1,9361," "],[1,9365,""],[-1,9582,""],[1,9584,"\n\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\nint replaceSubstr(char *src, char **dst, char *sub, char *new_sub)/*in ,out ,in,in*/\n{\n\tif (src == NULL || dst == NULL || sub == NULL || new_sub == NULL)\n\t{\n\t\treturn -1;\n\t\t\n\t}\n\t/*\n\tsrc = \"dddabcd11111abcd222222abcdqqqqqqqq\"\n\tsub = \"abcd\"\n\tnew_sub = \"lalalala\"\n\t\n\t\n\t*/\n\n\tchar *start = src;\n\tchar *p;\n\tchar tmp[512] = { 0 };\n\tint len = 0;\n\n\tdo\n\t{\n\t\tp = strstr(start, sub);\n\t\tif (p != NULL)\n\t\t{\n\t\t\tlen = 0;\n\t\t\tlen = p - start;\n\n\t\t\tif (len > 0)\n\t\t\t{\n\t\t\t\tstrcat(tmp, start, len);//tmp = \"ddd\"\n\n\t\t\t}\n\n\t\t\tstrncat(tmp, new_sub, strlen(new_sub));//tmp = \"dddlalala\"\n\n\t\t\t//重新设置起点位置\n\t\t\tstart = p + strlen(sub);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstrcat(tmp, start);\n\t\t\tbreak;\n\t\t}\n\t\t}while (*start != '\\0');//start[i] != 0\n\t\tchar *buf = (char *)malloc(strlen(tmp) + 1);\n\t\tstrcpy(buf, tmp);\n\n\t\t//间接赋值是指针存在的最大意义\n\t\t*dst = buf;\n\n\n\n\treturn 0;\n}\n\nvoid freeBuf(char *buf)\n{\n\t\tfree(buf);\n\t\tbuf = NULL;\n}\n\n\nint main(void)\n{\n\tchar *p = \"dddabcd11111abcd222222abcdqqqqqqqq\";\n\tchar *buf = NULL;//在replaceSubstr函数里面分配空间\n\tint ret = 0;\n\n\tret = replaceSubstr(p, &buf, \"abcd\", \"lalalala\");\n\t\n\tif (ret != 0)\n\t{\n\t\tprintf(\"replaceSubstr err :%d \\n\", ret);\n\t\tsystem(\"pause\");\n\t\treturn ret;\n\t}\n\n\tprintf(\"p = %s\\n\", p);\n\tprintf(\"buf = %s\\n\", buf);\n\n\tif(buf != NULL)\n\t{\n\t\tfreeBuf(buf);\n\t}\n\tbuf = NULL;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n"]],[9361,9584],[10935,10935]]],[1540776669740,["gjx16@GJXAIOU",[[-1,9334,"~~作业视频（中）第五分钟~~"]],[9334,9349],[9334,9334]]],[1540776695678,["gjx16@GJXAIOU",[[-1,9334,"\n"],[1,9335,"*"]],[9334,9334],[9335,9335]]],[1540776695850,["gjx16@GJXAIOU",[[-1,9335,"`"],[1,9336,"*"]],[9335,9335],[9336,9336]]],[1540776698504,["gjx16@GJXAIOU",[[-1,9334,"**"]],[9336,9336],[9334,9334]]],[1540776699009,["gjx16@GJXAIOU",[[-1,9333,"\n"]],[9334,9334],[9333,9333]]],[1540776701042,["gjx16@GJXAIOU",[[1,9333,"\n"]],[9333,9333],[9334,9334]]],[1540776701425,["gjx16@GJXAIOU",[[1,9334,"**"]],[9334,9334],[9336,9336]]],[1540776702257,["gjx16@GJXAIOU",[[1,9335,"`"],[-1,9335,"*"]],[9336,9336],[9335,9335]]],[1540776702790,["gjx16@GJXAIOU",[[1,9334,"\n"],[-1,9334,"*"]],[9335,9335],[9334,9334]]],[1540776706062,["gjx16@GJXAIOU",[[-1,9334,"\n"],[1,9335,"作业"]],[9334,9334],[9336,9336]]],[1540776706997,["gjx16@GJXAIOU",[[-1,9334,"作业"]],[9336,9336],[9334,9334]]],[1540776707243,["gjx16@GJXAIOU",[[-1,9333,"\n"]],[9334,9334],[9333,9333]]],[1540776710723,["gjx16@GJXAIOU",[[1,9333,"\n"]],[9332,9332],[9333,9333]]],[1540776711531,["gjx16@GJXAIOU",[[1,9334,"\n"]],[9333,9333],[9334,9334]]],[1540776712887,["gjx16@GJXAIOU",[[-1,9334,"\n"],[1,9335,"*"]],[9334,9334],[9335,9335]]],[1540776713038,["gjx16@GJXAIOU",[[-1,9335,"`"],[1,9336,"*"]],[9335,9335],[9336,9336]]],[1540776717276,["gjx16@GJXAIOU",[[1,9335,"`"],[-1,9335,"*"]],[9336,9336],[9335,9335]]],[1540776717657,["gjx16@GJXAIOU",[[1,9334,"\n"],[-1,9334,"*"]],[9335,9335],[9334,9334]]],[1540776719202,["gjx16@GJXAIOU",[[1,9335,"\n"]],[9334,9334],[9335,9335]]],[1540776721039,["gjx16@GJXAIOU",[[-1,9334,"\n"],[1,9335,"*"]],[9334,9334],[9335,9335]]],[1540776721219,["gjx16@GJXAIOU",[[1,9335,"***"]],[9335,9335],[9336,9336]]],[1540776723857,["gjx16@GJXAIOU",[[-1,9336,"**"],[1,9338,"作业"]],[9336,9336],[9338,9338]]],[1540776726819,["gjx16@GJXAIOU",[[1,9338,"5**"]],[9338,9338],[9341,9341]]],[1540776733850,["gjx16@GJXAIOU",[[-1,9345,"python"]],[9351,9351],[9345,9345]]],[1540776737655,["gjx16@GJXAIOU",[[1,9345,"c"]],[9345,9345],[9346,9346]]],[1540776746961,["gjx16@GJXAIOU",[[-1,10932,"python"]],[10937,10937],[10932,10932]]],[1540776747860,["gjx16@GJXAIOU",[[1,10932,"c"]],[10932,10932],[10933,10933]]],[1540776752765,["gjx16@GJXAIOU",[[-1,10927,"\n"],[1,10928,"*"]],[10927,10927],[10928,10928]]],[1540776752957,["gjx16@GJXAIOU",[[1,10928,"***"]],[10928,10928],[10929,10929]]],[1540776753781,["gjx16@GJXAIOU",[[-1,10929,"*"],[1,10930,"z"]],[10929,10929],[10930,10930]]],[1540776754463,["gjx16@GJXAIOU",[[1,10930,"uoye"]],[10930,10930],[10934,10934]]],[1540776758713,["gjx16@GJXAIOU",[[-1,10928,"*zuoye*"]],[10934,10934],[10927,10927]]],[1540776760257,["gjx16@GJXAIOU",[[-1,10927,"*"]],[10928,10928],[10927,10927]]],[1540776761369,["gjx16@GJXAIOU",[[-1,10927,"\n"],[1,10928,"*"]],[10927,10927],[10928,10928]]],[1540776761515,["gjx16@GJXAIOU",[[-1,10928,"`"],[1,10929,"*"]],[10928,10928],[10929,10929]]],[1540776764861,["gjx16@GJXAIOU",[[1,10928,"`"],[-1,10928,"*"]],[10929,10929],[10928,10928]]],[1540776765519,["gjx16@GJXAIOU",[[1,10927,"\n"],[-1,10927,"*"]],[10928,10928],[10927,10927]]],[1540776766996,["gjx16@GJXAIOU",[[1,10928,"\n"]],[10927,10927],[10928,10928]]],[1540776770830,["gjx16@GJXAIOU",[[-1,10927,"\n"],[1,10928,"*"]],[10927,10927],[10928,10928]]],[1540776771015,["gjx16@GJXAIOU",[[1,10928,"***"]],[10928,10928],[10929,10929]]]],null,"gjx16@GJXAIOU"],["fada51e4-be34-4382-a6d7-6d5c9a01c59f",1540777213900,"# day03二级指针二维数组\n\n\n## 一、const\n- 修饰变量\n将变量变为只读，不能更改，所以定义的时候必须初始化\n```c\nconst int a = 10;\na = 100;//error\n```\n可以使用指针修改：\n```c\nconst int a = 10;\nint *p = &a;\n*p = 22;\n```\n- 修饰指针\n**从左往右看,跳过类型,看const修饰哪一个字符，如果是`*`,则表示指针指向的内存不能改变,如果是指针变量,则表示指针的指向不能改变,即指针的值不能改变** \n  - 指向的内存不能变\n```c\nchar buf[100] = \"akldfjksdjgf\";\nconst char *p = buf;\n//等价于：char const *p = buf;\n//只能更改指针值（指向），但是指向的内存数据不能更改\n\n```\n\n  - 指向不能变\n\n```c\nchar *const p2 = buf;\np2[2] = '4';//这是可以的，但是不能改变指针的值 \n```\n\n  - 指向和值都不能改\n```c\nconst char *const p3 = buf;\n//指针的值和指向的内存的值都是不可更改\n```\n\n注；**如何引入外部文件定义的const变量（同一个项目中的不同c文件）**\n例子：在a.c中定义：`const int a = 10;`\n在b.c中定义使用：`extern const int a;`//只能声明，不能在进行赋值\n\n\n\n\n\n## 二、指针作为函数参数\n\n\n### （一）值传递（形参的修改不会影响到实参的值）\n例子：（这里main函数中的p和getMem函数中的p未建立对应关系）\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char *p)\n{\n\tp = (char *)malloc(sizeof(char) * 100);\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\tstrcpy(p ,\"abdakg\");\n\tprintf(\"p = %s\\n\",p );\n\treturn 0;\n}\n\n\nint main(void)\n{\n\tchar *p = NULL;\n\tint ret = 0;\n\tret = getMem(p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\",ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\",p);\n}\n```\n程序运行结果：\n`p = abdakg`\n`p = (null)`\n程序运行内存四区图：\n![程序运行内存四区图]($resource/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%9B%E5%8C%BA%E5%9B%BE.png)\n\n\n---\n**1.二级指针做函数参数输出特性**\n```c\n\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#pragma warning(disable:4996)\n\nint getMem(char **p)\n{\n\tif (p == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tchar *tmp = (char *)malloc(sizeof(char) * 100);\n\tif (tmp == NULL)\n\t{\n\t\treturn -2;\n\t}\n\tstrcpy(tmp, \"abdakg\");\n\t*p = tmp;//即是将tmp赋值给p指向的内存空间\n\treturn 0;\n}\n\nint main(void)\n{\n\tchar *p = NULL;//这时候并没有分配内存\n\tint ret = 0;\n\tret = getMem(&p);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"getMem err: %d\\n\", ret);\n\t\treturn ret;\n\t}\n\tprintf(\"p = %s\\n\", p);\n\tif (p != NULL)\n\t{\n\t\tfree(p);\n\t\tp = NULL;\n\n\t}\n\treturn 0;\n}\n```\n程序运行结果：\n`p = abdakg`\n程序运行对应的内存四区图\n![二级指针做参数输出]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%81%9A%E5%8F%82%E6%95%B0%E8%BE%93%E5%87%BA.png)\n\n---\n\n## 指针数组的使用\n\n**1.定义指针：**\n**指针数组的本质：** 是一个数组，只是每一个元素都是指针char *\n\n- 第一种内存模型\n```c\nchar *p1 = \"dkfjdksjf\";\nchar *p2 = \"djfdkshfa\";\nchar *p3 = \"dkfjaioerio\";\n//若简化定义一系列定义，可使用指针数组\n\nchar *p[] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\nint  n = sizoeof(p) /sizeof(p[0]);\n//这种方法只能是没有定义数组长度的时候使用，以下方法就不能使用\n//char *p[10] = {\"dkfjdksjf\",\"djfdkshfa\",\"dkfjaioerio\"};\n//printf(\"sizeof(p) = %d,sizeof(p[0]) = %d\\n\",sizeof(p),sizeof(p[0]));\n//输出结果为：40和4（因为32位系统中指针占4个字节）\n\n\n\n//打印方式\n int i = 0;\n for(i = 0; i < n ; i++)\n   {\n       printf(\"%s\\n\",p[i]);\n   }\n```\n内存四区图：\n\n![第一种内存模型图]($resource/%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**2.排序：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid print_array(char *p[], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\nvoid  sort_array(char **p,int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint *tmp = NULL;\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\ttmp = p[i];\n\t\t\t\tp[i] = p[j];\n\t\t\t\tp[j] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nint main(void)\n{\n\tchar *p[] = {\"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\"};\n\n\tint  n = sizeof(p) / sizeof(p[0]);\n\t\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p,n);\n\t\n\tsort_array(p,n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n程序运行结果；\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**3.实参与形参传值参数的定义方法：**\n即形参应该怎么写\n例子1：\n```c\nvoid array(char a[]//或者char *a)\nint main()\n{\n   char p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n```\n\n例子2：\n```c\nvoid array(char *a[]//或者char **a)\nint main()\n{\n   char *p[] = {\"1111\",\"4444\",\"aaaa\",\"0000\"};\n   array(p);\n}\n\n```\n\n\n## 三、二维数组的使用\n\n**1.一维数组 的地址**\n```c\nchar a[10] = \"dkfjdkfj\";\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);//&a表示整个一维数组的地址，a表示首元素的地址\n//结果示例：1 ，2，1，11\n\n\n\nint i = 0;\nfor(i = 0; i < 10; i++)\n{\n  printf(\"%s\\n\",a[i]);//这里的a[i] 等于 a+i  或者 *(a+i),因为这里的首行地址和首元素地址是一样的\n}\n\n\n\n\nchar a[4][30]= {\"sfdsfaf\",\"dfdgdfgre\",\"dfdogio\"};\nprintf(\"%d,%d,%d,%d\\n\",a,a+1,&a,&a+1);\n//结果示例：1，31,1,120\n\n\n```\n\n\n**2.将二维数组排序打印输出：**\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nvoid print_array(char p[][30], int n)\n//或者void print_array(char **p,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\n\t\tprintf(\"%s ,\", p[i]);\n\t}\n\tprintf(\"\\n\");\n\n}\n\n\nvoid  sort_array(char p[4][30], int n)\n{\n\tint i = 0;\n\tint j = 0;\n\tint tmp[30] = {0};\n\n\t//选择法排序\n\tfor (i = 0; i < n - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (strcmp(p[i], p[j]) > 0)\n\t\t\t{\n\t\t\t\t//不能使用指针，只能交换内存块\n\t\t\t\tstrcpy(tmp,p[i]);\n\t\t\t\tstrcpy(p[i],p[j]);\n\t\t\t\tstrcpy(p[j],tmp);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tchar p[4][30] = { \"1111111\",\"44444444\",\"aaaaaaaaaa\",\"00000000\" };\n\n\tint  n = sizeof(p) / sizeof(p[0]);//结果应该是4\n\n\tprintf(\"shuruqianshuzu:\");\n\n\tprint_array(p, n);\n\n\tsort_array(p, n);\n\n\tprintf(\"paixuzhihou:\");\n\tprint_array(p, n);\n\n\treturn 0;\n}\n\n```\n\n程序运行结果：\n`shuruqianshuzu:1111111 ,44444444 ,aaaaaaaaaa ,00000000 ,`\n`paixuzhihou:00000000 ,1111111 ,44444444 ,aaaaaaaaaa ,`\n\n\n**二级指针第三种内存模型**\n分配在堆区\n\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nint main(void)\n{\n\t//只有一个指针的情况下进行分配堆区\n\tchar *p0 = NULL;\n\tp0 = (char *)malloc(sizeof(char) * 100);\n\tstrcpy(p0,\"sfjkdjfkld\");\n\n\n\t//如果有10个同类型的指针进行分配堆区\n\tint i = 0;\n\tchar *p[10] = { 0 };\n\tfor (i = 0; i < 10; i++)\n\t{\n\t\tp[i] = (char *)malloc(sizeof(char) * 100);\n\t\tstrcpy(p[i], \"sdfkdjsfk\");\n\t}\n\t\n\t\n\t//数组\n\tint a[10];\n\tint *q = (int *)malloc(10 * sizeof(int));//q[10]\n\n\n\t//动态分配一个数组，每个元素都是char *\n\tint n = 10;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \",buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t}\n\treturn 0;\n}\n```\n二级指针的第三种内存模型为：\n\n![二级指针的第三种内存类型]($resource/%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B.png)\n\n\n**将上面的程序进行函数封装：**\n```c\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\n\nchar *getMem(int n)\n{\n\tint i = 0;\n\tchar **buf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30 * sizeof(char));\n\t\tchar str[30];\n\t\tsprintf(str, \"test%d%d\", i, i);\n\t\tstrcpy(buf[i], str);\n\t}\n\treturn buf;\n}\n\nvoid print_buf(char **buf,int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s, \", buf[i]);\n\t}\n\n\tprintf(\"\\n\");\n}\n\nvoid free_buf(char **buf, int n)\n{\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\t}\n\n}\n\nint main(void)\n{\n\tchar **buf = NULL;\n\tint n = 3;\n\tbuf = getMem(n);\n\tif (buf == NULL)\n\t{\n\t\tprintf(\"getMem err\\n\");\n\t\treturn -1;\n\t}\n\n\tprint_buf(buf,n);\n\tfree_buf(buf, n);\n\tbuf = NULL;\n\treturn 0;\n}\n```\n程序运行结果为：\n`test00, test11, test22,`\n\n\n## 作业\n\n1.**作业1：**\n已知：`char buf[] = “abcdef”`,下面表达式的区别？\n- `const char *p = buf`\n- `char const *p = buf`\n- `char *const p = buf`\n- `const char *const  *p = buf`\n\n2.**求下列表达式的值：**\n- `char *p1[] = {“1111”,“2222”,“3333”};`\n   `sizeof(p1) /sizeof(p1[0])`= 3*4 （指针占4个字节）/ 4 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p1[] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p1), sizeof(p1[0]), sizeof(p1) / sizeof(p1[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：12，4, 3\n\n- `char *p2[10] = {“1111”,“2222”,“3333”};`\n   `sizeof(p2) /sizeof(p2[0])`= 10*4 /4 = 10;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar *p2[10] = {\"1111\",\"2222\",\"3333\"}; \n\tprintf(\"%d,%d,%d\\n\", sizeof(p2), sizeof(p2[0]), sizeof(p2) / sizeof(p2[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n\n```\n//结果：40,4,10\n\n- `char p3[][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p3) /sizeof(p3[0])`=  3*30 / 30 = 3;\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p3[][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p3), sizeof(p3[0]), sizeof(p3) / sizeof(p3[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：90,30,3\n\n\n- `char p4[10][30] = {“1111”,“2222”,“3333”};`\n   `sizeof(p4) /sizeof(p4[0])`= 10*30 /30 = 10;\n\n```c\n#include<stdio.h>\n\nint main(void)\n{\n\tchar p4[10][30] = { \"1111\",\"2222\",\"3333\" };\n\tprintf(\"%d,%d,%d\\n\", sizeof(p4), sizeof(p4[0]), sizeof(p4) / sizeof(p4[0]));\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n//结果：300,30,10\n\n----\n\n3.`char buf[][30] = {“1111”,“2222”,“3333”};`\n二维数组做参数的时候，为什么不能写成`void fun(char **buf);`\n为什么可以写成：`void fun(char buf[][30])`\n\n因为第一个的buf +1的步长为4，而原来的+1步长为30；\n\n---\n\n4.//画出三种二级指针内存模型图\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main(void)\n{\n\t//指针数组\n\tchar *p1[] = {\"123\",\"456\",\"789\"};//三个元素，每个占四个字节\n\n\t//二维数组\n\tchar p2[3][4] = { \"123\",\"456\",\"789\" };\n\n\t//手工二维内存\n\tchar **p3 = (char **)malloc(3 * sizeof(char *));//char *array[3];\n\n\tint i = 0;\n\tfor (i = 0; i < 3; i++)\n\t{\n\t\tp3[i] = (char  *)malloc(10 * sizeof(char));//char buf[10]\n\t\tsprintf(p3[i], \"%d%d%d\", i, i, i);\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n![作业四：三种二级指针内存模型图]($resource/%E4%BD%9C%E4%B8%9A%E5%9B%9B%EF%BC%9A%E4%B8%89%E7%A7%8D%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%9B%BE.png)\n\n\n**作业5**\n```c\n /*\n有字符串有以下特征（\"abcd11111abcd222222abcdqqqqqqqq\"）,请写一个函数接口，输出一下结果：\n把字符串替换为（dcba11111dcba222222dcbaqqqqqqqq），并把结果传出\n要求：\n1.正确实现接口和功能\n2.编写测试用例\n\nsrc: 原字符串\ndst:生成的或需要填充的字符串\nsub:需要查找的字符串\nnew_sub :替换的新字符串\n\nreturn : 0 成功\n\t\t-1 失败\n\n*/\n\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\nint replaceSubstr(char *src, char **dst, char *sub, char *new_sub)/*in ,out ,in,in*/\n{\n\tif (src == NULL || dst == NULL || sub == NULL || new_sub == NULL)\n\t{\n\t\treturn -1;\n\t\t\n\t}\n\t/*\n\tsrc = \"dddabcd11111abcd222222abcdqqqqqqqq\"\n\tsub = \"abcd\"\n\tnew_sub = \"lalalala\"\n\t\n\t\n\t*/\n\n\tchar *start = src;\n\tchar *p;\n\tchar tmp[512] = { 0 };\n\tint len = 0;\n\n\tdo\n\t{\n\t\tp = strstr(start, sub);\n\t\tif (p != NULL)\n\t\t{\n\t\t\tlen = 0;\n\t\t\tlen = p - start;\n\n\t\t\tif (len > 0)\n\t\t\t{\n\t\t\t\tstrcat(tmp, start, len);//tmp = \"ddd\"\n\n\t\t\t}\n\n\t\t\tstrncat(tmp, new_sub, strlen(new_sub));//tmp = \"dddlalala\"\n\n\t\t\t//重新设置起点位置\n\t\t\tstart = p + strlen(sub);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstrcat(tmp, start);\n\t\t\tbreak;\n\t\t}\n\t\t}while (*start != '\\0');//start[i] != 0\n\t\tchar *buf = (char *)malloc(strlen(tmp) + 1);\n\t\tstrcpy(buf, tmp);\n\n\t\t//间接赋值是指针存在的最大意义\n\t\t*dst = buf;\n\n\n\n\treturn 0;\n}\n\nvoid freeBuf(char *buf)\n{\n\t\tfree(buf);\n\t\tbuf = NULL;\n}\n\n\nint main(void)\n{\n\tchar *p = \"dddabcd11111abcd222222abcdqqqqqqqq\";\n\tchar *buf = NULL;//在replaceSubstr函数里面分配空间\n\tint ret = 0;\n\n\tret = replaceSubstr(p, &buf, \"abcd\", \"lalalala\");\n\t\n\tif (ret != 0)\n\t{\n\t\tprintf(\"replaceSubstr err :%d \\n\", ret);\n\t\tsystem(\"pause\");\n\t\treturn ret;\n\t}\n\n\tprintf(\"p = %s\\n\", p);\n\tprintf(\"buf = %s\\n\", buf);\n\n\tif(buf != NULL)\n\t{\n\t\tfreeBuf(buf);\n\t}\n\tbuf = NULL;\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}\n\n```\n****\n```c\n/*\n有一个字符串符合以下特征（\"abcdef\",acccd,eeee,aaaa,e3eeee,ssss\"）\n写两个函数（API），输出以下结果：\n第一个API（第二种内存模型：二维数组）\n- 以逗号分割字符串，形成二维数组，并把结果传出\n- 把二维数组行数运算结果也传出\nint spitString(const char *str ,char c,char buf[10][30] ,int *count);   //in\n\n\n第二个API（第三种内存模型：动态生成二维内存）\n- 以逗号分隔字符串，形成一个二级指针；\n- 把一共拆分多少行字符串个数传出；\nint spitString2(const char *str ,char c,char **myp ,int *count);   //in\n\n\n\n要求：\n- 能正确表达功能的要求，定义出接口\n- 正确实现接口和功能\n- 编写正确的测试用例\n\n*/\n\n```\n\n",[[1540777172571,["gjx16@GJXAIOU",[[-1,10927,"****"]],[10931,10931],[10927,10927]]],[1540777174274,["gjx16@GJXAIOU",[[1,10927,"****"]],[10927,10927],[10929,10929]]],[1540777188728,["gjx16@GJXAIOU",[[1,10929,"作业六："]],[10929,10929],[10933,10933]]],[1540777193156,["gjx16@GJXAIOU",[[1,10927,"\n"]],[10927,10927],[10928,10928]]],[1540777193282,["gjx16@GJXAIOU",[[1,10928,"\n"]],[10928,10928],[10929,10929]]],[1540777200897,["gjx16@GJXAIOU",[[1,9341," ~~~~"]],[9341,9341],[9344,9344]]],[1540777212473,["gjx16@GJXAIOU",[[1,9344,"程序有点问题，输出结果与"]],[9344,9344],[9356,9356]]],[1540777220987,["gjx16@GJXAIOU",[[1,9356,"预期不同"]],[9356,9356],[9360,9360]]],[1540781211419,["gjx16@GJXAIOU",[[-1,10987,"\""],[1,11019,""],[-1,11368,""],[1,11370,"\n\n\n\n\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\nint spitString(const char *str, char c, char buf[10][30], int *count)\n{\n\tif (str == NULL || count == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tconst char *start = str;\n\tchar *p = NULL;\n\tint i = 0;\n\n\tdo\n\t{\n\t\tp = strchr(start, c);\n\t\tif (p != NULL)\n\t\t{\n\t\t\tint len = p - start;\n\t\t\tstrcpy(buf[i], start, len);\n\t\t\t//结束符\n\t\t\tbuf[i][len] = 0;\n\n\t\t\ti++;\n\n\t\t\t//重新设置起点位置\n\n\t\t\tstart = p + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\n\t\t}\n\n\t} while (*start != 0);\n\n\tif (i == 0)\n\t{\n\t\treturn -2;\n\t}\n\n\t*count = i;\n\n\treturn 0;\n\n\n\n}\n\n\nint main(void)\n{\n\tconst char *p = \"abcdef,acccd,eeee,aaaa,e3eeee,ssss\";\n\tchar buf[10][30] = { 0 };\n\tint n = 0;\n\tint  i = 0;\n\tint ret = 0;\n\tret = spitString(p, ',', buf, &n);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"spitString err : %d\\n\", ret);\n\t\tsystem(\"pause\");\n\t\treturn ret;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s\\n\", buf[i]);\n\n\t}\n\tprintf(\"\\n\");\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[10964,11370],[12297,12297]]],[1540781219416,["gjx16@GJXAIOU",[[1,11372,"、、"]],[11372,11372],[11374,11374]]],[1540781220544,["gjx16@GJXAIOU",[[-1,11372,"、、"]],[11374,11374],[11372,11372]]],[1540781221283,["gjx16@GJXAIOU",[[1,11372,"//"]],[11372,11372],[11374,11374]]],[1540781224376,["gjx16@GJXAIOU",[[1,11374,"zhe"]],[11374,11374],[11377,11377]]],[1540781225234,["gjx16@GJXAIOU",[[-1,11374,"zhe"]],[11377,11377],[11374,11374]]],[1540781228711,["gjx16@GJXAIOU",[[1,11374,"这是一个"]],[11374,11374],[11378,11378]]],[1540781230350,["gjx16@GJXAIOU",[[-1,11376,"一个"]],[11378,11378],[11376,11376]]],[1540781236983,["gjx16@GJXAIOU",[[1,11376,"第一个API"]],[11376,11376],[11382,11382]]],[1540781242893,["gjx16@GJXAIOU",[[1,12314,"\n"]],[12312,12312],[12313,12313]]],[1540781243049,["gjx16@GJXAIOU",[[1,12315,"\n"]],[12313,12313],[12314,12314]]],[1540781244499,["gjx16@GJXAIOU",[[1,12314,"****"]],[12314,12314],[12316,12316]]],[1540781249923,["gjx16@GJXAIOU",[[1,12316,"第二个API"]],[12316,12316],[12322,12322]]],[1540781252109,["gjx16@GJXAIOU",[[1,12326,"\n"]],[12324,12324],[12325,12325]]],[1540782779281,["gjx16@GJXAIOU",[[1,12325,"···"]],[12325,12325],[12328,12328]]],[1540782780707,["gjx16@GJXAIOU",[[-1,12325,"···"]],[12328,12328],[12325,12325]]],[1540782782729,["gjx16@GJXAIOU",[[1,12325,"```"]],[12325,12325],[12328,12328]]],[1540782782821,["gjx16@GJXAIOU",[[1,12328,"language\n```\n"]],[12328,12328],[12328,12336]]],[1540782784335,["gjx16@GJXAIOU",[[-1,12328,"language"],[1,12336,"c"]],[12328,12336],[12329,12329]]],[1540782784618,["gjx16@GJXAIOU",[[1,12330,"\n"]],[12329,12329],[12330,12330]]],[1540782785058,["gjx16@GJXAIOU",[[1,12331,"\n"]],[12330,12330],[12331,12331]]],[1540782785842,["gjx16@GJXAIOU",[[1,12331,"/*\n有一个字符串符合以下特征（\"abcdef,acccd,eeee,aaaa,e3eeee,ssss\"）\n写两个函数（API），输出以下结果：\n第一个API（第二种内存模型：二维数组）\n- 以逗号分割字符串，形成二维数组，并把结果传出\n- 把二维数组行数运算结果也传出\nint spitString(const char *str ,char c,char buf[10][30] ,int *count);   //in\n\n\n第二个API（第三种内存模型：动态生成二维内存）\n- 以逗号分隔字符串，形成一个二级指针；\n- 把一共拆分多少行字符串个数传出；\nint spitString2(const char *str ,char c,char **myp ,int *count);   //in\n\n\n\n要求：\n- 能正确表达功能的要求，定义出接口\n- 正确实现接口和功能\n- 编写正确的测试用例\n\n*/\n\n\n\n\n#include<stdio.h>\n#include<string.h>\n#pragma warning(disable:4996)\n\nint spitString(const char *str, char c, char **buf, int *count)\n{\n\tif (str == NULL || count == NULL)\n\t{\n\t\treturn -1;\n\t}\n\n\tconst char *start = str;\n\tchar *p = NULL;\n\tint i = 0;\n\n\tdo\n\t{\n\t\tp = strchr(start, c);\n\t\tif (p != NULL)\n\t\t{\n\t\t\tint len = p - start;\n\t\t\tstrcpy(buf[i], start, len);\n\t\t\t//结束符\n\t\t\tbuf[i][len] = 0;\n\n\t\t\ti++;\n\n\t\t\t//重新设置起点位置\n\n\t\t\tstart = p + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbreak;\n\n\t\t}\n\n\t} while (*start != 0);\n\n\tif (i == 0)\n\t{\n\t\treturn -2;\n\t}\n\n\t*count = i;\n\n\treturn 0;\n\n\n\n}\n\nchar **getMem(int n)\n{\n\tchar **buf = NULL;\n\tbuf = (char **)malloc(n * sizeof(char *));\n\tif (buf == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\n\tint i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tbuf[i] = (char *)malloc(30);\n\t}\n\treturn buf;\n}\n\n\n\n\n\n\nint main(void)\n{\n\tconst char *p = \"abcdef,acccd,eeee,aaaa,e3eeee,ssss\";\n\tchar **buf = NULL;\n\tint n = 0;\n\tint  i = 0;\n\tint ret = 0;\n\n\tbuf = getMem(6);//6个\n\n\tif (buf == NULL)\n\t{\n\n\t\treturn -1;\n\t}\n\n\tret = spitString(p, ',', buf, &n);\n\tif (ret != 0)\n\t{\n\t\tprintf(\"spitString err : %d\\n\", ret);\n\t\tsystem(\"pause\");\n\t\treturn ret;\n\t}\n\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%s\\n\", buf[i]);\n\n\t}\n\n\n\t//释放\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfree(buf[i]);\n\t\tbuf[i] = NULL;\n\n\n\t}\n\n\tif (buf != NULL)\n\t{\n\t\tfree(buf);\n\t\tbuf = NULL;\n\n\t}\n\n\tprintf(\"\\n\");\n\tsystem(\"pause\");\n\treturn 0;\n}"]],[12331,12331],[14063,14063]]],[1540782831208,["gjx16@GJXAIOU",[[1,11717,"n"]],[11717,11717],[11718,11718]]],[1540782842676,["gjx16@GJXAIOU",[[1,11832,"\n\t\t"]],[11829,11829],[11832,11832]]],[1540791942122,["gjx16@GJXAIOU",[[1,11832,"  strcpy()"]],[11832,11832],[11842,11842]]],[1540791953082,["gjx16@GJXAIOU",[[1,11841,"buf[i] ,start"]],[11841,11841],[11854,11854]]],[1540791957156,["gjx16@GJXAIOU",[[1,11855,";"]],[11855,11855],[11856,11856]]],[1540792108715,["gjx16@GJXAIOU",[[1,11859,"  \n\t\t"]],[11856,11856],[11861,11861]]],[1540792111773,["gjx16@GJXAIOU",[[1,11861,"i++;"]],[11861,11861],[11865,11865]]],[1540792115797,["gjx16@GJXAIOU",[[1,11861,"  "]],[11861,11861],[11863,11863]]],[1540792117111,["gjx16@GJXAIOU",[[1,11834,"  "]],[11834,11834],[11836,11836]]]],null,"gjx16@GJXAIOU"]]}