{"compress":true,"commitItems":[["884f7caa-703f-4e3a-ae03-d1925dd0d4c3",1536561629613,"",[[1536561590566,["gjx16@GJXAIOU",[[1,0,"# day6字符串\n\n\n\n"]],[0,0],[12,12]]],[1536561919767,["gjx16@GJXAIOU",[[1,9,"与字符数组"]],[9,9],[14,14]]],[1536561920308,["gjx16@GJXAIOU",[[1,18,"\n"]],[14,14],[15,15]]],[1536561922307,["gjx16@GJXAIOU",[[1,19,"\n"]],[15,15],[16,16]]],[1536561929081,["gjx16@GJXAIOU",[[1,16,"## 字符数组的定义"]],[16,16],[26,26]]],[1536561929657,["gjx16@GJXAIOU",[[1,30,"\n"]],[26,26],[27,27]]],[1536561930239,["gjx16@GJXAIOU",[[1,31,"\n"]],[27,27],[28,28]]],[1536561954741,["gjx16@GJXAIOU",[[1,28,"·"]],[28,28],[29,29]]],[1536561955336,["gjx16@GJXAIOU",[[-1,28,"·"]],[29,29],[28,28]]],[1536561957390,["gjx16@GJXAIOU",[[1,28,"```"]],[28,28],[31,31]]],[1536561957411,["gjx16@GJXAIOU",[[1,31,"language\n```\n"]],[31,31],[31,39]]],[1536561958578,["gjx16@GJXAIOU",[[-1,31,"language"],[1,39,"c"]],[31,39],[32,32]]],[1536561958783,["gjx16@GJXAIOU",[[1,33,"\n"]],[32,32],[33,33]]],[1536561963498,["gjx16@GJXAIOU",[[1,33,"int main()"]],[33,33],[43,43]]],[1536561964016,["gjx16@GJXAIOU",[[1,44,"\n"]],[43,43],[44,44]]],[1536561965237,["gjx16@GJXAIOU",[[1,44,"{}"]],[44,44],[46,46]]],[1536561966431,["gjx16@GJXAIOU",[[1,45,"\n"]],[45,45],[46,46]]],[1536561966593,["gjx16@GJXAIOU",[[1,46,"\n"]],[46,46],[47,47]]],[1536561967280,["gjx16@GJXAIOU",[[1,47,"\n"]],[47,47],[48,48]]],[1536561967489,["gjx16@GJXAIOU",[[1,48,"\n"]],[48,48],[49,49]]],[1536561971808,["gjx16@GJXAIOU",[[1,46,"  chao"]],[46,46],[52,52]]],[1536561972670,["gjx16@GJXAIOU",[[-1,51,"o"]],[52,52],[51,51]]],[1536561973657,["gjx16@GJXAIOU",[[1,51,"r"]],[51,51],[52,52]]],[1536562256343,["gjx16@GJXAIOU",[[1,47,"\n  "]],[47,47],[50,50]]],[1536562261923,["gjx16@GJXAIOU",[[1,47,"//chu"]],[47,47],[52,52]]],[1536562263010,["gjx16@GJXAIOU",[[-1,49,"chu"]],[52,52],[49,49]]],[1536562272114,["gjx16@GJXAIOU",[[1,49,"初始化的方法"]],[49,49],[55,55]]],[1536562288300,["gjx16@GJXAIOU",[[1,63," array[100] = {};"]],[63,63],[80,80]]],[1536562303217,["gjx16@GJXAIOU",[[1,78,"'a','b',;"]],[78,78],[87,87]]],[1536562304030,["gjx16@GJXAIOU",[[-1,86,";"]],[87,87],[86,86]]],[1536562312084,["gjx16@GJXAIOU",[[1,86,"'c;"]],[86,86],[89,89]]],[1536562313050,["gjx16@GJXAIOU",[[-1,88,";"]],[89,89],[88,88]]],[1536562320587,["gjx16@GJXAIOU",[[1,88,"','d',"]],[88,88],[94,94]]],[1536562321715,["gjx16@GJXAIOU",[[-1,93,","]],[94,94],[93,93]]],[1536562325576,["gjx16@GJXAIOU",[[1,96,"   \n"]],[95,95],[99,99]]],[1536562345115,["gjx16@GJXAIOU",[[1,95,"//fayi "]],[95,95],[102,102]]],[1536562346284,["gjx16@GJXAIOU",[[-1,97,"fayi "]],[102,102],[97,97]]],[1536562348834,["gjx16@GJXAIOU",[[1,97,"法一"]],[97,97],[99,99]]],[1536562354572,["gjx16@GJXAIOU",[[1,104,"   \n"]],[99,99],[103,103]]],[1536562381078,["gjx16@GJXAIOU",[[1,103,"char array[100] = \"abcd\";  、、"]],[103,103],[132,132]]],[1536562381894,["gjx16@GJXAIOU",[[-1,130,"、、"]],[132,132],[130,130]]],[1536562386807,["gjx16@GJXAIOU",[[1,130,"//法二"]],[130,130],[134,134]]],[1536562387711,["gjx16@GJXAIOU",[[1,139,"   \n"]],[134,134],[138,138]]],[1536562399716,["gjx16@GJXAIOU",[[-1,137," "]],[138,138],[137,137]]],[1536562402210,["gjx16@GJXAIOU",[[1,137,"cha"]],[137,137],[140,140]]],[1536562403234,["gjx16@GJXAIOU",[[-1,137,"cha"]],[140,140],[137,137]]],[1536562406431,["gjx16@GJXAIOU",[[1,137,"  char"]],[137,137],[143,143]]],[1536562408471,["gjx16@GJXAIOU",[[-1,138," char"]],[143,143],[138,138]]],[1536562409625,["gjx16@GJXAIOU",[[1,138,"c"]],[138,138],[139,139]]],[1536562419752,["gjx16@GJXAIOU",[[1,139,"har array[] = '"]],[139,139],[154,154]]],[1536562420869,["gjx16@GJXAIOU",[[-1,153,"'"]],[154,154],[153,153]]],[1536562425048,["gjx16@GJXAIOU",[[1,153,"\"\";"]],[153,153],[156,156]]],[1536562429046,["gjx16@GJXAIOU",[[1,154,"abd"]],[154,154],[157,157]]],[1536562429535,["gjx16@GJXAIOU",[[-1,156,"d"]],[157,157],[156,156]]],[1536562429963,["gjx16@GJXAIOU",[[1,156,"cd"]],[156,156],[158,158]]],[1536562435038,["gjx16@GJXAIOU",[[1,160,"//shu"]],[160,160],[165,165]]],[1536562436249,["gjx16@GJXAIOU",[[-1,162,"shu"]],[165,165],[162,162]]],[1536562448636,["gjx16@GJXAIOU",[[1,162,"数组根据后面的元素葛素"]],[162,162],[173,173]]],[1536562449331,["gjx16@GJXAIOU",[[-1,171,"葛素"]],[173,173],[171,171]]],[1536562463196,["gjx16@GJXAIOU",[[1,171,"个数自动分配空间"]],[171,171],[179,179]]],[1536562465158,["gjx16@GJXAIOU",[[1,184,"   \n"]],[179,179],[183,183]]],[1536562487174,["gjx16@GJXAIOU",[[-1,180,"   "],[1,183,"\n"]],[183,183],[181,181]]],[1536562496363,["gjx16@GJXAIOU",[[1,181,"  printf)("]],[181,181],[191,191]]],[1536562497454,["gjx16@GJXAIOU",[[-1,189,")("]],[191,191],[189,189]]],[1536562499306,["gjx16@GJXAIOU",[[1,189,"();"]],[189,189],[192,192]]],[1536562505380,["gjx16@GJXAIOU",[[1,190,"\"\""]],[190,190],[192,192]]],[1536562517681,["gjx16@GJXAIOU",[[1,69,"1"]],[69,69],[70,70]]],[1536562519423,["gjx16@GJXAIOU",[[1,114,"2"]],[114,114],[115,115]]],[1536562521568,["gjx16@GJXAIOU",[[1,150,"3"]],[150,150],[151,151]]],[1536562532580,["gjx16@GJXAIOU",[[1,194,"%d\\n"]],[194,194],[198,198]]],[1536562541444,["gjx16@GJXAIOU",[[1,199,",sizeof("]],[199,199],[207,207]]],[1536562541516,["gjx16@GJXAIOU",[[1,208,")"]],[207,207],[208,208]]],[1536562546452,["gjx16@GJXAIOU",[[1,207,"array"]],[207,207],[212,212]]],[1536562559778,["gjx16@GJXAIOU",[[1,184,"\n"]],[183,183],[184,184]]],[1536562560757,["gjx16@GJXAIOU",[[1,185,"\n"]],[184,184],[185,185]]],[1536562566783,["gjx16@GJXAIOU",[[1,185,"  printf();"]],[185,185],[196,196]]],[1536562570188,["gjx16@GJXAIOU",[[1,194,"\"\""]],[194,194],[196,196]]],[1536562574707,["gjx16@GJXAIOU",[[1,195,"%d\\n"]],[195,195],[199,199]]],[1536562578524,["gjx16@GJXAIOU",[[1,200,","]],[200,200],[201,201]]],[1536562582629,["gjx16@GJXAIOU",[[-1,196,"d"]],[197,197],[196,196]]],[1536562583501,["gjx16@GJXAIOU",[[1,196,"s"]],[196,196],[197,197]]],[1536562587651,["gjx16@GJXAIOU",[[1,201,"array"]],[201,201],[206,206]]],[1536562602613,["gjx16@GJXAIOU",[[1,208,"  //输出数组值"]],[208,208],[217,217]]],[1536562635307,["gjx16@GJXAIOU",[[1,249,"、、、"]],[249,249],[252,252]]],[1536562636486,["gjx16@GJXAIOU",[[-1,249,"、、、"]],[252,252],[249,249]]],[1536562637922,["gjx16@GJXAIOU",[[1,249,"//"]],[249,249],[251,251]]],[1536562645064,["gjx16@GJXAIOU",[[1,246,"1"]],[246,246],[247,247]]],[1536562651140,["gjx16@GJXAIOU",[[-1,246,"1"]],[247,247],[246,246]]],[1536562651836,["gjx16@GJXAIOU",[[1,246,"2"]],[246,246],[247,247]]],[1536562656002,["gjx16@GJXAIOU",[[1,252,"d"]],[252,252],[253,253]]],[1536562656677,["gjx16@GJXAIOU",[[-1,252,"d"]],[253,253],[252,252]]],[1536562667484,["gjx16@GJXAIOU",[[1,252,"得到的值为100"]],[252,252],[260,260]]],[1536562669039,["gjx16@GJXAIOU",[[1,263,"\n  "]],[260,260],[263,263]]],[1536562676189,["gjx16@GJXAIOU",[[1,263,"printf();"]],[263,263],[272,272]]],[1536562682908,["gjx16@GJXAIOU",[[1,270,"“"]],[270,270],[271,271]]],[1536562683945,["gjx16@GJXAIOU",[[-1,270,"“"]],[271,271],[270,270]]],[1536562685157,["gjx16@GJXAIOU",[[1,270,":"]],[270,270],[271,271]]],[1536562685957,["gjx16@GJXAIOU",[[-1,270,":"]],[271,271],[270,270]]],[1536562687194,["gjx16@GJXAIOU",[[1,270,"\"\""]],[270,270],[272,272]]],[1536562689536,["gjx16@GJXAIOU",[[1,271,"#"]],[271,271],[272,272]]],[1536562690502,["gjx16@GJXAIOU",[[-1,271,"#"]],[272,272],[271,271]]],[1536562695478,["gjx16@GJXAIOU",[[1,271,"%d\\n"]],[271,271],[275,275]]],[1536562703552,["gjx16@GJXAIOU",[[1,276,",sizeof("]],[276,276],[284,284]]],[1536562703776,["gjx16@GJXAIOU",[[1,285,")"]],[284,284],[285,285]]],[1536562709176,["gjx16@GJXAIOU",[[1,284,"array3"]],[284,284],[290,290]]],[1536562718922,["gjx16@GJXAIOU",[[1,293,"//得到的值为5"]],[293,293],[301,301]]],[1536562730818,["gjx16@GJXAIOU",[[1,307,"RET"]],[307,307],[310,310]]],[1536562731614,["gjx16@GJXAIOU",[[-1,307,"RET"]],[310,310],[307,307]]],[1536562740328,["gjx16@GJXAIOU",[[1,307,"  return 0；"]],[307,307],[318,318]]],[1536562944932,["gjx16@GJXAIOU",[[1,326,"****"]],[326,326],[328,328]]],[1536562948884,["gjx16@GJXAIOU",[[1,328,"将一个"]],[328,328],[331,331]]],[1536562967177,["gjx16@GJXAIOU",[[1,331,"字符串里面的元素惊喜"]],[331,331],[341,341]]],[1536562967895,["gjx16@GJXAIOU",[[-1,339,"惊喜"]],[341,341],[339,339]]],[1536562971564,["gjx16@GJXAIOU",[[1,339,"进行排序"]],[339,339],[343,343]]],[1536562973568,["gjx16@GJXAIOU",[[1,348,"\n"]],[345,345],[346,346]]],[1536562981559,["gjx16@GJXAIOU",[[1,346,"![排序]($resource/%E6%8E%92%E5%BA%8F.png)"]],[346,346],[386,386]]],[1536562984610,["gjx16@GJXAIOU",[[1,346,"\n"]],[345,345],[346,346]]],[1536562984884,["gjx16@GJXAIOU",[[1,347,"\n"]],[346,346],[347,347]]],[1536562985016,["gjx16@GJXAIOU",[[1,348,"\n"]],[347,347],[348,348]]],[1536562985348,["gjx16@GJXAIOU",[[1,349,"\n"]],[348,348],[349,349]]],[1536562985504,["gjx16@GJXAIOU",[[1,350,"\n"]],[349,349],[350,350]]],[1536562989760,["gjx16@GJXAIOU",[[1,347,"```"]],[347,347],[350,350]]],[1536562989783,["gjx16@GJXAIOU",[[1,350,"language\n```\n"]],[350,350],[350,358]]],[1536562990790,["gjx16@GJXAIOU",[[-1,350,"language"],[1,358,"c"]],[350,358],[351,351]]],[1536562991017,["gjx16@GJXAIOU",[[1,352,"\n"]],[351,351],[352,352]]],[1536562991033,["gjx16@GJXAIOU",[[1,353,"\n"]],[352,352],[353,353]]],[1536562997931,["gjx16@GJXAIOU",[[1,353,"int main()"]],[353,353],[363,363]]],[1536562998469,["gjx16@GJXAIOU",[[1,364,"\n"]],[363,363],[364,364]]],[1536562999909,["gjx16@GJXAIOU",[[1,364,"{}"]],[364,364],[366,366]]],[1536563000937,["gjx16@GJXAIOU",[[1,365,"\n"]],[365,365],[366,366]]],[1536563001110,["gjx16@GJXAIOU",[[1,366,"\n"]],[366,366],[367,367]]],[1536563001264,["gjx16@GJXAIOU",[[1,367,"\n"]],[367,367],[368,368]]],[1536563001438,["gjx16@GJXAIOU",[[1,368,"\n"]],[368,368],[369,369]]],[1536563008390,["gjx16@GJXAIOU",[[1,366,"  int i;"]],[366,366],[374,374]]],[1536563009480,["gjx16@GJXAIOU",[[1,375,"  \n"]],[374,374],[377,377]]],[1536563012358,["gjx16@GJXAIOU",[[1,377,"int j;"]],[377,377],[383,383]]],[1536563013727,["gjx16@GJXAIOU",[[1,384,"  \n"]],[383,383],[386,386]]],[1536563017692,["gjx16@GJXAIOU",[[1,386,"for"]],[386,386],[389,389]]],[1536563019583,["gjx16@GJXAIOU",[[-1,386,"for"]],[389,389],[386,386]]],[1536563021128,["gjx16@GJXAIOU",[[1,386,"int "]],[386,386],[390,390]]],[1536563022426,["gjx16@GJXAIOU",[[-1,386,"int "]],[390,390],[386,386]]],[1536563031726,["gjx16@GJXAIOU",[[1,386,"char array[]"]],[386,386],[398,398]]],[1536563034561,["gjx16@GJXAIOU",[[1,397,"1"]],[397,397],[398,398]]],[1536563035816,["gjx16@GJXAIOU",[[-1,397,"1"]],[398,398],[397,397]]],[1536563036566,["gjx16@GJXAIOU",[[1,397,"5"]],[397,397],[398,398]]],[1536563044049,["gjx16@GJXAIOU",[[1,399," = \"\";"]],[399,399],[405,405]]],[1536563047444,["gjx16@GJXAIOU",[[1,403,"ab"]],[403,403],[405,405]]],[1536563049579,["gjx16@GJXAIOU",[[-1,403,"ab"]],[405,405],[403,403]]],[1536563056420,["gjx16@GJXAIOU",[[1,403,"acdsb"]],[403,403],[408,408]]],[1536563059060,["gjx16@GJXAIOU",[[1,411,"  \n"]],[410,410],[413,413]]],[1536563069588,["gjx16@GJXAIOU",[[1,413,"f"]],[413,413],[414,414]]],[1536563071204,["gjx16@GJXAIOU",[[1,414,"or()"]],[414,414],[418,418]]],[1536563071660,["gjx16@GJXAIOU",[[1,419,"  \n"]],[418,418],[421,421]]],[1536563092929,["gjx16@GJXAIOU",[[1,417,"i = 0 ;i < sizeof("]],[417,417],[435,435]]],[1536563093033,["gjx16@GJXAIOU",[[1,436,")"]],[435,435],[436,436]]],[1536563096385,["gjx16@GJXAIOU",[[1,435,"array"]],[435,435],[440,440]]],[1536563110814,["gjx16@GJXAIOU",[[1,441,"-1 ; i++"]],[441,441],[449,449]]],[1536563112519,["gjx16@GJXAIOU",[[1,454,"  \n"]],[450,450],[453,453]]],[1536563116518,["gjx16@GJXAIOU",[[1,453,"  {}"]],[453,453],[457,457]]],[1536563118469,["gjx16@GJXAIOU",[[1,456,"\n    \n    \n    \n    \n    "]],[456,456],[481,481]]],[1536563122565,["gjx16@GJXAIOU",[[1,461,"  d"]],[461,461],[464,464]]],[1536563123107,["gjx16@GJXAIOU",[[-1,463,"d"]],[464,464],[463,463]]],[1536563125166,["gjx16@GJXAIOU",[[1,463,"for()"]],[463,463],[468,468]]],[1536563126983,["gjx16@GJXAIOU",[[1,466,"j"]],[466,466],[467,467]]],[1536563128046,["gjx16@GJXAIOU",[[-1,466,"j"]],[467,467],[466,466]]],[1536563129538,["gjx16@GJXAIOU",[[1,467,"j"]],[467,467],[468,468]]],[1536563130416,["gjx16@GJXAIOU",[[1,468,"+"]],[468,468],[469,469]]],[1536563131212,["gjx16@GJXAIOU",[[-1,468,"+"]],[469,469],[468,468]]],[1536563138710,["gjx16@GJXAIOU",[[1,468," = 0;j"]],[468,468],[474,474]]],[1536563140970,["gjx16@GJXAIOU",[[-1,473,"j"]],[474,474],[473,473]]],[1536563142625,["gjx16@GJXAIOU",[[1,473,"就"]],[473,473],[474,474]]],[1536563143481,["gjx16@GJXAIOU",[[-1,473,"就"]],[474,474],[473,473]]],[1536563149449,["gjx16@GJXAIOU",[[1,473,"j < ("]],[473,473],[478,478]]],[1536563149545,["gjx16@GJXAIOU",[[1,479,")"]],[478,478],[479,479]]],[1536563155102,["gjx16@GJXAIOU",[[1,478,"sizeof("]],[478,478],[485,485]]],[1536563155188,["gjx16@GJXAIOU",[[1,487,")"]],[485,485],[486,486]]],[1536563158251,["gjx16@GJXAIOU",[[1,485,"array"]],[485,485],[490,490]]],[1536563169319,["gjx16@GJXAIOU",[[1,491,"l"]],[491,491],[492,492]]],[1536563172140,["gjx16@GJXAIOU",[[-1,491,"l"]],[492,492],[491,491]]],[1536563172886,["gjx16@GJXAIOU",[[1,491,"-1"]],[491,491],[493,493]]],[1536563178554,["gjx16@GJXAIOU",[[1,494,"-i"]],[494,494],[496,496]]],[1536563189036,["gjx16@GJXAIOU",[[1,497," ;j"]],[497,497],[500,500]]],[1536563190001,["gjx16@GJXAIOU",[[1,500,"++"]],[500,500],[502,502]]],[1536563193878,["gjx16@GJXAIOU",[[1,415,"}"]],[415,415],[416,416]]],[1536563195267,["gjx16@GJXAIOU",[[-1,415,"}"]],[416,416],[415,415]]],[1536563202431,["gjx16@GJXAIOU",[[1,502,")"]],[502,502],[503,503]]],[1536563203396,["gjx16@GJXAIOU",[[1,508,"  \n    "]],[503,503],[510,510]]],[1536563205212,["gjx16@GJXAIOU",[[1,510,"{}"]],[510,510],[512,512]]],[1536563207051,["gjx16@GJXAIOU",[[1,511,"\n      \n      \n      \n      "]],[511,511],[539,539]]],[1536563209847,["gjx16@GJXAIOU",[[-1,566,"\n"]],[566,566],[565,565]]],[1536563209969,["gjx16@GJXAIOU",[[-1,565,"\n"]],[565,565],[564,564]]],[1536563210093,["gjx16@GJXAIOU",[[-1,563," "]],[564,564],[563,563]]],[1536563212408,["gjx16@GJXAIOU",[[-1,554," "]],[552,552],[551,551]]],[1536563212546,["gjx16@GJXAIOU",[[-1,550,"\n"]],[551,551],[550,550]]],[1536563213227,["gjx16@GJXAIOU",[[-1,549,"    "]],[550,550],[546,546]]],[1536563213372,["gjx16@GJXAIOU",[[-1,545,"\n"]],[546,546],[545,545]]],[1536563213505,["gjx16@GJXAIOU",[[-1,547," "]],[545,545],[544,544]]],[1536563216755,["gjx16@GJXAIOU",[[-1,527,"     "]],[531,531],[526,526]]],[1536563216937,["gjx16@GJXAIOU",[[-1,525,"\n"]],[526,526],[525,525]]],[1536563218129,["gjx16@GJXAIOU",[[-1,520,"      "]],[525,525],[519,519]]],[1536563218459,["gjx16@GJXAIOU",[[-1,518,"\n"]],[519,519],[518,518]]],[1536563219702,["gjx16@GJXAIOU",[[1,519,"  "]],[518,518],[520,520]]],[1536563226955,["gjx16@GJXAIOU",[[1,520,"char"]],[520,520],[524,524]]],[1536563228321,["gjx16@GJXAIOU",[[1,525," "]],[524,524],[525,525]]],[1536563231508,["gjx16@GJXAIOU",[[1,525,"tm["]],[525,525],[528,528]]],[1536563232345,["gjx16@GJXAIOU",[[-1,527,"["]],[528,528],[527,527]]],[1536563233305,["gjx16@GJXAIOU",[[1,527,"["]],[527,527],[528,528]]],[1536563234272,["gjx16@GJXAIOU",[[-1,527,"["]],[528,528],[527,527]]],[1536563239351,["gjx16@GJXAIOU",[[1,527,"p;\n        tmp"]],[527,527],[541,541]]],[1536563240253,["gjx16@GJXAIOU",[[1,542," "]],[541,541],[542,542]]],[1536563241206,["gjx16@GJXAIOU",[[1,542,"="]],[542,542],[543,543]]],[1536563241843,["gjx16@GJXAIOU",[[1,544," "]],[543,543],[544,544]]],[1536563249248,["gjx16@GJXAIOU",[[1,544,"array[i"]],[544,544],[551,551]]],[1536563257406,["gjx16@GJXAIOU",[[1,551,"];\n        array[i]"]],[551,551],[570,570]]],[1536563258354,["gjx16@GJXAIOU",[[1,571," "]],[570,570],[571,571]]],[1536563258972,["gjx16@GJXAIOU",[[1,571,"="]],[571,571],[572,572]]],[1536563259192,["gjx16@GJXAIOU",[[1,573," "]],[572,572],[573,573]]],[1536563269876,["gjx16@GJXAIOU",[[1,573,"array[i-1]'"]],[573,573],[584,584]]],[1536563270767,["gjx16@GJXAIOU",[[-1,583,"'"]],[584,584],[583,583]]],[1536563271357,["gjx16@GJXAIOU",[[1,583,";"]],[583,583],[584,584]]],[1536563276002,["gjx16@GJXAIOU",[[1,538,"\n        "]],[529,529],[538,538]]],[1536563279816,["gjx16@GJXAIOU",[[1,538,"if()"]],[538,538],[542,542]]],[1536563291297,["gjx16@GJXAIOU",[[1,541,"array[i]>"]],[541,541],[550,550]]],[1536563293031,["gjx16@GJXAIOU",[[-1,549,">"]],[550,550],[549,549]]],[1536563297609,["gjx16@GJXAIOU",[[1,549," > arrau"]],[549,549],[557,557]]],[1536563298296,["gjx16@GJXAIOU",[[-1,556,"u"]],[557,557],[556,556]]],[1536563302726,["gjx16@GJXAIOU",[[1,556,"y[i"]],[556,556],[559,559]]],[1536563311827,["gjx16@GJXAIOU",[[1,548,"-1"]],[548,548],[550,550]]],[1536563315705,["gjx16@GJXAIOU",[[-1,547,"i"]],[548,548],[547,547]]],[1536563316219,["gjx16@GJXAIOU",[[1,547,"j"]],[547,547],[548,548]]],[1536563319288,["gjx16@GJXAIOU",[[-1,471,"0"]],[472,472],[471,471]]],[1536563319813,["gjx16@GJXAIOU",[[1,471,"1"]],[471,471],[472,472]]],[1536563323191,["gjx16@GJXAIOU",[[-1,560,"i"]],[561,561],[560,560]]],[1536563325364,["gjx16@GJXAIOU",[[1,560,"j]"]],[560,560],[562,562]]],[1536563328548,["gjx16@GJXAIOU",[[-1,584,"i"]],[585,585],[584,584]]],[1536563328892,["gjx16@GJXAIOU",[[1,584,"k"]],[584,584],[585,585]]],[1536563329608,["gjx16@GJXAIOU",[[-1,584,"k"]],[585,585],[584,584]]],[1536563329922,["gjx16@GJXAIOU",[[1,584,"j"]],[584,584],[585,585]]],[1536563332194,["gjx16@GJXAIOU",[[-1,602,"i"]],[603,603],[602,602]]],[1536563332548,["gjx16@GJXAIOU",[[1,602,"j"]],[602,602],[603,603]]],[1536563335812,["gjx16@GJXAIOU",[[-1,613,"i"]],[614,614],[613,613]]],[1536563336350,["gjx16@GJXAIOU",[[1,613,"j"]],[613,613],[614,614]]],[1536563339626,["gjx16@GJXAIOU",[[1,626,"  \n      "]],[619,619],[628,628]]],[1536563354165,["gjx16@GJXAIOU",[[1,628,"array[j-1] = array["]],[628,628],[647,647]]],[1536563357960,["gjx16@GJXAIOU",[[-1,641,"array["]],[647,647],[641,641]]],[1536563360899,["gjx16@GJXAIOU",[[1,641,"tmpp"]],[641,641],[645,645]]],[1536563361535,["gjx16@GJXAIOU",[[-1,644,"p"]],[645,645],[644,644]]],[1536563362072,["gjx16@GJXAIOU",[[1,644,";"]],[644,644],[645,645]]],[1536563374865,["gjx16@GJXAIOU",[[1,660,"printf();"]],[660,660],[669,669]]],[1536563378547,["gjx16@GJXAIOU",[[1,667,"\"\""]],[667,667],[669,669]]],[1536563384344,["gjx16@GJXAIOU",[[1,668,"%s\\n"]],[668,668],[672,672]]],[1536563392503,["gjx16@GJXAIOU",[[1,673,",array"]],[673,673],[679,679]]],[1536578200960,["gjx16@GJXAIOU",[[1,353,"#"],[1,355,"clude<s"],[1,356,"dio.h>\n\nint "],[1,364,"\n"],[1,365,"\n"],[1,372," "],[1,374,"\n"],[1,381," "],[1,383,"\n"],[1,391," "],[1,399," "],[1,402," "],[-1,406,"s"],[1,411,"\n"],[1,418," "],[1,421," "],[1,422," "],[1,426," "],[1,428," ("],[1,443,") "],[1,445," "],[-1,451,"  "],[1,453,"\n"],[-1,457,"    "],[1,461,"\n"],[1,469," "],[1,470," "],[1,474," "],[1,477," ("],[1,498," "],[-1,504,"    "],[1,508,"\n"],[-1,512,"      "],[1,518,"\n"],[1,525," "],[-1,530,"      "],[1,536,"\n"],[1,552," "],[1,553," "],[-1,564,"    "],[1,568,"\n"],[1,570,"{\n\n"],[1,576," "],[1,577," "],[-1,588,"      "],[1,594,"\n"],[1,604," "],[1,607," "],[-1,618," \n      "],[1,626,"\n\n"],[1,638," "],[1,641," "],[-1,646,"    "],[1,650,"\n"],[1,654,"\n"],[1,656,"}\n\n"],[1,658,"}\n\n"],[1,682,"\n"],[1,684,"return"],[-1,686,"}\n "],[1,689,"0;\n"]],[353,691],[727,727]]],[1536578211538,["gjx16@GJXAIOU",[[-1,736,"![排序]($resource/%E6%8E%92%E5%BA%8F.png)\n"]],[736,776],[736,736]]],[1536578700896,["gjx16@GJXAIOU",[[1,738,"\n"]],[731,731],[732,732]]],[1536578701045,["gjx16@GJXAIOU",[[1,739,"\n"]],[732,732],[733,733]]],[1536578701185,["gjx16@GJXAIOU",[[1,740,"\n"]],[733,733],[734,734]]],[1536578710581,["gjx16@GJXAIOU",[[1,734,"****"]],[734,734],[736,736]]],[1536578711860,["gjx16@GJXAIOU",[[1,736,"jiang "]],[736,736],[742,742]]],[1536578713064,["gjx16@GJXAIOU",[[-1,736,"jiang "]],[742,742],[736,736]]],[1536578720936,["gjx16@GJXAIOU",[[1,736,"将字符串进行逆置"]],[736,736],[744,744]]],[1536578722982,["gjx16@GJXAIOU",[[1,753,"\n"]],[746,746],[747,747]]],[1536578723680,["gjx16@GJXAIOU",[[1,754,"\n"]],[747,747],[748,748]]],[1536578724823,["gjx16@GJXAIOU",[[1,748,"··"]],[748,748],[750,750]]],[1536578725448,["gjx16@GJXAIOU",[[-1,748,"··"]],[750,750],[748,748]]],[1536578727102,["gjx16@GJXAIOU",[[1,748,"```"]],[748,748],[751,751]]],[1536578727126,["gjx16@GJXAIOU",[[1,751,"language\n```\n"]],[751,751],[751,759]]],[1536578728043,["gjx16@GJXAIOU",[[-1,751,"language"],[1,759,"c"]],[751,759],[752,752]]],[1536578728251,["gjx16@GJXAIOU",[[1,753,"\n"]],[752,752],[753,753]]],[1536578728409,["gjx16@GJXAIOU",[[1,754,"\n"]],[753,753],[754,754]]],[1536578732447,["gjx16@GJXAIOU",[[1,754,"int main()"]],[754,754],[764,764]]],[1536578733074,["gjx16@GJXAIOU",[[1,765,"\n"]],[764,764],[765,765]]],[1536578734244,["gjx16@GJXAIOU",[[1,765,"{}"]],[765,765],[767,767]]],[1536578735260,["gjx16@GJXAIOU",[[1,766,"\n"]],[766,766],[767,767]]],[1536578735408,["gjx16@GJXAIOU",[[1,767,"\n"]],[767,767],[768,768]]],[1536578738392,["gjx16@GJXAIOU",[[1,767,"  in"]],[767,767],[771,771]]],[1536578739496,["gjx16@GJXAIOU",[[-1,768," in"]],[771,771],[768,768]]],[1536578740668,["gjx16@GJXAIOU",[[-1,767," "],[1,768,"\n"]],[768,768],[768,768]]],[1536578748389,["gjx16@GJXAIOU",[[1,768,"  return 0;"]],[768,768],[779,779]]],[1536578755023,["gjx16@GJXAIOU",[[1,767,"  int min"]],[767,767],[776,776]]],[1536578757112,["gjx16@GJXAIOU",[[-1,769,"int min"]],[776,776],[769,769]]],[1536578759564,["gjx16@GJXAIOU",[[1,769,"char "]],[769,769],[774,774]]],[1536578775550,["gjx16@GJXAIOU",[[1,774,"str[15] = \"\";"]],[774,774],[787,787]]],[1536578783425,["gjx16@GJXAIOU",[[1,785,"hello world"]],[785,785],[796,796]]],[1536578786527,["gjx16@GJXAIOU",[[1,801,"\n  "]],[798,798],[801,801]]],[1536578790555,["gjx16@GJXAIOU",[[1,801,"int min;"]],[801,801],[809,809]]],[1536578791080,["gjx16@GJXAIOU",[[1,812,"\n  "]],[809,809],[812,812]]],[1536578792582,["gjx16@GJXAIOU",[[1,812,"ming "]],[812,812],[817,817]]],[1536578794101,["gjx16@GJXAIOU",[[-1,812,"ming "]],[817,817],[812,812]]],[1536578797183,["gjx16@GJXAIOU",[[1,812,"int max;"]],[812,812],[820,820]]],[1536578797578,["gjx16@GJXAIOU",[[1,823,"\n  "]],[820,820],[823,823]]],[1536578804641,["gjx16@GJXAIOU",[[1,823,"whilr"]],[823,823],[828,828]]],[1536578805619,["gjx16@GJXAIOU",[[-1,827,"r"]],[828,828],[827,827]]],[1536578807214,["gjx16@GJXAIOU",[[1,827,"e()"]],[827,827],[830,830]]],[1536578816185,["gjx16@GJXAIOU",[[1,829,"min < max"]],[829,829],[838,838]]],[1536578827661,["gjx16@GJXAIOU",[[1,808," = 0"]],[808,808],[812,812]]],[1536578839425,["gjx16@GJXAIOU",[[1,823," = 14"]],[823,823],[828,828]]],[1536578843272,["gjx16@GJXAIOU",[[1,860,"1"]],[860,860],[861,861]]],[1536578844595,["gjx16@GJXAIOU",[[-1,860,"1"]],[861,861],[860,860]]],[1536578847942,["gjx16@GJXAIOU",[[1,851,"\n  "]],[848,848],[851,851]]],[1536578850707,["gjx16@GJXAIOU",[[1,851,"{}"]],[851,851],[853,853]]],[1536578852109,["gjx16@GJXAIOU",[[1,852,"\n  \n  "]],[852,852],[858,858]]],[1536578859467,["gjx16@GJXAIOU",[[1,855,"  int tm0"]],[855,855],[864,864]]],[1536578860346,["gjx16@GJXAIOU",[[-1,863,"0"]],[864,864],[863,863]]],[1536578862204,["gjx16@GJXAIOU",[[1,863,"p;'"]],[863,863],[866,866]]],[1536578863051,["gjx16@GJXAIOU",[[-1,865,"'"]],[866,866],[865,865]]],[1536578864259,["gjx16@GJXAIOU",[[1,868,"  \n  "]],[865,865],[870,870]]],[1536578869893,["gjx16@GJXAIOU",[[1,870,"tmp = a"]],[870,870],[877,877]]],[1536578870546,["gjx16@GJXAIOU",[[-1,876,"a"]],[877,877],[876,876]]],[1536578871055,["gjx16@GJXAIOU",[[1,876,"as"]],[876,876],[878,878]]],[1536578871827,["gjx16@GJXAIOU",[[-1,876,"as"]],[878,878],[876,876]]],[1536578872246,["gjx16@GJXAIOU",[[1,876,"sr"]],[876,876],[878,878]]],[1536578873034,["gjx16@GJXAIOU",[[-1,877,"r"]],[878,878],[877,877]]],[1536578878691,["gjx16@GJXAIOU",[[1,877,"tr[i["]],[877,877],[882,882]]],[1536578879706,["gjx16@GJXAIOU",[[-1,881,"["]],[882,882],[881,881]]],[1536578881982,["gjx16@GJXAIOU",[[1,881,"];"]],[881,881],[883,883]]],[1536578882325,["gjx16@GJXAIOU",[[1,886,"  \n  "]],[883,883],[888,888]]],[1536578885892,["gjx16@GJXAIOU",[[1,888,"str[i["]],[888,888],[894,894]]],[1536578886808,["gjx16@GJXAIOU",[[-1,893,"["]],[894,894],[893,893]]],[1536578894660,["gjx16@GJXAIOU",[[1,893,"] = str[il"]],[893,893],[903,903]]],[1536578897419,["gjx16@GJXAIOU",[[-1,902,"l"]],[903,903],[902,902]]],[1536578901492,["gjx16@GJXAIOU",[[1,902,"-1];"]],[902,902],[906,906]]],[1536578902065,["gjx16@GJXAIOU",[[1,909,"  \n  "]],[906,906],[911,911]]],[1536578910714,["gjx16@GJXAIOU",[[1,911,"str[i-1] -"]],[911,911],[921,921]]],[1536578911447,["gjx16@GJXAIOU",[[-1,920,"-"]],[921,921],[920,920]]],[1536578913101,["gjx16@GJXAIOU",[[1,920,"0"]],[920,920],[921,921]]],[1536578914069,["gjx16@GJXAIOU",[[-1,920,"0"]],[921,921],[920,920]]],[1536578916508,["gjx16@GJXAIOU",[[1,920,"= s"]],[920,920],[923,923]]],[1536578917260,["gjx16@GJXAIOU",[[-1,922,"s"]],[923,923],[922,922]]],[1536578918801,["gjx16@GJXAIOU",[[1,922,"tmp "]],[922,922],[926,926]]],[1536578919390,["gjx16@GJXAIOU",[[-1,925," "]],[926,926],[925,925]]],[1536578919857,["gjx16@GJXAIOU",[[1,925,";"]],[925,925],[926,926]]],[1536578920459,["gjx16@GJXAIOU",[[1,929,"  \n  "]],[926,926],[931,931]]],[1536578932637,["gjx16@GJXAIOU",[[1,931,"min++;"]],[931,931],[937,937]]],[1536578933125,["gjx16@GJXAIOU",[[1,940,"  \n  "]],[937,937],[942,942]]],[1536578936882,["gjx16@GJXAIOU",[[1,942,"max))"]],[942,942],[947,947]]],[1536578937766,["gjx16@GJXAIOU",[[-1,945,"))"]],[947,947],[945,945]]],[1536578939540,["gjx16@GJXAIOU",[[1,945,"__"]],[945,945],[947,947]]],[1536578940460,["gjx16@GJXAIOU",[[-1,945,"__"]],[947,947],[945,945]]],[1536578943066,["gjx16@GJXAIOU",[[1,945,"--;"]],[945,945],[948,948]]],[1536578947191,["gjx16@GJXAIOU",[[1,955,"\n  "]],[952,952],[955,955]]],[1536578951643,["gjx16@GJXAIOU",[[1,955,"printf();"]],[955,955],[964,964]]],[1536578954770,["gjx16@GJXAIOU",[[1,962,"\"\""]],[962,962],[964,964]]],[1536578957456,["gjx16@GJXAIOU",[[1,952,"%"]],[952,952],[953,953]]],[1536578959440,["gjx16@GJXAIOU",[[-1,952,"%"]],[953,953],[952,952]]],[1536578967103,["gjx16@GJXAIOU",[[1,963,"%d\\n"]],[963,963],[967,967]]],[1536578977484,["gjx16@GJXAIOU",[[1,968,",i"]],[968,968],[970,970]]],[1536579351777,["gjx16@GJXAIOU",[[1,753,"#include<stdio.h>\n"],[1,758," "],[1,765,"\n"],[1,766,"\n"],[1,774," "],[1,782," "],[1,783," "],[1,791," "],[1,799,"\n"],[1,804," "],[1,809," "],[1,810," "],[1,813,"\n"],[1,820," "],[1,824," "],[1,825," "],[1,830,"\n"],[1,842," "],[1,843," "],[1,849,"\n"],[1,852,"\n"],[1,855,"char"],[-1,857,"int "],[-1,866,"  "],[1,868,"\n"],[1,873," "],[1,876," "],[-1,880,"i];\n  "],[1,886,"max];\n\n"],[-1,892,"i"],[1,893,"max"],[1,895," "],[1,896," "],[-1,901,"i-1];\n  "],[1,909,"min];\n\n"],[-1,915,"i-1]"],[1,919,"min] "],[1,921," "],[-1,927,"  "],[1,929,"\n"],[-1,938,"  "],[1,940,"\n"],[1,949,"\n"],[1,952,"\n"],[-1,964,"d"],[1,965,"s"],[-1,969,"i"],[1,970,"str"],[1,972,"\n"],[1,982," "],[1,984,"\n"]],[753,986],[1036,1036]]],[1536579363255,["gjx16@GJXAIOU",[[1,747,"1.zhiji"]],[747,747],[754,754]]],[1536579364097,["gjx16@GJXAIOU",[[-1,749,"zhiji"]],[754,754],[749,749]]],[1536579371503,["gjx16@GJXAIOU",[[1,749,"直接进行逆置）（"]],[749,749],[757,757]]],[1536579373231,["gjx16@GJXAIOU",[[-1,755,"）（"]],[757,757],[755,755]]],[1536579374472,["gjx16@GJXAIOU",[[1,755,"（）"]],[755,755],[757,757]]],[1536579396277,["gjx16@GJXAIOU",[[1,756,"一般不输出结果因为后面很多0"]],[756,756],[770,770]]],[1536579729116,["gjx16@GJXAIOU",[[1,1072,"\n"]],[1064,1064],[1065,1065]]],[1536579729338,["gjx16@GJXAIOU",[[1,1073,"\n"]],[1065,1065],[1066,1066]]],[1536579735818,["gjx16@GJXAIOU",[[1,1066,"2.乳腺"]],[1066,1066],[1070,1070]]],[1536579737793,["gjx16@GJXAIOU",[[-1,1068,"乳腺"]],[1070,1070],[1068,1068]]],[1536579759215,["gjx16@GJXAIOU",[[1,1068,"如果仅将“hello world”“"]],[1068,1068],[1086,1086]]],[1536579760520,["gjx16@GJXAIOU",[[-1,1084,"”“"]],[1086,1086],[1084,1084]]],[1536579762486,["gjx16@GJXAIOU",[[1,1084,"”“"]],[1084,1084],[1086,1086]]],[1536579763325,["gjx16@GJXAIOU",[[-1,1085,"“"]],[1086,1086],[1085,1085]]],[1536579777625,["gjx16@GJXAIOU",[[1,1085,"，这几个字符串进行倒置"]],[1085,1085],[1096,1096]]],[1536579791440,["gjx16@GJXAIOU",[[1,1096,"，就要先计算数组长度；"]],[1096,1096],[1107,1107]]],[1536579792608,["gjx16@GJXAIOU",[[1,1115,"\n"]],[1107,1107],[1108,1108]]],[1536579806987,["gjx16@GJXAIOU",[[1,1108,"·"]],[1108,1108],[1109,1109]]],[1536579807889,["gjx16@GJXAIOU",[[-1,1108,"·"]],[1109,1109],[1108,1108]]],[1536579809118,["gjx16@GJXAIOU",[[1,1108,"```"]],[1108,1108],[1111,1111]]],[1536579809142,["gjx16@GJXAIOU",[[1,1111,"language\n```\n"]],[1111,1111],[1111,1119]]],[1536579810612,["gjx16@GJXAIOU",[[-1,1111,"language"],[1,1119,"c"]],[1111,1119],[1112,1112]]],[1536579810863,["gjx16@GJXAIOU",[[1,1113,"\n"]],[1112,1112],[1113,1113]]],[1536579816594,["gjx16@GJXAIOU",[[1,1113,"int main()"]],[1113,1113],[1123,1123]]],[1536579817337,["gjx16@GJXAIOU",[[1,1124,"\n"]],[1123,1123],[1124,1124]]],[1536579818739,["gjx16@GJXAIOU",[[1,1124,"{}"]],[1124,1124],[1126,1126]]],[1536579819923,["gjx16@GJXAIOU",[[1,1125,"\n"]],[1125,1125],[1126,1126]]],[1536579820081,["gjx16@GJXAIOU",[[1,1126,"\n"]],[1126,1126],[1127,1127]]],[1536579820275,["gjx16@GJXAIOU",[[1,1127,"\n"]],[1127,1127],[1128,1128]]],[1536579820463,["gjx16@GJXAIOU",[[1,1128,"\n"]],[1128,1128],[1129,1129]]],[1536579822157,["gjx16@GJXAIOU",[[1,1129,"1\\"]],[1129,1129],[1131,1131]]],[1536579823516,["gjx16@GJXAIOU",[[-1,1129,"1\\"]],[1131,1131],[1129,1129]]],[1536579828758,["gjx16@GJXAIOU",[[1,1128,"RETURN"]],[1128,1128],[1134,1134]]],[1536579830748,["gjx16@GJXAIOU",[[-1,1128,"RETURN"]],[1134,1134],[1128,1128]]],[1536579835574,["gjx16@GJXAIOU",[[1,1128,"return 0;"]],[1128,1128],[1137,1137]]],[1536579838349,["gjx16@GJXAIOU",[[1,1126,"  "]],[1126,1126],[1128,1128]]],[1536579928424,["gjx16@GJXAIOU",[[1,1128,"int atr"]],[1128,1128],[1135,1135]]],[1536579929688,["gjx16@GJXAIOU",[[-1,1132,"atr"]],[1135,1135],[1132,1132]]],[1536579933457,["gjx16@GJXAIOU",[[1,1132,"str["]],[1132,1132],[1136,1136]]],[1536579950053,["gjx16@GJXAIOU",[[1,1128," char  str[15]  =  \"hello  world\";\n\n  "],[1,1132," min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  "],[1,1136,"max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n"]],[1128,1136],[1359,1359]]],[1536579953508,["gjx16@GJXAIOU",[[1,1163,"   \n"]],[1162,1162],[1166,1166]]],[1536579956710,["gjx16@GJXAIOU",[[1,1166,"//"]],[1166,1166],[1168,1168]]],[1536579964435,["gjx16@GJXAIOU",[[1,1168,"求数组的长度"]],[1168,1168],[1174,1174]]],[1536579965932,["gjx16@GJXAIOU",[[1,1175,"   \n"]],[1174,1174],[1178,1178]]],[1536579977761,["gjx16@GJXAIOU",[[1,1178,"int i;"]],[1178,1178],[1184,1184]]],[1536579980561,["gjx16@GJXAIOU",[[1,1185,"   \n"]],[1184,1184],[1188,1188]]],[1536579985875,["gjx16@GJXAIOU",[[1,1188,"whilr"]],[1188,1188],[1193,1193]]],[1536579986704,["gjx16@GJXAIOU",[[-1,1192,"r"]],[1193,1193],[1192,1192]]],[1536579988512,["gjx16@GJXAIOU",[[1,1192,"e()"]],[1192,1192],[1195,1195]]],[1536580001079,["gjx16@GJXAIOU",[[1,1194,"str[i]"]],[1194,1194],[1200,1200]]],[1536580005270,["gjx16@GJXAIOU",[[1,1202,"   \n"]],[1201,1201],[1205,1205]]],[1536580007939,["gjx16@GJXAIOU",[[1,1205,"{}"]],[1205,1205],[1207,1207]]],[1536580019002,["gjx16@GJXAIOU",[[1,1206,"\n   \n   "]],[1206,1206],[1210,1210]]],[1536580025786,["gjx16@GJXAIOU",[[1,1210,"  printf()"]],[1210,1210],[1220,1220]]],[1536580029382,["gjx16@GJXAIOU",[[1,1219,"\"\""]],[1219,1219],[1221,1221]]],[1536580032917,["gjx16@GJXAIOU",[[1,1220,"/5"]],[1220,1220],[1222,1222]]],[1536580034276,["gjx16@GJXAIOU",[[-1,1220,"/5"]],[1222,1222],[1220,1220]]],[1536580037040,["gjx16@GJXAIOU",[[1,1220,"%s"]],[1220,1220],[1222,1222]]],[1536580037886,["gjx16@GJXAIOU",[[-1,1221,"s"]],[1222,1222],[1221,1221]]],[1536580040718,["gjx16@GJXAIOU",[[1,1221,"d\\n"]],[1221,1221],[1224,1224]]],[1536580046509,["gjx16@GJXAIOU",[[1,1225,",i"]],[1225,1225],[1227,1227]]],[1536580050725,["gjx16@GJXAIOU",[[1,1228,";"]],[1228,1228],[1229,1229]]],[1536580051637,["gjx16@GJXAIOU",[[1,1233,"  \n   "]],[1229,1229],[1235,1235]]],[1536580054245,["gjx16@GJXAIOU",[[1,1235,"i++;"]],[1235,1235],[1239,1239]]],[1536580195848,["gjx16@GJXAIOU",[[-1,1280,"14"]],[1282,1282],[1280,1280]]],[1536580199011,["gjx16@GJXAIOU",[[1,1280,"i-"]],[1280,1280],[1282,1282]]],[1536580201627,["gjx16@GJXAIOU",[[1,1282,"2"]],[1282,1282],[1283,1283]]],[1536582450351,["gjx16@GJXAIOU",[[1,1113,"#"],[1,1115,"clude<s"],[1,1116,"dio.h>\n\nint "],[1,1124,"\n"],[-1,1126," "],[1,1127,"\n"],[-1,1163," "],[1,1164,"\n"],[-1,1175," "],[1,1176,"\n"],[1,1182," "],[1,1183,"  =  0"],[-1,1185," "],[1,1186,"\n"],[1,1199,"++"],[1,1201,"\n"],[-1,1204," {\n     printf(\"%d\\n\",i);"],[1,1229,"/*这里的while语句等效为：\n\n  *  while（str[i]）\n"],[1,1232,"*"],[1,1234,"{\n\n  * "],[1,1239,"\n"],[1,1242,"* "],[1,1244,"\n\n  *\n\n  */"],[-1,1443,"\n"],[1,1451," "],[1,1453,"\n"]],[1113,1455],[1521,1521]]],[1536582461185,["gjx16@GJXAIOU",[[1,1534,"\n"]],[1526,1526],[1527,1527]]],[1536582461340,["gjx16@GJXAIOU",[[1,1535,"\n"]],[1527,1527],[1528,1528]]],[1536584702532,["gjx16@GJXAIOU",[[1,1536,"\n"]],[1525,1525],[1526,1526]]],[1536584702674,["gjx16@GJXAIOU",[[1,1537,"\n"]],[1526,1526],[1527,1527]]],[1536584705868,["gjx16@GJXAIOU",[[1,1527,"88"]],[1527,1527],[1529,1529]]],[1536584707111,["gjx16@GJXAIOU",[[-1,1527,"88"]],[1529,1529],[1527,1527]]],[1536584710591,["gjx16@GJXAIOU",[[1,1527,"****"]],[1527,1527],[1529,1529]]],[1536584712550,["gjx16@GJXAIOU",[[1,1529,"ry="]],[1529,1529],[1532,1532]]],[1536584713534,["gjx16@GJXAIOU",[[-1,1529,"ry="]],[1532,1532],[1529,1529]]],[1536584715551,["gjx16@GJXAIOU",[[1,1529,"ru"]],[1529,1529],[1531,1531]]],[1536584716159,["gjx16@GJXAIOU",[[-1,1529,"ru"]],[1531,1531],[1529,1529]]],[1536584723816,["gjx16@GJXAIOU",[[1,1529,"如何将汉字进行倒置"]],[1529,1529],[1538,1538]]],[1536584726917,["gjx16@GJXAIOU",[[1,1551,"\n"]],[1540,1540],[1541,1541]]],[1536584739368,["gjx16@GJXAIOU",[[1,1541,"在ASCII吗"]],[1541,1541],[1548,1548]]],[1536584739889,["gjx16@GJXAIOU",[[-1,1547,"吗"]],[1548,1548],[1547,1547]]],[1536584741619,["gjx16@GJXAIOU",[[1,1547,"码"]],[1547,1547],[1548,1548]]],[1536584749503,["gjx16@GJXAIOU",[[1,1548,"中一给姐存放一个"]],[1548,1548],[1556,1556]]],[1536584753052,["gjx16@GJXAIOU",[[-1,1550,"给姐"]],[1552,1552],[1550,1550]]],[1536584759106,["gjx16@GJXAIOU",[[1,1550,"个字节"]],[1550,1550],[1553,1553]]],[1536584765514,["gjx16@GJXAIOU",[[1,1557,"肺腑"]],[1557,1557],[1559,1559]]],[1536584766238,["gjx16@GJXAIOU",[[-1,1557,"肺腑"]],[1559,1559],[1557,1557]]],[1536584768311,["gjx16@GJXAIOU",[[1,1557,"字符；"]],[1557,1557],[1560,1560]]],[1536584768736,["gjx16@GJXAIOU",[[1,1571,"\n"]],[1560,1560],[1561,1561]]],[1536584792307,["gjx16@GJXAIOU",[[1,1561,"在GBK编码中2个字节存放一个汉字；‘"]],[1561,1561],[1580,1580]]],[1536584793520,["gjx16@GJXAIOU",[[-1,1579,"‘"]],[1580,1580],[1579,1579]]],[1536584793959,["gjx16@GJXAIOU",[[1,1590,"\n"]],[1579,1579],[1580,1580]]],[1536584802422,["gjx16@GJXAIOU",[[1,1580,"在UTF"]],[1580,1580],[1584,1584]]],[1536584817349,["gjx16@GJXAIOU",[[1,1584,"-8编码中3个字节存放一个汉字；"]],[1584,1584],[1600,1600]]],[1536584819552,["gjx16@GJXAIOU",[[1,1611,"\n"]],[1600,1600],[1601,1601]]],[1536584820151,["gjx16@GJXAIOU",[[1,1612,"\n"]],[1601,1601],[1602,1602]]],[1536584823008,["gjx16@GJXAIOU",[[1,1602,"一下"]],[1602,1602],[1604,1604]]],[1536584824401,["gjx16@GJXAIOU",[[-1,1602,"一下"]],[1604,1604],[1602,1602]]],[1536584849095,["gjx16@GJXAIOU",[[1,1602,"以下的示例是以GBK编码为例；"]],[1602,1602],[1617,1617]]],[1536584849782,["gjx16@GJXAIOU",[[1,1628,"\n"]],[1617,1617],[1618,1618]]],[1536584850310,["gjx16@GJXAIOU",[[1,1629,"\n"]],[1618,1618],[1619,1619]]],[1536585951366,["gjx16@GJXAIOU",[[1,1619,"··"]],[1619,1619],[1621,1621]]],[1536585952078,["gjx16@GJXAIOU",[[-1,1619,"··"]],[1621,1621],[1619,1619]]],[1536585953939,["gjx16@GJXAIOU",[[1,1619,"```"]],[1619,1619],[1622,1622]]],[1536585953964,["gjx16@GJXAIOU",[[1,1622,"language\n```\n"]],[1622,1622],[1622,1630]]],[1536585955019,["gjx16@GJXAIOU",[[-1,1622,"language"],[1,1630,"c"]],[1622,1630],[1623,1623]]],[1536585955267,["gjx16@GJXAIOU",[[1,1624,"\n"]],[1623,1623],[1624,1624]]],[1536585959363,["gjx16@GJXAIOU",[[1,1624,"int main()"]],[1624,1624],[1634,1634]]],[1536585959800,["gjx16@GJXAIOU",[[1,1635,"\n"]],[1634,1634],[1635,1635]]],[1536585961105,["gjx16@GJXAIOU",[[1,1635,"{}"]],[1635,1635],[1637,1637]]],[1536585962381,["gjx16@GJXAIOU",[[1,1636,"\n"]],[1636,1636],[1637,1637]]],[1536585962504,["gjx16@GJXAIOU",[[1,1637,"\n"]],[1637,1637],[1638,1638]]],[1536585962651,["gjx16@GJXAIOU",[[1,1638,"\n"]],[1638,1638],[1639,1639]]],[1536585962790,["gjx16@GJXAIOU",[[1,1639,"\n"]],[1639,1639],[1640,1640]]],[1536585969234,["gjx16@GJXAIOU",[[1,1637,"  int i;"]],[1637,1637],[1645,1645]]],[1536585969819,["gjx16@GJXAIOU",[[1,1646,"  \n"]],[1645,1645],[1648,1648]]],[1536585987538,["gjx16@GJXAIOU",[[1,1638,"{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n "],[1,1643," "],[1,1644,"  =  0"],[1,1645,"\n"],[1,1648,"while(str[i++])"],[1,1649,"\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;"]],[1638,1650],[2012,2012]]],[1536585990804,["gjx16@GJXAIOU",[[-1,1637," {"]],[1639,1639],[1637,1637]]],[1536586000013,["gjx16@GJXAIOU",[[-1,1725," /*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */\n"]],[1725,1801],[1725,1725]]],[1536586025968,["gjx16@GJXAIOU",[[-1,1676,"  //求数组的长度"]],[1686,1686],[1676,1676]]],[1536586026279,["gjx16@GJXAIOU",[[-1,1677,"\n"]],[1676,1676],[1675,1675]]],[1536586026717,["gjx16@GJXAIOU",[[-1,1676,"\n"]],[1675,1675],[1674,1674]]],[1536586029499,["gjx16@GJXAIOU",[[-1,1675,"\n"]],[1675,1675],[1674,1674]]],[1536586032278,["gjx16@GJXAIOU",[[-1,1691,"\n"]],[1691,1691],[1690,1690]]],[1536586034702,["gjx16@GJXAIOU",[[-1,1710," "]],[1711,1711],[1710,1710]]],[1536586034856,["gjx16@GJXAIOU",[[-1,1710,"\n"]],[1710,1710],[1709,1709]]],[1536586035311,["gjx16@GJXAIOU",[[-1,1709,"\n"]],[1709,1709],[1708,1708]]],[1536586093723,["gjx16@GJXAIOU",[[1,1807," -1 "]],[1807,1807],[1811,1811]]],[1536586094614,["gjx16@GJXAIOU",[[-1,1810," "]],[1811,1811],[1810,1810]]],[1536586101458,["gjx16@GJXAIOU",[[1,1823," -1"]],[1823,1823],[1826,1826]]],[1536586136155,["gjx16@GJXAIOU",[[1,1863,"  \n"]],[1862,1862],[1865,1865]]],[1536586136802,["gjx16@GJXAIOU",[[-1,1863,"  "],[1,1865,"\n"]],[1865,1865],[1864,1864]]],[1536586138594,["gjx16@GJXAIOU",[[1,1866,"\n"]],[1864,1864],[1865,1865]]],[1536586143124,["gjx16@GJXAIOU",[[1,1865,"TM"]],[1865,1865],[1867,1867]]],[1536586143828,["gjx16@GJXAIOU",[[-1,1865,"TM"]],[1867,1867],[1865,1865]]],[1536586174421,["gjx16@GJXAIOU",[[1,1865,"  tmp = str[max];"]],[1865,1865],[1882,1882]]],[1536586175286,["gjx16@GJXAIOU",[[1,1883,"  \n"]],[1882,1882],[1885,1885]]],[1536586181884,["gjx16@GJXAIOU",[[-1,1813,"\n"]],[1813,1813],[1812,1812]]],[1536586183079,["gjx16@GJXAIOU",[[-1,1841,"\n"]],[1841,1841],[1840,1840]]],[1536586186466,["gjx16@GJXAIOU",[[1,1884,"  \n"]],[1880,1880],[1883,1883]]],[1536586190117,["gjx16@GJXAIOU",[[1,1883,"atr"]],[1883,1883],[1886,1886]]],[1536586191582,["gjx16@GJXAIOU",[[-1,1883,"atr"]],[1886,1886],[1883,1883]]],[1536586215081,["gjx16@GJXAIOU",[[1,1883,"str[max] = str[min + 1];"]],[1883,1883],[1907,1907]]],[1536586216202,["gjx16@GJXAIOU",[[1,1911,"  \n"]],[1907,1907],[1910,1910]]],[1536586235838,["gjx16@GJXAIOU",[[1,1910,"str[min + 1] = str["]],[1910,1910],[1929,1929]]],[1536586238875,["gjx16@GJXAIOU",[[-1,1925,"str["]],[1929,1929],[1925,1925]]],[1536586241114,["gjx16@GJXAIOU",[[1,1925,"tmp;"]],[1925,1925],[1929,1929]]],[1536586247252,["gjx16@GJXAIOU",[[-1,1939,"++"]],[1941,1941],[1939,1939]]],[1536586252525,["gjx16@GJXAIOU",[[1,1939," += 2"]],[1939,1939],[1944,1944]]],[1536586276889,["gjx16@GJXAIOU",[[-1,1952,"--"]],[1954,1954],[1952,1952]]],[1536586282170,["gjx16@GJXAIOU",[[1,1952," -=2"]],[1952,1952],[1956,1956]]],[1536586297288,["gjx16@GJXAIOU",[[-1,1660,"hello  world"]],[1672,1672],[1660,1660]]],[1536586305819,["gjx16@GJXAIOU",[[1,1660,"nihao"]],[1660,1660],[1665,1665]]],[1536586307411,["gjx16@GJXAIOU",[[-1,1660,"nihao"]],[1665,1665],[1660,1660]]],[1536586314730,["gjx16@GJXAIOU",[[1,1660,"你好世界"]],[1660,1660],[1664,1664]]],[1536586337856,["gjx16@GJXAIOU",[[-1,1638,"\n"]],[1638,1638],[1637,1637]]],[1536586338031,["gjx16@GJXAIOU",[[-1,1637,"\n"]],[1637,1637],[1636,1636]]],[1536586341238,["gjx16@GJXAIOU",[[1,1624,"\n"]],[1624,1624],[1625,1625]]],[1536586348378,["gjx16@GJXAIOU",[[1,1624,"#include"]],[1624,1624],[1632,1632]]],[1536586351868,["gjx16@GJXAIOU",[[1,1632,"<."]],[1632,1632],[1634,1634]]],[1536586352893,["gjx16@GJXAIOU",[[-1,1633,"."]],[1634,1634],[1633,1633]]],[1536586353390,["gjx16@GJXAIOU",[[1,1633,">"]],[1633,1633],[1634,1634]]],[1536586358341,["gjx16@GJXAIOU",[[1,1633,"stdio.h"]],[1633,1633],[1640,1640]]],[1536586539626,["gjx16@GJXAIOU",[[-1,1667,"15"]],[1669,1669],[1667,1667]]],[1536586540825,["gjx16@GJXAIOU",[[1,1667,"20"]],[1667,1667],[1669,1669]]],[1536587142252,["gjx16@GJXAIOU",[[1,1642,"\n"],[1,1645," "],[1,1653,"\n"],[1,1654,"\n"],[-1,1667,"2"],[1,1668,"5"],[1,1682,"\n"],[1,1699,"\n"],[1,1717,"\n"],[1,1816," "],[1,1820,"\n"],[1,1830," "],[1,1849,"\n"],[1,1870,"char  tmp1;\n"],[1,1876,"1 "],[1,1879," "],[1,1888,"\n"],[1,1899," "],[1,1902," "],[1,1909," "],[1,1912," "],[1,1915,"\n"],[1,1926," "],[1,1927," "],[1,1931," "],[1,1932," "],[1,1936,"1"],[-1,1938,"  \n"],[1,1947," "],[1,1951," "],[1,1960," "]],[1624,2008],[2045,2045]]],[1536587150312,["gjx16@GJXAIOU",[[1,1617,"()"]],[1617,1617],[1619,1619]]],[1536587155721,["gjx16@GJXAIOU",[[1,1618,"Qt zho"]],[1618,1618],[1624,1624]]],[1536587156533,["gjx16@GJXAIOU",[[-1,1621,"zho"]],[1624,1624],[1621,1621]]],[1536587160297,["gjx16@GJXAIOU",[[1,1621,"中默认是hi"]],[1621,1621],[1627,1627]]],[1536587161182,["gjx16@GJXAIOU",[[-1,1625,"hi"]],[1627,1627],[1625,1625]]],[1536587169436,["gjx16@GJXAIOU",[[1,1625,"UTF-8编码"]],[1625,1625],[1632,1632]]],[1536587197334,["gjx16@GJXAIOU",[[1,2077,"\n"]],[2066,2066],[2067,2067]]],[1536587197479,["gjx16@GJXAIOU",[[1,2078,"\n"]],[2067,2067],[2068,2068]]],[1536587206541,["gjx16@GJXAIOU",[[1,2068,"****"]],[2068,2068],[2070,2070]]],[1536587217260,["gjx16@GJXAIOU",[[1,2070,"字符串和字符数组的差别"]],[2070,2070],[2081,2081]]],[1536587219494,["gjx16@GJXAIOU",[[1,2094,"\n"]],[2083,2083],[2084,2084]]],[1536587220572,["gjx16@GJXAIOU",[[1,2095,"\n"]],[2084,2084],[2085,2085]]],[1536587231838,["gjx16@GJXAIOU",[[1,2085,"字符串在内存中是以"]],[2085,2085],[2094,2094]]],[1536587236820,["gjx16@GJXAIOU",[[1,2094,"0结尾；"]],[2094,2094],[2098,2098]]],[1536587254140,["gjx16@GJXAIOU",[[1,2109,"\n"]],[2098,2098],[2099,2099]]],[1536587257093,["gjx16@GJXAIOU",[[1,2099,"```"]],[2099,2099],[2102,2102]]],[1536587257120,["gjx16@GJXAIOU",[[1,2102,"language\n```\n"]],[2102,2102],[2102,2110]]],[1536587258125,["gjx16@GJXAIOU",[[-1,2102,"language"],[1,2110,"c"]],[2102,2110],[2103,2103]]],[1536587258367,["gjx16@GJXAIOU",[[1,2104,"\n"]],[2103,2103],[2104,2104]]],[1536587262147,["gjx16@GJXAIOU",[[1,2104,"int main()"]],[2104,2104],[2114,2114]]],[1536587262827,["gjx16@GJXAIOU",[[1,2115,"\n"]],[2114,2114],[2115,2115]]],[1536587264127,["gjx16@GJXAIOU",[[1,2115,"{}"]],[2115,2115],[2117,2117]]],[1536587265131,["gjx16@GJXAIOU",[[1,2116,"\n"]],[2116,2116],[2117,2117]]],[1536587265306,["gjx16@GJXAIOU",[[1,2117,"\n"]],[2117,2117],[2118,2118]]],[1536587271101,["gjx16@GJXAIOU",[[1,2117,"return 0;"]],[2117,2117],[2126,2126]]],[1536587273124,["gjx16@GJXAIOU",[[1,2117,"\n"]],[2116,2116],[2117,2117]]],[1536587273301,["gjx16@GJXAIOU",[[1,2118,"\n"]],[2117,2117],[2118,2118]]],[1536587273484,["gjx16@GJXAIOU",[[1,2119,"\n"]],[2118,2118],[2119,2119]]],[1536587275780,["gjx16@GJXAIOU",[[1,2117,"  "]],[2117,2117],[2119,2119]]],[1536587295846,["gjx16@GJXAIOU",[[1,2119,"int"]],[2119,2119],[2122,2122]]],[1536587296524,["gjx16@GJXAIOU",[[-1,2119,"int"]],[2122,2122],[2119,2119]]],[1536587305038,["gjx16@GJXAIOU",[[1,2119,"char s[5];"]],[2119,2119],[2129,2129]]],[1536587305923,["gjx16@GJXAIOU",[[1,2130,"  \n"]],[2129,2129],[2132,2132]]],[1536587308727,["gjx16@GJXAIOU",[[-1,2130,"  "]],[2132,2132],[2130,2130]]],[1536587309092,["gjx16@GJXAIOU",[[-1,2132,"\n"]],[2130,2130],[2129,2129]]],[1536587309489,["gjx16@GJXAIOU",[[-1,2128,";"]],[2129,2129],[2128,2128]]],[1536587311859,["gjx16@GJXAIOU",[[1,2128," = 0"]],[2128,2128],[2132,2132]]],[1536587312424,["gjx16@GJXAIOU",[[-1,2131,"0"]],[2132,2132],[2131,2131]]],[1536587315937,["gjx16@GJXAIOU",[[1,2131,"{0};"]],[2131,2131],[2135,2135]]],[1536587317690,["gjx16@GJXAIOU",[[1,2136,"  \n"]],[2135,2135],[2138,2138]]],[1536587320595,["gjx16@GJXAIOU",[[1,2138,"a"]],[2138,2138],[2139,2139]]],[1536587321466,["gjx16@GJXAIOU",[[-1,2138,"a"]],[2139,2139],[2138,2138]]],[1536587333815,["gjx16@GJXAIOU",[[1,2138,"s[0] = 'a';"]],[2138,2138],[2149,2149]]],[1536587334485,["gjx16@GJXAIOU",[[1,2150,"  \n"]],[2149,2149],[2152,2152]]],[1536587340848,["gjx16@GJXAIOU",[[1,2152,"s[1] = ;"]],[2152,2152],[2160,2160]]],[1536587341713,["gjx16@GJXAIOU",[[-1,2159,";"]],[2160,2160],[2159,2159]]],[1536587346514,["gjx16@GJXAIOU",[[1,2159,"'b';"]],[2159,2159],[2163,2163]]],[1536587347431,["gjx16@GJXAIOU",[[1,2164,"  \n"]],[2163,2163],[2166,2166]]],[1536587352406,["gjx16@GJXAIOU",[[1,2166,"s[2] "]],[2166,2166],[2171,2171]]],[1536587357756,["gjx16@GJXAIOU",[[1,2171,"= 'c'l"]],[2171,2171],[2177,2177]]],[1536587358741,["gjx16@GJXAIOU",[[-1,2176,"l"]],[2177,2177],[2176,2176]]],[1536587359390,["gjx16@GJXAIOU",[[1,2176,";"]],[2176,2176],[2177,2177]]],[1536587361243,["gjx16@GJXAIOU",[[1,2178,"  \n"]],[2177,2177],[2180,2180]]],[1536587383465,["gjx16@GJXAIOU",[[1,2180,"s[3] = 'd';"]],[2180,2180],[2191,2191]]],[1536587398735,["gjx16@GJXAIOU",[[1,2192,"  \n"]],[2191,2191],[2194,2194]]],[1536587404957,["gjx16@GJXAIOU",[[1,2194,"printf();"]],[2194,2194],[2203,2203]]],[1536587408220,["gjx16@GJXAIOU",[[1,2201,"\"\""]],[2201,2201],[2203,2203]]],[1536587410743,["gjx16@GJXAIOU",[[1,2202,"/2"]],[2202,2202],[2204,2204]]],[1536587411884,["gjx16@GJXAIOU",[[-1,2202,"/2"]],[2204,2204],[2202,2202]]],[1536587416697,["gjx16@GJXAIOU",[[1,2202,"%d\\n"]],[2202,2202],[2206,2206]]],[1536587425641,["gjx16@GJXAIOU",[[1,2207,",s"]],[2207,2207],[2209,2209]]],[1536587429392,["gjx16@GJXAIOU",[[-1,2213,"\n"]],[2213,2213],[2212,2212]]],[1536587429518,["gjx16@GJXAIOU",[[-1,2212,"\n"]],[2212,2212],[2211,2211]]],[1536587435159,["gjx16@GJXAIOU",[[1,2104,"\n"]],[2103,2103],[2104,2104]]],[1536587442222,["gjx16@GJXAIOU",[[1,2104,"#include<>"]],[2104,2104],[2114,2114]]],[1536587446182,["gjx16@GJXAIOU",[[1,2113,"stdio.h"]],[2113,2113],[2120,2120]]],[1536587485830,["gjx16@GJXAIOU",[[-1,2221,"d"]],[2222,2222],[2221,2221]]],[1536587486336,["gjx16@GJXAIOU",[[1,2221,"s"]],[2221,2221],[2222,2222]]],[1536587491283,["gjx16@GJXAIOU",[[1,2098,",yi"]],[2098,2098],[2101,2101]]],[1536587492259,["gjx16@GJXAIOU",[[-1,2099,"yi"]],[2101,2101],[2099,2099]]],[1536587510369,["gjx16@GJXAIOU",[[1,2099,"以下程序可以正常的输出字符串“”"]],[2099,2099],[2115,2115]]],[1536587516209,["gjx16@GJXAIOU",[[1,2114,"abcd"]],[2114,2114],[2118,2118]]],[1536587519610,["gjx16@GJXAIOU",[[1,2278,"\n"]],[2266,2266],[2267,2267]]],[1536587520304,["gjx16@GJXAIOU",[[1,2279,"\n"]],[2267,2267],[2268,2268]]],[1536587522234,["gjx16@GJXAIOU",[[1,2268,"danshi"]],[2268,2268],[2274,2274]]],[1536587523701,["gjx16@GJXAIOU",[[-1,2268,"danshi"]],[2274,2274],[2268,2268]]],[1536587529407,["gjx16@GJXAIOU",[[1,2119,"，"]],[2119,2119],[2120,2120]]],[1536587535615,["gjx16@GJXAIOU",[[1,2120,"因为是【"]],[2120,2120],[2124,2124]]],[1536587536835,["gjx16@GJXAIOU",[[-1,2122,"是【"]],[2124,2124],[2122,2122]]],[1536587563113,["gjx16@GJXAIOU",[[1,2122,"s[4]的值为0，所以这是一个字符串；"]],[2122,2122],[2141,2141]]],[1536587569347,["gjx16@GJXAIOU",[[1,2302,"\n"]],[2288,2288],[2289,2289]]],[1536587569384,["gjx16@GJXAIOU",[[1,2303,"\n"]],[2289,2289],[2290,2290]]],[1536587592364,["gjx16@GJXAIOU",[[1,2290,"当将"]],[2290,2290],[2292,2292]]],[1536587595850,["gjx16@GJXAIOU",[[1,2292,"s[4["]],[2292,2292],[2296,2296]]],[1536587596779,["gjx16@GJXAIOU",[[-1,2295,"["]],[2296,2296],[2295,2295]]],[1536587603749,["gjx16@GJXAIOU",[[1,2295,"]同样刚复制"]],[2295,2295],[2301,2301]]],[1536587605013,["gjx16@GJXAIOU",[[-1,2298,"刚复制"]],[2301,2301],[2298,2298]]],[1536587620469,["gjx16@GJXAIOU",[[1,2298,"赋值之后，在输出就是乱码了"]],[2298,2298],[2311,2311]]],[1536587631208,["gjx16@GJXAIOU",[[1,2304,"以%s"]],[2304,2304],[2307,2307]]],[1536587636004,["gjx16@GJXAIOU",[[1,2314,",cheng"]],[2314,2314],[2320,2320]]],[1536587637999,["gjx16@GJXAIOU",[[-1,2315,"cheng"]],[2320,2320],[2315,2315]]],[1536587642483,["gjx16@GJXAIOU",[[1,2315,"程序如下；"]],[2315,2315],[2320,2320]]],[1536587643281,["gjx16@GJXAIOU",[[-1,2319,"；"]],[2320,2320],[2319,2319]]],[1536587643644,["gjx16@GJXAIOU",[[1,2319,"："]],[2319,2319],[2320,2320]]],[1536587644320,["gjx16@GJXAIOU",[[1,2334,"\n"]],[2320,2320],[2321,2321]]],[1536587645226,["gjx16@GJXAIOU",[[1,2335,"\n"]],[2321,2321],[2322,2322]]],[1536587647936,["gjx16@GJXAIOU",[[1,2322,"```"]],[2322,2322],[2325,2325]]],[1536587647963,["gjx16@GJXAIOU",[[1,2325,"language\n```\n"]],[2325,2325],[2325,2333]]],[1536587648858,["gjx16@GJXAIOU",[[-1,2325,"language"],[1,2333,"c"]],[2325,2333],[2326,2326]]],[1536587649071,["gjx16@GJXAIOU",[[1,2327,"\n"]],[2326,2326],[2327,2327]]],[1536587656036,["gjx16@GJXAIOU",[[1,2327,"#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\nreturn 0;\n}"]],[2327,2327],[2464,2464]]],[1536587658833,["gjx16@GJXAIOU",[[1,2435,"\n  "]],[2432,2432],[2435,2435]]],[1536587668146,["gjx16@GJXAIOU",[[1,2435,"s[4] = ;"]],[2435,2435],[2443,2443]]],[1536587668968,["gjx16@GJXAIOU",[[-1,2442,";"]],[2443,2443],[2442,2442]]],[1536587673380,["gjx16@GJXAIOU",[[1,2442,"'e';"]],[2442,2442],[2446,2446]]],[1536587704141,["gjx16@GJXAIOU",[[1,1635,"\n"]],[1633,1633],[1634,1634]]],[1536587740461,["gjx16@GJXAIOU",[[1,1635,"(0"]],[1635,1635],[1637,1637]]],[1536587741348,["gjx16@GJXAIOU",[[-1,1636,"0"]],[1637,1637],[1636,1636]]],[1536587741724,["gjx16@GJXAIOU",[[1,1636,")"]],[1636,1636],[1637,1637]]],[1536587744383,["gjx16@GJXAIOU",[[1,1636,"gongju"]],[1636,1636],[1642,1642]]],[1536587745637,["gjx16@GJXAIOU",[[-1,1636,"gongju"]],[1642,1642],[1636,1636]]],[1536587751547,["gjx16@GJXAIOU",[[1,1636,"工具-》"]],[1636,1636],[1640,1640]]],[1536587752641,["gjx16@GJXAIOU",[[-1,1639,"》"]],[1640,1640],[1639,1639]]],[1536587761803,["gjx16@GJXAIOU",[[1,1639,">选项 -》"]],[1639,1639],[1645,1645]]],[1536587762721,["gjx16@GJXAIOU",[[-1,1644,"》"]],[1645,1645],[1644,1644]]],[1536587766423,["gjx16@GJXAIOU",[[1,1644,"> w"]],[1644,1644],[1647,1647]]],[1536587767141,["gjx16@GJXAIOU",[[-1,1646,"w"]],[1647,1647],[1646,1646]]],[1536587771564,["gjx16@GJXAIOU",[[1,1646,"文本编辑器"]],[1646,1646],[1651,1651]]],[1536587776118,["gjx16@GJXAIOU",[[1,1651,"  -》"]],[1651,1651],[1655,1655]]],[1536587777082,["gjx16@GJXAIOU",[[-1,1654,"》"]],[1655,1655],[1654,1654]]],[1536587793382,["gjx16@GJXAIOU",[[1,1654,"> xin"]],[1654,1654],[1659,1659]]],[1536587795847,["gjx16@GJXAIOU",[[-1,1656,"xin"]],[1659,1659],[1656,1656]]],[1536587803486,["gjx16@GJXAIOU",[[1,1656,"行为 -》"]],[1656,1656],[1661,1661]]],[1536587804472,["gjx16@GJXAIOU",[[-1,1660,"》"]],[1661,1661],[1660,1660]]],[1536587809991,["gjx16@GJXAIOU",[[1,1660,">文件编码"]],[1660,1660],[1665,1665]]],[1536587822470,["gjx16@GJXAIOU",[[1,2529,"\n"]],[2514,2514],[2515,2515]]],[1536587822853,["gjx16@GJXAIOU",[[1,2530,"\n"]],[2515,2515],[2516,2516]]],[1536587824516,["gjx16@GJXAIOU",[[1,2516,"****"]],[2516,2516],[2518,2518]]],[1536587831885,["gjx16@GJXAIOU",[[1,2518,"当一个数组之后"]],[2518,2518],[2525,2525]]],[1536587832443,["gjx16@GJXAIOU",[[-1,2524,"后"]],[2525,2525],[2524,2524]]],[1536587847367,["gjx16@GJXAIOU",[[1,2524,"中既含有汉字又含有字母的时候，"]],[2524,2524],[2539,2539]]],[1536587966781,["gjx16@GJXAIOU",[[1,2543,"·"]],[2543,2543],[2544,2544]]],[1536587967956,["gjx16@GJXAIOU",[[-1,2543,"·"]],[2544,2544],[2543,2543]]],[1536587972512,["gjx16@GJXAIOU",[[1,2543,"===="]],[2543,2543],[2545,2545]]],[1536587974011,["gjx16@GJXAIOU",[[1,2545,"法"]],[2545,2545],[2546,2546]]],[1536587975211,["gjx16@GJXAIOU",[[-1,2545,"法"]],[2546,2546],[2545,2545]]],[1536587980580,["gjx16@GJXAIOU",[[1,2545,"如果一个"]],[2545,2545],[2549,2549]]],[1536587981791,["gjx16@GJXAIOU",[[-1,2547,"一个"]],[2549,2549],[2547,2547]]],[1536587988406,["gjx16@GJXAIOU",[[1,2547,"建一个字符串"]],[2547,2547],[2553,2553]]],[1536587991133,["gjx16@GJXAIOU",[[-1,2547,"建"]],[2548,2548],[2547,2547]]],[1536587992312,["gjx16@GJXAIOU",[[1,2547,"将"]],[2547,2547],[2548,2548]]],[1536588011445,["gjx16@GJXAIOU",[[1,2553,"当做char处理，那么"]],[2553,2553],[2564,2564]]],[1536588036616,["gjx16@GJXAIOU",[[1,2564,"标准的ASACII字符一定是个整数，二"]],[2564,2564],[2583,2583]]],[1536588037080,["gjx16@GJXAIOU",[[-1,2582,"二"]],[2583,2583],[2582,2582]]],[1536588053003,["gjx16@GJXAIOU",[[1,2582,"而汉字的第一个字节一定是复数"]],[2582,2582],[2596,2596]]],[1536588053633,["gjx16@GJXAIOU",[[-1,2594,"复数"]],[2596,2596],[2594,2594]]],[1536588056771,["gjx16@GJXAIOU",[[1,2594,"负数"]],[2594,2594],[2596,2596]]],[1536588146452,["gjx16@GJXAIOU",[[1,2601,"----"]],[2601,2601],[2605,2605]]],[1536588147351,["gjx16@GJXAIOU",[[1,2615,"\n"]],[2605,2605],[2606,2606]]],[1536588148833,["gjx16@GJXAIOU",[[1,2606,"333333333"]],[2606,2606],[2615,2615]]]],null,"gjx16@GJXAIOU"],["37cf9c20-66d9-4dce-aefb-4dc42e031dd4",1536664623962,"# day6字符串与字符数组\n\n## 字符数组的定义\n\n```c\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n\n  return 0；\n}\n```\n\n**将一个字符串里面的元素进行排序**\n\n```c\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[5]  =  \"acdb\";\n\n  for(i  =  0  ;i  <  (sizeof(array)-1)  ;  i++)\n\n  {\n\n  for(j  =  1;j  <  ((sizeof(array)-1)-i)  ;j++)\n\n  {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n  {\n\n  tmp  =  array[j];\n\n  array[j]  =  array[j-1];\n\n  array[j-1]  =  tmp;\n\n  }\n\n  }\n\n  }\n\n  printf(\"%s\\n\",array);\n\n  return  0;\n\n}\n```\n\n\n**将字符串进行逆置**\n1.直接进行逆置（一般不输出结果因为后面很多0）\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  int  min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\n  return  0;\n\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n**如何将汉字进行倒置**\n在ASCII码中一个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码)\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[50]  =  \"你好世界\";\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max  -1];\n\n  str[max  -1]  =  str[min];\n\n  str[min]  =  tmp;\n\nchar  tmp1;\n\n  tmp1  =  str[max];\n\n  str[max]  =  str[min  +  1];\n\n  str[min  +  1]  =  tmp1;\n\n  min  +=  2;\n\n  max  -=2;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n\n**字符串和字符数组的差别**\n\n字符串在内存中是以0结尾；,以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候，**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n----\n333333333\n\n\n\n\n\n\n\n\n\n",[[1536664572352,["gjx16@GJXAIOU",[[-1,2601,"----\n333333333"]],[2601,2615],[2601,2601]]],[1536664572512,["gjx16@GJXAIOU",[[-1,2610,"\n"]],[2601,2601],[2600,2600]]],[1536664573067,["gjx16@GJXAIOU",[[-1,2609,"\n"]],[2600,2600],[2599,2599]]],[1536664698976,["gjx16@GJXAIOU",[[1,2603," "]],[2603,2603],[2604,2604]]],[1536665287691,["gjx16@GJXAIOU",[[1,2603,"\n"]],[2600,2600],[2601,2601]]],[1536665287999,["gjx16@GJXAIOU",[[1,2604,"\n"]],[2601,2601],[2602,2602]]],[1536665288160,["gjx16@GJXAIOU",[[1,2605,"\n"]],[2602,2602],[2603,2603]]],[1536665288317,["gjx16@GJXAIOU",[[1,2606,"\n"]],[2603,2603],[2604,2604]]],[1536665294640,["gjx16@GJXAIOU",[[1,2604,"## 字符串的额"]],[2604,2604],[2612,2612]]],[1536665296053,["gjx16@GJXAIOU",[[-1,2611,"额"]],[2612,2612],[2611,2611]]],[1536665298015,["gjx16@GJXAIOU",[[1,2611,"使用"]],[2611,2611],[2613,2613]]],[1536665298753,["gjx16@GJXAIOU",[[1,2616,"\n"]],[2613,2613],[2614,2614]]],[1536665299296,["gjx16@GJXAIOU",[[1,2617,"\n"]],[2614,2614],[2615,2615]]],[1536665299454,["gjx16@GJXAIOU",[[1,2618,"\n"]],[2615,2615],[2616,2616]]],[1536665304594,["gjx16@GJXAIOU",[[1,2616,"****"]],[2616,2616],[2618,2618]]],[1536665319900,["gjx16@GJXAIOU",[[1,2618,"1.去掉字符串右边的空格"]],[2618,2618],[2630,2630]]],[1536665322415,["gjx16@GJXAIOU",[[1,2635,"\n"]],[2632,2632],[2633,2633]]],[1536665323000,["gjx16@GJXAIOU",[[1,2636,"\n"]],[2633,2633],[2634,2634]]],[1536665832218,["gjx16@GJXAIOU",[[1,2634,"```"]],[2634,2634],[2637,2637]]],[1536665832245,["gjx16@GJXAIOU",[[1,2637,"language\n```\n"]],[2637,2637],[2637,2645]]],[1536665833235,["gjx16@GJXAIOU",[[-1,2637,"language"],[1,2645,"c"]],[2637,2645],[2638,2638]]],[1536665833550,["gjx16@GJXAIOU",[[1,2639,"\n"]],[2638,2638],[2639,2639]]],[1536665907990,["gjx16@GJXAIOU",[[1,2639,"int main_"]],[2639,2639],[2648,2648]]],[1536665908572,["gjx16@GJXAIOU",[[-1,2647,"_"]],[2648,2648],[2647,2647]]],[1536665910291,["gjx16@GJXAIOU",[[1,2647,"()"]],[2647,2647],[2649,2649]]],[1536665911320,["gjx16@GJXAIOU",[[1,2650,"\n"]],[2649,2649],[2650,2650]]],[1536665912660,["gjx16@GJXAIOU",[[1,2650,"{}"]],[2650,2650],[2652,2652]]],[1536665913667,["gjx16@GJXAIOU",[[1,2651,"\n"]],[2651,2651],[2652,2652]]],[1536665913837,["gjx16@GJXAIOU",[[1,2652,"\n"]],[2652,2652],[2653,2653]]],[1536665914015,["gjx16@GJXAIOU",[[1,2653,"\n"]],[2653,2653],[2654,2654]]],[1536665914187,["gjx16@GJXAIOU",[[1,2654,"\n"]],[2654,2654],[2655,2655]]],[1536665914382,["gjx16@GJXAIOU",[[1,2655,"\n"]],[2655,2655],[2656,2656]]],[1536665931547,["gjx16@GJXAIOU",[[1,2652,"  //首先获取字符串的长度"]],[2652,2652],[2666,2666]]],[1536665935441,["gjx16@GJXAIOU",[[1,2651,"  "]],[2651,2651],[2653,2653]]],[1536665935838,["gjx16@GJXAIOU",[[1,2654,"\n"]],[2653,2653],[2654,2654]]],[1536665942237,["gjx16@GJXAIOU",[[1,2654,"  cha"]],[2654,2654],[2659,2659]]],[1536665947783,["gjx16@GJXAIOU",[[1,2659,"r s[1"]],[2659,2659],[2664,2664]]],[1536665948883,["gjx16@GJXAIOU",[[-1,2663,"1"]],[2664,2664],[2663,2663]]],[1536665956229,["gjx16@GJXAIOU",[[1,2663,"20] = \"\";"]],[2663,2663],[2672,2672]]],[1536665962512,["gjx16@GJXAIOU",[[1,2670,"hello woe"]],[2670,2670],[2679,2679]]],[1536665963332,["gjx16@GJXAIOU",[[-1,2678,"e"]],[2679,2679],[2678,2678]]],[1536665965124,["gjx16@GJXAIOU",[[1,2678,"rlf"]],[2678,2678],[2681,2681]]],[1536665965622,["gjx16@GJXAIOU",[[-1,2680,"f"]],[2681,2681],[2680,2680]]],[1536665965735,["gjx16@GJXAIOU",[[1,2680,"d"]],[2680,2680],[2681,2681]]],[1536665977793,["gjx16@GJXAIOU",[[1,2699,"  \n"]],[2698,2698],[2701,2701]]],[1536665989239,["gjx16@GJXAIOU",[[1,2701,"int len = 0;"]],[2701,2701],[2713,2713]]],[1536665989936,["gjx16@GJXAIOU",[[1,2714,"  \n"]],[2713,2713],[2716,2716]]],[1536665996874,["gjx16@GJXAIOU",[[1,2716,"while()"]],[2716,2716],[2723,2723]]],[1536666008286,["gjx16@GJXAIOU",[[1,2722,"s[len"]],[2722,2722],[2727,2727]]],[1536666009209,["gjx16@GJXAIOU",[[-1,2726,"n"]],[2727,2727],[2726,2726]]],[1536666014556,["gjx16@GJXAIOU",[[1,2726,"n++]"]],[2726,2726],[2730,2730]]],[1536666018440,["gjx16@GJXAIOU",[[1,2732,"  \n"]],[2731,2731],[2734,2734]]],[1536666020805,["gjx16@GJXAIOU",[[1,2734,"{}"]],[2734,2734],[2736,2736]]],[1536666022602,["gjx16@GJXAIOU",[[1,2735,"\n  \n  \n  "]],[2735,2735],[2744,2744]]],[1536666043840,["gjx16@GJXAIOU",[[1,2738,"  len --;"]],[2738,2738],[2747,2747]]],[1536666047176,["gjx16@GJXAIOU",[[-1,2748,"  "]],[2750,2750],[2748,2748]]],[1536666047579,["gjx16@GJXAIOU",[[-1,2748,"\n"]],[2748,2748],[2747,2747]]],[1536666050193,["gjx16@GJXAIOU",[[1,2752,"    "]],[2752,2752],[2756,2756]]],[1536666122838,["gjx16@GJXAIOU",[[1,2756,"inr"]],[2756,2756],[2759,2759]]],[1536666123097,["gjx16@GJXAIOU",[[1,2759," "]],[2759,2759],[2760,2760]]],[1536666126110,["gjx16@GJXAIOU",[[-1,2758,"r "]],[2760,2760],[2758,2758]]],[1536666128038,["gjx16@GJXAIOU",[[1,2758,"t "]],[2758,2758],[2760,2760]]],[1536666131191,["gjx16@GJXAIOU",[[-1,2756,"int "]],[2760,2760],[2756,2756]]],[1536666134374,["gjx16@GJXAIOU",[[-1,2752,"    "],[1,2756,"\n"]],[2756,2756],[2753,2753]]],[1536666179628,["gjx16@GJXAIOU",[[1,2753,"  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；"]],[2753,2753],[2784,2784]]],[1536666346624,["gjx16@GJXAIOU",[[1,2785,"  \n"]],[2784,2784],[2787,2787]]],[1536666348545,["gjx16@GJXAIOU",[[-1,2785,"  "],[1,2787,"\n"]],[2787,2787],[2786,2786]]],[1536666361062,["gjx16@GJXAIOU",[[1,2786,"  int i= "]],[2786,2786],[2795,2795]]],[1536666361987,["gjx16@GJXAIOU",[[-1,2793,"= "]],[2795,2795],[2793,2793]]],[1536666362301,["gjx16@GJXAIOU",[[1,2793," "]],[2793,2793],[2794,2794]]],[1536666364628,["gjx16@GJXAIOU",[[1,2794,"= 0;"]],[2794,2794],[2798,2798]]],[1536666365488,["gjx16@GJXAIOU",[[1,2799,"  \n"]],[2798,2798],[2801,2801]]],[1536666372194,["gjx16@GJXAIOU",[[1,2801,"for()"]],[2801,2801],[2806,2806]]],[1536666396847,["gjx16@GJXAIOU",[[1,2805,"i = len - 1;i >= 0;i__"]],[2805,2805],[2827,2827]]],[1536666397863,["gjx16@GJXAIOU",[[-1,2825,"__"]],[2827,2827],[2825,2825]]],[1536666399033,["gjx16@GJXAIOU",[[1,2825,"--"]],[2825,2825],[2827,2827]]],[1536666401347,["gjx16@GJXAIOU",[[1,2829,"  \n"]],[2828,2828],[2831,2831]]],[1536666407017,["gjx16@GJXAIOU",[[1,2831,"  {}"]],[2831,2831],[2835,2835]]],[1536666408927,["gjx16@GJXAIOU",[[1,2834,"\n    \n    "]],[2834,2834],[2844,2844]]],[1536666412227,["gjx16@GJXAIOU",[[1,2839,"  "]],[2839,2839],[2841,2841]]],[1536666690880,["gjx16@GJXAIOU",[[1,2841,"if()"]],[2841,2841],[2845,2845]]],[1536666709894,["gjx16@GJXAIOU",[[1,2844,"s[i] != ' '"]],[2844,2844],[2855,2855]]],[1536666725993,["gjx16@GJXAIOU",[[1,2861,"  \n    "]],[2856,2856],[2863,2863]]],[1536666735069,["gjx16@GJXAIOU",[[1,2863,"  s[i+"]],[2863,2863],[2869,2869]]],[1536666736279,["gjx16@GJXAIOU",[[-1,2868,"+"]],[2869,2869],[2868,2868]]],[1536666749422,["gjx16@GJXAIOU",[[1,2868," + 1] = 0;"]],[2868,2868],[2878,2878]]],[1536667045545,["gjx16@GJXAIOU",[[1,2883,"    \n    "]],[2878,2878],[2887,2887]]],[1536667049533,["gjx16@GJXAIOU",[[1,2887,"break;"]],[2887,2887],[2893,2893]]],[1536667095645,["gjx16@GJXAIOU",[[1,2900,"    printf();"]],[2900,2900],[2913,2913]]],[1536667099889,["gjx16@GJXAIOU",[[1,2911,"\"\""]],[2911,2911],[2913,2913]]],[1536667103628,["gjx16@GJXAIOU",[[1,2912,"()"]],[2912,2912],[2914,2914]]],[1536667108753,["gjx16@GJXAIOU",[[1,2913,"%S"]],[2913,2913],[2915,2915]]],[1536667110554,["gjx16@GJXAIOU",[[-1,2914,"S"]],[2915,2915],[2914,2914]]],[1536667113999,["gjx16@GJXAIOU",[[1,2914,"s\\n"]],[2914,2914],[2917,2917]]],[1536667119407,["gjx16@GJXAIOU",[[1,2919,",s"]],[2919,2919],[2921,2921]]],[1536667135914,["gjx16@GJXAIOU",[[1,2924,"    \n"]],[2923,2923],[2928,2928]]],[1536667140661,["gjx16@GJXAIOU",[[1,2928,"return "]],[2928,2928],[2935,2935]]],[1536667144417,["gjx16@GJXAIOU",[[1,2935,"0;"]],[2935,2935],[2937,2937]]],[1536667601318,["gjx16@GJXAIOU",[[1,2681,"   "]],[2681,2681],[2684,2684]]],[1536667942447,["gjx16@GJXAIOU",[[1,2639,"\n"]],[2639,2639],[2640,2640]]],[1536667945675,["gjx16@GJXAIOU",[[1,2639,"#"]],[2639,2639],[2640,2640]]],[1536668277473,["gjx16@GJXAIOU",[[1,2736,";"]],[2736,2736],[2737,2737]]],[1536668281201,["gjx16@GJXAIOU",[[-1,2739," {"]],[2741,2741],[2739,2739]]],[1536668283766,["gjx16@GJXAIOU",[[-1,2756,"\n"]],[2756,2756],[2755,2755]]],[1536668285223,["gjx16@GJXAIOU",[[-1,2752,"  }"]],[2755,2755],[2752,2752]]],[1536668285512,["gjx16@GJXAIOU",[[-1,2752,"\n"]],[2752,2752],[2751,2751]]],[1536668288741,["gjx16@GJXAIOU",[[-1,2738," "]],[2739,2739],[2738,2738]]],[1536668289722,["gjx16@GJXAIOU",[[-1,2738,"\n"]],[2738,2738],[2737,2737]]],[1536668291923,["gjx16@GJXAIOU",[[1,2752,"  \n  "]],[2749,2749],[2754,2754]]],[1536668312017,["gjx16@GJXAIOU",[[1,2866,"{"]],[2866,2866],[2867,2867]]],[1536668318715,["gjx16@GJXAIOU",[[1,2868,"\n         "]],[2868,2868],[2878,2878]]],[1536668319738,["gjx16@GJXAIOU",[[1,2900,"  "]],[2899,2899],[2901,2901]]],[1536668321196,["gjx16@GJXAIOU",[[1,2913,"      \n    "]],[2908,2908],[2919,2919]]],[1536668321593,["gjx16@GJXAIOU",[[1,2919,"}"]],[2919,2919],[2920,2920]]],[1536668323735,["gjx16@GJXAIOU",[[-1,2916,"   }"]],[2920,2920],[2916,2916]]],[1536668324745,["gjx16@GJXAIOU",[[1,2916,"}"]],[2916,2916],[2917,2917]]],[1536668336030,["gjx16@GJXAIOU",[[-1,2939,"\\n)"]],[2942,2942],[2939,2939]]],[1536668339573,["gjx16@GJXAIOU",[[1,2939,")\\n"]],[2939,2939],[2942,2942]]],[1536668357036,["gjx16@GJXAIOU",[[1,2640,"include<>"]],[2640,2640],[2649,2649]]],[1536668362942,["gjx16@GJXAIOU",[[1,2648,"stdio.h"]],[2648,2648],[2655,2655]]],[1536668378511,["gjx16@GJXAIOU",[[1,2986,"****"]],[2986,2986],[2988,2988]]],[1536668380769,["gjx16@GJXAIOU",[[1,2988,"2.qu"]],[2988,2988],[2992,2992]]],[1536668382092,["gjx16@GJXAIOU",[[-1,2990,"qu"]],[2992,2992],[2990,2990]]],[1536668390826,["gjx16@GJXAIOU",[[1,2990,"去掉字符串左边的"]],[2990,2990],[2998,2998]]],[1536668427301,["gjx16@GJXAIOU",[[1,2998,"空格"]],[2998,2998],[3000,3000]]],[1536668432332,["gjx16@GJXAIOU",[[1,3004,"\n"]],[3003,3003],[3004,3004]]],[1536668433252,["gjx16@GJXAIOU",[[1,3004,"···"]],[3004,3004],[3007,3007]]],[1536668434419,["gjx16@GJXAIOU",[[-1,3004,"···"]],[3007,3007],[3004,3004]]],[1536668437483,["gjx16@GJXAIOU",[[1,3004,"      "]],[3004,3004],[3010,3010]]],[1536668438833,["gjx16@GJXAIOU",[[-1,3007,"   "]],[3010,3010],[3007,3007]]],[1536668441301,["gjx16@GJXAIOU",[[1,3007,"```"]],[3007,3007],[3010,3010]]],[1536668444160,["gjx16@GJXAIOU",[[-1,3004,"   ```"]],[3010,3010],[3004,3004]]],[1536668444753,["gjx16@GJXAIOU",[[-1,3004,"\n"]],[3004,3004],[3003,3003]]],[1536668446000,["gjx16@GJXAIOU",[[1,3004,"\n"]],[3003,3003],[3004,3004]]],[1536668448086,["gjx16@GJXAIOU",[[1,3004,"```"]],[3004,3004],[3007,3007]]],[1536668448112,["gjx16@GJXAIOU",[[1,3007,"language\n```\n"]],[3007,3007],[3007,3015]]],[1536668449187,["gjx16@GJXAIOU",[[-1,3007,"language"],[1,3015,"c"]],[3007,3015],[3008,3008]]],[1536668449614,["gjx16@GJXAIOU",[[1,3009,"\n"]],[3008,3008],[3009,3009]]],[1536668452056,["gjx16@GJXAIOU",[[1,3009,"#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}"]],[3009,3009],[3350,3350]]],[1536668578253,["gjx16@GJXAIOU",[[1,3058,"    "]],[3058,3058],[3062,3062]]],[1536668582415,["gjx16@GJXAIOU",[[-1,3073,"   "]],[3076,3076],[3073,3073]]],[1536668649252,["gjx16@GJXAIOU",[[-1,3197," len - 1"]],[3205,3205],[3197,3197]]],[1536668651411,["gjx16@GJXAIOU",[[1,3197," 0"]],[3197,3197],[3199,3199]]],[1536668664840,["gjx16@GJXAIOU",[[-1,3202,">= 0"]],[3206,3206],[3202,3202]]],[1536668680116,["gjx16@GJXAIOU",[[1,3202,"<= len -1"]],[3202,3202],[3211,3211]]],[1536668686384,["gjx16@GJXAIOU",[[-1,3213,"--"]],[3215,3215],[3213,3213]]],[1536668688418,["gjx16@GJXAIOU",[[1,3213,"++"]],[3213,3213],[3215,3215]]],[1536668693391,["gjx16@GJXAIOU",[[-1,3268,"+"]],[3269,3269],[3268,3268]]],[1536668695280,["gjx16@GJXAIOU",[[1,3268,"-"]],[3268,3268],[3269,3269]]],[1536670353043,["gjx16@GJXAIOU",[[1,3027,"\n"],[1,3030," "],[-1,3038,"{  "],[1,3041,"\n{\n"],[1,3048," "],[-1,3055,"= \""],[1,3058," ="],[1,3060,"\""],[1,3067," "],[1,3076,"\n"],[1,3090,"\n"],[1,3097," "],[1,3100," "],[1,3103," "],[1,3105,"\n"],[-1,3125,"  "],[1,3127,"\n"],[1,3132," "],[-1,3137,"    "],[1,3181," "],[1,3182," "],[1,3185," "],[1,3187,"\n\n  int  j  =  0;\n"],[1,3196," "],[1,3197," "],[1,3202," "],[1,3204," "],[1,3209," "],[-1,3217," "],[1,3218,"\n"],[-1,3220," "],[-1,3223,"    "],[1,3227,"\n"],[1,3236," "],[1,3240," "],[1,3241," "],[1,3245,"\n"],[1,3247,"{\n\n"],[1,3249,"for(j"],[-1,3251," { \n"],[1,3255,"=  0;"],[1,3257,"j"],[1,3259,"<"],[1,3261,"len"],[-1,3263," s[i - 1]"],[1,3272,"-1;j++)\n\n  {\n\n  s[j] "],[-1,3275,"0;\n"],[1,3279,"s[i"],[1,3281,"+"],[-1,3283," "],[1,3284,"j];\n\n"],[1,3286,"}\n\n"],[-1,3295,"     "],[1,3300,"\n"],[1,3303,"\n"],[-1,3306,"  "],[1,3309,"\n"],[-1,3312,"  "],[-1,3334,"  "],[1,3336,"\n"],[1,3344," "]],[3009,3350],[3410,3410]]],[1536670369581,["gjx16@GJXAIOU",[[1,3257,"  "]],[3257,3257],[3259,3259]]],[1536670373220,["gjx16@GJXAIOU",[[1,3286,"  "]],[3285,3285],[3287,3287]]],[1536670378075,["gjx16@GJXAIOU",[[1,3324,"    "]],[3324,3324],[3328,3328]]],[1536670380328,["gjx16@GJXAIOU",[[1,3333,"      "]],[3333,3333],[3339,3339]]],[1536670382525,["gjx16@GJXAIOU",[[1,3363,"      "]],[3362,3362],[3368,3368]]],[1536670385550,["gjx16@GJXAIOU",[[-1,3367,"  "]],[3368,3368],[3366,3366]]],[1536670390514,["gjx16@GJXAIOU",[[-1,3360,"\n"]],[3360,3360],[3359,3359]]],[1536670391599,["gjx16@GJXAIOU",[[-1,3330,"\n"]],[3330,3330],[3329,3329]]],[1536670395329,["gjx16@GJXAIOU",[[1,3370,"    "]],[3368,3368],[3372,3372]]],[1536670404892,["gjx16@GJXAIOU",[[1,3281,"  "]],[3280,3280],[3282,3282]]],[1536670406467,["gjx16@GJXAIOU",[[1,3290,"  "]],[3289,3289],[3291,3291]]],[1536670407740,["gjx16@GJXAIOU",[[1,3332,"  "]],[3332,3332],[3334,3334]]],[1536670408674,["gjx16@GJXAIOU",[[1,3371,"  "]],[3370,3370],[3372,3372]]],[1536670411938,["gjx16@GJXAIOU",[[-1,3375,"\n"]],[3375,3375],[3374,3374]]],[1536670414259,["gjx16@GJXAIOU",[[1,3381,"  "]],[3379,3379],[3381,3381]]],[1536670417631,["gjx16@GJXAIOU",[[1,3393,"  "]],[3391,3391],[3393,3393]]],[1536670423085,["gjx16@GJXAIOU",[[-1,3254,"\n"]],[3254,3254],[3253,3253]]],[1536670426016,["gjx16@GJXAIOU",[[-1,3284,"\n"]],[3284,3284],[3283,3283]]],[1536670455689,["gjx16@GJXAIOU",[[1,3322,"    //当是【"]],[3322,3322],[3331,3331]]],[1536670456591,["gjx16@GJXAIOU",[[-1,3330,"【"]],[3331,3331],[3330,3330]]],[1536670459287,["gjx16@GJXAIOU",[[1,3330,"s[li"]],[3330,3330],[3334,3334]]],[1536670460863,["gjx16@GJXAIOU",[[-1,3332,"li"]],[3334,3334],[3332,3332]]],[1536670480195,["gjx16@GJXAIOU",[[1,3332,"i]不等于空格的时候，将元素要替换掉"]],[3332,3332],[3350,3350]]],[1536670484739,["gjx16@GJXAIOU",[[1,3344,"空格"]],[3344,3344],[3346,3346]]],[1536670523202,["gjx16@GJXAIOU",[[1,3475,"\n"]],[3473,3473],[3474,3474]]],[1536670523350,["gjx16@GJXAIOU",[[1,3476,"\n"]],[3474,3474],[3475,3475]]],[1536670523482,["gjx16@GJXAIOU",[[1,3477,"\n"]],[3475,3475],[3476,3476]]]],null,"gjx16@GJXAIOU"],["20ae58fb-79b0-415c-aa0c-cc76968f9c61",1536712358820,"# day6字符串与字符数组\n\n## 字符数组的定义\n\n```c\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n\n  return 0；\n}\n```\n\n**将一个字符串里面的元素进行排序**\n\n```c\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[5]  =  \"acdb\";\n\n  for(i  =  0  ;i  <  (sizeof(array)-1)  ;  i++)\n\n  {\n\n  for(j  =  1;j  <  ((sizeof(array)-1)-i)  ;j++)\n\n  {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n  {\n\n  tmp  =  array[j];\n\n  array[j]  =  array[j-1];\n\n  array[j-1]  =  tmp;\n\n  }\n\n  }\n\n  }\n\n  printf(\"%s\\n\",array);\n\n  return  0;\n\n}\n```\n\n\n**将字符串进行逆置**\n1.直接进行逆置（一般不输出结果因为后面很多0）\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  int  min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\n  return  0;\n\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n**如何将汉字进行倒置**\n在ASCII码中一个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码)\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[50]  =  \"你好世界\";\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max  -1];\n\n  str[max  -1]  =  str[min];\n\n  str[min]  =  tmp;\n\nchar  tmp1;\n\n  tmp1  =  str[max];\n\n  str[max]  =  str[min  +  1];\n\n  str[min  +  1]  =  tmp1;\n\n  min  +=  2;\n\n  max  -=2;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n\n**字符串和字符数组的差别**\n\n字符串在内存中是以0结尾；,以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候，**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n\n\n\n## 字符串的使用\n\n\n**1.去掉字符串右边的空格**\n\n```c\n#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}\n```\n\n**2.去掉字符串左边的空格**\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;\n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n```\n\n\n\n\n \n\n\n\n\n\n",[[1536712310677,["gjx16@GJXAIOU",[[1,3146,"   、、"]],[3146,3146],[3151,3151]]],[1536712312056,["gjx16@GJXAIOU",[[-1,3149,"、、"]],[3151,3151],[3149,3149]]],[1536712324115,["gjx16@GJXAIOU",[[1,3149,"//得到字符串前面的空格数目"]],[3149,3149],[3163,3163]]],[1536712385760,["gjx16@GJXAIOU",[[1,3196,"法一"]],[3196,3196],[3198,3198]]],[1536712387711,["gjx16@GJXAIOU",[[-1,3196,"法一"]],[3198,3198],[3196,3196]]],[1536712390591,["gjx16@GJXAIOU",[[1,3196,"（0法一"]],[3196,3196],[3200,3200]]],[1536712392331,["gjx16@GJXAIOU",[[-1,3196,"（0法一"]],[3200,3200],[3196,3196]]],[1536712393440,["gjx16@GJXAIOU",[[1,3196,"（）"]],[3196,3196],[3198,3198]]],[1536712397196,["gjx16@GJXAIOU",[[1,3197,"法一"]],[3197,3197],[3199,3199]]],[1536712410562,["gjx16@GJXAIOU",[[1,3451,"  \n"]],[3450,3450],[3453,3453]]],[1536712410973,["gjx16@GJXAIOU",[[-1,3451,"  "],[1,3453,"\n"]],[3453,3453],[3452,3452]]],[1536712411157,["gjx16@GJXAIOU",[[1,3454,"\n"]],[3452,3452],[3453,3453]]],[1536712548347,["gjx16@GJXAIOU",[[1,3451,"    、"]],[3451,3451],[3456,3456]]],[1536712549508,["gjx16@GJXAIOU",[[-1,3454," 、"]],[3456,3456],[3454,3454]]],[1536712564253,["gjx16@GJXAIOU",[[1,3454,"// fangfa "]],[3454,3454],[3464,3464]]],[1536712565538,["gjx16@GJXAIOU",[[-1,3457,"fangfa "]],[3464,3464],[3457,3457]]],[1536712567946,["gjx16@GJXAIOU",[[1,3457,"方法二"]],[3457,3457],[3460,3460]]],[1536712568445,["gjx16@GJXAIOU",[[1,3461,"   \n"]],[3460,3460],[3464,3464]]],[1536712588407,["gjx16@GJXAIOU",[[1,3464,"int i = len;"]],[3464,3464],[3476,3476]]],[1536712588775,["gjx16@GJXAIOU",[[1,3477,"   \n"]],[3476,3476],[3480,3480]]],[1536712590761,["gjx16@GJXAIOU",[[1,3480,"shi"]],[3480,3480],[3483,3483]]],[1536712591728,["gjx16@GJXAIOU",[[-1,3480,"shi"]],[3483,3483],[3480,3480]]],[1536712595296,["gjx16@GJXAIOU",[[1,3480,"while()"]],[3480,3480],[3487,3487]]],[1536712601160,["gjx16@GJXAIOU",[[1,3486,"s[i]"]],[3486,3486],[3490,3490]]],[1536712603520,["gjx16@GJXAIOU",[[1,3492,"   \n"]],[3491,3491],[3495,3495]]],[1536712605828,["gjx16@GJXAIOU",[[1,3495,"{}"]],[3495,3495],[3497,3497]]],[1536712607125,["gjx16@GJXAIOU",[[1,3496,"\n   \n   \n   "]],[3496,3496],[3508,3508]]],[1536712639252,["gjx16@GJXAIOU",[[1,3500,"  s[i-len "]],[3500,3500],[3510,3510]]],[1536712639969,["gjx16@GJXAIOU",[[-1,3509," "]],[3510,3510],[3509,3509]]],[1536712640853,["gjx16@GJXAIOU",[[1,3509,"["]],[3509,3509],[3510,3510]]],[1536712641922,["gjx16@GJXAIOU",[[-1,3509,"["]],[3510,3510],[3509,3509]]],[1536712649339,["gjx16@GJXAIOU",[[1,3509,"] = s[i];"]],[3509,3509],[3518,3518]]],[1536712649896,["gjx16@GJXAIOU",[[1,3522,"  \n   "]],[3518,3518],[3524,3524]]],[1536712652787,["gjx16@GJXAIOU",[[1,3524,"i++;"]],[3524,3524],[3528,3528]]],[1536712665213,["gjx16@GJXAIOU",[[-1,3529,"   "]],[3532,3532],[3529,3529]]],[1536712665399,["gjx16@GJXAIOU",[[-1,3529,"\n"]],[3529,3529],[3528,3528]]],[1536712668712,["gjx16@GJXAIOU",[[1,3534,"   \n"]],[3533,3533],[3537,3537]]],[1536712685223,["gjx16@GJXAIOU",[[1,3537,"s[i - len] = 0;"]],[3537,3537],[3552,3552]]],[1536712704864,["gjx16@GJXAIOU",[[1,3460,":to"]],[3460,3460],[3463,3463]]],[1536712705661,["gjx16@GJXAIOU",[[-1,3460,":to"]],[3463,3463],[3460,3460]]],[1536712715111,["gjx16@GJXAIOU",[[1,3460,":同样是替换掉"]],[3460,3460],[3467,3467]]],[1536712721071,["gjx16@GJXAIOU",[[1,3467,"左边的空格"]],[3467,3467],[3472,3472]]],[1536712732130,["gjx16@GJXAIOU",[[1,3453,"\n   \n    "]],[3453,3453],[3462,3462]]],[1536712797688,["gjx16@GJXAIOU",[[1,3164,"  \n"]],[3163,3163],[3166,3166]]],[1536712797839,["gjx16@GJXAIOU",[[-1,3164,"  "],[1,3166,"\n"]],[3166,3166],[3165,3165]]],[1536712797969,["gjx16@GJXAIOU",[[1,3167,"\n"]],[3165,3165],[3166,3166]]],[1536713303528,["gjx16@GJXAIOU",[[-1,3148," //得到字符串前面的空格数目"]],[3163,3163],[3148,3148]]],[1536713308471,["gjx16@GJXAIOU",[[1,3612,"\n"]],[3608,3608],[3609,3609]]],[1536713311927,["gjx16@GJXAIOU",[[1,3609,"```"]],[3609,3609],[3612,3612]]],[1536713311961,["gjx16@GJXAIOU",[[1,3612,"language\n```\n"]],[3612,3612],[3612,3620]]],[1536713312879,["gjx16@GJXAIOU",[[-1,3612,"language"],[1,3620,"c"]],[3612,3620],[3613,3613]]],[1536713313106,["gjx16@GJXAIOU",[[1,3614,"\n"]],[3613,3613],[3614,3614]]],[1536713315565,["gjx16@GJXAIOU",[[1,3604,"\n"]],[3604,3604],[3605,3605]]],[1536713318233,["gjx16@GJXAIOU",[[1,3610,"\n"]],[3608,3608],[3609,3609]]],[1536713318423,["gjx16@GJXAIOU",[[1,3611,"\n"]],[3609,3609],[3610,3610]]],[1536713320334,["gjx16@GJXAIOU",[[1,3610,"faer"]],[3610,3610],[3614,3614]]],[1536713321236,["gjx16@GJXAIOU",[[-1,3610,"faer"]],[3614,3614],[3610,3610]]],[1536713321407,["gjx16@GJXAIOU",[[-1,3611,"\n"]],[3610,3610],[3609,3609]]],[1536713323268,["gjx16@GJXAIOU",[[1,3609,"法二："]],[3609,3609],[3612,3612]]],[1536713334982,["gjx16@GJXAIOU",[[1,3619,"#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;  \n\n\n\n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；（法一）\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n  \n   \n     // 方法二:同样是替换掉左边的空格\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0;\n\n\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n"]],[3619,3619],[4214,4214]]],[1536713342099,["gjx16@GJXAIOU",[[-1,3446,"     // 方法二:同样是替换掉左边的空格\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0;\n\n"]],[3450,3563],[3446,3446]]],[1536713342296,["gjx16@GJXAIOU",[[-1,3447,"\n"]],[3446,3446],[3445,3445]]],[1536713342811,["gjx16@GJXAIOU",[[-1,3442,"   "]],[3445,3445],[3442,3442]]],[1536713342984,["gjx16@GJXAIOU",[[-1,3443,"\n"]],[3442,3442],[3441,3441]]],[1536713343359,["gjx16@GJXAIOU",[[-1,3439,"  "]],[3441,3441],[3439,3439]]],[1536713343594,["gjx16@GJXAIOU",[[-1,3440,"\n"]],[3439,3439],[3438,3438]]],[1536713343770,["gjx16@GJXAIOU",[[-1,3437,"}"]],[3438,3438],[3437,3437]]],[1536713345897,["gjx16@GJXAIOU",[[1,3437,"}"]],[3437,3437],[3438,3438]]],[1536713359942,["gjx16@GJXAIOU",[[-1,3640,"//因为是删除字符串右边的空格，因此需要从最右边进行遍历；（法一）\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n  \n   \n     // 方法二:同样是替换掉左边的空格"]],[3640,3954],[3640,3640]]],[1536713369333,["gjx16@GJXAIOU",[[1,3617," == ‘ ’"]],[3617,3617],[3624,3624]]],[1536713373457,["gjx16@GJXAIOU",[[-1,3620," ‘ ’"]],[3624,3624],[3620,3620]]],[1536713375459,["gjx16@GJXAIOU",[[1,3620,"' '"]],[3620,3620],[3623,3623]]],[1536713391858,["gjx16@GJXAIOU",[[1,3638,"//得到乐乐字符串前面的今个"]],[3638,3638],[3652,3652]]],[1536713392540,["gjx16@GJXAIOU",[[-1,3650,"今个"]],[3652,3652],[3650,3650]]],[1536713393876,["gjx16@GJXAIOU",[[1,3650,"空额"]],[3650,3650],[3652,3652]]],[1536713394890,["gjx16@GJXAIOU",[[-1,3650,"空额"]],[3652,3652],[3650,3650]]],[1536713400946,["gjx16@GJXAIOU",[[1,3650,"空格数量"]],[3650,3650],[3654,3654]]],[1536713404735,["gjx16@GJXAIOU",[[-1,3642,"乐乐"]],[3644,3644],[3642,3642]]],[1536713406408,["gjx16@GJXAIOU",[[1,3642,"了"]],[3642,3642],[3643,3643]]],[1536713410630,["gjx16@GJXAIOU",[[-1,3659,"  "]],[3661,3661],[3659,3659]]],[1536713410814,["gjx16@GJXAIOU",[[-1,3659,"\n"]],[3659,3659],[3658,3658]]],[1536713411025,["gjx16@GJXAIOU",[[-1,3658,"\n"]],[3658,3658],[3657,3657]]],[1536713411443,["gjx16@GJXAIOU",[[-1,3657,"\n"]],[3657,3657],[3656,3656]]],[1536713411598,["gjx16@GJXAIOU",[[-1,3656,"\n"]],[3656,3656],[3655,3655]]],[1536713461430,["gjx16@GJXAIOU",[[-1,3152,"\n"]],[3152,3152],[3151,3151]]],[1536713461644,["gjx16@GJXAIOU",[[-1,3151,"\n"]],[3151,3151],[3150,3150]]],[1536713463920,["gjx16@GJXAIOU",[[-1,3150,"\n"]],[3150,3150],[3149,3149]]],[1536713465716,["gjx16@GJXAIOU",[[-1,3181,"（法一）"]],[3181,3185],[3181,3181]]],[1536713471876,["gjx16@GJXAIOU",[[1,3792,"\n"]],[3788,3788],[3789,3789]]],[1536713472082,["gjx16@GJXAIOU",[[1,3793,"\n"]],[3789,3789],[3790,3790]]],[1536713472265,["gjx16@GJXAIOU",[[1,3794,"\n"]],[3790,3790],[3791,3791]]],[1536713548976,["gjx16@GJXAIOU",[[-1,3743,"\n"]],[3743,3743],[3742,3742]]],[1536713549545,["gjx16@GJXAIOU",[[-1,3742,"\n"]],[3742,3742],[3741,3741]]],[1536713705595,["gjx16@GJXAIOU",[[1,3740," "]],[3740,3740],[3741,3741]]],[1536714108765,["gjx16@GJXAIOU",[[1,3788,"****"]],[3788,3788],[3790,3790]]],[1536714132821,["gjx16@GJXAIOU",[[1,3790,"3.字符串到整数的变化"]],[3790,3790],[3801,3801]]],[1536714136438,["gjx16@GJXAIOU",[[1,3809,"\n"]],[3803,3803],[3804,3804]]],[1536714138535,["gjx16@GJXAIOU",[[1,3810,"\n"]],[3804,3804],[3805,3805]]],[1536714140424,["gjx16@GJXAIOU",[[1,3805,"```"]],[3805,3805],[3808,3808]]],[1536714140452,["gjx16@GJXAIOU",[[1,3808,"language\n```\n"]],[3808,3808],[3808,3816]]],[1536714141940,["gjx16@GJXAIOU",[[-1,3808,"language"],[1,3816,"c"]],[3808,3816],[3809,3809]]],[1536714142681,["gjx16@GJXAIOU",[[1,3810,"\n"]],[3809,3809],[3810,3810]]],[1536714145179,["gjx16@GJXAIOU",[[1,3810,"int="]],[3810,3810],[3814,3814]]],[1536714146332,["gjx16@GJXAIOU",[[-1,3810,"int="]],[3814,3814],[3810,3810]]],[1536714148130,["gjx16@GJXAIOU",[[1,3810,"# "]],[3810,3810],[3812,3812]]],[1536714149037,["gjx16@GJXAIOU",[[-1,3811," "]],[3812,3812],[3811,3811]]],[1536714154606,["gjx16@GJXAIOU",[[1,3811,"include<>"]],[3811,3811],[3820,3820]]],[1536714157675,["gjx16@GJXAIOU",[[1,3819,"std"]],[3819,3819],[3822,3822]]],[1536714160391,["gjx16@GJXAIOU",[[1,3822,"io.h"]],[3822,3822],[3826,3826]]],[1536714162047,["gjx16@GJXAIOU",[[1,3828,"\n"]],[3827,3827],[3828,3828]]],[1536714162095,["gjx16@GJXAIOU",[[1,3829,"\n"]],[3828,3828],[3829,3829]]],[1536714163412,["gjx16@GJXAIOU",[[-1,3829,"\n"]],[3829,3829],[3828,3828]]],[1536714169845,["gjx16@GJXAIOU",[[1,3828,"int main()"]],[3828,3828],[3838,3838]]],[1536714170591,["gjx16@GJXAIOU",[[1,3839,"\n"]],[3838,3838],[3839,3839]]],[1536714171433,["gjx16@GJXAIOU",[[1,3839,"{}"]],[3839,3839],[3841,3841]]],[1536714172515,["gjx16@GJXAIOU",[[1,3840,"\n"]],[3840,3840],[3841,3841]]],[1536714172671,["gjx16@GJXAIOU",[[1,3841,"\n"]],[3841,3841],[3842,3842]]],[1536714172837,["gjx16@GJXAIOU",[[1,3842,"\n"]],[3842,3842],[3843,3843]]],[1536714172987,["gjx16@GJXAIOU",[[1,3843,"\n"]],[3843,3843],[3844,3844]]],[1536714173144,["gjx16@GJXAIOU",[[1,3844,"\n"]],[3844,3844],[3845,3845]]],[1536714176096,["gjx16@GJXAIOU",[[1,3841,"    "]],[3841,3841],[3845,3845]]],[1536714177044,["gjx16@GJXAIOU",[[-1,3844," "]],[3845,3845],[3844,3844]]],[1536714200942,["gjx16@GJXAIOU",[[1,3844,"int s[10] = {}；"]],[3844,3844],[3859,3859]]],[1536714202520,["gjx16@GJXAIOU",[[1,3857," "]],[3857,3857],[3858,3858]]],[1536714203456,["gjx16@GJXAIOU",[[-1,3857," "]],[3858,3858],[3857,3857]]],[1536714210001,["gjx16@GJXAIOU",[[1,3857,"1，"]],[3857,3857],[3859,3859]]],[1536714210583,["gjx16@GJXAIOU",[[-1,3858,"，"]],[3859,3859],[3858,3858]]],[1536714211515,["gjx16@GJXAIOU",[[1,3858,",2，"]],[3858,3858],[3861,3861]]],[1536714212041,["gjx16@GJXAIOU",[[-1,3860,"，"]],[3861,3861],[3860,3860]]],[1536714212550,["gjx16@GJXAIOU",[[1,3860,",3，"]],[3860,3860],[3863,3863]]],[1536714212999,["gjx16@GJXAIOU",[[-1,3862,"，"]],[3863,3863],[3862,3862]]],[1536714213507,["gjx16@GJXAIOU",[[1,3862,",4，"]],[3862,3862],[3865,3865]]],[1536714213957,["gjx16@GJXAIOU",[[-1,3864,"，"]],[3865,3865],[3864,3864]]],[1536714214784,["gjx16@GJXAIOU",[[1,3864,",5，"]],[3864,3864],[3867,3867]]],[1536714215374,["gjx16@GJXAIOU",[[-1,3866,"，"]],[3867,3867],[3866,3866]]],[1536714215474,["gjx16@GJXAIOU",[[1,3866,",6"]],[3866,3866],[3868,3868]]],[1536714242885,["gjx16@GJXAIOU",[[1,3871,"   \n"]],[3870,3870],[3874,3874]]],[1536714249980,["gjx16@GJXAIOU",[[1,3874,"int leng"]],[3874,3874],[3882,3882]]],[1536714251106,["gjx16@GJXAIOU",[[-1,3881,"g"]],[3882,3882],[3881,3881]]],[1536714252210,["gjx16@GJXAIOU",[[1,3881,";"]],[3881,3881],[3882,3882]]],[1536714252351,["gjx16@GJXAIOU",[[1,3883,"   \n"]],[3882,3882],[3886,3886]]],[1536714276599,["gjx16@GJXAIOU",[[1,3881," = "]],[3881,3881],[3884,3884]]],[1536714278286,["gjx16@GJXAIOU",[[1,3884,"0"]],[3884,3884],[3885,3885]]],[1536714280125,["gjx16@GJXAIOU",[[1,3891,"   \n"]],[3886,3886],[3890,3890]]],[1536714285940,["gjx16@GJXAIOU",[[1,3890,"while()"]],[3890,3890],[3897,3897]]],[1536714295051,["gjx16@GJXAIOU",[[1,3896,"s[len++]"]],[3896,3896],[3904,3904]]],[1536714300282,["gjx16@GJXAIOU",[[1,3905,";"]],[3905,3905],[3906,3906]]],[1536714301375,["gjx16@GJXAIOU",[[1,3911,"   \n"]],[3906,3906],[3910,3910]]],[1536714304884,["gjx16@GJXAIOU",[[1,3910,"llen "]],[3910,3910],[3915,3915]]],[1536714306178,["gjx16@GJXAIOU",[[-1,3911,"len "]],[3915,3915],[3911,3911]]],[1536714309208,["gjx16@GJXAIOU",[[1,3911,"en ---"]],[3911,3911],[3917,3917]]],[1536714310123,["gjx16@GJXAIOU",[[-1,3916,"-"]],[3917,3917],[3916,3916]]],[1536714310892,["gjx16@GJXAIOU",[[1,3916,";"]],[3916,3916],[3917,3917]]],[1536714312594,["gjx16@GJXAIOU",[[1,3922,"   \n"]],[3917,3917],[3921,3921]]],[1536714313750,["gjx16@GJXAIOU",[[-1,3918,"   "],[1,3921,"\n"]],[3921,3921],[3919,3919]]],[1536714315917,["gjx16@GJXAIOU",[[1,3919,"  "]],[3919,3919],[3921,3921]]],[1536714358267,["gjx16@GJXAIOU",[[1,3921,"for()"]],[3921,3921],[3926,3926]]],[1536714601904,["gjx16@GJXAIOU",[[1,3828,"\n"]],[3827,3827],[3828,3828]]],[1536714605555,["gjx16@GJXAIOU",[[1,3828,"#ing"]],[3828,3828],[3832,3832]]],[1536714606295,["gjx16@GJXAIOU",[[-1,3831,"g"]],[3832,3832],[3831,3831]]],[1536714610875,["gjx16@GJXAIOU",[[1,3831,"clude<>"]],[3831,3831],[3838,3838]]],[1536714615634,["gjx16@GJXAIOU",[[1,3837,"math.h"]],[3837,3837],[3843,3843]]],[1536714621497,["gjx16@GJXAIOU",[[-1,3938,"for()"]],[3943,3943],[3938,3938]]],[1536714635261,["gjx16@GJXAIOU",[[1,3938,"ji"]],[3938,3938],[3940,3940]]],[1536714635831,["gjx16@GJXAIOU",[[-1,3938,"ji"]],[3940,3940],[3938,3938]]],[1536714637306,["gjx16@GJXAIOU",[[1,3938,"int "]],[3938,3938],[3942,3942]]],[1536714644485,["gjx16@GJXAIOU",[[1,3942,"result = "]],[3942,3942],[3951,3951]]],[1536714649358,["gjx16@GJXAIOU",[[-1,3948," = "]],[3951,3951],[3948,3948]]],[1536714650215,["gjx16@GJXAIOU",[[1,3948,";"]],[3948,3948],[3949,3949]]],[1536714650839,["gjx16@GJXAIOU",[[1,3952,"\n  "]],[3949,3949],[3952,3952]]],[1536714652070,["gjx16@GJXAIOU",[[-1,3950,"  "]],[3952,3952],[3950,3950]]],[1536714652374,["gjx16@GJXAIOU",[[-1,3950,"\n"]],[3950,3950],[3949,3949]]],[1536714652829,["gjx16@GJXAIOU",[[-1,3948,";"]],[3949,3949],[3948,3948]]],[1536714655390,["gjx16@GJXAIOU",[[1,3948," = 0;"]],[3948,3948],[3953,3953]]],[1536714656093,["gjx16@GJXAIOU",[[1,3956,"\n  "]],[3953,3953],[3956,3956]]],[1536714681673,["gjx16@GJXAIOU",[[1,3956,"for"]],[3956,3956],[3959,3959]]],[1536714682910,["gjx16@GJXAIOU",[[-1,3956,"for"]],[3959,3959],[3956,3956]]],[1536714684972,["gjx16@GJXAIOU",[[1,3956,"int i"]],[3956,3956],[3961,3961]]],[1536714701644,["gjx16@GJXAIOU",[[1,3961,";"]],[3961,3961],[3962,3962]]],[1536714726891,["gjx16@GJXAIOU",[[-1,3955," int i;"]],[3962,3962],[3955,3955]]],[1536714728243,["gjx16@GJXAIOU",[[1,3955,"for "]],[3955,3955],[3959,3959]]],[1536714730107,["gjx16@GJXAIOU",[[-1,3955,"for "]],[3959,3959],[3955,3955]]],[1536714731173,["gjx16@GJXAIOU",[[1,3955,"  "]],[3955,3955],[3957,3957]]],[1536714732025,["gjx16@GJXAIOU",[[-1,3956," "]],[3957,3957],[3956,3956]]],[1536714733427,["gjx16@GJXAIOU",[[1,3956," for"]],[3956,3956],[3960,3960]]],[1536714734890,["gjx16@GJXAIOU",[[-1,3956," for"]],[3960,3960],[3956,3956]]],[1536714737006,["gjx16@GJXAIOU",[[1,3956,"for()"]],[3956,3956],[3961,3961]]],[1536714746789,["gjx16@GJXAIOU",[[1,3960,"i = 0 ,"]],[3960,3960],[3967,3967]]],[1536714748256,["gjx16@GJXAIOU",[[-1,3966,","]],[3967,3967],[3966,3966]]],[1536714757199,["gjx16@GJXAIOU",[[1,3966,";i = len - "]],[3966,3966],[3977,3977]]],[1536714760407,["gjx16@GJXAIOU",[[1,3977,"1;i++"]],[3977,3977],[3982,3982]]],[1536714762740,["gjx16@GJXAIOU",[[1,3986,"\n  "]],[3983,3983],[3986,3986]]],[1536714766146,["gjx16@GJXAIOU",[[1,3986,"{}"]],[3986,3986],[3988,3988]]],[1536714767851,["gjx16@GJXAIOU",[[1,3987,"\n  \n  \n  \n  \n  "]],[3987,3987],[4002,4002]]],[1536714817541,["gjx16@GJXAIOU",[[1,3990,"  resule"]],[3990,3990],[3998,3998]]],[1536714818505,["gjx16@GJXAIOU",[[-1,3997,"e"]],[3998,3998],[3997,3997]]],[1536714820923,["gjx16@GJXAIOU",[[1,3997,"t= "]],[3997,3997],[4000,4000]]],[1536714822038,["gjx16@GJXAIOU",[[-1,3998,"= "]],[4000,4000],[3998,3998]]],[1536714822993,["gjx16@GJXAIOU",[[1,3998," - "]],[3998,3998],[4001,4001]]],[1536714823852,["gjx16@GJXAIOU",[[-1,3999,"- "]],[4001,4001],[3999,3999]]],[1536714826784,["gjx16@GJXAIOU",[[1,3999,"= s"]],[3999,3999],[4002,4002]]],[1536714902056,["gjx16@GJXAIOU",[[-1,3991," result = s"]],[4002,4002],[3991,3991]]],[1536714907268,["gjx16@GJXAIOU",[[1,3991,"s[i] "]],[3991,3991],[3996,3996]]],[1536714910272,["gjx16@GJXAIOU",[[-1,3991,"s[i] "]],[3996,3996],[3991,3991]]],[1536714927991,["gjx16@GJXAIOU",[[1,3991,"resule"]],[3991,3991],[3997,3997]]],[1536714928523,["gjx16@GJXAIOU",[[-1,3996,"e"]],[3997,3997],[3996,3996]]],[1536714931134,["gjx16@GJXAIOU",[[1,3996,"t + "]],[3996,3996],[4000,4000]]],[1536714931990,["gjx16@GJXAIOU",[[-1,3999," "]],[4000,4000],[3999,3999]]],[1536714937792,["gjx16@GJXAIOU",[[1,3999,"= s"]],[3999,3999],[4002,4002]]],[1536714954798,["gjx16@GJXAIOU",[[1,4002,"[i]*pow();"]],[4002,4002],[4012,4012]]],[1536714960194,["gjx16@GJXAIOU",[[1,4010,"10."]],[4010,4010],[4013,4013]]],[1536714960960,["gjx16@GJXAIOU",[[-1,4012,"."]],[4013,4013],[4012,4012]]],[1536714988752,["gjx16@GJXAIOU",[[1,4012,",len -i "]],[4012,4012],[4020,4020]]],[1536714989986,["gjx16@GJXAIOU",[[-1,4018,"i "]],[4020,4020],[4018,4018]]],[1536714993882,["gjx16@GJXAIOU",[[1,4018," 1 -1"]],[4018,4018],[4023,4023]]],[1536714994732,["gjx16@GJXAIOU",[[-1,4022,"1"]],[4023,4023],[4022,4022]]],[1536714995252,["gjx16@GJXAIOU",[[1,4022," i"]],[4022,4022],[4024,4024]]],[1536715000990,["gjx16@GJXAIOU",[[-1,4033,"  "]],[4035,4035],[4033,4033]]],[1536715001158,["gjx16@GJXAIOU",[[-1,4033,"\n"]],[4033,4033],[4032,4032]]],[1536715001547,["gjx16@GJXAIOU",[[-1,4030,"  "]],[4032,4032],[4030,4030]]],[1536715001817,["gjx16@GJXAIOU",[[-1,4030,"\n"]],[4030,4030],[4029,4029]]],[1536715002153,["gjx16@GJXAIOU",[[-1,4027,"  "]],[4029,4029],[4027,4027]]],[1536715002489,["gjx16@GJXAIOU",[[-1,4027,"\n"]],[4027,4027],[4026,4026]]],[1536715002661,["gjx16@GJXAIOU",[[-1,4025,";"]],[4026,4026],[4025,4025]]],[1536715004627,["gjx16@GJXAIOU",[[1,4025,";"]],[4025,4025],[4026,4026]]],[1536715008628,["gjx16@GJXAIOU",[[1,4033,"\n  "]],[4030,4030],[4033,4033]]],[1536715012689,["gjx16@GJXAIOU",[[-1,4040,"\n"]],[4040,4040],[4039,4039]]],[1536715012835,["gjx16@GJXAIOU",[[-1,4039,"\n"]],[4039,4039],[4038,4038]]],[1536715013002,["gjx16@GJXAIOU",[[-1,4038,"\n"]],[4038,4038],[4037,4037]]],[1536715013187,["gjx16@GJXAIOU",[[-1,4036," "]],[4037,4037],[4036,4036]]],[1536715020084,["gjx16@GJXAIOU",[[1,4036,"printf();"]],[4036,4036],[4045,4045]]],[1536715025408,["gjx16@GJXAIOU",[[1,4043,"\"\""]],[4043,4043],[4045,4045]]],[1536715032022,["gjx16@GJXAIOU",[[1,4044,"%d\\n"]],[4044,4044],[4048,4048]]],[1536715036729,["gjx16@GJXAIOU",[[1,4049,"s"]],[4049,4049],[4050,4050]]],[1536715040545,["gjx16@GJXAIOU",[[1,4053,"  \n"]],[4052,4052],[4055,4055]]],[1536715045236,["gjx16@GJXAIOU",[[1,4055,"result 0;"]],[4055,4055],[4064,4064]]]],null,"gjx16@GJXAIOU"],["d5d7bb20-cf12-4495-bfc7-b82e9e5f4a2c",1536754024264,"# day6字符串与字符数组\n\n## 字符数组的定义\n\n```c\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n\n  return 0；\n}\n```\n\n**将一个字符串里面的元素进行排序**\n\n```c\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[5]  =  \"acdb\";\n\n  for(i  =  0  ;i  <  (sizeof(array)-1)  ;  i++)\n\n  {\n\n  for(j  =  1;j  <  ((sizeof(array)-1)-i)  ;j++)\n\n  {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n  {\n\n  tmp  =  array[j];\n\n  array[j]  =  array[j-1];\n\n  array[j-1]  =  tmp;\n\n  }\n\n  }\n\n  }\n\n  printf(\"%s\\n\",array);\n\n  return  0;\n\n}\n```\n\n\n**将字符串进行逆置**\n1.直接进行逆置（一般不输出结果因为后面很多0）\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  int  min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\n  return  0;\n\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n**如何将汉字进行倒置**\n在ASCII码中一个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码)\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[50]  =  \"你好世界\";\n\n  int  i  =  0;\n\n  while(str[i++])\n\n  int  min  =  0;\n\n  int  max  =  i-2;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max  -1];\n\n  str[max  -1]  =  str[min];\n\n  str[min]  =  tmp;\n\nchar  tmp1;\n\n  tmp1  =  str[max];\n\n  str[max]  =  str[min  +  1];\n\n  str[min  +  1]  =  tmp1;\n\n  min  +=  2;\n\n  max  -=2;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n\n**字符串和字符数组的差别**\n\n字符串在内存中是以0结尾；,以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\nreturn 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候，**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n\n\n\n## 字符串的使用\n\n\n**1.去掉字符串右边的空格**\n\n```c\n#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}\n```\n\n**2.去掉字符串左边的空格**\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;  \n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n法二：\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++] ==' ');\n\n  len  --; //得到了字符串前面的空格数量 \n\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0; \n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**3.字符串到整数的变化**\n\n```c\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n   int s[10] = {1,2,3,4,5,6}；\n   int len = 0;\n   while(s[len++]);\n   len --;\n\n  int result = 0;\n  for(i = 0 ;i = len - 1;i++)\n  {\n   result += s[i]*pow(10,len - 1 - i);\n  }\n  \n  printf(\"%d\\n\"s);\n  result 0;\n}\n```\n\n\n\n\n\n\n \n\n\n\n\n\n",[[1536754014760,["gjx16@GJXAIOU",[[1,3805,"\n"]],[3804,3804],[3805,3805]]],[1536754022128,["gjx16@GJXAIOU",[[1,3805,"步骤：1.知道"]],[3805,3805],[3812,3812]]],[1536754028269,["gjx16@GJXAIOU",[[1,3812,"字符串的长度"]],[3812,3812],[3818,3818]]],[1536754028828,["gjx16@GJXAIOU",[[1,3819,"\n"]],[3818,3818],[3819,3819]]],[1536754047081,["gjx16@GJXAIOU",[[1,3819,"2.将每个资格"]],[3819,3819],[3826,3826]]],[1536754047915,["gjx16@GJXAIOU",[[-1,3824,"资格"]],[3826,3826],[3824,3824]]],[1536754077909,["gjx16@GJXAIOU",[[1,3824,"字符读取出来，转化为整数后*10的长度-1次方；"]],[3824,3824],[3848,3848]]],[1536754078345,["gjx16@GJXAIOU",[[1,3849,"\n"]],[3848,3848],[3849,3849]]],[1536754081006,["gjx16@GJXAIOU",[[1,3849,"3."]],[3849,3849],[3851,3851]]],[1536754087179,["gjx16@GJXAIOU",[[1,3851,"将每个为"]],[3851,3851],[3855,3855]]],[1536754089247,["gjx16@GJXAIOU",[[-1,3854,"为"]],[3855,3855],[3854,3854]]],[1536754101653,["gjx16@GJXAIOU",[[1,3854,"位聚酸和加起来"]],[3854,3854],[3861,3861]]],[1536754215425,["gjx16@GJXAIOU",[[-1,3930,"{1,2,3,4,5,6}"]],[3943,3943],[3930,3930]]],[1536754217508,["gjx16@GJXAIOU",[[1,3930,"‘’"]],[3930,3930],[3932,3932]]],[1536754219286,["gjx16@GJXAIOU",[[-1,3930,"‘’"]],[3932,3932],[3930,3930]]],[1536754220656,["gjx16@GJXAIOU",[[1,3930,"“”"]],[3930,3930],[3932,3932]]],[1536754223147,["gjx16@GJXAIOU",[[-1,3930,"“”"]],[3932,3932],[3930,3930]]],[1536754227230,["gjx16@GJXAIOU",[[1,3930,"\"\""]],[3930,3930],[3932,3932]]],[1536754229772,["gjx16@GJXAIOU",[[1,3931,"1234"]],[3931,3931],[3935,3935]]],[1536754322376,["gjx16@GJXAIOU",[[-1,3855,"聚酸"]],[3857,3857],[3855,3855]]],[1536754324278,["gjx16@GJXAIOU",[[1,3855,"jisuan"]],[3855,3855],[3861,3861]]],[1536754326410,["gjx16@GJXAIOU",[[-1,3855,"jisuan"]],[3861,3861],[3855,3855]]],[1536754329454,["gjx16@GJXAIOU",[[1,3855,"计算"]],[3855,3855],[3857,3857]]],[1536754407274,["gjx16@GJXAIOU",[[1,3862,"\n"]],[3861,3861],[3862,3862]]],[1536754407436,["gjx16@GJXAIOU",[[1,3863,"\n"]],[3862,3862],[3863,3863]]],[1536754409240,["gjx16@GJXAIOU",[[1,3863,"·"]],[3863,3863],[3864,3864]]],[1536754410170,["gjx16@GJXAIOU",[[-1,3863,"·"]],[3864,3864],[3863,3863]]],[1536754412339,["gjx16@GJXAIOU",[[1,3863,"```c"]],[3863,3863],[3867,3867]]],[1536754413037,["gjx16@GJXAIOU",[[1,3868,"\n"]],[3867,3867],[3868,3868]]],[1536754414037,["gjx16@GJXAIOU",[[1,3869,"\n"]],[3868,3868],[3869,3869]]],[1536754414831,["gjx16@GJXAIOU",[[1,3869,"```"]],[3869,3869],[3872,3872]]],[1536754416690,["gjx16@GJXAIOU",[[1,3873,"\n"]],[3872,3872],[3873,3873]]],[1536754416853,["gjx16@GJXAIOU",[[1,3874,"\n"]],[3873,3873],[3874,3874]]],[1536754420025,["gjx16@GJXAIOU",[[1,3869,"\n"]],[3868,3868],[3869,3869]]],[1536754420192,["gjx16@GJXAIOU",[[1,3870,"\n"]],[3869,3869],[3870,3870]]],[1536754420343,["gjx16@GJXAIOU",[[1,3871,"\n"]],[3870,3870],[3871,3871]]],[1536754509158,["gjx16@GJXAIOU",[[1,3868,"int main()"]],[3868,3868],[3878,3878]]],[1536754510284,["gjx16@GJXAIOU",[[1,3882,"\n"]],[3878,3878],[3879,3879]]],[1536754510583,["gjx16@GJXAIOU",[[1,3883,"\n"]],[3879,3879],[3880,3880]]],[1536754512614,["gjx16@GJXAIOU",[[-1,3883,"\n"]],[3880,3880],[3879,3879]]],[1536754515223,["gjx16@GJXAIOU",[[1,3879,"{}"]],[3879,3879],[3881,3881]]],[1536754516600,["gjx16@GJXAIOU",[[1,3880,"\n"]],[3880,3880],[3881,3881]]],[1536754516749,["gjx16@GJXAIOU",[[1,3881,"\n"]],[3881,3881],[3882,3882]]],[1536754516905,["gjx16@GJXAIOU",[[1,3882,"\n"]],[3882,3882],[3883,3883]]],[1536754517063,["gjx16@GJXAIOU",[[1,3883,"\n"]],[3883,3883],[3884,3884]]],[1536754532383,["gjx16@GJXAIOU",[[1,3881,"  char s[100] = ''"]],[3881,3881],[3899,3899]]],[1536754533881,["gjx16@GJXAIOU",[[-1,3897,"''"]],[3899,3899],[3897,3897]]],[1536754537590,["gjx16@GJXAIOU",[[1,3897,"\"\";"]],[3897,3897],[3900,3900]]],[1536754541549,["gjx16@GJXAIOU",[[1,3898,"1234"]],[3898,3898],[3902,3902]]],[1536754544190,["gjx16@GJXAIOU",[[1,3905,"  \n"]],[3904,3904],[3907,3907]]],[1536754552184,["gjx16@GJXAIOU",[[1,3907,"int len = 9"]],[3907,3907],[3918,3918]]],[1536754552971,["gjx16@GJXAIOU",[[-1,3917,"9"]],[3918,3918],[3917,3917]]],[1536754554803,["gjx16@GJXAIOU",[[1,3917,"0;"]],[3917,3917],[3919,3919]]],[1536754555709,["gjx16@GJXAIOU",[[1,3920,"  \n"]],[3919,3919],[3922,3922]]],[1536754558434,["gjx16@GJXAIOU",[[1,3922,"while"]],[3922,3922],[3927,3927]]],[1536754638172,["gjx16@GJXAIOU",[[1,3927,"()"]],[3927,3927],[3929,3929]]],[1536754647510,["gjx16@GJXAIOU",[[1,3928,"s[len++]"]],[3928,3928],[3936,3936]]],[1536754651661,["gjx16@GJXAIOU",[[1,3937,";"]],[3937,3937],[3938,3938]]],[1536754652686,["gjx16@GJXAIOU",[[1,3939,"  \n"]],[3938,3938],[3941,3941]]],[1536754656827,["gjx16@GJXAIOU",[[1,3941,"len --;"]],[3941,3941],[3948,3948]]],[1536754657466,["gjx16@GJXAIOU",[[1,3949,"  \n"]],[3948,3948],[3951,3951]]],[1536754659478,["gjx16@GJXAIOU",[[-1,3949,"  "],[1,3951,"\n"]],[3951,3951],[3950,3950]]],[1536754669486,["gjx16@GJXAIOU",[[1,3950,"  int value = 0;"]],[3950,3950],[3966,3966]]],[1536754671016,["gjx16@GJXAIOU",[[1,3967,"  \n"]],[3966,3966],[3969,3969]]],[1536754674299,["gjx16@GJXAIOU",[[1,3969,"int i;"]],[3969,3969],[3975,3975]]],[1536754675141,["gjx16@GJXAIOU",[[1,3976,"  \n"]],[3975,3975],[3978,3978]]],[1536754680898,["gjx16@GJXAIOU",[[1,3978,"int tmp = lej"]],[3978,3978],[3991,3991]]],[1536754681747,["gjx16@GJXAIOU",[[-1,3990,"j"]],[3991,3991],[3990,3990]]],[1536754682971,["gjx16@GJXAIOU",[[1,3990,"n;"]],[3990,3990],[3992,3992]]],[1536754683723,["gjx16@GJXAIOU",[[1,3993,"  \n"]],[3992,3992],[3995,3995]]],[1536754687229,["gjx16@GJXAIOU",[[1,3995,"for i"]],[3995,3995],[4000,4000]]],[1536754689743,["gjx16@GJXAIOU",[[-1,3999,"i"]],[4000,4000],[3999,3999]]],[1536754690902,["gjx16@GJXAIOU",[[1,3999,"()"]],[3999,3999],[4001,4001]]],[1536754697641,["gjx16@GJXAIOU",[[1,4000,"i = 0 "]],[4000,4000],[4006,4006]]],[1536754698628,["gjx16@GJXAIOU",[[-1,4005," "]],[4006,4006],[4005,4005]]],[1536754710176,["gjx16@GJXAIOU",[[1,4005,";i < len; i++"]],[4005,4005],[4018,4018]]],[1536754712002,["gjx16@GJXAIOU",[[1,4020,"  \n"]],[4019,4019],[4022,4022]]],[1536754714537,["gjx16@GJXAIOU",[[1,4022,"{}"]],[4022,4022],[4024,4024]]],[1536754716546,["gjx16@GJXAIOU",[[1,4023,"\n  \n  \n  \n  "]],[4023,4023],[4035,4035]]],[1536754722128,["gjx16@GJXAIOU",[[1,4026,"  inr"]],[4026,4026],[4031,4031]]],[1536754722639,["gjx16@GJXAIOU",[[-1,4030,"r"]],[4031,4031],[4030,4030]]],[1536754724522,["gjx16@GJXAIOU",[[1,4030,"t basin"]],[4030,4030],[4037,4037]]],[1536754725162,["gjx16@GJXAIOU",[[-1,4036,"n"]],[4037,4037],[4036,4036]]],[1536754725738,["gjx16@GJXAIOU",[[1,4036,"c"]],[4036,4036],[4037,4037]]],[1536754727999,["gjx16@GJXAIOU",[[-1,4035,"ic"]],[4037,4037],[4035,4035]]],[1536754732224,["gjx16@GJXAIOU",[[1,4035,"e = a"]],[4035,4035],[4040,4040]]],[1536754732742,["gjx16@GJXAIOU",[[-1,4039,"a"]],[4040,4040],[4039,4039]]],[1536754734297,["gjx16@GJXAIOU",[[1,4039,"10;"]],[4039,4039],[4042,4042]]],[1536754737182,["gjx16@GJXAIOU",[[1,4045,"  \n  "]],[4042,4042],[4047,4047]]],[1536754740986,["gjx16@GJXAIOU",[[1,4047,"if()()"]],[4047,4047],[4053,4053]]],[1536754744735,["gjx16@GJXAIOU",[[-1,4051,"()"]],[4053,4053],[4051,4051]]],[1536754748234,["gjx16@GJXAIOU",[[1,4050,"("]],[4050,4050],[4051,4051]]],[1536754748410,["gjx16@GJXAIOU",[[1,4052,")"]],[4051,4051],[4052,4052]]],[1536754756298,["gjx16@GJXAIOU",[[1,4051,"tmp -o "]],[4051,4051],[4058,4058]]],[1536754756956,["gjx16@GJXAIOU",[[-1,4056,"o "]],[4058,4058],[4056,4056]]],[1536754759158,["gjx16@GJXAIOU",[[1,4056," i-"]],[4056,4056],[4059,4059]]],[1536754760351,["gjx16@GJXAIOU",[[-1,4058,"-"]],[4059,4059],[4058,4058]]],[1536754762386,["gjx16@GJXAIOU",[[1,4058," -1"]],[4058,4058],[4061,4061]]],[1536754767062,["gjx16@GJXAIOU",[[1,4062," = "]],[4062,4062],[4065,4065]]],[1536754772045,["gjx16@GJXAIOU",[[1,4069,"  \n  "]],[4066,4066],[4071,4071]]],[1536754775235,["gjx16@GJXAIOU",[[1,4071,"{}"]],[4071,4071],[4073,4073]]],[1536754777157,["gjx16@GJXAIOU",[[1,4072,"\n    \n    \n    "]],[4072,4072],[4087,4087]]],[1536754785316,["gjx16@GJXAIOU",[[1,4064,"="]],[4064,4064],[4065,4065]]],[1536754785491,["gjx16@GJXAIOU",[[1,4066," "]],[4065,4065],[4066,4066]]],[1536754785908,["gjx16@GJXAIOU",[[1,4066,"0"]],[4066,4066],[4067,4067]]],[1536754803134,["gjx16@GJXAIOU",[[1,3966,"//存放变量为"]],[3966,3966],[3973,3973]]],[1536754804275,["gjx16@GJXAIOU",[[1,3973,"将"]],[3973,3973],[3974,3974]]],[1536754812096,["gjx16@GJXAIOU",[[-1,3972,"为将"]],[3974,3974],[3972,3972]]],[1536754828787,["gjx16@GJXAIOU",[[1,3972,"，为将字符串转换为整数后的变量"]],[3972,3972],[3987,3987]]],[1536754841165,["gjx16@GJXAIOU",[[1,4040," //遍历字符串"]],[4040,4040],[4048,4048]]],[1536754846183,["gjx16@GJXAIOU",[[1,4071," 、、"]],[4071,4071],[4074,4074]]],[1536754847184,["gjx16@GJXAIOU",[[-1,4072,"、、"]],[4074,4074],[4072,4072]]],[1536754850361,["gjx16@GJXAIOU",[[1,4072,"//q"]],[4072,4072],[4075,4075]]],[1536754850976,["gjx16@GJXAIOU",[[-1,4074,"q"]],[4075,4075],[4074,4074]]],[1536754861444,["gjx16@GJXAIOU",[[1,4074,"求10的n次方"]],[4074,4074],[4081,4081]]],[1536755113229,["gjx16@GJXAIOU",[[-1,4120,"    "]],[4124,4124],[4120,4120]]],[1536755113405,["gjx16@GJXAIOU",[[-1,4120,"\n"]],[4120,4120],[4119,4119]]],[1536755123223,["gjx16@GJXAIOU",[[1,4119,"  base = 1;"]],[4119,4119],[4130,4130]]],[1536755127555,["gjx16@GJXAIOU",[[1,4139,"  \n  "]],[4136,4136],[4141,4141]]],[1536755128054,["gjx16@GJXAIOU",[[1,4141,"  "]],[4141,4141],[4143,4143]]],[1536755130328,["gjx16@GJXAIOU",[[-1,4142," "]],[4143,4143],[4142,4142]]],[1536755133222,["gjx16@GJXAIOU",[[1,4142,"else"]],[4142,4142],[4146,4146]]],[1536755135213,["gjx16@GJXAIOU",[[1,4149,"   \n  "]],[4146,4146],[4152,4152]]],[1536755139761,["gjx16@GJXAIOU",[[1,4152,"{}"]],[4152,4152],[4154,4154]]],[1536755145645,["gjx16@GJXAIOU",[[1,4153,"\n     \n     \n     \n     "]],[4153,4153],[4177,4177]]],[1536755153116,["gjx16@GJXAIOU",[[1,4159,"  int j;"]],[4159,4159],[4167,4167]]],[1536755153800,["gjx16@GJXAIOU",[[1,4173,"  \n     "]],[4167,4167],[4175,4175]]],[1536755157758,["gjx16@GJXAIOU",[[1,4175,"for()"]],[4175,4175],[4180,4180]]],[1536755162485,["gjx16@GJXAIOU",[[1,4179,"j = "]],[4179,4179],[4183,4183]]],[1536755172580,["gjx16@GJXAIOU",[[1,4183,"1; j < ("]],[4183,4183],[4191,4191]]],[1536755172746,["gjx16@GJXAIOU",[[1,4192,")"]],[4191,4191],[4192,4192]]],[1536755188720,["gjx16@GJXAIOU",[[1,4191,"tmp -i -1"]],[4191,4191],[4200,4200]]],[1536755197971,["gjx16@GJXAIOU",[[1,4201,";j++"]],[4201,4201],[4205,4205]]],[1536755206702,["gjx16@GJXAIOU",[[1,4212,"  \n     "]],[4206,4206],[4214,4214]]],[1536755209700,["gjx16@GJXAIOU",[[1,4214,"{}"]],[4214,4214],[4216,4216]]],[1536755211596,["gjx16@GJXAIOU",[[1,4215,"\n       \n       \n       "]],[4215,4215],[4239,4239]]],[1536755218444,["gjx16@GJXAIOU",[[1,4223,"  base"]],[4223,4223],[4229,4229]]],[1536755231298,["gjx16@GJXAIOU",[[1,4229," *= 10;"]],[4229,4229],[4236,4236]]],[1536755237875,["gjx16@GJXAIOU",[[-1,4237,"       "]],[4244,4244],[4237,4237]]],[1536755238203,["gjx16@GJXAIOU",[[-1,4237,"\n"]],[4237,4237],[4236,4236]]],[1536755243061,["gjx16@GJXAIOU",[[-1,4255,"  "]],[4254,4254],[4252,4252]]],[1536755243302,["gjx16@GJXAIOU",[[-1,4251,"\n"]],[4252,4252],[4251,4251]]],[1536755244684,["gjx16@GJXAIOU",[[-1,4250,"    "]],[4251,4251],[4247,4247]]],[1536755245775,["gjx16@GJXAIOU",[[-1,4262," "]],[4262,4262],[4261,4261]]],[1536755246022,["gjx16@GJXAIOU",[[-1,4260,"\n"]],[4261,4261],[4260,4260]]],[1536755246233,["gjx16@GJXAIOU",[[-1,4260," "]],[4260,4260],[4259,4259]]],[1536755247523,["gjx16@GJXAIOU",[[-1,4266,"\n"]],[4266,4266],[4265,4265]]],[1536755247755,["gjx16@GJXAIOU",[[-1,4265,"\n"]],[4265,4265],[4264,4264]]],[1536755249321,["gjx16@GJXAIOU",[[1,4265,"  \n"]],[4264,4264],[4267,4267]]],[1536755274335,["gjx16@GJXAIOU",[[1,4260,"      "]],[4258,4258],[4264,4264]]],[1536755277876,["gjx16@GJXAIOU",[[1,4264,"value"]],[4264,4264],[4269,4269]]],[1536755278820,["gjx16@GJXAIOU",[[1,4271," "]],[4269,4269],[4270,4270]]],[1536755280697,["gjx16@GJXAIOU",[[1,4270,"+="]],[4270,4270],[4272,4272]]],[1536755280981,["gjx16@GJXAIOU",[[1,4274," "]],[4272,4272],[4273,4273]]],[1536755282322,["gjx16@GJXAIOU",[[1,4273,"()"]],[4273,4273],[4275,4275]]],[1536755289266,["gjx16@GJXAIOU",[[1,4274,"base * ("]],[4274,4274],[4282,4282]]],[1536755293371,["gjx16@GJXAIOU",[[1,4283,");"]],[4282,4282],[4285,4285]]],[1536755306523,["gjx16@GJXAIOU",[[1,4282,"s[i] - '0'"]],[4282,4282],[4292,4292]]],[1536755322818,["gjx16@GJXAIOU",[[1,4304,"    "]],[4304,4304],[4308,4308]]],[1536755325223,["gjx16@GJXAIOU",[[-1,4305,"   "]],[4308,4308],[4305,4305]]],[1536755327259,["gjx16@GJXAIOU",[[1,4305,"prtint"]],[4305,4305],[4311,4311]]],[1536755328111,["gjx16@GJXAIOU",[[-1,4307,"tint"]],[4311,4311],[4307,4307]]],[1536755331443,["gjx16@GJXAIOU",[[1,4307,"intf();"]],[4307,4307],[4314,4314]]],[1536755333877,["gjx16@GJXAIOU",[[1,4312,"\"\""]],[4312,4312],[4314,4314]]],[1536755339633,["gjx16@GJXAIOU",[[1,4313,"%d\\n"]],[4313,4313],[4317,4317]]],[1536755343214,["gjx16@GJXAIOU",[[1,4318,",v"]],[4318,4318],[4320,4320]]],[1536755344579,["gjx16@GJXAIOU",[[1,4320,"alue"]],[4320,4320],[4324,4324]]],[1536755347847,["gjx16@GJXAIOU",[[1,4327,"   \n"]],[4326,4326],[4330,4330]]],[1536755352034,["gjx16@GJXAIOU",[[1,4330,"return -"]],[4330,4330],[4338,4338]]],[1536755352850,["gjx16@GJXAIOU",[[-1,4337,"-"]],[4338,4338],[4337,4337]]],[1536755354642,["gjx16@GJXAIOU",[[1,4337,"0;"]],[4337,4337],[4339,4339]]],[1536756170923,["gjx16@GJXAIOU",[[1,4130,"          //字符串的最后一个时候乘1"]],[4130,4130],[4154,4154]]],[1536756331887,["gjx16@GJXAIOU",[[1,4568," - ‘"]],[4568,4568],[4572,4572]]],[1536756334135,["gjx16@GJXAIOU",[[-1,4571,"‘"]],[4572,4572],[4571,4571]]],[1536756335779,["gjx16@GJXAIOU",[[1,4571,"''"]],[4571,4571],[4573,4573]]],[1536756338522,["gjx16@GJXAIOU",[[1,4572,"0"]],[4572,4572],[4573,4573]]],[1536756341766,["gjx16@GJXAIOU",[[1,4574,")"]],[4574,4574],[4575,4575]]],[1536756347024,["gjx16@GJXAIOU",[[1,4564,"("]],[4564,4564],[4565,4565]]],[1536756414333,["gjx16@GJXAIOU",[[-1,4431,"int"]],[4434,4434],[4431,4431]]],[1536756416222,["gjx16@GJXAIOU",[[1,4431,"char"]],[4431,4431],[4435,4435]]],[1536756449102,["gjx16@GJXAIOU",[[-1,4450,"；"]],[4451,4451],[4450,4450]]],[1536756450236,["gjx16@GJXAIOU",[[1,4450,"h"]],[4450,4450],[4451,4451]]],[1536756451022,["gjx16@GJXAIOU",[[-1,4450,"h"]],[4451,4451],[4450,4450]]],[1536756451720,["gjx16@GJXAIOU",[[1,4450,";"]],[4450,4450],[4451,4451]]],[1536756472714,["gjx16@GJXAIOU",[[1,4520,"\n  "]],[4517,4517],[4520,4520]]],[1536756474804,["gjx16@GJXAIOU",[[1,4520,"int i;"]],[4520,4520],[4526,4526]]],[1536756499578,["gjx16@GJXAIOU",[[-1,4502,"int"]],[4505,4505],[4502,4502]]],[1536756502892,["gjx16@GJXAIOU",[[1,4502,"double"]],[4502,4502],[4508,4508]]],[1536756533541,["gjx16@GJXAIOU",[[1,4633,","]],[4633,4633],[4634,4634]]],[1536756545778,["gjx16@GJXAIOU",[[-1,4642,"sult"]],[4646,4646],[4642,4642]]],[1536756547144,["gjx16@GJXAIOU",[[1,4642,"turn"]],[4642,4642],[4646,4646]]],[1536758623588,["gjx16@GJXAIOU",[[-1,4389,"stdio"],[1,4394,"math"],[1,4397,"\n"],[-1,4407,"math"],[1,4411,"stdio"],[1,4415,"\n"],[1,4418," "],[1,4426,"\n"],[-1,4428," "],[1,4429,"\n"],[1,4435," "],[1,4441," "],[1,4444," "],[-1,4452," "],[1,4453,"\n"],[1,4459," "],[1,4462," "],[1,4465," "],[1,4467,"\n"],[-1,4470," "],[-1,4488," "],[1,4489,"\n"],[1,4495," "],[1,4508," "],[1,4516," "],[1,4517," "],[1,4521,"\n"],[1,4526," "],[1,4530,"\n  int  j;\n\n  int  wei  =  0;\n\n"],[1,4538," "],[1,4539," "],[1,4541,";i"],[1,4542," <  len"],[1,4543,"  "],[1,4544,"++)\n\n"],[1,4545," {\n\n  if(len  -  i  -1  ="],[1,4547," 0)\n\n  {\n\n  wei  =  s[i];\n\n  }\n\n  else\n\n  {\n\n  for(j  =  0  ;j  <  "],[1,4550," "],[1,4553," "],[-1,4555,"i"],[1,4556,"j"],[1,4559,"\n"],[1,4564,"\n"],[1,4566,"double  x  =  10;\n\n  double  y  =  len  -1  -j;\n\n "],[1,4573," "],[1,4577," "],[-1,4580,"i] - '0'"],[1,4588,"j]"],[1,4590,"("],[-1,4594,"10,len - 1 - i"],[1,4608,"x,y)"],[1,4610,"\n"],[1,4615,"\n"],[1,4617,"}\n\n  result  +=  wei;\n"],[1,4634,"re"],[1,4635,"ult"],[1,4637,"\n"],[1,4646," "],[1,4649,"\n\n}\n"]],[4380,4651],[4884,4884]]],[1536758628049,["gjx16@GJXAIOU",[[1,4374,"===="]],[4374,4374],[4376,4376]]],[1536758628727,["gjx16@GJXAIOU",[[1,4376,"d"]],[4376,4376],[4377,4377]]],[1536758630921,["gjx16@GJXAIOU",[[-1,4377,"=d"]],[4377,4377],[4375,4375]]],[1536758633327,["gjx16@GJXAIOU",[[-1,4374,"==="]],[4377,4377],[4374,4374]]],[1536758635002,["gjx16@GJXAIOU",[[1,4374,"~~~~"]],[4374,4374],[4376,4376]]],[1536758636783,["gjx16@GJXAIOU",[[1,4376,"c"]],[4376,4376],[4377,4377]]],[1536758637501,["gjx16@GJXAIOU",[[-1,4376,"c"]],[4377,4377],[4376,4376]]],[1536758656032,["gjx16@GJXAIOU",[[1,4376,"此函数有问题，输出的值不对"]],[4376,4376],[4389,4389]]],[1536758660801,["gjx16@GJXAIOU",[[-1,4376,"此"]],[4377,4377],[4376,4376]]],[1536758665030,["gjx16@GJXAIOU",[[1,4376,"下面的程序"]],[4376,4376],[4381,4381]]],[1536758668127,["gjx16@GJXAIOU",[[-1,4381,"函数"]],[4383,4383],[4381,4381]]],[1536759549092,["gjx16@GJXAIOU",[[1,734,"\n"]],[732,732],[733,733]]],[1536759549221,["gjx16@GJXAIOU",[[1,735,"\n"]],[733,733],[734,734]]],[1536759552164,["gjx16@GJXAIOU",[[1,734,"****"]],[734,734],[736,736]]],[1536759561449,["gjx16@GJXAIOU",[[1,736,"sizeof和lend "]],[736,736],[748,748]]],[1536759562105,["gjx16@GJXAIOU",[[-1,746,"d "]],[748,748],[746,746]]],[1536759566422,["gjx16@GJXAIOU",[[1,746,"的区别"]],[746,746],[749,749]]],[1536759568571,["gjx16@GJXAIOU",[[1,753,"\n"]],[751,751],[752,752]]],[1536759569448,["gjx16@GJXAIOU",[[1,754,"\n"]],[752,752],[753,753]]],[1536759572556,["gjx16@GJXAIOU",[[1,753,"```c"]],[753,753],[757,757]]],[1536759573159,["gjx16@GJXAIOU",[[1,759,"\n"]],[757,757],[758,758]]],[1536759574552,["gjx16@GJXAIOU",[[1,760,"\n"]],[758,758],[759,759]]],[1536759575760,["gjx16@GJXAIOU",[[1,759,"```"]],[759,759],[762,762]]],[1536759578616,["gjx16@GJXAIOU",[[1,758,"#include<math.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len;\n\n  while(s[len++]);\n\n  len  --;\n\n  printf(\"sizeof  =  %d\\n\",sizeof(s));\n\n  printf(\"len  =  %d\\n\",len);\n\n  return  0;\n\n}"]],[758,758],[950,950]]],[1536759586531,["gjx16@GJXAIOU",[[1,753,"\n"]],[751,751],[752,752]]],[1536759586590,["gjx16@GJXAIOU",[[1,754,"\n"]],[752,752],[753,753]]],[1536759588746,["gjx16@GJXAIOU",[[1,753,"===="]],[753,753],[755,755]]],[1536759590301,["gjx16@GJXAIOU",[[1,755,"g"]],[755,755],[756,756]]],[1536759591116,["gjx16@GJXAIOU",[[-1,755,"g"]],[756,756],[755,755]]],[1536759622099,["gjx16@GJXAIOU",[[1,755,"根据以下的程序可以得到：sizeof得到的是数组定义的"]],[755,755],[782,782]]],[1536759622944,["gjx16@GJXAIOU",[[-1,779,"定义的"]],[782,782],[779,779]]],[1536759630006,["gjx16@GJXAIOU",[[1,779,"定义的长度，"]],[779,779],[785,785]]],[1536759641110,["gjx16@GJXAIOU",[[1,785,"二"]],[785,785],[786,786]]],[1536759641601,["gjx16@GJXAIOU",[[-1,785,"二"]],[786,786],[785,785]]],[1536759666089,["gjx16@GJXAIOU",[[1,785,"而len得到的是数组中元素的个数"]],[785,785],[801,801]]],[1536759754043,["gjx16@GJXAIOU",[[-1,819,"math"]],[823,823],[819,819]]],[1536759761300,["gjx16@GJXAIOU",[[1,819,"stdio"]],[819,819],[824,824]]],[1536759822469,["gjx16@GJXAIOU",[[1,801,"()"]],[801,801],[803,803]]],[1536759825063,["gjx16@GJXAIOU",[[1,802,"d"]],[802,802],[803,803]]],[1536759825545,["gjx16@GJXAIOU",[[-1,802,"d"]],[803,803],[802,802]]],[1536759863309,["gjx16@GJXAIOU",[[1,802,"当是汉字的时候，就要取决于编码蓝"]],[802,802],[818,818]]],[1536759864020,["gjx16@GJXAIOU",[[-1,817,"蓝"]],[818,818],[817,817]]],[1536759868504,["gjx16@GJXAIOU",[[1,817,"来看"]],[817,817],[819,819]]],[1536760524576,["gjx16@GJXAIOU",[[1,345,"（）"]],[345,345],[347,347]]],[1536760538339,["gjx16@GJXAIOU",[[1,346,"使用sizeof函数，当"]],[346,346],[358,358]]],[1536760539008,["gjx16@GJXAIOU",[[-1,356,"，当"]],[358,358],[356,356]]],[1536760540271,["gjx16@GJXAIOU",[[1,356,"，"]],[356,356],[357,357]]],[1536760558963,["gjx16@GJXAIOU",[[1,357,"当且仅当定义数组的大小正好"]],[357,357],[370,370]]],[1536760564213,["gjx16@GJXAIOU",[[-1,369,"好"]],[370,370],[369,369]]],[1536760566025,["gjx16@GJXAIOU",[[1,369,"号"]],[369,369],[370,370]]],[1536760566555,["gjx16@GJXAIOU",[[-1,369,"号"]],[370,370],[369,369]]],[1536760591828,["gjx16@GJXAIOU",[[1,369,"好包含完整元素的时候才可以"]],[369,369],[382,382]]],[1536760596166,["gjx16@GJXAIOU",[[1,772,"\n"]],[770,770],[771,771]]],[1536760598413,["gjx16@GJXAIOU",[[1,771,"****"]],[771,771],[773,773]]],[1536760605988,["gjx16@GJXAIOU",[[1,773,"法二：使用"]],[773,773],[778,778]]],[1536760610335,["gjx16@GJXAIOU",[[-1,776,"使用"]],[778,778],[776,776]]],[1536760636120,["gjx16@GJXAIOU",[[1,776,"根据len的大小，这时候可以任意更改数组大小"]],[776,776],[798,798]]],[1536760638685,["gjx16@GJXAIOU",[[1,802,"\n"]],[800,800],[801,801]]],[1536760643849,["gjx16@GJXAIOU",[[1,801,"```c"]],[801,801],[805,805]]],[1536760644172,["gjx16@GJXAIOU",[[1,807,"\n"]],[805,805],[806,806]]],[1536760644477,["gjx16@GJXAIOU",[[1,808,"\n"]],[806,806],[807,807]]],[1536760644636,["gjx16@GJXAIOU",[[1,809,"\n"]],[807,807],[808,808]]],[1536760644812,["gjx16@GJXAIOU",[[1,810,"\n"]],[808,808],[809,809]]],[1536760645867,["gjx16@GJXAIOU",[[1,809,"```"]],[809,809],[812,812]]],[1536760649015,["gjx16@GJXAIOU",[[1,806,"#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[15]  =  \"acdb\";\n\n  int  len  =  0;\n\n  while(array[len++]);\n\n  len  --;\n\n  for(i  =  0  ;i  <  len;  i++)\n\n  {\n\n  for(j  =  1;j  <  (len-i)  ;j++)\n\n  {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n  {\n\n  tmp  =  array[j];\n\n  array[j]  =  array[j-1];\n\n  array[j-1]  =  tmp;\n\n  }\n\n  }\n\n  }\n\n  printf(\"(%s)\\n\",array);\n\n  return  0;\n\n}"]],[806,806],[1208,1208]]],[1536760672517,["gjx16@GJXAIOU",[[1,16,"**"],[1,26,"**"]],[16,26],[16,30]]],[1536760672661,["gjx16@GJXAIOU",[[-1,16,"**"],[-1,28,"**"]],[16,30],[16,26]]],[1536760674264,["gjx16@GJXAIOU",[[1,16,"**"],[1,26,"**"]],[16,26],[16,30]]],[1536760674415,["gjx16@GJXAIOU",[[-1,16,"**"],[-1,28,"**"]],[16,30],[16,26]]],[1536760675070,["gjx16@GJXAIOU",[[1,16,"**"],[1,26,"**"]],[16,26],[16,30]]],[1536760683555,["gjx16@GJXAIOU",[[-1,18,"## "]],[21,21],[18,18]]],[1536760684915,["gjx16@GJXAIOU",[[1,18,"1."]],[18,18],[20,20]]],[1536760688408,["gjx16@GJXAIOU",[[1,331,"2."]],[331,331],[333,333]]],[1536760693358,["gjx16@GJXAIOU",[[1,350,"\n"]],[350,350],[351,351]]],[1536760704118,["gjx16@GJXAIOU",[[1,333,"1"]],[333,333],[334,334]]],[1536760711379,["gjx16@GJXAIOU",[[1,780,"2.2  "]],[780,780],[785,785]]],[1536760717402,["gjx16@GJXAIOU",[[1,1230,"2.3 "]],[1230,1230],[1234,1234]]],[1536760731235,["gjx16@GJXAIOU",[[1,537,"  "]],[536,536],[538,538]]],[1536760733064,["gjx16@GJXAIOU",[[1,544,"    "]],[542,542],[546,546]]],[1536760733881,["gjx16@GJXAIOU",[[1,598,"  "]],[596,596],[598,598]]],[1536760739461,["gjx16@GJXAIOU",[[1,655,"  "]],[654,654],[656,656]]],[1536760740453,["gjx16@GJXAIOU",[[1,678,"  "]],[677,677],[679,679]]],[1536760741207,["gjx16@GJXAIOU",[[1,708,"  "]],[707,707],[709,709]]],[1536760750536,["gjx16@GJXAIOU",[[1,733,"  "]],[732,732],[734,734]]],[1536760753192,["gjx16@GJXAIOU",[[1,650,"   "]],[649,650],[653,653]]],[1536760754716,["gjx16@GJXAIOU",[[-1,652," "]],[653,653],[652,652]]],[1536760754896,["gjx16@GJXAIOU",[[1,652,"  "]],[652,652],[654,654]]],[1536760757223,["gjx16@GJXAIOU",[[-1,652,"  "]],[654,654],[652,652]]],[1536760770049,["gjx16@GJXAIOU",[[1,1020,"  "]],[1019,1019],[1021,1021]]],[1536760774123,["gjx16@GJXAIOU",[[1,1058,"  "]],[1057,1057],[1059,1059]]],[1536760776017,["gjx16@GJXAIOU",[[1,1065,"  "]],[1064,1064],[1066,1066]]],[1536760777159,["gjx16@GJXAIOU",[[1,1081,"  "]],[1081,1081],[1083,1083]]],[1536760778664,["gjx16@GJXAIOU",[[-1,1082," "]],[1083,1083],[1082,1082]]],[1536760779883,["gjx16@GJXAIOU",[[1,1082,"  "]],[1082,1082],[1084,1084]]],[1536760782976,["gjx16@GJXAIOU",[[-1,1083," "]],[1084,1084],[1083,1083]]],[1536760784939,["gjx16@GJXAIOU",[[1,1114,"  "]],[1113,1113],[1115,1115]]],[1536760786751,["gjx16@GJXAIOU",[[1,1121,"    "]],[1121,1121],[1125,1125]]],[1536760789373,["gjx16@GJXAIOU",[[1,1146,"    "]],[1145,1145],[1149,1149]]],[1536760791117,["gjx16@GJXAIOU",[[1,1178,"    "]],[1176,1176],[1180,1180]]],[1536760792317,["gjx16@GJXAIOU",[[1,1205,"  "]],[1204,1204],[1206,1206]]],[1536760870741,["gjx16@GJXAIOU",[[1,1462,"   //字符串是以0结尾，即遇到0即视为结尾"]],[1462,1462],[1485,1485]]],[1536760908800,["gjx16@GJXAIOU",[[1,1593,"3."]],[1593,1593],[1595,1595]]],[1536761135473,["gjx16@GJXAIOU",[[-1,2094,"/*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */"]],[2094,2168],[2094,2094]]],[1536761144890,["gjx16@GJXAIOU",[[1,1498,"  \n"]],[1497,1497],[1500,1500]]],[1536761149009,["gjx16@GJXAIOU",[[-1,1499," "]],[1500,1500],[1499,1499]]],[1536761153095,["gjx16@GJXAIOU",[[1,1499,"/*这里的while语句等效为：\n\n  *  while（str[i]）\n\n  *  {\n\n  *  i++;\n\n  *  }\n\n  *\n\n  */"]],[1499,1499],[1573,1573]]],[1536761164272,["gjx16@GJXAIOU",[[1,1567," i--；"]],[1567,1567],[1572,1572]]],[1536761167151,["gjx16@GJXAIOU",[[-1,1555,"\n"]],[1555,1555],[1554,1554]]],[1536761168513,["gjx16@GJXAIOU",[[-1,1544,"\n"]],[1544,1544],[1543,1543]]],[1536761170165,["gjx16@GJXAIOU",[[-1,1536,"\n"]],[1536,1536],[1535,1535]]],[1536761171822,["gjx16@GJXAIOU",[[-1,1560,"\n"]],[1560,1560],[1559,1559]]],[1536761175495,["gjx16@GJXAIOU",[[1,1498,"\n "]],[1498,1498],[1500,1500]]],[1536761182095,["gjx16@GJXAIOU",[[-1,2174,"\n"]],[2173,2174],[2173,2173]]],[1536761183333,["gjx16@GJXAIOU",[[-1,2171,"  "]],[2173,2173],[2171,2171]]],[1536761183800,["gjx16@GJXAIOU",[[-1,2171,"\n"]],[2171,2171],[2170,2170]]],[1536761184006,["gjx16@GJXAIOU",[[-1,2170,"\n"]],[2170,2170],[2169,2169]]],[1536761191935,["gjx16@GJXAIOU",[[1,2169,"；"]],[2169,2169],[2170,2170]]],[1536761197114,["gjx16@GJXAIOU",[[1,2173,"\n  "]],[2170,2170],[2173,2173]]],[1536761225038,["gjx16@GJXAIOU",[[-1,2143," i"]],[2143,2143],[2141,2141]]],[1536761228431,["gjx16@GJXAIOU",[[1,2141,"len"]],[2141,2141],[2144,2144]]],[1536761232232,["gjx16@GJXAIOU",[[-1,2165,"i"]],[2166,2166],[2165,2165]]],[1536761233142,["gjx16@GJXAIOU",[[1,2165,"len"]],[2165,2165],[2168,2168]]],[1536761236436,["gjx16@GJXAIOU",[[-1,2174,"  "],[1,2176,"\n"]],[2176,2176],[2175,2175]]],[1536761237751,["gjx16@GJXAIOU",[[1,2175,"len"]],[2175,2175],[2178,2178]]],[1536761239184,["gjx16@GJXAIOU",[[-1,2175,"len"]],[2178,2178],[2175,2175]]],[1536761239524,["gjx16@GJXAIOU",[[-1,2175,"\n"]],[2175,2175],[2174,2174]]],[1536761245140,["gjx16@GJXAIOU",[[1,2174,"  len --;"]],[2174,2174],[2183,2183]]],[1536761246124,["gjx16@GJXAIOU",[[1,2186,"\n  "]],[2183,2183],[2186,2186]]],[1536761254021,["gjx16@GJXAIOU",[[-1,2223,"2"]],[2224,2224],[2223,2223]]],[1536761254483,["gjx16@GJXAIOU",[[1,2223,"1"]],[2223,2223],[2224,2224]]],[1536761321063,[null,[[-1,2145,"i"],[1,2146," "]],[2145,2145],[2147,2147]]],[1536761321063,[null,[[1,2145,"i"],[-1,2145," "]],[2147,2147],[2145,2145]]],[1536761280952,["gjx16@GJXAIOU",[[-1,2221,"i"]],[2222,2222],[2221,2221]]],[1536761282079,["gjx16@GJXAIOU",[[1,2221,"len"]],[2221,2221],[2224,2224]]],[1536761292504,["gjx16@GJXAIOU",[[1,1693,",ji"]],[1693,1693],[1696,1696]]],[1536761293014,["gjx16@GJXAIOU",[[-1,1694,"ji"]],[1696,1696],[1694,1694]]],[1536761297841,["gjx16@GJXAIOU",[[1,1694,"即将后面的额"]],[1694,1694],[1700,1700]]],[1536761298817,["gjx16@GJXAIOU",[[-1,1699,"额"]],[1700,1700],[1699,1699]]],[1536761302114,["gjx16@GJXAIOU",[[1,1699,"0页"]],[1699,1699],[1701,1701]]],[1536761302662,["gjx16@GJXAIOU",[[-1,1700,"页"]],[1701,1701],[1700,1700]]],[1536761314719,["gjx16@GJXAIOU",[[1,1700,"也逆置到最前面"]],[1700,1700],[1707,1707]]],[1536761381062,[null,[[-1,2159,"i"],[1,2160," "]],[2159,2159],[2161,2161]]],[1536761381062,[null,[[1,2159,"i"],[-1,2159," "]],[2161,2161],[2159,2159]]],[1536761321153,["gjx16@GJXAIOU",[[1,1711,"会"]],[1711,1711],[1712,1712]]],[1536761337686,["gjx16@GJXAIOU",[[-1,2199,"  "],[1,2201,"\n"]],[2201,2201],[2200,2200]]],[1536761366401,["gjx16@GJXAIOU",[[1,2557,"“"]],[2557,2557],[2558,2558]]],[1536761368435,["gjx16@GJXAIOU",[[-1,2557,"“"]],[2558,2558],[2557,2557]]],[1536761376173,["gjx16@GJXAIOU",[[1,2557,"：将UF"]],[2557,2557],[2561,2561]]],[1536761377182,["gjx16@GJXAIOU",[[-1,2560,"F"]],[2561,2561],[2560,2560]]],[1536761379183,["gjx16@GJXAIOU",[[1,2560,"TF"]],[2560,2560],[2562,2562]]],[1536761441137,[null,[[-1,2160,"i"],[1,2161," "]],[2160,2160],[2162,2162]]],[1536761441137,[null,[[1,2160,"i"],[-1,2160," "]],[2162,2162],[2160,2160]]],[1536761408004,["gjx16@GJXAIOU",[[1,2562,"-8的编码更改为GBK编码"]],[2562,2562],[2575,2575]]],[1536761429906,["gjx16@GJXAIOU",[[1,1674,"1 "]],[1674,1674],[1676,1676]]],[1536761435025,["gjx16@GJXAIOU",[[1,2423,"3.2"]],[2423,2423],[2426,2426]]],[1536761501127,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761501127,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761451083,["gjx16@GJXAIOU",[[1,2685,"；"]],[2685,2685],[2686,2686]]],[1536761451791,["gjx16@GJXAIOU",[[1,2687,"  \n"]],[2686,2686],[2689,2689]]],[1536761456065,["gjx16@GJXAIOU",[[-1,2687,"  "]],[2689,2689],[2687,2687]]],[1536761456524,["gjx16@GJXAIOU",[[-1,2688,"\n"]],[2687,2687],[2686,2686]]],[1536761457093,["gjx16@GJXAIOU",[[-1,2685,"；"]],[2686,2686],[2685,2685]]],[1536761459068,["gjx16@GJXAIOU",[[1,2685,";"]],[2685,2685],[2686,2686]]],[1536761461445,["gjx16@GJXAIOU",[[1,2687,"  \n"]],[2686,2686],[2689,2689]]],[1536761465253,["gjx16@GJXAIOU",[[1,2689,"i--;"]],[2689,2689],[2693,2693]]],[1536761470448,["gjx16@GJXAIOU",[[-1,2731,"2"]],[2732,2732],[2731,2731]]],[1536761470922,["gjx16@GJXAIOU",[[1,2731,"1"]],[2731,2731],[2732,2732]]],[1536761473435,["gjx16@GJXAIOU",[[-1,2658,"i"]],[2659,2659],[2658,2658]]],[1536761474914,["gjx16@GJXAIOU",[[1,2658,"len"]],[2658,2658],[2661,2661]]],[1536761477988,["gjx16@GJXAIOU",[[-1,2691,"i"]],[2692,2692],[2691,2691]]],[1536761478887,["gjx16@GJXAIOU",[[1,2691,"len"]],[2691,2691],[2694,2694]]],[1536761481534,["gjx16@GJXAIOU",[[-1,2682,"i"]],[2683,2683],[2682,2682]]],[1536761482454,["gjx16@GJXAIOU",[[1,2682,"len"]],[2682,2682],[2685,2685]]],[1536761487010,["gjx16@GJXAIOU",[[-1,2734," i"]],[2736,2736],[2734,2734]]],[1536761488131,["gjx16@GJXAIOU",[[1,2734,"len"]],[2734,2734],[2737,2737]]],[1536761491611,["gjx16@GJXAIOU",[[1,2701,"\n"]],[2700,2700],[2701,2701]]],[1536761561126,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761561126,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761506379,["gjx16@GJXAIOU",[[1,2860,"  "]],[2860,2860],[2862,2862]]],[1536761537792,["gjx16@GJXAIOU",[[1,2476,"dao"]],[2476,2476],[2479,2479]]],[1536761539125,["gjx16@GJXAIOU",[[-1,2476,"dao"]],[2479,2479],[2476,2476]]],[1536761551113,["gjx16@GJXAIOU",[[1,2476,"倒置的时候需要两个姐"]],[2476,2476],[2486,2486]]],[1536761551696,["gjx16@GJXAIOU",[[-1,2485,"姐"]],[2486,2486],[2485,2485]]],[1536761559237,["gjx16@GJXAIOU",[[1,2485,"字节互换位置，"]],[2485,2485],[2492,2492]]],[1536761621136,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761621136,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761565241,["gjx16@GJXAIOU",[[-1,2487,"互换位置，"]],[2492,2492],[2487,2487]]],[1536761584215,["gjx16@GJXAIOU",[[1,2487,"共同互换位置，因此需要两个中间变量"]],[2487,2487],[2504,2504]]],[1536761597741,["gjx16@GJXAIOU",[[-1,2446,"一"]],[2447,2447],[2446,2446]]],[1536761598182,["gjx16@GJXAIOU",[[1,2446,"1"]],[2446,2446],[2447,2447]]],[1536761610566,["gjx16@GJXAIOU",[[1,3063,"4."]],[3063,3063],[3065,3065]]],[1536761681147,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761681147,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761625952,["gjx16@GJXAIOU",[[-1,3040,"\n"]],[3040,3040],[3039,3039]]],[1536761627128,["gjx16@GJXAIOU",[[-1,3017,"\n"]],[3017,3017],[3016,3016]]],[1536761628551,["gjx16@GJXAIOU",[[-1,3001," "]],[3001,3001],[3000,3000]]],[1536761631124,["gjx16@GJXAIOU",[[1,3001," "]],[3000,3000],[3001,3001]]],[1536761632730,["gjx16@GJXAIOU",[[-1,2999,"\n"]],[2999,2999],[2998,2998]]],[1536761633801,["gjx16@GJXAIOU",[[-1,2984,"\n"]],[2984,2984],[2983,2983]]],[1536761634582,["gjx16@GJXAIOU",[[-1,2956,"\n"]],[2957,2957],[2956,2956]]],[1536761636881,["gjx16@GJXAIOU",[[-1,2924,"\n"]],[2924,2924],[2923,2923]]],[1536761637672,["gjx16@GJXAIOU",[[-1,2902,"\n"]],[2902,2902],[2901,2901]]],[1536761638311,["gjx16@GJXAIOU",[[-1,2887,"\n"]],[2887,2887],[2886,2886]]],[1536761640175,["gjx16@GJXAIOU",[[-1,2866,"\n"]],[2866,2866],[2865,2865]]],[1536761641063,["gjx16@GJXAIOU",[[-1,2836,"\n"]],[2836,2836],[2835,2835]]],[1536761647976,["gjx16@GJXAIOU",[[1,2887,"\n  "]],[2884,2884],[2887,2887]]],[1536761650797,["gjx16@GJXAIOU",[[-1,2811,"\n"]],[2811,2811],[2810,2810]]],[1536761655162,["gjx16@GJXAIOU",[[-1,2748,"\n"]],[2748,2748],[2747,2747]]],[1536761656009,["gjx16@GJXAIOU",[[-1,2769,"\n"]],[2769,2769],[2768,2768]]],[1536761659216,["gjx16@GJXAIOU",[[-1,2790,"\n"]],[2790,2790],[2789,2789]]],[1536761663483,["gjx16@GJXAIOU",[[-1,2697,"\n"]],[2697,2697],[2696,2696]]],[1536761665874,["gjx16@GJXAIOU",[[-1,2649,"\n"]],[2649,2649],[2648,2648]]],[1536761667410,["gjx16@GJXAIOU",[[-1,2646,"\n"]],[2646,2646],[2645,2645]]],[1536761675527,["gjx16@GJXAIOU",[[1,3027,"  "]],[3027,3027],[3029,3029]]],[1536761741150,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761741150,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761684624,["gjx16@GJXAIOU",[[-1,3081,","]],[3082,3082],[3081,3081]]],[1536761709687,["gjx16@GJXAIOU",[[1,3255,"  "]],[3255,3255],[3257,3257]]],[1536761775678,[null,[[-1,2162,"i"],[1,2163," "]],[2162,2162],[2164,2164]]],[1536761775678,[null,[[1,2162,"i"],[-1,2162," "]],[2164,2164],[2162,2162]]],[1536761758906,["gjx16@GJXAIOU",[[1,3451,"  "]],[3451,3451],[3453,3453]]],[1536761773335,["gjx16@GJXAIOU",[[-1,3492,"，"]],[3493,3493],[3492,3492]]]],null,"gjx16@GJXAIOU"],["fb04895a-a9ba-4145-9582-559629dff94d",1536799107255,"# day6字符串与字符数组\n\n**1.字符数组的定义**\n\n```c\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n\n  return 0；\n}\n```\n\n**2.1将一个字符串里面的元素进行排序**\n（使用sizeof函数，当且仅当定义数组的大小正好包含完整元素的时候才可以）\n\n```c\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[5]  =  \"acdb\";\n\n  for(i  =  0  ;i  <  (sizeof(array)-1)  ;  i++)\n\n    {\n\n      for(j  =  1;j  <  ((sizeof(array)-1)-i)  ;j++)\n\n    {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n    {\n\n    tmp  =  array[j];\n\n    array[j]  =  array[j-1];\n\n    array[j-1]  =  tmp;\n\n    }\n\n  }\n\n  }\n\n  printf(\"%s\\n\",array);\n\n  return  0;\n\n}\n```\n\n**2.2  法二：根据len的大小，这时候可以任意更改数组大小**\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[15]  =  \"acdb\";\n\n  int  len  =  0;\n\n  while(array[len++]);\n\n  len  --;\n\n  for(i  =  0  ;i  <  len;  i++)\n\n  {\n\n    for(j  =  1;j  <  (len-i)  ;j++)\n\n    {\n\n    char  tmp;\n\n    if(array[j-1]  >  array[j])\n\n    {\n\n      tmp  =  array[j];\n\n      array[j]  =  array[j-1];\n\n      array[j-1]  =  tmp;\n\n    }\n\n  }\n\n  }\n\n  printf(\"(%s)\\n\",array);\n\n  return  0;\n\n}\n\n\n```\n\n**2.3 sizeof和len的区别**\n\n==根据以下的程序可以得到：sizeof得到的是数组定义的长度，而len得到的是数组中元素的个数(当是汉字的时候，就要取决于编码来看)==\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len;\n\n  while(s[len++]);   //字符串是以0结尾，即遇到0即视为结尾\n\n  len  --;\n\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n  *  {\n  *  i++;\n  *  }\n  * i--；\n\n  */\n\n  printf(\"sizeof  =  %d\\n\",sizeof(s));\n\n  printf(\"len  =  %d\\n\",len);\n\n  return  0;\n\n}\n```\n\n**3.1 将字符串进行逆置**\n1.直接进行逆置,即将后面的0也逆置到最前面（一般不会输出结果因为后面很多0）\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  int  min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\n  return  0;\n\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n  int len  =  0;\n\n  while(str[len++])；\n  len --;\n\n\n  int  min  =  0;\n\n  int  max  =  len-1;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n**3.2如何将汉字进行倒置**\n在ASCII码中1个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；倒置的时候需要两个字节共同互换位置，因此需要两个中间变量\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码：将UTF-8的编码更改为GBK编码)\n```c\n#include<stdio.h>\n\nint  main()\n{\n  char  str[50]  =  \"你好世界\";\n\n  int  len  =  0;\n  while(str[len++]);\n  len--;\n\n\n  int  min  =  0;\n  int  max  = len-1;\n  while(min  <  max)\n  {\n\n  char  tmp;\n  tmp  =  str[max  -1];\n  str[max  -1]  =  str[min];\n  str[min]  =  tmp;\n  \n  char  tmp1;\n  tmp1  =  str[max];\n  str[max]  =  str[min  +  1];\n  str[min  +  1]  =  tmp1;\n  min  +=  2;\n  max  -=2;\n\n  }\n  printf(\"%s\\n\",str);\n  return  0;\n\n}\n```\n\n\n**4.字符串和字符数组的差别**\n\n字符串在内存中是以0结尾；以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n\n\n\n## 字符串的使用\n\n\n**1.去掉字符串右边的空格**\n\n```c\n#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}\n```\n\n**2.去掉字符串左边的空格**\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;  \n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n法二：\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++] ==' ');\n\n  len  --; //得到了字符串前面的空格数量 \n\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0; \n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**3.字符串到整数的变化**\n\n步骤：1.知道字符串的长度\n2.将每个字符读取出来，转化为整数后*10的长度-1次方；\n3.将每个位计算和加起来\n\n```c\nint main()\n{\n  char s[100] = \"1234\";\n  int len = 0;\n  while(s[len++]);\n  len --;\n\n  int value = 0;//存放变量，为将字符串转换为整数后的变量\n  int i;\n  int tmp = len;\n  for (i = 0;i < len; i++) //遍历字符串\n  {\n    int base = 10; //求10的n次方\n    if((tmp - i -1) == 0 )\n    {\n      base = 1;          //字符串的最后一个时候乘1\n    }\n     else\n     {\n       int j;\n       for(j = 1; j < (tmp -i -1);j++)\n       {\n         base *= 10;\n       }\n    \n     }\n      value += (base * (s[i] - '0'));  \n  }\n   printf(\"%d\\n\",value);\n   return 0;\n}\n\n\n\n```\n\n~~下面的程序有问题，输出的值不对~~\n```c\n#include<math.h>\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;\n\n  double  result  =  0;\n\n  int  i;\n\n  int  j;\n\n  int  wei  =  0;\n\n  for(i  =  0;i  <  len;  i++)\n\n  {\n\n  if(len  -  i  -1  ==  0)\n\n  {\n\n  wei  =  s[i];\n\n  }\n\n  else\n\n  {\n\n  for(j  =  0  ;j  <  len  -  1;j++)\n\n  {\n\n  double  x  =  10;\n\n  double  y  =  len  -1  -j;\n\n  result  +=  (s[j])*(pow(x,y));\n\n  }\n\n  }\n\n  result  +=  wei;\n\n  printf(\"%d\\n\",result);\n\n  return  0;\n\n}\n\n}\n```\n\n\n\n\n\n\n \n\n\n\n\n\n",[[1536799063794,["gjx16@GJXAIOU",[[1,3068,"\n"]],[3067,3067],[3068,3068]]],[1536799063912,["gjx16@GJXAIOU",[[1,3069,"\n"]],[3068,3068],[3069,3069]]],[1536799064071,["gjx16@GJXAIOU",[[1,3070,"\n"]],[3069,3069],[3070,3070]]],[1536799064212,["gjx16@GJXAIOU",[[1,3071,"\n"]],[3070,3070],[3071,3071]]],[1536799064349,["gjx16@GJXAIOU",[[1,3072,"\n"]],[3071,3071],[3072,3072]]],[1536799075898,["gjx16@GJXAIOU",[[1,3068,"- 电仪"]],[3068,3068],[3072,3072]]],[1536799076603,["gjx16@GJXAIOU",[[-1,3070,"电仪"]],[3072,3072],[3070,3070]]],[1536799085745,["gjx16@GJXAIOU",[[1,3070,"定义及其使用上的区别"]],[3070,3070],[3080,3080]]],[1536799086567,["gjx16@GJXAIOU",[[1,3081,"- \n"]],[3080,3080],[3083,3083]]],[1536799088260,["gjx16@GJXAIOU",[[-1,3081,"- "]],[3083,3083],[3081,3081]]],[1536799105893,["gjx16@GJXAIOU",[[1,3081,"  - 字符串"]],[3081,3081],[3088,3088]]],[1536799108206,["gjx16@GJXAIOU",[[-1,3089,"："]],[3090,3090],[3089,3089]]],[1536799114833,["gjx16@GJXAIOU",[[1,3089,"“”"]],[3089,3089],[3091,3091]]],[1536799119387,["gjx16@GJXAIOU",[[1,3090,"char"]],[3090,3090],[3094,3094]]],[1536799122526,["gjx16@GJXAIOU",[[-1,3090,"char"]],[3094,3094],[3090,3090]]],[1536799125265,["gjx16@GJXAIOU",[[-1,3095,"\n"]],[3092,3092],[3091,3091]]],[1536799126312,["gjx16@GJXAIOU",[[-1,3089,"“”"]],[3091,3091],[3089,3089]]],[1536799127747,["gjx16@GJXAIOU",[[1,3089,"'"]],[3089,3089],[3090,3090]]],[1536799127782,["gjx16@GJXAIOU",[[-1,3089,"'"],[1,3090,"‘"]],[3090,3090],[3090,3090]]],[1536799140048,["gjx16@GJXAIOU",[[1,3090,"char *string = \""]],[3090,3090],[3106,3106]]],[1536799140080,["gjx16@GJXAIOU",[[-1,3105,"\""],[1,3106,"“"]],[3106,3106],[3106,3106]]],[1536799147978,["gjx16@GJXAIOU",[[1,3106,"andnf\""]],[3106,3106],[3112,3112]]],[1536799148009,["gjx16@GJXAIOU",[[-1,3111,"\""],[1,3112,"”"]],[3112,3112],[3112,3112]]],[1536799152362,["gjx16@GJXAIOU",[[1,3112,";'"]],[3112,3112],[3114,3114]]],[1536799152395,["gjx16@GJXAIOU",[[-1,3113,"'"],[1,3114,"’"]],[3114,3114],[3114,3114]]],[1536799160624,["gjx16@GJXAIOU",[[1,3090," "]],[3090,3090],[3091,3091]]],[1536799162313,["gjx16@GJXAIOU",[[1,3115," "]],[3115,3115],[3116,3116]]],[1536799164655,["gjx16@GJXAIOU",[[1,3114," "]],[3114,3114],[3115,3115]]],[1536799226168,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3120,"\n"],[1,3121,"符"]],[3088,3088],[3122,3122]]],[1536799226168,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3120,"\n"],[-1,3122,"符"]],[3122,3122],[3088,3088]]],[1536799208876,["gjx16@GJXAIOU",[[-1,3116," "]],[3117,3117],[3116,3116]]],[1536799210051,["gjx16@GJXAIOU",[[1,3116,"·"]],[3116,3116],[3117,3117]]],[1536799211843,["gjx16@GJXAIOU",[[-1,3115,"’·"]],[3117,3117],[3115,3115]]],[1536799213541,["gjx16@GJXAIOU",[[1,3115,"~"]],[3115,3115],[3116,3116]]],[1536799214499,["gjx16@GJXAIOU",[[-1,3115,"~"]],[3116,3116],[3115,3115]]],[1536799215367,["gjx16@GJXAIOU",[[1,3115,"·"]],[3115,3115],[3116,3116]]],[1536799216457,["gjx16@GJXAIOU",[[-1,3115,"·"]],[3116,3116],[3115,3115]]],[1536799218292,["gjx16@GJXAIOU",[[1,3115,"`"]],[3115,3115],[3116,3116]]],[1536799223333,["gjx16@GJXAIOU",[[-1,3114," "]],[3115,3115],[3114,3114]]],[1536799286169,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3118,"\n"],[1,3119,"符"]],[3088,3088],[3120,3120]]],[1536799286169,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3118,"\n"],[-1,3120,"符"]],[3120,3120],[3088,3088]]],[1536799231173,["gjx16@GJXAIOU",[[-1,3089,"‘ "]],[3091,3091],[3089,3089]]],[1536799231486,["gjx16@GJXAIOU",[[1,3089,"`"]],[3089,3089],[3090,3090]]],[1536799239007,["gjx16@GJXAIOU",[[1,3115,"  - \n"]],[3114,3114],[3119,3119]]],[1536799240642,["gjx16@GJXAIOU",[[1,3119,"f"]],[3119,3119],[3120,3120]]],[1536799241672,["gjx16@GJXAIOU",[[-1,3119,"f"]],[3120,3120],[3119,3119]]],[1536799249246,["gjx16@GJXAIOU",[[1,3119,"字符数组：``"]],[3119,3119],[3126,3126]]],[1536799266909,["gjx16@GJXAIOU",[[1,3125,"char a[100] = \"\";"]],[3125,3125],[3142,3142]]],[1536799273617,["gjx16@GJXAIOU",[[1,3140,"and"]],[3140,3140],[3143,3143]]],[1536799275096,["gjx16@GJXAIOU",[[-1,3142,"d"]],[3143,3143],[3142,3142]]],[1536799276345,["gjx16@GJXAIOU",[[1,3142,"dnf"]],[3142,3142],[3145,3145]]],[1536799283736,["gjx16@GJXAIOU",[[1,3148,"hu"]],[3148,3148],[3150,3150]]],[1536799284390,["gjx16@GJXAIOU",[[-1,3148,"hu"]],[3150,3150],[3148,3148]]],[1536799346176,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3151,"\n"],[1,3152,"符"]],[3088,3088],[3153,3153]]],[1536799346176,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3151,"\n"],[-1,3153,"符"]],[3153,3153],[3088,3088]]],[1536799289723,["gjx16@GJXAIOU",[[1,3148,"或者``"]],[3148,3148],[3152,3152]]],[1536799303230,["gjx16@GJXAIOU",[[1,3151,"char a[100] = \"\";"]],[3151,3151],[3168,3168]]],[1536799306500,["gjx16@GJXAIOU",[[1,3166,"and"]],[3166,3166],[3169,3169]]],[1536799307694,["gjx16@GJXAIOU",[[-1,3168,"d"]],[3169,3169],[3168,3168]]],[1536799308887,["gjx16@GJXAIOU",[[1,3168,"fnd"]],[3168,3168],[3171,3171]]],[1536799312377,["gjx16@GJXAIOU",[[-1,3167,"nfnd"]],[3171,3171],[3167,3167]]],[1536799315209,["gjx16@GJXAIOU",[[1,3167,"ndnf"]],[3167,3167],[3171,3171]]],[1536799317715,["gjx16@GJXAIOU",[[1,3175,"  - \n"]],[3174,3174],[3179,3179]]],[1536799320728,["gjx16@GJXAIOU",[[-1,3176," - "]],[3179,3179],[3176,3176]]],[1536799326373,["gjx16@GJXAIOU",[[1,3176,"shi"]],[3176,3176],[3179,3179]]],[1536799327185,["gjx16@GJXAIOU",[[-1,3176,"shi"]],[3179,3179],[3176,3176]]],[1536799345753,["gjx16@GJXAIOU",[[1,3176,"使用字符串初始化字符数组的时候没要比诸葛"]],[3176,3176],[3196,3196]]],[1536799406178,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3199,"\n"],[1,3200,"符"]],[3088,3088],[3201,3201]]],[1536799406178,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3199,"\n"],[-1,3201,"符"]],[3201,3201],[3088,3088]]],[1536799346720,["gjx16@GJXAIOU",[[-1,3194,"诸葛"]],[3196,3196],[3194,3194]]],[1536799348533,["gjx16@GJXAIOU",[[1,3194,"诸葛"]],[3194,3194],[3196,3196]]],[1536799349145,["gjx16@GJXAIOU",[[-1,3194,"诸葛"]],[3196,3196],[3194,3194]]],[1536799374075,["gjx16@GJXAIOU",[[1,3194,"逐个赋值多占一个字节，用于存放 、"]],[3194,3194],[3211,3211]]],[1536799374991,["gjx16@GJXAIOU",[[-1,3210,"、"]],[3211,3211],[3210,3210]]],[1536799380977,["gjx16@GJXAIOU",[[1,3210,"\\0 ,f"]],[3210,3210],[3215,3215]]],[1536799381381,["gjx16@GJXAIOU",[[-1,3214,"f"]],[3215,3215],[3214,3214]]],[1536799388957,["gjx16@GJXAIOU",[[-1,3165,"\"andnf\""]],[3172,3172],[3165,3165]]],[1536799391116,["gjx16@GJXAIOU",[[1,3165,"{}"]],[3165,3165],[3167,3167]]],[1536799400263,["gjx16@GJXAIOU",[[1,3166,"a,n,d,n,f"]],[3166,3166],[3175,3175]]],[1536799466196,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3221,"\n"],[1,3222,"符"]],[3088,3088],[3223,3223]]],[1536799466196,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3221,"\n"],[-1,3223,"符"]],[3223,3223],[3088,3088]]],[1536799433302,["gjx16@GJXAIOU",[[1,3218,"da但是"]],[3218,3218],[3222,3222]]],[1536799435779,["gjx16@GJXAIOU",[[-1,3218,"da但是"]],[3222,3222],[3218,3218]]],[1536799465569,["gjx16@GJXAIOU",[[1,3218,"但是字符数组的长度不会计算\\0，二数组战友的字节数会疾患"]],[3218,3218],[3246,3246]]],[1536799526188,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3249,"\n"],[1,3250,"符"]],[3088,3088],[3251,3251]]],[1536799526188,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3249,"\n"],[-1,3251,"符"]],[3251,3251],[3088,3088]]],[1536799467207,["gjx16@GJXAIOU",[[1,3246,"\\0"]],[3246,3246],[3248,3248]]],[1536799471914,["gjx16@GJXAIOU",[[-1,3234,"二"]],[3235,3235],[3234,3234]]],[1536799472327,["gjx16@GJXAIOU",[[1,3234,"e"]],[3234,3234],[3235,3235]]],[1536799473523,["gjx16@GJXAIOU",[[-1,3234,"e"]],[3235,3235],[3234,3234]]],[1536799474384,["gjx16@GJXAIOU",[[1,3234,"er"]],[3234,3234],[3236,3236]]],[1536799474940,["gjx16@GJXAIOU",[[-1,3234,"er"]],[3236,3236],[3234,3234]]],[1536799478959,["gjx16@GJXAIOU",[[1,3234,"而"]],[3234,3234],[3235,3235]]],[1536799481170,["gjx16@GJXAIOU",[[-1,3237,"战友"]],[3239,3239],[3237,3237]]],[1536799486320,["gjx16@GJXAIOU",[[1,3237,"占有"]],[3237,3237],[3239,3239]]],[1536799492023,["gjx16@GJXAIOU",[[-1,3244,"疾患"]],[3246,3246],[3244,3244]]],[1536799494288,["gjx16@GJXAIOU",[[1,3244,"就散"]],[3244,3244],[3246,3246]]],[1536799495007,["gjx16@GJXAIOU",[[-1,3244,"就散"]],[3246,3246],[3244,3244]]],[1536799498411,["gjx16@GJXAIOU",[[1,3244,"计算"]],[3244,3244],[3246,3246]]],[1536799501348,["gjx16@GJXAIOU",[[1,3248," ，"]],[3248,3248],[3250,3250]]],[1536799525713,["gjx16@GJXAIOU",[[1,3251," \n"]],[3250,3250],[3252,3252]]],[1536799586199,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3255,"\n"],[1,3256,"符"]],[3088,3088],[3257,3257]]],[1536799586199,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3255,"\n"],[-1,3257,"符"]],[3257,3257],[3088,3088]]],[1536799555299,["gjx16@GJXAIOU",[[1,3252,"    - 输入输出：输出端"]],[3252,3252],[3266,3266]]],[1536799556342,["gjx16@GJXAIOU",[[-1,3265,"端"]],[3266,3266],[3265,3265]]],[1536799567880,["gjx16@GJXAIOU",[[1,3265,"的时候只要遇到‘、"]],[3265,3265],[3274,3274]]],[1536799568999,["gjx16@GJXAIOU",[[-1,3273,"、"]],[3274,3274],[3273,3273]]],[1536799569596,["gjx16@GJXAIOU",[[1,3273,"\\"]],[3273,3273],[3274,3274]]],[1536799570888,["gjx16@GJXAIOU",[[-1,3272,"‘\\"]],[3274,3274],[3272,3272]]],[1536799572101,["gjx16@GJXAIOU",[[1,3272,"'"]],[3272,3272],[3273,3273]]],[1536799572134,["gjx16@GJXAIOU",[[-1,3272,"'"],[1,3273,"‘"]],[3273,3273],[3273,3273]]],[1536799576894,["gjx16@GJXAIOU",[[1,3273,"\\0'"]],[3273,3273],[3276,3276]]],[1536799576928,["gjx16@GJXAIOU",[[-1,3275,"'"],[1,3276,"’"]],[3276,3276],[3276,3276]]],[1536799585674,["gjx16@GJXAIOU",[[1,3276,"就会停止输出"]],[3276,3276],[3282,3282]]],[1536799646197,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3285,"\n"],[1,3286,"符"]],[3088,3088],[3287,3287]]],[1536799646197,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3285,"\n"],[-1,3287,"符"]],[3287,3287],[3088,3088]]],[1536799587179,["gjx16@GJXAIOU",[[1,3282,"；"]],[3282,3282],[3283,3283]]],[1536800006213,[null,[[-1,3088,"\n"],[1,3089,"："],[1,3286,"\n"],[1,3287,"符"]],[3088,3088],[3288,3288]]],[1536800006213,[null,[[1,3088,"\n"],[-1,3088,"："],[-1,3286,"\n"],[-1,3288,"符"]],[3288,3288],[3088,3088]]],[1536799978126,["gjx16@GJXAIOU",[[1,16,"\n"]],[14,14],[15,15]]],[1536799978289,["gjx16@GJXAIOU",[[1,17,"\n"]],[15,15],[16,16]]],[1536799978436,["gjx16@GJXAIOU",[[1,18,"\n"]],[16,16],[17,17]]],[1536799978617,["gjx16@GJXAIOU",[[1,19,"\n"]],[17,17],[18,18]]],[1536799979091,["gjx16@GJXAIOU",[[1,20,"\n"]],[18,18],[19,19]]],[1536799980878,["gjx16@GJXAIOU",[[1,19,"****"]],[19,19],[21,21]]],[1536799987282,["gjx16@GJXAIOU",[[1,21,"基础知识的比较"]],[21,21],[28,28]]],[1536799989698,["gjx16@GJXAIOU",[[1,32,"\n"]],[30,30],[31,31]]],[1536799994853,["gjx16@GJXAIOU",[[1,31,"'\\0'与ASCII中 space 的区别：\n\nASCII中0~31为“非打印控制字符”，其中例如 0号对应的’\\0‘ ，13号对应的回车键，将它们按字符的形式打印到屏幕上的时候均为“ ”，它和空格 “ ” 是有本质上的区别。空格对应的ASCII为32号，它属于“打印字符”，只不过空格在屏幕上的表现形式也为 “ ” ，与无法打印的非打印控制字符显示的效果一样罢了。’\\0‘仅仅作为一个字符串结束标志存在着，它的作用就是一个标志！"]],[31,31],[246,246]]],[1536800001212,["gjx16@GJXAIOU",[[1,31,"**"],[1,53,"**"]],[31,53],[31,57]]],[1536800066218,[null,[[-1,3324,"\n"],[1,3325,"："],[1,3522,"\n"],[1,3523,"符"]],[3324,3324],[3524,3524]]],[1536800066218,[null,[[1,3324,"\n"],[-1,3324,"："],[-1,3522,"\n"],[-1,3524,"符"]],[3524,3524],[3324,3324]]],[1536800007757,["gjx16@GJXAIOU",[[1,19,"- "]],[19,19],[21,21]]],[1536800012118,["gjx16@GJXAIOU",[[1,59,"- "]],[59,59],[61,61]]],[1536800014577,["gjx16@GJXAIOU",[[-1,59,"- "]],[61,61],[59,59]]],[1536800021431,["gjx16@GJXAIOU",[[1,33,"  - "]],[33,33],[37,37]]],[1536800025116,["gjx16@GJXAIOU",[[1,65,"  "]],[65,65],[67,67]]],[1536800488294,[null,[[-1,3332,"\n"],[1,3333,"："],[1,3530,"\n"],[1,3531,"符"]],[3332,3332],[3532,3532]]],[1536800488294,[null,[[1,3332,"\n"],[-1,3332,"："],[-1,3530,"\n"],[-1,3532,"符"]],[3532,3532],[3332,3332]]],[1536800443404,["gjx16@GJXAIOU",[[1,259,"  \n"]],[258,258],[261,261]]],[1536800443869,["gjx16@GJXAIOU",[[-1,259,"  "],[1,261,"\n"]],[261,261],[260,260]]],[1536800463780,["gjx16@GJXAIOU",[[1,3531,"···"]],[3531,3531],[3534,3534]]],[1536800465229,["gjx16@GJXAIOU",[[-1,3531,"···"]],[3534,3534],[3531,3531]]],[1536800468239,["gjx16@GJXAIOU",[[1,3531,"```c"]],[3531,3531],[3535,3535]]],[1536800468740,["gjx16@GJXAIOU",[[1,3537,"\n"]],[3535,3535],[3536,3536]]],[1536800469116,["gjx16@GJXAIOU",[[1,3538,"\n"]],[3536,3536],[3537,3537]]],[1536800470337,["gjx16@GJXAIOU",[[1,3537,"```"]],[3537,3537],[3540,3540]]],[1536800477327,["gjx16@GJXAIOU",[[1,3536,"int main()"]],[3536,3536],[3546,3546]]],[1536800479508,["gjx16@GJXAIOU",[[1,3547,"\n"]],[3546,3546],[3547,3547]]],[1536800481033,["gjx16@GJXAIOU",[[1,3547,"{}"]],[3547,3547],[3549,3549]]],[1536800482316,["gjx16@GJXAIOU",[[1,3548,"\n"]],[3548,3548],[3549,3549]]],[1536800482486,["gjx16@GJXAIOU",[[1,3549,"\n"]],[3549,3549],[3550,3550]]],[1536800482671,["gjx16@GJXAIOU",[[1,3550,"\n"]],[3550,3550],[3551,3551]]],[1536800482854,["gjx16@GJXAIOU",[[1,3551,"\n"]],[3551,3551],[3552,3552]]],[1536800483048,["gjx16@GJXAIOU",[[1,3552,"\n"]],[3552,3552],[3553,3553]]],[1536800487882,["gjx16@GJXAIOU",[[1,3549,"  int "]],[3549,3549],[3555,3555]]],[1536800548360,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3566,"字符"]],[3334,3334],[3568,3568]]],[1536800548360,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3566,"字符"]],[3568,3568],[3334,3334]]],[1536800491636,["gjx16@GJXAIOU",[[-1,3551,"int "]],[3555,3555],[3551,3551]]],[1536800509436,["gjx16@GJXAIOU",[[1,3551,"char s[] = \"\";"]],[3551,3551],[3565,3565]]],[1536800514744,["gjx16@GJXAIOU",[[1,3563,"abcd"]],[3563,3563],[3567,3567]]],[1536800519061,["gjx16@GJXAIOU",[[1,3570,"  \n"]],[3569,3569],[3572,3572]]],[1536800525137,["gjx16@GJXAIOU",[[1,3572,"char s["]],[3572,3572],[3579,3579]]],[1536800528491,["gjx16@GJXAIOU",[[1,3578,"1"]],[3578,3578],[3579,3579]]],[1536800537464,["gjx16@GJXAIOU",[[1,3580,"] = {};"]],[3580,3580],[3587,3587]]],[1536800548251,["gjx16@GJXAIOU",[[1,3585,"'a','b'"]],[3585,3585],[3592,3592]]],[1536800608353,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3605,"字符"]],[3334,3334],[3607,3607]]],[1536800608353,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3605,"字符"]],[3607,3607],[3334,3334]]],[1536800559536,["gjx16@GJXAIOU",[[1,3592,",'c','d'"]],[3592,3592],[3600,3600]]],[1536800563810,["gjx16@GJXAIOU",[[1,3603,"  \n"]],[3602,3602],[3605,3605]]],[1536800571194,["gjx16@GJXAIOU",[[1,3605,"printf ()"]],[3605,3605],[3614,3614]]],[1536800574077,["gjx16@GJXAIOU",[[-1,3611," "]],[3612,3612],[3611,3611]]],[1536800576486,["gjx16@GJXAIOU",[[1,3613,";"]],[3613,3613],[3614,3614]]],[1536800579395,["gjx16@GJXAIOU",[[1,3612,"\"\""]],[3612,3612],[3614,3614]]],[1536800590711,["gjx16@GJXAIOU",[[1,3613,"%d\\n"]],[3613,3613],[3617,3617]]],[1536800599075,["gjx16@GJXAIOU",[[1,3618,",sizze"]],[3618,3618],[3624,3624]]],[1536800600290,["gjx16@GJXAIOU",[[-1,3622,"ze"]],[3624,3624],[3622,3622]]],[1536800605251,["gjx16@GJXAIOU",[[1,3622,"eof("]],[3622,3622],[3626,3626]]],[1536800605447,["gjx16@GJXAIOU",[[1,3627,")"]],[3626,3626],[3627,3627]]],[1536800608002,["gjx16@GJXAIOU",[[1,3626,"s"]],[3626,3626],[3627,3627]]],[1536800668350,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3641,"字符"]],[3334,3334],[3643,3643]]],[1536800668350,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3641,"字符"]],[3643,3643],[3334,3334]]],[1536800610349,["gjx16@GJXAIOU",[[1,3631,"  \n"]],[3630,3630],[3633,3633]]],[1536800618145,["gjx16@GJXAIOU",[[1,3633,"printf();"]],[3633,3633],[3642,3642]]],[1536800621710,["gjx16@GJXAIOU",[[1,3640,"\"\""]],[3640,3640],[3642,3642]]],[1536800627792,["gjx16@GJXAIOU",[[1,3641,"%d\\n"]],[3641,3641],[3645,3645]]],[1536800636443,["gjx16@GJXAIOU",[[1,3646,",sizeof("]],[3646,3646],[3654,3654]]],[1536800636602,["gjx16@GJXAIOU",[[1,3655,")"]],[3654,3654],[3655,3655]]],[1536800638790,["gjx16@GJXAIOU",[[1,3654,"s1"]],[3654,3654],[3656,3656]]],[1536800644192,["gjx16@GJXAIOU",[[1,3660,"  \n"]],[3659,3659],[3662,3662]]],[1536800650565,["gjx16@GJXAIOU",[[1,3662,"return 0;"]],[3662,3662],[3671,3671]]],[1536800653503,["gjx16@GJXAIOU",[[-1,3674,"\n"]],[3674,3674],[3673,3673]]],[1536800653646,["gjx16@GJXAIOU",[[-1,3673,"\n"]],[3673,3673],[3672,3672]]],[1536800653812,["gjx16@GJXAIOU",[[-1,3672,"\n"]],[3672,3672],[3671,3671]]],[1536800728351,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3679,"字符"]],[3334,3334],[3681,3681]]],[1536800728351,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3679,"字符"]],[3681,3681],[3334,3334]]],[1536800702270,["gjx16@GJXAIOU",[[1,3679,"\n"]],[3677,3677],[3678,3678]]],[1536800707387,["gjx16@GJXAIOU",[[1,3678,"de"]],[3678,3678],[3680,3680]]],[1536800708965,["gjx16@GJXAIOU",[[-1,3678,"de"]],[3680,3680],[3678,3678]]],[1536800725502,["gjx16@GJXAIOU",[[1,3678,"得到的结果分别是5和4."]],[3678,3678],[3690,3690]]],[1536800788359,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3692,"字符"]],[3334,3334],[3694,3694]]],[1536800788359,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3692,"字符"]],[3694,3694],[3334,3334]]],[1536800773899,["gjx16@GJXAIOU",[[1,3678,"=="],[1,3690,"=="]],[3678,3690],[3678,3694]]],[1536800848356,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3546,"字"],[1,3547,"\n"],[1,3696,"字符"]],[3334,3334],[3698,3698]]],[1536800848356,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3546,"字"],[-1,3546,"\n"],[-1,3696,"字符"]],[3698,3698],[3334,3334]]],[1536800845819,["gjx16@GJXAIOU",[[1,3530,"     - \n"]],[3529,3529],[3537,3537]]],[1536800908366,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3554,"字"],[1,3555,"\n"],[1,3704,"字符"]],[3334,3334],[3706,3706]]],[1536800908366,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3554,"字"],[-1,3554,"\n"],[-1,3704,"字符"]],[3706,3706],[3334,3334]]],[1536800858237,["gjx16@GJXAIOU",[[1,3537,"定义：定义字符数组的几时候"]],[3537,3537],[3550,3550]]],[1536800859736,["gjx16@GJXAIOU",[[-1,3546,"的几时候"]],[3550,3550],[3546,3546]]],[1536800871812,["gjx16@GJXAIOU",[[1,3546,"的时候，如果不复制，必须"]],[3546,3546],[3558,3558]]],[1536800873391,["gjx16@GJXAIOU",[[-1,3553,"复制，必须"]],[3558,3558],[3553,3553]]],[1536800905081,["gjx16@GJXAIOU",[[1,3553,"赋值则必须规定数组的大小；但是如果初始化了，"]],[3553,3553],[3575,3575]]],[1536800968357,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3592,"字"],[1,3593,"\n"],[1,3742,"字符"]],[3334,3334],[3744,3744]]],[1536800968357,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3592,"字"],[-1,3592,"\n"],[-1,3742,"字符"]],[3744,3744],[3334,3334]]],[1536800912751,["gjx16@GJXAIOU",[[1,3578,"选择赋值"]],[3578,3578],[3582,3582]]],[1536800943515,["gjx16@GJXAIOU",[[-1,3579,"择赋值"]],[3582,3582],[3579,3579]]],[1536800945660,["gjx16@GJXAIOU",[[1,3579,"则"]],[3579,3579],[3580,3580]]],[1536800946602,["gjx16@GJXAIOU",[[-1,3578,"选则"]],[3580,3580],[3578,3578]]],[1536800955826,["gjx16@GJXAIOU",[[1,3578,"选择规定大熊啊或者"]],[3578,3578],[3587,3587]]],[1536800957231,["gjx16@GJXAIOU",[[-1,3583,"熊啊或者"]],[3587,3587],[3583,3583]]],[1536800961423,["gjx16@GJXAIOU",[[1,3583,"小或者"]],[3583,3583],[3586,3586]]],[1536801028368,[null,[[-1,3334,"\n"],[1,3335,"："],[-1,3575,"\n\n`"],[1,3578,"就可以"],[1,3586,"\n\n`"],[-1,3600,"字"],[1,3601,"\n"],[1,3750,"字符"]],[3334,3334],[3752,3752]]],[1536801028368,[null,[[1,3334,"\n"],[-1,3334,"："],[1,3575,"\n\n`"],[-1,3575,"就可以"],[-1,3586,"\n\n`"],[1,3603,"字"],[-1,3603,"\n"],[-1,3753,"字符"]],[3752,3752],[3334,3334]]],[1536800982858,["gjx16@GJXAIOU",[[1,3586,"不规定；，如果不规范ing"]],[3586,3586],[3599,3599]]],[1536800984262,["gjx16@GJXAIOU",[[-1,3596,"ing"]],[3599,3599],[3596,3596]]],[1536801005035,["gjx16@GJXAIOU",[[1,3596,"则系统会根据数组的大小进行自动分配；"]],[3596,3596],[3614,3614]]],[1536801014939,["gjx16@GJXAIOU",[[-1,3590,"，"]],[3591,3591],[3590,3590]]],[1536801018639,["gjx16@GJXAIOU",[[-1,3592,"不规范"]],[3595,3595],[3592,3592]]],[1536801023888,["gjx16@GJXAIOU",[[1,3592,"不规定"]],[3592,3592],[3595,3595]]]],null,"gjx16@GJXAIOU"],["98a79493-d935-46bf-abec-9fb7301b7a9f",1543324903640,"# day6字符串与字符数组\n\n\n\n\n- **基础知识的比较**\n  - **'\\0'与ASCII中 space 的区别：**\n\n  ASCII中0~31为“非打印控制字符”，其中例如 0号对应的’\\0‘ ，13号对应的回车键，将它们按字符的形式打印到屏幕上的时候均为“ ”，它和空格 “ ” 是有本质上的区别。空格对应的ASCII为32号，它属于“打印字符”，只不过空格在屏幕上的表现形式也为 “ ” ，与无法打印的非打印控制字符显示的效果一样罢了。’\\0‘仅仅作为一个字符串结束标志存在着，它的作用就是一个标志！\n\n\n\n**1.字符数组的定义**\n\n```c\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n\n  return 0；\n}\n```\n\n**2.1将一个字符串里面的元素进行排序**\n（使用sizeof函数，当且仅当定义数组的大小正好包含完整元素的时候才可以）\n\n```c\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[5]  =  \"acdb\";\n\n  for(i  =  0  ;i  <  (sizeof(array)-1)  ;  i++)\n\n    {\n\n      for(j  =  1;j  <  ((sizeof(array)-1)-i)  ;j++)\n\n    {\n\n  char  tmp;\n\n  if(array[j-1]  >  array[j])\n\n    {\n\n    tmp  =  array[j];\n\n    array[j]  =  array[j-1];\n\n    array[j-1]  =  tmp;\n\n    }\n\n  }\n\n  }\n\n  printf(\"%s\\n\",array);\n\n  return  0;\n\n}\n```\n\n**2.2  法二：根据len的大小，这时候可以任意更改数组大小**\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  int  i;\n\n  int  j;\n\n  char  array[15]  =  \"acdb\";\n\n  int  len  =  0;\n\n  while(array[len++]);\n\n  len  --;\n\n  for(i  =  0  ;i  <  len;  i++)\n\n  {\n\n    for(j  =  1;j  <  (len-i)  ;j++)\n\n    {\n\n    char  tmp;\n\n    if(array[j-1]  >  array[j])\n\n    {\n\n      tmp  =  array[j];\n\n      array[j]  =  array[j-1];\n\n      array[j-1]  =  tmp;\n\n    }\n\n  }\n\n  }\n\n  printf(\"(%s)\\n\",array);\n\n  return  0;\n\n}\n\n\n```\n\n**2.3 sizeof和len的区别**\n\n==根据以下的程序可以得到：sizeof得到的是数组定义的长度，而len得到的是数组中元素的个数(当是汉字的时候，就要取决于编码来看)==\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len;\n\n  while(s[len++]);   //字符串是以0结尾，即遇到0即视为结尾\n\n  len  --;\n\n  /*这里的while语句等效为：\n\n  *  while（str[i]）\n  *  {\n  *  i++;\n  *  }\n  * i--；\n\n  */\n\n  printf(\"sizeof  =  %d\\n\",sizeof(s));\n\n  printf(\"len  =  %d\\n\",len);\n\n  return  0;\n\n}\n```\n\n**3.1 将字符串进行逆置**\n1.直接进行逆置,即将后面的0也逆置到最前面（一般不会输出结果因为后面很多0）\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  int  min  =  0;\n\n  int  max  =  14;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\n  return  0;\n\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  str[15]  =  \"hello  world\";\n\n  //求数组的长度\n\n  int len  =  0;\n\n  while(str[len++])；\n  len --;\n\n\n  int  min  =  0;\n\n  int  max  =  len-1;\n\n  while(min  <  max)\n\n  {\n\n  char  tmp;\n\n  tmp  =  str[max];\n\n  str[max]  =  str[min];\n\n  str[min]  =  tmp;\n\n  min++;\n\n  max--;\n\n  }\n\n  printf(\"%s\\n\",str);\n\nreturn  0;\n\n}\n```\n\n**3.2如何将汉字进行倒置**\n在ASCII码中1个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；倒置的时候需要两个字节共同互换位置，因此需要两个中间变量\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码：将UTF-8的编码更改为GBK编码)\n```c\n#include<stdio.h>\n\nint  main()\n{\n  char  str[50]  =  \"你好世界\";\n\n  int  len  =  0;\n  while(str[len++]);\n  len--;\n\n\n  int  min  =  0;\n  int  max  = len-1;\n  while(min  <  max)\n  {\n\n  char  tmp;\n  tmp  =  str[max  -1];\n  str[max  -1]  =  str[min];\n  str[min]  =  tmp;\n  \n  char  tmp1;\n  tmp1  =  str[max];\n  str[max]  =  str[min  +  1];\n  str[min  +  1]  =  tmp1;\n  min  +=  2;\n  max  -=2;\n\n  }\n  printf(\"%s\\n\",str);\n  return  0;\n\n}\n```\n\n\n**4.字符串和字符数组的差别**\n\n- 定义及其使用上的区别\n  - 字符串：`char *string = “andnf”;`\n  - 字符数组：`char a[100] = \"andnf\";`或者`char a[100] = {a,n,d,n,f};`\n 使用字符串初始化字符数组的时候没要比逐个赋值多占一个字节，用于存放 \\0 ,但是字符数组的长度不会计算\\0，而数组占有的字节数会计算\\0 ，\n     - 输入输出：输出的时候只要遇到‘\\0’就会停止输出；\n     - 定义：定义字符数组的时候，如果不赋值则必须规定数组的大小；但是如果初始化了，就可以选择规定大小或者不规定；如果不规定则系统会根据数组的大小进行自动分配；\n\n```c\nint main()\n{\n  char s[] = \"abcd\";\n  char s1[] = {'a','b','c','d'};\n  printf(\"%d\\n\",sizeof(s));\n  printf(\"%d\\n\",sizeof(s1));\n  return 0;\n}\n```\n==得到的结果分别是5和4.==\n\n字符串在内存中是以0结尾；以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n\n\n\n## 字符串的使用\n\n\n**1.去掉字符串右边的空格**\n\n```c\n#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}\n```\n\n**2.去掉字符串左边的空格**\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;  \n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n法二：\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++] ==' ');\n\n  len  --; //得到了字符串前面的空格数量 \n\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0; \n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**3.字符串到整数的变化**\n\n步骤：1.知道字符串的长度\n2.将每个字符读取出来，转化为整数后*10的长度-1次方；\n3.将每个位计算和加起来\n\n```c\nint main()\n{\n  char s[100] = \"1234\";\n  int len = 0;\n  while(s[len++]);\n  len --;\n\n  int value = 0;//存放变量，为将字符串转换为整数后的变量\n  int i;\n  int tmp = len;\n  for (i = 0;i < len; i++) //遍历字符串\n  {\n    int base = 10; //求10的n次方\n    if((tmp - i -1) == 0 )\n    {\n      base = 1;          //字符串的最后一个时候乘1\n    }\n     else\n     {\n       int j;\n       for(j = 1; j < (tmp -i -1);j++)\n       {\n         base *= 10;\n       }\n    \n     }\n      value += (base * (s[i] - '0'));  \n  }\n   printf(\"%d\\n\",value);\n   return 0;\n}\n\n\n\n```\n\n~~下面的程序有问题，输出的值不对~~\n```c\n#include<math.h>\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;\n\n  double  result  =  0;\n\n  int  i;\n\n  int  j;\n\n  int  wei  =  0;\n\n  for(i  =  0;i  <  len;  i++)\n\n  {\n\n  if(len  -  i  -1  ==  0)\n\n  {\n\n  wei  =  s[i];\n\n  }\n\n  else\n\n  {\n\n  for(j  =  0  ;j  <  len  -  1;j++)\n\n  {\n\n  double  x  =  10;\n\n  double  y  =  len  -1  -j;\n\n  result  +=  (s[j])*(pow(x,y));\n\n  }\n\n  }\n\n  result  +=  wei;\n\n  printf(\"%d\\n\",result);\n\n  return  0;\n\n}\n\n}\n```\n\n\n\n\n\n\n \n\n\n\n\n\n",[[1543324873022,["gjx16@GJXAIOU",[[-1,18,"\n"]],[18,18],[17,17]]],[1543324873182,["gjx16@GJXAIOU",[[-1,17,"\n"]],[17,17],[16,16]]],[1543324877646,["gjx16@GJXAIOU",[[-1,16,"\n"]],[16,16],[15,15]]],[1543324918646,["gjx16@GJXAIOU",[[-1,61,"\n"]],[61,61],[60,60]]],[1543324925271,["gjx16@GJXAIOU",[[1,152,"**"],[1,154,"**"]],[152,154],[152,158]]],[1543324930894,["gjx16@GJXAIOU",[[1,171,"**"],[1,180,"**"]],[171,180],[171,184]]],[1543324937490,["gjx16@GJXAIOU",[[1,230,"**"],[1,261,"**"]],[230,261],[230,265]]],[1543324944150,["gjx16@GJXAIOU",[[-1,269,"\n"]],[269,269],[268,268]]],[1543324981851,["gjx16@GJXAIOU",[[-1,440,"\n"]],[440,440],[439,439]]],[1543324983131,["gjx16@GJXAIOU",[[-1,561,"\n"]],[561,561],[560,560]]],[1543324987431,["gjx16@GJXAIOU",[[1,289,"\n"]],[288,288],[289,289]]],[1543324996481,["gjx16@GJXAIOU",[[1,289,"#include<."]],[289,289],[299,299]]],[1543324997430,["gjx16@GJXAIOU",[[-1,298,"."]],[299,299],[298,298]]],[1543325001494,["gjx16@GJXAIOU",[[1,298,"stdio.,"]],[298,298],[305,305]]],[1543325002234,["gjx16@GJXAIOU",[[-1,304,","]],[305,305],[304,304]]],[1543325004028,["gjx16@GJXAIOU",[[1,304,"h?>"]],[304,304],[307,307]]],[1543325004972,["gjx16@GJXAIOU",[[-1,305,"?>"]],[307,307],[305,305]]],[1543325005769,["gjx16@GJXAIOU",[[1,305,">"]],[305,305],[306,306]]],[1543325018895,["gjx16@GJXAIOU",[[-1,685,"\n"]],[685,685],[684,684]]],[1543325019727,["gjx16@GJXAIOU",[[-1,697,"\n"]],[697,697],[696,696]]],[1543325020446,["gjx16@GJXAIOU",[[-1,699,"\n"]],[699,699],[698,698]]],[1543325021145,["gjx16@GJXAIOU",[[-1,709,"\n"]],[709,709],[708,708]]],[1543325022065,["gjx16@GJXAIOU",[[-1,719,"\n"]],[719,719],[718,718]]],[1543325024455,["gjx16@GJXAIOU",[[-1,804,"\n"]],[804,804],[803,803]]],[1543325026597,["gjx16@GJXAIOU",[[-1,857,"\n"]],[857,857],[856,856]]],[1543325029586,["gjx16@GJXAIOU",[[1,861,"  "]],[861,861],[863,863]]],[1543325143644,[null,[[-1,798,"\n"]],[798,798],[798,798]]],[1543325143644,[null,[[1,798,"\n"]],[798,798],[798,798]]],[1543325089567,["gjx16@GJXAIOU",[[1,685,"#include\"stdlib.h\"\n\n"],[-1,699,"  "],[1,701,"\t"],[-1,709,"  "],[1,711,"\t"],[-1,719,"  "],[1,721,"\t"],[-1,736," "],[-1,738," "],[-1,749,"  "],[1,751,"\t"],[1,754," "],[-1,757," "],[-1,759," "],[-1,762,"  ;"],[1,765,"; "],[-1,767," "],[-1,769," "],[1,785," "],[1,786," "],[-1,788,"  "],[-1,791," "],[-1,798,"    {\n      "],[1,810,"\t{\n\t\t"],[1,813," "],[-1,816," "],[-1,818," "],[-1,822,"j"],[1,824,"j"],[-1,826," "],[1,843," "],[1,844," "],[1,846," "],[1,847," "],[-1,849,"  ;"],[1,852,"; "],[-1,857,"      {\n\n  "],[1,868,"\t\t{\n\t\t\t"],[-1,880,"  "],[1,882,"\t\t\t"],[1,884," "],[1,892," "],[1,893," "],[-1,896," "],[-1,898," "],[-1,910,"\n    {\n\n    "],[1,922,"\t\t\t{\n\t\t\t\t"],[-1,926," "],[-1,928," "],[-1,940,"\n    "],[1,945,"\t\t\t\t"],[-1,953," "],[-1,957," "],[1,965," "],[1,966," "],[-1,970,"\n    "],[1,975,"\t\t\t\t"],[1,982," "],[1,983," "],[-1,986," "],[-1,988," "],[-1,995,"\n    }\n\n  }\n\n  }\n\n  "],[1,1015,"\t\t\t}\n\t\t}\n\t}\n\n\t"],[1,1029," "],[-1,1038,"  "],[1,1040,"\t"],[1,1053,"\n"]],[667,1053],[1042,1042]]],[1543325094344,["gjx16@GJXAIOU",[[-1,660,"\n"]],[660,660],[659,659]]],[1543325323654,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[-1,846,"1"],[1,848,"1"],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,877,"\n"],[-1,881," "],[1,883,"f"],[-1,884,"f"],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1025,"\n"],[-1,1027," "],[-1,1040,"\n"],[1,1042,"\n"]],[811,811],[1043,1043]]],[1543325323654,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[1,844,"1"],[-1,845,"1"],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,876,"\n"],[1,881," "],[-1,882,"f"],[1,884,"f"],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1024,"\n"],[1,1027," "],[1,1039,"\n"],[-1,1040,"\n"]],[1043,1043],[811,811]]],[1543325318669,["gjx16@GJXAIOU",[[1,1105,"#include\"stdlib.h\"\n\n"],[-1,1118,"\n"],[-1,1121,"\n  "],[1,1124,"\t"],[-1,1132,"\n  "],[1,1135,"\t"],[-1,1143,"\n  "],[1,1146,"\t"],[-1,1162," "],[-1,1164," "],[-1,1175,"  "],[1,1177,"\t//通过这种方法得到数组长度\n\t"],[-1,1185," "],[-1,1189," "],[-1,1193,"\n  "],[1,1196,"\t"],[1,1201," "],[-1,1217,"\n  "],[1,1220,"\t"],[-1,1223,"  "],[1,1228,"  "],[-1,1230,"  "],[1,1232,"\t//排序算法\n\t"],[1,1235," "],[-1,1238," "],[-1,1240," "],[-1,1243,"  ;i "],[1,1248,"; i"],[-1,1250," "],[-1,1257," "],[-1,1263,"\n  {\n\n    "],[1,1273,"\t{\n\t\t"],[1,1276," "],[-1,1279," "],[-1,1281," "],[-1,1285,"j"],[1,1287,"j"],[-1,1290," "],[1,1295," "],[1,1296," "],[-1,1298,"  ;"],[1,1301,"; "],[-1,1306,"\n    {\n\n    "],[1,1318,"\t\t{\n\t\t\t"],[-1,1330,"    "],[1,1334,"\t\t\t"],[1,1336," "],[1,1344," "],[1,1345," "],[-1,1348," "],[-1,1350," "],[-1,1362,"\n    {\n\n      "],[1,1376,"\t\t\t{\n\t\t\t\t"],[-1,1380," "],[-1,1382," "],[-1,1394,"\n      "],[1,1401,"\t\t\t\t"],[-1,1409," "],[-1,1413," "],[1,1421," "],[1,1422," "],[-1,1426,"\n      "],[1,1433,"\t\t\t\t"],[1,1440," "],[1,1441," "],[-1,1444," "],[-1,1446," "],[-1,1454,"    }\n\n  }\n\n  }\n\n  "],[1,1473,"\t\t\t}\n\t\t}\n\t}\n\n\t"],[1,1489," "],[-1,1498,"  "],[1,1500,"\tsystem(\"pause\");\n\t"],[-1,1513,"\n\n"]],[1087,1515],[1525,1525]]],[1543325323254,["gjx16@GJXAIOU",[[-1,1125,"\n"]],[1125,1125],[1124,1124]]],[1543325383654,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[1,846," "],[-1,847," "],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,878,"\n"],[-1,881," "],[-1,883," "],[1,885," "],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1026,"\n"],[-1,1027," "],[-1,1038,"\n"],[1,1043,"\n"],[1,1105,"\n"],[-1,1125,"\n"],[1,1139,"\n"],[-1,1140," "],[1,1148,"\n"],[-1,1149," "],[1,1157,"\n"],[-1,1158," "],[-1,1175," "],[1,1176,"="],[1,1185,"\n"],[-1,1202," "],[-1,1210," "],[1,1211,"n"],[1,1216,"\n"],[-1,1217," "],[-1,1222," "],[1,1224," "],[1,1239,"\n"],[-1,1240," "],[-1,1243," "],[1,1244,"n"],[1,1246,";"],[-1,1248,";"],[1,1249,"\n"],[-1,1259," "],[1,1262,"r"],[-1,1263,"r"],[-1,1267,"  "],[1,1269,"= 0"],[-1,1273,"  "],[1,1275,"<"],[1,1285,"\n"],[-1,1290," "],[1,1293,"r"],[-1,1294,"r"],[1,1298,"="],[1,1299,"1;"],[-1,1300,"1"],[-1,1302,"j "],[-1,1310," "],[1,1314," "],[1,1315,")"],[-1,1317,";"],[1,1322,"\n"],[-1,1329," "],[1,1341,"\n"],[-1,1344," "],[1,1346,"f"],[-1,1347,"f"],[-1,1355," "],[1,1359," "],[-1,1362," "],[1,1363,">"],[1,1373,"\n"],[-1,1382," "],[-1,1387," "],[1,1388,"="],[1,1398,"\n"],[-1,1402," "],[-1,1410," "],[1,1411,"]"],[-1,1420," "],[1,1424," "],[1,1427,"\n"],[-1,1431," "],[-1,1438," "],[1,1442," "],[-1,1445," "],[1,1446,"="],[1,1451,"\n"],[-1,1466," "],[-1,1482," "],[1,1484," "],[1,1491,"\n"],[-1,1511," "],[-1,1524,"\n"],[1,1525,"}"]],[811,811],[1526,1526]]],[1543325383654,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[-1,844," "],[1,846," "],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,877,"\n"],[1,881," "],[1,882," "],[-1,883," "],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1025,"\n"],[1,1027," "],[1,1037,"\n"],[-1,1041,"\n"],[-1,1104,"\n"],[1,1125,"\n"],[-1,1138,"\n"],[1,1140," "],[-1,1147,"\n"],[1,1149," "],[-1,1156,"\n"],[1,1158," "],[1,1174," "],[-1,1174,"="],[-1,1184,"\n"],[1,1202," "],[1,1209," "],[-1,1209,"n"],[-1,1215,"\n"],[1,1217," "],[1,1221," "],[-1,1222," "],[-1,1238,"\n"],[1,1240," "],[1,1242," "],[-1,1242,"n"],[-1,1245,";"],[1,1248,";"],[-1,1248,"\n"],[1,1259," "],[-1,1261,"r"],[1,1263,"r"],[1,1266,"  "],[-1,1266,"= 0"],[1,1273,"  "],[-1,1273,"<"],[-1,1284,"\n"],[1,1290," "],[-1,1292,"r"],[1,1294,"r"],[-1,1297,"="],[-1,1299,"1;"],[1,1302,"1"],[1,1303,"j "],[1,1309," "],[-1,1312," "],[-1,1314,")"],[1,1317,";"],[-1,1321,"\n"],[1,1329," "],[-1,1340,"\n"],[1,1344," "],[-1,1345,"f"],[1,1347,"f"],[1,1354," "],[-1,1357," "],[1,1361," "],[-1,1361,">"],[-1,1372,"\n"],[1,1382," "],[1,1386," "],[-1,1386,"="],[-1,1397,"\n"],[1,1402," "],[1,1409," "],[-1,1409,"]"],[1,1419," "],[-1,1422," "],[-1,1426,"\n"],[1,1431," "],[1,1437," "],[-1,1440," "],[1,1444," "],[-1,1444,"="],[-1,1450,"\n"],[1,1466," "],[1,1481," "],[-1,1482," "],[-1,1490,"\n"],[1,1511," "],[1,1523,"\n"],[-1,1523,"}"]],[1526,1526],[811,811]]],[1543325349175,["gjx16@GJXAIOU",[[-1,1647,"\n"]],[1647,1647],[1646,1646]]],[1543325350254,["gjx16@GJXAIOU",[[-1,1659,"\n"]],[1659,1659],[1658,1658]]],[1543325351527,["gjx16@GJXAIOU",[[-1,1661,"\n"]],[1661,1661],[1660,1660]]],[1543325352267,["gjx16@GJXAIOU",[[-1,1687,"\n"]],[1687,1687],[1686,1686]]],[1543325353032,["gjx16@GJXAIOU",[[-1,1699,"\n"]],[1699,1699],[1698,1698]]],[1543325353945,["gjx16@GJXAIOU",[[-1,1741,"\n"]],[1741,1741],[1740,1740]]],[1543325355315,["gjx16@GJXAIOU",[[-1,1772,"\n"]],[1772,1772],[1771,1771]]],[1543325357882,["gjx16@GJXAIOU",[[1,1803,"  "]],[1803,1803],[1805,1805]]],[1543325360867,["gjx16@GJXAIOU",[[1,1821,"  "]],[1821,1821],[1823,1823]]],[1543325363695,["gjx16@GJXAIOU",[[-1,1828,"\n"]],[1828,1828],[1827,1827]]],[1543325365378,["gjx16@GJXAIOU",[[-1,1873,"\n"]],[1873,1873],[1872,1872]]],[1543325366072,["gjx16@GJXAIOU",[[-1,1905," "]],[1905,1905],[1904,1904]]],[1543325368489,["gjx16@GJXAIOU",[[1,1905," "]],[1904,1904],[1905,1905]]],[1543325369774,["gjx16@GJXAIOU",[[-1,1903,"\n"]],[1903,1903],[1902,1902]]],[1543325374642,["gjx16@GJXAIOU",[[-1,2004,"\n"]],[2004,2004],[2003,2003]]],[1543325375792,["gjx16@GJXAIOU",[[-1,2016,"\n"]],[2016,2016],[2015,2015]]],[1543325376630,["gjx16@GJXAIOU",[[-1,2018,"\n"]],[2018,2018],[2017,2017]]],[1543325377382,["gjx16@GJXAIOU",[[-1,2054,"\n"]],[2054,2054],[2053,2053]]],[1543325378553,["gjx16@GJXAIOU",[[-1,2072,"\n"]],[2072,2072],[2071,2071]]],[1543325379542,["gjx16@GJXAIOU",[[-1,2091,"\n"]],[2091,2091],[2090,2090]]],[1543325380194,["gjx16@GJXAIOU",[[-1,2112,"\n"]],[2112,2112],[2111,2111]]],[1543325380775,["gjx16@GJXAIOU",[[-1,2116,"\n"]],[2116,2116],[2115,2115]]],[1543325381598,["gjx16@GJXAIOU",[[-1,2129,"\n"]],[2129,2129],[2128,2128]]],[1543325382270,["gjx16@GJXAIOU",[[-1,2149,"\n"]],[2149,2149],[2148,2148]]],[1543325382910,["gjx16@GJXAIOU",[[-1,2174,"\n"]],[2174,2174],[2173,2173]]],[1543325443660,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[1,846," "],[-1,847," "],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,878,"\n"],[-1,881," "],[-1,883," "],[1,885," "],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1026,"\n"],[-1,1027," "],[-1,1038,"\n"],[1,1043,"\n"],[1,1105,"\n"],[-1,1125,"\n"],[1,1139,"\n"],[-1,1140," "],[1,1148,"\n"],[-1,1149," "],[1,1157,"\n"],[-1,1158," "],[-1,1175," "],[1,1176,"="],[1,1185,"\n"],[-1,1202," "],[-1,1210," "],[1,1211,"n"],[1,1216,"\n"],[-1,1217," "],[-1,1222," "],[1,1224," "],[1,1239,"\n"],[-1,1240," "],[-1,1243," "],[1,1244,"n"],[1,1246,";"],[-1,1248,";"],[1,1249,"\n"],[-1,1259," "],[1,1262,"r"],[-1,1263,"r"],[-1,1267,"  "],[1,1269,"= 0"],[-1,1273,"  "],[1,1275,"<"],[1,1285,"\n"],[-1,1290," "],[1,1293,"r"],[-1,1294,"r"],[1,1298,"="],[1,1299,"1;"],[-1,1300,"1"],[-1,1302,"j "],[-1,1310," "],[1,1314," "],[1,1315,")"],[-1,1317,";"],[1,1322,"\n"],[-1,1329," "],[1,1341,"\n"],[-1,1344," "],[1,1346,"f"],[-1,1347,"f"],[-1,1355," "],[1,1359," "],[-1,1362," "],[1,1363,">"],[1,1373,"\n"],[-1,1382," "],[-1,1387," "],[1,1388,"="],[1,1398,"\n"],[-1,1402," "],[-1,1410," "],[1,1411,"]"],[-1,1420," "],[1,1424," "],[1,1427,"\n"],[-1,1431," "],[-1,1438," "],[1,1442," "],[-1,1445," "],[1,1446,"="],[1,1451,"\n"],[-1,1466," "],[-1,1482," "],[1,1484," "],[1,1491,"\n"],[-1,1511," "],[-1,1524,"\n"],[1,1525,"}"]],[811,811],[1526,1526]]],[1543325443660,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[-1,844," "],[1,846," "],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,877,"\n"],[1,881," "],[1,882," "],[-1,883," "],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1025,"\n"],[1,1027," "],[1,1037,"\n"],[-1,1041,"\n"],[-1,1104,"\n"],[1,1125,"\n"],[-1,1138,"\n"],[1,1140," "],[-1,1147,"\n"],[1,1149," "],[-1,1156,"\n"],[1,1158," "],[1,1174," "],[-1,1174,"="],[-1,1184,"\n"],[1,1202," "],[1,1209," "],[-1,1209,"n"],[-1,1215,"\n"],[1,1217," "],[1,1221," "],[-1,1222," "],[-1,1238,"\n"],[1,1240," "],[1,1242," "],[-1,1242,"n"],[-1,1245,";"],[1,1248,";"],[-1,1248,"\n"],[1,1259," "],[-1,1261,"r"],[1,1263,"r"],[1,1266,"  "],[-1,1266,"= 0"],[1,1273,"  "],[-1,1273,"<"],[-1,1284,"\n"],[1,1290," "],[-1,1292,"r"],[1,1294,"r"],[-1,1297,"="],[-1,1299,"1;"],[1,1302,"1"],[1,1303,"j "],[1,1309," "],[-1,1312," "],[-1,1314,")"],[1,1317,";"],[-1,1321,"\n"],[1,1329," "],[-1,1340,"\n"],[1,1344," "],[-1,1345,"f"],[1,1347,"f"],[1,1354," "],[-1,1357," "],[1,1361," "],[-1,1361,">"],[-1,1372,"\n"],[1,1382," "],[1,1386," "],[-1,1386,"="],[-1,1397,"\n"],[1,1402," "],[1,1409," "],[-1,1409,"]"],[1,1419," "],[-1,1422," "],[-1,1426,"\n"],[1,1431," "],[1,1437," "],[-1,1440," "],[1,1444," "],[-1,1444,"="],[-1,1450,"\n"],[1,1466," "],[1,1481," "],[-1,1482," "],[-1,1490,"\n"],[1,1511," "],[1,1523,"\n"],[-1,1523,"}"]],[1526,1526],[811,811]]],[1543325383720,["gjx16@GJXAIOU",[[-1,2194,"\n"]],[2194,2194],[2193,2193]]],[1543325385633,["gjx16@GJXAIOU",[[-1,2203,"\n"]],[2203,2203],[2202,2202]]],[1543325386306,["gjx16@GJXAIOU",[[-1,2212,"\n"]],[2212,2212],[2211,2211]]],[1543325387479,["gjx16@GJXAIOU",[[-1,2239,"\n"]],[2239,2239],[2238,2238]]],[1543325388190,["gjx16@GJXAIOU",[[-1,2252,"\n"]],[2252,2252],[2251,2251]]],[1543325398819,["gjx16@GJXAIOU",[[-1,2324,"\n"]],[2324,2324],[2323,2323]]],[1543325399788,["gjx16@GJXAIOU",[[-1,2336,"\n"]],[2336,2336],[2335,2335]]],[1543325400574,["gjx16@GJXAIOU",[[-1,2338,"\n"]],[2338,2338],[2337,2337]]],[1543325401319,["gjx16@GJXAIOU",[[-1,2374,"\n"]],[2374,2374],[2373,2373]]],[1543325404626,["gjx16@GJXAIOU",[[1,2376,"\n  "]],[2376,2376],[2379,2379]]],[1543325405553,["gjx16@GJXAIOU",[[-1,2388,"\n"]],[2388,2388],[2387,2387]]],[1543325406287,["gjx16@GJXAIOU",[[-1,2405,"\n"]],[2405,2405],[2404,2404]]],[1543325408007,["gjx16@GJXAIOU",[[-1,2437,"\n"]],[2437,2437],[2436,2436]]],[1543325408896,["gjx16@GJXAIOU",[[-1,2455,"\n"]],[2455,2455],[2454,2454]]],[1543325409514,["gjx16@GJXAIOU",[[-1,2477,"\n"]],[2477,2477],[2476,2476]]],[1543325410425,["gjx16@GJXAIOU",[[-1,2498,"\n"]],[2498,2498],[2497,2497]]],[1543325411910,["gjx16@GJXAIOU",[[-1,2502,"\n"]],[2502,2502],[2501,2501]]],[1543325420081,["gjx16@GJXAIOU",[[1,2504,"  "],[1,2515,"  "],[1,2516,"  "],[1,2536,"  "],[1,2537,"  "],[1,2562,"  "],[1,2563,"  "],[1,2583,"  "],[1,2584," "],[1,2586," "],[1,2593,"  "],[1,2594,"  "]],[2504,2602],[2506,2624]]],[1543325423283,["gjx16@GJXAIOU",[[-1,2517,"  "]],[2519,2519],[2517,2517]]],[1543325424431,["gjx16@GJXAIOU",[[-1,2539,"\n"]],[2540,2540],[2539,2539]]],[1543325425298,["gjx16@GJXAIOU",[[-1,2517,"\n"]],[2517,2517],[2516,2516]]],[1543325427000,["gjx16@GJXAIOU",[[-1,2567,"\n"]],[2568,2568],[2567,2567]]],[1543325427878,["gjx16@GJXAIOU",[[-1,2591,"\n"]],[2592,2592],[2591,2591]]],[1543325428662,["gjx16@GJXAIOU",[[-1,2604,"\n"]],[2605,2605],[2604,2604]]],[1543325430207,["gjx16@GJXAIOU",[[-1,2623,"\n"]],[2623,2623],[2622,2622]]],[1543325431182,["gjx16@GJXAIOU",[[-1,2645,"\n"]],[2645,2645],[2644,2644]]],[1543325435425,["gjx16@GJXAIOU",[[1,2645,"  "]],[2645,2645],[2647,2647]]],[1543325503668,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[1,846," "],[-1,847," "],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,878,"\n"],[-1,881," "],[-1,883," "],[1,885," "],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1026,"\n"],[-1,1027," "],[-1,1038,"\n"],[1,1043,"\n"],[1,1105,"\n"],[-1,1125,"\n"],[1,1139,"\n"],[-1,1140," "],[1,1148,"\n"],[-1,1149," "],[1,1157,"\n"],[-1,1158," "],[-1,1175," "],[1,1176,"="],[1,1185,"\n"],[-1,1202," "],[-1,1210," "],[1,1211,"n"],[1,1216,"\n"],[-1,1217," "],[-1,1222," "],[1,1224," "],[1,1239,"\n"],[-1,1240," "],[-1,1243," "],[1,1244,"n"],[1,1246,";"],[-1,1248,";"],[1,1249,"\n"],[-1,1259," "],[1,1262,"r"],[-1,1263,"r"],[-1,1267,"  "],[1,1269,"= 0"],[-1,1273,"  "],[1,1275,"<"],[1,1285,"\n"],[-1,1290," "],[1,1293,"r"],[-1,1294,"r"],[1,1298,"="],[1,1299,"1;"],[-1,1300,"1"],[-1,1302,"j "],[-1,1310," "],[1,1314," "],[1,1315,")"],[-1,1317,";"],[1,1322,"\n"],[-1,1329," "],[1,1341,"\n"],[-1,1344," "],[1,1346,"f"],[-1,1347,"f"],[-1,1355," "],[1,1359," "],[-1,1362," "],[1,1363,">"],[1,1373,"\n"],[-1,1382," "],[-1,1387," "],[1,1388,"="],[1,1398,"\n"],[-1,1402," "],[-1,1410," "],[1,1411,"]"],[-1,1420," "],[1,1424," "],[1,1427,"\n"],[-1,1431," "],[-1,1438," "],[1,1442," "],[-1,1445," "],[1,1446,"="],[1,1451,"\n"],[-1,1466," "],[-1,1482," "],[1,1484," "],[1,1491,"\n"],[-1,1511," "],[-1,1524,"\n"],[1,1525,"}"],[-1,2376,"\n"],[1,2378,"\n"],[1,2517,"\n"],[-1,2519,"\n"],[1,2538,";"],[-1,2543,"\n"],[1,2567,";"],[-1,2572,"\n"],[1,2591,";"],[-1,2595,"\n"],[1,2604,";"],[-1,2609,"\n"],[1,2645,"\n"],[-1,2647,"\n"]],[811,811],[2647,2647]]],[1543325503668,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[-1,844," "],[1,846," "],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,877,"\n"],[1,881," "],[1,882," "],[-1,883," "],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1025,"\n"],[1,1027," "],[1,1037,"\n"],[-1,1041,"\n"],[-1,1104,"\n"],[1,1125,"\n"],[-1,1138,"\n"],[1,1140," "],[-1,1147,"\n"],[1,1149," "],[-1,1156,"\n"],[1,1158," "],[1,1174," "],[-1,1174,"="],[-1,1184,"\n"],[1,1202," "],[1,1209," "],[-1,1209,"n"],[-1,1215,"\n"],[1,1217," "],[1,1221," "],[-1,1222," "],[-1,1238,"\n"],[1,1240," "],[1,1242," "],[-1,1242,"n"],[-1,1245,";"],[1,1248,";"],[-1,1248,"\n"],[1,1259," "],[-1,1261,"r"],[1,1263,"r"],[1,1266,"  "],[-1,1266,"= 0"],[1,1273,"  "],[-1,1273,"<"],[-1,1284,"\n"],[1,1290," "],[-1,1292,"r"],[1,1294,"r"],[-1,1297,"="],[-1,1299,"1;"],[1,1302,"1"],[1,1303,"j "],[1,1309," "],[-1,1312," "],[-1,1314,")"],[1,1317,";"],[-1,1321,"\n"],[1,1329," "],[-1,1340,"\n"],[1,1344," "],[-1,1345,"f"],[1,1347,"f"],[1,1354," "],[-1,1357," "],[1,1361," "],[-1,1361,">"],[-1,1372,"\n"],[1,1382," "],[1,1386," "],[-1,1386,"="],[-1,1397,"\n"],[1,1402," "],[1,1409," "],[-1,1409,"]"],[1,1419," "],[-1,1422," "],[-1,1426,"\n"],[1,1431," "],[1,1437," "],[-1,1440," "],[1,1444," "],[-1,1444,"="],[-1,1450,"\n"],[1,1466," "],[1,1481," "],[-1,1482," "],[-1,1490,"\n"],[1,1511," "],[1,1523,"\n"],[-1,1523,"}"],[1,2375,"\n"],[-1,2376,"\n"],[-1,2516,"\n"],[1,2519,"\n"],[-1,2537,";"],[1,2543,"\n"],[-1,2566,";"],[1,2572,"\n"],[-1,2590,";"],[1,2595,"\n"],[-1,2603,";"],[1,2609,"\n"],[-1,2644,"\n"],[1,2647,"\n"]],[2647,2647],[811,811]]],[1543325458369,["gjx16@GJXAIOU",[[-1,2878,"\n"]],[2878,2878],[2877,2877]]],[1543325460283,["gjx16@GJXAIOU",[[1,2878,"\n"]],[2877,2877],[2878,2878]]],[1543325483883,["gjx16@GJXAIOU",[[1,3039,"  "],[1,3050,"  "],[1,3074,"  "],[1,3105,"  "],[1,3125,"  "],[1,3126," "],[1,3128," "],[1,3140,"  "],[1,3163,"  "],[1,3192," "],[1,3194," "],[1,3221,"  "],[1,3233,"  "]],[3039,3244],[3041,3266]]],[1543325486727,["gjx16@GJXAIOU",[[-1,3036,"\n"]],[3036,3036],[3035,3035]]],[1543325489710,["gjx16@GJXAIOU",[[-1,3266,"\n"]],[3266,3266],[3265,3265]]],[1543325563661,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[1,846," "],[-1,847," "],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,878,"\n"],[-1,881," "],[-1,883," "],[1,885," "],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1026,"\n"],[-1,1027," "],[-1,1038,"\n"],[1,1043,"\n"],[1,1105,"\n"],[-1,1125,"\n"],[1,1139,"\n"],[-1,1140," "],[1,1148,"\n"],[-1,1149," "],[1,1157,"\n"],[-1,1158," "],[-1,1175," "],[1,1176,"="],[1,1184,"\n"],[-1,1202," "],[-1,1210," "],[1,1211,"n"],[1,1216,"\n"],[-1,1217," "],[-1,1222," "],[1,1224," "],[1,1239,"\n"],[-1,1240," "],[-1,1243," "],[1,1244,"n"],[1,1246,";"],[-1,1248,";"],[1,1249,"\n"],[-1,1259," "],[-1,1262," "],[1,1264," "],[-1,1267,"  "],[1,1269,"= 0"],[-1,1273,"  "],[1,1275,"<"],[1,1285,"\n"],[-1,1290," "],[-1,1293," "],[1,1295," "],[-1,1298,"  1jj "],[1,1304,"= 1; j"],[-1,1310," "],[1,1314," "],[1,1315,")"],[-1,1317,";"],[1,1322,"\n"],[-1,1329," "],[1,1341,"\n"],[-1,1344," "],[-1,1346," "],[1,1348," "],[-1,1355," "],[1,1359," "],[-1,1362," "],[1,1363,">"],[1,1373,"\n"],[-1,1382," "],[-1,1387," "],[1,1388,"="],[1,1398,"\n"],[-1,1402," "],[-1,1410," "],[1,1411,"]"],[-1,1420," "],[1,1424," "],[1,1427,"\n"],[-1,1431," "],[-1,1438," "],[1,1442," "],[-1,1445," "],[1,1446,"="],[1,1451,"\n"],[-1,1466," "],[-1,1482," "],[1,1484," "],[1,1491,"\n"],[-1,1511," "],[-1,1524,"\n"],[1,1525,"}"],[-1,2376,"\n"],[1,2378,"\n"],[1,2517,"\n"],[-1,2519,"\n"],[1,2538,";"],[-1,2543,"\n"],[1,2567,";"],[-1,2572,"\n"],[1,2591,";"],[-1,2595,"\n"],[1,2604,";"],[-1,2609,"\n"],[1,2645,"\n"],[-1,2647,"\n"],[1,3051,"\n"],[-1,3053,"\n"],[1,3077,"\n"],[-1,3079,"\n"],[-1,3135," "],[1,3137," "],[1,3151,"\n"],[-1,3153,"\n"],[-1,3207," "],[1,3209," "],[1,3252,"\n"],[-1,3254,"\n"]],[811,811],[3254,3254]]],[1543325563661,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[-1,844," "],[1,846," "],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,877,"\n"],[1,881," "],[1,882," "],[-1,883," "],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1025,"\n"],[1,1027," "],[1,1037,"\n"],[-1,1041,"\n"],[-1,1104,"\n"],[1,1125,"\n"],[-1,1138,"\n"],[1,1140," "],[-1,1147,"\n"],[1,1149," "],[-1,1156,"\n"],[1,1158," "],[1,1174," "],[-1,1174,"="],[-1,1183,"\n"],[1,1202," "],[1,1209," "],[-1,1209,"n"],[-1,1215,"\n"],[1,1217," "],[1,1221," "],[-1,1222," "],[-1,1238,"\n"],[1,1240," "],[1,1242," "],[-1,1242,"n"],[-1,1245,";"],[1,1248,";"],[-1,1248,"\n"],[1,1259," "],[1,1261," "],[-1,1262," "],[1,1266,"  "],[-1,1266,"= 0"],[1,1273,"  "],[-1,1273,"<"],[-1,1284,"\n"],[1,1290," "],[1,1292," "],[-1,1293," "],[1,1297,"  1jj "],[-1,1297,"= 1; j"],[1,1309," "],[-1,1312," "],[-1,1314,")"],[1,1317,";"],[-1,1321,"\n"],[1,1329," "],[-1,1340,"\n"],[1,1344," "],[1,1345," "],[-1,1346," "],[1,1354," "],[-1,1357," "],[1,1361," "],[-1,1361,">"],[-1,1372,"\n"],[1,1382," "],[1,1386," "],[-1,1386,"="],[-1,1397,"\n"],[1,1402," "],[1,1409," "],[-1,1409,"]"],[1,1419," "],[-1,1422," "],[-1,1426,"\n"],[1,1431," "],[1,1437," "],[-1,1440," "],[1,1444," "],[-1,1444,"="],[-1,1450,"\n"],[1,1466," "],[1,1481," "],[-1,1482," "],[-1,1490,"\n"],[1,1511," "],[1,1523,"\n"],[-1,1523,"}"],[1,2375,"\n"],[-1,2376,"\n"],[-1,2516,"\n"],[1,2519,"\n"],[-1,2537,";"],[1,2543,"\n"],[-1,2566,";"],[1,2572,"\n"],[-1,2590,";"],[1,2595,"\n"],[-1,2603,";"],[1,2609,"\n"],[-1,2644,"\n"],[1,2647,"\n"],[-1,3050,"\n"],[1,3053,"\n"],[-1,3076,"\n"],[1,3079,"\n"],[1,3134," "],[-1,3135," "],[-1,3150,"\n"],[1,3153,"\n"],[1,3206," "],[-1,3207," "],[-1,3251,"\n"],[1,3254,"\n"]],[3254,3254],[811,811]]],[1543325538642,["gjx16@GJXAIOU",[[1,3499,"**"],[1,3513,"**"]],[3499,3513],[3499,3517]]],[1543325562050,["gjx16@GJXAIOU",[[-1,3499,"**"]],[3501,3501],[3499,3499]]],[1543325623659,[null,[[-1,811," "],[-1,814," "],[1,816," "],[-1,819,"  1jj   "],[1,827,"= 1; j <"],[-1,842," "],[1,846," "],[-1,847," "],[1,851," "],[1,852,")"],[-1,854,";"],[1,859,"\n"],[-1,866," "],[1,878,"\n"],[-1,881," "],[-1,883," "],[1,885," "],[-1,892," "],[1,896," "],[-1,899," "],[1,900,">"],[1,910,"\n"],[-1,919," "],[-1,924," "],[1,925,"="],[1,935,"\n"],[-1,939," "],[-1,947," "],[1,948,"]"],[-1,957," "],[1,961," "],[1,964,"\n"],[-1,968," "],[-1,975," "],[1,979," "],[-1,982," "],[1,983,"="],[1,988,"\n"],[-1,1002," "],[-1,1016," "],[1,1018," "],[1,1026,"\n"],[-1,1027," "],[-1,1038,"\n"],[1,1043,"\n"],[1,1105,"\n"],[-1,1125,"\n"],[1,1139,"\n"],[-1,1140," "],[1,1148,"\n"],[-1,1149," "],[1,1157,"\n"],[-1,1158," "],[-1,1175," "],[1,1176,"="],[1,1185,"\n"],[-1,1202," "],[-1,1210," "],[1,1211,"n"],[1,1216,"\n"],[-1,1217," "],[-1,1222," "],[1,1224," "],[1,1239,"\n"],[-1,1240," "],[-1,1243," "],[1,1244,"n"],[1,1246,";"],[-1,1248,";"],[1,1249,"\n"],[-1,1259," "],[1,1262,"r"],[-1,1263,"r"],[-1,1267,"  "],[1,1269,"= 0"],[-1,1273,"  "],[1,1275,"<"],[1,1285,"\n"],[-1,1290," "],[1,1293,"r"],[-1,1294,"r"],[1,1298,"="],[1,1299,"1;"],[-1,1300,"1"],[-1,1302,"j "],[-1,1310," "],[1,1314," "],[1,1315,")"],[-1,1317,";"],[1,1322,"\n"],[-1,1329," "],[1,1341,"\n"],[-1,1344," "],[1,1346,"f"],[-1,1347,"f"],[-1,1355," "],[1,1359," "],[-1,1362," "],[1,1363,">"],[1,1373,"\n"],[-1,1382," "],[-1,1387," "],[1,1388,"="],[1,1398,"\n"],[-1,1402," "],[-1,1410," "],[1,1411,"]"],[-1,1420," "],[1,1424," "],[1,1427,"\n"],[-1,1431," "],[-1,1438," "],[1,1442," "],[-1,1445," "],[1,1446,"="],[1,1451,"\n"],[-1,1466," "],[-1,1482," "],[1,1484," "],[1,1491,"\n"],[-1,1511," "],[-1,1524,"\n"],[1,1525,"}"],[-1,2376,"\n"],[1,2378,"\n"],[1,2517,"\n"],[-1,2519,"\n"],[1,2538,";"],[-1,2543,"\n"],[1,2567,";"],[-1,2572,"\n"],[1,2591,";"],[-1,2595,"\n"],[1,2604,";"],[-1,2609,"\n"],[1,2645,"\n"],[-1,2647,"\n"],[1,3051,"\n"],[-1,3053,"\n"],[1,3077,"\n"],[-1,3079,"\n"],[-1,3135," "],[1,3137," "],[1,3151,"\n"],[-1,3153,"\n"],[-1,3207," "],[1,3209," "],[1,3252,"\n"],[-1,3254,"\n"],[1,3513,"0"],[-1,3515,"0"]],[811,811],[3515,3515]]],[1543325623659,[null,[[1,811," "],[1,813," "],[-1,814," "],[1,818,"  1jj   "],[-1,818,"= 1; j <"],[1,841," "],[-1,844," "],[1,846," "],[-1,849," "],[-1,851,")"],[1,854,";"],[-1,858,"\n"],[1,866," "],[-1,877,"\n"],[1,881," "],[1,882," "],[-1,883," "],[1,891," "],[-1,894," "],[1,898," "],[-1,898,">"],[-1,909,"\n"],[1,919," "],[1,923," "],[-1,923,"="],[-1,934,"\n"],[1,939," "],[1,946," "],[-1,946,"]"],[1,956," "],[-1,959," "],[-1,963,"\n"],[1,968," "],[1,974," "],[-1,977," "],[1,981," "],[-1,981,"="],[-1,987,"\n"],[1,1002," "],[1,1015," "],[-1,1016," "],[-1,1025,"\n"],[1,1027," "],[1,1037,"\n"],[-1,1041,"\n"],[-1,1104,"\n"],[1,1125,"\n"],[-1,1138,"\n"],[1,1140," "],[-1,1147,"\n"],[1,1149," "],[-1,1156,"\n"],[1,1158," "],[1,1174," "],[-1,1174,"="],[-1,1184,"\n"],[1,1202," "],[1,1209," "],[-1,1209,"n"],[-1,1215,"\n"],[1,1217," "],[1,1221," "],[-1,1222," "],[-1,1238,"\n"],[1,1240," "],[1,1242," "],[-1,1242,"n"],[-1,1245,";"],[1,1248,";"],[-1,1248,"\n"],[1,1259," "],[-1,1261,"r"],[1,1263,"r"],[1,1266,"  "],[-1,1266,"= 0"],[1,1273,"  "],[-1,1273,"<"],[-1,1284,"\n"],[1,1290," "],[-1,1292,"r"],[1,1294,"r"],[-1,1297,"="],[-1,1299,"1;"],[1,1302,"1"],[1,1303,"j "],[1,1309," "],[-1,1312," "],[-1,1314,")"],[1,1317,";"],[-1,1321,"\n"],[1,1329," "],[-1,1340,"\n"],[1,1344," "],[-1,1345,"f"],[1,1347,"f"],[1,1354," "],[-1,1357," "],[1,1361," "],[-1,1361,">"],[-1,1372,"\n"],[1,1382," "],[1,1386," "],[-1,1386,"="],[-1,1397,"\n"],[1,1402," "],[1,1409," "],[-1,1409,"]"],[1,1419," "],[-1,1422," "],[-1,1426,"\n"],[1,1431," "],[1,1437," "],[-1,1440," "],[1,1444," "],[-1,1444,"="],[-1,1450,"\n"],[1,1466," "],[1,1481," "],[-1,1482," "],[-1,1490,"\n"],[1,1511," "],[1,1523,"\n"],[-1,1523,"}"],[1,2375,"\n"],[-1,2376,"\n"],[-1,2516,"\n"],[1,2519,"\n"],[-1,2537,";"],[1,2543,"\n"],[-1,2566,";"],[1,2572,"\n"],[-1,2590,";"],[1,2595,"\n"],[-1,2603,";"],[1,2609,"\n"],[-1,2644,"\n"],[1,2647,"\n"],[-1,3050,"\n"],[1,3053,"\n"],[-1,3076,"\n"],[1,3079,"\n"],[1,3134," "],[-1,3135," "],[-1,3150,"\n"],[1,3153,"\n"],[1,3206," "],[-1,3207," "],[-1,3251,"\n"],[1,3254,"\n"],[-1,3512,"0"],[1,3515,"0"]],[3515,3515],[811,811]]],[1543325566494,["gjx16@GJXAIOU",[[1,3445,"**"]],[3445,3445],[3447,3447]]],[1543325573081,["gjx16@GJXAIOU",[[-1,3515,"**"]],[3517,3517],[3515,3515]]],[1543325575087,["gjx16@GJXAIOU",[[-1,3444," **"]],[3444,3447],[3444,3444]]],[1543325578895,["gjx16@GJXAIOU",[[1,3444,"=="],[1,3513,"=="]],[3444,3513],[3444,3517]]],[1543325592559,["gjx16@GJXAIOU",[[-1,3461,"没"]],[3462,3462],[3461,3461]]]],null,"gjx16@GJXAIOU"],["fea06327-879a-46c4-be2b-2e07f73f19c3",1545229645696,"# day6字符串与字符数组\n\n- **基础知识的比较**\n  - **'\\0'与ASCII中 space 的区别：**\n  ASCII中0~31为“非打印控制字符”，其中例如 0号对应的’\\0‘ ，13号对应的回车键，将它们按字符的形式打印到屏幕上的时候均为“ ”，它和空格 “ ” 是有本质上的区别。**空格**对应的ASCII为32号，**它属于“打印字符”**，只不过空格在屏幕上的表现形式也为 “ ” ，与无法打印的非打印控制字符显示的效果一样罢了。**’\\0‘仅仅作为一个字符串结束标志存在着，它的作用就是一个标志**！\n\n\n**1.字符数组的定义**\n\n```c\n#include<stdio.h>\nint main()\n{\n //初始化的方法\n   char array1[100] = {'a','b','c','d'};//法一\n   char array2[100] = \"abcd\";  //法二\n   char array3[] = \"abcd\";//数组根据后面的元素个数自动分配空间\n\n  printf(\"%s\\n\",array);  //输出数组值\n  printf(\"%d\\n\",sizeof(array2));//得到的值为100\n  printf(\"%d\\n\",sizeof(array3));//得到的值为5\n   \n  return 0；\n}\n```\n\n**2.1将一个字符串里面的元素进行排序**\n（使用sizeof函数，当且仅当定义数组的大小正好包含完整元素的时候才可以）\n```c\n\n#include<stdio.h>\n#include\"stdlib.h\"\n\nint  main()\n{\n\tint  i;\n\tint  j;\n\tchar  array[5] = \"acdb\";\n\n\tfor (i = 0; i < (sizeof(array) - 1); i++)\n\t{\n\t\tfor (j = 1; j < ((sizeof(array) - 1) - i); j++)\n\t\t{\n\t\t\tchar  tmp;\n\n\t\t\tif (array[j - 1] > array[j])\n\t\t\t{\n\t\t\t\ttmp = array[j];\n\t\t\t\tarray[j] = array[j - 1];\n\t\t\t\tarray[j - 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"%s\\n\", array);\n\n\treturn  0;\n\n}\n\n```\n\n**2.2  法二：根据len的大小，这时候可以任意更改数组大小**\n```c\n#include<stdio.h>\n#include\"stdlib.h\"\n\nint  main()\n{\n\tint  i;\n\tint  j;\n\tchar  array[15] = \"acdb\";\n\n\t//通过这种方法得到数组长度\n\tint  len = 0;\n\twhile (array[len++]);\n\tlen--;  \n\n\t//排序算法\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tfor (j = 1; j < (len - i); j++)\n\t\t{\n\t\t\tchar  tmp;\n\n\t\t\tif (array[j - 1] > array[j])\n\t\t\t{\n\t\t\t\ttmp = array[j];\n\t\t\t\tarray[j] = array[j - 1];\n\t\t\t\tarray[j - 1] = tmp;\n\n\t\t\t}\n\t\t}\n\t}\n\n\tprintf(\"(%s)\\n\", array);\n\n\tsystem(\"pause\");\n\treturn  0;\n\n}\n```\n\n**2.3 sizeof和len的区别**\n\n==根据以下的程序可以得到：sizeof得到的是数组定义的长度，而len得到的是数组中元素的个数(当是汉字的时候，就要取决于编码来看)==\n\n```c\n#include<stdio.h>\nint  main()\n{\n  char  s[10]  =  \"1234\";\n  int  len;\n  while(s[len++]);   //字符串是以0结尾，即遇到0即视为结尾\n  len  --;\n\n  /*这里的while语句等效为：\n  *  while（str[i]）\n  *  {\n  *    i++;\n  *  }\n  *   i--；\n  */\n\n  printf(\"sizeof  =  %d\\n\",sizeof(s));\n  printf(\"len  =  %d\\n\",len);\n  return  0;\n\n}\n```\n\n**3.1 将字符串进行逆置**\n1.直接进行逆置,即将后面的0也逆置到最前面（一般不会输出结果因为后面很多0）\n```c\n#include<stdio.h>\nint  main()\n{\n  char  str[15]  =  \"hello  world\";\n  int  min  =  0;\n  int  max  =  14;\n  while(min  <  max)\n  {\n  char  tmp;\n  tmp  =  str[max];\n  str[max]  =  str[min];\n  str[min]  =  tmp;\n  min++;\n  max--;\n  }\n\n  printf(\"%s\\n\",str);\n  return  0;\n}\n```\n\n2.如果仅将“hello world”，这几个字符串进行倒置，就要先计算数组长度；\n```c\n#include<stdio.h>\nint  main()\n{\n  char  str[15]  =  \"hello  world\";\n  \n  //求数组的长度\n  int len  =  0;\n  while(str[len++])；\n  len --;\n\n  int  min  =  0;\n  int  max  =  len-1;\n  while(min  <  max)\n  {\n    char  tmp;\n    tmp  =  str[max];  \n    str[max]  =  str[min];  \n    str[min]  =  tmp;  \n    min++;  \n    max--;\n\n  }\n  printf(\"%s\\n\",str);\n  return  0;\n\n}\n```\n\n**3.2如何将汉字进行倒置**\n在ASCII码中1个字节存放一个字符；\n在GBK编码中2个字节存放一个汉字；倒置的时候需要两个字节共同互换位置，因此需要两个中间变量\n在UTF-8编码中3个字节存放一个汉字；\n\n以下的示例是以GBK编码为例；(Qt 中默认是UTF-8编码)\n\n(工具->选项 -> 文本编辑器  -> 行为 ->文件编码：将UTF-8的编码更改为GBK编码)\n```c\n#include<stdio.h>\n\nint  main()\n{\n  char  str[50]  =  \"你好世界\";\n\n  int  len  =  0;\n  while(str[len++]);\n  len--;\n\n\n  int  min  =  0;\n  int  max  = len-1;\n  while(min  <  max)\n  {\n    char  tmp;\n    tmp  =  str[max  -1];\n    str[max  -1]  =  str[min];\n    str[min]  =  tmp;\n    \n    char  tmp1;\n    tmp1  =  str[max];\n    str[max]  =  str[min  +  1];\n    str[min  +  1]  =  tmp1;\n    min  +=  2;\n    max  -=2;\n  }\n  printf(\"%s\\n\",str);\n  return  0;\n\n}\n```\n\n\n**4.字符串和字符数组的差别**\n\n- 定义及其使用上的区别\n  - 字符串：`char *string = “andnf”;`\n  - 字符数组：`char a[100] = \"andnf\";`或者`char a[100] = {a,n,d,n,f};`\n==使用字符串初始化字符数组的时候要比逐个赋值多占一个字节，用于存放 \\0 ,但是字符数组的长度不会计算\\0，而数组占有的字节数会计算\\0 ==，\n     - 输入输出：输出的时候只要遇到‘\\0’就会停止输出；\n     - 定义：定义字符数组的时候，如果不赋值则必须规定数组的大小；但是如果初始化了，就可以选择规定大小或者不规定；如果不规定则系统会根据数组的大小进行自动分配；\n\n```c\nint main()\n{\n  char s[] = \"abcd\";\n  char s1[] = {'a','b','c','d'};\n  printf(\"%d\\n\",sizeof(s));\n  printf(\"%d\\n\",sizeof(s1));\n  return 0;\n}\n```\n==得到的结果分别是5和4.==\n\n字符串在内存中是以0结尾；以下程序可以正常的输出字符串“abcd”，因为s[4]的值为0，所以这是一个字符串；\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n当将s[4]同样赋值之后，在以%s输出就是乱码了,程序如下：\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[5] = {0};\n  s[0] = 'a';\n  s[1] = 'b';\n  s[2] = 'c';\n  s[3] = 'd';\n  s[4] = 'e';\n  printf(\"%s\\n\",s);\n  return 0;\n}\n```\n\n**当一个数组之中既含有汉字又含有字母的时候**\n\n==如果将一个字符串当做char处理，那么标准的ASACII字符一定是个整数，而汉字的第一个字节一定是负数==\n\n\n\n\n\n## 字符串的使用\n\n\n**1.去掉字符串右边的空格**\n\n```c\n#include<stdio.h>\nint main()\n{  \n  char s[20] = \"hello world   \";\n  //首先获取字符串的长度\n  int len = 0;\n  while(s[len++]);\n    len --;\n    \n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int i = 0;\n  for(i = len - 1;i >= 0;i--)\n    {\n      if(s[i] != ' ')\n       { \n         s[i + 1] = 0;\n          break;\n       }\n    }\n    printf(\"(%s)\\n\",s);\n    return 0;\n\n}\n```\n\n**2.去掉字符串左边的空格**\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;  \n\n  //因为是删除字符串右边的空格，因此需要从最右边进行遍历；\n\n  int  i  =  0;\n\n  int  j  =  0;\n\n  for(i  =  0;i  <=  len  -1;i++)\n\n  {\n    if(s[i]  !=  '  ')\n\n    {\n      for(j  =  0;  j  <  len  -1;j++)    //当是s[i]不等于空格的时候，将空格元素要替换掉\n\n        {\n        s[j]  =  s[i  +  j];\n        }\n        break;\n\n    }\n\n  }\n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n法二：\n\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[20]  =  \"  hello  world\";\n\n  //首先获取字符串的长度\n\n  int  len  =  0;\n\n  while(s[len++] ==' ');\n\n  len  --; //得到了字符串前面的空格数量 \n\n   int i = len;\n   while(s[i])\n   {\n     s[i-len] = s[i];\n     i++;\n   }\n   s[i - len] = 0; \n\n  printf(\"(%s)\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**3.字符串到整数的变化**\n\n步骤：1.知道字符串的长度\n2.将每个字符读取出来，转化为整数后*10的长度-1次方；\n3.将每个位计算和加起来\n\n```c\nint main()\n{\n  char s[100] = \"1234\";\n  int len = 0;\n  while(s[len++]);\n  len --;\n\n  int value = 0;//存放变量，为将字符串转换为整数后的变量\n  int i;\n  int tmp = len;\n  for (i = 0;i < len; i++) //遍历字符串\n  {\n    int base = 10; //求10的n次方\n    if((tmp - i -1) == 0 )\n    {\n      base = 1;          //字符串的最后一个时候乘1\n    }\n     else\n     {\n       int j;\n       for(j = 1; j < (tmp -i -1);j++)\n       {\n         base *= 10;\n       }\n    \n     }\n      value += (base * (s[i] - '0'));  \n  }\n   printf(\"%d\\n\",value);\n   return 0;\n}\n\n\n\n```\n\n~~下面的程序有问题，输出的值不对~~\n```c\n#include<math.h>\n\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s[10]  =  \"1234\";\n\n  int  len  =  0;\n\n  while(s[len++]);\n\n  len  --;\n\n  double  result  =  0;\n\n  int  i;\n\n  int  j;\n\n  int  wei  =  0;\n\n  for(i  =  0;i  <  len;  i++)\n\n  {\n\n  if(len  -  i  -1  ==  0)\n\n  {\n\n  wei  =  s[i];\n\n  }\n\n  else\n\n  {\n\n  for(j  =  0  ;j  <  len  -  1;j++)\n\n  {\n\n  double  x  =  10;\n\n  double  y  =  len  -1  -j;\n\n  result  +=  (s[j])*(pow(x,y));\n\n  }\n\n  }\n\n  result  +=  wei;\n\n  printf(\"%d\\n\",result);\n\n  return  0;\n\n}\n\n}\n```\n\n\n\n\n\n\n \n\n\n\n\n\n",[[1545229633164,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1545229633306,["gjx16@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1545229635313,["gjx16@GJXAIOU",[[1,0,"`"]],[0,0],[1,1]]],[1545229636406,["gjx16@GJXAIOU",[[-1,0,"`"]],[1,1],[0,0]]],[1545229636713,["gjx16@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1545229636857,["gjx16@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1545229637009,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1545229637046,["gjx16@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1545229640538,["gjx16@GJXAIOU",[[1,4,"d"]],[4,4],[5,5]]],[1545229640814,["gjx16@GJXAIOU",[[-1,4,"d"]],[5,5],[4,4]]],[1545229643122,["gjx16@GJXAIOU",[[1,4,"fater="]],[4,4],[10,10]]],[1545229643198,["gjx16@GJXAIOU",[[-1,9,"="]],[10,10],[9,9]]],[1545229643280,["gjx16@GJXAIOU",[[1,9,"="]],[9,9],[10,10]]],[1545229644178,["gjx16@GJXAIOU",[[-1,4,"fater="]],[10,10],[4,4]]],[1545229644303,["gjx16@GJXAIOU",[[-1,4,"\n"]],[4,4],[3,3]]],[1545229644450,["gjx16@GJXAIOU",[[-1,2,"-"]],[3,3],[2,2]]],[1545229644666,["gjx16@GJXAIOU",[[1,2,"da"]],[2,2],[4,4]]],[1545229645500,["gjx16@GJXAIOU",[[-1,2,"da"]],[4,4],[2,2]]],[1545229646902,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1545229647225,["gjx16@GJXAIOU",[[1,4,"\n"]],[3,3],[4,4]]],[1545229651905,["gjx16@GJXAIOU",[[1,4,"date:``"]],[4,4],[11,11]]],[1545229663079,["gjx16@GJXAIOU",[[1,10,"2018-12-19"]],[10,10],[20,20]]],[1545229666246,["gjx16@GJXAIOU",[[1,21,"fuzi"]],[21,21],[25,25]]],[1545229667120,["gjx16@GJXAIOU",[[-1,21,"fuzi"]],[25,25],[21,21]]],[1545229668904,["gjx16@GJXAIOU",[[1,21,"复习"]],[21,21],[23,23]]]],null,"gjx16@GJXAIOU"]]}