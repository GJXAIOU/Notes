{"compress":true,"commitItems":[["a0219a1b-d427-4a98-acf7-e3660c830917",1536829223027,"",[[1536829168122,["gjx16@GJXAIOU",[[1,0,"# day7\n\n\n\n"]],[0,0],[9,9]]]],null,"gjx16@GJXAIOU"],["4f907c7e-eafc-4cba-8cf9-51a64a3c805b",1536887501454,"# day7\n\n\n\n",[[1536887478249,["gjx16@GJXAIOU",[[1,6,"  函数"]],[6,6],[10,10]]],[1536887480403,["gjx16@GJXAIOU",[[1,14,"\n"]],[10,10],[11,11]]],[1536887480553,["gjx16@GJXAIOU",[[1,15,"\n"]],[11,11],[12,12]]],[1536887480723,["gjx16@GJXAIOU",[[1,16,"\n"]],[12,12],[13,13]]],[1536887482227,["gjx16@GJXAIOU",[[1,17,"\n"]],[13,13],[14,14]]],[1536887484080,["gjx16@GJXAIOU",[[1,18,"\n"]],[10,10],[11,11]]],[1536887484750,["gjx16@GJXAIOU",[[-1,10,"\n\n\n\n\n"],[1,15," "]],[11,11],[11,11]]],[1536887485330,["gjx16@GJXAIOU",[[1,15,"\n"]],[11,11],[12,12]]],[1536887486250,["gjx16@GJXAIOU",[[1,16,"\n"]],[12,12],[13,13]]],[1536887486570,["gjx16@GJXAIOU",[[1,17,"\n"]],[13,13],[14,14]]],[1536887491013,["gjx16@GJXAIOU",[[-1,13,"\n\n\n"],[1,16,"@"]],[13,13],[14,14]]],[1536887493260,["gjx16@GJXAIOU",[[1,14,"toc"]],[14,14],[17,17]]],[1536887496302,["gjx16@GJXAIOU",[[-1,13,"@toc"]],[17,17],[13,13]]],[1536887497318,["gjx16@GJXAIOU",[[-1,14,"\n"]],[13,13],[12,12]]],[1536887497458,["gjx16@GJXAIOU",[[-1,13,"\n"]],[12,12],[11,11]]],[1536887498967,["gjx16@GJXAIOU",[[-1,3,"ay7  函数 "]],[11,11],[3,3]]]],null,"gjx16@GJXAIOU"],["7360dba6-dc51-4536-bcb7-2bdac5dae65c",1536887574713,"# d\n\n",[[1536887523188,["gjx16@GJXAIOU",[[1,3,"ay 7 函数"]],[3,3],[10,10]]],[1536887524193,["gjx16@GJXAIOU",[[1,12,"\n"]],[10,10],[11,11]]],[1536887524773,["gjx16@GJXAIOU",[[1,13,"\n"]],[11,11],[12,12]]],[1536887528277,["gjx16@GJXAIOU",[[1,12,"@toc"]],[12,12],[16,16]]],[1536887529767,["gjx16@GJXAIOU",[[1,18,"\n"]],[16,16],[17,17]]],[1536887530215,["gjx16@GJXAIOU",[[1,19,"\n"]],[17,17],[18,18]]],[1536887530384,["gjx16@GJXAIOU",[[1,20,"\n"]],[18,18],[19,19]]],[1536887774830,["gjx16@GJXAIOU",[[1,21,"\n"]],[17,17],[18,18]]],[1536887778455,["gjx16@GJXAIOU",[[1,18,"****"]],[18,18],[20,20]]],[1536887783419,["gjx16@GJXAIOU",[[1,20,"1.dingyi"]],[20,20],[28,28]]],[1536887784716,["gjx16@GJXAIOU",[[-1,22,"dingyi"]],[28,28],[22,22]]],[1536887788525,["gjx16@GJXAIOU",[[1,22,"定义口高"]],[22,22],[26,26]]],[1536887789493,["gjx16@GJXAIOU",[[-1,24,"口高"]],[26,26],[24,24]]],[1536887793322,["gjx16@GJXAIOU",[[1,24,"构造函数"]],[24,24],[28,28]]],[1536887795166,["gjx16@GJXAIOU",[[1,34,"\n"]],[30,30],[31,31]]],[1536887795346,["gjx16@GJXAIOU",[[1,35,"\n"]],[31,31],[32,32]]],[1536887808281,["gjx16@GJXAIOU",[[1,32,"·"]],[32,32],[33,33]]],[1536887809111,["gjx16@GJXAIOU",[[-1,32,"·"]],[33,33],[32,32]]],[1536887810121,["gjx16@GJXAIOU",[[1,32,"```"]],[32,32],[35,35]]],[1536887810143,["gjx16@GJXAIOU",[[1,35,"language\n```\n"]],[35,35],[35,43]]],[1536887811139,["gjx16@GJXAIOU",[[-1,35,"language"],[1,43,"c"]],[35,43],[36,36]]],[1536887811321,["gjx16@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1536887811547,["gjx16@GJXAIOU",[[1,38,"\n"]],[37,37],[38,38]]],[1536888028651,["gjx16@GJXAIOU",[[1,37,"#include<>"]],[37,37],[47,47]]],[1536888032328,["gjx16@GJXAIOU",[[1,46,"dtdio"]],[46,46],[51,51]]],[1536888033888,["gjx16@GJXAIOU",[[-1,46,"dtdio"]],[51,51],[46,46]]],[1536888037121,["gjx16@GJXAIOU",[[1,46,"stdio.h"]],[46,46],[53,53]]],[1536888041059,["gjx16@GJXAIOU",[[1,56,"\n"]],[54,54],[55,55]]],[1536888045913,["gjx16@GJXAIOU",[[1,55,"int "]],[55,55],[59,59]]],[1536888047618,["gjx16@GJXAIOU",[[-1,55,"int "]],[59,59],[55,55]]],[1536888049141,["gjx16@GJXAIOU",[[1,57,"\n"]],[55,55],[56,56]]],[1536888052921,["gjx16@GJXAIOU",[[1,56,"int main("]],[56,56],[65,65]]],[1536888054523,["gjx16@GJXAIOU",[[1,65,"0"]],[65,65],[66,66]]],[1536888055228,["gjx16@GJXAIOU",[[-1,65,"0"]],[66,66],[65,65]]],[1536888056050,["gjx16@GJXAIOU",[[1,65,")"]],[65,65],[66,66]]],[1536888057450,["gjx16@GJXAIOU",[[1,68,"\n"]],[66,66],[67,67]]],[1536888059017,["gjx16@GJXAIOU",[[1,67,"{}"]],[67,67],[69,69]]],[1536888060220,["gjx16@GJXAIOU",[[1,68,"\n"]],[68,68],[69,69]]],[1536888060667,["gjx16@GJXAIOU",[[1,69,"\n"]],[69,69],[70,70]]],[1536888060882,["gjx16@GJXAIOU",[[1,70,"\n"]],[70,70],[71,71]]],[1536888065822,["gjx16@GJXAIOU",[[1,69,"  int len "]],[69,69],[79,79]]],[1536888067096,["gjx16@GJXAIOU",[[-1,78," "]],[79,79],[78,78]]],[1536888067693,["gjx16@GJXAIOU",[[1,78,";"]],[78,78],[79,79]]],[1536888068609,["gjx16@GJXAIOU",[[-1,78,";"]],[79,79],[78,78]]],[1536888072788,["gjx16@GJXAIOU",[[1,78," = 0;"]],[78,78],[83,83]]],[1536888073308,["gjx16@GJXAIOU",[[1,84,"  \n"]],[83,83],[86,86]]],[1536888081696,["gjx16@GJXAIOU",[[-1,84,"  "]],[86,86],[84,84]]],[1536888081871,["gjx16@GJXAIOU",[[-1,85,"\n"]],[84,84],[83,83]]],[1536888082644,["gjx16@GJXAIOU",[[-1,81,"0;"]],[83,83],[81,81]]],[1536888087637,["gjx16@GJXAIOU",[[1,81,"strlen();"]],[81,81],[90,90]]],[1536888091134,["gjx16@GJXAIOU",[[1,88,"s"]],[88,88],[89,89]]],[1536888095353,["gjx16@GJXAIOU",[[1,69,"\n"]],[68,68],[69,69]]],[1536888097819,["gjx16@GJXAIOU",[[1,69,"  x"]],[69,69],[72,72]]],[1536888098363,["gjx16@GJXAIOU",[[-1,71,"x"]],[72,72],[71,71]]],[1536888103883,["gjx16@GJXAIOU",[[1,71,"char s[100"]],[71,71],[81,81]]],[1536888105406,["gjx16@GJXAIOU",[[-1,78,"100"]],[81,81],[78,78]]],[1536888112017,["gjx16@GJXAIOU",[[1,78,"] = \"\";"]],[78,78],[85,85]]],[1536888119897,["gjx16@GJXAIOU",[[1,83,"hello worle"]],[83,83],[94,94]]],[1536888120393,["gjx16@GJXAIOU",[[-1,93,"e"]],[94,94],[93,93]]],[1536888120527,["gjx16@GJXAIOU",[[1,93,"d"]],[93,93],[94,94]]],[1536888124694,["gjx16@GJXAIOU",[[1,120,"  \n"]],[119,119],[122,122]]],[1536888128064,["gjx16@GJXAIOU",[[1,122,"prit"]],[122,122],[126,126]]],[1536888129010,["gjx16@GJXAIOU",[[-1,125,"t"]],[126,126],[125,125]]],[1536888133437,["gjx16@GJXAIOU",[[1,125,"ntf();"]],[125,125],[131,131]]],[1536888137168,["gjx16@GJXAIOU",[[1,129,"\"\"\""]],[129,129],[132,132]]],[1536888138015,["gjx16@GJXAIOU",[[-1,131,"\""]],[132,132],[131,131]]],[1536888152373,["gjx16@GJXAIOU",[[1,130,"%d\\n"]],[130,130],[134,134]]],[1536888158570,["gjx16@GJXAIOU",[[1,135,",len"]],[135,135],[139,139]]],[1536888173069,["gjx16@GJXAIOU",[[1,55,"#"]],[55,55],[56,56]]],[1536888177984,["gjx16@GJXAIOU",[[1,56,"include<>"]],[56,56],[65,65]]],[1536888181630,["gjx16@GJXAIOU",[[1,64,"string "]],[64,64],[71,71]]],[1536888182825,["gjx16@GJXAIOU",[[-1,70," "]],[71,71],[70,70]]],[1536888183899,["gjx16@GJXAIOU",[[1,70,".h"]],[70,70],[72,72]]],[1536888185730,["gjx16@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1536888185744,["gjx16@GJXAIOU",[[1,75,"\n"]],[74,74],[75,75]]]],null,"gjx16@GJXAIOU"],["5c8fb381-e570-4137-9f8f-ff994fc84c9c",1536894540234,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n\n\n\n",[[1536894498636,["gjx16@GJXAIOU",[[-1,75,"\n"]],[75,75],[74,74]]],[1536894517673,["gjx16@GJXAIOU",[[1,173,"\n"]],[168,168],[169,169]]],[1536894517858,["gjx16@GJXAIOU",[[1,174,"\n"]],[169,169],[170,170]]],[1536894521060,["gjx16@GJXAIOU",[[1,170,"****"]],[170,170],[172,172]]],[1536894522514,["gjx16@GJXAIOU",[[1,172,"2."]],[172,172],[174,174]]],[1536910476562,["gjx16@GJXAIOU",[[1,31,"示例：构造"]],[31,31],[36,36]]],[1536910627818,["gjx16@GJXAIOU",[[-1,34,"构造"]],[36,36],[34,34]]],[1536910648720,["gjx16@GJXAIOU",[[1,34,"使用系统自带的strlen函数求解数组"]],[34,34],[53,53]]],[1536910652329,["gjx16@GJXAIOU",[[1,53,"的长度"]],[53,53],[56,56]]],[1536910657317,["gjx16@GJXAIOU",[[-1,195,"**2.**"]],[201,201],[195,195]]],[1536910685750,["gjx16@GJXAIOU",[[1,195,"使用自己构造的函数求解数组长度"]],[195,195],[210,210]]],[1536910686653,["gjx16@GJXAIOU",[[1,215,"\n"]],[210,210],[211,211]]],[1536910687220,["gjx16@GJXAIOU",[[1,216,"\n"]],[211,211],[212,212]]],[1536910691702,["gjx16@GJXAIOU",[[1,212,"```"]],[212,212],[215,215]]],[1536910691725,["gjx16@GJXAIOU",[[1,215,"language\n```\n"]],[215,215],[215,223]]],[1536910692841,["gjx16@GJXAIOU",[[-1,215,"language"],[1,223,"c"]],[215,223],[216,216]]],[1536910693071,["gjx16@GJXAIOU",[[1,217,"\n"]],[216,216],[217,217]]],[1536910693549,["gjx16@GJXAIOU",[[1,218,"\n"]],[217,217],[218,218]]],[1536910693916,["gjx16@GJXAIOU",[[1,219,"\n"]],[218,218],[219,219]]],[1536910694249,["gjx16@GJXAIOU",[[1,220,"\n"]],[219,219],[220,220]]],[1536910703024,["gjx16@GJXAIOU",[[1,217,"#include<>"]],[217,217],[227,227]]],[1536910707709,["gjx16@GJXAIOU",[[1,226,"stdio.h"]],[226,226],[233,233]]],[1536910709970,["gjx16@GJXAIOU",[[1,238,"\n"]],[234,234],[235,235]]],[1536910714446,["gjx16@GJXAIOU",[[1,235,"int main()"]],[235,235],[245,245]]],[1536910715214,["gjx16@GJXAIOU",[[1,249,"\n"]],[245,245],[246,246]]],[1536910716420,["gjx16@GJXAIOU",[[1,246,"{}"]],[246,246],[248,248]]],[1536910717933,["gjx16@GJXAIOU",[[1,247,"\n"]],[247,247],[248,248]]],[1536910718117,["gjx16@GJXAIOU",[[1,248,"\n"]],[248,248],[249,249]]],[1536910718304,["gjx16@GJXAIOU",[[1,249,"\n"]],[249,249],[250,250]]],[1536910725510,["gjx16@GJXAIOU",[[1,248,"  in"]],[248,248],[252,252]]],[1536910726067,["gjx16@GJXAIOU",[[-1,250,"in"]],[252,252],[250,250]]],[1536910729210,["gjx16@GJXAIOU",[[1,250,"char s "]],[250,250],[257,257]]],[1536910730019,["gjx16@GJXAIOU",[[-1,256," "]],[257,257],[256,256]]],[1536910737945,["gjx16@GJXAIOU",[[1,256,"[] = \"\";"]],[256,256],[264,264]]],[1536910743366,["gjx16@GJXAIOU",[[1,262,"hello woe"]],[262,262],[271,271]]],[1536910744247,["gjx16@GJXAIOU",[[-1,270,"e"]],[271,271],[270,270]]],[1536910745545,["gjx16@GJXAIOU",[[1,270,"rld"]],[270,270],[273,273]]],[1536910747813,["gjx16@GJXAIOU",[[1,276,"  \n"]],[275,275],[278,278]]],[1536910749678,["gjx16@GJXAIOU",[[1,278,"int "]],[278,278],[282,282]]],[1536910763161,["gjx16@GJXAIOU",[[1,235,"\n"]],[234,234],[235,235]]],[1536910763370,["gjx16@GJXAIOU",[[1,236,"\n"]],[235,235],[236,236]]],[1536910766699,["gjx16@GJXAIOU",[[-1,236,"\n"]],[236,236],[235,235]]],[1536910767720,["gjx16@GJXAIOU",[[-1,235,"\n"]],[235,235],[234,234]]],[1536910981908,["gjx16@GJXAIOU",[[1,282,"len = 0;"]],[282,282],[290,290]]],[1536910982728,["gjx16@GJXAIOU",[[1,291,"  \n"]],[290,290],[293,293]]],[1536911009224,["gjx16@GJXAIOU",[[1,293,"while()"]],[293,293],[300,300]]],[1536911017009,["gjx16@GJXAIOU",[[1,299,"s[len++]"]],[299,299],[307,307]]],[1536911019430,["gjx16@GJXAIOU",[[1,308,";"]],[308,308],[309,309]]],[1536911019741,["gjx16@GJXAIOU",[[1,310,"  \n"]],[309,309],[312,312]]],[1536911025632,["gjx16@GJXAIOU",[[1,312,"len--;"]],[312,312],[318,318]]],[1536911029152,["gjx16@GJXAIOU",[[1,319,"  \n"]],[318,318],[321,321]]],[1536911030358,["gjx16@GJXAIOU",[[-1,319,"  "],[1,321,"\n"]],[321,321],[320,320]]],[1536911034337,["gjx16@GJXAIOU",[[1,320,"printf();"]],[320,320],[329,329]]],[1536911037525,["gjx16@GJXAIOU",[[1,327,"\"\""]],[327,327],[329,329]]],[1536911040454,["gjx16@GJXAIOU",[[1,328,";en"]],[328,328],[331,331]]],[1536911042202,["gjx16@GJXAIOU",[[-1,328,";en"]],[331,331],[328,328]]],[1536911044453,["gjx16@GJXAIOU",[[1,328,";"]],[328,328],[329,329]]],[1536911045458,["gjx16@GJXAIOU",[[-1,328,";"]],[329,329],[328,328]]],[1536911055010,["gjx16@GJXAIOU",[[1,328,"len = %d\\n"]],[328,328],[338,338]]],[1536911059731,["gjx16@GJXAIOU",[[1,339,",len"]],[339,339],[343,343]]],[1536911783265,["gjx16@GJXAIOU",[[-1,351,"\n"]],[351,351],[350,350]]],[1536911783404,["gjx16@GJXAIOU",[[-1,350,"\n"]],[350,350],[349,349]]],[1536911788499,["gjx16@GJXAIOU",[[1,354,"jiang"]],[354,354],[359,359]]],[1536911789443,["gjx16@GJXAIOU",[[-1,356,"ang"]],[359,359],[356,356]]],[1536911790084,["gjx16@GJXAIOU",[[-1,354,"j"]],[355,355],[354,354]]],[1536911791400,["gjx16@GJXAIOU",[[1,354,"jiang"]],[354,354],[359,359]]],[1536911793571,["gjx16@GJXAIOU",[[-1,354,"jiang"]],[359,359],[354,354]]],[1536911848291,["gjx16@GJXAIOU",[[1,354,"将以上的程序转换为函数；"]],[354,354],[366,366]]],[1536911909634,[null,[[-1,366,"i"]],[366,366],[366,366]]],[1536911909634,[null,[[1,366,"i"]],[366,366],[366,366]]],[1536911892636,["gjx16@GJXAIOU",[[1,371,"\n"]],[366,366],[367,367]]],[1536911892667,["gjx16@GJXAIOU",[[1,372,"\n"]],[367,367],[368,368]]],[1536911895476,["gjx16@GJXAIOU",[[1,368,"```"]],[368,368],[371,371]]],[1536911895500,["gjx16@GJXAIOU",[[1,371,"language\n```\n"]],[371,371],[371,379]]],[1536911896603,["gjx16@GJXAIOU",[[-1,371,"language"],[1,379,"c"]],[371,379],[372,372]]],[1536911896883,["gjx16@GJXAIOU",[[1,373,"\n"]],[372,372],[373,373]]],[1536911905477,["gjx16@GJXAIOU",[[1,373,"#include<>"]],[373,373],[383,383]]],[1536911909346,["gjx16@GJXAIOU",[[1,382,"stdio."]],[382,382],[388,388]]],[1536911969630,[null,[[-1,366,"i"],[1,367,"\n"],[-1,393,"\n"]],[366,366],[393,393]]],[1536911969630,[null,[[1,366,"i"],[-1,366,"\n"],[1,393,"\n"]],[393,393],[366,366]]],[1536911910132,["gjx16@GJXAIOU",[[1,388,"h"]],[388,388],[389,389]]],[1536911911527,["gjx16@GJXAIOU",[[1,391,"\n"]],[390,390],[391,391]]],[1536911913187,["gjx16@GJXAIOU",[[1,391,"int"]],[391,391],[394,394]]],[1536911914554,["gjx16@GJXAIOU",[[-1,391,"int"]],[394,394],[391,391]]],[1536911916544,["gjx16@GJXAIOU",[[1,392,"\n"]],[391,391],[392,392]]],[1536911918310,["gjx16@GJXAIOU",[[1,393,"\n"]],[392,392],[393,393]]],[1536911924679,["gjx16@GJXAIOU",[[1,393,"int main()"]],[393,393],[403,403]]],[1536911925573,["gjx16@GJXAIOU",[[1,404,"\n"]],[403,403],[404,404]]],[1536911926918,["gjx16@GJXAIOU",[[1,404,"{}"]],[404,404],[406,406]]],[1536911928030,["gjx16@GJXAIOU",[[1,405,"\n"]],[405,405],[406,406]]],[1536911928226,["gjx16@GJXAIOU",[[1,406,"\n"]],[406,406],[407,407]]],[1536911928350,["gjx16@GJXAIOU",[[1,407,"\n"]],[407,407],[408,408]]],[1536911928592,["gjx16@GJXAIOU",[[1,408,"\n"]],[408,408],[409,409]]],[1536911935897,["gjx16@GJXAIOU",[[1,406,"  J"]],[406,406],[409,409]]],[1536911937115,["gjx16@GJXAIOU",[[-1,408,"J"]],[409,409],[408,408]]],[1536911948288,["gjx16@GJXAIOU",[[1,408,"char s[100"]],[408,408],[418,418]]],[1536911951366,["gjx16@GJXAIOU",[[-1,415,"100"]],[418,418],[415,415]]],[1536911954497,["gjx16@GJXAIOU",[[1,415,"] - "]],[415,415],[419,419]]],[1536911955584,["gjx16@GJXAIOU",[[-1,417,"- "]],[419,419],[417,417]]],[1536911959591,["gjx16@GJXAIOU",[[1,417,"='"]],[417,417],[419,419]]],[1536911961452,["gjx16@GJXAIOU",[[-1,418,"'"]],[419,419],[418,418]]],[1536911969404,["gjx16@GJXAIOU",[[1,418,"\"\""]],[418,418],[420,420]]],[1536912029635,[null,[[-1,366,"i"],[1,367,"\n"],[-1,428,"\n"]],[366,366],[428,428]]],[1536912029635,[null,[[1,366,"i"],[-1,366,"\n"],[1,428,"\n"]],[428,428],[366,366]]],[1536911970212,["gjx16@GJXAIOU",[[1,420,";"]],[420,420],[421,421]]],[1536911972937,["gjx16@GJXAIOU",[[1,419,"k"]],[419,419],[420,420]]],[1536911973580,["gjx16@GJXAIOU",[[-1,419,"k"]],[420,420],[419,419]]],[1536911977929,["gjx16@GJXAIOU",[[1,419,"hello woe"]],[419,419],[428,428]]],[1536911978886,["gjx16@GJXAIOU",[[-1,427,"e"]],[428,428],[427,427]]],[1536911981590,["gjx16@GJXAIOU",[[1,427,"rld"]],[427,427],[430,430]]],[1536911984055,["gjx16@GJXAIOU",[[1,433,"  \n"]],[432,432],[435,435]]],[1536911986247,["gjx16@GJXAIOU",[[1,435,"in"]],[435,435],[437,437]]],[1536911992698,["gjx16@GJXAIOU",[[-1,435,"in"]],[437,437],[435,435]]],[1536912009314,["gjx16@GJXAIOU",[[1,435,"int len = mylen"]],[435,435],[450,450]]],[1536912011279,["gjx16@GJXAIOU",[[-1,447,"len"]],[450,450],[447,447]]],[1536912017780,["gjx16@GJXAIOU",[[1,447,"strlen()"]],[447,447],[455,455]]],[1536912021342,["gjx16@GJXAIOU",[[1,454,"s"]],[454,454],[455,455]]],[1536912024370,["gjx16@GJXAIOU",[[1,456,";"]],[456,456],[457,457]]],[1536912025107,["gjx16@GJXAIOU",[[1,458,"  \n"]],[457,457],[460,460]]],[1536912089632,[null,[[-1,366,"i"],[1,367,"\n"],[-1,468,"\n"]],[366,366],[468,468]]],[1536912089632,[null,[[1,366,"i"],[-1,366,"\n"],[1,468,"\n"]],[468,468],[366,366]]],[1536912060498,["gjx16@GJXAIOU",[[1,460,"printf();"]],[460,460],[469,469]]],[1536912063187,["gjx16@GJXAIOU",[[1,467,"\"\""]],[467,467],[469,469]]],[1536912069116,["gjx16@GJXAIOU",[[1,468,"len - "]],[468,468],[474,474]]],[1536912070146,["gjx16@GJXAIOU",[[-1,472,"- "]],[474,474],[472,472]]],[1536912077149,["gjx16@GJXAIOU",[[1,472,"= %d\\n"]],[472,472],[478,478]]],[1536912081341,["gjx16@GJXAIOU",[[1,479,",len"]],[479,479],[483,483]]],[1536912086822,["gjx16@GJXAIOU",[[1,393,"\n"]],[391,391],[392,392]]],[1536912089095,["gjx16@GJXAIOU",[[1,392,"int l"]],[392,392],[397,397]]],[1536912149634,[null,[[-1,366,"i"],[1,367,"\n"],[-1,499,"\n"]],[366,366],[499,499]]],[1536912149634,[null,[[1,366,"i"],[-1,366,"\n"],[1,499,"\n"]],[499,499],[366,366]]],[1536912091009,["gjx16@GJXAIOU",[[-1,396,"l"]],[397,397],[396,396]]],[1536912093537,["gjx16@GJXAIOU",[[1,396,"mylen"]],[396,396],[401,401]]],[1536912094492,["gjx16@GJXAIOU",[[-1,398,"len"]],[401,401],[398,398]]],[1536912099107,["gjx16@GJXAIOU",[[1,398,"strlen()"]],[398,398],[406,406]]],[1536912123500,["gjx16@GJXAIOU",[[1,405,"char a"]],[405,405],[411,411]]],[1536912126570,["gjx16@GJXAIOU",[[1,414,"\n"]],[412,412],[413,413]]],[1536912131569,["gjx16@GJXAIOU",[[1,413,"{}"]],[413,413],[415,415]]],[1536912132908,["gjx16@GJXAIOU",[[1,414,"\n"]],[414,414],[415,415]]],[1536912133367,["gjx16@GJXAIOU",[[1,415,"\n"]],[415,415],[416,416]]],[1536912133576,["gjx16@GJXAIOU",[[1,416,"\n"]],[416,416],[417,417]]],[1536912143084,["gjx16@GJXAIOU",[[1,415,"  l"]],[415,415],[418,418]]],[1536912143761,["gjx16@GJXAIOU",[[-1,417,"l"]],[418,418],[417,417]]],[1536912148941,["gjx16@GJXAIOU",[[1,417,"int len = "]],[417,417],[427,427]]],[1536912209636,[null,[[-1,366,"i"],[1,367,"\n"],[-1,532,"\n"]],[366,366],[532,532]]],[1536912209636,[null,[[1,366,"i"],[-1,366,"\n"],[1,532,"\n"]],[532,532],[366,366]]],[1536912150808,["gjx16@GJXAIOU",[[1,427,"0;"]],[427,427],[429,429]]],[1536912151397,["gjx16@GJXAIOU",[[1,430,"  \n"]],[429,429],[432,432]]],[1536912153336,["gjx16@GJXAIOU",[[1,432,"e"]],[432,432],[433,433]]],[1536912153977,["gjx16@GJXAIOU",[[-1,432,"e"]],[433,433],[432,432]]],[1536912158328,["gjx16@GJXAIOU",[[1,432,"while()"]],[432,432],[439,439]]],[1536912160511,["gjx16@GJXAIOU",[[1,438,"s"]],[438,438],[439,439]]],[1536912173130,["gjx16@GJXAIOU",[[-1,438,"s"]],[439,439],[438,438]]],[1536912181806,["gjx16@GJXAIOU",[[1,438,"s"]],[438,438],[439,439]]],[1536912182792,["gjx16@GJXAIOU",[[-1,438,"s"]],[439,439],[438,438]]],[1536912629642,[null,[[-1,366,"i"],[1,367,"\n"],[-1,544,"\n"]],[366,366],[544,544]]],[1536912629642,[null,[[1,366,"i"],[-1,366,"\n"],[1,544,"\n"]],[544,544],[366,366]]],[1536912610089,["gjx16@GJXAIOU",[[1,412,"   //函数返回自"]],[412,412],[422,422]]],[1536912611213,["gjx16@GJXAIOU",[[-1,421,"自"]],[422,422],[421,421]]],[1536912623570,["gjx16@GJXAIOU",[[1,421,"值类型   函数名（）"]],[421,421],[432,432]]],[1536912689643,[null,[[-1,366,"i"],[1,367,"\n"],[-1,564,"\n"]],[366,366],[564,564]]],[1536912689643,[null,[[1,366,"i"],[-1,366,"\n"],[1,564,"\n"]],[564,564],[366,366]]],[1536912637993,["gjx16@GJXAIOU",[[1,411,"【】"]],[411,411],[413,413]]],[1536912638930,["gjx16@GJXAIOU",[[-1,411,"【】"]],[413,413],[411,411]]],[1536912640446,["gjx16@GJXAIOU",[[1,411,"[]"]],[411,411],[413,413]]],[1536913094310,[null,[[-1,366,"i"],[1,367,"\n"],[-1,566,"\n"]],[366,366],[566,566]]],[1536913094310,[null,[[1,366,"i"],[-1,366,"\n"],[1,566,"\n"]],[566,566],[366,366]]],[1536913066963,["gjx16@GJXAIOU",[[1,460,"a[len++]"]],[460,460],[468,468]]],[1536913069670,["gjx16@GJXAIOU",[[1,469,";"]],[469,469],[470,470]]],[1536913070188,["gjx16@GJXAIOU",[[1,471,"  \n"]],[470,470],[473,473]]],[1536913075361,["gjx16@GJXAIOU",[[1,473,"len --;"]],[473,473],[480,480]]],[1536913078155,["gjx16@GJXAIOU",[[1,481,"  \n"]],[480,480],[483,483]]],[1536913084713,["gjx16@GJXAIOU",[[1,483,"return len;"]],[483,483],[494,494]]],[1536913154311,[null,[[-1,366,"i"],[1,367,"\n"],[-1,599,"\n"]],[366,366],[599,599]]],[1536913154311,[null,[[1,366,"i"],[-1,366,"\n"],[1,599,"\n"]],[599,599],[366,366]]],[1536913138451,["gjx16@GJXAIOU",[[1,433,"hanshu"]],[433,433],[439,439]]],[1536913140048,["gjx16@GJXAIOU",[[-1,433,"hanshu"]],[439,439],[433,433]]],[1536913144734,["gjx16@GJXAIOU",[[1,433,"函数参数"]],[433,433],[437,437]]],[1536913214310,[null,[[-1,366,"i"],[1,367,"\n"],[-1,603,"\n"]],[366,366],[603,603]]],[1536913214310,[null,[[1,366,"i"],[-1,366,"\n"],[1,603,"\n"]],[603,603],[366,366]]],[1536913159559,["gjx16@GJXAIOU",[[1,433,"参数类型  "]],[433,433],[439,439]]],[1536913163641,["gjx16@GJXAIOU",[[-1,439,"函数"]],[441,441],[439,439]]],[1536913170716,["gjx16@GJXAIOU",[[1,439,"形式"]],[439,439],[441,441]]],[1536913274312,[null,[[-1,366,"i"],[1,367,"\n"],[-1,609,"\n"]],[366,366],[609,609]]],[1536913274312,[null,[[1,366,"i"],[-1,366,"\n"],[1,609,"\n"]],[609,609],[366,366]]],[1536913226075,["gjx16@GJXAIOU",[[1,612,"```"]],[612,612],[615,615]]],[1536913226099,["gjx16@GJXAIOU",[[1,615,"language\n```\n"]],[615,615],[615,623]]],[1536913227077,["gjx16@GJXAIOU",[[-1,615,"language"],[1,623,"c"]],[615,623],[616,616]]],[1536913227277,["gjx16@GJXAIOU",[[1,617,"\n"]],[616,616],[617,617]]],[1536913241465,["gjx16@GJXAIOU",[[1,617,"#include<>"]],[617,617],[627,627]]],[1536913245774,["gjx16@GJXAIOU",[[1,626,"stdio.h"]],[626,626],[633,633]]],[1536913247490,["gjx16@GJXAIOU",[[1,635,"\n"]],[634,634],[635,635]]],[1536913248245,["gjx16@GJXAIOU",[[1,636,"\n"]],[635,635],[636,636]]],[1536913250828,["gjx16@GJXAIOU",[[-1,636,"\n"]],[636,636],[635,635]]],[1536913256445,["gjx16@GJXAIOU",[[1,635,"inr"]],[635,635],[638,638]]],[1536913257663,["gjx16@GJXAIOU",[[-1,635,"inr"]],[638,638],[635,635]]],[1536913258536,["gjx16@GJXAIOU",[[1,636,"\n"]],[635,635],[636,636]]],[1536913262319,["gjx16@GJXAIOU",[[1,636,"int max()"]],[636,636],[645,645]]],[1536913270624,["gjx16@GJXAIOU",[[1,644,"int a,int b"]],[644,644],[655,655]]],[1536913273204,["gjx16@GJXAIOU",[[1,657,"\n"]],[656,656],[657,657]]],[1536913334312,[null,[[-1,366,"i"],[1,367,"\n"],[-1,661,"\n"]],[366,366],[661,661]]],[1536913334312,[null,[[1,366,"i"],[-1,366,"\n"],[1,661,"\n"]],[661,661],[366,366]]],[1536913276523,["gjx16@GJXAIOU",[[1,657,"{}"]],[657,657],[659,659]]],[1536913277996,["gjx16@GJXAIOU",[[1,658,"\n"]],[658,658],[659,659]]],[1536913278313,["gjx16@GJXAIOU",[[1,659,"\n"]],[659,659],[660,660]]],[1536913289512,["gjx16@GJXAIOU",[[1,659,"  int c = ()"]],[659,659],[671,671]]],[1536913295592,["gjx16@GJXAIOU",[[1,670,"a<b"]],[670,670],[673,673]]],[1536913296684,["gjx16@GJXAIOU",[[-1,671,"<b"]],[673,673],[671,671]]],[1536913300407,["gjx16@GJXAIOU",[[1,671," < b"]],[671,671],[675,675]]],[1536913303773,["gjx16@GJXAIOU",[[1,676," "]],[676,676],[677,677]]],[1536913316840,["gjx16@GJXAIOU",[[1,676,"?a:"]],[676,676],[679,679]]],[1536913319286,["gjx16@GJXAIOU",[[-1,677,"a:"]],[679,679],[677,677]]],[1536913319697,["gjx16@GJXAIOU",[[1,678," "]],[677,677],[678,678]]],[1536913320555,["gjx16@GJXAIOU",[[1,678,"a"]],[678,678],[679,679]]],[1536913322080,["gjx16@GJXAIOU",[[1,680," "]],[679,679],[680,680]]],[1536913328899,["gjx16@GJXAIOU",[[1,680,":b"]],[680,680],[682,682]]],[1536913329854,["gjx16@GJXAIOU",[[-1,681,"b"]],[682,682],[681,681]]],[1536913330103,["gjx16@GJXAIOU",[[1,682," "]],[681,681],[682,682]]],[1536913332665,["gjx16@GJXAIOU",[[1,682,"b;"]],[682,682],[684,684]]],[1536913394312,[null,[[-1,366,"i"],[1,367,"\n"],[-1,691,"\n"]],[366,366],[691,691]]],[1536913394312,[null,[[1,366,"i"],[-1,366,"\n"],[1,691,"\n"]],[691,691],[366,366]]],[1536913341382,["gjx16@GJXAIOU",[[1,612,"\n"]],[610,610],[611,611]]],[1536913343101,["gjx16@GJXAIOU",[[1,611,"qiu"]],[611,611],[614,614]]],[1536913343933,["gjx16@GJXAIOU",[[-1,611,"qiu"]],[614,614],[611,611]]],[1536913361964,["gjx16@GJXAIOU",[[1,611,"求a.b中较大的一个数"]],[611,611],[622,622]]],[1536913514316,[null,[[-1,366,"i"],[1,367,"\n"],[-1,703,"\n"]],[366,366],[703,703]]],[1536913514316,[null,[[1,366,"i"],[-1,366,"\n"],[1,703,"\n"]],[703,703],[366,366]]],[1536913485671,["gjx16@GJXAIOU",[[1,504,"    、、"]],[504,504],[510,510]]],[1536913486835,["gjx16@GJXAIOU",[[-1,508,"、、"]],[510,510],[508,508]]],[1536913487709,["gjx16@GJXAIOU",[[1,508,"///"]],[508,508],[511,511]]],[1536913488694,["gjx16@GJXAIOU",[[-1,509,"//"]],[511,511],[509,509]]],[1536913491268,["gjx16@GJXAIOU",[[1,509,"含税的"]],[509,509],[512,512]]],[1536913492508,["gjx16@GJXAIOU",[[-1,508,"/含税的"]],[512,512],[508,508]]],[1536913497530,["gjx16@GJXAIOU",[[1,508,"//ha"]],[508,508],[512,512]]],[1536913498142,["gjx16@GJXAIOU",[[-1,510,"ha"]],[512,512],[510,510]]],[1536913512126,["gjx16@GJXAIOU",[[1,510,"函数的返回值一定要和"]],[510,510],[520,520]]],[1536913574316,[null,[[-1,366,"i"],[1,367,"\n"],[-1,719,"\n"]],[366,366],[719,719]]],[1536913574316,[null,[[1,366,"i"],[-1,366,"\n"],[1,719,"\n"]],[719,719],[366,366]]],[1536913518768,["gjx16@GJXAIOU",[[1,520,"函数定义的时候一直"]],[520,520],[529,529]]],[1536913519703,["gjx16@GJXAIOU",[[-1,527,"一直"]],[529,529],[527,527]]],[1536913522340,["gjx16@GJXAIOU",[[1,527,"一致"]],[527,527],[529,529]]],[1536913547808,["gjx16@GJXAIOU",[[1,598," 、、"]],[598,598],[601,601]]],[1536913548734,["gjx16@GJXAIOU",[[-1,599,"、、"]],[601,601],[599,599]]],[1536913552560,["gjx16@GJXAIOU",[[1,599,"//shican"]],[599,599],[607,607]]],[1536913554686,["gjx16@GJXAIOU",[[-1,601,"shican"]],[607,607],[601,601]]],[1536913561198,["gjx16@GJXAIOU",[[1,601,"实参可以是"]],[601,601],[606,606]]],[1536913634321,[null,[[-1,366,"i"],[1,367,"\n"],[-1,736,"\n"]],[366,366],[736,736]]],[1536913634321,[null,[[1,366,"i"],[-1,366,"\n"],[1,736,"\n"]],[736,736],[366,366]]],[1536913603025,["gjx16@GJXAIOU",[[1,606,"变量或者是常量，二"]],[606,606],[615,615]]],[1536913603870,["gjx16@GJXAIOU",[[-1,614,"二"]],[615,615],[614,614]]],[1536913617553,["gjx16@GJXAIOU",[[1,614,"而形参只能是变量；"]],[614,614],[623,623]]],[1536913754323,[null,[[-1,366,"i"],[1,367,"\n"],[-1,753,"\n"]],[366,366],[753,753]]],[1536913754323,[null,[[1,366,"i"],[-1,366,"\n"],[1,753,"\n"]],[753,753],[366,366]]],[1536913709671,["gjx16@GJXAIOU",[[1,661,"\n"]],[660,660],[661,661]]],[1536913709833,["gjx16@GJXAIOU",[[1,662,"\n"]],[661,661],[662,662]]],[1536913711090,["gjx16@GJXAIOU",[[1,662,"···"]],[662,662],[665,665]]],[1536913714481,["gjx16@GJXAIOU",[[-1,662,"···"]],[665,665],[662,662]]],[1536913719729,["gjx16@GJXAIOU",[[1,662,"```c"]],[662,662],[666,666]]],[1536913720145,["gjx16@GJXAIOU",[[1,667,"\n"]],[666,666],[667,667]]],[1536913721553,["gjx16@GJXAIOU",[[1,667,"```"]],[667,667],[670,670]]],[1536913723351,["gjx16@GJXAIOU",[[1,665,"\n"]],[665,665],[666,666]]],[1536913723526,["gjx16@GJXAIOU",[[1,666,"\n"]],[666,666],[667,667]]],[1536913724930,["gjx16@GJXAIOU",[[-1,666,"\n"]],[667,667],[666,666]]],[1536913725094,["gjx16@GJXAIOU",[[-1,665,"\n"]],[666,666],[665,665]]],[1536913726914,["gjx16@GJXAIOU",[[1,667,"\n"]],[666,666],[667,667]]],[1536913727335,["gjx16@GJXAIOU",[[1,668,"\n"]],[667,667],[668,668]]],[1536913728880,["gjx16@GJXAIOU",[[1,668,"#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```"]],[668,668],[954,954]]],[1536913750685,["gjx16@GJXAIOU",[[1,959,"\n"]],[958,958],[959,959]]],[1536913750859,["gjx16@GJXAIOU",[[1,960,"\n"]],[959,959],[960,960]]],[1536913814323,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1053,"\n"]],[366,366],[1053,1053]]],[1536913814323,[null,[[1,366,"i"],[-1,366,"\n"],[1,1053,"\n"]],[1053,1053],[366,366]]],[1536913764095,["gjx16@GJXAIOU",[[-1,951,"```"]],[954,954],[951,951]]],[1536913776313,["gjx16@GJXAIOU",[[1,661,"dangz"]],[661,661],[666,666]]],[1536913778482,["gjx16@GJXAIOU",[[-1,661,"dangz"]],[666,666],[661,661]]],[1536913784586,["gjx16@GJXAIOU",[[1,661,"单主机电源"]],[661,661],[666,666]]],[1536913786700,["gjx16@GJXAIOU",[[-1,661,"单主机电源"]],[666,666],[661,661]]],[1536914234337,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1050,"\n"]],[366,366],[1050,1050]]],[1536914234337,[null,[[1,366,"i"],[-1,366,"\n"],[1,1050,"\n"]],[1050,1050],[366,366]]],[1536914177640,["gjx16@GJXAIOU",[[1,661,"当键鼠"]],[661,661],[664,664]]],[1536914178368,["gjx16@GJXAIOU",[[-1,662,"键鼠"]],[664,664],[662,662]]],[1536914181113,["gjx16@GJXAIOU",[[1,662,"函数在"]],[662,662],[665,665]]],[1536914182564,["gjx16@GJXAIOU",[[-1,662,"函数在"]],[665,665],[662,662]]],[1536914224193,["gjx16@GJXAIOU",[[1,662,"自定义的函数在main函数之后时候，前面要加函数声明"]],[662,662],[688,688]]],[1536914894345,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1077,"\n"]],[366,366],[1077,1077]]],[1536914894345,[null,[[1,366,"i"],[-1,366,"\n"],[1,1077,"\n"]],[1077,1077],[366,366]]],[1536914837744,["gjx16@GJXAIOU",[[-1,714,"int mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}"]],[714,854],[714,714]]],[1536914840776,["gjx16@GJXAIOU",[[1,839,"\n"]],[838,838],[839,839]]],[1536914840949,["gjx16@GJXAIOU",[[1,840,"\n"]],[839,839],[840,840]]],[1536914841063,["gjx16@GJXAIOU",[[1,841,"\n"]],[840,840],[841,841]]],[1536914841429,["gjx16@GJXAIOU",[[1,841,"int mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}"]],[841,841],[981,981]]],[1536914843087,["gjx16@GJXAIOU",[[1,982,"\n"]],[981,981],[982,982]]],[1536914843241,["gjx16@GJXAIOU",[[1,983,"\n"]],[982,982],[983,983]]],[1536914849740,["gjx16@GJXAIOU",[[1,714,"int mystrlen(char a[]) "]],[714,714],[737,737]]],[1536915734360,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1105,"\n"]],[366,366],[1105,1105]]],[1536915734360,[null,[[1,366,"i"],[-1,366,"\n"],[1,1105,"\n"]],[1105,1105],[366,366]]],[1536915679451,["gjx16@GJXAIOU",[[1,739,"\n"]],[738,738],[739,739]]],[1536915679571,["gjx16@GJXAIOU",[[1,740,"\n"]],[739,739],[740,740]]],[1536915683712,["gjx16@GJXAIOU",[[1,737,"  、、"]],[737,737],[741,741]]],[1536915684631,["gjx16@GJXAIOU",[[-1,739,"、、"]],[741,741],[739,739]]],[1536915689211,["gjx16@GJXAIOU",[[1,739,"//函数声明"]],[739,739],[745,745]]],[1536915693155,["gjx16@GJXAIOU",[[-1,868,"\n"]],[868,868],[867,867]]],[1536915693346,["gjx16@GJXAIOU",[[-1,867,"\n"]],[867,867],[866,866]]],[1536915696979,["gjx16@GJXAIOU",[[-1,1010,"\n"]],[1010,1010],[1009,1009]]],[1536917114387,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1112,"\n"]],[366,366],[1112,1112]]],[1536917114387,[null,[[1,366,"i"],[-1,366,"\n"],[1,1112,"\n"]],[1112,1112],[366,366]]],[1536917074303,["gjx16@GJXAIOU",[[1,1114,"****"]],[1114,1114],[1116,1116]]],[1536917088547,["gjx16@GJXAIOU",[[1,1116,"形参与实参传递"]],[1116,1116],[1123,1123]]],[1536917090465,["gjx16@GJXAIOU",[[1,1127,"\n"]],[1125,1125],[1126,1126]]],[1536917111955,["gjx16@GJXAIOU",[[1,1126,"C语言中实参到形参"]],[1126,1126],[1135,1135]]],[1536917174391,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1135,"\n"]],[366,366],[1135,1135]]],[1536917174391,[null,[[1,366,"i"],[-1,366,"\n"],[1,1135,"\n"]],[1135,1135],[366,366]]],[1536917118781,["gjx16@GJXAIOU",[[1,1135,"是“”"]],[1135,1135],[1138,1138]]],[1536917124471,["gjx16@GJXAIOU",[[1,1137,"值传递"]],[1137,1137],[1140,1140]]],[1536917127256,["gjx16@GJXAIOU",[[1,1141,"。"]],[1141,1141],[1142,1142]]],[1536917128370,["gjx16@GJXAIOU",[[-1,1141,"。"]],[1142,1142],[1141,1141]]],[1536917145663,["gjx16@GJXAIOU",[[1,1141,"，是一种单向传递，只能有"]],[1141,1141],[1153,1153]]],[1536917146680,["gjx16@GJXAIOU",[[-1,1152,"有"]],[1153,1153],[1152,1152]]],[1536917168689,["gjx16@GJXAIOU",[[1,1152,"由实参传递给形参，但是三含糊"]],[1152,1152],[1166,1166]]],[1536917170023,["gjx16@GJXAIOU",[[-1,1163,"三含糊"]],[1166,1166],[1163,1163]]],[1536917173317,["gjx16@GJXAIOU",[[1,1163,"当"]],[1163,1163],[1164,1164]]],[1536917234391,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1164,"\n"]],[366,366],[1164,1164]]],[1536917234391,[null,[[1,366,"i"],[-1,366,"\n"],[1,1164,"\n"]],[1164,1164],[366,366]]],[1536917204512,["gjx16@GJXAIOU",[[1,1164,"函数的参数为数组的时候，可以通过形参修改实参的值"]],[1164,1164],[1188,1188]]],[1536917205852,["gjx16@GJXAIOU",[[1,1190,"\n"]],[1188,1188],[1189,1189]]],[1536917206291,["gjx16@GJXAIOU",[[1,1191,"\n"]],[1189,1189],[1190,1190]]],[1536917654411,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1188,"\n"]],[366,366],[1188,1188]]],[1536917654411,[null,[[1,366,"i"],[-1,366,"\n"],[1,1188,"\n"]],[1188,1188],[366,366]]],[1536917622147,["gjx16@GJXAIOU",[[1,1192,"\n"]],[1189,1189],[1190,1190]]],[1536917622274,["gjx16@GJXAIOU",[[1,1193,"\n"]],[1190,1190],[1191,1191]]],[1536917622413,["gjx16@GJXAIOU",[[1,1194,"\n"]],[1191,1191],[1192,1192]]],[1536918074421,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1188,"\n"]],[366,366],[1188,1188]]],[1536918074421,[null,[[1,366,"i"],[-1,366,"\n"],[1,1188,"\n"]],[1188,1188],[366,366]]],[1536918030117,["gjx16@GJXAIOU",[[1,1192,"****"]],[1192,1192],[1194,1194]]],[1536918050575,["gjx16@GJXAIOU",[[1,1194,"实现strcpy功能的函数"]],[1194,1194],[1207,1207]]],[1536918053048,["gjx16@GJXAIOU",[[1,1212,"\n"]],[1209,1209],[1210,1210]]],[1536918053545,["gjx16@GJXAIOU",[[1,1213,"\n"]],[1210,1210],[1211,1211]]],[1536918056806,["gjx16@GJXAIOU",[[1,1211,"```"]],[1211,1211],[1214,1214]]],[1536918056833,["gjx16@GJXAIOU",[[1,1214,"language\n```\n"]],[1214,1214],[1214,1222]]],[1536918057969,["gjx16@GJXAIOU",[[-1,1214,"language"],[1,1222,"c"]],[1214,1222],[1215,1215]]],[1536918058372,["gjx16@GJXAIOU",[[1,1216,"\n"]],[1215,1215],[1216,1216]]],[1536918059123,["gjx16@GJXAIOU",[[1,1217,"\n"]],[1216,1216],[1217,1217]]],[1536918064493,["gjx16@GJXAIOU",[[1,1217,"#include<>"]],[1217,1217],[1227,1227]]],[1536918068419,["gjx16@GJXAIOU",[[1,1226,"stdio.h"]],[1226,1226],[1233,1233]]],[1536918070300,["gjx16@GJXAIOU",[[1,1235,"\n"]],[1234,1234],[1235,1235]]],[1536918134437,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1239,"\n"]],[366,366],[1239,1239]]],[1536918134437,[null,[[1,366,"i"],[-1,366,"\n"],[1,1239,"\n"]],[1239,1239],[366,366]]],[1536918079553,["gjx16@GJXAIOU",[[1,1236,"\n"]],[1235,1235],[1236,1236]]],[1536918084977,["gjx16@GJXAIOU",[[1,1236,"int main()"]],[1236,1236],[1246,1246]]],[1536918086835,["gjx16@GJXAIOU",[[1,1247,"\n"]],[1246,1246],[1247,1247]]],[1536918088370,["gjx16@GJXAIOU",[[1,1247,"{}"]],[1247,1247],[1249,1249]]],[1536918089430,["gjx16@GJXAIOU",[[1,1248,"\n"]],[1248,1248],[1249,1249]]],[1536918089622,["gjx16@GJXAIOU",[[1,1249,"\n"]],[1249,1249],[1250,1250]]],[1536918089799,["gjx16@GJXAIOU",[[1,1250,"\n"]],[1250,1250],[1251,1251]]],[1536918102223,["gjx16@GJXAIOU",[[1,1250,"printf ("]],[1250,1250],[1258,1258]]],[1536918102953,["gjx16@GJXAIOU",[[-1,1256," ("]],[1258,1258],[1256,1256]]],[1536918104898,["gjx16@GJXAIOU",[[1,1256,"();"]],[1256,1256],[1259,1259]]],[1536918108445,["gjx16@GJXAIOU",[[1,1257,"\"\""]],[1257,1257],[1259,1259]]],[1536918116171,["gjx16@GJXAIOU",[[1,1258,"%d\\n"]],[1258,1258],[1262,1262]]],[1536918125006,["gjx16@GJXAIOU",[[1,1263,",dt"]],[1263,1263],[1266,1266]]],[1536918126248,["gjx16@GJXAIOU",[[-1,1264,"dt"]],[1266,1266],[1264,1264]]],[1536918127868,["gjx16@GJXAIOU",[[1,1264,"str"]],[1264,1264],[1267,1267]]],[1536918131365,["gjx16@GJXAIOU",[[1,1270,"\n"]],[1269,1269],[1270,1270]]],[1536918134398,["gjx16@GJXAIOU",[[1,1270,"retu"]],[1270,1270],[1274,1274]]],[1536918194435,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1280,"\n"]],[366,366],[1280,1280]]],[1536918194435,[null,[[1,366,"i"],[-1,366,"\n"],[1,1280,"\n"]],[1280,1280],[366,366]]],[1536918137299,["gjx16@GJXAIOU",[[1,1274,"rn 0;"]],[1274,1274],[1279,1279]]],[1536918254440,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1285,"\n"]],[366,366],[1285,1285]]],[1536918254440,[null,[[1,366,"i"],[-1,366,"\n"],[1,1285,"\n"]],[1285,1285],[366,366]]],[1536918254214,["gjx16@GJXAIOU",[[1,1249,"char str1["]],[1249,1249],[1259,1259]]],[1536918314450,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1295,"\n"]],[366,366],[1295,1295]]],[1536918314450,[null,[[1,366,"i"],[-1,366,"\n"],[1,1295,"\n"]],[1295,1295],[366,366]]],[1536918260147,["gjx16@GJXAIOU",[[1,1259,"] = \"\";"]],[1259,1259],[1266,1266]]],[1536918264858,["gjx16@GJXAIOU",[[1,1264,"hello"]],[1264,1264],[1269,1269]]],[1536918267822,["gjx16@GJXAIOU",[[1,1272,"\n"]],[1271,1271],[1272,1272]]],[1536918280712,["gjx16@GJXAIOU",[[1,1272,"char str2[] = \"\";"]],[1272,1272],[1289,1289]]],[1536918285272,["gjx16@GJXAIOU",[[1,1287,"world"]],[1287,1287],[1292,1292]]],[1536918288017,["gjx16@GJXAIOU",[[1,1295,"\n"]],[1294,1294],[1295,1295]]],[1536918295403,["gjx16@GJXAIOU",[[1,1249,"\n"]],[1249,1249],[1250,1250]]],[1536918304737,["gjx16@GJXAIOU",[[1,1296,"str"]],[1296,1296],[1299,1299]]],[1536918306111,["gjx16@GJXAIOU",[[-1,1296,"str"]],[1299,1299],[1296,1296]]],[1536918313046,["gjx16@GJXAIOU",[[1,1296,"char str []"]],[1296,1296],[1307,1307]]],[1536918374453,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1343,"\n"]],[366,366],[1343,1343]]],[1536918374453,[null,[[1,366,"i"],[-1,366,"\n"],[1,1343,"\n"]],[1343,1343],[366,366]]],[1536918318416,["gjx16@GJXAIOU",[[-1,1304," []"]],[1307,1307],[1304,1304]]],[1536918321063,["gjx16@GJXAIOU",[[1,1304,"[];"]],[1304,1304],[1307,1307]]],[1536918321695,["gjx16@GJXAIOU",[[1,1308,"\n"]],[1307,1307],[1308,1308]]],[1536918348538,["gjx16@GJXAIOU",[[1,1308,"str = mystrcpy();"]],[1308,1308],[1325,1325]]],[1536918354490,["gjx16@GJXAIOU",[[1,1323,"str1 "]],[1323,1323],[1328,1328]]],[1536918355443,["gjx16@GJXAIOU",[[-1,1327," "]],[1328,1328],[1327,1327]]],[1536918360725,["gjx16@GJXAIOU",[[1,1327,",str2"]],[1327,1327],[1332,1332]]],[1536918365448,["gjx16@GJXAIOU",[[1,1236,"\n"]],[1235,1235],[1236,1236]]],[1536918370259,["gjx16@GJXAIOU",[[1,1236,"void"]],[1236,1236],[1240,1240]]],[1536918434453,[null,[[-1,366,"i"],[1,367,"\n"],[-1,1375,"\n"]],[366,366],[1375,1375]]],[1536918434453,[null,[[1,366,"i"],[-1,366,"\n"],[1,1375,"\n"]],[1375,1375],[366,366]]],[1536918376881,["gjx16@GJXAIOU",[[-1,1236,"void"]],[1240,1240],[1236,1236]]],[1536918376926,["gjx16@GJXAIOU",[[-1,1236,"\n"]],[1236,1236],[1235,1235]]],[1536918379031,["gjx16@GJXAIOU",[[1,1235,"char"]],[1235,1235],[1239,1239]]],[1536918381007,["gjx16@GJXAIOU",[[-1,1235,"char"]],[1239,1239],[1235,1235]]],[1536918381719,["gjx16@GJXAIOU",[[1,1236,"\n"]],[1235,1235],[1236,1236]]],[1536918383539,["gjx16@GJXAIOU",[[1,1236,"char"]],[1236,1236],[1240,1240]]]],null,"gjx16@GJXAIOU"],["8ccad3e3-85c8-4b9c-860a-6656613d576f",1536974340797,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar\nint main()\n{\n\nchar str1[] = \"hello\";\nchar str2[] = \"world\";\nchar str[];\nstr = mystrcpy(str1,str2);\nprintf(\"%d\\n\",str);\nreturn 0;\n}\n```\n\n\n\n",[[1536974308776,["gjx16@GJXAIOU",[[1,1240," "]],[1240,1240],[1241,1241]]],[1536974315843,["gjx16@GJXAIOU",[[-1,1236,"char "]],[1241,1241],[1236,1236]]],[1536974338689,["gjx16@GJXAIOU",[[1,1236,"char mystrcpy"]],[1236,1236],[1249,1249]]],[1536974341471,["gjx16@GJXAIOU",[[1,1249,"()"]],[1249,1249],[1251,1251]]],[1536974345657,["gjx16@GJXAIOU",[[1,1250,"chae"]],[1250,1250],[1254,1254]]],[1536974346535,["gjx16@GJXAIOU",[[-1,1253,"e"]],[1254,1254],[1253,1253]]],[1536974352320,["gjx16@GJXAIOU",[[1,1253,"r a[["]],[1253,1253],[1258,1258]]],[1536974353339,["gjx16@GJXAIOU",[[-1,1257,"["]],[1258,1258],[1257,1257]]],[1536974354933,["gjx16@GJXAIOU",[[1,1257,"] "]],[1257,1257],[1259,1259]]],[1536974355912,["gjx16@GJXAIOU",[[-1,1258," "]],[1259,1259],[1258,1258]]],[1536974356780,["gjx16@GJXAIOU",[[1,1258,"l"]],[1258,1258],[1259,1259]]],[1536974357607,["gjx16@GJXAIOU",[[-1,1258,"l"]],[1259,1259],[1258,1258]]],[1536974359798,["gjx16@GJXAIOU",[[1,1258,","]],[1258,1258],[1259,1259]]],[1536977665941,["gjx16@GJXAIOU",[[1,1259," char b[]"]],[1259,1259],[1268,1268]]],[1536977668246,["gjx16@GJXAIOU",[[1,1270,"\n"]],[1269,1269],[1270,1270]]],[1536977687861,["gjx16@GJXAIOU",[[1,1402,"\n"]],[1401,1401],[1402,1402]]],[1536977688918,["gjx16@GJXAIOU",[[1,1403,"\n"]],[1402,1402],[1403,1403]]],[1536977689148,["gjx16@GJXAIOU",[[1,1404,"\n"]],[1403,1403],[1404,1404]]],[1536977690186,["gjx16@GJXAIOU",[[1,1404,"f"]],[1404,1404],[1405,1405]]],[1536977691129,["gjx16@GJXAIOU",[[-1,1404,"f"]],[1405,1405],[1404,1404]]],[1536977703468,["gjx16@GJXAIOU",[[1,1404,"char mystrcpy()"]],[1404,1404],[1419,1419]]],[1536977723072,["gjx16@GJXAIOU",[[1,1418,"char a[],char b[]"]],[1418,1418],[1435,1435]]],[1536977725456,["gjx16@GJXAIOU",[[1,1437,"\n"]],[1436,1436],[1437,1437]]],[1536977728165,["gjx16@GJXAIOU",[[1,1437,"{}"]],[1437,1437],[1439,1439]]],[1536977729226,["gjx16@GJXAIOU",[[1,1438,"\n"]],[1438,1438],[1439,1439]]],[1536977729416,["gjx16@GJXAIOU",[[1,1439,"\n"]],[1439,1439],[1440,1440]]],[1536977729576,["gjx16@GJXAIOU",[[1,1440,"\n"]],[1440,1440],[1441,1441]]],[1536977732415,["gjx16@GJXAIOU",[[1,1439,"  "]],[1439,1439],[1441,1441]]],[1536977756899,["gjx16@GJXAIOU",[[1,1445,"\n"]],[1444,1444],[1445,1445]]],[1536977757113,["gjx16@GJXAIOU",[[1,1446,"\n"]],[1445,1445],[1446,1446]]],[1536977757544,["gjx16@GJXAIOU",[[1,1447,"\n"]],[1446,1446],[1447,1447]]],[1536977776714,["gjx16@GJXAIOU",[[1,1447,"void mystrlen()"]],[1447,1447],[1462,1462]]],[1536977792895,["gjx16@GJXAIOU",[[1,1461,"c[]"]],[1461,1461],[1464,1464]]],[1536977797401,["gjx16@GJXAIOU",[[1,1462,"c"]],[1461,1461],[1462,1462]]],[1536977798245,["gjx16@GJXAIOU",[[1,1462,"har "]],[1462,1462],[1466,1466]]],[1536977801006,["gjx16@GJXAIOU",[[1,1471,"\n"]],[1470,1470],[1471,1471]]],[1536977804150,["gjx16@GJXAIOU",[[1,1471,"{}"]],[1471,1471],[1473,1473]]],[1536977805140,["gjx16@GJXAIOU",[[1,1472,"\n"]],[1472,1472],[1473,1473]]],[1536977805293,["gjx16@GJXAIOU",[[1,1473,"\n"]],[1473,1473],[1474,1474]]],[1536977810924,["gjx16@GJXAIOU",[[1,1473,"  char "]],[1473,1473],[1480,1480]]],[1536977845113,["gjx16@GJXAIOU",[[-1,1475,"char "]],[1480,1480],[1475,1475]]],[1536977848402,["gjx16@GJXAIOU",[[1,1475,"whiel"]],[1475,1475],[1480,1480]]],[1536977849656,["gjx16@GJXAIOU",[[-1,1477,"iel"]],[1480,1480],[1477,1477]]],[1536977852274,["gjx16@GJXAIOU",[[1,1477,"ile()"]],[1477,1477],[1482,1482]]],[1536977858677,["gjx16@GJXAIOU",[[1,1481,"char c{"]],[1481,1481],[1488,1488]]],[1536977859653,["gjx16@GJXAIOU",[[-1,1487,"{"]],[1488,1488],[1487,1487]]],[1536977864282,["gjx16@GJXAIOU",[[1,1487,"[len++]"]],[1487,1487],[1494,1494]]],[1536977866627,["gjx16@GJXAIOU",[[1,1473,"\n"]],[1472,1472],[1473,1473]]],[1536977878402,["gjx16@GJXAIOU",[[1,1473,"  int len = 0;"]],[1473,1473],[1487,1487]]],[1536977882575,["gjx16@GJXAIOU",[[1,1510,";"]],[1510,1510],[1511,1511]]],[1536977882956,["gjx16@GJXAIOU",[[1,1512,"  \n"]],[1511,1511],[1514,1514]]],[1536977884417,["gjx16@GJXAIOU",[[1,1514,";en"]],[1514,1514],[1517,1517]]],[1536977885852,["gjx16@GJXAIOU",[[-1,1514,";en"]],[1517,1517],[1514,1514]]],[1536977889031,["gjx16@GJXAIOU",[[1,1514,"len - "]],[1514,1514],[1520,1520]]],[1536977889840,["gjx16@GJXAIOU",[[-1,1519," "]],[1520,1520],[1519,1519]]],[1536977891043,["gjx16@GJXAIOU",[[1,1519,"-;"]],[1519,1519],[1521,1521]]],[1536978015641,["gjx16@GJXAIOU",[[-1,1447,"void"]],[1451,1451],[1447,1447]]],[1536978015671,["gjx16@GJXAIOU",[[-1,1446,"\n"]],[1447,1447],[1446,1446]]],[1536978017407,["gjx16@GJXAIOU",[[1,1446,"int"]],[1446,1446],[1449,1449]]],[1536978022107,["gjx16@GJXAIOU",[[1,1520,"  \n"]],[1519,1519],[1522,1522]]],[1536978022140,["gjx16@GJXAIOU",[[-1,1520,"  "],[1,1522,"\n"]],[1522,1522],[1521,1521]]],[1536978027116,["gjx16@GJXAIOU",[[1,1521,"  retunrn"]],[1521,1521],[1530,1530]]],[1536978029031,["gjx16@GJXAIOU",[[-1,1527,"nrn"]],[1530,1530],[1527,1527]]],[1536978033035,["gjx16@GJXAIOU",[[1,1527,"rn len;"]],[1527,1527],[1534,1534]]],[1536978047622,["gjx16@GJXAIOU",[[1,1270,"int mystr"]],[1270,1270],[1279,1279]]],[1536978053183,["gjx16@GJXAIOU",[[1,1279,"len()"]],[1279,1279],[1284,1284]]],[1536978059207,["gjx16@GJXAIOU",[[1,1283,"char c[]"]],[1283,1283],[1291,1291]]],[1536978061189,["gjx16@GJXAIOU",[[1,1293,"\n"]],[1292,1292],[1293,1293]]],[1536978061791,["gjx16@GJXAIOU",[[1,1294,"\n"]],[1293,1293],[1294,1294]]],[1536978065400,["gjx16@GJXAIOU",[[-1,1308,"\n"]],[1308,1308],[1307,1307]]],[1536978065420,["gjx16@GJXAIOU",[[-1,1306,"{"]],[1307,1307],[1306,1306]]],[1536978067789,["gjx16@GJXAIOU",[[1,1306,"{"]],[1306,1306],[1307,1307]]],[1536978071060,["gjx16@GJXAIOU",[[1,1295,"\n"]],[1294,1294],[1295,1295]]],[1536978120411,["gjx16@GJXAIOU",[[1,1465,"in"]],[1465,1465],[1467,1467]]],[1536978120801,["gjx16@GJXAIOU",[[-1,1466,"n"]],[1467,1467],[1466,1466]]],[1536978124750,["gjx16@GJXAIOU",[[1,1466,"nt len 1"]],[1466,1466],[1474,1474]]],[1536978126421,["gjx16@GJXAIOU",[[-1,1472," 1"]],[1474,1474],[1472,1472]]],[1536978142855,["gjx16@GJXAIOU",[[1,1472,"1 = mystrlen();"]],[1472,1472],[1487,1487]]],[1536978148593,["gjx16@GJXAIOU",[[1,1485,"str1"]],[1485,1485],[1489,1489]]],[1536978150708,["gjx16@GJXAIOU",[[1,1492,"  \n"]],[1491,1491],[1494,1494]]],[1536978153673,["gjx16@GJXAIOU",[[1,1494,"int len "]],[1494,1494],[1502,1502]]],[1536978154607,["gjx16@GJXAIOU",[[-1,1501," "]],[1502,1502],[1501,1501]]],[1536978162490,["gjx16@GJXAIOU",[[1,1501,"2 = mystrlen()"]],[1501,1501],[1515,1515]]],[1536978165284,["gjx16@GJXAIOU",[[1,1514,"str2"]],[1514,1514],[1518,1518]]],[1536978167888,["gjx16@GJXAIOU",[[1,1519,";"]],[1519,1519],[1520,1520]]],[1536978169198,["gjx16@GJXAIOU",[[1,1521,"  \n"]],[1520,1520],[1523,1523]]],[1536978180773,["gjx16@GJXAIOU",[[-1,1602,"\n"]],[1602,1602],[1601,1601]]],[1536978575633,["gjx16@GJXAIOU",[[1,1523,"for"]],[1523,1523],[1526,1526]]],[1536978577658,["gjx16@GJXAIOU",[[-1,1523,"for"]],[1526,1526],[1523,1523]]],[1536978578789,["gjx16@GJXAIOU",[[-1,1521,"  "],[1,1523,"\n"]],[1523,1523],[1522,1522]]],[1536978581120,["gjx16@GJXAIOU",[[1,1522,"for()"]],[1522,1522],[1527,1527]]],[1536978587072,["gjx16@GJXAIOU",[[1,1521,"  int i "]],[1521,1521],[1529,1529]]],[1536978590846,["gjx16@GJXAIOU",[[1,1529,"= 0;"]],[1529,1529],[1533,1533]]],[1536978626030,["gjx16@GJXAIOU",[[1,1538,"i = 1; i<"]],[1538,1538],[1547,1547]]],[1536978627207,["gjx16@GJXAIOU",[[-1,1546,"<"]],[1547,1547],[1546,1546]]],[1536978629767,["gjx16@GJXAIOU",[[1,1546," < "]],[1546,1546],[1549,1549]]],[1536978671534,["gjx16@GJXAIOU",[[1,1549,"len2+"]],[1549,1549],[1554,1554]]],[1536978672645,["gjx16@GJXAIOU",[[-1,1553,"+"]],[1554,1554],[1553,1553]]],[1536978678939,["gjx16@GJXAIOU",[[1,1553," + 1; i++"]],[1553,1553],[1562,1562]]],[1536978680827,["gjx16@GJXAIOU",[[1,1565,"\n"]],[1563,1563],[1564,1564]]],[1536978681577,["gjx16@GJXAIOU",[[1,1566,"\n"]],[1564,1564],[1565,1565]]],[1536978682976,["gjx16@GJXAIOU",[[-1,1566,"\n"]],[1565,1565],[1564,1564]]],[1536978686209,["gjx16@GJXAIOU",[[1,1564,"  {}"]],[1564,1564],[1568,1568]]],[1536978687685,["gjx16@GJXAIOU",[[1,1567,"\n  \n  "]],[1567,1567],[1573,1573]]],[1536978693280,["gjx16@GJXAIOU",[[1,1570,"  len"]],[1570,1570],[1575,1575]]],[1536978694307,["gjx16@GJXAIOU",[[-1,1572,"len"]],[1575,1575],[1572,1572]]],[1536978699564,["gjx16@GJXAIOU",[[1,1572,"a["]],[1572,1572],[1574,1574]]],[1536978708143,["gjx16@GJXAIOU",[[1,1534,"  \n"]],[1533,1533],[1536,1536]]],[1536978715268,["gjx16@GJXAIOU",[[1,1536,"int j;"]],[1536,1536],[1542,1542]]],[1536978735980,["gjx16@GJXAIOU",[[1,1583,"len1 + i}"]],[1583,1583],[1592,1592]]],[1536978737046,["gjx16@GJXAIOU",[[-1,1591,"}"]],[1592,1592],[1591,1591]]],[1536978767933,["gjx16@GJXAIOU",[[1,1591,"] = b[i-1]"]],[1591,1591],[1601,1601]]],[1536978768545,["gjx16@GJXAIOU",[[1,1601,";"]],[1601,1601],[1602,1602]]],[1536978772448,["gjx16@GJXAIOU",[[1,1605,"  \n  "]],[1602,1602],[1607,1607]]],[1536978786160,["gjx16@GJXAIOU",[[1,1612,"  return a;"]],[1612,1612],[1623,1623]]],[1536978795495,["gjx16@GJXAIOU",[[-1,1408,"str"]],[1411,1411],[1408,1408]]],[1536978795769,["gjx16@GJXAIOU",[[1,1408,"a"]],[1408,1408],[1409,1409]]]],null,"gjx16@GJXAIOU"],["5df5115e-31a6-46ac-9255-3625a5aa5211",1536995090533,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar mystrcpy(char a[], char b[])\nint mystrlen(char c[])\n\n\n\nint main()\n{\nchar str1[] = \"hello\";\nchar str2[] = \"world\";\nchar str[];\nstr = mystrcpy(str1,str2);\nprintf(\"%d\\n\",a);\nreturn 0;\n}\n\n\nchar mystrcpy(char a[],char b[])\n{\n  int len1 = mystrlen(str1);\n  int len2 = mystrlen(str2);\n  int i = 0;\n  int j;\nfor(i = 1; i < len2 + 1; i++)\n  {\n    a[len1 + i] = b[i-1];\n    \n  }\n  return a;\n}\n\nint mystrlen(char c[])\n{\n  int len = 0;\n  while(char c[len++]);\n  len --;\n  return len;\n}\n```\n\n\n\n",[[1536995084560,["gjx16@GJXAIOU",[[1,1241," "],[-1,1247,"py"],[1,1249,"at"],[1,1255," "],[1,1259," "],[1,1265," "],[1,1269,"\n"],[1,1274," "],[1,1288," "],[-1,1294,"\n\n"],[1,1299," "],[1,1307,"\n"],[1,1308,"\n"],[1,1314," "],[1,1320," "],[1,1323," "],[1,1329,"  "],[1,1332,"\n"],[1,1336," "],[1,1344," "],[1,1345," "],[-1,1355,"char str[];"],[-1,1367,"str = "],[-1,1379,"py"],[1,1381,"at"],[1,1394,"\n"],[-1,1403,"d"],[1,1404,"s"],[-1,1408,"a"],[1,1409,"str1"],[1,1411,"\n"],[1,1418," "],[1,1422,"\n"],[-1,1425,"\nchar"],[1,1430,"void "],[1,1444," "],[1,1454," "],[1,1458,"\n"],[1,1461,"\n"],[1,1466," "],[1,1471," "],[1,1474," "],[1,1489,"\n"],[1,1496," "],[1,1501," "],[1,1502," "],[1,1518,"\n"],[1,1525," "],[1,1526," "],[1,1528," "],[-1,1532,"  int j;"],[1,1547," "],[1,1548," "],[1,1551," "],[1,1554," "],[1,1555," "],[1,1561," "],[1,1562," "],[1,1566," "],[1,1570,"\n"],[-1,1575,"  "],[1,1577,"\n"],[1,1586," "],[1,1587," "],[1,1590," "],[1,1593," "],[-1,1601,"    "],[-1,1610,"  return a;"],[1,1628," "],[1,1643," "],[1,1648,"\n"],[1,1649,"\n"],[1,1656," "],[1,1659," "],[1,1662," "],[1,1664,"\n"],[-1,1674,"har c"],[1,1688,"\n"],[1,1695," "],[1,1698,"\n"],[1,1708," "],[1,1712,"\n"]],[1217,1714],[1733,1733]]],[1536995092404,["gjx16@GJXAIOU",[[1,1741,"\n"]],[1737,1737],[1738,1738]]],[1536995092588,["gjx16@GJXAIOU",[[1,1742,"\n"]],[1738,1738],[1739,1739]]],[1536996427951,["gjx16@GJXAIOU",[[1,1743,"\n"]],[1738,1738],[1739,1739]]],[1536996429167,["gjx16@GJXAIOU",[[1,1739,"****"]],[1739,1739],[1741,1741]]],[1536996431833,["gjx16@GJXAIOU",[[1,1741,"随机苏"]],[1741,1741],[1744,1744]]],[1536996432591,["gjx16@GJXAIOU",[[-1,1743,"苏"]],[1744,1744],[1743,1743]]],[1536996434073,["gjx16@GJXAIOU",[[1,1743,"数"]],[1743,1743],[1744,1744]]],[1536996436056,["gjx16@GJXAIOU",[[1,1751,"\n"]],[1746,1746],[1747,1747]]],[1536996475770,["gjx16@GJXAIOU",[[1,1744,"产生函数"]],[1744,1744],[1748,1748]]],[1536996487521,["gjx16@GJXAIOU",[[1,1748,"rand和srand"]],[1748,1748],[1758,1758]]],[1536996490778,["gjx16@GJXAIOU",[[1,1766,"\n"]],[1760,1760],[1761,1761]]],[1536996490954,["gjx16@GJXAIOU",[[1,1767,"\n"]],[1761,1761],[1762,1762]]],[1536996495137,["gjx16@GJXAIOU",[[1,1762,"```"]],[1762,1762],[1765,1765]]],[1536996495164,["gjx16@GJXAIOU",[[1,1765,"language\n```\n"]],[1765,1765],[1765,1773]]],[1536996496278,["gjx16@GJXAIOU",[[-1,1765,"language"],[1,1773,"c"]],[1765,1773],[1766,1766]]],[1536996496489,["gjx16@GJXAIOU",[[1,1767,"\n"]],[1766,1766],[1767,1767]]],[1536996498247,["gjx16@GJXAIOU",[[1,1768,"\n"]],[1767,1767],[1768,1768]]],[1536996507836,["gjx16@GJXAIOU",[[1,1767,"3include"]],[1767,1767],[1775,1775]]],[1536996509745,["gjx16@GJXAIOU",[[-1,1767,"3include"]],[1775,1775],[1767,1767]]],[1536996516861,["gjx16@GJXAIOU",[[1,1767,"#include<>s"]],[1767,1767],[1778,1778]]],[1536996517471,["gjx16@GJXAIOU",[[-1,1777,"s"]],[1778,1778],[1777,1777]]],[1536996520857,["gjx16@GJXAIOU",[[1,1776,"dtdio"]],[1776,1776],[1781,1781]]],[1536996522076,["gjx16@GJXAIOU",[[-1,1776,"dtdio"]],[1781,1781],[1776,1776]]],[1536996526339,["gjx16@GJXAIOU",[[1,1776,"stdio.h"]],[1776,1776],[1783,1783]]],[1536996528544,["gjx16@GJXAIOU",[[1,1786,"\n"]],[1784,1784],[1785,1785]]],[1536996529012,["gjx16@GJXAIOU",[[1,1787,"\n"]],[1785,1785],[1786,1786]]],[1536996681904,["gjx16@GJXAIOU",[[1,1761,"rang"]],[1761,1761],[1765,1765]]],[1536996682383,["gjx16@GJXAIOU",[[-1,1764,"g"]],[1765,1765],[1764,1764]]],[1536996717474,["gjx16@GJXAIOU",[[1,1764,"d 是伪随机数产生器，每次调用rand产生的"]],[1764,1764],[1786,1786]]],[1536996725830,["gjx16@GJXAIOU",[[1,1786,"随机数是恒定的，"]],[1786,1786],[1794,1794]]],[1536997287820,["gjx16@GJXAIOU",[[-1,1790,"恒定"]],[1792,1792],[1790,1790]]],[1536997291187,["gjx16@GJXAIOU",[[1,1790,"一样"]],[1790,1790],[1792,1792]]],[1536997297554,["gjx16@GJXAIOU",[[-1,1793,"，"]],[1794,1794],[1793,1793]]],[1536997298153,["gjx16@GJXAIOU",[[1,1793,"；"]],[1793,1793],[1794,1794]]],[1536997298609,["gjx16@GJXAIOU",[[1,1795,"\n"]],[1794,1794],[1795,1795]]],[1536997316978,["gjx16@GJXAIOU",[[1,1795,"如果在调用rand之前先调用srand"]],[1795,1795],[1814,1814]]],[1536997334977,["gjx16@GJXAIOU",[[1,1814,"就出现任意的随机数，二"]],[1814,1814],[1825,1825]]],[1536997335807,["gjx16@GJXAIOU",[[-1,1824,"二"]],[1825,1825],[1824,1824]]],[1536997342548,["gjx16@GJXAIOU",[[1,1824,"而自哟啊"]],[1824,1824],[1828,1828]]],[1536997343421,["gjx16@GJXAIOU",[[-1,1826,"哟啊"]],[1828,1828],[1826,1826]]],[1536997356812,["gjx16@GJXAIOU",[[1,1826,"要保证每次调用srang"]],[1826,1826],[1838,1838]]],[1536997358032,["gjx16@GJXAIOU",[[-1,1837,"g"]],[1838,1838],[1837,1837]]],[1536997358400,["gjx16@GJXAIOU",[[1,1837,"f"]],[1837,1837],[1838,1838]]],[1536997358931,["gjx16@GJXAIOU",[[-1,1837,"f"]],[1838,1838],[1837,1837]]],[1536997375841,["gjx16@GJXAIOU",[[1,1837,"d函数的时候，参数的值是不同的，"]],[1837,1837],[1853,1853]]],[1536997407958,["gjx16@GJXAIOU",[[1,1853,"那么rand函数就一定会产生不同的随机数"]],[1853,1853],[1873,1873]]],[1536997410403,["gjx16@GJXAIOU",[[1,1874,"\n"]],[1873,1873],[1874,1874]]],[1536997410915,["gjx16@GJXAIOU",[[1,1875,"\n"]],[1874,1874],[1875,1875]]],[1536997423888,["gjx16@GJXAIOU",[[1,1875,"- 仅有 rand 的时候"]],[1875,1875],[1888,1888]]],[1536997434626,["gjx16@GJXAIOU",[[1,1915,"\n"]],[1912,1912],[1913,1913]]],[1536997438045,["gjx16@GJXAIOU",[[1,1913,"intm"]],[1913,1913],[1917,1917]]],[1536997439055,["gjx16@GJXAIOU",[[-1,1916,"m"]],[1917,1917],[1916,1916]]],[1536997441422,["gjx16@GJXAIOU",[[1,1916," main()"]],[1916,1916],[1923,1923]]],[1536997442212,["gjx16@GJXAIOU",[[1,1926,"\n"]],[1923,1923],[1924,1924]]],[1536997443317,["gjx16@GJXAIOU",[[1,1924,"{}"]],[1924,1924],[1926,1926]]],[1536997444468,["gjx16@GJXAIOU",[[1,1925,"\n"]],[1925,1925],[1926,1926]]],[1536997444650,["gjx16@GJXAIOU",[[1,1926,"\n"]],[1926,1926],[1927,1927]]],[1536997444803,["gjx16@GJXAIOU",[[1,1927,"\n"]],[1927,1927],[1928,1928]]],[1536997445000,["gjx16@GJXAIOU",[[1,1928,"\n"]],[1928,1928],[1929,1929]]],[1536997461429,["gjx16@GJXAIOU",[[1,1927,"  int i = 0;"]],[1927,1927],[1939,1939]]],[1536997462102,["gjx16@GJXAIOU",[[1,1940,"  \n"]],[1939,1939],[1942,1942]]],[1536997470246,["gjx16@GJXAIOU",[[1,1942,"i = rang"]],[1942,1942],[1950,1950]]],[1536997474568,["gjx16@GJXAIOU",[[-1,1942,"i = rang"]],[1950,1950],[1942,1942]]],[1536997477464,["gjx16@GJXAIOU",[[1,1942,"for()"]],[1942,1942],[1947,1947]]],[1536997481893,["gjx16@GJXAIOU",[[1,1946,"i= "]],[1946,1946],[1949,1949]]],[1536997483150,["gjx16@GJXAIOU",[[-1,1947,"= "]],[1949,1949],[1947,1947]]],[1536997489528,["gjx16@GJXAIOU",[[1,1947," = 0; i<"]],[1947,1947],[1955,1955]]],[1536997490411,["gjx16@GJXAIOU",[[-1,1954,"<"]],[1955,1955],[1954,1954]]],[1536997498057,["gjx16@GJXAIOU",[[1,1954," < 10; i++"]],[1954,1954],[1964,1964]]],[1536997499809,["gjx16@GJXAIOU",[[1,1966,"  \n"]],[1965,1965],[1968,1968]]],[1536997501422,["gjx16@GJXAIOU",[[1,1968,"{}"]],[1968,1968],[1970,1970]]],[1536997503706,["gjx16@GJXAIOU",[[1,1969,"\n  \n  \n  "]],[1969,1969],[1978,1978]]],[1536997515809,["gjx16@GJXAIOU",[[1,1972,"  int vale"]],[1972,1972],[1982,1982]]],[1536997516457,["gjx16@GJXAIOU",[[-1,1981,"e"]],[1982,1982],[1981,1981]]],[1536997524383,["gjx16@GJXAIOU",[[1,1981,"ue = rang"]],[1981,1981],[1990,1990]]],[1536997525045,["gjx16@GJXAIOU",[[-1,1989,"g"]],[1990,1990],[1989,1989]]],[1536997530716,["gjx16@GJXAIOU",[[1,1989,"d90"]],[1989,1989],[1992,1992]]],[1536997532375,["gjx16@GJXAIOU",[[-1,1990,"90"]],[1992,1992],[1990,1990]]],[1536997539763,["gjx16@GJXAIOU",[[1,1990,"();"]],[1990,1990],[1993,1993]]],[1536997540510,["gjx16@GJXAIOU",[[1,1996,"  \n  "]],[1993,1993],[1998,1998]]],[1536997544988,["gjx16@GJXAIOU",[[1,1998,"printf();"]],[1998,1998],[2007,2007]]],[1536997547686,["gjx16@GJXAIOU",[[1,2005,"\"\""]],[2005,2005],[2007,2007]]],[1536997553767,["gjx16@GJXAIOU",[[1,2006,"%d\\n"]],[2006,2006],[2010,2010]]],[1536997558260,["gjx16@GJXAIOU",[[1,2011,"."]],[2011,2011],[2012,2012]]],[1536997559262,["gjx16@GJXAIOU",[[-1,2011,"."]],[2012,2012],[2011,2011]]],[1536997567994,["gjx16@GJXAIOU",[[1,2011,",value"]],[2011,2011],[2017,2017]]],[1536997581198,["gjx16@GJXAIOU",[[1,2027,"  return 0;"]],[2027,2027],[2038,2038]]],[1536997652637,["gjx16@GJXAIOU",[[1,2053,"\n"]],[2047,2047],[2048,2048]]],[1536997655603,["gjx16@GJXAIOU",[[1,2048,"- tongshi"]],[2048,2048],[2057,2057]]],[1536997657681,["gjx16@GJXAIOU",[[-1,2050,"tongshi"]],[2057,2057],[2050,2050]]],[1536997664901,["gjx16@GJXAIOU",[[1,2050,"同时使用·"]],[2050,2050],[2055,2055]]],[1536997665907,["gjx16@GJXAIOU",[[-1,2054,"·"]],[2055,2055],[2054,2054]]],[1536997668773,["gjx16@GJXAIOU",[[1,2054,"‘"]],[2054,2054],[2055,2055]]],[1536997670103,["gjx16@GJXAIOU",[[-1,2054,"‘"]],[2055,2055],[2054,2054]]],[1536997671672,["gjx16@GJXAIOU",[[1,2054,"~"]],[2054,2054],[2055,2055]]],[1536997672628,["gjx16@GJXAIOU",[[-1,2054,"~"]],[2055,2055],[2054,2054]]],[1536997674362,["gjx16@GJXAIOU",[[1,2054,"~"]],[2054,2054],[2055,2055]]],[1536997675245,["gjx16@GJXAIOU",[[-1,2054,"~"]],[2055,2055],[2054,2054]]],[1536997675651,["gjx16@GJXAIOU",[[1,2054,"f"]],[2054,2054],[2055,2055]]],[1536997676544,["gjx16@GJXAIOU",[[-1,2054,"f"]],[2055,2055],[2054,2054]]],[1536997677815,["gjx16@GJXAIOU",[[1,2054,"'"]],[2054,2054],[2055,2055]]],[1536997677842,["gjx16@GJXAIOU",[[-1,2054,"'"],[1,2055,"‘"]],[2055,2055],[2055,2055]]],[1536997680621,["gjx16@GJXAIOU",[[1,2055,"rand'"]],[2055,2055],[2060,2060]]],[1536997680647,["gjx16@GJXAIOU",[[-1,2059,"'"],[1,2060,"’"]],[2060,2060],[2060,2060]]],[1536997683742,["gjx16@GJXAIOU",[[-1,2054,"‘rand’"]],[2060,2060],[2054,2054]]],[1536997690202,["gjx16@GJXAIOU",[[1,2054,"`rand`he"]],[2054,2054],[2062,2062]]],[1536997691242,["gjx16@GJXAIOU",[[-1,2060,"he"]],[2062,2062],[2060,2060]]],[1536997694415,["gjx16@GJXAIOU",[[1,2060,"和~"]],[2060,2060],[2062,2062]]],[1536997695322,["gjx16@GJXAIOU",[[-1,2061,"~"]],[2062,2062],[2061,2061]]],[1536997699324,["gjx16@GJXAIOU",[[1,2061,"`sran"]],[2061,2061],[2066,2066]]],[1536997700347,["gjx16@GJXAIOU",[[-1,2065,"n"]],[2066,2066],[2065,2065]]],[1536997701837,["gjx16@GJXAIOU",[[1,2065,"nf"]],[2065,2065],[2067,2067]]],[1536997702460,["gjx16@GJXAIOU",[[-1,2066,"f"]],[2067,2067],[2066,2066]]],[1536997702629,["gjx16@GJXAIOU",[[1,2066,"d"]],[2066,2066],[2067,2067]]],[1536997711635,["gjx16@GJXAIOU",[[1,2067,"`的时候"]],[2067,2067],[2071,2071]]],[1536997712310,["gjx16@GJXAIOU",[[1,2072,"- \n"]],[2071,2071],[2074,2074]]],[1536997713824,["gjx16@GJXAIOU",[[-1,2072,"- "]],[2074,2074],[2072,2072]]],[1536997714792,["gjx16@GJXAIOU",[[1,2078,"\n"]],[2072,2072],[2073,2073]]],[1536997716154,["gjx16@GJXAIOU",[[1,2073,"·"]],[2073,2073],[2074,2074]]],[1536997716805,["gjx16@GJXAIOU",[[-1,2073,"·"]],[2074,2074],[2073,2073]]],[1536997718146,["gjx16@GJXAIOU",[[1,2073,"```"]],[2073,2073],[2076,2076]]],[1536997718172,["gjx16@GJXAIOU",[[1,2076,"language\n```\n"]],[2076,2076],[2076,2084]]],[1536997719106,["gjx16@GJXAIOU",[[-1,2076,"language"],[1,2084,"c"]],[2076,2084],[2077,2077]]],[1536997719331,["gjx16@GJXAIOU",[[1,2078,"\n"]],[2077,2077],[2078,2078]]],[1536997719841,["gjx16@GJXAIOU",[[1,2079,"\n"]],[2078,2078],[2079,2079]]],[1536997720096,["gjx16@GJXAIOU",[[1,2080,"\n"]],[2079,2079],[2080,2080]]],[1536997720283,["gjx16@GJXAIOU",[[1,2081,"\n"]],[2080,2080],[2081,2081]]],[1536997727936,["gjx16@GJXAIOU",[[1,2072,"yin"]],[2072,2072],[2075,2075]]],[1536997728884,["gjx16@GJXAIOU",[[-1,2072,"yin"]],[2075,2075],[2072,2072]]],[1536997736970,["gjx16@GJXAIOU",[[1,2072,"因为要求~"]],[2072,2072],[2077,2077]]],[1536997737856,["gjx16@GJXAIOU",[[-1,2076,"~"]],[2077,2077],[2076,2076]]],[1536997762845,["gjx16@GJXAIOU",[[1,2076,"`srand`的参数时刻变化，一般"]],[2076,2076],[2093,2093]]],[1536997769888,["gjx16@GJXAIOU",[[1,2093,"选择键"]],[2093,2093],[2096,2096]]],[1536997770445,["gjx16@GJXAIOU",[[-1,2095,"键"]],[2096,2096],[2095,2095]]],[1536997776508,["gjx16@GJXAIOU",[[1,2095,"将系统时间"]],[2095,2095],[2100,2100]]],[1536997856563,["gjx16@GJXAIOU",[[1,2100,"转换为整数赋值作为参数"]],[2100,2100],[2111,2111]]],[1536997857610,["gjx16@GJXAIOU",[[1,2112,"\n"]],[2111,2111],[2112,2112]]],[1536997868716,["gjx16@GJXAIOU",[[1,2118,"#include<>"]],[2118,2118],[2128,2128]]],[1536997875044,["gjx16@GJXAIOU",[[1,2127,"stdio.h"]],[2127,2127],[2134,2134]]],[1536997876722,["gjx16@GJXAIOU",[[1,2139,"\n"]],[2135,2135],[2136,2136]]],[1536997882456,["gjx16@GJXAIOU",[[1,2136,"#"]],[2136,2136],[2137,2137]]],[1536997897498,["gjx16@GJXAIOU",[[1,2137,"include<>"]],[2137,2137],[2146,2146]]],[1536997902564,["gjx16@GJXAIOU",[[1,2145,"time.h"]],[2145,2145],[2151,2151]]],[1536998065427,["gjx16@GJXAIOU",[[1,2154,"int main()"]],[2154,2154],[2164,2164]]],[1536998066389,["gjx16@GJXAIOU",[[1,2166,"\n"]],[2164,2164],[2165,2165]]],[1536998067512,["gjx16@GJXAIOU",[[1,2165,":"]],[2165,2165],[2166,2166]]],[1536998068387,["gjx16@GJXAIOU",[[-1,2165,":"]],[2166,2166],[2165,2165]]],[1536998069751,["gjx16@GJXAIOU",[[1,2165,"{}"]],[2165,2165],[2167,2167]]],[1536998071154,["gjx16@GJXAIOU",[[1,2166,"\n"]],[2166,2166],[2167,2167]]],[1536998071323,["gjx16@GJXAIOU",[[1,2167,"\n"]],[2167,2167],[2168,2168]]],[1536998071541,["gjx16@GJXAIOU",[[1,2168,"\n"]],[2168,2168],[2169,2169]]],[1536998072196,["gjx16@GJXAIOU",[[1,2169,"\n"]],[2169,2169],[2170,2170]]],[1536998078378,["gjx16@GJXAIOU",[[1,2167,"  int m"]],[2167,2167],[2174,2174]]],[1536998079055,["gjx16@GJXAIOU",[[-1,2172," m"]],[2174,2174],[2172,2172]]],[1536998080949,["gjx16@GJXAIOU",[[1,2172," i"]],[2172,2172],[2174,2174]]],[1536998089031,["gjx16@GJXAIOU",[[1,2174,";"]],[2174,2174],[2175,2175]]],[1536998089382,["gjx16@GJXAIOU",[[1,2176,"  \n"]],[2175,2175],[2178,2178]]],[1536998092378,["gjx16@GJXAIOU",[[1,2178,"for()"]],[2178,2178],[2183,2183]]],[1536998097848,["gjx16@GJXAIOU",[[1,2182,"i= "]],[2182,2182],[2185,2185]]],[1536998099151,["gjx16@GJXAIOU",[[-1,2183,"= "]],[2185,2185],[2183,2183]]],[1536998112466,["gjx16@GJXAIOU",[[1,2183," = 0;i"]],[2183,2183],[2189,2189]]],[1536998113548,["gjx16@GJXAIOU",[[-1,2188,"i"]],[2189,2189],[2188,2188]]],[1536998126098,["gjx16@GJXAIOU",[[1,2188," i < 10; i++"]],[2188,2188],[2200,2200]]],[1536998130378,["gjx16@GJXAIOU",[[1,2202,"{}"]],[2202,2202],[2204,2204]]],[1536998134489,["gjx16@GJXAIOU",[[1,2202,"    "]],[2202,2202],[2206,2206]]],[1536998137165,["gjx16@GJXAIOU",[[1,2207,"\n    \n    \n    \n    \n    "]],[2207,2207],[2232,2232]]],[1536998144274,["gjx16@GJXAIOU",[[1,2212,"  int value"]],[2212,2212],[2223,2223]]],[1536998147292,["gjx16@GJXAIOU",[[1,2223," = ;"]],[2223,2223],[2227,2227]]],[1536998148015,["gjx16@GJXAIOU",[[-1,2226,";"]],[2227,2227],[2226,2226]]],[1536998159278,["gjx16@GJXAIOU",[[1,2226,"rand();"]],[2226,2226],[2233,2233]]],[1536998160033,["gjx16@GJXAIOU",[[1,2238,"  \n    "]],[2233,2233],[2240,2240]]],[1536998163625,["gjx16@GJXAIOU",[[1,2240,"printf();"]],[2240,2240],[2249,2249]]],[1536998166686,["gjx16@GJXAIOU",[[1,2247,"\"\""]],[2247,2247],[2249,2249]]],[1536998172660,["gjx16@GJXAIOU",[[1,2248,"%d\\n"]],[2248,2248],[2252,2252]]],[1536998179186,["gjx16@GJXAIOU",[[1,2253,",value"]],[2253,2253],[2259,2259]]],[1536998187344,["gjx16@GJXAIOU",[[-1,2272,"    "]],[2276,2276],[2272,2272]]],[1536998187581,["gjx16@GJXAIOU",[[-1,2272,"\n"]],[2272,2272],[2271,2271]]],[1536998188482,["gjx16@GJXAIOU",[[-1,2267,"    "]],[2271,2271],[2267,2267]]],[1536998188688,["gjx16@GJXAIOU",[[-1,2267,"\n"]],[2267,2267],[2266,2266]]],[1536998189796,["gjx16@GJXAIOU",[[-1,2262,"    "]],[2266,2266],[2262,2262]]],[1536998190074,["gjx16@GJXAIOU",[[-1,2262,"\n"]],[2262,2262],[2261,2261]]],[1536998211332,["gjx16@GJXAIOU",[[1,2268,"  rer"]],[2268,2268],[2273,2273]]],[1536998212025,["gjx16@GJXAIOU",[[-1,2272,"r"]],[2273,2273],[2272,2272]]],[1536998214079,["gjx16@GJXAIOU",[[1,2272,"tunrn"]],[2272,2272],[2277,2277]]],[1536998215056,["gjx16@GJXAIOU",[[-1,2274,"nrn"]],[2277,2277],[2274,2274]]],[1536998218509,["gjx16@GJXAIOU",[[1,2274,"rn 0;"]],[2274,2274],[2279,2279]]],[1536998284299,["gjx16@GJXAIOU",[[1,1913,"\n"]],[1912,1912],[1913,1913]]],[1536998284447,["gjx16@GJXAIOU",[[1,1914,"\n"]],[1913,1913],[1914,1914]]],[1536998294015,["gjx16@GJXAIOU",[[1,1912,"#include<>"]],[1912,1912],[1922,1922]]],[1536998304678,["gjx16@GJXAIOU",[[1,1921,"stdlib.h"]],[1921,1921],[1929,1929]]],[1536998309544,["gjx16@GJXAIOU",[[1,2174,"\n"]],[2173,2173],[2174,2174]]],[1536998317057,["gjx16@GJXAIOU",[[1,2173,"#include<>"]],[2173,2173],[2183,2183]]],[1536998323577,["gjx16@GJXAIOU",[[1,2182,"std"]],[2182,2182],[2185,2185]]],[1536998329157,["gjx16@GJXAIOU",[[1,2185,"lib.h"]],[2185,2185],[2190,2190]]],[1536998359214,["gjx16@GJXAIOU",[[1,2206,"\n"]],[2205,2205],[2206,2206]]],[1536998359399,["gjx16@GJXAIOU",[[1,2207,"\n"]],[2206,2206],[2207,2207]]],[1536998361308,["gjx16@GJXAIOU",[[1,2207,"  "]],[2207,2207],[2209,2209]]],[1536998363549,["gjx16@GJXAIOU",[[-1,2207,"  "]],[2209,2209],[2207,2207]]],[1536998363779,["gjx16@GJXAIOU",[[-1,2207,"\n"]],[2207,2207],[2206,2206]]],[1536998366995,["gjx16@GJXAIOU",[[1,2206,"  i"]],[2206,2206],[2209,2209]]],[1536998367651,["gjx16@GJXAIOU",[[-1,2208,"i"]],[2209,2209],[2208,2208]]],[1536998369081,["gjx16@GJXAIOU",[[1,2208,"timr"]],[2208,2208],[2212,2212]]],[1536998370025,["gjx16@GJXAIOU",[[-1,2211,"r"]],[2212,2212],[2211,2211]]],[1536998373775,["gjx16@GJXAIOU",[[1,2211,"e-"]],[2211,2211],[2213,2213]]],[1536998374547,["gjx16@GJXAIOU",[[-1,2212,"-"]],[2213,2213],[2212,2212]]],[1536998384668,["gjx16@GJXAIOU",[[1,2212,"_t t"]],[2212,2212],[2216,2216]]],[1536998392723,["gjx16@GJXAIOU",[[1,2216,"m = time();"]],[2216,2216],[2227,2227]]],[1536998397916,["gjx16@GJXAIOU",[[1,2225,"NULL"]],[2225,2225],[2229,2229]]],[1536998411535,["gjx16@GJXAIOU",[[1,2231,"   //得到系统时间"]],[2231,2231],[2242,2242]]],[1536998413301,["gjx16@GJXAIOU",[[1,2245,"\n  "]],[2242,2242],[2245,2245]]],[1536998423480,["gjx16@GJXAIOU",[[1,2245,"srand();"]],[2245,2245],[2253,2253]]],[1536998426205,["gjx16@GJXAIOU",[[1,2251,"tm"]],[2251,2251],[2253,2253]]],[1536998438923,["gjx16@GJXAIOU",[[1,2255,"    //随机数种子"]],[2255,2255],[2266,2266]]],[1536998446115,["gjx16@GJXAIOU",[[1,2266,"发生器"]],[2266,2266],[2269,2269]]],[1536998553840,["gjx16@GJXAIOU",[[1,2396,"\n"]],[2389,2389],[2390,2390]]],[1536998553888,["gjx16@GJXAIOU",[[1,2397,"\n"]],[2390,2390],[2391,2391]]],[1536998554061,["gjx16@GJXAIOU",[[1,2398,"\n"]],[2391,2391],[2392,2392]]],[1536998568414,["gjx16@GJXAIOU",[[1,2392,"****"]],[2392,2392],[2394,2394]]],[1536998579494,["gjx16@GJXAIOU",[[1,2394,"字符串数组的输入与输出"]],[2394,2394],[2405,2405]]],[1536998582119,["gjx16@GJXAIOU",[[1,2414,"\n"]],[2407,2407],[2408,2408]]],[1536998582465,["gjx16@GJXAIOU",[[1,2415,"\n"]],[2408,2408],[2409,2409]]],[1536998588092,["gjx16@GJXAIOU",[[1,2409,"```"]],[2409,2409],[2412,2412]]],[1536998588118,["gjx16@GJXAIOU",[[1,2412,"language\n```\n"]],[2412,2412],[2412,2420]]],[1536998589865,["gjx16@GJXAIOU",[[-1,2412,"language"],[1,2420,"c"]],[2412,2420],[2413,2413]]],[1536998590166,["gjx16@GJXAIOU",[[1,2414,"\n"]],[2413,2413],[2414,2414]]],[1536998595115,["gjx16@GJXAIOU",[[1,2414,"#incu"]],[2414,2414],[2419,2419]]],[1536998595866,["gjx16@GJXAIOU",[[-1,2418,"u"]],[2419,2419],[2418,2418]]],[1536998598431,["gjx16@GJXAIOU",[[1,2418,"lude<>"]],[2418,2418],[2424,2424]]],[1536998602203,["gjx16@GJXAIOU",[[1,2423,"stdio."]],[2423,2423],[2429,2429]]],[1536998603083,["gjx16@GJXAIOU",[[1,2429,"h"]],[2429,2429],[2430,2430]]],[1536998604700,["gjx16@GJXAIOU",[[1,2432,"\n"]],[2431,2431],[2432,2432]]],[1536998605925,["gjx16@GJXAIOU",[[1,2433,"\n"]],[2432,2432],[2433,2433]]],[1536998610361,["gjx16@GJXAIOU",[[1,2433,"int main)"]],[2433,2433],[2442,2442]]],[1536998611023,["gjx16@GJXAIOU",[[-1,2441,")"]],[2442,2442],[2441,2441]]],[1536998611974,["gjx16@GJXAIOU",[[1,2441,"()"]],[2441,2441],[2443,2443]]],[1536998613120,["gjx16@GJXAIOU",[[1,2444,"\n"]],[2443,2443],[2444,2444]]],[1536998615882,["gjx16@GJXAIOU",[[1,2445,"\n"]],[2443,2443],[2444,2444]]],[1536998618186,["gjx16@GJXAIOU",[[1,2444,"{}"]],[2444,2444],[2446,2446]]],[1536998619229,["gjx16@GJXAIOU",[[1,2445,"\n"]],[2445,2445],[2446,2446]]],[1536998619437,["gjx16@GJXAIOU",[[1,2446,"\n"]],[2446,2446],[2447,2447]]],[1536998619600,["gjx16@GJXAIOU",[[1,2447,"\n"]],[2447,2447],[2448,2448]]],[1536998619784,["gjx16@GJXAIOU",[[1,2448,"\n"]],[2448,2448],[2449,2449]]],[1536998619964,["gjx16@GJXAIOU",[[1,2449,"\n"]],[2449,2449],[2450,2450]]],[1536998622889,["gjx16@GJXAIOU",[[1,2447,"  "]],[2447,2447],[2449,2449]]],[1537000267704,["gjx16@GJXAIOU",[[1,2409,"\n"]],[2408,2408],[2409,2409]]],[1537000271314,["gjx16@GJXAIOU",[[1,2409,"- shuru"]],[2409,2409],[2416,2416]]],[1537000272956,["gjx16@GJXAIOU",[[-1,2411,"shuru"]],[2416,2416],[2411,2411]]],[1537000275294,["gjx16@GJXAIOU",[[1,2411,"shuru"]],[2411,2411],[2416,2416]]],[1537000277093,["gjx16@GJXAIOU",[[-1,2411,"shuru"]],[2416,2416],[2411,2411]]],[1537000341589,["gjx16@GJXAIOU",[[1,2411,"shuru "]],[2411,2411],[2417,2417]]],[1537000342652,["gjx16@GJXAIOU",[[-1,2414,"ru "]],[2417,2417],[2414,2414]]],[1537000343389,["gjx16@GJXAIOU",[[-1,2411,"shu"]],[2414,2414],[2411,2411]]],[1537000375183,["gjx16@GJXAIOU",[[1,2411,"输入函数：scanf  、gets /\\"]],[2411,2411],[2431,2431]]],[1537000376930,["gjx16@GJXAIOU",[[-1,2429,"/\\"]],[2431,2431],[2429,2429]]],[1537000384610,["gjx16@GJXAIOU",[[1,2429,"、fgets"]],[2429,2429],[2435,2435]]],[1537000393143,["gjx16@GJXAIOU",[[1,2436,"- \n"]],[2435,2435],[2438,2438]]],[1537000394784,["gjx16@GJXAIOU",[[-1,2436,"- "]],[2438,2438],[2436,2436]]],[1537000394929,["gjx16@GJXAIOU",[[-1,2436,"\n"]],[2436,2436],[2435,2435]]],[1537000396076,["gjx16@GJXAIOU",[[1,2436,"- \n"]],[2435,2435],[2438,2438]]],[1537000397526,["gjx16@GJXAIOU",[[-1,2436,"- "]],[2438,2438],[2436,2436]]],[1537000398667,["gjx16@GJXAIOU",[[1,2437,"\n"]],[2436,2436],[2437,2437]]],[1537000399839,["gjx16@GJXAIOU",[[1,2437,"  "]],[2437,2437],[2439,2439]]],[1537000409675,["gjx16@GJXAIOU",[[1,2439,"scanfke"]],[2439,2439],[2446,2446]]],[1537000410149,["gjx16@GJXAIOU",[[-1,2444,"ke"]],[2446,2446],[2444,2444]]],[1537000443440,["gjx16@GJXAIOU",[[1,2444,"可以使用转义输出，既可以输出整数或者字符串"]],[2444,2444],[2465,2465]]],[1537000444788,["gjx16@GJXAIOU",[[1,2466,"  \n"]],[2465,2465],[2468,2468]]],[1537000451330,["gjx16@GJXAIOU",[[1,2444," ："]],[2444,2444],[2446,2446]]],[1537000462599,["gjx16@GJXAIOU",[[1,2470,"gets"]],[2470,2470],[2474,2474]]],[1537000505918,["gjx16@GJXAIOU",[[1,2474," ： 只能输入字符串，存在缓冲区溢出的问题；"]],[2474,2474],[2496,2496]]],[1537000521356,["gjx16@GJXAIOU",[[1,2467,"，存在缓冲区溢出的问题；"]],[2467,2467],[2479,2479]]],[1537000561360,["gjx16@GJXAIOU",[[1,2509,"  \n"]],[2508,2508],[2511,2511]]],[1537000582029,["gjx16@GJXAIOU",[[1,2511,"fgets ："]],[2511,2511],[2518,2518]]],[1537000613279,["gjx16@GJXAIOU",[[1,2518,"通过设置第二个参数的大小可以防止缓冲区溢出的出现；"]],[2518,2518],[2543,2543]]],[1537000630939,["gjx16@GJXAIOU",[[1,2544,"  \n"]],[2543,2543],[2546,2546]]],[1537000631720,["gjx16@GJXAIOU",[[-1,2544,"  "],[1,2546,"\n"]],[2546,2546],[2545,2545]]],[1537000665795,["gjx16@GJXAIOU",[[1,2545,"  - scanf"]],[2545,2545],[2554,2554]]],[1537000679251,["gjx16@GJXAIOU",[[1,2595,"int "]],[2595,2595],[2599,2599]]],[1537000680291,["gjx16@GJXAIOU",[[-1,2595,"int "]],[2599,2599],[2595,2595]]],[1537000691936,["gjx16@GJXAIOU",[[1,2595,"char s[] = \"\";"]],[2595,2595],[2609,2609]]],[1537000697841,["gjx16@GJXAIOU",[[1,2607,"hello"]],[2607,2607],[2612,2612]]],[1537000704826,["gjx16@GJXAIOU",[[1,2479,"yudao"]],[2479,2479],[2484,2484]]],[1537000705998,["gjx16@GJXAIOU",[[-1,2479,"yudao"]],[2484,2484],[2479,2479]]],[1537000725169,["gjx16@GJXAIOU",[[1,2479,"遇到空格和回车均认为输入结束；"]],[2479,2479],[2494,2494]]],[1537000748485,["gjx16@GJXAIOU",[[1,2523,"只有遇到回车的时候才认为输出结束；"]],[2523,2523],[2540,2540]]],[1537000772122,["gjx16@GJXAIOU",[[1,2438,"**"],[1,2446,"**"]],[2438,2446],[2438,2450]]],[1537000777444,["gjx16@GJXAIOU",[[1,2450,"  "]],[2450,2450],[2452,2452]]],[1537000781096,["gjx16@GJXAIOU",[[-1,2447,"："]],[2448,2448],[2447,2447]]],[1537000783291,["gjx16@GJXAIOU",[[1,2447,"："]],[2447,2447],[2448,2448]]],[1537000785954,["gjx16@GJXAIOU",[[-1,2447,"："]],[2448,2448],[2447,2447]]],[1537000787761,["gjx16@GJXAIOU",[[1,2447,":"]],[2447,2447],[2448,2448]]],[1537000792527,["gjx16@GJXAIOU",[[-1,2439,"* "]],[2440,2441],[2439,2439]]],[1537000798919,["gjx16@GJXAIOU",[[1,2439,"*"]],[2439,2439],[2440,2440]]],[1537000804813,["gjx16@GJXAIOU",[[1,2502,"**"],[1,2508,"**"]],[2502,2508],[2502,2512]]],[1537000809542,["gjx16@GJXAIOU",[[1,2552,"**"],[1,2559,"**"]],[2552,2559],[2552,2563]]],[1537000811719,["gjx16@GJXAIOU",[[1,2563," "]],[2563,2563],[2564,2564]]],[1537000822716,["gjx16@GJXAIOU",[[-1,2657,"o"]],[2658,2658],[2657,2657]]],[1537000823731,["gjx16@GJXAIOU",[[-1,2653,"hell\""]],[2657,2657],[2652,2652]]],[1537000826511,["gjx16@GJXAIOU",[[-1,2652,"\""]],[2653,2653],[2652,2652]]],[1537000829543,["gjx16@GJXAIOU",[[1,2652,"{]"]],[2652,2652],[2654,2654]]],[1537000830528,["gjx16@GJXAIOU",[[-1,2653,"]"]],[2654,2654],[2653,2653]]],[1537000831618,["gjx16@GJXAIOU",[[1,2653,"}"]],[2653,2653],[2654,2654]]],[1537000834171,["gjx16@GJXAIOU",[[1,2653,"0"]],[2653,2653],[2654,2654]]],[1537000837661,["gjx16@GJXAIOU",[[1,2657,"  \n"]],[2656,2656],[2659,2659]]],[1537000862547,["gjx16@GJXAIOU",[[1,2659,"scanf();"]],[2659,2659],[2667,2667]]],[1537000867414,["gjx16@GJXAIOU",[[1,2665,"\"\""]],[2665,2665],[2667,2667]]],[1537000874584,["gjx16@GJXAIOU",[[1,2666,"%s\\n"]],[2666,2666],[2670,2670]]],[1537000882498,["gjx16@GJXAIOU",[[1,2671,",s"]],[2671,2671],[2673,2673]]],[1537000885814,["gjx16@GJXAIOU",[[1,2673,"1"]],[2673,2673],[2674,2674]]],[1537000889666,["gjx16@GJXAIOU",[[1,2647,"1"]],[2647,2647],[2648,2648]]],[1537000896690,["gjx16@GJXAIOU",[[1,2649,"20"]],[2649,2649],[2651,2651]]],[1537000903228,["gjx16@GJXAIOU",[[1,2680,"  prinf"]],[2680,2680],[2687,2687]]],[1537000904317,["gjx16@GJXAIOU",[[-1,2686,"f"]],[2687,2687],[2686,2686]]],[1537000931044,["gjx16@GJXAIOU",[[1,2686,"tf();"]],[2686,2686],[2691,2691]]],[1537000934879,["gjx16@GJXAIOU",[[1,2689,"\"\""]],[2689,2689],[2691,2691]]],[1537000940862,["gjx16@GJXAIOU",[[1,2690,"%s\\n"]],[2690,2690],[2694,2694]]],[1537000945933,["gjx16@GJXAIOU",[[1,2695,",s1"]],[2695,2695],[2698,2698]]],[1537001217363,["gjx16@GJXAIOU",[[1,2625,"#define  _CRT_SECURE_NO_WARNINGS\n\n"],[1,2628," "],[1,2635,"\n"],[1,2646," "],[1,2652," "],[1,2655," "],[1,2659,"\n"],[-1,2671,"\\n"],[1,2679,"\n"],[1,2699,";\n\n  return  0"]],[2606,2703],[2756,2756]]],[1537001223726,["gjx16@GJXAIOU",[[-1,2625,"#define  _CRT_SECURE_NO_WARNINGS"]],[2657,2657],[2625,2625]]],[1537001224160,["gjx16@GJXAIOU",[[-1,2626,"\n"]],[2625,2625],[2624,2624]]],[1537001225175,["gjx16@GJXAIOU",[[-1,2625,"\n"]],[2624,2624],[2623,2623]]],[1537001231497,["gjx16@GJXAIOU",[[1,2735,"\n"]],[2727,2727],[2728,2728]]],[1537001232063,["gjx16@GJXAIOU",[[1,2736,"\n"]],[2728,2728],[2729,2729]]],[1537001238648,["gjx16@GJXAIOU",[[1,2729,"  - gets "]],[2729,2729],[2738,2738]]],[1537001239559,["gjx16@GJXAIOU",[[1,2739,"  - \n"]],[2738,2738],[2743,2743]]],[1537001239794,["gjx16@GJXAIOU",[[-1,2739,"  - "]],[2743,2743],[2740,2740]]],[1537001242293,["gjx16@GJXAIOU",[[1,2740,"```"]],[2740,2740],[2743,2743]]],[1537001242321,["gjx16@GJXAIOU",[[1,2743,"language\n```\n"]],[2743,2743],[2743,2751]]],[1537001243334,["gjx16@GJXAIOU",[[-1,2743,"language"],[1,2751,"c"]],[2743,2751],[2744,2744]]],[1537001243577,["gjx16@GJXAIOU",[[1,2745,"\n"]],[2744,2744],[2745,2745]]],[1537001247607,["gjx16@GJXAIOU",[[1,2746,"\n"]],[2745,2745],[2746,2746]]],[1537001247747,["gjx16@GJXAIOU",[[1,2747,"\n"]],[2746,2746],[2747,2747]]],[1537001255955,["gjx16@GJXAIOU",[[1,2745,"#include<>"]],[2745,2745],[2755,2755]]],[1537001262409,["gjx16@GJXAIOU",[[1,2754,"stdio.h"]],[2754,2754],[2761,2761]]],[1537001359410,["gjx16@GJXAIOU",[[1,2765,"\n"]],[2762,2762],[2763,2763]]],[1537001360530,["gjx16@GJXAIOU",[[1,2766,"\n"]],[2763,2763],[2764,2764]]],[1537001364694,["gjx16@GJXAIOU",[[1,2764,"int mai"]],[2764,2764],[2771,2771]]],[1537001365769,["gjx16@GJXAIOU",[[1,2771,"n()"]],[2771,2771],[2774,2774]]],[1537001366423,["gjx16@GJXAIOU",[[1,2777,"\n"]],[2774,2774],[2775,2775]]],[1537001367694,["gjx16@GJXAIOU",[[1,2775,"{}"]],[2775,2775],[2777,2777]]],[1537001368864,["gjx16@GJXAIOU",[[1,2776,"\n"]],[2776,2776],[2777,2777]]],[1537001369026,["gjx16@GJXAIOU",[[1,2777,"\n"]],[2777,2777],[2778,2778]]],[1537001369191,["gjx16@GJXAIOU",[[1,2778,"\n"]],[2778,2778],[2779,2779]]],[1537001369382,["gjx16@GJXAIOU",[[1,2779,"\n"]],[2779,2779],[2780,2780]]],[1537001369549,["gjx16@GJXAIOU",[[1,2780,"\n"]],[2780,2780],[2781,2781]]],[1537001376544,["gjx16@GJXAIOU",[[1,2777,"  char as"]],[2777,2777],[2786,2786]]],[1537001379539,["gjx16@GJXAIOU",[[-1,2784,"as"]],[2786,2786],[2784,2784]]],[1537001390502,["gjx16@GJXAIOU",[[1,2784,"ss[] = {}"]],[2784,2784],[2793,2793]]],[1537001393778,["gjx16@GJXAIOU",[[1,2792,"0"]],[2792,2792],[2793,2793]]],[1537001398233,["gjx16@GJXAIOU",[[1,2794,";"]],[2794,2794],[2795,2795]]],[1537001399047,["gjx16@GJXAIOU",[[1,2796,"  \n"]],[2795,2795],[2798,2798]]],[1537001406900,["gjx16@GJXAIOU",[[1,2798,"get();"]],[2798,2798],[2804,2804]]],[1537001410716,["gjx16@GJXAIOU",[[1,2802,"ss"]],[2802,2802],[2804,2804]]],[1537001412816,["gjx16@GJXAIOU",[[1,2807,"  \n"]],[2806,2806],[2809,2809]]],[1537001413863,["gjx16@GJXAIOU",[[-1,2807,"  "],[1,2809,"\n"]],[2809,2809],[2808,2808]]],[1537001419307,["gjx16@GJXAIOU",[[1,2808,"printf();"]],[2808,2808],[2817,2817]]],[1537001428201,["gjx16@GJXAIOU",[[1,2815,"\"\""]],[2815,2815],[2817,2817]]],[1537001432901,["gjx16@GJXAIOU",[[1,2816,"|"]],[2816,2816],[2817,2817]]],[1537001433949,["gjx16@GJXAIOU",[[-1,2816,"|"]],[2817,2817],[2816,2816]]],[1537001435611,["gjx16@GJXAIOU",[[1,2816,"\\n"]],[2816,2816],[2818,2818]]],[1537001443077,["gjx16@GJXAIOU",[[1,2816,"%s"]],[2816,2816],[2818,2818]]],[1537001446842,["gjx16@GJXAIOU",[[1,2821,",s"]],[2821,2821],[2823,2823]]],[1537001452533,["gjx16@GJXAIOU",[[-1,2828,"\n"]],[2828,2828],[2827,2827]]],[1537001452697,["gjx16@GJXAIOU",[[-1,2827,"\n"]],[2827,2827],[2826,2826]]],[1537001452859,["gjx16@GJXAIOU",[[-1,2826,"\n"]],[2826,2826],[2825,2825]]],[1537001465670,["gjx16@GJXAIOU",[[1,2745,"\n"]],[2745,2745],[2746,2746]]],[1537001486876,["gjx16@GJXAIOU",[[1,2827,"\n"]],[2826,2826],[2827,2827]]],[1537001488189,["gjx16@GJXAIOU",[[1,2828,"\n"]],[2827,2827],[2828,2828]]],[1537001491035,["gjx16@GJXAIOU",[[1,2828,"retunrn "]],[2828,2828],[2836,2836]]],[1537001492462,["gjx16@GJXAIOU",[[-1,2832,"nrn "]],[2836,2836],[2832,2832]]],[1537001495277,["gjx16@GJXAIOU",[[1,2832,"rn 0;"]],[2832,2832],[2837,2837]]],[1537001533685,["gjx16@GJXAIOU",[[1,2824,"s"]],[2824,2824],[2825,2825]]],[1537001591895,["gjx16@GJXAIOU",[[1,2788,"20"]],[2788,2788],[2790,2790]]],[1537001705018,["gjx16@GJXAIOU",[[1,2804,"s"]],[2804,2804],[2805,2805]]],[1537001718047,["gjx16@GJXAIOU",[[1,2739,"      dasnhi"]],[2739,2739],[2751,2751]]],[1537001719041,["gjx16@GJXAIOU",[[-1,2745,"dasnhi"]],[2751,2751],[2745,2745]]],[1537001721003,["gjx16@GJXAIOU",[[1,2745,"但是"]],[2745,2745],[2747,2747]]],[1537001721765,["gjx16@GJXAIOU",[[-1,2744," 但是"]],[2747,2747],[2744,2744]]],[1537001740225,["gjx16@GJXAIOU",[[1,2744,"局限性：gets仅能使用获得字符串的值，"]],[2744,2744],[2764,2764]]],[1537001795070,["gjx16@GJXAIOU",[[1,2764,"但是一般使用过程中需哦啊"]],[2764,2764],[2776,2776]]],[1537001795915,["gjx16@GJXAIOU",[[-1,2774,"哦啊"]],[2776,2776],[2774,2774]]],[1537001797444,["gjx16@GJXAIOU",[[1,2774,"哟啊"]],[2774,2774],[2776,2776]]],[1537001798516,["gjx16@GJXAIOU",[[-1,2774,"哟啊"]],[2776,2776],[2774,2774]]],[1537001804661,["gjx16@GJXAIOU",[[1,2774,"要使用证书"]],[2774,2774],[2779,2779]]],[1537001805514,["gjx16@GJXAIOU",[[-1,2777,"证书"]],[2779,2779],[2777,2777]]],[1537001831396,["gjx16@GJXAIOU",[[1,2777,"整数，因此需要借助其他函数将其"]],[2777,2777],[2792,2792]]],[1537001837160,["gjx16@GJXAIOU",[[1,2792,"转换为整数"]],[2792,2792],[2797,2797]]],[1537001849167,["gjx16@GJXAIOU",[[-1,2744,"局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数"]],[2744,2797],[2744,2744]]],[1537001852029,["gjx16@GJXAIOU",[[1,2856,"局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数"]],[2856,2856],[2909,2909]]],[1537001853542,["gjx16@GJXAIOU",[[1,2915,"\n"]],[2909,2909],[2910,2910]]],[1537001857105,["gjx16@GJXAIOU",[[1,2910,"```"]],[2910,2910],[2913,2913]]],[1537001857135,["gjx16@GJXAIOU",[[1,2913,"language\n```\n"]],[2913,2913],[2913,2921]]],[1537001858209,["gjx16@GJXAIOU",[[-1,2913,"language"],[1,2921,"c"]],[2913,2921],[2914,2914]]],[1537001858442,["gjx16@GJXAIOU",[[1,2915,"\n"]],[2914,2914],[2915,2915]]],[1537001863300,["gjx16@GJXAIOU",[[-1,2816,"\n"]],[2816,2816],[2815,2815]]],[1537001867511,["gjx16@GJXAIOU",[[1,2816,"  "]],[2816,2816],[2818,2818]]],[1537001872556,["gjx16@GJXAIOU",[[-1,2750,"\n"]],[2750,2750],[2749,2749]]],[1537001875664,["gjx16@GJXAIOU",[[-1,2850,"\n"]],[2850,2850],[2849,2849]]],[1537001876487,["gjx16@GJXAIOU",[[-1,2849,"\n"]],[2849,2849],[2848,2848]]],[1537001885007,["gjx16@GJXAIOU",[[1,2913,"#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}"]],[2913,2913],[3011,3011]]],[1537001932284,["gjx16@GJXAIOU",[[1,2931,"#include "]],[2931,2931],[2940,2940]]],[1537001933120,["gjx16@GJXAIOU",[[-1,2939," "]],[2940,2940],[2939,2939]]],[1537001934735,["gjx16@GJXAIOU",[[1,2939,"<>"]],[2939,2939],[2941,2941]]],[1537001940195,["gjx16@GJXAIOU",[[1,2940,"stbli"]],[2940,2940],[2945,2945]]],[1537001942727,["gjx16@GJXAIOU",[[-1,2942,"bli"]],[2945,2945],[2942,2942]]],[1537001948598,["gjx16@GJXAIOU",[[1,2942,"dlib.h"]],[2942,2942],[2948,2948]]],[1537001950524,["gjx16@GJXAIOU",[[1,2950,"\n"]],[2949,2949],[2950,2950]]],[1537001965164,["gjx16@GJXAIOU",[[1,2999,"\n  "]],[2996,2996],[2999,2999]]],[1537001965313,["gjx16@GJXAIOU",[[-1,2997,"  "],[1,2999,"\n"]],[2999,2999],[2998,2998]]],[1537001967387,["gjx16@GJXAIOU",[[1,2998,"  "]],[2998,2998],[3000,3000]]],[1537001993865,["gjx16@GJXAIOU",[[1,2907,"   ``"]],[2907,2907],[2912,2912]]],[1537001996929,["gjx16@GJXAIOU",[[1,2911,"atio"]],[2911,2911],[2915,2915]]],[1537002000202,["gjx16@GJXAIOU",[[1,2916," hansh"]],[2916,2916],[2922,2922]]],[1537002001479,["gjx16@GJXAIOU",[[-1,2917,"hansh"]],[2922,2922],[2917,2917]]],[1537002014142,["gjx16@GJXAIOU",[[1,2917,"函数将字符串转换为对应的整数"]],[2917,2917],[2931,2931]]],[1537002016282,["gjx16@GJXAIOU",[[1,2931,"值"]],[2931,2931],[2932,2932]]],[1537002027630,["gjx16@GJXAIOU",[[1,3025,"atio()"]],[3025,3025],[3031,3031]]],[1537002030386,["gjx16@GJXAIOU",[[1,3030,"ss"]],[3030,3030],[3032,3032]]],[1537002035433,["gjx16@GJXAIOU",[[1,3033,";"]],[3033,3033],[3034,3034]]],[1537002039099,["gjx16@GJXAIOU",[[1,3022,"  "]],[3022,3022],[3024,3024]]],[1537002040191,["gjx16@GJXAIOU",[[-1,3022,"  "],[1,3024,"\n"]],[3024,3024],[3023,3023]]],[1537002047560,["gjx16@GJXAIOU",[[1,3023,"  int sss;"]],[3023,3023],[3033,3033]]],[1537002051136,["gjx16@GJXAIOU",[[1,3037,"a"]],[3036,3036],[3037,3037]]],[1537002051895,["gjx16@GJXAIOU",[[-1,3037,"a"]],[3037,3037],[3036,3036]]],[1537002056310,["gjx16@GJXAIOU",[[1,3036,"sss = "]],[3036,3036],[3042,3042]]],[1537002060821,["gjx16@GJXAIOU",[[-1,3062,"%s"]],[3064,3064],[3062,3062]]],[1537002061045,["gjx16@GJXAIOU",[[1,3062,"d"]],[3062,3062],[3063,3063]]],[1537002063890,["gjx16@GJXAIOU",[[1,3069,"s"]],[3069,3069],[3070,3070]]],[1537002247537,["gjx16@GJXAIOU",[[1,2956,"\n"],[1,2980," "],[1,2987,"\n"],[1,2988,"\n"],[1,2996," "],[1,3002," "],[1,3005," "],[1,3009,"\n"],[1,3029," "],[1,3033,"\n"],[1,3040," "],[1,3041," "],[-1,3044,"i"],[1,3046,"i"],[1,3052,"\n"],[1,3062,"%"],[1,3081," "],[1,3083,"\n"]],[2938,3085],[3101,3101]]],[1537002265533,["gjx16@GJXAIOU",[[1,3112,"\n"]],[3105,3105],[3106,3106]]],[1537002265688,["gjx16@GJXAIOU",[[1,3113,"\n"]],[3106,3106],[3107,3107]]],[1537002338996,["gjx16@GJXAIOU",[[1,3114,"\n"]],[3106,3106],[3107,3107]]],[1537002351544,["gjx16@GJXAIOU",[[1,3107,"  - fgets "]],[3107,3107],[3117,3117]]],[1537002352564,["gjx16@GJXAIOU",[[1,3118,"  - \n"]],[3117,3117],[3122,3122]]],[1537002353129,["gjx16@GJXAIOU",[[-1,3118,"  - "]],[3122,3122],[3119,3119]]],[1537002356981,["gjx16@GJXAIOU",[[1,3119,"```"]],[3119,3119],[3122,3122]]],[1537002357010,["gjx16@GJXAIOU",[[1,3122,"language\n```\n"]],[3122,3122],[3122,3130]]],[1537002358059,["gjx16@GJXAIOU",[[-1,3122,"language"],[1,3130,"c"]],[3122,3130],[3123,3123]]],[1537002358298,["gjx16@GJXAIOU",[[1,3124,"\n"]],[3123,3123],[3124,3124]]],[1537002359206,["gjx16@GJXAIOU",[[1,3125,"\n"]],[3124,3124],[3125,3125]]],[1537002359399,["gjx16@GJXAIOU",[[1,3126,"\n"]],[3125,3125],[3126,3126]]],[1537002359593,["gjx16@GJXAIOU",[[1,3127,"\n"]],[3126,3126],[3127,3127]]],[1537002370683,["gjx16@GJXAIOU",[[1,3124,"#inclul"]],[3124,3124],[3131,3131]]],[1537002371469,["gjx16@GJXAIOU",[[-1,3130,"l"]],[3131,3131],[3130,3130]]],[1537002373238,["gjx16@GJXAIOU",[[1,3130,"de<>"]],[3130,3130],[3134,3134]]],[1537002377542,["gjx16@GJXAIOU",[[1,3133,"stdio,"]],[3133,3133],[3139,3139]]],[1537002379024,["gjx16@GJXAIOU",[[-1,3138,","]],[3139,3139],[3138,3138]]],[1537002380547,["gjx16@GJXAIOU",[[1,3138,".h"]],[3138,3138],[3140,3140]]],[1537002383016,["gjx16@GJXAIOU",[[1,3145,"\n"]],[3141,3141],[3142,3142]]],[1537002397545,["gjx16@GJXAIOU",[[1,3146,"\n"]],[3142,3142],[3143,3143]]],[1537002403402,["gjx16@GJXAIOU",[[1,3143,"int main()"]],[3143,3143],[3153,3153]]],[1537002404306,["gjx16@GJXAIOU",[[1,3157,"\n"]],[3153,3153],[3154,3154]]],[1537002405519,["gjx16@GJXAIOU",[[1,3154,"{}"]],[3154,3154],[3156,3156]]],[1537002406809,["gjx16@GJXAIOU",[[1,3155,"\n"]],[3155,3155],[3156,3156]]],[1537002406985,["gjx16@GJXAIOU",[[1,3156,"\n"]],[3156,3156],[3157,3157]]],[1537002407141,["gjx16@GJXAIOU",[[1,3157,"\n"]],[3157,3157],[3158,3158]]],[1537002407293,["gjx16@GJXAIOU",[[1,3158,"\n"]],[3158,3158],[3159,3159]]],[1537002407635,["gjx16@GJXAIOU",[[1,3159,"\n"]],[3159,3159],[3160,3160]]],[1537002412968,["gjx16@GJXAIOU",[[1,3156,"  int i;"]],[3156,3156],[3164,3164]]],[1537002416764,["gjx16@GJXAIOU",[[-1,3158,"int i;"]],[3164,3164],[3158,3158]]],[1537002425375,["gjx16@GJXAIOU",[[1,3158,"char s[] "]],[3158,3158],[3167,3167]]],[1537002428623,["gjx16@GJXAIOU",[[1,3167,"= \""]],[3167,3167],[3170,3170]]],[1537002429489,["gjx16@GJXAIOU",[[-1,3169,"\""]],[3170,3170],[3169,3169]]],[1537002431654,["gjx16@GJXAIOU",[[1,3169,"{};"]],[3169,3169],[3172,3172]]],[1537002435361,["gjx16@GJXAIOU",[[1,3170,"0"]],[3170,3170],[3171,3171]]],[1537002439341,["gjx16@GJXAIOU",[[1,3165,"20"]],[3165,3165],[3167,3167]]],[1537002442986,["gjx16@GJXAIOU",[[1,3176,"  \n"]],[3175,3175],[3178,3178]]],[1537002518899,["gjx16@GJXAIOU",[[-1,3176,"  "],[1,3178,"\n"]],[3178,3178],[3177,3177]]],[1537002526863,["gjx16@GJXAIOU",[[1,3177,"  fgets();"]],[3177,3177],[3187,3187]]],[1537002539783,["gjx16@GJXAIOU",[[1,3185,"s,10"]],[3185,3185],[3189,3189]]],[1537002541679,["gjx16@GJXAIOU",[[-1,3188,"0"]],[3189,3189],[3188,3188]]],[1537002544889,["gjx16@GJXAIOU",[[1,3188,"9,"]],[3188,3188],[3190,3190]]],[1537002551157,["gjx16@GJXAIOU",[[-1,3187,"19,"]],[3190,3190],[3187,3187]]],[1537002556188,["gjx16@GJXAIOU",[[1,3187,"sizeof("]],[3187,3187],[3194,3194]]],[1537002556323,["gjx16@GJXAIOU",[[1,3195,")"]],[3194,3194],[3195,3195]]],[1537002559037,["gjx16@GJXAIOU",[[1,3194,"s"]],[3194,3194],[3195,3195]]],[1537002592295,["gjx16@GJXAIOU",[[1,3196," - 1;stdin"]],[3196,3196],[3206,3206]]],[1537002596673,["gjx16@GJXAIOU",[[1,3209,"  \n"]],[3208,3208],[3211,3211]]],[1537002597411,["gjx16@GJXAIOU",[[-1,3209,"  "],[1,3211,"\n"]],[3211,3211],[3210,3210]]],[1537002599154,["gjx16@GJXAIOU",[[1,3210,"  "]],[3210,3210],[3212,3212]]],[1537002615193,["gjx16@GJXAIOU",[[1,3212,"printf();"]],[3212,3212],[3221,3221]]],[1537002619517,["gjx16@GJXAIOU",[[1,3219,"\"\""]],[3219,3219],[3221,3221]]],[1537002626721,["gjx16@GJXAIOU",[[1,3220,"%s\\n"]],[3220,3220],[3224,3224]]],[1537002630438,["gjx16@GJXAIOU",[[1,3225,",a"]],[3225,3225],[3227,3227]]],[1537002631748,["gjx16@GJXAIOU",[[-1,3226,"a"]],[3227,3227],[3226,3226]]],[1537002632047,["gjx16@GJXAIOU",[[1,3226,"s"]],[3226,3226],[3227,3227]]],[1537002640017,["gjx16@GJXAIOU",[[-1,3232,"\n"]],[3232,3232],[3231,3231]]],[1537002640235,["gjx16@GJXAIOU",[[-1,3231,"\n"]],[3231,3231],[3230,3230]]],[1537002640561,["gjx16@GJXAIOU",[[-1,3230,"\n"]],[3230,3230],[3229,3229]]],[1537002642439,["gjx16@GJXAIOU",[[1,3230,"  \n"]],[3229,3229],[3232,3232]]],[1537002643924,["gjx16@GJXAIOU",[[-1,3230,"  "],[1,3232,"\n"]],[3232,3232],[3231,3231]]],[1537002650903,["gjx16@GJXAIOU",[[1,3231,"  return 0;"]],[3231,3231],[3242,3242]]],[1537003301926,["gjx16@GJXAIOU",[[1,3143,"#"],[1,3145,"clude<s"],[1,3146,"dlib.h>\n\nint "],[1,3153,"\n"],[1,3156,"\n"],[1,3162," "],[1,3169," "],[1,3170," "],[1,3187,"("],[1,3197," "],[1,3198," "],[-1,3200,";"],[1,3201,"),"],[1,3240," "],[1,3242,"\n"]],[3124,3244],[3276,3276]]],[1537003343028,["gjx16@GJXAIOU",[[1,3239,"  \n"]],[3238,3238],[3241,3241]]],[1537003348538,["gjx16@GJXAIOU",[[1,3241,"//can"]],[3241,3241],[3246,3246]]],[1537003349300,["gjx16@GJXAIOU",[[-1,3243,"can"]],[3246,3246],[3243,3243]]],[1537003359509,["gjx16@GJXAIOU",[[1,3243,"参数名称：char"]],[3243,3243],[3252,3252]]],[1537003378085,["gjx16@GJXAIOU",[[1,3252,"型数组名，数组的大小（）"]],[3252,3252],[3264,3264]]],[1537003383769,["gjx16@GJXAIOU",[[-1,3257,"数组的大小（）"]],[3263,3263],[3257,3257]]],[1537003392252,["gjx16@GJXAIOU",[[1,3257,"存储长度（）"]],[3257,3257],[3263,3263]]],[1537003417809,["gjx16@GJXAIOU",[[1,3262,"小于数组的长度，单位为：字节"]],[3262,3262],[3276,3276]]],[1537003421676,["gjx16@GJXAIOU",[[1,3277,"，"]],[3277,3277],[3278,3278]]],[1537003440171,["gjx16@GJXAIOU",[[1,3278,"stdin表示标准输入输出"]],[3278,3278],[3291,3291]]],[1537003469486,["gjx16@GJXAIOU",[[1,3118,"  fgets是安全色"]],[3118,3118],[3129,3129]]],[1537003470456,["gjx16@GJXAIOU",[[-1,3128,"色"]],[3129,3129],[3128,3128]]],[1537003481426,["gjx16@GJXAIOU",[[1,3128,"的，不存在缓冲区溢出的"]],[3128,3128],[3139,3139]]],[1537003499421,["gjx16@GJXAIOU",[[1,3139,"问题，这要"]],[3139,3139],[3144,3144]]],[1537003500356,["gjx16@GJXAIOU",[[-1,3142,"这要"]],[3144,3144],[3142,3142]]],[1537003533970,["gjx16@GJXAIOU",[[1,3142,"只要第二个参数值的大小小于"]],[3142,3142],[3155,3155]]],[1537003569263,["gjx16@GJXAIOU",[[1,3155,"数组的长度"]],[3155,3155],[3160,3160]]],[1537008714068,["gjx16@GJXAIOU",[[-1,3374,"\n"]],[3374,3374],[3373,3373]]],[1537008714850,["gjx16@GJXAIOU",[[-1,3373,"\n"]],[3373,3373],[3372,3372]]],[1537008722080,["gjx16@GJXAIOU",[[-1,3184,"\n"]],[3184,3184],[3183,3183]]],[1537008726792,["gjx16@GJXAIOU",[[-1,3216,"\n"]],[3216,3216],[3215,3215]]],[1537008830139,["gjx16@GJXAIOU",[[1,3382,"\n"]],[3375,3375],[3376,3376]]],[1537008993533,["gjx16@GJXAIOU",[[-1,3030,"\n"]],[3030,3030],[3029,3029]]],[1537008994836,["gjx16@GJXAIOU",[[-1,3042,"\n"]],[3042,3042],[3041,3041]]],[1537009001181,["gjx16@GJXAIOU",[[-1,2956,"\n"]],[2956,2956],[2955,2955]]],[1537009003631,["gjx16@GJXAIOU",[[-1,2988,"\n"]],[2988,2988],[2987,2987]]],[1537009007852,["gjx16@GJXAIOU",[[-1,3060,"\n"]],[3060,3060],[3059,3059]]],[1537009010152,["gjx16@GJXAIOU",[[-1,3015,"\n"]],[3015,3015],[3014,3014]]],[1537009019969,["gjx16@GJXAIOU",[[1,3377,"\n"]],[3368,3368],[3369,3369]]],[1537009020354,["gjx16@GJXAIOU",[[1,3378,"\n"]],[3369,3369],[3370,3370]]],[1537009022157,["gjx16@GJXAIOU",[[1,3370,"****"]],[3370,3370],[3372,3372]]],[1537009025669,["gjx16@GJXAIOU",[[1,3372,"字符串"]],[3372,3372],[3375,3375]]],[1537009031446,["gjx16@GJXAIOU",[[1,3375,"操作函数"]],[3375,3375],[3379,3379]]],[1537009033553,["gjx16@GJXAIOU",[[1,3390,"\n"]],[3381,3381],[3382,3382]]],[1537009036650,["gjx16@GJXAIOU",[[1,3391,"\n"]],[3382,3382],[3383,3383]]],[1537009039291,["gjx16@GJXAIOU",[[1,3383,"```"]],[3383,3383],[3386,3386]]],[1537009039322,["gjx16@GJXAIOU",[[1,3386,"language\n```\n"]],[3386,3386],[3386,3394]]],[1537009040372,["gjx16@GJXAIOU",[[-1,3386,"language"],[1,3394,"c"]],[3386,3394],[3387,3387]]],[1537009040683,["gjx16@GJXAIOU",[[1,3388,"\n"]],[3387,3387],[3388,3388]]],[1537009047313,["gjx16@GJXAIOU",[[1,3388,"#include<>"]],[3388,3388],[3398,3398]]],[1537009052973,["gjx16@GJXAIOU",[[1,3397,"stdio.h"]],[3397,3397],[3404,3404]]],[1537009057197,["gjx16@GJXAIOU",[[1,3406,"\n"]],[3405,3405],[3406,3406]]],[1537009064907,["gjx16@GJXAIOU",[[1,3406,"#include<>"]],[3406,3406],[3416,3416]]],[1537009069775,["gjx16@GJXAIOU",[[1,3415,"string.h"]],[3415,3415],[3423,3423]]],[1537009407361,["gjx16@GJXAIOU",[[1,3425,"\n"]],[3424,3424],[3425,3425]]],[1537009407917,["gjx16@GJXAIOU",[[1,3426,"\n"]],[3425,3425],[3426,3426]]],[1537009428490,["gjx16@GJXAIOU",[[1,3427,"\n"]],[3425,3425],[3426,3426]]],[1537009433285,["gjx16@GJXAIOU",[[1,3426,"int main*"]],[3426,3426],[3435,3435]]],[1537009433994,["gjx16@GJXAIOU",[[-1,3434,"*"]],[3435,3435],[3434,3434]]],[1537009434653,["gjx16@GJXAIOU",[[1,3434,"()"]],[3434,3434],[3436,3436]]],[1537009435717,["gjx16@GJXAIOU",[[1,3438,"\n"]],[3436,3436],[3437,3437]]],[1537009439798,["gjx16@GJXAIOU",[[1,3437,"{}"]],[3437,3437],[3439,3439]]],[1537009440981,["gjx16@GJXAIOU",[[1,3438,"\n"]],[3438,3438],[3439,3439]]],[1537009441164,["gjx16@GJXAIOU",[[1,3439,"\n"]],[3439,3439],[3440,3440]]],[1537009441367,["gjx16@GJXAIOU",[[1,3440,"\n"]],[3440,3440],[3441,3441]]],[1537009441554,["gjx16@GJXAIOU",[[1,3441,"\n"]],[3441,3441],[3442,3442]]],[1537009446337,["gjx16@GJXAIOU",[[1,3439,"  int "]],[3439,3439],[3445,3445]]],[1537009447836,["gjx16@GJXAIOU",[[-1,3441,"int "]],[3445,3445],[3441,3441]]],[1537009462228,["gjx16@GJXAIOU",[[1,3441,"char s[100] = \"\";"]],[3441,3441],[3458,3458]]],[1537009468932,["gjx16@GJXAIOU",[[1,3456,"hello world"]],[3456,3456],[3467,3467]]],[1537009473443,["gjx16@GJXAIOU",[[1,3470,"  \n"]],[3469,3469],[3472,3472]]],[1537009507523,["gjx16@GJXAIOU",[[1,3472,"int len = strlen"]],[3472,3472],[3488,3488]]],[1537009509563,["gjx16@GJXAIOU",[[1,3488,"()"]],[3488,3488],[3490,3490]]],[1537009512791,["gjx16@GJXAIOU",[[1,3489,"s"]],[3489,3489],[3490,3490]]],[1537009515338,["gjx16@GJXAIOU",[[1,3491,";"]],[3491,3491],[3492,3492]]],[1537009516042,["gjx16@GJXAIOU",[[1,3493,"  \n"]],[3492,3492],[3495,3495]]],[1537009524158,["gjx16@GJXAIOU",[[1,3495,"printf();"]],[3495,3495],[3504,3504]]],[1537009527265,["gjx16@GJXAIOU",[[1,3502,"\"\""]],[3502,3502],[3504,3504]]],[1537009539216,["gjx16@GJXAIOU",[[1,3503,"len = %d\\v"]],[3503,3503],[3513,3513]]],[1537009540177,["gjx16@GJXAIOU",[[-1,3512,"v"]],[3513,3513],[3512,3512]]],[1537009540666,["gjx16@GJXAIOU",[[1,3512,"n"]],[3512,3512],[3513,3513]]],[1537009548847,["gjx16@GJXAIOU",[[1,3514,",len"]],[3514,3514],[3518,3518]]],[1537009552142,["gjx16@GJXAIOU",[[1,3521,"  \n"]],[3520,3520],[3523,3523]]],[1537009552981,["gjx16@GJXAIOU",[[-1,3521,"  "],[1,3523,"\n"]],[3523,3523],[3522,3522]]],[1537009557169,["gjx16@GJXAIOU",[[1,3522,"  retunrn"]],[3522,3522],[3531,3531]]],[1537009558120,["gjx16@GJXAIOU",[[-1,3528,"nrn"]],[3531,3531],[3528,3528]]],[1537009560172,["gjx16@GJXAIOU",[[1,3528,"rn 0;"]],[3528,3528],[3533,3533]]],[1537009563964,["gjx16@GJXAIOU",[[-1,3535,"\n"]],[3535,3535],[3534,3534]]],[1537009564142,["gjx16@GJXAIOU",[[-1,3534,"\n"]],[3534,3534],[3533,3533]]],[1537009577064,["gjx16@GJXAIOU",[[1,3492,"    "]],[3492,3492],[3496,3496]]],[1537009642992,["gjx16@GJXAIOU",[[1,3382,"sizeof h"]],[3382,3382],[3390,3390]]],[1537009644057,["gjx16@GJXAIOU",[[-1,3388," h"]],[3390,3390],[3388,3388]]],[1537009647743,["gjx16@GJXAIOU",[[1,3388," fanhu"]],[3388,3388],[3394,3394]]],[1537009649102,["gjx16@GJXAIOU",[[-1,3389,"fanhu"]],[3394,3394],[3389,3389]]],[1537009655261,["gjx16@GJXAIOU",[[1,3389,"返回的知识"]],[3389,3389],[3394,3394]]],[1537009656357,["gjx16@GJXAIOU",[[-1,3392,"知识"]],[3394,3394],[3392,3392]]],[1537009658932,["gjx16@GJXAIOU",[[1,3392,"只是"]],[3392,3392],[3394,3394]]],[1537009661975,["gjx16@GJXAIOU",[[-1,3392,"只是"]],[3394,3394],[3392,3392]]],[1537009681858,["gjx16@GJXAIOU",[[1,3392,"只是数组的大小，而strlen"]],[3392,3392],[3407,3407]]],[1537009747617,["gjx16@GJXAIOU",[[1,3407,"返回的是字符串的有效"]],[3407,3407],[3417,3417]]],[1537009758597,["gjx16@GJXAIOU",[[1,3417,"元素的长度（）"]],[3417,3417],[3424,3424]]],[1537009772033,["gjx16@GJXAIOU",[[1,3423,"不包括、0"]],[3423,3423],[3428,3428]]],[1537009773321,["gjx16@GJXAIOU",[[-1,3426,"、0"]],[3428,3428],[3426,3426]]],[1537009774885,["gjx16@GJXAIOU",[[1,3426,"\\0"]],[3426,3426],[3428,3428]]],[1537010208703,["gjx16@GJXAIOU",[[1,3382," "]],[3382,3382],[3383,3383]]],[1537010219590,["gjx16@GJXAIOU",[[1,3431," \n"]],[3430,3430],[3432,3432]]],[1537010220522,["gjx16@GJXAIOU",[[-1,3431," "],[1,3432,"\n"]],[3432,3432],[3432,3432]]],[1537010224922,["gjx16@GJXAIOU",[[1,3432,"strlen:"]],[3432,3432],[3439,3439]]],[1537010227838,["gjx16@GJXAIOU",[[1,3611,"\n"]],[3601,3601],[3602,3602]]],[1537010234057,["gjx16@GJXAIOU",[[1,3602,"strcat:"]],[3602,3602],[3609,3609]]],[1537010234975,["gjx16@GJXAIOU",[[1,3619,"\n"]],[3609,3609],[3610,3610]]],[1537010237948,["gjx16@GJXAIOU",[[1,3610,"```"]],[3610,3610],[3613,3613]]],[1537010237981,["gjx16@GJXAIOU",[[1,3613,"language\n```\n"]],[3613,3613],[3613,3621]]],[1537010239367,["gjx16@GJXAIOU",[[-1,3613,"language"],[1,3621,"c"]],[3613,3621],[3614,3614]]],[1537010239666,["gjx16@GJXAIOU",[[1,3615,"\n"]],[3614,3614],[3615,3615]]],[1537010242869,["gjx16@GJXAIOU",[[1,3610,"\n"]],[3609,3609],[3610,3610]]],[1537010246302,["gjx16@GJXAIOU",[[1,3616,"#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}"]],[3616,3616],[3767,3767]]],[1537010326594,["gjx16@GJXAIOU",[[-1,3699," int len = strlen(s);    \n  printf(\"len = %d\\n\",len);"],[1,3752,"c"]],[3699,3752],[3700,3700]]],[1537010327118,["gjx16@GJXAIOU",[[1,3700,"har"]],[3700,3700],[3703,3703]]],[1537010329825,["gjx16@GJXAIOU",[[1,3699," "]],[3699,3699],[3700,3700]]],[1537010332117,["gjx16@GJXAIOU",[[1,3704," "]],[3704,3704],[3705,3705]]],[1537010390638,["gjx16@GJXAIOU",[[1,3705," "]],[3705,3705],[3706,3706]]],[1537010391584,["gjx16@GJXAIOU",[[-1,3705," "]],[3706,3706],[3705,3705]]],[1537010397548,["gjx16@GJXAIOU",[[1,3705,"s1[1000"]],[3705,3705],[3712,3712]]],[1537010398636,["gjx16@GJXAIOU",[[-1,3711,"0"]],[3712,3712],[3711,3711]]],[1537010407767,["gjx16@GJXAIOU",[[1,3711,"] = ''"]],[3711,3711],[3717,3717]]],[1537010409091,["gjx16@GJXAIOU",[[-1,3715,"''"]],[3717,3717],[3715,3715]]],[1537010411027,["gjx16@GJXAIOU",[[1,3715,"::"]],[3715,3715],[3717,3717]]],[1537010411907,["gjx16@GJXAIOU",[[-1,3715,"::"]],[3717,3717],[3715,3715]]],[1537010416243,["gjx16@GJXAIOU",[[1,3715,"::"]],[3715,3715],[3717,3717]]],[1537010417334,["gjx16@GJXAIOU",[[-1,3715,"::"]],[3717,3717],[3715,3715]]],[1537010419891,["gjx16@GJXAIOU",[[1,3715,"\"\";"]],[3715,3715],[3718,3718]]],[1537010429194,["gjx16@GJXAIOU",[[1,3716,"nihao"]],[3716,3716],[3721,3721]]],[1537010432467,["gjx16@GJXAIOU",[[1,3724,"  \n"]],[3723,3723],[3726,3726]]],[1537010573985,["gjx16@GJXAIOU",[[1,3726,"strcat();"]],[3726,3726],[3735,3735]]],[1537010613296,["gjx16@GJXAIOU",[[1,3733,"s,s1"]],[3733,3733],[3737,3737]]],[1537010622435,["gjx16@GJXAIOU",[[1,3740,"  \n"]],[3739,3739],[3742,3742]]],[1537010640833,["gjx16@GJXAIOU",[[1,3742,"//两个字符串合并，结果放入"]],[3742,3742],[3756,3756]]],[1537010655589,["gjx16@GJXAIOU",[[1,3756,"第一个参数之中，"]],[3756,3756],[3764,3764]]],[1537010730733,["gjx16@GJXAIOU",[[1,3764,"但是如果第一个字符串的大小如法"]],[3764,3764],[3779,3779]]],[1537010731743,["gjx16@GJXAIOU",[[-1,3777,"如法"]],[3779,3779],[3777,3777]]],[1537010748355,["gjx16@GJXAIOU",[[1,3777,"无法容纳两个字符串的"]],[3777,3777],[3787,3787]]],[1537010790985,["gjx16@GJXAIOU",[[1,3787,"实际元素大小，也会产生溢出问题。"]],[3787,3787],[3803,3803]]],[1537010874227,["gjx16@GJXAIOU",[[1,3634,"\n"],[1,3658," "],[1,3665,"\n"],[1,3666,"\n"],[1,3674," "],[1,3681," "],[1,3682," "],[1,3690," "],[1,3697,"\n"],[1,3704," "],[1,3713," "],[1,3714," "],[1,3723,"\n"],[1,3740,"\n"],[1,3807,"printf(\"%s\\n\",s);\n\n  "],[1,3814," "],[1,3816,"\n"]],[3616,3818],[3855,3855]]],[1537010877157,["gjx16@GJXAIOU",[[-1,3706,"\n"]],[3706,3706],[3705,3705]]],[1537010879427,["gjx16@GJXAIOU",[[-1,3735,"\n"]],[3735,3735],[3734,3734]]],[1537010883806,["gjx16@GJXAIOU",[[-1,3751,"\n"]],[3751,3751],[3750,3750]]],[1537010890063,["gjx16@GJXAIOU",[[-1,3836,"\n"]],[3836,3836],[3835,3835]]],[1537010898185,["gjx16@GJXAIOU",[[1,3866,"\n"]],[3855,3855],[3856,3856]]],[1537010898359,["gjx16@GJXAIOU",[[1,3867,"\n"]],[3856,3856],[3857,3857]]],[1537010968844,["gjx16@GJXAIOU",[[1,3868,"\n"]],[3855,3855],[3856,3856]]],[1537010969181,["gjx16@GJXAIOU",[[1,3869,"\n"]],[3856,3856],[3857,3857]]],[1537010990018,["gjx16@GJXAIOU",[[1,3857,"strncat "]],[3857,3857],[3865,3865]]],[1537011227304,["gjx16@GJXAIOU",[[1,3878,"\n"]],[3865,3865],[3866,3866]]],[1537011227966,["gjx16@GJXAIOU",[[1,3879,"\n"]],[3866,3866],[3867,3867]]],[1537011230565,["gjx16@GJXAIOU",[[1,3867,"```"]],[3867,3867],[3870,3870]]],[1537011230597,["gjx16@GJXAIOU",[[1,3870,"language\n```\n"]],[3870,3870],[3870,3878]]],[1537011231768,["gjx16@GJXAIOU",[[-1,3870,"language"],[1,3878,"c"]],[3870,3878],[3871,3871]]],[1537011232073,["gjx16@GJXAIOU",[[1,3872,"\n"]],[3871,3871],[3872,3872]]],[1537011232466,["gjx16@GJXAIOU",[[1,3873,"\n"]],[3872,3872],[3873,3873]]],[1537011240001,["gjx16@GJXAIOU",[[1,3872,"#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}"]],[3872,3872],[4107,4107]]],[1537011242499,["gjx16@GJXAIOU",[[-1,3890,"\n"]],[3890,3890],[3889,3889]]],[1537011248548,["gjx16@GJXAIOU",[[-1,4006,"  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n"]],[4006,4070],[4006,4006]]],[1537011251090,["gjx16@GJXAIOU",[[1,3995,"n"]],[3995,3995],[3996,3996]]],[1537011257560,["gjx16@GJXAIOU",[[1,4004,",2"]],[4004,4004],[4006,4006]]],[1537011293892,["gjx16@GJXAIOU",[[1,4008,"//只复制前两个字符；"]],[4008,4008],[4019,4019]]]],null,"gjx16@GJXAIOU"],["d68124f8-6fbc-43c8-b4fb-a95d673c915f",1537012508959,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar  mystrcat(char  a[],  char  b[])\n\nint  mystrlen(char  c[])\n\nint  main()\n\n{\n\nchar  str1[]  =  \"hello  \";\n\nchar  str2[]  =  \"world\";\n\nmystrcat(str1,str2);\n\nprintf(\"%s\\n\",str1);\n\nreturn  0;\n\n}\n\nvoid  mystrcpy(char  a[],char  b[])\n\n{\n\n  int  len1  =  mystrlen(str1);\n\n  int  len2  =  mystrlen(str2);\n\n  int  i  =  0;\n\nfor(i  =  1;  i  <  len2  +  1;  i++)\n\n  {\n\n  a[len1  +  i]  =  b[i-1];\n\n  }\n\n}\n\nint  mystrlen(char  c[])\n\n{\n\n  int  len  =  0;\n\n  while(c[len++]);\n\n  len  --;\n\n  return  len;\n\n}\n```\n\n**随机数产生函数rand和srand**\nrand 是伪随机数产生器，每次调用rand产生的随机数是一样的；\n如果在调用rand之前先调用srand就出现任意的随机数，而自要保证每次调用srand函数的时候，参数的值是不同的，那么rand函数就一定会产生不同的随机数\n\n- 仅有 rand 的时候\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n\n  int i = 0;\n  for(i = 0; i < 10; i++)\n  {\n    int value = rand();\n    printf(\"%d\\n\",value);\n  \n  }\n  return 0;\n}\n\n\n```\n\n- 同时使用`rand`和`srand`的时候\n因为要求`srand`的参数时刻变化，一般选择将系统时间转换为整数赋值作为参数\n\n```c\n#include<stdio.h>\n#include<time.h>\n#include<stdlib.h>\n\nint main()\n{\n  time_t tm = time(NULL);   //得到系统时间\n  srand(tm);    //随机数种子发生器\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      int value = rand();\n      printf(\"%d\\n\",value);\n    }\n  return 0;\n}\n\n```\n\n\n**字符串数组的输入与输出**\n\n- 输入函数：scanf  、gets 、fgets\n\n **scanf :**  可以使用转义输出，既可以输出整数或者字符串，存在缓冲区溢出的问题；遇到空格和回车均认为输入结束；\n  **gets ：** 只能输入字符串，存在缓冲区溢出的问题；只有遇到回车的时候才认为输出结束；\n  **fgets ：** 通过设置第二个参数的大小可以防止缓冲区溢出的出现；\n\n  - scanf\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s1[20]  =  {0};\n\n  scanf(\"%s\",s1);\n\n  printf(\"%s\\n\",s1);\n\n  return  0;\n\n}\n\n```\n\n  - gets \n     \n```c\n#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}\n```\n\n局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数   `atio` 函数将字符串转换为对应的整数值\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  ss[20]  =  {0};\n  gets(ss);\n  int  sss;\n  sss  =  atoi(ss);\n  printf(\"%d\\n\",sss);\n\nreturn  0;\n\n}\n```\n\n  - fgets \n  fgets是安全的，不存在缓冲区溢出的问题，只要第二个参数值的大小小于数组的长度\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[20]  =  {0};\n\n  fgets(s,(sizeof(s)  -  1),stdin);\n  //参数名称：char型数组名，存储长度（小于数组的长度，单位为：字节），stdin表示标准输入输出\n\n  printf(\"%s\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**字符串操作函数**\n sizeof 返回的只是数组的大小，而strlen返回的是字符串的有效元素的长度（不包括\\0）\n\nstrlen:\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}\n\n```\nstrcat:\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n```\n\nstrncat \n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strncat(s,s1,2);//只复制前两个字符；\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1537012483030,["gjx16@GJXAIOU",[[1,4040,"file"]],[4040,4040],[4044,4044]]],[1537012484736,["gjx16@GJXAIOU",[[-1,4040,"file"]],[4044,4044],[4040,4040]]]],null,"gjx16@GJXAIOU"],["9934bf68-6a9f-4e42-b10e-3ea26ccacec8",1537077947502,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar  mystrcat(char  a[],  char  b[])\n\nint  mystrlen(char  c[])\n\nint  main()\n\n{\n\nchar  str1[]  =  \"hello  \";\n\nchar  str2[]  =  \"world\";\n\nmystrcat(str1,str2);\n\nprintf(\"%s\\n\",str1);\n\nreturn  0;\n\n}\n\nvoid  mystrcpy(char  a[],char  b[])\n\n{\n\n  int  len1  =  mystrlen(str1);\n\n  int  len2  =  mystrlen(str2);\n\n  int  i  =  0;\n\nfor(i  =  1;  i  <  len2  +  1;  i++)\n\n  {\n\n  a[len1  +  i]  =  b[i-1];\n\n  }\n\n}\n\nint  mystrlen(char  c[])\n\n{\n\n  int  len  =  0;\n\n  while(c[len++]);\n\n  len  --;\n\n  return  len;\n\n}\n```\n\n**随机数产生函数rand和srand**\nrand 是伪随机数产生器，每次调用rand产生的随机数是一样的；\n如果在调用rand之前先调用srand就出现任意的随机数，而自要保证每次调用srand函数的时候，参数的值是不同的，那么rand函数就一定会产生不同的随机数\n\n- 仅有 rand 的时候\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n\n  int i = 0;\n  for(i = 0; i < 10; i++)\n  {\n    int value = rand();\n    printf(\"%d\\n\",value);\n  \n  }\n  return 0;\n}\n\n\n```\n\n- 同时使用`rand`和`srand`的时候\n因为要求`srand`的参数时刻变化，一般选择将系统时间转换为整数赋值作为参数\n\n```c\n#include<stdio.h>\n#include<time.h>\n#include<stdlib.h>\n\nint main()\n{\n  time_t tm = time(NULL);   //得到系统时间\n  srand(tm);    //随机数种子发生器\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      int value = rand();\n      printf(\"%d\\n\",value);\n    }\n  return 0;\n}\n\n```\n\n\n**字符串数组的输入与输出**\n\n- 输入函数：scanf  、gets 、fgets\n\n **scanf :**  可以使用转义输出，既可以输出整数或者字符串，存在缓冲区溢出的问题；遇到空格和回车均认为输入结束；\n  **gets ：** 只能输入字符串，存在缓冲区溢出的问题；只有遇到回车的时候才认为输出结束；\n  **fgets ：** 通过设置第二个参数的大小可以防止缓冲区溢出的出现；\n\n  - scanf\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s1[20]  =  {0};\n\n  scanf(\"%s\",s1);\n\n  printf(\"%s\\n\",s1);\n\n  return  0;\n\n}\n\n```\n\n  - gets \n     \n```c\n#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}\n```\n\n局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数   `atio` 函数将字符串转换为对应的整数值\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  ss[20]  =  {0};\n  gets(ss);\n  int  sss;\n  sss  =  atoi(ss);\n  printf(\"%d\\n\",sss);\n\nreturn  0;\n\n}\n```\n\n  - fgets \n  fgets是安全的，不存在缓冲区溢出的问题，只要第二个参数值的大小小于数组的长度\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[20]  =  {0};\n\n  fgets(s,(sizeof(s)  -  1),stdin);\n  //参数名称：char型数组名，存储长度（小于数组的长度，单位为：字节），stdin表示标准输入输出\n\n  printf(\"%s\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**字符串操作函数**\n sizeof 返回的只是数组的大小，而strlen返回的是字符串的有效元素的长度（不包括\\0）\n\nstrlen:\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}\n\n```\nstrcat:\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n```\n\nstrncat \n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strncat(s,s1,2);//只复制前两个字符；\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1537077904165,["gjx16@GJXAIOU",[[1,4075,"\n"]],[4061,4061],[4062,4062]]],[1537077904302,["gjx16@GJXAIOU",[[1,4076,"\n"]],[4062,4062],[4063,4063]]],[1537078009432,["gjx16@GJXAIOU",[[1,4063,"strcmp"]],[4063,4063],[4069,4069]]],[1537078010840,["gjx16@GJXAIOU",[[1,4083,"\n"]],[4069,4069],[4070,4070]]],[1537078011651,["gjx16@GJXAIOU",[[1,4084,"\n"]],[4070,4070],[4071,4071]]],[1537078013407,["gjx16@GJXAIOU",[[1,4071,"···"]],[4071,4071],[4074,4074]]],[1537078014583,["gjx16@GJXAIOU",[[-1,4071,"···"]],[4074,4074],[4071,4071]]],[1537078016367,["gjx16@GJXAIOU",[[1,4071,"```"]],[4071,4071],[4074,4074]]],[1537078016401,["gjx16@GJXAIOU",[[1,4074,"language\n```\n"]],[4074,4074],[4074,4082]]],[1537078017275,["gjx16@GJXAIOU",[[-1,4074,"language"],[1,4082,"c"]],[4074,4082],[4075,4075]]],[1537078017522,["gjx16@GJXAIOU",[[1,4076,"\n"]],[4075,4075],[4076,4076]]],[1537078018945,["gjx16@GJXAIOU",[[1,4076,"i"]],[4076,4076],[4077,4077]]],[1537078019709,["gjx16@GJXAIOU",[[-1,4076,"i"]],[4077,4077],[4076,4076]]],[1537078026319,["gjx16@GJXAIOU",[[1,4076,"if()"]],[4076,4076],[4080,4080]]],[1537078031104,["gjx16@GJXAIOU",[[1,4079,"strcmp("]],[4079,4079],[4086,4086]]],[1537078031226,["gjx16@GJXAIOU",[[1,4087,")"]],[4086,4086],[4087,4087]]],[1537078037884,["gjx16@GJXAIOU",[[1,4086,"s1,s2"]],[4086,4086],[4091,4091]]],[1537078041187,["gjx16@GJXAIOU",[[1,4092," = "]],[4092,4092],[4095,4095]]],[1537078044989,["gjx16@GJXAIOU",[[-1,4093,"= "]],[4095,4095],[4093,4093]]],[1537078049040,["gjx16@GJXAIOU",[[1,4093,"== 0"]],[4093,4093],[4097,4097]]],[1537078058541,["gjx16@GJXAIOU",[[1,4098,"  //返回值Wie"]],[4098,4098],[4108,4108]]],[1537078059630,["gjx16@GJXAIOU",[[-1,4105,"Wie"]],[4108,4108],[4105,4105]]],[1537078064511,["gjx16@GJXAIOU",[[1,4105,"为0表示两个"]],[4105,4105],[4111,4111]]],[1537078070332,["gjx16@GJXAIOU",[[1,4111,"字符串相同"]],[4111,4111],[4116,4116]]],[1537078072888,["gjx16@GJXAIOU",[[1,4117,"\n"]],[4116,4116],[4117,4117]]],[1537078074950,["gjx16@GJXAIOU",[[1,4117,"{}"]],[4117,4117],[4119,4119]]],[1537078076256,["gjx16@GJXAIOU",[[1,4118,"\n"]],[4118,4118],[4119,4119]]],[1537078076450,["gjx16@GJXAIOU",[[1,4119,"\n"]],[4119,4119],[4120,4120]]],[1537078076981,["gjx16@GJXAIOU",[[1,4120,"\n"]],[4120,4120],[4121,4121]]],[1537078084654,["gjx16@GJXAIOU",[[1,4119,"printf（）；"]],[4119,4119],[4128,4128]]],[1537078086543,["gjx16@GJXAIOU",[[-1,4125,"（）；"]],[4128,4128],[4125,4125]]],[1537078089878,["gjx16@GJXAIOU",[[1,4125,"();"]],[4125,4125],[4128,4128]]],[1537078092421,["gjx16@GJXAIOU",[[1,4126,"''"]],[4126,4126],[4128,4128]]],[1537078093480,["gjx16@GJXAIOU",[[-1,4126,"''"]],[4128,4128],[4126,4126]]],[1537078094789,["gjx16@GJXAIOU",[[1,4126,"\"\""]],[4126,4126],[4128,4128]]],[1537078098594,["gjx16@GJXAIOU",[[1,4127,"xiang"]],[4127,4127],[4132,4132]]],[1537078100511,["gjx16@GJXAIOU",[[-1,4127,"xiang"]],[4132,4132],[4127,4127]]],[1537078105182,["gjx16@GJXAIOU",[[1,4127,"相同、"]],[4127,4127],[4130,4130]]],[1537078107113,["gjx16@GJXAIOU",[[-1,4129,"、"]],[4130,4130],[4129,4129]]],[1537078109475,["gjx16@GJXAIOU",[[1,4129,"\\n"]],[4129,4129],[4131,4131]]],[1537078113366,["gjx16@GJXAIOU",[[1,4156,"\n"]],[4141,4141],[4142,4142]]],[1537078113535,["gjx16@GJXAIOU",[[1,4157,"\n"]],[4142,4142],[4143,4143]]],[1537078114142,["gjx16@GJXAIOU",[[1,4158,"\n"]],[4143,4143],[4144,4144]]],[1537078118032,["gjx16@GJXAIOU",[[1,4144,"strncmp"]],[4144,4144],[4151,4151]]],[1537078119313,["gjx16@GJXAIOU",[[1,4166,"\n"]],[4151,4151],[4152,4152]]],[1537078122226,["gjx16@GJXAIOU",[[1,4167,"\n"]],[4152,4152],[4153,4153]]],[1537078124057,["gjx16@GJXAIOU",[[1,4153,"```"]],[4153,4153],[4156,4156]]],[1537078124094,["gjx16@GJXAIOU",[[1,4156,"language\n```\n"]],[4156,4156],[4156,4164]]],[1537078125369,["gjx16@GJXAIOU",[[-1,4156,"language"],[1,4164,"c"]],[4156,4164],[4157,4157]]],[1537078129542,["gjx16@GJXAIOU",[[1,4151,"  "]],[4151,4151],[4153,4153]]],[1537078130720,["gjx16@GJXAIOU",[[1,4155,"\n"]],[4153,4153],[4154,4154]]],[1537078131769,["gjx16@GJXAIOU",[[1,4154,"zhi"]],[4154,4154],[4157,4157]]],[1537078132995,["gjx16@GJXAIOU",[[-1,4154,"zhi"]],[4157,4157],[4154,4154]]],[1537078143591,["gjx16@GJXAIOU",[[1,4154,"只比较前n个字符"]],[4154,4154],[4162,4162]]],[1537078154791,["gjx16@GJXAIOU",[[1,4169,"strcmp()"]],[4169,4169],[4177,4177]]],[1537078161796,["gjx16@GJXAIOU",[[1,4169,"if("]],[4169,4169],[4172,4172]]],[1537078165519,["gjx16@GJXAIOU",[[1,4180,")"]],[4180,4180],[4181,4181]]],[1537078172969,["gjx16@GJXAIOU",[[1,4179,"s1,s2,5"]],[4179,4179],[4186,4186]]],[1537078176046,["gjx16@GJXAIOU",[[1,4187," = "]],[4187,4187],[4190,4190]]],[1537078176946,["gjx16@GJXAIOU",[[-1,4189," "]],[4190,4190],[4189,4189]]],[1537078179104,["gjx16@GJXAIOU",[[1,4189,"= 0"]],[4189,4189],[4192,4192]]],[1537078185357,["gjx16@GJXAIOU",[[1,4194,"\n"]],[4193,4193],[4194,4194]]],[1537078246449,[null,[[1,4193,"\n\n"],[-1,4194,"\n"]],[4193,4193],[4194,4194]]],[1537078246449,[null,[[-1,4193,"\n\n"],[1,4196,"\n"]],[4194,4194],[4193,4193]]],[1537078187343,["gjx16@GJXAIOU",[[1,4194,"{}"]],[4194,4194],[4196,4196]]],[1537078188792,["gjx16@GJXAIOU",[[1,4195,"\n"]],[4195,4195],[4196,4196]]],[1537078189004,["gjx16@GJXAIOU",[[1,4196,"\n"]],[4196,4196],[4197,4197]]],[1537078192735,["gjx16@GJXAIOU",[[1,4196,"  "]],[4196,4196],[4198,4198]]],[1537078216695,["gjx16@GJXAIOU",[[1,4076,"\n"]],[4075,4075],[4076,4076]]],[1537078218305,["gjx16@GJXAIOU",[[1,4076,"3"]],[4076,4076],[4077,4077]]],[1537078219225,["gjx16@GJXAIOU",[[-1,4076,"3"]],[4077,4077],[4076,4076]]],[1537078227908,["gjx16@GJXAIOU",[[1,4076,"#include<>"]],[4076,4076],[4086,4086]]],[1537078232968,["gjx16@GJXAIOU",[[1,4085,"stdio.h"]],[4085,4085],[4092,4092]]],[1537078234742,["gjx16@GJXAIOU",[[1,4094,"\n"]],[4093,4093],[4094,4094]]],[1537078234986,["gjx16@GJXAIOU",[[1,4095,"\n"]],[4094,4094],[4095,4095]]],[1537078236542,["gjx16@GJXAIOU",[[1,4095,"#"]],[4095,4095],[4096,4096]]],[1537078237886,["gjx16@GJXAIOU",[[-1,4095,"#"]],[4096,4096],[4095,4095]]],[1537078241161,["gjx16@GJXAIOU",[[1,4095,"int main()"]],[4095,4095],[4105,4105]]],[1537078242283,["gjx16@GJXAIOU",[[1,4106,"\n"]],[4105,4105],[4106,4106]]],[1537078243478,["gjx16@GJXAIOU",[[1,4106,"{}"]],[4106,4106],[4108,4108]]],[1537078245030,["gjx16@GJXAIOU",[[-1,4107,"}"]],[4108,4108],[4107,4107]]],[1537078306452,[null,[[-1,4225,"`"],[1,4226,"\n"],[1,4233,"`"]],[4225,4225],[4234,4234]]],[1537078306452,[null,[[1,4225,"`"],[-1,4225,"\n"],[-1,4233,"`"]],[4234,4234],[4225,4225]]],[1537078250427,["gjx16@GJXAIOU",[[1,4108,"  "]],[4108,4108],[4110,4110]]],[1537078253081,["gjx16@GJXAIOU",[[1,4151,"  "]],[4151,4151],[4153,4153]]],[1537078260741,["gjx16@GJXAIOU",[[1,4155,"    "]],[4155,4155],[4159,4159]]],[1537078262327,["gjx16@GJXAIOU",[[1,4176,"  "]],[4176,4176],[4178,4178]]],[1537078264313,["gjx16@GJXAIOU",[[-1,4176,"  "]],[4178,4178],[4176,4176]]],[1537078264743,["gjx16@GJXAIOU",[[-1,4175,"\n"]],[4176,4176],[4175,4175]]],[1537078265280,["gjx16@GJXAIOU",[[1,4175,"  "]],[4175,4175],[4177,4177]]],[1537078269751,["gjx16@GJXAIOU",[[1,4179,"  \n"]],[4178,4178],[4181,4181]]],[1537078271126,["gjx16@GJXAIOU",[[-1,4179,"  "],[1,4181,"\n"]],[4181,4181],[4180,4180]]],[1537078275121,["gjx16@GJXAIOU",[[1,4180,"  eks"]],[4180,4180],[4185,4185]]],[1537078276860,["gjx16@GJXAIOU",[[-1,4182,"eks"]],[4185,4185],[4182,4182]]],[1537078278904,["gjx16@GJXAIOU",[[1,4182,"sl"]],[4182,4182],[4184,4184]]],[1537078279906,["gjx16@GJXAIOU",[[-1,4182,"sl"]],[4184,4184],[4182,4182]]],[1537078281465,["gjx16@GJXAIOU",[[1,4182,"else"]],[4182,4182],[4186,4186]]],[1537078283615,["gjx16@GJXAIOU",[[1,4187,"  \n"]],[4186,4186],[4189,4189]]],[1537078286046,["gjx16@GJXAIOU",[[1,4189,"{}"]],[4189,4189],[4191,4191]]],[1537078288069,["gjx16@GJXAIOU",[[1,4190,"\n  \n  "]],[4190,4190],[4196,4196]]],[1537078297147,["gjx16@GJXAIOU",[[1,4193,"  printf();"]],[4193,4193],[4204,4204]]],[1537078300098,["gjx16@GJXAIOU",[[1,4202,"\"\""]],[4202,4202],[4204,4204]]],[1537078303954,["gjx16@GJXAIOU",[[1,4203,"bux"]],[4203,4203],[4206,4206]]],[1537078305107,["gjx16@GJXAIOU",[[-1,4203,"bux"]],[4206,4206],[4203,4203]]],[1537078366466,[null,[[-1,4266,"`"],[1,4267,"\n"],[1,4274,"`"]],[4266,4266],[4275,4275]]],[1537078366466,[null,[[1,4266,"`"],[-1,4266,"\n"],[-1,4274,"`"]],[4275,4275],[4266,4266]]],[1537078317139,["gjx16@GJXAIOU",[[1,4203,"不相同、"]],[4203,4203],[4207,4207]]],[1537078318980,["gjx16@GJXAIOU",[[-1,4206,"、"]],[4207,4207],[4206,4206]]],[1537078320268,["gjx16@GJXAIOU",[[1,4206,"\\n"]],[4206,4206],[4208,4208]]],[1537078327177,["gjx16@GJXAIOU",[[1,4216,"  \n"]],[4215,4215],[4218,4218]]],[1537078328667,["gjx16@GJXAIOU",[[-1,4216,"  "],[1,4218,"\n"]],[4218,4218],[4217,4217]]],[1537078330773,["gjx16@GJXAIOU",[[1,4217,"}"]],[4217,4217],[4218,4218]]],[1537078666510,[null,[[-1,4274,"`"],[1,4275,"\n"],[1,4282,"`"]],[4274,4274],[4283,4283]]],[1537078666510,[null,[[1,4274,"`"],[-1,4274,"\n"],[-1,4282,"`"]],[4283,4283],[4274,4274]]],[1537078612554,["gjx16@GJXAIOU",[[1,4095,"#"],[1,4097,"clude<s"],[1,4098,"ring.h>\n\nint "],[1,4106,"\n"],[1,4107,"\n\n  char  s1[]  =  \"hello\";\n\n  char  s2[]  =  \"hello  world\";\n"],[1,4127," "],[1,4129," "],[1,4151,"\n"],[-1,4155,"  "],[1,4157,"\n"],[1,4174,"\n"],[1,4187,"\n"],[-1,4191,"  "],[1,4193,"\n"],[1,4211,"\n"]],[4076,4218],[4306,4306]]],[1537078615398,["gjx16@GJXAIOU",[[-1,4157,"\n"]],[4157,4157],[4156,4156]]],[1537078617859,["gjx16@GJXAIOU",[[-1,4190,"\n"]],[4190,4190],[4189,4189]]],[1537078620046,["gjx16@GJXAIOU",[[-1,4235,"\n"]],[4235,4235],[4234,4234]]],[1537078623241,["gjx16@GJXAIOU",[[1,4242,"  "]],[4242,4242],[4244,4244]]],[1537078624663,["gjx16@GJXAIOU",[[-1,4239,"\n"]],[4239,4239],[4238,4238]]],[1537078626705,["gjx16@GJXAIOU",[[-1,4259,"\n"]],[4259,4259],[4258,4258]]],[1537078629992,["gjx16@GJXAIOU",[[1,4279,"  "]],[4278,4278],[4280,4280]]],[1537078632491,["gjx16@GJXAIOU",[[-1,4271,"\n"]],[4271,4271],[4270,4270]]],[1537078634506,["gjx16@GJXAIOU",[[-1,4275,"\n"]],[4275,4275],[4274,4274]]],[1537078636432,["gjx16@GJXAIOU",[[-1,4296,"\n"]],[4296,4296],[4295,4295]]],[1537078646475,["gjx16@GJXAIOU",[[1,4334,"\n"]],[4333,4333],[4334,4334]]],[1537078652332,["gjx16@GJXAIOU",[[1,4334,"#include<>"]],[4334,4334],[4344,4344]]],[1537078656344,["gjx16@GJXAIOU",[[1,4343,"stdio.h"]],[4343,4343],[4350,4350]]],[1537078658322,["gjx16@GJXAIOU",[[1,4352,"\n"]],[4351,4351],[4352,4352]]],[1537078663736,["gjx16@GJXAIOU",[[1,4352,"#include<>"]],[4352,4352],[4362,4362]]],[1537078665985,["gjx16@GJXAIOU",[[1,4361,"sti"]],[4361,4361],[4364,4364]]],[1537078726525,[null,[[-1,4390,"`"],[1,4391,"\n"],[1,4398,"`"]],[4390,4390],[4399,4399]]],[1537078726525,[null,[[1,4390,"`"],[-1,4390,"\n"],[-1,4398,"`"]],[4399,4399],[4390,4390]]],[1537078669384,["gjx16@GJXAIOU",[[1,4363,"ring.h"]],[4363,4363],[4369,4369]]],[1537078671293,["gjx16@GJXAIOU",[[1,4371,"\n"]],[4370,4370],[4371,4371]]],[1537078675562,["gjx16@GJXAIOU",[[1,4371,"int main()"]],[4371,4371],[4381,4381]]],[1537078676979,["gjx16@GJXAIOU",[[1,4382,"\n"]],[4381,4381],[4382,4382]]],[1537078679344,["gjx16@GJXAIOU",[[1,4382,"{"]],[4382,4382],[4383,4383]]],[1537078682316,["gjx16@GJXAIOU",[[1,4416,"\n"]],[4415,4415],[4416,4416]]],[1537078682518,["gjx16@GJXAIOU",[[1,4417,"\n"]],[4416,4416],[4417,4417]]],[1537078682682,["gjx16@GJXAIOU",[[1,4418,"\n"]],[4417,4417],[4418,4418]]],[1537078683739,["gjx16@GJXAIOU",[[1,4418,"}"]],[4418,4418],[4419,4419]]],[1537078693765,["gjx16@GJXAIOU",[[1,4417,"  return 0;"]],[4417,4417],[4428,4428]]],[1537078700706,["gjx16@GJXAIOU",[[1,4384,"  "]],[4384,4384],[4386,4386]]],[1537078704126,["gjx16@GJXAIOU",[[1,4411,"    "]],[4411,4411],[4415,4415]]],[1537078706736,["gjx16@GJXAIOU",[[1,4420,"    "]],[4420,4420],[4424,4424]]],[1537078709389,["gjx16@GJXAIOU",[[1,4419,"    "]],[4419,4419],[4423,4423]]],[1537078715179,["gjx16@GJXAIOU",[[1,4386,"\n  "]],[4386,4386],[4389,4389]]],[1537078721172,["gjx16@GJXAIOU",[[1,4386,"strin"]],[4386,4386],[4391,4391]]],[1537078722873,["gjx16@GJXAIOU",[[-1,4386,"strin"]],[4391,4391],[4386,4386]]],[1537078725066,["gjx16@GJXAIOU",[[1,4386,"charl "]],[4386,4386],[4392,4392]]],[1537078725818,["gjx16@GJXAIOU",[[-1,4390,"l "]],[4392,4392],[4390,4390]]],[1537078726274,["gjx16@GJXAIOU",[[1,4390," "]],[4390,4390],[4391,4391]]],[1537078786530,[null,[[-1,4369,"i"],[1,4371,"\n"],[-1,4394,"\n"],[1,4419,"\n"],[-1,4423,"`"],[1,4432,"\n"],[-1,4436,"\n"],[1,4438,"\n"],[-1,4453,"\n"],[1,4454,"`"]],[4369,4369],[4455,4455]]],[1537078786530,[null,[[1,4369,"i"],[-1,4370,"\n"],[1,4394,"\n"],[-1,4418,"\n"],[1,4423,"`"],[-1,4431,"\n"],[1,4436,"\n"],[-1,4437,"\n"],[1,4453,"\n"],[-1,4453,"`"]],[4455,4455],[4369,4369]]],[1537078736219,["gjx16@GJXAIOU",[[1,4391,"s1[] = \"\";"]],[4391,4391],[4401,4401]]],[1537078740157,["gjx16@GJXAIOU",[[1,4399,"hello "]],[4399,4399],[4405,4405]]],[1537078741423,["gjx16@GJXAIOU",[[-1,4404," "]],[4405,4405],[4404,4404]]],[1537078743411,["gjx16@GJXAIOU",[[1,4409,"\n  "]],[4406,4406],[4409,4409]]],[1537078752557,["gjx16@GJXAIOU",[[1,4409,"char s2[] = \"\";"]],[4409,4409],[4424,4424]]],[1537078763501,["gjx16@GJXAIOU",[[1,4422,"hello woe"]],[4422,4422],[4431,4431]]],[1537078764392,["gjx16@GJXAIOU",[[-1,4430,"e"]],[4431,4431],[4430,4430]]],[1537078765837,["gjx16@GJXAIOU",[[1,4430,"rld"]],[4430,4430],[4433,4433]]],[1537078776742,["gjx16@GJXAIOU",[[1,4475,"printf();"]],[4475,4475],[4484,4484]]],[1537078779835,["gjx16@GJXAIOU",[[1,4482,"\"\""]],[4482,4482],[4484,4484]]],[1537078784009,["gjx16@GJXAIOU",[[1,4483,"buxia="]],[4483,4483],[4489,4489]]],[1537078785896,["gjx16@GJXAIOU",[[-1,4483,"buxia="]],[4489,4489],[4483,4483]]],[1537078846545,[null,[[-1,4369,"i"],[1,4371,"\n"],[-1,4438,"\n"],[1,4463,"\n"],[-1,4467,"`"],[1,4470," "],[1,4486,"\n"],[-1,4490," \n}"],[1,4493,"}\n"],[-1,4508,"\n"],[1,4509,"`"]],[4369,4369],[4510,4510]]],[1537078846545,[null,[[1,4369,"i"],[-1,4370,"\n"],[1,4438,"\n"],[-1,4462,"\n"],[1,4467,"`"],[-1,4469," "],[-1,4486,"\n"],[1,4491," \n}"],[-1,4491,"}\n"],[1,4508,"\n"],[-1,4508,"`"]],[4510,4510],[4369,4369]]],[1537078791555,["gjx16@GJXAIOU",[[1,4483,"不相同、"]],[4483,4483],[4487,4487]]],[1537078793207,["gjx16@GJXAIOU",[[-1,4486,"、"]],[4487,4487],[4486,4486]]],[1537078794751,["gjx16@GJXAIOU",[[1,4486,"\\n"]],[4486,4486],[4488,4488]]],[1537078801561,["gjx16@GJXAIOU",[[1,4498,"    \n"]],[4497,4497],[4502,4502]]],[1537078803196,["gjx16@GJXAIOU",[[1,4502,"else"]],[4502,4502],[4506,4506]]],[1537078807308,["gjx16@GJXAIOU",[[1,4507,"    \n"]],[4506,4506],[4511,4511]]],[1537078809785,["gjx16@GJXAIOU",[[1,4511,"{}"]],[4511,4511],[4513,4513]]],[1537078811323,["gjx16@GJXAIOU",[[1,4512,"\n    \n    "]],[4512,4512],[4522,4522]]],[1537078820914,["gjx16@GJXAIOU",[[-1,4500,"  "]],[4502,4502],[4500,4500]]],[1537078825234,["gjx16@GJXAIOU",[[1,4515,"    "]],[4514,4514],[4518,4518]]],[1537078829628,["gjx16@GJXAIOU",[[1,4518,"printf();"]],[4518,4518],[4527,4527]]],[1537078833888,["gjx16@GJXAIOU",[[1,4525,"\"\""]],[4525,4525],[4527,4527]]],[1537078841277,["gjx16@GJXAIOU",[[1,4526,"bu"]],[4526,4526],[4528,4528]]],[1537078842132,["gjx16@GJXAIOU",[[-1,4526,"bu"]],[4528,4528],[4526,4526]]],[1537078906548,[null,[[-1,4369,"i"],[1,4371,"\n"],[-1,4438,"\n"],[1,4463,"\n"],[-1,4467,"`"],[1,4470," "],[1,4491,"\n"],[-1,4495," \n}"],[1,4498,"}\n"],[-1,4552,"\n"],[1,4553,"`"]],[4369,4369],[4554,4554]]],[1537078906548,[null,[[1,4369,"i"],[-1,4370,"\n"],[1,4438,"\n"],[-1,4462,"\n"],[1,4467,"`"],[-1,4469," "],[-1,4491,"\n"],[1,4496," \n}"],[-1,4496,"}\n"],[1,4552,"\n"],[-1,4552,"`"]],[4554,4554],[4369,4369]]],[1537078850058,["gjx16@GJXAIOU",[[1,4526,"不相同、"]],[4526,4526],[4530,4530]]],[1537078851506,["gjx16@GJXAIOU",[[-1,4529,"、"]],[4530,4530],[4529,4529]]],[1537078852632,["gjx16@GJXAIOU",[[1,4529,"\\n"]],[4529,4529],[4531,4531]]],[1537078858076,["gjx16@GJXAIOU",[[-1,4483,"不"]],[4484,4484],[4483,4483]]],[1537079146565,[null,[[-1,4369,"i"],[1,4371,"\n"],[-1,4438,"\n"],[1,4463,"\n"],[-1,4467,"`"],[1,4470," "],[1,4490,"\n"],[-1,4494," \n}"],[1,4497,"}\n"],[-1,4556,"\n"],[1,4557,"`"]],[4369,4369],[4558,4558]]],[1537079146565,[null,[[1,4369,"i"],[-1,4370,"\n"],[1,4438,"\n"],[-1,4462,"\n"],[1,4467,"`"],[-1,4469," "],[-1,4490,"\n"],[1,4495," \n}"],[-1,4495,"}\n"],[1,4556,"\n"],[-1,4556,"`"]],[4558,4558],[4369,4369]]],[1537079090237,["gjx16@GJXAIOU",[[1,4575,"\n"]],[4559,4559],[4560,4560]]],[1537079090381,["gjx16@GJXAIOU",[[1,4576,"\n"]],[4560,4560],[4561,4561]]],[1537079102104,["gjx16@GJXAIOU",[[1,3432,"- "]],[3432,3432],[3434,3434]]],[1537079108033,["gjx16@GJXAIOU",[[1,3604,"- "]],[3604,3604],[3606,3606]]],[1537079111112,["gjx16@GJXAIOU",[[1,3861,"- "]],[3861,3861],[3863,3863]]],[1537079115279,["gjx16@GJXAIOU",[[1,4069,"- "]],[4069,4069],[4071,4071]]],[1537079119860,["gjx16@GJXAIOU",[[1,4317,"- "]],[4317,4317],[4319,4319]]],[1537079122872,["gjx16@GJXAIOU",[[1,4587,"\n"]],[4570,4570],[4571,4571]]],[1537079123296,["gjx16@GJXAIOU",[[1,4571,"-"]],[4571,4571],[4572,4572]]],[1537079206570,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079206570,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079206367,["gjx16@GJXAIOU",[[1,4572,"cst"]],[4572,4572],[4575,4575]]],[1537079266569,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079266569,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079206618,["gjx16@GJXAIOU",[[1,4575,"r"]],[4575,4575],[4576,4576]]],[1537079207667,["gjx16@GJXAIOU",[[-1,4572,"cstr"]],[4576,4576],[4572,4572]]],[1537079216541,["gjx16@GJXAIOU",[[1,4572," strcpy "]],[4572,4572],[4580,4580]]],[1537079386568,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079386568,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079336176,["gjx16@GJXAIOU",[[1,4581,"l"]],[4581,4581],[4582,4582]]],[1537079336939,["gjx16@GJXAIOU",[[-1,4581,"l"]],[4582,4582],[4581,4581]]],[1537079340993,["gjx16@GJXAIOU",[[1,4581,"拷贝"]],[4581,4581],[4583,4583]]],[1537079367214,["gjx16@GJXAIOU",[[1,4599,"\n"]],[4583,4583],[4584,4584]]],[1537079368999,["gjx16@GJXAIOU",[[1,4584,"  "]],[4584,4584],[4586,4586]]],[1537079369924,["gjx16@GJXAIOU",[[-1,4585," "]],[4586,4586],[4585,4585]]],[1537079371042,["gjx16@GJXAIOU",[[1,4585,"```"]],[4585,4585],[4588,4588]]],[1537079372912,["gjx16@GJXAIOU",[[-1,4584," ```"]],[4588,4588],[4584,4584]]],[1537079373367,["gjx16@GJXAIOU",[[-1,4599,"\n"]],[4584,4584],[4583,4583]]],[1537079374418,["gjx16@GJXAIOU",[[1,4599,"\n"]],[4583,4583],[4584,4584]]],[1537079375343,["gjx16@GJXAIOU",[[1,4600,"\n"]],[4584,4584],[4585,4585]]],[1537079376885,["gjx16@GJXAIOU",[[1,4585,"```"]],[4585,4585],[4588,4588]]],[1537079376925,["gjx16@GJXAIOU",[[1,4588,"language\n```\n"]],[4588,4588],[4588,4596]]],[1537079377903,["gjx16@GJXAIOU",[[-1,4588,"language"],[1,4596,"c"]],[4588,4596],[4589,4589]]],[1537079378169,["gjx16@GJXAIOU",[[1,4590,"\n"]],[4589,4589],[4590,4590]]],[1537079379468,["gjx16@GJXAIOU",[[1,4590,"#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"hello\";\n  char s2[] = \"hello world\";\n  if(strcmp(s1,s2,5) == 0)\n    {\n      printf(\"相同\\n\");\n    }\n  else\n    {\n       printf(\"不相同\\n\"); \n    }\n\n  return 0;\n}"]],[4590,4590],[4811,4811]]],[1537079446569,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079446569,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079388463,["gjx16@GJXAIOU",[[-1,4694,"if(strcmp(s1,s2,5) == 0)\n    {\n      printf(\"相同\\n\");\n    }\n  else\n    {\n       printf(\"不相同\\n\"); \n    }\n"]],[4694,4797],[4694,4694]]],[1537079392928,["gjx16@GJXAIOU",[[-1,4655,"hello"]],[4660,4660],[4655,4655]]],[1537079394941,["gjx16@GJXAIOU",[[1,4655,"ajjgdksjgkjsl"]],[4655,4655],[4668,4668]]],[1537079399236,["gjx16@GJXAIOU",[[-1,4656,"jjgdksjgkjsl"]],[4668,4668],[4656,4656]]],[1537079404263,["gjx16@GJXAIOU",[[1,4656,"bcdefg"]],[4656,4656],[4662,4662]]],[1537079410664,["gjx16@GJXAIOU",[[-1,4680,"hello world"]],[4691,4691],[4680,4680]]],[1537079416090,["gjx16@GJXAIOU",[[1,4680,"1234567"]],[4680,4680],[4687,4687]]],[1537079429310,["gjx16@GJXAIOU",[[1,4692,"strcpy();"]],[4692,4692],[4701,4701]]],[1537079434225,["gjx16@GJXAIOU",[[1,4699,"s1,s2"]],[4699,4699],[4704,4704]]],[1537079438054,["gjx16@GJXAIOU",[[1,4709,"\n  "]],[4706,4706],[4709,4709]]],[1537079443886,["gjx16@GJXAIOU",[[1,4709,"printf();"]],[4709,4709],[4718,4718]]],[1537079506570,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079506570,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079448210,["gjx16@GJXAIOU",[[1,4716,"\"\""]],[4716,4716],[4718,4718]]],[1537079458453,["gjx16@GJXAIOU",[[1,4717,"%s\\n"]],[4717,4717],[4721,4721]]],[1537079465890,["gjx16@GJXAIOU",[[1,4722,",s1"]],[4722,4722],[4725,4725]]],[1537079469224,["gjx16@GJXAIOU",[[1,4730,"\n  "]],[4727,4727],[4730,4730]]],[1537079566570,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079566570,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079510411,["gjx16@GJXAIOU",[[-1,4685,"67"]],[4687,4687],[4685,4685]]],[1537079513679,["gjx16@GJXAIOU",[[1,4763,"\n"]],[4746,4746],[4747,4747]]],[1537079513866,["gjx16@GJXAIOU",[[1,4764,"\n"]],[4747,4747],[4748,4748]]],[1537079517659,["gjx16@GJXAIOU",[[1,4748,"-  "]],[4748,4748],[4751,4751]]],[1537079518567,["gjx16@GJXAIOU",[[-1,4750," "]],[4751,4751],[4750,4750]]],[1537079524532,["gjx16@GJXAIOU",[[1,4750,"strncpy "]],[4750,4750],[4758,4758]]],[1537079524838,["gjx16@GJXAIOU",[[1,4759,"- \n"]],[4758,4758],[4761,4761]]],[1537079526236,["gjx16@GJXAIOU",[[-1,4759,"- "]],[4761,4761],[4759,4759]]],[1537079527033,["gjx16@GJXAIOU",[[1,4776,"\n"]],[4759,4759],[4760,4760]]],[1537079528776,["gjx16@GJXAIOU",[[1,4760,"```"]],[4760,4760],[4763,4763]]],[1537079528814,["gjx16@GJXAIOU",[[1,4763,"language\n```\n"]],[4763,4763],[4763,4771]]],[1537079529764,["gjx16@GJXAIOU",[[-1,4763,"language"],[1,4771,"c"]],[4763,4771],[4764,4764]]],[1537079530002,["gjx16@GJXAIOU",[[1,4765,"\n"]],[4764,4764],[4765,4765]]],[1537079530393,["gjx16@GJXAIOU",[[1,4766,"\n"]],[4765,4765],[4766,4766]]],[1537079537252,["gjx16@GJXAIOU",[[1,4765,"#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"12345\";\n  strcpy(s1,s2);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}"]],[4765,4765],[4917,4917]]],[1537079540492,["gjx16@GJXAIOU",[[-1,4918,"\n"]],[4918,4918],[4917,4917]]],[1537079547388,["gjx16@GJXAIOU",[[1,4868,"n"]],[4868,4868],[4869,4869]]],[1537079556837,["gjx16@GJXAIOU",[[1,4878,",5"]],[4878,4878],[4880,4880]]],[1537079626573,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079626573,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079571517,["gjx16@GJXAIOU",[[1,4860,"67"]],[4860,4860],[4862,4862]]],[1537079617902,["gjx16@GJXAIOU",[[1,4782,"  #include<string.h>  int main()  {  char s1[] = \"abcdefg\";  char s2[] = \"1234567\";  strncpy(s1,s2,5);  printf(\"%s\\n\",s1);  return 0;  }#include<stdio.h>"]],[4765,4922],[4918,4918]]],[1537079622941,["gjx16@GJXAIOU",[[-1,4782,"  #include<string.h>  int main()  {  char s1[] = \"abcdefg\";  char s2[] = \"1234567\";  strncpy(s1,s2,5);  printf(\"%s\\n\",s1);  return 0;  }#include<stdio.h>"]],[4918,4918],[4765,4922]]],[1537079632503,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079632503,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079629584,["gjx16@GJXAIOU",[[1,4944,"\n"]],[4926,4926],[4927,4927]]],[1537079629952,["gjx16@GJXAIOU",[[1,4945,"\n"]],[4927,4927],[4928,4928]]],[1537079812524,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079812524,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079785781,["gjx16@GJXAIOU",[[1,4928,"- str\\\\"]],[4928,4928],[4935,4935]]],[1537079787491,["gjx16@GJXAIOU",[[-1,4931,"tr\\\\"]],[4935,4935],[4931,4931]]],[1537079790941,["gjx16@GJXAIOU",[[1,4931,"printf"]],[4931,4931],[4937,4937]]],[1537079792595,["gjx16@GJXAIOU",[[1,4938,"- \n"]],[4937,4937],[4940,4940]]],[1537079793944,["gjx16@GJXAIOU",[[-1,4938,"- "]],[4940,4940],[4938,4938]]],[1537079803766,["gjx16@GJXAIOU",[[1,4938,"jaing"]],[4938,4938],[4943,4943]]],[1537079805145,["gjx16@GJXAIOU",[[-1,4938,"jaing"]],[4943,4943],[4938,4938]]],[1537079809536,["gjx16@GJXAIOU",[[1,4938,"将格式胡"]],[4938,4938],[4942,4942]]],[1537079811493,["gjx16@GJXAIOU",[[-1,4939,"格式胡"]],[4942,4942],[4939,4939]]],[1537079872519,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079872519,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079816657,["gjx16@GJXAIOU",[[1,4939,"格式化的"]],[4939,4939],[4943,4943]]],[1537079818820,["gjx16@GJXAIOU",[[-1,4942,"的"]],[4943,4943],[4942,4942]]],[1537079862755,["gjx16@GJXAIOU",[[1,4942,"后的字符串输出到第一个参数指定的字符串中去，而不是直接的输出到屏幕上"]],[4942,4942],[4976,4976]]],[1537079863723,["gjx16@GJXAIOU",[[1,4994,"\n"]],[4976,4976],[4977,4977]]],[1537079863937,["gjx16@GJXAIOU",[[1,4995,"\n"]],[4977,4977],[4978,4978]]],[1537079932520,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079932520,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079873170,["gjx16@GJXAIOU",[[1,4996,"\n"]],[4976,4976],[4977,4977]]],[1537079873704,["gjx16@GJXAIOU",[[1,4997,"\n"]],[4977,4977],[4978,4978]]],[1537079876826,["gjx16@GJXAIOU",[[1,4978,"```"]],[4978,4978],[4981,4981]]],[1537079876862,["gjx16@GJXAIOU",[[1,4981,"language\n```\n"]],[4981,4981],[4981,4989]]],[1537079877732,["gjx16@GJXAIOU",[[-1,4981,"language"],[1,4989,"c"]],[4981,4989],[4982,4982]]],[1537079878068,["gjx16@GJXAIOU",[[1,4983,"\n"]],[4982,4982],[4983,4983]]],[1537079883773,["gjx16@GJXAIOU",[[1,4983,"#include<>"]],[4983,4983],[4993,4993]]],[1537079888699,["gjx16@GJXAIOU",[[1,4992,"stdio.h"]],[4992,4992],[4999,4999]]],[1537079890372,["gjx16@GJXAIOU",[[1,5001,"\n"]],[5000,5000],[5001,5001]]],[1537079896625,["gjx16@GJXAIOU",[[1,5001,"#include<>"]],[5001,5001],[5011,5011]]],[1537079899415,["gjx16@GJXAIOU",[[1,5010,"string "]],[5010,5010],[5017,5017]]],[1537079900073,["gjx16@GJXAIOU",[[-1,5016," "]],[5017,5017],[5016,5016]]],[1537079901220,["gjx16@GJXAIOU",[[1,5016,".j"]],[5016,5016],[5018,5018]]],[1537079901829,["gjx16@GJXAIOU",[[-1,5017,"j"]],[5018,5018],[5017,5017]]],[1537079902406,["gjx16@GJXAIOU",[[1,5017,"h"]],[5017,5017],[5018,5018]]],[1537079904920,["gjx16@GJXAIOU",[[1,5020,"\n"]],[5019,5019],[5020,5020]]],[1537079905663,["gjx16@GJXAIOU",[[1,5021,"\n"]],[5020,5020],[5021,5021]]],[1537079909976,["gjx16@GJXAIOU",[[1,5021,"int main()"]],[5021,5021],[5031,5031]]],[1537079910724,["gjx16@GJXAIOU",[[1,5032,"\n"]],[5031,5031],[5032,5032]]],[1537079911706,["gjx16@GJXAIOU",[[1,5032,"{}"]],[5032,5032],[5034,5034]]],[1537079912751,["gjx16@GJXAIOU",[[1,5033,"\n"]],[5033,5033],[5034,5034]]],[1537079912928,["gjx16@GJXAIOU",[[1,5034,"\n"]],[5034,5034],[5035,5035]]],[1537079913094,["gjx16@GJXAIOU",[[1,5035,"\n"]],[5035,5035],[5036,5036]]],[1537079913280,["gjx16@GJXAIOU",[[1,5036,"\n"]],[5036,5036],[5037,5037]]],[1537079923152,["gjx16@GJXAIOU",[[1,5034,"  int i = 100;"]],[5034,5034],[5048,5048]]],[1537079923639,["gjx16@GJXAIOU",[[1,5049,"  \n"]],[5048,5048],[5051,5051]]],[1537079929010,["gjx16@GJXAIOU",[[1,5051,"char s[] l= "]],[5051,5051],[5063,5063]]],[1537079930166,["gjx16@GJXAIOU",[[-1,5060,"l= "]],[5063,5063],[5060,5060]]],[1537079931559,["gjx16@GJXAIOU",[[1,5060,"= "]],[5060,5060],[5062,5062]]],[1537079992518,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537079992518,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537079934327,["gjx16@GJXAIOU",[[1,5062,"\"\""]],[5062,5062],[5064,5064]]],[1537079935720,["gjx16@GJXAIOU",[[-1,5062,"\"\""]],[5064,5064],[5062,5062]]],[1537079938164,["gjx16@GJXAIOU",[[1,5062,"{}"]],[5062,5062],[5064,5064]]],[1537079942919,["gjx16@GJXAIOU",[[1,5058,"100"]],[5058,5058],[5061,5061]]],[1537080112521,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080112521,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080055619,["gjx16@GJXAIOU",[[1,5066,"0"]],[5066,5066],[5067,5067]]],[1537080058203,["gjx16@GJXAIOU",[[1,5068,";"]],[5068,5068],[5069,5069]]],[1537080172521,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080172521,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080172117,["gjx16@GJXAIOU",[[1,5070,"  \n"]],[5069,5069],[5072,5072]]],[1537080232522,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080232522,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080190518,["gjx16@GJXAIOU",[[1,5072,"sprintf();"]],[5072,5072],[5082,5082]]],[1537080204298,["gjx16@GJXAIOU",[[1,5080,"s,\"\""]],[5080,5080],[5084,5084]]],[1537080214094,["gjx16@GJXAIOU",[[1,5083,"i = %d"]],[5083,5083],[5089,5089]]],[1537080225240,["gjx16@GJXAIOU",[[1,5090,", i"]],[5090,5090],[5093,5093]]],[1537080229044,["gjx16@GJXAIOU",[[1,5096,"  \n"]],[5095,5095],[5098,5098]]],[1537080292524,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080292524,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080265104,["gjx16@GJXAIOU",[[1,5098,"printf();"]],[5098,5098],[5107,5107]]],[1537080267910,["gjx16@GJXAIOU",[[1,5105,"\"\""]],[5105,5105],[5107,5107]]],[1537080282361,["gjx16@GJXAIOU",[[1,5106,"%s\\n"]],[5106,5106],[5110,5110]]],[1537080290760,["gjx16@GJXAIOU",[[1,5111,",a"]],[5111,5111],[5113,5113]]],[1537080291477,["gjx16@GJXAIOU",[[-1,5112,"a"]],[5113,5113],[5112,5112]]],[1537080291645,["gjx16@GJXAIOU",[[1,5112,"s"]],[5112,5112],[5113,5113]]],[1537080352526,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080352526,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080294821,["gjx16@GJXAIOU",[[1,5114,"\n  "]],[5114,5114],[5117,5117]]],[1537080296495,["gjx16@GJXAIOU",[[-1,5115,"  "]],[5117,5117],[5115,5115]]],[1537080296938,["gjx16@GJXAIOU",[[-1,5114,"\n"]],[5115,5115],[5114,5114]]],[1537080298622,["gjx16@GJXAIOU",[[1,5116,"  \n"]],[5115,5115],[5118,5118]]],[1537080299448,["gjx16@GJXAIOU",[[-1,5116,"  "],[1,5118,"\n"]],[5118,5118],[5117,5117]]],[1537080305310,["gjx16@GJXAIOU",[[1,5117,"  return 0;"]],[5117,5117],[5128,5128]]],[1537080307627,["gjx16@GJXAIOU",[[-1,5130,"\n"]],[5130,5130],[5129,5129]]],[1537080307794,["gjx16@GJXAIOU",[[-1,5129,"\n"]],[5129,5129],[5128,5128]]],[1537080892535,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080892535,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080871731,["gjx16@GJXAIOU",[[1,5155,"\n"]],[5134,5134],[5135,5135]]],[1537080872133,["gjx16@GJXAIOU",[[1,5156,"\n"]],[5135,5135],[5136,5136]]],[1537080875324,["gjx16@GJXAIOU",[[-1,5156,"\n"]],[5136,5136],[5135,5135]]],[1537080876942,["gjx16@GJXAIOU",[[1,5156,"\n"]],[5135,5135],[5136,5136]]],[1537080878366,["gjx16@GJXAIOU",[[1,5136,"ying"]],[5136,5136],[5140,5140]]],[1537080879517,["gjx16@GJXAIOU",[[-1,5136,"ying"]],[5140,5140],[5136,5136]]],[1537080886180,["gjx16@GJXAIOU",[[1,5136,"应用：将字符串"]],[5136,5136],[5143,5143]]],[1537080952584,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537080952584,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080893499,["gjx16@GJXAIOU",[[-1,5140,"字符串"]],[5143,5143],[5140,5140]]],[1537080900370,["gjx16@GJXAIOU",[[1,5140,"整数转换为字符串"]],[5140,5140],[5148,5148]]],[1537080901911,["gjx16@GJXAIOU",[[1,5169,"\n"]],[5148,5148],[5149,5149]]],[1537080905101,["gjx16@GJXAIOU",[[1,5149,"```"]],[5149,5149],[5152,5152]]],[1537080905136,["gjx16@GJXAIOU",[[1,5152,"language\n```\n"]],[5152,5152],[5152,5160]]],[1537080906048,["gjx16@GJXAIOU",[[-1,5152,"language"],[1,5160,"c"]],[5152,5160],[5153,5153]]],[1537080906257,["gjx16@GJXAIOU",[[1,5154,"\n"]],[5153,5153],[5154,5154]]],[1537080912509,["gjx16@GJXAIOU",[[1,5154,"int main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"i = %d\", i);\n  printf(\"%s\\n\",s);\n\n  return 0;\n}"]],[5154,5154],[5263,5263]]],[1537080922805,["gjx16@GJXAIOU",[[-1,5216,"i = "]],[5220,5220],[5216,5216]]],[1537080952470,["gjx16@GJXAIOU",[[1,5224,"  //将i 的值放在字符串是、"]],[5224,5224],[5240,5240]]],[1537081012573,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537081012573,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537080953246,["gjx16@GJXAIOU",[[1,5240,"、、"]],[5240,5240],[5242,5242]]],[1537080954652,["gjx16@GJXAIOU",[[-1,5237,"串是、、、"]],[5242,5242],[5237,5237]]],[1537080959370,["gjx16@GJXAIOU",[[1,5237,"数组s 中"]],[5237,5237],[5242,5242]]],[1537080962814,["gjx16@GJXAIOU",[[1,5303,"\n"]],[5281,5281],[5282,5282]]],[1537080963007,["gjx16@GJXAIOU",[[1,5304,"\n"]],[5282,5282],[5283,5283]]],[1537080969936,["gjx16@GJXAIOU",[[1,5283,"- sscanf"]],[5283,5283],[5291,5291]]],[1537080971781,["gjx16@GJXAIOU",[[1,5292,"- \n"]],[5291,5291],[5294,5294]]],[1537080973357,["gjx16@GJXAIOU",[[-1,5292,"- "]],[5294,5294],[5292,5292]]],[1537080974204,["gjx16@GJXAIOU",[[1,5314,"\n"]],[5292,5292],[5293,5293]]],[1537080975486,["gjx16@GJXAIOU",[[1,5293,"```"]],[5293,5293],[5296,5296]]],[1537080975521,["gjx16@GJXAIOU",[[1,5296,"language\n```\n"]],[5296,5296],[5296,5304]]],[1537080976452,["gjx16@GJXAIOU",[[-1,5296,"language"],[1,5304,"c"]],[5296,5304],[5297,5297]]],[1537080976650,["gjx16@GJXAIOU",[[1,5298,"\n"]],[5297,5297],[5298,5298]]],[1537080982962,["gjx16@GJXAIOU",[[1,5298,"#include<>"]],[5298,5298],[5308,5308]]],[1537080985676,["gjx16@GJXAIOU",[[1,5307,"stdil"]],[5307,5307],[5312,5312]]],[1537080986389,["gjx16@GJXAIOU",[[-1,5311,"l"]],[5312,5312],[5311,5311]]],[1537080989109,["gjx16@GJXAIOU",[[1,5311,"o,h"]],[5311,5311],[5314,5314]]],[1537080990370,["gjx16@GJXAIOU",[[-1,5312,",h"]],[5314,5314],[5312,5312]]],[1537080992191,["gjx16@GJXAIOU",[[1,5312,".h"]],[5312,5312],[5314,5314]]],[1537080994075,["gjx16@GJXAIOU",[[1,5316,"\n"]],[5315,5315],[5316,5316]]],[1537081000142,["gjx16@GJXAIOU",[[1,5316,"#include<>"]],[5316,5316],[5326,5326]]],[1537081005665,["gjx16@GJXAIOU",[[1,5325,"string.h"]],[5325,5325],[5333,5333]]],[1537081007053,["gjx16@GJXAIOU",[[1,5335,"\n"]],[5334,5334],[5335,5335]]],[1537081012429,["gjx16@GJXAIOU",[[1,5335,"#includ"]],[5335,5335],[5342,5342]]],[1537081072578,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537081072578,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537081013018,["gjx16@GJXAIOU",[[1,5342,"e "]],[5342,5342],[5344,5344]]],[1537081013708,["gjx16@GJXAIOU",[[-1,5343," "]],[5344,5344],[5343,5343]]],[1537081014860,["gjx16@GJXAIOU",[[1,5343,"<>"]],[5343,5343],[5345,5345]]],[1537081071603,["gjx16@GJXAIOU",[[1,5344,"stdlib"]],[5344,5344],[5350,5350]]],[1537081132574,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537081132575,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537081073496,["gjx16@GJXAIOU",[[1,5350,".h"]],[5350,5350],[5352,5352]]],[1537081074775,["gjx16@GJXAIOU",[[1,5354,"\n"]],[5353,5353],[5354,5354]]],[1537081074950,["gjx16@GJXAIOU",[[1,5355,"\n"]],[5354,5354],[5355,5355]]],[1537081079377,["gjx16@GJXAIOU",[[1,5355,"int main()"]],[5355,5355],[5365,5365]]],[1537081079991,["gjx16@GJXAIOU",[[1,5366,"\n"]],[5365,5365],[5366,5366]]],[1537081081503,["gjx16@GJXAIOU",[[1,5366,"{}"]],[5366,5366],[5368,5368]]],[1537081082540,["gjx16@GJXAIOU",[[1,5367,"\n"]],[5367,5367],[5368,5368]]],[1537081082702,["gjx16@GJXAIOU",[[1,5368,"\n"]],[5368,5368],[5369,5369]]],[1537081082868,["gjx16@GJXAIOU",[[1,5369,"\n"]],[5369,5369],[5370,5370]]],[1537081083038,["gjx16@GJXAIOU",[[1,5370,"\n"]],[5370,5370],[5371,5371]]],[1537081083200,["gjx16@GJXAIOU",[[1,5371,"\n"]],[5371,5371],[5372,5372]]],[1537081083380,["gjx16@GJXAIOU",[[1,5372,"\n"]],[5372,5372],[5373,5373]]],[1537081083525,["gjx16@GJXAIOU",[[1,5373,"\n"]],[5373,5373],[5374,5374]]],[1537081128060,["gjx16@GJXAIOU",[[1,5369,"  char s[] ="]],[5369,5369],[5381,5381]]],[1537081131743,["gjx16@GJXAIOU",[[1,5378,"100"]],[5378,5378],[5381,5381]]],[1537081192853,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537081192853,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537081137149,["gjx16@GJXAIOU",[[1,5384," \"\";"]],[5384,5384],[5388,5388]]],[1537081147131,["gjx16@GJXAIOU",[[1,5386,"5+6="]],[5386,5386],[5390,5390]]],[1537081149845,["gjx16@GJXAIOU",[[1,5393,"  \n"]],[5392,5392],[5395,5395]]],[1537082411853,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082411853,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082378101,["gjx16@GJXAIOU",[[1,5396,"  \n"]],[5392,5392],[5395,5395]]],[1537082383592,["gjx16@GJXAIOU",[[1,5395,"int a;"]],[5395,5395],[5401,5401]]],[1537082383880,["gjx16@GJXAIOU",[[1,5405,"  \n"]],[5401,5401],[5404,5404]]],[1537082385986,["gjx16@GJXAIOU",[[1,5404,"int b"]],[5404,5404],[5409,5409]]],[1537082386235,["gjx16@GJXAIOU",[[1,5413,"  \n"]],[5409,5409],[5412,5412]]],[1537082393164,["gjx16@GJXAIOU",[[1,5412,"sscanf()"]],[5412,5412],[5420,5420]]],[1537082396750,["gjx16@GJXAIOU",[[1,5419,"s,"]],[5419,5419],[5421,5421]]],[1537082471856,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082471856,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082426124,["gjx16@GJXAIOU",[[1,5421,"\"\""]],[5421,5421],[5423,5423]]],[1537082435815,["gjx16@GJXAIOU",[[1,5422,"%d ="]],[5422,5422],[5426,5426]]],[1537082437129,["gjx16@GJXAIOU",[[-1,5424," ="]],[5426,5426],[5424,5424]]],[1537082440246,["gjx16@GJXAIOU",[[1,5424,"+%d"]],[5424,5424],[5427,5427]]],[1537082445422,["gjx16@GJXAIOU",[[1,5428,",a,b"]],[5428,5428],[5432,5432]]],[1537082457417,["gjx16@GJXAIOU",[[1,5437,"  \n"]],[5433,5433],[5436,5436]]],[1537082459320,["gjx16@GJXAIOU",[[-1,5434,"  "]],[5436,5436],[5434,5434]]],[1537082459780,["gjx16@GJXAIOU",[[-1,5434,"\n"]],[5434,5434],[5433,5433]]],[1537082461855,["gjx16@GJXAIOU",[[1,5433,";"]],[5433,5433],[5434,5434]]],[1537082462349,["gjx16@GJXAIOU",[[1,5438,"  \n"]],[5434,5434],[5437,5437]]],[1537082463041,["gjx16@GJXAIOU",[[-1,5435,"  "],[1,5437,"\n"]],[5437,5437],[5436,5436]]],[1537082470263,["gjx16@GJXAIOU",[[1,5436,"  printf();"]],[5436,5436],[5447,5447]]],[1537082492284,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082492284,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082472581,["gjx16@GJXAIOU",[[1,5445,"\"\""]],[5445,5445],[5447,5447]]],[1537082481274,["gjx16@GJXAIOU",[[1,5446,"%d\\n"]],[5446,5446],[5450,5450]]],[1537082489984,["gjx16@GJXAIOU",[[1,5451,",a+b"]],[5451,5451],[5455,5455]]],[1537082516746,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082516746,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082495554,["gjx16@GJXAIOU",[[1,5461,"  \n"]],[5457,5457],[5460,5460]]],[1537082497151,["gjx16@GJXAIOU",[[-1,5458,"  "],[1,5460,"\n"]],[5460,5460],[5459,5459]]],[1537082500523,["gjx16@GJXAIOU",[[1,5459,"  retunrn"]],[5459,5459],[5468,5468]]],[1537082501629,["gjx16@GJXAIOU",[[-1,5465,"nrn"]],[5468,5468],[5465,5465]]],[1537082503680,["gjx16@GJXAIOU",[[1,5465,"rn 0;"]],[5465,5465],[5470,5470]]],[1537082514513,["gjx16@GJXAIOU",[[-1,5477,"\n"]],[5477,5477],[5476,5476]]],[1537082514709,["gjx16@GJXAIOU",[[-1,5476,"\n"]],[5476,5476],[5475,5475]]],[1537082514928,["gjx16@GJXAIOU",[[-1,5475,"\n"]],[5475,5475],[5474,5474]]],[1537082516010,["gjx16@GJXAIOU",[[-1,5474,"\n"]],[5474,5474],[5473,5473]]],[1537082636750,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082636750,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082623789,["gjx16@GJXAIOU",[[1,5316,"\n"],[1,5335,"\n"],[1,5359," "],[1,5365,"\n"],[1,5376," "],[1,5382," "],[1,5385," "],[1,5393,"\n"],[1,5398," "],[1,5402,"\n"],[1,5408," "],[1,5409,";\n"],[1,5429,"&"],[1,5431,"&"],[1,5468," "],[-1,5471,"  "]],[5298,5475],[5489,5489]]],[1537082629758,["gjx16@GJXAIOU",[[-1,5450,"\n"]],[5450,5450],[5449,5449]]],[1537082630507,["gjx16@GJXAIOU",[[-1,5422,"\n"]],[5423,5423],[5422,5422]]],[1537082631272,["gjx16@GJXAIOU",[[-1,5411,"\n"]],[5411,5411],[5410,5410]]],[1537082631981,["gjx16@GJXAIOU",[[-1,5400,"\n"]],[5400,5400],[5399,5399]]],[1537082634980,["gjx16@GJXAIOU",[[-1,5316,"\n"]],[5316,5316],[5315,5315]]],[1537082635782,["gjx16@GJXAIOU",[[-1,5335,"\n"]],[5335,5335],[5334,5334]]],[1537082696756,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537082696756,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537082637626,["gjx16@GJXAIOU",[[-1,5367,"\n"]],[5367,5367],[5366,5366]]],[1537083476766,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083476766,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083443154,["gjx16@GJXAIOU",[[1,5443," //相当于将字符转换为整数"]],[5443,5443],[5457,5457]]],[1537083455023,["gjx16@GJXAIOU",[[1,5523,"\n"]],[5500,5500],[5501,5501]]],[1537083456497,["gjx16@GJXAIOU",[[1,5524,"\n"]],[5501,5501],[5502,5502]]],[1537083463491,["gjx16@GJXAIOU",[[1,5502,"- strchr"]],[5502,5502],[5510,5510]]],[1537083465069,["gjx16@GJXAIOU",[[1,5511,"- \n"]],[5510,5510],[5513,5513]]],[1537083466684,["gjx16@GJXAIOU",[[-1,5511,"- "]],[5513,5513],[5511,5511]]],[1537083467441,["gjx16@GJXAIOU",[[1,5534,"\n"]],[5511,5511],[5512,5512]]],[1537083468391,["gjx16@GJXAIOU",[[1,5512,"```"]],[5512,5512],[5515,5515]]],[1537083468426,["gjx16@GJXAIOU",[[1,5515,"language\n```\n"]],[5515,5515],[5515,5523]]],[1537083469453,["gjx16@GJXAIOU",[[-1,5515,"language"],[1,5523,"c"]],[5515,5523],[5516,5516]]],[1537083469718,["gjx16@GJXAIOU",[[1,5517,"\n"]],[5516,5516],[5517,5517]]],[1537083469903,["gjx16@GJXAIOU",[[1,5518,"\n"]],[5517,5517],[5518,5518]]],[1537083536772,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083536772,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083499850,["gjx16@GJXAIOU",[[1,5517,"#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[100]  =  \"5+6=\";\n  int  a;\n  int  b;\n  sscanf(s,\"%d+%d\",&a,&b); //相当于将字符转换为整数\n  printf(\"%d\\n\",a+b);\n\n  return  0;\n\n}"]],[5517,5517],[5715,5715]]],[1537083506197,["gjx16@GJXAIOU",[[-1,5554,"#include<stdlib.h>"]],[5572,5572],[5554,5554]]],[1537083506419,["gjx16@GJXAIOU",[[-1,5555,"\n"]],[5554,5554],[5553,5553]]],[1537083776768,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083776768,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083751195,["gjx16@GJXAIOU",[[-1,5588," \"5+6=\""]],[5594,5594],[5588,5588]]],[1537083754592,["gjx16@GJXAIOU",[[1,5588,"{}"]],[5588,5588],[5590,5590]]],[1537083836769,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083836769,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083801729,["gjx16@GJXAIOU",[[1,5589,"0"]],[5589,5589],[5590,5590]]],[1537083814484,["gjx16@GJXAIOU",[[-1,5603,"  int  b;"]],[5612,5612],[5603,5603]]],[1537083814626,["gjx16@GJXAIOU",[[-1,5603,"\n"]],[5603,5603],[5602,5602]]],[1537083815341,["gjx16@GJXAIOU",[[-1,5599," a;"]],[5602,5602],[5599,5599]]],[1537083824088,["gjx16@GJXAIOU",[[-1,5600,"  sscanf(s,\"%d+%d\",&a,&b); //相当于将字符转换为整数"]],[5640,5640],[5600,5600]]],[1537083824396,["gjx16@GJXAIOU",[[-1,5600,"\n"]],[5600,5600],[5599,5599]]],[1537083825412,["gjx16@GJXAIOU",[[-1,5595,"int "]],[5599,5599],[5595,5595]]],[1537083830477,["gjx16@GJXAIOU",[[1,5595,"strcpy"]],[5595,5595],[5601,5601]]],[1537083896769,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083896769,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083841537,["gjx16@GJXAIOU",[[1,5601,"();"]],[5601,5601],[5604,5604]]],[1537083856794,["gjx16@GJXAIOU",[[1,5602,"s,\"\""]],[5602,5602],[5606,5606]]],[1537083862198,["gjx16@GJXAIOU",[[1,5605,"hello word"]],[5605,5605],[5615,5615]]],[1537083863056,["gjx16@GJXAIOU",[[-1,5614,"d"]],[5615,5615],[5614,5614]]],[1537083864139,["gjx16@GJXAIOU",[[1,5614,"ld"]],[5614,5614],[5616,5616]]],[1537083886150,["gjx16@GJXAIOU",[[1,5619,"  //相当于为数组s赋值"]],[5619,5619],[5632,5632]]],[1537083956773,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537083956773,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537083949467,["gjx16@GJXAIOU",[[1,5511,"返回值是指针"]],[5511,5511],[5517,5517]]],[1537084076777,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084076777,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084035037,["gjx16@GJXAIOU",[[-1,5641,"printf(\"%d\\n\",a+b);"]],[5660,5660],[5641,5641]]],[1537084057619,["gjx16@GJXAIOU",[[1,5641,"const char *buf = strchr"]],[5641,5641],[5665,5665]]],[1537084136775,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084136775,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084082677,["gjx16@GJXAIOU",[[1,5292,"sscsnf"]],[5292,5292],[5298,5298]]],[1537084083944,["gjx16@GJXAIOU",[[-1,5295,"snf"]],[5298,5298],[5295,5295]]],[1537084085123,["gjx16@GJXAIOU",[[1,5295,"snf"]],[5295,5295],[5298,5298]]],[1537084087231,["gjx16@GJXAIOU",[[-1,5295,"snf"]],[5298,5298],[5295,5295]]],[1537084094760,["gjx16@GJXAIOU",[[1,5295,"anf是从"]],[5295,5295],[5300,5300]]],[1537084256781,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084256781,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084202890,["gjx16@GJXAIOU",[[1,5300,"自渡船"]],[5300,5300],[5303,5303]]],[1537084203716,["gjx16@GJXAIOU",[[-1,5300,"自渡船"]],[5303,5303],[5300,5300]]],[1537084217290,["gjx16@GJXAIOU",[[1,5300,"字符串中得到一个输入值"]],[5300,5300],[5311,5311]]],[1537084316780,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084316780,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084286721,["gjx16@GJXAIOU",[[1,5536,"，查找数组中的元素，会返回数组中"]],[5536,5536],[5552,5552]]],[1537084376787,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084376787,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084346026,["gjx16@GJXAIOU",[[1,5552,"查到到的该元素之后的所有元素值；"]],[5552,5552],[5568,5568]]],[1537084352670,["gjx16@GJXAIOU",[[1,5716,"（）；"]],[5716,5716],[5719,5719]]],[1537084355189,["gjx16@GJXAIOU",[[-1,5716,"（）；"]],[5719,5719],[5716,5716]]],[1537084357831,["gjx16@GJXAIOU",[[1,5716,"();"]],[5716,5716],[5719,5719]]],[1537084373046,["gjx16@GJXAIOU",[[1,5717,"s,'o'"]],[5717,5717],[5722,5722]]],[1537084376146,["gjx16@GJXAIOU",[[1,5725,"  \n"]],[5724,5724],[5727,5727]]],[1537084436786,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084436786,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084381656,["gjx16@GJXAIOU",[[1,5727,"printf();"]],[5727,5727],[5736,5736]]],[1537084384371,["gjx16@GJXAIOU",[[1,5734,"\"\"\""]],[5734,5734],[5737,5737]]],[1537084385494,["gjx16@GJXAIOU",[[-1,5736,"\""]],[5737,5737],[5736,5736]]],[1537084390867,["gjx16@GJXAIOU",[[1,5735,"%s"]],[5735,5735],[5737,5737]]],[1537084395368,["gjx16@GJXAIOU",[[1,5738,",buf"]],[5738,5738],[5742,5742]]],[1537084496788,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084496788,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084442778,["gjx16@GJXAIOU",[[1,5727,"\n  "]],[5724,5724],[5727,5727]]],[1537084443808,["gjx16@GJXAIOU",[[1,5727,"//"]],[5727,5727],[5729,5729]]],[1537084447758,["gjx16@GJXAIOU",[[-1,5725,"  //"]],[5729,5729],[5725,5725]]],[1537084448209,["gjx16@GJXAIOU",[[-1,5725,"\n"]],[5725,5725],[5724,5724]]],[1537084454028,["gjx16@GJXAIOU",[[1,5724," //在是"]],[5724,5724],[5729,5729]]],[1537084454568,["gjx16@GJXAIOU",[[-1,5728,"是"]],[5729,5729],[5728,5728]]],[1537084474419,["gjx16@GJXAIOU",[[1,5728,"s这个字符串之间，查找第二个参数指定的字符"]],[5728,5728],[5749,5749]]],[1537084556787,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084556787,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084499827,["gjx16@GJXAIOU",[[1,5815,"\n"]],[5791,5791],[5792,5792]]],[1537084499983,["gjx16@GJXAIOU",[[1,5816,"\n"]],[5792,5792],[5793,5793]]],[1537084505407,["gjx16@GJXAIOU",[[1,5793,"- strstr"]],[5793,5793],[5801,5801]]],[1537084507021,["gjx16@GJXAIOU",[[1,5802,"- \n"]],[5801,5801],[5804,5804]]],[1537084508098,["gjx16@GJXAIOU",[[-1,5802,"- "]],[5804,5804],[5802,5802]]],[1537084509070,["gjx16@GJXAIOU",[[1,5826,"\n"]],[5802,5802],[5803,5803]]],[1537084513747,["gjx16@GJXAIOU",[[1,5803,"```"]],[5803,5803],[5806,5806]]],[1537084513782,["gjx16@GJXAIOU",[[1,5806,"language\n```\n"]],[5806,5806],[5806,5814]]],[1537084514753,["gjx16@GJXAIOU",[[-1,5806,"language"],[1,5814,"c"]],[5806,5814],[5807,5807]]],[1537084515021,["gjx16@GJXAIOU",[[1,5808,"\n"]],[5807,5807],[5808,5808]]],[1537084522318,["gjx16@GJXAIOU",[[1,5808,"#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strchr(s,'o'); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}"]],[5808,5808],[6020,6020]]],[1537084526764,["gjx16@GJXAIOU",[[1,5802,"cha"]],[5802,5802],[5805,5805]]],[1537084527369,["gjx16@GJXAIOU",[[-1,5802,"cha"]],[5805,5805],[5802,5802]]],[1537084533292,["gjx16@GJXAIOU",[[1,5802,"查找该数组中"]],[5802,5802],[5808,5808]]],[1537084534589,["gjx16@GJXAIOU",[[-1,5805,"数组中"]],[5808,5808],[5805,5805]]],[1537084542213,["gjx16@GJXAIOU",[[1,5805,"字符串中是否含有"]],[5805,5805],[5813,5813]]],[1537084616789,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084616789,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084560391,["gjx16@GJXAIOU",[[1,5813,"某些连续的数组"]],[5813,5813],[5820,5820]]],[1537084561490,["gjx16@GJXAIOU",[[-1,5818,"数组"]],[5820,5820],[5818,5818]]],[1537084565529,["gjx16@GJXAIOU",[[1,5818,"字符元素"]],[5818,5818],[5822,5822]]],[1537084585701,["gjx16@GJXAIOU",[[-1,5973,"'o'"]],[5975,5975],[5973,5973]]],[1537084587556,["gjx16@GJXAIOU",[[1,5973,"\"\""]],[5973,5973],[5975,5975]]],[1537084590276,["gjx16@GJXAIOU",[[1,5974,"1o"]],[5974,5974],[5976,5976]]],[1537084591209,["gjx16@GJXAIOU",[[-1,5974,"1o"]],[5976,5976],[5974,5974]]],[1537084593251,["gjx16@GJXAIOU",[[1,5974,"wo"]],[5974,5974],[5976,5976]]],[1537084676791,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084676791,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084629667,["gjx16@GJXAIOU",[[-1,5967,"chr"]],[5970,5970],[5967,5967]]],[1537084631139,["gjx16@GJXAIOU",[[1,5967,"str"]],[5967,5967],[5970,5970]]],[1537084736795,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084736795,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084720153,["gjx16@GJXAIOU",[[1,6070,"\n"]],[6045,6045],[6046,6046]]],[1537084720310,["gjx16@GJXAIOU",[[1,6071,"\n"]],[6046,6046],[6047,6047]]],[1537084729620,["gjx16@GJXAIOU",[[1,6047,"- strtok "]],[6047,6047],[6056,6056]]],[1537084730521,["gjx16@GJXAIOU",[[1,6057,"- \n"]],[6056,6056],[6059,6059]]],[1537084731742,["gjx16@GJXAIOU",[[-1,6057,"- "]],[6059,6059],[6057,6057]]],[1537084733380,["gjx16@GJXAIOU",[[1,6057,"an"]],[6057,6057],[6059,6059]]],[1537084734011,["gjx16@GJXAIOU",[[-1,6057,"an"]],[6059,6059],[6057,6057]]],[1537084796862,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084796862,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084742453,["gjx16@GJXAIOU",[[1,6057,"安逸"]],[6057,6057],[6059,6059]]],[1537084743261,["gjx16@GJXAIOU",[[-1,6057,"安逸"]],[6059,6059],[6057,6057]]],[1537084757876,["gjx16@GJXAIOU",[[1,6057,"可以根据特定的字符进行分割字符串"]],[6057,6057],[6073,6073]]],[1537084761432,["gjx16@GJXAIOU",[[1,6098,"\n"]],[6073,6073],[6074,6074]]],[1537084763863,["gjx16@GJXAIOU",[[1,6074,"```"]],[6074,6074],[6077,6077]]],[1537084763902,["gjx16@GJXAIOU",[[1,6077,"language\n```\n"]],[6077,6077],[6077,6085]]],[1537084764896,["gjx16@GJXAIOU",[[-1,6077,"language"],[1,6085,"c"]],[6077,6085],[6078,6078]]],[1537084765164,["gjx16@GJXAIOU",[[1,6079,"\n"]],[6078,6078],[6079,6079]]],[1537084774647,["gjx16@GJXAIOU",[[1,6079,"#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}"]],[6079,6079],[6292,6292]]],[1537084786324,["gjx16@GJXAIOU",[[-1,6172," "]],[6173,6173],[6172,6172]]],[1537084787479,["gjx16@GJXAIOU",[[1,6172,"-"]],[6172,6172],[6173,6173]]],[1537084788663,["gjx16@GJXAIOU",[[-1,6172,"-"]],[6173,6173],[6172,6172]]],[1537084789181,["gjx16@GJXAIOU",[[1,6172,"_"]],[6172,6172],[6173,6173]]],[1537084796703,["gjx16@GJXAIOU",[[1,6178,"_ni_"]],[6178,6178],[6182,6182]]],[1537084856858,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537084856858,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537084797926,["gjx16@GJXAIOU",[[1,6182,"ho"]],[6182,6182],[6184,6184]]],[1537084799483,["gjx16@GJXAIOU",[[-1,6182,"ho"]],[6184,6184],[6182,6182]]],[1537084800664,["gjx16@GJXAIOU",[[1,6182,"hao"]],[6182,6182],[6185,6185]]],[1537084810244,["gjx16@GJXAIOU",[[-1,6203," const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符"]],[6203,6262],[6203,6203]]],[1537084811601,["gjx16@GJXAIOU",[[-1,6202," "],[1,6203,"\n"]],[6203,6203],[6203,6203]]],[1537085036862,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085036862,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085029643,["gjx16@GJXAIOU",[[1,6202,"  "]],[6202,6202],[6204,6204]]],[1537085033810,["gjx16@GJXAIOU",[[-1,6202,"  "],[1,6204,"\n"]],[6204,6204],[6203,6203]]],[1537085035574,["gjx16@GJXAIOU",[[1,6203,"  "]],[6203,6203],[6205,6205]]],[1537085096865,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085096865,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085041399,["gjx16@GJXAIOU",[[1,6205,"while()"]],[6205,6205],[6212,6212]]],[1537085088762,["gjx16@GJXAIOU",[[1,6202,"  buf = strtok();"]],[6202,6202],[6219,6219]]],[1537085094107,["gjx16@GJXAIOU",[[1,6217,"s,\"\""]],[6217,6217],[6221,6221]]],[1537085156869,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085156869,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085097034,["gjx16@GJXAIOU",[[1,6220,"_"]],[6220,6220],[6221,6221]]],[1537085109026,["gjx16@GJXAIOU",[[1,6204,"\n  "]],[6204,6204],[6207,6207]]],[1537085114627,["gjx16@GJXAIOU",[[1,6236,"buf"]],[6236,6236],[6239,6239]]],[1537085116509,["gjx16@GJXAIOU",[[1,6241,"  \n"]],[6240,6240],[6243,6243]]],[1537085119259,["gjx16@GJXAIOU",[[1,6243,"{}"]],[6243,6243],[6245,6245]]],[1537085121150,["gjx16@GJXAIOU",[[1,6244,"\n  \n  \n  "]],[6244,6244],[6253,6253]]],[1537085126738,["gjx16@GJXAIOU",[[1,6247,"  pi"]],[6247,6247],[6251,6251]]],[1537085128319,["gjx16@GJXAIOU",[[-1,6250,"i"]],[6251,6251],[6250,6250]]],[1537085130417,["gjx16@GJXAIOU",[[1,6250,"rinf"]],[6250,6250],[6254,6254]]],[1537085131940,["gjx16@GJXAIOU",[[-1,6253,"f"]],[6254,6254],[6253,6253]]],[1537085135964,["gjx16@GJXAIOU",[[1,6253,"tf()\"\""]],[6253,6253],[6259,6259]]],[1537085137092,["gjx16@GJXAIOU",[[-1,6256,")\"\""]],[6259,6259],[6256,6256]]],[1537085138799,["gjx16@GJXAIOU",[[1,6256,");"]],[6256,6256],[6258,6258]]],[1537085141591,["gjx16@GJXAIOU",[[1,6256,"\"\""]],[6256,6256],[6258,6258]]],[1537085146188,["gjx16@GJXAIOU",[[1,6257,"%s\\n"]],[6257,6257],[6261,6261]]],[1537085153511,["gjx16@GJXAIOU",[[1,6262,",buf"]],[6262,6262],[6266,6266]]],[1537085216869,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085216869,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085157969,["gjx16@GJXAIOU",[[1,6271,"  \n  "]],[6268,6268],[6273,6273]]],[1537085160066,["gjx16@GJXAIOU",[[1,6273,"buf "]],[6273,6273],[6277,6277]]],[1537085160502,["gjx16@GJXAIOU",[[-1,6276," "]],[6277,6277],[6276,6276]]],[1537085165173,["gjx16@GJXAIOU",[[1,6276," = sto"]],[6276,6276],[6282,6282]]],[1537085167245,["gjx16@GJXAIOU",[[-1,6281,"o"]],[6282,6282],[6281,6281]]],[1537085173051,["gjx16@GJXAIOU",[[1,6281,"rtok();"]],[6281,6281],[6288,6288]]],[1537085178953,["gjx16@GJXAIOU",[[1,6286,"NULL,\"\""]],[6286,6286],[6293,6293]]],[1537085181155,["gjx16@GJXAIOU",[[1,6292,"_"]],[6292,6292],[6293,6293]]],[1537085207952,["gjx16@GJXAIOU",[[1,6227," //strtokdi"]],[6227,6227],[6238,6238]]],[1537085208962,["gjx16@GJXAIOU",[[-1,6236,"di"]],[6238,6238],[6236,6236]]],[1537085215222,["gjx16@GJXAIOU",[[1,6236,"第一次调用的时候"]],[6236,6236],[6244,6244]]],[1537085276869,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085276869,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085250713,["gjx16@GJXAIOU",[[1,6244,"，第一个参数是字符串，但是第二次调用的时候第一个参数应该是NULL；"]],[6244,6244],[6278,6278]]],[1537085396874,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085396874,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085388984,["gjx16@GJXAIOU",[[1,6204,"const char *buf "]],[6204,6204],[6220,6220]]],[1537085390927,["gjx16@GJXAIOU",[[-1,6219," "]],[6220,6220],[6219,6219]]],[1537085391341,["gjx16@GJXAIOU",[[1,6219,"；"]],[6219,6219],[6220,6220]]],[1537085576878,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085576878,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085517118,["gjx16@GJXAIOU",[[-1,6219,"；"]],[6220,6220],[6219,6219]]],[1537085517525,["gjx16@GJXAIOU",[[1,6219,"；"]],[6219,6219],[6220,6220]]],[1537085519086,["gjx16@GJXAIOU",[[-1,6219,"；"]],[6220,6220],[6219,6219]]],[1537085520459,["gjx16@GJXAIOU",[[1,6219,";"]],[6219,6219],[6220,6220]]],[1537085525292,["gjx16@GJXAIOU",[[1,6438,"\n"]],[6412,6412],[6413,6413]]],[1537085525486,["gjx16@GJXAIOU",[[1,6439,"\n"]],[6413,6413],[6414,6414]]],[1537085636879,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085636879,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085598985,["gjx16@GJXAIOU",[[1,6414,"- atoi"]],[6414,6414],[6420,6420]]],[1537085600407,["gjx16@GJXAIOU",[[1,6421,"- \n"]],[6420,6420],[6423,6423]]],[1537085601911,["gjx16@GJXAIOU",[[-1,6421,"- "]],[6423,6423],[6421,6421]]],[1537085611748,["gjx16@GJXAIOU",[[1,6421,"将字符串转换为整数（）"]],[6421,6421],[6432,6432]]],[1537085614529,["gjx16@GJXAIOU",[[1,6431,"int"]],[6431,6431],[6434,6434]]],[1537085626779,["gjx16@GJXAIOU",[[1,6435,"，同样的函数还有："]],[6435,6435],[6444,6444]]],[1537085696883,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085696883,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085653023,["gjx16@GJXAIOU",[[1,6444,"atof ,atol"]],[6444,6444],[6454,6454]]],[1537085662387,["gjx16@GJXAIOU",[[1,6480,"\n"]],[6454,6454],[6455,6455]]],[1537085662569,["gjx16@GJXAIOU",[[1,6481,"\n"]],[6455,6455],[6456,6456]]],[1537085665090,["gjx16@GJXAIOU",[[1,6456,"    "]],[6456,6456],[6460,6460]]],[1537085667870,["gjx16@GJXAIOU",[[-1,6456,"    "]],[6460,6460],[6456,6456]]],[1537085668405,["gjx16@GJXAIOU",[[-1,6481,"\n"]],[6456,6456],[6455,6455]]],[1537085669651,["gjx16@GJXAIOU",[[1,6481,"\n"]],[6455,6455],[6456,6456]]],[1537085670721,["gjx16@GJXAIOU",[[1,6456,"···"]],[6456,6456],[6459,6459]]],[1537085671885,["gjx16@GJXAIOU",[[-1,6456,"···"]],[6459,6459],[6456,6456]]],[1537085674286,["gjx16@GJXAIOU",[[1,6456,"```"]],[6456,6456],[6459,6459]]],[1537085674329,["gjx16@GJXAIOU",[[1,6459,"language\n```\n"]],[6459,6459],[6459,6467]]],[1537085675247,["gjx16@GJXAIOU",[[-1,6459,"language"],[1,6467,"c"]],[6459,6467],[6460,6460]]],[1537085676166,["gjx16@GJXAIOU",[[1,6461,"\n"]],[6460,6460],[6461,6461]]],[1537085756882,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085756882,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085698696,["gjx16@GJXAIOU",[[1,6461,"#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}"]],[6461,6461],[6674,6674]]],[1537085703002,["gjx16@GJXAIOU",[[-1,6532,"{0}"]],[6535,6535],[6532,6532]]],[1537085704504,["gjx16@GJXAIOU",[[1,6532,"\"\""]],[6532,6532],[6534,6534]]],[1537085706686,["gjx16@GJXAIOU",[[1,6533,"200"]],[6533,6533],[6536,6536]]],[1537085816955,[null,[[-1,4379,"i"],[1,4381,"\n"],[-1,4448,"\n"],[1,4473,"\n"],[-1,4477,"`"],[1,4480," "],[1,4500,"\n"],[-1,4504," \n}"],[1,4507,"}\n"],[-1,4566,"\n"],[1,4567,"`"]],[4379,4379],[4568,4568]]],[1537085816955,[null,[[1,4379,"i"],[-1,4380,"\n"],[1,4448,"\n"],[-1,4472,"\n"],[1,4477,"`"],[-1,4479," "],[-1,4500,"\n"],[1,4505," \n}"],[-1,4505,"}\n"],[1,4566,"\n"],[-1,4566,"`"]],[4568,4568],[4379,4379]]],[1537085767336,["gjx16@GJXAIOU",[[-1,6539,"  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符"],[1,6639,"i"]],[6539,6639],[6540,6540]]],[1537085767825,["gjx16@GJXAIOU",[[1,6540,"nt "]],[6540,6540],[6543,6543]]],[1537085769235,["gjx16@GJXAIOU",[[-1,6539,"int "]],[6543,6543],[6539,6539]]],[1537085778563,["gjx16@GJXAIOU",[[1,6539,"  int i = atoi()"]],[6539,6539],[6555,6555]]],[1537085780863,["gjx16@GJXAIOU",[[1,6554,"s"]],[6554,6554],[6555,6555]]],[1537085782745,["gjx16@GJXAIOU",[[1,6556,";"]],[6556,6556],[6557,6557]]],[1537085788702,["gjx16@GJXAIOU",[[-1,6572,"buf"]],[6575,6575],[6572,6572]]],[1537085789354,["gjx16@GJXAIOU",[[1,6572,"i"]],[6572,6572],[6573,6573]]],[1537085791763,["gjx16@GJXAIOU",[[-1,6569,"s"]],[6570,6570],[6569,6569]]],[1537085792103,["gjx16@GJXAIOU",[[1,6569,"d"]],[6569,6569],[6570,6570]]]],null,"gjx16@GJXAIOU"],["f4ba28af-3337-4b2e-b2be-9ac022698d28",1545227965667,"# day 7 函数\n\n@toc\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar  mystrcat(char  a[],  char  b[])\n\nint  mystrlen(char  c[])\n\nint  main()\n\n{\n\nchar  str1[]  =  \"hello  \";\n\nchar  str2[]  =  \"world\";\n\nmystrcat(str1,str2);\n\nprintf(\"%s\\n\",str1);\n\nreturn  0;\n\n}\n\nvoid  mystrcpy(char  a[],char  b[])\n\n{\n\n  int  len1  =  mystrlen(str1);\n\n  int  len2  =  mystrlen(str2);\n\n  int  i  =  0;\n\nfor(i  =  1;  i  <  len2  +  1;  i++)\n\n  {\n\n  a[len1  +  i]  =  b[i-1];\n\n  }\n\n}\n\nint  mystrlen(char  c[])\n\n{\n\n  int  len  =  0;\n\n  while(c[len++]);\n\n  len  --;\n\n  return  len;\n\n}\n```\n\n**随机数产生函数rand和srand**\nrand 是伪随机数产生器，每次调用rand产生的随机数是一样的；\n如果在调用rand之前先调用srand就出现任意的随机数，而自要保证每次调用srand函数的时候，参数的值是不同的，那么rand函数就一定会产生不同的随机数\n\n- 仅有 rand 的时候\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n\n  int i = 0;\n  for(i = 0; i < 10; i++)\n  {\n    int value = rand();\n    printf(\"%d\\n\",value);\n  \n  }\n  return 0;\n}\n\n\n```\n\n- 同时使用`rand`和`srand`的时候\n因为要求`srand`的参数时刻变化，一般选择将系统时间转换为整数赋值作为参数\n\n```c\n#include<stdio.h>\n#include<time.h>\n#include<stdlib.h>\n\nint main()\n{\n  time_t tm = time(NULL);   //得到系统时间\n  srand(tm);    //随机数种子发生器\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      int value = rand();\n      printf(\"%d\\n\",value);\n    }\n  return 0;\n}\n\n```\n\n\n**字符串数组的输入与输出**\n\n- 输入函数：scanf  、gets 、fgets\n\n **scanf :**  可以使用转义输出，既可以输出整数或者字符串，存在缓冲区溢出的问题；遇到空格和回车均认为输入结束；\n  **gets ：** 只能输入字符串，存在缓冲区溢出的问题；只有遇到回车的时候才认为输出结束；\n  **fgets ：** 通过设置第二个参数的大小可以防止缓冲区溢出的出现；\n\n  - scanf\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s1[20]  =  {0};\n\n  scanf(\"%s\",s1);\n\n  printf(\"%s\\n\",s1);\n\n  return  0;\n\n}\n\n```\n\n  - gets \n     \n```c\n#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}\n```\n\n局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数   `atio` 函数将字符串转换为对应的整数值\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  ss[20]  =  {0};\n  gets(ss);\n  int  sss;\n  sss  =  atoi(ss);\n  printf(\"%d\\n\",sss);\n\nreturn  0;\n\n}\n```\n\n  - fgets \n  fgets是安全的，不存在缓冲区溢出的问题，只要第二个参数值的大小小于数组的长度\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[20]  =  {0};\n\n  fgets(s,(sizeof(s)  -  1),stdin);\n  //参数名称：char型数组名，存储长度（小于数组的长度，单位为：字节），stdin表示标准输入输出\n\n  printf(\"%s\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**字符串操作函数**\n sizeof 返回的只是数组的大小，而strlen返回的是字符串的有效元素的长度（不包括\\0）\n\n- strlen:\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}\n\n```\n- strcat:\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n```\n\n- strncat \n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strncat(s,s1,2);//只复制前两个字符；\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n\n```\n\n- strcmp\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s1[]  =  \"hello\";\n  char  s2[]  =  \"hello  world\";\n  if(strcmp(s1,s2)  ==  0)  //返回值为0表示两个字符串相同\n  {\n    printf(\"相同\\n\");\n  }\n\n  else\n  {\n    printf(\"不相同\\n\");\n  }\n\n}\n```\n\n\n- strncmp  \n只比较前n个字符\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"hello\";\n  char s2[] = \"hello world\";\n  if(strcmp(s1,s2,5) == 0)\n    {\n      printf(\"相同\\n\");\n    }\n  else\n    {\n       printf(\"不相同\\n\"); \n    }\n\n  return 0;\n}\n```\n\n- strcpy \n拷贝\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"12345\";\n  strcpy(s1,s2);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- strncpy \n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"1234567\";\n  strncpy(s1,s2,5);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- sprintf\n将格式化后的字符串输出到第一个参数指定的字符串中去，而不是直接的输出到屏幕上\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"i = %d\", i);\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n应用：将整数转换为字符串\n```c\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"%d\", i);  //将i 的值放在字符数组s 中\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n- sscanf\nsscanf是从字符串中得到一个输入值\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[100]  =  \"5+6=\";\n  int  a;\n  int  b;\n  sscanf(s,\"%d+%d\",&a,&b); //相当于将字符转换为整数\n  printf(\"%d\\n\",a+b);\n\n  return  0;\n\n}\n```\n\n- strchr\n返回值是指针，查找数组中的元素，会返回数组中查到到的该元素之后的所有元素值；\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strchr(s,'o'); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n\n```\n\n- strstr\n查找该字符串中是否含有某些连续的字符元素\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- strtok \n可以根据特定的字符进行分割字符串\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello_world_ni_hao\");  //相当于为数组s赋值\n  const char *buf;\n  buf = strtok(s,\"_\"); //strtok第一次调用的时候，第一个参数是字符串，但是第二次调用的时候第一个参数应该是NULL；\n  while(buf)\n  {\n    printf(\"%s\\n\",buf);\n    buf = strtok(NULL,\"_\");\n  \n  }\n\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- atoi\n将字符串转换为整数（int），同样的函数还有：atof ,atol\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = \"200\";\n  int i = atoi(s);\n  printf(\"%d\",i);\n\n  return  0;\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1545227919241,["gjx16@GJXAIOU",[[-1,12,"@toc"]],[16,16],[12,12]]],[1545229498901,["gjx16@GJXAIOU",[[-1,1270,"\n"]],[1270,1270],[1269,1269]]],[1545229500680,["gjx16@GJXAIOU",[[-1,1295,"\n"]],[1295,1295],[1294,1294]]],[1545229504340,["gjx16@GJXAIOU",[[-1,1307,"\n"]],[1307,1307],[1306,1306]]],[1545229508164,["gjx16@GJXAIOU",[[-1,1338,"\n"]],[1338,1338],[1337,1337]]],[1545229510008,["gjx16@GJXAIOU",[[-1,1364,"\n"]],[1364,1364],[1363,1363]]],[1545229515341,["gjx16@GJXAIOU",[[-1,1419,"\n"]],[1419,1419],[1418,1418]]],[1545229520728,["gjx16@GJXAIOU",[[-1,1458,"\n"]],[1458,1458],[1457,1457]]],[1545229526960,["gjx16@GJXAIOU",[[-1,1493,"\n"]],[1493,1493],[1492,1492]]],[1545229536462,["gjx16@GJXAIOU",[[-1,1542,"\n"]],[1542,1542],[1541,1541]]],[1545229541733,["gjx16@GJXAIOU",[[-1,1580,"\n"]],[1580,1580],[1579,1579]]],[1545229544775,["gjx16@GJXAIOU",[[-1,1584,"\n"]],[1584,1584],[1583,1583]]],[1545229679607,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1545229679735,["gjx16@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1545229681564,["gjx16@GJXAIOU",[[1,0,"---\ndate:`2018-12-19`复习\n---"]],[0,0],[27,27]]],[1545229697284,["gjx16@GJXAIOU",[[1,23," 161行"]],[23,23],[28,28]]]],null,"gjx16@GJXAIOU"],["01294b01-fa3c-4f49-bae7-74736fcf70a0",1545399638397,"---\ndate:`2018-12-19`复习 161行\n---\n\n# day 7 函数\n\n\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar  mystrcat(char  a[],  char  b[])\nint  mystrlen(char  c[])\nint  main()\n{\n\nchar  str1[]  =  \"hello  \";\nchar  str2[]  =  \"world\";\nmystrcat(str1,str2);\n\nprintf(\"%s\\n\",str1);\n\nreturn  0;\n}\n\nvoid  mystrcpy(char  a[],char  b[])\n{\n\n  int  len1  =  mystrlen(str1);\n  int  len2  =  mystrlen(str2);\n\n  int  i  =  0;\nfor(i  =  1;  i  <  len2  +  1;  i++)\n  {\n  a[len1  +  i]  =  b[i-1];\n\n  }\n\n}\n\nint  mystrlen(char  c[])\n\n{\n\n  int  len  =  0;\n\n  while(c[len++]);\n\n  len  --;\n\n  return  len;\n\n}\n```\n\n**随机数产生函数rand和srand**\nrand 是伪随机数产生器，每次调用rand产生的随机数是一样的；\n如果在调用rand之前先调用srand就出现任意的随机数，而自要保证每次调用srand函数的时候，参数的值是不同的，那么rand函数就一定会产生不同的随机数\n\n- 仅有 rand 的时候\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n\n  int i = 0;\n  for(i = 0; i < 10; i++)\n  {\n    int value = rand();\n    printf(\"%d\\n\",value);\n  \n  }\n  return 0;\n}\n\n\n```\n\n- 同时使用`rand`和`srand`的时候\n因为要求`srand`的参数时刻变化，一般选择将系统时间转换为整数赋值作为参数\n\n```c\n#include<stdio.h>\n#include<time.h>\n#include<stdlib.h>\n\nint main()\n{\n  time_t tm = time(NULL);   //得到系统时间\n  srand(tm);    //随机数种子发生器\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      int value = rand();\n      printf(\"%d\\n\",value);\n    }\n  return 0;\n}\n\n```\n\n\n**字符串数组的输入与输出**\n\n- 输入函数：scanf  、gets 、fgets\n\n **scanf :**  可以使用转义输出，既可以输出整数或者字符串，存在缓冲区溢出的问题；遇到空格和回车均认为输入结束；\n  **gets ：** 只能输入字符串，存在缓冲区溢出的问题；只有遇到回车的时候才认为输出结束；\n  **fgets ：** 通过设置第二个参数的大小可以防止缓冲区溢出的出现；\n\n  - scanf\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s1[20]  =  {0};\n\n  scanf(\"%s\",s1);\n\n  printf(\"%s\\n\",s1);\n\n  return  0;\n\n}\n\n```\n\n  - gets \n     \n```c\n#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}\n```\n\n局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数   `atio` 函数将字符串转换为对应的整数值\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  ss[20]  =  {0};\n  gets(ss);\n  int  sss;\n  sss  =  atoi(ss);\n  printf(\"%d\\n\",sss);\n\nreturn  0;\n\n}\n```\n\n  - fgets \n  fgets是安全的，不存在缓冲区溢出的问题，只要第二个参数值的大小小于数组的长度\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[20]  =  {0};\n\n  fgets(s,(sizeof(s)  -  1),stdin);\n  //参数名称：char型数组名，存储长度（小于数组的长度，单位为：字节），stdin表示标准输入输出\n\n  printf(\"%s\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**字符串操作函数**\n sizeof 返回的只是数组的大小，而strlen返回的是字符串的有效元素的长度（不包括\\0）\n\n- strlen:\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}\n\n```\n- strcat:\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n```\n\n- strncat \n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strncat(s,s1,2);//只复制前两个字符；\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n\n```\n\n- strcmp\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s1[]  =  \"hello\";\n  char  s2[]  =  \"hello  world\";\n  if(strcmp(s1,s2)  ==  0)  //返回值为0表示两个字符串相同\n  {\n    printf(\"相同\\n\");\n  }\n\n  else\n  {\n    printf(\"不相同\\n\");\n  }\n\n}\n```\n\n\n- strncmp  \n只比较前n个字符\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"hello\";\n  char s2[] = \"hello world\";\n  if(strcmp(s1,s2,5) == 0)\n    {\n      printf(\"相同\\n\");\n    }\n  else\n    {\n       printf(\"不相同\\n\"); \n    }\n\n  return 0;\n}\n```\n\n- strcpy \n拷贝\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"12345\";\n  strcpy(s1,s2);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- strncpy \n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"1234567\";\n  strncpy(s1,s2,5);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- sprintf\n将格式化后的字符串输出到第一个参数指定的字符串中去，而不是直接的输出到屏幕上\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"i = %d\", i);\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n应用：将整数转换为字符串\n```c\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"%d\", i);  //将i 的值放在字符数组s 中\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n- sscanf\nsscanf是从字符串中得到一个输入值\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[100]  =  \"5+6=\";\n  int  a;\n  int  b;\n  sscanf(s,\"%d+%d\",&a,&b); //相当于将字符转换为整数\n  printf(\"%d\\n\",a+b);\n\n  return  0;\n\n}\n```\n\n- strchr\n返回值是指针，查找数组中的元素，会返回数组中查到到的该元素之后的所有元素值；\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strchr(s,'o'); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n\n```\n\n- strstr\n查找该字符串中是否含有某些连续的字符元素\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- strtok \n可以根据特定的字符进行分割字符串\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello_world_ni_hao\");  //相当于为数组s赋值\n  const char *buf;\n  buf = strtok(s,\"_\"); //strtok第一次调用的时候，第一个参数是字符串，但是第二次调用的时候第一个参数应该是NULL；\n  while(buf)\n  {\n    printf(\"%s\\n\",buf);\n    buf = strtok(NULL,\"_\");\n  \n  }\n\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- atoi\n将字符串转换为整数（int），同样的函数还有：atof ,atol\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = \"200\";\n  int i = atoi(s);\n  printf(\"%d\",i);\n\n  return  0;\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1545399606627,["gjx16@GJXAIOU",[[1,1780,"**"],[1,1813,"**"]],[1780,1813],[1780,1817]]],[1545399639503,["gjx16@GJXAIOU",[[-1,1847,"而自"]],[1849,1849],[1847,1847]]],[1545399642323,["gjx16@GJXAIOU",[[1,1847,"而且"]],[1847,1847],[1849,1849]]]],null,"gjx16@GJXAIOU"],["8d7a1ade-fb64-4858-a5c2-66e283bd0657",1545658573204,"---\ndate:`2018-12-19`复习 161行\n---\n\n# day 7 函数\n\n\n\n**1.定义构造函数**\n示例：使用系统自带的strlen函数求解数组的长度\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[] = \"hello world\";\n  int len = strlen(s);\n  printf(\"%d\\n\",len);\n\n}\n\n```\n\n使用自己构造的函数求解数组长度\n\n```c\n#include<stdio.h>\nint main()\n{\n  char s[] = \"hello world\";\n  int len = 0;\n  while(s[len++]);\n  len--;\n\nprintf(\"len = %d\\n\",len);\n\n}\n\n```\n将以上的程序转换为函数；\n\n```c\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n\n}\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n\n\n}\n```\n\n当自定义的函数在main函数之后时候，前面要加函数声明\n```c\n\n#include<stdio.h>\n\nint mystrlen(char a[])   //函数声明\n\n\n\nint main()\n{\n  char s[] =\"hello world\";\n  int len = mystrlen(s); //实参可以是变量或者是常量，而形参只能是变量；\n  printf(\"len = %d\\n\",len);\n}\n\n\n\nint mystrlen(char a[])   //函数返回值类型   函数名（参数类型  形式参数）\n{\n  int len = 0;\n  while(a[len++]);\n  len --;\n  return len;    //函数的返回值一定要和函数定义的时候一致\n}\n\n\n```\n\n\n求a.b中较大的一个数\n\n```c\n#include<stdio.h>\n\nint max(int a,int b)\n{\n  int c = (a < b)? a : b; \n}\n```\n\n**形参与实参传递**\nC语言中实参到形参是“值传递”，是一种单向传递，只能由实参传递给形参，但是当函数的参数为数组的时候，可以通过形参修改实参的值\n\n\n\n**实现strcpy功能的函数**\n\n```c\n\n#include<stdio.h>\n\nchar  mystrcat(char  a[],  char  b[])\nint  mystrlen(char  c[])\nint  main()\n{\n\nchar  str1[]  =  \"hello  \";\nchar  str2[]  =  \"world\";\nmystrcat(str1,str2);\n\nprintf(\"%s\\n\",str1);\n\nreturn  0;\n}\n\nvoid  mystrcpy(char  a[],char  b[])\n{\n\n  int  len1  =  mystrlen(str1);\n  int  len2  =  mystrlen(str2);\n\n  int  i  =  0;\nfor(i  =  1;  i  <  len2  +  1;  i++)\n  {\n  a[len1  +  i]  =  b[i-1];\n\n  }\n\n}\n\nint  mystrlen(char  c[])\n\n{\n\n  int  len  =  0;\n\n  while(c[len++]);\n\n  len  --;\n\n  return  len;\n\n}\n```\n\n**随机数产生函数rand和srand**\n**rand 是伪随机数产生器，每次调用rand产生的随机数是一样的；**\n如果在调用rand之前先调用srand就出现任意的随机数，而且要保证每次调用srand函数的时候，参数的值是不同的，那么rand函数就一定会产生不同的随机数\n\n- 仅有 rand 的时候\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n\n  int i = 0;\n  for(i = 0; i < 10; i++)\n  {\n    int value = rand();\n    printf(\"%d\\n\",value);\n  \n  }\n  return 0;\n}\n\n\n```\n\n- 同时使用`rand`和`srand`的时候\n因为要求`srand`的参数时刻变化，一般选择将系统时间转换为整数赋值作为参数\n\n```c\n#include<stdio.h>\n#include<time.h>\n#include<stdlib.h>\n\nint main()\n{\n  time_t tm = time(NULL);   //得到系统时间\n  srand(tm);    //随机数种子发生器\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      int value = rand();\n      printf(\"%d\\n\",value);\n    }\n  return 0;\n}\n\n```\n\n\n**字符串数组的输入与输出**\n\n- 输入函数：scanf  、gets 、fgets\n\n **scanf :**  可以使用转义输出，既可以输出整数或者字符串，存在缓冲区溢出的问题；遇到空格和回车均认为输入结束；\n  **gets ：** 只能输入字符串，存在缓冲区溢出的问题；只有遇到回车的时候才认为输出结束；\n  **fgets ：** 通过设置第二个参数的大小可以防止缓冲区溢出的出现；\n\n  - scanf\n```c\n#include<stdio.h>\n\nint  main()\n\n{\n\n  char  s1[20]  =  {0};\n\n  scanf(\"%s\",s1);\n\n  printf(\"%s\\n\",s1);\n\n  return  0;\n\n}\n\n```\n\n  - gets \n     \n```c\n#include<stdio.h>\n\nint main()\n{\n  char ss[20] = {0};\n  gets(ss);\n  printf(\"%s\\n\",ss);\n\nreturn 0;\n}\n```\n\n局限性：gets仅能使用获得字符串的值，但是一般使用过程中需要使用整数，因此需要借助其他函数将其转换为整数   `atio` 函数将字符串转换为对应的整数值\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  ss[20]  =  {0};\n  gets(ss);\n  int  sss;\n  sss  =  atoi(ss);\n  printf(\"%d\\n\",sss);\n\nreturn  0;\n\n}\n```\n\n  - fgets \n  fgets是安全的，不存在缓冲区溢出的问题，只要第二个参数值的大小小于数组的长度\n```c\n#include<stdio.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[20]  =  {0};\n\n  fgets(s,(sizeof(s)  -  1),stdin);\n  //参数名称：char型数组名，存储长度（小于数组的长度，单位为：字节），stdin表示标准输入输出\n\n  printf(\"%s\\n\",s);\n\n  return  0;\n\n}\n\n```\n\n**字符串操作函数**\n sizeof 返回的只是数组的大小，而strlen返回的是字符串的有效元素的长度（不包括\\0）\n\n- strlen:\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  char s[100] = \"hello world\";\n  int len = strlen(s);    \n  printf(\"len = %d\\n\",len);\n\n  return 0;\n}\n\n```\n- strcat:\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strcat(s,s1);\n  //两个字符串合并，结果放入第一个参数之中，但是如果第一个字符串的大小无法容纳两个字符串的实际元素大小，也会产生溢出问题。\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n```\n\n- strncat \n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s[100]  =  \"hello  world\";\n  char  s1[100]  =  \"nihao\";\n  strncat(s,s1,2);//只复制前两个字符；\n\n  printf(\"%s\\n\",s);\n  return  0;\n\n}\n\n```\n\n- strcmp\n\n```c\n#include<stdio.h>\n\n#include<string.h>\n\nint  main()\n\n{\n\n  char  s1[]  =  \"hello\";\n  char  s2[]  =  \"hello  world\";\n  if(strcmp(s1,s2)  ==  0)  //返回值为0表示两个字符串相同\n  {\n    printf(\"相同\\n\");\n  }\n\n  else\n  {\n    printf(\"不相同\\n\");\n  }\n\n}\n```\n\n\n- strncmp  \n只比较前n个字符\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"hello\";\n  char s2[] = \"hello world\";\n  if(strcmp(s1,s2,5) == 0)\n    {\n      printf(\"相同\\n\");\n    }\n  else\n    {\n       printf(\"不相同\\n\"); \n    }\n\n  return 0;\n}\n```\n\n- strcpy \n拷贝\n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"12345\";\n  strcpy(s1,s2);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- strncpy \n\n```c\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n  char s1[] = \"abcdefg\";\n  char s2[] = \"1234567\";\n  strncpy(s1,s2,5);\n  printf(\"%s\\n\",s1);\n  \n  return 0;\n}\n```\n\n- sprintf\n将格式化后的字符串输出到第一个参数指定的字符串中去，而不是直接的输出到屏幕上\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"i = %d\", i);\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n应用：将整数转换为字符串\n```c\nint main()\n{\n  int i = 100;\n  char s[100] = {0};\n  sprintf(s,\"%d\", i);  //将i 的值放在字符数组s 中\n  printf(\"%s\\n\",s);\n\n  return 0;\n}\n```\n\n- sscanf\nsscanf是从字符串中得到一个输入值\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint  main()\n{\n\n  char  s[100]  =  \"5+6=\";\n  int  a;\n  int  b;\n  sscanf(s,\"%d+%d\",&a,&b); //相当于将字符转换为整数\n  printf(\"%d\\n\",a+b);\n\n  return  0;\n\n}\n```\n\n- strchr\n返回值是指针，查找数组中的元素，会返回数组中查到到的该元素之后的所有元素值；\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strchr(s,'o'); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n\n```\n\n- strstr\n查找该字符串中是否含有某些连续的字符元素\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello world\");  //相当于为数组s赋值\n  const char *buf = strstr(s,\"wo\"); //在s这个字符串之间，查找第二个参数指定的字符\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- strtok \n可以根据特定的字符进行分割字符串\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = {0};\n  strcpy(s,\"hello_world_ni_hao\");  //相当于为数组s赋值\n  const char *buf;\n  buf = strtok(s,\"_\"); //strtok第一次调用的时候，第一个参数是字符串，但是第二次调用的时候第一个参数应该是NULL；\n  while(buf)\n  {\n    printf(\"%s\\n\",buf);\n    buf = strtok(NULL,\"_\");\n  \n  }\n\n  printf(\"%s\",buf);\n\n  return  0;\n\n}\n```\n\n- atoi\n将字符串转换为整数（int），同样的函数还有：atof ,atol\n\n```c\n#include<stdio.h>\n#include<string.h>\n\nint  main()\n{\n\n  char  s[100]  = \"200\";\n  int i = atoi(s);\n  printf(\"%d\",i);\n\n  return  0;\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1545658533127,["gjx16@GJXAIOU",[[-1,4158,"\n"]],[4158,4158],[4157,4157]]]],null,"gjx16@GJXAIOU"]]}