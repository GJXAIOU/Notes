{"compress":true,"commitItems":[["1e8b2e56-cf2a-4626-86f2-ec3204c59f7f",1539583492109,"",[[1539583449689,["gjx16@GJXAIOU",[[1,0,"# day14 基本数据结构\n\n\n\n"]],[0,0],[17,17]]],[1539583453687,["gjx16@GJXAIOU",[[-1,17,"\n"],[1,18,"-"]],[17,17],[18,18]]],[1539583454006,["gjx16@GJXAIOU",[[1,18,"--"]],[18,18],[20,20]]],[1539583455183,["gjx16@GJXAIOU",[[1,20,"\n\n"]],[20,20],[21,21]]],[1539583458849,["gjx16@GJXAIOU",[[-1,21,"\n"],[1,22,"date"]],[21,21],[25,25]]],[1539583466414,["gjx16@GJXAIOU",[[1,25,"：`20118"]],[25,25],[32,32]]],[1539583467292,["gjx16@GJXAIOU",[[-1,30,"18"]],[32,32],[30,30]]],[1539583473262,["gjx16@GJXAIOU",[[1,30,"8-10="]],[30,30],[35,35]]],[1539583473943,["gjx16@GJXAIOU",[[-1,34,"="]],[35,35],[34,34]]],[1539583476814,["gjx16@GJXAIOU",[[1,34,"-15`"]],[34,34],[38,38]]],[1539583478431,["gjx16@GJXAIOU",[[1,38,"\n\n"]],[38,38],[39,39]]],[1539583480054,["gjx16@GJXAIOU",[[-1,39,"\n"],[1,40,"-"]],[39,39],[40,40]]],[1539583480537,["gjx16@GJXAIOU",[[1,40,"--"]],[40,40],[42,42]]],[1539583486911,["gjx16@GJXAIOU",[[1,17,"\n"]],[16,16],[17,17]]],[1539583491468,["gjx16@GJXAIOU",[[-1,19,"--"]],[21,21],[19,19]]],[1539583492364,["gjx16@GJXAIOU",[[-1,18,"-"]],[19,19],[18,18]]],[1539583494088,["gjx16@GJXAIOU",[[1,18,"---"]],[18,18],[21,21]]],[1539583497951,["gjx16@GJXAIOU",[[-1,18,"---\ndate：`2018-10-15`\n---"]],[17,43],[17,17]]],[1539583499863,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1539583501255,["gjx16@GJXAIOU",[[1,0,"\n---\ndate：`2018-10-15`\n---"]],[0,0],[26,26]]],[1539583503911,["gjx16@GJXAIOU",[[1,27,"\n"]],[26,26],[27,27]]],[1539583507206,["gjx16@GJXAIOU",[[-1,23,"---"]],[26,26],[23,23]]],[1539583508431,["gjx16@GJXAIOU",[[1,23,"---"]],[23,23],[26,26]]],[1539583510198,["gjx16@GJXAIOU",[[-1,23,"---"]],[26,26],[23,23]]],[1539583533488,["gjx16@GJXAIOU",[[1,23,"---"]],[23,23],[26,26]]],[1539583536700,["gjx16@GJXAIOU",[[-1,9,"："]],[10,10],[9,9]]],[1539583537967,["gjx16@GJXAIOU",[[1,9,"："]],[9,9],[10,10]]],[1539583538821,["gjx16@GJXAIOU",[[-1,9,"："]],[10,10],[9,9]]],[1539583541061,["gjx16@GJXAIOU",[[1,9,":"]],[9,9],[10,10]]],[1539583542076,["gjx16@GJXAIOU",[[-1,9,":"]],[10,10],[9,9]]],[1539583542085,["gjx16@GJXAIOU",[[1,9,"="]],[9,9],[10,10]]],[1539583543421,["gjx16@GJXAIOU",[[-1,5,"date="]],[10,10],[5,5]]],[1539583546239,["gjx16@GJXAIOU",[[1,5,"date:"]],[5,5],[10,10]]],[1539583552404,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1539583552567,["gjx16@GJXAIOU",[[1,2,"\n"]],[1,1],[2,2]]],[1539583552983,["gjx16@GJXAIOU",[[1,3,"\n"]],[2,2],[3,3]]],[1539583553780,["gjx16@GJXAIOU",[[-1,3,"\n"]],[3,3],[2,2]]],[1539583553916,["gjx16@GJXAIOU",[[-1,2,"\n"]],[2,2],[1,1]]],[1539583554070,["gjx16@GJXAIOU",[[-1,0,"\n"]],[1,1],[0,0]]],[1539583556510,["gjx16@GJXAIOU",[[-1,0,"\n---\ndate:`2018-10-15`\n---\n"]],[0,27],[0,0]]],[1539583557057,["gjx16@GJXAIOU",[[1,0,"_"]],[0,0],[1,1]]],[1539583557079,["gjx16@GJXAIOU",[[1,0,"_"]],[1,1],[1,1]]],[1539583557356,["gjx16@GJXAIOU",[[1,2,"__"]],[1,1],[3,3]]],[1539583559990,["gjx16@GJXAIOU",[[-1,0,"____"]],[3,3],[0,0]]],[1539583560542,["gjx16@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1539583560693,["gjx16@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1539583560852,["gjx16@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1539583560874,["gjx16@GJXAIOU",[[1,4,"\n---\n\n"]],[3,3],[4,4]]],[1539583573223,["gjx16@GJXAIOU",[[1,4,"date:`2018-10-25"]],[4,4],[20,20]]],[1539583574366,["gjx16@GJXAIOU",[[-1,18,"25"]],[20,20],[18,18]]],[1539583577184,["gjx16@GJXAIOU",[[1,18,"15`"]],[18,18],[21,21]]],[1539583589702,["gjx16@GJXAIOU",[[1,43,"## dui"]],[43,43],[49,49]]],[1539583590886,["gjx16@GJXAIOU",[[-1,46,"dui"]],[49,49],[46,46]]],[1539583598242,["gjx16@GJXAIOU",[[1,46,"对于文件造作"]],[46,46],[52,52]]],[1539583599436,["gjx16@GJXAIOU",[[-1,50,"造作"]],[52,52],[50,50]]],[1539583605760,["gjx16@GJXAIOU",[[1,50,"操作的复习"]],[50,50],[55,55]]],[1539583606254,["gjx16@GJXAIOU",[[1,57,"\n"]],[55,55],[56,56]]],[1539583606414,["gjx16@GJXAIOU",[[1,58,"\n"]],[56,56],[57,57]]],[1539583608606,["gjx16@GJXAIOU",[[1,57,"## "]],[57,57],[60,60]]],[1539583621209,["gjx16@GJXAIOU",[[1,60,"冒泡排序与选择排序"]],[60,60],[69,69]]],[1539583621732,["gjx16@GJXAIOU",[[1,71,"\n"]],[69,69],[70,70]]],[1539583622119,["gjx16@GJXAIOU",[[1,72,"\n"]],[70,70],[71,71]]],[1539583639375,["gjx16@GJXAIOU",[[1,71,"## 二分查找算法"]],[71,71],[80,80]]],[1539583639884,["gjx16@GJXAIOU",[[1,82,"\n"]],[80,80],[81,81]]],[1539583640039,["gjx16@GJXAIOU",[[1,83,"\n"]],[81,81],[82,82]]],[1539583649326,["gjx16@GJXAIOU",[[1,82,"## 单向量表的是"]],[82,82],[91,91]]],[1539583651244,["gjx16@GJXAIOU",[[-1,87,"量表的是"]],[91,91],[87,87]]],[1539583658130,["gjx16@GJXAIOU",[[1,87,"链表的实现"]],[87,87],[92,92]]],[1539583658903,["gjx16@GJXAIOU",[[1,94,"\n"]],[92,92],[93,93]]],[1539583659181,["gjx16@GJXAIOU",[[1,95,"\n"]],[93,93],[94,94]]],[1539583667071,["gjx16@GJXAIOU",[[1,94,"## "]],[94,94],[97,97]]],[1539583678225,["gjx16@GJXAIOU",[[1,97,"单项量表"]],[97,97],[101,101]]],[1539583679270,["gjx16@GJXAIOU",[[-1,99,"量表"]],[101,101],[99,99]]],[1539583686850,["gjx16@GJXAIOU",[[1,99,"链表的逆置"]],[99,99],[104,104]]],[1539583688196,["gjx16@GJXAIOU",[[1,106,"\n"]],[104,104],[105,105]]],[1539583691383,["gjx16@GJXAIOU",[[1,57,"\n"]],[56,56],[57,57]]],[1539583691519,["gjx16@GJXAIOU",[[1,58,"\n"]],[57,57],[58,58]]],[1539583691660,["gjx16@GJXAIOU",[[1,59,"\n"]],[58,58],[59,59]]],[1539583693556,["gjx16@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1539583693686,["gjx16@GJXAIOU",[[1,75,"\n"]],[74,74],[75,75]]],[1539583693815,["gjx16@GJXAIOU",[[1,76,"\n"]],[75,75],[76,76]]],[1539583695732,["gjx16@GJXAIOU",[[1,88,"\n"]],[87,87],[88,88]]],[1539583695878,["gjx16@GJXAIOU",[[1,89,"\n"]],[88,88],[89,89]]],[1539583695980,["gjx16@GJXAIOU",[[1,90,"\n"]],[89,89],[90,90]]],[1539605407458,["gjx16@GJXAIOU",[[-1,43,"## 对于文件操作的复习"]],[43,55],[43,43]]],[1539605409639,["gjx16@GJXAIOU",[[-1,47,"\n"]],[47,47],[46,46]]],[1539605409800,["gjx16@GJXAIOU",[[-1,46,"\n"]],[46,46],[45,45]]],[1539605409943,["gjx16@GJXAIOU",[[-1,45,"\n"]],[45,45],[44,44]]],[1539605410457,["gjx16@GJXAIOU",[[-1,44,"\n"]],[44,44],[43,43]]],[1539608819886,["gjx16@GJXAIOU",[[1,58,"****"]],[58,58],[60,60]]],[1539608825715,["gjx16@GJXAIOU",[[1,60,"冒泡排序法；"]],[60,60],[66,66]]],[1539608826729,["gjx16@GJXAIOU",[[-1,65,"；"]],[66,66],[65,65]]],[1539608827429,["gjx16@GJXAIOU",[[1,65,"："]],[65,65],[66,66]]],[1539608829539,["gjx16@GJXAIOU",[[1,71,"\n"]],[68,68],[69,69]]],[1539608834323,["gjx16@GJXAIOU",[[1,69,"```"]],[69,69],[72,72]]],[1539608834346,["gjx16@GJXAIOU",[[1,72,"language\n```\n"]],[72,72],[72,80]]],[1539608835460,["gjx16@GJXAIOU",[[-1,72,"language"],[1,80,"c"]],[72,80],[73,73]]],[1539608835729,["gjx16@GJXAIOU",[[1,74,"\n"]],[73,73],[74,74]]],[1539609009413,["gjx16@GJXAIOU",[[1,74,"#include<>"]],[74,74],[84,84]]],[1539609013036,["gjx16@GJXAIOU",[[1,83,"stdio.h"]],[83,83],[90,90]]],[1539609014905,["gjx16@GJXAIOU",[[1,92,"\n"]],[91,91],[92,92]]],[1539609020402,["gjx16@GJXAIOU",[[1,92,"#include<."]],[92,92],[102,102]]],[1539609022210,["gjx16@GJXAIOU",[[-1,101,"."]],[102,102],[101,101]]],[1539609022613,["gjx16@GJXAIOU",[[1,101,">"]],[101,101],[102,102]]],[1539609028789,["gjx16@GJXAIOU",[[1,101,"string.h"]],[101,101],[109,109]]],[1539609035793,["gjx16@GJXAIOU",[[1,111,"\n"]],[110,110],[111,111]]],[1539609042139,["gjx16@GJXAIOU",[[1,111,"#include<>"]],[111,111],[121,121]]],[1539609046802,["gjx16@GJXAIOU",[[1,120,"strlib.h"]],[120,120],[128,128]]],[1539609051793,["gjx16@GJXAIOU",[[-1,122,"r"]],[123,123],[122,122]]],[1539609052211,["gjx16@GJXAIOU",[[1,122,"d"]],[122,122],[123,123]]],[1539609055082,["gjx16@GJXAIOU",[[1,130,"\n"]],[129,129],[130,130]]],[1539609055401,["gjx16@GJXAIOU",[[1,131,"\n"]],[130,130],[131,131]]],[1539609059322,["gjx16@GJXAIOU",[[1,131,"void"]],[131,131],[135,135]]],[1539609079578,["gjx16@GJXAIOU",[[1,135," swap()"]],[135,135],[142,142]]],[1539609084858,["gjx16@GJXAIOU",[[1,141,"ing "]],[141,141],[145,145]]],[1539609085865,["gjx16@GJXAIOU",[[-1,143,"g "]],[145,145],[143,143]]],[1539609092381,["gjx16@GJXAIOU",[[1,143,"t *a,int *b"]],[143,143],[154,154]]],[1539609094801,["gjx16@GJXAIOU",[[1,156,"\n"]],[155,155],[156,156]]],[1539609096491,["gjx16@GJXAIOU",[[1,156,"{}"]],[156,156],[158,158]]],[1539609097321,["gjx16@GJXAIOU",[[1,157,"\n"]],[157,157],[158,158]]],[1539609097514,["gjx16@GJXAIOU",[[1,158,"\n"]],[158,158],[159,159]]],[1539609129620,["gjx16@GJXAIOU",[[1,158,"    int tmp = *a;"]],[158,158],[175,175]]],[1539609130073,["gjx16@GJXAIOU",[[1,176,"    \n"]],[175,175],[180,180]]],[1539609134163,["gjx16@GJXAIOU",[[1,180,"*a = *b;"]],[180,180],[188,188]]],[1539609134668,["gjx16@GJXAIOU",[[1,189,"    \n"]],[188,188],[193,193]]],[1539609143554,["gjx16@GJXAIOU",[[1,193,"*b = tmp;"]],[193,193],[202,202]]],[1539609147085,["gjx16@GJXAIOU",[[1,205,"\n"]],[204,204],[205,205]]],[1539609147692,["gjx16@GJXAIOU",[[1,206,"\n"]],[205,205],[206,206]]],[1539609157930,["gjx16@GJXAIOU",[[1,206,"void bubble()"]],[206,206],[219,219]]],[1539609169482,["gjx16@GJXAIOU",[[1,218,"int *array,int n"]],[218,218],[234,234]]],[1539609171401,["gjx16@GJXAIOU",[[1,236,"\n"]],[235,235],[236,236]]],[1539609172851,["gjx16@GJXAIOU",[[1,236,"{}"]],[236,236],[238,238]]],[1539609173962,["gjx16@GJXAIOU",[[1,237,"\n"]],[237,237],[238,238]]],[1539609174425,["gjx16@GJXAIOU",[[1,238,"\n"]],[238,238],[239,239]]],[1539609176459,["gjx16@GJXAIOU",[[1,238,"  "]],[238,238],[240,240]]],[1539609206386,["gjx16@GJXAIOU",[[1,240,"int i;"]],[240,240],[246,246]]],[1539609206858,["gjx16@GJXAIOU",[[1,247,"  \n"]],[246,246],[249,249]]],[1539609209274,["gjx16@GJXAIOU",[[1,249,"int j;"]],[249,249],[255,255]]],[1539609209665,["gjx16@GJXAIOU",[[1,256,"  \n"]],[255,255],[258,258]]],[1539609212258,["gjx16@GJXAIOU",[[1,258,"for()"]],[258,258],[263,263]]],[1539609221070,["gjx16@GJXAIOU",[[1,262,"i = 0; i < n; i++"]],[262,262],[279,279]]],[1539609222945,["gjx16@GJXAIOU",[[1,281,"  \n"]],[280,280],[283,283]]],[1539609224194,["gjx16@GJXAIOU",[[1,283,"{}"]],[283,283],[285,285]]],[1539609225570,["gjx16@GJXAIOU",[[-1,284,"}"]],[285,285],[284,284]]],[1539609226826,["gjx16@GJXAIOU",[[1,284,"}"]],[284,284],[285,285]]],[1539609228305,["gjx16@GJXAIOU",[[1,284,"\n  \n  "]],[284,284],[290,290]]],[1539609230874,["gjx16@GJXAIOU",[[1,287,"  q"]],[287,287],[290,290]]],[1539609231777,["gjx16@GJXAIOU",[[-1,289,"q"]],[290,290],[289,289]]],[1539609235615,["gjx16@GJXAIOU",[[1,289,"for()"]],[289,289],[294,294]]],[1539609243083,["gjx16@GJXAIOU",[[1,293,"j = 1; j<"]],[293,293],[302,302]]],[1539609243818,["gjx16@GJXAIOU",[[-1,301,"<"]],[302,302],[301,301]]],[1539609246162,["gjx16@GJXAIOU",[[1,301," < n="]],[301,301],[306,306]]],[1539609246714,["gjx16@GJXAIOU",[[-1,305,"="]],[306,306],[305,305]]],[1539609249490,["gjx16@GJXAIOU",[[1,305,"-i"]],[305,305],[307,307]]],[1539609254006,["gjx16@GJXAIOU",[[1,307,";j++"]],[307,307],[311,311]]],[1539609256307,["gjx16@GJXAIOU",[[1,308," "]],[308,308],[309,309]]],[1539609258386,["gjx16@GJXAIOU",[[1,316,"  \n  "]],[313,313],[318,318]]],[1539609261210,["gjx16@GJXAIOU",[[1,318,"  {}"]],[318,318],[322,322]]],[1539609262666,["gjx16@GJXAIOU",[[1,321,"\n      \n      "]],[321,321],[335,335]]],[1539609273290,["gjx16@GJXAIOU",[[1,328,"      "]],[328,328],[330,330]]],[1539609280023,["gjx16@GJXAIOU",[[1,330,"if()"]],[330,330],[334,334]]],[1539609283123,["gjx16@GJXAIOU",[[1,333,"arrat"]],[333,333],[338,338]]],[1539609283922,["gjx16@GJXAIOU",[[-1,337,"t"]],[338,338],[337,337]]],[1539609298726,["gjx16@GJXAIOU",[[1,337,"y[j -1] > array[j["]],[337,337],[355,355]]],[1539609299698,["gjx16@GJXAIOU",[[-1,354,"["]],[355,355],[354,354]]],[1539609300531,["gjx16@GJXAIOU",[[1,354,"]"]],[354,354],[355,355]]],[1539609304138,["gjx16@GJXAIOU",[[1,356,"\n        "]],[356,356],[365,365]]],[1539609305677,["gjx16@GJXAIOU",[[1,369,"  "]],[365,365],[367,367]]],[1539609309586,["gjx16@GJXAIOU",[[1,367,"{}"]],[367,367],[369,369]]],[1539609311723,["gjx16@GJXAIOU",[[1,368,"\n          \n          "]],[368,368],[390,390]]],[1539609323366,["gjx16@GJXAIOU",[[1,379,"  swap();"]],[379,379],[388,388]]],[1539609330763,["gjx16@GJXAIOU",[[1,386,"&array[j-i"]],[386,386],[396,396]]],[1539609331506,["gjx16@GJXAIOU",[[-1,395,"i"]],[396,396],[395,395]]],[1539609340319,["gjx16@GJXAIOU",[[1,395,"1] ,&array[j}"]],[395,395],[408,408]]],[1539609341026,["gjx16@GJXAIOU",[[-1,407,"}"]],[408,408],[407,407]]],[1539609341739,["gjx16@GJXAIOU",[[1,407,"]"]],[407,407],[408,408]]],[1539609379865,["gjx16@GJXAIOU",[[1,441,"\n"]],[440,440],[441,441]]],[1539609380349,["gjx16@GJXAIOU",[[1,442,"\n"]],[441,441],[442,442]]],[1539609385923,["gjx16@GJXAIOU",[[1,442,"im"]],[442,442],[444,444]]],[1539609386882,["gjx16@GJXAIOU",[[-1,443,"m"]],[444,444],[443,443]]],[1539609390355,["gjx16@GJXAIOU",[[1,443,"nt main()"]],[443,443],[452,452]]],[1539609391129,["gjx16@GJXAIOU",[[1,453,"\n"]],[452,452],[453,453]]],[1539609392259,["gjx16@GJXAIOU",[[1,453,"{]"]],[453,453],[455,455]]],[1539609393301,["gjx16@GJXAIOU",[[-1,454,"]"]],[455,455],[454,454]]],[1539609394836,["gjx16@GJXAIOU",[[1,454,"}"]],[454,454],[455,455]]],[1539609396068,["gjx16@GJXAIOU",[[1,454,"\n"]],[454,454],[455,455]]],[1539609396242,["gjx16@GJXAIOU",[[1,455,"\n"]],[455,455],[456,456]]],[1539609396412,["gjx16@GJXAIOU",[[1,456,"\n"]],[456,456],[457,457]]],[1539609425444,["gjx16@GJXAIOU",[[1,455,"  int array[10] = {};"]],[455,455],[476,476]]],[1539609428795,["gjx16@GJXAIOU",[[1,474,"1,3"]],[474,474],[477,477]]],[1539609434587,["gjx16@GJXAIOU",[[1,477,",4,7l,"]],[477,477],[483,483]]],[1539609435369,["gjx16@GJXAIOU",[[-1,481,"l,"]],[483,483],[481,481]]],[1539609450614,["gjx16@GJXAIOU",[[1,481,",43,98,4,99,3,8"]],[481,481],[496,496]]],[1539609458602,["gjx16@GJXAIOU",[[1,499,"  \n"]],[498,498],[501,501]]],[1539609466403,["gjx16@GJXAIOU",[[1,501,"bubble();"]],[501,501],[510,510]]],[1539609474867,["gjx16@GJXAIOU",[[1,508,"array,10"]],[508,508],[516,516]]],[1539609476978,["gjx16@GJXAIOU",[[1,519,"  \n"]],[518,518],[521,521]]],[1539609480165,["gjx16@GJXAIOU",[[1,521,"printf();"]],[521,521],[530,530]]],[1539609484253,["gjx16@GJXAIOU",[[1,528,"arra"]],[528,528],[532,532]]],[1539609491995,["gjx16@GJXAIOU",[[1,532,"y,10"]],[532,532],[536,536]]],[1539609494349,["gjx16@GJXAIOU",[[1,539,"  \n"]],[538,538],[541,541]]],[1539609496827,["gjx16@GJXAIOU",[[1,541,"return 0;"]],[541,541],[550,550]]],[1539609500041,["gjx16@GJXAIOU",[[1,442,"\n"]],[441,441],[442,442]]],[1539609501337,["gjx16@GJXAIOU",[[1,443,"\n"]],[442,442],[443,443]]],[1539609501482,["gjx16@GJXAIOU",[[1,444,"\n"]],[443,443],[444,444]]],[1539609512996,["gjx16@GJXAIOU",[[1,442,"void print_string"]],[442,442],[459,459]]],[1539609518269,["gjx16@GJXAIOU",[[-1,546,"f"]],[547,547],[546,546]]],[1539609520291,["gjx16@GJXAIOU",[[1,546,"_a"]],[546,546],[548,548]]],[1539609520956,["gjx16@GJXAIOU",[[-1,547,"a"]],[548,548],[547,547]]],[1539609522763,["gjx16@GJXAIOU",[[1,547,"array"]],[547,547],[552,552]]],[1539609527020,["gjx16@GJXAIOU",[[-1,453,"string"]],[459,459],[453,453]]],[1539609529803,["gjx16@GJXAIOU",[[1,453,"array()"]],[453,453],[460,460]]],[1539609540355,["gjx16@GJXAIOU",[[1,459,"int *array,int n"]],[459,459],[475,475]]],[1539609542853,["gjx16@GJXAIOU",[[1,479,"\n"]],[476,476],[477,477]]],[1539609544171,["gjx16@GJXAIOU",[[1,477,"{}"]],[477,477],[479,479]]],[1539609545842,["gjx16@GJXAIOU",[[1,478,"\n"]],[478,478],[479,479]]],[1539609546051,["gjx16@GJXAIOU",[[1,479,"\n"]],[479,479],[480,480]]],[1539609549795,["gjx16@GJXAIOU",[[1,479,"  in"]],[479,479],[483,483]]],[1539609550667,["gjx16@GJXAIOU",[[1,484," i;"]],[484,484],[487,487]]],[1539609551429,["gjx16@GJXAIOU",[[1,488,"  \n"]],[487,487],[490,490]]],[1539609552085,["gjx16@GJXAIOU",[[1,490,"i"]],[490,490],[491,491]]],[1539609552698,["gjx16@GJXAIOU",[[-1,490,"i"]],[491,491],[490,490]]],[1539609555203,["gjx16@GJXAIOU",[[1,490,"for()"]],[490,490],[495,495]]],[1539609566043,["gjx16@GJXAIOU",[[1,494,"i = 0; i < n; i++"]],[494,494],[511,511]]],[1539609567885,["gjx16@GJXAIOU",[[1,513,"  \n"]],[512,512],[515,515]]],[1539609568958,["gjx16@GJXAIOU",[[1,515,"{}"]],[515,515],[517,517]]],[1539609570122,["gjx16@GJXAIOU",[[1,516,"\n  \n  "]],[516,516],[522,522]]],[1539609575614,["gjx16@GJXAIOU",[[1,519,"  printf();"]],[519,519],[530,530]]],[1539609583259,["gjx16@GJXAIOU",[[1,528,"\"\""]],[528,528],[530,530]]],[1539609587771,["gjx16@GJXAIOU",[[1,529,"%d\\n"]],[529,529],[533,533]]],[1539609594460,["gjx16@GJXAIOU",[[1,534,",array[i]"]],[534,534],[543,543]]],[1539609598434,["gjx16@GJXAIOU",[[1,515,"  "]],[515,515],[517,517]]],[1539609599482,["gjx16@GJXAIOU",[[1,523,"  "]],[523,523],[525,525]]],[1539609600554,["gjx16@GJXAIOU",[[1,552,"  "]],[551,551],[553,553]]],[1539609669930,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"]],[483,483],[557,557]]],[1539609669930,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"]],[557,557],[483,483]]],[1539609610322,["gjx16@GJXAIOU",[[1,684,"\n"]],[681,681],[682,682]]],[1539609613091,["gjx16@GJXAIOU",[[1,682,"xuan"]],[682,682],[686,686]]],[1539609614178,["gjx16@GJXAIOU",[[-1,682,"xuan"]],[686,686],[682,682]]],[1539609615499,["gjx16@GJXAIOU",[[1,682,"****"]],[682,682],[684,684]]],[1539609630176,["gjx16@GJXAIOU",[[1,684,"选择排序法："]],[684,684],[690,690]]],[1539609634058,["gjx16@GJXAIOU",[[1,695,"\n"]],[692,692],[693,693]]],[1539609636950,["gjx16@GJXAIOU",[[1,693,"```"]],[693,693],[696,696]]],[1539609636975,["gjx16@GJXAIOU",[[1,696,"language\n```\n"]],[696,696],[696,704]]],[1539609638075,["gjx16@GJXAIOU",[[-1,696,"language"],[1,704,"c"]],[696,704],[697,697]]],[1539609638396,["gjx16@GJXAIOU",[[1,698,"\n"]],[697,697],[698,698]]],[1539609729932,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,681,"\n"],[-1,703,"#"],[1,704,"\n"],[1,706,"#"]],[483,483],[707,707]]],[1539609729932,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,682,"\n"],[1,703,"#"],[-1,703,"\n"],[-1,706,"#"]],[707,707],[483,483]]],[1539609692106,["gjx16@GJXAIOU",[[1,693,"\n"]],[692,692],[693,693]]],[1539609695629,["gjx16@GJXAIOU",[[1,693,"zaiyige j"]],[693,693],[702,702]]],[1539609697090,["gjx16@GJXAIOU",[[-1,693,"zaiyige j"]],[702,702],[693,693]]],[1539609704242,["gjx16@GJXAIOU",[[1,693,"在一个集合中hao"]],[693,693],[702,702]]],[1539609705322,["gjx16@GJXAIOU",[[-1,699,"hao"]],[702,702],[699,699]]],[1539609709482,["gjx16@GJXAIOU",[[1,699,"找徐晓"]],[699,699],[702,702]]],[1539609710634,["gjx16@GJXAIOU",[[-1,700,"徐晓"]],[702,702],[700,700]]],[1539609729224,["gjx16@GJXAIOU",[[1,700,"最小的那个数，放在最前面，"]],[700,700],[713,713]]],[1539609789930,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,681,"\n"],[-1,724,"#"],[1,725,"\n"],[1,727,"#"]],[483,483],[728,728]]],[1539609789930,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,682,"\n"],[1,724,"#"],[-1,724,"\n"],[-1,727,"#"]],[728,728],[483,483]]],[1539609735571,["gjx16@GJXAIOU",[[1,713,"一直这样找下去"]],[713,713],[720,720]]],[1539610509945,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,731,"#"],[1,734,"\n#"]],[483,483],[736,736]]],[1539610509945,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,731,"#"],[-1,733,"\n#"]],[736,736],[483,483]]],[1539610505843,["gjx16@GJXAIOU",[[1,732,"![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)"]],[732,732],[792,792]]],[1539610629946,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,731,"#"],[1,732,"\n"],[1,793,"#"]],[483,483],[794,794]]],[1539610629946,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,731,"#"],[-1,731,"\n"],[-1,793,"#"]],[794,794],[483,483]]],[1539610605994,["gjx16@GJXAIOU",[[1,727,"\n"]],[726,726],[727,727]]],[1539610606188,["gjx16@GJXAIOU",[[1,727,"3"]],[727,727],[728,728]]],[1539610607354,["gjx16@GJXAIOU",[[-1,727,"3"]],[728,728],[727,727]]],[1539610607698,["gjx16@GJXAIOU",[[-1,727,"\n"]],[727,727],[726,726]]],[1539610613532,["gjx16@GJXAIOU",[[1,726,"#include<>"]],[726,726],[736,736]]],[1539610618227,["gjx16@GJXAIOU",[[1,735,"stdio.h"]],[735,735],[742,742]]],[1539610620370,["gjx16@GJXAIOU",[[1,744,"\n"]],[743,743],[744,744]]],[1539610624759,["gjx16@GJXAIOU",[[1,744,"#include<>"]],[744,744],[754,754]]],[1539610628875,["gjx16@GJXAIOU",[[1,753,"string.h"]],[753,753],[761,761]]],[1539610689949,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,767,"#"],[1,768,"\n"],[1,829,"#"]],[483,483],[830,830]]],[1539610689949,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,767,"#"],[-1,767,"\n"],[-1,829,"#"]],[830,830],[483,483]]],[1539610633445,["gjx16@GJXAIOU",[[1,763,"\n"]],[762,762],[763,763]]],[1539610634039,["gjx16@GJXAIOU",[[1,764,"\n"]],[763,763],[764,764]]],[1539610642292,["gjx16@GJXAIOU",[[1,764,"int main();"]],[764,764],[775,775]]],[1539610643165,["gjx16@GJXAIOU",[[-1,774,";"]],[775,775],[774,774]]],[1539610644546,["gjx16@GJXAIOU",[[1,775,"\n"]],[774,774],[775,775]]],[1539610645887,["gjx16@GJXAIOU",[[1,775,"{}"]],[775,775],[777,777]]],[1539610647058,["gjx16@GJXAIOU",[[1,776,"\n"]],[776,776],[777,777]]],[1539610647293,["gjx16@GJXAIOU",[[1,777,"\n"]],[777,777],[778,778]]],[1539610652067,["gjx16@GJXAIOU",[[1,777,"  int at"]],[777,777],[785,785]]],[1539610652755,["gjx16@GJXAIOU",[[-1,784,"t"]],[785,785],[784,784]]],[1539610660303,["gjx16@GJXAIOU",[[1,784,"rray[10] = {}p"]],[784,784],[798,798]]],[1539610661070,["gjx16@GJXAIOU",[[-1,797,"p"]],[798,798],[797,797]]],[1539610661620,["gjx16@GJXAIOU",[[1,797,";"]],[797,797],[798,798]]],[1539610679902,["gjx16@GJXAIOU",[[1,796,"1,2,4,32,87,3,23,98,4"]],[796,796],[817,817]]],[1539610682942,["gjx16@GJXAIOU",[[-1,816,"4"]],[817,817],[816,816]]],[1539610683147,["gjx16@GJXAIOU",[[1,816,"5"]],[816,816],[817,817]]],[1539610749953,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,826,"#"],[1,827,"\n"],[1,888,"#"]],[483,483],[889,889]]],[1539610749953,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,826,"#"],[-1,826,"\n"],[-1,888,"#"]],[889,889],[483,483]]],[1539610701083,["gjx16@GJXAIOU",[[1,817,",67"]],[817,817],[820,820]]],[1539610723620,["gjx16@GJXAIOU",[[1,764,"\n"]],[763,763],[764,764]]],[1539610735725,["gjx16@GJXAIOU",[[1,764,"//查找一个数组中的最小值（）"]],[764,764],[779,779]]],[1539610744680,["gjx16@GJXAIOU",[[1,778,"每次查找的"]],[778,778],[783,783]]],[1539610809953,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,850,"#"],[1,851,"\n"],[1,912,"#"]],[483,483],[913,913]]],[1539610809953,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,850,"#"],[-1,850,"\n"],[-1,912,"#"]],[913,913],[483,483]]],[1539610757849,["gjx16@GJXAIOU",[[1,783,"循环次数依次递减"]],[783,783],[791,791]]],[1539610763874,["gjx16@GJXAIOU",[[1,793,"\n"]],[792,792],[793,793]]],[1539610769846,["gjx16@GJXAIOU",[[1,793,"INT MINKEYT"]],[793,793],[804,804]]],[1539610773403,["gjx16@GJXAIOU",[[-1,793,"INT MINKEYT"]],[804,804],[793,793]]],[1539610774914,["gjx16@GJXAIOU",[[1,793,"inroad"]],[793,793],[799,799]]],[1539610776538,["gjx16@GJXAIOU",[[-1,793,"inroad"]],[799,799],[793,793]]],[1539610779664,["gjx16@GJXAIOU",[[1,793,"int key"]],[793,793],[800,800]]],[1539610782067,["gjx16@GJXAIOU",[[-1,797,"key"]],[800,800],[797,797]]],[1539610790134,["gjx16@GJXAIOU",[[1,797,"minkey()"]],[797,797],[805,805]]],[1539610807599,["gjx16@GJXAIOU",[[1,804,"int *array,int low,int high"]],[804,804],[831,831]]],[1539610869965,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[-1,556,""],[1,556,"}"],[-1,681,"\n"],[-1,898,"#"],[1,899,"\n"],[1,960,"#"]],[483,483],[961,961]]],[1539610869965,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[1,556,""],[-1,556,"}"],[1,682,"\n"],[1,898,"#"],[-1,898,"\n"],[-1,960,"#"]],[961,961],[483,483]]],[1539610812875,["gjx16@GJXAIOU",[[1,833,"\n"]],[832,832],[833,833]]],[1539610853214,["gjx16@GJXAIOU",[[1,833,"//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标"]],[833,833],[873,873]]],[1539610863859,["gjx16@GJXAIOU",[[1,874,"\n"]],[873,873],[874,874]]],[1539610865800,["gjx16@GJXAIOU",[[1,874,"、"]],[874,874],[875,875]]],[1539610866451,["gjx16@GJXAIOU",[[-1,874,"、"]],[875,875],[874,874]]],[1539610868136,["gjx16@GJXAIOU",[[1,874,"//h"]],[874,874],[877,877]]],[1539610868629,["gjx16@GJXAIOU",[[-1,876,"h"]],[877,877],[876,876]]],[1539610869914,["gjx16@GJXAIOU",[[1,876,"hasn"]],[876,876],[880,880]]],[1539610929960,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,946,"#"],[1,947,"\n"],[1,1008,"#"]],[483,483],[1009,1009]]],[1539610929960,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,946,"#"],[-1,946,"\n"],[-1,1008,"#"]],[1009,1009],[483,483]]],[1539610870583,["gjx16@GJXAIOU",[[1,880,"hu "]],[880,880],[883,883]]],[1539610872370,["gjx16@GJXAIOU",[[-1,876,"hasnhu "]],[883,883],[876,876]]],[1539610886248,["gjx16@GJXAIOU",[[1,876,"函数返回值为最小元素的下标"]],[876,876],[889,889]]],[1539610886990,["gjx16@GJXAIOU",[[1,890,"\n"]],[889,889],[890,890]]],[1539610887942,["gjx16@GJXAIOU",[[1,891,"\n"]],[890,890],[891,891]]],[1539610888119,["gjx16@GJXAIOU",[[1,892,"\n"]],[891,891],[892,892]]],[1539610893866,["gjx16@GJXAIOU",[[1,893,"\n"]],[890,890],[891,891]]],[1539610897210,["gjx16@GJXAIOU",[[1,793,"\n"]],[792,792],[793,793]]],[1539610899859,["gjx16@GJXAIOU",[[1,895,"\n"]],[891,891],[892,892]]],[1539610909964,["gjx16@GJXAIOU",[[1,892,"  {}"]],[892,892],[896,896]]],[1539610911699,["gjx16@GJXAIOU",[[1,895,"\n  \n  \n  "]],[895,895],[904,904]]],[1539610919319,["gjx16@GJXAIOU",[[1,898,"  int main"]],[898,898],[908,908]]],[1539610921332,["gjx16@GJXAIOU",[[-1,905,"ain"]],[908,908],[905,905]]],[1539610927772,["gjx16@GJXAIOU",[[1,905,"in = low;//"]],[905,905],[916,916]]],[1539610989962,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,992,"#"],[1,993,"\n"],[1,1054,"#"]],[483,483],[1055,1055]]],[1539610989962,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,992,"#"],[-1,992,"\n"],[-1,1054,"#"]],[1055,1055],[483,483]]],[1539610936012,["gjx16@GJXAIOU",[[1,916,"默认最小的元素就是"]],[916,916],[925,925]]],[1539610942614,["gjx16@GJXAIOU",[[-1,914,"//默认最小的元素就是"]],[925,925],[914,914]]],[1539610943339,["gjx16@GJXAIOU",[[1,917,"  \n  "]],[914,914],[919,919]]],[1539610986112,["gjx16@GJXAIOU",[[1,919,"int key = array[low];//在没有查找最小元素之前，第一个元素是最小的"]],[919,919],[963,963]]],[1539610988927,["gjx16@GJXAIOU",[[1,966,"  \n  "]],[963,963],[968,968]]],[1539611049964,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1044,"#"],[1,1045,"\n"],[1,1106,"#"]],[483,483],[1107,1107]]],[1539611049964,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1044,"#"],[-1,1044,"\n"],[-1,1106,"#"]],[1107,1107],[483,483]]],[1539610992708,["gjx16@GJXAIOU",[[1,968,"itn "]],[968,968],[972,972]]],[1539610993910,["gjx16@GJXAIOU",[[-1,969,"tn "]],[972,972],[969,969]]],[1539610997603,["gjx16@GJXAIOU",[[1,969,"nt i;"]],[969,969],[974,974]]],[1539610998774,["gjx16@GJXAIOU",[[1,977,"  \n  "]],[974,974],[979,979]]],[1539610999900,["gjx16@GJXAIOU",[[1,979,"int "]],[979,979],[983,983]]],[1539611001186,["gjx16@GJXAIOU",[[-1,979,"int "]],[983,983],[979,979]]],[1539611003333,["gjx16@GJXAIOU",[[1,979,"for()"]],[979,979],[984,984]]],[1539611020885,["gjx16@GJXAIOU",[[1,983,"i = low +1; i < high;i++"]],[983,983],[1007,1007]]],[1539611022747,["gjx16@GJXAIOU",[[1,1011,"  \n  "]],[1008,1008],[1013,1013]]],[1539611025744,["gjx16@GJXAIOU",[[1,1013,"  {}"]],[1013,1013],[1017,1017]]],[1539611027146,["gjx16@GJXAIOU",[[1,1016,"\n      \n      "]],[1016,1016],[1030,1030]]],[1539611034011,["gjx16@GJXAIOU",[[1,1023,"  if()"]],[1023,1023],[1029,1029]]],[1539611043615,["gjx16@GJXAIOU",[[1,1028,"key > arrau"]],[1028,1028],[1039,1039]]],[1539611044621,["gjx16@GJXAIOU",[[-1,1038,"u"]],[1039,1039],[1038,1038]]],[1539611047219,["gjx16@GJXAIOU",[[1,1038,"y[i]"]],[1038,1038],[1042,1042]]],[1539611049490,["gjx16@GJXAIOU",[[1,1050,"  \n      "]],[1043,1043],[1052,1052]]],[1539611109966,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1136,"#"],[1,1137,"\n"],[1,1198,"#"]],[483,483],[1199,1199]]],[1539611109966,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1136,"#"],[-1,1136,"\n"],[-1,1198,"#"]],[1199,1199],[483,483]]],[1539611052092,["gjx16@GJXAIOU",[[1,1052,"  {}"]],[1052,1052],[1056,1056]]],[1539611053307,["gjx16@GJXAIOU",[[1,1055,"\n          \n          "]],[1055,1055],[1077,1077]]],[1539611064224,["gjx16@GJXAIOU",[[1,1066,"  key = array[i];"]],[1066,1066],[1083,1083]]],[1539611064875,["gjx16@GJXAIOU",[[1,1094,"  \n          "]],[1083,1083],[1096,1096]]],[1539611068732,["gjx16@GJXAIOU",[[1,1096,"min = i;"]],[1096,1096],[1104,1104]]],[1539611079748,["gjx16@GJXAIOU",[[1,1127,"  return min;"]],[1127,1127],[1140,1140]]],[1539611087698,["gjx16@GJXAIOU",[[1,1148,"\n"]],[1145,1145],[1146,1146]]],[1539611088947,["gjx16@GJXAIOU",[[1,1149,"\n"]],[1146,1146],[1147,1147]]],[1539611089990,["gjx16@GJXAIOU",[[1,1147,"jaing"]],[1147,1147],[1152,1152]]],[1539611091434,["gjx16@GJXAIOU",[[-1,1147,"jaing"]],[1152,1152],[1147,1147]]],[1539611095809,["gjx16@GJXAIOU",[[1,1147,"//将书序"]],[1147,1147],[1152,1152]]],[1539611096523,["gjx16@GJXAIOU",[[-1,1150,"书序"]],[1152,1152],[1150,1150]]],[1539611102521,["gjx16@GJXAIOU",[[1,1150,"数组中的值进行排序"]],[1150,1150],[1159,1159]]],[1539611103316,["gjx16@GJXAIOU",[[1,1162,"\n"]],[1159,1159],[1160,1160]]],[1539611104138,["gjx16@GJXAIOU",[[1,1163,"\n"]],[1160,1160],[1161,1161]]],[1539611169968,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1229,"#"],[1,1230,"\n"],[1,1291,"#"]],[483,483],[1292,1292]]],[1539611169968,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1229,"#"],[-1,1229,"\n"],[-1,1291,"#"]],[1292,1292],[483,483]]],[1539611114635,["gjx16@GJXAIOU",[[1,1164,"\n"]],[1160,1160],[1161,1161]]],[1539611116860,["gjx16@GJXAIOU",[[1,1161,"voif"]],[1161,1161],[1165,1165]]],[1539611117619,["gjx16@GJXAIOU",[[-1,1164,"f"]],[1165,1165],[1164,1164]]],[1539611118787,["gjx16@GJXAIOU",[[1,1164,"d()"]],[1164,1164],[1167,1167]]],[1539611121317,["gjx16@GJXAIOU",[[-1,1165,"()"]],[1167,1167],[1165,1165]]],[1539611126637,["gjx16@GJXAIOU",[[1,1165," select()"]],[1165,1165],[1174,1174]]],[1539611135092,["gjx16@GJXAIOU",[[1,1173,"int *array, ing "]],[1173,1173],[1189,1189]]],[1539611136226,["gjx16@GJXAIOU",[[-1,1187,"g "]],[1189,1189],[1187,1187]]],[1539611138075,["gjx16@GJXAIOU",[[1,1187,"t n"]],[1187,1187],[1190,1190]]],[1539611139963,["gjx16@GJXAIOU",[[1,1195,"\n"]],[1191,1191],[1192,1192]]],[1539611141093,["gjx16@GJXAIOU",[[1,1192,"{}"]],[1192,1192],[1194,1194]]],[1539611142059,["gjx16@GJXAIOU",[[1,1193,"\n"]],[1193,1193],[1194,1194]]],[1539611142218,["gjx16@GJXAIOU",[[1,1194,"\n"]],[1194,1194],[1195,1195]]],[1539611142387,["gjx16@GJXAIOU",[[1,1195,"\n"]],[1195,1195],[1196,1196]]],[1539611146140,["gjx16@GJXAIOU",[[1,1194,"    f"]],[1194,1194],[1199,1199]]],[1539611146990,["gjx16@GJXAIOU",[[-1,1198,"f"]],[1199,1199],[1198,1198]]],[1539611148670,["gjx16@GJXAIOU",[[1,1198,"int i;"]],[1198,1198],[1204,1204]]],[1539611149178,["gjx16@GJXAIOU",[[1,1205,"    \n"]],[1204,1204],[1209,1209]]],[1539611152072,["gjx16@GJXAIOU",[[1,1209,"for()"]],[1209,1209],[1214,1214]]],[1539611162275,["gjx16@GJXAIOU",[[1,1213,"i = 0;i < n; I"]],[1213,1213],[1227,1227]]],[1539611163482,["gjx16@GJXAIOU",[[-1,1226,"I"]],[1227,1227],[1226,1226]]],[1539611165759,["gjx16@GJXAIOU",[[1,1226,"i++"]],[1226,1226],[1229,1229]]],[1539611167566,["gjx16@GJXAIOU",[[1,1231,"    \n"]],[1230,1230],[1235,1235]]],[1539611168700,["gjx16@GJXAIOU",[[1,1235,"{}"]],[1235,1235],[1237,1237]]],[1539611169804,["gjx16@GJXAIOU",[[1,1236,"\n    "]],[1236,1236],[1241,1241]]],[1539611229967,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1314,"#"],[1,1315,"\n"],[1,1376,"#"]],[483,483],[1377,1377]]],[1539611229967,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1314,"#"],[-1,1314,"\n"],[-1,1376,"#"]],[1377,1377],[483,483]]],[1539611170164,["gjx16@GJXAIOU",[[1,1246,"\n    "]],[1246,1246],[1251,1251]]],[1539611173274,["gjx16@GJXAIOU",[[-1,1247,"    "]],[1251,1251],[1247,1247]]],[1539611173466,["gjx16@GJXAIOU",[[-1,1246,"\n"]],[1247,1247],[1246,1246]]],[1539611174202,["gjx16@GJXAIOU",[[-1,1242,"    "]],[1246,1246],[1242,1242]]],[1539611174338,["gjx16@GJXAIOU",[[-1,1241,"\n"]],[1242,1242],[1241,1241]]],[1539611175261,["gjx16@GJXAIOU",[[-1,1237,"    "]],[1241,1241],[1237,1237]]],[1539611175435,["gjx16@GJXAIOU",[[-1,1236,"\n"]],[1237,1237],[1236,1236]]],[1539611177022,["gjx16@GJXAIOU",[[1,1235,"  "]],[1235,1235],[1237,1237]]],[1539611178395,["gjx16@GJXAIOU",[[1,1238,"\n      \n      "]],[1238,1238],[1252,1252]]],[1539611179827,["gjx16@GJXAIOU",[[1,1245,"  "]],[1245,1245],[1247,1247]]],[1539611349968,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1254,"}\n\n}\n"],[-1,1322,"#"],[1,1323,"\n"],[1,1384,"#"]],[483,483],[1385,1385]]],[1539611349968,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1254,"}\n\n}\n"],[1,1327,"#"],[-1,1327,"\n"],[-1,1389,"#"]],[1385,1385],[483,483]]],[1539611330006,["gjx16@GJXAIOU",[[1,1247,"int i"]],[1247,1247],[1252,1252]]],[1539611330510,["gjx16@GJXAIOU",[[-1,1251,"i"]],[1252,1252],[1251,1251]]],[1539611332012,["gjx16@GJXAIOU",[[1,1251,"j = "]],[1251,1251],[1255,1255]]],[1539611649970,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1262,"}\n\n}\n"],[-1,1330,"#"],[1,1331,"\n"],[1,1392,"#"]],[483,483],[1393,1393]]],[1539611649970,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1262,"}\n\n}\n"],[1,1335,"#"],[-1,1335,"\n"],[-1,1397,"#"]],[1393,1393],[483,483]]],[1539611621629,["gjx16@GJXAIOU",[[1,1255,"minkey();"]],[1255,1255],[1264,1264]]],[1539611628204,["gjx16@GJXAIOU",[[1,1262,"array,i,n"]],[1262,1262],[1271,1271]]],[1539611630275,["gjx16@GJXAIOU",[[1,1280,"  \n      "]],[1273,1273],[1282,1282]]],[1539611633180,["gjx16@GJXAIOU",[[1,1282,"if()"]],[1282,1282],[1286,1286]]],[1539611639812,["gjx16@GJXAIOU",[[1,1285,"i != j"]],[1285,1285],[1291,1291]]],[1539611641243,["gjx16@GJXAIOU",[[1,1299,"  \n      "]],[1292,1292],[1301,1301]]],[1539611642614,["gjx16@GJXAIOU",[[1,1301,"{}"]],[1301,1301],[1303,1303]]],[1539611644539,["gjx16@GJXAIOU",[[1,1301,"  "]],[1301,1301],[1303,1303]]],[1539611646598,["gjx16@GJXAIOU",[[1,1304,"\n          \n          "]],[1304,1304],[1326,1326]]],[1539611648398,["gjx16@GJXAIOU",[[1,1315,"  "]],[1315,1315],[1317,1317]]],[1539611709975,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1336,"}\n\n}\n"],[-1,1404,"#"],[1,1405,"\n"],[1,1466,"#"]],[483,483],[1467,1467]]],[1539611709975,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1336,"}\n\n}\n"],[1,1409,"#"],[-1,1409,"\n"],[-1,1471,"#"]],[1467,1467],[483,483]]],[1539611653820,["gjx16@GJXAIOU",[[1,1317,"swap();"]],[1317,1317],[1324,1324]]],[1539611675208,["gjx16@GJXAIOU",[[1,1322,"&array[i],&array[i - 1]"]],[1322,1322],[1345,1345]]],[1539611678843,["gjx16@GJXAIOU",[[-1,1339,"i - 1]"]],[1345,1345],[1339,1339]]],[1539611679877,["gjx16@GJXAIOU",[[1,1339,"j]"]],[1339,1339],[1341,1341]]],[1539611708774,["gjx16@GJXAIOU",[[1,1292,"//即范围内的第一个成员"]],[1292,1292],[1304,1304]]],[1539611769980,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1374,"}\n\n}\n"],[-1,1442,"#"],[1,1443,"\n"],[1,1504,"#"]],[483,483],[1505,1505]]],[1539611769980,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1374,"}\n\n}\n"],[1,1447,"#"],[-1,1447,"\n"],[-1,1509,"#"]],[1505,1505],[483,483]]],[1539611712543,["gjx16@GJXAIOU",[[1,1304,"不是最小的"]],[1304,1304],[1309,1309]]],[1539611752155,["gjx16@GJXAIOU",[[1,1446,"  \n"]],[1445,1445],[1448,1448]]],[1539611756834,["gjx16@GJXAIOU",[[1,1448,"s"]],[1448,1448],[1449,1449]]],[1539611757043,["gjx16@GJXAIOU",[[-1,1448,"s"]],[1449,1449],[1448,1448]]],[1539611758038,["gjx16@GJXAIOU",[[1,1448,"sl"]],[1448,1448],[1450,1450]]],[1539611758571,["gjx16@GJXAIOU",[[-1,1449,"l"]],[1450,1450],[1449,1449]]],[1539611762324,["gjx16@GJXAIOU",[[1,1449,"elect();"]],[1449,1449],[1457,1457]]],[1539611765764,["gjx16@GJXAIOU",[[1,1455,"array "]],[1455,1455],[1461,1461]]],[1539611766581,["gjx16@GJXAIOU",[[-1,1460," "]],[1461,1461],[1460,1460]]],[1539611768060,["gjx16@GJXAIOU",[[1,1460,",10"]],[1460,1460],[1463,1463]]],[1539611829978,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1379,"}\n\n}\n"],[-1,1441,"}\n```"],[-1,1466,"\n#"],[1,1468,"}\n```\n\n"],[1,1529,"#"]],[483,483],[1530,1530]]],[1539611829978,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1379,"}\n\n}\n"],[1,1446,"}\n```"],[1,1466,"\n#"],[-1,1466,"}\n```\n\n"],[-1,1534,"#"]],[1530,1530],[483,483]]],[1539611770614,["gjx16@GJXAIOU",[[1,1466,"  \n"]],[1465,1465],[1468,1468]]],[1539611775023,["gjx16@GJXAIOU",[[1,1468,"printf();"]],[1468,1468],[1477,1477]]],[1539611785341,["gjx16@GJXAIOU",[[1,1475,"array,10"]],[1475,1475],[1483,1483]]],[1539611788102,["gjx16@GJXAIOU",[[1,1486,"  \n"]],[1485,1485],[1488,1488]]],[1539611790780,["gjx16@GJXAIOU",[[1,1488,"return 0;"]],[1488,1488],[1497,1497]]],[1539611814974,["gjx16@GJXAIOU",[[1,1396,"void"]],[1396,1396],[1400,1400]]],[1539611818772,["gjx16@GJXAIOU",[[-1,1381,"\n"]],[1381,1381],[1380,1380]]],[1539611949981,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1379,"}\n}\n\n"],[1,1390,"void"],[-1,1395,"void"],[-1,1444,"}\n```"],[-1,1501,"\n#"],[1,1503,"}\n```\n\n"],[1,1564,"#"]],[483,483],[1565,1565]]],[1539611949981,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1379,"}\n}\n\n"],[-1,1395,"void"],[1,1404,"void"],[1,1449,"}\n```"],[1,1501,"\n#"],[-1,1501,"}\n```\n\n"],[-1,1569,"#"]],[1565,1565],[483,483]]],[1539611935636,["gjx16@GJXAIOU",[[1,1384,"void swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}"]],[1384,1384],[1457,1457]]],[1539611938086,["gjx16@GJXAIOU",[[1,1459,"\n"]],[1457,1457],[1458,1458]]],[1539611941963,["gjx16@GJXAIOU",[[-1,1384,"void swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}"]],[1384,1457],[1384,1384]]],[1539611944859,["gjx16@GJXAIOU",[[1,1147,"\n"]],[1145,1145],[1146,1146]]],[1539611945662,["gjx16@GJXAIOU",[[1,1146,"void swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}"]],[1146,1146],[1219,1219]]],[1539612009988,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1453,"}\n}\n\n\n"],[-1,1460,"\n"],[1,1465,"void"],[-1,1470,"void"],[-1,1519,"}\n```"],[-1,1576,"\n#"],[1,1578,"}\n```\n\n"],[1,1639,"#"]],[483,483],[1640,1640]]],[1539612009988,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1453,"}\n}\n\n\n"],[1,1466,"\n"],[-1,1470,"void"],[1,1479,"void"],[1,1524,"}\n```"],[1,1576,"\n#"],[-1,1576,"}\n```\n\n"],[-1,1644,"#"]],[1640,1640],[483,483]]],[1539611953619,["gjx16@GJXAIOU",[[1,1146,"\n"]],[1145,1145],[1146,1146]]],[1539611955572,["gjx16@GJXAIOU",[[1,1146,"//j"]],[1146,1146],[1149,1149]]],[1539611956566,["gjx16@GJXAIOU",[[-1,1148,"j"]],[1149,1149],[1148,1148]]],[1539611971649,["gjx16@GJXAIOU",[[1,1148,"交换元素"]],[1148,1148],[1152,1152]]],[1539611974651,["gjx16@GJXAIOU",[[1,1146,"\n"]],[1145,1145],[1146,1146]]],[1539611976789,["gjx16@GJXAIOU",[[1,1229,"\n"]],[1228,1228],[1229,1229]]],[1539612069982,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[1,1462,"}\n}\n\n\n"],[-1,1469,"\n"],[1,1474,"void"],[-1,1479,"void"],[-1,1528,"}\n```"],[-1,1585,"\n#"],[1,1587,"}\n```\n\n"],[1,1648,"#"]],[483,483],[1649,1649]]],[1539612069982,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[-1,1462,"}\n}\n\n\n"],[1,1475,"\n"],[-1,1479,"void"],[1,1488,"void"],[1,1533,"}\n```"],[1,1585,"\n#"],[-1,1585,"}\n```\n\n"],[-1,1653,"#"]],[1649,1649],[483,483]]],[1539612053630,["gjx16@GJXAIOU",[[1,1467,"void print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}"]],[1467,1467],[1582,1582]]],[1539612061259,["gjx16@GJXAIOU",[[-1,1675,"f"]],[1676,1676],[1675,1675]]],[1539612062550,["gjx16@GJXAIOU",[[1,1675,"——"]],[1675,1675],[1677,1677]]],[1539612063843,["gjx16@GJXAIOU",[[-1,1675,"——"]],[1677,1677],[1675,1675]]],[1539612064869,["gjx16@GJXAIOU",[[1,1675,"-"]],[1675,1675],[1676,1676]]],[1539612065555,["gjx16@GJXAIOU",[[-1,1675,"-"]],[1676,1676],[1675,1675]]],[1539612066444,["gjx16@GJXAIOU",[[1,1675,"f"]],[1675,1675],[1676,1676]]],[1539612067587,["gjx16@GJXAIOU",[[-1,1675,"f"]],[1676,1676],[1675,1675]]],[1539612068556,["gjx16@GJXAIOU",[[1,1675,"_"]],[1675,1675],[1676,1676]]],[1539612129997,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1462,"\n\nint"],[1,1467,"}\n}\n\n"],[1,1582,"\n\n\nint"],[-1,1584,"\n"],[1,1589,"void"],[-1,1594,"void"],[-1,1643,"}\n```"],[-1,1700,"\n#"],[1,1702,"}\n```\n\n"],[1,1763,"#"]],[483,483],[1764,1764]]],[1539612129997,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1462,"\n\nint"],[-1,1462,"}\n}\n\n"],[-1,1582,"\n\n\nint"],[1,1590,"\n"],[-1,1594,"void"],[1,1603,"void"],[1,1648,"}\n```"],[1,1700,"\n#"],[-1,1700,"}\n```\n\n"],[-1,1768,"#"]],[1764,1764],[483,483]]],[1539612071844,["gjx16@GJXAIOU",[[1,1676,"array"]],[1676,1676],[1681,1681]]],[1539612115335,["gjx16@GJXAIOU",[[1,1711,"c"]],[1711,1711],[1712,1712]]],[1539612115861,["gjx16@GJXAIOU",[[-1,1711,"c"]],[1712,1712],[1711,1711]]],[1539612122696,["gjx16@GJXAIOU",[[1,1711,"程序允许的结果："]],[1711,1711],[1719,1719]]],[1539612123436,["gjx16@GJXAIOU",[[1,1720,"\n"]],[1719,1719],[1720,1720]]],[1539612124796,["gjx16@GJXAIOU",[[1,1720,"1\n2\n3\n4\n5\n23\n32\n67\n87\n98\n"]],[1720,1720],[1745,1745]]],[1539612189988,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1462,"\n\nint"],[1,1467,"}\n}\n\n"],[1,1582,"\n\n\nint"],[-1,1584,"\n"],[1,1589,"void"],[-1,1594,"void"],[-1,1643,"}\n```"],[-1,1705,"\n#![表格"],[1,1711,"}\n```\n"],[-1,1719,"表"],[1,1720,"\n"],[1,1746,"![表格表"],[1,1802,"#"]],[483,483],[1803,1803]]],[1539612189988,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1462,"\n\nint"],[-1,1462,"}\n}\n\n"],[-1,1582,"\n\n\nint"],[1,1590,"\n"],[-1,1594,"void"],[1,1603,"void"],[1,1648,"}\n```"],[1,1705,"\n#![表格"],[-1,1705,"}\n```\n"],[1,1719,"表"],[-1,1719,"\n"],[-1,1746,"![表格表"],[-1,1807,"#"]],[1803,1803],[483,483]]],[1539612133119,["gjx16@GJXAIOU",[[1,1720,"`"]],[1720,1720],[1721,1721]]],[1539612134288,["gjx16@GJXAIOU",[[1,1723,"`"]],[1723,1723],[1724,1724]]],[1539612135087,["gjx16@GJXAIOU",[[1,1726,"`"]],[1726,1726],[1727,1727]]],[1539612135733,["gjx16@GJXAIOU",[[1,1729,"`"]],[1729,1729],[1730,1730]]],[1539612136460,["gjx16@GJXAIOU",[[1,1732,"`"]],[1732,1732],[1733,1733]]],[1539612137356,["gjx16@GJXAIOU",[[1,1735,"`"]],[1735,1735],[1736,1736]]],[1539612138172,["gjx16@GJXAIOU",[[1,1739,"`"]],[1739,1739],[1740,1740]]],[1539612138980,["gjx16@GJXAIOU",[[1,1743,"`"]],[1743,1743],[1744,1744]]],[1539612139653,["gjx16@GJXAIOU",[[1,1747,"`"]],[1747,1747],[1748,1748]]],[1539612140319,["gjx16@GJXAIOU",[[1,1751,"`"]],[1751,1751],[1752,1752]]],[1539612141469,["gjx16@GJXAIOU",[[1,1754,"`"]],[1754,1754],[1755,1755]]],[1539612142054,["gjx16@GJXAIOU",[[1,1750,"`"]],[1750,1750],[1751,1751]]],[1539612142559,["gjx16@GJXAIOU",[[1,1746,"`"]],[1746,1746],[1747,1747]]],[1539612143029,["gjx16@GJXAIOU",[[1,1742,"`"]],[1742,1742],[1743,1743]]],[1539612143412,["gjx16@GJXAIOU",[[1,1738,"`"]],[1738,1738],[1739,1739]]],[1539612143828,["gjx16@GJXAIOU",[[1,1734,"`"]],[1734,1734],[1735,1735]]],[1539612144172,["gjx16@GJXAIOU",[[1,1731,"`"]],[1731,1731],[1732,1732]]],[1539612144501,["gjx16@GJXAIOU",[[1,1728,"`"]],[1728,1728],[1729,1729]]],[1539612144808,["gjx16@GJXAIOU",[[1,1725,"`"]],[1725,1725],[1726,1726]]],[1539612145572,["gjx16@GJXAIOU",[[1,1722,"`"]],[1722,1722],[1723,1723]]],[1539612158385,["gjx16@GJXAIOU",[[1,1765,"注；"]],[1765,1765],[1767,1767]]],[1539612159598,["gjx16@GJXAIOU",[[-1,1766,"；"]],[1767,1767],[1766,1766]]],[1539612160198,["gjx16@GJXAIOU",[[1,1766,";"]],[1766,1766],[1767,1767]]],[1539612161179,["gjx16@GJXAIOU",[[-1,1766,";"]],[1767,1767],[1766,1766]]],[1539612163865,["gjx16@GJXAIOU",[[1,1766,":biao"]],[1766,1766],[1771,1771]]],[1539612165155,["gjx16@GJXAIOU",[[-1,1767,"biao"]],[1771,1771],[1767,1767]]],[1539612174530,["gjx16@GJXAIOU",[[1,1767,"表格中的数据和本身"]],[1767,1767],[1776,1776]]],[1539612175534,["gjx16@GJXAIOU",[[-1,1774,"本身"]],[1776,1776],[1774,1774]]],[1539612186856,["gjx16@GJXAIOU",[[1,1774,"程序使用的数据不一致，只是"]],[1774,1774],[1787,1787]]],[1539612249991,[null,[[-1,483,"\n i;}"],[1,488,"t i;\n"],[1,556,"}"],[-1,679,"\n"],[-1,1462,"\n\nint"],[1,1467,"}\n}\n\n"],[1,1582,"\n\n\nint"],[-1,1584,"\n"],[1,1589,"void"],[-1,1594,"void"],[-1,1643,"}\n```"],[-1,1705,"\n#![表格"],[1,1711,"}\n```\n"],[-1,1719,"表"],[1,1720,"\n"],[1,1788,"![表格表"],[1,1844,"#"]],[483,483],[1845,1845]]],[1539612249991,[null,[[1,483,"\n i;}"],[-1,483,"t i;\n"],[-1,556,"}"],[1,680,"\n"],[1,1462,"\n\nint"],[-1,1462,"}\n}\n\n"],[-1,1582,"\n\n\nint"],[1,1590,"\n"],[-1,1594,"void"],[1,1603,"void"],[1,1648,"}\n```"],[1,1705,"\n#![表格"],[-1,1705,"}\n```\n"],[1,1719,"表"],[-1,1719,"\n"],[-1,1788,"![表格表"],[-1,1849,"#"]],[1845,1845],[483,483]]],[1539612195606,["gjx16@GJXAIOU",[[1,1787,"算法一致"]],[1787,1787],[1791,1791]]],[1539612207508,["gjx16@GJXAIOU",[[1,58,"- "]],[58,58],[60,60]]],[1539612211888,["gjx16@GJXAIOU",[[1,684,"- "]],[684,684],[686,686]]],[1539612221963,["gjx16@GJXAIOU",[[1,1857,"\n"]],[1856,1856],[1857,1857]]],[1539612222687,["gjx16@GJXAIOU",[[1,1857,"---"]],[1857,1857],[1860,1860]]],[1539612223587,["gjx16@GJXAIOU",[[1,1861,"\n"]],[1860,1860],[1861,1861]]],[1539612223747,["gjx16@GJXAIOU",[[1,1862,"\n"]],[1861,1861],[1862,1862]]],[1539612309995,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"]],[485,485],[1869,1869]]],[1539612309995,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"]],[1869,1869],[485,485]]],[1539612282572,["gjx16@GJXAIOU",[[1,1874,"```"]],[1874,1874],[1877,1877]]],[1539612282601,["gjx16@GJXAIOU",[[1,1877,"language\n```\n"]],[1877,1877],[1877,1885]]],[1539612284240,["gjx16@GJXAIOU",[[-1,1877,"language"],[1,1885,"c"]],[1877,1885],[1878,1878]]],[1539612284835,["gjx16@GJXAIOU",[[1,1879,"\n"]],[1878,1878],[1879,1879]]],[1539612285534,["gjx16@GJXAIOU",[[1,1880,"\n"]],[1879,1879],[1880,1880]]],[1539612550001,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"],[-1,1866,"\n"],[-1,1869,"\n\n## "],[1,1885,"\n\n\n## "]],[485,485],[1891,1891]]],[1539612550001,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"],[1,1872,"\n"],[1,1874,"\n\n## "],[-1,1885,"\n\n\n## "]],[1891,1891],[485,485]]],[1539612549430,["gjx16@GJXAIOU",[[1,1879,"  "]],[1879,1879],[1881,1881]]],[1539612850005,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"],[-1,1866,"\n"],[-1,1869,"\n\n## "],[1,1887,"\n\n\n## "]],[485,485],[1893,1893]]],[1539612850005,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"],[1,1872,"\n"],[1,1874,"\n\n## "],[-1,1887,"\n\n\n## "]],[1893,1893],[485,485]]],[1539612849680,["gjx16@GJXAIOU",[[1,1873,"qina"]],[1873,1873],[1877,1877]]],[1539612910005,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"],[-1,1867,"\n\n\n\n##"],[-1,1877," "],[1,1878,"\n"],[1,1891,"\n\n\n## "]],[485,485],[1897,1897]]],[1539612910006,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"],[1,1873,"\n\n\n\n##"],[1,1877," "],[-1,1877,"\n"],[-1,1891,"\n\n\n## "]],[1897,1897],[485,485]]],[1539612850756,["gjx16@GJXAIOU",[[-1,1873,"qina"]],[1877,1877],[1873,1873]]],[1539612864585,["gjx16@GJXAIOU",[[1,1873,"前提是针对已经排好序的数组"]],[1873,1873],[1886,1886]]],[1539613210014,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"],[-1,1867,"\n\n\n\n##"],[-1,1886," "],[1,1887,"\n"],[1,1900,"\n\n\n## "]],[485,485],[1906,1906]]],[1539613210014,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"],[1,1873,"\n\n\n\n##"],[1,1886," "],[-1,1886,"\n"],[-1,1900,"\n\n\n## "]],[1906,1906],[485,485]]],[1539613196817,["gjx16@GJXAIOU",[[1,1886,"··"]],[1886,1886],[1888,1888]]],[1539613197878,["gjx16@GJXAIOU",[[-1,1886,"··"]],[1888,1888],[1886,1886]]],[1539613198789,["gjx16@GJXAIOU",[[1,1886,"``"]],[1886,1886],[1888,1888]]],[1539613199635,["gjx16@GJXAIOU",[[-1,1886,"``"]],[1888,1888],[1886,1886]]],[1539613200871,["gjx16@GJXAIOU",[[1,1886,"~~~~"]],[1886,1886],[1888,1888]]],[1539613205928,["gjx16@GJXAIOU",[[1,1888,"9fen"]],[1888,1888],[1892,1892]]],[1539613206995,["gjx16@GJXAIOU",[[-1,1889,"fen"]],[1892,1892],[1889,1889]]],[1539613209882,["gjx16@GJXAIOU",[[1,1889,"分钟"]],[1889,1889],[1891,1891]]],[1539613270015,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 二分查"],[-1,1867,"\n\n\n\n##"],[-1,1893," "],[1,1894,"\n"],[1,1907,"\n\n\n## "]],[485,485],[1913,1913]]],[1539613270015,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 二分查"],[1,1873,"\n\n\n\n##"],[1,1893," "],[-1,1893,"\n"],[-1,1907,"\n\n\n## "]],[1913,1913],[485,485]]],[1539613214784,["gjx16@GJXAIOU",[[1,1891,"开始二分查找"]],[1891,1891],[1897,1897]]],[1539613222613,["gjx16@GJXAIOU",[[-1,1866,"二分"]],[1868,1868],[1866,1866]]],[1539613224852,["gjx16@GJXAIOU",[[1,1871,"\n"]],[1870,1870],[1871,1871]]],[1539613226663,["gjx16@GJXAIOU",[[1,1872,"\n"]],[1871,1871],[1872,1872]]],[1539613228861,["gjx16@GJXAIOU",[[1,1872,"- ****"]],[1872,1872],[1876,1876]]],[1539613231946,["gjx16@GJXAIOU",[[1,1876,"二分查找"]],[1876,1876],[1880,1880]]],[1539613234868,["gjx16@GJXAIOU",[[1,1872,"\n"]],[1871,1871],[1872,1872]]],[1539613235012,["gjx16@GJXAIOU",[[1,1873,"\n"]],[1872,1872],[1873,1873]]],[1539613235140,["gjx16@GJXAIOU",[[1,1874,"\n"]],[1873,1873],[1874,1874]]],[1539613237292,["gjx16@GJXAIOU",[[1,1875,"\n"]],[1871,1871],[1872,1872]]],[1539613239907,["gjx16@GJXAIOU",[[1,1872,"- ****"]],[1872,1872],[1876,1876]]],[1539613249513,["gjx16@GJXAIOU",[[1,1876,"顺醋"]],[1876,1876],[1878,1878]]],[1539613250118,["gjx16@GJXAIOU",[[-1,1876,"顺醋"]],[1878,1878],[1876,1876]]],[1539613260458,["gjx16@GJXAIOU",[[1,1876,"顺序查找"]],[1876,1876],[1880,1880]]],[1539613262452,["gjx16@GJXAIOU",[[1,1883,"- \n"]],[1882,1882],[1885,1885]]],[1539613263597,["gjx16@GJXAIOU",[[-1,1883,"- "]],[1885,1885],[1883,1883]]],[1539613265991,["gjx16@GJXAIOU",[[1,1887,"\n"]],[1883,1883],[1884,1884]]],[1539613267744,["gjx16@GJXAIOU",[[1,1884,"```c"]],[1884,1884],[1888,1888]]],[1539613267928,["gjx16@GJXAIOU",[[1,1892,"\n"]],[1888,1888],[1889,1889]]],[1539613268092,["gjx16@GJXAIOU",[[1,1893,"\n"]],[1889,1889],[1890,1890]]],[1539613268243,["gjx16@GJXAIOU",[[1,1894,"\n"]],[1890,1890],[1891,1891]]],[1539613268421,["gjx16@GJXAIOU",[[1,1895,"\n"]],[1891,1891],[1892,1892]]],[1539613268583,["gjx16@GJXAIOU",[[1,1896,"\n"]],[1892,1892],[1893,1893]]],[1539613269353,["gjx16@GJXAIOU",[[1,1893,"```"]],[1893,1893],[1896,1896]]],[1539613330016,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,1937," "],[1,1938,"\n"],[1,1951,"\n\n\n## "]],[485,485],[1957,1957]]],[1539613330016,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,1937," "],[-1,1937,"\n"],[-1,1951,"\n\n\n## "]],[1957,1957],[485,485]]],[1539613290485,["gjx16@GJXAIOU",[[1,1889,"int a"]],[1889,1889],[1894,1894]]],[1539613291124,["gjx16@GJXAIOU",[[-1,1893,"a"]],[1894,1894],[1893,1893]]],[1539613293606,["gjx16@GJXAIOU",[[1,1893,"seq "]],[1893,1893],[1897,1897]]],[1539613294270,["gjx16@GJXAIOU",[[-1,1896," "]],[1897,1897],[1896,1896]]],[1539613295022,["gjx16@GJXAIOU",[[1,1896,"()"]],[1896,1896],[1898,1898]]],[1539613306678,["gjx16@GJXAIOU",[[1,1897,"int *array, int low,in"]],[1897,1897],[1919,1919]]],[1539613308516,["gjx16@GJXAIOU",[[-1,1917,"in"]],[1919,1919],[1917,1917]]],[1539613316573,["gjx16@GJXAIOU",[[1,1917," int high, ing key"]],[1917,1917],[1935,1935]]],[1539613318163,["gjx16@GJXAIOU",[[1,1940,"\n"]],[1936,1936],[1937,1937]]],[1539613319479,["gjx16@GJXAIOU",[[1,1937,"{}"]],[1937,1937],[1939,1939]]],[1539613321293,["gjx16@GJXAIOU",[[1,1938,"\n"]],[1938,1938],[1939,1939]]],[1539613321435,["gjx16@GJXAIOU",[[1,1939,"\n"]],[1939,1939],[1940,1940]]],[1539613321583,["gjx16@GJXAIOU",[[1,1940,"\n"]],[1940,1940],[1941,1941]]],[1539613329949,["gjx16@GJXAIOU",[[1,1939,"  int i;"]],[1939,1939],[1947,1947]]],[1539613390016,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[1,558,"}"],[-1,681,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,1998," "],[1,1999,"\n"],[1,2012,"\n\n\n## "]],[485,485],[2018,2018]]],[1539613390016,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[-1,558,"}"],[1,682,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,1998," "],[-1,1998,"\n"],[-1,2012,"\n\n\n## "]],[2018,2018],[485,485]]],[1539613330436,["gjx16@GJXAIOU",[[1,1948,"  \n"]],[1947,1947],[1950,1950]]],[1539613331229,["gjx16@GJXAIOU",[[1,1950,"i"]],[1950,1950],[1951,1951]]],[1539613331747,["gjx16@GJXAIOU",[[-1,1950,"i"]],[1951,1951],[1950,1950]]],[1539613332232,["gjx16@GJXAIOU",[[1,1950,"d"]],[1950,1950],[1951,1951]]],[1539613332748,["gjx16@GJXAIOU",[[-1,1950,"d"]],[1951,1951],[1950,1950]]],[1539613334584,["gjx16@GJXAIOU",[[1,1950,"for()"]],[1950,1950],[1955,1955]]],[1539613350647,["gjx16@GJXAIOU",[[1,1954,"i = low; i < high; h"]],[1954,1954],[1974,1974]]],[1539613351132,["gjx16@GJXAIOU",[[-1,1973,"h"]],[1974,1974],[1973,1973]]],[1539613352294,["gjx16@GJXAIOU",[[1,1973,"i++"]],[1973,1973],[1976,1976]]],[1539613353976,["gjx16@GJXAIOU",[[1,1978,"  \n"]],[1977,1977],[1980,1980]]],[1539613355601,["gjx16@GJXAIOU",[[1,1980,"{{"]],[1980,1980],[1982,1982]]],[1539613356879,["gjx16@GJXAIOU",[[-1,1980,"{{"]],[1982,1982],[1980,1980]]],[1539613357709,["gjx16@GJXAIOU",[[1,1980,"{}"]],[1980,1980],[1982,1982]]],[1539613359156,["gjx16@GJXAIOU",[[1,1981,"\n  \n  \n  "]],[1981,1981],[1990,1990]]],[1539613361649,["gjx16@GJXAIOU",[[1,1987,"\\"]],[1987,1987],[1988,1988]]],[1539613362803,["gjx16@GJXAIOU",[[-1,1985,"  \\"]],[1988,1988],[1985,1985]]],[1539613363044,["gjx16@GJXAIOU",[[-1,1985,"\n"]],[1985,1985],[1984,1984]]],[1539613363779,["gjx16@GJXAIOU",[[-1,1982,"  "]],[1984,1984],[1982,1982]]],[1539613363959,["gjx16@GJXAIOU",[[-1,1982,"\n"]],[1982,1982],[1981,1981]]],[1539613366355,["gjx16@GJXAIOU",[[1,1980,"  "]],[1980,1980],[1982,1982]]],[1539613369029,["gjx16@GJXAIOU",[[1,1986,"  \n    "]],[1986,1986],[1988,1988]]],[1539613374871,["gjx16@GJXAIOU",[[1,1988,"  if()"]],[1988,1988],[1994,1994]]],[1539613382341,["gjx16@GJXAIOU",[[1,1993,"array[i] = "]],[1993,1993],[2004,2004]]],[1539613385044,["gjx16@GJXAIOU",[[-1,2003," "]],[2004,2004],[2003,2003]]],[1539613387805,["gjx16@GJXAIOU",[[1,2003,"= key"]],[2003,2003],[2008,2008]]],[1539613389557,["gjx16@GJXAIOU",[[1,2014,"  \n    "]],[2009,2009],[2016,2016]]],[1539613450919,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,2073," "],[1,2074,"\n"],[1,2087,"\n\n\n## "]],[485,485],[2093,2093]]],[1539613450919,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,2073," "],[-1,2073,"\n"],[-1,2087,"\n\n\n## "]],[2093,2093],[485,485]]],[1539613391449,["gjx16@GJXAIOU",[[1,2016,"  {}"]],[2016,2016],[2020,2020]]],[1539613392828,["gjx16@GJXAIOU",[[1,2019,"\n        \n        "]],[2019,2019],[2037,2037]]],[1539613397617,["gjx16@GJXAIOU",[[1,2028,"  return i;"]],[2028,2028],[2039,2039]]],[1539613407638,["gjx16@GJXAIOU",[[1,2049,"else"]],[2049,2049],[2053,2053]]],[1539613408836,["gjx16@GJXAIOU",[[1,2058,"    \n    "]],[2053,2053],[2062,2062]]],[1539613410430,["gjx16@GJXAIOU",[[1,2062,"{}"]],[2062,2062],[2064,2064]]],[1539613415748,["gjx16@GJXAIOU",[[1,2063,"\n        \n        "]],[2063,2063],[2081,2081]]],[1539613424590,["gjx16@GJXAIOU",[[1,2072,"  return -1;"]],[2072,2072],[2084,2084]]],[1539613510918,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,2151," "],[1,2152,"\n"],[1,2165,"\n\n\n## "]],[485,485],[2171,2171]]],[1539613510918,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,2151," "],[-1,2151,"\n"],[-1,2165,"\n\n\n## "]],[2171,2171],[485,485]]],[1539613501980,["gjx16@GJXAIOU",[[1,2107,"\n"]],[2103,2103],[2104,2104]]],[1539613502108,["gjx16@GJXAIOU",[[1,2108,"\n"]],[2104,2104],[2105,2105]]],[1539613505293,["gjx16@GJXAIOU",[[1,2105,"int main()"]],[2105,2105],[2115,2115]]],[1539613506180,["gjx16@GJXAIOU",[[1,2119,"\n"]],[2115,2115],[2116,2116]]],[1539613507277,["gjx16@GJXAIOU",[[1,2116,"{}"]],[2116,2116],[2118,2118]]],[1539613508587,["gjx16@GJXAIOU",[[1,2117,"\n"]],[2117,2117],[2118,2118]]],[1539613509668,["gjx16@GJXAIOU",[[1,2118,"\n"]],[2118,2118],[2119,2119]]],[1539613510756,["gjx16@GJXAIOU",[[1,2118,"  "]],[2118,2118],[2120,2120]]],[1539613570923,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,2170," "],[1,2171,"\n"],[1,2184,"\n\n\n## "]],[485,485],[2190,2190]]],[1539613570923,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,2170," "],[-1,2170,"\n"],[-1,2184,"\n\n\n## "]],[2190,2190],[485,485]]],[1539613518224,["gjx16@GJXAIOU",[[1,2120,"int array[10;"]],[2120,2120],[2133,2133]]],[1539613519004,["gjx16@GJXAIOU",[[-1,2132,";"]],[2133,2133],[2132,2132]]],[1539613521955,["gjx16@GJXAIOU",[[1,2132,"]=-"]],[2132,2132],[2135,2135]]],[1539613523285,["gjx16@GJXAIOU",[[-1,2133,"=-"]],[2135,2135],[2133,2133]]],[1539613528029,["gjx16@GJXAIOU",[[1,2133," = {};"]],[2133,2133],[2139,2139]]],[1539613534789,["gjx16@GJXAIOU",[[1,2137,"32,43,6874l"]],[2137,2137],[2148,2148]]],[1539613535980,["gjx16@GJXAIOU",[[-1,2145,"74l"]],[2148,2148],[2145,2145]]],[1539613538176,["gjx16@GJXAIOU",[[1,2145,",434."]],[2145,2145],[2150,2150]]],[1539613539171,["gjx16@GJXAIOU",[[-1,2147,"34."]],[2150,2150],[2147,2147]]],[1539613556141,["gjx16@GJXAIOU",[[1,2147,"3,98,5,67,2,4,3"]],[2147,2147],[2162,2162]]],[1539613558628,["gjx16@GJXAIOU",[[1,2165,"  \n"]],[2164,2164],[2167,2167]]],[1539613563760,["gjx16@GJXAIOU",[[1,2167,"printf();"]],[2167,2167],[2176,2176]]],[1539613567697,["gjx16@GJXAIOU",[[1,2174,"\"'"]],[2174,2174],[2176,2176]]],[1539613569867,["gjx16@GJXAIOU",[[-1,2174,"\"'"]],[2176,2176],[2174,2174]]],[1539613630982,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,2226," "],[1,2227,"\n"],[1,2240,"\n\n\n## "]],[485,485],[2246,2246]]],[1539613630982,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,2226," "],[-1,2226,"\n"],[-1,2240,"\n\n\n## "]],[2246,2246],[485,485]]],[1539613571261,["gjx16@GJXAIOU",[[1,2174,"\"\""]],[2174,2174],[2176,2176]]],[1539613576103,["gjx16@GJXAIOU",[[1,2175,"%d\\n"]],[2175,2175],[2179,2179]]],[1539613584469,["gjx16@GJXAIOU",[[1,2180,",seq("]],[2180,2180],[2185,2185]]],[1539613584511,["gjx16@GJXAIOU",[[1,2186,")"]],[2185,2185],[2186,2186]]],[1539613596664,["gjx16@GJXAIOU",[[1,2185,"array,o"]],[2185,2185],[2192,2192]]],[1539613597895,["gjx16@GJXAIOU",[[-1,2191,"o"]],[2192,2192],[2191,2191]]],[1539613605670,["gjx16@GJXAIOU",[[1,2191,"0,10,89"]],[2191,2191],[2198,2198]]],[1539613615383,["gjx16@GJXAIOU",[[1,2202,"  \n"]],[2201,2201],[2204,2204]]],[1539613618815,["gjx16@GJXAIOU",[[1,2204,"return 0;"]],[2204,2204],[2213,2213]]],[1539613690971,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1863,"## 查"],[-1,1867,"\n\n##"],[-1,2263," "],[1,2264,"\n"],[1,2277,"\n\n\n## "]],[485,485],[2283,2283]]],[1539613690971,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1863,"## 查"],[1,1871,"\n\n##"],[1,2263," "],[-1,2263,"\n"],[-1,2277,"\n\n\n## "]],[2283,2283],[485,485]]],[1539613636974,["gjx16@GJXAIOU",[[1,1857,"\n"]],[1856,1856],[1857,1857]]],[1539613637116,["gjx16@GJXAIOU",[[1,1858,"\n"]],[1857,1857],[1858,1858]]],[1539613640458,["gjx16@GJXAIOU",[[1,1858,"- ****"]],[1858,1858],[1862,1862]]],[1539613641761,["gjx16@GJXAIOU",[[1,1862,"kuasi"]],[1862,1862],[1867,1867]]],[1539613643134,["gjx16@GJXAIOU",[[-1,1862,"kuasi"]],[1867,1867],[1862,1862]]],[1539613649431,["gjx16@GJXAIOU",[[1,1862,"快速查找"]],[1862,1862],[1866,1866]]],[1539613651963,["gjx16@GJXAIOU",[[1,1870," \n-"]],[1868,1868],[1871,1871]]],[1539613653067,["gjx16@GJXAIOU",[[-1,1869,"- "]],[1871,1871],[1869,1869]]],[1539613653780,["gjx16@GJXAIOU",[[1,1870,"\n"]],[1869,1869],[1870,1870]]],[1539613660570,["gjx16@GJXAIOU",[[1,1870,"![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)"]],[1870,1870],[1930,1930]]],[1539613664069,["gjx16@GJXAIOU",[[-1,1864,"查找"]],[1866,1866],[1864,1864]]],[1539613667586,["gjx16@GJXAIOU",[[1,1864,"排序"]],[1864,1864],[1866,1866]]],[1539613669367,["gjx16@GJXAIOU",[[1,1869,"- \n"]],[1868,1868],[1871,1871]]],[1539613670388,["gjx16@GJXAIOU",[[-1,1869,"- "]],[1871,1871],[1869,1869]]],[1539613688146,["gjx16@GJXAIOU",[[1,1869,"没有程序，可以从视频中大概找找，"]],[1869,1869],[1885,1885]]],[1539613690223,["gjx16@GJXAIOU",[[-1,1884,"，"]],[1885,1885],[1884,1884]]],[1539613744331,[null,[[-1,485,"\n i;}"],[1,490,"t i;\n"],[-1,558,""],[1,558,"}"],[-1,683,"\n"],[-1,1466,"\n\nint"],[1,1471,"}\n}\n\n"],[1,1586,"\n\n\nint"],[-1,1588,"\n"],[1,1593,"void"],[-1,1598,"void"],[-1,1647,"}\n```"],[-1,1709,"\n#![表格"],[1,1715,"}\n```\n"],[-1,1723,"表"],[1,1724,"\n"],[1,1796,"![表格表"],[-1,1852,"# 二分查"],[1,1952,"## 查"],[-1,1956,"\n\n##"],[-1,2352," "],[1,2353,"\n"],[1,2366,"\n\n\n## "]],[485,485],[2372,2372]]],[1539613744331,[null,[[1,485,"\n i;}"],[-1,485,"t i;\n"],[1,558,""],[-1,558,"}"],[1,684,"\n"],[1,1466,"\n\nint"],[-1,1466,"}\n}\n\n"],[-1,1586,"\n\n\nint"],[1,1594,"\n"],[-1,1598,"void"],[1,1607,"void"],[1,1652,"}\n```"],[1,1709,"\n#![表格"],[-1,1709,"}\n```\n"],[1,1723,"表"],[-1,1723,"\n"],[-1,1796,"![表格表"],[1,1857,"# 二分查"],[-1,1952,"## 查"],[1,1960,"\n\n##"],[1,2352," "],[-1,2352,"\n"],[-1,2366,"\n\n\n## "]],[2372,2372],[485,485]]],[1539613694092,["gjx16@GJXAIOU",[[1,1946,"\n"]],[1945,1945],[1946,1946]]],[1539613695197,["gjx16@GJXAIOU",[[1,1947,"\n"]],[1946,1946],[1947,1947]]],[1539613700222,["gjx16@GJXAIOU",[[-1,2192,"\n"]],[2192,2192],[2191,2191]]],[1539613704756,["gjx16@GJXAIOU",[[1,2195,"\n"]],[2194,2194],[2195,2195]]]],null,"gjx16@GJXAIOU"],["44fa1052-5ae5-4135-8c54-91e55f82eccc",1539670524036,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**\n没有程序，可以从视频中大概找找\n\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n前提是针对已经排好序的数组~~9分钟开始二分查找~~\n```c\n  \n\n```\n\n\n\n## 单向链表的实现\n\n## 单项链表的逆置\n\n\n",[[1539670471522,["gjx16@GJXAIOU",[[1,2355,"\n"]],[2354,2354],[2355,2355]]],[1539670475884,["gjx16@GJXAIOU",[[1,2355,"就是每次去"]],[2355,2355],[2360,2360]]],[1539670476669,["gjx16@GJXAIOU",[[-1,2359,"去"]],[2360,2360],[2359,2359]]],[1539670478995,["gjx16@GJXAIOU",[[1,2359,"取"]],[2359,2359],[2360,2360]]],[1539670482898,["gjx16@GJXAIOU",[[1,2355,"原理："]],[2355,2355],[2358,2358]]],[1539670484993,["gjx16@GJXAIOU",[[-1,2358,"就是"]],[2360,2360],[2358,2358]]],[1539670488259,["gjx16@GJXAIOU",[[1,2361,"朱旭"]],[2361,2361],[2363,2363]]],[1539670489176,["gjx16@GJXAIOU",[[-1,2361,"朱旭"]],[2363,2363],[2361,2361]]],[1539670510011,["gjx16@GJXAIOU",[[1,2361,"数组的中间位置元素，将要查找色"]],[2361,2361],[2376,2376]]],[1539670510389,["gjx16@GJXAIOU",[[-1,2375,"色"]],[2376,2376],[2375,2375]]],[1539670521677,["gjx16@GJXAIOU",[[1,2375,"的数和该元素比较，如果"]],[2375,2375],[2386,2386]]],[1539670540186,["gjx16@GJXAIOU",[[1,2386,"相同则就是该元素，如果大于带元素"]],[2386,2386],[2402,2402]]],[1539670541044,["gjx16@GJXAIOU",[[-1,2399,"带元素"]],[2402,2402],[2399,2399]]],[1539670560619,["gjx16@GJXAIOU",[[1,2399,"该元素，则要查找的元素在中间元素之后，防止"]],[2399,2399],[2420,2420]]],[1539670561293,["gjx16@GJXAIOU",[[-1,2418,"防止"]],[2420,2420],[2418,2418]]],[1539670581930,["gjx16@GJXAIOU",[[1,2418,"反之在前面，然后将可能的范围再次"]],[2418,2418],[2434,2434]]],[1539670593216,["gjx16@GJXAIOU",[[1,2434,"一分为二，进行查找；"]],[2434,2434],[2444,2444]]],[1539670598495,["gjx16@GJXAIOU",[[1,2355,"**"],[1,2358,"**"]],[2355,2358],[2355,2362]]],[1539670600352,["gjx16@GJXAIOU",[[1,2362," "]],[2362,2362],[2363,2363]]],[1539670603551,["gjx16@GJXAIOU",[[1,2328,"**"],[1,2330,"**"]],[2328,2330],[2328,2334]]],[1539670604870,["gjx16@GJXAIOU",[[1,2334," "]],[2334,2334],[2335,2335]]],[1539670607210,["gjx16@GJXAIOU",[[1,2332,"："]],[2332,2332],[2333,2333]]],[1539670611255,["gjx16@GJXAIOU",[[-1,2347,"~~9分钟开始二分查找~~"]],[2347,2360],[2347,2347]]],[1539670617912,["gjx16@GJXAIOU",[[-1,2448,"  "]],[2450,2450],[2448,2448]]],[1539670618389,["gjx16@GJXAIOU",[[-1,2449,"\n"]],[2448,2448],[2447,2447]]],[1539670619399,["gjx16@GJXAIOU",[[1,2449,"\n"]],[2447,2447],[2448,2448]]],[1539670620135,["gjx16@GJXAIOU",[[1,2450,"\n"]],[2448,2448],[2449,2449]]],[1539670625278,["gjx16@GJXAIOU",[[1,2449,"#include<>"]],[2449,2449],[2459,2459]]],[1539670628443,["gjx16@GJXAIOU",[[1,2458,"stdio.hj"]],[2458,2458],[2466,2466]]],[1539670629213,["gjx16@GJXAIOU",[[-1,2465,"j"]],[2466,2466],[2465,2465]]],[1539670630863,["gjx16@GJXAIOU",[[1,2468,"\n"]],[2466,2466],[2467,2467]]],[1539670631943,["gjx16@GJXAIOU",[[1,2467,"E"]],[2467,2467],[2468,2468]]],[1539670632791,["gjx16@GJXAIOU",[[-1,2467,"E"]],[2468,2468],[2467,2467]]],[1539670636886,["gjx16@GJXAIOU",[[1,2467,"#include<>"]],[2467,2467],[2477,2477]]],[1539670641919,["gjx16@GJXAIOU",[[1,2476,"stdlib.h"]],[2476,2476],[2484,2484]]],[1539670643013,["gjx16@GJXAIOU",[[1,2487,"\n"]],[2485,2485],[2486,2486]]],[1539670645369,["gjx16@GJXAIOU",[[1,2486,"#inl"]],[2486,2486],[2490,2490]]],[1539670645878,["gjx16@GJXAIOU",[[-1,2489,"l"]],[2490,2490],[2489,2489]]],[1539670648089,["gjx16@GJXAIOU",[[1,2489,"clude<>"]],[2489,2489],[2496,2496]]],[1539670651241,["gjx16@GJXAIOU",[[1,2495,"string.h"]],[2495,2495],[2503,2503]]],[1539670652607,["gjx16@GJXAIOU",[[1,2506,"\n"]],[2504,2504],[2505,2505]]],[1539670652797,["gjx16@GJXAIOU",[[1,2507,"\n"]],[2505,2505],[2506,2506]]],[1539670655951,["gjx16@GJXAIOU",[[1,2506,"int main();"]],[2506,2506],[2517,2517]]],[1539670656702,["gjx16@GJXAIOU",[[-1,2516,";"]],[2517,2517],[2516,2516]]],[1539670657477,["gjx16@GJXAIOU",[[1,2518,"\n"]],[2516,2516],[2517,2517]]],[1539670658505,["gjx16@GJXAIOU",[[1,2517,"{}"]],[2517,2517],[2519,2519]]],[1539670659832,["gjx16@GJXAIOU",[[1,2518,"\n"]],[2518,2518],[2519,2519]]],[1539670660037,["gjx16@GJXAIOU",[[1,2519,"\n"]],[2519,2519],[2520,2520]]],[1539670660221,["gjx16@GJXAIOU",[[1,2520,"\n"]],[2520,2520],[2521,2521]]],[1539670662134,["gjx16@GJXAIOU",[[1,2519,"  "]],[2519,2519],[2521,2521]]],[1539670966197,["gjx16@GJXAIOU",[[1,2506,"\n"]],[2505,2505],[2506,2506]]],[1539670966341,["gjx16@GJXAIOU",[[1,2507,"\n"]],[2506,2506],[2507,2507]]],[1539670967582,["gjx16@GJXAIOU",[[1,2507,"jin"]],[2507,2507],[2510,2510]]],[1539670968981,["gjx16@GJXAIOU",[[-1,2507,"jin"]],[2510,2510],[2507,2507]]],[1539670973386,["gjx16@GJXAIOU",[[1,2507,"intbin"]],[2507,2507],[2513,2513]]],[1539670974245,["gjx16@GJXAIOU",[[-1,2510,"bin"]],[2513,2513],[2510,2510]]],[1539670976375,["gjx16@GJXAIOU",[[1,2510," bin()"]],[2510,2510],[2516,2516]]],[1539670987167,["gjx16@GJXAIOU",[[1,2515,"int *array,int loe"]],[2515,2515],[2533,2533]]],[1539670987847,["gjx16@GJXAIOU",[[-1,2532,"e"]],[2533,2533],[2532,2532]]],[1539670996838,["gjx16@GJXAIOU",[[1,2532,"w,int high,int ket"]],[2532,2532],[2550,2550]]],[1539671289621,["gjx16@GJXAIOU",[[-1,2549,"t"]],[2550,2550],[2549,2549]]],[1539671290182,["gjx16@GJXAIOU",[[1,2549,"y"]],[2549,2549],[2550,2550]]],[1539671293901,["gjx16@GJXAIOU",[[1,2565,"\n"]],[2564,2564],[2565,2565]]],[1539671300328,["gjx16@GJXAIOU",[[1,2565,"  while()"]],[2565,2565],[2574,2574]]],[1539671302193,["gjx16@GJXAIOU",[[1,2573,";"]],[2573,2573],[2574,2574]]],[1539671302957,["gjx16@GJXAIOU",[[-1,2573,";"]],[2574,2574],[2573,2573]]],[1539671305849,["gjx16@GJXAIOU",[[1,2573,"low <."]],[2573,2573],[2579,2579]]],[1539671306613,["gjx16@GJXAIOU",[[-1,2578,"."]],[2579,2579],[2578,2578]]],[1539671310129,["gjx16@GJXAIOU",[[1,2578,"= high"]],[2578,2578],[2584,2584]]],[1539671311645,["gjx16@GJXAIOU",[[1,2589,"  \n"]],[2585,2585],[2588,2588]]],[1539671313782,["gjx16@GJXAIOU",[[1,2588,"  {}"]],[2588,2588],[2592,2592]]],[1539671314975,["gjx16@GJXAIOU",[[1,2591,"\n    \n    "]],[2591,2591],[2601,2601]]],[1539671329710,["gjx16@GJXAIOU",[[1,2596,"  int mid = ()/2;"]],[2596,2596],[2613,2613]]],[1539671337374,["gjx16@GJXAIOU",[[1,2609,"low + hiigh"]],[2609,2609],[2620,2620]]],[1539671338077,["gjx16@GJXAIOU",[[-1,2617,"igh"]],[2620,2620],[2617,2617]]],[1539671339056,["gjx16@GJXAIOU",[[1,2617,"gh"]],[2617,2617],[2619,2619]]],[1539671343933,["gjx16@GJXAIOU",[[1,2628,"  \n    "]],[2623,2623],[2630,2630]]],[1539671346982,["gjx16@GJXAIOU",[[1,2630,"  if()"]],[2630,2630],[2636,2636]]],[1539671348543,["gjx16@GJXAIOU",[[1,2635,"l"]],[2635,2635],[2636,2636]]],[1539671349223,["gjx16@GJXAIOU",[[-1,2635,"l"]],[2636,2636],[2635,2635]]],[1539671354398,["gjx16@GJXAIOU",[[1,2635,"kee"]],[2635,2635],[2638,2638]]],[1539671355045,["gjx16@GJXAIOU",[[-1,2637,"e"]],[2638,2638],[2637,2637]]],[1539671357430,["gjx16@GJXAIOU",[[1,2637,"y = "]],[2637,2637],[2641,2641]]],[1539671358037,["gjx16@GJXAIOU",[[-1,2640," "]],[2641,2641],[2640,2640]]],[1539671358766,["gjx16@GJXAIOU",[[1,2640,"- "]],[2640,2640],[2642,2642]]],[1539671359573,["gjx16@GJXAIOU",[[-1,2640,"- "]],[2642,2642],[2640,2640]]],[1539671359902,["gjx16@GJXAIOU",[[1,2640,"-"]],[2640,2640],[2641,2641]]],[1539671360660,["gjx16@GJXAIOU",[[-1,2640,"-"]],[2641,2641],[2640,2640]]],[1539671362209,["gjx16@GJXAIOU",[[1,2640,"= "]],[2640,2640],[2642,2642]]],[1539671363569,["gjx16@GJXAIOU",[[1,2642,"min"]],[2642,2642],[2645,2645]]],[1539671364677,["gjx16@GJXAIOU",[[-1,2644,"n"]],[2645,2645],[2644,2644]]],[1539671364870,["gjx16@GJXAIOU",[[1,2644,"f"]],[2644,2644],[2645,2645]]],[1539671365653,["gjx16@GJXAIOU",[[-1,2644,"f"]],[2645,2645],[2644,2644]]],[1539671365833,["gjx16@GJXAIOU",[[1,2644,"d"]],[2644,2644],[2645,2645]]],[1539671373821,["gjx16@GJXAIOU",[[-1,2642,"mid"]],[2645,2645],[2642,2642]]],[1539671378758,["gjx16@GJXAIOU",[[1,2642,"array[mid]"]],[2642,2642],[2652,2652]]],[1539671380557,["gjx16@GJXAIOU",[[1,2658,"    \n    "]],[2653,2653],[2662,2662]]],[1539671382047,["gjx16@GJXAIOU",[[1,2662,"  {}"]],[2662,2662],[2666,2666]]],[1539671383503,["gjx16@GJXAIOU",[[1,2665,"\n          \n          "]],[2665,2665],[2687,2687]]],[1539671389766,["gjx16@GJXAIOU",[[1,2676,"  reru"]],[2676,2676],[2682,2682]]],[1539671390471,["gjx16@GJXAIOU",[[-1,2680,"ru"]],[2682,2682],[2680,2680]]],[1539671392054,["gjx16@GJXAIOU",[[1,2680,"tur "]],[2680,2680],[2684,2684]]],[1539671392629,["gjx16@GJXAIOU",[[-1,2683," "]],[2684,2684],[2683,2683]]],[1539671395335,["gjx16@GJXAIOU",[[1,2683,"n mid;"]],[2683,2683],[2689,2689]]],[1539671397245,["gjx16@GJXAIOU",[[1,2700,"  \n          "]],[2689,2689],[2702,2702]]],[1539671408869,["gjx16@GJXAIOU",[[-1,2690,"            "]],[2702,2702],[2690,2690]]],[1539671409270,["gjx16@GJXAIOU",[[-1,2690,"\n"]],[2690,2690],[2689,2689]]],[1539671414494,["gjx16@GJXAIOU",[[1,2701,"slse"]],[2701,2701],[2705,2705]]],[1539671415551,["gjx16@GJXAIOU",[[-1,2701,"slse"]],[2705,2705],[2701,2701]]],[1539671419640,["gjx16@GJXAIOU",[[1,2701,"else if"]],[2701,2701],[2708,2708]]],[1539671420685,["gjx16@GJXAIOU",[[1,2713,"      \n    "]],[2708,2708],[2719,2719]]],[1539671422279,["gjx16@GJXAIOU",[[1,2719,"{}"]],[2719,2719],[2721,2721]]],[1539671423869,["gjx16@GJXAIOU",[[1,2720,"\n          \n          "]],[2720,2720],[2742,2742]]],[1539671425342,["gjx16@GJXAIOU",[[1,2731,"  "]],[2731,2731],[2733,2733]]],[1539671432600,["gjx16@GJXAIOU",[[1,2708,"()"]],[2708,2708],[2710,2710]]],[1539671438887,["gjx16@GJXAIOU",[[1,2709,"kw"]],[2709,2709],[2711,2711]]],[1539671440190,["gjx16@GJXAIOU",[[-1,2710,"w"]],[2711,2711],[2710,2710]]],[1539671449974,["gjx16@GJXAIOU",[[1,2710,"ey > array[mif"]],[2710,2710],[2724,2724]]],[1539671450901,["gjx16@GJXAIOU",[[-1,2723,"f"]],[2724,2724],[2723,2723]]],[1539671451818,["gjx16@GJXAIOU",[[1,2723,"d]"]],[2723,2723],[2725,2725]]],[1539671462446,["gjx16@GJXAIOU",[[1,2751,"low = mif"]],[2751,2751],[2760,2760]]],[1539671463045,["gjx16@GJXAIOU",[[-1,2759,"f"]],[2760,2760],[2759,2759]]],[1539671465887,["gjx16@GJXAIOU",[[1,2759,"d +1;"]],[2759,2759],[2764,2764]]],[1539671470783,["gjx16@GJXAIOU",[[1,2776,"sld"]],[2776,2776],[2779,2779]]],[1539671471541,["gjx16@GJXAIOU",[[-1,2776,"sld"]],[2779,2779],[2776,2776]]],[1539671472801,["gjx16@GJXAIOU",[[1,2776,"else"]],[2776,2776],[2780,2780]]],[1539671475333,["gjx16@GJXAIOU",[[1,2785,"      \n    "]],[2780,2780],[2791,2791]]],[1539671477014,["gjx16@GJXAIOU",[[1,2791,"{}"]],[2791,2791],[2793,2793]]],[1539671478229,["gjx16@GJXAIOU",[[1,2792,"\n          \n          "]],[2792,2792],[2814,2814]]],[1539671482334,["gjx16@GJXAIOU",[[1,2803,"  high "]],[2803,2803],[2810,2810]]],[1539671490078,["gjx16@GJXAIOU",[[1,2810,"= mid -1;"]],[2810,2810],[2819,2819]]],[1539671498848,["gjx16@GJXAIOU",[[1,2840,"  \n  "]],[2837,2837],[2842,2842]]],[1539671506758,["gjx16@GJXAIOU",[[1,2842,"return -1;"]],[2842,2842],[2852,2852]]],[1539671509573,["gjx16@GJXAIOU",[[-1,2856,"\n"]],[2856,2856],[2855,2855]]],[1539671510333,["gjx16@GJXAIOU",[[-1,2853,"  "]],[2855,2855],[2853,2853]]],[1539671514489,["gjx16@GJXAIOU",[[1,2857,"\n"]],[2855,2855],[2856,2856]]],[1539671514604,["gjx16@GJXAIOU",[[1,2858,"\n"]],[2856,2856],[2857,2857]]],[1539671531039,["gjx16@GJXAIOU",[[1,2852,"//没有找到数据的话返回-1"]],[2852,2852],[2866,2866]]],[1539671541136,["gjx16@GJXAIOU",[[1,2653,"//中间"]],[2653,2653],[2657,2657]]],[1539671556379,["gjx16@GJXAIOU",[[1,2657,"切一刀，正好等于中间数"]],[2657,2657],[2668,2668]]],[1539671597147,["gjx16@GJXAIOU",[[1,2741,"//如果要找的数大于array[mid]，那么就在下半部分继续查找"]],[2741,2741],[2774,2774]]],[1539671606590,["gjx16@GJXAIOU",[[1,2828,"//如果要找的数大于array[mid]，那么就在下半部分继续查找"]],[2828,2828],[2861,2861]]],[1539671609182,["gjx16@GJXAIOU",[[-1,2836,"大于"]],[2838,2838],[2836,2836]]],[1539671612133,["gjx16@GJXAIOU",[[1,2836,"小于"]],[2836,2836],[2838,2838]]],[1539671618606,["gjx16@GJXAIOU",[[-1,2853,"下"]],[2854,2854],[2853,2853]]],[1539671620059,["gjx16@GJXAIOU",[[1,2853,"上"]],[2853,2853],[2854,2854]]],[1539671629710,["gjx16@GJXAIOU",[[1,2954,"\n"]],[2951,2951],[2952,2952]]],[1539671629849,["gjx16@GJXAIOU",[[1,2955,"\n"]],[2952,2952],[2953,2953]]],[1539671634480,["gjx16@GJXAIOU",[[1,2953,"int mian();"]],[2953,2953],[2964,2964]]],[1539671635390,["gjx16@GJXAIOU",[[-1,2963,";"]],[2964,2964],[2963,2963]]],[1539671636232,["gjx16@GJXAIOU",[[1,2963,";"]],[2963,2963],[2964,2964]]],[1539671636816,["gjx16@GJXAIOU",[[-1,2963,";"]],[2964,2964],[2963,2963]]],[1539671637833,["gjx16@GJXAIOU",[[1,2966,"\n"]],[2963,2963],[2964,2964]]],[1539671639385,["gjx16@GJXAIOU",[[1,2964,"{}"]],[2964,2964],[2966,2966]]],[1539671640489,["gjx16@GJXAIOU",[[1,2965,"\n"]],[2965,2965],[2966,2966]]],[1539671640670,["gjx16@GJXAIOU",[[1,2966,"\n"]],[2966,2966],[2967,2967]]],[1539671640854,["gjx16@GJXAIOU",[[1,2967,"\n"]],[2967,2967],[2968,2968]]],[1539671655104,["gjx16@GJXAIOU",[[1,2966,"  int array[10] = {};"]],[2966,2966],[2987,2987]]],[1539671670069,["gjx16@GJXAIOU",[[1,2985,"32,43,68,43,98,5,67,2,4,3"]],[2985,2985],[3010,3010]]],[1539671678837,["gjx16@GJXAIOU",[[1,3013,"  \n"]],[3012,3012],[3015,3015]]],[1539671679541,["gjx16@GJXAIOU",[[-1,3013,"  "],[1,3015,"\n"]],[3015,3015],[3014,3014]]],[1539671682115,["gjx16@GJXAIOU",[[1,3014,"quick"]],[3014,3014],[3019,3019]]],[1539671684021,["gjx16@GJXAIOU",[[-1,3014,"quick"]],[3019,3019],[3014,3014]]],[1539671686881,["gjx16@GJXAIOU",[[1,3014,"  quicj"]],[3014,3014],[3021,3021]]],[1539671687472,["gjx16@GJXAIOU",[[-1,3020,"j"]],[3021,3021],[3020,3020]]],[1539671695095,["gjx16@GJXAIOU",[[1,3020,"k_sort();"]],[3020,3020],[3029,3029]]],[1539671700983,["gjx16@GJXAIOU",[[1,3027,"array,10"]],[3027,3027],[3035,3035]]],[1539671705045,["gjx16@GJXAIOU",[[1,3038,"  \n"]],[3037,3037],[3040,3040]]],[1539671708663,["gjx16@GJXAIOU",[[1,3040,"printf();"]],[3040,3040],[3049,3049]]],[1539671711887,["gjx16@GJXAIOU",[[1,3047,"\"\""]],[3047,3047],[3049,3049]]],[1539671715671,["gjx16@GJXAIOU",[[1,3048,"%d\\n"]],[3048,3048],[3052,3052]]],[1539671720855,["gjx16@GJXAIOU",[[1,3053,",bin("]],[3053,3053],[3058,3058]]],[1539671720906,["gjx16@GJXAIOU",[[1,3059,")"]],[3058,3058],[3059,3059]]],[1539671728359,["gjx16@GJXAIOU",[[1,3058,"array,0.10"]],[3058,3058],[3068,3068]]],[1539671729429,["gjx16@GJXAIOU",[[-1,3065,".10"]],[3068,3068],[3065,3065]]],[1539671734537,["gjx16@GJXAIOU",[[1,3065,",10,32"]],[3065,3065],[3071,3071]]],[1539671744222,["gjx16@GJXAIOU",[[1,3075,"  \n"]],[3074,3074],[3077,3077]]],[1539671747511,["gjx16@GJXAIOU",[[1,3077,"return 0;"]],[3077,3077],[3086,3086]]],[1539671795447,["gjx16@GJXAIOU",[[1,1885,"```c"]],[1885,1885],[1889,1889]]],[1539671795766,["gjx16@GJXAIOU",[[1,1890,"\n"]],[1889,1889],[1890,1890]]],[1539671795945,["gjx16@GJXAIOU",[[1,1891,"\n"]],[1890,1890],[1891,1891]]],[1539671796134,["gjx16@GJXAIOU",[[1,1892,"\n"]],[1891,1891],[1892,1892]]],[1539671797136,["gjx16@GJXAIOU",[[1,1892,"```"]],[1892,1892],[1895,1895]]],[1539671907710,["gjx16@GJXAIOU",[[1,1890,"#include<>"]],[1890,1890],[1900,1900]]],[1539671915079,["gjx16@GJXAIOU",[[1,1899,"stdlio"]],[1899,1899],[1905,1905]]],[1539671916519,["gjx16@GJXAIOU",[[-1,1902,"lio"]],[1905,1905],[1902,1902]]],[1539671918967,["gjx16@GJXAIOU",[[1,1902,"io.h"]],[1902,1902],[1906,1906]]],[1539671921176,["gjx16@GJXAIOU",[[1,1909,"\n"]],[1907,1907],[1908,1908]]],[1539671924180,["gjx16@GJXAIOU",[[1,1908,"3include"]],[1908,1908],[1916,1916]]],[1539671925918,["gjx16@GJXAIOU",[[-1,1908,"3include"]],[1916,1916],[1908,1908]]],[1539671933663,["gjx16@GJXAIOU",[[1,1908,"#include<>"]],[1908,1908],[1918,1918]]],[1539671936671,["gjx16@GJXAIOU",[[1,1917,"string ."]],[1917,1917],[1925,1925]]],[1539671937333,["gjx16@GJXAIOU",[[-1,1923," ."]],[1925,1925],[1923,1923]]],[1539671938311,["gjx16@GJXAIOU",[[1,1923,".ju"]],[1923,1923],[1926,1926]]],[1539671939133,["gjx16@GJXAIOU",[[-1,1924,"ju"]],[1926,1926],[1924,1924]]],[1539671939833,["gjx16@GJXAIOU",[[1,1924,"h"]],[1924,1924],[1925,1925]]],[1539671941286,["gjx16@GJXAIOU",[[1,1928,"\n"]],[1926,1926],[1927,1927]]],[1539671941421,["gjx16@GJXAIOU",[[1,1929,"\n"]],[1927,1927],[1928,1928]]],[1539671942911,["gjx16@GJXAIOU",[[1,1928,"inr "]],[1928,1928],[1932,1932]]],[1539671943461,["gjx16@GJXAIOU",[[-1,1930,"r "]],[1932,1932],[1930,1930]]],[1539671946015,["gjx16@GJXAIOU",[[1,1930,"t main();"]],[1930,1930],[1939,1939]]],[1539671946773,["gjx16@GJXAIOU",[[-1,1938,";"]],[1939,1939],[1938,1938]]],[1539671947149,["gjx16@GJXAIOU",[[1,1940,"\n"]],[1938,1938],[1939,1939]]],[1539671948304,["gjx16@GJXAIOU",[[1,1939,"{}"]],[1939,1939],[1941,1941]]],[1539671949261,["gjx16@GJXAIOU",[[1,1940,"\n"]],[1940,1940],[1941,1941]]],[1539671949429,["gjx16@GJXAIOU",[[1,1941,"\n"]],[1941,1941],[1942,1942]]],[1539671949589,["gjx16@GJXAIOU",[[1,1942,"\n"]],[1942,1942],[1943,1943]]],[1539671950942,["gjx16@GJXAIOU",[[1,1941,"  "]],[1941,1941],[1943,1943]]],[1539671954925,["gjx16@GJXAIOU",[[1,1928,"\n"]],[1927,1927],[1928,1928]]],[1539671955757,["gjx16@GJXAIOU",[[1,1929,"\n"]],[1928,1928],[1929,1929]]],[1539671959881,["gjx16@GJXAIOU",[[1,1928,"voif"]],[1928,1928],[1932,1932]]],[1539671961301,["gjx16@GJXAIOU",[[-1,1931,"f"]],[1932,1932],[1931,1931]]],[1539671961999,["gjx16@GJXAIOU",[[1,1931,"d "]],[1931,1931],[1933,1933]]],[1539671968457,["gjx16@GJXAIOU",[[1,1933,"q_sort()"]],[1933,1933],[1941,1941]]],[1539671973031,["gjx16@GJXAIOU",[[1,1940,"int a"]],[1940,1940],[1945,1945]]],[1539671973583,["gjx16@GJXAIOU",[[-1,1944,"a"]],[1945,1945],[1944,1944]]],[1539671980535,["gjx16@GJXAIOU",[[1,1944,"*array,int loe"]],[1944,1944],[1958,1958]]],[1539671981277,["gjx16@GJXAIOU",[[-1,1957,"e"]],[1958,1958],[1957,1957]]],[1539671986118,["gjx16@GJXAIOU",[[1,1957,"w, int high"]],[1957,1957],[1968,1968]]],[1539672001376,["gjx16@GJXAIOU",[[1,1969,"//快读"]],[1969,1969],[1973,1973]]],[1539672002878,["gjx16@GJXAIOU",[[-1,1971,"快读"]],[1973,1973],[1971,1971]]],[1539672006922,["gjx16@GJXAIOU",[[1,1971,"块"]],[1971,1971],[1972,1972]]],[1539672008325,["gjx16@GJXAIOU",[[-1,1971,"块"]],[1972,1972],[1971,1971]]],[1539672021105,["gjx16@GJXAIOU",[[1,1971,"快速排序，low是排序范围的"]],[1971,1971],[1985,1985]]],[1539672029825,["gjx16@GJXAIOU",[[1,1985,"下标，high是上标"]],[1985,1985],[1995,1995]]],[1539672035477,["gjx16@GJXAIOU",[[1,1997,"\n"]],[1995,1995],[1996,1996]]],[1539672037198,["gjx16@GJXAIOU",[[1,1996,"{}"]],[1996,1996],[1998,1998]]],[1539672039437,["gjx16@GJXAIOU",[[1,1997,"\n"]],[1997,1997],[1998,1998]]],[1539672039589,["gjx16@GJXAIOU",[[1,1998,"\n"]],[1998,1998],[1999,1999]]],[1539672039733,["gjx16@GJXAIOU",[[1,1999,"\n"]],[1999,1999],[2000,2000]]],[1539672046135,["gjx16@GJXAIOU",[[1,1998,"  if()"]],[1998,1998],[2004,2004]]],[1539672049787,["gjx16@GJXAIOU",[[1,2003,"low ><"]],[2003,2003],[2009,2009]]],[1539672051223,["gjx16@GJXAIOU",[[-1,2007,"><"]],[2009,2009],[2007,2007]]],[1539672055294,["gjx16@GJXAIOU",[[1,2007,"< high"]],[2007,2007],[2013,2013]]],[1539672056520,["gjx16@GJXAIOU",[[1,2015,"  \n"]],[2014,2014],[2017,2017]]],[1539672058833,["gjx16@GJXAIOU",[[1,2017,"  {}"]],[2017,2017],[2021,2021]]],[1539672059717,["gjx16@GJXAIOU",[[1,2020,"\n    \n    "]],[2020,2020],[2030,2030]]],[1539672081743,["gjx16@GJXAIOU",[[1,2025,"    int povitloc = pa"]],[2025,2025],[2046,2046]]],[1539672090543,["gjx16@GJXAIOU",[[1,2046,"rtition();"]],[2046,2046],[2056,2056]]],[1539672092490,["gjx16@GJXAIOU",[[1,2055,"arr"]],[2055,2055],[2058,2058]]],[1539672093605,["gjx16@GJXAIOU",[[-1,2055,"arr"]],[2058,2058],[2055,2055]]],[1539672111114,["gjx16@GJXAIOU",[[1,2054,"array,low ,high"]],[2054,2054],[2069,2069]]],[1539672115192,["gjx16@GJXAIOU",[[-1,2063," "]],[2064,2064],[2063,2063]]],[1539672117910,["gjx16@GJXAIOU",[[1,2075,"    \n    "]],[2070,2070],[2079,2079]]],[1539672130887,["gjx16@GJXAIOU",[[1,2079,"q_sort();"]],[2079,2079],[2088,2088]]],[1539672132014,["gjx16@GJXAIOU",[[1,2087,"a"]],[2087,2087],[2088,2088]]],[1539672132958,["gjx16@GJXAIOU",[[-1,2087,"a"]],[2088,2088],[2087,2087]]],[1539672142913,["gjx16@GJXAIOU",[[1,2086,"array,povitloc"]],[2086,2086],[2100,2100]]],[1539672152710,["gjx16@GJXAIOU",[[1,2100," + 1,high"]],[2100,2100],[2109,2109]]],[1539672156222,["gjx16@GJXAIOU",[[1,2116,"    \n    "]],[2111,2111],[2120,2120]]],[1539672162505,["gjx16@GJXAIOU",[[1,2120,"q_sort();"]],[2120,2120],[2129,2129]]],[1539672177903,["gjx16@GJXAIOU",[[1,2127,"array,low,povitloc _1"]],[2127,2127],[2148,2148]]],[1539672178957,["gjx16@GJXAIOU",[[-1,2146,"_1"]],[2148,2148],[2146,2146]]],[1539672180119,["gjx16@GJXAIOU",[[1,2146,"-1"]],[2146,2146],[2148,2148]]],[1539672190966,["gjx16@GJXAIOU",[[1,2079,"\n        "]],[2070,2070],[2079,2079]]],[1539672194144,["gjx16@GJXAIOU",[[-1,2072,"       "]],[2079,2079],[2072,2072]]],[1539672202945,["gjx16@GJXAIOU",[[1,2072,"//定义一个变量"]],[2072,2072],[2080,2080]]],[1539672212992,["gjx16@GJXAIOU",[[1,2080,"，指向轴点的位置，"]],[2080,2080],[2089,2089]]],[1539672217277,["gjx16@GJXAIOU",[[-1,2088,"，"]],[2089,2089],[2088,2088]]],[1539672218146,["gjx16@GJXAIOU",[[1,2088,"；"]],[2088,2088],[2089,2089]]],[1539672218653,["gjx16@GJXAIOU",[[1,2091,"\n "]],[2089,2089],[2091,2091]]],[1539672251545,["gjx16@GJXAIOU",[[1,2091,"//partition得到轴点的位置，并且已经根据轴点将数组内容排序了"]],[2091,2091],[2126,2126]]],[1539672255869,["gjx16@GJXAIOU",[[1,2176,"\n        "]],[2167,2167],[2176,2176]]],[1539672256481,["gjx16@GJXAIOU",[[1,2176,"、、"]],[2176,2176],[2178,2178]]],[1539672258349,["gjx16@GJXAIOU",[[-1,2174,"  、、"]],[2178,2178],[2174,2174]]],[1539672262398,["gjx16@GJXAIOU",[[1,2174,"//在"]],[2174,2174],[2177,2177]]],[1539672278723,["gjx16@GJXAIOU",[[1,2177,"轴点的下半部分递归快速"]],[2177,2177],[2188,2188]]],[1539672285144,["gjx16@GJXAIOU",[[1,2232,"    \n    "]],[2227,2227],[2236,2236]]],[1539672287167,["gjx16@GJXAIOU",[[1,2236,"//\\\\\\"]],[2236,2236],[2241,2241]]],[1539672289784,["gjx16@GJXAIOU",[[-1,2233,"   //\\\\\\"]],[2241,2241],[2233,2233]]],[1539672306818,["gjx16@GJXAIOU",[[1,2233,"//在轴点的上半部分递归快速"]],[2233,2233],[2247,2247]]],[1539672315949,["gjx16@GJXAIOU",[[-1,2254,"\n"]],[2254,2254],[2253,2253]]],[1539672318520,["gjx16@GJXAIOU",[[1,2257,"\n"]],[2255,2255],[2256,2256]]],[1539672318654,["gjx16@GJXAIOU",[[1,2258,"\n"]],[2256,2256],[2257,2257]]],[1539672318806,["gjx16@GJXAIOU",[[1,2259,"\n"]],[2257,2257],[2258,2258]]],[1539672321190,["gjx16@GJXAIOU",[[1,2260,"\n"]],[2257,2257],[2258,2258]]],[1539672333840,["gjx16@GJXAIOU",[[1,2258,"void quick_sort()"]],[2258,2258],[2275,2275]]],[1539672341905,["gjx16@GJXAIOU",[[1,2274,"int *array,ing "]],[2274,2274],[2289,2289]]],[1539672342784,["gjx16@GJXAIOU",[[-1,2287,"g "]],[2289,2289],[2287,2287]]],[1539672344945,["gjx16@GJXAIOU",[[1,2287,"t n"]],[2287,2287],[2290,2290]]],[1539672346773,["gjx16@GJXAIOU",[[1,2294,"\n"]],[2291,2291],[2292,2292]]],[1539672367176,["gjx16@GJXAIOU",[[1,2295,"\n"]],[2291,2291],[2292,2292]]],[1539672368457,["gjx16@GJXAIOU",[[1,2292,"{}"]],[2292,2292],[2294,2294]]],[1539672369542,["gjx16@GJXAIOU",[[1,2293,"\n"]],[2293,2293],[2294,2294]]],[1539672370910,["gjx16@GJXAIOU",[[1,2294,"\n"]],[2294,2294],[2295,2295]]],[1539672379512,["gjx16@GJXAIOU",[[1,2294,"  q_sort();"]],[2294,2294],[2305,2305]]],[1539672382975,["gjx16@GJXAIOU",[[1,2303,"arr"]],[2303,2303],[2306,2306]]],[1539672389055,["gjx16@GJXAIOU",[[1,2306,"ay,0,n-1"]],[2306,2306],[2314,2314]]],[1539672401294,["gjx16@GJXAIOU",[[1,2337," int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;"]],[2337,2337],[2438,2438]]],[1539672404521,["gjx16@GJXAIOU",[[1,2331,"void"]],[2331,2331],[2335,2335]]],[1539672407573,["gjx16@GJXAIOU",[[-1,2341," "]],[2342,2342],[2341,2341]]],[1539673017246,["gjx16@GJXAIOU",[[-1,2387,"select"]],[2393,2393],[2387,2387]]],[1539673025928,["gjx16@GJXAIOU",[[1,2387,"quick_aort"]],[2387,2387],[2397,2397]]],[1539673027550,["gjx16@GJXAIOU",[[-1,2393,"aort"]],[2397,2397],[2393,2393]]],[1539673029000,["gjx16@GJXAIOU",[[1,2393,"sort"]],[2393,2393],[2397,2397]]],[1539673047407,["gjx16@GJXAIOU",[[1,2322,"\n"]],[2319,2319],[2320,2320]]],[1539673047855,["gjx16@GJXAIOU",[[1,2320,"void print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}"]],[2320,2320],[2435,2435]]],[1539673050537,["gjx16@GJXAIOU",[[1,2320,"\n"]],[2319,2319],[2320,2320]]],[1539673070850,["gjx16@GJXAIOU",[[1,1868,"===="]],[1868,1868],[1870,1870]]],[1539673072413,["gjx16@GJXAIOU",[[1,1870,"xuyao"]],[1870,1870],[1875,1875]]],[1539673073718,["gjx16@GJXAIOU",[[-1,1871,"=xuyao"]],[1875,1875],[1869,1869]]],[1539673074803,["gjx16@GJXAIOU",[[1,1869,"+"]],[1869,1869],[1870,1870]]],[1539673075833,["gjx16@GJXAIOU",[[-1,1869,"+"]],[1870,1870],[1869,1869]]],[1539673076457,["gjx16@GJXAIOU",[[1,1871,"==="]],[1869,1869],[1870,1870]]],[1539673077935,["gjx16@GJXAIOU",[[-1,1872,"=="]],[1870,1870],[1868,1868]]],[1539673084252,["gjx16@GJXAIOU",[[1,1870,"需要测试"]],[1870,1870],[1874,1874]]]],null,"gjx16@GJXAIOU"],["49913122-d1d2-4ba5-8380-d9e8a9f61bc4",1539685224793,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\nint main()\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint mian()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n\n## 单向链表的实现\n\n## 单项链表的逆置\n\n\n",[[1539685186452,["gjx16@GJXAIOU",[[1,1936,"\n"]],[1934,1934],[1935,1935]]],[1539685189702,["gjx16@GJXAIOU",[[1,1935,"、、、、、、、、"]],[1935,1935],[1943,1943]]],[1539685190259,["gjx16@GJXAIOU",[[-1,1942,"、"]],[1943,1943],[1942,1942]]],[1539685190429,["gjx16@GJXAIOU",[[1,1942,"="]],[1942,1942],[1943,1943]]],[1539685192076,["gjx16@GJXAIOU",[[-1,1935,"、、、、、、、="]],[1943,1943],[1935,1935]]],[1539687223856,["gjx16@GJXAIOU",[[1,2580,"\n"]],[2579,2579],[2580,2580]]],[1539687223995,["gjx16@GJXAIOU",[[1,2581,"\n"]],[2580,2580],[2581,2581]]],[1539687238389,["gjx16@GJXAIOU",[[1,2581,"程序有问题，附上其他的链接；、"]],[2581,2581],[2596,2596]]],[1539687238421,["gjx16@GJXAIOU",[[1,2597,"\n"]],[2596,2596],[2597,2597]]],[1539687240185,["gjx16@GJXAIOU",[[-1,2597,"\n"]],[2597,2597],[2596,2596]]],[1539687240433,["gjx16@GJXAIOU",[[-1,2595,"、"]],[2596,2596],[2595,2595]]],[1539687241549,["gjx16@GJXAIOU",[[1,2596,"\n"]],[2595,2595],[2596,2596]]],[1539687258123,["gjx16@GJXAIOU",[[1,2596,"[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)"]],[2596,2596],[2663,2663]]],[1539687285314,["gjx16@GJXAIOU",[[1,3815,"、、"]],[3815,3815],[3817,3817]]],[1539687286321,["gjx16@GJXAIOU",[[-1,3815,"、、"]],[3817,3817],[3815,3815]]],[1539687302533,["gjx16@GJXAIOU",[[1,3815,"//这里需要调用快读"]],[3815,3815],[3825,3825]]],[1539687303267,["gjx16@GJXAIOU",[[-1,3823,"快读"]],[3825,3825],[3823,3823]]],[1539687326657,["gjx16@GJXAIOU",[[1,3823,"快速排序方法，暂时上面的代码有错误"]],[3823,3823],[3840,3840]]],[1539687339431,["gjx16@GJXAIOU",[[1,2726,"\n"]],[2724,2724],[2725,2725]]],[1539687342129,["gjx16@GJXAIOU",[[1,2725,"****"]],[2725,2725],[2727,2727]]],[1539687358036,["gjx16@GJXAIOU",[[1,2727,"CSDN上快速排序算法："]],[2727,2727],[2739,2739]]],[1539687359865,["gjx16@GJXAIOU",[[1,2743,"\n"]],[2741,2741],[2742,2742]]],[1539687360633,["gjx16@GJXAIOU",[[1,2744,"\n"]],[2742,2742],[2743,2743]]],[1539687363491,["gjx16@GJXAIOU",[[1,2743,"```c"]],[2743,2743],[2747,2747]]],[1539687363697,["gjx16@GJXAIOU",[[1,2749,"\n"]],[2747,2747],[2748,2748]]],[1539687364427,["gjx16@GJXAIOU",[[1,2750,"\n"]],[2748,2748],[2749,2749]]],[1539687364611,["gjx16@GJXAIOU",[[1,2751,"\n"]],[2749,2749],[2750,2750]]],[1539687364784,["gjx16@GJXAIOU",[[1,2752,"\n"]],[2750,2750],[2751,2751]]],[1539687365346,["gjx16@GJXAIOU",[[1,2751,"```"]],[2751,2751],[2754,2754]]],[1539687472634,["gjx16@GJXAIOU",[[1,2742,"- fayi"]],[2742,2742],[2748,2748]]],[1539687474046,["gjx16@GJXAIOU",[[-1,2744,"fayi"]],[2748,2748],[2744,2744]]],[1539687476188,["gjx16@GJXAIOU",[[1,2744,"法一；"]],[2744,2744],[2747,2747]]],[1539687488419,["gjx16@GJXAIOU",[[1,2747,"定轴法；"]],[2747,2747],[2751,2751]]],[1539687526366,["gjx16@GJXAIOU",[[1,2752,"- \n"]],[2751,2751],[2754,2754]]],[1539687529208,["gjx16@GJXAIOU",[[-1,2752,"- "]],[2754,2754],[2752,2752]]],[1539687532881,["gjx16@GJXAIOU",[[1,2752,"（一）定轴法:\n1.备份对轴(首记录)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n\n\n4.重复上述过程，知道left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[2752,2752],[3167,3167]]],[1539687538813,["gjx16@GJXAIOU",[[-1,2926,"\n"]],[2926,2926],[2925,2925]]],[1539687538968,["gjx16@GJXAIOU",[[-1,2925,"\n"]],[2925,2925],[2924,2924]]],[1539687599130,["gjx16@GJXAIOU",[[-1,2934,"知道"]],[2936,2936],[2934,2934]]],[1539687602219,["gjx16@GJXAIOU",[[1,2934,"知道"]],[2934,2934],[2936,2936]]],[1539687602922,["gjx16@GJXAIOU",[[-1,2934,"知道"]],[2936,2936],[2934,2934]]],[1539687609722,["gjx16@GJXAIOU",[[1,2934,"直到"]],[2934,2934],[2936,2936]]],[1539687625608,["gjx16@GJXAIOU",[[-1,3021,"--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[3021,3165],[3021,3021]]],[1539687668335,["gjx16@GJXAIOU",[[1,3028,"void quickSort(int* A,int first,int last){        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)                           //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;                         //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)                   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];                        //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t\t\t\t\t\t\t\t\t\t   //依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！\n"]],[3027,3027],[4084,4084]]],[1539687691799,["gjx16@GJXAIOU",[[-1,3940,"--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！\n\n"]],[3940,4086],[3940,3940]]],[1539687929484,["gjx16@GJXAIOU",[[1,2770,"，即第一个元素"]],[2770,2770],[2777,2777]]],[1539688096622,["gjx16@GJXAIOU",[[-1,3140,"                      "]],[3161,3161],[3139,3139]]],[1539688103806,["gjx16@GJXAIOU",[[1,3076,"\n"]],[3076,3076],[3077,3077]]],[1539688113881,["gjx16@GJXAIOU",[[-1,3220,"                  "]],[3232,3232],[3214,3214]]],[1539688136011,["gjx16@GJXAIOU",[[-1,3484,"                "]],[3499,3499],[3483,3483]]],[1539688148943,["gjx16@GJXAIOU",[[-1,3667,"                   "]],[3685,3685],[3666,3666]]],[1539688155313,["gjx16@GJXAIOU",[[-1,3705,"\t\t\t\t\t\t\t\t\t\t   "]],[3718,3718],[3705,3705]]],[1539688155572,["gjx16@GJXAIOU",[[-1,3704,"\n"]],[3705,3705],[3704,3704]]],[1539688157126,["gjx16@GJXAIOU",[[1,3704,"\n\t"]],[3704,3704],[3706,3706]]],[1539689015373,["gjx16@GJXAIOU",[[1,3867,"\n"]],[3866,3866],[3867,3867]]],[1539689030727,["gjx16@GJXAIOU",[[1,3867,"二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[3867,3867],[4214,4214]]],[1539689038945,["gjx16@GJXAIOU",[[-1,4070,"--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[4070,4214],[4070,4070]]],[1539689043489,["gjx16@GJXAIOU",[[1,4070,"```c"]],[4070,4070],[4074,4074]]],[1539689043813,["gjx16@GJXAIOU",[[1,4075,"\n"]],[4074,4074],[4075,4075]]],[1539689044152,["gjx16@GJXAIOU",[[1,4076,"\n"]],[4075,4075],[4076,4076]]],[1539689044521,["gjx16@GJXAIOU",[[1,4077,"\n"]],[4076,4076],[4077,4077]]],[1539689045454,["gjx16@GJXAIOU",[[1,4077,"```"]],[4077,4077],[4080,4080]]],[1539689056683,["gjx16@GJXAIOU",[[1,4075,"void quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;                            //左边第一个，因为第一个已经用pivot保存了\n\tint high=r;                           //右边\n\tint pivot = s[l];                     //第一个，已被保存\n        while(low<high)                       //当左小于右,当相等的时候会跳出循环\n        {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n        }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[4075,4075],[5023,5023]]],[1539689072950,["gjx16@GJXAIOU",[[1,4211,"    "]],[4211,4211],[4215,4215]]],[1539689074463,["gjx16@GJXAIOU",[[1,4259,"    "]],[4259,4259],[4263,4263]]],[1539689077966,["gjx16@GJXAIOU",[[-1,4168,"                 "]],[4168,4185],[4168,4168]]],[1539689080396,["gjx16@GJXAIOU",[[-1,4235," "]],[4219,4219],[4218,4218]]],[1539689084479,["gjx16@GJXAIOU",[[-1,4219,"                "]],[4219,4235],[4219,4219]]],[1539689087981,["gjx16@GJXAIOU",[[-1,4251,"                "]],[4251,4267],[4251,4251]]],[1539689091040,["gjx16@GJXAIOU",[[-1,4292,"                "]],[4291,4307],[4291,4291]]],[1539689103868,["gjx16@GJXAIOU",[[1,4320,"  "]],[4320,4320],[4322,4322]]],[1539689105199,["gjx16@GJXAIOU",[[1,4666,"  "]],[4665,4665],[4667,4667]]],[1539689112685,["gjx16@GJXAIOU",[[-1,4825,"--------------------- \n作者：玩人 \n来源：CSDN \n原文：https://blog.csdn.net/jeryjeryjery/article/details/52894756?utm_source=copy \n版权声明：本文为博主原创文章，转载请附上博文链接！"]],[4825,4969],[4825,4825]]],[1539689113389,["gjx16@GJXAIOU",[[-1,4826,"\n"]],[4825,4825],[4824,4824]]],[1539689725651,["gjx16@GJXAIOU",[[1,6004,"****"]],[6004,6004],[6006,6006]]],[1539689727282,["gjx16@GJXAIOU",[[1,6006,"yishagn "]],[6006,6006],[6014,6014]]],[1539689729186,["gjx16@GJXAIOU",[[-1,6006,"yishagn "]],[6014,6014],[6006,6006]]],[1539689730882,["gjx16@GJXAIOU",[[1,6006,"以山海关"]],[6006,6006],[6010,6010]]],[1539689731899,["gjx16@GJXAIOU",[[-1,6007,"山海关"]],[6010,6010],[6007,6007]]],[1539689745762,["gjx16@GJXAIOU",[[1,6007,"上程序的递归方法实现"]],[6007,6007],[6017,6017]]],[1539689747234,["gjx16@GJXAIOU",[[1,6021,"\n"]],[6019,6019],[6020,6020]]],[1539689749481,["gjx16@GJXAIOU",[[1,6020,"~···"]],[6020,6020],[6024,6024]]],[1539689750461,["gjx16@GJXAIOU",[[-1,6020,"~···"]],[6024,6024],[6020,6020]]],[1539689750585,["gjx16@GJXAIOU",[[-1,6021,"\n"]],[6020,6020],[6019,6019]]],[1539689750923,["gjx16@GJXAIOU",[[1,6021,"\n"]],[6019,6019],[6020,6020]]],[1539689752807,["gjx16@GJXAIOU",[[1,6020,"```"]],[6020,6020],[6023,6023]]],[1539689752849,["gjx16@GJXAIOU",[[1,6023,"language\n```\n"]],[6023,6023],[6023,6031]]],[1539689753780,["gjx16@GJXAIOU",[[-1,6023,"language"],[1,6031,"c"]],[6023,6031],[6024,6024]]],[1539689754002,["gjx16@GJXAIOU",[[1,6025,"\n"]],[6024,6024],[6025,6025]]],[1539689754155,["gjx16@GJXAIOU",[[1,6026,"\n"]],[6025,6025],[6026,6026]]],[1539689754333,["gjx16@GJXAIOU",[[1,6027,"\n"]],[6026,6026],[6027,6027]]],[1539689754492,["gjx16@GJXAIOU",[[1,6028,"\n"]],[6027,6027],[6028,6028]]],[1539689790578,["gjx16@GJXAIOU",[[-1,5840,"ian"]],[5843,5843],[5840,5840]]],[1539689791822,["gjx16@GJXAIOU",[[1,5840,"ain"]],[5840,5840],[5843,5843]]],[1539689808149,["gjx16@GJXAIOU",[[-1,5434,"int main()"]],[5444,5444],[5434,5434]]],[1539689808778,["gjx16@GJXAIOU",[[-1,5434,"\n"]],[5434,5434],[5433,5433]]],[1539689844100,["gjx16@GJXAIOU",[[1,6014,"int bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}"]],[6014,6014],[6446,6446]]],[1539689850298,["gjx16@GJXAIOU",[[-1,6066,"le"]],[6068,6068],[6066,6066]]],[1539689851844,["gjx16@GJXAIOU",[[1,6066,"if"]],[6066,6066],[6068,6068]]],[1539689853803,["gjx16@GJXAIOU",[[-1,6063,"whiif"]],[6068,6068],[6063,6063]]],[1539689854526,["gjx16@GJXAIOU",[[1,6063,"if"]],[6063,6063],[6065,6065]]],[1539689863607,["gjx16@GJXAIOU",[[1,6021,"_sec"]],[6021,6021],[6025,6025]]],[1539689866477,["gjx16@GJXAIOU",[[-1,6022,"sec"]],[6025,6025],[6022,6022]]],[1539689868684,["gjx16@GJXAIOU",[[1,6022,"rec"]],[6022,6022],[6025,6025]]],[1539689943138,["gjx16@GJXAIOU",[[-1,6150,"//中间切一刀，正好等于中间数"]],[6150,6165],[6150,6150]]],[1539689972071,["gjx16@GJXAIOU",[[1,6082,"//di"]],[6082,6082],[6086,6086]]],[1539689972762,["gjx16@GJXAIOU",[[-1,6084,"di"]],[6086,6086],[6084,6084]]],[1539689981448,["gjx16@GJXAIOU",[[1,6084,"递归终止条件"]],[6084,6084],[6090,6090]]],[1539689994026,["gjx16@GJXAIOU",[[-1,6231,"//如果要找的数大于array[mid]，那么就在下半部分继续查找"]],[6231,6264],[6231,6231]]],[1539690003705,["gjx16@GJXAIOU",[[-1,6256,"low = mid +1"]],[6268,6268],[6256,6256]]],[1539690014860,["gjx16@GJXAIOU",[[1,6256,"return bin_sec()"]],[6256,6256],[6272,6272]]],[1539690015316,["gjx16@GJXAIOU",[[1,6273,";"]],[6272,6272],[6273,6273]]],[1539690015891,["gjx16@GJXAIOU",[[-1,6273,";"]],[6273,6273],[6272,6272]]],[1539690021588,["gjx16@GJXAIOU",[[1,6271,"array,min"]],[6271,6271],[6280,6280]]],[1539690022164,["gjx16@GJXAIOU",[[-1,6279,"n"]],[6280,6280],[6279,6279]]],[1539690027901,["gjx16@GJXAIOU",[[1,6279,"d +1,high"]],[6279,6279],[6288,6288]]],[1539690064740,["gjx16@GJXAIOU",[[-1,6311,"找的数小于array[mid]，那么就在上半部分继续查找"]],[6339,6339],[6311,6311]]],[1539690066049,["gjx16@GJXAIOU",[[-1,6306,"//如果要"]],[6311,6311],[6306,6306]]],[1539690075105,["gjx16@GJXAIOU",[[-1,6331,"high = mid -1"]],[6344,6344],[6331,6331]]],[1539690082859,["gjx16@GJXAIOU",[[1,6331,"return bin_sec()"]],[6331,6331],[6347,6347]]],[1539690094468,["gjx16@GJXAIOU",[[1,6346,"array,low,mid -1"]],[6346,6346],[6362,6362]]],[1539690108782,["gjx16@GJXAIOU",[[1,6364,"//在上半部分查找"]],[6364,6364],[6373,6373]]],[1539690112949,["gjx16@GJXAIOU",[[1,6290,"、、"]],[6290,6290],[6292,6292]]],[1539690113789,["gjx16@GJXAIOU",[[-1,6290,"、、"]],[6292,6292],[6290,6290]]],[1539690118392,["gjx16@GJXAIOU",[[1,6290,"//在下班"]],[6290,6290],[6295,6295]]],[1539690119105,["gjx16@GJXAIOU",[[-1,6293,"下班"]],[6295,6295],[6293,6293]]],[1539690122977,["gjx16@GJXAIOU",[[1,6293,"下半部分"]],[6293,6293],[6297,6297]]],[1539690126519,["gjx16@GJXAIOU",[[1,6297,"查找"]],[6297,6297],[6299,6299]]],[1539690182001,["gjx16@GJXAIOU",[[1,6436,"\n"]],[6432,6432],[6433,6433]]],[1539690182492,["gjx16@GJXAIOU",[[1,6437,"\n"]],[6433,6433],[6434,6434]]],[1539690183225,["gjx16@GJXAIOU",[[1,6438,"\n"]],[6434,6434],[6435,6435]]],[1539690185685,["gjx16@GJXAIOU",[[1,6435,"int"]],[6435,6435],[6438,6438]]],[1539690186946,["gjx16@GJXAIOU",[[-1,6435,"int"]],[6438,6438],[6435,6435]]],[1539690189840,["gjx16@GJXAIOU",[[1,6435,"int main()"]],[6435,6435],[6445,6445]]],[1539690190572,["gjx16@GJXAIOU",[[1,6449,"\n"]],[6445,6445],[6446,6446]]],[1539690191512,["gjx16@GJXAIOU",[[1,6446,"{}"]],[6446,6446],[6448,6448]]],[1539690192530,["gjx16@GJXAIOU",[[1,6447,"\n"]],[6447,6447],[6448,6448]]],[1539690192677,["gjx16@GJXAIOU",[[1,6448,"\n"]],[6448,6448],[6449,6449]]],[1539690192829,["gjx16@GJXAIOU",[[1,6449,"\n"]],[6449,6449],[6450,6450]]],[1539690202938,["gjx16@GJXAIOU",[[1,6448,"  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;"]],[6448,6448],[6593,6593]]],[1539690205690,["gjx16@GJXAIOU",[[-1,6495,"\n"]],[6495,6495],[6494,6494]]],[1539690222748,["gjx16@GJXAIOU",[[1,6563,"_rec"]],[6563,6563],[6567,6567]]],[1539690229179,["gjx16@GJXAIOU",[[-1,6602,"\n"]],[6601,6601],[6600,6600]]],[1539690285306,["gjx16@GJXAIOU",[[1,6620,"\n"]],[6618,6618],[6619,6619]]],[1539690285494,["gjx16@GJXAIOU",[[1,6621,"\n"]],[6619,6619],[6620,6620]]],[1539690286402,["gjx16@GJXAIOU",[[1,6622,"\n"]],[6620,6620],[6621,6621]]],[1539690288036,["gjx16@GJXAIOU",[[1,6623,"\n"]],[6621,6621],[6622,6622]]]],null,"gjx16@GJXAIOU"],["70091fb0-d1e1-4e99-a434-7f1e8a539be2",1539771884327,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n\n程序有问题，附上其他的链接；\n[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n**CSDN上快速排序算法：**\n- 法一；定轴法；\n（一）定轴法:\n1.备份对轴(首记录，即第一个元素)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n4.重复上述过程，直到left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n\n```c\n\nvoid quickSort(int* A,int first,int last)\n{        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)     //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;       //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];     //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t//依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n\n```\n\n二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n```c\nvoid quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;           //左边第一个，因为第一个已经用pivot保存了\n\t    int high=r;          //右边\n\t    int pivot = s[l];     //第一个，已被保存\n        while(low<high)       //当左小于右,当相等的时候会跳出循环\n          {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n          }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n\n```\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n**以上程序的递归方法实现**\n```c\nint bin_rec(int *array,int low,int high,int key)\n{\n  if(low <= high)//递归终止条件\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])\n          {\n            return mid;\n          }else if(key > array[mid])\n          {\n            return bin_sec(array,mid +1,high);//在下半部分查找\n          }else\n          {\n            return bin_sec(array,low,mid -1);//在上半部分查找\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin_rec(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n## 单向链表的实现\n\n\n\n\n\n## 单项链表的逆置\n\n\n",[[1539771832402,["gjx16@GJXAIOU",[[1,6620,"```"]],[6620,6620],[6623,6623]]],[1539771832437,["gjx16@GJXAIOU",[[1,6623,"language\n```\n"]],[6623,6623],[6623,6631]]],[1539771835426,["gjx16@GJXAIOU",[[-1,6623,"language"],[1,6631,"c"]],[6623,6631],[6624,6624]]],[1539771835704,["gjx16@GJXAIOU",[[1,6625,"\n"]],[6624,6624],[6625,6625]]]],null,"gjx16@GJXAIOU"],["636629ad-ecd1-4a16-90d6-d257d2e33f0c",1539847407188,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n\n程序有问题，附上其他的链接；\n[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n**CSDN上快速排序算法：**\n- 法一；定轴法；\n（一）定轴法:\n1.备份对轴(首记录，即第一个元素)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n4.重复上述过程，直到left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n\n```c\n\nvoid quickSort(int* A,int first,int last)\n{        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)     //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;       //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];     //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t//依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n\n```\n\n二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n```c\nvoid quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;           //左边第一个，因为第一个已经用pivot保存了\n\t    int high=r;          //右边\n\t    int pivot = s[l];     //第一个，已被保存\n        while(low<high)       //当左小于右,当相等的时候会跳出循环\n          {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n          }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n\n```\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n**以上程序的递归方法实现**\n```c\nint bin_rec(int *array,int low,int high,int key)\n{\n  if(low <= high)//递归终止条件\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])\n          {\n            return mid;\n          }else if(key > array[mid])\n          {\n            return bin_sec(array,mid +1,high);//在下半部分查找\n          }else\n          {\n            return bin_sec(array,low,mid -1);//在上半部分查找\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin_rec(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n## 单向链表的实现\n\n```c\n\n```\n\n\n\n\n## 单项链表的逆置\n\n\n",[[1539847360868,["gjx16@GJXAIOU",[[1,6620,"\n"]],[6619,6619],[6620,6620]]],[1539847363695,["gjx16@GJXAIOU",[[1,6620,"1."]],[6620,6620],[6622,6622]]],[1539847533152,["gjx16@GJXAIOU",[[1,6622,"单项"]],[6622,6622],[6624,6624]]],[1539847535066,["gjx16@GJXAIOU",[[-1,6623,"项"]],[6624,6624],[6623,6623]]],[1539847545194,["gjx16@GJXAIOU",[[1,6623,"单向链表的实现"]],[6623,6623],[6630,6630]]],[1539847548425,["gjx16@GJXAIOU",[[-1,6623,"单"]],[6623,6623],[6622,6622]]],[1539847560664,["gjx16@GJXAIOU",[[1,6607,"@toc"]],[6607,6607],[6611,6611]]],[1539847566041,["gjx16@GJXAIOU",[[-1,6607,"@toc"]],[6611,6611],[6607,6607]]],[1539847570862,["gjx16@GJXAIOU",[[1,6611,"四、"]],[6611,6611],[6613,6613]]],[1539847576970,["gjx16@GJXAIOU",[[-1,6629,"实现"]],[6631,6631],[6629,6629]]],[1539847579549,["gjx16@GJXAIOU",[[1,6629,"定义："]],[6629,6629],[6632,6632]]],[1539847585148,["gjx16@GJXAIOU",[[1,6624,"**"],[1,6632,"**"]],[6624,6632],[6624,6636]]],[1539847587444,["gjx16@GJXAIOU",[[1,6637,"\n"]],[6636,6636],[6637,6637]]],[1539848115729,["gjx16@GJXAIOU",[[1,6622,"\n"]],[6621,6621],[6622,6622]]],[1539848123601,["gjx16@GJXAIOU",[[1,6622,"1.引入：数字"]],[6622,6622],[6629,6629]]],[1539848124615,["gjx16@GJXAIOU",[[-1,6627,"数字"]],[6629,6629],[6627,6627]]],[1539848148129,["gjx16@GJXAIOU",[[1,6627,"在一个数组中插入或者删除一个数据会造成同时能够回"]],[6627,6627],[6651,6651]]],[1539848149303,["gjx16@GJXAIOU",[[-1,6648,"能够回"]],[6651,6651],[6648,6648]]],[1539848159493,["gjx16@GJXAIOU",[[1,6648,"移动大量的数据，"]],[6648,6648],[6656,6656]]],[1539848198177,["gjx16@GJXAIOU",[[-1,6622,"1."]],[6624,6624],[6622,6622]]],[1539848201968,["gjx16@GJXAIOU",[[1,6655,"\n"]],[6655,6655],[6656,6656]]],[1539848257842,["gjx16@GJXAIOU",[[1,6656," "]],[6656,6656],[6657,6657]]],[1539848284296,["gjx16@GJXAIOU",[[1,6656,"\n"]],[6655,6655],[6656,6656]]],[1539848285827,["gjx16@GJXAIOU",[[1,6656,"****"]],[6656,6656],[6658,6658]]],[1539848289555,["gjx16@GJXAIOU",[[1,6658,"链式存储；"]],[6658,6658],[6663,6663]]],[1539848290776,["gjx16@GJXAIOU",[[-1,6662,"；"]],[6663,6663],[6662,6662]]],[1539848291612,["gjx16@GJXAIOU",[[1,6662,"："]],[6662,6662],[6663,6663]]],[1539848293688,["gjx16@GJXAIOU",[[1,6666,"\n"]],[6665,6665],[6666,6666]]],[1539848305592,["gjx16@GJXAIOU",[[1,6666,"- 存储单元可以"]],[6666,6666],[6674,6674]]],[1539848313716,["gjx16@GJXAIOU",[[1,6674,"是连续的或者非连续的"]],[6674,6674],[6684,6684]]],[1539848315328,["gjx16@GJXAIOU",[[1,6685,"- \n"]],[6684,6684],[6687,6687]]],[1539848326606,["gjx16@GJXAIOU",[[1,6687,"粮食存储"]],[6687,6687],[6691,6691]]],[1539848328088,["gjx16@GJXAIOU",[[-1,6687,"粮食存储"]],[6691,6691],[6687,6687]]],[1539848341104,["gjx16@GJXAIOU",[[1,6687,"链式存储中的元素存储时间"]],[6687,6687],[6699,6699]]],[1539848342194,["gjx16@GJXAIOU",[[-1,6697,"时间"]],[6699,6699],[6697,6697]]],[1539848365901,["gjx16@GJXAIOU",[[1,6697,"时候除了存储本身信息还要存储一个"]],[6697,6697],[6713,6713]]],[1539848368840,["gjx16@GJXAIOU",[[1,6713,"知识七"]],[6713,6713],[6716,6716]]],[1539848369689,["gjx16@GJXAIOU",[[-1,6715,"七"]],[6716,6716],[6715,6715]]],[1539848396838,["gjx16@GJXAIOU",[[1,6715,"其连接的后面的元素的位置。"]],[6715,6715],[6728,6728]]],[1539848397442,["gjx16@GJXAIOU",[[-1,6727,"。"]],[6728,6728],[6727,6727]]],[1539848399826,["gjx16@GJXAIOU",[[1,6727,"；这里"]],[6727,6727],[6730,6730]]],[1539848400866,["gjx16@GJXAIOU",[[-1,6729,"里"]],[6730,6730],[6729,6729]]],[1539848404743,["gjx16@GJXAIOU",[[1,6729,"两部分数"]],[6729,6729],[6733,6733]]],[1539848405543,["gjx16@GJXAIOU",[[-1,6732,"数"]],[6733,6733],[6732,6732]]],[1539848411551,["gjx16@GJXAIOU",[[1,6732,"的数据成为****"]],[6732,6732],[6739,6739]]],[1539848420178,["gjx16@GJXAIOU",[[1,6739,"结点；"]],[6739,6739],[6742,6742]]],[1539848421082,["gjx16@GJXAIOU",[[-1,6741,"；"]],[6742,6742],[6741,6741]]],[1539848423928,["gjx16@GJXAIOU",[[1,6685,"    "]],[6741,6741],[6745,6745]]],[1539848424818,["gjx16@GJXAIOU",[[-1,6744,"点"]],[6745,6745],[6744,6744]]],[1539848433351,["gjx16@GJXAIOU",[[-1,6685,"    "]],[6689,6689],[6685,6685]]],[1539848439367,["gjx16@GJXAIOU",[[1,6740,"点"]],[6740,6740],[6741,6741]]],[1539848443613,["gjx16@GJXAIOU",[[1,6743,"；"]],[6743,6743],[6744,6744]]],[1539848444680,["gjx16@GJXAIOU",[[1,6745,"- \n"]],[6744,6744],[6747,6747]]],[1539848452039,["gjx16@GJXAIOU",[[1,6747,"****"]],[6747,6747],[6749,6749]]],[1539848456651,["gjx16@GJXAIOU",[[1,6749,"数据域："]],[6749,6749],[6753,6753]]],[1539848472171,["gjx16@GJXAIOU",[[1,6755," 一个结点中存储的数据元素"]],[6755,6755],[6768,6768]]],[1539848477872,["gjx16@GJXAIOU",[[1,6769,"- \n"]],[6768,6768],[6771,6771]]],[1539848480638,["gjx16@GJXAIOU",[[1,6771,"****"]],[6771,6771],[6773,6773]]],[1539848485155,["gjx16@GJXAIOU",[[1,6773,"指针域："]],[6773,6773],[6777,6777]]],[1539848508014,["gjx16@GJXAIOU",[[1,6779," 存储连接后面存储位置的域"]],[6779,6779],[6792,6792]]],[1539848510523,["gjx16@GJXAIOU",[[1,6793,"- \n"]],[6792,6792],[6795,6795]]],[1539848512463,["gjx16@GJXAIOU",[[1,6795,"****"]],[6795,6795],[6797,6797]]],[1539848514492,["gjx16@GJXAIOU",[[1,6797,"量表"]],[6797,6797],[6799,6799]]],[1539848515615,["gjx16@GJXAIOU",[[-1,6797,"量表"]],[6799,6799],[6797,6797]]],[1539848522397,["gjx16@GJXAIOU",[[1,6797,"链表："]],[6797,6797],[6800,6800]]],[1539848540532,["gjx16@GJXAIOU",[[1,6802," n个结点的存储"]],[6802,6802],[6810,6810]]],[1539848574602,["gjx16@GJXAIOU",[[1,6810,"映像链接而成"]],[6810,6810],[6816,6816]]],[1539848577289,["gjx16@GJXAIOU",[[1,6817,"- \n"]],[6816,6816],[6819,6819]]],[1539848577535,["gjx16@GJXAIOU",[[-1,6817,"- "]],[6819,6819],[6818,6818]]],[1539848588801,["gjx16@GJXAIOU",[[1,6835,"\n"]],[6834,6834],[6835,6835]]],[1539848605453,["gjx16@GJXAIOU",[[1,6835,"整个链表必须从头结点开始"]],[6835,6835],[6847,6847]]],[1539848631074,["gjx16@GJXAIOU",[[1,6847,"进行，头结点的指针指向了下一个结点的位置，最后一个叫"]],[6847,6847],[6873,6873]]],[1539848631863,["gjx16@GJXAIOU",[[-1,6872,"叫"]],[6873,6873],[6872,6872]]],[1539848642867,["gjx16@GJXAIOU",[[1,6872," 结点的指针指向NULL"]],[6872,6872],[6884,6884]]],[1539848645911,["gjx16@GJXAIOU",[[1,6885,"\n"]],[6884,6884],[6885,6885]]],[1539848672023,["gjx16@GJXAIOU",[[-1,6818," 1.**单向链表的定义：**"]],[6818,6833],[6818,6818]]],[1539848673696,["gjx16@GJXAIOU",[[1,6656,"\n"]],[6655,6655],[6656,6656]]],[1539848673824,["gjx16@GJXAIOU",[[1,6657,"\n"]],[6656,6656],[6657,6657]]],[1539848675499,["gjx16@GJXAIOU",[[1,6657," 1.**单向链表的定义：**、"]],[6657,6657],[6673,6673]]],[1539848675578,["gjx16@GJXAIOU",[[1,6674," \n"]],[6673,6673],[6675,6675]]],[1539848675644,["gjx16@GJXAIOU",[[-1,6674," "],[1,6675,"\n"]],[6675,6675],[6675,6675]]],[1539848676946,["gjx16@GJXAIOU",[[-1,6675,"\n"]],[6675,6675],[6674,6674]]],[1539848677176,["gjx16@GJXAIOU",[[-1,6674,"\n"]],[6674,6674],[6673,6673]]],[1539848677488,["gjx16@GJXAIOU",[[-1,6672,"、"]],[6673,6673],[6672,6672]]],[1539848678570,["gjx16@GJXAIOU",[[1,6673," \n"]],[6672,6672],[6674,6674]]],[1539848678712,["gjx16@GJXAIOU",[[-1,6673," "],[1,6674,"\n"]],[6674,6674],[6674,6674]]],[1539848682727,["gjx16@GJXAIOU",[[-1,6838,"\n"]],[6838,6838],[6837,6837]]],[1539848682864,["gjx16@GJXAIOU",[[-1,6837,"\n"]],[6837,6837],[6836,6836]]],[1539848768841,["gjx16@GJXAIOU",[[1,6893,"#include<>"]],[6893,6893],[6903,6903]]],[1539848772665,["gjx16@GJXAIOU",[[1,6902,"atdio.h"]],[6902,6902],[6909,6909]]],[1539848775458,["gjx16@GJXAIOU",[[-1,6902,"a"]],[6903,6903],[6902,6902]]],[1539848775787,["gjx16@GJXAIOU",[[1,6902,"s"]],[6902,6902],[6903,6903]]],[1539848779263,["gjx16@GJXAIOU",[[1,6911,"\n"]],[6910,6910],[6911,6911]]],[1539848780620,["gjx16@GJXAIOU",[[1,6911,"?#"]],[6911,6911],[6913,6913]]],[1539848782030,["gjx16@GJXAIOU",[[-1,6911,"?#"]],[6913,6913],[6911,6911]]],[1539848785539,["gjx16@GJXAIOU",[[1,6911,"#inlcude"]],[6911,6911],[6919,6919]]],[1539848786676,["gjx16@GJXAIOU",[[1,6919,"<>"]],[6919,6919],[6921,6921]]],[1539848793153,["gjx16@GJXAIOU",[[1,6920,"stdlib.h"]],[6920,6920],[6928,6928]]],[1539848795344,["gjx16@GJXAIOU",[[1,6930,"\n"]],[6929,6929],[6930,6930]]],[1539848795585,["gjx16@GJXAIOU",[[1,6931,"\n"]],[6930,6930],[6931,6931]]],[1539848799561,["gjx16@GJXAIOU",[[1,6931,"strut"]],[6931,6931],[6936,6936]]],[1539848802426,["gjx16@GJXAIOU",[[-1,6935,"t"]],[6936,6936],[6935,6935]]],[1539848807065,["gjx16@GJXAIOU",[[1,6935,"ct liat"]],[6935,6935],[6942,6942]]],[1539848807999,["gjx16@GJXAIOU",[[-1,6940,"at"]],[6942,6942],[6940,6940]]],[1539848808880,["gjx16@GJXAIOU",[[1,6940,"st"]],[6940,6940],[6942,6942]]],[1539848809735,["gjx16@GJXAIOU",[[1,6943,"\n"]],[6942,6942],[6943,6943]]],[1539848814104,["gjx16@GJXAIOU",[[1,6943,"{};"]],[6943,6943],[6946,6946]]],[1539848816463,["gjx16@GJXAIOU",[[1,6944,"\n"]],[6944,6944],[6945,6945]]],[1539848816607,["gjx16@GJXAIOU",[[1,6945,"\n"]],[6945,6945],[6946,6946]]],[1539848820271,["gjx16@GJXAIOU",[[1,6931,"\n"]],[6930,6930],[6931,6931]]],[1539848829678,["gjx16@GJXAIOU",[[1,6931,"//一个结点"]],[6931,6931],[6937,6937]]],[1539848838197,["gjx16@GJXAIOU",[[1,6952,"  intdate"]],[6952,6952],[6961,6961]]],[1539848839631,["gjx16@GJXAIOU",[[-1,6957,"date"]],[6961,6961],[6957,6957]]],[1539848844776,["gjx16@GJXAIOU",[[1,6957," date;//"]],[6957,6957],[6965,6965]]],[1539848852450,["gjx16@GJXAIOU",[[1,6965,"数据域"]],[6965,6965],[6968,6968]]],[1539848853079,["gjx16@GJXAIOU",[[1,6969,"  \n"]],[6968,6968],[6971,6971]]],[1539848861850,["gjx16@GJXAIOU",[[1,6971,"struct liat"]],[6971,6971],[6982,6982]]],[1539848862655,["gjx16@GJXAIOU",[[-1,6980,"at"]],[6982,6982],[6980,6980]]],[1539848871034,["gjx16@GJXAIOU",[[1,6980,"st *next = "]],[6980,6980],[6991,6991]]],[1539848872726,["gjx16@GJXAIOU",[[-1,6988," = "]],[6991,6991],[6988,6988]]],[1539848879092,["gjx16@GJXAIOU",[[1,6988,";//指针域"]],[6988,6988],[6994,6994]]],[1539849113639,["gjx16@GJXAIOU",[[1,6998,"\n"]],[6997,6997],[6998,6998]]],[1539849113783,["gjx16@GJXAIOU",[[1,6999,"\n"]],[6998,6998],[6999,6999]]],[1539849114215,["gjx16@GJXAIOU",[[1,7000,"\n"]],[6999,6999],[7000,7000]]],[1539849133730,["gjx16@GJXAIOU",[[1,7000,"in"]],[7000,7000],[7002,7002]]],[1539849134974,["gjx16@GJXAIOU",[[-1,7000,"in"]],[7002,7002],[7000,7000]]],[1539849138702,["gjx16@GJXAIOU",[[1,7000,"int main()"]],[7000,7000],[7010,7010]]],[1539849143329,["gjx16@GJXAIOU",[[1,7009,"voif"]],[7009,7009],[7013,7013]]],[1539849144199,["gjx16@GJXAIOU",[[-1,7012,"f"]],[7013,7013],[7012,7012]]],[1539849146015,["gjx16@GJXAIOU",[[1,7012,"d  "]],[7012,7012],[7015,7015]]],[1539849147526,["gjx16@GJXAIOU",[[-1,7013,"  "]],[7015,7015],[7013,7013]]],[1539849149543,["gjx16@GJXAIOU",[[1,7015,"\n"]],[7014,7014],[7015,7015]]],[1539849152081,["gjx16@GJXAIOU",[[1,7015,"{}"]],[7015,7015],[7017,7017]]],[1539849153209,["gjx16@GJXAIOU",[[1,7016,"\n"]],[7016,7016],[7017,7017]]],[1539849153398,["gjx16@GJXAIOU",[[1,7017,"\n"]],[7017,7017],[7018,7018]]],[1539849153566,["gjx16@GJXAIOU",[[1,7018,"\n"]],[7018,7018],[7019,7019]]],[1539849167672,["gjx16@GJXAIOU",[[1,7017,"  struct *"]],[7017,7017],[7027,7027]]],[1539849170110,["gjx16@GJXAIOU",[[-1,7025," *"]],[7027,7027],[7025,7025]]],[1539849179417,["gjx16@GJXAIOU",[[1,7025," list *fird"]],[7025,7025],[7036,7036]]],[1539849180079,["gjx16@GJXAIOU",[[-1,7035,"d"]],[7036,7036],[7035,7035]]],[1539849185930,["gjx16@GJXAIOU",[[1,7035,"st = malloc();"]],[7035,7035],[7049,7049]]],[1539849190217,["gjx16@GJXAIOU",[[1,7047,"sizo"]],[7047,7047],[7051,7051]]],[1539849191440,["gjx16@GJXAIOU",[[-1,7050,"o"]],[7051,7051],[7050,7050]]],[1539849193627,["gjx16@GJXAIOU",[[1,7050,"eof("]],[7050,7050],[7054,7054]]],[1539849193728,["gjx16@GJXAIOU",[[1,7055,")"]],[7054,7054],[7055,7055]]],[1539849200154,["gjx16@GJXAIOU",[[1,7054,"struct lies"]],[7054,7054],[7065,7065]]],[1539849200823,["gjx16@GJXAIOU",[[-1,7063,"es"]],[7065,7065],[7063,7063]]],[1539849201281,["gjx16@GJXAIOU",[[1,7063,"sre"]],[7063,7063],[7066,7066]]],[1539849202078,["gjx16@GJXAIOU",[[-1,7064,"re"]],[7066,7066],[7064,7064]]],[1539849202890,["gjx16@GJXAIOU",[[1,7064,"t"]],[7064,7064],[7065,7065]]],[1539849209769,["gjx16@GJXAIOU",[[1,7066,", 1"]],[7066,7066],[7069,7069]]],[1539849212400,["gjx16@GJXAIOU",[[1,7017,"\n"]],[7016,7016],[7017,7017]]],[1539849213711,["gjx16@GJXAIOU",[[1,7018,"\n"]],[7017,7017],[7018,7018]]],[1539849222354,["gjx16@GJXAIOU",[[1,7018,"  //创建三个结点"]],[7018,7018],[7028,7028]]],[1539849224850,["gjx16@GJXAIOU",[[1,7084,"  "]],[7084,7084],[7086,7086]]],[1539849225768,["gjx16@GJXAIOU",[[-1,7084,"  "],[1,7086,"\n"]],[7086,7086],[7085,7085]]],[1539849226571,["gjx16@GJXAIOU",[[1,7085,"  "]],[7085,7085],[7087,7087]]],[1539849227017,["gjx16@GJXAIOU",[[-1,7085,"  "],[1,7087,"\n"]],[7087,7087],[7086,7086]]],[1539849229203,["gjx16@GJXAIOU",[[1,7086,"  、、"]],[7086,7086],[7090,7090]]],[1539849230015,["gjx16@GJXAIOU",[[-1,7088,"、、"]],[7090,7090],[7088,7088]]],[1539849236667,["gjx16@GJXAIOU",[[1,7088,"//将单个"]],[7088,7088],[7093,7093]]],[1539849237849,["gjx16@GJXAIOU",[[-1,7091,"单个"]],[7093,7093],[7091,7091]]],[1539849248942,["gjx16@GJXAIOU",[[1,7091,"三个结点连接起来"]],[7091,7091],[7099,7099]]],[1539849261182,["gjx16@GJXAIOU",[[1,7084,"  struct list *first = malloc(sizeof(struct list), 1);"]],[7084,7084],[7138,7138]]],[1539849262560,["gjx16@GJXAIOU",[[1,7139,"  \n"]],[7138,7138],[7141,7141]]],[1539849263942,["gjx16@GJXAIOU",[[1,7141,"struct list *first = malloc(sizeof(struct list), 1);"]],[7141,7141],[7193,7193]]],[1539849268355,["gjx16@GJXAIOU",[[1,7083,"、、"]],[7083,7083],[7085,7085]]],[1539849269542,["gjx16@GJXAIOU",[[-1,7083,"、、"]],[7085,7085],[7083,7083]]],[1539849282059,["gjx16@GJXAIOU",[[1,7083,"//在堆中间创建一个结点"]],[7083,7083],[7095,7095]]],[1539849289310,["gjx16@GJXAIOU",[[-1,7111,"first"]],[7116,7116],[7111,7111]]],[1539849293792,["gjx16@GJXAIOU",[[1,7111,"seconf"]],[7111,7111],[7117,7117]]],[1539849294864,["gjx16@GJXAIOU",[[-1,7116,"f"]],[7117,7117],[7116,7116]]],[1539849295033,["gjx16@GJXAIOU",[[1,7116,"d"]],[7116,7116],[7117,7117]]],[1539849298597,["gjx16@GJXAIOU",[[-1,7167,"first"]],[7172,7172],[7167,7167]]],[1539849300857,["gjx16@GJXAIOU",[[1,7167,"third"]],[7167,7167],[7172,7172]]],[1539849309086,["gjx16@GJXAIOU",[[1,7222,"  \n"]],[7221,7221],[7224,7224]]],[1539849312273,["gjx16@GJXAIOU",[[1,7224,"firdt"]],[7224,7224],[7229,7229]]],[1539849313294,["gjx16@GJXAIOU",[[-1,7227,"dt"]],[7229,7229],[7227,7227]]],[1539849315792,["gjx16@GJXAIOU",[[1,7227,"st -"]],[7227,7227],[7231,7231]]],[1539849319790,["gjx16@GJXAIOU",[[-1,7229," -"]],[7231,7231],[7229,7229]]],[1539849321538,["gjx16@GJXAIOU",[[1,7229," ="]],[7229,7229],[7231,7231]]],[1539849322448,["gjx16@GJXAIOU",[[-1,7230,"="]],[7231,7231],[7230,7230]]],[1539849325866,["gjx16@GJXAIOU",[[1,7230,"-> s"]],[7230,7230],[7234,7234]]],[1539849327080,["gjx16@GJXAIOU",[[1,7234,"e"]],[7234,7234],[7235,7235]]],[1539849331230,["gjx16@GJXAIOU",[[-1,7232," se"]],[7235,7235],[7232,7232]]],[1539849335400,["gjx16@GJXAIOU",[[1,7232," nest"]],[7232,7232],[7237,7237]]],[1539849336389,["gjx16@GJXAIOU",[[-1,7235,"st"]],[7237,7237],[7235,7235]]],[1539849346184,["gjx16@GJXAIOU",[[1,7235,"xt = second;"]],[7235,7235],[7247,7247]]],[1539849346897,["gjx16@GJXAIOU",[[1,7248,"  \n"]],[7247,7247],[7250,7250]]],[1539849349650,["gjx16@GJXAIOU",[[1,7250,"seconf"]],[7250,7250],[7256,7256]]],[1539849350542,["gjx16@GJXAIOU",[[-1,7255,"f"]],[7256,7256],[7255,7255]]],[1539849361753,["gjx16@GJXAIOU",[[1,7255,"d -> next = rhird"]],[7255,7255],[7272,7272]]],[1539849363437,["gjx16@GJXAIOU",[[-1,7267,"rhird"]],[7272,7272],[7267,7267]]],[1539849365800,["gjx16@GJXAIOU",[[1,7267,"third;"]],[7267,7267],[7273,7273]]],[1539849366336,["gjx16@GJXAIOU",[[1,7274,"  \n"]],[7273,7273],[7276,7276]]],[1539849384915,["gjx16@GJXAIOU",[[1,7276,"third -> next = NULL;"]],[7276,7276],[7297,7297]]],[1539849387686,["gjx16@GJXAIOU",[[1,7298,"  \n"]],[7297,7297],[7300,7300]]],[1539849388118,["gjx16@GJXAIOU",[[-1,7298,"  "],[1,7300,"\n"]],[7300,7300],[7299,7299]]],[1539849389431,["gjx16@GJXAIOU",[[1,7300,"\n"]],[7299,7299],[7300,7300]]],[1539849392672,["gjx16@GJXAIOU",[[1,7300,"  return -"]],[7300,7300],[7310,7310]]],[1539849393521,["gjx16@GJXAIOU",[[-1,7309,"-"]],[7310,7310],[7309,7309]]],[1539849394752,["gjx16@GJXAIOU",[[1,7309,"0;"]],[7309,7309],[7311,7311]]],[1539849455613,["gjx16@GJXAIOU",[[1,7028,"()"]],[7028,7028],[7030,7030]]],[1539849457576,["gjx16@GJXAIOU",[[1,7029,"ye"]],[7029,7029],[7031,7031]]],[1539849458503,["gjx16@GJXAIOU",[[-1,7029,"ye"]],[7031,7031],[7029,7029]]],[1539849462972,["gjx16@GJXAIOU",[[1,7029,"可以通过函数"]],[7029,7029],[7035,7035]]],[1539849466110,["gjx16@GJXAIOU",[[1,7000,"\n"]],[6998,6998],[6999,6999]]],[1539849466278,["gjx16@GJXAIOU",[[1,7001,"\n"]],[6999,6999],[7000,7000]]],[1539849468113,["gjx16@GJXAIOU",[[1,7000,"？、"]],[7000,7000],[7002,7002]]],[1539849468902,["gjx16@GJXAIOU",[[-1,7000,"？、"]],[7002,7002],[7000,7000]]],[1539849469825,["gjx16@GJXAIOU",[[1,7000,"、、"]],[7000,7000],[7002,7002]]],[1539849470504,["gjx16@GJXAIOU",[[-1,7000,"、、"]],[7002,7002],[7000,7000]]],[1539849479225,["gjx16@GJXAIOU",[[1,7000,"//创建一个结点的函数："]],[7000,7000],[7012,7012]]],[1539849479654,["gjx16@GJXAIOU",[[1,7014,"\n"]],[7012,7012],[7013,7013]]],[1539849485930,["gjx16@GJXAIOU",[[1,7013,"structr"]],[7013,7013],[7020,7020]]],[1539849486406,["gjx16@GJXAIOU",[[-1,7019,"r"]],[7020,7020],[7019,7019]]],[1539849500648,["gjx16@GJXAIOU",[[1,7019," list *create_list()"]],[7019,7019],[7039,7039]]],[1539849501558,["gjx16@GJXAIOU",[[1,7041,"\n"]],[7039,7039],[7040,7040]]],[1539849502480,["gjx16@GJXAIOU",[[1,7040,"{}"]],[7040,7040],[7042,7042]]],[1539849503670,["gjx16@GJXAIOU",[[1,7041,"\n"]],[7041,7041],[7042,7042]]],[1539849503832,["gjx16@GJXAIOU",[[1,7042,"\n"]],[7042,7042],[7043,7043]]],[1539849503989,["gjx16@GJXAIOU",[[1,7043,"\n"]],[7043,7043],[7044,7044]]],[1539849505767,["gjx16@GJXAIOU",[[1,7042,"  "]],[7042,7042],[7044,7044]]],[1539849507539,["gjx16@GJXAIOU",[[1,7044,"s"]],[7044,7044],[7045,7045]]],[1539849508070,["gjx16@GJXAIOU",[[-1,7044,"s"]],[7045,7045],[7044,7044]]],[1539849521464,["gjx16@GJXAIOU",[[1,7044,"return calloc();"]],[7044,7044],[7060,7060]]],[1539849525393,["gjx16@GJXAIOU",[[1,7058,"szieof("]],[7058,7058],[7065,7065]]],[1539849525485,["gjx16@GJXAIOU",[[1,7066,")"]],[7065,7065],[7066,7066]]],[1539849530803,["gjx16@GJXAIOU",[[1,7065,"struct list"]],[7065,7065],[7076,7076]]],[1539849536776,["gjx16@GJXAIOU",[[1,7077,",1"]],[7077,7077],[7079,7079]]],[1539849540318,["gjx16@GJXAIOU",[[-1,7082,"\n"]],[7082,7082],[7081,7081]]],[1539849551574,["gjx16@GJXAIOU",[[-1,7145,"m"]],[7146,7146],[7145,7145]]],[1539849551689,["gjx16@GJXAIOU",[[1,7145,"c"]],[7145,7145],[7146,7146]]],[1539849553960,["gjx16@GJXAIOU",[[-1,7213,"m"]],[7214,7214],[7213,7213]]],[1539849554112,["gjx16@GJXAIOU",[[1,7213,"c"]],[7213,7213],[7214,7214]]],[1539849555966,["gjx16@GJXAIOU",[[-1,7268,"m"]],[7269,7269],[7268,7268]]],[1539849556096,["gjx16@GJXAIOU",[[1,7268,"c"]],[7268,7268],[7269,7269]]],[1539849566119,["gjx16@GJXAIOU",[[-1,7277,"zeof(struct list), 1)"]],[7298,7298],[7277,7277]]],[1539849568917,["gjx16@GJXAIOU",[[-1,7268,"calloc(si"]],[7277,7277],[7268,7268]]],[1539849613039,["gjx16@GJXAIOU",[[1,7268,"create_lisr"]],[7268,7268],[7279,7279]]],[1539849613525,["gjx16@GJXAIOU",[[-1,7278,"r"]],[7279,7279],[7278,7278]]],[1539849615322,["gjx16@GJXAIOU",[[1,7278,"t()"]],[7278,7278],[7281,7281]]],[1539849742990,["gjx16@GJXAIOU",[[1,7103,"\n"]],[7102,7102],[7103,7103]]],[1539849743126,["gjx16@GJXAIOU",[[1,7104,"\n"]],[7103,7103],[7104,7104]]],[1539849745151,["gjx16@GJXAIOU",[[1,7104,"//"]],[7104,7104],[7106,7106]]],[1539849747852,["gjx16@GJXAIOU",[[1,7106,"遍历"]],[7106,7106],[7108,7108]]],[1539849749453,["gjx16@GJXAIOU",[[-1,7106,"遍历"]],[7108,7108],[7106,7106]]],[1539849756921,["gjx16@GJXAIOU",[[1,7106,"训话遍历链表"]],[7106,7106],[7112,7112]]],[1539849757462,["gjx16@GJXAIOU",[[1,7113,"\n"]],[7112,7112],[7113,7113]]],[1539849757632,["gjx16@GJXAIOU",[[1,7114,"\n"]],[7113,7113],[7114,7114]]],[1539849757806,["gjx16@GJXAIOU",[[1,7115,"\n"]],[7114,7114],[7115,7115]]],[1539849757977,["gjx16@GJXAIOU",[[1,7116,"\n"]],[7115,7115],[7116,7116]]],[1539849758166,["gjx16@GJXAIOU",[[1,7117,"\n"]],[7116,7116],[7117,7117]]],[1539849760461,["gjx16@GJXAIOU",[[-1,7117,"\n"]],[7117,7117],[7116,7116]]],[1539849760588,["gjx16@GJXAIOU",[[-1,7116,"\n"]],[7116,7116],[7115,7115]]],[1539849760757,["gjx16@GJXAIOU",[[-1,7115,"\n"]],[7115,7115],[7114,7114]]],[1539849760911,["gjx16@GJXAIOU",[[-1,7114,"\n"]],[7114,7114],[7113,7113]]],[1539849761053,["gjx16@GJXAIOU",[[-1,7113,"\n"]],[7113,7113],[7112,7112]]],[1539849762485,["gjx16@GJXAIOU",[[-1,7104,"//训话遍历链表"]],[7112,7112],[7104,7104]]],[1539849762629,["gjx16@GJXAIOU",[[-1,7104,"\n"]],[7104,7104],[7103,7103]]],[1539849762805,["gjx16@GJXAIOU",[[-1,7103,"\n"]],[7103,7103],[7102,7102]]],[1539849763509,["gjx16@GJXAIOU",[[-1,7102,"\n"]],[7102,7102],[7101,7101]]],[1539849766214,["gjx16@GJXAIOU",[[1,7085,"\n"]],[7083,7083],[7084,7084]]],[1539849766349,["gjx16@GJXAIOU",[[1,7086,"\n"]],[7084,7084],[7085,7085]]],[1539849766854,["gjx16@GJXAIOU",[[1,7087,"\n"]],[7085,7085],[7086,7086]]],[1539849774040,["gjx16@GJXAIOU",[[1,7086,"//训话"]],[7086,7086],[7090,7090]]],[1539849774960,["gjx16@GJXAIOU",[[-1,7088,"训话"]],[7090,7090],[7088,7088]]],[1539849781433,["gjx16@GJXAIOU",[[1,7088,"循环遍历链表"]],[7088,7088],[7094,7094]]],[1539849781960,["gjx16@GJXAIOU",[[1,7096,"\n"]],[7094,7094],[7095,7095]]],[1539849784654,["gjx16@GJXAIOU",[[1,7097,"\n"]],[7095,7095],[7096,7096]]],[1539849801149,["gjx16@GJXAIOU",[[1,7096,"void traverse()"]],[7096,7096],[7111,7111]]],[1539849805183,["gjx16@GJXAIOU",[[1,7110,"struct"]],[7110,7110],[7116,7116]]],[1539849811815,["gjx16@GJXAIOU",[[1,7116," list *ls"]],[7116,7116],[7125,7125]]],[1539849816318,["gjx16@GJXAIOU",[[1,7128,"\n"]],[7126,7126],[7127,7127]]],[1539849817704,["gjx16@GJXAIOU",[[1,7127,"{}"]],[7127,7127],[7129,7129]]],[1539849818895,["gjx16@GJXAIOU",[[1,7128,"\n"]],[7128,7128],[7129,7129]]],[1539849819061,["gjx16@GJXAIOU",[[1,7129,"\n"]],[7129,7129],[7130,7130]]],[1539849820229,["gjx16@GJXAIOU",[[1,7130,"\n"]],[7130,7130],[7131,7131]]],[1539849821621,["gjx16@GJXAIOU",[[1,7134,"\n"]],[7133,7133],[7134,7134]]],[1539849821790,["gjx16@GJXAIOU",[[1,7135,"\n"]],[7134,7134],[7135,7135]]],[1539849822094,["gjx16@GJXAIOU",[[1,7136,"\n"]],[7135,7135],[7136,7136]]],[1539849825751,["gjx16@GJXAIOU",[[1,7086,"\n"]],[7085,7085],[7086,7086]]],[1539849825886,["gjx16@GJXAIOU",[[1,7087,"\n"]],[7086,7086],[7087,7087]]],[1539849836367,["gjx16@GJXAIOU",[[1,7131,"  struct *lisr"]],[7131,7131],[7145,7145]]],[1539849836917,["gjx16@GJXAIOU",[[-1,7144,"r"]],[7145,7145],[7144,7144]]],[1539849837033,["gjx16@GJXAIOU",[[1,7144,"t"]],[7144,7144],[7145,7145]]],[1539849840029,["gjx16@GJXAIOU",[[-1,7140,"*list"]],[7145,7145],[7140,7140]]],[1539849847479,["gjx16@GJXAIOU",[[1,7140,"list *p = la;"]],[7140,7140],[7153,7153]]],[1539849848116,["gjx16@GJXAIOU",[[-1,7151,"a;"]],[7153,7153],[7151,7151]]],[1539849848967,["gjx16@GJXAIOU",[[1,7151,"a;"]],[7151,7151],[7153,7153]]],[1539849849582,["gjx16@GJXAIOU",[[-1,7151,"a;"]],[7153,7153],[7151,7151]]],[1539849850463,["gjx16@GJXAIOU",[[1,7151,"s;"]],[7151,7151],[7153,7153]]],[1539849850917,["gjx16@GJXAIOU",[[1,7154,"  \n"]],[7153,7153],[7156,7156]]],[1539849855216,["gjx16@GJXAIOU",[[1,7156,"while()"]],[7156,7156],[7163,7163]]],[1539849858440,["gjx16@GJXAIOU",[[1,7162,"p"]],[7162,7162],[7163,7163]]],[1539849863069,["gjx16@GJXAIOU",[[1,7165,"  \n"]],[7164,7164],[7167,7167]]],[1539849864432,["gjx16@GJXAIOU",[[1,7167,"{}"]],[7167,7167],[7169,7169]]],[1539849865902,["gjx16@GJXAIOU",[[1,7168,"\n  \n  \n  "]],[7168,7168],[7177,7177]]],[1539849871849,["gjx16@GJXAIOU",[[1,7171,"  printf();"]],[7171,7171],[7182,7182]]],[1539849875000,["gjx16@GJXAIOU",[[1,7180,"\"\""]],[7180,7180],[7182,7182]]],[1539849878760,["gjx16@GJXAIOU",[[1,7181,"%s"]],[7181,7181],[7183,7183]]],[1539849879790,["gjx16@GJXAIOU",[[-1,7182,"s"]],[7183,7183],[7182,7182]]],[1539849883081,["gjx16@GJXAIOU",[[1,7182,"d\\n"]],[7182,7182],[7185,7185]]],[1539849892328,["gjx16@GJXAIOU",[[1,7186,",p -> a"]],[7186,7186],[7193,7193]]],[1539849893071,["gjx16@GJXAIOU",[[-1,7192,"a"]],[7193,7193],[7192,7192]]],[1539849894576,["gjx16@GJXAIOU",[[1,7192,"date"]],[7192,7192],[7196,7196]]],[1539849897447,["gjx16@GJXAIOU",[[1,7201,"  \n  "]],[7198,7198],[7203,7203]]],[1539849921347,["gjx16@GJXAIOU",[[1,7203,"p = p -> next;  //p指向他"]],[7203,7203],[7225,7225]]],[1539849932267,["gjx16@GJXAIOU",[[1,7225,"对应的下一个结点"]],[7225,7225],[7233,7233]]],[1539849973502,["gjx16@GJXAIOU",[[1,7538,"\n"]],[7536,7536],[7537,7537]]],[1539849973671,["gjx16@GJXAIOU",[[1,7539,"\n"]],[7537,7537],[7538,7538]]],[1539849983657,["gjx16@GJXAIOU",[[1,7538,"  traxerse();"]],[7538,7538],[7551,7551]]],[1539849985752,["gjx16@GJXAIOU",[[1,7549,"d"]],[7549,7549],[7550,7550]]],[1539849986302,["gjx16@GJXAIOU",[[-1,7549,"d"]],[7550,7550],[7549,7549]]],[1539849988431,["gjx16@GJXAIOU",[[1,7549,"first"]],[7549,7549],[7554,7554]]],[1539850025081,["gjx16@GJXAIOU",[[1,7164,"//要保证 "]],[7164,7164],[7170,7170]]],[1539850025749,["gjx16@GJXAIOU",[[-1,7169," "]],[7170,7170],[7169,7169]]],[1539850042577,["gjx16@GJXAIOU",[[1,7169,"最后一个结点指向NULL，否则训话"]],[7169,7169],[7186,7186]]],[1539850043374,["gjx16@GJXAIOU",[[-1,7184,"训话"]],[7186,7186],[7184,7184]]],[1539850045788,["gjx16@GJXAIOU",[[1,7184,"循环"]],[7184,7184],[7186,7186]]],[1539850049649,["gjx16@GJXAIOU",[[1,7186,"无法结束"]],[7186,7186],[7190,7190]]],[1539850139265,["gjx16@GJXAIOU",[[1,7083,"；"]],[7083,7083],[7084,7084]]],[1539850169301,["gjx16@GJXAIOU",[[-1,7570,"x"]],[7571,7571],[7570,7570]]],[1539850170900,["gjx16@GJXAIOU",[[1,7570,"v"]],[7570,7570],[7571,7571]]],[1539850198606,["gjx16@GJXAIOU",[[1,7563,"  \n"]],[7562,7562],[7565,7565]]],[1539850199397,["gjx16@GJXAIOU",[[-1,7563,"  "],[1,7565,"\n"]],[7565,7565],[7564,7564]]],[1539850202294,["gjx16@GJXAIOU",[[1,7564,"  ??"]],[7564,7564],[7568,7568]]],[1539850203180,["gjx16@GJXAIOU",[[-1,7566,"??"]],[7568,7568],[7566,7566]]],[1539850204081,["gjx16@GJXAIOU",[[1,7566,"、、"]],[7566,7566],[7568,7568]]],[1539850204964,["gjx16@GJXAIOU",[[-1,7566,"、、"]],[7568,7568],[7566,7566]]],[1539850205679,["gjx16@GJXAIOU",[[1,7566,"、"]],[7566,7566],[7567,7567]]],[1539850206412,["gjx16@GJXAIOU",[[-1,7566,"、"]],[7567,7567],[7566,7566]]],[1539850212985,["gjx16@GJXAIOU",[[1,7566,"//数据域进行赋值"]],[7566,7566],[7575,7575]]],[1539850213485,["gjx16@GJXAIOU",[[1,7576,"  \n"]],[7575,7575],[7578,7578]]],[1539850215538,["gjx16@GJXAIOU",[[1,7578,"fid"]],[7578,7578],[7581,7581]]],[1539850216260,["gjx16@GJXAIOU",[[-1,7580,"d"]],[7581,7581],[7580,7580]]],[1539850216902,["gjx16@GJXAIOU",[[1,7580,"rdt"]],[7580,7580],[7583,7583]]],[1539850217809,["gjx16@GJXAIOU",[[-1,7581,"dt"]],[7583,7583],[7581,7581]]],[1539850225263,["gjx16@GJXAIOU",[[1,7581,"st -> age"]],[7581,7581],[7590,7590]]],[1539850234763,["gjx16@GJXAIOU",[[-1,7587,"age"]],[7590,7590],[7587,7587]]],[1539850240634,["gjx16@GJXAIOU",[[1,7587,"date = 2;"]],[7587,7587],[7596,7596]]],[1539850241261,["gjx16@GJXAIOU",[[1,7597,"  \n"]],[7596,7596],[7599,7599]]],[1539850244431,["gjx16@GJXAIOU",[[1,7599,"seconf"]],[7599,7599],[7605,7605]]],[1539850244942,["gjx16@GJXAIOU",[[-1,7604,"f"]],[7605,7605],[7604,7604]]],[1539850253247,["gjx16@GJXAIOU",[[1,7604,"d -> date = 3;"]],[7604,7604],[7618,7618]]],[1539850253758,["gjx16@GJXAIOU",[[1,7619,"  \n"]],[7618,7618],[7621,7621]]],[1539850268327,["gjx16@GJXAIOU",[[1,7621,"second ->date - "]],[7621,7621],[7637,7637]]],[1539850268980,["gjx16@GJXAIOU",[[-1,7635,"- "]],[7637,7637],[7635,7635]]],[1539850271761,["gjx16@GJXAIOU",[[1,7635,"= 4;"]],[7635,7635],[7639,7639]]],[1539850280413,["gjx16@GJXAIOU",[[-1,7621,"second"]],[7627,7627],[7621,7621]]],[1539850284424,["gjx16@GJXAIOU",[[1,7621,"third"]],[7621,7621],[7626,7626]]],[1539850334246,["gjx16@GJXAIOU",[[1,6937,"bgaohan"]],[6937,6937],[6944,6944]]],[1539850336051,["gjx16@GJXAIOU",[[-1,6937,"bgaohan"]],[6944,6944],[6937,6937]]],[1539850344721,["gjx16@GJXAIOU",[[1,6937,"包含数据域和指针域"]],[6937,6937],[6946,6946]]],[1539856105696,["gjx16@GJXAIOU",[[1,7098,"\n"]],[7094,7094],[7095,7095]]],[1539856106371,["gjx16@GJXAIOU",[[1,7099,"\n"]],[7095,7095],[7096,7096]]]],null,"gjx16@GJXAIOU"],["3426d88a-a1cc-4333-8c61-6215cedbb401",1539870351031,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n\n程序有问题，附上其他的链接；\n[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n**CSDN上快速排序算法：**\n- 法一；定轴法；\n（一）定轴法:\n1.备份对轴(首记录，即第一个元素)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n4.重复上述过程，直到left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n\n```c\n\nvoid quickSort(int* A,int first,int last)\n{        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)     //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;       //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];     //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t//依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n\n```\n\n二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n```c\nvoid quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;           //左边第一个，因为第一个已经用pivot保存了\n\t    int high=r;          //右边\n\t    int pivot = s[l];     //第一个，已被保存\n        while(low<high)       //当左小于右,当相等的时候会跳出循环\n          {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n          }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n\n```\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n**以上程序的递归方法实现**\n```c\nint bin_rec(int *array,int low,int high,int key)\n{\n  if(low <= high)//递归终止条件\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])\n          {\n            return mid;\n          }else if(key > array[mid])\n          {\n            return bin_sec(array,mid +1,high);//在下半部分查找\n          }else\n          {\n            return bin_sec(array,low,mid -1);//在上半部分查找\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin_rec(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n## 四、单向链表的实现\n\n引入：在一个数组中插入或者删除一个数据会造成同时移动大量的数据，\n\n\n 1.**单向链表的定义：**\n\n\n**链式存储：**\n- 存储单元可以是连续的或者非连续的\n- 链式存储中的元素存储时候除了存储本身信息还要存储一个知识其连接的后面的元素的位置；这两部分的数据成为**结点**；\n- **数据域：** 一个结点中存储的数据元素\n- **指针域：** 存储连接后面存储位置的域\n- **链表：** n个结点的存储映像链接而成\n\n整个链表必须从头结点开始进行，头结点的指针指向了下一个结点的位置，最后一个 结点的指针指向NULL\n\n```c\n#include<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n    printf(\"%d\\n\",p -> date);\n    p = p -> next;  //p指向他对应的下一个结点\n  \n  }\n\n}\n\n\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\n  traverse(first);\n\n  return 0;\n}\n```\n\n\n\n\n## 单项链表的逆置\n\n\n",[[1539870349228,["gjx16@GJXAIOU",[[1,6656," "]],[6656,6656],[6657,6657]]],[1539871433844,["gjx16@GJXAIOU",[[1,7695,"\n"]],[7692,7692],[7693,7693]]],[1539871435866,["gjx16@GJXAIOU",[[1,7693,"****"]],[7693,7693],[7695,7695]]],[1539871445892,["gjx16@GJXAIOU",[[1,7693,"2."]],[7693,7693],[7695,7695]]],[1539871449140,["gjx16@GJXAIOU",[[1,7697,"zai "]],[7697,7697],[7701,7701]]],[1539871451153,["gjx16@GJXAIOU",[[-1,7697,"zai "]],[7701,7701],[7697,7697]]],[1539871463465,["gjx16@GJXAIOU",[[1,7697,"在链表中插入元素"]],[7697,7697],[7705,7705]]],[1539871465906,["gjx16@GJXAIOU",[[1,7710,"\n"]],[7707,7707],[7708,7708]]],[1539871467324,["gjx16@GJXAIOU",[[1,7708,"```"]],[7708,7708],[7711,7711]]],[1539871467364,["gjx16@GJXAIOU",[[1,7711,"language\n```\n"]],[7711,7711],[7711,7719]]],[1539871469134,["gjx16@GJXAIOU",[[-1,7711,"language"],[1,7719,"c"]],[7711,7719],[7712,7712]]],[1539871469354,["gjx16@GJXAIOU",[[1,7713,"\n"]],[7712,7712],[7713,7713]]],[1539871473973,["gjx16@GJXAIOU",[[1,7713,"#include>"]],[7713,7713],[7722,7722]]],[1539871474788,["gjx16@GJXAIOU",[[-1,7720,"e>"]],[7722,7722],[7720,7720]]],[1539871486757,["gjx16@GJXAIOU",[[1,7720,"e<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n    printf(\"%d\\n\",p -> date);\n    p = p -> next;  //p指向他对应的下一个结点\n  \n  }\n\n}\n\n\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\n  traverse(first);\n\n  return 0;\n}"]],[7720,7720],[8505,8505]]],[1539871505116,["gjx16@GJXAIOU",[[1,8106,"\n"]],[8103,8103],[8104,8104]]],[1539871507969,["gjx16@GJXAIOU",[[1,8104,"//"]],[8104,8104],[8106,8106]]],[1539871510996,["gjx16@GJXAIOU",[[1,8106,"zai l"]],[8106,8106],[8111,8111]]],[1539871511968,["gjx16@GJXAIOU",[[-1,8106,"zai l"]],[8111,8111],[8106,8106]]],[1539871521897,["gjx16@GJXAIOU",[[1,8106,"在链表中插入元素"]],[8106,8106],[8114,8114]]],[1539871522593,["gjx16@GJXAIOU",[[1,8117,"\n"]],[8114,8114],[8115,8115]]],[1539871522762,["gjx16@GJXAIOU",[[1,8118,"\n"]],[8115,8115],[8116,8116]]],[1539871527907,["gjx16@GJXAIOU",[[1,8116,"strc"]],[8116,8116],[8120,8120]]],[1539871528417,["gjx16@GJXAIOU",[[-1,8119,"c"]],[8120,8120],[8119,8119]]],[1539871529388,["gjx16@GJXAIOU",[[1,8119,"ux"]],[8119,8119],[8121,8121]]],[1539871529824,["gjx16@GJXAIOU",[[-1,8120,"x"]],[8121,8121],[8120,8120]]],[1539871536398,["gjx16@GJXAIOU",[[1,8120,"ct list a*"]],[8120,8120],[8130,8130]]],[1539871537267,["gjx16@GJXAIOU",[[-1,8128,"a*"]],[8130,8130],[8128,8128]]],[1539871539670,["gjx16@GJXAIOU",[[1,8128,"*l"]],[8128,8128],[8130,8130]]],[1539871540217,["gjx16@GJXAIOU",[[-1,8129,"l"]],[8130,8130],[8129,8129]]],[1539871565252,["gjx16@GJXAIOU",[[1,8129,"insert_"]],[8129,8129],[8136,8136]]],[1539871569398,["gjx16@GJXAIOU",[[1,8136,"liatt"]],[8136,8136],[8141,8141]]],[1539871570273,["gjx16@GJXAIOU",[[-1,8138,"att"]],[8141,8141],[8138,8138]]],[1539871572738,["gjx16@GJXAIOU",[[1,8138,"st()"]],[8138,8138],[8142,8142]]],[1539871584564,["gjx16@GJXAIOU",[[1,8141,"struct list *ls,in"]],[8141,8141],[8159,8159]]],[1539871585522,["gjx16@GJXAIOU",[[-1,8157,"in"]],[8159,8159],[8157,8157]]],[1539871588917,["gjx16@GJXAIOU",[[1,8157," int n; "]],[8157,8157],[8165,8165]]],[1539871589772,["gjx16@GJXAIOU",[[-1,8163,"; "]],[8165,8165],[8163,8163]]],[1539871597495,["gjx16@GJXAIOU",[[1,8163,",  int data"]],[8163,8163],[8174,8174]]],[1539871604788,["gjx16@GJXAIOU",[[1,8178,"\n"]],[8175,8175],[8176,8176]]],[1539871612183,["gjx16@GJXAIOU",[[1,8176,"{};"]],[8176,8176],[8179,8179]]],[1539871613306,["gjx16@GJXAIOU",[[1,8178,"\n"]],[8178,8178],[8179,8179]]],[1539871613465,["gjx16@GJXAIOU",[[1,8179,"\n"]],[8179,8179],[8180,8180]]],[1539871613641,["gjx16@GJXAIOU",[[1,8180,"\n"]],[8180,8180],[8181,8181]]],[1539871613852,["gjx16@GJXAIOU",[[1,8181,"\n"]],[8181,8181],[8182,8182]]],[1539871614051,["gjx16@GJXAIOU",[[1,8182,"\n"]],[8182,8182],[8183,8183]]],[1539871615609,["gjx16@GJXAIOU",[[-1,8182,"\n"]],[8183,8183],[8182,8182]]],[1539871615777,["gjx16@GJXAIOU",[[-1,8181,"\n"]],[8182,8182],[8181,8181]]],[1539871615978,["gjx16@GJXAIOU",[[-1,8180,"\n"]],[8181,8181],[8180,8180]]],[1539871616297,["gjx16@GJXAIOU",[[-1,8179,"\n"]],[8180,8180],[8179,8179]]],[1539871616577,["gjx16@GJXAIOU",[[-1,8178,"\n"]],[8179,8179],[8178,8178]]],[1539871618337,["gjx16@GJXAIOU",[[1,8177,"\n"]],[8177,8177],[8178,8178]]],[1539871618508,["gjx16@GJXAIOU",[[1,8178,"\n"]],[8178,8178],[8179,8179]]],[1539871618687,["gjx16@GJXAIOU",[[1,8179,"\n"]],[8179,8179],[8180,8180]]],[1539871627518,["gjx16@GJXAIOU",[[1,8178,"  struct list *"]],[8178,8178],[8193,8193]]],[1539871632136,["gjx16@GJXAIOU",[[1,8193,"p = la"]],[8193,8193],[8199,8199]]],[1539871632945,["gjx16@GJXAIOU",[[-1,8197,"la"]],[8199,8199],[8197,8197]]],[1539871634349,["gjx16@GJXAIOU",[[1,8197,"ls;"]],[8197,8197],[8200,8200]]],[1539871635138,["gjx16@GJXAIOU",[[1,8201,"  \n"]],[8200,8200],[8203,8203]]],[1539871637486,["gjx16@GJXAIOU",[[1,8203,"ehilr"]],[8203,8203],[8208,8208]]],[1539871638977,["gjx16@GJXAIOU",[[-1,8203,"ehilr"]],[8208,8208],[8203,8203]]],[1539871641897,["gjx16@GJXAIOU",[[1,8203,"while()"]],[8203,8203],[8210,8210]]],[1539871650002,["gjx16@GJXAIOU",[[1,8209,"p && n--"]],[8209,8209],[8217,8217]]],[1539871651674,["gjx16@GJXAIOU",[[1,8219,"  \n"]],[8218,8218],[8221,8221]]],[1539871652846,["gjx16@GJXAIOU",[[1,8221,"{}"]],[8221,8221],[8223,8223]]],[1539871653986,["gjx16@GJXAIOU",[[1,8222,"\n  \n  \n  "]],[8222,8222],[8231,8231]]],[1539871670588,["gjx16@GJXAIOU",[[1,8225,"  p = p -> next;"]],[8225,8225],[8241,8241]]],[1539871672961,["gjx16@GJXAIOU",[[1,8244,"  \n  "]],[8241,8241],[8246,8246]]],[1539871677641,["gjx16@GJXAIOU",[[-1,8247,"  "]],[8249,8249],[8247,8247]]],[1539871678003,["gjx16@GJXAIOU",[[-1,8247,"\n"]],[8247,8247],[8246,8246]]],[1539871679036,["gjx16@GJXAIOU",[[-1,8242,"    "]],[8246,8246],[8242,8242]]],[1539871679234,["gjx16@GJXAIOU",[[-1,8242,"\n"]],[8242,8242],[8241,8241]]],[1539871682116,["gjx16@GJXAIOU",[[1,8246,"    "]],[8246,8246],[8250,8250]]],[1539871684729,["gjx16@GJXAIOU",[[-1,8249," "]],[8250,8250],[8249,8249]]],[1539871687602,["gjx16@GJXAIOU",[[1,8249,"if()"]],[8249,8249],[8253,8253]]],[1539871694252,["gjx16@GJXAIOU",[[1,8252,"p == NULL"]],[8252,8252],[8261,8261]]],[1539871695715,["gjx16@GJXAIOU",[[1,8263,"   \n"]],[8262,8262],[8266,8266]]],[1539871698388,["gjx16@GJXAIOU",[[1,8266,"{}"]],[8266,8266],[8268,8268]]],[1539871700276,["gjx16@GJXAIOU",[[1,8267,"\n   \n   "]],[8267,8267],[8275,8275]]],[1539871713247,["gjx16@GJXAIOU",[[1,8271,"  return NULL;//你"]],[8271,8271],[8288,8288]]],[1539871713825,["gjx16@GJXAIOU",[[-1,8287,"你"]],[8288,8288],[8287,8287]]],[1539871740760,["gjx16@GJXAIOU",[[1,8287,"n的位置大于链表节点数"]],[8287,8287],[8298,8298]]],[1539871747363,["gjx16@GJXAIOU",[[1,8302,"  \n   "]],[8298,8298],[8304,8304]]],[1539871749426,["gjx16@GJXAIOU",[[-1,8299,"     "]],[8304,8304],[8299,8299]]],[1539871749817,["gjx16@GJXAIOU",[[-1,8299,"\n"]],[8299,8299],[8298,8298]]],[1539871751682,["gjx16@GJXAIOU",[[1,8304,"   \n"]],[8303,8303],[8307,8307]]],[1539871751853,["gjx16@GJXAIOU",[[-1,8304,"   "],[1,8307,"\n"]],[8307,8307],[8305,8305]]],[1539871763715,["gjx16@GJXAIOU",[[1,8305,"  struct lisr"]],[8305,8305],[8318,8318]]],[1539871764276,["gjx16@GJXAIOU",[[-1,8317,"r"]],[8318,8318],[8317,8317]]],[1539871796447,["gjx16@GJXAIOU",[[1,8317,"t *node = create_list();//新建立一个节点"]],[8317,8317],[8350,8350]]],[1539871799105,["gjx16@GJXAIOU",[[1,8351,"  \n"]],[8350,8350],[8353,8353]]],[1539871804268,["gjx16@GJXAIOU",[[1,8353,"node ="]],[8353,8353],[8359,8359]]],[1539871804851,["gjx16@GJXAIOU",[[-1,8358,"="]],[8359,8359],[8358,8358]]],[1539871806107,["gjx16@GJXAIOU",[[1,8358,"->"]],[8358,8358],[8360,8360]]],[1539871808386,["gjx16@GJXAIOU",[[1,8361,"a"]],[8361,8361],[8362,8362]]],[1539871809082,["gjx16@GJXAIOU",[[-1,8361,"a"]],[8362,8362],[8361,8361]]],[1539871813372,["gjx16@GJXAIOU",[[1,8361,"data = sa"]],[8361,8361],[8370,8370]]],[1539871813921,["gjx16@GJXAIOU",[[-1,8368,"sa"]],[8370,8370],[8368,8368]]],[1539871816333,["gjx16@GJXAIOU",[[1,8368,"data;"]],[8368,8368],[8373,8373]]],[1539871817281,["gjx16@GJXAIOU",[[1,8374,"  \n"]],[8373,8373],[8376,8376]]],[1539871830419,["gjx16@GJXAIOU",[[1,8376,"node -> next = p - "]],[8376,8376],[8395,8395]]],[1539871831136,["gjx16@GJXAIOU",[[-1,8394," "]],[8395,8395],[8394,8394]]],[1539871835572,["gjx16@GJXAIOU",[[1,8394,"> next;"]],[8394,8394],[8401,8401]]],[1539871836089,["gjx16@GJXAIOU",[[1,8402,"  \n"]],[8401,8401],[8404,8404]]],[1539871848397,["gjx16@GJXAIOU",[[1,8404,"p -> next = node;"]],[8404,8404],[8421,8421]]],[1539871849184,["gjx16@GJXAIOU",[[1,8422,"  \n"]],[8421,8421],[8424,8424]]],[1539871857358,["gjx16@GJXAIOU",[[1,8424,"return node;"]],[8424,8424],[8436,8436]]],[1539871928107,[null,[[-1,8360,"\n"],[1,8361," "],[-1,8373,"}"],[1,8374,"\n"],[1,8437,"}"]],[8360,8360],[8438,8438]]],[1539871928107,[null,[[1,8360,"\n"],[-1,8360," "],[1,8373,"}"],[-1,8373,"\n"],[-1,8437,"}"]],[8438,8438],[8360,8360]]],[1539871869474,["gjx16@GJXAIOU",[[1,8808,"\n"]],[8806,8806],[8807,8807]]],[1539871869642,["gjx16@GJXAIOU",[[1,8809,"\n"]],[8807,8807],[8808,8808]]],[1539871918027,["gjx16@GJXAIOU",[[1,8808,"int"]],[8808,8808],[8811,8811]]],[1539871988104,[null,[[-1,8360,"\n"],[1,8361," "],[-1,8373,"}"],[1,8374,"\n"],[1,8437,"}"],[-1,8807," "],[1,8813," "]],[8360,8360],[8814,8814]]],[1539871988104,[null,[[1,8360,"\n"],[-1,8360," "],[1,8373,"}"],[-1,8373,"\n"],[-1,8437,"}"],[1,8808," "],[-1,8813," "]],[8814,8814],[8360,8360]]],[1539871962624,["gjx16@GJXAIOU",[[1,8810,"sert_lis"]],[8808,8811],[8819,8819]]],[1539871965627,["gjx16@GJXAIOU",[[1,8819,"();"]],[8819,8819],[8822,8822]]],[1539871968638,["gjx16@GJXAIOU",[[1,8820,"fir"]],[8820,8820],[8823,8823]]],[1539871970097,["gjx16@GJXAIOU",[[-1,8822,"r"]],[8823,8823],[8822,8822]]],[1539871977611,["gjx16@GJXAIOU",[[1,8822,"st,0."]],[8822,8822],[8827,8827]]],[1539871978608,["gjx16@GJXAIOU",[[-1,8826,"."]],[8827,8827],[8826,8826]]],[1539871980579,["gjx16@GJXAIOU",[[1,8826,",10"]],[8826,8826],[8829,8829]]],[1539871983362,["gjx16@GJXAIOU",[[1,8833,"\n"]],[8831,8831],[8832,8832]]],[1539871987090,["gjx16@GJXAIOU",[[1,8832,"//"]],[8832,8832],[8834,8834]]],[1539872048119,[null,[[-1,8360,"\n"],[1,8361," "],[-1,8373,"}"],[1,8374,"\n"],[1,8437,"}"],[-1,8807," "],[1,8836," "]],[8360,8360],[8837,8837]]],[1539872048120,[null,[[1,8360,"\n"],[-1,8360," "],[1,8373,"}"],[-1,8373,"\n"],[-1,8437,"}"],[1,8808," "],[-1,8836," "]],[8837,8837],[8360,8360]]],[1539872041829,["gjx16@GJXAIOU",[[1,8834,"参数含义：链表头，指针位置，"]],[8834,8834],[8848,8848]]],[1539872108106,[null,[[-1,8360,"\n"],[1,8361," "],[-1,8373,"}"],[1,8374,"\n"],[1,8437,"}"],[-1,8807," "],[1,8850," "]],[8360,8360],[8851,8851]]],[1539872108106,[null,[[1,8360,"\n"],[-1,8360," "],[1,8373,"}"],[-1,8373,"\n"],[-1,8437,"}"],[1,8808," "],[-1,8850," "]],[8851,8851],[8360,8360]]],[1539872064307,["gjx16@GJXAIOU",[[1,8848,"要插入的值"]],[8848,8848],[8853,8853]]]],null,"gjx16@GJXAIOU"],["3ea92ef6-963d-4227-80f9-57115b3e3387",1539947979514,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n\n程序有问题，附上其他的链接；\n[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n**CSDN上快速排序算法：**\n- 法一；定轴法；\n（一）定轴法:\n1.备份对轴(首记录，即第一个元素)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n4.重复上述过程，直到left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n\n```c\n\nvoid quickSort(int* A,int first,int last)\n{        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)     //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;       //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];     //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t//依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n\n```\n\n二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n```c\nvoid quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;           //左边第一个，因为第一个已经用pivot保存了\n\t    int high=r;          //右边\n\t    int pivot = s[l];     //第一个，已被保存\n        while(low<high)       //当左小于右,当相等的时候会跳出循环\n          {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n          }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n\n```\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n**以上程序的递归方法实现**\n```c\nint bin_rec(int *array,int low,int high,int key)\n{\n  if(low <= high)//递归终止条件\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])\n          {\n            return mid;\n          }else if(key > array[mid])\n          {\n            return bin_sec(array,mid +1,high);//在下半部分查找\n          }else\n          {\n            return bin_sec(array,low,mid -1);//在上半部分查找\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin_rec(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n## 四、单向链表的实现\n\n引入：在一个数组中插入或者删除一个数据会造成同时移动大量的数据，\n\n \n 1.**单向链表的定义：**\n\n\n**链式存储：**\n- 存储单元可以是连续的或者非连续的\n- 链式存储中的元素存储时候除了存储本身信息还要存储一个知识其连接的后面的元素的位置；这两部分的数据成为**结点**；\n- **数据域：** 一个结点中存储的数据元素\n- **指针域：** 存储连接后面存储位置的域\n- **链表：** n个结点的存储映像链接而成\n\n整个链表必须从头结点开始进行，头结点的指针指向了下一个结点的位置，最后一个 结点的指针指向NULL\n\n```c\n#include<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n    printf(\"%d\\n\",p -> date);\n    p = p -> next;  //p指向他对应的下一个结点\n  \n  }\n\n}\n\n\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\n  traverse(first);\n\n  return 0;\n}\n```\n\n\n2.**在链表中插入元素**\n```c\n#include<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n    printf(\"%d\\n\",p -> date);\n    p = p -> next;  //p指向他对应的下一个结点\n  \n  }\n\n}\n\n\n//在链表中插入元素\n\nstruct list *insert_list(struct list *ls, int n,  int data)\n{\n  struct list *p = ls;\n  while(p && n--)\n  {\n    p = p -> next;\n  }\n   if(p == NULL)\n   {\n     return NULL;//n的位置大于链表节点数\n   }\n\n  struct list *node = create_list();//新建立一个节点\n  node -> data = data;\n  node -> next = p -> next;\n  p -> next = node;\n  return node;\n};\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\ninsert_list(fist,0,10);\n//参数含义：链表头，指针位置，要插入的值\n\n  traverse(first);\n\n  return 0;\n}\n```\n\n\n\n## 单项链表的逆置\n\n\n",[[1539947956773,["gjx16@GJXAIOU",[[-1,7273,"  "]],[7275,7275],[7273,7273]]],[1539947957464,["gjx16@GJXAIOU",[[-1,7273,"\n"]],[7273,7273],[7272,7272]]],[1539947963986,["gjx16@GJXAIOU",[[1,7206,"  "]],[7206,7206],[7208,7208]]],[1539947966481,["gjx16@GJXAIOU",[[1,7214,"  "]],[7214,7214],[7216,7216]]],[1539947970337,["gjx16@GJXAIOU",[[1,7246,"  "]],[7246,7246],[7248,7248]]],[1539947972625,["gjx16@GJXAIOU",[[1,7281,"  "]],[7281,7281],[7283,7283]]],[1539947976586,["gjx16@GJXAIOU",[[-1,7285,"\n"]],[7285,7285],[7284,7284]]]],null,"gjx16@GJXAIOU"],["49204010-af40-40a8-9e87-ff5b041ea980",1539997088392,"---\ndate:`2018-10-15`\n---\n\n# day14 基本数据结构\n\n\n## 冒泡排序与选择排序\n\n- **冒泡排序法：**\n```c\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\nvoid bubble(int *array,int n)\n{\n  int i;\n  int j;\n  for(i = 0; i < n; i++)\n  {\n    for(j = 1; j < n-i; j++)\n      {\n        if(array[j -1] > array[j])\n          {\n            swap(&array[j-1] ,&array[j]);\n          }    \n      }\n  }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main()\n{\n  int array[10] = {1,3,4,7,43,98,4,99,3,8};\n  bubble(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n```\n\n- **选择排序法：**\n在一个集合中找最小的那个数，放在最前面，一直这样找下去\n```c\n#include<stdio.h>\n#include<string.h>\n\n//查找一个数组中的最小值（每次查找的循环次数依次递减）\n\nint minkey(int *array,int low,int high)\n//第一个参数为一个数组，第二个参数为数组的开始下标，第三个参数为数组的终止下标\n//函数返回值为最小元素的下标\n\n  {\n    int min = low;\n    int key = array[low];//在没有查找最小元素之前，第一个元素是最小的\n    int i;\n    for(i = low +1; i < high;i++)\n      {\n        if(key > array[i])\n          {\n            key = array[i];\n            min = i;\n          }\n      }\n    return min;\n  }\n\n\n//交换元素\nvoid swap(int *a,int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n\n//将数组中的值进行排序\n\nvoid select(int *array, int n)\n{\n    int i;\n    for(i = 0;i < n; i++)\n      {\n        int j = minkey(array,i,n);\n        if(i != j)//即范围内的第一个成员不是最小的\n          {\n            swap(&array[i],&array[j]);\n          }\n      }\n}\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  select(array,10);\n  print_array(array,10);\n  return 0;\n}\n```\n程序允许的结果：\n`1`\n`2`\n`3`\n`4`\n`5`\n`23`\n`32`\n`67`\n`87`\n`98`\n注:表格中的数据和程序使用的数据不一致，只是算法一致\n![表格表示]($resource/%E8%A1%A8%E6%A0%BC%E8%A1%A8%E7%A4%BA.png)\n\n\n- **快速排序**==需要测试==\n没有程序，可以从视频中大概找找\n```c\n#include<stdio.h>\n#include<string.h>\n\n\nvoid q_sort(int *array,int low, int high)//快速排序，low是排序范围的下标，high是上标\n{\n  if(low < high)\n    {\n        int povitloc = partition(array,low,high);\n //定义一个变量，指向轴点的位置；\n //partition得到轴点的位置，并且已经根据轴点将数组内容排序了\n        q_sort(array,povitloc + 1,high);\n      //在轴点的下半部分递归快速\n        q_sort(array,low,povitloc -1);\n     //在轴点的上半部分递归快速\n    }\n}\n\n\nvoid quick_sort(int *array,int n)\n{\n  q_sort(array,0,n-1);\n}\n\n\nvoid print_array(int *array,int n)\n{\n  int i;\n  for(i = 0; i < n; i++)\n    {\n      printf(\"%d\\n\",array[i]);\n    }\n}\n\n\nint main(void)\n{\n  int array[10] = {1,2,4,32,87,3,23,98,5,67};\n  quick_sort(array,10);\n  print_array(array,10);\n  return 0;\n\n}\n\n```\n\n程序有问题，附上其他的链接；\n[快速排序](https://blog.csdn.net/jeryjeryjery/article/details/52894756)\n![快速排序]($resource/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png)\n\n**CSDN上快速排序算法：**\n- 法一；定轴法；\n（一）定轴法:\n1.备份对轴(首记录，即第一个元素)\n\n2.取两个指针left和right，初始值分别是序列的第二个元素和最后一个元素,并且left<=right\n\n3.移动两个指针\n*从right所指的位置向左搜索，找到第一个小于轴的元素\n\n*从left所指的位置向右搜索，找到第一个大于轴的元素\n*找到后如果left<right，那么就交换两个位置的值\n\n4.重复上述过程，直到left>right\n\n5.把轴放到right的位置，并且将right位置的值放到第一位\n\n6.分别将right位置左边的和右边的进行上述的递归\n\nC++代码实现如下：\n\n```c\n\nvoid quickSort(int* A,int first,int last)\n{        //数组A,first是第一个元素下标，last是最后一个元素下标\n\tif(last<=first)     //到了长度小于1这种情况已经是有序列了\n\t\treturn;\n \n\tint pivot=A[first];\n\tint left=first+1;       //left等于第二个元素\n\tint right=last;    \n        int temp;\n\twhile(left<=right){\n\t\twhile(A[right]>pivot&&right>=left)//找到一个比first小的,但必须保证left值小于等于right值\n\t\t\tright--;\n \n\t\twhile(A[left]<pivot&&left<=right) //找到一个比first大的,但得保证left值小于等于right值\n\t\t\tleft++;\n \n\t\tif(left>=right)   //说明已经是相对有序序列，无需交换\n\t\t\tbreak;\n \n\t\ttemp=A[left];                     //交换位置\n\t\tA[left]=A[right];\n\t\tA[right]=temp;\n\t\tleft++,right--;                   //相应的进一位\n\t}\n\tA[first]=A[right];     //因为right一定是停在从右到左第一个小于first的数上，交换之后，\n\t//依然能保证first值左边的比first小，右边的比first大\n\tA[right]=pivot;\n \n\tquickSort(A,first,right-1);               //左半部分\n\tquickSort(A,left,last);                   //右半部分\n\n\n```\n\n二）挖坑法:\n\n1.备份轴记录\n\n2.取两个指针low和high，初始值就是序列的两端下标，保证low<=high\n\n3.移动两个指针\n\n*从high向左找到第一个小于轴的元素, 放在low的位置\n\n*从low向右找到第一个大于轴的元素，放在high的位置\n\n4.重复，直到low=high，\n\n5.把轴放在low所指的位置\n\n6.分别对low所指的位置的左边和右边进行上述的递归\n\nC++实现代码如下：\n```c\nvoid quickSort(int s[], int l, int r)\n{\n    if(l<r)\n    {      \n        int low=l;           //左边第一个，因为第一个已经用pivot保存了\n\t    int high=r;          //右边\n\t    int pivot = s[l];     //第一个，已被保存\n        while(low<high)       //当左小于右,当相等的时候会跳出循环\n          {\n            while(low<high&&s[high]>= pivot)  // 从右向左找第一个小于x的数\n\t\t\t\thigh--; \n            if(low<high)                        \n                s[low++] = s[high];\n                    \n            while(low<high&&s[low]<pivot)     // 从左向右找第一个大于等于x的数\n                low++; \n            if(low<high)  \n                s[high--] = s[low];\n          }\n        s[low]=pivot;        \n        quickSort(s, l, low - 1);             //low左边递归调用\n        quickSort(s, low + 1, r);             //low右边递归调用\n    }\n}\n\n\n```\n---\n\n\n## 查找算法\n\n- **顺序查找**\n\n```c\nint seq(int *array, int low, int high, ing key)\n{\n  int i;\n  for(i = low; i < high; i++)\n    {\n      if(array[i] == key)\n        {\n          return i;\n        }else\n        {\n          return -1;\n        }\n    }\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  printf(\"%d\\n\",seq(array,0,10,89));\n  return 0;\n}\n\n\n\n```\n\n\n\n- **二分查找**\n**前提：** 是针对已经排好序的数组\n**原理：** 每次取数组的中间位置元素，将要查找的数和该元素比较，如果相同则就是该元素，如果大于该元素，则要查找的元素在中间元素之后，反之在前面，然后将可能的范围再次一分为二，进行查找；\n```c\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nint bin(int *array,int low,int high,int key)\n{\n  while(low <= high)\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])//中间切一刀，正好等于中间数\n          {\n            return mid;\n          }else if(key > array[mid])//如果要找的数大于array[mid]，那么就在下半部分继续查找\n          {\n            low = mid +1;\n          }else//如果要找的数小于array[mid]，那么就在上半部分继续查找\n          {\n            high = mid -1;\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n**以上程序的递归方法实现**\n```c\nint bin_rec(int *array,int low,int high,int key)\n{\n  if(low <= high)//递归终止条件\n    {\n      int mid = (low + high)/2;\n        if(key == array[mid])\n          {\n            return mid;\n          }else if(key > array[mid])\n          {\n            return bin_sec(array,mid +1,high);//在下半部分查找\n          }else\n          {\n            return bin_sec(array,low,mid -1);//在上半部分查找\n          }\n    }\n    return -1;//没有找到数据的话返回-1\n\n}\n\n\nint main()\n{\n  int array[10] = {32,43,68,43,98,5,67,2,4,3};\n  quick_sort(array,10);//这里需要调用快速排序方法，暂时上面的代码有错误\n  printf(\"%d\\n\",bin_rec(array,0,10,32));\n  return 0;\n\n}\n\n\n```\n\n\n## 四、单向链表的实现\n\n引入：在一个数组中插入或者删除一个数据会造成同时移动大量的数据，\n\n \n 1.**单向链表的定义：**\n\n\n**链式存储：**\n- 存储单元可以是连续的或者非连续的\n- 链式存储中的元素存储时候除了存储本身信息还要存储一个知识其连接的后面的元素的位置；这两部分的数据成为**结点**；\n- **数据域：** 一个结点中存储的数据元素\n- **指针域：** 存储连接后面存储位置的域\n- **链表：** n个结点的存储映像链接而成\n\n整个链表必须从头结点开始进行，头结点的指针指向了下一个结点的位置，最后一个 结点的指针指向NULL\n\n```c\n#include<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n    {\n      printf(\"%d\\n\",p -> date);\n      p = p -> next;  //p指向他对应的下一个结点\n    }\n}\n\n\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\n  traverse(first);\n\n  return 0;\n}\n```\n\n\n2.**在链表中插入元素**\n```c\n#include<stdio.h>\n#inlcude<stdlib.h>\n\n//一个结点包含数据域和指针域\nstruct list\n{\n  int date;//数据域\n  struct list *next;//指针域\n};\n\n\n//创建一个结点的函数：\nstruct list *create_list()\n{\n  return calloc(szieof(struct list),1);\n}；\n\n\n\n\n\n\n//循环遍历链表\n\nvoid traverse(struct list *ls)\n{\n  struct list *p = ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n    printf(\"%d\\n\",p -> date);\n    p = p -> next;  //p指向他对应的下一个结点\n  \n  }\n\n}\n\n\n//在链表中插入元素\n\nstruct list *insert_list(struct list *ls, int n,  int data)\n{\n  struct list *p = ls;\n  while(p && n--)\n  {\n    p = p -> next;\n  }\n   if(p == NULL)\n   {\n     return NULL;//n的位置大于链表节点数\n   }\n\n  struct list *node = create_list();//新建立一个节点\n  node -> data = data;\n  node -> next = p -> next;\n  p -> next = node;\n  return node;\n};\n\n\nint main(void)\n{\n  //创建三个结点(可以通过函数)\n  struct list *first = calloc(sizeof(struct list), 1);//在堆中间创建一个结点\n  struct list *second = calloc(sizeof(struct list), 1);\n  struct list *third = create_list();\n\n  //将三个结点连接起来\n  first -> next = second;\n  second -> next = third;\n  third -> next = NULL;\n\n  //数据域进行赋值\n  first -> date = 2;\n  second -> date = 3;\n  third ->date = 4;\n\n\ninsert_list(fist,0,10);\n//参数含义：链表头，指针位置，要插入的值\n\n  traverse(first);\n\n  return 0;\n}\n```\n\n\n\n## 单项链表的逆置\n\n\n",[[1539997068246,["gjx16@GJXAIOU",[[-1,7738,"lc"]],[7740,7740],[7738,7738]]],[1539997070480,["gjx16@GJXAIOU",[[1,7738,"lu"]],[7738,7738],[7740,7740]]],[1539997072407,["gjx16@GJXAIOU",[[-1,7740,"u"]],[7740,7740],[7739,7739]]],[1539997074409,["gjx16@GJXAIOU",[[1,7738,"c"]],[7738,7738],[7739,7739]]],[1539997082400,["gjx16@GJXAIOU",[[-1,7892,"zi"]],[7894,7894],[7892,7892]]],[1539997083234,["gjx16@GJXAIOU",[[1,7892,"ia"]],[7892,7892],[7894,7894]]],[1539997085078,["gjx16@GJXAIOU",[[-1,7893,"a"]],[7894,7894],[7893,7893]]],[1539997085210,["gjx16@GJXAIOU",[[1,7893,"z"]],[7893,7893],[7894,7894]]],[1539997363685,["gjx16@GJXAIOU",[[1,7830,"h"]],[7830,7830],[7831,7831]]],[1539997364918,["gjx16@GJXAIOU",[[-1,7829,";h"]],[7831,7831],[7829,7829]]],[1539997365840,["gjx16@GJXAIOU",[[1,7829,";"]],[7829,7829],[7830,7830]]],[1539997369917,["gjx16@GJXAIOU",[[-1,7916,"；"]],[7917,7917],[7916,7916]]],[1539997371557,["gjx16@GJXAIOU",[[1,7916,";"]],[7916,7916],[7917,7917]]],[1539997377999,["gjx16@GJXAIOU",[[-1,7988,";"]],[7989,7989],[7988,7988]]],[1539997378825,["gjx16@GJXAIOU",[[1,7988,";"]],[7988,7988],[7989,7989]]],[1539997507630,["gjx16@GJXAIOU",[[-1,7794,"e"]],[7795,7795],[7794,7794]]],[1539997508179,["gjx16@GJXAIOU",[[1,7794,"a"]],[7794,7794],[7795,7795]]],[1539997585591,["gjx16@GJXAIOU",[[1,7735,"\n"],[1,7771,"\n"],[1,7778," "],[1,7782,"\n"],[1,7785,"\n"],[1,7790," "],[1,7802,"\n"],[1,7810," "],[1,7816," "],[1,7827,"\n"],[-1,7832,"\n"],[1,7845,"\n"],[1,7853," "],[1,7857," "],[1,7873,"\n"],[1,7874,"\n"],[1,7883," "],[1,7904," "],[1,7915,"\n"],[-1,7919,"\n\n\n\n\n"],[1,7938," "],[1,7954," "],[1,7960," "],[1,7964,"\n"],[1,7967,"\n"],[1,7975," "],[1,7981," "],[1,7983," "],[1,7986," "],[1,7989,"\n"],[1,8027,"\n"],[-1,8031,"  "],[1,8033,"\n"],[1,8051," "],[1,8053," "],[-1,8057,"e"],[1,8058,"a"],[1,8060,"\n"],[1,8063,"p"],[-1,8065,"p ="],[1,8068,"= "],[1,8070," "],[1,8073," "],[-1,8096,"  "],[-1,8107,"\n"],[1,8127," "],[1,8131," "],[1,8152," "],[1,8156," "],[1,8162," "],[1,8165," "],[1,8173," "],[1,8180,"\n"],[1,8181,"\n"],[1,8191," "],[1,8196," "],[1,8198," "],[1,8201," "],[1,8204,"\n"],[1,8215," "],[1,8217," "],[1,8222,"\n"],[-1,8227,"  "],[1,8229,"\n"],[1,8233," "],[1,8234," "],[1,8237," "],[1,8239," "],[1,8246,"\n"],[-1,8250," "],[1,8251,"\n"],[1,8258," "],[1,8260," "],[1,8266,"\n"],[-1,8269," "],[-1,8272,"   "],[1,8275,"\n"],[1,8284," "],[-1,8303," "],[1,8304,"\n"],[1,8318," "],[1,8322," "],[1,8329," "],[1,8330," "],[1,8355,"\n"],[1,8362," "],[1,8364," "],[1,8370," "],[1,8371," "],[1,8377,"\n"],[1,8385," "],[1,8387," "],[1,8393," "],[1,8394," "],[1,8396," "],[1,8400," "],[1,8405,"\n"],[1,8410," "],[1,8412," "],[1,8417," "],[1,8420," "],[1,8425,"\n"],[1,8435," "],[1,8441,"\n"],[-1,8443,"\n"],[1,8450," "],[1,8460,"\n"],[1,8463,"\n"],[1,8482,"\n"],[1,8490," "],[1,8496," "],[1,8502," "],[1,8505," "],[1,8525," "],[1,8533," "],[1,8548,"\n"],[1,8558," "],[1,8562," "],[1,8571," "],[1,8572," "],[1,8594," "],[1,8601," "],[1,8604,"\n"],[1,8614," "],[1,8618," "],[1,8626," "],[1,8627," "],[1,8658,"\n"],[1,8666," "],[1,8668," "],[1,8674," "],[1,8675," "],[1,8684,"\n"],[1,8692," "],[1,8696," "],[1,8701," "],[1,8702," "],[1,8710,"\n"],[1,8717," "],[1,8721," "],[1,8725," "],[1,8728," "],[1,8747,"\n"],[1,8754," "],[1,8758," "],[-1,8761,"e"],[1,8762,"a "],[1,8765," "],[1,8767,"\n"],[1,8776," "],[1,8780," "],[-1,8783,"e"],[1,8784,"a "],[1,8787," "],[1,8789,"\n"],[1,8797," "],[-1,8803,"e"],[1,8804,"a "],[1,8806," "],[-1,8811,"\n"],[1,8826,"r"],[1,8835,"\n"],[1,8888," "],[1,8890,"\n"]],[7717,8892],[9015,9015]]],[1539997601318,["gjx16@GJXAIOU",[[-1,7735,"\n"]],[7735,7735],[7734,7734]]],[1539997604606,["gjx16@GJXAIOU",[[-1,7785,"\n"]],[7785,7785],[7784,7784]]],[1539997605145,["gjx16@GJXAIOU",[[-1,7789," "]],[7789,7789],[7788,7788]]],[1539997606462,["gjx16@GJXAIOU",[[-1,7787,"\n"]],[7787,7787],[7786,7786]]],[1539997607946,["gjx16@GJXAIOU",[[1,7788,"  "]],[7787,7787],[7789,7789]]],[1539997610966,["gjx16@GJXAIOU",[[-1,7806,"\n"]],[7806,7806],[7805,7805]]],[1539997612824,["gjx16@GJXAIOU",[[1,7808,"  "]],[7808,7808],[7810,7810]]],[1539997614214,["gjx16@GJXAIOU",[[-1,7809," "]],[7810,7810],[7809,7809]]],[1539997615445,["gjx16@GJXAIOU",[[-1,7835,"\n"]],[7835,7835],[7834,7834]]],[1539997618151,["gjx16@GJXAIOU",[[1,7839,"\n"]],[7838,7838],[7839,7839]]],[1539997619654,["gjx16@GJXAIOU",[[-1,7883,"\n"]],[7883,7883],[7882,7882]]],[1539997622552,["gjx16@GJXAIOU",[[-1,7885,"\n"]],[7885,7885],[7884,7884]]],[1539997623429,["gjx16@GJXAIOU",[[-1,7927,"\n"]],[7927,7927],[7926,7926]]],[1539997624902,["gjx16@GJXAIOU",[[1,7931,"\n"]],[7930,7930],[7931,7931]]],[1539997625160,["gjx16@GJXAIOU",[[1,7932,"\n"]],[7931,7931],[7932,7932]]],[1539997627406,["gjx16@GJXAIOU",[[-1,7977,"\n"]],[7977,7977],[7976,7976]]],[1539997628335,["gjx16@GJXAIOU",[[-1,7979,"\n"]],[7979,7979],[7978,7978]]],[1539997629053,["gjx16@GJXAIOU",[[-1,8006,"\n"]],[8006,8006],[8005,8005]]],[1539997629711,["gjx16@GJXAIOU",[[-1,8043,"\n"]],[8043,8043],[8042,8042]]],[1539997630389,["gjx16@GJXAIOU",[[-1,8047,"\n"]],[8047,8047],[8046,8046]]],[1539997631230,["gjx16@GJXAIOU",[[-1,8077,"\n"]],[8077,8077],[8076,8076]]],[1539997631880,["gjx16@GJXAIOU",[[-1,8114,"\n"]],[8114,8114],[8113,8113]]],[1539997632589,["gjx16@GJXAIOU",[[-1,8118,"\n"]],[8118,8118],[8117,8117]]],[1539997634389,["gjx16@GJXAIOU",[[1,8121,"\n"]],[8120,8120],[8121,8121]]],[1539997634590,["gjx16@GJXAIOU",[[1,8122,"\n"]],[8121,8121],[8122,8122]]],[1539997636150,["gjx16@GJXAIOU",[[-1,8202,"\n"]],[8202,8202],[8201,8201]]],[1539997636870,["gjx16@GJXAIOU",[[-1,8206," "]],[8206,8206],[8205,8205]]],[1539997638394,["gjx16@GJXAIOU",[[1,8206," "]],[8205,8205],[8206,8206]]],[1539997640342,["gjx16@GJXAIOU",[[-1,8204,"\n"]],[8204,8204],[8203,8203]]],[1539997641086,["gjx16@GJXAIOU",[[-1,8231,"\n"]],[8231,8231],[8230,8230]]],[1539997642046,["gjx16@GJXAIOU",[[-1,8251,"\n"]],[8251,8251],[8250,8250]]],[1539997643865,["gjx16@GJXAIOU",[[1,8253,"  "]],[8253,8253],[8255,8255]]],[1539997646950,["gjx16@GJXAIOU",[[-1,8257,"\n"]],[8257,8257],[8256,8256]]],[1539997649193,["gjx16@GJXAIOU",[[1,8259,"    "]],[8259,8259],[8263,8263]]],[1539997652021,["gjx16@GJXAIOU",[[-1,8282,"\n"]],[8282,8282],[8281,8281]]],[1539997654288,["gjx16@GJXAIOU",[[1,8284,"    "]],[8284,8284],[8288,8288]]],[1539997655821,["gjx16@GJXAIOU",[[-1,8286,"  "]],[8288,8288],[8286,8286]]],[1539997658303,["gjx16@GJXAIOU",[[-1,8307,"\n"]],[8307,8307],[8306,8306]]],[1539997659992,["gjx16@GJXAIOU",[[1,8309,"  "]],[8308,8308],[8310,8310]]],[1539997662030,["gjx16@GJXAIOU",[[-1,8313,"\n"]],[8313,8313],[8312,8312]]],[1539997664850,["gjx16@GJXAIOU",[[1,8315,"    "]],[8314,8314],[8318,8318]]],[1539997667601,["gjx16@GJXAIOU",[[-1,8346,"\n"]],[8346,8346],[8345,8345]]],[1539997669782,["gjx16@GJXAIOU",[[1,8348,"  "]],[8348,8348],[8350,8350]]],[1539997673054,["gjx16@GJXAIOU",[[-1,8403,"\n"]],[8403,8403],[8402,8402]]],[1539997674773,["gjx16@GJXAIOU",[[-1,8430,"\n"]],[8430,8430],[8429,8429]]],[1539997676085,["gjx16@GJXAIOU",[[-1,8464,"\n"]],[8464,8464],[8463,8463]]],[1539997676872,["gjx16@GJXAIOU",[[-1,8488,"\n"]],[8488,8488],[8487,8487]]],[1539997677853,["gjx16@GJXAIOU",[[-1,8504,"\n"]],[8504,8504],[8503,8503]]],[1539997679590,["gjx16@GJXAIOU",[[1,8508,"\n"]],[8507,8507],[8508,8508]]],[1539997680406,["gjx16@GJXAIOU",[[1,8509,"\n"]],[8508,8508],[8509,8509]]],[1539997683176,["gjx16@GJXAIOU",[[-1,8526,"\n"]],[8526,8526],[8525,8525]]],[1539997684494,["gjx16@GJXAIOU",[[-1,8528,"\n"]],[8528,8528],[8527,8527]]],[1539997686198,["gjx16@GJXAIOU",[[1,8622,"\n"]],[8621,8621],[8622,8622]]],[1539997686807,["gjx16@GJXAIOU",[[-1,8622,"\n"]],[8622,8622],[8621,8621]]],[1539997687239,["gjx16@GJXAIOU",[[-1,8621,"\n"]],[8621,8621],[8620,8620]]],[1539997688069,["gjx16@GJXAIOU",[[-1,8683,"\n"]],[8683,8683],[8682,8682]]],[1539997689605,["gjx16@GJXAIOU",[[-1,8771,"\n"]],[8771,8771],[8770,8770]]],[1539997691208,["gjx16@GJXAIOU",[[-1,8801,"\n"]],[8801,8801],[8800,8800]]],[1539997692701,["gjx16@GJXAIOU",[[-1,8868,"\n"]],[8868,8868],[8867,8867]]],[1539997694368,["gjx16@GJXAIOU",[[-1,8894,"\n"]],[8894,8894],[8893,8893]]],[1539997695536,["gjx16@GJXAIOU",[[-1,8917,"\n"]],[8917,8917],[8916,8916]]],[1539997697750,["gjx16@GJXAIOU",[[1,8917,"  "]],[8917,8917],[8919,8919]]],[1539997700584,["gjx16@GJXAIOU",[[-1,8987,"\n"]],[8987,8987],[8986,8986]]],[1539997739191,["gjx16@GJXAIOU",[[1,9007,"cheng"]],[9007,9007],[9012,9012]]],[1539997740568,["gjx16@GJXAIOU",[[-1,9007,"cheng"]],[9012,9012],[9007,9007]]],[1539997745594,["gjx16@GJXAIOU",[[1,9007,"程序运行结果："]],[9007,9007],[9014,9014]]],[1539997746678,["gjx16@GJXAIOU",[[1,9017,"\n"]],[9014,9014],[9015,9015]]],[1539997778544,["gjx16@GJXAIOU",[[1,9015,"![插入元素的结果]($resource/%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%93%E6%9E%9C.png)"]],[9015,9015],[9105,9105]]],[1539997820504,["gjx16@GJXAIOU",[[1,9014,"相当于在第0个位置，即第一的元素的后面插入一个数字10"]],[9014,9014],[9041,9041]]],[1539997825457,["gjx16@GJXAIOU",[[1,9039,"`"]],[9039,9039],[9040,9040]]],[1539997826619,["gjx16@GJXAIOU",[[1,9042,"`"]],[9042,9042],[9043,9043]]],[1539997828806,["gjx16@GJXAIOU",[[1,9044,"\n"]],[9043,9043],[9044,9044]]],[1539998825916,["gjx16@GJXAIOU",[[1,9137,"\n"]],[9135,9135],[9136,9136]]],[1539998826068,["gjx16@GJXAIOU",[[1,9138,"\n"]],[9136,9136],[9137,9137]]],[1539998829053,["gjx16@GJXAIOU",[[1,9137,"3、****"]],[9137,9137],[9141,9141]]],[1539998842908,["gjx16@GJXAIOU",[[1,9141,"在链表中删除指定位置的元素"]],[9141,9141],[9154,9154]]],[1539998845579,["gjx16@GJXAIOU",[[1,9158,"\n"]],[9156,9156],[9157,9157]]],[1539998847509,["gjx16@GJXAIOU",[[1,9157,"```c\n#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n\n//在链表中插入元素\n\nstruct  list  *insert_list(struct  list  *ls,  int  n,  int  data)\n{\n  struct  list  *p  =  ls;\n  while(p  &&  n--)\n    {\n      p  =  p  ->  next;\n    }\n\n  if(p  ==  NULL)\n    {\n      return  NULL;//n的位置大于链表节点数\n    }\n\n  struct  list  *node  =  create_list();//新建立一个节点\n  node  ->  data  =  data;\n  node  ->  next  =  p  ->  next;\n  p  ->  next  =  node;\n  return  node;\n};\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n  insert_list(first,0,10);\n\n//参数含义：链表头，指针位置，要插入的值\n\n  traverse(first);\n  return  0;\n\n}\n```"]],[9157,9157],[10451,10451]]],[1539998895155,["gjx16@GJXAIOU",[[-1,9580,"struct"]],[9586,9586],[9580,9580]]],[1539998896636,["gjx16@GJXAIOU",[[1,9580,"int"]],[9580,9580],[9583,9583]]],[1539998902571,["gjx16@GJXAIOU",[[-1,9585,"lst  *i"]],[9592,9592],[9585,9585]]],[1539998906539,["gjx16@GJXAIOU",[[-1,9584," insert"]],[9591,9591],[9584,9584]]],[1539998910408,["gjx16@GJXAIOU",[[1,9584,"dele"]],[9584,9584],[9588,9588]]],[1539998911194,["gjx16@GJXAIOU",[[1,9588,"te"]],[9588,9588],[9590,9590]]],[1539998926108,["gjx16@GJXAIOU",[[-1,9622,",  int  data"]],[9634,9634],[9622,9622]]],[1539998930157,["gjx16@GJXAIOU",[[-1,9574,"插入"]],[9576,9576],[9574,9574]]],[1539998935916,["gjx16@GJXAIOU",[[1,9574,"指定位置删除"]],[9574,9574],[9580,9580]]],[1539998977666,["gjx16@GJXAIOU",[[-1,9796,"node"]],[9800,9800],[9796,9796]]],[1539998979914,["gjx16@GJXAIOU",[[1,9796,"tmp"]],[9796,9796],[9799,9799]]],[1539998990038,["gjx16@GJXAIOU",[[-1,9804,"create_list();//新建立一个节点"]],[9827,9827],[9804,9804]]],[1539999011032,["gjx16@GJXAIOU",[[1,9804,"p -> next;//将p ->next暂时存储"]],[9804,9804],[9829,9829]]],[1539999019818,["gjx16@GJXAIOU",[[-1,9832,"node  ->  data  =  data;"]],[9856,9856],[9832,9832]]],[1539999025726,["gjx16@GJXAIOU",[[1,9832,"p -> x"]],[9832,9832],[9838,9838]]],[1539999026866,["gjx16@GJXAIOU",[[-1,9837,"x"]],[9838,9838],[9837,9837]]],[1539999030341,["gjx16@GJXAIOU",[[1,9837,"next "]],[9837,9837],[9842,9842]]],[1539999055232,["gjx16@GJXAIOU",[[1,9842,"= p -> next -> next;//tai"]],[9842,9842],[9867,9867]]],[1539999056316,["gjx16@GJXAIOU",[[-1,9863,"/tai"]],[9867,9867],[9863,9863]]],[1539999082155,["gjx16@GJXAIOU",[[1,9863,"/跳过要删除的元素，要上传"]],[9863,9863],[9876,9876]]],[1539999082874,["gjx16@GJXAIOU",[[-1,9874,"上传"]],[9876,9876],[9874,9874]]],[1539999088282,["gjx16@GJXAIOU",[[1,9874,"删除元素的前一个"]],[9874,9874],[9882,9882]]],[1539999109520,["gjx16@GJXAIOU",[[1,9882,"元素的下一跳指向删除元素的笑一个位置"]],[9882,9882],[9900,9900]]],[1539999112842,["gjx16@GJXAIOU",[[-1,9895,"笑"]],[9896,9896],[9895,9895]]],[1539999114626,["gjx16@GJXAIOU",[[1,9895,"下"]],[9895,9895],[9896,9896]]],[1539999132970,["gjx16@GJXAIOU",[[-1,9901,"  node  ->  next  =  p  ->  next;"]],[9934,9934],[9901,9901]]],[1539999139228,["gjx16@GJXAIOU",[[1,9901,"  free();"]],[9901,9901],[9910,9910]]],[1539999141060,["gjx16@GJXAIOU",[[1,9908,"p"]],[9908,9908],[9909,9909]]],[1539999145117,["gjx16@GJXAIOU",[[-1,9908,"p"]],[9909,9909],[9908,9908]]],[1539999146764,["gjx16@GJXAIOU",[[1,9908,"tmp"]],[9908,9908],[9911,9911]]],[1539999164066,["gjx16@GJXAIOU",[[-1,9914,"  p  ->  next  =  node;"]],[9937,9937],[9914,9914]]],[1539999164589,["gjx16@GJXAIOU",[[-1,9914,"\n"]],[9914,9914],[9913,9913]]],[1539999168285,["gjx16@GJXAIOU",[[-1,9924,"node"]],[9928,9928],[9924,9924]]],[1539999169320,["gjx16@GJXAIOU",[[1,9924,"0"]],[9924,9924],[9925,9925]]],[1539999175725,["gjx16@GJXAIOU",[[1,9926,"//biaohi"]],[9926,9926],[9934,9934]]],[1539999176859,["gjx16@GJXAIOU",[[-1,9928,"biaohi"]],[9934,9934],[9928,9928]]],[1539999184955,["gjx16@GJXAIOU",[[1,9928,"表示删除成功"]],[9928,9928],[9934,9934]]],[1539999203515,["gjx16@GJXAIOU",[[-1,10348,"  insert_list(first,0,10);\n\n//参数含义：链表头，指针位置，要插入的值\n"]],[10348,10398],[10348,10348]]],[1539999203939,["gjx16@GJXAIOU",[[1,10349,"\n"]],[10348,10348],[10349,10349]]],[1539999204531,["gjx16@GJXAIOU",[[1,10350,"\n"]],[10349,10349],[10350,10350]]],[1539999205926,["gjx16@GJXAIOU",[[1,10350," delete_list"]],[10350,10350],[10362,10362]]],[1539999206907,["gjx16@GJXAIOU",[[1,10364,"\n "]],[10362,10362],[10364,10364]]],[1539999207155,["gjx16@GJXAIOU",[[-1,10363," "],[1,10364,"\n"]],[10364,10364],[10364,10364]]],[1539999210407,["gjx16@GJXAIOU",[[1,10349,"、、"]],[10349,10349],[10351,10351]]],[1539999211391,["gjx16@GJXAIOU",[[-1,10349,"、、"]],[10351,10351],[10349,10349]]],[1539999214158,["gjx16@GJXAIOU",[[1,10349,"//hashu===="]],[10349,10349],[10360,10360]]],[1539999215898,["gjx16@GJXAIOU",[[-1,10351,"hashu===="]],[10360,10360],[10351,10351]]],[1539999217440,["gjx16@GJXAIOU",[[1,10351,"哈数"]],[10351,10351],[10353,10353]]],[1539999221017,["gjx16@GJXAIOU",[[-1,10351,"哈数"]],[10353,10353],[10351,10351]]],[1539999222504,["gjx16@GJXAIOU",[[1,10351,"哈数"]],[10351,10351],[10353,10353]]],[1539999223139,["gjx16@GJXAIOU",[[-1,10351,"哈数"]],[10353,10353],[10351,10351]]],[1539999226449,["gjx16@GJXAIOU",[[1,10351,"函数应用"]],[10351,10351],[10355,10355]]],[1539999227210,["gjx16@GJXAIOU",[[-1,10353,"应用"]],[10355,10355],[10353,10353]]],[1539999230656,["gjx16@GJXAIOU",[[1,10353,"引用"]],[10353,10353],[10355,10355]]],[1539999235728,["gjx16@GJXAIOU",[[1,10368,"（）；"]],[10368,10368],[10371,10371]]],[1539999243373,["gjx16@GJXAIOU",[[1,10369,"first,2"]],[10369,10369],[10376,10376]]],[1539999247301,["gjx16@GJXAIOU",[[-1,10376,"）；"]],[10378,10378],[10376,10376]]],[1539999247830,["gjx16@GJXAIOU",[[1,10376,";"]],[10376,10376],[10377,10377]]],[1539999248899,["gjx16@GJXAIOU",[[-1,10376,";"]],[10377,10377],[10376,10376]]],[1539999250486,["gjx16@GJXAIOU",[[1,10376,");"]],[10376,10376],[10378,10378]]],[1539999252204,["gjx16@GJXAIOU",[[1,10379," \n"]],[10378,10378],[10380,10380]]],[1539999269025,["gjx16@GJXAIOU",[[1,10380,"//删除首元素之后的第二个"]],[10380,10380],[10393,10393]]],[1539999271111,["gjx16@GJXAIOU",[[1,10393,"元素"]],[10393,10393],[10395,10395]]],[1540000121521,["gjx16@GJXAIOU",[[1,10438,"\n"]],[10437,10437],[10438,10438]]],[1540000126231,["gjx16@GJXAIOU",[[1,10438,"4、****"]],[10438,10438],[10442,10442]]],[1540000136900,["gjx16@GJXAIOU",[[1,10442,"返回链表中元素的个数："]],[10442,10442],[10453,10453]]],[1540000139042,["gjx16@GJXAIOU",[[1,10456,"\n"]],[10455,10455],[10456,10456]]],[1540000139242,["gjx16@GJXAIOU",[[1,10457,"\n"]],[10456,10456],[10457,10457]]],[1540000140385,["gjx16@GJXAIOU",[[1,10457,"```c\n#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n\n//在链表中指定位置删除元素\n\nint delete_list(struct  list  *ls,  int  n)\n{\n  struct  list  *p  =  ls;\n  while(p  &&  n--)\n    {\n      p  =  p  ->  next;\n    }\n\n  if(p  ==  NULL)\n    {\n      return  NULL;//n的位置大于链表节点数\n    }\n\n  struct  list  *tmp  =  p -> next;//将p ->next暂时存储\n  p -> next = p -> next -> next;//跳过要删除的元素，要删除元素的前一个元素的下一跳指向删除元素的下一个位置\n  free(tmp);\n  return  0;//表示删除成功\n};\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n delete_list（first,2);\n //删除首元素之后的第二个元素\n\n\n  traverse(first);\n  return  0;\n\n}\n```"]],[10457,10457],[11736,11736]]],[1540000170265,["gjx16@GJXAIOU",[[-1,10868,"//在链表中指定位置删除元素\n\nint delete_list(struct  list  *ls,  int  n)\n{\n  struct  list  *p  =  ls;\n  while(p  &&  n--)\n    {\n      p  =  p  ->  next;\n    }\n\n  if(p  ==  NULL)\n    {\n      return  NULL;//n的位置大于链表节点数\n    }\n\n  struct  list  *tmp  =  p -> next;//将p ->next暂时存储\n  p -> next = p -> next -> next;//跳过要删除的元素，要删除元素的前一个元素的下一跳指向删除元素的下一个位置\n  free(tmp);\n  return  0;//表示删除成功\n};"]],[10868,11237],[10868,10868]]],[1540000171009,["gjx16@GJXAIOU",[[-1,10871,"\n"]],[10868,10868],[10867,10867]]],[1540000172751,["gjx16@GJXAIOU",[[1,10867,"、、"]],[10867,10867],[10869,10869]]],[1540000173537,["gjx16@GJXAIOU",[[-1,10868,"、"]],[10869,10869],[10868,10868]]],[1540000174164,["gjx16@GJXAIOU",[[1,10868,"//"]],[10868,10868],[10870,10870]]],[1540000174958,["gjx16@GJXAIOU",[[-1,10867,"、//"]],[10870,10870],[10867,10867]]],[1540000175104,["gjx16@GJXAIOU",[[-1,10870,"\n"]],[10867,10867],[10866,10866]]],[1540000178284,["gjx16@GJXAIOU",[[1,10866,"//xi"]],[10866,10866],[10870,10870]]],[1540000178939,["gjx16@GJXAIOU",[[-1,10868,"xi"]],[10870,10870],[10868,10868]]],[1540000188649,["gjx16@GJXAIOU",[[1,10868,"相当于加上一个技术区"]],[10868,10868],[10878,10878]]],[1540000189745,["gjx16@GJXAIOU",[[-1,10875,"技术区"]],[10878,10878],[10875,10875]]],[1540000192098,["gjx16@GJXAIOU",[[1,10875,"计数器"]],[10875,10875],[10878,10878]]],[1540000194481,["gjx16@GJXAIOU",[[1,10882,"\n"]],[10878,10878],[10879,10879]]],[1540000199494,["gjx16@GJXAIOU",[[1,10879,"int conunt"]],[10879,10879],[10889,10889]]],[1540000202561,["gjx16@GJXAIOU",[[-1,10885,"nunt"]],[10889,10889],[10885,10885]]],[1540000208199,["gjx16@GJXAIOU",[[1,10885,"unt_list()"]],[10885,10885],[10895,10895]]],[1540000216022,["gjx16@GJXAIOU",[[1,10894,"struct lisr"]],[10894,10894],[10905,10905]]],[1540000216865,["gjx16@GJXAIOU",[[-1,10904,"r"]],[10905,10905],[10904,10904]]],[1540000219532,["gjx16@GJXAIOU",[[1,10904,"t    *"]],[10904,10904],[10910,10910]]],[1540000223051,["gjx16@GJXAIOU",[[-1,10906,"   *"]],[10910,10910],[10906,10906]]],[1540000225595,["gjx16@GJXAIOU",[[1,10906,"*ls"]],[10906,10906],[10909,10909]]],[1540000227225,["gjx16@GJXAIOU",[[1,10914,"\n"]],[10910,10910],[10911,10911]]],[1540000228695,["gjx16@GJXAIOU",[[1,10911,"{}"]],[10911,10911],[10913,10913]]],[1540000229609,["gjx16@GJXAIOU",[[1,10912,"\n"]],[10912,10912],[10913,10913]]],[1540000229744,["gjx16@GJXAIOU",[[1,10913,"\n"]],[10913,10913],[10914,10914]]],[1540000229900,["gjx16@GJXAIOU",[[1,10914,"\n"]],[10914,10914],[10915,10915]]],[1540000243563,["gjx16@GJXAIOU",[[1,10913,"  struct list *p = ls;"]],[10913,10913],[10935,10935]]],[1540000244001,["gjx16@GJXAIOU",[[1,10936,"  \n"]],[10935,10935],[10938,10938]]],[1540000244780,["gjx16@GJXAIOU",[[1,10938,"s"]],[10938,10938],[10939,10939]]],[1540000245401,["gjx16@GJXAIOU",[[-1,10938,"s"]],[10939,10939],[10938,10938]]],[1540000251612,["gjx16@GJXAIOU",[[1,10938,"int count = 0;"]],[10938,10938],[10952,10952]]],[1540000252476,["gjx16@GJXAIOU",[[1,10953,"  \n"]],[10952,10952],[10955,10955]]],[1540000254089,["gjx16@GJXAIOU",[[-1,10953,"  "],[1,10955,"\n"]],[10955,10955],[10954,10954]]],[1540000258426,["gjx16@GJXAIOU",[[1,10954,"  while()"]],[10954,10954],[10963,10963]]],[1540000261468,["gjx16@GJXAIOU",[[1,10962,"p"]],[10962,10962],[10963,10963]]],[1540000263818,["gjx16@GJXAIOU",[[1,10965,"  \n"]],[10964,10964],[10967,10967]]],[1540000266011,["gjx16@GJXAIOU",[[1,10967,"  {}"]],[10967,10967],[10971,10971]]],[1540000267882,["gjx16@GJXAIOU",[[1,10970,"\n    \n    \n    "]],[10970,10970],[10985,10985]]],[1540000276333,["gjx16@GJXAIOU",[[1,10975,"  count ++;"]],[10975,10975],[10986,10986]]],[1540000277273,["gjx16@GJXAIOU",[[1,10991,"  \n    "]],[10986,10986],[10993,10993]]],[1540000287596,["gjx16@GJXAIOU",[[1,10993,"p = p -> nes"]],[10993,10993],[11005,11005]]],[1540000288088,["gjx16@GJXAIOU",[[-1,11004,"s"]],[11005,11005],[11004,11004]]],[1540000288789,["gjx16@GJXAIOU",[[1,11004,"zt"]],[11004,11004],[11006,11006]]],[1540000289755,["gjx16@GJXAIOU",[[-1,11004,"zt"]],[11006,11006],[11004,11004]]],[1540000291339,["gjx16@GJXAIOU",[[1,11005,"t;"]],[11005,11005],[11007,11007]]],[1540000296068,["gjx16@GJXAIOU",[[-1,11008,"    "]],[11012,11012],[11008,11008]]],[1540000296600,["gjx16@GJXAIOU",[[-1,11008,"\n"]],[11008,11008],[11007,11007]]],[1540000300329,["gjx16@GJXAIOU",[[1,11014,"    \n"]],[11013,11013],[11018,11018]]],[1540000305181,["gjx16@GJXAIOU",[[1,11018,"return count;"]],[11018,11018],[11031,11031]]],[1540000326138,["gjx16@GJXAIOU",[[1,10865,"//返回链表中元素的个数"]],[10865,10865],[10877,10877]]],[1540000329432,["gjx16@GJXAIOU",[[1,10865,"\n"]],[10865,10865],[10866,10866]]],[1540000329564,["gjx16@GJXAIOU",[[1,10866,"\n"]],[10866,10866],[10867,10867]]],[1540000329691,["gjx16@GJXAIOU",[[1,10867,"\n"]],[10867,10867],[10868,10868]]],[1540000330105,["gjx16@GJXAIOU",[[1,10868,"\n"]],[10868,10868],[10869,10869]]],[1540000342433,["gjx16@GJXAIOU",[[-1,11470,"delete_list（first,2);"]],[11470,11491],[11470,11470]]],[1540000345760,["gjx16@GJXAIOU",[[-1,11471," //删除首元素之后的第二个元素"]],[11471,11487],[11471,11471]]],[1540000346306,["gjx16@GJXAIOU",[[-1,11473,"\n"]],[11471,11471],[11470,11470]]],[1540000350496,["gjx16@GJXAIOU",[[1,11470,"count"]],[11470,11470],[11475,11475]]],[1540000410632,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11475," "],[1,11476,"\n"],[1,11478," "]],[11020,11020],[11479,11479]]],[1540000410632,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11475," "],[-1,11475,"\n"],[-1,11478," "]],[11479,11479],[11020,11020]]],[1540000351932,["gjx16@GJXAIOU",[[1,11475,"_"]],[11475,11475],[11476,11476]]],[1540000354152,["gjx16@GJXAIOU",[[-1,11470,"count_"]],[11476,11476],[11470,11470]]],[1540000357485,["gjx16@GJXAIOU",[[1,11470,"pritnf();"]],[11470,11470],[11479,11479]]],[1540000360204,["gjx16@GJXAIOU",[[1,11477,"\"\""]],[11477,11477],[11479,11479]]],[1540000368188,["gjx16@GJXAIOU",[[1,11478,"count = %d\\n"]],[11478,11478],[11490,11490]]],[1540000371747,["gjx16@GJXAIOU",[[1,11491,",con"]],[11491,11491],[11495,11495]]],[1540000372808,["gjx16@GJXAIOU",[[-1,11494,"n"]],[11495,11495],[11494,11494]]],[1540000374005,["gjx16@GJXAIOU",[[1,11494,"unt "]],[11494,11494],[11498,11498]]],[1540000374824,["gjx16@GJXAIOU",[[-1,11497," "]],[11498,11498],[11497,11497]]],[1540000378092,["gjx16@GJXAIOU",[[1,11497,"_list("]],[11497,11497],[11503,11503]]],[1540000378183,["gjx16@GJXAIOU",[[1,11504,")"]],[11503,11503],[11504,11504]]],[1540000517127,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11506," "],[1,11507,"\n"],[1,11509," "]],[11020,11020],[11510,11510]]],[1540000517127,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11506," "],[-1,11506,"\n"],[-1,11509," "]],[11510,11510],[11020,11020]]],[1540000481277,["gjx16@GJXAIOU",[[1,11503,"fie"]],[11503,11503],[11506,11506]]],[1540000481776,["gjx16@GJXAIOU",[[-1,11505,"e"]],[11506,11506],[11505,11505]]],[1540000483102,["gjx16@GJXAIOU",[[1,11505,"rst"]],[11505,11505],[11508,11508]]],[1540000513430,["gjx16@GJXAIOU",[[-1,11473,"tn"]],[11475,11475],[11473,11473]]],[1540000515557,["gjx16@GJXAIOU",[[1,11473,"nt"]],[11473,11473],[11475,11475]]],[1540000631696,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11514," "]],[11020,11020],[11515,11515]]],[1540000631696,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11514," "]],[11515,11515],[11020,11020]]],[1540000605693,["gjx16@GJXAIOU",[[1,11512,"  printf(\"--------------\\n\");"]],[11512,11512],[11541,11541]]],[1540000610100,["gjx16@GJXAIOU",[[1,11582,"\n"]],[11581,11581],[11582,11582]]],[1540000616597,["gjx16@GJXAIOU",[[1,11582,"程序运行结果："]],[11582,11582],[11589,11589]]],[1540000617443,["gjx16@GJXAIOU",[[1,11590,"\n"]],[11589,11589],[11590,11590]]],[1540000627703,["gjx16@GJXAIOU",[[1,11590,"![计数]($resource/%E8%AE%A1%E6%95%B0.png)"]],[11590,11590],[11630,11630]]],[1540000630056,["gjx16@GJXAIOU",[[1,11630,"\n"]],[11630,11630],[11631,11631]]],[1540000630221,["gjx16@GJXAIOU",[[1,11631,"\n"]],[11631,11631],[11632,11632]]],[1540002191761,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,11582,""],[1,11632,"#"]],[11020,11020],[11633,11633]]],[1540002191761,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,11582,""],[-1,11632,"#"]],[11633,11633],[11020,11020]]],[1540002179570,["gjx16@GJXAIOU",[[1,11632,"\n"]],[11630,11630],[11631,11631]]],[1540002179749,["gjx16@GJXAIOU",[[1,11633,"\n"]],[11631,11631],[11632,11632]]],[1540002179977,["gjx16@GJXAIOU",[[1,11634,"\n"]],[11632,11632],[11633,11633]]],[1540002251743,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,11582,""],[1,11635,"#"]],[11020,11020],[11636,11636]]],[1540002251743,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,11582,""],[-1,11635,"#"]],[11636,11636],[11020,11020]]],[1540002196600,["gjx16@GJXAIOU",[[1,11635,"\n"]],[11633,11633],[11634,11634]]],[1540002198330,["gjx16@GJXAIOU",[[1,11634,"5，"]],[11634,11634],[11636,11636]]],[1540002199443,["gjx16@GJXAIOU",[[-1,11635,"，"]],[11636,11636],[11635,11635]]],[1540002199884,["gjx16@GJXAIOU",[[1,11635,",。"]],[11635,11635],[11637,11637]]],[1540002200964,["gjx16@GJXAIOU",[[-1,11635,",。"]],[11637,11637],[11635,11635]]],[1540002203590,["gjx16@GJXAIOU",[[1,11635,".****"]],[11635,11635],[11638,11638]]],[1540002209166,["gjx16@GJXAIOU",[[1,11638,"在链表中"]],[11638,11638],[11642,11642]]],[1540002245062,["gjx16@GJXAIOU",[[-1,11638,"在链表中"]],[11642,11642],[11638,11638]]],[1540002250871,["gjx16@GJXAIOU",[[1,11638,"清空链表"]],[11638,11638],[11642,11642]]],[1540002311741,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,11582,""],[1,11646,"#"]],[11020,11020],[11647,11647]]],[1540002311741,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,11582,""],[-1,11646,"#"]],[11647,11647],[11020,11020]]],[1540002259002,["gjx16@GJXAIOU",[[1,11642,"，只保留首节点"]],[11642,11642],[11649,11649]]],[1540002261046,["gjx16@GJXAIOU",[[1,11653,"\n"]],[11651,11651],[11652,11652]]],[1540002261696,["gjx16@GJXAIOU",[[1,11654,"\n"]],[11652,11652],[11653,11653]]],[1540002263883,["gjx16@GJXAIOU",[[1,11653,"```"]],[11653,11653],[11656,11656]]],[1540002263924,["gjx16@GJXAIOU",[[1,11656,"language\n```\n"]],[11656,11656],[11656,11664]]],[1540002264987,["gjx16@GJXAIOU",[[-1,11656,"language"],[1,11664,"c"]],[11656,11664],[11657,11657]]],[1540002265198,["gjx16@GJXAIOU",[[1,11658,"\n"]],[11657,11657],[11658,11658]]],[1540002265348,["gjx16@GJXAIOU",[[1,11659,"\n"]],[11658,11658],[11659,11659]]],[1540002265530,["gjx16@GJXAIOU",[[1,11660,"\n"]],[11659,11659],[11660,11660]]],[1540002265698,["gjx16@GJXAIOU",[[1,11661,"\n"]],[11660,11660],[11661,11661]]],[1540002971738,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,11582,""],[1,11668,"#"]],[11020,11020],[11669,11669]]],[1540002971738,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,11582,""],[-1,11668,"#"]],[11669,11669],[11020,11020]]],[1540002917244,["gjx16@GJXAIOU",[[1,11658,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n\n\n//返回链表中元素的个数\n//相当于加上一个计数器\nint count_list(struct list *ls)\n{\n  struct list *p = ls;\n  int count = 0;\n\n  while(p)\n    {\n      count ++;\n      p = p -> next;\n    }\n    return count;\n\n}\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n printf(\"count = %d\\n\",count_list(first));\n  printf(\"--------------\\n\");\n\n  traverse(first);\n  return  0;\n\n}"]],[11658,11658],[12773,12773]]],[1540003031755,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12783,"#"]],[11020,11020],[12784,12784]]],[1540003031755,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12783,"#"]],[12784,12784],[11020,11020]]],[1540003028972,["gjx16@GJXAIOU",[[-1,12065,"//返回链表中元素的个数\n//相当于加上一个计数器\nint count_list(struct list *ls)\n{\n  struct list *p = ls;\n  int count = 0;\n\n  while(p)\n    {\n      count ++;\n      p = p -> next;\n    }\n    return count;\n\n}\n"]],[12065,12247],[12065,12065]]],[1540003091757,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12601,"#"]],[11020,11020],[12602,12602]]],[1540003091758,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12601,"#"]],[12602,12602],[11020,11020]]],[1540003032350,["gjx16@GJXAIOU",[[1,12068,"\n"]],[12063,12063],[12064,12064]]],[1540003039444,["gjx16@GJXAIOU",[[1,12064,"void clrae"]],[12064,12064],[12074,12074]]],[1540003040615,["gjx16@GJXAIOU",[[-1,12071,"rae"]],[12074,12074],[12071,12071]]],[1540003047826,["gjx16@GJXAIOU",[[1,12071,"ear_list()"]],[12071,12071],[12081,12081]]],[1540003055719,["gjx16@GJXAIOU",[[1,12080,"struct list *la"]],[12080,12080],[12095,12095]]],[1540003056747,["gjx16@GJXAIOU",[[-1,12094,"a"]],[12095,12095],[12094,12094]]],[1540003056905,["gjx16@GJXAIOU",[[1,12094,"s"]],[12094,12094],[12095,12095]]],[1540003058632,["gjx16@GJXAIOU",[[1,12101,"\n"]],[12096,12096],[12097,12097]]],[1540003151754,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12635,"#"]],[11020,11020],[12636,12636]]],[1540003151754,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12635,"#"]],[12636,12636],[11020,11020]]],[1540003138317,["gjx16@GJXAIOU",[[1,12096,"//qingko"]],[12096,12096],[12104,12104]]],[1540003139916,["gjx16@GJXAIOU",[[-1,12098,"qingko"]],[12104,12104],[12098,12098]]],[1540003147416,["gjx16@GJXAIOU",[[1,12098,"清空链表，"]],[12098,12098],[12103,12103]]],[1540003211767,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12642,"#"]],[11020,11020],[12643,12643]]],[1540003211767,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12642,"#"]],[12643,12643],[11020,11020]]],[1540003167607,["gjx16@GJXAIOU",[[1,12103,"只保留首节点"]],[12103,12103],[12109,12109]]],[1540003169399,["gjx16@GJXAIOU",[[1,12115,"\n"]],[12109,12109],[12110,12110]]],[1540003171215,["gjx16@GJXAIOU",[[1,12110,"{}"]],[12110,12110],[12112,12112]]],[1540003172325,["gjx16@GJXAIOU",[[1,12111,"\n"]],[12111,12111],[12112,12112]]],[1540003172477,["gjx16@GJXAIOU",[[1,12112,"\n"]],[12112,12112],[12113,12113]]],[1540003172668,["gjx16@GJXAIOU",[[1,12113,"\n"]],[12113,12113],[12114,12114]]],[1540003178846,["gjx16@GJXAIOU",[[1,12112,"    struxt"]],[12112,12112],[12122,12122]]],[1540003179307,["gjx16@GJXAIOU",[[-1,12121,"t"]],[12122,12122],[12121,12121]]],[1540003179455,["gjx16@GJXAIOU",[[1,12121,"e"]],[12121,12121],[12122,12122]]],[1540003180156,["gjx16@GJXAIOU",[[-1,12120,"xe"]],[12122,12122],[12120,12120]]],[1540003185401,["gjx16@GJXAIOU",[[1,12120,"ct list ("]],[12120,12120],[12129,12129]]],[1540003185957,["gjx16@GJXAIOU",[[-1,12128,"("]],[12129,12129],[12128,12128]]],[1540003196591,["gjx16@GJXAIOU",[[1,12128,"*p = ls -> next;"]],[12128,12128],[12144,12144]]],[1540003197141,["gjx16@GJXAIOU",[[1,12145,"    \n"]],[12144,12144],[12149,12149]]],[1540003200550,["gjx16@GJXAIOU",[[1,12149,"free();"]],[12149,12149],[12156,12156]]],[1540003202946,["gjx16@GJXAIOU",[[1,12154,"p"]],[12154,12154],[12155,12155]]],[1540003205780,["gjx16@GJXAIOU",[[1,12158,"    \n"]],[12157,12157],[12162,12162]]],[1540003271757,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12704,"#"]],[11020,11020],[12705,12705]]],[1540003271757,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12704,"#"]],[12705,12705],[11020,11020]]],[1540003224667,["gjx16@GJXAIOU",[[-1,12158,"    "]],[12162,12162],[12158,12158]]],[1540003224817,["gjx16@GJXAIOU",[[-1,12159,"\n"]],[12158,12158],[12157,12157]]],[1540003226722,["gjx16@GJXAIOU",[[-1,12148," free(p);"]],[12157,12157],[12148,12148]]],[1540003228015,["gjx16@GJXAIOU",[[1,12148,"  "]],[12148,12148],[12150,12150]]],[1540003229307,["gjx16@GJXAIOU",[[-1,12149," "]],[12150,12150],[12149,12149]]],[1540003232024,["gjx16@GJXAIOU",[[1,12149,"while()"]],[12149,12149],[12156,12156]]],[1540003235159,["gjx16@GJXAIOU",[[1,12155,"p"]],[12155,12155],[12156,12156]]],[1540003236452,["gjx16@GJXAIOU",[[1,12158,"    \n"]],[12157,12157],[12162,12162]]],[1540003239511,["gjx16@GJXAIOU",[[1,12162,"  {}"]],[12162,12162],[12166,12166]]],[1540003240943,["gjx16@GJXAIOU",[[1,12165,"\n      \n      "]],[12165,12165],[12179,12179]]],[1540003252031,["gjx16@GJXAIOU",[[1,12172,"  struct ;ist"]],[12172,12172],[12185,12185]]],[1540003254037,["gjx16@GJXAIOU",[[-1,12181,";ist"]],[12185,12185],[12181,12181]]],[1540003265982,["gjx16@GJXAIOU",[[1,12181,"list *tmp = p"]],[12181,12181],[12194,12194]]],[1540003331757,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12744,"#"]],[11020,11020],[12745,12745]]],[1540003331757,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12744,"#"]],[12745,12745],[11020,11020]]],[1540003296103,["gjx16@GJXAIOU",[[1,12194," ->next;"]],[12194,12194],[12202,12202]]],[1540003297604,["gjx16@GJXAIOU",[[1,12209,"  \n      "]],[12202,12202],[12211,12211]]],[1540003302481,["gjx16@GJXAIOU",[[1,12211,"free();"]],[12211,12211],[12218,12218]]],[1540003305456,["gjx16@GJXAIOU",[[1,12216,"p"]],[12216,12216],[12217,12217]]],[1540003307356,["gjx16@GJXAIOU",[[1,12226,"  \n      "]],[12219,12219],[12228,12228]]],[1540003313151,["gjx16@GJXAIOU",[[1,12228,"p = tmp;"]],[12228,12228],[12236,12236]]],[1540003316943,["gjx16@GJXAIOU",[[1,12245,"      \n"]],[12244,12244],[12251,12251]]],[1540003319763,["gjx16@GJXAIOU",[[-1,12252,"\n"]],[12252,12252],[12251,12251]]],[1540003391759,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12792,"#"]],[11020,11020],[12793,12793]]],[1540003391759,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12792,"#"]],[12793,12793],[11020,11020]]],[1540003334218,["gjx16@GJXAIOU",[[1,12251,"is"]],[12251,12251],[12253,12253]]],[1540003335419,["gjx16@GJXAIOU",[[-1,12251,"is"]],[12253,12253],[12251,12251]]],[1540003349978,["gjx16@GJXAIOU",[[1,12251,"ls -> next = NULL;"]],[12251,12251],[12269,12269]]],[1540003451762,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12810,"#"]],[11020,11020],[12811,12811]]],[1540003451762,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12810,"#"]],[12811,12811],[11020,11020]]],[1540003420419,["gjx16@GJXAIOU",[[1,12269,"//zhi"]],[12269,12269],[12274,12274]]],[1540003421562,["gjx16@GJXAIOU",[[-1,12271,"zhi"]],[12274,12274],[12271,12271]]],[1540003444291,["gjx16@GJXAIOU",[[1,12271,"只有首节点，那么首节点的next也"]],[12271,12271],[12288,12288]]],[1540003511761,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12829,"#"]],[11020,11020],[12830,12830]]],[1540003511761,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12829,"#"]],[12830,12830],[11020,11020]]],[1540003464771,["gjx16@GJXAIOU",[[1,12288,"应该设置为NULL"]],[12288,12288],[12297,12297]]],[1540003489097,["gjx16@GJXAIOU",[[1,12202,"//暂存p的下一季"]],[12202,12202],[12211,12211]]],[1540003490226,["gjx16@GJXAIOU",[[-1,12210,"季"]],[12211,12211],[12210,12210]]],[1540003494465,["gjx16@GJXAIOU",[[1,12210,"级指向的位置"]],[12210,12210],[12216,12216]]],[1540003571770,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12852,"#"]],[11020,11020],[12853,12853]]],[1540003571770,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12852,"#"]],[12853,12853],[11020,11020]]],[1540003541666,["gjx16@GJXAIOU",[[-1,12777,"  printf(\"--------------\\n\");"]],[12806,12806],[12777,12777]]],[1540003542630,["gjx16@GJXAIOU",[[-1,12778,"\n"]],[12777,12777],[12776,12776]]],[1540003549693,["gjx16@GJXAIOU",[[-1,12735,"printf(\"count = %d\\n\",count_list(first));"]],[12776,12776],[12735,12735]]],[1540003558262,["gjx16@GJXAIOU",[[1,12735,"clear "]],[12735,12735],[12741,12741]]],[1540003559099,["gjx16@GJXAIOU",[[-1,12740," "]],[12741,12741],[12740,12740]]],[1540003560166,["gjx16@GJXAIOU",[[1,12740,"_ "]],[12740,12740],[12742,12742]]],[1540003561155,["gjx16@GJXAIOU",[[-1,12741," "]],[12742,12742],[12741,12741]]],[1540003568822,["gjx16@GJXAIOU",[[1,12741,"list();"]],[12741,12741],[12748,12748]]],[1540003571476,["gjx16@GJXAIOU",[[1,12746,"fir"]],[12746,12746],[12749,12749]]],[1540003575798,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12797,"#"]],[11020,11020],[12798,12798]]],[1540003575798,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12797,"#"]],[12798,12798],[11020,11020]]],[1540003573565,["gjx16@GJXAIOU",[[1,12749,"str"]],[12749,12749],[12752,12752]]],[1540003574350,["gjx16@GJXAIOU",[[-1,12751,"r"]],[12752,12752],[12751,12751]]],[1540003995814,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12799,"#"]],[11020,11020],[12800,12800]]],[1540003995814,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12799,"#"]],[12800,12800],[11020,11020]]],[1540003981418,["gjx16@GJXAIOU",[[1,12799,"\n"]],[12796,12796],[12797,12797]]],[1540003984013,["gjx16@GJXAIOU",[[1,12797,"cheng"]],[12797,12797],[12802,12802]]],[1540003985272,["gjx16@GJXAIOU",[[-1,12797,"cheng"]],[12802,12802],[12797,12797]]],[1540003991095,["gjx16@GJXAIOU",[[1,12797,"程序运行结果："]],[12797,12797],[12804,12804]]],[1540003992242,["gjx16@GJXAIOU",[[1,12807,"\n"]],[12804,12804],[12805,12805]]],[1540004055814,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12808,"#"]],[11020,11020],[12809,12809]]],[1540004055814,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12808,"#"]],[12809,12809],[11020,11020]]],[1540004000594,["gjx16@GJXAIOU",[[1,12805,"![清空链表]($resource/%E6%B8%85%E7%A9%BA%E9%93%BE%E8%A1%A8.png)"]],[12805,12805],[12865,12865]]],[1540004019886,["gjx16@GJXAIOU",[[1,12804,"只保留了首元素，清空了其他元素"]],[12804,12804],[12819,12819]]],[1540004025370,["gjx16@GJXAIOU",[[1,12144,"、、"]],[12144,12144],[12146,12146]]],[1540004026260,["gjx16@GJXAIOU",[[-1,12144,"、、"]],[12146,12146],[12144,12144]]],[1540004027407,["gjx16@GJXAIOU",[[1,12144,"、、"]],[12144,12144],[12146,12146]]],[1540004028300,["gjx16@GJXAIOU",[[-1,12144,"、、"]],[12146,12146],[12144,12144]]],[1540004045750,["gjx16@GJXAIOU",[[1,12144,"//直接指向下一个结点，避免第一个结点被删除"]],[12144,12144],[12166,12166]]],[1540004115818,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12904,"#"]],[11020,11020],[12905,12905]]],[1540004115818,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12904,"#"]],[12905,12905],[11020,11020]]],[1540004070693,["gjx16@GJXAIOU",[[1,12904,"\n"]],[12903,12903],[12904,12904]]],[1540004080354,["gjx16@GJXAIOU",[[1,12904,"6.****"]],[12904,12904],[12908,12908]]],[1540004175818,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12911,"#"]],[11020,11020],[12912,12912]]],[1540004175818,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12911,"#"]],[12912,12912],[11020,11020]]],[1540004118480,["gjx16@GJXAIOU",[[1,12908," "]],[12908,12908],[12909,12909]]],[1540004129978,["gjx16@GJXAIOU",[[-1,12908," "]],[12909,12909],[12908,12908]]],[1540004148666,["gjx16@GJXAIOU",[[1,12908,"返回链表是否为空"]],[12908,12908],[12916,12916]]],[1540004151907,["gjx16@GJXAIOU",[[1,12919,"\n"]],[12918,12918],[12919,12919]]],[1540004155811,["gjx16@GJXAIOU",[[1,12920,"\n"]],[12919,12919],[12920,12920]]],[1540004155979,["gjx16@GJXAIOU",[[1,12921,"\n"]],[12920,12920],[12921,12921]]],[1540004156140,["gjx16@GJXAIOU",[[1,12922,"\n"]],[12921,12921],[12922,12922]]],[1540004156299,["gjx16@GJXAIOU",[[1,12923,"\n"]],[12922,12922],[12923,12923]]],[1540004235984,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,12924,"#"]],[11020,11020],[12925,12925]]],[1540004235984,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,12924,"#"]],[12925,12925],[11020,11020]]],[1540004202125,["gjx16@GJXAIOU",[[1,12920,"```"]],[12920,12920],[12923,12923]]],[1540004202171,["gjx16@GJXAIOU",[[1,12923,"language\n```\n"]],[12923,12923],[12923,12931]]],[1540004203253,["gjx16@GJXAIOU",[[-1,12923,"language"],[1,12931,"c"]],[12923,12931],[12924,12924]]],[1540004203618,["gjx16@GJXAIOU",[[1,12925,"\n"]],[12924,12924],[12925,12925]]],[1540004204970,["gjx16@GJXAIOU",[[1,12925,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n\nvoid clear_list(struct list *ls)//清空链表，只保留首节点\n{\n    struct list *p = ls -> next;//直接指向下一个结点，避免第一个结点被删除\n    while(p)\n      {\n        struct list *tmp = p ->next;//暂存p的下一级指向的位置\n        free(p);\n        p = tmp;\n      }\n      ls -> next = NULL;//只有首节点，那么首节点的next也应该设置为NULL\n}\n\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n clear_list(first);\n\n  traverse(first);\n  return  0;\n\n}\n\n"]],[12925,12925],[14080,14080]]],[1540004211585,["gjx16@GJXAIOU",[[-1,13331,"void clear_list(struct list *ls)//清空链表，只保留首节点\n{\n    struct list *p = ls -> next;//直接指向下一个结点，避免第一个结点被删除\n    while(p)\n      {\n        struct list *tmp = p ->next;//暂存p的下一级指向的位置\n        free(p);\n        p = tmp;\n      }\n      ls -> next = NULL;//只有首节点，那么首节点的next也应该设置为NULL\n}\n"]],[13331,13603],[13331,13331]]],[1540004211756,["gjx16@GJXAIOU",[[-1,13335,"\n"]],[13331,13331],[13330,13330]]],[1540004235817,["gjx16@GJXAIOU",[[1,13330,"int empty_lis"]],[13330,13330],[13343,13343]]],[1540004295967,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13829,"#"]],[11020,11020],[13830,13830]]],[1540004295967,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13829,"#"]],[13830,13830],[11020,11020]]],[1540004237437,["gjx16@GJXAIOU",[[1,13343,"t()"]],[13343,13343],[13346,13346]]],[1540005015977,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13832,"#"]],[11020,11020],[13833,13833]]],[1540005015977,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13832,"#"]],[13833,13833],[11020,11020]]],[1540005001452,["gjx16@GJXAIOU",[[1,13345,"struct lis"]],[13345,13345],[13355,13355]]],[1540005002464,["gjx16@GJXAIOU",[[-1,13354,"s"]],[13355,13355],[13354,13354]]],[1540005002683,["gjx16@GJXAIOU",[[1,13354,"t"]],[13354,13354],[13355,13355]]],[1540005003602,["gjx16@GJXAIOU",[[-1,13354,"t"]],[13355,13355],[13354,13354]]],[1540005007968,["gjx16@GJXAIOU",[[1,13354,"st *la"]],[13354,13354],[13360,13360]]],[1540005008688,["gjx16@GJXAIOU",[[-1,13359,"a"]],[13360,13360],[13359,13359]]],[1540005008845,["gjx16@GJXAIOU",[[1,13359,"s"]],[13359,13359],[13360,13360]]],[1540005011212,["gjx16@GJXAIOU",[[1,13366,"\n"]],[13361,13361],[13362,13362]]],[1540005013596,["gjx16@GJXAIOU",[[1,13362,"{P}"]],[13362,13362],[13365,13365]]],[1540005014271,["gjx16@GJXAIOU",[[-1,13363,"P}"]],[13365,13365],[13363,13363]]],[1540005015478,["gjx16@GJXAIOU",[[1,13363,"}"]],[13363,13363],[13364,13364]]],[1540005075981,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13850,"#"]],[11020,11020],[13851,13851]]],[1540005075981,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13850,"#"]],[13851,13851],[11020,11020]]],[1540005016858,["gjx16@GJXAIOU",[[1,13363,"\n"]],[13363,13363],[13364,13364]]],[1540005017082,["gjx16@GJXAIOU",[[1,13364,"\n"]],[13364,13364],[13365,13365]]],[1540005017480,["gjx16@GJXAIOU",[[1,13365,"\n"]],[13365,13365],[13366,13366]]],[1540005024179,["gjx16@GJXAIOU",[[1,13364,"    if()"]],[13364,13364],[13372,13372]]],[1540005032019,["gjx16@GJXAIOU",[[1,13371,"ls - > netxt"]],[13371,13371],[13383,13383]]],[1540005033400,["gjx16@GJXAIOU",[[-1,13380,"txt"]],[13383,13383],[13380,13380]]],[1540005034564,["gjx16@GJXAIOU",[[1,13380,"xt"]],[13380,13380],[13382,13382]]],[1540005038215,["gjx16@GJXAIOU",[[-1,13375," "]],[13376,13376],[13375,13375]]],[1540005041515,["gjx16@GJXAIOU",[[1,13383,"    \n"]],[13382,13382],[13387,13387]]],[1540005043923,["gjx16@GJXAIOU",[[1,13387,"  {}"]],[13387,13387],[13391,13391]]],[1540005045337,["gjx16@GJXAIOU",[[1,13390,"\n      \n      \n      "]],[13390,13390],[13411,13411]]],[1540005053508,["gjx16@GJXAIOU",[[1,13397,"  return 0;"]],[13397,13397],[13408,13408]]],[1540005059728,["gjx16@GJXAIOU",[[1,13382,"、、"]],[13382,13382],[13384,13384]]],[1540005060614,["gjx16@GJXAIOU",[[-1,13382,"、、"]],[13384,13384],[13382,13382]]],[1540005066845,["gjx16@GJXAIOU",[[1,13382,"//如果表表"]],[13382,13382],[13388,13388]]],[1540005067513,["gjx16@GJXAIOU",[[-1,13386,"表表"]],[13388,13388],[13386,13386]]],[1540005074652,["gjx16@GJXAIOU",[[1,13386,"链表不为空，"]],[13386,13386],[13392,13392]]],[1540005135980,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13922,"#"]],[11020,11020],[13923,13923]]],[1540005135980,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13922,"#"]],[13923,13923],[11020,11020]]],[1540005095081,["gjx16@GJXAIOU",[[1,13392,"因为如果这个链表是空的，这ls——"]],[13392,13392],[13409,13409]]],[1540005096647,["gjx16@GJXAIOU",[[-1,13407,"——"]],[13409,13409],[13407,13407]]],[1540005098197,["gjx16@GJXAIOU",[[1,13407,"-》"]],[13407,13407],[13409,13409]]],[1540005099177,["gjx16@GJXAIOU",[[-1,13408,"》"]],[13409,13409],[13408,13408]]],[1540005116511,["gjx16@GJXAIOU",[[1,13408,">next指向NULL；"]],[13408,13408],[13420,13420]]],[1540005195981,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13950,"#"]],[11020,11020],[13951,13951]]],[1540005195981,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13950,"#"]],[13951,13951],[11020,11020]]],[1540005141375,["gjx16@GJXAIOU",[[-1,13447,"      "]],[13453,13453],[13447,13447]]],[1540005141607,["gjx16@GJXAIOU",[[-1,13447,"\n"]],[13447,13447],[13446,13446]]],[1540005148647,["gjx16@GJXAIOU",[[1,13454,"else"]],[13454,13454],[13458,13458]]],[1540005149777,["gjx16@GJXAIOU",[[1,13459,"      \n"]],[13458,13458],[13465,13465]]],[1540005157989,["gjx16@GJXAIOU",[[1,13465,"return -1;"]],[13465,13465],[13475,13475]]],[1540005255989,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13964,"#"]],[11020,11020],[13965,13965]]],[1540005255989,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13964,"#"]],[13965,13965],[11020,11020]]],[1540005206241,["gjx16@GJXAIOU",[[-1,13899,"clear"]],[13904,13904],[13899,13899]]],[1540005209064,["gjx16@GJXAIOU",[[1,13899,"empty"]],[13899,13899],[13904,13904]]],[1540005315987,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13964,"#"]],[11020,11020],[13965,13965]]],[1540005315987,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13964,"#"]],[13965,13965],[11020,11020]]],[1540005263647,["gjx16@GJXAIOU",[[-1,13928,"e(first);"]],[13937,13937],[13928,13928]]],[1540005264042,["gjx16@GJXAIOU",[[1,13928,"\\"]],[13928,13928],[13929,13929]]],[1540005266356,["gjx16@GJXAIOU",[[-1,13919,"  travers\\"]],[13929,13929],[13919,13919]]],[1540005266528,["gjx16@GJXAIOU",[[-1,13919,"\n"]],[13919,13919],[13918,13918]]],[1540005266665,["gjx16@GJXAIOU",[[-1,13918,"\n"]],[13918,13918],[13917,13917]]],[1540005266901,["gjx16@GJXAIOU",[[-1,13916,";"]],[13917,13917],[13916,13916]]],[1540005268414,["gjx16@GJXAIOU",[[1,13916,";"]],[13916,13916],[13917,13917]]],[1540005280481,["gjx16@GJXAIOU",[[1,13941,"7.****"]],[13941,13941],[13945,13945]]],[1540005282341,["gjx16@GJXAIOU",[[1,13945,"fanh"]],[13945,13945],[13949,13949]]],[1540005284887,["gjx16@GJXAIOU",[[-1,13945,"fanh"]],[13949,13949],[13945,13945]]],[1540005295621,["gjx16@GJXAIOU",[[1,13945,"返回链表指定位置的结点"]],[13945,13945],[13956,13956]]],[1540005296760,["gjx16@GJXAIOU",[[-1,13954,"结点"]],[13956,13956],[13954,13954]]],[1540005300349,["gjx16@GJXAIOU",[[1,13954,"节点"]],[13954,13954],[13956,13956]]],[1540005302653,["gjx16@GJXAIOU",[[1,13961,"\n"]],[13958,13958],[13959,13959]]],[1540005435989,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,13962,"#"]],[11020,11020],[13963,13963]]],[1540005435989,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,13962,"#"]],[13963,13963],[11020,11020]]],[1540005427619,["gjx16@GJXAIOU",[[1,13960,"```c\n#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\nint empty_list(struct list *ls)\n{\n    if(ls -> next)//如果链表不为空，因为如果这个链表是空的，这ls->next指向NULL；\n      {\n        return 0;\n      }else\n      return -1;\n\n}\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n empty_list(first);\n  return  0;\n\n}\n\n\n```"]],[13960,13960],[14979,14979]]],[1540005495991,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,14981,"#"]],[11020,11020],[14982,14982]]],[1540005495991,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,14981,"#"]],[14982,14982],[11020,11020]]],[1540005449662,["gjx16@GJXAIOU",[[-1,14370,"int empty_list"]],[14384,14384],[14370,14370]]],[1540005466531,["gjx16@GJXAIOU",[[1,14370,"struct list *locale_list"]],[14370,14370],[14394,14394]]],[1540005474228,["gjx16@GJXAIOU",[[1,14410,",int n"]],[14410,14410],[14416,14416]]],[1540005480998,["gjx16@GJXAIOU",[[-1,14423," if(ls -> next)//如果链表不为空，因为如果这个链表是空的，这ls->next指向NULL；\n      {\n        return 0;\n      }else\n      return -1;\n"]],[14423,14532],[14423,14423]]],[1540005485314,["gjx16@GJXAIOU",[[1,14423,"dtruct"]],[14423,14423],[14429,14429]]],[1540005487166,["gjx16@GJXAIOU",[[-1,14423,"dtruct"]],[14429,14429],[14423,14423]]],[1540005492579,["gjx16@GJXAIOU",[[1,14423,"struct list ("]],[14423,14423],[14436,14436]]],[1540005493039,["gjx16@GJXAIOU",[[-1,14435,"("]],[14436,14436],[14435,14435]]],[1540005494955,["gjx16@GJXAIOU",[[1,14435,"*p "]],[14435,14435],[14438,14438]]],[1540005555995,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,14903,"#"]],[11020,11020],[14904,14904]]],[1540005555995,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,14903,"#"]],[14904,14904],[11020,11020]]],[1540005497307,["gjx16@GJXAIOU",[[1,14438,"= ls"]],[14438,14438],[14442,14442]]],[1540005497790,["gjx16@GJXAIOU",[[-1,14441,"s"]],[14442,14442],[14441,14441]]],[1540005499339,["gjx16@GJXAIOU",[[1,14441,"s;"]],[14441,14441],[14443,14443]]],[1540005499992,["gjx16@GJXAIOU",[[1,14444,"   \n"]],[14443,14443],[14447,14447]]],[1540005501571,["gjx16@GJXAIOU",[[1,14447,"ehilr"]],[14447,14447],[14452,14452]]],[1540005503494,["gjx16@GJXAIOU",[[-1,14447,"ehilr"]],[14452,14452],[14447,14447]]],[1540005505207,["gjx16@GJXAIOU",[[1,14447,"whike"]],[14447,14447],[14452,14452]]],[1540005505908,["gjx16@GJXAIOU",[[-1,14450,"ke"]],[14452,14452],[14450,14450]]],[1540005507497,["gjx16@GJXAIOU",[[1,14450,"le()"]],[14450,14450],[14454,14454]]],[1540005515214,["gjx16@GJXAIOU",[[1,14453,"pp && n_"]],[14453,14453],[14461,14461]]],[1540005516055,["gjx16@GJXAIOU",[[-1,14460,"_"]],[14461,14461],[14460,14460]]],[1540005517020,["gjx16@GJXAIOU",[[1,14460,"--"]],[14460,14460],[14462,14462]]],[1540005519099,["gjx16@GJXAIOU",[[1,14464,"   \n"]],[14463,14463],[14467,14467]]],[1540005520903,["gjx16@GJXAIOU",[[1,14467,"{}"]],[14467,14467],[14469,14469]]],[1540005522480,["gjx16@GJXAIOU",[[1,14468,"\n   \n   "]],[14468,14468],[14476,14476]]],[1540005552022,["gjx16@GJXAIOU",[[1,14463,"//因为只能从表头挨个循环查找"]],[14463,14463],[14478,14478]]],[1540005615992,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,14957,"#"]],[11020,11020],[14958,14958]]],[1540005615992,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,14957,"#"]],[14958,14958],[11020,11020]]],[1540005573667,["gjx16@GJXAIOU",[[1,14487,"    p = p -> next;"]],[14487,14487],[14505,14505]]],[1540005579819,["gjx16@GJXAIOU",[[1,14511,"   \n"]],[14510,14510],[14514,14514]]],[1540005582987,["gjx16@GJXAIOU",[[1,14514,"if()"]],[14514,14514],[14518,14518]]],[1540005590028,["gjx16@GJXAIOU",[[1,14517,"p == NULL"]],[14517,14517],[14526,14526]]],[1540005592640,["gjx16@GJXAIOU",[[1,14528,"   \n"]],[14527,14527],[14531,14531]]],[1540005598699,["gjx16@GJXAIOU",[[1,14531,"  return NULL;"]],[14531,14531],[14545,14545]]],[1540005601400,["gjx16@GJXAIOU",[[1,14546,"     \n"]],[14545,14545],[14551,14551]]],[1540005601888,["gjx16@GJXAIOU",[[-1,14546,"     "],[1,14551,"\n"]],[14551,14551],[14547,14547]]],[1540005608012,["gjx16@GJXAIOU",[[1,14547,"  return p;"]],[14547,14547],[14558,14558]]],[1540005675997,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15023,"#"]],[11020,11020],[15024,15024]]],[1540005675997,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15023,"#"]],[15024,15024],[11020,11020]]],[1540005622464,["gjx16@GJXAIOU",[[1,14370,"\n"]],[14369,14369],[14370,14370]]],[1540005636325,["gjx16@GJXAIOU",[[1,14370,"//返回链表指定位置的节点"]],[14370,14370],[14383,14383]]],[1540005653918,["gjx16@GJXAIOU",[[-1,14995,"empty_list(first);"]],[15013,15013],[14995,14995]]],[1540005662139,["gjx16@GJXAIOU",[[1,14995,"locale_firdt"]],[14995,14995],[15007,15007]]],[1540005662880,["gjx16@GJXAIOU",[[-1,15005,"dt"]],[15007,15007],[15005,15005]]],[1540005665283,["gjx16@GJXAIOU",[[1,15005,"st();"]],[15005,15005],[15010,15010]]],[1540005668498,["gjx16@GJXAIOU",[[1,15008,"\"\""]],[15008,15008],[15010,15010]]],[1540005736002,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15036,"#"]],[11020,11020],[15037,15037]]],[1540005736002,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15036,"#"]],[15037,15037],[11020,11020]]],[1540005680240,["gjx16@GJXAIOU",[[1,14995,"pritnf"]],[14995,14995],[15001,15001]]],[1540005681849,["gjx16@GJXAIOU",[[-1,14998,"tnf"]],[15001,15001],[14998,14998]]],[1540005686742,["gjx16@GJXAIOU",[[1,14998,"ntf（"]],[14998,14998],[15002,15002]]],[1540005694102,["gjx16@GJXAIOU",[[1,15018,"）"]],[15018,15018],[15019,15019]]],[1540005700606,["gjx16@GJXAIOU",[[-1,15014,"(\"\""]],[15017,15017],[15014,15014]]],[1540005702372,["gjx16@GJXAIOU",[[1,15014,"（"]],[15014,15014],[15015,15015]]],[1540005710718,["gjx16@GJXAIOU",[[-1,15014,"（"]],[15015,15015],[15014,15014]]],[1540005714564,["gjx16@GJXAIOU",[[1,15014,"(dirst"]],[15014,15014],[15020,15020]]],[1540005715783,["gjx16@GJXAIOU",[[-1,15015,"dirst"]],[15020,15020],[15015,15015]]],[1540005721638,["gjx16@GJXAIOU",[[1,15015,"first,2"]],[15015,15015],[15022,15022]]],[1540005729278,["gjx16@GJXAIOU",[[-1,15001,"（"]],[15002,15002],[15001,15001]]],[1540005730821,["gjx16@GJXAIOU",[[1,15001,"("]],[15001,15001],[15002,15002]]],[1540005734750,["gjx16@GJXAIOU",[[-1,15023,"）"]],[15024,15024],[15023,15023]]],[1540005735166,["gjx16@GJXAIOU",[[1,15023,")"]],[15023,15023],[15024,15024]]],[1540005796002,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15049,"#"]],[11020,11020],[15050,15050]]],[1540005796002,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15049,"#"]],[15050,15050],[11020,11020]]],[1540005741768,["gjx16@GJXAIOU",[[1,15002,"\"\""]],[15002,15002],[15004,15004]]],[1540005745091,["gjx16@GJXAIOU",[[1,15003,"%d"]],[15003,15003],[15005,15005]]],[1540005748428,["gjx16@GJXAIOU",[[1,15006,","]],[15006,15006],[15007,15007]]],[1540005769219,["gjx16@GJXAIOU",[[1,15028," - "]],[15028,15028],[15031,15031]]],[1540005770176,["gjx16@GJXAIOU",[[-1,15030," "]],[15031,15031],[15030,15030]]],[1540005773783,["gjx16@GJXAIOU",[[1,15030,"> data"]],[15030,15030],[15036,15036]]],[1540005795226,["gjx16@GJXAIOU",[[1,15005,"\\n"]],[15005,15005],[15007,15007]]],[1540005878061,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15064,"#"]],[11020,11020],[15065,15065]]],[1540005878061,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15064,"#"]],[15065,15065],[11020,11020]]],[1540005866680,["gjx16@GJXAIOU",[[-1,14468,"p"]],[14469,14469],[14468,14468]]],[1540005875230,["gjx16@GJXAIOU",[[-1,15015,"fir"]],[15018,15018],[15015,15015]]],[1540005876327,["gjx16@GJXAIOU",[[1,15015,"li"]],[15015,15015],[15017,15017]]],[1540005998064,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15062,"#"]],[11020,11020],[15063,15063]]],[1540005998064,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15062,"#"]],[15063,15063],[11020,11020]]],[1540005974337,["gjx16@GJXAIOU",[[1,15062,"\n"]],[15060,15060],[15061,15061]]],[1540005975820,["gjx16@GJXAIOU",[[1,15061,"c"]],[15061,15061],[15062,15062]]],[1540005976669,["gjx16@GJXAIOU",[[-1,15061,"c"]],[15062,15062],[15061,15061]]],[1540005981309,["gjx16@GJXAIOU",[[1,15061,"程序运行结果："]],[15061,15061],[15068,15068]]],[1540005982224,["gjx16@GJXAIOU",[[1,15070,"\n"]],[15068,15068],[15069,15069]]],[1540005992619,["gjx16@GJXAIOU",[[1,15069,"![返回链表指定位置的节点]($resource/%E8%BF%94%E5%9B%9E%E9%93%BE%E8%A1%A8%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%8A%82%E7%82%B9.png)"]],[15069,15069],[15199,15199]]],[1540016829292,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15200,"#"]],[11020,11020],[15201,15201]]],[1540016829292,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15200,"#"]],[15201,15201],[11020,11020]]],[1540016798868,["gjx16@GJXAIOU",[[1,15200,"\n"]],[15198,15198],[15199,15199]]],[1540016799054,["gjx16@GJXAIOU",[[1,15201,"\n"]],[15199,15199],[15200,15200]]],[1540016799209,["gjx16@GJXAIOU",[[1,15202,"\n"]],[15200,15200],[15201,15201]]],[1540016949253,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15203,"#"]],[11020,11020],[15204,15204]]],[1540016949253,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15203,"#"]],[15204,15204],[11020,11020]]],[1540016920492,["gjx16@GJXAIOU",[[1,15203,"\n"]],[15200,15200],[15201,15201]]],[1540016922393,["gjx16@GJXAIOU",[[1,15201,"****"]],[15201,15201],[15203,15203]]],[1540016925935,["gjx16@GJXAIOU",[[1,15201,"8."]],[15201,15201],[15203,15203]]],[1540016941719,["gjx16@GJXAIOU",[[1,15205,"返回数据域等于data的节点"]],[15205,15205],[15219,15219]]],[1540016944172,["gjx16@GJXAIOU",[[1,15224,"\n"]],[15221,15221],[15222,15222]]],[1540016947001,["gjx16@GJXAIOU",[[1,15222,"```"]],[15222,15222],[15225,15225]]],[1540016947047,["gjx16@GJXAIOU",[[1,15225,"language\n```\n"]],[15225,15225],[15225,15233]]],[1540016948080,["gjx16@GJXAIOU",[[-1,15225,"language"],[1,15233,"c"]],[15225,15233],[15226,15226]]],[1540016948340,["gjx16@GJXAIOU",[[1,15227,"\n"]],[15226,15226],[15227,15227]]],[1540017009274,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,15235,"#"]],[11020,11020],[15236,15236]]],[1540017009274,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,15235,"#"]],[15236,15236],[11020,11020]]],[1540016962770,["gjx16@GJXAIOU",[[1,15227,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n//返回链表指定位置的节点\nstruct list *locale_list(struct list *ls,int n)\n{\n   struct list *p = ls;\n   while(p && n--)//因为只能从表头挨个循环查找\n   {\n       p = p -> next;\n   }\n   if(p == NULL)\n     return NULL;\n\n  return p;\n}\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n printf(\"%d\\n\",locale_list(first,2) -> data);\n  return  0;\n\n}\n"]],[15227,15227],[16317,16317]]],[1540016980161,["gjx16@GJXAIOU",[[-1,15664,"e_list"]],[15670,15670],[15664,15664]]],[1540016981935,["gjx16@GJXAIOU",[[1,15664,"e"]],[15664,15664],[15665,15665]]],[1540016987543,["gjx16@GJXAIOU",[[1,15659,"e"]],[15659,15659],[15660,15660]]],[1540016987781,["gjx16@GJXAIOU",[[1,15661,"l"]],[15660,15660],[15661,15661]]],[1540016990719,["gjx16@GJXAIOU",[[1,15661,"em_"]],[15661,15661],[15664,15664]]],[1540016999926,["gjx16@GJXAIOU",[[-1,15691,"n"]],[15692,15692],[15691,15691]]],[1540017001224,["gjx16@GJXAIOU",[[1,15691,"data"]],[15691,15691],[15695,15695]]],[1540017007458,["gjx16@GJXAIOU",[[-1,15636,"链表指定位置的节点"]],[15645,15645],[15636,15636]]],[1540017008559,["gjx16@GJXAIOU",[[1,15636,"sj"]],[15636,15636],[15638,15638]]],[1540017009037,["gjx16@GJXAIOU",[[-1,15637,"j"]],[15638,15638],[15637,15637]]],[1540017069379,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,16320,"#"]],[11020,11020],[16321,16321]]],[1540017069379,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,16320,"#"]],[16321,16321],[11020,11020]]],[1540017009996,["gjx16@GJXAIOU",[[1,15637,"huj"]],[15637,15637],[15640,15640]]],[1540017011270,["gjx16@GJXAIOU",[[-1,15636,"shuj"]],[15640,15640],[15636,15636]]],[1540017020626,["gjx16@GJXAIOU",[[1,15636,"数据域等于data的节点"]],[15636,15636],[15648,15648]]],[1540017029139,["gjx16@GJXAIOU",[[-1,15736," && n--"]],[15736,15743],[15736,15736]]],[1540017035789,["gjx16@GJXAIOU",[[-1,15730,"hile(p)//因为只能从表头挨个循环查找"]],[15752,15752],[15730,15730]]],[1540017039951,["gjx16@GJXAIOU",[[1,15730,"hile()"]],[15730,15730],[15736,15736]]],[1540017041183,["gjx16@GJXAIOU",[[1,15735,"p"]],[15735,15735],[15736,15736]]],[1540017051775,["gjx16@GJXAIOU",[[-1,15787,"     return NULL;"]],[15804,15804],[15787,15787]]],[1540017051910,["gjx16@GJXAIOU",[[-1,15788,"\n"]],[15787,15787],[15786,15786]]],[1540017055020,["gjx16@GJXAIOU",[[-1,15773,"if(p == NULL)"]],[15786,15786],[15773,15773]]],[1540017060373,["gjx16@GJXAIOU",[[1,15750,"if()"]],[15750,15750],[15754,15754]]],[1540017069143,["gjx16@GJXAIOU",[[1,15753,"p -> data "]],[15753,15753],[15763,15763]]],[1540017129385,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,16292,"#"]],[11020,11020],[16293,16293]]],[1540017129385,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,16292,"#"]],[16293,16293],[11020,11020]]],[1540017071739,["gjx16@GJXAIOU",[[1,15763,"== data"]],[15763,15763],[15770,15770]]],[1540017079485,["gjx16@GJXAIOU",[[1,15771,"\n       \n       "]],[15771,15771],[15779,15779]]],[1540017080248,["gjx16@GJXAIOU",[[1,15779,"t"]],[15779,15779],[15780,15780]]],[1540017080811,["gjx16@GJXAIOU",[[-1,15779,"t"]],[15780,15780],[15779,15779]]],[1540017082059,["gjx16@GJXAIOU",[[1,15779,"reru"]],[15779,15779],[15783,15783]]],[1540017082969,["gjx16@GJXAIOU",[[-1,15781,"ru"]],[15783,15783],[15781,15781]]],[1540017086775,["gjx16@GJXAIOU",[[1,15781,"turn p ;"]],[15781,15781],[15789,15789]]],[1540017088786,["gjx16@GJXAIOU",[[-1,15787," ;"]],[15789,15789],[15787,15787]]],[1540017089584,["gjx16@GJXAIOU",[[1,15787,";"]],[15787,15787],[15788,15788]]],[1540017098571,["gjx16@GJXAIOU",[[-1,15820,"\n"]],[15820,15820],[15819,15819]]],[1540017099549,["gjx16@GJXAIOU",[[-1,15816,"   "]],[15819,15819],[15816,15816]]],[1540017099906,["gjx16@GJXAIOU",[[-1,15816,"\n"]],[15816,15816],[15815,15815]]],[1540017104068,["gjx16@GJXAIOU",[[-1,15825,"p"]],[15826,15826],[15825,15825]]],[1540017105620,["gjx16@GJXAIOU",[[1,15825,"NULL"]],[15825,15825],[15829,15829]]],[1540017129018,["gjx16@GJXAIOU",[[1,15830,"//没有找到"]],[15830,15830],[15836,15836]]],[1540017187224,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,16328,"#"]],[11020,11020],[16329,16329]]],[1540017187224,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,16328,"#"]],[16329,16329],[11020,11020]]],[1540017135937,["gjx16@GJXAIOU",[[1,15836,"数据域等于data的节点"]],[15836,15836],[15848,15848]]],[1540017166602,["gjx16@GJXAIOU",[[1,16285,"elem_"],[-1,16291,"_list(first,2) -> data"]],[16285,16313],[16296,16296]]],[1540017172335,["gjx16@GJXAIOU",[[1,16296,"（）"]],[16296,16296],[16298,16298]]],[1540017174592,["gjx16@GJXAIOU",[[-1,16296,"（）"]],[16298,16298],[16296,16296]]],[1540017175978,["gjx16@GJXAIOU",[[1,16296,"("]],[16296,16296],[16297,16297]]],[1540017176110,["gjx16@GJXAIOU",[[1,16298,")"]],[16297,16297],[16298,16298]]],[1540017179114,["gjx16@GJXAIOU",[[1,16297,"fird"]],[16297,16297],[16301,16301]]],[1540017180005,["gjx16@GJXAIOU",[[-1,16300,"d"]],[16301,16301],[16300,16300]]],[1540017185698,["gjx16@GJXAIOU",[[1,16300,"st,3"]],[16300,16300],[16304,16304]]],[1540017307240,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,16332,"#"]],[11020,11020],[16333,16333]]],[1540017307240,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,16332,"#"]],[16333,16333],[11020,11020]]],[1540017256436,["gjx16@GJXAIOU",[[1,16332,"\n"]],[16328,16328],[16329,16329]]],[1540017256599,["gjx16@GJXAIOU",[[1,16333,"\n"]],[16329,16329],[16330,16330]]],[1540017259317,["gjx16@GJXAIOU",[[1,16330,"cheng"]],[16330,16330],[16335,16335]]],[1540017260973,["gjx16@GJXAIOU",[[-1,16330,"cheng"]],[16335,16335],[16330,16330]]],[1540017275156,["gjx16@GJXAIOU",[[1,16330,"程序运行结果：暂不清楚"]],[16330,16330],[16341,16341]]],[1540017279645,["gjx16@GJXAIOU",[[1,16337,"~~~~"]],[16337,16337],[16339,16339]]],[1540017281314,["gjx16@GJXAIOU",[[-1,16339,"~~"]],[16339,16339],[16337,16337]]],[1540017286156,["gjx16@GJXAIOU",[[1,16343,"~~"]],[16343,16343],[16345,16345]]],[1540017294335,["gjx16@GJXAIOU",[[1,16349,"\n"]],[16346,16346],[16347,16347]]],[1540017294516,["gjx16@GJXAIOU",[[1,16350,"\n"]],[16347,16347],[16348,16348]]],[1540017296611,["gjx16@GJXAIOU",[[1,16348,"9、****"]],[16348,16348],[16352,16352]]],[1540017367242,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,16357,"#"]],[11020,11020],[16358,16358]]],[1540017367242,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,16357,"#"]],[16358,16358],[11020,11020]]],[1540017316874,["gjx16@GJXAIOU",[[1,16352,"返回数据"]],[16352,16352],[16356,16356]]],[1540017318978,["gjx16@GJXAIOU",[[-1,16354,"数据"]],[16356,16356],[16354,16354]]],[1540017329419,["gjx16@GJXAIOU",[[1,16354,"数据域等于data的节点位置"]],[16354,16354],[16368,16368]]],[1540017331496,["gjx16@GJXAIOU",[[1,16373,"\n"]],[16370,16370],[16371,16371]]],[1540017332524,["gjx16@GJXAIOU",[[1,16374,"\n"]],[16371,16371],[16372,16372]]],[1540017334096,["gjx16@GJXAIOU",[[1,16372,"```"]],[16372,16372],[16375,16375]]],[1540017334154,["gjx16@GJXAIOU",[[1,16375,"language\n```\n"]],[16375,16375],[16375,16383]]],[1540017335279,["gjx16@GJXAIOU",[[-1,16375,"language"],[1,16383,"c"]],[16375,16383],[16376,16376]]],[1540017335470,["gjx16@GJXAIOU",[[1,16377,"\n"]],[16376,16376],[16377,16377]]],[1540017335688,["gjx16@GJXAIOU",[[1,16378,"\n"]],[16377,16377],[16378,16378]]],[1540017335826,["gjx16@GJXAIOU",[[1,16379,"\n"]],[16378,16378],[16379,16379]]],[1540017349531,["gjx16@GJXAIOU",[[1,16377,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n//返回数据域等于data的节点\nstruct list *elem_locale(struct list *ls,int data)\n{\n   struct list *p = ls;\n   while(p)\n   {\n       if(p -> data == data)\n       return p;\n       p = p -> next;\n   }\n  return NULL;//没有找到数据域等于data的节点\n}\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n printf(\"%d\\n\",elem_locale(first,3));\n  return  0;\n\n}"]],[16377,16377],[17473,17473]]],[1540017353923,["gjx16@GJXAIOU",[[-1,17475,"\n"]],[17475,17475],[17474,17474]]],[1540017427240,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17482,"#"]],[11020,11020],[17483,17483]]],[1540017427240,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17482,"#"]],[17483,17483],[11020,11020]]],[1540017401044,["gjx16@GJXAIOU",[[1,16798,"weizhi"]],[16798,16798],[16804,16804]]],[1540017403474,["gjx16@GJXAIOU",[[-1,16798,"weizhi"]],[16804,16804],[16798,16798]]],[1540017405274,["gjx16@GJXAIOU",[[1,16798,"位置"]],[16798,16798],[16800,16800]]],[1540017422660,["gjx16@GJXAIOU",[[-1,16801,"structlist "]],[16812,16812],[16801,16801]]],[1540017424440,["gjx16@GJXAIOU",[[1,16801,"int"]],[16801,16801],[16804,16804]]],[1540017487244,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17476,"#"]],[11020,11020],[17477,17477]]],[1540017487244,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17476,"#"]],[17477,17477],[11020,11020]]],[1540017428698,["gjx16@GJXAIOU",[[-1,16805,"*"]],[16806,16806],[16805,16805]]],[1540017435514,["gjx16@GJXAIOU",[[-1,16810,"locale"]],[16816,16816],[16810,16810]]],[1540017438058,["gjx16@GJXAIOU",[[1,16810,"pos"]],[16810,16810],[16813,16813]]],[1540017448308,["gjx16@GJXAIOU",[[1,16845,"\n   "]],[16845,16845],[16849,16849]]],[1540017454895,["gjx16@GJXAIOU",[[1,16845,"int index = 0;"]],[16845,16845],[16859,16859]]],[1540017462117,["gjx16@GJXAIOU",[[1,16908,"\n       "]],[16908,16908],[16916,16916]]],[1540017467374,["gjx16@GJXAIOU",[[1,16908,"index = 0;"]],[16908,16908],[16918,16918]]],[1540017471210,["gjx16@GJXAIOU",[[-1,16913," = 0;"]],[16918,16918],[16913,16913]]],[1540017472886,["gjx16@GJXAIOU",[[1,16913,"++;"]],[16913,16913],[16916,16916]]],[1540017481890,["gjx16@GJXAIOU",[[-1,16960,"p"]],[16961,16961],[16960,16960]]],[1540017484895,["gjx16@GJXAIOU",[[1,16960,"index"]],[16960,16960],[16965,16965]]],[1540017502789,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17510,"#"]],[11020,11020],[17511,17511]]],[1540017502789,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17510,"#"]],[17511,17511],[11020,11020]]],[1540017499946,["gjx16@GJXAIOU",[[1,17463," "],[-1,17468,"locale"],[1,17474,"pos"]],[17463,17474],[17472,17472]]],[1540017562786,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17508,"#"]],[11020,11020],[17509,17509]]],[1540017562786,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17508,"#"]],[17509,17509],[11020,11020]]],[1540017552420,["gjx16@GJXAIOU",[[1,17508,"\n"]],[17504,17504],[17505,17505]]],[1540017553889,["gjx16@GJXAIOU",[[1,17505,"cheng"]],[17505,17505],[17510,17510]]],[1540017555106,["gjx16@GJXAIOU",[[-1,17505,"cheng"]],[17510,17510],[17505,17505]]],[1540017562329,["gjx16@GJXAIOU",[[1,17505,"程序运行结果："]],[17505,17505],[17512,17512]]],[1540017622794,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17516,"#"]],[11020,11020],[17517,17517]]],[1540017622794,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17516,"#"]],[17517,17517],[11020,11020]]],[1540017574075,["gjx16@GJXAIOU",[[1,17512,"返回data数据乐元素"]],[17512,17512],[17523,17523]]],[1540017575038,["gjx16@GJXAIOU",[[-1,17520,"乐元素"]],[17523,17523],[17520,17520]]],[1540017584344,["gjx16@GJXAIOU",[[1,17520,"元素在链表中的位置；"]],[17520,17520],[17530,17530]]],[1540017584812,["gjx16@GJXAIOU",[[1,17534,"\n"]],[17530,17530],[17531,17531]]],[1540017609244,["gjx16@GJXAIOU",[[1,17531,"![返回数据域等于data的节点位置]($resource/%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E5%9F%9F%E7%AD%89%E4%BA%8Edata%E7%9A%84%E8%8A%82%E7%82%B9%E4%BD%8D%E7%BD%AE.png)"]],[17531,17531],[17679,17679]]],[1540017614636,["gjx16@GJXAIOU",[[1,17682,"\n"]],[17679,17679],[17680,17680]]],[1540017617070,["gjx16@GJXAIOU",[[1,17531,"\n"]],[17530,17530],[17531,17531]]],[1540017682798,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17684,"#"]],[11020,11020],[17685,17685]]],[1540017682798,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17684,"#"]],[17685,17685],[11020,11020]]],[1540017626764,["gjx16@GJXAIOU",[[1,17682,"10.****"]],[17682,17682],[17687,17687]]],[1540017802795,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17691,"#"]],[11020,11020],[17692,17692]]],[1540017802796,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17691,"#"]],[17692,17692],[11020,11020]]],[1540017766607,["gjx16@GJXAIOU",[[1,17687,"得到链表最后一个结点"]],[17687,17687],[17697,17697]]],[1540017768867,["gjx16@GJXAIOU",[[1,17701,"\n"]],[17699,17699],[17700,17700]]],[1540017769484,["gjx16@GJXAIOU",[[1,17702,"\n"]],[17700,17700],[17701,17701]]],[1540017772714,["gjx16@GJXAIOU",[[1,17701,"===="]],[17701,17701],[17703,17703]]],[1540017802140,["gjx16@GJXAIOU",[[1,17703,"链表的最后一个结点指向NULL，但是不代表最后一个结点为NULL，只是"]],[17703,17703],[17738,17738]]],[1540017862798,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,17742,"#"]],[11020,11020],[17743,17743]]],[1540017862798,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,17742,"#"]],[17743,17743],[11020,11020]]],[1540017816495,["gjx16@GJXAIOU",[[1,17738," last -> next -"]],[17738,17738],[17753,17753]]],[1540017817053,["gjx16@GJXAIOU",[[-1,17752,"-"]],[17753,17753],[17752,17752]]],[1540017817862,["gjx16@GJXAIOU",[[1,17754,"="]],[17752,17752],[17753,17753]]],[1540017821878,["gjx16@GJXAIOU",[[1,17753," NULL  "]],[17753,17753],[17760,17760]]],[1540017823019,["gjx16@GJXAIOU",[[-1,17758,"  "]],[17760,17760],[17758,17758]]],[1540017827571,["gjx16@GJXAIOU",[[1,17762,"\n"]],[17760,17760],[17761,17761]]],[1540017827714,["gjx16@GJXAIOU",[[1,17763,"\n"]],[17761,17761],[17762,17762]]],[1540017840398,["gjx16@GJXAIOU",[[1,17764,"\n"]],[17761,17761],[17762,17762]]],[1540017842793,["gjx16@GJXAIOU",[[1,17762,"```"]],[17762,17762],[17765,17765]]],[1540017842894,["gjx16@GJXAIOU",[[1,17765,"language\n```\n"]],[17765,17765],[17765,17773]]],[1540017844337,["gjx16@GJXAIOU",[[-1,17765,"language"],[1,17773,"c"]],[17765,17773],[17766,17766]]],[1540017844512,["gjx16@GJXAIOU",[[1,17767,"\n"]],[17766,17766],[17767,17767]]],[1540017845682,["gjx16@GJXAIOU",[[1,17767,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n//返回数据域等于data的节点位置\nint elem_pos(struct list *ls,int data)\n{\n   int index = 0;\n   struct list *p = ls;\n   while(p)\n   {\n       index++;\n       if(p -> data == data)\n       return index;\n       p = p -> next;\n   }\n  return NULL;//没有找到数据域等于data的节点\n}\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n printf(\"%d\\n\", elem_pos(first,3));\n  return  0;\n\n}\n"]],[17767,17767],[18890,18890]]],[1540017856747,["gjx16@GJXAIOU",[[-1,18176,"数据域等于data的节点位置"]],[18190,18190],[18176,18176]]],[1540017858379,["gjx16@GJXAIOU",[[1,18176,"lian"]],[18176,18176],[18180,18180]]],[1540017860555,["gjx16@GJXAIOU",[[-1,18176,"lian"]],[18180,18180],[18176,18176]]],[1540017922803,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,18884,"#"]],[11020,11020],[18885,18885]]],[1540017922803,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,18884,"#"]],[18885,18885],[11020,11020]]],[1540017864865,["gjx16@GJXAIOU",[[1,18176,"聊表的"]],[18176,18176],[18179,18179]]],[1540017866481,["gjx16@GJXAIOU",[[-1,18176,"聊表的"]],[18179,18179],[18176,18176]]],[1540017876456,["gjx16@GJXAIOU",[[1,18176,"链表的最后一个结点"]],[18176,18176],[18185,18185]]],[1540017877317,["gjx16@GJXAIOU",[[-1,18183,"结点"]],[18185,18185],[18183,18183]]],[1540017880997,["gjx16@GJXAIOU",[[1,18183,"节点"]],[18183,18183],[18185,18185]]],[1540017894206,["gjx16@GJXAIOU",[[1,18186,"struct l"]],[18186,18186],[18194,18194]]],[1540017894417,["gjx16@GJXAIOU",[[1,18195,"i"]],[18194,18194],[18195,18195]]],[1540017898454,["gjx16@GJXAIOU",[[1,18195,"st *"]],[18195,18195],[18199,18199]]],[1540017906289,["gjx16@GJXAIOU",[[-1,18199,"int elem_pos"]],[18211,18211],[18199,18199]]],[1540017913151,["gjx16@GJXAIOU",[[1,18199,"last_lilst"]],[18199,18199],[18209,18209]]],[1540017914962,["gjx16@GJXAIOU",[[-1,18205,"ilst"]],[18209,18209],[18205,18205]]],[1540017916396,["gjx16@GJXAIOU",[[1,18205,"ist"]],[18205,18205],[18208,18208]]],[1540017982810,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,18903,"#"]],[11020,11020],[18904,18904]]],[1540017982810,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,18903,"#"]],[18904,18904],[11020,11020]]],[1540017927296,["gjx16@GJXAIOU",[[-1,18224,",int data"]],[18233,18233],[18224,18224]]],[1540017947569,["gjx16@GJXAIOU",[[-1,18228,"   int index = 0;"]],[18245,18245],[18228,18228]]],[1540017948209,["gjx16@GJXAIOU",[[-1,18228,"\n"]],[18228,18228],[18227,18227]]],[1540017956889,["gjx16@GJXAIOU",[[1,18262," -> ns"]],[18262,18262],[18268,18268]]],[1540017958921,["gjx16@GJXAIOU",[[-1,18267,"s"]],[18268,18268],[18267,18267]]],[1540017961051,["gjx16@GJXAIOU",[[1,18267,"exzt"]],[18267,18267],[18271,18271]]],[1540017961944,["gjx16@GJXAIOU",[[-1,18269,"zt"]],[18271,18271],[18269,18269]]],[1540017962855,["gjx16@GJXAIOU",[[1,18269,"t"]],[18269,18269],[18270,18270]]],[1540017971180,["gjx16@GJXAIOU",[[1,18271,"//当pde "]],[18271,18271],[18278,18278]]],[1540017972745,["gjx16@GJXAIOU",[[-1,18275,"de "]],[18278,18278],[18275,18275]]],[1540017982250,["gjx16@GJXAIOU",[[1,18275,"的next为空时候"]],[18275,18275],[18284,18284]]],[1540018042808,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[1,18897,"#"]],[11020,11020],[18898,18898]]],[1540018042808,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[-1,18897,"#"]],[18898,18898],[11020,11020]]],[1540017996016,["gjx16@GJXAIOU",[[1,18285,"表示p为最后一个节点"]],[18285,18285],[18295,18295]]],[1540018042328,["gjx16@GJXAIOU",[[-1,18364,"x;"]],[18366,18366],[18364,18364]]],[1540018102807,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18363,"x"],[1,18364,"\n"],[1,18905,"#"]],[11020,11020],[18906,18906]]],[1540018102807,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18364,"x"],[-1,18364,"\n"],[-1,18906,"#"]],[18906,18906],[11020,11020]]],[1540018045825,["gjx16@GJXAIOU",[[-1,18346,"  "]],[18348,18348],[18346,18346]]],[1540018045958,["gjx16@GJXAIOU",[[-1,18346,"\n"]],[18346,18346],[18345,18345]]],[1540018053325,["gjx16@GJXAIOU",[[-1,18317,"       if(p -> data == data)"]],[18345,18345],[18317,18317]]],[1540018053540,["gjx16@GJXAIOU",[[-1,18317,"\n"]],[18317,18317],[18316,18316]]],[1540018057414,["gjx16@GJXAIOU",[[-1,18301,"       index++;"]],[18316,18316],[18301,18301]]],[1540018057675,["gjx16@GJXAIOU",[[-1,18301,"\n"]],[18301,18301],[18300,18300]]],[1540018081488,["gjx16@GJXAIOU",[[-1,18337,"NULL;//没有找到数据域等于data的节点"]],[18360,18360],[18337,18337]]],[1540018086447,["gjx16@GJXAIOU",[[1,18337,"p;"]],[18337,18337],[18339,18339]]],[1540018098937,["gjx16@GJXAIOU",[[-1,18777,"elem_pos(fir"],[1,18789,"last_li"],[-1,18791,",3)"]],[18777,18794],[18786,18786]]],[1540018101855,["gjx16@GJXAIOU",[[1,18786,"("]],[18786,18786],[18787,18787]]],[1540018102005,["gjx16@GJXAIOU",[[1,18788,")"]],[18787,18787],[18788,18788]]],[1540018162812,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\",(e)m_pos(fir"],[-1,18800,",3"],[1,18802,"("],[1,18830,"#"]],[11020,11020],[18831,18831]]],[1540018162812,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\",(e)m_pos(fir"],[1,18786,",3"],[-1,18786,"("],[-1,18815,"#"]],[18831,18831],[11020,11020]]],[1540018105374,["gjx16@GJXAIOU",[[1,18787,"first"]],[18787,18787],[18792,18792]]],[1540018222818,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\",(fir"],[-1,18792,"e)m_pos"],[-1,18805,",3"],[1,18835,"#"]],[11020,11020],[18836,18836]]],[1540018222818,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\",(fir"],[1,18786,"e)m_pos"],[1,18792,",3"],[-1,18820,"#"]],[18836,18836],[11020,11020]]],[1540018166762,["gjx16@GJXAIOU",[[1,18793,"->"]],[18793,18793],[18795,18795]]],[1540018168559,["gjx16@GJXAIOU",[[1,18793," "]],[18793,18793],[18794,18794]]],[1540018171615,["gjx16@GJXAIOU",[[1,18796," data"]],[18796,18796],[18801,18801]]],[1540018282817,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18801,")m_pos(first,3)"],[1,18843,"#"]],[11020,11020],[18844,18844]]],[1540018282817,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18801,")m_pos(first,3)"],[-1,18828,"#"]],[18844,18844],[11020,11020]]],[1540018244984,["gjx16@GJXAIOU",[[1,18825,"chen"]],[18825,18825],[18829,18829]]],[1540018246416,["gjx16@GJXAIOU",[[-1,18825,"chen"]],[18829,18829],[18825,18825]]],[1540018251543,["gjx16@GJXAIOU",[[1,18825,"程序输出结果；"]],[18825,18825],[18832,18832]]],[1540018253466,["gjx16@GJXAIOU",[[1,18835,"\n"]],[18832,18832],[18833,18833]]],[1540018265397,["gjx16@GJXAIOU",[[1,18833,"![查找列表中最后一个节点]($resource/%E6%9F%A5%E6%89%BE%E5%88%97%E8%A1%A8%E4%B8%AD%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9.png)"]],[18833,18833],[18963,18963]]],[1540018268402,["gjx16@GJXAIOU",[[1,18833,"\n"]],[18832,18832],[18833,18833]]],[1540018271930,["gjx16@GJXAIOU",[[1,18966,"\n"]],[18964,18964],[18965,18965]]],[1540018272090,["gjx16@GJXAIOU",[[1,18967,"\n"]],[18965,18965],[18966,18966]]],[1540018280909,["gjx16@GJXAIOU",[[1,18966,"11.*"]],[18966,18966],[18970,18970]]],[1540018342824,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,18972," 0;\n\n}\n\n```\n\n\n\n"],[1,18987,"#"]],[11020,11020],[18988,18988]]],[1540018342824,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,18972," 0;\n\n}\n\n```\n\n\n\n"],[-1,18972,"#"]],[18988,18988],[11020,11020]]],[1540018287131,["gjx16@GJXAIOU",[[1,18970,"***"]],[18970,18970],[18971,18971]]],[1540018341514,["gjx16@GJXAIOU",[[1,18971,"合并两个"]],[18971,18971],[18975,18975]]],[1540018402816,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,18979," 0;\n\n}\n\n```\n\n\n\n"],[1,18994,"#"]],[11020,11020],[18995,18995]]],[1540018402816,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,18979," 0;\n\n}\n\n```\n\n\n\n"],[-1,18979,"#"]],[18995,18995],[11020,11020]]],[1540018352458,["gjx16@GJXAIOU",[[1,18975,"列表，结果放在list1zhong"]],[18975,18975],[18992,18992]]],[1540018353072,["gjx16@GJXAIOU",[[-1,18991,"g"]],[18992,18992],[18991,18991]]],[1540018353215,["gjx16@GJXAIOU",[[1,18991,"="]],[18991,18991],[18992,18992]]],[1540018354856,["gjx16@GJXAIOU",[[-1,18987,"zhon="]],[18992,18992],[18987,18987]]],[1540018357201,["gjx16@GJXAIOU",[[1,18987,"中"]],[18987,18987],[18988,18988]]],[1540018396025,["gjx16@GJXAIOU",[[1,18992,"\n"]],[18991,18991],[18992,18992]]],[1540018399839,["gjx16@GJXAIOU",[[1,18992,"```"]],[18992,18992],[18995,18995]]],[1540018399920,["gjx16@GJXAIOU",[[1,18995,"language\n```\n"]],[18995,18995],[18995,19003]]],[1540018400943,["gjx16@GJXAIOU",[[-1,18995,"language"],[1,19003,"c"]],[18995,19003],[18996,18996]]],[1540018401198,["gjx16@GJXAIOU",[[1,18997,"\n"]],[18996,18996],[18997,18997]]],[1540018463033,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,19003," 0;\n\n}\n\n```\n\n\n\n"],[1,19018,"#"]],[11020,11020],[19019,19019]]],[1540018463033,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,19003," 0;\n\n}\n\n```\n\n\n\n"],[-1,19003,"#"]],[19019,19019],[11020,11020]]],[1540018412029,["gjx16@GJXAIOU",[[1,18997,"struct list *d"]],[18997,18997],[19011,19011]]],[1540018412656,["gjx16@GJXAIOU",[[-1,19010,"d"]],[19011,19011],[19010,19010]]],[1540018413053,["gjx16@GJXAIOU",[[1,19010,"s"]],[19010,19010],[19011,19011]]],[1540018413968,["gjx16@GJXAIOU",[[-1,19010,"s"]],[19011,19011],[19010,19010]]],[1540018426696,["gjx16@GJXAIOU",[[1,19010,"first1 = create_lia"]],[19010,19010],[19029,19029]]],[1540018427184,["gjx16@GJXAIOU",[[-1,19028,"a"]],[19029,19029],[19028,19028]]],[1540018429818,["gjx16@GJXAIOU",[[1,19028,"st();"]],[19028,19028],[19033,19033]]],[1540018430431,["gjx16@GJXAIOU",[[1,19034,"\n"]],[19033,19033],[19034,19034]]],[1540018432213,["gjx16@GJXAIOU",[[1,19034,"l"]],[19034,19034],[19035,19035]]],[1540018432725,["gjx16@GJXAIOU",[[-1,19034,"l"]],[19035,19035],[19034,19034]]],[1540018434847,["gjx16@GJXAIOU",[[1,19034,"int i;"]],[19034,19034],[19040,19040]]],[1540018435397,["gjx16@GJXAIOU",[[1,19041,"\n"]],[19040,19040],[19041,19041]]],[1540018438464,["gjx16@GJXAIOU",[[1,19041,"for()"]],[19041,19041],[19046,19046]]],[1540018444793,["gjx16@GJXAIOU",[[1,19045,"i = 0; i ++"]],[19045,19045],[19056,19056]]],[1540018448416,["gjx16@GJXAIOU",[[-1,19053," ++"]],[19056,19056],[19053,19053]]],[1540018456048,["gjx16@GJXAIOU",[[1,19053," < 10; i++"]],[19053,19053],[19063,19063]]],[1540018458690,["gjx16@GJXAIOU",[[1,19065,"\n"]],[19064,19064],[19065,19065]]],[1540018461074,["gjx16@GJXAIOU",[[1,19065,"  {}"]],[19065,19065],[19069,19069]]],[1540018462808,["gjx16@GJXAIOU",[[1,19068,"\n  \n  \n  "]],[19068,19068],[19077,19077]]],[1540018523014,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,19084," 0;\n\n}\n\n```\n\n\n\n"],[1,19099,"#"]],[11020,11020],[19100,19100]]],[1540018523014,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,19084," 0;\n\n}\n\n```\n\n\n\n"],[-1,19084,"#"]],[19100,19100],[11020,11020]]],[1540018469880,["gjx16@GJXAIOU",[[1,19071,"  insrt"]],[19071,19071],[19078,19078]]],[1540018471921,["gjx16@GJXAIOU",[[-1,19076,"rt"]],[19078,19078],[19076,19076]]],[1540018480621,["gjx16@GJXAIOU",[[1,19076,"ert_list();"]],[19076,19076],[19087,19087]]],[1540018482807,["gjx16@GJXAIOU",[[1,19085,"d"]],[19085,19085],[19086,19086]]],[1540018483824,["gjx16@GJXAIOU",[[-1,19085,"d"]],[19086,19086],[19085,19085]]],[1540018484939,["gjx16@GJXAIOU",[[1,19085,"fird"]],[19085,19085],[19089,19089]]],[1540018485543,["gjx16@GJXAIOU",[[-1,19088,"d"]],[19089,19089],[19088,19088]]],[1540018491325,["gjx16@GJXAIOU",[[1,19088,"st1,0,i"]],[19088,19088],[19095,19095]]],[1540018497433,["gjx16@GJXAIOU",[[-1,19098,"  "]],[19100,19100],[19098,19098]]],[1540018497626,["gjx16@GJXAIOU",[[-1,19098,"\n"]],[19098,19098],[19097,19097]]],[1540018703179,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,19107," 0;\n\n}\n\n```\n\n\n\n"],[1,19122,"#"]],[11020,11020],[19123,19123]]],[1540018703179,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,19107," 0;\n\n}\n\n```\n\n\n\n"],[-1,19107,"#"]],[19123,19123],[11020,11020]]],[1540018702201,["gjx16@GJXAIOU",[[1,18997,"\n"]],[18996,18996],[18997,18997]]],[1540018702355,["gjx16@GJXAIOU",[[1,18998,"\n"]],[18997,18997],[18998,18998]]],[1540018702929,["gjx16@GJXAIOU",[[1,18998,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n//返回链表的最后一个节点\nstruct list *last_list(struct list *ls)\n{\n   struct list *p = ls;\n   while(p -> next)//当p的next为空时候，表示p为最后一个节点\n   {\n       p = p -> next;\n   }\n  return p;\n}\n\n\n\n\nint  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n//函数引用\n printf(\"%d\\n\", last_list(first) -> data);\n  return  0;\n\n}"]],[18998,18998],[20050,20050]]],[1540018763160,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20161," 0;\n\n}\n\n```\n\n\n\n"],[1,20176,"#"]],[11020,11020],[20177,20177]]],[1540018763160,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20161," 0;\n\n}\n\n```\n\n\n\n"],[-1,20161,"#"]],[20177,20177],[11020,11020]]],[1540018713002,["gjx16@GJXAIOU",[[1,19984,"  \n"]],[19983,19983],[19986,19986]]],[1540018713189,["gjx16@GJXAIOU",[[-1,19984,"  "],[1,19986,"\n"]],[19986,19986],[19985,19985]]],[1540018713364,["gjx16@GJXAIOU",[[1,19987,"\n"]],[19985,19985],[19986,19986]]],[1540018714149,["gjx16@GJXAIOU",[[1,19988,"\n"]],[19986,19986],[19987,19987]]],[1540018721008,["gjx16@GJXAIOU",[[-1,20055,"struct list *first1 = create_list();\nint i;\nfor(i = 0; i < 10; i++)\n  {\n    insert_list(first1,0,i);\n  }"]],[20055,20159],[20055,20055]]],[1540018723068,["gjx16@GJXAIOU",[[1,19989,"\n"]],[19985,19985],[19986,19986]]],[1540018723226,["gjx16@GJXAIOU",[[1,19990,"\n"]],[19986,19986],[19987,19987]]],[1540018723691,["gjx16@GJXAIOU",[[1,19987,"struct list *first1 = create_list();\nint i;\nfor(i = 0; i < 10; i++)\n  {\n    insert_list(first1,0,i);\n  }"]],[19987,19987],[20091,20091]]],[1540018727645,["gjx16@GJXAIOU",[[1,19986,"//ku"]],[19986,19986],[19990,19990]]],[1540018728184,["gjx16@GJXAIOU",[[-1,19988,"ku"]],[19990,19990],[19988,19988]]],[1540018741317,["gjx16@GJXAIOU",[[1,19988,"快速创建链表first1"]],[19988,19988],[20000,20000]]],[1540018743018,["gjx16@GJXAIOU",[[1,20001,"\n"]],[20000,20000],[20001,20001]]],[1540018750099,["gjx16@GJXAIOU",[[-1,20110,"//函数引用\n printf(\"%d\\n\", last_list(first) -> data);"]],[20110,20159],[20110,20110]]],[1540018823233,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20133," 0;\n\n}\n\n```\n\n\n\n"],[1,20148,"#"]],[11020,11020],[20149,20149]]],[1540018823233,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20133," 0;\n\n}\n\n```\n\n\n\n"],[-1,20133,"#"]],[20149,20149],[11020,11020]]],[1540018763258,["gjx16@GJXAIOU",[[1,19577,"\n"]],[19573,19573],[19574,19574]]],[1540018763414,["gjx16@GJXAIOU",[[1,19578,"\n"]],[19574,19574],[19575,19575]]],[1540018763711,["gjx16@GJXAIOU",[[1,19579,"\n"]],[19575,19575],[19576,19576]]],[1540018763865,["gjx16@GJXAIOU",[[1,19580,"\n"]],[19576,19576],[19577,19577]]],[1540018770465,["gjx16@GJXAIOU",[[1,19575,"//jiang"]],[19575,19575],[19582,19582]]],[1540018772791,["gjx16@GJXAIOU",[[-1,19577,"jiang"]],[19582,19582],[19577,19577]]],[1540018803289,["gjx16@GJXAIOU",[[1,19577,"这里只合并链表的节点，删除第二个链表头"]],[19577,19577],[19596,19596]]],[1540018803905,["gjx16@GJXAIOU",[[1,19602,"\n"]],[19596,19596],[19597,19597]]],[1540018804897,["gjx16@GJXAIOU",[[1,19603,"\n"]],[19597,19597],[19598,19598]]],[1540018808433,["gjx16@GJXAIOU",[[1,19598,"void()"]],[19598,19598],[19604,19604]]],[1540018816268,["gjx16@GJXAIOU",[[1,19602," merge_list"]],[19602,19602],[19613,19613]]],[1540018822950,["gjx16@GJXAIOU",[[1,19614,"struct"]],[19614,19614],[19620,19620]]],[1540018883224,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20183," 0;\n\n}\n\n```\n\n\n\n"],[1,20198,"#"]],[11020,11020],[20199,20199]]],[1540018883224,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20183," 0;\n\n}\n\n```\n\n\n\n"],[-1,20183,"#"]],[20199,20199],[11020,11020]]],[1540018834973,["gjx16@GJXAIOU",[[1,19620," list *ls1, strus"]],[19620,19620],[19637,19637]]],[1540018836114,["gjx16@GJXAIOU",[[-1,19636,"s"]],[19637,19637],[19636,19636]]],[1540018842662,["gjx16@GJXAIOU",[[1,19636,"ct list *ls2"]],[19636,19636],[19648,19648]]],[1540018844889,["gjx16@GJXAIOU",[[1,19655,"\n"]],[19649,19649],[19650,19650]]],[1540018846209,["gjx16@GJXAIOU",[[1,19650,"{}"]],[19650,19650],[19652,19652]]],[1540018847417,["gjx16@GJXAIOU",[[1,19651,"\n"]],[19651,19651],[19652,19652]]],[1540018847662,["gjx16@GJXAIOU",[[1,19652,"\n"]],[19652,19652],[19653,19653]]],[1540018847877,["gjx16@GJXAIOU",[[1,19653,"\n"]],[19653,19653],[19654,19654]]],[1540018857436,["gjx16@GJXAIOU",[[1,19652,"  last "]],[19652,19652],[19659,19659]]],[1540018858115,["gjx16@GJXAIOU",[[-1,19658," "]],[19659,19659],[19658,19658]]],[1540018861597,["gjx16@GJXAIOU",[[1,19658,"_llist"]],[19658,19658],[19664,19664]]],[1540018863012,["gjx16@GJXAIOU",[[-1,19660,"list"]],[19664,19664],[19660,19660]]],[1540018866534,["gjx16@GJXAIOU",[[1,19660,"ist()"]],[19660,19660],[19665,19665]]],[1540018869232,["gjx16@GJXAIOU",[[1,19664,"ls1"]],[19664,19664],[19667,19667]]],[1540018880182,["gjx16@GJXAIOU",[[1,19668," - >"]],[19668,19668],[19672,19672]]],[1540018881383,["gjx16@GJXAIOU",[[-1,19670," >"]],[19672,19672],[19670,19670]]],[1540018882480,["gjx16@GJXAIOU",[[1,19670,">"]],[19670,19670],[19671,19671]]],[1540018943229,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20236," 0;\n\n}\n\n```\n\n\n\n"],[1,20251,"#"]],[11020,11020],[20252,20252]]],[1540018943229,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20236," 0;\n\n}\n\n```\n\n\n\n"],[-1,20236,"#"]],[20252,20252],[11020,11020]]],[1540018897221,["gjx16@GJXAIOU",[[1,19671," next = ls2 -> next;"]],[19671,19671],[19691,19691]]],[1540018898289,["gjx16@GJXAIOU",[[1,19692,"  \n"]],[19691,19691],[19694,19694]]],[1540018901725,["gjx16@GJXAIOU",[[1,19694,"free();"]],[19694,19694],[19701,19701]]],[1540018905413,["gjx16@GJXAIOU",[[1,19699,"la2"]],[19699,19699],[19702,19702]]],[1540018906432,["gjx16@GJXAIOU",[[-1,19700,"a2"]],[19702,19702],[19700,19700]]],[1540018907725,["gjx16@GJXAIOU",[[1,19700,"s2"]],[19700,19700],[19702,19702]]],[1540018916767,["gjx16@GJXAIOU",[[1,19704,"//di"]],[19704,19704],[19708,19708]]],[1540018917824,["gjx16@GJXAIOU",[[-1,19706,"di"]],[19708,19708],[19706,19706]]],[1540018929426,["gjx16@GJXAIOU",[[1,19706,"后面一个链表的聊表头"]],[19706,19706],[19716,19716]]],[1540018931375,["gjx16@GJXAIOU",[[-1,19713,"聊表头"]],[19716,19716],[19713,19713]]],[1540018938394,["gjx16@GJXAIOU",[[1,19713,"链表头不要了"]],[19713,19713],[19719,19719]]],[1540019003230,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20284," 0;\n\n}\n\n```\n\n\n\n"],[1,20299,"#"]],[11020,11020],[20300,20300]]],[1540019003231,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20284," 0;\n\n}\n\n```\n\n\n\n"],[-1,20284,"#"]],[20300,20300],[11020,11020]]],[1540018945142,["gjx16@GJXAIOU",[[1,19691,"、、"]],[19691,19691],[19693,19693]]],[1540018946156,["gjx16@GJXAIOU",[[-1,19691,"、、"]],[19693,19693],[19691,19691]]],[1540018948432,["gjx16@GJXAIOU",[[1,19691,"/、"]],[19691,19691],[19693,19693]]],[1540018949248,["gjx16@GJXAIOU",[[-1,19692,"、"]],[19693,19693],[19692,19692]]],[1540018984577,["gjx16@GJXAIOU",[[1,19692,"/这里调用上一个函数，获取第一个链表的最后一个节点"]],[19692,19692],[19717,19717]]],[1540018994104,["gjx16@GJXAIOU",[[1,20288,"\n"]],[20285,20285],[20286,20286]]],[1540019063232,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20311," 0;\n\n}\n\n```\n\n\n\n"],[1,20326,"#"]],[11020,11020],[20327,20327]]],[1540019063232,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20311," 0;\n\n}\n\n```\n\n\n\n"],[-1,20311,"#"]],[20327,20327],[11020,11020]]],[1540019006630,["gjx16@GJXAIOU",[[1,20286,"merge_list（）；"]],[20286,20286],[20299,20299]]],[1540019007519,["gjx16@GJXAIOU",[[-1,20296,"（）；"]],[20299,20299],[20296,20296]]],[1540019009709,["gjx16@GJXAIOU",[[1,20296,"();"]],[20296,20296],[20299,20299]]],[1540019011700,["gjx16@GJXAIOU",[[1,20297,"d"]],[20297,20297],[20298,20298]]],[1540019012279,["gjx16@GJXAIOU",[[-1,20297,"d"]],[20298,20298],[20297,20297]]],[1540019014119,["gjx16@GJXAIOU",[[1,20297,"fird"]],[20297,20297],[20301,20301]]],[1540019014866,["gjx16@GJXAIOU",[[-1,20300,"d"]],[20301,20301],[20300,20300]]],[1540019019470,["gjx16@GJXAIOU",[[1,20300,"st,fird"]],[20300,20300],[20307,20307]]],[1540019020215,["gjx16@GJXAIOU",[[-1,20306,"d"]],[20307,20307],[20306,20306]]],[1540019020806,["gjx16@GJXAIOU",[[1,20306,"str"]],[20306,20306],[20309,20309]]],[1540019021808,["gjx16@GJXAIOU",[[-1,20308,"r"]],[20309,20309],[20308,20308]]],[1540019022904,["gjx16@GJXAIOU",[[1,20308,"1"]],[20308,20308],[20309,20309]]],[1540019031804,["gjx16@GJXAIOU",[[1,20314,"\n"]],[20311,20311],[20312,20312]]],[1540019072651,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20337," 0;\n\n}\n\n```\n\n\n\n"],[1,20352,"#"]],[11020,11020],[20353,20353]]],[1540019072651,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20337," 0;\n\n}\n\n```\n\n\n\n"],[-1,20337,"#"]],[20353,20353],[11020,11020]]],[1540019068014,["gjx16@GJXAIOU",[[1,20312,"traverse();"]],[20312,20312],[20323,20323]]],[1540019070958,["gjx16@GJXAIOU",[[1,20321,"list"]],[20321,20321],[20325,20325]]],[1540019132656,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20352," 0;\n\n}\n\n```\n\n\n\n"],[1,20367,"#"]],[11020,11020],[20368,20368]]],[1540019132656,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20352," 0;\n\n}\n\n```\n\n\n\n"],[-1,20352,"#"]],[20368,20368],[11020,11020]]],[1540019078040,["gjx16@GJXAIOU",[[-1,20329,"\n"]],[20329,20329],[20328,20328]]],[1540019078190,["gjx16@GJXAIOU",[[-1,20328,"\n"]],[20328,20328],[20327,20327]]],[1540019299562,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20350," 0;\n\n}\n\n```\n\n\n\n"],[1,20365,"#"]],[11020,11020],[20366,20366]]],[1540019299562,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20350," 0;\n\n}\n\n```\n\n\n\n"],[-1,20350,"#"]],[20366,20366],[11020,11020]]],[1540019282040,["gjx16@GJXAIOU",[[1,19575,"\n"]],[19572,19572],[19573,19573]]],[1540019283180,["gjx16@GJXAIOU",[[1,19576,"\n"]],[19573,19573],[19574,19574]]],[1540019283881,["gjx16@GJXAIOU",[[1,19574,"struct  list  *insert_list(struct  list  *ls,  int  n,  int  data)\n{\n  struct  list  *p  =  ls;\n  while(p  &&  n--)\n    {\n      p  =  p  ->  next;\n    }\n\n  if(p  ==  NULL)\n    {\n      return  NULL;//n的位置大于链表节点数\n    }\n\n  struct  list  *node  =  create_list();//新建立一个节点\n  node  ->  data  =  data;\n  node  ->  next  =  p  ->  next;\n  p  ->  next  =  node;\n  return  node;\n};"]],[19574,19574],[19945,19945]]],[1540019294198,["gjx16@GJXAIOU",[[-1,20694,"list"]],[20698,20698],[20694,20694]]],[1540019297349,["gjx16@GJXAIOU",[[1,20694,"firstr"]],[20694,20694],[20700,20700]]],[1540019298441,["gjx16@GJXAIOU",[[-1,20699,"r"]],[20700,20700],[20699,20699]]],[1540019419568,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20724," 0;\n\n}\n\n```\n\n\n\n"],[1,20739,"#"]],[11020,11020],[20740,20740]]],[1540019419568,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20724," 0;\n\n}\n\n```\n\n\n\n"],[-1,20724,"#"]],[20740,20740],[11020,11020]]],[1540019375408,["gjx16@GJXAIOU",[[1,20724,"\n"]],[20722,20722],[20723,20723]]],[1540019375580,["gjx16@GJXAIOU",[[1,20725,"\n"]],[20723,20723],[20724,20724]]],[1540019376929,["gjx16@GJXAIOU",[[-1,20725,"\n"]],[20724,20724],[20723,20723]]],[1540019378654,["gjx16@GJXAIOU",[[1,20723,"cheng"]],[20723,20723],[20728,20728]]],[1540019380489,["gjx16@GJXAIOU",[[-1,20723,"cheng"]],[20728,20728],[20723,20723]]],[1540019385594,["gjx16@GJXAIOU",[[1,20723,"程序运行结果；"]],[20723,20723],[20730,20730]]],[1540019386767,["gjx16@GJXAIOU",[[-1,20729,"；"]],[20730,20730],[20729,20729]]],[1540019387495,["gjx16@GJXAIOU",[[1,20729,"："]],[20729,20729],[20730,20730]]],[1540019388440,["gjx16@GJXAIOU",[[1,20732,"\n"]],[20730,20730],[20731,20731]]],[1540019402374,["gjx16@GJXAIOU",[[1,20731,"![连接两个链表，结果放在第一个链表中]($resource/%E8%BF%9E%E6%8E%A5%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%94%BE%E5%9C%A8%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E4%B8%AD.png)"]],[20731,20731],[20921,20921]]],[1540019409311,["gjx16@GJXAIOU",[[1,20731,"\n"]],[20730,20730],[20731,20731]]],[1540019479575,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20923," 0;\n\n}\n\n```\n\n\n\n"],[1,20938,"#"]],[11020,11020],[20939,20939]]],[1540019479575,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20923," 0;\n\n}\n\n```\n\n\n\n"],[-1,20923,"#"]],[20939,20939],[11020,11020]]],[1540019452777,["gjx16@GJXAIOU",[[-1,20923,"## "]],[20926,20926],[20923,20923]]],[1540019454612,["gjx16@GJXAIOU",[[1,20923,"122"]],[20923,20923],[20926,20926]]],[1540019455638,["gjx16@GJXAIOU",[[-1,20925,"2"]],[20926,20926],[20925,20925]]],[1540019456437,["gjx16@GJXAIOU",[[1,20925,"。"]],[20925,20925],[20926,20926]]],[1540019457734,["gjx16@GJXAIOU",[[-1,20925,"。"]],[20926,20926],[20925,20925]]],[1540019460674,["gjx16@GJXAIOU",[[1,20925,".****"]],[20925,20925],[20928,20928]]],[1540019461815,["gjx16@GJXAIOU",[[-1,20928,"**"]],[20928,20928],[20926,20926]]],[1540019465231,["gjx16@GJXAIOU",[[1,20935,"**"]],[20935,20935],[20937,20937]]],[1540019466225,["gjx16@GJXAIOU",[[1,20940,"\n"]],[20937,20937],[20938,20938]]],[1540019467055,["gjx16@GJXAIOU",[[1,20941,"\n"]],[20938,20938],[20939,20939]]],[1540019959577,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`\n\n\n\n\n\n# "],[1,20953,"**\n\n"]],[11020,11020],[20957,20957]]],[1540019959577,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`\n\n\n\n\n\n# "],[-1,20935,"**\n\n"]],[20957,20957],[11020,11020]]],[1540019930276,["gjx16@GJXAIOU",[[1,20939,"···"]],[20939,20939],[20942,20942]]],[1540019931704,["gjx16@GJXAIOU",[[-1,20939,"···"]],[20942,20942],[20939,20939]]],[1540019933540,["gjx16@GJXAIOU",[[1,20939,"```"]],[20939,20939],[20942,20942]]],[1540019933658,["gjx16@GJXAIOU",[[1,20942,"language\n```\n"]],[20942,20942],[20942,20950]]],[1540019934787,["gjx16@GJXAIOU",[[-1,20942,"language"],[1,20950,"c"]],[20942,20950],[20943,20943]]],[1540019935135,["gjx16@GJXAIOU",[[1,20944,"\n"]],[20943,20943],[20944,20944]]],[1540019955054,["gjx16@GJXAIOU",[[1,20944,"void reversr"]],[20944,20944],[20956,20956]]],[1540019956245,["gjx16@GJXAIOU",[[-1,20955,"r"]],[20956,20956],[20955,20955]]],[1540019957717,["gjx16@GJXAIOU",[[1,20955,"e "]],[20955,20955],[20957,20957]]],[1540019958670,["gjx16@GJXAIOU",[[-1,20956," "]],[20957,20957],[20956,20956]]],[1540020019597,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,20964,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[20964,20964]]],[1540020019597,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,20964,"\n\n# 单项链表的逆置\n\n\n"]],[20964,20964],[11020,11020]]],[1540019960469,["gjx16@GJXAIOU",[[1,20956,"()"]],[20956,20956],[20958,20958]]],[1540019973348,["gjx16@GJXAIOU",[[1,20957,"struct list *ls"]],[20957,20957],[20972,20972]]],[1540019975680,["gjx16@GJXAIOU",[[1,20974,"\n"]],[20973,20973],[20974,20974]]],[1540019978832,["gjx16@GJXAIOU",[[1,20974,"{}"]],[20974,20974],[20976,20976]]],[1540019979681,["gjx16@GJXAIOU",[[1,20975,"\n"]],[20975,20975],[20976,20976]]],[1540019979908,["gjx16@GJXAIOU",[[1,20976,"\n"]],[20976,20976],[20977,20977]]],[1540019986052,["gjx16@GJXAIOU",[[1,20976,"  if()"]],[20976,20976],[20982,20982]]],[1540019990459,["gjx16@GJXAIOU",[[1,20981,"ls ="]],[20981,20981],[20985,20985]]],[1540019991229,["gjx16@GJXAIOU",[[-1,20984,"="]],[20985,20985],[20984,20984]]],[1540019996012,["gjx16@GJXAIOU",[[1,20984,"-> nextr"]],[20984,20984],[20992,20992]]],[1540019996886,["gjx16@GJXAIOU",[[-1,20991,"r"]],[20992,20992],[20991,20991]]],[1540020001202,["gjx16@GJXAIOU",[[1,20991," == NA"]],[20991,20991],[20997,20997]]],[1540020002209,["gjx16@GJXAIOU",[[-1,20996,"A"]],[20997,20997],[20996,20996]]],[1540020002939,["gjx16@GJXAIOU",[[1,20996,"u"]],[20996,20996],[20997,20997]]],[1540020003702,["gjx16@GJXAIOU",[[-1,20996,"u"]],[20997,20997],[20996,20996]]],[1540020005003,["gjx16@GJXAIOU",[[1,20996,"ULL"]],[20996,20996],[20999,20999]]],[1540020006882,["gjx16@GJXAIOU",[[1,21001,"  \n"]],[21000,21000],[21003,21003]]],[1540020012435,["gjx16@GJXAIOU",[[1,21003,"  return "]],[21003,21003],[21012,21012]]],[1540020013933,["gjx16@GJXAIOU",[[-1,21011," "]],[21012,21012],[21011,21011]]],[1540020017303,["gjx16@GJXAIOU",[[1,21011,";//"]],[21011,21011],[21014,21014]]],[1540020079588,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21024,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21024,21024]]],[1540020079588,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21024,"\n\n# 单项链表的逆置\n\n\n"]],[21024,21024],[11020,11020]]],[1540020069081,["gjx16@GJXAIOU",[[1,21014,"吱哟一个节点不需要逆置 "]],[21014,21014],[21026,21026]]],[1540020979603,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21036,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21036,21036]]],[1540020979603,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21036,"\n\n# 单项链表的逆置\n\n\n"]],[21036,21036],[11020,11020]]],[1540020960819,["gjx16@GJXAIOU",[[-1,21014,"吱哟"]],[21016,21016],[21014,21014]]],[1540020963657,["gjx16@GJXAIOU",[[1,21014,"zhiyou"]],[21014,21014],[21020,21020]]],[1540020965964,["gjx16@GJXAIOU",[[-1,21014,"zhiyou"]],[21020,21020],[21014,21014]]],[1540020968107,["gjx16@GJXAIOU",[[1,21014,"只有"]],[21014,21014],[21016,21016]]],[1540020976945,["gjx16@GJXAIOU",[[1,21025,"\n    if"]],[21025,21025],[21032,21032]]],[1540020979050,["gjx16@GJXAIOU",[[-1,21030,"if"]],[21032,21032],[21030,21030]]],[1540021039629,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21041,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21041,21041]]],[1540021039629,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21041,"\n\n# 单项链表的逆置\n\n\n"]],[21041,21041],[11020,11020]]],[1540020980500,["gjx16@GJXAIOU",[[-1,21029,"  "]],[21030,21030],[21028,21028]]],[1540020981776,["gjx16@GJXAIOU",[[-1,21026,"   "],[1,21029,"\n"]],[21028,21028],[21027,21027]]],[1540020989610,["gjx16@GJXAIOU",[[1,21027,"  if()"]],[21027,21027],[21033,21033]]],[1540020996593,["gjx16@GJXAIOU",[[1,21032,"ls - > "]],[21032,21032],[21039,21039]]],[1540020997859,["gjx16@GJXAIOU",[[-1,21036," > "]],[21039,21039],[21036,21036]]],[1540021015461,["gjx16@GJXAIOU",[[1,21036,"> next -> next ==NULL"]],[21036,21036],[21057,21057]]],[1540021018668,["gjx16@GJXAIOU",[[1,21059,"  \n"]],[21058,21058],[21061,21061]]],[1540021021026,["gjx16@GJXAIOU",[[1,21061,"return"]],[21061,21061],[21067,21067]]],[1540021023547,["gjx16@GJXAIOU",[[-1,21061,"return"]],[21067,21067],[21061,21061]]],[1540021026443,["gjx16@GJXAIOU",[[1,21061,"  return "]],[21061,21061],[21070,21070]]],[1540021027508,["gjx16@GJXAIOU",[[-1,21069," "]],[21070,21070],[21069,21069]]],[1540021036138,["gjx16@GJXAIOU",[[1,21069,";//吱哟"]],[21069,21069],[21074,21074]]],[1540021037031,["gjx16@GJXAIOU",[[-1,21072,"吱哟"]],[21074,21074],[21072,21072]]],[1540021100049,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21082,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21082,21082]]],[1540021100050,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21082,"\n\n# 单项链表的逆置\n\n\n"]],[21082,21082],[11020,11020]]],[1540021050349,["gjx16@GJXAIOU",[[1,21074,"两个节点也不需要逆置"]],[21074,21074],[21084,21084]]],[1540021092197,["gjx16@GJXAIOU",[[1,21085,"    \n"]],[21084,21084],[21089,21089]]],[1540021093092,["gjx16@GJXAIOU",[[-1,21085,"    "],[1,21089,"\n"]],[21089,21089],[21086,21086]]],[1540021095489,["gjx16@GJXAIOU",[[1,21086,"、、"]],[21086,21086],[21088,21088]]],[1540021096485,["gjx16@GJXAIOU",[[-1,21086,"、、"]],[21088,21088],[21086,21086]]],[1540021099607,["gjx16@GJXAIOU",[[1,21086,"//nihzi"]],[21086,21086],[21093,21093]]],[1540021160032,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[1,21094,"}\n"],[-1,21101,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21101,21101]]],[1540021160032,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[-1,21094,"}\n"],[1,21103,"\n\n# 单项链表的逆置\n\n\n"]],[21101,21101],[11020,11020]]],[1540021101275,["gjx16@GJXAIOU",[[-1,21088,"nih"]],[21091,21091],[21088,21088]]],[1540021115070,["gjx16@GJXAIOU",[[1,21088,"逆置之前需要保存单个"]],[21088,21088],[21098,21098]]],[1540021116844,["gjx16@GJXAIOU",[[-1,21096,"单个"]],[21098,21098],[21096,21096]]],[1540021139779,["gjx16@GJXAIOU",[[1,21096,"三个结点，当前结点的指针，上一个结点的指针，狭义的"]],[21096,21096],[21121,21121]]],[1540021141087,["gjx16@GJXAIOU",[[-1,21118,"狭义的"]],[21121,21121],[21118,21118]]],[1540021146657,["gjx16@GJXAIOU",[[1,21118,"下一个结点的指针"]],[21118,21118],[21126,21126]]],[1540021154254,["gjx16@GJXAIOU",[[-1,21100,"，"]],[21101,21101],[21100,21100]]],[1540021155357,["gjx16@GJXAIOU",[[1,21100,"："]],[21100,21100],[21101,21101]]],[1540021400043,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21126,"zi"],[1,21128,"\n}"],[-1,21136,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21136,21136]]],[1540021400043,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21126,"zi"],[-1,21126,"\n}"],[1,21136,"\n\n# 单项链表的逆置\n\n\n"]],[21136,21136],[11020,11020]]],[1540021345260,["gjx16@GJXAIOU",[[1,21127,"\n"]],[21126,21126],[21127,21127]]],[1540021346372,["gjx16@GJXAIOU",[[1,21128,"\n"]],[21127,21127],[21128,21128]]],[1540021364715,["gjx16@GJXAIOU",[[1,21128,"  struct list *pre ->"]],[21128,21128],[21149,21149]]],[1540021372059,["gjx16@GJXAIOU",[[-1,21147,"->"]],[21149,21149],[21147,21147]]],[1540021374368,["gjx16@GJXAIOU",[[1,21147,"= la"]],[21147,21147],[21151,21151]]],[1540021375381,["gjx16@GJXAIOU",[[-1,21150,"a"]],[21151,21151],[21150,21150]]],[1540021388380,["gjx16@GJXAIOU",[[1,21150,"s;//上一个结点的指针"]],[21150,21150],[21162,21162]]],[1540021389173,["gjx16@GJXAIOU",[[1,21163,"  \n"]],[21162,21162],[21165,21165]]],[1540021399312,["gjx16@GJXAIOU",[[1,21165,"struct list *cur "]],[21165,21165],[21182,21182]]],[1540021460038,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21126,"z"],[1,21127,"\n"],[-1,21183,"i"],[1,21184,"}"],[-1,21192,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21192,21192]]],[1540021460038,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21126,"z"],[-1,21126,"\n"],[1,21183,"i"],[-1,21183,"}"],[1,21192,"\n\n# 单项链表的逆置\n\n\n"]],[21192,21192],[11020,11020]]],[1540021401636,["gjx16@GJXAIOU",[[1,21183," la"]],[21183,21183],[21186,21186]]],[1540021402301,["gjx16@GJXAIOU",[[-1,21185,"a"]],[21186,21186],[21185,21185]]],[1540021404417,["gjx16@GJXAIOU",[[1,21185,"s - "]],[21185,21185],[21189,21189]]],[1540021405106,["gjx16@GJXAIOU",[[-1,21188," "]],[21189,21189],[21188,21188]]],[1540021410477,["gjx16@GJXAIOU",[[1,21188,"> next;、、"]],[21188,21188],[21197,21197]]],[1540021411529,["gjx16@GJXAIOU",[[-1,21195,"、、"]],[21197,21197],[21195,21195]]],[1540021417836,["gjx16@GJXAIOU",[[1,21195,"//当前结点的"]],[21195,21195],[21202,21202]]],[1540021419891,["gjx16@GJXAIOU",[[-1,21199,"结点的"]],[21202,21202],[21199,21199]]],[1540021425233,["gjx16@GJXAIOU",[[1,21199,"节点的指针"]],[21199,21199],[21204,21204]]],[1540021426308,["gjx16@GJXAIOU",[[1,21205,"  \n"]],[21204,21204],[21207,21207]]],[1540021428382,["gjx16@GJXAIOU",[[1,21207,"atru"]],[21207,21207],[21211,21211]]],[1540021430130,["gjx16@GJXAIOU",[[-1,21207,"atru"]],[21211,21211],[21207,21207]]],[1540021435097,["gjx16@GJXAIOU",[[1,21207,"stryu"]],[21207,21207],[21212,21212]]],[1540021436581,["gjx16@GJXAIOU",[[-1,21210,"yu"]],[21212,21212],[21210,21210]]],[1540021456951,["gjx16@GJXAIOU",[[1,21210,"uct list *next = NULL;//x"]],[21210,21210],[21235,21235]]],[1540021457875,["gjx16@GJXAIOU",[[-1,21234,"x"]],[21235,21235],[21234,21234]]],[1540021520040,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21126,"z"],[1,21127,"\n"],[-1,21182,"\n"],[1,21183,"="],[-1,21204,"i"],[1,21205,"\n"],[1,21235,"}"],[-1,21243,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21243,21243]]],[1540021520040,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21126,"z"],[-1,21126,"\n"],[1,21182,"\n"],[-1,21182,"="],[1,21204,"i"],[-1,21204,"\n"],[-1,21235,"}"],[1,21244,"\n\n# 单项链表的逆置\n\n\n"]],[21243,21243],[11020,11020]]],[1540021461934,["gjx16@GJXAIOU",[[1,21234,"下一个结点的"]],[21234,21234],[21240,21240]]],[1540021463242,["gjx16@GJXAIOU",[[-1,21237,"结点的"]],[21240,21240],[21237,21237]]],[1540021469377,["gjx16@GJXAIOU",[[1,21237,"节点的指针"]],[21237,21237],[21242,21242]]],[1540021470116,["gjx16@GJXAIOU",[[1,21243,"  \n"]],[21242,21242],[21245,21245]]],[1540021478357,["gjx16@GJXAIOU",[[1,21245,"while()"]],[21245,21245],[21252,21252]]],[1540021481696,["gjx16@GJXAIOU",[[1,21251,"cur"]],[21251,21251],[21254,21254]]],[1540021483732,["gjx16@GJXAIOU",[[1,21256,"  \n"]],[21255,21255],[21258,21258]]],[1540021485575,["gjx16@GJXAIOU",[[1,21258,"  {}"]],[21258,21258],[21262,21262]]],[1540021487101,["gjx16@GJXAIOU",[[1,21261,"\n    \n    "]],[21261,21261],[21271,21271]]],[1540021500912,["gjx16@GJXAIOU",[[1,21266,"  next = cur -> "]],[21266,21266],[21282,21282]]],[1540021503913,["gjx16@GJXAIOU",[[-1,21281," "]],[21282,21282],[21281,21281]]],[1540021506802,["gjx16@GJXAIOU",[[1,21281," nez"]],[21281,21281],[21285,21285]]],[1540021507562,["gjx16@GJXAIOU",[[-1,21284,"z"]],[21285,21285],[21284,21284]]],[1540021510106,["gjx16@GJXAIOU",[[1,21284,"xt;"]],[21284,21284],[21287,21287]]],[1540021510874,["gjx16@GJXAIOU",[[1,21292,"  \n    "]],[21287,21287],[21294,21294]]],[1540021518145,["gjx16@GJXAIOU",[[1,21294,"cur - "]],[21294,21294],[21300,21300]]],[1540021519089,["gjx16@GJXAIOU",[[-1,21299," "]],[21300,21300],[21299,21299]]],[1540021580042,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21126,"z"],[1,21127,"\n"],[-1,21182,"\n"],[1,21183,"="],[-1,21204,"i"],[1,21205,"\n"],[-1,21306,""],[1,21306,"}"],[-1,21314,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21314,21314]]],[1540021580042,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21126,"z"],[-1,21126,"\n"],[1,21182,"\n"],[-1,21182,"="],[1,21204,"i"],[-1,21204,"\n"],[1,21306,""],[-1,21306,"}"],[1,21315,"\n\n# 单项链表的逆置\n\n\n"]],[21314,21314],[11020,11020]]],[1540021527529,["gjx16@GJXAIOU",[[1,21299,"> next = pre;"]],[21299,21299],[21312,21312]]],[1540021528389,["gjx16@GJXAIOU",[[1,21317,"  \n    "]],[21312,21312],[21319,21319]]],[1540021533406,["gjx16@GJXAIOU",[[1,21319,"pre = cur;"]],[21319,21319],[21329,21329]]],[1540021534060,["gjx16@GJXAIOU",[[1,21334,"  \n    "]],[21329,21329],[21336,21336]]],[1540021539818,["gjx16@GJXAIOU",[[1,21336,"cur = next;"]],[21336,21336],[21347,21347]]],[1540021556252,["gjx16@GJXAIOU",[[1,21354,"    \n"]],[21353,21353],[21358,21358]]],[1540021561429,["gjx16@GJXAIOU",[[1,21358,"ls"]],[21358,21358],[21360,21360]]],[1540021565438,["gjx16@GJXAIOU",[[1,21358,"\n    "]],[21358,21358],[21363,21363]]],[1540021576130,["gjx16@GJXAIOU",[[1,21365," -> next = pre;"]],[21365,21365],[21380,21380]]],[1540021640044,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21126,"z"],[1,21127,"\n"],[-1,21182,"\n"],[1,21183,"="],[-1,21204,"i"],[1,21205,"\n"],[-1,21381,""],[1,21381,"}"],[-1,21389,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21389,21389]]],[1540021640044,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21126,"z"],[-1,21126,"\n"],[1,21182,"\n"],[-1,21182,"="],[1,21204,"i"],[-1,21204,"\n"],[1,21381,""],[-1,21381,"}"],[1,21390,"\n\n# 单项链表的逆置\n\n\n"]],[21389,21389],[11020,11020]]],[1540021590077,["gjx16@GJXAIOU",[[1,21085,"    \n"]],[21084,21084],[21089,21089]]],[1540021590340,["gjx16@GJXAIOU",[[-1,21085,"    "],[1,21089,"\n"]],[21089,21089],[21086,21086]]],[1540021639522,["gjx16@GJXAIOU",[[1,21086,"  struct list *last = la -> "]],[21086,21086],[21114,21114]]],[1540021700044,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21156,"z"],[1,21157,"\n"],[-1,21212,"\n"],[1,21213,"="],[-1,21234,"i"],[1,21235,"\n"],[-1,21411,""],[1,21411,"}"],[-1,21419,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21419,21419]]],[1540021700044,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21156,"z"],[-1,21156,"\n"],[1,21212,"\n"],[-1,21212,"="],[1,21234,"i"],[-1,21234,"\n"],[1,21411,""],[-1,21411,"}"],[1,21420,"\n\n# 单项链表的逆置\n\n\n"]],[21419,21419],[11020,11020]]],[1540021642250,["gjx16@GJXAIOU",[[-1,21109,"a -> "]],[21114,21114],[21109,21109]]],[1540021656936,["gjx16@GJXAIOU",[[1,21109,"s ->next;//逆置后ls - >"]],[21109,21109],[21129,21129]]],[1540021657616,["gjx16@GJXAIOU",[[-1,21127," >"]],[21129,21129],[21127,21127]]],[1540021671505,["gjx16@GJXAIOU",[[1,21127,">next就成了最后一个节点了；"]],[21127,21127],[21143,21143]]],[1540021680085,["gjx16@GJXAIOU",[[1,21440,"    \n"]],[21439,21439],[21444,21444]]],[1540021695386,["gjx16@GJXAIOU",[[1,21444,"last ->nez"]],[21444,21444],[21454,21454]]],[1540021696498,["gjx16@GJXAIOU",[[-1,21453,"z"]],[21454,21454],[21453,21453]]],[1540021697014,["gjx16@GJXAIOU",[[1,21453,"xr"]],[21453,21453],[21455,21455]]],[1540021697867,["gjx16@GJXAIOU",[[-1,21454,"r"]],[21455,21455],[21454,21454]]],[1540021698970,["gjx16@GJXAIOU",[[1,21454,"t "]],[21454,21454],[21456,21456]]],[1540021760050,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,21072,"\n}"],[1,21074,"只有"],[-1,21185,"z"],[1,21186,"\n"],[-1,21241,"\n"],[1,21242,"="],[-1,21263,"i"],[1,21264,"\n"],[-1,21457,""],[1,21457,"}"],[-1,21465,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[21465,21465]]],[1540021760050,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,21072,"\n}"],[-1,21072,"只有"],[1,21185,"z"],[-1,21185,"\n"],[1,21241,"\n"],[-1,21241,"="],[1,21263,"i"],[-1,21263,"\n"],[1,21457,""],[-1,21457,"}"],[1,21466,"\n\n# 单项链表的逆置\n\n\n"]],[21465,21465],[11020,11020]]],[1540021708032,["gjx16@GJXAIOU",[[1,21456,"= NULL;f"]],[21456,21456],[21464,21464]]],[1540021709010,["gjx16@GJXAIOU",[[-1,21463,"f"]],[21464,21464],[21463,21463]]],[1540021730684,["gjx16@GJXAIOU",[[1,20944,"\n"]],[20943,20943],[20944,20944]]],[1540021730854,["gjx16@GJXAIOU",[[1,20945,"\n"]],[20944,20944],[20945,20945]]],[1540021731429,["gjx16@GJXAIOU",[[1,20945,"#include<stdio.h>\n#include<stdlib.h>\n\n//一个结点包含数据域和指针域\n\nstruct  list\n{\n   int  data;//数据域\n   struct  list  *next;//指针域\n};\n\n\n//创建一个结点的函数：\n\nstruct  list  *create_list()\n{\n  return  calloc(sizeof(struct  list),1);\n};\n\n\n\n//循环遍历链表\n\nvoid  traverse(struct  list  *ls)\n{\n  struct  list  *p  =  ls;\n  while(p)//要保证最后一个结点指向NULL，否则循环无法结束\n  {\n  printf(\"%d\\n\",p  ->  data);\n  p  =  p  ->  next;  //p指向他对应的下一个结点\n  }\n}\n\n\n//返回链表的最后一个节点\nstruct list *last_list(struct list *ls)\n{\n   struct list *p = ls;\n   while(p -> next)//当p的next为空时候，表示p为最后一个节点\n   {\n       p = p -> next;\n   }\n  return p;\n}\n\nstruct  list  *insert_list(struct  list  *ls,  int  n,  int  data)\n{\n  struct  list  *p  =  ls;\n  while(p  &&  n--)\n    {\n      p  =  p  ->  next;\n    }\n\n  if(p  ==  NULL)\n    {\n      return  NULL;//n的位置大于链表节点数\n    }\n\n  struct  list  *node  =  create_list();//新建立一个节点\n  node  ->  data  =  data;\n  node  ->  next  =  p  ->  next;\n  p  ->  next  =  node;\n  return  node;\n};\n\n\n//这里只合并链表的节点，删除第二个链表头\n\nvoid merge_list(struct list *ls1, struct list *ls2)\n{\n  last_list(ls1) -> next = ls2 -> next;//这里调用上一个函数，获取第一个链表的最后一个节点\n  free(ls2);//后面一个链表的链表头不要了\n\n}"]],[20945,20945],[22068,22068]]],[1540021734990,["gjx16@GJXAIOU",[[1,22069,"\n"]],[22068,22068],[22069,22069]]],[1540021735168,["gjx16@GJXAIOU",[[1,22070,"\n"]],[22069,22069],[22070,22070]]],[1540021751085,["gjx16@GJXAIOU",[[1,22593,"\n"]],[22592,22592],[22593,22593]]],[1540021751270,["gjx16@GJXAIOU",[[1,22594,"\n"]],[22593,22593],[22594,22594]]],[1540021751884,["gjx16@GJXAIOU",[[1,22595,"\n"]],[22594,22594],[22595,22595]]],[1540021752081,["gjx16@GJXAIOU",[[1,22596,"\n"]],[22595,22595],[22596,22596]]],[1540021752291,["gjx16@GJXAIOU",[[1,22597,"\n"]],[22596,22596],[22597,22597]]],[1540021752719,["gjx16@GJXAIOU",[[1,22597,"int  main(void)\n{\n  //创建三个结点(可以通过函数)\n\n  struct  list  *first  =  calloc(sizeof(struct  list),  1);//在堆中间创建一个结点\n  struct  list  *second  =  calloc(sizeof(struct  list),  1);\n  struct  list  *third  =  create_list();\n\n  //将三个结点连接起来\n\n  first  ->  next  =  second;\n  second  ->  next  =  third;\n  third  ->  next  =  NULL;\n\n  //数据域进行赋值\n\n  first  ->  data  =  2;\n  second  ->  data  =  3;\n  third  ->data  =  4;\n\n\n//快速创建链表first1\n\nstruct list *first1 = create_list();\nint i;\nfor(i = 0; i < 10; i++)\n  {\n    insert_list(first1,0,i);\n  }\n\n\nmerge_list(first,first1);\ntraverse(first);\n  return  0;\n\n}\n"]],[22597,22597],[23188,23188]]],[1540021820083,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22199,"\n}"],[1,22201,"只有"],[-1,22312,"z"],[1,22313,"\n"],[-1,22368,"\n"],[1,22369,"="],[-1,22390,"i"],[1,22391,"\n"],[1,22591,"}"],[-1,22592,"`"],[1,23191,"`"],[-1,23195,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[23195,23195]]],[1540021820083,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22199,"\n}"],[-1,22199,"只有"],[1,22312,"z"],[-1,22312,"\n"],[1,22368,"\n"],[-1,22368,"="],[1,22390,"i"],[-1,22390,"\n"],[-1,22591,"}"],[1,22593,"`"],[-1,23191,"`"],[1,23196,"\n\n# 单项链表的逆置\n\n\n"]],[23195,23195],[11020,11020]]],[1540021797404,["gjx16@GJXAIOU",[[1,23172,"\n"]],[23171,23171],[23172,23172]]],[1540021800244,["gjx16@GJXAIOU",[[1,23172,"res"]],[23172,23172],[23175,23175]]],[1540021801354,["gjx16@GJXAIOU",[[-1,23174,"s"]],[23175,23175],[23174,23174]]],[1540021808146,["gjx16@GJXAIOU",[[1,23174,"verse(0;"]],[23174,23174],[23182,23182]]],[1540021808922,["gjx16@GJXAIOU",[[-1,23180,"0;"]],[23182,23182],[23180,23180]]],[1540021810321,["gjx16@GJXAIOU",[[1,23180,");"]],[23180,23180],[23182,23182]]],[1540021813626,["gjx16@GJXAIOU",[[1,23180,"fird"]],[23180,23180],[23184,23184]]],[1540021814537,["gjx16@GJXAIOU",[[-1,23182,"rd"]],[23184,23184],[23182,23182]]],[1540021816552,["gjx16@GJXAIOU",[[1,23182,"rst"]],[23182,23182],[23185,23185]]],[1540021862471,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22199,"\n}"],[1,22201,"只有"],[-1,22312,"z"],[1,22313,"\n"],[-1,22368,"\n"],[1,22369,"="],[-1,22390,"i"],[1,22391,"\n"],[1,22591,"}"],[-1,22592,"`"],[1,23207,"`"],[-1,23211,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[23211,23211]]],[1540021862471,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22199,"\n}"],[-1,22199,"只有"],[1,22312,"z"],[-1,22312,"\n"],[1,22368,"\n"],[-1,22368,"="],[1,22390,"i"],[-1,22390,"\n"],[-1,22591,"}"],[1,22593,"`"],[-1,23207,"`"],[1,23212,"\n\n# 单项链表的逆置\n\n\n"]],[23211,23211],[11020,11020]]],[1540021848148,["gjx16@GJXAIOU",[[-1,21895,"//这里只合并链表的节点，删除第二个链表头\n\nvoid merge_list(struct list *ls1, struct list *ls2)\n{\n  last_list(ls1) -> next = ls2 -> next;//这里调用上一个函数，获取第一个链表的最后一个节点\n  free(ls2);//后面一个链表的链表头不要了\n\n}\n"]],[21895,22069],[21895,21895]]],[1540021856234,["gjx16@GJXAIOU",[[-1,22832,"//快速创建链表first1\n\nstruct list *first1 = create_list();\nint i;\nfor(i = 0; i < 10; i++)\n  {\n    insert_list(first1,0,i);\n  }"]],[22832,22952],[22832,22832]]],[1540021858868,["gjx16@GJXAIOU",[[-1,22835,"merge_list(first,first1);\n"]],[22834,22860],[22834,22834]]],[1540021859553,["gjx16@GJXAIOU",[[-1,22834,"\n"]],[22834,22834],[22833,22833]]],[1540021859840,["gjx16@GJXAIOU",[[-1,22833,"\n"]],[22833,22833],[22832,22832]]],[1540021860125,["gjx16@GJXAIOU",[[-1,22832,"\n"]],[22832,22832],[22831,22831]]],[1540021860524,["gjx16@GJXAIOU",[[-1,22831,"\n"]],[22831,22831],[22830,22830]]],[1540022042485,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22883,"`"],[-1,22887,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22887,22887]]],[1540022042485,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22883,"`"],[1,22888,"\n\n# 单项链表的逆置\n\n\n"]],[22887,22887],[11020,11020]]],[1540022002939,["gjx16@GJXAIOU",[[1,22830,"  \n"]],[22829,22829],[22832,22832]]],[1540022017458,["gjx16@GJXAIOU",[[1,22832,"fourth -> data = 5;"]],[22832,22832],[22851,22851]]],[1540022022241,["gjx16@GJXAIOU",[[-1,22870,"reverse(first);"]],[22870,22885],[22870,22870]]],[1540022023876,["gjx16@GJXAIOU",[[1,22853,"\n"]],[22852,22852],[22853,22853]]],[1540022024370,["gjx16@GJXAIOU",[[1,22853,"reverse(first);"]],[22853,22853],[22868,22868]]],[1540022026977,["gjx16@GJXAIOU",[[1,22816,"b"]],[22816,22816],[22817,22817]]],[1540022028122,["gjx16@GJXAIOU",[[-1,22816,"b"]],[22817,22817],[22816,22816]]],[1540022028374,["gjx16@GJXAIOU",[[1,22816," "]],[22816,22816],[22817,22817]]],[1540022030011,["gjx16@GJXAIOU",[[1,22765," "]],[22765,22765],[22766,22766]]],[1540022032090,["gjx16@GJXAIOU",[[1,22841," "]],[22841,22841],[22842,22842]]],[1540022033751,["gjx16@GJXAIOU",[[1,22820,"  "]],[22820,22820],[22822,22822]]],[1540022035263,["gjx16@GJXAIOU",[[1,22847," "]],[22847,22847],[22848,22848]]],[1540022037279,["gjx16@GJXAIOU",[[1,22853," "]],[22853,22853],[22854,22854]]],[1540022039425,["gjx16@GJXAIOU",[[-1,22856,"5"],[1,22857," "]],[22856,22857],[22857,22857]]],[1540022041648,["gjx16@GJXAIOU",[[1,22857,"5"]],[22857,22857],[22858,22858]]],[1540022050643,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22914,"`"],[-1,22918,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22918,22918]]],[1540022050643,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22914,"`"],[1,22919,"\n\n# 单项链表的逆置\n\n\n"]],[22918,22918],[11020,11020]]],[1540022047076,["gjx16@GJXAIOU",[[1,22861,"  "]],[22861,22861],[22863,22863]]],[1540022048429,["gjx16@GJXAIOU",[[1,22879,"  "]],[22879,22879],[22881,22881]]],[1540022110642,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22918,"`"],[-1,22922,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22922,22922]]],[1540022110642,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22918,"`"],[1,22923,"\n\n# 单项链表的逆置\n\n\n"]],[22922,22922],[11020,11020]]],[1540022085012,["gjx16@GJXAIOU",[[-1,22736,"NULL"],[1,22740,"f"]],[22736,22740],[22737,22737]]],[1540022087325,["gjx16@GJXAIOU",[[1,22737,"ourth"]],[22737,22737],[22742,22742]]],[1540022090445,["gjx16@GJXAIOU",[[1,22744,"  \n"]],[22743,22743],[22746,22746]]],[1540022105612,["gjx16@GJXAIOU",[[1,22746,"fourth -> next = NULL;"]],[22746,22746],[22768,22768]]],[1540022107703,["gjx16@GJXAIOU",[[1,22663," "]],[22663,22663],[22664,22664]]],[1540022109488,["gjx16@GJXAIOU",[[1,22724," "]],[22724,22724],[22725,22725]]],[1540022119539,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22947,"`"],[-1,22951,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22951,22951]]],[1540022119539,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22947,"`"],[1,22952,"\n\n# 单项链表的逆置\n\n\n"]],[22951,22951],[11020,11020]]],[1540022111872,["gjx16@GJXAIOU",[[1,22759," "]],[22759,22759],[22760,22760]]],[1540022114193,["gjx16@GJXAIOU",[[1,22765," "]],[22764,22764],[22765,22765]]],[1540022115544,["gjx16@GJXAIOU",[[1,22768," "]],[22768,22768],[22769,22769]]],[1540022179555,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22755," "],[-1,22758,"n"],[1,22760,"n"],[1,22764," "],[-1,22768," "],[1,22950,"`"],[-1,22954,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22954,22954]]],[1540022179555,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22755," "],[1,22759,"n"],[-1,22760,"n"],[-1,22765," "],[1,22770," "],[-1,22951,"`"],[1,22956,"\n\n# 单项链表的逆置\n\n\n"]],[22954,22954],[11020,11020]]],[1540022165962,["gjx16@GJXAIOU",[[1,22638,"  struct  list  *third  =  create_list();"]],[22638,22638],[22679,22679]]],[1540022169937,["gjx16@GJXAIOU",[[-1,22655,"third"]],[22660,22660],[22655,22655]]],[1540022172535,["gjx16@GJXAIOU",[[1,22655,"FOURTH"]],[22655,22655],[22661,22661]]],[1540022175649,["gjx16@GJXAIOU",[[-1,22655,"FOURTH"]],[22661,22661],[22655,22655]]],[1540022178382,["gjx16@GJXAIOU",[[1,22655,"fourth"]],[22655,22655],[22661,22661]]],[1540022239914,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22797," "],[-1,22800,"n"],[1,22802,"n"],[1,22806," "],[-1,22810," "],[1,22992,"`"],[-1,22996,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22996,22996]]],[1540022239914,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22797," "],[1,22801,"n"],[-1,22802,"n"],[-1,22807," "],[1,22812," "],[-1,22993,"`"],[1,22998,"\n\n# 单项链表的逆置\n\n\n"]],[22996,22996],[11020,11020]]],[1540022182008,["gjx16@GJXAIOU",[[1,22485," "]],[22485,22485],[22486,22486]]],[1540022184353,["gjx16@GJXAIOU",[[-1,22485," "]],[22486,22486],[22485,22485]]],[1540022186676,["gjx16@GJXAIOU",[[-1,22558," "]],[22559,22559],[22558,22558]]],[1540022189321,["gjx16@GJXAIOU",[[-1,22661," "]],[22662,22662],[22661,22661]]],[1540022299908,[null,[[-1,11020,"\n"],[1,11021,"x"],[1,11023,"\n"],[-1,11028,"\n"],[1,11047,"\n"],[-1,11469,"d"],[-1,11511," "],[1,11512,"\n"],[1,11543," "],[-1,11581,"#"],[-1,18284,"\n"],[1,18285,"，"],[1,18295,"\n"],[-1,18304,"return index    "],[1,18337,"\n   }\n  return "],[-1,18339,"有找到数据域等于data的节点"],[1,18777,"printf(\"%d\\n\", "],[-1,18784,"\","],[1,18786,"st"],[-1,18792,"e"],[1,18793,")"],[-1,18802,"m_pos(first,3))"],[1,18825,"rn  0;\n\n}\n\n```\n"],[-1,18832,"r"],[1,18833,"\n"],[-1,18963,"n "],[1,18965,"\n\n"],[-1,20928,"\n\n}\n\n``**`"],[1,20938,"单项链表的逆置**\n"],[-1,22025,"\n}"],[1,22027,"只有"],[-1,22138,"z"],[1,22139,"\n"],[-1,22194,"\n"],[1,22195,"="],[-1,22216,"i"],[1,22217,"\n"],[1,22417,"}"],[-1,22418,"`"],[1,22795," "],[-1,22798,"n"],[1,22800,"n"],[1,22804," "],[-1,22808," "],[1,22990,"`"],[-1,22994,"\n\n# 单项链表的逆置\n\n\n"]],[11020,11020],[22994,22994]]],[1540022299908,[null,[[1,11020,"\n"],[-1,11020,"x"],[-1,11023,"\n"],[1,11029,"\n"],[-1,11047,"\n"],[1,11470,"d"],[1,11511," "],[-1,11511,"\n"],[-1,11543," "],[1,11582,"#"],[1,18284,"\n"],[-1,18284,"，"],[-1,18295,"\n"],[1,18305,"return index    "],[-1,18322,"\n   }\n  return "],[1,18339,"有找到数据域等于data的节点"],[-1,18762,"printf(\"%d\\n\", "],[1,18784,"\","],[-1,18784,"st"],[1,18792,"e"],[-1,18792,")"],[1,18802,"m_pos(first,3))"],[-1,18810,"rn  0;\n\n}\n\n```\n"],[1,18832,"r"],[-1,18832,"\n"],[1,18963,"n "],[-1,18963,"\n\n"],[1,20928,"\n\n}\n\n``**`"],[-1,20928,"单项链表的逆置**\n"],[1,22025,"\n}"],[-1,22025,"只有"],[1,22138,"z"],[-1,22138,"\n"],[1,22194,"\n"],[-1,22194,"="],[1,22216,"i"],[-1,22216,"\n"],[-1,22417,"}"],[1,22419,"`"],[-1,22795," "],[1,22799,"n"],[-1,22800,"n"],[-1,22805," "],[1,22810," "],[-1,22991,"`"],[1,22996,"\n\n# 单项链表的逆置\n\n\n"]],[22994,22994],[11020,11020]]],[1540022244164,["gjx16@GJXAIOU",[[1,22996,"\n"]],[22992,22992],[22993,22993]]],[1540022245539,["gjx16@GJXAIOU",[[1,22997,"\n"]],[22993,22993],[22994,22994]]],[1540022247193,["gjx16@GJXAIOU",[[1,22994,"chegn"]],[22994,22994],[22999,22999]]],[1540022249151,["gjx16@GJXAIOU",[[-1,22994,"chegn"]],[22999,22999],[22994,22994]]],[1540022255663,["gjx16@GJXAIOU",[[1,22994,"程序运行结果；"]],[22994,22994],[23001,23001]]],[1540022256857,["gjx16@GJXAIOU",[[-1,23000,"；"]],[23001,23001],[23000,23000]]],[1540022257537,["gjx16@GJXAIOU",[[1,23000,"："]],[23000,23000],[23001,23001]]],[1540022258133,["gjx16@GJXAIOU",[[1,23005,"\n"]],[23001,23001],[23002,23002]]],[1540022278039,["gjx16@GJXAIOU",[[1,23002,"![链表元素逆置]($resource/%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E9%80%86%E7%BD%AE.png)"]],[23002,23002],[23082,23082]]],[1540022280874,["gjx16@GJXAIOU",[[1,23002,"\n"]],[23001,23001],[23002,23002]]]],null,"gjx16@GJXAIOU"]]}