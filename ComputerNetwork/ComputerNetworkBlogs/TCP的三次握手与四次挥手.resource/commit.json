{"compress":true,"commitItems":[["c8dd599d-594c-4693-bba3-6ff9e873aac1",1570845107146,"## TCP的三次握手与四次挥手\n\n小鸟 [JAVA数据结构](javascript:void(0);) _昨天_\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqfyZ8gw6mmhxlKGNia3LhO7q9icojiaZo6dsF5GJjERgHYMVvtC7JRD2Rg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n    序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n\n    确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。\n\n    确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n\n    同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n\n    终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接\n\n    PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n字段  含义\n\nURG  紧急指针是否有效。为1，表示某一位需要被优先处理\n\nACK  确认号是否有效，一般置为1。\n\nPSH  提示接收端应用程序立即从TCP缓冲区把数据读走。\n\nRST  对方要求重新建立连接，复位。\n\nSYN  请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\n\nFIN      希望断开连接。\n\n三次握手过程理解\n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqMsV9cC6tEJAicgCNZibn9WKCQVEyfnThGDyIHt0iaaAVpeR75OBRFrTJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n四次挥手过程理解 \n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqoIfD43oLzYF5s2lcdwO1g3j4jten5G7dMfTtJoYHzI5ENlwOFLOjBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。",[[1570845096153,["GJX@GJXAIOU",[[-1,59,"![](https://mmbiz.qpic.cn/mmbiz_jpg/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqfyZ8gw6mmhxlKGNia3LhO7q9icojiaZo6dsF5GJjERgHYMVvtC7JRD2Rg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n"]],[59,239],[59,59]]],[1570845103908,["GJX@GJXAIOU",[[1,59,"![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)"]],[59,59],[115,115]]],[1570845111306,["GJX@GJXAIOU",[[-1,18,"小鸟 [JAVA数据结构](javascript:void(0);) _昨天_"]],[18,57],[18,18]]],[1570845113592,["GJX@GJXAIOU",[[-1,19,"\n"]],[19,19],[18,18]]],[1570845115465,["GJX@GJXAIOU",[[1,79,"\n    "]],[79,79],[84,84]]],[1570845544034,["GJX@GJXAIOU",[[-1,75,"    "],[1,79,"\n"]],[79,79],[76,76]]],[1570845544192,["GJX@GJXAIOU",[[1,77,"\n"]],[76,76],[77,77]]],[1570845544339,["GJX@GJXAIOU",[[1,78,"\n"]],[77,77],[78,78]]],[1570845547793,["GJX@GJXAIOU",[[-1,0,"#"]],[2,2],[1,1]]],[1570845549464,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1570845552836,["GJX@GJXAIOU",[[-1,0,""],[1,0,"·"],[-1,79,"   "],[1,82,"   "],[-1,199,"   "],[1,202,"   "],[-1,309,"   "],[1,312,"   "],[-1,355,"   "],[1,358,"   "],[-1,502,"   "],[1,505,"   "],[-1,558,"   "],[1,561,"   "],[-1,779,"    "],[1,783,"    "],[-1,1271," "],[1,1272," "]],[0,0],[1,1]]],[1570845553011,["GJX@GJXAIOU",[[1,0,"·"]],[1,1],[2,2]]],[1570845553196,["GJX@GJXAIOU",[[1,2,"·"]],[2,2],[3,3]]],[1570845554561,["GJX@GJXAIOU",[[-1,0,"···"]],[3,3],[0,0]]],[1570845555410,["GJX@GJXAIOU",[[1,0,"`"]],[0,0],[1,1]]],[1570845555604,["GJX@GJXAIOU",[[1,0,"`"]],[1,1],[2,2]]],[1570845555778,["GJX@GJXAIOU",[[1,2,"`"]],[2,2],[3,3]]],[1570845555803,["GJX@GJXAIOU",[[1,3,"language\n```\n"]],[3,3],[3,11]]],[1570845559529,["GJX@GJXAIOU",[[-1,0,"```language\n```"]],[0,15],[0,0]]],[1570845559818,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1570845559980,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1570845560129,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1570845560155,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1570845574245,["GJX@GJXAIOU",[[1,4,"flag: purpo"]],[4,4],[15,15]]],[1570845583697,["GJX@GJXAIOU",[[-1,14,"o"]],[15,15],[14,14]]],[1570845585694,["GJX@GJXAIOU",[[1,14,"le"]],[14,14],[16,16]]],[1570845608194,["GJX@GJXAIOU",[[-1,10,"p"]],[11,11],[10,10]]],[1570845608730,["GJX@GJXAIOU",[[1,10,"P"]],[10,10],[11,11]]],[1570845631684,["GJX@GJXAIOU",[[-1,10,"P"]],[11,11],[10,10]]],[1570845632218,["GJX@GJXAIOU",[[1,10,"p"]],[10,10],[11,11]]],[1570845644098,["GJX@GJXAIOU",[[-1,101,"    "]],[101,105],[101,101]]],[1570845661801,["GJX@GJXAIOU",[[-1,217,"    "]],[217,221],[217,217]]],[1570845662131,["GJX@GJXAIOU",[[1,217,"-"]],[217,217],[218,218]]],[1570845663833,["GJX@GJXAIOU",[[-1,324,"    "]],[324,328],[324,324]]],[1570845665249,["GJX@GJXAIOU",[[1,324,"-"]],[324,324],[325,325]]],[1570845667178,["GJX@GJXAIOU",[[-1,367,"    "]],[367,371],[367,367]]],[1570845668060,["GJX@GJXAIOU",[[1,367,"- "]],[367,367],[369,369]]],[1570845669043,["GJX@GJXAIOU",[[1,325," "]],[325,325],[326,326]]],[1570845669971,["GJX@GJXAIOU",[[1,218," "]],[218,218],[219,219]]],[1570845671695,["GJX@GJXAIOU",[[1,101,"- "]],[101,101],[103,103]]],[1570845678403,["GJX@GJXAIOU",[[-1,100,"\n"]],[99,99],[98,98]]],[1570845678528,["GJX@GJXAIOU",[[-1,99,"\n"]],[98,98],[97,97]]],[1570845685962,["GJX@GJXAIOU",[[-1,514,"    "]],[514,518],[514,514]]],[1570845687507,["GJX@GJXAIOU",[[1,514,"- "]],[514,514],[516,516]]],[1570845694400,["GJX@GJXAIOU",[[-1,569,"   "]],[568,571],[568,568]]],[1570845694674,["GJX@GJXAIOU",[[1,568,"-"]],[568,568],[569,569]]],[1570845711953,["GJX@GJXAIOU",[[1,631,"|"]],[631,631],[632,632]]],[1570845717193,["GJX@GJXAIOU",[[1,636,"---|---"]],[636,636],[643,643]]],[1570845719909,["GJX@GJXAIOU",[[1,649,"|v "]],[649,649],[651,651]]],[1570845721027,["GJX@GJXAIOU",[[-1,650,"v"]],[651,651],[650,650]]],[1570845723138,["GJX@GJXAIOU",[[1,681,"|"]],[681,681],[682,682]]],[1570845724151,["GJX@GJXAIOU",[[-1,676,"\n"]],[676,676],[675,675]]],[1570845726619,["GJX@GJXAIOU",[[-1,697,"\n"]],[697,697],[696,696]]],[1570845728362,["GJX@GJXAIOU",[[1,702," "]],[701,701],[702,702]]],[1570845728802,["GJX@GJXAIOU",[[1,702,"|"]],[702,702],[703,703]]],[1570845731545,["GJX@GJXAIOU",[[-1,729,"\n"]],[729,729],[728,728]]],[1570845734169,["GJX@GJXAIOU",[[1,734,"| "]],[734,734],[736,736]]],[1570845736562,["GJX@GJXAIOU",[[1,757,"| "]],[757,757],[759,759]]],[1570845737763,["GJX@GJXAIOU",[[-1,751,"\n"]],[751,751],[750,750]]],[1570845739776,["GJX@GJXAIOU",[[-1,796,"\n"]],[796,796],[795,795]]],[1570845742281,["GJX@GJXAIOU",[[1,802,"|"]],[802,802],[803,803]]],[1570846101889,["GJX@GJXAIOU",[[1,114,"**"],[1,124,"**"]],[114,124],[114,128]]],[1570846147640,["GJX@GJXAIOU",[[1,236,"**"],[1,259,"**"]],[236,259],[236,263]]],[1570846171298,["GJX@GJXAIOU",[[1,193,"**"],[1,218,"**"]],[193,218],[193,222]]],[1570846214570,["GJX@GJXAIOU",[[1,311,"**"],[1,334,"**"]],[311,334],[311,338]]],[1570846281103,["GJX@GJXAIOU",[[1,464,"**"],[1,487,"**"]],[464,487],[464,491]]],[1570846283312,["GJX@GJXAIOU",[[-1,506,"建产"]],[508,508],[506,506]]],[1570846284396,["GJX@GJXAIOU",[[1,506,"j "]],[506,506],[507,507]]],[1570846284690,["GJX@GJXAIOU",[[1,507,"ian"]],[507,507],[510,510]]],[1570846287665,["GJX@GJXAIOU",[[-1,506,"jian"]],[510,510],[506,506]]],[1570846288786,["GJX@GJXAIOU",[[1,506,"建立"]],[506,506],[508,508]]],[1570846288811,["GJX@GJXAIOU",[[1,506," "]],[508,508],[509,509]]],[1570846291040,["GJX@GJXAIOU",[[-1,509," "]],[510,510],[509,509]]],[1570846293217,["GJX@GJXAIOU",[[1,503," "]],[503,503],[504,504]]],[1570846303721,["GJX@GJXAIOU",[[1,588,"。"]],[588,588],[589,589]]],[1570846534769,["GJX@GJXAIOU",[[1,838,"## "]],[838,838],[849,849]]],[1570846538425,["GJX@GJXAIOU",[[1,1310,"## "]],[1310,1310],[1322,1322]]],[1570846642387,["GJX@GJXAIOU",[[-1,1324,"![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqoIfD43oLzYF5s2lcdwO1g3j4jten5G7dMfTtJoYHzI5ENlwOFLOjBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[1324,1499],[1324,1324]]],[1570846649873,["GJX@GJXAIOU",[[1,1324,"![四次挥手过程]($resource/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png)"]],[1324,1324],[1404,1404]]],[1570846684475,["GJX@GJXAIOU",[[1,1031,"- "]],[1031,1031],[1033,1033]]],[1570846686890,["GJX@GJXAIOU",[[1,1131,"- "]],[1131,1131],[1133,1133]]],[1570846689523,["GJX@GJXAIOU",[[1,1220,"- "]],[1220,1220],[1222,1222]]],[1570846693013,["GJX@GJXAIOU",[[1,1411,"- "]],[1411,1411],[1413,1413]]],[1570846696891,["GJX@GJXAIOU",[[1,1550,"- "]],[1550,1550],[1552,1552]]],[1570846699309,["GJX@GJXAIOU",[[1,1747,"- "]],[1747,1747],[1749,1749]]],[1570846702683,["GJX@GJXAIOU",[[1,1833,"- "]],[1833,1833],[1835,1835]]],[1570846704780,["GJX@GJXAIOU",[[1,1957,"- "]],[1957,1957],[1959,1959]]],[1570846707748,["GJX@GJXAIOU",[[1,2110,"- "]],[2110,2110],[2112,2112]]],[1570848887137,["GJX@GJXAIOU",[[1,40,"网络层是"]],[40,40],[44,44]]],[1570848889153,["GJX@GJXAIOU",[[1,44,"师兄那"]],[44,44],[47,47]]],[1570848891591,["GJX@GJXAIOU",[[-1,44,"师兄那"]],[47,47],[44,44]]],[1570848898683,["GJX@GJXAIOU",[[1,44,"实现两个主机之间的同性"]],[44,44],[55,55]]],[1570848899344,["GJX@GJXAIOU",[[-1,53,"同性"]],[55,55],[53,53]]],[1570848903840,["GJX@GJXAIOU",[[1,53,"通信，"]],[53,53],[56,56]]]],null,"GJX@GJXAIOU"],["ec041f8d-8206-4b73-8292-e9e96e41d993",1571708561381,"---\nflag: purple\n---\n\n\n# TCP的三次握手与四次挥手\n\n网络层是实现两个主机之间的通信，\n![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)\n\n\n- 序列号seq：占4个字节，**用来标记数据段的顺序**，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；**序列号seq就是这个报文段中的第一个字节的数据编号**。\n\n- 确认号ack：占4个字节，**期待收到对方下一个报文段的第一个数据字节的序号**；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；**因此当前报文段最后一个字节的编号+1即为确认号**。\n\n- 确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n\n- 同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，**SYN=1表示这是一个连接请求，或连接接受报文**。SYN这个标志位只有在 TCP 建立连接时才会被置1，握手完成后SYN标志位被置0。\n\n- 终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。\n\n- PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n字段 | 含义\n---|---\nURG  | 紧急指针是否有效。为1，表示某一位需要被优先处理\nACK | 确认号是否有效，一般置为1。\nPSH  | 提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST  | 对方要求重新建立连接，复位。\nSYN  | 请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqMsV9cC6tEJAicgCNZibn9WKCQVEyfnThGDyIHt0iaaAVpeR75OBRFrTJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n- 第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n- 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n## 四次挥手过程理解 \n\n![四次挥手过程]($resource/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png)\n\n- 1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n- 2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n- 3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n- 4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n- 5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n- 6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。",[[1571708544210,["GJX@GJXAIOU",[[-1,114,"\n"]],[114,114],[113,113]]],[1571708634232,["GJX@GJXAIOU",[[1,665,"- \n"]],[664,664],[667,667]]],[1571708634456,["GJX@GJXAIOU",[[-1,665,"- "]],[667,667],[666,666]]],[1571708638203,["GJX@GJXAIOU",[[1,666,"- **含义**\n  - 序列号：指出段中数据在发送端数据流中的位置\n  - 确认号：指出本机希望下一个接收的字节的序列号 \n \n- **原则** \n  - 序列号是上一个收包的确认号不变\n  - 确认号是上一个收包的序列号+上一个收包的数据段的大小 "]],[666,666],[792,792]]],[1571708643573,["GJX@GJXAIOU",[[1,793,"\n"]],[793,793],[794,794]]],[1571708659488,["GJX@GJXAIOU",[[1,2337,"\n- "]],[2337,2337],[2340,2340]]],[1571708659639,["GJX@GJXAIOU",[[-1,2338,"- "],[1,2340,"\n\n"]],[2340,2340],[2339,2339]]],[1571708659817,["GJX@GJXAIOU",[[1,2340,"\n"]],[2339,2339],[2340,2340]]],[1571708660009,["GJX@GJXAIOU",[[1,2341,"\n"]],[2340,2340],[2341,2341]]],[1571708660217,["GJX@GJXAIOU",[[1,2342,"\n"]],[2341,2341],[2342,2342]]],[1571708661593,["GJX@GJXAIOU",[[1,2342,"# [面试]详细描述三次握手和四次挥手的过程+状态图\n\n\n具体题目：\n问题1: 请详细描述三次握手和四次挥手的过程\n\n要求熟悉三次握手和四次挥手的机制，要求画出状态图。\n\n问题2: 四次挥手中TIME_WAIT状态存在的目的是什么?\n\n这个问题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。"]],[2342,2342],[2517,2517]]],[1571708760440,["GJX@GJXAIOU",[[1,1457,"序列号是上一个同步请求数据包中的确认号值，确认号是服务器的初始序列号+1，注意：因为一个SYN将占用一个序号，所以要加1。"]],[1457,1457],[1518,1518]]],[1571708818401,["GJX@GJXAIOU",[[1,1520,"\n"]],[1519,1519],[1520,1520]]],[1571708818546,["GJX@GJXAIOU",[[1,1521,"\n"]],[1520,1520],[1521,1521]]],[1571708818687,["GJX@GJXAIOU",[[1,1522,"\n"]],[1521,1521],[1522,1522]]],[1571708818906,["GJX@GJXAIOU",[[1,1523,"\n"]],[1522,1522],[1523,1523]]],[1571708819059,["GJX@GJXAIOU",[[1,1524,"\n"]],[1523,1523],[1524,1524]]],[1571708821811,["GJX@GJXAIOU",[[1,1520,"## 传输数据的简要过程如下：\n\n  1)  发送数据：服务器向客户端发送一个带有数据的数据包，该数据包中的序列号和确认号与建立连接第三步的数据包中的序列号和确认号相同；\n2)  确认收到：客户端收到该数据包，向服务器发送一个确认数据包，该数据包中，序列号是为上一个数据包中的确认号值，而确认号为服务器发送的上一个数据包中的序列号+上一个数据包中所带数据的大小。 数据分段中的序列号可以保证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。"]],[1520,1520],[1751,1751]]],[1571708924391,["GJX@GJXAIOU",[[1,2636,"注意：因为FIN和SYN一样，也要占一个序号。理论上服务器在TCP连接关闭时发送的终止数据包中，只有终止位是置1，然后客户端进行确认。但是在实际的TCP实现中，在终止数据包中，确认位和终止位是同时置为1的，确认位置为1表示对最后一次传输的数据进行确认，终止位置为1表示关闭该方向的TCP连接。\n"]],[2636,2636],[2783,2783]]],[1571709583306,["GJX@GJXAIOU",[[1,1520,"\n"]],[1520,1520],[1521,1521]]],[1571709583441,["GJX@GJXAIOU",[[1,1521,"\n"]],[1521,1521],[1522,1522]]],[1571709583593,["GJX@GJXAIOU",[[1,1522,"\n"]],[1522,1522],[1523,1523]]],[1571709585393,["GJX@GJXAIOU",[[1,1520,"**1\\. 序列号是“随机”的**\n\n**2\\. ACK +1的问题；**\n序列号应该不是随机的，而是由双方协商的，协商之前最开始的值由TCP运输层生成。 它可能是上一个该端口的序列号+1 ， 原因是为了避免上次已断开的连接，还存在网络中延迟到达的TCP报文段的序号与当前连接中等待报文段的序号相同，以至于认为是这一次连接的包，发生错误。\n\n\n 关于ACK+1，在文中“包2”中如下所述：\n\n “需要注意的是，尽管客户端没有发送任何有效数据，确认号还是被加1，这是因为接收的包中包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）”这实际上是误解，因此误导了很多人。在停-等协议中，ACK确认的是当前包的序列号Seq=1 ，接收端会传回 ACK=1 。标识接收到了Seq=1的包，这是我们认为理所当然的。  但是在TCP协议中不是这样， **当发生Seq=1的包，接受端会传回ACK=2**， 也就是将接受到的Seq+1 ， 代表的是期望接受到的下一个包是 Seq=2的包。 （换句话说，和头部的标志位并没有任何关系）`\n\n为什么要这样呢？.. 这么做比较违反我们的直觉。\n\n因为TCP是以流水线发出的，比如发送端顺序的发出 Seq=1、Seq=2、Seq=3。 那么如果ACK确认的序号和收到的包的序号一致的话，那么需要发回 ACK=1、ACK=2、ACK=3 共三个包。但是TCP协议对此进行了优化，只需要发送一个ACK包就能代表说自己已经收到了前面三个包，\n 那就是发送ACK=4 （期望收到Seq为4的包）。这样节省了ACK确认的数量。\n \n \n 另外TCP是的序号是根据数据流编码的， 假设最开始Seq=0 Len=3， 那么 ACK=4的时候：\n 第一个意思是想表明期待收到下一个Seq为4的包。\n第二个意思实际上是说，想收到的包开始的那个比特位于数据流中的第四个比特。（下次从数据流中的第四个Byte开始发送）\n（实际上上面两个意思是一样的 = = ，同时也再次说明这个ACK+1和头部的标志位无关）\n\n以上问题在 计算机网络：自顶向下 中都有说到， 因为书中和文字有不一致的地方，然后我提出来纠正一下。\n\n\n*   序列号为什么是随机的？ \n 随机是因为为了防止建立链接时数据错乱, 比如如果固定是从1开始, 第一轮链接超时了然后客户端重新发起链接, 又从1开始第二轮, 这样可能第一轮的包刚好传过来了所以导致数据错乱. 为了解决这个问题, 初始序号是一个随机的, 本质上是随时间变化而变化, 每4ms会+1, 所以等到下一个重复的序号出现时需要2^32 * 4 / 1000 / 3600 约等于 4000小时, 这么长的时间里第一轮的请求100%死掉了, 这就是\"随机\"序号的设计原因.\n\n\n"]],[1520,1520],[2704,2704]]],[1571709674610,["GJX@GJXAIOU",[[1,606,"\n"]],[605,605],[606,606]]],[1571709674817,["GJX@GJXAIOU",[[1,607,"\n"]],[606,606],[607,607]]],[1571709675226,["GJX@GJXAIOU",[[1,608,"\n"]],[607,607],[608,608]]],[1571709675441,["GJX@GJXAIOU",[[1,609,"\n"]],[608,608],[609,609]]],[1571709675657,["GJX@GJXAIOU",[[1,610,"\n"]],[609,609],[610,610]]],[1571709675833,["GJX@GJXAIOU",[[1,611,"\n"]],[610,610],[611,611]]],[1571709676096,["GJX@GJXAIOU",[[1,612,"\n"]],[611,611],[612,612]]],[1571709676387,["GJX@GJXAIOU",[[1,613,"\n"]],[612,612],[613,613]]],[1571709676570,["GJX@GJXAIOU",[[1,614,"\n"]],[613,613],[614,614]]],[1571709678586,["GJX@GJXAIOU",[[1,606,"### 常用的熟知端口号\n![常用端口号]($resource/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7.jpg)\n\n## 二、TCP的概述\n\n TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。\n\n### （一）TCP报文首部\n\n![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)\n\n- **源端口和目的端口**：各占2个字节，分别写入源端口和目的端口；\n\n- **序号**：占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；\n\n- **确认号**：占4个字节，**是期望收到对方下一个报文的第一个数据字节的序号**。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；\n\n- **数据偏移**：占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；\n\n- **保留**：占6位，保留今后使用，但目前应都位0；\n\n- **紧急URG**：当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；\n\n- **确认ACK**：仅当ACK=1时，确认号字段才有效。TCP规定，**在连接建立后所有报文的传输都必须把ACK置1**；\n\n- **推送PSH**：当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；\n\n- **复位RST**：当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；\n\n- **同步SYN**：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；\n\n- **终止FIN**：用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；\n\n- **窗口**：占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；\n\n- **检验和**：占2字节，校验首部和数据这两部分；\n\n- **紧急指针**：占2字节，指出本报文段中的紧急数据的字节数；\n\n- **选项**：长度可变，定义一些其他的可选的参数。"]],[606,606],[1785,1785]]],[1571709717410,["GJX@GJXAIOU",[[1,3892,"### （一）为什么TCP客户端最后还要发送一次确认呢？\n\n 一句话，**主要防止已经失效的连接请求报文突然又传送到了服务器**从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。\n \n如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。"]],[3892,3892],[4281,4281]]],[1571709747485,["GJX@GJXAIOU",[[1,5548,"### （一）为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n###  （二）为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n 建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n 而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### （三）如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[5548,5548],[6364,6364]]],[1571709785861,["GJX@GJXAIOU",[[-1,22,"\n"]],[22,22],[21,21]]],[1571709789186,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1571709789411,["GJX@GJXAIOU",[[1,40,"\n"]],[39,39],[40,40]]],[1571709789490,["GJX@GJXAIOU",[[1,41,"\n"]],[40,40],[41,41]]],[1571709828451,["GJX@GJXAIOU",[[1,39,"## "]],[39,39],[42,42]]],[1571709830631,["GJX@GJXAIOU",[[1,42,"前言"],[-1,3670," "],[1,3671," "]],[42,42],[44,44]]],[1571709831269,["GJX@GJXAIOU",[[1,47,"\n"]],[44,44],[45,45]]],[1571709835358,["GJX@GJXAIOU",[[1,42,"一、"]],[42,42],[44,44]]],[1571709840667,["GJX@GJXAIOU",[[1,47," TCP 协议："]],[47,47],[55,55]]],[1571709850030,["GJX@GJXAIOU",[[1,51,"、"]],[51,51],[52,52]]],[1571709850818,["GJX@GJXAIOU",[[-1,51,"、"]],[52,52],[51,51]]],[1571709851788,["GJX@GJXAIOU",[[1,51,"?"]],[51,51],[52,52]]],[1571709852717,["GJX@GJXAIOU",[[-1,51,"?"]],[52,52],[51,51]]],[1571709853639,["GJX@GJXAIOU",[[1,51,"？"]],[51,51],[52,52]]],[1571709854235,["GJX@GJXAIOU",[[-1,51,"？"]],[52,52],[51,51]]],[1571709854772,["GJX@GJXAIOU",[[1,51,"、"]],[51,51],[52,52]]],[1571709855243,["GJX@GJXAIOU",[[-1,51,"、"]],[52,52],[51,51]]],[1571709857040,["GJX@GJXAIOU",[[1,51,"/IP"]],[51,51],[54,54]]],[1571709862301,["GJX@GJXAIOU",[[1,58,"是网络层"]],[58,58],[62,62]]],[1571709864765,["GJX@GJXAIOU",[[-1,59,"网络层"]],[62,62],[59,59]]],[1571709879673,["GJX@GJXAIOU",[[1,59,"传输层协议，主要解决数据如何在"]],[59,59],[74,74]]],[1571709884629,["GJX@GJXAIOU",[[1,74,"网络中农"]],[74,74],[78,78]]],[1571709884938,["GJX@GJXAIOU",[[-1,77,"农"]],[78,78],[77,77]]],[1571709890429,["GJX@GJXAIOU",[[1,77,"传输；"]],[77,77],[80,80]]],[1571709890718,["GJX@GJXAIOU",[[1,81," \n"]],[80,80],[82,82]]],[1571709910422,["GJX@GJXAIOU",[[1,82,"HTTP 协议：是应用层协议，主要解决如何包装数据；"]],[82,82],[108,108]]],[1571710025782,["GJX@GJXAIOU",[[-1,111,"网络层是实现两个主机之间的通信，"]],[111,127],[111,111]]],[1571710043911,["GJX@GJXAIOU",[[1,110,"## 二、TCP 帧结构"]],[110,110],[122,122]]],[1571710125701,["GJX@GJXAIOU",[[1,109,"套接字： TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。"]],[109,109],[242,242]]],[1571710128771,["GJX@GJXAIOU",[[1,243,"\n"]],[243,243],[244,244]]],[1571710128944,["GJX@GJXAIOU",[[1,244,"\n"]],[244,244],[245,245]]],[1571710134581,["GJX@GJXAIOU",[[1,47,"-"]],[47,47],[48,48]]],[1571710136476,["GJX@GJXAIOU",[[1,82,"-"]],[82,82],[83,83]]],[1571710138301,["GJX@GJXAIOU",[[1,110,"-"]],[110,110],[111,111]]],[1571710139523,["GJX@GJXAIOU",[[-1,110,"-"]],[111,111],[110,110]]],[1571710139833,["GJX@GJXAIOU",[[1,110," "]],[110,110],[111,111]]],[1571710141565,["GJX@GJXAIOU",[[1,112,"- "]],[112,112],[114,114]]],[1571710158099,["GJX@GJXAIOU",[[1,151,"**"],[1,168,"**"]],[151,168],[151,172]]],[1571710360331,[null,[[-1,1061,"![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)"]],[1061,1061],[1061,1061]]],[1571710360331,[null,[[1,1061,"![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)"]],[1061,1061],[1061,1061]]],[1571710307730,["GJX@GJXAIOU",[[1,564,"（）"]],[564,564],[566,566]]],[1571710319144,["GJX@GJXAIOU",[[1,565,"这里加上不懈怠"]],[565,565],[572,572]]],[1571710319872,["GJX@GJXAIOU",[[-1,570,"懈怠"]],[572,572],[570,570]]],[1571710322862,["GJX@GJXAIOU",[[1,570,"携带数据"]],[570,570],[574,574]]],[1571710335094,["GJX@GJXAIOU",[[-1,912,"## 二、TCP的概述\n\n TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。\n\n### （一）TCP报文首部\n\n\n\n- **源端口和目的端口**：各占2个字节，分别写入源端口和目的端口；\n\n- **序号**：占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；\n\n- **确认号**：占4个字节，**是期望收到对方下一个报文的第一个数据字节的序号**。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；\n\n- **数据偏移**：占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；\n\n- **保留**：占6位，保留今后使用，但目前应都位0；\n\n- **紧急URG**：当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；\n\n- **确认ACK**：仅当ACK=1时，确认号字段才有效。TCP规定，**在连接建立后所有报文的传输都必须把ACK置1**；\n\n- **推送PSH**：当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；\n\n- **复位RST**：当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；\n\n- **同步SYN**：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；\n\n- **终止FIN**：用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；\n\n- **窗口**：占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；\n\n- **检验和**：占2字节，校验首部和数据这两部分；\n\n- **紧急指针**：占2字节，指出本报文段中的紧急数据的字节数；\n\n- **选项**：长度可变，定义一些其他的可选的参数。\n\n\n\n\n\n"]],[912,1958],[912,912]]],[1571710343610,["GJX@GJXAIOU",[[-1,915,"- PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n- **含义**\n  - 序列号：指出段中数据在发送端数据流中的位置\n  - 确认号：指出本机希望下一个接收的字节的序列号 \n \n- **原则** \n  - 序列号是上一个收包的确认号不变\n  - 确认号是上一个收包的序列号+上一个收包的数据段的大小 \n\n字段 | 含义\n---|---\nURG  | 紧急指针是否有效。为1，表示某一位需要被优先处理\nACK | 确认号是否有效，一般置为1。\nPSH  | 提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST  | 对方要求重新建立连接，复位。\nSYN  | 请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n"]],[915,1289],[915,915]]],[1571710346282,["GJX@GJXAIOU",[[1,828,"\n"]],[827,827],[828,828]]],[1571710346408,["GJX@GJXAIOU",[[1,829,"\n"]],[828,828],[829,829]]],[1571710346532,["GJX@GJXAIOU",[[1,830,"\n"]],[829,829],[830,830]]],[1571710346658,["GJX@GJXAIOU",[[1,831,"\n"]],[830,830],[831,831]]],[1571710348331,["GJX@GJXAIOU",[[1,828,"- PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n- **含义**\n  - 序列号：指出段中数据在发送端数据流中的位置\n  - 确认号：指出本机希望下一个接收的字节的序列号 \n \n- **原则** \n  - 序列号是上一个收包的确认号不变\n  - 确认号是上一个收包的序列号+上一个收包的数据段的大小 \n\n字段 | 含义\n---|---\nURG  | 紧急指针是否有效。为1，表示某一位需要被优先处理\nACK | 确认号是否有效，一般置为1。\nPSH  | 提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST  | 对方要求重新建立连接，复位。\nSYN  | 请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n"]],[828,828],[1202,1202]]],[1571710540327,[null,[[-1,1290,"字节，求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。"],[1,1347,"\n\n"]],[1290,1290],[1349,1349]]],[1571710540327,[null,[[1,1290,"字节，求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。"],[-1,1290,"\n\n"]],[1349,1349],[1290,1290]]],[1571710495659,["GJX@GJXAIOU",[[1,922,"；序列号是上一个收包的确认号不变"]],[922,922],[938,938]]],[1571710501363,["GJX@GJXAIOU",[[-1,1003,"确认号是上一个收包的序列号+上一个收包的数据段的大小"]],[1003,1029],[1003,1003]]],[1571710507541,["GJX@GJXAIOU",[[1,966,"：确认号是上一个收包的序列号+上一个收包的数据段的大小；"]],[966,966],[994,994]]],[1571710511003,["GJX@GJXAIOU",[[-1,997,"- **原则** \n  - 序列号是上一个收包的确认号不变\n  -  "]],[997,1032],[997,997]]],[1571710513347,["GJX@GJXAIOU",[[-1,888,"- **含义**"]],[888,896],[888,888]]],[1571710514298,["GJX@GJXAIOU",[[-1,888,"\n"]],[888,888],[887,887]]],[1571710517079,["GJX@GJXAIOU",[[1,833,"\n"]],[833,833],[834,834]]],[1571710518830,["GJX@GJXAIOU",[[1,834,"- "]],[834,834],[836,836]]],[1571710519283,["GJX@GJXAIOU",[[1,834,"  "]],[836,836],[838,838]]],[1571710521570,["GJX@GJXAIOU",[[-1,892,"\n"]],[892,892],[891,891]]],[1571710524795,["GJX@GJXAIOU",[[-1,830,"PS"]],[832,832],[830,830]]],[1571710528285,["GJX@GJXAIOU",[[1,830,"补充说明"]],[830,830],[834,834]]],[1571710538389,["GJX@GJXAIOU",[[1,1199,"\n"]],[1199,1199],[1200,1200]]],[1571710720329,[null,[[-1,1271,"字节，求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。"],[1,1328,"\n\n"]],[1271,1271],[1330,1330]]],[1571710720329,[null,[[1,1271,"字节，求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。"],[-1,1271,"\n\n"]],[1330,1330],[1271,1271]]],[1571710688678,["GJX@GJXAIOU",[[1,1287,"作用：同性"]],[1287,1287],[1292,1292]]],[1571710689302,["GJX@GJXAIOU",[[-1,1290,"同性"]],[1292,1292],[1290,1290]]],[1571710705380,["GJX@GJXAIOU",[[1,1290,"通信双方都明确自己和对方的收发能力是正常的。"]],[1290,1290],[1312,1312]]],[1571710780334,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"]],[1271,1271],[1312,1312]]],[1571710780334,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"]],[1312,1312],[1271,1271]]],[1571710757719,["GJX@GJXAIOU",[[1,1500,"（）"]],[1500,1500],[1502,1502]]],[1571710770923,["GJX@GJXAIOU",[[1,1501,"确认客户算"]],[1501,1501],[1506,1506]]],[1571710771611,["GJX@GJXAIOU",[[-1,1505,"算"]],[1506,1506],[1505,1505]]],[1571710778942,["GJX@GJXAIOU",[[1,1505,"端的"]],[1505,1505],[1507,1507]]],[1571710840334,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的）"],[1,1563,"（确认客户端的）"]],[1271,1271],[1571,1571]]],[1571710840334,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的）"],[-1,1500,"（确认客户端的）"]],[1571,1571],[1271,1271]]],[1571710813161,["GJX@GJXAIOU",[[1,1507,"发送能力、服务端的接收能力是正常的"]],[1507,1507],[1524,1524]]],[1571710960334,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1580,"（确认客户端的发送能力、服务端的接收能力是正常的）"]],[1271,1271],[1605,1605]]],[1571710960334,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"]],[1605,1605],[1271,1271]]],[1571710930967,["GJX@GJXAIOU",[[1,1625,"（）"]],[1625,1625],[1627,1627]]],[1571710941711,["GJX@GJXAIOU",[[1,1626,"确认服务端的发动"]],[1626,1626],[1634,1634]]],[1571710942500,["GJX@GJXAIOU",[[-1,1633,"动"]],[1634,1634],[1633,1633]]],[1571710957610,["GJX@GJXAIOU",[[1,1633,"送能力、客户端的接收能力是正常的"]],[1633,1633],[1649,1649]]],[1571711080337,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1580,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1624,"服（确认"],[-1,1630,"端的发送能力、客户端的接收能力是正常的）务"],[1,1705,"（确认服务端的发送能力、客户端的接收能力是正常的）"]],[1271,1271],[1730,1730]]],[1571711080337,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1569,"服（确认"],[1,1571,"端的发送能力、客户端的接收能力是正常的）务"],[-1,1625,"（确认服务端的发送能力、客户端的接收能力是正常的）"]],[1730,1730],[1271,1271]]],[1571711038145,["GJX@GJXAIOU",[[1,1628,"客户端"]],[1628,1628],[1631,1631]]],[1571711041036,["GJX@GJXAIOU",[[-1,1626,"确认"]],[1628,1628],[1626,1626]]],[1571711045367,["GJX@GJXAIOU",[[1,1629,"角度确认"]],[1629,1629],[1633,1633]]],[1571711073014,["GJX@GJXAIOU",[[1,1650,"以及客户端的发送能力、服务端的接收能力是正常的"]],[1650,1650],[1673,1673]]],[1571711077139,["GJX@GJXAIOU",[[-1,1670,"正常的是"]],[1673,1673],[1669,1669]]],[1571711140340,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1580,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1625,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1729,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"]],[1271,1271],[1778,1778]]],[1571711140340,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1570,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1625,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"]],[1778,1778],[1271,1271]]],[1571711084537,["GJX@GJXAIOU",[[1,1764,"（）"]],[1764,1764],[1766,1766]]],[1571711091567,["GJX@GJXAIOU",[[1,1765,"服务器"]],[1765,1765],[1768,1768]]],[1571711092115,["GJX@GJXAIOU",[[-1,1767,"器"]],[1768,1768],[1767,1767]]],[1571711098565,["GJX@GJXAIOU",[[1,1767,"端确认客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的"]],[1767,1767],[1817,1817]]],[1571711105116,["GJX@GJXAIOU",[[-1,1769,"认客户端角度确"]],[1775,1775],[1768,1768]]],[1571711110103,["GJX@GJXAIOU",[[1,1768,"角度"]],[1768,1768],[1770,1770]]],[1571711200341,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1580,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1625,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1729,"：服务器收到syn包，必须确认"],[1,1744,"（"],[-1,1746,"的SYN（ack=x+1），同时自己（服务"],[1,1813,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1868,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"]],[1271,1271],[1917,1917]]],[1571711200341,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1570,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1625,"：服务器收到syn包，必须确认"],[-1,1625,"（"],[1,1628,"的SYN（ack=x+1），同时自己（服务"],[-1,1674,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1764,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"]],[1917,1917],[1271,1271]]],[1571711184452,["GJX@GJXAIOU",[[1,3787,"TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，等到发送完了所有的数据后，会发送一个FIN段来关闭此方向上的连接。接收方发送ACK确认关闭连接。注意，接收到FIN报文的一方只能回复一个ACK, 它是无法马上返回对方一个FIN报文段的，因为结束数据传输的“指令”是上层应用层给出的，我只是一个“搬运工”，我无法了解`“上层的意志”`。"]],[3787,3787],[4038,4038]]],[1571711186439,["GJX@GJXAIOU",[[1,4039,"\n"]],[4038,4038],[4039,4039]]],[1571711260343,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1580,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1625,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1729,"：服务器收到syn包，必须确认"],[1,1744,"（"],[-1,1746,"的SYN（ack=x+1），同时自己（服务"],[1,1813,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1868,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,3787,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4038,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4038,4038]]],[1571711260343,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1312,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1445,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1500,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1570,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1625,"：服务器收到syn包，必须确认"],[-1,1625,"（"],[1,1628,"的SYN（ack=x+1），同时自己（服务"],[-1,1674,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1764,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,3732,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4038,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4038,4038],[1271,1271]]],[1571711250548,["GJX@GJXAIOU",[[-1,1311,"。"]],[1312,1312],[1311,1311]]],[1571711259099,["GJX@GJXAIOU",[[1,1311,"，同时利用数据报"]],[1311,1311],[1319,1319]]],[1571711259643,["GJX@GJXAIOU",[[-1,1318,"报"]],[1319,1319],[1318,1318]]],[1571711320345,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1318,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1506,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1586,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1631,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1735,"：服务器收到syn包，必须确认"],[1,1750,"（"],[-1,1752,"的SYN（ack=x+1），同时自己（服务"],[1,1819,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1874,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,3793,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4044,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4044,4044]]],[1571711320345,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1318,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1451,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1506,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1576,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1631,"：服务器收到syn包，必须确认"],[-1,1631,"（"],[1,1634,"的SYN（ack=x+1），同时自己（服务"],[-1,1680,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1770,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,3738,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4044,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4044,4044],[1271,1271]]],[1571711284625,["GJX@GJXAIOU",[[1,1318,"包的选项来传输特殊的信息，交换初始序列号 ISN；"]],[1318,1318],[1343,1343]]],[1571711305355,["GJX@GJXAIOU",[[1,1579,"（）"]],[1579,1579],[1581,1581]]],[1571711307810,["GJX@GJXAIOU",[[1,1580,"****"]],[1580,1580],[1582,1582]]],[1571711317202,["GJX@GJXAIOU",[[1,1582,"即指明了客户端"]],[1582,1582],[1589,1589]]],[1571711380351,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端**）"],[1,1624,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1647,"（**即指明了客户端**）"],[-1,1669,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1773,"：服务器收到syn包，必须确认"],[1,1788,"（"],[-1,1790,"的SYN（ack=x+1），同时自己（服务"],[1,1857,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1912,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,3831,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4082,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4082,4082]]],[1571711380351,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端**）"],[1,1614,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1669,"：服务器收到syn包，必须确认"],[-1,1669,"（"],[1,1672,"的SYN（ack=x+1），同时自己（服务"],[-1,1718,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1808,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,3776,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4082,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4082,4082],[1271,1271]]],[1571711329658,["GJX@GJXAIOU",[[1,1589,"的初始序列号ISN"]],[1589,1589],[1598,1598]]],[1571711329713,["GJX@GJXAIOU",[[1,1595," "]],[1598,1598],[1599,1599]]],[1571711340771,["GJX@GJXAIOU",[[1,1779,"（）"]],[1779,1779],[1781,1781]]],[1571711346752,["GJX@GJXAIOU",[[1,1780,"即指明"]],[1780,1780],[1783,1783]]],[1571711347950,["GJX@GJXAIOU",[[-1,1780,"即指明"]],[1783,1783],[1780,1780]]],[1571711349391,["GJX@GJXAIOU",[[1,1780,"****"]],[1780,1780],[1782,1782]]],[1571711368822,["GJX@GJXAIOU",[[1,1782,"即指明服务器端"]],[1782,1782],[1789,1789]]],[1571711375693,["GJX@GJXAIOU",[[-1,1785,"服务器端"]],[1789,1789],[1785,1785]]],[1571711378642,["GJX@GJXAIOU",[[1,1785,"客户端"]],[1785,1785],[1788,1788]]],[1571711560354,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1634,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1657,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1679,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1779,"（**即指明客户端**）"],[-1,1795,"：服务器收到syn包，必须确认"],[1,1810,"（"],[-1,1812,"的SYN（ack=x+1），同时自己（服务"],[1,1879,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1894,"）（**即指明客户端**"],[1,1934,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,3853,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4104,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4104,4104]]],[1571711560354,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1624,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1675,"（**即指明客户端**）"],[1,1679,"：服务器收到syn包，必须确认"],[-1,1679,"（"],[1,1682,"的SYN（ack=x+1），同时自己（服务"],[-1,1728,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1778,"）（**即指明客户端**"],[-1,1830,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,3798,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4104,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4104,4104],[1271,1271]]],[1571711513465,["GJX@GJXAIOU",[[1,1788,"的初始序列号 ISN"]],[1788,1788],[1798,1798]]],[1571711620352,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1634,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1657,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1679,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1779,"（**即指明客户端的初始序列号 ISN**）"],[-1,1805,"：服务器收到syn包，必须确认"],[1,1820,"（"],[-1,1822,"的SYN（ack=x+1），同时自己（服务"],[1,1889,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1904,"）（**即指明客户端的初始序列号 ISN**"],[1,1944,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,3863,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4114,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4114,4114]]],[1571711620352,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1624,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1675,"（**即指明客户端的初始序列号 ISN**）"],[1,1679,"：服务器收到syn包，必须确认"],[-1,1679,"（"],[1,1682,"的SYN（ack=x+1），同时自己（服务"],[-1,1728,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1778,"）（**即指明客户端的初始序列号 ISN**"],[-1,1840,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,3808,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4114,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4114,4114],[1271,1271]]],[1571711604673,["GJX@GJXAIOU",[[1,1928,"（）"]],[1928,1928],[1930,1930]]],[1571711614677,["GJX@GJXAIOU",[[1,1929,"为了确认服务器算"]],[1929,1929],[1937,1937]]],[1571711615132,["GJX@GJXAIOU",[[-1,1936,"算"]],[1937,1937],[1936,1936]]],[1571711619970,["GJX@GJXAIOU",[[1,1936,"端的 ISN"]],[1936,1936],[1942,1942]]],[1571711680356,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1634,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1657,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1679,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1779,"（**即指明客户端的初始序列号 ISN**）"],[-1,1805,"：服务器收到syn包，必须确认"],[1,1820,"（"],[-1,1822,"的SYN（ack=x+1），同时自己（服务"],[1,1889,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1904,"）（**即指明客户端的初始序列号 ISN**"],[-1,1928,"（为了确认服务器端的 ISN）"],[1,1959,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1997,"）（为了确认服务器端的 ISN"],[1,3878,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4129,4129]]],[1571711680356,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1624,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1675,"（**即指明客户端的初始序列号 ISN**）"],[1,1679,"：服务器收到syn包，必须确认"],[-1,1679,"（"],[1,1682,"的SYN（ack=x+1），同时自己（服务"],[-1,1728,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1778,"）（**即指明客户端的初始序列号 ISN**"],[1,1824,"（为了确认服务器端的 ISN）"],[-1,1840,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1927,"）（为了确认服务器端的 ISN"],[-1,3823,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4129,4129],[1271,1271]]],[1571711622527,["GJX@GJXAIOU",[[-1,1939,"ISN"]],[1942,1942],[1939,1939]]],[1571711623859,["GJX@GJXAIOU",[[1,1939,"SYN"]],[1939,1939],[1942,1942]]],[1571711740363,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1634,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1657,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1679,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1779,"（**即指明客户端的初始序列号 ISN**）"],[-1,1805,"：服务器收到syn包，必须确认"],[1,1820,"（"],[-1,1822,"的SYN（ack=x+1），同时自己（服务"],[1,1889,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1904,"）（**即指明客户端的初始序列号 ISN**"],[-1,1928,"（为了确认服务器端的 SYN）"],[1,1959,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1997,"）（为了确认服务器端的 SYN"],[1,3878,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[1271,1271],[4129,4129]]],[1571711740363,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1624,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1675,"（**即指明客户端的初始序列号 ISN**）"],[1,1679,"：服务器收到syn包，必须确认"],[-1,1679,"（"],[1,1682,"的SYN（ack=x+1），同时自己（服务"],[-1,1728,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1778,"）（**即指明客户端的初始序列号 ISN**"],[1,1824,"（为了确认服务器端的 SYN）"],[-1,1840,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1927,"）（为了确认服务器端的 SYN"],[-1,3823,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "]],[4129,4129],[1271,1271]]],[1571711705440,["GJX@GJXAIOU",[[1,4265,"**"],[1,4290,"**"]],[4265,4290],[4265,4294]]],[1571711716865,["GJX@GJXAIOU",[[1,4294,"，却"]],[4294,4294],[4296,4296]]],[1571711717656,["GJX@GJXAIOU",[[-1,4295,"却"]],[4296,4296],[4295,4295]]],[1571711725317,["GJX@GJXAIOU",[[1,4295,"确认一下之前的收到了"]],[4295,4295],[4305,4305]]],[1571711920360,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1634,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1657,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1679,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1779,"（**即指明客户端的初始序列号 ISN**）"],[-1,1805,"：服务器收到syn包，必须确认"],[1,1820,"（"],[-1,1822,"的SYN（ack=x+1），同时自己（服务"],[1,1889,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,1904,"）（**即指明客户端的初始序列号 ISN**"],[-1,1928,"（为了确认服务器端的 SYN）"],[1,1959,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1997,"）（为了确认服务器端的 SYN"],[1,3878,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4265,"**"],[-1,4292,"**，确认一下之前的收到了"],[1,4335,"**"],[1,4360,"**，确认一下之前的收到了"]],[1271,1271],[4373,4373]]],[1571711920360,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n"],[1,1476,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1499,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1531,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1579,"（**即指明了客户端的初始序列号 ISN**）"],[1,1624,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1675,"（**即指明客户端的初始序列号 ISN**）"],[1,1679,"：服务器收到syn包，必须确认"],[-1,1679,"（"],[1,1682,"的SYN（ack=x+1），同时自己（服务"],[-1,1728,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1778,"）（**即指明客户端的初始序列号 ISN**"],[1,1824,"（为了确认服务器端的 SYN）"],[-1,1840,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1927,"）（为了确认服务器端的 SYN"],[-1,3823,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4129,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4210,"**"],[1,4235,"**，确认一下之前的收到了"],[-1,4265,"**"],[-1,4292,"**，确认一下之前的收到了"]],[4373,4373],[1271,1271]]],[1571711914414,["GJX@GJXAIOU",[[1,1344,"\n"]],[1343,1343],[1344,1344]]],[1571711916155,["GJX@GJXAIOU",[[1,1344,"## ISN\n\n三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。\n\n如果ISN是固定的，攻击者很容易猜出后续的确认号。\n\n```text\nISN = M + F(localhost, localport, remotehost, remoteport)\n```\n\nM是一个计时器，每隔4毫秒加1。 F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出。"]],[1344,1344],[1608,1608]]],[1571711916910,["GJX@GJXAIOU",[[1,1609,"\n"]],[1608,1608],[1609,1609]]],[1571711980365,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1610,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1797,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1845,"（**即指明了客户端的初始序列号 ISN**）"],[1,1900,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1923,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1945,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2045,"（**即指明客户端的初始序列号 ISN**）"],[-1,2071,"：服务器收到syn包，必须确认"],[1,2086,"（"],[-1,2088,"的SYN（ack=x+1），同时自己（服务"],[1,2155,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2171,"（**即指明客户端的初始序列号 ISN**）"],[-1,2194,"（为了确认服务器端的 SYN）"],[1,2225,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2263,"）（为了确认服务器端的 SYN"],[1,4144,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4395,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4531,"**"],[-1,4558,"**，确认一下之前的收到了"],[1,4601,"**"],[1,4626,"**，确认一下之前的收到了"]],[1271,1271],[4639,4639]]],[1571711980365,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1610,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1742,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1765,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1797,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1845,"（**即指明了客户端的初始序列号 ISN**）"],[1,1890,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1941,"（**即指明客户端的初始序列号 ISN**）"],[1,1945,"：服务器收到syn包，必须确认"],[-1,1945,"（"],[1,1948,"的SYN（ack=x+1），同时自己（服务"],[-1,1994,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2045,"（**即指明客户端的初始序列号 ISN**）"],[1,2090,"（为了确认服务器端的 SYN）"],[-1,2106,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2193,"）（为了确认服务器端的 SYN"],[-1,4089,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4395,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4476,"**"],[1,4501,"**，确认一下之前的收到了"],[-1,4531,"**"],[-1,4558,"**，确认一下之前的收到了"]],[4639,4639],[1271,1271]]],[1571711921184,["GJX@GJXAIOU",[[1,1346,"#"]],[1344,1347],[1351,1351]]],[1571711923221,["GJX@GJXAIOU",[[-1,1352,"\n"]],[1352,1352],[1351,1351]]],[1571711924198,["GJX@GJXAIOU",[[-1,1432,"\n"]],[1432,1432],[1431,1431]]],[1571711925000,["GJX@GJXAIOU",[[-1,1458,"\n"]],[1458,1458],[1457,1457]]],[1571711926078,["GJX@GJXAIOU",[[-1,1528,"\n"]],[1528,1528],[1527,1527]]],[1571712160370,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"]],[1271,1271],[4636,4636]]],[1571712160370,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"]],[4636,4636],[1271,1271]]],[1571712145328,["GJX@GJXAIOU",[[1,6241,"\n"]],[6241,6241],[6242,6242]]],[1571712145483,["GJX@GJXAIOU",[[1,6242,"\n"]],[6242,6242],[6243,6243]]],[1571712145646,["GJX@GJXAIOU",[[1,6243,"\n"]],[6243,6243],[6244,6244]]],[1571712145823,["GJX@GJXAIOU",[[1,6244,"\n"]],[6244,6244],[6245,6245]]],[1571712145978,["GJX@GJXAIOU",[[1,6245,"\n"]],[6245,6245],[6246,6246]]],[1571712148748,["GJX@GJXAIOU",[[1,6242,"## ISN\n\n三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。\n\n如果ISN是固定的，攻击者很容易猜出后续的确认号。\n\n```text\nISN = M + F(localhost, localport, remotehost, remoteport)\n```\n\nM是一个计时器，每隔4毫秒加1。 F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出。\n\n## 序列号回绕\n\n因为ISN是随机的，所以序列号容易就会超过2^31-1\\. 而tcp对于丢包和乱序等问题的判断都是依赖于序列号大小比较的。此时就出现了所谓的tcp序列号回绕（sequence wraparound）问题。怎么解决？\n\n```c\n/*\n* The next routines deal with comparing 32 bit unsigned ints\n* and worry about wraparound (automatic with unsigned arithmetic).\n*/\nstatic inline int before(__u32 seq1, __u32 seq2)\n{\n    return (__s32)(seq1-seq2) < 0;\n}\n\n#define after(seq2, seq1) before(seq1, seq2)\n```\n\n上述代码是内核中的解决回绕问题代码。**s32是有符号整型的意思，而**u32则是无符号整型。序列号发生回绕后，序列号变小，相减之后，把结果变成有符号数了，因此结果成了负数。\n\n```text\n假设seq1=255， seq2=1（发生了回绕）。\nseq1 = 1111 1111 seq2 = 0000 0001\n我们希望比较结果是\n seq1 - seq2=\n 1111 1111\n-0000 0001\n-----------\n 1111 1110\n\n由于我们将结果转化成了有符号数，由于最高位是1，因此结果是一个负数，负数的绝对值为\n 0000 0001 + 1 = 0000 0010 = 2\n\n因此seq1 - seq2 < 0\n```\n\n## syn flood攻击\n\n最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。syn flood属于Dos攻击的一种。\n\n如果恶意的向某个服务器端口发送大量的SYN包，则可以使服务器打开大量的半开连接，分配TCB（Transmission Control Block）, 从而消耗大量的服务器资源，同时也使得正常的连接请求无法被相应。当开放了一个TCP端口后，该端口就处于Listening状态，不停地监视发到该端口的Syn报文，一 旦接收到Client发来的Syn报文，就需要为该请求分配一个TCB，通常一个TCB至少需要280个字节，在某些操作系统中TCB甚至需要1300个字节，并返回一个SYN ACK命令，立即转为SYN-RECEIVED即半开连接状态。系统会为此耗尽资源。\n\n常见的防攻击方法有：\n\n## 无效连接的监视释放\n\n监视系统的半开连接和不活动连接，当达到一定阈值时拆除这些连接，从而释放系统资源。这种方法对于所有的连接一视同仁，而且由于SYN Flood造成的半开连接数量很大，正常连接请求也被淹没在其中被这种方式误释放掉，因此这种方法属于入门级的SYN Flood方法。\n\n## 延缓TCB分配方法\n\n消耗服务器资源主要是因为当SYN数据报文一到达，系统立即分配TCB，从而占用了资源。而SYN Flood由于很难建立起正常连接，因此，当正常连接建立起来后再分配TCB则可以有效地减轻服务器资源的消耗。常见的方法是使用Syn Cache和Syn Cookie技术。\n\n## Syn Cache技术\n\n系统在收到一个SYN报文时，在一个专用HASH表中保存这种半连接信息，直到收到正确的回应ACK报文再分配TCB。这个开销远小于TCB的开销。当然还需要保存序列号。\n\n## Syn Cookie技术\n\nSyn Cookie技术则完全不使用任何存储资源，这种方法比较巧妙，它使用一种特殊的算法生成Sequence Number，这种算法考虑到了对方的IP、端口、己方IP、端口的固定信息，以及对方无法知道而己方比较固定的一些信息，如MSS(Maximum Segment Size，最大报文段大小，指的是TCP报文的最大数据报长度，其中不包括TCP首部长度。)、时间等，在收到对方 的ACK报文后，重新计算一遍，看其是否与对方回应报文中的（Sequence Number-1）相同，从而决定是否分配TCB资源。\n\n## 使用SYN Proxy防火墙\n\n一种方式是防止墙dqywb连接的有效性后，防火墙才会向内部服务器发起SYN请求。防火墙代服务器发出的SYN ACK包使用的序列号为c, 而真正的服务器回应的序列号为c', 这样，在每个数据报文经过防火墙的时候进行序列号的修改。另一种方式是防火墙确定了连接的安全后，会发出一个safe reset命令，client会进行重新连接，这时出现的syn报文会直接放行。这样不需要修改序列号了。但是，client需要发起两次握手过程，因此建立连接的时间将会延长。\n\n## 连接队列\n\n在外部请求到达时，被服务程序最终感知到前，连接可能处于SYN_RCVD状态或是ESTABLISHED状态，但还未被应用程序接受。\n\n![](https://pic2.zhimg.com/80/v2-c4688fba5db30b31c913f549108c9735_hd.jpg)\n\n对应地，服务器端也会维护两种队列，处于SYN_RCVD状态的半连接队列，而处于ESTABLISHED状态但仍未被应用程序accept的为全连接队列。如果这两个队列满了之后，就会出现各种丢包的情形。\n\n```text\n查看是否有连接溢出\nnetstat -s | grep LISTEN\n```\n\n## 半连接队列满了\n\n在三次握手协议中，服务器维护一个半连接队列，该队列为每个客户端的SYN包开设一个条目(服务端在接收到SYN包的时候，就已经创建了request_sock结构，存储在半连接队列中)，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n> 目前，Linux下默认会进行5次重发SYN-ACK包，重试的间隔时间从1s开始，下次的重试间隔时间是前一次的双倍，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s, 总共31s, 称为`指数退避`，第5次发出后还要等32s才知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 63s, TCP才会把断开这个连接。由于，SYN超时需要63秒，那么就给攻击者一个攻击服务器的机会，攻击者在短时间内发送大量的SYN包给Server(俗称SYN flood攻击)，用于耗尽Server的SYN队列。对于应对SYN 过多的问题，linux提供了几个TCP参数：tcp_syncookies、tcp_synack_retries、tcp_max_syn_backlog、tcp_abort_on_overflow 来调整应对。\n\n![](https://pic1.zhimg.com/80/v2-f998ee97330a3a258ad617ea10257c4c_hd.jpg)\n\n## 全连接队列满\n\n当第三次握手时，当server接收到ACK包之后，会进入一个新的叫 accept 的队列。\n\n当accept队列满了之后，即使client继续向server发送ACK的包，也会不被响应，此时ListenOverflows+1，同时server通过tcp_abort_on_overflow来决定如何返回，0表示直接丢弃该ACK，1表示发送RST通知client；相应的，client则会分别返回`read timeout` 或者 `connection reset by peer`。另外，tcp_abort_on_overflow是0的话，server过一段时间再次发送syn+ack给client（也就是重新走握手的第二步），如果client超时等待比较短，就很容易异常了。而客户端收到多个 SYN ACK 包，则会认为之前的 ACK 丢包了。于是促使客户端再次发送 ACK ，在 accept队列有空闲的时候最终完成连接。若 accept队列始终满员，则最终客户端收到 RST 包（此时服务端发送syn+ack的次数超出了tcp_synack_retries）。\n\n服务端仅仅只是创建一个定时器，以固定间隔重传syn和ack到服务端\n\n![](https://pic2.zhimg.com/80/v2-df71dbb7c5f6743eca7fba07d1a0b869_hd.jpg)\n\n## 命令\n\nnetstat -s命令\n\n> [root@server ~]# netstat -s | egrep \"listen|LISTEN\" 667399 times the listen queue of a socket overflowed 667399 SYNs to LISTEN sockets ignored\n> 比如上面看到的 667399 times ，表示全连接队列溢出的次数，隔几秒钟执行下，如果这个数字一直在增加的话肯定全连接队列偶尔满了。\n> [root@server ~]# netstat -s | grep TCPBacklogDrop 查看 Accept queue 是否有溢出\n\nss命令\n\n> [root@server ~]# ss -lnt State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 _:6379 _:_ LISTEN 0 128 _:22 _:_ 如果State是listen状态，Send-Q 表示第三列的listen端口上的全连接队列最大为50，第一列Recv-Q为全连接队列当前使用了多少。 非 LISTEN 状态中 Recv-Q 表示 receive queue 中的 bytes 数量；Send-Q 表示 send queue 中的 bytes 数值。\n\n## 小结\n\n当外部连接请求到来时，TCP模块会首先查看max_syn_backlog，如果处于SYN_RCVD状态的连接数目超过这一阈值，进入的连接会被拒绝。根据tcp_abort_on_overflow字段来决定是直接丢弃，还是直接reset.\n\n从服务端来说，三次握手中，第一步server接受到client的syn后，把相关信息放到半连接队列中，同时回复syn+ack给client. 第三步当收到客户端的ack, 将连接加入到全连接队列。\n\n一般，全连接队列比较小，会先满，此时半连接队列还没满。如果这时收到syn报文，则会进入半连接队列，没有问题。但是如果收到了三次握手中的第3步(ACK)，则会根据tcp_abort_on_overflow字段来决定是直接丢弃，还是直接reset.此时，客户端发送了ACK, 那么客户端认为三次握手完成，它认为服务端已经准备好了接收数据的准备。但此时服务端可能因为全连接队列满了而无法将连接放入，会重新发送第2步的syn+ack, 如果这时有数据到来，服务器TCP模块会将数据存入队列中。一段时间后，client端没收到回复，超时，连接异常，client会主动关闭连接。\n\n## “三次握手，四次挥手”redis实例分析\n\n1.  我在dev机器上部署redis服务，端口号为6379,\n2.  通过tcpdump工具获取数据包，使用如下命令\n\n```text\ntcpdump -w /tmp/a.cap port 6379 -s0\n-w把数据写入文件，-s0设置每个数据包的大小默认为68字节，如果用-S 0则会抓到完整数据包\n```\n\n1.  在dev2机器上用redis-cli访问dev:6379, 发送一个ping, 得到回复pong\n2.  停止抓包，用tcpdump读取捕获到的数据包\n\n```text\ntcpdump -r /tmp/a.cap -n -nn -A -x| vim -\n（-x 以16进制形式展示，便于后面分析）\n```\n\n共收到了7个包。\n\n抓到的是IP数据包，IP数据包分为IP头部和IP数据部分，IP数据部分是TCP头部加TCP数据部分。\n\nIP的数据格式为：\n\n![](https://pic4.zhimg.com/80/v2-a8702bdb6e9cf9fd29e824ac07542067_hd.jpg)\n\n它由固定长度20B+可变长度构成。\n\n```text\n10:55:45.662077 IP dev2.39070 > dev.6379: Flags [S], seq 4133153791, win 29200, options [mss 1460,sackOK,TS val 2959270704 ecr 0,nop,wscale 7], length 0\n        0x0000:  4500 003c 08cf 4000 3606 14a5 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ebff 0000 0000\n        0x0020:  a002 7210 872f 0000 0204 05b4 0402 080a\n        0x0030:  b062 e330 0000 0000 0103 0307\n```\n\n对着IP头部格式，来拆解数据包的具体含义。\n\n![](https://pic3.zhimg.com/80/v2-1b33f99c890277f54fd15370635860ee_hd.jpg)\n\n剩余的数据部分即为TCP协议相关的。TCP也是20B固定长度+可变长度部分。\n\n![](https://pic4.zhimg.com/80/v2-4949f0578dbde508f35ef4aef9a932b7_hd.jpg)\n\n可变长度部分，协议如下：\n\n![](https://pic1.zhimg.com/80/v2-82bc4c9a7d5ae823c09502c687d3b6e0_hd.jpg)\n\n这样第一个包分析完了。dev2向dev发送SYN请求。`也就是三次握手中的第一次了。` `SYN seq(c)=4133153791`\n\n第二个包，dev响应连接，ack=4133153792\\. 表明dev下次准备接收这个序号的包，用于tcp字节注的顺序控制。dev（也就是server端）的初始序号为seq=4264776963, syn=1. `SYN ack=seq(c)+1 seq(s)=4264776963`\n\n第三个包，client包确认，这里使用了相对值应答。seq=4133153792, 等于第二个包的ack. ack=4264776964. `ack=seq(s)+1, seq=seq(c)+1` 至此，三次握手完成。接下来就是发送ping和pong的数据了。\n\n接着第四个包。\n\n```text\n10:55:48.090073 IP dev2.39070 > dev.6379: Flags [P.], seq 1:15, ack 1, win 229, options [nop,nop,TS val 2959273132 ecr 3132256230], length 14\n        0x0000:  4500 0042 08d1 4000 3606 149d 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ec00 fe33 5504\n        0x0020:  8018 00e5 4b5f 0000 0101 080a b062 ecac\n        0x0030:  bab2 6fe6 2a31 0d0a 2434 0d0a 7069 6e67\n        0x0040:  0d0a\n```\n\ntcp首部长度为32B, 可选长度为12B. IP报文的总长度为66B, 首部长度为20B, 因此TCP数据部分长度为14B. seq=0xf65a ec00=4133153792 ACK, PSH. 数据部分为2a31 0d0a 2434 0d0a 7069 6e67 0d0a\n\n```text\n0x2a31         -> *1\n0x0d0a         -> \\r\\n\n0x2434         -> $4\n0x0d0a         -> \\r\\n\n0x7069 0x6e67  -> ping\n0x0d0a         -> \\r\\n\n```\n\ndev2向dev发送了ping数据，第四个包完毕。\n\n第五个包，dev2向dev发送ack响应。 序列号为0xfe33 5504=4264776964, ack确认号为0xf65a ec0e=4133153806=(4133153792+14).\n\n第六个包，dev向dev2响应pong消息。序列号fe33 5504，确认号f65a ec0e, TCP头部可选长度为12B, IP数据报总长度为59B, 首部长度为20B, 因此TCP数据长度为7B. 数据部分2b50 4f4e 470d 0a, 翻译过来就是`+PONG\\r\\n`.\n\n至此，Redis客户端和Server端的三次握手过程分析完毕。"]],[6242,6242],[13754,13754]]],[1571723892237,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13756,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[1271,1271],[13756,13756]]],[1571723892237,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13756,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[13756,13756],[1271,1271]]],[1571723876103,["GJX@GJXAIOU",[[1,6528,"，"],[-1,9708," 或者 "],[1,9712," 或者 "],[-1,10507," "],[1,10508," "],[-1,10514," _:_ "],[1,10519," _:_ "],[-1,10531," "],[1,10532," "],[-1,10536," _:_ "],[1,10541," _:_ "],[-1,12448," "],[1,12449," "],[-1,12579," "],[1,12580," "],[-1,12687," "],[1,12688," "],[-1,12716," "],[1,12717," "]],[6527,6527],[6528,6528]]],[1571723880625,["GJX@GJXAIOU",[[1,6528,"后续是递增的"]],[6528,6528],[6534,6534]]],[1571723885594,["GJX@GJXAIOU",[[-1,6552,"\\."]],[6554,6554],[6552,6552]]],[1571723886159,["GJX@GJXAIOU",[[1,6552,"。"]],[6552,6552],[6553,6553]]],[1571723891935,["GJX@GJXAIOU",[[1,6554,"**"],[1,6584,"**"]],[6554,6584],[6554,6588]]],[1571723952343,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13766,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[1271,1271],[13766,13766]]],[1571723952343,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13766,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[13766,13766],[1271,1271]]],[1571723912415,["GJX@GJXAIOU",[[1,6588,"就是原则上不能后面的一个比前面的一个大"]],[6588,6588],[6607,6607]]],[1571723926076,["GJX@GJXAIOU",[[-1,6966,"，而"]],[6968,6968],[6966,6966]]],[1571723928769,["GJX@GJXAIOU",[[1,6968,"，"]],[6968,6968],[6969,6969]]],[1571723942366,["GJX@GJXAIOU",[[1,7252,"，这样 sq1 <"]],[7252,7252],[7261,7261]]],[1571723942938,["GJX@GJXAIOU",[[-1,7260,"<"]],[7261,7261],[7260,7260]]],[1571723952072,["GJX@GJXAIOU",[[1,7260,"< sq2 ，保证不会"]],[7260,7260],[7271,7271]]],[1571724012294,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13803,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[1271,1271],[13803,13803]]],[1571724012294,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13803,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[13803,13803],[1271,1271]]],[1571723957414,["GJX@GJXAIOU",[[1,7271,"后面的一个小于前面一个"]],[7271,7271],[7282,7282]]],[1571724132299,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13814,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[1271,1271],[13814,13814]]],[1571724132300,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13814,"\n\n以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[13814,13814],[1271,1271]]],[1571724129030,["GJX@GJXAIOU",[[-1,13816,"# [面试]详细描述三次握手和四次挥手的过程+状态图\n\n\n具体题目：\n问题1: 请详细描述三次握手和四次挥手的过程\n\n要求熟悉三次握手和四次挥手的机制，要求画出状态图。\n\n问题2: 四次挥手中TIME_WAIT状态存在的目的是什么?\n\n这个问题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13815,13991],[13815,13815]]],[1571724192308,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13816,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1271,1271],[13816,13816]]],[1571724192308,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13816,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13816,13816],[1271,1271]]],[1571724157793,["GJX@GJXAIOU",[[1,10171,"···"]],[10171,10171],[10174,10174]]],[1571724158954,["GJX@GJXAIOU",[[-1,10171,"···"]],[10174,10174],[10171,10171]]],[1571724165318,["GJX@GJXAIOU",[[1,10171,"```network"]],[10171,10171],[10181,10181]]],[1571724165999,["GJX@GJXAIOU",[[-1,10180,"k"]],[10181,10181],[10180,10180]]],[1571724167314,["GJX@GJXAIOU",[[1,10180,"t"]],[10180,10180],[10181,10181]]],[1571724168068,["GJX@GJXAIOU",[[-1,10180,"t"]],[10181,10181],[10180,10180]]],[1571724168792,["GJX@GJXAIOU",[[1,10180,"k"]],[10180,10180],[10181,10181]]],[1571724172355,["GJX@GJXAIOU",[[1,10472,"```"]],[10472,10472],[10475,10475]]],[1571724174136,["GJX@GJXAIOU",[[1,10481,"```"]],[10481,10481],[10484,10484]]],[1571724175584,["GJX@GJXAIOU",[[1,10773,"```"]],[10773,10773],[10776,10776]]],[1571724181510,["GJX@GJXAIOU",[[1,10805,"·"]],[10805,10805],[10806,10806]]],[1571724182917,["GJX@GJXAIOU",[[-1,10805,"·"]],[10806,10806],[10805,10805]]],[1571724183449,["GJX@GJXAIOU",[[1,10805,"`"]],[10805,10805],[10806,10806]]],[1571724185716,["GJX@GJXAIOU",[[1,10821,"`"]],[10821,10821],[10822,10822]]],[1571724186794,["GJX@GJXAIOU",[[1,10861,"`"]],[10861,10861],[10862,10862]]],[1571724188072,["GJX@GJXAIOU",[[1,10883,"`"]],[10883,10883],[10884,10884]]],[1571724191816,["GJX@GJXAIOU",[[1,11087,"`"]],[11087,11087],[11088,11088]]],[1571724252305,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13840,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1271,1271],[13840,13840]]],[1571724252305,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13840,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13840,13840],[1271,1271]]],[1571724192951,["GJX@GJXAIOU",[[1,11109,"`"]],[11109,11109],[11110,11110]]],[1571724197706,["GJX@GJXAIOU",[[1,9800,"`"]],[9800,9800],[9801,9801]]],[1571724198888,["GJX@GJXAIOU",[[1,9822,"`"]],[9822,9822],[9823,9823]]],[1571724201615,["GJX@GJXAIOU",[[1,10021,"`"]],[10021,10021],[10022,10022]]],[1571724202891,["GJX@GJXAIOU",[[1,10040,"`"]],[10040,10040],[10041,10041]]],[1571724205997,["GJX@GJXAIOU",[[-1,9081,">"]],[9082,9082],[9081,9081]]],[1571724211646,["GJX@GJXAIOU",[[1,8951,"`"]],[8951,8951],[8952,8952]]],[1571724213559,["GJX@GJXAIOU",[[1,8964,"`"]],[8964,8964],[8965,8965]]],[1571724432308,[null,[[-1,1271,"字节，求建立连接，并在其序列号的"],[1,1287,"\n\n\n\n## 三次握手过程理解\n"],[-1,1343,"字"],[1,1344,"\n"],[-1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1897,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1920,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1942,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[-1,2068,"：服务器收到syn包，必须确认"],[1,2083,"（"],[-1,2085,"的SYN（ack=x+1），同时自己（服务"],[1,2152,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2168,"（**即指明客户端的初始序列号 ISN**）"],[-1,2191,"（为了确认服务器端的 SYN）"],[1,2222,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2260,"）（为了确认服务器端的 SYN"],[1,4141,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,4598,"**"],[1,4623,"**，确认一下之前的收到了"],[-1,6241,""],[1,6241,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13846,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1271,1271],[13846,13846]]],[1571724432308,[null,[[1,1271,"字节，求建立连接，并在其序列号的"],[-1,1271,"\n\n\n\n## 三次握手过程理解\n"],[1,1343,"字"],[-1,1343,"\n"],[1,1607,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1739,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1762,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1794,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1842,"（**即指明了客户端的初始序列号 ISN**）"],[1,1887,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1938,"（**即指明客户端的初始序列号 ISN**）"],[1,1942,"：服务器收到syn包，必须确认"],[-1,1942,"（"],[1,1945,"的SYN（ack=x+1），同时自己（服务"],[-1,1991,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,2042,"（**即指明客户端的初始序列号 ISN**）"],[1,2087,"（为了确认服务器端的 SYN）"],[-1,2103,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2190,"）（为了确认服务器端的 SYN"],[-1,4086,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4392,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4473,"**"],[1,4498,"**，确认一下之前的收到了"],[-1,4528,"**"],[-1,4555,"**，确认一下之前的收到了"],[1,6186,""],[-1,6186,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13846,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13846,13846],[1271,1271]]],[1571724394560,["GJX@GJXAIOU",[[-1,995,"\n"]],[995,995],[994,994]]],[1571724395956,["GJX@GJXAIOU",[[-1,1184,"\n"]],[1183,1183],[1182,1182]]],[1571724401408,["GJX@GJXAIOU",[[-1,1184,"### 常用的熟知端口号\n\n![常用端口号]($resource/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7.jpg)"]],[1184,1267],[1184,1184]]],[1571724402428,["GJX@GJXAIOU",[[-1,1189,"\n"]],[1188,1188],[1187,1187]]],[1571724402688,["GJX@GJXAIOU",[[-1,1188,"\n"]],[1187,1187],[1186,1186]]],[1571724403143,["GJX@GJXAIOU",[[-1,1187,"\n"]],[1186,1186],[1185,1185]]],[1571724403447,["GJX@GJXAIOU",[[-1,1186,"\n"]],[1185,1185],[1184,1184]]],[1571724403686,["GJX@GJXAIOU",[[-1,1185,"\n"]],[1184,1184],[1183,1183]]],[1571724404069,["GJX@GJXAIOU",[[-1,1184,"\n"]],[1183,1183],[1182,1182]]],[1571724406609,["GJX@GJXAIOU",[[1,1187,"s "]],[1187,1187],[1188,1188]]],[1571724406895,["GJX@GJXAIOU",[[1,1188,"an"]],[1188,1188],[1190,1190]]],[1571724408751,["GJX@GJXAIOU",[[-1,1187,"san"]],[1190,1190],[1187,1187]]],[1571724409812,["GJX@GJXAIOU",[[1,1187,"单"]],[1187,1187],[1188,1188]]],[1571724410418,["GJX@GJXAIOU",[[-1,1187,"单 "]],[1188,1188],[1186,1186]]],[1571724413938,["GJX@GJXAIOU",[[1,1186,"三、"]],[1186,1186],[1188,1188]]],[1571724415090,["GJX@GJXAIOU",[[1,1186," "]],[1186,1186],[1187,1187]]],[1571724420054,["GJX@GJXAIOU",[[1,1256,"\n"]],[1256,1256],[1257,1257]]],[1571724421771,["GJX@GJXAIOU",[[1,1199,"\n"]],[1199,1199],[1200,1200]]],[1571724424933,["GJX@GJXAIOU",[[1,1262,"（）"]],[1262,1262],[1264,1264]]],[1571724426260,["GJX@GJXAIOU",[[1,1263,"一"]],[1263,1263],[1264,1264]]],[1571724492417,[null,[[-1,1184,"建立 三、连接，并在其序列号的"],[1,1199,"## 三、 三次握手过程理解\n"],[-1,1256,"字"],[1,1257,"\n"],[-1,1524,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1711,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1759,"（**即指明了客户端的初始序列号 ISN**）"],[1,1814,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1837,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1859,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1959,"（**即指明客户端的初始序列号 ISN**）"],[-1,1985,"：服务器收到syn包，必须确认"],[1,2000,"（"],[-1,2002,"的SYN（ack=x+1），同时自己（服务"],[1,2069,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2085,"（**即指明客户端的初始序列号 ISN**）"],[-1,2108,"（为了确认服务器端的 SYN）"],[1,2139,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2177,"）（为了确认服务器端的 SYN"],[1,4058,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4309,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4445,"**"],[-1,4472,"**，确认一下之前的收到了"],[1,4515,"**"],[1,4540,"**，确认一下之前的收到了"],[-1,6158,""],[1,6158,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13763,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1184,1184],[13763,13763]]],[1571724492417,[null,[[1,1184,"建立 三、连接，并在其序列号的"],[-1,1184,"## 三、 三次握手过程理解\n"],[1,1256,"字"],[-1,1256,"\n"],[1,1524,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1656,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1679,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1711,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1759,"（**即指明了客户端的初始序列号 ISN**）"],[1,1804,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1855,"（**即指明客户端的初始序列号 ISN**）"],[1,1859,"：服务器收到syn包，必须确认"],[-1,1859,"（"],[1,1862,"的SYN（ack=x+1），同时自己（服务"],[-1,1908,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1959,"（**即指明客户端的初始序列号 ISN**）"],[1,2004,"（为了确认服务器端的 SYN）"],[-1,2020,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2107,"）（为了确认服务器端的 SYN"],[-1,4003,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4309,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4390,"**"],[1,4415,"**，确认一下之前的收到了"],[-1,4445,"**"],[-1,4472,"**，确认一下之前的收到了"],[1,6103,""],[-1,6103,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13763,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13763,13763],[1184,1184]]],[1571724458563,["GJX@GJXAIOU",[[1,1524,"\n"]],[1523,1523],[1524,1524]]],[1571724461732,["GJX@GJXAIOU",[[1,1524,"### （）"]],[1524,1524],[1530,1530]]],[1571724463815,["GJX@GJXAIOU",[[1,1529,"二 "]],[1529,1529],[1531,1531]]],[1571724464427,["GJX@GJXAIOU",[[-1,1530," "]],[1531,1531],[1530,1530]]],[1571724472305,["GJX@GJXAIOU",[[1,1531,"三次握手过程"]],[1531,1531],[1537,1537]]],[1571724481560,["GJX@GJXAIOU",[[1,2247,"\n"]],[2246,2246],[2247,2247]]],[1571724481822,["GJX@GJXAIOU",[[1,2248,"\n"]],[2247,2247],[2248,2248]]],[1571724484148,["GJX@GJXAIOU",[[1,2248,"### （）"]],[2248,2248],[2254,2254]]],[1571724485786,["GJX@GJXAIOU",[[1,2253,"三"]],[2253,2253],[2254,2254]]],[1571724488610,["GJX@GJXAIOU",[[1,2255,"补充问题"]],[2255,2255],[2259,2259]]],[1571724552417,[null,[[-1,1184,"建立 三、连接，并在其序列号的"],[1,1199,"## 三、 三次握手过程理解\n"],[-1,1256,"字"],[1,1257,"\n"],[-1,1538,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1725,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1773,"（**即指明了客户端的初始序列号 ISN**）"],[1,1828,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1851,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1873,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,1973,"（**即指明客户端的初始序列号 ISN**）"],[-1,1999,"：服务器收到syn包，必须确认"],[1,2014,"（"],[-1,2016,"的SYN（ack=x+1），同时自己（服务"],[1,2083,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2098,"）（**即指明客户端的初始序列号 ISN**"],[-1,2122,"（为了确认服务器端的 SYN）"],[1,2153,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2191,"）（为了确认服务器端的 SYN"],[-1,2247,"\n### （三）补充问题\n"],[1,2314,"\n\n### （三）补充问题"],[1,4085,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[-1,4336,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4472,"**"],[-1,4499,"**，确认一下之前的收到了"],[1,4542,"**"],[1,4567,"**，确认一下之前的收到了"],[-1,6185,""],[1,6185,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13790,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1184,1184],[13790,13790]]],[1571724552417,[null,[[1,1184,"建立 三、连接，并在其序列号的"],[-1,1184,"## 三、 三次握手过程理解\n"],[1,1256,"字"],[-1,1256,"\n"],[1,1538,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1670,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1693,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1725,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1773,"（**即指明了客户端的初始序列号 ISN**）"],[1,1818,"（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,1869,"（**即指明客户端的初始序列号 ISN**）"],[1,1873,"：服务器收到syn包，必须确认"],[-1,1873,"（"],[1,1876,"的SYN（ack=x+1），同时自己（服务"],[-1,1922,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1972,"）（**即指明客户端的初始序列号 ISN**"],[1,2018,"（为了确认服务器端的 SYN）"],[-1,2034,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2121,"）（为了确认服务器端的 SYN"],[1,2192,"\n### （三）补充问题\n"],[-1,2246,"\n\n### （三）补充问题"],[-1,4030,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 \n"],[1,4336,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4417,"**"],[1,4442,"**，确认一下之前的收到了"],[-1,4472,"**"],[-1,4499,"**，确认一下之前的收到了"],[1,6130,""],[-1,6130,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13790,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13790,13790],[1184,1184]]],[1571724510251,["GJX@GJXAIOU",[[1,3204,"**"],[1,3214,"**"]],[3204,3214],[3204,3218]]],[1571724514737,["GJX@GJXAIOU",[[-1,2260,"**1\\. 序列号是“随机”的**"]],[2260,2277],[2260,2260]]],[1571724515244,["GJX@GJXAIOU",[[-1,2261,"\n"]],[2260,2260],[2259,2259]]],[1571724516380,["GJX@GJXAIOU",[[-1,2413,"\n"]],[2413,2413],[2412,2412]]],[1571724517299,["GJX@GJXAIOU",[[-1,2436,"\n"]],[2436,2436],[2435,2435]]],[1571724518005,["GJX@GJXAIOU",[[-1,2412,"\n"]],[2412,2412],[2411,2411]]],[1571724520635,["GJX@GJXAIOU",[[1,2261,"- "]],[2261,2261],[2263,2263]]],[1571724526983,["GJX@GJXAIOU",[[-1,2944," "]],[2945,2945],[2944,2944]]],[1571724527644,["GJX@GJXAIOU",[[-1,2944,"\n"]],[2944,2944],[2943,2943]]],[1571724542394,["GJX@GJXAIOU",[[1,3822,"四、"]],[3822,3822],[3824,3824]]],[1571724547959,["GJX@GJXAIOU",[[1,4060,"五、"]],[4060,4060],[4062,4062]]],[1571724599709,[null,[[-1,1184,"建立 三、连接，并在其序列号的"],[1,1199,"## 三、 三次握手过程理解\n"],[-1,1256,"字"],[1,1257,"\n"],[-1,1538,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[-1,1725,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1773,"（**即指明了客户端的初始序列号 ISN**）"],[1,1828,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1851,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1872,"服（客户端角度确认"],[-1,1883,"端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）务"],[-1,1973,"（**即指明客户端的初始序列号 ISN**）"],[-1,1999,"：服务器收到syn包，必须确认"],[1,2014,"（"],[-1,2016,"的SYN（ack=x+1），同时自己（服务"],[1,2083,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[1,2099,"（**即指明客户端的初始序列号 ISN**）"],[-1,2122,"（为了确认服务器端的 SYN）"],[1,2153,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[1,2192,"（为了确认服务器端的 SYN）"],[-1,2247,"\n### （三）补充问题\n服- "],[1,2263,"步请求数据包中的确认号值，确认号是服务"],[-1,2299,"**1\\. 序列号是“随机”的**"],[1,2316,"\n### （三）补充问题"],[1,2318,"- "],[1,2414,"在网"],[1,2437,"待"],[-1,2465,"\n\n"],[-1,2491,"\n"],[-1,2944,""],[1,2944,"已经"],[-1,2997," \n"],[-1,3183,"**"],[-1,3195,"**"],[1,3242,"**"],[1,3252,"**"],[-1,3822,"四、"],[1,3879,"四、"],[-1,4060,"五、"],[1,4072,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 五、四次挥手过程理解 \n"],[-1,4323,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[-1,4459,"**"],[-1,4486,"**，确认一下之前的收到了"],[1,4529,"**"],[1,4554,"**，确认一下之前的收到了"],[-1,6172,""],[1,6172,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[-1,13777,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[1184,1184],[13777,13777]]],[1571724599709,[null,[[1,1184,"建立 三、连接，并在其序列号的"],[-1,1184,"## 三、 三次握手过程理解\n"],[1,1256,"字"],[-1,1256,"\n"],[1,1538,"段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n"],[1,1670,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[1,1693,"（**即指明了客户端的初始序列号 ISN**）"],[-1,1725,"（确认客户端的发送能力、服务端的接收能力是正常的）"],[-1,1773,"（**即指明了客户端的初始序列号 ISN**）"],[1,1817,"服（客户端角度确认"],[1,1819,"端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）务"],[1,1869,"（**即指明客户端的初始序列号 ISN**）"],[1,1873,"：服务器收到syn包，必须确认"],[-1,1873,"（"],[1,1876,"的SYN（ack=x+1），同时自己（服务"],[-1,1922,"：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己"],[-1,1973,"（**即指明客户端的初始序列号 ISN**）"],[1,2018,"（为了确认服务器端的 SYN）"],[-1,2034,"（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）"],[-1,2122,"（为了确认服务器端的 SYN）"],[1,2192,"\n### （三）补充问题\n服- "],[-1,2192,"步请求数据包中的确认号值，确认号是服务"],[1,2247,"**1\\. 序列号是“随机”的**"],[-1,2247,"\n### （三）补充问题"],[-1,2261,"- "],[-1,2359,"在网"],[-1,2384,"待"],[1,2413,"\n\n"],[1,2437,"\n"],[1,2889,""],[-1,2889,"已经"],[1,2944," \n"],[1,3128,"**"],[1,3138,"**"],[-1,3183,"**"],[-1,3195,"**"],[1,3767,"四、"],[-1,3822,"四、"],[1,4005,"五、"],[-1,4015,"证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 五、四次挥手过程理解 \n"],[1,4323,"证\n所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 四次挥手过程理解 "],[1,4404,"**"],[1,4429,"**，确认一下之前的收到了"],[-1,4459,"**"],[-1,4486,"**，确认一下之前的收到了"],[1,6117,""],[-1,6117,"以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n"],[1,13777,"题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。\n"]],[13777,13777],[1184,1184]]],[1571724564470,["GJX@GJXAIOU",[[1,6175,"#"]],[6176,6176],[6180,6180]]],[1571724566987,["GJX@GJXAIOU",[[1,6177,"（）"]],[6177,6177],[6179,6179]]],[1571724568521,["GJX@GJXAIOU",[[1,6178,"四"]],[6178,6178],[6179,6179]]],[1571724572412,["GJX@GJXAIOU",[[1,6445,"#"]],[6445,6445],[6452,6452]]],[1571724575069,["GJX@GJXAIOU",[[1,6447,"（）"]],[6447,6447],[6449,6449]]],[1571724576269,["GJX@GJXAIOU",[[1,6448,"五"]],[6448,6448],[6449,6449]]],[1571724583489,["GJX@GJXAIOU",[[1,7229,"#（）"]],[7230,7230],[7232,7232]]],[1571724585833,["GJX@GJXAIOU",[[1,7231,"六"]],[7231,7231],[7232,7232]]],[1571724586784,["GJX@GJXAIOU",[[1,7230," "]],[7230,7230],[7231,7231]]]],null,"GJX@GJXAIOU"],["4b5bcfea-ed9e-4f92-884e-d9f0cb422c57",1574214209304,"---\nflag: purple\n---\n\n# TCP的三次握手与四次挥手\n\n## 一、前言\n- TCP/IP 协议：是传输层协议，主要解决数据如何在网络中传输；\n- HTTP 协议：是应用层协议，主要解决如何包装数据； \n- 套接字： TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种**端点我们叫作套接字（socket）**，它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。\n\n\n## 二、TCP 帧结构\n\n![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)\n\n- 序列号seq：占4个字节，**用来标记数据段的顺序**，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；**序列号seq就是这个报文段中的第一个字节的数据编号**。\n\n- 确认号ack：占4个字节，**期待收到对方下一个报文段的第一个数据字节的序号**；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；**因此当前报文段最后一个字节的编号+1即为确认号**（这里加上不携带数据）。\n\n- 确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n\n- 同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，**SYN=1表示这是一个连接请求，或连接接受报文**。SYN这个标志位只有在 TCP 建立连接时才会被置1，握手完成后SYN标志位被置0。\n\n- 终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。\n\n- 补充说明：\n  - ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n  - 序列号：指出段中数据在发送端数据流中的位置；序列号是上一个收包的确认号不变\n  - 确认号：指出本机希望下一个接收的字节的序列号 ：确认号是上一个收包的序列号+上一个收包的数据段的大小；\n \n\n字段 | 含义\n---|---\nURG  | 紧急指针是否有效。为1，表示某一位需要被优先处理\nACK | 确认号是否有效，一般置为1。\nPSH  | 提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST  | 对方要求重新建立连接，复位。\nSYN  | 请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n\n\n## 三、 三次握手过程理解\n\n作用：通信双方都明确自己和对方的收发能力是正常的，同时利用数据包的选项来传输特殊的信息，交换初始序列号 ISN；\n\n### （一）ISN\n三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。\n如果ISN是固定的，攻击者很容易猜出后续的确认号。\n```text\nISN = M + F(localhost, localport, remotehost, remoteport)\n```\nM是一个计时器，每隔4毫秒加1。 F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出。\n\n### （二）三次握手过程\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqMsV9cC6tEJAicgCNZibn9WKCQVEyfnThGDyIHt0iaaAVpeR75OBRFrTJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n- 第一次握手（确认客户端的发送能力、服务端的接收能力是正常的）：建立连接时，客户端发送syn包（syn=x）（**即指明了客户端的初始序列号 ISN**）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n\n- 第二次握手（客户端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y）（**即指明客户端的初始序列号 ISN**），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n- 第三次握手：（服务端角度确认服务端的发送能力、客户端的接收能力以及客户端的发送能力、服务端的接收能力是正常的）客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1）（为了确认服务器端的 SYN），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。序列号是上一个同步请求数据包中的确认号值，确认号是服务器的初始序列号+1，注意：因为一个SYN将占用一个序号，所以要加1。\n\n\n### （三）补充问题\n\n- **2\\. ACK +1的问题；**\n序列号应该不是随机的，而是由双方协商的，协商之前最开始的值由TCP运输层生成。 它可能是上一个该端口的序列号+1 ， 原因是为了避免上次已断开的连接，还存在网络中延迟到达的TCP报文段的序号与当前连接中等待报文段的序号相同，以至于认为是这一次连接的包，发生错误。\n 关于ACK+1，在文中“包2”中如下所述：\n “需要注意的是，尽管客户端没有发送任何有效数据，确认号还是被加1，这是因为接收的包中包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）”这实际上是误解，因此误导了很多人。在停-等协议中，ACK确认的是当前包的序列号Seq=1 ，接收端会传回 ACK=1 。标识接收到了Seq=1的包，这是我们认为理所当然的。  但是在TCP协议中不是这样， **当发生Seq=1的包，接受端会传回ACK=2**， 也就是将接受到的Seq+1 ， 代表的是期望接受到的下一个包是 Seq=2的包。 （换句话说，和头部的标志位并没有任何关系）`\n\n为什么要这样呢？.. 这么做比较违反我们的直觉。\n\n因为TCP是以流水线发出的，比如发送端顺序的发出 Seq=1、Seq=2、Seq=3。 那么如果ACK确认的序号和收到的包的序号一致的话，那么需要发回 ACK=1、ACK=2、ACK=3 共三个包。但是TCP协议对此进行了优化，只需要发送一个ACK包就能代表说自己已经收到了前面三个包，\n 那就是发送ACK=4 （期望收到Seq为4的包）。这样节省了ACK确认的数量。\n \n 另外TCP是的序号是根据数据流编码的， 假设最开始Seq=0 Len=3， 那么 ACK=4的时候：\n 第一个意思是想表明期待收到下一个Seq为4的包。\n第二个意思实际上是说，想收到的包开始的那个比特位于数据流中的第四个比特。（下次从数据流中的第四个Byte开始发送）\n（实际上上面两个意思是一样的 = = ，同时也再次说明这个ACK+1和头部的标志位无关）\n\n以上问题在 计算机网络：自顶向下 中都有说到， 因为书中和文字有不一致的地方，然后我提出来纠正一下。\n\n\n*   **序列号为什么是随机的**？ \n 随机是因为为了防止建立链接时数据错乱, 比如如果固定是从1开始, 第一轮链接超时了然后客户端重新发起链接, 又从1开始第二轮, 这样可能第一轮的包刚好传过来了所以导致数据错乱. 为了解决这个问题, 初始序号是一个随机的, 本质上是随时间变化而变化, 每4ms会+1, 所以等到下一个重复的序号出现时需要2^32 * 4 / 1000 / 3600 约等于 4000小时, 这么长的时间里第一轮的请求100%死掉了, 这就是\"随机\"序号的设计原因.\n\n\n### （一）为什么TCP客户端最后还要发送一次确认呢？\n\n 一句话，**主要防止已经失效的连接请求报文突然又传送到了服务器**从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。\n \n如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。\n\n\n## 四、传输数据的简要过程如下：\n\n  1)  发送数据：服务器向客户端发送一个带有数据的数据包，该数据包中的序列号和确认号与建立连接第三步的数据包中的序列号和确认号相同；\n2)  确认收到：客户端收到该数据包，向服务器发送一个确认数据包，该数据包中，序列号是为上一个数据包中的确认号值，而确认号为服务器发送的上一个数据包中的序列号+上一个数据包中所带数据的大小。 数据分段中的序列号可以保证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。\n\n\n\n\n## 五、四次挥手过程理解 \nTCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，等到发送完了所有的数据后，会发送一个FIN段来关闭此方向上的连接。接收方发送ACK确认关闭连接。注意，接收到FIN报文的一方只能回复一个ACK, 它是无法马上返回对方一个FIN报文段的，因为结束数据传输的“指令”是上层应用层给出的，我只是一个“搬运工”，我无法了解`“上层的意志”`。\n\n![四次挥手过程]($resource/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png)\n\n- 1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（**等于前面已经传送过来的数据的最后一个字节的序号加1**，确认一下之前的收到了），此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n- 2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n- 3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n- 4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n- 5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n- 6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。\n\n注意：因为FIN和SYN一样，也要占一个序号。理论上服务器在TCP连接关闭时发送的终止数据包中，只有终止位是置1，然后客户端进行确认。但是在实际的TCP实现中，在终止数据包中，确认位和终止位是同时置为1的，确认位置为1表示对最后一次传输的数据进行确认，终止位置为1表示关闭该方向的TCP连接。\n\n### （一）为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n###  （二）为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n 建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n 而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### （三）如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n\n### （四）ISN\n\n三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。\n\n如果ISN是固定的，攻击者很容易猜出后续的确认号。\n\n```text\nISN = M + F(localhost, localport, remotehost, remoteport)\n```\n\nM是一个计时器，每隔4毫秒加1。 F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出。\n\n### （五）序列号回绕\n\n因为ISN是随机的，后续是递增的，所以序列号容易就会超过2^31-1。 **而tcp对于丢包和乱序等问题的判断都是依赖于序列号大小比较的**就是原则上不能后面的一个比前面的一个大。此时就出现了所谓的tcp序列号回绕（sequence wraparound）问题。怎么解决？\n\n```c\n/*\n* The next routines deal with comparing 32 bit unsigned ints\n* and worry about wraparound (automatic with unsigned arithmetic).\n*/\nstatic inline int before(__u32 seq1, __u32 seq2)\n{\n    return (__s32)(seq1-seq2) < 0;\n}\n\n#define after(seq2, seq1) before(seq1, seq2)\n```\n\n上述代码是内核中的解决回绕问题代码。**s32是有符号整型的意思**，u32则是无符号整型。序列号发生回绕后，序列号变小，相减之后，把结果变成有符号数了，因此结果成了负数。\n\n```text\n假设seq1=255， seq2=1（发生了回绕）。\nseq1 = 1111 1111 seq2 = 0000 0001\n我们希望比较结果是\n seq1 - seq2=\n 1111 1111\n-0000 0001\n-----------\n 1111 1110\n\n由于我们将结果转化成了有符号数，由于最高位是1，因此结果是一个负数，负数的绝对值为\n 0000 0001 + 1 = 0000 0010 = 2\n\n因此seq1 - seq2 < 0，这样 sq1 < sq2 ，保证不会后面的一个小于前面一个\n```\n\n### （六） syn flood攻击\n\n最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。syn flood属于Dos攻击的一种。\n\n如果恶意的向某个服务器端口发送大量的SYN包，则可以使服务器打开大量的半开连接，分配TCB（Transmission Control Block）, 从而消耗大量的服务器资源，同时也使得正常的连接请求无法被相应。当开放了一个TCP端口后，该端口就处于Listening状态，不停地监视发到该端口的Syn报文，一 旦接收到Client发来的Syn报文，就需要为该请求分配一个TCB，通常一个TCB至少需要280个字节，在某些操作系统中TCB甚至需要1300个字节，并返回一个SYN ACK命令，立即转为SYN-RECEIVED即半开连接状态。系统会为此耗尽资源。\n\n常见的防攻击方法有：\n\n## 无效连接的监视释放\n\n监视系统的半开连接和不活动连接，当达到一定阈值时拆除这些连接，从而释放系统资源。这种方法对于所有的连接一视同仁，而且由于SYN Flood造成的半开连接数量很大，正常连接请求也被淹没在其中被这种方式误释放掉，因此这种方法属于入门级的SYN Flood方法。\n\n## 延缓TCB分配方法\n\n消耗服务器资源主要是因为当SYN数据报文一到达，系统立即分配TCB，从而占用了资源。而SYN Flood由于很难建立起正常连接，因此，当正常连接建立起来后再分配TCB则可以有效地减轻服务器资源的消耗。常见的方法是使用Syn Cache和Syn Cookie技术。\n\n## Syn Cache技术\n\n系统在收到一个SYN报文时，在一个专用HASH表中保存这种半连接信息，直到收到正确的回应ACK报文再分配TCB。这个开销远小于TCB的开销。当然还需要保存序列号。\n\n## Syn Cookie技术\n\nSyn Cookie技术则完全不使用任何存储资源，这种方法比较巧妙，它使用一种特殊的算法生成Sequence Number，这种算法考虑到了对方的IP、端口、己方IP、端口的固定信息，以及对方无法知道而己方比较固定的一些信息，如MSS(Maximum Segment Size，最大报文段大小，指的是TCP报文的最大数据报长度，其中不包括TCP首部长度。)、时间等，在收到对方 的ACK报文后，重新计算一遍，看其是否与对方回应报文中的（Sequence Number-1）相同，从而决定是否分配TCB资源。\n\n## 使用SYN Proxy防火墙\n\n一种方式是防止墙dqywb连接的有效性后，防火墙才会向内部服务器发起SYN请求。防火墙代服务器发出的SYN ACK包使用的序列号为c, 而真正的服务器回应的序列号为c', 这样，在每个数据报文经过防火墙的时候进行序列号的修改。另一种方式是防火墙确定了连接的安全后，会发出一个safe reset命令，client会进行重新连接，这时出现的syn报文会直接放行。这样不需要修改序列号了。但是，client需要发起两次握手过程，因此建立连接的时间将会延长。\n\n## 连接队列\n\n在外部请求到达时，被服务程序最终感知到前，连接可能处于SYN_RCVD状态或是ESTABLISHED状态，但还未被应用程序接受。\n\n![](https://pic2.zhimg.com/80/v2-c4688fba5db30b31c913f549108c9735_hd.jpg)\n\n对应地，服务器端也会维护两种队列，处于SYN_RCVD状态的半连接队列，而处于ESTABLISHED状态但仍未被应用程序accept的为全连接队列。如果这两个队列满了之后，就会出现各种丢包的情形。\n\n```text\n查看是否有连接溢出\nnetstat -s | grep LISTEN\n```\n\n## 半连接队列满了\n\n在三次握手协议中，服务器维护一个半连接队列，该队列为每个客户端的SYN包开设一个条目(服务端在接收到SYN包的时候，就已经创建了`request_sock`结构，存储在半连接队列中)，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n 目前，Linux下默认会进行5次重发SYN-ACK包，重试的间隔时间从1s开始，下次的重试间隔时间是前一次的双倍，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s, 总共31s, 称为`指数退避`，第5次发出后还要等32s才知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 63s, TCP才会把断开这个连接。由于，SYN超时需要63秒，那么就给攻击者一个攻击服务器的机会，攻击者在短时间内发送大量的SYN包给Server(俗称SYN flood攻击)，用于耗尽Server的SYN队列。对于应对SYN 过多的问题，linux提供了几个TCP参数：tcp_syncookies、tcp_synack_retries、tcp_max_syn_backlog、tcp_abort_on_overflow 来调整应对。\n\n![](https://pic1.zhimg.com/80/v2-f998ee97330a3a258ad617ea10257c4c_hd.jpg)\n\n## 全连接队列满\n\n当第三次握手时，当server接收到ACK包之后，会进入一个新的叫 accept 的队列。\n\n当accept队列满了之后，即使client继续向server发送ACK的包，也会不被响应，此时ListenOverflows+1，同时server通过tcp_abort_on_overflow来决定如何返回，0表示直接丢弃该ACK，1表示发送RST通知client；相应的，client则会分别返回`read timeout` 或者 `connection reset by peer`。另外，`tcp_abort_on_overflow`是0的话，server过一段时间再次发送syn+ack给client（也就是重新走握手的第二步），如果client超时等待比较短，就很容易异常了。而客户端收到多个 SYN ACK 包，则会认为之前的 ACK 丢包了。于是促使客户端再次发送 ACK ，在 accept队列有空闲的时候最终完成连接。若 accept队列始终满员，则最终客户端收到 RST 包（此时服务端发送syn+ack的次数超出了`tcp_synack_retries`）。\n\n服务端仅仅只是创建一个定时器，以固定间隔重传syn和ack到服务端\n\n![](https://pic2.zhimg.com/80/v2-df71dbb7c5f6743eca7fba07d1a0b869_hd.jpg)\n\n## 命令\n\nnetstat -s命令\n```network\n> [root@server ~]# netstat -s | egrep \"listen|LISTEN\" 667399 times the listen queue of a socket overflowed 667399 SYNs to LISTEN sockets ignored\n> 比如上面看到的 667399 times ，表示全连接队列溢出的次数，隔几秒钟执行下，如果这个数字一直在增加的话肯定全连接队列偶尔满了。\n> [root@server ~]# netstat -s | grep TCPBacklogDrop 查看 Accept queue 是否有溢出\n```\nss命令\n```\n> [root@server ~]# ss -lnt State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 _:6379 _:_ LISTEN 0 128 _:22 _:_ 如果State是listen状态，Send-Q 表示第三列的listen端口上的全连接队列最大为50，第一列Recv-Q为全连接队列当前使用了多少。 非 LISTEN 状态中 Recv-Q 表示 receive queue 中的 bytes 数量；Send-Q 表示 send queue 中的 bytes 数值。\n```\n## 小结\n\n当外部连接请求到来时，TCP模块会首先查看`max_syn_backlog`，如果处于SYN_RCVD状态的连接数目超过这一阈值，进入的连接会被拒绝。根据`tcp_abort_on_overflow`字段来决定是直接丢弃，还是直接reset.\n\n从服务端来说，三次握手中，第一步server接受到client的syn后，把相关信息放到半连接队列中，同时回复syn+ack给client. 第三步当收到客户端的ack, 将连接加入到全连接队列。\n\n一般，全连接队列比较小，会先满，此时半连接队列还没满。如果这时收到syn报文，则会进入半连接队列，没有问题。但是如果收到了三次握手中的第3步(ACK)，则会根据`tcp_abort_on_overflow`字段来决定是直接丢弃，还是直接reset.此时，客户端发送了ACK, 那么客户端认为三次握手完成，它认为服务端已经准备好了接收数据的准备。但此时服务端可能因为全连接队列满了而无法将连接放入，会重新发送第2步的syn+ack, 如果这时有数据到来，服务器TCP模块会将数据存入队列中。一段时间后，client端没收到回复，超时，连接异常，client会主动关闭连接。\n\n## “三次握手，四次挥手”redis实例分析\n\n1.  我在dev机器上部署redis服务，端口号为6379,\n2.  通过tcpdump工具获取数据包，使用如下命令\n\n```text\ntcpdump -w /tmp/a.cap port 6379 -s0\n-w把数据写入文件，-s0设置每个数据包的大小默认为68字节，如果用-S 0则会抓到完整数据包\n```\n\n1.  在dev2机器上用redis-cli访问dev:6379, 发送一个ping, 得到回复pong\n2.  停止抓包，用tcpdump读取捕获到的数据包\n\n```text\ntcpdump -r /tmp/a.cap -n -nn -A -x| vim -\n（-x 以16进制形式展示，便于后面分析）\n```\n\n共收到了7个包。\n\n抓到的是IP数据包，IP数据包分为IP头部和IP数据部分，IP数据部分是TCP头部加TCP数据部分。\n\nIP的数据格式为：\n\n![](https://pic4.zhimg.com/80/v2-a8702bdb6e9cf9fd29e824ac07542067_hd.jpg)\n\n它由固定长度20B+可变长度构成。\n\n```text\n10:55:45.662077 IP dev2.39070 > dev.6379: Flags [S], seq 4133153791, win 29200, options [mss 1460,sackOK,TS val 2959270704 ecr 0,nop,wscale 7], length 0\n        0x0000:  4500 003c 08cf 4000 3606 14a5 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ebff 0000 0000\n        0x0020:  a002 7210 872f 0000 0204 05b4 0402 080a\n        0x0030:  b062 e330 0000 0000 0103 0307\n```\n\n对着IP头部格式，来拆解数据包的具体含义。\n\n![](https://pic3.zhimg.com/80/v2-1b33f99c890277f54fd15370635860ee_hd.jpg)\n\n剩余的数据部分即为TCP协议相关的。TCP也是20B固定长度+可变长度部分。\n\n![](https://pic4.zhimg.com/80/v2-4949f0578dbde508f35ef4aef9a932b7_hd.jpg)\n\n可变长度部分，协议如下：\n\n![](https://pic1.zhimg.com/80/v2-82bc4c9a7d5ae823c09502c687d3b6e0_hd.jpg)\n\n这样第一个包分析完了。dev2向dev发送SYN请求。`也就是三次握手中的第一次了。` `SYN seq(c)=4133153791`\n\n第二个包，dev响应连接，ack=4133153792\\. 表明dev下次准备接收这个序号的包，用于tcp字节注的顺序控制。dev（也就是server端）的初始序号为seq=4264776963, syn=1. `SYN ack=seq(c)+1 seq(s)=4264776963`\n\n第三个包，client包确认，这里使用了相对值应答。seq=4133153792, 等于第二个包的ack. ack=4264776964. `ack=seq(s)+1, seq=seq(c)+1` 至此，三次握手完成。接下来就是发送ping和pong的数据了。\n\n接着第四个包。\n\n```text\n10:55:48.090073 IP dev2.39070 > dev.6379: Flags [P.], seq 1:15, ack 1, win 229, options [nop,nop,TS val 2959273132 ecr 3132256230], length 14\n        0x0000:  4500 0042 08d1 4000 3606 149d 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ec00 fe33 5504\n        0x0020:  8018 00e5 4b5f 0000 0101 080a b062 ecac\n        0x0030:  bab2 6fe6 2a31 0d0a 2434 0d0a 7069 6e67\n        0x0040:  0d0a\n```\n\ntcp首部长度为32B, 可选长度为12B. IP报文的总长度为66B, 首部长度为20B, 因此TCP数据部分长度为14B. seq=0xf65a ec00=4133153792 ACK, PSH. 数据部分为2a31 0d0a 2434 0d0a 7069 6e67 0d0a\n\n```text\n0x2a31         -> *1\n0x0d0a         -> \\r\\n\n0x2434         -> $4\n0x0d0a         -> \\r\\n\n0x7069 0x6e67  -> ping\n0x0d0a         -> \\r\\n\n```\n\ndev2向dev发送了ping数据，第四个包完毕。\n\n第五个包，dev2向dev发送ack响应。 序列号为0xfe33 5504=4264776964, ack确认号为0xf65a ec0e=4133153806=(4133153792+14).\n\n第六个包，dev向dev2响应pong消息。序列号fe33 5504，确认号f65a ec0e, TCP头部可选长度为12B, IP数据报总长度为59B, 首部长度为20B, 因此TCP数据长度为7B. 数据部分2b50 4f4e 470d 0a, 翻译过来就是`+PONG\\r\\n`.\n\n至此，Redis客户端和Server端的三次握手过程分析完毕。\n\n\n\n",[[1574214177526,["GJX@GJXAIOUPC",[[1,3641,"**"],[1,3722,"**"]],[3641,3722],[3641,3726]]],[1574214193708,["GJX@GJXAIOUPC",[[1,3730,"**"],[1,3819,"**"]],[3730,3819],[3730,3823]]]],null,"GJX@GJXAIOUPC"]]}