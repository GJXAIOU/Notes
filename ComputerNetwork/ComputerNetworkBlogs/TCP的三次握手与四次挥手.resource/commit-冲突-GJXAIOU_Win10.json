{"compress":true,"commitItems":[["c8dd599d-594c-4693-bba3-6ff9e873aac1",1570845107146,"## TCP的三次握手与四次挥手\n\n小鸟 [JAVA数据结构](javascript:void(0);) _昨天_\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqfyZ8gw6mmhxlKGNia3LhO7q9icojiaZo6dsF5GJjERgHYMVvtC7JRD2Rg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n    序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n\n    确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。\n\n    确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n\n    同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n\n    终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接\n\n    PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n字段  含义\n\nURG  紧急指针是否有效。为1，表示某一位需要被优先处理\n\nACK  确认号是否有效，一般置为1。\n\nPSH  提示接收端应用程序立即从TCP缓冲区把数据读走。\n\nRST  对方要求重新建立连接，复位。\n\nSYN  请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\n\nFIN      希望断开连接。\n\n三次握手过程理解\n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqMsV9cC6tEJAicgCNZibn9WKCQVEyfnThGDyIHt0iaaAVpeR75OBRFrTJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n四次挥手过程理解 \n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqoIfD43oLzYF5s2lcdwO1g3j4jten5G7dMfTtJoYHzI5ENlwOFLOjBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。",[[1570845096153,["GJX@GJXAIOU",[[-1,59,"![](https://mmbiz.qpic.cn/mmbiz_jpg/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqfyZ8gw6mmhxlKGNia3LhO7q9icojiaZo6dsF5GJjERgHYMVvtC7JRD2Rg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n"]],[59,239],[59,59]]],[1570845103908,["GJX@GJXAIOU",[[1,59,"![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)"]],[59,59],[115,115]]],[1570845111306,["GJX@GJXAIOU",[[-1,18,"小鸟 [JAVA数据结构](javascript:void(0);) _昨天_"]],[18,57],[18,18]]],[1570845113592,["GJX@GJXAIOU",[[-1,19,"\n"]],[19,19],[18,18]]],[1570845115465,["GJX@GJXAIOU",[[1,79,"\n    "]],[79,79],[84,84]]],[1570845544034,["GJX@GJXAIOU",[[-1,75,"    "],[1,79,"\n"]],[79,79],[76,76]]],[1570845544192,["GJX@GJXAIOU",[[1,77,"\n"]],[76,76],[77,77]]],[1570845544339,["GJX@GJXAIOU",[[1,78,"\n"]],[77,77],[78,78]]],[1570845547793,["GJX@GJXAIOU",[[-1,0,"#"]],[2,2],[1,1]]],[1570845549464,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1570845552836,["GJX@GJXAIOU",[[-1,0,""],[1,0,"·"],[-1,79,"   "],[1,82,"   "],[-1,199,"   "],[1,202,"   "],[-1,309,"   "],[1,312,"   "],[-1,355,"   "],[1,358,"   "],[-1,502,"   "],[1,505,"   "],[-1,558,"   "],[1,561,"   "],[-1,779,"    "],[1,783,"    "],[-1,1271," "],[1,1272," "]],[0,0],[1,1]]],[1570845553011,["GJX@GJXAIOU",[[1,0,"·"]],[1,1],[2,2]]],[1570845553196,["GJX@GJXAIOU",[[1,2,"·"]],[2,2],[3,3]]],[1570845554561,["GJX@GJXAIOU",[[-1,0,"···"]],[3,3],[0,0]]],[1570845555410,["GJX@GJXAIOU",[[1,0,"`"]],[0,0],[1,1]]],[1570845555604,["GJX@GJXAIOU",[[1,0,"`"]],[1,1],[2,2]]],[1570845555778,["GJX@GJXAIOU",[[1,2,"`"]],[2,2],[3,3]]],[1570845555803,["GJX@GJXAIOU",[[1,3,"language\n```\n"]],[3,3],[3,11]]],[1570845559529,["GJX@GJXAIOU",[[-1,0,"```language\n```"]],[0,15],[0,0]]],[1570845559818,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1570845559980,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1570845560129,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1570845560155,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1570845574245,["GJX@GJXAIOU",[[1,4,"flag: purpo"]],[4,4],[15,15]]],[1570845583697,["GJX@GJXAIOU",[[-1,14,"o"]],[15,15],[14,14]]],[1570845585694,["GJX@GJXAIOU",[[1,14,"le"]],[14,14],[16,16]]],[1570845608194,["GJX@GJXAIOU",[[-1,10,"p"]],[11,11],[10,10]]],[1570845608730,["GJX@GJXAIOU",[[1,10,"P"]],[10,10],[11,11]]],[1570845631684,["GJX@GJXAIOU",[[-1,10,"P"]],[11,11],[10,10]]],[1570845632218,["GJX@GJXAIOU",[[1,10,"p"]],[10,10],[11,11]]],[1570845644098,["GJX@GJXAIOU",[[-1,101,"    "]],[101,105],[101,101]]],[1570845661801,["GJX@GJXAIOU",[[-1,217,"    "]],[217,221],[217,217]]],[1570845662131,["GJX@GJXAIOU",[[1,217,"-"]],[217,217],[218,218]]],[1570845663833,["GJX@GJXAIOU",[[-1,324,"    "]],[324,328],[324,324]]],[1570845665249,["GJX@GJXAIOU",[[1,324,"-"]],[324,324],[325,325]]],[1570845667178,["GJX@GJXAIOU",[[-1,367,"    "]],[367,371],[367,367]]],[1570845668060,["GJX@GJXAIOU",[[1,367,"- "]],[367,367],[369,369]]],[1570845669043,["GJX@GJXAIOU",[[1,325," "]],[325,325],[326,326]]],[1570845669971,["GJX@GJXAIOU",[[1,218," "]],[218,218],[219,219]]],[1570845671695,["GJX@GJXAIOU",[[1,101,"- "]],[101,101],[103,103]]],[1570845678403,["GJX@GJXAIOU",[[-1,100,"\n"]],[99,99],[98,98]]],[1570845678528,["GJX@GJXAIOU",[[-1,99,"\n"]],[98,98],[97,97]]],[1570845685962,["GJX@GJXAIOU",[[-1,514,"    "]],[514,518],[514,514]]],[1570845687507,["GJX@GJXAIOU",[[1,514,"- "]],[514,514],[516,516]]],[1570845694400,["GJX@GJXAIOU",[[-1,569,"   "]],[568,571],[568,568]]],[1570845694674,["GJX@GJXAIOU",[[1,568,"-"]],[568,568],[569,569]]],[1570845711953,["GJX@GJXAIOU",[[1,631,"|"]],[631,631],[632,632]]],[1570845717193,["GJX@GJXAIOU",[[1,636,"---|---"]],[636,636],[643,643]]],[1570845719909,["GJX@GJXAIOU",[[1,649,"|v "]],[649,649],[651,651]]],[1570845721027,["GJX@GJXAIOU",[[-1,650,"v"]],[651,651],[650,650]]],[1570845723138,["GJX@GJXAIOU",[[1,681,"|"]],[681,681],[682,682]]],[1570845724151,["GJX@GJXAIOU",[[-1,676,"\n"]],[676,676],[675,675]]],[1570845726619,["GJX@GJXAIOU",[[-1,697,"\n"]],[697,697],[696,696]]],[1570845728362,["GJX@GJXAIOU",[[1,702," "]],[701,701],[702,702]]],[1570845728802,["GJX@GJXAIOU",[[1,702,"|"]],[702,702],[703,703]]],[1570845731545,["GJX@GJXAIOU",[[-1,729,"\n"]],[729,729],[728,728]]],[1570845734169,["GJX@GJXAIOU",[[1,734,"| "]],[734,734],[736,736]]],[1570845736562,["GJX@GJXAIOU",[[1,757,"| "]],[757,757],[759,759]]],[1570845737763,["GJX@GJXAIOU",[[-1,751,"\n"]],[751,751],[750,750]]],[1570845739776,["GJX@GJXAIOU",[[-1,796,"\n"]],[796,796],[795,795]]],[1570845742281,["GJX@GJXAIOU",[[1,802,"|"]],[802,802],[803,803]]],[1570846101889,["GJX@GJXAIOU",[[1,114,"**"],[1,124,"**"]],[114,124],[114,128]]],[1570846147640,["GJX@GJXAIOU",[[1,236,"**"],[1,259,"**"]],[236,259],[236,263]]],[1570846171298,["GJX@GJXAIOU",[[1,193,"**"],[1,218,"**"]],[193,218],[193,222]]],[1570846214570,["GJX@GJXAIOU",[[1,311,"**"],[1,334,"**"]],[311,334],[311,338]]],[1570846281103,["GJX@GJXAIOU",[[1,464,"**"],[1,487,"**"]],[464,487],[464,491]]],[1570846283312,["GJX@GJXAIOU",[[-1,506,"建产"]],[508,508],[506,506]]],[1570846284396,["GJX@GJXAIOU",[[1,506,"j "]],[506,506],[507,507]]],[1570846284690,["GJX@GJXAIOU",[[1,507,"ian"]],[507,507],[510,510]]],[1570846287665,["GJX@GJXAIOU",[[-1,506,"jian"]],[510,510],[506,506]]],[1570846288786,["GJX@GJXAIOU",[[1,506,"建立"]],[506,506],[508,508]]],[1570846288811,["GJX@GJXAIOU",[[1,506," "]],[508,508],[509,509]]],[1570846291040,["GJX@GJXAIOU",[[-1,509," "]],[510,510],[509,509]]],[1570846293217,["GJX@GJXAIOU",[[1,503," "]],[503,503],[504,504]]],[1570846303721,["GJX@GJXAIOU",[[1,588,"。"]],[588,588],[589,589]]],[1570846534769,["GJX@GJXAIOU",[[1,838,"## "]],[838,838],[849,849]]],[1570846538425,["GJX@GJXAIOU",[[1,1310,"## "]],[1310,1310],[1322,1322]]],[1570846642387,["GJX@GJXAIOU",[[-1,1324,"![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqoIfD43oLzYF5s2lcdwO1g3j4jten5G7dMfTtJoYHzI5ENlwOFLOjBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)"]],[1324,1499],[1324,1324]]],[1570846649873,["GJX@GJXAIOU",[[1,1324,"![四次挥手过程]($resource/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png)"]],[1324,1324],[1404,1404]]],[1570846684475,["GJX@GJXAIOU",[[1,1031,"- "]],[1031,1031],[1033,1033]]],[1570846686890,["GJX@GJXAIOU",[[1,1131,"- "]],[1131,1131],[1133,1133]]],[1570846689523,["GJX@GJXAIOU",[[1,1220,"- "]],[1220,1220],[1222,1222]]],[1570846693013,["GJX@GJXAIOU",[[1,1411,"- "]],[1411,1411],[1413,1413]]],[1570846696891,["GJX@GJXAIOU",[[1,1550,"- "]],[1550,1550],[1552,1552]]],[1570846699309,["GJX@GJXAIOU",[[1,1747,"- "]],[1747,1747],[1749,1749]]],[1570846702683,["GJX@GJXAIOU",[[1,1833,"- "]],[1833,1833],[1835,1835]]],[1570846704780,["GJX@GJXAIOU",[[1,1957,"- "]],[1957,1957],[1959,1959]]],[1570846707748,["GJX@GJXAIOU",[[1,2110,"- "]],[2110,2110],[2112,2112]]],[1570848887137,["GJX@GJXAIOU",[[1,40,"网络层是"]],[40,40],[44,44]]],[1570848889153,["GJX@GJXAIOU",[[1,44,"师兄那"]],[44,44],[47,47]]],[1570848891591,["GJX@GJXAIOU",[[-1,44,"师兄那"]],[47,47],[44,44]]],[1570848898683,["GJX@GJXAIOU",[[1,44,"实现两个主机之间的同性"]],[44,44],[55,55]]],[1570848899344,["GJX@GJXAIOU",[[-1,53,"同性"]],[55,55],[53,53]]],[1570848903840,["GJX@GJXAIOU",[[1,53,"通信，"]],[53,53],[56,56]]]],null,"GJX@GJXAIOU"],["ec041f8d-8206-4b73-8292-e9e96e41d993",1571708561381,"---\nflag: purple\n---\n\n\n# TCP的三次握手与四次挥手\n\n网络层是实现两个主机之间的通信，\n![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)\n\n\n- 序列号seq：占4个字节，**用来标记数据段的顺序**，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；**序列号seq就是这个报文段中的第一个字节的数据编号**。\n\n- 确认号ack：占4个字节，**期待收到对方下一个报文段的第一个数据字节的序号**；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；**因此当前报文段最后一个字节的编号+1即为确认号**。\n\n- 确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效\n\n- 同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，**SYN=1表示这是一个连接请求，或连接接受报文**。SYN这个标志位只有在 TCP 建立连接时才会被置1，握手完成后SYN标志位被置0。\n\n- 终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。\n\n- PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。\n\n字段 | 含义\n---|---\nURG  | 紧急指针是否有效。为1，表示某一位需要被优先处理\nACK | 确认号是否有效，一般置为1。\nPSH  | 提示接收端应用程序立即从TCP缓冲区把数据读走。\nRST  | 对方要求重新建立连接，复位。\nSYN  | 请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1\nFIN   |   希望断开连接。\n\n## 三次握手过程理解\n\n![](https://mmbiz.qpic.cn/mmbiz_png/9ZYzcsxnWicBoPZrQ8ZYQkkAODicGUXPgqMsV9cC6tEJAicgCNZibn9WKCQVEyfnThGDyIHt0iaaAVpeR75OBRFrTJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n- 第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。\n\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n- 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n## 四次挥手过程理解 \n\n![四次挥手过程]($resource/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B.png)\n\n- 1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。\n\n- 2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。\n\n- 3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。\n\n- 4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n\n- 5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。\n\n- 6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。",[[1571708544210,["GJX@GJXAIOU",[[-1,114,"\n"]],[114,114],[113,113]]],[1571708634232,["GJX@GJXAIOU",[[1,665,"- \n"]],[664,664],[667,667]]],[1571708634456,["GJX@GJXAIOU",[[-1,665,"- "]],[667,667],[666,666]]],[1571708638203,["GJX@GJXAIOU",[[1,666,"- **含义**\n  - 序列号：指出段中数据在发送端数据流中的位置\n  - 确认号：指出本机希望下一个接收的字节的序列号 \n \n- **原则** \n  - 序列号是上一个收包的确认号不变\n  - 确认号是上一个收包的序列号+上一个收包的数据段的大小 "]],[666,666],[792,792]]],[1571708643573,["GJX@GJXAIOU",[[1,793,"\n"]],[793,793],[794,794]]],[1571708659488,["GJX@GJXAIOU",[[1,2337,"\n- "]],[2337,2337],[2340,2340]]],[1571708659639,["GJX@GJXAIOU",[[-1,2338,"- "],[1,2340,"\n\n"]],[2340,2340],[2339,2339]]],[1571708659817,["GJX@GJXAIOU",[[1,2340,"\n"]],[2339,2339],[2340,2340]]],[1571708660009,["GJX@GJXAIOU",[[1,2341,"\n"]],[2340,2340],[2341,2341]]],[1571708660217,["GJX@GJXAIOU",[[1,2342,"\n"]],[2341,2341],[2342,2342]]],[1571708661593,["GJX@GJXAIOU",[[1,2342,"# [面试]详细描述三次握手和四次挥手的过程+状态图\n\n\n具体题目：\n问题1: 请详细描述三次握手和四次挥手的过程\n\n要求熟悉三次握手和四次挥手的机制，要求画出状态图。\n\n问题2: 四次挥手中TIME_WAIT状态存在的目的是什么?\n\n这个问题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。"]],[2342,2342],[2517,2517]]],[1571708760440,["GJX@GJXAIOU",[[1,1457,"序列号是上一个同步请求数据包中的确认号值，确认号是服务器的初始序列号+1，注意：因为一个SYN将占用一个序号，所以要加1。"]],[1457,1457],[1518,1518]]],[1571708818401,["GJX@GJXAIOU",[[1,1520,"\n"]],[1519,1519],[1520,1520]]],[1571708818546,["GJX@GJXAIOU",[[1,1521,"\n"]],[1520,1520],[1521,1521]]],[1571708818687,["GJX@GJXAIOU",[[1,1522,"\n"]],[1521,1521],[1522,1522]]],[1571708818906,["GJX@GJXAIOU",[[1,1523,"\n"]],[1522,1522],[1523,1523]]],[1571708819059,["GJX@GJXAIOU",[[1,1524,"\n"]],[1523,1523],[1524,1524]]],[1571708821811,["GJX@GJXAIOU",[[1,1520,"## 传输数据的简要过程如下：\n\n  1)  发送数据：服务器向客户端发送一个带有数据的数据包，该数据包中的序列号和确认号与建立连接第三步的数据包中的序列号和确认号相同；\n2)  确认收到：客户端收到该数据包，向服务器发送一个确认数据包，该数据包中，序列号是为上一个数据包中的确认号值，而确认号为服务器发送的上一个数据包中的序列号+上一个数据包中所带数据的大小。 数据分段中的序列号可以保证所有传输的数据按照正常的次序进行重组，而且通过确认保证数据传输的完整性。"]],[1520,1520],[1751,1751]]],[1571708924391,["GJX@GJXAIOU",[[1,2636,"注意：因为FIN和SYN一样，也要占一个序号。理论上服务器在TCP连接关闭时发送的终止数据包中，只有终止位是置1，然后客户端进行确认。但是在实际的TCP实现中，在终止数据包中，确认位和终止位是同时置为1的，确认位置为1表示对最后一次传输的数据进行确认，终止位置为1表示关闭该方向的TCP连接。\n"]],[2636,2636],[2783,2783]]],[1571709583306,["GJX@GJXAIOU",[[1,1520,"\n"]],[1520,1520],[1521,1521]]],[1571709583441,["GJX@GJXAIOU",[[1,1521,"\n"]],[1521,1521],[1522,1522]]],[1571709583593,["GJX@GJXAIOU",[[1,1522,"\n"]],[1522,1522],[1523,1523]]],[1571709585393,["GJX@GJXAIOU",[[1,1520,"**1\\. 序列号是“随机”的**\n\n**2\\. ACK +1的问题；**\n序列号应该不是随机的，而是由双方协商的，协商之前最开始的值由TCP运输层生成。 它可能是上一个该端口的序列号+1 ， 原因是为了避免上次已断开的连接，还存在网络中延迟到达的TCP报文段的序号与当前连接中等待报文段的序号相同，以至于认为是这一次连接的包，发生错误。\n\n\n 关于ACK+1，在文中“包2”中如下所述：\n\n “需要注意的是，尽管客户端没有发送任何有效数据，确认号还是被加1，这是因为接收的包中包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）”这实际上是误解，因此误导了很多人。在停-等协议中，ACK确认的是当前包的序列号Seq=1 ，接收端会传回 ACK=1 。标识接收到了Seq=1的包，这是我们认为理所当然的。  但是在TCP协议中不是这样， **当发生Seq=1的包，接受端会传回ACK=2**， 也就是将接受到的Seq+1 ， 代表的是期望接受到的下一个包是 Seq=2的包。 （换句话说，和头部的标志位并没有任何关系）`\n\n为什么要这样呢？.. 这么做比较违反我们的直觉。\n\n因为TCP是以流水线发出的，比如发送端顺序的发出 Seq=1、Seq=2、Seq=3。 那么如果ACK确认的序号和收到的包的序号一致的话，那么需要发回 ACK=1、ACK=2、ACK=3 共三个包。但是TCP协议对此进行了优化，只需要发送一个ACK包就能代表说自己已经收到了前面三个包，\n 那就是发送ACK=4 （期望收到Seq为4的包）。这样节省了ACK确认的数量。\n \n \n 另外TCP是的序号是根据数据流编码的， 假设最开始Seq=0 Len=3， 那么 ACK=4的时候：\n 第一个意思是想表明期待收到下一个Seq为4的包。\n第二个意思实际上是说，想收到的包开始的那个比特位于数据流中的第四个比特。（下次从数据流中的第四个Byte开始发送）\n（实际上上面两个意思是一样的 = = ，同时也再次说明这个ACK+1和头部的标志位无关）\n\n以上问题在 计算机网络：自顶向下 中都有说到， 因为书中和文字有不一致的地方，然后我提出来纠正一下。\n\n\n*   序列号为什么是随机的？ \n 随机是因为为了防止建立链接时数据错乱, 比如如果固定是从1开始, 第一轮链接超时了然后客户端重新发起链接, 又从1开始第二轮, 这样可能第一轮的包刚好传过来了所以导致数据错乱. 为了解决这个问题, 初始序号是一个随机的, 本质上是随时间变化而变化, 每4ms会+1, 所以等到下一个重复的序号出现时需要2^32 * 4 / 1000 / 3600 约等于 4000小时, 这么长的时间里第一轮的请求100%死掉了, 这就是\"随机\"序号的设计原因.\n\n\n"]],[1520,1520],[2704,2704]]],[1571709674610,["GJX@GJXAIOU",[[1,606,"\n"]],[605,605],[606,606]]],[1571709674817,["GJX@GJXAIOU",[[1,607,"\n"]],[606,606],[607,607]]],[1571709675226,["GJX@GJXAIOU",[[1,608,"\n"]],[607,607],[608,608]]],[1571709675441,["GJX@GJXAIOU",[[1,609,"\n"]],[608,608],[609,609]]],[1571709675657,["GJX@GJXAIOU",[[1,610,"\n"]],[609,609],[610,610]]],[1571709675833,["GJX@GJXAIOU",[[1,611,"\n"]],[610,610],[611,611]]],[1571709676096,["GJX@GJXAIOU",[[1,612,"\n"]],[611,611],[612,612]]],[1571709676387,["GJX@GJXAIOU",[[1,613,"\n"]],[612,612],[613,613]]],[1571709676570,["GJX@GJXAIOU",[[1,614,"\n"]],[613,613],[614,614]]],[1571709678586,["GJX@GJXAIOU",[[1,606,"### 常用的熟知端口号\n![常用端口号]($resource/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7.jpg)\n\n## 二、TCP的概述\n\n TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。\n\n### （一）TCP报文首部\n\n![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)\n\n- **源端口和目的端口**：各占2个字节，分别写入源端口和目的端口；\n\n- **序号**：占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；\n\n- **确认号**：占4个字节，**是期望收到对方下一个报文的第一个数据字节的序号**。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；\n\n- **数据偏移**：占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；\n\n- **保留**：占6位，保留今后使用，但目前应都位0；\n\n- **紧急URG**：当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；\n\n- **确认ACK**：仅当ACK=1时，确认号字段才有效。TCP规定，**在连接建立后所有报文的传输都必须把ACK置1**；\n\n- **推送PSH**：当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；\n\n- **复位RST**：当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；\n\n- **同步SYN**：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；\n\n- **终止FIN**：用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；\n\n- **窗口**：占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；\n\n- **检验和**：占2字节，校验首部和数据这两部分；\n\n- **紧急指针**：占2字节，指出本报文段中的紧急数据的字节数；\n\n- **选项**：长度可变，定义一些其他的可选的参数。"]],[606,606],[1785,1785]]],[1571709717410,["GJX@GJXAIOU",[[1,3892,"### （一）为什么TCP客户端最后还要发送一次确认呢？\n\n 一句话，**主要防止已经失效的连接请求报文突然又传送到了服务器**从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。\n \n如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。"]],[3892,3892],[4281,4281]]],[1571709747485,["GJX@GJXAIOU",[[1,5548,"### （一）为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n###  （二）为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n 建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n 而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### （三）如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。"]],[5548,5548],[6364,6364]]],[1571709785861,["GJX@GJXAIOU",[[-1,22,"\n"]],[22,22],[21,21]]],[1571709789186,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1571709789411,["GJX@GJXAIOU",[[1,40,"\n"]],[39,39],[40,40]]],[1571709789490,["GJX@GJXAIOU",[[1,41,"\n"]],[40,40],[41,41]]],[1571709828451,["GJX@GJXAIOU",[[1,39,"## "]],[39,39],[42,42]]],[1571709830631,["GJX@GJXAIOU",[[1,42,"前言"],[-1,3670," "],[1,3671," "]],[42,42],[44,44]]],[1571709831269,["GJX@GJXAIOU",[[1,47,"\n"]],[44,44],[45,45]]],[1571709835358,["GJX@GJXAIOU",[[1,42,"一、"]],[42,42],[44,44]]],[1571709840667,["GJX@GJXAIOU",[[1,47," TCP 协议："]],[47,47],[55,55]]],[1571709850030,["GJX@GJXAIOU",[[1,51,"、"]],[51,51],[52,52]]],[1571709850818,["GJX@GJXAIOU",[[-1,51,"、"]],[52,52],[51,51]]],[1571709851788,["GJX@GJXAIOU",[[1,51,"?"]],[51,51],[52,52]]],[1571709852717,["GJX@GJXAIOU",[[-1,51,"?"]],[52,52],[51,51]]],[1571709853639,["GJX@GJXAIOU",[[1,51,"？"]],[51,51],[52,52]]],[1571709854235,["GJX@GJXAIOU",[[-1,51,"？"]],[52,52],[51,51]]],[1571709854772,["GJX@GJXAIOU",[[1,51,"、"]],[51,51],[52,52]]],[1571709855243,["GJX@GJXAIOU",[[-1,51,"、"]],[52,52],[51,51]]],[1571709857040,["GJX@GJXAIOU",[[1,51,"/IP"]],[51,51],[54,54]]],[1571709862301,["GJX@GJXAIOU",[[1,58,"是网络层"]],[58,58],[62,62]]],[1571709864765,["GJX@GJXAIOU",[[-1,59,"网络层"]],[62,62],[59,59]]],[1571709879673,["GJX@GJXAIOU",[[1,59,"传输层协议，主要解决数据如何在"]],[59,59],[74,74]]],[1571709884629,["GJX@GJXAIOU",[[1,74,"网络中农"]],[74,74],[78,78]]],[1571709884938,["GJX@GJXAIOU",[[-1,77,"农"]],[78,78],[77,77]]],[1571709890429,["GJX@GJXAIOU",[[1,77,"传输；"]],[77,77],[80,80]]],[1571709890718,["GJX@GJXAIOU",[[1,81," \n"]],[80,80],[82,82]]],[1571709910422,["GJX@GJXAIOU",[[1,82,"HTTP 协议：是应用层协议，主要解决如何包装数据；"]],[82,82],[108,108]]],[1571710025782,["GJX@GJXAIOU",[[-1,111,"网络层是实现两个主机之间的通信，"]],[111,127],[111,111]]],[1571710043911,["GJX@GJXAIOU",[[1,110,"## 二、TCP 帧结构"]],[110,110],[122,122]]],[1571710125701,["GJX@GJXAIOU",[[1,109,"套接字： TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字（socket），它的定义为==端口号拼接到IP地址即构成了套接字==，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。"]],[109,109],[242,242]]],[1571710128771,["GJX@GJXAIOU",[[1,243,"\n"]],[243,243],[244,244]]],[1571710128944,["GJX@GJXAIOU",[[1,244,"\n"]],[244,244],[245,245]]],[1571710134581,["GJX@GJXAIOU",[[1,47,"-"]],[47,47],[48,48]]],[1571710136476,["GJX@GJXAIOU",[[1,82,"-"]],[82,82],[83,83]]],[1571710138301,["GJX@GJXAIOU",[[1,110,"-"]],[110,110],[111,111]]],[1571710139523,["GJX@GJXAIOU",[[-1,110,"-"]],[111,111],[110,110]]],[1571710139833,["GJX@GJXAIOU",[[1,110," "]],[110,110],[111,111]]],[1571710141565,["GJX@GJXAIOU",[[1,112,"- "]],[112,112],[114,114]]],[1571710158099,["GJX@GJXAIOU",[[1,151,"**"],[1,168,"**"]],[151,168],[151,172]]],[1571710245626,["GJX@GJXAIOU",[[-1,1061,"![TCP帧结构]($resource/TCP%E5%B8%A7%E7%BB%93%E6%9E%84.png)"]],[1061,1116],[1061,1061]]]],null,"GJX@GJXAIOU"]]}