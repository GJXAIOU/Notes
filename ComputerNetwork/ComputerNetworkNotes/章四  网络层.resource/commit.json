{"compress":true,"commitItems":[["3d3ebd24-1229-4503-9e8f-f494fb980bfb",1533602386915,"## 网络层提供\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n![数据包在网络中的传输]()  \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n同一网络中IP地址的网络部分是一样的   \n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址，一般使用该网段IP的第一个地址作为 网关地址。  \n\n\n\n\n## 网络层协议  \n**网络层协议：**ARP   IP ICMP  IGMP   \n### 1.ARP协议  \n负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n%%扫描本网段的MAC地址：ARP -a  \n%%IP地址与MAC地址绑定:arp -s ip地址 Mac地址    \n\n\nARP欺骗  \n\n---\n\n\n\n\n\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n\n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n> ping  www.baidu.com   可以看到网络延迟    %TTL是数据包的生存时间，没过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。    \n%根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n1.ping 局域网，网络延迟应该小于10ms   \n2. ping /?  得到所有ping命令    \n3.ping 地址 -t     表示一直ping下去  \n4.ping -l  200     表示用数据包为200字节的数据包来ping   \n5.发包的时候指定TTL：ping  地址 -i TTL值   可以跟踪数据包经过的路由器  \n6.pathping可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n**区别**   \n点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n（点到点可以调整进度，但是多播无法调整进度）   \n\n\n**使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n\n\n##  网络层如何转发数据包  \n\n1.IP数据包组成：    \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包](http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)   \n\n![具体分析](http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)\n\n> 版本：显示TCP/IP协议的版本：IPV4、ipv6  \n\n> 标识：在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n> \n标志：占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是用分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n\n网络层传输最大的数据包大小为65535字节；   \n数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n数据链路层会将传过来的数据包再次分成片，分别加上Mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装，  \n\n\n![IP数据包分片举例](http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)    \n\n\n\n\n## IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n> 网络畅通的条件：  \n数据包有去有回（不同：要不没到要不没回来）   \n如果计算机不配置网关，就不能再各个网段中转发数据    \n\n\n### 静态路由协议\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n### 动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF**   \n\n\n\n\n",[[1533602351195,["gjx16@GJXAIOU",[[1,198," 88"]],[198,221],[201,201]]],[1533602352252,["gjx16@GJXAIOU",[[-1,199,"88"]],[201,201],[199,199]]],[1533602353296,["gjx16@GJXAIOU",[[1,199,"**"]],[199,199],[201,201]]],[1533602353325,["gjx16@GJXAIOU",[[1,201,"**"]],[201,201],[201,201]]],[1533602356195,["gjx16@GJXAIOU",[[-1,201,"**"]],[203,203],[201,201]]],[1533602361096,["gjx16@GJXAIOU",[[-1,223,"。  "]],[226,226],[223,223]]],[1533602364894,["gjx16@GJXAIOU",[[1,223,"。**"]],[223,223],[226,226]]],[1533602373724,["gjx16@GJXAIOU",[[1,144,"\n"]],[143,143],[144,144]]],[1533602375818,["gjx16@GJXAIOU",[[1,167,"\n"]],[166,166],[167,167]]],[1533602421042,["gjx16@GJXAIOU",[[1,233,"\n"]],[231,231],[232,232]]],[1533602421296,["gjx16@GJXAIOU",[[1,234,"\n"]],[232,232],[233,233]]],[1533602421395,["gjx16@GJXAIOU",[[1,235,"\n"]],[233,233],[234,234]]],[1533602421619,["gjx16@GJXAIOU",[[1,236,"\n"]],[234,234],[235,235]]],[1533602421755,["gjx16@GJXAIOU",[[1,237,"\n"]],[235,235],[236,236]]],[1533602422958,["gjx16@GJXAIOU",[[1,236,"---"]],[236,236],[239,239]]],[1533602424071,["gjx16@GJXAIOU",[[1,241,"\n"]],[239,239],[240,240]]],[1533602424859,["gjx16@GJXAIOU",[[1,242,"\n"]],[240,240],[241,241]]],[1533602424893,["gjx16@GJXAIOU",[[1,243,"\n"]],[241,241],[242,242]]],[1533602424921,["gjx16@GJXAIOU",[[1,244,"\n"]],[242,242],[243,243]]],[1533602424950,["gjx16@GJXAIOU",[[1,245,"\n"]],[243,243],[244,244]]],[1533602425856,["gjx16@GJXAIOU",[[1,246,"\n"]],[244,244],[245,245]]],[1533602460137,["gjx16@GJXAIOU",[[1,268,"\n"]],[268,268],[269,269]]],[1533602460959,["gjx16@GJXAIOU",[[1,269,"\n"]],[269,269],[270,270]]],[1533602463732,["gjx16@GJXAIOU",[[1,292,"  "]],[292,292],[294,294]]],[1533602464164,["gjx16@GJXAIOU",[[1,295,"\n"]],[294,294],[295,295]]],[1533602465362,["gjx16@GJXAIOU",[[1,296,"\n"]],[295,295],[296,296]]],[1533602882521,["gjx16@GJXAIOU",[[1,311,"\n"]],[310,310],[311,311]]],[1533602882714,["gjx16@GJXAIOU",[[1,312,"\n"]],[311,311],[312,312]]],[1533602882833,["gjx16@GJXAIOU",[[1,313,"\n"]],[312,312],[313,313]]],[1533602883379,["gjx16@GJXAIOU",[[1,314,"\n"]],[313,313],[314,314]]],[1533602884407,["gjx16@GJXAIOU",[[1,315,"\n"]],[314,314],[315,315]]],[1533602888596,["gjx16@GJXAIOU",[[1,312,"**地址解析协议** (**ARP**) 是通过解析[网路层](https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E8%B7%AF%E5%B1%82&action=edit&redlink=1)地址来找寻[数据链路层](https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82 \"数据链路层\")地址的一个在[网络协议包](https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8C%85&action=edit&redlink=1 \"网络协议包（页面不存在）\")中极其重要的[网络传输协议](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)。"]],[312,312],[775,775]]],[1533602905064,["gjx16@GJXAIOU",[[-1,312,"**"],[-1,320,"** (**"],[1,326," ("],[-1,329,"**"],[-1,338,"["],[-1,342,"](https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E8%B7%AF%E5%B1%82&action=edit&redlink=1)"],[-1,442,"["],[-1,448,"](https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82 \"数据链路层\")"],[-1,540,"["],[-1,546,"](https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8C%85&action=edit&redlink=1 \"网络协议包（页面不存在）\")"],[-1,680,"["],[-1,687,"](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)"]],[312,775],[367,367]]],[1533602910745,["gjx16@GJXAIOU",[[1,371,"\n"]],[367,367],[368,368]]],[1533602971930,["gjx16@GJXAIOU",[[1,368,"ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为乙太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n在IPv6中邻居发现协议 (NDP)用于代替地址解析协议。"]],[368,368],[604,604]]],[1533602975647,["gjx16@GJXAIOU",[[1,312,"- "]],[312,312],[314,314]]],[1533602979345,["gjx16@GJXAIOU",[[1,370,"- "]],[370,370],[372,372]]],[1533602984429,["gjx16@GJXAIOU",[[1,579,"- "]],[579,579],[581,581]]],[1533602987685,["gjx16@GJXAIOU",[[1,614,"- "]],[614,614],[616,616]]],[1533603310997,["gjx16@GJXAIOU",[[1,311,"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE"]],[311,311],[395,395]]],[1533603314214,["gjx16@GJXAIOU",[[-1,311,"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE"]],[395,395],[311,311]]],[1533603342480,["gjx16@GJXAIOU",[[1,311,"[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)"]],[311,311],[408,408]]],[1533603408117,["gjx16@GJXAIOU",[[-1,888,"%%"]],[890,890],[888,888]]],[1533603409597,["gjx16@GJXAIOU",[[1,888,"、、"]],[888,888],[890,890]]],[1533603411193,["gjx16@GJXAIOU",[[-1,888,"、、"]],[890,890],[888,888]]],[1533603413977,["gjx16@GJXAIOU",[[1,888,"// "]],[888,888],[891,891]]],[1533603418789,["gjx16@GJXAIOU",[[-1,888,"// "]],[891,891],[888,888]]],[1533603420384,["gjx16@GJXAIOU",[[1,888,"    "]],[888,888],[892,892]]],[1533603426474,["gjx16@GJXAIOU",[[-1,913,"%%"]],[915,915],[913,913]]],[1533603427755,["gjx16@GJXAIOU",[[1,913,"    "]],[913,913],[917,917]]],[1533603438104,["gjx16@GJXAIOU",[[-1,891," "]],[892,892],[891,891]]],[1533603440194,["gjx16@GJXAIOU",[[1,891,"    "]],[891,891],[895,895]]],[1533603446419,["gjx16@GJXAIOU",[[1,920,"    "]],[920,920],[924,924]]],[1533603447636,["gjx16@GJXAIOU",[[-1,923," "]],[924,924],[923,923]]],[1533603493293,["gjx16@GJXAIOU",[[-1,969,"---\n"]],[968,972],[968,968]]],[1533603500769,["gjx16@GJXAIOU",[[1,960,"- keyi "]],[960,960],[967,967]]],[1533603502571,["gjx16@GJXAIOU",[[-1,962,"keyi "]],[967,967],[962,962]]],[1533603506537,["gjx16@GJXAIOU",[[1,962,"可以用于"]],[962,962],[966,966]]],[1533603510521,["gjx16@GJXAIOU",[[-1,977,"\n\n\n\n\n"]],[975,980],[975,975]]],[1533603510750,["gjx16@GJXAIOU",[[-1,976,"\n"]],[975,975],[974,974]]],[1533603510884,["gjx16@GJXAIOU",[[-1,975,"\n"]],[974,974],[973,973]]],[1533603512259,["gjx16@GJXAIOU",[[1,973,"、"]],[973,973],[974,974]]],[1533603513288,["gjx16@GJXAIOU",[[-1,973,"、"]],[974,974],[973,973]]],[1533603513559,["gjx16@GJXAIOU",[[1,974,"- \n"]],[973,973],[976,976]]],[1533603515277,["gjx16@GJXAIOU",[[-1,974,"- "]],[976,976],[974,974]]],[1533603515643,["gjx16@GJXAIOU",[[1,976,"\n"]],[974,974],[975,975]]],[1533603518098,["gjx16@GJXAIOU",[[-1,1016,"\n"]],[1013,1013],[1012,1012]]],[1533603518271,["gjx16@GJXAIOU",[[-1,1015,"\n"]],[1012,1012],[1011,1011]]],[1533603518452,["gjx16@GJXAIOU",[[-1,1014,"\n"]],[1011,1011],[1010,1010]]],[1533603519003,["gjx16@GJXAIOU",[[-1,1013,"\n"]],[1010,1010],[1009,1009]]],[1533603519725,["gjx16@GJXAIOU",[[-1,1012,"\n"]],[1009,1009],[1008,1008]]],[1533603648064,["gjx16@GJXAIOU",[[-1,1083,"> "]],[1085,1085],[1083,1083]]],[1533603648632,["gjx16@GJXAIOU",[[-1,1082,"\n"]],[1083,1083],[1082,1082]]],[1533603650710,["gjx16@GJXAIOU",[[1,1082,"\n"]],[1082,1082],[1083,1083]]],[1533603652112,["gjx16@GJXAIOU",[[1,1083,"\n"]],[1083,1083],[1084,1084]]],[1533603665221,["gjx16@GJXAIOU",[[1,1084,"    "]],[1084,1084],[1088,1088]]],[1533603680368,["gjx16@GJXAIOU",[[1,1121,"\n    "]],[1121,1121],[1126,1126]]],[1533603687658,["gjx16@GJXAIOU",[[-1,1126," %"]],[1127,1127],[1126,1126]]],[1533603696574,["gjx16@GJXAIOU",[[-1,1139,"没"]],[1140,1140],[1139,1139]]],[1533603698701,["gjx16@GJXAIOU",[[1,1139,"每"]],[1139,1139],[1140,1140]]],[1533603990464,["gjx16@GJXAIOU",[[1,1180,"    \n"]],[1179,1179],[1184,1184]]],[1533604000237,["gjx16@GJXAIOU",[[-1,1185,"%"]],[1186,1186],[1185,1185]]],[1533604000493,["gjx16@GJXAIOU",[[-1,1184,"\n"]],[1185,1185],[1184,1184]]],[1533604011411,["gjx16@GJXAIOU",[[1,1088,"- "]],[1088,1088],[1090,1090]]],[1533604016359,["gjx16@GJXAIOU",[[-1,1088,"- "]],[1090,1090],[1088,1088]]],[1533604020283,["gjx16@GJXAIOU",[[1,1126,"\n    "]],[1121,1121],[1126,1126]]],[1533604022772,["gjx16@GJXAIOU",[[1,1182,"\n    "]],[1182,1182],[1187,1187]]],[1533604414580,["gjx16@GJXAIOU",[[1,1835,"![IP数据包]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n"]],[1835,1835],[1889,1889]]],[1533604419417,["gjx16@GJXAIOU",[[-1,1890,"![IP数据包](http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)   "]],[1890,2008],[1890,1890]]],[1533604431987,["gjx16@GJXAIOU",[[-1,1892,"![具体分析](http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)"]],[1892,2006],[1892,1892]]],[1533604446160,["gjx16@GJXAIOU",[[1,1892,"![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n"]],[1892,1892],[1966,1966]]],[1533604465811,["gjx16@GJXAIOU",[[-1,1968,"> "]],[1970,1970],[1968,1968]]],[1533604469893,["gjx16@GJXAIOU",[[-1,1998,"> "]],[2000,2000],[1998,1998]]],[1533604473641,["gjx16@GJXAIOU",[[-1,2063,"> "]],[2065,2065],[2063,2063]]],[1533604473673,["gjx16@GJXAIOU",[[-1,2063,"\n"]],[2063,2063],[2062,2062]]],[1533604527742,["gjx16@GJXAIOU",[[-1,2096,"用"]],[2097,2097],[2096,2096]]],[1533604529261,["gjx16@GJXAIOU",[[1,2096,"有"]],[2096,2096],[2097,2097]]],[1533604580274,["gjx16@GJXAIOU",[[-1,2323,"http://note.youdao.com/noteshare?id=583525b0a3fcc950f9c7b56d82b5b665&sub=8688F2322CB247EE823EFF97BFD29803)    "],[1,2433,"$resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n"]],[2309,2433],[2404,2404]]],[1533604613796,["gjx16@GJXAIOU",[[-1,2488,"> "]],[2490,2490],[2488,2488]]],[1533604627092,["gjx16@GJXAIOU",[[-1,2508,"同"]],[2509,2509],[2508,2508]]],[1533604629787,["gjx16@GJXAIOU",[[1,2508,"通"]],[2508,2508],[2509,2509]]],[1533604639579,["gjx16@GJXAIOU",[[-1,2538,"再"]],[2539,2539],[2538,2538]]],[1533604642724,["gjx16@GJXAIOU",[[1,2538,"在"]],[2538,2538],[2539,2539]]]],null,"gjx16@GJXAIOU"],["99b51558-e618-4d86-aab1-feb3077c2a81",1535111425942,"## 网络层提供\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n![数据包在网络中的传输]()  \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 网络层协议  \n**网络层协议：**\n\nARP   IP ICMP  IGMP     \n\n\n### 1.ARP协议  \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为乙太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- 在IPv6中邻居发现协议 (NDP)用于代替地址解析协议。\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n       扫描本网段的MAC地址：ARP -a  \n       IP地址与MAC地址绑定:arp -s ip地址 Mac地址    \n\n\n- 可以用于ARP欺骗  \n\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n1.ping 局域网，网络延迟应该小于10ms   \n2. ping /?  得到所有ping命令    \n3.ping 地址 -t     表示一直ping下去  \n4.ping -l  200     表示用数据包为200字节的数据包来ping   \n5.发包的时候指定TTL：ping  地址 -i TTL值   可以跟踪数据包经过的路由器  \n6.pathping可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n**区别**   \n点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n（点到点可以调整进度，但是多播无法调整进度）   \n\n\n**使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n\n\n##  网络层如何转发数据包  \n\n1.IP数据包组成：    \n首部（固定部分（20个字节）和可变部分）+数据   \n![IP数据包]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n版本：显示TCP/IP协议的版本：IPV4、ipv6  \n\n标识：在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n标志：占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n\n网络层传输最大的数据包大小为65535字节；   \n数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n数据链路层会将传过来的数据包再次分成片，分别加上Mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装，  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n网络畅通的条件：  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n\n### 静态路由协议\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n### 动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF**   \n\n\n\n\n",[[1535111389660,["gjx16@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1535111398496,["gjx16@GJXAIOU",[[1,0,"# 网络层"]],[0,0],[5,5]]],[1535111401084,["gjx16@GJXAIOU",[[1,6,"\n"]],[5,5],[6,6]]],[1535111406387,["gjx16@GJXAIOU",[[1,10,"一、"]],[10,10],[12,12]]],[1535111412733,["gjx16@GJXAIOU",[[1,259,"二、"]],[259,259],[261,261]]],[1535111429856,["gjx16@GJXAIOU",[[1,1790,"三、"]],[1790,1790],[1792,1792]]],[1535111443851,["gjx16@GJXAIOU",[[1,2425,"四、"]],[2425,2425],[2427,2427]]],[1535111449591,["gjx16@GJXAIOU",[[1,2574,"1."]],[2574,2574],[2576,2576]]],[1535111452472,["gjx16@GJXAIOU",[[1,2641,"2."]],[2641,2641],[2643,2643]]],[1535111461307,["gjx16@GJXAIOU",[[1,6,"@toc"]],[6,6],[10,10]]],[1535111491937,["gjx16@GJXAIOU",[[-1,19,"提供"]],[21,21],[19,19]]],[1535111493980,["gjx16@GJXAIOU",[[1,19,"gongn"]],[19,19],[24,24]]],[1535111497079,["gjx16@GJXAIOU",[[-1,19,"gongn"]],[24,24],[19,19]]],[1535111506694,["gjx16@GJXAIOU",[[1,19,"功能"]],[19,19],[21,21]]],[1535111511490,["gjx16@GJXAIOU",[[-1,248,"\n"]],[248,248],[247,247]]],[1535111511625,["gjx16@GJXAIOU",[[-1,247,"\n"]],[247,247],[246,246]]],[1535111511764,["gjx16@GJXAIOU",[[-1,246,"\n"]],[246,246],[245,245]]],[1535111511941,["gjx16@GJXAIOU",[[-1,245,"\n"]],[245,245],[244,244]]],[1535111516046,["gjx16@GJXAIOU",[[-1,255,"\n"]],[255,255],[254,254]]],[1535111516191,["gjx16@GJXAIOU",[[-1,254,"\n"]],[254,254],[253,253]]],[1535111516369,["gjx16@GJXAIOU",[[-1,253,"\n"]],[253,253],[252,252]]],[1535111516570,["gjx16@GJXAIOU",[[-1,252,"\n"]],[252,252],[251,251]]],[1535111519876,["gjx16@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1535111520015,["gjx16@GJXAIOU",[[1,12,"\n"]],[11,11],[12,12]]],[1535111520146,["gjx16@GJXAIOU",[[1,13,"\n"]],[12,12],[13,13]]],[1535111520300,["gjx16@GJXAIOU",[[1,14,"\n"]],[13,13],[14,14]]],[1535111520416,["gjx16@GJXAIOU",[[1,15,"\n"]],[14,14],[15,15]]],[1535111521768,["gjx16@GJXAIOU",[[-1,15,"\n"]],[15,15],[14,14]]],[1535111521906,["gjx16@GJXAIOU",[[-1,14,"\n"]],[14,14],[13,13]]],[1535111524393,["gjx16@GJXAIOU",[[1,6,"\n"]],[6,6],[7,7]]],[1535111528243,["gjx16@GJXAIOU",[[-1,249,"---"]],[252,252],[249,249]]],[1535111528706,["gjx16@GJXAIOU",[[-1,252,"\n"]],[249,249],[248,248]]],[1535111529123,["gjx16@GJXAIOU",[[-1,251,"\n"]],[248,248],[247,247]]],[1535111529447,["gjx16@GJXAIOU",[[-1,250,"\n"]],[247,247],[246,246]]],[1535111568232,["gjx16@GJXAIOU",[[1,474,"\n- "]],[471,471],[474,474]]],[1535111570471,["gjx16@GJXAIOU",[[-1,472,"- "]],[474,474],[472,472]]],[1535111682083,["gjx16@GJXAIOU",[[-1,434,"网路"]],[436,436],[434,434]]],[1535111685274,["gjx16@GJXAIOU",[[1,434,"网络"]],[434,434],[436,436]]],[1535111694005,["gjx16@GJXAIOU",[[1,430,"**"],[1,449,"**"]],[430,449],[430,453]]],[1535111713893,["gjx16@GJXAIOU",[[-1,510,"乙太"]],[512,512],[510,510]]],[1535111718320,["gjx16@GJXAIOU",[[1,510,"以太"]],[510,510],[512,512]]],[1535111766137,["gjx16@GJXAIOU",[[1,688,"**"],[1,716,"**"]],[688,716],[688,720]]],[1535111822412,["gjx16@GJXAIOU",[[1,721,"[link title](https://)"]],[721,721],[722,732]]],[1535111829475,["gjx16@GJXAIOU",[[-1,722,"link title"],[1,732,"NDP协议"]],[722,722],[727,727]]],[1535111843197,["gjx16@GJXAIOU",[[1,737,"baike.baidu.com/item/NDP"]],[729,737],[761,761]]],[1535111851308,["gjx16@GJXAIOU",[[1,721,"\n"]],[721,721],[722,722]]],[1535111891167,["gjx16@GJXAIOU",[[-1,946,"     "]],[951,951],[946,946]]],[1535111895221,["gjx16@GJXAIOU",[[-1,969,"     "]],[974,974],[969,969]]],[1535111900182,["gjx16@GJXAIOU",[[-1,958,"ARP -a  "]],[966,966],[958,958]]],[1535111902226,["gjx16@GJXAIOU",[[1,958,"`"]],[958,958],[959,959]]],[1535111905663,["gjx16@GJXAIOU",[[1,959,"`ARP"]],[959,959],[962,962]]],[1535111966015,[null,[[-1,959,"`"],[1,963,"`"]],[959,959],[964,964]]],[1535111966015,[null,[[1,959,"`"],[-1,962,"`"]],[964,964],[959,959]]],[1535111909235,["gjx16@GJXAIOU",[[-1,959,"ARP"]],[962,962],[959,959]]],[1535111910621,["gjx16@GJXAIOU",[[1,959,"aro"]],[959,959],[962,962]]],[1535111911588,["gjx16@GJXAIOU",[[-1,961,"o"]],[962,962],[961,961]]],[1535111913033,["gjx16@GJXAIOU",[[1,961,"p -a"]],[961,961],[965,965]]],[1535111917689,["gjx16@GJXAIOU",[[1,982,"`"]],[982,982],[983,983]]],[1535111922975,["gjx16@GJXAIOU",[[1,983,"``arp 0s"]],[983,983],[990,990]]],[1535111924031,["gjx16@GJXAIOU",[[-1,988,"0s"]],[990,990],[988,988]]],[1535111939465,["gjx16@GJXAIOU",[[1,988,"-s ip地址 mac地址"]],[988,988],[1001,1001]]],[1535111944434,["gjx16@GJXAIOU",[[-1,1002,"arp -s ip地址 Mac地址    "]],[1002,1023],[1002,1002]]],[1535111946957,["gjx16@GJXAIOU",[[-1,983,"`"]],[983,983],[982,982]]],[1535111955739,["gjx16@GJXAIOU",[[1,945,"-"]],[945,945],[946,946]]],[1535112626089,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"]],[966,966],[1003,1003]]],[1535112626089,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"]],[1003,1003],[966,966]]],[1535112621453,["gjx16@GJXAIOU",[[-1,1327,". "]],[1329,1329],[1327,1327]]],[1535112623054,["gjx16@GJXAIOU",[[1,1327,"."]],[1327,1327],[1328,1328]]],[1535112686101,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"]],[966,966],[1003,1003]]],[1535112686101,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"]],[1003,1003],[966,966]]],[1535112630281,["gjx16@GJXAIOU",[[1,1301,"·"]],[1301,1301],[1302,1302]]],[1535112631967,["gjx16@GJXAIOU",[[-1,1301,"·"]],[1302,1302],[1301,1301]]],[1535112632833,["gjx16@GJXAIOU",[[1,1301,"`"]],[1301,1301],[1302,1302]]],[1535112641970,["gjx16@GJXAIOU",[[1,1302,"`ping 局域网"]],[1302,1302],[1310,1310]]],[1535112647263,["gjx16@GJXAIOU",[[-1,1311,"ping 局域网"]],[1319,1319],[1311,1311]]],[1535112806123,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"]],[966,966],[1312,1312]]],[1535112806123,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"]],[1312,1312],[966,966]]],[1535112776978,["gjx16@GJXAIOU",[[1,1330,"·"]],[1330,1330],[1331,1331]]],[1535112778331,["gjx16@GJXAIOU",[[-1,1330,"·"]],[1331,1331],[1330,1330]]],[1535112778958,["gjx16@GJXAIOU",[[1,1330,"`"]],[1330,1330],[1331,1331]]],[1535112785946,["gjx16@GJXAIOU",[[1,1331,"`ping /?"]],[1331,1331],[1338,1338]]],[1535112791787,["gjx16@GJXAIOU",[[-1,1339,"ping /?  "]],[1348,1348],[1339,1339]]],[1535112797200,["gjx16@GJXAIOU",[[1,1356,"`"]],[1356,1356],[1357,1357]]],[1535112803823,["gjx16@GJXAIOU",[[1,1357,"`ping 地址 "]],[1357,1357],[1365,1365]]],[1535112866122,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1330,"`"],[1,1339,"`"],[-1,1357,"`"],[1,1366,"`"]],[966,966],[1367,1367]]],[1535112866122,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1330,"`"],[-1,1338,"`"],[1,1357,"`"],[-1,1365,"`"]],[1367,1367],[966,966]]],[1535112806795,["gjx16@GJXAIOU",[[1,1365,"T"]],[1365,1365],[1366,1366]]],[1535112808307,["gjx16@GJXAIOU",[[-1,1365,"T"]],[1366,1366],[1365,1365]]],[1535112810917,["gjx16@GJXAIOU",[[1,1365,"-t"]],[1365,1365],[1367,1367]]],[1535112816550,["gjx16@GJXAIOU",[[-1,1368,"ping 地址 -t "]],[1379,1379],[1368,1368]]],[1535112819916,["gjx16@GJXAIOU",[[-1,1311,"，"]],[1312,1312],[1311,1311]]],[1535112820688,["gjx16@GJXAIOU",[[1,1311,":"]],[1311,1311],[1312,1312]]],[1535112824052,["gjx16@GJXAIOU",[[-1,1311,":"]],[1312,1312],[1311,1311]]],[1535112835507,["gjx16@GJXAIOU",[[1,1386,"·"]],[1386,1386],[1387,1387]]],[1535112836817,["gjx16@GJXAIOU",[[-1,1386,"·"]],[1387,1387],[1386,1386]]],[1535112837340,["gjx16@GJXAIOU",[[1,1386,"`"]],[1386,1386],[1387,1387]]],[1535112842548,["gjx16@GJXAIOU",[[1,1387,"`ping -1"]],[1387,1387],[1394,1394]]],[1535112844262,["gjx16@GJXAIOU",[[-1,1393,"1"]],[1394,1394],[1393,1393]]],[1535112850622,["gjx16@GJXAIOU",[[1,1393,"l 200"]],[1393,1393],[1398,1398]]],[1535112856932,["gjx16@GJXAIOU",[[-1,1399,"ping -l  200 "]],[1412,1412],[1399,1399]]],[1535112858793,["gjx16@GJXAIOU",[[-1,1399,"  "]],[1401,1401],[1399,1399]]],[1535113046139,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1329,"`"],[1,1338,"`"],[-1,1356,"`"],[1,1364," "],[-1,1366," "],[1,1367,"`"],[-1,1387,"`"],[1,1393,"-"],[-1,1398,"1"],[1,1399,"`"]],[966,966],[1400,1400]]],[1535113046139,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1329,"`"],[-1,1337,"`"],[1,1356,"`"],[-1,1363," "],[1,1366," "],[-1,1366,"`"],[1,1387,"`"],[-1,1392,"-"],[1,1398,"1"],[-1,1398,"`"]],[1400,1400],[966,966]]],[1535113040990,["gjx16@GJXAIOU",[[1,1439,"`"]],[1439,1439],[1440,1440]]],[1535113041020,["gjx16@GJXAIOU",[[1,1440,"`"]],[1440,1440],[1440,1440]]],[1535113042885,["gjx16@GJXAIOU",[[-1,1440,"`"]],[1441,1441],[1440,1440]]],[1535113106150,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1329,"`"],[1,1338,"`"],[-1,1356,"`"],[1,1364," "],[-1,1366," "],[1,1367,"`"],[-1,1387,"`"],[1,1393,"-"],[-1,1398,"1"],[1,1399,"`"]],[966,966],[1400,1400]]],[1535113106150,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1329,"`"],[-1,1337,"`"],[1,1356,"`"],[-1,1363," "],[1,1366," "],[-1,1366,"`"],[1,1387,"`"],[-1,1392,"-"],[1,1398,"1"],[-1,1398,"`"]],[1400,1400],[966,966]]],[1535113046463,["gjx16@GJXAIOU",[[1,1457,"`"]],[1457,1457],[1458,1458]]],[1535113046494,["gjx16@GJXAIOU",[[1,1458,"`"]],[1458,1458],[1458,1458]]],[1535113047901,["gjx16@GJXAIOU",[[-1,1458,"`"]],[1458,1458],[1457,1457]]],[1535113058812,["gjx16@GJXAIOU",[[1,1478,"`"]],[1478,1478],[1479,1479]]],[1535113058840,["gjx16@GJXAIOU",[[1,1479,"`"]],[1479,1479],[1479,1479]]],[1535113059856,["gjx16@GJXAIOU",[[-1,1479,"`"]],[1479,1479],[1478,1478]]],[1535113062327,["gjx16@GJXAIOU",[[1,1487,"`"]],[1487,1487],[1488,1488]]],[1535113062356,["gjx16@GJXAIOU",[[1,1488,"`"]],[1488,1488],[1488,1488]]],[1535113064380,["gjx16@GJXAIOU",[[-1,1488,"`"]],[1489,1489],[1488,1488]]],[1535113097157,["gjx16@GJXAIOU",[[-1,1299,"1."]],[1301,1301],[1299,1299]]],[1535113099834,["gjx16@GJXAIOU",[[1,1299,"- "]],[1299,1299],[1301,1301]]],[1535113103250,["gjx16@GJXAIOU",[[-1,1327,"2."]],[1329,1329],[1327,1327]]],[1535113104381,["gjx16@GJXAIOU",[[1,1327,"- "]],[1327,1327],[1329,1329]]],[1535113166164,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1329,"`"],[1,1338,"`"],[-1,1356,"`"],[1,1364," "],[-1,1366," "],[1,1367,"`"],[-1,1387,"`"],[1,1393,"-"],[-1,1398,"1"],[1,1399,"`"]],[966,966],[1400,1400]]],[1535113166164,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1329,"`"],[-1,1337,"`"],[1,1356,"`"],[-1,1363," "],[1,1366," "],[-1,1366,"`"],[1,1387,"`"],[-1,1392,"-"],[1,1398,"1"],[-1,1398,"`"]],[1400,1400],[966,966]]],[1535113106611,["gjx16@GJXAIOU",[[-1,1353,"3."]],[1355,1355],[1353,1353]]],[1535113107698,["gjx16@GJXAIOU",[[1,1353,"- "]],[1353,1353],[1355,1355]]],[1535113110059,["gjx16@GJXAIOU",[[-1,1384,"4."]],[1386,1386],[1384,1384]]],[1535113111262,["gjx16@GJXAIOU",[[1,1384,"- "]],[1384,1384],[1386,1386]]],[1535113114320,["gjx16@GJXAIOU",[[-1,1426,"5."]],[1428,1428],[1426,1426]]],[1535113115449,["gjx16@GJXAIOU",[[1,1426,"- "]],[1426,1426],[1428,1428]]],[1535113118148,["gjx16@GJXAIOU",[[-1,1476,"6."]],[1478,1478],[1476,1476]]],[1535113119355,["gjx16@GJXAIOU",[[1,1476,"- "]],[1476,1476],[1478,1478]]],[1535113406178,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1329,"`"],[1,1338,"`"],[-1,1356,"`"],[1,1364," "],[-1,1366," "],[1,1367,"`"],[-1,1387,"`"],[1,1393,"-"],[-1,1398,"1"],[1,1399,"`"]],[966,966],[1400,1400]]],[1535113406178,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1329,"`"],[-1,1337,"`"],[1,1356,"`"],[-1,1363," "],[1,1366," "],[-1,1366,"`"],[1,1387,"`"],[-1,1392,"-"],[1,1398,"1"],[-1,1398,"`"]],[1400,1400],[966,966]]],[1535113393417,["gjx16@GJXAIOU",[[1,1552,"()"]],[1552,1552],[1554,1554]]],[1535113395480,["gjx16@GJXAIOU",[[1,1553,"1."]],[1553,1553],[1555,1555]]],[1535113405306,["gjx16@GJXAIOU",[[-1,1552,"(1.)"]],[1555,1555],[1552,1552]]],[1535113466197,[null,[[-1,966,"P"],[1,967,"`"],[-1,983,"`"],[1,988," "],[-1,1001,"s"],[1,1002,"`"],[-1,1302,"`"],[1,1311,"`"],[-1,1329,"`"],[1,1338,"`"],[-1,1356,"`"],[1,1364," "],[-1,1366," "],[1,1367,"`"],[-1,1387,"`"],[1,1393,"-"],[-1,1398,"1"],[1,1399,"`"]],[966,966],[1400,1400]]],[1535113466197,[null,[[1,966,"P"],[-1,966,"`"],[1,983,"`"],[-1,987," "],[1,1001,"s"],[-1,1001,"`"],[1,1302,"`"],[-1,1310,"`"],[1,1329,"`"],[-1,1337,"`"],[1,1356,"`"],[-1,1363," "],[1,1366," "],[-1,1366,"`"],[1,1387,"`"],[-1,1392,"-"],[1,1398,"1"],[-1,1398,"`"]],[1400,1400],[966,966]]],[1535113408117,["gjx16@GJXAIOU",[[1,1560,"- "]],[1560,1560],[1562,1562]]],[1535113411135,["gjx16@GJXAIOU",[[1,1596,"- "]],[1596,1596],[1598,1598]]],[1535113414012,["gjx16@GJXAIOU",[[1,1657,"- "]],[1657,1657],[1659,1659]]],[1535113419297,["gjx16@GJXAIOU",[[1,1720,"  "]],[1720,1720],[1722,1722]]],[1535113423793,["gjx16@GJXAIOU",[[-1,1721," "]],[1722,1722],[1721,1721]]],[1535113428819,["gjx16@GJXAIOU",[[1,1721,"  "]],[1721,1721],[1723,1723]]]],null,"gjx16@GJXAIOU"],["8837f0ad-04d9-4d27-9fff-cebd07869db0",1535159418533,"# 网络层\n\n@toc\n\n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n![数据包在网络中的传输]()  \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\nARP   IP ICMP  IGMP     \n\n\n### 1.ARP协议  \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n**区别**   \n- 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n- 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n- 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n   （点到点可以调整进度，但是多播无法调整进度）   \n\n\n**使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n1.IP数据包组成：    \n首部（固定部分（20个字节）和可变部分）+数据   \n![IP数据包]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n版本：显示TCP/IP协议的版本：IPV4、ipv6  \n\n标识：在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n标志：占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n\n网络层传输最大的数据包大小为65535字节；   \n数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n数据链路层会将传过来的数据包再次分成片，分别加上Mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装，  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n网络畅通的条件：  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n\n### 1.静态路由协议\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n### 2.动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF**   \n\n\n\n\n",[[1535159394523,["gjx16@GJXAIOU",[[-1,1950,"\n"]],[1949,1949],[1948,1948]]],[1535159394685,["gjx16@GJXAIOU",[[-1,1949,"\n"]],[1948,1948],[1947,1947]]],[1535159398855,["gjx16@GJXAIOU",[[1,1852,"**"],[1,1863,"**"]],[1852,1863],[1852,1867]]],[1535159403169,["gjx16@GJXAIOU",[[-1,1864," "]],[1865,1865],[1864,1864]]],[1535159416553,["gjx16@GJXAIOU",[[1,1550,"- "]],[1550,1550],[1552,1552]]],[1535159419278,["gjx16@GJXAIOU",[[1,1562,"  "]],[1562,1562],[1564,1564]]],[1535159423487,["gjx16@GJXAIOU",[[1,1600,"  "]],[1600,1600],[1602,1602]]],[1535159429361,["gjx16@GJXAIOU",[[1,1663,"  "]],[1663,1663],[1665,1665]]],[1535159432160,["gjx16@GJXAIOU",[[1,1731," "]],[1731,1731],[1732,1732]]],[1535159436866,["gjx16@GJXAIOU",[[-1,1730,"  "]],[1732,1732],[1730,1730]]],[1535159442176,["gjx16@GJXAIOU",[[1,1758,"- "]],[1758,1758],[1760,1760]]],[1535159456270,["gjx16@GJXAIOU",[[1,1961,"\n"]],[1960,1960],[1961,1961]]],[1535159458310,["gjx16@GJXAIOU",[[1,1962,"\n"]],[1961,1961],[1962,1962]]],[1535159458893,["gjx16@GJXAIOU",[[1,1963,"\n"]],[1962,1962],[1963,1963]]],[1535159459378,["gjx16@GJXAIOU",[[1,1964,"\n"]],[1963,1963],[1964,1964]]],[1535159461165,["gjx16@GJXAIOU",[[-1,1964,"\n"]],[1964,1964],[1963,1963]]],[1535159461350,["gjx16@GJXAIOU",[[-1,1963,"\n"]],[1963,1963],[1962,1962]]],[1535159461550,["gjx16@GJXAIOU",[[-1,1962,"\n"]],[1962,1962],[1961,1961]]],[1535159461898,["gjx16@GJXAIOU",[[-1,1961,"\n"]],[1961,1961],[1960,1960]]],[1535159464489,["gjx16@GJXAIOU",[[1,1906,"\n"]],[1905,1905],[1906,1906]]],[1535159477809,["gjx16@GJXAIOU",[[1,1914,"构成"]],[1914,1914],[1916,1916]]],[1535159636502,["gjx16@GJXAIOU",[[1,2040,"**"],[1,2043,"**"]],[2040,2043],[2040,2047]]],[1535159639930,["gjx16@GJXAIOU",[[-1,2040,"**版本：**"]],[2040,2047],[2040,2040]]],[1535159644553,["gjx16@GJXAIOU",[[1,2040,"**版本：**"]],[2040,2040],[2040,2047]]],[1535159647350,["gjx16@GJXAIOU",[[1,2047," "]],[2040,2047],[2048,2048]]],[1535159663403,["gjx16@GJXAIOU",[[1,2075,"**"],[1,2078,"**"]],[2075,2078],[2075,2082]]],[1535159666097,["gjx16@GJXAIOU",[[1,2082," "]],[2075,2082],[2083,2083]]],[1535159675771,["gjx16@GJXAIOU",[[1,2145,"**"],[1,2148,"**"]],[2145,2148],[2145,2152]]],[1535159679039,["gjx16@GJXAIOU",[[1,2152," "]],[2145,2152],[2153,2153]]],[1535159856353,["gjx16@GJXAIOU",[[-1,2391,"，"]],[2392,2392],[2391,2391]]],[1535159856829,["gjx16@GJXAIOU",[[1,2391,"。"]],[2391,2391],[2392,2392]]],[1535159862120,["gjx16@GJXAIOU",[[-1,2334,"M"]],[2335,2335],[2334,2334]]],[1535159863439,["gjx16@GJXAIOU",[[1,2334,"m"]],[2334,2334],[2335,2335]]],[1535159892232,["gjx16@GJXAIOU",[[1,2243,"**"]],[2243,2243],[2245,2245]]],[1535159895568,["gjx16@GJXAIOU",[[1,2245,"**2.shu"]],[2245,2245],[2250,2250]]],[1535159896885,["gjx16@GJXAIOU",[[-1,2247,"shu"]],[2250,2250],[2247,2247]]],[1535159957549,[null,[[1,2245,"2."],[-1,2247,"hu"]],[2245,2245],[2247,2247]]],[1535159957549,[null,[[-1,2245,"2."],[1,2249,"hu"]],[2247,2247],[2245,2245]]],[1535159915067,["gjx16@GJXAIOU",[[1,2247,"数据包大小与分片："]],[2247,2247],[2256,2256]]],[1535159919812,["gjx16@GJXAIOU",[[1,2259,"- "]],[2259,2259],[2261,2261]]],[1535159924140,["gjx16@GJXAIOU",[[1,2287,"- "]],[2287,2287],[2289,2289]]],[1535159926651,["gjx16@GJXAIOU",[[1,2329,"- "]],[2329,2329],[2331,2331]]],[1535160017566,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535160017566,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535159983259,["gjx16@GJXAIOU",[[1,2598,"**"],[1,2606,"**"]],[2598,2606],[2598,2610]]],[1535159995351,["gjx16@GJXAIOU",[[1,2682,"\n"]],[2681,2681],[2682,2682]]],[1535159998154,["gjx16@GJXAIOU",[[1,2737,"\n"]],[2736,2736],[2737,2737]]],[1535159998693,["gjx16@GJXAIOU",[[1,2738,"\n"]],[2737,2737],[2738,2738]]],[1535160077553,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535160077553,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535160073958,["gjx16@GJXAIOU",[[1,2895,"[link title](https://)"]],[2895,2895],[2896,2906]]],[1535160137570,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535160137570,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535160085513,["gjx16@GJXAIOU",[[-1,2896,"link title"],[1,2906,"OSPF"]],[2896,2906],[2900,2900]]],[1535160091321,["gjx16@GJXAIOU",[[1,2910,"zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88"]],[2902,2910],[3013,3013]]],[1535160096410,["gjx16@GJXAIOU",[[1,2895,"\n"]],[2895,2895],[2896,2896]]],[1535163197948,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535163197948,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535163189883,["gjx16@GJXAIOU",[[1,2890,":"]],[2890,2890],[2891,2891]]],[1535163194367,["gjx16@GJXAIOU",[[1,2893,"KAI"]],[2893,2893],[2896,2896]]],[1535163195507,["gjx16@GJXAIOU",[[-1,2893,"KAI"]],[2896,2896],[2893,2893]]],[1535163197529,["gjx16@GJXAIOU",[[1,2893,"k"]],[2893,2893],[2894,2894]]],[1535163257951,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535163257951,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535163198054,["gjx16@GJXAIOU",[[1,2894,"a"]],[2894,2894],[2895,2895]]],[1535163198700,["gjx16@GJXAIOU",[[-1,2893,"ka"]],[2895,2895],[2893,2893]]],[1535163230152,["gjx16@GJXAIOU",[[1,2893,"开放式最短路径优先"]],[2893,2893],[2902,2902]]],[1535163256309,["gjx16@GJXAIOU",[[1,3026,"是对链路状态路由协议的一种实现，"]],[3026,3026],[3042,3042]]],[1535163317970,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535163317970,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535163267015,["gjx16@GJXAIOU",[[1,3042,"隶属于内网"]],[3042,3042],[3047,3047]]],[1535163268285,["gjx16@GJXAIOU",[[-1,3045,"内网"]],[3047,3047],[3045,3045]]],[1535163279427,["gjx16@GJXAIOU",[[1,3045,"内部网关协议（）"]],[3045,3045],[3053,3053]]],[1535163283511,["gjx16@GJXAIOU",[[1,3052,"IGP"]],[3052,3052],[3055,3055]]],[1535163294572,["gjx16@GJXAIOU",[[1,3056,"，采用"]],[3056,3056],[3059,3059]]],[1535163377987,[null,[[-1,2245,"**"],[1,2247,"2."],[-1,2256,"hu"],[1,2258,"**"]],[2245,2245],[2260,2260]]],[1535163377987,[null,[[1,2245,"**"],[-1,2245,"2."],[1,2256,"hu"],[-1,2256,"**"]],[2260,2260],[2245,2245]]],[1535163348399,["gjx16@GJXAIOU",[[1,3059,"戴克斯特拉算法计算最短路径数"]],[3059,3059],[3073,3073]]],[1535163349133,["gjx16@GJXAIOU",[[-1,3072,"数"]],[3073,3073],[3072,3072]]],[1535163354454,["gjx16@GJXAIOU",[[1,3072,"树。"]],[3072,3072],[3074,3074]]]],null,"gjx16@GJXAIOU"],["b8880ee5-84c0-451e-876e-fdf15d366c9c",1548316622369,"# 网络层\n\n@toc\n\n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n![数据包在网络中的传输]()  \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\nARP   IP ICMP  IGMP     \n\n\n### 1.ARP协议  \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n\n### 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n\n### 2.动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n\n\n",[[1548316587609,["gjx16@GJXAIOU",[[-1,1840,"\n"]],[1839,1839],[1838,1838]]],[1548316587897,["gjx16@GJXAIOU",[[-1,1839,"\n"]],[1838,1838],[1837,1837]]]],null,"gjx16@GJXAIOU"],["a8608eab-5764-4e65-afa7-c2f31226faa6",1550574876175,"# 网络层\n\n@toc\n\n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n![数据包在网络中的传输]()  \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\nARP   IP ICMP  IGMP     \n\n\n### 1.ARP协议  \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n\n### 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n\n### 2.动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n\n\n",[[1550574868663,["gjx16@GJXAIOU",[[-1,111,"![数据包在网络中的传输]()  "]],[111,128],[111,111]]],[1550575548246,["gjx16@GJXAIOU",[[-1,262,"  IP "]],[261,266],[261,261]]],[1550575551706,["gjx16@GJXAIOU",[[1,258,"   IP  "]],[258,258],[265,265]]],[1550575555465,["gjx16@GJXAIOU",[[1,284,"（）"]],[284,284],[286,286]]],[1550575571234,["gjx16@GJXAIOU",[[1,285,"后三个主要和IP协议配套使用\n   "]],[285,285],[303,303]]],[1550575573650,["gjx16@GJXAIOU",[[-1,300,"   "]],[303,303],[300,300]]],[1550575574673,["gjx16@GJXAIOU",[[-1,299,"\n"]],[300,300],[299,299]]],[1550575584689,["gjx16@GJXAIOU",[[1,301,"   \n"]],[300,300],[304,304]]],[1550575592717,["gjx16@GJXAIOU",[[1,304,"- IP：网际协议"]],[304,304],[313,313]]],[1550575593228,["gjx16@GJXAIOU",[[1,314,"   - \n"]],[313,313],[319,319]]],[1550575605384,["gjx16@GJXAIOU",[[1,319,"APR： 地址解析协议"]],[319,319],[330,330]]],[1550575605817,["gjx16@GJXAIOU",[[1,331,"   - \n"]],[330,330],[336,336]]],[1550575619953,["gjx16@GJXAIOU",[[1,336,"ICMP：网际控制报文协议"]],[336,336],[349,349]]],[1550575620969,["gjx16@GJXAIOU",[[1,350,"   - \n"]],[349,349],[355,355]]],[1550575627197,["gjx16@GJXAIOU",[[1,355,"IGMP："]],[355,355],[360,360]]],[1550575659216,["gjx16@GJXAIOU",[[1,360,"网网际组管理协议"]],[360,360],[368,368]]],[1550575662152,["gjx16@GJXAIOU",[[-1,361,"网"]],[362,362],[361,361]]],[1550576820361,["gjx16@GJXAIOU",[[-1,259,"  IP  ARP "]],[258,268],[258,258]]],[1550576822426,["gjx16@GJXAIOU",[[1,274," IP  ARP  "]],[272,272],[282,282]]],[1550576831909,["gjx16@GJXAIOU",[[1,271,"（）"]],[271,271],[273,273]]],[1550576837235,["gjx16@GJXAIOU",[[1,272,"这两进程"]],[272,272],[276,276]]],[1550576838689,["gjx16@GJXAIOU",[[-1,274,"进程"]],[276,276],[274,274]]],[1550576845367,["gjx16@GJXAIOU",[[1,274,"经常使用IP协议"]],[274,274],[282,282]]],[1550576852674,["gjx16@GJXAIOU",[[-1,296,"（后三个主要和IP协议配套使用）"]],[311,311],[296,296]]],[1550576856802,["gjx16@GJXAIOU",[[1,290,"（）"]],[290,290],[292,292]]],[1550576866029,["gjx16@GJXAIOU",[[1,291,"经常使用ARP协议"]],[291,291],[300,300]]],[1550576990094,["gjx16@GJXAIOU",[[1,15,"\n"]],[12,12],[13,13]]],[1550576990196,["gjx16@GJXAIOU",[[1,16,"\n"]],[13,13],[14,14]]],[1550576992337,["gjx16@GJXAIOU",[[1,14,"****"]],[14,14],[16,16]]],[1550577001941,["gjx16@GJXAIOU",[[1,16,"各层中间设备名称："]],[16,16],[25,25]]],[1550577003754,["gjx16@GJXAIOU",[[1,30,"\n"]],[27,27],[28,28]]],[1550577014141,["gjx16@GJXAIOU",[[1,28,"- 物理层：转发器"]],[28,28],[37,37]]],[1550577014547,["gjx16@GJXAIOU",[[1,38,"- \n"]],[37,37],[40,40]]],[1550577028453,["gjx16@GJXAIOU",[[1,40,"数据链路层：网桥、桥接器"]],[40,40],[52,52]]],[1550577028970,["gjx16@GJXAIOU",[[1,53,"- \n"]],[52,52],[55,55]]],[1550577032988,["gjx16@GJXAIOU",[[1,55,"网络层："]],[55,55],[59,59]]],[1550577036808,["gjx16@GJXAIOU",[[1,59,"路由器"]],[59,59],[62,62]]],[1550577037277,["gjx16@GJXAIOU",[[1,63,"- \n"]],[62,62],[65,65]]],[1550577046994,["gjx16@GJXAIOU",[[1,65,"网络层以上：网关"]],[65,65],[73,73]]],[1550578964370,["gjx16@GJXAIOU",[[1,74,"- \n"]],[73,73],[76,76]]],[1550579676477,["gjx16@GJXAIOU",[[1,455,"\n"]],[454,454],[455,455]]],[1550579677450,["gjx16@GJXAIOU",[[1,456,"\n"]],[455,455],[456,456]]],[1550579700390,["gjx16@GJXAIOU",[[1,456,"- 物理地址：是数据链路层和物理层使用的地址"]],[456,456],[478,478]]],[1550579700858,["gjx16@GJXAIOU",[[1,479,"- \n"]],[478,478],[481,481]]],[1550579728137,["gjx16@GJXAIOU",[[1,481,"IP地址：是网络层和以上各层使用的地址，是一种逻辑地址；"]],[481,481],[509,509]]],[1550579730561,["gjx16@GJXAIOU",[[1,478,"；"]],[478,478],[479,479]]],[1550579752747,["gjx16@GJXAIOU",[[1,511,"- \n"]],[510,510],[513,513]]],[1550579765387,["gjx16@GJXAIOU",[[1,513,"IP地址的IP数据包"]],[513,513],[523,523]]],[1550579765947,["gjx16@GJXAIOU",[[-1,522,"包"]],[523,523],[522,522]]],[1550579795185,["gjx16@GJXAIOU",[[1,522,"报一旦交到数据链路层，被封装成MAC帧，MAC帧"]],[522,522],[546,546]]],[1550579797547,["gjx16@GJXAIOU",[[-1,541,"，"]],[542,542],[541,541]]],[1550579797918,["gjx16@GJXAIOU",[[1,541,"。"]],[541,541],[542,542]]],[1550579842248,["gjx16@GJXAIOU",[[1,546,"在传送时候使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在《"]],[546,546],[580,580]]],[1550579843339,["gjx16@GJXAIOU",[[-1,579,"《"]],[580,580],[579,579]]],[1550579850575,["gjx16@GJXAIOU",[[1,579,"MAC帧的首部。"]],[579,579],[587,587]]],[1550579946932,["gjx16@GJXAIOU",[[1,588,"- \n"]],[587,587],[590,590]]],[1550580046636,["gjx16@GJXAIOU",[[1,1294,"- \n"]],[1293,1293],[1296,1296]]],[1550580047149,["gjx16@GJXAIOU",[[-1,1294,"- "]],[1296,1296],[1295,1295]]],[1550580049532,["gjx16@GJXAIOU",[[1,1295,"- "]],[1295,1295],[1297,1297]]],[1550580052755,["gjx16@GJXAIOU",[[-1,1295,"- "]],[1297,1297],[1295,1295]]],[1550580055094,["gjx16@GJXAIOU",[[1,1295,"- ****"]],[1295,1295],[1299,1299]]],[1550580071175,["gjx16@GJXAIOU",[[1,1299,"工作过程："]],[1299,1299],[1304,1304]]],[1550580073644,["gjx16@GJXAIOU",[[1,1307,"- \n"]],[1306,1306],[1309,1309]]],[1550580076019,["gjx16@GJXAIOU",[[-1,1307,"- "]],[1309,1309],[1307,1307]]],[1550580077427,["gjx16@GJXAIOU",[[1,1307,"  "]],[1307,1307],[1309,1309]]],[1550580198099,["gjx16@GJXAIOU",[[1,1309,"每一台主机上都有一个ARP告诉"]],[1309,1309],[1324,1324]]],[1550580198812,["gjx16@GJXAIOU",[[-1,1322,"告诉"]],[1324,1324],[1322,1322]]],[1550580214815,["gjx16@GJXAIOU",[[1,1322,"高速缓存，里面含有本局域网上的"]],[1322,1322],[1337,1337]]],[1550580253997,["gjx16@GJXAIOU",[[1,1337,"各主机和路由器的IP地址到硬件地址的映射表，这些都是主句"]],[1337,1337],[1365,1365]]],[1550580262987,["gjx16@GJXAIOU",[[-1,1362,"是主句"]],[1365,1365],[1362,1362]]],[1550580275610,["gjx16@GJXAIOU",[[1,1362,"是主机目前知道的一些"]],[1362,1362],[1372,1372]]],[1550580277906,["gjx16@GJXAIOU",[[1,1372,"地址。"]],[1372,1372],[1375,1375]]],[1550580394680,["gjx16@GJXAIOU",[[1,1375,"例如当主机A需要想本局域网中某台"]],[1375,1375],[1391,1391]]],[1550580404797,["gjx16@GJXAIOU",[[1,1391,"主句B发送IP数据包"]],[1391,1391],[1401,1401]]],[1550580406419,["gjx16@GJXAIOU",[[-1,1398,"数据包"]],[1401,1401],[1398,1398]]],[1550580448072,["gjx16@GJXAIOU",[[1,1398,"数据报，就现在A的ARP高速缓存中查找有无B的IP地址，"]],[1398,1398],[1426,1426]]],[1550580515768,["gjx16@GJXAIOU",[[1,1426,"如有，就在ARP高速缓存中查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过"]],[1426,1426],[1468,1468]]],[1550580544288,["gjx16@GJXAIOU",[[1,1468,"局域网将此MAC地址发往此硬件地址；"]],[1468,1468],[1486,1486]]],[1550580544906,["gjx16@GJXAIOU",[[-1,1485,"；"]],[1486,1486],[1485,1485]]],[1550580549584,["gjx16@GJXAIOU",[[1,1485,"。如果没有，"]],[1485,1485],[1491,1491]]],[1550580594386,["gjx16@GJXAIOU",[[1,1491,"如果找不到B的IP地址，"]],[1491,1491],[1503,1503]]]],null,"gjx16@GJXAIOU"],["6f0ce534-085d-4d6e-be48-d0a70cf33c64",1550638395983,"# 网络层\n\n@toc\n\n\n**各层中间设备名称：**\n- 物理层：转发器\n- 数据链路层：网桥、桥接器\n- 网络层：路由器\n- 网络层以上：网关\n- \n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n\n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\n ICMP  IGMP  （这两经常使用IP协议）    IP （经常使用ARP协议） ARP  \n   - IP：网际协议\n   - APR： 地址解析协议\n   - ICMP：网际控制报文协议\n   - IGMP：网际组管理协议\n\n\n### 1.ARP协议  \n\n- 物理地址：是数据链路层和物理层使用的地址；\n- IP地址：是网络层和以上各层使用的地址，是一种逻辑地址；\n- IP地址的IP数据报一旦交到数据链路层，被封装成MAC帧。MAC帧在传送时候使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在MAC帧的首部。\n- \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n- **工作过程：**\n  每一台主机上都有一个ARP高速缓存，里面含有本局域网上的各主机和路由器的IP地址到硬件地址的映射表，这些都是主机目前知道的一些地址。例如当主机A需要想本局域网中某台主句B发送IP数据报，就现在A的ARP高速缓存中查找有无B的IP地址，如有，就在ARP高速缓存中查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将此MAC地址发往此硬件地址。如果没有，如果找不到B的IP地址，\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议  \n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、IP 协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n\n### 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n\n### 2.动态路由协议   \n\n**RIP**   \n路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   \nRIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n**最大跳数：15跳**   \n\n \n\n**OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n\n\n",[[1550638340761,["gjx16@GJXAIOU",[[1,1503,"，"]],[1503,1503],[1504,1504]]],[1550638341701,["gjx16@GJXAIOU",[[-1,1503,"，"]],[1504,1504],[1503,1503]]],[1550638364666,["gjx16@GJXAIOU",[[1,1503,"则主机A将自动运行ARP"]],[1503,1503],[1515,1515]]],[1550638409243,["gjx16@GJXAIOU",[[1,1515,"，运行过程将"]],[1515,1515],[1521,1521]]],[1550638410039,["gjx16@GJXAIOU",[[-1,1520,"将"]],[1521,1521],[1520,1520]]],[1550638427417,["gjx16@GJXAIOU",[[1,1520,"见上面的“负责解析MAC地址”"]],[1520,1520],[1535,1535]]],[1550639985595,["gjx16@GJXAIOU",[[1,1319,"\n  ****"]],[1319,1319],[1324,1324]]],[1550639986895,["gjx16@GJXAIOU",[[-1,1324,"**"]],[1324,1324],[1322,1322]]],[1550639989790,["gjx16@GJXAIOU",[[-1,1322,"**"]],[1324,1324],[1322,1322]]],[1550639996231,["gjx16@GJXAIOU",[[1,2760,"\n"]],[2758,2758],[2759,2759]]],[1550639997169,["gjx16@GJXAIOU",[[1,2761,"\n"]],[2759,2759],[2760,2760]]],[1550639998124,["gjx16@GJXAIOU",[[1,2760,"****"]],[2760,2760],[2762,2762]]],[1550640004715,["gjx16@GJXAIOU",[[1,2762,"生存时间TTL："]],[2762,2762],[2770,2770]]],[1550640006145,["gjx16@GJXAIOU",[[1,2772," "]],[2772,2772],[2773,2773]]],[1550640016826,["gjx16@GJXAIOU",[[1,2773,"表面"]],[2773,2773],[2775,2775]]],[1550640017680,["gjx16@GJXAIOU",[[-1,2773,"表面"]],[2775,2775],[2773,2773]]],[1550640024659,["gjx16@GJXAIOU",[[1,2773,"表明数据报在网络中传递"]],[2773,2773],[2784,2784]]],[1550640025374,["gjx16@GJXAIOU",[[-1,2782,"传递"]],[2784,2784],[2782,2782]]],[1550640071486,["gjx16@GJXAIOU",[[1,2782,"的寿命，该字段功能原来是以秒，现在是跳数限制"]],[2782,2782],[2804,2804]]],[1550640081661,["gjx16@GJXAIOU",[[1,2804,"，每转发一次跳水"]],[2804,2804],[2812,2812]]],[1550640084510,["gjx16@GJXAIOU",[[-1,2810,"跳水"]],[2812,2812],[2810,2810]]],[1550640117012,["gjx16@GJXAIOU",[[1,2810,"TTL值减1，，"]],[2810,2810],[2818,2818]]],[1550640117879,["gjx16@GJXAIOU",[[-1,2817,"，"]],[2818,2818],[2817,2817]]],[1550640133035,["gjx16@GJXAIOU",[[1,2817,"减到0时候不再转发，丢弃。"]],[2817,2817],[2830,2830]]],[1550640173906,["gjx16@GJXAIOU",[[1,2830,"最大"]],[2830,2830],[2832,2832]]],[1550640174920,["gjx16@GJXAIOU",[[-1,2830,"最大"]],[2832,2832],[2830,2830]]],[1550640180796,["gjx16@GJXAIOU",[[1,2810,"（）"]],[2810,2810],[2812,2812]]],[1550640185282,["gjx16@GJXAIOU",[[1,2811,"经过路由器"]],[2811,2811],[2816,2816]]],[1550640188449,["gjx16@GJXAIOU",[[1,2839,"\n"]],[2837,2837],[2838,2838]]],[1550640191705,["gjx16@GJXAIOU",[[1,2838,"- "]],[2838,2838],[2840,2840]]],[1550640205274,["gjx16@GJXAIOU",[[1,2840,"最大数据为：255"]],[2840,2840],[2849,2849]]],[1550640205871,["gjx16@GJXAIOU",[[1,2850,"- \n"]],[2849,2849],[2852,2852]]],[1550640228170,["gjx16@GJXAIOU",[[1,2852,"TTL初始值为1：只能在本局域网中传输。"]],[2852,2852],[2872,2872]]],[1550640313057,["gjx16@GJXAIOU",[[1,2873,"- \n"]],[2872,2872],[2875,2875]]],[1550640313192,["gjx16@GJXAIOU",[[-1,2873,"- "]],[2875,2875],[2874,2874]]],[1550640318515,["gjx16@GJXAIOU",[[1,2874,"****"]],[2874,2874],[2876,2876]]],[1550640324146,["gjx16@GJXAIOU",[[1,2876,"首部检验和："]],[2876,2876],[2882,2882]]],[1550640352854,["gjx16@GJXAIOU",[[1,2884," 该字段只检验数据报的首部，但不包括数据不符"]],[2884,2884],[2906,2906]]],[1550640353750,["gjx16@GJXAIOU",[[-1,2904,"不符"]],[2906,2906],[2904,2904]]],[1550640368556,["gjx16@GJXAIOU",[[1,2904,"部分；，"]],[2904,2904],[2908,2908]]],[1550640371815,["gjx16@GJXAIOU",[[-1,2907,"，"]],[2908,2908],[2907,2907]]],[1550640393620,["gjx16@GJXAIOU",[[1,2907,"数据部分是使用CRC检验码，"]],[2907,2907],[2921,2921]]],[1550640399551,["gjx16@GJXAIOU",[[-1,2920,"，"]],[2921,2921],[2920,2920]]],[1550640399939,["gjx16@GJXAIOU",[[1,2920,"。"]],[2920,2920],[2921,2921]]],[1550640400880,["gjx16@GJXAIOU",[[1,2922,"\n"]],[2921,2921],[2922,2922]]],[1550641969480,["gjx16@GJXAIOU",[[1,3758,"\n"]],[3754,3754],[3755,3755]]],[1550641969627,["gjx16@GJXAIOU",[[1,3759,"\n"]],[3755,3755],[3756,3756]]],[1550641969750,["gjx16@GJXAIOU",[[1,3760,"\n"]],[3756,3756],[3757,3757]]],[1550641971100,["gjx16@GJXAIOU",[[1,3757,"****"]],[3757,3757],[3759,3759]]],[1550641974039,["gjx16@GJXAIOU",[[-1,3760,"*"]],[3759,3759],[3758,3758]]],[1550641975282,["gjx16@GJXAIOU",[[1,3760,"***"]],[3758,3758],[3759,3759]]],[1550641985067,["gjx16@GJXAIOU",[[1,3759,"IP层转发分组的流程"]],[3759,3759],[3769,3769]]],[1550641987310,["gjx16@GJXAIOU",[[-1,3771,"**"]],[3773,3773],[3771,3771]]],[1550641988119,["gjx16@GJXAIOU",[[1,3775,"\n"]],[3771,3771],[3772,3772]]],[1550641988264,["gjx16@GJXAIOU",[[1,3776,"\n"]],[3772,3772],[3773,3773]]],[1550641991813,["gjx16@GJXAIOU",[[1,3773,"- IP"]],[3773,3773],[3777,3777]]],[1550641996272,["gjx16@GJXAIOU",[[-1,3775,"IP"]],[3777,3777],[3775,3775]]],[1550642015384,["gjx16@GJXAIOU",[[1,3775,"路由表中，每一条路由最重要的信息：（）"]],[3775,3775],[3794,3794]]],[1550642026362,["gjx16@GJXAIOU",[[1,3793,"目的网络地址，下一跳地址"]],[3793,3793],[3805,3805]]],[1550642644680,["gjx16@GJXAIOU",[[1,3807,"- \n"]],[3806,3806],[3809,3809]]],[1550642649527,["gjx16@GJXAIOU",[[-1,3807,"- "]],[3809,3809],[3807,3807]]],[1550642650607,["gjx16@GJXAIOU",[[1,3811,"\n"]],[3807,3807],[3808,3808]]],[1550642652174,["gjx16@GJXAIOU",[[1,3808,"****"]],[3808,3808],[3810,3810]]],[1550642656181,["gjx16@GJXAIOU",[[1,3810,"带转发的"]],[3810,3810],[3814,3814]]],[1550642658873,["gjx16@GJXAIOU",[[-1,3810,"带"]],[3811,3811],[3810,3810]]],[1550642661385,["gjx16@GJXAIOU",[[1,3810,"待"]],[3810,3810],[3811,3811]]],[1550642684508,["gjx16@GJXAIOU",[[1,3814,"数据报怎么找到下一跳的路由器："]],[3814,3814],[3829,3829]]],[1550642689274,["gjx16@GJXAIOU",[[1,3835,"\n"]],[3831,3831],[3832,3832]]],[1550642709039,["gjx16@GJXAIOU",[[1,3836,"\n"]],[3831,3831],[3832,3832]]],[1550642728395,["gjx16@GJXAIOU",[[1,3832,"收到一个带转发"]],[3832,3832],[3839,3839]]],[1550642729552,["gjx16@GJXAIOU",[[-1,3836,"带转发"]],[3839,3839],[3836,3836]]],[1550642751506,["gjx16@GJXAIOU",[[1,3836,"待转发的数据报，从路由表中得到下一跳的"]],[3836,3836],[3855,3855]]],[1550642753528,["gjx16@GJXAIOU",[[-1,3854,"的"]],[3855,3855],[3854,3854]]],[1550642774387,["gjx16@GJXAIOU",[[1,3854,"路由器的IP地址，将此IP地址交给"]],[3854,3854],[3871,3871]]],[1550642798596,["gjx16@GJXAIOU",[[1,3871,"数据链路层的网络接口软件，该软件时运"]],[3871,3871],[3889,3889]]],[1550642799392,["gjx16@GJXAIOU",[[-1,3887,"时运"]],[3889,3889],[3887,3887]]],[1550642812757,["gjx16@GJXAIOU",[[1,3887,"使用ARP将下一跳的IP{"]],[3887,3887],[3900,3900]]],[1550642813295,["gjx16@GJXAIOU",[[-1,3899,"{"]],[3900,3900],[3899,3899]]],[1550642833540,["gjx16@GJXAIOU",[[1,3899,"地址转换为硬件地址，然后将硬件地址"]],[3899,3899],[3916,3916]]],[1550642880906,["gjx16@GJXAIOU",[[1,3916,"放入链路层的MAC帧首部，，然后"]],[3916,3916],[3932,3932]]],[1550642883095,["gjx16@GJXAIOU",[[-1,3929,"，"]],[3930,3930],[3929,3929]]],[1550642892900,["gjx16@GJXAIOU",[[1,3931,"根据该硬件地址找到"]],[3931,3931],[3940,3940]]],[1550642907003,["gjx16@GJXAIOU",[[1,3940,"下一跳路由器。"]],[3940,3940],[3947,3947]]],[1550662696987,["gjx16@GJXAIOU",[[1,3806,"、"]],[3806,3806],[3807,3807]]],[1550662697374,["gjx16@GJXAIOU",[[1,3808,"- \n"]],[3807,3807],[3810,3810]]],[1550662699680,["gjx16@GJXAIOU",[[-1,3808,"- "]],[3810,3810],[3808,3808]]],[1550662703313,["gjx16@GJXAIOU",[[1,3808,"；"]],[3808,3808],[3809,3809]]],[1550662707390,["gjx16@GJXAIOU",[[-1,3808,"；"]],[3809,3809],[3808,3808]]],[1550662719067,["gjx16@GJXAIOU",[[1,3808,"路由表并没有给出"]],[3808,3808],[3816,3816]]],[1550662723215,["gjx16@GJXAIOU",[[-1,3815,"出"]],[3816,3816],[3815,3815]]],[1550662743050,["gjx16@GJXAIOU",[[1,3815,"分组指出到某个网络的完整路径（）"]],[3815,3815],[3831,3831]]],[1550662751827,["gjx16@GJXAIOU",[[1,3830,"即先经过哪一个，后经过"]],[3830,3830],[3841,3841]]],[1550662754979,["gjx16@GJXAIOU",[[1,3841,"哪一个，"]],[3841,3841],[3845,3845]]],[1550662818916,["gjx16@GJXAIOU",[[1,3845,"路由表"]],[3845,3845],[3848,3848]]],[1550662822110,["gjx16@GJXAIOU",[[-1,3844,"，路由表"]],[3848,3848],[3844,3844]]],[1550662870964,["gjx16@GJXAIOU",[[1,3845,"路由表仅仅指出到某个网络应该先到某个路由器，到达之后在查询当前路由器的路由表，得到"]],[3845,3845],[3886,3886]]],[1550662882603,["gjx16@GJXAIOU",[[1,3886,"下一跳，以此类推。"]],[3886,3886],[3895,3895]]],[1550663321280,["gjx16@GJXAIOU",[[1,3895,"（）"]],[3895,3895],[3897,3897]]],[1550663347444,["gjx16@GJXAIOU",[[1,3896,"怎么确定下一跳就是要使用上面的路由协议"]],[3896,3896],[3915,3915]]],[1550663569150,["gjx16@GJXAIOU",[[1,3918,"\n"]],[3916,3916],[3917,3917]]],[1550663569518,["gjx16@GJXAIOU",[[1,3919,"\n"]],[3917,3917],[3918,3918]]],[1550663580086,["gjx16@GJXAIOU",[[1,3918,"- 每一个路由器都应该知道"]],[3918,3918],[3931,3931]]],[1550663585191,["gjx16@GJXAIOU",[[-1,3929,"知道"]],[3931,3931],[3929,3929]]],[1550663590185,["gjx16@GJXAIOU",[[1,3929,"能够"]],[3929,3929],[3931,3931]]],[1550663620474,["gjx16@GJXAIOU",[[1,3931,"从路由表查出应怎样到达其他网络的下一跳 路由器。"]],[3931,3931],[3955,3955]]],[1550664338639,["gjx16@GJXAIOU",[[-1,1589," "]],[1590,1590],[1589,1589]]],[1550664341110,["gjx16@GJXAIOU",[[1,1590,"\n"]],[1589,1589],[1590,1590]]],[1550664351873,["gjx16@GJXAIOU",[[1,1590,"- 允许主句或路由器"]],[1590,1590],[1600,1600]]],[1550664354686,["gjx16@GJXAIOU",[[-1,1594,"主句"]],[1596,1596],[1594,1594]]],[1550664356636,["gjx16@GJXAIOU",[[1,1594,"主机"]],[1594,1594],[1596,1596]]],[1550664371971,["gjx16@GJXAIOU",[[1,1600,"报告差错情况和提供有关"]],[1600,1600],[1611,1611]]],[1550664378315,["gjx16@GJXAIOU",[[1,1611,"异常的报告。"]],[1611,1611],[1617,1617]]],[1550664391816,["gjx16@GJXAIOU",[[1,1618,"- \n"]],[1617,1617],[1620,1620]]],[1550664413324,["gjx16@GJXAIOU",[[1,1620,"ICMP报文是作为数据部分装在IP数据报中。"]],[1620,1620],[1642,1642]]],[1550664511070,["gjx16@GJXAIOU",[[1,2088,"\n"]],[2086,2086],[2087,2087]]],[1550664511232,["gjx16@GJXAIOU",[[1,2089,"\n"]],[2087,2087],[2088,2088]]],[1550664511400,["gjx16@GJXAIOU",[[1,2090,"\n"]],[2088,2088],[2089,2089]]],[1550664515142,["gjx16@GJXAIOU",[[1,1643,"- \n"]],[1642,1642],[1645,1645]]],[1550664515285,["gjx16@GJXAIOU",[[-1,1643,"- "]],[1645,1645],[1644,1644]]],[1550664515448,["gjx16@GJXAIOU",[[1,1644,"\n"]],[1644,1644],[1645,1645]]],[1550664515700,["gjx16@GJXAIOU",[[1,1645,"\n"]],[1645,1645],[1646,1646]]],[1550664515909,["gjx16@GJXAIOU",[[1,1646,"\n"]],[1646,1646],[1647,1647]]],[1550664516061,["gjx16@GJXAIOU",[[1,1647,"\n"]],[1647,1647],[1648,1648]]],[1550664516303,["gjx16@GJXAIOU",[[1,1648,"\n"]],[1648,1648],[1649,1649]]],[1550664613944,["gjx16@GJXAIOU",[[1,1644,"![ICMP报文格式’]($resource/ICMP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E2%80%99.png)"]],[1644,1644],[1722,1722]]],[1550664637337,["gjx16@GJXAIOU",[[1,1726,"\n"]],[1721,1721],[1722,1722]]],[1550664645922,["gjx16@GJXAIOU",[[1,1722,"- ICMP报文分类："]],[1722,1722],[1733,1733]]],[1550664646279,["gjx16@GJXAIOU",[[1,1734,"- \n"]],[1733,1733],[1736,1736]]],[1550664647434,["gjx16@GJXAIOU",[[1,1734,"  "]],[1736,1736],[1738,1738]]],[1550664660661,["gjx16@GJXAIOU",[[1,1738,"ICMP差错报告报文"]],[1738,1738],[1748,1748]]],[1550664661105,["gjx16@GJXAIOU",[[1,1749,"  - \n"]],[1748,1748],[1753,1753]]],[1550664670108,["gjx16@GJXAIOU",[[1,1753,"ICMP询问报文"]],[1753,1753],[1761,1761]]],[1550664670535,["gjx16@GJXAIOU",[[1,1762,"  - \n"]],[1761,1761],[1766,1766]]],[1550664844295,["gjx16@GJXAIOU",[[-1,1762,"  - "]],[1766,1766],[1762,1762]]],[1550664854425,["gjx16@GJXAIOU",[[1,1762,"![ICMP报文类型]($resource/ICMP%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B.png)"]],[1762,1762],[1830,1830]]],[1550664859688,["gjx16@GJXAIOU",[[1,1762,"  - \n"]],[1761,1761],[1766,1766]]],[1550664861599,["gjx16@GJXAIOU",[[-1,1764,"- "]],[1766,1766],[1764,1764]]],[1550664863931,["gjx16@GJXAIOU",[[1,1764,"-"]],[1764,1764],[1765,1765]]],[1550664866385,["gjx16@GJXAIOU",[[-1,1762,"  -"]],[1765,1765],[1762,1762]]],[1550664873794,["gjx16@GJXAIOU",[[1,1762,"- ICMP报文类型："]],[1762,1762],[1773,1773]]],[1550665552746,["gjx16@GJXAIOU",[[1,3694,"\n"]],[3693,3693],[3694,3694]]],[1550665552919,["gjx16@GJXAIOU",[[1,3695,"\n"]],[3694,3694],[3695,3695]]],[1550665553089,["gjx16@GJXAIOU",[[1,3696,"\n"]],[3695,3695],[3696,3696]]],[1550665553223,["gjx16@GJXAIOU",[[1,3697,"\n"]],[3696,3696],[3697,3697]]],[1550665560886,["gjx16@GJXAIOU",[[1,3694,"-也叫"]],[3694,3694],[3697,3697]]],[1550665563545,["gjx16@GJXAIOU",[[1,3695," "]],[3695,3695],[3696,3696]]],[1550665577502,["gjx16@GJXAIOU",[[1,3698,"自适应路由选择"]],[3698,3698],[3705,3705]]],[1550665578967,["gjx16@GJXAIOU",[[1,3706,"- \n"]],[3705,3705],[3708,3708]]],[1550665579121,["gjx16@GJXAIOU",[[-1,3706,"- "]],[3708,3708],[3707,3707]]],[1550665579321,["gjx16@GJXAIOU",[[1,3710,"\n"]],[3707,3707],[3708,3708]]],[1550665597482,["gjx16@GJXAIOU",[[1,3607,"\n"]],[3605,3605],[3606,3606]]],[1550665597623,["gjx16@GJXAIOU",[[1,3608,"\n"]],[3606,3606],[3607,3607]]],[1550665602743,["gjx16@GJXAIOU",[[-1,3460,"IP "]],[3463,3463],[3460,3460]]],[1550665605982,["gjx16@GJXAIOU",[[1,3460,"路由选择"]],[3460,3460],[3464,3464]]],[1550665609015,["gjx16@GJXAIOU",[[-1,3609,"\n"]],[3607,3607],[3606,3606]]],[1550665628220,["gjx16@GJXAIOU",[[1,3710,"- 互联网中主要是采用自适应）（"]],[3710,3710],[3726,3726]]],[1550665629846,["gjx16@GJXAIOU",[[-1,3724,"）（"]],[3726,3726],[3724,3724]]],[1550665630778,["gjx16@GJXAIOU",[[1,3724,"（）"]],[3724,3724],[3726,3726]]],[1550665633789,["gjx16@GJXAIOU",[[1,3725,"动态的"]],[3725,3725],[3728,3728]]],[1550665643700,["gjx16@GJXAIOU",[[1,3729,"、分布式路由选择协议"]],[3729,3729],[3739,3739]]],[1550665648655,["gjx16@GJXAIOU",[[1,3740,"- \n"]],[3739,3739],[3742,3742]]],[1550665649729,["gjx16@GJXAIOU",[[1,3740,"  "]],[3742,3742],[3744,3744]]],[1550665663648,["gjx16@GJXAIOU",[[-1,3740,"  - "]],[3744,3744],[3740,3740]]],[1550665686581,["gjx16@GJXAIOU",[[1,3740,"- 同样路由选择协议分为：内部网关协议和"]],[3740,3740],[3760,3760]]],[1550665689310,["gjx16@GJXAIOU",[[-1,3757,"协议和"]],[3760,3760],[3757,3757]]],[1550665692131,["gjx16@GJXAIOU",[[1,3757,"协议（）"]],[3757,3757],[3761,3761]]],[1550665694558,["gjx16@GJXAIOU",[[1,3760,"IGP"]],[3760,3760],[3763,3763]]],[1550665703652,["gjx16@GJXAIOU",[[1,3764,"，外部网关协议（）"]],[3764,3764],[3773,3773]]],[1550665708989,["gjx16@GJXAIOU",[[1,3772,"EGP"]],[3772,3772],[3775,3775]]],[1550665915858,["gjx16@GJXAIOU",[[1,3607,"- 分类方法一："]],[3607,3607],[3615,3615]]],[1550665920998,["gjx16@GJXAIOU",[[-1,3617,"### "]],[3621,3621],[3617,3617]]],[1550665921343,["gjx16@GJXAIOU",[[-1,3616,"\n"]],[3617,3617],[3616,3616]]],[1550665923881,["gjx16@GJXAIOU",[[1,3616,"  - "]],[3616,3616],[3620,3620]]],[1550665928639,["gjx16@GJXAIOU",[[-1,3686,"###"]],[3689,3689],[3686,3686]]],[1550665929041,["gjx16@GJXAIOU",[[-1,3685,"\n"]],[3686,3686],[3685,3685]]],[1550665931200,["gjx16@GJXAIOU",[[1,3686,"  "]],[3685,3685],[3687,3687]]],[1550665931614,["gjx16@GJXAIOU",[[1,3687,"-"]],[3687,3687],[3688,3688]]],[1550665931770,["gjx16@GJXAIOU",[[1,3689," "]],[3688,3688],[3689,3689]]],[1550665936607,["gjx16@GJXAIOU",[[1,3703,"    "]],[3703,3703],[3707,3707]]],[1550665948252,["gjx16@GJXAIOU",[[1,3720,"- 分类方法二"]],[3720,3720],[3727,3727]]],[1550665950704,["gjx16@GJXAIOU",[[-1,3720,"- 分类方法二"]],[3727,3727],[3720,3720]]],[1550665951030,["gjx16@GJXAIOU",[[-1,3720,"\n"]],[3720,3720],[3719,3719]]],[1550665954047,["gjx16@GJXAIOU",[[1,3752,"\n- "]],[3749,3749],[3752,3752]]],[1550665959547,["gjx16@GJXAIOU",[[1,3752,"分类方法二："]],[3752,3752],[3758,3758]]],[1550665962080,["gjx16@GJXAIOU",[[1,3759,"  "]],[3767,3767],[3769,3769]]],[1550665966863,["gjx16@GJXAIOU",[[1,3752,"\n- "]],[3749,3749],[3752,3752]]],[1550665967632,["gjx16@GJXAIOU",[[-1,3750,"- "]],[3752,3752],[3750,3750]]],[1550665972375,["gjx16@GJXAIOU",[[1,3799,"  - \n"]],[3798,3798],[3803,3803]]],[1550665978147,["gjx16@GJXAIOU",[[1,3803,"分类标准："]],[3803,3803],[3808,3808]]],[1550666048142,["gjx16@GJXAIOU",[[1,3808,"将互联网分成次，分成很多的自治系统AS，每一个自治系统内部采用同一种协议技术管理路由器"]],[3808,3808],[3851,3851]]],[1550666059549,["gjx16@GJXAIOU",[[1,3851,"，即使用伤痛"]],[3851,3851],[3857,3857]]],[1550666060583,["gjx16@GJXAIOU",[[-1,3855,"伤痛"]],[3857,3857],[3855,3855]]],[1550666070695,["gjx16@GJXAIOU",[[1,3855,"相同的路由选择侧率"]],[3855,3855],[3864,3864]]],[1550666071665,["gjx16@GJXAIOU",[[-1,3862,"侧率"]],[3864,3864],[3862,3862]]],[1550666074924,["gjx16@GJXAIOU",[[1,3862,"策略。"]],[3862,3862],[3865,3865]]],[1550666100112,["gjx16@GJXAIOU",[[1,3866,"  - \n"]],[3865,3865],[3870,3870]]],[1550666101857,["gjx16@GJXAIOU",[[1,3868,"  "]],[3870,3870],[3872,3872]]],[1550666111827,["gjx16@GJXAIOU",[[1,3872,"内部：同一个自治系统"]],[3872,3872],[3882,3882]]],[1550666114771,["gjx16@GJXAIOU",[[1,3882,"内部，"]],[3882,3882],[3885,3885]]],[1550666115446,["gjx16@GJXAIOU",[[-1,3884,"，"]],[3885,3885],[3884,3884]]],[1550666130631,["gjx16@GJXAIOU",[[1,3884,"；外部：两个不同的自治系统（）"]],[3884,3884],[3899,3899]]],[1550666149550,["gjx16@GJXAIOU",[[1,3898,"因为可能使用不同的路由选择策略"]],[3898,3898],[3913,3913]]],[1550666177073,["gjx16@GJXAIOU",[[1,3874,"（）"]],[3874,3874],[3876,3876]]],[1550666187516,["gjx16@GJXAIOU",[[1,3875,"域内路由选择"]],[3875,3875],[3881,3881]]],[1550666192627,["gjx16@GJXAIOU",[[1,3895,"（）"]],[3895,3895],[3897,3897]]],[1550666202821,["gjx16@GJXAIOU",[[1,3896,"域间路由选择"]],[3896,3896],[3902,3902]]],[1550666780571,["gjx16@GJXAIOU",[[1,3931,"    - \n"]],[3930,3930],[3937,3937]]],[1550666789967,["gjx16@GJXAIOU",[[1,3937,"内部使用最多的蜥蜴"]],[3937,3937],[3946,3946]]],[1550666790775,["gjx16@GJXAIOU",[[-1,3944,"蜥蜴"]],[3946,3946],[3944,3944]]],[1550666791683,["gjx16@GJXAIOU",[[1,3944,"xiey"]],[3944,3944],[3948,3948]]],[1550666792956,["gjx16@GJXAIOU",[[-1,3944,"xiey"]],[3948,3948],[3944,3944]]],[1550666794747,["gjx16@GJXAIOU",[[1,3944,"xiy"]],[3944,3944],[3947,3947]]],[1550666795463,["gjx16@GJXAIOU",[[-1,3944,"xiy"]],[3947,3947],[3944,3944]]],[1550666806710,["gjx16@GJXAIOU",[[1,3944,"协议：RIP 和OSPF"]],[3944,3944],[3956,3956]]],[1550666808696,["gjx16@GJXAIOU",[[1,3957,"    - \n"]],[3956,3956],[3963,3963]]],[1550666815247,["gjx16@GJXAIOU",[[1,3963,"外部使用最多的额协议"]],[3963,3963],[3973,3973]]],[1550666823520,["gjx16@GJXAIOU",[[-1,3969,"的额协议"]],[3973,3973],[3969,3969]]],[1550666831876,["gjx16@GJXAIOU",[[1,3969,"的协议：BGP"]],[3969,3969],[3976,3976]]],[1550666839909,["gjx16@GJXAIOU",[[1,3976," ：边界网关协议"]],[3976,3976],[3984,3984]]],[1550667105914,["gjx16@GJXAIOU",[[1,3998,"\n"]],[3997,3997],[3998,3998]]],[1550667111697,["gjx16@GJXAIOU",[[1,3987,"- "]],[3987,3987],[3989,3989]]],[1550667117243,["gjx16@GJXAIOU",[[1,4118,"- "]],[4118,4118],[4120,4120]]],[1550667133057,["gjx16@GJXAIOU",[[1,4000,"   - 路由信息协议:shi"]],[4000,4000],[4015,4015]]],[1550667133241,["gjx16@GJXAIOU",[[1,4015,"y"]],[4015,4015],[4016,4016]]],[1550667134694,["gjx16@GJXAIOU",[[-1,4012,"shiy"]],[4016,4016],[4012,4012]]],[1550667150886,["gjx16@GJXAIOU",[[1,4012,"是一种基于距离向量的路由选择协议"]],[4012,4012],[4028,4028]]],[1550667162536,["gjx16@GJXAIOU",[[1,4029,"   - \n"]],[4028,4028],[4034,4034]]],[1550667185375,["gjx16@GJXAIOU",[[1,4034,"定义方式：与路由器直接相连的网络举例"]],[4034,4034],[4052,4052]]],[1550667186281,["gjx16@GJXAIOU",[[-1,4050,"举例"]],[4052,4052],[4050,4050]]],[1550667192717,["gjx16@GJXAIOU",[[1,4050,"距离路由器距离"]],[4050,4050],[4057,4057]]],[1550667213575,["gjx16@GJXAIOU",[[1,4057,"为：1，非直接相连的为经过的中间路由器数据"]],[4057,4057],[4078,4078]]],[1550667214224,["gjx16@GJXAIOU",[[-1,4076,"数据"]],[4078,4078],[4076,4076]]],[1550667220018,["gjx16@GJXAIOU",[[1,4076,"数目加1"]],[4076,4076],[4080,4080]]],[1550667225500,["gjx16@GJXAIOU",[[1,4067,"距离"]],[4067,4067],[4069,4069]]],[1550667252086,["gjx16@GJXAIOU",[[1,4082,"。距离也称为：跳数"]],[4082,4082],[4091,4091]]],[1550667267650,["gjx16@GJXAIOU",[[-1,4189,"**"]],[4191,4191],[4189,4189]]],[1550667268482,["gjx16@GJXAIOU",[[1,4189,"- "]],[4189,4189],[4191,4191]]],[1550667271656,["gjx16@GJXAIOU",[[-1,4199,"**"]],[4201,4201],[4199,4199]]],[1550667280025,["gjx16@GJXAIOU",[[1,4199,"，因此适用于小型网络"]],[4199,4199],[4209,4209]]],[1550667313577,["gjx16@GJXAIOU",[[1,4143,"- "]],[4143,4143],[4145,4145]]],[1550667317601,["gjx16@GJXAIOU",[[-1,4092,"路由器会周期性的广播自身连接的网络有哪些，需要经过路由器的个数。让下一级知道这条路径还通不通。   "]],[4092,4142],[4092,4092]]],[1550667319720,["gjx16@GJXAIOU",[[1,4166,"\n"]],[4165,4165],[4166,4166]]],[1550667334403,["gjx16@GJXAIOU",[[1,4166,"- RIP和OSPF都属于****"]],[4166,4166],[4181,4181]]],[1550667352997,["gjx16@GJXAIOU",[[1,4181,"分布式路由选择协议"]],[4181,4181],[4190,4190]]],[1550667378299,["gjx16@GJXAIOU",[[1,4192,"，"]],[4192,4192],[4193,4193]]],[1550667379232,["gjx16@GJXAIOU",[[1,4194,"- \n"]],[4193,4193],[4196,4196]]],[1550667381167,["gjx16@GJXAIOU",[[-1,4194,"- "]],[4196,4196],[4194,4194]]],[1550667381544,["gjx16@GJXAIOU",[[-1,4194,"\n"]],[4194,4194],[4193,4193]]],[1550667383608,["gjx16@GJXAIOU",[[-1,4192,"，"]],[4193,4193],[4192,4192]]],[1550667384235,["gjx16@GJXAIOU",[[1,4192,"；"]],[4192,4192],[4193,4193]]],[1550667384937,["gjx16@GJXAIOU",[[1,4194,"- \n"]],[4193,4193],[4196,4196]]],[1550667386768,["gjx16@GJXAIOU",[[1,4194,"  "]],[4196,4196],[4198,4198]]],[1550667392890,["gjx16@GJXAIOU",[[1,4198,"特点：1."]],[4198,4198],[4203,4203]]],[1550667393866,["gjx16@GJXAIOU",[[-1,4201,"1."]],[4203,4203],[4201,4201]]],[1550667394577,["gjx16@GJXAIOU",[[1,4203," - \n "]],[4201,4201],[4206,4206]]],[1550667395496,["gjx16@GJXAIOU",[[1,4204,"  "]],[4206,4206],[4208,4208]]],[1550667416108,["gjx16@GJXAIOU",[[1,4208,"1.仅和相邻路由器交换信息"]],[4208,4208],[4221,4221]]],[1550667448128,["gjx16@GJXAIOU",[[1,4223,"   - \n "]],[4221,4221],[4228,4228]]],[1550667464440,["gjx16@GJXAIOU",[[1,4228,"2.交换的是当前本路由器至少的全部信息"]],[4228,4228],[4247,4247]]],[1550667467289,["gjx16@GJXAIOU",[[-1,4240,"至少"]],[4242,4242],[4240,4240]]],[1550667469516,["gjx16@GJXAIOU",[[1,4240,"知道"]],[4240,4240],[4242,4242]]],[1550667473669,["gjx16@GJXAIOU",[[1,4247,"，"]],[4247,4247],[4248,4248]]],[1550667534797,["gjx16@GJXAIOU",[[1,4248,"即自己现在的"]],[4248,4248],[4254,4254]]],[1550667567269,["gjx16@GJXAIOU",[[1,4254,"路由表"]],[4254,4254],[4257,4257]]],[1550667742560,["gjx16@GJXAIOU",[[1,4259,"   - \n "]],[4257,4257],[4264,4264]]],[1550667755419,["gjx16@GJXAIOU",[[1,4264,"3.按固定的时间交换路由信息"]],[4264,4264],[4278,4278]]],[1550667971402,["gjx16@GJXAIOU",[[1,4280,"   - \n "]],[4278,4278],[4285,4285]]],[1550667971920,["gjx16@GJXAIOU",[[-1,4279,"    - "]],[4285,4285],[4280,4280]]],[1550667973795,["gjx16@GJXAIOU",[[1,4280,"-"]],[4280,4280],[4281,4281]]],[1550667974818,["gjx16@GJXAIOU",[[1,4282," "]],[4281,4281],[4282,4282]]],[1550667983907,["gjx16@GJXAIOU",[[1,4282,"距离算法见：P155"]],[4282,4282],[4292,4292]]],[1550668140416,["gjx16@GJXAIOU",[[1,4279,"    - \n"]],[4278,4278],[4285,4285]]],[1550668143959,["gjx16@GJXAIOU",[[1,4285,"不止扫"]],[4285,4285],[4288,4288]]],[1550668145191,["gjx16@GJXAIOU",[[-1,4285,"不止扫"]],[4288,4288],[4285,4285]]],[1550668149908,["gjx16@GJXAIOU",[[1,4285,"不知道全网的"]],[4285,4285],[4291,4291]]],[1550668181597,["gjx16@GJXAIOU",[[1,4291,"拓扑结构，知道每一个路由器到所欲偶"]],[4291,4291],[4308,4308]]],[1550668182983,["gjx16@GJXAIOU",[[-1,4305,"所欲偶"]],[4308,4308],[4305,4305]]],[1550668207668,["gjx16@GJXAIOU",[[1,4305,"所有网络的距离以及下一跳路由器。"]],[4305,4305],[4321,4321]]],[1550668660761,["gjx16@GJXAIOU",[[1,4533,"\n"]],[4531,4531],[4532,4532]]],[1550668667756,["gjx16@GJXAIOU",[[1,4532,"- 实现方式："]],[4532,4532],[4539,4539]]],[1550668668290,["gjx16@GJXAIOU",[[1,4540,"- \n"]],[4539,4539],[4542,4542]]],[1550668669248,["gjx16@GJXAIOU",[[1,4540,"  "]],[4542,4542],[4544,4544]]],[1550668691238,["gjx16@GJXAIOU",[[1,4544,"1.想本系统的所有路由器发送信息"]],[4544,4544],[4560,4560]]],[1550668699281,["gjx16@GJXAIOU",[[1,4561,"  - \n"]],[4560,4560],[4565,4565]]],[1550668701427,["gjx16@GJXAIOU",[[1,4565,"2."]],[4565,4565],[4567,4567]]],[1550668703368,["gjx16@GJXAIOU",[[-1,4546,"想"]],[4547,4547],[4546,4546]]],[1550668706207,["gjx16@GJXAIOU",[[1,4546,"向"]],[4546,4546],[4547,4547]]],[1550668741291,["gjx16@GJXAIOU",[[1,4567,"发送的信息为：本路由器相邻的所有路由器的链路状态（）"]],[4567,4567],[4593,4593]]],[1550668752151,["gjx16@GJXAIOU",[[1,4592,"链路状态：本路由器"]],[4592,4592],[4601,4601]]],[1550668767381,["gjx16@GJXAIOU",[[1,4601,"与哪些路由器相邻"]],[4601,4601],[4609,4609]]],[1550668783494,["gjx16@GJXAIOU",[[1,4610,"，以及该链路的度量（）"]],[4610,4610],[4621,4621]]],[1550668788144,["gjx16@GJXAIOU",[[1,4620,"距离、实验"]],[4620,4620],[4625,4625]]],[1550668788874,["gjx16@GJXAIOU",[[-1,4623,"实验"]],[4625,4625],[4623,4623]]],[1550668791420,["gjx16@GJXAIOU",[[1,4623,"时延。"]],[4623,4623],[4626,4626]]],[1550668792122,["gjx16@GJXAIOU",[[-1,4625,"。"]],[4626,4626],[4625,4625]]],[1550668792773,["gjx16@GJXAIOU",[[1,4625,"、。"]],[4625,4625],[4627,4627]]],[1550668793785,["gjx16@GJXAIOU",[[-1,4626,"。"]],[4627,4627],[4626,4626]]],[1550668799626,["gjx16@GJXAIOU",[[1,4626,"带宽、费用等等"]],[4626,4626],[4633,4633]]],[1550668807473,["gjx16@GJXAIOU",[[1,4635,"  - \n"]],[4634,4634],[4639,4639]]],[1550668810480,["gjx16@GJXAIOU",[[1,4639,"3.只有"]],[4639,4639],[4643,4643]]],[1550668861526,["gjx16@GJXAIOU",[[1,4643,"链路状态发生变化的时候，路由器才向所有路由器用洪泛法发送此消息。"]],[4643,4643],[4675,4675]]],[1550668912017,["gjx16@GJXAIOU",[[1,4676,"  - \n"]],[4675,4675],[4680,4680]]],[1550668912153,["gjx16@GJXAIOU",[[-1,4676,"  - "]],[4680,4680],[4677,4677]]],[1550668917705,["gjx16@GJXAIOU",[[1,4677,"最终建立"]],[4677,4677],[4681,4681]]],[1550668918458,["gjx16@GJXAIOU",[[1,4682,"\n"]],[4681,4681],[4682,4682]]],[1550668918587,["gjx16@GJXAIOU",[[1,4683,"\n"]],[4682,4682],[4683,4683]]],[1550668931591,["gjx16@GJXAIOU",[[1,4681,"一个链路状态"]],[4681,4681],[4687,4687]]],[1550668949919,["gjx16@GJXAIOU",[[1,4687,"数据库，即全网的拓扑结构图。"]],[4687,4687],[4701,4701]]],[1550669399561,["gjx16@GJXAIOU",[[1,5048,"\n"]],[5043,5043],[5044,5044]]],[1550669399722,["gjx16@GJXAIOU",[[1,5049,"\n"]],[5044,5044],[5045,5045]]],[1550669399883,["gjx16@GJXAIOU",[[1,5050,"\n"]],[5045,5045],[5046,5046]]],[1550669408587,["gjx16@GJXAIOU",[[1,77,"- \n"]],[73,73],[76,76]]],[1550669408713,["gjx16@GJXAIOU",[[-1,74,"- "]],[76,76],[75,75]]],[1550669408859,["gjx16@GJXAIOU",[[1,75,"\n"]],[75,75],[76,76]]],[1550669409211,["gjx16@GJXAIOU",[[1,76,"\n"]],[76,76],[77,77]]],[1550669409371,["gjx16@GJXAIOU",[[1,77,"\n"]],[77,77],[78,78]]],[1550669409512,["gjx16@GJXAIOU",[[1,78,"\n"]],[78,78],[79,79]]],[1550669409640,["gjx16@GJXAIOU",[[1,79,"\n"]],[79,79],[80,80]]],[1550669409760,["gjx16@GJXAIOU",[[1,80,"\n"]],[80,80],[81,81]]],[1550669409883,["gjx16@GJXAIOU",[[1,81,"\n"]],[81,81],[82,82]]],[1550669410017,["gjx16@GJXAIOU",[[1,82,"\n"]],[82,82],[83,83]]],[1550669410139,["gjx16@GJXAIOU",[[1,83,"\n"]],[83,83],[84,84]]],[1550669413474,["gjx16@GJXAIOU",[[-1,84,"-"]],[85,85],[84,84]]],[1550669413608,["gjx16@GJXAIOU",[[-1,83,"\n"]],[84,84],[83,83]]],[1550669416849,["gjx16@GJXAIOU",[[1,76,"****"]],[76,76],[78,78]]],[1550669422215,["gjx16@GJXAIOU",[[1,78,"路由器的结构"]],[78,78],[84,84]]],[1550669427798,["gjx16@GJXAIOU",[[1,78,"典型的"]],[78,78],[81,81]]],[1550669431685,["gjx16@GJXAIOU",[[1,87,":"]],[87,87],[88,88]]],[1550669433169,["gjx16@GJXAIOU",[[1,97,"\n"]],[90,90],[91,91]]],[1550669444433,["gjx16@GJXAIOU",[[1,91,"![典型的路由器结构]($resource/%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%93%E6%9E%84.jpg)"]],[91,91],[191,191]]],[1550669448045,["gjx16@GJXAIOU",[[1,197,"\n"]],[190,190],[191,191]]],[1550669448441,["gjx16@GJXAIOU",[[1,198,"\n"]],[191,191],[192,192]]],[1550669461340,["gjx16@GJXAIOU",[[1,192,"- keyi "]],[192,192],[199,199]]],[1550669462401,["gjx16@GJXAIOU",[[-1,194,"keyi "]],[199,199],[194,194]]],[1550669470035,["gjx16@GJXAIOU",[[1,194,"可以划分为两个部分："]],[194,194],[204,204]]],[1550669486040,["gjx16@GJXAIOU",[[1,204,"路由选择部分&分组转发部分"]],[204,204],[217,217]]],[1550669516383,["gjx16@GJXAIOU",[[1,218,"- \n"]],[217,217],[220,220]]],[1550669520809,["gjx16@GJXAIOU",[[1,218,"  "]],[220,220],[222,222]]],[1550669525756,["gjx16@GJXAIOU",[[1,222,"路由选择部分："]],[222,222],[229,229]]],[1550669569437,["gjx16@GJXAIOU",[[1,229,"路由选择处理机根据选定的路由选择协议构造出路由表，同时定期"]],[229,229],[258,258]]],[1550669570672,["gjx16@GJXAIOU",[[-1,256,"定期"]],[258,258],[256,256]]],[1550669575183,["gjx16@GJXAIOU",[[1,256,"更新路由表"]],[256,256],[261,261]]],[1550669580430,["gjx16@GJXAIOU",[[1,258,"维护"]],[258,258],[260,260]]],[1550669582625,["gjx16@GJXAIOU",[[1,264,"  - \n"]],[263,263],[268,268]]],[1550669639136,["gjx16@GJXAIOU",[[-1,264,"  - "]],[268,268],[265,265]]],[1550669639800,["gjx16@GJXAIOU",[[1,271,"\n"]],[265,265],[266,266]]],[1550669645304,["gjx16@GJXAIOU",[[1,264,"-  "]],[264,264],[267,267]]],[1550669646602,["gjx16@GJXAIOU",[[-1,266," "]],[267,267],[266,266]]],[1550669647664,["gjx16@GJXAIOU",[[1,264,"  "]],[266,266],[268,268]]],[1550669684534,["gjx16@GJXAIOU",[[1,268,"分组转发部分：交换结构&输入端口&输出端口"]],[268,268],[289,289]]],[1550669685260,["gjx16@GJXAIOU",[[1,290,"  - \n"]],[289,289],[294,294]]],[1550669689136,["gjx16@GJXAIOU",[[1,302,"\n"]],[295,295],[296,296]]],[1550669689289,["gjx16@GJXAIOU",[[1,303,"\n"]],[296,296],[297,297]]],[1550669701588,["gjx16@GJXAIOU",[[1,297,"- 转发和路由选择的区别："]],[297,297],[310,310]]],[1550669701871,["gjx16@GJXAIOU",[[1,311,"- \n"]],[310,310],[313,313]]],[1550669704872,["gjx16@GJXAIOU",[[1,311,"  "]],[313,313],[315,315]]],[1550669706825,["gjx16@GJXAIOU",[[-1,313,"- "]],[315,315],[313,313]]],[1550669710829,["gjx16@GJXAIOU",[[1,313,"转发值"]],[313,313],[316,316]]],[1550669714592,["gjx16@GJXAIOU",[[-1,315,"值"]],[316,316],[315,315]]],[1550669734980,["gjx16@GJXAIOU",[[1,315,"只涉及到一个交换机，就是将收到的IP数据包从"]],[315,315],[337,337]]],[1550669737312,["gjx16@GJXAIOU",[[-1,333,"数据包从"]],[337,337],[333,333]]],[1550669742780,["gjx16@GJXAIOU",[[1,333,"数据报从路由器的"]],[333,333],[341,341]]],[1550669744135,["gjx16@GJXAIOU",[[-1,340,"的"]],[341,341],[340,340]]],[1550669754494,["gjx16@GJXAIOU",[[1,340,"合适的端口转发出去；"]],[340,340],[350,350]]],[1550669754856,["gjx16@GJXAIOU",[[1,351,"  \n"]],[350,350],[353,353]]],[1550669762839,["gjx16@GJXAIOU",[[1,353,"路由选择设计"]],[353,353],[359,359]]],[1550669763617,["gjx16@GJXAIOU",[[-1,357,"设计"]],[359,359],[357,357]]],[1550669769421,["gjx16@GJXAIOU",[[1,357,"涉及多个路由器"]],[357,357],[364,364]]],[1550669773914,["gjx16@GJXAIOU",[[-1,321,"交换机"]],[324,324],[321,321]]],[1550669775951,["gjx16@GJXAIOU",[[1,321,"路由器"]],[321,321],[324,324]]],[1550669809636,["gjx16@GJXAIOU",[[1,364,"，转发表师兄路由表得出。"]],[364,364],[376,376]]],[1550669812433,["gjx16@GJXAIOU",[[-1,368,"师兄"]],[370,370],[368,368]]],[1550669815135,["gjx16@GJXAIOU",[[1,368,"是从"]],[368,368],[370,370]]],[1550669976081,["gjx16@GJXAIOU",[[-1,291," - "]],[294,294],[291,291]]],[1550669980825,["gjx16@GJXAIOU",[[1,374,"  \n"]],[373,373],[376,376]]],[1550669981324,["gjx16@GJXAIOU",[[-1,374,"  "],[1,376,"\n"]],[376,376],[375,375]]],[1550669982619,["gjx16@GJXAIOU",[[1,382,"\n"]],[375,375],[376,376]]],[1550670000159,["gjx16@GJXAIOU",[[1,376,"- 交换结构处理顺序"]],[376,376],[386,386]]],[1550670000754,["gjx16@GJXAIOU",[[1,387,"- \n"]],[386,386],[389,389]]],[1550670002867,["gjx16@GJXAIOU",[[-1,387,"- "]],[389,389],[387,387]]],[1550670007276,["gjx16@GJXAIOU",[[1,387,"-  "]],[387,387],[390,390]]],[1550670008995,["gjx16@GJXAIOU",[[1,387,"  "]],[390,390],[392,392]]],[1550670010507,["gjx16@GJXAIOU",[[1,392,"1."]],[392,392],[394,394]]],[1550670022255,["gjx16@GJXAIOU",[[1,394,"物理层进行比特接受"]],[394,394],[403,403]]],[1550670022697,["gjx16@GJXAIOU",[[1,404,"  - \n"]],[403,403],[408,408]]],[1550670032141,["gjx16@GJXAIOU",[[1,408,"2.数据链路层将"]],[408,408],[416,416]]],[1550670033002,["gjx16@GJXAIOU",[[-1,415,"将"]],[416,416],[415,415]]],[1550670036996,["gjx16@GJXAIOU",[[1,415,"去帧头帧尾"]],[415,415],[420,420]]],[1550670052672,["gjx16@GJXAIOU",[[1,421,"  - \n"]],[420,420],[425,425]]],[1550670063799,["gjx16@GJXAIOU",[[1,420,"交给网络层"]],[420,420],[425,425]]],[1550670064570,["gjx16@GJXAIOU",[[1,431,"  - \n"]],[425,425],[430,430]]],[1550670071412,["gjx16@GJXAIOU",[[1,430,"3.收到的"]],[430,430],[435,435]]],[1550670105077,["gjx16@GJXAIOU",[[1,435,"分组是交换路由信息的就送到路由选择部分的路由选择交换机"]],[435,435],[462,462]]],[1550670105484,["gjx16@GJXAIOU",[[1,468,"  - \n"]],[462,462],[467,467]]],[1550670121268,["gjx16@GJXAIOU",[[1,467,"3.收到的分组是数据分组，"]],[467,467],[480,480]]],[1550670170638,["gjx16@GJXAIOU",[[1,480,"按照分组首部的目的地址查找转发表，然后分组到达合数的"]],[480,480],[506,506]]],[1550670171417,["gjx16@GJXAIOU",[[-1,503,"合数的"]],[506,506],[503,503]]],[1550670177607,["gjx16@GJXAIOU",[[1,503,"合适的输出端口"]],[503,503],[510,510]]],[1550670178140,["gjx16@GJXAIOU",[[1,516,"  - \n"]],[510,510],[515,515]]],[1550670187995,["gjx16@GJXAIOU",[[1,515,"4.加帧头帧尾。。。。。"]],[515,515],[527,527]]],[1550670189953,["gjx16@GJXAIOU",[[-1,530,"- "]],[532,532],[530,530]]],[1550672819266,["gjx16@GJXAIOU",[[1,5513,"\n"]],[5506,5506],[5507,5507]]],[1550672819417,["gjx16@GJXAIOU",[[1,5514,"\n"]],[5507,5507],[5508,5508]]],[1550672819577,["gjx16@GJXAIOU",[[1,5515,"\n"]],[5508,5508],[5509,5509]]],[1550672819691,["gjx16@GJXAIOU",[[1,5516,"\n"]],[5509,5509],[5510,5510]]],[1550672819820,["gjx16@GJXAIOU",[[1,5517,"\n"]],[5510,5510],[5511,5511]]],[1550672822485,["gjx16@GJXAIOU",[[1,5511,"IPV……"]],[5511,5511],[5516,5516]]],[1550672824281,["gjx16@GJXAIOU",[[-1,5513,"V……"]],[5516,5516],[5513,5513]]],[1550672826544,["gjx16@GJXAIOU",[[1,5513,"V6"]],[5513,5513],[5515,5515]]],[1550672830140,["gjx16@GJXAIOU",[[1,5511,"## "]],[5511,5511],[5514,5514]]],[1550672833412,["gjx16@GJXAIOU",[[1,5525,"\n"]],[5519,5519],[5520,5520]]],[1550672838176,["gjx16@GJXAIOU",[[1,5520,"- 六"]],[5520,5520],[5523,5523]]],[1550672838851,["gjx16@GJXAIOU",[[-1,5521," 六"]],[5523,5523],[5521,5521]]],[1550672868157,["gjx16@GJXAIOU",[[1,5521," 流：互联网络上从特定源点到特定终点（）"]],[5521,5521],[5541,5541]]],[1550672871928,["gjx16@GJXAIOU",[[1,5540,"三波"]],[5540,5540],[5542,5542]]],[1550672873524,["gjx16@GJXAIOU",[[-1,5540,"三波"]],[5542,5542],[5540,5540]]],[1550672878809,["gjx16@GJXAIOU",[[1,5540,"单播或者多播"]],[5540,5540],[5546,5546]]],[1550672879451,["gjx16@GJXAIOU",[[-1,5544,"多播"]],[5546,5546],[5544,5544]]],[1550672881553,["gjx16@GJXAIOU",[[1,5544,"多播"]],[5544,5544],[5546,5546]]],[1550672884650,["gjx16@GJXAIOU",[[1,5547,"，的"]],[5547,5547],[5549,5549]]],[1550672908472,["gjx16@GJXAIOU",[[1,5549,"一系列的数据报（）"]],[5549,5549],[5558,5558]]],[1550672916068,["gjx16@GJXAIOU",[[1,5557,"如实时语音和是【"]],[5557,5557],[5565,5565]]],[1550672917811,["gjx16@GJXAIOU",[[-1,5563,"是【"]],[5565,5565],[5563,5563]]],[1550672923060,["gjx16@GJXAIOU",[[1,5563,"视频传输"]],[5563,5563],[5567,5567]]]],null,"gjx16@GJXAIOU"],["d63cd70b-c8cc-465d-b2ed-51ba51b0ce14",1550709150623,"# 网络层\n\n@toc\n\n\n**各层中间设备名称：**\n- 物理层：转发器\n- 数据链路层：网桥、桥接器\n- 网络层：路由器\n- 网络层以上：网关\n\n\n**典型的路由器的结构:**\n![典型的路由器结构]($resource/%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%93%E6%9E%84.jpg)\n\n- 可以划分为两个部分：路由选择部分&分组转发部分\n  - 路由选择部分：路由选择处理机根据选定的路由选择协议构造出路由表，同时更新维护路由表\n  - 分组转发部分：交换结构&输入端口&输出端口\n \n\n\n- 转发和路由选择的区别：\n  转发只涉及到一个路由器，就是将收到的IP数据报从路由器合适的端口转发出去；\n  路由选择涉及多个路由器，转发表是从路由表得出。\n\n\n- 交换结构处理顺序\n  -  1.物理层进行比特接受\n  - 2.数据链路层去帧头帧尾交给网络层\n  - 3.收到的分组是交换路由信息的就送到路由选择部分的路由选择交换机\n  - 3.收到的分组是数据分组，按照分组首部的目的地址查找转发表，然后分组到达合适的输出端口\n  - 4.加帧头帧尾。。。。。\n  \n\n\n\n\n\n\n \n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n\n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\n ICMP  IGMP  （这两经常使用IP协议）    IP （经常使用ARP协议） ARP  \n   - IP：网际协议\n   - APR： 地址解析协议\n   - ICMP：网际控制报文协议\n   - IGMP：网际组管理协议\n\n\n### 1.ARP协议  \n\n- 物理地址：是数据链路层和物理层使用的地址；\n- IP地址：是网络层和以上各层使用的地址，是一种逻辑地址；\n- IP地址的IP数据报一旦交到数据链路层，被封装成MAC帧。MAC帧在传送时候使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在MAC帧的首部。\n- \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n- **工作过程：**\n  每一台主机上都有一个\n  ARP高速缓存，里面含有本局域网上的各主机和路由器的IP地址到硬件地址的映射表，这些都是主机目前知道的一些地址。例如当主机A需要想本局域网中某台主句B发送IP数据报，就现在A的ARP高速缓存中查找有无B的IP地址，如有，就在ARP高速缓存中查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将此MAC地址发往此硬件地址。如果没有，如果找不到B的IP地址，则主机A将自动运行ARP，运行过程见上面的“负责解析MAC地址”\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议 \n- 允许主机或路由器报告差错情况和提供有关异常的报告。\n- ICMP报文是作为数据部分装在IP数据报中。\n\n![ICMP报文格式’]($resource/ICMP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E2%80%99.png)\n- ICMP报文分类：\n  - ICMP差错报告报文\n  - ICMP询问报文\n- ICMP报文类型：\n![ICMP报文类型]($resource/ICMP%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B.png)\n\n\n\n\n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**生存时间TTL：** 表明数据报在网络中的寿命，该字段功能原来是以秒，现在是跳数限制，每转发一次（经过路由器）TTL值减1，减到0时候不再转发，丢弃。\n- 最大数据为：255\n- TTL初始值为1：只能在本局域网中传输。\n\n**首部检验和：** 该字段只检验数据报的首部，但不包括数据部分；数据部分是使用CRC检验码。\n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、路由选择协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n- 分类方法一：\n  - 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n  -  2.动态路由协议   \n\n    - 也叫自适应路由选择\n\n- 互联网中主要是采用自适应（动态的）、分布式路由选择协议\n\n- 分类方法二：\n  - 同样路由选择协议分为：内部网关协议（IGP），外部网关协议（EGP）\n  - 分类标准：将互联网分成次，分成很多的自治系统AS，每一个自治系统内部采用同一种协议技术管理路由器，即使用相同的路由选择策略。\n    - 内部（域内路由选择）：同一个自治系统内部；外部（域间路由选择）：两个不同的自治系统（因为可能使用不同的路由选择策略）\n    - 内部使用最多的协议：RIP 和OSPF\n    - 外部使用最多的协议：BGP ：边界网关协议\n\n\n- **RIP**   \n   - 路由信息协议:是一种基于距离向量的路由选择协议\n   - 定义方式：与路由器直接相连的网络距离路由器距离为：1，非直接相连的距离为经过的中间路由器数目加1。距离也称为：跳数\n\n- RIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n- 最大跳数：15跳，因此适用于小型网络   \n\n- RIP和OSPF都属于**分布式路由选择协议**；\n  - 特点：\n    - 1.仅和相邻路由器交换信息\n    - 2.交换的是当前本路由器知道的全部信息，即自己现在的路由表\n    - 3.按固定的时间交换路由信息\n    - 不知道全网的拓扑结构，知道每一个路由器到所有网络的距离以及下一跳路由器。\n\n- 距离算法见：P155 \n\n- **OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n- 实现方式：\n  - 1.向本系统的所有路由器发送信息\n  - 2.发送的信息为：本路由器相邻的所有路由器的链路状态（链路状态：本路由器与哪些路由器相邻），以及该链路的度量（距离、时延、带宽、费用等等）\n  - 3.只有链路状态发生变化的时候，路由器才向所有路由器用洪泛法发送此消息。\n\n最终建立一个链路状态数据库，即全网的拓扑结构图。\n\n\n**IP层转发分组的流程**\n\n- 路由表中，每一条路由最重要的信息：（目的网络地址，下一跳地址）、\n路由表并没有给分组指出到某个网络的完整路径（即先经过哪一个，后经过哪一个）路由表仅仅指出到某个网络应该先到某个路由器，到达之后在查询当前路由器的路由表，得到下一跳，以此类推。（怎么确定下一跳就是要使用上面的路由协议）\n\n- 每一个路由器都应该能够从路由表查出应怎样到达其他网络的下一跳 路由器。\n\n**待转发的数据报怎么找到下一跳的路由器：**\n收到一个待转发的数据报，从路由表中得到下一跳路由器的IP地址，将此IP地址交给数据链路层的网络接口软件，该软件使用ARP将下一跳的IP地址转换为硬件地址，然后将硬件地址放入链路层的MAC帧首部，然后根据该硬件地址找到下一跳路由器。\n\n\n\n\n\n## IPV6\n\n- 流：互联网络上从特定源点到特定终点（单播或者多播），的一系列的数据报（如实时语音和视频传输）\n\n\n\n\n\n",[[1550709110187,["gjx16@GJXAIOU",[[1,5569,"- \n"]],[5568,5568],[5571,5571]]],[1550709164264,["gjx16@GJXAIOU",[[1,5571,"IPV4向IPV6过渡："]],[5571,5571],[5583,5583]]],[1550709165677,["gjx16@GJXAIOU",[[-1,5582,"："]],[5583,5583],[5582,5582]]],[1550709193908,["gjx16@GJXAIOU",[[1,5582,"方案：双协议栈；隧道技术"]],[5582,5582],[5594,5594]]],[1550709194733,["gjx16@GJXAIOU",[[1,5595,"- \n"]],[5594,5594],[5597,5597]]],[1550709196147,["gjx16@GJXAIOU",[[1,5597,"·"]],[5597,5597],[5598,5598]]],[1550709197141,["gjx16@GJXAIOU",[[-1,5597,"·"]],[5598,5598],[5597,5597]]],[1550709198151,["gjx16@GJXAIOU",[[1,5595,"  "]],[5597,5597],[5599,5599]]],[1550709224226,["gjx16@GJXAIOU",[[1,5599,"双协议栈：主机（）"]],[5599,5599],[5608,5608]]],[1550709226986,["gjx16@GJXAIOU",[[1,5607,"路由器"]],[5607,5607],[5610,5610]]],[1550709230678,["gjx16@GJXAIOU",[[1,5611,"拥有"]],[5611,5611],[5613,5613]]],[1550709235431,["gjx16@GJXAIOU",[[-1,5611,"拥有"]],[5613,5613],[5611,5611]]],[1550709247235,["gjx16@GJXAIOU",[[1,5611,"同时拥有IPV4和IPV6协议栈"]],[5611,5611],[5627,5627]]],[1550709388374,["gjx16@GJXAIOU",[[1,5627,"，通信前"]],[5627,5627],[5631,5631]]],[1550709433866,["gjx16@GJXAIOU",[[1,5631,"通过域名系统DNS来判断目的主机"]],[5631,5631],[5647,5647]]],[1550709458195,["gjx16@GJXAIOU",[[1,5647,"是哪一种协议栈"]],[5647,5647],[5654,5654]]],[1550709472567,["gjx16@GJXAIOU",[[1,5655,"  - \n"]],[5654,5654],[5659,5659]]],[1550709481458,["gjx16@GJXAIOU",[[1,5659,"隧道技术：IPV6 "]],[5659,5659],[5669,5669]]],[1550709482183,["gjx16@GJXAIOU",[[-1,5668," "]],[5669,5669],[5668,5668]]],[1550709492891,["gjx16@GJXAIOU",[[1,5668,"是的数据报进入IPPV4"]],[5668,5668],[5680,5680]]],[1550709494774,["gjx16@GJXAIOU",[[-1,5677,"P"]],[5678,5678],[5677,5677]]],[1550709502841,["gjx16@GJXAIOU",[[1,5679,"网络时候，将IPV4 "]],[5679,5679],[5690,5690]]],[1550709505798,["gjx16@GJXAIOU",[[-1,5688,"4 "]],[5690,5690],[5688,5688]]],[1550709509243,["gjx16@GJXAIOU",[[1,5688,"6数据报"]],[5688,5688],[5692,5692]]],[1550709511030,["gjx16@GJXAIOU",[[1,5692,"作为"]],[5692,5692],[5694,5694]]],[1550709512181,["gjx16@GJXAIOU",[[-1,5692,"作为"]],[5694,5694],[5692,5692]]],[1550709518345,["gjx16@GJXAIOU",[[1,5692,"封装为IPV4 "]],[5692,5692],[5700,5700]]],[1550709519143,["gjx16@GJXAIOU",[[-1,5699," "]],[5700,5700],[5699,5699]]],[1550709564154,["gjx16@GJXAIOU",[[1,5699,"数据报的数据部分；当然该数据报的源地址和母的地址"]],[5699,5699],[5723,5723]]],[1550709567415,["gjx16@GJXAIOU",[[-1,5719,"母的"]],[5721,5721],[5719,5719]]],[1550709569803,["gjx16@GJXAIOU",[[1,5719,"目的"]],[5719,5719],[5721,5721]]],[1550709615992,["gjx16@GJXAIOU",[[1,5723,"分别为：进入和离开IPV4 "]],[5723,5723],[5737,5737]]],[1550709616646,["gjx16@GJXAIOU",[[-1,5736," "]],[5737,5737],[5736,5736]]],[1550709620065,["gjx16@GJXAIOU",[[1,5736,"网络的地址"]],[5736,5736],[5741,5741]]],[1550709677530,["gjx16@GJXAIOU",[[1,5741,"；同时封装时间IPV4首部的协议字段设置成为41，表示数据部分为IPV6数据报。"]],[5741,5741],[5781,5781]]],[1550709819622,["gjx16@GJXAIOU",[[1,5782,"  - \n"]],[5781,5781],[5786,5786]]],[1550709820309,["gjx16@GJXAIOU",[[-1,5782,"  - "]],[5786,5786],[5783,5783]]],[1550709824400,["gjx16@GJXAIOU",[[1,5569,"\n"]],[5569,5569],[5570,5570]]],[1550709839186,["gjx16@GJXAIOU",[[1,5784,"- ICMPV6"]],[5784,5784],[5792,5792]]],[1550709848238,["gjx16@GJXAIOU",[[1,5793,"- \n"]],[5792,5792],[5795,5795]]],[1550709849981,["gjx16@GJXAIOU",[[1,5793,"  "]],[5795,5795],[5797,5797]]],[1550709862674,["gjx16@GJXAIOU",[[1,5797,"包括地址解析协议ARP和"]],[5797,5797],[5809,5809]]],[1550709911427,["gjx16@GJXAIOU",[[1,5809,"网际组管理协议IGMP，因此网络层只有：ICMPV6和IPV6协议"]],[5809,5809],[5842,5842]]],[1550710086447,["gjx16@GJXAIOU",[[1,5847,"\n"]],[5843,5843],[5844,5844]]],[1550710086606,["gjx16@GJXAIOU",[[1,5848,"\n"]],[5844,5844],[5845,5845]]],[1550710086737,["gjx16@GJXAIOU",[[1,5849,"\n"]],[5845,5845],[5846,5846]]],[1550710093889,["gjx16@GJXAIOU",[[1,5846,"## IP多播"]],[5846,5846],[5853,5853]]],[1550710094326,["gjx16@GJXAIOU",[[1,5857,"\n"]],[5853,5853],[5854,5854]]],[1550710124652,["gjx16@GJXAIOU",[[1,5854,"多播数据报的母的"]],[5854,5854],[5862,5862]]],[1550710125668,["gjx16@GJXAIOU",[[-1,5860,"母的"]],[5862,5862],[5860,5860]]],[1550710166910,["gjx16@GJXAIOU",[[1,5860,"目的地址写入的是多播组的标识符，然后设法让加入到多播组的主句的IP地址和"]],[5860,5860],[5896,5896]]],[1550710183034,["gjx16@GJXAIOU",[[1,5896,"多播组的标识符相互关联；"]],[5896,5896],[5908,5908]]],[1550710201546,["gjx16@GJXAIOU",[[1,5854,"1."]],[5854,5854],[5856,5856]]],[1550710229151,["gjx16@GJXAIOU",[[1,5911,"2.多播组的标识符就是IP地址中的D类"]],[5911,5911],[5930,5930]]],[1550710239524,["gjx16@GJXAIOU",[[1,5930,"地址，多播"]],[5930,5930],[5935,5935]]],[1550710241799,["gjx16@GJXAIOU",[[-1,5933,"多播"]],[5935,5935],[5933,5933]]],[1550710242819,["gjx16@GJXAIOU",[[1,5933,"****"]],[5933,5933],[5935,5935]]],[1550710258047,["gjx16@GJXAIOU",[[1,5935,"多播地址只能应用于目的地址"]],[5935,5935],[5948,5948]]],[1550710289156,["gjx16@GJXAIOU",[[1,5950,"，同时多播数据报不产生ICMP"]],[5950,5950],[5965,5965]]],[1550710293270,["gjx16@GJXAIOU",[[1,5965,"差错报文"]],[5965,5965],[5969,5969]]],[1550710310105,["gjx16@GJXAIOU",[[1,5953,"**"],[1,5969,"**"]],[5953,5969],[5953,5973]]],[1550710313481,["gjx16@GJXAIOU",[[1,5973,"。"]],[5973,5973],[5974,5974]]],[1550710385119,["gjx16@GJXAIOU",[[1,5977,"\n"]],[5974,5974],[5975,5975]]],[1550710400156,["gjx16@GJXAIOU",[[1,5975,"3.需要两种协议配合：IGMP和"]],[5975,5975],[5991,5991]]],[1550710438490,["gjx16@GJXAIOU",[[1,5991,"多播路由选择协议"]],[5991,5991],[5999,5999]]],[1550710500280,["gjx16@GJXAIOU",[[1,6002,"\n"]],[5999,5999],[6000,6000]]],[1550710522974,["gjx16@GJXAIOU",[[1,6000,"- IGMP：是让连接在****"]],[6000,6000],[6014,6014]]],[1550710527660,["gjx16@GJXAIOU",[[1,6014,"本地局域网"]],[6014,6014],[6019,6019]]],[1550710538150,["gjx16@GJXAIOU",[[1,6021,"多行的多播路由器"]],[6021,6021],[6029,6029]]],[1550710541078,["gjx16@GJXAIOU",[[-1,6021,"多行"]],[6023,6023],[6021,6021]]],[1550710543094,["gjx16@GJXAIOU",[[1,6021,"多播"]],[6021,6021],[6023,6023]]],[1550710545320,["gjx16@GJXAIOU",[[-1,6021,"多播"]],[6023,6023],[6021,6021]]],[1550710548710,["gjx16@GJXAIOU",[[1,6021,"上"]],[6021,6021],[6022,6022]]],[1550710556027,["gjx16@GJXAIOU",[[1,6028,"知道****"]],[6028,6028],[6032,6032]]],[1550710560437,["gjx16@GJXAIOU",[[1,6032,"本局域网"]],[6032,6032],[6036,6036]]],[1550710588528,["gjx16@GJXAIOU",[[1,6038,"上是否有主机参与或者退出某个多播组"]],[6038,6038],[6055,6055]]],[1550710641439,["gjx16@GJXAIOU",[[1,6056,"- \n"]],[6055,6055],[6058,6058]]],[1550710643471,["gjx16@GJXAIOU",[[1,6056,"  "]],[6058,6058],[6060,6060]]],[1550710649219,["gjx16@GJXAIOU",[[1,6060,"IGMP使用IP"]],[6060,6060],[6068,6068]]],[1550710659558,["gjx16@GJXAIOU",[[1,6068,"数据报传递其报文（）"]],[6068,6068],[6078,6078]]],[1550710673220,["gjx16@GJXAIOU",[[1,6077,"即IGMP报文加上IP的首部"]],[6077,6077],[6091,6091]]],[1550710716854,["gjx16@GJXAIOU",[[1,6093,"  - \n"]],[6092,6092],[6097,6097]]],[1550710719694,["gjx16@GJXAIOU",[[-1,6094," - "]],[6097,6097],[6094,6094]]],[1550710722330,["gjx16@GJXAIOU",[[1,6094,"- "]],[6094,6094],[6096,6096]]],[1550710724735,["gjx16@GJXAIOU",[[-1,6093," "]],[6096,6096],[6095,6095]]],[1550710758014,["gjx16@GJXAIOU",[[1,6095,"多播路由选择协议：多播转发必须动态的适应多播组成员的变化"]],[6095,6095],[6123,6123]]],[1550710771527,["gjx16@GJXAIOU",[[1,6124,"- \n"]],[6123,6123],[6126,6126]]],[1550710773270,["gjx16@GJXAIOU",[[1,6124,"  "]],[6126,6126],[6128,6128]]],[1550710823621,["gjx16@GJXAIOU",[[1,6128,"隧道技术：如果两个多播网络之间的两个路由器不支持多播，就要在不支持的第一个路由器将多播数据包"]],[6128,6128],[6174,6174]]],[1550710825469,["gjx16@GJXAIOU",[[-1,6171,"数据包"]],[6174,6174],[6171,6171]]],[1550710829229,["gjx16@GJXAIOU",[[1,6171,"数据报进行"]],[6171,6171],[6176,6176]]],[1550710844574,["gjx16@GJXAIOU",[[1,6176,"再次封装，就是加上普通数据包的"]],[6176,6176],[6191,6191]]],[1550710845878,["gjx16@GJXAIOU",[[-1,6187,"数据包的"]],[6191,6191],[6187,6187]]],[1550710871955,["gjx16@GJXAIOU",[[1,6187,"数据报的首部，使之成为单一目的站的单播数据报。"]],[6187,6187],[6210,6210]]],[1550710909327,["gjx16@GJXAIOU",[[1,6211,"  - \n"]],[6210,6210],[6215,6215]]],[1550710909486,["gjx16@GJXAIOU",[[-1,6211,"  - "]],[6215,6215],[6212,6212]]],[1550710909640,["gjx16@GJXAIOU",[[1,6214,"\n"]],[6212,6212],[6213,6213]]],[1550710913234,["gjx16@GJXAIOU",[[1,6213,"- "]],[6213,6213],[6215,6215]]],[1550710917102,["gjx16@GJXAIOU",[[-1,6213,"- "]],[6215,6215],[6213,6213]]],[1550710924795,["gjx16@GJXAIOU",[[1,6213,"### 网络地址转换"]],[6213,6213],[6223,6223]]],[1550710936126,["gjx16@GJXAIOU",[[-1,6215,"#"]],[6216,6216],[6215,6215]]],[1550710945906,["gjx16@GJXAIOU",[[-1,6223,"\n"],[1,6224,"作用"]],[6223,6223],[6225,6225]]],[1550710948907,["gjx16@GJXAIOU",[[1,6225,"：将"]],[6225,6225],[6227,6227]]],[1550710960516,["gjx16@GJXAIOU",[[1,6227,"计算机本地地址转换为网络地址"]],[6227,6227],[6241,6241]]],[1550711053259,["gjx16@GJXAIOU",[[1,6241,"，因为内部通信的一些专用地址是不能用于互联网上的主机进行通信的。"]],[6241,6241],[6273,6273]]]],null,"gjx16@GJXAIOU"],["627fd487-79c5-4188-99a2-5f5415d362f1",1550844917377,"# 网络层\n\n@toc\n\n\n**各层中间设备名称：**\n- 物理层：转发器\n- 数据链路层：网桥、桥接器\n- 网络层：路由器\n- 网络层以上：网关\n\n\n**典型的路由器的结构:**\n![典型的路由器结构]($resource/%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%93%E6%9E%84.jpg)\n\n- 可以划分为两个部分：路由选择部分&分组转发部分\n  - 路由选择部分：路由选择处理机根据选定的路由选择协议构造出路由表，同时更新维护路由表\n  - 分组转发部分：交换结构&输入端口&输出端口\n \n\n\n- 转发和路由选择的区别：\n  转发只涉及到一个路由器，就是将收到的IP数据报从路由器合适的端口转发出去；\n  路由选择涉及多个路由器，转发表是从路由表得出。\n\n\n- 交换结构处理顺序\n  -  1.物理层进行比特接受\n  - 2.数据链路层去帧头帧尾交给网络层\n  - 3.收到的分组是交换路由信息的就送到路由选择部分的路由选择交换机\n  - 3.收到的分组是数据分组，按照分组首部的目的地址查找转发表，然后分组到达合适的输出端口\n  - 4.加帧头帧尾。。。。。\n  \n\n\n\n\n\n\n \n\n\n## 一、网络层功能\n在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n\n**数据包在Internet中传输图**  \n\n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n**网络层协议：**\n\n ICMP  IGMP  （这两经常使用IP协议）    IP （经常使用ARP协议） ARP  \n   - IP：网际协议\n   - APR： 地址解析协议\n   - ICMP：网际控制报文协议\n   - IGMP：网际组管理协议\n\n\n### 1.ARP协议  \n\n- 物理地址：是数据链路层和物理层使用的地址；\n- IP地址：是网络层和以上各层使用的地址，是一种逻辑地址；\n- IP地址的IP数据报一旦交到数据链路层，被封装成MAC帧。MAC帧在传送时候使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在MAC帧的首部。\n- \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n- **工作过程：**\n  每一台主机上都有一个\n  ARP高速缓存，里面含有本局域网上的各主机和路由器的IP地址到硬件地址的映射表，这些都是主机目前知道的一些地址。例如当主机A需要想本局域网中某台主句B发送IP数据报，就现在A的ARP高速缓存中查找有无B的IP地址，如有，就在ARP高速缓存中查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将此MAC地址发往此硬件地址。如果没有，如果找不到B的IP地址，则主机A将自动运行ARP，运行过程见上面的“负责解析MAC地址”\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议 \n- 允许主机或路由器报告差错情况和提供有关异常的报告。\n- ICMP报文是作为数据部分装在IP数据报中。\n\n![ICMP报文格式’]($resource/ICMP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E2%80%99.png)\n- ICMP报文分类：\n  - ICMP差错报告报文\n  - ICMP询问报文\n- ICMP报文类型：\n![ICMP报文类型]($resource/ICMP%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B.png)\n\n\n\n\n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**生存时间TTL：** 表明数据报在网络中的寿命，该字段功能原来是以秒，现在是跳数限制，每转发一次（经过路由器）TTL值减1，减到0时候不再转发，丢弃。\n- 最大数据为：255\n- TTL初始值为1：只能在本局域网中传输。\n\n**首部检验和：** 该字段只检验数据报的首部，但不包括数据部分；数据部分是使用CRC检验码。\n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、路由选择协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n- 分类方法一：\n  - 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n  -  2.动态路由协议   \n\n    - 也叫自适应路由选择\n\n- 互联网中主要是采用自适应（动态的）、分布式路由选择协议\n\n- 分类方法二：\n  - 同样路由选择协议分为：内部网关协议（IGP），外部网关协议（EGP）\n  - 分类标准：将互联网分成次，分成很多的自治系统AS，每一个自治系统内部采用同一种协议技术管理路由器，即使用相同的路由选择策略。\n    - 内部（域内路由选择）：同一个自治系统内部；外部（域间路由选择）：两个不同的自治系统（因为可能使用不同的路由选择策略）\n    - 内部使用最多的协议：RIP 和OSPF\n    - 外部使用最多的协议：BGP ：边界网关协议\n\n\n- **RIP**   \n   - 路由信息协议:是一种基于距离向量的路由选择协议\n   - 定义方式：与路由器直接相连的网络距离路由器距离为：1，非直接相连的距离为经过的中间路由器数目加1。距离也称为：跳数\n\n- RIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n- 最大跳数：15跳，因此适用于小型网络   \n\n- RIP和OSPF都属于**分布式路由选择协议**；\n  - 特点：\n    - 1.仅和相邻路由器交换信息\n    - 2.交换的是当前本路由器知道的全部信息，即自己现在的路由表\n    - 3.按固定的时间交换路由信息\n    - 不知道全网的拓扑结构，知道每一个路由器到所有网络的距离以及下一跳路由器。\n\n- 距离算法见：P155 \n\n- **OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n- 实现方式：\n  - 1.向本系统的所有路由器发送信息\n  - 2.发送的信息为：本路由器相邻的所有路由器的链路状态（链路状态：本路由器与哪些路由器相邻），以及该链路的度量（距离、时延、带宽、费用等等）\n  - 3.只有链路状态发生变化的时候，路由器才向所有路由器用洪泛法发送此消息。\n\n最终建立一个链路状态数据库，即全网的拓扑结构图。\n\n\n**IP层转发分组的流程**\n\n- 路由表中，每一条路由最重要的信息：（目的网络地址，下一跳地址）、\n路由表并没有给分组指出到某个网络的完整路径（即先经过哪一个，后经过哪一个）路由表仅仅指出到某个网络应该先到某个路由器，到达之后在查询当前路由器的路由表，得到下一跳，以此类推。（怎么确定下一跳就是要使用上面的路由协议）\n\n- 每一个路由器都应该能够从路由表查出应怎样到达其他网络的下一跳 路由器。\n\n**待转发的数据报怎么找到下一跳的路由器：**\n收到一个待转发的数据报，从路由表中得到下一跳路由器的IP地址，将此IP地址交给数据链路层的网络接口软件，该软件使用ARP将下一跳的IP地址转换为硬件地址，然后将硬件地址放入链路层的MAC帧首部，然后根据该硬件地址找到下一跳路由器。\n\n\n\n\n\n## IPV6\n\n- 流：互联网络上从特定源点到特定终点（单播或者多播），的一系列的数据报（如实时语音和视频传输）\n\n- IPV4向IPV6过渡方案：双协议栈；隧道技术\n  - 双协议栈：主机（路由器）同时拥有IPV4和IPV6协议栈，通信前通过域名系统DNS来判断目的主机是哪一种协议栈\n  - 隧道技术：IPV6是的数据报进入IPV4网络时候，将IPV6数据报封装为IPV4数据报的数据部分；当然该数据报的源地址和目的地址分别为：进入和离开IPV4网络的地址；同时封装时间IPV4首部的协议字段设置成为41，表示数据部分为IPV6数据报。\n\n- ICMPV6\n  - 包括地址解析协议ARP和网际组管理协议IGMP，因此网络层只有：ICMPV6和IPV6协议\n\n\n\n## IP多播\n1.多播数据报的目的地址写入的是多播组的标识符，然后设法让加入到多播组的主句的IP地址和多播组的标识符相互关联；\n2.多播组的标识符就是IP地址中的D类地址，**多播地址只能应用于目的地址**，同时**多播数据报不产生ICMP差错报文**。\n3.需要两种协议配合：IGMP和多播路由选择协议\n- IGMP：是让连接在**本地局域网**上的多播路由器知道**本局域网**上是否有主机参与或者退出某个多播组\n  - IGMP使用IP数据报传递其报文（即IGMP报文加上IP的首部）\n- 多播路由选择协议：多播转发必须动态的适应多播组成员的变化\n  - 隧道技术：如果两个多播网络之间的两个路由器不支持多播，就要在不支持的第一个路由器将多播数据报进行再次封装，就是加上普通数据报的首部，使之成为单一目的站的单播数据报。\n\n\n## 网络地址转换\n作用：将计算机本地地址转换为网络地址，因为内部通信的一些专用地址是不能用于互联网上的主机进行通信的。",[[1550844892062,["gjx16@GJXAIOU",[[1,2,"栈"]],[2,2],[3,3]]],[1550844893339,["gjx16@GJXAIOU",[[-1,2,"栈"]],[3,3],[2,2]]],[1550844896984,["gjx16@GJXAIOU",[[1,2,"章四："]],[2,2],[5,5]]],[1550844902192,["gjx16@GJXAIOU",[[1,10,"\n"]],[9,9],[10,10]]],[1550844906547,["gjx16@GJXAIOU",[[1,10,"文章结果Wie"]],[10,10],[17,17]]],[1550844908863,["gjx16@GJXAIOU",[[-1,10,"文章结果Wie"]],[17,17],[10,10]]],[1550844909651,["gjx16@GJXAIOU",[[1,10,"wen"]],[10,10],[13,13]]],[1550844910448,["gjx16@GJXAIOU",[[-1,10,"wen"]],[13,13],[10,10]]],[1550844917198,["gjx16@GJXAIOU",[[1,10,"文章结构为："]],[10,10],[16,16]]],[1550845035015,["gjx16@GJXAIOU",[[1,23,"## 一、路由器"]],[23,23],[31,31]]],[1550845038703,["gjx16@GJXAIOU",[[1,31,"分许"]],[31,31],[33,33]]],[1550845039746,["gjx16@GJXAIOU",[[-1,31,"分许"]],[33,33],[31,31]]],[1550845041613,["gjx16@GJXAIOU",[[1,31,"分析"]],[31,31],[33,33]]],[1550845044519,["gjx16@GJXAIOU",[[1,34,"\n"]],[33,33],[34,34]]],[1550845053308,["gjx16@GJXAIOU",[[1,35,"### 1."]],[35,35],[41,41]]],[1550845068747,["gjx16@GJXAIOU",[[1,103,"2."]],[103,103],[105,105]]],[1550845072552,["gjx16@GJXAIOU",[[-1,35,"### "]],[39,39],[35,35]]],[1550845072847,["gjx16@GJXAIOU",[[-1,34,"\n"]],[35,35],[34,34]]],[1550845074146,["gjx16@GJXAIOU",[[1,34,"\n"]],[34,34],[35,35]]],[1550845204652,["gjx16@GJXAIOU",[[-1,569,"一"]],[570,570],[569,569]]],[1550845205692,["gjx16@GJXAIOU",[[1,569,"二"]],[569,569],[570,570]]],[1550845312929,["gjx16@GJXAIOU",[[-1,639,"**数据包在Internet中传输图**  "]],[639,661],[639,639]]],[1550845313859,["gjx16@GJXAIOU",[[-1,641,"\n"]],[640,640],[639,639]]],[1550845314073,["gjx16@GJXAIOU",[[-1,640,"\n"]],[639,639],[638,638]]],[1550845314628,["gjx16@GJXAIOU",[[-1,639,"\n"]],[638,638],[637,637]]],[1550845315916,["gjx16@GJXAIOU",[[-1,638,"\n"]],[638,638],[637,637]]],[1550845426687,["gjx16@GJXAIOU",[[-1,565,"\n"]],[564,564],[563,563]]],[1550845426822,["gjx16@GJXAIOU",[[-1,562," "]],[563,563],[562,562]]],[1550845426961,["gjx16@GJXAIOU",[[-1,563,"\n"]],[562,562],[561,561]]],[1550845427191,["gjx16@GJXAIOU",[[-1,562,"\n"]],[561,561],[560,560]]],[1550845427344,["gjx16@GJXAIOU",[[-1,561,"\n"]],[560,560],[559,559]]],[1550845427575,["gjx16@GJXAIOU",[[-1,560,"\n"]],[559,559],[558,558]]],[1550845427736,["gjx16@GJXAIOU",[[-1,559,"\n"]],[558,558],[557,557]]],[1550845428447,["gjx16@GJXAIOU",[[-1,558,"\n"]],[557,557],[556,556]]],[1550845430491,["gjx16@GJXAIOU",[[1,556,"---"]],[556,556],[559,559]]],[1550845431360,["gjx16@GJXAIOU",[[1,561,"\n"]],[559,559],[560,560]]],[1550845433010,["gjx16@GJXAIOU",[[-1,553,"  "],[1,555,"\n"]],[553,553],[554,554]]],[1550845433720,["gjx16@GJXAIOU",[[1,555,"\n"]],[554,554],[555,555]]],[1550845446604,["gjx16@GJXAIOU",[[1,573,"  "],[1,633,"  "],[1,634,"  "],[1,665,"  "],[1,666,"  "],[1,688,"  "],[1,689,"  "]],[573,749],[573,763]]],[1550845447879,["gjx16@GJXAIOU",[[1,575,"  "],[1,637,"  "],[1,638,"  "],[1,671," "],[1,673," "],[1,674,"  "],[1,700,"  "],[1,701,"  "]],[573,763],[573,777]]],[1550845450624,["gjx16@GJXAIOU",[[-1,575,"  "],[-1,639,"  "],[-1,642,"  "],[-1,677," "],[-1,680," "],[-1,682,"  "],[-1,710,"  "],[-1,713,"  "]],[573,777],[573,763]]],[1550845451095,["gjx16@GJXAIOU",[[-1,573,"  "],[-1,635,"  "],[-1,638,"  "],[-1,671,"  "],[-1,674,"  "],[-1,698,"  "],[-1,701,"  "]],[573,763],[573,749]]],[1550845471739,["gjx16@GJXAIOU",[[-1,573,"在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n"],[1,750,"——"]],[573,573],[575,575]]],[1550845473868,["gjx16@GJXAIOU",[[1,573,"在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n同一网络中IP地址的网络部分是一样的   \n\n每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n"],[-1,573,"——"]],[575,575],[573,573]]],[1550845482411,["gjx16@GJXAIOU",[[1,573,"- "]],[573,573],[575,575]]],[1550845520988,["gjx16@GJXAIOU",[[1,636,"- "]],[636,636],[638,638]]],[1550845524541,["gjx16@GJXAIOU",[[1,670,"- "]],[670,670],[672,672]]],[1550845533077,["gjx16@GJXAIOU",[[1,695,"- "]],[695,695],[697,697]]],[1550845612999,["gjx16@GJXAIOU",[[-1,775,"**网络层协议：**"]],[775,785],[775,775]]]],null,"gjx16@GJXAIOU"],["233d8e3e-72d3-4a18-9604-f5b9485fee8d",1550900850108,"# 章四：网络层\n\n文章结构为：\n@toc\n\n## 一、路由器分析\n\n1.**各层中间设备名称：**\n- 物理层：转发器\n- 数据链路层：网桥、桥接器\n- 网络层：路由器\n- 网络层以上：网关\n\n\n2.**典型的路由器的结构:**\n![典型的路由器结构]($resource/%E5%85%B8%E5%9E%8B%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%93%E6%9E%84.jpg)\n\n- 可以划分为两个部分：路由选择部分&分组转发部分\n  - 路由选择部分：路由选择处理机根据选定的路由选择协议构造出路由表，同时更新维护路由表\n  - 分组转发部分：交换结构&输入端口&输出端口\n \n\n\n- 转发和路由选择的区别：\n  转发只涉及到一个路由器，就是将收到的IP数据报从路由器合适的端口转发出去；\n  路由选择涉及多个路由器，转发表是从路由表得出。\n\n\n- 交换结构处理顺序\n  -  1.物理层进行比特接受\n  - 2.数据链路层去帧头帧尾交给网络层\n  - 3.收到的分组是交换路由信息的就送到路由选择部分的路由选择交换机\n  - 3.收到的分组是数据分组，按照分组首部的目的地址查找转发表，然后分组到达合适的输出端口\n  - 4.加帧头帧尾。。。。。\n\n\n\n---\n\n\n## 二、网络层功能\n- 在数据上加上地址形成数据包，负责在不同网络中尽力转发数据包（基于数据包的IP地址），不负责丢失重传，不负责顺序。   \n\n- 互联网的复杂性主要体现在物理层介质和数据链路层的协议    \n\n- 同一网络中IP地址的网络部分是一样的   \n\n- 每个计算机必须配置网关，网关为与计算机相连接的路由器的接口地址， **一般使用该网段IP的第一个地址作为 网关地址。**\n\n\n\n\n## 二、网络层协议  \n\n\n ICMP  IGMP  （这两经常使用IP协议）    IP （经常使用ARP协议） ARP  \n   - IP：网际协议\n   - APR： 地址解析协议\n   - ICMP：网际控制报文协议\n   - IGMP：网际组管理协议\n\n\n### 1.ARP协议  \n\n- 物理地址：是数据链路层和物理层使用的地址；\n- IP地址：是网络层和以上各层使用的地址，是一种逻辑地址；\n- IP地址的IP数据报一旦交到数据链路层，被封装成MAC帧。MAC帧在传送时候使用的源地址和目的地址都是硬件地址，这两个硬件地址都写在MAC帧的首部。\n- \n[地址解析协议ARP](https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE)\n- 地址解析协议 (ARP) 是**通过解析网络层地址来找寻数据链路层地址**的一个在网络协议包中极其重要的网络传输协议。\n\n- ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。\n\n- **在IPv6中邻居发现协议 (NDP)用于代替地址解析协议**。\n[NDP协议](https://baike.baidu.com/item/NDP)\n\n\n\n- 负责解析MAC地址：  \n（只能在本网段，因为路由隔绝广播）\n将IP地址通过发送广播（广播中目标MAC地址为FF-FF-FF-FF-FF-FF），解析目标IP地址的MAC地址，交换机发送给所有口，计算机将自己的MAC地址回复，然后发送端计算机会将获得的MAC地址放入缓存之中，下面的通信不在需要询问此计算机的MAC地址，属于通信前的协议。    \n\n - 扫描本网段的MAC地址：`arp -a`\n  IP地址与MAC地址绑定:`arp -s ip地址 mac地址`\n\n\n- 可以用于ARP欺骗  \n\n- **工作过程：**\n  每一台主机上都有一个\n  ARP高速缓存，里面含有本局域网上的各主机和路由器的IP地址到硬件地址的映射表，这些都是主机目前知道的一些地址。例如当主机A需要想本局域网中某台主句B发送IP数据报，就现在A的ARP高速缓存中查找有无B的IP地址，如有，就在ARP高速缓存中查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将此MAC地址发往此硬件地址。如果没有，如果找不到B的IP地址，则主机A将自动运行ARP，运行过程见上面的“负责解析MAC地址”\n\n\n### 2.IP协议  \n负责在各个网段之间转发数据包   \n\n\n\n\n### 3.ICMP协议 \n- 允许主机或路由器报告差错情况和提供有关异常的报告。\n- ICMP报文是作为数据部分装在IP数据报中。\n\n![ICMP报文格式’]($resource/ICMP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F%E2%80%99.png)\n- ICMP报文分类：\n  - ICMP差错报告报文\n  - ICMP询问报文\n- ICMP报文类型：\n![ICMP报文类型]($resource/ICMP%E6%8A%A5%E6%96%87%E7%B1%BB%E5%9E%8B.png)\n\n\n\n\n负责测试网络层是否畅通，使用ping命令（packet Internet Grope  因特网包嗅探器）   \n\n    ping  www.baidu.com   可以看到网络延迟   \n    \n    TTL是数据包的生存时间，每过一个路由器都降低，直到减为1，最后就丢掉，防止这个包在网上一直循环。  \n      \n    根据TTL数值可以大致看出对方系统  Linux  64；  Windows 128 ；   Unix  255；  \n- `ping 局域网`网络延迟应该小于10ms   \n- `ping /?`得到所有ping命令    \n- `ping 地址 -t`    表示一直ping下去  \n- `ping -l 200`  表示用数据包为200字节的数据包来ping   \n- 发包的时候指定TTL：`ping  地址 -i TTL值 `  可以跟踪数据包经过的路由器  \n- `pathping`可以跟踪数据包路径，计算丢包情况。能看出来哪里断了\n\n\n\n\n\n\n### 4.IGMP协议（Internet 广播管理协议）  \n\n- **区别**   \n  - 点到点通信：无论通过多少个路由器，但是目标MAC地址很明确   \n\n  - 广播：目标MAC地址为全F，中间没有路由器，由交换机组成的网络，因为广播无法跨越路由器；数据包只发送一份    \n\n\n  - 组播=多播：同一交换机中计算机访问的是不同的内容，通过计算机绑定不同的多播地址，访问不同的数据；可以跨多个网段    \n\n  （点到点可以调整进度，但是多播无法调整进度）   \n\n\n- **使用方式**   \nIGMP协议绑定在连接交换机的路由器上面，可以扫描本网段哪些计算机绑定了多播地址；判断多播流是否还需要转发给本网段；  \n\n\n\n\n\n\n##  三、网络层如何转发数据包  \n\n**1.IP数据包组成：**   \n首部（固定部分（20个字节）和可变部分）+数据   \n\n![IP数据包构成]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85.png)\n\n![IP数据包分析]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90.png)\n\n\n**版本：** 显示TCP/IP协议的版本：IPV4、ipv6  \n\n**标识：** 在发送端为不同的数据包加上不同的标识，设定不同数据包的优先级，在路由转发也要设置相应的识别机制，整个体系为QOS；   \n\n**标志：** 占3位，标志字段的最低位是MF，当MF为1时候，表示后面还是有分片，当MF为0的时候，表示这是最后一个分片；   \n标志字段中间以为是DF，只有当DF为0的时候允许分片；   \n\n**生存时间TTL：** 表明数据报在网络中的寿命，该字段功能原来是以秒，现在是跳数限制，每转发一次（经过路由器）TTL值减1，减到0时候不再转发，丢弃。\n- 最大数据为：255\n- TTL初始值为1：只能在本局域网中传输。\n\n**首部检验和：** 该字段只检验数据报的首部，但不包括数据部分；数据部分是使用CRC检验码。\n\n**2.数据包大小与分片：**\n- 网络层传输最大的数据包大小为65535字节；   \n- 数据链路层传递的最大数据包（又叫做最大传输单元MTU）为1500字节；    \n- 数据链路层会将传过来的数据包再次分成片，分别加上mac地址等等；当原始数据小于1500-20=1480个字节时候，数据包不分片； 在接收端再按照分片的顺序进行组装。  \n\n\n![IP数据包分片举例]($resource/IP%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E7%89%87%E4%B8%BE%E4%BE%8B.png)\n\n\n\n\n\n## 四、路由选择协议   \n\nIP协议是一个统称，所有能够让路由器学习到路由表的协议均为IP协议，路由表分为静态路由（管理员配置转发路径）和动态路由     \n\n**网络畅通的条件：**  \n数据包有去有回（不通：要不没到要不没回来）   \n如果计算机不配置网关，就不能在各个网段中转发数据    \n\n- 分类方法一：\n  - 1.静态路由协议\n\n需要管理员告诉路由器网络下一跳给谁   \n\n**缺点：**  适合小规模网络，不能够自动调整路由    \n\n\n  -  2.动态路由协议   \n\n    - 也叫自适应路由选择\n\n- 互联网中主要是采用自适应（动态的）、分布式路由选择协议\n\n- 分类方法二：\n  - 同样路由选择协议分为：内部网关协议（IGP），外部网关协议（EGP）\n  - 分类标准：将互联网分成次，分成很多的自治系统AS，每一个自治系统内部采用同一种协议技术管理路由器，即使用相同的路由选择策略。\n    - 内部（域内路由选择）：同一个自治系统内部；外部（域间路由选择）：两个不同的自治系统（因为可能使用不同的路由选择策略）\n    - 内部使用最多的协议：RIP 和OSPF\n    - 外部使用最多的协议：BGP ：边界网关协议\n\n\n- **RIP**   \n   - 路由信息协议:是一种基于距离向量的路由选择协议\n   - 定义方式：与路由器直接相连的网络距离路由器距离为：1，非直接相连的距离为经过的中间路由器数目加1。距离也称为：跳数\n\n- RIP协议在通讯过程中会自动选择经过路由器少的路径，最佳路径不通之后会选择次一级    \n\n- 最大跳数：15跳，因此适用于小型网络   \n\n- RIP和OSPF都属于**分布式路由选择协议**；\n  - 特点：\n    - 1.仅和相邻路由器交换信息\n    - 2.交换的是当前本路由器知道的全部信息，即自己现在的路由表\n    - 3.按固定的时间交换路由信息\n    - 不知道全网的拓扑结构，知道每一个路由器到所有网络的距离以及下一跳路由器。\n\n- 距离算法见：P155 \n\n- **OSPF:**开放式最短路径优先   \n[OSPF](https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E5%BC%8F%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88)\n是对链路状态路由协议的一种实现，隶属于内部网关协议（IGP），采用戴克斯特拉算法计算最短路径树。\n\n- 实现方式：\n  - 1.向本系统的所有路由器发送信息\n  - 2.发送的信息为：本路由器相邻的所有路由器的链路状态（链路状态：本路由器与哪些路由器相邻），以及该链路的度量（距离、时延、带宽、费用等等）\n  - 3.只有链路状态发生变化的时候，路由器才向所有路由器用洪泛法发送此消息。\n\n最终建立一个链路状态数据库，即全网的拓扑结构图。\n\n\n**IP层转发分组的流程**\n\n- 路由表中，每一条路由最重要的信息：（目的网络地址，下一跳地址）、\n路由表并没有给分组指出到某个网络的完整路径（即先经过哪一个，后经过哪一个）路由表仅仅指出到某个网络应该先到某个路由器，到达之后在查询当前路由器的路由表，得到下一跳，以此类推。（怎么确定下一跳就是要使用上面的路由协议）\n\n- 每一个路由器都应该能够从路由表查出应怎样到达其他网络的下一跳 路由器。\n\n**待转发的数据报怎么找到下一跳的路由器：**\n收到一个待转发的数据报，从路由表中得到下一跳路由器的IP地址，将此IP地址交给数据链路层的网络接口软件，该软件使用ARP将下一跳的IP地址转换为硬件地址，然后将硬件地址放入链路层的MAC帧首部，然后根据该硬件地址找到下一跳路由器。\n\n\n\n\n\n## IPV6\n\n- 流：互联网络上从特定源点到特定终点（单播或者多播），的一系列的数据报（如实时语音和视频传输）\n\n- IPV4向IPV6过渡方案：双协议栈；隧道技术\n  - 双协议栈：主机（路由器）同时拥有IPV4和IPV6协议栈，通信前通过域名系统DNS来判断目的主机是哪一种协议栈\n  - 隧道技术：IPV6是的数据报进入IPV4网络时候，将IPV6数据报封装为IPV4数据报的数据部分；当然该数据报的源地址和目的地址分别为：进入和离开IPV4网络的地址；同时封装时间IPV4首部的协议字段设置成为41，表示数据部分为IPV6数据报。\n\n- ICMPV6\n  - 包括地址解析协议ARP和网际组管理协议IGMP，因此网络层只有：ICMPV6和IPV6协议\n\n\n\n## IP多播\n1.多播数据报的目的地址写入的是多播组的标识符，然后设法让加入到多播组的主句的IP地址和多播组的标识符相互关联；\n2.多播组的标识符就是IP地址中的D类地址，**多播地址只能应用于目的地址**，同时**多播数据报不产生ICMP差错报文**。\n3.需要两种协议配合：IGMP和多播路由选择协议\n- IGMP：是让连接在**本地局域网**上的多播路由器知道**本局域网**上是否有主机参与或者退出某个多播组\n  - IGMP使用IP数据报传递其报文（即IGMP报文加上IP的首部）\n- 多播路由选择协议：多播转发必须动态的适应多播组成员的变化\n  - 隧道技术：如果两个多播网络之间的两个路由器不支持多播，就要在不支持的第一个路由器将多播数据报进行再次封装，就是加上普通数据报的首部，使之成为单一目的站的单播数据报。\n\n\n## 网络地址转换\n作用：将计算机本地地址转换为网络地址，因为内部通信的一些专用地址是不能用于互联网上的主机进行通信的。",[[1550900819494,["gjx16@GJXAIOU",[[1,575,"**"],[1,630,"**"]],[575,630],[575,634]]],[1550900845145,["gjx16@GJXAIOU",[[-1,769,"二"]],[770,770],[769,769]]],[1550900847353,["gjx16@GJXAIOU",[[1,769,"sa"]],[769,769],[771,771]]],[1550900848345,["gjx16@GJXAIOU",[[-1,769,"sa"]],[771,771],[769,769]]],[1550900853072,["gjx16@GJXAIOU",[[1,769,"三"]],[769,769],[770,770]]],[1550901205544,["gjx16@GJXAIOU",[[1,917,"**"],[1,937,"**"]],[917,937],[917,941]]],[1550901212297,["gjx16@GJXAIOU",[[1,945,"**"],[1,972,"**"]],[945,972],[945,976]]],[1550901230291,["gjx16@GJXAIOU",[[-1,1055,"- "]],[1057,1057],[1055,1055]]],[1550901339416,["gjx16@GJXAIOU",[[-1,1785,"  "]],[1787,1787],[1785,1785]]],[1550901339937,["gjx16@GJXAIOU",[[-1,1784,"\n"]],[1785,1785],[1784,1784]]],[1550901564595,["gjx16@GJXAIOU",[[1,4092,"  "]],[4092,4092],[4094,4094]]],[1550901581860,["gjx16@GJXAIOU",[[1,4116,"  "]],[4116,4116],[4118,4118]]],[1550901620332,["gjx16@GJXAIOU",[[1,4164,"（）"]],[4164,4164],[4166,4166]]],[1550901627583,["gjx16@GJXAIOU",[[1,4165,"自适应路由选择"]],[4165,4165],[4172,4172]]],[1550901634168,["gjx16@GJXAIOU",[[-1,4178,"    - 也叫自适应路由选择"]],[4193,4193],[4178,4178]]],[1550901634538,["gjx16@GJXAIOU",[[-1,4179,"\n"]],[4178,4178],[4177,4177]]],[1550901635057,["gjx16@GJXAIOU",[[-1,4178,"\n"]],[4177,4177],[4176,4176]]],[1550901670681,["gjx16@GJXAIOU",[[1,3999,"### （）"]],[3999,3999],[4005,4005]]],[1550901672769,["gjx16@GJXAIOU",[[1,4004,"一"]],[4004,4004],[4005,4005]]],[1550901701925,["gjx16@GJXAIOU",[[1,5169,"### "]],[5169,5169],[5173,5173]]],[1550901707502,["gjx16@GJXAIOU",[[1,5373,"### "]],[5373,5373],[5377,5377]]],[1550901720524,["gjx16@GJXAIOU",[[1,4076,"\n"]],[4075,4075],[4076,4076]]],[1550901721083,["gjx16@GJXAIOU",[[1,4077,"\n"]],[4076,4076],[4077,4077]]],[1550901725610,["gjx16@GJXAIOU",[[1,4076,"### （）"]],[4076,4076],[4082,4082]]],[1550901728061,["gjx16@GJXAIOU",[[1,4081,"二"]],[4081,4081],[4082,4082]]],[1550901732497,["gjx16@GJXAIOU",[[1,4083,"路由歇息"]],[4083,4083],[4087,4087]]],[1550901733265,["gjx16@GJXAIOU",[[-1,4085,"歇息"]],[4087,4087],[4085,4085]]],[1550901742973,["gjx16@GJXAIOU",[[1,4085,"协议分类与简介"]],[4085,4085],[4092,4092]]],[1550901746345,["gjx16@GJXAIOU",[[-1,4016,"**  "]],[4020,4020],[4016,4016]]],[1550901749887,["gjx16@GJXAIOU",[[1,4088,"："]],[4088,4088],[4089,4089]]],[1550901755324,["gjx16@GJXAIOU",[[-1,4006,"**"]],[4008,4008],[4006,4006]]],[1550901761747,["gjx16@GJXAIOU",[[-1,4143,"** "]],[4146,4146],[4143,4143]]],[1550901764497,["gjx16@GJXAIOU",[[-1,4138,"**"]],[4140,4140],[4138,4138]]],[1550901777593,["gjx16@GJXAIOU",[[1,4460,"\n"]],[4458,4458],[4459,4459]]],[1550901790798,["gjx16@GJXAIOU",[[1,4459,"#### 1.主要协议介绍"]],[4459,4459],[4472,4472]]],[1550901815715,["gjx16@GJXAIOU",[[1,4580,"  "]],[4580,4580],[4582,4582]]],[1550901816826,["gjx16@GJXAIOU",[[1,4630,"  "]],[4630,4630],[4632,4632]]],[1550901818884,["gjx16@GJXAIOU",[[1,4657,"  "]],[4657,4657],[4659,4659]]],[1550901819732,["gjx16@GJXAIOU",[[1,4689,"  "]],[4689,4689],[4691,4691]]],[1550901820609,["gjx16@GJXAIOU",[[1,4701,"  "]],[4701,4701],[4703,4703]]],[1550901821427,["gjx16@GJXAIOU",[[1,4723,"  "]],[4725,4725],[4727,4727]]],[1550901822186,["gjx16@GJXAIOU",[[1,4761,"  "]],[4765,4765],[4767,4767]]],[1550901822668,["gjx16@GJXAIOU",[[1,4784,"  "]],[4788,4788],[4790,4790]]],[1550901825948,["gjx16@GJXAIOU",[[1,4826,"  "]],[4828,4828],[4830,4830]]],[1550901836766,["gjx16@GJXAIOU",[[1,4854," "]],[4854,4854],[4855,4855]]],[1550901879657,["gjx16@GJXAIOU",[[-1,4286,"成次"]],[4288,4288],[4286,4286]]],[1550901886305,["gjx16@GJXAIOU",[[1,4286,"层次"]],[4286,4286],[4288,4288]]],[1550902096506,["gjx16@GJXAIOU",[[1,4873,"-wilipedia"]],[4873,4873],[4883,4883]]],[1550902106125,["gjx16@GJXAIOU",[[1,4868,"  "]],[4868,4868],[4870,4870]]],[1550902114770,["gjx16@GJXAIOU",[[1,5050,"  "]],[5050,5050],[5052,5052]]],[1550902115524,["gjx16@GJXAIOU",[[1,5062,"  "]],[5062,5062],[5064,5064]]],[1550902116044,["gjx16@GJXAIOU",[[1,5085,"  "]],[5085,5085],[5087,5087]]],[1550902117050,["gjx16@GJXAIOU",[[1,5161,"  "]],[5161,5161],[5163,5163]]],[1550902147403,["gjx16@GJXAIOU",[[1,5203,"**"],[1,5227,"**"]],[5203,5227],[5203,5231]]],[1550902158407,["gjx16@GJXAIOU",[[1,5237,"wu"]],[5237,5237],[5239,5239]]],[1550902159539,["gjx16@GJXAIOU",[[-1,5237,"wu"]],[5239,5239],[5237,5237]]],[1550902159958,["gjx16@GJXAIOU",[[1,5238," "]],[5237,5237],[5238,5238]]],[1550902160684,["gjx16@GJXAIOU",[[1,5238,"weu"]],[5238,5238],[5241,5241]]],[1550902161953,["gjx16@GJXAIOU",[[-1,5238,"weu"]],[5241,5241],[5238,5238]]],[1550902175185,["gjx16@GJXAIOU",[[1,5238,"()"]],[5238,5238],[5240,5240]]],[1550902176909,["gjx16@GJXAIOU",[[1,5239,"san"]],[5239,5239],[5242,5242]]],[1550902177985,["gjx16@GJXAIOU",[[-1,5239,"san"]],[5242,5242],[5239,5239]]],[1550902180422,["gjx16@GJXAIOU",[[1,5239,"三"]],[5239,5239],[5240,5240]]],[1550902183163,["gjx16@GJXAIOU",[[-1,5242,"**"]],[5244,5244],[5242,5242]]],[1550902185873,["gjx16@GJXAIOU",[[-1,5252,"**"]],[5254,5254],[5252,5252]]],[1550902188776,["gjx16@GJXAIOU",[[-1,5442,"**"]],[5444,5444],[5442,5442]]],[1550902190374,["gjx16@GJXAIOU",[[1,5442,"（）"]],[5442,5442],[5444,5444]]],[1550902192075,["gjx16@GJXAIOU",[[1,5443,"四"]],[5443,5443],[5444,5444]]],[1550902196145,["gjx16@GJXAIOU",[[-1,5464,"**"]],[5466,5466],[5464,5464]]],[1550902227895,["gjx16@GJXAIOU",[[1,5584,"@toc"]],[5584,5584],[5588,5588]]],[1550902243716,["gjx16@GJXAIOU",[[-1,5584,"@toc"]],[5584,5588],[5584,5584]]],[1550902249781,["gjx16@GJXAIOU",[[-1,3920,"四"]],[3921,3921],[3920,3920]]],[1550902250415,["gjx16@GJXAIOU",[[1,3920,"wu"]],[3920,3920],[3922,3922]]],[1550902251514,["gjx16@GJXAIOU",[[-1,3920,"wu"]],[3922,3922],[3920,3920]]],[1550902252133,["gjx16@GJXAIOU",[[1,3920,"wu"]],[3920,3920],[3922,3922]]],[1550902253244,["gjx16@GJXAIOU",[[-1,3920,"wu"]],[3922,3922],[3920,3920]]],[1550902254906,["gjx16@GJXAIOU",[[1,3920,"五"]],[3920,3920],[3921,3921]]],[1550902259458,["gjx16@GJXAIOU",[[-1,3082,"三"]],[3083,3083],[3082,3082]]],[1550902260815,["gjx16@GJXAIOU",[[1,3082,"四"]],[3082,3082],[3083,3083]]],[1550902268809,["gjx16@GJXAIOU",[[1,5589,"六、"]],[5589,5589],[5591,5591]]],[1550902273674,["gjx16@GJXAIOU",[[1,5926," "]],[5925,5925],[5926,5926]]],[1550902275334,["gjx16@GJXAIOU",[[1,5926,"七、"]],[5926,5926],[5928,5928]]],[1550902277051,["gjx16@GJXAIOU",[[-1,5928," "]],[5929,5929],[5928,5928]]],[1550902282729,["gjx16@GJXAIOU",[[1,6295,"八、"]],[6295,6295],[6297,6297]]],[1550902345067,["gjx16@GJXAIOU",[[1,5900,"IPV6的"]],[5900,5900],[5905,5905]]],[1550902370900,["gjx16@GJXAIOU",[[1,5940,"**"],[1,5961,"**"]],[5940,5961],[5940,5965]]],[1550902465519,["gjx16@GJXAIOU",[[1,6312,"NAT"]],[6312,6312],[6315,6315]]]],null,"gjx16@GJXAIOU"]]}